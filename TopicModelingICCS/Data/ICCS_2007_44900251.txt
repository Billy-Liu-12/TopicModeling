Latency Estimation of the Asynchronous
Pipeline Using the Max-Plus Algebra
Jian Ruan, Zhiying Wang, Kui Dai, and Yong Li
School of Computer, National University of Defense Technology
Changsha, Hunan, P.R. China

Abstract. This paper presents a methodology to estimate the latency
of the asynchronous pipeline without choices. We propose modeling an
asynchronous pipeline with the timed event graph and characterizing
its speciﬁcation via the max-plus algebra. An evolution equation of the
event ﬁring epoch can be obtained, which is linear under the max-plus
algebraic formalism. In terms of the above-mentioned equation, we can
formulate the latency of the pipeline successfully. The case study shows
that our method is simple, fast and eﬀective.
Keywords: Asynchronous Pipeline, Max-Plus Algebra, Timed Event
Graph, Evolution Equation, Latency Estimation.

1

Introduction

Performance analysis of the asynchronous circuit, especially the asynchronous
pipeline, is attracting lots of research interest. In [1], Ramamoorthy et al. modeled asynchronous concurrent systems via the timed marked graph with deterministic ﬁring delays, and then used Karp’s theorem to determine the average
throughput in polynomial time. In [2], Kudva et al. proposed adopting Generalized Timed Petri Nets (GTPNs) to model asynchronous circuits in which
component delays are modeled using their mean values. As usual, the model is
then converted into a continues time Markov chain (CTMC) and solved for its
stable probability distribution. In [3,4], Xie and Beerel proposed a discrete time
model that can handle arbitrarily distributed delays. The model is converted
into a discrete time Markov chain (DTMC) and solved for its stationary distribution. To mitigate the state explosion problem, they developed a technique
called state compression to speed up the symbolic computation of the stationary
distribution of their DTMC models. Speciﬁcally, they reduced the state space
of the DTMC to one of the feedback vertex sets of its state space. Nevertheless,
even with these advances, the state explosion problem has limited Markov chain
based approaches to small models.
In this paper, we apply the timed event graph to model the asynchronous
pipeline. Using the max-plus algebra to describe the speciﬁcation, we can derive
a linear evolution equation of the event ﬁring times under the max-plus algebraic
formalism. Based on the periodicity of iterated evolution equation, the latency
can be formulated eﬀectively and estimated eﬃciently.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 251–258, 2007.
c Springer-Verlag Berlin Heidelberg 2007

252

J. Ruan et al.

The organization of this paper is as follows. Section 2 reviews the basics of the
max-plus algebra. Section 3 describes the way to model asynchronous pipelines
with the timed event graph. Section 4 illuminates the technique that how to
estimate the latency of the asynchronous pipeline by its linear evolution equation
in detail. Section 5 validates the conclusion by a 3-stage 4-phase bundled-data
linear asynchronous pipeline and section 6 gives some conclusions.

2

Elementary Max-Plus Algebra

In this section we give an introduction to the max-plus algebra which will be
used during the performance analysis of asynchronous pipelines. Most of the
material presented is selected from [5,6], where a complete overview of the maxplus algebra can be found.
2.1

Basic Concepts
def

Deﬁnition 1. The max-plus algebra Rmax is the set Rε = R ∪ {−∞} equipped
def

def

with the two internal operations ⊕ = max and ⊗ = +, the neutral element for
def
def
operation ⊕ is ε = −∞ and the unit element for operation ⊗ is e = 0.
Rmax = (Rε , ⊕, ⊗) is an idempotent commutative semi-ring, and the main difference with the conventional algebra (R, +, ×) is the fact that the operation ⊕
is idempotent, a ⊕ a = a and does not have an inverse.
Operations ⊕ and ⊗ can be extended to matrices with the classical
construction,
;
1. (A ⊕ B)i,j = Ai,j ⊕ Bi,j , where A, B ∈ Rm×n
ε
p
2. (A ⊗ B)i,j = k=1 (Ai,k ⊗ Bk,j ) , where A ∈ Rm×p
and B ∈ Rp×n
;
ε
ε
0
k
k
k
n×n 1
3. A = In , A + 1 = A ⊗ A = A ⊗ A, where A ∈ Rε .
2.2

Equation Solving

Solving linear equations in (max, +) is diﬀerent from the classical linear case. In
general, it may or may not have a solution. Moreover, even if a solution exists, it
may not be unique. However, there exists one class of linear equations for which
we have a satisfactory theory.
def

∞

i
, B ∈ Rnε . If matrix A is acyclic, A∗ =
Theorem 1. Let A ∈ Rn×n
ε
i=0 A
converges and the vectorial linear equation of the form X = A ⊗ X ⊕ B has a
unique solution X = A∗ ⊗ B.

is said to be acyclic iﬀ ∃ (i1 , i2 , . . . , ip−1 , ip = i1 ), s.t.
Matrix A ∈ Rn×n
ε
Ai1 ,i2 ⊗ Ai2 ,i3 ⊗ . . . ⊗ Aip−1 ,ip = ε.
As for the recursion equation, the most attractive is not its solution but the
periodicity.
1

In is the n × n identity matrix with e on the main diagonal and ε elsewhere.

Latency Estimation of the Asynchronous Pipeline

253

Theorem 2. Let A be a (max, +) irreducible matrix, there exists an unique real
number λ, integer c and constant n0 , for all n ≥ n0 , s.t. An+c = λc ⊗ An .
Matrix A ∈ Rn×n
is said to be irreducible iﬀ ∀i, j, ∃ (i, i1 , . . . , ip = j), s.t.
ε
Ai,i1 ⊗ Ai1 ,i2 ⊗ . . . ⊗ Aip−1 ,ip = ε.
Corollary 1. Let A be a (max, +) irreducible matrix, the evolution equation
X(n + 1) = A ⊗ X (n) will end up in a periodic behavior, that is
∃n0 , c, λ, ∀n ≥ n0 , X (n + c) = λc ⊗ X (n) .

3

Modeling the Asynchronous Pipeline

Event graph is widely used during the design, synthesis and veriﬁcation of the
asynchronous circuit[7] It describes the ordering of the events exactly, whereas
the questions pertaining to when the events take place are not addressed. For
questions related to the performance evaluation, it is necessary to introduce time.
In this section, we will expand on the way to model an asynchronous pipeline
via timed event graph.
3.1

Timed Event Graph

Deﬁnition 2. Petri net[8] is a bi-partite graph given by tuple G = P, Q, E, M0 ,
where P = {p0 , · · · , pm } is the set of places, Q = {q0 , · · · , qn } is the set of
transitions, E ⊆ (P × Q) ∪ (Q × P) is the set of arcs, M0 : P → {0, 1, 2, · · · } is
the initial marking.
We denote by p• (• p) the set of downstream (upstream) transitions of place p,
q • (• q) the set of downstream (upstream) places of transition q.
Deﬁnition 3. An event graph is a Petri net where each place has exactly one
incoming transition and one outgoing transition.
∀p ∈ P, |• p| = |p• | = 1
To analyze the latency of an asynchronous pipeline, we should consider the delay
constraint. This can be done in two basic ways, by associating durations with
either transition ﬁrings or with the sojourn of tokens in places2 .
1. Associating each place p with holding time σp . Holding time is the minimal
time that a token must spend in a place before contributing to the enabling of
the downstream transition, which can be used to represent the transportation
or communication time. σp (n) means the n-th holding time of place p.
2

It is possible to convert a event graph with holding times into a event graph with
ﬁring times and vice-versa.

254

J. Ruan et al.

2. Associating each transition q with ﬁreing time δq . Firing time is the time
that elapses between the starting and the completion of the ﬁring of the
transition, which can be used to represent the process times in a functional
block. δp (n) means the n-th ﬁring time of transition p.
Now that the response times of the request and acknowledge between the
adjacent pipeline stages are diﬀerent, the former is much more appropriate.
3.2

Model of Asynchronous Pipeline

It is generally believed that an asynchronous pipeline can be viewed as a traditional “synchronous” data-path, consisting of latches and combinational circuits,
which is clocked by some form of handshaking between neighbouring pipeline
stages[7]. Taking a linear bundled-data asynchronous pipeline for example, whose
structure is shown in Figure 1.

Ctl
1
Left

Ain1

Aout2

Rout1

Rin2

CL1

Ctl
2

Ctl
N

...

Right

CL2

Data

L1

L2

LN

Fig. 1. Linear 4-phase bundled-data asynchronous pipeline

Since the latency of an asynchronous pipeline is only in reference to its structure, we may pass over the inﬂuence of the inputing. On the supposition that the
environment deals with the request or acknowedge of the pipeline in no time, we
may model the linear pipeline, along with its environment, as an autonomous
timed event model, which is displayed in Figure 2.
p1,0

q0

p0,1

p2,1

q1

p1,2

p3,2

q2

p2,3

pN+1,N

qN

pN,N+1

qN+1

Fig. 2. Timed Event Graph Model

Transition q0 stands for the left environment, its ﬁring represents the inputing of new data. Transition qN +1 stands for the right environment, its ﬁring
represents that the computing result has been received. Moreover, transition

Latency Estimation of the Asynchronous Pipeline

255

qi (0 < i ≤ N ) stands for the handshaking latch Hli of the pipeline3 , its ﬁring
represents that Hli is active.
Token in place pi,i+1 represents that the input data is handled by stage i + 1,
holding time σi,i+1 amounts to the delay from new data on the input of stage i+1
to the production of the corresponding output (or to being received by the right
environment), provided that the acknowledge signals are in place when data
arrives. Token in place pi,i−1 represents the reception of the acknowledgment
produced by stage i, holding time σi,i−1 amounts to the delay from receiving
an acknowledge from stage i to the corresponding acknowledge is produced by
stage i − 1 (or to the next request is produced by the left environment), provided
that the request is in place when the acknowledge arrives4.

4

Estimating the Latency of the Asynchronous Pipeline

4.1

Evolution Equation in the Max-Plus Algebra

Let us consider the autonomous timed event graph G = P, Q, E, M0 , σ , we
assume that,
1. G is live 5 and the initial marking M0 has at most one token per place,
2. For any place p, (p ∈ P), the holding time σp is ﬁxed6 .
3. For any token under the initial marking, it is available for the enabling of
the downstream transition.
According to the ﬁring rule of the timed event graph, transition i starts its
n-th ﬁring at time:
⎧
⎪
⎪
⎨ X (1) = max max X (1) + σ | M0 = 0 , 0
i

j∈•• i

j

j,i

j,i

⎪
⎪
⎩ Xi (n) = max Xj n − M0j,i + σj,i
••
j∈

i

Using the (max, +) notation,
⎧
Xi (1) =
⎪
⎪
⎨
⎪
⎪
⎩ Xi (n) =

Xj (1) ⊗ σj,i | M0j,i = 0 ⊕ 0
j∈•• i

Xj n − M0j,i ⊗ σj,i
j∈•• i

This equation can be seen as a linear equation between the variables Xi (n),
with coeﬃcients σj,i .
3
4
5
6

Handshaking latch Hli is composed of conventional latch Li and control circuit Ctli .
The calculation of holding time diﬀeres from the circuit implementation styles.
An event graph is live if and only if all circuits are marked under the initial marking.
σp can be expressed as σi,j , if • p = qi and p• = qj .

256

J. Ruan et al.

When written in vectorial form, it becomes
X (1) =
X (n) =

A0 ⊗ X (1) ⊕ Γ
A0 ⊗ X (n) ⊕ A1 ⊗ X (n − 1)

(1)

where X (n) is the vector X1 (n) , · · · , XN (n) , Γ is a zero vector of size N
and for k ∈ {0, 1}, Ak is a N × N matrix deﬁned by
Ak

def
i,j

=

σj,i
ε

if M0j,i = k
otherwise.

Since G is live, there is no empty circuit under its initial marking. As a consequence, matrix A0 is acyclic. Applying Theorem 1, the unique solution of
Equation (1) is:
X (1)

= A∗0 ⊗ Γ

(2)

def

X (n) = A∗0 ⊗ A1 ⊗ X (n − 1) = A ⊗ X (n − 1)

4.2

Evolution Equation of Asynchronous Pipeline

In terms of the timed event graph modeling of the linear asynchronous pipeline,
we may get
⎞
⎞
⎛
⎛
ε ε ...
ε
ε
ε σ2,1 ε . . . ε
⎜σ1,2 ε . . .
⎜ε ε σ3,2 . . . ε ⎟
ε
ε⎟
⎟
⎟
⎜
⎜
⎟
⎜ ε σ2,3 . . .
⎜ε ε ε . . . ε ⎟
ε
ε
⎟
⎟
⎜
⎜
A0 = ⎜ .
⎟ , A1 = ⎜ ..
⎟
⎟
⎟
⎜ ..
⎜.
⎟
⎟
⎜
⎜
⎠
⎝ ε ε ...
⎝
ε ε ε . . . σN,N −1 ⎠
ε
ε
ε ε ε ... ε
ε ε . . . σN −1,N ε
Using the rule of power operation,
⎧
i−1
⎪
⎨
σk,k+1
m
A0 ij = k=j
⎪
⎩ε

if i = j + m
otherwise.

According the deﬁnition of A∗ and A, we can derive
⎧
⎧
⎪
⎪
ε
if i < j
ε
⎪
⎪
⎪
⎪
⎨
⎨
e
if
i
=
j
σ
j,i
, Aij =
A∗0 ij = i−1
i−1
⎪
⎪
⎪
⎪
⎪
⎪
σk,k+1 if i > j
σk,k+1 + σj,j−1
⎩
⎩
k=j

k=j−1

if i < j − 1
if i = j − 1
if i ≥ j

Latency Estimation of the Asynchronous Pipeline

257

Proposition 1. With regard to the linear asynchronous pipeline, matrix A is
irreducible.
Proof. According to the expression of A shown above, we can discover that for
all i, j,
1. if i ≥ j − 1, A

= ε,
ij

2. if i < j − 1, there exists sequence (i1 = i, i2 = i1 + 1, . . . , ip = j), s.t.
A

A
i1 ,i2

4.3

i2 ,i3

···

A

= ε.
ip−1 ,ip

Latency of Asynchronous Pipeline

In this subsection, we will formulate the latency of a linear asynchronous pipeline
by its evolution equation under the max-plus algebraic formalism.
Deﬁnition 4. Latency is the delay between the input of a data item until the
corresponding output data item is produced, i.e., the time diﬀerence between the
ﬁring of transition q0 and that of transition qN +1 .
1
n→∞ n

n

X0 (i) − XN +1 (i)

Tlatency = lim

(3)

i=1

According to Proposition 1 and Corollary 1, we can formulate the latency
Tlatency =

5

1
c

n0 +c

X0 (i) − XN +1 (i)

(4)

i=n0

Case Study

Now we apply our method to a 3-stage linear asynchronous pipeline composed
of 4-phase bundled-data pipeline stages, illustrating that the analysis is quite
feasible.
The linear pipeline’s control circuit is implemented by the semi-decoupled
latch controller[9]. SPICE analysis has been performed on the latch controller’s
layout for worst case conditions (Vdd=4.6V, slow-slow process corner, at 100oC).
The data processing function between latch stages is modeled with an delay
elment, where Cl1 = 21.3nS, Cl2 = 12.4nS and Cl3 = 27.2nS. According to
the SPICE analysis results and the matching delays of the processing logic, we
may calculate the holding times and estimate the latency, shown in Table 1. The
FIFO represents a pipeline with no data processing logics between latch stages.
From Table 1, we may ﬁnd that the estimated results of (max, +) method
are very close to those of the SPICE simulation. On the one hand, it lies in the
precise holding time from the SPICE analysis of the 4-phase bundled-data latch
control circuit. On the other hand, it conﬁrms the truth of our method, which
is uncomplicated and in eﬀect.

258

J. Ruan et al.
Table 1. Latency Estimation
Holding Time
σ0,1 σ1,2 σ2,3 σ3,4 σ1,0
FIFO 4.1 4.1 4.1 0
0
0
Pipeline 24.4 16.5 31.3 0

6

(nS)
Result (nS)
σ2,1 σ3,2 σ4,3 (max, +) SPICE
4.7 4.7 4.7
16.4
14.1
4.7 4.7 4.7 103.5
94.7

Conclusion

The contribution of this paper is introducing a method for estimating the latency
of an asynchronous pipeline, which is eﬀective and eﬃcient.
Nevertheless, the technique has signiﬁcantly more room for improvement.
More sophisticated stochastic holding time sequences can be used to replace
the ﬁxed time so as to characterize the performance precisely.

Acknowledgment
This work is supported by the Chinese National Natural Science Foundation
under grant No.90407022.

References
1. Ramamoorthy, C.V., Ho, G.S.: Performance evaluation of asynchronous concurrent
systems using Petri nets. IEEE Transitions on Software Engineering. 6(5) (1980)
440–449
2. Kudva, P., Gopalakrishnan, G., Brunvand, E., Akella, V.: Performance analysis and
optimization of asynchronous circuits. Proc. International Conf. Computer Design
(ICCD). (1994) 221–225
3. Xie, A., Beerel, P.A.: Accelerating Markovian analysis of asynchronous systems
using state compression. IEEE Transactions on Computer-Aided Design. 18(7)
(1999) 869–888
4. Xie, A., Beerel, P.A.: Symbolic techniques for performance analysis of asynchronous
systems based on average time separation of events. Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems (ASYNC). IEEE
Computer Society Press. (1997) 64–75
5. Baccelli, B., Cohen, G., Olsder, G.J., Quadrat, J.-P.: Synchronization and Linearity.
Wiley (1992)
6. Altman, E., Gaujal, B., Hordijk,A.: Discrete-Event Control of Stochastic Networks:
Multimodularity and Regularity. Springer (2003)
7. Sparsø, J., Furber, S.: Principles of Asynchronous Circuit Design: A Systems Perspective. Kluwer Academic Publishers (2001)
8. Murata, T.: Petri nets: properties, analysis and applications. Proceedings of the
IEEE, 77(4) (1989) 541-580
9. Furber, S.B., Day, P.: Four-phase micropipeline latch control circuits. IEEE Trans.
Very Large Scale Integr. Syst. 4(2) (1996) 247–253

