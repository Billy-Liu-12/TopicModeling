Semi-systolic Architecture
for Modular Multiplication over GF(2m)
Hyun-Sung Kim1 and Il-Soo Jeon2
1

Kyungil University, School of Computer Engineering,
712-701, Kyungsansi, Kyungpook Province, Korea
2 Kumho Nat’l Inst. of Tech., School of Electronic Eng.,
730-703, Gumi, Kyungpook Province, Korea

Abstract. This paper proposes a new algorithm and an architecture for it to
compute the modular multiplication over GF(2m). They are based on the standard basis representation and use the property of irreducible all one polynomial
as a modulus. The architecture, named SSM(Semi-Systolic Multiplier) has the
critical path with 1-DAND+1-DXOR per cell and the latency of m+1. It has a lower
latency and a smaller hardware complexity than previous architectures. Since
the proposed architecture has regularity, modularity and concurrency, they are
suitable for VLSI implementation.

1 Introduction
The arithmetic operations in the finite field have several applications in errorcorrecting codes, cryptography, digital signal processing, and so on [1]. Information
processing in such areas usually requires performing multiplication, inverse/division,
and exponentiation. Among these operations, the modular multiplication is known as
the basic operation for public key cryptosystems over GF(2m) [2-3].
Numerous architectures for modular multiplication in GF(2m) have been proposed
in [2-8] over the standard basis. Wang et al. in [5] proposed two systolic architectures
with the MSB-first fashion with less control problems as compared to [4]. Jain et al.
proposed semi-systolic multipliers [6]. Its latency is smaller than those of the other
standard-basis multipliers. Kim in [7] proposed a bit-level systolic array with a simple
hardware complexity with the LSB-first modular multiplication. Thus, further research
for efficient circuit for cryptographic applications is needed. To reduced the system
complexity, Itoh and Tsujii designed two low-complexity multipliers for the class of
GF(2m), based on the irreducible AOP (All One Polynomial) and the irreducible
equally spaced polynomial [8]. Later, Kim in [2] proposed various AOP architectures
based on LFSR(Linear Feedback Shift Register) architecture.
This paper proposes a new algorithm and a parallel-in parallel-out semi-systolic array architecture to compute the modular multiplication over finite field GF(2m). They
are based on the standard basis representation and use the property of irreducible AOP
as a modulus. Let DAND and DXOR be the latency of AND and XOR gate, respectively.
The architecture has the critical path with 1-DAND+1-DXOR per cell and the latency of
m+1. It could be used to secure cryptosystem application.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 912 – 915, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Semi-systolic Architecture for Modular Multiplication over GF(2m)

913

2 Semi-systolic Architecture
GF(2m) is the finite extension field of finite field GF(2) [2]. An arbitrary element A
over GF(2m) can be represented with {1, α, α2 , ⋅⋅⋅ , αm-1}, which is based on the
standard basis, i.e., A=Am-1αm-1+Am-2αm-2+⋅⋅⋅+A1α+A0. A polynomial of the form
f(x)= fm xm+fm-1xm-1+⋅⋅⋅ + f1 x+ f0 is called an irreducible polynomial if and only if a
divisor of f(x) is 1 or f(x). Assume that a polynomial of the form f(x)= fm xm+fm-1xm1
+⋅⋅⋅ + f1 x+ f0 over GF(2) is called an AOP (All One Polynomial) with degree m if
fi=1 for i=0,1, ⋅⋅⋅ ,m. It has been shown that an AOP is irreducible if and only if
m+1 is the prime and 2 is the primitive modulo m+1. Let a set {1, α, α2, ⋅⋅⋅ ,αm-1} be
generated by α which is a root of AOP f(x) and be the standard basis. In the standard basis, an element A over GF(2m) is presented by A=Am-1αm-1+Am-2αm-2+⋅⋅⋅
+A1α+A0. A set with {1, α, α2, ⋅⋅⋅, αm-1, αm} is called an extended basis of {1, α, α2,
⋅⋅⋅,αm-1}. In the extended basis, an element a over GF(2m) is represented by a=amαm
+am-1αm-1+⋅⋅⋅+a1α+a0 with Ai=am+ai (0≤ i ≤m-1). Thus, an element over GF(2m) has
two different representations. Let F(x)=xm+xm-1+⋅⋅⋅ +x+1 be an irreducible AOP of
degree m: and let α be a root of F(x). i.e., F(α)=αm+αm-1+⋅⋅⋅ +α+1. Then, we have
αm=αm-1+⋅⋅⋅ +α+1, αm+1=1.
The multiplication of elements a and b over GF(24) in the extended basis can be
performed by ab mod p with p=αm+1+1 which applied the property of AOP as a
modulus. Let the result of this multiplication, ab mod p, be r=rmαm+rm-1αm1
+⋅⋅⋅+r1α+r0. The recurrence equation for the MSB first algorithm with the property
of AOP is as follows: r =ab mod p={⋅⋅⋅[[abm]α mod p+abm-1]α mod p+⋅⋅⋅+ab1}α
mod p+ab0. From the equation, a new algorithm to compute ab mod p can be derived as following Algorithm 1.
[Algorithm 1] Modular Multiplication
Input
: a=(am,am-1,⋅⋅⋅,a1,a0), b=(bm,bm-1,⋅⋅⋅,b1,b0)
Output
: r=ab mod p
Initial value : rm+1=(rm,rm-1, ⋅⋅⋅,r1,r0) =(0,0, ⋅⋅⋅,0,0)
Step 1
for i=m to 0
Step 2
ri=Circular_Left(ri+1)+ abi
where Circular_Left(x) is the 1-bit-left-circular shift of x and ri is used to represent the
i-th intermediate result for the final result r. In the above algorithm, the modular reduction is performed just by using 1-bit-left-circular-shift operation. Specially, all the
operations in the for loop can be performed bit by bit in parallel.
Let a, b, and b2 be an elements in GF(24). Then a and b with an extended basis {1,
α,α2,α3,α4} can be represented as follows: a=a4α4+a3α3+a2α2+a1α+a0, b=b4α4+b3α3
+b2α2+b1α+b0.
When p=α5+1 is used as a modular in the extended basis, we have
r =ab mod p
=a(b4α4+b3α3+b2α2+b1α+b0) mod p
={⋅⋅⋅[[ab4]α mod p+ab3]α mod p+⋅⋅⋅+ab1}α mod p+ab0
= r4α4+r3α3+r2α2+r1α+r0.

914

H.-S. Kim and I.-S. Jeon

Fig.1 shows a multiplier named SSM based on Algorithm 1 over GF(24). SSM is
composed of (m+1)(m+1) basic cells. It is the parallel architecture which ai and bi (0≤
i ≤m) are inputted at the same time. The (m+1)-bits of data a are inputted from the top
row and transmitted to the adjacent cells following each row. But the data bi in each
row is broadcasted to all cells in the same row at the same time. Let DAND and DXOR be
the latency of AND and XOR gate, respectively. SSM has a critical path with 1DAND+1-DXOR per cell. SSM in Fig. 1 can be generalized for arbitrary m as well as
m=4. Fig. 2 shows the basic cells for SSM.
a4 0

a3 0

a2 0

a1 0

a0 0

r
b4

BC1

BC1

BC1

BC1

BC1

r44
b3

BC1

BC1

BC1

BC1

BC1

r44

r43
b2

BC1

BC1

BC1

BC1

BC1

r43

r42
b1

BC1

BC1

BC1

BC1

BC1

r41
b0

BC1

BC1

BC1

BC1

BC1

r1

r0

5
4

r4

r3

r2

r45

r42
r41

Fig. 1. SSM over GF(24)

a

j

r ji + 1
r ji −+11

bi

r ji

Fig. 2. Basic cell of SSM

3 Comparison and Analysis
Table 1 shows the comparison between the proposed architecture and pervious two
architectures.

Semi-systolic Architecture for Modular Multiplication over GF(2m)

915

Table 1. Comparisons

Properties
Basic architecture
Irreducible polynomial
Number of cell
Cell complexity
Latency
Critical path

Jain [6]
Semi-systolic
Generalized
m2
2 AND, 2 XOR
3 latches
m
1-DAND
+1-DXOR

Kim [2]
LFSR
AOP
m+1
1 AND, 1 XOR
2 REG, 1 MUX
2m+1
1-DAND+
log m(1-DXOR)

SSM
Semi-systolic
AOP
(m+1)2
1 AND, 1 XOR
2 latches
m+1
1-DAND
+1-DXOR

It is assumed that AND and XOR represent 2-input AND and XOR gates, respectively, and latch for 1-bit latch. Let DAND and DXOR be the latency of AND and XOR
gate, respectively. As a result, the proposed architecture, SSM, has lower latency and
smaller complexity than previous architectures in [6] and [2].

4 Conclusions
This paper proposed a new algorithm and a parallel-in parallel-out semi-systolic array
architecture to compute the modular multiplication over finite field GF(2m). The property of irreducible AOP was used as a modulus to get a better hardware and time complexity. Proposed architecture has lower latency and smaller hardware complexity
than previous architectures as shown in Table 1. Since SSM has regularity, modularity
and concurrency, they are suitable for VLSI implementation.

References
[1] D.E.R.Denning, Cryptography and data security, Addison-Wesley, MA, 1983.
[2] H.S.Kim, Bit-Serial AOP Arithmetic Architecture for Modular Exponentiation, PhD. Thesis, Kyungpook National University, 2002.
[3] S.W.Wei, “VLSI architectures for computing exponentiations, multiplicative inverses, and
divisions in GF(2m),” IEEE Trans. Circuits and Systems, 44, 1997, pp.847-855.
[4] C.S.Yeh, S.Reed, and T.K.Truong, “Systolic multipliers for finite fields GF(2m),” IEEE
Trans. Comput., vol.C-33, Apr. 1984, pp.357-360.
[5] C.L.Wang and J.L.Lin, “Systolic Array Implementation of Multipliers for Finite Fields
GF(2m),” IEEE Trans. Circuits and Systems, vol.38, July 1991, pp796-800.
[6] S. K. Jain and L. Song, “Efficient Semisystolic Architectures for finite field Arithmetic,”
IEEE Trans. on VLSI Systems, vol. 6, no. 1, Mar. 1998.
[7] H.S.Kim, “Efficient Systolic Architecture for Modular Multiplication over GF(2m),” will
be appeared in PARA 2004 proceeding, 2005.
[8] T. Itoh and S. Tsujii, “Structure of parallel multipliers for a class of finite fields GF(2m),”
Info. Comp., vol. 83, pp.21-40, 1989.
[9] S.Y.Kung, VLSI Array Processors, Prentice-Hall, 1987.

