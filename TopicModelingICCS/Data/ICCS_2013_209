Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2432 – 2435

International Conference on Computational Science, ICCS 2013

New Parallel Sphere Detector algorithm providing
high-throughput for optimal MIMO detection
Csaba M. J´ozsaa , G´eza Kolumb´ana , Antonio M. Vidalb , Francisco-Jos´e
Mart´ınez-Zald´ıvarc , Alberto Gonz´alezc
a Faculty

of Information Technology, P´azm´any P´eter Catholic University, Pr´ater str. 50/A, 1083 Budapest, Hungary
de Sistemas Inform´aticos y Computaci´on, Universitat Polit`ecnica de Val`encia, Camino de Vera s/n, 46022 Val`encia, Spain
c Departamento de Comunicaciones, Universitat Polit`
ecnica de Val`encia, Camino de Vera s/n, 46022 Val`encia, Spain

b Departamento

Abstract
Multiple–input multiple-output (MIMO) detection techniques can vary signiﬁcantly in complexity and detection performance.
Finding the optimal Maximum Likelihood (ML) solution with high throughput was limited by the computational performance.
In order to achieve high throughput non-ML algorithms were introduced, having degraded detection performance and lower
complexity. In this paper we present a new parallel algorithm, inspired by the Sphere Detector (SD) algorithm, which can eﬃciently solve the ML detection of the MIMO systems with high throughput on parallel architectures. We also give an overview
on how it is possible to map the Parallel Sphere Detector (PSD) onto GP-GPUs, however diﬀerent parallel architectures are
also suitable for adapting the presented algorithm.
Keywords: GPU, MIMO, ML detection, Sphere Detector

1. Introduction
The success of MIMO lies in the fact that the performance of wireless systems is improved by orders of magnitude at no cost of extra spectrum. The price that has to be paid is the increased complexity of the diﬀerent hardware
components and algorithms. The complexity of the detection algorithms used in diﬀerent receiver structures depends on many factors, such as antenna mapping, channel, coding, etc. The manycore parallel architectures are
getting a prominent role in computational sciences because of their general purpose, high computational performance and low price. In this paper we are presenting an eﬃcient mapping of the SD algorithm onto GP-GPUs,
with the purpose of ﬁnding the optimal, ML solution of the detection process.
In Section 2 we present the MIMO system model, after that in Section 3 we describe the sequential SD
algorithm by showing how is possible to reduce the detection complexity without degrading the quality. Section
4 gives a description about the proposed PSD algorithm and in Section 5 we present the performance of the PSD
algorithm.
Email addresses: jozsa.csaba@itk.ppke.hu (Csaba M. J´ozsa), kolumban.geza@itk.ppke.hu (G´eza Kolumb´an),
avidal@dsic.upv.es (Antonio M. Vidal), fjmartin@dcom.upv.es (Francisco-Jos´e Mart´ınez-Zald´ıvar), agonzal@dcom.upv.es
(Alberto Gonz´alez)

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.417

Csaba M. J´ozsa et al. / Procedia Computer Science 18 (2013) 2432 – 2435

2433

2. System Model
A MIMO system consists of n transmit and m receive antennas. Assuming block ﬂat-fading channel, the
equivalent real system model is y = Hs + v, where s = [s1 , s2 , .., s2×n ]T is the transmitted symbol vector, where
each component is drawn from a real valued symbol set Ω, y = [y1 , y2 , ..., y2×m ] is the received symbol vector and v = [v1 , v2 , ..., v2×m ] is an independent and identically distributed (i.i.d.) N(0, K) multivariate Gaussian
random variable where the covariance matrix K = σ2 I2×m , and the entries hij of the channel matrix H are assumed to be i.i.d. zero-mean Gaussian variables with unit variance. The optimal solution for the real system
model is sML = arg min y − Hs 2 . It can be seen that the maximum likelihood estimate of the symbol vector is
s Ω2×n

found by solving an integer least-squares problem, that is analogous to ﬁnding the closest lattice point of lattice
Λ = {Hs : s ZNt } to a given point y [1], [2],[3].
3. The Sphere Detector Algorithm
The fundamental aim of the SD algorithm [4] is to restrict the search to lattice points s Ω2n that lie within a
certain sphere of radius d around a given vector. Reducing the search space will not aﬀect the performance of
the detection, because the closest lattice point inside the sphere will also be the closest lattice point for the whole
lattice. The deﬁnition of the center point sˆ of the sphere S(ˆs, d) is usually deﬁned as the unconstrained leastsquares solution sˆ = Wy, where W = (HT H)−1 HT is the Moore-Penrose pseudoinverse of the channel matrix. In
order to take advantage of the search space reduction, the SD algorithm’s enumeration strategy is needed.
Without any loss of generality we assume that n = m and the channel matrix has full rank. Furthermore
we assume perfect channel state information at the receiver side. Applying the QR factorization to the real
channel matrix H = QR, the ML solution can be formulated as sML = arg min y − Hs 2 = arg min R(s − sˆ) 2 ,
s Ω2×n

s Ω2×n

where matrix Q is orthogonal and matrix R is upper triangular. Then the condition s ∈ S(ˆs, d) can be formulated as: R(s − sˆ) 2 d2 . Exploiting the upper triangular property of matrix R instead of enumerating all the
possible symbol combinations a recursion can be deﬁned based on the dependency hierarchy of the terms. Let
2
m
m
ˆk )
sm
(si , si+1 , · · · , sm )T denote the last m−i+1 components of the vector s and let M(sm
j=i
k=j rjk (sk − s
i
i )=
deﬁne the metric of the partial symbol vector sm
i . Having a bottom up selection of the possible symbols for the
symbol vector, in every iteration one symbol si ∈ Ω is being selected and added to the partial symbol vector
m
m
2
si+1 , · · · , sm . As a result sm
i is deﬁned and the metric M(si ) can be applied. If M(si ) < d a new symbol si−1 has
to be selected for the next dimension, contrary the previously chosen symbol si is discarded and a new symbol has
to be chosen from the signal set. A solution is found if a complete symbol vector sm
1 is satisfying the condition
2
)
<
d
.
The
solution
with
the
smallest
metric
is
the
ML
solution.
Choosing
a
small
radius may not include
M(sm
1
the solution, so the process has to be restarted with a higher radius. It is important to notice that SD is equivalent
to a bounded tree search. The continuous change of vector sm
i is analogous of a depth-ﬁrst tree traversal process.
can
be
regarded
as
tree
nodes
at
level i, the full symbol vectors sm
The partial symbol vectors sm
i
1 are the leaves of
the tree and the weight of each node is deﬁned by the symbol vector metric M(sm
).
i
Table 1: Parameters deﬁnition
Parameters
lvlnr
lvlx
pathslvlx
explvlx
memlvlx

Description
PSD algorithm parameter specifying the number of levels used for BF search strategy
levels assigned for BF search
the number of symbol vectors selected on level lvlx
for simultaneous process with DF search strategy
the number of nodes expanded and evaluated in one iteration on level lvlx
memory required for level lvlx

Basic relations
0 < lvlnr ≤ N
lvl0 = N + 1, lvllvlnr = 1
lvlx > lvlx+1
pathslvl0 = 1
pathslvlx ≤ explvlx
explvlx = pathslvlx−1 ∗ |Ω|(lvlx−1 −lvlx )
memlvlx ∼ K ∗ explvlx
K is the data structure size of sN<j>
lvlx

4. The Parallel Sphere Detector algorithm
In CUDA [5] the computations are distributed among several thread blocks and each thread block has multiple
threads running in parallel. In case of PSD algorithm two levels of parallelism can be deﬁned, (i) a higher level (

2434

Csaba M. J´ozsa et al. / Procedia Computer Science 18 (2013) 2432 – 2435

220
200
180

Throughput(Mbit/s)

160

2x2
2x2
2x2
4x4
4x4
4x4

|Ω| =
|Ω| =
|Ω| =
|Ω| =
|Ω| =
|Ω| =

2
4
8
2
4
8

140
120
100
80
60
40
20
0
5

10

15

20

25

SNR(dB)

(a) PSD algorithm ﬂow for a 4x4 MIMO and |Ω| = 4

(b) PSD average throughput

Fig. 1: Schematic and performance of the PSD algorithm
system level) parallelism, (ii) a lower level (algorithm level) parallelism. The system level parallelism is exposed
by mapping each received symbol vector y to a thread block in the grid. Having a high number of thread blocks is
important, because it keeps the GPU utilized. In Table 1 the parameters of the PSD are deﬁned.
Parameters lvlnr , lvlx and pathslvlx deﬁne the hybrid tree traversal, moreover, they inﬂuence the memory usage
of a thread block, the speed of reaching a leaf node, the metric of the ﬁrst leaf node, the iterations needed for ﬁnding
the optimal solution, namely the performance of the algorithm. It is important to notice that diﬀerent antenna
conﬁgurations and modulation order need diﬀerent parameters, because the tree depth and branching factor are
diﬀerent. Fig.1a shows the PSD schematic for lvlnr = 3, lvl0 = 9, lvl1 = 6, lvl2 = 4, lvl3 = 1 and pathslvl0 = 1,
pathslvl1 = 4, pathslvl2 = 2. The main steps of the algorithm are the following:
Algorithm 1 PSD algorithm pseudocode
1: Expand distinct levels of nodes and evaluate them.
This ensures enough computational load to maintain the cores active.
2: Repeat until a leaf level is reached
(a) Sort the previously expanded nodes by their metric.
(b) Further expand nodes from a subset of previously sorted nodes for the following distinct levels.
3: When a leaf level is reached
(a) Find the minimum metric leaf and update the sphere radius.
(b) Proceed with the rest of the nodes in the previous levels.

The detection starts at the root node of the tree at lvl0 = 9. Levels 8 and 7 are not analyzed. These levels
can be skipped because the GP-GPU oﬀers a high number of threads that can be launched simultaneously, thus
the explvl1 = 64 nodes at lvl1 = 6 can be expanded simultaneously. During the node expansion both the partial
symbol vector and the metric associated to the node have to be determined. Next stage applies the Bitonic Sort
) of the partial symbol vectors. This stage is mainly motivated
method [6]. The sorting key is the metric M(s8<j>
6
by the condition of ﬁnding a leaf node with small metric. When moving towards to the next level lvl2 = 4, a
subset of pathslvl1 = 4 best metric partial symbol vectors are selected from the previous level lvl1 = 6. Recall, the
smaller the metric, the faster the convergence. The ”greedy behavior” of Bitonic Sort method ensures that a leaf
with small metric is found. The selection, expansion and sorting discussed above are repeated until the the last

30

Csaba M. J´ozsa et al. / Procedia Computer Science 18 (2013) 2432 – 2435

2435

Table 2: Throughput comparison of the PSD algorithm
Reference
Antennas
Modulation
BER performance
Technology
Throughput

[8]

[9]

[10]

16-QAM

QPSK

16-QAM

ASIC
38 Mbps

ASIC
50 Mbps

ASIC
73 Mbps
@SNR = 20 dB

[11]
4x4
16-QAM
Full-ML
FPGA
81.5 Mbps
@SNR = 20 dB

PSD

PSD

16-QAM

QPSK

GPU
105 Mbps
@SNR = 20 dB

GPU
146 Mbps
@SNR = 20 dB

level lvl3 = 1 is reached. Upon reaching the last level, the symbol vector characterized by the lowest metric has to
be found. At level lvl1 = 1 a minimum search is applied, based on the parallel reduce pattern [7]. The best metric
symbol vector s81 is compared to the one found in the previous iteration, if there is any. After the comparison the
sphere radius is adjusted and the search for the best ML candidate is continued by the expansion of unexpanded
nodes on the previous levels.
5. Performance results and conclusions
In order to measure the performance of the PSD, several MIMO conﬁgurations have been analyzed. Finding
the optimal parameter conﬁgurations is not subject of this paper. The measurements were done in a GeForce GTX
690 GP-GPU based on the Kepler GK104 architecture. A major issue of ML detection is its varying complexity
and this is mostly caused by channel matrices with high condition numbers. As a result the running time of
diﬀerent kernels can be signiﬁcantly diﬀerent. When measuring the average throughput of the PSD algorithm in
order to get realistic results we tested each MIMO conﬁguration by simulating 20000 channels and 1200 symbol
vectors in each channel. The detection throughput results are presented in Fig. 1b.
The throughput of the proposed parallel algorithm mapped onto GP-GPU proposed in this contribution is
compared with that of known from the literature in Table 2. We took into consideration only those results, that
were focusing on ﬁnding the optimal solution. It can be seen that the PSD algorithm proposed here outperforms
each of them. The results of our investigations shows that ML detection can achieve high throughput when is
being mapped on a GP-GPU. In order to achieve this high throughput we proposed a new algorithm, which can
be easily adapted for parallel architectures, because the parameters can adjust the memory requirements and the
extent of the parallelism.
Acknowledgments
´
´
The support of the grants TAMOP-4.2.1.B-11/2/KMR-2011-0002,
TAMOP-4.2.2/B-10/1-2010-0014
at P´azm´any
P´eter Catholic University, PAID-05-11-2733 at Universitat Polit`ecnica de Val`encia, PROMETEO/2009/013 from
Generalitat Valenciana and CICYT TEC2009-13741 from the Spanish Government is gratefully acknowledged.
References
[1] M. Damen, H. El Gamal, G. Caire, On maximum-likelihood detection and the search for the closest lattice point, Information Theory,
IEEE Transactions on 49 (10) (2003) 2389–2402.
[2] J. H. Conway, N. J. A. Sloane, E. Bannai, Sphere-packings, lattices, and groups, Springer-Verlag, Inc., New York, NY, USA, 1987.
[3] E. Agrell, T. Eriksson, A. Vardy, K. Zeger, Closest point search in lattices, Information Theory, IEEE Transactions on 48 (8).
[4] E. Viterbo, J. Boutros, A universal lattice code decoder for fading channels, Information Theory, IEEE Transactions on 45 (5) (1999)
1639 –1642. doi:10.1109/18.771234.
[5] NVIDIA Corporation, CUDA C Programming Guide, http://docs.nvidia.com/cuda/cuda-c-programming-guide/ (2012).
[6] M. Pharr, R. Fernando, GPU Gems 2: Programming Techniques for High-Performance Graphics and General-Purpose Computation
(Gpu Gems), Addison-Wesley Professional, 2005.
[7] H. Nguyen, GPU Gems 3, 1st Edition, Addison-Wesley Professional, 2007.
[8] D. Garrett, L. Davis, S. ten Brink, B. Hochwald, G. Knagge, Silicon complexity for maximum likelihood MIMO detection using spherical
decoding, Solid-State Circuits, IEEE Journal of 39 (9) (2004) 1544–1552.
[9] A. Burg, N. Felber, W. Fichtner, A 50 Mbps 4 times;4 maximum likelihood decoder for multiple-input multiple-output systems with
QPSK modulation, in: Electronics, Circuits and Systems, 2003. ICECS 2003. Proceedings of the 2003 10th IEEE International Conference on, Vol. 1, 2003, pp. 332 – 335 Vol.1. doi:10.1109/ICECS.2003.1302044.
[10] A. Burg, M. Borgmann, M. Wenk, M. Zellweger, W. Fichtner, H. Bolcskei, VLSI implementation of MIMO detection using the sphere
decoding algorithm, Solid-State Circuits, IEEE Journal of 40 (7) (2005) 1566–1577.
[11] X. Huang, C. Liang, J. Ma, System architecture and implementation of MIMO sphere decoders on FPGA, Very Large Scale Integration
(VLSI) Systems, IEEE Transactions on 16 (2) (2008) 188–197.

