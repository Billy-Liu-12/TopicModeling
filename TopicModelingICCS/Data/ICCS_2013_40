Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 511 – 520

International Conference on Computational Science, ICCS 2013

Sharp Interface Algorithm for Large Density Ratio Incompressible
Multiphase Magnetohydrodynamic Flows
Tongfei Guoa , Shuqiang Wangb , Roman Samulyaka,b,∗
a Department

of Applied Mathematics and Statistics, Stony Brook University, Stony Brook, NY 11794, USA
Science Center, Brookhaven National Laboratory, Upton, NY 11973

b Computational

Abstract
A numerical algorithm and the corresponding paralleled implementation for the study of magnetohydrodynamics (MHD) of
large density ratio, three-dimensional multiphase ﬂows at low magnetic Reynolds numbers have been developed. The algorithm
employs the method of front tracking for the propagation of material interfaces and the embedded interface method for solving
elliptic-parabolic problems associated with approximations of incompressible ﬂuids and low magnetic Reynolds numbers. The
use of embedded interface method supports arbitrary discontinuities of density and other physics properties across interfaces
and signiﬁcantly improves methods that smear interface discontinuities across several grid cells. The numerical algorithm has
been implemented as an MHD extension of FronTier, a parallel front tracking hydrodynamic code, veriﬁed using asymptotic
solutions and validated through the comparison with experiments on liquid metal jets. The FronTier-MHD code has been used
for simulations of liquid mercury targets for the proposed muon collider / neutrino factory, ablation of pellets in tokamaks, and
processes in hybrid magnetoinertial fusion.
Keywords: Front tracking, multiphase MHD, liquid metal MHD

1. Introduction
MHD of liquid metals and conducting liquid salts attracts considerable attention from researchers because of
their current and potential applications in fusion energy research, accelerator sciences, and industrial processes.
Applications such as liquid wall plasma facing components (PFCs) in devices for magnetically conﬁned fusion
(tokamaks) [1] - [2], liquid metal targets for future particle accelerators [3], etc., motivate the study of free surface
magnetohydrodynamic ﬂows either in vacuum or non-conducting media.
Among other codes developed to study such physical problems, we would like to single out HIMAG and compressible FronTier-MHD. The HIMAG code [4] (HyPerComp Incompressible MHD solver for Arbitrary Geometries) is developed to model the ﬂow of liquid metal with free surfaces in the presence of strong multi-component
magnetic ﬁelds. It uses hybrid meshes comprising of hex, prism and tet elements, and the level set technique
for the free surface support. But the diﬀusive nature of the level set method that replaces the density discontinuity across material interfaces by a continuous density function and smears the discontinuity across several mesh
blocks limits the accuracy for problems involving large density discontinuities.
∗ Corresponding

author. Tel.: +1-631-632-8353 ; fax: +1-631-632-8490 .
E-mail address: roman.samulyak@stonybrook.edu.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.215

512

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520

The compressible FronTier-MHD code [5], developed by one of the authors and collaborators as an extension
of the hydrodynamic code FronTier [11], employs the method of front tracking [13] for material interfaces, second
order hyperbolic solvers for equations of compressible ﬂuids, and the embedded boundary method for the elliptic
problem in complex domains. The FronTier code always keeps discontinuities sharp and eliminates or strongly
restricts numerical diﬀusion across material interfaces. It supports large number of geometrically complex interfaces in two- and three-dimensional spaces and robustly resolves their topological changes. FronTier has been
widely used for variety of fundamental science (turbulent ﬂuid mixing [6]) and applied problems (liquid targets
for particle accelerators [7], pellet ablation in tokamaks [8], and plasma jet liners for magneto-inertial fusion [9]).
The code is well suited for free surface MHD phenomena driven by hydro waves, for instance in the case of matter
interacting with strong energy sources. The obvious limitation of this code for the simulation of slow ﬂows of
liquid metals is the restriction of time steps by the CFL condition due to acoustic waves.
In order to overcome this limitation but keep all advantages of front tracking, we have developed a sharp
interface MHD algorithm for incompressible multiphase MHD ﬂows in the low magnetic Reynolds number approximation. As the method is dependent on the quality of the Navier-Stokes equation solver, we would like to
comment ﬁrst on the hydrodynamic component of the code. Front tracking has already been used for the simulation of incompressible Navier-Stokes equations [14, 15]. But unlike the front tracking method for compressible
ﬂows [11] which always keeps the density discontinuity sharp, previous implementations of the front tracking for
incompressible ﬂows employed the smoothing of density similar to the level set method. Other methods such
as the ghost ﬂuid method [16, 17] and the immersed interface method [18, 19] also have diﬃculties with large
density ratios across the interface. A front tracking algorithm for incompressible Navier-Stokes approximations
that successfully deals with the large density discontinuity problem has been recently proposed by authors and
collaborators [20] by using the embedded boundary method [21] .
In this paper, we describe a front tracking MHD algorithm for free surface / multiphase ﬂows in the low
magnetic Reynolds number approximation, coupled with the incompressible hydrodynamic solver, as well as
validation and veriﬁcation tests. With the advantage of incompressible hydrodynamic solver, the code can deal
with the simulation of large time scales, in particular, with ﬂows of free surface liquid metals in magnetic ﬁelds.
The paper is organized as follows. The governing equations and approximations are discussed in Section 2.
In Section 3, the numerical algorithm and implementation are described. The veriﬁcation and validation test is
presented in Section 4. We brieﬂy describe applications of the code in the area of accelerator targets in Section 5.
Finally, we conclude the paper withe the summary of our results and perspectives for the future work.
2. Governing Equations
We are interested in the description of multiphase or multi-material systems involving conducting ﬂuids interacting with neutral ﬂuids or gases in the presence of magnetic ﬁelds. Interfaces of the phase or material separation
are assumed to be sharp (the thickness of the interface is negligible) and, in general, geometrically complex. The
numerical simulation of liquid metals, liquid salts, and weakly ionized plasmas, which are relatively weak electrical conductors, is diﬃcult using the standard full systems of MHD equations [12]. Fast diﬀusion of the magnetic
ﬁeld, caused by low value of electrical conductivity, introduces unwanted small time scales into the problem. If
the time scale of the diﬀusion of the magnetic ﬁeld is small compared to hydrodynamic time scale, the magnetic
Reynolds number [24]
Re M =

4πuσL
,
c2

where L is the typical length scale, u is the ﬂuid velocity, and σ is the electric conductivity, is small. If, in addition,
the eddy-current-induced magnetic ﬁeld δB is small compared to the external ﬁeld B, the full system of MHD
equations can be simpliﬁed by neglecting the time evolution of the magnetic ﬁeld. In this case, the generalized
Ohm’s law is used for the evaluation of the current-density distribution instead of the Maxwell equation J =
c
4π ∇ × H, where the magnetic ﬁeld H and the magnetic induction B are related by the magnetic permeability
coeﬃcient μ: B = μH. The governing equations of incompressible conductive ﬂuids in the low magnetic Reynolds

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520

513

number approximation are
ρ

∂
1
+ u · ∇ u = μΔu − ∇P + ρg + (J × B)
∂t
c
∇·u = 0
1
J = σ −∇ϕ + u × B
c
∇·J = 0

(1)
(2)
(3)
(4)

Taking the divergence of both sides of equation (3) together with equation (4), an elliptic equation for the electric
potential is obtained:
∇ · (σ∇ϕ) =

∇·

σ
(u × B)
c

(5)

If a conductive ﬂuid interfaces a neutral ﬂuid or gas, the current density vector is tangential to the material interface. This statement is expressed by the following Neumann boundary condition for the Poisson equation (5).
∂ϕ
∂n

Γ

1
(u × B) · n
c
Γ

=

(6)

where Γ is the boundary of conductive ﬂuid.
3. Numerical Algorithm and Implementation
The proposed numerical algorithm uses the method of front tracking for the propagation of material interfaces
and the embedded interface method for elliptic problems associated with an implicit discretization of the incompressible Navier-Stokes equations (1) - (2) and the Poisson problem for the electric potential (5) - (6). The task is
complicated by the fact that these elliptic problems contain either geometrically complex outside boundary or an
interior surface across which large discontinuities of material properties or solutions occur. Within the method of
front tracking, the ﬂuid interface is represented as an explicit co-dimension one Lagrangian mesh moving through
a volume ﬁlling Eulerian mesh.
3.1. Elliptic Interface Problem
The embedded boundary method (EBM) for irregular domains [21, 22] was extended by the authors ([26])
to solve the elliptic and parabolic interface problem with interior boundaries. In general form, the elliptic partial
diﬀerential equation is
∇ · β∇T

=

f

(7)

where the function β is continuous and smooth except at the interior boundary and f is a given function, continuous
except perhaps at the interior boundary. Boundary conditions for both exterior and interior boundary are needed
to close the problem. The boundary condition for the exterior boundary is either of Dirichlet or Neumann type.
At the interior boundary, the following jump conditions are applied:
[T ] =
∂p
=
β
∂n

J1

(8)

J2

(9)

The embedded boundary method is a ﬁnite volume method for an irregular domain embedded on a Cartesian
grid. When embedded boundary method is used to solve the elliptic boundary value problem, unknowns are
deﬁned in the computational cell centers for both interior cells (full cells) as well as boundary cells (partial cells)
which intersect with the interior boundary, instead of being deﬁned in the geometrical center of a cell ([26, 21,
22, 25]). This main feature of EBM is retained in the algorithm for the elliptic interface problem. For a full cell,
one unknown is set at the cell center and the standard ﬁnite volume method is used to obtain one linear algebraic

514

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520
B
B

Tb

B

(i,j+1)

Ta

(i,j+1)
g

T2

Tb

T1
(i-1,j)

f

Ta

e

Ta
(i+1,j)

(i,j)

(i-1,j)

(i+1,j)

(i,j)
h c

(i,j-1)

d

(i,j-1)

A

A

A

(a)

(b)

(c)

Fig. 1. (a) Placement of unknowns in a cell containing the interface, (b) stencil for the interface unknowns for the jump condition, and (c)
stencil for the cell center unknowns.

equation. On the other hand, more unknowns are needed in order to discretize the elliptic equation consistent with
two interface jump conditions for partial cells. Figure 1a shows the placement of unknowns in a cell with interior
boundary. The whole cell contains two partial cells representing two material components (A and B) which are
separated by the interior boundary. Two unknowns (T 1 , T 2 ) are deﬁned in the cell center for each part of the
cell. In order to satisfy the jump conditions (8) and (9), two additional unknowns T a and T b are deﬁned in the
geometrical center of the segment of the interior boundary intersecting with the cell.
While the algorithm implemented in the code works in both two- and three-dimensional spaces, we focus here
on a two-dimensional case for visual simplicity. A schematic of the corresponding stencil for the interpolation of
boundary unknowns is shown in Figure 1b. The direction of the normal vector to the interior boundary is from A
to B, assuming that A is the interior component. The discretization of the jump condition (8) is simply
TA − TB

=

J1

(10)

The discretization of the jump condition (9) is more complicated because the normal derivatives of unknowns
in both sides of the interior boundary have to be calculated. This is processed by ﬁtting a quadratic polynomial
([21, 22]). The main idea is to use one unknown in cell (i,j), two unknowns in the ﬁrst layer of neighbors of cell
(i,j), and three unknowns in the second layer of neighbors of cell (i,j), that six unknowns in total are given for six
coeﬃcients of the quadratic polynomial. For example, in order to construct the quadratic polynomial to evaluate
the ﬂux at the interior boundary segment center for component A, the six unknowns are T a , T i+1, j , T i+1, j−1 , T i+2, j ,
T i+2, j−1 , and T i+2, j−2 . Similarly, we can construct the quadratic polynomial for component B. Taking the normal
∂T
derivatives of the ﬁtted polynomials for two components to obtain ∂T
∂n A , ∂n B , respectively, and using the jump
condition (9), we obtain,
β|B

∂T
∂n

B

− β|A

∂T
∂n

A

= J2

(11)

The embedded boundary method is used to setup two equations for two unknowns in the cell center separately.
For the partial cell cde f , a similar stencil is used to discretize the elliptic operator (see Figure 1c). Integrating
equation (7) and using the divergence theorem, we obtain
∇ · (β∇T ) ds =
cde f

∂(cde f )

β∇T · n dl

=

f ds

(12)

cde f

which is
β∇T · n dl +
cd

β∇T · n dl +
de

β∇T · n dl +
ef

β∇T · n dl

=

fc

f ds.

(13)

cde f

The discretized form is
lcd · Fluxcd + lde · Fluxde + le f · Fluxe f + l f c · Flux f c

=

f (i, j)

ds
cde f

(14)

515

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520

where l xy is the length of the segment between x and y. For Fluxcd , a second order derivative is calculated by
T
−T
T
−T
using the linear interpolation of i, j−1Δx i, j and i+1, j−1Δx i+1, j in the center of segment cd [21] and multiplying by β.
T j −T i, j
For Fluxde , we simply use central diﬀerence i+1,Δy
to calculate the derivative and multiply β. Fluxe f is obtained
T

−T

T

−T

similarly to Fluxcd by evaluating linear interpolation of i, j+1Δx i, j and i+1, j+1Δx i+1, j in the center of ef and multiplying
by β. Flux f c is evaluated, as described in the previous paragraph, as β|A ∂T
∂n A . Similarly, ﬂuxes of other partial
cells are obtained. As the unknowns at the geometrical centers of interface segments can be expressed in terms of
unknowns in cell centers, the resulting system of equations is written only for unknowns deﬁned at cell centers.
The 3D algorithm is similar. A bi-linear interpolation is used for the interface ﬂuxes and 10 unknowns are
used to construct a quadratic polynomial in 3D containing 10 coeﬃcients.
3.2. Hydro- and MHD Algorithms
The system of MHD equations (1)−(4), a coupled parabolicelliptic system in a geometrically complex domain,
is solved using operator splitting and front tracking. The propagation and redistribution of the interface using the
method of front tracking ([11],[13]) is performed at the beginning of each time step. Interfaces are represented
by triangle meshes that are propagated in each time step. The topology issues of the interface are resolved by
the FronTier library and the only information required by the FronTier library is the discretized velocity ﬁled in
the computational domain, which is stored in the center of each computation grid. Velocity of each vertex in the
interface mesh is the result of interpolation of nearby cell center velocities. Then interior states are updated by the
incompressible hydro solver.
The magnetic source term ( 1c (J × B)) is evaluated ﬁrst. The discretization of equation (5) is similar to that
in section (3.1), while the boundary condition is much simpler. Similarly, integrating equation (5) together with
divergence theorem, we obtain.
∇ · (∇ϕ) dv =

∂v

v

∇ϕ · n ds =

∂v

1
(u × B) · n ds,
c

(15)

which is
∂v

∂ϕ
ds
∂n

=

∂v

1
(u × B) · n ds.
c

(16)

With the boundary condition (6), we can see that the integral along the boundary of conductive ﬂuid in each partial
cell is canceled in both sides of (16), and the discretization equation is greatly simpliﬁed.
After solving equation (5), the gradient of the electric potential ϕ is substituted into equation (3) and the current
density J is obtained. Secondly, we deal with the equation (1), without regarding the divergence constraint, for an
intermediate velocity u∗ . Employing an operator splitting technique, we resolve the advection step
u − un
Δt

= −(un · ∇)un .

(17)

Only for the advection step, the density jump across the interface of two ﬂuid components is smoothed with a
certain smoothing radius of computation cells [14]. The advection part, equation (17), is evaluated explicitly,
with a second order Godunov type scheme ([10]). For the diﬀusion part, we employ the implicit Crank-Nicolson
method. Two ﬂuid components are solved together, disregarding the interface.
Thirdly, the diﬀusion step and the source term are resolved
u∗ − u
+ ∇q
Δt

=

1
μ
ρg + (J × B) + ∇2 (u∗ + u ),
c
2

(18)

where q is the pressure of the previous time step. Finally, we perform the projection step. Applying the divergence
operator in both sides of equation
u∗

= un+1 +

Δt n+1
∇φ
ρ

(19)

516

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520

and using the divergence constraint ∇ · un+1 = 0, we obtain the following elliptic equation for pressure
∇2 φn+1

=

ρ
∇ · u∗ .
Δt

(20)

The projection step is an elliptic interface problem discussed in section (3.1). Two jump conditions for pressure
are
=

p
1 ∂p
ρ ∂n

σκ

(21)

= 0

(22)

where κ is the curvature and σ is the surface tension coeﬃcient. A matrix to solve such elliptic interface problem
is set according to the algorithm described in section (3.1).
The pressure is updated using the solution of the projection step:
p

= q + φn+1

(23)

The described algorithm achieves the second order convergence.
The implementation is carried out with C++ and MPI for the communication between processors. FronTier’s
hyperbolic solvers demonstrate good scalability on large machines of the IBM BlueGene series. The scalability
of elliptic solvers is determined by the scalability of commonly used parallel libraries for sparse linear system
of equations (preconditioned Krylov subspace iterative solvers of the PETSc library have been used in our MHD
code).
4. Veriﬁcation and Validation
Veriﬁcation and validation tests for the three-dimensional FronTier-MHD code have been performed using
experimental and theoretical studies of liquid mercury jets in magnetic ﬁelds. Experimental studies of a mercury
jet entering a magnetic ﬁeld with the magnitude satisfying the hyperbolic tangent proﬁle have been performed
in [23]. An asymptotic theoretical analysis has also been done by the same group. The experiment setup is as
follows. A mercury jet with the initial diameter of 8 mm is shot horizontally into a transverse magnetic ﬁeld with
the initial velocity of 2.1 m/s. The amplitude of the transverse magnetic ﬁeld satisﬁes the following equation
(

By 2
)
Bmax

=

z − z0
1
[1 − tanh(
)],
2
Lm

(24)

where z0 is the center and Lm is the characteristic length of the magnetic ﬁeld. In our simulations, z0 = 1.5 cm and
Lm = 0.62 cm.
As predicted in [23], the magnitude of expansion of the jet depends on the z value:
g∗s2 (z ∗ )

=

∗

βsin(αz )
−βcos(αz ∗ )

where α =

√

z

∗

cos(αt)
dt
cosh2 (εm t)

−∞
z

∗

−∞

cos(αt)
dt
cosh2 (εm t)

(25)

6/Wa and β = εm Na /8α. And

• Na = σe B2max a/ρ f ω0 is the Stuart number of the jet, σe is the electric conductivity of mercury, a is the radius
of the cross-section of the jet, ρ f is the density of mercury and ω0 is the main ﬂow velocity which is 2.1m/s.
• Wa = ρ f aω20 /σ is the Weber number of the jet, σ is the surface tension of mercury.
• εm = a/Lm and z ∗ = z/a.

517

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520

(a)

(b)

(c)

Fig. 2. FronTier-MHD simulation of jet deformation in magnetic ﬁeld. Cross sections of the jet are shown at observation points located at 0,
3.5, and 5.5 cm.
B=1.88T
1.4
Theory
1.2

1

Simulation
Experiment

ΔR/R

0.8

0.6

0.4

0.2

0
10

15

20

25

30

35
Z(mm)

40

45

50

55

60

Fig. 3. Mercury jet deformation as function of the distance from the magnetic ﬁeld center for 1.88 T magnetic ﬁeld. Results of simulations
(green dashed line), asymptotic calculations (red dash-dotted line), and experiments (blue dotted line) are shown.

Numerical simulation was performed using the magnetic ﬁled strength Bmax of 1.41 T and 1.88 T. In order
to save computation time, simulations were performed in a frame moving with the initial jet velocity. In the
asymptotic analysis of [23], the jet was assumed to extend inﬁnitely and reach the steady state. To simulate
similar conditions, initially long cylindrical jet was moving through the magnetic ﬁeld rather then being ejected
from the nozzle. Also, the jet is assumed to be in the vacuum while in the simulation, the vacuum was substituted
with light gas, with the density 104 times smaller than the density of mercury. With such a large density ratio, the
inﬂuence of gas on the momentum of the mercury jet can be ignored. In order to obtain accurate proﬁle of the
electric current density, the computational mesh contained approximately 20 cells across the cross-section of the
mercury jet.
Experimental results of the jet deformation from [23], results of asymptotic analysis, and numerical simulations are plotted in Figure 3 for 1.88 T magnetic ﬁeld and in Figure 4 for 1.41 T ﬁeld. We observe a very good
agreement of simulations with asymptotic calculations at small distances from the magnetic ﬁeld center corresponding to smaller jet deformations. The expected disagreement with experimental results at small distances can
be explained by the fact that experiments were carried out using a cylindrical nozzle located at z = 0 that reduced
jet deformations compared to long free jets. But at larger distances from the nozzle corresponding to larger jet
deformations, numerical simulations, theoretical calculations, and experiments are all in agreement.
We would like to comment on the importance of maintaining a sharp density discontinuity via the front tracking
and embedded boundary methods. Without the embedded boundary method, the density ratio that interior solving
can handle is limited by high condition number of the corresponding matrix of projection step. In order to perform
the simulation without the embedded boundary method, we artiﬁcially increased the density of ambient gas so

518

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520
B=1.41T
0.8

Theory

0.7

Simulation

0.6

Experiment

ΔR/R

0.5
0.4
0.3
0.2
0.1
10

15

20

25

30

35
Z(mm)

40

45

50

55

60

Fig. 4. Mercury jet deformation as function of the distance from the magnetic ﬁeld center for 1.41 T magnetic ﬁeld. Results of simulations
(green dashed line), asymptotic calculations (red dash-dotted line), and experiments (blue dotted line) are shown.
B=1.88T
1.4
1.2

Theory
Simulation
Experiment

ΔR/R

1
0.8
0.6
0.4
0.2
10

15

20

25

30

35
Z(mm)

40

45

50

55

60

Fig. 5. Degradation of accuracy without sharp density discontinuity. Mercury jet deformation as function of the distance from the magnetic
ﬁeld center for 1.88 T magnetic ﬁeld. Results of untracked simulations (green dashed line), asymptotic calculations (red dash-dotted line), and
experiments (blue dotted line) are shown.

that the density ratio dropped to 10. Figures 5 and 6 demonstrate the degradation of accuracy of simulations if
the correct density ratio and sharp density discontinuity are not resolved. Keeping the discontinuity sharp is even
more important for applications involving more extreme ﬂow regimes.
5. Applications
Both compressible and incompressible ﬂuid FronTier-MHD code are used for the simulation of processed relevant to energy research and accelerator applications. Simulations of the mercury target for the Muon Accelerator
Project (http://map.fnal.gov) is among the most important applications of the code. The target will contain a series
of 30-cm-long and 1-cm-diameter mercury jets entering a strong (∼ 15 Tesla) magnetic ﬁeld at a small angle to the
solenoid axis. When each jet reaches the center of the solenoid, it interacts with a powerful proton pulse penetrating the jet and depositing energy of the order of 100 J/g into mercury. The purpose of our numerical simulations
is to evaluate states of the target before and after the interaction with protons to optimize the target design. The
compressible code deals with the jet instabilities due to external energy deposition and their partial stabilization
by the magnetic ﬁeld [7]. The incompressible FronTier MHD code is used for the simulation of liquid metal jets
in magnetic ﬁelds of diﬀerent conﬁgurations prior to the interaction with proton pulses. Other applications involve
pellet ablation in tokamaks [8], and plasma jet liners for magneto-inertial fusion [9].

519

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520
B=1.41T
0.8
0.7
0.6

Theory
Simulation
Experiment

ΔR/R

0.5
0.4
0.3
0.2
0.1
10

15

20

25

30

35
Z(mm)

40

45

50

55

60

Fig. 6. Degradation of accuracy without sharp density discontinuity. Mercury jet deformation as function of the distance from the magnetic
ﬁeld center for 1.41 T magnetic ﬁeld. Results of untracked simulations (green dashed line), asymptotic calculations (red dash-dotted line), and
experiments (blue dotted line) are shown.

6. Conclusions
A numerical algorithm and the parallel FronTier-MHD code for the study of three-dimensional, incompressible, multiphase or free surface MHD ﬂows at low magnetic Reynolds numbers, capable of handling large density
ratios across material interfaces, have been developed. The algorithm is based on the front tracking method for
material interfaces and the embedded boundary methods for elliptic problems. The code has achieved a good accuracy in veriﬁcation and validation tests involving three-dimensional mercury jets in nonuniform magnetic ﬁelds.
The FronTier-MHD code has been used for simulations of liquid mercury targets for the proposed muon collider
/ neutrino factory, ablation of pellets in tokamaks, and processes in hybrid magnetoinertial fusion.
Acknowledgments:
This work was supported in part by the Muon Accelerator Program of the US Department of Energy.
References
[1] A. Y. Ying, N. B. Morley, S. Smolentsev, K. Gulec, P. Fogarty, Free surface heat transfer and innovative designs for thin and thick liquid
walls, Fusion Engineering and Design, Vol. 49-50, pp. 397- 406, 2000
[2] M. Abdou, N. Morley, M. Sawan, Editors, Special Issue on Innovative High-Power Density Concepts for Fusion Plasma Chambers,
Fusion Engineering and Design, Vol. 72, Issues 1-3, pp. 1-326, November, 2004
[3] K. McDonald et al., The MERIT high-power target experiment at the CERN PS, Proc. PAC09 (Vancouver, Canada), TU4GRI03, 2009.
[4] M.-Jiu Ni, R. Munipalli, N. B. Morley, M. A. Abdou, Validation strategies of HIMAG in interfacial ﬂow computation for fusion applications, Fusion Engineering and Design, Vol. 81, 2006, 1535 - 1541.
[5] R. Samulyak, J. Du, J. Glimm, and Z. Xu. A numerical algorithm for MHD of free surface ﬂows at low magnetic reynolds numbers. J.
Comput. Phys., 226:1532–1546, 2007.
[6] H. Lim, J. Iwerks, Y. Yu, J. Glimm, and D. H. Sharp. Veriﬁcation and validation of a method for the simulation of turbulent mixing.
Physica Scripta, T142:014014, 2010.
[7] R. Samulyak, W. Bo, X. Li, H. Kirk, and K. McDonald. Computational algorithms for multiphase magnetohydrodynamics and applications. Condensed Matter Physics, 13:43402, 2010.
[8] R. Samulyak, T. Lu, and P. Parks. A hydromagnetic simulation of pellet ablation in electrostatic approximation. Nuclear Fusion,
47:103–118, 2007.
[9] H. Kim, L. Zhang, R. Samulyak, P. Parks, On the structure of plasma liners for plasma jet induced magnetoinertial fusion. Phys. Plasmas,
2013. In press.
[10] J. B. Bell, P. Colella, and H. M. Glaz. A second order projection method for the incompressible navier-stokes equations. J. Comput.
Phys., 85:257, 1989.
[11] J. Du, B. Fix, J. Glimm, X. Jia, X. Li, Y. Li, and L. Wu. A simple package for front tracking. J. Comput. Phys., 213:613 – 628, 2006.
[12] J. P. FREIDBERG. Rev. Mod. PHys., 54:801, 1982.
[13] J. Glimm, J. Grove, X. Li, K. L. Shyue, Q. Zhang., and Y. Zeng. Three dimensional front tracking. SIAM J. Sci. Comput., 19:703–727,
1998.
[14] S. O. Unverdi and G. Tryggvason. A front-tracking method for viscous, imcompressible, multi-ﬂuid ﬂows. J. Comput. Phys., 100(1):25–
37, 1992.
[15] G. Tryggvason, B. Bunner, and et. al. A front-tracking method for the computations of multiphase ﬂow. J. Comput. Phys., 169:708–759,
2001.

520

Tongfei Guo et al. / Procedia Computer Science 18 (2013) 511 – 520

[16] X.-D. Liu, R. Fedkiw, and M. Kang. A boundary condition capturing method for poisson’s equation on irregular domains. J. Comput.
Phys., 160:151–178, 2000.
[17] M. Kang, R. Fedkiw, and X.-D. Liu. A boundary condition capturing method for multiphase incompressible ﬂow. J. Sci. Comput.,
15(3):323–360, 2000.
[18] Z. Li and K. Ito. The Immersed Interface Method: Numerical Solutions of PDEs Involving Interfaces and Irregular Domains. Frontiers
Appl. Math. 33, SIAM, Piladelphia, 2006.
[19] L. Lee and R. LeVeque. An immersed interface method for incompressible navier-stokes equations. SIAM J. Sci. Comput., 25(3):832–
856, 2003.
[20] S. Wang, J. Glimm, R. Samulyak, X. Jiao, Embedded boundary method for two phase incompressible ﬂow, 2012. Submitted, available
at arxiv.ogr
[21] H. Johansen and P. Colella. A cartesian grid embedding boundary method for Poisson’s equation on irregular domains. J. Comput. Phys.,
147:60–85, 1998.
[22] P. McCorquodale, P. Colella, and H. Johansen. A cartesian grid embedded boundary method for the heat equation on irregular domains.
J. Comput. Phys., 173:620–635, 2001.
[23] S. Oshima, R. Yamane, Y. Moshimaru, and T. Matsuoka. The shape of a liquid metal jet under a non-uniform magnetic ﬁeld. JCME Int.
J., 30:437C448, 1987.
[24] C. B. Reed S. Molokov. Review of free-surface mhd experiments and modeling. Technical Report ANL/TD/TM99-08, Argonne National
Laboratory, 1999.
[25] P. Schwartz, M. Barad, P. Colella, T. Ligocki. A cartesian grid embedded boundary method for the heat equation and Poisson’s equation
in three dimensions. J. Comput. Phys., 211:531–550, 2006.
[26] S. Wang, R. Samulyak, T. Guo. An embedded boundary method for elliptic and parabolic problems with interfaces and application to
multi-material systems with phase transitions. Acta Mathematica Scientia, 30(2):499–521, 2010.

