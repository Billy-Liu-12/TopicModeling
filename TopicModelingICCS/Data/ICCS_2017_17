Available online at www.sciencedirect.com

ScienceDirect
Procedia Computer Science 108C (2017) 1434–1442

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Switzerlandto the Competitive
A Multi-ObjectiveZurich,
Approach

A
to
Facility Approach
Location Problem
A Multi-Objective
Multi-Objective
Approach
to the
the Competitive
Competitive
Facility
Location
Problem
Facility
Location
Problem
1*
Abdullah Konak , Sadan Kulturel-Konak1 and Lawrence Snyder2
1* Penn State Berks, Reading, PA,
1 USA
2
Abdullah
Konak
,, Sadan
Kulturel-Konak
1 and Lawrence Snyder2
2
Abdullah
Konak1*Industrial
Sadanand
Kulturel-Konak
and
Lawrence
Snyder
Lehigh University,
Systems Engineering,
Bethlehem,
PA, USA
1
1

1Penn State Berks, Reading, PA, USA
Penn State Berks, Reading, PA, USA
University,
Industrial
and
Systems Engineering,
Bethlehem, PA, USA
auk3@psu.edu,
sadan@psu.edu,
lvs2@lehigh.edu
Lehigh University,
Industrial and
Systems Engineering,
Bethlehem, PA, USA

2
2Lehigh

auk3@psu.edu, sadan@psu.edu, lvs2@lehigh.edu
auk3@psu.edu, sadan@psu.edu, lvs2@lehigh.edu
Abstract
In this paper, a new modeling approach is introduced for a competitive facility location problem in which
Abstract
multiple
Abstractcompetitors aim to maximize their market shares. The problem is called the Competitive
In this paper,
a new modeling
approach
is
introduced
for a competitive
facility
location
problem in which
Maximal
Covering
Location approach
Problem is
(CMCLP)
based
the classical
Maximal
Covering
In this paper,
a new modeling
introduced
for a on
competitive
facility
location
problem Location
in which
multiple competitors aim to maximize their market shares. The problem is called the Competitive
multiple
aimCMCLP
to maximize
their market
shares. The
called
Competitive
Problem. competitors
Typically, the
is modeled
as a Stackelberg
gameproblem
in whichis the
firstthe
player
and then
Maximal Covering Location Problem (CMCLP) based on the classical Maximal Covering Location
Maximal
Covering
Problem
(CMCLP)Onbased
on the
classical
Maximal
the other one
locate aLocation
fixed number
of facilities.
the other
hand,
the present
workCovering
considers Location
multiple
Problem. Typically, the CMCLP is modeled as a Stackelberg game in which the first player and then
Problem. Typically,
CMCLP
is modeled
as aaStackelberg
game in which
the first
player
competitors,
and the the
objective
is on
discovering
set of the competitors’
decision
tuples
thatand
arethen
not
the other one
locate
a fixed
number
of facilities.
On the
other hand, the the
present
work considersapproach
multiple
dominated
bylocate
any other
decision
tuples
in the solution
space.
proposed
the other one
a fixed
number
of facilities.
On the
other Thereby,
hand, the present
workmodeling
considers multiple
competitors,
and the objective
is on discovering
set of the competitors’
decision tuples
that are not
aims
to help competing
firms understand
tradeoffsaa when
engage in negotiations.
A mathematical
competitors,
and the objective
is on discovering
set of they
the competitors’
decision tuples
that are not
dominated by any other decision tuples in the solution space. Thereby, the proposed modeling approach
dominated byfor
any
decision
in the solution
space. Thereby,
the proposedgenetic
modeling
approach
formulation
theother
CMCLP
withtuples
two competitors
is presented.
A multi-objective
algorithm
is
aims to help competing firms understand tradeoffs when they engage in negotiations. A mathematical
aims to solve
help competing
firms
understand
tradeoffs when
they engage experiments
in negotiations.
A mathematical
used
the problems
with
multiple competitors.
Computational
demonstrate
that the
formulation for the CMCLP with two competitors is presented. A multi-objective genetic algorithm is
genetic
algorithm
able to approximate
the true Pareto
front. A multi-objective genetic algorithm is
formulation
for theisCMCLP
with two competitors
is presented.
used to solve the problems with multiple competitors. Computational experiments demonstrate that the
used to solve the problems with multiple competitors. Computational experiments demonstrate that the
©
2017 The
Authors.
by Elsevier
genetic
algorithm
isPublished
able to approximate
the
true Pareto front. Optimization
Keywords:
Facility
Location
GameB.V.
Theory,
genetic algorithm
is able toProblem,
approximate
the
trueMulti-objective
Pareto front.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
Keywords: Facility Location Problem, Game Theory, Multi-objective Optimization
Keywords: Facility Location Problem, Game Theory, Multi-objective Optimization

1 Introduction
1
Introduction
location problems are among the classical Operations Research problems with a broad range
1 Facility
Introduction
of application areas. One of the most widely studied facility location problems is the Maximal Covering
Facility location problems are among the classical Operations Research problems with a broad range
Facility
location
problems
are among
the maker
classical
Operations
problemsdemand
with a broad
range
Location
Problem
(MCLP)
where
a decision
seeks
to cover Research
as much customer
as possible
of application areas. One of the most widely studied facility location problems is the Maximal Covering
of
application
areas.
One
of
the
most
widely
studied
facility
location
problems
is
the
Maximal
Covering
by opening multiple facilities, selected from a set of candidate points. Customer demands are
Location Problem (MCLP) where a decision maker seeks to cover as much customer demand as possible
Location
Problem
(MCLP)
wherepoints.
a decision
maker seeks
as much
customer
as possible
concentrated
at a set
of discrete
A customer
pointtoiscover
covered
if there
exists demand
at least one
facility
by opening multiple facilities, selected from a set of candidate points. Customer demands are
by
opening
multiple
facilities,
selected
from
a
set
of
candidate
points.
Customer
demands
are
within a critical distance from the customer point. The MCLP has been extensively studied in the
concentrated at a set of discrete points. A customer point is covered if there exists at least one facility
concentrated at a set of discrete points. A customer point is covered if there exists at least one facility
within a critical distance from the customer point. The MCLP has been extensively studied in the
within a critical distance from the customer point. The MCLP has been extensively studied in the
*

Corresponding Author

*
*

Corresponding Author
Corresponding Author

1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.035

	

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

literature, and several review papers (Drezner & Hamacher, 2001; Farahani et al., 2012; Melo et al.,
2009; Snyder, 2006) summarize the existing work.
The competitive version of the problem, where two competitors try to maximize their demand
coverages in the same target market, is applicable when a firm determines facility locations in a
competitive market. Regarding the nature of competition, the competitive MCLP can be modeled in
two fashions: simultaneous or sequential (Kress & Pesch, 2012). In simultaneous models, the
competitors are unaware of one another’s decisions or repeatedly reoptimize their decisions according
to the other competitor’s decisions. Sequential models, which are more prevalent in the literature, are
based on a Stackelberg game in which a competitor (i.e., leader) first locates its facilities, and then the
second one (i.e., follower) locates its facilities optimally based on the leader’s decision. This problem
is usually formulated as an integer bi-level optimization problem and NP-hard. Several heuristics
(Alekseeva & Kochetov, 2013; Davydov et al., 2014(a); Davydov et al., 2014(b)) and exact approaches
(Alekseeva et al., 2015; Roboredo & Pessoa, 2013) are proposed to solve the sequential competitive
MCLP.
In this paper, we take a different approach to the competitive MCLP and propose a genetic algorithm
based on the NSGA-II (Deb et al., 2002) to generate multiple Pareto-optimal solutions rather than only
Nash or Stackelberg-Nash equilibria. We transform the problem into a multi-objective problem where
multiple competitors try to maximize their total demand coverages. In this scenario, the objectives of
the competitors are conflicting due to the dependencies among their decisions. The aim of the proposed
approach is to find a set of decision vector tuples such that no other decision vector tuple in the solution
space dominate them.
We should note that the MCLP has been formulated and studied previously as a multi-objective
problem. An extensive list of multi-objective approaches to the MCLP is given in (Farahani et al.,
2010). All of the current multi-objective approaches to the problem consider a single decision maker
that tries to optimize various types of objectives simultaneously, such as maximizing the total demand
coverage and minimizing the maximum distance between uncovered customer points and their nearest
facilities (Karasakal & Silav, 2016). In addition to a novel interpretation of the problem, we also
consider more than two competitors and present a mathematical model to verify the non-dominance of
the decision vector tuples found by the proposed multi-objective genetic algorithm.

2 Problem Description
There are m competitors, denoted by set K, targeting the demands of n customer points distributed
over a region. The candidate facility locations and customer points are represented by sets I and J of
discrete points, respectively. Each customer point has a deterministic demand of wj. Each competitor
k aims to maximize its total demand coverage k by opening k number of facilities selected from set I.
Customers are indifferent among the competitors. The only factor that determines the decision of a
customer is the distance to the facilities. It is assumed that customers can only access facilities located
within a threshold distance of . All demand of a customer point is covered by the closest accessible
facility. However, the demand of a customer point is equally shared by the facilities that are located in
the same closest distance to the customer point.
Let Xk={xk1, xk2,…, xkn} be the decision vector of competitor k such that xki=1 if competitor k locates
a facility at point i, and xki=0 otherwise. Multiple competitors are allowed to locate their facilities at the
same point. Let zkij be a binary variable such that zkij=1 if customer point j is covered by the facility of

1435

1436	

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

competitor k located at point i, and zkij=0 otherwise. For a given tuple of decision vectors {X1, X2,…,
Xm}, the total demand coverage of competitor k is given as follows:
1
 

 
 k    w j   zkij  max(1,  zlij )  
  iI
j J 
lK iI

 

(1)

Clearly, the total demand coverage of a competitor depends on the decisions of the other competitors.
The objective function of the problem is provided as follows:
max

X11 , X 2 2 , , X m m

{1 ,  2 ,

, m}

where k is the feasible solution space of competitor k. There are m conflicting objective functions due
to the interdependence among the decisions of m competitors, and optimizing the objective of a
competitor for the given decision vectors of other competitors may result in an unacceptable outcome
for them. Similar to multi-objective optimization, the goal is to discover a set of solutions that are not
dominated by any other solution.
Definition 1. A decision vector tuple {X1a, X2a,…, Xma} is said to be dominated by a decision vector
tuple {X1b, X2b,…, Xmb} if ka  kb for k=1,…,m and ka < kb for at least one k.
Definition 2. A decision vector tuple is said to be Pareto optimal if it is not dominated by another
decision vector tuple in the feasible solution space.
Definition 3. A mapping of all Pareto decision vector tuples to the objective space is called the Pareto
optimal front.
Fig. 1 illustrates the objective space of a problem with ten customers, ten candidate locations, and
two competitors, each selecting two facilities to open. In this problem, each competitor has 45 possible
alternatives (C(10, 2)=45 since 2 out of 10 locations are selected), and there are 4545 decision vector
tuples to consider. As seen in the figure, the majority of these decision vector tuples are dominated by
other tuples. A dominated decision vector tuple is suboptimal for both competitors. Therefore, it would
be acceptable for both competitors to move from a decision {X1a, X2b} to another decision {X1u, X2v}
that dominates {X1a, X2b} to maximize their individual total demand coverages. Fig. 1 also illustrates
the decision vector tuple that corresponds to the maximin saddle point, which can be identified as
follows. First, the worst possible outcome of each decision vector of competitor 1 is determined by
considering all decision vectors of competitor 2. Then, the decision vector with the maximum of the
worst outcomes is selected as competitor 1’s maximin decision vector. Finally, the same process is
repeated for competitor 2 to identify its maximin decision vector. This Nash Equilibrium decision tuple
is dominated by several Pareto optimal decision tuples as seen in the figure. Similar to the prisoner's
dilemma game, the two competitors could maximize their total demand coverage by coordinating their
decisions rather than attempting to optimize their worst case demand coverages. Therefore, the set of
Pareto optimal decision tuples provides useful information for the competitors that may engage in
negotiations. For example, decision makers can eliminate inferior scenarios and continue their analysis
only within the non-dominated set. In addition, the Pareto optimal front provides a basis for assessing
each decision vector tuple.

	

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

Fig. 1. The solution space of a problem with n=10, m=2, and k=2.

2.1 A Mixed Integer Programming Model
In this section, we present a mixed integer programming (MIP) model for two competitors. In
computational experiments, this model is used to check non-dominance of the solutions found by the
multi-objective genetic algorithm. Additional notation of the model is given as follows:
distance between points i and j
set of points that can cover customer point j, A(j)={iI: dij  }
set of candidate points such that C(i, j)={lA(j): dlj < dij}

dij
A(j)
C(i, j)



Max 1 
1ij ,  2

jJ iA( j )
 kij  w j zkij



 kij  0.5w j  M (1  ztlj )

z

kij

1





2ij 


k  K , j  J , i  A( j )

(2)

k  K,t  K, j  J ,i  I ,l  I : k  t

(3)

k  K, j  J

(4)

k  K , j  J , i  A( j )

(5)

kK

(6)

k  K , j  J , i  A( j ), t  K , l  C (i, j )

(7)

jJ iA( j )

iA( j )

zkij  xki

x

ki

k

iI

zkij  1  xtl

zkij , xij {0,1};  kij  0
Constraints (2) and (3) are used to compute the total demand covered by each competitor k using a
set of linear inequalities. Note that the total demand coverage given in (1) is a non-linear function due
to the interactions among the competitors. Constraints (2) and (3) define an upper bound on customer
j’s demand that competitor k can cover via its facility located at point i based on three scenarios as
follows:

1437

1438	

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

 Competitor k cannot cover point j via point i (zkij=0), then kij 0. This scenario is realized when
competitor k does not have a facility at point i, or either of the competitors has a facility closer to
point j than point i.
 Only competitor k covers customer j (zkij=1) via its facility located at point i, then kijwj.
 Competitor k covers point j (zkij=1) via its facility located at point i, but the other competitor also has
a facility covering customer j, i.e., 1ij0.5wj and 2ij0.5wj. This scenario is mainly possible because
the competitors can to locate facilities at the same point.
Since both competitors aim to maximize their total demand coverages, the bounds on individual
demand coverages defined by Constraints (2) and (3) are always enforced. Constraint (4) makes sure
that a customer point j can be covered by at most one facility of competitor k. Constraint (5) requires
that competitor k locates a facility at point i if this point covers any customers. Constraint (6) sets the
number of the facilities that competitor k opens. Constraint (7) states that competitor k cannot cover
customer point j via point i if there exists a facility closer to customer point j than point i.

3 Solution Methodology
The multi-objective competitive MCLP defined in this paper cannot be solved optimally for largesized problem instances. Discovering all non-dominated decision vector tuples is also computationally
impossible. Priori methods, such as converting multiple objectives into a single objective through linear
scalarization of the objectives, tend to miss some Pareto optimal solutions when the Pareto front is nonconvex. Evolutionary algorithms are among the most frequently used methods to solve multi-objective
optimization problems because they can find multiple solutions to a problem in a single run (Konak, et
al., 2006). Therefore, a multi-objective genetic algorithm (GA) is developed to find a set of nondominated decision vector tuples that approximate to the true Pareto front as close as possible. The
multi-objective GA is based on the NSGA-II (Deb et al., 2002), which is known to perform particularly
well with more than two objectives. The main difference between the multi-objective GA in this paper
and the NSGA-II is that the selection process of individuals for crossover is modified using a restrictive
mating procedure (Konak & Smith, 2011; Kulturel-Konak et al., 2007) and a new tie-breaking rule.
These modifications are justified by the special structure of the problem. Therefore, we will refer to the
multi-objective GA as NSGA-II* in the following sections.

3.1 Solution Encoding
A random key encoding (Bean, 1994) is used to encode each competitor’s decision vector. In the
random key encoding, a chromosome is made of random numbers, and a decoder algorithm maps the
chromosome to the solution space of the problem. Let Dkq={rk1q,…, rknq} represent the chromosome of
competitor k for the qth individual in the population such that rkiq[0,1] is the random key corresponding
to decision variable xki. Given Dkq, the decoding algorithm sets xki=1 for the largest αk random keys and
xki=0 for all others to construct decision vector Xkq. Thereby, the decoding algorithm ensures that
decision vector Xkq has always αk facilities opened. An individual of the NSGA-II* is an m-tuple of the
competitors’ individual chromosomes, i.e., (D1q, D2q,..., Dmq) represents the qth individual. The current
population (Pcur) of the NSGA-II* consists of µ m-tuples from (D11,…, Dm1) to (D1µ,…, Dmµ). The
following example illustrates decoding of an individual with m=2, n=4, and αk=2.

({0.56, 0.12, 0.98, 0.80},{0.11, 0.25, 0.05, 0.87})  ({0, 0, 0, 1, 1},{0, 1, 0, 0, 1})

	

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

3.2 Crossover, Mutation, and Selection
Uniform crossover is used to produce an offspring from two parents such that the offspring randomly
inherits each gene from either of the parents with 0.5 probability. After crossover, the offspring is
mutated by assigning random numbers to its genes with a probability of 1/n. The procedure of the
crossover operator is given as follows:
Crossover(a,b){
for k=1,…,m;i=1,…,n {
if (rand()< 0.5) then rki=rkia else rki=rkib
if (rand()< 1/n) then rki=rand() }
Decode (D1,…,Dm) into (X1,…,Xm)
Return (D1,…,Dm) and (X1,…,Xm)}

The crossover operator is applied until µ offspring are created. Individuals for the next generation
are selected by the non-dominating sorting method with crowding distance (Deb et al., 2002). After
evaluating the individuals of the population, they are classified into fronts F1, F2,… such that the
individuals in Fi+1 are dominated by at least one individual in Fi, but none of the individuals in Fi+1
dominate any individuals in Fi. After determining the fronts, individuals are selected for the next
population starting from F1, then F2, and so on until the next population is full. During this process, if
all individuals in a front Ft cannot be copied to the next population, a crowding distance measure is used
as the tiebreaker for the selection. To calculate the crowding distance of an individual with respect to
competitor k in a front Ft, all individuals in Ft are first sorted in the ascending order of k. Let cdk[q] be
the crowding distance of the [q]th individual in the sorted Ft with respect to competitor k. Then, cdk[q] is
defined as cdk[q]= for q=1, cdk[q]=0 for q=|Ft|, and cdk[q]=µk[q-1]-µk[q+1] for all other cases. Finally, the
crowding distance of each individual in Ft is calculated by adding its crowding distances calculated with
respected to all competitors.
The calculation of the crowding distance described above is slightly different from the crowding
distance defined in (Deb et al., 2002). First of all, since all objectives have the same scale, crowding
distances are not scaled in the NSGA-II*. Moreover, a large value is assigned only to the individuals
residing in the lower ends of fronts. In the primary crowding distance measure, a large crowding
distance value is assigned to the individuals residing at all extremes of a front to encourage their
selections for the next generation. The tradeoffs among the objective functions in the competitive
MCLP are quite different from a typical multi-objective problem in which a decision vector is mapped
to multiple objective functions of different types. In the NSGA-II*, however, an individual is made of
the decision vectors of multiple decision makers (competitors), each of whom has its own objective
function of the same type. Therefore, the objective of a competitor can have a low value because of an
ineffective decision made by the competitor, but not because of other competitors’ decisions.

3.3 Overall Algorithm
In the NSGA-II*, the individuals in Pcur are clustered using k-means clustering in the objective space.
For the crossover operation, two individuals are selected from Pcur randomly and uniformly such that
they reside in the same cluster. This restrictive mating approach has been shown to improve the
performance of multi-objective GAs (Konak & Smith, 2011; Kulturel-Konak et al., 2007). The pseudo
code of the NSGA-II* is given below:

1439

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

1440	

Initialize Pcur with  random individuals.
for g=1,…,gmax{
Determine the cluster of each individual in Pcur
Clear Pnew
while (size(Pnew) <  ) {
Randomly select a and b from the same cluster in Pcur
c=Crossover(a,b)
if cPcur and cPnew then add c to Pnew
}
Combine Pcur and Pnew
Determine fronts F1, F2,… using non-dominated sorting
Repopulate Pcur by selecting  individuals from F1, F2,…
}

4 Computational Experiments
First, the performance of the NSGA-II* is compared to the NSGA-II on several instances of two test
problems with n=50 and n=60. Without loss of generality, it is assumed that I=J in all test problems.
The coordinates of the points are randomly selected in a unit square, and the Euclidian distance is used
as the distance metric. The demand of each customer point is also randomly and uniformly generated
in [0, 1]. In all problem instances, αk=3 for all competitors and =0.2.
Both algorithms were run for five random replications of 500 iterations with µ=100. For the NSGAII*, the number of clusters was three in all runs. In order to compare the final non-dominated fronts F *
and F found by the NSGA-II* and NSGA-II, respectively, we use a version of the coverage measure
C(F*, F) which gives the percent of the individuals in F* that are dominated by at least one individual
in F as follows:

C( F * , F ) 
where X

|{Y  F * ; X  F : X
| F* |

Y }|

Y means that X dominates Y (Zitzler & Thiele, 1999).

Since five non-dominated fronts were obtained in five random replications of the algorithms, the
coverage values in Table 1 represent the average of 25 comparisons. Clearly, the NSGA-II*
outperformed the NSGA-II in all problem instances, excluding the problem instance with n=60 and m=2.
In all other instances, individuals in F* overwhelmingly dominated the individuals in F. These results
indicate that our modifications to the NSGA-II are in fact effective.
We also tested how well F* found by the NSGA-II* could approximate to the true Pareto front in the
case of the instances of two competitors. For each non-dominated individual of the best F* found in
five replications, the MIP model is used to check whether the individual is a true non-dominated decision
vector tuple or not. To do so, we made a few changes in the MIP model. First, we added lower bound
constraints on the objective functions of the competitors based on 1 and 2 values of the individual, and
then we solved the model optimally to maximize the sum of the competitors’ individual objectives. In
other words, the MIP model is used to discover whether there exists a decision vector pair that dominates
(1, 2) found by the NSGA-II*. In the table, C(F*, MIP) indicates the percent of the individuals for
which the MIP was able to find a dominating decision vector pair. In the problem instance with n=50

	

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

and m=2, 98 out of 100 non-dominated vector pairs are in fact true Pareto-optimal, and for the problem
instance with n=60 and m=2, 99 out of 100 are Pareto optimal.
Table 1. Summary of computational experiments.
n
50
50
50
60
60
60

m
2
3
4
2
3
4

Average
C(F*, F)
8.8%
8.8%
2.4%
26.0%
5.7%
1.7%

Average
C(F, F*)
34.6%
22.4%
7.2%
10.8%
26.9%
8.4%

C(F*, MIP)
2%

1%

CPU (sec)
NSGA-II*
152
150
175
159
167
176

CPU (sec)
NSGA-II
130
125
148
148
139
159

5 Conclusion
We introduce a multi-objective genetic algorithm for a competitive facility location problem in
which multiple competitors aim to gain maximum possible market share. The main contribution of the
paper is a multi-objective modeling of the problem so that trade-offs among the competitor decisions
can be investigated. The set of discovered non-dominated decision vector tuples can provide the
competitors with useful information when they engage in negotiations. Furthermore, several
modifications are proposed to the NSGA-II such as restrictive mating based on k-mean clusters, a
modified crowding distance measure, and the population with distinct individuals. These modifications
improve the performance of the NSGA-II to solve the defined problem. Comparing the best Pareto front
solutions found by the multi-objective approach to the solutions found by other game theory models
will be an interesting further research.

References
Alekseeva, E., & Kochetov, Y. (2013). Matheuristics and Exact Methods for the Discrete (r|p)-Centroid
Problem. In E.-G. Talbi (Ed.), Metaheuristics for Bi-level Optimization (pp. 189-219). Berlin,
Heidelberg: Springer Berlin Heidelberg.
Alekseeva, E., Kochetov, Y., & Plyasunov, A. (2015). An exact method for the discrete (r|p)-centroid
problem. Journal of Global Optimization, 63(3), 445-460.
Bean, J. C. (1994). Genetic algorithms and random keys for sequencing and optimization. ORSA journal
on computing, 6(2), 154-160.
Davydov, I., Kochetov, Y., & Carrizosa, E. (2014(a)). A Local Search Heuristic for the (r|p)-Centroid
Problem in the Plane. Computers & Operations Research, 52, 334-340.
Davydov, I. A., Kochetov, Y. A., Mladenovic, N., & Urosevic, D. (2014(b)). Fast metaheuristics for the
discrete (r| p)-centroid problem. Automation and Remote Control, 75(4), 677-687.
Deb, K., Pratap, A., Agarwal, S., & Meyarivan, T. (2002). A fast and elitist multiobjective genetic
algorithm: NSGA-II. IEEE Transactions on Evolutionary Computation, 6(2), 182-197.
Drezner, Z., & Hamacher, H. W. (2001). Facility location: Applications and Theory: Springer Science
& Business Media.
Farahani, R. Z., Asgari, N., Heidari, N., Hosseininia, M., & Goh, M. (2012). Covering problems in
facility location: A review. Computers & Industrial Engineering, 62(1), 368-407.

1441

1442	

Abdullah Konak et al. / Procedia Computer Science 108C (2017) 1434–1442

Farahani, R. Z., SteadieSeifi, M., & Asgari, N. (2010). Multiple criteria facility location problems: A
survey. Applied Mathematical Modelling, 34(7), 1689-1709.
Karasakal, E., & Silav, A. (2016). A multi-objective genetic algorithm for a bi-objective facility location
problem with partial coverage. TOP, 24(1), 206-232.
Konak, A., & Smith, A.E. (2011). Efficient optimization of reliable two-node connected networks: a
biobjective approach, INFORMS Journal on Computing, 23(3), 430-445.
Konak, A., Coit, D.W., & Smith A.E. (2006). Multi-Objective Optimization Using Genetic Algorithms:
A Tutorial. Reliability Engineering and System Safety, 91, 992-1007.
Kress, D., & Pesch, E. (2012). Sequential competitive location on networks. European Journal of
Operational Research, 217(3), 483-499.
Kulturel-Konak, S., Konak, A., & Coit, D.W. (2007). Multiobjective metaheuristic approaches to
reliability optimization Computational Intelligence in Reliability Engineering (pp. 37-62):
Springer.
Melo, M. T., Nickel, S., & Saldanha-da-Gama, F. (2009). Facility location and supply chain
management–A review. European Journal of Operational Research, 196(2), 401-412.
Roboredo, M. C., & Pessoa, A.A. (2013). A branch-and-cut algorithm for the discrete (r∣p)-centroid
problem. European Journal of Operational Research, 224(1), 101-109.
Snyder, L. V. (2006). Facility location under uncertainty: a review. IIE Transactions, 38(7), 547-564.
Zitzler, E., & Thiele, L. (1999). Multiobjective evolutionary algorithms: a comparative case study and
the strength Pareto approach. IEEE transactions on Evolutionary Computation, 3(4), 257-271.

