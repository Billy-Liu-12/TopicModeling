Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 986 – 995

2013 International Conference on Computational Science

Sketch Arm, custom closets rapid prototyping system
Iván Rodríguez*, Silvana Gómez-Meire, Enrique Barreiro,
Javier Rodeiro, Celso Campos
Department of Computer Science, University of Vigo, Campus As Lagoas 32004, SPAIN

Abstract
We introduce Sketch Arm, a brand new tool for custom closets rapid prototyping that allows end users to sketch a completely
customized design proposal regardless of their technological training. Supported in current multi-touch hardware technology,
the application is conceived as a highly interactive system, and it can also assist the user with the prototype creation tasks by
autonomously generating desirable layouts. Incorporating a simulated annealing algorithm enables this automatic generation
of layouts by optimizing the closet inner space.
Throughout this paper, we present the main features and capabilities of Sketch Arm. We demonstrate that our system is able
to synthesize suitable closet layouts, creating several design proposals for different user profiles.
©
Rodríguez,
Silvana by
G. Elsevier
Meire, Enrique
Barreiro,
Javier
access under
CC Rodeiro,
BY-NC-NDCelso
license.Campos. Published by Elsevier B.V.
© 2013
2013 Iván
The Authors.
Published
B.V. Open
Selection
and/or
peer-review
under
responsibility
of the
organizers
of 2013
the 2013
International
Conference
on Computational
Selection and
peer
review under
responsibility
of the
organizers
of the
International
Conference
on Computational
Science
Keywords: procedural modelling; closet design; space layout; stochastic optimization; Computer Aided Design; multi-touch devices.

1. Introduction
Custom closets manufacturing arises in response to the spatial limitations that nowadays many of the existing
housing present, improving the organization and use of available space in living quarters. This type of closet is
practical and highly functional, built from the aesthetic taste and specific storage needs of each individual.
In the world of architecture, there are many computer applications that facilitate the design process and are
usually used to make graphical representations of the real world. These Computer Aided Design (CAD) tools are
designed to support the work of engineers, architects and, in general, all kinds of design professionals. Thus, they
are very powerful but technically demanding and generic application in engineering. That is why these
applications do not conform to the closet design industry, a very traditional and specific sub-sector. However,

* Corresponding author. Tel.: +34-988-387-017; fax: +34-988-387-001.
E-mail address: irconde@esei.uvigo.es (Iván Rodríguez), ccampos@uvigo.es (Celso Campos).

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.264

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

the penetration of these tools among the lay public is low. This is due to two causes: firstly, the creative process
is based on expert knowledge that the end user usually does not know, and secondly, these tools generally create
a representation that aims to be, above all, faithful to reality, sacrificing the user experience. Insofar as we are
able to overcome these shortcomings, we will bring the creative process closer to the general public.
In this context we introduce Sketch Arm, a custom closets rapid prototyping tool that, based on industry expert
knowledge, provides the potential customer the ability to create a completely customized design proposal. Thus,
as a starting point we performed a study of the creative process carried out by practicing designers (through a
series of interviews with the experts) in order to extract a set of design criteria or guidelines, adopted as universal
by furniture professionals, which define aspects such as standard closet dimensions or the relative position of the
different compartments within the closet. Subsequently, and supported in these conventions, we develop Sketch
Arm functionalities in search of a solution aimed at simplifying design tasks, improving user-system interaction,
and the assistance or orientation of the individual during prototyping. In short, we aim to define and implement
a completely new and satisfactory user experience.
2. Background
To achieve the goals set in relation to user experience, we use Human-Computer Interaction (HCI) and
Artificial Intelligence techniques in order to (i) design a natural interaction system that allows the user a simple
and intuitive use of the tool and (ii) implement a functional module for design support, able to generate possible
closet layouts based on specific storage needs. To implement these functions we carry out a preliminary study
that allows us to understand and choose the most suitable techniques and/or algorithms in each case.
The proliferation of mobile devices and the democratization of multi-touch technology have meant a jump
from Graphic User Interfaces (GUIs) towards gesture-based ones.
By definition, gesture-based interfaces are intuitive because they are based on one of the oldest known human
interaction methods, gestures. Meanwhile, touchscreen-based interaction is considered possibly the most
straightforward HCI technique [1] because the information visualization and control are performed through a
single medium, the display.
The ability to touch and manipulate data directly on the screen, without the intermediation of any additional
device, is very attractive for the end user: direct manipulation style favours IT low-skilled users [1, 2], thanks to
a smooth learning curve. For its part, gesture-based interaction is an extremely intuitive interface (based on
human inherent capabilities) for using applications that involve any artistic work.
However, the use of both interaction methods in humansatisfaction. We must design a global interaction in which each element has a purpose and adds value to user
experience.
On the other hand, the spatial layout problem has been treated in many ways by the authors but it is often
identified as an optimization problem, which seeks the best arrangement of a series of elements. In this search
process, each element is assigned a position and orientation that minimize the layout cost and meet certain
placement constraints. The layout problem formulated in these terms is seen as a generalization of the quadratic
assignment problem, and therefore, NP-complete. This implies, firstly, that the time required for calculating the
solution is prohibitive when the addressed problem has high complexity and, secondly, that the chances of
obtaining the exact solution to the problem in a polynomial time are slim.
In recent years, several papers about furniture layouts generation inside buildings [3, 4] and automatic floor
plan design of residential buildings, according to a series of interior design rules, [5] have been published. These
papers primarily arise in the field of video games in order to accelerate the creation of urban settings. They are
seeking to enrich or refine previous systems that either required constant user interaction, or did not take into
account ergonomic and habitability factors for creating layouts.
However, the layout problem is not restricted exclusively to architecture, it has been studied in multiple areas

987

988

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

of knowledge. Known as packing, packaging, container loading, pallets loading or spatial organization, the layout
problem is addressed in relation to tasks as diverse as document layout [6, 7], graph nodes layout [8], GUI layout
[9] or integrated circuit components layout [10].
[11] about layout problems in order to select the most appropriate
method to address it in the closet-manufacturing context. In this work [11], Cagan establishes a classification
into 6 main categories of layout algorithms available in the literature: (i) heuristic rule-based algorithms, (ii)
traditional optimization algorithms, (iii) genetic algorithms, (iv) simulated annealing algorithms, (v) extended
pattern search algorithms and (vi) a last category that encompasses hybrid algorithms. Withal, none of these
mentioned approaches is shown in the study as an absolute solution to the layout problem. That said, and since
we want to achieve a good balance between performance and quality, we shall have to use a simulated annealing
algorithm. This algorithm, proposed by Scott Kirkpatrick, C. Daniel Gelatt and Mario P. Vecchi in [12], allows
uphill moves to avoid being trapped in a local minimum so we can find an optimal (or close to optimal) correct
solution. Its computation time will depend on our expertise in configuring the algorithm and on its proper
adaptation to the problem to be addressed.

3. Sketch Arm

operating system) that provides the end user a collection of tools for drawing up a full sketch of his closet. The
design process begins with the creation of the room or wall where the closet will be installed, and then the
different constituent elements of the closet are gradually incorporated.
The structure of the system is based on a Model-View-Controller design pattern (Fig. 1) where:
The model encapsulates the data that define the application state and the structural representation of the
closet.
The view is the interface to the user. In this sense, it is responsible for capturing user interaction and
rendering screen elements.
The controller represents the design process logic, mapping user interaction to model and view update
operations.

Fig. 1. Sketch Arm general architecture.

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

Although design logic modules are decoupled, they must maintain two-way communication so that: (i) the
user can access the automatic layout design module at any point in the design process, (ii) the system is able to
visualize the model created by itself and (iii) the user has the possibility of changing this model.
3.1. Closet structural representation
The use of grammars for problem modelling has been applied in numerous researches, mainly in the field of
Computer Aided Architectural Design [13-15] but also for treating problems close to ours [16]. Supported by
Manfred
[16], we also use a grammar to propose a 3D closet definition as a common link between
the different functional modules in Sketch Arm.
The grammar is defined as
where is the set of non-terminal symbols, is the set of terminal
symbols ffor nodes and edges, is the set of production rules, and is the non-terminal start symbol. This
grammar leads to an undirected graph where each node represents a separate part of the cabinet, and each edge
represents a connection between two parts in contact
We define
and
, where
represents a body,
represents a
compartment divided horizontally, represents a compartment divided vertically, represents a non-divided
empty compartment, M represents a compartment that houses an accessory, represents a horizontal division,
represents a vertical division, and
represents a particular accessory. Below we show the production
rules in Fig. 2.

Fig. 2. Production rules for 3D custom closets.

The proposed grammar takes shape in a data structure named Closet. This structure is conceived as a tree:
Each terminal node stores information about a particular storage compartment or Hole, providing also, as
appropriate, information about the horizontal and vertical divisions that delimit it (denoted by Shelf and Division
respectively). Additionally, terminal nodes are responsible for storing information about the accessories included
in the compartments (denoted generically by Instantiable Element).
Similarly, for storing door-related information, we define another tree data structure, virtually identical to
Closet, named Door. The specification of this structure comprises essentially two elements: the front panels that
make up the door, named Hole, and the horizontal divisions between these panels, denoted by Shelff Each node
includes the geometrical data associated to each panel and, in case of being divided, it also provides references
to the resulting panels.
3.2. IInteractive editing module
We define the creative process carried out by the user to generate a complete sketch of the closet as a four-

989

990

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

stage process. The first three stages deal with the creation and edition of various aspects relevant to the final
design, while the fourth one provides the user an interactive visualization of the resulting design. Each stage
results in a functional module that brings the operations required to perform the associated tasks:
Room editing module. As a starting point, a geometric model of the external structure of the closet is generated
from a basic scheme of the room where it will be installed.
Closet interior editing module. Incorporating additional geometric elements, representative of the internal
structure of the closet, complements the previously created model.
Doors editing module. The design is completed by creating the front doors. Initially, a very basic geometry
(specifically a solid rectangular prism) is associated with each new created door, and then, optionally, this
geometry is segmented into panels and its visual finish is configured.
Final design visualization module. The system provides a visual representation of the resulting geometric
model in a 3D scene. The user can interact with the scene to evaluate the goodness of the design.
Interaction system
are presented through a simple and intuitive graphical interface, which, combined
with a direct interaction system that incorporates multi-touch gestures, seeks to facilitate the creative process to
all users regardless of their computer handling skills.
The GUI design aims to provide the final user an immediate access to the different system functionalities. We
strip away the superfluous elements to get a clean, clear and minimalist interface that reduces part of its
protagonism to give end users an immersive and natural experience.
The tool is designed as a single landscape view that integrates all the interface graphics (Fig. 3).

Fig. 3. Sketch Arm Graphical User Interface layout

The interaction between the user and the application is channelled mainly through the central working area.
The user uses his finger as a pointing device for creating and editing the different components of the closet: (i)
selecting an object, either to be modified, or as a reference to introduce new design elements; (ii) activating the
tool to be used, and (iii) creating a new element at a specific location in the scene by clicking on the working
area.
Sketch Arm also features gesture interaction as support for the design process, maintaining consistency with
standard interaction patterns that have arisen in the industry in the last few years:
Two-finger pinch to zoom.

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

Two-finger scroll.
One-finger dragging to move a selected object around the scene on editing modules.
One-finger dragging to rotate the 3D scene on final design visualization module.
3.3. Automatic layout design module
storage needs.
The automatic layout design module provides several design proposals based on
As mentioned in section 2.2, the spatial layout problem is NP-complete and, depending on its complexity, the
resolution may require a prohibitive computing time. The automatic layout design module is able to provide an
almost immediate feedback thanks to an effective customization of the optimization algorithm and a prior
simplification of the layout problem.
3.3.1. Problem definition
Sketch Arm tackles closet design as a creative modelling process in 3D space. In this sense, it would be logical
to address the layout problem as a geometric arrangement of elements in a three-dimensional space. In this way,
the problem resolution is a complex search process that involves an unaffordable calculation time, and therefore
it should be dismissed.
It is necessary to reduce the search space so that the simulated annealing algorithm is able to achieve a quality
solution within a reasonable time. That is why we hardly tried to simplify the process firstly by formulating the
problem using a different level of abstraction and secondly by reducing the dimensions of the problem.
Using a different level of abstraction for formulating the problem.
Closet interior is conceived as a rectangular prismatic space where we introduce a series of smaller rectangular
prismatic subspaces. We consider that each subspace is able to accommodate one of six available clothing
categories: long clothing, short clothing, folded clothing, underwear, accessories and footwear. This
classification is derived from the collected expert knowledge.
Based on that expert knowledge we also set an association between each category and a subspacecharacteristic data set: the standard height range to accommodate a particular clothing category and the most
suitable component (shelf or accessory) for organizing it. Thus, for example, a subspace associated to footwear
will include shoe shelves as accessory and it will have a fixed height of 18 cm.
Reducing dimensions of the problem.
To reduce the size of the search space, the original layout problem is reformulated as one-dimensional,
ignoring X and Z dimensions. In this new abstraction, we consider that:
All the subspaces share the same size and position in Z-axis.
All the subspaces share size and position on the horizontal axis with their container body.
Subspaces included in the same body are located in adjacent positions on the vertical axis, so we avoid
overlap or gaps between them.
Covered by these conventions, we finally define the closet inner space layout problem as the process of finding
the optimal disposition of subspaces, able to satisfy some predefined constraints. Each subspace is a rectangular
area located in a vertical plane parallel to the front of the closet and the search process consists of generating
successive permutations of the different subspaces (transition mechanism), following some visual and functional
guidelines. These guidelines are implemented as an objective function that represents the goodness of each
interim solution (trial closet inner layout).

991

992

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

Transition mechanism
The transition mechanism of our custom simulated annealing algorithm includes both operations that slightly
alter the existing solution and operations that change the layout significantly.
Kicking subspaces out. This operation involves moving a random subspace from its original position within
a container body to a target position in the bottom of another randomly selected body.
Shifting subspaces. Shifting subspaces operation is the translation of a random subspace from its original
location to a new randomly selected location within the same body.
Swapping subspaces. Swapping subspaces means interchanging positions of two randomly selected
subspaces within the same body.
Swapping subspaces between bodies. Like in the previous movement, the positions of two randomly
selected subspaces are interchanged. The difference is that both subspaces are included in different bodies.
Objective function
The proposed function takes into account a number of criteria for guiding the closet internal layout design
process. Here we will see which are these criteria and how do we include them to the function formulation.
Non-useful space. We must maximize the use of the available space in each body of the closet. The value of
the objective function increases as the non-useful space increases. We define this non-useful space as the
the height of
available space within any body that is not used to accommodate any clothing category. Being
a subspace within in a body , we defined the non-useful space cost as

Space overflow. Subspaces within a given body cannot represent an area larger than the available space within
the body. To encourage that every subspace is completely embedded in its container body, we increase the space
overflow cost whenever a subspace exceeds the space defined by the corresponding body.

Pairwise constraint. There is a pairwise relationship between compartments of certain clothing categories.
Thus, certain compartments hold contiguous positions within the same body: long clothing compartments and
footwear storage compartment, short clothing compartments and shelves for folded clothing storage, etc. In this
sense, we can say that if there is a pairwise relationship between subspaces A and B, it is desirable or even
mandatory, depending on the importance of the relationship, that A is located on the top of B. The pairwise cost
is defined by the expression

where

and

are the categories associated respectively to subspaces and , both located within a body ,

993

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

is a Boolean value that indicates whether or not there is a relation between two given categories X and Y,
is
is the maximum number of subspaces within the body.
the weight of the relationship, and
Proximity to ends. It is common to reserve space for certain types of compartments within the internal
distribution of the closet, close to (or near) the top of the closet or close to the ground. The clearest example is
the footwear storage compartment, usually installed on the floor or on the bottom shelf of the enclosure frame.
In terms of the objective function, we define the proximity to ends cost as

is a Boolean function that indicates whether or not it is desirable that the subspaces
where
are located in positions close to
, and
is the maximum number of
belonging to a given category
will depend on the distance between each subspace and the
subspaces included in the body . The value
associated target end.
Subspaces grouping. Compartments intended to store the same type of clothes tend to be located in adjacent
positions within the same body. Thus, for example, drawers are usually grouped into drawer units and removable
shelves for footwear storage are often stacked at the bottom of the closet.
. The subspaces grouping cost is
For each "source" subspace , we seek a possible "brother" subspace
determined basically by the separation distance between the two subspaces. Additionally, the location of the
subspaces in different bodies is penalized. We define the expression for calculating the cost as

where and are the categories associated to the compared subspaces and respectively,
is the body
is located,
is a Boolean function that indicates whether or not there are
where subspace
in the layout, and
is also a Boolean function that indicates if a
subspaces of category
and
, are different.
pair of categories,
Given the above costs, we define the objective function as

The weight associated with each term of the objective function is determined by the
implementation we set = 1.0, = 1.8, = 1.0, = 1.0, and = 0.0005.

coefficients. For the final

4. Results
This section presents the results obtained by the simulated annealing algorithm for different kinds of users and
the same dimensions of the closet. In particular, the considered user profiles are Business, Casual and Sporty,
being the width and height of the closet 175 cm and 225 cm respectively.
For testing we used a MacBook Pro with an Intel Core 2 Duo 2.26 GHz processor, 4 GB of 1,066 MHz DDR3
SDRAM and a graphics processor NVIDIA GeForce 9400M with 256 MB of DDR3 SDRAM shared with main
memory.
In each simulation, our system produces 20 feasible layouts for a specific user profile. Each user profile is

994

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

defined by the percentages for the considered clothing categories. Thereby, each percentage represents the
relative amount of clothes of a particular category that a particular user profile is supposed to have. Table 1 shows
the specific values that we used.
Table 1. Percentage of clothing in each category for the three user profiles considered: Business, Casual and Sporty.
Business User

Casual User

Sporty User

% Long clothing

15

15

20

% Short clothing

35

25

10

% Folded clothing

37

35

50

% Underwear

5

10

5

% Accessories

3

5

0

% Footwear

5

10

15

In Fig. 4, we show some results obtained by the system for the dataset presented in Table 1.
(a)

(b)

(c)

(d)

(e)

(f)

Fig. 4. Closet designs proposed for different user profiles: Business User (a, b), Casual User (c, d) and Sporty User (e, f).

As we can see in Fig. 4, the layouts produced by our system during the experiments largely conform the
specific storage needs of the three user profiles considered and try to meet the design guidelines implemented
in the objective function of our custom Simulated Annealing algorithm.
5. Conclusions and future work
As a result of the work, we developed Sketch Arm, a non-professional-user oriented software solution that
The developed system is based on multi-touch and gestural interaction and uses metaheuristics algorithms
with the aim of making the creative process easily accessible to non-experts by simplifying the tasks involved in
the design, improving system-user interaction and providing support.
Below we resume the main contributions of our work:
[16], we have proposed a formal model for a 3D closet as a common link between the
several functional modules and
closet.
We have designed and implemented a set of specific algorithms for interactive editing and rendering of the
different structural elements of the closet.
We have designed an interaction system that consists of using a simple and intuitive GUI with a gesture-based
natural user interface.
We have developed an automatic layout design module responsible for providing the end user a series of

995

Iván Rodríguez et al. / Procedia Computer Science 18 (2013) 986 – 995

design proposals that meet his storage needs. Tests in section 4 yield very positive results and show the
different user-specific layouts.
Although our work is extensive, there are some related issues that may be interesting to address in future
works:
The definition of a formal model provides segmentation and structural analysis of the geometric mesh of the
closet, supporting a wide range of potential interesting features: (i) the search for market alternatives that fit
each proposed closet, (ii) model segmentation for CAD/CAM editing, (iii) assembly instructions generation,
and (iv) an estimate of the closet manufacturing materials cost.
Regarding to the proposed layout problem definition, it would be interesting to reformulate some accepted
conventions: (i) considering the existence of subspaces narrower than their container body and thereby the
possibility of dividing a body vertically, and (ii) increasing the number of considered clothing categories to
generate more detailed and realistic layouts.
Improve our simulated annealing algorithm by defining and implementing a better (smarter) transition
mechanism so that movements involving a major reorganization of the space were allowed only at the
beginning of the execution of the algorithm, and operations that change slightly the existing solution were
allowed only in the final iterations.
Acknowledgments.
armarios mediante interfaces avanzados en dispositivos tác
14103-C03-03 funded by the Spanish Government.
References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.

Albinsson, P.-A. and S. Zhai, High precision touch screen interaction, in Proceedings of the SIGCHI conference on Human factors in
computing systems2003, ACM: New York, NY, USA. p. 105 112.
Benko, H., A.D. Wilson, and P. Baudisch, Precise selection techniques for multi-touch screens, in Proceedings of the SIGCHI
conference on Human Factors in computing systems2006, ACM: New York, NY, USA. p. 1263 1272.
Merrell, P., et al., Interactive Furniture Layout Using Interior Design Guidelines. SIGGRAPH 2011, 2011.
Yu, L.-F., et al., Make it home: automatic optimization of furniture arrangement. ACM Transactions on Graphics, 2011. 30(4): p. 86.
Merrell, P., E. Schkufza, and V. Koltun, Computer-generated residential building layouts. ACM Trans. Graph., 2010. 29(6): p. 181:1
181:12.
Hurst, N., W. Li, and K. Marriott, Review of automatic document formatting, in Proceedings of the 9th ACM symposium on
Document engineering2009, ACM: New York, NY, USA. p. 99 108.
Jacobs, C., et al., Adaptive grid-based document layout, in ACM SIGGRAPH 2003 Papers2003, ACM: New York, NY, USA. p. 838
847.
Tollis, I.G., et al., Graph Drawing: Algorithms for the Visualization of Graphs. 1998: Prentice Hall.
Lok, S., S. Feiner, and G. Ngai, Evaluation of visual balance for automated layout, in Proceedings of the 9th international conference
on Intelligent user interfaces2004, ACM: New York, NY, USA. p. 101 108.
Sarrafzadeh, M., Algorithmic Aspects of VLSI Layout. 1993: World Scientific Publishing Company.
Cagan, J., K. Shimada, and S. Yin, A survey of computational approaches to three-dimensional layout problems. Computer-Aided
Design, 2002. 34(8): p. 597-611.
Kirkpatrick, S., et al., Optimization by Simulated Annealing. Science, 1983. 220: p. 671 680.
Müller, P., et al., Procedural modeling of buildings. ACM Trans. Graph., 2006. 25(3): p. 614 623.
Parish, Y.I.H. and P. Müller, Procedural modeling of cities, in Proceedings of the 28th annual conference on Computer graphics and
interactive techniques2001, ACM: New York, NY, USA. p. 301 308.
Stiny, G., Introduction to shape and shape grammars. Environment and Planning B: Planning and Design, 1980. 7(3): p. 343 351.
Lau, M., et al., Converting 3D furniture models to fabricatable parts and connectors. ACM Trans. Graph., 2011. 30(4): p. 85:1 85:6.

-

