DESIGN AND IMPLIMENTATION OF SPATIAL REFERENCE
MODEL SOFTWARE SYSYTEM FOR MODELING AND
SIMULATION
GUO Gang
Military Simulation Technology Laboratory
College of Mechaeronics Engineering and Automation
National University of Defense Technology, Changsha, 410073, China
ABSTRACT
The software system of Spatial Reference Model (SRM) and its coordinate conversions plays an
important role in achieving the high interoperability and reuse of modeling and simulation for it
directly provides users spatial location and orientation services as well as coordinate conversions. This
paper first analyzes the requirements of a new SRM software system and introduces the principles of
the design and implement. Also the architecture and the functional modules of the software system are
presented. We give the main data structures of SRM and its codes in program language. Last, through
the analysis of the strategy and methods of the coordinate conversions and the revision of the
conversion algorithms, we present the flow of coordinate conversions and also design and implement
the software including the main data structures, functions and user’s interface.
KEYWORDS
Spatial Reference Model Spatial Reference Frame Coordinate System Coordinate Convert

2.1 Principles of the SRM Software Design
The main principles of the design issue of
the SRM software system include:
·integrality
The design of the software must be based
on the definition of the SRM and define the
spatial reference frame including the
parameters, the coordinates and the
coordinate convert services clearly and
completely. The software must have
powerful functions and provide users
enough coordinate services.
·accuracy
Accurate spatial reference frames are
critical to the interoperability of modeling
and simulation, so the software must be
able to provide accurate coordinate
presentations, coordinate validation and
coordinate convert services.
·speed
Coordinate conversion usually consumes
up much computational resources and must
meet some kinds of time restrictions
especially at some real time occasions. So
the most important rule of the speed of the
conversion is: the speed is never too fast.
·consistency
The definition of the data structures, the
functions and the user’s interfaces of the
earth reference model, datum, epochs,
coordinate systems, coordinate and
coordinate conversions must be standard
and consistent.
·generality
The software should not only have the

1 INTRODUCTION
Defense
Modeling
and
Simulation
Office DMSO of U.S. Department of Defense
(DoD) sponsors the Synthetic Environment Data
Representation and Interchange Specification
(SEDRIS) project to address the problem of
environment
modeling
and
its
data
representation and interchange to effectively
support the high interoperability and reuse of
modeling and simulation. As one of the five core
technical components of SEDRIS, Spatial
Reference Model not only provides fundamental
spatial description services for environment
modeling, but also provides the basis of spatial
location and orientation for general modeling
and simulation applications.
The software system of SRM and its
coordinate conversions directly provides users
standard coordinate systems definitions and
accurate and fast coordinate conversion services.
Existing coordinate convert software includes
authoritative software packages from both
government organizations such as NIMA, TEC,
USGS and application fields of mapping,
charting and geodesy. But the problem is that the
coordinate systems that are used in modeling and
simulation not only include a subset of the
coordinate systems used in these software
packages but also include other coordinate
systems. What is more, the precision and the
speed of the existing software can hardly meet
the requirements of the most modeling and
simulation. So new and specialized software
systems must be developed.
2 SOFTWARE DESIGN OF SRM
1

fundamental functions defined by the SRM
to support the environment modeling and
other applications including mapping and
analysis, but also be able to adapt to
different computing environment and
platforms to support the broadest
applications.
·the principle, technology and method of
software engineering
These principles include modular, data
abstraction, object oriented and so on.
·easy to use and extend
This is derived from the user’s views to
meet special requirements or extensions.
·independency
The software should be relatively
independent which means that it will be
possible and convenient to migrate the
software to other platforms or applications
without or with little revision or
modification to the original software.
2.2 Issues of Design of the Software System
The issues of the design of the software
system include:
·Architecture of the software
Including the functional division of the
software, its modular components and the
relationship between these modules;
·Spatial reference frame
Including
earth
reference
models,
horizontal and vertical datum, epochs,
coordinate systems and related parameters;
·Coordinate conversion
Coordinate
conversion
is
the
implementation of the convert algorithms,
including defining the types of conversions
that are supported, the parameters that
conversion needs, the flow and the user’s
program interface:
·APIs
The APIs that the software provides include
the access of the spatial reference frames
and the functions of the coordinate
conversions;
·Auxiliary functional modules
These functions mainly reference to the
print, validation, check, initialization and
debug services.
3 ARCHITECTURE OF THE SOFTWARE
3.1 Modules and Their Functions
The software of SRM can be functionally
grouped into the following modules:
·Basic data types and constants definition
This modular mainly provides general and
primary data types and standard constants;
·Reference ellipsoid and datum
This modular defines the reference
ellipsoids, the parameters of the datum and
the related data structures;
·Spatial reference frames

This part defines all the standard spatial
reference frames and the coordinates;
·coordinate conversion modular
This modular defines the conversion
functions and realizes the conversion
algorithms;
·Default value setting and initialization
It defines the default values of the
parameters of the coordinate system and
the coordinates;
·Print function modular
It provides reusable print functions for the
SRF and the parameters and results for the
purpose of output, checking and
debugging;
·Coordinate validate
Its purpose is to validate the type, input and
output parameters and the results;
·Utilities
This modular is to provide all kinds of
utility functions and routines.
3.2 Software Architecture
The architecture of the software is depicted
in Fig.1.
Application program interface
Coordinate conversions
Default value
Print
Utility
setting and Coordinate
initialization validate functions functions

Spatial reference frames
Fig.1Reference
The architecture
thedatum
software
ellipsoidofand
In Fig.1, the data structures and
Basic
data types
and constants
functions
defined
in the
lower layers are
fundamentals of the software system and
provide services for the upper layers. The core
components are the spatial reference frames
and the coordinate conversion part. Users or
applications can access the data structures or
call functions through the standard application
program interfaces that lie in the top layer.
3.3 User’s Interfaces
The software of the SRM provides users
standard and consistent interfaces that have
powerful functions and can be linked into static
libraries or dynamic linking libraries according
to user’s commands. Users only need to include
the corresponding header files when using the
software.
Besides, the APIs that software provides
are relatively independent and can be used
separately or embedded into other software
systems conveniently.
3.4 Auxiliary Modules
Auxiliary modules include three parts:
print, validate and utilities. Print functions are to
2

{
/* SE_ADI_A_HDATUM, Adindan - applicable to
Ethiopia */
{"ADI-A",
/* Datum Code */
"ADINDAN, Ethiopia",
/* Datum Name */
SE_CD_ELLIPSOID, /* Ellipsoid Code */
6378249.145, /* A */
293.465, /* Inverse Flattening */
{-165, 3, -11, 3, 206, 3}
/* Parameters */
}
/* other datum parameters */
}

convert the parameters into printable forms to
support debugging. For example, the function:
extern void SE_PrintCoord
(
const SE_COORD *value_ptr,
const char *name_ptr,
SE_UINT16 level
);

is used to convert the information that pointer
value_ptr points into the form of strings and save
them into the memory that name_ptr points.
Coordinate validation is used to validate
the parameters that occur in coordinate
conversions. An example function:

4.3 Spatial Reference Frame and Coordinate
Spatial reference frames must define all the
parameters needed. For example, the following
code section defines the 3 dimension geodetic
coordinate system:

extern SE_BOOLEAN SRM_ValidGD3Dcoord
(
const SRM_GD_3D_COORD *value_ptr,
SE_BOOLEAN
print_error,
SE_UINT32
*error_count_ptr
);

typedef struct
{
SE_HORIZONTAL_DATUM_ENUM
horizontal_datum;
SE_VERTICAL_DATUM_ENUM vertical_datum;
SRM_ELEVATION_UNITS_ENUM elevation_units;
} SRM_GD_3D_PARAMETERS;

is used to validate if the 3 dimensional
coordinate that value_ptr points is a valid
geodetic coordinate.
Utilities include some auxiliary routines,
coordinate compare operations and computations
of matrixes and vectors and so on. For example,
function:

The corresponding coordinate is defined as:
typedef struct
{
SE_FLOAT64 geodetic_longitude; /* in degrees */
SE_FLOAT64 geodetic_latitude; /* in degrees */
SE_FLOAT64 elevation; /* Elevation or height */
} SRM_GD_3D_COORD;

extern SE_BOOLEAN SRM_CoordEqual
(
const SE_COORD *coord1_ptr,
const SE_COORD *coord2_ptr
);

The other frames and coordinates are
defined similarly.
4.4 Default Value and Initialization
These default values are mainly used to
provide default parameter values of coordinate
systems and coordinate. For example, the default
value of geodetic coordinate systems is:

is used to decide if the two coordinates are in the
same coordinate system and if they are equal.
4 SPATIAL REFERENCE FRAMES
4.1 Basic Data Types and Constants
Definition
To adapt to different compute environment
including machine types, word sizes and operate
systems, the software of SRM defines the
standard basic data types and constants. The
following is just an example of these definitions:

const
SRM_GD_3D_PARAMETERS
SRM_GD_3D_PARAMETERS_DEFAULT =
{
SE_W84_HDATUM, /* horizontal_datum */
SE_WGS84E_VDATUM, /* vertical_datum */
SRM_METERS /* elevation_units */
};

typedef signed char SE_INT8;
typedef short
SE_INT16;
#define SE_MAX_INT8 127
#define SE_MIN_INT8 (-128)

The default
coordinate value is:

3

dimension

geodetic

const
SRM_GD_3D_COORD
SRM_GD_3D_COORD_DEFAULT=
{
0.0, /* geodetic_longitude */
0.0, /* geodetic_latitude */
0.0 /* elevation
*/
};

Users can change these settings to adapt to
their uses according to their special computer
hardware and software.
4.2 Reference Ellipsoid and Datum
The software of SRM combines the
definitions of the reference ellipsoid and the
datum including not only the identifier and name
of the ellipsoid but also the parameters of the
ellipsoid and the conversion parameters.
Horizontal datum is defined as bellows:

Besides, it is also necessary to initialize the
global variables such as:
const SE_FLOAT64 SE_PI = 3.14159265358979323846;
const SE_FLOAT64 SE_METERS_PER_FEET = 0.3048;

Other variables’ initialization is similar.
5 COORDINATE CONVERT
5.1 Strategy and Method
The essence of the coordinate convert is
mathematical convert. But to convert coordinate
between many complex spatial reference frames
means that many other issues like the
computation of the separation between the geoid
and the ellipsoid surface and the meridian
convergence must be considered besides the

typedef struct Datum_Table_Row
{
char Datum_Code[DATUM_CODE_LENGTH];
char Datum_Name[DATUM_NAME_LENGTH];
SE_ELLIPSOID_ENUM Ellipsoid_Code;
double A;
double F; /* inverse flattening */
double Parameters[6]; /* for conversions */
} Datum_Row;
Datum_Row
Datum_Table[SE_NUM_HORIZONTAL_DATUMS] =

3

coordinate to geocentric coordinate are:

conversion algorithms itself. So the strategy and
method used to make coordinate conversions
must be derived from the coordinates and the
types of conversion that the SRM supports that
are shown in Fig.2.

X = ( N + h) cos φ cos l
7
Y = ( N + h) cos φ sin l
8
2
2
Z = ( Nc / a + h) sin φ
9
2
2
2
2 1/ 2
N = a /[1 − sin φ (a − c ) / a ]
10
While the inverse formulas are:

l = arctan(Y / X )

11

φ = arctan((Z + Ne 2 sin φ ) / X 2 + Y 2 )
12

X + Y sec φ − N

h=

2

2

13
It is better to use the following formula to
compute the parameter h near pole areas:

h = Z / sin φ + N (e 2 − 1)

Fig.2 Coordinate systems and conversions

5.3 Improvements of the Algorithms
In coordinate systems computations, certain
computationally expensive functions appear
repeatedly for the usual reason of having
transcendental functions in the formulation. To
eliminate such functions and achieve faster
speed, the methods of utilizing localized
function rational approximation or interpolation
are used for many of the function need only be
computed for a very restricted range of
arguments.
5.3.1 Finite Series of Trigonometric Functions

According to Fig.2, the types of the
conversions can be divided into two groups: one
is direct method and the other is indirect method.
Direct conversions do not need a third
coordinate system and only take one step while
the indirect ones always take a third coordinate
system which is always geodetic coordinate
system to support a two step convert procedure.
An example of direct conversion is the
conversion between geodetic coordinates and
geocentric coordinates while an indirect example
is the conversion from UTM to geocentric
coordinate system.
5.2 Algorithms
The algorithms that coordinate conversion
used must be defined clearly and consistent,
accurate and fast.
For each conversion type supported, the
algorithm selected must be clearly declared.
Take the conversions between geodetic and
geocentric as an example:
The equation of the ellipsoid is:

f ( x) =

2n

sin( 2 nx )

f ( x) = SC ( B1 + S 2 ( B2 + S 2 ( B3 + S 2 B4 )))
Where,

B1 = 2 A2 + 4 A4 + 6 A6 + 8 A8
B2 = −8 A4 − 36 A6 − 80 A8
B3 = 32 A6 + 192 A8
B4 = −128A8
5.3.2 Rational Polynomial Approximation
In formula 12 the solution of latitude φ
usually utilizes iterative method with the initial
value:

eccentricity e and an additional constant e ′ are
needed for the convenience of computing and
which are defined as:
f = (a − c) / a
2

φ 0 = arctan(aZ / c X 2 + Y 2 )

15

For the approximating functions with
complex forms it is commonly known that
utilizing rational polynomial approximations are
almost always more efficient than utilizing
power series expansions or iterative techniques
for the same or better accuracy. Consider a 2dimensional function, its rational polynomial
approximation is likely of the form:
F ( x, y ) = Pn ( x, y ) / Qm ( x, y ) 16

3
4

The meridian equation is:

W =

∑A

Letting S = sin(x ) , C = cos(x ) , then

axis.
Usually
during
the
coordinate
transformation some other parameters or
constants such as flattening ratio f and the

(W / a) 2 + ( Z / c) 2 = 1

4

n =1

( X / a) 2 + (Y / a) 2 + ( Z / c) 2 = 1 1
Where a is major axis and c is minor half

e 2 = (a 2 − c 2 ) / a 2
e′ 2 = (a 2 − c 2 ) / c 2

14

5

X 2 +Y 2

6
The transformation formulas from geodetic

where Pn ( x, y ) . Qm ( x, y ) are n and m
4

order polynomials correspondingly. The choice
of n , m and other coefficients are usually takes
the metrics such as least squares, minmax and so
on.
According to the fomula of solving geodetic
latitude presented in improved Bowring method
and the results of experiments, the following
fomula is adopted as the approximation of
computing the latitude:

Fig.3 Reference ellipsoid and geoid
The software sets the geoid separation data
through reading a data file at the initialization
phase. The sketch of the program looks like
the following codes
static SE_COORD_STATUS_CODE_ENUM
SRM_InitializeGeoid(void)
{
FILE
*GeoidHeightFile;
SE_FLOAT32 geoid_header[6];
char
*FileName;
FileName = getenv("SE_WW15MGH_GRD_PATH");

tan φ = Z (c1 + (c 2W 2 + c3 ) /
(c 4 + c5W 2 + Z 2 )) / W

(17)

The 5 parameters can be achieved by 5
linear equations.
5.3.3 Approximation of N
The formula (10) is common to most of the
coordinate transformations addressed in this

GeoidHeightFile = fopen(FileName, "r"); /* open file*/
SE_separation_table = (SE_FLOAT32) calloc(size_of_array,
sizeof(SE_FLOAT32)); /* allocate memory*/
ElevationsRead = 0;
while
((status
==
SE_COORD_SUCCESS)
&&
(ElevationsRead < size_of_array))
{
ItemsRead
=
fscanf(GeoidHeightFile,
"%f",
&SE_separation_table[ElevationsRead]); /*read data */
if (ItemsRead > 0)
{
ElevationsRead = ElevationsRead + 1;
}
}
fclose(GeoidHeightFile);
return status;
}

paper. The argument A = 1 − e sin (φ ) of the
square root is in the closed interval
2

2

2
[1 − emax
sin 2 (φ ),1.0]

where emax is the maximum value of e

2

taken

over all 21 Earth Reference Models contained in
SRM and this value is less than 0.082483400, so
that

For a given point, the following function
utilizing bilinear interpolation is used to compute
the geoid separation at that point

0.99319649 ≤ A ≤ 1.0

Newton’s method for the problem of
finding the square root of A in one iteration is
given by

SE_COORD_STATUS_CODE_ENUM
SRM_GetWGS84GeoidalSeparation
(
const
SRM_GD_2D_COORD
*WGS84GeodeticLocation_ptr,
SE_FLOAT64 *GeoidalSeparation_ptr
)

1
A
( x0 + )
2
x0
Where the value of x 0 is selected to
A ~ x1 =

Where, the input parameter is the 2
dimension geodetic coordinate and the return
value of the separation is store at the memory
address that GeoidalSeparation_ptr points.
5.5.2 Meridian Convergency
For general conformal projection, the
central meridian is a straight line (namely y axis)
while the other meridians are curves.
Considering a point P and the tangent T at P,
then the angular between T and the north of the
project coordinate system is the convergency of
the meridian as shown in Fig.4.

minimize the absolute error on the interval of A
and the result is

x0 = 0.4999972172 +

A
2

5.5 Geoidal Separation and Meridian
Convergency
5.5.1 Geoidal Separation
During the coordinate conversions, if two spatial
reference models are using different datum, then
it is needed to perform datum shift. But now,
SRM only support vertical datum shifts that only
include the datum of WGS84 ellipsoid and the
datum of WGS84 geoid and the Mean Sea Level
is considered to be consistent with the WGS84
geoid as illustrated in Fig.3. The geoid
separation computation uses the EGM96 gravity
model.

Fig.4 Meridian Convergency
During the coordinate conversions, sin(γ )

and cos(γ ) are always needed to be computed
5

SE_GD_GC_SPECIFIC_CONSTANTS gd_gc;
……
SE_UPS_UPS_SPECIFIC_CONSTANTS ups_ups;
} specific_constants;
} SE_COORD_SYSTEM_CONSTANTS;

using the following functions
SE_COORD_STATUS_CODE_ENUM
SRM_ConvergenceOfMeridian
(
const
SE_CONVERT_COORD_SYSTEM_PAIR
convert_params_ptr,
const SE_COORD
*vec_origin_ptr,
SE_FLOAT64
*dest_cosine_gamma,
SE_FLOAT64
*dest_sine_gamma
)

The coordinate convert system pair is
typedef struct SE_ConvertCoordSystemParams
{
SE_ERM_DATA ellipse_constants;
SE_COORD_SYSTEM_CONSTANTS
*constants[SRM_CONSTANTS_DEPTH];
int c_index;
} SE_CONVERT_COORD_SYSTEM_PARAMS;

Where, the inputs are the convert
coordinate
system
pair
pointer
convert_params_ptr and the coordinate pointer
vec_origin_ptr while the outputs are sin(γ ) and

These parameters need to be set according
to source and destination coordinate systems.
5.6.3 Main Functions
The following function sets the geocentric
to geodetic conversion specific constants

cos(γ ) .

5.6 Coordinate Conversions
5.6.1 The Flow of the Conversions
Based on the SRM, the coordinate
conversion flow includes 5 steps
Step 1. Specify the source and destination
coordinate system
Step 2. Crate coordinate convert system
pair
Step 3. Set the values of the constants
needed during the conversions
Step 4. Perform coordinate conversion
Step 5. Release or free the resources.
Where, the coordinate convert system pair
created in step 2 can be used any times according
to user’s willingness. That is to say if the source
and destination system do not change, then this
data structure can be reused.
5.6.2 Main Data Structures
The parameters of an earth reference model
are

static void set_gc_to_gd_constants
(
const SE_ERM_DATA
*e_constants,
const SE_SRF_PARAMETERS
*srf,
SE_GC_GD_SPECIFIC_CONSTANTS *gc_gd_spec
)
{
SE_ELLIPSOID_ENUM ellipsoid;
SE_FLOAT64 CE2;
CE2 = e_constants->A2 - e_constants->C2;
gc_gd_spec->Eps21 = e_constants->Eps2 - 1.0;
gc_gd_spec->C254 = 54.0 * e_constants->C2;
gc_gd_spec->CEEps2 = e_constants->Eps2 * CE2;
gc_gd_spec->CEE = e_constants->Eps2 * e_constants>Eps2;
gc_gd_spec->TwoCEE = 2 * gc_gd_spec->CEE;
gc_gd_spec->C2DA = e_constants->C2 / e_constants->A;
gc_gd_spec->tem = CE2 / e_constants->C2;
gc_gd_spec->ARat1 = pow((e_constants->A + 50005.0),2);
gc_gd_spec->ARat2
=
(gc_gd_spec->ARat1)
/
pow((e_constants->C+50005.0),2);
gc_gd_spec->BRat1 = pow((e_constants->A-10005.0),2);
switch(ellipsoid)
{
case SE_AA_ELLIPSOID:
gc_gd_spec->B1=0.100224625101002E+01;
gc_gd_spec->B2=-0.390460083288143E-04;
gc_gd_spec->B3=0.240320189037138E+12;
gc_gd_spec->B4=0.133719260538966E+14;
gc_gd_spec->B5=0.984592458596161E+00;
break;
case SE_WE_ELLIPSOID:
default:
gc_gd_spec->B1=0.100225438677758E+01;
gc_gd_spec->B2=-0.393246903633930E-04;
gc_gd_spec->B3=0.241216653453483E+12;
gc_gd_spec->B4=0.133733602228679E+14;
gc_gd_spec->B5=0.984537701867943E+00;
} /* end switch */
}

typedef struct
{
SE_FLOAT64 A, B, F, C, Eps2, Eps, Epps2, EpsH,
Eps25, A2, C2;
} SE_ERM_DATA;

This data structure is used to store the
parameters of a special earth reference model.
The constants of the conversion from
geocentric to geodetic coordinate system are
typedef struct
{
SE_FLOAT64 B1,B2,B3,B4,B5,Eps21,C254,CEEps2,
CEE,TwoCEE,C2DA,tem,ARat1,ARat2,BRat1,BRat2;
} SE_GC_GD_SPECIFIC_CONSTANTS;

These parameters need pre-computation
before conversions. Other types of conversions
also have similar parameters.
Constants of a coordinate system are

Many of the codes are omitted to briefly
show the main functions and the flow of the
procedures.
The function to create coordinate convert
system pair is

typedef struct SE_Coord_System_Constants
{
SRM_ELEVATION_UNITS_ENUM source_units;
SRM_ELEVATION_UNITS_ENUM dest_units;
SE_CONVERT_TYPE_ENUM convert_type;
SE_CONVERT_TYPE_ENUM height_convert_type;
SE_CONVERT_TYPE_ENUM vector_convert_type;
SE_BOOLEAN dest_srf_is_2D;
SE_BOOLEAN compute_com;
SE_FLOAT64 sin_gamma, cos_gamma;
union
{
SE_GC_GD_SPECIFIC_CONSTANTS gc_gd;

SE_COORD_STATUS_CODE_ENUM
SE_CreateCoordConversionConstants
(
const SE_SRF_PARAMETERS
*src_srf_ptr,
const SE_SRF_PARAMETERS
*dest_srf_ptr,
SE_CONVERT_COORD_SYSTEM_PAIR
*convert_coord_system_ptr
)

6

model and the coordinate conversion. So, the
keys of the design and implementation are the
architecture, the data structure, the algorithms
and the flows of the conversions adopted or
selected.

The following function create constants
static SE_COORD_STATUS_CODE_ENUM CreateConstants
(
SE_CONVERT_COORD_SYSTEM_PAIR output_ptr,
int
c_index,
SE_CONVERT_TYPE_ENUM
convert_type,
SE_CONVERT_TYPE_ENUM
height_convert_type,
const SE_SRF_PARAMETERS
*src_srf_ptr,
const SE_SRF_PARAMETERS
*dest_srf_ptr,
SE_ERM_DATA
*e_constants
)

REFERENCES
[1] Birkel, P.A., SEDRIS Geospatial Reference
Model (DRAFT), 1998.
[2] SEDRIS Home Page: www.sedris.org
[3] Toms R. M., Toms D. J., and Smith, K. I.,
SEDRIS
Coordinate
Transformations
Services, Final Report, SRI Project 3281,
November 1998.
[4] Toms, R. M., New Efficient Procedures for
Geodetic
Coordinate
Transformations,
Proceedings on Standards for the
Interoperability of Distributed Simulations,
Volume 3, pp. 1024-1033, Institute, for
Simulation and Training, Orlando, FL,
March 1998.
[5] Ralph M. Toms & Paul A. Birkel, Choosing
a Coordinate Framework for Simulations,
Proceedings of the Fall Simulation
Interoperability Workshop, September 1999,
99F-SIW-183.
[6] SEDRIS and the Synthetic Environment
Domain, March 1998, U.S. Army
Simulation, Training and Instrumentation
Command, Orlando, Florida
[7] SEDRIS Reference Manual, March 1998,
U.S. Army Simulation, Training and
Instrumentation Command, Orlando, Florida

5.6.4 User’s Interface
The coordinate conversion functions that
the software provide users have two forms: one
is with coordinate validation and checking
SE_COORD_STATUS_CODE_ENUM
SE_ConvertCoordToGivenSystem
(
const
SE_CONVERT_COORD_SYSTEM_PAIR
convert_params_ptr,
const SE_COORD
*src_coord_ptr,
SE_COORD
*dest_coord_ptr
)

and the other is without boundary checking
extern SE_COORD_STATUS_CODE_ENUM
SE_ConvertCoordToGivenSystemWithoutBoundaryChecking
(
const
SE_CONVERT_COORD_SYSTEM_PAIR
coord_op_params_ptr,
const SE_COORD
*source_coord_ptr,
SE_COORD
*dest_coord_ptr
);

These two functions are used at different
occasions. For example, the conversion from
geodetic to UTM specifies that the geodetic
latitude must be in the range of –80 and 84
degree there will be mistakes. If function
SE_ConvertCoordToGivenSystem is used and
the latitude exceeds the limit, then the function
will return an error with nothing done. But if the
function SE_ConvertCoordToGivenSystemWithoutBoundaryChecking is used, then no error
will be returned but the result is meaningless at
the same time.
Besides, the user’s call interfaces also
include many other functions such as release or
free memory operations and so on.
6 CONCLUSIONS
Spatial Reference Model is not only the
basis of location and orientation but also widely
used in the fields of spatial information
acquiring and processing. It is the need of the
development of modeling and simulation and a
magnificent factor affecting not only the
interoperability and reuse of modeling and
simulation but also the fidelity and creditability
of the results. The SRM software directly
provides users support of standard coordinate
systems and accurate and fast coordinate
conversion services.
The design and implementation of the SRM
software must be based on the methods and
technologies of the modern software engineering
and the principles must be derived from the
requirement of the modeling and simulation. The
cores of the software are the spatial reference

BIOGRAPHY
GUO Gang, born in Dengzhou, Henan
Province, China in 1978, is a PhD of Automatic
Control from National University of Defense
Technology. He is specialized in advanced
distributed simulation, environment modeling
and standardization of modeling and simulation.

7

