Distributed Reasoning with Fuzzy Description Logics
Jianjiang Lu1 , Yanhui Li2 , Bo Zhou1, Dazhou Kang2 , and Yafei Zhang1
1

Institute of Command Automation, PLA University of Science and Technology,
Nanjing 210007, China
2
Department of Computer Science and Engineering, Southeast University,
Nanjing 210096, P.R. China
jjlu@seu.edu.cn

Abstract. By the development of Semantic Web, increasing demands for vague
and distributed information representation have triggered a mass of theoretical
and applied researches of fuzzy and distributed ontologies, whose main logical
infrastructures are fuzzy and distributed description logics. However, current solutions are proposed respectively on one of these two aspects. By integrating
E -connection into fuzzy description logics, this paper proposes a novel logical
approach to couple both fuzzy and distributed features within description logics.
The main contribution of these paper is to propose a discrete tableau algorithm to
achieve reasoning within this new logical system.
Keywords: ontologies; E -connection; discrete tableau algorithm.

1 Introduction
The Semantic Web stands for the idea of a future Web, in which information is given
well-defined meaning, better enabling intelligent Web information processing [1]. In
the Semantic Web, ontology is a crucial knowledge representation model to express
a shared understanding of information between users and machines, and description
logics (DLs for short) are often named as the logic infrastructure of ontologies [2].
Along with the evolvement from current Web to the Semantic Web, the management
of ill-structured, ill-defined or imprecise information plays a more and more important
role in applications of the Semantic Web, such as document retrieval [3], search engine [4] and query refinement [5]. This trend calls for ontologies with capability to deal
with uncertainty. However, classical DLs are two-value-based languages. The need for
expressing uncertainty in the Semantic Web has triggered extending classical DLs with
fuzzy capabilities, yielding Fuzzy DLs (FDLs for short) [6,7,8,9]. Meanwhile, Working
with multiple distributed ontologies brings a growing body of work in distributed research of description logic. In the distribution extension of classical DLs, Cuenca Grau
et al integrated the E-connections formalism [10] into OWL in a compact and natural
way by defining ”links” that stand for the inter-ontology relations [11]. Their extension
is largely based on reasoning technique in classical DLs with general TBoxes.
The main difficulty in achieving similar distributed extension within FDLs and combining fuzzy and distributed features within DLs is that reasoning with general TBox
in FDLs is still a hard problem. In this year, we propose a discrete tableau algorithm
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 196–203, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Distributed Reasoning with Fuzzy Description Logics

197

to solve this problem [12], that can be considered as a base technique to achieve distributed reasoning in FDLs. In this paper, we will extend our discretization algorithm
in distributed case and combine E-connections to propose a distributed extension of
FDLs (here we focus on F SHIN [8], a complex FDL with inverse role, role hierarchy
and unqualified number restriction.) and a corresponding tableau reasoning algorithm
within this extension, hence achieve distributed reasoning within multiple FDL KBs.

2 E-Connection Between Fuzzy Description Logics
2.1 Fuzzy Links Between Two Knowledge Bases
Let K1 and K2 be two F SHIN KBs, I1 = ΔI1 , ·I1 and I2 = ΔI2 , ·I2 be their
fuzzy interpretations. E12 is a set of fuzzy links (denoted E12 and F12 ) that connect
these two K1 and K2 . We define I12 = ΔI12 , ·I12 as the fuzzy interpretation of E12 ,
where ΔI12 = ΔI1 × ΔI2 and for any E12 ∈ E12 , ·I12 interprets it as a membership function: ΔI1 × ΔI2 → [0, 1]. And to describe constraints among fuzzy links,
F12 , where E12 and F12 are fuzzy links. A inwe propose fuzzy link axioms: E12
terpretation I12 satisfies the above fuzzy link axioms, iff for any d ∈ ΔI1 and any
I12
I12
(d, d ) ≤ F12
(d, d ). An LBox L12 is a finite set of fuzzy link axioms,
d ∈ ΔI2 , E12
I12 satisfies L12 , iff it satisfies every axiom in L12 .
These two FDL KBs K1 and K2 and their LBox L12 construct a simple Combined
Distributed FDL KB Σ = (K1 , K2 , L12 ). By introducing fuzzy link, we allow two new
concepts K1 : ∃E12 .C2 and ∀E12 .C2 in K1 , where E12 is a fuzzy link in E12 and C2 is
a fuzzy concept in K2 . These two concepts are considered as normal fuzzy concepts in
K1 , hence they can appear in TBox and ABox of K1 .
For example, let K1 and K2 be two KBs about animal and person respectively. Dog1
and P erson2 are fuzzy concepts in K1 and K2 , and lovewith12 is a fuzzy link in L12 .
By using fuzzy links, we can define a new fuzzy concept F riendlydog1 in K1 ’s TBox:
F riendlydog1 ≡ ∃lovewith12 .P erson2

Dog1

(1)

2.2 Combined Distributed Fuzzy Description Logic Knowledge Bases
In above subsection, we discuss the fuzzy links between two FDL KBs and give a simple
example of Combined Distributed FDL (CDFDL for short) KBs. Now we will give a
general definition of it.
Definition 1. a CDFDL KB is a pair Σ = (KS , LS ), where KS is a set of FDL KBs:
KS = {K1 , . . . , Km }, and LS is a set of LBoxes that connect any two knowledge bases
in KS : LS = {Lij |1 ≤ i, j ≤ m and i = j}. For any fuzzy concept Cj in Kj and
any fuzzy link Eij in Lij and , the following expressions are also considered as fuzzy
concepts in Ki : ∃Eij .Cj and ∀Eij .Cj .
An interpretation of a CDFDL KB is a pair I = ({Ii }, {Iij }) , where Ii is an interpretation of Ki and correspondingly Iij is an interpretation of Lij . For any fuzzy
concept Cj (role Rj ) in Kj , Cj I = Cj Ij (Rj I = Rj Ij ); for any fuzzy link Eij in Iij ,

198

J. Lu et al.

Eij I = Eij Iij ; for any individual aj in Kj , aj I = aj Ij ; and for ∃Eij .Cj and ∀Eij .Cj ,
their interpretation are inductively defined as:
∃Eij .Cj I (d) = sup d ∈ΔIi {min(Eij Iij (d, d ), Cj Ij (d ))}
I

∀Eij .Cj (d) = inf d ∈ΔIi {max(1 − Eij

Iij

(2)

Ij

(d, d ), Cj (d ))}

An interpretation I is a model of Σ = (KS , LS ), iff I satisfies every Ki in KS
and every Lij in LS . In this paper, we will propose a discrete tableau algorithm to
decide satisfiability of CDFDL KBs Σ, which is based on the semantical discretization
technique discussed in the following section.

3 Semantical Discretization
In this section, we will propose a novel semantical discretization technique to achieve
such translations: if a CDFDL KB has a fuzzy model, we use the discretization to translate it into a special model, in which any value of membership degree functions belongs
to a given discrete degree set S and its cardinality |S| is polynomial of the sum of
the cardinality |Ai | of the ABox Ai in every KB Ki . And we call it a discrete model
within S.
The main issue in semantical discretization is to decide the discrete degree set S. Let
us now proceed formally in the creation of S. Given Σ = (KS = {K1 , . . . , Km }, LS =
{Lij |1 ≤ i, j ≤ m, i = j}) , and Ki = Ti , Ri , Ai . Let Nd be the set of degrees
appearing in any ABox: Nd = {n|α n ∈ Ai , 1 ≤ i ≤ m}. From Nd , we define the
degree closure Nd∗ = {0, 0.5, 1} ∪Nd ∪{n|1 − n ∈ Nd } and order degrees in ascending
order: Nd∗ = {n0 , n1 , . . . , ns }, where for any 0 ≤ i ≤ s, ni < ni+1 . For any two backto-back elements ni , ni+1 ∈ Nd∗ , we insert their median mi+1 = (ni + ni+1 )/2 to get
S = {n0 , m1 , n1 , . . . , ns−1 , ms , ns }. We call S a discrete degree set w.r.t Σ. Obviously
for any 1 ≤ i ≤ s, mi + ms+1−i = 1 and ni−1 < mi < ni . Note that:
m

|S| = 2s + 1 = O(|Nd |) = O(

|Ai |).

(3)

i=1

Lemma 1. For any Ki = Ti , Ri , Ai and any discrete degree set S w.r.t Σ, if Ki has a
fuzzy model, it has a discrete model within S.
The proof of this lemma is an extension of the proof in FDL cases [12]. Meanwhile, to
verify the soundness of our discretization, we have the following lemma.
Lemma 2. For any Lij and any discrete degree set S w.r.t Σ, if Lij has a fuzzy model,
it has a discrete model within S.
Since a discrete model is also a fuzzy model of Σ, we get the following theorem to
guarantee the equivalence between existence of fuzzy models and discrete models.
Theorem 1. For any Σ = (KS = {K1 . . . Km }, LS = {Lij }) and any discrete degree
set S w.r.t Σ, Σ has a fuzzy model iff it has a discrete model within S.

Distributed Reasoning with Fuzzy Description Logics

199

4 Discrete Tableau Algorithm
Before expressing discrete tableau algorithms formally, here we introduce some notations. It will be assumed that the concepts appearing in tableau algorithms are written in
NNF [13]. The set of subconcepts of a concept C is denoted as sub(C). For a CDFDL
KB Σ, we define sub(Ki ) as the union of all sub(C), for any concept C appears in Ki .
And we use the symbols ✄ and ✁ as two placeholders for the inequalities ≥, > and ≤,
<, and the symbols − , ✄− and ✁− to denote their reflections, for example, ≥ and ≤
are reflections to each other. Finally we define , n as a degree pair. Two degree pairs
are called conjugated, iff they satisfy the following conditions (see table 1).
Table 1. Conjugated pairs

≥, n

<, m

≤, m

n≥m

n>m

>, n ¬∃n1 ∈ S with n < n1 < m n ≥ m

Now we define the discrete tableau for Σ. Let RKi and OKi be the sets of roles and
individuals appearing in Ki . A discrete tableau T for Σ within a degree set S is a pair:
T = {Ti }, {Eij } , Ti = Oi , Li , Ei , Vi , 1 ≤ i, j ≤ m and i = j, where
–
–
–
–
–

Oi : a nonempty set of nodes;
Li : Oi → 2Mi , Mi = sub(Ki ) × {≥, >, ≤, <} × S;
Ei : RKi → 2Qi , Qi = {Oi × Oi } × {≥, >, ≤, <} × S;
Vi :OKi → Oi , maps any individual into a corresponding node in Oi .
Eij : Eij → 2Qij , Qij = {Oi × Oj } × {≥, >, ≤, <} × S;

Any Ti has a forest-like structure, which is a collection of trees that correspond to
individuals in the ABox Ai . Every tree consists of nodes standing for the individuals,
and edges representing the relations between two nodes (individuals). Each node d is
labelled with a set L(d) of degree triples: C, , n , which denotes the membership
degree of d being an instance of C
n . A pair of triple C, , n and C, − , m
−
are conjugated if
, n and
, m are conjugated. In any Ti , for any d, d ∈ Oi ,
a, b ∈ OKi , C, D ∈ sub(Ki ) and R ∈ RKi , the following conditions must hold:
1. There does not exist two conjugated degree triples in Li (d);
2. There does not exist mistake triples: ⊥, ≥, n (n > 0), , ≤, n (n < 1), ⊥, >
, n , , <, n , C, >, 1 and C, <, 0 in Li (d);
3. If C
D ∈ T , then there must be some n ∈ S with C, ≤, n and D, ≥, n in
Li (d);
4. If C, , n ∈ Li (d), then nnf(¬C), − , 1 − n ∈ Li (d);
5. If C D, ✄, n ∈ Li (d), then C, ✄, n and D, ✄, n ∈ Li (d);
6. If C D, ✁, n ∈ Li (d), then C, ✁, n or D, ✁, n ∈ Li (d);
7. If C D, ✄, n ∈ Li (d), then C, ✄, n or D, ✄, n ∈ Li (d);
8. If C D, ✁, n ∈ Li (d), then C, ✁, n and D, ✁, n ∈ Li (d);

200

J. Lu et al.

9. If ∀R.C, ✄, n ∈ Li (d), d, d , ✄ , m ∈ Ei (R), and ✄ , m is conjugated with
✄− , 1 − n , then C, ✄, n ∈ Li (d );
10. If ∀R.C, ✁, n ∈ Li (d), then there must be a node d ∈ Oi with d, d , ✁− , 1 −
n ∈ Ei (R) and C, ✁, n ∈ Li (d );
11. If ∃R.C, ✄, n ∈ Li (d), then there must be a node d ∈ Oi with d, d , ✄, n ∈
Ei (R) and C, ✄, n ∈ Li (d );
12. If ∃R.C, ✁, n ∈ Li (d), d, d , ✄ , m ∈ Ei (R), and ✄ , m is conjugated with
✁, n , then C, ✁, n ∈ Li (d );
13. If ∀P.C, ✄, n ∈ Li (d), d, d , ✄ , m ∈ Ei (R) for some R ∗ P with Trans
(R)=true and ✄ , m is conjugated with ✄− , 1 − n , then ∀R.C, ✄, n ∈ Li (d );
14. If ∃P.C, ✁, n ∈ Li (d), d, d , ✄ , m ∈ Ei (R) for some R ∗ P with Trans
(R)=true and ✄ , m is conjugated with ✁, n , then ∃R.C, ✁, n ∈ Li (d );
15. If ≥ pR, ✄, n ∈ Li (d), then |{d | d, d , ✄, n ∈ Ei (R)|} ≥ p;
16. If ≥ pR, ✁, n ∈ Li (d), then |{d | d, d , ✄ , m ∈ Ei (R)}| < p, where ✄ , m
is conjugated with ✁, n ;
17. If ≤ pR, ✄, n ∈ Li (d), then |{d | d, d , ✄ , m ∈ Ei (R)}| < p + 1, where
✄ , m is conjugated with ✄− , 1 − n ;
18. If ≤ pR, ✁, n ∈ Li (d), |{d | d, d , ✁− , 1 − n ∈ Ei (R)}| ≥ p + 1;
19. If d, d , , n ∈ Ei (R), then d , d , , n ∈ Ei (Inv(R));
20. If d, d , ✄, n ∈ Ei (R) and R ∗ P , then d, d , ✄, n ∈ Ei (P );
21. If a : C n ∈ Ai , then C, , n ∈ Li (Vi (a));
22. If a, b : R n ∈ Ai , then Vi (a), Vi (b) , , n ∈ Ei (R);
23. If a = b ∈ Ai , then Vi (a) = Vi (b).
From conditions 1-2, the discrete tableau contains no clash. Condition 3 deals with
general TBoxes: for any C
D ∈ T , we adopt a direct extension of reasoning technique in DLs: since any membership degree value in the discrete models belongs to S,
for any node d, we guess d : C=n and d : D=m, for some n,m ∈ S and n ≤ m.
Then we add C, ≤, n and D, ≥, n in L(d). Conditions 4-20 are necessary for the
soundness of discrete tableaus. Conditions 21-23 ensure the correctness of individual
mapping function V().
Additionally, we add some constraints to deal with fuzzy links. For any d ∈ Oi ,
d ∈ Oj , Eij , Fij ∈ Lij and Cj ∈ sub(Kj ), the following conditions must hold:
24. If d, d , ✄, n ∈ Eij (Eij ) and Eij Fij ∈ Lij , then d, d , ✄, n ∈ Eij (Fij );
25. If ∀Eij .Cj , ✄, n ∈ Li (d), d, d , ✄ , m ∈ Eij (Eij ), and ✄ , m is conjugated
with ✄− , 1 − n , then C, ✄, n ∈ Lj (d );
26. If ∀Eij .Cj , ✁, n ∈ Li (d), then there must be a node d ∈ Oj with d, d , ✁− , 1
− n ∈ Eij (Eij ) and C, ✁, n ∈ Lj (d );
27. If ∃Eij .Cj , ✄, n ∈ Li (d), then there must be a node d ∈ Oj with d, d , ✄, n
∈ Eij (Eij ) and C, ✄, n ∈ Lj (d );
28. If ∃Eij .Cj , ✁, n ∈ Li (d), d, d , ✄ , m ∈ Eij (Eij ), and ✄ , m is conjugated
with ✁, n , then C, ✁, n ∈ Lj (d );

Distributed Reasoning with Fuzzy Description Logics

201

Condition 24 guarantees that tableau satisfies the restriction of LBoxes. Conditions 2528 are distributed extensions of classical conditions to deal with ∀ and ∃ restriction.
Theorem 2. For any Σ = (KS = {K1 . . . Km }, LS = {Lij }) and any discrete degree
set S w.r.t Σ, Σ has a discrete model within S iff it has a discrete tableau T within S.
From theorem 1 and 2, an algorithm that constructs a discrete tableau of Σ within
S can be considered as a decision procedure for the satisfiability of Σ. The discrete
tableau algorithm works on a completion forest FΣ with a set S = to denote ”=” relation
between nodes and a tag function W (): for any node x, W (x) denotes that x is an
individual in the W (x)-th KB. When W (x) = W (y) = i, x is labelled with Li (x) ⊆
Mi = sub(Ki ) × {≥, >, ≤, <} × S; and the edge x, y is labelled Li ( x, y )={ R,
, n }, for some R ∈ RKi and n ∈ S. When W (x) = i = W (y) = j, the edge
x, y is labelled Lij ( x, y )={ E, , n }, for some E ∈ Eij and n ∈ S. The tableau
algorithm initializes FK to contain a root node xa for each individual a in any OKi , sets
n ∈ Ai }. Moreover,
W (xa ) = i and labels xa with Li (xa ) = { C, , n |a : C
for any pair xa , xb , Li xa , xb = { R, , n | a, b : R
n ∈ Ai }, and for any
a = b ∈ Ai , we add xa , xb ∈ S = . The algorithm expands the forest FΣ either by
extending Li (x) for the current node x or by adding new leaf node y with expansion
rules in table 2.
In table 2, we adopt a optimized way to reduce ”✁ rules”: for any triple C, ✁, n ∈
Li (x) with ”✁” , we use ¬ rules to add its equivalence nnf(C), ✁− , 1 − n to
Li (x), and then deal it with ✄ rules. Edges are added when expanding ∃G.C, ✄, n ,
≥ pG, ✄, n in Li (x), where G can be a fuzzy role or fuzzy link. A node y is called
an G-successor of another node x and x is called a G-predecessor of y, if G,
, n ∈ Li(ij) ( x, y ). Ancestor is the transitive closure of predecessor. And for any
two connected nodes x and y, we define DG (x, y)={ , n |P ∗ G, P, , n ∈
Li(ij) ( x, y ) or Inv(P ), , n ∈ Li(ij) ( y, x )}. If DG (x, y) = ∅, y is called a Rneighbor of x. As inverse role and number restriction are allowed in SHIN , we make
use of pairwise blocking technique [14] to ensure the termination and correctness of
our tableau algorithm: a node x is directly blocked by its ancestor y iff (1) x is not
a root node; (2) x and y have predecessors x and y , such that Li (x) = Li (y) and
Li (x ) = Li (y ) and Li(ij) ( y , y ) = Li(ij) ( x , x ). A node x is indirectly blocked
if its predecessor is blocked. A node x is blocked iff it is either directly or indirectly
blocked.
A completion forest FK is said to contain a clash, if for a node x in FK with W (x) =
i, (1)Li (x) contains two conjugated triples, or a mistake triple (see condition 2 in discrete tableau restriction); or (2) ≥ pR, ✁, n or ≤ (p − 1)R, ✁− , 1 − n ∈ Li (x), and
there are p nodes y1 , y2 , . . . yp in FΣ : for any 1 ≤ k ≤ p, R, ✄k , mk ∈ Li ( x, yk ),
✄k , mk is conjugated with ✁, n and for any two nodes yk and yq , yk , yq ∈ S = .
A completion forest FΣ is clash-free if it does not contain a clash, and it is complete if none of the expansion rules are applicable. From pairwise blocking technique,
the worst-case complexity of our tableau algorithm is 2NEXPTIME [15]. And the
soundness and completeness of our tableau algorithm are guaranteed by the following
theorem.

202

J. Lu et al.
Table 2. Expansion rules of discrete Tableau

Rule name Description
Assume W (x) = i
KB rule: if C D ∈ Ti and there is no n with C, ≤, n and D, ≥, n in Li (x);
then Li (x) → Li (x) ∪ { C, ≤, n D, ≥, n } for some n ∈ S.
The following rules are applied to nodes x which is not indirectly blocked.
¬ rule: if C, , n ∈ Li (x) and nnf(¬C), − , n ∈
/ Li (x);
then Li (x) → Li (x) ∪ { nnf(¬C), − , n }.
✄
rule: if C D, ✄, n ∈ Li (x), and C, ✄, n or D, ✄, n ∈
/ Li (x);
then Li (x) → Li (x) ∪ { C, ✄, n , D, ✄, n }.
✄
rule: if C D, ✄, n ∈ Li (x), and C, ✄, n , D, ✄, n ∈
/ Li (x)
then Li (x) → Li (x) ∪ {T }, for some T ∈ { C, ✄, n , D, ✄, n }
∀✄ rule: if ∀R.C, ✄, n ∈ Li (x), R ∈ RKi , there is a R-neighbor y of x with ✄ , m ∈
DR (x, y), which is conjugated with ✄− , 1 − n , and C, ✄, n ∈
/ Li (y);
then Li (y) → Li (y) ∪ { C, ✄, n }.
∀L✄ rule: if ∀R.C, ✄, n ∈ Li (x), R ∈ Eij , there is a R-neighbor y of x with ✄ , m ∈,
DR (x, y) which is conjugated with ✄− , 1 − n , and C, ✄, n ∈
/ Lj (y);
then Lj (y) → Lj (y) ∪ { C, ✄, n }.
∀+✄ rule: if ∀P.C, ✄, n ∈ Li (x), R ∈ RKi , there is a R-neighbor y of x with R ∗ P ,
Trans(R)=True and ✄ , m ∈ DR (x, y), ✄ , m is conjugated with ✄− , 1 − n
and ∀R.C, ✄, n ∈
/ Li (y);
then L(y)i → L(y)i ∪ { ∀R.C, ✄, n }.
✄
≤ p rule: if ≤ pR, ✄, n ∈ Li (x); there is p + 1 R-successors y1 , y2 , . . . , yp+1 of x with
R, ✄i , mi ∈ Li ( x, yi ) and ✄i , mi is conjugated with ✁− , 1 − n
for any 1 ≤ i ≤ p + 1; and yi , yj ∈
/ S = for some 1 ≤ i < j ≤ p + 1
then merge two nodes yi and yj into one : L(yi ) → L(yi ) ∪ L(yj );
∀x, L(yi , x) → L(yi , x) ∪ L(yj , x), yj , x ∈ S = , add yi , x in S =
The following rules are applied to nodes x which is not blocked.
∃✄ rule: if ∃R.C, ✄, n ∈ Li (x); R ∈ RKi ; there is not a R-neighbor y of x
with ✄, n ∈ DR (x, y) and C, ✄, n ∈ Li (y).
then add a new node z with W (z) = i, R, ✄, n ∈ Li ( x, z ) and C, ✄, n ∈ Li (z).
∃L✄ rule: if ∃R.C, ✄, n ∈ Li (x); R ∈ Eij ; there is not a R-neighbor y of x
with ✄, n ∈ DR (x, y) and C, ✄, n ∈ Lj (y).
then add a new node z with W (z) = j, R, ✄, n ∈ Lij ( x, z ) and C, ✄, n ∈ Lj (z).
≥ pR✄ rule: if ≥ pR, ✄, n ∈ Li (x), there are not p R-neighbors y1 , y2 , . . . , yp of x
with R, ✄, n ∈ Li ( x, yi ) and for any i = j, yi , yj ∈ S = .
then add p new nodes z1 , z2 , . . . , zp with R, ✄, n ∈ Li ( x, zi ) ,
and for any two node zi and zj add zi , zj in S = .

Theorem 3. For any Σ = (KS = {K1 . . . Km }, LS = {Lij }) and any discrete degree
set S w.r.t Σ has a discrete tableau within S iff the tableau algorithm can construct a
complete and clash-free completion forest.

5 Conclusion
By integrating E-connection into FDLs, this paper proposes a novel logical approach
to couple both fuzzy and distributed features within DLs. To achieve reasoning support within this new logical form CDFDL, we extend our semantical discretization in
distributed case and design a discrete tableau reasoning algorithm. Our work can be
considered as a logical foundation to support reasoning with multiple distributed fuzzy
ontologies.

Distributed Reasoning with Fuzzy Description Logics

203

References
1. Berners-Lee, T., Hendler, J., Lassila, O.: The semantic web. Scientific American 284 (2001)
34–43
2. Horrocks, I., Patel-Schneider, P.: Reducing owl entailment to description logic satisfiability.
In: Proceeedings of the International Workshop on Description Logics (DL-05). (2003) 1–8
3. Parry, D. Fuzzy Logic and the Semantic Web. In: A fuzzy ontology for medical document
retrieval. Elsevier Science, Oxford, UK (2006)
4. Widyantoro, D.H., Yen, J.: A fuzzy ontology-based abstract search engine and its user studies. In: FUZZ-IEEE. (2001) 1291–1294
5. Widyantoro, D., Yen, J.: Using fuzzy ontology for query refinement in a personalized abstract search engine. In: Proceedings of Joint 9th IFSA World Congress and 20th NAFIPS
International Conference, Vancouver, Canada (2001)
6. Straccia, U.: A fuzzy description logic. In: Proceedings of AAAI-98, 15th National Conference on Artificial Intelligence, Madison, Wisconsin (1998) 594–599
7. Stoilos, G., Stamou, G., Tzouvaras, V., Pan, J., Horrocks, I.: Fuzzy owl: Uncertainty and
the semantic web. In: Proceedings of International Workshop of OWL: Experiences and
Directions, Galway (2005)
8. Stoilos, G., Stamou, G., Tzouvaras, V., Pan, J., Horrocks, I.: The fuzzy description logic shin.
In: Proceedings of International Workshop of OWL: Experiences and Directions, Galway
(2005)
9. Stoilos, G., Stamou, G., Tzouvaras, V., Pan, J., Horrock, I.: A Fuzzy Description Logic for
Multimedia Knowledge Representation. In: Proc. of the International Workshop on Multimedia and the Semantic Web. (2005)
10. Kutz, O., Lutz, C., Wolter, F., Zakharyaschev, M.: E-connections of abstract description
systems. Artificial Intelligence 156 (2004) 1–73
11. Cuenca Grau, B., Parsia, B., Sirin, E.: Working with multiple ontologies on the semantic
web. In: Proceedings of the 3thrd International Semantic Web Conference. (2004)
12. Li, Y.H., Xu, B.W., Lu, J.J., Kang, D.Z.: Discrete tableaus for fshi. In: Proceedings of 2006
International Workshop on Description Logics - DL2006, The Lake District of the UK (2006)
13. Baader, F., Sattler, U.: An overview of tableau algorithms for description logics. Studia
Logica 69 (2001) 5–40
14. Horrocks, I., Sattler, U.: A description logic with transitive and inverse roles and role hierarchies. Journal of Logic and Computation 9 (1999) 385–410
15. Horrocks, I., Sattler, U., Tobies, S.: Practical reasoning for expressive description logics. In:
Proceedings of of LPAR99. (1999)

