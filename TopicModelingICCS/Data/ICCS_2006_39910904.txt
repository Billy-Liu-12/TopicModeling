Coordinated Exception Handling in J2EE
Applications
Pawel L. Kaczmarek, Bogdan Kreﬀt, and Henryk Krawczyk
Faculty of Electronics, Telecommunications and Informatics
Gda´
nsk University of Technology, Poland
pawel.kaczmarek@eti.pg.gda.pl, bogdan.krefft@bluemedia.pl,
henryk.krawczyk@eti.pg.gda.pl

Abstract. In the paper, we present a method of exception handling in
J2EE applications. It is proposed to create a dedicated component that is
responsible for handling two types of exceptions: those concerning more
than one object and those occurring commonly in an environment. The
component, referred to as Remote Exception Handler, is an extension of
the middleware layer of a computer system, which enables its use without
modiﬁcations of application source code. Concerning highly distributed
architectures, many cooperating Remote Exception Handlers placed on
diﬀerent nodes are created. The solution has been implemented in practice in JBoss Application Server as an additional service of the platform.

1

Introduction

Exception handling (eh) is commonly used to increase software fault tolerance
and consequently software dependability. An exception is a special event, usually a result of an error, that causes a change in the control ﬂow and requires
special handling. Eh in J2EE is based on the sequential Java language, although
extensions have been designed. RemoteException is thrown if a remote object
cannot fulﬁll a service or if there is a problem in communication with a server.
1.1

Related Work on Exception Handling in Distributed
Environments

Distributed programming platforms supply a range of extensions that support
fault tolerance and application management. The J2EE environment is equipped
with Java Management Extension (JMX) [1] as a means of management and
monitoring of applications, devices, services and JVM. Container Managed EH
[2] (CMEH) is proposed as a server-side fault tolerance mechanism in J2EE application servers. CMEH framework is based on intercepting calls of component
methods by an interceptor augmented with eh features. A system of recovering
from exceptional situations by microreboots has been proposed in the JAGR
system [3]. The H2O system creates a reliable platform of distributed computing, including self-organizing applications [4]. Eh in distributed environments is
also addressed in [5] [6] and [7] for diﬀerent platforms.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 904–907, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Coordinated Exception Handling in J2EE Applications

905

Our solution diﬀers from the ones described above as we propose specialized
components that can cooperatively handle exceptions. We focus on the J2EE
environment. We present the theoretical concept and describe the implementation of our solution in following sections. The source code of the implementation
is available at author’s web page (see Sect. 3).

2

Local and Remote Exception Handling

Eh in distributed systems may require the knowledge about system state or
cooperation between a group of objects. Additionally, there are exceptions that
occur commonly in an environment.
We propose a dedicated Remote Exception Handler (REH) that supplies
predeﬁned handling functions. REH extends the middleware layer by adding a
service for handling two kinds of exceptions: those occurring commonly in the
environment and those concerning more than a single object. REH operates
in three main ﬁelds: performing handling actions, suggesting repair actions to
objects and gathering information about system state.
Application programmer is freed from implementing handling functions, which
reduces the required work and enables faster application development. As an
example consider that a group of objects throw repeatedly runtime exceptions
(e.g. a corrupted data base access pol). REH detects the situation and eliminates
the cause (creates a new pol). The automated repair applies to those exceptions
that are not part of the business speciﬁcation (e.g. an input value exceeds a
bound).
2.1

Integration of REH with a Distributed System

REH is integrated with an existing distributed system in three alternative ways:
– with interceptor cooperation - an exception is caught by an interceptor and
redirected to REH, REH performs a handling function, it returns a normal
result or throws an exception if the handling fails,
– direct cooperation with an object or service - if an object detects an anomaly,
it invokes an REH method to repair the situation,
– self-activation - REH performs independently a handling function.
The methods of integration require some modiﬁcations in the middleware layer
as explicit invocations of REH methods need to be added. It is also possible
to extend REH’s functionality with application speciﬁc handling functions. A
detailed description of REH implementation and use is presented in Sect. 3.
2.2

Multi-remote Exception Handler Architecture

Many REH components are proposed for highly distributed architectures to
overcome reliability and performance problems. The multi-REH architecture,
however, requires additional solutions to enable inter-REH communication and
synchronization. On REH creation, the component sends notiﬁcation to other

906

P.L. Kaczmarek, B. Kreﬀt, and H. Krawczyk

REHs to register its existence. Each component maintains a list of active REHs
together with their references. They communicate with each other during execution to interchange information about system and application state. It is assumed
that inter-REH communication is reliable for active (visible) REH components.
Only those components participate in a recovery. Fig. 1 shows the architecture
of multi-REH cooperation.

Application

J2EE
Server

EJB

EJB

EJB

EJB

REH

EJB

EJB

REH

EJB

EJB

REH

Fig. 1. Multi-REH architecture

Typically, REH performs repair actions independently, however, it can communicate with another REH to request the handling of an exception. The second
handler attempts the handling and returns the result. In the current implementation, each REH sends a request to another arbitrary REH. If the request fails
in the second handler, an exception is returned to the caller.

3

Exception Controllers in JBoss Application Server

The REH architecture has been implemented in JBoss Application Server [8].
The JBoss architecture consists of a micro-kernel and components implementing
individual services. JBoss is an open-source server that can be easily extended.
The REH implementation in JBoss consists of two subcomponents as new
JBoss services: Local Exception Controller (LEC) and Remote Exception Controller (REC). LEC implements basic exception handling scenarios that concern
a single instance of the server. REC implements inter-REH cooperation, registration and communication between diﬀerent instances of JBoss servers.
The creation and maintenance of REHs requires similar resources to other
services in JBoss. Sending a request to a REH component is comparable to a
remote invocation. Therefore, the performance degradation of a system using
REH depends on the number of thrown exceptions.
The source code of the implementation and its conﬁguration ﬁles are available
at author’s web page. The page contains also an exemplary application:
www.eti.pg.gda.pl/∼pkacz/j2ee exception.html
3.1

Required Conﬁguration

The implemented extensions need to be integrated with JBoss, which requires
conﬁguration changes. Most changes concern the JBoss environment, however,
minor modiﬁcations must be made in application deployment descriptors. The

Coordinated Exception Handling in J2EE Applications

907

following conﬁguration items are involved: deployment descriptors of LEC and
REC, the conﬁguration of remote servers cooperating with the local REC, the
conﬁguration of the EJB container. The ﬁrst two points concern conﬁguration
changes made in JBoss independently of any application. The last point concerns
conﬁguration changes required in an application run on the platform: bean’s
container must be speciﬁed and container deﬁnition must be copied.

4

The Use of Exception Controllers

The implemented extension has been tested on an exemplary application - Duke’s
Bank. Supposing an EJB method throws a non-business exception (see Sect. 2),
examples of handling functions are: (i) simple reinvocation - the interceptor
catches the exception and requests LEC to reinvoke the method, (ii) ordering a
reinvocation on a remote server, (iii) running garbage collection - if the exception is OutOfMemory, LEC enforces garbage collection to free unused memory,
the request is repeated, (iv) invalidating a bean - it is assumed that bean’s
invocations can degrade the system, further invocations are rejected.
An explicit invocation of a LEC method from a regular object is also possible,
which requires the same operations as a typical remote invocation: looking up
the JNDI and creating object’s reference.
Exception handling in distributed systems can be supported with the use
of Remote Exception Handler, which extends the range of handled exceptions.
After the extensions are made to the middleware layer of a system, REH can be
used by all applications running in the environment, which seems a signiﬁcant
advantage of the solution. The work was supported in part by KBN under the
grant number 4T11C 00525.

References
1. Armstrong, E., Ball, J., Bodoﬀ, S.: The J2EE 1.4 Tutorial. Sun Microsystems Inc.
(2004)
2. Simons, K., Staﬀord, J.: Container-Managed Exception Handling Framework. Department of CS, Tufts University, Medford, MA, USA (2004)
3. Candea, G., Kiciman, E., Zhang, S., Keyani, P.: JAGR: An Autonomous SelfRecovering Application Server. In: 5th Int. Wrkshp on Active Middleware Services.
(2003)
4. Kurzyniec, D., Wrzosek, T., Drzewiecki, D., Sunderam, V.: Towards Self-Organizing
Distributed Computing Frameworks: The H2O Approach. Parallel Processing Letters (2003)
5. Feitelson, D.G.: Exception Propagation in the ParPar System. Technical report,
Inst. of Comp. Science, The Hebrew Univ. of Jerusalem (1998)
6. Romanovsky, A.: Practical Exception Handling and Resolution in Concurrent Programs. Comput. Lang. Vol. 23 (1997)
7. Kaczmarek, P.L., Krawczyk, H.: Remote Exception Handling for PVM Processes.
LNCS 2840 Conf. X Conf. EuroPVM/MPI (2003)
8. JBoss Inc.: JBoss Admin Development Guide. (2004)

