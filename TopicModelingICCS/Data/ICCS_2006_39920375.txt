Normalizing Relational Database Schemas Using
Mathematica
Ali Yazici1 and Ziya Karakaya2
1

Computer Engineering Department, TOBB University of Economics & Technology,
Ankara - Turkey
aliyazici@etu.edu.tr
2
Computer Engineering Department, Atilim University, Ankara - Turkey
ziya@atilim.edu.tr

Abstract. In this paper, basic relational database (DB) normalization
algorithms are implemented eﬃciently as Mathematica modules. It was
observed that, Mathematica provided a straightforward platform as opposed to previous ones, mainly Prolog based tools which required complex data structures such as linked list representations with pointers.
A Java user interface called JMath-Norm was designed to execute the
Mathematica modules in a systematic way. For this purpose, Mathematica’s Java link facility (JLink) is utilized to drive the Mathematica kernel.
JMath-Norm provides an eﬀective interactive tool in an educational setting for teaching DB normalization theory.

1

Introduction

Conceptual modeling is one of the most important steps in the design of DB
systems. It is in a way the transformation of the real life problem or business
rules into a set of entities with certain attributes and relationships among them.
The ER, EER or UML data modeling tools are utilized for the purpose of representing this transformation graphically. The entity set in the conceptual model
is eventually mapped into a set of relation schemas {R1 , R2 , R3 , ..., Rn } where
each Ri represents one of the relations (tables) in the DB schema. This mapping
is accomplished by using a set of informal rules [1].
The next step in the design process is normalization in which each Ri along
with its attribute set and a set of functional dependencies deﬁned are considered
and the relation schema is decomposed into sub relations to satisfy the so called
normalization criteria. In the literature 1NF, 2NF, 3NF, BCNF, 4NF and 5NF
are commonly cited even though some other special normal forms do exist.
Although automatic normalization has been a point of attraction for DB
researchers from the very beginning of the relational DB theory, commercial DB
tools do not provide a complete solution for automatic normalization.
Computational problems and some algorithmic problems in the design of normalized relation schemas has been considered in [2]. A Prolog implementation of
the normalization process can be found in [3]. Another Prolog based normalization tool is described in [4]. Some new and fast algorithms for DB normalization is
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 375–382, 2006.
c Springer-Verlag Berlin Heidelberg 2006

376

A. Yazici and Z. Karakaya

provided in [5, 6] where a new method for computing minimal covers is presented
using a modiﬁed deﬁnition of closure for normalizing relations. Normalization
and some associated problems have been investigated from a semantical point of
view in [7]. A polynomial time algorithm for ﬁnding all possible candidate keys
in a relation schema is given in [8].
Decomposing relations into sub relations during the normalization process
normally introduces some overhead in the DB querying. Cost eﬀectiveness of
normalization process has been undertaken by some researches [9, 10].
A practical solution to 1NF problem was given in [11] where the repeating
groups are handled by creating an extra superﬂuous repeater table. A discussion
on relations which are in 3NF but not in BCNF is provided in [12].
In this paper, the symbolic computational power of Mathematica and the
Java are combined to design a normalization tool for DB relation schemas. Basic normalization algorithms are implemented eﬃciently in Mathematica and
Java is utilized to design a windows based application. This tool aims to provide
an educational setting for the undergraduate students studying DB systems. All
standard normalization algorithms are implemented and can be tested individually or in an integrated fashion to provide 3NF relations. The design approach in
this study is similar to the one given in [13] although the underlying environment
and the purpose of the study are totally diﬀerent.
The basic data structure used in all implementations given here are just lists
together with the standard Mathematica set operations as opposed to the linked
lists and pointers and complicated programming structures used in the previous
implementations (see for example [3, 4, 13]).
The tool designed in this work utilizes JLink [14], Java link mechanism of the
Mathematica.
Section 2 brieﬂy discusses the normalization theory. In Section 3 Mathematica
implementation of basic normalization algorithms is given. Java interface via
JLink is given in Section 4. Final remarks and conclusions are provided in the
ﬁnal section.

2

Theoretical Background

As mentioned in the preceding section, the relational DB schema as an outcome
of the conceptual modeling should be normalized to sustain the integrity of the
DB. The normalization process relies on the concept of functional dependency
(FD) between set of attributes of the DB schema. Formally, a FD between two
sets of attributes X and Y, denoted by, X → Y speciﬁes that for any two tuples
t1 and t2 in a relation state r of R = {A1 , A2 , · · · , An } with n attributes that have
t1 [X] = t2 [X], they must also have t1 [Y ] = t2 [Y ]. One says that Y is functionally
dependent on X.
For example, for a DB schema named STUDENT= {studentNo, studentName, instructorId, oﬃceNo}, with studentNo as the primary key, one can
write the following FD’s:

Normalizing Relational Database Schemas Using Mathematica

377

F D1 : studentNo → {studentName, instructorId, oﬃceNo}
F D2 : instructorId → oﬃceNo
Other set of FD’s can be obtained using the concept of attribute set closure.
For each set of attributes X, we determine X + , the set of attributes that can be
determined by X based on the set of FD’s F of the schema. An algorithm to do
so is given below [1]:
Algorithm ClosureX: Determining X + under FD
Given a DB schema R, a set of attributes X and FD set F calculate X +
1. X + := X;
2. repeat
tempX + := X +
for each FD Y → Z in F do
if X + ⊇ Y then X + := X + ∪ Z
until (X + = tempX + )
Given a set of FD’s F, an attribute B is said to be extraneous [5] in X → A
with respect to F if X = ZB, X = Z, and A ∈ Z + . A set of FD’s H is called a
minimal cover[1, 5] for a set F if each dependency in H as exactly one attribute
on the right-hand side, if no attribute on the left-hand side is extraneous, and
if no dependency in H can be derived from the other dependencies in H. All
normalization algorithms uses the minimal cover of a given set of FD’s.
In this study, the closure and minimal cover algorithms are implemented in
Mathematica. An algorithm to calculate the minimal cover is given in [1]. Actually, the calculation of a minimal cover consists of ”Elimination of Extraneous
Attributes” followed by the ”Elimination of Redundant Dependencies”. Normalization is a step by step procedure in which the original DB schema is decomposed into a set of relations to satisfy the so called normalization conditions. 1NF
relations are those without any multi-valued attributes. In a 2NF relation there
are no partial dependencies. 3NF relations do not contain any transitive dependencies among its attributes. This paper utilizes Bernstein’s algorithm below
[1, 15] to provide 3NF schemas for a given set of attributes and a set of FD’s F.
2NF condition is automatically satisﬁed and dependencies are preserved. However, lossless join property [1] is not guaranteed.
Algorithm ThirdNormalForm: Bernstein’s Synthesis Algorithm [15]
Given a DB schema R and FD set F, ﬁnd 3NF decompositions D
1. Find a Minimal Cover G for F
2. For each a left-hand side X of a FD that appears in G, create a relation
schema in D with attributes {X ∪ {A1 } ∪ {A2 } ∪ . . .∪ {Ak }}, where X → A1 ,
X → A2 , . . . ,X → Ak are the only dependencies in G with X as the left-hand
side (X is the key)
3. Place any remaining attributes (that have not been placed in any relation)
in a single relation schema to ensure the attribute preservation

378

3
3.1

A. Yazici and Z. Karakaya

Mathematica Implementation and Results
3NF Normalization with Mathematica

In this section implementation of the Bernstein’s 3NF algorithm in Mathematica
is discussed. The use case diagram in Fig.1 shows the overall structure of the
subtasks of the Third Normal Form algorithm. As mentioned earlier, normalization codes encountered in the literature mainly make use of linked list structures
with pointers and requires complex coding. In this work, the same algorithms are
eﬀectively implemented using only the Mathematica’s basic list structure and
the well-known set operations. These operations are U nion[], Complement[],
Intersection[], M emberQ[], Extract[], Append[], and Length[].

7KLUG1RUPDO)RUP
©XVHVª

0LQLPDO&RYHU


©XVHVª


©XVHVª




(OLP5HG'HSV

(OLP([WUD$WWULEV


©XVHVª

©XVHVª


&ORVXUH;

Fig. 1. Use Case Diagram for 3NF Modules

The tasks shown in Fig.1 are implemented eﬀectively as Mathemamatica modules. As an illustration, the Mathematica code for the ThirdNormalForm only is
given below. This program takes as input the minimal cover [AGL, AGR] of the
original set of FD’s and generates a set of decompositions DL’s each in 3NF.
ThirdNormalForm[AGL_,AGR_]:=
Module[{i,k,m,NewGL,NewGR,DR,DL,Index,TempGL,TempDL,TempGR,count},
GL=AGL; GR=AGR; i=1; count=1;
While[count<=Length[AGL] && Not[GL=={}],
Index={i};
If[Length[GL[[i]]]<=1, DL={GL[[i]]}, DL=GL[[i]]];
TempDL=DL; DR={GR[[i]]};

Normalizing Relational Database Schemas Using Mathematica

379

TempGR={GR[[i]]}; DL=Union[DL,TempGR];
For[k=1, k<=Length[GL], k++,
If[Length[GL[[k]]]<=1, TempGL={GL[[k]]},TempGL=GL[[k]]];
DR={GR[[k]]};
If[i!=k && TempGL==TempDL, Index = Union[Index,{k}];
DL=Union[DL,DR]];
];
NewGL={}; NewGR={};
For[m = 1, m <= Length[GL], m++,
TempGL=GL[[m]]; TempGR=GR[[m]];
If[Not[MemberQ[Index, m]], NewGL=Append[NewGL, TempGL];
NewGR=Append[NewGR, TempGR]];
];
GL=NewGL; GR=NewGR;
i=1; count=count+1; Print["DL=", DL];
];
]
3.2

Sample Runs

A set of experiments are performed to check the correctness of the programs
using benchmark tests found in the literature. In this section, the results of
running the programs with two diﬀerent benchmark schemas only are given.
Test 1. Consider the STUDENT DB schema and the FD’s given by FD1,
and FD2 above. Here, 3NF is violated for the STUDENT schema above, because of the transitive dependency between studentNo and oﬃceNo. First of all,
a minimal cover is to be obtained which requires the elimination of extraneous attributes followed by the elimination of redundant dependencies. In this
case, there are no extraneous attributes. However, the redundant dependency
studentN o → of f iceN o is automatically eliminated from FD2. The new set of
FD’s which is the minimal cover is obtained as follows:
F D1 : studentNo → {studentName, instructorId}
F D2 : instructorId → oﬃceNo
By calling the ThirdNormalForm program with the minimal cover set above
as input, the following 3NF decompositions are produced:
ST U DEN T1 ={studentNo, studentName, instructorId},
ST U DEN T2 ={instructorId, oﬃceNo}
Test 2. This benchmark test is artiﬁcially produced in order to check the correctness of all the subtasks involved. The DB schema is BM = {a, b, c, d, e, g}
and a set of eleven FD’s are given as follows:
{a,b}→c, c→a, {b,c}→d, {a,c,d}→b, d→e, d→g, {b,e}→c, {c,g}→b,
{c,g}→d, and {c,e}→g

(b)

(a)

(d)

A. Yazici and Z. Karakaya

(c)

380

Fig. 2. JMath-Norm in Action (a) Main menu (b) Deﬁning attributes (c) Speciﬁcation
of FD’s (d) Normalization into 3NF

Normalizing Relational Database Schemas Using Mathematica

381

The minimal cover module eliminates the extraneous attribute a from {a,c,d}→b,
replacing it by {c,d}→b. This FD set has 3 redundant dependencies, namely,
c→a, {c,d}→b, and {c,g}→d. Hence, all three is eliminated giving a minimal
cover set with eight dependencies. 3NF decomposition sets as an output from
T hirdN ormalF orm are obtained as follows:
{a,b,c}, {b,c,d}, {d,e,g}, {b,c,e}, {b,c,g}, {a,c}, and {c,e,g}

4
4.1

JMath-Norm: A Java Tool with Mathematica and
JLink
System Architecture

In this section, a prototype Java tool called JMath-Norm, developed by the
authors is going to be illustrated. This tool is written in Java language with
Java Link facility (JLink) of Mathematica which allows linking the Java code
with the Mathematica kernel and execute the modules written in Mathematica.
The main user interface is shown in Fig.2(a) which consists of submenus to
manage FD’s, basic normalization tasks, normalization to ThirdNormalForm,
and others. Using JMath-Norm’s Dependencies pull-down menu, the users may
deﬁne a new set of FD’s, open an existing one, save or edit FD’s using a data
entry dialog box. Basic normalization tasks such as Set Closure, and Minimal
Cover can be carried out individually by utilizing the operations menu. 3NF
form of a DB schema can be obtained from Normalization submenu.
4.2

Using JMath-Norm

The example given in Test.2 above will be used to illustrate some of the features
of JMath-Norm. The user starts by selecting New FD from the Dependencies
pull-down menu to enter the attribute names one by one. This process is shown
in Fig.2(b) below. The user then selects Functional Dependencies tab from the
dialogue box, to eﬃciently deﬁne FD set by selecting attributes from the left
and right pane respectively to enter the lhs and rhs of the FD set using the Add
Dependency button(see Fig.2(c)).
After completing the speciﬁcation of FD’s, the user may either choose to select
from a set of aforementioned basic normalization processes or directly obtain the
3NF decompositions by selecting 3NF from the Normalization tab of the main
menu. The output for the later is shown in Fig.2(d).

5

Conclusions

In this paper, an eﬃcient Mathematica implementation of basic DB normalization algorithms is presented. It was observed that, the implementation uses
only Mathematica’s collection operations. Previous implementations, however,
are heavily based on linked lists and pointer structures which produces computationally ineﬃcient systems.

382

A. Yazici and Z. Karakaya

The Mathematica modules developed for the purpose are put together into a
window based system JMath-Norm which provides interaction between the user
and Mathematica. JMath-Norm is written in Java and utilizes JLink to derive
the Mathematica kernel. By using the system user can arrange I/O into ﬁles
which is displayed on user-friendly screens for which no Mathematica knowledge
is actually required.
This prototype provides an interactive tool that is useful for teaching the
normalization theory in a DB management course. The system, when completed,
will provide modules for the other normalization forms and enable users to create
DB tables automatically for a speciﬁc DBMS chosen.

References
1. Elmasri, R. and Navathe, S.B.: Fundamentals of Database Systems, 4th Ed., Addison Wesley (2003).
2. Beeri, C. and Bernstein, P.A.: Computational Problems Related to the Design of
Normal Form Relational Schemas, ACM Transactions on Database Systems, Vol.4,
No.1 (1979) 30-45.
3. Ceri, S. and Gottlob, G.: Normalization of Relations and Prolog, Communications
of the ACM, Vol.29, No.6 (1986)
4. Welzer, W., Rozman, I. and Gyrks, J.G.: Automated Normalization Tool, Microprocessing and Microprogramming, Vol.25, (1989) 375-380.
5. Diederich, J. and Milton, J.: New Methods and Fast Algorithms for Database
Normalization, ACM Transactions on Database Systems, Vol.13, No.3(1988) 339365.
6. Diederich, J.: Minimal Covers Revisited: Correct and Eﬃcient Algorithms, SIGMOD Record, Vol.20, No.1 (1991)
7. Hallasy, B.: Normal Forms and Normalization: Practical Designer’s View, Information and Software Technology, Vol.25, No.6 (1991) 451-461.
8. Lucchesi, C.L. and Osborn, S.L.: Candidate Keys for Relations, Journal of Computer and System Sciences, Vol.17, No.2 (1978) 270-279.
9. Westlend, J.C.: Economic Incentives for Database Normalization, Information Processing and Management, Vol.28, No.5 (1992)647-662.
10. Lee, H.: Justifying Database Normalization: A Cost/Beneﬁt Model, Information
Processing and Management, Vol.31, No.1 (1995) 56-67.
11. Millet, I.: Normalization on the Fly, Journal of Systems Software, Vol.40 (1998)
85-88.
12. Vincent, M.W. and Srivinasan, B.: A Note on Relation Schemas Which Are in 3NF
But Not in BCNF, Information Processing Letters, Vol.48 (1993) 281-283.
13. Du, H. and Wery, L.: Micro: A Normalization Tool for Relational Database Designers, Journal of Network and Computer Applications, Vol.22, (1999) 215-232.
14. Wolfram, S.: The Mathematica Book, 4th Ed., Wolfram Media/Cambridge University Press (1999).
15. Bernstein, P.A.: Synthesizing Third Norm Relations from Functional Dependencies,
ACM Trans. Database Systems, Vol.1, No.4 (1976) 277-298.

