Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 7–16

International Conference on Computational Science, ICCS 2011

A Practical Tree Contraction Algorithm
for Parallel Skeletons on Trees of Unbounded Degree
Akimasa Morihataa , Kiminori Matsuzakib
a Tohoku
b Kochi

University, 2-1-1, Katahira, Aoba-ku, Sendai-shi, Miyagi, Japan
University of Technology, 185, Miyanokuchi, Tosayamada-cho, Kochi, Japan

Abstract
Algorithmic skeletons are ready-made parallel computation patterns. Since each skeleton can be evaluated efﬁciently on parallel computation environments, we can develop eﬃcient parallel programs only by specifying our
computation by a combination of skeletons. Although eﬀectiveness of algorithmic skeletons, especially those manipulating arrays and lists, is now well-recognized, those for trees of unbounded degree have not been ﬁrmly established.
Most of the existing studies transform them to binary trees through preprocessing. But this approach is not practical.
The transformation not only makes developments of parallel programs diﬃcult but also aﬀects the performance of the
parallel programs developed.
In this paper, we propose a parallel tree contraction algorithm named Rake-Shunt contraction algorithm. It is
generalization of the Shunt contraction algorithm, which has been used as the algorithmic basis of the binary-tree
skeletons, and inherits several good properties such as scalability with respect to the number of processors and simplicity of the implementation. Moreover, it can deal with arbitrary trees and requires no modiﬁcation of their shapes.
Our preliminary experiments show that our algorithm leads to an implementation of the tree reduction, one of the most
important tree skeletons, that is easier to use and more eﬃcient than the previous method based on the transformation
to binary trees.
Keywords: Algorithmic Skeletons, Trees, Parallel Tree Contraction

1. Introduction
Algorithmic skeletons [1] (also known as parallel skeletons) are ready-made parallel computation patterns. Since
each skeleton can be evaluated eﬃciently on parallel computation environments, we can develop eﬃcient parallel programs only by specifying our computation by a combination of skeletons. Now eﬀectiveness of algorithmic skeletons,
especially those manipulating arrays and lists, is well-recognized. Familiar frameworks such as Google’s MapReduce [2] and Intel R Threading Building Blocks [3] provide parallel skeletons.
Algorithmic skeletons for trees have been also considered. Skillicorn et al. [4, 5] proposed tree skeletons, and
Matsuzaki et al. implemented a set of tree skeletons in parallel skeleton library SkeTo [6]. Yet, most researches
1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.002

8

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

consider binary trees, and only a few discussed trees of unbounded degree. This is not satisfactory because most of
the applications of trees, such as tree maps (i.e., dictionaries) and syntax trees, could be nonbinary. Above all, XML
documents, which would be the most important trees in parallel computation, can be arbitrary shapes.
One of the most diﬃcult parts in developing tree skeletons is to provide their eﬃcient parallel evaluation algorithms. Concerning parallel evaluation, tree skeletons rely on parallel tree contraction algorithms [7, 8]. There is a
simple and eﬃcient parallel tree contraction algorithm for binary trees, called the Shunt contraction algorithm [8, 9,
10], but there appears to be no parallel tree contraction algorithms that are practical and can deal with arbitrary trees.
The standard method of dealing with nonbinary trees in parallel tree contraction is to transform the trees to binary
trees [10, 11, 12, 13, 14] (sometimes called “binarization”), and indeed, Matsuzaki et al. [15] proposed an implementation of generic tree skeletons based on binarization. Their skeletons ﬁrst transform the input tree to full binary
trees and then perform parallel computations by using binary-tree skeletons. Apparently such an approach has several
shortcomings. First, binarization is costly, especially when we would like to combine the skeletons with other computations. Second, binarization makes trees larger and thus requires more computational resources. Moreover, use of
binary-tree skeletons on nonbinary trees is inconvenient. We should provide operators that simulate computations of
generic trees on binary trees, and necessity of such unnatural operators does not only make development of parallel
programs hard but also aﬀects performance.
In order to overcome these problems, we propose a parallel tree contraction algorithm named Rake-Shunt contraction algorithm. It is a generalization of the Shunt contraction algorithm, and inherits several good properties
such as scalability with respect to the number of processors and simplicity of the implementation. Moreover, it has a
distinctive feature that it can deal with arbitrary trees but requires no modiﬁcation of their shapes.
Although the algorithm brings neither new computational bounds nor new parallelizable problems, it would be
useful for providing practical implementations based on parallel tree contraction, including those for generic tree
skeletons. Indeed, our preliminary experiments show that our algorithm leads to an implementation of the tree reduction, one of the most important tree skeletons, that is easier to use and more eﬃcient than the previous binarizationbased method.
2. Preliminary
2.1. Trees and Basic Notations
As the input, we consider rooted trees each of whose node could have unbounded number of children. Nodes that
have no children are called leaves, and internal nodes otherwise. We call nodes that have no sibling solitary.
In order to provide eﬃcient implementation of our algorithm, we assume that the input tree is structured as follows.
All of its nodes are stored in an array. Each node has three pointers: one to its ﬁrst child, another to its next sibling,
and the other to its “previous” node: each ﬁrst child has a pointer to its parent, and other nodes have those to their
previous sibling. In addition, each node can store a value. This is a standard implementation of nonbinary trees by
using adjacency lists.
We adopt EREW-PRAM (Exclusive-Read Exclusive-Write Parallel Random Access Machines) as the model of
our parallel computation. We use p and n to denote the number of processors and the size of the input tree (i.e., the
number of nodes in the tree), respectively.
We use the lambda notations for representing functions. For example, (λx y. x + y) is the function that calculates
the sum of its two operands.
2.2. Parallel Tree Contraction
Tree contraction [7, 8] is a problem to collapse a tree by successive applications of primitive contraction operations. An eﬃcient parallel tree contraction algorithm leads to several eﬃcient parallel algorithms on trees because it
provides eﬃcient and conﬂict-free scheduling of gathering values in the tree.
Figure 1 shows the three primitive contraction operations. Rake is an operation applied to a leaf, and eliminates it.
Compress is applied to a solitary node and eliminates it. Shunt is applicable for a node that has exactly one sibling, and
performs consecutive applications of Rake and Compress. The original parallel tree contraction algorithm, developed
by Miller and Reif [7], was based on Rake and Compress. Later some researchers [9, 10] pointed out that Shunt
leads to a simple and eﬃcient parallel tree contraction on binary trees.

9

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

❧

❧

Rake

=⇒

❧ ⑤
❧ ❧

❧
⑤

❧ ❧ ❧

Compress

=⇒

❧

❧

❧
❧

❧
⑤

❧

Shunt

=⇒

❧

❧

❧

Figure 1: Primitive contraction operations applied to the gray-colored nodes: Rake (left), Compress (middle), and Shunt (right).

❣

❣

❣
❣
1

❣
❣

❣❣❣
5

❣

❣

❣

(2-a)

=⇒

8

❣❣
8

❣

❣

(2-b)

=⇒

❣❣

❣❣❣ ❣❣

❣

❣ ❣❣

❣

❣

2 3 4

2

4

2

4

6 7

6 7

❣

6 8

❣

❣

(2-c)

=⇒

❣❣
❣

❣

1

2

3 4

Figure 2: A behavior of Procedure 1: It describes an iteration of Steps (2a)–(2c): the dashed box speciﬁes the leaves to which contraction operations
are applied to at the step.

3. Rake-Shunt Contraction Algorithm
Here we propose the Rake-Shunt contraction algorithm. It consists of successive applications of Rake and Shunt
operations. We call a Shunt operation Shunt-L if it is applied to the left leaf, and Shunt-R otherwise. Similarly, we
call a Rake operation Rake-L/Rake-R if it merges the value of a leaf to its right/left sibling, respectively. It is worth
noting that Shunt-L/Shunt-R are successive applications of Rake-L/Rake-R and Compress.
We assume that the input contains no solitary node; otherwise, we can make it binary by inserting a “dummy” leaf
as its sibling. Dummy leaves are used only for scheduling and do not aﬀect any computation. This assumption is for
simplicity of explanation. Later we will show that it is not necessary to introducing dummy leaves.
The following is the Rake-Shunt contraction algorithm. This is a generalization of the Shunt contraction algorithm
in the sense that the two algorithms are identical when the input is a full binary tree. We depict its behavior in Figure 2.
Procedure 1 (Rake-Shunt Contraction Algorithm).
1. Number all leaves from left to right starting from 1.
2. Iterate Steps (2a)–(2c) until the tree becomes a leaf.
(a) For all odd-numbered leaves having right siblings, apply Shunt-L if possible or Rake-L otherwise.
(b) For all odd-numbered leaves, apply Shunt-R if possible or Rake-R otherwise.
(c) Halve all the numbers.
In parallel tree contraction, we should avoid conﬂicts of contraction operations. For example, if we simultaneously
apply Compress operations to both a node and its child, the tree structure will be broken. To avoid conﬂicts, the Shunt
contraction algorithm [8, 9, 10] numbers leaves and apply Shunt operations separately to left and right leaves. We
followed this approach.
In addition, we should be careful about implementation of Shunt operations. Figure 3 shows a critical case.
The input tree is the one in the middle, and then, we apply a Shunt-L and a Rake-L operations to leaves 1 and 3,
respectively. If the Shunt-L operation removes the parent of 1, as in Figure 1, then the left tree is resulted in. Since
our tree is implemented by a doubly-linked adjacency lists, we should set the previous node of leaf 4 to be leaf 2;
however, there is no way of knowing that the parent of leaf 2 is eliminated. In order to avoid this problem, we adopt
another implementation, which results in the right tree in Figure 3: we eliminate the sibling instead of the parent. This
implementation does not raise any dangerous pointer manipulations, even if the sibling has children.
Lemma 1. Procedure 1 does not cause any conﬂicting applications of contraction operations; namely, no contraction
operations will read/write values/addresses from nodes that are to be eliminated in the same step.

10

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

✐
✐
✐

✐
2

✐

✐
✐
4

⇐=

✐ ✐ ✐
3 4
✐ ✐
1 2

✐

=⇒

✐ ✐ ✐
2
4
✐ ✐

Figure 3: Critical applications of primitive contraction operations: the left describe the case where Shunt-L removes the parent, and the right
describes the case where Shunt-L removes the sibling.

Proof. First of all, note that throughout the procedure, leaves are numbered from left to right starting from 1.
Here we only consider Step (2a). The case of Step (2b) is similar.
It is easy to see that two Rake-L operations do not conﬂict.
The reason that two Shunt-L operations do not conﬂict is the same as the case of binary trees [9, 10]. Assume
that two Shunt-L operations to leaves n1 and n2 conﬂict. Without loss of generality, we can assume that the Shunt-L
operation for n2 tries to access a node that is to be eliminated by the Shunt-L operation for n1 . The only possibility
is that the parent of n2 is the sibling of n1 . However, it cannot occur because both the number of n1 and n2 should be
odd, whereas no other leaf exists between them.
Lastly, we assume that a Shunt-L operation to leaf n1 conﬂicts with a Rake-L operation to n2 . There are two cases.
(i) the Shunt-L operation tries to access a node that is to be eliminated by the Rake-L. Rake-L cannot eliminate the
parent of n1 because the Rake-L operation eliminates n2 that is a leaf. Therefore, the only possibility is that n2 is the
sibling of n1 . Apparently, it contradicts the fact that both n1 and n2 are odd valued. (ii) the Rake-L operation tries
to access a node that is to be eliminated by the Shunt-L. Because of the requirement of applying Shunt-L, the only
possibility is applying Rake-L to the ﬁrst child of the right sibling of n1 . This cannot occur because of exactly the
same reason as the case of two Shunt-L operations.
Note that it does not raise any conﬂict to determine which of Shunt-L and Rake-L we should apply, because it
only access the nodes that possibly concern the contraction operations.
Theorem 2. Procedure 1 ﬁnishes in time O(n/p + log n).
Proof. Correctness of Procedure 1 follows from Lemma 1.
Step (1) ﬁnishes in the required time by using the list-ranking algorithm in combination with the Euler-tour technique [8]. It is suﬃcient to iterate Step (2) log2 n times, because each iteration of Steps (2a)–(2c) eliminates all
odd-numbered leaves and the procedure terminates when all leaves but one are eliminated. Based on this observation,
the computational complexity follows from Brent’s scheduling theorem [16].
Avoidance of Introducing Dummy Leaves
The Rake-Shunt contraction algorithm does not require any modiﬁcation on the shape of input trees as preprocessing, because it is actually unnecessary to introduce dummy leaves. Dummy leaves are only used for scheduling
applications of Shunt operations. We can simulate this scheduling by appropriately numbering solitary nodes, instead
of dummy leaves, and apply Compress operations to parents of odd-numbered solitary nodes.
To be concrete, we reﬁne the algorithm as follows. In Step (1), we number all leaves and solitary nodes. The
numbering should be in-order, and each solitary leaf should have two numbers. In Step (2a), we deal with each node
that has an odd-number, say k, and satisﬁes either (i) it has a right sibling, or (ii) it is solitary leaf and numbered by
both k and k + 1. We deal with the other odd-numbered nodes in Step (2b).
4. Implementing Tree Reductions by Rake-Shunt Contraction Algorithm
4.1. Tree Reductions
In order to demonstrate eﬀectiveness of the Rake-Shunt contraction algorithm, here we propose an implementation
of tree reductions [5, 14, 15], which is one of the most important tree skeletons.

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

11

A tree reduction on unbounded-degree trees gathers values by using two operators, say ⊗ and ⊕: It merges the
value of siblings by ⊕, and calculates the contribution of children by ⊗. reduce⊕,⊗ denotes the tree reduction by ⊕ and
⊗ as follows.
reduce⊕,⊗ (Node(v, [ ]))
reduce⊕,⊗ (Node(v, [t1 , . . . , tk ]))

= v
= v ⊗ (reduce⊕,⊗ (t1 ) ⊕ · · · ⊕ reduce⊕,⊗ (tk ))

Here Node(v, [t1 , . . . , tk ]) denotes a tree whose root retains value v and children t1 , . . . , tk , and hence, Node(v, [ ])) is a
leaf that consists of value v. We assume ⊕ to be associative.
4.2. Tree Reduction by Merging Partial Computations
The Rake-Shunt contraction algorithm gathers values in the tree according to the primitive contraction operations;
therefore, in order to implement a tree reduction, we should decompose its calculation to computations that correspond
to the primitive contraction operations, namely Rake and Compress. The computations merge the value of the node
that is to be eliminated into that of either its sibling (Rake-L/Rake-R) or its children (Compress), and put it to the node
left.
It is easy to develop the one that corresponds to Rake-L/Rake-R operations merging two leaves: calculate v1 ⊕ v2
where v1 and v2 are the values in the leaves merged. The diﬃcult case is that the sibling is an internal node. We cannot
calculate the value of the sibling until the subtree rooted by the sibling is completely reduced.
The key is to consider merging partial computations. Note that internal nodes represent not values but partial
computations. More concretely, an internal node having a value v corresponds to a function
(λx l r. l ⊕ (v ⊗ x) ⊕ r),
where x, l, and r respectively express the contribution of its children, the left siblings, and the right siblings. Then, if
a Rake-L operation is applied to its left sibling that has vl , the partial computation should be updated to the following.
(λx l r. l ⊕ vl ⊕ (v ⊗ x) ⊕ r)
We do not want to retain very large partial computations, and thus, we would like to shrink them as much as
possible. For example, if another left sibling consisting of vl joins to the node above, we have
(λx l r. l ⊕ vl ⊕ vl ⊕ (v ⊗ x) ⊕ r),
which can be shrunk to

(λx l r. l ⊕ v∗l ⊕ (v ⊗ x) ⊕ r)

where v∗l = vl ⊕ vl . Similarly, we may try to shrink the partial computations in the case of Compress. If we are able
to perform these shrinking, the tree reduction can be eﬃciently implemented by using the Rake-Shunt contraction
algorithm.
Theorem 3. reduce⊕,⊗ can be calculated in O(n/p + log n) time by Procedure 1, provided that ⊕ and ⊗ are constanttime operations, ⊕ is associative, and there exists a constant-time function ρ⊕,⊗ such that ρ⊕,⊗ (a, b, c; a , b , c ) =
(a∗ , b∗ , c∗ ) implies that (λx. a ⊕ (b ⊗ x) ⊕ c) ◦ (λx. a ⊕ (b ⊗ x) ⊕ c ) = (λx. a∗ ⊕ (b∗ ⊗ x) ⊕ c∗ ).
Proof. In what follows, we regard the associated value as the identiﬁer of the node.
Initially, we associate each internal node v with function (λx. ι⊕ ⊕ (v ⊗ x) ⊕ ι⊕ ), where ι⊕ is the unit of ⊕. Note that
even if ⊕ does not have the unit, we can introduce it by providing an additional ﬂag that denotes whether the value is
the unit.
Next, we apply the Rake-Shunt contraction algorithm. In each primitive contraction operation, we update the
associated values as follows. We omit the cases of Rake-R because they are very similar to those of Rake-L.
• When Rake-L is applied to leaf v and its left sibling is leaf v , associate the leaf left with v ⊕ v .
• When Rake-L is applied to leaf v and its left sibling is internal node (λx. a ⊕ (b ⊗ x) ⊕ c), associate the internal
node left with (λx. a ⊕ (b ⊗ x) ⊕ c), where a = v ⊕ a.

12

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

• When Compress is applied to solitary node (λx. a ⊕ (b ⊗ x) ⊕ c) and its child is leaf v, associate the leaf left with
v where v = a ⊕ (b ⊗ v) ⊕ c.
• When Compress is applied to solitary node (λx. a⊕(b⊗ x)⊕c) and its child is internal node (λx. a ⊕(b ⊗ x)⊕c ),
associate the internal node left with (λx. a∗ ⊕ (b∗ ⊗ x) ⊕ c∗ ) where (a∗ , b∗ , c∗ ) = ρ⊕,⊗ (a, b, c; a , b , c ).
Correctness of the computation is evident, and the computational complexity follows from Theorem 2.
Theorem 3 provides an implementation of reduce⊕,⊗ . This implementation brings parallel computation if we
succeed in developing ρ⊕,⊗ .
4.3. Example 1: Maximum Path Weight
Now let us demonstrate use of Theorem 3. The ﬁrst example is the maximum path weight problem. We would
like to ﬁnd the maximum-weighted path from the root to a leaf, where the weight of a path is the sum of values on the
path. This is a kind of problem of ﬁnding the critical path.
It is easy to specify the problem as a tree reduction: reduce↑,+ , where ↑ is the binary maximum operator. Therefore,
according to Theorem 3, we consider partial computations of the form, (λx. a ↑ (b+x) ↑ c). Note that ↑ is commutative;
thus, for this problem, simpler (λx. a ↑ (b + x)) should be suﬃcient.
Now let us conﬁrm the premise of Theorem 3.
(λx. a ↑ (b + x)) ◦ (λx. a ↑ (b + x)) =

{ function composition }
(λx. a ↑ (b + (a ↑ (b + x))))
= { u + (v ↑ w) = ((u + v) ↑ (u + w)) }
(λx. a ↑ (b + a ) ↑ (b + b + x))
= { simpliﬁcation }
(λx. a∗ ↑ (b∗ + x)) where a∗ = a ↑ (b + a ) and b∗ = b + b

The reasoning gives the deﬁnition of ρ↑,+ , which takes only four arguments in this case: ρ↑,+ (a, b; a , b ) = (a ↑
(b + a ), b + b ). Therefore, by associating two values for each internal node, we can compute the maximum path
weight eﬃciently in parallel.
It is worth noting that in the reasoning above, we only used algebraic properties of ↑ and +, namely, the associativity and commutativity of ↑, the associativity of +, and the distributivity of + over ↑. Note that they are exactly
the properties of semirings. In other words, the same evaluation schema is applicable to any tree reduction that is
speciﬁed by a semiring.
4.4. Maximum Subtree Sum
The other example is the maximum subtree sum problem. We would like to calculate the maximum weight of a
subtree, and the weight is the sum of values in the subtree. This problem is a kind of query of extracting the most
meaningful part.
It is not diﬃcult to express the maximum subtree sum by a tree reduction. Since we also need to calculate
weights of subtrees, the reduction yields two values: reduce⊕,⊗ where (m1 , s1 ) ⊕ (m2 , s2 ) = (m1 ↑ m2 , s1 + s2 ) and
v ⊗ (m, s) = ((v + s) ↑ m, v + s). The ﬁrst component retains the maximum subtree sum, whereas the second is the
weight of the subtree. We update the maximum subtree sum when the weight of the subtree is larger than the current
candidate of the maximum.
It is easy to see associativity of ⊕; moreover, ⊕ is commutative. Thus, it is suﬃcient to consider (λx. a ⊕ (b ⊗ x)).

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

13

We derive ρ⊕,⊗ as follows.
(λx. (ma , sa ) ⊕ (b ⊗ x)) ◦ (λx. (ma , sa ) ⊕ (b ⊗ x))
= { function composition }
(λx. (ma , sa ) ⊕ (b ⊗ ((ma , sa ) ⊕ (b ⊗ x))))
= { let (m x , s x ) = x; deﬁnitions of ⊕ and ⊗ }
(λ(m x , s x ). (ma ↑ (b + sa + b + s x ) ↑ ma ↑ (b + s x ) ↑ m x , sa + b + sa + b + s x ))
= { simpliﬁcation by using algebraic properties of ↑ and + }
(λ(m x , s x ). ((ma ↑ ma ) ↑ (((b + sa + b ) ↑ b ) + s x ) ↑ m x , (sa + b + sa + b ) + s x ))
= { deﬁnitions of ⊕ and ⊗ }
(λ(m x , s x ). a∗ ⊕ (b∗ ⊗ (m x , s x )))
where a∗ = (ma ↑ ma , sa + b + sa + b − b∗ ) and b∗ = (b + sa + b ) ↑ b
We succeeded in developing ρ⊕,⊗ ; therefore, from Theorem 3, we can calculate the maximum subtree sum in parallel
by associating each internal node with three numbers.
4.5. Discussions
Theorem 3 shows that reduce⊕,⊗ can be implemented by using the Rake-Shunt contraction, if we provide a function ρ⊕,⊗ . Note that known results [8, 12, 13] guarantee the same computational complexity from the premise. The
important point is that our parallel programs do not require any modiﬁcation of the shape of the input tree.
The previous implementation [15] also requires a similar function, and ρ⊕,⊗ is easier to develop. [15] uses
binarization, which requires to develop operations that simulate the computations on binary trees. Our implementation
does not have such diﬃculty.
This simplicity is also beneﬁcial from the perspective of eﬃciency of developed programs. Our implementation
often requires fewer primitive values and fewer units for representing partial computations. For instance, for computing the maximum path weight, the previous method requires three numbers and two units, namely those for +
and ↑. For the maximum subtree sum, four numbers and three units, that of ⊕ and the left and the right units of ⊗,
are necessary. It is likely that simulating the computation on binary trees requires more information for retaining the
partial computations. Indeed, for all problems considered in [14, 15, 21], our method requires fewer primitive values,
or at least not more, than for the previous method.
It is also worth noting that the premise of Theorem 3 is very similar to those considered in the literature [4, 8, 10,
15, 17, 18, 19, 20], and we can mechanically develop ρ⊕,⊗ based on the existing parallelization methods [17, 20].
5. Experiments
We carried out an experiment so as to evaluate the eﬃciency of our implementation of the tree reduction. Its
environment consists of dual quad-core Xeon X5550 2.66-GHz CPUs, 12-GB memory, 64-bits Linux 2.6.32 (Ubuntu
10.04), and ICC 11.1 with the -O2 option.
We considered two problems in the previous section, namely the maximum path weight problem and the maximum subtree sum problem. For each problem, we developed four programs based on C++ with OpenMP: SEQ is a
sequential recursion-free program; RS is based on the Rake-Shunt contraction algorithm; [15]-ND implements the
previously-proposed method [15], but it does not introduce any dummy leaves; [15]-WD implements the previouslyproposed method [15] by using dummy leaves. Note that the method [15] relies on the implementation of binary tree
skeletons. We adopt the Shunt contraction algorithm as originally suggested [5]1 .
We randomly generated two input trees. Each tree consists of 225 nodes, and each node contains a 64-bits integer
from −219 to 219 − 1. TALL is a slender tall tree whose height is 220 + 1. FLAT is a ﬂat short tree whose height is 9.
Tables 1–4 summarize the results. The computational times do not include those for inputting and preprocessing
the tree, such as those for modifying the tree shape and numbering the leaves.
First, RS became slightly faster than SEQ when we used 8 cores. This implies that our approach is promising.
1

[15] considers distributed environments and thus it cannot directly be compared to our method.

14

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

Table 1: Running times for computing the maximum path weight of FLAT (unit: second).

SEQ
RS
[15]-ND
[15]-WD

p=1
0.53
1.06
1.58
2.86

p=2

p=3

p=4

p=6

p=8

0.74
0.73
1.29

0.66
0.67
1.12

0.54
0.53
0.91

0.51
0.50
0.82

0.49
0.49
0.70

Table 2: Running times for computing the maximum path weight of TALL (unit: second).

SEQ
RS
[15]-ND
[15]-WD

p=1
0.63
2.05
2.61
4.15

p=2

p=3

p=4

p=6

p=8

1.05
1.29
2.00

0.90
1.12
1.71

0.75
0.90
1.38

0.64
0.74
1.19

0.62
0.68
1.09

Table 3: Running times for computing the maximum subtree sum of FLAT (unit: second).

SEQ
RS
[15]-ND
[15]-WD

p=1
0.81
1.72
1.83
3.30

p=2

p=3

p=4

p=6

p=8

0.83
0.84
1.49

0.73
0.64
1.26

0.60
0.60
1.03

0.56
0.56
0.92

0.55
0.54
0.86

Table 4: Running times for computing the maximum subtree sum of TALL (unit: second).

SEQ
RS
[15]-ND
[15]-WD

p=1
0.79
2.41
2.96
4.70

p=2

p=3

p=4

p=6

p=8

1.18
1.47
2.26

1.01
1.27
1.96

0.87
1.00
1.54

0.71
0.86
1.34

0.68
0.76
1.22

Nevertheless, the speedup does not match the theoretical complexity. One of the reasons is the imbalance of tasks.
Even though every processor deals with nearly the same number of leaves in Steps (2a)–(2c), those considered in Step
(2a) or (2b) could vary: a processor may come across only the rightmost leaves, whereas another may have no such.
In order to resolve this imbalance, the current implementation divides leaves into 16p chunks, and dynamically assign
each chunk to a processor that has ﬁnished its task.
Even if we take the task imbalance into account, the speedups do not seem very nice. We suspect that memory
operations form a bottleneck. Parallel tree contraction algorithms irregularly access nodes, and the irregularity may
reduce memory throughput. For providing more eﬃcient implementations, a considerable approach is to combine the
Rake-Shunt contraction algorithm with the m-bridge technique [8, 22]. The technique divides a tree into a set of
segments, each of which can be collapsed by using the primitive contraction operations, and thus, reduces the number
of memory operations. It will be also useful for providing an implementation on distributed-memory environments.
Next, let us compare the implementations. The results for two problems were very similar. [15]-WD was apparently slower, which showed that it was eﬀective to avoid introducing dummy leaves. [15]-ND was as fast as RS
on FLAT, but it was slower on TALL. Since the implementation of [15] requires more numbers for retaining partial
computations, it is natural that [15]-ND is slower than RS. This overhead is not apparent on FLAT because the most
costly operation, namely merging of two partial computations, rarely occurs. It is worth noting that RS uses less space
than others because it uses fewer number of values. In summary, we can conclude that RS is the most preferable.
6. Related Works
There have been a lot of studies on parallel tree contraction algorithms, including their applications to trees that
have unbounded number of children [7, 8, 10, 11, 12, 13, 14, 23, 24]. Yet, most of the results have been developed from algorithmic viewpoints, and only a few [22, 25] discussed practically eﬃcient implementations. We have

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

15

developed practically eﬃcient parallel tree contraction that can deal with arbitrary trees.
The original parallel tree contraction by Miller and Reif [7] is applicable for arbitrary trees, but it requires concurrent read and write. A standard method of adapting it to exclusive-read/write machines is to use its randomized variant.
The randomized variant might be practical, while deterministic algorithms can guarantee worst-case complexity.
Another well-known method of dealing with arbitrary trees is to binarize them [10, 11, 13, 15]. Though this
approach is eﬀective in theory, it is less practical as our experiment shows. Abrahamson et al. [10] proposed a
method of binarization, and claimed that the binarization is just a reinterpretation of pointers and thus introduces no
cost. Yet, the binarization makes all the nodes to be leaves and thereby makes the tree virtually larger; moreover, it
transforms the tree shape and therefore makes developments of parallel programs diﬃcult.
Miller and Teng [12] proposed a tree-contraction-based method of evaluating expressions that may form nonbinary operators. Their method does not perform binarization. Instead, in order to achieve conﬂict-free scheduling
of primitive contraction operations, their method numbers leaves for every iteration of applying Shunt operations.
Apparently, this numbering introduces additional costs.
7. Conclusion and Future Works
We have developed a new parallel tree contraction algorithm, the Rake-Shunt contraction algorithm. It is a variant
of the Shunt contraction algorithm [8, 9, 10] but applicable to arbitrary trees without modifying the shape of the input.
It leads to an implementation of tree reductions, which is easier to use and more eﬃcient than the previous one.
Regrettably, there are computations that Theorem 3 cannot cope with. For instance, Miller and Reif [23] and
Diks et al. [13] showed that parallel tree contraction algorithms are potentially able to deal with those in which
computations corresponding to Rake operations cannot be performed incrementally, i.e., we cannot start a computation
for an internal node until almost all of its children are available. We would like to check whether our method is also
extensible to them.
The absence of binarization might be eﬀective when we consider combination of other parallel programming
technique. One possibility is a combination with ﬂattening technique [26, 27], in which a tree is represented by a
nested array. Another possibility is the method by Kakehi et al. [24], which is a parallel tree contraction without
parsing, namely calculating a value directly from a string that consists of brackets encoding the input tree. We believe
that such combinations could bring interesting results.
We have only considered tree reductions. Tree skeletons contain more involved computations, namely tree
accumulations [4]. A standard method of implementing tree reductions is to rewind the tree contraction procedure [4, 10, 12]. Indeed, we can implement tree accumulations by the Rake-Shunt contraction algorithm based on
this strategy. This approach would provide a simpler implementation. The previous one [15] is rather complicated
because it should be careful that the binarization does not aﬀect the result. Our algorithm does not introduce such a
trouble.
Acknowledgements. The authors are grateful to Kento Emoto, Shigeyuki Sato, and Zhenjiang Hu for their fruitful
discussions on an early version of this work. The authors are also grateful for anonymous referees for their valuable
comments.
References
[1] M. I. Cole, Algorithmic Skeletons: Structural Management of Parallel Computation, MIT Press, 1989.
[2] J. Dean, S. Ghemawat, Mapreduce: Simpliﬁed data processing on large clusters, in: 6th Symposium on Operating System Design and
Implementation, 2004, pp. 137–150.
[3] J. Reinders, Intel threading building blocks, O’Reilly & Associates, Inc., 2007.
[4] J. Gibbons, W. Cai, D. B. Skillicorn, Eﬃcient parallel algorithms for tree accumulations, Science of Computer Programming 23 (1) (1994)
1–18.
[5] D. B. Skillicorn, Parallel implementation of tree skeletons, Journal of Parallel and Distributied Computing 39 (2) (1996) 115–125.
[6] K. Matsuzaki, H. Iwasaki, K. Emoto, Z. Hu, A library of constructive skeletons for sequential style of parallel programming, in: Proceedings
of the 1st International Conference on Scalable Information Systems, Infoscale 2006, Vol. 152 of ACM International Conference Proceeding
Series, 2006, p. 13.
[7] G. L. Miller, J. H. Reif, Parallel tree contraction and its application, in: 26th Annual Symposium on Foundations of Computer Science, 1985,
pp. 478–489.

16

Akimasa Morihata and Kiminori Matsuzaki / Procedia Computer Science 4 (2011) 7–16

[8] J. H. Reif (Ed.), Synthesis of Parallel Algorithms, Morgan Kaufmann Publishers, 1993.
[9] S. R. Kosaraju, A. L. Delcher, Optimal parallel evaluation of tree-structured computations by raking, in: VLSI Algorithms and Architectures,
3rd Aegean Workshop on Computing, AWOC 88, Proceedings, Vol. 319 of Lecture Notes in Computer Science, 1988, pp. 101–110.
[10] K. R. Abrahamson, N. Dadoun, D. G. Kirkpatrick, T. M. Przytycka, A simple parallel tree contraction algorithm, Journal of Algorithms 10 (2)
(1989) 287–302.
[11] R. Cole, U. Vishkin, The accelerated centroid decomposition technique for optimal parallel tree evaluation in logarithmic time, Algorithmica
3 (1988) 329–346.
[12] G. L. Miller, S.-H. Teng, Tree-Based Parallel Algorithm Design, Algorithmica 19 (4) (1997) 369–389.
[13] K. Diks, T. Hagerup, More general parallel tree contraction: Register allocation and broadcasting in a tree, Theoretical Computer Science
203 (1) (1998) 3–29.
[14] K. Matsuzaki, Z. Hu, K. Kakehi, M. Takeichi, Systematic derivation of tree contraction algorithms, Parallel Processing Letters 15 (3) (2005)
321–336.
[15] K. Matsuzaki, Z. Hu, M. Takeichi, Parallel skeletons for manipulating general trees, Parallel Computing 32 (7-8) (2006) 590–603.
[16] R. P. Brent, The parallel evaluation of general arithmetic expressions, Journal of the ACM 21 (2) (1974) 201–206.
[17] A. L. Fisher, A. M. Ghuloum, Parallelizing complex scans and reductions, in: Proceedings of the ACM SIGPLAN’94 Conference on Programming Language Design and Implementation, 1994, pp. 135–146.
[18] W.-N. Chin, A. Takano, Z. Hu, Parallelization via context preservation, in: Proceedings of the 1998 International Conference on Computer
Languages, ICCL ’98, 1998, pp. 153–162.
[19] K. Matsuzaki, Z. Hu, M. Takeichi, Parallelization with tree skeletons, in: Euro-Par 2003, Parallel Processing, 9th International Euro-Par
Conference, Proceedings, Vol. 2790 of Lecture Notes in Computer Science, 2003, pp. 789–798.
[20] A. Morihata, K. Matsuzaki, Automatic parallelization of recursive functions using quantiﬁer elimination, in: Functional and Logic Programming, 10th International Symposium, FLOPS 2010, Proceedings, Vol. 6009 of Lecture Notes in Computer Science, 2010, pp. 321–336.
[21] K. Matsuzaki, Parallel programming with tree skeletons, Ph.D. thesis, Graduate School of Information Science and Technology, The University of Tokyo (2007).
[22] K. Matsuzaki, Eﬃcient implementation of tree accumulations on distributed-memory parallel computers, in: Computational Science - ICCS
2007, 7th International Conference, Proceedings, Part II, Vol. 4488 of Lecture Notes in Computer Science, 2007, pp. 609–616.
[23] G. L. Miller, J. H. Reif, Parallel tree contraction, part 2: Further applications, SIAM Journal on Computing 20 (6) (1991) 1128–1147.
[24] K. Kakehi, K. Matsuzaki, K. Emoto, Eﬃcient parallel tree reductions on distributed memory environments, in: Computational Science ICCS 2007, 7th International Conference, Proceedings, Part II, Vol. 4488 of Lecture Notes in Computer Science, 2007, pp. 601–608.
[25] D. A. Bader, S. Sreshta, N. R. Weisse-Bernstein, Evaluating arithmetic expressions using tree contraction: A fast and scalable parallel
implementation for symmetric multiprocessors (SMPs) (extended abstract), in: High Performance Computing - HiPC 2002, 9th International
Conference, Proceedings, Vol. 2552 of Lecture Notes in Computer Science, 2002, pp. 63–78.
[26] G. E. Blelloch, J. C. Hardwick, J. Sipelstein, M. Zagha, S. Chatterjee, Implementation of a portable nested data-parallel language, Journal of
Parallel and Distributed Computing 21 (1) (1994) 4–14.
[27] G. Keller, M. M. T. Chakravarty, Flattening trees, in: Euro-Par ’98 Parallel Processing, 4th International Euro-Par Conference, Proceedings,
Vol. 1470 of Lecture Notes in Computer Science, 1998, pp. 709–719.

