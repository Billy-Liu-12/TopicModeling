Procedia Computer Science
Volume 51, 2015, Pages 1514–1523
ICCS 2015 International Conference On Computational Science

Multi-Scale Coupling Simulation of Seismic Waves and
Building Vibrations using ppOpen-HPC
Masaharu Matsumoto1 , Takashi Arakawa2 , Takeshi Kitayama1 , Futoshi Mori1 ,
Hiroshi Okuda1 , Takashi Furumura1 , and Kengo Nakajima1
1

2

The University of Tokyo, Tokyo, Japan
Research Organization for Information Science and Technology, Tokyo, Japan
matsumoto@cc.u-tokyo.ac.jp

Abstract
In order to simulate an earthquake shock originating from the earthquake source and the damage
it causes to buildings, not only the seismic wave that propagates over a wide region of several
100 km2 , but also the building vibrations that occur over a small region of several 10 m2
must be resolved concurrently. Such a multi-scale simulation is diﬃcult because such kind of
modeling and implementation by only a speciﬁc application are limited. To overcome these
problems, a multi-scale weak-coupling simulation of seismic wave and building vibrations using
“ppOpen-HPC” libraries is conducted. The ppOpen-HPC, wherein “pp” stands for “post-peta
scale”, is an open source infrastructure for development and execution of optimized and reliable
simulation codes on large-scale parallel computers. On the basis of our evaluation, we conﬁrm
that an acceptable result can be achieved that ensures that the overhead cost of the coupler is
negligible and it can work on large-scale computational resources.
Keywords: Multi-Scale Application, ppOpen-HPC Project, FDM-FEM Coupling Simulation, Earthquake

1

Introduction

Eﬃcient application codes suitable for supercomputer systems based on parallel processors
have become necessary for scientists and engineers who are not acquainted with high performance computing (HPC). Our research group has proposed an open-source infrastructure for
the development and execution of optimized and reliable simulation codes on large-scale parallel computers [1]. This infrastructure is named “ppOpen-HPC”, wherein “pp” stands for
“post-peta scale”. The ppOpen-HPC covers various types of procedures for scientiﬁc computations, such as parallel I/O of data-sets, matrix-formation, linear-solvers with practical and
scalable preconditioners, visualization, adaptive mesh reﬁnement, and dynamic load-balancing;
in addition, ppOpen-HPC can be used for various types of computational models. ppOpenAPPL is a set of libraries corresponding to each discretization method, such as ﬁnite-element
1514

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.341

Multi-Scale Coupling Simulation using ppOpen-HPC

Matsumoto, et al.

Figure 1: Schematic view of the coupling simulation of seismic wave and building vibration

method (FEM), ﬁnite-diﬀerence method (FDM), ﬁnite-volume method (FVM), boundary element method (BEM), and discrete element method (DEM); it is designed for execution on
future architectures as a part of the ppOpen-HPC.
On the other hand, the demand for multi-scale simulations will be met with the advent of
supercomputer systems. For example, in order to simulate an earthquake shock originating
from the earthquake source and the damage it causes to buildings, both the seismic wave that
propagates over a wide region of several 100 km2 , and the building vibrations that occur over
a small region of several 10 m2 must be resolved concurrently. Such a multi-scale simulation
is diﬃcult because such kind of modeling and implementation by only a speciﬁc application
are limited. To overcome these problems, in Earth sciences, multi-scale (and multi-physics)
simulations in which multiple applications are combined by a “coupler” [7, 5, 9] have attracted
attention recently. In particular, simulations of climate and Earth system models have been
conducted since the 1960s [8].
We have been developing ppOpen-MATH/MP [2] as a part of ppOpen-HPC. The ppOpenMATH/MP is a library for coupling simulation and connects applications of various discretization methods. In order to demonstrate applicability of ppOpen-MATH/MP, in this study, we
conduct a multi-scale weak-coupling simulation in which the FDM code (ppOpen-APPL/FDM)
suitable for the analysis of seismic (elastic) wave propagations and the FEM code (ppOpenAPPL/FEM) suitable for the analysis of dynamic solid mechanics (building) are coupled using
the coupler (ppOpen-MATH/MP). In this case, weak-coupling refers to one-way dataﬂow traﬃc
from FDM code to FEM code. This is because vibrations of buildings have a low impact on
seismic waves propagating from an earthquake source.

2

Numerical Model Description

The coupling simulation evaluated in the present study consists of two diﬀerent applications.
One is “Seism3D+” composed of the ppOpen-APPL/FDM library, and the other is “FrontISTR++” composed of the ppOpen-APPL/FEM library. We explain each component of the
coupling simulation in this section.
1515

Multi-Scale Coupling Simulation using ppOpen-HPC

2.1

Matsumoto, et al.

Seism3D+ : FDM Application for Seismic Wave Analysis

Seism3D+ (ppOpen-APPL/FDM) is an FDM application for seismic wave propagation analysis
[4]. In Seism3D+, velocity vectors and stress tensors on a uniform discretized computational
domain are updated explicitly using the following two equations. One is the equation of motion,
and the other is the diﬀerential equation of the stress tensor in an isotropic elastic medium.
ρ
∂σpq
=λ
∂t

∂vp
=
∂t

∂σxp
∂σyp
∂σzp
+
+
+ fp , (p = x, y, z)
∂x
∂y
∂z

∂vx
∂vy
∂vz
+
+
∂x
∂y
∂z

δpq + μ

∂vq
∂vp
+
∂q
∂p

, (p, q = x, y, z)

(1)

(2)

where, v, σ, ρ, f , λ, μ and δ are velocity, stress, density, body force, Lam´e’s ﬁrst parameter,
Lam´e’s second parameter, and Kronecker delta, respectively. The velocity and stress are updated explicitly by a leap-frog scheme, namely, the velocity- and stress-update, which are staggered so that velocity-update is conducted (by eq.(1)) midway during each time-step between
successive stress-updates (by eq.(2)). Furthermore, Seism3D+ has the following features: explicit time-marching scheme, uniform staggered grid, multidimensional design (2D, 3D), higherorder (4th, 8th) scheme, Fortran90/95 code, Message-Passing Interface/Open Multi-Processing
(MPI/OpenMP) hybrid parallelization, etc.

2.2

FrontISTR++ : FEM Application for Structural Analysis

FrontISTR++ (ppOpen-APPL/FEM) is an FEM application for nonlinear structural analysis
[6]. In FrontISTR++ using the dynamic analysis function, displacement vectors on each node in
a computational domain are updated implicitly by the spatially discretized equation of motion
as follows.
¨ + Cd˙ + Kd = F
Md
(3)
where, M, C, K, F and d are mass matrix, damping matrix, stiﬀness matrix, nodal load vector,
and nodal displacement vector, respectively. The displacement vector of eq.(3) is calculated by
a preconditioned iterative method and is updated by Newmark’s β method as step-by-step
integration method. Furthermore, FrontISTR++ has the following features: static/dynamic
analysis, explicit/implicit time-marching scheme, various linear solvers (preconditioned iterative
method: CG, GMRES, BiCGSTAB, GPBiCG, preconditioner: Jacobi, SSOR), management of
hierarchical assembly of mesh data, MPI/OpenMP hybrid parallelization, etc.

3

Coupler and Its Implementation to the Simulation

In the coupling simulation of seismic wave and building vibration, Seism3D+ and FrontISTR++
are connected by ppOpen-MATH/MP. In this section, we explain the characteristics of ppOpenMATH/MP and implementation of the coupling simulation.

3.1

ppOpen-MATH/MP : Coupler Library Connecting Applications
of Various Discretization Methods

ppOpen-MATH/MP is a coupler library that is applicable to various discretization methods
supported by the ppOpen-APPL libraries. The ppOpen-MATH/MP has wide applicability
because it is independent from grid structure and enables users to implement an arbitrary
1516

Multi-Scale Coupling Simulation using ppOpen-HPC

Matsumoto, et al.

Figure 2: Dataﬂow through the ppOpen-MATH/MP from component A to component B

interpolation code. In other words, it requires the correspondence table of grid points of both
applications used for interpolation calculation as input information. The ancillary grid mapping
tool for the construction of the correspondence table is also included in the library. The ppOpenMATH/MP is not an application but a library, so applications that connect the grid points
to each other need to call some functions in the application programming interfaces. This
means that the coupler is also executed in each application in which physical calculations are
performed. This speciﬁcation mitigates the overhead costs due to the additional execution
by coupler, and the decrease in execution eﬃciency of applications can be restricted to the
minimum that is required for running the application.
Figure 2 indicates the implementation of the dataﬂow algorithm of the ppOpen-MATH/MP
between two diﬀerent applications [3]. In this case, Component A and B shown in the ﬁgure
correspond to Seism3D+ and FrontISTR++, respectively. Although the ppOpen-MATH/MP
also has a function for multi-component data exchange for a full coupling simulation, we consider
the function of single component data exchange implemented in the present weak coupling
simulation code that is presented in this paper. First, when subroutine Put data is called in
Component A, data on all the grid points including the send data gets copied into a data buﬀer
allocated in the coupler of Component A. The send data is drawn from the data set in the buﬀer
and sent to Component B when subroutine Set time is called in Component A. The received
data is copied into a buﬀer allocated in Component B after the interpolation process, which
is performed in accordance with the correspondence table when subroutine Set time is called
in Component B; the data is drawn from the buﬀer and passed to the destination Component
B when subroutine Get data is called. The overhead costs to call the ppOpen-MATH/MP
in applications are attributed mainly to the following three factors: the size of message, the
number of variables, and the interpolation of grid points between applications. Obviously a large
message size causes the increase in MPI communication time, and an increase in the number of
variables related to MPI communication leads to a procedural delay of data processing in the
1517

Multi-Scale Coupling Simulation using ppOpen-HPC

Matsumoto, et al.

Figure 3: Overview of the coupling simulation of seismic wave and building vibrations (upper),
and the schematic view of the computational domain (lower)
coupler. Furthermore it tales long to interpolate grid points if complicated mesh models are
used in applications.

3.2

Implementation of the coupling simulation

As mentioned above, the weak coupling simulation, in which the dataﬂow is one-way traﬃc from
Seism3D+ to FrontISTR++, is implemented in this study as shown in Figure 3. In the simulation, multiple FrontISTR++ can be executed under a single execution of Seism3D+ because
the computational domain of Seism3D+ that is used to calculate seismic wave propagation in
the underground region is larger than that of FrontISTR++. Each computational domain of
Seism3D+ and FrontISTR++ has an overlapped region as shown in Figure 3. Seismic waves
calculated by Seism3D+ are induced from an earthquake source situated underground. When
the seismic wave reaches the boundary of an overlapped region, the coupler sends data to FrontISTR++ from Seism3D+ in accordance with the process depicted in Figure 2. FrontISTR++
sets the received data as the boundary condition. In Seism3D+, velocity vectors and stress tensors are calculated and updated as seismic waves. On the other hand, FrontISTR++ calculates
nodal displacement of grid points. Therefore, velocity values (in Seism3D+) are transformed
to displacement values (in FrontISTR++) in the coupler (ppOpen-MATH/MP) when a data
send is performed at the boundary. In the overlapped region, the seismic waves are calculated
separately in Seism3D+ and FrontISTR++. Furthermore, in Seism3D+, a structured grid with
a constant grid interval is used, whereas FrontISTR++ handles an unstructured grid with a
1518

Multi-Scale Coupling Simulation using ppOpen-HPC

Total grid points
MPI processes
OpenMP thread
Grid points/process
Grid interval
Timestep interval
Total grid points
MPI processes
OpenMP thread
Time interval

Matsumoto, et al.

Seism3D+
(x, y, z) = (512, 512, 512)
(x, y, z) = (4, 4, 4) = 64
16 threads/process
(x, y, z) = (128, 128, 128)
(Δx, Δy, Δz) = (40 m, 40 m, 40 m)
Δt = 1 ms
FrontISTR++
6 million
64 processes
16 threads/process
Δt = 0.2 ms

Table 1: Calculation conditions for performance evaluation
second order triangular element. The unstructured mesh used in FrontISTR++ includes not
only a building but also the ground, as shown in Figure 3. As is evident, the calculation results
in FrontISTR++ have no impact on the results in Seism3D++.

4

Performance Evaluation

To evaluate the performance of the coupler in the weak coupling simulation, test simulations are
performed under typical calculation conditions listed in Table 1. The evaluation is performed
on Oakleaf-FX supercomputer system (FUJITSU Supercomputer PRIMEHPC FX10) at the
University of Tokyo. Total MPI processes are 128 (Seism3D+: 64 processes, FrontISTR++: 64
processes), and in this case, Seism3D+ is assigned to the MPI ranks 0–63 and FrontISTR++
is assigned to the MPI ranks 64–127. The unstructured mesh of FrontISTR++ is in the shape
of an actual building that is situated at Port Island, Kobe, Japan. The unstructured mesh
used in FrontISTR++ is concentrated to the building region, so the timestep interval is shorter
than that in Seism3D+ even though FrontISTR++ uses an implicit time marching scheme. In
this case, FrontISTR++ (Δt = 0.2 ms) executes 5 times per one execution of Seism3D+ (Δt
= 1.0 ms). This interpolation for time propagation is also performed in the coupler. The data
sending of MPI communication is performed per one execution of Seism3D+, and the message
size of send/receive data is about 45 kbyte per one MPI communication. The message size is
determined by the surface area (i.e. the number of grid points) of the overlapped region in
Figure 3, the number of variables, and the data type of variables.
Figure 4 shows the breakdown for total execution time of Seism3D+ and FrontISTR++ in
the coupling simulation. In the left-hand side ﬁgure (Seism3D++), “init”, “update velocity”,
“coupler” and “update stress” denote the initialization, the kernel for velocity update (by
eq.(1)), the procedure of data sending by the coupler, and the kernel for stress update (by
eq.(2)), respectively. On the other hand, in the right-hand side ﬁgure (FrontISTR++), “init”,
“set matrix”, “coupler”, “set boundary”, “PCG solver” and “MISC” denote the initialization,
the setting of matrices in eq.(3), the procedure of data receiving by the coupler, the setting
of boundary condition by the received data, the calculation by preconditioned CG solver, and
the post treatment of simulation, respectively. In these ﬁgures, the time scale of vertical axis
diﬀers from each other. The total execution time of Seism3D+ (about 90 s) is signiﬁcantly
shorter than that of FrontISTR++ (about 1200 s) when these two applications are executed
1519

Multi-Scale Coupling Simulation using ppOpen-HPC

Matsumoto, et al.

Figure 4: Total execution time of Seism3D+ and FrontISTR++ in the coupling simulation

Figure 5: Execution time of the coupler in the coupling simulation

concurrently. Seism3D+ is located on the upstream part from a viewpoint of the dataﬂow in
the weak coupling simulation, and the message size is relatively small. Therefore the send data
is stored in an internal buﬀer of the MPI library, so that Seism3D+ can resume calculations
for subsequent tasks soon after sending the data and consequently synchronous requests during
data sending rarely occur. Moreover, the computational load of original Seism3D+ is smaller
than that of the original FrontISTR++, i.e., there is intrinsically no load-balance, owing to
which, the total execution time of Seism3D+ is short. However, Seism3D+ takes more execution cycles while running procedures on the coupler, and therefore, takes up a higher percentage
of the total execution time. In contrast, in FrontISTR++, the ratio of the procedure runtime
of the coupler to the total execution time is negligibly small. High performance of a coupler
indicates that the overhead cost is low. In this case, the obtained results are good because the
overhead cost of coupler is negligible in FrontISTR++ that takes longer to be executed.
Figure 5 shows the breakdown for execution time of the coupler in Seism3D+ and FrontISTR++. These ﬁgures correspond to “coupler” in Figure 4. The time scale of vertical axis
also diﬀers from each other. In the left-hand side ﬁgure (Seism3D+), “mpi waitall” represents
a high percentage of the execution time. This is because of a data collision when multiple
ranks of Seism3D+ try to send data to a speciﬁc rank of FrontISTR++. “data packing” corresponds to calling of subroutine Put data as mentioned in Sec.3.1. On the other hand, in
1520

Multi-Scale Coupling Simulation using ppOpen-HPC

Matsumoto, et al.

Figure 6: The simulation results of Seism3D+. The computational domain (left ﬁgure) and
time evolution of the displacement distribution (right ﬁgures: elapsed time 5 and 7 s from the
earthquake generation)

Figure 7: The simulation result of FrontISTR++. The deformation of a building at elapsed
time of 0 s and 15 s from the earthquake generation (left ﬁgure) and time evolution of the
displacement of x component at the building (right ﬁgure).
FrontISTR++, the data received is negligible. As mentioned above, the computational load of
FrontISTR++ is greater than that of Seism3D+, thus data receiving runs smoothly. “MISC”
in both ﬁgures includes the conversion of the velocity value in Seism3D+ to the displacement
value in FrontISTR++, the interpolation of grid points between Seism3D+ and FrontISTR++,
and the interpolation for time propagation as mentioned earlier.

5

Practical simulation on Fujitsu FX10

A practical simulation is executed on large-scale computational resources of Oakleaf-FX supercomputer system. The simulation target is the earthquake that occurred at Awaji Island on
13 April, 2013, and the seismic source is located at the central part of Awaji Island, Hyogo
prefecture, Japan. The computational domain of Seism3D+ is 60 km2 from Awaji Island and
that of FrontISTR++ is the actual building of RIKEN Advanced Institute for Computational
Science (AICS), Port Island, Kobe, modeled by an unstructured mesh. This building mesh is
1521

Multi-Scale Coupling Simulation using ppOpen-HPC

Matsumoto, et al.

placed on two locations of Port Island and Kobe stadium where ground conditions diﬀer from
each other. Total computational nodes on FX10 used in the simulation are 4560 nodes (16
cores / 1 node): 2560 nodes for Seism3D+ and 1000 nodes/1 places, which totals 2000 nodes
for FrontISTR++. The examples of simulation results are shown in Figure 6 and 7. Figure
6 show the computational domain of Seism3D+ and time evolution of the displacement distribution in areas around Awaji Island, and Figure 7 show the deformation of a building by
the earthquake and time evolution of the displacement of x component at the building. In the
simulation, seismic wave propagations (Seism3D+) for the simulation time of 90 s is calculated
in the computational time of approximately 6 h. The building vibrations caused by the seismic
wave (FrontISTR++) for the simulation time of 20 s is calculated in the computational time
of about 16 h. However, it was revealed that the manner in which memory allocation occurs in
the coupler has some problem when such a large-scale simulation is performed. This is because
a part of the initialization routine in ppOpen-MATH/MP includes a centralized procedure of
all MPI processes. A solution to this problem and code optimization will be performed as a
future work.

6

Concluding Remarks

The implementation of a multi-scale weak coupling simulation of seismic waves and building vibrations using ppOpen-HPC was introduced and a performance evaluation was conducted. Seism3D+ consisting of ppOpen-APPL/FDM library for seismic wave analysis and
FrontISTR++ with the ppOpen-APPL/FEM library for building vibration analysis are coupled using the ppOpen-MATH/MP coupler library. Through the evaluation, we achieved an
acceptable result that indicated that the overhead cost of the coupler is negligible in FrontISTR++, even though it takes longer to be executed. Finally, a practical simulation on the
Oakleaf-FX supercomputer was performed. Although more research needs to be conducted,
such a multi-scale coupling simulation will be important for numerical simulations on next
generation of large-scale computational environments.

Acknowkedgement
This work was conducted as a part of “Development of System Software Technologies for PostPeta-Scale High Performance Computing” funded by CREST, JST (Core Research for Evolutional Science and Technology, Japan Science and Technology Agency). Computational resource
of Fujitsu FX10 was awarded by “Large-scale HPC Challenge” Project, Information Technology
Center, The University of Tokyo.

References
[1] ppOpen-HPC project web site. http://ppopenhpc.cc.u-tokyo.ac.jp/.
[2] Takashi Arakawa, Takahiro Inoue, and Masaki Sato. Performance Evaluation and Case Study of
Coupling Software ppOpen-MATH/MP. Procedia Computer Science, 29:924–935, 2014.
[3] Takashi Arakawa, Hiromasa Yoshimura, Masaki Sato, and Koji Ogochi. Data Exchange Algorithm
and Software Design of KAKUSHIN Coupler Jcup. Procedia Computer Science, 4:1516–1525, 2011.
[4] T. Furumura and L. Chen. Parallel Simulation of Strong Ground Mothions during Recent and
Historical Damaging Earthquakes in Tokyo, Japan. Parallel Computing, 31:149–165, 2005.

1522

Multi-Scale Coupling Simulation using ppOpen-HPC

Matsumoto, et al.

[5] Chris Hill, Cecelia Deluca, Balaji, Max Suarez, and Arlindo Da Silva. The Architecture of the
Earth System Modeling Framework. Computing in Science & Engineering, 6:18–28, 2004.
[6] Hiroshi Okuda. Nonlinear Structural Analysis Open Software FrontISTR. http://www.ciss.iis.
u-tokyo.ac.jp/riss/english/project/structure/FISTR_JE_1303.pdf, 2012.
[7] R. Redler, S. Valcke, and H. Ritzdorf. OASIS4 - a coupling software for next generation earth
system modelling. Geoscientiﬁc Model Development, 3:87–104, 2010.
[8] Warren M Washington, Lawrence Buja, and Anthony Craig. The computational future for climate
and Earth system models: on the path to petaﬂop and beyond. Philosophical Transactions of the
Royal Society A, 367:833–846, 2009.
[9] Mi Yan, Kirk Jordan, Dinesh Kaushik, Michael Perrone, Vipin Sachdeva, Timothy J. Tautges, and
John Magerlein. Coupling a Basin Modeling and a Seismic Code using MOAB. Procedia Computer
Science, 367:986–993, 2012.

1523

