Procedia Computer Science
Volume 29, 2014, Pages 637–647
ICCS 2014. 14th International Conference on Computational Science

Identifying Self-Excited Vibrations with
Evolutionary Computing
Christiaan D. Erdbrink1,
1

2, 3*

and Valeria V. Krzhizhanovskaya1,

2, 4

University of Amsterdam, Amsterdam, The Netherlands
2
ITMO University, Saint Petersburg, Russia
3
Deltares, Delft, The Netherlands
4
Saint Petersburg State Polytechnic University, Russia
chriserdbrink @gmail.com, v.krzhizhanovskaya@uva.nl

Abstract
This study uses differential evolution to identify the coefficients of second-order differential equations
of self-excited vibrations fro m a time signal. The motivation is found in the ample occurrence of this
vibration type in engineering and physics, in particu lar in the real -life problem of v ibrations of
hydraulic structure gates. In the proposed method, an equation structure is assumed at the level of the
ordinary differential equation and a population of candidate coefficient vectors undergoes
evolutionary training. In this way the numerical constants of non-linear terms of various self-excited
vibration types were recovered fro m the time signal and the velocity value only at the initial t ime.
Co mparisons are given regarding accuracy and computing time . Dependency of the test errors on the
algorith m parameters is studied in a sensitivity analysis. The presented evolutionary method shows
good promise for future applicat ion in engineering systems, in particular operational early -warning
systems that recognise oscillations with negative damping before they can cause damage.
Keywords: evolutionary computing, system identification, self-excited vibrations, differential evolution

1 Introduction
This paper exp lores the use of evolutionary co mputing (EC) for the identificat ion of vibration
types appearing in many problems in physics and engineering. As an illustrative examp le, we consider
the flow-induced vibrations of large gates of hydraulic civ il engineering structures, such as flood
barriers and weirs. In particular, self-excited vib rations have been found to be a cause of threatening
dynamic forces associated with flu id-structure interactions between the discharge-controlling gates
and the turbulent flow moving past them (Kolkman 1976).
*

Corresponding author, alternative email addresses: c.d.erdbrink@uva.nl and christiaan.erdbrink@deltares.nl

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2014.05.057

637

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

Like most flow-induced vibrations, gate dynamics can be suitably investigated by modelling the
suspended gate body as a one degree-of-freedom mass-spring oscillator (Blevins 1990) wh ich is
classically described by second-order ordinary differential equations (ODEs). For oscillat ing objects
submerged in water, the coeffic ients –representing mass, damp ing and stiffness– have additional
hydraulic co mponents (Naudascher & Rockwell 1994), which can only be estimated by dedicated
studies under specific conditions that are typically absent in real-life scenarios.
Self-excited or ‘self-induced’ vibrations are widely studied because they describe many problems
in engineering and physics . They are also analytically and numerically interesting objects of study
(Verhulst 1996). Th is vibration type is defined by the driving force comin g fro m the displacement of
the oscillat ing body itself (Den Hartog 1956). That is, a self-sustained system exists without the need
for external forcing. New energy is fed into the system through negative damping. The first two
columns in Fig.1 show quintes sential self-excitation cases: a negative damp ing constant and the Van
der Pol oscillator. The latter famous example has a non -linear damp ing term and for h igh enough
values of the parameter P, so-called ‘relaxat ion vibrations’ occur which show sudden transitions with
short mo ments of high velocity at certain parts of the period. The third examp le in the right colu mn of
Fig.1 shows an undamped oscillat ion with a non-linear mass term. A standard way of depicting nonlinearities is in the phase-plane; a deformed limit cycle is usually a good telltale of non -linear
behaviour.
࢟ሷ െ ࢉ࢟ሶ ൅ ࢟ ൌ ૙

࢟ሷ െ ࣆሺ૚ െ ࢟૛ሻ࢟ሶ ൅ ࢟ ൌ ૙

ࢌሺ࢟ሻ࢟ሷ ൅ ࢑࢟ ൌ ૙

Phase plane

Time domain

ODE

Figure 1: Vibration examples shown in time domain (upper row) and in phase plane (lower row). Left
column: constant negative damping; middle column: non-linear damping by Van der Pol oscillator; right column:
non-linear mass term. The corresponding ODE equations are written on top; y is the vertical displacement of the
mass. The initial states are indicated by thick dots.

Returning to the example of gates of hydraulic structures, identification of negative damping is the
engineer’s chief concern. Due to structural limitations, however, amplitudes do not grow boundlessly

638

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

(Blevins 1990); this gives rise to a certain f(y) in the damp ing term. Non-linear effects were observed
in several laboratory studies of gate vibrations (Billeter & Staubli 2000).
Spectral analyses of gate motion or fo rce signals that are co mmonly carried out do not detect such
non-linearities and, arguably as a result of this, are not good tools for predicting the occurrence of self excited vibrat ions with dangerously high dynamic forces on the structure. Furthermore, previous
research has shown that the complex interactions between the moving structure and the turbulent flow ,
as observed in physical scale models , are not fu lly and readily captured by physics -based numerical
simu lations (Erdbrink et al. 2014a). Other prev ious work includes the outline of a data -driven system
for classicification and avoidance of gate vibrations by combin ing spectral analysis and machine
learning (Erdbrink et al. 2013) and mu lti-scale simu lations of flow impact on hydraulic structures
(Erdbrink el al. 2014b).
The aim of our present study is to devise and test a computational method that solves the inverse
problem of identifying self-excited vibrations fro m only a d isplacement (output) signal y(t), that is
without using a force (input) signal. This has to be done in a way that permits speed-up to practical
time frames for real-world operational early-warning systems.
System identification studies embarked on the task of inferring ODE models a few decades ago
(Åström & Ey khoff 1971). Ho wever, the fixed structure acting as a vehicle for the parameter
optimization was usually not an ODE itself, but rather an easy -to-compute basis function like a
polynomial. The advent of modern heuristics (Rothlauf 2011) and the steady increase in computing
power has enormously boosted possibilities for regression of all kinds (e.g. by artificial neural
networks), but many techniques do not provide clear insights into the working of the system. A
breakthrough came with the b irth o f genetic programming (GP) by Koza (1992), wh ich has been
applied intensively to system identification problems ever since (Bongard & Lipson 2007). Genetic
programming, part of the evolutionary algorithms family, proved to be ideal fo r e volv ing the
underlying equation structures by means of symbolic regression, e.g. Babovic & Keijzer (2000) .
Schmidt & Lipson (2009) elegantly demonstrated the power of GP fo r identify ing non -linear
dynamical systems by discovering physical laws and function s automatically from experimental data.
In our study it will be assumed that the main part of the structure is already known , this is the basic
second order ODE that holds for all v ibrations without external forcing. The search for the remaining
unknown non-linear terms could benefit fro m symbolic modelling, but we choose to focus on finding
only the coefficients for a number of reasons. First, we are interested in developing a co mputationally
efficient tool for quick assessment that is more easily usable in early-warn ing systems. Second, in
many practical situations, such as the vibrations in this study, only a reduced number of hypotheses for
equation structure exist thanks to domain expertise input. The third reason is that in the development
of GP, the problem of determin ing non-trivial nu merical constants (i.e. coefficients) is often
overlooked. Lastly, the chosen differential evolution (DE) method facilitates a future extension of the
algorithm to GP-based system identification, as the algorithmic set-up is similar.

2 Methodology
We use the evolutionary algorith m DE to optimise the coefficients of second-order ODEs with the
goal of identify ing self-excited and non-linear v ibrations. Differential evolution is a co mpetitive
derivative-free meta -heuristic global optimization method (Storn & Price 1997). It has a natural
robustness that makes it stand out fro m earlier EC methods , such as genetic algorith ms. Its
performance has grown by several improvements (Das & Suganthan 2011), most notably the use of
dynamic control parameters. We apply a recent version of DE by Choi et al. (2013) that has selfadaptive control parameters which are varied by drawing fro m the Cauchy distribution. The pseudocode of the algorithm is given below.

639

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

Initialization
-Initialize population of NP vector individuals X1,G, … , XNP,G where Xi,G = [x1,i,G, x 2,i,G, … , x C,i,G] and where C
is the number of coeffic ients that are being evolved, G the generation (G = 0, ... , G max ). Entries x j,i,0 are
uniformly random from [-1,1] for i = 1, … , NP and j = 1, … , C.
-Initialize control parameters CRi,0 = 0.25, Fi,0 = 0.6 (acc. to Choi et al. 2013) and adaptation parameters
CRavg,0 = CRi,0 and Favg,0 = Fi,0
-Generate target data y(t), y’(t) and divide into training and test sets.
FOR R = 1 to Rmax DO
% run loop
% generation loop
FOR G = 1 to G max DO
FOR i = 1 to NP DO
% individuals loop
Main loop: Differential Evolution
-Determine fitness f(Xi,G) of individuals (see routine)
-Mutation: generate a mutant vector Vi,G = Xr1 + Fi,G*(Xr2 – Xr3) from three donor vectors Xr1, Xr2, Xr3
randomly selected from the individuals of generation G-1.
-Crossover: generate a trial vector Ui,G composed of uj,i,G (j = 1, … , C) by applying the rule IF
rand[0,1] ≤ CRi,G-1 OR j = j rand THEN uj,i,G = vj,i,G , ELSE uj,i,G = x j,i,G-1 , where j rand is a random integer
1 ≤ j rand ≤ C and vj,i,G is an entry of Vi,G.
-Selection: determine fitness f(Ui,G) of trial vectors. IF f(Ui,G) ≥ f(Xi,G-1) THEN Xi,G = Ui,G and inherit
associated fitness and control parameters, ELSE Xi,G = Xi,G-1 and leave fitness and control
parameters unchanged.
END FOR
-Update control parameters Fi,G and CRi,G by adding a randomly drawn number from the Cauchy
distribution Ca(0,0.1) to the mean value of the control parameters of all successfully evolv ed vectors.
Truncate if necessary.
-Replace a non-fittest individual by a new ly generated individual.
END FOR
Post analysis
Compute test error of run R by solving the ODE w ith the winning set of coeffic ients and determining the
mean absolute error of all predicted values compared to the test values.
END FOR
Compute mean duration and mean and min of test errors of all runs R…Rmax .
Fitness computation
-Insert the coefficients of each candidate vector in the fixed, assumed ODE equation structure.
-Apply Runge-Kutta, with adaptiv e step-size and predetermined relative error tolerance for numerical
integration.
-Fitness := -1*MAE*penalty, w here MAE is the mean absolute error of the training data compared to the
result from solving the ODE w ith candidate coefficients. The penalty punishes candidate models for which
the integration failed to determine values at all training times, penalty := ((size of training set – size of
candidate set) / size of candidate set)*100 and penalty = 1 if the integration w as completely successful.

The generated synthetic data set is randomly d ivided into a training set and a test set, based on a
chosen percentage of data to be used for training. After the evolution has ended, the unseen target
points are used to quantify the predictive power of the candidate model by computing a test error.
In order to co mpare the test errors of different target data sets, we normalize the mean absolute test
error (MAE) as follows:
ଵ
௬ො ି௬ത
௬ ି௬ത
ଵ
ܰ‫ ܧܣܯ‬ሺ ࢟
ෝǡ ࢟ሻ ؔ σ௡௜ୀଵ ฬ ೔ െ ೔ ฬ ൌ
௡

ఙ೤

ఙ೤

ଵ

௡ ఙ೤

σ௡௜ୀଵ ȁ‫ݕ‬ො௜ െ ‫ݕ‬௜ ȁ ൌ

ெ஺ா ሺ࢟
ෝ ǡ࢟ሻ
ఙ೤

ǡ

(1)

where ࢟
ෝ contains the predictions and ࢟ the target values for testing, ‫ݕ‬ത is the mean of ࢟ and ߪ௬ is
the standard deviation of ࢟. All results in the figures and in the table of this paper are given as
normalized mean absolute test errors (NMAE).
The computations were done unparallellized on a single Intel i7 processor, 2.93 GHz, 8 Gb RAM.

640

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

3 Numerical experiments set-up
The numerical experiments consist of three parts: a validation case, the self-excited cases and a
sensitivity analysis. The results are reported in Sections 4.1 to 4.3.
The case of forced vibrations for a linear system with constant coefficients is used for validation:
݉‫ݕ‬ሷ ൅ ܿ‫ݕ‬ሶ ൅ ݇‫ ݕ‬ൌ ‫ܨ‬଴ ሺ߱‫ݐ‬ሻ ǡ

(2)

where y is the displacement, t is time (the independent variable) and all other sy mbols are physical
constants. Newtonian notation is used for time derivatives. Together with the real-valued in itial
conditions ‫ݕ‬଴ and ‫ݕ‬ሶ଴ , equation 2 constitutes an initial value problem that will be solved in two ways:
(i) non-linear regression on the analytical solution and (ii) regression on a fixed ODE structure:
The first approach uses the sum of the general and particular solution of fo rced vibration with
viscous damping as an assumed equation structure:
‫ ݕ‬ሺ‫ݐ‬ሻ ൌ ‫ܥ‬ଵ݁ ஼మ௧ ሺ ‫ܥ‬ଷ ‫ ݐ‬൅ ‫ܥ‬ସ ሻ ൅ ‫ܥ‬ହ ሺ ‫ ݐ ଺ܥ‬൅ ‫ ଻ܥ‬ሻ ǡ ‫ܥ‬௜ ‫ א‬Թ

(3)

The second approach stays at the level of ODE:
‫ܥ‬ଵᇱ ‫ݕ‬ሷ ൅ ‫ܥ‬ଶᇱ ‫ݕ‬ሶ ൅ ‫ܥ‬ଷᇱ ‫ ݕ‬ൌ ‫ܥ‬ସᇱ ሺ ‫ܥ‬ହᇱ ‫ݐ‬ሻ ǡ‫ݕ‬଴ ൌ ‫଺ܥ‬ᇱ ǡ‫ݕ‬଴ሶ ൌ ‫଻ܥ‬ᇱ ǡ ‫ܥ‬௜ᇱ ‫ א‬Թ

(4)

For both approaches, the coefficients are init ialized randomly between -1 and 1. They are stored in
a seven-dimensional vector and optimized via DE, as described in the pseudo -code in Section 2. A
variation of the second approach where only five coefficients are evolved is also considered, where the
initial conditions (IC) are assumed known.
Practically all non-linear v ibration problems defy fu ll analytical t reat ment, so there is no closed form equation available fo r y(t). For these problems we work with the ODE structure ݉‫ݕ‬ሷ ൅ ܿ‫ݕ‬ሶ ൅
݇‫ ݕ‬ൌ Ͳ, where mass m or damp ing c are replaced by a first or second order polynomial term in y to
account for the non-linearity. The results of this are summarised in Section 4.2. Also, a non-linear
mass system and a system with time-vary ing stiffness (Mathieu equation) are examined. These are all
unforced oscillators where chaos does not play a role.

4 Results
4.1 Validation: Forced vibrations with constant coefficients
The following target function is defined for the validation runs:
ʹǤͷ‫ݕ‬ሷ ൅ ͲǤ͵ͷ‫ݕ‬ሶ ൅ ͲǤ͵‫ ݕ‬ൌ ͵ǤͲሺʹǤʹ‫ݐ‬ሻ, with initial conditions ‫ݕ‬଴ ൌ Ͳǡ ‫ݕ‬ሶ଴ ൌ ͲǤʹͷ.

(5)

Fig.2 (left) shows the sampled target data-set and an example of a candidate solution. The total
data set consists of 465 points, meets the Nyquist criterion, and is split in train ing and test data in
different ratios (in Fig.2. half of the data are train ing points, and half are test points). Population size
was set at 80, and 250 generations were computed.

641
641

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

Figure 2: Differential Evolution applied to regression on the signal of a forced vibration. Left: the target data.
In this example 50% of the data is used for training. Right: The best-so-far fitness of three runs, for an assumed
structure of the analytical solution and for the ODE structure.

The right plot in Fig.2. shows three examples of how the solutions improved with generations. The
two applied expression structures were laid out in the previous section, the only necessary addition is
that the fitness evaluation of the analytical solution structure runs differs fro m the pseudo -code in
Section 2 because there is no need to solve an ODE; the candidate values follow right away after
substitution in the assumed y(t) expression.
The resulting coefficients reflect the multimodality of this optimizat ion problem, since for examp le
sin(t) = sin(t+2S). It was generally found that the less successful computed functions capture the lowfrequency damped free vibration quite well, but give a rather poor estimate of the forced vibration.
Figure 3 below gives an overview of the results based on 10 runs per plotted point. The p lot on the
left gives test errors expressed as NMAE, according to equation 1. The plot on the right shows the
average runtime in seconds.

Figure 3: Results of evolving the forced vibration based on analytical solution structure and ODE structure as
a function of the percentage of data used for training. Left: test errors (NM AE); right: computing time. IC stands
for initial conditions, P stands for pop ulation size. Every point represents an average of 10 runs, for an evolution
of 250 generations with a population of 80; except for the ODE with initial conditions, for which only five
lengthy runs were made for each training data set.

642
642

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

The plots show that the analytical structure requires the least computation time, but it is
significantly less accurate than the ODE structure with five evolved coefficients where the initial
conditions are known (“ODE without IC”). The analytical structure is more accurate than the ODE
case that also evolves the two init ial conditions (“ODE with IC”). An attempt to reduce the
computation time for the ODE structure by using a smaller population of 40 (“ODE without IC,
P=40”) resulted in higher test errors and computation times comparable to the analytical runs. The
results show that including or excluding the two in itial condit ions makes no difference for
computation time. Additionally, the validation proves that there is litt le overall dependence on the
percentage of data used for training. The test errors are only slightly worse when less than 40% of the
data is used for training. Co mputational factors related to the convergence of the DE algorithm and the
ODE solution process are apparently dominant. In particu lar, it was found that the settings of relative
tolerance that determine the number of iterations of the ODE solver during the error co mputation have
a profound influence on the standard deviation of the achieved total runtimes .

4.2 Self-excited vibrations
Table 1 shows the results of computing coefficients for various self-excited vibrat ions. All
computations had a population of 50 individuals with 120 generations computed, and used 50% of 500
data points for training, and the remainder for testing. For each case the mean an d standard deviation
of the NMAE test error is computed over 25 evolutionary runs.

Vibration
linear, constant coeff.*
Negative damping

Standard
deviation of
NM AE

Target ODE

#C

Average of
NM AE

ʹǤͷ‫ݕ‬ሷ ൅ ͲǤ͵ͷ‫ݕ‬ሶ ൅ ͲǤ͵‫ ݕ‬ൌ ͵ǤͲሺʹǤʹ‫ݐ‬ሻ

5

39.2∙10-3

69.5∙10-3

‫ݕ‬ሷ െ ͲǤͳͶ͵Ͷ‫ݕ‬ሶ ൅ ‫ ݕ‬ൌ Ͳ

1

3.44∙10-3

0.89∙10-18

2

3.07∙10-3

1.77∙10-18

3**

3.23∙10-3

1.88∙10-3

Non-linear damping

‫ݕ‬ሷ ൅ ሺെͲǤͶͷͲ ൅ ʹǤ͹ʹͺ‫ ݕ‬൅ ͳǤͻͲ͵‫ݕ‬ଶሻ‫ݕ‬ሶ ൅ ‫ ݕ‬ൌ Ͳ

3

287∙10-3

373∙10-3

Van der Pol oscillator

‫ݕ‬ሷ െ ͳǤʹʹͳͺሺͳ െ ‫ ݕ‬ଶሻ‫ݕ‬ሶ ൅ ‫ ݕ‬ൌ Ͳ

2

3.13∙10-3

0.42∙10-3

3

3.26∙10-3

0.82∙10-3

ሺͳǤ͹ͳʹͲ െ ͳǤͶͺͳͷ‫ ݕ‬൅ ͲǤͶͻͲ͵‫ݕ‬ଶሻ‫ݕ‬ሷ ൅ ‫ ݕ‬ൌ Ͳ

3

3.28∙10-3

0.0776∙10-3

‫ݕ‬ሷ ൅ ሺͲǤʹͷ ൅ ͲǤ͵ͶሺʹǤͳͺ‫ݐ‬ሻሻ‫ ݕ‬ൌ Ͳ

3

70.8∙10-3

25.9∙10-3

Non-linear mass
Mathieu equation***

Table 1: Computation results based on normalized mean absolute error (NM AE). #C denotes the number
of evolved coefficients. For each case, 25 runs of 120 generations were done with a population size of 50,
using 250 training points and 250 test points.
* Based on the ODE-runs with 50% training data and without evolving initial conditions.
** Only three runs were made due to poor convergence of ODE solver.
*** The M athieu equation describes not self-excited but parametrically excited vibrations.

The results in Table 1 show that the constant negative damping an d non-linear mass cases have
low test errors co mpared to the validation case of the forced linear vibrat ion with constant coefficients.
Moreover, their test errors show very little variation. For the negative damp ing case, it makes no
difference whether the constant coefficient is found using a single coefficient, C1 , or a linear term with
two coefficients, C1 +C2 y, or a second-order polynomial term with three coefficients , C1 +C2 y+C3 y2 .
Similarly, the Van der Po l oscillator shows a small, insignificant deterio ration when a linear term is

643
643

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

added to the C1 +C2 y2 term that is strictly required. The poor result for the non-linear damping case is
due to suboptimal convergence of eight runs out of 25. Exten ding the runs to more generations will
most likely imp rove the mean NMA E. The same can be said of the Mathieu equation, which belongs
to a distinctly different class of parametrically excited vibrations.
The test errors of the best runs are plotted in Fig. 4 as function of their computation times.The
errors are the minima of the NMA E values of the 25 runs for the vibrations mentioned in Table 1.
There are two outliers: the negative damping evolved with a polynomial term took much longer to
compute and the best run for the Mathieu equation is significantly less a ccurate. It is remarkab le that
the best non-linear damping run is slightly better than the other non-linear cases.

Figure 4: The best achieved test errors (NM AE) out of 25 runs as function of the computing time of the best
runs for the cases listed in Table 1. The numbers inside the figure denote the number of evolved coefficients.

4.3 Sensitivity analysis
A sensitivity analysis was done to study the effect o f d ifferent population sizes, nu mber of
generations and tolerance settings of the ODE solver. The results are summarized in Fig. 5. The test
errors are NMAE values over 25 runs, as defined in equation 1.

Figure 5: Sensitivity analysis results. Left: sensitivity on population size and number of generations showing
normalized mean absolute errors (NM AE) of 25 runs. Right: sensitivity of test error (NM AE) on tolerances of
ODE solvers for computing fitness values (“evaluation tolerance”) and test errors (“testing tolerance”). On the
axes, “1e-2” means 10-2, etc. and the grey scale refers to base-10 logarithms of NM AE values.

644
644

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

The sensitivity analysis is based on the three-dimensional optimization problem of finding the
coefficients of an unforced vibration with non-linear damping term -0.4501+1.0283y+1.903y 2 . The
results show that a population size of 50 yields much better results than a population size o f 25 (Fig. 5,
left), and 100 generations score far better than 50 generations. Further increases in population size and
generations give considerably smaller improvements.
The right plot of Fig. 5 shows the effect of d ifferent comb inations of termination settings for the
numerical integration algorith m used for computing errors of the candidate ODE models (“evaluation
tolerance”) and of the winning model (“testing tolerance”). Unsurprisingly, stricter (lower) tolerances
lead to mo re accurate results (“-4” in the colo rbar refers to a NMAE value of 10-4 , etc.). The worst
results occur for a strict evaluation tolerance in combination with a coarse testing tolerance.
Furthermore, it is seen that relatively low test errors are found if the relative tolerance of the ODE
solver for evaluation and testing are the same. Of course we need to realize that the lo wer the
evaluation tolerance, the longer on average the runs are likely to be and that the testing tolera nce
should always be relatively strict in order to make a fair judg ment. Based on these observations, a
relative evaluation tolerance of 10-3 and a testing tolerance of 10-5 were chosen for the simulat ions in
Sections 4.1 and 4.2.

5 Discussion
The evaluation accuracy of the candidate models depends on the numerical integration method.
Apart from the choice of integration algorith m, the tunable parameter here is the (relative) residual
error. A stricter integration error setting results in longer co mputation t ime and without further
protection even occasionally crashes, but if the ODEs are solved too coarsely, pro mising candidates
may not co me out on top. The sensitivity analysis in Section 4.3 can be seen as a preliminary study for
this issue. It is not surprising that the impact of the ODE solver settings on the solution accuracy also
depends on the complexity of the displacement signal, in particular its degree of non -linearity.
Ult imately, the dilemma lies in optimizing the integration scheme for specific problems, or
maintaining robustness – at the cost of longer total computation times. Solving this dilemma involves
judgment of stiffness of the worst possible candidate (e.g. for h igh P Van der Pol cases). See
Quateroni et al. (2010) for a treatment of different ODE solvers in MATLAB.
An important observation is that achieving a low test error is not synonymous with finding values
close to the original coefficients of the target motion equation. This is due to the mult imodality, or one
could say ambiguity of the problem. The undamped natural frequency, for instance, is a function of the
ratio of stiffness k and mass m, which can be ‘found’ by innumerable co mbinations of k and m. Ways
to (partly) overco me ambiguous solutions in practice are a prio ri in jection o f knowledge about the
physical domain and normalization (e.g. it is co mmon to divide all terms by the mass coefficient). In
fact, in real-life applicat ions there is usually information availab le about parameter ranges. Estimates
of the stiffness in a physical system, for instance, would lead to a constraint on the stifness coefficient,
transforming the free optimization p roblem into a constrained optimization p roblem. The new
developments in automated discovery of physical laws do not exempt scientists fro m their duty of
making thorough interpretations of the results (as also noted by Schmidt & Lipson 2009). If this
remains an important task anyway, then domain knowledge might just as well be applied beforehand,
thus avoiding a search through a multitude of unrealistic candidate solutions.
Other methods that infer ODEs may not suffer fro m a large co mputational load of solving
candidates, but they often have other disadvantages worth mentioning. So me GP approaches for
evolving dynamical systems perform training in the y’(t) domain. This means that the original time
series first has to be differentiated fu lly, which is not a trivial task due to noise present in real-life data
(see Kronberger 2011). In this study it was only assumed that the init ial values are known, in other
words, the velocity is required only at the time of the first training point. Other approaches may use

645
645

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

structures that are easily computable, such as the discrete map used by Howard & Oakley (1994), but
may provide insufficient insight in the system because the resulting exp ression has a format that is not
easily interpreted. To be ab le to write the end result in the familiar ODE form is a necessary condition
for serving engineering applications .

6 Conclusions and outlook on future work
The reverse engineering problem of finding the ODE exp ression of self-excited vibrations appears
in innu merous applications. Particularly interesting is the idea of quick assessment of different
vibration types. This enables operational and early-warn ing systems to recognise undesired vibrations
in engineering installations before they inflict damage.
In this paper it was examined how the differential evolution algorith m can be applied to identify
several vibration types by performing regression on the ODE that describes the displacement. The
relatively simple case of a linear forced vib ration allowed a co mparison between using the analytical
solution structure and an ODE structure. Irrespective of the percentage of available training data, the
ODE structure produced more accurate results, but required significantly mo re co mputational time
than the analytical solution, under the condition that the initial velocity is known. Next, a number of
self-excited oscillations was identified, yielding reasonably accurate results. The presence of
superfluous non-linear terms proved to have an influence on the achieved computation times , but not
directly on test errors. A sensitivity analysis exposed the impact of the tolerance settings of the ODE
solver.
Ongoing work is looking at ways to use information fro m the frequency domain of the target data
in the population, an idea found in Howard & Oakley (1994). A lso, it should be studied more deeply
how the degree of non-linearity affects the accuracy. The algorithm could furthermore benefit fro m
fitness prediction as used by Schmidt & Lipson (2009), with the goal of speeding up and improving
the evolution. A third point of attention for future work is to see wh ic h of the existing ‘n iching’
methods for mult imodal optimization are useful for the identification of vibrations. And finally, the
algorithm will be applied to the sensor data from experiments with hydraulic gate vibrations.

Acknowledgements
This research is supported by the Leading Scientist Program of the Russian Federation, contract
11.G34.31.0019 and by the "5-100-2020" Programme of the Russian Federation, Grant 074-U01.
Christiaan Erdbrink acknowledges the support by Deltares.

References
Åström, K.J., Eykhoff, P. (1971). System identification – a survey. Automatica, Vol.7, pp.123-162.
Babovic, V., Keijzer, M. (2000). Evolutionary algorithms approach to induction of differential
equations. In: Proc.of the 4th Int. Conf. on Hydroinformatics, Iowa City, USA, pp.251-258.
Billeter, P., Staubli, T. (2000). Flow-induced multiple-mode vibrations of gates with submerged
discharge. J. of Fluids and Structures, Vol. 14, pg. 323-338.
Blevins, R.D. (1990). Flow-induced vibration. 2nd ed. Krieger Publ. Co., Malabar, Florida, USA.
Bongard, J., Lipson, H. (2013). Automated reverse engineering of nonlinear dynamical systems.
PNAS, Vol.104, No.24, pp.9943-9948.

646
646

Identifying Self-Excited Vibrations with Evolutionary Computing C. Erdbrink, V. Krzhizhanovskaya

Choi, T.J., Ahn, C.W., An, J. (2013). An adaptive Cauchy differential evolution algorithm for
global numerical optimization. The Scientific World Journal, Vol. 2013, Article ID 969734,
http://dx.doi.org/10.1155/2013/ 969734.
Das, S., Suganthan, P.N. (2011). Differential Evolution: a survey of state-of-the-art. IEEE
Transactions on Evolutionary Computation, Vol.15, No.1, pp.4-12.
Den Hartog, J.P. (1956). Mechanical vibrations. Dover Publ., Inc., New York, USA.
Erdbrink, C.D., Krzhizhanovskaya, V.V., Sloot, P.M .A. (2013). Controlling flow-induced
vibrations of flood barrier gates with data-driven and finite-element modelling. In: Co mprehensive
Flood Risk Management: Research for Po licy and Practice. Klijn & Schweckendiek (eds). CRC Press
2013,
ISBN
978-0-415-62144-1,
eBook
ISBN
9780203374511.
http://www.crcp ress.com/product/isbn/9780415621441,
http://www.amazon.co m/Co mp rehensiveFlood-Risk-Management-ebook/dp/B00CLGI3NW, pp. 425-434.
Erdbrink, C.D., Krzhizhanovskaya, V.V., Sloot, P.M .A. (2014a). Reducing cross-flow vibrations of
underflow gates: experiments and numerical studies. Submitted to Journal of Fluids and Structures,
http://archiv.org/abs/1312.7868.
Erdbrink, C.D., Krzhizhanovskaya,V.V., Sloot, P.M.A. (2014b). Free-surface flow simulations for
discharge-based operation of hydraulic structure gates. Journal of Hydroinformatics, Vo l.16, no.1,
pp.189-206, http://dx.doi.org/10.2166/hydro.2013.215, DOI: 10.2166/hydro.2013.215
Howard, E., Oakley, N. (1994). The application o f gen etic prog ra mming to the investigation o f
short , noi sy, chaotic data series. In : Evo lut ion ary Co mput ing , Lecture Notes in Co mputer Science,
Vol.865, pp.320-332.
Kolkman, P.A. (1976), Flow-induced gate vibrations. PhD thesis Delft University of Technology.
Also publication 164 of Delft Hydraulics Laboratory (at present Deltares).
Koza, J.R. (1992). Genetic Programming: on the programming of computers by means of natural
selection. MIT Press, Cambridge, MA.
Kronberger, G. (2011). Sy mbolic regression for knowledge discovery. PhD thesis Johannes Kepler
university, Linz, Austria. Trauner Verlag, Linz, Autria.
Naudascher, E., Rockwell, D. (1994). Flow-induced vibrations – an engineering guide. Dover
publications, New York.
Quateroni, A., Saleri, F., Gervasio, P. (2010). Scientific computing with MATLAB and Octave. 3rd
ed., Springer-Verlag Berlin Heidelberg.
Rothlauf, F. (2011). Design of modern heuristics. Natural computing series, Springer-Verlag
Berlin Heidelberg.
Schmidt, M., Lipson, H. (2009). Distilling free-form natural laws from experimental data. Science,
Vol.324, no. 5923, pp.81-85, DOI: 10.1126/science.1165893.
Storn, R., Price, K. (1997). Differential Evolution – A simple and efficient heuristic for global
optimization over continuous spaces. J. of Global Optimization, Vol. 11, No. 4, pp. 341-359.
Verhulst, F. (1996). Nonlinear differential equations and dynamical systems. 2nd ed. SpringerVerlag Berlin Heidelberg.

647
647

