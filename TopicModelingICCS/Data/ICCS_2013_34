Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 459 – 464

International Conference on Computational Science, ICCS 2013

Algorithm for ﬁnding the domain intersection of a set of polytopes
Vasyl Tereshchenkoa , Sergii Chevokinb , Andriy Fisunenkoa,b,∗
a Taras
b Taras

Shevchenko National University of Kyiv, 64/13, Volodymyrska Street, Kyiv, 01601, Ukraine
Shevchenko National University of Kyiv, 64/13, Volodymyrska Street, Kyiv, 01601, Ukraine

Abstract
The modiﬁed version of GJK algorithm for ﬁnding a common point of two polytopes is considered. Knowing this point and
using the duality theorem the intersection of two polytopes can be found. Considering polytopes in pairs, we can ﬁnd an
intersection region of m polytopes.
Keywords: Polytope; intersection domain; convex polyhedron; polyhedral collision detection;

1. Introduction
Relevance. In this work one of the ways of solving the intersection problem for m polytopes is considered.
This problem is connected to well known and very popular collision detection problem [1] which is often used
in simulations of physical processes and in computer games. The procedure of detecting intersection is one of
the basic geometric operations which has many applications in computer graphics and robotics [5]. The most of
libraries which are available today require that objects were represented as convex polyhedrons due to the presence
of eﬃcient algorithms for detecting their intersections. The procedure is also the base for solving more complex
problems such as ﬁnding the intersection of non-convex polyhedrons. In this case the problem can be reduced to
the intersection of convex polyhedrons by using decomposition or special data structures, such as, BSP-tree [2].
Alternative representation of the object with using other libraries is to describe the boundary of the object as
a set of faces which are speciﬁed by coordinates of their vertices, ordered clockwise or counter-clockwise when
they are viewed from the outside. Checking for the intersection should usually work with very detailed objects
and be performed in real-time. Therefore the complexity of algorithms and size of used storage is very important.
Analysis of recent studies. There are three basic approaches to solving this problem: cutting pieces of polytope
by another polytope’s facets, the plane-sweep method and using duality theorem. The ﬁrst method is intuitively
simple but not very eﬃcient. The second and third methods are more eﬃcient comparing to the ﬁrst. The second
method is a generalization of plane-sweep method for three-dimensional case and described in detail in [3]. At
the same time the ﬁrst and the last methods are simpler to implement. Thus, the last method is the most suitable
in terms of performance and ease of implementation. This approach is described in details in [4, 5]. For solving
the problem a number of authors oﬀer an approach which uses splitting it into sub-problems. Works [6,2,7] are
∗ Andrey

Fisunenko. Tel.: +38-050-743-6081; fax: +38-044-259-0427 .
E-mail address: andrey.ﬁsunenko@gmail.com.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.209

460

Vasyl Tereshchenko et al. / Procedia Computer Science 18 (2013) 459 – 464

extremely interesting. One of the main sub-problems is the problem of determining an intersection of segments.
Currently the most eﬃcient algorithm for its solution is the algorithm of Balaban [8].
For problems of ﬁnding intersections in the conditions of coherence the GJK-algorithm (Gilbert-JohnsonKeerthi) is often used [9,1]. It is based on the fact that two convex objects (polyhedrons) intersect only in that case
when the point of origin belongs to their Minkowski diﬀerence. If to store information about neighboring vertices,
then the extreme vertex can be found by common Hill Climbing algorithm. For processing of big polyhedrons it
is possible to accelerate this algorithm by saving one or several more remote vertices in addition to neighboring
vertices. The advantage of this method is the possibility to use it for any convex object. [10,11]. Voronoi diagram
(V-Clip algorithm) [12] are also used for the solution of such problems. The idea proposed in this paper is based
on GJK algorithm [9, 1].
The novelty of the idea. In this paper we propose a modiﬁcation of GJK algorithm which allows to determine
a common point of two polytopes in linear time and to ﬁnd intersection of m polytopes in O(mnlog(n)) time
(one processor) and O(nlog(n)log(m)) using parallelization. In addition the paper presents a new approach that
generalizes existing algorithms improving their eﬃciency. The approach involves the use of pre-processing that
represents polyhedron as Dobkin-Kirkpatrick hierarchy.
The purpose of the article is to develop a fast generalized method of constructing the intersection of m polytopes.
2. Problem and solution method
Let us give a geometrical statement of the intersection construction problem of m polytopes.
Problem. Let m convex polyhedrons are given with N vertices each. It is necessary to construct their intersection.
The intersection of m polytopes can be found using the well-known technique ”divide-and-conquer”. For this
we will ﬁnd the pair-wise polytopes intersection until there will be one polytope (outcome of intersection), or it
will not be shown that area of intersection is empty set. The algorithm of ﬁnding intersection of two polytopes
will be considered further.
2.1. Constructing the solution for polytopes’ intersection problem
The central idea of the method is as follows: if one of the points of intersection - p is known, then the
intersection can be constructed using techniques of duality [4]. Indeed, if a point p of P Q exists then it can
be combined with the point of origin by a simple transfer. Therefore we can assume that the point of origin of
coordinate system lies inside both P and Q. Denoting by x, y, z coordinates in this space let us connect with each
face f of P or Q some half-space:
n1 ( f )x + n2 ( f )y + n3 ( f )z ≤ d( f )

(1)

Because any point of P Q satisﬁes all the inequalities (1) for each face of each polyhedron and the origin (0,
0, 0) is a point of P Q, then all inequalities can be normalized so that d( f ) = 1. If the triple (n1 ( f ), n2 ( f ), n3 ( f ))
is interpreted as a point than we get a duality transformation. With this transformation points at a distance l from
the origin are reﬂected on the plane at a distance 1l from the origin and vice versa.
Let us introduce the notation δ(p) for this conversion indicating that δ(p) is the plane which is dual to a point
p, and δ(π) - the point dual to the plane π. The dual conversion of convex polyhedron is meaningful only in that
case when it contains the point of origin within itself. In [4] proved the following important statement:
Lemma 1. Let P be a polytope containing the point of origin,let and S be the set of points dual to the planes
that carry the faces of P. Then any point p which lies inside P is reﬂected in this plane δ(p) which does not
intersect with the polytope conv(S ).
In turn, the results obtained in this Lemma also gives to the next important statement [4]:
Theorem 1. If P is a convex polyhedron that contains the point origin, then the dual polyhedron P(δ) to it is
the same as well.
The above statements demonstrate the fact that if P contains the point of origin then any plane which is external
to the P is reﬂected to the point inside P(δ) and vice versa. Let V p(δ) and Vq(δ) denote sets of vertices P(δ) and Q(δ)

461

Vasyl Tereshchenko et al. / Procedia Computer Science 18 (2013) 459 – 464

accordingly. If we remember that each element of V p(δ) Vq(δ) is dual to some of the planes that carry a face of
one of the original polyhedrons and notice that P Q is the set of points that lie both in the half-space deﬁned by
these faces and containing the point of origin then it can be argued that the polyhedron P Q is dual to the convex
hull V p(δ) Vq(δ) . Thus, in order to ﬁnd the intersection of two convex polytopes we use the following algorithm:
1) Find the point that lies inside both polytopes using the modiﬁed GJK algorithm.
2) Move the point of origin to the found point. Normalize equations of all planes, which include faces of
polytope and we ﬁnd the set of points S = V p(δ) Vq(δ) which is dual to polytope faces.
3) Build a convex hull CH(S ) and ﬁnd the set of points S¯ , that dual to the faces of CH(S ).
4) Build a convex hull CH(S¯ ). The resulting polytope is the desired intersection.
2.2. Constructing the solution for problem of ﬁnding a point within two polytopes
Deﬁnition 1. Minkowski diﬀerence of two sets of points is deﬁned by the formula:
A

B = {a − b : a ∈ A, b ∈ B}

(2)

The important property of Minkowski diﬀerences is that two sets of points intersect (have one or more common
points) then and only then when Minkowski diﬀerence C(C = A B) contains the point of origin.
Lemma 2.Determining the minimum distance between the sets of points A and B is equivalent to determining
the minimum distance between their Minkowski diﬀerence C and the point of origin, [9, 1].
distance(A, B) = min{ a − b : a ∈ A, b ∈ B} =
= min{ c : c ∈ A

B}

(3)

This lemma is used further for ﬁnding a common point of the two polytopes.
Algorithm GJK [9]
1. Initiate the simplex set Q by one or more points (no more than d + 1, where d - the dimension of space)
from Minkowski diﬀerence of set of polytopes’ vertices A and B.
2. Compute the point P of minimum norm in the convex hull CH(Q).
3. If P is the point of origin then point of the origin is contained inside A B. We stop and return the result
that A and B intersect.
4. Q is reduced to the smallest subset Q of Q such as P ∈ CH(Q ). It is made by removing all points of Q
which do not determine subsimplex Q to which P belongs.
5. Let V = S A B (−P) = S A (−P) − sB (P) there be a reference point in direction of −P.
6. If V is not more extreme in direction −P than P itself, then stop and return the result that A and B do not
intersect.
7. Add V to Q and return to step 2.
Let us describe a procedure for ﬁnding the minimum norm point P in the convex hull CH(Q) for simplex set
Q = {Q1 , Q2 , . . . , Qk }, 1 ≤ k ≤ 4. For this let us review Voronoi regions for vertices, edges, faces and stop when
the origin lies in the region for some features (vertices, edges, faces). When we have found a feature the minimum
norm point for it can be found by the orthogonal projection of the point of origin on this feature.
Let us consider the case where Q = {Q1 , Q2 , Q3 , Q4 }. An arbitrary point P (including the origin) lies inside
the Voronoi region of, for example, vertex Q1 then and only then when the following inequalities are satisﬁed:
(P − Q1 ) ∗ (Q2 − Q1 ) ≤ 0
(P − Q1 ) ∗ (Q3 − Q1 ) ≤ 0
(P − Q1 ) ∗ (Q4 − Q1 ) ≤ 0
P lies inside the Voronoi region which is associated with the edge Q1 Q2 then and only then when the following
inequalities are satisﬁed:

462

Vasyl Tereshchenko et al. / Procedia Computer Science 18 (2013) 459 – 464

(P − Q1 ) ∗ (Q2 − Q1 ) ≥ 0
(P − Q2 ) ∗ (Q1 − Q2 ) ≥ 0
(P − Q1 ) ∗ ((Q2 − Q1 ) × ((Q2 − Q1 ) × (Q3 − Q1 ))) ≥ 0
(P − Q1 ) ∗ (((Q4 − Q1 ) × (Q2 − Q1 )) × (Q2 − Q1 )) ≥ 0
If P does not lie within the Voronoi regions for vertices or edges then regions for faces are tested, by checking
whether the P and point from Q,which remains, lie on opposite sides of the plane formed by the other three
points of Q, for example, P is the Voronoi region for Q1 Q2 Q3 then and only then when the following inequality is
satisﬁed:
(P − Q1 ) ∗ ((Q2 − Q1 ) × (Q3 − Q1 )))∗
∗((Q4 − Q1 ) ∗ ((Q2 − Q1 ) × (Q3 − Q1 ))) < 0
Similarly other vertices, edges, faces are checked.
Modiﬁcation of GJK algorithm
Thus, GJK algorithm gives us an answer either polytopes intersect. However, it does not give us a point of
intersection or a point inside two polytopes. This deﬁciency can be easily corrected. For this, at each step we need
to keep not only simplex against which we test but points A and B, which form this simplex. Then the intersection
(or point inside two polytopes) can be found as follows:
V = λ0 A0 + λ1 A1 + λ2 A2 + λ3 A3 =
= λ0 B0 + λ1 B1 + λ2 B2 + λ3 B3
where: A0 , A1 , A2 , A3 - vertices of simplex A; B0 , B1 , B2 , B3 - vertices of simplex B; λ0 , λ1 , λ2 , λ - unknown
coeﬃcients greater than 0 and such, that λ0 + λ1 + λ2 + λ3 = 1.
Let us subtract one equation from the other, and note that Ai − Bi = T i , where T i - the top of the resulting
simplex obtained at the output of GJK algorithm. Then we decompose the resulting equation for the coordinates.
Then the following system of equations is obtained:
λ0 T 0x + λ1 T 1x + λ2 T 2x + λ3 T 3x = 0
λ0 T 0y + λ1 T 1y + λ2 T 2y + λ3 T 3y = 0
λ0 T 0z + λ1 T 1z + λ2 T 2z + λ3 T 3z = 0
λ0 + λ1 + λ2 + λ3 = 1.
Solving out the system of equations, we obtain the coeﬃcients λi by which we can ﬁnd a point V. This point
will belong to both simplex A and B, hence, will belong to the intersection of polytopes. A case when the point
which is obtained as the result of this algorithm is the point of intersection of polytopes is possible. In this case, in
order to ﬁnd a point lying strictly inside the two polytopes, we need to shift the point with the minimum Δ in one of
26 directions in the space. Thus, we are guaranteed to ﬁnd a point that belongs to both polytopes simultaneously.
2.3. Constructing the solution for the convex hull problem
Let us suppose we have the input set of points S .
1) Build a tetrahedron, by combining the ﬁrst four points of S , which do not lie in one plane.
2) For each remaining point p, the remaining:
a. Suppose that p - lamp that shines in a dark room. Deﬁne a set of faces that are lighted by this lamp. We call
this set of faces as faces which are visible from p.
b. Deﬁne a set of edges of horizon to the point p. The edge of horizon is an edge that belongs to the visible
and invisible faces simultaneously. Horizon’s faces form a closed loop around visible faces.
c. For each edge of the horizon, create a new triangular face connecting the edge of the point p. The point p
is now part of the convex hull.

Vasyl Tereshchenko et al. / Procedia Computer Science 18 (2013) 459 – 464

d. Finally, remove all faces which are visible from p.
This algorithm has complexity O(n2 ). However, it can be speeded up to O(nlog(n)), by retaining for each point
of the set all faces which are visible from it and vice versa. We have a bipartite graph. Let us call it as a graph
of conﬂicts or conﬂicts graph. Let us initiate the conﬂicts graph after the ﬁrst step, testing each point relatively to
the four faces of the original tetrahedron (if a point is ahead of the face, the face is visible from the point). We use
the normal vectors of faces for this. After the addition of each new point to the convex hull on the step 2c, newly
created faces should be added to the conﬂicts graph. For this let us consider horizon’s edge. Before we added face
f there were two faces to this shared edge. Let us call them g and h. If horizon’s edge was visible from the point
then either g or h was visible also. Thus, to ﬁnd the set of points which are visible from f it is only necessary to
consider the set of points visible from either g or h.
3. Algorithm complexity
Lemma 3. The intersection problem of two convex n- vertices polytopes can be solved in O(nlog(n)) time.
Proof. To ﬁnd the intersection of two polytopes it is needed to know the point that will lie inside two polytopes.
This can be done with O(n) time using GJK algorithm. For moving the point of origin in this point and ﬁnding
dual points to the faces it is necessary O(n) operations. The most of time is spent on operation of constructing the
convex hull (O(nlog(n)). Constructing the intersection region which is a dual shape to the convex hull requires
O(n) time. Thus constructing the intersection of two polytopes requires O(nlog(n)) time.
Theorem 2. The problem of intersection of m convex n-vertex polytopes can be solved in time O(mnlog(n))
and O(nlog(n)log(m)) using parallelization.
Proof. Algorithm’s complexity without parallelization is obvious. Parallel computing allows us to split the
whole set of polytopes into pairs and to perform their pair-wise intersections in parallel. After that we will have
m
m
2 intersections. The next step is 4 , and so on. Totally it is necessary to perform log(m) of such steps, for each of
them a separate processor will perform O(nlog(n)) operations.
4. Implementation
The implementation is done in the programming language C using WPF framework to illustrate the results
of the algorithm. Result of the program and the settings window are shown in Fig.1. Input of polyhedrons for the
algorithm is possible for our implementation in two ways: by reading polytopes vertices from the database (LINQ
to SQL) and by generation polytopes randomly (each polytope is generated as a point cloud for which a convex
hull is constructed).

Fig. 1. The result of the program and settings window.

463

464

Vasyl Tereshchenko et al. / Procedia Computer Science 18 (2013) 459 – 464

The user is also able to do some manipulations for changing of reﬂection of retrieved polytopes and their
intersections, namely: the choice of how to reﬂect polytope (vertices only, edges only, faces only), the choice of
transparency, back and front colour of faces. Intersection of polytopes occurs pair-wise, using parallel execution
with a thread pool which signiﬁcantly improves performance of the algorithm.
5. Conclusions
The paper suggests the method for constructing the intersection of polytopes which is based on a modiﬁed
GJK algorithm and on duality ﬁgures and which is relatively easy to implement. This algorithm allows to obtain
the intersection of two polytopes in O(nlog(n)), time. It is a quite good result comparing to the direct method of
cutting oﬀ one polytope faces by another’s ones that has complexity O(n3 ). For number of polytopes more than
2, their intersection is done pairwise. In general, the whole complexity of the algorithm is to ﬁnd a point that lies
inside the intersection of all polytopes. If this point is known then by using the duality property we can ﬁnd the
intersection of k polytopes only by building a convex hull. However, it cannot result in eﬃciency growth because
we need to build a convex hull for the k · n points and that gives the same complexity but at the same time the
algorithm is badly parallelized. Thus, the proposed algorithm is very convenient, because along with its simplicity
it oﬀers high enough speed and an eﬀective parallelization method.
References
[1] Hertel S., Mehlhorn K., M¨antyl¨a M., Nievergelt J. Space sweep solves intersection of two convex polyhedra elegantly.Acta Informatica
21,(1984), p. 501-519, .
[2] D. M. Mount.Geometric Intersection. In Handbook of Discrete and Computational Geometry, (J. Goodman and J. O’Rourke, eds.), CRC
Press, New York,(2004), p. 857-876.
[3] Chazelle B. An optimal algorithm for intersecting three-dimensional convex polyhedral. SIAM Journal on Computing 21 (4), (1992), p.
671-696.
[4] D. P. Dobkin and D. G. Kirkpatrick. Fast detection of polyhedral intersection. Theoret. Comput. Sci. 27, (1983), p.241-253.
[5] J. O’Rourke, C.-B. Chien, T. Olson, and D. Naddor. A new linear algorithm for intersecting convex polygons. Comput. Graph. Image
Process 19,(1982), p. 384-391.
[6] Joseph O’Rourke. Computation Geometry in C. Cambridge University Press, Cambridge, 1994.
[7] I.J. Balaban. An Optimal Algorithm for Finding Segment Intersections. In Proc. of the 11th ACM Symposium on Computational Geometry, (1995), p.211-219.
[8] Gilbert, E.G. Johnson D.W., Keerthi S.S. A fast procedure for computing the distance between complex objects in three-dimensional
space. Robotics and Automation, IEEE Journal 4 (2), (1988), p. 193-203.
[9] Ericson C. Real time collision detection. Taylor & Francis Group, 2005.
[10] G. Van den Berden. Collision Detection in Interactive 3D Environments. Amsterdam; Boston, Morgan Kaufmann Publishers, 2004.
[11] G.Van den Berden. A Fast and Robust GJK Implementation for Collision Detection of Convex Objects. Journal of Graphics Tools 4 (2),
(1999), p. 7-25.
[12] B. Mirtich. V-Clip: Fast and robust polyhedral collision detection. Technical Report TR-97-05, Mitsubishi Electrical Research Laboratory, 1997.

