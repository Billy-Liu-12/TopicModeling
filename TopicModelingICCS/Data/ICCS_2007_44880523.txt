MTF Measurement Based on Interactive Live-Wire Edge
Extraction
Peng Liu1,2,3, Dingsheng Liu1, and Fang Huang1,3
1
2

China Remote Sensing Satellite Ground Station, #45, Bei San Huan Xi Road, Beijing, China
Institute of electronic Chinese academy of science, #19, Bei Si Huan Xi Road, Beijing, China
{pliu, dsliu, fhuang}@ne.rsgs.ac.cn
3
Graduate University of Chinese Academy of Sciences

Abstract. When we want to measure parameters of the Modulation Transfer
Function (MTF) from remote sensing image directly, the sharp edges are
usually used as targets. But for noise, blur and the complexity of the images,
fully automatic locating the expected edge is still an unsolved problem. This
paper improves the semi-auto edge extraction algorithm of live-wire [1] and
introduces it into the knife-edge method [8] of MTF measuring in remote
sensing image. Live-wire segmentation is a novel interactive algorithm for
efficient, accurate, and reproducible boundary extraction that requires minimal
user input with a mouse. The image is transformed into a weighted graph with
variety restrictions. Edge searching is based on dynamic programming of
Dijkstra’s algorithm [5]. Optimal boundaries are computed and selected at
interactive rates as the user moves the mouse starting from a manually specified
seed point. In this paper, a promoted model of live-wire is proposed to
measuring the on orbit Modulation Transfer Function for high spatial resolution
imaging satellites. We add the no-linear diffusion filter in the local cost function
to ensure the accurateness of the extraction of edges. It can both de-noise and
do not affect the shape of the edges when we extracting the edges, so that the
calculation of the MTF is more reasonable and precise.
Keywords: MTF measurement, interactive Live-wire edge extraction, sharp
edge.

1 Introduction
In order to measure the on orbit MTF of remote sensing images, knife-edges method
makes use of special targets for evaluating spatial response since the targets stimulate
the imaging system at all spatial frequencies [8]. The algorithm must determine edge
locations with very high accuracy, such as Figure 1.1(a). The ESF (edge spread
function) was then differentiated to obtain the LSF (line spread function) as in the
second picture in Figure 1.1(d). Then the LSF was Fourier-transformed and
normalized to obtain the corresponding MTF, see Figure 1.1 (e).
So like Figure1.2 (a) and (b), we hope that we can extract the edges arbitrarily and
like figure1.2 (c), we can acquire the perpendicular profiles easily. But for the
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 523–530, 2007.
© Springer-Verlag Berlin Heidelberg 2007

524

P. Liu, D. Liu, and F. Huang

complexity of the images, fully automated locating the expected edge is still an
unsolved problem. Especially, in most case the edge in the image could be not straight
or regular. So the aim to cut a profile that is perpendicular to the edge is also very
difficult. As far as above reasons are considered, we introduce “live-wire” [1] into
MTF measurement and promote the novel method of edges detecting. Live-wire is
one of active contour [2] model for efficient, accurate boundary extraction. Optimal
boundaries are computed and selected at interactive rates as the user moves the mouse
starting from a manually specified seed point. In this paper we enhance the
performance of the live-wire model and make it more fitful to MTF measurement in
the remote sensing images.

(a)

(b)

(c)

(d)

(e)

Fig. 1.1. The process from the sharp edges to MTF

2 Live-Wire Model
The motivation behind the live-wire algorithm is to provide the user with full control
over the edge extraction [2]. Initially, the user clicks to indicate a starting point on
the desired contour, and then as the mouse is moved it pulls a “live-wire” behind it
along the contour. When the user clicks again, the old wire freezes on the contour,
and a new live one starts from the clicked point. The livewire method poses this
problem as a search for shortest paths on a weighted graph. Thus the livewire
algorithm has two main parts: first, the conversion of image information into a
weighted graph, and then the calculation of shortest paths in the graph [6],[9]. This
paper for the first time introduces the algorithm into MTF measurement and makes
some good promotions.
In the first part of the livewire algorithm, weights are calculated for each edge in
the weighted graph, creating the image forces that attract the livewire. To produce the
weights, various image features are computed in a neighborhood around each graph
edge, and then combined in some user-adjustable fashion. The general purpose of the
combination is edge localization, but individual features are generally chosen as in [9].
First, features such as the gradient and the Laplacian zero-crossing [3] have been used
for edge detection. Second, directionality, or the direction of the path should be taken
consideration locally. Third, training is the process by which the user indicates a
preference for a certain type of boundary. For resisting the affections of noise, this
paper makes promotion by adding the no-linear diffusion filter term, which we can
see in the following contents.

MTF Measurement Based on Interactive Live-Wire Edge Extraction

525

In the second part of the livewire algorithm, Dijkstra’s algorithm [5] is used to find
all shortest paths extending outward from the starting point in the weighted graph.
The livewire is defined as the shortest path that connects two user-selected points (the
last clicked point and the current mouse location). This second step is done
interactively so the user may view and judge potential paths, and control the
extraction as finely as desired. And this will make MTF measurement easier.
2.1 Weighted Map and Local Cost
The local costs are computed as a weighted sum of these component functions, such
as Laplacian zero-Crossing, Gradient Magnitude and Gradient Direction. Letting
l ( p, q ) represents the local cost on the directed link from pixel p to a neighboring
pixel q , the local cost function is

l ( p, q ) = wZ . f Z (q ) + wD . f D ( p, q ) + wG . f G (q ) + wdiv f div ( p )

(1)

f div ( p ) is Laplacian zero-Crossing, f G (q ) is Gradient Magnitude,
f D ( p , q ) is Gradient Direction and f div ( p ) is Divergence of Unit Gradient. wZ ,
wD , wG and wdiv are their weights, and each w is the weight of the corresponding
In formula (1),

feature function. The Laplacian zero-crossing is a binary edge feature used for edge
localization [7]. The Laplacian image zero-crossing corresponds to points of maximal
(or minimal) gradient magnitude. Thus, Laplacian zero-Crossings represent “good”
edge properties and should therefore have a low local cost. If I L (q) is the Laplacian of
an image I at the pixel q , then

⎧ 0 if I L (q ) = 0
f Z (q ) = ⎨
⎩1 if I L (q ) ≠ 0

(2)

Since the Laplacian zero-crossing creates a binary feature, f Z (q ) does not
distinguish between strong, high gradient edges and weak, low gradient edges.
However, gradient magnitude provides a direct correlation between edge strength and
local cost. If I x and I y represent the partials of an image I in x and y respectively,
then the gradient magnitude G is approximated with G = I x2 + I y2 . Thus, the gradient
component function is

fG =

max (G − min( G ) ) − (G − min( G ))
G − min( G )
= 1−
max (G − min( G ) )
max (G − min( G ) )

(3)

The gradient direction f D ( p, q ) adds a smoothness constraint to the boundary by
associating a high cost for sharp changes in boundary direction. The gradient direction
is the unit vector defined by I x and I y . Letting D ( p ) be the unit vector perpendicular

526

P. Liu, D. Liu, and F. Huang

to the gradient direction at the point

p (for D ( p) = ( I y ( p ),− I x ( p )) ), the

formulation of the gradient direction feature cost is:

f D ( p, q ) =

{cos[D( p ) • L( p, q )]
π
1

−1

+ cos[L( p , q ) • D( p )]

−1

}

⎧⎪ D( p ) = (I y ( p ) − I x ( p ))
⎨
⎪⎩ D(q ) = (I y (q ) − I x (q ))

L( p , q ) =

1 ⎧ q − p;
⎨
p − q ⎩ p − q;

⎛ ∂ ⎛
⎜
f div ( p ) = − ⎜
⎜ ∂x ⎜
⎝
⎝

Ix
I

2

x

+I

2

y

if
if

(4)

(5)

D( p ) • (q − p ) ≥ 0

D( p ) • (q − p ) ≺ 0

(6)

⎞⎞
⎟⎟
+ β ⎟⎠ ⎟⎠

(7)

⎞ ∂ ⎛
⎟+
⎜
⎟
⎜
y
∂
+β ⎠
⎝

Iy
I

2

x

+I

2

y

Above, in D ( p ) • L( p , q ) of (4), “ • ” is vector dot products. And here, (5) and
(6) are the bi-directional links or edge vector between pixels p and q . The link is
either horizontal, or vertical, or diagonal (relative to the position of q in p ’s
neighborhood). The dot product of D( p ) and L( p, q ) is positive, as noted in [6]. The
direction feature cost is low when the gradient directions of the two pixels are similar
to each other and the link between them.
Here, f div ( p ) is the divergence of unit gradient vector in the point of p . And

wdiv is the weight of the term. Its function is to de-noise. There is not this term in the
original model [6]. In order to de-noise we add this term to the model.
In (7), β is small positive constant that prevent I 2 x + I 2 y + β to be zero. This term
comes from the no-linear diffusion filter, first proposed by [4]. And it has been
successful as a de-noise algorithm. f div ( p ) is sensitive to the oscillating such as noise
but not penalize the step edges. So, in location of edge f div ( p) is small, and in the
location of noise f div ( p) is big. The function of f div ( p) will be demonstrated in the
following of the paper.
2.2 Searching for an Optimal Path
As mentioned, dynamic programming can be formulated as a directed graph search
for an optimal path. This paper utilizes an optimal graph search similar to that
presented by Dijkstra [5]. Further, this technique builds on and extends previous
boundary tracking methods in 4 important ways same as in [6], but the difference of

MTF Measurement Based on Interactive Live-Wire Edge Extraction

527

our method is that we add the no-linear diffusion filter to the weighted map so that the
search can resist the effect of noise. And all these characters can make MTF
measurement easier.
The live-wire 2-D dynamic programming (DP) graph search algorithm is as
follows: Figure 2.2 (a) is the initial local cost map with the seed point blacked. For
simplicity of demonstration the local costs in this example are pixel based rather than
link based and can be thought of as representing the gradient magnitude cost feature.
Figure 2.2 (b) shows a portion of the cumulative cost and pointer map after expanding
the seed point. Noticing that the diagonal local costs which have been scaled by
Euclidean distance does not show in this figure. In fact we compute the diagonal local
costs in our method, but for convenience we do not show them. This is demonstrated
in Figure 2.2 (c) where several points have now been expanded, and the seed point
and the next lowest cumulative cost point on the active list. In fact, the Euclidean
weighting between the seed and diagonal points makes them more costly than nondiagonal paths. Figures 2.2 (d), (e), and (f) show the cumulative cost/direction pointer
map at various stages of completion. Note how the algorithm produces a “wave-front”
of active points emanating from the initial start point, which is called the seed point,
and that the wave-front grows out faster where there are lower costs.

(a)

(b)

(c)

(d)

(e)

(f)

Fig. 2.2. (a)-(f) is the process of optimal path searching from one seed point to another. And
the blacked points are the active points on the live paths.

And here, we have to say, the importance of the term of f div ( p) is obvious. In the
Figure 2.3, (a) is the edge extraction in the smooth ideal remote sense images. We can
see that the result is satisfying. Even the edge is not straight or regular, the live-wire
work well in (a). Following, (b) and (c) are the result or edge detection by live-wire
model without the term f div ( p) , and they are badly affected by noise. In Figure 2.3(b)
and (c), edge extraction is not optimal for us. Where the level of noise is high, the
edge extraction is not very accurately. But, (d) is the result of live-wire edge
extraction with the term f div ( p) . And we can see that result (d) is not affected by
noise, and the boundary is on the right position for the functions of term f div ( p) . The
term of f div ( p) is sensitive to noise but almost does not change on the edge. So the
term of no-linear diffusion filter operator f div ( p) enhances the performance of the
live-wire model very much.

528

P. Liu, D. Liu, and F. Huang

(a)

(b)

(c)

(d)

Fig. 2.3. (a) is the live-wire edge detecting of remote sensor image. (b) and (c) are the livewire edge detecting without f div ( p ) term and (d) is with the f div ( p) term.

3 MTF Measurement Based on Live-Wire
Until now, we have acquired the knife-edges, and we must resample the profile that
perpendicular to the edges same as [8]. On one edge we can acquire many profiles as
Figure 3.1(b) shows. In order to check the accuracy of the algorithm, we use a known
PSF to convolve the image of Figure 3.1 (a) and acquire the blur image of Figure 3.1
(b). The ideal MTF of the known PSF has been shown as figure 3.1 (g). Firstly, we

(a)

(b)

(e)

(c)

(f)

(d)

(g)

Fig. 3.1. MTF measurement in ideal situation

select the edge image of Figure 3.1 (b). Then, we use live-wire to search the optimal edge as knife-edge and compute the profiles that perpendicular to the edge as
Figure 3.1 (b). Furthermore we use the minimum mean-square [8] value to compute
the edge spread function as Figure 3.1 (d). Since the image Figure 3.1 (b) is ideal and
simple, the ESF should be very accuracy. And the ESF was then differentiated to
obtain the LSF as in the Figure 3.1(e). Then the LSF was Fourier-transformed and

MTF Measurement Based on Interactive Live-Wire Edge Extraction

529

normalized to obtain the corresponding MTF Figure3.1 (f). The ideal MTF of (b) is
Figure 3.1 (g). Comparing the Figure3.1 (f) with the Figure3.1 (g), we can find that
the live-wire works very well and the result is very precise. There only is a little error
in the MTF measurement, and it is out of the cut-off frequency. The amplitude
frequency from 0 to 20 in (f) and (g) are almost the same, the error comes out only
from 20 to 35. The results do just verify the accuracy of the live-wire method.
Figure3.2 (a) and (b) is the same target image of remote sensing, and the (c) and (d)
are the MTF result of difference methods. In Figure3.2 (c) and (d), the blue solid line
is the MTF that is measured by method in [8]. And in Figure3.2 (c) the red solid line
is the MTF that is measured by our algorithm. In Figure3.2 (d) the red solid line is the
MTF that is measured by live-wire algorithm without improvement. The target image
is irregular, but for the accurate edge extraction and more correct profile cutting, the
result of red solid line that is based on our improvement is obviously more precise,
see Figure3.2 (c). Further more in Figure3.2 (d), the red solid line is the MTF
measured by original live-wire model that does not add the de-noise term of f div ( p) .
We can see that for the affection of noise, the edges is not very accurate and it can
affect the measurement of MTF in (d) and the error is also obvious. This illustrate the
no-improved live-wire algorithm is not very suit for MTF measure.

(a)

(b)

(c)

(d)

Fig. 3.2. MTF measurement based on difference methods

(a)

(b)

(c)

(d)

Fig. 3.3. MTF measurement of variety of remote sensing images

Figrure3.3 is MTF measurement used different images. In these figures we can see
that, if the context in the image is complicated and the edge is not very straight we
can also extract the edge accurately as Figure3.3 (a). And this success attribute to the
advantages of the live-wire algorithm and the no-linear diffusion filter term added in

530

P. Liu, D. Liu, and F. Huang

live-wire model. At last we measure the MTF of the image of Figure3.3 (c) that
comes from “Google earth”. And live-wire can snap the edge easily and precisely on
the complex image context. The profile that is perpendicular to the edge is cut and
LSF is computed. Figure3.3 (d) is the MTF of Figure3.3 (c). Because the quality of
the image is good, the result of MTF should be relatively ideal.

4 Conclusions
In this paper we propose an improved edge detection model based on live-wire
algorithms to measure the MTF of remote sensing images. The no-linear filter term
was added. And, these improvements make it more suitable for MTF measurement. It
highly enhances the performance of the knife-edge method of MTF measurement and
it makes the measurement more convenient and flexible. Then, we use the straight
edge no more when we want to measure the MTF of the sensors directly. Furthermore, the influence of the noise is restrained after no-linear diffusion filter term is
added to the weight map. The profiles that are perpendicular to edge can be
simultaneously and accurately computed. So, all these advantages help us measure the
MTF of the image more accurately in very complicated image context. The following
work will focus on making use of the improved MTF parameters in de-convolution of
remote sensing images.

References
1. W. A. Barrett and E. N. Mortensen. Interactive live-wire boundary extraction. Medical
Image Analysis, 1(4):331–341, 1997.
2. M. Kass, A. Witkin, and D. Terzopoulos, “Snakes: Active Contour Models,” in Proc. of the
First Int. Conf. on Computer Vision, London, England, pp. 259-68, June 1987.
3. E. N. Mortensen and W. A. Barrett. Intelligent Scissors for Image Composition. Computer
Graphics (SIGGRAPH ‘95), 191–198, 1995.
4. P. Perona, J. Malik, “Scale-space and edge detection using anisotropic diffusion”, PAMI
12(7), pp. 629-639, 1990.
5. E. W. Dijkstra A Note On Two Problems in Connexion With Graphs Numerische
Mathematik, 269–271, 1959.
6. A. X. Falcao, J. K. Udupa, and F. K. Miyazawa. An Ultra-Fast User-Steered Image
Segmentation Paradigm: Live-wire on the Fly. IEEE Transactions on Medical Imaging,
19(1):55–61, 2000.
7. A. X. Falcao, J. K..Udupa, S. Samarasekera, and S. Sharma. User-Steered Image
Segmentation Paradigms: Live-wire and Live Lane. Graphical Models and Image
Processing, 60:233–260, 1998.
8. Taeyoung Choi, IKONOS Satellite on Orbit Modulation Transfer Function (MTF)
Measurement using Edge and Pulse Method, thesis South Dakota State University.2002
9. E. N. Mortensen and W. A. Barrett. Interactive Segmentation with Intelligent Scissors.
Graphical Models and Image Processing, 60(5):349–384, 1998.

