Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 521 – 530

International Conference on Computational Science, ICCS 2013

Pareto Front Approximation Using A Hybrid Approach
Shubhangi Deshpandea , Layne T. Watsona,b , Robert A. Canﬁeldc
a

Department of Computer Science, Virginia Polytechnic Institute & State University, Blacksburg, VA
b

c

Department of Mathematics, Virginia Polytechnic Institute & State University, Blacksburg, VA
Department of Aerospace & Ocean Engineering, Virginia Polytechnic Institute & State University, Blacksburg, VA

Abstract
A new method is proposed for approximating a Pareto front of a bound constrained biobjective
optimization problem (BOP) where the evaluation of the objective functions is very expensive and/or
the structure of the objective functions either cannot be exploited or not known. The method
employs a hybrid optimization approach using two direct search techniques (dividing rectangles
and mesh adaptive direct search). The algorithm iteratively formulates and solves several single
objective optimization problems of the original BOP by using an adaptive weighting scheme, and
moves closer to the true Pareto front at the end of each iteration. The method is tested on problems
from the literature designed to illustrate some of the inherent diﬃculties in biobjective optimization
such as a nonconvex or disjoint Pareto front, local Pareto front, or a nonuniform Pareto front.
Finally, the algorithm is compared with a recent biobjective optimization algorithm, BiMADS, that
generates an approximation of the Pareto front by solving a series of single objective formulations
of the original BOP. Results show that the proposed algorithm eﬃciently generates a set of evenly
distributed globally Pareto optimal solutions for a diverse types of problems. The accuracy and the
distribution of the solutions obtained can be improved further with a relaxed budget in terms of
true function evaluations.
Keywords: multiobjective optimization; Pareto optimality; direct search method; DIRECT; MADS;
surrogates.
1. Introduction
Multiobjective optimization problems arise in practically every ﬁeld of science where optimal decisions need to be taken in the presence of two or more conﬂicting objectives. There usually is no
unique solution that simultaneously optimizes all objectives; the goal of a multiobjective optimization problem is to ﬁnd the best trade-oﬀ solutions, popularly known as Pareto optimal solutions
(and the set of all the Pareto optimal solutions as a Pareto front), among these conﬂicting objectives.
Let IRn denote real m-dimensional Euclidean space. For vectors x(1) , x(2) ∈ IRn write x(1) < x(2)
(1)
(2) (1)
(2)
(1)
(x
≤ x(2) ) if ∀i, xi < xi (xi ≤ xi ), i = 0, . . ., n. Let l, u ∈ IRn with l < u and
n
B = {x ∈ IR | l ≤ x ≤ u}. Given m conﬂicting objective functions fi : B → IR, i = 1, . . . , m, the
multiobjective optimization problem is to simultaneously minimize all the fi over B.
For a nontrivial multiobjective optimization problem with m conﬂicting objectives no single
solution can optimize all m objectives simultaneously. Hence, a new notion of optimality, known as
Pareto optimality, is generally used in the context of multiobjective optimization problems. Pareto
optimality generally deﬁned using a dominance relation is as follows: Given two decision vectors

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.216

522

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

x(1) and x(2) , x(1) is said to dominate x(2) if and only if x(1) is no worse than x(2) in all objectives,
and x(1) is strictly better than x(2) in at least one objective. This is generally denoted as x(1) ≺ x(2) .
A solution x∗ is a globally Pareto optimal solution if and only if there does not exist any x in
the design space such that x ≺ x∗ .
A solution x∗ is a locally Pareto optimal solution if and only if there does not exist any x in
-neighborhood x | x − x∗ ≤ ∩ B of x∗ that dominates x∗ , for some > 0.
In general, ﬁnding inﬁnitely many solutions on a Pareto front is impossible, and ﬁnding even
a large discrete subset is hard when the structure and/or the analytical form of the underlying
objective function is not known or is very complex (e.g., blackbox simulation optimization). An
approximation to the true Pareto front is obtained as an alternative in such situations. A new
method is proposed in this paper to handle such black box simulation optimization problems with
two objectives. The algorithm employs a hybrid approach using two direct search techniques — a
deterministic global search algorithm, DIRECT [13] to deal with the global optimality and a local
direct search method, MADS (mesh adaptive direct search) [1] to ﬁne tune the potentially optimal
regions returned by DIRECT and to speed up the convergence. The idea is to systematically move
towards the true Pareto front at the end of every iteration by adaptively ﬁlling the gaps between
the nondominated solutions obtained so far. The algorithm uses the scalarization approach of
Ryu et al. [15] to convert a biobjective optimization problem into a single objective optimization
problem. The true function evaluations are replaced by cheaper surrogates to the objective functions
in order to minimize the expensive simulation runs. The novel idea proposed in this paper, using
the global search algorithm DIRECT as a sampling method, proved to be promising in higher
dimensional design spaces (see Section 4.1.4). Results are compared with those using a recent
biobjective optimization algorithm BiMADS [3]. Results show that the proposed method is eﬃcient,
provides an arbitrarily close approximation to the true Pareto front, and ﬁnds well distributed global
Pareto optimal fronts for diverse types of problems.
2. Background
Many diﬀerent methods have been suggested in the literature for solving multiobjective optimization problems. The solution approaches can be divided into two broad categories — evolutionary
approaches and scalarization or aggregation approaches. An evolutionary approach (e.g., [6]) yields
a set of candidate Pareto solutions at the end of each iteration, but requires a large number of true
function evaluations and does not guarantee optimality in general. Aggregate or scalarization approaches [9] are considered to be classical methods for solving multiobjective optimization problems.
The general idea is to combine all the objectives to convert the multiobjective optimization problem
into a single objective optimization problem. Most scalarization methods assume some problem
knowledge and require a set of predeﬁned parameters. A scalarization method called BiMADS [2]
solves a biobjective optimization problem through a series of single objective formulations using the
direct search method MADS, and attempts to obtain a uniform coverage of the Pareto front, even
in the case when the Pareto front is nonconvex or disjoint. Another method, PAWS [15], claims
eﬃcient generation of evenly distributed points for various types of Pareto fronts using an adaptive
weighting scheme. However, both these algorithms have their own limitations. Results produced
using BiMADS are dependent on the speciﬁc implementation of the algorithm (e.g., Latin hypercube
sampling used for the very ﬁrst run in NOMAD 3.5.1 may not produce consistent results always).
PAWS has an eﬃcient weighting scheme, however the central composite designs based sampling
strategy used in PAWS is impractical in higher dimensional search domains. Also PAWS generates
local Pareto optimal fronts. The Pareto approximation algorithm employs the adaptive weighting
scheme of PAWS, but tries to overcome both the limitations of PAWS with a novel sampling strategy
and a global search method.
Several real world scientiﬁc and engineering applications require analysis of spatially distributed
data from expensive experiments or complex computer simulations that can take hours to run even
on a fast workstation. This makes it diﬃcult to explore and produce all design combinations in
large high dimensional design spaces. Identifying the regions that contain good designs in such datascarce domains by keeping the number of simulation runs to a minimum is a nontrivial problem. The
proposed algorithm employs a systematic way to enrich an incomplete database by adaptively ﬁlling
the gaps between the nondominated points obtained from available data. The work in this paper

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

deals with biobjective optimization problems for such black box simulations where the structure
of the objective functions is not known or is very complex. To tackle the problem of expensive
simulation runs and to reduce the number of true function evaluations, computationally cheap(er)
approximations (known as surrogates) of the underlying complex functions are used in the proposed
work. Statistical sampling is a crucial part of a surrogate building process which becomes nontrivial
in higher dimensional search domains. A novel idea proposed in this paper is of using DIRECT as
a sampling strategy instead of using traditional space ﬁlling techniques.
Hybrid optimization is a popular approach in the optimization community where several different optimization techniques are combined to improve robustness and blend distinct strengths
of diﬀerent approaches [10]. This same notion has been extended to multiobjective optimization
problems in [19]. The Pareto approximation method of this paper is a hybrid approach using two
direct search methods, DIRECT (to explore the design space globally) and MADS (to ﬁne tune the
potentially optimal regions returned by DIRECT), to balance between global and local searches and
to improve the convergence rate.
The preliminary results for the proposed work were presented and discussed in [8].
3.

The Pareto Front Approximation Algorithm

This paper proposes a new method for biobjective optimization of possibly nonsmooth functions.
As a preprocessing step, a global search is performed using DIRECT to explore the design space
in unsampled regions of a database (if the database is empty, the global exploration step becomes
the data generation step). DIRECT being an optimization algorithm, the design space exploration
is conducted in an intelligent manner by focusing the global search in potentially optimal regions
only. A set X 0 of nondominated points (with respect to all database points) is obtained at the end
of the preprocessing step that serves as an input or starting point for the iterative procedure of the
algorithm that follows.
Each iteration of the algorithm consists of three steps: ﬁnding the most isolated point from
the current nondominated point set, constructing surrogates for the objective functions with the
isolated point determined in Step 1 as the center, and solving several single objective optimization
problems to produce candidate Pareto solutions. At the beginning of the iterative process, a trust
region radius Δ0 , the trust region contraction parameter ρ, and the tolerance value τ for the trust
region radius are initialized to user deﬁned values.
Step 1: Isolated point determination
Let X (k) = x(k,1) ,. . .,x(k,Jk ) be the set of nondominated points at the start of the iteration k
and P (k) = F (x(k,1) ), F (x(k,2) ),. . .,F (x(k,Jk ) ) be the corresponding objective space where F (x) =
f1 (x), f2 (x) and Jk is the cardinality of X (k) (and P (k) ). Note that for the very ﬁrst iteration
(k = 0) the nondominated set X (0) is the result of the preprocessing step. Both X (k) and P (k)
are sorted in descending order of the f1 value. The gap between the nondominated points in the
objective space P (k) is computed for each point in P (k) except for the end points as follows, for
(k)
j = 2, 3, . . ., Jk − 1, δjk = F (x(k,j−1) ) − F (x(k,j) ) 2 + F (x(k,j) ) − F (x(k,j+1) ) 2 . The point xc
with the largest δjk value is selected as the most isolated point, and is used as the center point for
a local model with a trust region radius Δk . Thus,
(k)
if Jk > 2, xc := x(k,i) , where i =argmax [δjk ], j = 2, . . ., J − 1,
(k)

if Jk = 2, xc

:= x(k,1) or x(k,2) (select randomly),

(k)
xc

:= x(k,1) .
if Jk = 1,
(k)
At the end of each iteration the point xc and the trust region radius Δk for the iteration k
(k)
are stored in a database. If xc happens to be a previously visited point (for k > 0) i.e., if ∃i ∈ {1,
(k)

2, . . ., k − 1}, such that xc

(i)

= xc , the trust region radius is modiﬁed as Δk := ρΔi , and if the
(k)

new Δk value is greater than τ , xc is the center point for the local model for the next iteration;
(k)
otherwise xc is accepted as a Pareto optimal point (and excluded from further consideration as an
isolated point) and the above procedure is repeated until a new isolated point is found.

523

524

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

Step 2: Surrogates
The algorithm uses a linear Shepard method (LSHEP from [16]) to approximate a response surface
(k)

within a trust region. The isolated point xc determined in the previous step serves as the center
point for the local trust region with radius Δk taken as the intersection of the local trust region
(k)
box x | x − xc ∞ ≤ Δk with the box [l, u] deﬁned by the variable bounds l ≤ x ≤ u. A tuning
parameter for DIRECT allows a user to control the exploration mode for DIRECT (local versus
global). The number of points to be sampled can be speciﬁed as an input to DIRECT, as for a Latin
hypercube, the diﬀerence being deterministic adaptive rather than random point placement. The
points to be sampled using DIRECT are based on the value of the aggregate objective constructed as
a convex combination of the two objective functions. At the end of a single run of DIRECT, a data
set D(k) =

(k)

x, f1 (x), f2 (x) | x ∈ Xd

(k)

of design samples x ∈ Xd

and system analyses f1 , f2 is

generated. Two LSHEP [16] surrogates f˜1 and f˜2 are built for the two objective functions f1 and
f2 using the database D(k) and all the sampled points from previous iterations. At every iteration,
several single objective optimization problems are formulated using convex combinations of these
surrogates. Two of the weight combinations used have the values of 0 and 1 for each iteration (to
compute the individual optima of the two surrogates). One or two additional weights are derived
using the adaptive weighting scheme of Ryu et al. [15]. Based on the value of the objective function
(k)

at the center point xc for an iteration and its two neighbors, at most two additional weights wp
(k)
and wq are computed at every iteration as follows. Let x(k,i) := xc .
If Jk > 2, wp = [w1p , w2p ] = cp (−f2 (x(k,i) ) + f2 (x(k,i−1) ) , (f1 (x(k,i) ) − f1 (x(k,i−1) )
wq = [w1q , w2q ] = cq

(−f2 (x(k,i+1) ) + f2 (x(k,i) ) , (f1 (x(k,i+1) ) − f1 (x(k,i) )

if Jk = 2, wp = [w1p , w2p ] = cp (−f2 (x(k,2) ) + f2 (x(k,1) ) , f1 (x(k,2) ) − f1 (x(k,1) )
if Jk = 1, wp = [w1p , w2p ] = [0.5, 0.5]
where cp and cq are constants leading to w1p + w2p = 1 and w1q + w2q = 1. Thus, the surrogates
constructed at each iteration include
s1 = f˜1 , s2 = f˜2 , and
if J k > 2, sp = w1p s1 + w2p s2 , sq = w1q s1 + w2q s2 ,
if J k ≤ 2, sp = w1p s1 + w2p s2 .
Step 3: Solving optimization problems
Each of the surrogates constructed in Step 2 is optimized using MADS to get a candidate solution.
Thus at the end of each iteration at most four candidate Pareto solutions are obtained, evaluated
to get their true function values, and then nondominated solutions among those are selected. Let
(k)
X∗ be a set of these nondominated solutions. An updated set X (k+1) of nondominated points is
(k)
(k)
obtained at the end of iteration k by comparing all points from the union X (k) ∪ Xd ∪ X∗ .
These three steps are iterated by the algorithm until a stopping condition is satisﬁed. In practice,
termination is either set to a ﬁxed number of iterations, or when the value of the star discrepancy
(discussed in detail in the next section) drops below a predeﬁned threshold.
4.
4.1.

Numerical Evaluation
Test Problems

The biobjective optimization algorithm is evaluated using test problems from [5]. Each test problem
is intended to illustrate the capability of the algorithm to handle diverse types of Pareto fronts. The
objective functions for these problems are constructed in such a way that
x = x1 , . . ., xm , . . ., xn ,

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

f1 (x) = f x1 , . . ., xm ,
f2 (x) = g xm+1 , . . ., xn ) · h f (x1 , . . ., xm , g(xm+1 , . . ., xn ) .
Diﬃculties in test problems are introduced by choosing appropriate functions f , g, and h [5].
The test problems that are considered here are deﬁned through speciﬁc choices of f , g, and h.
4.1.1. Problems 1 and 2: multimodal biobjective functions with convex and nonconvex front
The test problems in this category have a multimodal objective function f2 with two local minima
and a unique global minimum. The convexity of the Pareto front is achieved by the function h
deﬁned as
1 − (f /g)α , if f ≤ g;
h(f, g) =
0,
otherwise.
The parameter α controls the shape of the Pareto front (nonconvex if α > 1 and convex otherwise).
g and f as deﬁned in [15] are
g(x2 ) =

4 − 3 exp(−
4 − 2 exp(−

x2 −0.2 2
),
0.02
x2 −0.7 2
),
0.2

if 0 ≤ x2 ≤ 0.4;
if 0.4 < x2 ≤ 1.

f (x1 ) = 4x1 , where x1 ,x2 ∈ [0,1].
The values used in this paper for α are 0.25 and 4 for convex and nonconvex Pareto fronts, respectively.
4.1.2. Problem 3: discontinuous Pareto front
The functions for a discontinuous Pareto front as deﬁned in [5] follow.
h(f ,g) = 1 − (f /g)α − (f /g) sin(2πqf ),
f (x1 ) = x1 ,
g(x2 ) = 1 + 10x2 ,
where x1 , x2 ∈ [0, 1], α > 0, and q is the number of discontinuous regions. The values used in this
paper are α = 2 and q = 4.
4.1.3. Problem 4: nonuniformly represented Pareto front
A choice of a nonlinear function for f introduces nonuniformity of the solution set along the Pareto
front. The function f as deﬁned in [5] is
f (x1 ) = 1 − exp(−4x1 ) sin(5πx1 )4 ,
x1 , x2 ∈ [0, 1]. The functions h and g are the same as that for the problem with a nonconvex Pareto
front from Section 4.1.1. Deb [5] shows that for a uniformly spaced points in x1 , solutions cluster
around f1 = 1, and hence would be a good test for evaluating the method.
4.1.4. Problem 5: high dimensional search space
The way the functions f , g, and h are proposed by Deb [5] facilitates an easy extension to a problem
with higher dimensional search domain. The following deﬁnitions are considered for f , g, and h to
formulate a test problem with twenty design variables.
f (x1 ) = x1 ,
20
g(x2 ,· · ·,x20 ) = 1 + 10 ∗ 19 + i=2 x2i − 10 cos(4πxi ),
2

h(f ,g) = 1 − x1 /g , where x1 ∈ [0, 1] and x2 ∈ [−5, 5].
Results for all the test problems are presented and discussed in Section 4.5.
4.2. Comparison with BiMADS
A scalarization method called BiMADS [2] solves a biobjective optimization problem through a
series of single objective formulations using MADS, and attempts to obtain a uniform coverage of

525

526

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

the Pareto front, even in the case when the Pareto front is nonconvex or disjoint. Results for the
test problems of 4.1 are compared with the results using BiMADS. For the comparison, the C++
implementation of BiMADS available with the software package NOMAD (version 3.5.1) [7] was
used. For each test problem the starting point was set to the center of the design space. The
algorithm was terminated using the stopping condition of the total budget in terms of the number
of blackbox evaluations (MULTI OVERALL BB EVAL).
4.3.

Parameter setup

For the numerical comparisons here the parameter MULTI OVERALL BB EVAL was set to one
thousand evaluations for all the problems.
The proposed method uses a Fortran 95 implementation VTDIRECT [12] of the algorithm
DIRECT and a C++ implementation NOMAD (version 3.5.1) of the algorithm MADS.
The initial parameter setup for VTDIRECT for the preprocessing step follows. The design
variables lower bound, LB := [l1 , . . ., ln ], the design variables upper bound, U B := [u1 , . . ., un ],
and := 0.1, where is a tuning parameter that controls the exploration mode of DIRECT (local
versus global). The upper limit on the number of true function evaluations, eval lim was set to
two hundred runs for the problems in 4.1 and 4.4, to ﬁve hundred runs for the problem in 4.3,
and to twenty ﬁve for the problem in 4.2. The extent to which the global search was performed
was based on the nature of the test problem under consideration (conservative for simple problems
and extensive for diﬃcult ones like with multimodal objectives or high dimensional design space).
VTDIRECT is run twice with this setup for two single objective optimization problems of the form,
(1 − w)f1 + wf2 where w is set to 0 for the ﬁrst run and to 1 for the second run. If a point already
exists in the database within a tolerable distance (1E−13) from the current sampled point, then the
point in the database is used instead of repeating the system analysis at the sampled point.
The parameter setting for MADS and VTDIRECT for the main iterative procedure follows.
MADS: the starting point x(0) is set to the center point determined for that iteration, the bound
constraints for the MADS run are set to the local model boundaries, the initial mesh size is set to
0.01, and stopping criteria are set for the minimum mesh size at 0.0001 and the maximum number
of true function evaluations at 50. VTDIRECT: LB and U B are set to the local trust region
boundaries for that iteration, eval lim := 2n + 3 where n is the number of design variables, and
:= 0.1. The single objective formulation is the same as the one used in the preprocessing step.
The ﬁrst 2n + 1 sampling locations using DIRECT are always the same (the center point c of the
local model and c ± δe(i) , i = 1,. . ., n for the n coordinate directions for the problems with n design
variables. The locations for the last two samples depend on the aggregate function values after
the single objective formulation. Hence for the second run of VTDIRECT (w = 1) the ﬁrst ﬁve
locations are the same as those for the ﬁrst run (w = 0), and the last two sampling locations could
diﬀer from those of the ﬁrst run based on the aggregate function values at the ﬁrst ﬁve locations.
Thus at the end of the sampling process (two runs of VTDIRECT for the weights 0 and 1) seven to
nine samples are generated at each iteration. The local trust region parameters are set as Δ := 0.2,
ρ := 0.5, and τ := 0.001.
4.4. Performance Measures
Four performance measures used to evaluate the algorithm are accuracy (closeness to the true
Pareto front) GD, dispersion (distribution of the obtained Pareto optimal set) D∗ , eﬃciency (number of true function evaluations) NF E , and representativeness (number of unique Pareto optimal
solutions obtained) NP S .
To measure the accuracy of the obtained Pareto optimal solutions, generational distance (GD)
measure introduced in [17] is used. GD = 0 indicates that all the obtained solutions belong to the
true Pareto front. A uniform 500 × 500 grid of closely spaced points is evaluated to obtain a set H
of true Pareto optimal solutions. The set H is used to compute the generational distance for each
test problem. The minimum Euclidean distance δˆ of each solution (from the ﬁnal Pareto optimal

527

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

1.4
1.2
1.0
0.8
0.6
0.4
0.2
0.0
0.0

b
1.0
0.8
f2

f2

a

0.6
0.4
0.2

0.5

1.0
f1

1.5

0.0
0.0

2.0

0.2

0.4

0.6

0.8

1.0

f1

Figure 1. (a) BiMADS and (b) the proposed method with a budget of 1000 (maximum) evaluations
each for the problem 4.1.1 (convex Pareto front, circles ).

1.4
1.2
1.0
0.8
0.6
0.4
0.2
0.0
0.0

b
1.0
0.8
f2

f2

a

0.6
0.4
0.2

0.5

1.0
f1

1.5

2.0

0.0
0.0

0.2

0.4

0.6

0.8

1.0

f1

Figure 2. (a) BiMADS and (b) the proposed method with a budget of 1000 (maximum) evaluations
each for the problem 4.1.1 (nonconvex Pareto front, circles).

set obtained for each test problem) from the elements in H is computed, and then GD is computed
as follows.
n
ˆ2
i=1 δ
GD =
n
where, n is the cardinality of X.
A precise mathematical measure, star discrepancy, is introduced in this paper for assessing
the distribution of the obtained Pareto optimal solutions. General discrepancy [14] of a sequence
d
SN = {sN
i }, where i = 1, . . ., N and si ∈ [0, 1] is deﬁned as
D(β; SN ) = sup |
B∈β

A(B; SN )
− λd (B) |,
N

where β denotes a family of Lebesgue measurable subsets of [0, 1]d , A(B;SN ) is the number of points
from SN that are also elements of B, and λd (B) is the d-dimensional Lebesgue measure of B. For
practical purposes, a variation of general discrepancy, star discrepancy [4], [14], is often used. Let
d
J ∗ denote the family of Lebesgue measurable subsets of [0, 1]d of the form i=1 [0, vi ). Then the
star discrepancy of the sequence SN is deﬁned as
∗
DN
(SN ) = D(J ∗ ; SN ).
∞

A family of sequences {SN }N =1 is said to be uniformly distributed if and only if
∗
(SN ) = 0.
lim DN

N →∞

528

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

b

f2

f2

a
1.0
0.8
0.6
0.4
0.2
0.0
0.2
0.4
0.0

0.2

0.4
f1

0.6

0.8

1.0
0.8
0.6
0.4
0.2
0.0
0.2
0.4
0.0

0.2

0.4
f1

0.6

0.8

Figure 3. (a) BiMADS and (b) the proposed method with a budget of 1000 (maximum) evaluations
each for the problem 4.1.2 (Pareto optimal points as circles).

b
1.0
0.8
f2

f2

a
3.5
3.0
2.5
2.0
1.5
1.0
0.5
0.0
0.0

0.6
0.4
0.2

0.2

0.4

0.6

0.8

1.0

0.0
0.0

f1

0.2

0.4

0.6

0.8

1.0

f1

Figure 4. (a) BiMADS and (b) the proposed method with a budget of 1000 (maximum) evaluations
each for the problem 4.1.3(Pareto optimal points as circles).

Typically, Pareto fronts in biobjective optimization problems are one-dimensional manifolds, and
the length of a Pareto curve constitutes its volume. For each test problem, the length of the resulting
Pareto front is approximated by adding up the pairwise Euclidean distances δ¯j for all points xi in
the Pareto optimal set in descending order of f1 values,
J−1

δ¯j = F (xj ) − F (xj+1 ) 2 ,
1

where J is the cardinality of the Pareto optimal set, and then normalized to unit length. Each
si indicates the normalized piecewise linear distance of each point in the Pareto optimal set (in
descending order of f1 value) from the x1 . The star discrepancy is computed using J ∗ of the form
[0, si ). The next subsection presents the Pareto optimal fronts for the ﬁve test problems along with
all four performance measures (GD, D∗ , NF E , and NP S ).
4.5. Results and Discussion
Figures 1b—5b and the Table 2 show that the algorithm successfully ﬁnds a fairly good approx∗
values in
imation (GD values in Table 2) to the global Pareto front with a well distributed (DN
Table 2) Pareto optimal set for diverse types of biobjective optimization problems. The method
presented in this paper using the adaptive weighting scheme of Ryu et al.[15] and the guided sampling using DIRECT eﬀectively approximates a Pareto front by gradually moving towards the true
Pareto front by ﬁlling the gaps in the incumbent nondominated point set. In that sense it gradually
learns the shape of the true Pareto front and concentrates its computational eﬀort in potentially
optimal regions. Both the quality and the quantity of the obtained Pareto optimal set improves

529

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

b
1.0

0.8

0.8

0.6

0.6

f2

f2

a
1.0

0.4

0.4

0.2

0.2

0.0
0.0

0.2

0.4

0.6

0.8

1.0

0.0
0.0

0.2

f1

0.4

0.6

0.8

f1

Figure 5. (a) BiMADS and (b) the proposed method with a budget of 1000 (maximum) evaluations
each for the problem 4.1.4.(Pareto optimal points as circles)

Table 2
Performance measures: proposed method

Table 1
Performance measures: BiMADS
Problem
Problem
Problem
Problem
Problem

1
2
3
4
5

GD

∗
DN

0.4475
0.9766
0.0017
0.8693
0.0000

0.1045
0.4736
—
0.3814
0.0888

NF E NP S
1000
1000
1000
1000
1000

260
371
178
276
35

GD
Problem
Problem
Problem
Problem
Problem

1
2
3
4
5

0.0029
0.0024
0.0022
0.0565
0.0018

∗
DN

NF E NP S

0.1477 998
0.0411 994
— 999
0.0609 1000
0.3517 967

144
114
129
71
52

with the increase in the number of iterations of the algorithm. The distribution of the global (preprocessing) and the local search in the course of the algorithm plays an important role in directing
the results towards global Pareto fronts. However, it is a trade oﬀ between the number of true
function evaluations (NF E ) and the accuracy (GD).
While performing the numerical experiments it was observed that the behavior of BiMADS
is sensitive to the parameter MULTI OVERALL BB EVAL used as the stopping condition. This
is due to the way the algorithm BiMADS is implemented in NOMAD package — when using the
MULTI OVERALL BB EVAL parameter, it allows twice as many evaluations on the ﬁrst run than
on the others. The ﬁrst run starts by performing a latin hypercube sampling. This beneﬁts all
the subsequent runs as it generates many points in the space of variables. However, due to this
setup the maximum number of MADS runs for each iteration of BiMADS changes as the parameter
MULTI OVERALL BB EVAL changes, and hence may not produce consistent results. This could
be observed by looking at the local Pareto fronts obtained by BiMADS for the problems 4.1 and
4.3 (Fig. 1, 2, and 4) and fairly uniformly distributed global Pareto fronts for the problems 4.2 and
4.4 (Fig. 3 and 5).
∗
, NF E , and NP S —for the ﬁve
Tables 1 and 2 show the four performance measures—GD, DN
problems in 4.1 using BiMADS and the proposed method respectively. Computing the star discrepancy for a discontinuous Pareto front is rather diﬃcult and has not been considered in the current
implementation.
The most expensive step in the surrogate building process is the statistical sampling used to generate a database for a local approximation at every iteration of the algorithm. The major diﬃculty
with these traditional techniques is the number of design points required in high dimensional search
domains. For example, CCD based PAWS scheme would require a total of 220 + 2 ∗ 20 + 1 = 1048617
design points at every iteration for the problem 4.1.4 with 20 design variables. The novel idea presented in this paper of using the algorithm DIRECT as a sampling strategy alleviates this problem
as it needs only 2n + 1 = 41 design points at each iteration. The advantage of using DIRECT over
traditional sampling techniques is that DIRECT adaptively samples at box centers rather than at
the corners (2n factor for CCD). That makes the number of design points linear in the number of
design variables using DIRECT.

530

5.

Shubhangi Deshpande et al. / Procedia Computer Science 18 (2013) 521 – 530

Conclusion and Future Work

A new Pareto front approximation algorithm for biobjective optimization problems was proposed
and applied to ﬁve test problems from the literature designed to illustrate some inherent diﬃculties
of biobjective optimization problems. The algorithm was evaluated by studying four performance
measures, generational distance (proximity to the true Pareto front), star discrepancy (distribution
of the Pareto optimal set), the number of unique Pareto optimal solutions found, and the number
of true function evaluations, and results were compared with those using a biobjective optimization
algorithm BiMADS. Results show that the algorithm is eﬃcient, oﬀers an arbitrarily close approximation to the true Pareto front, and ﬁnds global Pareto optimal solutions for variety of problems
with diverse types of fronts. An extension of the current work would be for problems with more
than two objectives, which requires revisiting the current adaptive weighting scheme for more than
two objectives and also a new approach to compute the volume of Pareto front manifolds in higher
dimensions for the star discrepancy.
References
[1] Audet C. and Dennis J. E., “Mesh adaptive direct search algorithms for constrained optimization,”
SIAM Journal on Optimization, Vol 17, No. 1, pp. 188-217, 2006
[2] Audet C., Savard G., and Zghal W., “A mesh adaptive direct search algorithm for multiobjective
optimization,” European Journal of Operational Research, Vol. 204, pp. 545-556, 2010
[3] Audet C., Savard G., and Zghal W., “Multiobjective optimization through a series of single objective
formulations,” SIAM Journal of Optimization, Vol. 19, pp. 188-210, 2008
[4] Caﬂisch R. E., “Monte Carlo and quasi-Monte Carlo methods,” Acta Numerica, vol. 7, pp. 1–49, 1998
[5] Deb K., “Multiobjective genetic algorithms: problem diﬃculties and construction of test problems,”
Evol. Comput., Vol. 7. pp. 205—230, 1999
[6] Deb, K., Pratap. A, Agarwal, S., and Meyarivan, T., “A fast and elitist multiobjective genetic algorithm:
NSGA-II,” IEEE Transaction on Evolutionary Computation, 6(2), pp. 181-197, 2002
[7] Digabel S. L. and Tribes C., NOMAD user guide version 3.5.1, Mar, 2012
[8] Deshpande S. G., Watson L. T., and Canﬁeld R. A., “Biobjective Optimization using Direct Search
Techniques ,” in IEEE SoutheastCon, Jacksonville, FL, Apr 4-7, 2013
[9] Eichfelder G., Adaptive Scalarization Methods in Multiobjective Optimization (Vector Optimization),
Springer, 2008
[10] Gray G. A. and Fowler K. R. (2011), “Traditional and hybrid derivative-free optimization approaches
for black box functions,” Computational Optimization, Methods and Algorithms, 356

125-151
[11] He J., Watson L. T., Ramakrishnan N., Shaﬀer C. A., Verstak A., Jiang J., Bae K., and Tranter W. H.,
“Dynamic data structures for a direct search algorithm,” Computational Optimization and Applications,
Vol. 23, pp. 5–25, 2002
[12] Jones D. R., Perttunen C. D., and Stuckman B. E., “Lipschitzian optimization without the Lipschitz
constant,” Journal of Optimization Theory and Application, Vol. 79, No. 1, pp. 157-181, 1993
[13] Kugele S. C., Watson L. T., and Trosset M. W., “Multidimensional numerical integration for robust
design optimization,” in ACM Southeast Regional Conference, pp. 385-390, 2007
[14] Ryu J., Kim S., and Wan H., “Pareto front approximation with adaptive weighted sum method in
multiobjective simulation optimization,” in Proceedings of the 2009 Winter Simulation Conference, pp.
623-633, Austin, TX, USA, 2009
[15] Thacker W. I., Zhang J, Watson L. T., Birch J. B., Iyer M. A., Barry M. W., “Algorithm 905: SHEPPACK: modiﬁed Shepard algorithm for interpolation of scattered multivariate data,” ACM Trans. Math.
Software, vol. 37, pp. 1-20, 2010
[16] Veldhuizen D. A. and Lamont G. B, Evolutionary Computation and Convergence to a Pareto Front,
Stanford University Bookstore, 1998
[17] Wang L., Ishida H., Hiroyashu T., and Miki M., “Examination of multiobjective optimization method
for global search using DIRECT and GA,” in IEEE World Congress on Computational Intelligence, pp
2446–2451, 2008

