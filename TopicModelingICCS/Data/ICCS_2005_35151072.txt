H2O Metacomputing - Jini Lookup and Discovery
Dirk Gorissen, Gunther Stuer, Kurt Vanmechelen, and Jan Broeckhove
Antwerp University, Middelheimlaan 1, 2020 Antwerp, Belgium
Dirk.Gorissen@student.ua.ac.be,
{Gunther.Stuer, Kurt.Vanmechelen, Jan.Broeckhove}@ua.ac.be

Abstract. Because of its inter-organisational, collaborative use of computational
resources, grid computing presents a severe interoperability challenge to grid application developers. Different middleware technologies need to be bridged in
order to fully utilise the power the grid provides. This paper describes a bridge
between two such middlewares: The H2O Metacomputing Framework and Jini
technology. The paper details how H2O resources may be registered, discovered
and used as Jini1 services. Both technologies are introduced, design decisions
discussed and a fully functional implementation presented.

1

Introduction

The term Grid refers to an infrastructure that enables the integrated, collaborative use of
(high-end) computers, networks, databases, and scientific instruments owned and managed by multiple organisations [1]. Consequently, by definition, grid computing implies
collaboration and coordination across organisational and geographical boundaries. This
increased scale in turn means that the environment we are dealing with is increasingly
heterogenous and that interoperability becomes a necessity rather than a feature. This
interoperability manifests itself at three levels: the underlying network architecture, the
middleware, and the administrative and organisational structure.
This paper will concentrate on the middleware. It will describe a bridge between
two grid technologies: Emory University’s H2O Metacomputing Framework [2] and
Sun Microsystems’ Jini technology [3]. More concretely we will describe a way to
automatically publish H2O resources as Jini services in order to extend the reach and
flexibility of the resulting middleware.
We start off with an introduction to both H2O and Jini in sections (2) and (3) followed by a brief discussion of their integration in section (4). Section (5) then goes on to
analyse the different design decisions that need to be made while section (6) describes
the actual implementation itself. We conclude the paper in section (7) with a summary
and an outline of future work.

2

H2O

H2O is developed by Emory University and is a novel component-based, serviceoriented framework for distributed metacomputing. Adopting a provider-centric view
1

Jini and Java are registered trademarks of Sun Microsystems.

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 1072–1079, 2005.
c Springer-Verlag Berlin Heidelberg 2005

H2O Metacomputing - Jini Lookup and Discovery

1073

of resource sharing it provides a lightweight, general-purpose, Java based, configurable
platform. H2O adopts the microkernel design philosophy: Resource owners host a software backplane (called a kernel) onto which owners, clients, or third-party resellers may
load components (called pluglets) or component-suites that deliver value added services
without compromising owner security or control [2]. For easy identification every H2O
resource (kernel or pluglet) is identified by a unique URL (eg: http://myKernel:7799/).
The relationship between a kernel and its pluglets is best understood in terms of
an analogy with servlets. Servlets are Java entities used to perform cgi-like processing
tasks and need to be deployed within a servlet-container (eg: Tomcat from the Apache
Jakarta project). In the same way as Tomcat is a container for servlets, H2O is a container for services, aka pluglets.
H2O was designed to cater for lightweight, general purpose, loosely coupled networks where resources are shared on a P2P basis. Consecutively, H2O does not target
large scale computer networks (like Globe [4] does) nor does it aim for adoption in high
speed, performance critical networks (like TAO [5]).
While the kernel is completely under the resource owner’s control, authorised clients
may configure, securely use and even freely deploy new pluglets into the kernel. It is
this last aspect that makes H2O unique. Namely, by separating the service provider
from the resource owner it becomes possible for any authorised third party to deploy
new services in a running kernel.

3

Jini

Jini was developed by Sun Microsystems in the late 1990’s and many of the people who
created and championed it are the same people who originally created and championed
certain aspects of Java. Jini is a distributed, service-oriented system based on the idea
of federating groups of users and the resources required by those users. Jini’s overall
goal is to turn the network into a flexible, easily administered tool on which resources
can be discovered and used by human and computational clients.
Jini services are represented as Java interfaces and are registered with the Jini Lookup
Service (LUS). The LUS plays the role of the service broker and is the bootstrapper of
a Jini federation. It is automatically discovered through the discovery protocol (spontaneous computing) and its services are queried through the lookup protocol. Jini further
supplies a distributed transaction and event manager, pluggable transports, an extensive
(mobile code) security framework and a self-healing mechanism based on leasing. The
latter means that each service is granted a lease when it joins the Jini federation and it
is up to the service to renew this lease as long as it wants to remain part of the federation. In this way zombie services are automatically removed. All this makes Jini a very
robust platform for grid computing, one that safely accommodates the Eight Fallacies
of Distributed Computing [6].
A big advantage of Jini is its flexibility. Jini is basically a set of APIs that define how
services connect to one another and not what those services are, what they do or how
they work. Applications of Jini technology range from autonomous robotic swarms [7],
grid middleware (JGrid [8, 9], ICENI [10], JISGA [11]), HPC [12], to online air ticket
reservation systems (Orbitz.com).

1074

D. Gorissen et al.

Jini also enjoys a large community with numerous projects that extend the reach
and capabilities of the Jini framework. Examples include Judy [13] (integration of Jini
and Webservices) and Rio [14] (provides dynamic service containers, monitoring, load
distribution, QoS enforcement and Resource Cost analysis mechanisms).

4

Building Bridges

The features and properties of Jini such as spontaneous, ad hoc networking, failure
resilience, service discovery and the service-oriented programming model make it a
very suitable base for creating dynamic, reliable grid systems. Despite this fact, little
work has been done in creating Jini-based grid systems. This is mainly due to a number
of persistent misconceptions, ie. Jini is just for devices, it is Java only, it wont work with
webservices, it is not secure, Jini is tied to RMI, etc. All of which have been proven to
be wrong [15].
While both H2O and Jini provide service-oriented resource abstraction layers, the
major difference between the two is the conceptual approach. H2O strives to group services into one, homogeneous container. This provides a uniform, well defined paradigm
for services to operate in, making tasks such as authentication and resource access easier to manage. In contrast, Jini is much more distributed and loosely coupled in nature,
placing no restrictions on how services are deployed. Another difference is that, in addition to the resource abstraction, Jini provides discovery and registration protocols to
enable dynamic, spontaneous computing.
It should now become clear that both technologies perfectly complement each other.
Jini excels in exactly that what H2O lacks (a registration and discovery scheme) and
vica versa. We will now go on to describe how H2O can be extended with Jini registration and discovery support. In this way a prospective H2O user no longer needs a priori
knowledge of the location of H2O resources (kernels and pluglets).

5

Design Decisions

Before we outline how we implemented such registration support, a discussion concerning the different design decisions is in order.
Our investigation will be subdivided into four sections: the ’What’, the ’Who’, the
’When’ and the ’How’.
5.1

What to Register

The first question we need to ask is what do we want to register. Simply the kernel,
or the individual pluglets as well? The second choice results in each pluglet receiving
a separate entry in the LUS that must be kept up to date. The complications that arise
from this are discussed later on. The other option would be to only register the kernel
and keep the pluglets safely hidden. A discovery wrapper class could then be used to
hide kernel access methods, effectively making pluglet discovery transparent for the
client. However, this mechanism does introduce significant overhead and restricts the

H2O Metacomputing - Jini Lookup and Discovery

1075

discovery of H2O services to clients with H2O access only (the wrapper will require
H2O login credentials). We therefore opt for the first method.
5.2

Who Will Do the Registering

Next we have to ask ourselves who will ultimately bear the registration burden. This
is important since different entities have access to different information and thus have
different registration powers. We will consider 3 candidates: The kernel itself, a pluglet,
or any interested third party.
The first is not desirable since it requires altering the kernel codebase and would
break the H2O microkernel philosophy. A kernel and its pluglets should be unaware of
any registration scheme.
Another possibility pushes the registration responsibilities completely away from
H2O, towards any interested third party with enough information to do the job. For
example: any Jini knowledgeable entity who knows the kernel or pluglet URL is free to
register this information in the Jini lookup service. A client with login access to H2O
could do even more: it can obtain a kernel/pluglet reference and register this together
with the URL. However, registering a live kernel reference would allow unrestricted
access to the H2O kernel, something that should be avoided. This options raises some
leasing questions as well. Namely, how will the third party guarantee that the proxy it
registers actually represents a live kernel?
The third option can be seen as a mixture of the above two. The idea is to let a designated registration pluglet do the registering. This way we don’t have to litter the kernel
with registration code and still maintain some degree of control. The lease problem is
also solved though it involves a little more work. Concentrating all registration services
in one designated pluglet means that this one pluglet is then responsible for handling
all Jini leases. This implies that:
1. The registration pluglet needs to keep track of pluglet state changes and all the
leases it holds so far. When a pluglet is destroyed the registration pluglet needs to
cancel the relevant lease.
2. If the registration pluglet dies or is destroyed for some reason all the other pluglets
are automatically removed from the LUS since their leases are no longer renewed.
(1) is possible through some extra coding and we we assume (2) to be unlikely.
5.3

When to Register

A third, overlapping question is “When should H2O resources be registered?”. To answer this we have to discriminate between kernels and pluglets. We commence with the
kernel case, kernel registration can occur on startup or at run time.
The option that comes to mind first is to register the kernel automatically on startup.
The only sensible way to achieve this is through a registration pluglet that is automatically deployed during the kernel bootstrap process. The pluglet then performs the
registration as soon as it gets loaded during kernel startup.
The other option is to register at runtime. Again a registration pluglet is used but the
kernel now has to be registered through a manual call to a method like regKernel().

1076

D. Gorissen et al.

Registering pluglets is handled similarly. Pluglets can be registered at deployment
time or at some later stage in their life. A registration pluglet can take care of both
cases by (1) listening for kernel generated pluglet deployment events and performing
the registration when they occur or (2) by providing a method
like registerPluglet(String name) that can be manually invoked.
5.4

How to Register

Having decided who will do the registration and at what time, we can now consider how
the actual registration will take place. We list the different possibilities.
Resource URL. The easiest option is to simply use resource URLs. Each H2O kernel
and pluglet is identified by a unique URL (eg: http://myhost:7799/myPluglet). Registering these means that the client no longer needs a H2O URL on startup, it can discover
one itself. A wrapper class can be written that discovers a LUS, finds the appropriate
H2O service (kernel or pluglet) and uses the thereby obtained URL’s to perform a H2O
login.
Though easy to implement, this approach does have a number of downsides:
– A bundle of URLs contain no information about the underlying kernel. Although
extra meta data can be attached in the form of Jini Entry objects this metadata is
constrained to being semi-static in nature (eg: version, name, application domain,
underlying platform, etc). More interesting, faster changing attributes such as load,
available pluglets, etc would require an additional login step first.
– It is impossible to perform service interface based lookups, the standard way of
discovering services in a Jini system.
Raw Remote Reference. Completely orthogonal to registering a URL is registering
a live, Java, remote reference which points back to a kernel/pluglet. The obvious objection here, among others, is that distributing such a reference gives anybody, free,
unconditional access to the kernel. Effectively bypassing every H2O security mechanism.
Resource URL & Service Interfaces. This option intends to be a compromise by ensuring that the registered proxy provides the resource URL and ’implements’ every
service interface. The catch is that the proxy only provides the interface, but not its implementation (invocations would throw exceptions). This ’empty box’ approach allows
interface based lookup while forbidding unrestricted access.
Resource URL & Dynamic Information. A downside of the URL approach is that
the resulting proxy tells us nothing about the kernel it represents. It would be nice if a
client could choose a particular kernel based on dynamic attributes such as load, number of pluglets, etc. Enabling this requires registering the kernel under an interface that,
besides the kernel URL, provides methods to retrieve such dynamic information. The

H2O Metacomputing - Jini Lookup and Discovery

1077

implementation of these methods would be through a remote stub that, in accordance
with the microkernel design philosophy, calls back to a pluglet that provides dynamic
kernel monitoring. In this case the proxy that is registered is called a smart proxy since
it is more than just a simple stub. Note that this option assumes such dynamic information is allowed to be freely accessed. This option can also be combined with the
previous one.
Login Enabled Smart Proxy. A final option is to extend the smart proxy above with
a method that logs into the kernel the proxied resource belongs to without requiring an
explicit resource URL, as is usually the case. In practice this means that, in the kernel
case, the client would first lookup a proxy representing a kernel and then use it to log
into the H2O system by calling getKernelContext(Credentials). An explicit
URL parameter is no longer needed since the proxy contains one.
In the pluglet case the proxy additionally implements all functional interfaces (thus
allowing service interface based lookup) but only allows access to them if a login has
been performed first. This would effectively make the whole H2O system completely
transparent.

6

Proposed Implementation

Since we are working within a plug-in based paradigm the most natural approach is to
encapsulate all the registration logic into a separate pluglet and deploy it within a H2O
kernel. The goal is to have the pluglet, on deployment or when triggered, detect which
kernel it finds itself in and register it with a Jini LUS. The same goes for registering
pluglets. In this way any H2O kernel can easily be made ’Jini-aware’ by simply deploying a standard registration pluglet. Regarding the proxy architecture, we opt for a
configurable approach instead of forcing one particular method on the user. Depending
on the method invocation handler used to generate the proxy either the “Empty Box”
or “Login Enabled Smart Proxy” architecture is used. Thus it is the invocation handler
object that ultimately defines the behaviour of the proxy. Besides the two implementations described above users are free to define their own invocation handler in order to
customise the way method invocations are handled.
The functioning of the registration pluglet is as follows (see figure 1):
1. At deployment time, start the discovery process, register a proxy to the kernel in
every discovered LUS and listen for pluglet deployment events.
– To register the kernel the pluglet first looks to see if there is a monitor pluglet
available. If so, it is incorporated into the resulting proxy.
2. As soon as a deployment event arrives, obtain all relevant information from the
newly deployed pluglet.
3. Use this information to generate a proxy, supporting all functional interfaces, using
the specified invocation handler.
4. Register the object with the relevant Jini LUSs, and add the lease to the set of
managed leases.

1078

D. Gorissen et al.

Fig. 1. Pluglet Activity Diagram

Note that if the registration pluglet receives a pluglet destroyed event, it will remove
the corresponding lease form its lease map again.
In addition to the above an AutoPopulateNewLus switch further makes sure that newly
discovered LUSs are automatically populated with H2O resources.
Source code and documentation of the pluglet is freely available at: http://h2j.jini.org.
The pluglet described here is currently in use at the UA to maintain information
about available kernels and pluglets. This information is then used by grid application
developers and users to find available resources. For example, the registration pluglet
is currently being used within the context of an application that simulates the quantum
physical three cluster problem.

7

Summary and Future Work

In this paper we have demonstrated how we can use Jini to extend the H2O Metacomputing Framework with discovery and registration support. In this way H2O becomes
usable in a real world settings since clients no longer need a priori knowledge of service
URLs. An implementation of a Jini registration pluglet was described together with the
relevant design decisions.

H2O Metacomputing - Jini Lookup and Discovery

1079

Future work in this area will concentrate on adding features to the registration pluglet, developing a pluglet that encapsulates core Jini services (LUS, activation daemon,
event mailbox, ...) and on Jini-based H2O resource management in general. An interesting avenue that may be pursued is the attachment of GUIs to each registered proxy
to enable remote administration and enhance the client-side experience. This would be
possible through the Jini ServiceUI infrastructure which allows one to add complete
user interfaces to Jini services without any prior client-side installation.

References
1. Foster, I., Kesselman, C., Tuecke, S.: The anatomy of the grid: Enabling scalable virtual
organizations. Lecture Notes in Computer Science 2150 (2001)
2. Sunderam, V., Kurzyniec, D.: Lightweight self-organizing frameworks for metacomputing.
In: Proc. of 11 th IEEE International Symposium on High Performance Distributed Computing HPDC-11 20002 (HPDC’02), Edinburgh, Scotland. (2002) 119–122
3. Edwards, K.W.: Core Jini. 2 edn. Prentice Hall (2001)
4. Homburg, P., van Steen, M., Tanenbaum, A.: An architecture for a wide area distributed
system. In: Proc. of 7th ACM SIGOPS European Workshop, Connemara, Ireland. (1996)
75–82
5. Schmidt, D.C., Levine, D.L., Mungee, S.: The design of the TAO real-time object request
broker. Computer Communications 21 (1998) 294–324
6. Deutsch, P.: The Eight Fallacies of Distributed Computing (2004)
http://java.sun.com/people/jag/Fallacies.html.
7. Hawthorne, C.: Application of Jini technology to a Swarm of Autonomous Vehicles (2003)
Presentation at 7th Jini Community Meeting
http://www.jini.org/meetings/seventh/J7abstracts.html#swarm.
8. Juhasz, Z.: JGrid: Jini as a Grid technology. IEEE TFCC Newsletter (2003)
9. Juhasz, Z., Andics, A., Pota, S.: JM: A Jini Framework for Global Computing. In: Proc.
of 2nd International Workshop on Global and Peer-to-Peer Computing on Large Scale Distributed Systems at IEEE International Symposium on Cluster Computing and the Grid (CCGrid’2002), Berlin, Germany. (2002) 395–400
10. Furmento, N., Lee, W., Mayer, A., Newhouse, S., Darlington, J.: ICENI: An Open Grid
Service Architecture Implemented with Jini. In: Proc. of SuperComputing 2002, Baltimore,
USA. (2002)
11. Y.Huang: JISGA: A Jini-based Service-oriented Grid Architecture. The International Journal
of High Performance Computing Applications 17 (2003) 317–327 ISSN 1094-3420.
12. Ye, R., Hsu, W., Liu, Z., Vee, V.: Jini-enabled high performance computing. In: Proc. of
15th International Conference on Information Networking (ICOIN’01), Beppu City, Japan.
(2001) 145–152
13. Asberry, D.: The judy project, seamless integration of Jini with Webservices (2004)
http://judy.jini.org.
14. Reedy, D.: Project rio: A dynamic adaptive network architecture. Technical report, Sun
Microsystems (2004)
15. Creswell, D.: Jini Technology, Setting the Record Straight (2004)
http://www.dancres.org/jini_setting_straight.html.

