Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 2257–2266

International Conference on Computational Science, ICCS 2011

Using reinforcement learning to vary the m in GMRES(m)
Lisa Peairsa , Tzu-Yi Chena,∗
a Computer

Science Department, Pomona College

Abstract
While the original GMRES(m) iterative solver assumes the restart parameter m stays ﬁxed throughout the solve,
in practic varying m can improve the convergence behavior of the solver. Previous work tried to take advantage of
this fact by choosing the restart value at random for each outer iteration or by adaptively changing the restart value
based on a measure of the progress made towards computing the solution in successive iterations. In this work a
novel application of reinforcement learning to the problem of adaptively choosing values of m is described and then
compared to the two existing strategies on matrices from a range of application areas.
Keywords: iterative methods, reinforcement learning, GMRES(m)

1. Introduction
Scientiﬁc codes from a wide range of applications depend on eﬃcient solvers for large, sparse linear systems
(Ax = b). Direct solvers are robust but can be computationally expensive. As a result, when time or space are
limited, preconditioned iterative methods are often preferred. However, because they are less robust than their direct
counterparts, fast convergence to an accurate solution requires carefully choosing the solver, the preconditioner, and
the values of potentially several parameters for each.
Even as the number of options available to users of iterative solvers continues to increase, a clear understanding
of how to choose an eﬀective preconditioned solver for a particular system remains lacking. As a result, supervised
machine learning techniques such as decision trees and neural networks, and unsupervised machine learning techniques such as reinforcement learning, have been proposed as data-driven recommendation systems [1, 2, 3]. The
results for these machine learning based systems have been promising without being outstanding, perhaps because the
classiﬁcation tasks attempted have been too complex.
In this paper reinforcement learning is applied to a more focussed task within the broader context of choosing
a good preconditioned iterative solver for a speciﬁed system: given that varying the restart parameter m in restarted
GMRES can improve convergence behavior, can a machine learning system be trained to select potentially changing
values of m that work well? Section 2 surveys related work and Section 3 gives a brief introduction to reinforcement
learning before describing how it can be applied to adaptively select a restart parameter in each outer iteration of
GMRES(m). Section 4 discussed methodology and Section 5 compares two reinforcement learning based strategies
to three others: that of using a ﬁxed value of m as originally suggested for GMRES(m) [4], that of choosing m at
∗ Corresponding

author
Email addresses: lisa.peairs@gmail.com (Lisa Peairs), tzuyi@cs.pomona.edu (Tzu-Yi Chen)

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.246

2258

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

random as used in [5], and that of choosing m based on the angles between successive approximations to the solution
as suggested in [6]. The experimental results show that while the reinforcement learning approaches occasionally
outperform other strategies, its performance is essentially comparable to choosing restart values at random from the
same set of options and is typically not as good as the performance of a heuristic described in [6] that is based on
mathematical insight into the GMRES iterative solver.
The main contributions of this paper are the discussion of the eﬀect of varying the restart parameter m in GMRES(m),
the description of how reinforcement learning can be used to adaptively select values for m, and the insight provided
into the potential and challenges of using machine learning techniques for this type of numeric task.
2. Background
This study is most closely related to two other lines of research: adaptive methods for choosing an eﬀective restart
parameter for GMRES(m) and recommendation systems for preconditioned iterative solvers. This section brieﬂy
summarizes previous work in these two areas.
2.1. Choosing the m in GMRES(m)
In [4] both the basic GMRES iterative method and a restarted version called GMRES(m) are proposed. Since
GMRES requires O(n2 ) space on a matrix of size n × n whereas GMRES(m) requires only O(nm) space, the authors
of [4] recommend that users with limited space use GMRES(m) with the largest m that they can aﬀord. Unlike
GMRES, restarted GMRES(m) is not guaranteed to converge within n iterations since the exact solution may not lie in
any of the m-dimensional subspaces constructed by the solver. Nevertheless, GMRES(m) is a popular iterative method
used, for example, in studies such as those in [2, 5, 6, 7] with values between 10 and 60 for m.
While [4] proposes a static restart value, papers such as [7, 8, 9, 10, 11] suggest choosing m adaptively by running
each inner iteration for m iterations and then increasing the size of the subspace by running for some number of extra
iterations if little progress seems to have been made. In some cases the value of m is also updated for the following
outer iteration. The assumption is that a larger dimensional subspace should improve the likelihood of convergence.
While it seems reasonable to assume that convergence should improve as m increases, more recent work has found
that reducing m for some iterations can decrease both the time and space required to solve for certain systems. In [5] it
is observed that a heuristic in which m is assigned a random integer value between 10 and 30 in each outer iteration can
lead to convergence in fewer iterations than GMRES(30). Subsequent work [6] suggests that varying m can prevent
non-convergence, perhaps by avoiding alternating, a problem where the solution after each outer iteration alternates
between two insuﬃciently accurate approximations. In addition, even if the total iteration counts are identical, the
average computational cost per iteration may be reduced if m is allowed to vary.
2.2. Machine learning based recommendation systems
Within the context of choosing preconditioned iterative solvers, machine learning techniques have primarily been
applied to the general problem of suggesting a speciﬁc preconditioned iterative solver for a given system. Work along
these lines has tested supervised learning techniques including neural networks [1], decision trees [2], and support
vector machines [12]. Reinforcement learning was proposed in [3] as a way to design a system that would not just
recommend a solver but could also be used to compute the solution.
For all of the machine learning techniques above, the accuracy of the systems built was generally reasonable
without being outstanding and the performance always depended strongly on how similar the problem was to ones
that the system had seen before. For example, in [1] accuracy of over 95% was reported, but only when the system
being classiﬁed had been used in the training set. If the system had not been part of the training set the accuracy was
70% or 80% depending on how closely the system resembled those used for training. This behavior suggests that
these machine learning based systems had trouble generalizing. This could be a result of too many inputs being given
to the recommendation system, or perhaps a result of parameters for the individual machine learning techniques being
poorly tuned.
Reinforcement learning has also been applied to other sparse matrix problems such as selecting a storage format
that leads to fast matrix-vector multiplication [13].

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

2259

3. Using Reinforcement Learning
The fact that the recommendation systems all hit a performance barrier regardless of the learning technique used
leads to the question of whether machine learning techniques are practical for this type of numerical computation.
This work adds another data point and, in particular, a data point not about learning the behavior of a very complex
and open-ended problem but rather about learning in the context of a much more precisely deﬁned problem with a
limited number of inputs and a very clear metric of the quality of a solve. The question asked is: can reinforcement
learning be used to adaptively choose the restart parameter of GMRES(m)?
Because neural networks and decision trees are supervised machine learning techniques, they require having a
set of pre-existing knowledge on which to train. In contrast, reinforcement learning is an unsupervised machine
learning technique which seeks to gather knowledge through experimentation. The goal is to learn how to choose
intermediate actions in order to maximize a long term value. The learning takes place by choosing a sample problem
and repeatedly selecting an acceptable action, noting how the state of the system changes, determining the immediate
reward for performing that action, and using what is learned to update the value assigned to that state-action pair. The
hope is that after solving a number of sample problems, it is known for each possible state of the system the value
of taking each possible action in that state. This mapping of states and actions to values is referred to as the value
function.
3.1. Requirements for applying reinforcement learning
More formally, applying reinforcement learning to a speciﬁc problem requires deﬁning:
• a set of states S ,
• a set of acceptable actions A(s) for each possible state s ∈ S , and
• a reward function r(s, a) which returns a real number for every s ∈ S and a ∈ A(s).
In addition, independent of the speciﬁc application, any reinforcement learning system needs to have:
• a policy which determines which action to take given the current state and the current estimated value function,
• a function for updating the estimated value function Q based on local feedback from the reward function r, and
• initial values for the function Q.
Once the above parameters and functions have been deﬁned the system consists of a set of states and allowable
actions, and a value function which can recommend an action for any state. The system can now either be used as-is
to search for solutions to problems, or it can be used with a precomputed Q function. In the latter case the Q may
remain ﬁxed or may continue to be updated. For more information on reinforcement learning, see [14].
3.2. Application to GMRES(m)
Figure 1 outlines a reinforcement learning based system for selecting restart values for GMRES(m). One way to
deﬁne the parameters is as follows:
• the states are bins based on the magnitude of the residual norm,
• the set of actions is the same for every state and consists of the set of possible restart values for the following
iteration, and
• the reward function is a weighted combination of the restart value to be chosen, the angle between consecutive
residual vectors, the total number iterations so far, the immediately preceeding restart value, and information
about the matrix and preconditioner.
If the Q function is initially wholly unknown, the trial and error nature of reinforcement learning means many
iterations may be needed to arrive at an estimated value function that allows for good choices of restart values. In
addition, to avoid becoming stuck at a local optima, reinforcement learning is constantly updating the estimated value
function by periodically taking non-optimal actions. As a result, the real question is whether using reinforcement
learning with GMRES can improve the selection of m enough to justify the cost of estimating Q.

2260

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

input A, b


choose xo

_ _ _ _ _ _ _ _ _ 


If using RL,



Initialize Q-array.



 ﬁnd state using resid. 


_ _ _ _ _ _ _ _ _

/ chose m


?>=<
89:;
m1

w

89:;
?>=<
m2

w

89:;
?>=<
m3

y
#

+,

v
(
ﬁnd orthonormal basis
vectors which span
the Krylov subspace

s

...

r


ﬁnd ym ∈ Rm which
minimizes ||b − Axm ||2 where
xm = x0 + Zm ym and Zm
is the set of basis vectors

restart


calculate resid

_ _ _ _ _ _ _ _ _ _ _ _ _ 



If using RL, calculate the
reward and update Q-array.

_ _ _ _ _ _ _ _ _ _ _ _ _





check restart condition:
is xm accurate enough?

@A

set x0 = xm

lll
ll no
l
l
l
ul

RRR

yes RR

RRR
(
terminate

Figure 1: GMRES(m) with restart parameter adaptively chosen using reinforcement learning.

&

...

'

89:;
?>=<
mk

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

2261

4. Experimental Methodology
In this paper ﬁve diﬀerent heuristics for choosing values of m are compared. They are: ﬁxed [4], random selection [5], angle-based selection [6], and two heuristics using reinforcement learning. This section ﬁrst presents these
ﬁve heuristics in more detail and then describes the testing methodology.
4.1. Heuristics for choosing m
The ﬁve heuristics are:
GMRES(m): the original restarted GMRES algorithm with a ﬁxed restart value of m.
randGMRES(m1 , m2 , . . . mk ): randomly chooses from a set of k restart values {m1 , m2 , . . . mk }. With this notation
the version tested in [5] would be written as randGMRES(10, 11, 12, . . . , 30) and randGMRES(m) would be
equivalent to GMRES(m).
angleGMRES(m1 , m2 , . . . mk ): chooses restart values from the ordered list {m1 , m2 , . . . mk } based on the convergence
rate as measured by the ratio between consecutive residual norms. If the norm of the residual is decreasing
at least as fast as some user-speciﬁed rate then the restart value is not changed. Otherwise, the restart value
changes to the next value in the list, cycling to the beginning of the list if necessary. With this notation, the
version in [6] would be written as angleGMRES(30, 27, . . . , 6, 3).
GMRES RL(m1 , m2 , . . . mk ): uses reinforcement learning with a reward function that returns the negative of the
restart value chosen.
angleGMRES RL(m1 , m2 , . . . mk ): identical to GMRES RL except the reward function adds in the selected restart
value scaled by the angle between consecutive residual vectors.
The above description of the two reinforcement learning based heuristics speciﬁes only the reward function. However, using reinforcement learning requires specifying states, actions, a reward function, a policy, and a function for
updating the value function. These are speciﬁed as follows:
• states: 11 states based on the magnitude of the norm of the residual. One state represents the initial conﬁguration
in the ﬁrst iteration when the residual has yet to be computed. One represents convergence, in which the norm
is less than or equal to 10−8 . The remaining states each represent a power of 10 between 1 and 10−8 .
• actions: choosing a value of m from varying subsets of {10, 20, 30, 40, 50, 60}. (The possible restart values was
restricted to a small set in order to allow more concrete comparisons between the diﬀerent heuristics.)
• policy: an -greedy policy, which means the action taken is the best one according to the current estimated
value function (1 − ) · 100 percent of the time, and the action taken is chosen at random the remaining ( · 100)
percent of the time. The heuristics tested here used = 0.2.
• update function: one-step Q-learning, which means the estimated value of Q is modiﬁed by the immediate
reward and an estimate of the future reward. This learning policy takes two parameters which control the
relative weights of the immediate and future rewards. The heuristics tested here used α = 1 and γ = 0.1, where
α and γ are described in [14, Section 6.5]. The estimated value function Q was initialized to return zero for
every state-action pair.
4.2. Testing Framework
Many other decisions were made regarding a range of issues in setting up the ﬁnal testing framework. These are
summarized below.

2262

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

4.2.1. Matrices
The 30 test matrices all ccme from the University of Florida Sparse Matrix Collection [15]. While most of the
matrices came from computational ﬂuid dynamics applications, others came from applications including acoustics
and circuit simulation. More importantly, the set of matrices selected had signiﬁcant overlap with the matrices used
in [5] and [6] in order to enable more meaningful comparisons with those results. Of the 12 matrices in [5], 5 are also
in this test set; of the 20 matrices in [6], 10 are also in this test set.
The solution vector was always the vector of all 1s and the right hand side b = Ax was calculated accordingly.
4.2.2. Preconditioner
In practice a preconditioner is almost always used in conjunction with any iterative solver [16]. Two incomplete
LU preconditioners were tested in these experiments.
One was RILUK, a level-based incomplete LU preconditioner described in [17]. RILUK takes two parameters:
level, which controls the amount of ﬁll and therefore the overall space required for the preconditioner, and ω, which
speciﬁes how diagonal values dropped during the incomplete factorization are handled. Experiments were conducted
with six level values from 0 through 5, and with eight ω values between 0.00 and 0.95. These ranges include
commonly recommended values.
The other was ILUT, a popular value-based incomplete LU preconditioner proposed in [18]. ILUT takes two
parameters: lfil, which controls overall space required by the incomplete factorization, and thresh, which determines how large an entry must be to be considered signiﬁcant. Experiments were conducted with 18 lfil values
between 1 and 50 inclusive and four thresh values between 0.0001 and 0.1. Again, these ranges include values that
are commonly used in practice.
4.2.3. GMRES(m) settings
The solver was judged to have converged when the norm of the residual was no greater than 10−8 ; this is a
commonly used value in practice. Most experiments were run with the maximum number of iterations set to 600,
although some data was collected with higher values in order to see whether that made a diﬀerence.
4.2.4. Data Collection
Because there is a random component to the randGMRES, GMRES RL, and angleGMRES RL heuristics, each
computation was executed 10 times. Unless otherwise speciﬁed, the number of iterations reported as being required
by a computation refers to the average number of iterations required over those 10 runs.
4.2.5. Implementation
The heuristics described in Section 4.1 were implemented in C++ and the code was integrated with that in BPKIT [17].
5. Results
Data was collected for over 750, 000 combinations of the matrix, the preconditioner, the heuristic for choosing the
restart value, the parameter values for the preconditioner, and the set of allowable restart values. In addition to being
analyzed for the eﬀectiveness of the diﬀerent heuristics for choosing the restarts, the data was also analyzed for the
eﬀect of diﬀerent preconditioners and parameter values.
The main results presented here are:
1. the eﬀect of varying m and
2. the eﬀectiveness of the diﬀerent heuristics for choosing m.
Additional observations are noted in Section 5.3.

2263

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

m1

m2

60
50
40
30
20
10

10
313.60
345.40
330.00
335.30
425.90

20
308.80
335.70
339.50
360.10
403.00

30
307.80
337.80
327.90
347.00

40
299.50
306.50
315.00

50
295.20
340.00

Table 1: Number of iterations required for randGMRES(m1 , m2 ) to converge for the bwm200 matrix. A
for those values of m1 and m2 .

60
290.00

means randGMRES did not converge

5.1. Advantages to varying m
Table 1 shows the average number of iterations required for randGMRES(m1 , m2 ) to converge for diﬀerent values
of m1 and m2 on the bwm200 matrix. While randGMRES(10,10) never converged, all 10 repetitions of the calculation
for every other pair of values did converge. Table 1 presents results only for the bwm200 matrix, but the table
highlights trends seen with other matrices and other preconditioner parameter settings.
The lower-left to upper-right diagonal in Table 1 shows the behavior of GMRES(m). Not surprisingly, the number
of iterations needed for convergence generally decreases as m increases. What is surprising is the inversion between
GMRES(40) and GMRES(50). The oﬀ-diagonal entries show convergence for randGMRES(m1 , m2 ), where m1
m2 . By contrasting randGMRES(m1 , m2 ) with GMRES(m1 ) and GMRES(m2 ) across all the entries in the table, it
seems that the behavior of randGMRES(m1 , m2 ) (where m2 > m1 ) is closer to that of GMRES(m2 ) than to that of
GMRES(m1 ). In fact, in some cases it can be slightly better than either one (e.g. randGMRES(30, 50) outperforms
GMRES(50) on the bwm200 matrix).
Even more surprising, sometimes randGMRES(m1 , m2 ) outperforms GMRES(m) where m > m1 > m2 . For
example, with the bwm200 matrix, the number of iterations required by randGMRES(30, 40) is smaller than the
number of iterations required by GMRES(50). This is due in part to the surprisingly large number of iterations taken
by GMRES(50).
Observe also that while GMRES(10) does not converge, selecting randomly between 10 and any other value
generally does lead to convergence. Convergence is clearly not guaranteed since randomness in the heuristic means
randGMRES(10,60) may be identical to GMRES(10). This suggests a strategy of combining a low restart value with
a higher one in order to create a solver that is likely to converge yet generates approximate solutions more rapidly
than with the higher restart.
Finally, other data collected suggests that these observations generalize. In particular, allowing the solver to choose
between more than two values of m gives similar results: the number of iterations required by randGMRES(10, 20, . . . , 60
is generally less than or equal to the average of the number of iterations required by GMRES(10), GMRES(20),
GMRES(30), GMRES(40), GMRES(50), or GMRES(60).
5.2. Comparison of heuristics
Having established that varying the restart parameter m can be valuable, this section compares the heuristics
described in Section 4.1. For the data analyzed in this section, the heuristics are always choosing from the full set of
possible restart values: {10, 20, 30, 40, 50, 60}.
Figures 2 and 3 plot the number of iterations used by each of the heuristics described in Section 4.1 on each of the
matrices in the test suite; the number of iterations is normalized by the number of iterations taken by GMRES(60) and
GMRES(30), respectively. In both ﬁgures the matrices are sorted by the number of iterations required by GMRES(30)
to converge on that system. As a result, the graphs can be broken down into three parts: to the left are the four
“easy” matrices where any heuristic leads to rapid convergence, to the right are the 8 “hard” matrices where none of
the heuristics achieves convergence, and in the middle are the matrices where GMRES(m) generally converges to a
solution within 600 iterations but the computational cost of the solver can vary signiﬁcantly depending on the choice
of parameter or heuristic.

2264

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

Figure 2: A comparison of the number of iterations taken using each heuristic for varying m. Numbers are normalized by the number of iterations
taken by GMRES(60).

More specﬁcally, Figure 2 shows that the heuristics almost always do worse than GMRES(60), which is not
surprising since typically one does better with larger subspaces. It is, however, surprising that there exists a matrix (pde2961) where choosing at random or using either of the reinforcement learning based strategies outperforms
GMRES(60). Note also that angleGMRES performs identically to GMRES(60) due to the fact that GMRES(60)
makes steady progress towards convergence on the majority of the matrices and angleGMRES continues using mmax
as long as it yields either good or terrible performance.
Figure 3 plots the same data, but normalizes the number of iterations by the number of iterations taken by
GMRES(30). The graph shows that in general there is an advantage to varying the restart parameter. Of the four
heuristics that vary m, angleGMRES is typically the best performing, though it can perform very poorly on speciﬁc
matrices. Both randGMRES and GMRES RL are more even in their behavior: typically they perform at least as well
as GMRES(30), and when they do worse it is by no more than 20%. However, since randGMRES is considerably
easier to code and cheaper to execute, it should generally be preferred.
5.3. Other observations
While the results presented so far in this section are based on data collected with speciﬁc parameter values for the
ILUT preconditioner, the data was also analyzed for trends across diﬀerent parameter values and diﬀerent preconditioners.
For example, the lfil parameter in ILUT governs the overall space required by the preconditioner: a higher
value means a denser and more accurate incomplete factorization. The data shows that the value of changing the
restart parameter is greater for smaller lfil values. In particular, for smaller lfil values the number of iterations
needed for randGMRES(m1 , m2 , . . . mk ) seemed to be close to the value 1k ki=1 GMRES(mi ). This suggests that a user
can balance to some extent the beneﬁts of small and large restart values by simply using both.
Finally, the convergence behavior when using the RILUK preconditioner diﬀered from that when using the ILUT
preconditioner in that it seemed to depend more heavily on the m values used in randGMRES. However, given the

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

2265

Figure 3: A comparison of the number of iterations taken using each heuristic for varying m. Numbers are normalized by the number of iterations
taken by GMRES(30).

diﬃculty of normalizing across their space requirements, comparisons were not made between the RILUK and ILUT
preconditioners.
6. Conclusion
In [5] it was observed that the restarted GMRES iterative solver sometimes did better with a variable restart
parameter than with a ﬁxed one. This paper gives more insight into this phenomena and then describes a novel
application of reinforcement learning to the problem of choosing the restart parameter for each outer iteration of
GMRES(m). To evaluate this approach, a large set of experimental data was collected using ﬁve diﬀerent heuristics
for choosing the restart parameters: ﬁxed, random, angle-based, and two using reinforcement learning.
Mining the data led to a range of observations. First, there exist matrices for which using a single, small m value
with the GMRES solver yields a solution to the system Ax = b in fewer iterations than using a larger m. Second, even
for the vast majority of matrices where this is not the case, it is sometimes possible to approximate the performance
of GMRES(m) by using randGMRES(m1 , m2 ), where both m1 and m2 are less than m. The heuristics which use
reinforcement learning did reduce some of the computational burden by periodically using smaller m values, but
the performance was generally on par with random selection. Finally, angleGMRES generally requires the smallest
number of iterations to converge to a solution out of all the heuristics tested. Thus, users might consider using either
randGMRES(m1 , m2 , . . . , mk ) which is easy to code and avoids worst case behavior, or angleGMRES(m1 , m2 , . . . , mk )
which requires more eﬀort to code but generally has excellent performance. The latter has the further advantage of
deterministic performance.

2266

Lisa Peairs et al. / Procedia Computer Science 4 (2011) 2257–2266

Acknowledgements
We would like to thank the anonymous referees for their suggestions. This work was funded in part by the National Science Foundation under grant #CCF-0446604. Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do not necessarily reﬂect the views of the National Science
Foundation.
References
[1] A. L. Holloway, T.-Y. Chen, Neural networks for predicting the behavior of preconditioned iterative solvers, in: Y. Shi, G. D. van Albada,
J. Dongarra, P. M. Sloot (Eds.), Computational Science – ICCS 2007, Vol. 4487 of LNCS, Springer, 2007, pp. 302–309.
[2] S. Bhowmick, V. Eijkhout, Y. Freund, E. Fuentes, D. Keyes, Application of machine learning to the selection of sparse linear solvers,
submitted to the International Journal of High Performance Computing Applications (2006).
[3] E. Kueﬂer, T.-Y. Chen, On using reinforcement learning to solve sparse linear systems, in: ICCS ’08: Proceedings of the 8th international
conference on Computational Science, Part I, Springer-Verlag, Berlin, Heidelberg, 2008, pp. 955–964. doi:http://dx.doi.org/10.1007/978-3540-69384-0 100.
[4] Y. Saad, M. H. Schultz, GMRES: A generalized minimal residual algorithm for solving nonsymmetric linear systems, SIAM J. Sci. Comput.
7 (3) (1986) 856–869.
[5] A. H. Baker, On improving the performance of the linear solver restarted gmres, Ph.D. thesis, University of Colorado at Boulder, Boulder,
CO, USA, director-Jessup, Elizabeth R. (2003).
[6] A. H. Baker, E. R. Jessup, T. V. Kolev, A simple strategy for varying the restart parameter in GMRES(m), Journal of Computational and
Applied Mathematics 230 (2) (2009) 751 – 761. doi:10.1016/j.cam.2009.01.009.
URL http://www.sciencedirect.com/science/article/B6TYH-4VDS8DB-4/2/305e4e1b2b926260b187c0f5e66c39c2
[7] M. Habu, T. Nodera, GMRES(m) algorithm with changing the restart cycle adaptively, in: Proceedings of the Algorithmy 2000 Conference
on Scientiﬁc Computing, 2000, pp. 254–263, available from www.emis.de/journals/AMUC/ contributed/algo2000.
[8] L. T. Watson, Parallel software for nonlinear systems of equations, Prepared for the US Department of Energy. Accessible from
http://www.osti.gov/bridge/servlets/purl/584951-3Ym387/webviewable/584951.pdf (July 1997).
[9] M. Sosonkina, L. T. Watson, R. K. Kapania, H. F. Walker, A new adaptive GMRES algorithm for achieving high accuracy, Numerical Linear
Algebra with Applications 5 (1998) 275–297.
[10] L. Zhang, T. Nodera, A new adaptive restart for GMRES(m) method, The ANZIAM Journal 46 (2005) 409–426.
[11] W. Joubert, On the convergence behavior of the restarted gmres algorithm for solving nonsymmetric linear systems, Numerical Linear Algebra
with Applications 1 (5) (1994) 427–447.
[12] S. Xu, J. Zhang, Solvability prediction of sparse matrices with matrix structure-based preconditioners, in: Proc. Preconditioning 2005,
Atlanta, Georgia, 2005.
[13] W. Armstrong, A. P. Rendell, Runtime sparse matrix format selection, Procedia Computer Science 1 (1) (2010) 135–144, ICCS 2010.
[14] R. S. Sutton, A. G. Barto, Reinforcement Learning: An Introduction (Adaptive Computation and Machine Learning), The MIT Press, 1998.
URL http://www.worldcat.org/isbn/0262193981
[15] T. A. Davis, The University of Florida Sparse Matrix Collection, submitted to ACM Transactions on Mathematical Software.
[16] Y. Saad, H. A. Van der Vorst, Iterative solution of linear systems in the 20th century, J. Comput. Appl. Math. 123 (1-2) (2000) 1–33.
doi:http://dx.doi.org/10.1016/S0377-0427(00)00412-X.
[17] E. Chow, M. A. Heroux, BPKIT Reference Manual, University of Minnesota Supercomputing Institute Technical Report UMSI (September
1996).
[18] Y. Saad, ILUT: A dual threshold incomplete LU factorization, Numer. Linear Algebra Appl. 4 (1994) 387–402.

