Procedia Computer Science
Volume 80, 2016, Pages 1917–1926
ICCS 2016. The International Conference on Computational
Science

A Robust Technique to Make a 2D Advection Solver
Tolerant to Soft Faults
Peter Strazdins1 , Brendan Harding2 , Chung Lee1 ,
Jackson R. Mayo3 , Jaideep Ray3 , and Robert C. Armstrong3
1

Research School of Computer Science, Australian National University, Canberra, ACT, Australia
peter.strazdins@cs.anu.edu.au, brian.lee@anu.edu.au
2
Mathematical Sciences Institute, Australian National University, Canberra, ACT, Australia
brendan.harding@anu.edu.au
3
Sandia National Laboratories, Livermore, California, USA
jmayo@sandia.gov, jairay@sandia.gov, rob@sandia.gov

Abstract
We present a general technique to solve Partial Diﬀerential Equations, called robust stencils,
which make them tolerant to soft faults, i.e. bit ﬂips arising in memory or CPU calculations. We
show how it can be applied to a two-dimensional Lax-Wendroﬀ solver. The resulting 2D robust
stencils are derived using an orthogonal application of their 1D counterparts. Combinations
of 3 to 5 base stencils can then be created. We describe how these are then implemented
in a parallel advection solver. Various robust stencil combinations are explored, representing
tradeoﬀ between performance and robustness. The results indicate that the 3-stencil robust
combinations are slightly faster on large parallel workloads than Triple Modular Redundancy
(TMR). They also have one third of the memory footprint. We expect the improvement to be
signiﬁcant if suitable optimizations are performed. Because faults are avoided each time new
points are computed, the proposed stencils are also comparably robust to faults as TMR for a
large range of error rates. The technique can be generalized to 3D (or higher dimensions) with
similar beneﬁts.
Keywords: exascale computing, fault-tolerance, partial diﬀerential equations, robust stencils, advection
equation, parallel computing, resilient computing

1

Introduction

There is an increasing need for the ability to be resilient to faults for various scenarios of
computations [10, 3]. Two kind of faults may occur: hard faults, arising from the transient
or permanent failure of a software or hardware resource, and soft or silent faults, where the
computation continues but errors are introduced into data. The detection and recovery for
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.505

1917

Robust stencils for advection

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

either generally requires diﬀerent approaches, with soft faults being generally regarded as being
more diﬃcult [5].
In most situations, soft faults can lead to erroneous results; in some cases, this may not
be obvious. Soft faults normally manifest as a (random) bit ﬂip in a data item: depending
on the importance of the item, and the signiﬁcance of the bit, the fault maybe anything from
unnoticeable, insigniﬁcant, signiﬁcant but not obvious, obvious or catastrophic. These can arise
either when the item is stored at some location in the memory hierarchy, while the item is on
a datapath, or while a new version of the item is being created in the CPU.
Soft errors are of concern when the probability of error reaches a point where the overall
chances of completing the computation correctly becomes uncertain. Various factors aﬀect
this: the length of the computation, the size of the system (exascale computing), and error
rates in each component. The latter can be exacerbated by adverse operating conditions,
such as adverse operating environments, low-quality components, low power. The last two are
potentially important in the context of exascale computing, as low cost components can keep
the purchase cost down, and minimizing operational power of components lowers the running
costs.
Checkpointing can be used to mitigate soft faults, but this normally requires duplication
for detection, and triplication for recovery. It also requires a resilient store which, particularly
if distributed, is diﬃcult to implement and expensive to access [4].
Algorithm-based fault tolerance (ABFT) can also be employed to mitigate soft faults. The
baseline is Triple Modular Redundancy (TMR) [6], which involves evolving three versions of the
computation (and data), with periodic comparison of the corresponding data items. A voting
scheme is normally used to determine the correct value, which must be replicated. The normal
overhead, compared to the original computation, is at least a factor of three, both in time and
space. However, the method is relatively simple and general, and is extremely robust: provided
the error does not occur in the voting phase itself, a corruption is required on at least two of
the three versions of the same data item.
However, application-speciﬁc versions of ABFT have the potential to provide the same
beneﬁt for lower cost to TMR. Speciﬁcally, this is because the level of redundancy can be less
than 3. For example, in fault-tolerant versions of the Sparse Grid Combination Technique, the
redundancy can be as little as 20% [2]. In this case, some (small) loss of accuracy must be
tolerated.
In this paper, we extend the concept of robust stencils, introduced in [9], a form of ABFT
which is exact, but has the potential of reduced overheads to TMR. It can be applied in principle
to any explicit solution of a Partial Diﬀerential Equation (PDE). It can be implemented with
neglible memory overhead. While its computational overhead must be at least 3 in terms of
overall FLOPS, as most PDE solvers are memory-bound, its overhead in terms of memory
accesses can be reduced to a factor of 5/3, in the case of simple stencils. One such stencil arises
from the 2D advection equation via the Lax-Wendroﬀ method [8], which is the object of study
in this paper.
To the best of our knowledge, no other work addresses the issue of making 2D (or higher)
PDE solvers tolerant to soft faults, in either a similar, or in a diﬀerent and superior (in all
aspects), fashion.
This paper is organized as follows. Section 2 gives the derivation of the 2D robust stencils
from their 1D counterparts. A description of how the 2D stencils were implemented is given
in Section 3. The performance of the stencils, compared with the baseline (TMR), is given in
Section 4. This section details the error and speed in the fault-free case, and the robustness in
the fault-injected case. Conclusions and future work are summarized in Section 5.
1918

Robust stencils for advection

2

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

Derivation of stencils

∂u
The one dimensional Lax-Wendroﬀ stencil [8] for solving the advection equation ∂u
∂t + a ∂x = 0
for ﬁxed a ∈ R and u(x, t) : Ω ⊂ R × [0, ∞) → R with appropriate initial and boundary
conditions is

aΔt
(u(x − Δx, t) − u(x + Δx, t))
2Δx
2
a Δt2
(u(x − Δx, t) − 2u(x, t) + u(x + Δx, t)) .
+
2Δx2

u(x, t + Δt) ≈ u(x, t) +

It is well known this scheme is 2nd order consistent and stable for aΔt
Δx ≤ 1. In a ﬁnite diﬀerence
we
may
write
this as
implementation with uni := u(iΔx, nΔt) and U := aΔt
Δx
≈ uni +
un+1
i

U2 n
U n
(ui−1 − uni+1 ) +
(u
− 2uni + uni+1 ) .
2
2 i−1

We deﬁne the shift operator Sk for which Sk u(x, t) = u(x + kΔx, t), and thus Sk uni = uni+k .
With this we deﬁne the ‘normal’ Law-Wendroﬀ stencil operator by
U2
U
(S−1 − S1 ) +
(S−1 − 2S0 + S1 )
2
2
U
U2
U2
U
+
S−1 + (1 − U 2 )S0 + − +
2
2
2
2

SN := S0 +
=

S1 ,

and thus we may write un+1
≈ SN uni . A second stencil may be formed by simply replacing Δx
i
with 2Δx. We refer to this as the ‘wide’ stencil, in particular we deﬁne
U2
U
(S−2 − S2 ) +
(S−2 − 2S0 + S2 )
4
8
U
U2
U2
U2
U
+
S−2 + 1 −
S0 + − +
4
8
4
4
8

SW := S0 +
=

S2 .

As this is eﬀectively the Lax-Wendroﬀ stencil on a coarser grid the consistency and stability
follows immediately. We deﬁne a third stencil we refer to as the ‘far’ stencil which is generated
by the operator
−S−3 + 9S−1 + 9S1 − S3
U2
U
+ (S−3 − S3 ) +
(S−3 − S−1 − S1 + S1 )
16
6
16
U
U2 − 1
U2 − 1
9 − U2
9 − U2
U
=
+
S−3 +
S−1 +
S1 + − +
S3 .
6
16
16
16
6
16

SF :=

The second order consistency of this stencil is easily shown via a Taylor series expansion (with
appropriate smoothness of u). Further, one may show the SF stencil is stable for aΔt ≤ 3Δx
with a standard von Neumann stability analysis. We leave the proofs of stability of the stencils
for future publication 1 .
The fundamental idea of robust stencils is to compute many of these diﬀerent stencils, each
using a diﬀerent subset of neighbouring function values, so that given an isolated point whose
value is aﬀected by a silent fault then at least one of the three stencils will provide the correct
1 Interested

readers should contact author Mayo for the proofs.

1919

Robust stencils for advection

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

result. Of course the diﬃculty is in having a robust way of determining which is correct at
runtime.
For the one dimensional problem these three stencils are not suﬃcient as the ﬁrst two share
the centre point. Note that this can be avoided by an outlier detection techniqe [9]. However
we may use these 3 stencils to derive several diﬀerent stencils for the advection equation in
higher dimensions to develop robust algorithms.
Fix d ∈ N and consider d-dimensional advection equation ∂u
∂t + a · ∇u = 0, where ∇u =
, for ﬁxed a ∈ Rd and u(x, t) : Ω ⊂ Rd × [0, ∞) → R with appropriate initial
and boundary conditions. To solve the d-dimensional advection equation one may use tensor
products of the one dimensional stencils above. For example, given α ∈ {N, W, F }d then we
deﬁne the stencil
∂u
∂u
∂x1 , . . . , ∂xd

d

Sα :=

Sα k .
k=1

For brevity we will often write Sα = S(α1,...,αd ) as just Sα1 ···αd . For example, with d = 2 and
i Δt
, SN N
α = (N, N ) then Sα = SN ⊗ SN which we denote with SN N . Further, with Ui = aΔx
i
may be expanded as
SN N =

U1
U2
+ 1
2
2

U2
U2
U2
U2
+ 2 S−1 ⊗ S−1 + (1 − U22 )S−1 ⊗ S0 + −
+ 2 S−1 ⊗ S1
2
2
2
2
2
2
U
U
U2
U2
+ 2 S0 ⊗ S−1 + (1 − U22 )S0 ⊗ S0 + −
+ 2 S 0 ⊗ S1
+ (1 − U12 )
2
2
2
2
2
2
U
U2
U
U2
U2
U1
+ 1
+ 2 S1 ⊗ S−1 + (1 − U22 )S1 ⊗ S0 + −
+ 2 S1 ⊗ S 1
+ −
2
2
2
2
2
2

,

which, with uni,j := u((iΔx1 , jΔx2 ), jΔt), leads to the update formula
un+1
i,j =

U1
U2
+ 1
2
2

U2
U2
U2
U2
+ 2 uni−1,j−1 + (1 − U22 )uni−1,j + −
+ 2 uni−1,j+1
2
2
2
2
2
2
U
U
U
U
2
2
+ (1 − U12 )
+ 2 uni,j−1 + (1 − U22 )uni,j + −
+ 2 uni,j+1
2
2
2
2
U2
U1
U12
U22
U2
U2
+ −
+
+
uni+1,j−1 + (1 − U22 )uni+1,j + −
+ 2 uni+1,j+1
2
2
2
2
2
2

.

Similarly the SW N stencil leads to the update formula
un+1
i,j =

U2
U1
U2
U2
U2
U2
+ 1
+ 2 uni−2,j−1 + (1 − U22 )uni−2,j + −
+ 2 uni−2,j+1
4
8
2
2
2
2
2
U2
U12
U22
U
U
2
+ 1−
+
uni,j−1 + (1 − U22 )uni,j + −
+ 2 uni,j+1
4
2
2
2
2
U2
U1
U12
U22
U2
U2
+ −
+
+
uni+2,j−1 + (1 − U22 )uni+2,j + −
+ 2 uni+2,j+1
4
8
2
2
2
2

.

The remaining 7 stencils in two dimensions, namely SF N , SN W , SW W , SF W , SN F , SW F and
SF F , are also similarly obtained. In higher dimensions the total number of stencils obtained
in this way is clearly 3d . Such stencils can be viewed as an application of operator splitting
techniques (see for example the relevant chapter in [7]). In this case the splitting approximation
1920

Robust stencils for advection

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

Figure 1: A depiction of the nodes used in each stencil with the centre being uni,j . From left to
right, top to bottom the stencils depicted are NN, WN, FN, NW, WW, FW, NF, WF and FF.
is exact because the diﬀerential operators ak ∂x∂ k commute with each other. It is also immediate
that each of these stencils are second order consistent and stable when Uk ≤ 1 for all k = 1, . . . , d
(that is Δt ≤ mink ak Δxk ). For stencils with α ∈ {W, F }d this could be relaxed but we would
generally like to choose Δt such that all of the stencils are stable.
A robust approach to ﬁnite diﬀerence computations in the presence of silent errors (e.g. bit
ﬂips) involves computing several of the above stencils described above and taking the median.
The points used by each of the stencils when applied to uni,j are depicted in Figure 1. With
these it is easy to verify how many times each neighbour is used in each collection of stencils.
For example, suppose we compute 5 stencils for which no more than 2 use any one of the
neighbouring function values (including the centre of the stencil), then given a suﬃciently large
error one of the remaining 3 will be selected as the median. As a result one can eﬀectively avoid
any errors that aﬀect isolated ﬂoating point numbers stored in memory. As an example, ﬁve
such stencils in two dimensions would be those derived from the SN N , SW W , SW F , SF W and
SF F stencils. An example using only three stencils is SW W , SW F and SF W , or alternatively
SF F , SW F and SF W . Here no one neighbour is in more than one stencil. Another example
using seven stencils is SN W , SN F SW N , SW W , SW F , SF N and SF W . Here no one neighbour
is used in more than 3 of the seven stencils. Figure 2 depicts some of the examples mentioned
here.
Whilst the derivation of robust stencils above applies to dimensions d ≥ 2 the discussion in
the remainder of the paper will be restricted to the d = 2 case.
1921

Robust stencils for advection

S∗∗

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

N

W

F

N

* **
**

W
F

S∗∗

N

N

*

W
F

W

F

* *
* *

S∗∗

N

N

* *
* * *
* *

W
F

W

F

Figure 2: A depiction of some of the robust stencil combinations for 2 dimensional advection
selected from the nine stencils available. From left to right we have examples of robust stencil
combinations consisting of three, ﬁve and seven stencils respectively.
copy

data

Exchange
Boundary with
other MPI
processes
update
Boundary

u[0]

u[1]

u[2]

NN

NN

NN

NN

NW

…

Fault
Injector

update
Boundary

u[0]

u[1]

Exchange
Boundary
with
other MPI
processes

Median

Median

data

u[0]

u[2]

u[0]

Figure 3: Implementation of both TMR and Robust Stencils

3

Implementation

We have implemented the stencils, as expressed in the previous section, coding them in a
straightforward way in C++. Due to time constraints, we have not optimized these codes.
It should be noted that, due to their complexity, robust stencils have a greater potential for
optimization than simple stencils (such as NN).
For example, with stencil combinations, each element gets reloaded for each stencil. This can
be avoided if we load the currently being processed elements into a 5 × 3 local array (or better
still, block of registers): each stencil can access those elements without any extra movement
further down the memory hierarchy. This will mean that the amount of memory accesses of
any combination would be the same as a single (NN) stencil. As (single) stencil computations
are memory-bound, the overhead of robust stencils can now be made very low.
Figure 3 demonstrates our implementation of TMR and robust stencils for the 2D advection
solver.
Our implementation of TMR only uses the NN stencil, that provides the best accuracy, three
times. As depicted in Figure 3, at the beginning, the initial/updated ﬁeld data is duplicated,
and, after computation, and the appropriate version of each element is stored in the ﬁrst array.
1922

Robust stencils for advection

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

This is then copied to the other arrays.
For both TMR and robust stencils, we take the median when selecting multiple results, with
Inf and NaN values ﬁltered beforehand. It should be noted that the result selection phase, in
either case, while critical for fault tolerance, aﬀects performance very little.
Our 2D advection solver [1, 11] oﬀers full MPI parallelization on a 2D logical process grid,
i.e. a p × q grid where p, q > 0. TMR is given the same process grid as the robust stencils: this
means that each process will have three local arrays, and processes them serially. This means
that the same compute resources are given to both, and TMR requires three times the memory
at each resource.
The alternate possibility is to give TMR a 3 × p × q grid, where three times the compute
resources is given to TMR but the memory requirement per compute resources remains constant.
While desirable for hard faults, this is undesirable for soft faults as the voting stage becomes
highly communication intensive.
Under the selected scheme for TMR, the communication volume for the two methods is
equivalent. Robust stencils for 2D advection requires a halo of width 3, and TMR requires the
exchange of three halos of width 1. In our current implementation, the halos are sent separately,
so TMR creates three times the number of messages. While this could be optimized, we do not
expect this to have a signiﬁcant impact on performance for the (large) problem sizes of interest.
For such problems, we have found that our advection solver (1) is primarily memory bound
and secondly communication volume bound, and (2) scales at least to 2000 MPI processes [11].
We also use MPI Isend and Irecv to send messages, which minimizes the impact of the extra
message startup times. Thus, we do not expect our implementation of TMR and robust stencils
to have signiﬁcant diﬀerences with respect to scalability.
In order to simulate memory corruption, we created a fault generator thread per each MPI
process, which runs independently from the main computation thread. The thread ﬂips a bit
in the advection solver data area according to a given error probability at a ﬁxed rate. This
probability is proportional to the size of the area, so TMR has approximately three times the
probability. This is basically the scheme used in [9].

4

Results

All experiments were conducted on the Raijin cluster managed by the National Computational
Infrastructure (NCI) with the support of the Australian Government. Raijin has a total of
57,472 cores distributed across 3,592 compute nodes each consisting of dual 8-core Intel Xeon
(Sandy Bridge 2.6 GHz) processors (i.e. 16 cores) with Inﬁniband FDR interconnect, an total of
≈ 160 terabytes of main memory, with an x86 64 GNU/Linux OS. g++ -O3 is used to compute
all results.
Figure 4 gives the elapsed time of all robust stencil combinations and TMR. ‘NN’ means
SN N etc (see Section 2). The other codes are as follows:
code
combination
code combination
C30 WF, FW, FF
C50
NN, WW, WF, FW, FF
C31 WW, WF, FW
C32 NN, NW, NF
TMR NN ×3
An (i, j) grid means the advection ﬁeld size is 2i × 2j .
We see that each single stencil has similar performance, indicating that the computation
is memory bound. We see that C30 and C31 slightly out-performs TMR, especially for when
SSE2 is used, although SSE2 gives little or no beneﬁt in any case. The extra cost of the 5
1923

Robust stencils for advection

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

1600
1400

Time (sec)

1200
1000
800

600
400
200

0
NN NW

NF

WN WW WF
without-sse

FN

FW

FF

C30 C31 C32 C50 TMR

with-sse

Figure 4: Elapsed time of each stencil, robust stencil combination, TMR (a (14, 14) grid and
512 steps, 16 MPI processes on 16 core Xeon processor).
stencil combination results in it being slower than TMR. Results with a smaller (12, 12) grid
were qualitatively similar, except SSE2 results were closer to the others.
Note that the results are with unoptimized codes.
The error in the ﬁnal ﬁeld is shown in Figure 5. An exact analytical solution is computed
to determine the accuracy of our solver, with an L1-norm being employed. Again, results on
the smaller (12, 12) grid are qualitatively similar.
Figure 6 indicates the tolerance for each combination. The ﬁgure is best read looking right
across a particular level of error in the solution. As expected, looking at where the injected error
rate causes the computation to break down (Inf), the combinations become more robust the
more stencils are added. Of the 3-stencil combinations, C31 tends to be slightly more robust.
This is evident by looking along the 10−7 and 10−6 lines in the ﬁgure.

5

Conclusions

For 2D PDE solvers, robust stencils may be derived from various combinations of widened base
stencils. These combinations permit the avoidance of any single corrupted point; hence the
techniques can make the solver robust to soft faults. 3–5 stencil combinations are comparable
to TMR in terms of robustness.
Robust stencils have one third of the memory footprint of TMR. In our current naive
implementation, some 3-stencil combinations are slightly faster than TMR. We expect that,
however, with suitable optimization, this diﬀerence will become dramatic.
Future work includes exploring optimizing the robust stencils, and exploring higher dimensions. For 3D, we would expect a set of 3 stencils (e.g. WWF, WFW and FWW; or NWF,
WFN, FNW) would suﬃce. As only the F stencil involves extra points, we would only expect a 4:3 increase in terms of ﬂoating point operations over TMR. We also envisage GPU
1924

Robust stencils for advection

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

4.00E-08
3.50E-08
3.00E-08

Error

2.50E-08
2.00E-08
1.50E-08
1.00E-08
5.00E-09
0.00E+00
NN NW NF WN WW WF

FN

FW

FF

C30 C31 C32 C50 TMR

Figure 5: Error of ﬁnal ﬁeld of each stencil, robust stencil combination and TMR without
fault injection (a (14, 14) grid, 512 steps, 16 MPI processes on 16 core Xeon processor).

Error (Log, Reverse)

1.00E-008

Stencil
Combination

1.00E-007

C30
C31
C32

1.00E-006

C50
TMR

Inf
1.00E-005

0

1

2

3

4

5

Avg bitflips per step
Figure 6: Error of ﬁnal ﬁeld of robust stencil combinations and TMR, according to the average
number of bit ﬂips per step with a (12, 12) grid and 128 steps (8 MPI processes + 8 memory
corrupters on a 16 core Xeon processor). The Y-axis is reversed and the bottom line is Inf
(higher is better).

1925

Robust stencils for advection

Strazdins, Harding, Lee, Mayo, Ray, Armstrong

implementations and generalizations to other PDEs.

5.1

Acknowledgments

We thank Markus Hegland for advice, and acknowledge ﬁnancial support from ARC Linkage Project LP110200410. We thank NCI NF for the use of the Raijin cluster under project
v29. Sandia National Laboratories is a multi-program laboratory managed and operated by
Sandia Corporation, a wholly owned subsidiary of Lockheed Martin Corporation, for the U.S.
Department of Energy’s National Nuclear Security Administration under contract DE-AC0494AL85000.

References
[1] Md Mohsin Ali, James Southern, Peter E Strazdins, and Brendan Harding. Application level fault
recovery: Using Fault-Tolerant Open MPI in a PDE solver. In IEEE 28th International Parallel &
Distributed Processing Symposium Workshops (IPDPSW 2014), pages 1169–1178, Phoenix, USA,
May 2014.
[2] Md Mohsin Ali, Peter E Strazdins, Brendan Harding, Markus Hegland, and Jay W Larson. A
fault-tolerant gyrokinetic plasma application using the sparse grid combination technique. In
Proceedings of the 2015 International Conference on High Performance Computing & Simulation
(HPCS 2015), pages 499–507, Amsterdam, The Netherlands, July 2015.
[3] Franck Cappello. Fault tolerance in petascale/ exascale systems: Current knowledge, challenges
and research opportunities. International Journal of High Performance Computing Applications,
23(3):212–226, 2009.
[4] Franck Cappello, Al Geist, Bill Gropp, Laxmikant Kale, Bill Kramer, and Mark Snir. Toward
exascale resilience. International Journal of High Performance Computing Applications, 2009.
[5] Franck Cappello, Al Geist, William Gropp, Sanjay Kale, Bill Kramer, and Marc Snir. Toward
exascale resilience: 2014 update. Supercomputing Frontiers and Innovations, 1(1):5–28, 2014.
[6] Christian Engelmann, Hong H. Ong, and Stephen L. Scott. The case for modular redundancy in
large-scale high performance computing systems. In Proceedings of the 8th IASTED International
Conference on Parallel and Distributed Computing and Networks (PDCN) 2009, pages 189–194,
Innsbruck, Austria, February 16-18, 2009. ACTA Press, Calgary, AB, Canada.
[7] W. Hundsdorfer and J.G. Verwer. Numerical Solution of Time-Dependent Advection-DiﬀusionReaction Equations. Springer Series in Computational Mathematics. Springer, 2003.
[8] Peter Lax and Burton Wendroﬀ. Systems of conservation laws. Communications on Pure and
Applied Mathematics, 13(2):217–237, 1960.
[9] Jaideep Ray, Jackson Mayo, and Robert Armstrong. Finite diﬀerence stencils robust to silent data
corruption. In SIAM Conference on Parallel Processing, Feb 2014.
[10] Marc Snir, Robert W. Wisniewski, Jacob A. Abraham, Sarita V. Adve, Saurabh Bagchi, Pavan Balaji, Jim Belak, Pradip Bose, Franck Cappello, Bill Carlson, Andrew A. Chien, Paul Coteus, Nathan DeBardeleben, Pedro C. Diniz, Christian Engelmann, Mattan Erez, Saverio Fazzari,
Al Geist, Rinku Gupta, Fred Johnson, Sriram Krishnamoorthy, Sven Leyﬀer, Dean Liberty, Subhasish Mitra, Todd Munson, Rob Schreiber, Jon Stearley, and Eric Van Hensbergen. Addressing
failures in exascale computing. International Journal of High Performance Computing Applications
(IJHPCA), 28(2):129–173, 2014.
[11] Peter E Strazdins, Md Mohsin Ali, and Brendan Harding. Highly scalable algorithms for the sparse
grid combination technique. In Proceedings of the IEEE 29th International Parallel & Distrib uted
Processing Symposium Workshops (IPDPSW 2015), pages 941–950, Hyderabad, India, May 2015.

1926

