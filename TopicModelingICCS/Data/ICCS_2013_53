Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 966 – 975

International Conference on Computational Science, ICCS 2013

GPU-accelerated optimization of fuel treatments
for mitigating wildﬁre hazard
Bachisio Arcaa , Tiziano Ghisua , William Spatarob , Giuseppe A. Trunﬁoc,∗
a National

Research Council, Institute for Biometeorology (CNR-IBMET), Sassari, Italy
of Mathematics and Computer Science, University of Calabria, Rende, Italy
c Department of Architecture, Planning and Design, University of Sassari, Alghero, Italy

b Department

Abstract
Fuel treatment is considered a suitable way to mitigate the hazard related to potential wildﬁres on a landscape. However,
designing an optimal spatial layout of treatment units represents a diﬃcult optimization problem. In fact, budget constraints,
the probabilistic nature of ﬁre spread and interactions among the diﬀerent area units composing the whole treatment, give rise
to challenging search spaces on typical landscapes. In this paper we formulate such optimization problem with the objective
of minimizing the extension of land characterized by high ﬁre hazard. Then, we propose a computational approach that leads
to a spatially-optimized treatment layout exploiting Tabu Search and General-Purpose computing on Graphics Processing
Units (GPGPU). Using an application example, we also show that the proposed methodology can provide high-quality design
solutions in low computing time.
Keywords: Fuel Treatment; GPGPU; Simulation; Optimization; Cellular Automata;

1. Introduction
One of the most eﬀective approaches for mitigating the spread and intensity of wildﬁres, especially in a
climate change perspective, consists of modifying the amount and type of vegetation through a fuel treatment
(FT) [1, 2]. According to the literature, among the diﬀerent intervention strategies for a landscape [3, 2, 4], a
spatial arrangement of separate fuel treatment units (FTUs) provides several advantages. Such a composite FT
in fact, by modifying the ﬁre behaviour wherever the ﬁre encounters any FTU, has the potential of positively
aﬀecting a wide area. In addition, a FT composed of separate FTUs facilitates ﬁre ﬁghting more than a single fuel
break [2].
In Figure 1, we give an idea of the eﬀect of a FT composed of diﬀerent FTUs on a wildﬁre spread. In particular,
the left side of the Figure represents the simulated ﬁre front after a time t from the ignition on an ideal landscape.
The right side of the ﬁgure shows the simulated eﬀect of four linear fuel breaks after the same time t.
Since FTs are expensive, budget constraints usually impose a limitation on the total treated area. In addition,
when only a limited number of FTUs are used, speciﬁcally designed patterns are much more eﬀective than arrangements placed at random [5] or without considering their mutual interactions [6]. In fact, since a single ﬁre
∗ Corresponding address: Department of Architecture, Planning and Design, University of Sassari, P.zza Duomo, 6, 07041 Alghero (SS),
Italy - Phone: (+39) 079 9720427 - FAX: (+39) 079 9720420
E-mail address: trunﬁo@uniss.it.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.262

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

Fig. 1. a) Simulated ﬁre front after a time t from the ignition without fuel treatments; b) Simulated eﬀect of three linear fuel-breaks for a ﬁre
of the same duration t.

can potentially encounter many FTUs, the spatial relationship between separate treatments can have a signiﬁcant
impact on the overall ﬁre hazard reduction [2, 7, 6].
Another relevant factor to be considered, which makes the optimal design of a limited treatment on a large
and complex landscape problematic, is the probabilistic nature of wildﬁres. In fact, accounting for the involved
uncertainties can make evaluating the actual eﬀect of a FT on a landscape signiﬁcantly more computationally
expensive.
For the above reasons, the question of placing a limited number of FTUs on a relatively large area can be
viewed as a challenging optimisation problem. In particular, when the objective function corresponding to a candidate solution must be evaluated by simulating its eﬀect on the potential wildﬁres, the optimization process can
require long computing times using conventional computers [6]. To cope with such a high computational eﬀort, we
present an approach for optimizing the layout of a composite FT on a landscape using General-Purpose computing on Graphics Processing Units (GPGPU), in which multicore Graphics Processing Units perform computations
traditionally carried out by the CPU. In particular, in the following we describe a FT optimization methodology in
which a Tabu Search (TS) procedure [8] is coupled with a wildﬁre simulator based on a Cellular Automata (CA)
model. Also, using an application example, we show that our GPGPU-accelerated approach can lead to optimized
FT layouts in a fraction of the time reported in the literature [6].
2. Optimizing Fuel Treatments
An eﬀective way to measure the eﬃciency of a FT accounting for the involved uncertainties, is to evaluate how it
changes the burn probability map (BPM) of the landscape [6]. The BPM, provides an estimate of the probability
of a point in a landscape to be burned under certain environmental conditions. In the following, we ﬁrst outline the
typical approach for computing a BPM and then we propose a methodology for the computational optimization of
a composite FT.
2.1. Computing burn probability maps
Given the complexity of the interaction among the many factors inﬂuencing the ﬁre behaviour, BPMs are
usually built using models for simulating wildﬁre spread [9, 10]. In particular, starting from a raster description
of a landscape, the most general approach for computing the corresponding BPM [9, 10, 11] consists of a Monte
Carlo method in which a large number of diﬀerent ﬁre spread simulations are carried out, sampling the random
variables relevant to the ﬁre behaviour (e.g., wind, fuel moisture, point of ignition, among others) from suitable
statistical distributions. At the end, the local danger is computed on the basis of the frequency of burning.
The technique for computing the BPMs adopted in this study is based on a preﬁxed number n f of simulation
runs, where each run represents a single simulated ﬁre. The adopted weather scenario (i.e. wind and fuel moisture
content) reﬂects extreme conditions for the area with regards to relevant historical ﬁres. A regular grid of ignition
locations is adopted, which corresponds to the assumption of a uniform ignition probability for each point of the

967

968

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

Fig. 2. a) Example of spatial arrangement of the elements in the set F ; b) geometrical characteristics of the FTUs.

landscape. Also, all simulated ﬁres have the same duration, which is selected considering historical ﬁres in the
regions under study. All other relevant characteristics are kept constant during the simulations.
Once the latter have been carried out, the resulting n f maps of burned areas are overlaid and cells’ ﬁre frequency are used for the computation of the ﬁre danger. In particular, a burn probability p(c) for each cell c is
computed as:
f (c)
(1)
p(c) =
nf
where f (c) is the number of times the cell c is ignited during the n f simulated ﬁres. The burn probability for a
given cell is an estimate of the likelihood that a cell will burn given a single random ignition within the study area
and given the assumed conditions in terms of ﬁre duration, fuel moisture and weather.
According to the procedure described above, the number n f of simulation runs depend on the resolution of the
grid of ignition points. In general, it is not necessary to simulate a wildﬁre for each of the cells in the automaton. In
fact, considering the usual resolution of landscape data, ignitions on adjacent cells produce very similar ﬁre shapes.
Nevertheless, the number of ﬁre simulation needed for achieving a good BPM accuracy can be considerably large
in case of study areas with great extensions.
2.2. The optimization problem
The eﬀectiveness of a FT can be quantiﬁed using diﬀerent metrics, as average spread rate, relative change in
wildﬁre size and burn probability [5]. For example, in [6] the burn probability of each cell, as modiﬁed by the fuel
treatment, was used for the computation of the expected loss due to wildﬁres. Because of its ability to take into
account the involved uncertainties, we also use the BPM concept described above for assessing the eﬀect of a FT.
In particular, we ﬁrst consider a set F of partially overlapping linear FTUs of equal size, covering the whole
landscape (see Figure 2). In order to maximize its eﬀectiveness, the main direction of each FTU is perpendicular
to the average main spread direction of relevant wildﬁres in the landscape. According to [2], such an arrangement
has the potential of maximizing the amount of positively aﬀected area in the typical case of limited amount of
resources (i.e. total treated area). In fact, in case of partial overlap of the FTUs the ﬁre must progress through
the pattern with a combination of forward and lateral (i.e. slow) spread. It is worth noting that, as shown in
[2], the actual geometry of the FTUs arrangement (e.g. degree of overlapping, FTUs relative position, size and
orientation) can have a signiﬁcant impact on the ﬁre behaviour.
Given the set F , we study the optimization problem of ﬁnding the subset F ∗ ⊂ F of q elements which
minimizes the area of the landscape which is above a preﬁxed threshold pα of burning probability. More formally,
given a raster C representing the landscape, the FTUs included in F ∗ must act on the potential wildﬁres in such a
way to minimize:
A(c)
(2)
Aα =
c∈C
p(c) ≥ pα

where A(c) is the area of the cell c.

969

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

3. A Tabu Search Approach
According to the above formulation, we describe the FT design as a combinatorial optimization problem the
solution of which is a q-subset of F . Since the latter can include a considerable number of FTUs, evaluating
the objective function deﬁned by Equation 2 for each point of the search space is in general infeasible. As an
acceptable alternative, in this study we look for a good solution of our optimization problem using a suitable
heuristic.
In particular, we use the Tabu Search (TS) approach [8], which is one of the most eﬀective heuristics for
locating high-quality solutions of combinatorial optimization problems [12].
TS is a neighbourhood based iterative process that starts from an initial solution chosen at random or through
a guided approach. In every iteration, an attempt is made to improve the current solution by searching its neighbourhood and choosing the point of the search space with the best value of the objective function. As a distinctive
characteristics, the TS procedure uses a memory structure called tabu list to ﬁlter which solutions will be admitted
to the neighbourhood.
3.1. Search initialization
A preliminary phase of the optimization process consists of building the BPM for the landscape in absence of
FTs. For such purpose, we use the wildﬁre simulation model based on the Cellular Automata approach described
in [13]. However, since the search process requires a considerable number of wildﬁre simulations, we use the
GPU-accelerated methodology illustrated in the next section 4.
Subsequently, a greedy candidate solution F (0) is generated as follows: (i) to each FTU τ ∈ F we assign the
average value p¯ τ of the burn probability of the corresponding treated area; (ii) all the τ ∈ F are included in a list
F s and sorted in descending order according to the corresponding values of p¯ τ ; (iii) the ﬁrst q elements of F s are
then included in the initial candidate solution F (0) .
It is worth noting that such a solution is generated ignoring the mutual interaction between FTUs. As we show
in the application example discussed below, the next stage of optimization can produce much better solutions.
3.2. Neighbourhood generation
As in the most typical TS process, the neighbourhood is represented in terms of a set of moves that transform
the current solutions to a diﬀerent candidate solution. In our case, given the current solution F (r) ⊂ F (i.e. the
accepted point of the search space at the r-th iteration of the TS), the neighbourhood is deﬁned as:
N (r) = τ, ν | τ ∈ F (r) ∧ ν ∈ F − F (r)

(3)

where each couple τ, ν means that the FTU τ is replaced with ν in the current solution.
In practice, the set N (r) is generated in such a way to: (i) promote a mutually reinforcing eﬀect of the diﬀerent
FTUs; (ii) enforce diversity in order to avoid restricting the search within a small area of the space. The ﬁrst goal
can be achieved including in the neighbourhood FTUs that are spatially adjacent to those in the current solution. As
for the diversity issue, we obtain a satisfactory exploration of the landscape including in the candidate solutions
some FTUs from the top positions of the list F s mentioned above. In addition, since the evaluation of each
candidate solution is computationally expensive, we use a probabilistic approach described below to avoid huge
neighbourhoods. More in particular, at the step r of the TS process we build the neighbourhood N (r) as follows:
ˆ all the moves that substitute each τ ∈ F (r) with each ν ∈ F − F (r) spatially
1. we include in a set N
ˆ we randomly draw kt elements which are included in
adjacent to τ in the landscape. Then, from the set N
(r)
the neighbourhood N ;
2. subsequently, we build a set Fd composed of kd FTUs randomly drawn from the sorted set F s , with drawing
probability proportional to their rank; then we insert in N (r) all the moves that substitute each τ ∈ F (r)
with each ν ∈ Fd .
As for the tabu list, which plays the role of a short-term memory, it includes the nt most recent moves that
have been evaluated during the search.

970

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

3.3. Neighbourhood elements evaluation
The TS procedure requires at each iteration the evaluation of the objective function deﬁned by Equation 2 for
(r)
each FT Fτ,ν
produced by the moves τ, ν included in the neighbourhood. In general, quantifying the eﬀect of the
FT on the BPM requires the simulation of all the ﬁres that are directly aﬀected by the FT itself (i.e. the burned
area of which intersects any of the FTUs included in the FT).
For this purpose, during the initial BPM computation phase we build for each cell c of the landscape the list
B(0) (c) of all ﬁres reaching the cell itself. Such lists are kept up to date during the TS process in order to account
for the last accepted point in the search space. In other words, the list B(r) (c) contains a reference to all the ﬁres
that burn the cell c given the eﬀect of F (r) .
This allows for computing the current burn probability p(r) (c) as the size of B(r) (c) divided by the total number
of simulated ﬁres n f . In addition, using the set B(r) (c) we can easily determine a list I(r)
τ,ν of invalid ﬁres, that are
the ﬁres the evolution of which is directly aﬀected by the modiﬁed FT and that must be simulated again. After the
(r)
simulations associated to a candidate solution Fτ,ν
have been carried out, the corresponding modiﬁed BPM and
then our objective function can be easily computed.
4. GPGPU implementation
The optimization process described above requires the simulation of a considerable number of wildﬁres. As
a result, it involves a signiﬁcant computational eﬀort. In this study we use the GPGPU approach to accelerate
the computation, making the time required by the whole process for achieving the optimized FT acceptable. In
particular, the adopted computational strategy consists of running the TS logic into the CPU, leaving to the GPU
the heavy task of performing the simulations of the ﬁres contained in I(r)
τ,ν (i.e. the neighbourhood evaluation).
The adopted GPGPU platform is the one provided by nVidia, which consists of a group of Streaming Multiprocessors (SMs) in a single device. Each SM can support a limited number of co-resident concurrent threads,
which share the SM’s memory resources. Furthermore, each SM consists of multiple Scalar Processor (SP) cores.
In order to program the GPU, we adopt the C-language Compute Uniﬁed Device Architecture (CUDA), a
programming model introduced in 2006 by nVidia Corporation for their GPUs [14].
In a typical CUDA program, sequential host instructions are combined with parallel GPGPU code. The idea
underlying this approach is that the CPU organizes the computation (e.g. in terms of data pre-processing), sends
the data from the computer main memory to the GPU global memory and invokes the parallel computation on the
GPU device. After, and/or during the computation, the computed results are copied back into the main memory
for post-processing and output purposes. In CUDA, the GPU activation is obtained by writing device functions in
C language, which are called kernels. When a kernel is issued by the CPU, a number of threads (e.g. typically
several thousands) execute the kernel code in parallel on diﬀerent data.
4.1. Wildﬁre simulation model
The wildﬁre simulations required by the approach illustrated above are obtained using the CA-based simulator
described in [13] (to which the reader is referred for the details). In brief, the CA is based on the Rothermel’s
ﬁre model [15], which provides the heading rate and direction of spread given the local landscape and wind
characteristics. An additional constituent is the commonly assumed elliptical description of the spread under
homogeneous conditions (i.e. spatially and temporally constant fuels, wind and topography) [16]. More in details,
the two-dimensional ﬁre propagation is locally obtained by a growing ellipse having the semi-major axis along the
direction of maximum spread, the eccentricity related to the intensity of the so-called eﬀective wind and one focus
acting as a ‘ﬁre source’ [17, 18]. At each CA step the ellipse’s size is increased according to both the duration
of the time step and maximum rate of spread. Afterwards, a neighbouring cell invaded by the growing ellipse
is considered as a candidate to be ignited by the spreading ﬁre. In case of ignition, a new ellipse is generated
according to the amount of overlapping between the invading ellipse and the ignited cell.
A relevant feature of the model consists of the dynamic adaptation of the duration of each time step. In
practice, the step size is computed on the basis of the minimum amount of time that elapses before the ﬁre may
have travelled from a cell on the current ﬁre front to a neighbouring cell. It is important to note that although
repeatedly ﬁnding a suitable value the step size implies a certain computational cost, the use of an adaptive time
step is in general much more convenient than using a ﬁxed small time step [18, 19, 13].

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

Algorithm 1: The procedure for updating the BPM given a set M of modiﬁed FTUs. The algorithm uses
a data structure B collecting for each cell the references to the ﬁres that burn the cell itself. Besides the
updated BPM, stored as a CA property, the algorithm gives the modiﬁed B, denoted as BM .
1
2
3
4
5
6
7
8
9
10
11
12
13
14

resetCA(CAcur );
I ← buildListOfInvalidFires(M, B);
setIgnitions(CAcur , I);
F M ← modiﬁedFuelTreatment(F, M);
setModiﬁedRateOfSpread(F M , CAcur );
ΔTmax ← computeMaxStepIncrements(CAcur );
t ← 0;
while notT erminated(t, t f ) do
ΔT ← ﬁndStepSizes(CAcur , ΔTmax );
transitionFunction(CAcur , CAnext , t, ΔT);
copyNextToCurrent(CAcur , CAnext );
t ← t + ΔT;
BM ← updateIgnitionList(CAcur , B);
computeBurnProbabilityMap(CAcur , BM , n f );

4.2. Some implementation details
As in the sequential case, the typical CA parallel implementation involves two memory regions, which will
be called CAcur and CAnext , representing the current and next states for the cells respectively. For each CA step,
the neighbouring values from CAcur are read by the local transition function, which performs its computation and
writes the new state value into the appropriate element of CAnext .
In order to avoid expensive memory copying, in the GPGPU wildﬁre simulations we store most of the automaton data (i.e. both the CAcur and CAnext memory areas) in the GPU global memory. This involves: (i)
initialising the current state through a CPU-GPU copy operation (i.e. from host to device global memory) before
the beginning of the simulation and (ii) retrieving the ﬁnal state of the automaton at the end of the simulation
through a GPU-CPU copy (i.e. from device global memory to host memory). Also, at the end of each CA step a
device-to-device memory copy operation is used to re-initialise the CAcur values with the CAnext values.
Before the optimization process, to avoid unnecessary duplications of computation, we use the proper model
equations [15] to determine the maximum rate of spread, its direction and the local ellipse eccentricity for each cell
of the automaton. Such pre-computed quantities determine, together with the landscape topography, the wildﬁre
spread at the cell-level.
A critical aspect of the CA wildﬁre simulation is that only the cells on the current ﬁre front perform actual
computation [13]. Hence, launching one thread for each of the automaton cells would result in a certain amount
of dissipation of the GPU computational power. In addition, for the typical landscapes most ﬁres have a relatively
small size. Therefore, simulating a single ﬁre the number of active threads would be too low to allow the GPU to
eﬀectively activate the latency hiding mechanism [20].
However, the initial BPM computation as well as each step of the TS process involve the simulation of a
number of wildﬁres. Therefore, to achieve a reasonable parallel speedup we simultaneously simulate many ﬁres.
In particular, during the TS we follow Algorithm 1.
In the latter, after the re-initialization of the automaton, the list of invalid ﬁres I is built accounting for the
move to be evaluated (line 2). This is done using the set M containing the changed FTUs and a data structure B
collecting for each cell c the references to the ﬁres burning it (before applying the changes in M). In particular,
all the ﬁres that burn a cell which is part of the changed FTUs are included in I, which is then used to initialize
the ignition points in the automaton (line 3).
Afterwards, the changes contained in M are applied to the current candidate solution F obtaining a new point
F M (line 4). Then, the original rate of spread of the cells directly aﬀected by F M is reduced by applying a factor
αROS ∈ [0, 1] depending on the type of fuel treatment (line 5).
Once the rate of spread has been updated, in order to speed-up the time-step adaptation during the CA iterations, the maximum time-step size for each cell is pre-computed and stored in an array (line 6). Subsequently, the

971

972

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

Fig. 3. The approach used for mapping the transition function of a n × m automaton into a one-dimensional CUDA grid of threads. The array
Lt contains the three-dimensional indices ξi,(k)j of the cells belonging to the current ﬁre fronts. At the step t, a thread implementing the CA
transition function is issued for each element of Lt .

CA steps are iterated until the current time for each ﬁre (i.e. the vector t) reaches the ﬁnal time t f (lines 8-12). In
particular, at the beginning of each CA step, the function ﬁndStepSizes (line 9) issues the CUDA kernel for dynamically adapting the time-step durations ΔT. Since this consists of ﬁnding the minimum of all allowed time-step
sizes among the cells on the current simultaneous ﬁre fronts, such kernel simply implements a standard parallel
reduction (PR) algorithm. The latter exploits the fast GPU shared memory and was implemented according to the
optimized examples included in the CUDA SDK.
After the computation of the vector ΔT,the kernel implementing the ﬁre propagation mechanism is activated
by transitionFunction. As detailed below, such kernel operates on all the ﬁres that are simultaneously propagated.
Subsequently, a device-to-device memory copy operation is used to re-initialise CAcur with CAnext (line 11). At
the end of the CA step, the current times t are updated according to the time-step durations ΔT (line 12). After all
the ﬁres propagations, the function updateIgnitionList gives the lists in BM , which is obtained from B accounting
for simulations just updated. Also, the algorithm compute the updated BPM which is used later for evaluating the
objective function.
Before the start of the TS process, a procedure very similar to that described above is used for building both
the initial BPM as well as the lists in B(0) .
4.2.1. Dynamic kernel mapping
In order to maximize the GPU usage, all the relevant kernels mentioned above are mapped only on the actually
burning cells of each ﬁre. Such a dynamic kernel mapping is based on a list L of the currently burning cells which
is maintained in the GPU global memory. More in particular, as depicted in Figure 3, two copies of the list are
used, namely Lt and Lt+1 . Both are implemented through an array allocated in the device (i.e. GPU) global
memory. At the beginning of the t-th CA step, Lt contains the three-dimensional indices of the cells belonging to
the current simultaneous ﬁre fronts deﬁned as:
ξi,(k)j = m i + j + n m k

(4)

where i and j are the row and column index of the cell, k is the index of the ﬁre, n and m are the number of rows and
columns of the automaton, respectively. Then, the PR kernel issued by f indS tepS izes (see line 9 of Algorithm 1)
is mapped on the elements of Lt to ﬁnd the current step sizes for each ﬁre. Subsequently, the size of Lt+1 is set
to |Lt | multiplied by the size of the CA neighbourhood (i.e. 25 in our case) and all the entries are initialised to a
value which does not represent a valid cell index according to Equation 4 (e.g. a negative integer). Once Lt+1 has
been initialised, a thread implementing the CA transition function is issued for each element of Lt . In particular,

973

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

(a)

(b)

Fig. 4. (a) The landscape under study: a 4.6 km × 3.1 km area in Sardinia, Italy. Land-cover classes were derived from the CORINE data. (b)
The initial BPM obtained through the simulation of 150 ﬁres originated by a regular grid of ignition points.

each thread is responsible for updating a speciﬁc portion of Lt+1 having the size of the CA cell neighbourhood.
In the ﬁre spread mechanism, if a burning cell is still burning at the end of the step, then its index ξ is read from
Lt and inserted in the proper position of Lt+1 . Also, when a cell propagates the ﬁre to a neighbouring cell, the
index of the newly ignited cell given by Equation 4 is inserted in Lt+1 . At the end of the step, a parallel stream
compaction procedure [21] removes the unused entries from Lt+1 (i.e. those that still have the initial value). In
particular, the eﬃcient algorithm presented in [22] was included in the program for such purpose.
5. An Application Example
A preliminary empirical investigation of the proposed approach was carried out using an area of the Sardinia
region (Italy), which is historically characterized by a high frequency of serious wildﬁres. The landscape, shown
in Figure 4(a), was modelled through a Digital Elevation Model composed of 228 × 157 square cells with side of
20 m. In the area, the terrain is relatively complex with an altitude above sea level ranging from 120 to 610 m.
The heterogeneous fuel bed data, based on the land cover map from the CORINE EU-project, were mapped on
the standard fuel models used by the CA. Plausible values of fuel moisture content were obtained from literature
data. Also, a domain-averaged open-wind vector from the North-East direction, having an intensity of 25 km h−1 ,
was used for producing time-constant gridded winds through WindNinja [23], a computer program that simulates
the eﬀect of terrain on the wind ﬂow. A duration of 8 hours was adopted for all simulated ﬁres. Over the area, a
regular grid of 15 × 10 ignition points was superimposed, leading to 150 ﬁres to simulate for building the initial
BP, which is shown in Figure 4(b). In the experiments we used a nVidia Geforce graphic card, namely the GTX
680, which belongs to the new nVidia’s Kepler GPU architecture. The GPU was part of a workstation equipped
with a Intel Xeon X5660 (2.80 GHz) 6-Core CPU.
For the optimization problem, the threshold pα was set to two thirds of the maximum original burn probability
in the area. As a result, the initial value of the objective function was Aα = 2.14 Km2 . We modelled each FTU
as a 80% reduction of the original rate of spread (i.e. αROS = 0.2). Also, we tested many diﬀerent geometric and
spatial characteristics of the set F containing all FTUs (see Figure 2). It is worth noting that for each combination
gi = l, w, a, b the set F contains a diﬀerent number of elements. Also, we set the number of FTUs to be included
in the FT solution to q = 15. As for the TS parameters, we assumed nt = 50 as tabu list size, kd = 5 as number of
non-adjacent individuals included in the neighbourhood for promoting diversiﬁcation, and kt = 30 as number of
spatially adjacent neighbouring FTUs. The TS stopped when the objective function reached its minimum or after
a maximum number of 100 iterations without improvements.
Figure 5 shows the behaviour of the TS with some of the tested geometric characteristics. In order to account
for the probabilistic nature of our TS algorithm, the results were averaged over 10 independent runs. As can be
seen, the TS was able to provide diﬀerent optimized FTs for the area under study. In particular, for the geometric
data labelled as g4 , the convergence was particularly fast and the TS gave a solution that reduced to zero the area
above the preﬁxed threshold pα of burn probability.

974

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

Fig. 5. High risk area as a function of the TS iteration for some
of the diﬀerent geometric conﬁgurations investigated. Results
were averages over 10 runs.

Fig. 6. Average elapsed times for some of the optimizations.
The total number of ﬁre simulations and achieved reduction of
the high risk area are also shown on top of the bars

As shown in Figure 6, each optimization required a relevant number of simulated ﬁres. This is due to the fact
that each evaluation of a change applied to the current candidate solution requires the simulation af all the ﬁres that
intercept the involved cells. However, the GPGPU approach on the GTX 680 lead to a computing time which can
be considered very low if compared with those reported in similar recent applications [6]. In particular, on average
the best solution was achieved in less than 20 minutes and required slightly less than 83000 ﬁre simulations. It
is also important to know that, to build the BPM in Figure 4(b), the parallel speedup achieved by the GPGPU
approach illustrated in section 4.2 was 50.2 on the CPU/GPU mentioned above. The optimum solution g4 together
with the corresponding map of mitigated burn probabilities are represented in Figure 7(b). It is also interesting to
compare the achieved FT design with the initial spatial arrangement shown in Figure 7(a). As can be seen from the
BPM in the same Figure 7(a), the greedy approach was not able to avoid high risk areas. In particular, a residual
amount of 1.22 Km2 was the actual object of the subsequent optimization eﬀort.
It is worth noting that our optimization problem gives rise to a multimodal search space. In fact, in many cases,
for the same set of geometric and spatial characteristics gi , we obtained several diﬀerent optimum TS designs (i.e.
completely avoiding the high risk area). Presumably, this is related to the fact that in the formulation presented
above the total area to be treated is predetermined and is not subject to automatic optimization. However, the
proposed approach can be used to support FT design performing the TS with diﬀerent characteristics and number
of FTUs to include in the ﬁnal solution.

(a)

(b)

Fig. 7. (a) The greedy-generated initial solution and the corresponding BPM for the geometric characteristics g4 (see Figure 5); (b) The
optimized layout and the ﬁnal BPM.

Bachisio Arca et al. / Procedia Computer Science 18 (2013) 966 – 975

6. Conclusions and Future Work
In this paper we have presented an approach for the automatic design of a fuel treatment that could be used
as a tool for planning the ﬁre prevention and fuel management activities. This approach can be useful in order
to mitigate the impact on wildﬁres of the predicted changes of climate. The problem has been formulated as the
combinatorial optimization of a subset of treatment units taken from a predeﬁned spatial pattern.
According to our preliminary results, the investigated approach based on a Tabu Search procedure coupled
with a wildﬁre simulator has proven very eﬀective in providing high-quality solution designs.
Given the large number of wildﬁre simulations required by the search process, we have also proposed an
eﬀective GPGPU parallelization of the required simulations. This has lead to optimized solutions in a fraction of
the time reported in the literature for similar applications [6].
However, both in the formulation and solution of the optimization problem there is certainly still room for
improvement. In particular, in the future we plan to formulate the problem in such a way as to include the amount
of treated area between the decision variables to be optimized. In this case, a multi-objective approach, with the
determination of a Pareto-optimal frontier of solutions might provide an eﬀective support tool.
References
[1] S. Pyne, Introduction to Wildland Fires: Fire Management in the United States, John Wiley, New York, 1984.
[2] M. A. Finney, Design of regular landscape fuel treatment patterns for modifying ﬁre growth and behavior, Forest Science 47 (2) (2001)
219–228.
[3] J. K. Agee, C. N. Skinner, Basic principles of forest fuel reduction treatments, Forest Ecology and Management 211 (1?2) (2005) 83 –
96.
[4] R. E. Martin, J. B. Kauﬀman, Use of prescribed ﬁre to reduce wildﬁre potential, Tech. Rep. PSW-109, U.S. Department of Agriculture,
Forest Service, , Paciﬁc Southwest Forest and Range Experiment Station (1989).
[5] M. Finney, A computational method for optimising fuel treatment locations, International Journal of Wildland Fire 16 (6) (2007) 702–
711.
[6] A. Rytwinski, K. A. Crowe, A simulation-optimization model for selecting the location of fuel-breaks to minimize expected losses from
forest ﬁres, Forest Ecology and Management 260 (1) (2010) 1 – 11. doi:10.1016/j.foreco.2010.03.013.
[7] D. Martell, Forest ﬁre management, in: A. Weintraub, C. Romero, T. Bjrndal, R. Epstein, J. Miranda (Eds.), Handbook Of Operations
Research In Natural Resources, Vol. 99 of International Series In Operations Research amp; Mana, Springer US, 2007, pp. 489–509.
[8] F. Glover, C. McMillan, The general employee scheduling problem. an integration of ms and ai, Computers & OR 13 (5) (1986) 563–573.
[9] Y. Carmel, S. Paz, F. Jahashan, M. Shoshany, Assessing ﬁre risk using Monte Carlo simulations of ﬁre spread, Forest Ecology and
Management 257 (1) (2009) 370 – 377.
[10] A. Ager, M. Finney, Application of wildﬁre simulation models for risk analysis, in: Geophysical Research Abstracts, Vol. 11, EGU20095489, EGU General Assembly, 2009.
[11] R. Rongo, V. Lupiano, M. V. Avolio, D. D’Ambrosio, W. Spataro, G. A. Trunﬁo, Cellular automata simulation of lava ﬂows - applications to civil defense and land use planning with a cellular automata based methodology, in: SIMULTECH 2011 - Proceedings of 1st
International Conference on Simulation and Modeling Methodologies, Technologies and Applications, SciTePress, 2011, pp. 37–44.
[12] M. Gendreau, J.-Y. Potvin, Handbook of Metaheuristics, 2nd Edition, Springer Publishing Company, Incorporated, 2010.
[13] M. V. Avolio, S. Di Gregorio, V. Lupiano, G. A. Trunﬁo, Simulation of wildﬁre spread using cellular automata with randomized local
sources, in: ACRI 2012, Vol. 7495 of LNCS, Springer Berlin / Heidelberg, 2012, pp. 279–288.
[14] CUDA C Programming Guide, v. 3.2, 2010.
[15] R. C. Rothermel, A mathematical model for predicting ﬁre spread in wildland fuels, Tech. Rep. INT-115, U.S. Department of Agriculture,
Forest Service, Intermountain Forest and Range Experiment Station, Ogden, UT (1972).
[16] M. Alexander, Estimating the length-to-breadth ratio of elliptical forest ﬁre patterns, in: Proc. 8th Conf. Fire and Forest Meteorology,
1985, pp. 287–304.
[17] G. A. Trunﬁo, Predicting wildﬁre spreading through a hexagonal cellular automata model, in: ACRI, Vol. 3305 of LNCS, Springer, 2004,
pp. 385–394.
[18] S. H. Peterson, M. E. Morais, J. M. Carlson, P. E. Dennison, D. A. Roberts, M. A. Moritz, D. R. Weise, Using HFIRE for spatial
modeling of ﬁre in shrublands, Tech. Rep. PSW-RP-259, U.S. Department of Agriculture, Forest Service, Paciﬁc Southwest Research
Station, Albany, CA (2009).
[19] G. A. Trunﬁo, D. D’Ambrosio, R. Rongo, W. Spataro, S. Di Gregorio, A new algorithm for simulating wildﬁre spread through cellular
automata, ACM Transactions on Modeling and Computer Simulation 22 (1) (2011) 6.
[20] CUDA C Best Practices Guide, 2012.
[21] D. Horn, Stream reduction operations for GPGPU applications, Addison Wesley, 2005, Ch. 36, pp. 573–589.
[22] M. Billeter, O. Olsson, U. Assarsson, Eﬃcient stream compaction on wide simd many-core architectures, in: Proceedings of the ACM
SIGGRAPH/EUROGRAPHICS Conference on High Performance Graphics, ACM, 2009, pp. 159–166.
[23] J. Forthofer, K. Shannon, B. Butler, Simulating diurnally driven slope winds with WindNinja, in: Proceedings of 8th Symposium on Fire
and Forest Meteorological Society - Kalispell, MT, 2009.

975

