Procedia Computer Science
Volume 80, 2016, Pages 98–107
ICCS 2016. The International Conference on Computational
Science

A Performance Characterization of Streaming Computing
on Supercomputers
Stefano Markidis1 , Ivy Bo Peng1 , Roman Iakymchuk1 , Erwin Laure1 ,
Gokcen Kestor2 , and Roberto Gioiosa2
1

2

Computational Science and Technology Department, KTH Royal Institute of Technology,
Stockholm, Sweden
{markidis, bopeng, riakymch, erwinl}@kth.se
Computational Science and Mathematics Division, Paciﬁc Northwest National Laboratory, WA
{Gokcen.Kestor, Roberto.Gioiosa}@pnnl.gov

Abstract
Streaming computing models allow for on-the- y processing of large data sets. With the increased demand for processing large amount of data in a reasonable period of time, streaming
models are more and more used on supercomputers to solve data-intensive problems. Because
supercomputers have been mainly used for compute-intensive workload, supercomputer performance metrics focus on the number of oating point operations in time and cannot fully
characterize a streaming application performance on supercomputers. We introduce the injection and processing rates as the main metrics to characterize the performance of streaming
computing on supercomputers. We analyze the dynamics of these quantities in a modi ed
STREAM benchmark developed atop of an MPI streaming library in a series of di erent congurations. We show that after a brief transient the injection and processing rates converge to
sustained rates. We also demonstrate that streaming computing performance strongly depends
on the number of connections between data producers and consumers and on the processing
task granularity.
Keywords: High-Performance Computing, Streaming Computing, Data-Driven Applications, Big Data

1

Introduction

Supercomputers consist of computing units and associated memories on computing nodes that
are connected via an high performance interconnection network. These networks are characterized by small latency in the microsecond range and by a large bandwidth of the order of
GB/s [3]. The dominant programming system to implement communication across the network is MPI [6] that provides a set of subroutines to explicitly send and receive data from one
98

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.301

Streaming Computing on Supercomputers

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

process to another. Traditionally, supercomputers and MPI have been used for solving Partial Di erential Equations (PDE). Examples of these equations are Navier-Stokes equations for
Computational Fluid Dynamics, Maxwell equations for electromagnetic problems, Schrodinger
equation for Quantum Mechanics problems. Typically, these equations are discretized in space
on a computational grid and advanced in time with several computational steps. The computational workload is divided among processes associated to a speci c computing unit. Each
process computes the calculations relative to a small part of the grid. Interconnection communication is needed to move data from processes mapped to di erent computing nodes. The
communication occurs regularly at each computational cycle, and it is typically coarse-grained
as a relatively large amount of data on ghost cells are communicated among processes. In these
problems, the time taken for communication is typically a fraction of the computation cost.
For this reason, these problems are referred as compute-intensive. Because supercomputers are
mainly used for solving compute-intensive problems, the widely used metric to characterize an
application performance is the number of oating point operations per second (FLOPS). This
quantity is measured using the High-Performance Linpack (HPL) benchmark [11]. More recently the High Performance Conjugate Gradient (HPCG) benchmark has been used [5]. Both
the HPL and HPCG benchmarks measure FLOPS to solve a linear system.
Lately, supercomputers are more and more used for solving a di erent class of problems
that require the analysis and classi cation of large amount of data. The reason for this is that
conventional computing resource cannot support the analysis of such large amount of data in a
reasonable amount of time (Big Data). In this class of problems, the number of data movements
across memory spaces and interconnection network is much larger than the number of oating
point operations. These problems are also called data-intensive. A typical example of these
problems in the scienti c domain is the analysis of the results from large experiments, such as
the Large Hadron Collider (LHC) and the future Square Kilometer Array (SKA). For instance,
the LHC facility stores 30 PB data per year. These data is analyzed to identify presence of the
Higgs boson and dark matter in the LHC data. As a second example, the SKA antennas will
provide a data rate in the order of 10 PB/s for radioastronomy studies [2]. Additional examples
of data-intensive problems include the analysis of data from spacecrafts for climate studies,
from seismology centers for earthquake observation and prediction, and from Next Generation
Sequencers (NGS) for bioinformatics research.
Data-intensive problems are typically formulated as a pipeline of several tasks that act on a
input data set to provide an output data set. For instance, the SKA task pipeline will include
signal processing, handling correlation and beam-forming, image generation and calibration [2].
Such a pipeline can be conveniently expressed with the streaming computing model. A stream
is an irregular data ow. Streams link di erent tasks of the pipeline of the data-intensive
application by providing input and output of the tasks. Communication in streaming systems
is irregular and ne-grained as stream communication units are typically small in size. The main
feature of streaming computing is that the results of each computational task are calculated
on-the- y. The streaming model requires a single-pass analysis: stream elements (SE) are
consumable so that each stream element is only accessed and processed once. For this reason,
streaming computing allows for processing on-the- y large data sets that do not t to the
memory of the computing system without requiring the use of a batch system or intermediate
data storage. Because data is processed on-the- y and computation must be completed before
disregarding the input data, tasks of the pipeline are strongly coupled and the data injection
and the processing capability are deeply correlated in the streaming system. Popular streaming
frameworks, such as Spark [12] and Flink [7], support applications written in Java, Python, Scala
but they are not speci cally designed for running streaming computing on Supercomputer with
99

Streaming Computing on Supercomputers

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

MPI. Di erently from these approaches, we use a streaming computing library designed for
supercomputers in this work.
Performance metrics, such as FLOPS, are not convenient to assess the performance of a
streaming computing system. To address this problem, the Graph500 benchmark [9] introduces
a new rate called Traversed Edges Per Second (TEPS) to characterize the performance to
solve a graph problem that is the core part of most analytics workloads. However, this new
rate cannot fully characterize the performance of a streaming computing system. One of the
motivations of this paper is to introduce a convenient metric to de ne the performance of
streaming computing on a supercomputer when running a streaming benchmark. More and
more data-intensive applications run on supercomputers and it is likely that in the next future
we will observe a shift from compute-intensive to data-intensive. For this reason, it is important
to start characterizing the performance of a supercomputer as a streaming computing system to
compare the suitability di erent HPC systems to solve data-intensive problem with streaming
computing. The two main contributions of this paper are:
1. It provides a set of measurable quantities, metrics, to characterize the performance of streaming computing on supercomputers. In particular, we introduce the injection and processing
rates, and we show an example of using these quantities to characterize streaming computing
performance on a Cray XC40 system.
2. It shows that the performance of streaming computing systems on supercomputers strongly
depends on the number of stages in the application, on the number of connections between
di erent tasks and on the processing task granularity.
The paper is organized as follows. The second section introduces streaming computing on
supercomputers, the terminology in use, an MPI streaming library and a modi ed STREAM
benchmark. The third section introduces the metrics to characterize streaming computing.
Section 4 describes rst the benchmark environment and then presents the performance results
of the STREAM benchmark running on a Cray XC40 in di erent con gurations. Finally, the
results are summarized in Section 5.

2

Supercomputers as Streaming Systems

We consider a supercomputer as a streaming computing system: each processing task of the
computational pipeline is mapped to a computing unit of the supercomputer and MPI is
used to enable streaming between di erent tasks. The mapping of the tasks of the computational pipeline to the computing resources in data-intensive applications is called workﬂow
or task scheduling. Di erent software platforms, such as Kepler [1] and Pegasus [4], allow for
dynamic mapping of tasks to computing units in heterogenous systems comprising clusters,
cyber-infrastructures and commercial and academic clouds. Each task maps statically to an
MPI process on a supercomputer in our study. Dynamic mapping is also possible but it is not
considered in this work. A task can be a data producer, i.e., the task sends some data out after
opening a le or completing some calculation. A task can be a data consumer. For instance,
consumers receive a data stream as input and perform some operations on the data, such as
computation, I/O operations, visualization and data movement. A task can be both consumer
and producer if it receives a stream as input, it processes this stream and sends out the results
as a stream to a consumer. Three examples of streaming application are presented in Figure 1.
Panel a shows a generic streaming application: each blue square represents a task that can be
a data producer (P), consumer (C) or both (C/P). Producers and consumers are linked by a
100

Streaming Computing on Supercomputers
a)

P

C/P

P

C/P

P

C/P

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

c)

P
C/P

C/P

C

P
C/P
P
C/P

P

P

P
v

v

C/P

C/P

C

C

v

P
C/P

b)
P

C/P

C/P

C

P

P

C/P

C/P

C

P

P

C/P

C/P

C

P

C/P

C/P

Figure 1: A generic streaming application connecting producer (P), consumer (C) and consumer/producer (C/P) processes with streams is represented in panel a. A streaming application is a combination of streaming linear chains (panel b) and trees (panel c).

stream consisting of several stream elements communicated irregularly (yellow small squares).
A generic streaming application, such as the one presented in panel a, consists of a combination
of two basic streaming applications: linear chain (panel b) and tree (panel c). Each consumer
is linked to only one producer by a data stream in linear chain applications, while there is more
than one producer per consumer in the tree application. We analyze the performance of linear
chain and tree applications (panels b and c in Figure 1) in this work.

2.1

MPI Streaming and STREAM Benchmark

MPI is the de-facto standard of programming system for developing parallel applications running on supercomputers [6]. It is also possible to use PGAS libraries, such as OpenSHMEM or
GPI, network transport software layers, such GASNet, or network-dependent interfaces, such
as Portals and DMAPP for InﬁniBand and Cray networks. However, MPI is the most common
and adopted approach when it comes to programming supercomputers. The vast majority of
the applications uses MPI and all the supercomputers provide users with MPI installations
optimized for the given architecture. MPI does not support natively streaming computing as
there are no functions to express simple operations on stream, such as send a stream or process
the data from an incoming stream. We use an MPI streaming library, called MPIStream [10],
that is written in C and developed atop of MPI. The MPIStream library functions are implemented using MPI persistent non-blocking point-to-point communication. The design and
implementation details of this library together with its performance are provided in Ref. [10].
The streaming application under consideration in this work is a modiﬁed version of the
popular STREAM benchmark [8]. While the original STREAM benchmark is used to determine
the bandwidth of the memory system, our STREAM benchmark tests streaming computing on
supercomputers. We implemented a STREAM benchmark to deﬁne producers and consumers
to stream out data, consisting of 10,000 stream elements, and to process data using the four
original STREAM computational kernels: copy, scale, add and triad. We present the results
relative to scale operation and with 512 B long stream element in this work. We characterize
the streaming computing performance in the cases of linear chain and tree applications with one
and four stages/levels. We note that the newly introduced metrics can be applied to any generic
101

Streaming Computing on Supercomputers

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

streaming computing application and do not depend on the speci c data-intensive application
in use.

3

Streaming Computing Performance Metrics

The goal of this paper is to introduce metrics to characterize the performance of streaming
computing on supercomputers and to investigate their dynamics and dependence on system
parameters. While typical metrics of supercomputer performance focus on measuring FLOPS,
the performance of streaming computing systems can be characterized in terms of the number
of SE streamed out and processed in time. We introduce two main quantities:
1. Injection rate = IR = size(SE)/ TSendSE [B/s]. This quantity is calculated as the size of
a stream element divided by the time taken by a send a stream element operation to return.
We note that send stream element function will return immediately if data is bu ered on the
sending process. However, a send stream element cannot return if a previous request from
the same producer has not be matched by the assigned consumer.
2. Processing rate = P R = size(SE)/ TP rocSE [B/s]. This quantity is calculated as the size
of a stream element divided by the time taken by a process a stream element operation to
return. This quantity largely depends on the kind of operation and its granularity.
These two quantities are strongly coupled as a change in the injection a ects the process rate
and vice-versa a change of processing rate a ects the injection rate.
Each producer/consumer is characterized by its own single injection/processing rate (IRS ,
P RS ); the sum of the individual injection/processing rates is the aggregated injection/processing
rate ({IRA , P RA } = i {IRS,i , P RS,i }). In multistage applications, IRA is calculated using
only IRS at the rst stage data producers while P RA is calculated only using P RA at the last
stage.
Because streaming computing systems are highly dynamic, the injection and processing
rates vary considerably in a short time period. To characterize the evolution of the injection
and projection rates, we introduce:
1. Peak rates = {IRP , P RP } = max({IRA , P RA })t>0 [B/s]. The peak rates are the maximum
values of the aggregated rates varying in time (t).
2. Sustained rates = {IRS , P RS } = {IRA , P RA }|t>>0,inj=const [B/s]. The sustained rates are
equilibrium aggregated rate values reached after a transient under the condition of constant
injection from data producers. The injection has to be constant in order to reach an equilibrium value. In fact, a change of number of send stream element operations would result in a
rapid change of the injection and processing rate. Data is streamed at a constant frequency
(stream element-by-element in a loop of 10,000 cycles) in our tests. We note that several
data-intensive applications stream out data irregularly. An equilibrium rate value cannot be
reached and this metric cannot be determined in such a case.
We analyze the performance of streaming benchmarks consisting of multistage/multilevel linear
chains/trees. To characterize the loss of performance when adding one additional stage to
the application, we introduce a percentage transmission loss (% TL ) metric, de ned as the
percentage di erence between the sustained injection rate of one stage application and the
sustained injection rate of the application with n stages: %T L = (IRS,1 − IRS,n )/IRS,1 × 100.
102

Streaming Computing on Supercomputers

4

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

Experimental Results

We carried out STREAM benchmark simulations on the KTH Beskow supercomputer. Beskow
is a Cray XC40 system, based on Intel Xeon E5-2698v3 16-core (2.30 GHz) processors and Cray
Aries interconnect network with Dragon y topology. Each Beskow node has 32 cores divided
between two sockets, with 16 cores on each. The RAM for each node is 64 GB. The total number
of cores is 53,632. Cray C compiler version 5.2.40 and the Cray MPICH2 library version 7.0.4
have been used. In all our simulations, we use multiple of 32 data producers so that data
producers fully occupy one or more nodes of the Beskow supercomputer. We also ensure that
consumers are located on a di erent node of the supercomputer so that communication over
the interconnection network is always performed and producers and consumers do not share
the same node. Other data producers/consumer process placement are not considered in this
paper. We found that peak and sustained rates reach identical values in di erent tests despite
the di erences in the individual processing/injection rates.
We analyze the performance of a streaming linear chain application (Figure 1 b) of length
one and three as a rst example of a performance study of a streaming application. Each stage
of the linear chain comprises 32 processes for a total of 64 (linear chain of length one) and 128
MPI (linear chain of length three) processes. The top panel of Figure 2 presents the aggregated
injection and processing rates for a linear chain application of length one (blue and red lines)
and three (green and pink lines). It is possible to determine the sustained and peak rates by
visually inspecting the evolution of the aggregated rates. The sustained rates are reached after
a brief transient, lasting approximately 5 ms. The sustained injection and processing rates
converge to approximately the same value. The sustained rates are 5.82 GB/s (injection) and
5.74 GB/s (processing) for linear chain of length one while they are 3.68 GB/s (injection) and
3.67 GB/s (processing) for linear chain of length three. It is also clear that adding stages to the
linear chain introduces a decrease of the sustained peaks with a percentage transmission loss
of 38 %. The insert in the top panel of Figure 2 allows us to understand how the rates vary in
the 0 - 4 ms time period. Initially, the rates reach the highest values: the peak rates are 7.51
GB/s and 5.91 GB/s for linear chain of length one and three, respectively. The sustained rates
are approximately 77 % the peak rates.
The bottom panels of Figure 2 show the single rates (IRS and P RS for a given data producer
and consumer) and their moving averages for linear chain of length one (left bottom panel) and
length three (right bottom panel). The inserts in the two panels represent an histogram of a
normalized single processing rate distribution. In the case of linear chain of length one, the
single rates are centered at two values: 0.016 and 0.3 GB/s with a moving average of 0.18 GB/s.
This value is consistent with the sustained peak rate of 5.82 GB/s (32 × 0.18). These rates and
their variability are higher but very similar qualitatively to those in the case of linear chain of
length three (bottom right panel of Figure 2). When comparing the two bottom panels, we
remark two points. First, the processing rates are centered around two values: the histogram
has a peak at a small rate (≈ 0.02 GB/s, slow streaming) with a small variance and at a large
rate (0.3 GB/s, fast streaming) with a large variance. The streaming on a single consumer has
a slow and a fast component. Second, the injection and processing rates have approximately
the same distributions.
We investigate the performance of an application with a binomial tree con guration (Figure 1 c) as a second example of a performance study of a streaming application. We consider
rst a binomial tree with 256 producers and 128 consumers and then a multilevel tree with
a 256-128-64-32 con guration using a total of 480 MPI processes. The top panel of Figure 3
shows the aggregated injection and processing rates for the 256-128 tree (blue and red lines)
103

Streaming Computing on Supercomputers

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

8

4

8

2

6

0

32P over 32C - Injection
32P over 32C - Processing
32-32-32-32 Chain - Injection
32-32-32-32 Chain - Processing
0

1

2

3

4
10-3

4
2
0

0

0.02

0.04

0.06

0.1

0.12

0.14

0.16

0.18

0.8
0.6

40
30
20
10
0

0.4

0

0.5

1

Processing Rate (GB/s)

0.2
0

0

0.02

0.04

0.06

0.08

0.1

0.12

Elapsed Time (s)

0.14

0.16

0.18

0.2

1

0.2

0.8
0.6

12

Frequency (percent)

1

Injection Rate
Processing Rate
Moving Average Injection Rate
Moving Average Processing Rate

Injection/Processing Rate (GB/s)

Injection/Processing Rate (GB/s)

0.08

Elapsed Time (s)
Injection Rate
Processing Rate
Moving Average Injection Rate
Moving Average Processing Rate

Frequency (percent)

Total Moving Average Rate (GB/s)

6

10

10
8
6
4
2
0

0.4

0

0.5

1

Processing Rate (GB/s)

0.2
0

0

0.02

0.04

0.06

0.08

0.1

0.12

0.14

0.16

0.18

0.2

Elapsed Time (s)

Figure 2: Performance of the benchmark with linear chains of length one and three. The
top panel shows the aggregated rates for the linear chain of length one (blue and red lines)
and three (green and pink lines). The insert in this panel shows the rates in time period 0 - 4
ms. The two bottom panels show the rates and their moving average for a single producer and
consumer in the linear chain of length one (left panel) and three (right panel). The two inserts
represent the distribution of the processing rates.

and the 256-128-64-32 tree (pink and green lines). We note that the sustained injection and
processing rates are almost identical in the single-level tree benchmark as it is for the linear
chain case. The rates are 26.76 - 26.92 GB/s. However, the sustained injection rate value does
not match the value of the sustained processing rate in the case of multilevel tree application.
The sustained injection rate is 21.10 GB/s, roughly 3.5 times the corresponding sustained processing rate (5.82 GB/s) in the 256-128-64-32 conﬁguration. The insert in the top panel shows
an enlargement of the plot in the 0 - 1 ms time period, allowing us to determine the peak rates.
These are equal to the sustained rates. The peak processing rates are not close in value to
the sustained rate. The peak processing rates are 48.95 GB/s and 14.76 Gb/s for the 256-128
and 256-128-64-32 cases, respectively. The rates and their moving average for a single producer/consumer are presented in the bottom panels of Figure 3. The bottom panels also include
histogram with the processing rate distributions. Unlike the linear chain case, the distribution
of processing and injection rates are diﬀerent. The processing rate distribution reveals a band
structure at discrete rate values, i.e., 0.62 GB/s, 0.78 GB/s, 0.95 GB/s, etc ., corresponding to
peaks in the histogram. When comparing the moving averages of single consumer processing
rate (green lines in the bottom panels of Figure 3), we note that the variation of the processing
rate moving average is much larger than the one in the 256-128-64-32 case.
The dynamics of the processing and injection rates is similar in all the benchmarks we
carried out. The processing rate reaches the peak value after a fraction of a millisecond and
then exponentially decreases to the sustained processing rate. the dynamics of the injection rate
is very similar to that of the processing rate in the case of linear chain applications. Diﬀerently,
the injection rate increases rapidly in the ﬁrst millisecond and then saturates at the sustained
104

Streaming Computing on Supercomputers

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

50

30

30

20

25
20

10

15

0

0

0.5

256P over 128C - Injection
256P over 128C - Processing
256-128-64-32 Tree - Injection
256-128-64-32 Tree - Processing

1
10

10

-3

5
0

0

0.02

0.04

0.06

0.1

0.12

0.14

0.16

0.18

0.8
0.6

20
15
10
5
0

0.4

0

2

4

Processing Rate (GB/s)
0.2
0

0

0.02

0.04

0.06

0.08

0.1

0.12

Elapsed Time (s)

0.14

0.16

0.18

0.2

1
0.8
0.6

Frequency (percent)

1

Injection Rate
Processing Rate
Moving Average Injection Rate
Moving Average Processing Rate

Injection/Processing Rate (GB/s)

Injection/Processing Rate (GB/s)

0.08

0.2

Elapsed Time (s)
Injection Rate
Processing Rate
Moving Average Injection Rate
Moving Average Processing Rate

Frequency (percent)

Total Moving Average Rate (GB/s)

40

8
6
4
2
0

0.4

0

2

4

Processing Rate (GB/s)
0.2
0

0

0.02

0.04

0.06

0.08

0.1

0.12

0.14

0.16

0.18

0.2

Elapsed Time (s)

Figure 3: Performance of the benchmark with binomial trees of height one and three. The top
panel shows the aggregated rates for the binomial tree of height one (blue and red lines) and
three (green and pink lines) levels. The insert in this panel shows the rates in 0 - 1 ms time
period. The two bottom panels show the rates and their moving average for a single producer
and consumer in the binomial tree of height one (left panel) and three (right panel). The two
inserts represent the distribution of the processing rates.

injection rate in the tree applications.
Table 1 summarizes the results of some of the experiments we carried out using diﬀerent
benchmark conﬁgurations. This table presents the injection and processing rates (both peak
and sustained) and the percentage transmission loss varying the number of application stages,
the number of producers per consumer and the processing task granularity.
We study ﬁrst the eﬀect of multiple stages and levels in linear chain and tree applications.
Adding a stage to the linear chain applications results in a decrease of the sustained injection
rate and consequent increase of the percentage transmission loss: the sustained injection rates
decrease from 5.82 GB/s to 5.09 GB/s (2 stages) and to 3.68 GB/s (3 stages) with a corresponding transmission loss of 12% (2 stages) and 38% (3 stages). The percentage of transmission loss
is 21% in the case of a three levels tree benchmark.
We investigate the impact of diﬀerent numbers of connections between producers per consumers: the performance of the cases 64-32, 480-32 and 512-32 can be compared with the linear
chain 32-32 case. We note ﬁrst that doubling the number of producers, the sustained processing
rate increases but it does not double: the sustained processing rate for the 64-32 conﬁguration is
7.31 GB/s that is 1.27 times the processing rate of the 32-32 case (5.74 GB/s). Largely increasing the ratio of producer to consumer only slightly increases the sustained processing rate. This
increases to 8.51 GB/s in the 480-32 case. Unexpectedly, the sustained processing rate drops to
1.67 GB/s when the number of consumers per producer is 16 (512-32 case). This performance
drop is likely due to network congestion but additional investigation is needed to determine the
exact cause. Tests have been performed on a BG/Q machine and the results do not show any
sudden drop of performance increasing the number of producers per consumer [10].
105

Streaming Computing on Supercomputers

No. Prod. - No. Cons.
32-32 (LC)
32-32-32 (LC)
32-32-32-32 (LC)
256-128 (T)
256-128-64-32 (T)
64-32 (T)
480-32 (T)
512-32 (T)
32-32 (LC)
32-32 (LC)
32-32 (LC)

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

Task Granularity
FLOP/SE
512
512
512
512
512
512
512
512
10,240
102,400
1,024,000

IRP
GB/s
7.51
6.65
5.91
26.82
21.11
8.88
15.23
58.40
7.48
6.22
6.27

IRS
GB/s
5.82
5.09
3.68
26.76
21.10
7.37
8.52
3.96
6.05
1.40
0.14

P RP
GB/s
7.54
8.17
5.83
48.95
14.76
11.51
9.12
5.14
7.40
1.40
0.14

P RS
GB/s
5.74
5.08
3.67
26.92
5.82
7.31
8.51
1.67
6.39
1.40
0.14

% TL
%
0
12
38
0
21
0
0
0
0
0
0

Table 1: Injection peak (IRP ) and sustained (IRS ) rates, processing peak (P RP ) and sustained
(P RS ) rates and percentage transmission loss (% TL) for di erent streaming benchmarks with
linear chain (LC) and tree (T) con gurations with di erent task granularity.
Finally, we study the impact of changing the granularity of the processing task in a 32-32
linear chain application by increasing the number of oating in point operations (FLOP) per
stream element. The sustained processing rate increases by 10% when the FLOP per SE increases 20 times from 512 to 10,240. By further increasing the number of FLOP to 102,400, the
sustained processing rate drops to 1.40 GB/s. It is likely that the workload of task granularity,
which are less than 100,000 FLOP per SE, is completely overlapped by the streaming communication. Instead, communication is not fully overlapped by more computational intensive
workload, leading to a degradation of the sustained processing rate. By increasing the FLOP
per SE ten times to 1,024,000, the sustained processing rate further decreases to 0.14 GB/s.

5

Conclusions

The goals of this paper are to characterize the performance of streaming application running
on supercomputer and to study the performance of streaming benchmarks. We introduced two
main quantities to characterize the performance: the injection and processing rates. We note
that similar metrics, such as injection rates, are already in use to characterize the performance
of interconnection networks [3] but not speci cally for streaming computing systems. Since
the rates vary largely in time, we used also peak and sustained rates as two main values to
characterize the performance dynamics.
We carried out a series of benchmark tests on a Cray XC40 supercomputer to show how
the metrics can be used to characterize the performance of streaming computing on a Cray
supercomputer using MPIStream and a modi ed STREAM benchmark. We note that the
benchmark results depend on the supercomputer in use and on the implementation of the
streaming library. Additional tests have been carried out on di erent supercomputers but the
results have been not presented in this paper for lack of space.
We found that peak rates are achieved in the rst millisecond and then rates stabilize on
sustained rates in our benchmark environment. In linear chain applications, the sustained
injection and processing rates have approximately the same value. Instead, sustained injection
and processing rates di er in multi-level tree benchmarks.
106

Streaming Computing on Supercomputers

Markidis, Peng, Iakymchuk, Laure, Kestor, Gioiosa

We studied streaming in di erent con gurations, varying the number of stages in the application, the number of connections between data producers and consumers, and the granularity
of the processing tasks. We showed that an increase of number of stages in the benchmark leads
to a decrease of the rates and to an increase of the transmission loss. Increasing the number of
data producers per data consumer on the Cray XC40 leads to a slight increase of the processing
rate if the number of connections between consumers and producers is less than 16, while the
processing rate performance strongly degrades if 16 or more connections are in use. The processing rate also strongly depends on the processing task granularity: we found that it drops
for computing workload that are larger than 102,400 FLOP per stream element. The quantities
we have introduced can be used to determine the suitability of di erent supercomputer and
programming systems for streaming computing. We show that these quantities allows us to
assess the dependence of the supercomputer performance on application con guration (number of stages, number of producers and consumers, processing task granularity) and to design
e ective data-intensive applications for supercomputers.
This work was funded by the European Commission through the EPiGRAM (grant agreement no. 610598. www.epigram- project.eu) and
SAGE projects (grant agreement no. 671500. www.sage- storage.eu).

References
[1] I. Altintas et al. Kepler: an extensible system for design and execution of scientiﬁc workﬂows. In
Scientiﬁc and Statistical Database Management, 2004. Proceedings. 16th International Conference
on, pages 423–424. IEEE, 2004.
[2] P. C. Broekema, R. V. Van Nieuwpoort, and H. E. Bal. Exascale high performance computing in
the square kilometer array. In Proceedings of the 2012 workshop on High-Performance Computing
for Astronomy Date, pages 9–16. ACM, 2012.
[3] W. J. Dally and B. P. Towles. Principles and practices of interconnection networks. Elsevier, 2004.
[4] E. Deelman et al. Pegasus: A framework for mapping complex scientiﬁc workﬂows onto distributed
systems. Scientiﬁc Programming, 13(3):219–237, 2005.
[5] J. Dongarra and M. A. Heroux. Toward a new metric for ranking high performance computing
systems. Sandia Report, SAND2013-4744, 312, 2013.
[6] W. Gropp, T. Hoeﬂer, R. Thakur, and E. Lusk. Using Advanced MPI: Modern Features of the
Message-Passing Interface. MIT Press, 2014.
[7] V. Markl. Breaking the chains: on declarative data analysis and data independence in the big
data era. Proceedings of the VLDB Endowment, 7(13):1730–1733, 2014.
[8] J. D. McCalpin. Memory bandwidth and machine balance in current high performance computers.
1995.
[9] R. C. Murphy, K. B. Wheeler, B. W. Barrett, and J. A. Ang. Introducing the Graph500. Cray
Users Group (CUG), 2010.
[10] I. B. Peng, S. Markidis, E. Laure, D. Holmes, and M. Bull. A data streaming model in MPI. In
Proceedings of the 3rd Workshop on Exascale MPI, page 2. ACM, 2015.
[11] A. Petitet. HPL - a portable implementation of the high-performance linpack benchmark for
distributed-memory computers. http://www. netlib-. org/-benchmark/hpl/, 2004.
[12] M. Zaharia et al. Spark: cluster computing with working sets. In Proceedings of the 2nd USENIX
conference on Hot topics in cloud computing, volume 10, page 10, 2010.

107

