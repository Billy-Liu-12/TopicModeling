Procedia Computer
Science
Procedia
Computer Science
Science 001 (2010)
Procedia
Computer
(2012)1–9
1931–1939

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

A second-order compatible staggered Lagrangian hydrodynamics
scheme using a cell-centered multidimensional approximate
Riemann solver
Rapha¨el Loub`ere1,∗
Universit´e de Toulouse, Institut de Math´ematiques de Toulouse et CNRS, France

Pierre-Henri Maire∗
UMR CELIA, CNRS, Universit´e Bordeaux 1, CEA, France.

Pavel V´achal1,∗
Faculty of Nuclear Sciences and Physical Engineering, Czech Technical University in Prague, Czech Republic.

Abstract
We develop a general framework to derive and analyze staggered numerical schemes devoted to solve hydrodynamics equations in 2D. In this framework a cell-centered multi-dimensional approximate Riemann solver is used to
build a form of artiﬁcial viscosity that leads to a conservative, compatible and thermodynamically consistent scheme.
A second order extension in space and time for this scheme is proposed in this work and we prove on numerical
examples the validity of this approach.
Keywords: Lagrangian hydrodynamics, artiﬁcial viscosity, Riemann solver, second order

c 201247.11.Df,
⃝
Published47.10.Ab,
by Elsevier
Ltd. Open access under CC BY-NC-ND license.
PACS:
47.40.Nm

2000 MSC: 35L75, 76N15, 76N99, 76L05, 65M06

1. Introduction
In this work we present new 2D compatible staggered Lagrangian hydrodynamics schemes. Their artiﬁcial viscosity is based on a cell-centered multidimensional approximate Riemann solver. This new formulation allows to
link the newly developed cell-centered Lagrangian schemes [8] and the compatible staggered Lagrangian formulation
∗ Corresponding

author: R. Loub`ere
Email addresses: raphael.loubere@math.univ-toulouse.fr (Rapha¨el Loub`ere), maire@celia.u-bordeaux1.fr (Pierre-Henri
Maire), vachal@galileo.fjfi.cvut.cz (Pavel V´achal)
URL: http://loubere.free.fr (Rapha¨el Loub`ere), http://www.celia.u-bordeaux1.fr/˜maire/ (Pierre-Henri Maire),
http://kfe.fjfi.cvut.cz/˜vachal/ (Pavel V´achal)
1 This author has been supported by the Czech Ministry of Education grants MSM 6840770022, MSM 6840770010 and LC528

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.216

1932

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939

2

/ Procedia Computer Science 00 (2010) 1–9

[6, 2]. Extensions to second order in space and time are the main contribution of this paper. Second order in space is
obtained through the use of a piecewise linear reconstruction of the velocity ﬁeld inside the force computation. Second
order in time is gained thanks to a predictor-corrector scheme. The paper is organized as follows; ﬁrst the compatible Lagrangian formalism is presented (equations, notation and Riemann solver) then the second order extension is
introduced, ﬁnaly numerical examples are presented to assess the validity of this approach.
2. Compatible Lagrangian hydrodynamics
2.1. Governing equations.
In classical staggered Lagrangian framework [6, 2] one solves hydrodynamics equations written as
ρ

d 1
− ∇ · U = 0,
dt ρ

ρ

d
U + ∇P = 0,
dt

ρ

d
ε + P∇ · U = 0,
dt

(1)
2

where ρ is the density, U the velocity and ε the speciﬁc internal energy related to total energy E as E = ε + U2 .
The previous system is equipped with a thermodynamics closure (equation of state EOS) providing the pressure
P = P(ρ, ε). The ﬁrst two equations express the volume and momentum conservation equations.
Volume conservation equation is often referred to as the Geometrical Conservation Law (GCL). The last equations
are the trajectory equations
dX
= U(X(t), t), X(0) = x,
(2)
dt
expressing the Lagrangian motion of any point initially located at position x.
2.2. Notation.
We use a staggered discretization (see ﬁgure 1). Position and velocity are deﬁned at grid points while thermodynamical variables are located at cell centers. An unstructured grid consisting of a collection of non-overlapping
polygons is considered. Each polygonal cell is assigned a unique index c and denoted Ωc . Each vertex/point of the
mesh is assigned a unique index p and we denote C(p) the set of cells sharing a particular vertex p. A polygonal
cell is subdivided into a set of subcells; each being uniquely deﬁned by a pair of indices c and p and denoted Ωcp .
This subcell is constructed by connecting the cell center of Ωc to the mid-points of cell edges impinging on point p.
The union of subcells Ωcp that share a particular vertex p allows to deﬁne the dual cell Ω p related to point p with
Ω p = c∈C(p) Ωcp . Previous notation deﬁnes the primary grid c Ωc and the dual grid p Ω p . Primary cells Ωc and
dual cells Ω p volumes are functions of time t. We make the fundamental assumption that the subcells are Lagrangian
volumes. Namely the subcell mass mcp is constant in time; knowing initial density ﬁeld ρ0 (X) one introduces the
initial mean density in cell c as ρ0c = Ω (0) ρ0 (X)dX/Vc0 , where Vc0 is the volume of cell Ωc at time t = 0. Subcell mass
c
0
0
where Vcp
is the initial volume of subcell Ωcp . By summation of Lagrangian subcell masses
is deﬁned as mcp = ρ0c Vcp
one deﬁnes Lagrangian cell/point masses as
mcp , and m p =

mc =
p∈P(c)

mcp ,

(3)

c∈C(p)

where P(c) is the set of counterclockwise ordered vertices of cell c.
2.3. Compatible discretization.
Following [6, 2] the momentum equation is semi-discretized in space over the dual cell Ω p
mp

d
Up +
Fcp = 0,
dt
c∈C(p)

(4)

1933

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939

3

/ Procedia Computer Science 00 (2010) 1–9

+
L+
cp Ncp

Ωc

p+
p+

c
c

− N−

L cp

cp

Πc+
p

Ω cp

−
Πcp

p

p

L cp Ncp
p−

p−

Figure 1: Left: Polygonal cell Ωc subdivided into subcells Ωcp . Points (subscript p) are counterclockwise ordered p− , p, p+ . Outward unit normals
−
+
− , L+ . Corner vector: L N
−
+
of internal subcell boundaries: N−cp , N+cp . Internal edge lengths: Lcp
cp cp = −Lcp N cp − Lcp N cp . Right: Notation used in
cp
the cell-centered Riemann solver. Two pressures per subcell are introduced at the cell center: Π+cp , Π−cp . They are related to geometrical vectors
+ N + , L− N − . Then 2 × P(c) pressures are introduced within cell Ω .
Lcp
c
cp
cp cp

where Fcp is a fundamental object called subcell force from cell c that acts on point p and is deﬁned as Fcp =
PNdl, so that c∈C(p) Fcp = ∂Ω PNdl. Total momentum conservation (away from boundaries) is given in
∂Ω p (t)∩Ωc (t)
p
d
its discrete form by p m p U p = 0, however (4) yields
dt
⎛
⎞
⎜⎜⎜
⎟⎟⎟
d
⎜⎜⎝⎜−
mp U p =
Fcp ⎟⎟⎠⎟ = 0.
(5)
dt
p
p
c∈C(p)

By switching the sums one ﬁnally exhibits the condition − c p∈P(c) Fcp = 0, and a suﬃcient cell-based condition is
that the subcell forces acting in cell c sum up to zero: p∈P(c) Fcp = 0.
A semi-discrete internal energy equation that ensures total energy conservation is then derived. Away from boundary
conditions, we introduce total kinetic energy at time t > 0 as a sum over the dual cells K(t) = p 21 m p U2p (t), and
internal energy as E(t) = c mc εc (t). Total energy is then deﬁned as E(t) = K(t) + E(t). The conservation of total
energy (away from boundary conditions) writes
d
d
K + E = 0.
dt
dt

(6)

The substitution of kinetic and internal energies into (6) recalling that cell/point masses are Lagrangian objects, i.e
they not depend on time, produces
d
d
K+ E=
dt
dt

mc
c

d
εc +
dt

mp
p

d
U p · U p,
dt

which, by substituting the semi-discrete momentum equation (4) yields
⎛
⎞
⎜⎜⎜ d
⎟⎟⎟
d
⎜
⎜⎜⎝mc εc −
mc ε c −
Fcp · U p =
Fcp · U p ⎟⎟⎟⎠ = 0,
dt
dt
c
p c∈C(p)
c
p∈P(c)

(7)

(8)

the middle part of the previous equation is obtained by shifting sums into the work term. A suﬃcient condition for
total energy conservation is obtained by requiring the previous equation to hold in each cell c, that is to say:
mc

d
εc −
Fcp · U p = 0.
dt
p∈P(c)

(9)

1934

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939
/ Procedia Computer Science 00 (2010) 1–9

4

Once the subcell force is known then momentum and internal energy can be updated using equations (4) and (9).
Total energy, momentum (and trivially mass) are conserved by construction independently of the subcell force form2 ,
and that masses are computed as (3). New position of point is updated via the trajectory equation. Since velocity is
deﬁned at point p, the GCL is satisﬁed and the volume equation writes
d
−
+
Vc +
N−cp + Lcp
N+cp · U p = 0,
Lcp
dt
p∈P(c)

(10)

where Vc is the volume of cell c, The previous discretization is obtained by time diﬀerentiation of Vc , leading to a
compatible discrete divergence operator over cell c as
(∇ · U)c =

1
Vc

p∈P(c)

Lcp Ncp · U p ,

(11)

−
+
N−cp − Lcp
N+cp (see ﬁgure 1). Equation (10) is compatible
where the unit corner vector is deﬁned by Lcp Ncp = −Lcp
d
with the discrete version of the trajectory equation (2): dt X p = U p .

2.4. Subcell force deﬁnition via entropy consideration
The only remaining unknown is the subcell force Fcp . By manipulating the entropy equation we derive a general
form of the subcell force in this section. Using Gibbs formula, the time rate of change of entropy in cell c writes
mc T c

d
d
d 1
S c = mc
εc + Pc
dt
dt
dt ρc

(12)

.

Substituting the time rate of change of internal energy (9) and volume leads to
mc T c

d
Sc =
dt

p∈P(c)

Fcp + Pc Lcp Ncp · U p .

(13)

For smooth ﬂow entropy must be conserved, leading to the following subcell force decomposition
Fcp = −Pc Lcp Ncp + Fviscous
.
cp
The subtitution into (9) yields
mc

d
d 1
εc + Pc
dt
dt ρc

=
p∈C(p)

(14)

Fviscous
· U p.
cp

(15)

· U p ≥ 0. Moreover viscous forces must vanish for
and the second law of thermodynamics requires p∈P(c) Fviscous
cp
smooth ﬂows (e.g. rarefaction, isentropic compression). As previously shown momentum conservation requires the
condition p∈P(c) Fcp = 0 which rewrites using (14)
Fcp =
p∈P(c)

p∈P(c)

−Pc Lcp Ncp + Fviscous
= −Pc
cp

Recalling that on a closed contour the geometrical relation
subcell viscous forces

Fviscous
= 0.
cp

Lcp Ncp +
p∈P(c)

p∈P(c)

p∈P(c)

Lcp Ncp = 0 holds, we ﬁnally get the condition on

Fviscous
= 0.
cp

(16)

p∈P(c)

Let’s remark that the Galilean invariance is ensured by this property as equation (15) is equivalent to mc
p∈C(p)

Fviscous
· U p − Uc , where Uc is any constant velocity in cell c.
cp

2 providing

that the sum of subcell forces in a cell is zero.

d
d 1
εc + Pc
dt
dt ρc

=

1935

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939

5

/ Procedia Computer Science 00 (2010) 1–9

2.5. Artiﬁcial viscosity and Riemann solver
In classical staggered Lagrangian scheme artiﬁcial viscosity is a key point to handle shock wave and steep front.
A lot of eﬀort has been deployed since the 50’s and the seminal work of von Neumann [9] to derive a proper artiﬁcial
viscosity formulation. The viscosity is thought of as an extra pressure term denoted q. New developments in the 80’s
in [10] and late 90’s in [4, 3] have been made but they consider the same basic roots.
In this work we consider artiﬁcial viscosity as produced thanks to a cell-centered approximation of a multidimensional
Riemann problem. We introduce two pressures per subcell that are located at the cell center, they are called Π−cp , Π+cp .
They are related to the unit outward normals N+cp and N−cp respectively (see ﬁgure 1). The subcell force written as a
contour volume reads
+
−
N+cp + Π−cp Lcp
N−cp .
(17)
Fcp = Π+cp Lcp
Pressures are obtained by solving half-Riemann problems in the normal directions
−
Pc − Π−cp = Zcp
Uc − U p · N−cp ,

+
Pc − Π+cp = Zcp
Uc − U p · N+cp ,

(18)

+
−
where Zcp
, Zcp
are swept mass ﬂuxes (namely the mass seen by a wave travelling with an approximation of the local
shock speed), and Uc is the cell-centered velocity which remains to be deﬁned. Using (18) the subcell force is recast
into the form
+
−
N+cp + Lcp
N−cp Pc − Mcp Uc − U p ,
Fcp = Lcp
(19)

+ +
− −
Lcp (N+cp ⊗ N+cp ) + Zcp
Lcp (N−cp ⊗ N−cp ), is a 2 × 2 symmetric positive deﬁnite matrix. Consequently the
where Mcp = Zcp
viscous part of the force simply writes

= −Mcp Uc − U p .
Fviscous
cp

(20)

The cell center velocity is determined by using the previously derived condition (16) together with the deﬁnition of
viscous force (20) leading to

p∈P(c)

−Mcp Uc − U p = 0

⇐⇒

Mc U c =

Mcp U p ,

(21)

p∈P(c)

where Mc = p∈P(c) Mcp . Equation (21) is a 2 × 2 non-linear system which can be solved utilizing an iterative
algorithm. The non-linearity comes from the swept mass ﬂuxes, that, following Dukowicz [7, 8], one approximates as
+
= ρc σc + cQ Γc | (Uc − U p ) · N+cp | ,
Zcp

−
Zcp
= ρc σc + cQ Γc | (Uc − U p ) · N−cp | .

(22)

Here, σc is the isentropic sound speed, cQ a user-deﬁned parameter (set to 1 in our simulations) and Γc a material
dependent coeﬃcient, which for a γ gas law can be deﬁned by
⎧ γ+1
⎪
⎪
if (∇ · U)cp < 0,
⎨ 2
Γc = ⎪
(23)
⎪
⎩0
if (∇ · U)cp ≥ 0,

where (∇ · U)cp = − V1cp Lcp Ncp · (Uc − U p ) is the subcell contribution to the velocity divergence. In case of rarefaction
we recover the acoustic approximation whereas in case of shock wave we get a two-shock approximation. Once Uc
is known we can compute the subcell force with (19). The entropy inequality is fulﬁlled as matrices Mcp are positive
into (15) yields
deﬁnite and the substitution of the viscous part of the subcell force Fviscous
cp
mc

d
d 1
εc + Pc
dt
dt ρc

=
p∈C(p)

−Mcp Uc − U p · Uc − U p

≥ 0.

(24)

1936

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939

6

/ Procedia Computer Science 00 (2010) 1–9

1

1

Exact solution
Second order
First order

0.9

Exact solution
Second order
First order

0.9
0.8

0.8

0.7
0.7

x-Velocity

Density

0.6
0.6

0.5

0.5
0.4

0.4
0.3
0.3

0.2

0.2

0.1

0.1

0
0

0.2

0.4

0.6

0.8

1

0

0.2

0.4

X

0.6

0.8

1

X

Figure 2: 1D Sod shock tube problem at t = 0.2 with 100 cells. From left to right: Cell density, x-component of nodal velocity. First order proposed
scheme × and second order scheme • vs the exact solution (line).

0.10
0.05
0.00
0.0

0.2

0.4

0.6

0.8

1.0

Figure 3: Initial skewed mesh used for the Saltzman problem made of 100 × 10 cells.

3. Second order extension
Second order extension in space is obtained using an extrapolated velocity inside the subcell force computation.
First a piecewise linear reconstruction of the velocity ﬁeld on the dual cells is built:
U p (X) = U p + ∇U p · X − X p .

(25)

The construction on the dual grid allows to deﬁne |P(c)| extrapolated velocities at cell-center Xc that are later used in
the Riemann solver. The slopes ∇U p are solutions of the least squares problem
∇U p = arg min

p ∈N(p)

U p − U p − ∇U p X p − X p

2

,

(26)

where N(p) is the set of neighbor vertices of vertex p. The previous least squares problem can indeed be recast into a
linear system form as
⎛
⎞
⎜⎜
⎟⎟⎟
−1 ⎜
⎜
∇U p = M p ⎜⎜⎝
(U p − U p ) ⊗ (X p − X p )⎟⎟⎟⎠ ,
(27)
p ∈N(p)

where matrix M p is the symmetric positive deﬁnite matrix M p = p ∈N(p) (X p − X p ) ⊗ (X p − X p ). Monotonicity
is achieved thanks to the classical Barth Jespersen slope limiter [1]. Then the Riemann problem in its second-order
version is solved using the velocity extrapolated from the vertices to the cell center. That is to say equation (21)
becomes
Uc = M−1
c

Mcp U p (Xc ).
p∈P(c)

(28)

1937

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939

7

/ Procedia Computer Science 00 (2010) 1–9

Shock direction
Piston direction

t=0.8

t=0.8

14

6

12

10

5.5

8

5
6

4.5
4

t=0.7
4

2
0.92

0.93

0.94

0.95

0.96

0.97

0.98

0.99

1

3.5
20

3

t=0.6

t=0.925

18

2.5

16
14

2

12
10

1.5

8
6

0.6

0.65

0.7

0.75

0.8

0.85

0.9

0.95

1

1

4

Shock positions

2
0.92

0.93

0.94

0.95

0.96

0.97

0.98

0.99

1

Figure 4: Piston problem — Left hand side: Density map and mesh t = 0.6: Exact shock location is x = 4/5, post-shock density is ρ = 4. t = 0.7:
Exact shock location is x = 14/15, post-shock density is ρ = 4 t = 0.8: Exact shock location is x = 29/30, post-shock density is ρ = 10. Right
hand side: zoom at t = 0.8 (top) and ﬁnal time t = 0.925 (bottom, post-shock density is ρ = 20).

+
−
Subcell forces (20) are modiﬁed accordingly. Fcp = Lcp
N+cp + Lcp
N−cp Pc − Mcp Uc − U p (Xc ) . The time discretization is performed with a classical two-step predictor-corrector scheme. The full discretization in space and time is
presented hereafter.
Predictor step.

1. Compute Unc with the cell-centered Riemann solver: Unc = Mnc

n

−1

Mncp U p (Xnc ) ,
p∈P(c)
n

n

+
−
2. Compute subcell forces: Fncp = Lcp
N+cp + Lcp
N−cp Pnc − Mncp Unc − U p (Xnc ) .

3. Update internal energy: mc εn+1/2
− εnc − Δt2 p∈P(c) Fncp · Unp = 0.
c
= Xnp + Δt2 Unp .
4. Update vertex position: Xn+1/2
p
mcp
n+1/2
mc
= V n+1/2
, ρn+1/2
= V n+1/2
.
5. Update volume and density: ρc
cp
c

= P(ρn+1/2
, εcn+1/2 ).
6. Compute predicted pressures: Pn+1/2
c
c

cp

Corrector step.
1. Compute Un+1/2
with the Riemann solver: Ucn+1/2 = Mn+1/2
c
c

−1

n+1/2

Mn+1/2
Up
cp

(Xn+1/2
) ,
p

p∈P(c)
+
−
= Lcp
N+cp + Lcp
N−cp
2. Compute subcell forces: Fn+1/2
cp

n+1/2

n+1/2

Pcn+1/2 − Mn+1/2
− Up
Un+1/2
cp
c

(Xn+1/2
) .
c

1938

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939

8

/ Procedia Computer Science 00 (2010) 1–9

Shock direction
Piston direction

t=0.8

t=0.8

14

6

12

10

5.5

8

5
6

4.5
4

t=0.7
4

2
0.92

0.93

0.94

0.95

0.96

0.97

0.98

0.99

1

3.5

3

t=0.6

2.5

2

1.5

0.6

0.65

0.7

0.75

0.8

0.85

0.9

0.95

1

1

Shock positions
Figure 5: Saltzman problem — Left hand side: Density map and mesh t = 0.6: Exact shock location is x = 4/5, post-shock density is ρ = 4.
t = 0.7: Exact shock location is x = 14/15, post-shock density is ρ = 4 t = 0.8: Exact shock location is x = 29/30, post-shock density is ρ = 10,
the maximum numerical cell density is around 20. Right hand side: zoom at t = 0.8.

n
3. Update momentum: m p Un+1
p − U p + Δt

n+1/2
Fcp
= 0.

n+1/2
p∈P(c) Fcp
vertex position: Xn+1
= Xnp + Δt Un+1/2
.
p
p
mcp
n+1
c
= Vmn+1
, ρcp
= V n+1
.
volume and density: ρn+1
c
c
cp

− εnc − Δt
4. Update internal energy: mc εn+1
c
5. Update
6. Update

c∈C(p)

n
· Un+1/2
= 0, with Un+1/2
= 12 (Un+1
p
p
p + U p ).

n+1
= P(ρn+1
7. Compute pressures: Pn+1
c
c , εc ),

4. Numerical results
The ﬁrst test problem is the classical 1D Sod shock tube. On domain [0, 1] are initialized a left (ρL , uL , pL ) =
(1, 0, 1) and right state (ρR , uR , pR ) = (0.125, 0, 0.1) of a perfect gas with γ = 7/5 separated at X = 0.5. Symmetry
boundary conditions are considered and the ﬁnal time is t = 0.2. Figure 2 shows the cell-centered density, and nodal
x-component of nodal velocity for the ﬁrst order scheme × and the second order scheme • vs the exact solution (line).
The improvement gained by the second order extension in space and time is clear.
The second test is the 2D Saltzman problem. The computational domain is [0, 1] × [0, 0.1]. Initial conditions are
(ρ0 , P0 , U0 ) = (1, 10−6 , 0) for a gamma law gas with γ = 5/3. A piston which velocity is U = 1 is imposed as a
boundary condition at x = 0 (symmetry boundary conditions otherwise). This problem is by nature 1D and an exact
solution exists up to t < 1. As a sanity check we veriﬁed that on a 100 × 10 perfect quadrangular mesh aligned with

R. Loub`ere et al. / Procedia Computer Science 1 (2012) 1931–1939
/ Procedia Computer Science 00 (2010) 1–9

1939
9

the shock direction the proposed scheme perfectly reproduces the 1D symetry, see Figure 4 up to ﬁnal time t = 0.925.
The Saltzman problem considers a 100 × 10 square mesh that is skewed as presented in Figure 3 (see [8] for the details
to build this mesh). Such a mesh has a tendency to produce numerical vorticity and/or oscillations that may become
lethal to Lagrangian schemes. Consequently this problem is a robustness test. Times t = 0.6, 0.7 and t = 0.8 are
considered. Results are presented in Figure 5. The results on this robustness test are not totally satisfactory as the
mesh tangles soon after t = 0.8. One expects to improve this result by adding some stabilization procedure through
the use of subpressure as in [5]. However up to this time the exact shock position and exact density plateaus are quite
well reproduced.
5. Conclusion
In this work we developed a new family of staggered Lagrangian schemes devoted to solve compressible hydrodynamics equations. This family has been recast into the classical compatible formulation [6, 2]. By using the concept
of approximate cell-centered Riemann problem (see [8] and references herein) one develops a new derivation for the
artiﬁcial viscosity. Artiﬁcial viscosity concept was previously based on ad hoc techniques [9, 10, 4, 3]. In our new
formulation the cornerstone is a subcell-based positive deﬁnite matrix that is acting on the velocity diﬀerence between
the subcell associated cell center and node. One example of such a matrix is proposed in this paper. We extended the
family to second order in space by using piecewise linear reconstruction of velocity ﬁeld, and, second order in time
by a predictor-corrector scheme. We showed that eﬀective second order is gained on the Sod problem and presented
only the demanding example of Saltzman piston. In the future we will analytically and numerically study diﬀerent
choices of matrix and their link to existing work. Finally the axi-symmetric, 3D and Arbitrary-Lagrangian-Eulerian
extensions of this family are planed to be investigated.
References
[1] T.J. Barth, D.C. Jespersen, The design and application of upwind schemes on unstructured meshes, AIAA Paper 89-0366, 1–12, (1989)
[2] A.L. Bauer, D.E. Burton, E.J. Caramana, R. Loub`ere, M.J. Shashkov, P.P. Whalen,, The internal consistency, stability, and accuracy of the
discrete, compatible formulation of Lagrangian hydrodynamics, J. Comput. Phys. 218 (2006) 572.
[3] J.C. Campbell, M.J. Shashov, A tensor artiﬁcial viscosity using a mimetic ﬁnite diﬀerence algorithm, J. Comput. Phys. 172 (2001) 739.
[4] E.J. Caramana, M.J. Shashkov, P.P. Whalen, Formulations of Artiﬁcial Viscosity for Multidimensional Shock Wave Computations, J. Comput.
Phys. 144 (1998) 70.
[5] E.J. Caramana, M.J. Shashkov, Elimination of artiﬁcial grid distorsion and hourglass–type motions by means of Lagrangian subzonal masses
and pressures, J. Comput. Phys. 142 (1998) 521.
[6] E.J. Caramana, D.E. Burton, M.J. Shashkov, P. P. Whalen, The construction of compatible hydrodynamics algorithms utilizing conservation
of total energy, J. Comput. Phys. 146 (1998) 227.
[7] J.K. Dukowicz, A general, non-iterative Riemann solver for Godunov’s method, J. Comput. Phys. 61 (1985) 119.
[8] P.-H. Maire, A high-order cell-centered Lagrangian scheme for two-dimensional compressible ﬂuid ﬂows on unstructured mesh, J. Comput.
Phys. 228 (2009) 2391
[9] J. Von Neumann, R.D. Rychtmyer, A method for the numerical calculation of hydrodynamic shocks, J. Appl. Phys. 21 (1950) 232.
[10] M.L. Wilkins, Use of Artiﬁcial Viscosity in Multidimensional Fluid Dynamic Calculations, J. Comput. Phys. 36 (1980) 281.

