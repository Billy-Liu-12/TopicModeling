Combining Cross-Correlation and Fuzzy Classification
to Detect Distributed Denial-of-Service Attacks*
Wei Wei1, Yabo Dong1, Dongming Lu1, and Guang Jin2
1 College of Compute Science and Technology,
Zhejiang University, Hangzhou 310027, P.R. China
2 College of Information Science and Engineering,
Ningbo University, Ningbo 315211, P.R. China
{weiwei_tc, dongyb, ldm, d05jinguang}@zju.edu.cn

Abstract. In legitimate traffic the correlation exists between the outgoing traffic
and incoming traffic of a server network because of the request-reply actions in
most protocols. When DDoS attacks occur, the attackers send packets with
faked source addresses. As a result, the outgoing traffic to the faked addresses
does not induce any related incoming traffic. Our main idea is to find changes
in the correlation caused by DDoS. We sample network traffics using Extended
First Connection Density (EFCD), and express correlation by cross-correlation
function. Because network traffic in DDoS-initiating stage is much similar to
legitimate traffic, we use fuzzy classification in order to guarantee the accuracy.
Experiments show that DDoS traffic can be identified accurately by our
algorithm.

1 Introduction
With the development of the Internet, Distributed Denial of Service (DDoS) becomes
a major security threat. In several cases, over ten thousands of attack agents cooperate
to send attack packets to flood targets. Attack packets aggregate to block target
network, or directly bring target hosts down.
Various methods have been proposed for DDoS detection. J. Mirkovic et al present
a detailed conclusion and classification [1] and Q. Li et al give out an analysis on
statistical filtering [2]. For statistical detection of DDoS, spectral analysis is adopted.
A. Hussain et al use power spectrum to extract fingerprint features from attack stream
and DDoS attack scenarios are identified when repeated [3]. Meanwhile, Entropy is
used as a summarization tool. A. Lakhina [4] et al get entropy of several packet
features and use multi-way subspace method to combine multiple features, then use
clustering approach to detect. Besides, L. Feinstein et al give algorithms based on
entropy and chi-square [5]. Moreover, many traffic correlation based methods have
appeared. S. Jin et al get covariance matrix from several traffic sources and uses the
matrix for detection [6]. Wavelet detection methods are also presented. L. Li et al
*

Funded by National Natural Science Foundation of China (60503061); Zhejiang Provincial
Natural Science Foundation (Y104437); Zhejiang Provincial Science and Technology
Program (2005C33034); the Program for New Century Excellent Talents in University (No.
NCET-04-0535).

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 57 – 64, 2006.
© Springer-Verlag Berlin Heidelberg 2006

58

W. Wei et al.

compute the difference of wavelet energy function vector between neighborhood
traffic windows [7]. Furthermore, Network Traffic’s fractal property is used. M. Li
uses Long Range Dependent (LRD) traffic pattern recognition for DDoS detection
[8]. Y. Xiang et al identify DDoS through detecting self-similarity changes in traffics
[9]. In addition, change point methods are widely used. One is R. Blazek et al’s
sequential change-point and batch sequential detection [10]. And some pattern
classification methods are used, such as support vector machine detection in [11].
As to above methods, the main problems are accuracy and performance. Here we
propose a DDoS detection method named Cross-Correlation based Fuzzy
Classification (CCFC). The method uses Extended First Connection Density (EFCD)
to sample outgoing and incoming traffic, and computes the cross-correlation vector
sequence. Then fuzzy classification is applied to the sequence for DDoS detection.
Experiments show that CCFC is accurate. The rest of this paper is organized as
follows: in section 2 we present the principle of CCFC. In section 3 we focus on the
implementation of CCFC while some definitions are provided. In section 4,
experiment results are shown and explained. Then conclusion is given in section 5.

2 The Principle of CCFC
2.1 The Definition of EFCD
EFCD is the count of first connections in a time unit. Here connection is defined with
5 fields in IP header, i.e. source address, source port, destination address, destination
port, TCP flags (if have). The first 4 fields are usually used for TCP connection
identification. In DDoS attacks, these fields may vary a lot and EFCD value changes
abnormally. TCP flags field is used to strengthen the cross-correlation of sampled
outgoing and incoming EFCD sequences of legitimate TCP traffic.
Table 1. The EFCD value for ten outgoing TCP packets

Packets
TCP 1
TCP 2
TCP 3
TCP 4
TCP 5
TCP 6
TCP 7
TCP 8
TCP 9
TCP 10

Source IP
A
C
A
E
G
A
I
B
B
I

Source port
80
23
80
443
42364
80
23467
----23467

Dest IP
B
D
B
F
H
B
J
A
A
J

Dest port
42957
34425
42957
4256
80
42957
23
----23

TCP flag
0x26
0x13
0x26
0x13
--0x26
0x36
----0x36

Conn order
1
2
1
3
4
1
5
6
6
5

Table 1 shows 10 TCP packets in 0.1 seconds. As we can see, they belong to 6
different first connections. So with a time unit of 0.1 seconds, the EFCD is 6.
EFCD, as a kind of flow-level sample, is more sensitive than pack-level sample in
connection based attack. For EFCD, the time unit should be chosen carefully. Bigger

Combining Cross-Correlation and Fuzzy Classification

59

time unit will shorten the computation time while decrease the detection accuracy.
Because RTTs (Round Trip Time) of legitimate network connections are mostly less
than 1 second, we choose 0.1 seconds as a time unit to balance the accuracy and
performance. Fig. 1 is EFCD with the time unit of 0.1 seconds from MIT Lincoln
Laboratory outside data [12].
2.2 Principle
The correlation between the traffics of two directions exists because of the requestreply actions in many protocols, such as TCP and many application-level protocols.
For example, when a server receives a TCP SYN request, it sends out a TCP ACK
packets. And then legitimate client receives the reply and responses data packets with
TCP ACK flag set. In above scenario, one EFCD of outgoing traffic contributes to
one EFCD of incoming traffic, therefore, there is a positive correlation between
values of EFCD of outgoing and incoming traffic and that is shown in Fig. 2.
When DDoS traffic flushes into the server network, most part of EFCD value of
incoming attack flows is not caused by EFCD of any earlier outgoing flows. As a
result, the correlation between EFCD of the outgoing and incoming traffic is deviated,
which can be used for detection. In next section, we will explain our algorithm in
details.
1. Outgoing traffic

Server
network

Legitimate
client

Internet

2. Incoming traffic

Fig. 1. EFCD sampled values

Fig. 2. The request-reply action in normal
traffic

3 The Algorithm of CCFC
3.1 Computing Cross-Correlation Vector Sequence
Correlation has been used in network anomaly detection, such as in [6]. It can be well
described by cross-correlation function, which is definded as below [13]:

R
=

xy

( t,t+ τ ) =

cov(X ( t ), Y ( t+ τ ))
σ x (t ) σ y (t+ τ )

E (( X ( t ) − μ (X ( t )))( Y ( t+ τ ) − μ ( Y (t+ τ ))))
( E ( X 2 (t ) ) − ( E ( X (t ) )) 2 ) ( E ( Y 2 (t+τ )) − ( E ( Y (t+τ ))) 2 )

.

(1)

60

W. Wei et al.

Here X and Y are two random processes and Rxy(t,t+τ) ∈ [-1, 1] is their crosscorrelation function. τ is the correlation step (usually referred to as ‘lags’) which is
an integer. X(t) represents the random variable of X at time t while Y(t+τ) represents
the random variable of Y at time t+τ, t ∈ [0,+∞). μ(X(t)) and μ(Y(t+τ)) are
mathematical expectations of X(t) and Y(t+τ) respectively. σX(t) and σY(t) are standard
deviations of X(t) and Y(t+τ). For given t, Rxy(t,t+τ) can be written as Rxy(τ). Note
that Rxy(τ)= Ryx (-τ).
Because in legitimate traffic the RTT is mostly less than 0.5 seconds, we sample
traffic using time unit of 0.1 second. As a result, we compute 1 to 5 step crosscorrelation values which are sufficient to represent the cross-correlation of legitimate
traffic. For two sequences, their cross-correlation values with different τ compose
cross-correlation vector. Here we set τ ∈ {1,2,3,4,5}, the cross-correlation vector of
X and Y is {Rxy(1), Rxy(2) , Rxy(3) , Rxy(4), Rxy(5)}.
In this step we will divide EFCD sequence into several subsequences according to
a configured time window and compute the cross-correlation between the outgoing
traffic and incoming traffic in a same time window. Here a time window of 3 seconds
is suitable for accurate computation and detection, i.e. there are 30 EFCD values in a
subsequence.
The 1 to 10 step cross-correlation vector of legitimate and DDoS traffic are shown
in Fig. 3. The correlation step and time window’s width should be chosen carefully.
The sampling with big window needs less computation, but it is less accurate than
with small window. The time unit should be chosen carefully. Bigger time unit will
shorten the computation time while decrease the detection accuracy. A similar
balance should also be considered for the choosing of correlation step.
3.2 Defining Membership Functions
Because the cross-correlation differences between legitimate and DDoS traffic are not
always obvious, the fuzzy classification can be a good way to differentiate them.

Fig. 3. Typical legitimate and ddos cross- Fig. 4. Fuzzy sets for every axis of pattern
space
correlation sequence (step 1 to 10)

The sequence of cross-correlation vector is used as the input for fuzzy
classification module. Cross-correlation vector is used as the pattern and sequence of
cross-correlation vector as the pattern subspace. Dimension number is the length of
cross-correlation vector. K fuzzy sets exist in each dimension of the pattern space and

Combining Cross-Correlation and Fuzzy Classification

61

here we choose K=3. That is enough for our fuzzy classification. We partition every
axis of the pattern space into 3 fuzzy sets A1, A2, A3.
Like usual operation, symmetric triangular membership functions are used and the
corresponding result is shown in Fig. 4.
3.3 Training Fuzzy Classifier Using History Data
The input pattern is used as input variables and the output is mapped to result classes.
Here the main problem is how to generate fuzzy ‘If-Then’ rules from history data. In
this paper, we use an improved classification method in [14]. Following the definition
in (1), the training pattern space is 5-dimension and can be expressed as:

[ −1,1] × [ −1,1] × [ −1,1] × [ −1,1] × [−1,1] .

(2)

History data are N patterns, denoted as Vm={(vm,1, vm,2, vm,3, vm,4,
vm,5)|m=1,2,3….,N}, which belong to M output classes, here M=2, i.e. N patterns
belong to either legitimate or DDoS class.
The label of rules is shown in Fig 5. ‘Ax’ represents fuzzy set for one dimension,
for each dimension there are three fuzzy sets A0, A1, A2. We just draw the first 2
dimensions here. ‘Rij...’ represents fuzzy rule, and its subscript is a 5-character string
written as an array S, where S(·) can be ‘0’, ‘1’ and ‘2’. For one pattern Vm, a rule RS
can be described as bellows:
If vm,1 is AS(1) , vm,2 is AS(2) , vm,3 is AS(3) , vm,4 is AS(4) and vm,5 is AS(5), then Vm belongs
to output class nS (nS ∈ {1, 2}) with Certainty Factor CFS, which is the possibility of
this rule belonging to the output class.
For each rule, its output class nS and CFS are decided in training step. The
generations of ‘If-Then’ rules are given below. Firstly, for each rule RS, the
probability for decision Pn,S is computed as follows:

Pn,S =

L

∑ ∏ρ

Vm ∈class n t =1

S (t )

(vm,t ) .

(3)

In (3), class n is one of the classes the patterns finally belong to. Here n ∈ {1,2}. L
is the dimension number of input patterns and L=5. vm,t is the value in dimension t of
pattern Vm. ρS(t) is the fuzzy set AS(t)’s membership function and S(t) is the value in
index t of vector S. For rule RS, we can get P1,S and P2,S. If P1,S > P2,S, then the output
class n is class 1, else if P1,S < P2,S, then the output class n is class 2. If P1,S = P2,S, the
output class is undecided, so when implementation, this rule is classified into one
class with CFS=0. At last the CFS of this rule is computed as follows, where the rule
belongs to class t′.

C FS =( Pt',S − (

M

∑

t =1, t ≠ t'

M

Pt,S ) /( M − 1)) / ∑ Pt,S .

(4)

t =1

3.4 Using Fuzzy Classifier to Detect
In this step we use the fuzzy classifier trained in 3.3 to classify unknown patterns. For
one input pattern Vm, we compute qmax :

62

W. Wei et al.
L
q max = max{( ∏ ρ S(t) ( vm,t )) • CFS | S ∈ set of all rules } .
t =1

(5)

With the qmax and the corresponding rule RS, the pattern Vm is assigned to the class
nS that the rule RS belongs to. If qmax is can not be decided and the corresponding rules
don’t belong to a same output class, the classifier doesn’t give a result. And if the
result is DDoS class then an alarm is generated.

4 Experiment Results
We used MIT Lincoln Laboratory’s data in [12] to train and evaluate our algorithm.
The attack events are shown in Fig 6, where x-axis is the time windows sequence
number, and in y-axis 0 stands for legitimate while 1 stands for DDoS attack. The
DDoS attacks occur at time window 5 to 7 and 19 to 21.
The detection results are shown in Fig. 7. But for the result, there are false positive
alarms in time window 11 and 15. Through observing original sampling data, we
found at time window 11 and 15 the percentage of TCP traffic is unusually low and
UDP traffic has a burst. And in the situation most of outgoing packets are UDP
packets and legitimate clients do not reply to what they received, as a result, the
correlation is weak.

Fig. 5. The label of rules in the 1st and 2nd
dimension of 5 dimensions

Fig. 7. Detection result

Fig. 6. Attack existence

Fig. 8. Detection result after filtering

Combining Cross-Correlation and Fuzzy Classification

63

This type of false positive alarms can be erased through filtering. The main
principle is that neighborhood alarms strengthen each other, i.e. alarms are clustered
and given a trust value. If the value is greater than a given value, Tr, alarms in this
cluster are reported. When an alarm rises, if there exists a cluster, the trust value is
updated; otherwise, a new cluster is created with an initial trust value. When alarm
stops for several time windows, Tc, the existing cluster is removed.
The detection result after filtering is accurate as shown in Fig. 8. We evaluate the
algorithm with several other data sets [12] and get similar results.

5 Conclusion
In this paper we proposed a new fuzzy classification algorithm for DDoS detection.
The algorithm is based on the fact that DDoS attacks can deviate the cross-correlation
of EFCD of network traffic.
In this algorithm, we get EFCD sequence of outgoing and incoming traffic of
server network and then transform it into 5-step cross-correlation sequences. Then we
use legitimate and DDoS data to train fuzzy classification and used it to detect DDoS
attacks. The experiment results show that CCFC is accurate enough.
Higher dimension in fuzzy classification could increase the accuracy of detection,
while increase the computation consumption. We plan to improve this algorithm with
higher dimension pattern space for application in real time.

References
1. Mirkovic, J., Reiher, P.: A taxonomy of DDoS attack and DDoS defense mechanisms.
Computer Communication Review, Vol. 34(2), 39-53, 2004.
2. Li, Q., Chang, E. C., Chan, M. C.: On the effectiveness of DDoS attacks on statistical
filtering. In Proceedings of IEEE INFOCOM 2005, March 2005.
3. Hussain, A., Heidemann, J., Papadopoulos, C.: Identification of Repeated Denial of
Service Attacks. In Proceedings of IEEE INFOCOM 2006, April 2006.
4. Lakhina, A., Crovella, M., Diot, C.: Mining Anomalies Using Traffic Feature
Distributions. In Proceedings of ACM SIGCOMM 2005, August 2005.
5. Laura, F. Dan, S. Statistical Approaches to DDoS Attack Detection and Response. In
Proceedings of DARPA Information Survivability Conference and Exposition, Vol. 1,
303-314, 2003.
6. Jin, S., Yeung, Y. D.: A covariance analysis model for DDoS attack detection. In
Proceedings of IEEE International Conference on Communications, Vol. 4, 1882-1886,
2004.
7. Li, L., Lee, G.: DDoS attack detection and wavelets. Computer Computer
Communications and Networks, 421-427, 2003.
8. Li, M.: An approach to reliably identifying signs of DDoS flood attacks based on LRD
traffic pattern recognition. Computers and Security, Vol. 23(7), 549-558, 2004.
9. Xiang, Y., Lin, Y., Lei, W. L., Huang, S. J.: Detecting DDoS attack based on network selfsimilarity. IEEE Proceedings Communications, Vol. 151(3), 292-295, 2004.
10. Blazek, R., Kim, H., Rozovskii, B., Alexander, T.: A novel approach to detection of
“denial–of–service” attacks via adaptive sequential and batch–sequential change–point
detection methods. In Proceedings of the 2001 IEEE Workshop on Information Assurance
and Security United States Military Academy, 2001.

64

W. Wei et al.

11. Shon, T., Kim, Y., Lee, C.: Jongsub Moon: A machine learning framework for network
anomaly detection using SVM and GA. In Proceedings of Systems, Man and Cybernetics
(SMC) Information Assurance Workshop, 176-183, 2005
12. http://www.ll.mit.edu/IST/ideval/data/2000/LLS_DDOS_1.0.html
13. Box, G.E.P., Jenkins, G.M., Reinsel, G.C.: Time Series Analysis: Forecasting and Control,
Third edition, Prentice Hall, 1994.
14. Ravi, V., Zimmermann, H. J.: Fuzzy rule based classification with FeatureSelector and
modified threshold accepting. European Journal of Operational Research, Vol. 123(1), 1628, 2000.

