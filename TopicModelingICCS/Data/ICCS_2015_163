Procedia Computer Science
Volume 51, 2015, Pages 2377–2386
ICCS 2015 International Conference On Computational Science

Execution management and eﬃcient resource provisioning
for ﬂood decision support
Bartosz Balis1 , Marek Kasztelnik2 , Maciej Malawski1 , Piotr Nowakowski2 ,
Bartosz Wilk2 , Maciej Pawlik2 , and Marian Bubak1
1

AGH University of Science and Technology, Department of Computer Science, Krakow, Poland
2
AGH University of Science and Technology, ACC CYFRONET, Krakow, Poland

Abstract
We present a resource provisioning and execution management solution for a ﬂood decision support system. The system, developed within the ISMOP project, features an urgent computing
scenario in which ﬂood threat assessment for large sections of levees is requested within a speciﬁed deadline. Unlike typical decision support systems which utilize heavyweight simulations
in order to predict the possible course of an emergency, in ISMOP we employ an alternative
approach based on the ‘scenario identiﬁcation’ method. We show that this approach is a particularly good ﬁt for the resource provisioning model of IaaS Clouds. We describe the architecture
of the ISMOP decision support system, focusing on the urgent computing scenario and its
formal resource provisioning model. Preliminary results of experiments performed in order to
calibrate and validate the model indicate that the model ﬁts experimental data.
Keywords: Flood decision support, ﬂood threat assessment, urgent computing, resource provisioning,
execution management, cloud computing, scientiﬁc workﬂows

1

Introduction

A typical ﬂood scenario in the Malopolska region of Poland is one wherein many kilometers of
levees are exposed to a passing ﬂood wave which can last for up to several weeks. For example,
during the ﬂood of 2010 there were two major waves, from 14 May to 3 June and from 4 June to
2 July, aﬀecting 61 out of 182 boroughs of the region [23]. A high water level lasting for many
days can ultimately lead to the loss of stability of the levee structure and a breach. Online
monitoring of levees with in-situ sensors can help predict such events, make timely decisions,
and initiate appropriate actions [11].
In this paper we present a solution for execution management and resource provisioning for
a ﬂood decision support system. Although currently levees are not instrumented with sensors
on a massive scale even in countries most aﬀected by ﬂoods, real-time monitoring of ﬂood
defences has been rapidly gaining interest over the recent years. Consequently, we propose
and evaluate a solution which can scale to large areas of levees monitored with sensors. We
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.412

2377

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

focus on an urgent computing scenario wherein the user requests the computation of ﬂood threat
assessment for a large area of levees in a speciﬁed deadline. The algorithm for threat assessment
is based on scenario identiﬁcation, an approach alternative to on-demand simulations typically
used in decision support systems. We argue that cloud computing is a perfect solution for such
an approach, and in particular we consider whether public clouds could be a good choice for
a computing infrastructure of a ﬂood decision support system.
This work is carried out within the ISMOP project: a computerized levee monitoring and
decision support system.1 Research conducted in ISMOP spans various aspects including the
construction of an artiﬁcial levee [15], design of wireless sensors for levee monitoring, development of a sensor communication infrastructure [21], levee modeling and simulation [17], and
a decision support system whose aspects are the subject of this paper.
The paper is organized as follows. Section 2 overviews related work. Section 3 presents the
ISMOP ﬂood decision support system. In Section 4 the urgent computing scenario is described.
Section 5 presents preliminary experimental results. Finally, Section 6 concludes the paper.

2

Related work

Traditionally scientiﬁc computations have utilized HPC or Grid computing infrastructures [18],
both of which are also used for urgent computing systems. However, resource management in
these infrastructures, oriented towards batch processing, involves job queueing or even resource
brokering (Grids). As a result, on-demand access to computing resources, crucial for urgent
jobs, calls for complex job prioritization and preemption mechanisms. For example, SPRUCE
introduced the mechanism of right-of-way tokens for this purpose [4]. Another approach is
based on modiﬁcations to the scheduling system in order to ensure good turnaround times for
urgent jobs [24].
Right from their inception computational clouds have been studied as an alternative computing infrastructure for e-Science applications. With a fundamentally diﬀerent resource management philosophy based on-demand resource provisioning, clouds are seen as particularly
useful for applications where the results of computations must be obtained within a speciﬁed
time, such as simulation-based urgent clinical decision-making [20].
In our previous work we presented an early warning system factory, the Common Information
Space (CIS) [2], which formed the basis for the UrbanFlood ﬂood early warning system [11]. In
CIS we utilized cloud services for on-demand deployment of early warning system instances and
their autoscaling in emergency situations [1]. However, we have only been focusing on elastic
resource provisioning in order to address variable resource demands, but not strictly on urgent
computing scenarios.
In [10] the authors describe a model-based approach to management of heterogeneous computing resources for urgent computing scenarios. The solution is based on the CLAVIRE platform [22]. Knyazkov et al. propose a workﬂow-based infrastructure for urgent computing [8]
which supports interactive capabilities important in some decision support systems e.g. those
involving crowd management. Interactivity enables, amongst others, computational steering
which makes it possible to interactively change the parameters of the underlying simulation.

1 http://www.ismop.edu.pl

2378

Execution management and eﬃcient resource provisioning for ﬂood decision support

3

Balis, et. al

ISMOP Flood Decision Support System

The overview of the ISMOP Flood Decision Support Platform is shown in Fig. 1. The platform
oﬀers two main functions to the end user, the ﬁrst being the levee monitoring and ﬂood decision
support system, which is the focus of this paper. Besides the decision support system, ISMOP
also provides a virtual laboratory for conducting scientiﬁc experiments related to monitoring
and controlled ﬂooding of the artiﬁcial levee built within the framework of the project. Sensor
data is delivered via the ISMOP telemetry system [21, 5] which ensures energy-aware data
acquisition with appropriate SLA guarantees [9] in an emergency.

Figure 1: ISMOP Flood Decision Support Platform overview.
The decision support system involves various data analyses performed automatically or ondemand, including time series analysis of sensor measurements using statistical methods (e.g.
anomaly detection), prediction of the levee state, and ﬂood threat assessment which can be
performed in the urgent computing mode.
The ﬂood threat assessment computation is based on the scenario identiﬁcation method,
sketched out in Fig. 2. We assume that the levees are logically partitioned into small (e.g. 10meter long) sections. For each such section there exists a database of pre-computed scenarios
simulating the levee behavior for various initial and boundary conditions. The basis of the ﬂood
threat assessment computation is the comparison of the current levee state, indicated by recent
sensor measurements, with the database of pre-simulated scenarios, and ﬁnding one or several
scenarios which constitute the best ﬁt. If the scenarios identiﬁed as best matches predict levee
breach within a certain time, the ﬂood threat level for the given levee section is increased. The
calculations involved in the computation of the threat level boil down to comparing time series
data sets. More details on the method can be found in [6].
Typical decision support systems involve heavyweight simulations in order to predict the
development of an emergency situation. The scenario identiﬁcation is an alternative approach
which carries a number of beneﬁts from the perspective of an urgent computing platform.
2379

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

Figure 2: Flood threat assessment computation based on scenario identiﬁcation.
1. Demand for computing resources. Simulations have much higher resource demands
in comparison to scenario identiﬁcation. Deadline-driven scheduling of simulations is also more
diﬃcult and less accurate because their performance model – required for estimation of the
necessary quantity of computing resources – is much more complex.
2. Fault tolerance. Some simulations used in decision making may consume hundreds of
thousands of cores. At this scale, traditional approaches to fault tolerance (checkpointing or rerun) – especially in the case of deadline-driven computations – are regarded as ineﬀective [12].
Sometimes complex fault-tolerant algorithms are devised as a remedy. In contrast, scenario
identiﬁcation computations are composed of a huge number of ﬁne-grained, independent jobs
which are easy to rerun if needed.
3. Suitability of computing infrastructures. Simulations not only require huge
amounts of computing resources, but can also be sensitive to performance characteristics of
other hardware components, such as interconnects. Consequently, HPC infrastructures have
been considered as the best choice for urgent computing [12]. However, as indicated earlier,
HPC infrastructures are also challenging in terms of usability, on-demand access and QoS guarantees required for urgent jobs. Scenario identiﬁcation, on the other hand, is well-suited for
cloud infrastructures.

4

Flood threat assessment: urgent computing use case

The ﬂood threat assessment scenario performed in the urgent computing mode is particularly
challenging as it requires the allocation of a certain amount of computing resources in order
to meet the prescribed deadline. In this section we discuss two important components of our
solution: the architecture of the system and the resource provisioning model.

4.1

Architecture

Flood threat assessment based on scenario identiﬁcation can be performed as an urgent computation. The parameters of such a computation are as follows:
1. Target levee sections. Each section results in an independent computational job.
2380

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

2. Sensor data time window size which speciﬁes the extent of the time series representing
current sensor readings to be compared with the simulated time series (scenarios). The
duration of a simulated scenario spans around 10-14 days, while the sensor data time
window may vary but will typically span 1-3 days. The longer the time window, the more
accurate the ﬂood threat assessment; however this also results in heavier computational
jobs.
3. Deadline. The ﬁnal time by which the urgent computation should be completed.
The architecture implementing this scenario is shown in Fig. 3.
Starting the computation. The user interacts with the graphical interface and decides
which area should be immediately assessed against the ﬂood threat. The user also speciﬁes the
deadline in which results must be returned.
Workﬂow generation. Based on the user’s selection, the system ﬁrst determines which
levee sections are to be assessed. Subsequently, it generates a workﬂow describing the computational jobs that need to be performed, along with their data dependencies.

Figure 3: Implementation of the urgent computing scenario for ﬂood threat assessment.
Calculating an optimized execution plan. The choice of the workﬂow model of computation allows us to employ scheduling algorithms in order to calculate the deployment and
execution plan for the workﬂow suitable for the speciﬁed deadline [13, 14]. The performance
model used in the current prototype is described in Section 4.2.
Provisioning of resources. Next, the system allocates the necessary number of Virtual
Machine instances and may potentially adjust this number as the workﬂow execution progresses,
in accordance with the deployment plan. The initial provisioning of resources as well as any
further adjustments are done by the Atmosphere platform2 .
2 https://github.com/dice-cyfronet/atmosphere

2381

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

Workﬂow execution. The workﬂow is orchestrated by the HyperFlow workﬂow management system [3]. HyperFlow determines which jobs are ready to be executed (their dependencies
are fulﬁlled) and sends the appropriate job descriptions to a job queue. Jobs are fetched from
the queue by Cloud Executors deployed on Virtual Machines. The Cloud Executors are also
responsible for fetching input data required by the job directly to the Virtual Machine (no
data is transferred through the workﬂow engine). The execution plan takes into account data
locality: if multiple jobs utilize the same data sets, they will be clustered and assigned to the
same workers in order to avoid unnecessary data transfers.
Workﬂow structure. The simpliﬁed structure of the workﬂow is shown in Fig. 4. Each
ComputeScenarioRanks process of the workﬂow computes the ranking of best matching scenarios for a single levee section. The best match is computed by comparing the current sensor
readings from a levee section (represented by a RealData input) with those simulated in the
scenarios (the SimulatedScenarios input). The ranking of scenarios is used to compute the
threat level for each levee section. If the scenarios selected as best matches predict a high
likelihood of levee breach, the threat level for a given section is increased accordingly.

Figure 4: The ﬂood threat assessment workﬂow (sample levee with 200 sections). RealData
represents recent sensor measurements from a given levee section. Simulated scenarios is
a data set of pre-simulated scenarios for that section. Multiple adjacent sections share the
same set of simulated scenarios.

4.2

Resource provisioning model

The goal of the provisioning platform is to ensure that the capacity of resources is suﬃcient to
complete the whole workﬂow within the required deadline. In order to estimate the required
amount of resources in terms of virtual machine instances, a performance model of the application needs to be developed and calibrated experimentally. Here we describe the performance
model based on a bag-of-tasks [16, 7] approximation of workﬂows. The performance model is
a function T = f (v, d, s, ...) that estimates the time T of execution of the application based on
the infrastructure and application parameters, such as number of VMs v, problem size d (in
our case it is the size of the window in days), number of tasks s (representing the number of
sections) or other parameters.
In our bag-of-task performance model, we assume that all the tasks in the workﬂow are
uniform and can be executed independently. This approximation can be applied to workﬂows
in which we can distinguish a set comprising a large number of dominating tasks. In the ﬂood
threat assessment workﬂow the ComputeScenarioRanks tasks are dominating. Therefore, the
2382

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

approximation of T should include the following terms: computation time expressed as the sum
of task execution times, tk , divided by the number of VMs; overheads that are proportional
to the number of VMs, v; and some constant term representing a possible constant overhead,
such as VM provisioning delay. This model can be further simpliﬁed by assuming that task
execution times are identical and equal to t. Moreover, we assume that t is a linear function
of the window size d. This results in Eq. 1, where a, b and c are parameters of the model that
have to be determined experimentally. This equation can be solved, yielding an estimate of the
number of processors, if deadline T is given:
s
k=1 tk

s∗t
s∗d
+b∗v+c=
+b∗v+c=a∗
+b∗v+c
(1)
v
v
v
The model can be further extended by treating task execution times as random variables
with an empirically derived distributions, allowing us to estimate the number of resources
required to meet the deadline with a desired probability. Other models considered for future
work may include multi-level workﬂows [14].
T =

5

Preliminary experiments

●
●
●

● ●

●

1

4

●
●

●
●
●

8

16

# VMs

(a) 1024 sections, 1 day

●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●

●
●
●
●
●
●
●
●

●
●
●
●
●
●
●

●

●
●
●
●
●
●

●
●
●
●
●
●
●

●
●
●
●
●
●
●
●

●
●
●
●

1

2

3

4

5

6

# Days

(b) 128 sections, 16 vms

7

●

120

●

●
●
●
●
●
●
●
●
●
●
●
●

Time [s]

140
100
60

●

20 40 60 80

●

●

●
●
●

●

20

●

●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●

Time [s]

100

●

60
20

Time [s]

140

We have performed experimental evaluation of the urgent ﬂood threat assessment application.
The goals of these experiments are twofold: ﬁrst, to asses the performance of the system and
its overheads, and second, to obtain the data needed for the calibration of the application
performance model.
Preliminary experiments have been performed on a private cloud infrastructure consisting
of a single node with 8 cores, equipped with Intel Xeon E5-2650 processors. The runtime
components of the HyperFlow engine were deployed on small virtual machines (single virtual
core, 512MB RAM). The data for simulated scenarios (244MB total) was generated and preinstalled on disks attached to each VM.

●

1

4

8

16

# VMs

(c) warmup tasks only: 1024 sections, 1 day

Figure 5: Execution time of ComputeScenarioRanks tasks. Outliers represent “warmup” tasks
and the linear function is used to separate them as shown in (a) and (b). In (c) the line shows
the linear ﬁt to the data.
The preliminary measurements of execution times of ComputeScenarioRanks tasks, shown
in Fig. 5, indicate that the average execution time is proportional to the time window size
expressed in days (see section 4.1 and Fig. 5b). The outliers shown in the boxplots correspond
to ﬁrst tasks executed on each VM right after boot (“warmup” tasks). These tasks have
2383

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

4000
2000
0

Total time [s]

6000

considerably longer run times that are proportional to the number of VMs as shown in Fig. 5c.
This can be attributed to the combined eﬀects of the system warm-up, which includes the
overhead induced by other VMs that are still booting up, initial access to ﬁles (which can be
cached for subsequent reads), and other initialization overheads.
We used the data from our measurements to calibrate our performance model using nonlinear regression and equation 1. This yielded the following coeﬃcients: a = 6.53, b = 9.41, and
c = 31.71. Fig. 6 shows how the total computing time of the workﬂow (including VM startup
times) depends on the number of VMs. The values predicted by our model are also shown (red
lines). It can be seen that – owing to linear dependencies on parameters such as the number
of days and sections – the model matches experimental data with good accuracy. The only
discrepancy is observed for 16 VMs and this can be attributed to the fact that in this case 16
VMs were running on 8 physical cores, hence the task execution time was longer. Nevertheless,
good speedup can be observed: for 1024 sections the execution time was reduced from 116 to
13 minutes, which gives a speedup of 8.6.
These results suggest that the overhead of
●
the proposed system based on workﬂows and
clouds is negligible and outweighed by the advantages oﬀered by using clouds. It should
also be noted that results depend on the selected cloud infrastructure and VM ﬂavor (in●
stance type), so that the performance model
needs to be calibrated against all available
●
types of resources. This, fortunately, is not
●
●
a problem, since the ﬂexible architecture of
●
●
●
●
●
execution and provisioning platforms allows
us to run benchmarks on other clouds with1
4
8
16
out much eﬀort. Our future work will address
this aspect.
# VMs
Figure 6: Total computing time as a function of
the number of VMs: comparison of measured
values (points) and predictions of our model
Clouds are increasingly used for scientiﬁc (lines) for 128 and 1024 sections.
computations and they can also provide an
eﬀective computing infrastructure for urgent
computing systems whose workload can be characterized as spiky: most of the time its resource demands are low, with occasional bursts which occur in rare emergency situations. In
the ISMOP ﬂood decision support system we propose an alternative approach to ﬂood threat
assessment based on scenario identiﬁcation. From the performance and workload characterization perspective scenario identiﬁcation comprises many independent jobs which is considerably
diﬀerent from on-demand simulations, typically used in decision support systems leveraging
urgent computations. Consequently, scenario identiﬁcation matches the resource provisioning
model of IaaS clouds. Furthermore, scenario identiﬁcation as a computational job can be described by a relatively simple resource provisioning (performance) model which can be easily
calibrated for diﬀerent cloud infrastructures using simple benchmarks.
While in this paper we have focused on IaaS clouds from the resource provisioning model
perspective, we strongly believe that public cloud services can beneﬁt ﬂood decision support
systems in various aspects other than the provisioning model and performance, including:

6

2384

Conclusion

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

• Reliability: public cloud services are speciﬁcally designed to support systems with high
availability demands, such as Web pages and online services maintained by the largest
news or media content providers. According to [19], Amazon had only ﬁve major outages
in the years 2010-2013, of which only one (in April 2011) lasted more than 6 hours.
• Safety: In the aftermath of a serious natural disaster any local computing infrastructure,
and hence decision support systems which depend on it, may become inoperable, as was
the case after Japan’s March 2011 earthquake [12]. Public clouds not only serve as an
emergency computing infrastructure, but they can also increase data safety simply by
providing a reliable storage infrastructure where important – but not sensitive – data
can be backed up. In the scenario identiﬁcation approach pre-simulated scenarios are an
excellent example of such data.
• Cost-eﬀectiveness: Due to the ‘spiky’ behavior of decision support systems (in relation
to resource demands), the cost of maintaining a dedicated infrastructure is certain to
outweigh the costs of occasional heavy computations performed in the cloud. Even though
monitoring of natural phenomena in a decision support system must be continuous, its
normal day-to-day operation can be handled by a relatively small, low-cost on-premises
infrastructure.
Future work involves, among others, further enhancement and validation of the resource
provisioning model, investigation of alternative performance models (e.g. dynamic bag of tasks),
and experimental benchmarks on public cloud infrastructures.

Acknowledgments
This work is partially supported by the National Centre for Research and Development
(NCBiR), Poland, project PBS1/B9/18/2013; and by AGH University of Science and Technology, Faculty of Computer Science, Electronics and Telecommunications, statutory project
no. 11.11.230.124.

References
[1] B. Balis, T. Bartynski, M. Bubak, G. Dyk, T. Gubala, and M. Kasztelnik. A Development and
Execution Environment for Early Warning Systems for Natural Disasters. In Cluster, Cloud and
Grid Computing (CCGrid) 2013, pages 575–582. IEEE, 2013.
[2] B. Balis, M. Kasztelnik, M. Bubak, T. Bartynski, T. Gubala, P. Nowakowski, and J. Broekhuijsen.
The UrbanFlood Common Information Space for Early Warning Systems. Procedia Computer
Science, 4:96–105, 2011.
[3] Bartosz Balis. Increasing Scientiﬁc Workﬂow Programming Productivity with HyperFlow. In
Proceedings of the 9th Workshop on Workﬂows in Support of Large-Scale Science, WORKS ’14,
pages 59–69, Piscataway, NJ, USA, 2014. IEEE Press.
[4] P. Beckman, S. Nadella, N. Trebon, and I. Beschastnikh. Spruce: A system for supporting urgent high-performance computing. In Grid-Based Problem Solving Environments, pages 295–311.
Springer, 2007.
[5] R. Brzoza-Woch, M. Konieczny, B. Kwolek, P. Nawrocki, T. Szydo, and K. Zieliski. Holistic
approach to urgent computing for ﬂood decision support. Procedia Computer Science, 2015. Proceedings of the International Conference on Computational Science, ICCS 2015.
[6] M. Chuchro, M. Lupa, A. Pieta, A. Pi´
orkowski, and A. Le´sniak. A Concept of Time Windows
Length Selection in Stream Databases in the Context of Sensor Networks Monitoring. In New
Trends in Database and Information Systems II, volume 312, pages 173–183. Springer, 2015.

2385

Execution management and eﬃcient resource provisioning for ﬂood decision support

Balis, et. al

[7] W. Funika, K. Mazurek, and W. Kruczkowski. An agent-based hierarchical approach for executing
bag-of-tasks in clouds. Computer Science, 15:1, 2014.
[8] Konstantin V Knyazkov, Denis A Nasonov, Timofey N Tchurov, and Alexander V Boukhanovsky.
Interactive workﬂow-based infrastructure for urgent computing. Procedia Computer Science,
18:2223–2232, 2013.
[9] J. Kosinski, P. Nawrocki, D. Radziszowski, K. Zielinski, S. Zielinski, G. Przybylski, and P. Wnek.
SLA Monitoring and Management Framework for Telecommunication Services. In ICNS, pages
170–175. IEEE Computer Society, 2008.
[10] S. V. Kovalchuk, P. A. Smirnov, S. V. Maryin, T. N. Tchurov, and V. A. Karbovskiy. Deadlinedriven resource management within urgent computing cyberinfrastructure. Procedia Computer
Science, 18:2203–2212, 2013.
[11] V.V. Krzhizhanovskaya, G.S. Shirshov, N.B. Melnikova, R.G. Belleman, F.I. Rusadi, B.J.
Broekhuijsen, B.P. Gouldby, J. Lhomme, B. Balis, M. Bubak, A.L. Pyayt, I.I. Mokhov, A.V.
Ozhigin, B. Lang, and R.J. Meijer. Flood early warning system: design, implementation and
computational modules. Procedia Computer Science, 4:106–115, 2011.
[12] Siew Hoon Leong, Anton Frank, and Dieter Kranzlm¨
uller. Leveraging e-infrastructures for urgent
computing. Procedia Computer Science, 18:2177–2186, 2013.
[13] M. Malawski, K. Figiela, and J. Nabrzyski. Cost minimization for computational applications on
hybrid cloud infrastructures. Future Generation Computer Systems, 29(7):1786–1794, 2013.
[14] Maciej Malawski, Kamil Figiela, Marian Bubak, Ewa Deelman, and Jarek Nabrzyski. Scheduling
Multilevel Deadline-Constrained Scientiﬁc Workﬂows on Clouds Based on Cost Optimization.
Scientiﬁc Programming, 2015, 2015.
´
[15] W. J. Mo´scicki, G. Bania, M. Cwiklik,
and A. Borecka. DC Resistivity Studies of Shallow Geology
in the Vicinity of Vistula River Flood Bank in Czernich´
ow Village (near Krak´
ow in Poland). Studia
Geotechnica et Mechanica, 36(1):63–70, 2014.
[16] A.-M. Oprescu, T. Kielmann, and H. Leahu. Budget estimation and control for bag-of-tasks
scheduling in clouds. Parallel Processing Letters, 21(02):219–243, 2011.
[17] A Pieta, J Bala, M Dwornik, and K Krawiec. Stability of the levees in case of high level of the water.
In 14th SGEM Geoconference On Informatics, Geoinformatics And Remote Sensing–Conference
Proceedings, volume 1, pages 809–815, 2014.
[18] Michael Schiﬀers, D Kranzlmuller, Andrea Clematis, Daniele D’Agostino, Antonella Galizia, Alfonso Quarati, Antonio Parodi, Marina Morando, Nicola Rebora, et al. Towards a grid infrastructure for hydro-meteorological research. Computer Science, 12:45–62, 2011.
[19] S Srinivasan. Risk management in the cloud and cloud outages. In Security, trust and regulatory
aspects of cloud computing in business environments, chapter 8. Hershey: IGI Global, 2014.
[20] R. Strijkers, W. Toorop, A. van Hoof, P. Grosso, A. Belloum, D. Vasuining, C. de Laat, and
R. Meijer. Amos: Using the cloud for on-demand execution of e-science applications. In e-Science
(e-Science), 2010 IEEE Sixth International Conference on, pages 331–338. IEEE, 2010.
[21] T. Szydlo, P. Nawrocki, R. Brzoza-Woch, and K. Zielinski. Power aware MOM for telemetryoriented applications using GPRS-enabled embedded devices levee monitoring use case. In Proc.
2014 Federated Conference on Computer Science and Information Systems, volume 2 of Annals of
Computer Science and Information Systems, pages 1059–1064. IEEE, 2014.
[22] Konstantin V Knyazkov, Sergey V Kovalchuk, Timofey N Tchurov, Sergey V Maryin, and Alexander V Boukhanovsky. Clavire: e-science infrastructure for data-driven computing. Journal of
Computational Science, 3(6):504–510, 2012.
[23] Urzad Statystyczny w Krakowie (Statistical Oﬃce of Krakow). Powodz w wojewodztwie malopolskim w 2010 roku (Flood in the Malopolska province in 2010). http://krakow.stat.gov.pl/cps/
rde/xbcr/krak/ASSETS_2011_skutki_powodzi_2010.pdf, 2011. In Polish. Accessed 7.01.2015.
[24] KK Yoshimoto, DJ Choi, RL Moore, Asmit Majumdar, and Eva Hocks. Implementations of Urgent
Computing on Production HPC Systems. Procedia Computer Science, 9:1687–1693, 2012.

2386

