Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 156 – 165

International Conference on Computational Science, ICCS 2012

Data Life Cycle Management and Analytics Code Execution
Strategies for the Breath Gas Analysis Domain
Ibrahim Elsayeda,1 , Thomas Ludescherb , Alexander W¨ohrerc , Thomas Feilhauerb , Peter Brezanya
a Scientiﬁc

Computing, University of Vienna, Nordbergstrasse 15/C/3, A-1090, Vienna, Austria
University of Applied Sciences, Hochschulstrasse 1, A-6850 Dornbirn, Austria
Poelten University of Applied Sciences, Matthias Corvinus Strasse 15, A-3100 St. Poelten, Austria
b Vorarlberg

c St.

Abstract
In this paper we present a novel dataspace-based support platform for the international breath gas analysis community, which consists of over 30 institutions world wide with rapidly expanding research studies in various application
domains. The work discussed in this paper is mainly consolidated of two independently targeted frameworks: a
data life cycle management framework for e-Science applications and a code execution framework handling multiple
problem solving environments. The ﬁrst is based on our previous work, in particular the e-Science Life Cycle Ontology, which traces semantics about procedures a researcher is conducting during the execution of a scientiﬁc study.
Within the ABA-platform these two frameworks are integrated as complementary components aiming at enabling
reproducibility of breath gas studies. We present the architecture of the ABA-platform, discuss its security concept
and provide a performance evaluation of the ﬁrst vertical prototype implementation. Our approach to provide a platform that supports both, the preservation of scientiﬁc studies as well as their reproducibility with integrated execution
services represents a novel solution for e-Science applications, where data management and code execution services
can be complementary utilized.
Keywords: Scientiﬁc Dataspace, e-Science Study Reproducibility, Scientiﬁc Data Preservation, Problem Solving
Environment, Code Execution, Breath Gas Analysis

1. Introduction
Breath gas analysis is an emerging new scientiﬁc ﬁeld [1] with a large scientiﬁc community spread all over the
world and with a promising signiﬁcant impact on many application domains [2]. There is strong evidence [3] that
certain kinds of cancers can be detected using the concentration pattern of volatile compounds in exhaled air. The
international breath research association (IABR, http://iabr.voc-research.at), which consists of around 30 research
units worldwide is currently at the stage of developing new analytical methods, collecting pilot data for cancer and
other diseases and identifying marker compounds. At this stage of development, it is of particular importance to enable
collaborating scientists and institutions (a) access to distributed breath gas data and analytical resources collected
and developed at diﬀerent research institutions around the world and (b) to easily contribute to and leverage the
1 Corresponding

author. E-mail address: elsayed@par.univie.ac.at

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.017

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

157

resources of an international- and national-scale, multi-institutional environment. This will strongly support global
collaborations of scientists, improve decisions and increase the chance and scope of discoveries. In this context,
a supporting information infrastructure providing advanced data management and analytical services allowing the
scientist to eﬃciently access and analyze data from various geographically distributed data sources, and publish the
results of analysis is frequently requested. In this paper we introduce the ABA project (http://aba.cloudminer.org),
which contributes to the development of such an infrastructure for the IABR.
The IABR and especially the Breath Research Institute of the Austrian Academy of Sciences seek to advance
the process of conducting scientiﬁc studies on top of volatile organic compounds identiﬁed in exhaled breath air.
Within the ABA project the research group on Scientiﬁc Computing at the University of Vienna and the University
of Applied Sciences Vorarlberg have implemented and evaluated a ﬁrst vertical prototype. It delivers services for
executing code in distributed environments and preserving scientiﬁc studies from within existing Problem Solving
Environments (PSE). It also allows to create semantic descriptions of distributed dataset collections produced by
breath gas experiments. Breath gas research speciﬁc dataspaces are being set up to serve a special subject, which
is on one hand the relationship of source data (exhaled breath measurement data) and its derived data (e.g. speciﬁc
cancer markers) in breath gas analysis experiments and on the other hand to allow reproducibility of these applied
experiments. As the very next step this ﬁrst prototype will be deployed to a small core of breath researchers acting as
early adopters feeding the dataspace platform with real breath research data.
2. Related Work
We address a novel data management approach based on dataspace concepts [4] and a new positioning of wellknown PSEs, such as MATLAB [5], Octave [6], and R [7]. Dataspaces are modeled as participants (datasets) and
relationships. The scientiﬁc dataspace paradigm, which has been introduced in the context of our previous work
[8, 9, 10, 11] categorizes scientiﬁc data into three major categories: (1) primary data, (2) derived data, and (3)
background data. Data items of each category are interacting within breath gas related studies. The distributed space
of primary, background and derived data can, if enriched by semantically rich relationships among participating data
items, support scientists in organizing and preserving their scientiﬁc studies in the long-term to be re-used by owners
and others. The re-use of domain knowledge was one of the driving forces behind the development of the e-Science
lifecycle ontology [11]. The ontology can be seen as a fundamental part of the support platform. It is used to share
common understanding of the structure of scientiﬁc studies among a research community. It represents the concepts
to model the entire lifecycle of data in a scientiﬁc study.
There are many scientiﬁc data management and code execution approaches described in literature, however it
would go beyond the scope of this paper to discuss them all. First we brieﬂy discuss data management systems
that are related in some way to the dataspace concept and then we describe related works regarding code execution
approaches.
Systems like iRODS [12], SRB [13], and IBM’s commercial product Websphere Information Integrator [14] have
considered some dataspace concepts such as a metadata catalog and a logical name abstraction concept in their architecture; however key dataspace paradigms, like (a) support for creation of semantically rich relationships among
participants and (b) semantic search and query capabilities based on these relationships, are not taken into consideration. Moreover they follow the classical approach to query for data; it is however one of the major dataspace concepts
to go away from the one shot query to query by navigation. PAYGO [15] represents a large-scale, multi domain dataspace proposal that oﬀers limited integration and provides keyword-based search facilities for the deep Web. Another
approach towards evolving the Web into a global dataspace represents Linked Data [16]. It provides a publishing
paradigm enabling the extension of the Web with a global dataspace based on open standards. DSpace [17] represents
a large-scale open-source solution for the preservation of digital contents, designed especially for universities and
libraries but not limited to them. myExperiment [18] provides a virtual research platform for workﬂow management
in e-Science applications, allowing scientist to ease the collaborative work and exchange their knowledge more eﬃciently. However, the main work here is focused on knowledge exchange in form of workﬂows with no regards of
tracking down background data source information associated with scientiﬁc studies. Also, there are no major security considerations in myExperiment, which indicates that it cannot be used for experiments where patient and similar
sensitive data is involved. The Orchestra [19] system can be seen as another dataspace approach focuseing on data
sharing scenarios in the sciences speciﬁcally addressing the challenges in bioinformatics. The system coordinates

158

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

among a set of participating sites, each of whom manages a database and schema mappings describe how the data at
these sites are related.
Considering parallel execution services, there are several frameworks described in literature such as ParallelR
[20], NetWorkSpace for R [21], RevoDeployR [22], Elastic-R [23] in order to execute R code in parallel. There are
packages and extensions for Matlab and Octave including Parallel-Octave [24], Multicore [25], and MatlabMPI [26].
The above mentioned parallel execution frameworks have great potential allowing to manage parallel code execution
for a single PSE. However, the challenge we are facing in ABA is that we are dealing with multiple PSE code
sometimes within a single ABA-study. Therefore, what is needed is an infrastructure providing services to execute
PSE code in the cloud independent from the PSE type or without the need to even have a particular PSE installed. R
and Octave are open sources software products, thus do not require any license costs like when using Matlab. In order
to reduce expensive Matlab license costs, we are using the Matlab Component Runtime (MCR) environment, which
allows to execute Matlab code without the need of an own Matlab license.
3. ABA Architecture
In the ABA project data is collected at ABA sites using diﬀerent sampling methods in various experiments, including sample bag, ergonometer and sleep lab experiments. We are developing a framework for advanced breath analysis
that includes both preservation and advanced execution of breath gas analysis studies on an multi-institutional level.
The complete life cycle from calculation of substances and concentrations in exhaled breath air up to the creation of
manuscripts is being addressed. We are focused on domain driven design, which is an approach to develop software
for complex needs by placing the project’s primary focus on the domain logic and initiating a creative collaboration
between technical and domain experts to iteratively cut closer to the conceptual heart of the problem. Due to protection of data privacy, as patient data is involved in the life cycle of a breath gas analysis studies, all sensitive data
is stored locally at the research center and access is restricted to users with adequate permissions rights. Security
considerations in the ABA architecture are discussed in Section 3.2.
ABA-Platform Vienna

Amazon EC2 cloud

ABA-Platform Innsbruck
ABA-Platform Dornbirn
Data
Repository

Semantic
Repository

private Eucalyptus cloud

LDAP

Matlab
Client

(access rights)

Web Services
Data
Management
services

Code
Execution
services

Octave
Client

R-Client
Autonomic
Analysis
services

...
ABA Portal Server

Figure 1: Architecture overview illustrating a scenario with three ABA-platform instances at participating research centers.

An overview of the architecture is depicted in Figure 1 at a high level of abstraction that allows us to visualize,
understand, and reason about the architecturally signiﬁcant elements. It illustrates a scenario with three Austrian
breath research centers (Dornbirn, Innsbruck, and Vienna) that are collaborating in terms of collaborative science
in the ﬁeld of breath gas analysis. At each research center an instance of the ABA-platform and its underlying
infrastructure is deployed. It provides services to local users who are employed at the corresponding center and
preserves semantically enriched breath gas studies including all related data (input data, analytical methods used to
analyze the input data, and derived results) that are conducted at the research center. This results in a distributed data
and service environment for the international breath gas research community.

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

159

A semantic repository (implemented using the Jena Semantic Web Framework [27]) is provided for persistent storage of semantic descriptions about breath gas analysis studies. Datasets corresponding to such studies are persistently
stored within a data repository, which is provided by the integrated Rule Oriented Data System (iRODS) [28].
We use the cloud to execute time-consuming mathematical and statistical calculations as part of an ABA-study.
Our platform allows to integrate both, private and public clouds. Default calculations might be applied on private
clouds. For more complex or time consuming calculations it might make sense to use public clouds. A hybrid
approach (private and public clouds) is also possible with the architecture. We decided to use Amazon and Eucalyptus
for our ﬁrst prototypical implementation. However, any cloud infrastructure that provides the Amazon Web Service
(AWS) interface might ﬁt as well.
It is a common use case in the breath research domain that manuscripts are prepared in cooperation with research
groups from diﬀerent ﬁelds, such as mathematicians, chemists, and biomedical analysts. Each group is using different PSEs and therefore have diﬀerent preferences and requirements in analyzing breath gas data. Therefore, the
architecture intends that an ABA-platform can be accessed through multiple interfaces, such as MATLAB, Octave, R
and a web-based portal, the ABA-Portal. The ABA-Portal, which is implemented using the Liferay enterprise open
source portal framework [29] can be used to access breath gas patient data, raw-data, breath gas analysis studies and
analytical methods exposed as services from all participating ABA-platforms (if access permissions are assigned).
The currently implemented prototype of the web portal is accessible online (http://aba.labs.fhv.at/). In the following
we discuss the architecture of a single ABA-platform.
3.1. ABA-platform Architecture
This section discusses the software architecture of the ABA-platform, which will be deployed at all research
centers that participate in the distributed, multi-institutional ABA environment. Figure 2 shows the architecture of
the ABA-platform. Components depicted in color represent existing libraries that are being reused. Each ABAplatform implements the same interfaces, thus can participate within a multi-platform environment. In order to provide
a web-service based architecture we separated the components of the ABA-platform in domain independent Java
libraries providing methods and interfaces (e.g. the jSpace Java library, the Code Execution library) and web-services
implementing them (e.g. e-Science Life Cycle Services, Code Execution Services). All Web-services run within
an Apache Tomcat application server and consider the ABA-security concept such as managing access rights, or
communicating with the KDC (Kerberos Distribution Center) and the LDAP server. These components are described
in the following in detail.
A major block of the ABA-platform architecture is the data management framework, which we call the dataspace.
It provides data management for breath gas analysis studies. The e-Science lifecycle services utilizes the functionality
of the dataspace. The concepts of a scientiﬁc dataspace paradigm that is further developed for this block is described
in our paper [8], which discusses the role and impact of the scientiﬁc dataspace for the breath gas analysis research
community. It also provides some background information on the types and sizes of datasets that are involved in the
process of conducting a breath gas analysis study.
JSpace [9] represents a Java library providing all dataspace methods (e.g. insert, update, delete, scientiﬁc studies)
domain independently. That means that the jSpace Java library is not restricted to the ABA community. This was
possible because the e-Science lifecycle ontology on top of which jSpace is built, is developed independently from
any application domain. JSpace uses the Jargon Java library [30] to communicate with the locally running iRODS
server hosting datasets that belong to an ABA-study and the Jena Java library [27] to communicate with the locally
running RDF store hosting semantic descriptions of applied ABA-studies. ABA-users do not need to interact with
RDF data directly, or be aware of the details concerning how it is maintained and queried. The scientist utilizes
jSpace to construct semantic data about experiments, which hides from the scientist most of the underlying complexity
involved in the process, such as working directly with RDF or writing SPARQL queries. This is done using methods
provided by jSpace exposed as web services.
Due to the fact that most surrounding data of typical ABA-studies is ﬁle based (or at least could easily be stored
persistently in a ﬁle format) and because to preserve this kind of data for the long run is a major requirement from the
ABA-community, we have decided to use iRODS [31] as underlying data infrastructure to persistently store datasets
belonging to an ABA-study. It uses a secure password system, and also can be conﬁgured to support Kerberos, which
is important for dealing with sensitive data involved in many ABA-studies. The integration of iRODS into the ABAplatform supports the preservation of datasets used by and generated within ABA-studies. In combination with the

160

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

Clients
Liferay

R

Octave

Streaming Libraries
(CXF, Spring)

Code Execution services - client
Execute
Calculation

User Management
Services

Calculation
Status

e-Science life cycle services

Tomcat

create
LCR

Matlab

Load
DS Participants

Manage
LCR

Load Calculation
Results

Load Calculation
Logs

private or public cloud

Code Execution services - worker node

Load
LCR

Search
LCR

Calculation
Finished

Walrus/S3

Calculation Finished
with Failure

Worker
Worker
Node
Worker
Node
Node

Cloud
Controller

jSpace Java Library

LDAP
Index

Insert

Load DS
Participant

Delete

Update

Code Execution Java Library
Reason

for administration
Protege

Monitor
Controller

Calculation
Controller

Search

Virtual Machine (Ubuntu 10.04 LTS)
JetS3t

e-Science
Lifecycle
Ontology

iRODS
Webclient

JARGON
Java
Library

Pellet
Java
Library

JENA2
Java
Library

MySQL
lifecycle
Postgresql
Dataspace Participants

Dataspace
Relationships
(RDF Store)

AWS SDK
Code Execution services - client

Tomcat

iRODS
ABAZone

Files
iCommands
Client

Cloud
Controller

MySQL

Streaming
Libraries
(CXF, Spring)

MySQL

Matlab

Load Calculation
Logs

Worker
Node Status

Load Calculation
Status

Execute
Calculation

Calculation
Controller

R

Octave

ABA-Platform 1

Figure 2: Architecture overview illustrating the components of a single ABA-platform instance.

semantic repository maintained by the jSpace Java library it provides a semantic data infrastructure to preserve the
complete data lifecycle for ABA-studies.
The other major block of the ABA architecture represents the code execution block. It provides a framework for
executing code from diﬀerent PSEs, including Matlab, R, and Octave. The Code Execution Java Library provides
methods to produce sub-calculations, start and stop virtual machines, to copy the code to be executed into S3 (AWS)
or Walrus (Eucalyptus), as well as to monitor running calculations and virtual machines. On the worker node virtual
machine all three PSEs (R, Octave, MCR) are installed and a Tomcat application server is running hosting code execution services for the client (e.g. execute calculation or load calculation logs/status).
ABA-platform services
ABA-platform services represent all web services that are used by ABA-users in order to either compose and execute new or to search for and reproduce existing ABA-studies2 . We categorize these services into two major groups:
data management services and code execution services. Other services include user management and administration
services.
Data management services. This group of services supports creation, search, load, and management of breath gas
analysis studies. The services capture the full lifecycle of a study by applying the e-Science lifecycle model [11]. It
maps the e-Science life cycle activities to activities a breath researcher is doing while conducting a study. Table 1
in [8] lists deﬁnitions of breath gas analysis actions and their mappings to the e-Science life cycle activities. Data
management services include the following services as depicted in Figure 2. In our terminology we call a breath
gas analysis study that is described according to the e-Science lifecycle model a LifeCycleResource (LCR). These
2 Reproducing

an existing study means to be able to re-run a certain experiment at any give time returning the same derived data.

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

161

services are used in case an ABA-user wants to preserve an accomplished ABA-study or search and access published
ABA-studies.
• Create LCR - this service uses an LCR instance to conduct the breath gas analysis study. The service uses
methods from the jSpace Java library to construct semantic data according to the e-Science lifecycle model (i.e.
individuals and properties of the e-Science lifecycle ontology). The resulting RDF data is added to the semantic
repository, which is implemented as RDF store. Datasets that belong to the study are represented as dataspace
participants, they are stored in the data repository, which is realized as an iRODS server. Each dataspace
participant stored in iRODS has a reference to the ABA-study it belongs to. Besides semantic descriptions of
the study, also basic information such as type, name, and the references of the dataspace participant that belong
to the ABA-study is stored within the RDF store.
• Search LCR - the Search LCR Service is used to search for available studies in the dataspace. The search
request considers available access rights of the user who submits the search request. A query is submitted to
the RDF store, retrieving metadata about studies that match the query. In almost all requests the RDF store is
queried ﬁrst to search for an ABA-study. Then, once the ABA-user has identiﬁed a speciﬁc study, he or she
might request its corresponding data sets by invoking the Load DS Participants service.
• Load LCR - once a study has been found and selected for further investigations, it can be loaded from the
dataspace into the user interface (portal or a PSE). Optionally one can specify which data (primary, background,
and derived) should also be loaded besides the metadata of the study.
• Manage LCR - this service allows to apply changes (e.g. changing access rights) to an existing study.
• Load DS Participants - this service receives all data sets that correspond to a given study. It communicates with
the Jargon Java library to access certain datasets from the iRODS server.
Code execution services. This group of services support online execution of functions, methods, and scripts written
in diﬀerent PSEs (e.g. Matlab, R, Octave). It includes for each PSE a service that allows to execute programspeciﬁc functions/methods/scripts on a server. Depending on the application it might also be executed in parallel using
compute clouds. The ABA-user only sees the client services since worker node services are used only internally. In
the following these two groups of services are described.
• Client services - These services must be invoked by one of the clients (e.g. Liferay, Octave, Matlab, R).
– Execute Calculation - this service can be used to start a new calculation. In order to execute a new calculation all parameters needed in the code are passed as comma-separated values to the service. At the
beginning this service generates parallel executable sub calculations (same method with diﬀerent parameters). Afterwards the PSE code will be stored at S3/Walrus to reduce time and data transfer for parallel
execution. Finally, the sub calculations will be transmitted to a free worker node Virtual Machine (VM)
where there will be executed.
– Calculation Status - this service allows to monitor the code execution by requesting the current status,
which can either be waiting, running, ﬁnished, or error. The status can be requested either for the entire
calculation or for each sub-calculation.
– Load Calculation Results - this service loads the results from either the entire calculation or from each
sub-calculation.
– Load Calculation Logs - this service loads the logs from sub-calculations. This includes all output on the
console from the used PSE.
• Worker Node services - These services will be invoked by the worker node VM.
– Calculation Finished - this service informs about successfully ﬁnished sub-calculations and returns the
results and logs corresponding the sub-calculation.
– Calculation Finished with Failure - in case the calculation ﬁnished with errors, then this service sends the
corresponding logs.

162

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

3.2. Security considerations
Clients
Web-Portal
VM - Worker Node
VM - Worker Node
VM -Kerberos
Worker Node
Kerberos
Keytab
Kerberos
Keytab
Keytab

Matlab
Client

Kerberos
username + password

private or public cloud

Key Distribution Center
(KDC)

user
credential

user
credential

ABA-Platform 1

ABA-Platform 2
Web Services

Kerberos
Keytab

Data
Repository

Octave
Client

R-Client

Data
Management
services

Semantic
Repository

Web Services

user
credential

Code
Execution
services

User
Management

...

LDAP

Kerberos
Keytab

Data
Repository

(access rights)

Data
Management
services

Code
Execution
services

Semantic
Repository

User
Management

...

LDAP
(access rights)

DNS
Kerberos
Keytab

Kerberos
Keytab

Kerberos
Keytab

Kerberos
Keytab

Figure 3: ABA security concept.

Since breath research involves patient data and other sensitive data, we implement a strict security concept based
on the Kerberos MIT implementation [32]. We use Kerberos in order to provide Single Sign On (SSO) authentication
in a distributed system. Figure 3 gives an overview of the security concept in the ABA project. Every ABA-user needs
a Kerberos user principal and all system components (e.g. ABA-Platforms, Worker Nodes, etc.) a Kerberos server
principal. These principals are managed by the Kerberos Distributen Center (KDC). Each Tomcat application server
in the ABA system uses a ﬁlter to restrict access to users or services with a Kerberos ticket. The user principal is
delegated to the corresponding ABA-platform when the client is invoked.
The goal of this security concept is to implement user authentication up to the lowest level (database level) using
ticket delegation. Thus the ABA-platform and all its components (e.g. Code Execution Node) can use the identity of
a requesting user for any further service invocations. Each service can further evaluate whether the ticket used by the
user to authenticate himself is valid and based on that grant access rights.
Each server component needs an appropriate server principal (i.e. the principal has to be registered in the KDC
with the DNS name of the corresponding server) in order to authenticate with Kerberos. However, this is a problem for
worker nodes, in particular when using AWS because the DNS name is not available in advance. We have challenged
this with an own DynamicDNS, which provides a reverse DNS lookup (IP to DNS name) for registered DNS names.
4. Prototype Evaluation
In the current version of the ABA-platform we have implemented a vertical prototype to provide core system
functionality. By this we were able to evaluate core services at an early stage of development. These core services
include the preservation process of ABA-studies (Create LCR service) and code execution services for R and Octave.
Performance results with the Jena MySQL backend in our ﬁrst prototype have shown that other options like Jena TDB
or Jena SDB should be investigated in further prototypes as well. Due to the limit of pages, only the results of code
execution services are discussed in the following.
The code execution VM is provided for both, AWS and Eucalyptus Cloud platforms. For our code execution
framework most relevant performance measures are the data transfer rates, number of CPUs and size of memory.

163

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

Cloud type

#cores

local (16GB RAM, I7)
direct
Eucalyptus
instance (c1.medium)
3x
Eucalyptus
(c1.medium)
1x
Eucalyptus
(m1.large)
direct AWS (m1.large)
3x AWS (m1.large)
direct AWS (c1.xlarge)
1xAWS(c1.xlarge)
3xEuclayptus
(c1.medium), 3xAWS
(m1.large)
3xEuclayptus
(c1.medium), 1xAWS
(c1.xlarge)

1
1

avg time
[sec]
783,73
821,55

3

297,45

2

411,44

1
6
1
8
9

1880,46
334,71
1468,85
306,65
220,94

11

198,41

R
% to local

Octave
% to local

104,82

avg time
[sec]
1014
865,8

36,21

37,95

296,65

36,11

29,26

50,08

52,50

406

49,42

40,04

239,94
42,71
187,42
39,13
28,19

1964
340,90
1589,5
209,05
212,95

25,32

157,80

17,80
20,88

% to same
instance

% to same
instance
85,38

17,36
13,15

193,69
33,62
156,76
20,62
21,00

15,56

Table 1: Code execution performance tests with R and Octave

Therefore we have elaborated a performance evaluation regarding these measures. The results of the evaluation
represent important information aiming to predict how long a calculation might need as well as to identify the optimal
cloud platform and appropriate worker nodes to be used for the diﬀerent sub calculations
In order to evaluate the ﬁrst prototype of the code execution services, we have been conducting three diﬀerent
experiments. In our ﬁrst experiment we tested execution time with CPU intensive Octave and R examples, in the
second we tried to achieve some data transfer constants, and in the last we measured the boot time of the code
execution virtual machine. A small Eucalyptus private cloud is installed within our lab at the University of Applied
Sciences (FHV).
R and Octave performance evaluation. We have implemented Monte-Carlo methods 3 calculating PI in R and Octave.
These calculations were executed in diﬀerent code execution scenarios: (a) local (1 thread), (b) on a private Eucalyptus
cloud, (c) on Amazon Web Service, and (d) on a hybrid cloud (Eucalyptus and Amazon Web Service). Table 1 shows
the diﬀerent execution times for each scenario and provides a comparison among local time and virtual machine time.
We can see that the parallelism overhead is minimal since the improvement with three Eucalyptus worker nodes is
about 36,2 %(R) and 36,1% (Octave) with an ideal value of 33,3%, and with three EC2 m1.large instances about
17,8% (R) and 17,36% (Octave) with an ideal value of 16,6%. The resulting times do not include the instance boot
time.
Evaluation of transfer constants. Additionally we have conducted some data movements tests, which are important to
consider with code execution services presented in this paper. Figure 4 contains measured times for the data transfer
evaluations. It shows that the data transfer speed for datasets larger than 100MB from FHV to Walrus is almost the
same (approx. 10MB/s) compared to S3. The following two points can be derived from the diagram: (a) Walrus to
VM is two times faster than S3 to VM, and (b) the speed of the S3-client library depends on the size of data. Larger
ﬁles (larger than 100MB) are copied relatively much faster than smaller ﬁles (e.g. 10 MB). The latter can be explained
by the overhead of S3 (authentication, access rights, bucket name, and so on).
3 http://en.wikipedia.org/wiki/Monte

Carlo method

164

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

Figure 4: Data transfer measurement [MB/s]

Booting time. For this performance evaluation it is important to know that the VM-images are already in the cache
of the host system. Eucalyptus and EC2 need approx. 20 seconds to copy the image from the cache to the temporary
directory. The boot-time depends on the number of cores of the VM and takes between 45 and 55 seconds. These
numbers must be considered when new instances must be started. If the host system does not have the required VM
in the cache it takes more than 2 minutes to copy the image from Walrus/S3/EBS to the host system.
5. Conclusion and Future Work
This paper has presented a dataspace-based support platform for the international breath research community,
which consists of over 30 institutions world wide with rapidly expanding breath gas analysis studies in various application domains. The platform provides data management and code execution services as two complementary service
blocks that can, if used in conjunction, support reproducibility of scientiﬁc studies preserved by the underlying dataspace. A ﬁrst vertical prototype of the platform has been implemented and evaluated. Performance results of code
execution services are discussed. The main contributions of this work are as follows. We presented an approach
to preserve the complete data life cycle of e-Science studies that provides the basis for a reproducibility framework
for entire scientiﬁc experiments; so far to our best knowledge the ﬁrst one for e-Science applications with integrated
code execution services. In addition, we provide a cloud based code execution framework for multiple PSEs, which
enables researchers to execute speciﬁc PSE codes (e.g. Octave code) without the need of having the particular PSE
installed. The code execution framework furthermore provides execution of PSE methods in parallel mode. Both
frameworks (the reproducibility and code execution framework), represent independently targeted components that
can be deployed alone. On top of that we have presented the architecture of the ABA-Platform, which integrates both
frameworks as two complementary components and handles all security aspects. Security is particularly important in
the ABA-project, since sensitive data such as patient data is involved. Therefore we have elaborated a security concept
that goes down into the lowest level (database level) using the the Kerberos MIT implementation. This concept is generally applicable, thus can be applied in any cloud-based e-Science infrastructure. Due to restricted number of pages
we have only brieﬂy introduced the security concept in this paper, a full paper on the concept has been submitted for
review [33].
As a very next step we will deploy the prototype implemented to a small breath research group acting as a core of
early adopters. The concepts presented are implemented in a domain-independent way, thus the entire platform can
also be utilized by other e-Science application domains. There are many potential extensions of this work towards
a comprehensive, productive, and high-performance scientiﬁc dataspace infrastructure for research collaborations
among multi-disciplinary research groups. Future developments will include methodologies to automatically compose
and execute new studies from large collections of existing breath research data and analysis models.

Ibrahim Elsayed et al. / Procedia Computer Science 9 (2012) 156 – 165

165

Acknowledgements
The funding of the ABA-Project (Project No. TRP 77-N13) by the Austrian Federal Ministry for Transport,
Innovation and Technology and the Austrian Science Fund is key to bringing the partners together and to undertaking
the research. The entire research team contributed to the discussions that led this paper and provided the environment
in which the ideas could be implemented and evaluated.
References
[1] J. D. Pleil, A. Amann, The 2011 international association of breath research (iabr) meeting in parma, italy: a collection of comments from
attendees, Journal of Breath Research 5 (4) (2011) 049001.
[2] D. S. Anton Aman (Ed.), Breath Analysis for Clinical Diagnosis and Therapeutic Monitoring, World Scientiﬁc, 2005.
[3] M. Phillips, R. N. Cataneo, C. Saunders, P. Hope, P. Schmitt, J. Wai, Volatile biomarkers in the breath of women with breast cancer, Journal
of Breath Research 4 (2).
[4] M. Franklin, A. Halevy, D. Maier, From databases to dataspaces: a new abstraction for information management, SIGMOD Rec. 34.
[5] Matlab - The Language Of Technical Computing, Website, www.mathworks.com/products/matlab/ (2011).
[6] Octave, Website, http://www.gnu.org/software/octave/ (2011).
[7] The R Project for Statistical Computing, Website, http://www.r-project.org/ (2011).
[8] I. Elsayed, T. Ludescher, K. Schwarz, T. Feilhauer, A. Amann, P. Brezany, Towards realization of scientiﬁc dataspaces for the breath gas
analysis research community, in: IWPLS ’09: Proceedings of the 1st International Workshop on Portals for Life Sciences, CEUR Workshop
Proceedings, ISSN 1613-0073, UK, September 14-15, UK, 2009.
[9] I. Elsayed, P. Brezany, Towards large-scale scientiﬁc dataspaces for e-science applications, in: M. Yoshikawa, X. Meng, T. Yumoto, Q. Ma,
L. Sun, C. Watanabe (Eds.), DASFAA Workshops, Vol. 6193 of Lecture Notes in Computer Science, Springer, Tsukuba, Japan, 2010.
[10] I. Elsayed, G. Madey, P. Brezany, Portals for collaborative research communities: two distinguished case studies, Concurrency and Computation: Practice and Experience.
[11] I. Elsayed, A. Muslimovic, P. Brezany, Intelligent dataspaces for e-science, in: WSEAS’08, World Scientiﬁc and Engineering Academy and
Society (WSEAS), Stevens Point, Wisconsin, USA, 2008, pp. 94–100.
[12] R. Moore, A. Rajasekar, M. Wan, Data grids, digital libraries, and persistent archives: An integrated approach to sharing, publishing, and
archiving data, Proceedings of the IEEE 93 (3) (2005) 578 –588.
[13] R. Moore, M. Wan, A. Rajasekar, Storage resource broker; generic software infrastructure for managing globally distributed data, in: Proceedings of the 2005 IEEE International Symposium on Mass Storage Systems and Technology, IEEE Computer Society, Washington, DC,
USA, 2005, pp. 65–69.
[14] A. Conigliaro, IBM WebSphere Information Integrator portfolio overview: Integrating data and content on demand, IBM Software Goup,
White Paper (January 2005).
[15] J. Madhavan, S. Cohen, X. L. Dong, A. Y. Halevy, S. R. Jeﬀery, D. Ko, C. Yu, Web-Scale Data Integration: You can aﬀord to Pay as You Go,
in: CIDR, www.crdrdb.org, 2007, pp. 342–350.
[16] T. Heath, C. Bizer, Linked Data: Evolving the Web into a Global Data Space, 1st Edition, Morgan & Claypool, 2011.
[17] Dspace open source software enables open sharing of content that spans organizations, continents and time., Website (2011).
[18] C. A. Goble, D. C. De Roure, myExperiment: social networking for workﬂow-using e-scientists, in: Proceedings of the 2nd workshop on
Workﬂows in support of large-scale science, WORKS ’07, ACM, New York, NY, USA, 2007, pp. 1–2.
[19] Z. G. Ives, T. J. Green, G. Karvounarakis, N. E. Taylor, V. Tannen, P. P. Talukdar, M. Jacob, F. Pereira, The orchestra collaborative data
sharing system, SIGMOD Rec. 37 (2008) 26–32.
[20] S. Computing, ParallelR version 1.2, www.scientificcomputing.com/product-hpc-ParallelR-Version-1.2-031009.aspx, [Online; accessed 05-April-2011] (2011).
[21] I. Scientiﬁc Computing Associates, NetWorkSpacs for R User Guide, http://nws-r.sourceforge.net/doc/nwsR-1.5.0.pdf, [Online; accessed 05-April-2011] (2011).
[22] J. B. Rickert, R for Web-Services with RevoDeployR, http://info.revolutionanalytics.com/RevoDeployR-Whitepaper.html,
[Online; accessed 05-April-2011] (09/2010).
[23] K. Chine, Elastic-R: A Virtual Collaborative Environment for Scientiﬁc Computing and Data Analysis in the Cloud,
http://www.elasticr.net/doc/ElasticR-SC10-Tutorial.pdf, [Online; accessed 05-April-2011] (2011).
[24] Parallel Octave, http://www.higuchi.ecei.tohoku.ac.jp/octave/, [Online; accessed 13-April-2011] (2003).
[25] M. Buehren, The ’multicore’ Package, http://octave.sourceforge.net/multicore, [Online; accessed 13-April-2011] (2009).
[26] D. J. Kepner, MIT Lincoln Laboratory: MatlabMPI, http://www.ll.mit.edu/mission/isr/matlabmpi/matlabmpi.html, [Online;
accessed 13-April-2011] (2004).
[27] Jena - A Semantic Web Framework for Java, Project Website, http://jena.sourceforge.net/ (2011).
[28] A. Rajasekar, M. Wan, R. Moore, W. Schroeder, A prototype rule-based distributed data management system, HPDC workshop on ”Next
Generation Distributed Data Management (2006).
[29] Liferay, Website, http://www.liferay.com/ (2011).
[30] Jargon, a java client api for the datagrid, Website, https://www.irods.org/index.php/Jargon (2011).
[31] The Data Intensive Cyber Environments (DICE), Irods:data grids, digital libraries, persistent archives, and real-time data systems,
http://www.irods.org/ (2011).
[32] Kerberos: The Network Authentication Protocol, Website, http://web.mit.edu/kerberos/ (2011).
[33] T. Ludescher, T. Feilhauer, P. Brezany, Security concept and implementation for a cloud based e-Science infrastructure, submitted to ARES
(2012).

