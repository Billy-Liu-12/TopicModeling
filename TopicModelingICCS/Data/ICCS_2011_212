Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 888–897

International Conference on Computational Science, ICCS 2011

The performance of GRAPE-DR for dense matrix operations
Junichiro Makinoa , Hiroshi Daisakab , Toshiyuki Fukushigec , Yutaka Sugawarad , Mary Inabad , Kei Hirakid
a

d

Center for Computational Astrophysics, National Astronomical Observatory of Japan, Mitaka, Tokyo 181-8588
b Faculty of Commerce and Management, Hitotsubashi University, Kunitachi, Tokyo 186-8601
c K&F Computing Research, Chofu, Tokyo 182-0026
Department of Computer Science, Graduate School of Information Science and Technology, The University of Tokyo, Tokyo 133-0033

Abstract
We describe the implementation and performance of dense matrix multiplication and LU decomposition on the
GRAPE-DR SIMD accelerator board. A GRAPE-DR card, with 4 GRAPE-DR chips, has the theoretical peak DP
performance of 819 Gﬂops. Each GRAPE-DR chip has 512 processing elements and operates with 400 MHz clock
cycle. each PE can perform one addition and one multiplication in every two clock cycles. The measured performance
of matrix multiplication is 730 Gﬂops for the multiplication of matrices with size 51200 by 2048 and 2048 by 51200.
The performance of LU decomposition is 480 Gﬂops for the problem size of 51200.
Keywords: Numerical methods
PACS: 02.60.-x

1. Introduction
In this paper, we describe the implementation and performance of dense matrix multiplication and LU decomposition on the GRAPE-DR SIMD accelerator card[1], which is an SIMD accelerator card with the theoretical peak
double precision (DP) ﬂoating-point performance of 819 Gﬂops. The basic idea behind the GRAPE-DR architecture
is to design a single-chip highly-parallel processor, with a small amount of memory on each processing element (PE)
and relatively small external memory bandwidth. By limiting the external memory bandwidth, we can integrate a
large number of PEs in a single chip and achieve high peak performance.
There are quite a few applications which does not require high memory bandwidth. For example, the calculation
of particle-particle interactions necessary in many particle-based simulations is compute-intensive, and yet requires
relatively small memory bandwidth. There have been several quite successful projects to develop special-purpose
computers for particle-based simulations [2, 3, 4, 5]. Other examples include calculation of two-electron integrals in
quantum chemistry, and any calculation which applies a large number of operations on relatively small dataset.
By limiting the external memory bandwidth, GRAPE-DR achieved high peak performance and low power consumption. With 205Gﬂops DP peak, a GRAPE-DR chip, fabricated with TSMC 90nm process, consumes only 50W.
The peak speed of a 4-chip GRAPE-DR card is 819 Gﬂops and power consumption is around 200W. These numbers,
in particular the performance per watt, is better than that of any other processor currently available, including GPUs
fabricated with the 40nm process and microprocessors fabricated with the 32nm process.
The memory bandwidth of a single GRAPE-DR chip is 4 GB/s. Thus, so-called “Byte per Flops” ratio is 0.02,
while that ratio is 4 for traditional vector processors and around 0.2 for present-day high-performance microprocessors
and GPGPUs. Thus, if an application requires high memory bandwidth, it is diﬃcult to achieve high eﬃciency on
1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.094

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

889

GRAPE-DR. However, as we stated above, there are quite a few applications which do not require high memory
bandwidth. GRAPE-DR has been used for gravitational N-body simulations and implementation of a molecular
dynamics code is underway.
1.1. Dense matrix operations
One important example of compute-intensive operations is the manipulation of dense matrices, which appears in
a number of important scientiﬁc applications. In general, most operations on dense matrices can be rewritten in such
a way that matrix-matrix multiplications become the most time-consuming part. This is the basic idea behind Level 3
BLAS[6].
Level 3 BLAS was designed to make eﬃcient use of cache-based microprocessors. Consider a simple case of
the multiplication of two square matrices of size N. If one matrix ﬁts into the cache memory, we can minimize the
access to the main memory by the following simple algorithm. We keep one matrix in the cache, and load vectors of
the other matrix one by one and calculate matrix-vector product using one vector, and store the result. We repeat the
load-product-store loop until we process all elements of the other matrix. Thus, one can reduce the requirement on
the main memory bandwidth by increasing N. Of course, larger N means we need larger cache, but on most of present
microprocessors the cache size is more than enough to achieve near-peak performance on DGEMM.
In practice, just to make DGEMM with large N fast is not enough to improve the performance of dense matrix
operations. In the case of the LU decomposition, for the matrix of size N, if we apply a single-level blocked algorithm
with block size m, the calculation cost of DGEMM with block size m is O[N 2 (N −m)], while that of the remaining part
is O(N 2 m). Thus, by increasing the blocking size m, we improve the performance of DGEMM, but we also increase
the calculation cost of non-DGEMM operations.
Gustavson[7] introduced recursive blocking, which further extracts DGEMM operations from the remaining part
of LU decomposition. With Gustavson’s algorithm, the calculation cost of DGEMM with block size m/2 is O(N 2 m/2),
and that of size m/4 is O(N 2 m/4), and so on. The cost of Level-1 BLAS operation is reduced to O(N 2 ), independent of
block size m. With this algorithm, we can improve the performance of the calculation of the entire LU decomposition
by using accelerator hardwares just to speedup the DGEMM operations with relatively large m.
1.2. Accelerators for dense matrix operations
There have been three approaches for the acceleration of dense matrix operations. One is to use fast generalpurpose computers. As one can see from the machines listed in Top500[8], this approach has been quite successful for
the last 30 years. The second approach is to design hardware specialized to speciﬁc operations such as matrix multiplication or some other algorithm for LU decomposition. There are a number of works on the eﬃcient implementation
of matrix multiplication on systolic arrays, but most of recent works are either design studies or trial implementations
on FPGA devices. MACE[9] is an example of specialized hardware for LU decomposition which was actually implemented on a custom VLSI chip. It’s architecture is similar to traditional parallel-vector processors, with a large
number of vector pipelines.
The third approach is to make use of fast accelerator hardware. Early trials in this direction include FPS System
500 matrix co-processor[10]. Current examples include GPGPUs, ClearSpeed CSX600 and 700, and our GRAPEDR. All of these systems are connected to the host computer, which is typically an x86-based PCs or servers, through
PCI-Express interface. All have SIMD processor architecture with a large number of processing elements, some of
which containing more than 2,000. All have on board memory units.
There are two possible ways for the implementation of matrix algorithms such as LU decomposition on these
accelerator architecture. One approach, which we call the all-on-accelerator approach (AoAA), is to place the entire
matrix on the on-board memory of the accelerator card, and let the accelerator to perform all operations, including
O(N 2 ) ones such as ﬁnding pivots and swapping rows. The other, which we call the GEMM-only approach (GoA), is
to let the accelerator to perform only the matrix multiplication and let the host computer perform all other operations.
At the ﬁrst sight, it might seem obvious that AoAA is better, since it minimizes the need for the data transfer
between the accelerator and the host computer. In practice, GoA, in which only the matrix multiplication is done on
the accelerator, turned out to perform better. Volkov and Demmel[11] analyzed the behavior and performance of both
approaches on NVIDIA GPGPUs. The estimated performance with AoAA is very low, because of the large startup
overhead of computing kernels.

890

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

GoA has two important additional advantages. First, it is much easier to implement, since one can use the accelerator hardware just by replacing DGEMM subroutine by the one which uses the accelerator hardware. Second, a
parallel version is also simple to implement, since again it is suﬃcient to replace DGEMM routines. In the case of
parallel implementation, the amount of internode communication is essentially the same for AoAA and GoA, if the
problem size is the same. On the other hand, the maximum size of the problem is limited by the size of the on-board
memory of the accelerator in the case of AoAA, and by the size of the main memory of the host in the case of GoA.
Thus, GoA is practically more useful.
With GoA, Volkov and Demmel [11] achieved the speed of 309 Gﬂops for single-precision LU decomposition
with single NVIDIA GTX280 card. The performance of single-card LU decomposition is 49.5 % of the theoretical
peak speed of GTX280. The speed of SGEMM operation itself is around 60% of the peak speed, which is much
better than that of earlier works, but limited by the eﬃciency of the innermost loop which uses the data in the shared
memory[11].
For newer Fermi-based GPUs, Nath et al.[12] reported the eﬃciency of 58% for DGEMM kernel (300Gﬂops) and
43% for LU decomposition. On NVIDIA GPUs, even though they have much faster on-board memory and also much
faster connection to the host CPU, DGEMM eﬃciency is limited to around 60% due to the design.
Nakasato[13] reported the eﬃciency of 87% for the DGEMM calculation kernel on the AMD Cypress GPU. The
design of AMD GPUs seem to be better suited to matrix operations than that of NVIDIA GPUs. The measured best
performance of DGEMM on a Cypress GPU is 470 Gﬂops.
1.3. Summary of the present work
In this paper, we describe the implementation and performance of matrix multiplication and LU decomposition
on GRAPE-DR SIMD accelerator hardware. The achieved performance for DGEMM is 730 Gﬂops, or 89 % of the
theoretical peak DP performance of the card. As far as we know, these numbers are the highest for a single accelerator
card.
The achieved performance of the LU decomposition is 480 Gﬂops, or 59% of the theoretical peak. These numbers
are highest single-card DP performance for LU-decomposition. In addition, as far as we know, this is the ﬁrst time
that the accelerator improved the speed of the LU decomposition by a factor larger than ten.
All recent GPUs are fabricated with TSMC 40nm technology. The GRAPE-DR chip is fabricated with TSMC
90nm technology. Even so, A 4-chip GRAPE-DR card and high-end GPU cards have similar power consumption
(200-250W), and the performance of DGEMM and LU decomposition is around 2.5 times better than that of an
NVIDIA GPU, or 1.5 times bettern than an AMD GPU.
In the rest of this paper, we describe our implementation of matrix multiplication and LU decomposition in detail.
In section 2, we give brief overview of GRAPE-DR architecture. A more detailed description is given in [1]. In
section 3, we describe the implementation and performance of the matrix multiplication. In section 4, we describe the
implementation and performance of LU decomposition. Section 5 sums up the paper.
2. GRAPE-DR
In this section, we overview the architecture of GRAPE-DR. The GRAPE-DR processor board consists of four
GRAPE-DR processor chips, each associated with a control processor and a on-board memory. The GRAPE-DR
processor chip is designed as an SIMD processor to which the instruction and data are supplied from outside the chip.
Thus we need to add a control processor, which takes care of functions such as supplying the instruction and data,
receiving the data from the GRAPE-DR processor, and communication with the host computer and also the on-board
memory. We call this control logic “control processor”. We implemented the control processor on the FPGA.
In section 2.1, We describe the structure of the Processing Element on the GRAPE-DR processor chip. In section
2.2, we present the structure of the GRAPE-DR processor chip. In section 2.3, we describe the structure of the
GRAPE-DR processor board.
2.1. Processing Element
Each PE consists of a ﬂoating point multiplier, a ﬂoating point adder/subtracter, an arithmetic and logic units, a
general purpose register ﬁle, a local memory and an auxiliary register (T-register). Figure 1 shows the structure of a
PE.

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

891

Mask register

A
L
U

Multiplexer B

PEID

Multiplexer A

BBID

T register
Genral purpose
register file
Local
memory

To broadcast
memory

From broadcast memory

Figure 1: The structure of Processing Element (PE).

Data formats are ﬂoating point and ﬁxed point data with 72-bit and 36-bit lengths. A 72-bit ﬂoating point data
consists of 1 sign bit, 11 exponent bits and 60 mantissa bits. A 36-bit ﬂoating point data consists of 1 sign bit, 11
exponent bits and 24 mantissa bits. We call 72-bit data long words (LW) and 36-bit data short words (SW).
The ﬂoating point adder/subtracter handles 72-bit data with the throughput of 1 operation per clock. The ﬂoating
point multiplier performs one multiplication of 50-bit mantissa and 25-bit mantissa per clock. So throughput of
multiplication with short words is one. The multiplication of two long words is achieved by adding the results of two
multiplications by the ﬂoating-point adder. Thus the throughput of the LW multiplication is 0.5. Type conversion
between long word and short word can be done in both the input and output stages in ﬂoating-point units. Therefore,
we can mix LW and SW operations without any performance penalty.
The 256-LW local memory has 1 read/write port. The 32-LW general-purpose register ﬁle has 2 read ports and 1
write port. There is an aux register (T-Register) to supplement the function of these local stores. Mask registers are
used to implement conditional store to both register ﬁle and the memory. A PE also has input and output ports to the
broadcast memory.
2.2. GRAPE-DR Chip
Figure 2 shows the architecture of the GRAPE-DR chip.
512 PEs are organized in 16 broadcast blocks(BBs). Each BB consists of 32 PEs and a broadcast memory (BM)
which is used to broadcast identical data to the 32 PEs. BM is also used to output the data in PEs. Each BM
is connected to the result reduction network (RRN). RRN is implemented as a binary tree of ALUs and ﬂoating
point adder/subtracters with the same functionality as theses units in PEs. The RRN is used to reduce the degree of
parallelism visible from the application, in the case when we can take summation of the results from multiple PEs. It
also reduces the required I/O bandwidth for matrix multiplication.
Each PE communicates only with BM in its BB. Data from BM is broadcasted to all PEs in its BB. Only one PE
can write data to BM in 1 clock. Data can be written to BMs through the IDP port. The IDP port has 72-bit width
and the data rate same as the internal clock of PEs. Data from IDP can be broadcasted to all BMs or written to single
BM. Data in BM can be output from ODP port. The ODP has 36-bit width and can output one LW data in every two
clock cycles. The data in BMs can be reduced through the reduction network. It is also possible to select one BM for
output.
2.3. Processor board
A GRAPE-DR processor board consists of 4 processor modules. Each processor module consist of a GRAPE-DR
chip, a control processor and external memories. The control processor is implemented in an FPGA chip(EP1AGX60EF
made by Altera. The external memory is implemented using DDR2 SDRAM(DDR2-533) chips. Its capacity is

892

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

Broadcast memory

Input from
IDP

Output
from
other block

ALU

ALU

ALU

ALU

Register
file

Register
file

Register
file

Register
file

ALU

ALU

ALU

ALU

Register
file

Register
file

Register
file

Register
file

ALU

ALU

ALU

ALU

Register
file

Register
file

Register
file

Register
file

ALU

ALU

ALU

ALU

Register
file

Register
file

Register
file

Register
file

32 PEs
Result
Reduction

16 BBs

Output to ODP

Figure 2: The architecture of the GRAPE-DR chip. 1 Broadcast Block (BB) contains 32 Processing Elements(PEs). ALU denotes computing unit
which includes ﬂoating and ﬁxed point units. Register ﬁle denotes the local store which includes the local memory and the general purpose register
ﬁle. This ﬁgure shows a single broadcast unit. In actual chips, There are 16 broadcast blocks which have same structure as that of this ﬁgure.

DRAM

FPGA
CP

DRAM

SING

FPGA
CP

DRAM

SING

FPGA
CP

DRAM

SING

FPGA
CP

SING

x4

PCIe
Switch

x16 PCIe

Figure 3: (Left) The block diagram of the GRAPE-DR processor board. Each processor module consists of a GRAPE-DR processor(SING), a
control processor and an external memories(DDR2). Each control processor is connected to the neighbor control processors with the bidirectional
high speed serial link. Each control processor is also connected to the host computers with PCI-Express x4 Link through the PCI-Express switch
fabric. (Right) Photograph of GRAPE-DR processor board.

288MB(32MLW). There is a ring bus which connects control processors with the bandwidth of 1GB/s. This ring bus
is used to implement the reduction network over multiple chips. Figure 3 shows the block diagram of the GRAPE-DR
board and the picture of the GRAPE-DR processor board.
3. Matrix multiplication on the GRAPE-DR system
In this section, we describe the implementation of the matrix multiplication and its measured performance.
3.1. Implementation
In our current implementation, a GRAPE-DR card performs the operation C = A × B, where C, A, and B are
matrices of size M × N, M × K, and K × N. The subtraction (or addition) from the original matrix C is performed on
the host computer, in order to minimize the data transfer between the host and the GRAPE-DR card. The subtraction
on the host consumes the bandwidth of the main memory, but on recent machines the bandwidth of the main memory
is much more than that of the PCI-Express interface.

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

893

Figure 4: Parallel Matrix multiplication C = A × B on the four-chip GRAPE-DR processor card.

The GRAPE-DR chip is designed so that it can achieve the near-peak throughput for the matrix multiplication
with K = 512, and the four-chip GRAPE-DR card is designed to achieve near-peak performance for K = 2048. In
the following, we ﬁrst describe the operation in the case of K = 2048. Operations on diﬀerent values of K will be
described later.
Figure 4 shows what operation is performed on one and four chips. First, matrix B is stored to the on-board
memory. Since each GRAPE-DR chip has its own on-board memory, matrix B is divided into four parts, each with
512 rows, and the on-board memory of one GRAPE-DR chip stores one submatrix with 512 rows.
Then we send the ﬁrst 256 rows of matrix A to the on-chip local memory of each GRAPE-DR chip. Here, again,
matrix A is divided into four matrices, now each with 512 columns, and one GRAPE-DR chip stores a submatrix of
size 256 × 512.
The matrix with size 256 × 512 is divided into 32 × 16 = 512 pieces of 8 × 32 matrices, and each PE stores one of
these small matrices. Here, PEs in the same broadcast block have the submatrices of the same row.
At this point, we can start the main calculation loop. We repeat the following process until all columns of B are
processed.
1. The chip reads out two columns of B, cuts it to 16 pieces of matrices of size 32 × 2 and store them to each of 16
broadcast memories.
2. Each PE calculates the product of the 8 × 32 matrix in its local memory and the matrices of size 32 × 2 in the
broadcast memory. The calculated result is a matrix of size 8 × 2. We store it to the register ﬁle of a PE. The
data transfer from the broadcast memory to the registers can be done concurrently with the calculation itself.
There is no load/store penalty here.
3. The chip outputs the calculated result through the RRN output reduction network. The summation is taken for
the output from all BBs, and then for all chips, to obtain two column vectors of length 256. These vectors are
directly sent back to the host computer using DMA.
In our actual implementation, all of the above three steps run concurrently. Reading of B matrix for the next
iteration and output of the resulting C matrix of previous iteration are done at the same time as the calculation of the
current iteration. Thus, we can achieve near-peak performance for the inner kernel of the matrix multiplication.
For matrices with K larger than 2048, we simply divide them to multiple pieces with K = 2048, and calculate the
partial product and take summation on the host. For smaller K, we disable a part of broadcast blocks. For example, to
calculate the multiplication with K = 1024, we disable half of the broadcast blocks so that we store 256 × 256 matrix.
The calculation procedure is exactly the same, except that the performance is halved since we use only half of the
chip. If K is less than 512, we do not use GRAPE-DR and perform the DGEMM operation on the host computer. If
K is not an integer multiple of 512, we should choose the host or GRAPE-DR depending on which is the faster.

894

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

Figure 5: The performance of the dense matrix-matrix multiplication with matrix size M = N (top) and M = 2048(bottom). Here, M and N denotes
the row size of matrix A and the column size of the matrix B, respectively.

Other two dimensions, M and N, are processed in units of 256 and 64, respectively. Thus, if M is not an integer
multiple of 256 or N is not an integer multiple of 64, we just send additional zeros to GRAPE-DR and let it do some
unnecessary calculation. If M and N are both small, this can cause signiﬁcant loss of performance.
Unlike some of the implementations of DGEMM on GPUs, the store order of matrices do not have signiﬁcant
impact on the performance. Matrix A is accessed in unit of 2048×256 sub matrix on the host CPU. The communication
routine perform the transpose of matrix on the ﬂy, so that the transpose operation itself is done within the L2 cache.
Similar technique is used for matrices B and C.
3.2. Performance
In this section, we present the measured performance of the matrix multiplication on a single GRAPE-DR card.
The host computer has Core i7 920 CPU (overclocked to 3GHz) and 24GB of DDR-1333 memory.
Figure 5 shows the measured performance of single GRAPE-DR card for the matrix multiplication, as a function
of the matrix size. We show the results for two cases, one is M = N and K = 2048, and the other is N = K = 2048,
where M, N, and K denote the row size of matrix A, the column size of the matrix B, and the column size of matrix
A, respectively. Matrix multiplications of these two types appear in many applications, and the former generally
dominates the total calculation cost. Therefore, to achieve near-peak performance for M = N is essential. The
performance for N = K is less important, but if it is too low it can cause degradation of the overall performance.
For M = N = 51200, the measured performance reached 730 Gﬂops. This is 90% of the theoretical peak
performance of 819 Gﬂops. Thus, we have achieved both the very high actual performance, more than two times
faster than single precision performance of NVIDIA GTX280 and nearly 10 times faster than its double-precision
performance. In this case, roughly 5% of total time is spent for the transfer of matrices A and B, and another 5% is
overhead of starting the computing kernel and waiting for the DMA data transfer of matrix C.
For the case of N = K = 2048, the measured performance for large M is around 500 Gﬂops, which is around
2/3 of the speed for M = N. This is because the time to transfer matrix A becomes visible in this case. In principle,
we can hide the transfer of matrix A, but we decided not to do so because it made the operation of the host computer
unstable, in particular when the data transfer through inﬁniband network is also active.
4. Implementation and Performance of LU decomposition
Here we describe our implementation of LU decomposition which is optimized for a hybrid system such as
GRAPE-DR systems and GPGPU-based systems.

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

895

Table 1: The elapsed time in seconds of the LU factorization with N = 51200, NB = 2048

Machine
type
GRAPE-DR
Intel Core i7

panel
decompose
48.58
82.30

row
swap
2.78
2.80

solve U
panel
24.29
140.86

update
panel
130.26
2037.54

all
205.91
2263.50

In most of previous literatures, HPL[14] have been used with some modiﬁcations. We ﬁrst followed this approach,
but it turned out to be diﬃcult to achieve a good performance with this approach. The primary reason is the use of
column-major order for the main matrix. In HPL or almost any other programs for optimized LU decomposition, the
column-major order is used. This choice is necessary to make the pivot selection fast. Since the matrix elements of
the same column are in the consecutive addresses, pivot selection is faster with the column-major order than with the
row-major order. However, the exchange of rows is expensive, since the elements of the same row are stored in a large
stride, resulting in the ineﬃcient use of cache and TLBs. In order to reduce the cost of exchanging rows, we should
store the main matrix in the row-major order. However, if we do so, the cost of pivot search and elimination of narrow
blocks becomes very high, because in these operations all data in the same column are accessed.
One could make some compromise between the cost of exchanging rows and that of pivot search, for example by
storing the matrix using the Morton ordering[15]. We adopted an unconventional approach. We store the main matrix
in the row-major order. During the recursive panel decomposition, we apply the transpose when the width of the panel
becomes small. In order to make good use of the cache, it is desirable to keep the entire panel in the L3 cache. On the
other hand, it is necessary to make the width of the panel larger than the line size of the L1 cache. We typically use
K = 16 for the panel size at which the transpose is applied. This choice makes the size of transposed matrix slightly
larger than 6MB, for N = 51200. Thus, for most cases the panel can ﬁt to L3 of the Intel Core i7 processor we used.
Figure 6 shows the performance of the LU factorization as a function of the matrix size. The performance of the
LU factorization is 480 Gﬂops for N = 51200. The theoretical peak performance is 819 Gﬂops when the GRAPEDR processor is operated at 400 MHz. This performance is equivalent to 59% of the peak performance. Here, the
eﬃciency is limited by the size of the matrix. For the same value of N, the performance of LU decomposion is lower
than that of DGEMM, simply because in LU decomposition many operations on smaller matrices are performed. Table
1 shows the elapsed time in the each process of the blocked LU factorization on the N = 51200, NB = 2048. Here, the
time for the panel decomposition include both the operations on host and that on GRAPE-DR. The improvement of
speed is not very large, because most of the calculation costs go to matrix multiplication with very small K and pivot
search. The time for row exchange (row swap) is very low in both cases, because of the row-major order we selected.
To solve U panel, usually DTRSM routine is used. In order to make eﬃcient use of GRAPE-DR hardware, this part
is rewritten to apply the inverse of the diagonal panel to U. Thus, calculation cost of this part is dominated by that
of matrix multiplication. Finally, update matrix is the main matrix multiplication with K = 2048, M = N. Here, the
speedup factor is very large.
The overall speedup compared to CPU-only calculation is about a factor of 12, which is much larger than any
previously reported values with GPGPUs or other SIMD accelerators.
We have implemented a parallel LU decomposition, which has been used for the entries to Top 500 and Green
500 (June and November 2010). The details of the implementation will be described elsewhere. The measured
performance was 37.44 Tﬂops for an 81-node system, or 462Gﬂops/node, for the matrix size of 432k (48k per node).
5. Summary and Discussion
The maximum performance value of matrix multiplication using the GRAPE-DR accelerator card is 730 Gﬂops.
It is 90% of the theoretical peak performance of the GRAPE-DR accelerator card, and more than 18 times faster than
the speed of CPU-only calculation, which uses highly-tuned Goto BLAS with 4 cores.
We achieved 480 Gﬂops on the Linpack benchmark with the GRAPE-DR accelerator. We achieved the speedup by
a factor of 12 over the speed of CPU-only calculation, which uses very highly tuned program for LU decomposition.
These high performance numbers are achieved by careful co-design of the hardware and software. First, the
GRAPE-DR chip is designed so that it can achieve the theoretical peak for matrix multiplication. Second, the board

896

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

Figure 6: Performance of the LU factorization. Top (black) curve shows the performance of one GRAPE-DR card. Bottom (red) curve is that of
CPU-only calculation.

and the control processor implemented in the FPGA chips are designed so that they allow overlap between the data
transfer and calculation with low overhead. In addition, by implementing the control processor completely in hardwired logic, we minimized the overhead of startup of operations such as DMA and calculation on the board.
For Fermi-based GPUs, Nath et al.[12] reported the eﬃciency of 58% for DGEMM kernel (300Gﬂops) and 43%
for LU decomposition. Here, the hardware design limits the eﬃciency of DGEMM to around 60%.
Nakasato[13] reported the eﬃciency of 87% for the DGEMM calculation kernel on the AMD Cypress GPU.
Thus, the design of AMD GPUs are better suited to matrix operations than that of NVIDIA GPUs. The measured best
performance of DGEMM on a Cypress GPU is 470 Gﬂops.
The GRAPE-DR achieved the eﬃciency signiﬁcantly higher than that of latest GPUs for DGEMM operations. In
addition, even though it is fabricated with two-and-half generations older technology, it achieved signiﬁcantly better
single-card performance and performance per watt.
Acknowledgments
The authors thank Yoko Funato, Piet Hut, Toshikazu Ebisuzaki, and Makoto Taiji for discussions related to this
work. The GRAPE-DR chip design was done in collaboration with IBM Japan and Alchip company. We than Ken
Namura, Mitsuru Sugimoto, and many others from these two companies. This research is partially supported by
the Special Coordination Fund for Promoting Science and Technology (GRAPE-DR project), Ministry of Education,
Culture, Sports, Science and Technology, Japan.
References
[1] J. Makino, K. Hiraki, and M. Inaba, “Grape-dr: 2-pﬂops massively-parallel computer with 512-core, 512-gﬂops processor chips for scientiﬁc
computing,” in Proceedings of SC07. ACM, 2007, p. (Online).
[2] D. Sugimoto, Y. Chikada, J. Makino, T. Ito, T. Ebisuzaki, and M. Umemura, “A special-purpose computer for gravitational many-body
problems,” Nature, vol. 345, pp. 33–35, 1990.
[3] J. Makino and M. Taiji, Scientiﬁc Simulations with Special-Purpose Computers — The GRAPE Systems. Chichester: John Wiley and Sons,
1998.
[4] T. Narumi, R. Susukita, T. Ebisuzaki, G. McNiven, and B. Elmegreen, “Molecular dynamics machine: Special-purpose computer for molecular dynamics simulations,” Molecular Simulation, vol. 21, pp. 401–415, 1999.

Junichiro Makino et al. / Procedia Computer Science 4 (2011) 888–897

897

[5] D. E. Shaw, M. M. Deneroﬀ, J. S. K. Ron O. Dror, R. H. Larson, C. Y. John K. Salmon, B. Batson, K. J. Bowers, M. P. E. Jack C. Chao,
J. Gagliardo, C. R. H. J.P. Grossman, D. J. Ierardi, J. L. K. Istv´an Kolossv´ary, T. Layman, M. A. M. Christine McLeavey, R. Mueller, Y. S.
Edward C. Priest, J. Spengler, B. T. Michael Theobald, , and S. C. Wang, “Anton: A special-purpose machine for molecular dynamics
simulation,” in Proceedings of the 34th Annual International Symposium on Computer Architecture (ISCA ’07). ACM, 2007, pp. 1–12.
[6] J. J. Dongarra, J. Du Croz, S. Hammarling, and I. S. Duﬀ, “A set of level 3 basic linear algebra subprograms,” ACM Transactions on
Mathematical Software, vol. 16, pp. 1–17, 1990.
[7] F. G. Gustavson, “Recursion leads to automatic variable blocking for dense linear-algebra algorithms,” IBM Journal of Research and Development, vol. 41, pp. 7367–756, 1997.
[8] J. Dongarra. (2010, Nov.) Performance of various computers using standard linear equations software. performance.pdf. [Online]. Available:
http://www.netlib.org/benchmark/performance.pdf
[9] Y. Ohno, M. Taiji, A. Konagaya, and T. Ebisuzaki, “Mace: Matrix calculation engine,” in Proc. 6th World Multiconference on Systemics,
Cybernetics and Informatics (SCI 2002). IIIS, 2002, pp. 514–517.
[10] System 500 Matrix Coprocessor Overview, FPS Computing, Beaverton, OR, 1991.
[11] V. Volkov and J. W. Demmel, “Benchmarking gpus to tune dense linear algebra,” in Proceedings of SC08. ACM, 2008, p. (Online).
[12] R. Nath, S. Tomov, and J. Dongarra, “An improved magma gemm for fermi gpus,,” University of Tennessee, Tech. Rep. Computer Science
Technical Report, UT-CS-10-655, 2010.
[13] N. Nakasato, “A fast gemm implementation on a cypress gpu,” in Proc. 1st International Workshop on Performance Modeling, Benchmarking
and Simulation of High Performance Computing Systems. ACM, 2010, p. to be published.
[14] A. Petitet, R. C. Whaley, J. Dongarra, and A. Cleary. (2008, Sep.) Hpl - a portable implementation of the high-performance linpack
benchmark for distributed-memory computers. index.html. [Online]. Available: http://www.netlib.org/benchmark/hpl/
[15] P. Gottschling, D. S. Wise, and M. D. Adams, “Representation-transparent matrix algorithms with scalable performance,” in Proceedings of
ISC07. ACM, 2007, pp. 116–125.

