Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
This Procedia
space isComputer
reserved
for 108C
the Procedia
header, do not use it
Science
(2017) 1532–1541
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Implementation and Use of Coarse-grained Parallel
Implementation and Use of Coarse-grained Parallel
Branch-and-bound
in Everest
Distributed Environment
Implementation and
Use of Coarse-grained
Parallel
Branch-and-bound
in Everest
Distributed Environment
Vladimir Voloshinov,
Smirnov,
and Oleg Sukhoroslov
Branch-and-bound
inSergey
Everest
Distributed
Environment
Vladimir Voloshinov, Sergey Smirnov, and Oleg Sukhoroslov

Institute for Information Transmission Problems of the Russian Academy of Sciences,
Vladimir
Voloshinov,
Sergey
Smirnov,
and
OlegAcademy
Sukhoroslov
Moscow,
Russia
Institute
for Information
Transmission
Problems
of the
Russian
of Sciences,
vladimir.voloshinov@gmail.com,
sasmir@gmail.com,
sukhoroslov@iitp.ru
Moscow,
Russia
Institute for Information Transmission Problems of the Russian Academy of Sciences,
vladimir.voloshinov@gmail.com, sasmir@gmail.com, sukhoroslov@iitp.ru
Moscow, Russia
vladimir.voloshinov@gmail.com, sasmir@gmail.com, sukhoroslov@iitp.ru

Abstract
Abstract
This paper examines the coarse-grained approach to parallelization of the branch-and-bound
This
paper
examines
coarse-grained
approach
to parallelization
of the isbranch-and-bound
(B&B)
algorithm
in athe
distributed
computing
environment.
This approach
based on prelimAbstract
(B&B)
algorithm in aofdistributed
computing
environment. programming
This approach
is basedinto
on apreliminary
decomposition
a
feasible
domain
of
mixed-integer
problem
set of
This paper examines the coarse-grained approach to parallelization of the branch-and-bound
inary
decomposition
of a feasible
domain of
mixed-integer
programming
problem pool
into of
a set
of
subproblems.
The
produced
subproblems
are
solved
in
parallel
by
a
distributed
stan(B&B) algorithm in a distributed computing environment. This approach is based on prelimsubproblems.
The produced
subproblems
are found
solvedby
in individual
parallel bysolvers
a distributed
pool of standalone
B&B
solvers.
The
incumbent
values
are
intercepted
and
inary decomposition of a feasible domain of mixed-integer programming problem into a set of
dalone
B&B solvers.
The incumbent
values
found by of
individual
solvers
arePresented
intercepted
and
propagated
otherproduced
solvers
to
speed up
the
B&B search
tree.
subproblems.to The
subproblems
are traversal
solved in parallel
by a distributed
pool ofimplestanpropagated
to
other
solvers
to
speed
up
the
traversal
of
B&B
search
tree.
Presented
implementation
of solvers.
the approach
based on values
SCIP, afound
non-commercial
MINLP
and Everest,
a
dalone B&B
The is
incumbent
by individual
solverssolver,
are intercepted
and
mentation
of
the approach
is based
on SCIP,The
a non-commercial
MINLP
solver,
and
Everest,
a
web-based
distributed
computing
platform.
implementation
was
tested
on
several
mixedpropagated to other solvers to speed up the traversal of B&B search tree. Presented impleweb-based
distributed
computing
platform.
The
implementation
was
tested
on
several
mixedinteger
programming
problems
andon
a SCIP,
noticeable
speedup has been
achieved.
In the
paper,a
mentation
of the approach
is based
a non-commercial
MINLP
solver, and
Everest,
integer
programming
problems
andwith
a noticeable
speedup
has been
achieved.
In the paper,
results
of
a
number
of
experiments
the
Traveling
Salesman
Problem
are
presented.
web-based distributed computing platform. The implementation was tested on several mixedresults of a number of experiments with the Traveling Salesman Problem are presented.
integer
programming
problems
and decomposition,
a noticeable speedup
has been
achieved.
In thecomputpaper,
Keywords:
branch-and-bound,
coarse grained
parallelism,
distributed
©
2017 The
Authors.
Published
by domain
Elsevier
B.V.
Peer-review
responsibility
of the
scientific
committee
ofProblem,
the
International
Conference
on
Computational
Science
results
of under
abranch-and-bound,
number
of experiments
with
the Traveling
Salesman
Problem
aredistributed
presented.
Keywords:
domain
decomposition,
coarse
grained
parallelism,
computing,
mixed-integer
programming,
Traveling
Salesman
algebraic
modeling
languages
ing, mixed-integer programming, Traveling Salesman Problem, algebraic modeling languages
Keywords: branch-and-bound, domain decomposition, coarse grained parallelism, distributed computing, mixed-integer programming, Traveling Salesman Problem, algebraic modeling languages

1 Introduction
1 Introduction
Branch-and-bound (B&B) is one of the most widely used algorithms for solving mathematical
1
Introduction
Branch-and-bound
(B&B)
is mixed-integer
one of the most
widely used
algorithms
solving mathematical
programming problems
with
variables.
Let us
consider for
minimization
mathematprogramming
problems
withwith
mixed-integer
variables.
Let us consider minimization mathematical
programming
problem
variables.
Branch-and-bound
(B&B) is
onemixed-integer
of the most widely
used algorithms for solving mathematical
icalAny
programming
problem
with
mixed-integer
variables.
B&B
algorithm
can
be
briefly
viewed
as
a
pair
of consider
cooperating
processes.mathematThe first
programming problems with mixed-integer variables. Let us
minimization
Any
B&B
algorithm
can
be
briefly
viewed
as
a
pair
of
cooperating
processes.
Thesofirst
process
performs
a
search
of
feasible
solutions
and
keeps
the
best
objective
values
found
far
ical programming problem with mixed-integer variables.
process
a search ofwhich
feasible
solutions
and keeps
the best objective
values found
so far
(theAny
so performs
called
incumbents)
are
upper
bounds
of
unknown
optimal
value.
The
second
B&B algorithm can be briefly viewed as a pair of cooperating processes. The first
(the
so called
incumbents)
which are upper
of unknown
optimal
value.e.g.The
process
performs
of bounds
the
domain
into
subsets,
bysecond
fixing
process performs
arecursive
search ofdecomposition
feasible solutions
andfeasible
keeps the
best objective
values found
so
far
process
performs
recursive
decomposition
of the
feasible
domain
into
subsets,
e.g. by
fixing
values
of
some
of
integer
variables.
For
each
subset
a
lower
bound
on
the
objective
value
of
(the so called incumbents) which are upper bounds of unknown optimal value. The second
values
of some
of integer
variables.
For each subset
a lowera relaxed
bound on
the objective
value of
any
feasible
solution
is
computed
by
generating
and
solving
problem,
e.g.
continuous
process performs recursive decomposition of the feasible domain into subsets, e.g. by fixing
any
feasible
solution
is computedone.
by generating
andbound
solvingisa worse
relaxed problem,
e.g. the
continuous
linear
convex
If this
than
current
values or
of some
of programming
integer variables.
For
eachlower
subset
a lower bound(higher)
on the objective
value
of
linear
or convex
programming
one.from
If this
lower
bound
is worse
(higher) are
thanoften
the brought
current
incumbent,
the
subset
is
discarded
further
search.
These
two
processes
any feasible solution is computed by generating and solving a relaxed problem, e.g. continuous
incumbent, the subset is discarded from further search. These two processes are often brought
linear or convex programming one. If this lower bound is worse (higher) than the current
1
incumbent, the subset is discarded from further search. These two processes are often brought
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.207

1

	

Voloshinov
et al. / Procedia
Computer Science
108C (2017)
1532–1541
Implementation and Use ofVladimir
Coarse-grained
Parallel
Branch-and-bound
Voloshinov,
Smirnov
and Sukhoroslov

Figure 1: Fine-grained B&B parallelization.

Figure 2: Coarse-grained B&B parallelization.
together so that B&B looks like a kind of search tree traversal where every node of the tree
corresponds to some subset of the feasible domain.
For many years the B&B algorithm is considered as a famous challenge for parallel implementation [1]. The majority of known implementations for shared and/or distributed memory
systems follow the so called fine-grained approach presented on the Fig. 1. In this approach
the parallel search tree traversal is coordinated by a master process which delegates processing of subtrees to a number of slave processes. To achieve a good load balancing the master
performs dynamic redistribution of work among slaves which implies a two-way exchange of
subtrees among the processes. The master also keeps track of a global incumbent value. The
fine-grained approach has drawbacks such as the complexity of implementation and the need
for low level communication with B&B solvers which makes it hard to use this approach with
existing standalone solvers.
To avoid the mentioned drawbacks, an alternative, the so called coarse-grained approach,
was proposed for B&B parallelization [1, 2]. It is based on preliminary static decomposition of a
feasible domain and parallel execution of general-purpose B&B solvers on obtained subproblems
with exchange of found incumbents among the solvers. While running in parallel, possibly on
2

1533

1534	

Voloshinov
et al. / Procedia
Computer Science
108C (2017)
1532–1541
Implementation and Use ofVladimir
Coarse-grained
Parallel
Branch-and-bound
Voloshinov,
Smirnov
and Sukhoroslov

different computing resources, the solvers progressively improve the incumbent of the main
problem. It is so due to the fact that a feasible solution of any subproblem is a feasible one
for the main problem. It is well known that the more often the incumbent value is updated
and exchanged between the solvers, the more B&B search subtrees can be effectively pruned by
every solver. The described coarse-grained approach is presented schematically on the Fig. 2.
This approach is much easier to implement that the fine-grained one since it doesn’t involve a
complex work redistribution among the processes. The coarse-grained approach also supports
the reuse of existing standalone B&B solvers since it only requires the monitoring and passing
of incumbent values which is supported by many solvers through their APIs.
While the described approach has been already mentioned in the literature [2, 3], to the best
of our knowledge, only the GAMS Branch-and-Cut-and-Heuristic (BCH) facility [3] has been
used in practice. The BCH facility is tightly integrated with the GAMS interpreter, and there
are only two solvers that are aware of this facility and have appropriate API: GAMS/CPLEX
and GAMS/SBB [4].
In the previous work [5, 6] a coarse-grained B&B implementation using COIN CBC1 and
SCIP2 MILP solvers was presented. The communication between solvers was implemented via
a simple messaging service written in Erlang language. This paper presents a new implementation based on Everest [7], a web-based distributed computing platform. The use of Everest
helped to simplify and improve the implementation by relying on rich functionality provided by
the platform for execution of many-task applications across multiple computing resources and
publication of computational web services. For the purpose of B&B implementation, Everest
has been extended with a new mechanism for communication between application tasks, which
is used for exchange of incumbent values. The detailed description of the current coarse-grained
B&B implementation is presented in Section 2.
The strategy used for initial domain decomposition plays a crucial role in the presented
approach. The inappropriate decomposition may produce a set of unbalanced subproblems and
lead to a poor speedup when some subproblems are solved very quickly while the remaining ones
require the same time as the original problem. While the fine-grained approach tries to mitigate
this issue by dynamically redistributing the work between solvers, a similar strategy is generally
not possible within the coarse-grained approach. Therefore a researcher using this approach
in practice should carefully select a rule for domain decomposition, which may require some
experimentation in order to achieve a good speedup. It is reasonable that any specific class
of discrete problems should be individually examined to produce an efficient decomposition.
A heuristic rule for the Traveling Salesman Problem (TSP) is presented in Section 3. In the
previous work [5, 6] a sensible speedup has been achieved for the task scheduling problems by
using another heuristic rule.

2

Implementation of Coarse-grained Parallel B&B

2.1

Everest Platform

Everest [7] is a web-based distributed computing platform. It provides users with tools to
quickly publish and share computing applications as web services. The platform also manages
execution of applications on external computing resources attached by users. In contrast to
traditional distributed computing platforms, Everest implements the Platform as a Service
(PaaS) model by providing its functionality via remote web and programming interfaces. A
1 https://projects.coin-or.org/Cbc
2 http://scip.zib.de

3

	

Implementation and Use ofVladimir
Coarse-grained
Parallel
Branch-and-bound
Voloshinov,
Smirnov
and Sukhoroslov
Voloshinov
et al. / Procedia
Computer Science
108C (2017)
1532–1541

single instance of the platform can be accessed by many users in order to create, run and share
applications with each other. The platform is available online to all interested users [8].
Everest supports development and execution of computing applications following a common
model. An application has a number of inputs that constitute a valid request to the application
and a number of outputs that constitute a result of computation corresponding to some request.
Upon each request Everest creates a new job consisting of one or more computational tasks
generated by the application according to the job inputs. The tasks are executed by the
platform on computing resources specified by a user. The dependencies between tasks are
currently managed internally by applications. The results of completed tasks are passed back
to the application and are used to produce job outputs or new tasks if needed. The job is
completed when there are no incomplete tasks are left.
The described application model is generic enough to support a wide range of computing
applications, including many-task applications such as parallel B&B. Currently there are two
approaches for implementing many-task applications on Everest. The first approach relies on
the low-level platform API to dynamically add new tasks or submit new jobs from a running
application. The second approach relies on the generic application implementation for cases
where all tasks can be defined statically before running the job. This approach was used
previously to implement a generic service for running parameter sweep experiments [9]. The
second approach has been selected for the implementation of a coarse-grained B&B since it
allowed to simplify development by reusing the existing implementation. However, the first
approach may become necessary in the future when implementing more sophisticated algorithms
with dynamically generated tasks.

2.2

Communication Mechanism

The specific requirement of parallel B&B implementation is the ability to exchange incumbent
values between tasks during their execution. Initially Everest didn’t provide any mechanisms
for communication between application tasks. While it is possible to implement such functionality by using a custom messaging service running outside Everest, this was considered as an
opportunity to extend Everest by implementing the required mechanism inside the platform.
The mechanism described below is developed in a generic way in order to not only simplify
the implementation of a coarse-grained B&B, but to support other applications requiring some
form of coordination between tasks.
The implemented communication mechanism (see Figure 3) is based on the notion of shared
variables similar to tuple spaces and blackboard models. It allows application tasks to write
and read values of arbitrary named variables by exchanging messages with Everest. The values
of variables are stored in the platform and represent an analogue of shared memory accessible
by all tasks within a single job. When the value of a variable is updated, the new value is
automatically sent by Everest to all tasks. Thus the implemented mechanism can also be used
as a lightweight publish-subscribe service.
Besides the basic VAR GET and VAR SET operations for atomically reading and writing a
variable value, two special operations are introduced in order to simplify exchange of incumbent
values between tasks of a coarse-grained B&B. Indeed, maintaining the best value found so far
by all tasks in a shared variable using only basic operations is hard. In particular, in the
presence of concurrent updates the best value could be overwritten by a worse one. The special
VAR SET MI operation atomically updates the numeric variable only if the specified value is
greater than the current one, while the VAR SET MD operation requires that the new value
should be less than a current one to succeed. These operations guarantee monotonic increase
4

1535

1536	

Implementation and Use ofVladimir
Coarse-grained
Parallel
Branch-and-bound
Voloshinov,
Smirnov
and Sukhoroslov
Voloshinov
et al. / Procedia
Computer Science
108C (2017)
1532–1541

Everest
shared variable

TASK_MESSAGE
VAR_SET_MD
record 0.123

TASK_MESSAGE
VAR_VALUE
record 0.123

record
0.123

WebSocket

Agent

Agent

Agent

Socket
Task

Task

Resource 1

Task

Task

Resource 2

Task

Task

Task

Task

Resource 3

Figure 3: Message exchange and shared variables in Everest.
or decrease of a variable value in the presence of concurrent conflicting updates.
The message exchange between tasks and Everest is implemented via the Everest agent,
which runs on each computing resource and acts as a mediator between the resource and the
platform. Upon launching a task the agent passes to it a socket endpoint that the task can
connect to in order to send and receive messages via simple protocol. The agent performs
forwarding of messages between the task and Everest in both directions. The communication
between the agent and the platform is implemented via WebSocket protocol.

2.3

Integration with SCIP Solver

SCIP (Solving Constraint Integer Programs) [10] has been chosen as a standalone B&B solver
in the presented implementation of coarse-grained parallel B&B. SCIP is one of the fastest
non-commercial solvers for linear and non-linear3 mathematical programming (MP) problems
with integer variables [11]. SCIP represents a flexible and extensible framework written in
C language. User can run the solver as a console application scip that can be used either
interactively via rich text-based user interface or in a batch mode. SCIP supports a number
of formats for MP problem description (ZIMPL, MPS, CNF, etc.). Special console application
scipampl is compatible with the AMPL modelling Language [12].
To integrate SCIP with the presented implementation, a special adapter has been developed
to perform the following functions: 1) it catches events when the solver finds a new incumbent
and sends this value to other adapters; 2) it receives incumbent values from other adapters and
injects them into a running solver process. For both purposes the SCIP C API is used.
To set a new incumbent value the SCIPsetObjlimit function is used. It must be called
from callback event handlers because SCIP application is not thread-safe. So it is better to
set callbacks for all SCIP events. This allows to minimize the delay between incumbent value
acquisition from Everest environment and updating it in the running solver.
When the solver finds a new incumbent it rises the SCIP EVENTTYPE BESTSOLFOUND
event. In the event handler one can get the appropriate feasible solution via the SCIPeventGet3 Stable

release allows non-convex bilinear objective function and constraints

5

	

Implementation and Use ofVladimir
Coarse-grained
Parallel
Branch-and-bound
Voloshinov,
Smirnov
and Sukhoroslov
Voloshinov
et al. / Procedia
Computer Science
108C (2017)
1532–1541

Figure 4: Overall architecture of coarse-grained parallel B&B implementation.
Sol function call and get the objective function value, i.e. incumbent itself, via the SCIPgetSolOrigObj function. It is important to use these two functions because the solver may perform
some internal transformation of the subproblem, e.g. after presolving routine, and current internal objective value might become inconsistent with solvers which are solving other subproblems.

2.4

Overall Architecture

Finally consider the overall architecture of the implementation of coarse-grained parallel B&B
based on SCIP, Everest and communication mechanism described above. The implementation
consists of the following components depicted on Fig. 4:
• batch solve.py script which is used for submission of subproblems obtained after domain
decomposition;
• Coarse-grained B&B application which manages execution of subproblems in Everest;
• task.py script which performs execution of a single task with SCIP solver;
• scip-port adapter for communication with SCIP described in Section 2.3.
After preparing a number of subproblems via some decomposition rule, a user starts solving
by running the batch solve.py script. The script creates an archive with all required input
data and submits request to the Coarse-grained B&B application deployed in Everest. This
application is connected to a set of computing resources with SCIP solver and its adapter.
Upon receiving a new request the application creates a job consisting of a number of tasks
each corresponding to solving of one of subproblems. The tasks are scheduled to available
computing resources by Everest. Each task contains the task.py script that is started by Everest
agent on the resource. This script starts the SCIP adapter and holds two data exchange
channels: one with the adapter via a POSIX pipe, and another with the agent via a TCP
socket. Data exchange with the agent is required for broadcasting of incumbent values among
solvers within a given job.
Once a solver found a new incumbent solution, the adapter is notified via a callback and
passes the incumbent value to the task.py script over a pipe channel. The script sends a
message with the VAR SET MD operation to the agent which forwards it to Everest. This
message corresponds to the conditional update of the shared variable used for storing the global
incumbent value as described in Section 2.2. If the new value is less than the current one, the
variable is updated and the incumbent value is broadcasted to all tasks which pass it to their
solver processes.
6

1537

1538	

Implementation and Use ofVladimir
Coarse-grained
Parallel
Branch-and-bound
Voloshinov,
Smirnov
and Sukhoroslov
Voloshinov
et al. / Procedia
Computer Science
108C (2017)
1532–1541

3
3.1

Case Study: Traveling Salesman Problem
Heuristic Decomposition of TSP

Let’s briefly remind the formulation of TSP for a complete graph with the set of vertices V =1:N
(enumerated from 1 to N ). Let any pair of vertices (i, j) corresponds to an edge of length dij .
Consider a symmetric TSP, where dij =dji . TSP is to find a Hamiltonian cycle with a minimal
sum of edge lengths. The following well known approach can be used to transform TSP to a
.
MILP. Let’s introduce the set E = {(i, j)∈V ×V : i>j} (undirected edges) and boolean variables
xij for every (i, j)∈E, where xij =1 if and only if the optimal cycle contains this edge. Then
.
consider the set A= {(i, j)∈V ×V : i=j} (directed edges) and auxiliary continuous variables fij ,
(i, j)∈A. They have physical meaning of a flow, which is coming from the first vertex of a
Hamiltonian cycle and is passing through all edges in the cycle decreasing by 1 after every
vertex. Now TSP can be formulated in equations (1).


dij xij → min
s.t. :
xij ,fij


xij +
xji = 2, i∈V ;

(i,j)∈E

j∈V ,i>j

fij ≤




j:(i,j)∈A



j:(i,j)∈A

j∈V,i<j

 

xij , i < j
·
, (i, j) ∈ A;
xji , i > j
N −1, i = 1
−
fji ≤
, i∈V ;
−1,
i>1
j:(i,j)∈A

N,
N −1,
fij

i=1
i>1


(1)

fij ≥ 1, i∈V ; xij ={0, 1}.

As an example, let’s consider a subclass of TSP that can be treated as a search of a shortest
path over points Pi with coordinates (Xi , Yi ) placed on a 2D plane. The value of dij is a
distance between Pi and Pj . In the experiments described below the values of (Xi , Yj ) have
been randomly generated by an AMPL script. This script was also used to visualize optimal
solutions as images (see examples at http://distcomp.ru/~vladimirv/tsp/).
The following heuristic rule has been used to decompose the initial problem into a set of
subproblems to be solved by the coarse-grained B&B. The variables xij are sorted in order
of increasing length dij . Then the values of the first K variables (first xij corresponding to
“smallest” dij ) are fixed to 0 or 1 in (1) in order to obtain 2K subproblems of smaller size. This
heuristic rule has been deduced from the “naive” observation that the smaller the value of dij
the less contribution of summand dij xij to the objective value of (1). It is worth to mention
that a random decomposition used initially did not give any speed up.

3.2

Computational Experiments

The presented coarse-grained B&B implementation has been used to solve the Traveling Salesman Problem in a testbed consisting of three servers running 16 solvers in total. The experiments were performed on several randomly generated TSP instances with a number of cities
N ranging from 80 to 110. The obtained results are presented in Table 1. The T(SCIP) in
this table refers to the baseline time taken to solve the problem with SCIP 3.2.1 without any
parallelization, while the T(dSCIP) refers to the time taken by the distributed run. In the
former case the subproblems were run on the fastest of the three servers. In the latter case the
7

	

Vladimir Voloshinov et al. / Procedia Computer Science 108C (2017) 1532–1541
Implementation and Use of Coarse-grained Parallel Branch-and-bound

1539

Voloshinov, Smirnov and Sukhoroslov

Table 1: Experimental run times for several TSP instances and numbers of subproblems.
N

K

Number of subproblems

T(SCIP), min.

T(dSCIP), min.

80
90
100
110

4
5
6
7

16
32
64
128

21
4
7.7
>2600

2.2
2.2
3.4
117

Table 2: The solution time in seconds as a function of the number
Problem\K 0 (1)
1 (2)
2 (4)
3 (8)
4 (16)
N = 70
1
28
31
31
36
27
2
134
121
106
186
141
3
122
101
46
52
36
4
296
116
71
47
101
5
17
31
21
26
31
6
256
291
21
251
206
Sum:
852
691
296
598
542
N = 80
1
336
246
636
391
181
2
89
36
136
32
92
3
465
91
156
121
146
4
2441
2157
461
421
721
5
226
291
171
171
321
6
391
1866
4146
571
867
Sum:
3948
4687
5706
1707
2328
N = 90
1
73
251
376
206
162
2
3247
2306
2537
2537
2338
3
160
281
446
346
67
4
1169
831
1597
766
457
5
319
201
791
421
1163
6
922
1776
6383
906
7041
Sum:
5890
5646
12130
5182
11228

of fixed variables
5 (32)
6 (64)
42
192
47
52
43
47
423

52
216
87
77
57
322
811

261
47
222
908
162
962
2562

142
73
307
277
227
2708
3734

248
5645
202
482
1908
18771
27256

528
2404
79
1453
693
10679
15836

subproblems were generated by means of AMPL by fixing the variables corresponding to the K
shortest edges as described in Section 3.1. A noticeable speedup can be observed in this table,
so more experiments were conducted later.
Another series of experiments was done to investigate the relationship between the number
of generated subproblems (K value) and the solution time. These experiments were run on an
extended testbed consisted of four hosts running 26 solvers in total. For a number of values
of N six random TSP instances were generated. Each problem was solved using six different
decompositions corresponding to values of K ranging from 1 to 6. The measured solution times
are presented in Table 2. The rows in this table correspond to the problem instances, while
the columns correspond to different decompositions including the sequential case (K = 0). The
8

Vladimir Voloshinov et al. / Procedia Computer Science 108C (2017) 1532–1541

1540	

Implementation and Use of Coarse-grained Parallel Branch-and-bound

Voloshinov, Smirnov and Sukhoroslov

Figure 5: Distribution of subproblems among solver instances.
last row for each N contains the sums of solution times for every value of K.
Note that the relationship between the solution time and the number of subproblems is not
obvious. However, judging by the total solution time, the maximum speedup is reached when
two or three variables are fixed. It is worth to mention that for K <= 4 (16 subproblems or
less) all subproblems can be solved simultaneously on the used computing testbed and there
are no tasks waiting. Presumably, this mode of operation should be the most efficient in terms
of solution time, because it provides the most intensive generation of incumbents. Also there
is usually a subproblem which takes much longer to solve than other subproblems. So starting
this subproblem as early as possible makes the whole solution time smaller. It would also be
natural to assume that the more resources are allocated, the faster the problem can be solved.
However it is not always true: the solution time with K = 4 is often worse than with K = 3.
Fig. 5 depicts the distribution of 32 subproblems among 26 solver instances during one of
the experiments (problem 6 for N = 90 and K = 5). Horizontal tracks correspond to individual
solvers running on the four hosts of the testbed. The vertical red lines mark the points in time
when a new incumbent was found. As can be seen from the figure, even after the optimal solution
was found (the last incumbent) the majority of run time was spent on proving its optimality.
It can also be seen that the computational costs of generated subproblems significantly vary
which has led to a poor resource utilization. We plan to address this issue in the future by
dynamically splitting currently running subproblems to utilize idle resources.

4

Conclusion

The paper presented a distributed implementation of the branch-and-bound algorithm employing a coarse-grained parallelism and based on a preliminary decomposition of a feasible domain
of MINLP by some heuristic rules. The subproblems produced by the decomposition are distributed across a pool of standalone B&B solvers running in parallel. The incumbent values
found by individual solvers are intercepted and propagated to other solvers in order to speed
up the traversal of B&B search tree. The presented implementation is based on SCIP, one
of the fastest non-commercial MIP and MINLP solvers, and Everest, a web-based distributed
computing platform additionally extended to support the exchange of incumbent values. The
implementation was tested on several instances of the Travelling Salesman Problem and demon9

	

Implementation and Use of Vladimir
Coarse-grained
Parallel
Branch-and-bound
Voloshinov,
Smirnov
and Sukhoroslov
Voloshinov
et al. / Procedia
Computer Science
108C (2017)
1532–1541

strated a noticeable speedup in comparison to a standalone single-threaded B&B solver. The
source code of the presented implementation is available on GitHub4 .
Future work will ivestigate the use of presented approach and heuristic domain decomposition for non-linear discrete problems such as Quadratic Assignment Problem (QAP) [13]. While
SCIP capabilities are enough for solving QAP, for more general non-linearity we plan to integrate COIN-OR Bonmin5 MINLP solver into the presented system. We also plan to improve
the load balancing by implementing an additional dynamic decomposition of subproblems being
solved into smaller subproblems that are sent to idle solvers.

Acknowledgments
This work is supported by the Russian Science Foundation (project No. 16-11-10352).

References
[1] T.G. Crainic, B. Le Cun, and C. Roucairol. Parallel branch-and-bound algorithms. Parallel
combinatorial optimization, pages 1–28, 2006.
[2] L.D. Popov. Experience of multilevel parallelizing of the branch and bound method in discrete
optimization problems. Automation and Remote Control, 68(5):901–911, 2007.
[3] Michael R. Bussieck, Michael C. Ferris, and Alexander Meeraus. Grid-enabled optimization with
gams. INFORMS Journal on Computing, 21(3):349–362, 2009.
[4] Michael R. Bussieck and Stefan Vigerske. MINLP solver software. Wiley encyclopedia of operations
research and management science, 2010.
[5] S.A. Smirnov and V.V. Voloshinov. Effective usage of discrete optimization solvers in cloud infrastructure on the base of heuristic decomposition of initial problem via ampl modelling system
(in russian). Program Systems: Theory and Applications, 7(1):29–46, 2016.
[6] S.A. Smirnov and V.V. Voloshinov. Pre-decomposition of discrete optimization problems to speed
up the branch and bound method in a distributed computing environment (in russian). Computer
Research and Modeling, 7(3):719–725, 2015.
[7] O. Sukhoroslov, S. Volkov, and A. Afanasiev. A web-based platform for publication and distributed
execution of computing applications. In Parallel and Distributed Computing (ISPDC), 2015 14th
International Symposium on, pages 175–184, June 2015.
[8] Everest. [online]. http://everest.distcomp.org/.
[9] Sergey Volkov and Oleg Sukhoroslov. A generic web service for running parameter sweep experiments in distributed computing environment. Procedia Computer Science, 66:477–486, 2015.
[10] Gerald Gamrath. The SCIP optimization suite 3.2. ZIB Report, pages 15–60, 2016.
[11] Hans Mittelmann. Mixed integer linear programming benchmark, 2016.
[12] R. Fourer. AMPL: A Modeling Language for Mathematical Programming, second edition. Duxbury
Press/Brooks/Cole Publishing Company.
[13] Eliane Maria Loiola, Nair Maria Maia de Abreu, Paulo Oswaldo Boaventura-Netto, Peter Hahn,
and Tania Querido. A survey for the quadratic assignment problem. European Journal of Operational Research, 176(2):657 – 690, 2007.

4 https://github.com/distcomp/ddbnb
5 https://projects.coin-or.org/Bonmin

10

1541

