Procedia Computer Science
Volume 51, 2015, Pages 170–179
ICCS 2015 International Conference On Computational Science

Toward a multi-level parallel framework
on GPU cluster with PetSC-CUDA
for PDE-based Optical Flow computation
S. Cuomo1 , A. Galletti2 , G. Giunta2 , and L. Marcellino2
1

University of Naples Federico II, Department of Mathematics and Applications, Naples, Italy
salvatore.cuomo@unina.it
2
University of Naples Parthenope, Department of Science and Technology, Naples, Italy
ardelio.galletti, giulio.giunta, livia.marcellino@uniparthenope.it

Abstract
In this work we present a multi-level parallel framework for the Optical Flow computation on
a GPUs cluster, equipped with a scientiﬁc computing middleware (the PetSc library). Starting
from a ﬂow-driven isotropic method, which models the optical ﬂow problem through a parabolic
partial diﬀerential equation (PDE), we have designed a parallel algorithm and its software implementation that is suitable for heterogeneous computing environments (multiprocessor, single
GPU and cluster of GPUs). The proposed software has been tested on real SAR images sequences. Numerical experiments highlight the performance of the proposed software framework,
which can reach a gain of about 95% with respect to the sequential implementation.
Keywords: optical ﬂow, numerical solution of PDEs, scientiﬁc computing libraries, GP-GPU, mulitilevel
parallel computing.

1

Introduction

A large number of processes in computer vision is based on the image motion measurement
known as optical ﬂow computation [1]. It has been widely used in many applications such
as medical imaging, video coding, tracking problems, and so on. Generally, optical ﬂow estimation techniques are classiﬁed into four main categories: diﬀerential, matching, energy-based,
and phase-based methods. In this paper, we deal with a diﬀerential method, namely a version of
Horn and Schunck method [12] proposed in [19]. Because of the well known high computational
complexity required for solving the optical ﬂow problem, several approaches for eﬃcient parallel
software implementations have been proposed. Among them, multicore-cluster approaches [9],
parallel pipeline procedures [5], domain decomposition strategies [14]. Recently, on the track of
current developments of Graphics Processing Units (GPUs) for High Performance Computing
(HPC) [6, 7, 10], motion estimation has been accelerated, with good results, in [15, 17]. The
170

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.220

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

main contribution of this paper is the development of a parallel software for computing the
optical ﬂow speciﬁcally tailored for a cluster of multiprocessors composed of many-core CPUs
and GPUs. In order to exploit the computational power of such architecture, our software is
structured as a multi-level framework which implements a ﬁne-to-coarse parallelization strategy, based on a standard ﬁne-grained concurrency at level of the ﬂoating-point operations, and
a coarse-grained concurrency through problem decomposition. We use a ﬁnite diﬀerences approach to discretize the diﬀerential problem and provide a suitable matrix representation of the
resulting discrete problem. The linear systems of equations is solved by means of the preconditioned Krylov iterative method GMRES [16]. The latter compute intensive numerical task
is carried out using the PetSc library (Portable, Extensible Toolkit for Scientiﬁc Computation)
[21]. PetSc consists of routines for managing vectors, sparse and dense matrices, linear and
nonlinear system solvers, and even special classes for operations on GPUs [22]. As case study,
we considered the analysis of a SAR image sequence of moving clouds, available at [23]. Our
experiments show an improvement in performance up to 95% with respect to the sequential
software.
The paper is organized as follows. In section 2 we describe the parabolic PDE that models the
problem. In section 3, we present the discretization of the space-time and scale variables, and
the numerical formulation of the problem. In section 4, we brieﬂy discuss the algorithm for the
basic computational task of the numerical problem. In section 5, we outline the main features
of our software and the underlying parallel strategies. In section 6, we show the results of some
experiments on real sequences of images and highlight the performance gain that our software
can achieve. Final conclusions are reported in section 7.

2

Mathematical model

An exhaustive overwiev of diﬀerential methods for the computation of the optical ﬂow is in [18].
To mathematically deﬁne the approach, let us give the following deﬁnition:
Let J ⊂
be a bounded interval. Given t ∈ J , let P (t) = (x(t), y(t)) ∈ Ω , where Ω =
Ωx × Ωy ⊂ 2 is the image plane. The image sequence brightness is the piecewise diﬀerentiable
function:
I : t, P (t) ∈ J × Ω → I(t) ≡ I(t, P (t)) ∈ [0, L]
where L is the intensity level depth.
According to the latter deﬁnition, the motion trajectory of each point P (t) = (x(t), y(t)) ∈ Ω
is deﬁned as a sequence of positions of P (t), as t varies in J.
The optical ﬂow ω(t) ≡ ω(t, P (t)) is the velocity vector whose components are
u(t) =

d
d
x(t), v(t) = y(t).
dt
dt

In other words, the optical ﬂow ω(t) = (u(t), v(t)) deﬁnes a motion ﬁeld.
In a diﬀerential approach setting, for each time t ∈ J and for each point P (t), the optical
ﬂow ω(t) can be obtained as the asymptotic value (θ → ∞) of the solution ω θ ≡ ω(θ; t, P (t)) =
(uθ , v θ )) of the system of two non linear parabolic (diﬀusion-reaction) PDEs, with zero initial
and Dirichlet boundary conditions [19]
⎧ ∂ θ
⎨ ∂θ u = α∇ · g ||∇uθ ||2 + ||∇v θ ||2 ∇uθ − 2 < ∇s I, ω θ > +It Ix
(1)
⎩ ∂ θ
θ 2
θ 2
θ
θ
∇v
−
2
<
∇
I
v
=
α∇
·
g
||∇u
||
+
||∇v
||
I,
ω
>
+I
s
t
y
∂θ
171

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

where: α is the regularization parameter, ∇· is the divergence operator, <, > is the dot scalar
product, ||∇uθ ||2 and ||∇v θ ||2 are the Euclidean norms of the spatial gradients of uθ and v θ ,
the diﬀusivity function g(s) = 1/ 1 + s2 /λ2 is the edge-indicator function (or smoothness
constraint), ∇s I is the spatial gradient of the brightness function I, Ix and Iy are the spatial
derivatives with respect to x and y, and It is the time derivative of I. Finally, θ is the scale
parameter, which represents an artiﬁcial evolution variable, generally introduced to regularize
diﬀution-reaction PDEs [13].
We remark that t is the time variable that speciﬁes a frame in the image sequence, while
θ is an evolution variable which describes an artiﬁcial diﬀusion-reaction process that has the
value of the optical ﬂow ω(t) = (u(t), v(t)) as steady state, i.e. limθ→∞ ω θ = ω(t).
Denoting by g θ the value of the diﬀusity-function at a scale value θ, i.e. g θ =
g ||∇uθ ||2 + ||∇v θ ||2 , then after expanding the terms ∇ · (g θ ∇uθ ), ∇ · (g θ ∇v θ ), system (1)
can be written as
⎧ ∂ θ
⎨ ∂θ u = αg θ ∇2 uθ − 2 < ∇s I, ω θ > +It Ix
(2)
⎩ ∂ θ
θ 2 θ
θ
v
=
αg
∇
v
−
2
<
∇
I,
ω
>
+I
I
s
t
y
∂θ
The parabolic PDEs in (2) deﬁne the problem that we will deal with in the next sections.

3

Numerical approach

According to [3], we use a ﬁrst order forward ﬁnite diﬀerences scheme for the discretization
of the ﬁrst space-time derivatives, and a second order central ﬁnite diﬀerences scheme for the
discretization of the second space derivative.
We have developed the following matrix formulation of the discretization of the PDE system in
(2) on the whole N × M frame
⎧ θ
⎨ Uθ = α Gθ · H(x,y)2 U θ − 2 Ix · U θ + Iy · V θ + It · Ix
(3)
⎩ θ
Vθ = α Gθ · H(x,y)2 V θ − 2 Ix · U θ + Iy · V θ + It · Iy
where:
• · is the elementwise matrix multiplication;
• Uθθ and Vθθ are the column vectors of length N × M containing the ﬁrst order partial
derivatives of the optical ﬂow components with respect to the evolution parameter θ
(arranged in row-major order);
• U θ and V θ are the column vectors of length N × M containing the modulus of the
horizontal and vertical optical ﬂow components (arranged in row-major order) at the
scale value θ, respectively;
• Ix , Iy , It are the column vectors of length N × M containing the discretized space-time
partial derivatives of the image matrix I (arranged in row-major order);
• H(x,y)2 is a penta-diagonal block matrix of size (N ×M )×(N ×M ), with tridiagonal blocks
along the main diagonal and diagonal blocks along the upper and lower sub-diagonals,
arising from the discretization of the Laplacian.
172

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

• Gθ is the matrix of size (N × M ) × (N × M ) containing in each row the values g θ of the
diﬀusivity function, for every pixel of the image matrix I, at the scale value θ.
System (3) is a semi-discretization of (2), i. e. the PDE problem is discretized only with respect
to the spatial variables, while the scale variable is still continuous.
By using a forward ﬁnite diﬀerences scheme to discretize the scale derivative, three iterative
schemes can be obtained: explicit, semi-implicit and fully-implicit. An analysis of the convergenge and accuracy order of those schemes in our setting is provided in [8]. Here, we use a
semi-implicit scheme, since it is invariant to many transformations, such as grey level shift,
translation, rotation, etc., and enjoys consistency, convergency and stability properties [4, 20].
Now, we consider a uniform grid of values of the scale variable θ, with step-size hθ . In the sequel,
we shall still denote by θ a generic discrete value of the scale grid. Therefore, at each discrete
scale-step θ, a new approximation of the optical ﬂow components (U θ , V θ ) can be obtained by
means of the previous approximation (U θ−hθ , V θ−hθ ) and the following two linear systems of
equations
⎧
⎨ Id − hθ H θ−hθ U θ = U θ−hθ − 2 Ix · U θ−hθ + Iy · V θ−hθ + It · Ix
(4)
⎩
Id − hθ H θ−hθ V θ = V θ−hθ − 2 Ix · U θ−hθ + Iy · V θ−hθ + It · Iy
where Id is the identity matrix and H θ−hθ = α Gθ−hθ · H(x,y)2 .
In other words, at every scale-step two linear systems of order N × M must be solved: in
the ﬁrst one, the unknown is U θ , i.e. the vector of length N × M containing the horizontal
components of optical ﬂow (arranged in row-major order); in the second one, the unknown is
V θ , i.e. the vector of length N ×M containing the vertical components of optical ﬂow (arranged
in row-major order).
Notice that the two linear systems in (4) have the same coeﬃcient matrix Aθ−hθ = Id −
hθ H θ−hθ , whose structure is similar to the structure of the matrix H θ (sparse penta-diagonal
block matrix), while the right-hand terms are the vectors
θ
bθ−h
= U θ−hθ − 2 Ix · U θ−hθ + Iy · V θ−hθ + It · Ix
x

(5)
θ
bθ−h
= V θ−hθ − 2 Ix · U θ−hθ + Iy · V θ−hθ + It · Iy .
y

4

Computational kernels

We brieﬂy outline the numerical algorithm for solving the PDE system in (2). At each scale-step
θ a new approximation of the optical ﬂow is obtained by solving two linear systems with the
same large, sparse, structured coeﬃcient matrix. More precisely, at each scale-step, the matrix
and the right-hand vectors are ﬁrst updated, using the values computed at the previous step,
and then a new approximation (U θ , V θ ) is computed, as shown in Algorithm 1.
Setting a threshold value τθ for the required accuracy and a maximum number of iterations nθ ,
the iterative process ends up when the stopping criterion in stage 2 of Algorithm 1 is satisﬁed.
This gives an approximation of the optical ﬂow ﬁeld at each pixel of the frame, at a certain
time t. The linear systems in (4) are solved, at stages 6, 7 of Algorithm 1, by means of the
GMRES iterative method. GMRES is a Krylov subspace method for non-symmetric linear
systems, which is very eﬀective when the matrix is sparse and large [16]. In order to accelerate
the convergence, we use the Jacobi preconditioner [16].
Notice that the resulting algorithm for solving the optical ﬂow problem is based on two iterative nested schemes. The outer iteration allows the evolution of the diﬀusion-reaction operator
173

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

Algorithm 1 Iterative method for the solution of the ﬂow-driver diﬀusion equation
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:

initial condition: (U 0 , V 0 ) = (0, 0);
while (D ≥ τθ .or. θ ≤ hθ nθ ) do
computation of Gθ−hθ and H θ−hθ ;
estimation of Aθ−hθ := [Id − hθ H θ−hθ ];
θ
θ
as in (5);
estimation of bθ−h
bθ−h
y
x
solution of the ﬁrst linear system:
θ
;
Aθ−hθ U θ = bθ−h
x
solution of the second linear system:
θ
;
Aθ−hθ V θ = bθ−h
y
θ
θ
D = ||(U , V ) − (U θ−nθ , V θ−hθ )||;
θ := θ + hθ ;
end while

associated to the method, with respect to the scale parameter θ; at each outer iteration, a new
pair of linear systems of equation is built and solved. The internal scheme computes the solution of such systems and consists of the iterations of the Jacobi-preconditioned GMRES method.
Remark. Let T be the number of frames of an images sequence and N × M be the size of
a frame. The computational cost of the algorithm, using the CSR (Compressed Sparse Row)
format to store the system sparse matrix Aθ−hθ , is
O((T − 1)nθ · nK · 5(N × M )),
where nθ is the number of iterations of the outer scheme and nK is the number of iterations of
the internal scheme.

5

The parallel framework

The algorithm described in the previous section is very expensive when T , N and M are large.
Therefore, a standard implementation often turns out to be unsatisfactory, especially for realtime computations. In order to obtain high performance, we need to exploit the hierarchical
parallelism of novel architectures such as multi-core, cluster of multi-processors and GPUs.
Here, we consider a GPU cluster, i.e. a computer cluster in which each node is equipped with
a GPU. While GPU computing is quite easy to approach, the use of a GPU cluster is still
a challenge, since we lack an eﬃcient, general programming model for them. However, GPU
clusters can provide high peak performance at small cost, and so their importance and spreading
are currently increasing among the scientiﬁc sotware community.
In our software, GPU programming relies on CUDA, the parallel computing platform and
programming model of NVIDIA [22], while communications among the cluster nodes are based
on the standard Message Passing Interface (MPI) [22].
The basic idea of our parallel software for implementing Algorithm 1 is to follow a domain
decomposition approach for the outer iteration task of the algorithm, while the linear algebra
of the internal scheme (stage 6, 7 of Algorithm 1) is carried out by the GPUs. The latter task
has been accomplished by using the PetSc library. To be speciﬁc, we use the KSP, a package of
solvers for linear systems, which includes direct/iterative methods and several preconditioners.
174

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

Recently, GPU support has been added to PetSc. Such GPU-enabled version of PetSc is still
under development and its performance is promising. It relies on the open source libraries
CUSP, a library for sparse linear algebra and graph computations on CUDA [2], and THRUST,
a collection of data parallel primitives that provide high level abstractions to describe eﬃcient
computations on GPU [11].
Our parallel software is organized as a framework that allows three diﬀerent options of
execution. Each option implements a speciﬁc parallel strategy, namely the intra-node strategy,
aimed at multiprocessor systems without GPU acceleration, the inter-node strategy, for the
execution on a single node with a GPU, and the multilevel-node strategy, which is targeted
towards general GPU clusters.
These parallelization strategies, which have been implemented as three diﬀerent codes, are
brieﬂy described below.
• INTRA-NODE strategy. It relies on a coarse-grained parallelism, which exploits the
intra-node concurrency of multiprocessors in order to parallelize stage 3 - 7 of Algorithm
1. As shown in Figure 1 (left), the intra-node code is executed on N concurrent nodes.
A suitable domain decomposition splits the frame into sub-frames that are distributed to
the nodes. The data distribution is carried out by a direct scattering-gathering, with MPI
functions. More precisely, at each scale-step, Gθ−hθ and H θ−hθ are scattered to all nodes;
therefore each process solves the assigned linear (sub)system on its own multicore CPU
using the KSPGMRES solver with the PCJACOBI option of the standard version of PetSc.
Finally, the results are gathered in U θ and V θ .
• INTER-NODE strategy. It is based on a ﬁne-grained parallelism aimed at exploiting
concurrency at GPU level. This strategy uses the GPU-enabled version of PetSc for
solving the linear systems on the GPU. As shown in Figure 1 (right), the inter-node code
is executed on a single node with a GPU. In this way, we compute the solutions U θ and
V θ , at each scale-step, without distributing data via MPI, yet exploiting the massive
parallelism of the GPU inside a single node.
• MULTILEVEL-NODE strategy. It is the main contribution of this work. It combines
the previous two strategies, as shown in Figure 2. First, a preliminary domain decomposition, as in the INTRA-NODE strategy, is performed. Then, each node uses its own
GPU to solve the assigned linear (sub)system by means of the KSPGMRES solver with the
PCJACOBI option of the GPU-enabled version of PetSC, as in the INTER-NODE strategy.
We observe that in the multi-level parallel code the exchange of data among nodes occurs only
at the initial and ﬁnal steps of the outer loop, and corresponds to the distribution and gathering
tasks of the frame decomposition. Conversely, all communications required by the linear solver
occur as host-device memory data exchange in a single node.

6

Experimental results

Our framework, with its three diﬀerent parallel codes, has been tested on real images arising
from the tracking of moving clouds in SAR image sequences. Here, we brieﬂy report the results
of some tests in order to highlight the improvement provided by the three ways of execution.
The experiments are carried out on a cluster of eight nodes, each equipped with a Quadro K5000
GPU and an Intel Core i7 CPU (2.8GH, 8GB Cache). The image sequence is composed of 10
frames, which correspond to a map of the weather status on a time interval of 15 minutes. The
175

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

Figure 1: Left: the INTRA-NODE code. Right: the INTER-NODE code.

Figure 2: The MULTILEVEL-NODE code.

analysis of longer sequences becomes useless for practical purposes, because at longer times the
clouds could change their shape so that the estimation of the optical ﬂow would be altered. We
considered short sequences, with little change in brightness, where each image has size 555×845.
Some results are shown in Figure 3. Notice that the computed optical ﬂow reliably follows the
course of the clouds. The accuracy of the diﬀerential methods for the optical ﬂow has been
widely addressed in [19]. In order to assess the reliability of our software, we performed the
same accuracy test as in [19] obtaining results of comparable accuracy.
We are speciﬁcally interested in studying the performance of our parallel software in terms
of execution time. The execution times for the three strategies are shown below. First, we
have compared the sequential version to the multicore version on one node of our cluster. A
trivial execution of the sequential version gives an execution time equal to 1554s, i.e. nearly 25
minutes. Since each node is multicore, a clever setting of the compiler options, namely the use
of Pthreads (a set of C language programming types and functions for an eﬃcient execution on
a multi-core architecture) reduces the execution time to 259s. The latter execution time will
be taken as reference benchmark for the performance of the code on a single node.
In Table 1, we report the execution times of the INTRA-NODE code. It is apparent that,
as the number of nodes increases, we do not achieve a signiﬁcant gain. This is due to the fact
that on a cluster of multiple nodes a large amount of data communication is required, especially
when solving the system of linear equations concurrently among nodes. We observe that the
best speedup is obtained when only two multicore nodes are used, with a gain of 49.4%.
In Table 2, we show the execution times of the INTER-NODE and the MULTILEVEL-NODE
176

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

Figure 3: Optical Flow estimation for a couple of frames (subﬁgures (a) and (b)). Double visualization
of results (subﬁgures (c) and (d)).
hw conf

execution times

speedup

1
2
4
8

259s
131s
88s
60s

1
1.98
2.94
4.31

multicore-CPU
multicore-CPU
multicore-CPU
multicore-CPU

Table 1: Execution times (in seconds) for the INTRA-NODE software: each node is an Intel Core i7
CPU

codes. Notice that the ﬁrst row of Table 2 refers to the INTER-NODE software.
hw conf
1
2
4
8

multicore-CPU
multicore-CPU
multicore-CPU
multicore-CPU

+
+
+
+

GPU
GPU
GPU
GPU

execution times

speedup

50s
29s
20s
13s

5.18
8.9
12.95
19.93

Table 2: Execution times (in seconds) for the intra-node and multilevel-node codes: each node is an
Intel Core i7 CPU equipped with a Quadro K5000 GPU
The execution time of the INTER-NODE code is 50s, which entails a gain of 80.6% with respect to the execution time obtained on a single multicore node. As long as the MULTILEVELNODE code is concerned, we note that, even though a large amount of data must be exchanged
for the frame decomposition among nodes, the most computationally expensive portion of the
software is executed locally on the GPUs, so that a higher gain up to nearly 95% is obtained.
Moreover, the use of an optimized library, such as the GPU-enabled PetSc, minimizes the exchange of data between host and device memories and fully exploits the intrinsic parallelism of
the GPUs.
Finally, the behavior of the speedup, for an increasing number of nodes and GPUs, is shown
in Figure 4. Notice that the speedup of the INTRA-NODE code grows slowly since the communication overhead raises as the number of nodes increases, especially for the linear solvers.
Conversely, the speedup of the MULTILEVEL-NODE code grows more rapidly, due to the
177

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

Figure 4: Speedup curves: blue curve with diamond points is the speedup of the intra-node code; red
curve with squared points is the speedup of the multilevel-node code; the star point is the speedup of
the inter-node code.
limited contribution of the intra-node communication for the frame decomposition, and to a
more eﬀective exploitation of the degree of parallelism at GPU level.

7

Conclusions

In order to beneﬁt from the multilevel parallelism that characterizes the current architecture of
the GPU-accelerated multiprocessor clusters, we have developed a parallel software framework
which implements a diﬀerential method for computing the optical ﬂow in image sequences.
The computational kernel of the resulting numerical problem consists of two iterative nested
schemes and has been solved by means of a parallelization strategy that combines a coarse
parallelism for the outer scheme, which accounts for most of the data communication among
nodes, and a ﬁne parallelism for the inner scheme, which exploits the high computational power
of the GPUs in performing basic linear algebra operations. Numerical experiments conﬁrmed
that our parallel software is able to leverage the GPU power while avoiding both space limitation issue and communication overhead among nodes, and allowed to estimate that the resulting
computational gain is nearly equal to 95% with respect to the sequential version of the software.
Acknowledgements This work has been partially supported by the Italian PON project
SIRIO: Servizi per lInfrastruttura di Rete wIreless Oltre il 3G.

References
[1] J. Barron, D. J. Fleet, S. S. Bacuemin - Performance of Optical Flow tecniques. International
Journal of Computer Vision. Volume 12(1), pp: 43-77, February 1994.
[2] N. Bell , M. Garland - Cusp: Generic parallel algorithms for sparse matrix and graph computations.
Version 0.3.0, 2012.
[3] D. Casaburi, L. D’Amore, A. Galletti, L. Marcellino - A numerical algorithm for image sequence
inpainting that preserves ﬁne textures. International Journal of Computer Mathematics. Volume
88, Issue 11, pp: 2331-2347, 2011.
[4] D. Casaburi, L. D’ Amore, L. Marcellino, A. Murli - A Motion-aided Ultrasound Image Sequence
Segmentation. Proceeding of ENUMATH2009 - Numerical Mathematics and Advanced Applications. Part 2, pp: 217-225, 2010.

178

A multi-level parallel framework on GPU cluster . . .

Cuomo, Galletti, Giunta and Marcellino

[5] D. Casaburi, L. D’Amore, L. Marcellino, A. Murli - Real time ultrasound image sequence segmentation on multicores. Proceeding of PARCO2009 - Parallel Computing: From Multicores and
GPU’s to Petascale, vol 19, pp: 185-192, 2010.
[6] S. Cuomo, A. Galletti, G. Giunta, A. Starace, A. - Surface reconstruction from scattered point via
RBF interpolation on GPU. Federated Conference on Computer Science and Information Systems,
FedCSIS 2013, pp. 433-440, 2013.
[7] S. Cuomo, P. De Michele, F. Piccialli - 3D data denoising via Nonlocal means ﬁlter by using parallel
GPU strategies. Computational and Mathematical Methods in Medicine, 2014 .
[8] L. D’ Amore, D. Casaburi, L. Marcellino, A. Murli - Numerical Solution of Diﬀusion Models in
Biomedical Imaging on Multicore Processor. International Journal of Biomedical Imaging: Special
Issue on Parallel Computation in Medical Imaging Applications. Hindawi Publishing Corporation,
2011.
[9] A. Dopico, M. Correia, J. Santos, and L. Nunes - Parallel Computation of Optical Flow, ICIAR
2004, LNCS 3212, 2004.
[10] R. Farina, S. Cuomo, P. De Michele, F. Piccialli - A smart GPU implementation of an elliptic
kernel for an ocean global circulation model. Applied Mathematical Sciences, 7 (61-64), pp. 30073021, 2013.
[11] J. Hoberock, N. Bell - Thrust: A parallel template library. Version 1.5.2, 2012.
[12] B. K. P. Horn, B. G. Schunck - Determining optical Flow. Artif. Intell., vol. 17, pp. 185203, 1981.
[13] P. Knabner, L. Angermann - Numerical Methods for Elliptic and Parabolic Partial Diﬀerential
Equations. Texts in Applied Mathematics, Vol. 44. Springer, 2003.
[14] T. Kohlberger, C. Schnorr, A. Bruhn, and J. Weickert - Parallel Variational Motion Estimation
by Domain Decomposition and Cluster Computing. ECCV2004, LNCS 3024, pp: 205-216, 2004.
[15] P. Montero, J. Taibo - Fast GPU approximation of EPZS motion estimation using branching.
Multimedia Signal Processing (MMSP), pp.356,361, 2013.
[16] Y. Saad, M. Schultz - GMRES: A generalized minimal residual algorithm for solving nonsymmetric
linear systems. SIAM J. Sci. Statist. Comput. Vol 7, pp. 856-869, 1996.
[17] X. Wang, L. Song, M. Chen, J. Yang - Paralleling variable block size motion estimation of HEVC
on CPU plus GPU platform. Multimedia and Expo Workshops (ICMEW) IEEE International
Conference, 2013.
[18] J. Weickert , A. Bruhn , N. Papenberg, T. Brox - A Survey on Variational Optic Flow Methods for
Small Displacements. Mathematical Models for Registration and Applications to Medical Imaging
Mathematics in industry Volume 10, pp: 103-136, 2006.
[19] J. Weickert, C. Shnorr - A Theoretical Framework for Convex Regularizeds in PDE-Based Computation of Image Motion TR 13/2000, Computer Science Series, 2000
[20] J.Weickert - - Recursive separable schemes for nonlinear diﬀusion ﬁlters. Scale-Space Theory in
Computer Vision, Lecture Notes in Computer Science, Springer, Berlin, Vol. 1252, , pp. 260-271,
1997.
[21] http://www.mcs.anl.gov/petsc/
[22] http://www.nvidia.com/
[23] http://www.sat24.com/
[24] http://www.mcs.anl.gov/research/projects/mpi/

179

