Building the Program Parallelization System Based on
a Very Wide Spectrum Program Transformation System
Alexander Alexeyevich Bukatov
Rostov State University, Computer Center, 200/1, build. 2, Stachki Ave.,
344090 Rostov-on-Don, Russia
baa@rsu.ru
http://uginfo.rsu.ru

Abstract. An approach to build an automated Program Parallelization System
based on a multipurpose very wide spectrum program transformation system is
discussed. The main advantage of the proposed approach is a nonprocedural
way in which the parallelizing transformations are described in the Program
Transformation System. It allows doing any required customization of the Program Parallelization System for a new parallel computer platform or new parallelization techniques. General organization of the proposed Multipurpose Program Transformation System is discussed, some examples of nonprocedural representations of parallelizing transformations are analyzed and comparison with
related works is provided.

1 Introduction
Automated parallelization tools provide the means for porting legacy sequential programs to parallel computer platforms and using sequential programming languages to
develop new programs for parallel computers. The program parallelization techniques
were being widely investigated in the last decades. For some representative classes of
parallel computers with shared memory, vector and SMP architecture computers included, effective parallelization techniques had been developed. Basic vendors of
parallel computers with such architectures have provided the parallelizing compilers
for these types of computers. Nevertheless, for the parallel computer architectures
with distributed memory (DM) such as MP, cluster or NUMA architectures more or
less effective parallelization techniques are still poorly developed and numerous investigations in this direction are being leaded. Some new techniques of program parallelization for DM computers are being introduced from time to time. Therefore there
is a need to change each time the implementation of experimental program parallelization tools that have been developed for DM computers to incorporate the new techniques. Building an automated program parallelization tools based on nonprocedural
description of parallelizing transformations may dramatically simplify the evolutionary development of such tools.
The other reason for building the program parallelization tools around the nonprocedural description or parallelizing transformations arises from the practical need how
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 945–954, 2003.
© Springer-Verlag Berlin Heidelberg 2003

946

A.A. Bukatov

to “teach” the existing parallelization tools to apply new parallelizing transformation
developed by skilled users of such tools. The application domain specific parallelization methods that can be developed by skilled application programmers for parallelizing some high-level multi-component program structures is of special interest.
This paper discusses the way of building an extendable Automated Program Parallelization System (APPS) based on a very wide spectrum Multipurpose Program
Transformation System (MPTS) [1,2]. The next section of the paper discusses the
main features of the MPTS and of underlying program transformation language. In
Section 3 the general organization of the MPTS and APPS is observed. In Section 4
two examples of parallelizing program transformations are discussed. In Conclusion
general assessment of this paper and comparison of discussed results with related
investigations are provided.

2 Main Features of the Multipurpose Program Transformation
System and Language
The Multipurpose Program Transformation System (MPTS) like most others program
transformation systems [3,4] is based on a nonprocedural representation of program
transformations in the form of Schematic Transformation Rules.
The basic notion used in the area of schematic program transformation is a program
scheme [3]. A program scheme is a representation of some class of similar programs
or similar program structures (statements). It originates from the concrete program or
from the program structure by parameterization: some components of the program (of
the program structure) are replaced by the parameters named.
Schematic transformation rule (STR) is the mapping (probably a partial one) from
the space of program schemes to the same space. Usually [3,4] this mapping is recorded in the following form:
input-pattern & enabling-condition Ã output-pattern
where the input-pattern is the scheme of the transformed structure and the outputpattern is the scheme of transformation result. The enabling-condition, which usually
depends on the input-pattern parameters, restricts the STR applicability.
The STRs can be applied to any program for its transformation. The STR application includes the following stages. First, all the structures (statements) of the transformed program matching the input pattern are found. Simultaneously for each
matching the values of input pattern schema parameters are determined (unified).
Then for each matching the enabling condition is evaluated. If for some source structure matched to the input pattern this value is ‘TRUE’, then this source structure is
replaced by the structure produced from the output pattern by substituting the unified
parameter values.
A single STR or some set of STRs can be applied once or repeatedly “by exhaustion”, i.e. until no matches of its input pattern are found. The order of the STRs application can be specified in a program transformation scenario expressed in an appro-

Building the Program Parallelization System

947

priate program transformation language. This provides the means to represent both the
STRs and the program transformation scenarios.
The STR form discussed above is used in all known program transformation systems (PTS) [3,4]. It provides the way for nonprocedural representation of rather simple program transformations and cannot cover all the needs for implementation of the
well-known program parallelization and vectorization techniques (see [5-7]). Local
transformations can only be represented in the STR form. But not all program parallelization transformations are the local ones. The typical example of a non-local transformation is the loop restructuring because usually the statements that declare and
initialize the loop variables are involved in this transformation. Moreover not all the
local program transformations can be expressed in a natural way in the STR form. For
example, to restructure some loop statement to a parallelized program structure some
Diophantine equations should be solved. It’s obvious enough that the algorithm used
for solution of equations cannot be expressed efficiently in the form of the program
rewriting rules.
So the expressive power of the traditional schematic program transformation languages and systems is not good enough to be used for the implementation of program
parallelization systems. The MPTS suggested in [1,2] extends the traditional program
transformation languages in two main directions. First, sophisticated compound multicomponent patterns are introduced. And second, some functional capabilities are introduced into a program transformation language. Additionally, some interactive features are introduced to the MPTS.
Let’s consider the Multipurpose Program Transformation Language (MPTL) and
System (MPTS). The core construction of the MPTL is the declaration of the Program
Transformation Rule (PTR) that is of the following form:
rule rule-name (rule-parameters-list) [var variable-declarations-list ; ]
compound-input-pattern
&& enabling-condition =>
compound-output-pattern
end
Here and everywhere in this paper the names of non-terminal constructions are printed
in the italic font and the square brackets are used to enclose optional constructions.
In the variable declarations list rule parameters as well as input and output pattern
parameters are declared. The declaration of each parameter includes the name of this
parameter syntax type (the name of the corresponding non-terminal symbol of the
transformed program grammar). It means that only the string derivable from the defined non-terminal symbol can be matched to this parameter. It provides the basis for
the efficient implementation of the matching process.
Now let’s consider the most important parts of the PTR declaration, the compound
input and output patterns. Each of these patterns can be composed of several pattern or
procedural terms. The definition of compound input pattern, for example, has the
following syntax:
compound-input-pattern ::= pop-term { & pop-term } Õ
pop-term ::= pattern-term | procedural- term Õ

948

A.A. Bukatov

Here and further in the paper the ‘::=’ symbol is used to separate the left and right
parts of the syntax rule; the figure brackets ‘{‘ and ‘}’ are used to enclose a construction that can be repeated 0 or more times; the ‘|’ symbol separates alternatives of the
syntax rule and the ‘Õ’ symbol ends the syntax rule.
The first term of the input pattern is usually the pattern-term. It provides the
schema of the root (or, in other words, the ‘anchor’) component of a compound program structure. Each of the subsequent pattern terms is as a rule connected with one of
the previous terms by a semantic relation or by common parameters. The procedural
terms are used to transform their input parameters to the output ones when the algorithm of the required transformation is rather sophisticated. The simplified syntax of
the pattern term has the following form:
pattern-term ::= identifying-expression : schema Õ
identifying-expression ::=:<s-type-name>{. relation-name} [(alias-name)] |
alias-name{. relation-name} [ (alias-name) ] |
$parameter-name{. relation-name}[(alias-name)Õ
The form of identifying expressions is mostly based on a semantic model of the
transformed program that is used in the MPTS. According to this model the transformed program is treated as a hierarchical structure of the syntax objects connected
by the binary semantic relations such as “declared in”. The hierarchical links are also
considered as the named binary relations. The whole program structure is considered
to be a directed graph whose nodes are the syntax objects and edges are the named
relations.
The simplest case of an identifying expression is the syntax type name
(s-type-name). In this case all the syntax objects of s-type-name type are compared
with the schema during the matching process. The fact that the syntax type of the
matched object is known before matching simplifies the matching process dramatically and provides the means for its efficient implementation. A more complex form
of identifying expressions is based on the principles of a navigational query language
of special object-oriented database [8,9]. In this case the identifying expression has the
form of the dot separated chain of relation names that defines some path in the graph
program structure leading from the named object to the object being identified.
The alias name optionally provided in the identifying expression is used to refer to
the matched object from others pattern terms. In the PTR output pattern the three
following additional forms of identifying expression of the pattern terms can also be
used: before(alias-name), instead-of(alias-name) and after(alias-name). Note that the
simple alias-name form is equal to instead-of(alias-name) when used in the out pattern.
The procedural-pattern is the way to capture procedural transformation steps into
schematic transformation process. The simplest form of the procedural term is an
external procedure call. This procedure can be implemented in some traditional programming language (the interface to C language is supported in the MPTS).
The last PTR component, which has not been discussed yet, is the enabling condition. It is the logical expression that depends on the input pattern parameters. This
expression can include some external predicates (i.e. functions that return Boolean
value) as operands. One of such predicates predefined in the MPTS is used to intro-

Building the Program Parallelization System

949

duce interactivity to a transformation process. It asks a programmer a parameterized
question and transforms his ‘yes’ or ‘no’ reply to the Boolean ‘TRUE’ or ‘FALSE’
values respectively that are returned to the transformation engine. A more complex
form of an enabling condition is beyond of the scope of this paper.
The MPTL features discussed in this section can sufficiently widen the area of the
program transformation approach applicability, so that MPTL can be used to represent
rather complex parallelizing transformations. Almost all of the discussed extensions of
traditional program transformation languages have been introduced by us. Let us note,
that in works of V.L. Winter, dealing with HATS system [10,11], the pattern schemas
and parameters are also marked by syntax types of corresponding syntax objects. This,
as it has been mentioned above, provides the means for efficient implementation of the
matching process. Winter has also tried to overcome the gap between the local and
global transformations by introducing special wildcard symbol ‘*’, which can be
matched with an arbitrary string. But this attempt is not considered to be successful
one because a wildcard symbol cannot be implemented efficiently and it does not
really provide means to represent complex semantic structures composed of distributed components.

3 General Organization of the Multipurpose Program
Transformation and Automated Program Parallelization
Systems
The transformed programs are represented in the MPTS in the internal form and are
stored in the object database (ODB) [8-9]. The primary form of the internal representation of the transformed programs is the Abstract Syntax Tree (AST) extended by
additional semantic links (relations), which connect the AST nodes. On the bases of
the extended AST some additional secondary representations such as the Control Flow
Graph (CFG) and the Data Dependency Graph (DDG) are produced. These secondary
representations are used to implement efficiently different predicates intended for
application in PTR enabling conditions.
The MPTS is composed of the tools (subsystems), which provide the following
main functions:
- conversion of source programs to their internal presentation stored in the ODB
and vice versa;
- support the PTRs and PTSs (program transformation scenarios) creation an modification (the aggregate of PTRs and PTSs play the role of the APPS’s knowledge
base);
- application of the PTRs and PTSs to the transformed program to produce the
transformation result.
The tools, converting source programs to their internal presentation and vice versa
(below, the program conversation tools) can be customized to the syntax of programming languages that are used to represent source sequential programs and target parallel programs, to be created as the result of the parallelization. In fact a combined

950

A.A. Bukatov

language, containing constructions of both sequential and parallel language is constructed and its syntax in the form of an L-attributed grammar [12] is defined. Then
the definition of this grammar G is entered into the MPTS. The syntax rules of the
grammar G are compiled to C-procedures, which make the transformation of the
source program to an attributed AST and vice versa. On the AST basis the required
secondary presentations are produced such as CFG and DDG. Let us note that all the
PTRs when applied to the transformed programs actually operate on the AST level
that is very close to the source program level. Secondary representations are reconstructed by the MPTS after each AST transformation. The techniques of such reconstruction are discussed in the paper [13] written under our guidance.
Tools intended for the PTRs and PTSs creation and modification (below, the PTR
creation tools) do compile the transformation programs expressed in the form of PTSs
and PTRs to C-procedures that perform the corresponding transformation. Such approach provides the simple way to implement the MPTL functional (procedural) capabilities including procedural terms of the PTR patterns and “embedded” predicates
used in enabling conditions. The PTR creation tools also provide the check of PTR
structural correctness. Each pattern term is checked for consistency with the G grammar.
The transformation engine provides the PTSs and/or PTRs (MPTL programs) application to the transformed program. It is the main part of the MPTS. A MPTL program can be applied to the entire program, which is to be transformed, or to some
identified part of this program. Both the interactive interface and the application programmer interface (API) to the transformation engine are provided by the MPTS. The
API interface is provided through the apply function. Note, if the transformation engine API is provided, any traditional programming language can be used as means to
code program transformation scenarios.
The automated program parallelization system (APPS) is built on the MPTS basis
in the following way. The set of “predefined” predicates and functions (procedures)
intended for application in the PTR’s enabling conditions and procedural pattern terms
is implemented in the C programming language. This set forms the procedural part of
the APPS knowledge base. The nonprocedural part of the APPS knowledge base is
represented in the PTRs form. This approach was used in paper [14] to implement
classical parallelization techniques of R. Allen and K. Kennedy [5] in the form of the
APPS knowledge base.

4 Examples of the Nonprocedural Representation of Parallelizing
Transformations
Two examples are provided in this section. The first example is simplified to be expressed mainly with the MPTL features discussed in section 2. The second example is
rather complicated and demonstrates some additional features of the MPTL.
Let’s consider the following program structure that is coded in Pascal like language as a first example:

Building the Program Parallelization System

951

s: real; . . . a: real array of [1..n]; . . .
s := 0; . . . for I := 1 to n do s := s + a[i];
The loop, contained in this structure, can be replaced by two consecutive loops.
The first one can be run in parallel where as the second one is similar to the source
loop but involves n/2 (if n is even) iterations. The following PTR defines the transformation discussed.
rule sum_loop_tr :
var <name> $i, $a, $s, $b, $type; <int_const> $n, $n1;
<loop_stmt> (par_loop): for $i=1 to $n do
$s := $s + $a[$i]; &
<assign_stmt> (ss):
$s:=0; &
$a.declared_in (adcl): $a: array [1..$n] of $type;
&& precedes(ss,loop_tr) &
unchanged_between($s,ss,loop_tr) & even($n)
=>
$n1 = int_const:$n/2 & $b = new_name &
after(adcl): $b: array [1..$n/2] of $type; &
instead_of(par_loop): for $i=1 to $n1 do
$b[$i] := $a[i] + $a[$n + $i];
for $i=1 to $n1 do $s := $s + $b[$i];
end
In this example the input pattern of the sum_loop_tr PTR consists of three pattern terms. The identifying expression of the second term defines the path from the
syntax construction matched with $a parameter to the structure that should be matched
with the second pattern term. The output pattern consists of two procedural terms and
two pattern terms. The enabling condition is the conjunction of the three predicates.
Of course the sum_loop_tr PTR can be generalized. For example, the ‘+’ operation in the loop statement as well as the ‘0’ value in the assignment statement
should be parameterized for any operation that is commutative and associative and for
the ‘NULL’ value of this operation group. Moreover, the syntax of the $s + $a[$i]
expression should also be parameterized to be matched with expressions like
MIN($s,$a[$i]). The MPTL language provides the mean of the required expression
parameterization not discussed above. Pattern terms can be written in the attributed
AST notation eliminating the difference between the infix and functional forms of the
operation syntax.
As the second example we consider the PTR that implements the loop unrolling
(see [5], for instance).

rule loop_unroll:
var <name> $i, $n, $j; <stmt> $loop_body;
<loop_stmt>(L): for $i=1 to $n do $loop_body
&& few_iterations(L) & no_jumps_in(L)
=>
instead_of(L):
forall $j in (1:$n)
$loop_body_j = apply(($i => $j), $loop_body)
end

952

A.A. Bukatov

In this example, which in fact is also simplified, the loop unrolling transformation
is represented.
Let’s discuss two additional constructions of the MPTL that are used in the above
example. The first one is the forall-in construction. This construction is used to
produce sequentially the indexed samples of the embedded statement. In the MPTL
there are some other constructions, which provide the means to handle and to explore
the sets of the schemas. The second construction provides the way of the recursive call
of the transformation engine. The apply function is called recursively in this example to apply the embedded anonymous transformation rule to the loop body.
There are some other features of the MPTL and MPTS that are not discussed in this
paper. But the features discussed do demonstrate the expressive power of the MPTL,
the potential efficiency of the MPTS implementation, and the applicability of the discussed tools for building the program transformation systems.

5 Conclusion
The main aim of this paper is to develop an approach to implement extendable program parallelization tools. This approach should provide the means for evolutionary
extension of such tools to incorporate innovations of the underlying parallelization
techniques. According to this aim the main achievements discussed in the paper are
the following:
First, the principle has been suggested to build a program parallelization system on
a basis of a schematic transformation system that allows representing parallelizing
transformations in a nonprocedural form that is clearer for understanding and easier
for modification than a procedural implementation of these transformations. As we
know there are no other investigations that suggest any approach to the nonprocedural
implementation of the parallelizing transformation and, partially, an approach based
on a program transformation system.
Second, development of a schematic program transformation approach has been
performed with the aim of increasing the expressive power of a program transformation language, which would be suitable for clear representation of complicated parallelizing transformations. The MPTL program transformation language providing new
expressive features has been developed. The prototype implementation of the MPTS
program transformation system based on the MPTL has been performed. The MPTS
and MPTL do develop ideas of the traditional program transformation systems [3-4] in
two main directions. The transformations of the compound multi-component program
structures (the semantic structures composed of distributed components) can be defined in MPTL and applied by MPTS. And the procedural means (procedural terms
and predicates) can be used where required. There are no other program transformation systems that provide the facilities mentioned above. The HATS system [11,12]
provides only some means to express non-local transformations (see the end of Section 2). But these means are restricted and are not powerful enough to represent com-

Building the Program Parallelization System

953

plicated transformations. And there is no way to implement the wildcard feature efficiently.
And third, the MPTL application to represent of complex parallelizing transformations has been shown in the Section 4 and in the paper [14] written under our guidance.
Note that MPTS based PPS is, in fact, the meta-system that makes it possible to
implement different parallelization techniques. In paper [14], the parallelizing transformations of R. Allen and K. Kennedy are represented in a non-procedural form.
Other classical parallelization techniques [6,7], different extensions of these techniques (see, [15]) as well as parallelization techniques based on completely different
approaches to parallelization can also be represented in this form. At present we are
planning to implement the V-Ray parallelization technology [16] based on the MPTS.
Since we implement in nonprocedural form the parallelization techniques developed by other researchers the parallelizing power of our implementation is mainly
determined by the underlying parallelization techniques. That is why we do not provide any test data based on PTS running on the Livermore Loops benchmark. By the
similar reason no comparison of the PPS performance time parameters with other
parallelization systems has been made.

References
1.

Bukatov A.A. Development of Tools Intended for Creation of the Source Program Transformation Systems. Information Technologies, N 2, 1999, 22–25 (published in Russian).
2. Bukatov A. A. Development of Tools for Nonprocedural Implementation of Program
Parallelizing Transformations. Proceedings of the Russian Conference “Fundamental and
Application Aspects of Development of the Large Distributed Program Complexes”,
Abrau-Durso, MSU Publishing, 1998, 109–116 (published in Russian).
3. Partch H., Steinbruggen R. Program Transformation Systems. ACM Computing Surveys,
1983, v. 15, N 3, 199–236.
4. Visser E. A Survey of Rewriting Strategies in Program Transformation Systems. Electronic Notes in Theoretical Computer Science, v. 57 (2001), 35 p.
http://www.elsevier.nl/locate/entcs/volume57.html
5. Allen R., Kennedy K. Automatic Translation of FORTRAN Programs to Vector Form,
1987.
6. Bannerjee U. Dependence Analysis for Supercomputing. Kluver Academic Publishers,
New York, 1988.
7. Wolfe M.J. Optimizing Supercompilers for Supercomputers. MIT Press, Cambridge,
Mass, 1889.
8. Bukatov A.A., Zastavnoy D.A. High-level navigational language for querying complex
data objects and its applications to CASE systems // Proc. of the 3rd Joint Conference on
Knowledge-Based Software Engineering, Smolenice, Slovakia, 1998, pp. 103–107.
9. Zastavnoy D.A., Bukatov A.A. Representation of Complex Structures Extracted from
Object Databases, and Access to their Components // In: Hruska T., Hasimoto M. (Eds)
Knowledge-Based Software Engineering, Amsterdam: IOS Press, 2000, 93–100.
10. Winter V.L. An Overview of HATS: A Language Independent High Assurance Transformation System. Proc. of the IEEE Symposium on Application-Specific Systems and Software Engineering Technology (ASSET), March 24–27, 1999.

954

A.A. Bukatov

11. Winter V.L. Program Transformation in HATS. Proceedings of the Software Transformation Systems Workshop, May 17, 1999.
12. Lewis P.M., Rosenkranz D.J., Stearns R.E. Attributed Translations. Journal of Computer
and System Sciences, v. 9, N 3, 1974, 279–307.
13. Lugovoy V.V. Development of the Internal Representation Modification Techniques in
the Program Parallelization CASE-system. Proceedings of the Conference “High Performance Computing and its Applications”, Chernogolovka, Russia, 2000, 133–136 (published
in Russian).
14. Zhegulo O. Representation of Knowledge on Program Parallelization Techniques in the
Expert System Supporting Program Parallelization. Artificial Intelligence, the Journal of
National Academy of Sciences of Ukraine, Institute of Artificial Intelligence, No 2001’3,
Donetsk, 2001, 323–330 (published in Russian).
15. Pinter S.S., Pinter R.Y., Program Optimization and Parallelization Using Idioms. ACM
Transactions on Programming Languages and Systems, 1994, vol. 16, N 3, 305–327.
16. Voevodin V.V., Voevodin Vl.V. V-Ray technology: a new approach to the old problem:
Optimization of the TRFD Perfect Club Benchmark to CRAY Y-MP and CRAY T3D
Supercomputers. Proceedings of the High Performance Computing Symposium’95, Phoenix, Arizona, USA, 1995, 380–385.

