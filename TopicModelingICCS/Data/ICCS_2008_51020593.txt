Physics Based Algorithms for Sparse Graph
Visualization
ˇ
Milovan Suvakov
Department for Theoretical Physics, Joˇzef Stefan Institute, Box 3000, 1001 Ljubljana,
Slovenia
Milovan.Suvakov@ijs.si
http://www-f1.ijs.si/∼suvakov/

Abstract. Graph visualization represents an important computational
tool in analysis of complex networks. Recently, variety of network structures in complex dynamical systems have been found which require
appropriately adjusted visualization algorithms. We are testing quantitatively performance of two visualization algorithms based on energy minimization principle on variety of complex networks from cell-aggregated
planar graphs to highly clustered scale-free networks. We found that
fairly large structures with high clustering can be eﬃciently visualized
with spring energy model with truncated interaction.
Keywords: graph layout, complex networks, energy minimization.

1

Introduction

Networks which represent complex dynamical systems in physical, biological
and social systems usually appear to have strongly inhomogeneous structures
[1], which require improved methods for analysis and visualization. Some unusual properties of these networks which may eﬀect visualization procedure are
that networks are: sparsely connected, large, strongly inhomogeneous, and/or
modular. In addition, constraints such as planarity, absence of clustering, on one
side, or small-worldness, scale-free organization, strong clustering, on the other
are often making diﬃculties to the standard visualization procedure [2].
Recent examples include physical models such as: the spring algorithm [3],
where the links are replaced by springs with unit natural length and the nodes
are interacting with a repulsive force, and Kamada-Kawai algorithm [4], where
one looks for the optimal potential that makes the distances between the nodes
tend to their corresponding topological distances. Another important ingredient
in the visualization algorithm is the actual minimization procedure. Here we
studied these two “energy” models [3,4] and implementing two diﬀerent algorithms for ﬁnding the energy minimum: time integration and metropolis-based
algorithm. We compare the eﬃciency of these two algorithms and analyze the
emergent structures for diﬀerent kinds of networks: trees, scale-free graphs, cellular networks which are planar graphs introduced in [5], and gene interaction
network [7]. We also suggest modiﬁcation of the spring algorithm with a truncated interaction and demonstrate it eﬃciency on these networks.
M. Bubak et al. (Eds.): ICCS 2008, Part II, LNCS 5102, pp. 593–600, 2008.
c Springer-Verlag Berlin Heidelberg 2008

594

ˇ
M. Suvakov

Terminology and Deﬁnition of the Problem: A graph G is an ordered pair
(V, E) given with nonempty set of verteces V and set of edges E. If for each
edge (u, v) ∈ E there is an edge (v, u) ∈ E graph is undirected (symmetrical).
The graph visualization is mapping between the verteces and two-dimensional
or three-dimensional coordinates f : V → Rn (where n ∈ {2, 3}). The quality
of mapping is not well deﬁned, but several criteria are generally accepted. One
example is minimization of number of edge crossing. While some graphs cannot
be drawn without edge crossings, some graphs can. Planar graphs belong to this
group. To test uncrossing property of the visualization algorithms in this paper
we will use model of cell-aggregated planar graphs which we were presented in
[5]. Other criteria for satisfactory of visualization often used are: minimization
of variance in the edge lengths, maximization of minimal angle between neighboring edges, minimization of the number of bends in the edges, minimization
of diﬀerent slopes used in edge visualization, and other.

Kamada-Kawai

Spring

Fig. 1. Minimal energy conﬁguration in the case of a small graph

In this paper we will concentrate on two-dimensional (planar) visualization of
undirected graphs. Also, we will focused on physical models with given Hamiltonian (energy) function which depends on coordinates of vertices and graph
topology given by the adjacency matrix. The main idea of this approach is that
ﬁnal planar embedding is given by the minimum of the energy function. The two
diﬀerent “energy” models will be studied supplemented by two diﬀerent energy
minimization algorithms.

2

“Energy” Models and Minimization Algorithms

The ﬁrst model is known as Kamada-Kawai [4] model and it is based on idea to
place the vertices on such places in the plane with geometric distances correlated
with topological distances. The energy in this model is given with:
kij (|ri − rj | − lij )2 ,

E=
i,j

(1)

Physics Based Algorithms for Sparse Graph Visualization
Kamada − K awai

595

Time Integration

Metropolis

S pr ing

Fig. 2. Same cellular planar graph [5] of N = 256 nodes shown with four diﬀerent
visualization methods. Relative numbers of edge crossings χ are: 0.01%, 0.31%, 0.05%,
0.06%.

where ri are vectors of positions of vertices, kij are parameters (in algorithm
used in this paper with constant value kij = 1), and lij is topological distance
between vertices - shortest path length. Shortest path between two vertices is
deﬁned as path between them with smallest number of edges [9]. In this case,
the value of lij is an positive integer number. The physical interpretation is an
harmonic interaction between every two vertices with a minimum on the distance
given with shortest path length.
Second model is known as spring model [3] in which the energy is given by:
kij (|ri − rj | − l0 )2 +

E=
(i,j)∈E

i,j

g
η,
|ri − rj |

(2)

where kij , l0 , g and η are parameters, and ri are vectors of the positions of
vertices. In the physical interpretation, ﬁrst term represent springs with length l0
between neighboring verteces and second term represent “electrostatic repulsion”
each pair of verteces.

ˇ
M. Suvakov

596

The illustration of global energy minima for a small graph for both models is
given on Fig. 1. For larger graph sizes there are lot of local minima in the energy
function, which make the visualization procedure increasingly complex.
Kamada − Kawai
30

Spring
35

Integration
Metropolis

25

25
Energy

20
Energy

Integration
Metropolis

30

15

20

10

15

5

10

0

5
0

10

20

30

Time [iter]

40

50

0

10

20

30

40

50

Time [iter]

Fig. 3. Relaxation of two energy models for the same planar graph shown on Fig. 2 ant
two minimization algorithms. Diﬀerent lines correspond to diﬀerent initial conditions.

We show two models for graph visualization given by energy as function of
the positions of the vertices. The ﬁnal planar embedding is given as a minimum
of the energy function. In order to ﬁnd the energy minimum we use two diﬀerent
algorithms: metropolis and time-integration algorithm.
In the metropolis algorithm we calculate the energy change for node random
movement, usually taken from Gaussian distribution. The movement is accepted
with a probability given by p = max(1, e−ΔE/T ), where ΔE is energy change
and T is “temperature” parameter. We implement this algorithm according to
following steps:
Initial node positions: randomly given
Do:
For i=1 to N:
e0=energy of the system
move node i randomly
e1=energy of the system
Accept movement with probability: exp(-(e1-e0)/T))
End loop i
Until maximal movement is smaller than a threshold value
As the second algorithm we use the numerical time-integration of the following
set of equations:
∂E
dri
= −ν
,
(3)
dt
∂ri
where ν is a “viscosity” parameter. It is implemented as follows:

Physics Based Algorithms for Sparse Graph Visualization

597

Initial node positions: randomly given
Do:
For i=1 to N:
Calculate force on node i as gradient of the energy
Move the node
End loop i
Until maximal movement is smaller than a threshold value

S pr ing

m=2 (clustered SF graph)

m=1 (SF tree)

Kamada − K awai

Fig. 4. Emergent layouts for two diﬀerent models (left column: Kamada-Kawai, right
column: spring model) for scale-free tree (top panels), and clustered scale-free graph [6]
(bottom panel). In all cases the metropolis minimization algorithm was used. Relative
numbers of edge crossings χ are: 0.70%, 0.25%, 23.5%, 17.0%.

3

Algorithm Eﬃciency and the Graph Layouts

On Fig. 2 we show diﬀerent graph layouts for the same planar graph with cellular structure [5]. The graph is grown using algorithm given in [5] with control
parameters μ2 = 1.0 and ν = 1.0. For reasons of clarity here we use the small
size of network is N = 256. To compare results we will use relative number of

598

ˇ
M. Suvakov

edge crossings deﬁned as χ = Ncs /Ncs,0 where Ncs is number of edge crossings
for given layout and Ncs,0 is average number of edge crossings for the same graph
for a random layout. In all results we calculated χ using value for Ncs,0 averaged
over 10 random layouts. The Kamada-Kawai method gives better result (see left
column on Fig. 2). Quantitatively this diﬀerence can be related to faster energy
relaxation and absence of many minima shown on Fig. 3. In both cases there
are a lot of minima, but in the Kamada-Kawai case a global minima is always
found with metropolis algorithm. For the planar graph the diﬀerence in the
minimization procedure is less pronounced in the case of the spring algorithm.
The comparison between two energy models for scale-free graphs is shown on
Fig. 4. In both cases spring algorithm gives better results.

(a)

(b)

(c)

(d)

Fig. 5. Emergent layouts in the case of next-neighbor spring model approximation for
diﬀerent graphs: (a) planar graph of Fig. 2; (b) scale-free tree of Fig. 4; (c) clustered
scale-free graph of Fig. 4; (d) gene network from Ref. [7]. Relative numbers of edge
crossings χ are: 3.7%, 6.0%, 25.6%, 45.0%.

Physics Based Algorithms for Sparse Graph Visualization

4

599

Spring Model with Next-Neighbor Interaction

A considerable computational acceleration in the algorithm is possible if the
range of interactions in Eqs. 1 and 2 can be restricted. For instance here we use
next-neighbor interactions in the sums in Eqs. 1 and 2 and apply to diﬀerent
graphs. We studied when this approximation gives satisfactory results.
For this purpose we studied the next-neighbor spring model on four diﬀerent
networks shown on Fig. 5: planar cellular graph, scale-free tree, clustered sparse
scale-free graph, and gene network.

(b)
100000

10000

10000
Algorithm complexity

Algorithm complexity

(a)
100000

1000
m=1 α=0.1
m=1 α=1
m=1 α=5
m=2 α=0.1
m=2 α=1
m=2 α=5
slope=1.0
slope=1.3

100

10

1000

100

GNet1
GNet2
slope=1.0

10

1

1
1

10

100

1000

N

1

10

100

1000

N

Fig. 6. Algorithm complexity N × < knn > on size of network N : (a) Growing network
model from [6] for diﬀerent model parameters (b) Gene networks from [7]

In the case when clustering is too small the emergent layouts are not well
outstretched. However, in the case of sparse networks with higher clustering
coeﬃcient the algorithm seems much better (see Fig. 5(c)). In the case of notscalefree gene network, see example in Fig. 5(d) the next-neighbor approximation
does not give a good layout.
The complexity of the energy calculation algorithm is proportional to the
mean value of next-neighbors < knn >. The one computational step (loop
through all nodes) in both energy minimization algorithms takes N × < knn >
calculations. Since the mean value < knn > increases with system size and saturates at a threshold, the complexity of energy calculation algorithm for all nodes
appears to be proportional to system size N instead to N 2 . For the network sizes
around the threshold value, the exponent is between one and two (see Fig. 6).

5

Conclusions and Future Work

We tested three energy models for two-dimensional visualization of graphs with
given size and structure deﬁned with adjacency matrix Cij . We give certain
quantitative measures of eﬃciency of the energy minimization algorithm. We

600

ˇ
M. Suvakov

Table 1. For diﬀerent graph structures the listed are methods of choice with metropolis
minimization
Graph structure
Planar graph with loops
Scale-free trees
Scale-free clustered
Non-SF clustered

Visualization Method of Choice
Kamada-Kawai model
Spring model - inﬁnite range interaction
Spring model- short range interaction
??

χ
0.01%
0.26%
26%
45%

presented layouts for diﬀerent type of graphs, in particular the graphs which appear in applications of statistical physics to real-world networks. In summary we
ﬁnd that diﬀerent algorithms work diﬀerently depending on the graph structure.
For particular graph type we summarize the method of choice in Table 1.
Another idea for visualization of complex networks is to use growth models, starting with small sub-graph and minimizing the energy while adding nodes one by one
with known patterns of links (see online java applet on author’s web page [12]).
Acknowledgments. M.S. thanks ﬁnancial support from the Marie Curie Research and Training Network MRTN-CT-2004-005728 project. Many thanks to
my PhD supervisor prof. Bosiljka Tadi´c for her useful help and guidance.

References
1. Boccaletti, S., Latora, V., Moreno, Y., Chavez, M., Hwang, D.U.: Complex networks: Structure and dynamics. Physics Reports 424, 175–308 (2006)
2. Batagelj, V., Mrvar, A.: Pajek, http://vlado.fmf.uni-lj.si/pub/networks/
pajek/
3. Eades, P.: A heuristic for graph drawing. Congraessus Numerantium 42, 149–160
(1984)
4. Kamada, T., Kawai, S.: An algorithm for drawing general undirected graphs. Inf.
Process. Lett. 31, 7–15 (1989)
ˇ
5. Suvakov,
M., Tadi´c, B.: Topology of Cell-Aggregated Planar Graphs. In: Alexandrov, V.N., van Albada, G.D., Sloot, P.M.A., Dongarra, J. (eds.) ICCS 2006. LNCS,
vol. 3993, pp. 1098–1105. Springer, Heidelberg (2006)
6. Tadi´c, B.: Dynamics of directed graphs: the world-wide Web. Physica A 293, 273
(2001)
ˇ
7. Zivkovi´
c, J., Tadi´c, B., Wick, N., Thurner, S.: Statistical indicators of collective
behavior and functional clusters in gene networks of yeast. The European Physical
Journal B - Condensed Matter and Complex Systems 50(1), 255–258 (2006)
8. Dorogovtsev, S.N., Mendes, J.F.F.: Evolution of Networks. Oxford University
Press, Oxford (2003)
9. Bollob´
as, B.: Modern Graph Theory. Springer, New York (1998)
10. Tadi´c, B.: From Microscopic Rules to Emergent Cooperativity in Large-Scale Patterns. In: Krasnogor, N., Gustafson, S., Pelta, D., Verdegay, J.L. (eds.) Systems
Self-Assembly: multidisciplinary snapshots, Elsevier, Amsterdam (2005)
11. Ahuja, R.K., Magnanti, T.L., Orlin, J.B.: Network Flows: Theory, Algorithms, and
Applications. Prentice-Hall, New Jersey (1993)
12. Suvakov M.: http://www-f1.ijs.si/∼ suvakov/

