Workload scheduler with fault tolerance in MMSC
Juhee Hong, Hocheol Sung, Hoyoung Lee, Sunyoung Han
Konkuk Univ. Seoul 143-701, Korea
{ jhhong,bullyboy,hylee,syhan}@kkucc.konkuk.ac.kr

Abstract. Media Server of MMSC(Multimedia Message Service Center) offers
a function that converts sound and image types for users various handsets. And
MMS Relay requests media type and format conversion and Media Server
handles this conversion. When MMS Relay requests for media conversion,
workload scheduler makes the job distributed properly and processed by several
Media Servers is very important. Since the whole system load can be
distributed evenly, the performance of MMS system improves. And stability
and reliability are provided. In this paper, we propose and implement workload
scheduler that jobs are processed distribution by monitoring the least of the
weighted job in each Media Server which is assigned weight to jobs according
to conversion time. Also, we propose a fault tolerance that is function of Media
Server to retransmit the job fast when fault happens through monitoring the
active/idle state and executes the processes.

1

Introduction

With the developments of wireless communications and high-speed network, there is
a clear need for a more advanced messaging service that allows mobile users to send
and receive longer messages with richer content. In mobile message service, SMS
(Short Message Service) that allows only plain text has been evolved to MMS
(Multimedia Messaging Service) that is a mixture of different media types including
text, images, sounds and videos. This new messaging service called MMS can be
realized by using the future mobile networks such as GPRS and UMTS [1][2][5][8].
In the multimedia messages, it is possible to perform a format conversion based on
the handset characteristics. It is a Media Server that takes the responsibility for the
conversion when a MMS Relay requests conversion. Since a multimedia message
takes longer to convert than text, multiple Media Servers are needed for speedy
processing [1][6]. However, 3GPP and WAP Forum Specifications specifies the
necessity of Media Server for this conversion, they don’t specify the performance
improvement through fast conversion of multimedia message [2][6][7].
When multiple Media Servers convert media format, load balancing is necessary to
prevent overloading in a specific Media Server. In this paper, we propose and
implement workload scheduler that distributes jobs by monitoring the least of the
weighted jobs in each Media Servers and the scheduler operates jobs according to
weight that is assigned to conversion time. This provides performance improvement

of system and reliable message delivery. Also, we present fault tolerance that is
function of Media Server to retransmit the job fast when fault happens through
monitoring active/idle states and executes the processes. We show enhanced
performance in multiple Media Servers through this test.
The rest of this paper is organized as follows. In section 2, we introduce the overall
MMSC component and architecture. In section 3, we present design of workload
scheduler supporting load balancing and fault tolerance. In section 4, we present
implementation, and in section 5, we compare and estate test results. Finally, section 6
gives our concluding remarks.

2

MMSC(Multimedia Message Service Center)

MMSC is a system for MMS defined in our testing system based on 3GPP and WAP
Forum. MMS is intended to provide a rich set of content to mobile subscribers in a
messaging context, it supports both sending and receiving of such messages and it
assumes that messaging transmission and retrieval is supported by handsets [1][3][8].
There are four basic types of equipment within MMSC, these are MMS Relay, MMS
Server, Media Server, and Operation console [3][4][7]. Figure 1 shows external
configuration of MMSC designed and implemented.
G

Fig. 1. MMSC

The MMS Server is responsible for storing and handling of incoming and outgoing
messages. MMS Relay is responsible for the transfer of messages between different
messaging systems associated with the MMS Server. Depending on the business
model, the MMS Server and the MMS Relay may be combined, or distributed across
different domains. The MMS Relay should be able to generate charging data (CDR)
when receiving multimedia messages or when delivering multimedia messages to the
MMS User Agent or to another MMS environment [1][2].

In practice, MMS system may be integrated in a single physical place but we explain
it as a set of components for better understanding.
User Databases may be comprised of one or more entities that contain user related
information such as subscription and configuration (e.g. user profile, HLR). The User
is an application layer function that provides the users with the ability to view,
compose and handle multimedia messages such as sending, receiving, deleting of the
MMS.

3

Design of workload scheduler

As above, Media Server is important and independent server in MMSC, because it
makes possible multimedia message to perform a format conversion based on the
handset characteristics [1]. In case when one MMS Relay and one Media Server have
been consisted respectively, routing and scheduling issue between MMS Relay and
Media Server isn’t important. But as the necessity of messaging service increases,
more than two MMS Relay and Media Server are needed. Thus, the routing between
MMS Relay and Media Server is important. In order to support this routing function,
there must be a monitoring capability in the Media Servers that is impossible because
of the faults and looks overloading problem as shown in Figure 2.
G

Fig. 2. System topology

In this paper, we propose scheduler that performs load balancing for fast contents
conversion in multiple MMS Relays and Media Servers. Because of the distributed
processing for the request, it should include fault tolerance to handle the faults
happened in a specific Media Server or process.
This load balancing adapts the least-connection algorithm among scheduling
algorithms. The least-connection algorithm directs network connections to server with
the least number of established connections [9], but the scheme suggested in this
paper is based on the sum of the weighted job at work in each Media Server simply

because of doing via local network. Weight is assigned for the fast process of a media
conversion because it takes different times to perform each media conversion. These
weights are the statistical value that obtained through our test results for a media
conversion. Table 1 and 2 show the value.
Media Server with the least of the weighted jobs is selected with a below scheme.
If there are n jobs at work in Media Server and each jobs have a weight Wi(i = 1, … ,
n), the weighted job in that Media Server is expressed by ˯(1 / Wi ) (i = 1, ... ,n).
Therefore, the selected Media Server is that with min{˯(1 / Wi )} (i = 1, ... ,n).
Table 1. statistical value for image format type.
(unit : count/second)G

Source\Destination
GIF
JPEG
PNG
BMP
WBMP

GIF

JPEG
5.1

3.4
2.7
3.0
0.2

5.1
5.1
5.1

PNG
5.0
2.5

BMP
5.2
5.2
5.2

2.4
5.0

WBMP
4.2
1.4
3.1
3.5

5.2

Table 2. statistical value for audio format type
(unit : count/second)

Source\Destination
WAV
MP3
MID

WAV
5.0
5.1

MP3
3.9

MID
2.9
2.0

X

Scheduler distributes the request that received from MMS Relay using the above
scheme. Figure 3 shows whole processing diagram of the load balancing. Our system
is consisted of two parts, scheduler and Media Server. Scheduler is a component of
load balancing and fault tolerance, and Media Server performs media format
conversion. The scheduler creates worker thread and processes the request. To select
Media Server with the least of the weighted jobs, scheduler retrieves Media Server list
table and it finds the state whether it is active or idle of the selected Media Server.
This is repeated until the Media Server that can convert the request is selected. When
the Media Server is selected, weighted job field of the list table is increased.
Monitoring for conversion state is made known by the signal that is send to the Media
Server. Signal types are complete and fault signals that is sent when an absurd end of
process or other errors happen.

Fig. 3. Media Server processing diagram

Present Media Server receives these signals and knows the conversion state. When
scheduler does not receive a signal in a given time, it regards that state as fault and
retrieves the next Media Server. Complete signal is regarded as a normal end. When
comes to an end, job field in list table decreases.
Conversion state in Media Server is reported to the scheduler through the periodic
signal. Also, heartbeat message notifies that server is active, and the scheduler
updates time field of the Media Server in the list table. Updated time value calculates
receiving heartbeat message time plus(+) given time intervals. If heartbeat message
does not arrive in time, the Media Server is regarded as fault and retransmits the
requests to another server.

4

Implementation

4.1 modules
The System consists of two parts, scheduler and Media Server. Scheduler forwards
requests to Media Server using load balancing and fault tolerance mechanism. It
consists of a request-handling module, a Media Server List Table, and a heartbeat
message-handling module. Media Server appends a heartbeat message-sending
module and a complete signal-sending module for monitoring a state of conversion
process to legacy Media Server that performs media conversion.
The request-handling module distributes appropriately the conversion requests to
Media Server. It is requirement that has to listen a request from MMS Relay and
forward appropriately to Media Server with load balancing algorithm. It creates a new
thread whenever the request comes in and destroys the thread when it completes.

The request-handling thread needs the algorithm to check the state for sending request
to Media Server. First, it should have a capability of retrieving a Media Server with
the least of the weighted jobs and checking the state, whether it is active or idle. If it
is selected, Media Server will receive and execute the conversion request.
Then the request-handling thread increases the weight of job in Media Server List
Table, and it is monitoring the job. If a fault occurs, new Media Server will be
selected again. Otherwise, the thread decreases the weight of job and it is destroyed
automatically.

4.2 structure
Media Server List Table is a table for retrieving a Media Server with the least of the
weighted jobs by load balancing algorithm. It consists of Server ID, Server Address,
Job, Time and Critical Section for synchronization.
Server ID is an unique number for identifying each Media Server and Server Address
is IP address. Job is the weighted value of the job in execution in each Media Server
and Time is the expected time that Media Server will be active for some times. It is
the value that adds the time coming heartbeat message to that coming next. During
that time, scheduler considers that Media Server is active. Otherwise it is idle. Critical
Section is used for locking when the table is update.
Table 3. Media Server List Table

Server ID

Server
Address

Unique
IP address of
identification
each Media
of each
Server
Media Server

Job

Time

Critical Section

The weighted The time coming
value of the
heartbeat from
job in
Media Server
The variable for
execution in
+ predefined
synchronization
each Media
time-interval
Server
value

Table 4. Media Server List Table structure

typedef struct _ServerEnt {
int
SOCKADDR_IN
unsigned int
DWORD
CRITICAL_SECTION
critical_sec;
} ServerEnt;

ServerId;
ServerAddr;
uWgtOfJob;
dwTime;

4.3 Fault tolerance mechanism
When Media Server starts a service, it creates a thread for sending heartbeat message
and forwards it to scheduler. If Media Server succeeds in UDP connection to
scheduler, it starts sending heartbeat message. Then, the request-handling thread
executes UDP listening daemon for receiving the message and updates the time field
in Media Server List Table whenever it receives the message. If heartbeat message
does not arrive in time, the Media Server is regarded as fault, and retransmits the
requests to another server.
Media Server sends a complete signal to Process Monitoring daemon in scheduler
when job is a normal end, otherwise it sends a fault-signal. We use a complete-signal
with ‘1’ and a fault-signal with ‘0’ in this paper.

5

Test Results

We built a test bed in order to compare with the performance of the legacy MMS
system. So, we prepare five Media Servers, scheduler and client application for
playing a part in MMS Relay. We used a Pentium server as for Media Server and
scheduler. We used window 2000 compatible for OS. Each Media Server and
scheduler was located in a local network. Also, we had to prepare MMS storage for
various media files. Each Media Server connected to MMS storage with a network
drive of supporting OS. Therefore, each Media Server operates as if the source media
file for conversion is in the same local drive. And we killed all the unnecessary
process in Media Server and scheduler for accurate test.
In order to measures the performance, we sent between 10 and 100 requests to Media
Server at a time for message conversion, and then we calculated the average times
processing completion.
The graph shows the results of this implementation. Measured the processing time by
increasing the number of Media Server to a single Media Server in order to compare
the performance improvement resulting from our system. As for the various
performance tests, we calculated the processing time with changing file size of media
type different. Figures, 4 through 7, show the result of the test.

Fig. 4. Using with 1Mbyte wav file

Fig. 5. Using with 500Kbyte wav file

Fig. 6. Using with 150Kbyte wav file

Fig. 7. Using with 50Kbyte wav file

Figure 4 shows a result of the test with 1 Mbyte audio file, and next pictures are the
result graph of testing with 500Kbyte, 150Kbyte and 50Kbyte. Clearly, the
conversion time is different as the number of Media Servers, but Media Server can
convert very fast in case of a small size of media files. In case of sending 10 requests,
there are no difference between single Media Server and five Media Server as the
graph shows. It spent more time for reaching requests rather than for converting a
media file. But it is showing the result the increased performance as the converting
requests are increased. And the bigger a media file size is, the greater the differencing
converting time between the single Media Server and the five Media Servers has. We
are sure that the same result applies to the image files and other audio format files.
As a result, we found that our system improve more the performance dramatically
than the legacy system.

6

Conclusions

Media Server of MMSC has a capability of providing personalized service because it
offers functions for converting sound and image types to users various handsets.
3GPP and WAP Forum Specifications shows the necessity of Media Server for this
conversion. However, there is no reference of performance improvement through fast
conversion of multimedia message. In this paper, we designed and implemented
workload scheduler that distributes job processing by monitoring of the least of the
weighted jobs in each Media Server to improve system performance. We also
implemented fault tolerance that is function of Media Server to retransmit the job fast
when fault happens through monitoring the active/idle state of the Media Server and
execute the processes. Test results presented clearly that our scheduler improves
performance and provide reliable system. Future work includes test of video file
conversion and streaming service.
G

References
1.3G TS 22.140 (v.4.0.1) : “Multimedia Messaging Service”
2.3G TS 23.140 (v.4.0.0) : “MMS Functional Description”
3.WAP-205-MmsArchOverview, “Wireless Application Protocol MMS Architecture
Overview”, Version 01-Jun-2000.
4.WAP-207-MmsInetlnterworking, “Wireless Application Protocol MMS Interworking with
Internet Email Specification”, Version 01-Jun-2000.
5.Sevanto, J, “Multimedia messaging service for GPRS and UMTS Wireless Communications
and Networking”, WCNC. 1999 IEEE, Sept.1999, pp. 1422 - 1426 vol 3.
6. http://www.3gpp.org/
7. http://www.wapforum.org/
8.Sevanto, J, “Multimedia messaging service for GPRS and UMTS Wireless Communications
and Networking”, WCNC. 1999 IEEE, Sept.1999, pp. 1422 - 1426 vol 3.
9. http://www.linuxvirtualserver.org/docs/scheduling.html

