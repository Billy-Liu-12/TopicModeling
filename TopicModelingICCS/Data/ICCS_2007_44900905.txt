OTL: On-Demand Thread Stack Allocation
Scheme for Real-Time Sensor Operating
Systems
Sangho Yi1 , Seungwoo Lee1 , Yookun Cho1 , and Jiman Hong2,
1
System Software Research Laboratory
School of Computer Science and Engineering, Seoul National University
Tel.: +82-2-872-7431, Fax.: +82-2-875-7726
{shyi,solee,cho}@ssrnet.snu.ac.kr
2
School of Computing, Soongsil University
jiman@ssu.ac.kr

Abstract. In wireless sensor networks, each sensor node has severe resource constraints in terms of energy, computing device, and memory
space. Especially, the memory space of the platform hardware is much
smaller than that of the other computing systems. In this paper, we
propose a OTL, which is an on-demand thread stack allocation scheme
for MMU-less real-time sensor operating systems. The OTL enables to
adaptively adjust the stack size by allocating stack frame based on the
amount of each function’s stack usage. The amount of the function’s
stack usage is checked at compile-time, and the adaptive adjustment of
the stack occurs at run-time. Our experimental results show that the
OTL signiﬁcantly minimizes the spatial overhead of the threads’ stacks
with tolerable time overhead compared with ﬁxed stack allocation mechanism of the existing sensor operating systems.

1

Introduction

Many kinds of existing operating systems can be cartegorized into two classes according to how they operate and design kernel architecture. Historically, name of
the two rough classes are deﬁned as follows: event-driven(or message-oriented),
and multi-threaded(or procedure-oriented). For the past several decades, many
discussions have been made on these two canonical models of the operating
systems[1,2,3,4,5,6]. In 1978, Lauer and Needham attempted to ﬁnish the discussion on the two models by showing duality between event-driven and multithreaded operating systems[2]. As a result, they concluded that the two canonical
models are ”duals” in terms of characteristics, program operation, and system
performance.
The above conclusions are correct theoretically. In the real implementations,
however, the two models show signiﬁcant diﬀerence on performance and eﬃciency of systems and applications. There are pros and cons of the event-driven
This Research was supported by the Soongsil University Research Fund.
Corresponding author.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 905–912, 2007.
c Springer-Verlag Berlin Heidelberg 2007

906

S. Yi et al.

and the multi-threaded system models on designing a sensor operating system.
The event-driven system design gives us smaller context switching latency and
memory usage based on single stack management. However, response time and
preemptivity are much poorer than that of the multi-threaded systems[3]. The
multi-threaded design enables preemption, but necessary memory space for the
thread’s stack is larger than that of the event-driven[5].
In this paper, we propose a OTL, which is an on-demand thread stack allocation scheme for MMU-less real-time sensor operating systems. The OTL enables
to adaptively adjust stack size by allocating or releasing additional stack frame
based on the amount of each function’s stack usage. The information is calculated
at compile-time, and adaptive adjustment of the stack occurs at run-time. Our
experimental results show that OTL signiﬁcantly minimizes the spatial overhead
of the threads’ stacks with tolerable time overhead compared with ﬁxed stack
allocation mechanism.
The rest of this paper is summarized as follows. In Section 2, we present some
related works on sensor operating systems. Section 3 describes characteristics of
the wireless sensor nodes, and explains the design and implementation of OTL
in detail. Section 4 presents and evaluates performance of OTL compared with
ﬁxed stack allocation mechanism on the existing multi-threaded sensor operating
systems. Finally, some conclusions and future work are presented in Section 5.

2

Related Works

In this section, we brieﬂy introduce previous works relating to our proposing mechanism. Many kinds of research eﬀorts[3,4,5,6,7,8] have been done on designing and
implementing sensor operating systems and stack allocation mechanisms.
In [4], Adya et al. presented a ”sweet spot” hybrid task management model
of the two existing models(event-driven and multi-threaded). It can be implemented based on continuation and stack ripping mechanism, and the ”sweet
spot” enables cooperative task processing without manual stack management.
In [3], Ousterhout argued disadvantages of the multi-threaded task model with
many usages and examples of the two existing models. As a result, the multithreaded task model is better than event-driven if a target system is susceptible
to the performance of response time or preemptivity of the task execution.
In [5], Behren et al. compared performance of the multi-threaded task model
with event-driven. In addition, they insisted that the performance of the multithreaded operating systems can be improved by compiler-assisted techniques.
In [9], Torgerson proposed an automatic thread stack management scheme on
the MANTIS operating system based on compile-time calculation of the upperbound of the thread stack size. The proposed scheme mitigates trade-oﬀ relation
between stack overﬂow and stack space eﬃciency on the multi-threaded task
model. However, this scheme cannot remove the space ineﬃciency which caused
by static allocation of each thread stack area.
In [6], Gustafsson brieﬂy introduced concepts of the stackless implementation
of C/C++ programs to minimize memory usage. For example, C compiler can

OTL: On-Demand Thread Stack Allocation Scheme

907

predict maximum required stack space, the compiler would allocate space for
function arguments and local variables on the heap instead of a stack.
In [10], Dunkels et al. proposed Protothread, which is a stackless threads in C
programmming to minimize memory usage on implementing multi-threaded applications for wireless sensor networks. However, the Protothread is not a method
of multi-threaded programming, but a programming sugar of event-driven programming. In addition, it does not support automatic state management and
preemption between multi-threaded tasks.

3

OTL: On-Demand Thread Stack Allocation Scheme

In this section, we describe requirements for wireless sensor networks including
platform hardware of the sensor nodes with some existing constraints. Then, we
present design and implementation of OTL in detail.
3.1

Requirements for Wireless Sensor Networks

In wireless sensor networks, it is very important to minimize production cost to
enhance networks eﬃciency. Such restriction limits computing power, memory
space, and batteries of each sensor node. For example, Berkeley’s MICA motes
have only 8-bit processor, 4 KB memory space, and 2xAA batteries[11]. Thus,
developers of the sensor operating systems must consider these severe constraints
on the sensor hardware platform. In addition, sensor operating systems need to
take the multi-threaded task model to support real-time, concurrent processing
of the various tasks such as communication, sensing, analog-to-digital conversion,
data aggregation, and etc. For this reason, operating systems that run on the
sensor nodes need a space-eﬃcient stack allocation mechanism.
The following are the essential requirements when designing a new stack allocation mechanism for the multi-threaded task model.
Minimization of allocated stack space. In general purpose operating
systems, each thread has a relatively large stack area(4 KB in Linux), but
the memory space of a sensor node is very limited(about 1∼4 KB).
Minimization of time overhead. Many existing software virtual memory
or MMU mechanisms have large overhead on execution time, but computing
power of a sensor node is much smaller than the other computing systems.

3.2

Design and Implementation of OTL

The major objective of the OTL is minimizing stack usage on multi-threaded
operating systems. In order to eﬃciently utilize memory usage, it provides adaptive and on-demand stack allocation for each thread based on the calculation
method of the amount of stack used for each function call.
Table 1 compares OTL with ﬁxed stack allocation mechanism. In ﬁxed(or
static) stack allocation mechanism, thread stack allocation is performed only

908

S. Yi et al.
Table 1. Comparison between ﬁxed stack allocation mechanism and OTL
Feature
Allocation point
Freeing point
Stack frame size
Timing overhead

Fixed stack allocation
on creating a thread
on exiting a thread
ﬁxed(or static)
single allocation

OTL
on calling a function
on returning from a function
adaptive(or dynamic)
multiple allocation

when a new thread is created, and the allocated space will be released only
when the threads exits. In this mechanism, the allocated stack space is belong
to a thread until the thread exits. If a thread stack’s upper bound is signiﬁcantly
larger than average stack usage, the system will be ineﬃciently operated in terms
of memory space utilization. On the otherhand, OTL adaptively allocates the
necessary thread stack space on demand. Therefore, in OTL, the space eﬃciency
will be signiﬁcantly improved, but the several times of stack allocation may
increase total execution time.

Fig. 1. Building process of sensor operating systems when using OTL

Figure 1 shows the building process of sensor operating systems and a pplications when using OTL. First of all, ”OTL Library” is used for allocating and releasing thread stack space at thread’s run-time. Second, the ”Top-half Analyzer”
is used for calculating the stack space usage of each function. AVR-GCC[12] is
a C compiler for the AVR processor. The AVR-GCC with ”-S” compiles a C
source ﬁle(*.c), and it gives an assembly code ﬁle(*.s) as a output. The ”Tophalf Analyzer” parses and analyzes the output assembly code, and calculates the
amount of stack space used for each function. The calculated results are stored
at the ﬁle ”otl.map”. The third one is the ”Bottom-half Analyzer”. It is used
for assigning the amount of stack space for each function call. The ”Bottom-half
Analyzer” parses the C source ﬁle(*.c), and then for each C function call, it ﬁnds
the stack space usage of each function call from the ﬁle ”otl.map”. Then, the
allocating and releasing OTL library routine for each function call is inserted
to the before and after the call respectively. The modiﬁed C source ﬁles(*.c) is
compiled. Finally, the kernel image of the operating system is built for wireless
sensor nodes.
Figure 2 shows comparison between existing ﬁxed stack allocation mechanism
with the proposed scheme. This is an example of the same ”pthread-net4: sensor110” application on the Nano-Qplus[8] sensor operating system. In case of

OTL: On-Demand Thread Stack Allocation Scheme

G : Global data area
K : Kernel stack area

: Stack area used by the Thread 3
: Stack area used by the Thread 2
: Stack area used by the Thread 1

: Unused thread stack area

G

909

K
Free space

T3

T2

T1

(a) An example of the fixed stack allocation mechanism
T2

G

T1

K
Free space

T3

(b) An example of OTL

Fig. 2. An example of stack space of ﬁxed stack allocation mechanism and the OTL

the ﬁxed stack allocation, the stack space is managed as a single frame for each
thread. However, in case of the OTL, the stack space is similar to the linked
list structure, and the only necessary stack space is allocated for the threads.
In the OTL, the maximum available number of threads are not aﬀected by the
ﬁxed stack size, but the actual stack space used on the threads. Therefore, if the
operating system uses the OTL, then the system can support more threads than
existing ﬁxed stack allocation mechanism.
Table 2. List of functions and variables used in this paper
Notation
allocM emory(msize )
releaseM emory(maddr)
saveSp(maddr )
loadSp(maddr )
changeSp(mvalue)
f unc().stackAddress
f unc().stackN ecessary
f unc().arguments

Description
returning address of an allocated msize memory block
releasing a memory block of an address maddr
saving stack pointer to an address maddr
loading stack pointer from an address maddr
changing stack pointer to a value mvalue
stack frame address of a f unc()
necessary stack frame size of a f unc()
arguments of a f unc()

We used the above notations to present algorithms of the proposed OTL.
Some functions and variables that are used in protocol descriptions are deﬁned
in Table 2. The following shows the main algorithm of the proposed scheme.
In Algorithm 1, necessary stack allocation and saving stack pointer are performed before the function call. After that, the OTL moves the thread’s stack
pointer to the newly allocated stack area. Then, it pushes C function’s arguments
and returning address, sets the local variables, and runs the function’s internal

910

S. Yi et al.

Algorithm 1. Dynamic stack management algorithm of OTL
— when a thread calls a f unc(), do the following: —
f unc().stackAddress ← allocM emory(f unc().stackN ecessary)
saveSp(f unc().stackAddress)
changeSp(f unc().stackAddress + f unc().stackN ecessary − 1)
push f unc().arguments
call f unc()
loadSp(f unc().stackAddress)
releaseM emory(f unc().stackAddress)

routine. The OTL restores the thread’s stack pointer from the saved data, and
ﬁnally, the allocated stack space is released from the thread.

4

Performance Evaluation

In our performance evaluation, we compared the actual performance of the above
mechanisms by making experiments on the real sensor platform. We used Octacomm’s Nano-24 wireless sensor platform[13], which is similar to the Berkeley’s
MICAZ sensor platform. The proposed scheme is implemented on the NanoQplus(ver.1.6.0e). This operating system supports a real-time memory allocation
scheme with preemptive task scheduler.

serial comm.
Sensor

Sink

Monitor
(PC)

Sensor
Sensor

wireless comm.

Sensor

Fig. 3. Organization of the pthread-net4 sensor application

We used two kind of sensor applications which presented in the above, and
the average memory usage and the average execution time are shown in Fig. 4
and 5, respectively.
Figure 4 shows performance of the ﬁxed allocation mechanism and the proposed scheme in terms of both time and space. In case of OTL, each function call
needs additional 4 bytes to save previous stack pointer register. But it is very
negligible space overhead, since it can save signiﬁcant stack space compared with
the ﬁxed allocation mechanism.
Figure 5 shows the execution time when using the proposed scheme or not.
The proposed scheme has a small timing overhead(about 10 percent) compared
with ﬁxed stack allocation mechanism. However, it can improve signiﬁcantly the
space-eﬃciency of the stack usage.

OTL: On-Demand Thread Stack Allocation Scheme
550

550
500

500

Fixed Stack Allocation
Proposed Scheme(OTL)

450
s)te
yb 400
(e
ca 350
pS
kc
at 300
S
edta 250
co
lA200

Fixed Stack Allocation
Proposed Scheme(OTL)

) 450
esyt
(be 400
ca 350
pS
kc
taS 300
dte 250
calo
A200
150

150
100

911

100
8

64

120

176

232

288

344

400

456

512

8

64

120

Execution Time (ms)

(a) Sensor Node

176

232
288
344
Execution Time (ms)

400

456

512

(b) Sink Node

Fig. 4. Run-time stack space usage of the sensor applications

110
)s 100
( 90
e 80
im
T 70
onti 60
50
uc 40
ex 30
E 20
10
0

Fixed Stack Allocation
Proposed Scheme(OTL)

20

40
60
Number of Times(Periods)

(a) Sensor Node

80

110
s)( 100
e 90
80
im
T 70
no 60
it 50
uc 40
ex 30
E 20
10
0

Fixed Stack Allocation
Proposed Scheme(OTL)

20

40
60
Number of Times(Periods)

80

(b) Sink Node

Fig. 5. Execution time of the sensor applications

Based on these results, we can convince that the proposed mechanisms signiﬁcantly improves the space-eﬃciency of the threads’ stack space allocation
compared with the existing ﬁxed stack allocation mechanism.

5

Conclusions

Wireless sensor networks are composed of tiny sensor nodes that usually have severe resource constraints in terms of energy, computing device and memory space.
Sensor operating systems that run on tiny sensor nodes are the key to the performance of the wireless sensor networks. In order to process many tasks eﬃciently
with the sensor nodes, the sensor operating systems need a space-eﬃcient multithreaded task model. In this paper, we propose a OTL, which is an on-demand
thread stack allocation scheme for MMU-less real-time sensor operating systems.
The OTL enables to adaptively adjust the stack size by allocating or releasing
additional stack frame based on the amount of each function’s stack usage information. The information of the function’s stack usage is checked at compile-time,
and the adaptive adjustment of the stack occurs at run-time. Our experimental
results showed that the OTL can signiﬁcantly minimize the spatial overhead of the
threads’ stacks with tolerable time overhead compared with ﬁxed stack allocation
mechanism on the existing multi-threaded sensor operating systems.

912

S. Yi et al.

References
1. Hoare, C.A.R.: Monitors: An operating system structuring concept. Communications of the ACM 17 (1977) 549–557
2. Lauer, H.C., Needham, R.M.: On the duality of operating system structures. In:
Second International Symposium on Operating Systems, IRIA. (1978)
3. Ousterhout, J.K.: Why threads are a bad idea (for most purposes). Presentation
given at the 1996 Usenix Annual Technical Conference (1996)
4. Adya, A., Howell, J., Theimer, M., Bolosky, W.J., Douceur, J.R.: Cooperative
task management without manual stack management. In: Proceedings of the 2002
USENIX Annual Technical Conference. (2002)
5. von Behren, R., Condit, J., Brewer, E.: Why events are a bad idea (for highconcurrency servers). In: HotOS IX: The 9th Workshop on Hot Topic in Operating
Systems. (2003) 19–24
6. Gustafsson, A.: Threads without the pain. ACM Queue 3 (2005) 34–41
7. Yannakopoulos, J., Bilas, A.: Cormos: A communication-oriented runtime system
for sensor networks. In: Proceedings of the 2nd IEEE European Workshop on
Wireless Sensor Networks (EWSN ’05). (2005)
8. Lee, K., Shin, Y., Choi, H., Park, S.: A design of sensor network system based on
scalable and reconﬁgurable nano-os platform. In: IT-Soc International Conference.
(2004)
9. Torgerson, A.: Automatic thread stack management for resource-constrained sensor
operating systems. (2005)
10. Dunkels, A., Schmidt, O., Voigt, T.: Using protothreads for sensor node programming. In: Proceedings of the REALWSN’05 Workshop on Real-World Wireless
Sensor Networks. (2005)
11. Crossbow: http://www.xbow.com/. (website)
12. AVR-GCC: http://www.avrfreaks.net/AVRGCC/. (website)
13. Octacomm: http://www.octacomm.net/. (website)

