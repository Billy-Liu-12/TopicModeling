PK+ Tree: An Improved Spatial Index Structure
of PK Tree
Xiaolin Wang, Yingwei Luo*, Lishan Yu, and Zhuoqun Xu
Dept. of Computer Science and Technology, Peking University, Beijing, P.R.China, 100871
lyw@pku.edu.cn

Abstract. Spatial index is very important in GIS. PK tree and Hilbert R tree are
two well-known spatial index structures. Comparison operations are very little
in PK tree, while disk I/O operations are quite little in Hilbert R tree. PK+ Tree
is an improved spatial index structure from PK tree. In PK+ tree, Comparison
operations are less than in Hilbert R tree, while disk I/O operations are almost
the same as in Hilbert R tree.

1 Introduction
With the development of information technology about data mining and multimedia,
massive data processing gets more and more important in spatial processing. Spatial
indexing is a key issue for massive spatial data processing.
Many kinds of spatial index structures exist nowadays. They can be divided into
two main categories: partition tree and R tree. These two categories of spatial index
structure have their own weakness and strongpoint. PK tree and Hilbert R tree are two
efficient spatial index structures of each category.
In this paper, a new spatial index structure, PK+ tree, which are from PK tree, is introduced in order to improve storage usage, so that it may be more efficient for high
dimensional data. In the next section, the problems of PK tree are analyzed. In the
third section, PK+ tree is discussed in details. In the fourth section, the efficiency of
storage and query of PK+ tree are compared with of PK tree and Hilbert R tree.

2 PK Tree and Its Weakness
PK tree is an efficient spatial index structure of partition tree category. In PK tree, an
initial space cell C0 are required to enclosing all the data objects to be indexed. C0 can
be split into R=(rx, ry) sub cells C1, and so on, so that the width and height of each Ci
is 1/rx and 1/ry of Ci-1. Only those K-instantialable cells have their corresponding
nodes in PK tree.
A key issue of PK tree is that it’s poor efficiency of storage. The average node usage (ANU) is the percentage of valid entries to the capacity of entries in the tree. For
data points in two dimensional space, each node has the capacity to hold R(K-1) en*

Corresponding author: LUO Yingwei, lyw@pku.edu.cn.

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 511 – 514, 2005.
© Springer-Verlag Berlin Heidelberg 2005

512

X. Wang et al.

tries, but the ANU is only 40%. For the same data set, the ANU of a Hilbert R tree
may reach to 84% or 87%. When processing data object other than point, for example
curves or surfaces, the ANU of a PK tree can reach only 12%, while Hilbert R tree
may also reach around 85%. The poor efficiency of storage leads to more disk I/O
operations while access the index tree. For data point, the ANU of PK tree is half of
the ANU of Hilbert R tree, but PK tree yells more efficient query performance than
Hilbert R tree. But for curves or surfaces, the query performance of PK tree is much
poorer than Hilbert R tree. The main reason is that the ANU of PK tree is far more
lees than that of Hilbert R tree. With such poor ANU, PK tree are limited to be used
for high dimensional data object. To solve this problem, PK+ tree is introduced in this
paper aiming at improving the ANU.

3 PK+ Tree
The ANU of PK tree drops with large R=(rx, ry). If R can be limited to the smallest
value, then the ANU might be greatly increased. In PK+ tree, R is restricted to be no
more than 3. To partition a given space cell C in two-dimensional space, firstly C is
split into three cells at x dimension, then at y dimension, and then at x dimension, and
so on. The three cells are not symmetrical. Two cells of them are the two half of C,
while the third cell is C itself! But the third cell is not the same as C, since is hold all
data objects sits in C but not in the other two half cells. The third cell is called middle
cell, and the two half-cells are called left cell and right cell (or bottom cell and top
cell) correspondingly, as shown in figure 1.

Fig. 1. PK+ Tree Cell Splitting

PK+ tree also requires that any node in the tree is K-intantialable. Insertion or deletion is implemented with two steps. First, search from the root to find the proper node
to be modified, and modify it; then, trace back to the root and checking each node on
the path if it’s K-intantialable, if not, some promotion, division or deletion operations
will be done to keep all nodes K-intantialable. The process of K-intantialable checking in PK+ tree is the same as in PK tree, except that they apply different kinds of
splitting rules.

PK+ Tree: An Improved Spatial Index Structure of PK Tree

513

PK+ tree split the space cell at each dimension in turn, which makes a lower degree
of regularity of partition than PK tree, but the ANU is greatly increased. In PK+ tree,
the extent of a middle node overlaps with its sibling left (right) node. The overlapping
of nodes might reduce some query’s performance.

4 Performance Comparison
In the section, a series of experiments are done to examine the query performance of
PK+ tree. Two dimensional data objects in two-dimensional space are being used in
our experiment. A cluster data set from SEQUOIA 2000 Benchmark and a random
data set are used. In these experiments, we compare PK+ tree with corresponding PK
tree and 3-2 Hilbert R tree.
We count disk I/O operations and compare operations instead of measure the time
cost in queries as the measurement of performance, thus we avoid the effects of implementation issues to our experiments.
Since in PK tree and PK+ tree, theoretically, the ANU will never be large than
50%. To make the storage efficiently, two kinds of methods might be applied. One
method is to store each node in one or more disk pages according to the amount of
valid entries in each node (SNMP, Single-node-multi-pages). The other method is to
store several nodes in the same disk page if the total valid entries can be hold in one
disk page (MNSP, Multi-nodes-single-page).
4.1 Storage Usage
For a given data set, the storage usage is the total valid entries vs. the total entries
capacity of the index structure. ANU is used to describe the storage usage.
Table 1 shows the comparison of storage usage of PK tree, PK+ tree and Hilbert R
tree. SNMP is compared with MNSP to show the effect of MNSP. Since Hilbert R
tree is storage optimized, no more optimized method is considered in the comparison.
Table 1. ANU of PK+ tree, PK tree and Hilbert R tree

SNMP

MNSP

Cluster data

Random data

Cluster data

Random data

PK+ tree

46.37%

50.83%

67.62%

66.78%

PK tree
Hilbert R tree

12.95%
88.17%

12.69%
85.52%

25.49%

38.15%

Table 1 shows that, MNSP outperforms SNMP, but does not make the ANU of
PK+ tree reach the ANU of Hilbert R tree.
4.2 Query Performance
Our experiments show that, for both cluster data set and random data set, PK+ tree
greatly reduces disk I/O operations per query than PK tree, but has almost the same

514

X. Wang et al.

disk I/O operations per query as Hilbert R tree. Since the ANU of PK+ tree is approximately 75% of Hilbert R tree, it is obvious that PK+ tree requires much less
compare operations per query than that of Hilbert R tree. In more details, for small
query regions, PK+ tree yells less disk I/O operations than Hilbert R tree; for query of
inside, PK+ tree yells much less disk I/O operations than Hilbert R tree.

5 Conclusion
In this paper, an improved spatial index structure based on PK tree - PK+ tree is introduced. PK+ tree outperforms PK tree when used for high dimensional object indexing. PK+ tree has a higher ANU and hence requires less disk I/O operations in queries. Though disk I/O operations in queries of PK+ tree is almost the same as that of
Hilbert R tree, but Hilbert R tree yells a higher ANU, compare operations in queries is
more than that of PK+ tree. PK+ tree is perfect for application that cares both disk I/O
performance and CPU performance.

Acknowledgement
This work is supported by the National Research Foundation for the Doctoral Program of Higher Education of China under Grant No. 20020001015; the National
Grand Fundamental Research 973 Program of China under Grant No.2002CB312000;
the National Science Foundation of China under Grant No.60203002; the National
High Technology Development 863 Program under Grant No. 2002AA135330 and
No. 2002AA134030; the Beijing Science Foundation under Grant No.4012007.

References
1. Wei Wang, Jiong Yang and Richard Muntz: PK-tree: A Dynamic Spatial Index Structure
for Large Data Sets, Kluwer Academic Publishers (1997)
2. Wei Wang, Jiong Yang and Richard Muntz: Pk-Tree: A Spatial Index Structure For High
Dimensional Point Data, Kluwer Academic Publishers (2000).
3. Ibrahim Kamel and Christos Faloutsos: Hilbert R-tree: An improved R-tree Using Fractals,
Morgan Kaufmann Publishers Inc (1994).
4. Bernhard Seeger and Hans-Peter Kriegel: Techniques for Design and Implementation of
Efficient Spatial Access Methods, Morgan Kaufmann Publishers Inc (1988).
5. Andreas Henrich, Hanas-Werner Six and Peter Widmayer: The LSD Tree: Spatial Access to
Multidimensional Point and Non-point Objects, Morgan Kaufmann Publishers Inc (1989).

