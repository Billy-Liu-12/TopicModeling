A Hybrid Approach for Normal Factorization of
Polynomials
Nicos Karcanias1, Marilena Mitrouli2, , and Dimitrios Triantafyllou2
1

Control Engineering Centre, School of Engineering and Mathematical
Science, City University Northampton Square, London EC1V 0HV, UK
N.Karcanias@city.ac.uk
2
Department of Mathematics, University of Athens, Panepistemiopolis
15784, Athens, Greece
{mmitroul, dtriant}@math.uoa.gr
Abstract. The problem considered here is an integral part of computations for algebraic control problems. The paper introduces the notion of
normal factorization of polynomials and then presents a new hybrid algorithm for the computation of this factorization. The advantage of such
a factorization is that it handles the determination of multiplicities and
produces factors of lower degree and with distinct roots. The presented
algorithm has the ability to specify the roots of the polynomials without computing them explicitly. Also it may be used for investigating the
clustering of the roots of the polynomials. The developed procedure is
based on the use of algorithms determining the greatest common divisor
of polynomials. The algorithm can be implemented symbolically for the
speciﬁcation of well separated roots and numerically for the speciﬁcation
of roots belonging in approximate clusters.
Keywords: Polynomials, factorization, approximate computations,
greatest common divisor.

1

Statement of the Problem

Some of the key problems of algebraic computations are the computation of the
greatest common divisor (GCD), the computation of the least common multiple
(LCM) of a set of polynomials and the computation of the factors of a polynomial. The problem of ﬁnding the GCD of a set Pm,d , of m polynomials of
[s] of maximal degree d, is a classical problem that has been considered before,
see [2, 6, 8]. The numerical computation of GCD has been considered so far by
transforming it to an equivalent problem of real matrix computations (see methods such as Extended Row Equivalence and Shifting (ERES) [6], Matrix Pencil
see [2] and [8] for other methods). The advantage of real matrix computations
is that we can discuss the problem of approximate solutions and thus introduce
the notion of “approximate GCD”. In several engineering computations it is useful to deﬁne an approximate GCD of the set within a speciﬁed accuracy. This
This research was ﬁnancially supported by PENED 03ED740 (Greek Secretary of
Research and Technology).
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 399–406, 2006.
c Springer-Verlag Berlin Heidelberg 2006

400

N. Karcanias, M. Mitrouli, and D. Triantafyllou

approximate GCD can be used in several applications such as the deﬁnition of
the almost zeros of a given polynomial system see [1]. The ERES method carries
out succesfully the computation of approximate GCD. In [7] other methods for
computing approximate GCD are also proposed.
The problem of factorizing polynomials is within the general framework of
algebraic computations and it is crucial for determining Smith forms, solving
Diofantine equations and general polynomials, or rational matrix equations. Of
special interest is the problem of factorizing polynomials without resorting to
root ﬁnding, as well as handling issues of approximate factorizations, when there
is uncertainty on the exact values of the coeﬃcients. This paper deals with the
deﬁnition, the symbolic and numerical aspects of computation of a special factorization of polynomials, which is within the general factorization of polynomial,
and can be performed without resorting to procedures based on ﬁnding roots.
For every polynomial f (s) ∈ [s] there exist positive integers d1 , ..., dσ where
d1 > d2 > ... > dσ ≥ 1, such that f(s) may be expressed as
f (s) = e1 (s)d1 e2 (s)d2 ...eσ (s)dσ

(1)

where the polynomials {e1 (s), e2 (s), . . . , eσ (s)} are pairwise coprime and the
polynomial fˆ(s) = e1 (s)e2 (s)...eσ (s) has distinct roots.
The above factorization will be called a normal factorization of f(s) [3], (di , i ∈ σ)
will be called the power set and the set of polynomials {ei (s), i ∈ σ} will be
referred to as the base of the factorization. Such factorizations indicate the clustering of sets of roots, as this is indicated by the power set. Computing such
factorizations is the problem considered in this paper. More precisely, we develop an algorithm specifying the set {ei (s), i = 1, . . . , k} of polynomials and
the corresponding degrees {di (s), i = 1, . . . , k}. The advantage of such a factorization is that it handles the determination of multiplicities and produces
factors of lower degree and with distinct roots. The use of algorithms for computing GCD is central to the current method and methods such as ERES [6],
Matrix Pencil [2] etc may be used for this computation, and thus frequently lead
to “approximate” rather than exact evaluations of the GCD. It is clear that with
the notion of “approximate GCD” we also have the problem of deﬁning “almost
factorizations”of a polynomial. For approximate values of the GCD we deﬁne the
order of approximation as a factor of the polynomial. The new computational
procedure is demonstrated ﬁnally by a number of examples.
Throughout the paper [s] denotes the ring of real polynomials. The symbol
∂{f (s)} denotes the degree of a polynomial. If a property is said to be true for
i ∈ n, n ∈ Z + , this means it is true for all 1 ≤ i ≤ n. If g1 (s), g2 (s) ∈ [s] and
g1 (s) divides g2 (s) then we denote it by g1 (s)/g2 (s).

2

Background of Approximate Algebraic Computations

In engineering computations, the numerical procedures must have the ability
to work on data with numerical inaccuracies and thus lead to “approximate

A Hybrid Approach for Normal Factorization of Polynomials

401

algebraic computations”. In the sequel we study the notions of “approximate
GCD” and “approximate normal factorization”.
Let Pm,d = {pi (s) : pi (s) ∈ R[s] , i = 1, 2, . . . , m, di = deg{pi (s)}, d =
max{di , i = 1, 2, . . . , m}} be the set of m polynomials of R[s] of maximal
degree d. Given a set of polynomials ti (s) ∈ R[s], i = 1, 2, . . . , k, deﬁne a numerical procedure for the computation of their “approximate” GCD, and associated
factorization avoiding root ﬁnding.
Approximate GCD
The notion of the GCD of many polynomials is characterized by the property
that its computation is nongeneric; in fact, the set of polynomials for which a
nontrivial GCD (= 1) may be deﬁned is a set of measure zero. However, the need
for deﬁning notions such as “almost zeros” and “approximate GCD” has been
recognized as important in many applications. Methods computing the GCD of
the set P, which deploy relaxation of the exact conditions for GCD evaluation,
such as the ERES method [6] lead to expressions for the “approximate GCD”.
In [7] the “approximate GCD” problem has been considered in the context of
Euclidean division and for the case of two polynomials. Recently Karcanias etc
[4], introduced formally the notion of the “approximate GCD” and then developed a computational procedure that allows the evaluation of how good is the
given “approximate GCD” by estimating its strength of approximation.
2.1

Algorithm Approximate GCD

The Resultant Matrix Pencil Algorithm [5] appropriately modiﬁed allows the
capturing of “approximate GCDs” and this is summarized by the following algorithm applied on the Modiﬁed Sylvester Resultant [9] of the given polynomial
set and which exploits the notion of “near nullspace” of a matrix. The basic
steps are:
Step1: Deﬁne a threshold t > 0. Apply the SVD algorithm to S ∗ to deﬁne
a basis M for the right ‘near nullspace’ of the Sylvester matrix S ∗ constructed
from the given polynomial set.
Step2: Deﬁne the GCD Matrix Pencil Z(s) = sM1 − M2 ,where M1 and M2
are the matrices obtained from M by deleting the last and the ﬁrst row of M
respectively.
Step 3: Construct a matrix with elements all nonzero minor determinants d(s)
of Z(s) and compute its basis B.
Step 4: Apply the SVD algorithm to matrix B : B = U T Σ V . The corresponding to the largest singular value column of V deﬁnes the approximate GCD.
Step 5: Compute the angle of the spaces M1 and M2 as an indicator for the
strength of approximation.
The next example demonstrates the implementation of the above algorithm
to a computer.

402

N. Karcanias, M. Mitrouli, and D. Triantafyllou

Example 1. Consider the following set of polynomials :
{p1 (s) = s3 − 6 s2 + 11 s − 6, p2 (s) = s2 − 3 s + 2, p3 (s) = s2 − 2 s + 0.9999,
p4 (s) = s2 − 1}
The above set of polynomials does not have an exact GCD. We have the following modiﬁed Sylvester matrix :
⎡1

S

∗

⎢1
⎢
⎢
⎢1
⎢
⎢
⎢1
⎢
⎢
⎢0
⎢
⎢
= ⎢ 0
⎢
⎢0
⎢
⎢
⎢0
⎢
⎢
⎢0
⎢
⎢
⎣0

−6

11

−6

0⎤

−3

2

0

0⎥

−2 0.9999

0

0

0

−1

0

1

−6

11

1

−3

2

1

−2 0.9999

1

0

−1

0

1

−3

0

1

−2

0

1

0

⎥
⎥
⎥
⎥
0⎥
⎥
⎥
−6 ⎥
⎥
⎥
0⎥
⎥
⎥
0⎥
⎥
0⎥
⎥
⎥
2⎥
⎥
⎥
0.9999 ⎦
0⎥

11×5

∈

−1

Applying the SVD algorithm to S ∗ we obtain as numerical results the following
singular values and the matrix V are :
⎡
Σ

⎢
= ⎣

⎤

19.2719
0
0
0
0
0 8.6015
0
0
0
⎥
0
0 2.6935
0
0 ⎦ andV =
0
0
0 1.1627
0
0
0
0
0 0.0001

⎡

−0.0426 −0.1206 −0.4488
0.7630 0.4472
0.5225
0.6347
0.2096 0.4472
−0.4355
0.3864 −0.1408 0.4472
0.6516 −0.4942 −0.0828 −0.3526 0.4472
−0.2282
0.5279 −0.4895 −0.4793 0.4472

0.2834
⎢ −0.6642
⎣

⎤
⎥
⎦

The tolerance we use is 10−15 . The last singular value is 10−4 . If the threshold
t=0.0002 then the last singular value is smaller than t. The corresponding column
of V is the last one and so M is :
⎡
M

0.4472

⎤

⎡

⎢ 0.4472 ⎥
= ⎣ 0.4472 ⎦ , M1
0.4472
0.4472

=

⎣

0.4472
0.4472
0.4472
0.4472

⎤
⎦ , M2

⎡
=

⎣

0.4472
0.4472
0.4472
0.4472

⎤
⎦

The angle of M1 and M2 acts as an indicator for the approximation. Their angle
is: 0 (very good approximation).
The GCD Pencil and its basis matrix are correspondingly :
⎡
Z(s) = sM1 − M2 =

0.4472s − 0.4472

⎤

⎣ 0.4472s − 0.4472 ⎦ andB
0.4472s − 0.4472
0.4472s − 0.4472

⎡
=

0.4472 −0.4472
−0.4472
0.4472 −0.4472
0.4472 −0.4472

⎣ 0.4472

⎤
⎦

Applying the SVD algorithm to B we have :
Σ =

1.2649 0
0 0

and V =

0.7071 −0.7071
−0.7071 −0.7071

The maximal singular value is the ﬁrst one and the corresponding column of
V is also the ﬁrst. This columns gives the coeﬃcients of the GCD : 0.7071 and
-0.7071, which divided by 0.7071 give 1 and -1. So the GCD is s-1.

A Hybrid Approach for Normal Factorization of Polynomials

403

-Normal Factorization
Next we introduce the deﬁnition of the approximate normal factorization with
accuracy , or the -normal factorization.
For every polynomial f (s) ∈ [s] there exist positive integers d1 , ..., dσ where
d1 > d2 > ... > dσ ≥ 1, such that f(s) may be expressed as
σ

ei (s)di + Δ P (x)

f (s) =

(2)

1

where the polynomials {e1 (s), e2 (s), . . . , eσ (s)} are pairwise coprime , the polynomial fˆ(s) = e1 (s)e2 (s)...eσ (s) has distinct roots and ||Δ P || ≤ , where a
selected accuracy for the computation.

3

The Algorithm

Let f (s) ∈ [s] be a given polynomial. The following algorithm computes the
normal factorization of f (s). More speciﬁcally f (s) = e1 (s)d1 e2 (s)d2 ...eσ (s)dσ .
3.1

Algorithm NF

STEP 0: Compute the GCD of {f (0) (s), f (1) (s)}.
If the polynomials are coprime
f (0) (s) has well separated roots. Perform numerically or
symbolically STEPS 1 - 4
Else
compute numerically the approximate GCD.
STEP 1: Construct the associated set of f (s)
Gdf 1 = {g0 (s), g1 (s), ..., gd1 −1 (s), gd1 (s)}, :
gk (s) = GCD{f (0) (s), f (1) (s), ..., f (k) (s)}
where the index d1 is deﬁned from
d1 = mink gk (s) = 1
STEP 2: Deﬁne the prime set of f (s)
Tf = {t1 (s), t2 (s), ..., td1 (s)}, where
(s)
ti (s) = gi−1
gi (s) , i = 1, . . . , d1
STEP 3: Deﬁne the factorization set of f (s)
Pf = {pi (s), i = 1, 2, . . . , d1 }, where
tj (s)
pj (s) = tj+1
(s) , j = d1 , d1−1 , . . . , 1, td1 +1 = 1
STEP 4: From Tf construct the Ferrer diagram
Specify the index set
If = {(di , vi ), i ∈ σ, d1 > d2 > ... > dσ }
Form the normal factorization f (s) = e1 (s)d1 ...eσ (s)dσ as follows:

404

N. Karcanias, M. Mitrouli, and D. Triantafyllou

Construct the essential factorization Pf∗ of f (s)
Pf∗ = {pdi (s), i = 1, 2, ..., σ, d1 > d2 > ... > dσ ≥ 1}
base={ei (s) = pdi (s) : pdi (s) ∈ Pf∗ , i = 1, 2, . . . , σ}
power set= {di , i = 1, 2, . . . , σ}
vi =number of all e.d. of f (s) over C with degree di .
3.2

Numerical-Symbolical Results

The above method for N F evaluation has a hybrid nature. Its numerical part
was programmed in Matlab. The complexity is of order concerning mostly the
execution of the Matrix Pencil algorithm [2]. The algorithm was tested on a Pentium machine over several polynomials characterized by various properties. The
symbolical implementation of the method was performed using Maple. According
to the nature of the examples the numerical or the symbolical implementation
will be chosen.
Example 2.
Compute the normal factorization of the following polynomial with real coeﬃcients:
f (s) = s7 − 24.35s6 + 225.2s5 − 1021.225s4 + 2526.7875s3 − 3494.896875s2 +
2544.75s − 761.4
Implementing the algorithm numerically with internal required tolerance for the
GCD computation of order O(10−8 ) we obtain the following factors: (s−1.5)4 (s−
2.35)(s−8)2 (real roots well separated). The same result gives also the symbolical
implementation of the algorithm with increase of the required time.
Example 3.
This example demonstrates the ability of the method to distinguish between “almost equal factors”. Let us suppose that we are given the following polynomial:
f (s) = (s + 1)2 (s + 5)2 (s + 3)(s + )k
(i) For = 1.001 and k = 1 implementing the algorithm numerically with internal
required accuracy for the GCD computation of order O(10−12 ) we obtain the
following factors : (s2 + 6s + 5)2 (s2 + 4.001s + 3.003) We see that the ﬁrst factor
contains the product of (s + 1)(s + 5) whereas the second factor contains the
product of (s + 1.001)(s + 3). If we require to know the exact values of the roots
of f (s) we can now proceed computing the roots of the appearing factors which
as we can see are of rather lower degree i.e. 2nd degree each instead of 6th degree
that is the original polynomial.
(ii) For = 1.001 and k = 2 implementing the algorithm numerically with
internal required accuracy for the GCD computation of order O(10−12 ) we obtain
the following factors : (s3 + 7.001s2 + 11.006s + 5.005)2 (s + 3) We see that the
ﬁrst factor contains the product of (s + 1)(s + 5)(s + 1.001).
(iii) For = 1.000001 and k = 1 implementing the algorithm numerically with
internal required accuracy for the GCD computation of order O(10−12 ) using

A Hybrid Approach for Normal Factorization of Polynomials

405

he modiﬁed LU or QR factorization we obtain the following factors : (s +
1.00000029520885)3(s+5)2 (s+3) We see that the product (s+1)2 (s+1.000001) is
the six digit approximation of the ﬁrst appearing factor. Thus 1.00000029520885
is the approximate value of the three roots of f (s) that they belong to the same
cluster.
If we have polynomials with roots belonging in same clusters we can apply the
following Criterion:
The Clustering Criterion [3]: A polynomial f (s) ∈ R(s) has distinct roots if
and only if f (s) and f (1) (s) are coprime.
When we want to apply the numerical method for polynomials of rather high
degree problems might appear due to rounding errors since it will be required the
computation of several derivatives and their GCDs. Thus for such cases might
be better the symbolical computation as illustrated by the following example:
Example 4.
Compute the normal factorization of the following polynomial:
f (s) = (s − 2)15 (s − 4)5
Applying algorithm NF symbolically in Maple we get exactly as basic factors
of the above expanded polynomial the terms: (s − 2) and (s − 4) with degrees 15
and 5 respectively. From this example it is evident that implementing the method
symbolically we can determine the normal factorization of any polynomial of any
degree with well separated roots.
Example 5. Specify the root clustering of the following polynomial:
f (s) = s3 − 5.000001s2 + 7.000004s − 3.000003
Applying the Clustering Criterion we get that {f (s), f (1) (s)} have “almost
common factor” the polynomial s − 1.0000005 whereas {f (s), f (1) (s), f (2) (s)}
are coprime. Thus f (s) has an “almost common factor” of degree 2 and therefore its 2 roots belong in the same cluster. A representative of this cluster is
the value 1.0000005.Thus we attain the following almost factorization: f (s) =
(s − 1.0000005)2(s + λ) where λ is deﬁned by division or almost factorization. Note that theoretically the above polynomial is the product of the following factors: f (s) = (s − 1)(s − 1.000001)(s − 3). Thus f (s) has “almost common factors” (or “almost zeros”). Using the Clustering Criterion we determined
them. Applying the approximate resultant matrix pencil we get the the factor
s − 0.99999949999911 of degree 2.
Root clustering can also be applied to polynomials with complex conjugate roots.

4

Conclusions

An algorithm achieving the normal factorization of polynomials has been introduced. The algorithm may be worked out using only algebraic tools, such

406

N. Karcanias, M. Mitrouli, and D. Triantafyllou

as determination of GCD and symbolic computation of derivatives. The normal
factorization can be considered as a ﬁrst step into the factorization of polynomials, where multiplicities are computed ﬁrst and then root ﬁnding is reduced to
smaller degree and distinct root polynomials. The nature of the presented algorithm is hybrid. It can be applied symbolically or numerically according to the
given data and the required results. The comparison of the current approach with
other procedures that use diﬀerent approximate GCD computation techniques
is under study. The current approach also allows the study of root clustering,
since the approximate GCD allows the grouping of roots which are close to each
other.

References
1. Karcanias, N., Giannakopoulos, C., Hubbard, M.: Almost zeros of a set of polynomials of R[s]. Int. J. Control, 38, (1983) 1213–1238.
2. Karcanias, N., Mitrouli M.: A Matrix Pencil Based Numerical Method for the
Computation of the GCD of Polynomials. IEEE Trans. Autom. Cont., 39, (1994)
977–981.
3. Karcanias, N., Mitrouli, M.: Normal Factorization of Polynomials and Computational Issues. Computers and Mathematics with Applications, 45, (2003) 229–245.
4. Karcanias, N., Mitrouli, M., Fatouros, S., Halikias, G.: Approximate Greatest Common Divisor of many polynomials and generalised resultants. Computers and Mathematics with Applications, to appear (2006).
5. Karcanias, N., Mitrouli, M., Fatouros, S.: A resultant based computation of the
Greatest Common Divisor of two polynomials. Proc. of 11th IEEE Med. Conf on
Control and Automation, Rodos Palace Hotel, Rhodes, Greece, (2003b).
6. Mitrouli, Mm., Karcanias, N.: Computation of the GCD of polynomials using Gaussian transformation and shifting. Int. Journ. Control, 58, (1993) 211–228.
7. Noda, M., Sasaki, T.: Approximate GCD and its applications to ill-conditioned
algebraic equations. Jour. of Comp. and Appl. Math., 38, (1991) 335–351.
8. Pace, I., S., Barnett, S.: Comparison of algorithms for calculation of GCD of polynomials. Int. Journ. System Scien., 4, (1973) 211–226.
9. Triantafyllou, D., Mitrouli, M.: Two Resultant Based Methods Computing the
Greatest Common Divisor of Two Polynomials. In: Li, Z., Vulkov, L., Wasniewski, J. (eds.): Numerical Analysis and Its Applications. Lecture Notes in Computer Science. Vol. 3401, (2005) 519–526.
10. Turnbull, H., W., Aitken, A., C.: An Introduction to the Theory of Canonical
Matrices. Dover Publ., New York (1961).

