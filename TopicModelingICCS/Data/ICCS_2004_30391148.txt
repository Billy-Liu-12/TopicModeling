An Attributable Role-Based Access Control for
Healthcare
Dirk Schwartmann
German Aerospace Center (DLR), Cologne, Germany
Dirk.Schwartmann@dlr.de

Abstract. Role Based Access Control (RBAC) has the potential for reducing the complexity and total cost of security administration. Even
though RBAC implementations aim on administrating large scale systems, they have a shortcoming in common. They do not allow to deﬁne
attributable roles and permissions. But such roles are very common in
our thoughts and language. When we say “attending physician of patient
x”, we mean a role attending physician with all associated permissions
to fulﬁll the treatment of patient x. Because the resulting permissions
only diﬀer in the restriction to a particular patient, it is desirable that
attributes like “patient x” are used in roles and permissions to restrict
the rights to access only data related to that patient. This paper shows
how attributes can be applied to RBAC, in order to reduce the total
number of role- and permission-objects in security administration.

1

Introduction

One of the most challenging problems in modern healthcare is the security administration of large networked systems containing patient data. Today’s security
administration is usually based upon access control lists for each user, leading
to large time exposures for updating access control lists on the data, creating
new and deleting old users.
Role Based Access Control (RBAC) has the potential to reduce the complexity
and total cost of security administration. Access Rights are deﬁned by User-toRole and Role-to-Permission assignments. This reduces the need to administrate
rights at data level (e.g. ﬁles on a ﬁle-system). Even though RBAC implementations aim on administrating large scale systems, they have a shortcoming in
common: they do not allow to deﬁne attributable roles and permissions. However,
such roles are very common in our thoughts and language. We say “attending
physician of patient a” and “quality assurance oﬃcer in project x”. It is desirable that attributes like “patient a” restrict the rights to access only data related
to that patient to fulﬁll the least-rights-principle. That means the user should
possess the minimum rights to fulﬁll the current task. A static role “attending
physician” alone would break this rule. A person in this role would have access
to data of all patients. So, the problem must be solved in a diﬀerent way. The
simple solution would be the introduction of a static role “attending physician
of patient x” with appropriate permissions to restrict access to the data of this
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 1148–1155, 2004.
c Springer-Verlag Berlin Heidelberg 2004

An Attributable Role-Based Access Control for Healthcare

1149

patient within all patient records. But this is not a very good idea. Assume the
amount of administration in a large hospital with hundreds of patients. For each
new patient a new attending physician role would be created.
In August 2001 the National Institute of Standards and Technology (NIST) published a proposed standard for RBAC that includes the fundamental set of
RBAC components (see [1]). In this paper an extension to the standard with
attributable permissions and roles will be introduced. At the time of role activation the attribute values are passed on to it and are subject to permission
checks. So, diﬀerent attribute values lead to diﬀerent access rights. As a result
a single attributable role “attending physician” will be enough for a hospital.
Thus, the amount of roles and permissions is reduced dramatically resulting in
less error-prone administration and in an enormous reduction of the total costs
of security administration.

2

Overview of RBAC

Role-based access control (RBAC) is a proven alternative to traditional access
control mechanisms like discretionary access control (DAC) and mandatory access control (MAC). RBAC allows to represent the natural organizational view
upon access rights. Roles are used to describe the functions of individuals with
associated permissions. In RBAC, permissions are deﬁned as operations on objects. Users are assigned to roles and are granted permissions this way. During
sessions users activate roles to fulﬁll job functions with distinct rights.
Figure 1 gives an overview of the conceptual items and their interrelations
in hierarchical RBAC of the proposed NIST standard. The hierarchical RBAC
extends the so-called core RBAC with role hierarchies. General role hierarchies
provide support for an arbitrary partial order to serve as the role hierarchy which
models inheritance of permissions and, in the opposite direction, user membership among roles. Because it is needed further down in this paper the deﬁnition
of general role hierarchies of the proposed NIST standard is presented here:
Definition 1. General Role Hierarchies
RH ⊆ ROLES × ROLES is a partial order on ROLES called inheritance
r2 only if all permissions of r2 are also
relation, written as , where r1
permissions of r1 , and all users of r1 are also users of r2 .
Formally: r1 r2 ⇒ authorized permissions(r2 ) ⊆
authorized permissions(r1 ) ∧ authorized users(r1 ) ⊆ authorized users(r2 )

3

Authorization on Life-Long Health-Records

The aim of health-records for every single patient that are to be used in shared
care throughout the whole life of each person, bears some problems. Envisioning
the existence of a (distributed) electronic health record for each living person, the
authorization mechanism must allow access to each patient-record in a treatment
case. It is clear that this cannot be fulﬁlled by introducing a static role “treating
physician of patient x” for each patient x in practice. The number of roles in

1150

D. Schwartmann
Role Hierarchy
Permission
Assignment

User
Assignment
USERS

ROLES

user_sessions

OPS

session_roles

OBS

PRMS

SESSIONS

Fig. 1. Hierarchical RBAC

IT-systems would steadily increase. As a consequence security administration
would become a diﬃcult task and no matter how eﬃcient concrete authorization
sub-systems would be implemented, the large number of roles would have a very
negative impact on the time required to make concrete permission decisions.
Introducing a single role “treating physician” to permit access to every healthrecord is not a solution. Not only the possible infringement of a person’s individual rights through access to a (distributed) life-long health record outside a
treatment case is problematic. From the sight of security this role is in fact a
great danger. An unauthorized person that possesses such a role could access
healthcare data of every living individual.

4

Attributable Permissions and Roles in RBAC

In this section an attributable version of RBAC will be introduced. Attributedeﬁnitions associated to permission objects are used to deﬁne classes of permissions. The assignment of permissions with attribute-deﬁnitions to roles constrains
role activation. During activation within a session conforming Attribute-Values
must be given in a role-activation-context. The attribute-values are evaluated by
the permissions during run-time. Figure 2 gives an overview of the connections
between the conceptual items in the RBAC-Extension introduced herein. In the
following sections the items of the concept are discussed.
4.1

Attribute-Definitions and Attribute-Values

An attribute-deﬁnition holds the unique name and type of the attribute within the authorization subsystem. An attribute-deﬁnition can be shared among
several permissions. Typical examples for attribute-deﬁnitions in healthcare
would be patient-identiﬁcation and treatment-case. Permissions with attributedeﬁnitions allow to deﬁne classes of permissions analogous to classes in objectoriented design. This approach reduces the number of permission objects to
administrate and allows to introduce conforming attribute values.

An Attributable Role-Based Access Control for Healthcare

1151

Fig. 2. Extended RBAC with Attributes

Definition 2. Attribute-Definition
An attribute-definition must allow at least a single attribute-value. As a consequence the set of possible attribute-values for an attribute-definition must not be
empty.
An attribute-value simply consists of an association to an attribute-deﬁnition
and of a value conforming to that deﬁnition. Formally, the set of all attributedeﬁnitions and all attribute-deﬁnitions of a permission is deﬁned as follows:
Definition 3. Set of all attribute-definitions
Let AD be all attribute-definitions of the authorization sub-system.
Definition 4. Attribute-definitions of a permission
ADP : P RM S → 2AD ,
∀p ∈ P RM S : ADP (p) = {ad ∈ AD | ad is part of aggregate p}
4.2

Activation-Context

Activation of a role is constrained by all attribute-deﬁnitions that is implicitly
attached to it through permission assignments.
Definition 5. Direct attribute-definitions of a role
DADR : ROLES → 2AD ,
∀r ∈ ROLES : DADR(r) = {ad ∈ AD | ad ∈ ADP (p) ∧ (p, r) ∈ P A}
Also all attribute-deﬁnitions of inherited roles are inherited and thus become
attributes of a role. Now the complete set of attribute-deﬁnitions of a role can
be deﬁned:
Definition 6. Attribute-Definitions of a Role
ADR : ROLES → 2AD ,
∀r ∈ ROLES : ADR(r) = r ∈ROLES:r r DADR(r )

1152

D. Schwartmann

Upon construction this set holds all attribute-deﬁnitions from the role hierarchy
following the role inheritance structure as deﬁned by the general role hierarchy
of the proposed RBAC standard.
Role activation then looks like this: for each attribute-deﬁnition of a role
exactly one conforming attribute value must be given in the activation-context.
Sets are possible through multiple instances of activation-contexts. For example, to allow a physician to be attending physician of patients A, B and C, an
activation-context is created for each patient. Activation-contexts serve only a
single role and are created and ﬁlled before that role can be activated. Activation of a role requires that the activation-context holds attribute-values for all
attribute-deﬁnitions of that role. Formally the set of attribute-values in an activation context and the constraints on role activation are deﬁned as follows:
Definition 7. Attribute-values of an attribute-definition
∀ad ∈ AD let AV (ad) be the (non-empty) set of all possible attribute-values of
ad.
Definition 8. Activation contexts of a role in a session
∀s ∈ SESSSION S∀r ∈ ROLES : ACs (r) := Set of activation-contexts for role
r in session s.
Definition 9. Attribute-values of activation-contexts for a role r in session s
∀ac ∈ ACs (r)∀ad ∈AD :
 av ∈ AV (ad) if ad ∈ ADR(r) and ac has value for ad
if ad ∈ ADR(r), but ac has no value for ad
values,r (ac, ad) = ∅

∅
otherwise
Definition 10. Activation constraint on roles
Let ac be an activation-context for role r The role r can be activated in a session
s if and only if:
∃ac ∈ ACs (r)∀ad ∈ ADR(r) : values,r (ac, ad) = ∅
A role can only be activated within activation-contexts that fulﬁll the last deﬁnition.
4.3

Restriction of Attribute-Values

In most cases the security policy requires that the possible attribute-values shall
be restricted. The user-assignment object can hold a list of allowed attributevalues for each attribute-deﬁnition of a role. The list may also be inverted to
deﬁne only forbidden ones, or a combination of both lists can be used. For example, the role “emergency-doctor” would not restrict access to health-records
of patients, while the user-assignment object of the role “attending physician”
might hold only the IDs of the patients which the physician is currently treating.

An Attributable Role-Based Access Control for Healthcare

1153

The restriction on attribute-values using the user-assignment object is easy and
still very powerful. Sophisticated implementations might use X509 attribute certiﬁcates [4] to deﬁne the allowed value-set. An approach to use such certiﬁcates
for RBAC is already existing in another project that uses attribute certiﬁcates
to administrate RBAC completely [3].
4.4

Role-Delegation in Attributable RBAC

The delegation of roles from one user to another requires two steps. First, a userassignment must be created. Second, the according attribute-value-lists must be
copied from the delegating user’s user-assignment object to the user-assignment
object of the delegee.
4.5

Checking Permissions in Attributable RBAC

To check permissions within a speciﬁc session the authorization engine uses the
authorization-context(s) of activated roles. The algorithm is as easy as follows:
1. Retrieve all activation-contexts from the session that belong to activated
roles. The set shall be ActivatedACs . continue with
2. For each activation-context ac ∈ ActivatedACs do
a) Get role from ac. Let r be the role.
b) Get assigned permissions for role r. Let P A the set of assigned permissions.
c) For each p ∈ P A do
i. Get all attribute-deﬁnitions from p. Let D be this set.
ii. For all d ∈ D retrieve the value from ac building a set V .
iii. use set V to evaluate the permission upon the information space
The diﬀerence between standard RBAC permission checks and the algorithm
above is that one has to retrieve the values from the activation context before
the permission can be evaluated upon the information space. But the values
can easily be cached at the permission objects after the ﬁrst time. Compared to
regular permission objects only one indirection is still necessary, then. This is
because several activation-contexts can share a permission object with diﬀerent
values assigned. Because the computational cost of this is constant (pointer
arithmetic) this indirection can be neglected in practice.

5

Example Reducing Role- and Permission-Objects

Let us consider a small part of a role hierarchy in an hospital that is conforming
to the least-privilege-principle and uses static roles and permissions. That means roles and permission without attribute-deﬁnitions, as introduced herein. In
speciﬁc the least-privilege-principle implies that there would be roles and permissions for each single patient. Figure 3 shows this situation.
With the attributable RBAC approach introduced in this paper the roles and
permissions reduce to only two instances as shown in Fig. 4. The beneﬁt for

1154

D. Schwartmann

Attending Physician
Patient 1512

Attending Physician
Patient 2755

PA

PA

Attending Physician
Patient 8928

PA

Permission
Patient 1512

Permission
Patient 2755

Permission
Patient 8928

resulting
access permissions

resulting
access permissions

resulting
access permissions

Patient 1512
Data
Patient 8928
Data
Patient 2755
Data

Health−Records

Fig. 3. Extended RBAC with Attributes

security administration becomes clear if one thinks about a large hospital with
thousands of health-records for patients. If for example a revision of the hospital’s security-policy would require to change the permission objects of all patients
then either an administrative batch job would be necessary to adapt the permission objects of all patients or it would take a very long time to update the
authorization rules. With attributable RBAC such changes would only aﬀect
a small number of objects. In the example case only one object compared to
thousands.

6

Summary and Outlook

The extension of RBAC with attributes on permissions and roles is very eﬀective. In large-scale systems the usually extremely high number of permissions
and roles can be reduced to a much smaller amount which is easier to administrate and thus less error-prone.
Another advantage of the attributable RBAC is that it is ready for working
together with attribute certiﬁcates. The newest health professional cards in
healthcare are already smartcards with X.509 certiﬁcates and asymmetric key
pair. This will allow physicians to generate valid attribute certiﬁcates holding
attribute-values according to attributable RBAC as described here. Many tasks
can easily be done then. The implementation of referals, second opinions, de-

An Attributable Role-Based Access Control for Healthcare

1155

Attending Physician
Attribute: Patient−ID

PA

Permission
Attribute: Patient−ID

access decision using attribute
Patient−ID

Patient 1512
Data
Patient 8928
Data
Patient 2755
Data

Health−Records

Fig. 4. Reducing role- and permission-objects with attributable RBAC

legation of cases, etc. can all be done with the same technical approach using
secure attribute-certiﬁcates without the need to administrate the authorization
rules by hand.

References
1. David F. Ferraiolo and Ravi Sandhu and Serban Gavrila and D. Richard Kuhn
and Ramaswamy Chandramouli: Proposed NIST Standard for Role-Based Access
Control. ACM Transactions on Information and System Security, Vol. 4 (2001)
224–274
2. W. Essmayr and E. Kapsammer and R.R. Wagner and A.M. Tjoa: Using RoleTemplates for Handling Recurring Role Structures. 12th IFIP WG 11.3 Conference
on Database Security, Chalkidiki, Greece, July 15-17, 1998
3. D.W.Chadwick, O.Otenko: The PERMIS X.509 Role Based Privilege Management
Infrastructure ISI, University of Salford, Salford, M5 4WT
4. Farrell, S., and R. Housley: An Internet Attribute Certiﬁcate Proﬁle for Authorization, RFC 3281, IETF, April 2002.

