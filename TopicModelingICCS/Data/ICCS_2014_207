Procedia Computer Science
Volume 29, 2014, Pages 1546‚Äì1556
ICCS 2014. 14th International Conference on Computational Science

A Framework for Evaluating Skyline Query over
Uncertain Autonomous Databases
Nurul Husna Mohd Saad1, Hamidah Ibrahim1, Ali Amer Alwan2,
Fatimah Sidi1, Razali Yaakob1
1

Universiti Putra Malaysia, Selangor, Malaysia
International Islamic University Malaysia, Kuala Lumpur, Malaysia
nhusna.saad@gmail.com, hamidah.ibrahim@upm.edu.my, ali83_upm@yahoo.com,
fatimah@upm.edu.my, razaliy@upm.edu.my
2

Abstract
The perception of skyline query is to find a set of objects that is much preferred in all dimensions.
While this theory is easily applicable on certain and complete database, however, when it comes to
data integration of databases where each has different representation of data in a same dimension, it
would be difficult to determine the dominance relation between the underlying data. In this paper, we
propose a framework, SkyQUD, to efficiently compute the skyline probability of datasets in uncertain
dimensions. We explore the effects of having datasets with uncertain dimensions in relation to the
dominance relation theory and propose a framework that is able to support skyline queries on this type
of datasets.
Keywords: Autonomous Database, Data Management, Probabilistic Skyline Queries, Uncertain Dimensions

1 Introduction
Recent approaches towards intuitive information systems and the integration of user preferences
lead to skyline queries. The skyline retrieval paradigm has received a lot of attention since a decade
ago as it proved especially useful for personalization issues [1, 2]. Skyline queries introduce the notion
of dominated objects under Pareto optimality. In a database of multi-dimensional objects, the skyline
queries performed on the underlying database would return a set of objects that is the best trade-offs
between different dimensions. For example, consider a database that contains information on hotel‚Äôs
room rate per night and distance to the beach. Figure 1 shows each record of the database that is
represented as a point in a data space consisting of those two dimensions. A user may posed a query
such as ‚Äúfind me hotels that are as cheap as possible and as close as possible to the beach‚Äù. Now, the
query itself can be understood differently depending on the user, the user might have wanted the
cheapest price a hotel can offer with the hotel being not really close to the beach, or the user would

1546

Selection and peer-review under responsibility of the ScientiÔ¨Åc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.140

A Framework for Evaluating Skyline Query ...











Saad et al.











	

	



































	


	







Figure 1: Skyline example

have been satisfied with paying extra cost for the hotel as long as it is as near as possible to the beach.
Furthermore, it is almost impossible to answer the query of how much cheaper and nearer a hotel
should be. With skyline query, it will retrieve all hotels that are either cheap or near to the beach (or
both, if possible) without there being other hotels that are cheaper and nearer to the beach.
However, performing skyline queries on autonomous databases is not as straightforward as
previously discussed. As more and more data becomes accessible via web servers, information has to
be efficiently retrieved from these autonomous databases. In autonomous databases, incompleteness
and uncertainty could not be avoided where the integration of data from various heterogeneous
schemas is essential.
Uncertainty in autonomous databases is not surprising as it can arise in a variety of scenarios. One
of the many scenarios can be seen when organizations attempted to share data stored between different
databases, where these databases are individualistically developed and maintained to cater the needs of
a single organization. The exchange of data between underlying databases could be challenging due to
not only because of the dissimilarities in the representation of data, but also due to the subtle
dissimilarities in the intended interpretation of the data. For example, in the apartment for rent domain,
web servers such as Zillow.com have restricted the values for the dimensions of apartment‚Äôs rental
price and square feet of apartment to be a deterministic value, while Apartmentlist.com allows both of
the underlying dimensions to be ambiguous which are represented in continuous real range.
Integrating data from these two databases would cause uncertainty in each dimension as now the data
are represented in two different forms; a deterministic value and a continuous real range. Attempting
to perform skyline queries on this kind of data would be challenging due to the dissimilarities nature
of data ‚Äì we could be attempting to compare apples with oranges.
One na√Øve approach to avoid the uncertainty is to use an automated translator or perform digital
curation to reformat data from one representation to another. This approach has such an obvious
drawback, in that the transformation of data does not guarantee that the combined, transformed data
are meaningful, and thus, performing skyline queries on the underlying data would as well incur
inaccurate result of skyline objects. Although there has been research done on handling uncertainty in
skyline query processing, much of it hold onto the assumption that the occurrence of uncertainty in a
dimension would mean all values under that dimension is represented as a continuous range.
Unfortunately, such approaches do not capture well the nature of autonomous databases, where
imperfections of data caused by ambiguous values are inherent in today‚Äôs real world application.
To overcome these limitations, we present SkyQUD, a framework for progressively evaluating
skyline queries over uncertain autonomous databases. To avoid transforming data into meaningless

1547

A Framework for Evaluating Skyline Query ...

Saad et al.

information during data integration in autonomous databases, SkyQUD instead directly performs
skyline queries on integrated data as presented. Without loss of generality, we adopt the assumption
that incompleteness during data integration does not occur. Incompleteness may occur due to several
reasons such as incomplete data entry, or dissimilarities in schemas.
Overall, our contributions are briefly described as follows:
‚Ä¢

‚Ä¢
‚Ä¢

To the best of our knowledge, SkyQUD is the first framework that can evaluate skyline
queries over data with uncertain dimensions. Subsequently, it is suitable for performing
skyline queries on uncertain autonomous databases, without having to tweak the data in
order to conform them to a specific form. Note that this framework is not restricted to
only the underlying environment, but it can as well be implemented for other
environment with uncertain dimensions such as distributed databases, probabilistic
database, moving data in sensor networks, and data in weather forecasting.
We define the concept of uncertain dimensions as well as dominance relation that is able
to capture dominance between data in uncertain dimensions.
We present a two-phase framework that integrates the traditional skyline method and the
work proposed by Khalefa et al. [17] together with our proposed method. We show how
the single framework can support skyline queries on uncertain dimensions.

The rest of the paper is organized as follows. We give an overview of existing approaches for
skyline query processing in uncertain environment in Section 2. Section 3 covers the preliminaries to
the basic of traditional skyline processing as well as the proposed skyline concept with respect to our
problem and our solution. Our framework's algorithm is studied in Section 4. Finally, Section 5
concludes the paper.

2 Related Work
Various existing works of skyline queries have been introduced in the database field. The skyline
technique identifies a set of objects, S, in such a way that they are not dominated by the other objects
in the dataset. In other words, an object w is preferred over another object v if and only if w is better
than v strictly in at least one dimension and w is better than or equal to v in all other n dimensions [3,
4, 5, 6, 7, 8]. Over the years, several algorithms have been proposed based on the skyline preference
technique such as Block-Nested-Loop (BNL) [7], Divide-and-Conquer (DC) [7], Linear Elimination
Sort for Skyline (LESS) [9], Branch-Bound-Skyline (BBS) [10], SkyCube [7], and Sort and Limit
Skyline algorithm (SaLSa) [11] but these algorithms are specifically created to cater only certain and
complete data.
To the best of our knowledge, there has been no previous work that addresses the case of skyline
query on uncertain data in a dimension. Though, there was one work that deals with the uncertainty of
data [12], but it has been addressed in a different context. Their work is limited only to the case of
ranking queries while our work supports the case of skyline queries. The work by Pei et al. [13] was
the first work that has introduced the notion of probabilistic skyline in the context of uncertain data in
discrete domains where each object is associated with probability distributions over a set of possible
values called instances. For example, consider the case of analyzing the statistics of different NBA
players for the number of assists, rebounds, and baskets. It is unlikely that a single player will achieve
the best performance in all respects. Each player is now associated with an instance to represent
records for each game that has been played. This pioneering work has then inspired several other
works in the same context [14, 15, 16], however, all these works deal with uncertain data that is off a
different platform than the uncertain data in autonomous databases.

1548

A Framework for Evaluating Skyline Query ...












	 

Saad et al.




	























	





	















	












	

	
















	










	
























Figure 2: Example of 2-dimensional dataset with uncertain dimensions

The work by Khalefa et al. [17] has also introduced an interesting concept of probabilistic skyline
but in a different context than the previous works. This work was influenced by existing works [18,
19, 20] at the time where these works are only limited to the simpler case of nearest-neighbor queries.
Although the work by Khalefa et al. [17] is focusing on uncertainty in continuous domains where the
uncertain data is represented as continuous range of values, however, their work is restricted to
uncertain dimensions with the underlying dimensions having all values in the form of real intervals.
This approach is not in agreement with the nature of autonomous databases as discussed previously.

3 Preliminaries
The main idea in evaluating skyline queries is to capture the dominance relationship between a set
of objects. Here we will define the concept of dominance relation and skyline query that was formally
coined by B√∂rzs√∂nyi et al. [7]. Then, we will present the concept of uncertain dimensions in respect to
the problem described in previous section, as well as introducing the concept of skyline query for
uncertain dimensions.
Definition 1 ‚Äì Dominance Relation For two d-dimensional objects           and w
       ,  is said to dominate  (formally written as   , where we assume less is much
preferred) if (i)       ,    and (ii)       ,    .
The above definition outlines the concept of dominance relation between two objects. Although it
assumes that lesser values are preferable, the concept above can be easily modified in a query where
larger values are much preferred instead. This concept of dominance relation is used in
conceptualizing the skyline query.
Definition 2 ‚Äì Skyline Query Given a set of objects O, an object   O is a skyline object if there
exists no other object   O that dominates . The skyline on O is the set of all skyline objects.
Applying this definition, we would say that a skyline query over a set of objects presented in
Figure 1, where we assume minimum values are preferred in both dimensions, would return a set of
skyline objects {M, L, K, J}. Now these two concepts are quite clear to be applied to datasets with
deterministic values. However, what if the datasets incorporate uncertainty in its data in the form of
continuous ranges?

1549

A Framework for Evaluating Skyline Query ...

Saad et al.

Definition 3 ‚Äì Uncertain Dimensions Let  be a  -dimensional database relation. A dimension
   where      is said to be uncertain (denoted U( )) if it has one or more values   
where      that are represented as a continuous real range (denoted U( )); otherwise it is
considered as a certain dimension. The continuous real range U( ) is modeled as a probability
density function defined on the real range    where  is the lower-bound value of U( ) and
 is the upper-bound value of U( ).
The preceding definition assumes that uncertain dimensions are dimensions that contain one or
more values that are represented as continuous real ranges instead of deterministic values. Values that
are of a continuous range form will definitely induce a probability density function over the range
capturing the likelihood of possible values. Given the nature of the uncertain dimensions, the results of
skyline query performed on this type of dimensions are bound to be probabilistic, since each object
with continuous range is now associated with a probability value of it being a query answer.
Therefore, we have defined our skyline query for uncertain dimensions to be as follows:
Definition 4 ‚Äì Skyline Query on Uncertain Dimensions Given a d-dimensional dataset O of
database  where there exists at least one U(   . An object   O is considered as a skyline
object if it (i) has a probability of not being dominated by other object   O more than a threshold
value  and (ii) has a calculated probability error less than or equals to a tolerance value .
For ease of description, we assume that each object in a 2-dimensional dataset may have two or
less uncertain dimensions. This will lead to each object in the dataset O having different forms such as
either (i) (U( , U( ), (ii) (U( ,  ), (iii) ( , U( ), or (iv) ( ,  ). To retrieve the skyline
objects from the underlying dataset would be almost impossible, with each object having different
forms as well as having to take into consideration the probabilistic nature caused by uncertain
continuous range. To simply replace the continuous ranges with a deterministic value would cause a
problem as the values distribution over the range and how the ranges intersect could not be captured
for ranges with large variance. Thus, we take advantage of integrating the threshold  and tolerance 
values that have been specified together in the user query. To explain our approach, consider the set of
objects in Figure 2 where both dimensions Price and Sq. Ft are considered as uncertain dimensions.
With this in mind, how do we clarify with certainty that, for example, object A definitely dominates
object B, and vice versa, or that object F dominates objects K with 100% probability? It might not be
impossible to determine the most dominance objects out of all the objects, but it certainly is not as
straightforward as the basic concept of the skyline dominance relation.
To overcome these limitations, we propose to partition the dataset of objects into distinct groups
depending on the form that each object applies to, and then applying several different skyline
techniques to retrieve the local skyline in every group. Using the running example in Figure 2, we
identified four distinct groups where each group hosts objects such that each object conformed to the
form of either (i) (U( , U( ), (ii) (U( ,  ), (iii) ( , U( ), or (iv) ( ,  ).
To facilitate the dominance relation in each group, we simply adopt the traditional skyline
computation [7] for group of data with the form of ( ,  ) since the structure of objects in this group
matched perfectly with existing work of traditional skyline computation. In our study so far, we have
found that the methods proposed by Khalefa et al. [17] can be integrated smoothly into our work in
order to compute the probabilistic skyline on groups of data with the form of either (U( ,  ), ( ,
U( ), or (U( , U(  since their work is the nearest to our work. We found that, although the
work by Khalefa et al. [17] can be adopted into our work, still their proposed techniques could not be
used on computing skyline on uncertain dimensions, as it will result in erroneous skyline probability
computation. After dominance relation in each group has been determined and a set of skyline objects

1550

A Framework for Evaluating Skyline Query ...

Saad et al.

Figure 3: SkyQUD framework

is retrieved from each group, we proceed to combine those retrieved objects into a global group and
perform a dominance relation technique and a more refined probability calculation that is able to cater
the objects that have different characteristics in each dimension.

4 The SkyQUD Framework
In this section, we present the SkyQUD framework for uncertain skyline computation on uncertain
dimensions. Uncertainty in dimensions induces probability over data and to compute an exact
probability precision on these data would be exponential in terms of cost and time. Therefore, we
present our framework which would gradually compute probability of objects to be a skyline object.
The framework of the SkyQUD is presented in Figure 3. Our methodology consists of two consecutive
phases, harvesting and strict selection:
Phase 1: Harvesting. This phase performs a preliminary elimination round to isolate skyline
objects that are most important or useful. Massive harvesting of bad or uninteresting objects will
mostly occur in this phase.
Phase 2: Strict Selection. This phase is responsible to extract the most dominant skyline points
that meet the required threshold value as well as having a guarantee that the calculation of skyline
probability is still lesser than the tolerance value..

4.1 Harvesting Interesting Objects
This phase employs a simple and efficient probability calculation in order to achieve two main
objectives: (i) to avoid the expensive probability computation on all skyline points and (ii) to reduce
the number of comparisons performed between skyline points by massively harvesting out all the bad

1551

A Framework for Evaluating Skyline Query ...

Saad et al.

Algorithm 1 SkyQUAD(UD : uncertain dimension data set , H : threshold , E : tolerance )
1. Initialize S : Skyline , IG : IntegratedGroup and DG : DistinctiveGroup
2. for each object 	  
 do
Apply Distinctive Partitioning
3.
4. for each group         do
5.
for each object    do
6.
Apply Range Reduction
if upper limit W < H then Remove W and continue to next object W
7.
8.
Apply Probability Dependency
9.
if upper limit W < H then Remove W and continue to next object W
10.
while upper limit W > E do
11.
Apply Probability Breakdown
12.
if upper limit W < H then Remove W and continue to next object W
13. for each group         do
14.
for each object    do
15.
if upper limit W > H then
16.
Add W to IG
17. for each object    do
18.
Apply Range Reduction with Continuity Correction
19.
if upper limit W < H then Remove W and continue to next object W
20.
Apply Probability Dependency with Continuity Correction
21.
if upper limit W < H then Remove W and continue to next object W
22.
while upper limit W > E do
23.
Apply Probability Breakdown with Continuity Correction
24.
if upper limit W < H then Remove W and continue to next object W
25.
Add W to S
26. return S

objects (i.e., objects that have a probability that is less than the threshold value). Assuming that the
sources of our dataset are from autonomous databases, where each database has different scheme. To
directly perform a skyline dominance relation on data that have been integrated would be impossible
and the execution of probability computation would be prohibitively expensive. To avoid this, we
present four methods (distinctive partitioning, range reduction, probability dependency, and
probability breakdown) to show how we can efficiently and progressively compute the skyline
probability of each object.
Distinctive Partitioning. This method is designed to first categorize the dataset into different
groups before any skyline dominance relations are performed. In the running example in Figure 2, we
have identified four different groups based on the characteristic of each object. We also assume that an
object has a uniform probability distribution of being anywhere in its uncertainty range, as well as for
all dimensions, minimum values are preferred for our skyline computations.
Range Reduction. Having four groups of objects with different characteristics, different
dominance relation techniques and skyline probability computations are needed to cater each group. In
the first group, where it satisfies the form of ( , ), the conventional dominance relation technique is
sufficient enough to be implemented to this group since it is such a straightforward method without
having to take into account the problem of continuous real range. The conventional dominance

1552

A Framework for Evaluating Skyline Query ...

Y

Q

Y

R

Saad et al.





X

l.Q

X

R

X

u.Q

Figure 4: Example of overlapping objects from two different forms

relation states that in a dataset D, skyline objects are those objects that are not dominated by any other
objects. An object VD is said to be dominated by another object WD in an n-dimensional dataset
if V is worse than or equal to W in n dimensions, and is worse than W in at least one dimension. If
these conditions are met, then object V would be filtered out at this stage as V will not have a sliver of
a chance to dominate any other objects in future. The transitive relation, where A < B and B < C, then
A < C, summed up perfectly the process of filtering out dominated objects without having to compare
them all to every other objects that are candidates of skyline objects. For groups that has the form of
either (U( ,  ) or ( , U( ), where the groups are said to have one uncertain dimension, although
the basic theory of the dominance relation techniques still applies here, it is applied with a little
improvisation done to include the skyline probability calculation. Since these groups have a
continuous range in one of their dimensions, we cannot say definitely that an object totally dominates
any other objects based solely on the dominance relation theory alone since it does incorporate the
continuous range in their form. Therefore, the definition of skyline objects is better suited for these
groups as the probability of each object to be a skyline. We also utilized the use of threshold value in
order to help prune out objects that have a skyline probability less than the threshold value as well as
utilizing the use of tolerance value to guarantee that the calculated error of skyline probability is
acceptable. To compute the skyline probability of each object, we initially calculate the upper
probability limit of an object, where this upper limit has to be more than the threshold value in order to
be considered as a candidate of skyline objects.
To achieve this, we transformed the basic form of the objects in these groups to a simpler form,
which it will be much easier to perform the dominance relation technique later on. For an object
having the form of ( , U( ), the transformation to the simpler form is formulated by substituting its
continuous range by a single point that represents the end of its uncertainty range [17]. For example,
the simpler form of an object V = (d1, [d2l, d2u]) after the transformation would be tV = (d1, d2u). With
this new transformation, it will be exactly straightforward as with the previous group, when
performing the dominance relation technique. The reasoning to replace the continuous range with a
single point is so that we can reduce the continuous range of an object to that of the continuous range
of another object that dominates it since the dominated continuous range has a totally zero percent
chance to be dominated by any other objects in that range. For example, the transformation form for
the two objects V (7, [3, 6]) and W (3, [1, 4]) would be (7, 6) and (3, 4), respectively. Since W
definitely dominated V in both dimensions, thus V's continuous range will be reduced to [3, 4] as the
continuous range of V [4, 6] will be useless in future computation as it has 0% chance to dominate
others. The new uncertainty range of V now has the upper probability limit of 33%. In group that has
the form of (U( , U( , where objects have the form of multiple uncertain dimensions, each object
is represented as an area rather than just a line segment [17]. The technique that is applied in the
previous two groups can as well accommodate this last group although not with some changes made

1553

A Framework for Evaluating Skyline Query ...

Saad et al.

Figure 5: A screenshot of dataset with uncertain dimensions and its result of probabilistic skyline query

on the probability calculation. Since objects in this group have the form of multiple uncertain
dimensions, the transformation of this form to get a much simpler form is obtained by using the
highest and lowest values in all uncertain dimensions as the starting point and the ending point,
respectively. For example, an object X ([2, 4], [3, 5]) would have a starting point sX (2, 3) and an
ending point eX (4, 5). Whenever an object dominates another object, it reduces the uncertainty region
of the dominated object by removing from the dominated object a rectangular region rather than just a
part of a line segment, as was the case in the previous group. The computation of upper probability
limit for this group still remains the same by applying the same theory from the previous group.
Probability Dependency. In this method, we further calculate the probability that an object‚Äôs
continuous range is not dominated by any other object‚Äôs continuous ranges by using four distinguishes
cases proposed by Khalefa et al. [17]. This method is only applicable for objects with overlapping
ranges as the probability of an object with continuous range is dependent on other objects‚Äô continuous
ranges when overlapped. This means that the only chance for an object with continuous range to still
be a skyline objects is to not be dominated by other object in the overlapping area. Thus, we can
compute the upper limit of an object to be in the skyline result set as the probability that the
continuous range of the object is not dominated by the continuous ranges of other objects. If the
computed upper limit is lower than the threshold value, we then discard the object.
Probability Breakdown. After computing a simple skyline probability, to get a better probability
precision, we divide the object‚Äôs continuous range into segments and calculate the upper and lower
limit of each object‚Äôs probability to not be dominated by other objects, as well as the difference
between the upper and lower limit. Then we iteratively split the segment (by choosing segment that is
causing the largest difference between the upper and lower limit) and compute the new upper and
lower limit of the split segment, and only stopping the iteration when the tolerance value is met.

4.2 Selection of the Upper Crust
All the objects that survived the filtering process of their own group in Phase 1 are now considered
as the candidates of skyline objects. These objects however have to go through another more refined
filtering process, where they now will be compared to different groups in order to be finally accepted
as the true skyline objects. This phase will employ more complex and expensive computations than
the previous phase as it requires comparisons between two different groups that have different forms.
This in turn shows that a straightforward dominance relation technique and the skyline probability
calculation used in Phase 1 are mostly useless in this scenario. All objects that manage to pass through
the first phase will be grouped together again. From here, we will employ the same methods proposed
in Phase 1 (range reduction, probability dependency, and probability breakdown) to gradually
calculate the probability of each object while ensuring that the calculated error is less than the
tolerance value, and at the same time eliminating objects that have a probability value less than the

1554

A Framework for Evaluating Skyline Query ...

Saad et al.

required threshold value. Since each object now has different form, it will be challenging to perform
dominance relation and compute the probability of each object between two forms when they overlap.
Figure 4 shows an example of overlapping case between two objects with the form of ( ,  ) and
(U( ,  )). To solve this, we adopt the concept of continuity correction [21] into our methods for
computing objects‚Äô skyline probability.
When performing dominance relation on two objects (see Figure 4), one object R, with
deterministic values in both dimensions, and another object Q with uncertain dimensions (i.e.,
[   ], where  and  represent the lower and upper value of object , respectively), and R
falls between the boundaries of      and    , R clearly will be accepted as the
candidate of skyline objects as the existence of Q in any of its continuous range would not affect the
chances of R to be a skyline object. Only Q will have its probability to be accepted as a candidate of
skyline object affected. Its probability is dependent on the value of R in the same dimension, (i.e.,
dimension X). To calculate the probability of object Q to be a skyline candidate means to calculate the
probability of Q not being dominated by R. It means that the only chance Q has to be a skyline
candidate is when Q occurs in its continuous range before R (i.e.,    ). However, if we consider
   to be the range where Q will have some probability to not be dominated by R, then we are
assuming that    . Still, in this scenario Q will still be dominated by R as  is still better than
 . In order to rectify this situation, we have to adopt the concept of continuity correction as we have
mentioned previously. Hence, we have modified a new range for Q that will have a more accurate
probability of not being dominated by R (i.e.,      , where i represents a user-defined value,
used in order to perform the continuity correction concept), and its probability can be computed as
           . Due to space limitation, we have omitted detailed discussion on
different possible overlapping scenarios that could occur between two objects from different groups.
We present the outline of our approach for SkyQUD framework in Algorithm 1 and Figure 5 shows
the result of applying the SkyQUD framework to a sample of dataset.

5 Conclusions
In this paper, we present a skyline framework to support uncertain dimensions, named SkyQUD.
Our SkyQUD overcomes the drawbacks of conventional skylines, where it only caters data with
deterministic values, and previous skyline variants, that although they do contribute in the uncertainty
domains, the uncertain dimensions associated in their work are different from the uncertain
dimensions proposed in our work. To the best of our knowledge, this is the first work on skyline query
processing that considers uncertain dimensions where there exists some data in the underlying
dimensions that are represented as continuous real ranges while others are represented as deterministic
values. We have described our work in the context of skyline in which we have proposed a framework
that will gradually and efficiently calculate skyline probability of an object to be considered as skyline
objects as well as eliminating unwanted objects. In Phase 1, we partitioned the objects into different
groups so that each group now will consist of objects with the same form of structure and different
dominance relation techniques will be used to compute the skyline objects for each group. Then, in
Phase 2, we combined together all the groups that have been partitioned in the previous phase and
performed a final probability computation. In our ongoing work, we are currently at the stage of
evaluating the SkyQUD through comprehensive experiments on large datasets with uncertain
dimensions, with respect to scalability, the effect of threshold and tolerance values, and run time
analysis, to demonstrate the effectiveness of our skyline query processing.

1555

A Framework for Evaluating Skyline Query ...

Saad et al.

Acknowledgement
This research has been kindly supported by Universiti Putra Malaysia under Universiti Putra
Malaysia Grant (GB-IBT/2013/9410000).

References
[1] W. Kie√üling, Foundations of preferences in database systems, Proceedings of the International Conference
on Very Large Data Bases, VLDB, 2002, 311-322.
[2] G. Koutrika and Y. E. Ioannidis, Personalization of queries in database systems, Proceedings of the
International Conference on Data Engineering, 2004, 597-608.
[3] C.-Y. Chan, H. V. Jagadish, K.-L. Tan, A. K. H. Tung, and Z. Zhang, On high dimensional skylines,
Proceedings of the International Conference on Advances in Database Technology, 2006, 478-495
[4] C.-Y. Chan, H. V. Jagadish, K.-L. Tan, A. K. H. Tung, and Z. Zhang, Finding k-dominant skylines in high
dimensional space, Proceedings of the ACM SIGMOD International Conference on Management of Data,
2006, 503-514
[5] M. L. Yiu and N. Mamoulis, Efficient processing of top-k dominating queries on multi-dimensional data,
Proceedings of the International Conference on Very Large Database, 2007, 483-494
[6] M. F. Mokbel and J. J. Levandoski, Toward context and preference-aware location-based services,
Proceedings of the International Workshop on Data Engineering for Wireless and Mobile Access, 2009, 2535
[7] S. B√∂rzs√∂nyi, D. Kossman, and K. Stocker, The skyline operator, Proceedings of the International
Conference on Data Engineering, 2001, 421-430.
[8] D. Kossman, F. Ramsak, and S. Rost, Shooting stars in the sky: an online algorithm for skyline queries,
Proceedings of the International Conference on Very Large Database, 2002, 275-286
[9] P. Godfrey, R. Shipley, and J. Gryz, Maximal vector computation in large data sets, Proceedings of the
International Conference on Very Large Database, 2005, 229-240
[10] D. Papadias, Y. Tao, G. Fu, and B. Seeger, An optimal and progressive algorithm for skyline queries,
Proceedings of the ACM SIGMOD International Conference on Management of Data, 2003, 467-478
[11] I. Bartolini, P. Ciaccia, and M. Patella, SaLSa: computing the skyline without scanning the whole sky,
Proceedings of the International Conference on Information and Knowledge Management, 2006, 405-414
[12] M. A. Soliman, I. E. Ilyas, and S. Ben-David, Supporting ranking queries on uncertain and incomplete data,
Proceedings of the International Conference on Very Large Database, 2010, 477-501
[13] J. Pei, B. Jiang, X. Lin, and Y. Yuan, Probabilistic skylines on uncertain data, Proceedings of the
International Conference on Very Large Database, 2007, 15-26
[14] Y. Qi and M. J. Atallah, Identifying interesting instances for probabilistic skylines, Proceedings of the
International Conference on Database and Expert Systems Applications, 2010, 300-314
[15] X. Lian and L. Chen, Monochromatic and bichromatic reverse skyline search over uncertain databases,
Proceedings of the ACM SIGMOD International Conference on Management of Data, 2008, 213-226
[16] W. Zhang, X. Lin, Y. Zhang, W. Wang, and J. Yu, Probabilistic skyline operator over sliding windows,
Proceedings of the International Conference on Data Engineering, 2009, 1060-1071
[17] M. E. Khalefa, M. F. Mokbel, and J. J. Levandoski, Skyline query processing for uncertain data, Proceedings
of the Conference on Information and Knowledge Management, 2010, 1293-1296
[18] R. Cheng, D. V. Kalashnikov, and S. Prabhakar, Evaluating probabilistic queries over imprecise data,
Proceedings of the ACM SIGMOD International Conference on Management of Data, 2003, 551-562
[19] R. Cheng, J. Chen, M. F.Mokbel, and C.-Y. Chow, Probabilistic verifiers: evaluating nonstrained nearestneighbor queries over uncertain data, Proceedings of the International Conference on Data Engineering,
2008, 973-982
[20] G. Beskales, M. A. Soliman, and I. F. Ilyas, Efficient search for the top-k probable nearest neighbors in
uncertain database, Proceedings of the International Conference on Very Large Database, 2008, 326-339
[21] E.
W.
Weisstein,
Continuity
Correction,
MathWorld--A
Wolfram
Web
Resource,
http://mathworld.wolfram.com/ContinuityCorrection.html

1556

