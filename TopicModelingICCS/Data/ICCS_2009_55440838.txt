Gene Specific Co-regulation Discovery: An
Improved Approach
Ji Zhang, Qing Liu, and Kai Xu
CSIRO Tasmanian ICT Centre
Hobart, TAS, Australia 7001
{Ji.Zhang,Q.Liu,Kai.Xu}@csiro.au

Abstract. Discovering gene co-regulatory relationships is a new but important research problem in DNA microarray data analysis. The problem
of gene speciﬁc co-regulation discovery is to, for a particular gene of interest, called the target gene, identify its strongly co-regulated genes and
the condition subsets where such strong gene co-regulations are observed.
The study on this problem can contribute to a better understanding and
characterization of the target gene. The existing method, using the genetic algorithm (GA), is slow due to its expensive ﬁtness evaluation and
long individual representation. In this paper, we propose an improved
method for ﬁnding gene speciﬁc co-regulations. Compared with the current method, our method features a notably improved eﬃciency. We
employ kNN Search Table to substantially speed up ﬁtness evaluation
in the GA. We also propose a more compact representation scheme for
encoding individuals in the GA, which contributes to faster crossover
and mutation operations. Experimental results with a real-life gene microarray data set demonstrate the improved eﬃciency of our technique
compared with the current method.

1

Introduction

DNA microarray is an enabling technology to provide a global view of the expression of a large number of genes. A gene microarray data set is typically
presented as matrix where each row represents a gene and each column is the
experimental condition (such as time point) when the gene expression is extracted. Finding gene co-regulatory relationships is an important research focus
in microarray data analysis. One interesting research problem, called Single Gene
Approach for gene microarray analysis [14], was recently studied by [17]. This
problem can be formulated as follows: for a particular gene of interest, called target gene, identify its strongly co-regulated genes and the condition subsets where
such strong gene co-regulations are observed. The discovered co-regulated genes
and the associated condition subsets are speciﬁc to the target gene, which can
help biologists to better understand and characterize it. This is useful in many
This research is supported by CSIRO Preventative-Health Flagship program and
Tasmanian ICT Centre (TasICTC). TasICTC is jointly funded by the Australian
Government through the Intelligent Island Program (administered by the Tasmanian
Department of Economic Development and Tourism) and CSIRO.
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 838–847, 2009.
c Springer-Verlag Berlin Heidelberg 2009

Gene Speciﬁc Co-regulation Discovery: An Improved Approach

839

applications such as the investigation of the most diﬀerentially expressed genes
in a disease study or the function prediction of unknown genes.
This paper proposes two boosting techniques aiming to achieve a noticeable
eﬃciency improvement for the method proposed in [17]. The major technical
contributions of this paper are summarized as follows:
1. First, we employ kNN Search Table [16] to ﬁnd the lower and upper bounds
of the distance between the target gene and its k th most co-regulated genes
in the data set. These bounds can be utilized to substantially speed up
ﬁtness evaluation in the GA and facilitate the procurement of the top condition subsets where the target gene is most co-regulated with other genes
in the microarray data set. We have also devised a better way to specify the
parameter values that are used in the approximation scheme;
2. We also propose a more compact representation scheme for encoding condition subsets in the GA, which contributes faster crossover and mutation
operations.
3. Experimental results with a real-life gene microarray data demonstrate the
better eﬃciency of our technique than that of the existing method in discovering gene speciﬁc co-regulations.
The remainder of this paper is organized as follows. Section 2 presents the approach to eﬃciently ﬁnd the top co-regulated condition subsets for the target
gene using kNN Search Table. A more compact individual representation scheme
is proposed in Section 3 to speedup the GA by reducing the overhead of crossover
and mutation operations. We report the experimental results in Section 4 and
the last section concludes this paper.

2

Related Work

Clustering analysis is probably the most commonly used technique for studying
gene co-regulations by grouping closely co-regulated genes together. The major
clustering algorithms in discovering gene co-regulations include hierarchical clustering method [11], k-means algorithm [11], Self-Organization Maps (SOMs) [12]
and SVD-based clustering algorithm [8]. Because they perform clustering based
on the entire set of conditions (i.e., full dimensionality), thus they miss out those
interesting co-regulations embedded in the lower dimensional condition subsets.
To ﬁnd the gene co-regulations in some subsets of conditions, a few subspace
clustering methods for gene expression data, such as Coupled Two-Way Clustering [7], bi-cluster [3] and δ-cluster [15], are also proposed. However, a common
key drawback for clustering methods, no matter whether they ﬁnd co-regulations
on the full or partial dimensionality, is that there is no guarantee that the target
gene’s most-co-regulated genes are in the same cluster where the target gene
is located. Quite likely, they are located in a few diﬀerent clusters because the
results of clustering are quite sensitive to the parameters such as the number
of clusters to be obtained or the value of the inter-cluster dis-similarity metric
that users choose. In addition, the clustering analysis needs to be performed in a
large number of condition subsets, which is rather expensive. As such, clustering
is not a direct nor eﬃcient way for discovering gene-speciﬁc co-regulations.

840

J. Zhang, Q. Liu, and K. Xu

There are also some work on gene co-regulation discovery from time series
perspective by considering the explicit temporal nature of the features in the
gene microarray data [1][2][4][5][6]. However, there are cases that the features do
not have explicit temporal meaning and gene co-regulations may occur in the
subsets of features that are far apart from each other in the gene microarray
data set.
In [17], the authors proposed an approach for mining local gene-speciﬁc coregulation using genetic algorithm (GA) [9]. The basic idea of this approach is
to ﬁrst ﬁnd the condition subsets in which the target gene g is most signiﬁcantly
co-regulated with others and the co-regulated genes of g are then selected from
its nearest neighbors in these condition subsets. A sliding window is used to scan
all the conditions sequentially and the search of condition subsets is performed
within each window position. This method is able to ﬁnd the closely co-regulated
genes for the target gene and the associated condition subsets where such coregulation occur. However, this method is slow. The major speed bottleneck of
this approach is the ﬁtness computation in the GA, which involves a kNN search
for the target gene in each condition subset. The typically large number of genes
in the microarray data and the number of condition subsets evaluated in the GA
lead to a slow k NN search.

3

Searching Co-regulated Condition Subsets Using kNN
Search Table

In [17], the ﬁtness function of the target gene in each condition subset is deﬁned
as the distance between it and its k th nearest gene in the microarray data set.
Such kNN search has to be performed in all the subspaces that are explored by
the GA, leading to a slow speed for the whole method. Using indexing methods
to speed up k th NN search is not eﬃcient due to two major reasons. First, since
a large number of condition subsets may be evaluated in the GA, it will be
expensive to index the genes in each possible condition subset. Second, for genespeciﬁc co-regulation discovery problem, we may be only interested in a small
number of target genes, thus the high cost associated in building indexing cannot
be amortized by the one-time performance gain by using the indexing.To solve
this problem, we draw on the kNN Search Table proposed in [16] to speed up
computation of ﬁtness function. A kNN Search Table for a target gene g, denoted
as g , is a M k table containing its k nearest neighbors in each single dimension
of full data space with M dimensions. The entry xij of the table represents the j th
nearest neighbor of g in the ith dimension, where 1 i M and 1 j k. Using
kNN Search Table, we can compute very eﬃciently the lower and upper bounds
of the distance between the target gene and its k th nearest neighbor in any
k
k
(g, s) and fmax
(g, s), respectively. Interested
condition subset s, denoted by fmin
k
k
(g, s) and fmax
(g, s) using
readers can refer to [16] for the computation of fmin
k NN Search Table and the proof of their correctness.
The idea of using kNN Search Table for speeding up the ﬁtness computation
of condition subset s with respect to the target gene g is to approximate the
k
k
ﬁtness by using the linear combination of fmin
(g, s) and fmax
(g, s) as follows:
k
k
f itnessapp (g, s) = αfmin
(g, s) + βfmax
(g, s)

Gene Speciﬁc Co-regulation Discovery: An Improved Approach

841

Fig. 1. kNN Search Table

where α + β = 1. Unlike setting α = β = 12 as in [16], we calculate the accurate
k
k
and fmax
for a speciﬁed number of condition subsets in the GA to
ﬁtness, fmin
set the values for α and β for each condition subset s such that the following
equation is satisﬁed:
k
k
(g, s) + βfmax
(g, s)
f itnessaccurate(g, s) = αfmin

subject to α + β = 1. The average of α and β of the test condition subsets are
computed and used for the fast ﬁtness approximation of all the other condition
subsets in the GA.
kNN Search Table is advantageous in the following two aspects: 1) The construction of kNN Search Table w.r.t. the target gene only involves ﬁnding its
kNNs in each one-dimensional condition subset, therefore its construction cost
is only (N M ), which is linear with respect to both number and dimensionality of genes in the gene microarray data set. For the whole gene microarray
data, only one kNN Search Table needs to be pre-computed for a target gene;
k
k
2) The total complexity for computing fmin
(g, s) and fmax
(g, s) is O(k 2
),
which becomes independent of N and M .
Since f itness(g, s) is approximated in the GA, the accuracy of computation
is thus somehow aﬀected. To address this problem, we can perform a refinement
step on the top condition subsets we obtain in the GA that are stored in the
k
k
so-called CandidateSet. Instead of using fmin
and fmax
for a fast ﬁtness approximation, the reﬁnement step computes the accurate ﬁtness for top candidate
condition subsets and the top-k condition subsets among them will be returned.
Admittedly, evaluating each condition subset in this reﬁnement process is more
expensive than the approximation as it involves more accurate computations.
However, the number of candidate condition subsets is typically much smaller
than the total number of condition subsets approximated in the GA. In addition,
a pruning optimization strategy can be further devised to speed up the computation, which operates as follows. After the ﬁtness of n candidate condition subsets
have been accurately evaluated, we start to maintain the minimum f itness(g, s)
for the top-k condition subsets we have found thus far, denoted as M inF it.
k
(g, s) < M inF it cannot
Those unevaluated condition subsets that satisﬁes fmax
become the top-k condition subsets and can therefore be safely pruned. This is

842

J. Zhang, Q. Liu, and K. Xu

because that M inF it is monotonically increasing as we examine more condition
subsets in the reﬁnement step.
Once the top-ranked condition subsets have been found by the GA, the next
step will be ﬁnding the co-regulated condition subsets from these top-ranked
condition subsets. This step will be much trivial than the step of ﬁnding the top
co-regulated condition subsets. It only involves ﬁnding the k most co-regulated
genes of the target gene in each of those top-ranked condition subsets.

4

Shorter Individual Representation

A straightforward representation scheme for condition subsets in the GA is the
standard binary encoding; all individuals are represented by strings with ﬁxed
and equal length M , where M is the number of dimensions of the Microarry data
set. Using binary alphabet Σ = , 1 for gene alleles, each bit in the individual
will take on the value of ”0” and ”1”, respectively, indicating whether or not its
corresponding attribute is selected
However, for a high-dimensional microarray data set with M dimensions, we
will end up with a long binary string with a length of M for representing each
condition subset. A high computational overhead is involved in the frequently
preformed crossover and mutation of long binary strings. Therefore, a short representation of individuals is desirable. To this end, we employ integer string,
instead of binary string, to represent each condition subset in the GA that features a much shorter length. Each integer can represent a few binary bits, which
contributes a remarkable reduction of the length of individual representation. If
we assume that the number of binary bits needed for representing each integer
is L, L M (integers are in the range of [0, 2L 1]), then length of an integer
string for representing a condition subset will be only approximately M
L of the
length of the binary string used to represent the same condition subset.
Even though it features a more compact representation and enables faster
crossover and mutation operations, the integer string representation changes the
behavior of mutation and tends to result in abrupt mutations more frequently,
which may lead to loss of useful segments of bits that might just turn out to be
part of potentially good solutions.
To solve these problems while, at the same time, preserve the desired advantages of integer representation, we propose eﬃcient methods to seamlessly simulate the genetic operations of binary string using integer string representation.
We derive ways for quickly obtaining crossover and mutation results between
any pair of integers that are consistent with those of binary strings.
For crossover operations, we propose Crossover Lookup Table (CLT). It is
a 2L 2L table with each entry being a pair of integers corresponding to the
crossover result of a given pair of integers. The crossover locus lc is generated
randomly in the range of [1, M 1]. Notice that, from an integer string’s perspective, the crossover locus will only be located on the boundary of two adjacent
integers or within a single integer. In the former case, two integer strings can
be directly crossovered in the same way as the binary strings. In the later case,
all the integers after the one that the crossover locus is located can also be
crossovered in the same way as the binary strings. The crossover result of the

Gene Speciﬁc Co-regulation Discovery: An Improved Approach

843

Fig. 2. An example of Crossover Lookup Table (identif ier = 1, L = 2)

Fig. 3. A crossover example of two integer strings (M = 8, L = 2, lc = 3)

pair of integers where crossover locus is located can be obtained by looking up
the appropriate Crossover lookup Table based on the value of (lc mod L). As
there are L 1 diﬀerent crossover locus inside an integer, thus we need to precomputed
1 diﬀerent CLTs. Each table is uniquely identiﬁed by an integer
i [1, L 1]. Figure 2 gives an example CLT with identiﬁer=1 when L = 2.
Figure 3 is a crossover example of two integers by means of the CLT given in
Figure 2.
For mutation operations, we quantify the Mutation Transition Probability Table (MTPT). It is also a 2L 2L table with each entry representing the mutation
transition probability from one integer to another. An integer is mutated to another based upon their transition probability initiated from this integer. Let us
suppose that two integers a and b diﬀer in l bites in their binary representations
(0 l L M ), the mutation transition probability from a to b, denoted as
P r(a, b), is computed as P r(a, b) = plm (1 pm )(L−l) . Unlike CLT, there is only
one MTPT that needs to be pre-computed for a given gene microarray data
set. Suppose L = 2 and pm = 0.1, we need to compute the mutation transition
probability from integer 2 to 3. As they diﬀer in only 1 bit in their binary representations, thus P r(2, 3) can be computed as P r(2, 3) = 0
0.1)2−1 = 0.09.
When using a shorter integer representation for condition subsets in the GA,
we can achieve an approximate M
L times performance boost in crossover and
mutation operations for M -dimensional gene microarray data if each integer in
the string is represented by L binary bits. The pre-computed CLT and MTPT
contribute to a remarkable performance gain of crossover and mutation in the GA
by transforming them to simple lookup operations from lookup tables, without
the frequent on-the-ﬂy conversion between integer and binary strings.

844

5

J. Zhang, Q. Liu, and K. Xu

Experimental Results

The Spellman’s data set is used in our experiments that can be downloaded
from http://genome-www.stanford.edu/cellcycle/data/rawdata. This data set
contains all the data for the alpha factor, cdc15, and elutriation time courses,
and includes the data for the Clb2 and Cln3 induction experiments. We used
only the alpha-factor and CDC28 data set for our experiments. This data set
contains 6178 genes under 35 experimental conditions (time points).
The main focus of our experimental evaluation is to investigate the eﬃciency
boost of the existing method when the two strategies we propose (i.e., ﬁtness
evaluation using kNN Search Table and shorter individual representation scheme
using integer strings) are employed. Eﬃciency comparison is conducted in the
experiment between the baseline method (i.e., no boosting strategies are used)
and the method with only one boosting strategy is used. In this way, we can
obtain a clear idea as to the magnitude of improvement that can be achieved
using each strategy. For all the experiments, the number of generations and
population size are ﬁxed as 200 and 50 respectively in the GA. The eﬃciency
are investigated under varying number of genes and conditions. The original gene
microarray data is properly sampled to obtain new data sets with desired number
of genes and conditions for experimental purposes. At the end of this section,
we will also investigate the eﬀectiveness of our proposed improved method.
5.1

Eﬃciency Improvement Using k NN Search Table

We ﬁrst study the eﬃciency boost of the method using k NN Search Table.
Figure 4 and 5 show the execution time of the method using k NN Search Table,
compared with the baseline method. By using k NN Search Table, the method
can achieve a remarkable improvement of eﬃciency, especially when the number
of genes and conditions of the microarray data set are high. The magnitude of
speed improvement could be over 70% for the microarray data we use in the
experiment. As we have analyzed earlier, the complexity of using k NN Search
Table to approximate the ﬁtness of condition subsets in the GA is independent of
the number of genes and the number of condition of the microarray data set, thus
approximately horizontal curves for the boosted method are observed in both
ﬁgures. Note that the execution time of the improved method increases only
slightly when dealing with data sets with higher number of genes or conditions.
Such increase comes from the reﬁnement step where the top co-regulated condition subsets for the target gene are obtained based on the top-ranked condition
subsets returned by the GA. Insteading of using k NN Search Table, this step
involves evaluating all the genes in the data set whose complexity is depended
on the number of genes and conditions.
5.2

Eﬃciency Improvement Using Shorter Representation

The second experiment investigates the eﬃciency improvement of the method
by using integer strings for representing condition subsets in the GA. The experimental results are presented in Figure 6 and 7, respectively. As these results
show, employing integer string representation is able to contribute to another

Gene Speciﬁc Co-regulation Discovery: An Improved Approach

80

845

90
Not using KNN Search Table
Using KNN Search Table

80

70

Not using KNN Search Table
Using KNN Search Table

70
Execution time (Sec.)

Execution time (Sec.)

60

50

40

60

50

40

30
30
20

10
1000

20

2000

3000

4000

5000

10
5

6000

10

15

20

25

30

35

Number of conditions

Number of genes

Fig. 4. Eﬃciency improvement using
k NN Search Table (under varying number of genes)

Fig. 5. Eﬃciency improvement using
k NN Search Table (under varying number of conditions)

80

90
Not using integer representation
Using integer representation

80

70

Not using integer representation
Using integer representation

Execution time (Sec.)

Execution time (Sec.)

70
60

50

40

60

50

40

30
30
20

10
1000

20

2000

3000

4000

5000

6000

Number of genes

Fig. 6. Eﬃciency improvement using
integer representation (under varying
number of genes)

10
5

10

15

20

25

30

35

Number of conditions

Fig. 7. Eﬃciency improvement using
integer representation (under varying
number of conditions)

10-15% speed improvement. Also, as the number of genes or conditions increase,
the magnitude of speed inprovement using integer representation is somewhat
decrease. This is because that the cost of ﬁtness function dominates the whole algorithm more severely when the number of genes or conditions increase, making
the eﬃciency contirubtion of integer representation relatively less remarkable.
5.3

Eﬀectiveness Study

Besides eﬃciency improvement, we are also interested in studying the eﬀectiveness of the method in gene speciﬁc co-regulations discovery when the boosting
strategies are used. A general rationale is that the eﬀectiveness of the method
should not be severely compromised when its speed can be improved noticeably. In this experiment, we study the ﬁnal co-regulated condition subsets of the
target gene obtained using the improved method, compared with the baseline
method. As we know, as long as the condition subsets for gene co-regulation of
the target gene can be correctly identiﬁed, it will then become trivial to ﬁnd
its co-regulated genes in these condition subsets. Therefore, we only need to

846

J. Zhang, Q. Liu, and K. Xu

Ratio of the true top−k condition subsets found

1

0.8

0.6

0.4

top−k=10
top−k=50
top−k=100

0.2

0
100

200

300

400

500

600

700

800

900

1000

Number of condition subsets whose fitness is accurately evaluated

Fig. 8. Eﬀectiveness of the improved method

evaluate how good are the ﬁnal co-regulated condition subsets obtained by the
GA. The ground-truth result, i.e., the true top-k condition subsets where the
strongest co-regulation for the target gene, needs to be found ﬁrst using the
brute-force search method. Based on the ground-truth result, the result of the
improved method can be evaluated.
In this experiment, we vary the number of top condition subsets to be returned
by the GA, denoted by Ns , and study the percentage of the true top-k that are
found using the boosting strategies under three top-k values, 10, 50 and 100.
Intuitively, the larger Ns is, the higher chance will be for the ﬁnal results of the
GA to include the true top-k condition subsets. As approximation is used in
the GA, Ns should be set relatively large (yet still much smaller than the total
number of condition subsets that are evaluated in the GA) in order to provide a
suﬃciently large room to include the true top-k condition subsets. We evaluate
the diﬀerent values for Ns , ranging from 100 to 1000, in this experiment. The
results, as presented in Figure 8, show that we will be able to obtain all the
true top-k condition subsets as long as the Ns is reasonably large (the required
value for Ns is increased when top-k goes up). In other words, we only need to
evaluate the ﬁtness of a small number of condition subsets accurately to ﬁnd the
true top-k condition subsets, and the ﬁtness of all the other condition subsets
can be quickly approximated using k NN Search Table.

6

Conclusions

In this paper, we propose an improved method for discovering gene speciﬁc coregulations based on genetic algorithm (GA). We employ kNN Search Table to
substantially speed up ﬁtness evaluation in the GA. We also propose a more
compact representation scheme for encoding condition subsets in the GA, which
contributes faster crossover and mutation operations. Our method features a
better eﬃciency than the current method (up to a 70%-80% speed boost). The
experimental results demonstrate the good eﬃciency and eﬀectiveness of our
technique in discovering gene speciﬁc co-regulations.

Gene Speciﬁc Co-regulation Discovery: An Improved Approach

847

References
1. Amato, R., Ciaramella, A., Deniskina, N., Del Mondo, C., di Bernardo, D.,
Donalek, C., Longo, G., Mangano, G., Miele, G., Raiconi, G., Staiano, A., Tagliaferri, R.: A Multi-step Approach to Time Series Analysis and Gene Expression
clustering. Bioinformatics 22(5), 589–596 (2006)
2. Bar-Joseph, Z.: Analyzing time series gene expression data. Bioinformatics 20(16),
2493–2503 (2004)
3. Cheng, Y., Church, G.M.: Biclustering of Expression Data. In: Proc. International
Conference on Intelligent Systems for Molecular Biology (ISMB), vol. 8, pp. 93–103
(2000)
4. Erdal, S., Ozturk, O., Armbruster, D., Ferhatosmanoglu, H., Ray, W.: A time series
analysis of microarray data. In: 4th IEEE International Symposium on Bioinformatics and Bioengineering (2004)
5. Feng, J., Barbano, P.E., Mishra, B.: Time-frequency feature detection for timecourse microarray data. In: 2004 ACM Symposium on Applied Computing (SAC
2004) (2004)
6. Filkov, V., Skiena, S., Zhi, J.: Analysis techniques for microarray time-series data.
In: 5th Annual International Conference on Computational Biology (2001)
7. Getz, G., Levine, E., Domany, E.: Coupled Two-Way Clustering Analysis of Gene
Microarray Data. Proc. Natioal Academy of Science 97(22), 12079–12084 (2000)
8. Golub, G.H., Van Loan, C.F.: Matrix Computations. Johns Hopkins University
Press (1983)
9. Holland, J.: Adaption in Natural and Artiﬁcial Systems. MIT Press, Cambridge
(1992)
10. Ji, L., Tan, K.L.: Identifying Time-Lagged Gene Clusters on Gene Expression Data.
Bioinformatics 21(4), 509–516 (2005)
11. Johnson, R.A., Wichern, D.W.: Applied Multivariate Statistical Analysis. Prentice
Hall International, USA (1998)
12. Kohonen, T.: Self-Organization Maps. Springer, Heidelberg (1995)
13. Ramoni, M.F., Sebastiani, P., Kohane, I.S.: Cluster analysis of gene expression
dynamics. Proceedings of the National Academy of Sciences, USA 99(14), 9121–
9126 (2002)
14. Speed, T., Fridlyand, J., Yang, Y.H., Dudoit, S.: Discrimination and clustering with
microarray gene expression data. In: Spring Meeting of International Biometric
Society Eastern North American Region (ENAR 2001) (2001)
15. Yang, J., Wang, W., Wang, H., Yu, P.S.: δ-Cluster: Capturing Subspace Correlation
in a Large Data Set. In: Proc. 18th International Conference on Data Engineering
(ICDE 2002), pp. 517–528 (2002)
16. Zhang, J., Gao, Q., Wang, H.: A Novel Method for Detecting Outlying Subspaces in
High-dimensional Databases Using Genetic Algorithm. In: Perner, P. (ed.) ICDM
2006. LNCS, vol. 4065, pp. 731–740. Springer, Heidelberg (2006)
17. Zhang, J., Gao, Q., Wang, H.: Discover Gene Speciﬁc Local Co-regulations Using
Progressive Genetic Algorithm. In: ICTAI 2006, pp. 783–790 (2006)

