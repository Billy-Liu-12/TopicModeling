Software Product Line Oriented Feature Map
Yiyuan Li, Jianwei Yin, Dongcai Shi, Ying Li, and Jinxiang Dong
College of Computer Science and Technology, Zhejiang Univ., Hangzhou 310027, China
zjulyy@yahoo.com.cn, zjuyjw@zju.edu.cn, shidcai@163.com,
cnliying@zju.edu.cn, djx@zju.edu.cn

Abstract. The core idea of software product line engineering is to develop a
reusable infrastructure that supports the software development of a family of
products. On the base of domain analysis, feature modeling identifies
commonalities and variability of software products in terms of features to
provide an acknowledged abstract to various stakeholders. The concept of
feature map is proposed to perfect feature model. It supports customized feature
dependencies and constraint expresses, provides the capability to navigate and
locate the resource entities of features. Ontology is introduced as the
representation basis for the meta-model of feature maps. By the means of
selecting features to construct the reusable infrastructure, the components of
feature implementation are rapidly located and assembled to produce a family
of software products meeting certain dependencies and constraints.
Keywords: Variability, Feature map, Resource navigation, Ontology.

1 Introduction
Currently the manufacture of software is suffering from such problems as individual
customized requirements and frequent changes of business requirements. As a result,
it seems that traditional software development mode - which is to develop software
product specifically for certain application’s requirements - costs more and has less
efficiency and maintainability. In this software development mode, it’s hard to meet
the requirements of software development in large scale customization environment.
The purpose of software production for mass customization is to produce and
maintain a family of software products with similar functions, figure out both their
commonalities and variability and manage these features [1]. It represents the trend of
software factory’s evolution.
Software product line is an effective way to implement software production for
mass customization. It’s a set of software systems with common controllable features.
The core idea of software product line engineering is to develop a reusable
infrastructure that supports the software development of a family of products [2]. A
software product line typically consists of a product line architecture, a set of
components and a set of products [3]. The characteristics of software development
applying software product line principals are to maintain the common software assets
and reuse them during the development process, such as domain model, software
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 1115–1122, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1116

Y. Li et al.

architecture, process model, components, etc. Each product derives its architecture
from the product line architecture, instantiates and configures a subset of the product
line components and usually contains some product-specific code. Instantiated
products constitute a family of software products in domain.
Feature modeling is the mainstream of domain analysis for the software product
line. Its main purpose is to identify all commonalities and variability in software
product line. The outputs of feature modeling are all potential products of product line
[4]. FORM [5] is a famous development method based on feature. Difference between
domain products and family products shows the variability of software product line
[2]. Variability point model [6, 7] models the variability of software product line
through four ways. The complex dependency relationships among variability points
are presented in first order expression [8]. From the viewpoint of software
configuration management, the variability management of software product line can
be divided into nine sub modules according to two dimensions [9].
By analyzing the deficiency of current feature modeling and its description
language, this paper proposes an expanded feature modeling of software product line
– feature map. It perfects feature dependency description and restriction expression,
supports quick navigation to feature resource artifacts of software product line in
distributed collaborative development environment. Its meta-model is also presented.

2 Feature Map
Feature is the first-order entity in domain. It shows some capabilities or specialties
owned by systems. It’s the only determinate abstract in the domain and can be
understood simultaneously by domain experts, users and developers. To a certain
extent, feature is a kind of expression to ontology knowledge of application domain.
2.1 Deficiency of Feature Model
Feature modeling is to identify the commonalities and variability of all products in a
software product line via analysis to domain features and their relationship. Domain
reference architecture can be built according to feature model. The constituent units of
the architecture can be bound with related component entities. However, existing
feature model and its description technique have some deficiency.
Firstly, each domain may have its own feature mutual operation relation due to its
variety. It has indetermination. Although existing feature models sum up and analyze
the usual feature relation, they can not wholly describe all domain related feature
dependency relation. Secondly, existing feature model trends to build feature model
by aiming at domain systems’ function. This forms the functional features. However,
it seldom considers the non-functional domain features like performance, cost, and
throughput etc. Also it lacks effective description and expression measure. Thirdly,
domain feature analysis runs through all phases of software development lifecycle. It
refers to a lot of resource entities like requirement specification, design model and
component entities etc. Existing feature models only discuss production of software
product from the viewpoint of feature selection. They ignore the problem of feature
instantiation including the selection and locating of domain feature related resource
entities. Fourthly, there may exist more than one component entity that implements

Software Product Line Oriented Feature Map

1117

the functions presented by a certain feature for choices. Existing feature models
ignore the variability brought by feature implementation scheme.
Thus it can be seen that it is necessary to expand existing feature models to perfect
the modeling and description ability for feature dependency relationship, nonfunctional feature constraint, feature resource navigation and variability of domain.
2.2 Definition of Feature Map
This paper proposes the concept of feature map. It supports feature dependency
relationship and restriction expression and provides the capability of locating and
navigating resource entities to implement feature selecting according to specified
requirement, locate and assemble resource entities quickly and generate software
product family that can satisfy dependency relationship and restriction conditions.
A feature map can be defined as a 5 elements set. FM = (F, A, C, R, λA, λC, λR),
among them,
- F is the feature set of feature map;
- A is the feature association set of feature map;
- C is the feature constraint expression set of feature map;
- R is the feature resource entity set of feature map;
- λA denotes a mapping from F to the set P(A), i.e. λA: F→P(A). P(A) represents the
set of all the subsets of A. λA meets the following conditions:

∀a ∈ A, ∃F ' ⊂ F ,| F ' |≥ 2 and ∀f ∈ F ' , λ A ( f ) = a
This means that an arbitrary feature can have multiple dependency relationships
with other features. Meanwhile, each feature association involves at least two
features.
- λC denotes a mapping from F to the set P(C), i.e. λC: F→P(C). P(C) represents
the set of all the subsets of C. λC meets the following conditions:
∀c ∈ C , ∃F ' ⊂ F ,| F ' |≥ 1 and ∀f ∈ F ' , λ C ( f ) = c
That is to say, for an arbitrary feature, it can be restricted by multiple constraint
expressions; while each feature constraint can be specified to either a certain feature,
or a set of features.
- λR denotes a mapping from F to the set P(R), i.e. λR: F→P(R). P(R) represents the
set of all the subsets of R. λR meets the following conditions:
∀f ≠ f ' ∈ F , λ R ( f ) ∩ λ R ( f ') = ∅ and ∪λ R ( f ) = R
That is to say, each feature owns its resource entities.
Thus it can be concluded that the concept of feature map consists of two parts. On
the one hand, feature map expands existing feature models to construct its
infrastructure and foundation via perfecting feature dependency relationship
definition of existing feature models and aggrandizing feature constraint expression to
enhance the feature configuration relationship. On the other hand, feature map builds
its superstructure via introducing the resource entities of features and providing the
capability to rapidly navigate and locate them. With these two hands combined
tightly, by the means of selecting features to construct the reusable infrastructure, the

1118

Y. Li et al.

component entities of feature implementation are rapidly located and assembled to
produce a family of software products meeting certain dependencies and constraints.
2.3 Meta-model of Feature Map

Features together with their dependency relationship, constrain expression and
resource entities are abstracted as basic elements of meta-model. Corresponding with
the web ontology language OWL, modeling elements of meta-model can be divided
into ontology class element, object property element, data property element and data
type element. Among them, ontology class element represents the semantic principal;
object property element represents the association relationship among ontology class
elements as the format of object property of ontology class elements, both its domain
and range are ontology class elements; data property element represents the nonfunctional characteristics of ontology class element, its domain is ontology class
element while its range is data type element.

Fig. 1. The Meta Model of Feature Map Based on Ontology

The meta model of feature map based on ontology is described as figure 1,
Feature, FeatureBind, Association, Constraint and Resource etc. are defined as
ontology classes; while restrictsObject, hasResource, playedBy and hasRole etc. are
defined as ontology object properties to establish the relation network of semantic
principal; name, param, and location etc. are defined as data properties to describe the
feature properties of semantic principal. The meanings of the main meta-model
elements are described as following:

Software Product Line Oriented Feature Map

1119

Feature: ontology expression of feature definition in feature map, it’s common or
variable system characteristic that can be observed externally. Feature ontology
instance is identified by a unique global name.
FeatureBind: ontology class of feature binding, it associates the binding mode and
binding time through bindMode and bindTime object properties respectively.
Mode: binding mode of feature, including mandatory, optional, or, alternative and
exclude etc. modes. Classified from the viewpoint of if this binding mode is affected
by that of other features, mandatory and optional are unary binding modes while or,
alternative and exclude etc. are multiple binding modes. However, if it’s classified
from the viewpoint of the variability of features, only features indicated by mandatory
are the common indispensables while the ones indicated by others are optional
features rested with the specific software products.
Time: binding time of feature, it only makes sense to the variable features that
are indicated by optional, or, alternative and exclude etc. Its value can be design-time,
compile-time, implement-time, assemble-time, load-time, instantiate-time, runtime
etc.
Resource: expression of feature resource. It marks the software product
development phase producing the resource via the association of belongsTo object
property and Phase ontology class. It also indicates the type of entity object quoted by
the resource via the association of type object property and ResourceType ontology
class. Resource type is decided by the phase of software product development.
Entities quoted by the resource may locate on any places in the distributed network
environment, and can be navigated by URI through location object property.
Phase: stages of software product development. It includes requirement, design,
implementation, test and maintenance etc. Although software product line engineering
based on feature modeling is macroscopically similar with the traditional software
engineering which is oriented to single software product development in the aspect of
defining the phases of software development, they are dramatically different in the
aspect of concrete actualizing approach and detail in each phase [10].
ResourceType: it can be requirements analysis document, model / flow design or
component artifacts etc. This depends on the phase of software product development
during which this resource is produced.
Constraint: the non-functional restrictions on feature. Constraint expression
consists of a set of parameters, operators and variables. Constraint builds association
with Feature ontology class through restrictObject object property and confirms the
restricted object. Constraint can be defined to aim at property set of a single feature. It
also can include multiple features as restricted objects and build feature constraint
relationship under the general restriction.
Association: relationships between features. It associates the AssociationType
ontology class through the type object property to confirm relation type. It also
associates Role ontology class through the hasRole object property to make certain
the objects referred by association. It is built based on at least two associated objects.
AssociationType: type of association, including composed-of, implemented-by,
require, generalization/specialization and activate etc. Association has orientations,
among which, composed-of, generalization/specialization and implemented-by belong
to structural association; require and activate belong to reference association.

1120

Y. Li et al.

Role: the object referred by association. It associates Feature ontology class
through playedBy object property to make certain the real feature that assumes the
role. It also associates RoleType ontology class via type object property to indicate the
deserved role type. Assigning of role type determines the orientation of association.
RoleType: type of role. Its real range is decided by the type of association
accompanying with the role.
The hierarchy of feature map is built by relationships like composed-of,
generalization/specialization, implemented-by etc. among features. Common features
are represented by setting binding mode to mandatory while variable features are
established by marking the binding mode as optional, or, alternative or exclude etc.
On the one hand, dependency and mutual operation among features are expressed by
associations like implemented-by, require and activate etc. Moreover, the orientations
of associations are determined by the role that feature takes within association. On the
other hand, constraint expressions are built on the properties of a single feature or the
properties set of feature group. All kinds of resource entities related to features in
each development phase are navigated in network environment by location. Through
this way, structural association, dependency association and constraint conditions
among features are completely established. Meanwhile, by adding instances of
AssociationType, RoleType and ResoureType, meta-model can describe the new
associations and locate the new resource entities. Thus expansibility is available.
The variability of feature map is represented in several aspects. Firstly, as far as
binding mode and binding time are concerned, the former directly determines whether
the feature is selected or not, while the latter determines the occasion when the
optional features are instantiated. Secondly, the relations among features like require
and activate etc. determine if the other features that have dependency association or
mutual operation association with the present feature will be selected or not. Thirdly,
constraint expression determines the quantification constraint on the properties set of
a single feature or feature group, and furthermore, it will affect the selection of
component entities for feature implementation. Fourthly, on the base of the navigation
and locating of resource entities, software products instantiated by selecting resource
entities with same functions but different implementation plan will have different
non-functional characteristics like performance and quality of service etc.

3 Case Study
Figure 2 shows the feature map of mobile telephone software product line and the
mapping to its meta-model. Mobile telephone software product line is composed of
some functional features like password protection, game, telephone directory and
browser etc. Among them, password protection and browser are optional features.
Meanwhile, multiple games can be the choice, but to some limitation, such as a small
memory capacity, G3 and G4 can only be chosen one arbitrarily. In order to be in
operation, the length of password should be set to 6, the length of list in the telephone
directory should be no more than 250, and the required memory of embedded browser
should be less than 2M. In the process of feature analysis, each function feature has
related requirements specification, design model and implementation component.
Some functional features, for example, G2, even have various implementation
schemes.

Software Product Line Oriented Feature Map

1121

Functional features like password protection, game, telephone book and browser
etc are modeling as Feature ontology; the selection of feature is mandatory or
optional is modeling as Mode ontology; max length of password, volume of telephone
book and memory consumed by browser etc. are modeling as Constraint ontology;
hierarchy structure of features and the mutually exclusive relationship between G3
and G4 etc. are modeling as Association ontology; requirements document, design
models and component entities are modeling as ResourceType ontology; all lifecycle
phases of software development are modeling as Phase ontology. The whole
infrastructure of feature map is constructed by the associations among ontology via
object properties, while the superstructure of feature map is constructed by modeling
the reference of resource as location property to navigate and locate the resource
entities.

Fig. 2. Feature Map and Its Meta-model of Mobile Telephone Software Product Line

4 Conclusion
The core idea of software product line engineering is to develop a reusable
infrastructure that supports the development of a family of software products. It’s an
efficient way to implement mass customized software production. Feature modeling is
the mainstream of domain analysis of software product line. It identifies
commonalities and variability of the products of a product line in terms of features to
provide an acknowledged abstract to various stakeholders. Uncertainty of variable
features determines the variability of software product line. Existing feature models
and their description can not entirely support the diversity of feature dependencies in

1122

Y. Li et al.

different domains. They do not support modeling and description of constraint
expression and can not navigate and locate the resources in network environment.
Moreover, their variability analysis did not consider the alternative of component
entities which implement the features. In this paper, the concept of feature map is
proposed to perfect feature model. Ontology is introduced as the representation basis
for the meta-model of feature map. Feature map supports customized feature
dependencies and constraint expressions, provides the capability to navigate and
locate the resource entities of features. Then by the means of selecting features to
construct the reusable infrastructure, the components of feature implementation are
rapidly located and assembled to produce a family of software products meeting
certain dependencies and constraints. The further work is to refine the feature map
during studies and practices, including how to define and describe its related action
characters and state transfer etc.

References
1. Charles W. Krueger. “Software Mass Customization”. BigLever Software, Inc. (2001)
2. Michel Jaring, Jan Bosch. “Representing Variability in Software Product Lines: A Case
Study”. Proceedings of the 2th International Conference on Software Product Lines
(SPLC’02), Springer Verlag LNCS 2379 (2002) 15–36
3. J. Bosch. “Design & Use of Software Architectures - Adopting and Evolving a ProductLine Approach”. Addison-Wesley (2000)
4. David Benavides, Pablo Trinidad, Antonio Ruiz-Cortes. “Automated Reasoning on Feature
Models”. Proceedings of the 17th International Conference on Advanced Information
Systems Engineering (CAiSE’05), Springer Verlag LNCS 3520 (2005) 491–503
5. Kang KC, Kim S, Lee J, Kim K, Shin E, Huh M. “FORM: A Feature-Oriented Reuse
Method with Domain-Specific Reference Architectures”. Annals of Software Engineering
(1998) 143–168
6. Jan Bosch, Gert Florijn, Danny Greefhorst. “Variability Issues in Software Product Lines”.
Proceedings of the 4th International Workshop on Software Product Family Engineering
(PFE’02), Springer Verlag LNCS 2290 (2002) 13–21
7. Diana L. Webber, Hassan Gomaa. “Modeling Variability in Software Product Lines with
The Variant Point Model”. Elsevier (2003)
8. Macro Sinnema, Sybren Deelstra, Jos Nijhuis, Jan Bosch. “COVAMOF: A Framework for
Modeling Variability in Software Product Families”. Proceedings of the 3th International
Conference on Software Product Lines (SPLC’04), Springer Verlag LNCS 3154 (2004)
197–213
9. Charles W. Krueger. “Variation Management for Software Production Lines”. Proceedings
of the 2th International Conference on Software Product Lines (SPLC’02), Springer Verlag
LNCS 2379 (2002) 37–48
10. Kyo C. Kang, Jaejoon Lee, Patrick Donohoe. “Feature-Oriented Product Line
Engineering”. IEEE Software, Volume 19, Issue 4, July-Aug (2002) 58–65

