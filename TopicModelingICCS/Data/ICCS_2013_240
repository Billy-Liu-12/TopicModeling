Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 1429 – 1435

2013 International Conference on Computational Science

Undergraduate Module on Computational Modeling: Introducing
Modeling the Cane Toad Invasion
Angela B. Shiflet*, George W. Shiflet, Whitney E. Sanders, Jr.
Wofford College, 429 N. Church St., Spartanburg, SC 29303 USA

Abstract
"Modeling an 'Able' Invader—the 'Cane' Toad" is an educational computational science module developed by the authors
for the NSF funded Blue Waters Undergraduate Petascale Education Program. The module considers the fundamentals of a
grid-based individual-based simulation and develops such a model for an invasive species, the cane toad, to study the effect
of fencing artificial water points on the adult's invasion. Besides serial implementations in MATLAB and C, a parallel
program in C/MPI accompanies the module. Moreover, the module considers a serial algorithm and an approach to
parallelizing, speedup, and scalability. This paper describes the module and details experiences using the material in an
undergraduate course on Modeling Biological Networks at Wofford College.
©
© 2013
2013 The
The Authors.
Authors. Published
Published by
by Elsevier
Elsevier B.V.
B.V. Open access under CC BY-NC-ND license.
peer
review under
responsibility
of the
organizers
of the
International
Conference
on Computational
Selection and
and/or
peer-review
under
responsibility
of the
organizers
of 2013
the 2013
International
Conference
on Computational
Science
Keywords: computational science; grid-based individual-based model; educational modules; high-performance computing; petascale; blue
waters; undergraduate

1. Introduction
Funded by the National Science Foundation, the Blue Waters Undergraduate Petascale Education Program
(UPEP) [1] helps to prepare students and teachers to utilize high performance computing (HPC), particularly
petascale computing, in computational science and engineering. UPEP has three initiatives:

* Corresponding author. Tel.: +0-864-597-4528; fax: +0-864-597-4549.
E-mail address: shifletab@wofford.edu.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.310

1430

Angela B. Shiflet et al. / Procedia Computer Science 18 (2013) 1429 – 1435

∞ Professional Development Workshops for undergraduate faculty
∞ Research Experiences for undergraduates
∞ Materials Development by undergraduate faculty for undergraduates
The goal of the Materials Development initiative is "to support undergraduate faculty in preparing a diverse
community of students for petascale computing" [1].
The computational science module "Modeling an 'Able' Invader—the 'Cane' Toad," available at [2] on the
UPEP Curriculum Modules site, was developed and class tested by the authors for this program. This paper
describes and discusses the module and our experiences using it in the January interim course "Modeling
Biological Networks" at Wofford College [3] in 2012.
Several of the students in the class of all science majors are obtaining Wofford's Emphasis in Computational
Science (ECS). The ECS requires that students obtain a Bachelor of Science, take Calculus I, Introduction to
Programming and Problem Solving (in Python), Data Structures (in Python and C++), Modeling and
Simulation, and Data and Visualization, and completing a summer internship involving computation in the
sciences [4]. The techniques involving simulations and high performance computing provided by the module
are important for the ECS students, and the applications provide motivation to all students.
2. Module
2.1. Pedagogy
Prerequisites for the module "Modeling an 'Able' Invader—the 'Cane' Toad" are the maturity to read the
material and introductory programming in a language such as MATLAB or C/C++. The five students who
used the module at Wofford College were in their first- or second-year with majors in biology or chemistry.
The module provides the biological background necessary to understand the applications, the mathematical
background needed to complete the exercises and projects, and references for further study. Eight (8) multi-part
quick review questions with answers at the end of the module provide immediate feedback. The module also
provides twenty-one (21) project assignments for further exploration using a computational tool.
Implementations of simulation are available for download from the UPEP Curriculum Modules site [2] in
the following systems: MATLAB, C, and C with MPI for high performance computing. (Blue Waters Student
Intern Whitney Sanders implemented the latter.)
2.2. Scientific Question
The marine or cane toad (Bufo (Chaunus) marinus), which was introduced into Australia, has become a
major worry. Because they secrete a toxic chemical, virtually no predators exist. However, cane toads are
relatively aggressive, undiscerning predators and are expanding rapidly. Scientists have hypothesized that
satellite groups of this invasive species use artificial water points (AWPs), such as troughs or dams for
livestock, as invasion hubs and that targeting AWPs might help prevent the spread of the toads [5]. Based on
the work of these scientists, the module developed a simulation model to study the effect of fencing AWPs on
adult cane toad invasion.
2.3. Computational Model and Algorithms
The model to solve this problem is a grid-based individual-based simulation. An individual-based model
(agent-based model or entity-based model) follows individuals of a population in an environment, considering
the global consequences of their local interactions. Individuals are described in terms of their behaviors (rules
or transition rules) and their state (or set of characteristic parameters).

Angela B. Shiflet et al. / Procedia Computer Science 18 (2013) 1429 – 1435

1431

The environment consists of two n-by-n grids (matrices), moisture and food, that store wetness and nutrient
values, respectively, with each cell containing a value between 0.0 and 1.0. For example, most cells have
moisture values of 0.0; moist areas, such as logs, have higher values; AWPs have values of 1.0 with nearby
cells being lower. Initially, food values can be constant or normally distributed random numbers. For the
simulation in the module, toads are only allowed to migrate off the grid to the west (left). By making such a
restriction, we require toads starting on the east border to migrate the entire width of the desert area, mimicking
much of the migration that is occurring in Australia.
In this individual-based simulation, the following parameters represent the state of each toad: toadID;
energy and water, each between 0.0 and 1.0; alive indicating if the toad is alive, dead, or migrated; the current
location as row and col (column); the last location as rowLast and colLast; and numTimeSteps, number of steps
the toad has been in a moist area. A set of rules govern a toad's behavior, some of which follow: If the toad is
alive and its energy value is such that it would like to eat, it eats; if the toad is very thirsty but is not in water, it
hops to the nearest neighboring site with the most moisture; if a toad is not hungry or thirsty, it still may hop to
a random neighboring site; a toad uses some energy and water sitting and more hopping; a toad can die from
lack of food or water.
After considering this behavior, the module displays a program structure diagram, describes individual
routines, and provides algorithms for the cane toads simulation. (Refer to the module's third section on
"Algorithms" for details [2].)
2.4. Example Problem with Assessment
The module shows results for several scenarios of the simulation. One of these has four AWPs, two of
which are fenced, three moist locations, and 50 toads starting at random locations along the east border. To
simulate the activity of toads over a period of a 12-hour night, for 300 time steps, each time step represents 2.4
min. Figure 1 visualizes the toads in their moisture and food environment at step 85. After 300 time steps, 8 of
the 50 original toads remain alive; 24 are dead; and 18 toads have migrated off the grid to the west.

Fig. 1. Time Step 85 of the animation of one simulation (green circles - toads, blue squares - AWPs, blue squares with red outline - fenced
AWPs, gold squares - moist areas, gray squares - cells of food grid with darker shades indicating greater amounts of food)

The module then discusses the importance of running the simulation multiple times and averaging the
results. For no fences and 100 simulations, a mean of 36.6 of 50 toads are able to migrate off the grid to the
west, while 9.95 died after 300 time steps. However, with all four AWPs being fenced, a mean of 49.26 died.

1432

Angela B. Shiflet et al. / Procedia Computer Science 18 (2013) 1429 – 1435

As the module indicates, the results do show the impact of fencing all or some AWPs for a particular
situation. Moreover, in detail, the material discusses how simulation results agree with experimental data from
Australia [5]. The module continues by discussing the model's shortcomings and possible improvements.
2.5. Module Projects
After discussion of the cane-toads problem, a section containing twenty-one projects is available for students
to complete as individuals or with a team. Instructions indicate to use a computational tool, optionally with
high performance computing except as indicated.
Nine projects, which are variations of the model in the text, involve simulations, visualizations, and multiple
simulations of the migration of adult cane toads in areas with AWPs. Another project considers an alternative
HPC implementation of partitioning of the moisture and food grids.
Based on articles in the professional literature, the remaining eleven projects consider various aspects of the
movement of cane toads. For example, one project examines whether cane toads move nomadically or not.
Two projects, one considering temperature as well, involve individual-based models with food grids to simulate
development of tadpoles in a pond. An individual-based simulation project of toadlets, the next stage after
tadpole, includes a moisture grid and predators. Another project involves juvenile and adult cane toads.
Scientists are exploring the possibility of employing meat ants, a predator to the toadlets, to reduce the young
toad population; and a project has the students simulating the predation. The remaining five projects consider
the impact of various factors, such as temperature, metabolic rates, and the rate of the change the volume of
oxygen in the blood, on the survivability and movement of the cane toads.
3. High Performance Computation in Module
3.1. UPEP
In line with the aims of Blue Waters Undergraduate Petascale Education Program (UPEP), the module has a
section on "High Performance Computing Implementation" that discusses the need for, approaches to, and
advantages of high performance computing (HPC) within the context of this simulation. A subsection on
"Approach to Parallelizing" considers two approaches. First, when running a simulation multiple times, we can
have each process run several of the simulations and then gather their results to obtain means of alive, dead,
and migrated toads. Second, we can parallelize the code for one simulation. The module discusses one
technique involving partitioning of the grids of such parallelization.
Another subsection that considers several simulation scenarios shows speedup and scalability and indicates
how communication can hurt execution time. As the module concludes, because of the communication of grid
and toad information between processes on a distributed system using C/MPI, for 20 × 20 grids with a large
number of toads, the first parallel version, which has processes running complete simulations, seems most
advantageous.
Various projects have the students examine several fundamental HPC issues: Is it more efficient to
implement parallelism by partitioning the physical grid among processes or by distributing toads among
processes? Does each process always have the exact same amount of work to do, or can load balancing issues
arise if, say, certain portions of the grid have more water and/or food sources than others? How does the
parallel code scale as the physical problem increases? What are potential performance bottlenecks, and how
might the parallel code be re-written to address these?

Angela B. Shiflet et al. / Procedia Computer Science 18 (2013) 1429 – 1435

3.2. Blue Waters UPEP Internship Involvement
During the summer of 2011 and subsequent academic year, Wofford College student Whitney E. Sanders
held a Blue Waters UPEP Internship to develop parallel programs using C and MPI to support this and other
modules. His programs and documentation accompanying the module are available on the NCSI UPEP
Curriculum Modules site [2].
Two programs were written using the C programming language and the Message Passing Interface (MPI) to
parallelize the problem in two different ways. The programs share approximately two-thirds of their code and
differ in only two functions, the simulation function and the main function. The common functions perform
such tasks as initializing a grid, determining the cells to which a toad may in the next step, choosing the cell,
and modifying the moisture and food content of toads in response to each toad’s actions.
The first program is embarrassingly parallel, assigning each process a portion of the simulations. In this
program, each client process performs a simulation and sends the resulting alive, dead, and migrated toads to
the server process, which averages the results.
The second program requires a more involved parallelization, as it divides a simulation among multiple
processes. Each client process is responsible for a certain portion of rows in the grid. At the end of a step in the
simulation, each client process sends the rows at both extremities of its range to the server process, which sends
them to the two client processes handling the groups of rows immediately above and below the original client
process’s rows. Such communication is necessary because toads at the boundary of one process’s purview need
to examine the food and moisture attributes of the row just beyond the boundary when deciding where to move
during the next step. Further, the server process allocates the toads within each client process’s purview to the
appropriate client process at the beginning of each step in the simulation and receives the allocated toads back
from the client process at the end of the step. Such transfers are needed because a large portion of the toads
changes from the scope of one client process to the scope of another at each step. Once every step has been
simulated, the server process sums the total number of alive, dead, and migrated toads. This simulation can be
performed multiple times with the results averaged by the server process.
4. Testing and Evaluation
4.1. Class Testing
Wofford College has a January Interim in which the students take only one course that is not in the regular
curriculum. In January, 2012, the authors taught "Modeling Biological Networks," which explored various
biological networks (e.g., gene-regulatory, signal-transduction, neural, food webs, social networks) and
developed models that simulate them. During the first four days, the students developed system dynamics
models, such as regulatory pathways, using the CellDesignerTM tool [6]. Then, for four days, Neurons in
Action provided the foundation for explorations of neurons and their networks [7]. For the remainder of the
term, students learned to use MATLAB in solving numerous problems involving biological networks,
including modeling the invasion of cane toads on days fifteen and sixteen of the interim.
The class consisted of four biology majors and one chemistry/computer science/mathematics major; three
are also pursuing the Emphasis in Computational Science. Four were freshmen, while one was a sophomore;
and two had taken the first programming course in Python.
After reading the module before class, the students completed a quiz taken from the Quick Review
Questions. Because of the variation in background, the three students with no previous programming
experience worked through the model with the instructors. Working as a pair over a two-day period, the two
with previous programming experience successfully completed two project simulations, one with meat ants as

1433

1434

Angela B. Shiflet et al. / Procedia Computer Science 18 (2013) 1429 – 1435

predators of the toadlets and another incorporating estimates of energetics, such as metabolic rate calibrated to
overall dynamic body acceleration, a metric for body motion.
4.2. Evaluation
The students demonstrated their understanding of the module's material with their performance on the quiz
and projects. Immediately after using the material, students completed a questionnaire about the module,
which had the students rate the following statements from 1 (strongly disagree) to 5 (strongly agree):
∞ I understood the science applications in the module.
∞ I understood the mathematics in the module.
∞ The module was readable.
∞ The Quick Review Questions helped me understand the material.
The four completed questionnaires all had scores of 4 or 5 for each question, and each mean was 4.5.
Additional comments from two students who did not have previous programming experience included the
following:
∞ "The module was understandable and detailed…."
∞ "The illustrations and tables were great."
∞ "[I found the] length [most difficult about the module]; [one] can get bogged down reading it."
∞ "I found it really helpful when we went over all of the math and modeling together in class and had it all
explained step by step. It made a lot more sense when it was done that way."
The two students with previous programming experience added the following:
∞ "I found this module very helpful. I was fully able to quickly grasp the information provided in each section
and use the knowledge to work the review questions. The only confusing parts included the indices not all
agreeing. Though MATLAB starts at index 1, some parts of this module use index 0."
∞ "I enjoyed the quantity of helpful exercise and quick review problems."
∞ "This is a very well thought out, organized, and helpful module."
∞ "The projects were difficult, but after completing them I felt that I understood the material much better."
∞ "The simulations were the most interesting parts of this module. These are the types of simulations that truly
interest me, and being able to edit them in the Projects was a great learning experience."
Clearly, the module is more appropriate for students with a programming background or with additional
work on simulations. Results so far are preliminary. However, the success of using the module over two days
during the interim with students who had very little simulation experience supports our plan to use the module
in a regularly offered computational science course on Modeling and Simulation. The course, which is dual
listed as Math/Computer Science 201, requires no previous programming experience but does spend about halfa-semester modeling with cellular automaton simulations.
The high performance computing section was covered as enrichment during the interim and exposed the
students to some of the advantages and challenges of this important area of computational science. We
anticipate that the module will provide an interesting application for the High Performance Computing course,
and we estimate that coverage of the module with projects should take about one week in either that course or
Modeling and Simulation.
5. Extended Resources
Cellular automaton simulations are related to agent-based simulations, which are also dynamic
computational models that are discrete in space, state, and time. For a cellular automaton simulation, the state
of a grid cell might indicate food, moisture, and the existence of a toad at that location as well as attributes,

Angela B. Shiflet et al. / Procedia Computer Science 18 (2013) 1429 – 1435

such as energy, associated with the animal. Transition rules that specify the relationship of a cell with its
neighbors determine the state of the cell at the next time step. With an agent-based simulation, each animal is
modeled as an autonomous, decision-making agent that has a state and behaviors, which control its actions. A
method or procedure, which is associated with a class, or breed or group, of agents, captures some or all of an
agent's behavior. Agents often operate in an environment that arranges cells in a rectangular grid. The prime
distinction between the two types of models is that a cellular automaton simulation loops through all grid
elements one at a time, while an agent-based simulation loops through all individuals one at a time.
With both cellular automaton and agent-based simulations, individual actions and local interactions can help
us to assess their effects on the whole system, and we can easily visualize any emerging patterns. Both
simulation techniques can be effective in modeling dynamic, spatially complex situations. These models can
help us understand systems, evaluate various scenarios, and make informed decisions about actions to take.
Moreover, many projects implemented with one paradigm can be implemented with the other. Often, different
approaches illuminate different facets, and our confidence grows if two solutions arrive at similar conclusions.
Familiarity with cellular automaton and agent-based simulations is valuable for a computational scientist.
Thus, the second edition of the textbook Introduction to Computational Science: Modeling and Simulation for
the Sciences by the first two authors of this paper will have a module on "Introducing the Cane Toad – Able
Invader" in a new chapter on "Agent-Based Models" with corresponding cellular automaton simulation
assignments in a new project module on "Re-Solving the Problems with Cellular Automaton Simulations" [8].
Upon publication, the textbook's website [9] will have associated material and projects involving high
performance computing.
6. Conclusions
"Modeling an 'Able' Invader—the 'Cane' Toad" and its associated programs in MATLAB and C/MPI are
currently available on the UPEP Curriculum Modules website [2]. Class testing of the module in Modeling
Biological Networks interim helped with corrections and showed the utility of the module in introducing
modeling grid-based individual-based simulation to computational science students. High questionnaire scores
and good comments from lower-level undergraduate level science students verify the conclusion that
"Modeling an 'Able' Invader—the 'Cane' Toad" can be an effective computational science educational module.
References
[1] National Computational Science Institute Undergraduate Petascale Education Program (UPEP).
http://computationalscience.org/upep Accessed 3/5/11.
[2] Shiflet, A. and Shiflet, G. 2011. "Modeling an 'Able' Invader—the 'Cane' Toad." National Computational Science Institute
Undergraduate Petascale Education Program (UPEP) Curriculum Modules, UPEP Curriculum Modules site.
http://shodor.org/petascale/materials/UPModules/ableInvader/ Accessed 12/9/12.
[3] Wofford College. http://www.wofford.edu/ Accessed 3/5/11.
[4] Computational Science - Wofford College. http://www.wofford.edu/computationalscience/ Accessed 3/5/11.
[5] Florance, Daniel, Jonathan K. Webb, Tim Dempster, Michael R. Kearney, Alex Worthing and Mike Letnic. 2011. "Excluding access to
invasion hubs can contain the spread of an invasive vertebrate" Proc. R. Soc. B published online 23 February 2011 doi:
10.1098/rspb.2011.0032.
[6] CellDesignerTM. 2012. http://www.celldesigner.org/ Accessed 4/3/12.
[7] Moore, John W. and Anne e. Stuart. 2007. Neurons in Action 2: Tutorials and Simulations using NEURON. Sinauer and Assoc.
[8] Shiflet, Angela B. and George W. Shiflet. Anticipated 2014. Introduction to Computational Science: Modeling and Simulation for the
Sciences, 2nd Edition. Princeton U. Press.
[9] Computational Science, http://www.wofford.edu/ecs/ Accessed 3/3/13.

1435

