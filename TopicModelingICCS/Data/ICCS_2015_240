Procedia Computer Science
Volume 51, 2015, Pages 1752–1761
ICCS 2015 International Conference On Computational Science

Relieving Uncertainty in Forest Fire Spread Prediction by
Exploiting Multicore Architectures
Andr´es Cencerrado, Tom`as Art´es, Ana Cort´es, and Tom`as Margalef
1

Computer Architecture and Operating Systems Department, Universitat Aut`
onoma de Barcelona
acencerrado@caos.uab.es
2
tomas.artes@caos.uab.es
3
ana.cortes@uab.cat
4
tomas.margalef@uab.cat

Abstract
The most important aspect that aﬀects the reliability of environmental simulations is the uncertainty on the parameter settings describing the environmental conditions, which may involve
important biases between simulation and reality. To relieve such arbitrariness, a two-stage prediction method was developed, based on the adjustment of the input parameters according to
the real observed evolution. This method enhances the quality of the predictions, but it is very
demanding in terms of time and computational resources needed. In this work, we describe a
methodology developed for response time assessment in the case of ﬁre spread prediction, based
on evolutionary computation. In addition, a parallelization of one of the most used ﬁre spread
simulators, FARSITE, was carried out to take advantage of multicore architectures. This allows us to design proper allocation policies that signiﬁcantly reduce simulation time and reach
successful predictions much faster. A multi-platform performance study is reported to analyze
the beneﬁts of the methodology.
Keywords: multicore architectures, parallel computing, high performance computing applications, MPIOpenMP framework, environmental simulation, prediction with uncertainty

1

Introduction

Nowadays, scientiﬁc community relies on High Performance Computing (HPC) environments
in order to solve most of the present scientiﬁc problems, taking advantage of parallel and distributed computing environments. Because of the computational advances, these problems
have become more demanding as a consequence of the fact that it is possible at present to
achieve goals that were inconceivable in the past. Many eﬀorts have been oriented towards
the application of HPC techniques and capabilities to deal with diﬀerent scientiﬁc problems
[1] [2]. Nevertheless, a lot of these applications still need much computational resources and
time, especially dynamic, event-driven simulations. In much of these cases, the challenge is
1752

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.380

Relieving Uncertainty in Forest Fire Spread Prediction

Andr´es Cencerrado et Al.

not only to solve them but also to get the results satisfying demanding time constraints. The
area of environmental sciences and natural hazards evolution prediction is a clear example [3]
[4]. The current research in the ﬁeld of forest ﬁre behavior is very valuable in order to develop
and optimize simulation and prediction tools, such as FireLib [5], FARSITE [6], and others
[7] [8]. Given the complexity of these implemented models as well as their implicit computational demands, there are diﬀerent works focused on the optimization of their results either
by coupling diﬀerent models or by exploiting the increasing computational capabilities. These
computational solutions constitute essential components in the implementation of suitable Decision Support Systems (DSS) used by diﬀerent civil protection agencies. Nevertheless, in order
to be useful, any evolution prediction of an ongoing hazard must be delivered as fast as possible
in order to not be outdated (i.e., to be useful). The data that describe the actual scenario
where the ﬁre is taking place are usually subject to high levels of uncertainty. This fact, added
to models inherent errors, represents a serious drawback for the correctness of the prediction.
This disadvantage could be relieved by a proper adjustment of the input parameters according
to the actual propagation. Based on this, the experimentation presented in this work relies on
a two-stage methodology to improve the quality of the predictions, where the input parameters
are calibrated in an adjustment stage before being used in the prediction stage. Calibrating
the simulator input parameters according to the observed behavior of the ongoing ﬁre helps
improve the quality of later predictions. However, it also stresses the need of simultaneous
execution of many diﬀerent simulations. In previous studies it has been analyzed the signiﬁcant
diﬀerences regarding the execution times that a forest ﬁre simulator may present [9]. These
studies revealed that the execution time of a single simulation on the same map and simulating
the same time could vary from seconds to several minutes or even hours. In environmental
emergency management the time window to deliver a prediction is very limited. As a consequence, it is necessary to anticipate the execution time of a simulation (i.e. estimate the
execution time before running the simulator) considering only the input parameters and the
amount of resources allocated for it. An early detection of those conﬁgurations that lead us to
long simulations allows us to allocate them to more computational resources to shorten their
execution times. This work relies on a solid methodology to perform an accurate and quick
estimation of the time needed to carry out each simulation, regardless of what component(s) of
the scenario (the map to be simulated) are the ones that provoke the simulation to be longer
or shorter. Furthermore, we also carried out a parallelization of FARSITE using OpenMP to
be able to exploit multicore architectures, resulting in important reductions in the execution
time of the simulations. The experiments presented in this work have been carried out using
two diﬀerent computational platforms:
• An IBM x3550 cluster, where each node counts on 2x Dual-Core Intel Xeon CPU 5160,
3.00GHz, 4MB L2 cache memory (2x2) and 12GB Fully Buﬀered DIMM 667 MHz, running
Linux version 2.6.16.
• A DELL cluster, where each node counts on 2x6-core Intel Xeon E5645 2.4 GHz, 32KB and
256KB dedicated L1 and L2 cache memory, 12MB shared L3, and 96GB Fully Buﬀered
DIMM, running Linux version 2.6.32.
From this point forward, these two platforms will be referred as IBM cluster and Dell cluster,
respectively. The rest of this paper is organized as follows: in the next section, an overview
of the two-stages prediction method is given as well as the description of the MPI framework
we rely on. In Section 3, we present the methodology we use for the characterization of the
evolutionary adjustment strategy and the kernel of the simulator, respectively. In Section 4,
the method followed to extrapolate this methodology so that it can be applied to a parallel
1753

Relieving Uncertainty in Forest Fire Spread Prediction

Andr´es Cencerrado et Al.

version of the simulator running on diﬀerent parallel-computing platforms is described. Finally,
the obtained results are discussed and the main conclusions are included in Section 5.

2

MPI framework for a two-stage prediction method

The classical way of predicting forest ﬁre behavior (see Figure 1, dotted box) takes the initial
state of the ﬁre front as input, as well as the input parameters given for a certain time instant,
and the simulator returns the ﬁre spread prediction for a later time instant. Comparing the
simulation result with the advanced ﬁre line, the forecasted ﬁre front tends to diﬀer to a greater
or lesser extent from the real ﬁre line. The main reason of this mismatch is that the classic
calculation of the simulated ﬁre is based on one single set of input parameters aﬄicted with
the aforementioned uncertainty. To overcome this drawback, a simulator-independent prediction scheme was proposed to calibrate model input parameters [10]. Introducing a previous
adjustment stage as shown in Figure 1, the set of input parameters is calibrated before every prediction step. Thus, the proposed solution comes from reversing the problem: to ﬁnd a
parameter conﬁguration such that, setting this conﬁguration as input, the ﬁre simulator will
produce a prediction that matches the actual ﬁre behavior. Having detected the simulator input
that better reproduces the observed ﬁre propagation, the same set of parameters can also be
used to describe the immediate future, assuming that meteorological conditions remain similar
during the next prediction interval.

Figure 1: Two-stage prediction method. RF and SF stand for real ﬁre and simulated ﬁre,
respectively
This two-stage prediction method can be applied continuously, providing calibrated parameters at diﬀerent time intervals and taking advantage of the observed ﬁre behavior. This
approach has been proven to be suitable for enhancing the quality of the predictions, relieving
the disadvantages related to the input-data uncertainty. As for the calibration mechanism, Genetic Algorithms (GAs) turned out to be the most appropriate technique among other Global
Optimization Algorithms (such as Tabu Search, Simulated Annealing, etc.) not only for their
outstanding results, but also because their nature favors parallel computing [10]. GAs work
in an iterative way. This algorithm starts with an initial population of individuals, which will
be evolved through several iterations in order to guide them to better search space areas. The
individuals used in the case of forest ﬁre spread prediction are deﬁned as a sequence of diﬀer1754

Relieving Uncertainty in Forest Fire Spread Prediction

Andr´es Cencerrado et Al.

ent genes, namely wind speed and wind direction, moisture content of the live fuel, moisture
content of the dead fuel (at three diﬀerent times) and type of vegetation. Operators such as
elitism, selection, crossover and mutation are applied to every population to obtain a new one
superior to the previous one. As it is well known, the use of evolutionary techniques is highly
computational-demanding, since it involves large sets of simulations. In addition, as previously stated, the underlying simulator may produce prohibitive execution times, depending on
the scenario being simulated. Consequently, the use of the two-stage prediction framework to
overcome the input-parameter uncertainty problem presents the inconvenience of the long time
needed to deliver reliable predictions. In order to compute the adjustment stage in a reasonable
time interval, an MPI-based framework under the Master/Worker paradigm has been implemented. In the calibration stage, the Master node generates a population that represents a set
of diﬀerent scenarios to be evaluated (the initial population of individuals). The master node
distributes these individuals among the worker nodes and each worker simulates the received
individual, i.e. the scenario represented by the individual. The result of each simulation consists of a raster ﬁle representing the map as a grid of cells, for which the time of arrival of the
ﬁre front is indicated. Then, the output is compared to the actual ﬁre behavior by means of
the evaluation of the diﬀerence between the actual propagation and the simulated propagation.
The diﬀerence is computed using Equation 1. This equation calculates the diﬀerence in the
number of cells burned, both missing or in excess, between the simulated and the real ﬁre.
Formally, this formula corresponds to the symmetric diﬀerence between the actual spread and
the simulated spread, divided by the actual spread, so as to express a proportion. UnionCells is
the union of the number of cells burned in the real ﬁre and the cells burned in the simulation,
IntersectionCells is the intersection between the number of cells burned in the real ﬁre and in
the simulation, RealCells are the cells burned in the real ﬁre and InitCells are the cells burned
at the starting time.
=

U nionCells − IntersectionCells
RealCells − InitCells

(1)

The resulting error is sent back to the Master. Once all the workers have ﬁnished, the
Master node is able to rank the individuals in a list using the error as sorting criteria. Then, a
new generation of individuals is generated by applying the aforementioned genetic operations
of elitism, crossover and mutation. Once the new population is generated, its individuals are
distributed again among the workers. This process is repeated in an iterative way a ﬁxed
number of generations, and the provided solution for the problem is the best individual of the
last generation (the one which produces lowest error). This individual (i.e. this set of input
parameters describing the scenario) will be the individual used to simulate the ﬁre spread for
the next time interval. The use of an iterative adjustment technique such as GAs implies that
it leads us to the desired solution progressively, i.e., the more the iterations we are able to
perform, the better the solution we will be able to ﬁnd. Obviously, this fact has a direct impact
on the time incurred in the prediction process. So, in order to reach a good trade-oﬀ between
quality and urgency, one must consider three main interrelated issues.
a) The quality of the prediction is directly related to the quality of the adjustment, and
the quality of the adjustment depends on how many times the adjustment technique is
iterated, as well as on the number of scenarios tested per iteration.
b) The amount of computing resources determines the amount of simulations that can be
simultaneously executed per iteration at the adjustment stage.
1755

Relieving Uncertainty in Forest Fire Spread Prediction

Andr´es Cencerrado et Al.

c) The response time in providing a prediction is a critical point and seriously limits the
number of iterations that can be executed at the adjustment stage.
While other works [11] deal with a), this work is focused on points b) and c). Assuming that we
have enough computing resources available so as to simulate all the individuals of a population
in parallel, the time incurred at each generation is determined by the slowest one. This is
due to the fact that the master node has to wait until all workers compute the simulations
and their respective errors. Therefore, to be able to assess in advance how long the two-stage
prediction scheme will take, we need a characterization of the underlying simulator in terms of
the time required for a certain simulation depending on the input setting. This characterization
will allow us to determine how many resources (computing cores) we need to dedicate to each
simulation to keep to the prediction time requirements. Besides, it will enable us to exploit the
multicore architectures in order to minimize the time spent in each generation. In this sense, we
rely on the Simulator Kernel Characterization methodology described in [12], which allows us
to foresee every simulations execution time with a high degree of reliability. Simulator Kernel
Characterization is based on two pillars: the use of Decision Trees [13] to classify each simulation
instance, and a training dataset composed of thousands of simulation instances, each of them
generated according to the diﬀerent probability distributions for each parameter. In our speciﬁc
case, the probability distributions and their associated parameters, as regards wind speed and
direction, were the ones used in [14]. The vegetation models correspond to the 13 standard fuel
models [15]. Regarding the fuel moisture contents, the parameters of the distributions were
set taking into account the considerations detailed in [16]. Each training instance is labeled
according to its execution time, so that the Decision Tree is trained to classify a new simulation
instance according to its estimated execution time. In this work, we used 4 diﬀerent labels (A,
B, C and D) to determine 4 diﬀerent execution time ranges for each simulation. This will be
discussed in detail in Section 4.

3

Taking advantage of multicore platforms

FARSITE was analyzed using gprof [17] under diﬀerent workloads to ﬁnd the most timeconsuming functions. This analysis showed that the exclusive execution time is quite distributed
all over the functions except two functions. CrossThread::Cross() function consumes over 22%
and StandardizePolygon::Cross() about 14.6% of inclusive execution time. Neither of them give
opportunity to use OpenMP due to possible racing conditions caused by a considerable number
of shared variables in the loop as well as other inconveniences (such as loop breaking). So, we
analized the callgraph looking for a parent node with parallelizable loops, which include the
calls to those functions. CrossCompare() represents approximately the 60% inclusive execution
time. This function includes a loop in charge of perfoming the ﬁre line coherency control, and it
can be parallelized using OpenMP. Thus, FARSITE was parallelized by introducing OpenMP
pragmas in such function. Because of the Amdahl’s law, the theoretical maximum speedup is
limited by the part of the application that has been parallelized. Since this function represents
approximately 60% total execution time, 40% execution time corresponds to a sequential part.
So, Equation 2 expresses the theoretical minimum execution time we could obtain using this
parallelization as a function of the number of cores (n), where ts stands for the execution time
of the serial version. As well, Equation 3 expresses the maximum speedup we could obtain. As
can easily be deduced, the limit of this speedup when n tends to inﬁnity is 1/0.4 = 2.5.
tpar (NCores ) = 0.4 ∗ ts +
1756

0.6
∗ ts
NCores

(2)

Relieving Uncertainty in Forest Fire Spread Prediction

SpeedU p(NCores ) =

3.1

Andr´es Cencerrado et Al.

ts
1
=
0.4ts + 0.6
0.4
+
∗
t
s
n

0.6
n

(3)

Application in multicore architectures

Figures 3 and 4 depict the obtained histograms of execution times of the parallel version of
FARSITE in Dell cluster for a training database of 9000 diﬀerent instances, using 2 and 8
threads, respectively. By the observation of these examples, one can notice the fact that the
silhouettes are very similar to each other. This resemblance indicates that the simulations, in
terms of execution time, will behave in the same way (i.e. they will take shorter or longer)
independently of the number of threads used. For example: if a certain input is classiﬁed as B,
it will always be classiﬁed as B, regardless of how many threads we use for the simulation. The
only diﬀerence will be the absolute value of the execution time.

4

Case Study and Computational Experimets

The objective pursued in this work is to evaluate the potential beneﬁt of the simulation kernel
characterization with respect to the design of diﬀerent core-allocation policies. For this purpose,
an experimental study was carried out based on GAs as the adjustment technique to be used
in the two-stage prediction method detailed in Section 2. From this point forward, each input
setting of the simulator (each scenario) is mentioned as an individual. Thus, we applied the
Simulator Kernel Characterization of the parallel version of FARSITE running in the two architectures detailed in Section 1: the IBM and Dell clusters. Table 1 details the upper boundaries
that deﬁne each class.
IBM: 2 threads
IBM: 4 threads
Dell: 1 thread
Dell: 2 threads
Dell: 4 threads
Dell: 8 threads

Class A
73
58
105
78
67
54

Class B
209
162
360
250
229
193

Class C
433
332
675
493
424
307

Class D
1054
938
1617
1121
998
734

Table 1: Upper boundaries (in seconds) for each class according to each combination [computer
platform, number of threads]

The topographic data used in this experimentation is an area in the northeast of Spain
which is one of the most damaged by forest ﬁres every year: El Cap de Creus, which has an
approximate real extension of 900 square kilometers. This is a very suitable and representative
study area; subject of other studies regarding the quality assessment of the ﬁre spread prediction
[11]. The evolution of 50 diﬀerent populations (each one composed of 25 individuals) over 10
generations was carried out, keeping track of the elapsed times produced as well as the class
predicted for each individual before its execution. As highlighted in Section 2, the way the MPI
framework for GA operates implies that the time needed for the completion of each generation is
determined by the slowest simulation (considering that we have enough computational resources
so as to simulate every individual in parallel); so, it is important to control individuals C and
D in every evolution process.
1757

Relieving Uncertainty in Forest Fire Spread Prediction

Andr´es Cencerrado et Al.

Figure 2: Histogram of execution times using the parallel version of FARSITE with 2 threads

Figure 3: Histogram of execution times using the parallel version of FARSITE with 8 threads
Because of the stochastic nature of the GA, the appearance of such individuals over the
evolution is inevitable. However, by means of the simulator kernel characterization, we are able
to detect the existence of such individuals in a certain generation before we carry out their
simulation. Thus, we are able to take advantage of the parallel version of FARSITE, determining a real-time core-allocation strategy for each individual in a generation in order to save
as much overall execution time as possible. The beneﬁts of taking advantage of the proposed
methodology can be easily understood by means of a simple example. Let us consider a simple
core-allocation policy such as in Table 2.

Allocated cores

Classiﬁed as A
1

Classiﬁed as B
2

Classiﬁed as C
4

Classiﬁed as D
8

Table 2: Simple core-allocation policy according to individual classiﬁcation

1758

Relieving Uncertainty in Forest Fire Spread Prediction
Normal Mean

9000

Andr´es Cencerrado et Al.

Core Allocation Mean

Normal

Core Allocation

8000

time(s)

7000
6000
5000
4000
3000
2000
1000
0

0

10

20

30

40

GA Executions

50

GA Generation

1
2
3
4
5
6
7
8
9
10

GA Generation

Figure 4: GA execution tine for 50 diﬀerent initial populations with/out core allocation policy.

1
2
3
4
5
6
7
8
9
10

C Individuals

0

5

10

15

20
25
30
35
Initial Population

40

45

50

40

45

50

D Individuals

0

5

10

15

20
25
30
35
Initial Population
0

1

2

3

4

5

Figure 5: Number of individuals of class C and D per GA generation and GA execution with
diﬀerent initial populations.
Figure 4 shows the execution times of the whole evolution process for the 50 diﬀerent initial
populations. Figure 5 shows the number of individuals C and D present at each generation for
every the 50 initial populations. We replicated the evolution process for each initial population,
forcing the execution of exactly the same intermediate populations. The average elapsed time
obtained in the whole evolution of these 50 populations in the ﬁrst case is 5394 seconds (89.9
minutes). Applying the core-allocation policy, the average elapsed time decreased to 3159
seconds (52.6 minutes). Focusing on the case of the greatest diﬀerence (population 15), this
was of 4622 seconds, more than 1 hour and a quarter. Obviously, this reduction can make an
1759

Relieving Uncertainty in Forest Fire Spread Prediction

Andr´es Cencerrado et Al.

important diﬀerence at the moment of attending the ongoing ﬁre. As described above, a simple
and static core-allocation policy already provides important savings in the evolution time, but
the considered scenario does not contemplate the problem of dealing with restrictions regarding
the amount of computational resources available. For instance, if we had access only to 2
DELL-cluster nodes and 8 IBM-cluster nodes, we would not have had enough computational
resources to run every individual of each generation in parallel, therefore the elapsed time for
each generation would have been signiﬁcantly diﬀerent, with certainty. However, the fact of
having such good results thanks to such a simple and static policy allows us to consider the
issue of designing an intelligent scheduling system, which takes into account the computational
resources available to decide the best core-allocation, according diﬀerent kinds of criteria such
as:
• Best core-allocation policy, which respects the existing time constraints (possible deadlines
to deliver a prediction), and allows the evolution process to be carried out as fast as
possible.
• Best core-allocation policy, which respects the existing time constraints, and allows the
evolution process to be carried out in the most eﬃcient way (using as less resources as
possible).
• A combination of the previous ones, considering the fact that it is possible that the different platforms we can use at the moment of attending the emergency could be managed
by diﬀerent institutions/organizations, imposing diﬀerent conditions.

5

Conclusions

When dealing with forest ﬁre spread prediction a key point to consider is the system response
time. To be useful, any forest ﬁre spread forecast should be delivered under strict real time
constraints. In this work, we use a methodology for the assessment of the time response in
forest ﬁre spread, which is able to anticipate how much execution time a certain input setting
will produce, without the necessity of running any simulation. The results obtained for the
case study described in the presented case study clearly demonstrate the importance of taking
advantage of the multi-core capabilities in the computing nodes in order to save important
amounts of time, which is a critical resource in the area of environmental emergencies management. Although the maximum speedup that could be obtained when the enhanced FARSITE
is far from linear speedup, the implemented parallelization involves great savings in absolute
times. We are able to save more than 1 hour in the overall two-stage prediction process by
applying a very simple static policy for the number of cores assigned to each simulation. Such
time interval becomes very important, given the context of dangerousness involved in an event
such as a forest ﬁre. So, this study allows us to tackle the problem of designing diﬀerent and
complex policies to optimize the use of the available computational resources. Ongoing work is
also related to add to our methodologies the capability to automatically adapt to new computing resources appearance in real time. The results obtained open up these new challenges with
good expectations and a guaranteed background.

Acknowledgements
This research has been supported by the Ministerio de Econom´ıa y Competitividad (MECSpain) under contract TIN2011-28689-C02-01 and the Catalan government under grant 20141760

Relieving Uncertainty in Forest Fire Spread Prediction

Andr´es Cencerrado et Al.

SGR-576.

References
[1] ME Tryby, BY Mirghani, GK Mahinthakumar, and S Ranji Ranjithan. A solution framework for
environmental characterization problems. International Journal of High Performance Computing
Applications, 24(3):265–283, 2010.
[2] Enol Fern´
andez, Andres Cencerrado, Elisa Heymann, and Miquel A Senar. Crossbroker: a grid
metascheduler for interactive and parallel jobs. Computing and Informatics, 27(2):187–197, 2012.
[3] Henrik Madsen and Flemming Jakobsen. Cyclone induced storm surge and ﬂood forecasting in
the northern bay of bengal. Coastal Engineering, 51(4):277–296, 2004.
[4] John M Dennis, Mariana Vertenstein, Patrick H Worley, Arthur A Mirin, Anthony P Craig,
Robert Jacob, and Sheri Mickelson. Computational performance of ultra-high-resolution capability
in the community earth system model. International Journal of High Performance Computing
Applications, 26(1):5–16, 2012.
[5] Collin D Bevins. Firelib user manual and technical reference. 1996.
[6] Mark Arnold Finney et al. Farsite, ﬁre area simulator–model development and evaluation. 2004.
[7] AMG Lopes, MG Cruz, and DX Viegas. Firestation - an integrated software system for the
numerical simulation of ﬁre spread on complex topography. Environmental Modelling & Software,
17(3):269–285, 2002.
[8] Giuseppe A Trunﬁo, Donato DAmbrosio, Rocco Rongo, William Spataro, and Salvatore Di Gregorio. A new algorithm for simulating wildﬁre spread through cellular automata. ACM Transactions
on Modeling and Computer Simulation (TOMACS), 22(1):6, 2011.
[9] Andr´ees Cencerrado, Roque Rodriguez, Ana Cortes, and Tom`
aas Margalef. Urgency versus accuracy: Dynamic data driven application system for natural hazard management. International
Journal of Numerical Analysis & Modeling, 9(2), 2012.
[10] Baker Abdalhaq, Ana Cort´es, Tom`
as Margalef, Emilio Luque, DX Viegas, et al. Optimisation
of parameters in forest ﬁre propagation models. In Forest ﬁre research and wildland ﬁre safety:
Proceedings of IV International Conference on Forest Fire Research 2002 Wildland Fire Safety
Summit, Luso, Coimbra, Portugal, 18-23 November 2002. Millpress Science Publishers, 2002.
[11] Andr´es Cencerrado, Ana Cort´es, and Tom`
as Margalef. Applying probability theory for the quality
assessment of a wildﬁre spread prediction framework based on genetic algorithms. The Scientiﬁc
World Journal, 2013, 2013.
[12] Andr´es Cencerrado, Ana Cort´es, and Tom`
as Margalef. Response time assessment in forest ﬁre
spread simulation: An integrated methodology for eﬃcient exploitation of available prediction
time. Environmental Modelling & Software, 54:153–164, 2014.
[13] Tom M Mitchell. Machine learning. 1997. Burr Ridge, IL: McGraw Hill, 45, 1997.
[14] RE Clark, AS Hope, S Tarantola, D Gatelli, Philip E Dennison, and Max A Moritz. Sensitivity
analysis of a ﬁre spread model in a chaparral landscape. Fire Ecology, 4(1):1–13, 2008.
[15] Frank A Albini and Intermountain Forest. Estimating wildﬁre behavior and eﬀects. 1976.
[16] Joe H Scott and Robert E Burgan. Standard ﬁre behavior fuel models: a comprehensive set for
use with rothermel’s surface ﬁre spread model. The Bark Beetles, Fuels, and Fire Bibliography,
page 66, 2005.
[17] Susan L Graham, Peter B Kessler, and Marshall K Mckusick. Gprof: A call graph execution
proﬁler. In ACM Sigplan Notices, volume 17, pages 120–126. ACM, 1982.

1761

