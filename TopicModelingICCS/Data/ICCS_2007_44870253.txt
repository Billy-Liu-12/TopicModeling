Accelerating XML Structural Matching Using Suffix
Bitmaps
Feng Shao, Gang Chen, and Jinxiang Dong
Dept. of Computer Science, Zhejiang University, Hangzhou, P.R. China
microf_shao@msn.com,
cg@zju.edu.cn, djx@zju.edu.cn

Abstract. With the rapidly increasing popularity of XML as a data format, there
is a large demand for efficient techniques in structural matching of XML data.
We propose a novel filtering technique to speed up the structural matching of
XML data, which is based on an auxiliary data structure called suffix bitmap. The
suffix bitmap captures in a packed format the suffix tag name list of the nodes in
an XML document. By comparing the respective suffix bitmaps, most of the
unmatched subtrees of a document can be skipped efficiently in the course of
structural matching process. Using the suffix bitmap filtering, we extend two
state-of-the-art structural matching algorithms: namely the traversal matching
algorithm and the structural join matching algorithm. The experimental results
show that the extended algorithms considerably outperform the original ones.
Keywords: XML, Suffix Bitmap, Structural Matching, Filtering.

1 Introduction
In the past decade, while XML has become the de facto standard of information
representation and exchange over the Internet, efficient XML query processing
techniques are still in great demand. The core problem of XML query processing,
namely structural matching, still remains to be a great challenge. In this paper, we
propose a novel acceleration technique for structural matching of XML documents.
Our method utilizes an auxiliary data structure called suffix bitmap, which
compresses the suffix tag names list of XML nodes in a packed format. In an XML
document tree, each node corresponds to a sub-tree, which is rooted at the node itself.
The suffix tag names list of an XML node contains all the distinct tag names in its
corresponding sub-tree, which is described in [2]. For ease of implementation and
store efficiency, we present a novel data structure called suffix bitmap to compress
suffix tag names list. Suffix bitmap contains the non-structural information of XML
sub-tree. As bitwise computation can be processed efficiently, we can skip most of the
unmatched subtrees using bitwise suffix bitmap comparison. Therefore, the suffix
bitmap can be deployed to filter the unmatched subtrees of XML documents.
In this paper, we will integrate suffix bitmap filtering into the traversal matching
algorithm and the structural join matching algorithm. The experiments show that the
extended matching algorithms considerably outperform original algorithms. Also, we
present the construction procedure of suffix bitmap with linear time complexity. To
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 253–260, 2007.
© Springer-Verlag Berlin Heidelberg 2007

254

F. Shao, G. Chen, and J. Dong

reduce the memory consumption further, we also present the variable-length suffix
bitmap.
The rest of the paper is organized as follows. Section 2 describes the suffix bitmap
and its construction algorithm. Section 3 integrates the suffix bitmap filtering into
original matching algorithms. Section 4 compares the extended matching algorithms
to the original algorithms. Section 5 lists some related work.

2 Suffix Bitmap
2.1 Global Order of Tag Names
Given a XML document, we define the global order of tag names. Each distinct tag
name has a global sequence number, which is an incremental positive number and
starts at 0. The assigned function is:
Definition 1

γ：tagName Æ GSN

GSN is increasing numeric that starts from 0
GSNtagname1 < GSNtagname2 iff tagname1 first appears before tagname2 on XML document import

After global sequence numbers assigning, we get the global order of tag names. We
represent the global order relation of tag names as an order set called tag names set.
Definition 2
Settagname = { tagname0 , tagname1 , … , tagnamen-1 }
The GSN of tagnamei is i

For example, in figure1, tagname1 is bib, tagname2 is book and so on.

Fig. 1. Suffix Bitmap Filtering

2.2 Suffix Bitmap
We first give the description of suffix tag names list. In XML document tree, each
node n corresponds to a sub-tree SubTreen. The suffix tag names list of node n
contains all distinct tag names appeared in SubTreen. Due to the global order of tag

Accelerating XML Structural Matching Using Suffix Bitmaps

255

names, we can represent suffix tag names as a bitmap, called suffix bitmap. We define
the suffix bitmap as follows:

For example, in figure1, chapter(1111000) has title, chapter, section, text in its
subtree. We attach a suffix bitmap to each node in XML document tree. So the
memory consumption of total suffix bitmaps is node_count * m / 8 bytes, where
node_count is the number of nodes in XML document.
2.3 Construction of the Suffix Bitmap
We give a preorder construction algorithm of the suffix bitmap, which runs on XML
document import. The detail description is below:
Suffix Bitmap Construction Algorithm
1. void StartDocument() {
2.
createStack()
3. }
4. void EndDocument() {
5.
destoryStack()
6. }
7. void StartElement(String name) {
8.
BSuffixcurr = 1 << getTagNameIdx(name)
9.
pushStack(BSuffixcurr)
10. }
11. void EndElement(String name) {
12.
BSuffixcurr = PopStack()
13.
BSuffixparent = StackTop()
14.
IF BSuffixparent != NULL
15.
BSuffixparent = BSuffixparent | BSuffixcurr
16.
End IF
17. }
As shown in above algorithm, we use a stack to hold the in-coming suffix bitmap.
When StartElement call, we create the corresponding suffix bitmap and push it into
the stack. When EndElement call, we pop the corresponding suffix bitmap out and
adapt parent node’s suffix bitmap by or operation. Thus, the construction order is
from bottom to top. The time complexity of construction is O(n), where n is the
number of nodes in XML document. The function getTagNameIdx inputs a tag name
and outputs the corresponding global sequence number.
The readers maybe find a problem in our construction algorithm that is we can’t
determine the length of suffix bitmap during XML import. There are several methods

256

F. Shao, G. Chen, and J. Dong

to tackle this problem. One method is we implement the construction of suffix bitmap
after XML import. The other method is we pre-estimate the length of suffix bitmap
and if the real length of suffix bitmap is larger than the estimate length, we implement
the construction again after XML import. Those methods are all inefficient. In the
next subsection, we will propose variable-length suffix bitmap to solve this problem.
2.4 Variable-Length Suffix Bitmap
Since we can’t determine the final cardinality of Settagname, the variable-length suffix
bitmap is proposed. We first define the snapshot of Settagname, which is an order subset
of Settagname, as follows:
Definition4
Snapshotk = {tagnamei | i≤k, tagnamei Є Settagname }
Settagname has m Snapshots on xml document import, where m is the cardinality of Settagname

The variable-length suffix bitmap has the initial length that is equal to the cardinality
of the snapshotk at the moment of creation. When the children suffix bitmap modify
the parent suffix bitmap, the length of variable-length parent suffix bitmap is adaptive
to the cardinality of current snapshotk. Thus, we modify the length of suffix bitmap in
line 8 and 15 of above procedure to corresponding snapshotk cardinality.
Because the global sequence number of each distinct tag name is invariable since
creating, the variable-length suffix bitmap has the same effect as the fix-length suffix
bitmap, except that we need to fill the variable-length suffix bitmap with 0s bits
during the structural matching, which will be described in next section.
For some xml documents that contain many distinct tag names, our fixed-length
suffix bitmap may be waste of large space. We can solve this problem using the
variable-length suffix bitmap. To save space further, we present frequent query tag
names to reduce the suffix bitmap, which employs some policies of data mining on
xml queries.

3 Structural Matching Filtering
3.1 Traversal Filtering
The suffix bitmap contains the tag names information of each sub-tree, so it can judge
the unmatched subtrees. Given a query path P and a node np on P, the suffix bitmap of
query node is the same as the suffix bitmap of the document node. We have the
filtering formula as follows:
Formula 1
Given the suffix bitmap BSuffix of element n, and the suffix bitmap QSuffix of query node np
IF BSuffix & QSuffix ≠ Qsuffix
Then there must be no matching occurrence in Subtreen

In the formula 1, QSuffix must be the fix-length suffix bitmap, and BSuffix may be the
variable-length suffix bitmap. However, it doesn’t impact the correctness of the
formula 1. For example, in figure 1, we filter xpath book[/title]//section. The QSuffix

Accelerating XML Structural Matching Using Suffix Bitmaps

257

of path root book is 0100110. The element book(0011010) is filtered because it
satisfies formula 1.
Based on the formula 1, we extend the classical traversal matching algorithm and
integrate the suffix bitmap filtering into it. During matching traverse, we can skip
most of the unmatched sub-tree by employing the formula 1. We give the
modification detail of DFS algorithm, which is a state-of-the-art traversal algorithm.
Suffix Bitmap Filtering in DFS
1. void DFS (Node QRoot, Element DocRoot) {
2.
primaryMatch(QRoot, DocRoot)
3. }
4. void PrimaryMatch(Node node, Element element) {
5.
IF (Filter(node, element))
6.
return
7.
// traversal matching process
8.
…
9.
// recursive PrimaryMatch call
10.
…
11. }
12. Boolean Filter(Node node, Element e) {
13.
IF BSuffixe & BSuffixnode != BSuffixnode
14.
return true
15.
Else
16.
return false
17.
End IF
18. }
As shown in above algorithm, we call Filter function before each node matching. If
the node satisfies the filtering condition, we skip the following matching process and
recursive PrimaryMatch call again. Therefore, the bitmap suffix filtering is a highly
efficient technique to skip most of the unmatched sub-trees. The efficiency of speedup
is dependant on hit ratio of the structural matching. If hit ratio of the structural
matching is fairly low, the filtering will be highly efficient. Since the cost of the
function Filter is tiny, it adds very low overhead to matching process.
3.2 Cursor Stream Filtering
The structural join algorithms based on numbering schema are also the classical
matching algorithms, which fall into the set-based category. The structural join
algorithms utilize the structural numbering to judge the relationship of candidate
nodes, which are obtained by the stream cursor. A disadvantage of structural join
algorithms is that there often exist many useless intermediate results during
processing because of uncertainty. Using the suffix bitmap filtering, we can eliminate
most of useless intermediate results, therefore speed up the matching in structural join
algorithms. The extra portion about integrating the suffix bitmap filtering into the
structural join is described below:

258

1.
2.
3.
4.
5.
6.
7.

F. Shao, G. Chen, and J. Dong

Suffix Bitmap Filtering in Structural Join Algorithms
Element getNextElement(Node node) {
Element e
do {
e = getNextInStream(node)
} while (e != null && Filter(node, e))
return e
}

As shown in pseudo-code, the function getNextElement is the basic function of
cursor operation of structural join. We encapsulate it to a loop style, which skip the
unmatched elements by the suffix bitmap filtering that has been described in above
subsection. It can save costly time to filter the unmatched nodes. There has one
difference between the filtering in traversal algorithms and the filtering in structural
join algorithms. The former is to skip the unmatched sub-trees and the latter is to skip
the unmatched nodes. However, there has the same effect that is the speedup.

4 Experiments
In this section, we present results and analyses of experiments on the comparison
between extended algorithms and previous algorithms. All of our experiments were
performed on a PC with Pentium4 2.4GHz CPU, 1GB memory and 120 GB IDE
hard disk. The OS is Windows XP. We implemented all algorithms in JAVA. We
implemented DFS, FS-DFS, SJoin and FS-SJoin algorithms. DFS is a depth-first
traversal algorithm with inline predication checking. SJoin is a novel bottom-up
structural join algorithm that enhances the holistic stack join algorithm. FS-DFS is
our extended DFS algorithm with the suffix bitmap filtering. And FS-SJoin is our
extended SJoin algorithm with the suffix bitmap filtering. The datasets include Nasa,
XMark and Treebank [8]. There have three groups of queries: QN, QX and QT
which correspond to Nasa, XMark and Treebank. The detail of datasets and queries
is below:
Table 1. Datasets

Name
Nasa
XMark
Treebank

Type
Small
Medium
Large

Size(MB)
24.5
113.8
84

Elements
476,646
1,666,315
2,437,666

Level
8
12
36

We tested the performance of all algorithms by running each group of queries 1000
times. For the purpose of simplicity, we ran test codes all in memory and didn’t refer
to I/O. The figure 2 depicts the comparison of algorithm performance. As shown in
figure 2, we find that our extended algorithms outperform previous algorithms
10%~300%. SJoin outperforms DFS when the query has many ancestor-descendant
edges. DFS outperforms SJoin when the query has many parent-child edges.

Accelerating XML Structural Matching Using Suffix Bitmaps

259

Table 2. Queries

QID
QN1
QN2
QN3
QN4
QN5
QN6
QX1
QX2
QX3
QX4
QX5
QX6
QT1
QT2
QT3
QT4
QT5
QT6

Results
2407
60663
23224
9001
813
13122
1629
3274
6409
6285
6000
18579
3
151
16
5
31
21

Query
reference//source[/journal]//date
tableHead[//tableLink/title]//name
/datasets//fields[//definition]//para
reference//journal[/title][/name]//author
dataset[/keywords]/reference[/related]/source/journal/name
tableHead//footnote
/site/people/person[/profile[age]/education]/phone
/site/people/person[//age]//education
people[//education]//age
people//address[//city]//province
europe/item[/name]/description
closed_auction[//date]//annotation//text
VP[/DT]//PRP_DOLLAR_
S/VP/PP[/NP/VBN]/IN
S[//MD]//ADJ
S[/JJ]/NP
NP[//RBR_OR_JJR]//PP
NP/PP[//NNS_OR_NN]//NN

Nasa Dataset

XMark DataSet

SF-DFS

5
4

SJoin

3

SF-SJoin

2
1

8

SF-DFS
6

SJoin
4

SF-SJoin

2
0

0

QN1 QN2 QN3 QN4 QN5 QN6

Nasa Filter Ratio

SF-SJoin

QN6

SF-DFS

QN5

DFS

DFS
MSeconds / Query

6

Treebank DataSet

50

10

DFS

7

MSeconds / Query

MSeconds / Query

8

40

SF-DFS

30

SJoin
20

SF-SJoin
10
0

QX1 QX2 QX3 QX4 QX5 QX6

QT1 QT2 QT3 QT4 QT5 QT6

Treebank Filter Ratio

XMark Filter Ratio
QX6

SF-SJoin

QT6

QX5

SF-DFS

QT5

SF-DFS

QN4

QX4

QT4

QN3

QX3

QT3

QN2

QX2

QT2

QN1

QX1
0

10

20

30

40

50

60

Rejection Ratio ( % )

70

SF-SJoin

QT1
0

10

20

30

40

50

60

70

80

Rejection Ratio ( % )

0

20

40

60

80

Rejection Ratio ( % )

Fig. 2. Query Time and Filter Ratio

However, SF-DFS outperforms DFS at all queries. SF-SJoin outperforms SJoin as
well. Also, figure 2 depicts the filter ratio about these three groups of queries. It
shows that the efficiency of speedup depends on the filter ratio. When the filter ratio
is higher, the efficiency of speedup is more desirable. We can find that the filtering
adds very low overhead to matching process when the filter ratio is zero, which is
shown in QX5.

260

F. Shao, G. Chen, and J. Dong

5 Related Work
There has been much work in the area of xml structural matching. Structural join [1]
and twig join [3] are efficient structural matching algorithms that have been
extensively studied. These algorithms determine structural relationship of any two
nodes by employing numbering schemes that have also been studied. DFS and BFS
[7] are classical traversal algorithms for XML structural matching, which are
extensively applied to xml summary graphs [5].
Also, there has been much previous work on speedup of xml structural matching.
XR-Tree [4] and XB-Tree [3] are two index strategies to accelerate structural join. [6]
proposed a look-ahead approach to skip useless intermediate results in holistic join.
Recently, the Subtree Label is presented by [2] in native xml storage system. The
Subtree Label is similar to our suffix bitmap, yet doesn’t refer to the compression.

6 Conclusions and Future Work
In this paper, we present a novel filtering technology for structural matching, which
we called suffix bitmap filtering. Based on the suffix bitmap filtering, we extend two
state-of-the-art structural matching algorithms: the traversal matching algorithm and
the structural join matching algorithm. For the traversal matching algorithm, we skip
most of unmatched sub-trees in terms of the suffix bitmap comparison. For the
structural join matching algorithm, we skip most of unmatched candidates as well.
The experiments show that our extended algorithms perform significantly better than
the previous algorithms, especially when the hit ratio of the matching is low.
In future, we will study the suffix bitmap of frequent tag names. Furthermore, the
self-tuning technology along with several filtering policies will be considered to speed
up the structural matching.

References
1. Al-Khalifa, S., Jagadish, H.V., Patel, J.M., Wu, Y., Koudas, N., Srivastava, D.: Structural
joins: A primitive for efficient XML query pattern matching. ICDE (2002)
2. Boulos, J., Karakashian, S.: A New Design for a Native XML Storage and Indexing
Manager. EDBT (2006)
3. Bruno, N., Koudas, N., Srivastava, D.: Holistic twig joins: Optimal XML pattern matching.
SIGMOD Conference (2002)
4. Jiang, H., Lu, H., Wang, W., Ooi, B.: XR-Tree: Indexing XML Data for Efficient Structural
Joins. ICDE (2003)
5. Kaushik, R., Shenoy, P., Bohannon, P., Gudes, E.: Exploiting Local Similarity for Indexing
Paths in Graph-Structured Data. ICDE (2002)
6. Lu, J., Chen, T., Ling, T.: Efficient Processing of XML Twig Patterns with Parent Child
Edges: A Look-ahead Approach. Proc of CIKM (2004)
7. Wang, W., Wang, H., Lu, H., Jiang, H., Lin, X., Li, J.: Efficient Processing of XML Path
Queries Using the Disk-based F&B Index. VLDB (2005)
8. XML Data Repository In http://www.cs.washington.edu/research/xmldatasets/

