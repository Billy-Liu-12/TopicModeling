Designing Floor-Layouts with the Assistance of
Curious Agents
1
´
Ewa Grabska1 , Katarzyna Grzesiak-Kope´c2, and Gra˙zyna Slusarczyk
1

2

Jagiellonian University, Institute of Computer Science, Nawojki 11,
30-072 Cracow, Poland
uigrabsk@cyf-kr.edu.pl, grazyna@ii.uj.edu.pl
Jagiellonian University, The Faculty of Physics, Astronomy and Applied Computer
Science, Department for Information Technology,
Reymonta 4, 30-059 Cracow, Poland
katarzyna.grzesiak-kopec@uj.edu.pl

Abstract. The paper deals with visual computational design in which
emergence is a key to creativity. The presented framework for conceptual
design uses shape grammars and curious agent assistants. The intelligent
agents perceive the changing environment and emergent phenomena that
occur in it. Interacting with each other and the designer they look for
the most original and plausible solutions to a given design task. The
approach is illustrated by the example of a designing ﬂoor-layouts.

1

Introduction

This paper presents a new framework for visual kind of creative conceptual
design with shape grammars and curious agent assistants. It takes advantage
of visual shape grammar computations, emergent phenomena which enhance
creativity and curiosity of intelligent agents searching for novel solutions. The
approach deals with various external conditions while the design process takes
place. The interaction with the environment can happen both through the autonomous designer’s decisions and through the approved curious agents prompts.
The framework is illustrated by the example of a designing ﬂoor-layouts.

2

Dynamic Creative Design and Shape Grammars

One of the most important phenomena which enhances creativeness is emergence. In design, these features which are not explicitly represented but emerge
from a design structure are called emergent (Fig. 1). The ability to recognise
properties which are not originally intended in design is an important aspect
of human visual perception and plays a key role in the interaction between the
designer and his/her drawing or sketch. In most computational systems emergence is limited to generation and observation of emergent features. Using shape
grammars as generative systems allows us not only to generate and recognise
emergent elements but fed them back into computation as well [4]. The formal
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 883–886, 2006.
c Springer-Verlag Berlin Heidelberg 2006

884

´
E. Grabska, K. Grzesiak-Kope´c, and G. Slusarczyk

Fig. 1. (A) Single object. (B) Conﬁguration of four copies of the given object which
implies an emergent cross.

model [2] for dynamic design using shape grammars has been veriﬁed by a dedicated application DesignAnalizer2D [3]. The classiﬁed emergent elements [2]
are detected on-line by the system and new design rules containing them (emergent rules) are deﬁned. We have programmed shape grammars with the use of
a control diagram which speciﬁes the order of applying grammar rules.

3

Curious Design Agents Architecture

In our approach agents are to be the designer’s assistants in creative design.
By an agent we understand a computer system situated in an environment and
capable of autonomous actions in this environment in order to satisfy its design
task [6]. Its inside structure consists of processes connected with perception, evaluation, planning, and action which aﬀects the environment. By creative designs
we understand here designs which are in a way new (unexpected, original) and
useful (valuable, valid) [1]. In order to perform the task, each curious agent has
to be intelligent : perceive its environment and respond to changes that occur in
it, exhibit goal-directed behaviour and interact with other agents [7].
A curious agent observes its environment, gathers perceptual inputs and
changes its internal state appropriately. On the one hand, the goal of our agent
is to determine the novelty of a situation which means to validate the originality of the current environmental state with respect to the history. On the
other hand, on the basis of the agent’s interest in the present situation it has to
identify unexpected consequences of actions. Thus, the agent’s interest depends
on the gained knowledge, while its curiosity can be understood as a motivation
to do the further research. To support curiosity, the minimal agent architecture
must include some form of memory. The mentioned requirements suggest using
two diﬀerent types of memory: a short-term memory to store recent experiences
and a long-term one to store agent’s generalised experiences from the past [5].
Both novelty and surprise of the situation can be computed by comparing the
current state of an agent with its previous experiences. Information about the
environment state and history, and the interest degree are taken into account in
a decision making process. New goals of an agent are speciﬁed and the chosen
goal is mapped into an action. In the proposed solution the short-term memory
is implemented as a store of variables. The long-term memory has a form of a
neural network called Self-Organising Map (SOM). It should be stressed that
diﬀerent implementations of a short-term and a long-term memory inﬂuence the
learning ability of the agent and can lead to diﬀerent curious behaviour.

Designing Floor-Layouts with the Assistance of Curious Agents

4

885

Curious Agent Assistant

We expect that the curious agent assistants extend our possibilities to obtain
interesting and valid design solutions. Two curious agent assistants are presented
to support the designer in searching for original ﬂoor-layout designs by promoting
the most creative solutions to a given design task.
Our environment consists of a set of design rules with a control diagram
specifying the order of their application and the artefact to be designed in a
given phase of generation. The environment is inspected by two curious agent
assistants: inquisitive (i-agent) and sage (s-agent). The i-agent is responsible
for introducing new emergent rules into a shape grammar and the s-agent is
in charge of a generation of possible designs. In order to improve the learning
process of the agents and to incorporate the designer knowledge and preference
more eﬃciently, a list of the best solutions, proposed by agents, is presented to
the designer and he/she chooses one of them. Thus, the agents future decisions
depend not only on their mutual interactions but on the interaction with the
designer as well.
Let us consider the example of designing a ﬂoor plan. The designer has to
determine two initial requirements: an overall shape of a ﬂoor plan (Fig. 2A)
and a number of rooms. Assume that the required number of rooms is equal to
5. Applying design rules shown in Fig. 2, in a sequence 1, 3, 2, 3 the designer
obtains an initial ﬂoor-layout with 5 rooms (Fig. 2B).

Fig. 2. (1-3) Regular grammar rules; (4,5) Emergent rules; (A) Given ﬂoor plan; (B)
Early ﬂoor-layout with 5 rooms generated; (C) The designed ﬂoor-layout

The i-agent looks for new interesting design rules based on emergent elements
which have come on the scene in the current step of generation. It localises emergent holes [2] (empty spaces), determines the design elements which constitute
them and generates a set of possible rules to replace them. Then, basing on its
experience and knowledge, it proposes the most appropriate design rules to the
s-agent (Fig. 2 rule numbers 4 and 5).

886

´
E. Grabska, K. Grzesiak-Kope´c, and G. Slusarczyk

The s-agent evaluates the rules proposed by the i-agent by applying them to
the current generation and verifying whether the obtained solution is still valid.
For example, it checks whether the generated ﬂoor-layout does not include overlapping areas or the number of rooms is diﬀerent from the required one. Knowing
the current generation step, the s-agent takes into account also rules which are
already in the grammar, and evaluates them in the same manner as emergent
ones. Having compared both emergent and regular solutions it recommends the
best one, which satisﬁes all conditions, to the designer as the next step in the
present generation. It also points out the shapes in the generation to which the
rule should be applied. Fig. 2C shows one of the possible ﬁnal solutions after
applying the following rules: 1, 3, 2, 3, 4, 5.
Now, let us consider alternative ﬂows of events. Since not all new rules proposed by the i-agent are acceptable to the s-agent, there may be more than one
iteration in the negotiations between two assistants. If all attempts at mediation
fail, either the best from the obtained solutions or none of them is chosen.

5

Conclusions

In this paper we presented a new approach to conceptual design. In computational design the emphasis on the dynamic design context is crucial to artiﬁcial
creativity. Visual computations are situated in a context indirectly through the
designer working with the application or more explicitly through curious agents.
The intelligent agents perceive the changing environment and emergent phenomena that occur in it. Interacting with each other and the designer they look for
the most original and plausible solutions to a given design task.

References
´
1. Grabska, E., Slusarczyk,
G. and Grze´s, P.: Dynamic design with the use of intelligent
agents. Proceedings of the 4th International Conference on Computer Recognition
Systems CORES’05. Springer (2005) 827–834
2. Grzesiak-Kope´c, K.: Emergent elements in periodic designs: An attempt at formalization. Design Computing and Cognition ’04. Kluwer Academic Publishers (2004)
3. Grzesiak-Kope´c, K.: Visual designing of graphical models with the use of emergent elements. PhD thesis (in polish). Faculty of Electrical Engineering, Automatics, Computer Science and Electronics. AGH University of Science and Technology
(2005)
4. Knight, T.: Interaction in visual design computing. Visual and Spatial Reasoning in
Design III. The invited paper (2004)
5. Saunders, R.: Curious design agents and artiﬁcial creativity. PhD thesis. Faculty of
Architecture. The University of Sydney (2002)
6. Wooldridge, M. J. and Jennings, N.R.: Intelligent agents: Theory and practice. The
Knowledge Engineering Review. Vol. 10(2) (1995)
7. Wooldridge, M. J.: Intelligent agents. Multiagent systems: a modern approach to
distributed artiﬁcial intelligence. MIT Press. Cambridge. MA (1999)

