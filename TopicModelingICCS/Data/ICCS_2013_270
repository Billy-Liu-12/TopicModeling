Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 1834 – 1843

2013 International Conference on Computational Science

Mining Software Usage with the Automatic Library Tracking
Database (ALTD)
Bilel Hadri*,Mark Fahey
National Institute for Computational Sciences (NICS), Bldg 5100, P.O. Box 2008, Oak Ridge, TN, 37831 USA

Abstract
Tracking software usage is important for HPC centers, computer vendors, code developers and funding agencies to provide
more efficient and targeted software support, and to forecast needs and guide HPC software effort towards the Exascale era.
However, accurately tracking software usage on HPC systems has been a challenging task. In this paper, we present a tool
called Automatic Library Tracking Database (ALTD) that has been developed and put in production on several Cray
systems. The ALTD infrastructure prototype automatically and transparently stores information about libraries linked into
an application at compilation time and also the executables launched in a batch job. We will illustrate the usage of libraries,
compilers and third party software applications on a system managed by the National Institute for Computational Sciences.
Keywords: ALTD, Tracking, Software, Kraken, HPC

1. Introduction and Motivations
Leading high performance computing centers(HPC) must identify, deploy, and support several programming
environments and many software packages to enable scientific discoveries for their users. For example, at the
National Institute for Computational Science (NICS), to support HPC activities across diverse scientific
disciplines, the staff has installed close to 150 software packages on Kraken, a Cray XT5 system with 112,896
cores [1]. The support staff maintains multiple versions of these packages,, each version potentially built with
multiple compilers. The total combination of builds grows rapidly over time.
The maintenance of these packages can be a daunting task and without an effective prioritizing approach,
the productivity of the users can be affected by the application support staff decisions to upgrade, deprecate, or
remove libraries. Without an in-depth knowledge of the actual usage of libraries at compilation and execution,
application support staff are often required to make decisions about upgrading packages or removing older
versions based on their own preferences or instincts. Since these decisions are not strictly accurate and reliable,
the staff must be conservative, therefore the list of libraries with different versions and builds can increase
dramatically. Given these facts, it behooves the centers to know which and how many users utilize these
libraries and applications.
* Corresponding author. Tel.: +1-865-241-1527 fax: +1-865-576-4368.
E-mail address: bhadri@utk.edu.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.352

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

Providing higher quality service to its users is one of the primary missions of centers maintaining leadership
computing systems. Consequently, these centers have a compelling need to understand software usage in order
to better support their customers. The HPC centers need to know what compilers are used most and least
(further broken down by language) and they want to know what libraries (mathematical, communications, and
I/O) are used most and least to provide the best support for their users with limited staff time. By tracking
software use, other important abilities are provided like being able to identify customers using less than optimal
libraries, and the ability to contact every user that used a library or compiler that had an issue found after the
fact. Moreover, with the costs associated in sustaining computing systems, it is important to identify rarelyused software to save on support costs.
National agencies, companies and research teams occasionally request reports on library and application
usage on HPC systems, with particular interest placed on software that was funded or developed by one of their
initiatives. Tracking software usage is necessary to forecast needs and guide HPC software effort towards
Exascale era. However, accurately tracking software usage on HPC systems has been left unsolved. In 2011,
quantitative metrics for determining
[2].
The Automatic Library Tracking Database (ALTD) has been developed to address the above needs and aims
to better understand library usage on HPC systems. The ALTD automatically and transparently stores
information about libraries linked into an application at compilation time and also stores information about
executions of such applications in batch jobs. The solution is based on intercepting the linker to get information
on libraries utilized and intercepting the MPI job launcher to track parallel jobs executed. Wrapping the linker
and the job launcher through scripts is a simple and efficient way to obtain the information automatically and
transparently with no overhead. In addition, ALTD stores information about compilation and execution into an
SQL database that can be mined to provide reports. Tracking library usage is part of a solution for improving
the state of HPC software development and support as the computational science community continues moving
into the era of petascale computing and beyond
Here we will present various reports on the usage on Kraken since February 2010, the date of production of
the ALTD tool. Section 2 provides an overview on ALTD tool by describing its design. Section 3 reports the
different approaches from the related work. Section 4 presents the results from data mining efforts on Kraken.
2. Overview on ALTD
In this section we briefly describe the implementation of the ALTD - more technical details are specified in
[3]. The main objective for tracking the libraries was a lightweight design with no overhead at compilation and
runtime. Our solution is built on intercepting both the GNU linker (ld) [4] to get the linkage information and
the Cray job launcher (aprun)[5] to get the execution information. Wrapping the linker and the job launcher
through scripts is a simple and efficient way to obtain the information automatically and transparently. ALTD
is able to track both static and shared libraries; however, libraries that are loaded and unloaded at runtime such
as dynamically loaded libraries (with dlopen calls) are not tracked since the tool only retrieves information
during the linking stage.
Our custom wrapper for the linker (ld) first generates a record in the link_tags table, intercepts the user link
line, and parses the command line to capture the link line which is then stored in the linkline table in the ALTD
database (MySQL). Since more libraries are typically included on a link line than are truly used, we employ a
two-step process to identify the libraries actually linked into the executable. At the same time, an ELF section
specific executable. We intercept the
often an executable is run, and thus in turn how many times the libraries are used, by linking the jobs table data
back to the linkline table. The script extracts some job-specific environment variables from the batch system,

1835

1836

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

such as job id. Then, the command objdump is run on the executable to display the information that has been
ormation
is inserted in the jobs table of the database, and control is passed back to the aprun wrapper that eventually calls
the real aprun. Fig. 1 shows the correlation between the ALTD tables.

Fig. 1. ALTD Tables (a) linkline table; (b) tag_id table; (c) job_id table

Many different versions of a given library (or compiler, or application) are installed on the system at the
same time. Hence it is important that not just the library name but also the version number is recorded. NICS,
like many others HPC centers make their software available via modules, and the modulefiles set paths to
libraries through setting environment variables. The paths contain version numbers according to known
conventions, and thus the linkline recorded by ALTD contains version number information inherently. In other
words, when a library is linked into an application, the complete library path is intercepted, and this path
contains both the name of the library and its version number. This is shown in the Fig. 1 on both the linkline
and job table with the path of the library and executable.
The ALTD framework can be put into production by using a modulefile or renaming the actual ld and job
launcher commands and then placing the ALTD wrappers in /usr/bin. As of today, ALTD has been in
production, using the modulefile loading procedure on several Cray systems, in centers like NICS, Oak Ridge
Leadership Computing Facility (OLCF) - both located at Oak Ridge National Laboratory (ORNL)- for Kraken,
Jaguar and Titan systems, the National Climate Research Center (NCRC) for the Gaea project, the National
Center for Supercomputing Applications (NCSA) for the Blue Waters project, the National Energy Research
Scientific Computing Center (NERSC) and the Swiss National Supercomputing Centre (CSCS).
3. Related Work
There are some related approaches that can be considered, but all have major shortcomings. Indeed, in [6], it
has been reported that the software usage is rarely tracked in a way that provides concrete results. A strategy to

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

track library usage during link time is to add logging functionality to existing libraries. Some libraries provide
This would be an
easy solution; nevertheless each version of the library would have to be modified similarly over time and this
[8]). Another option is to use
profiling and tracing tools like CrayPAT [5] and TAU [9] that perform analysis for all the function calls in an
application. These tools could provide the desired information but they are heavyweight and introduce
compile-time and runtime overheads that are not acceptable because every user will be affected all the time.
One other tracking mechanism that could be implemented is to log programming environment loads and
access to libraries and executables. Assuming that a library is used because a module is loaded is not
necessarily true, and there is no way to identify the libraries linked into an executable. Furthermore, it is well
known that on some machines, many modules are loaded by default that the user may not ever use, which
would heavily skew any metrics of library usage. This approach does not provide real usage, since it counts
only the number of times a module of a library has been loaded and not the number of times a library has been
compiled or used. TOPAS [11] was developed to automatically monitor the usage and performance on the Cray
T3E by modifying the compiler wrapper script, and collect data on the usage of the programming language and
the message passing library.
In [6], it is proposed to parse user output to retrieve summaries on software usage with commands such as
lastcomm [12], which prints out previously executed commands. This method can be referred to as process
accounting, which records accounting information for the system resources used. However, all the codes linked
within a Makefile or executed inside a script will not be detected and turning on process accounting will require
significant disk space due to the large amount of logs generated. Open source distributed resources manager
tools like TORQUE [13] can be used to monitor HPC systems, however they can report only the applications
called in a batch environment and they cannot track library usage or even when executables are nested in
scripts. Furlani et all have developed a tool [14]; to extract compilers and libraries usage; using signature-based
detection, a common strategy employed by anti-virus software to search for known patterns of data within the
program binaries. The drawback of this approach is to identify the number of instance of the same executable
and in case the program binaries have been deleted, the records will be missing. The Lariat prototype,
developed at Texas Advanced Computing Center takes a different approach than ALTD. It collects
information on the executable and dynamically linked libraries at runtime via the use of system utilities, a
collection of scripts, and a software environment management system such as lmod or modules. This approach
requires no modifications to the linker or the executable and tracks all executables (as ALTD and the resources
manager tools). Furthermore, it may be easily modified to collect new data without requiring users to
recompile. However, the Lariat approach does not capture data from static libraries.
4. Data mining on Kraken
ALTD stores information about every executable linked and every job executed as described in Section 2.
Therefore, data mining is needed to extract valuable information on the usage of libraries and executables. The
usage by staff during installation of third-party software or staff debugging of user codes has not been included
in the results shown here thereby providing data that reflects the user community. ALTD has been in
production on Kraken since February 2010, and based on the data generated from then through December 31st
2012, there have been 1,830 distinct users, 1,086,577 successful compilations by 1,561 users, and 4,606,134
application executions by 1,629 users. In total, the tool has tracked only 1,410 users that have both compiled
and executed codes. From this data, we note that the number of individual users compiling (linking) a code is
actually smaller than the total number of users running jobs; Fig. 2 shows the number of users compiling and

1837

1838

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

executing over the 3 years. About 15% of active users have never compiled a code and they are likely running
applications installed either by the staff or by their colleagues. In addition, from these data, we notice that
around 11% of users are not tracked during the execution of the codes, which partly can be explained by usage
of debuggers, which are not tracked. There are known interaction problems between some tools like Totalview
and ALTD [3] since these debugger tools are designed to work directly with the job launcher, not a wrapper
script like ALTD; and as a result the ALTD module is unloaded when Totalview is used. From Fig. 2, we
noticed that the number of users compiling and executing increases generally in March/April and June/July,
which correspond to month of end/start of allocations granted quarterly by XSEDE Resource Allocations
Committee. In Fig. 3, the monthly temporal distributions of the number of execution, number of links, and the
number of jobs run are displayed. We notice that the amount of jobs submitted is comparable to the number of
instances of linked code, while the amount of runs of the executable is at least twice to seven times higher. The
latter indicates that some users are launching their executables multiple times inside the same job script.

Fig. 2: Number of users

Fig. 4. Temporal distribution of usage during the week

Fig. 3. Temporal distribution of usage by month

Fig. 5. Temporal distribution of successful links

In Fig. 4, the data totaled per day over the week is reported, the distribution is quasi similar during the days
of the week for the execution with the highest day as Tuesday representing 17% of the total execution. The
smallest number of executions during the business days is Thursday, corresponding to the day of preventive
maintenance on Kraken (typically four to eight hours window), during which users cannot submit jobs. In
regards to the linking, the users mainly compiled their codes at the beginning of the week, Monday with 20%
and it decreases slowly to 7% during the weekends. In Fig. 5, the temporal distribution of successful links is
shown. We notice that during the first quarter of 2010, 30% of the links failed, and over the timeframe the rate
decreased to 10% by the last quarter of 2012, even though a (likely) temporary increase has been observed in
October/November 2012 due to new users from industrial partners who were not familiar with the Kraken

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

system. The improved rate of successful links can be explained by more exposure to the machine over time and
many outreach activities including different tutorials and workshops [1].
4.1. Compiler usage
Kraken supports several different compiler suites including GNU, PGI, Intel and Cray. Determining the
usage of the compiler by searching for compiler paths (like /opt/pgi, /opt/cray/cce, and so on) can produce false
compilation. Therefore, the mining of compiler usage shown here has been restricted to MPI codes, where we
80% of the links tracked are multi-threaded, the MPI codes represent only 24% of the total successful links, yet
60% of the codes executed are parallel having been compiled with the MPI library. The seemingly low
percentage of links with the MPI library has also been observed on the other leadership computing systems
where ALTD has been installed. Data mined from the job resource manager also show that jobs requesting
more than one node represent 60% of the total submitted jobs. Figs 6 and 7 show the distribution of compiler
usage during linking of parallel codes and then again restricted to usage by distinct users, respectively. On
Kraken, PGI is the default compiler, and the results show that the majority of codes are built with it as
expected. The next most popular compilers are GNU and Intel, while the use of Cray is much lower. It should
be noted, however, that the Cray compiler has been available to Kraken users only from the middle of the 2011,
and, moreover, it was only properly tracked after a fix was implemented starting in the last quarter of 2011. In
early 2010, PGI was used by 85% of the users and it drops to 53% by the end of 2012. This is mainly due by
the increase of new users compiling with the Intel compiler, now corresponding roughly to 20% of all users.

Fig. 6: Distribution of compiler usage during linking

Fig. 7. Distribution of the users using a given compiler

In the following, we restrict the mining results to the year 2012. A compiler uses runtime libraries to
implement functions built into a programming language during the execution. PGI provides support for C,
Fortran and C++ with libpgc, lipgf90, libC respectively. GNU uses libgfortran and libstdc++ for the Fortran
and C++ runtime libraries. Intel C and C++ as well the Cray compiler use the GNU C library and the standard
C++ Library, while libifcore and libif are Intel and Cray specific libraries for the Fortran run time. For
completeness, libcilkrts is the library runtime for Intel Cilk Plus Parallel language extensions. Tables 1 and 2
show the compiler and programming language usage by the percentage of the number of instances during
linking and execution respectively for all codes. Note that N/A (not applicable) is shown since Intel and Cray
both use the GNU C library and thus they cannot be separated. The majority of codes linked on Kraken are C
codes(55% of the total usage), followed by Fortran with 35.9%. The usage with these two programming
language is principally with PGI, the default programming environment on Kraken; while C++ (9.1% of the

1839

1840

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

total usage) is mainly used with GNU and Intel compiler. When the codes are executed, we noticed that about
73% of the codes executed were written in Fortran and this high usage is due to extensive usage of ARPS[15],
a climate modeling package and AMBER, a molecular dynamic code [16] both written in Fortran. Then C++
codes represent 20% of the executions, like NAMD [17] (the most used package in CPU hours on Kraken),
while only 7% of the codes executed are written only in C.
Table 1. Compiler and programming language usage at linking
Language
C
Fortran
C++

PGI
15.0%
20.8%
0.1%

GNU
40.0%
9.2%
5.6%

Intel
N/A
5.4%
3.4%

Cray
N/A
0.5%
<0.1%

Table 2. Compiler and programming language usage at execution
Language
C
Fortran
C++

PGI
2.2%
61.9%
0.3%

GNU
4.5%
4.7%
20.2%

Intel
N/A
5.8%
<0.1%

Cray
N/A
0.3%
<0.1%

4.1. Library usage during linking
In 2012, 942 users linked successfully 448,772 times. Besides the MPI library and the compiler runtime
libraries, the Top 10 most used libraries fall into three major categories: numerical libraries, I/O libraries and
performance analysis tools. In order to facilitate an improved understanding of library usage, we provide the
rankings of libraries and also with the version number of the library used (those installed by the vendor and the
center staff). This information can assist the staff, and vendor, in making decisions on deprecating and/or
changing default software versions. We also report the number of unique users linking a given library since the
total number of instances can in some cases be exceptionally high due to autotuning experiments, which might
involve a user performing many hundreds of compilations, generating executables that are never used for
performing production science.
Table 3. Numerical Library usage at linking

Rank
1
2
3
4
5
6
7
8
9
10

Library
libsci
fftw/
acml
petsc/
tpsl/
/mkl/
metis/
gsl/
hypre/
sprng/

Instance
54672
27633
8264
3772
3164
2341
1959
1692
1643
1532

Percentage
12.18%
6.16%
1.84%
0.84%
0.71%
0.52%
0.44%
0.38%
0.37%
0.34%

Table 4. Numerical Library usage of libraries installed by the center

Users
339
277
119
27
34
48
33
49
24
13

Rank
1
2
3
4
5
6
7
8
9
10

Library/version
libsci/11.0.04
fftw/3.3.0.0
libsci/10.5.02
acml/4.4.0
fftw/3.2.2.1
tpsl/1.2.00
gsl/1.14
sprng/2.0b
fftw/2.1.5.3
arpack/2008.03.11

Instance
41403
14561
12469
6474
3417
2204
1627
1495
1222
1087

Percentage
9.23%
3.24%
2.78%
1.44%
0.76%
0.49%
0.36%
0.33%
0.27%
0.24%

Users
276
90
165
77
80
28
37
12
37
2

Numerical libraries are the most used libraries on Kraken, representing 25% of the total linklines and it is
not surprising to observe that the Cray Scientific library (LibSci) [5] is the most linked library, as shown in
Table 3. LibSci is loaded by default and was linked in approximately 12% of all codes compiled on the system
and used by 36% of the users. FFTW [18] is the second most popular numerical library and it is interesting to
note that the 2.1.5 version still accounts for about 7% of the total usage of FFTW. ACML [19] is in the third
most used library and the high usage of ACML might be explained by its increased performance for certain
LAPACK routines, such as QR factorization and eigenvalues as shown in [20]. A variety of packages including
PETSc [7], TSPL[5], MKL[21] are next highest ranked. We note that the TPSL (Third Party Scientific
Libraries) module, which contains a collection of third-party mathematical libraries for solving problems in

1841

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

dense and sparse linear algebra. TPSL includes the Hypre, SuperLU, SuperLU_dist, MUMPs, and ParMetis
libraries. When analyzing the version of the libraries from Table 4, we notice that ARPACK, a collection of
Fortran77 subroutines designed to solve large-scale eigenvalue problems installed by the staff ranked among
the Top 10, but it is only used by 2 users. In addition, this analysis also facilitates the detection of software
installed by the users in their home directories. Indeed PETSc is not ranked among the Top10 libraries
installed by the center, since several versions have been installed by the vendor and by several users in their
home directory. This analysis had led to our decision to support PETSc because Cray has stopped recently
supporting new release of PETSc on the relatively old operating system on Kraken.
Table 5. I/O Library usage
Rank
1
2
3
4
5

Library
hdf5/
netcdf/
hdf5-parallel/
iobuf/
adios/

Table 6. I/O Library version usage installed by the center
Instance
24427
7669
5675
3095
2817

Percentage
5.44%
1.70%
1.26%
0.69%
0.62%

Users
163
92
57
18
44

Rank
1
2
3
4
5

Library/version
hdf5/1.8.6
hdf5/1.8.7
hdf5/1.8.5.0
hdf5-parallel/1.8.6
szip/2.1

Instance
9401
8793
3049
2872
2793

Percentage
2.09%
1.96%
0.68%
0.64%
0.62%

Users
97
63
60
32
44

I/O libraries are the second most popular class of libraries used, the most prevalent packages being HDF5
[22], NetCDF [23] and IOBUF [24], as shown in Table 5. HDF5 is by far the most used I/O package and usage
divided among several versions. The Adaptable I/O System (ADIOS) [25] library, developed at OLCF is
ranked in the top 5 only in Table 5, and the majority of use is of versions built by the users themselves, which
shows adoption by the user community.
Table 7.Performance tool usage
Rank
1
2
3

Library
papi/
perftools/
tau/

Instance
9465
4206
631

Table 8.Performance tool usage installed by the center
Percentage
2.12%
0.94%
0.14%

Users
57
47
13

Rank
1
2
3

Library/version
papi/4.1.4
craypat/5.2.0
craypat/5.2.3

Instance
9263
1829
1786

Percentage
2.06%
0.41%
0.40%

Users
53
20
32

The most commonly used performance tool on Kraken is PAPI [26], followed by CrayPAT [5] and TAU
[9], as shown in Table 7 and Table 8. As reported in [2], CrayPAT was in fact found to be the most used on
Kraken in 2010, when ALTD was in its early production phase. The number of users making use of
performance tools to analyze their code is relatively small compared to the other categories. At this stage of
profiling and analysis may no longer be needed by most users.
4.2. Application usage during execution
In 2012, 1,901,707 executables have been launched by 992 users. Table 9 lists the Top 10 most executed
codes and they account for 67% of the executions instances. ARPS[15], a regional forecast system developed
by the Center for Analysis and Prediction of Storms (CAPS), is the most executed code with 26.9% of the total
execution. Table 9 shows that the most used codes are dominated by classical and ab initio molecular dynamics
packages (NAMD, Amber, LAMMPS, VASP), along with QCD code like SU3, HMC and NPLQCD [27].
Table 10 shows the Top 10 applications installed by the staff, and they represent only about 13% of all the
codes executed, with NAMD being the most popular package. Since the total number of users and the number
of instances are lower than when compared with Table 9, this shows that most of the applications executed are
located in users home directories, for codes like VASP, LAMMPS and even NAMD( 108 users are executing

1842

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

it, however, only a quarter of them are using the versions installed by the staff) . There could be a number of
reasons for this: a user might require a non-standard version (they are contributing their own plugins or code
modifications, for example), they might prefer to use a version built by them or it may simply be that they are
unaware that a centrally installed version exists or they use their purchased licenses which is the case for
VASP, even though, the center support it for those who own a license.
Table 9. Application usage at execution.
Rank
1
2
3
4
5
6
7
8
9
10

Application
arps
namd
amber
vasp
lammps
su3
cactus
nplqcd
cesm
hmc

Instance
511,236
338,000
262,556
87,628
22,687
18,441
14,508
13,265
9,314
5,808

Table 10. Application installed by the staff.
Percentage
26.88%
17.77%
13.81%
4.61%
1.19%
0.97%
0.76%
0.70%
0.49%
0.31%

Users
27
108
35
59
39
10
21
2
9
6

Rank
1
2
3
4
5
6
7
8
9
10

Application/version
namd/2.8
namd/2.7
lammps/24jan10
amber/11
namd/2.7b1
namd/2.9b3
cpmd/3.13.2
gromacs/4.5.3
q-espresso/4.3.1
amber/10

Instance
188,718
55,516
6,782
2,036
1,830
1,290
1,103
843
493
364

Percentage
9.92%
2.92%
0.36%
0.11%
0.10%
0.07%
0.06%
0.04%
0.03%
0.02%

Users
21
9
2
8
2
6
4
7
3
2

The results presented previously corresponded to the number of instances of execution of a given
application. A better metric might perhaps be the number of CPU hours consumed by an application, a metric
which is not available directly from ALTD, but which can be derived by retrieving the job_id associated with
an executable (recorded in ALTD) and linking this to other databases such as batch system accounting [28].

Fig. 8: Top 10 most CPU consuming codes on Kraken in 2012
Fig 8 shows the Top 10 most CPU-consuming applications on Kraken (corresponding to 34% of the total
cycles) and each application is plotted using the CPU hours consumed and the average cores per run, while the
size of the disk corresponds to the total number of executions. The figure reveals that the applications that
consumed the most CPU hours were not all ranked among the Top 10 most used applications. Indeed, this is
the case for code that were not executed intensively like APRS[15] or NAMD[17], however, these application
like the cosmological code p-gadget [29], used for the simulation of black hole formation, and ROTH [30], a
geophysics application simulating rotating turbulence (executed only 100 times) and launched for several
hours and requesting more than 15,000 cores in average.

1843

Bilel Hadri and Mark Fahey / Procedia Computer Science 18 (2013) 1834 – 1843

5. Conclusions
The Automatic Library Tracking Database (ALTD), transparently records information about libraries used
at link time and the usage of executables at job launch time. The solution is based on intercepting the linker to
get information on libraries utilized and intercepting the MPI job launcher to track parallel jobs executed. The
data mined from Kraken shows that around 24% of the codes are linked with the MPI library and 60% of the
executed codes are parallel. About 55% of the codes linked are written in C, however, it has been observed that
73% of the executions are Fortran programs. The numerical libraries, followed by I/O libraries and
performance and profiling tools are the most linked libraries categories. The applications realm is dominated by
molecular dynamics codes, such as NAMD, climate modeling and QCD codes. The results of the data mining
have shown that a significant number of users are using their own executables even where there is a centrally
installed application available.
ALTD has been primarily installed on Cray systems and in the near future, we envision providing solutions
for other architectures by adjusting the job launcher wrapper on the given platforms.
References
[1] http://nics.tennessee.edu/computing-resources/kraken
[2] NSF, "Advisory Committee for CyberInfrastructure ," http://www.nsf.gov/od/oci/taskforces/TaskForceReport_Software.pdf, 2010
[3] M. Fahey, N. Jones, B. Hadri, The Automatic Library Tracking Database, Conference: Cray User Group 2010, Edinburgh, UK
[4] J. Levine, "Linkers and Loader," Morgan Kaufmann Publishers Inc, San Francisco, CA, USA, 1999.
[5] Cray Documentations http://docs.cray.com /.
[6] D. Skinner and et al., Report on HPC Best Practices: Software Lifecycles, DOE Workshop on HPC Best Practices, SF, 2009
[7] S. Balay et al., "PETSc Users Manual," Argonne National Laboratory, 2008.
[8] E Anderson et al., LAPACK Users' Guide (Third ed.).: Society for Industrial and Applied Mathematics, 1999.
[9] S. Malony, The TAU Parallel Performance System. Inter.l Journal of HPC Applications, vol. 2, no. 20, pp. 287-331, 2006.
[10] J. Furlani, "Modules: Providing a Flexible User Environment," Proceedings of the Fifth Large Installation Systems Administration
Conference (LISA V), pp. 141-152, San Diego, CA, September 30 - October 3, 1999.
[11] B. Mohr, "TOPAS - Automatic Performance Statistics Collection on the CRAY T3E," 5th European SGI/Cray MPP Workshop, 1999.
[12] A. Tam, "Enabling Process Accounting on Linux HOWTO," 2001.
[13] G. Staples, "TORQUE resource manage," SC06 PRoceedings of the 2006 ACM/IEEE conference (p. 8). Tampa, Florida: ACM, 2006.
[14] C. Lu, M. D. Jones, and T. R. Furlani.. Automatically mining program build information via signature matching. In Proceedings of the
2011 TeraGrid Conference: (TG '11). ACM, New York, NY, USA, , Article 23 , 2 pages, 2011
[15] Xue, M., K. K. Droegemeier, and V. Wong, 2000: The Advanced Regional Prediction System (ARPS) - A multiscale nonhydrostatic
atmospheric simulation and prediction tool. Part I: Model dynamics and verification. Meteor. Atmos. Physics., 75, 161-193.
[16]Case D.A. et al., The Amber biomolecular simulation programs. J. Computat. Chem. 26, 1668-1688, 2005
[17] Phillips J.C. et al., Scalable molecular dynamics with NAMD, Journal of Computational Chemistry26,16,p1781-1802, 2005
[18] Frigo Matteo and Johnson Steven G., "The Design and Implementation of FFTW3," Proceedings of the IEEE 93 (2), 216 231 (2005).
[19] AMD Core Math Library, http://www.amd.com/acml
[20] B. Hadri, H. You , and S. Moore, Achieve Better Performance with PEAK on XSEDE Resources, XSEDE 12, July 201
[21] MKL, Intel Math Kernel Library: http://software.intel.com/en-us/intel-mkl
[22] HDF5: http://www.hdfgroup.org/HDF5/
[23] Rew, R. K. and G. P. Davis, NetCDF: An Interface for Scientific Data Access, IEEE Computer Graphics and Applications, Vol. 10,
No. 4, pp. 76-82, July 1990.
[24] http://www.nics.tennessee.edu/computing-resources/kraken/software?software=iobuf
[25] ADIOS: http://www.olcf.ornl.gov/center-projects/adios/
[26] Papi. Retrieved from http://icl.cs.utk.edu/papi/
[27]M. A. Clark, Balint Joo, A. D. Kennedy, P. J. Silva , Better HMC integrators for dynamical simulations, PoS Lattice2010:323,2010
[28] "http://www.adaptivecomputing.com/resources/docs/gold/pdf/GoldUserGuide.pdf".
[29] C. DeGraf, T. Di Matteo et al, Early Black Holes in Cosmological Simulations: Luminosity Functions and Clustering
Behaviour,Volker Springel, Jul 2011
[30] Pouquet et al, Energy transfer in Hall-MHD turbulence,cascades, backscatter and dynamo action

.

