Bounding Demand Paging Costs in Fixed Priority
Real-Time Systems
Young-Ho Lee1, Hoyoung Hwang2, Kanghee Kim3, and Sung-Soo Lim1
1

School of Computer Engineering, Kookmin University,
Jungrung 3-dong, Seongbuk-gu,
Seoul, Korea 136-702
{buriburi,sslim}@kookmin.ac.kr
2
Department of Multimdia Engineering, Hansung University,
Samsun-Dong 3Ga 389, Sungbook-Gu,
Seoul, Korea 136-792
hyhwang@hansung.ac.kr
3
Mobile Communication Division,
Telecommunication Network Business,
Samsung Electronics Co., LTD.
Kang.hee.kim@samsung.com

Abstract. In real-time systems, demand paging has not been used since worst
case performance analysis technique for demand paging is not available. In this
paper, we propose a technique to obtain the worst case bound on the demand
paging costs and devise a worst case response time analysis framework considering the demand paging costs. We divide the technique into two different
methods, DP-Pessimistic and DP-Accurate, depending on the accuracy and the
complexity of analysis. DP-Accurate considers the page reuses among task instances and thus gives more accurate analysis results. We evaluate the accuracy
of the proposed techniques comparing the analysis results from DP-Accurate
and DP-Pessimistic.
Keywords: WCET analysis, WCRT analysis, worst case response time, demand paging, flash memory.

1 Introduction
Demand paging has long been the key feature of virtual memory systems as fullfeatured operating systems are increasingly used in various computing devices. Until
recently, the demand paging technique has been mainly used in desktop or server
systems rather than real-time embedded systems. This is due to the fact that the applications in real-time embedded systems have not been such heavy-weighted ones that
the demand paging do not have to be adapted in the systems. Therefore, rather than
using demand paging, the whole program image is copied into DRAM before execution (we call it shadowing). The shadowing has not been considered as preferable
because of its DRAM consumption.
With the advent of multi-functional and high performance real-time embedded
systems, there is no choice but to use demand paging in the operating systems for
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 897–904, 2007.
© Springer-Verlag Berlin Heidelberg 2007

898

Y.-H. Lee et al.

real-time embedded systems. One major factor that makes adapting the demand paging in real-time embedded systems difficult is the unpredictable performance of demand paging. The unpredictability stems from the history-sensitive feature of demand paging that the page fault delay would be highly dependent upon the past memory access patterns. Though such difficulty exists, we would need any framework to
analyze the demand paging performance if the demand paging is to be used in realtime system design.
In this paper, we devise a worst case response time (WCRT) analysis technique
considering the demand paging cost in fixed priority scheduling real-time systems.
The basic idea is that the conventional WCRT analysis framework is augmented with
the calculation of additional cost caused by demand paging. One simple solution for
the analysis would be deriving the worst case page fault cost for a whole task and add
the cost to the original response time of the task. Such naïve solution would yield too
loose bound on the WCRT considering demand paging cost. Therefore, we enhance
the accuracy of the analysis by considering the possibility of page reuses among the
task instances. We propose graph theoretical formulation for the analysis considering
page reuses among the task instances. We show that the proposed enhanced technique
produces more accurate bounds on the worst case demand paging cost than the simple
and naïve technique up to 57% by simulation. The rest of this paper is organized as
follows. Section 2 describes our WCRT analysis method. Section 3 shows the simulation results for our WCRT analysis method with a simple simulator and virtual task
sets. Finally, we conclude in section 4.

2 Bounding Demand Paging Cost
In this section, we provide how we extend the original WCRT analysis to consider the
additional costs of demand paging. Our technique is based on the conventional
WCRT analysis frameworks[1][2][3][4][5][6] and an extension of the original framework to consider cache-related preemption costs[5]. In [5], the WCRT of task is
defined as follows:
.

(1)

where
is the total preemption costs of task . In this paper, we only focus
on how the page fault handling cost could be considered in WCRT analysis leaving
the consideration of remaining factors affecting the accuracy of the analysis for future
work.
For simplicity of our analysis, we make the following assumptions: First, we assume the page fault handling cost for each page is identical in all cases. Second, we
assume that our target system has infinitive memory and thus our target system does
not suffer from memory limitation causing page replacement. The second assumption
is to exclude the worst case page replacement analysis issue from the scope of the
paper while the replacement policy should ultimately be considered for completeness.
The key issue of the WCRT analysis for demand paging is how to obtain the demand paging cost for each task and how to take into account it in computing the worst
case response time of a task. In order to obtain the demand paging cost for each task,

Bounding Demand Paging Costs in Fixed Priority Real-Time Systems

899

we introduce two analysis steps: demand paging cost analysis and page reuses aspect
analysis. In the demand paging cost analysis step, the demand paging costs for every
execution path is calculated. For an execution path-wise analysis, we use control-flow
based approach. After the analysis, we obtain the demand paging cost and pages to be
loaded for every execution path of the task. In the page reuses aspect analysis step, the
page reuses among task instances are analyzed and we obtain the WCETs of each task
instance considering the demand paging cost and the page reuses. We use graphtheoretical formulation to derive the worst case bound on the page fault cost of a series of task instances.
2.1 Demand Paging Cost Analysis
The objective of the demand paging cost analysis is to obtain the demand paging cost
for every execution path. Because the demand paging cost is highly dependent on the
execution paths of the task, we use control flow-based approach to obtain the demand
paging cost depending on the execution paths. The first step of building the control
flow graph for our analysis is to make the correspondence between each basic block
and each memory page. All the basic block nodes in the control flow graph are
mapped to the corresponding memory pages. Since the sizes of basic blocks are various, the page boundaries do not always match basic block boundaries. Figure 1 shows
an example of basic block and page mapping for a sample control flow graph. The
control flow graph has four different execution paths and each basic block is mapped
to one of the six different pages.
page 1

1

2

page 2

3

page 3
4

5

6

8

9

10

7
page 4

page 5

11

page 6

Page mapping

Control flow graph

basic block

1

2

3

4

5

6

7

8

9

10

11

page

1

1

2

4

3

3

2

4

6

5

5

Fig. 1. Basic block and page mapping for a control flow graph

We use the following notations for formulation of our analysis:
denotes the
WCET of j-th execution path of task . Note that
is the pure WCET which does
not consider the demand paging cost.
denotes the set of pages for i-th execution
denotes the number of pages in
. denotes the worst
path of task , and
case page fault handling cost. Due to the assumption in the previous section, is the
same in all cases. The demand paging cost for each execution path in task is:

900

Y.-H. Lee et al.

.

(2)

The WCET including demand paging cost for each execution path could be calculated as follows:

.

(3)

2.2 Page Reuses Aspect Analysis
The demand paging cost could be reduced among task instances since a task instance
reuse the pages already loaded by preceding task instances. The objective of the page
reuses aspect analysis is to obtain a safe bound on the demand paging cost considering the page reuses among task instances. For the analysis, we use graph-theoretical
formulation that the execution time of each task instance (i.e., execution path) considering the page reload cost is represented. By traversing the graph from the start node
until the last task instance to obtain the maximum distance, we obtain the WCRT of
each task instance and the worst case scenario of task schedule. Figure 2(a) shows the
overall page reuses aspect analysis in brief.
For the page reuses aspect analysis, we consider a directed graph
: N is
the set of nodes that represent instances of each task and E is the set of edges among
the nodes whose weights are the execution times between two task instances. The
number of elements of N is the number of execution paths multiplied by the number
of instances of each task. The weight of each edge,
, in E represents the execution time of execution path q of r’th task instance of when the immediately preceding
as the WCET considering the demand
path is p. For our formulation, we define
paging cost of the execution path q when the immediately preceding execution path
was p. In addition, we define
as the page reloads cost of the execution path q for
can
r’th task instance when the immediately preceding execution path was p.
.
be defined as
The page reuses aspect analysis is to determine the maximum sum of the WCETs
considering the demand paging cost and page reuses for each task instances. The
following formulation shows a problem definition.
Maximize

.

(4)

where
. Since the pure WCET of the task could not vary,
is always the
ranges from 0 to the maximum page fault delay assuming
same in all cases. But
that all the pages of execution path q cause faults. This is because the page reload cost
varies according to the pages loaded in the previous task instances.

Bounding Demand Paging Costs in Fixed Priority Real-Time Systems

901

(a)

(b)
Fig. 2. The page reuses aspect analysis overview

The key point in the formulation is that in order to obtain the safe bound on the
WCRT considering page fault cost, we choose the maximum weight for each pair of
task instances. For describing the problem more formally, we introduce the following
new notations, DPRC (Demand Paging Related Cost), and PLOAD.
considering demand paging costs
: the WCET of task instance
and the page reuses
: the set of all the combinations of pages loaded until task instance
.
For example, the WCETs considering demand paging costs for task instances
,
and
are
,
and
, respectively. In the above
graph, DPRC is the same as
and PLOAD determines
.
Figure 2(b) shows how to calculate each DPRC values of the task. In the figure, the
first task instance has the maximum WCET when the task executes an execution path
0 and in this case,
is 20. In order to calculate
, all the possibilities of page loads for the task instance
should be re-considered. As a result,

902

Y.-H. Lee et al.

is 19 when the task executes the execution path 0. This would produce
safe bound on the WCET of the second task instance.
2.3 Calculation of the WCRT
In this paper, we propose two different WCRT analysis methods: DP-Pessimistic and
DP-Accurate, depending on the accuracy and the complexity of the analysis. In DPof task is calculated only by using the demand
Pessimistic method, the WCRT
paging cost analysis and could be formulated as follows:
.

(5)

where
is the new WCET including demand paging cost recalculated from . In
DP-Accurate method, the WCRT
of task is calculated using the demand paging
cost analysis and page reuses aspect analysis and could be obtained as follows:
.

(6)

where
and
are the WCETs of each task instance considering
the demand paging cost and page reuses.

3 Evaluations
To evaluate the analysis accuracy of DP-Pessimistic and DP-Accurate, we simulate
the task executions with demand paging using manually composed sample task set
with various task parameters. Our simulator performs RM (rate monotonic) scheduling simulation with three different demand paging cost analysis: shadowing, DPPessimistic, and DP-Accurate. For our evaluation experiments, we carefully select the
task parameters to show the effect of DP-accurate compared to DP-pessimistic as
much as possible.
Table 1 shows the sample task set and parameters. Each task set contains same
number of tasks with the same pure WCETs when demand paging costs are not considered. The only differences among the task sets are the page access behaviors of the
tasks to show the accuracy differences of DP-Pessimistic and DP-Accurate methods.
Task set 2 and Task set 3 have execution paths whose demand paging costs are significantly larger than the costs of other paths.
Figure 3 shows the WCRT analysis results for the lowest priority task of each task
set. The execution times are given at ms (milliseconds) and the ratio of DP-Accurate
over DP-Pessimistic is given. The differences between DP-Accurate analysis and DPPessimistic are significant for task sets 2 and 3 since the task sets have execution
paths whose page access costs are significantly larger than other paths. This reveals
that DP-Pessimistic analysis produces too loose bounds on the WCRTs compared to
DP-Accurate analysis. Such loose bound affects the decision on the schedulability of
the task sets. For example, with DP-Accurate, all the task sets satisfy the deadlines,

Bounding Demand Paging Costs in Fixed Priority Real-Time Systems
Table 1. Task set parameters
Task set

# of paths

1

2

3

4

5
15

1
1

60

5

240
5
15

1
1
1

60

5

240
5
15

1
1
1

60

5

240
5
15

1
1
1

60

5

240

1

1
2
4
3
5
4
5
60
1
2
4
3
5
4
5
60
1
2
4
3
5
4
5
60
1
2
4
3
5
4
5
60

{45}
{46}
{1, 2}
{8, 9}
{15, 16}
{24, 25, 26, 27, 28, 29}
{33, 34, 38, 39}
{47}
{45}
{46}
{1, 2}
{8, 9}
{15, 16}
{24, 25, 26, 27, 28, 29, 30, 31}
{38, 39}
{47}
{45}
{46}
{1, 2}
{8, 9}
{15, 16}
{24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}
{38, 39}
{47}
{45}
{46}
{1, 2, 3}
{8, 9, 10}
{15, 16}
{24, 25, 26, 27}
{38, 39, 40}
{47}

450
400
350

WCRT

300
DP-Accurate

250

DP-Pessimistic
200

Shadowing

150
100
50
0
1

2

3
Task set

Fig. 3. Evaluation results

4

903

904

Y.-H. Lee et al.

but with DP-Pessimistic, the tasks for Task sets 1, 2, and 3 do not satisfy the deadlines
from the analysis. Task set 4 shows similar worst case response times between DPAccurate and DP-Pessimistic since the page access costs are similar for all execution
paths.

4 Conclusion
In this paper, we have proposed a WCRT analysis method considering demand paging
costs. Depending on the accuracy and the complexity of the analysis, two different
analysis methods, DP-Pessimistic and DP-Accurate, are devised. DP-Accurate
considers the possibility of page reuses among different task instances while DPPessimistic does not consider the page reuses.
Evaluation results show that DP-Accurate method gives more accurate analysis results than DP-Pessimistic method especially for the tasks consisting of task instances
whose pages are reused by succeeding task instances. The current analysis method is
the basis for future extensions that aim at more practical modeling of demand-paging
for real-time systems.
Acknowledgments. This work was supported in part by the MIC & IITA under IT
Leading R&D Support Project 2006, in part by No. 379 from the Basic Research
Program of KOSEF, in part by the MIC, Korea under the ITRC (Information Technology Research Center) support program supervised by the IITA (IITA-2006-C10900603-0045), and in part by Kookmin University under Research Center Incubation
Program (UICRC).

References
1. K. Tindell.: Adding Time-Offsets to Schedulability Analysis. Technical Report YCS 221,
Dept. of Computer Science, University of York, England (1994)
2. Palencia, J. C. and Gonzlez Harbour, M.: Schedulability Analysis for Tasks with Static and
Dynamic Offsets. In Proceedings of the IEEE Real-Time Systems Symposium (1998)
3. N.Audsley et al.: Applying new scheduling theory to static priority preemptive scheduling.
Software Engineering Journal. (1993) 284-292
4. J. V. Busquets-Mataix, J. J. Serrano-Martin, R. Ors, P. Gil, and A. Wellings.: Adding Instruction Cache Effect to Schedulability Analysis of Preemptive Real-Time Systems. Proceedings of the 2nd Real-Time Technology and Applications Symposium (1996)
5. C. Lee, J. Hahn, Y. Seo, S. Min, R. Ha, S. Hong, C. Park, M. Lee, and C. Kim.: Analysis of
Cache-related Preemption Delay in Fixed-Priority Preemptive Scheduling. IEEE Transactions on Software Engineering (1996) 264-274
6. K. Tindell, A. Burns, and A. Wellings.: An Extendible Approach for Analysing FixedPriority Hard Real-Time Tasks. Journal of Real-Time Systems, 6(2). (1994) 133-151
7. Scott F. Kaplan, Lyle A. McGeoch, Megan F. Cole.: Adaptive caching for demand prepaging. Proceedings of the 3rd international symposium on Memory management. Berlin,
Germany (2002)

