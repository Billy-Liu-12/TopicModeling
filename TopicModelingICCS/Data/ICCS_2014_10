Procedia Computer Science
Volume 29, 2014, Pages 1458–1467
ICCS 2014. 14th International Conference on Computational Science

Teaching High Performance Computing
using BeesyCluster and Relevant Usage Statistics∗
Paweł Czarnul
Faculty of ETI, Gdansk University of Technology, Poland
pczarnul@eti.pg.gda.pl

Abstract
The paper presents motivations and experiences from using the BeesyCluster middleware for teaching high performance computing at the Faculty of Electronics, Telecommunications and Informatics,
Gdansk University of Technology. Features of BeesyCluster well suited for conducting courses are discussed including: easy-to-use WWW interface for application development and running hiding queuing
systems, publishing applications as services and running in a sandbox by novice users, team work and
workﬂow management environments. Additionally, practical experiences are discussed from courses:
High Performance Computing Systems and Architectures of Internet Services. For the former, activities
such as the number of team work activities, numbers of applications run on clusters and the number of
WWW user sessions are shown over the period of one semester. Results of survey from a general course
on BeesyCluster for HPC conducted for the university staff and students are also presented.
Keywords: teaching high performance computing, tools for high performance computing, HPC courses, usage
patterns in HPC, cluster middleware

1

Introduction

High performance computing is becoming more and more widespread with adoption of multi-core
CPUs, GPUs and other accelerators. However, efﬁcient use of such resources requires knowledge of not
only APIs such as MPI, OpenMP, NVIDIA CUDA, OpenCL etc. but also background on parallelization of various types of algorithms, potential bottlenecks and optimization techniques. This requires
specialized teaching and corresponding courses. This paper presents how a modern environment called
BeesyCluster can be used to assist teaching high performance related courses. Speciﬁcally, features such
as an easy-to-use WWW interface for HPC clusters allow and a workﬂow management environment for
integration of HPC services allow both inexperienced and power users to make use of HPC resources
and use a team work environment for group projects.
These are put in the context of other works in Section 2 and the solution is presented in Section 3.
Its design and implementation are described in Section 5 while practical experiences and measurements
in Section 6.
∗ work

1458

performed within grant supported from Polish National Science Center based on decision DEC-2012/07/B/ST6/01516
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2014.05.132

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

2

Czarnul

Related Work and Motivations

Already in 1994 paper [12] described resources and the environment at Pennsylvania State University
as well as content of a course in HPC for undergraduates. That included High Performance Fortran and
Parallel Virtual Machine as APIs for parallel programming, as well as 12 lectures for partial differential
equations and linear algebra.
Paper [13] presents multiple initiatives aimed at teaching supercomputing to both staff and students
of University of Oklahoma as well as interact with researchers. Oklahoma Supercomputing Center for
Education & Research has been delivering workshops titled “Supercomputing in Plain English” to about
400 participants focusing on analogies to discuss key issues in parallel programming. Other initiatives
include question and answer sessions, tours to understand hardware, usage patterns as well as rounds
with researchers to help them advance their solutions.
Work [4] discusses initiatives proposed by Louisiana State University to increase knowledge and
understanding of high performance computing among high school students. The work includes lectures,
assembly of equipment by students, interactive programming using PyMPI as well as tutorials.
Good practices and issues in teaching parallel computing to science faculty are outlined in [11]. In
particular, program “Investigating Principles of Parallelism Using People” is mentioned as important for
understanding the key issues. In the program people are used as processors. Furthermore, availability
of HPC resources and software is of paramount importance. The Bootable Cluster CD (BCCD) system
running in RAM and having preconﬁgured environment and applications has been developed [10]. MPI,
PVM, openMosix, CUDA, C and other tools and languages are available. BCCD can be run on either
a single or multiple nodes to form a cluster. Paper [10] also describes workshops on HPC and their
content. The workshops have been run for about 8 years in the United States and abroad. MPI and
GPGPU, OpenMP and hybrid solutions were used as primary APIs for parallel programming.
In terms of the tools for teaching HPC, paper [1] describes a very recent effort in development of
an affordable HPC platform based on Playstation PS3 suitable for conducting the following courses:
Distributed and Parallel Database, Parallel and Distributed Processing and Parallel Programming. Work
[5] presents a grid computing lab with four clusters at the University of Houston-Downtown and its
application in education and research with around 20 students participating in activities.
The authors of [2] suggest that for effective teaching of high performance computing a mid-sized
cluster is needed as it allows to demonstrate performance aspects only visible on a larger number of
processors and that such an environment attracts attention of students. This is demonstrated on 64-node
Mozart cluster located at the University of Stuttgart. The authors of [3] advocate a program that combines education with research possibilities. The program involves fundamental courses including High
Performance Computing and Parallelization with an option to use remaining hours ﬂexibly considering
research needs.
Teaching high performance computing, as described in the aforementioned literature, can beneﬁt
greatly from dedicated software that assists corresponding activities in HPC in terms of educational
needs. This was the main motivation for creation of the BeesyCluster environment presented in this
paper. In particular, provision of a platform to make teaching and access to HPC resources easy and
allow both MPI, OpenMP, CUDA-level application development as well as higher level service integration using a workﬂow management environment. Of equal importance was the possibility to develop
parallel applications in a group i.e. team work features on such a platform.

3

Solution

A solution to the above requirements has been implemented within BeesyCluster – a system meant as:
easy-to-use portal for HPC resources with WWW and Web Service interfaces and a middleware for
1459

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

Czarnul

complex processing using multiple HPC systems.
BeesyCluster is a middleware that allows users to access and use distributed resources such as high
performance clusters, servers as well workstations. Each user can register a BeesyCluster account
through which they can access possibly multiple system accounts on clusters and servers registered in
the system. This is possible using the single sign-on feature that does not require logging in individually
to particular resources.
Each BeesyCluster user has a variety of functions available at their disposal such as management of
ﬁles and directories including creating, editing ﬁles, copying and moving between clusters and servers,
running system commands and applications including compilation of programs. BeesyCluster supports
a development environment including an editor with support for various languages. The system also
allows running applications: either interactively (with text-based or graphical interface) or queuing using
underlying systems such as PBS, LSF or others. Additionally, a team work environment described in
Section 5.3 is provided.
Even if a user does not have a system account registered, their BeesyCluster account can be used
for consuming services published by other BeesyCluster users. For instance, this feature may be used
by instructors to make complex applications [6] available to novice users using an easy-to-use Web
interface.

4

Deployment

The architecture of the system is described in [8]. Figure 1 shows the current BeesyCluster deployment
at Gdansk University of Technology (GUT) for use during courses outlined in Section 6 as well as for
research activities. BeesyCluster accesses both a cluster with Inﬁniband at the Faculty of ETI, GUT as
well as a large cluster with Inﬁniband at Academic Computer Center, GUT. Additionally, laboratories
with workstations at the faculty as well as application servers, the latter with multiple multicore CPUs
and multiple GPUs each are accessed by BeesyCluster for computations. BeesyCluster can be accessed
from any computer with a Web browser, including tablets and smartphones available in our lab. The
system has been implemented as a Java EE application.

Figure 1: Deployment of BeesyCluster for teaching and research at Gdansk University of Technology.
Computing nodes marked and networking devices shown in blue and red

1460

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

5

Czarnul

Design and Implementation

5.1

Easy-to-use WWW Interface

The system offers two interfaces to the underlying resources: an easy-to-use WWW interface within the
browser (Figure 2) and Web services to invoke applications from within other applications [9].

Figure 2: File manager with a context menu (on the right) and superimposed command line mode with
compilation of an MPI program
In the context of teaching and conducting courses, the ﬁrst one is of utmost importance. As shown in
Figure 2, each BeesyCluster user can use a ﬁle manager within the Internet browser to access two clusters or servers at the same time and create, delete, edit, move ﬁles or directories between the resources.
It should be noted that there is also a command line option available that allows all these operations
including compiling and running as shown on the left in Figure 2. An interesting feature in this context
is the history of commands remembered by the browser.
Secondly, for each ﬁle there is a context menu available as shown in the right in Figure 2 that gives
access to particular functions depending on ﬁle type such as:
• Unpacking archive for zip or tar.gz, tgz ﬁles.
• Running an application.
• Submitting an application to an underlying queuing system on a given HPC system. BeesyCluster has a database of queuing systems installed on the given cluster and invokes its commands
for submission and checking status until the user can fetch and view corresponding results. Submission to a queue has been made as easy as possible and is shown in Figure 3. The user can
specify minimum and maximum numbers of processors to run the application and BeesyCluster
will select a queue by itself based on a database of registered queues. Alternatively, a power user
may select a queue if they wish to do so.
• Viewing or editing code with a dedicated editor.
Additionally, there is a possibility to run applications with a graphical interface via the browser. This
has been made possible by a custom built client as well as a VNC server.
1461

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

Figure 3: Submission of a parallel application
to a queuing system

5.2

Czarnul

Figure 4: Invocation of a service published before

Security and Execution Sandbox for Publishing Applications as Services

An interesting feature of BeesyCluster is the possibility to publish applications, either run interactively
or via a queuing system such as PBS or LSF, as services that can be later invoked with a few mouse
clicks via the WWW interface or using the Web Service interface [9]. What is more, the user can grant
access to such services to other users or groups of users. It is possible to not only grant the right to
execute the service but also grant the right to grant access to other users as well. In the context of
conducting classes this allows to spread rights to a service to teachers conducting particular classes to
make services available to particular student groups.
Consequently, each user who has been granted access, can see a panel with available services and can
invoke the service from the servlet shown in Figure 4. This just requires: uploading input ﬁles, setting
input parameters (if necessary), running the application. It is especially useful for making complex
applications (e.g. parallel applications with MPI and NVIDIA CUDA or OpenCL) available to novice
users who would like to invoke applications but not be bothered by underlying complexities. As such,
this is a very useful technique for conducting courses in speciﬁc domains that use HPC services in
particular ﬁelds as described in Section 6.3.
When services are published, the system does not require setting up the environment, compiling
and queuing. This is possible by running the application on the system account of the provider, not the
client. In order to secure the execution, the following measures are taken within the system:
1. parsing arguments to the program run to ﬁlter out dangerous clauses or characters, to avoid SQL
injection etc.,
2. checking the rights of the user to run the given program against the privileges set in the database,
3. allowing the user who has run an application to browse only a dedicated directory on the provider’s
account to view results of the task stored in this directory. Invocation to any other space on the
provider’s account is prohibited.
1462

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

5.3

Czarnul

Team Work Environment

BeesyCluster contains a module for group work among a number of BeesyCluster users. It allows
deﬁnition of milestones, deadlines, tasks assigned to particular members of the team and a common
platform for exchange of data (ﬁles) as well ideas. The latter is possible through chat and a shared board
available through a web browser.

5.4

Workﬂow Environment

Students are able to compose services published by many users in the workﬂow management module
built into BeesyCluster [8]. As shown in Figure 5, the module allows modeling of complex processing
scenarios composed of simpler tasks. For each task, one or more services are assigned as well as input
data to the workﬂow is given by pointing out one or more initial locations on the system accounts
available to the user. In case of one service per task, the system will execute the so-called concrete
workﬂow. In case there are more services per task capable of executing the latter, services will usually
differ in execution times, cost and other QoS metrics. BeesyCluster contains several algorithms such as
integer linear programming, genetic and divide-and-conquer for optimization of service selection and
scheduling to minimize the total workﬂow execution time with a bound on the total cost of selected
services. In the context of HPC education, this allows the following:

Figure 5: Sample workﬂow application in BeesyCluster

1. high level integration of services installed on various clusters or servers. This applies to services published by various users. The workﬂow management system supports routing data along
workﬂow paths from service to service.
1463

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

Czarnul

2. optimization – the system can optimize partitioning and routing of data between parallel workﬂow paths in order to optimize Quality of service criteria such as minimization of the workﬂow
execution time only or minimization of workﬂow execution time with a constraint on the total
cost of selected services.

6

Practical Courses – Experiences

6.1

High Performance Computing Systems

High Performance Computing Systems is a master level course (eight semester) conducted at Faculty
of Electronics, Telecommunications and Informatics, Gdansk University of Technology. The current
course includes parallelization of algorithms, data partitioning, load balancing, optimization techniques
such as overlapping communication and computations, cache optimization, checkpointing, introduction
to accelerators.

Figure 6: Group work activity (messages, shared board, task deﬁnition, chat, milestones) in BeesyCluster over a single semester
The aforementioned system has been used within the course to allow the following features:
1. Development and running parallel applications through the WWW interface using a dedicated
editor for such applications.
2. Usage of a subsystem hiding underlying queueing systems such as PBS, LSF, LoadLeveler etc.
This makes both submission of tasks and browsing statuses and results easier.
3. Using the teamwork environment described in Section 5.3.
4. Possibility to share a few dedicated system accounts on clusters among a large number of students.
In this case, students use dedicated directories. This scheme makes conﬁguration and management much easier. Additionally, management scripts such as process and disk cleaning scripts are
periodically run e.g. each night.
1464

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

Czarnul

Figure 7: Number of commands run in BeesyCluster over a single semester

Figure 8: Number of sessions in BeesyCluster over a single semester

5. Possibility to integrate services from various clusters at a higher level using the workﬂow management system described in Section 5.4.
Figures 6 to 8 present real acitvity levels logged over one semester of the HPCS course (from February until June) logged in the BeesyCluster system. Figure 6 shows group work activity such as using
messages, shared board, task deﬁnition, chat, deﬁnition of milestones in BeesyCluster over a single
term. It is visible that students would use group work features more before intermediate deadlines during the semester. Figure 7 presents commands launched on clusters – mainly parallel simulations. In
this case, evidently getting to know the environment is visible in the beginning while testing is visible
1465

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

Czarnul

closer to the end of the semester. The number of WWW sessions is shown in Figure 8.

6.2

Architectures of Internet Services

Architectures of Internet Services is a bachelor level course (ﬁfth semester) on parallel and distributed
software architectures and integration. The systems include HPC, client-server, multi-tier systems, peerto-peer, agent, volunteer, grid, cloud based systems. Within this context, students used the workﬂow
management environment for deﬁnition of a complex computational task that comprises services available on various clusters. This also uses an intelligent module for searching for services based on text
query and service description matching described in [7].
As an example, students were asked to create workﬂow applications spanning various ﬁelds such
as: computations, graphics, sound processing etc. For this purpose, the search mechanism described in
[7] was used by a group of students. The advantage of this solution is that applications installed within
the systems (Linux OS) were automatically published as services within BeesyCluster with automatic
generation of descriptions from descriptions in rpm packages. Additionally, a set of computational
services was deployed in BeesyCluster and installed on HPC clusters. This allowed returning correct
services for queries like: audio cd to wav, change ascii to utf-8, compute integral, convert jpg to png,
extract images from pdf, verify iso image. The latest environments e.g. the desktop in Ubuntu 13.10 etc.
also allow natural text based searches. In BeesyCluster, this functionality can be used not only to search
for individual services but to match services to tasks in workﬂow applications [8].

6.3

General Course on BeesyCluster as a Tool for HPC

We have also organized a university wide (various faculties) course for teaching on how to use BeesyCluster in order to access and use HPC systems easier than using the traditional command line approaches. The author has gathered survey results from around 30 paricipants (each participant ﬁlled in
a survey form). Each participant has acknowledged their interest in the system as a tool for using HPC
resources and selected functions desired in their work as a scientist in a given domain. The latter ones
are summarized in Table 1. The conclustion is that users are interested in BeesyCluster mostly as an
easy-to-use front-end to HPC resources hiding queuing systems and the team work module.
Desired function →
Proﬁle ↓
medical
multimedia
staff
AI
CFD
PhD student

team
work
2
1

publishing
services
2

1
4

1
1

queuing
tasks

WWW
ﬁle manager

remote access
to apps

7
1

2
1

1

4

2

1
5

Table 1: Desired functions in BeesyCluster by academic proﬁle

7

Conclusions and Future Work

The paper presented the BeesyCluster middleware in the context of teaching and conducting courses
on high performance computing. Features such as an easy-to-use front-end that hides queuing systems
and supports the application development process, possibility to publish parallel applications as services
to be invoked from the WWW interface and run in a secure sandbox, a teamwork environment and a
1466

Teaching High Performance Computing using BeesyCluster and Relevant Usage Statistics

Czarnul

workﬂow management system were presented. Furthermore, use cases and experiences from courses
on high performance computing were presented with various student activities logged over a period of
one semester. Additionally, the paper summarized the most useful features of BeesyCluster as a tool for
HPC as indicated by course participants from the academic community.
We will use the various activity logs and distributions when designing an editor and environment for
modeling performance, reliability and power consumption of large scale parallel systems as this would
involve similar interest groups. In the future, we plan on extending support of the development tools for
accelerator-based systems, especially including GPUs from NVIDIA and Intel Xeon Phi cards.

References
[1] Omar Abuzaghleh, Kathleen Goldschmidt, Yasser Elleithy, and Jeongkyu Lee. Implementing an affordable high-performance computing for teaching-oriented computer science curriculum. Trans. Comput. Educ.,
13(1):3:1–3:14, February 2013.
[2] Martin Bernreuther, Markus Brenk, Hans-Joachim Bungartz, Ralf-Peter Mundani, and Ioan Lucian Muntean.
Teaching high-performance computing on a high-performance cluster. In Sunderam et al. [14], pages 1–9.
[3] Martin Berzins, Robert M. Kirby, and Cullen R. Johnson. Integrating teaching and research in hpc: Experiences and opportunities. In Sunderam et al. [14], pages 36–43.
[4] Steven R. Brandt, Chirag Dekate, Phillip LeBlanc, and Thomas Sterling. Beowulf bootcamp: Teaching local
high schools about hpc. In Proceedings of the 2010 TeraGrid Conference, TG ’10, pages 4:1–4:7, New York,
NY, USA, 2010. ACM.
[5] Ping Chen. A high performance computing environment to support research and teaching at a minority serving
institution. Department of Computer and Mathematical Sciences, University of Houston, Houston, USA.
[6] P. Czarnul and K. Grzeda. Parallel Simulations of electrophysiological phenomena in myocardium on large
32 and 64-bit Linux clusters. In Kranzlmuller, D and Kacsuk, P and Dongarra, J, editor, Recent Advances
In Parallel Virtual Machine And Message Passing Interface, Proceedings, volume 3241 of Lecture Notes In
Computer Science, pages 234–241. Springer-Verlag Berlin, 2004. 11th European Parallel Virtural Machine
and Message Passing Interface Users Group Meeting, Budapest, Hungary, Sep 19-22, 2004.
[7] P. Czarnul and J. Kurylowicz. Automatic conversion of legacy applications into services in BeesyCluster. In
Information Technology (ICIT), 2010 2nd International Conference on, pages 21–24, 2010.
[8] Pawel Czarnul. Modeling, run-time optimization and execution of distributed workﬂow applications in the
JEE-based BeesyCluster environment. Journal of Supercomputing, 63(1):46–71, Jan 2013.
[9] Paweł Czarnul, Michał Bajor, Marcin Fraczak,
˛
Anna Banaszczyk, Marcin Fiszer, and Katarzyna Ramczykowska. Remote task submission and publishing in beesycluster: Security and efﬁciency of web service interface. In Parallel Processing and Applied Mathematics, volume 3911 of Lecture Notes in Computer
Science, pages 220–227. Springer Berlin / Heidelberg, 2006. 10.1007/11752578_28.
[10] Andrew Fitz Gibbon, David A. Joiner, Henry Neeman, Charles Peck, and Skylar Thompson. Teaching high
performance computing to undergraduate faculty and undergraduate students. In Proceedings of the 2010
TeraGrid Conference, TG ’10, pages 7:1–7:7, New York, NY, USA, 2010. ACM.
[11] David A. Joiner, Paul Gray, Thomas Murphy, and Charles Peck. Teaching parallel computing to science
faculty: Best practices and common pitfalls. In Proceedings of the Eleventh ACM SIGPLAN Symposium on
Principles and Practice of Parallel Programming, pages 239–246, New York, NY, USA, 2006. ACM.
[12] L.N. Long, J. L. Barlow, L. F. Constable, and K. M. Morooney. Undergraduate education and research in high
performance computing. International Journal for Engineering Education, 10(3):291–298, 1994.
[13] Henry Neeman, Horst Severini, and Dee Wu. Supercomputing in plain english: Teaching cyberinfrastructure
to computing novices. SIGCSE Bull., 40(2):27–30, June 2008.
[14] Vaidy S. Sunderam, G. Dick van Albada, Peter M. A. Sloot, and Jack Dongarra, editors. Computational
Science - ICCS 2005, 5th International Conference, Atlanta, GA, USA, May 22-25, 2005, Proceedings, Part
II, volume 3515 of Lecture Notes in Computer Science. Springer, 2005.

1467

