An Agent Model for Managing Distributed Software
Resources in Grid Environment
Jingbo Ding and Weiqin Tong
School of Computer Engineering and Science,
Shanghai University, Shanghai 200072, China
dingjingbo@etang.com

Abstract. Grid technologies enable large-scale sharing of many types of
resources, among which software resources are a vital part. Abundant software
resources exist in geographically distributed hosts in grid environment. The
characteristic “distributed” makes the discovery, characterization, and
monitoring of them challenging due to the considerable diversity, large
numbers, dynamic behavior, and geographical distribution of the software
entities. Thus, we put forward here an agent model, which is built on grid
technologies, to manage the software resources in grid environment. The agent
can store, retrieve and manage the information of software resources through a
resource directory. Our model also provides a visualizing uniform interface by
which user can easily find software resources in grid and utilize them. To sum
up, this agent is a middleware between end user and software resources.

1 Introduction
Grid computing technologies enable widespread sharing and coordinated use of
networked resources, and make remote utilization of distributed software resources
possible [4, 5, 10, 15, 1]. But users often feel inconvenient when using these
distributed resources in grid environment. For this reason, it is necessary to design an
agent model, which is designated to support the initial discovery and ongoing
utilization of the existence and characteristics of software resources.
The goal of our model is to provide a software resource pool, which can collect the
information of software resources, and to provide an interface and a mechanism by
which end users can discover and then utilize appropriate software entities interested.
The “distributed” characteristic of software resources in grid environment can be
viewed as Fig. 1. All the software entities are geographically distributed and owned
by Internet hosts. As Fig. 2 shows, we can regard them together as a resource tree. A
virtual grid root is defined at the top of tree for convenience of undertaking. Software
entities belong to hosts, which are a part of domain or connected to Internet directly.
Our agent model provides a software resources pool, which can be seen as a
logical information tree. Fig. 3 describes an example. In this tree, all the software
resources are managed centrally and classified in order to provide a uniform view to
users. This mechanism makes managing software resources in grid computation
environment more efficient and provides an encapsulated, uniform interface for user.
For example, users can use software resources in grid without knowing what they are
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 971–980, 2003.
© Springer-Verlag Berlin Heidelberg 2003

972

J. Ding and W. Tong

and where they exist. By using this agent, user can find adequate information of
software resources conveniently.

Fig. 1. Distributed software resources
in grid environment

Fig. 2. A sample of resource tree

Let us compare the two trees. The former “resource tree” reflects the original
characteristic of software resources – distributed; while the later “logical information
tree”, which satisfies users’ needs, does conceal this characteristic. The main goal of
our agent is to provide a logical view of software resources to end-users.
In a word, our agent for managing distributed software resources is a middleware
between users and software resources that can: 1) for software resources, construct a
centralized resource pool to store information of software resources and some
maintenance tools to manage it; 2) for users, provide a visualizing uniform interface
by with users can easily find and utilize them in grid environment.
The architecture of our model consists of four basic elements:
l Resource directory. This is a database that contains the information of
software resources. In our model, we use LDAP (Lightweight Directory
Access Protocol) [6, 2, 3] as its based protocol.
l Registry tool for software resources. Software resources should be initially
registered to a centralized resource directory, which stores the information of
software resources, to enable themselves to be discovered. Registry tool
provides operation interface by which software resources can be registered in
the directory. But software resources in grid environment are highly dynamic.
To adapt for this characteristic, the agent uses a corresponding mechanism
that updates the resource directory when some changes happen in software
resources.
l Discovery tool for users. The main function of this tool is to accept querying
request from users, search information in directory, and reply results back.
Another purpose of this tool is to make users able to maintain the resource
directory, such as add, delete, and modify information in it.
l Web interface. To provide a platform-irrespective operation and a friendly
interface, web interface adopts XML technologies [12] to produce uniform

An Agent Model for Managing Distributed Software Resources

973

data format. An interpreter converts the data between web interface and agent
kernel commands, such as “register” and “query”.
The rest of this paper is structured as follows. In the next section, we briefly
review the background of grid computation and some related work. In subsequent
sections we first outline our architecture and then describe our agent model in detail:
data model, registry tool, and discovering process. In Sect. 7 and Sect. 8, we present
our trace of OGSA proposal and give a famous related work. We summarize the paper
and conclude with a discussion of some future directions in Sect. 9.

2 Background
2.1 Grid and Globus Toolkit
A computational grid is a hardware and software infrastructure that provides access to
high-end computational capabilities. Grid computing is concerned with coordinated
resource sharing and problem solving in dynamic, multi-institutional virtual
organizations [5, 10, 15]. The key concept is the ability to negotiate resource-sharing
arrangements among a set of participating parties (providers and consumers) and then
to use the resulting resource pool for some purpose. The Globus Project provides
software tools that make it easier to build computational grids and grid-based
applications. These tools are collectively called the Globus Toolkit, which provides
three elements (Resource Management, Information Services, and Data Management)
necessary for computing in a grid environment [9, 11].
The relationship between our agent model and Globus Toolkit is as following. Our
agent model is based on Globus Toolkit. Parts of our agent work through the API of
Globus Toolkit.
2.2 Directory, Directory Service, and Grid Information Services
Directory. Directories are used to store and retrieve information [3, 6]. Thus,
directories are similar to databases.
Directory Service. A Directory Service provides a directory that can be accessed
via a network protocol. Often, directory services include mechanisms for replication
and data distribution. An example of directory service is Domain Name System
(DNS), which resolves the names of computers to appropriate addresses [2, 3].
LDAP. The abbreviation LDAP stands for Lightweight Directory Access Protocol.
LDAP defines a standard directory protocol that includes the following features [3, 6]:
l A network protocol for accessing information in the directory.
l An information model defining the form and character of the information.
l A namespace defining how information is referenced and organized.
l An emerging distributed operation defining how data may be distributed and
referenced (LDAP version 3 [6]).
l An extensible protocol.
l An extensible information model.
Information Services are utilities that provide information about grid resources,
including the Monitoring and Discovery Service (MDS), which provides a

974

J. Ding and W. Tong

configurable information provider component called a Grid Resource Information
Service (GRIS) and a configurable aggregate directory component called a Grid Index
Information Service (GIIS) [1, 7, 8, 9]. The MDS uses the LDAP as a uniform
interface to such information. A variety of software components, ranging from
commercial servers to open source code, can be used to implement the basic features
of MDS: generating, publishing, storing, searching, querying, and displaying the data.

Fig. 3. A sample of logical view of resource tree

Fig. 4. Architecture overview

3 Architecture Overview
As described in Sect. 2, in Grid Information Services, with using the GRid
Information Protocol (GRIP), users can query aggregate directory services to discover
relevant entities, and/or query information providers to obtain information about
individual entities. And description services are normally hosted by a grid entity
directly, or by a front-end gateway serving the entity [1]. Now that software resource
is a kind of resources, and it can be specified based on its information, we put forward
such a motivation that utilizing the Grid Information Services to make software
resources sharing possible.
The architecture of our agent model, which is described as Fig. 4, comprises three
main parts – specialized aggregate resource directory, registry module, and discovery
module. Software entities put their description information into resource directory
through registry module. So directory stores gathered information of them. Using
discovery module, users can query aggregate resource directory to discover relevant
software entities and obtain information about individual entities.

An Agent Model for Managing Distributed Software Resources

975

Grid Information Service defines two basic protocols, the GRid Information
Protocol (GRIP) and the GRid Registration Protocol (GRRP), to build a directory
service [1, 9]. GRIP is used to access information about entities, while GRRP is used
to notify aggregate directory services of the availability of this information [1]. We
utilize these two protocols to realize our model, as we will describe in detail below.
Registry and discovery module are defined as services. In the process of registry,
information of resources is collected in directory by registry module based on GRRP.
Users use GRIP to query resources entities through discovery module. That is to say,
registry service is used to register information of software resources, while discovery
service is utilized to look up appropriate software entities for users.

4 Data Model
4.1 Utilizing Data Model of LDAP
In LDAP, the information model and namespace are based on entries. An entry is
used to store attributes. An attribute has an associated type and can have one or more
values. Each entry in the namespace has a distinguished name that allows easy
identification [3, 6].
Entries are organized to form a hierarchical, tree-structured name space called a
directory information tree (DIT). The distinguished name for an entry is constructed
by specifying the entries on the path from the DIT root to the entry being named [2, 3,
6].
The data model in our agent is organized by logical information tree of software
resources (See Fig. 3). Each object is stored in the directory as an item. The attribute
softwareclass indicates the class to which the resource belongs. Hence, the agent can
classify software resources by their attributes. On the other hand, the data structure of
our model accords with the LDAP data model. So we can use LDAP to communicate
between registry tool and resource directory.
An example is given to illustrate data model of our agent model, where a
distinguished name could be as following:
< sn = software1,
sc = math,
sc = computation,
hn = node5.shugrid.shu.edu.cn,
ou = CS,
o = Shu,
c = CN >
Like MDS, the components of the distinguished name are listed in little endian order,
with the component corresponding to the root of the DIT [2]. Within a distinguished
name, abbreviated attributes are typically used. In this example, the names of the
distinguishing attributes are: software name (SN), software class (SC), host name
(HN), organizational unit (OU), organization (O), and country (C). Thus, a country
entry is at the root of the DIT, while host entries are located beneath the
organizational unit level of the DIT. So the software entities belonging to specified
host can be located distinctively.

976

J. Ding and W. Tong

4.2 Specification of Software Resources Information
Each object of software entities is stored in resource directory as an item. To search
software resources and acquire adequate information, the attributes of each item
should at least include: software name, class to which resource belongs, owner, host
name and IP address of the host in which resource exists, local directory in the remote
host, execution file name, software description and other information necessarily. A
specialized MDS object class “GridSoftware” is created to contain these attributes.
Thus, a software entity can be represented by data model of agent. For the example
above, the directory should include an item such as:
dn: <sn=equation, sc=math, sc=computation,
ou=shugrid2, o =Shu, c=CN>
objectclass: GridSoftware
owner: <cn=Person1, ou=CS, o=Shu, c=CN>
softwareclass: math
softwareclass: computation
hostname: node5.shugrid.shu.edu.cn
IP: 202.120.113.199
localdir: /usr/local/mathtool
execution: math1
description: Description text of this entity

hn=node1.shugrid2.shu.edu.cn,

To make process of searching entities more efficient, an additional database is used
to store information of software resources separately from DIT. It is used for speeding
up searching process. Each item in this database is corresponding to the same entity in
DIT. When users look for some entity in resource pool, additional database is
searched first, and then the agent searches relevant entries in DIT.
4.3 Information Directory
Information Directory is a vital part of our agent model. A vital one of the three
elements of our agent model (See Sect. 1) is information directory, which is used to
store information of software resources. We now describe the realization of
information directory.
Since we use LDAP as our based protocol, let us first review DIT used by MDS.
As introduced in Sect. 2 and Sect. 4.1, the information model of LDAP are based on
entries, which are organized to form a DIT. A subset of DIT defined in MDS, which
is showed in Fig. 5, is typical for LDAP directory structures, looking similar to the
organization used for multinational corporations [2].
As we described in Sect. 3.1, our motivation of designing this agent model is to
utilize Grid Information Services in grid technologies to manage distributed software
resources. In our agent, we merge the information of software resources into DIT. An
additional quick database is used to speed up searching process. It stores information
of software resources in DIT in particular. Each item in this database is corresponding
to the same entity in DIT. When users look for some entity in resource pool,
additional database is searched first, and then the agent searches relevant entries in

An Agent Model for Managing Distributed Software Resources

977

DIT. The situation that information merged into DIT and the relationship between
DIT and its additional quick database is showed in Fig. 6.

Fig. 5. A subset of DIT defined by MDS, showing the organizational nodes for Globus, ANL,
and USC; the organizational units ISI and MCS, and people, hosts, and networks [2].

Fig. 6. Using quick database in the information
directory to speed up searching process.

Fig. 7. Layers to provide logical
view to users

4.4 Logical View
In the agent model, software resources are arranged as a logical information tree from
users’ point of view. As showed in Fig. 7, in our agent architecture, there are three
layers on top of resource directory to provide logical view to users.
Classify layer. Items in directory are classified by their attributes in this layer.
Filter Layer. To give exact information in which users are interested, filter layer is
used above the classified layer. Data are filtered according to users’ demand in filter
layer.
View layer. This layer gives the final logical view to users by some arrangement
and process of data from filtered layer.

978

J. Ding and W. Tong

5 Registry of Software Resources
To initialize the directory, each software entity should be registered as an item in a
centralized resource directory that is managed by agent. As is shown in Fig. 8, the
registry tool in agent, which is based on Globus API, acts as a LDAP client to store
information in the directory.
The realization of register module in our agent is based on the API of MDS
(Metacomputing Directory Service). It communicates with the resource directory
using LDAP protocol. Users initially register software entities using registry interface.
Each entity is processed as an entry, with its information stored in resource directory
according to the agent data model (See Sect. 4).

6 User Discovering Resources
An XML-based web interface is used to make users’ operation easy. Using this
interface, Users can query software resources by specifying their demand such as
software name or a given software class. As Fig. 9 shows, between web interface and
searching engine is a command interpreter. Its function is to convert the data from
web page to searching engine, which can recognize and then make appropriate
searching policy regarding users’ demand. To make sure that every software entity
replied to users can be used immediately, when finding results in directory, the agent
tests the availability of entities among them, then just returns the available results to
users. Unavailable ones are marked and will be tested later.

Fig. 8. Implementation architecture of registry tool

Fig. 9. A command interpreter converts data from web
interface to searching engine

7 Trace of OGSA Proposal
Building on both Grid and Web services technologies, the Open Grid Services
Architecture (OGSA) defines mechanisms for creating, managing, and exchanging
information among entities called Grid services. Succinctly, a Grid service is a Web

An Agent Model for Managing Distributed Software Resources

979

service that conforms to a set of conventions (interfaces and behaviors) that define
how a client interacts with a Grid service [9].
We have implemented our agent model based on Globus Toolkit 2.0. To take
advantage of OGSA, we are now trying to build a service to make distributed
software resources sharing. The result is to provide software libraries, which is
transparent to users, in grid environment.

8 Related Work
A famous related work is Universal Description, Discovery and Integration (UDDI)
protocol. It is one of the major building blocks required for successful Web services.
UDDI creates a standard interoperable platform that enables companies and
applications to quickly, easily, and dynamically find and use Web services over the
Internet. UDDI also allows operational registries to be maintained for different
purposes in different contexts. UDDI is a cross-industry effort driven by major
platform and software providers, as well as marketplace operators and e-business
leaders within the OASIS standards consortium [18].
Because of some similarity between UDDI and our agent model, it’s necessary to
present the difference of them. In brief, the main function of UDDI is to provide a
“meta service” for locating web services by enabling robust queries against rich
metadata. The purpose of our agent model is to manage a kind of specific resource –
software resource in grid environment.

9 Conclusions and Future Work
We have presented an agent model for sharing distributed software resources in grid
computations. It not only simplifies the operation of user, but also provides a uniform
interface to users. User can search the resources he needs conveniently and efficiently
and get some information about them. In the future, we expect to use the following
technologies:
Automatically identify installed software. To avoid registering manually, we
would have agents scan file systems to automatically identify installed software.
Multiple agent servers (or backup servers). To realize fault-tolerant operation
for user, we can build multiple servers to store information cooperatively. The
redundant directories will take over the job when original directories fail due to some
faults such as network partition.
Monitoring tool and allocation mechanism. Resources in grid environment can
be redundant. If some kind of software resource exists in more than one host, agent
should allocate an appropriate |one to user. The resources state such as using rate can
be obtained through monitoring tool. Then agent may generate an optimized strategy.
The benefit of such mechanism is balancing the load of hosts.

980

J. Ding and W. Tong

References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.

K. Czajkowski, S. Fitzgerald, I. Foster, C. Kesselman: Grid Information Services for
Distributed Resources Sharing. Proc. 10th IEEE International Symposium on HighPerformance Distributed Computing (HPDC-10), IEEE Press (2001)
S. Fitzgerald, I. Foster, C. Kesselman, G.V. Laszewski, W. Smith, S. Tuecke: A Directory
Service for Configuring High-Performance Distributed Computations. Proc. 6th IEEE
Symp. on High Performance Distributed Computing
G.V. Laszewski, I. Foster: Usage of LDAP in Globus. http://www.globus.org (2002)
I. Foster, C. Kesselman, S. Tuecke: The Anatomy of the Grid Enabling Scalable Virtual
Organizations. Intl J. Supercomputer Applications (2001)
I. Foster, C. Kesselman, The grid: Blueprint for a Future Computing Infrastructure,
Morgan-Kaufmann (1999)
OpenLDAP 2.1 Administrator’s Guide. http://www.openldap.org (2002)
MDS 2.2 User’s Guide. http://www.globus.org
MDS 2.2: Creating a Hierarchical GIIS. http://www.globus.org
S. Tuecke, K. Czajkowski, I. Foster, J. Frey, S. Graham, C. Kesselman: Grid Service
Specification Draft 4 (10/4/2002). http://www.gridforum.org/ogsi-wg
I. Foster, C. Kesselman: Computational Grids. http://www.globus.org
Globus: A Metacomputing Infrastructure Toolkit. http://www.globus.org
Extensible Markup Language (XML) 1.0 (Second edition) W3C Recommendation.
http://www.w3.org/TR/REC-xml
M. Livny: Matchmaking: Distributed Resource Management for High Throughput
Computing. Proc. 7th IEEE Symp. on High Performance Distributed Computing (1998)
J. Rosenberg, H. Schulzrinne, B. Suter: Wide Area Network Service Location. IETF
Internet Draft (1997)
S. Gullapalli, K. Czajkowski, C. Kesselman, S. Fitzgerald: The Grid Notification
Framework. Grid Forum Working Draft GWD-GIS-019. http://www.gridforum.org
T.A. Howes, M. Smith: A Scalable Deployable Directory Service Framework for the
Internet. Technical report, Center for Information Technology Integration, University of
Michigan (1995)
R. L. Ribler, J. S. Vetter, H. Simitci, D. A. Reed: Autopilot: Adaptive Control of
Distributed Applications. Proc. 7th IEEE Symp. on High Performance Distributed
Computing (1998)
http://www.uddi.org

