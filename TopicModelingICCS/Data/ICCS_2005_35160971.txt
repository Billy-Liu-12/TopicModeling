A Genetic Machine Learning Algorithm for Load
Balancing in Cluster Conﬁgurations
M.A.R. Dantas and A.R. Pinto
Department of Informatics and Statistics,
Federal University of Santa Catarina,
88040-900 Florianopolis Brazil
{mario, arpinto}@inf.ufsc.br

Abstract. Cluster conﬁgurations are a cost eﬀective scenarios which
are becoming common options to enhance several classes of applications
in many organizations. In this article, we present a research work to
enhance the load balancing, on dedicated and non-dedicated cluster conﬁgurations, based on a genetic machine learning algorithm. Classiﬁer
systems are learning machine algorithms, based on high adaptable genetic algorithms. We developed a software package which was designed to
test the proposed scheme in a master-slave Cow and Now environment.
Experimental results, from two diﬀerent operating systems, indicate the
enhanced capability of our load balancing approach to adapt in cluster
conﬁgurations.

1

Introduction

Dedicated and non-dedicated cluster conﬁgurations oﬀer a cost/eﬀective highperformance computing if idle resources from these clusters can be successful
harnessed. Several package environments (such as OSCAR (Open Source Cluster Application Resource)[1] and Linux Virtual Server [2]) were developed to
provide functions of a single system image. These environments improve the use
of cluster architectures, providing many important mechanisms to help application programmers to achieve a high performance. The load balancing issues
in distributed systems (such as cluster environments) have been studied by a
number of researches and many points have already been addressed [3, 4, 5].
However, a well known problem in implementing software environments for
single system image is the use of an eﬀective technique to distribute processes
to processors in a fair based policy [6]. As many research works have already
demonstrated (e.g. [5, 6]), in a cluster of computers it is high the possibility of a
speciﬁc node become heavily loaded and others lightweight loaded.
The load balancing problem is recognized as a NP-complete problem [7].
Therefore, application developers commonly use heuristic or stochastic methods
because those two paradigms can obtain sub-optional results in a reasonable
period of time. In the literature we can observe an expressive utilization of
genetic algorithm.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 971–974, 2005.
c Springer-Verlag Berlin Heidelberg 2005

972

M.A.R. Dantas and A.R. Pinto

In this article, we present an approach to schedule processes using a classiﬁer
system. This method has an interesting feature of machine learning [8] based on a
genetic algorithm. The results were obtained considering two conﬁgurations. The
ﬁrst conﬁguration was a cluster of tightly machines (Cow) using Linux with the
OSCAR single system image. The other environment was an ordinary network
of workstations (Now) with loosely coupled machines executing the Windows
operating system. The proposed system was implemented in Java.
The paper is organized as follows. Section 2 presents some concepts of scheduling and load balancing approaches. Concepts of genetic algorithms and classiﬁer
systems are shown in section 3. Our proposal is described in section 4. Experimental results of a parallel application are presented in section 5. Finally, in
section 6 we draw some conclusions about the present research and our contribution, indicating some future directions for this research work.

2

Scheduling and Load Balancing in Parallel and
Distributed Systems

The taxonomy presented in [4], considers the global scheduling as static and
dynamic. The static approach requires previous knowledge of processes behavior
and its dependence. Therefore, the static technique is more suitable for homogeneous environments, because this method knows processes behavior at the
compilation time. On the other hand, the dynamic scheduling is used when we
do not know any previous requirements of processes and environments. Thus, in
this paradigm we should implement queries which interact frequently with the
conﬁguration to gather information of the load of the processors. In addition,
a strict dynamic method considers the migration of processes when a processor
became overload for some reason. However, this technique is a complex task and
has a high computational cost (e.g. [9]). Therefore, it is also possible to implement a more relaxed approach of dynamic scheduling migration called on time
assignment scheduling (OTS).

3

Genetic Algorithms and Classiﬁer Systems

Genetic algorithms are designed to perform a search, based on mechanisms of
natural selection. In nature the most adapted individuals have more chances
to survive. In addition, they provide their genetic code to their descendants.
An individual in a genetic algorithm is represented by its chromosome, which is
usually a string. In a new generation, new artiﬁcial creatures (strings) are created
using fragments of the most adapted individuals from the old generation.
A classiﬁer system is a genetic based machine learning algorithm, that can
learn syntactically simple rules (called classiﬁers) to guide its performance in
an arbitrary environment [8]. A classiﬁer system has 3 main modules: rule and
message system, a special class of production system; apportionment of credit algorithm; genetic algorithm. A production system is a computational scheme that

A Genetic Machine Learning Algorithm for Load Balancing

973

employs rules as the main algorithmic goal. Rules usually present the following
form:
If <condition> then <action>
If the classiﬁer system receives the message ”101011” the ﬁrst classiﬁer will
be activated and the action ”100” will be executed. During the creation of a
classiﬁer system, all classiﬁers have the same ﬁtness. When a classiﬁer is chosen,
it has to pay a certain amount of its ﬁtness to the apportionment of credit
algorithm. The amount of ﬁtness is determined by a pre-deﬁned tax. The paid
amount is the product between the pre-deﬁned tax and the classiﬁer ﬁtness. This
amount will be paid in the next classiﬁer system consultation, if the previous
classiﬁer sent an action that improves the system performance. Otherwise, the
amount will be accumulated until a classiﬁer gives a positive action. After a
pre-deﬁned number of consults, genetic algorithm is activated. The population
of classiﬁers is replaced.

4

Proposed Environment

A large number of process scheduling researches that using genetic algorithm are
based on the simulation of the environment. In contrast, we decided to design
and implement a solution using real cluster conﬁgurations.
The ﬁrst step in developing a global solution to schedule process, based on
classiﬁer systems, is to choose a distributed paradigm. In our case we decided to
implement a master-slave approach. Our classiﬁer system proposal is to develop
a modiﬁed threshold method. This algorithm provides a process threshold indicating the number of processes which each can execute. We consider the average
response time variation of processes as entry condition to the classiﬁer. The conﬁguration of classiﬁers will be: <if a grow occurs or a decrement> + <variation
rate of average response time>:<if the threshold should be incremented or decremented >+<threshold rate variation>

5

Experimental Results

The performance of the classiﬁer system was compared to random and threshold
methods. In the random method a destination node is randomly chosen to receive
processes. On the other hand, the threshold method pre-deﬁnes a maximum
number of processes.

Fig. 1. Second experimental results

974

M.A.R. Dantas and A.R. Pinto

The ﬁrst experiment was executed in the non-dedicated environment. In the
last experiment we consider an OSCAR cluster conﬁguration. The processes
submitted to system in frits experiment was a for loop to calculate a sum. On
the other hand, the processes submitted to OSCAR conﬁguration calculated
the prime numbers by Eratostenes ciev. We consider the average response time
metric, therefore a small average response time mean a better performance.
The second experiment was idealized for test the robustness of our proposal.
Therefore, we execute in the dedicated cluster for 20 hours, with interval of 20
minutes. As ﬁgure 1 shows the system had an interesting behavior. The proposed
classiﬁer system shows a high adaptability that was our primarily goal.

6

Conclusion and Future Work

The experimental results present in this article show the high adaptive characteristic of our proposed classiﬁer system implementation. In addition, it demonstrates the capability of learning about cluster conﬁgurations (non-dedicated and
dedicated environments). These facts are conﬁrmed by intervals where we had
low performance compared to the following enhanced performance. As future
work we are planning a scheme to store classiﬁers, therefore when the system
begins the execution classiﬁers would be adapted to the reality which they will
execute.

References
1. Benoit Ligneris, Stephen Scott, Thomas Naughton, Neil Gorsuch, Open Source Cluster Application Resource (OSCAR): Design, Implementation and interest for the
[Computer] Scientiﬁc Community, First OSCAR Symposium, Sherbrooke May 1114, Canada, 2003.
2. Zhang, W. (April, 2004) ”Linux Virtual Server for Scalable Network Services”,
Available online: http://www.linuxvirtualserver.org/docs/scheduling.html.
3. Dantas, M.A.R. and Zaluska, E.J., Eﬃcient Scheduling of MPI Applications on
Networks of Workstations, FGCS Journal, V 13, pp. 489-499, 1998.
4. Casavant T.H. and Khul J.G., ”A Taxonomy of Scheduling in General-Purpose
Distributed Computing Systems”, IEEE Trans. On Software Eng., vol. l4, no. 2, pp.
141-154, Feb. 1988.
5. Zhou S., ”A Trace-driven Simulation Study of Dynamic Load Balancing”, IEEE
Trans. On Software Eng., vol. l4, no. 9, pp. 1327-1341, sep. 1988.
6. Dantas, M.A.R., Queiroz W.J. and Pﬁtscher G.H., ”An Eﬃcient Threshold Approach on Distributed Workstation Clusters”, in HPC in Simulation, pp. 313-317,
Washington, USA, 2000.
7. Papadimitriou, C. and Steilglitz, K., Combinatorial Optimization: Algoritms and
Complexity, Dover Publications, 1998.
8. Goldberg, D.E., ”Genetic Algorithm in Search, Optimization, and Machine Learning”, Addison-Wesley, 1989.
9. Powell, M.L. and Miller, B.P., ”Process migration in DEMOS/MP”, in Proc. 9th
ACM Symp. Operat. Syst. Principles, 1983, pp.110-119.

