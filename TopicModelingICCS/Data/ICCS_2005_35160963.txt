An Architecture for Lightweight Service Discovery
Protocol in MANET*
Byong-In Lim, Kee-Hyun Choi, and Dong-Ryeol Shin
School of Information and Communication Engineering,
Sungkyunkwan University
440-746, Suwon, Korea, +82-31-290-7125
{lbi77, gyunee, drshin}@ece.skku.ac.kr

Abstract. As the number of Internet services grows, it is becoming more
important for the network users to be able to locate and utilize those services
that are of interest to them. As a result, a service discovery protocols are
coming to play an increasingly important role in highly dynamic networks. In
this paper, we describe a new architecture for service discovery called LSD
(Lightweight Service Discovery). The LSD is a peer-to-peer cache-based
service discovery protocol for ad hoc environments. Through the LSD protocol,
small handheld mobile devices with wireless connectivity can detect each other
in their neighboring devices, and perceive whether particular shared services are
available or not. In addition, the LSD solves the overhead problems which arise
when traditional discovery protocols are applied to mobile ad hoc networks.

1 Introduction
As the number of Internet services grows, service discovery protocols are coming to
play an increasingly important role in highly dynamic networks. Consequently, a
number of service discovery protocols have been proposed for wired networks.
Prominent among these [1] are the SLP, Salutation, UPnP and UDDI. These
conventional approaches to service discovery protocols can be classified into two
main categories. These systems were mostly designed for an administrated network
context and are either based on mediator based discovery approaches (e.g. UDDI,
Jini) or on maintaining a network-wide multicast tree based on direct or peer-to-peer
discovery approaches (e.g. UPnP, Salutation, SLP, when operated without directory
agents). In ad hoc networks, the provision for service discovery is mandatory since
they are designed for irregular and unexpected changes in network topology. In a
service discovery environment, basic services that are readily available like discovery
and delivery in wired networks have to be re-designed in order to take into account
the wireless network’s properties. Furthermore, whenever the consumer rearranges
the components in such a system, the system must automatically adapt its
configuration as necessary. In order to satisfy these diverse requirements, we designed
a modified framework based on the existing service discovery algorithms [2, 3] and
*

This research was partially supported by a grant from the CUCN, Korea and Korea Science &
Engineering Foundation (R01-2004-000-10755-0).

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 963 – 966, 2005.
© Springer-Verlag Berlin Heidelberg 2005

964

B.-I. Lim, K.-H. Choi, and D.-R. Shin

implemented a lightweight service discovery protocol suitable for ad-hoc
environments.
The remainder of the paper is organized as follows. Section 2 discusses the LSD
Architecture. Service Propagation Algorithm is described in section 3. Finally, this
paper is concluded in section 4.

2 Design of LSD Architecture
Figure 1 shows the LSD (Lightweight Service Discovery) architecture and
corresponding components in a single mobile device.

Fig. 1. LSD System Architecture

In Figure 1, the LSD consists of three layers: the application layer, the service
management layer, and the network communication layer. The application layer
provides the user with applications such as audio-video players and printing
applications. The service management layer provides services associated with
discovery. In the service management layer, we use a cache manager that registers
information about the services offered by peers in the network. All of the devices in the
network should listen to all advertisement messages, known as delta messages and save
them in their local caches for a given period of time. When a user wants to find a
particular service, they begin by searching for the service in their local caches at first. If
no information is available locally, the user sends a request message through
multicasting. The SDP Policy Manager in the layer is responsible for enforcing policies
designed to control platform behavior. These policies are registered with the SDP Policy
Manager which is responsible for ensuring that all components of the platform are in
compliance with the specified policies. These policies can specify caching preferences
such as the refresh rate or replacement strategy or describe advertisement preferences
such as the frequency or time-to-live, etc. The network communication layer is
associated with two protocols. The first is UDP which is used for multicasting; the
second is TCP which is used unicasting. We send advertise/request messages by using
UDP, and retrieve the data using http or soap based on TCP.

An Architecture for Lightweight Service Discovery Protocol in MANET

965

3 Service Propagation Algorithm of LSD
The LSD pays attention to an efficient service discovery to exploit the nature of
highly dynamic ad-hoc networks. Based on the Konark [3], it has developed a new
algorithm which attempts to balance the convergence time and network bandwidth.
The key difference between Gossip-Konark and LSD is service data structure and the
convergence algorithm involved in joining a network. The Gossip-Konark has a
structure of tree-based hierarchal services. On the other hand, the LSD has a structure
of flat services that have a difference in patterns and message procedures of Query,
Advertisement. Moreover, the LSD uses a dummy advertisement messages. When a
node joins to new network, if it has no local service, it sends the dummy
advertisement message. When a node receives a service message, it sends the
difference between its relevant services and service information in the received
service messages, called a delta message. Thus network overload is reduced. It also
avoids the storm of concurrent multicasts by randomly assigning the multicast time
interval. When a node receives the advertisement message, the LSD prevents
multicast storm problem using RNDWAIT time similar to the Konark. Moreover, if
the node which receives the service message verifies that its service registry has the
same information as that in the received service message, it then remains silent and no
multicasts occur. Figure 2 shows the message transmission procedure for the LSD.
The incremental discovery procedure is able to reduce network traffic for service
discovery due to delta messages.

Fig. 2. Service Propagation Algorithm in LSD

966

B.-I. Lim, K.-H. Choi, and D.-R. Shin

Suppose that an ad-hoc network of interest consists of three nodes: node 1, node 2,
and node 3. Assume that node 2 and node 3 have random waiting times (RNDWAIT)
of 2 and 5 seconds, respectively. We have three cases according to the different
situations as illustrated in Figure 2.
Case 1: service advertisement
(a) Node 1 sends its own service advertisement message to other nodes using the
multicast. At this time, node 2 can send delta message based on the
advertisement earlier than node 3, because node 2 has RNDWAIT=2, whereas
node 3 has RNDWAIT=5.
(b) Listening to advertisement and delta messages from other nodes, node 3 sends
service e, f to other nodes, because node 3 already receives services a, b, c, d.
Case 2: service discovery in arbitrary states, i.e., non-convergent states
(a) When node 1 joins to a new network, node 1 sends out a dummy request
messages to other nodes. From these messages, node 2 multicasts a delta
message ahead of other nodes, for the same reason as the case 1.
(b) Node 3 makes a delta message based on the request and then sends it to other
nodes, which results in fast discovery.
Case 3: service discovery in convergent states (where all nodes know the service
information within the network)
(a) When node 1 joins to a new network in convergent state, node 1 sends out a
dummy request message to other nodes. Then node 2 can send delta message
earlier than other nodes as illustrated as in case 1 and case 2.
(b) Since the network already reaches the convergence of service information, the
number of multicasts and resulting traffic road is reduced. One dummy request
message is enough to reach the convergent state.

4 Conclusion
Unfortunately existing approaches to service trading are not well suited for these
highly dynamic topologies since they rely on centralized servers and have high
communication costs due to periodic query flooding. In this paper, we proposed a
novel scheme to correct and optimize discovery protocol in case of ad-hoc
environments. Currently we are performing a simulation and doing a comprehensive
performance test for our prototyped system.

References
1. F. Zhu, M. Mutka, and L. Ni, "Classification of Service Discovery in Pervasive Computing
Environments," Michigan State University, East Lansing, available at
http://www.cse.msu.edu/~zhufeng/ServiceDiscoverySurvey.pdf MSU-CSE-02-24.
2. M. Nidd, “Service discovery in DEAPspace,” IEEE Pers. Commun., vol.8, pp. 39–45, Aug.
2001.
3. C. Lee, A. Helal, N. Desai, V. Verma, B. Arslan, “Konark: A System and Protocols for
Device Independent, Peer-to-Peer Discovery and Delivery of Mobile Services,” IEEE
System. Man. Cybernetic., vol. 33, no. 6, pp. 682-696, Nov. 2003

