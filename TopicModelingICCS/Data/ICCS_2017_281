Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
This space
is Computer
reservedScience
for the
Procedia
header, do not use it
Procedia
108C
(2017) 626–634
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Utilizing Intel Advanced Vector Extensions for Monte
Utilizing Intel Advanced Vector Extensions for Monte
Carlo Simulation
based Value
Risk Computation
Utilizing
Intel Advanced
Vectorat
for Monte
Carlo Simulation
based Value
atExtensions
Risk Computation
D. N. Carlo
S. S. Liyanage,
G. V. M.
P. A. Fernando,
D. M.Computation
M. Arachchi, R. D. D.
Simulation
based
Value atD.
D. N. S. S. Liyanage,
G. V. M.
P. A. Fernando,
D.Risk
D. M. M. Arachchi, R. D. D.

T. Karunathilaka, and A. S. Perera
T. Karunathilaka, and A. S. Perera
D.Department
N. S. S. of
Liyanage,
G.
V. M. P. A. Fernando, D. D. M. M. Arachchi, R. D. D.
Computer Science and Engineering, University of Moratuwa, Moratuwa, Sri Lanka
T. Karunathilaka,
A. S. ofPerera
Department of Computer Science
and pubudu.12@cse.mrt.ac.lk,
Engineering,and
University
Moratuwa,
Moratuwa, Sri Lanka
nipunasankalpa.12@cse.mrt.ac.lk,
dilinimma.12@cse.mrt.ac.lk,
nipunasankalpa.12@cse.mrt.ac.lk,
pubudu.12@cse.mrt.ac.lk,
dilinimma.12@cse.mrt.ac.lk,
dilip.tharuka.12@cse.mrt.ac.lk,
shehan@cse.mrt.ac.lk
Department of Computer
Science and Engineering, University
of Moratuwa, Moratuwa, Sri Lanka
dilip.tharuka.12@cse.mrt.ac.lk,
shehan@cse.mrt.ac.lk
nipunasankalpa.12@cse.mrt.ac.lk, pubudu.12@cse.mrt.ac.lk, dilinimma.12@cse.mrt.ac.lk,
dilip.tharuka.12@cse.mrt.ac.lk, shehan@cse.mrt.ac.lk

Abstract
Abstract
Value at Risk (VaR) is a statistical method of predicting market risk associated with financial
Value
at Risk
(VaR)
a statistical
methodmodels
of predicting
market VaR
risk associated
financial
portfolios.
There
are is
numerous
statistical
which forecast
and out of with
those,
Monte
Abstract There are numerous statistical models which forecast VaR and out of those, Monte
portfolios.
Carlo Simulation is a commonly used technique with a high accuracy though it is computationValue Simulation
at Risk (VaR)
a statistical
method of predicting
market
riskthough
associated
financial
Carlo
is a is
commonly
used
with a high
accuracy
is with
computationally intensive.
Calculating
VaR in
realtechnique
time is becoming
a need
of short
term it
traders
in current
portfolios.
There
are
numerous
statistical
models
which
forecast
VaR
and
out
of
those,
Monte
ally
Calculating
in real
is becoming
need of shortfor
term
in current
day intensive.
markets and
adapting VaR
Monte
Carlotime
method
of VaR acomputation
realtraders
time calculation
Carlo
Simulation
is
a
commonly
used
technique
with
a
high
accuracy
though
it
is
computationday
and adapting
Monte
Carlo method
of VaR computation
real
time calculation
posesmarkets
a challenge
due to the
computational
complexity
involved withforthe
simulation
step of
ally intensive.
Calculating
VaR
in real time iscomplexity
becoming ainvolved
need of short
term
traders in current
poses
a
challenge
due
to
the
computational
with
the
simulation
step of
the Monte Carlo Simulation. The simulation process has an independent set of tasks. Hence
a
day Monte
markets
and Simulation.
adapting Monte
Carlo method
of VaR
computation
for set
realoftime
calculation
the
Carlo
The
simulation
process
has
an
independent
tasks.
Hence
a
performance bottleneck occurs during the sequential execution of these independent tasks. By
poses a challenge
due tooccurs
the computational
complexity
involved
with independent
the simulation
stepBy
of
performance
bottleneck
during
the
sequential
execution
of
these
tasks.
parallelizing these tasks, the time taken to calculate the VaR for a portfolio can be reduced sigthe Monte Carlo Simulation.
Thetaken
simulation
process hasVaR
an independent
of be
tasks.
Hence
parallelizing
the time
portfolioset
can
reduced
sig-a
nificantly. Inthese
ordertasks,
to address
this issue, to
wecalculate
looked atthe
utilizingfor
thea Advanced
Vector
Extensions
performance
bottleneck
occurs
during
the
sequential
execution
of
these
independent
tasks.
By
nificantly.
In order to
to parallelize
address thisthe
issue,
we looked
at utilizing
the Advanced
Vector Extensions
(AVX) technology
simulation
process.
We compared
the performance
of the
parallelizing
these
tasks,
the
time
taken
to
calculate
the
VaR
for
a
portfolio
can
be
reduced
sig(AVX)
technology
parallelize
the simulation
process.
Weascompared
performance
of the
AVX based
solutiontoagainst
the sequential
approach
as well
against a the
multithreaded
solution
nificantly.
In
order to
address
this
issue, weapproach
looked atasutilizing
the Advanced
Vector Extensions
AVX
based
solution
against
the
sequential
well
as
against
a
multithreaded
solution
and a GPU based solution. The results showed that the AVX approach outperformed the GPU
(AVX)
technology
to parallelize
the simulation
process.
We compared
the performance
the
and
a GPU
The count
results
thesuch
AVX
the of
GPU
approach
forbased
up tosolution.
an iteration
ofshowed
200000.that
Since
a approach
number ofoutperformed
iterations is generally
AVX
based
solution
against
the
sequential
approach
as
well
as
against
a
multithreaded
solution
approach
for to
upgain
to ana iteration
count
of 200000.
Since such
a number
of both
iterations
is generally
not required
sufficiently
accurate
VaR measure,
it makes
sense
computationally
and required
a GPU based
solution.
The results
showed
that
the AVX
approach
outperformed
the GPU
not
to
gain
a
sufficiently
accurate
VaR
measure,
it
makes
sense
both
computationally
and economically to utilize AVX for Monte Carlo method of VaR computation.
approach
for
up
to
an
iteration
count
of
200000.
Since
such
a
number
of
iterations
is
generally
and economically to utilize AVX for Monte Carlo method of VaR computation.
Keywords:
Monte
Carlo
Simulation,
Value
GPUit makes sense both computationally
not
required
to gain
a sufficiently
accurate
VaR AVX,
measure,
©
2017
The Authors.
Published
by Elsevier
B.V.at Risk,
Keywords:
Monte
Carlo
Simulation,
Value
at Risk,
AVX,
GPU of VaR
Peer-review
under
responsibility
ofAVX
the scientific
committee
of the
International
Conference
on Computational Science
and economically
to utilize
for
Monte
Carlo
method
computation.
Keywords: Monte Carlo Simulation, Value at Risk, AVX, GPU

1 Introduction
1 Introduction
Value at Risk (VaR) is a commonly used method in the finance industry for assessing market
1 and,
Introduction
Value
at Monte
Risk (VaR)
a commonly
used
method
the finance
market
risk
Carloissimulation
is one
of the
most in
commonly
usedindustry
methodsfor
forassessing
calculating
VaR

risk
and, Monte
Carlo simulation
is one
the mosttocommonly
used methods
for calculating
VaR
in practice.
In today’s
large markets
it isofcommon
see large volumes
of transactions
occurring
Value
at Risk
(VaR) islarge
a commonly
used
methodtoinsee
thelarge
finance
industry
for assessing
market
in
practice.
In
today’s
markets
it
is
common
volumes
of
transactions
occurring
at any given time. This leads to the possibility of having considerable intraday fluctuations in
riskany
and,
Monte
Carlo
simulation
is one
of the most
commonly
used methods for calculating
VaR
at
given
This
leads toofthe
possibility
having
considerable
in
markets.
Thetime.
common
practice
calculating
theofVaR
at the
end of theintraday
day on afluctuations
daily basis [1]
in
practice.
In
today’s
large
markets
it
is
common
to
see
large
volumes
of
transactions
occurring
markets.
The
common
practice
of
calculating
the
VaR
at
the
end
of
the
day
on
a
daily
basis
[1]
is not sufficient for capturing these intraday movements. A real-time solution for calculating
at not
anysufficient
given time.
leads these
to theintraday
possibility
of having considerable
fluctuations
in
is
for This
capturing
movements.
A real-time intraday
solution for
calculating
markets. The common practice of calculating the VaR at the end of the day on a daily basis [1]
1
is not sufficient for capturing these intraday movements. A real-time solution for calculating
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.156

1

	

Utilizing AVX for Monte Carlo
Simulation
. . .et al. / Procedia
Liyanage,
Fernando,
Karunathilaka
and Perera
D.N.S.S.
Liyanage
Computer
ScienceArachchi,
108C (2017)
626–634

the VaR would be ideal since it would be able to capture the intraday fluctuations the daily
VaR fails to capture. However, the compute-intensive nature of the Monte Carlo simulation
poses a serious challenge in implementing an efficient enough real-time Monte Carlo Simulation
for calculating the VaR [2].
In this study we identified the performance bottleneck of the Monte Carlo simulation method
for VaR calculation and looked at utilizing Intel Advanced Vector Extensions (AVX) technology
found in modern Intel CPUs for improving the performance to see whether it would result in a
performance gain which makes it a viable option for computing the VaR in real-time. We compared the performance improvement gained by 3 methods (concurrent implementation, AVX +
OpenMP and GPU utilization) against the general implementation to see how effective AVX
can be for Monte Carlo simulation based VaR assessment. The financial portfolios considered
for VaR calculation were restricted to stock portfolios since our real-time VaR solution focused
only on stock portfolios for simplicity. But this should be extendable for other portfolios.
The rest of the paper is structured as follows. Section 2 describes the use of Monte Carlo
Simulation in computing VaR. Section 3 gives a brief overview of AVX and its uses while
section 4 delineates how GPUs can be used for Monte Carlo Simulation. Section 5 describes
the methodology followed and section 6 illustrates the results of the research followed by the
conclusion in section 7.

2

Monte Carlo Simulation based Value at Risk

Value at Risk was initially developed by Dickson H. Leavens and further developed later on
by Markowitz and Roy, William Sharpe and many others [3]. At present, Value at Risk is a
predominantly used method to measure the market risk [4] of financial portfolios comprising of
various assets such as bills, stocks and bonds etc. VaR is usually defined using three properties:
a base currency, a given time horizon and a given confidence level [5]. Given these, a person
interested in calculating the VaR would collect the losses/profits gained during the time horizon,
build a distribution from these data and take the relevant percentile for the given confidence
interval to determine the VaR.
There are three predominantly used methodologies to calculate the Value at Risk: Historical
Simulation, Parametric Method and Monte Carlo Simulation. Monte Carlo Simulation differs
from the other 2 methods since instead of using actual losses/profits to build the distribution,
it uses randomly generated prices based on an actual price to build the distribution, which then
will be used to determine the VaR. The Geometric Brownian motion equation given by Eq. 1
can be used to calculate random stock values.
St = St−1 exp ([µ −

√
σ2
]t + σZ t)
2

(1)

Where:
µ = mean of the distribution of the log returns
σ = standard deviation of the distribution of the log returns
Z = random value from the standard normal probability distribution
St = current stock value
From this simulation process, a specified number of simulated stock prices to calculate
market values and build a loss distribution out of those values which would then in turn be
used to estimate the VaR metric.
2

627

628	

Utilizing AVX for Monte Carlo
Simulation
. . .et al. / Procedia
Liyanage,
Fernando,
Karunathilaka
and Perera
D.N.S.S.
Liyanage
Computer
ScienceArachchi,
108C (2017)
626–634

In the next section we will take a brief look at GPU based techniques used in overcoming
the performance bottleneck in Monte Carlo Simulation.

3

Use of GPUs for Monte Carlo Simulation

Graphics Processing Units (GPUs) were first introduced and popularized by NVIDIA in order
to cater to demands for realistic graphics renderings [6]. Although GPUs were engineered
specifically for graphics processing, soon people started utilizing them for various data parallel
general purpose computing applications. Artificial intelligence and scientific computing are two
fields which makes heavy use of the data parallelization offered by GPUs. When first using
GPUs for general purpose computing, a major problem the programmers faced was that it
was hard to program solutions for general purpose applications since it required mapping the
problem in terms of graphics processing concepts. As a solution to this, NVIDIA came up with
a platform and a programming model called CUDA to give programmers making use of GPUs
for general purpose computing a better API and a set of tools.
GPUs were specifically designed to execute SIMD style instructions. This design allows
GPUs to efficiently solve some complex problems which can not be solved or harder to solve
using general purpose CPUs. In the present, GPUs are widely used in the finance industry for
computationally intensive problems like VaR estimation.
There have been studies conducted on the use of GPUs for optimizing Monte Carlo Simulation. Let us have a look at the approach taken by Nord and Laure in order to gain a better
understanding of how Monte Carlo Simulation can be parallelized using GPUs. The Monte
Carlo Simulation pseudo code used by Nord and Laure is given below [7].
for i = 1 to NM C do
Generate N = NU × NT matrix of Gaussian random numbers
Take N = N × Cholesky decomposition of C to correlate the numbers
for j = 1 to NU do
for k = 1 to NT do

2
Set Sj,k = Sj,k−1 exp(r − σ2 ∆T + σ ∆T Nj,k )
end
end
Let vi = payof f (S, strike)
end
Algorithm 1: Monte Carlo Simulation pseudo code
Where:
Sj,k = kth price of jth asset
NM C = No. of iterations
NT = No. of time steps
NU = No. of underlying assets of an option

∆T = Magnitude of a single time step
σ = Volatility
r = Interest rate

In their study, Norde and Laure had modified the above algorithm to fit to the CUDA programming model by removing the outer loop, breaking it down to kernel functions and assigning
them to the thread blocks in CUDA cores. But the innermost loop can not be parallelized due
to the inter dependency between two consecutive values inside the loop. Through this modifi3

	

Utilizing AVX for Monte Carlo
Simulation
. . .et al. / Procedia
Liyanage,
Fernando,
Arachchi,
Karunathilaka
and Perera
D.N.S.S.
Liyanage
Computer
Science
108C (2017)
626–634

cation of the algorithm into a GPU based one, the developers were able to gain a significant
performance gain, thereby providing quick responses on the risk measurement.
The next section gives a brief overview of Intel Advanced Vector Extensions, a new addition
to the x86 processors to further enrich their SIMD capabilities.

4

Advanced Vector Extensions (AVX)

AVX was introduced by Intel in their processors in order to further extend the Single Instruction Multiple Data (SIMD) capability of Intel CPUs [8]. The processor core has some special
registers called SIMD registers and it is possible to load data into these registers and do certain
operations within a single clock cycle. This technology was initially introduced as Streaming
SIMD Extensions (SSE) and with the improvement of the technology now it has evolved to
AVX/AVX2 programming. AVX/AVX2 has been reinforced with higher capacity of data loading and rich instruction set. Initial SSE could only load data up to 128 bits and now AVX/AVX2
is capable of loading up to 256 bits. Presently AVX is being evolved to AVX512 which will be
capable of loading up to 512 bits. But it is not yet as available as AVX/AVX2.

5

Methodology

There were several key technologies used in this study:
• JCUDA - is an API designed to interact with CUDA computations via Java [9]. It includes
Java bindings for NVIDIA CUDA and related libraries.
• Java Native Interfaces (JNI) - provides interoperability between Java and native applications/libraries. When a program (implemented in Java) needs to exploit hardware specific
performance improvements or system calls directly, JNI behaves as an intermediate layer
to communicate between the native program and the Java program[10]. In our case, it
was used for invoking the Monte Carlo Simulation implemented in C++.
• OpenMP - ”is a set of compiler directives and callable runtime library routines that extend
Fortran (and separately, C and C++) to express shared-memory parallelism” [11]. This
framework allows the developer to execute parallel algorithms while hiding the complexity
of the parallelism.
In this study we focused on utilizing Intel AVX for the Monte Carlo Simulation and comparing its performance with the Monte Carlo Simulation which was done using GPUs. Initially the
simulation was done based on Java since our real-time VaR computation solution was based
on Java. Later on, as the performance concerns came up, the simulation was improved by
employing multithreading and AVX (reinforced by OpenMP).
After closely scrutinizing our implementation of Monte Carlo simulation for real time VaR
calculation, a bottleneck was identified inside the stock simulation step. For risk estimation,
Monte Carlo Simulation simulates stock values based on the latest stock price of a particular
asset. The stock prices are simulated both horizontally and vertically. For the vertical simulation the Geometric Brownian Motion equation is used to simulate future stock values. This
is the vertical direction. Then we perform many such vertical simulations. This is referred to
as horizontal simulation and describes how many times the vertical simulation is performed.
It is also within this horizontal simulation where AVX and other techniques can be utilized to
decrease the computational intensity of the simulation process.
4

629

630	

Utilizing AVX for Monte Carlo
Simulation
. . .et al. / Procedia
Liyanage,
Fernando,
Arachchi,
Karunathilaka
and Perera
D.N.S.S.
Liyanage
Computer
Science
108C (2017)
626–634

Figure 1: AVX + OpenMP Processing Model

As depicted in Fig. 1, Hi (i = 1, 2, . . . , n) represents the initial state of the vertical simulation instance and the final row represents the final state of the corresponding Hi . So each
horizontal simulation instance (Hi ) is independent of each other, which means that the horizontal simulation instances can be done in parallel without harming the ultimate solution. AVX
provides the ability to perform a single arithmetic operation on multiple data points within a
single CPU cycle. But when considering the GPU technique, it only employs multiple threads
on multiple cores to complete the task. So the simulation algorithm has been designed in two
different ways for stock simulation in GPU and AVX + OpenMP. For the GPU implementation, algorithm was designed only considering the distribution of tasks (distributing horizontal
simulation instances) among multiple threads. But in the AVX design, instead of distributing horizontal simulation instances among threads, multiple horizontal simulation blocks were
loaded into SIMD registers and those blocks were distributed among the threads to perform
the simulation. According to Fig. 1 block A, B and C can be loaded into the SIMD registers at
once and each physical core can occupy each block of vertical simulation instances and execute
them parallely. Inside each physical core, single block of vertical instances (A, B, and C in Fig.
1) perform arithmetic operations utilizing a single CPU cycle under a single thread.
The current algorithm has been designed to load four double values into the single SIMD
register. (the AVX version used in this study can load up to only 256 bytes at once; which
implies that arithmetic operations for four double points can be done, within a single CPU
cycle).
5

	

D.N.S.S.
Liyanage
Computer
ScienceArachchi,
108C (2017)
626–634
Utilizing AVX for Monte Carlo
Simulation
. . .et al. / Procedia
Liyanage,
Fernando,
Karunathilaka
and Perera

6

Results and Discussion

All the test results were acquired running the implementation on a machine with the following
specification.
• CPU - Intel Core i7-6700HQ CPU @ 2.60GHz x 8
• Memory - 15.6 GiB
• GPU - GeForce GTX 950M/PCIe/SSE2 [640 CUDA cores]
The results in Table 1 were obtained by keeping the iteration count as a constant at a time
and changing the simulation technique. The time taken by each technique to complete the
corresponding number of iterations (as indicated in the first column of the table) was measured
in seconds. At each testing instance, simulation was isolated from the third party applications
in the context and full computational power was allowed to be used by the simulation process.
Each testing instance (time elapsed to complete corresponding iterations) was executed k
number of times and the average value from the observations was calculated. Number of trials
(k) required to measure the average execution time was justified as following. To have an
accuracy of 5% (r) with a confidence level of 95% (corresponding table value is z), the required
number of samples (k) was calculated using the sample mean (x̄) and the sample standard
deviation (s) as per Eq. 2,
100zs 2
)
(2)
rx̄
Table 1 includes the time elapsed to complete the given number of simulations in horizontal
direction as stated in the methodology and each horizontal direction includes 100 simulation
steps in the vertical direction. The results shown in Table 1 were graphically plotted and is
given by Fig. 2.
Table 2 presents the performance improvement of GPU, Java multithreading and AVX +
OpenMP technique against Java sequential implementation.
As it can be seen from Table 1 and Table 2, the time elapsed for the simulation was always
better than the general implementation when the AVX + OpenMP approach was used. The
k=(

Table 1: Calculation performance comparison after utilizing AVX + OpenMP
Java
Java + Multi AVX +
Iteration Count (n)
GPU (s)
Sequential (s) Threading (s) OpenMP (s)
1000
2000
5000
10000
20000
25000
50000
75000
100000
200000
300000
6

0.042
0.091
0.166
0.302
0.553
0.663
1.0224
1.753
2.3
4.412
7.054

0.067
0.078
0.144
0.179
0.231
0.341
0.414
0.574
0.647
0.927
2.01

0.027
0.029
0.043
0.053
0.082
0.093
0.178
0.248
0.306
0.604
0.892

0.251
0.261
0.281
0.288
0.298
0.309
0.331
0.365
0.414
0.589
0.734

631

632	

D.N.S.S.
Liyanage
Computer
ScienceArachchi,
108C (2017)
626–634
Utilizing AVX for Monte Carlo
Simulation
. . .et al. / Procedia
Liyanage,
Fernando,
Karunathilaka
and Perera

Figure 2: Performance comparison between GPU and AVX + OpenMP

Table 2: Performance improvement compared to the general Java implementation
Java +
AVX +
Iteration Count (n)
GPU (%)
Multi Threads (%) OpenMP (%)
1000
2000
5000
10000
20000
25000
50000
75000
100000
200000
300000

-59.52
14.29
13.25
40.73
58.23
48.57
59.51
67.26
71.87
78.99
71.51

35.71
68.13
74.10
82.45
85.17
85.97
82.59
85.85
86.70
86.31
87.35

-497.62
-186.81
-69.28
4.64
46.11
53.39
67.63
79.18
82.00
86.65
89.59

7

	

Utilizing AVX for Monte Carlo
Simulation
. . et
. al. / Procedia
Liyanage,
Fernando,
Karunathilaka
and Perera
D.N.S.S.
Liyanage
Computer
ScienceArachchi,
108C (2017)
626–634

multithreaded approach and the GPU-based approach are slower than the general implementation when the number of iterations is low. This is because the overhead costs involved in
these two methods greatly outweighs any speed gain. However, for iteration counts greater
than 10000, a significant speedup can be observed in all 3 methods, with the speedup of AVX
method reaching the 85% mark. The GPU approach starts to slightly outperform the AVX
approach once the iteration count hits the 200000 mark. The notably superior performance of
AVX and GPU can be attributed to the capability of parallel execution of the task. As the
iteration count increases, the sequential technique becomes more and more ineffective at completing the task whereas AVX and GPU approaches complete the task considerably efficiently
due to their ability to parallelize the computation. A divide and conquer approach is used
to divide the independent computations into small portions and these portions are processed
simultaneously.
For our purpose of calculating the VaR, we used an iteration count of 2500. According to
the results of this study, we are better off utilizing AVX for Monte Carlo rather than using
a GPU. According to Viebig et al., an iteration count of 5000 is sufficient to gain sufficiently
accurate results for financial economists [12] and increases of the iteration count up to 20000
did not result in a justifiable speed gain.
Results of the first few rows in the Table 2 have negative values since these instances consumed more time than their sequential implementation counterparts. The next section summarizes the findings and conveys the conclusion.

7

Conclusion and Future Work

Monte Carlo Simulation is a popular choice for calculating the Value at Risk for financial
portfolios. The nature of the simulation makes it possible to optimize the process by parallelizing
the simulation. Multithreading, GPU and AVX are 3 methods which can be used for task
parallelization. AVX is a relatively new technology introduced in the late 2000s and adopted in
the early 2010s. While GPUs have been around for some time now, their usage in computing
tasks other than graphics have become increasingly popular, due to their efficiency in handling
problems in areas such as scientific computing and artificial intelligence. While the usage of
GPUs for Monte Carlo Simulation has received a fair bit of attention, when looking at the
literature, the same can not be said of AVX. In this study, we compared the performance of
the aforementioned 3 methods with the general implementation of a Monte Carlo Simulation
for stock portfolios.
The results of the study showed that the GPU approach only starts to outperform the AVX
approach at iteration counts of 200000 and above. However, for iterations counts lower than
200000, the AVX approach was better suited; especially for iteration counts below 25000, the
AVX approach was notably faster than the other methods. As pointed out in the previous
section, an iteration count of 20000 or more would hardly be required in computing a VaR
metric. Therefore the AVX approach will be the better choice for estimating VaR measures,
especially in high frequency trading environments where the speed of calculation is of utmost
importance.
It should be noted that this study was done using one CPU and one GPU and both of these
were average consumer grade products. The next step in this study would be to run the tests on
different types of CPUs and GPUs to observe whether the results are consistent. Comparison
of the 2 methods at higher iteration counts than 100000 would also help to further investigate
the performance of these 2 methods.
8

633

634	

Utilizing AVX for Monte Carlo
Simulation
. . et
. al. / Procedia
Liyanage,
Fernando,
Karunathilaka
and Perera
D.N.S.S.
Liyanage
Computer
ScienceArachchi,
108C (2017)
626–634

References
[1] A. Mehta, M. Neukirchen, S. Pfetsch, and T. Poppensieker. Managing market risk: today and
tomorrow. Technical report, McKinsey & Company McKinsey Working Papers on Risk 32, 24,
2012.
[2] P. Glasserman, P. Heidelberger, and P. Shahabuddin. Efficient Monte Carlo methods for valueat-risk. IBM Thomas J. Watson Research Division, 2000.
[3] G. A. Holton. History of Value-at-Risk. Citeseer, 2002.
[4] M. Pritsker. Evaluating value at risk methodologies: accuracy versus computational time. Journal
of Financial Services Research, 12(2-3):201–242, 1997.
[5] Glyn A. Holton. Value-at-risk: Theory and practice, second edition.
[6] NVIDIA’s Next Generation CUDA Compute Architecture: Fermi. (n.d.). NVIDIA.
[7] F. Nord and E. Laure. Monte Carlo Option Pricing with Graphics Procesing Units. School
of Computer Science and Communication, KTH Royal Institute of Technology. Retrieved from
erwinl/ThesisNord.pdf, 2010.
[8] C. Lomont. Introduction to intel advanced vector extensions. Intel White Paper, 2011.
[9] Y. Yan, M. Grossman, and V. Sarkar. Jcuda: A programmer-friendly interface for accelerating
java programs with cuda. In European Conference on Parallel Processing, pages 887–899, 2009.
[10] E. Gabrilovich and L. Finkelstein. Jni-c++ integration made easy. CC Plus Plus Users Journal,
19:10–21, 2001.
[11] L. Dagum and R. Menon. Openmp: an industry standard api for shared-memory programming.
IEEE computational science and engineering, 5:46–55, 1998.
[12] J. Viebig, T. Poddig, and A. Varmaz. Equity Valuation: Models from Leading Investment Banks.
Wiley, John & Sons, 2008.

9

