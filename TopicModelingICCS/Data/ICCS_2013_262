Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 946 – 955

International Conference on Computational Science, ICCS 2013

Genetic Algorithm for the History Matching Problem
Carolina Ribeiro Xaviera,b,∗, Elisa Portes dos Santosc , Vincius da Fonseca Vieiraa,b ,
Rodrigo Weber dos Santosd
a DComp,

UFSJ, S£o Jo£o del Rei, Brazil
COPPE, Rio de Janeiro, Brazil
of Computer Science, University of Calgary, Calgary, Canada
d MMC, UFJF, Juiz de Fora, Brazil
b PEC,

c Dept.

Abstract
In this work we present a study of genetic algorithms for the automatic history matching problem of reservoir simulation. The
history matching process is an inverse problem that searches a set of parameters that minimizes the diﬀerence between the
model performance and the historical performance of the ﬁeld. This model validation process is essential and gives credibility
to the predictions of the reservoir model.
We studied a Parallel Genetic Algorithm implementation, several tests were performed and the preliminary results are
presented and discussed in this work.
Keywords: Reservoir simulation, History Matching, Optimization, genetic algorithm

1. Introduction
Reservoir simulation is a powerful tool that has been extensively used in reservoir engineering. It combines
physics, mathematics, reservoir engineering and computer programming. One of the main goals of the models
deals with the ability to predict the behavior of a reservoir. Unfortunately, the computational models depend
on many parameters and features of the reservoir and the prediction’s performance of a model depends on good
estimations of some physical properties, such as the permeability distribution of the reservoir. Several diﬃculties
arise during the validation of a model, since most of the oil reservoirs are inconveniently buried beneath thousands
of feet of overburden. Direct observations of the reservoir are available only at well locations that are often
hundreds of meters [8].
An alternative for model validation is the estimation of the relevant properties by History Matching[9]. The
History Matching process is an inverse problem that utilizes reservoir simulation to ﬁnd a set of parameters that
minimizes the diﬀerence between the model performance and the historical performance of the ﬁeld. This process
can be made manually or automatically.
Free-derivative methods based on Genetic Algorithms were proposed in[2]. This paper presents a large study
about the adjustment of algorithm’s parameters used to perform the automatic history matching in a 2D ﬂow
model.
∗ Corresponding

author. Tel.: +55-32-3373-3985 ; fax: +55-32-3373-3985.
E-mail address: carolinaxavier@ufsj.edu.br.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.260

947

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

The paper is organized as follows: Section 2 introduces the direct problem formulation and implementation.
Section 3 introduces the inverse problem theory and the methods implemented. Section 4 presents the methods
and the computer platform used for the tests. Section 5 and 6 present the results and conclusion of this work,
respectively.
2. Forward Problem
2.1. Theory
The problem treated in this paper is a two dimensional two-phase (water/oil) incompressible and immiscible
porous media ﬂow in a gravity-free environment [19]. The system of partial diﬀerential equations which governs
this ﬂow is derived from the law of mass conservation and the Darcy Law.
The law of mass conservation for both phases is written as
φ∂t (ρα sα ) + ∇.(ρα vα ) = Qα , where α = w denotes the water phase, α = o denotes the oil phase, φ is the porosity of
the porous medium, and ρα , sα , vα and Qα are, respectively, the density, saturation, volumetric velocity and ﬂow
rate in wells of the α-phase. The volumetric velocity (vα ) is given by the Darcy law:
vα = Kkrαμα(sα ) ∇pα , where K is the eﬀective permeability of the porous medium, krα is the relative permeability
of α-phase, which is a function that depends on saturation, and μα and pα are, respectively, viscosity and pressure
of the α-phase. In this work we consider that the capillary pressure is null, that is, pw = po . So, from now on we
will refer to pressure simply as p. We also have that sw + so = 1.
We introduce the phase mobility and transmissibility functions, respectively: λα (s) = krαμα(s) , T α (s) = Kλα ,
where s = sw from now on. The volumetric velocity can then be written as vα = −T α ∇p.
We assume that the phases density and viscosity are constant and get
{ φρw ∂t sw + ρw ∇vw = Qw

φρo ∂t so + ρo ∇vw = Qo .

(1)

Now we can divide the equations in 1 by ρα and sum both and get
{ φ∂t s + ∇vw = qw
where qα =

Qα
ρα

∇vt = qt .

(2)

is the ﬂow rate density of α-phase, qt = qw + qo and vt = vw + vo . Deﬁning total mobility as

λt = λw + λo we introduce the fractional ﬂow functions as f (s) =
{ φ∂t s − ∇( f (s)T t (s)∇p) = qw

Tw
Tt

=

λw
λt .

System 1 is then rewritten as

− ∇(T t (s)∇p) = qt .

(3)

To complete the model the boundary conditions must be speciﬁed. In this paper we consider no ﬂow boundary
condition, vα .ν = 0, x ∈ ∂Ω, where ν is the outer unit normal to the boundary ∂Ω of the domain Ω. Finally we
deﬁne the initial condition given by s(x, 0) = s0 (x), x ∈ Ω.
The forward problem treated on this paper is the system of partial diﬀerential equations given by 3 with the
boundary and initial conditions given above.
2.2. Implementation
The diﬀerential equations described in Sect. 2.1 are nonlinear and coupled. In this work the method used
to solve these equations is the so called IMPES. Our implementation of the IMPES methods adopts an adaptive
time step scheme. The basic idea of the IMPES method is to separate the computation of pressure from that of
saturation. The coupled system is split into a pressure equation and a saturation equation, and the pressure and
saturation equations are solved using implicit and explicit time approximation approaches, respectively. Decoupling the system 3 we get an elliptic equation for pressure given by (4) and a nonlinear hyperbolic equation for
saturation, given by (5).
−∇(T t (s)∇p) = qt .

(4)

φ∂t s − ∇( f (s)T t (s)∇p) = qw .

(5)

948

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

For the pressure computation, the saturation s in (4) is supposed to be known and 4 is solved implicitly for p.
In this work, the ﬁnite volume method was used for spatial discretization[11]. As mentioned before, the saturation
equation given by 5 is solved explicitly.
The IMPES method goes as follows: given s0 ; for n = 0, 1, ... we use (4) and sn to evaluate pn ; next we use
(5), sn and pn to evaluate sn+1 . To guaranty the stability of this equation the time step Δt must be suﬃciently small
which is an expensive requirement. To minimize this problem, we actually used an Improved IMPES method [12].
This method uses the fact that pressure changes less rapidly in time than saturation. Knowing this, it is appropriate
to take a much larger time step for the pressure than for the saturation.
Using the Improved IMPES method we have two diﬀerent time steps: Δtn for pressure and Δtn,l for saturation. Pressure pn corresponds to instant tn = 1<=i<=n Δti and saturation sn,l corresponds to instant tn,l =
tn + 1<= j<=l Δtn, j . We deduced the CFL conditions given by the next two equations. One for cells that have injecφ(1−so,res −sn,l )
Δtn,l n
|v | ≤ β2 ,
tor wells Δtn,l ≤ β qn,l (1− f (sn,li, j)) , where β1 > 1 and another to the other cells, given by max f (sm )
1 w
φΔm m
i, j
m
where 0 < β2 < 1 and m corresponds to interfaces where the ﬂow enters the block.
n+1
n
||
n
To control the pressure time step Δtn we calculate the pressure variation percentage V Pn = ||p ||pn−p
|| . If V P is
greater than a given V Pmax pressure time is reduced and if it is less then a given V Pmin , it is increased.
3. Inverse Problem
3.1. Theory
History matching is a well known inverse problem in the oil industry [8] . In the forward problem, the physical
properties of the reservoir are known and a simulator is used to calculate the production behavior of the reservoir.
In the inverse problem (history matching), the goal is to estimate plausible reservoir physical properties, given the
observed production data of a real reservoir.
Since physical properties of the reservoir cannot be directly measured in all extensions of the reservoir, the
history matching process is used to estimate such properties. The estimated properties are used as the simulator’s
parameters with the goal of predicting the reservoir behavior under diﬀerent production scenarios.
In this work, the inverse problem proposed aims to estimate the absolute permeability ﬁeld of a reservoir by
history-matching its production data, which is given by the oil rate and bottom-hole pressure measure at well
locations from time to time.
We denote by K the vector of permeability to be determined, by S (K) the vector of simulated data given the
parameter K and by O¯ the vector of observed data. The problem consists on searching K that minimizes the least
square formulation
f (K) = S (K) − O 2 .

(6)

The problem to solve is then formulated as a minimization problem
min f (K).

(7)

K

In the context of Evolutionary Algorithms, f (K) is called ﬁtness function on dealing with Evolutionary optimization algorithms. Its importance will be elucidated in the following sections. In this work we transform the
ﬁtness function in a relative error measurement, as follows
f (K) =

S o (K) − Oo
Oo 2

2

+

S p (K) − O p 2
,
Op 2

(8)

where subscripts o and p denote oil rate and bottom-hole pressure observations, respectively.
The following sections will introduce EAs and, more speciﬁcally, the Genetic Algorithms, method used in this
work to solve the minimization problem 7.

949

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

4. Evolutionary Algorithms
Evolutionary Algorithms (EA) are stochastic optimization methods inspired on Darwin’s Evolution Theory
and Natural Selection [15]. There are many diﬀerent variants of EAs and the common underlying idea behind
all these techniques is the same: given a population of individuals, the environmental pressure causes natural
selection (survival of the ﬁttest), which causes a rise in the ﬁtness of the population. Given a quality function
to be optimized, we can randomly create a set of candidate solutions, i.e., elements of the function’s domain,
and apply the quality function as an abstract ﬁtness measure - the higher/lower the better. Based on this ﬁtness,
some of the better candidates are chosen to seed the next generation by applying recombination and/or mutation to
them. Recombination is an operator applied to two or more selected candidates (the so-called parents) and results
one or more new candidates (the oﬀspring). This process can be iterated until a candidate with suﬃcient quality
(a solution) is found or a previously set computational limit is reached [4]. This process is exempliﬁed by the
pseudo-code 1.
begin
Initialize population;
Evaluate individuals;
while stop criteria not met do
Select individuals;
Recombine individuals;
Mutate individuals;
Evaluate individuals;
end
end
Algoritmo 1: EA pseudo-code
Selection, recombination and mutation are the three basic operators that steer EAs and the way they are
implemented is what usually diﬀer the variants of EAs techniques. The following sections will present a more
detailed discussion about these operators on GA.
4.1. Genetic Algorithms
Genetic algorithm was initially introduced by Holland as a means of studying adaptive behaviors [5]. However
they have largely been considered as optimization methods since then. GAs follow the EA scheme presented
previously. Traditionally, individuals are represented using a bit string, what requires a function to map each string
to the parameter set to be optimized. However, since GA’s invention, diﬀerent approaches have been proposed to
represent the individuals. The approach applied in this work is a ﬂoating point representation. It is an alternative
representation in optimization problems with real-valued continuous variables, as is the case in this work. With
this representation, there is no need for an explicit encoding mechanism. Each member of each population in the
genetic algorithm is a ﬂoating-point vector. The genetic operators (mutation and crossover) in this case do not
handle bit strings and are deﬁned in a diﬀerent manner.
Diﬀerent ways of performing selection, mutation and recombination have also been proposed so far. The
following sections will describe the operators used in this work.
4.1.1. Roulette Wheel Selection
In the roulette wheel selection approach an individual of the current population has a probability of being
selected that is proportional to its ﬁtness value. Thus, a more ﬁtted individual is more likely to be selected,
but a bad individual still has its chance, what is important to prevent the algorithm to quickly converge to local
minimum.
The probability Pi of selecting a particular individual i in a maximization problem is given by
pi =

fi
N pop
j=1

fj

,

(9)

950

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

where fi is the ﬁtness of individual i and N pop is the size of the population. When dealing with minimization
problems, which is the case of this work, instead of using f j we use f1j .
This selection process can be compared as spinning a roulette wheel where its sectors are set equal to the
probability of each individual. Figure 1 shows an example of this selection using 5 individuals.

Fig. 1. Roulette wheel selection example

4.1.2. Rank Selection
In the rank selection approach an individual of the current population has a probability of being selected that
is proportional to its rank in ordered population. Thus, a more ﬁtted individual is more likely to be selected, as
a roulette selection, and a bad individual has its chance, but more chance than the roulette wheel selection. This
approach intend to delay the convergence to local minimum.
4.1.3. Blend Crossover
The Blend-crossover (BLX-α) [20] generates two oﬀspring from two individuals (parents). It randomly picks
values that lie between two points that contain the two parents, but may extend equally on either side determined
by a user speciﬁed parameter α.
Algorithm 2 presents a pseudo-code of the Blend-crossover.
Input: parents p1 and p2
Output: oﬀspring o1 and o2
for each parameter i do
di = p1i − p2i
Xi1 = min(p1i , p2i ) − αdi
Xi2 = max(p1i , p2i ) + αdi
o1i = rand(Xi1 , Xi2 )
o2i = rand(Xi1 , Xi2 )
end
Algoritmo 2: Blend-crossover
In this work we used α = 0.36.
4.1.4. Mutation and Elitism
The mutation used in this work consists on perturbing a parameter pi of an individual in the following way
pi = (1 + a) ∗ pi , where a = rand(−0.5, 0.5).

(10)

When only oﬀspring vectors are allowed to advance, there is no guarantee that the best-so-far solution will
not be lost. Retaining the best-so-far solution is known as elitism and it plays an important role on the successful

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

951

convergence of the algorithm. In this strategy, the best individual(s) of the previous generation is kept in the next
generation if none of the oﬀspring is better than it. In this work this strategy is applied and the number of best
individuals kept is a parameter of the algorithm.
5. Methods
5.1. Implementation Details and Computer Platform
The numerical solution of the forward problem was implemented in C++. To solve the linear systems associated to the discretization of the Partial Diﬀerential Equations the PETSc library was used [16].
The GA was implemented in C++. The implementation also exploits parallelism via the MPI library and a
master-slave decomposition strategy. The master process implements all the GA operations and requests the slave
processes to perform the ﬁtness evaluation of the solution candidates, or individuals, of the current population.
Again, each ﬁtness calculation given by (6) involves the solution of the forward problem.
5.2. Numerical Experiments

Fig. 2. 5-spot

The reservoir simulation we consider in this work is the classical ﬁve-spot conﬁguration with 4 producer wells
in the corners of the reservoir and one injection well in its center (see Figure 2). The reservoir is a square of
sizes equal to 200m and 20m of depth. Each producer well produces a total of 100m3 per day. The reservoir’s
history is given by the oil production rate and bottom-hole pressure measured on the producer wells and on all
wells, respectively, on 350 days of simulation. The other parameters of the model are: porosity (0.2), relative
permeability, given by the Corey curve, irreducible water saturation (siw = 0.2) and residual oil saturation (sro =
0.2). The spatial discretization used was Δx = Δy = 7.4m.
In this work, three diﬀerent synthetic histories were generated from diﬀerent reservoirs that diﬀer only on the
number of rectangular regions with diﬀerent permeability values: a reservoir model with two diﬀerent permeability
blocks mapped as a 1x2 mesh (half by half), K = (47.82, 142.5) (natural ordering); a model with an uniform 2x2
permeability mesh, K = (39.12, 67.99, 52.85, 267.68); and an uniform 3x3 permeability mesh with
K = (43.22, 38.21, 55.76, 56.39, 95.61, 148.45, 36.84, 135.84, 261.57).
These three synthetic histories are the targets of three diﬀerent history-matching problems. Each one of these
inverse problem was solved by the GA, the algorithm were executed 10 times with diﬀerent initial guesses for
each diﬀerent parameters: generation number (100, 150 and 200 generations), population size (50, 100, 200 and
300 individuals), mutation rate (4%, 5% and 10%) and crossover rate (40%, 80% and 100%).
Convergence is achieved when a solution candidate m satisﬁes f (m) < 10−7 or a number of generations was
done.

952

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

# parameters
2
4
9

mean
7.306735e−07
1.106353e−03
1.868385e−02

std
6.114441e−07
5.452274e−04
8.164501e−03

best ﬁt
1.329985e−07
3.759703e−04
3.063829e−03

std
2.687352e−07
7.641197e−04
6.622596e−03

best ﬁt
3.251489e−07
1.287441e−05
3.270605e−03

Table 1. Results for best parameters for Roulette selection

# parameters
2
4
9

mean
6.688380e−07
6.012073e−04
1.958307e−02

Table 2. Results for best parameters for Roulette selection (2)

6. Results and Discussion
A previous work [21] shows that there are inﬁnitely many global minimum and that the shape of the function
is symmetric with respect to the line m = α(1, 1). The reason we have many global minimum lies in the following observation. Imagine two simulations where in the second one the permeability is given by K2 = βK1 ,
with K1 the permeability of the ﬁrst simulation. Let us further identify this simulations with s1 , p1 , K1 and
s2 , p2 , K2 . It follows that from (4) we have ∇( f (s2 )T t2 (s2 )∇p2 ) = ∇( f (s2 )K2 λt (s2 )∇p2 ) = β∇( f (s2 )K1 λt (s2 )∇p2 ) =
∇( f (s1 )K1 λt (s1 )∇p1 ). Using this in (5) we observe that for both simulations the saturation equation becomes exactly the same. Thus, the production history will be the same for these simulation with diﬀerent permeability
maps.
6.1. Roulette Wheel Selection
The table 1 presents the mean, standard deviation, and best ﬁt results for 10 executions with 120 generations
with 100 individuals each one, these with the roulette wheel selection, the mutation rate of 5% and the crossover
rate of 40%, parameters that obtain the best results.
The table 2 presents the mean, standard deviation, and best ﬁt results for 10 executions with 100 generations
with 100 individuals each one, these with the roulette wheel selection, the mutation rate of 4% and the crossover
rate of 40%, parameters that obtain the best results.
The graphics 3(a), 3(b), 4 show the evolution of the GAs through generations for the best execution with
roulette selection for 2, 4 and 9 parameters. We can see that the GA’s behavior is good, and in each generation the
GA converges very well.
We execute 10 diﬀerent combination for these parameters, but the more relevant results were presented in this
section. Increasing the number of individuals for generation, the execution was bigger, but the results did not show
better options, the number of generation did not show better too.
When we execute with crossover rate more than 50% the convergence to local minimum was faster with the
roulette selection, so we tested crossover rate with 80% and 100%, but the results was not good.
Changing the mutation rate, we did not can better results too. Increasing this rate we did not gain nothing, and
decreasing this rate the results converged for local minimum very faster.
6.2. Rank Selection
Because some doubts about the fast converge of many executions, we consider change the selection method,
because we observed that the same individuals were selected for generate many others individuals to the next
generations, beneﬁt this early convergence. We tested the rank selection, these results are present in table 3 and 4.
In table 4 presented the mean, the standard deviation and the best ﬁt result for 10 executions with parameters:
100 generations with 100 individuals each one, these with the rank wheel selection, the mutation rate of 5% and
the crossover rate of 80%, parameters that obtain the best results.

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

Fig. 3. (a) GA evolution for roulette selection with 2 parameters; (b) GA evolution for roulette selection with 4 parameters.

Fig. 4. GA evolution for roulette selection with 9 parameters

In table 4 presented the mean, the standard deviation and the best ﬁt result for 10 executions with parameters:
100 generations with 100 individuals each one, these with the rank wheel selection, the mutation rate of 10% and
the crossover rate of 80%, parameters that obtain the best results.
The graphics 5(a), 5(b), 6 show the evolution of the GAs through generations for the best execution with rank
selection for 2, 4 and 9 parameters. We can see that the GA’s behavior is not so good like the behavior when we
use rank selection, but in each generation the GA converges too.
7. Conclusion
This work presents a comparison of diﬀerent combination of set of parameters for genetic algorithm for the
automatic history matching problem of reservoir simulation. The computational model implemented was based on
the formulation of a two dimensional two-phase (water/oil) incompressible and immiscible ﬂow in a gravity-free
porous media.
The reservoir simulation considered was the classical 5-spot conﬁguration. The inverse problem proposed
aims to estimate the absolute permeability distribution of the reservoir by history-matching its production data.
The results shown that the best parameters are 100 generations with 100 individuals each one, mutation rate

953

954

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

# parameters
2
4
9

mean
4.910867e−06
1.573758e−02
3.675336e−02

std
1.133269e−05
1.469615e−02
9.982682e−03

best ﬁt
2.271081e−07
2.790160e−03
2.516513e−02

std
6.577154e−04
8.018912e−03
9.982682e−03

best ﬁt
6.146415e−06
3.684949e−03
2.516513e−02

Table 3. Results for best parameters for Rank selection

# parameters
2
4
9

mean
3.397207e−04
1.216816e−02
3.675336e−02

Table 4. Results for best parameters for Rank selection (2)

Fig. 5. (a) GA evolution for rank selection with 2 parameters; (b) GA evolution for rank selection with 4 parameters.

Fig. 6. GA evolution for rank selection with 9 parameters

of 5% and crossover rate of 40% for the roulette wheel selection and 80% for the rank selection, presented a little
better results in the roulette case.
For the future work we propose a implementation of others bio-inspired methods and a wide comparison of
these results present in this work. Other approach to be explored is a diﬀerent implementation of the paralleliza-

Carolina Ribeiro Xavier et al. / Procedia Computer Science 18 (2013) 946 – 955

955

tion, as a island, for example.
Acknowledgment
The authors thank FAPEMIG, CNPq and Capes for the ﬁnancial support.
References
[1] dos Santos Amorim, E.P., Goldfeld, P., Dickstein, F., dos Santos, R.W., Xavier, C.R.: Automatic history matching in petroleum reservoirs
using the tsvd method. In: ICCSA 2010. (2010) 475–487
[2] Soleng, H.: Oil reservoir production forecasting with uncertainty estimation using genetic algorithms. Evolutionary Computation (1999)
[3] Mitchell, M.: An Introduction to Genetic Algorithms. The MIT Press (1998)
[4] Eiben, A.E., Smith, J.E.: Introduction to Evolutionary Computing (Natural Computing Series). Springer (2008)
[5] Holland, J.: Adaptation in natural and artiﬁcial systems: An introductory analysis with applications to biology, control, and artiﬁcial
intelligence. (1992; First edition: 1975 The University of Michigan.)
[6] Storn R, P.K.: Diﬀerential evolution - a simple and eﬃcient adaptive scheme for global optimization over continuous spaces (1995)
[7] Kenneth Price, R.M.S., Lampinen, J.A.: Diﬀerential Evolution: A Practical Approach to Global Optimization(Natural Computing Series). Springer (205)
[8] Oliver, D.S., Albert, C.R., Liu, N.: Inverse theory for Petroleum Reservoir Characterization and History Matching. Cambridge University
Press, Cambridge (2008)
[9] Watson, A.T., Wade J.G., Ewing, R.E.: Parameter and system identiﬁcation for ﬂuid ﬂow in underground reservoirs. Conference on
Inverse Problems and Optimal Design in Industry, Philadelphia (1994)
[10] Brun, B., Gosselin, O., Barker, J.W.: Use of Prior Information in Gradient-Based History-Matching. SPE Reservoir Simulation Symposium, 13–23 (2001)
[11] Versteeg, H., Malalasekra, W.: An Introduction to Computational Fluid Dynamics: The Finite Volume Method (2nd Edition). Prentice
Hall, Harlow (2007)
[12] Chen, Z., Huan, G. and Li, B.: An improved IMPES method for two-phase ﬂow in porous media. Transport in Porous Media. Vol. 32,
pp. 261-276 (2004)
[13] Koederitz, L. F.: Lecture Notes on Applied Reservoir Simulation. World Scientiﬁc Publishing Company, 2005, p. 212
[14] Luenberg, D.G.: Introduction to Linear and Nonlinear Programming. Addison-Wesley, Reading (1973)
[15] Coley, D.A.: An Introduction to Genetic Algorithms for Scientists and Engineers. World Scientiﬁc Publishing Company, River Egde
(1997)
[16] Balay, S., Buschelman, K., Gropp, W.D., et al.: PETSc users manual. Technical Report ANL-95/11, Argonne National Laboratory (2002)
[17] Galassi, M., Davies, J., Theiler, J., et al.: GNU Scientiﬁc Library Reference Manual. Network Theory, Bristol (2006)
[18] Message Passing Interface Forum: MPI, a message-passing interface standard. Oregon Graduate Institute School of Science & Engineering (1994)
[19] Chen, Z.: Reservoir Simulation: Mathematical Techniques in Oil Recovery. Society for Industrial and Applied Mathematics, (2007)
[20] Eshelman, L.J., Schaﬀer, J.D.: Real-coded genetic algorithms and interval-schemata. Foundation of Genetic Algorithms 2 (1993) 187 –
202
[21] Santos, E.P., Xavier, C.R., Goldfeld, P., Dickstein, F., Weber Dos Santos, R.: Comparing genetic algorithms and newton-like methods
for the solution of the history matching problem. In: Proceedings of the 9th International Conference on Computational Science: Part I.
ICCS ’09, Berlin, Heidelberg, Springer-Verlag (2009) 377–386
[22] Santos, E.P., Xavier, C.R., Campos, R. S., Weber Dos Santos, R.: Comparing genetic algorithms and diﬀerential evolution for the
solution of the history matching problem. In: Proceedings of ICCSA 2012

