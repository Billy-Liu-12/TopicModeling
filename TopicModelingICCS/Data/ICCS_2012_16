Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 792 – 801

International Conference on Computational Science, ICCS 2012

On Modelling, Simulating and Verifying a Decentralized Mission
Control Algorithm for a Fleet of Collaborative UAVs
Pu Gao, Hong P. Liu *, David P. Gluch
a

Embry-Riddle Aeronautical University
600, S. Clyde Morris Blvd, Daytona Beach, FL, 32114

Abstract

It can be relatively easy to correctly design a centralized mission control algorithm for a fleet of UAVs to achieve
optimal mission efficiency. However, the fault intolerance of an algorithm can put the fleet at risk for missions in a
noisy communication environment. This paper presents a Decentralized Mission Control (DMC) algorithm for
coordinating a fleet of UAVs to accomplish a specific mission. The symbolic model of the UAV fleet configuration
and the software processes are applied to the Berkley UAV systems described in [1] and [10], which facilitate peerto-peer communication and environmental awareness. The design goal of DMC algorithm is that the UAVs work
either cooperatively to achieve the highest efficiency under normal communication modes or adaptively to guarantee
the safety of the UAVs under various fault modes. The communication protocol of DMC algorithm mostly relies on
message broadcasting in order to minimize the dependency on a ground station. The task assignment schema of the
DCM algorithm depends on the modes of the environment variables. It is derived from the Hungary Algorithm [11],
which attains the optimal assignment for equal numbers of tasks and agents. A formal method is used to verify the
safety and progress properties such as tolerance to faults and freedom from deadlocks. The real-time interactions of
the system are modeled as a nexus of UPPAAL automata and are verified against expected properties specified as a
list of temporal CTL queries. A C# program is used to simulate and measure the mission efficiency.
Keywords: Model Checking, Simulation, Coolaborative UVAs, Hungary Algorithm, UPPAAL, Computation Tree Logic.

1. Introduction
Recently, the application of a fleet of collaborating UAVs to accomplish high risk missions such as surveillance,
rescues, border patrol, and counterterrorism have appeared in a number of publications and in daily news [1, 3, 7,
10, and 13]. A typical fleet of UAVs includes a ground station that is responsible for providing new tasks,
coordinating information exchanges, and monitoring the status of UAVs. A ground station can override the control
of a UAV in case of emergency. It is relatively easy to design an optimal algorithm for controlling the mission of a
fleet of UAVs if we assume that the task distribution and fleet coordination can be reliably supervised by the ground

* Corresponding author. Tel.: 1-386-226-7741; fax: 1-386-226-6269.
E-mail address: liuho@erau.edu.
1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.085

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

793

station. However, the fault intolerance of the algorithm can put a fleet at risk for missions in noisy communication
environment. Hence, decentralized fleet control of UAVs equipped with environment awareness is advocated in
recent literature and field applications [1, 3, 7, and 10]. For example, each UAV of the Berkley UAV fleet [7, 10]
runs a supervisor process on an onboard PC104. When the supervisor process is properly programmed, the fleet is
capable of working autonomously and cooperatively based on the needs of a mission and its environment.
As an application of formal methods to the design of an innovative algorithm, this work includes the following
three contributions. Firstly, this paper presents a Decentralized Mission Control (DMC) algorithm that can be
incorporated into supervisor processes to coordinate a fleet of three UAVs for a hypothetical mission with three
tasks. With minor modifications, the algorithm is scalable to a larger fleet of UAVs and additional tasks. The
algorithm is most efficient under normal communication modes and tolerant to noisy communication environment.
It compromises efficiency when safety concerns take precedence. The top level component of the DMC focuses on
the communication protocol among the UAVs in the virtual flight environment, assuming that not all
communication channels are reliable. The protocol reduces the dependency on the payload communication to the
remote ground station and gives the task distribution and flight controls to individual UAVs. The low level
component of the DMC addresses the optimal task assignment algorithm based on the static Hungary Algorithm.
Hence, the UAVs can either work cooperatively for efficiently fulfilling the mission in normal communication
mode, or adaptively for guaranteeing the safety of UAVs in various fault communication modes. Secondly, a formal
method is used to verify the safety and progress properties such as tolerance to faults and freedom from deadlocks.
The real-time interactions of the system are modeled as a nexus of UPPAAL automata and verified against the
expected properties specified as a list of temporal CTL (Computation Tree Logic) queries. The complexity of the
real-time interaction of components makes it difficult if not impossible to check the correctness of a design by using
traditional walk through approaches. Thirdly, a program written in C# is used to simulate and measure the efficiency
of dynamic task distributions and mission fulfillment under either normal or faulty modes.
This project is motivated by the work described in [14 and 2]. The authors in [14] apply formal methods and
UPPAAL to verify the protocols of TTCAN in flight-control system. The work in [2] provides a framework for
applying modeling and model-checking tools to implement the project presented in this paper. The relevant work on
formal methods and model-checking can be found in [4, 6, 8, and 9]. The symbolic model of our UAV fleet
configuration imitates the Berkley UAV systems described in [1] and the symbolic software processes of our model
are similar to those specified in [10]. The abstraction of hardware and software entities is influenced by the work
presented in [3 and 7]. The heuristic algorithm is inspired from the locally optimal routing and navigation algorithms
found in [3, 10, and 13]. Those empirical studies demonstrate that heuristics-based control algorithms can
successfully coordinate the mission fulfillment and flight navigation. The Hungary Algorithm in [11] helps us to
attain an optimal task assignment in normal communication mode.
The rest of the paper is organized as follows. Section 2 briefly introduces the system requirements and model
assumptions based on the configuration of Berkley UAV system ([10]). Section 3 describes the UPPAAL model that
includes the templates for communication protocol and task calculation algorithm. Section 4 discusses the use of
UPPAAL to verify and simulate requirements for safety and effectiveness. Section 5 provides the simulation for
mission efficiency by a stand-alone C# program. Section 6 concludes the paper and summarizes future work.
2. UAV System Requirement and Model Assumption
The symbolic model of the UAV fleet configuration and the software processes are similar to the Berkley UAV
systems described in [1, 7 and 10], which facilitate the peer-to-peer communication and the environment awareness.
The relevant components of the system are a Ground Station, a Sig Rascal 110 unmanned aircraft, a Piccolo avionics
package and an onboard PC104 computer [7, 10]. The Piccolo communicates with the ground station by using a 900
MHz VHF radio link and their onboard aircrafts by using Aircraft to Aircraft (A2A) Wireless over the 802.11b ad
hoc network. PC104 system is linked to the Piccolo to receive mission and supervise the Piccolo to complete the
flight navigation and low level tasks. Figure 1 shows the UAV system architecture from [10].
A central Datahub links components to transfer data or commands. Piccolo seeks a task whenever the aircraft is
not in a work state. A received mission is sent to the Supervisor process, and is communicated to other UAV(s) by
A2A Wireless. After communicating with other aircraft, the supervisor will pick one task to implement. The Piccolo
also sends message to other UAVs and the ground station in case the mission is changed.

794

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

In this paper, we will describe, analyze, and verify the DMC algorithm that may potentially coordinate a fleet of
3 UAVs to complete a multiple-task mission safely, effectively, and efficiently. Here are some major assumptions
for this system:
(1) The Ground station is only responsible for sending a mission.
(2) Each mission contains 3 tasks. Each individual UAV can receive the mission from the ground station.
(3) One UAV can only finish one task in one mission, and one task only needs one UAV.
(4) The system focuses on the communication algorithm, an emergency situation (unsafe) for a UAV occurs when
its communication is down, i.e. it fails to receive a mission from the ground station or message from other UAV
members, or fails to send out a message. We realize that the A2A communication network is not completely
reliable when UAVs fly in a remote area and noisy environment.
(5) The UAV in an emergency cannot complete the task. It has to fly back to base immediately.

Fig.1. Berkley UAV Architecture

3. UPPAAL Models
Our UPPAAL model abstracts the system as hardware entities, communication channels, and a task assignment.
It includes two UPPAAL templates for the hardware entities - one for the ground station and one for each UAV. Our
model considers all nine communication channels (each UAV can communicate to the other two UAVs and the
Ground Station) for message passing and broadcasting. As a mission-critical system, it also includes a mission
composed of three tasks. The only parameter for considering the optimization of task distribution is the distance
from the individual UAV to the locations of the three tasks. The communication protocol is modeled as a UPPAAL
schema that coordinates the UAVs to fulfill a mission based on the communication modes. While some templates
have their own local clocks, we use TIME as a global clock to synchronize the activities of the model.
3.1. Ground Station
GroundStation
The first
ground station. Based on assumption (1), the only duty the ground station has is to broadcast the mission to the fleet.
We define 2 states and one broadcasting event as figure 2 shows.

Fig. 2: UPPAAL Template of Ground Station,

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

795

assigning
station to the UAV fleet. As the initial event of the whole system, it triggers the ground station transiting from
NoMission
Progressing
NoMission
back
from all 3 UAVs.
3.2. The UAV and Intent Generator
The second template is an abstract model of the UAV (see Fig 3). The UAV fleet contains 3 UAVs. Each is an
instance of the UAV template. A UAV initially is in the Idle state, and seeks a mission assignment until it receives
one. Once a mission is received, the UAV stays at SeekingMission state and sends an event intentGenerating.

Fig. 3: UPPAAL Template of UAV

intentGenerator
igure 4 shows. It starts to run
intentGenerating
task intents of each UAV based on the distance between the particular UAV and all 3 targets. The nearer is the
is a
target. The
sequence of 3 intents in order of the first preference to the last preference. Since we have 3 UAVs, the final intent
variable meta int intent[3][3] is a 3 by 3 matrix, Each row index identifies the particular UAV and column index
identifies the order of preferences. The value of the matrix represents a particular target. For example,
intent[3][2]=1, means that the third UAV has the target 1 as its second preference.
Once the intents are generated, the UAV broadcasts the intents with a time stamp to the ground station and other
UAV(s). Consider the real signal environment, we assume that there is a 20% chance that the communication fails.
This may occur when the UAV is not able to receive signals in a noisy environment. We use a global clock TIME to
synchronize our model. We ignore the time elapsed for the intent generation and signal broadcasting and assume the
fleet should share intents at latest of 3 time-units. The UAV that fails to receive any message from either the ground
station or other UAVs will be seen as lost and goes into emergency state, but keep broadcasting its location.

796

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

Fig. 4: UPPAAL Template of Intent Generator

3.3. The Communication of the UAV Intent
After several times of intent communication, the fleet will find out which UAV(s) is still alive (safe for working), which is
already in emergency. In the UPPAAL model, we ignore the communication time, and randomly decide if the UAV is alive by
using a random variable livability As shown in figure 5, this variable is called twice. First, we check to see if the UAV is able
to receive mission. Second, we check to see if the UAV is able to send out its intents.
In an emergency, a UAV will fly back to base. All the healthy UAV(s) will get the same intent matrix which includes all 3
intent sequences, such as:
1 2 3

2 3 1
0 0 0
The first and second rows represent the intent sequences of the 1 st and 2nd UAV in decreasing preference order,
respectively. The third row represents the 3rd UAV in emergency.
3.4. Task Calculator

The fourth template is the task assignment algorithm called taskCalculator as shown in figure 5. It completes
intentGenerator
taskCalculator
tasks selection for the
PC104 of the Berkley UAV. In our model, this calculation is decentralized into each UAV. A UAV has to trigger
lost
intentSending
either emergency or alive mode. Once all UAVs are
Emergency
TaskCalculation
taskCalculator to calculate the task assignment of the fleet. Each UAV will pick its own task from the result of the
calculation. It is important to notice that all three instances share exactly the same algorithm and the same global
variables, which abstract the datahub in figure 1. Hence, a unanimous decision can be achieved even though the
status and assignments to the three UAVs are different.
The algorithm for task calculator is called Conditional Optimal Algorithm (COA). It is derived from the Hungary
Algorithm [11]. The Hungary algorithm is a polynomial time algorithm with
worst time complexity that
attains the optimal solution to assign n agents to n tasks when the cost matrix is given. Open source code
implementations of this algorithm are available in popular programming languages such as C/C++ and Java. In our
project, the number of agents and tasks equal three for simplicity and clarity. The algorithm is scalable to a larger
fleet of UAVs and more tasks with minor modifications. The COA algorithm is optimal on the condition of normal
communication modes. To warrant the fault tolerance, it compromises the efficiency when the safety concern takes
precedence. The Based on the assumption, each UAV can only have one target, and vice verse. The algorithm can
be abstracted as an integer optimization problem. The integer array taskCalculation(intent, mode) has as its input
the intent matrix as well as safety modes and its output as an array of three integers for task assignments. An
objective function Intent_Score(intent, task) is defined to calculate the total points for the task assignments. Using
the intent matrix given by the intentGenerator and the task assignment, any UAV that is assigned to its 1st intent can
earn 3 points for the system, 1 point to the 2 nd intent, and no points to the 3rd intent. The algorithm is intended to
maximize the Intent_Score. For example, if all three UAVs are in safe mode, we compare all 6 different task

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

797

assignments and find which one maximizes the total points. When there are only three tasks, there is no clear
advantage to use the Hungary Algorithm than a simple calculation of all 6 permutations. However, the idea of
computing the scores of direct permutations does not scale well when the number of tasks and agents increases to a
fairly large number. For example, if we have 10 tasks and 10 UAVs, the permutation will be 3628800, which is
much greater than
, the worst time complexity of the Hungary algorithm. As figure 5 shows, the 4 functions
tasks0(), tasks1(), tasks2(), and tasks3() are defined to implement the algorithm in 4 different modes when there are
0 to 3 UAVs alive.

Fig. 5: Template for Task Calculation

If the multiple assignments attain the same highest score, then, we use the ID numbers of the UAVs to break the
tie. The UAV with a smaller ID precedes the UAV with a greater ID. The one on the highest precedence will get its
most preferred target, and the other UAV(s) will do the selection by using the same rule. Example 1: Task [1, 2, 3],

Intent

1 2

3

1 2
1 2

3
3

When all 3 UAVs have the same intent sequence [1 2 3], there are 6 ways to assign the tasks to the fleet and each one will get
6 points [1 2 3 || 1 3 2 || 2 1 3 || 2 3 1 || 3 1 2 || 3 2 1]. So the UAV that has the smallest ID, UAV_1, selects its first choice, which
is target_1. After the 1st target is taken by UAV_1, UAV_2 and UAV_3 both prefer target_2 to target_3. So, UAV_2 will get
target_2 and UAV_3 will get target_3. Example 2: Task [2, 3, 1],

Intent

2

3 1

1

2 3
3 1

798

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

Two target assignments [2, 1, 3] and [3, 1, 2] can attain 7 points. UAV_1 takes precedence and gets its first choice target_2.
Then, UAV_2 gets its first choice target_1. UAV_3 chooses last and gets its second choice target_3.

3.5. Discrete Time Simulation:
Three integer arrays of global variables and three equations are defined in the algorithm. An array of task[3] is
defined to store the actual target of each UAV. Equation task[i]=j, j = 1, 2 or 3, represents that the UAV[i] flies to
target j for i = 1, 2 and 3, respectively. When j = 0, it represents that the corresponding UAV needs to fly back to
base. The second array timeOnWay[3] is defined to represent the time consumed for each UAV to fly to its assigned
target. Equation timeOnWay[i]=j means that UAV[i] takes j units of time to fly to its target, where j takes an
nondeterministic integer interval [7, 8], [12, 13], [17, 18]. The last array workingTime[3] defines the working time
of each UAV for the task. Equation workingTime[i]=j means that UAV[i] takes j units of time to complete the task,
where j takes a nondeterministic integer interval in the range of [1, 3]. Nondeterministic integers are used to
simulate an unpredictable mission environment.
3.6. Work Complete
In the model, we define an array of Boolean variables Done[3] that is initialized as 0 (false). Once any task is
done, the UAV changes the corresponding element in this vector to be 1 (true) and UAV sends a signal back to
inform the ground station so that the UAV may receive its next task. The same signal is sent back to ground station
if a UAV arrives at the base in emergency mode. The ground station is able to start a new mission when it receives
three back signals.
4. Model Checking and Simulation by UPPAAL
We use the UPPAAL model verifier to check if the model is free from deadlock. Then we check whether the
communication protocol satisfies a representative set of requirements. Finally, we use the UPPAAL simulator to
simulate the runtime behavior of the model. A list of Computation Tree Logic (CTL) queries are specified from the
safety and progress requirements as following.
(1) Reachability The fleet may reach all 4 modes, losing 0 to 3 members. The 4 queries below should return true.
E<> taskCalculator.AllWorking
E<> taskCalculator.lost1
E<> taskCalculator.lost2
E<> taskCalculator.AllLost
(2) Safety: Each UAV in emergency mode should go back to base without being assigned another target. The two
queries should return true.
A[] u1.Emergency imply tasks[0] == 0
A[] u1.GoBase imply tasks[0] == 0
(3) Safety: The following query should be false to verify that different UAVs cannot get the same target.
E<> forall (i : ID) forall (j : ID) (tasks[i] == tasks[j]) && (tasks[i] != 0) && ( i != j)
(4) Progress: Each UAV that receives a particular task has to fly to the corresponding target. All 3 queries below
should be true.
A[] u1.FlyToTarget_1 imply tasks[0] == 1
A[] u1.FlyToTarget_2 imply tasks[0] == 2
A[] u1.FlyToTarget_3 imply tasks[0] == 3
Figure 6 shows the results from the verification of the queries above. None of the UAVs in emergency mode get
other tasks. All UAVs in alive mode will get different tasks and a new mission can be assigned to the fleet once all
the UAVs have returned to base.

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

799

Figure 6: CTL Queries Checking Result
5. Quantitative Analysis of the Efficiency of Algorithm
The state explosion problem requires that we significantly scale down the states by abstraction. Our UPPAAL
model is relatively small, but has over a billion states. The result has illustrated the safety and effectiveness of the
conditional optimal algorithm. However, it is insufficient to provide quantitative analysis of the efficiency since the
total distance of flights is not considered. As a complementary analysis, we wrote a program in C# to investigate the
efficiency of dynamic task distributions and mission fulfillment under either normal or faulty modes. Users can
choose three options to configure the objective functions for task assignment. The three blue blocks on the map
represents the 3 targets and the three triangles represent the three UAVs. The red UAV ranks first, the green one
second and the yellow one last when one has to take precedence to break a tie of two task assignments.

Figure 7: UAV Simulation by C# Program

800

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

Intention Based COA: The first option uses exactly the same Conditional Optimal Algorithm. It is called
Intention Based COA. The following two other options considers the total flight distance or/and the UAV intentions.
Distance Critical COA: When we use the distance in flights, the optimization problem can minimize the total
distances to three targets, instead of the Intent_Score in section 3.4. A problem of Distance Critical COA is that it
neglects the limit of flight distance of a single UAV and it may jeopardize one UAV by allowing it to fly too far,
while the other two fly only very short distances.
Weighted COA: This algorithm tries to balance the distances of the individual flights and total flight distance. It is a
Weighted COA. We define a weighted penalty function

P(intent,dist[3])=

3

w[i]dist[i]

i 1

dist[i] equals to the distance of UAV[i] to its assigned target and w[i] =1, 3, or 7 depends on if the UAV[i] gets its first, second
or the last choices, for i = 1, 2, or 3 respectively. The objective of this algorithm is to find the assignment that minimizes the
penalty function P above. It not only considers the total distances, but also encourages the UAVs to get more preferring targets.
Hence, it balances the flight distances of all UAVs and reduces the risk that one UAV flies to a target too far away.
As for example, we randomly defined a mission: Target A = (100, 200), Target B = (300, 350), Target C = (200, 400). The

two tables Table 5.1-5.2 below show a list of 5 task calculation results when the settings of the environment
livability are equal to100% and 50%, respectively. The last three columns of the tables are the task assignments
under three different algorithms, the Weighted COA, the Distance Critical COA and the Intention Based COA,
respectively.

1

Distance to Red
A
B
C
345 169 257

Distance to Green
A
B
C
197 425
399

Table 5.1: Environment Livability = 100%
Distance to Yellow
Intent Sequence
A
B
C
235
335 346
R=BCA, G=ACB, Y=ABC

Weighted
COA
BCA

Distance
COA
BAC

Intention
COA
BAC

2
3

358
165

110
211

216
209

371
272

180
260

275
301

143
121

186
431

99
356

R=BCA, G=BCA, Y=CAB
R=ACB, G=BAC, Y=ACB

CBA
CBA

BCA
CBA

BAC
ABC

4
5

455
104

253
335

355
239

59
194

317
262

231
272

294
119

425
342

435
387

R=BCA, G=ACB, Y=ABC
R=ACB, G=ABC, Y=ACB

BCA
CBA

BAC
CBA

BAC
ABC

ID
1

Distance to Red
A
B
C
146 455 384

Distance to Green
A
B
C
217 99
109

Table 5.2: Environment Livability = 50%
Distance to Yellow
Intent Sequence
A
B
C
0
0
0
R=ACB, G=BCA, Y=Base

Weighted
COA
ABO

Distance
COA
ABO

Intention
COA
ABO

2
3

340
303

174
26

115
91

0
139

0
177

0
145

343
271

136
424

105
425

R=CBA, G=Base, Y=CBA
R=BCA, G=ACB, Y=ABC

BOC
BCA

COB
BCA

COB
BAC

4
5

267
0

196
0

246
0

0
0

0
0

0
0

0
0

0
0

0
0

R=BCA, G=Base, Y=Base
R=Base, G=Base, Y=Base

BOO
OOO

BOO
OOO

BOO
OOO

ID

Figure 7 shows the application of program UAV simulator. In this application, after we assign a new mission, load the map
and set the locations for 3 targets and the environment livability, the intents sequences of each UAV and their distances between
each target will be displayed on the Intent and Status Monitor. The Task Monitor panel displays the task assignments according
to the chosen algorithm. Table 5.3 summarizes the average intent scores, distances and penalty scores of all three algorithms of
our simulations.
Table 5.3: Average Score

Scores
Algorithm
Intention Based COA
Distance Critical COA
Weighted COA

Intent
Score
5
6
6

Total distances
436
403
462

Penalty
Score
-1166
-1915
-2214

Simulations demonstrated that the best assignment for the Intent Based COA maybe not the best assignment for the Distance
Critical COA. The Weighted COA balances the distance and their UAV intention score and yields the most efficient task
assignments more frequently.

Pu Gao et al. / Procedia Computer Science 9 (2012) 792 – 801

801

6. Conclusion and Future Work
Our work presents a decentralized control algorithm for improving the mission efficiency of an UAV fleet where
the safety of the fleet is the highest priority. UPPAAL is used to model the system and verify requirements. In
addition to model checking, we implemented a simulation program to investigate the efficiency of several related
algorithms. Our work is inspired by [14] where Wu, et al. present work on Modeling and Verifying the Application
Protocols of TTCAN in a Flight-Control System with UPPAAL. Relevent work of applications to UAVs can be
found in [1, 3, 5, 7, 10, and 12]. The Conditional Optimal Algorithm is influenced by the Hungarian algorithm [11]
for generic task assignment optimization. The Hungarian algorithm is modified for UAV mission control.
This work followed a software engineering process proposed in [4, 5, 6, and 8]. We used UPPAAL to design a
little, then verify and simulate a little until the model was refined to meet safety and effectiveness requirements. In
future work, we will explore how to incorporate formal model verification within the Open Source AADL Tool
Environment (OSATE, www.aadl.info). OSATE is a modeling and analysis environment for the Architecture
Analysis and Design Language. This will enable users to investigate the running time behavior of an AADL model
under the OSATE platform.
References
1. Allison Ryan, Xiao Xiao, Sivakumar Rathinam, John Tisdale, Marco Zennaro, Derec Caveney, Raja Sengupta, J. Karl Hedrick.,
Collaborative flight demonstration of three unmanned aerial vehicles., AIAA Conference on Guidance, Navigation, and Control, Keystone, CO,
2006.
2. Andre L. N. Muniz, Aline M. S. Andrade, George Lima.. integrating UML and Uppaal for designing, specifying and verifying componentbased real-time systems. DOI 10.1007/s11334-009-0103-6, 2009
3. Anouck R. Girard, Adam S. Howell and J. Karl Hedrick., Border Patrol and Surveillance Missions using Multiple Unmanned Air Vehicles.
43rd IEEE Conference on Decision and Control. Atlantis, Paradise Island, Bahamas, 2004.
4. Committee, S. E. 1012TM IEEE Standard for Software Verification and Validation. IEEE Computer Society. New York, 2005.
5. Daniel D. Dvorak, Michel D. Ingham, J. Richard Morris, John Gersh. (n.d.). Goal-Based Operations: An Overview.
6. David P. Gluch, Charles B.Weinstock. Model-Based Verification: A Technology for Dependable System Upgrade. CMU/SEI-98-TR-009.
7. Derek Caveney, Raja Sengupta. Architecture and Application Abstractions for Multi-Agent Collaboration Projects.
8. Grace A. Lewis, S. C.-D. (2001). Model-Based Verification: Analysis Guildelines. Software Engineering Institute technical note:
CMU/SEI-2001-TN-028, December, 2001.
9. Harel, D. (2001). From Play-In Scenarios to Code: An Achievable Dream. 2001 IEEE.
10. John Tisdale, Allison Ryan, Marco Zennaro, Xiao Xiao, Derek Caveney, Siva Rathinam, J. Karl Hedrick, Jaja Sengupta. (2006). The
Software Architecture of the Berkeley UAV Platform. Proceedings of the 2006 IEEE. Munich, Germany.
11. Ansras Frans,
A tribute from Hungary, TR-2004-14, Published by the Egrerv´ary Research Group,
P´azm´any P. s´et´any 1/C, mH 1117, Budapest, Hungary. Web site: www.cs.elte.hu/egres, ISSN 1587 4451.
12. M. Valenti, T. Schouwenaarsy, Y. Kuwataz, E. Feronx and J. How, J.Paunicka. Implementation of a Manned Vehicle - UAV Mission
System. AIAA Guidance, Navigation, and Control Conference and Exhibit. Providence, Rhode Island., 2004.
13. Scott D. Hanford, Lyle N. Long, Joseph F. Horn., A Small Semi-Autonomous Rotary-Wing Unmanned Air Vehicle (UAV). American
Institute of Aeronautics and Astronautics, Infotech@Aerospace Conference, 2005.
14. Xiao WU, H. L. (2009). On Modeling and Verifying of Application Protocols of TTCAN in Flight-Control System with UPPAAL. 2009
International Conference on Embedded Software and Systems. Xi'an: IEEE Computer Society.

