An Efficient Replicated Data Management Approach for
Peer-to-Peer Systems
J.H. Abawajy
Deakin University,
School of Information technology,
Geelong, Victoria, 3217 Australia

Abstract. The availability of critical services and their data can be significantly
increased by replicating them on multiple systems connected with each other,
even in the face of system and network failures. In some platforms such as peerto-peer (P2P) systems, their inherent characteristic mandates the employment of
some form of replication to provide acceptable service to their users. However,
the problem of how best to replicate data to build highly available peer-to-peer
systems is still an open problem. In this paper, we propose an approach to address the data replication problem on P2P systems. The proposed scheme is
compared with other techniques and is shown to require less communication
cost for an operation as well as provide higher degree of data availability.

1 Introduction
Peer-to-peer (P2P) network systems are one of the important and rapidly growing
distributed system paradigms in which participants (the peers) rely on one another for
service, rather than solely relying on dedicated and often centralized servers. The
relationships among the nodes in the network are equal, nodes may join and leave the
network in an ad-hoc manner and communication and exchange of information is
performed directly between the participating peers. There is a growing research and
industrial interest on peer-to-peer (P2P) systems. The success of P2P systems is due
to many potential benefits such as fault-tolerance through massive replication; scaleup to very large numbers of peers, dynamic self-organization, load balancing, and
parallel processing. Examples of P2P systems include Napster [3], Gnutella [4], and
KaZaA[5] and Freenet [6].
Recently, peer-to-peer systems have become popular mechanism for large-scale
content sharing. It is well known that techniques to increase the resilience and availability of stored data are fundamental to building dependable distributed systems.
However, unlike traditional client-server applications that centralize the management
of data in a few highly reliable servers, peer-to-peer systems distribute the burden of
data storage, computation, communications and administration among thousands of
individual nodes. Data management in this context offers new research opportunities
since traditional distributed database techniques need to scale up while supporting
high data autonomy, heterogeneity, and dynamicity.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 457 – 463, 2005.
© Springer-Verlag Berlin Heidelberg 2005

458

J.H. Abawajy

Generally P2P systems consider the data they offer to be very static or even readonly [9]. However, advanced peer-to-peer applications are likely to need more general
replication capabilities. For example, a patient record may be replicated at several
medical doctors and updated by any of them during a visit of the patient, e.g. to reflect
the patient’s new weight [8]. Other typical applications where new data items are
added, deleted, or updated frequently by multiple users are bulletin-board systems,
shared calendars or address books, e-commerce catalogues, and project management
information [9]. Also, the inherent characteristics of peer-to-peer systems, require
them to employ some form of replication to provide acceptable service to their users.
For example, the erratic behaviour of online availability and the complete lack of
global knowledge coupled with the absence of any centralisation makes P2P environments unreliable [9]. Ulike traditional distributed systems, the individual components of a peer-to-peer system experience an order of magnitude worse availability.
This is because peer-to-peer systems are characterized by susceptibility to failure
(e.g., node may be switched off), join and leave the system, have intermittent connectivity, and are constructed from low-cost low-reliability components. The study of a
popular peer-to-peer file sharing system found that the majority of peers had availability rates of under 20% [1].
While much of the attention in the peer-to-peer systems research has been focused
on the issues of providing scalability, free-rider problem or routing mechanisms
within P2P networks, the resilience and availability of the data has so far seldom been
mentioned. Therefore, how best to replicate data to build highly available peer-to-peer
systems is still an open problem. In most peer-to-peer (P2P) systems data is assumed
to be rather static and updates occur very infrequently. For application domains beyond mere file sharing such assumptions do not hold and updates in fact may occur
frequently. Therefore, data replication in the presence of updates and transactions
remains an open issue as well.
In this paper, we discuss an extension of our previous work on replica placement
and management [2] to handle a system that support data replication in a transactional
framework for weakly connected environments such as P2P systems. The proposed
scheme uses quorum-based protocol for maintaining replicated data and shown to
provide both high data availability and low response time. The proposed approach
imposes a logical three dimensional grid structure on data objects based on a box
shape organization and uses a sense-of-direction approach (SODA) for both read and
write operations. We show that the proposed approach presents better average quorum
size, high data availability, low bandwidth consumption, increased fault-tolerance and
improved scalability of the overall system as compared to standard replica control
protocols.
The rest of the paper is organized as follows. Section 2 presents related work. Section 3 presents our approach. Section 3 presents the proposed replica management
protocol. In order to show the merits of the proposed approach, we present comparative analysis of the proposed approach against an existing approach in Section 4.
Concluding remarks and future directions is reported in Section 5.

An Efficient Replicated Data Management Approach for Peer-to-Peer Systems

459

2 Related Work
The rapid popularization of Internet-based P2P applications such as Napster [3],
Gnutella [4], and KaZaA[5] has inspired the research and development of technologies for P2P services and systems. An efficient data replication management (DRM)
technique is one of the important P2P technologies. Through an efficient DRM, the
availability of P2P services and their data can be significantly increased by replicating
them on multiple systems connected with each other, even in the face of system and
network failures [2]. From the viewpoint of data management these systems should
address two critical areas [9]:
1.
2.

Efficient, scalable data access which is provided more or less by all approaches,
and
Updates to the data stored, especially with respect to replication and low online
probabilities.

However, the data sharing P2P systems like Gnutella and Kaaza deal with static,
read-only files (e.g. music files) for which update is not an issue. Also, in systems
such as Napster and Gnutella, replication occurs implicitly as each file downloaded by
a user is implicitly replicated at the user’s workstation. However, since these systems
do not explicitly manage replication or mask failures, the availability of an object is
fundamentally linked to its popularity and users have to repeatedly obtain the data.
Also, if an update of a data item occurs this means that the peer that holds the item
changes it. Subsequent requests would get the new version. However, updates are not
propagated to other peers which replicate the item. As a result multiple versions under
the same identifier (filename) may co-exist and it depends on the peer that a user
contacts whether the latest version is accessed. The same holds true for most decentralised systems such as Gnutella [4].
ActiveXML [11] is a declarative framework that harnesses web services for data
integration, and is put to work in a peer-to-peer architecture. It supports the definition
of replicated XML fragments as Web service calls but does not address update propagation. Update is addressed in P-Grid [1], a structured network that supports selforganization. The update algorithm uses rumour spreading to scale and provides
probabilistic guarantees for replica consistency. However, it only considers updates at
the file level in a mono-master mode, i.e. only one (master) peer can update a file and
changes are propagated to other (read-only) replicas.
Freenet [6] partially addresses updates which are propagated from the updating
peer downward to close peers that are connected. Freenet uses a heuristic strategy to
route updates to replicas which is uncertain to guarantee eventual consistency.
Searches replicate data along query paths (“upstream”). In the case of an update
(which can only be done by the data’s owner) the update is routed “downstream”
based on a key-closeness relation. Since the routing is heuristic, the network may
change, and no precautions are taken to notify peers that come online after an update
has occurred, consistency guarantees are limited. Also, peers that are disconnected do
not get updated.
In OceanStore [10] every update creates a new version of the data object (versioning). Consistency is achieved by a two-tiered architecture: A client sends an update to
the object’s “inner ring” (some replicas who are the primary storage of the object and

460

J.H. Abawajy

perform a Byzantine agreement protocol to achieve fault-tolerance and consistency)
and some secondary replicas that are mere data caches in parallel. The inner ring
commits the update and in parallel an epidemic algorithm distributes the tentative
update among the secondary replicas. Once the update is committed, the inner ring
multicasts the result of the update down the dissemination tree. To our knowledge
analysis of the latency and consistency guarantees for this update scheme has not been
published yet.

3 Replica Management Approach
Regardless of the underlying system topology, P2P systems need some form of replication to achieve good query latencies, load balance, and reliability. We now briefly
describe the architecture of the proposed data replication system. Our system assumes
an infrastructure-less peer-to-peer system, i.e., all peers are equal and no specialised
infrastructure, e.g., hierarchy, exists. No peer has a global view of the system but base
their behaviour on local knowledge, i.e., its routing tables, replica list, etc. The peers
can go offline at any time according to a random process that models the behaviour
when peers are online.
R0,i-1,i-1

R1,i-1,i-1

Ri-1,i-1,i-1

plane a1
4

R0,i-1,1

R1,i-1,1

Ri-1,i-1,1
Ri-1,1,i-1

0,1,i-1

R0,i-1,0

R1,i-1,0

Ri-1,i-1,0
Ri-1,1,1

R0,1,1
Ri-1,0,i-1

Ri-1,1,0

R0,1,0
R0,0,1

R1,0,1

Ri-1,0,1

R1,0,0

Ri-1,0,0

2

R1,0,i-1

R0,0,i-1

pla
ne
a

a
ne
pla C

plane a3
R0,0,0

Fig. 1. The organization of replicas with four planes (i.e., αi) and the circles in the grid represent the sites

3.1 System Architecture
Given N copies of a data object, we logically organize the N copies into a box-shape
structure with four planes (i.e., α1, α2, α3, and α4) as shown in Fig. 1. Each copy of
the object (circles in Fig. 1) is located at x, y, z coordinate (Cx,y,z) in a given plane

An Efficient Replicated Data Management Approach for Peer-to-Peer Systems

461

(e.g., C0,0,0, C0,0,1, …, C l-1,l-1,l-1). We define a pair of copies that can be constructed
from a hypotenuse edge in a box-shape structure is called hypotenuse copies.
3.2 Operations
The basic architecture of Fig. 1 supports operations for creating objects, creating and
deleting object replicas, and performing reads and writes on the shared objects in a
transactional framework. Read operations on an object are executed by acquiring a read
quorum that consists of any hypotenuse copies. In Fig. 1, copies {R0,0,0, Rl-1,l-1,l-1},
{ R0,0,l-1, Rl-1,l-1,0}, { R0,l-1,l-1, Rl-1,0,0}, or { Rl-1,0,l-1, R0,l-1,0} are hypotenuse copies and any
one pair of which is sufficient to execute a read operation. Since each pair of them is
hypotenuse copies, it is clear that, read operation can be executed if one of them is accessible, thus increasing the fault-tolerance of this protocol.
In contrast, write operations are executed by acquiring a write quorum from any
plane that consists of: (1) hypotenuse copies; and (2) all vertices copies. For example,
if the hypotenuse copies, say { R0,0,0, Rl-1,l-1,l-1} are required to execute a read operation, then copies {R0,0,0, Rl-1,l-1,l-1, Rl-1,l-1,0, R0,l-1,l-1, R0,l-1,0} are sufficient to execute a
write operation, since one possible set of copies of vertices that correspond to { R0,0,0,
Rl-1,l-1,l-1} is {Rl-1,l-1,l-1, Rl-1,l-1,0, R0,l-1,l-1, R0,l-1,0}. Other possible write quorums are
{R0,0,0, Rl-1,l-1,l-1, Rl-1,l-1,0, Rl-1,0,l-1, Rl-1,0,0}, {Rl-1,l-1,l-1, R0,0,0, R0,0,l-1, Rl-1,0,l-1, Rl-1,0,0},
{Rl-1,l-1,l-1, R0,0,0, R0,0,l-1, R0,l-1,l-1, R0,l-1,0}, etc. It can be easily shown that a write
quorum intersects with both read and write quorums in this protocol.
3.3 Advantages
The advantage of the proposed approach is that it tolerates the failure of more than
three quarter of the copies. This is because the proposed protocol allows us to construct a write quorum even if three out of four planes are unavailable as long as the
hypotenuse copies are accessible. To show this, consider the case when only one
plane which consists of four copies of vertices and hypotenuse copies are available,
e.g., the set {Rl-1,l-1,l-1, R0,0,0, R0,0,l-1, Rl-1,0,l-1, Rl-1,0,0} is available as shown in Fig. 1. A
transaction in the proposed can be executed successfully by accessing those copies in
a quorum. Hence the write quorum in the proposed protocol is formed by accessing
those available copies. Read operations, on the other hand, need to access the available hypotenuse copies.
Thus the proposed protocol enhances the fault-tolerance in write operations compared to the grid configuration protocol. Moreover, proposed protocol ensures that
read operations have a significantly lower cost, i.e., two copies, and have a high degree of availability, since they are not vulnerable to the failure of more than three
quarter of the copies. Write operations, on the other hand, are more available than the
grid-based configuration protocol since only five copies are needed to execute write
operations.

4 Performance Analysis
In the analysis of the update algorithm we focus on the amount of communication
required to achieve consistency and provide probabilistic guarantees for successful

462

J.H. Abawajy

and appropriate results for queries. To this end, we compared the proposed scheme
with ROWA when the number of copies is set to 16 (i.e., N= 16). We also assumed
that all copies have the same availability.

1.2

ROW A

1
Availability

SODA
0.8
0.6
0.4
0.2
0
0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

Alive ne ss

Fig. 2. Comparison of the write availability between SODA and ROWA

The result of the experiment is shown in Fig. 2. As shown, the proposed scheme
has the lowest cost for write operation compared to ROWA protocol. This is because
of the fact that in the ROWA protocol, an update operation needs to access all the
replicas of the file in the system. Thus, the communication cost of an update operation
in ROWA protocol is directly proportional to the number of replicas. In contrast, the
proposed protocol needs only 5 copies at most, which results in significantly lower
communication costs for comparable data availability.

5 Conclusions and Future Directions
The problem of protocol for maintaining replicated data has been widely studied in
the distributed database systems. Recently, the need to support replication over widearea networks and to use the Internet infrastructure as the basis for building a perpetual data store has spawned new research directions. Until recently, the challenges in
providing high availability to P2P systems is poorly understood and only now being
studied. Existing protocols are designed primarily to achieve high availability by
updating a large fraction of the copies which provides some (although not significant)
load sharing. We presented a new quorum-based protocol for maintaining replicated
data across distributed P2P systems. The proposed approach is constructed on the
organization of data in a box shape. We presented an analysis of the overhead and
availability of the new protocol and showed that it performs better than the ROWA
protocols. We are planning to implement the proposed protocol on various architectures including Data Grid, Peer-to-Peer, and Mobile systems.

An Efficient Replicated Data Management Approach for Peer-to-Peer Systems

463

Acknowledgement. The help of Maliha Omar is greatly appreciated. Without her
kind support, this paper would not have been completed. The financial support of
Deakin University is also gratefully acknowledged.

References
1. S. Saroiu, P. K. Gummadi, and S. D. Gribble. A measurement study of peer-to-peer file
sharing systems. In MMCN, 2002.
2. M. Mat Deris, J. Abawajy and H.M. Suzuri, “An Efficient Replicated Data Access Approach for Large-Scale Distributed Systems”, In Proceedings of IEEE International Conference on Cluster and Grid Computing (CCGRID 2004).
3. Napster. http://www.napster.com/.
4. Gnutella. http://www.gnutella.com/.
5. KaZaA[KaZaA. http://www.kazaa.com/.
6. I. Clarke et al. Protecting Free Expression Online with Freenet. IEEE Internet Computing,
6(1), 2002.
7. Q. Lv, P. Cao, E. Cohen, K. Li, and S. Shenker. “Search and replication in unstructured
peer-to-peer networks.” In Proc. of the 16th annual ACM International Conf. on Supercomputing (ICS’02), New York, USA, June 2002.
8. R. Akbarinia, V. Martins, E. Pacitti, P. Valduriez.Replication and Query Processing in the
APPA Data Management System, in: "Int. Workshop on Distributed Data and Structures
(WDAS'2004), Lausanne", 2004.
9. Anwitaman Datta, Manfred Hauswirth, Karl Aberer,Updates in Highly Unreliable, Replicated Peer-to-Peer Systems,
10. S. Rhea, C. Wells, P. Eaton, D. Geels, B. Zhao, H. Weatherspoon, and J. Kubiatowicz.
Maintenance-free global data storage. IEEE Internet Computing, 5(5), 2001.
11. Serge Abiteboul, Angela Bonifati, Gregory Cobena, Ioana Manolescu, Tova Milo: Dynamic XML Documents with Distribution and Replication, SIGMOD 2003

