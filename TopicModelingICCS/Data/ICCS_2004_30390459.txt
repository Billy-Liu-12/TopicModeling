A Hybrid Numerical Technique for the Solution
of a Class of Implicit Matrix Diﬀerential
Equation
Nicoletta Del Buono and Luciano Lopez
Dipartimento di Matematica, Universit`
a degli Studi di Bari,
Via E. Orabona, 4, I-70125 Bari, ITALY [delbuono,lopezl]@dm.uniba.it

Abstract. This paper is concerned with the numerical solution of an
implicit matrix diﬀerential system of the form Y T Y˙ − F (t, Y ) = 0, where
Y (t) is a n × n real matrix which may converge to a singular matrix.
We propose a hybrid numerical technique based on an implicit second
order Runge Kutta scheme which derives a particular algebraic Riccati
equation and via its solution approximates the solutions of the diﬀerential
problem at hand. Numerical examples demonstrating the behavior of the
proposed approach are also reported.

1

Introduction

Many physical and industrial processes are most naturally and easily modeled
as sets of implicit diﬀerential equations (IDEs) or as mixed systems of diﬀerential and algebraic equations (DAEs) and in the last decades there has been an
increasing interest in exploiting the advantages of working directly with these
implicit models ([2], [5], [11]). In this paper we concentrate our attention on
problems whose general form is that of an implicit diﬀerential equation
G(t, Y (t), Y˙ (t)) = Y T (t)Y˙ (t) − F (t, Y (t)) = 0,

t ≥ t0 ,

(1)

where G and Y are square real matrices of the same dimension (n × n) and G
is supposed to have suﬃciently many bounded derivatives (i.e. F is assumed to
be a suﬃciently smooth matrix function mapping R × Rn×n into Rn×n ). The
initial value Y (t0 ) is supposed to be speciﬁed and the solution Y (t) is sought on
a bounded interval [t0 , T ].
If the partial derivative of G with respect to Y˙ is invertible for all t ∈ [t0 , T ]
then we can formally solve Y˙ in (1) to obtain a set of ordinary diﬀerential
equations:
Y˙ (t) = Y −T (t)F (t, Y (t),

Y (t0 ) = Y0 .

(2)

Examples of the above ODEs appear in some matrix inverse eigenvalue problems,
[6], feedback control problems [12], in the context of geometric integration on
matrix manifolds [8], in multivariate data analysis [17].
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 459–466, 2004.
c Springer-Verlag Berlin Heidelberg 2004

460

N. Del Buono and L. Lopez

Here we are interested in the case when ∂∂G
= Y T crosses a singular matrix
Y˙
at some instant τ ≤ T . In fact it has been proved in [7] that the property of the
solution Y (t) to be non singular for all t ∈ [t0 , T ] is not guaranteed a priori since
the presence of a ﬁnite escape point τ ≤ T , where Y (τ ) may become singular, is
not precluded.
Numerical approaches for the solution of the problem at hand, must therefore take into account this behavior and may be divided roughly into two
classes: direct discretization of the given system and methods which involve a
reformulation combined with a discretization.
The desire for as direct a discretization as possible arises because a reformulation may be costly, may require additional input (enlarging the dimension of
the problem) and may be more cumbersome than the original problem. In fact,
generally, any implicit diﬀerential equations of the form (1) can be written in a
semi-explicit form upon deﬁning Y˙ = Z, which leads to
Y˙ = Z
0 = G(t, Y, Z) = Y T Z − F (t, Y ).
The latter diﬀerential algebraic equation with constraint may be solved carrying
out a regularization technique, that is replacing the algebraic constraint by an
ordinary diﬀerential equation depending on a small parameter 0 ≤ ε
1 to get
then
Y˙ = Z
εZ˙ = G(t, Y, Z).
The ordinary diﬀerential system derived from this regularization techniques is
very stiﬀ (see for instance [2] and [5]), and its numerical solution is typically
more arduous. Moreover, as observed in [7], the solution Y (t) can present an
additional structure to be preserved during the integration, which might be
destroyed by regularization. Hence, the above discussion justiﬁes the research of
a direct discretization of (1).
In the remainder of the paper we detail how a direct discretization formula is
carried out to derive from (1) a general Riccati equation which can be easily solved. The numerical treatment of this Riccati equation is also discussed. Finally,
some numerical tests illustrate the behavior of the proposed hybrid approach
and some concluding remarks are sketched.

2

Hybrid Numerical Technique

As observed before, when the solution of (1) approaches a singular matrix at
some isolated point τ , the Jacobian matrix of (1) becomes singular too. In this
case, since the explicit ordinary diﬀerential equation (2) cannot be derived, a
direct discretization of G(t, Y (t), Y˙ (t)) = 0 have to be considered approximating
Y (t) and Y˙ (t), for instance, by a Runge Kutta scheme.
Runge Kutta methods have been originally conceived for numerical solution
of ordinary diﬀerential equations. From an approximation Yn of the solution at

A Hybrid Numerical Technique

461

the instant tn , they construct an approximation of Yn+1 at tn+1 = tn + h, where
h is a constant step-size, via the formula:
s

Yn+1 = Yn + h

bi Y˙ ni

(3)

i=1

where Y˙ ni is explicitely deﬁned as a function of the internal stages Yni given by:
s

Yni = Yn + h

aij Y˙ ni ,

i = 1, . . . , s,

(4)

i=1

where aij , bi , ci are the coeﬃcients deﬁning the speciﬁc method and s is the
number of the stages. To extend Runge Kutta method to implicit diﬀerential
equation G(t, Y, Y˙ ) = 0 we deﬁne Yn+1 as the solution of (3), (4) and
G(tn + ci h, Yni , Y˙ ni ) = 0.

(5)

Explicit Runge Kutta methods are not directly suitable for the implicit equation
in interest because, at each step, Yn+1 have to be determined as the solution of
a linear system which can become very ill conditioned.
This can be explicitely observed applying, for instance, the forward Euler method
to (1), that is
Yn+1 − Yn
G(tn , Yn ,
) = 0.
h
This provides the following system of linear equation for Yn+1
YnT Yn+1 − YnT Yn − hF (tn , Yn ) = 0.
Unfortunately this simple method does not work when the numerical solution
0), therefore stability conis approximating a singular matrix (i.e. det(Yn )
siderations indicate an implicit discretization rule as the most suitable to be
used.
An interesting result can be obtained applying to (1) the second order Gauss
Legendre Runge Kutta scheme deﬁned by the Butcher array
1/2 1/2
1
which applied to the implicit diﬀerential equation (1) provides
T
T
Yn+1 + YnT Yn+1 − Yn+1
Yn − YnT Yn − 2hF (tn +
Yn+1

h Yn + Yn+1
,
) = 0.
2
2

(6)

In the following we will show how to solve the nonlinear equation (6) in order
to get at each step a numerical approximation of Y (tn+1 ).

462

2.1

N. Del Buono and L. Lopez

On the Solution of the Algebraic Riccati Equation

To avoid the nonlinearity embedded in F , we solve recursively equation (6)
(0)
starting from a guess approximation Yn+1 , which can be chosen equals to Yn ,
that is we resolve:
(0)

T
T
Yn+1 + YnT Yn+1 − Yn+1
Yn − YnT Yn − 2hF (tn +
Yn+1

h Yn + Yn+1
,
) = 0.
2
2

(7)

(0)

Yn +Yn+1
))
2

the latter equation

R(X) = X T X + AT X − X T A + C = 0.

(8)

Setting A = Yn and C = (YnT Yn + 2hF (tn + h2 ,
reads as a general algebraic Riccati equation

Algebraic Riccati equation have been largely treated ([1], [10], [15]).We will
assume that (7) possesses a unique solution X ∈ Rn×n .
To approximate the solution of the Riccati equation we apply the Newton
iteration. The Riccati function R is clearly a mapping from Rn×n into itself.
Moreover, the ﬁrst Frechet derivative of R at a matrix X is the linear map
RX : Rn×n → Rn×n , which applied to H ∈ Rn×n is given by
RX (H) = H T X + X T H + AT H − H T A = H T (X − A) + (X + A)T H.
Then the Newton iteration for (8) is as follows:
– starting from X0
– the solution of R(X) = 0 can be obtained recursively as
Xj+1 = Xj + Dj
with Dj solution of the Sylvester equation
RX (Dj ) = −R(Xj ) ⇔ (Xj + A)T Dj + DjT (Xj − A) = −R(Xj ).

(9)

It appears clear that at each step we have to focus on the numerical treatment
of the linear matrix equation
AX + X T B = C

(10)

with A, B, C ∈ Rn×n given matrices. The ﬁrst question arising in examinating
the above linear equation is about its solvability. An answer to this question can
be found in [16] (see also [3], [14]); we report it in the following.
Theorem 1. Let A, B, C ∈ Rn×n ; there exists some matrix X ∈ Rn×n such that
AX + X T B = C if and only if
rank

CA
OA
= rank
.
BO
BO

(Note that this condition is equivalent to ask that there exist nonsingular matrices
P ∈ Rm×m and Q ∈ Rn×n such that
P

CA
OA
Q=
.
BO
BO

A Hybrid Numerical Technique

463

Conditions on the uniqueness of the solution of (10) and on the construction of
such a solution X can be obtained rewriting (10) as an ordinary linear system of
n2 equations in n2 unknowns, using the Kronecker product ⊗ and the function
vec from the space of n × n matrices to the space of n2 vectors.
In fact, (10) is equivalent to:
(I ⊗ A)vec(X) + (B T ⊗ I)vec(X T ) = vec(C).

(11)

Note that there exists a permutation matrix (see [14]) which maps the vector
vec(X T ) into vec(X),that is:
vec(X T ) = P (n, n)vec(X)
being P (n, n) the permutation matrix such that
n

n

P (n, n) =

T
Eij ⊗ Eij

i=1 j=1

where Eij ∈ Rn×n with elements 1 in the ij position and zeros elsewhere. Hence,
rearranging (11) we obtain
[(I ⊗ A) + (B T ⊗ I)P (n, n)]vec(X) = vec(C).

(12)

Hence it follows immediately that the solution X of (10) exists and is unique if
the coeﬃcient matrix [(I ⊗ A) + (B T ⊗ I)P (n, n)] has full rank n2 .
It should be pointed out that using the Newton’s method (9), the coeﬃcient
matrix is of full rank and therefore a unique solution is ensured. About the
convergence of the Newton’s procedure, since the starting matrix for the iteration is an approximation of the solution of the diﬀerential system at a previous
step, with an appropriate choice of the step size h, the algorithm converges in a
reasonable number of iteration.
The linear system involved in the solution of the algebraic Riccati equation can be solved using direct methods such as Gaussian elimination or QRdecomposition or, when the dimension increases, any iterative solver which preserves also the sparsity of the coeﬃcient matrix. Equation (10) can be also solve
applying a subspace method as suggested in [4].
The following algorithm summerizes the complete hybrid scheme described
before for the solution of the implicit diﬀerential equation (1):
GL2Riccati method
Given a step size h > 0, an approximation Yn of Y (tn ), and a user deﬁned
tolerance tol, compute an approximation Yn+1 of the solution Y (tn + h) as
follows:
(k)
(1) Set k = 0 and Yn+1 = Yn ;
(2) set A = Yn and compute C = YnT Yn + 2hF (tn + h2 ,
(3) apply the Newton method to the Riccati equation

(k)

Yn +Yn+1
)
2

R(X) = X T X + AT X − X T A + C = 0

464

N. Del Buono and L. Lopez

(3a) Set j = 0 and Xj = Yn
(3b) Compute the solution Dj of the equation
(Xj + A)T Dj + DjT (Xj + A) = −R(Xj )
Use a direct or an iterative algorithm for linear system (12).
(3c) Compute Xj+1 = Xj + Dj
(4) Set j = j + 1 and iterate until R(Xj+1 ) ≤ tol
(k)
(5) Set k = k + 1 and Yn+1 = Yn+1 = Xj
(6) Repeat from (2) until:
(k)

h Yn + Yn+1
T
T
Yn+1 − AYn+1
− AT Yn+1 − YnT Yn − 2hF (tn + ,
Yn+1
) ≤ tol
2
2

3

Numerical Tests

In this section we report some numerical tests in order to illustrate the behavior
of the proposed approach. All the numerical results have been obtained by Matlab 6.1 codes implemented on Pentium IV 1.6GHz with 1GbRAM. We compare
the GL2Riccati scheme with SVDRK2, the second order Runge Kutta scheme
applied to the singular value decomposition approach illustrated in [7] and [9].
3.1

Example 1

As ﬁrst example we consider the diﬀerential system
Y TY −

0 − 2δ
− 2δ 0

= 0,

1 −1
1 1

1
Y (0) = √
2

with δ = 0, which has solution given by
√
√
1
1 + δt −√ 1 + δt
√
Y (t) = √
1 − δt
1 − δt
2

(13)

,

existing in the neighborhood (−1/δ, 1/δ) of t0 = 0. In this case the matrix
function G(Y ) exists and is a continuous and Lipschitz matrix function only in
a neighborhood of Y (0). We solve a problem with δ = 1/2. Figure 1 depicts the
behavior of the global error on the interval [1, 2] of GL2Riccati scheme (solid
line) and SVDRK2 (dotted line). The two methods have been applied with the
same step size and show the same performance inside the chosen interval.
3.2

Example 2

As second example we consider the diﬀerential system
Y T Y˙ −
whose matrix solution

− sin(t) cos(t) cos(t)
−t sin(t)
t

=0

A Hybrid Numerical Technique

465

0

10

−1

Global Error

10

−2

10

0

20

40

60

80

100

120

Time

Fig. 1. Behavior of the global error

Y (t) =

cos(t) t
0 1

deﬁned for all t, but periodically, at each multiple of the point τk = π/2 becomes
a singular matrix. We integrate this system in the interval [π/4, π/2], with a
step size h = 0.01. Figure 2 provides the semilog plot of the global error on the
integration interval of GL2Riccati scheme (solid line) and SVDRK2 (dotted line).
In this case the GL2Riccati approach shows a reduced global error with respect
that of SVDRK2, moreover while this latter method blows up at the singularity,
the proposed procedure is able to integrate the system at the singularity even if
an order reduction can occur.
−1

10

−2

10

−3

Global Error

10

−4

10

−5

10

−6

10

−7

10

0.79

0.88

0.98

1.08

1.18

1.28

1.37

1.47

1.57

Time

Fig. 2. Behavior of the global error

466

4

N. Del Buono and L. Lopez

Conclusion

Implicit diﬀerential equations play a key role in many applications. In this paper
we have considered a particular class of IDE whose solution matrix not guaranteed to be nonsingular for all t. We have demonstrated the relationship between
the numerical solution of this class of IDE and a general Riccati equation, suggesting a hybrid techniques which provides a numerical approximation of the
solution also at escape points, moreover it should be highlighted that since the
proposed procedure is based on a second order Gauss Legendre Runge Kutta
scheme it is able to preserve any eventual quadratic structure of the theoretical
solution.

References
1. Ammar G., Benner P., and Mehrmann V., A multishift algorithm for the numerical
solution of algebraic Riccati equations, ETNA 1 (1993) 33-48.
2. Ascher U.M., Petzold L.R., Computer methods for Ordinary Diﬀerential Equations
and Diﬀerential-Algebraic Equations SIAM 1998.
3. Baksalary J.K., Kala R., The matrix equation AX − Y B = C. Linear Algebra
Appl. 25 (1979) 41-43.
4. Brands J., Computing tall skinny solutions of AX − XB = C. Mathematics and
Computers in Simulation 61 (2003) 385-397.
5. Brenan W.E., Campbell S.L., Petzold L.R., Numerical Solution of Inital-value Problems in Diﬀerential Algebraic Equations. North-Holland: New York, 1989.
6. Chu, M.T., Inverse Eigenvalue Problems, SIAM Review 40 (1998) 1-39.
7. Del Buono N., Lopez L., Numerical integration of a class of ordinary diﬀerential
equations on the general linear group of matrices. Numerical Algorithms 34, (2003)
271-282.
8. Del Buono N., Lopez L., Geometric integration on manifold of square oblique
rotation matrices. SIAM J. Matrix Anal. Appl. 23(4) (2002) 974-989.
9. Del Buono N., Lopez L., Numerical solution of matrix ordinary diﬀerential equations with singular solutions. Tech. Report, Department of Mathematics, University
of Bari, Italy, (2004).
10. Guo C.H., Laub A.J., On a Newton-like method for solving algebraic Riccati equations. SIAM J. Matrix Anal. Appl. 21(2) (2000) 694-698.
11. Hairer E., Lubich C., Roche M., The numerical solution of diﬀerential algebraic
systems by Runge Kutta methods, Lecture Notes in Mathematics, 1409, SpringerVerlag 1989
12. Helmke U., Moore J.B., Optimization and dynamical systems. Springer-Verlag:
London, 1994.
13. Horn R.A., Johnson, C.A., Matrix Analysis. Cambridge University Press: New
York, 1985.
14. Horn R.A., Johnson, C.A., Topics in Matrix Analysis. Cambridge University Press:
New York, 1991.
15. Lancaster P., Rodman L., Algebraic Riccati Equations. Clarenton Press: Oxford,
1995.
16. Roth W.E., The equation AX − Y B = C and AX − XB = C in matrices. Proc.
Am. Soc. 3, (1952) 392-396.
17. Trendaﬁlov N.T., Lippert R.A.,The Multi-Mode Procrustes problem. Linear Algebra and Applications 349(1-3), (2002) 245-264.

