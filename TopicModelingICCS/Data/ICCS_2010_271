Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–9
2043–2051

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Design and development of an adaptive mesh manipulation module
for detailed FEM simulation of ﬂows.
Krzysztof Bana´sa,b , Kazimierz Michalika,1,∗
a Department

of Applied Computer Science and Modelling, Faculty of Metals Engineering and Industrial Computer Science, AGH University of
Science and Technology, Mickiewicza 30, 30-059 Krak´ow, Poland
b Institute of Computer Modelling, Cracow University of Technology, Warszawska 24, 31-155 Krak´
ow, Poland

Abstract
We present a strategy to develop a mesh manipulation module of a ﬂexible and robust adaptive ﬁnite element
application that will perform accurate modelling of ﬂows, handling complicated computational domains. We describe
guidelines for developing such a module focusing on three aspects: parallelism on domain and computational node
level, improving speed through better cache hit-ratio and assuring ﬂexibility thanks to modern object oriented programming techniques. In subsequent development the module is intended to bu used in multi-physics and multi-scale
simulations of ﬂuid-structure interactions.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: ﬁnite elements, adaptivity, mesh modiﬁcation, ﬂow simulation, boundary modelling, C++ code
optimization, template programming

1. Motivation
Modern ﬁnite element codes have to provide many distinct advanced functionalities. They should allow for solving
complex – coupled, highly nonlinear, often multi-scale and multi-physics – problems, should provide adaptive capabilities, ﬁnally should be well mapped to contemporary software and hardware platforms to ensure highest possible
performance.
To fulﬁll these needs modern software engineering tools should be applied, that often leads to the necessity of
substantial changes to the existing codes or even creation of new programs. In a series of papers [1, 2, 3] a vision has
been presented of modular design of ﬁnite element codes. Such a design would allow to break the creation of FEM
codes into separate projects, that in turn should enable forming FEM codes from old and new modules and promote
their evolutionary development.
The current paper brings the further speciﬁcation of requirements and implementation techniques for a single,
important module of FEM codes – mesh manipulation module, as it is called throughout the paper. This module
is responsible for storing adaptive meshes, providing input and output procedures, as well as procedures for mesh
modiﬁcations – breaking elements into smaller ones and clustering them back into large ones when necessary. The
∗

Email address: kazimierz.michalik@agh.edu.pl (Kazimierz Michalik)
author

1 Corresponding

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.228

2044

K. Bana´
s, K. Michalik / Procedia Computer Science 1 (2012) 2043–2051
K. Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

2

module supplies all other ﬁnite element modules with the data concerning the mesh or even several meshes, for which
the current approximation is performed.
The subject of designing data structures for adaptive ﬁnite elements has a long history. First ideas, developed in
the context of traditional, structured programming model, date back to the beginning of 1980’s [4, 5, 6]. In 1990’s
object oriented techniques were introduced to the ﬁnite element design [7, 8, 9]. The research is still active and new
concepts appear (see e.g. [10, 11, 12]). The current paper concentrates on the features related to the modular design of
the code, it does not present a comprehensive study of adaptive FEM implementation or the model of object oriented
FEM design. However, several concepts concerning both research areas are introduced below.
As with many, may be practically almost all, development projects, also this one is driven by application needs.
In our case the prospective application is the simulation of artiﬁcial heart chamber – the complex object, composed of
a chamber and a ﬂuid inside it, both coupled together and both simulated with micro-scale features.
2. Meshes for accurate modelling of ﬂows
Accurate modelling of ﬂows requires good resolution of details of the boundary of computational domain. However, the necessary resolution may depend upon particular ﬂow conditions, not known in advance. In case of the
adaptive ﬁnite element method the accuracy of approximation can be increased locally by decreasing the size of the
mesh. This procedure is governed usually by some form of error estimation and produce regions with small elements
and regions with relatively large elements. To minimize approximation error the vertices of elements lying on the
boundary should be placed on the boundary of the modelled domain. Figures 1 and 2 present two cases, the ﬁrst in
which there is no interaction between mesh modiﬁcation procedures and geometrical modelling data and the second
in which coordinates of new vertices produced during mesh reﬁnement are supplied by a geometry module.

Figure 1: Standard h-adaptation without interaction with geometry modeling module.

Figure 2: h-adaptation with geometry module.

The second case, better from the point of view of accuracy, requires the mesh manipulation module of the ﬁnite
element code to interact with a geometrical modelling module. This in turn means the either the code has to include
the geometry module as its part – that complicates the FEM code – or it has to interact at run-time with external

K. Bana´K.
s, K.
Michalik / Procedia Computer Science 1 (2012) 2043–2051
Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

2045
3

geometry modules – that also complicates creation of such a code, and moreover may substantially slow down the
execution of reﬁnements.
There is another solution to the problem – to have the boundary discretized with much ﬁner grid than the rest of
the domain, so that there should never arise the necessity to reﬁne elements on the boundary. But this requires that
really large resources are devoted to store the part of the 3D mesh close to the boundary. If better resolution is required
only for some, may be small, parts of the domain boundary, these resources are waisted. Below, we present a strategy
allowing for good resolution of details of the domain boundary without the need of high resolution 3D mesh for the
whole boundary.
3. The strategy for mesh modiﬁcations
Our mesh module supports hybrid meshes. At this moment we have implemented two types of elements: tetrahedral and prismatic. First is designed mainly for interior of the computational domain, second mainly for modeling
boundary layers.
3.1. Details of the boundary
We assume the situation in which we design a ﬁnite element code (to be precise: a mesh manipulation module of
the ﬁnite element code) and want to operate on meshes produced by various mesh generators that get their input data
from various geometric modelling codes. Hence we want to be able to perform accurate mesh adaptations without
knowing where the meshes come from. Our solution is to design a module that is able to hold at least two meshes:
one mesh is a full 3D mesh that is used in actual calculations, and the second is a 2D surface mesh of the boundary.
The ﬁrst mesh is used in actual ﬁnite element calculations. The latter is used only for providing data for adaptations.
Thanks to this we do not have to design neither a separate geometry modelling module nor a sequence of run-time
interfaces with external geometry modules. The only necessary feature of our module is to be able to read 3D and
surface meshes produced by diﬀerent mesh generators.
An example of the two meshes used in modelling of artiﬁcial heart chambers is presented in Fig. 3. The meshes
were obtained by a commercial code. The ﬁrst one is a 3D mesh that contains 150000 tetrahedral elements. The
second one is a surface mesh with more than 3 million triangles. If the ratio of the number of surface triangles to the
number of tetrahedral elements would get close to the surface to volume ratio of regular bodies, than the 3D mesh
corresponding to the surface mesh from Fig.1 would contain 400 million elements. This number is much too large for
the contemporary computers (taking into account that the mesh will be used in transient simulations).

Figure 3: Comparison of two meshes stored for the purpose of adaptations: left - the surface of a 3D mesh used as an initial mesh for ﬂow
computations, right - a 2D surface mesh used for mesh adaptations; images show the whole computational domain and details with diﬀerences in
resolution between 3D and 2D meshes clearly visible.

2046

K. Bana´
s, K. Michalik / Procedia Computer Science 1 (2012) 2043–2051
K. Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

4

The ﬁgure depicts also a detail of both meshes - a part of the domain with a thin groove. This part, that may be
important for e.g. predicting regions with higher probability for blood clotting, is much better modelled by the second
mesh. We expect that during mesh adaptations the surface of a 3D mesh surrounding the groove will get closer to the
2D mesh shown in the picture.
We plan to use the mesh manipulation module mentioned above as a part of the ﬁnite element code that would
allow for accurate simulations of ﬂow problems in complicated 3D domains. We plan to implement both explicit and
implicit time integration algorithms, hence solver times may signiﬁcantly vary. In consequence the percentage of the
total simulation time spent performing adaptations may range from several to dozens, depending on the solver and
reﬁnement algorithms. Moreover, if time integration is properly parallelized, the lack of eﬃcient parallel implementation for the mesh manipulation routines may lead to too much time spent in their execution.
The mesh module in our code would play a signiﬁcant role – not only would allow for accurate resolution of
boundaries and boundary layers (through the use of hybrid tetrahedral-prismatic meshes [13]) but also allow for mesh
movement and eﬃcient parallel execution [14]. Therefore ﬂexibility and eﬃciency are of primary importance when
designing the module. Both have to be achieved using a proper storage scheme and implementation techniques.
3.2. Boundary layer
Using prisms near boundary allows us to easily deal with errors related to high velocity gradient orthogonal to the
boundary. In order to allow for proper resolution of boundary layers where highly elongated prismatic elements are
well suited, we introduce two types of reﬁnement of prismatic elements. First type of reﬁnement slices a prism into
halves, which improves solution only in one direction. This reﬁnement type is designed especially for modeling ﬂow
near boundary Second type of prism reﬁnement is a full reﬁnement, which divides a prism into eight smaller similar
prisms, decreasing the size of elements in all directions.
3.3. Interior of computational domain
Tetrahedral elements can also be divided in two distinct ways. First division is designed for well-formed tetrahedral
elements (see Fig. 4).

Figure 4: Tetrahedral element division.

K. Bana´K.
s, K.
Michalik / Procedia Computer Science 1 (2012) 2043–2051
Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

2047
5

Eight sub-elements which are created are similar to the parent element: four of them, created by ”cutting oﬀ”
vertices of the parent element, are similar in exact way (geometrical similarity). Octahedron that is left can be divided
in three ways (one possible is presented in Fig. 4) because there are three means of introducing an additional edge,
which splits octahedron into four tetrahedrons. This allows us to make small correction of sub-elements geometry,
but they are still quite similar to the parent element.
Second reﬁnement type is designed for ill-formed elements, that are much longer in one direction. If we will
use ﬁrst type of reﬁnement which creates sub-elements similar to the parent element, the ill-formed shape will be
propagated. Thus we split the parent into two sub-elements dividing the longest edge. It is proved, that using divisions
of the longest edges we improve shape of elements [15].
There may appear problems when all types of reﬁnement are used simultaneously. Therefore a proper strategy
(e.g. using one irregular meshes only in the boundary layers or introducing temporary elements) has to be introduced. Our main mean to solve these problems is to split the mesh reﬁnement into two phases – marking for reﬁnements/dereﬁnements and performing actual operations. All conﬂicts of reﬁnements and dereﬁnements have to be
resolved during the ﬁrst phase.
The strategy of splitting mesh modiﬁcations into phases allows also for eﬃcient memory management implementation that we describe below.
4. Structure of mesh manipulation module
We develop a storage scheme for ﬁnite element meshes (possibly 1-irregular [16, 17] – i.e. having at most a single
hanging node for each edge) with three main aspects in mind. First, our module is designed for parallel execution,
second we focus on cache hit-ratio aspect of our implementation. Regardless of those two, the third necessary aspect
is ﬂexibility.
We make several assumptions concerning the organization of the data structure. Every element in the mesh is
assembled from several mesh entities. Elements can be reﬁned (broken) and then de-reﬁned (clustered) if needed.
Information about reﬁnements is stored in the data structure in an explicit way – divided elements are still in memory.

Figure 5: Tree-like structure of elements.

Mesh is stored in a continuous manner in memory, thus it’s topology is tree-like. The mesh presented in Fig. 5
is stored as a ﬂatten tree, where red elements are real elements in the mesh, and black are virtual parent elements.
In memory, elements are stored as: E0 , e00 , e10 , e20 , e00,2 , e10,2 , ..., e70,2 , ..., e70 , E1 , ..., En . This allows for very fast dereﬁnement process and gives information about element connectivity. When iterating a mesh we use natural order of
elements – all divided elements are ignored.
4.1. Memory management
Each type of mesh entity (vertex, edge, face and interior) is managed by its own memory manager, each one
allowing for parallel memory operations on diﬀerent entities in multi-threaded execution environment. All entities are
identiﬁed by their id – a number, which is unambiguous, because it has entity type build-in. Using C++ language we

2048

K. Bana´
s, K. Michalik / Procedia Computer Science 1 (2012) 2043–2051
K. Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

6

implement an union storing int and nameless structure containing two bit ﬁelds (enclosed as public member in base
class) allowing us to smartly merge information about type and position (see Fig. 6). Such solution gives us direct
access to all three informations: type, position, and identiﬁer. Described approach allows for easy comparing of all
kinds of entities, and assure there are no errors in case of multi-threaded memory access.

Figure 6: Identiﬁer merged from the type and position of entity.

In the general case, improvement of memory usage (making program less memory-consuming) makes it also
slower and vice versa: focusing on speed increase memory usage. However statistics shows us that most of program
execution time is spent in accessing the main memory. Improving cache hit-ratio can greatly speed-up program
execution. Knowing the usual strategies of CPU cache management, we optimize our memory management to increase
hit-ratio. We reject the idea of very sophisticated memory management, because although it can save some memory
(usually irrelevant amount of megabytes) it adds run-time overhead, which is not worth the saved memory.
The basis of our memory manager implementation is a simple continuous chunk of memory, ﬁlled with a sequence
of objects of a given type. Using templates we replace cross references through memory (generated by standard
technique of using pointers and allocating needed memory at run-time) by adjusting structures and classes before
compilation (see Fig. 7 and Fig. 8).

Figure 7: Class template for mesh objects allows us to smartly generate various classes in seconds.

The implementation allows us to keep information in one place in memory, not only to keep in one place pointers
to information. The main drawback of the solution is very slow and memory consuming process of adding or removing

K. Bana´K.
s, K.
Michalik / Procedia Computer Science 1 (2012) 2043–2051
Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

2049
7

Figure 8: UML diagram presenting the design model. hObj base class extended by hParent class template and mesh entities classes generated from
the template.

objects from the sequence, which requires re-allocating all, or almost all objects in memory. We can avoid this by
previously allocating much greater chunks of memory than actually needed, but this may lead to wasting memory
resources.
We notice that adding and removing objects is done only during adaptations of the mesh. Therefore, in our storage
scheme, during ﬁrst phase of reﬁnement/dereﬁnement process the objects are only marked to divide or remove, no
one is created or deleted. Only when ﬁnalizing mesh adaptations, new memory requirements are computed, based on
previously marked entities, and then single one memory reallocation is performed, if needed, which takes into account
all objects’ modiﬁcations. When this operation succeeds actual adaptation is performed.
Finally, we made two technical remarks: ﬁrst, most of elements stored in the mesh are not divided, and second,
storing information about sub-elements, in most cases, more than doubles the size of an element data structure.
Therefore we introduce distinction between divided and not-divided elements, which allows us to greatly reduce the
amount of memory used by the mesh. Thanks to the use of template programming serious complications related to
using many element types can be avoided. When we introduce distinction between divided and not divided elements,
we cannot make simple jumps through memory to n–th position, because we have objects of diﬀerent sizes in one
address space (array). To deal with this complication we develop two solutions. First, we create a hash array which
maps entity position number to it‘s real address (also useful during mesh reﬁnement) which give us random access
to elements. Second, we take advantage of padding mechanism, and pack-up into every entity it‘s length in bytes.
Thanks to that we can easily iterate forward through array of objects of diﬀerent sizes, without using external hash
table.
4.2. Parallelism
Our code is designed with parallelism in mind. We focus on two levels of parallelism. First, global parallelism that
works at the level of the whole ﬁnite element computational domain, where a number of computational nodes operate.
At the second level we concentrate on a single computational node. Fig. 9 presents a scheme of the parallelization
levels.

2050

K. Bana´
s, K. Michalik / Procedia Computer Science 1 (2012) 2043–2051
K. Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

8

Figure 9: Two levels of parallelism

4.2.1. Domain level – parallel system level
This is a distributed memory model covering the whole computational domain. At this level we focus on domain
decomposition and load balancing problems. We developed application which is able to handle many meshes provided
by domain decomposition algorithms. To avoid ambiguities between elements from distinct computational nodes (so
from distinct memory pools) we introduce id numbers which combine local element number with computational node
identiﬁer. Our code also supports load balancing – it has interface allowing for splitting and merging meshes, adding
and removing single entities, so that one can share information and move elements from one mesh to another with
ease.
4.2.2. Subdomain level – a computational node level
This is a shared memory multi-threaded execution environment. At the node level there is also possibility of
handling more than one mesh simultaneously. E.g. when solving problems of ﬂuid-structure interaction there could
be one mesh for ﬂuid simulation and the other for structure. We can also use diﬀerent approximation ﬁelds on the same
geometrical mesh thanks to the distinction between the geometry and the solution degrees of freedom (managed by
a separate approximation module). Frequently during parallel execution a single computational node crashes, which
results in inconsistent state of the whole computational domain. Our implementation handles such situations through
checkpoint-restart mechanism.
4.3. Flexibility
4.3.1. Interfaces
Important part of ﬂexibility is ability to interface with several diﬀerent mesh sources and/or linear equations
solvers. Mesh module is equipped with input and output interfaces. The input interface allows for reading geometrical
data and mesh data. Data source can be a text or a binary ﬁle of any known commercial or open format (e.g. ADINA
formats are already implemented), but the interface is capable of handling also other data sources like databases,
streams etc. Both interfaces use dynamic polymorphism, so data input and/or output can be changed at program
run-time.
4.3.2. Extensibility
New element types, reﬁnements, etc. can be added with ease – this is achieved using template programming and
meta programming, which combine program speed with advanced object oriented techniques, doing work at compile
time. Thanks to such techniques as static inheritance we don’t add computational overhead normally associated with
possibility of extending class hierarchy. All element types are specialization of one class template, and the template
isn’t very complicated. To add a new element type or change its behavior one must deﬁne characteristic functions
for it, make a proper specialization of the template and bound those two things together. Creating dedicated memory

K. Bana´K.
s, K.
Michalik / Procedia Computer Science 1 (2012) 2043–2051
Michalik, K.Banas / Procedia Computer Science 00 (2010) 1–9

2051
9

manager is even simpler, because all memory management is encapsulated in one class template, which needs only
”base class to manage” as a template parameter.
5. Summary.
We presented a design and implementation guidelines for a mesh manipulation module of a developed ﬁnite element code that can handle many parallel (distributed) hybrid, adaptive meshes. Thanks to smart template programming
we assure extensibility of the module. The code will be used in modelling blood ﬂow in artiﬁcial heart chambers. We
also expect it to be used in other multi-scale, multi-physics coupled problems simulations.
Acknowledgment
The support of this work by the Polish Ministry of Science and Higher Education under Polish Artiﬁcial Heart
Project PW/P02-PBZ-MNiSW/2007 is gratefully acknowledged.
References
[1] K. Bana´s, A model for parallel adaptive ﬁnite element software, in: R. Kornhuber, R. Hoppe, J. P´eriaux, O. Pironneau, O.Widlund, J. Xu
(Eds.), Domain Decomposition Methods in Science and Engineering, Vol. 40 of Lecture Notes in Computational Science and Engineering,
Springer, 2004, pp. 159–166.
[2] K. Bana´s, A modular design for parallel adaptive ﬁnite element computational kernels, in: M. Bubak, G. van Albada, P. Sloot, J. Dongarra
(Eds.), Computational Science — ICCS 2004, 4th International Conference, Krak´ow, Poland, June 2004, Proceedings, Part II, Vol. 3037 of
Lecture Notes in Computer Science, Springer, 2004, pp. 155–162.
[3] K. Bana´s, Agent architecture for mesh based simulation systems, in: V. Alexandrov, G. van Albada, P. Sloot, J. Dongarra (Eds.), Computational Science — ICCS 2006, 6th International Conference, Reading, UK, May 28-31, 2006, Proceedings, Part III, Vol. 3993 of Lecture
Notes in Computer Science, Springer, 2006, pp. 743–750.
[4] W. C. Rheinboldt, C. K. Mesztenyi, On a data structure for adaptive ﬁnite element mesh reﬁnements, ACM Trans. Math. Softw. 6 (2) (1980)
166–187.
[5] R. Bank, The eﬃcient implementation of local mesh reﬃnement algorithms, in: I. Babuska, J. Chandra, J. Flaherty (Eds.), Adaptive Computational Methods for Partial Di erential Equations, SIAM, SIAM, Philadelphia, 1983, pp. 74–81.
[6] M.-C. Rivara, Design and data structure of fully adaptive, multigrid, ﬁnite-element software, ACM Trans. Math. Softw. 10 (3) (1984) 242–
264.
[7] J. Filho, P. Devloo, Object-oriented programming in scientiﬁc computations: the beginning of a new era, Engineering with Computers 8
(1991) 81–87.
[8] T. Zimmermann, Y. Dubois-Pelerin, P. Bomme, Object-oriented ﬁnite element programming: I. Governing Principles, Computer Methods in
Applied Mechanics and Engineering 98 (1992) 291–303.
[9] R. Mackie, Object oriented programming of the ﬁnite element method, International Journal for Numerical Methods in Engineering 35 (1992)
425–436.
[10] W. Bangerth, R. Hartmann, G. Kanschat, deal.ii—a general-purpose object-oriented ﬁnite element library, ACM Trans. Math. Softw. 33 (4)
(2007) 24.
[11] P. Devloo, Oopar: An object oriented environment for implementing parallel algorithms, in: CSE ’08: Proceedings of the 2008 11th IEEE
International Conference on Computational Science and Engineering, IEEE Computer Society, Washington, DC, USA, 2008, p. 5.
[12] P. Bastian, M. Blatt, A. Dedner, C. Engwer, R. Klufkorn, R. Kornhuber, M. Ohlberger, O. Sander, A generic grid interface for parallel and
adaptive scientiﬁc computing. part ii: implementation and tests in dune, Computing 82 (2) (2008) 121–138.
[13] Y. Kallinderis, H. T. Ahn, Incompressible navier-stokes method with general hybrid meshes, J. Comput. Phys. 210 (1) (2005) 75–108.
[14] K. Bana´s, Parallelization of large scale adaptive ﬁnite element computations, in: R. Wyrzykowski, J. Dongarra, M. Paprzycki, J. Wa´sniewski
(Eds.), Parallel Processing and Applied Mathematics, Proceedings of Vth International Conference, PPAM 2003, Cze¸stochowa, Poland, 2003,
Vol. 3019 of Lecture Notes in Computer Science, Springer, 2004, pp. 431–438.
[15] A. Plaza, M.-C. Rivara, Mesh reﬁnement based on the 8-tetrahedra longest-edge partition, 12th International Meshing Roundtable, Sandia
National Laboratories (2003) 67–78.
[16] L. Demkowicz, J. Oden, W. Rachowicz, O. Hardy, Towards a universal h-p adaptive ﬁnite element strategy, Part.1 Constrained approximation
and data structure, Computer Methods in Applied Mechanics and Engineering 77 (1989) 79–112.
[17] M. Paszynski, L. Demkowicz, Parallel, fully automatic hp-adaptive 3d ﬁnite element package, Eng. Comput. (Lond.) 23 (3) (2007) 241.

