Building a Formal Framework for Mobile
Ad Hoc Computing
Lu Yan and Jincheng Ni
Turku Centre for Computer Science (TUCS) and
Department of Computer Science, ˚
Abo Akademi University,
FIN-20520 Turku, Finland.
{Lu.Yan, Jincheng.Ni}@abo.fi
Abstract. We present a formal framework towards a systematic design
for MANET applications. In this paper, we deﬁne a layered architecture
for mobile ad hoc computing and specify the system components with
the B method and UML diagrams.

1

Introduction

We deﬁne a layered architecture in Fig. 1 for mobile ad hoc computing and propose a middleware layer with three key components between software application
layer and ad hoc networking layer. We specify the system components with the
B method [1], and model the interactions and message communications between
components with UML diagrams.

Incoming Data

Interaction

Awareness

Network
Management

Application

Outgoing Data
Networking

Fig. 1. MANET Architecture

2

Network Management

There is no constant topology or centralized manager in MANET. In order
to form a self-organizing network, and support multi-hop routing by forwarding packets, it is necessary to have the network management in every node in
MANET.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 619–622, 2004.
c Springer-Verlag Berlin Heidelberg 2004

620

3

L. Yan and J. Ni

Awareness

As shown in Fig. 2, a node processes incoming messages according to the format
of data packets. If the received message is a communication message, the system

Get Incoming
Message

[routeRep ]

[routeReq ]
[CommMSG ]
Identify Route
Message

Identify Comm
Message
[myID ]

[myID ]

Identify Route
Message

[in LINKND ]

[others ]

[myID ]

[others ]

[others ]
addRoute ()

markID and
Broadcast

Receive

addRoute ()

Forward
Report Link Broken

Reply

Report Routes Got

Fig. 2. Incoming Message Processing

checks the packet head, and then receives or forwards the packet according to
the next hop ID of the route. In case the ID is unrecognizable, the system will
report a broken route. If the incoming message is a routing message, the system
will process the message according to the current routing protocols in MANET.

4

Interaction

We consider an opening session for the interactive communication between nodes.
In such a session, the source and destination nodes exchange messages and update routing information for communication. As shown in Fig. 3, when the system opens such a session and starts interactive communication, the source node
will select a route from the routing table or detect a new route to reach the
destination node. If there is no available route or the destination node is not
detected in the network, the opening session fails and a failure message is sent
back to the source node. In a successful case, once a route is available, a communication session between the source node and destination node is created and
the interactive communication starts.
During the interactive communication, the network topology might be
changed and it might lead to a broken route. Thus route maintenance and recovery are needed for interactive communication. Figure 4 shows how a route is
recovered when the system knows that the route is broken. In our design, it is

Building a Formal Framework for Mobile Ad Hoc Computing
RouteInfo

Node

621

awareNodes

1. open
Session
1.1 any_route
1.1.1 no_route_info
1.1.1.1[no_route]aware_remote_node

1.2 any_route
1.2.1 no_route_info
1.3 session_fail

If awareMSG gets routeRep
from remote node, it will add
route into RouteInfo

Fig. 3. Opening Session for Interactive Communication

assumed that multiple routes discovery protocols are used. For example, when
source node S is communicating with destination node D, S sends data packets to D along with the selected route. During their communication, if S gets
to know that the communication route is broken, S doesn’t need to rediscover
a new route immediately because S might have detected several routes in the
previous discovery. It can then choose another available route and replace the
broken one. Until all the routes are not reachable to the destination, the system
will start route discovery again [2].

1 [route break]: remove route
Session

5 [have route]: switch route

2 : route break
3 : any route
RouteRecovery

RouteInfo

4 [no route]: detect remote node
awareNode

Fig. 4. Route Maintenance and Recovery

5

Relationship of Components

There are three components in the system speciﬁcation, which are built up with
nine B machines. Two pre-deﬁned machines AdHocNet and RouteInfo are used
to specify the context and environment of mobile ad hoc computing. The component Network Management is composed of three machines: netManager, modeSet

622

L. Yan and J. Ni

and Connector, and the component Awareness has two machines: awareNodes
and awareMSG. There are two machines: Communication and RouteRecovery in
the component Interaction. For the whole system, the relationship of machines
within components and between components is shown in Fig. 5.

Network Management

Awareness

Interaction

netManager

awareNodes

Communication

modeSet

awareMSG

RouteMaintain

Connector

AdHocNet

SEES

RouteInfo

INCLUDES

Fig. 5. Relationship of Components

6

Concluding Remarks

The goal of the speciﬁcation is a formal framework to enable applications to be
developed based on the three components, which are to be executed arbitrarily
in MANET. A complete detailed speciﬁcation of mobile ad hoc computing and
some experiment results can be found at [3].
Acknowledgements. This work was supported by the Mobile Ad Hoc Computing project directed by Kaisa Sere, and we are grateful for Kaisa’s contribution.

References
1. E. Sekerinski and K. Sere (Eds), Program Development by Reﬁnement: Case Studies Using the B Method, Springer-Verlag, 1999.
2. Z. Ye, S. V. Krishnamurthy and S. K. Tripathi, A Framework for Reliable Routing in Mobile Ad Hoc Networks, Proceedings of the IEEE INFOCOM 2003, San
Francisco, USA, 2003.
3. L. Yan, J. Ni and K. Sere, Towards a Systematic Design for Ad hoc Network
Applications, Proceedings of the 15th Nordic Workshop on Programming Theory
(NWPT’03), Turku, Finland, Oct. 2003.

