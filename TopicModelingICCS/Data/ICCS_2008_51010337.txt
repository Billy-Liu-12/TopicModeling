Structural Testing for Semaphore-Based
Multithread Programs
Felipe S. Sarmanho, Paulo S.L. Souza,
Simone R.S. Souza, and Adenilso S. Sim˜
ao
Universidade de S˜
ao Paulo, ICMC, S˜
ao Carlos - SP, 668, Brazil
{sarmanho,pssouza,srocio,adenilso}@icmc.usp.br

Abstract. This paper presents structural testing criteria for validation
of semaphore-based multithread programs exploring control, data, communication and synchronization information. A post-mortem method
based on timestamps is deﬁned to determine the implicit communication
among threads using shared variables. The applicability of the coverage
testing criteria is illustrated by a case study.
Keywords: software testing, multithread programs, testing criteria.

1

Introduction

Concurrent programming is important to reduce the execution time in several
application domains, such as image processing and simulations. A concurrent
program is a group of processes (or threads) that execute simultaneously and
work together to perform a task. These threads access a common addressing
space and interact through memory (using shared variables). The most common
method to develop multithread programs is to use thread libraries, like PThreads
(POSIX Threads).
Concurrent program testing is not trivial. Features like synchronization, interthread communication and non-determinism make this activity complex [1].
Multiple executions of a concurrent program with the same input may present
diﬀerent results due to diﬀerent synchronization and communication sequences.
Petascale systems also add more factors to this scenario, making it even worse [2].
Structural testing is a test technique that use source code information to guide
the testing activity. Coverage criteria are deﬁned to apply structural testing. A
testing criterion is a predicate to be satisﬁed by a set of test cases and can be
used as a guide for the test data generation. It is also a good heuristic to indicate
defects on programs and thus to improve their quality. This activity is composed
of: (1) static analysis to obtain the necessary data about the source code, and
usually obtaining a Control Flow Graph (CFP) [3]; (2) determining required elements for the coverage criterion chosen; and (3) analyzing the coverage reached
in source code by test cases, based on coverage criterion.
This work is supported by CNPq.
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 337–346, 2008.
c Springer-Verlag Berlin Heidelberg 2008

338

F.S. Sarmanho et al.

In the literature there are some works that address testing of concurrent
programs [4, 5, 6, 7, 8, 9]. Most of these works propose a test model to represent
the concurrent program and to support the testing application.
The Concurrency States Graph (CG) is a CFG extension proposed in [4], in
which nodes represent concurrency states while the edges represent the actions
required for transition between these states. That work considers concurrent
languages with explicit synchronization using rendezvous-style mechanisms, such
as Ada and CSP. It presents coverage criteria adapted for the CG; however, its
usage is limited in the practice by the state space explosion problem.
PPFG (Parallel Program Flow Graph) is a graph where was inserted the
concept of synchronization node to the CFG [5, 10]. In the PPFG each process
that composes the program has its own CFG. The synchronization nodes are
then connected based on possible synchronizations. This model was proposed to
adapt the all-du-path criterion to concurrent programs.
PCFG (Parallel Control Flow Graph) also adapts the CFG for the context of
parallel programs in message passing environments [7]. The PCFG includes the
concept of synchronization nodes that are used to represent the send and receive
primitives. The concept of variables was extended, to consider the concept of
communicational use (s-use). Coverage criteria were also proposed in [7], based
on models of control and data ﬂow for message passing programs.
Lei and Carver propose an approach to reachability testing. Reachability testing is a combination of deterministic and non-deterministic execution, where the
information and the required elements are generated on-the-ﬂy, without static
analysis [6]. This proposal guarantees all feasible synchronization sequences will
be exercised at least once. The lack of static analysis means it cannot say how
many executions are required. This causes the state space explosion problem. In
recent works, Lei et. al [9] presents a combinatorial approach, called t-way, to
reduce the number of synchronization sequences to be executed.
These related works bring relevant improvements for concurrent program testing. However, few works are found that investigate the application of the testing
coverage criteria and supporting tools in the context of multithreading programs.
For these programs, new aspects need to be considered. For instance, data ﬂow
information must consider that an association between one variable deﬁnition
and its use can occur in diﬀerent threads. The implicit inter-thread communication that occurs through shared memory makes complex the test activity. The
investigation of these challenges it is not a trivial task and presents many diﬃculties. To overcome these diﬃculties, we present a family of structural testing
criteria for semaphore-based multithread programs and a new test model for
the support to the criteria. This model includes important features, such as:
synchronization, communication, parallelism and concurrency. These data are
collected using static and dynamic analyses. Information about communication
is obtained after the execution of an instrumented version of the program, using
a post-mortem methodology. This methodology has been adapted from Lei and
Carver work [6]. Testing criteria were deﬁned to exploit the control and data
ﬂows of these programs, considering their sequential and parallel aspects. The

Structural Testing for Semaphore-Based Multithread Programs

339

main contribution of the testing criteria proposed in this paper is to provide
a coverage measure that can be used for evaluating the progress of the testing
activity. This is important to evaluate the quality of test cases, as well as, to
consider that a program has been tested enough. It is important to point out
that the objective this work is not to debug concurrent programs which already
have an error revealed.

2

Model Test for Shared Memory Programs

Let MT = {t0 , t1 , ..., tn−1 } be a multithread program composed of n threads
denoted by ti . Threads can execute diﬀerent functionalities but all they share the
same memory address space. They may also use an additional private memory.
Each thread t has its own control ﬂow graph CFGt that is built by using the same
concepts of traditional programs [3]. In short, a CF G of a thread t is composed of
a set of nodes N t and a set of edges EIt . These edges that link nodes in the same
thread are called intra-thread edges. Each node n in the thread t is represented
by the notation nti , a well-known terminology in the software testing context.
Each node corresponds to a set of commands that are sequentially executed or
can be associated to a synchronization primitive (post or wait ).
A multithread program M T is associated with a Parallel Control Flow Graph
for Shared Memory (PCFGSM ), which is composed of both the CF Gt (for
0 ≤ t < n) and the representation of the synchronization among threads. N
and E represent the set of nodes and edges of the PCFGSM , respectively. For
construction of the PCFGSM , it is assumed that (1) n is ﬁxed and known at
compilation time; (2) there is implicit communication by means of shared variables; (3) there is explicit synchronization using semaphores (which has two
basic atomic primitives: post (or p) and wait (or w)); and (4) initialization and
ﬁnalization of threads act as a synchronization over a virtual semaphore.
Three subsets of N are deﬁned: Nt (nodes in the thread t), Np (nodes with
post primitives) and Nw (nodes with wait primitives). For each nti ∈ Np , a set
Mw (nti ) is associated, such that for each nti ∈ Np , with a post to a semaphore
sem, we deﬁne Mw (nti ) as the set of nodes nqj ∈ Nw , such that exist a thread
q ∈ [0..n − 1] and a wait primitive with respect to (w.r.t.) sem in nqj . In a similar
way, for each nti ∈ Nw , a set Mp (nti ) is associated, such that for each nti ∈ Nw ,
with a wait to a semaphore sem, we deﬁne Mp (nti ) as the set of nodes nqj ∈ Np ,
such that exist a thread q ∈ [0..n − 1] and a post primitive w.r.t. sem in nqj . In
other words, Mw (nti ) contains all possible wait nodes that can match with nti
and Mp (nti ) contains all possible post nodes that can match with nti .
Using the above deﬁnitions, we also deﬁne the set ES ⊂ E that contains edges
that represent the synchronization (edge-s) between two threads, such that:
ES = {(ntj , nqk ) | ntj ∈ Mp (nqk ) ∧ nqk ∈ Mw (ntj )}

(1)

The concurrent program shown in the Fig. 1 is used to illustrate these deﬁnitions. This program implements the producer-consumer problem with limited
buﬀer, using PThreads library in ANSI C. There are three threads: (1) a master,

340

F.S. Sarmanho et al.

Fig. 1. Producer-Consumer implemented with PThreads/ANSI C

which initializes variables and creates the producer and consumer threads; (2) a
producer, which populates the buﬀer; (3) a consumer, which removes items from
the buﬀer for further processing. Table 1 contains values of all sets introduced
above.
Figure 2 shows the PCFGSM for the program in the Fig. 1. t0 , t1 and t2
represent the master, producer and consumer threads, respectively. Dotted lines
represent synchronization edges. Some examples of synchronization edges are:
(92 , 61 ) is a synchronization over semaphore, (90 , 12 ) is a synchronization of
initialization and (121 , 100 ) is a synchronization of ﬁnalization. Note that there
may exist internal synchronization edges, such as (101 , 61 ) and (92 , 52 ) in Fig. 2.
A path π t = (nt1 , nt2 , ..., ntj ), where (nti , nti+1 ) ∈ EIt , is intra-thread if it has no
synchronization edges. A path that includes at least one synchronization edge
is called an inter-thread path and is denoted by Π = (PATHS, SYNC ), where
PATHS = {π 1 , π 2 , ..., π n } and SYNC = {(pti , wjq ) | (pti , wjq ) ∈ ES } [7]. Here pti is
a post node i in thread t and wjq is a wait node j in thread q.
PCFGSM also captures information about data ﬂow. Besides local variables,
multithread programs have more two special types of variables: (1) shared variables, used for communication; and (2) synchronization variables, used by
semaphores. V denotes all variables. VLt ⊂ V contains local variables of thread t.
VC ⊂ V contains the shared variables and VS ⊂ V contains the synchronization
variables. Therefore, we deﬁne: def (nti ) = {x | x is a variable deﬁned in nti }.

Structural Testing for Semaphore-Based Multithread Programs

341

Table 1. Sets of the test model introduced
for the program shown in Fig. 1

Fig. 2. PCFGSM graph that represents
the program shown in Fig. 1

n=3
MT = {t0 , t1 , t2 }
N0 = {10 , 20 , 30 , ..., 120 }
N1 = {11 , 21 , 31 , ..., 121 }
N2 = {12 , 22 , 32 , ..., 122 }
N = N0 ∪ N1 ∪ N2
Np = {30 , 50 , 60 , 80 , 90 , 101 , 111 , 121 , 92 , 102 , 122 }
Nw = {100 , 110 , 11 , 51 , 61 , 12 , 42 , 52 }
EI0 = {(10 , 20 ), (20 , 30 ), ..., (100 , 110 ), (110 , 120 )}
EI1 = {(11 , 21 ), (21 , 31 ), ..., (111 , 31 ), (31 , 121 )}
EI2 = {(12 , 22 ), (22 , 32 ), ..., (112 , 32 ), (32 , 122 )}
Es = {(30 , 61 ), (30 , 52 ), (50 , 51 ), (60 , 51 ), (80 , 11 ),
(90 , 12 ), (101 , 52 ), (101 , 61 ), (111 , 42 ), (121 , 100 ),
(121 , 110 ), (92 , 61 ), (92 , 52 ), (102 , 51 ), (122 , 100 ),
(122 , 110 )}
E = EI0 ∪ EI1 ∪ EI2 ∪ Es
Mw (30 ) = {61 , 52 }
Mp (100 ) = {121 , 122 }
Mw (50 ) = {51 }
Mp (110 ) = {121 , 122 }
Mw (60 ) = {51 }
Mp (11 ) = {80 }
Mw (80 ) = {11 }
Mp (51 ) = {50 , 60 , 102 }
Mw (90 ) = {12 }
Mp (61 ) = {30 , 101 , 92 }
Mw (101 ) = {61 , 52 }
Mp (12 ) = {90 }
Mw (111 ) = {42 }
Mp (42 ) = {111 }
Mw (121 ) = {100 , 110 } Mp (52 ) = {30 , 101 , 92 }
Mw (92 ) = {52 , 61 }
Mw (102 ) = {51 }
Mw (122 ) = {100 , 110 }
VL0 = {prod h, cons h}
VL1 = {prod, item}
VL2 = {cons, my item}
VC = {queue, avail}
VS = {mutex, f ull, empty}
def (10 ) = {avail}
def (91 ) = {prod}
def (21 ) = {prod}
def (22 ) = {cons}
def (41 ) = {item}
def (62 ) = {cons}
def (71 ) = {queue}
def (72 ) = {avail}
def (81 ) = {avail}
def (82 ) = {my item}

A path π t = (n1 , n2 , ..., nj , nk ) is deﬁnition-clear w.r.t. a local variable c ∈ VLt
from n1 to node nk or edge (nj , nk ), if x ∈ def (n1 ) and x ∈
/ def (ni ), for i ∈ [2..j].
The notion deﬁnition-clear path is not applicable to shared variables because the
communication (deﬁnition and use of shared variables) in threads is implicit. It
is hard to establish a path that statically deﬁnes and uses shared variables. In
Secion 2.1, we present a method to determine execution-based deﬁnition-clear
paths for shared variables using a post-mortem methodology.
The use of variables in multithread programs can be: computational use (cuse): computational statements related to local variable x ∈ VLt ; predicative
use (p-use): conditional statements that modify the control ﬂow of the thread
and are related to local variable x ∈ VLt ; synchronization use (sync-use):
synchronization statements on semaphores-variable x ∈ VS ;communicational
c-use (comm-c-use): computational statements related to shared variable

342

F.S. Sarmanho et al.

x ∈ VC ; and communicational p-use (comm-p-use): conditional statements
used on control ﬂow of the thread, related to shared variable x ∈ VC .
Based on these deﬁnitions, we establish associations between variable deﬁnition and use. Five kinds of associations are deﬁned: c-use association: is
deﬁned by a triple (nti , ntj , x) iﬀ x ∈ VLt , x ∈ def (nti ), ntj has a c-use of x and
there is at least one deﬁnition-clear path w.r.t. x from nti to ntj . p-use association: is deﬁned by a triple (nti , (ntj , ntk ), x) iﬀ x ∈ VLt , x ∈ def (nti ), (ntj , ntk )
has a p-use of x and there is at least one deﬁnition-clear path w.r.t. x from nti
to (ntj , ntk ). sync-use association: is deﬁned by a triple (nti , (ntj , nqk ), sem) iﬀ
sem ∈ VS , (ntj , nqk ) has a sync-use of sem and there is at least one deﬁnition-clear
path w.r.t. sem from nti to (ntj , nqk ). comm-c-use association: is deﬁned by a
triple (nti , nqj , x) iﬀ x ∈ VC , x ∈ def (nti ) and nqj has a c-use of the shared variable
x. comm-p-use association: is deﬁned by a triple (nti , (nqj , nqk ), x) iﬀ x ∈ VC ,
x ∈ def (nti ) and (nqj , nqk ) has a p-use of the shared variable x.
2.1

Applying Timestamps to Determine Implicit Communication

In this section, we present a method to establish pairs of deﬁnition and use of
shared variables. These pairs are obtained after execution of the multithread program identifying the order that the concurrent events happened. Lamport [11]
presented a way to order concurrent events by means of a happens-before relationship. This relationship can determine if an event e1 occurs before an event
e2 , denoted by e1 ≺ e2 .
To obtain this happens-before relationship it is necessary to assign timestamps
to concurrent events. Lie and Carver [6] presented a method to assign timestamps
that use local logical clock. We adapt this method to assign timestamps in our
testing method. The method obtains all synchronizations that happened for an
execution and thus generates the communication events.
The method assigns a local logical clock vector, denoted by ti .cv, for each
thread ti . This vector has dimension n, where n is the total number of threads.
Each position i ∈ [0..n − 1] on the clock vector is associated to thread ti . The
clock-vector position i is updated when a new event occurs in thread ti . For
instance, observe the c1 event in t0 (before the clock vector was [0, 0, 0]). When
a synchronization event occurs in tj other i positions, for i = j, of the clockvector can also be updated. For instance, considering the match (p2 , w2 ). Before
this synchronization the clock vector associated with t2 was [0, 0, 0]. After, the
values were updated to [2, 4, 1].
The logical space-time diagram shown in the Fig. 3 illustrates the method,
using a hypothetical example. This diagram only considers events of synchronization (pi and wj ) and communication (ck ). Vertical lines represent the logical
time of each thread. Arrows among threads represent synchronization events
matching post and wait events. For instance, wait events w1 and w2 race the
same post event p1 , but the match (w1 , p1 ) has occurred.
It is possible that a wait primitive has several posts to match. These posts are
inserted in a queue. Our method considers the access criterion LIFO to get the
happens-before relationship. We chose LIFO to get most updated timestamps.

Structural Testing for Semaphore-Based Multithread Programs

Fig. 3. Example of logical space-time diagram

343

Fig. 4. Example of nondeterminism

Rules deﬁned in [6] are used to establish if an event e1 happens-before an
event e2 . These rules are not showed here for sake of space. With this method, it
is possible to show the communications that happened for a program execution.

3

Coverage Criteria

Based on the control, data and communication ﬂow models and deﬁnitions presented in previous section, we propose two sets of structural testing criteria for
shared-memory parallel programs. These criteria allow the testing of sequential
and parallel aspects of the programs.
Control Flow and Synchronization-based Criteria
All-p-nodes criterion: the test set must execute all nodes nti ∈ Np .
All-w-nodes criterion: the test set must execute all nodes nti ∈ Nw .
All-nodes criterion: the test set must execute all nodes nti ∈ N .
All-s-edges criterion: the test set must execute all sync edges (nti , nqj ) ∈ Es .
All-edges criterion: the test set must execute all edges (ni , nj ) ∈ E.
Data Flow and Communication-based Criteria
All-def-comm criterion: the test set must execute paths that cover an association comm-c-use or comm-p-use for all deﬁnition of x ∈ Vc .
All-def criterion: the test set must execute paths that cover an association
c-use, p-use, comm-c-use or comm-p-use for all deﬁnition of x ∈ def (nti ).
All-comm-c-use criterion: the test set must execute paths that cover
all comm-c-use associations.
All-comm-p-use criterion: the test set must execute paths that cover all
comm-p-use associations.
All-c-use criterion: the test set must execute paths that cover all c-use
associations.
All-p-use criterion: the test set must execute paths that cover all p-use associations.

344

F.S. Sarmanho et al.

All-sync-use criterion: the test set must execute paths that cover all sync-use
associations.
It is necessary to know which path was exercised to evaluate the required
elements covered from an execution. One option to obtain this information is to
instrument the source code to produce execution trace. This instrumentation can
change the original program behaviour. However, this interference does not aﬀect
the structural testing proposed here, because it does not prevent the extraction
and the future execution of all possible pairs of synchronization.
Due to non-determinism, executions of a program with the same input can
cause diﬀerent event sequences to occur. The Fig. 4 shows the example where
the nodes 81 and 91 in t1 have non-deterministic waits and in nodes 20 (t0 ) and
22 (t2 ) have post to t1 . All these operations are on the same semaphore. This
case illustrates the possible synchronizations among these threads. During the
testing activity is essential to guarantee that these synchronizations are executed.
Controlled execution is a mechanism used to achieve deterministic execution, i.e.
two executions of the program with the same input are guaranteed to execute
the same instruction and the speciﬁed synchronization sequence. The controlled
execution used in this work was adapted from Carver method [12].
The Table 2 shows some required elements for the criteria deﬁned in this
section. These required elements are taken on the static analysis.
Table 2. Some required elements by the proposed criteria for the program of the Fig. 1
Criteria

Required Elements

30 , 50 , 60 , 80 , 90 , 101 , 111 , 121 , 92 , 102 , 122
100 , 110 , 11 , 51 , 61 , 12 , 42 , 52
10 , 20 , 30 , ..., 120 , 11 , 21 , ..., 121 , 12 , 22 , ..., 122
(30 , 61 ), (30 , 52 ), (50 , 51 ), (60 , 51 ), (80 , 11 ), (90 , 12 ),
All-edges-s
(101 , 52 ), (101 , 61 ), (111 , 42 ), (121 , 100 ), (121 , 110 ), (92 , 61 ), ...
(10 , 20 ), (20 , 30 ), ..., (110 , 120 ), (11 , 21 ), (21 , 31 ), ..., (111 , 31 ), (31 , 121 ),
All-edges
(12 , 22 ), ..., (112 , 32 ), (32 , 122 ), (30 , 61 ), (30 , 52 ), ..., (90 , 12 ), (101 , 61 ), ...
All-def-comm (10 , 71 , avail), (81 , 71 , avail), (72 , 82 , avail), (71 , 82 , queue)
(10 , 82 , avail), (21 , (31 , 41 ), prod), (41 , 71 , item), (71 , 82 , queue),
All-def
(81 , 71 , avail), (62 , (32 , 122 ), cons), ...
(10 , 71 , avail), (10 , 72 , avail), (72 , 72 , avail),
All-comm-c-use
(72 , 81 , avail), (71 , 82 , queue), ...
All-comm-p-use ∅
(81 , 72 , avail), (72 , 82 , avail), (21 , 91 , prod), (91 , 91 , prod),
All-c-use
(41 , 71 , item), (71 , 82 , queue), (82 , 112 , myi tem)...
(21 , (31 , 41 ), prod), (21 , (31 , 121 ), prod), (62 , (32 , 42 ), cons),
All-p-use
(62 , (32 , 122 ), cons), ...
(20 , (30 , 61 ), mutex), (20 , (30 , 51 ), mutex), (50 , (60 , 51 ), empty),
All-sync-use
(61 , (101 , 61 ), mutex), (52 , (92 , 61 ), mutex), ...
All-nodes-p
All-nodes-w
All-nodes

4

Total
11
8
36
16
51
4
10
13
0
16
8
14

Case Study

In order to illustrate the proposed testing criteria, consider the program in
Fig. 1. The buﬀer is limited to two produced/consumed items. Due to threads
scheduling, two executions are possible: (1) produce, consume, produce, consume

Structural Testing for Semaphore-Based Multithread Programs

345

(PCPC ); (2) produce, produce, consume, consume (PPCC ). Using controlled
execution, it is possible to force the order these executions. Considering to ﬁrst
execution (PCPC) the executed paths and their synchronizations are:
π 0 = {1,2,3,4,5,6,8,9,10,11,12}
π 1 = {1,2,3,4,5,6,8,9,10,11,3,4,5,6,7,8,9,10,11,12}
π 2 = {1,2,3,4,5,6,8,9,10,11,3,4,5,6,7,8,9,10,11,12}
SYNC = {(80 , 11 ), (60 , 51 ), (30 , 61 ), (90 , 12 ), (111 , 42 ), (101 , 52 ),
(50 , 51 ), (92 , 61 ), (121 , 100 ), (111 , 42 ), (101 , 52 ), (122 , 110 )}
For this execution, some coverd elements are the edges-s (60 , 51 ) and
(122 , 110 ), the comm-c-use (10 , 71 , avail), (72 , 81 , avail), (71 , 82 , queue).
To illustrate how the testing criteria can contribute to reveal faults, consider
that the mutex semaphore was initialized with the value 0 or 2 on the main
function (code line 17). This will cause a deadlock state or an inappropriate
concurrent access to shared variables respectively. An execution that covers the
required elements (30 , 61 ) and (10 , 72 , avail), edges-s and comm-c-use respectively, will reveal the fault for the deadlock case. The execution of the required
element comm-c-uses (81 , 82 , queue) will reveal the fault for the case of inappropriate concurrent access. For both cases other required elements can also reveal
these faults.
To illustrate a communication fault consider that avail was initialized with
1 (10 ) and all synchronizations are correct. This fault can be revealed with the
execution of the required elements comm-c-use (72 , 72 , avail) and edge-s (92 , 52 ).
It will be necessary the execution of the PPCC sequence to reveal this fault, since
the paths executed with the PCPC sequence do not reveal it.

5

Conclusion

Concurrent programs testing is not a trivial activity. This paper contributes in
this context by addressing some of these problems for semaphore-based multithreading programs. The paper introduced both structural testing criteria to
validate shared-memory parallel programs and a new model test to capture information about control, data, communication and synchronization from these
programs. The paper also presents a post-mortem method based on timestamps
to determine which communications (related with shared variables) happened in
an execution. This information is important to establish the pairs of deﬁnition
and use of the shared variables.
The proposed testing criteria are based on models of control and data ﬂow and
include the main features of the most used PThreads/ANSI C programs. The
model considers communication, concurrency and synchronization faults among
threads and also fault related to sequential aspects of each thread.
The use of the proposed criteria contributes to improve the quality of the
test cases. The criteria oﬀer a coverage measure that can be used in two testing
procedures. Firstly, for generation of test cases, where these criteria can be used
as guideline for test data selection. Secondly, for the evaluation of a test set. The

346

F.S. Sarmanho et al.

criteria can be used to determine when the testing activity can be ended and
also to compare test sets.
The evolution of our work on this subject is directed to several lines of research: 1) development of a supporting tool for the introduced testing criteria (it
is now being implemented); 2) development of experiments to reﬁne and evaluate the testing criteria; 3) implementation of mechanisms to validate multithread
programs that dynamically create threads; and 4) conduction of an experiment
to evaluate the eﬃcacy of the generated test data against ad hoc test sets.

References
[1] Yang, C.D., Pollock, L.L.: The challenges in automated testing of multithreaded
programs. In: 14th Int. Conference on Testing Computer Software, pp. 157–166
(1997)
[2] Dongarra, J.J., Walker, D.W.: The quest for petascale computing. Computing in
Science and Engineering 03(3), 32–39 (2001)
[3] Rapps, S., Weyuker, E.: Selecting software test data using data ﬂow information.
IEEE Transactions on Software Engineering SE-11(4), 367–375 (1985)
[4] Taylor, R.N., Levine, D.L., Kelly, C.D.: Structural testing of concurrent programs.
IEEE Trans. on Software Engineering 18(3), 206–215 (1992)
[5] Yang, C.S.D., Souter, A.L., Pollock, L.L.: All-du-path coverage for parallel programs. In: Young, M. (ed.) ISSTA 1998: Proc. of the ACM SIGSOFT Int. Symposium on Software Testing and Analysis, pp. 153–162 (1998)
[6] Lei, Y., Carver, R.: Reachability testing of concurrent programs. IEEE Trans. on
Software Engineering 32(6), 382–403 (2006)
[7] Vergilio, S.R., Souza, S.R.S., Souza, P.S.L.: Coverage testing criteria for messagepassing parallel programs. In: 6th LATW, Salvador, Ba, pp. 161–166 (2005)
[8] Edelstein, O., Farchi, E., Goldin, E., Nir, Y., Ratsaby, G., Ur, S.: Framework for
testing multi-threaded Java programs. Concurrency and Computation: Practice
and Experience 15(3–5), 485–499 (2003)
[9] Lei, Y., Carver, R.H., Kacker, R., Kung, D.: A combinatorial testing strategy for
concurrent programs. Softw. Test., Verif. Reliab. 17(4), 207–225 (2007)
[10] Yang, C.S.D., Pollock, L.L.: All-uses testing of shared memory parallel programs.
Softw. Test, Verif. Reliab. 13(1), 3–24 (2003)
[11] Lamport, L.: The implementation of reliable distributed multiprocess systems.
Computer Networks 2, 95–114 (1978)
[12] Carver, R.H., Tai, K.C.: Replay and testing for concurrent programs. IEEE
Softw. 8(2), 66–74 (1991)

