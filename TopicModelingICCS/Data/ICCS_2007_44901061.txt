Towards a Less Destructive Crossover Operator Using
Immunity Theory
Yingzhou Bi 1,2, Lixin Ding1, and Weiqin Ying1
1

State key laboratory of software engineering, Wuhan University, Wuhan 430072, China
2
Department of Information Technology, Guangxi Teachers Education University,
Nanning 530001, China
byzhou@163.com

Abstract. When searching for good scheme, a good solution can be destroyed
by an inappropriate choice of crossover points. Furthermore, because of the
randomicity of crossover, mutation and selection, a better solution can hardly
reach in last stage in EA, and the solution always traps in local optimal. Faced
to “exploding” solution space, it is tough to find high quality solution just by
increasing the population size, diversity of searching, and the number of iteration. In this paper, we design the immunity operator to improve the crossover
result by utilizing the immunity theory. As the “guided mutation operator”, the
immunity operator substituted the “blind mutation operator” in normal EA, to
restrain the degenerate phenomenon during the evolutionary process. We examine the algorithm with examples of TSP and gain promising result.
Keywords: Crossover operator, Immunity operator, Traveling salesman problem.

1 Introduction
The role of crossover in evolutionary algorithms is to create new individuals from old
ones [1]. During the process of stochastic search, crossover is considered to be the
major driving force behind EA. However, when searching for good scheme, standard
crossover is widely accepted as being a largely destructive operator[2]; a simple one
point crossover operator generates an individual by selecting a crossover point randomly from a parent , then splitting both parents at this point and creating two children by exchanging the tails. The randomness of this operator makes it mostly destructive (generates children inferior to their parents).
Classic EA uses little problem specific knowledge, so its’ efficiency is usually low.
In order to improve EA’s efficiency, we try to have other methods or data structures
incorporated into it. This category of algorithm is very successful in practice and
forms a rapid growing research area with great potential [3-4]. In order to improve the
algorithmic efficiency, the immune genetic algorithm (IGA) is presented in [5], which
utilizes some characteristics and knowledge in the pending problems for restraining
the degenerative phenomena during evolution.
In this paper, we firstly analyze the destructive and constructive aspects of crossover
and mutation in section 2, and then design a novel immunity genetic algorithm in
section 3: the “blind mutation operator” is substituted by the “guided mutation operator”.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 1061–1067, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1062

Y. Bi, L. Ding , and W. Ying

Finally, we compare the novel algorithm and canonical genetic algorithm with the example of traveling salesman problem.

2 Disruption and Construction of Crossover
The disruption of crossover refers to the offspring of an individual in a schema Hk no
longer belong to schema Hk after crossover. It can be depicted as fig.1: P1 is a member of a third-order schema H3, and P2 is an arbitrary string. If the two parents have
not matching alleles at position d2 or they have not matching alleles at poison d1 and
d3, the schema H3 should be disrupted.

Fig. 1. An example of two-point crossover. P1 is a member of a third-order schema H3, and P2
is an arbitrary string.

The construction of crossover refers to having crossover create an instance of a
schema Hk from both parents, where one parent is in schema Hm ,while the other parent is the schema Hn, and k=m+n. Figure 2 provides a pictorial example. P1 is a member of a second-order schema, and P2 is a member of another second-order schema. A
higher schema H4 is constructed by crossover.

Fig. 2. An example of construction of two-point crossover. P1 is a member of a two-order
schema H2, and P2 is a member of another two-order schema H2.

Based on the systemic analyze of crossover and mutation, literature [6] presents
some general results: (1) all forms of crossover are more disruptive of high-order
schemas and become less disruptive when the population converges.(2) more disruptive crossover are more likely to construct(and vice versa). This has proven a NoFree-Lunch Theorem with respect to the disruption and construction aspects of
crossover. (3) Mutation can achieve any level of disruption that crossover can
achieve, however, from a construction point of view; crossover is more powerful
than mutation.

Towards a Less Destructive Crossover Operator Using Immunity Theory

1063

3 A Novel Algorithm with Immunity Operator as the “Guided
Mutation Operator”
The most remarkable role of immune system is the protection of the organism against
the attack of disease, and the elimination of malfunctioning cells. Inspired by the
theory of immunity, one main idea of immunity computation is to abstract some useful problem-specific knowledge (vaccine) from the pending problem (antigen), and
utilize this knowledge to search the solution (antibody). In TSP, a solution with high
fitness should be composed of most short links between nodes, it means the usher and
subsequence of a node in a roundtrip is always its near neighbor, and here, we called
it “principle of near neighbor”. If the principle is disobeyed, the roundtrip will be
composed of lots of long links, and the total length must be very long. So we should
find the near neighbor of all nodes at the beginning of algorithm and the near
neighbor of nodes are selected by the distance between them. Usually, we only consider five nodes as near neighbor. The principle of near neighbor and the near
neighbor of every node are the vaccine for TSP.
3.1 Vaccinations
Vaccination means modifying the genes on some bits of the candidate solution with
priori knowledge.
1) Analyze all links in the candidate roundtrip: record each pair of nodes of the
long links (if a solution composing n links, we usually consider n/2~n/3 longer links)
and the distance between them with a structure array. Here we called the structure
array update-array; every element in update-array A has three parts: two nodes and a
distance, where one node is called resource-nodes and another node is called destinynodes. The update-array A is sorted in descend-order according the distance in its
element.
2) Examine all the resource-node in update-array A whether the destiny-node is its
near neighbor. For example, for any element in update-array A, suppose its resourcenode is Va ,and its destiny-node is Vb ,if Vb is not near neighbor of Va ,it means something is wrong in this gene, repairing this gene may increase the fitness of the candidate
solution. Inspired by 2-change and 3-change algorithms, which have a time complexity
of O(n2) and O(n3) respectively [7], we present 2-repair and 3-repair operators to repair the malfunction genes in candidate solution, however their time complexity are
O(n),for every node we only consider its near neighbor and the number of near
neighbor is usually 5~8.
3) 2-repair operator: for a long link (Va,Vb),if the destiny-node Vb is not 2-nearest
neighbor of resource-node Va, then select a node Vc from the near neighbor of Va ,
obviously we have d(Va,Vb)> d(Va,Vc). Suppose node Vd is subsequence of node Vc
and the solution is expressed as π={V1,V2,…Va,Vb…Vc,Vd…Vn},its total length is
r

D( π ) = ∑ d i + d(Va ,Vb )+
i=1

t

∑ d + d(V ,V
i

i=r+2

c

d

n

)+ ∑ d i .
i=t+2

(1)

1064

Y. Bi, L. Ding , and W. Ying

if d(Va,Vb)+ d(Vc,Vd)> d(Va,Vc)+ d(Vb,Vd),then we reverse all the nodes between Vb
and Vc(including Vb,Vc), then get a new solution π’= {V1,V2,…Va, Vc…Vb, Vd…Vn }, its
total length is
r

D( π ') = ∑ d i + d(Va ,Vc )+
i=1

t

∑

i=r+2

n

d i' + d(Vb ,Vd )+ ∑ d i .

(2)

i=t+2

for the symmetry TSP, we always have di=di’ , so under the condition d(Va,Vb)+
d(Vc,Vd)> d(Va,Vc)+ d(Vb,Vd),it is obvious that D(π)>D(π’),which means the new solution is better.

Fig. 3. An example of vaccination of 2-repair for TSP

4) 3-repair operator: it is similar to 2-repair, but it exchange 3 links in every repairing. The mechanism is pictorial in figure 4: the original solution is
π={V1,V2,…Va,Vb…Vc,Vd,Ve…Vn},
if d(Va,Vb)+d(Vc,Vd)+d(Vd,Ve)>d(Va,Vd)+d(Vd,Vb)+d(Vc,Ve) then exchange 3 links:
the 3 bold links are substituted by 3 dash links, and the new solution become
π’={V1,V2,…Va, Vd ,Vb…Vc, Ve…Vn}.It is obvious that D(π)>D(π’).

Fig. 4. An example of vaccination of 3-repair for TSP

3.2 A Novel Algorithm for TSP
According to the analysis in section 2, from a construction point of view, crossover is
more powerful than mutation. We present a novel algorithm for TSP: the “blind” mutation operator in canonical genetic algorithm is substituted by the “guided” mutation

Towards a Less Destructive Crossover Operator Using Immunity Theory

1065

operator, which is immunity operator. The aim of leading immune concepts and methods into GA is to utilize the problem-specific knowledge for refraining the destruction
of crossover while make useful of its construction during evolutionary process.
Algorithm 1
1) Initialize the population with greedy algorithm.
2) Abstract the vaccine.
3) Evaluate the individuals, if the solution quality is satisfied then stop, or if
reach the maximal iteration time but the solution quality is not satisfied , then
repair the best individual with 3-repair operator(in section 3.1) and stop; otherwise, continue the following.
4) Crossover: select two parents and perform crossover.
5) Vaccination: repair the resulting offspring with 2-repair operator (in section
3.1) with probability Pi, and insert the new candidates into next generation.
6) Go to step 3.

4 Experimental Results
We examine algorithm 1 and canonical genetic algorithm(CGA in brief, it’s crossover
operator is the Order Crossover designed by Davis, and mutation operator is the Inversion Mutation [1].) with 4 TSP instances: two of them are TSP200 and TSP500, where
the nodes in TSP200 and TSP500 are 200 and 500 respectively; The location of all the
nodes are generated randomly in two-dimension space: x ∈ [0,1000],y ∈ [0,1000],the
distance between nodes is Euclidean distance. Another two instances are fl417, att532,
which come from TSPLIB [8]. The experiments are carried on a PC with PIV 2.93
GHz CPU, 1G RAM and Windows XP operation system.
In order to compare the performance between algorithm 1 and CGA, we design the
parameter as following: in CGA, the size of population is 100;the crossover and the
mutation probabilities are 0.5 and 0.4,respectively; the number of generations is
20000; in algorithm 1, the size of population is 50; the crossover and the immunity
probabilities are 0.8 and 0.85,respectively;the number of generations is 100.The experimental results of CGA and algorithm 1 over 20 independent runs respectively are
listed in Table 1, where n is the number of nodes, D0 is the known minimal tour
length: the results are gained by Concorde package [9] (in att532 the minimal tour
length by Concorde package is 86729 while literature [10] take it as 87550 )and time
denotes the average run time, while δ denotes the relative difference[10] which is
defined in Equation (3)

⎛

T

⎞

δ % = ⎜ ∑ (Di - D0 ) ⎟ /(T × D0 ) × 100%
⎝ i=1

⎠

(3)

Where Di denotes the minimal tour length obtained from the i-th run, T is the number
of independent runs.

1066

Y. Bi, L. Ding , and W. Ying
Table 1. Compare the performance between CGA and algorithm 1
TSP
Instances
TSP200
TSP500
Fl417
Att532

n

D0

200
500
417
532

10610
16310
11861
86729

CGA
7.9
4.4
2.9
6.4

δ
Algorithm1
0.3
1.1
1.2
1.7

Time(second)
CGA
Algorithm 1
136
10
425
99
315
39
473
108

For the analysis of the role of crossover and immunity operator in immunityevolutionary algorithm, we perform the algorithm 1 with different crossover
probabilities Pc while the immunity probability Pi is always 0.85, given population
size =50, iterative times= 100. The experimental results of algorithm 1 over 20 independent runs respectively are shown in table 2, where δ denotes the relative difference
[10] which is defined in Equation (3).
Table 2. Compare the role of crossover and immunity operator in algorithm 1
TSP
Instances
TSP200
TSP500
Fl417
Att532

δ
Pc=0.00
7.1
3.1
6.1
3.9

Pc=0.50

Pc=0.80

Pc=0.99

1.0
1.7
2.1
2.4

0.3
1.1
1.2
1.7

0.3
1.1
1.1
1.5

Based on the results in table 1 to table 2, we can make some general observations:
Firstly, evolutionary algorithm can reach a relatively good solution from a bad
solution after a stochastic trial-and-error. Because of the destruction of crossover and
mutation, a better solution quality can hardly reach in last stage in EA, and the solution always trap in local optimal. Faced to “exploding” solution space, it is tough to
find high quality solution just by increasing the population size (in CGA the population size is 100, while it is only 50 in algorithm 1), diversity of searching, and the
number of iteration (the maximum number of generations in CGA is 20000, while it is
only 100 in algorithm 1). However we can restrain the destruction of crossover by
repairing the malfunction genes in candidate solution, and utilize its construction in
our novel algorithm with immunity operator as “guided” mutation.
Given different crossover probabilities, algorithm 1 has different performance: the
bigger is crossover probability, the better is performance, however, when the crossover probability reaches 0.8, the performance will increase little, while it need more
time. If the crossover probability is 0, it means the crossover is turned off, the performance is the worst. The experimental results validate the construction of crossover.
Furthermore, when compared with the pure artificial immunity algorithm [10] in TSP
instance att532, the result of algorithm 1 is better: if consider the minimal tour length
is 87550, the relative difference is 0.7%, while the relative difference is 2.21% in
reference [10].

Towards a Less Destructive Crossover Operator Using Immunity Theory

1067

5 Conclusions and Future Work
By utilizing the problem-specific knowledge, immunity operator can restrict the
degenerative phenomena arising from the evolutionary process, and guaranteeing that
the search will concentrate in the regions containing high quality solutions. Artificial
immunity theory can contribute with the already established methodologies in order to
mutually improve their performances and application domains. It shows that the combination of an evolutionary and a heuristic method--a hybrid evolutionary algorithm-performs better than either of its “parent” algorithms alone.
For future work, we will use the proposed method on other combinational problems or even real optimization problems.
Acknowledgments. This work is supported in part by the National Natural Science
Foundation of China (Grant no. 60204001), and Natural Science Foundation of
Guangxi (Grant no. 0679018).

References
1. Eiben, A.E, Smith, J.E.: Introduction to Evolutionary Computing. Berlin Heidelberg New
York Press, Springer-Verlag (2003)
2. Majeed, H., Ryan,C.: A Less Destructive, Context-Aware Crossover Operator for
GP.Lecture Notes in Computer Science, Vol.3905.Berlin /Heidelberg, Springer-Verlag
(2006) 36–48
3. Yao, X., Xu, Y.: Recent Advance in Evolutionary Computation. Journ of Comput Sci &
Technol, 21(1) (2006) 1–18
4. Blum C., Roli A.: Metaheuristics in Combinatorial Optimization: Overview and Conceptual Comparison. ACM Computing Surveys, 35(3)( 2003) 268–308
5. Jiao, L., Wang,L.: A novel genetic algorithm based on immunity. IEEE Transactions on
System s, M an, and Cybernetics, 30(5) (2000) 552–561
6. Spears, W.M.: The role of Mutation and Recombination in Evolutionary Algorithms. Virginnia: George Mason University (1998)
7. Helsgaun, K.: An Effective Implementation of the Lin-Kernighan Traveling Salesman
Heuristic. http://www.akira.ruc.dk/~keld/
8. http://www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/
9. Concorde TSP solver for windows. http://www.tsp.gatech.edu/concorde/index.html
10. Gong, M., Jiao, L., Zhang, L.: Solving Tranveling Salesman Problem by Artificial Immunity Responese. T.-D Wang et al.(Eds.):SEAL 2006. Lecture Notes in Computer Science,
Vol. 4247. Springer-Verlag, Berlin Heidelberg (2006) 64–71

