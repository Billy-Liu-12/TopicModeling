Transactions and Groups as Generic Building Blocks for
Software Fault Tolerance
Marta Pati˜no-Mart´ınez1 , Ricardo Jim´enez-Peris1 , and Alexander Romanovsky2
1

2

Technical University of Madrid (UPM), Spain
{mpatino,rjimenez}@fi.upm.es
School of Computing Science, University of Newcastle upon Tyne, UK
Alexander.Romanovsky@newcastle.ac.uk

Abstract. During the last decades several mechanisms for tolerating errors caused
by software (design) faults have been put forward. Unfortunately only few experimental programming languages have incorporated them, so these schemes are
not available in programming languages and systems that are used in developing modern applications. This is why programmers must either implement these
mechanisms themselves or follow very complicated guidelines. It is not the case
for software mechanisms developed for tolerating hardware faults (site crashes).
Many programming languages and development systems provide mechanisms to
cope with site failures. For instance, transactions are defined as one of the basic
services in CORBA, Enterprise JavaBeans and Jini. In this paper we demonstrate
how to implement mechanisms to tolerate software faults on the top of the mechanisms proposed for tolerating hardware errors.

1

Introduction

Many schemes and techniques have been developed for dealing with both hardware and
software faults. With the increasing use of distributed systems, many of the software
techniques for tolerating (site) hardware faults like transactions, group communication,
and exception handling have been incorporated into a number of software development
kits. In contrast, the use of software fault tolerance in order to detect errors caused
by design faults is not particularly widespread. There are two important factors that
make software fault tolerance more and more important in the development of new
applications. On one hand the complexity of software increases more and more. The
development of new distributed applications, such as web services, have an inherent
complexity that centralized applications do not exhibit. On the other hand, these new
applications are not developed from scratch. Many software components are (freely)
available ready to be used in order to build new applications. Due to this fact, the cost of
This research has been partially funded by the Spanish National Research Council, CICYT,
under grant TIC2001-1586-C03-02, and by European IST DSoS project (IST-1999-11585).
J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 208–219, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Transactions and Groups as Generic Building Blocks for Software Fault Tolerance

209

software fault tolerance, which is generally based on software diversity, is not prohibitive
any more. However, software fault tolerance techniques are not easy to implement nor
available in current software development kits. In this paper we explore similarities in
some of the software and hardware fault tolerance techniques. The contribution of the
paper is that it proposes ways of implementing software fault tolerance on top of hardware fault tolerance techniques. The applicability of these ideas is demonstrated with
a distributed programming language, Transactional Drago, supporting transactions and
group communication. Although we use a particular programming language, our analysis shows that minimal modifications will be required to allow the same approaches
to be used in building software fault tolerance on top of current middleware systems.
For example, support for transactions is available in CORBA, Jini, and Enterprise Javabeans. Moreover, a group service has been recently included in Fault Tolerant CORBA
specification [OMG00]. Most of the behaviour we assume Transactional Drago provides for groups is part of this specification or will soon be included. We assume that
other middleware technology will follow a similar approach to that of the Fault Tolerant
CORBA.

2

Model and Definitions

The system consists of a set of sites (nodes) S = {S1 , S2 , ..., SN } provided with stable memory that communicate by exchanging messages through reliable channels. We
assume a partially synchronous system where nodes fail by crashing (no Byzantine failures). Failed sites may recover with its stable memory intact. Sites are provided with a
group communication system (which provides reliable multicast and group membership
services) supporting strong virtual synchrony [FvR95]. Group membership services
provide the notion of view (current connected and active processes). Changes in the
composition of a view are delivered to the application. We assume a primary component
membership [CKV01]. Strong virtual synchrony ensures that messages are delivered
in the same view they were sent and that two processes transiting to a new view have
delivered the same set of messages in the previous view. Regarding ordering guarantees
of multicast messages, we will use total order multicast, which ensures that messages
are delivered in the same order at all group members.
A transaction is a sequence of operations that are executed atomically, that is, they are
all executed (the transaction commits) or the result is as if none of them had been executed
(it aborts). Two operations on the same data item conflict if they belong to different
transactions and at least one of them modifies the data item. Concurrent transactions
with conflicting operations must be serialized [BHG87]. That is, the final effect of
the concurrent execution of conflicting transactions is equivalent to some sequential
execution. Transactions can be nested (subtransactions). Transactions that are not nested
are called top-level transactions. If a transaction aborts, all its subtransactions and their
descendants will also abort. However, a subtransaction abortion does not compromise
the result of its parent transaction (the enclosing one).

210

3

M. Pati˜no-Mart´ınez, R. Jim´enez-Peris, and A. Romanovsky

Transactional Drago

Transactional Drago [PJA98] is an extension to Ada [Ada95] and Drago [MAAG96] for
programming distributed transactional applications. Transactional Drago implements
group transactions [PJA02], a transaction model that supports multithreaded transactions.
Programmers can start transactions using the begin-end transaction statement
or transactional block. Transactional blocks are similar to block statements in Ada.
They have a declarative section, a body and can have exception handlers. The statements
inside a transactional block are executed within a transaction.A transactional block can be
nested leading to a nested transaction structure. Any unhandled exception in a transaction
causes transaction abort. The exception is signalled in the transaction enclosing scope.
All data used in a transaction are subject to concurrency control (locks) and are
recoverable. If a transaction aborts, data will be restored to the value they had before
executing that transaction. Concurrency control is implicitly handled by the run-time
system [PJKA02]. Programs access transactional data just as regular non-transactional
data.
Transactional Drago inherits the process and distribution model of Drago
[MAAG96]. Processes are the unit of distribution and belong to groups. Processes belonging to the same group share a common interface, which is a description of remotely
callable services. A request to a group is multicast in total order to all the group members.
There are two kinds of groups, replicated and cooperative ones, according to the state
and behavior of its members. Replicated groups implement the active replication model.
All the group members are identical deterministic replicas. They have the same state and
code, and should run on failure-independent sites. Since all group members receive the
same requests in the same order, they will produce the same answers. The results of the
replicas are filtered at the client side, so that the results of a single replica are returned
to the client (transparent replication). A replicated group can act as a client of another
group. The underlying communication system, Group IO [GMAA97], filters the replicated requests so that a single message is issued. Members of a cooperative group do
not need to have either the same state or the same code. They are intended to divide data
among its members and/or to express parallelism taking advantage of multiprocessing
or distribution capabilities. Invocations to or from a cooperative group are independent
so they are not filtered by the communication system. The client receives a reply per
group member.
Transactional Drago provides support for exception handling in both kinds of groups
[PJA01]. The interface of a group can include the exceptions the group can signal. In
replicated groups, all members are supposed to signal the same exception, if it is not
the case, members that disagree are considered faulty. Members of a cooperative group
can finish a request signalling different exceptions. In such a situation, by default, the
predefined exception several exceptions is signalled to the client. The group programmer
can overwrite this behaviour defining an exception resolution function for each group
service. Whenever there is no primary component (majority) in a group, the predefined

Transactions and Groups as Generic Building Blocks for Software Fault Tolerance

211

exception group error is signalled to the client. Failed group members will join the group
their group when they are available again.

4

Recovery Blocks

4.1 The Basic Mechanism
The recovery block [Ran75] scheme is based on software redundancy and rollback to
recovery points. A number of variants (alternates) are independently produced from the
same specification by different designers (maybe by using different algorithms). Besides,
an acceptance test is to be implemented to check the correctness of the alternate results.
A recovery point is established when the program enters the recovery block. The primary
alternate is executed and the acceptance test checks its correctness. If it fails, the program
is restored to the recovery point, and the next alternate is tried. This sequence continues
until either the acceptance test is ensured or all alternates have been tried and failed. In
the first case, the recovery point is discarded, and the block is exited. In the second one,
the recovery point is restored (to keep the program in a predefined known state), and a
failure exception is signalled. Recovery blocks can be nested, in which case the results
of the nested recovery block must be flushed away if the alternate containing it has not
passed its acceptance test. Note that recovery blocks and transactions belong to backward
error recovery schemes, and that there are certain similarities in their behaviour when
the acceptance test fails and a transaction aborts because the system is rolled back to a
previous state.
4.2

Extensions of the Mechanism for Exception Handling

The original idea of the recovery blocks does not include a full-fledged exception handling mechanism: the use of exception handling here is restricted to only signalling the
failure exception when a recovery block fails to produce the results, and to handling
any exception by interrupting the current alternate, restoring the previous state and trying another alternate. However, exception handling is widely used and most modern
programming languages have features for declaring exceptions in different scopes and
associating handlers with them. In general, exceptions of each scope can be divided
into external and internal [Rom00a], depending on whether they are propagated out of
the scope where they are signalled or not. Exceptions handled in the scope where they
are raised (Ada terminology) are classified as internal exceptions. Exceptions that are
propagated outside the scope in which they are raised are called external exceptions.
The recovery block scheme can benefit from introducing a general exception handling
mechanism. First of all, this will allow any alternate to have a number of internal exceptions declared by the alternate developer (with the corresponding handlers), so that
when such an exception is signalled the corresponding handler tries to handle it locally.
If this succeeds, the acceptance test is checked and the execution of the recovery block
proceeds. If an external exception is signalled outside the alternate, the system state

212

M. Pati˜no-Mart´ınez, R. Jim´enez-Peris, and A. Romanovsky

is restored by the recovery block support and another alternate is tried. This approach
seems to be the most practical one and in the following subsections we discuss solutions
based on it, although it may raise some doubts because all changes in the system state are
always aborted irrespective of the external exception signalled and the exception itself is
ignored. One of the advanced solutions here is to allow recovery blocks to have several
outcomes: one normal, several exceptional and a failure. The exceptional outcomes will
correspond to the external exceptions and each of those outcomes will have a special
acceptance test associated with it. If the acceptance test is passed after the external exception has been signalled, the alternate succeeds and the exception is signalled. If the
acceptance test is not passed, the state is restored and the next alternate is tried.

4.3

Implementation of Recovery Blocks with Transactions

We will first show how to implement a recovery block in which external exceptions cause
state restoration (Fig. 1a). In order to simplify the code, each alternate is encapsulated
in a procedure, alternateX, which includes the handlers for its internal exceptions.
The recovery block tries sequentially its constituent alternates. This behaviour can be
modelled by using a loop that tries one alternate at a time until either an alternate succeeds
or all the alternates have been executed. The execution of an alternate must be such that
if the acceptance test fails, the state is restored. This behaviour is automatically provided
by enclosing both the alternate and the acceptance test in a transaction. The loop contains
the transaction that encapsulates the execution of the current alternate. If the acceptance
test fails, an exception is signalled to cause transaction abort and therefore, rollback of the
state. The transaction must be enclosed within a block statement to capture any exception
that is propagated out of an alternate or is signalled in the acceptance test (aborting the
transaction and causing state restoration). The exception handler (associated to the block
statement) will capture the exception (when others) and force the execution of the next
alternate, if any. If there are no more alternates the recovery block ends by signalling a
failure exception.
If an alternate contains a recovery block, the alternate must contain the previous
code, resulting in a nested recovery block (transaction) structure.
The previous code must be modified to consider external exceptions as a valid result of
an alternate (Fig. 1b). If an alternate signals some external exception, and the associated
acceptance test is passed, the alternate succeeds and that exception is propagated out of
the recovery block. To achieve this behaviour, those exceptions must be handled inside the
transaction, otherwise the transaction will abort and the state rolled back. Therefore, we
need an additional exception context (block statement) within the transaction to capture
those exceptions. Otherwise, an (unhandled) external exception will abort the transaction
and therefore, the alternate. The block has a handler for each external exception, which
contains the associated acceptance test. If the acceptance test succeeds, the exception
is saved to be signalled again after the transaction has committed (the alternate has
succeeded). If the acceptance test fails, the failure exception is raised, the transaction
aborts and the next alternate is executed.

Transactions and Groups as Generic Building Blocks for Software Fault Tolerance
ok:= false;
alternate:= 1;
while alternate <= N and not ok loop
begin -- capture unhandled
-- exceptions in the transaction
begin transaction
case alternate is
when 1 => alternate1(params);
when 2 => alternate2(params);
...
end case;
ok:= acceptance_test(params);
if not ok then
-- the acceptance test has failed,
-- abort the transaction
raise failure;
end if;
end transaction;
exception -- current alternate has
-- failed, try the next one
when others =>
if alternate < N then
alternate:= alternate +1;
else
raise failure;
end if;
end;
end loop;

(a)

213

raise_exception:= false;
ok:= false;
alternate:= 1;
while alternate <= N and not ok loop
begin-- capture unhandled
-- exceptions in the transaction
begin transaction
begin
case alternate is
when 1 => alternate1(params);
when 2 => alternate2(params);
...
end case;
ok:= acceptance_test(params);
if not ok then
raise failure;
end if;
exception -- execute an
-- acceptance test for
-- external exceptions
when excep: external1 =>
ok:= acceptance_test1(params);
if not ok then
-- abort transaction
raise failure;
else
raise_exception:= true;
Save_Ocurrence(external, excep);
end if;
when excep: external2 =>
ok:= acceptance_test2(params);
if not ok then
raise failure;
else
raise_exception:= true;
Save_Ocurrence(external, excep);
end if;
end;
end transaction;
exception -- try the next alternate
when others =>
if alternate < N then
alternate:= alternate +1;
else
raise failure;
end if;
end;
end loop;
if raise_exception then
Reraise_Exception(external);
end if;

(b)

Fig. 1. Recovery block. External exceptions (a) cause state restoration (b) are a valid result

4.4

Distribution and Replication

Recovery blocks were originally proposed as a general means for tolerating design faults.
The author was deliberately not specific about how to apply the scheme in the context of
distributed systems. In such a context any application willing to tolerate design faults is

214

M. Pati˜no-Mart´ınez, R. Jim´enez-Peris, and A. Romanovsky

usually interested in tolerating hardware faults. Paper [LABK90] proposes several ways
in which hardware and software fault-tolerance mechanisms can be used in combination
to tolerate effectively faults of any nature. In particular, in order to tolerate hardware
faults during the execution of a recovery block the paper proposes to replicate a recovery
block and to concurrently execute replicas on different sites: when a site fails the rest
of sites can continue execution and provide a correct result in spite of software design
faults.
To apply these ideas in the context of distributed systems we have to distribute the
server component implemented with software diversity into several sites. The simplest
way of employing the recovery block technique for implementing a server component
diversely is by designing each of its services as a recovery block. This completely hides
diversity from the clients, makes it easier to implement recovery points, which have
to only deal with the state of the server and facilitates the run time support. We call
this approach service diversity as opposed to another approach which is called server
diversity in which the entire server is implemented diversely.
In order to tolerate site failures two replication techniques can be used: active replication and the primary-backup scheme.Active replication avoids the delays in the execution
of a recovery block when a site crashes (although the recovery blocks by their very nature
can suffer from delays when errors caused by design faults are detected and tolerated)
because in this case all (replicas) servers execute the same service concurrently. Group
communication can be used to ensure that all replicas receive the same requests in the
same order (total order multicast). If there are no hardware faults then, due to replica
determinism and total order multicast, all replicas will produce the same results. Either
all fail to ensure the acceptance test or ensure it. If due to hardware faults some of the
replicas do not complete their execution of the alternate, the remaining replicas proceed
with checking the acceptance test and either report the result or rollback and try the next
alternate.
In contrast to this approach in the primary-backup scheme only one replica (the
primary) is running; it periodically multicasts a checkpoint to the rest of replicas (the
backup replicas). When the primary crashes, one of the backups takes over and continues
the execution of the same alternate from the last checkpoint. Therefore, if the primary
crashes, some part of the work could be lost and system execution can experience some
delays.
Both replication techniques have to deal with the situation when a running replica
is allowed to invoke other servers. If such invocations are allowed, in the case of active
replication, they should be filtered so that only one invocation is performed. Special care
must be taken in the primary-backup approach to inform backups about the success or
failure of such invocations.

Transactions and Groups as Generic Building Blocks for Software Fault Tolerance

5

215

N-Version Programming

5.1 The Basic Mechanism
N-version programming (NVP) [Avi85] is another technique that uses redundancy to
mask software faults. In this approach, N versions of a program (a module) are developed independently by different programmers, to be run concurrently. Their results
are compared by an adjudicator. The simplest adjudicator uses the majority voting: the
results produced by the majority of versions are assumed to be correct, the rest of the
versions are assumed to be faulty. This technique requires a special support which controls the execution of versions and the adjudicator and passes the information among
them. In particular, it synchronizes execution of N versions to obtain their results and to
pass them to the adjudicator.
In order to tolerate site crashes, each version of an N-version program can be executed
at a different site: if any site crashes the remaining sites can continue their execution
and provide the required service. For the majority voting this means that this scheme is
capable of tolerating K design faults or site crashes where K < N/2.
A group of processes can be used to implement N-version programming in distributed
systems. To do this the processes should provide the same set of services which have
diverse implementations. Such a group is built out of N versions as a diversely-designed
server, so that each group member executes a corresponding version. It is possible to
designate one member (for instance, the one with the smallest identifier) to acting as a
group coordinator to be in charge of voting and returning the results to the client. Another
approach is to return all version results directly to the client and to perform voting at the
client side. Although the former solution hides the voting function from the client, the
code becomes complex because it needs to take into account coordinator crashes. In the
following section we will demonstrate how the latter approach can be implemented.
Recovering faulty versions is known to be a very difficult problem because of diversity of the internal version states. Several techniques have been developed; for example,
the community error recovery [TA87] mainly relies on the assumption that all versions
have a common set of internal data, whereas approach in [Rom00b] is based on developing an abstract version state and mapping functions from this state to a concrete state
of each version and back. The same techniques can be used for recovering versions after
site crashes.
5.2

Implementation of N-Version Programming Using Cooperative Groups

Cooperative groups in Transactional Drago provide all the functionality needed to implement N-version programming. Group specification (e.g. given in Fig. 2a) describes the
services the group provides. Each group member implements that specification (Fig. 2b).
To apply N-version programming the number of group members should be equal to the
number of versions, so that each member implements one version. Clients invoke services of such diversely-designed server using multicast and the group members execute
the request in parallel. When a member finishes, it returns its results to the client. The

216

M. Pati˜no-Mart´ınez, R. Jim´enez-Peris, and A. Romanovsky

group specification N_Version is
-- group services
entry Service1(parameters1);
entry Service2(parameters2);
end N_Version;

-- client code
Service1 (parameters1, results);
Voting(results, resultsService1);

for group N_Version;
agent Version1 is
-- group member data declaration
begin
select
accept Service1 (parameters1) do
-- version1 for service Service1
end Service1;
or
accept Service2 (parameters1) do
-- version1 for service Service2
end Service2;
end select;
end Version1;

(a)

(b)

Fig. 2. N-version programming. (a) group specification and invocation (b) a group member

client is blocked until all the available members have replied, after that a voting function
is called. For example, in Fig. 2a the Voting procedure is in charge of returning the
majority result and the results parameter is an array with the individual results of all
N versions.
5.3

N-Version Programming and Exception Handling

Allowing servers to signal external exceptions to the clients is an important feature that
supports recursive system structuring and promotes disciplined approaches to tolerating
faults of many types. Such exceptions are used in all situations when the required results cannot be delivered (for example: illegal input parameters, environmental faults,
delivering partial results, server failure). Paper [Rom00a] proposes a scheme that allows
diversely-designed servers to have external exceptions in their interfaces. Clearly all of
the versions have to have the same set of external exceptions because such exceptions
have to be treated as an immanent part of server specification. The scheme requires an
adjudicator of a special kind to allow interface exception signalling when a majority of
versions have signalled the same exception.
This feature can be introduced into the distributed setting when N versions of a server
are structured as a group to tolerate hardware faults. The only extension which is needed
is an ability to pass an identifier of an exception that a group member has signalled to
the group coordinator (it can be either one of the group members or the client itself)
and an extended majority voting that adjudicates not only normal results but exception
identifiers as well.
5.4

Implementation of N-Version Programming with Exceptions

External exceptions can be declared in the group specification. Those exceptions are
propagated to the client when they are not handled in the group during the execution
of a service. Cooperative group members might have different code and therefore, each

Transactions and Groups as Generic Building Blocks for Software Fault Tolerance

217

group specification N_Version is
-- exceptions signalled by the group
exception1, exception2 : exception;
-- group services
entry Service1(parameters1);
entry Service2(parameters2);
private
use Ada.Exceptions;
-- predefined type Exception_ID_List_Type is
-array (Positive <>) of Exception_ID;
function MajorityResolution
(exceptionList: Exception_ID_List_Type): Exception_ID is
begin
--select the majority exception
end Service1Resolution;
for Service1’resolution use MajorityResolution;
for Service2’resolution use MajorityResolution;
end N_Version;

Fig. 3. Exception resolution

member can signal a different exception for the same service. In this case, by default,
the predefined exception several exceptions is propagated to the client. This behaviour can be overwritten by defining an exception resolution function in the group
specification for each group service (Fig. 3). This function is invoked by the run-time
when two or more group members finish the execution of that service signalling different exceptions. This function can be programmed so that the majority exception is
signalled.

6

Discussion and Conclusions

Our approach demonstrates how the mainstream languages (such as Ada) can be used
for providing software fault tolerance. We have to rely on a number of constraints for the
application programmers to follow, otherwise it is impossible to guarantee the properties
of such techniques [RS95]. These restrictions mainly concern the absence of information
flows between the versions and the rest of the system, non-interference of the tasks in
which such techniques are used, etc.
The solutions presented could be implemented using any toolkit that supports group
communication and transactions. As an example, CORBA supports transactions and
the FT CORBA specification [OMG00] supports groups of objects including an active
replication style. CORBA active replication and our replicated groups share the same
properties: replication transparency, determinism and total order. In the FT CORBA
active with voting replication style both requests addressed to and replies from a replicated group are voted and majority results are delivered. This style can be used for
implementing N-version programming.
In general, programmers do not get much support when they are faced with the
task of applying N-version programming or recovery blocks. By the contrast, software
techniques for tolerating site failures (transactions, group communication, and replication) have become very popular and are part of most middleware platforms used for

218

M. Pati˜no-Mart´ınez, R. Jim´enez-Peris, and A. Romanovsky

developing distributed applications. In this paper we have shown how recovery blocks
and N-version programming can be programmed using these two building blocks. Besides, the proposed techniques allow site failures and design faults to be treated uniformly.

References
[Ada95]
[Avi85]

Ada 95 Reference Manual, ISO/8652-1995. Intermetrics, 1995.
A. Avizienis. The n-version approach to fault-tolerant software. IEEE Transactions
on Software Engineering, 11(12):1491–1501, 1985.
[BHG87]
P. A. Bernstein, V. Hadzilacos, and N. Goodman. Concurrency Control and Recovery
in Database Systems. Addison Wesley, Reading, MA, 1987.
[CKV01]
G. V. Chockler, I. Keidar, and R. Vitenberg. Group Communication Specifications:
A Comprehensive Study. ACM Computer Surveys, 33(4):427–469, December 2001.
[FvR95]
R. Friedman and R. van Renesse. Strong and Weak Virtual Synchrony in Horus.
Technical Report TR95-1537, CS Dep., Cornell Univ., 1995.
[GMAA97] F. Guerra, J. Miranda, A. Alvarez, and S. Ar valo. An Ada Library to Program
Fault-Tolerant Distributed Applications. In K. Hardy and J. Briggs, editors, Proc. of
Int. Conf. on Reliable Software Technologies, volume LNCS 1251, pages 230–243,
London, United Kingdom, June 1997. Springer.
[LABK90] J. Laprie, J. Arlat, C. B ounes, and K. Kanoun. Definition and Analysis of Hardwareand Software-Fault-Tolerant Architectures. IEEE Computer, 23(7):39–51, 1990.
[MAAG96] J. Miranda, A. Alvarez, S. Ar valo, and F. Guerra. Drago: An Ada Extension to
Program Fault-tolerant Distributed Applications. In A. Strohmeier, editor, Proc. of
Int. Conf. on Reliable Software Technologies, volume LNCS 1088, pages 235–246,
Montreaux, Switzerland, June 1996. Springer.
[OMG00] OMG. Fault Tolerant CORBA. Object Management Group, 2000.
[PJA98]
M. Pati o-Mart nez, R. Jim nez-Peris, and S. Ar valo. Integrating Groups and Transactions: A Fault-Tolerant Extension of Ada. In L. Asplund, editor, Proc. of Int. Conf.
on Reliable Software Technologies, volume LNCS 1411, pages 78–89, Uppsala,
Sweden, June 1998. Springer.
[PJA01]
M. Pati o-Mart nez, R. Jim nez-Peris, and S. Ar valo. Exception Handling in Transactional Object Groups. In Advances in Exception Handling, LNCS-2022, pages
165–180. Springer, 2001.
[PJA02]
M. Pati o-Mart nez, R. Jim nez-Peris, and S. Ar valo. Group Transactions: An
Integrated Approach to Transactions and Group Communication. In Concurrency in
Dependable Computing, pages 253–272. Kluwer, 2002.
[PJKA02] M. Pati o-Mart nez, R. Jim nez-Peris, J. Kienzle, and S. Ar valo. Concurrency Control
in Transactional Drago. In Proc. of Int. Conf. on Reliable Software Technologies,
LNCS-2361 , pages 309–320, Vienna, Austria, June 2002. Springer.
[Ran75]
B. Randell. System Structure for Software Fault Tolerance. IEEE Transactions on
Software Engineering, 1(2):220–232, 1975.
[Rom00a] A. Romanovsky. An Exception Handling Framework for N-Version programming
in Object-Oriented Systems. In Proc. of the 3rd IEEE Int. Symp. on Object-oriented
Real-time Distributed Computing (ISORC’2000), pages 226–233, Newport Beach,
USA, March 2000. IEEE Computer Society Press.

Transactions and Groups as Generic Building Blocks for Software Fault Tolerance
[Rom00b]
[RS95]
[TA87]

219

A. Romanovsky. Faulty Version Recovery in Object-Oriented Programming. IEE
Proceedings – Software, 147(3):81–90, 2000.
A. Romanovsky and L. Strigini. Backward error recovery via conversations in Ada.
Software Engineering Journal, pages 219–232, November 1995.
K.S. Tso and A. Avizienis. Community error recovery in N-version software: a
design study with experimentation. In Proc. of 17th IEEE FTCS, pages 127–133,
Pittsburgh, PA, 1987.

