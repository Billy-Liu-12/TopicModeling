Context Adaptive Self-configuration System
Seunghwa Lee and Eunseok Lee
School of Information and Communication Engineering, Sungkyunkwan University,
300 Chunchun jangahn Suwon, 440-746, Korea
{jbmania, eslee}@selab.skku.ac.kr

Abstract. This paper suggests a context adaptive self-configuration system, in
which the system itself is aware of its available resources, and executes a
configuration suitable for each system and the characteristics of each user. A
great deal of time and effort is required to manually manage computing
systems, which are becoming increasingly larger and complicated. Many
studies have dealt with these problems but most unfortunately have focused on
‘automation’, which do not reflect the system specifications that differ between
systems. Therefore, this paper proposes an adaptive self-configuration system
that collects diverse context information for a user and its system, reflects it to
an auto-response file and executes the detail parameter setting automatically. A
prototype was developed to evaluate the system and compare the results with
the conventional methods of manual configuration and MS-IBM systems. The
results confirmed the effectiveness of the proposed system.

1 Introduction
Recently, the rapid development of IT has contributed to various devices with
increasing performances. As the devices to be administered are increasing in number
and complication, they impose a heavier burden on system management [1]. For
examine, a company’s computing system networking hundreds of hosts may require a
great deal of time, money and manual effort if they have to be manually and
individually installed and updated. In order to solve it, studies such as a centralized
integration management of distributed resources, and unattended installation
technology to reduce the workload and periodic automatic update are being applied
by various institutions [2][3]. However, these studies focused mainly on ‘automation’,
which simply replaces the tasks manually processed. Therefore, these studies provide
only a uniform service that does not reflect unique device’s characteristics or the user
preferences. This paper proposes a context adaptive self-configuration system, which
is aware of its available resources, and executes the suitable configuration on each
situation utilizing these contexts with the user’s information.
The paper is presented as follows: Section 2 describes the characteristics, structure
and behavior process of the proposed system; and Section 3 gives a conclusion as
well as a simple description of the system evaluation through its implementation and
experiments.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 1052 – 1055, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Context Adaptive Self-configuration System

1053

2 Proposed System
2.1 System Overview
The word ‘configuration’ in this paper means newly install components, such as an
OS or software, etc., that are to be administered and updated them for version
management or defects healing.
For installation, the proposed system need be installed so that components to be
contained reflect the existing users’ preference and the system resource status. The
basic configuration automatically meets these requirements through a customized
auto-response file and a parameter-setting file. In addition, for updating, it monitors
the frequency of component use, determines the priority, and enables works to be
efficiently processed in case the remaining storage of a system or the updating time is
insufficient. Currently, copying files is processed by a peer-to-peer transmission
method to supplement the several disadvantages of the existing centralized
distribution method and to efficiently update the files.
2.2 System Structure
Fig. 1 shows the overall structure of the proposed system, and the detail modules are
as follows:
-

Component Agent: this is installed in a managed device to monitor the changes
in resources, to check the parameter setting information of the user’s
applications along with the
frequency of use, and to
periodically transmit the this
information to a selfconfiguration system. In
addition, it also receives
packages
or
the
configuration files necessary
for auto installation from the
self-configuration system or
a host located in the same
zone. Upon installation, it
observes the user’s behavior,
and transmits the observed
information to the Context
Synthesizer.
Fig. 1. Architecture of the Proposed system

-

Context Synthesizer: Gathers the context provided by the Component Agent
and stores the basic user data, the application preferences and usage
frequencies in the User Data DB. The Context Synthesizer analyzes and
deducts the current status using the stored user data and Ontology (various

1054

-

S. Lee and E. Lee

expressions on the preference data of the applications) and relays the results to
the Adaptation Manager.
Adaptation Manager: Decides and performs the appropriate tasks based on
policies that were pre-defined through the data provided by the Context
Synthesizer. The Adaptation Manager installs the components stored in the
Repository or performs the various configuration tasks such as updates. An
installation image on the user data and the customized ‘auto-response files’ for
installation are also automatically created.

The system administrator or the user can adjust and manage these components,
policies, Ontology, and the user data to be stored in the Repository. The proposed
system can also communicate with other external Configuration Servers and share
data.
2.3 System Behavior
1) Installation
The system installs the components by reflecting the existing user’s preference and
system resource information, and automatically executes the basic configuration
through a customized auto-response file and an auto configuration file. In addition, in
case a user’s resource is insufficient, it automatically selects the ‘minimum
installation’ option for the auto-response file, creating the script. Currently, such a
process is notify to the user so that the final decision may be made by the user whilst
an agent observes and learns the user’s activities, which are reflected to determine the
subsequent activities. The major workflow is as follows.
Step 1. Component Agent: monitors the system resource information and configuration information,
creating a profile and transmitting it to a context synthesizer, for any changes.
Step 2. Context Synthesizer: saves the received data to the User Data DB, on which the present situation
is analyzed.
Step 3. In case a user requests an installation or an administrator needs to distribute it in a lump, it
retrieves the user data (preference) saved in the User Data DB, after authenticating the user.
Step 4. Adaptation Manager: creates and distributes the auto-response file and the detail parameter
setting file, based on the retrieved user data. (ex. if (resource = insufficient) then checks the ‘minimum
installation’ option of the auto-response file)
Step 5. Component Agent: installs any received file, monitors the user’s activities and executes the
feedback.
Step 6. Modifies and learns the User Preference, Policy.

Fig. 2. Pseudo Code for the Install Phase

2) Update
The update priority is determined by monitoring the frequency of the components,
through which the system facilitates the various tasks efficiently if the remaining
storage or the time required for updating is insufficient. Reflecting the Astrolabe [4]
structure, each host organizes the components into zones, and these zones are
organized hierarchically. A representative host of each zone collects a list of files on

Context Adaptive Self-configuration System

1055

the individual hosts while a host requiring the file requests the representative host
about the location of a near host holding the file, and receives it in peer-to-peer
transmission method. From this, it can reduce the load of the centralized server, be
resistant to various troubles and quickly copy files. The update files copied within the
zone are checked for consistency through a size comparison.
Step 1. Component Agent: monitors the frequency of each application by the users, transmits it to the
context synthesizer periodically and sends its own update file list to the representative host in the same
zone. In addition, the representative host’s collected file lists are gathered at the higher level.
Step 2. Context Synthesizer: saves the received data into the User Data DB, on which the user’s
preference is present.
Step 3. For any update request (update request by a user or update request at a lump by an
administrator), it authenticates the user and retrieves the user’s data saved in User Data DB.
Step 4. Adaptation Manager: determines the update priority according to the retrieved user data.
Step 5. The system requests the representative host in the same zone, the location of a host holding the
file, catches hold of it and finally copies the file. (if the file needed does not exist at the representative host,
then go to the level and submit the request to the higher level host).

Fig. 3. Pseudo Code for the Update Phase

3 Conclusion
This study proposed a prototype system for testing the basic functions and validating
a system by comparing for the task time for the existing research. From the results, it
could be concluded that proposed system features a shortened configuration work
time than the existing systems (shortening the basic parameter setting time) and an
increased the user satisfaction and usability. Meanwhile, it is expected that the
proposed system might be useful in the Ubiquitous Computing era where a user
utilizes multiple computing devices and provides them with a more convenient
computing environment as a result of the reduced system management.

References
1. Paul Horn, “Autonomic Computing: IBM’s Perspective on the State of Information
Technology”, IBM White paper, Oct.2001
2. http://www-306.ibm.com/software/tivoli
3. http://www.microsoft.com/technet/prodtechnol/winxppro/deploy/default.mspx
4. Robbert van Renesse, Kenneth Birman and Werner Vogels, “Astrolabe: A Robust and
Scalable Technology for Distributed System Monitoring, Management, and Data Mining”,
ACM Transactions on Computer Systems, Vol.21, No.2, pp.164-206, May 2003
5. John Keeney, Vinny Cahill, “Chisel: A Policy-Driven, Context-Aware, Dynamic
Adaptation Framework”, In Proceedings of the Fourth IEEE International Workshop on
Policies for Distributed Systems and Networks, Jun.2003
6. Anand Ranganathan, Roy H. Campbell, “A Middleware for Context-Aware Agents in
Ubiquitous Computing Environments”, In ACM/IFIP/USENIX International Middleware
Conference 2004, Jun.2004
7. Richard S. Sutton, Andrew G. Barto, ‘Reinforcement Learning: An Introduction (Adaptive
Computation and Machine Learning)’, The MIT Press, Mar.1998

