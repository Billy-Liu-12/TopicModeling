Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 412 – 421

International Conference on Computational Science, ICCS 2012

Eﬀective Utilization of Tensor Symmetry in Operation
Optimization of Tensor Contraction Expressions
Pai-Wei Laia , Huaijian Zhanga , Samyam Rajbhandaria , Edward Valeevb , Karol Kowalskic , P. Sadayappana
a Department

of Computer Science and Engineering, The Ohio State University, Columbus, OH, USA
b Department of Chemistry, Virginia Tech, Blacksburg, VA, USA
c William R. Wiley Environmental Molecular Sciences Laboratory, Paciﬁc Northwest National Laboratory, Richland, WA, USA

Abstract
The optimization of tensor expressions with hundreds of terms is required for the development of accurate quantum
chemistry models such as the coupled cluster method. In this paper, we address the eﬀective exploitation of symmetry
properties of tensors in performing algebraic transformations for minimizing operation count of tensor expressions.
We demonstrate signiﬁcant improvements to the operation counts for the coupled cluster method when compared to
several state-of-the-art implementations. Furthermore, we show that tensor expressions optimized for a few input
parameter combinations can be used to achieve operation counts within 3% of the optimal, for the entire parameter
space of interest.

1. Introduction
Accurate prediction of electronic structure in chemistry involves computational methods whose equations involve
hundreds to thousands of tensor contractions. Manual implementation of such methods is tedious, error-prone, and
results in programs that become rapidly obsolete due to advances in hardware and methodology. The automated
derivation, optimization, and implementation of tensor contraction expressions is therefore critical. A key step in the
process is the algebraic transformation, to ﬁnd an equivalent form of input tensor contraction expressions that minimizes operation count (opcount). In this paper, we describe algorithms for eﬀective utilization of symmetry properties
of tensors in performing algebraic transformations for opcount minimization. The exploitation of symmetry in tensors
is very important since it leads to very signiﬁcant reduction in space and time in quantum chemistry models such as
the coupled cluster method, especially with high-dimensional tensors. Our operation optimization process includes
single term optimization for ﬁnding the best sequence of two-tensor contractions to achieve a multi-tensor contraction, common sub-expression elimination for reducing memory space and arithmetic operations, and factorization by
application of the distributive law across multiple terms.
We demonstrate the eﬀectiveness of our system, OpMin, on tensor contraction expressions for coupled cluster
(CC) methods [1]. The CC method is a numerical technique used widely due to its simplicity and high accuracy for
Email addresses: laip@cse.ohio-state.edu (Pai-Wei Lai), huaijian.zhang@gmail.com (Huaijian Zhang), samyamrb@gmail.com
(Samyam Rajbhandari), evaleev@vt.edu (Edward Valeev), karol.kowalski@pnnl.gov (Karol Kowalski), psaday@cse.ohio-state.edu
(P. Sadayappan)

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.044

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421

413

describing quantum many-body systems. In computational chemistry, it is used to construct accurate multi-electron
wave functions that incorporate various levels of electron correlations. The equation systems evaluated in this paper
include the CC method with single and double excitations (CCSD)[2], the CC method with single, double and triple
excitations (CCSDT)[3, 4], and equation-of-motion CCSD (EOMCCSD)[5, 6]. Our experimental results show that
the resulting optimized operation counts are comparable with the best manually optimized CCSD equations and are
signiﬁcantly better than previous automatically optimized CCSD, CCSDT and EOMCCSD equations.
The rest of the paper is organized as follows. Section 2 deﬁnes symmetry properties in the context of tensor
contraction expressions. Section 3 describes our approach to discover the symmetries in the intermediates and to
compute the cost reduction, as well as the optimization techniques used in OpMin. Experimental results are presented
in Section 4 and Section 5. Related work is provided in Section 6 and we conclude in Section 7.
2. Symmetry Properties and Operation Count Reduction
In this section, we discuss two diﬀerent symmetries that arise in the complex tensor contraction expressions in CC
equations. A tensor contraction expression consists of summation of a number of terms, where each term contains the
contraction of two or more tensors. According to the nature of the diﬀerent equations, the tensors might have one of
the following symmetry properties.
2.1. Anti-Symmetry
Assume we have a tensor Ai j with indices i and j in the same range, Ai j is anti-symmetric if Ai j = −A ji . Antisymmetry applies to any two indices within one range group where ﬂipping any two indices results in the same value
with sign change. In this paper, we use overline to denote anti-symmetric indices in a tensor. For example, Aiklj
jk
jk
jik
jki
ji
indicates that Aiklj = −Aklji , and Aipqr
represents that Aipqr
= −Aikpqrj = −A pqr
= A pqr
= Akipqrj = −Akpqr
.
We illustrate the operation count reduction using anti-symmetry in the example below. Consider the following
tensor contraction expression involving two tensors A and B, with all indices in the same range N:
ij
6
= Aiklj Bkl
Cmn
mn (cost 2N )
ij
(For simplicity, the above expression implies Cmn
= k,l Aiklj Bkl
mn in actual computation. We will use the same
notation for the rest of this paper)
The original cost of the operation is 2N 6 if no anti-symmetry is involved. However, if tensor A has one antisymmetric group (i, j), the total operation cost can be reduced from 2N 6 to N 6 because 12 of the computations can be
eliminated by changing the sign from the other half.

2.2. Vertex Symmetry
Given a tensor Biklj with indices i, j in the same range and k,l in the same range, Biklj is said to be vertex symmetric if Biklj = Blkji . Vertex symmetry applies over two range groups where ﬂipping of any two indices in one
group and corresponding indices in other groups results in the same value. In this paper, we use widehat denotajk
means that
tion to represent the vertex symmetric property. For example, Bi j indicates that Biklj = Blkji , and Bipqr
kl

jk
jik
ji
jki
j
= Bqpr
= Bikprqj = Bkrqp
= Bqrp
= Bki
Bipqr
rpq . In previous expression, if tensor A has vertex symmetry, the computation
1
can also be reduced by a factor of 2 .

3. Operation Minimization Algorithms with Symmetry Properties
In this section, we make eﬀective use of symmetries described in section 2 to develop a ﬂexible system that can
eﬃciently reduce the operation count for any general tensor contraction expression. To begin with, we develop rules
to detect symmetry properties in intermediate tensors, construct cost models for anti-symmetry and vertex symmetry
tensors, and create canonical form of tensor expressions with symmetry for common subexpression elimination(CSE).
Furthermore, we use single term optimization (STO) and factorization (FACT) to reduce operation count of a given
tensor contraction expression.

414

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421
Table 1: Rules for detecting symmetries in intermediates

Rule

Expression

Reduction Factor

Rule

Expression

Reduction Factor

1.1

Ikli j = Aiklj + Biklj

1
2

2.1

j
× Bmn
Ikli j = Aimn
kl

1
2

1.2

I i j = Ai j + Bi j

kl

1
2

2.2

j
I i j = Aimn
× Bmn

1
4

1.3

I i j = Ai j + Bi j

kl

1
2

2.3

j
× Bmn
I i j = Aimn

1
2

1.4

Ikli j = Aiklj − Aklji

1
2

2.4

j
Ikli j = Aimn
× Bmn
kl

1
2

1.5

I i j = Aiklj + Alkji

1
2

2.5

I i j = Aik × Alj

1
2

kl
kl

kl

kl

kl

kl

kl

kl

kl

kl

(a) Addition

(b) Multiplication

3.1. Derivation Rules for Symmetry Properties
Given the symmetry properties of the right hand side of binary tensor contraction expressions (two-tensor contractions), we describe the derivation rules used to maintain symmetry properties and deduce new symmetry for left
hand side intermediates in Table1. Table 1(a) shows the derivation rules and the reduction factors while computing the
left hand side intermediates for addition expression. Rule 1.1 indicates that if an anti-symmetry group exists in both
tensors, the intermediate will remain anti-symmetric for that group. Similarly, if both tensors have vertex symmetry,
the intermediate will preserve vertex symmetry (Rule 1.2). Rule 1.3 states that if one tensor is vertex symmetric while
the other is anti-symmetric in both groups, the intermediate still remains vertex symmetry although it loses the antisymmetry property. In Rule 1.4, if we subtract two instances of the same tensor with diﬀerent orders of indices which
diﬀer exactly in two indices, it forms a new anti-symmetry property in the intermediate tensor. Rule 1.5 indicates
that the summation of two instances of the same tensor with both top and bottom pairs of indices ﬂipped results in
an intermediate tensor with vertex symmetry. For the general case of the tensor expressions where the size of an
1
anti-symmetry group or vertex symmetry group is N, the reduction factor is N!
. In this table, all the reduction factor
1
are 2 because N = 2.
In Table 1(b), we present the reduction factors and the rules for detecting symmetries in intermediates for multiplication. If we multiply two tensors with anti-symmetric group on non-contracting indices, then the anti-symmetry
will be preserved in the intermediate tensor (Rule 2.1). Both tensors must possess vertex symmetry for preservation
of this property in the intermediate tensor (Rule 2.2). Rule 2.3 dictates that if the contraction indices of one tensor
have the anti-symmetry property while the other tensor has the vertex symmetry property, new anti-symmetry will be
formed on the corresponding indices of the intermediate. For example, the (k, l) indices of the intermediates become
anti-symmetric because the contraction indices (m, n) are anti-symmetric in the ﬁrst tensor and vertex symmetric in
the second tensor. Rule 2.4 says that if the anti-symmetry appears in contraction indices, then the intermediate has no
symmetry; however, there is still a reduction factor of 12 . Rule 2.5 states that the product of two diﬀerent instances of
the same tensors with two indices will result in an intermediate with vertex symmetry. The total reduction factor for
1
the general case is N!
when the group size of anti-symmetry or vertex symmetry is N. The only exception is Rule 2.2
where Pulay [7] proposed a technique to reduce the factor to 14 .
3.2. Cost Model for Symmetry Properties
Once we can detect the symmetry for the intermediates, next step we need to compute the reduction factors resulting from symmetry properties in order to construct the cost model for symmetric tensors in OpMin. Let us consider
a general tensor contraction expression with anti-symmetry, involving three tensors I, A, and B where intermediate I
has a total of m + n external indices groups a0 , a1 , ..., am and b0 , b1 , ..., b j :
,...,am s0 ,s1 ,...,sk
I a0 ,a1 ,...,am = Aas00,s,a11,...,s
B
k
b0 ,b1 ,...,bn

b0 ,b1 ,...,bn

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421

415

Assume that size of each group ai is xi and size of group b j is y j . In addition, there are p independent antisymmetric groups from s0 to s p where each size of sk is zk . The reduction to the operation count for this tensor
contraction expression using the rules we discussed earlier is given by:
m

n

p

reduction =
i=0 j=0 k=0

1 1 1
xi ! y j ! zk !

(1)

Similarly consider the following tensor contraction expression with total number of n independent vertex symmetric groups:
,...,an s0 ,s1 ,...,sn
I a0 ,a1 ,...,an = Aas00,s,a11,...,s
B
n
b0 ,b1 ,...,bn

b0 ,b1 ,...,bn

where the size of each vertex symmetry group |ai | = |bi | = |si | = xi . The reduction factor for the overall expression
will become:
⎧
n
1
⎪
⎪
xi = 2
⎨4
f (xi )
where
f (xi ) = ⎪
reduction =
(2)
⎪
⎩ 1 xi > 2
xi !
i=0
3.3. Common Sub-expression Elimination (CSE)
The ﬁrst optimization technique used in OpMin is common sub-expression elimination, which identiﬁes equivalent
intermediate tensors that are calculated only once and stored for later use. This technique is very eﬀective in operation
count reduction and directly contribute to single term optimization and factorization. To identify common tensor
contraction sub-expressions with symmetry properties by recasting them into their canonical form. The algorithm
for recasting a subexpression into canonical form in OpMin is described as follows. First, we sort the tensors in
alphabetical order giving priority to larger coeﬃcients in case of conﬂicts. Second, we rename both the external and
internal indices based on their order of appearance. For example, the following binary tensor contraction expression:
i1 i2 e3 e4
I = cBiklj Akl
mn where c is the coeﬃcient will be recast as I = cAe1 e2 Bi1 i2 . In the case of addition expressions, consisting
of two tensors with same name and coeﬃcient, we encorporate index mapping and permutation techniques to our
algorithm to recast these expressions into identical canonical form.
input : E = {e1 , e2 , ..., en }: a set of total n equations
output: F = subset of E with common sub-expression eliminated
begin
table ← ∅
F←∅
for i = 1 to n do
L = ei .LHS
R = ei .RHS
C ← the canonical form of R
if table.has(C) then
V = table.getValue(C)
replace I with V if I appears in RHS of any equations in E
else
table.insert(C, R)
F ← F ∪ ei
end
end
return F
end
Algorithm 1: Common Sub-expression Elimination
Algorithm 1 describes how OpMin eliminates common intermediates by maintaining a storage table with canonical
forms and costs for sub-expressions.

416

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421

input : T 1 , T 2 , ..., T n : A single term with n tensors
output: value.exp: Optimal contraction sequence for this term
begin
table ← ∅
for i = 1 to n do
S ← all possible subsets of {T 1 ,T 2 ,...,T n } with length i
for each set {s1 ,s2 ,...,si } ∈ S do
if i = 1 then
value.expression ← s1
value.cost ← 0
else if i = 2 then
/*s1 × s2 represents the expression resulting from contraction of s1 and s2 */
/* computeCost(s1 , s2 ) computes the cost of contraction of s1 and s2 */
value.expression ← (s1 × s2 )
value.cost ← computeCost(s1 , s2 )
else
minCost ← ∞
D ← set of all possible ways to divide {s1 ,s2 ,...,si } into two parts
for each set {d1 ,d2 ,...,da ,d1 ,d2 ,...,db } ∈ D do
le f t ← table.getValue({d1 , d2 , ..., da })
right ← table.getValue({d1 , d2 , ..., db })
currentCost ← computeCost(le f t.expression, right.expression) + le f t.cost + right.cost
if currentCost < minCost then
value.exp ← (le f t.exp × right.exp)
value.cost ← currentCost
minCost ← currentCost
end
end
end
key ←{s1 ,s2 ,...,si }
table.insert(key, value)
end
end
value ← table.getValue({T 1 , T 2 , ..., T n })
return value.exp
end
Algorithm 2: Single Term Optimization

3.4. Single Term Optimization (STO)
A tensor contraction expression is a summation of several terms, where each term involves contraction of two or
more tensors. Diﬀerent orders of contraction can result in very diﬀerent operation counts. Consider the following
tensor contraction expression involving three tensors A, B and C, with indices i, j and k spanning range of rank O, and
indices m, n and o spanning range of rank V (see section 5 for an explanation of the physical meaning of O and V).
jk n mo
3 3
Rm
i = Ano B j C ik (cost 3O V )

Computed as a single nested loop computation, the operation count for above expression would be 3O3 V 3 (2
multiplication + 1 addition). To reduce the cost, it is possible to compute the result with total of 4O2 V 2 operation
count by a two-step computation with an intermediate I:
jk n
Iok = Ano
B j (cost 2O2 V 2 )
k mo
2 2
Rm
i = Io C ik (cost 2O V )

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421

417

input : E = A tensor contraction expression with multiple terms
num = starting number of chunks. E is divided into several groups called chunks.
maxS ize = maximum number of expressions can be stored in one chunk
output: F: Factorized form of E
begin
perform STO on every term in E and sort the terms based on cost
divide the terms in E into num chunks, and let C be the set of all chunks
F←∅
while True do
G←∅
for every chunk ci in C do
/* DirectDescent is one of the heuristic algorithm developed in [8] to factorizes ci */
curResult ← DirectDescent(ci )
G ← G ∪ curResult
end
if |G| <= 1 then
F ← F ∪G
break;
end
C←∅
Let G = {g0 , g1 , g2 , ...}
i=0
while i < |G| − 1 do
gk ← combine(gi , gi+1 )
if size(gk ) > maxS ize then
F ← F ∪ gk
else
C ← C ∪ gk
end
i=i+2
end
end
return F
end
Algorithm 3: Heuristic Factorization

However, if a diﬀerent order of contraction is chosen, there will be no cost reduction:
n mo
3 3
Iimno
jk = B j C ik (cost 2O V )
mno jk
3 3
Rm
i = Ii jk Ano (cost 2O V )

This example shows the problem of single term optimization that searches for the best sequence of binary tensor
contractions within one term. Algorithm 2 shows the dynamic programming approach of STO[8] in OpMin.
3.5. Factorization (FACT)
To further reduce the operation count, OpMin performs factorization to ﬁnd common factors from diﬀerent terms.
Our prior works have developed an exhaustive search algorithm[9] that can evaluate all possible factorizations, as well
as several heuristic search approaches that trade searching space with time [8]. The exhaustive search algorithm is
guaranteed to ﬁnd factorization with minimal operation count for the input expression, but it is impractical to use due
to the exponentially growing time complexity with increasing number of terms.
Algorithm 3 presents the heuristic search approach based on a divide-and-conquer algorithm used in this paper.
For a given tensor expression input, ﬁrst we perform STO to ﬁnd the best sequence and cost for each term. Next, we

418

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421

sort the terms by cost and group them into diﬀerent chunks. At every step, for every chunk we perform direct descent
search algorithm[8] to ﬁnd best local factorization, and then combine every two chunks to proceed to next iteration.
4. Experimental Evaluation
OpMin has the capability to optimize any general tensor expression. In this paper, we optimize CC equations that
used by quantum chemists to solve for the wave function of diﬀerent chemical systems. The standard CC equations
considered in this work involve tensors whose indices span two types of ranges: one representing occupied oneelectron states (of rank O) and another representing unoccupied, or virtual, one-electron states (of rank V). The O
parameter is a characteristic of the number of electrons in the modeled system while the V parameter pertains to the
accuracy of the solution where higher values provide higher accuracy. In practice, V is usually greater than O by a
factor of 3 to 30. In Table 2, we simply set a representative value of O = 10 and V = 100 to evaluate the eﬀectiveness
of OpMin.
The operation count (opcount) reduction with OpMin was evaluated on ﬁve coupled cluster methods including
UCCSD, RCCSD, UEOMCCSD, REOMCCSD, and UCCSDT where the preﬁx U stands for Unrestricted HartreeFock theory and R stands for Restricted Hartree-Fock theory. Speciﬁc values of O and V chosen for the experiments
are indicated in each table.
Table 2: Characteristics of the input equations for OpMin. For brevity we use notation ab for a · 10b .

Equation
UCCSD
RCCSD
UEOMCCSD
REOMCCSD
UCCSDT

T1
T2
T1
T2
X1
X2
X1
X2
T3

Terms
50
277
25
96
84
572
42
198
2102

STO
9.878
2.3611
6.298
8.6210
1.309
4.0811
8.148
1.5411
3.9914

+FACT
8.768
1.4011
3.168
4.5610
1.219
2.6111
4.708
8.2210
1.6214

+CSE
8.568
9.5110
2.808
3.9110
1.189
1.7211
4.228
7.0010
7.1513

Table 2 shows the number of terms in each equation and the opcount resulting from various optimizations. The
opcount refers to the total number of ﬂoating point computation considering each multiplication as one operation and
each addition as an operation. T1/X1, T2/X2, and T3 stand for single, double, and triple excitation, respectively. The
STO column indicates the opcount using single term optimization alone, the opcount using both STO and FACT is
shown in the +FACT column, and the +CSE column shows the opcount obtained by applying all three optimizations.
We obtained an average opcount reduction (relative to only STO) of 2.36x by also performing FACT and CSE. The
use of FACT and CSE is particularly signiﬁcant with very large equations with thousands of terms, such as UCCSDT
(5.58x improvement).
To compare the performance of OpMin, we acquired the opcount for the aforementioned equations in Table 2
using two high performance quantum chemistry computation suites NWChem(v6.0)[10] and PSI3(v3.4.0)[11]. We
plugged PAPI [12] calls to acquire hardware performance counters into the source code of NWChem-6.0 and PSI3.4.0 and obtained the opcount on a desktop machine with quad-core Intel(R) Core(TM) i5 CPU 650 @ 3.20GHz
processors. We also compared OpMin with Engels-Putzka and Hanrath’s[13] genetic approach (noted as Genetic in
the tables).
Table 3 shows the opcount obtained from OpMin, NWChem, PSI3, and Genetic optimization for the equations.
For each equation, we used parameters for H2 O molecules under two diﬀerent basis sets, PVDZ and PVTZ, diﬀering
in the V/O ratio. For CCSD and CCSDT equations, we also obtained opcount exploiting spatial symmetry in the
tensors (c2v entries in the table). We were able to compare OpMin with PSI3 only on UCCSD and RCCSD since
PSI3 does not implement the other models. Similarly, we compared OpMin with Genetic optimization on UCCSD
and UCCSDT because these were the only data available in their document for the equations we evaluated.

419

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421
Table 3: Experimental results on H2 O molecule. PVDZ: (O, V) = (5, 19). PVTZ: (O, V) = (5, 53). For brevity we use notation ab for a · 10b .

Basis
PVDZ
PVTZ

Sym
c1
c2v
c1
c2v

NWChem PSI3
1.248
9.807
7
2.00
1.107
9
2.429
2.60
3.038
2.238
(a) UCCSD

Equation
X1
X2

OpMin
8.567
7.736
2.409
1.908

Basis NWChem
PVDZ
1.237
PVTZ
1.488
PVDZ
2.058
PVTZ
3.819
(c) UEOMCCSD
Basis
PVDZ
PVTZ

Genetic
3.588
N/A
1.0210
N/A

OpMin
3.756
4.577
1.538
3.299

Symmetry
c1
c2v
c1
c2v

Basis
PVDZ

Sym
c1
c2v
c1
c2v

PVTZ

Equation
X1
X2

NWChem*
9.317
1.517
2.019
2.358
(b) RCCSD

Basis NWChem*
PVDZ
6.656
PVTZ
7.707
PVDZ
1.578
PVTZ
2.989
(d) REOMCCSD

NWChem OpMin
1.3610
8.389
9
1.27
6.658
11
8.28
4.7611
10
5.19
3.2610
(e) UCCSDT

PSI3
2.327
3.676
5.318
6.827

OpMin
3.717
3.276
8.848
6.777

OpMin
1.406
1.407
7.207
1.519

Genetic
1.8810
N/A
1.6012
N/A

NWChem*: TCE module in NWChem uses spin-orbital expressions, which is diﬀerent from spin-free expressions used in OpMin and PSI3

Table 3(a) shows the opcount comparison for the UCCSD equation. OpMin has an average of 1.27x opcount
reduction compared to NWChem, 1.08x compared to PSI3, and 4.22x compared to Genetic optimization. If spatial
symmetry is exploited, the improvement is an average of 2.09x compared to NWChem and 1.30x compared to PSI3.
Table 3(b) illustrates the opcount for the RCCSD equation. OpMin has an average cost reduction of 2.39x compared to
NWChem, but 0.61x compared to PSI3. PSI3 does better for the RCCSD equation because it implements a manually
optimized equation. However, if spatial symmetry is exploited in both OpMin and PSI3, then the opcount becomes
comparable (average of 1.06x). In Table3(c)(d)(e), we can see that OpMin has an average opcount reduction of 3.26x
on X1 and 1.25x on X2 for UEOMCCSD, and 5.13x on X1 and 2.08x on X2 for REOMCCSD compared to NWChem.
For UCCSDT, OpMin has an average cost reduction of 1.72x compared to NWchem and 2.80x compared to Genetic
optimization.
5. Choosing a Small Set of Optimized Forms
OpMin can be used to optimize CC equations for any desired value of O and V. However, in practice it may be
unrealistic to generate optimal expression for every combination of O and V. In this section, we show how we can
choose a few combinations of O and V to produce tensor expressions within 3% of the optimal for all O and V of
interest. We do this by exploiting the fact that the relative cost contribution to the total opcount of any two terms of
the same order in the tensor expression does not diﬀer with changes in O and V, as long as the ratio between O and V
remains the same.
Consider any two terms in a tensor expression of order n. We may write them as Oa V (n−a) and Ob V (n−b) . Let the
ratio V/O = c. Without loss of generality, we can let O = x and V = cx where x is some non-negative integer. Using
this notation, we can now compute the relative cost contribution between the two terms as:
xa . (cx)n−a
Oa V (n−a)
=
= cb−a
Ob V (n−b)
xb . (cx)n−b

420

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421

The result depends only on c, b and a but not on x. This implies that the optimal tensor expression resulting from
diﬀerent pairs of O and V that have the same ratio should be similar since the relative cost contribution of the highest
order tensor terms are the same in all cases. Our experimental result using UCCSD T2 shows that this is the case as
can be seen from the graphs below.

Figure 1: Operation Count for V/O = 40 optimized at diﬀerent ratios

Figure 2: Percentage diﬀerence from optimal Operation count for diﬀerent V/O ratios optimized at V/O = 5 and V/O = 40

Figure 1 shows the ratio of opcount for O = 10 and V = 400 optimized at various V/O to optimal opcount
optimized at V/O = 40. The x-axis of the plot represents various V/O ratios while the y-axis shows opcount optimized
at these ratios with respect to the optimal opcount. We can see from the plot that for values of V/O closer to 40, the
ratio is close to1, implying that the opcount is similar to the optimally optimized case. For the ratio V/O from 15 to 1,
the opcount ratio becomes larger showing that the opcount increases and the reduction is not as eﬃcient. Furthermore,
the opcount ratio changes only after a large change in V/O ratio. The implication of this is that, a few combinations of
V and O is enough to produce near-optimal opcount for the entire O − V space of interest. We can see from Figure 2
that two pairs of V and O with ratio 5 and 40 is suﬃcient to span entire V and O space. In this ﬁgure, x-axis represents
V/O ratio used to compute opcount from tensor expressions optimized for ﬁxed V/O ratio of 5 and 40. The y-axis
shows the percentage diﬀerence from optimal opcount for the opcount computed for each V/O ratio on the x-axis.
The ratio of V/O = 10 could be used as a transition point for deciding which ratio of V and O to use for minimizing
the operation count. If the tensor expression generated from V/O = 5 is selected for all V/O < 10 and V/O = 40 is
selected for all other cases, we can acheive 3% of the optimal opcount.
6. Related Work
Manually optimized factorizations have been published for the lower order CCSD method [14] and implemented,
for example, in the PSI3 [11] software. The TCE (Tensor Contraction Engine) project [15, 16, 17] developed automated algorithms for operation count minimization of tensor expressions. An operation minimization heuristic
exploiting antisymmetry in tensors was implemented in the TCE developed at Paciﬁc Northwest National Laboratory
[15] and many parallel methods were derived using the TCE and incorporated into the NWChem quantum chemistry suite [10]. In our experiments, we compared the operation counts obtained by the implementation described in
this paper, and demonstrated signiﬁcant improvement over the TCE-generated implementation in NWChem. Operation minimization of tensor expressions previously addressed by Hartono et al. [8, 18] did not model any symmetry
properties of tensors; we have built on that work in the developments reported in this paper. Very recent work by
Engels-Putzka and Hanrath uses genetic algorithms for performing operation minimization of tensor contraction expressions [13]. In experimental evaluation, we compared our results with theirs (for the equations evaluated by us for
which results were available from their paper), showing signiﬁcant improvement in operation count of our optimized
expressions.

Pai-Wei Lai et al. / Procedia Computer Science 9 (2012) 412 – 421

421

7. Conclusion
In this paper, we presented OpMin for operation minimization of arbitrary tensor expressions with symmetry
properties. The eﬀectiveness of our approaches has been demonstrated using examples from CC equations in quantum chemistry. OpMin oﬀers practical usefulness to optimize complex equations such as CCSDT and EOMCCSD,
which are extremely complex and diﬃcult to implement. Our optimized equations are proven to have lower operation counts than actual implementations in real world programs. Furthermore, we have also shown that CC equations
optimized for few combinations of O and V can be used as eﬀective solution for all combination of O and V of interest.
Acknowledgement
E.F.V. is thankful for the ﬁnancial support of the U.S. National Science Foundation (SI2 -SSI Award No. OCI1047696). E.F.V. is an Alfred P. Sloan Research Fellow and a Camille Dreyfus Teacher-Scholar. We thank NSF
for the support of this work at The Ohio State University via award OCI-0926688. We are also grateful to Dr. Marcel
Nooijen for his guidance and support.
References
[1] R. J. Bartlett, M. Musial, Coupled-cluster theory in quantum chemistry, Rev. Mod. Phys. 79 (1) (2007) 291–352.
[2] G. D. Purvis, R. J. Bartlett, A full coupled-cluster singles and doubles model: The inclusion of disconnected triples, The Journal of Chemical
Physics 76 (1984) 1910–1918.
[3] J. Noga, R. J. Bartlett, Erratum: The full ccsdt model for molecular electronic structure [j. chem. phys. 86, 7041 (1987)], The Journal of
Chemical Physics 89 (1988) 3401.
[4] G. E. Scuseria, H. F. S. III, A new implementation of the full ccsdt method for electronic structure calculations, Chemical Physics Letters 152
(1988) 382–386.
[5] J. Geertsen, M. Rittby, R. J. Bartlett, The equation-of-motion coupled-cluster method: Excitation energies of be and co, Chemical Physics
Letters 164 (1989) 57–62.
[6] D. C. Comeau, R. J. Bartlett, The equation-of-motion coupled-cluster method. applications to open- and closed-shell reference states, Chemical Physics Letters 207 (1993) 414–423.
[7] P. Pulay, S. Saebø, W. Meyer, An eﬃcient reformulation of the closed-shell self-consistent electron pair theory, The Journal of Chemical
Physics 81 (1984) 1901–1905.
[8] A. Hartono, A. Sibiryakov, M. Nooijen, G. Baumgartner, D. Bernholdt, S. Hirata, C. Lam, R. Pitzer, J. Ramanujam, P. Sadayappan, Automated operation minimization of tensor contraction expressions in electronic structure calculations, in: Proc. ICCS 2005 5th International
Conference, Vol. 3514 of Lecture Notes in Computer Science, Springer, 2005, pp. 155–164.
[9] A. Sibiryakov, Operation Optimization of Tensor Contraction Expressions, Master’s thesis, The Ohio State University, Columbus, OH (August 2004).
[10] Nwchem-6.0, http://www.nwchem-sw.org.
[11] Psi-3.4.0, http://www.psicode.org.
[12] Papi-4.1.2.1, http://icl.cs.utk.edu/papi/.
[13] A. Engels-Putzka, M. Hanrath, A fully simultaneously optimizing genetic approach to the highly excited coupled-cluster factorization problem, The Journal of Chemical Physics 134 (2011) 124106.
[14] J. F. Stanton, J. Gauss, J. D. Watts, R. J. Bartlett, A direct product decomposition approach for symmetry exploitation in many body methods.
i. energy calculations, The Journal of Chemical Physics 94 (1991) 4334.
[15] S. Hirata, Tensor contraction engine: abstraction and automated parallel implementation of conﬁguration-interaction, coupled-cluster, and
many-body perturbation theories, The Journal of Physical Chemistry A 107 (46) (2003) 9887–9897.
[16] G. Baumgartner, A. Auer, D. Bernholdt, A. Bibireata, V. Choppella, D. Cociorva, X. Gao, R. Harrison, S. Hirata, S. Krishnamoorthy,
S. Krishnan, C. Lam, Q. Lu, M. Nooijen, R. Pitzer, J. Ramanujam, P. Sadayappan, A. Sibiryakov, Synthesis of high-performance parallel
programs for a class of ab initio quantum chemistry models, Proceedings of the IEEE 93 (2) (2005) 276–292.
[17] A. Auer, G. Baumgartner, D. Bernholdt, A. Bibireata, V. Choppella, D. Cociorva, X. Gao, R. Harrison, S. Krishanmoorthy, S. Krishnan,
C. Lam, M. Nooijen, R. Pitzer, J. Ramanujam, P. Sadayappan, A. Sibiryakov, Automatic code generation for many-body electronic structure
methods: The Tensor Contraction Engine, Molecular Physics 104 (2) (2006) 211–218.
[18] A. Hartono, Q. Lu, X. Gao, S. Krishnamoorthy, M. Nooijen, G. Baumgartner, D. Bernholdt, V. Choppella, R. Pitzer, J. Ramanujam, A. Rountev, P. Sadayappan, Identifying cost-eﬀective common subexpressions to reduce operation count in tensor contraction evaluations, in: Proc.
ICCS 2006 6th International Conference, 2006, pp. 267–275.

