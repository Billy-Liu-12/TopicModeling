Access Control Model Based on RDB Security Policy for
OWL Ontology*
Dongwon Jeong1, Yixin Jing2, and Doo-Kwon Baik2
1

Dept. of Informatics & Statistics, Kunsan National University,
San 68, Miryoung-dong, Gunsan, Jeollabuk-do, 573-701 Korea
djeong@kunsan.ac.kr
2
Dept. of Computer Science & Engineering, Korea University,
Anam-dong, Sungbuk-gu, Seoul, 136-701 Korea
{jing,baik}@software.korea.ac.kr

Abstract. Most of information has been storing and managing in relational databases and there are many researches to store OWL ontologies. In this situation, a study on efficient access control model using relational security model is
required. The paper proposes a novel access control model for OWL ontologies
in relational database systems. The access control is realized through evaluating
queries against an OWL data view. On one hand, the OWL data view prevents
the sensitive information revealed to unauthorized users. On the other hand it
considers the inference ability of users. An empirical study verifies the effectiveness of our approach.

1 Introduction
Web Ontology Language (OWL) is a knowledge description language and is recognized as one of the most important technologies to realize Semantic Web [1]. Compared to XML, OWL supports more enhanced impression power and enables machines to infer new knowledge. There is much effort on how to build and store OWL
knowledge bases (Ontologies, Documents). However, few of research pay attention to
the OWL document security issue. This may result in knowledge leakage and also
makes high-quality services through secure knowledge access so hard.
This paper contributes a novel OWL security (Access Control) model using relational database security model. It means that we assume OWL knowledge bases are
stored in a relational database. There might be a question why we propose an access
control model for OWL knowledge bases in relational databases. The reasons are: (1)
most of information has been managing by relational database systems; (2) relational
database systems provide a secure and stable access control model.
Therefore, we propose a security model based on relational databases considering
this reality. In other words, for enforcement of access control to the OWL knowledge
bases, the persistent storage should be taken into consideration. The prevalent
*

This work was supported by the Korea Research Foundation Grant funded by the Korean
Government(MOEHRD) (KRF-2006-311-D00776).

Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 720–727, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Access Control Model Based on RDB Security Policy for OWL Ontology

721

approaches can be classified into two types: (1) File-based storage model; (2) Persistent storage model (e.g., RDB-based storage). The file-based storage models, such as
Jena [2] and Protege [3], are based on the graph model (Triple structure). Jena provides a persistent storing method to manage OWL knowledge in relational databases.
However, it still suffers from the inefficiency.
To solve this problem, we first define a new database layout to efficiently store
OWL knowledge. In this paper, our proposal on OWL ontology data access control is
outlined as follows: (1) First, we design an efficient relational data model to store
OWL data persistently. Our model gains predominant over Jena2; (2) Second, we
define a new OWL security model using relational access control model; (3) Finally,
we show the evaluation results through experiments.

2 Persistent OWL Storage Model in Relational Databases
2.1 OWL-DL Ontology Model
We briefly review OWL-DL document. Without loss of generality, we represent an
OWL ontology by Definition 1.
Definition 1. OWL-DL ontology is composed of (N, P, literal),
Predicate P: NÆN | NÆliteral
type_n: NÆ{NamedClass, Instance, Non-NamedClass}
type_p: PÆ{Transitive, Non-Transitive}
type_p (pc:=subClassOf)=Transitive
We consider the ontology as a graph. N and P represent nodes and edges respectively.
P is a one to one mapping from N to N, or from N to literal. In the context of OWLDL, N is a set of subclasses and instances of RDFNode, while P is a set of subclasses
and instances of RDFProperty. Function type_n and type_p are many-to-one mapping
and return the type of element of N and P respectively. As for any ni in N, ni type is
either NamedClass, Instance, or Non-NamedClass. NamedClass are those classes
which are given explicit URIs in the OWL document. Non-NamedClass includes such
as ClassExpression, Restriction and AnonymousClass defined in the OWL syntax. As
for any pi in P, the pi type is either Transitive or Non-Transitive. If a pi is transitive,
pi(n1, n2) pi(n2, n3)Æpi(n1, n3). Particularly if a pc is rdfs:subClassOf, its type is of
Transitive.
In addition, we define two functions to facilitate the query evaluation algorithm.
asDomain(ni) returns a set of properties which domain is ni; asRange(ni) returns a set
of properties which range is n. Take the OWL file in Fig. 1 as an example, which is
shown as a graph. The RedWine is the subclass of Wine and a restriction, which constrains that property hasColor refers to Red. type_p(subClass) is Transitive, other
properties are Non-Transitive.

∧

2.2 Permanent Storage Model
The goal of this paper is to define a novel OWL access control model based on the
relational database security model. It means that we an efficient database layout to

722

D. Jeong, Y. Jing, and D.-K. Baik

store OWL knowledge base and to provide an efficient way to facilitate access control. First, the named Classes in an OWL document are identified. According to each
named Class’s definition, its nesting Restriction is saved in different tables. The layout also saves the instances of each named Class. The Property table created connections between the Classes by specifying property domain and range. Through testing
with lots of existing OWL ontologies, the persistent relational model is proved capable of saving any general OWL data.

Fig. 1. A simple OWL ontology

Fig. 2 shows a metamodel of the relational model for storing persistently. An OWL
ontology basically consists of a triple (Subject, Predicate, Object). In this paper, both
of Subject and Object are described as Concept or Instance. In the OWL specification,
they are defined as Class and Individual.
involve

involved_by

involved_by
1

Instance_Property

involve

N

N

1
N

Instance_Definition
N

specialize

specialize_by

1

1

Concept_Definition

qualified_by

Concept_Property

N qualified_by
qualify 1

qualify 1

Instance_Axiom

N

N

N

qualified_by

qualify 1

specialize

specialize_by

1

Concept_Axiom

Concept_Prop_Axiom

Fig. 2. Metamodel for efficiently storing OWL ontology

3 OWL Security Model
3.1 Definition of Access Control Model
In this section, we define the OWL data access control model. This concept model
provides a general definition.

Access Control Model Based on RDB Security Policy for OWL Ontology

723

Definition 2. OWL Access Control Model: M = (P, V, R),
where P: OWL data in a persistent storage (RDB);
V: OWL data view set; and R: Role set.
V is used to constrain the OWL data that a role can obtain. For each role, there is only
one view connected with it. User can access to the P through one of V by playing a
role. In addition, we define the function ϕ: VÆR to return a data view assigned to a
role. ϕ is a many to one function. According the definition 2, a framework for the
propose security model is illustrated in Fig. 3.

OWL Data Sets
(Ontologies)

Authorization

Users

OWL Query Processor
OWL Query

Parsing and Storing (Translation)

Access Controlling
(Pruning & Rewriting)

Relational Database

Inference
Engine
(Reasoning)

SQL
OWL data sets

Metadata (including authorization info.)

Fig. 3. A framework for the proposed security model

3.2 Views for OWL Ontology
Although an OWL ontology is successfully ported into a relational database system,
the attempt to adopt the relational database security solution encounters challenges.
Creating view on the tables can only obtain an access control in a very limited level.
Only the limit to the column access is not enough. Access control on OWL data needs
to evaluate the query to individual record such as Wine or RedWine, which requires
the access control on the record level. The security view on OWL data consists of two
parts for securing N and P respectively.
Definition 3. OWL Data View: V = (VN, VP),
where VN: {ni} Æ {false, (true, transitiveEnd (pi) = [ns, ne]})}
VP: {pi} Æ {false, true}

∧

VN maps each node ni in ontology graph to a security specification for a given user.
The specification denotes a ni inaccessible (false), or accessible (true) along with a
constraint to transitive end. Transitive end constrains the inference ability from the
node. From the perspective of a graph, the inference ability can be considered as
the ability of how far the current node can access tracking along with a transitive
property. The TransitiveEnd defines the end of this inference path. [ns, ne] denotes end

724

D. Jeong, Y. Jing, and D.-K. Baik

nodes where the inference path comes to an end in two directions. The end node can
be Self, another node or Full. Self means the inference stop at the node itself. Full
doesn’t restrict the inference ability. VP denotes the access to a given property pi. An
example VN(RedWine) = (true, trasitiveEnd(subClassOf) = [self, Wine]) presents a
view constraining that a user can visit RedWine and can only visit its super classes till
Wine.

4 Experiment and Evaluation
A query is a request for accessing a given content in ontology. A query pattern is an
abstract template and a query (concrete query) request the desirable OWL information
by adopting this template. The query pattern and query can be defined as Definition 4
and Definition 5.
Definition 4. Query Pattern PQ = (
nj N, px, py P.

∈

∈

∧

1<=i<=|N|(px(?x

,ni)|py(nj,?x))), where ni

∈N|literal,

Each element of the conjunction is called a constraint. ni, nj, px, and py are named
condition variables. ?x is output variable.
Definition 5. Query q = [PQ] is a value assignment to condition variables in query
pattern PQ.
For example, a query get the instances of Car which are made in USA can be expressed as q = (instanceOf(?x, Car) make(USA, ?x )), constraints are instanceOf(?x,
Car) and make(USA, ?x ). When a user issue a query, the query evaluation will first

∧

get the OWL view according to the user’s role through ϕ, then consult the view. If
the role is authorized to get access to all condition variables and output variable, the
satisfying result is returned. Moreover, query evaluation is responsible to generate
SQL query to the underlying database.
This paper assumes that the translation from OWL data query in query pattern to
database compliant SQL is possible. The query evaluation algorithm Query_Eva (V,
q) is shown in Fig. 4.
As an example, consider the query q=instanceOf(RedWine_1, ?x) along with the
VN(RedWine). Since VN(RedWine) defines the super classes of RedWine is visible
until Wine, and the other content on ontology is fully accessible, the algorithm
returns a graph consists of RedWine and Wine, without PortableLiquid. If the same
query is processed with normal reasoning engine without OWL data view, the result
would include PortableLiquid. Our proposal offers a controllable reasoning approach. Another example query is instanceOf(?x, PortableLiquid). If
VN(PortableLiquid) = (true, trasitiveEnd(subClassOf)=[Wine, self] ), the returned
graph includes Wine_1, without the instances of RedWine. The evaluated result is
illustrated in Fig. 5.

Access Control Model Based on RDB Security Policy for OWL Ontology

725

Fig. 4. Query evaluation algorithm

Fig. 5. Query evaluation result

In the experiment, we put focus on the effect that the number of query constraints
and transitive property take on the efficiency. To exactly investigate the relationship

726

D. Jeong, Y. Jing, and D.-K. Baik

between the numbers of query constraints with time-consuming, we tested a query,
which constraints number is from 100 to 1000, and the constraints’ properties are all
non-transitive.
Fig. 6 shows the query time of the algorithm under different number of query constraints. From the figure, we can observe that the time is nearly linearly proportional
to the number of constraints. For a given query which has fixed 50 constraints, we
assigned to all the constraints with the same transitive property and the same inference ability (length of transitive path in OWL). In 10 times experiment, we changed
the path length from 1 to 10. Fig. 7 shows the querying time is linear proportional to
the length of transitive path.

Fig. 6. The query time with different constraints

Fig. 7. The query time with different inference ability

5 Related Work
Several tools for persistently storing ontologies have been proposed. Protege project
[3] is one of precursors for modeling and managing ontologies. The file-based storage
results in that whenever an ontology is visited, the ontology has to be imported into
memory. In case of the ontology size is much larger than memory, or ontology is
visited frequently, this approach introduces significant overhead. Instead of storing
ontologies in files, Jena2 provides persistent ontologies storage in RDB. In this approach, each RDF statement is stored as a single row in a three column statement
(subject-predicate-object) table [2]. A complete ontology class is defined by multiple
RDF statements. As a result, to achieve the complete definition of an ontology class
requires to combine many statements. This is also time-consuming when facing frequent query. To solve these problems, we proposed a new relational table layout for
storing ontologies persistently. A number of recent research efforts have considered
access control models for XML data. One of the representative efforts is the access
control language, such as XML Access Control Language (XACL) [4], eXtensible
Access Control Markup Language (XACML) [5] and Author-X [6] [7]. The access
control language shares the feature that the language enforces an object-subjectaction-condition oriented policy on queries. [8] introduced an approach to define
security views for XML document for different users. [9] adopts the encryption

Access Control Model Based on RDB Security Policy for OWL Ontology

727

technology in securing XML document. All above approach is not suitable for the
access control on OWL. In XML document, a concept is defined within an element.
In case of OWL, a concept can be defined anywhere in a document. So, only securing
individual elements is not enough. On the other hand, OWL document holds the inference ability. Neither of XML-targeted access control considers this issue. This
paper proposes a novel approach to overcome these problems.

6 Conclusion
This paper contributes an approach to access control on OWL ontologies. Users can
get access to an OWL document, through a specified view. Thus, the sensitive information is protected. In addition, the view specifies not only the element accessibility
but also the inference ability. We also proposed the algorithm to evaluate queries
against the view. The underlying persistent storage provides an efficient data retrieval.
The further study will be focused on improving the view definition and refining the
evaluation algorithm. The system implementation is also under consideration.

References
[1] OWL Web Ontology Language, W3C Recommendation, February 10, http:// www.w3.org/
TR/owl-features/ (2004)
[2] Wilkinson K., Sayers, C., Kuno, H., and Reynolds, D.: Efficient RDF storage and retrieval
in Jena2. In Proceedings of VLDB Workshop on Semantic Web and Databases (2003)
131-150
[3] Noy, N.F., Fergerson, R.W., and Musen, M.A.: The Knowledge Model of Protégé-2000:
Combining Interoperability and Flexibility. In proceedings of 12th International Conference, EKAW 2000, Juan-les-Pins, France, October 2-6 (2000)
[4] Hada, S. and Kudo, M.: XML access control language: Provisional authorization for XML
documents, http://www.trl.ibm.com/projects/xml/xacl/xacl-spec.html.
[5] OASIS, eXtensible Access Control Markup Language (XACML), http://www.oasisopen.org/committees/xacml.
[6] Bertino, E., Castano, S., and Ferrari, E.: On Specifying Security Policies for Web Documents with an XML based Language, In Proceedings of ACM SACMAT2001 (2001)
[7] Bertino, E., Castano, S., Ferrari, E.: Securing XML documents with Author-X, IEEE Internet Computing, Vol. 5, No. 3, May/June (2001) 21-31
[8] Fan, W., Chan, C.-Y., and Garofalakis, M.: Secure XML Querying with Security Views,
SIGMOD 2004, Paris, France, June 13-18 (2004)
[9] Geuer-Pollmann, C.: XML Pool Encryption, ACM Workshop on XML Security, Fairfax,
VA, USA, November 22 (2002)

