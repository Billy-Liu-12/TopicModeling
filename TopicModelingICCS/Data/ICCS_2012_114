Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 256 – 265

International Conference on Computational Science, ICCS 2012

Eﬃcient Shared-Array Accesses in Ab Initio Nuclear Structure
Calculations on Multicore Architectures
Avinash Srinivasaa , Masha Sosonkinaa,∗, Pieter Marisb , James P. Varyb
a

b

U.S. DOE Ames Laboratory
Iowa State University
Ames, IA 50011, USA
Department of Physics and Astronomy
Iowa State University
Ames, IA 50011, USA

Abstract
With the increase in the processing core counts on modern computing platforms, the main memory accesses
present a considerable execution bottleneck, leading to poor scalability in multithreaded applications. Even when the
memory is physically divided into separate banks, each associated with a set of cores, i.e., exhibiting the so called
nonuniform memory access (NUMA) architecture, the access time to the shared data structures may be detrimental
to the scalability. Hence, it is imperative to carefully map large shared arrays to speciﬁc memory banks based on the
nature of the computation and the multithreaded parallelism characteristics. This paper describes memory-pinning
strategies pertinent to sparse matrix-vector multiplication and vector orthogonalization phases of an ab initio nuclear
structure computation performed by the MFDn package. Several nuclei and nuclear interactions were considered
in the large-scale test cases with the dimensions of the sparse symmetric matrices ranging from 32 million to 320
million. Performance gains of up to 25% were observed with the proposed strategies as compared to the default
memory placement policy.
Keywords: Nonuniform memory access (NUMA) node, Multithreaded execution, Memory aﬃnity, Sparse
matrix-vector multiply, Vector orthogonalization, Ab initio nuclear structure calculation

1. Introduction
Transistor densities have been growing in accordance with Moore’s law resulting in the growth of the number of
cores on a single processor chip. With the increasing core counts on modern multiprocessor systems, main memory
bandwidth becomes an important consideration for high performance applications. The main memory subsystem
can be of two types nowadays: Uniform Memory Access (UMA) or Nonuniform Memory Access (NUMA). UMA
machines consist of a single physical memory bank for the main memory, which may lead to memory bandwidth
∗ Corresponding

author
Email addresses: avinashs@scl.ameslab.gov (Avinash Srinivasa), masha@scl.ameslab.gov (Masha Sosonkina),
pmaris@iastate.edu (Pieter Maris), jvary@iastate.edu (James P. Vary)

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.027

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

257

contention when there are many application threads trying to access the main memory simultaneously. This problem
of scalability may be alleviated by NUMA architectures wherein the main memory is physically split into several
memory banks, with each bank associated with a set of cores, the combination of which is called a NUMA node.
Hence, memory contention may be reduced among the threads.
However, accesses to remote memory banks as in the case of large shared arrays, for example, may become
painstakingly slow and may aﬀect the application scalability for higher thread counts [1]. Thus, it is imperative to
carefully consider which parts of the shared data should be attributed to which physical memory bank based on the
data access pattern or other considerations. Such an attribution of data to physical main memory is often called
memory aﬃnity [2, 3]. This notion goes hand in hand with the CPU aﬃnity, as noted in [4], such that the threads are
bound to speciﬁc cores from the application startup and their context switches are disabled. Once threads are bound,
the memory may be pinned too. On multicore NUMA platforms, the ability to pin the memory in the application code
becomes important since it is generally most beneﬁcial for a data portion local to a thread to be placed on the memory
bank local to the core on which it is executing1 , so as to ensure the fastest access [6]. Conversely, the default memory
aﬃnity policy — used in most Linux-type operating systems — is enforced system-wide for all the applications. Thus,
this default (called ﬁrst-touch) memory placement policy calls for improvement to achieve better scalability, which
may be obtained using already existing software libraries to work with NUMA nodes [3].
The motivation for the present work was to take full advantage of the multicore NUMA nodes in executing verylarge scale parallel ab initio nuclear physics calculations performed by the MFDn package [7] and [8] developed at
Iowa State University. Many Fermion Dynamics nuclear (MFDn) [9] handles very large sparse unstructured matrices
arising in the solution of the underlying Schr¨odinger equation. Hence, the remote memory accesses in such operations
as sparse matrix-vector multiplication (SpMV) and vector orthogonalization, are considered in this research since they
constitute the bulk of the computational load in MFDn.
The paper is organized as follows. Section 1.1 overviews the computational steps of MFDn that employed large
shared arrays. Section 2 brieﬂy outlines the authors’ work [10] on memory aﬃnity, which serves as the foundation of
this work, followed by the description of the memory pinning strategy for the orthogonalization within MFDn. Section 3 depicts the large-scale test cases used along with the experimental results and their comparisons. In Section 4,
the concluding remarks are given.
1.1. Overview of the MFDn application
MFDn is a large scale parallel code developed at Iowa State University and is used for ab initio nuclear physics
calculations [9]. The MFDn code computes a few lowest converged solutions, that is the eigenvalues (energy levels)
and eigenvectors (wave functions), for the many-nucleon Schr¨odinger equation H |φ = E |φ . In MFDn, a sparse
symmetric Hamiltonian matrix H of size m × m is evaluated in a large harmonic oscillator basis. The dimension of the
matrix characterizes the size of the many-body basis used to represent a nuclear wave function. In general, the larger
the basis set and the total number of the oscillator quanta Nmax above the lowest nuclear conﬁguration, the higher the
accuracy of the energy estimation [11, 12].
MFDn diagonalizes the matrix H by an iterative Lanczos procedure with re-orthogonalization to obtain the lowlying eigenvalues and eigenvectors. The eigenvectors are then used to obtain a suite of observables, which, once
converged, can be compared with experimental nuclear structure data, and used for new predictions in nuclear
physics [13]. The Lanczos procedure is of particular interest in this work because of the MFDn multithreaded implementation and the extensive use of shared arrays. Each iteration consists of a sparse matrix-vector multiplication
(SpMV), followed by an orthogonalization (VO) against all the previous Lanczos vectors. Each Lanczos iteration
typically spends the most time in SpMV with the Hamiltonian matrix, only the lower half of which is stored to save
memory.
The MFDn software is written in Fortran90 and parallelized using a combination of MPI and OpenMP, being
actively developed for almost two decades. In the early development of the code [7] and [8], the main focus has
been eﬃcient memory allocation; signiﬁcant performance enhancements have been made over the last ﬁve years
[9, 14, 15, 16, 17] under the U.S. Department of Energy Scientiﬁc Discovery through Advanced Computing (SciDAC)
1 Here and throughout the paper, it is assumed that only one thread is executing per core and there is no oversubscription of cores as has been
studied, e.g., in [5].

258

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

for i = 1 to m do
for k = ptrA(i) to ptrA(i + 1) − 1 do
y(jA(k)) ← y(jA(k)) + x(i) × A(k)
yt (i) ← yt (i) + xt (jA(k)) × A(k)
end for
6: end for
1:
2:
3:
4:
5:

Figure 2: Pseudo-code for sparse matrix-vector multiplication in MFDn
for the oﬀ-diagonal processors.
1:
2:
3:
4:
5:
6:
7:
Figure 1: Two dimensional distribution of the lower triangle of the Hamiltonian matrix (Diagonal processors are
numbered 1 – 5 and marked in red).

for i = 1 to l do
α ← 0.0
w ← wi
for j = 1 to m do
α ← α + v( j) × w ( j)
end for
end for

Figure 3: Pseudo-code for the local portion of the vector orthogonalization operation performed in a processor rank of MFDn. Each vector
is of size m and the previously orthogonalized vectors are denoted as
wi i = 1, . . . l.

Program. As a result, MFDn has been shown to have good scaling properties using the Message Passing Interface
(MPI)2 on existing supercomputing architectures due to the recent algorithmic advances that signiﬁcantly improved
its overall performance. In [15], the use of a hybrid MPI/OpenMP approach has been presented to take advantage of
the current multicore supercomputing platforms [18]. Here, the sparse matrix data is partitioned among the available
compute nodes and is exchanged by using the MPI distributed communication library. Then, the local portions of the
data are accessed also but, this time, by using multithreaded programming tools, such as OpenMP. In MFDn, the lower
half of the sparse matrix is distributed across the available MPI processes, which are organized in the 2 × 2 grid, while
the upper half is not stored due to symmetry. Fig. 1 shows the MFDn sparse matrix distribution across the available
MPI processes, which are organized in the 2 × 2 grid. Because of the 2-dimensional distribution of the matrix, MFDn
runs on n(n + 1)/2 processors, where n is the number of diagonal processors. The oﬀ-diagonal processors (numbered
6 – 15 in Fig. 1) have more work to do during the SpMV phase since they have to work with the upper half of the
matrix as well (for computing the transpose output vector) which is not stored in memory. The Lanczos vectors,
needed for re-orthogonalization after every matrix-vector multiplication, are distributed over all the processors.
The code segment in Fig. 2 describes the SpMV for MFDn on an oﬀ-diagonal MPI processor rank. Sparse matrices
are characterized by a very large percentage — often more than 99.99% — of zero entries, which are not stored for
performance and space reasons. An r × m sparse matrix is represented by three one-dimensional arrays:
A, for all the non-zero values;
jA for their positions in the in each row or column;
ptrA for the pointers to the start of a column or row.
Such a storage format is called Compressed Sparse Row (CSR) or Compressed Sparse Column (CSC) depending on
whether column or row indices are being stored in jA, respectively. Then, a multiplication of the sparse matrix stored
in CSR or CSC by a vector x of size m may be performed to obtain a vector y of size r, Additionally, xt and yt refer to
the components of the input and output vectors, respectively, used with the transposed matrix (i.e., upper matrix half).
Hence, the SpMV shown in Fig. 2 is in the CSC format, which also contains some operations from the CSR format
due to symmetry. In order to avoid race conditions in the write operation on y (line 3), an auxiliary output storage
vector is used by each thread, followed by its global summation performed in a “critical section” of OpenMP.
Following the SpMV, the resulting vector is accumulated on the n diagonal processors. Next, this vector is distributed to all the processors performing the local — and the most computationally intensive — part of the orthog2 MPI

Forum: http://www.mpi-forum.org.

259

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

Threads
on Cores

Threads
on Cores

Threads
on Cores

Threads
on Cores

Shared
Data

Threads
on Cores

Chunk2
Chunk3

Chunk1

NUMA Node1

Threads
on Cores

NUMA Node2

NUMA Node1

NUMA Node3

Figure 4: Shared data access pattern with the default ﬁrst-touch
policy. Dashed rectangles represent NUMA nodes.

NUMA Node2

NUMA Node3

Figure 5: Proposed placement of the shared data accessed deterministically. Dashed rectangles represent NUMA nodes.

onalization operation against all the previous Lanczos vectors, stored in a large array that is distributed across the
memories of all the processor ranks. The code segment for the local orthogonalization part is shown in Fig. 3.
2. Memory placement strategies for diﬀerent computation types
The default Linux ﬁrst-touch policy ensures that there is fast access to at least one memory bank regardless of the
shared data access pattern within application threads [19]. Speciﬁcally, the data is placed in the memory bank local to
the thread writing to it ﬁrst, which is typically done by the master thread. Thus, the downside of the ﬁrst-touch policy
is that all the threads accessing this shared data converge to this NUMA node, as shown in Fig. 4, causing bandwidth
contention in the memory bank servicing the master thread. The problem may be exacerbated since the master thread
typically initializes multiple shared data structures. Since the threads have to go out of their local NUMA node for
accessing the data, the remote access latencies are also incurred, which causes an increase in application performance
overhead. For very large shared arrays, which do not ﬁt into a single local NUMA node, the operating system allocates
the memory in other, non-local, nodes under the default ﬁrst-touch policy. Since the memory accesses are spread out
across several NUMA nodes now, the bandwidth contention may be reduced among the threads, which, for very largescale shared arrays, may actually yield and an improvement over the scenario shown in Fig. 4, when the multithreading
degree is high.
Conversely, the goal of the developed memory placement strategy is to minimize the data transfer overhead between the main memory and the application code when accessing shared data. Hence, the default (ﬁrst-touch) placement has to be changed according to certain application and system considerations [20]. In a nutshell, the following
general steps need to be taken to study the application at hand to determine the memory placement for its shared data
structures:
Step 1: Identify all shared data structures in the application;
Step 2: Classify them as having deterministic and non-deterministic access pattern by threads.
– For deterministic: Find a chunk-to-thread correspondence; Pin each chunk to the memory bank local to the
corresponding thread.
– For non-deterministic: Spread the data across all the memory banks (Optional).
The classiﬁcation step (Step 2) may be performed based on a deﬁnition of the deterministic and non-deterministic
accesses to a data structure. In the former, portions of the structure are accessed by a thread exclusively, while several
threads may access a portion in the latter case. This deﬁnition is rather general and is featured, for example, in the
case of multithreaded loop parallelization, such that a block of loop iterations is dedicated to a thread. If the loop
index corresponds to a data portion (called chunk), such as that of a shared array, then each thread accesses its own
array chunk exclusively. Such an array may be classiﬁed as having deterministic access and then distributed among
speciﬁc memory banks. Fig. 5 presents the obtained distribution to the local NUMA nodes (vertical arrows emphasize
the local access patterns) that minimizes the access latency. Algorithm 1 speciﬁes array chunk sizes attributed to each
thread and, consequently, to each NUMA node, by accepting the following inputs:

260

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

Total array dimension dim total;
Total number of threads nthreads;
Number of NUMA nodes mnodes (system parameter);
Number of cores lcores per NUMA node (system).
Algorithm 1 produces two outputs:
Chunk size dim per thread(i) attributed to thread i, (i = 1, . . . , nthreads).
Chunk size dim per node( j) attributed to NUMA node j, ( j = 1, . . . , mnodes).
Note that each NUMA node is typically associated with several cores, i.e., with a group of threads (one thread per
core). Algorithm 1 splits the data structure into chunks in accordance with the exact assignment thread access pattern,
in which each thread is assigned an (almost) equal contiguous portion of the data structure. This pattern is common
among multithreaded programming models, such as OpenMP [21], with the default assignment size to ensure contiguous data in each chunk. Additionally, the thread scheduling (also called work-sharing) is assumed to be static, so
that it is known before the loop execution. Thus, once the contiguous chunk sizes are determined by Algorithm 1, the
actual chunk attribution is accomplished by providing a mapping of chunk number to NUMA node number, where
array chunks and NUMA nodes are numbered consecutively, as in Fig. 5, for example.
Since, for the non-deterministically accessed data structures, their thread access pattern and timing are not known
in advance, they may be spread out in a ﬁne-grain fashion across all the memory banks. This step is optional because the “interleaved” distribution is not as beneﬁcial as the pinning array chunks deterministically to local thread
memories.
Algorithm 1 Determine chunk size per NUMA node.
for j = 1 to mnodes do
dim per node( j) ← 0
end for
per thread dim ← ceiling(dim total/nthreads)
virtual dim ← per thread dim × nthreads
o f f set ← virtual dim − dim total
for i = 1 to (nthreads − o f f set) do
dim per thread(i) ← per thread dim
end for
for i = (nthreads − o f f set + 1) to nthreads do
dim per thread(i) ← per thread dim − 1
end for
for j = 1 to mnodes do
for i = lcores × ( j − 1) + 1 to lcores × j do
dim per node( j) ← dim per node( j) + dim per thread(i)
end for
end for

2.1. Implementation details
The NUMA application programming interface (API) [3] available for Linux is used in this work to control the
data placement for shared arrays, overriding the default ﬁrst-touch memory aﬃnity policy employed by the operating
system. This API oﬀers two principal memory placement policies called bind and interleave. The former places
(binds) memory of an application on a selected memory bank or set of banks whereas the latter spreads (interleaves)
data on a page-by-page basis over the memory banks of a NUMA machine. If applied throughout the entire application, each policy may be too restrictive since it is often necessary to tailor the memory attribution to a particular
access pattern of a data structure [22]. For the ﬁne-tuning purposes, the NUMA API provides a system call mbind()
which may be used to apply these aﬃnity polices selectively to certain regions of the memory. An important aspect
to consider when using mbind() is that it is designed to work on large chunks of data which are aligned on a page
boundary i.e., the starting address of the chunk should be an integral multiple of the system page size. So, once the

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

261

shared array chunks have been determined, it becomes necessary to check whether each such chunk is page-aligned
before consigning it to a NUMA node. To beneﬁt from the selective and intelligent data placement on the memory
banks, the thread migration or their context switch has to be disabled. In other words, the CPU aﬃnity must be
observed, which may be accomplished with the sched setaffinity() system call also available on Linux systems.
Memory aﬃnity in sparse matrix-vector multiply. Sparse matrices are shared among the threads involved in the SpMV
computation and need to be mapped to local memory banks to ensure minimal data transfer overhead. Thus, the twostep strategy described in Section 2 is employed as follows. The shared arrays (denoted as A, jA, ptrA in Section 1.1)
that represent a sparse matrix typically have a deterministic SpMV access pattern, and thus, need to be bound to the
memory banks local to each accessing thread. On the other hand, the vectors x and y may be shared by threads with
either deterministic or non-deterministic access depending on the type of the storage format considered. Hence, these
vectors may beneﬁt from interleaving across all the memory banks. To eﬀectively distribute the shared arrays with
the deterministic access pattern, it becomes necessary to select speciﬁc portions (chunks) of these arrays which are
accessed by each thread. The output of Algorithm 1, i.e., the chunk size of each NUMA node, is used to determine
the array starting and ending indices that delineate each chunk boundary.
Memory aﬃnity in vector orthogonalization. Since the local portion of the orthogonalization involves a large dense
shared array of previously orthogonalized vectors, which, in addition, grows with the number of Lanczos iterations, it
makes sense to apply the memory aﬃnity strategy to pinning this array. Originally, OpenMP has been used to parallelize this operation [15], such a way that all the vector arrays are shared among the threads. As evident from Fig. 3,
the access pattern for the vectors is deterministic. Hence, the NUMA Bind policy is used to pin them to the appropriate NUMA banks. Algorithm 1 is applied to VO in the manner similar to SpMV if the large array of the orthogonalized
l vectors is assumed to be a 2-dimensional matrix W(l, m), where the vectors of dimension m are stored row-wise.
Application interface. To facilitate the usage of the proposed memory placement strategy, a high-level interface set,
termed MASA (Memory Aﬃnity for Shared Arrays) has been developed for sparse matrix-vector multiply in CSC or
CSR formats and for vector orthogonalization. This interface encapsulates the implementation of Algorithm 1, which
determines the contiguous chunk start and end positions within the arrays, and the memory pinning function calls
from libnuma3 (see [10] for a detailed description of the C function signatures composing MASA as well as for a
summary of related work dealing with NUMA eﬀects).
3. Experiment results
For the timing experiments, three cases were used, two with two-body interactions only (termed as 2B here) and
one with two- and three-body interactions (termed as 2+3B). The largest test cases are typical for current production
runs with MFDn, needed for ab initio description of nuclei in the middle of the p-shell, with the atomic mass A
ranging between 9 and 13. To obtain accurate results for such nuclei, basis space dimensions often exceed two billion.
(At present, the largest runs for p-shell nuclei were done with a matrix of dimension eight billion.) For practical
consideration, such as obtaining a reasonable turnaround time in the batch processing queue, the test cases selected
here are somewhat smaller. With two- and three-body interactions, the SpMV is by far the most time-consuming
part of the calculations. However, for the 2B interactions, the matrix is extremely sparse, which means that the
orthogonalization time becomes more prominent.
The ﬁrst test case is 12 C (6 protons and 6 neutrons) Nmax = 6 with two-body forces in a basis space of dimension
32,598,920 and a sparsity of 99.997%. (Note that the sparsity is deﬁned here as the percent of nonzero entries in the
matrix subtracted from the hundred percent representing the maximum possible matrix ﬁll.) The second test case is
11
B (5 protons and 6 neutrons) Nmax = 8 with two-body forces in a basis space with dimension 318,781,064 and a
sparsity of 99.9995%. The third test case is 13 C (6 protons and 7 neutrons) Nmax = 6 with two- and three-body forces.
This case has been used for performance analysis for ﬁve years now [9, 15], and presents the largest calculation that
was possible to run ﬁve years ago. The dimension is 38,260,781, with a sparsity of 99.92%.
3 A.

Kleen. A NUMA API for LINUX (2008): http://www.halobates.de.

262

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

30

80
70

20
15

Lanczos time
Total time

10
5
0

Performance gain (%)

Performance gain (%)

25

60
50
40

SpMV

30

Orthogonalization

20
10
0

0

200

400

600

800

1000

Number of iterations

(a) Performance gains obtained with respect to the Lanczos time and
total wallclock time of the ﬁrst-touch policy.

0

200

400

600

800

1000

Number of iterations

(b) Performance gains obtained with respect to the SpMV and orthogonalization stages of Lanczos process under the ﬁrst-touch policy.

Figure 6: Comparison of the developed memory-pinning strategy and the default ﬁrst-touch policy for 12 C Nmax = 6 on 91 MPI processors.

The tests were performed on the Hopper supercomputer at NERSC. Hopper is a Cray XE6 with 6,384 compute
nodes. Each compute node has a cache coherent Nonuniform Memory Access (ccNUMA) architecture with two
twelve-core AMD “MagnyCours” 2.1 GHz processors and 32 GB of RAM. The RAM is split into 4 memory banks of
8 GB each with each group of 6 cores having a direct link to one memory bank. Thus, one NUMA node is associated
with six cores. Hopper runs a SUSE Linux Enterprise Server 11 operating system and the default compiler is the
Portland Group (PGI) compiler, which is used in this work.
All the tests reported here were performed with one MPI process per compute node and 24 OpenMP threads per
MPI process. The impact of running MFDn with the default ﬁrst-touch policy on Hopper has been carefully studied
in [10] using a small test case of 12 C nucleus with Nmax = 4; matrix of size 1,118,926; 400 Lanczos iterations and six
MPI processes (one per node) with the thread counts varying from three to twenty-four threads per MPI process. It
has been observed that there is good scaling in moving from three to six threads. Beyond that, however, the scaling is
erratic and poor. When the MASA interface has been applied, the scaling has improved but the absence of parallelism
in the critical section of SpMV hindered the performance of MFDn at high thread counts.
For each of the three large-scale test cases considered in this paper, the graphs in Fig. 6, 7, and 8, respectively,
illustrate the performance gains (over the ﬁrst-touch policy) obtained by applying the proposed strategy to the MFDn
code as the number of iterations increases. Fig. 6 shows the performance gains obtained for the 12 C Nmax = 6, 2B
test case. As can be seen from Fig. 6(a), the gains attain 25% at 1000 iterations. This is a result of the improvements
obtained in the SpMV and VO operations of MFDn (shown in Fig. 6(b)) since these operations are the most computationally intensive portions of the Lanczos process. Additionally, the VO curve shoots high up with the increase
in the number of iterations since its computational time eﬀect becomes more pronounced at higher iteration counts,
especially for extremely sparse matrices as in the 2B cases. In contrast, the time taken for the SpMV remains constant
throughout the iterative process (Fig. 6(b)), as one would expect.
Fig. 7 illustrates the performance curves for the 11 B 2B test case. Here, the trend is similar to the 12 C case
but the performance gain seems to level oﬀ a bit after 400 iterations and actually starts coming down beyond 700
iterations. This phenomenon could be explained by the fact that with the increasing number of iterations, the total
physical memory used up by the application also increases (as a result of having to store more Lanczos vectors). Thus,
even under the ﬁrst-touch policy, the shared arrays may be spanned across multiple NUMA nodes due to the lack of
suﬃcient memory in one node. This reduces overall bandwidth contention by threads and thus, causes the developed
memory-pinning strategy to have less of an eﬀect on the overall performance. However, the performance gains of
about 15%, which are obtained at 700 iterations, are signiﬁcant enough to justify the application of the proposed
memory placement.
Fig. 8 relates to the 13 C 2+3B test case. Here, the diminished eﬀect of the selective memory placement in the
presence of the high memory usage is more consistent since the memory occupied by the matrix itself is already too
big to ﬁt into a single NUMA node. As a consequence, the total performance gains hover consistently at the 4.5-5%
level as seen in Fig. 8(a). Even the increasing VO cost and performance gains (Fig. 8(b)) have no notable eﬀect on

263

20

50

18

45

16

40

14
12
10

Lanczos time

8

Total time

6
4

Performance gain (%)

Performance gain (%)

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

2

35
30
25

SpMV

20

Orthogonalization

15
10
5

0

0
0

200

400

600

800

1000

0

200

400

600

800

1000

Number of iterations

Number of iterations

(a) Performance gains obtained with respect to the Lanczos time and
total wallclock time of the ﬁrst-touch policy.

(b) Performance gains obtained with respect to the SpMV and orthogonalization stages of Lanczos process under the ﬁrst-touch policy.

Figure 7: Comparison of the developed memory-pinning strategy and the default ﬁrst-touch policy for 11 B on 325 MPI processors.

30

8
7

Performance gain (%)

5
4

Lanczos time

3

Total time

2
1
0

Performance gain (%)

25

6

20
15

SpMV
Orthogonalization

10
5
0

0

200

400

600

800

1000

Number of iterations

(a) Performance gains obtained with respect to the Lanczos time and
total wallclock time of the ﬁrst-touch policy.

0

200

400

600

800

1000

Number of iterations

(b) Performance gains obtained with respect to the SpMV and orthogonalization stages of Lanczos process under the ﬁrst-touch policy.

Figure 8: Comparison of the developed memory-pinning strategy and the default ﬁrst-touch policy for 13 C on 325 MPI processors.

the gains due to the SpMV dominating the performance. For example, at 1000 iterations in the 2+3B test case, VO
constitutes roughly 2% of the total Lanczos iteration time as opposed to about 20-25% for the 2B cases.
To give an idea of the actual calculation times, in a typical case, which involves 400 iterations, the total execution
time of MFDn varies from about 600 seconds for the smallest test case 12 C to about 3800 seconds for the largest test
case 11 B. With 1000 iterations, the execution time varies from about 1700 seconds for 12 C to about 9000 seconds for
11
B. Although the tests were performed only on one set of MPI processes (91, 325, and 325 for 12 C, 11 B, and 13 C,
respectively) other numbers of MPI processes would yield similar performance due to the memory aﬃnity policies
when one MPI process per node is used. To alleviate the NUMA eﬀects with the ﬁrst-touch policy, application
scientists are advised to keep the number of threads low on Hopper: to occupy the 24 available cores with four MPI
processes each having six threads. This conﬁguration may signiﬁcantly improve the performance of the ﬁrst-touch
policy. For example, a 36% gain was achieved for 13 C after 100 iterations and the improvement of 64% was observed
for 12 C after 1000 iterations. On the other hand, caches do not enhance the performance much since the shared arrays
are so large that the main memory is accessed frequently anyway.
Smaller-scale investigation. To conﬁrm the reduced-contention eﬀects caused by the shared array “spilling over”
across multiple NUMA nodes under the ﬁrst-touch policy, an experiment was conducted using the 2+3B test case
executing a small number of iterations (100) but using the same (325) number of MPI processors. Here, the default
ﬁrst-touch policy was overridden by pinning all the shared arrays of the SpMV to the same NUMA node from the

264

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

start, in order to simulate the condition wherein the memory layout follows the one shown in Fig. 4. As a result,
there was considerable bandwidth contention, and hence, poorer MFDn performance with this layout than with the
“distributed” ﬁrst-touch default layout. Consequently, there was a higher gain of about 12% in the SpMV performance
with MASA for this experiment.
4. Conclusions
This work investigates the impact of memory aﬃnity on a large scale parallel nuclear physics application MFDn
when executing on multicore NUMA architectures. The shared data is ﬁrst categorized as being deterministically or
non-deterministically accessed. Then, for the former, the chunk sizes are computed for the distribution to the memory
banks local to the threads accessing the chunk. A strategy, proposed earlier, to place the shared data into speciﬁc
memory banks based on the application-speciﬁc access pattern has been further tested and applied to diﬀerent computation stages within MFDn. Speciﬁcally, these stages include the sparse matrix-vector multiplication and (dense)
vector orthogonalization, two most computationally intensive parts of this application.
The strategy overcomes some of the shortcomings of the default operating system placement policy that may cause
remote access latencies and bandwidth contention in NUMA architectures. Performance improvements of as much as
25% in the total runtime for MFDn were observed. Sparser matrices were found to beneﬁt more from the proposed
strategy since sparse matrix-vector multiplication is less of a dominant player in this case. In general, the eﬀect of the
memory-pinning strategy is more pronounced when the shared arrays ﬁt into a single NUMA node under the default
memory placement policy. Future work includes the investigation of the selective memory pinning when large shared
arrays are located in multiple NUMA nodes. Additionally, the proposed strategy may be expanded to the hierarchical
NUMA architectures as they come on-board with the advent of exascale computing platforms.
Acknowledgment
This work was supported in part by Iowa State University under the contract DE-AC02-07CH11358 with the
U.S. Department of Energy, by the U.S. Department of Energy under the grants DE-FC02-09ER41582 (UNEDF
SciDAC-2), and DE-FG02-87ER40371 (Division of Nuclear Physics), by the Director, Oﬃce of Science, Division
of Mathematical, Information, and Computational Sciences of the U.S. Department of Energy under contract number DE-AC02-05CH11231, and in part by the National Science Foundation grant NSF/OCI – 0749156, 0941434,
0904782, 1047772. The authors are thankful to the reviewers and the chair of the workshop on Large Scale Computational Physics for their insights that helped to improve the paper.
References
[1] C. Lameter, Local and remote memory: Memory in a Linux/NUMA system, Tech. rep. (2009).
URL http://www.kernel.org/pub/linux/kernel/people/christoph/pmig/numamemory.pdf
[2] F. Bellosa, M. Steckermeier, The performance implications of locality information usage in shared-memory multiprocessors, J. Parallel and
Distributed Computing 37 (1996) 113–121. doi:10.1006/jpdc.1996.0112.
URL http://dl.acm.org/citation.cfm?id=241170.241180
[3] A. Kleen, A NUMA API for LINUX, Tech. rep. (2008).
URL http://whitepapers.zdnet.co.uk/0,1000000651,260150330p,00.htm
[4] R. Grant, A. Afsahi, A comprehensive analysis of OpenMP applications on dual-core Intel Xeon SMPs, in: Parallel and Distributed Processing
Symposium, 2007. IPDPS 2007. IEEE International, 2007, pp. 1–8. doi:10.1109/IPDPS.2007.370682.
[5] A. Srinivasa, M. Sosonkina, P. Maris, J. Vary, Dynamic adaptations in ab initio nuclear physics calculations on multicore computer architectures, in: Parallel and Distributed Processing Workshops and Phd Forum (IPDPSW), 2011 IEEE International Symposium on, 2011, pp.
1332–1339. doi:10.1109/IPDPS.2011.288.
[6] J. Antony, P. Janes, A. Rendell, Exploring thread and memory placement on NUMA architectures: Solaris and Linux, UltraSPARC/FirePlane
and Opteron/HyperTransport, 2006, pp. 338–352. doi:10.1007/11945918 35.
URL http://dx.doi.org/10.1007/11945918_35
[7] J. Vary, The many-fermion dynamics shell-model code (unpublished, 1992).
[8] J. Vary, D. Zheng, The many-fermion dynamics shell-model code (unpublished, 1994).
[9] P. Sternberg, E. Ng, C. Yang, P. Maris, J. Vary, M. Sosonkina, H. Le, Accelerating full conﬁguration interaction calculations for nuclear
structure, in: Proceedings of the ACM/IEEE Conference on High Performance Computing, SC 2008, November 15-21, 2008, Austin, Texas,
USA, IEEE/ACM, 2008, pp. 1–12.

Avinash Srinivasa et al. / Procedia Computer Science 9 (2012) 256 – 265

265

[10] A. Srinivasa, M. Sosonkina, Nonuniform memory aﬃnity strategy in multithreaded sparse matrix computations, in: G. H. et al. (Ed.), Spring
Simulation Multiconf., High Performance Computing Symp. (HPC 2012), Soc. for Modeling and Simulation Internat., Vista, CA, 2011, 8
pages.
[11] P. Maris, J. Vary, A. Shirokov, Ab initio no-core full conﬁguration calculations of light nuclei, Phys.Rev. C79 014308, (2009).
[12] C. Cockrell, J. Vary, P. Maris, Lithium isotopes within the ab intio no-core full conﬁguration approach, arXiv:1201.0724 [nucl-th] (2012).
[13] P. Maris, A. Shirokov, J. Vary, Ab initio nuclear structure simulations: The Speculative F-14 nucleus, Phys.Rev. C81 (2010) 021301.
arXiv:0911.2281, doi:10.1103/PhysRevC.81.021301.
[14] M. Sosonkina, A. Sharda, A. Negoita, J. Vary, Integration of ab initio nuclear physics calculations with optimization techniques, in: M. Bubak,
G. D. van Albada, J. Dongarra, P. M. A. Sloot (Eds.), Computational Science - ICCS 2008, 8th International Conference, Krak´ow, Poland,
June 23-25, 2008, Proceedings, Part I, Vol. 5101 of Lecture Notes in Computer Science, Springer, 2008, pp. 833–842.
[15] P. Maris, M. Sosonkina, J. Vary, E. Ng, C. Yang, Scaling of ab initio nuclear physics calculations on multicore computer architectures,
Procedia Computer Science 1 (1) (2010, ICCS 2010) 97–106.
[16] J. Vary, P. Maris, E. Ng, C. Yang, M. Sosonkina, Ab initio nuclear structure – the large sparse matrix eigenvalue problem, J. Physics:
Conference Series10 pages.
[17] N. Laghave, M. Sosonkina, P. Maris, J. Vary, Beneﬁts of parallel I/O in ab initio nuclear physics calculations, in: G. Allen, J. Nabrzyski,
E. Seidel, G. D. van Albada, J. Dongarra, P. M. A. Sloot (Eds.), Computational Science - ICCS 2009, 9th International Conference, Baton
Rouge, LA, USA, May 25-27, 2009, Proceedings, Part I, Vol. 5544 of Lecture Notes in Computer Science, Springer, 2009, pp. 84–93.
[18] R. Rabenseifner, G. Hager, G. Jost, Hybrid MPI/OpenMP parallel programming on clusters of multi-core SMP nodes, in: 17th Euromicro
International Conference on Parallel, Distributed, and Network-Based Processing, IEEE Computer Society, Los Alamitos, CA, USA, 2009,
pp. 427–436. doi:http://doi.ieeecomputersociety.org/10.1109/PDP.2009.43.
[19] R. Iyer, H. Wang, L. Bhuyan, Design and analysis of static memory management policies for CC-NUMA multiprocessors, J. Systems
Architecture 48 (2002) 59–80. doi:http://dx.doi.org/10.1016/S1383-7621(02)00066-8.
URL http://dx.doi.org/10.1016/S1383-7621(02)00066-8
[20] B. Goglin, N. Furmento, Enabling high-performance memory migration for multithreaded applications on LINUX, in: Parallel Distributed
Processing, 2009. IPDPS 2009. IEEE International Symposium on, 2009, pp. 1–9. doi:10.1109/IPDPS.2009.5161101.
[21] L. Dagnum, R. Menon, OpenMP: an industry standard API for shared-memory programming, IEEE Computational Science and Engineering
5 (1) (1998) 46–55. doi:http://doi.ieeecomputersociety.org/10.1109/99.660313.
[22] C. Ribeiro, J.-F. Mehaut, A. Carissimi, M. Castro, L. Fernandes, Memory aﬃnity for hierarchical shared memory multiprocessors, in:
Computer Architecture and High Performance Computing, 2009. SBAC-PAD ’09. 21st International Symposium on, 2009, pp. 59–66.
doi:10.1109/SBAC-PAD.2009.16.

