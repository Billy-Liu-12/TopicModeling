Toward Dynamic Adoption for a User’s
Situation Information in a Context-Aware
Workﬂow System
Yongyun Cho, Kyoungho Shin, Jongsun Choi, and Jaeyoung Choi
School of Computing, Soongsil University,
1-1 Sangdo-dong, Dongjak-gu, Seoul 156–743, Korea
{yycho,delio,jschoi}@ss.ssu.ac.kr, choi@comp.ssu.ac.kr

Abstract. Recently, there are many studies to adopt the workﬂow
model, which has been successively applied to traditional computing environments, into ubiquitous computing environments for context-aware
and autonomous services. A service in the ubiquitous computing
environments must be executed according to a user’s situation information, which is generated dynamically from sensors. However, such existing workﬂow systems as FollowMe and uFlow to support context-aware
services through workﬂow models, can’t immediately adopt changes of a
user’s situation into a already on-going service workﬂow. In this paper,
we propose a context-aware workﬂow system, for ubiquitous computing environments, which can apply changes of user’s service demand or
situation information into an on-going workﬂow without breaking its operation. To do this, the proposed system represents contexts described in
a workﬂow as a RDF-based DItree (Document Instance tree). The system uses the tree information to recognize a exact position to be changed
in the on-going workﬂow for user’s situation changes, and to reconstruct
only the position under the inﬂuence of the changes in the DItree. Therefore, the suggested system can quickly and eﬃciently apply a change of
user’s new situation into a on-going workﬂow without a lot loss of the
time and the space, and can oﬀer a context-aware service continuously,
according to a new workﬂow.

1

Introduction

A workﬂow model for business services in traditional distributed computing environments can be applied as a service model to connect services with others
related in ubiquitous computing environments and express service ﬂows [1]. Compared with traditional distributed computing environments, workﬂow services in
ubiquitous computing environments must decide a service transition according
to the user’s situation information that is dynamically generated from various
sensors in ubiquitous environments [4]. For that, a workﬂow system in ubiquitous environments must consider the user’s situation information in service
This work was supported by Korea Research Foundation Grant (KRF-2006-005J03803).
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 236–243, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Toward Dynamic Adoption for a User’s Situation Information

237

executions of workﬂows. Workﬂow systems such as FollowMe and uFlow can
supply context-aware services through workﬂows, which express user’s situation
services as service’s execution conditions. Usually in the ubiquitous computing
environments, the information dynamically occurs, and frequently changes initial conditions to execute a service. However, the existing workﬂow systems cannot apply the dynamically occurred changes into an on-going service workﬂow.
Therefore, when changes of a user’s service request or his situation information happen dynamically, we need a method that can re-apply the changes in a
scenario and supply a context-aware service correspondent with the changes.
In this paper, we propose a context-aware workﬂow service system that uses
contexts in a workﬂow service scenario as conditions of service execution, and
dynamically derives service transition according to a user’s situation information
generated from real environments. To do this, the suggested system represents
contexts described in the scenario as rule-based context subtrees. When a change
of a user’s situation information happens, the suggested system can dynamically
reconstructs a workﬂow by modifying only the subtrees under the eﬀect of ethe
change. It means that the suggested system does not obstruct a ﬂow of an earlier
on-going context-aware service. Therefore, the suggested system uses the modiﬁed sub-tree’s node information in comparison with user’s situation information,
and can support context-aware service continuously without stopping a on-going
workﬂow.

2
2.1

Related Work
Workﬂow Languages for Context-Aware Services

From the studies to adopt workﬂow models to ubiquitous computing environments, we know that a workﬂow in a ubiquitous computing environment should
consider not only result values but also context information as transition constraint for service execution. Unlike such workﬂow languages as BPEL4WS [5],
WSFL [6], and XLANG [7], which do not consider a context information as
transition conditions of services, uWDL [3] can describe context information as
transition conditions of services through the <context> element consisting of the
knowledge-based triplet - subject, verb, and object. uWDL reﬂects the advantages of current workﬂow languages such as BPEL4WS, WSFL, and XLANG,
and also contains rule-based expressions to interface with the DAML+OIL [8]
ontology language.
2.2

Workﬂow Systems for Context-Aware Services

WorkSco [10] is an situation-adaptable workﬂow system that can support service demands generated dynamically in a business process. It is based on a micro
workﬂow model, a dynamic evolution and an open-point adaptation techniques
to dynamically handle user’s requests, which may be generated in various business domains. However, even though WorkSco considers dynamic handling for
user’s requests in a workﬂow system, it does not yet give an explicit method

238

Y. Cho et al.

to do that in ubiquitous computing environments. FollowMe [11] is an OSGi
framework that uniﬁes a workﬂow-based application model and a context model
based on ontology. FollowMe uses a scenario-based workﬂow model to handle
user’s service demands from various domains. However, it does not support a
method to handle user’s service demands during service processing. uFlow [3] is
a ubiquitous workﬂow framework to support a context-aware service based on
a uWDL workﬂow scenario. Because uFlow is also based a workﬂow scenario
like FollowMe, it does not yet consider a method to handle the changes of user’s
demands or user’s situation information, such as user’s position or user’s doing,
which can be dynamically generated during service processing.

3
3.1

A context-Aware Workﬂow Service System
A System Architecture

Figure 1 shows a architecture of a suggested context-aware workﬂow system,
which is aware of dynamic changes of user’s situation information in ubiquitous
computing environments.

Fig. 1. An architecture of a suggested context-aware workﬂow system

As shown in Figure 1, a suggested system supports context-aware workﬂow
services using a uWDL document. After a service developer or an end-user writes
an uWDL workﬂow service scenario, the scenario is transmitted to the CWparser
in Figure 1. The CWparser (Context Workﬂow scenario parser) represents contexts described in an uWDL scenario as RDF-based context subtrees through
parsing. The CWparser constructs the RDF-based context subtree by using the
structural context model [3]. And, the suggested system uses the model to objectify contexts, which is actually sensed from environments as the entities. The
service discovery module searches a service appropriate to objectiﬁed contexts
from an available service lists, and the service invocation module invokes the
service.

Toward Dynamic Adoption for a User’s Situation Information

3.2

239

A Context Comparison for Contex-Aware Workﬂow Services

The suggested system uses uWDL as a workﬂow language to compose a workﬂow
scenario for context-aware workﬂow service. In Figure 1, the context comparison
module compares contexts described in a uWDL workﬂow as transition conditions for a service in a context subtree with contexts objectiﬁed as entities
through the structural context model for contexts sensed from ubiquitous environments. In the comparison, the suggested system drives an execution process
of the service only if the context comparison module ﬁnds objectiﬁed contexts
suitable as transition conditions of a service. Figure 2 shows a context comparison algorithm.

Fig. 2. An algorithm for comparing UC A with OCS B

In Figure 2, OC means a context objectiﬁed with the structural context model,
and it consists of OCs, OCv, and OCo, which mean subject, verb, and object entities, respectively. UC means a context described in a uWDL scenario. An OC consists of (OCs type, OCs value), (OCv type, OCv value), (OCo type, OCo value),
and an UC consists of (UCs type, UCs value) (UCv type, UCv value), (UCo type,
UCo value). UCs, UCv, and UCo mean subject, verb, object entities, respectively.
A context consists of a pair of type and value. Also, OCS and UCS that mean each
set of OC and UC can be deﬁned as OCS = (OC1, OC2, OC3, ..., OCi) and UCS
= (UC1, UC2, UC3, ..., UCi).
3.3

A Dynamic Adoption for Changes of User’s Demands or
Contexts

In ubiquitous environments, a user can meet the kaleidoscope of situations, and
will want a new context-aware service for the changes. However, existing contextaware workﬂow systems , which are almost based on a context-aware workﬂow
scenario including contexts as transition conditions of service, cannot adopt the
changes of situations into already on-going workﬂows. The change may be a
new service demand with new contexts as transition conditions for execution
of the service. And, it may be modifying of contexts, which may be used as
transition conditions for a service by an on-going workﬂow. If a user through
hand-held equipments such as PDA, or PCS raises a change, the workﬂow change
listener instantly catches the change and throws it to the DItree handler. Then,

240

Y. Cho et al.

the DItree handler ﬁnds parts inﬂuenced in a DItree of an on-going workﬂow
scenario by the change and modiﬁes only the subtrees around the parts. Figure
3 shows changes in a DItee for a sample uWDL workﬂow, after a user makes a
new service demand including contexts as execution conditions of the service.

Fig. 3. Changes in a DItree when a user makes a new service and edit windows in PDA

In Figure 3(a), the suggested system will individually and automatically
processes the service A and C according to contexts described as their execution conditions in a uWDL workﬂow. The dotted area in (a)’s DItree expresses
RDF-based subtrees for the service A and C. Figure 3(b) represents the partial
change of the DItree, when a user makes a new service, which may has to be
between the service A and C orderly. A user needs interfaces to input a new
service or modify a existing service through a his hand-held device. Figure 3(c)
shows the workﬂow edit window that the suggested system oﬀers. The workﬂow
edit window consists of a service select window, which includes a usable service
list and a registered service window, and a pop-up window to input RDF-based
context information. For modifying contexts of a existing service, a user selects
the service from the registered service lists in Figure 3(c). Then, he just modiﬁes
contexts through the RDF-based input ﬁelds. Now, to make a new service, a
user selects a service, which he wants, from the service category window and the
service list window. In the context information window of Figure 3(c), ‘AND’,
‘OR’, and ‘NOT’ buttons are for a composite context. Then, he has to input
contexts, which are needed to execute the selected service. Figure 4 shows a
demand process algorithm to adopt the changes into an on-going workﬂow and
to do the dynamic reconstruction.
In Figure 3, because the service A and C are aﬀected by a new service including
its contexts as execution conditions, the DItree handler will re-constructs only
the subtrees of the dotted area by using the demand process algorithm. The
DItree’s reconstruction happens partially and incrementally only in the part
[12], which is inﬂuenced by workﬂow’s changes. Therefore, the suggested system
can quickly and eﬃciently make a new DItree including new demands or changes,
with re-using the remaining parts of the DItree.

Toward Dynamic Adoption for a User’s Situation Information

241

Fig. 4. An demand process algorithm to adopt changes of contexts to a DItree

4

Experiments and Results

For an experiment with the suggested system, we develop a workﬂow scenario for
smart home services in ubiquitous environments, and show how the suggested
system can eﬃciently handle service demands generated dynamically from a
user, and continuously support a context-aware workﬂow service. The scenario
was developed in a uWDL editor [3]. The example scenario is as follows: John
has a plan to go back his home at 10:00 PM, take a warm bath, and then watch
a recorded TV program, which he wants to see after a bath. When John arrives
in his apartment, an RFID sensor above the apartment door transmits John’s
basic context information (such as name and ID number) to the smart home
server. If the conditions, such as user location, situation, and current time, are
satisﬁed with contexts described in the workﬂow service scenario, then the server
will prepare warm water. When he sits on the sofa in the living room after he
ﬁnishes his bath, the service engine will turn on the power of the TV in the
living room and play the TV program that was recorded earlier.
Now, let’s again suppose that, as John is driving to his home, he needs a new
service, which is a meeting preparation service with Tom at his home. The new
service is to download ﬁles for meeting from John’s PC in his oﬃce. That is a
migration service about job environments.
If John arrives in front of his home’s door with Tome, the sensed context OCs
are not only for John but also for Tom. For example, the OCs may be John and
Tom’s locations, IDs, and Times. If John gave a priority to the meeting service
during coming back to his home, the reserved bath service will be postponed
after the meeting service. That is, the sensed context OCs, which are suitable

242

Y. Cho et al.

Fig. 5. The changes of the workﬂow scenario and its DItree

for both the bath service and the meeting service, will be applicable to the new
service, not the bath service due to the priority. Figure 5 shows changes of the
workﬂow scenario and its DItree after the DItree handler did dynamically adopt
the new service to the initial workﬂow.
The bath service will be re-operated after Tom ﬁnishes the meeting with
John, if John does not retract the bath service itself. In that time, the contexts as
execution conditions of the bath service will be Tom’s location and the meeting’s
situation. For example, if Tom locates out of John’s house door and a value of
the meeting’s situation is over, the bath service will re-operate. After that, the
suggested system executes remaining services in the workﬂow scenario according
to contexts transmitted from the context processor.

5

Conclusion

In this paper we propose a context-aware workﬂow system dynamically to support user’s service demands, by adopting changes of services or contexts into
an initial workﬂow without interrupting the workﬂow. Through experiments, we

Toward Dynamic Adoption for a User’s Situation Information

243

showed that the suggested system represented contexts described in the workﬂow
scenario as RDF-based subtrees and a process of reconstructing a DItree. The
proposed system uses an demand process algorithm to support context-aware
services without interrupting through recognizing exactly the place holder that
have to be changed in a workﬂow scenario and reconstructing only the part under
the inﬂuence of the changes. Through an experiment with an example workﬂow
scenario, we showed how the suggested system can reconstruct DItree for a user’s
new service demand. With the suggested system, a user can easily and eﬃciently
apply his new service demands into a scenario document regardless of the time
and the space. Therefore he can be served a continuous context-aware service
according to a new workﬂow scenario adopted with the new service demands.

References
1. Workﬂow Management Coalition: The Workﬂow Handbook 2002, Future Strategies
Inc. and Lighthouse Point, FL, USA., (2002)
2. Anind k. Dey: Understanding and Using Context, Personal and Ubiquitous Computing, Vol 5, Issue 1, pp.69-78 (2001)
3. Joohyun Han, Yongyun Cho, Jaeyoung Choi: Context-Aware Workﬂow Language
based on Web Services for Ubiquitous Computing, ICCSA 2005, LNCS 3481, pp.
1008-1017, (2005)
4. Anand Ranganathan, Scott McFaddin: Using Workﬂows to Coordinate Web Services in Pervasive Computing Environments, Proceedings of the IEEE International
Conference on Web Services, ICWS’04, pp. 189-197, (2004)
5. Tony Andrews, Francisco Curbera, Yaron Goland: Business Process Execution Language for Web Services, BEA Systems, Microsoft Corp., IBM Corp., Version 1.1
(2003)
6. Frank Leymann: Web Services Flow Language (WSFL 1.0). IBM (2001)
7. Satish Thatte: XLANG Web Services for Business Process Design, Microsoft Corp.
(2001)
8. R. Scott Cost, Tim Finin: ITtalks: A Case Study in the Semantic Web and
DAML+OIL, University of Maryland, Baltimore County, IEEE (2002) 1094-7167
9. W3C: RDF/XML Syntax Speciﬁcation, W3C Recommendation (2004)
10. Pedro Vieira, Antonio Rito-Silva: Adaptive Workﬂow Management in WorkSCo,
16th International Workshop on Database and Expert Systems Applications
(DEXA’05), pp. 640-645, 2005.
11. Jun Li, Yingyi Bu, Shaxun Chen, Xianping Tao, Jian Lu: FollowMe: On Research
of Pluggable Infrastructure for Context-Awareness, 20th International Conference
on Advanced Information Networking and Applications(AINA’06), Volume 1, pp.
199-204, 2006
12. C. Ghezzi and D. Mandrioli: Incremental Parsing, ACM Transactions on Programming Languages and Systems, 1(1):58-70, 1979.

