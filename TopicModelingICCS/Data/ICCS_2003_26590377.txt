Contraction versus Relaxation: A Comparison of
Two Approaches for the Negative Cost Cycle
Detection Problem
K. Subramani and L. Kovalchick
LCSEE,
West Virginia University,
Morgantown, WV
{ksmani,lynn}@csee.wvu.edu

Abstract. In this paper, we develop a greedy algorithm for the negative
cost cycle detection problem and empirically contrast its performance
with the “standard” Bellman-Ford (BF) algorithm for the same problem.
Our experiments indicate that the greedy approach is superior to the
dynamic programming approach of BF, on a wide variety of inputs.

1

Introduction

In this paper, we are concerned with the Negative Cost Cycle Detection problem
(NEG): Given a directed graph G =< V, E >, where |V| = n and |E| = m, and
a cost function c : E → , is there a negative cost cycle in G?
Our main contribution is the proposal of a greedy algorithm for NEG, based
on vertex contraction. All approaches to the negative cost cycle problem in the
literature are based on dynamic programming; our approach is the first and only
greedy approach to this problem, that we know of. Scaling approaches have also
been proposed for NEG ([Gol95]); however, these algorithms are efficient, only
when the edge-weights are small integers. We do not place any restrictions on the
edge costs. We note that the problem, as specified, is a decision problem, in that
all that is asked of an algorithm is to detect the presence of a negative cycle. This
problem finds application in a wide variety of areas such as Constraint Analysis
[DMP91], Compiler Construction [Pug92], VLSI Design [WE94] and Scheduling
[Sub02].
Our experiments indicate that Vertex Contraction is an effective alternative
to the “standard” Bellman-Ford (BF) algorithm for the same problem; this is
most surprising since in the case of sparse graphs, BF is provably superior to
Vertex Contraction (from the perspective of asymptotic analysis).

2

The Vertex-Contraction Algorithm

The vertex contraction procedure consists of eliminating a vertex from the input
graph, by merging all its incoming and outgoing edges. Consider a vertex vi
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2659, pp. 377−387, 2003.
 Springer-Verlag Berlin Heidelberg 2003

378

K. Subramani and L. Kovalchick

with incoming edge eki and outgoing edge eij . When vi is contracted, eki and
eij are deleted and a single edge ekj is added with cost cki + cij . This process
is repeated for each pair of incoming and outgoing edges. Consider the edge ekj
that is created by the contraction; it falls into one of the following categories:
1. It is the first edge between vertex vk and vj . In this case, nothing more is to
be done.
2. An edge ekj already existed between vk and vj , prior to the contraction of
vi . In this case, if ckj < ckj , keep the new edge and delete the previously
existing edge (since it is redundant); otherwise delete the new edge (since it
is redundant).
Algorithm (2.1) is a formal description of our technique.

Function Negative-Cost-Cycle(G, n)
1: for (i = 1 to n) do
2:
Vertex-Contract(G, vi )
3: end for
4: return(false)

Algorithm 2.1: Negative cost cycle detection

We defer a formal proof of the correctness of the VC algorithm to the journal
version of this paper. In the full version, an analysis of VC is also provided; we
show that the algorithm runs in worst case time O(n3 ).
Thus, for dense graphs, Algorithm (2.1) is competitive with Bellman-Ford
(BF); however for sparse graphs, the situation is not so sanguine. For instance,
an adversary could provide the graph in Figure (1) as input.

v1

v2

v3

vn-1

Fig. 1. Sparse graph that becomes dense after vertex contraction

vn

Contraction versus Relaxation: A Comparison of Two Approaches

379

Function Vertex-Contract(G, vi )
1: for (k = 1 to n) do
2:
for (j = 1 to n) do
3:
if (eki and eij exist) then
4:
{Let ckj denote the cost of the existing edge between vk and vj ; note that
ckj = ∞ if there does not exist such an edge}
5:
Create edge ekj with cost ckj = cki + cij
6:
Delete edges eki and eij from G
7:
if (j = k) then
8:
{A cycle has been detected}
9:
if (cjj < 0) then
10:
return(true)
11:
else
12:
Delete edge ejj
13:
end if
14:
else
15:
if (ckj < ckj ) then
16:
Replace existing edge ekj with ekj in G
17:
else
18:
Delete edge ekj
19:
end if
20:
end if
21:
end if
22:
end for
23: end for

Algorithm 2.2: Vertex Contraction
The above graph is sparse and has exactly 2 · (n − 1) edges. Observe that
if vertex vn is contracted first, the resultant graph is the complete graph on
n − 1 vertices and therefore dense. We call this graph the cruel adversary; in
our experiments, we made it a point to contrast the performance of the vertex
contraction algorithm with BF on this input. It is clear that any well-defined
order of selecting the next vertex to be contracted is susceptible to attack by a
malicious adversary; we could however choose the vertex to be contracted at random, without affecting the correctness of the algorithm. We have implemented
Algorithm (2.1) in two different ways; in one implementation, the vertex to be
contracted is chosen in a well-defined order, whereas in the second implementation, it is chosen at random. Algorithm (2.3) is a formal description of the
random vertex contraction algorithm.

3

Implementation

Our experiments are classified into various categories, based on the following
criteria:
1. Type of input graph - Sparse with many small negative cycles (Type A),
Sparse with a few long negative cycles (Type B), Dense with many small

380

K. Subramani and L. Kovalchick

Function Random-Negative-Cost-Cycle(G, n)
1: Generate a random permutation Π of the set {1, 2, 3 . . . , n}.
2: for (i = 1 to n) do
3:
Vertex-Contract(G, vΠ(i) )
4: end for
5: return(false)

Algorithm 2.3: Random negative cost cycle detection algorithm
negative cycles (Type C), Dense with a few long negative cycles (Type D),
and the Cruel Adversary (Type E).
2. Type of Algorithm - Bellman-Ford (BF), Vertex-Contraction (VC) or Random Vertex-Contraction (RVC).
3. Type of Graph Data Structure - Simple Pointer or Array of Pointers.
All times recorded were averaged over 5 executions of each implementation.
3.1

Machine Characteristics
Table 1. Implementation System.
Machine Model Silicon Graphics Onyx2

3.2

Processors

IR2/R10 250 Mhz

Cache

8 MB

Memory

2 GB

Operating System

IRIX 6.5.15

Language

C

Software

gcc

Graph Data Structures

Two different types of graph data structures were used for the experiments. We
implemented BF, VC and RVC with an array of pointers structure and a simple
pointer structure.
The array of pointers structure is a new representation. This representation
makes use of an array of n pointers, one for each of the n vertices of the graph.
Each pointer points to an n element array, which corresponds to the n vertices
of the graph. Initially all entries of the array are assigned an undefined value.
For a vertex vi , if there exists an edge from vi to another vertex vj , position vj of

Contraction versus Relaxation: A Comparison of Two Approaches

381

the array that vi points to is assigned the cost of the edge between vi and vj . It
should be noted that this representation is different from the adjacency-matrix
representation [CLR92].
The simple pointer structure, also known as the adjacency-list representation
[CLR92], requires only linear space. This representation makes use of an array
of n lists, one for each of the n vertices of the graph.

3.3

Experimental Setup for Sparse Graphs

Sparse graphs were generated using the generator developed by Andrew Goldberg [CG96], which generates multiple edges between two vertices. Sparse graphs
are defined as graphs with o(n · log n) edges. We generated each graph 5 times
using 5 different seeds for the random number generator.
Graphs of Type A and B were tested, with a number of vertices ranging from
500 to 5,500 in increments of 500.
n
We define a small negative cycle as one consisting of at most 100
vertices.
n
We define a long negative cycle as one consisting of Ω( 2 ) vertices. The number
of long negative cycles in the input graphs was set to 4.

6000

"VC-AoP" using 1:2
"BF-AoP" using 1:2

5000

running time in seconds

n
500
750
1,000
1,250
1,500
1,750
2,000
2,250
2,500
2,750
3,000
3,250
3,500
3,750
4,000
4,250
4,500
4,750
5,000
5,250
5,500

Array of Pointers
(Time in Seconds)
VC
BF
0.15351
2.80657
0.50453
9.37442
1.58202
27.9044
2.23023
54.0744
4.74535
105.143
5.55235
156.953
12.7588
257.852
19.5588
337.136
13.9183
514.046
24.3229
624.652
30.4645
883.024
34.8372
1034.04
49.6497
1400.41
48.4852
1606.85
88.8478
2104.50
70.4305
2319.88
132.506
3094.30
82.0854
3180.42
108.178
4229.53
116.699
4377.80
133.606
5453.65

4000

3000

2000

1000

0
500

1000

1500

2000

2500

3000

3500

4000

4500

5000

5500

number of nodes

Fig. 2. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Array of
Pointer (AoP) implementation execution times (seconds) required to solve the Negative
Cost Cycle problem for Type A graphs.

K. Subramani and L. Kovalchick

n
500
750
1,000
1,250
1,500
1,750
2,000
2,250
2,500
2,750
3,000
3,250
3,500
3,750
4,000
4,250
4,500
4,750
5,000
5,250
5,500

Simple Pointer
(Time in Seconds)
VC
BF
0.003933 1.65399
0.007623 5.19749
0.009573 11.8637
0.023780 22.5836
0.013797 38.9001
0.013525 64.8949
0.022071 103.797
0.022178 155.955
0.025375 222.823
0.030861 304.137
0.040336 403.182
0.046731 519.489
0.047264 656.995
0.071233 814.206
0.063790 995.579
0.073681 1199.38
0.101693 1433.95
0.083590 1688.46
0.124874 1981.08
0.084357 2295.98
0.087477 2650.91

3000

"VC-Pointer" using 1:2
"BF-Pointer" using 1:2

2500

running time in seconds

382

2000

1500

1000

500

0
500

1000

1500

2000

2500

3000

3500

4000

4500

5000

5500

number of nodes

Fig. 3. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Simple
Pointer implementation execution times (seconds) required to solve the Negative Cost
Cycle problem for Type A graphs.

6000

"VC-AoP" using 1:2
"BF-AoP" using 1:2

5000

running time in seconds

n
500
750
1,000
1,250
1,500
1,750
2,000
2,250
2,500
2,750
3,000
3,250
3,500
3,750
4,000
4,250
4,500
4,750
5,000
5,250
5,500

Array of Pointers
(Time in Seconds)
VC
BF
0.22578
2.80053
0.51732
9.40496
1.63598
25.2701
2.76916
52.7881
4.03085
103.765
4.58197
152.435
11.8345
253.484
20.4233
330.726
13.9014
502.027
23.9882
607.284
27.1102
875.921
35.6303
995.875
49.7201
1383.19
48.6051
1577.46
77.5183
2071.36
65.2763
2307.49
120.153
2978.97
83.6087
3209.21
92.0987
4076.75
151.066
4376.84
130.703
5408.41

4000

3000

2000

1000

0
500

1000

1500

2000

2500

3000

3500

4000

4500

5000

5500

number of nodes

Fig. 4. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Array of
Pointer (AoP) implementation execution times (seconds) required to solve the Negative
Cost Cycle problem for Type B graphs.

Contraction versus Relaxation: A Comparison of Two Approaches

3000

"VC-Pointer" using 1:2
"BF-Pointer" using 1:2

2500

running time in seconds

n
500
750
1,000
1,250
1,500
1,750
2,000
2,250
2,500
2,750
3,000
3,250
3,500
3,750
4,000
4,250
4,500
4,750
5,000
5,250
5,500

Simple Pointer
(Time in Seconds)
VC
BF
0.004119 1.65394
0.008052 5.20284
0.011301 11.8367
0.022105 22.5755
0.099097 38.8326
0.022232 64.7921
0.021255 103.191
0.037886 154.749
0.026206 222.234
0.030613 303.657
0.037332 403.146
0.050565 518.724
0.047130 655.168
0.078139 813.916
0.188993 993.696
0.078959 1199.66
0.106838 1432.46
0.059203 1690.80
0.128170 1977.29
0.096562 2293.64
0.114865 2646.47

383

2000

1500

1000

500

0
500

1000

1500

2000

2500

3000

3500

4000

4500

5000

5500

number of nodes

Fig. 5. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Simple
Pointer implementation execution times (seconds) required to solve the Negative Cost
Cycle problem for Type B graphs.

3.4

Conclusions

It is easy to see from the tables and graphs in Figure (2) through Figure (5)
that VC outperforms BF using either data structure; this is true for both types
of sparse graphs that were tested. We conclude that VC is far superior to BF
for sparse graphs.
An asymptotic analysis would indicate that BF is superior to VC for dense
graphs, although, our experiments contradict this indication.
3.5

Experimental Setup for Dense Graphs

Dense graphs were generated using the generator developed by Andrew Goldberg
2
[CG96]. Dense graphs were defined as those with Ω( n8 ) edges. We generated each
graph 5 times using 5 different seeds for the random number generator.
Graphs of Type C and D were tested, with a number of vertices ranging from
125 to 1,875 in increments of 125, with small negative cycles and long negative
cycles defined as in Section §3.3.

K. Subramani and L. Kovalchick

n
125
250
375
500
625
750
875
1,000
1,125
1,250
1,375
1,500
1,625
1,750
1,875

Array of Pointers
(Time in Seconds)
VC
BF
0.03830
0.07012
0.05997
0.52512
0.15247
1.74020
0.28095
4.08695
0.46288
7.98574
0.65885
13.7706
1.48780
21.9978
1.55311
34.5631
2.97252
51.5897
3.37425
74.6079
4.37236
100.182
7.30295
132.641
6.22661
168.864
8.63348
210.632
8.00939
260.838

300

"VC-AoP" using 1:2
"BF-AoP" using 1:2

250

running time in seconds

384

200

150

100

50

0

0

200

400

600

800

1000

1200

1400

1600

1800

2000

number of nodes

Fig. 6. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Array of
Pointer (AoP) implementation execution times (seconds) required to solve the Negative
Cost Cycle problem for Type C graphs.

14000

"VC-Pointer" using 1:2
"BF-Pointer" using 1:2

12000

10000
running time in seconds

n
125
250
375
500
625
750
875
1,000
1,125
1,250
1,375
1,500
1,625
1,750
1,875

Simple Pointer
(Time in Seconds)
VC
BF
0.00048
0.09019
0.00194
1.02020
0.00303
4.50625
0.00675
13.2450
0.00750
30.9083
0.01562
62.0953
0.03498
123.824
0.09200
293.591
0.11334
672.256
0.19100
1350.14
0.25657
2447.76
0.42457
4079.35
0.41033
6346.27
0.65944
9445.69
0.99798
13480.9

8000

6000

4000

2000

0

0

200

400

600

800

1000

1200

1400

1600

1800

2000

number of nodes

Fig. 7. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Simple
Pointer implementation execution times (seconds) required to solve the Negative Cost
Cycle problem for Type C graphs.

Contraction versus Relaxation: A Comparison of Two Approaches

300

"VC-AoP" using 1:2
"BF-AoP" using 1:2

250

running time in seconds

n
125
250
375
500
625
750
875
1,000
1,125
1,250
1,375
1,500
1,625
1,750
1,875

Array of Pointers
(Time in Seconds)
VC
BF
0.00146
0.06872
0.06294
0.52747
0.21069
1.73264
0.30008
4.09149
0.65476
7.98092
0.74009
13.7807
2.03858
21.9476
1.50686
35.0864
3.64647
51.5824
3.17255
72.8195
6.92824
101.460
6.88772
133.293
6.67336
167.244
7.48221
212.698
15.9974
263.763

385

200

150

100

50

0

0

200

400

600

800

1000

1200

1400

1600

1800

2000

number of nodes

Fig. 8. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Array of
Pointer (AoP) implementation execution times (seconds) required to solve the Negative
Cost Cycle problem for Type D graphs.

14000

"VC-Pointer" using 1:2
"BF-Pointer" using 1:2

12000

10000
running time in seconds

n
125
250
375
500
625
750
875
1,000
1,125
1,250
1,375
1,500
1,625
1,750
1,875

Simple Pointer
(Time in Seconds)
VC
BF
0.00069
0.08752
0.00185
1.02023
0.00488
4.44321
0.00706
13.2395
0.01379
30.6152
0.01765
62.0956
0.05033
122.713
0.07456
293.617
0.20491
664.932
0.22301
1348.96
0.41339
2426.95
0.39452
4079.71
1.00850
6299.06
0.59050
9447.84
1.43688
13418.7

8000

6000

4000

2000

0

0

200

400

600

800

1000

1200

1400

1600

1800

2000

number of nodes

Fig. 9. Comparison of Vertex Contraction (VC), and Bellman-Ford (BF) Simple
Pointer implementation execution times (seconds) required to solve the Negative Cost
Cycle problem for Type D graphs.

3.6

Conclusions

It is easy to see from the tables and graphs in Figure (6) through Figure (9) that
VC outperforms BF using either data structure; this is true with both types of
dense graphs that were tested. We conclude that VC is far superior to BF for
dense graphs.

386

K. Subramani and L. Kovalchick

3.7

Experimental Setup for Cruel Adversary Graphs

The cruel adversary is generated by specifying the number of vertices in the
graph and the maximum cost for any edge.
For our experiments we generated graphs with vertices ranging from 125 to
1,875 in increments of 125.

200

"VC-AoP" using 1:2
"RVC-AoP" using 1:2
"BF-AoP" using 1:2

180
160
140
running time in seconds

n
125
250
375
500
625
750
875
1,000
1,125
1,250
1,375
1,500
1,625
1,750
1,875

Array of Pointers
(Time in Seconds)
VC
RVC
BF
0.02168 0.05125 0.04738
0.16735 0.40114 0.34556
0.55377 1.35226 1.13898
1.29808 3.08334 2.66123
2.54713 6.22039 5.19088
4.38616 10.7309 9.02499
7.01832 15.6965 14.3931
10.9170 25.7463 23.6483
15.7832 37.1957 35.7989
21.9961 52.2092 54.5719
30.1900 71.4197 72.7322
41.3305 93.0058 94.8282
53.3580 66.8170 121.354
66.5882 147.186 152.360
83.2914 171.411 188.266

120
100
80
60
40
20
0

0

200

400

600

800

1000

1200

1400

1600

1800

2000

number of nodes

Fig. 10. Comparison of Vertex Contraction (VC), Random Vertex Contraction (RVC)
and Bellman-Ford (BF) Array of Pointer (AoP) implementation execution times (seconds) required to solve the Negative Cost Cycle problem for Type E graphs.

400

"VC-Pointer" using 1:2
"RVC-Pointer" using 1:2
"BF-Pointer" using 1:2

350

300
running time in seconds

n
125
250
375
500
625
750
875
1,000
1,125
1,250
1,375
1,500
1,625
1,750
1,875

Simple Pointer
(Time in Seconds)
VC
RVC
BF
0.06657 0.01769 0.04572
0.48752 0.09771 0.33976
1.61851 0.47191 1.11752
4.55655 0.53125 2.61450
10.2743 2.45196 5.06600
19.7552 3.40885 8.70514
33.6204 5.76912 13.7683
52.5211 7.97386 20.4959
76.4936 25.6282 29.0852
106.248 33.1245 39.9211
144.869 9.84373 53.0680
187.058 67.5207 69.8548
244.296 66.2070 91.4537
304.338 78.6134 118.606
379.341 29.4672 151.796

250

200

150

100

50

0

0

200

400

600

800

1000

1200

1400

1600

1800

2000

number of nodes

Fig. 11. Comparison of Vertex Contraction (VC), Random Vertex Contraction (RVC)
and Bellman-Ford (BF) Simple Pointer implementation execution times (seconds) required to solve the Negative Cost Cycle problem for Type E graphs.

Contraction versus Relaxation: A Comparison of Two Approaches

3.8

387

Conclusions

VC does considerably better than both RVC and BF, as observed from the table
and graph in Figure (10) of the Array of Pointer implementation on Type E
graphs. The results of RVC and BF are similar with RVC doing better in most
instances.
VC does very poorly, as observed from the table and graph in Figure (11)
of the Pointer implementation on Type E graphs. RVC does much better than
VC and outperforms BF by a large margin on most instances. One conclusion
that can be drawn from the data is that the time taken by RVC varies greatly
depending on the random sequence of vertices chosen.

4

Conclusion

In this paper, we designed and analyzed a greedy algorithm called the vertex contraction algorithm (VC) for the negative cost cycle detection problem. Although
vertex contraction is asymptotically inferior to the Bellman-Ford algorithm on
sparse graphs, it is vastly superior from an empirical perspective.
We are currently working on two extensions: (a) Comparing our strategy
with the Goldberg approach, (b) Combining the main idea of our approach,
with heuristics such as contracting the vertex with the smallest degree-product.

References
[CG96]

Boris V. Cherkassky and Andrew V. Goldberg. Negative-cycle detection algorithms. In Josep D´ıaz and Maria Serna, editors, Algorithms—ESA ’96, Fourth
Annual European Symposium, volume 1136 of Lecture Notes in Computer Science, pages 349–363, Barcelona, Spain, 25–27 September 1996. Springer.
[CLR92] T. H. Cormen, C. E. Leiserson, and R. L. Rivest. Introduction to Algorithms.
MIT Press and McGraw-Hill Book Company, 6th edition, 1992.
[DMP91] R. Dechter, I. Meiri, and J. Pearl. Temporal constraint networks. Artificial
Intelligence, 49:61–95, 1991.
[Gol95] Andrew V. Goldberg. Scaling algorithms for the shortest paths problem.
SIAM Journal on Computing, 24(3):494–504, June 1995.
[Pug92] W. Pugh. The omega test: A fast and practical integer programming algorithm for dependence analysis. Comm. of the ACM, 35(8):102–114, August
1992.
[Sub02] K. Subramani. An analysis of zero-clairvoyant scheduling. In Joost-Pieter Katoen and Perdita Stevens, editors, Proceedings of the 8th International Conference on Tools and Algorithms for the construction of Systems (TACAS),
volume 2280 of Lecture Notes in Computer Science, pages 98–112. SpringerVerlag, April 2002.
[WE94] Neil H. Weste and Kamran Eshragian. Principles of CMOS VLSI Design.
Addison Wesley, 1994.

