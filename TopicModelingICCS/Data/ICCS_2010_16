Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
145–153

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Dynamic Tuning of Algorithmic Parameters of
Parallel Scientiﬁc Codes
Pilsung Kanga,∗, Naresh K. C. Selvarasub , Naren Ramakrishnana , Calvin J. Ribbensa ,
Danesh K. Taftib , Srinidhi Varadarajana
a Department

b Department

of Computer Science, Virginia Tech, Blacksburg, VA 24061
of Mechanical Engineering, Virginia Tech, Blacksburg, VA 24061

Abstract
We present a dynamic method for tuning algorithmic parameters of parallel scientiﬁc programs. By treating tuning
as a separate concern in the software development process, our method supports personalized development of optimization schemes for existing programs that are not easily supported by conventional tuning techniques. We use a
compositional framework to transparently combine tuning code with the original program without direct modiﬁcation
of an existing code base. In this way, the inserted tuning module can dynamically search for optimal values of algorithmic parameters, accounting for runtime factors such as input problem size and parallel characteristics of a given
execution platform, as well as the architectural or runtime properties of a single machine of the platform. Applying
our method to a parallel CFD (computational ﬂuid dynamics) simulation, we demonstrate how a set of performancecritical parameters can be dynamically tuned, achieving up to 26% performance improvements over average cases.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: dynamic tuning, parallel simulation

1. Introduction
Algorithmic parameters can have a critical inﬂuence on the performance of a scientiﬁc application. A typical
example involves domain decomposition methods, where a large problem domain is partitioned into small subdomains
or blocks, with a dominant step in the algorithm corresponding to independent solves on each of the subproblems,
which are then combined in some fashion to drive the global solution forward. Since a carefully chosen subdomain
size (e.g., chosen to match the execution platform’s memory hierarchy in some way) can lead to a signiﬁcant speedup,
tuning of the decomposition method is a common optimization strategy in this setting. Manual tuning of algorithm
parameters not only is time-consuming in scientiﬁc computing, where several days or weeks of simulation is not
unusual, but also requires a substantial level of understanding of both the target algorithm and the underlying hardware.
This is particularly diﬃcult with today’s fast evolving hardware architectures such as multi- or many-core CPUs with
complex memory hierarchies. Therefore, tuning support to automatically optimize scientiﬁc codes over parameter
search spaces is becoming more relevant [1, 2]. For instance, vector and matrix operations – basic computational
∗ Corresponding

author
Email address: kangp@cs.vt.edu (Pilsung Kang)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.017

146

P.P.Kang
ComputerScience
Science001(2010)
(2012)1–9
145–153
Kangetetal.
al./ /Procedia
Procedia Computer
Whole domain

Tuning
code

2
Processor domain

Input problem

Existing
program

Composition

Runtime tuning

Figure 1: Composition of Dynamically Tuned
Application with Existing Code

Cache sub-blocks

Mesh blocks

Figure 2: Hierarchy of Data Decomposition in
GenIDLEST

kernels in numerical computing – are a prime target for automatic performance tuning (or ‘auto-tuning’). These
methods generate highly optimized codes by parameterizing performance-critical function and benchmarking the
target system, thereby automatically determining the best possible conﬁguration [3, 5].
Not all applications lend themselves to traditional approaches to auto-tuning, however. Scientiﬁc programs are
often written using domain-speciﬁc data structures and algorithms, where patterns of computation cannot be mapped
to well-studied basic linear algebra operations, thereby preventing direct application of automatically optimized software libraries. In particular, tuning support for algorithmic parameters in existing scientiﬁc codes is lacking, where
even a modest eﬀort in parameter tuning can provide signiﬁcant speedups. Another limitation with conventional autotuning approaches is that they mainly consider only static hardware characteristics of a single machine and do not
include runtime factors that develop when an application executes with an actual input problem on a given computing
platform. In addition, in the high-performance computing context, parallel runtime factors arising from communication patterns and synchronization costs, which are a critical determinant of application performance, are not usually
considered by traditional auto-tuning approaches.
To address these issues, we propose a dynamic method for tuning algorithmic parameters of existing scientiﬁc
codes. By using a language-independent compositional framework, our method supports separate development and
transparent integration of tuning code for a given program, so that at runtime the newly inserted code can perform
application-speciﬁc tuning operations, such as dynamic search of parameter space and performance behavior analysis,
to determine optimal parameter values for a given input. Speciﬁcally, we target existing programs whose performancecritical algorithms show distinct performance behavior depending on runtime factors and, at the same time, are not
well supported by auto-tuning techniques, although our method can be applied to any program in general with tunable
algorithmic parameters.
2. Implementing Tuning Support for Existing Parallel Programs
To implement tuning support for existing codes, we essentially take a compositional approach to enhance a given
program with an application-speciﬁc plug-in module that performs dynamic tuning on the program’s algorithmic
parameters. The key concepts are described here.
2.1. Tuning as a Separate Concern
While current optimization or tuning techniques are certainly beneﬁcial for basic numerical operations (e.g.,
matrix-vector multiplication), they are not directly applicable to programs with application-speciﬁc algorithms that
do not use such operations. Without support for tuning, the user of such applications often employs heuristics or parameter values that are empirically proven “suﬃcient”, which, however, may turn out to be sub-optimal for diﬀerent
execution platforms. On the other hand, manually implementing application-speciﬁc tuning strategies for an existing
program requires rewriting relevant parts of original program code base, where the modiﬁcation process can disturb

P. Kang
et al.et/ Procedia
Computer
Science
1 (2012)
145–153
P. Kang
al. / Procedia
Computer
Science
00 (2010)
1–9

147
3

the program’s original structure and design purposes by intermixing both new and old codes and blurring logical
boundaries between components.
To secure modularity in the design and implementation of tuning strategies over existing programs, we treat tuning
as a separate concern in evolving software, where tuning plans are organized separately and their implementations
are written and managed in independent modules while the main program maintains its original form and structure,
unaﬀected by individual tuning eﬀorts. Tuning code modules are then later plugged into the main program through
a compositional framework, as illustrated in Figure 1, which combines both codes to generate an application with a
newly added tuning capability that optimizes parameter values in computation algorithms of interest at runtime.
2.2. Tuning with Collective Consideration of Runtime Factors
To account for runtime factors that aﬀect performance behavior depending on diﬀerent properties (e.g., size) of
actual problem instances and parallel characteristics of a given execution platform, we use a dynamic method for
tuning target programs. Speciﬁcally, we implement a dynamic tuning procedure that searches for optimal values
of application-speciﬁc algorithmic parameters in the beginning of program execution by periodically measuring and
analyzing the runtime performance proﬁle.
3. Settings for Implementing Dynamic Tuning
We showcase our dynamic tuning method in the context of GenIDLEST [6], a CFD simulation code written in
Fortran 90 with MPI to solve the time-dependent incompressible Navier-Stokes and energy equations. Speciﬁcally,
we aim to tune the multilevel Additive Schwarz preconditioned Krylov method used to solve the elliptic pressure
Poisson equation which accounts for a large fraction of the total computational time.
3.1. Target Parameters for Tuning
For ﬂexibility, the preconditioner of the GenIDLEST code provides many options and parameters which can be
tuned for optimal performance. The target parameters for dynamic tuning are described in the following.
Cache sub-block size in Schwarz preconditioner: Figure 2 shows the hierarchy of the data structure in GenIDLEST
in which the computational domain is decomposed into overlapping computational blocks. Each computational block
is further divided into smaller sub-blocks. The Schwarz preconditioning is applied by iteratively smoothing the solution in each of the sub-blocks using a multilevel approach. The size of the sub-blocks directly impacts “cache
performance” which is critical to the overall time-to-solution. However, because of the complexity of hierarchical
memory subsystems and the mathematical characteristics of the system matrix, optimal sub-block sizes can vary
substantially on diﬀerent chip architectures and for diﬀerent physical problems. In the GenIDLEST code, the input
parameter set (ni blk,nj blk,nk blk) represents the number of sub-blocks (and hence the size of each sub-block) in the
x-, y-, and z-directions, respectively.
Inner relaxation sweeps: The inner relaxation sweep input parameter, nswp in blk, speciﬁes the number of sweeps
or iterations performed by the smoother each time a sub-block is visited. In general, increasing this value improves
cache performance. However, taking more sweeps also translates to more ﬂoating point operations which may not
have the desired favorable eﬀect on convergence characteristics and hence could increase the CPU time. The default
value is set to 5 in complex ﬂows. In simpler ﬂows, higher values may give better overall CPU time.
3.2. Input CFD Problems
We consider two CFD problems that show distinct physical characteristics to evaluate our tuning method: a
turbulent straight channel (Figure 3(a)) and a pin ﬁn array (Figure 3(b)). A detailed understanding of ﬂow and heat
transfer characteristics of these problems are important in various applications and aﬀect the design and use of these
applications. The computational domain of each problem is shown in (Figure 3(c)). For the turbulent straight channel
problem as an example, grids of 64×64×64 computational cells were used in the x-, y-, and z-directions, respectively,
which are divided in the z-direction into eight 64×64×8 blocks.

148

P.P.Kang
ComputerScience
Science001(2010)
(2012)1–9
145–153
Kangetetal.
al./ /Procedia
Procedia Computer

Problem
Block size
# Blocks
Whole
domain

(a) Straight Channel

(b) Pin Fin Array

4

Straight
channel

Pin ﬁn array

64×64×8
8

72×40×48
16

64×64×8×8

72×40×48×16

(c) Problem Domain

Figure 3: Problems under Consideration for GenIDLEST Dynamic Tuning
Cluster
CPU
Clock (GHz)
# Sockets
# Cores per Socket
L1 Data Cache
L2 Cache
Memory
Interconnect
MPI&Compiler

Anantham
AMD Opteron 240
1.40
2
1
64KB
2×1MB
1GB
100Mbps Ethernet
MPICH2 1.0.8 with
GNU Compilers 4.2.5

System G
Intel Xeon E5462
2.80
2
4
32KB
4×6MB (shared by 2)
8GB
40Gbps InﬁniBand
OpenMPI 1.2.8 with
Intel Compilers 11.0

Table 1: Architectural Summary of Evaluated Platforms for Dynamic Tuning
3.3. Execution Platforms
We perform dynamic tuning of GenIDLEST simulations on two cluster systems, called Anantham and System G,
respectively. A summary of architectural features of each of the evaluated systems is shown in Table 1.
4. Dynamic Tuning Implementation
The development process of our dynamic tuning method involves identifying control points at which an existing
program will be instrumented to plug in tuning code, designing and implementing dynamic search strategies in a
separate module, and combining the implemented tuning code into the original program. This section describes these
development aspects of our dynamic tuning method.
4.1. Composition of Dynamically Tuned Software
To allow separate development of application-speciﬁc tuning code and to compose a dynamically tuned application with a given program, tuning control points are identiﬁed in the original code, such that the execution control
GenIDLEST

Tuning code as an ACC handler

...
time integration loop :
momentum_solve;
...
pressure_solve :
preconditioning;
linear_system_solve;
stability_cfl_check;
end loop;
...

ACC library

runtime intercept

measure_loop_exe_time;
change_preconditioning_params;
manage_performance_history;
determine_optimial_value;

transfer control

Figure 4: Dynamic Tuning of GenIDLEST through the ACC Framework

P. Kang
et al.et/ Procedia
Computer
Science
1 (2012)
145–153
P. Kang
al. / Procedia
Computer
Science
00 (2010)
1–9

149
5

is intercepted and transferred to the tuning module. These control points are the places at which application performance is regularly measured and the considered algorithmic parameters are updated by tuning operations. While the
programmer is responsible for determining control points in a program, they can be conveniently chosen at the end of
the simulation loop in typical scientiﬁc applications, such that tuning operations can be performed at regular intervals.
However, for concurrently executing processes in a parallel environment, tuning global parameters requires global
synchronization, which can degrade application performance. To mitigate the potential performance slowdown, we
use a piggybacking technique (see [7]) on existing global functions that execute synchronously near the loop end
in the original program, thus eﬀectively amortizing the synchronization overhead by placing separate barriers close
together. For the GenIDLEST code, we choose as the tuning control point the stability check function, calc cfl(),
which is called at the end of the time integration loop, and which calculates CFL (Courant-Friedrich-Levi) numbers
at every preset number of iterations.
To plug in tuning code to GenIDLEST, we use the Adaptive Code Collage (ACC) framework [8] (formerly called
Invoke), a language-independent compositional tool based on the function call interception technique that operates
on the compiler-generated assembly source code, and which does not require direct modiﬁcation of existing code.
Therefore, we deﬁne an ACC handler function for calc cfl() and register it through the ACC registration API,
so that the intercepted calls to calc cfl() are diverted to the associated handler, which then performs separately
implemented tuning operations. Figure 4 shows the tuning control point in GenIDLEST; the execution control is
intercepted at runtime by catching the calc cfl() calls and passed to the tuning module through the ACC library.
4.2. Dynamic Tuning Procedure and Search Strategies
A simple dynamic tuning strategy is to use a two point measure-and-compare scheme. At the ﬁrst measurement
point, execution time for a certain computational interval is measured with the current value of an algorithmic parameter. A new value of that parameter is then selected and the same interval is timed again at the second measurement
point, so that the performance between the two points can be compared, and so that the relative improvement or degradation in performance, as a function of the algorithmic parameter, can be estimated. However, this two point scheme
may easily fail to determine the right path to a potential optimum in the parameter search space, since, particularly in
scientiﬁc simulations, physics of the simulated problem (e.g., turbulence in CFD simulations) is not known a priori
and can change at diﬀerent phases of computation, resulting in changes in performance behavior even for the same
parameter value. To complement the two point tuning scheme to cope with unknown computational progress, we use
one more measurement point to obtain the slope of change in execution time for the current parameter value. This
slope information is used in the search heuristic, in a way similar to the threshold function in empirical optimization
[9].
Figure 5 depicts our dynamic tuning procedure, which comprises four stages (three measurement stages and one
compare-and-decide stage). For each algorithmic parameter under tuning consideration, exploring a point in the
search space takes four stages: stage 1 (line 4–7) initiates measuring performance with the current value, stage 2 (line
8–11) completes measurement and repeats one more examination to measure the slope in performance behavior for
the same parameter value, stage 3 (line 12–18) completes the second measurement and starts measurement with a
newly selected parameter value, and stage 4 (line 19–27) completes the new measurement and compares performance
behavior based on the measured history and decides whether the search point is better than the current one.
4.2.1. Tuning the Cache Sub-block Size Parameter
An important issue in dynamic tuning is balancing the trade-oﬀ between tuning cost and program performance:
spending too much time on exhaustive search of parameter space for absolutely optimal tuning points can adversely
aﬀect the overall time-to-solution of the simulation with diminishing returns, whereas searching only a small part of
parameter space to reduce tuning cost can end up with sub-optimal results, failing to achieve the desired speedup.
Since the search space of the sub-block parameter is 3-dimensional, and can grow quite large with only a small
increase in problem size, exhaustive search of every combination of (x,y,z) values is not feasible. To reduce the search
space, we ﬁrst eliminate considering the z-direction (nk blk) of the parameter space and use the value as speciﬁed by
the user, since, once ni blk and nj blk are tuned, further variations in the sub-block size by changing the z component
will be small and are unlikely to cause any drastic changes in the GenIDLEST performance behavior.
Secondly, to further reduce the search space of the remaining (ni blk,nj blk) pair, we employ a two-phase tuning
scheme that performs coarse search in the ﬁrst phase and ﬁne search in the second phase. In the coarse search phase,

150

P.P.Kang
ComputerScience
Science001(2010)
(2012)1–9
145–153
Kangetetal.
al./ /Procedia
Procedia Computer
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30

6

Parameters p1 , p2 , ..., pi , ..., pk
if p1 , ..., pi−1 are marked tuned and pi is not then
switch stage do
case 1
elapsed time ← 0;
start measuring elapsed time with the current value of pi ;
break;
case 2
elapsed1 ← elapsed time, elapsed time ← 0;
start measuring elapsed time with the current value of pi ;
break;
case 3
elapsed2 ← elapsed time, elapsed time ← 0;
choose a new value for pi in the search space;
broadcast the new value of pi from root to all processes;
change pi with the received value;
start measuring elapsed time with the new value of pi ;
break;
case 4
elapsed new ← elapsed time;
compare performance of the new and the old values of pi ;
determine either the old or the new value as the current optimum;
broadcast the selected optimum of pi from root to all processes;
change pi with the received value;
update the search space of pi ;
if the search space of pi is empty then mark pi as tuned;
break;
otherwise break;
end
end

Figure 5: Procedure for Dynamic Parameter Tuning at the Intercepted Control Point
the 2-dimensional pair is treated like a 1-dimensional variable by changing both ni blk and nj blk together by same
factor (such as divide-by-2). In addition, exploiting the fact that after a certain optimal point the GenIDLEST performance becomes worse as the number of sub-blocks increases (the sub-block size becomes smaller), we decrease the
number of sub-blocks (so that the sub-block size becomes bigger) in the coarse search phase, starting from large initial
values for the pair, which will exhibit a certain period of improved performance throughout the search. Once a point
is reached where performance starts deteriorating, the search process backs oﬀ to the previous point and continues by
changing both ni blk and nj blk with a decrement of 2 at each exploration step, in an attempt to gradually converge
to an optimum in the subspace of (ni blk,nj blk). With the (ni blk,nj blk) value found in the coarse search phase, the
ﬁne search phase starts to tune nj blk further, with ni blk’s value ﬁxed now, by searching a 4-point neighborhood in
the y-direction with an increment (or decrement) of 2, and selecting the point in the neighborhood that shows the best
performance.
4.2.2. Tuning the Inner Relaxation Sweep Parameter
Once tuning of the cache sub-block parameter is complete, we start tuning the inner relaxation sweep parameter.
Unlike the search space of the sub-block size parameter that is directly dependent on the input problem size, the
possible number of smoothing iterations on each sub-block is not limited or restricted by the problem size, which
allows ﬂexibility in deﬁning its search space. In such a case, practical experience with the target code, together with
understanding of tuned algorithms, helps to narrow down the parameter search space, enabling eﬀective search strategy design. Therefore, we assume the default value of 5 as a reasonably obtained one from GenIDLEST simulation
practice, and use it as a starting guess. In addition, we examine the four-point neighborhood of the default value by
deﬁning the search space as {1,5,10,15,20}.

151
7

P. Kang
et al.et/ Procedia
Computer
Science
1 (2012)
145–153
P. Kang
al. / Procedia
Computer
Science
00 (2010)
1–9

1100
blk 2 (64KB)
blk 4 (16KB)
blk 8 (4KB)
blk 16 (1KB)
blk 32 (256B)
tuning

400

350

300

start searching
ni_blk & nj_blk space
from {(16,16,1),5}

try {(2,2,1),5},
go back to
{(4,4,1),5}
search nj_blk space,
set to {(4,4,1),5}

search nswp_in_blk space,
set to {(4,4,1),15}

{(8,8,1),5}

250

1000
Elapsed time between every 50 steps (secs)

Elapsed time between every 50 steps (secs)

450

blk 2 (32KB)
blk 4 (8KB)
blk 8 (2KB)
blk 16 (720B)
blk 32 (180B)
tuning

search nswp_in_blk space,
set to {(2,4,8),5}

900

800

start searching
ni_blk & nj_blk space
from {(16,16,8),5}

700

try {(1,1,8),5},
go back to
{(2,2,8),5}

600

500

{(8,8,8),5}
{(4,4,8),5}
{(2,2,8),5}

400

search nj_blk space,
set to {(2,4,8),5}

{(4,4,1),5}

200
0

500

1000
1500
2000
ï3
Time step (1 step = 10 )

2500

(a) Straight Channel Problem on Anantham

3000

300
0

500

1000
1500
2000
−4
Time step (1 step = 10 )

2500

3000

(b) Pin Fin Array Problem on System G

Figure 6: Dynamic Tuning Progress until 3000 Time Steps
5. Experimental Results
Figure 6(a) shows the dynamic tuning progress of GenIDLEST for the straight channel problem on Anantham
for the ﬁrst 3000 time steps, where the thick gray solid line represents the elapsed time measured at every 50 steps
during the tuning process. Plots measured for a set of diﬀerent parameter conﬁgurations without tuning are shown
together for comparison. With an initial value of {(16,16,1),5} for {(ni blk,nj blk,nk blk),nswp in blk}, the enhanced
GenIDLEST program starts tuning ﬁrst with the sub-block parameter by periodically measuring elapsed times and
exploring a new parameter value, where the parameter is changed ﬁrst to (8,8,1), then to (4,4,1), and so forth at each
exploration step according to the search scheme. The sub-block parameter ﬁnally settles down to (4,4,1) at time step
1700. Compared with other plots for ﬁxed sub-block parameter values in the ﬁgure, the tuning progress plot closely
follows the execution time proﬁle with the same parameter value after each update of the parameter, which shows the
eﬀectiveness of our dynamic tuning method. Tuning of inner relaxation sweep parameter follows after the sub-block
parameter is handled, which completes with the value 15 at time step 2700. Similarly, Figure 6(b) shows tuning
progress for the pin ﬁn array problem on System G.
To evaluate our method, we performed dynamically tuned GenIDLEST simulations with each of the CFD problems for 10000 time steps and measured their execution times on each cluster. For comparison, we also measured the
performance of GenIDLEST simulations with ﬁxed parameter sets (without tuning). The ﬁxed-parameter simulations
were performed for each of the four conﬁgurations from blk2 to blk16. As well as the total execution time for 10000
steps, elapsed times between every 50 steps were also measured for each simulation. Figure 7 compares the performance of dynamically tuned GenIDLEST simulations against that of the simulations without tuning. In the ﬁgure,
‘tuning’ represents the total execution time of the tuned simulations, ‘optimal’ represents a hypothetically best time
that can be achieved by switching between the four conﬁgurations (from blk2 to blk16) at every 50 steps. The ‘optimal’
time is calculated by taking the best elapsed time among the conﬁgurations at each 50th step and then by summing
up these piecewise minimum times for the whole 10000 steps. Finally, the ‘expected’ time represents an expectation
value for the total execution time by randomly choosing a ﬁxed parameter set out of the four conﬁgurations.
For the straight channel problem, our method performed better than ‘expected’ by 26% and slightly better than
‘optimal’ by 2% on Anantham, and also outperformed both ‘expected’ by 13% and ‘optimal’ by 8% on System G.

152

P.P.Kang
ComputerScience
Science001(2010)
(2012)1–9
145–153
Kangetetal.
al./ /Procedia
Procedia Computer

Anantham

Anantham

System G

0

1

System G

tuning
optimal
expected
2
3
4
5
Execution Time for 10K steps (secs)

(a) Turbulent Straight Channel

8

tuning
optimal
expected

6
4

x 10

0

0.5
1
1.5
2
Execution Time for 10K steps (secs)

2.5
5

x 10

(b) Pin Fin Array

Figure 7: Performance Comparison of the GenIDLEST code for 10000 time steps
Although the four conﬁgurations are only a small fraction of the whole search space, considering that they are practical
samples, the results that our dynamic tuning method outperformed even ‘optimal’ cases show its eﬀectiveness. For
the pin ﬁn problem, our method performed better than ‘expected’ by 10% but slightly worse than ‘optimal’ by 2% on
Anantham, which is coincidentally the same on System G also. Further investigations of adaptation strategies taking
into account the speciﬁcities of the domain being solved could lead to greater savings.
5.1. Tuning Cost
The runtime function call interception overhead incurred by ACC is small, amounting to less than 140 CPU cycles
per intercepted call [8]. In addition, the piggybacking technique to intercept and compose at global operations in
parallel MPI programs using ACC is reported to cause almost negligible overhead [7], which also leads to small
tuning overhead in our experiments where we intercept only a few dozens of calls in the beginning of the simulations
to implement our dynamic tuning strategy. Furthermore, we measured the search cost from exploring new parameter
values to be very small, ranging from 0.4% (pin ﬁn array problem on Anantham) to 0.9% (pin ﬁn array problem on
System G), where we counted those exploration steps that consumed more time than the previous 50 time steps.
6. Related Work
Auto-tuning: Auto-tuning techniques aim to generate automatically optimized numerical libraries to match the underlying hardware architecture. Model-driven auto-tuning uses analytical models for programs and machine architectures to perform eﬃcient compiler transformations over program control structures such as loop blocking [10], loop
unrolling, and software pipelining [11]. However, these compiler techniques may not always generate near-optimal
code since the compiler models of the underlying processor architectures are usually too simpliﬁed and general to
support special math kernels. In addition, the compiler models used may not be up-to-date with the newest hardware.
Empirical auto-tuning techniques, in contrast, parameterize the code for a given algorithm over the parameter search
space and benchmarks each variant on a given platform to determine the best possible algorithmic option. For example, ATLAS [3] and PHiPAC [4] generate automatically tuned dense linear algebra routines. In contrast, the main
objective of our method is to support application programmers to separately reason about domain-speciﬁc dynamic
tuning strategies and implement them onto existing programs, thus allowing for collective consideration of various
runtime factors such as input problem attributes and parallel performance behavior of a whole execution environment.
Computational steering: Computational steering is the practice of manually altering parameters of scientiﬁc simulations at runtime through interactive feedback from the user [12, 13]. Since computational steering enables dynamic
parameter change decisions to take eﬀect at runtime, it can be beneﬁcial for runtime performance tuning and “what-if”
studies for certain problems without requiring stop-and-restart of computation from scratch. However, implementing
eﬃcient middleware or runtime support to instantly update the program states at the computation backend with the
user’s feedback at the steering frontend is a major challenge in large, distributed systems such as the Grid where
communication between remote sites becomes a main source of performance bottleneck. While our method similarly
targets dynamic tuning of algorithmic parameters, we support the design and implementation of tuning strategies

P. Kang
et al.et/ Procedia
Computer
Science
1 (2012)
145–153
P. Kang
al. / Procedia
Computer
Science
00 (2010)
1–9

153
9

at the application composition phase, so that at runtime the tuning operations are automatically performed without
visualization or interactive feedback system support.
7. Summary and Conclusions
Our compositional approach addresses tuning as a separate concern in software development processes and allows
one to separately design and implement dynamic strategies for scientiﬁc programs whose domain-speciﬁc algorithms
are not easily supported by automatically tuned libraries. Unlike most auto-tuning techniques that consider only
architectural characteristics of a single machine, our dynamic tuning method includes runtime factors as well such as
input size and parallel performance behavior of a given execution platform, thereby enabling optimization of those
parameters whose values cannot be determined a priori before application launch. Since performing exhaustive
search at runtime is not viable with intolerable overhead for a large search space, design of a dynamic search strategy
requires trade-oﬀ between search space and performance overhead; as demonstrated we are able to achieve upto 26%
performance improvement in a practical scientiﬁc code with small tuning costs.
[1] S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel, Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore
Platforms, in: SC ’07: Proceedings of the 2007 ACM/IEEE Conference on Supercomputing, ACM, New York, NY, USA, 2007, pp. 1–12.
[2] K. Datta, M. Murphy, V. Volkov, S. Williams, J. Carter, L. Oliker, D. Patterson, J. Shalf, K. Yelick, Stencil Computation Optimization and
Auto-tuning on State-of-the-art Multicore Architectures, in: SC ’08: Proceedings of the 2008 ACM/IEEE conference on Supercomputing,
IEEE Press, Piscataway, NJ, USA, 2008, pp. 1–12.
[3] R. C. Whaley, A. Petitet, J. J. Dongarra, Automated Empirical Optimizations of Software and the ATLAS Project, Parallel Computing 27
(2001) 3–35.
[4] J. Bilmes, K. Asanovic, C.-W. Chin, J. Demmel, Optimizing Matrix Multiply using PHiPAC: A Portable, High-Performance, ANSI C Coding
Methodology, in: ICS ’97: Proceedings of the 11th International Conference on Supercomputing, ACM, New York, NY, USA, 1997, pp.
340–347.
[5] R. Vuduc, J. W. Demmel, K. A. Yelick, OSKI: A Library of Automatically Tuned Sparse Matrix Kernels, in: Proc. of SciDAC 2005, Journal
of Physics: Conference Series, Vol. 16, Institute of Physics Publishing, 2005, pp. 521–530.
[6] D. Tafti, GenIDLEST - A Scalable Parallel Computational Tool for Simulating Complex Turbulent Flows, in: Proceedings of the ASME
Fluids Engineering Division (FED), Vol. 256, ASME-IMECE, 2001.
[7] P. Kang, N. K. C. Selvarasu, N. Ramakrishnan, C. J. Ribbens, D. K. Tafti, S. Varadarajan, Modular, Fine-Grained Adaptation of Parallel
Programs, in: ICCS ’09: Proceedings of the 9th International Conference on Computational Science, Springer, 2009, pp. 269–279.
[8] M. A. Heﬀner, A Runtime Framework for Adaptive Compositional Modeling, Master’s thesis, Blacksburg, VA, USA (2004).
[9] K. Seymour, H. You, J. Dongarra, A Comparison of Search Heuristics for Empirical Code Optimization, in: iWAPT 2008: the 3rd International Workshop on Automatic Performance Tuning, 2008, pp. 421–429.
[10] J. Dongarra, R. Schreiber, Automatic Blocking of Nested Loops, Tech. rep., Knoxville, TN, USA (1990).
[11] K. Kennedy, J. R. Allen, Optimizing Compilers for Modern Architectures: A Dependence-based Approach, Morgan Kaufmann Publishers
Inc., San Francisco, CA, USA, 2002.
[12] R. Marshall, J. Kempf, S. Dyer, C.-C. Yen, Visualization Methods and Simulation Steering for a 3D Turbulence Model of Lake Erie, SIGGRAPH Comput. Graph. 24 (2) (1990) 89–97.
[13] S. G. Parker, C. R. Johnson, SCIRun: A Scientiﬁc Programming Environment for Computational Steering, in: Supercomputing ’95: Proceedings of the 1995 ACM/IEEE Conference on Supercomputing (CDROM), ACM, New York, NY, USA, 1995, p. 52.

