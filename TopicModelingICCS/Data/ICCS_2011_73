Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 302–311

International Conference on Computational Science, ICCS 2011

MDEC: MeTiS-based Domain Decomposition
for Parallel 2D Mesh Generation
Thap Panitanaraka , Suzanne M. Shontza,∗
a Department of Computer Science and Engineering,
The Pennsylvania State University, University Park, PA, 16802

Abstract
Domain decomposition methods are commonly employed within the context of parallel numerical algorithms.
Most often, the domain decomposition is performed before the main computation begins. Within the context of mesh
generation, parallel mesh generation is desired when the goal is to mesh a very large geometric domain or if very
high accuracy is required. In this paper, we propose a novel technique, which we call the MeTiS-based Domain
Decomposition (MDEC) technique, for the decomposition of geometric domains into subdomains for use in parallel
2D mesh generation. Our technique is based upon discrete domain decomposition [1]. The algorithm proceeds by ﬁrst
constructing a background mesh which satisﬁes a minimum angle constraint of 30 degrees and second partitioning
this initial coarse mesh or background mesh into subdomains. Finally, adjustments are applied to the triangles with
small boundary angles so that all subdomains in the ﬁnal decomposition contain boundary angles no smaller than
60 degrees which is a guaranteed property of the domain decomposition algorithm. We prove this guarantee for
the boundary angles of the MDEC domain decomposition. Our results show that, in comparison to the medial axis
domain decomposition (MADD) algorithm [2], our method provides a better balance of subdomain areas, better
boundary angles, and a faster decomposition time. In addition, when the MDEC and MADD subdomains are used in
conjunction with a parallel constained Delaunay mesh generation technique (PCDM) [3], the meshes are generated in
approximately the same time and have very similar element quality.
Keywords: domain decomposition, mesh partitioning, parallel mesh generation

1. Introduction to Domain Decomposition
The general domain decomposition problem is to decompose the domain of interest into several smaller, nonoverlapping domains (called subdomains) based upon some criterion (typically for parallel computation) such as:
load balancing, computation requirements, or data dependency. Relevant domains of interest for domain decomposition are: sets, vectors, matrices, or geometries. In this paper, we are concerned with the domain decomposition of
geometric domains.
Domain decomposition techniques have been employed in parallel numerical algorithms in order to decompose a
large, complex problem into many smaller, simpler subproblems which can be solved in parallel. Within the context
∗ Corresponding

author
Email addresses: txp214@cse.psu.edu (Thap Panitanarak), shontz@cse.psu.edu (Suzanne M. Shontz)

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.032

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

303

of parallel numerical algorithms, domain decomposition is typically employed before the main computation begins.
For example, domain decomposition methods are often used in the numerical solution of partial diﬀerential equations
by the ﬁnite element method, or other such techniques, in order to decompose the domain into several subdomains
on which the PDE is solved. In this example, geometric domains or meshes can be partitioned across the processors
so that the numerical PDE can be solved in a distributed manner. Some techniques which have been successfully
used for mesh partitioning include: geometric mesh partitioning [4] (which strives to divide the mesh into equal-sized
pieces with a small number of interconnecting edges), coorindate bisection [5] (which partitions the vertices of the
mesh after projection onto one of the coordinate axes), spectral bisection [6] (which partitions the mesh according to
the eigenvectors of the Laplacian of its connectivity graph), and multilevel Kernighan-Lin [7] (which partitions the
mesh into a sequence of successively smaller graphs, uses the spectral method to partition the smallest graph, and
propagates the partition back through the hierarchy; the Kernighan-Lin method is used to reﬁne the partition). Mesh
partitioning remains an active area of research, as various decompositions of the domain can lead to diﬀerent levels of
parallelism in the resulting numerical algorithms.
2. The Domain Decomposition Problem for Parallel Mesh Generation
Despite the fact that domain decomposition is only applied before the main computation step (as described in the
previous section), decomposition of the geometry for the purposes of parallel mesh generation is also desired if the
size of the geometric domain is very large or if more accuracy is needed in the numerical solution of the PDE. The
remainder of this paper focuses on parallel computational techniques for 2D mesh generation.
Parallel mesh generation starts with decomposing the geometric domain into many smaller non-overlapping subdomains. The resulting subdomains are then meshed in parallel. During the mesh generation process, communication
between processors may be required in order to preserve the conformality of the overall mesh. However, communication might not be required at all if all the conformal points are predetermined [1].
A review of various parallel mesh generation algorithms is provided in [1]. In that paper, the mesh generation
techniques are divided into two categories. The ﬁrst category of techniques includes mesh generation algorithms
for which each subdomain is meshed sequentially. The second category includes techniques for which the degree
of coupling between the processors is what deﬁnes the degree of communication between the processors in order to
preserve conformity of the overall mesh.
A recent domain decomposition algorithm speciﬁcally designed and used for parallel mesh generation is the
Medial Axis Domain Decomposition (MADD) algorithm [2]. This algorithm decomposes the geometric domain in a
divide-and-conquer fashion. The MADD algorithm decomposes the geometric domain by ﬁrst discretizing the domain
boundary. Second, it ﬁnds the approximate medial axis of the geometric domain using centroids of the coarse mesh.
(This is a boundary conforming Delaunay triangulation of the points created in the previous step). These are actually
the nodes of a Voronoi triangulation. Third, it partitions the graph of the Voronoi nodes into two subsets. Fourth, it
uses a subset of the Voronoi nodes and connects them to the triangle boundary points to make separators (i.e., segments
of the boundary) to separate the two subdomains. Finally, it recursively calls the ﬁrst four steps using the generated
subdomains as inputs until the desired number of subdomains is achieved. For more details on the algorithm, the
reader is referred to [2].
In [2], it was noted that using the background mesh directly for the decomposition can lead to small boundary
angles. This is undesirable in that the resulting subdomains may lead to less-balanced subdomains and to issues with
load balancing within the context of parallel mesh generation. In the next section, we will discuss this further and will
describe a way to resolve the small boundary angles. Furthermore, we will use our technique as the basis for a domain
decomposition approach for triangular meshes.
3. MeTiS-Based Domain Decomposition (MDEC) with Guaranteed Good Boundary Angles (i.e., Boundary
Angles Greater Than 60◦ )
Our MeTiS-based Domain Decomposition (MDEC) procedure begins with the generation of an initial triangular
background mesh on the geometric domain of interest. Next, the mesh is partitioned into the desired number of
subdomains. For a given edge of a triangular element, if the edge belongs to elements that belong to diﬀerent partitions,

304

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

the edge is used as a separator (i.e., as a segment of the boundary of the ﬁnal subdomain). Since the ﬁnal boundary is
constructed from edges of existing elements, the boundary angles can be as small as the angles of an element. In order
to generate a partition with subdomains containing boundary angles that are at least 60◦ , a background mesh which
satisiﬁes the 60◦ angle constraint must be generated. Unfortunately, it is not practical to mesh the geometric domain
with triangular elements containing boundary angles that are all greater than 60◦ , as most mesh generation algorithms
cannot generate such meshes.
Fortunately, background meshes with element angles greater than 30◦ can be employed, and it is practical for
some algorithms to generate a decomposition of the background mesh into subdomains such that the each subdomain
contains boundary angles that are greater than 60◦ . To achieve this, we can perform an adjustment to the decomposition as follows. First, note that in a decomposition of the boundary of the background mesh, the boundary angles
can either be less than, equal to, or greater than 60◦ , because they can be taken directly from one element angle (since
two edges of a single element can be used as separators or as boundary segments) or from the summation of two or
more element angles, respectively. The idea of the adjustments is to consider the elements which provide separators
with two edges and make some modiﬁcations so as to eliminate the small angles. This is the idea of our MeTiS-based
Domain Decomposition algorithm.
We deﬁne a bad triangle to be a triangle that has two edges that are used as separators and an angle between the
two edges that is less than 60◦ . As was described in the previous paragraph, the subdomain boundary is less than 60◦
if some separators stem from bad triangles. Bad triangles can be classiﬁed into three groups as follows. Case 1 occurs
when one edge belonging to a bad triangle is an external segment. Case 2 occurs when two of the triangle’s edges are
internal separators of two subdomains. Finally, Case 3 happens when the triangle’s edges are internal separators of
three or more subdomains.
Next, we will describe some techniques for making adjustments (on a case-by-case basis) to the bad triangles to
achieve subdomains with a minimum boundary angle of at least 60◦ . In the next section, we provide a proof that our
domain decomposition technique results in such a decomposition into subdomains.
We now describe the techniques for adjusting the bad triangles in order to yield a decomposition into subdomains
with the desired boundary angle property. The techniques for improving the small angles in the bad triangles will
be performed according to the type of bad triangle. First, suppose that edges v1 v2 and v1 v3 are two edges of the
bad triangle. For the bad triangle, which can be identiﬁed as belonging to Case 1, assume that v1 v2 is an external
separator. Then, we can simply replace v1 v2 with v1 v3 , or we can use v2 v3 as an alternative separator instead of v1 v3 if
the angle v1 v2 v3 is greater than 60◦ but less than 120◦ (to avoid creating another bad triangle). Otherwise, we can add
midpoint vm of v1 v2 and replace v1 v2 with v2 vm . The reason for using the midpoint instead of the point v p , where v3 v p
is perpendicular to v1 v2 , is that v p can be oﬀ of the line v1 v2 , and we want to balance v1 vm and vm v2 in order to obtain
a good mesh. For a bad triangle in Case 2, we can easily replace v1 v2 and v1 v3 with v2 v3 . Finally, for a bad triangle in
Case 3, we can add the incenter vi of the triangle and can replace v1 v2 and v1 v3 with v1 vi , v2 vi , and v3 vi . The reader is
referred to Figure 3.1 for an illustration of the adjustments in each case.

v5

v5
v2

v4

v3

v3

v2
v4

v3

v3

v1

vm

v1

(a)

v1

(b)

v2

vi

v1

v2

(c)

(d)

Figure 3.1: Adjustment methods for removing the small angles in the bad triangles as implemented by MDEC: The
white nodes represent vertices in the initial coarse mesh, and the thick lines are the external boundary. Figure 3.1a
and Figure 3.1b illustrate the adjustments made for bad triangles in Case 1 and Case 2. From Figure 3.1c to Figure
3.1d, the adjustment for Case 3 is shown.

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

305

4. The MDEC Algorithm and Implementation
We now describe the MDEC algorithm and its implementation.
4.1. MDEC Algorithm
The steps of the MDEC algorithm are as follows.
1. Mesh the geometric domain with an angle constraint of 30◦ .
2. Convert the mesh to a graph such that one node is placed in the graph to represent each triangle and an edge in
the graph represents an adjacency relation between two triangles (i.e., the two triangles are neighbors).
3. Partition the graph in Step 2 into the desired number of subdomains.
4. Insert separators into the partitions in Step 3 to create the initial subdomains and detect the bad angles in each
subdomain (as indicated in Cases 1-3 below).
5. Fix the bad angles (i.e., a boundary angle that is formed using two edges, i.e., v1 v2 and v1 v3 , in the same triangle)
labeled Cases 1-3.
Case 1 v1 v2 form an external boundary of the geometric domain, and v1 v3 form an internal boundary between
two subdomains.
• If angle v1 v2 v3 is between 60◦ and 120◦ , replace v1 v3 with v2 v3 .
• Otherwise, add the midpoint vm of v1 v2 and replace v1 v3 with v3 vm .
Case 2 v1 v2 and v1 v3 form an internal boundary between two subdomains.
• Replace both v1 v2 and v1 v3 with v2 v3 .
Case 3 v1 v2 and v1 v3 form an internal boundary amongst three or more subdomains.
• Add the incenter vi , and replace both v1 v2 and v1 v3 with vi v2 and vi v3 .
The following theorem demonstrates that the MDEC algorithm guarantees a mesh with good boundary angles.
Theorem. The MDEC algorithm generates minimum boundary angles of at least 60◦ .
Proof. We consider the angle improvements given for Cases 1-3 above and show that they guarantee boundary angles
greater than 60◦ . For Case 2, it is easy to see that any angle less than 60◦ is eliminated with the replacement of the
180◦ angle. The angle improvements for Case 1 and Case 3 can be demonstrated as follows.
Consider Case 1. In the case that 60◦ ≤ v1 v2 v3 < 120◦ , when v1 v3 is replaced with v2 v3 , a new angle greater than
◦
60 is obtained. In addition, the formation of a bad triangle that shares v2 v3 is avoided. In the case that v1 v2 v3 < 60◦
or v1 v2 v3 ≥ 120◦ , v1 v3 is replaced by v3 vm , where vm is the midpoint of v1 v2 . Bad triangle Δv2 v1 v3 is split into two
triangles, namely Δv1 vm v3 and Δv2 vm v3 . Since 30◦ ≤ vm v1 v3 < 60◦ , if 30◦ ≤ vm v2 v3 < 60◦ , we obtain v1 vm v3 ≥ 60◦ .
Instead, if 120◦ ≤ vm v2 v3 < 150◦ , we obtain v1 vm v3 ≥ 60◦ . Similarly, it can be shown that v2 vm v3 ≥ 60◦ .
We now consider Case 3. In this case, v1 v2 and v1 v3 are replaced by v1 vi , v2 vi , and v3 vi , where vi is the incenter
of triangle Δv2 v1 v3 . The bad triangle Δv2 v1 v3 is then split into three triangles, namely Δv1 vi v2 , Δv2 vi v3 , and Δv1 vi v3 .
Assume v1 vi v2 < 60◦ . Then, vi v1 v2 + vi v2 v1 ≥ 120◦ . Multiplying both sides of the inequality by two yields: 2(vi v1 v2 +
vi v2 v1 ) = 2vi v1 v2 + 2vi v2 v1 = v3 v1 v2 + v3 v2 v1 ≥ 240◦ . This contradicts the fact that the interior angles of a triangle
must sum to 180◦ . Thus, v1 vi v2 ≥ 60◦ . This is also true for v2 vi v3 and for v1 vi v3 .
4.2. MDEC Implementation
In our implementation of MDEC, the Triangle [8] and MeTiS [9] software packages are used. Triangle is used
to generate an initial background mesh satisfying a boundary angle constraint of 30◦ and an area constraint (based
on the area of the geometric domain). MeTiS is used as a graph partitioner for Step 3 of the MDEC algorithm. To
achieve our goal of balancing the area of the resulting subdomains, the node weight is set to the area of the triangle.
To evaluate our decomposition, PCDM, a parallel 2D constrained Delaunay mesh generation technique introduced by

306

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

Chernikov and Chrisochoides in [2] is used to generate parallel meshes on the subdomains. The objective of PCDM
is to reduce communication between processors that shares an interface by providing asynchronous communication
with aggregation of small messages. In addition, we compare the results of our algorithm with MADD, as the primary
decomposition routine currently used with PCDM is MADD.
5. Numerical Experiments

(a) The three models used in the experiments.

(b) The decomposition from the MDEC algorithm.

(c) The decomposition from the MADD algorithm.

(d) The decomposition from the pMeTiS algorithm

Figure 5.1: (a) The three geometric models used in the experiments: Key, A, and Pipe, and their decompositions into
16 subdomains as generated by the (b) MDEC, (c) MADD, and (d) pMeTiS domain decomposition algorithms.
We perform two numerical experiments in order to test our MDEC domain decomposition algorithm. First, we
use MDEC to decompose our geometric domains of interest, i.e., the Key, A, and Pipe models, into 128, 256, 512,
1024, and 2048 subdomains, respectively, and measure the domain decomposition time, the area of each subdomain,
and the minimum boundary angle (i.e., as computed over all subdomain boundary angles). (The ﬁgures of the three
models are shown in Figure 5.1a.) Second, we generate decompositions of the same models into 4, 8, 16, 32, 64,
and 128 subdomains, use them as inputs to PCDM, and measure the mesh generation time and the element quality
of the resulting mesh. The second experiment was performed on the Cyberstar compute cluster [10] available to the
researchers with 1, 2, 4, 8, and 16 Intel Nahalem processors, respectively. For both experiments, we compare our
results to those obtained for the MADD algorithm [1] and the MeTiS algorithm (pMeTiS) [9]. It should be noted that
pMeTiS performs a domain decomposition that is identical to the domain decomposition generated by MDEC if no
boundary angles are ﬁxed in the bad triangles.
5.1. The Domain Decompositions
Figures 5.1b, 5.1c and 5.1d illustrate the decompositions of the MDEC, MADD, and pMeTiS algorithms into 16
subdomains, respectively. Tables 5.1, 5.2 and 5.3 show the decomposition time, the minimum boundary angle, and the
subdomain area for decompositions of the geometric models into 128, 256, 512, 1024, and 2048 subdomains using
the MDEC, MADD, and pMeTiS algorithms on the Key, A, and Pipe models, respectively.
Since MDEC and pMeTiS can generate the desired number of subdomains simultaneously instead of employing a
divide-and-conquer approach as is the case for the MADD algorithm, the decomposition times for MDEC and pMeTiS
are lower than the decomposition time for MADD. Our results show that MDEC requires approximately 87%, 94%,
and 93% less time than MADD for decomposing the Key, A, and Pipe models, respectively. The percentages reported

307

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

Table 5.1: Decompositions of the Key domain generated by the MDEC, MADD, and pMeTiS algorithms. The number
of subdomains, decomposition time, minimum angle, and subdomain areas are shown.
Decomp.
# of
subdom. time (secs)
128
0.078
256
0.109
512
0.224
1024
0.389
2048
0.827

Min.
angle (◦ )
60.4844
60.1282
60.0812
60.0344
60.0066

Subdomain area
Min.
Max.
Avg.
24.2267 27.5068 26.1094
12.1624 13.8609 13.0547
5.9584 7.0230 6.5273
3.0483 3.4524 3.2637
1.4978 1.7318 1.6318

Decomp.
# of
subdom. time (secs)
128
0.499
256
0.857
512
1.825
1024
3.463
2048
6.865

(a) MDEC algorithm

Min.
angle (◦ )
55.1059
56.3551
54.6888
55.1502
54.1880

Subdomain area
Min.
Max.
Avg.
12.4219 39.0910 26.1094
6.2222 18.3606 13.0547
2.9356 9.7813 6.5273
1.4366 4.7357 3.2637
0.6954 2.3434 1.6318

(b) MADD algorithm

Decomp.
# of
subdom. time (secs)
128
0.046
256
0.078
512
0.140
1024
0.328
2048
0.796

Min.
angle (◦ )
35.5640
32.7425
33.3454
31.2630
31.1219

Subdomain area
Min.
Max.
Avg.
25.3577 26.8671 26.1094
12.5834 13.4458 13.0547
6.1160 6.2171 6.5273
3.1384 3.3619 3.2637
1.5424 1.6824 1.6318

(c) pMeTiS algorithm

Table 5.2: Decompositions of the A domain generated by the MDEC, MADD, and pMeTiS algorithms. The number
of subdomains, decomposition time, minimum angle, and subdomain areas are shown.
Decomp.
# of
subdom. time (secs)
128
0.021
256
0.046
512
0.077
1024
0.156
2048
0.343

Min.
angle (◦ )
60.0933
60.0902
60.0379
60.0290
60.0105

Subdomain area
Min.
Max.
Avg.
87.3546 175.5632 131.4490
44.4354 82.1791 65.7245
14.7750 40.9076 32.8622
8.9520 22.5653 16.4311
4.5646 11.1691 8.2156

Decomp.
# of
subdom. time (secs)
128
0.343
256
0.702
512
1.451
1024
3.073
2048
6.067

(a) MDEC algorithm

Min.
angle (◦ )
54.7301
54.4969
54.6933
54.8099
54.0625

Subdomain area
Min.
Max.
Avg.
67.7831 193.7770 131.4490
37.1646 93.0400 65.7245
12.4522 49.6854 32.8622
6.3131 24.4724 16.4311
3.2245 12.4306 8.2156

(b) MADD algorithm

Decomp.
# of
subdom. time (secs)
128
0.015
256
0.031
512
0.062
1024
0.125
2048
0.249

Min.
angle (◦ )
30.7138
30.9247
31.2089
30.5489
30.2315

Subdomain area
Min.
Max.
Avg.
96.6917 148.2100 131.4490
46.9538 75.1200 65.7245
21.2383 36.3605 32.8622
11.1123 18.5072 16.4311
5.4319 9.4990 8.2156

(c) pMeTiS algorithm

above (and throughout this paragraph) are the averages as computed over all of the subdomains in the experiment of
interest. For example, the above percentages are averages as computed over 128-2048 subdomains.
In comparison with pMeTiS, MDEC requires approximately 25%, 26%, and 17% more time for the domain
decomposition than does pMeTiS. However, the angles of the subdomain boundaries which are generated by MDEC
are higher than those generated by either of the other two algorithms in most cases. MDEC generates subdomains
with boundary angles that are approximately 9% better (in terms of the number of degrees of the angle) than those
generated by MADD and are approximately 48% better than the angles generated by pMeTiS. In addition, MDEC
decomposes the geometric domain into subdomains with boundary angles that are guaranteed to be greater than 60◦ ,
whereas there is no such guarantee for the subdomains generated by MADD or pMeTiS. Note that for a small number

308

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

of subdomains, MADD can decompose the geometric domain into subdomains with boundary angles greater than 60◦ .
The boundary angles are greater than those generated by the MeTiS algorithm (see Table 5.4c for 128 subdomains).
In terms of the subdomain area, pMeTiS does the best job of balancing the subdomain areas for all geometric
domains considered. That is, the diﬀerence between the minimum and maximum subdomain areas is lower than the
corresponding diﬀerences for the MDEC and MADD algorithms. The minimum and maximum subdomain areas are
shown in Tables 5.1, 5.2, and 5.3). However, unlike MADD, MDEC does a very good job of balancing the subdomain
area and does nearly as well as pMeTiS in this regard. Because pMeTiS does not achieve our goal of generating
subdomains with reasonable minimum boundary angles, we no longer consider it in this paper.
5.2. Parallel Mesh Generation
To evaluate and compare the quality of the decompositions from the MDEC and MADD algorithms, the subdomains generated by the algorithms were given to PCDM as input. The quality of the decompositions was evaluated
based on the output meshes generated by the PCDM algorithm. In this subsection, we focus on the results from the
Key model, as the results for the other models studied are very similar.
Figure 5.2 shows the running time of PCDM when using the outputs of the MDEC and MADD domain decomposition algorithms as inputs to PCDM, respectively. As seen in the ﬁgure, both algorithms yield subdomains upon
which meshes can be generated in parallel in approximately the same amount of time using PCDM. It is very hard to
distinguish which algorithm is better when evaluated in this sense. The ﬁgures also show that increasing the number
of processors does not always decrease the running time. In particular, when the number of processors exceeds the
number of subdomains for either the MDEC or the MADD domain decomposition algorithms, the amount of time
required increases.
By comparing the results for the MDEC and MADD algorithms, as shown in Figure 5.3, we can see that it is only
for the case of eight subdomains that PCDM can generate a mesh in parallel faster for the subdomains of the MADD
algorithm than for those of the MDEC algorithm. For other numbers of subdomains, the running times of PCDM for
the inputs of both the MADD and MDEC algorithms are very similar.
We use the element angles of the triangular elements to assess the qualities of the meshes generated by PCDM
using both the MADD and MDEC subdomains as input. In each case, we normalize the number of triangles and
report the percentages of triangles in each range of angles, as the meshes generated from diﬀerent subdomains contain

Table 5.3: Decompositions of the Pipe domain generated by the MDEC, MADD, and pMeTiS algorithms. The number
of subdomains, decomposition time, minimum angle, and subdomain areas are shown. A * represents algorithmic
failure.
Decomp.
# of
subdom. time (secs)
128
0.047
256
0.078
512
0.156
1024
0.312
2048
0.749

Min.
angle (◦ )
60.0302
60.0030
60.0015
60.0051
60.0012

Subdomain area
Min.
Max.
Avg.
80.0668 88.0002 84.4502
39.5866 44.1174 42.2251
19.7528 22.3155 21.1125
9.8531 11.1607 10.5563
4.9143 5.5810 5.2781

Decomp.
# of
subdom. time (secs)
128
1.124
256
*
512
2.294
1024
4.320
2048
7.536

(a) MDEC algorithm

Min.
angle (◦ )
61.3000
*
54.5434
54.0761
54.0761

Subdomain area
Min.
Max.
Avg.
33.7301 127.5020 84.4502
*
*
*
9.6054 30.3949 21.1125
5.1874 15.5628 10.5563
1.9638 7.7769 5.2781

(b) MADD algorithm

Decomp.
# of
subdom. time (secs)
128
0.031
256
0.062
512
0.140
1024
0.296
2048
0.701

Min.
angle (◦ )
31.0892
30.6625
30.0303
30.2154
30.0723

Subdomain area
Min.
Max.
Avg.
82.0408 86.9324 84.4502
39.6250 43.4881 42.2251
20.2833 21.7462 21.1125
10.2489 10.8724 10.5563
5.0019 5.4364 5.2781

(c) pMeTiS algorithm

309

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

25

25
MDEC 4
MDEC 8
MDEC 16
MDEC 32
MDEC 64

15

10

5

0
1

MADD 4
MADD 8
MADD 16
MADD 32
MADD 64

20

Time (sec.)

Time (sec.)

20

15

10

5

2

4
8
Number of processors

0
1

16

(a) MDEC algorithm

2

4
8
Number of processors

16

(b) MADD algorithm

Figure 5.2: Triangulation time for 4, 8, 16, 32, and 64 subdomains of the Key model using the MDEC and MADD
algorithms.

25

25

25

MDEC 4
MADD 4

MDEC 8
MADD 8

10

5

20

Time (sec.)

15

0
1

MDEC 16
MADD 16

20

Time (sec.)

Time (sec.)

20

15

10

5

2

4
8
Number of processors

16

0
1

(a) 4 subdomains

15

10

5

2

4
8
Number of processors

16

0
1

(b) 8 subdomains

25

16

25
MDEC 64
MADD 64
20

Time (sec.)

20

Time (sec.)

4
8
Number of processors

(c) 16 subdomains

MDEC 32
MADD 32

15

10

5

0
1

2

15

10

5

2

4
8
Number of processors

(d) 32 subdomains

16

0
1

2

4
8
Number of processors

16

(e) 64 subdomains

Figure 5.3: Comparison of triangulation times for the PCDM algorithm using the subdomains from the MDEC and
MADD algorithms as input for various numbers of subdomains on the Key model, respectively.
diﬀerent numbers of triangles. However, all of the meshes generated by PCDM contain approximately 77 million
triangles for the geometric models considered here. Both the MDEC and MADD decompositions yield similar ﬁnal
meshes as shown in Figure 5.4. The histograms give the percentages of triangles in each range of angles for two
diﬀerent subdomain/processor conﬁgurations. In particular, the results shown in Figure 5.4a are for the ﬁnal meshes
generated by PCDM using the MDEC and MADD subdomains with 1 processor and 4 subdomains. Similarly, Figure
5.4b shows the results for the ﬁnal meshes generated with 16 processors and 64 subdomains using the PCDM algorithm. No real diﬀerence is observed between the element qualities of the PCDM meshes generated on the MDEC
and MADD subdomains.
When the numbers of subdomains or processors are increased, the angle quality of the resulting meshes is very

310

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

30

30
MDEC 4
MADD 4

25

15

10

20

15

10

5

0

0

20

Degree of triangle angles

(a) 4 subdomains

20

5

−3
30 0
−4
40 0
−5
0
50
−6
60 0
−7
70 0
−8
80 0
−9
90 0
−1
10 00
0−
11 110
0−
13 120
0−
1
14 40
0−
15 150
0−
16 160
0−
17
0

Percentage of triangles

20

−3
30 0
−4
40 0
−5
0
50
−6
60 0
−7
70 0
−8
80 0
−9
90 0
−1
10 00
0−
11 110
0−
13 120
0−
1
14 40
0−
15 150
0−
16 160
0−
17
0

Percentage of triangles

25

MDEC 64
MADD 64

Degree of triangle angles

(b) 64 subdomains

Figure 5.4: Percentage of triangles in various angle ranges for various decompositions of the Key model using the
MDEC and MADD algorithms.
similar. In Figure 5.5a, when the number of subdomains is increased, the distribution of the angles does not change
much. Only in the 64-subdomain case are there some changes which can be easily seen. In particular, there is an
increase in the number of triangles with angles in the 40-50 degree range. However, this increase in the percentage
of triangles is less than 2%. When the number of processors is increased, all cases give very similar results as those
shown in Figure 5.5b. From our experiments, we can conclude that the meshes generated by the PCDM algorithm
using the MADD and MDEC subdomains as input, are similar in terms of mesh generation time and angle quality.
Moreover, the angle quality of elements in the ﬁnal mesh is not sensitive to changes in the numbers of subdomains
and processors.
6. Conclusions and Future Work
We described a novel domain decomposition technique called the Metis-based Domain Decomposition (MDEC)
algorithm for use with 2D parallel mesh generation. The MDEC algorithm provides a good domain decomposition in
terms of the decomposition time, the boundary angles of the resulting subdomains, and balancing of the subdomain
areas. The MDEC algorithm yields better boundary angles, subdomain areas, and decomposition times than the
MADD algorithm. However, because the decomposition of the MDEC algorithm is based on a background mesh,
MDEC cannot be used to generate a decomposition with guaranteed good boundary angles (≥ 60◦ ) if the background
mesh does not provide triangle elements with all angles ≥ 30◦ .
There are several possibilities for future work. First, we plan to develop an extension of the MDEC algorithm and
corresponding theory to handle quadrilateral background meshes. Second, we note that if the weight of the node used
in the graph partitioned routine is changed, a diﬀerent domain composition may result. For example, in this paper,
we set the weight of the node to be the area of the corresponding triangle, which led to a balancing of the areas of
the resulting subdomains. If, however, the node weights are each set to 1, the triangle density would be balanced. We
plan to study whether or not this particular type of decomposition will prove useful for balancing the workload of the
parallel mesh generator if the mesh generation is focused on the triangle density in certain areas of the domain. Finally,
we plan to extend the MDEC algorithm to handle 3D meshes containing tetrahedral and/or hexahedral elements. In
this case, there are two main issues which need to be considered: the choice of angle to focus on (i.e., the dihedral
angle versus the solid angle) and how to guarantee good boundary angles.

311

Thap Panitanarak et al. / Procedia Computer Science 4 (2011) 302–311

4 processors with various number of subdomains

32 subdomains with various number of processors

30

30

15

10

25

20

15

10

5

0

0

20

(a) 4 processors

20

5

Degree of triangle angles

1
2
4
8
16

−3
30 0
−4
40 0
−5
0
50
−6
60 0
−7
70 0
−8
80 0
−9
90 0
−1
10 00
0−
11 110
0−
13 120
0−
1
14 40
0−
1
15 50
0−
16 160
0−
17
0

20

−3
30 0
−4
40 0
−5
0
50
−6
60 0
−7
70 0
−8
80 0
−9
90 0
−1
10 00
0−
11 110
0−
13 120
0−
1
14 40
0−
15 150
0−
16 160
0−
17
0

Percentage of triangles

25

Percentage of triangles

4
8
16
32
64

Degree of triangle angles

(b) 32 subdomains

Figure 5.5: Percentages of triangles in various angle ranges for the decompositions of the Key model
Acknowledgements
This work was funded in part by NSF grant CNS-0720749 and was supported through instrumentation funded by
NSF grant OCI-0821527.
References
[1] N. P. Chrisochoides, A survey of parallel mesh generation methods, Tech. rep. BrownSC 2005-09, Brown University, 2005. Also appears as a
chapter, in: Are Magnus Bruaset, Aslak Tveito (Eds.), Numerical Solution of Partial Diﬀerential Equations on Parallel Computers, Springer,
2006.
[2] L. Linardakis and N. P. Chrisochoides, Algorithm 870: A static geometric medial axis domain decomposition in 2D Euclidean space, ACM
Trans. Math. Softw., 34 (1): 1-28, 2008.
[3] A. N. Chernikov and N. P. Chrisochoides, Algorithm 872: Parallel 2D constrained Delaunay mesh generation, ACM Trans. Math. Softw., 34
(1): 1-20, 2008.
[4] J.R. Gilbert and G.L. Miller and S.-H. Teng, Geometric mesh partitioning: Implementation and experiments, In Proc. of the International
Parallel Processing Symposium, p. 418-427, 1995.
[5] M. Heath and P. Raghavan, A cartesian parallel nested dissection algorithm, SIAM Journal on Matrix Analysis and Applications, 16 (1):
235-253, 1995.
[6] A. Pothen and H.D. Simon and K.-P. Liou, Partitioning sparse matrices with eigenvectors of graphs, SIAM Journal on Matrix Analysis and
Applications, 11: 430-452, 1990.
[7] B. Hendrickson and R. Leland, A multilevel algorithm for partitioning graphs, Proc. of the IEEE/ACM Supercomputing 1995 Conference, p.
28, 1995.
[8] J. R. Shewchuk, Triangle: Engineering a 2D quality mesh generator and Delaunay triangulator, In Applied Computational Geometry:
Towards Geometric Engineering, M. C. Lin and D. Manocha, Eds. Lecture Notes in Computer Science, vol. 1148. Springer-Verlag (1996),
203-222.
[9] G. Karapis and V. Kumar, MeTiS: A software package for partitioning unstructured graphs, partitioning meshes, and computing ﬁll-reducing
orderings of sparse matrices, Version 4.0. University of Minnesota, 1998.
[10] The Cyberstar compute cluster. See http://www.ics.psu.edu/infrast/specs.html.

