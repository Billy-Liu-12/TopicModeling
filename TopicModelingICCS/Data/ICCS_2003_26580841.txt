Fast Exponentiaion over GF(2m) Based on Cellular
Automata
1

2

Kyo-Min Ku , Kyeoung-Ju Ha , and Kee-Young Yoo

3

1

Mobilab Co.Ltd, 952-3, 4F Plus Bldg., DongChun-Dong, Buk-Gu, Daegu, Korea, 702-250
kmku@nate.com
2
KyungSan University, 75 San, JumChon-Dong, Kyungsan, KyungPook, Korea, 712-715
kjha@kyungsan.ac.kr
3
KyungPook National University, 1370 Sankyuk-Dong, Puk-Gu, Daegu, Korea 702-701
yook@knu.ac.kr

Abstract. In this paper, we present a new exponentiation architecture and mulm
tiplier/squarer which are the basic operations for exponentiation on GF(2 ). The
proposed multiplier/squarer is used as kernal architecture of exponentiation and
processes the modular multiplication and squaring at the same time for effective
m
exponentiation on GF(2 ) using a cellular automata. Proposed architecture can
be used efficiently for the design of the modular exponentiation on the finite
field in most public key crypto systems such as Diffie-Hellman key exchange,
ElGamal, etc. Also, the cellular automata architecture is simple, regular, modular, cascadable and therefore, can be utilized efficiently for the implementation
of VLSI.

1 Introduction
For the past 30 years, studies on finite fields have been conducted in many areas, including crypto systems[1], and most public key crypto systems, such as DiffieHellman key exchange and ElGamal, are based on modular exponentiation computations in a finite field[2][3]. Such modular exponentiation uses a modular multiplier as
the basic structure for its implementation. The Elliptic Curve Cryptosystem is also
based on constant multiplication[4]. Examples of the algorithms used to implement
multipliers include the LSB-first multiplication algorithm[5], MSB-first multiplication
algorithm[6], and Montgomery algorithm[7]. Previous research and development on
modular multiplication is as follows: First, for a one-dimensional systolic array, in the
case of an LSB-first algorithm, the modular multiplication is performed within 3m
clock cycles using m cells[5]. While in the case of an MSB-first algorithm, the modular multiplication can be performed within 3m clock cycles using m cells[6]. With an
LFSR structure, the modular multiplication can be performed within 2m clock cycles
using m cells[10], the modular multiplication can be performed within m clock cycles
using m cells and the modular squaring can be performed within m clock cycles using
m cells[11]. The structures proposed in [5, 6, 10, 12] are simple modular multipliers.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 841–850, 2003.
© Springer-Verlag Berlin Heidelberg 2003

842

K.-M. Ku, K.-J. Ha, and K.-Y. Yoo

However, when computing exponentiation, such structures must be repeated twice for
modular multiplication and squaring. In case of [11], the structures of multiplication
and squaring must be used together to simultaneously perform the modular multiplication and squaring.
The purpose of the current paper is to reduce the time and the space, and to investigate and develop a simple, regular, modular, and cascadable architecture for the VLSI
m
implementation of exponentiation in GF(2 ) based on cellular automata, which is the
basic computation in any public key crypto system.
m
Accordingly, this paper proposes a fast exponentiation architecture over GF(2 )
based on a cellular automata. The proposed architecture uses the basic architecture
that can simultaneously perform multiplication and squaring in m clock cycles using
3m-1 AND gates, 3m-1 XOR gates, and 4m-1 registers. Based on the properties of
LSB-first multiplication, the parts of modular multiplication and squaring that can be
performed in common are identified, then the remainder is processed in parallel. As a
result, the multiplication and squaring can be performed much more efficiently as
regards time and space compared to repeating the structure as proposed in [5, 6, 10]
and can be performed much more efficiently as regards space compared to repeating
the structure as proposed in [11,14]. Furthermore, the performance of the exponentiation is much more efficient than that of the [16] as regards time and space.
The remainder of the paper is as follows: Chapter 2 gives an overview of the concept of cellular automata, while Chapter 3 reviews the general exponentiation algom
rithm in GF(2 ). Chapter 4 introduces the structure of the proposed multiplier/squarer
for efficient exponentiation using a cellular automata. Chapter 5 gives the exponentiam
tion architecture over GF(2 ). Finally, Chapter 6 offers some conclusions.

2 Cellular Automata(CA)
Cellular automata consist of numbers of interconnected cells arranged spatially in a
regular manner[8][9]. A cell of the CA has the “0” state or “1” state at a certain time.
The next state of a cell depends on the present states of ‘k’ of its neighbors, for a kneighborhood CA. The neighbor in CA means the cell which affect the state of cell
update. Fig.1 is the example of the two-way CA.
clo c k

C e ll 0

C e ll 1

...

C e ll m -2

C e ll m -1

Fig. 1. m-cell two-way CA

The m-cell of the two-way CA is operated at the same time by a clock. The state of
a cell at time t is determined by the states of the neighbors at time t-1. In this paper,
we assume that the leftmost cell and rightmost cell are adjacent.

m

Fast Exponentiaion over GF(2 ) Based on Cellular Automata

843

We use the modified CA which is the one-way CA(OCA) to solve the problem.
Fig.2 shows the OCA structure. It is the same as two-way CA in Fig.1 except that the
data stream is one-way.
c lo c k

C e ll 0

...

C e ll 1

C e ll m -2

C e ll m -1

Fig. 2. m-cell OCA

The characteristic matrix shows the entire rules of the CA. An example of the characteristic matrix with 4-cell of which state is renewed by the state of its right adjacent
cell is as follows:
0
0
D=
0

1

1 0 0
0 1 0
0 0 1

0 0 0

In the above example, it is shown that element 1 of the matrix on the ith line of
the jth row shows that the ith cell is dependent on the neighbor of the jth cell.

3 General Algorithm for the Exponentiation over GF(2m)
E

m

In this chapter, general algorithms for obtaining M(x) mod P(x) on GF(2 ) are illustrated[12].
Polynomial P(x) of arbitrary degree with coefficients from GF(2) is called an irreducible polynomial if P(x) is not divisible by any polynomial over GF(2) of degree
greater than 0 but less than the degree of P(x) [1]. Let P(x)=xm+pm-1xm-1+ … +p1x1+p0
be an irreducible polynomial over GF(2) and α be a root of P(x).
Let’s suppose that A(x) and B(x) are the elements on GF(2m). Then two polynomials A(x), B(x) are as follows:

A(x)=am-1xm-1+ … +a1x1+a0
B(x)=bm-1xm-1+ … +b1x1+b0

(1)
(2)

Firstly, computation of M(x) E mod P(x) is divided into the LSB-first method and
MSB-first method according to the method of processing of the exponent E, [em-1, em-2,
…,e1, e0], where the method of computation is as follows:
LSB-first exponentiation: Compute in the order of from e0 to em-1

M ( x) E = M ( x)

e0

e1

(M ( x) 2 ) (M ( x) 4 )

e2

...( M ( x ) 2

m −1

)

e m −1

MSB-first exponentiation: Compute in the order of from em-1 to e0

M ( x) E = (..((M ( x) em −1 ) 2 M ( x) em − 2 ) 2 ...M ( x) e1 ) 2 M ( x) e0

844

K.-M. Ku, K.-J. Ha, and K.-Y. Yoo

In this chapter, general algorithm for the method of LSB-first exponentiation is reviewed [13], the structure of a multiplier using the cellular automata that can perform
its computation efficiently is proposed in the next chapter.
Algorithm 1 : LSB-first Exponentiation Algorithm[13]
Input : A(x), E, P(x)
Output : C(x)=A(x)E mod P(x)
STEP 1 : C(x)= α0 , T(x)=A(x)
STEP 2 : for i=0 to m-1
STEP 3 : if ei ==1 C(x)= T(x)C(x) mod P(x)
STEP 4 : T(x)= T(x)T(x) mod P(x)
The general method for implementation of Algorithm 1 is to design an exponentiation
architecture by using two multipliers, or to use one multiplier and one squarer. However, in the next chapter, an efficient multiplier/squarer is designed by identifying the
commonly computed part of two operations (modular multiplication and squaring)
perform it at the same time, and processing the remaining operation in parallel. Proposed structure can perform exponentiation efficiently.

4 Multiplier/Squarer Using the Cellular Automata
In this chapter, we show the architecture that simultaneously process the modular
multiplication and squaring over GF(2m) in m clock cycles using a cellular automata[15].
According to Alg. 1 which is proposed in Chapter 3, in order to compute the LSBfirst exponentiation, it is necessary to compute M(x)= T(x)C(x) which is the modular
multiplication used in Step 4 and S(x)= T(x)T(x)which is squaring used in Step 3.
These two computations can be expressed in a recurrence form again[15]. First,
the recurrence form of the modular multiplication is as follows:
M(i)(x)=M(i-1)(x)+ci-1T (i-1)(x), T(i)(x)=T(i-1)(x)x mod P(x), for 1≤i≤m
(0)

(0)

(i)

(3)

2

where T (x)=T(x), M (x)=0, M (x)=c0T(x)+c1[T(x) x mod P(x)] + c2[T(x) x mod P(x)]
i-1
(m)
+ + ci-1[T(x)x mod P(x)]. For i=m, M (x)=M(x)=T(x)C(x) mod P(x). In equation 3,
two equations can be performed in parallel. And second, squaring can be also converted into the LSB-first recurrence form similar to equation 3 as follows:

S(i)(x)=S(i-1)(x)+ti-1T (i-1)(x), T(i)(x)=T(i-1)(x)x mod P(x), for 1≤i≤m

(4)

where T(0)(x)=T(x), S(0)(x)=0, S(i)(x)=t0T(x)+t1[T(x) x mod P(x)] + t2[T(x) x2 mod P(x)]
+ …+ ti-1[T(x) xi-1 mod P(x)]. For i=m, S(m)(x)=S(x)=T(x)T(x) mod P(x). In equation 4,
two equations can be performed in parallel.

m

Fast Exponentiaion over GF(2 ) Based on Cellular Automata

845

The following bit-wise LSB-first algorithm both modular multiplication and
squaring simultaneously can be derived from the above equation 3 and 4 :

Algorithm 2: MS(C(x), T(x), P(x))
Multiplication and Squaring Algorithm
Input : C(x), T(x), P(x)
Output : M(x)=C(x)T(x) mod P(x),

S(x)=T(x)T(x) mod P(x)

Step1 : M(0)(x)=0, T(0)(x)=T(x),

S(0)(x)=0

Step2 : for i=1 to m
Step3 :

T(i)(x)=T(i-1)(x)x mod P(x)

Step4 :

M(i)(x)=M(i-1)(x)+cm-i-1T(i-1)(x),

S(i)(x)=S(i-1)(x)+tm-i-1T(i-1)(x)

Therefore, a structure in which the exponentiation can be computed efficiently on
GF(2m) by performing the modular multiplication and squaring simultaneously in the
same amount of time as that of modular multiplication by computing T(i)(x)=T(i-1)(x)x
mod P(x) for 1≤i≤m, which is the common part in equations 3 and 4, only once without duplicate computation, using the result, and obtaining the remaining part of equations 3 and 4 in parallel was proposed in [15].
The characteristic matrix of the CA to operate the step 3 fo Algorithm 2 is as follows:
0
0
D=
0

1

1 0 0
0 1 0
0 0 1

0 0 0

And the CA structure is in Fig.3.
clock

Cell 0

Cell 1

Cell 2

...

Cell m-2

Cell m-1

Fig. 3. OCA having the characteristic matrix D

The Fig.4 shows the entire suructure of common operation of multiplication and
squaring. It accomplish the step 3 of Algorithm 2.
Now, how to perform the modular multiplication and squaring simultaneously is
(i)
(i-1)
(i-1)
described. In order to perform step 4 of Algorithm 2, M (x)=M (x)+cm-i-1T (x) for
(i-1)
(i-1)
1≤i≤m, the cm-i-1T (x) operation is reviewed firstly. For cm-i-1T (x) operation with

846

K.-M. Ku, K.-J. Ha, and K.-Y. Yoo

1≤i≤m, the m bits obtained as a result of CA of Fig. 4 and ci-1 are inputted into m AND
th
(i-1)
gates at i clock. The next result and M (x) are subject to XOR, and the result is
<initial value>
tt0
..1
tm-2
tm-1

...

clock

OCA

...

...
carry line

...
pm-1

pm-2

...

p1

Fig. 4. Structure of T(i-1)(x)x mod P(x) operation
(i-1)

(0)

stored at M (x) again. The value of each M (x) register at the beginning is initialized
to be 0. The structure for that is as shown in Fig. 5, which shows the computation in
the ith clock for 1≤i≤m:
<initial value>
tt0
..1
tm-2
tm-1

...

clock

OCA

...

...
carry line

...

...

cm-1 ... c1 c0

...
Mm-1

Mm-2

...

pm-1
M1

pm-2

...

p1

M0

Fig. 5. Structure of modular multiplication

For squaring operation in step 4 of Algorithm 2, the C(x), is substituted with T(x).
So the structure in which the modular multiplication and squaring can be performed
th
simultaneously using CA, is shown in Fig. 6(at i clock). Each initial value is as follows:
- Initial values of OCA
: T(x) = tm-1 … t2 t1 t0
- Initial values of the P register : P(x) = pm-1…p2 p1 p0
- Initial values of the S, M register : all 0

m

Fast Exponentiaion over GF(2 ) Based on Cellular Automata

MS
MS
Mm-1

...

Mm-2

cm-1 ... c 1 c0

M1

847

M(x)=C(x)T(x) mod P(x)

M0

...
...
<initial value>
t0
t1
..
tm-2
t m-1

...

clock

...

OCA

...
carry line

...

tm-1 ... t1 t0

...
P(x)

Sm-1

Sm-2

...

...
pm-1

S1

pm-2

...

p1

S0
S(x)=T(x)T(x) mod P(x)

Fig. 6. Structure of simultaneously performing modular multiplication and squaring using CA

5 Exponentiation Architecture Using Multiplier/Squarer over
m
GF(2 )
Ordinary LSB-first exponentiation algorithm in [12] can be slightly changed to Algorithm 3. Exponentiation algorithm which uses a new multiplication/squaring algorithm, MS algorithms in chapter 4, as a sub function for exponentiation algorithm is as
follows:
Algorithm 3 : EXP(A(x), E, p(x))
Exponentiation Algorithm using MS Algorithm.
Input : A(x), E, P(x)
Output : C(x)=A(x)E mod P(x)
STEP 1 : C(x)= α0 , T(x)=A(x)
STEP 2 : for i=0 to m-1
STEP 3 : if ei ==1 (C(i+1)(x), T(i+1)(x))=MS(C(i)(x), T(i)(x))
else C(i+1)(x)=C(i)(x), T(i+1)(x)= MS(C(i)(x), T(i)(x).
In step 3, MS algorithm is called with two parameters C(i)(x) and T(i)(x), and it returns two computation results of multiplication, T(i)(x)C(i)(x) mod P(x) and squaring
T(i)(x)T(i)(x) mod p(x). Square result is stored to T(i+1)(x). But, the variable C(i+1)(x)
stores a value depends on the value ei.
If ei has value 1 then returned multiplication result is passed to C(i+1)(x), but the other
case, C(i)(x) is passed to C(i+1)(x).

848

K.-M. Ku, K.-J. Ha, and K.-Y. Yoo
e m -1

D (m + 2 )

... e 1

D (m + 2)

e0

D (m + 2 )

LLSSBB--ffi irrsstt
EExxppoonneenntti iaatti ioonn

1

M
U
X

R e g is te r_ 1

A (x )E m o d P (x )

A (x )

M S

R e g iste r_ 2
P (x )

D (1 )

C (x )
T (x)
P (x )

M S

C (x)T (x ) m o d P (x)

ei

T (x )T (x) m o d P (x )
C (x )

D (m )

: m c lo c k d e la y b u ffe r

C (x )T (x ) m o d P (x )

M
U
X

C (x ), if e i = 0
C (x )T (x ) m o d P (x ), if e i = 1

Fig. 7. A structure for performing an exponentiation using MS structure

Fig 7. represents a structure for performing an exponentiation using a new MS
structure in Fig.6, which operates Algorithm 3. In Fig.7, the architecture includes a
MS structure as its kernel architecture. This MS structure for multiplier/squarer is
described in Fig. 6. While the multiplier/squarer computes the multiplication operation, it also processed the squaring operation concurrently forming the square term.
The MUX depicted in Fig. 7 decides the multiplication result depends on the exponent.

6 Analysis and Conclusion
m

In this paper, we propsed a new fast exponentiation architecture over GF(2 ) using a
cellular automata. The performance of the proposed archtecture is compared with that
of previous study. Table 1 shows the result.
In conclusion, the proposed structure in this paper is much more efficient than systolic structure in view of the space and time. And we generally consider construction
simplicity, defined by the number of transistors needed for its construction and the
time needed for the signal change to propagate through the gate[17]. So the comparison of area-time product[17] for LSB first exponentiation is shown in Table 2. In
Table 2, the proposed architecture in this paper is more efficient in view of the space
and time than that of [16]. Even if when m=512, the proposed architecture get 24%
speed up. In view of the space, the area complexity of the proposed architecture is
2
3
O(m ), but architecture based on systolic array is O(m ).
Architecture proposed in this paper can be efficiently compute the exponentiation
m
over GF(2 ) in public key cryptosystems.

m

Fast Exponentiaion over GF(2 ) Based on Cellular Automata

849

Table 1. Comparison of performance

Systolic array
[16]
exponentiation
2(m-1) multipliers
4m2(m-1)
4m2(m-1)
14m2(m-1)
m
0

Structure

Proposed paper

Operation
exponentiation
NO. of basic components
1 MS*
NO. of AND gates
3m-1
NO. of XOR gates
3m-1
NO. of one bit latches
m2+2m+1
NO.of MUXes
1
NO.of registers
m bit 5
m-1 bit: 1
Execution time
2
2
2m +m
m +3m
(clock cycles)
* MS : Structure of simultaneously performing modular multiplication and squaring
Table 2. Comparison of Area-Time Product for LSB first exponentiation

Structure

Systolic array [16]
4m2(m-1)A2AND
+4m2(m-1)A2XOR

AREA

+mA2MUX
+(14m3-14m2) A1LATCH
3

2

= (192m -192 m +20m )φ
2

TIME
AREA ×
TIME

(2m +m)(2T2AND+4T2XOR)

Proposed paper
(3m-1)A2AND
+(3m-1)A2XOR
+A2MUX
+(6m-1)A1FF
+ (m2+2m+1) A1LATCH
= (8m2+184m-10) φ
2

= (13.6 m2+6.8 m)∆

(m +3m)(T2AND+T2XOR+ T1FF)=
(10.4 m2+31.2 m) ∆

(2611.2m5-1305.6m41033.6m3+136m2) φ∆

(83.2m4+2163.2m3+5636.8m2312m) φ∆

Acknowledgements. This research was supported by Kyungpook National University
Research Team Fund, 2002.

References
[1]
[2]

R.J. McEliece, Finite Fields for Computer Scientists and Engineerings, New
York:Kluwer Academic, 1987
W. Diffie and M.E. Hellman, “New directions in cryptography,” IEEE Trans. on Info.
Theory, VOL. 22, pp.644–654, Nov. 1976.

850
[3]
[4]
[5]

[6]

[7]
[8]
[9]
[10]

[11]

[12]
[13]

[14]

[15]

[16]
[17]

K.-M. Ku, K.-J. Ha, and K.-Y. Yoo
T. ElGamal. “A public key cryptosystem and a signature scheme based on discrete logarithms,” IEEE Trans. on Info. Theory, VOL. 31(4). pp. 469–472, July 1985.
A.J. Menezes, Elliptic Curve Public Key Cryptosystems, Kluwer Academic Publishers,1993.
C.–S. YEH, IRVING S. REED, T.K. TRUONG, “Systolic Multipliers for Finite Fields
GF(2m),” IEEE TRANSACTIONS ON COMPUTERS, VOL. C-33, NO. 4, pp. 357–360,
April 1984.
C.L. Wang, J.L. Lin, “Systolic Array Implementation of Multipliers for Finite Fields
GF(2m),” IEEE TRANSACTIONS ON CIRCUITS AND SYSTEMS, VOL. 38, NO. 7, pp.
796–800,July 1991.
P.L. Montgomery, “Modular multiplication without trial division,” Mathematics of Computation, 44(170):519–521, April, 1985.
M. Delorme, J. Mazoyer, Cellular Automata, KLUWER ACADEMIC PUBLISHERS
1999.
STEPHEN WOLFRAM, Cellular Automata and Complexity, Addison-Wesly Publishing
Company, 1994.
ELWYN R. BERLEKAMP, “Bit-Serial Reed-Solomon Encoders,” IEEE
TRANSACTIONS ON INFORMATION THEORY, VOL. IT-28, NO. 6, pp. 869–874, November, 1982.
P.P. Choudhury, R. Barua, “ Cellular Automata Based VLSI Architecture for Computing
Multiplication And Inverse In GF(2m),” IEEE Proceeding of the 7th International Conference on VLSI Design, pp.279–282, January 1994.
Knuth, THE ART OF COMPUTER PROGRAMMING, VOL. 2/Seminumerical Algorithms, ADDISON-WESLEY, 1969.
P.A. Scott, S.J. Simmons, S.E. Tavares, and L.E. Peppard, “Architectures for Exponentiation in GF(2m)”, IEEE J. Selected Areas in Comm., VOL.6., NO. 3, pp. 578–586,
April, 1988.
C.Parr, “Fast Arithmetic for Public-Key Algorithms in Galois Fields with Composite
Exponents,” IEEE TRANSACTIONS ON COMPUTERS, VOL.48, NO. 10, pp. 10251034, October, 1999.
Kyo-Min Ku, Kyeoung-Ju Ha, Hyun-Sung Kim, Kee-Young Yoo, “New Parallel Architecture for Modular Multiplication and Squaring Based on Cellular Automata.”, PARA
2002, LNCS 2367, pp.359–369, 2002
C.L. Wang, “Bit-Level Systolic Array for Fast Exponentiation in Gf(2m)”, IEEE
TRANSACTIONS ON COMPUTERS, VOL. 43, NO. 7, pp. 838–841, July, 1994.
D. D. Gajski, Principles of Digital Design, Prentice-Hall International, Inc., 1997.

