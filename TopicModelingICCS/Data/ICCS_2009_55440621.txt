Deterministic Computation of
Pseudorandomness in Sequences of
Cryptographic Application
A. F´
uster-Sabater1 , P. Caballero-Gil2, and O. Delgado-Mohatar1
1
2

Institute of Applied Physics, C.S.I.C., Serrano 144, 28006 Madrid, Spain
amparo@iec.csic.es, oscar.delgado@iec.csic.es
Fac. of Maths, D.E.I.O.C., University of La Laguna, 38271 Tenerife, Spain
pcaballe@ull.es

Abstract. An easy method of checking balancedness degree as well as
run quantification in sequences obtained from LFSR-based keystream
generators has been developed. The procedure is a deterministic alternative to the traditional application of statistical tests. The computation
method allows one to check deviation of balancedness and run distribution goodness from standard values. The method here developed can be
considered as a first selective criterium for acceptance/rejection of this
type of generators of cryptographic application.
Keywords: Pseudorandomness, bit-string, balancedness, run dirtribution, cryptography.

1

Introduction

Transmission of sensitive information between two interested parties needs several security requirements (conﬁdentiality, integrity, non repudiation, authentication ...) that can be satisﬁed by means of design, assessment and implementation
of cryptographic algorithms and security protocols.
Conﬁdentiality makes use of an encryption function currently called cipher
that converts the plaintext into the ciphertext. Ciphers are usually divided into
two large classes: stream ciphers and block-ciphers. Stream ciphers are very fast
(in fact, the fastest among the encryption procedures) so they are implemented
in many technological applications e.g. algorithms A5 in GSM communications
[7] or the encryption system E0 used in the Bluetooth speciﬁcations [1]. Stream
ciphers try to imitate the ultimate one-time pad cipher and are supposed to
be good pseudorandom generators capable of stretching a short secret seed (the
secret key) into a long sequence of seemingly random bits (the keystream sequence). This sequence is then XORed with the plaintext in order to obtain the
Work supported by CDTI (Spain) and the companies INDRA, Uni´
on Fenosa, Tecnobit, Visual-Tools, BrainStorm, SAC and TechnoSafe under programme CenitHESPERIA as well as supported by Ministry of Science and Innovation and
European FEDER Fund under Project TIN2008-02236/TSI.
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 621–630, 2009.
c Springer-Verlag Berlin Heidelberg 2009

622

A. F´
uster-Sabater, P. Caballero-Gil, and O. Delgado-Mohatar

ciphertext. Most generators producing keystream sequence are based on Linear
Feedback Shift Registers (LFSRs) e.g. see [6] and [8]. The pseudorandom output
sequence is a periodic sequence generated as the image of a nonlinear Boolean
function in the LFSR stages.
Desirable properties for such sequences can be enumerated as follows: 1) large
period, 2) large linear complexity, 3) good statistical properties. There are wellknown proposals [2], [4], [9], [11], [12] for which conditions 1) and 2) above are
perfectly satisﬁed. Nevertheless, how to generate sequences with good statistics
is a feature that even now remains quite diﬀuse, see [3].
Balancedness and adequate distribution of 1 s and 0 s in the output sequence
are necessary (although not suﬃcient) conditions that every keystream generator
must satisfy. Roughly speaking, a binary sequence is balanced if it has approximately the same number of 1 s as 0 s. On the other hand, a run of 1 s (0 s)
of length k is deﬁned as a succession of k consecutive 1 s (0 s) between two 0 s
(1 s). The runs of 1 s are called blocks while the runs of 0 s are called gaps. It is
a well known fact [6] that in a pseudorandom binary sequence of period T there
are T /2 runs distributed as follows: half the runs have length 1, one quarter of
the runs length 2, one eighth of the runs length 3, and so forth. Moreover, half
the runs of any length are gaps, the other half are blocks. That is to say, in a
pseudorandom binary sequence the number and distribution of digits is perfectly
quantiﬁed.
Due to the long period of the output sequence ( 1077 ) in cryptographic applications, it is unfeasible to produce an entire cycle of such a sequence and then
analyze the number and distribution of 1 s and 0 s. Therefore, in practice, portions of the output sequence are chosen randomly and diﬀerent statistical tests
[11](monobit test, run test, poker test, serial test ... ) are applied to all these subsequences. Nevertheless, passing the previous tests merely provides probabilistic
evidence that the LFSR-based keystream generator produces a sequence with
certain characteristics of pseudorandomness.
In this work, deterministic expressions to compute the degree of balancedness
and number of runs in one period of the output sequence are proposed. If the
computed values are not in the expected range, then the generator must be
rejected.

2

Notation and Basic Concepts

Any L-variable Boolean function can be expressed canonically in terms of its
minterms [5], that is the logic product of the L variables (a1 , a2 , ..., aL ) where
each variable can be in its true or complementary form. Examples of minterms
of L variables are:
a1 a2 ... aL ,

a1 a2 ... aL ,

a1 a2 ... aL

where the superposition of variables represents the logic product. In addition,
any L-variable Boolean function can be uniquely expressed in Algebraic Normal
Form (A.N.F.) or Muller expansion [10] by means of the sum exclusive-OR of

Deterministic Computation of Pseudorandomness in Sequences

623

logic products of diﬀerent orders in the L variables. A simple example of Boolean
function in A.N.F. is:
f (a1 , a2 , ..., aL ) = a1 a2 ⊕ a2 aL−1 ⊕ aL
where ⊕ represents the exclusive-OR logic operation.
In mathematical terms, a LFSR-based generator is a L-variable nonlinear
Boolean function, F : GF (2)L − {0} → GF (2), whose L input-variables are the
stages of the LFSRs. At each clock pulse the LFSRs generate new stage contents
that will be the new input-variables of F . In this way, the generator produces
the successive bits of the output sequence or generated sequence. A LFSR-based
keystream generator is nothing but a nonlinear Boolean function F given in
its A.N.F. Moreover, the LFSRs involved in this kind of generator are maximal
length-LFSRs [6], that is LFSRs whose characteristic polynomials are primitive.
In this case, their output sequences are called PN-sequences. Balancedness and
run distribution of PN -sequences have been extensively studied in the literature.
See for example [6] and [13].
Let A be an arbitrary maximal length-LFSR of length LA and ai (i = 1, ..., LA )
the binary content of the i-th LFSR stage. A minterm of LA variables is denoted
by Ai...j whether such a minterm includes the variables ai ... aj in their true form
while the other variables are in complementary form.
Let ΛL denote the set of L-variable Boolean functions in A.N.F. and ΦF the
minterm function of F . In fact, ΦF : ΛL → ΛL , such that, given F , ΦF substitutes every term of F by its corresponding minterm. For a nonlinear function in
A.N.F., e.g. F (a1 , a2 , a3 ) = a1 a2 a3 ⊕ a1 a3 ⊕ a2 ⊕ a3 , we have:
ΦF = A123 ⊕ A13 ⊕ A2 ⊕ A3 .
On the other hand, every minterm considered as a generator applied to the
LA stages of A generates a canonical sequence with an unique 1 and period
T = 2LA − 1, see [11].
Once the nonlinear function F given in its A.N.F. has been converted into its
minterm expansion, the basic ideas of this work can be summarized as follows:
1. The number of minterms in the representation of F equals the number of 1 s
in the output sequence as every minterm provides the generated sequence
with an unique 1.
2. The contiguity of such minterms in the ordered minterm succession determines the run distribution in the output sequence.
Let us now generalize the previous statements to more than one LFSR. Let
A, B, ..., Z be N LFSRs whose lengths are respectively LA , LB , ... , LZ (supposed GCD(Li , Lj ) = 1, i = j). We denote by ai (i = 1, ..., LA ), bj (j =
1, ..., LB ), ... , zk (k = 1, ..., LZ ) their corresponding stages. The global minterms
associated with the generator have now LA + LB + ... + LZ variables and are
of the form, e.g. Aij Bpqr ... Zs , that is to say the ordered product of the individual minterms of each LFSR. As before every global minterm considered as

624

A. F´
uster-Sabater, P. Caballero-Gil, and O. Delgado-Mohatar

a generator applied to the stages of the LFSRs generates a sequence with an
unique 1 and period T = (2LA − 1)(2LB − 1) ... (2LZ − 1) [11]. In brief, every
LFSR-based generator can be expressed in terms of its global minterms as well
as global minterms determine balancedness and run distribution in the output
sequence.

3

From A.N.F. to Global Minterm Expansion

Previously to the conversion algorithm, the following facts are introduced:
Fact 1: For every Boolean function F the following equality holds [10]
F = ΦF ◦ ΦF

(1)

where the symbol ◦ denotes the composition of functions.
Fact 2: For every LFSR A, the exclusive-OR of all the minterms [11] is:
A12...LA ⊕ A12...LA −1 ⊕ ... ⊕ A2...LA ⊕ ... ⊕ ALA ⊕ ... ⊕ A2 ⊕ A1 = 1.

(2)

The previous equation can be rewritten as:
A1 ⊕ A1 = 1.

(3)

On the other hand, the total number of terms in (2) is:
LA
i=1

LA
i

= 2LA − 1

(4)

while the number of terms in A1 = a1 a2 ... aLA is [10]:
Nt (A1 ) = 2LA −1 .

(5)

Thus, the number of terms in A1 will be:
Nt (A1 ) = 2LA −1 − 1.

(6)

Appropriate notation will be used for the rest of LFSRs.
3.1

Conversion Algorithm

Input: N (number of LFSRs), LA , LB , ..., LZ (lengths of the LFSRs) and a
nonlinear function F in A.N.F.
For instance, NZ = 2, LA = 2, LB = 3 and F (a1 , a2 , b1 , b2 , b3 ) = a1 b1 .
– Step 1: Compute ΦF

ΦF = A1 B1 .

Deterministic Computation of Pseudorandomness in Sequences

625

– Step 2: Substitute every minterm by its corresponding function in A.N.F.
and cancel common terms (if there exist)
ΦF = (a1 a2 ⊕ a1 )(b1 b2 b3 ⊕ b1 b2 ⊕ b1 b3 ⊕ b1 ) =
a1 a2 b 1 b 2 b 3 ⊕ a1 a2 b 1 b 2 ⊕ a1 a2 b 1 b 3 ⊕ a1 a2 b 1 ⊕
a1 b 1 b 2 b 3 ⊕ a1 b 1 b 2 ⊕ a1 b 1 b 3 ⊕ a1 b 1 .
– Step 3: Compute F (ai , bj ) = ΦF ◦ ΦF
F (ai , bj ) = ΦF ◦ ΦF = A12 B123 ⊕ A12 B12 ⊕ A12 B13 ⊕ A12 B1 ⊕
A1 B123 ⊕ A1 B12 ⊕ A1 B13 ⊕ A1 B1 .
Output: F expressed in terms of its global minterms.
Once the function F has been expressed in terms of its minterms, balancedness
and run distribution in the output sequence can be analyzed.

4

Balancedness in the Keystream Sequence

The number of 1’s in the generated sequence coincides with the number of global
minterms in the expression of F or, equivalently, the number of terms in ΦF (Step
2 ). An illustrative example of application is presented.
4.1

A Numerical Example

Example 1 : Let A, B, C be three LFSRs of lengths LA , LB , LC respectively. The
generating function is chosen:
F = a 1 b 1 ⊕ b 1 c1 ⊕ c1

(7)

(Geﬀe’s generator [13]) and the minterm function ΦF is computed:
ΦF = A1 B1 ⊕ B1 C1 ⊕ C1
= A1 B1 (C1 ⊕ C1 ) ⊕ (A1 ⊕ A1 )B1 C1 ⊕
⊕(A1 ⊕ A1 )(B1 ⊕ B1 )C1
= A1 B1 (C1 ⊕ C1 ) ⊕ (A1 ⊕ A1 )B1 C1 .
The number of 1 s in the output sequence can be directly obtained by counting
the number of terms in ΦF via the equations (5) and (6). According to this simple
rule, the number of 1 s in the output sequence obtained from a Geﬀe’s generator
is given by:
N o. 1 s = 2LA −1 2LB −1 (2LC − 1) + (2LA − 1)(2LB −1 − 1)2LC −1 .

(8)

Remark that the previous expression is function exclusively of the lengths of the
120, and keeping in mind that the
LFSRs. In a practical range, we say Li
sequence period is T = (2LA − 1)(2LB − 1)(2LC − 1), the number of 1 s in the
output sequence is:
N o. 1 s

T /2.

Consequently, the generated sequence is balanced.

626

5

A. F´
uster-Sabater, P. Caballero-Gil, and O. Delgado-Mohatar

Run Distribution in the Keystream Sequence

The computation of runs in the output sequence is based on the following result.
Proposition 1. Let us consider the ordered minterm succession of a maximal
length-LFSR of length L. If the minterms including an arbitrary index i are
replaced by 1 and the minterms not including the index i are replaced by 0, then
the resulting binary sequence is the reverse version of the PN-sequence generated
by the LFSR.
The previous result is a straight application of the LFSR linear recurrence relationship given by its characteristic polynomial. Thus, a minterm succession can
be treated as a PN -sequence. Now, keep in mind the following remarks:
1. The number of runs of any length of a PN -sequence is perfectly quantiﬁed.
Indeed, each m-gram (every one of the 2m possible conﬁgurations of m bits
(m = 1, ..., L)) will appear exactly 2L−m times throughout the PN -sequence
except for the L-gram 00 . . . 0 that will not appear any time.
2. In the global minterm succession each m-gram of any LFSR will coincide
once with each one of the m-grams of the other LFSRs.
Based on these considerations, the computation of runs in the output sequence
can be carried out as it is shown in the following example.
Example 2 : For two LFSRs, A and B, of lengths LA and LB respectively (LA
< LB ) and generating function F = a1 b1 , we proceed:
ΦF = A1 B1 = (a1 ⊕ a1 a2 ⊕ . . . ⊕ a1 a2 . . . aLA )(b1 ⊕ b1 b2 ⊕ . . . ⊕ b1 b2 . . . bLB )
F = ΦF ◦ ΦF = (A1 ⊕ A12 ⊕ . . . ⊕ A12...LA )(B1 ⊕ B12 ⊕ . . . ⊕ B12...LB )
Notice that the minterm expansion of F will only include products of individual
minterms with the index 1. Let us now introduce the following notation:
Y denotes an arbitrary minterm of A or B including the index 1.
N denotes an arbitrary minterm of A or B not including the index 1.
SecA denotes the ordered succession of minterms of A in format Y /N .
SecB denotes the ordered succession of minterms of B in format Y /N .
It is clear that an 1 in the output sequence corresponds to a minterm product
Y Y (for example, A1 B12 ) while a 0 in the output sequence corresponds to the
minterm products Y N, N Y or N N (for example, A1 B2 , A23 B13 or A3 B2 ). See
the formation rule in Table 1.
Now we can compute the number of runs of diﬀerent lengths.
Table 1. Global minterm formation rule for F in Example 1
SecB
Y
N
Y
N

SecA
Y
Y
N
N

Output bit
1
0
0
0

Deterministic Computation of Pseudorandomness in Sequences

5.1

627

Runs of Length 1

Blocks: They are runs of the form ”0 1 0” that come from minterm structures
SecB : ∗ Y ∗
SecA : ∗ Y ∗
The symbol ∗ denotes Y or N . The 3-gram N Y N will appear 2LA −3 times
in SecA and 2LB −3 times in SecB, the 2-gram N Y ∗ will appear 2LA −2 times in
SecA and 2LB −2 times in SecB, and so forth.
The diﬀerent conﬁgurations of minterms able to generate a block of length 1
are depicted in Table 2 at columns with heading ”Conﬁgurations”. The columns
with heading ”No. of conﬁg.” show the number of times that such conﬁgurations
appear on their corresponding minterm sequences.
Thus, the number of blocks of length 1 will be the sum of all suitable conﬁgurations multiplied by the number of times that such conﬁgurations appear
NB (1) = (2LB −1 + 2 · 2LB −2 + 2LB −3 ) 2LA −3 .

(9)

Gaps: They are runs of the form ”1 0 1” that come from minterm structures
SecB : Y ∗ Y
SecA : Y ∗ Y
The diﬀerent conﬁgurations of minterms able to generate a gap of length 1
are depicted in Table 3.
Thus, the number of gaps of length 1 will be the sum of all suitable conﬁgurations multiplied by the number of times that such conﬁgurations appear
NG (1) = (2LB −3 + 2LB −2 ) 2LA −3 .

(10)

Table 2. Configurations of minterms producing blocks of length 1

SecB
SecA
SecB
SecA

Configuration No. of config. Configuration No. of config.
∗Y ∗
2LB −1
∗ Y N
2LB −2
LA −3
NY N
2
NY Y
2LA −3
NY ∗
Y Y N

2LB −2
2LA −3

NY N
Y Y Y

2LB −3
2LA −3

Table 3. Configurations of minterms producing gaps of length 1
SecB
SecA

Configuration No. of config. Configuration No. of config.
Y NY
2LB −3
Y ∗ Y
2LB −2
LA −3
Y Y Y
2
Y NY
2LA −3

628

5.2

A. F´
uster-Sabater, P. Caballero-Gil, and O. Delgado-Mohatar

Runs of Length n

The procedure can be generalized in order to compute the number of runs of
length n (n = 1, ..., LA − 2).
Blocks: They are runs of the form ”0 1 . . . 1 0” (with n consecutive 1 s) coming
out from minterm structures
SecB : ∗ Y . . . Y ∗
SecA : ∗ Y . . . Y ∗
with n minterms Y in both sequences. The diﬀerent conﬁgurations able to generate a block of length n and their number are depicted in Table 4.
Thus, the number of blocks of length n will be:
NB (n) = (2LB −(n+2) + 2 · 2LB −(n+1) + 2LB −n ) 2LA −(n+2) .

(11)

Gaps: They are runs of the form ”1 0 . . . 0 1” (with n consecutive 0 s) coming
out from minterm structures
SecB : Y ∗ . . . ∗ Y
SecA : Y ∗ . . . ∗ Y
with n symbols ∗ in both sequences. Notice that in SecA there will be 2n diﬀerent
conﬁgurations able to generate a gap of length n ranging from Y N . . . N Y up
to Y Y . . . Y Y . Some of such conﬁgurations and their number are depicted in
Table 5.
Thus, the number of gaps of length n will be:
n

NG (n) = (
i=0

n
i

2LB −(n+2−i) ) · 2LA −(n+2) .

(12)

Therefore, the number of runs of any length up to LA − 2 can be easily
computed in the proposed example. Equations (11) and (12) give us the exact
Table 4. Configurations of minterms producing blocks of length n

SecB
SecA

Configuration
N Y ... Y N
Y Y ... Y Y

No. of config.
2LB −(n+2)
2LA −(n+2)

Configuration
∗ Y ... Y N
N Y ... Y Y

SecB
SecA

N Y ... Y ∗
Y Y ... Y N

2LB −(n+1)
2LA −(n+2)

∗ Y ... Y ∗
N Y ... Y N

No. of config.
2LB −(n+1)
2LA −(n+2)
2LB −n
LA −(n+2)

2

Table 5. Configurations of minterms producing gaps of length n
SecB
SecA

Configuration No. of config. Configuration No. of config.
Y ∗ ... ∗ Y
2LB −2
Y N ... N Y
2LB −(n+2)
LA −(n+2)
Y N ...N Y
2
Y Y ... Y Y
2LA −(n+2)

Deterministic Computation of Pseudorandomness in Sequences

629

Table 6. Numerical example
n No. of blocks %Deviation(blocks) No. of gaps %Deviation(gaps)
1
4608
13,8 %
1536
62,0 %
2
1152
43,1 %
1152
43,1 %
3
288
71,5 %
864
14,6 %
4
72
85,7 %
648
28,1 %
5
18
92,8 %
486
92,1 %

number of blocks and gaps that can be found in the output sequence. Remark
that NB and NG depend exclusively on the LFSR’s lengths LA and LB and
on the run length (n). There is no dependency on the primitive characteristic
polynomials. Consequently, diﬀerent LFSRs of the same length primitive characteristic polynomials will produce output sequences with the same number of
blocks and gaps.
According to these expressions, it can be seen that the analyzed function
F does not match the expected values. For a numerical example LA = 7 and
LB = 8, see results in Table 6. For n = 1, NB > NG . For n = 2, equations (11)
and (12) coincide. For n ≥ 3, NB < NG . As expected, there are more gaps than
blocks because the formation rule in Table 1 is not balanced.
The upper limit LA − 2, LA being the length of the shortest LFSR, follows
from the fact that blocks and gaps of length n include n + 2 bits but we can
only guarantee the presence of at most LA -grams. At any rate, the designer of
keystream generators is basically interested in the runs of low length (e.g. up to
length 15) while in, for instance, cryptographic applications every LFSR length
takes values in the range Li 120.

6

Conclusions

An easy and eﬃcient method of checking the degree of balancedness and number
of runs in the output sequence of keystream generators has been presented.
From the concept of global minterm, it is possible to derive general expressions
for the number of 1 s (0 s) as well as for the number of runs in the output
sequence of any LFSR-based generator. Then, the obtained values are compared
with the expected values for a sequence to be pseudorandom. The result of this
comparison implies the assessment of such a sequence generator.
In this work, such a method has been applied exclusively to nonlinear generating functions. Nevertheless, these ideas concerning the analysis of the global
minterms seem to be suitable for more general pattern generators. Consider, for
instance, the multiple-speed generators [11] that can be expressed in terms of a
more complex generating function or the shrinking generator [11] whose global
minterms can be obtained by removing certain individual minterms from one of
the LFSRs. In both cases, the developed method can be adapted and applied to
these schemes in order to evaluate certain aspects of pseudorandomness in the
generated sequences.

630

A. F´
uster-Sabater, P. Caballero-Gil, and O. Delgado-Mohatar

References
1. Bluetooth, Specifications of the Bluetooth system, Version 1.1 (February 2001),
http://www.bluetooth.com/
2. Caballero-Gil, P., F´
uster-Sabater, A.: A Wide Family of Nonlinear Filter Functions
with a Large Linear Span. Inf. Sci. 164, 197–207 (2004)
3. F´
uster-Sabater, A., Garc´ıa-Mochales, P.: On the Balancedness of nonlinear generators of binary sequences. Inf. Process. Lett. 85, 111–116 (2003)
4. F´
uster-Sabater, A., Caballero-Gil, P.: Linear solutions for cryptographic nonlinear
sequence generators. Phys. Lett. A. 369, 432–437 (2007)
5. Grassman, W.K., Trembley, J.P.: Logic and Discrete Mathematics. Prentice-Hall,
New York (1996)
6. Golomb, S.W.: Shift Register-Sequences. Aegean Park Press, Laguna Hills (1982)
7. GSM, Global Systems for Mobile Communications,
http://cryptome.org/gsm-a512.htm
8. Kanso, A.: Clock-Controlled Shrinking Generator of Feedback Shift Registers. In:
Safavi-Naini, R., Seberry, J. (eds.) ACISP 2003. LNCS, vol. 2727, pp. 443–451.
Springer, Heidelberg (2003)
9. Klapper, A.: Large Families of Sequences with Near Optimal Correlations and
Large Linear Span. IEEE Trans. Inf. Theory. 42, 1241–1248 (1996)
10. Mange, D.: Analysis and Synthesis of Logic Systems. Artech House, Inc., Norwood
(1986)
11. Menezes, A.J., et al.: Handbook of Applied Cryptography. CRC Press, New York
(1997)
12. Shparlinski, I.E.: On the Linear Complexity of the Power Generator. Design, Codes
and Cryptography 23, 5–10 (2001)
13. Simmons, G.J. (ed.): Contemporary Cryptology: The Science of Information Integrity. IEEE Press, New York (1991)

