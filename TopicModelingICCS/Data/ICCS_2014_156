Procedia Computer Science
Volume 29, 2014, Pages 310–321
ICCS 2014. 14th International Conference on Computational Science

Evolving Agent-based Models Using Complexiﬁcation
Approach
Michael Wagner1 , Wentong Cai2 , Michael H. Lees3 , and Heiko Aydt1
1

2

TUM CREATE, 1 Create Way,
Singapore 138602
School of Computer Engineering, Nanyang Technological University,
Singapore 639798
3
Informatics Institute, University of Amsterdam,
Science Park 904, 1098 XH Amsterdam, the Netherlands

Abstract
This paper focuses on parameter search for multi-agent based models using evolutionary algorithms. Large numbers and variable dimensions of parameters require a search method which
can eﬃciently handle a high dimensional search space. We are proposing the use of complexiﬁcation as it emulates the natural way of evolution by starting with a small constrained search
space and expanding it as the evolution progresses. We examined the eﬀects of this method on
an EA by evolving parameters for two multi-agent based models.
Keywords: Evolutionary Computing, Agent-based Simulation, Modelling, Artiﬁcial Life

1

Introduction

Agent-based models (ABMs) are among the most important tools for exploring emergent behavior, a phenomenon that describes the behavior of a system, which cannot be explained alone
by the sum of its parts. Understanding and harnessing emergence is very important because
it allows to create complex behavior, based on the interaction between relatively simple components. One way to discover and examine emergence in a computer simulation is to calibrate
the model parameters accordingly. Underlying models often encompass a wealth of parameters,
making the search of the sheer size of multi-dimensional space a problem. Due to interdependence and interaction between agents, slight changes in the model conﬁguration can amount to
very diﬀerent simulation outcomes, indicating the high level of complexity. Even though Evolutionary Algorithms (EAs) are often designed and used to eﬃciently explore large parameter
spaces, traversing those can still take a considerable amount of time. In this paper we propose
the use of complexiﬁcation to improve the performance of EAs used for parameter estimation
of multi-agent based models. In an earlier work [12] we gave evidence that evolving parameters
is directly inﬂuenced by the model’s complexity. Therefore it is essential for EAs to be ﬂexible
310

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.028

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

enough to handle complex models. Traditional EAs are forced to make assumptions about the
problem. Properties like the length and structure of genomes have to be determined a priori and
cannot be changed during the EA run. However, complex systems can have a variable number
and structure of parameters. Rule-based ABMs face the same issues. Rules can consist of an
arbitrary number of components like conditions and actions. This makes ﬁnding optimized
solutions very diﬃcult if those require a large number of components or complex rule sets.
Natural evolution is far more than just a cycle of recombining and mutating genes. In
order to advance from basic single-cell lifeforms to complex organisms, the genotype of species
has to be extended [3, 4]. Complexiﬁcation is a substantial part of this process as it allows
for an organism to increase its genome size and to become more versatile. By incrementally
adding new genes organisms can, over time, adapt to their environment and develop further
characteristics or skills. In nature this happens by gain-of-function mutation, a type of mutation
that increases the genome size and confers new properties and eventually new functionality to
the organism. The increase in size most commonly happens by a random duplication of parts
of the genome.
By using complexiﬁcation repeatedly the evolutionary process can cover a wider variation of
potential traits and functions of the individuals subjected to it. We believe that complexiﬁcation, as a form of incremental evolution, is able to improve the estimation of model parameters.
We want to validate this by conducting experiments on two multi-agent based models where we
test an Evolution Strategy against a redesigned version of itself which incorporates complexiﬁcation. This allows for a direct comparison of the evolutionary techniques.
In the following parts of our work we ﬁrst provide a short overview on the evolution of
model parameters for ABM and complexiﬁcation. Secondly, in section 3 the benchmark models
for testing our complexifying EA are introduced, followed by a description of the EA and its
mechanics itself in section 4. Finally in section 5 our experiments are described and concluded
with a discussion.

2

Related Work

Evolution of model parameters in multi-agent based models has been pioneered in [6] and [13],
among others. It is very useful as a tool to conﬁgure and explore the real life systems, which
the models are based on. One of the major applications of it is to detect and explore emergent
behavior that may arise. Emergent behavior is a phenomenon that requires and indicates the
level of complexity of a natural or artiﬁcial system. In connection with ABMs it has recently
been experimented with by [11]. In [12] the evolution of boid model parameters for discovering
forms of emergence, in relationship to an objective ﬁtness measure, was described. Furthermore
it was discussed how the model complexity inﬂuences this process and what challenges it holds.
We learned from this work that, while leaving the ﬁtness measure unchanged, extending the
model detail and thus increasing the number of possible conﬁgurations may have negative eﬀects
on the parameter evolution. The present work continues this train of thought and argues how the
apparent diﬃculties can be approached. Complexiﬁcation with regard to EAs has been applied
almost exclusively in evolving artiﬁcial neural networks (ANNs) [9], beneﬁting from their easily
modiﬁable graph-like structure. Other applications include the evolution of strategies for single
3D agents [10] successfully proved the superiority of incremental evolution by evolving the
weights rather than structure of the ANN that is controlling the agents movement.
311

Evolving Agent-based Models Using Complexiﬁcation Approach

3

Wagner, Cai, Lees and Aydt

Agent-based Models for Experimentation

We chose two multi-agent based models to test our hypothesis: the boid model, introduced in [5]
and its further development, the bee swarm model. The models we use are able to represent
multiple species of agents to study cooperative and competitive behavior, which are important
factors in the creation of emergence. The emphasis is put especially on their eﬀect on the
survival rate of the boids.

3.1

Boid Model

Our customized boid model, as described in [12], contains a simple predator-prey scenario.
Additionally to the boids, which are now considered prey, it also involves predators and food
sources for the boids, thus creating a simple food chain. The goal for which to optimize
the model parameters, is to maximize the boid survival chance by having them graze the food
sources and evade the predators as eﬃciently as possible. To add more strategic depth, the boids
can be grouped in up to three diﬀerent species where all members of one species have identical
parameters. However, diﬀerent species can have diﬀerent parameters. This is a generalization
of cooperation between multiple species as it occurs in nature among certain kinds of birds [7],
among others. These species ignore each other by default when it comes to ﬂocking behavior,
but there are ﬂags, called “alliances”, which can be set to enable collective ﬂocking. Boid
species have two options: either cooperate or to try to survive on their own. For this model we
deﬁne a ﬁtness function fsurvived (x) in equation 1 as the number of boids which are still alive
after the simulation terminates at simulation time tstop . The argument x hereby denotes the
parameter vector that will be used to initialize the simulation.
fsurvived (x) = |b ∈ aliveBoidststop |

(1)

The challenge now is to ﬁnd the following parameters, contained in vector x, so that f (x)
is optimized:
1. The number of diﬀerent boid species (in this case ranging from 1 to 3)
2. The ﬁve parameters regarding movement and ﬂocking behavior: avoidance, convergence,
cohesion, momentum and sensor range
3. The alliance ﬂags between the boid species

3.2

Bee Swarm Model

We transformed the boids to a swarming model and added dependencies between them to make
it more suitable for exploring complexiﬁcation. According to its name, the model attempts to
give a simpliﬁed presentation of how a bee swarm works. Firstly, the bees all originate from a
hive, centered in the simulated world. In order to sustain their colony it is necessary to look for
food, forage it and return it to the hive. The bees are facing two challenges here: food sources
e.g., ﬂowers, vary in the amount of food they provide and there are competitors present, eager
to steal food from the hive.
Similar to the boid model, bees can be also divided into species. This emulates the natural
division of labor into workers and drones. In contrast to nature, the groups can choose their
312

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

specialization by distributing points into three diﬀerent skills: foraging, scouting and defending.
Each skill may have between 0 and 10 points invested and has been artiﬁcially equipped with
artiﬁcial caveats and beneﬁts to create trade-oﬀs and avoid the generation of perfect boids.
Foraging skill increases carrying capacity but penalizes defense while the defending ability acts
conversely. Scouting ability beneﬁts sensory range and movement speed, but takes away from
both, defense and foraging skills. These are the most important evolvable parameters in our
model as they strongly inﬂuence the bees behavior. The number of bee groups as well as their
share in the total bee population are two more evolvable parameters. Remaining parameters are
the following ﬁve, similar to the predator-prey boid model: avoidance, convergence, cohesion,
momentum and size of neighborhood.The challenge here is to ﬁnd the following parameters, so
that a given ﬁtness function fgathered (x) in equation 2 is optimized:
1. The number of diﬀerent bee groups (in this case ranging from 1 to 3)
2. The share of bees per group
3. The skill distribution per group
4. The ﬁve parameters regarding grouping behavior, as mentioned above
For our experiments we use a relative food gathering ﬁtness fgathered (x), which expresses
the relationship between gathered food and lost or spent food. Similarly to the boid model,
f (x) is to be maximized.

fgathered (x) =

gatheredF ood(hive)
spentAndLostF ood(hive)

(2)

The relative food gathering ﬁtness.

4

Complexiﬁcation in Evolutionary Algorithms

The essence of complexiﬁcation is to improve the potential ﬁtness of individuals by gradually
extending their genome size or structure to allow for more diversity and more possible directions
to evolve, including specialization or improvement of existing features. Typically this will
be achieved by increasing genotype size or changing the relationship between genotype and
phenotype. The latter option means not to have a one-to-one relation between both, but rather
a n-to-one relationship where genes can be reused and inﬂuence more than one phenotypical trait
at the same time. The ﬁrst option directly translates into adding more possible combinations
of genes.
The minimum requirement for integrating complexiﬁcation into an EA is a mechanism to
extend the genome (see ﬁgure 1) and to ensure that crossover operations between EA individuals, which have been altered by complexiﬁcation, are handled in a meaningful way [9]. The
latter is especially important since a crossover may encounter individuals of diﬀerent genome
length, resulting from complexiﬁcation. In that case there are diﬀerent ways to execute the
crossover, which include only matching genes common in both chromosomes or by a randomized method, among others. The diﬃculty here is to make sure that the resulting chromosome
is valid. Another option would be to only allow crossover between chromosomes of the same
length. In the following we brieﬂy describe how complexiﬁcation is supposed to work within
the EA and give details about our implementation.
313

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

Start
terminate
initialize evolutionary
evolu
algorithm
yes

for each individual
ndividu in EA
A
population: complexify
with a fixed chance

for each individual
ndividu in EA
population: initialize
ABM with its parameters
and evaluate simulation

no

termination
condition
reached?

perform selection,
mutation and
recombination of fittest
re
individuals

Figure 1: Scheme of evolutionary algorithm, entry point of complexiﬁcation highlighted in red.

To implement and integrate complexiﬁcation into our existing EA the following adjustments
have to be made. Firstly, it has to be determined whether the chromosomes of the EA individuals are extendable and, if so, how the extension should be performed. As mentioned earlier,
both scenarios use a real-valued representation which encodes the parameters for up to three
groups of boid or bee agents, respectively to the scenario. The minimum requirement for a
valid chromosome is an ability to encode at least one agent group. Based on this we can deﬁne
the extension of a chromosome as the addition of genes that are necessary to encode another
agent group. Secondly, we have to deﬁne how the extension of individuals is handled by the
EA. Like in nature complexiﬁcation will occur randomly, more precisely every individual has a
chance per generation to be extended. This chance is equal for all individuals and set before
the EA starts. In section 5 we will experiment with complexiﬁcation chances of 1%, 5%, 10%
and 30% per individual per generation to compare the eﬀects of diﬀerence chances. Finally,
the crossover has to be altered in order to be able to operate on a population with varying
chromosome lengths. In this work we decide to modify the selection to allow an individual to
only be crossed with another individual that has a genome of equivalent length. This way the
diﬃculty of how to interbreed chromosomes of unequal length can be ignored. Interbreeding
would necessitate a mechanism to decide how to treat genes of one parent without a counterpart
in the other parent, if both are of diﬀerent chromosome length.
As in [12] for the boid model, we again use the Java-based simulation framework MASON [1]
to create the bee simulation. Likewise, the EA framework ECJ [2] is used again for evolving
the model parameters. A disadvantage there is that the framework does not actively support
a variable length of real-valued vector individuals. To compensate for this shortcoming, we
supply all EA individuals with a full set of genomes, capable of encoding the maximum number
of boid or bee groups. Depending on the complexity level, which is contained in one of the
alleles, only the necessary parts of the genotype will actually be used and evaluated, as seen in
ﬁgure 2.
314

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

Initial state:
actually used part of the
chromosome

1

2

3

4

…

n

1

genes for first species

2

3

4

…

n

1

genes for second species

2

3

4

…

n

genes for third species

After first complexification:
actually used part of the chromosome

1

2

3

4

…

n

genes for first species

1

2

3

4

…

n

1

genes for second species

2

3

4

…

n

genes for third species

After second complexification:
actually used part of the chromosome

1

2

3

4

…

genes for first species

n

1

2

3

4

…

n

genes for second species

1

2

3

4

…

n

genes for third species

Figure 2: Complexiﬁcation of an EA individual (chromosome string) in our boid and bee
experiments.

5

Experiments and Results

In the following we will discuss the two experiments that had been conducted in order to validate
the hypothesis. For each experiment a Monte-Carlo search was also executed, by sampling
randomly generated solutions. This allows us to make assumptions about the distribution and
ﬁtness of the solutions in the search space. The ﬁrst experiment concerns a model, that has
already been explored by EA in [12], and will be explored now again with the aim to show
how complexiﬁcation can improve the results. Meanwhile the second experiment is supposed
to illustrate the eﬃciency of self-adapting complexiﬁcation over conducting multiple separate
EA runs.

5.1

Boid Model

The survival scenario is, to a great extent, identical to the one described in [12]. There the
EA was unable to ﬁnd solutions for the two- and three-species conﬁguration that were of equal
quality as the ones found for the one-species conﬁguration, even though the solutions of the
latter are contained within the search spaces of all three conﬁgurations. In short: if every species
in a multi-species solution has the same parameters, they will act as one species. Therefore
every parameter search for a multi-species solution has the potential to reach a ﬁtness of the
same or better quality as a one-species solution. To summarize, the objective here is to show the
eﬀectiveness of complexiﬁcation, as it is supposed to be able to explore the search space more
efectively and produce multi-species solutions with at least the same ﬁtness as single species
315

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

Figure 3: Monte Carlo Search on the survival scenario

solutions.
Monte-Carlo Search Since there are 70 boids in the scenario, the best ﬁtness achievable
is 70, given all of them survive. Our random search, as depicted in Figure 3, with a sample
size of 250000 found solutions with ﬁtness results of up to 67. This indicates that it is possible
to ﬁnd near perfect solutions. However, more than 90% of all samples do not exceed a ﬁtness
of 20. Therefore the major part of the solution space contains very weak solutions. This also
becomes evident by the very low average ﬁtness, as seen in table 1. Like the EA in [12], the
best individual is a one-species solution. But on average the two-species solutions come out the
strongest with three-species solutions as the second best.
complexity level
1
2
3

average ﬁtness
1.33
3.03
1.44

highest ﬁtness
67.8
40.48
28.6

Table 1: Survival Scenario: Average and best ﬁtness results of random search.

Evolutionary Algorithms In our experiments we are using four diﬀerent complexiﬁcation
probabilities. These are indicating the chance for an individual to increase its complexity every
generation. The chances we used are: 1%, 5%, 10% and 30%. Higher values accelerate the
complexiﬁcation process and push the EA population faster towards higher complexity. Lower
values on the other hand allow for more thorough exploration of low complexity levels by exerting less pressure on increasing the complexity. Both ways have advantages and disadvantages.
So, it is important to ﬁnd a middle ground between too high and too low of a complexiﬁcation chance, which can maximize the quality of their solutions. If we compare random search
and EA runs we can observe the weakness of the default EA compared to the version with
complexiﬁcation, as seen in Tables 2 and 3.
The comparison between the two conﬁgurations shows that complexiﬁcation is superior to
the default EA in both, average and maximum ﬁtness values. One signiﬁcant shortcoming of
the EA described in [12] was the incapability to ﬁnd high quality solutions within the space
316

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

Figure 4: Left: survival scenario without complexiﬁcation, right: with complexiﬁcation
dotted lines are standard deviation
ﬁxed complexity level
1
2
3

highest ﬁtness
39.4
29.0
31.0

avg. ﬁtness
24.2
20.8
20.7

Table 2: Survival Scenario: Average and best ﬁtness results of the EA without complexiﬁcation

of multi-species individuals, even though they existed. With added complexiﬁcation the EA is
now able to ﬁnd multi-species individuals that are qualitatively comparable to the one-species
individuals. Another aspect is the population dynamic, in ﬁgure 5 we can see how a high
chance complexiﬁcation changes the composition of the population from entirely one-species
individuals gradually to a majority of three-species individuals in the end.

5.2

Bee Swarm Model

The second series of experiments was conducted with the bee swarm model. In contrast to the
boid model this one has been designed to require multiple bee species for achieving high quality
solutions. What this means is that solutions with two and three species enable the bees to have
more than just one forager or defender species and thus provide better strategies for the bees
to fulﬁll their tasks as stated in section 3.2. As a result solutions with two or three bee species
should be preferred by the EA. The objective here is to show that complexiﬁcation can deliver
a solution, with the same quality and in shorter time as an EA without complexiﬁcation that is
only searching on one speciﬁc complexity level at a time. At the beginning of the simulation 25
bees are placed on the two-dimensional ﬁeld. The competitors spawn randomly, with a chance
of 1% for one competitor per simulation tick, for a total duration of 3000 simulation steps. The
ﬁtter the bee skill sets are, the more eﬃciently they can keep their competitor numbers small
and away from their hive, where their food reserves are stored.
Monte-Carlo Search Similar to the boid model we executed a random search to get an idea
of the shape and structure of the ﬁtness landscape. The result of 200000 samples indicates that
317

Evolving Agent-based Models Using Complexiﬁcation Approach

complexiﬁcation chance
1%
5%
10 %
30 %

highest ﬁtness
72.0
71.0
70.4
69.2

complexity
1
1
2
3

Wagner, Cai, Lees and Aydt

avg. ﬁtness
35.0
28.1
23.3
27.2

Table 3: Survival Scenario: Average and best ﬁtness results of the complexiﬁcation runs

Figure 5: Survival Scenario:
light colors - relationship between number of individuals with respective complexity level
dark colors - relationship between ﬁtness of individuals with respective complexity level

the ﬁtness landscape for the most part consists of very low-ﬁtness individuals. The parameter
conﬁgurations of the samples suggest that solutions with higher ﬁtness are mostly symmetrical,
e.g., the bee species have similar parameters while the chromosome contains them in a diﬀerent
order. As a conclusion this indicates that there are more than one global optima. The random
search shows how diﬃcult it is to ﬁnd individuals with above average ﬁtness. Even though the
best individual found has a ﬁtness of 135856 the average ﬁtness of all samples is vanishingly
small, as seen in Table 4. This is a signiﬁcant discrepancy, caused by the huge amount of
samples with a low ﬁtness as seen in Figure 6. Note that the x-axis starts with the ﬁtness 2,
because the number of individuals with ﬁtness 0 and 1 are too large to be depicted on scale.
This is even more emphasized by the very low frequency of ﬁtter individuals found, as seen in
those ﬁgures.
complexity level
1
2
3

average ﬁtness
4.01
64.27
26.81

highest ﬁtness
8762
135856
125523

Table 4: Gathering Food Scenario: Average and best ﬁtness results of random search.

318

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

Figure 6: Random Search on the gathering food scenario. The inner diagram starts at x=2 and
has a diﬀerent scaling to show the huge diﬀerence in numbers between individuals with ﬁtness
of 0 or 1 and individuals with higher ﬁtness.
Experiments For the following experiments the EA used a population of 50 individuals and
evolved them over a span of 100 generations. The simulation to evaluate an individual’s ﬁtness
is repeated as often as necessary for the standard error of the samples to fall below a predeﬁned
value. Each EA run is repeated 5 times and the results show the average over the repetitions.
Similar to the survival experiment, we again use EAs with four diﬀerent complexiﬁcation probabilities. Here we can observe interesting behavior: even though the average ﬁtness
achieved with the complexiﬁcation is lower than that with the EA without complexiﬁcation
(see ﬁgure 7), the highest ﬁtness-es is on an equal level (see tables 5 and 6). The advantage of
complexiﬁcation here is that its search covers the space of all complexity levels and therefore
does not need to run separate EAs for diﬀerent complexity levels. This is even more important
when the model incorporates far more than just three diﬀerent complexity levels. The only
challenge here is to ﬁnd a balanced complexiﬁcation chance, high enough to drive the EA population towards more complexity to expand the search to more areas on the one hand and low
enough to allow for a thorough exploration of low complexity conﬁgurations on the other hand.
ﬁxed EA complexity level
1
2
3

highest ﬁtness
6554
297926
337406

average ﬁtness
421
81055
158102

Table 5: Gathering Food Scenario: Best ﬁtness results of the EA without complexiﬁcation
The best solutions the EA with ﬁxed complexity levels could ﬁnd, of two and three species
respectively, were nearly identical. They basically divided the bees into a forager and a defender
group with a ratio of 1/3 being defenders and 2/3 foragers. Even within the individuals that
contained three species, the third one was limited to one or none bees, which leaves it’s inﬂuence
negligible. In contrast, the complexiﬁcation showed a wider variation in behavior. The third
species, while still a minority, were able to reach up to 10% of the populations share and had
thereby more inﬂuence on the behavior as a whole. Furthermore, defending bees were not only
319

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

Figure 7: Gathering Food Scenario: left - survival scenario with standard EA, right - with
complexiﬁcation
complexiﬁcation chance
1%
5%
10 %
30 %

highest ﬁtness
305547
245079
261772
291573

complexity
2
2
3
3

average ﬁtness
28116
17551
42588
48197

Table 6: Gathering Food Scenario: Best ﬁtness results of the complexiﬁcation runs

wandering around the proximity of the hive to intercept possible opponents, as they did in the
ﬁxed complexity EA runs, but could also stay put at a certain position to act as sentinels rather
than moving guards.

6

Discussion and Future Work

We conducted experiments on two multi-agent based models to examine the eﬀects of complexiﬁcation. Both models beneﬁted from its use, be it in the increase of ﬁtness or a higher diversity
in the resulting emergent behavior. The experiments in our work demonstrate that complexiﬁcation improves evolutionary algorithms when it comes to genomes with variable length and
complexity. Due to its adaptive nature it can explore a search space more dynamically by purposefully altering the individual’s gene complexity to respond to the challenges of the problem
at hand. A challenge here is to ﬁnd a suitable complexiﬁcation chance for the individuals as it
can have considerable eﬀects on the algorithm. It is an issue of balancing a too high and too
low complexiﬁcation pressure. In order to further guide the complexiﬁcation and enhance its
performance, several measures can be taken. One of them is simpliﬁcation, a reverse of complexiﬁcation. It allows individuals to decrease their complexity levels, in case that more simple
genomes have higher chances of success. This can also alleviate a very high complexiﬁcation
pressure. Another enhancement can be pattern producing networks [8]. Rather than having
each phenotype represented by one or more genes, this approach favors a mapping between
genotype and phenotype, which is also more true to evolution in nature. Complexiﬁcation
would work as an alteration of the network that represents the mapping. The challenge of this
320

Evolving Agent-based Models Using Complexiﬁcation Approach

Wagner, Cai, Lees and Aydt

approach is that ﬁrst a meaningful mapping network has to be found. It unfolds its beneﬁts
best when used in cases where there are symmetries in the phenotype and genes can be reused
in order to create them. Furthermore it can considerably lower the genome size and therefore
the potential search space.

7

Acknowledgements

This work was ﬁnancially supported by the Singapore National Research Foundation under its
Campus for Research Excellence And Technological Enterprise (CREATE) programme.

References
[1] Sean Luke, Gabriel Catalin Balan, and Liviu Panait. MASON: A Java multi-agent simulation
library. In Proceedings of the Second International Workshop on the Mathematics and Algorithms
of Social Insects, Atlanta, Georgia, 2003.
[2] Sean Luke, Liviu Panait, Gabriel Balan, and Et. ECJ 16: A Java-based Evolutionary Computation
Research System, 2007.
[3] M. Lynch and J. S. Conery. The origins of genome complexity. Science, 302(5649):1401–4+, 2003.
[4] Andrew P. Martin. Increasing Genomic Complexity by Gene Duplication and the Origin of Vertebrates. The American Naturalist. Spring, 154(2), 1999.
[5] Craig W. Reynolds. Flocks, herds and schools: A distributed behavioral model. In Proceedings
of the 14th annual conference on Computer graphics and interactive techniques, SIGGRAPH ’87,
ACM, pages 25–34, New York, NY, USA, 1987.
[6] Lee Spector, Jon Klein, Chris Perry, and Mark Feinstein. Emergence of collective behavior in
evolving populations of ﬂying agents. In GECCO, pages 61–73, 2003.
[7] Hari Sridhar, Guy Beauchamp, and Kartik Shanker. Why do birds participate in mixed-species
foraging ﬂocks? a large-scale synthesis. Animal Behaviour, 78(2):337 – 347, 2009.
[8] Kenneth O. Stanley. Compositional pattern producing networks: A novel abstraction of development. Genetic Programming and Evolvable Machines, 8(2):131–162, June 2007.
[9] Kenneth O. Stanley and Risto Miikkulainen. Competitive coevolution through evolutionary complexiﬁcation. Journal of Artiﬁcial Intelligence Research, 21:63–100, 2004.
[10] Adam Stanton and Alastair Channon. Heterogeneous complexiﬁcation strategies robustly outperform homogeneous strategies for incremental evolution. In Advances in Artiﬁcial Life, ECAL
2013, pages 973–980. MIT Press, September 2013.
[11] Forrest Stonedahl and Uri Wilensky. Finding forms of ﬂocking: Evolutionary search in abm
parameter-spaces. In MABS, pages 61–75, 2010.
[12] Michael Wagner, Wentong Cai, and Michael Harold Lees. Emergence by Strategy: Flocking Boids
and their Fitness in Relation to Model Complexity. In Proceedings of the annual Wintersim
Conference 2013, 2013.
[13] Kevin Winner, Don Miner, and Marie desJardins. Controlling particle swarm optimization with
learned parameters. In SASO, pages 288–290, 2009.

321

