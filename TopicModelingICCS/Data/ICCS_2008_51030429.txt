Dynamic Virtual Environments Using Really
Simple Syndication
Andrew Dunk, Ronan Jamieson, and Vassil Alexandrov
Centre for Advanced Computing and Emerging Technologies
The University of Reading
a.dunk@reading.ac.uk
http://www.acet.reading.ac.uk

Abstract. This paper investigates the use of really simple syndication
(RSS) to dynamically change virtual environments. The case study presented here uses meteorological data downloaded from the Internet in
the form of an RSS feed, this data is used to simulate current weather
patterns in a virtual environment. The downloaded data is aggregated
and interpreted in conjunction with a conﬁguration ﬁle, used to associate
relevant weather information to the rendering engine. The engine is able
to animate a wide range of basic weather patterns. Virtual reality is a
way of immersing a user into a diﬀerent environment, the amount of immersion the user experiences is important. Collaborative virtual reality
will beneﬁt from this work by gaining a simple way to incorporate up-todate RSS feed data into any environment scenario. Instead of simulating
weather conditions in training scenarios, actual weather conditions can
be incorporated, improving the scenario and immersion.
Keywords: Virtual Reality, Weather, RSS, XML, OpenSG.

1

Introduction

Virtual Reality is a way of showing information to users in such a way that it can
be interacted with, as you would expect to interact with the real world. However
it is not limited to this, it also allows users to view ﬁctional items or objects
that would not be possible to visualise easily in the real world. The most popular
method for achieving a virtual reality is to use three dimensional visualisations
for the users to view. The senses of touch (haptics), sound, smell and even taste
have been experimented with as well.
A CAVE [4] is a fully immersive 3D environment able to display stereo imagery
that can span 4 walls, the ﬂoor and ceiling, giving the user the impression that
they are physically in the virtual environment being displayed. Presence is a
measure of how accepting a user is to a virtual environment, or how detached
they are from the real world. By bringing real world information into the virtual
one like the current weather, or information that users are accustomed to, like
a mobile phone telephone book, helps users to accept the virtual environment,
increasing their presence.
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 429–437, 2008.
c Springer-Verlag Berlin Heidelberg 2008

430

A. Dunk, R. Jamieson, and V. Alexandrov

This work is a continuation of the Virtual Weather [5] project, which aimed to
create a virtual reality environment to simulate some basic weather types over a
loaded model. This work will concentrate and generalise the area of downloading and parsing data from the Internet, by implementing a suitable Extensible
Markup Language (XML) parser to be used for both conﬁguring the application
and parsing any RSS data downloaded from the Internet. This generalisation
enables relationships of any RSS data to variables of a rendering engine. Including but not limiting the application to downloading diﬀerent weather sources
and rendering them into a virtual environment. Fig.1 shows the result of an RSS
weather feed downloaded from the Internet and its representation rendered in a
CAVE.
Collaborative virtual environments (CVE), scenario training, product searching, and other real world data related applications can beneﬁt from this work
by gaining a simple way to incorporate up-to-date RSS feed data into their systems. The ability to dynamically change environment variables from RSS feeds
enables a vast amount of information to be incorporated into a CVE, increasing
immersion, productivity, and quality of the system.
Another goal for the project is platform independance, to allow the application
to run on multiple architectures.

Fig. 1. Downloaded RSS weather data representation rendered in the CAVE

2

Related Work and Background

There is a large amount of work in rendering weather and animating weather
conditions, including photo-realistic weather animations in real time. Modern
day computer games are becoming involved in using more realistic weather simulations, quite recently Second Life [7] has just started improving its environment
by integrating a new photo realistic weather rendering system [6] from Windward Mark Interactive [1] called NimbleTM and WindLightTM which use physics
based algorithms for rendering volumetric clouds and calculating the eﬀects the
atmosphere has on a lighting model. The Second Life game environment has

Dynamic Virtual Environments Using Really Simple Syndication

431

simulated weather patterns that change during play but the weather information is generated for the game environment and does not relate to the real world
weather. This must not be confused with the 3D Weather Data Visualization in
Second Life [11] which is an in game 3D map of the United States of America
with up-to-date weather data of America.
Architects use similar technologies to view their designs in the real world,
enabling them to see casting shadows and other aesthetics that may be diﬃcult
to visualise normally. These systems can simulate the eﬀects of the sun during
any time of the day, but do not gather weather information from the Internet.
There are a few games that support real world weather conditions, these
include some of the more recent ﬂight simulators like the Microsoft Flight Simulator [9], and Black & White [10] a real time strategy game. Both these games
use dedicated weather information that is speciﬁcally formed to work with the
application and is downloaded from a dedicated server. In Black & White you
are able to simulate a weather location by typing in your zip or postal code into
the game, and Microsoft Flight Simulator simulates up-to-date weather of the
location you are ﬂying in.
A mobile phone application named Mobile Weather [3] uses Yahoo Weather
[12] RSS feeds to display location based weather information to the user on their
mobile phone but does not render the data in any way, it displays the data in
an easy to read format.

3

Overview of Approach

This work diﬀers from other work by having the ability to use any RSS data
source, linking select information with a rendering engine. This section describes
the integral sections of the work and how they combine together with a rendering
engine. The use case describes this projects use in rendering a weather simulation. Fig.2 shows a basic representation of the systems structure.
3.1

RSS Downloader

All underlying networking used to connect to the Internet and download RSS
feeds is achieved through the use of sockets and a very basic set of HTTP 1.1
protocol [8] commands. Connections to a web server can also be made via a proxy
with or without basic authentication, the proxy server settings are set in the
conﬁguration ﬁle for the application. Sensitive data such as proxy authentication
can be left blank in the conﬁguration ﬁle, the application will ask for these details
at runtime.
When downloading an RSS feed, ﬁrst a connection request is made to the
speciﬁed server, on success a page request of a known RSS feed is sent and the
response is stored into memory, the RSS data is retrieved from this response and
passed to the XML parser.

432

A. Dunk, R. Jamieson, and V. Alexandrov

Fig. 2. A System Overview

3.2

XML Parser

RSS feeds are written using XML, therefore a very small, fast and eﬀective,
open-source, cross platform C++ XML parser [2] is used within the application
to both parse the downloaded RSS feeds, and the conﬁguration ﬁles that help
link the RSS feed data to relevant variables in the rendering engine as well as
general conﬁguration options for the application itself.
The XML parser loads a full XML ﬁle into memory, this can either be from
physical ﬁle or memory location, it parses the data and generates a tree structure representing the XML ﬁle. Once parsed successfully its possible to easily
explore the tree and retrieve any data required. Modiﬁcations to the tree are also
possible. Memory management is totally transparent through the use of smart
pointers so there is no need to call new, delete, malloc or free, decreasing
the possibility of memory leaks and increasing its eﬃciency.
3.3

Data to Variable Linker

On request from the rendering engine the data to variable linker will use the RSS
conﬁguration ﬁle information to request the required RSS data from the XML
parser for a given variable name and return the data to the rendering engine.
3.4

RSS Conﬁguration File

A new conﬁguration ﬁle is created for every RSS feed downloaded from the Internet unless it already exists. The generated conﬁguration ﬁle lists all the variables

Dynamic Virtual Environments Using Really Simple Syndication

433

found in the RSS feed as a comment, to be used as a reference when editing the
conﬁguration ﬁle. This does not necessarily include all possible variables as the
feed may change over time. For accuracy it is advised to still read about the the
particular RSS feed you are attempting to use from its origin. The ﬁle needs to
be edited to create links between the RSS data and the rendering engine, once
this is done it dose not need editing unless the RSS feed changes.
The conﬁguration ﬁles are implemented in this way so that its possible to
easily change the data being used within the system, it also gives the added
advantage of quickly and easily adapting the system to new or changed RSS
feeds. An example of the RSS conﬁguration ﬁle is given below.
<!-- XML Config file RSS feed links -->
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<feed>
<url></url>
<date></date>
</feed>
<link name=""> <!-- name to request from rendering engine -->
<rssData><!-- RSS data to find -->
<type></type>
<name></name>
</rssData>
<!-- return rules: return, equal, notequal, grater, less -->
<return>
<value rule="" data=""></value>
<default></default>
</return>
</link>
Each link has a name, this would be the name requested from the rendering
engine. The rssData values are used to ﬁnd the RSS data required, type refers
to an attribute or node, and name refers to the type name in the RSS feed. It
is possible to set up basic rules when returning data, these are return which
simply returns the RSS data value, equal, grater, and less, which compare
the RSS data to some constant value, and will return the RSS data value or a
given return value if the rule is true. If the rule fails or is false a default value is
returned instead.

4

Use Cases

Accurate weather simulation and prediction can be a complicated and very
compute intensive process, by using pre processed weather data that gives the
predicted weather, this task of compiling the metrological data into useful information is skipped. There are may sites on the Internet that use RSS feeds for
weather prediction information, Yahoo Weather being one of them. This section

434

A. Dunk, R. Jamieson, and V. Alexandrov

describes the use of a weather RSS feed in conjunction with the described work
and a weather rendering engine to produce a virtual environment that’s able
to display the current weather of a speciﬁed geographical location around the
world.
4.1

Rendering Engine

The rendering engine is able to animate various weather eﬀects including the sun,
clouds, rain, and the eﬀect of the wind. The engine has been written in a modular
form and is now not limited to these weather types, additional modules can be
added to increase the diversity of weather patterns that the engine can simulate.
Each module of the rendering engine is able to take parameters associated with
their type of weather, the rendering engine currently has nine parameters that are
used when rendering all weather simulations and are mentioned in the following
sections. All the module parameters are linked with the RSS conﬁguration ﬁles
mentioned above, and the rendering engine requests the required data from the
data to variable linker during runtime.
Rain and Clouds. The rain and cloud objects are able to load a 3D model to
be used for each rain drop or cloud rendered in the environment. They are effected by the wind speed and direction, during animation the objects are pushed
in the direction of the wind. The objects are randomly scattered over the environment and in the case of clouds are morphed in size to give the appearance
of diﬀerent cloud shapes. The volume of rain and cloud objects rendered related
to the parameters passed to the rendering engine and can render from zero to
MAX RAIN or MAX CLOUD number of objects which is deﬁned at compile time of
the application. Transitions between diﬀerent amounts of rain and clouds are
performed gradually over time to give a more realistic weather changing eﬀect.
Sky Background. The entire environment is enclosed in a coloured dome with
makes the background sky. The sky colour can be change to any value and will
gradually fade to that value from it’s current colour over time. During cloudy
rainy weather a greyer sky is perceived, where as hot weather will produce a
brighter shade of blue.
During sunrise and sunset hours the sky will change accordingly, during the
night the sky will darken.
The Sun. The sun uses the current time of day and places itself accurately
in the sky according to sunrise and sunset times. The sun will light all of the
models in the environment according to its position in the sky. It is also possible
to speed up time and see a whole day’s cycle.
Fog. Fog was implemented in a novel fashion; a plane is placed in front of the
user, and as the user moves the plane moves with them. Diﬀerent transparencies
are set depending on the weather visibility. If the plane is set to be completely
transparent, it shows the scene as normal and is not noticed. A semi-translucent
plane shows a partially foggy scene and an opaque plane results in a very foggy

Dynamic Virtual Environments Using Really Simple Syndication

435

scene. Fog was implemented this way for simplicity, at a slight sacriﬁce of aesthetic look. Transitions between visibility levels are changed over time to give
the eﬀect of fog either emerging or dispersing. Fig.3 shows an example of the
simple fog eﬀect.

Fig. 3. An example of a scene with and without fog present

Wind. The wind object does not render any graphics but manipulates the rain
and cloud objects. The wind speed and direction are converted into a translation
that is applied to both the clouds and rain. The wind will randomly deviate
slightly from its true speed and direction to more closely resemble wind in the
real world as it is never constantly blowing in exactly the same direction or speed
all the time.
Time. The time object has two main roles. It either returns the current time of
day converted into minutes, or a custom time interval can be set to increase or
decrease the speed of time. The time object is used mostly by the sun but can
also be used to check for updated RSS feeds after an elapsed time period.
Conﬁguration File. There are many weather feeds available on the Internet
today and each is speciﬁc to it’s source, therefore a system needed to be developed that would allow easy conﬁguration of this received data so it could be
easily converted into useful information for the rendering engine.
The applications conﬁguration ﬁle allows you to map selected values from a
speciﬁed RSS feed to the weather parameters needed by the rendering engine.
It also stores default values for parameters that cannot be mapped, details of
the location the RSS weather data is associated with, proxy details and authentication information if needed, a speciﬁc model can be loaded with the weather
simulation, as well as custom models for the rain and clouds. The functionality
for adding custom ﬁles for the rain and cloud models was added for diverse eﬀects
like being able to render a scene with it literally raining cats and dogs, or to use
a superior cloud model than the one provided. An example of the application
conﬁguration ﬁle is given below.

436

A. Dunk, R. Jamieson, and V. Alexandrov

<!-- XML Config file for mangoXML Weather Simulation -->
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<configuration>
<proxy host="" port="">
<authentication username="" password="" />
</proxy>
<location name="">
<rss host="" file="" />
<model file="" />
</location>
<defaults>
<model file="" />
<rain file="" />
<cloud file="" />
</defaults>
</configuration>
If a proxy isn’t used then these details should be removed from the conﬁguration ﬁle so that the application knows not to attempt to connect via proxy.
If any attributes are left blank, they will be requested during runtime of the
application, giving the option of not needing to save usernames and passwords
into the conﬁguration ﬁle.

5

Conclusion

This work demonstrates a novel way of using RSS data from the Internet enabling
an easier way to integrate it into an application or virtual environment. The
system is completely conﬁgurable and very easy to use. With the added ability of
being able to connect to the Internet via proxy services using basic authentication
methods.
Many applications will beneﬁt from this work as they gain a simple way
to incorporate up-to-date RSS feed data into their systems. The work give the
ability to dynamically change environment variables from RSS feeds, and enables
a vast amount of information to be incorporated into their systems, increasing
productivity, and quality.
The case study has been successfully implemented, and the addition of an
XML parser and variable linker has increased its usability, giving it the ability
to use many diﬀerent weather sources. The application is also cross platform
compatible and able to run on multiple architectures.

6

Future Work

Further tests from other RSS sources need to be carried out to show that similar
results can be achieved with diﬀerent RSS feeds. The application still has much
more to oﬀer, further development in the XML conﬁguration ﬁles could include

Dynamic Virtual Environments Using Really Simple Syndication

437

a more generalised and intelligent way to integrate the RSS feed data to the
rendering engine so that the conﬁguration ﬁles are easier to conﬁgure. Incorporating all the deﬁned variables of the rendering engine into the conﬁguration
ﬁles will allow further changes to the rendering engine without recompiling the
source code. Implementing a callback structure for the RSS data linker would
allow seemless updates to single variables rather than requesting an update for
all variables from the engine. The rendering engine can have many graphic improvements including volumetric clouds and fog. Weather after eﬀects like wet
shiny surfaces during and after rainfall. Inclusion of further weather types, snow
and hail could easily be produced from a derived rain class. The inclusion of
audio would increase the realism of the weather types. The work should also be
expanded into other areas of use to enable an easy way of intergrating RSS data
into applications, opening them to larger resources of data.

References
1. Windward Mark Interactive, http://www.windwardmark.net
2. Frank, I., Vanden Berghen: C++ xml parser,
http://www.applied-mathematics.net/tools/xmlParser.html
3. Brukakis, Dimitri: Mobile weather for s60 smartphones,
http://www.ubahnstation.net/projects/mweather
4. Karelitz, Demiralp, D.B., Cagatay, S.Z., Jackson, C.D., Laidlaw, Cave, D.H.: ﬁshtank virtual-reality displays: A qualitative and quantitative comparison. IEEE
Transactions on Visualization and Computer Graphics 12(3), 323–330 (2006)
5. Dunk, A.: Virtual weather. SCARP (2006)
6. Linden Labs. Linden lab shines new light on second life with acquisition of technology from windward mark interactive (May 2007),
http://lindenlab.com/press/releases/05 21 07
7. Riley, D.: Better clouds, wind coming to second life (May 2007), http://www.
techcrunch.com/2007/05/21/better-clouds-wind-coming-to-second-life/
8. Jeﬀrey, C., Henrik, M., Nielsen, F., Masinter, L., Leach, P.J., Berners-Lee Roy,
T., Fielding, T., Gettys, J.: Hypertext transfer protocol – http/1.1. (June 1999),
http://www.w3.org/Protocols/HTTP/1.1/rfc2616.pdf
9. Microsoft Game Studios. Microsoft ﬂight simulator,
http://www.fsinsider.com/Pages/default.aspx
10. Lionhead Studios. Black & white, http://www.lionhead.com/bw/about.html
11. Weber, A.: 3D Weather data visualization in second life (October 2006),
http://www.secondlifeinsider.com/2006/10/28/3d-weather-datavisualization-in-second-life/
12. Yahoo! Weather Weather prediction and RSS feeds. http://weather.yahoo.com

