A Parallel ADI Method for a Nonlinear Equation
Describing Gravitational Flow of Ground Water
I.V. Schevtschenko
Rostov State University
Laboratory of Computational Experiments on Super Computers
34/1 Communistichesky avenue, Apt. 111
344091, Rostov-on-Don, Russia
ishevtch@uic.rnd.runnet.ru

Abstract. The aim of the paper is an elaboration of a parallel
alternating-direction implicit, or ADI, method for solving a non-linear
equation describing gravitational ﬂow of ground water and its realization
on a distributed-memory MIMD-computer under the MPI messagepassing system. Aside from that, the paper represents an evaluation of
the parallel algorithm in terms of relative eﬃciency and speedup. The
obtained results show that for reasonably large discretization grids the
parallel ADI method is eﬀective enough on a large number of processors.
Keywords: gravitational ﬂow of ground water, ﬁnite diﬀerence method,
Peaceman-Rachford diﬀerence scheme, parallel ADI method, conjugate
gradient method.

1

Introduction

The past decades a substantial progress has been made in mathematical description of water ﬂow and pollutant transport processes. Many today’s mathematical
models are available to predict admixtures migration in ground water under diverse conditions of processes progress. Approximation of such models generates
large systems of linear algebraic or diﬀerential equations that demands utilizing
modern supercomputers proposing powerful computational resources to solve
large problems in various ﬁelds of science. In particular, by solving the equation
of pollutant transport in ground water it is necessary to know a level of ground
water in a water-bearing stratum described by the balance mass equation. In
this paper we consider a parallel solution of that equation for approximation of
which the ﬁnite diﬀerence method is used. The solution of the problem is found
with the aid of the ADI method, in particular, with using Peaceman-Rachford
diﬀerence scheme [8]. We exploit natural parallelism of the diﬀerence scheme to
apply it to distributed-memory MIMD-computers.
An outline of the paper is as follows. Section 2 introduces to general formulation and numerical approximation of the original mathematical model, represents
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 904–910, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

A Parallel ADI Method

905

some results on accuracy and stability of the used diﬀerence scheme and substantiates applicability of the conjugate gradient (CG) method to solving systems of
linear algebraic equations (SLAEs) generated by Peaceman-Rachford diﬀerence
scheme. Section 3 is represented by a parallel realization of the ADI method. In
the same place we evaluate the parallel algorithm in terms of relative eﬃciency
and speedup. Finally, in section 4, we give our conclusions.

2

General Formulation and Numerical Approximation

One of the existing non-linear models describing gravitational ﬂow of ground
water in an anisotropic element of a water-bearing stratum Ω can be represented
in the form [2]
�
�
2
�
∂
∂h
a
ρhk
+ ρ(v(x) + v(y) ).
=
∂t
∂xi
∂xi
i=1
∗ ∂h

(1)

Here x = x1 , y = x2 ; ρ is the water density, h(x, y, t) is the level of ground
water, k is the ﬁltrational coeﬃcient, v(x) and v(y) are the ﬁltration velocities
from below and from above of the water-bearing stratum respectively. Parameter
a∗ > 0 depends on physical characteristics of the water-bearing stratum.
For equation (1) we can deﬁne the initial condition
h(x, y, t = 0) = h0 (x, y),
where h0 (x, y) is a given function and Dirichlet boundary value problem
h|∂Ω = f (x, y).
Here f (x, y) is a function prescribed on the boundary of the concerned ﬁeld.
Approximation of equation (1) bases on Peaceman-Rachford diﬀerence
scheme, where along with the prescribed grid functions h(x, y, t) and h(x, y, t+τ )
an intermediate function h(x, y, t + τ2 ) is introduced. Thus, passing (from n time
layer to n + 1 time layer) is performed in two stages with steps 0.5τ , where τ is
a time step.
Let us introduce a grid of a size M ×N in a simply connected area Ω = [0, a]×
[0, b] with nodes xi = iΔx, yj = jΔy, where i = 1, 2, . . . M , j = 1, 2, . . . N , Δx =
h
−h
a
b
n
n+ 12
, ĥ = hn+1 , hx = i+1,j2 ij , hy =
M , Δy = N . By denoting h = h , h̄ = h
hi,j+1 −hij
h −h
h −h
h
+h
h
+h
, hx̄ = ij 2i−1,j , hȳ = ij 2i,j−1 , hx = i+1,j2 ij , hy = i,j+12 ij ,
2
h

+hij

hx̃ = i−1,j2
equation (1)

, hỹ =

hi,j−1 +hij
2

¯

¯

let us write out the diﬀerence approximation for


h̄ −h

 a∗ ij0.5τ ij =

ρx kx hx h̄x −ρx̃ kx̃ hx̃ h̄x̄
¯ ¯ ¯ Δx

+

ρy ky hy hy −ρỹ kỹ hỹ hȳ
¯ ¯ ¯ Δy


 a∗ ĥij −h̄ij =
0.5τ

ρx kx hx h̄x −ρx̃ kx̃ hx̃ h̄x̄
¯ ¯ ¯ Δx

+

ρy ky h̄y ĥy −ρỹ kỹ h̄ỹ ĥȳ
¯ ¯ ¯ Δy

+ φ,
+ φ.

(2)

906

I.V. Schevtschenko

Here φ = ρij (v(x)ij +v(y)ij ). The diﬀerence approximation of the initial condition
and Dirichlet boundary value problem can be represented as
h|t=0 = h(0)ij ,

h|∂Ω = fij .

(3)

By addressing stability investigation of equation (2) we formulate the following lemma
Lemma 1 Peaceman-Rachford diﬀerence scheme for equation (1) with Dirichlet’s boundary conditions at a∗ > 0 is stable.
Concerning the diﬀerence scheme (2) it can be noted that it has second
approximation order [9] both in time and in space.
By using natural regulating of unknown values in the computed ﬁeld let us
reduce diﬀerence problem (2), (3) to the necessity of solving SLAEs Ak uk =
fk , k = 1, 2 with special matrices. The coeﬃcient matrices Ak , k = 1, 2 are not
constant here. The obtained SLAEs had been scaled, i.e. the elements of the
MN
coeﬃcient matrices and RHSs: Ak = (aij )k , fk , k = 1, 2 had the following
form
aij
fi
, fˆi =
, i, j = 1, 2, . . . , M N
âij = √
aii ajj
aii
and solved with the CG method [9] afterwards. The selection of the CG method
is based on its acceptable calculation time in comparison with simple iteration,
Seidel, minimal residual and steepest descent methods [5].
To proceed, we note that from previous lemma we can infer the appropriateness of using the CG method since
T

Ak = (Ak ) , Ak > 0, k = 1, 2.

3

Algorithm Parallel Scheme

Before passage to the description of the parallel algorithm we would like to say
a few words about the computational platform on which the algorithm has been
run and the library with the help of which it has been realized.
The computational system nCube 2S is a MIMD-computer of hypercubic architecture. The number of computational nodes is 2n , n ≤ 13. These nodes are
uniﬁed into communication scheme of a multidimensional cube with maximum
length of a communication line equaled to n. Such a communication scheme
allows to transmit messages fast enough (channel capacity is 2.5 MBytes/s)
irrespective of computational process since each node has a communication coprocessor aside from a computational processor. At our disposal we had the
described system in reduced version: 64 nodes with peak performance of 128
MFlops and 2048 MBytes of memory.
Relative to the paradigm of message passing it can be noted that it is used
widely on certain classes of parallel machines, especially those with distributed

A Parallel ADI Method

907

memory. One of representatives of this conception is MPI (Message Passing Interface) [6]. As we can see from the title, MPI destines for supporting parallel
applications to work in terms of the message passing system and allows to use
its functions in C/C++ and Fortran 77/90. Besides, amongst a number of books
devoted to various aspects of using MPI we can mention, for instance, the following [3], [4], [7].
The parallel algorithm for solving equation (2), as mentioned above, bases on
natural parallelism which is suggested by Peaceman-Rachford diﬀerence scheme.
Using the ADI method gives an opportunity to exploit any method to solve
SLAEs obtained on n + 12 and n + 1 time layers. In our case we use the CG
method. Along with it, application of Peaceman-Rachford diﬀerence scheme to
equation (1) allows to ﬁnd numerical solution of the SLAEs on each time layer
independently, i.e. irrespective of communication process. The main communication loading lies on connection between two time layers. Thus, one step of the
algorithm to be executed requires two interchanges of data at passage to n + 12
and n + 1 time layers.
As mentioned before, the ADI method generates two SLAEs with special
matrices. One of those matrices obtained on n+ 12 time layer is a band tridiagonal
matrix and consequently can be transformed by means of permutation of rows
to a block tridiagonal matrix, while the second one, obtained on n + 1 time layer,
is a block tridiagonal matrix primordially.
Taking into account aforesaid one step of the parallel algorithm for solving
equation (2) with SLAEs Ak Xk = Bk , k = 1, 2 can be represented in the
following manner
1. Compute B1 on n +

1
2

time layer.
(0)

(0)

2. Make the permutation of vectors X1 , B1 , where X1 is an initial guess of
the CG method on n + 12 time layer.
3. Solve equation A1 X1 = B1 on n + 12 time layer with the CG method.
4. Compute B2 on n + 1 time layer step partially, i.e. without the last item of
the second equation (2).
(0)
(0)
5. Make the permutation of vectors X2 = X1 , B2 , where X2 is an initial
guess of the CG method on n + 1 time layer.
6. Compute the missing item so as the computation of B2 on n + 1 time layer
has been completed.
7. Solve equation A2 X2 = B2 on n + 1 time layer with the CG method.
(0)
8. Set X1 = X2 and go to point 1 to do the next step of the algorithm.
Let us consider the described algorithm in more detail. Suppose, we have p
processors and it �is to
� solve a system
� � of a size M × N . We proceed from the
M
assumption that p = 0 and Np = 0, where {x} is a fractional part of
(0)

number x, i.e. vectors Xk , Bk , k = 1, 2 are distributed uniformly.
First step of the algorithm is well-understood while the second one claims
(0)
more attention. Let vectors X1 , B1 be matrices (which are distributed in the
rowwise manner) consist of elements of corresponding vectors, then to solve

908

I.V. Schevtschenko

equation A1 X1 = B1 on n + 12 time layer with the CG method in parallel we
need to transpose the matrix corresponding to vector B1 = {b1 , b2 , . . . , bM N }


b1
 bN +1

...
b(M −1)N +1

b2
bN +2
...
b(M −1)N +2



b1
. . . bN
 b2
. . . b2N 
→
...
... ... 
. . . bM N
bN

bN +1
bN +2
...
b2N


. . . b(M −1)N +1
. . . b(M −1)N +1 


... ...
. . . bM N

(0)

and the matrix corresponding to vector X1 . Of course, such a transposition
N
requires transmission of some sub-matrices ( M
p × p size) to the corresponding
processors. Thus, the number of send/receive operations Cs/r and the amount
of transmitted data Ct (in element equivalent) are
Cs/r = 2p(p − 1),

Ct = 2M

�
�
N
N−
.
p

Further, in accordance with the algorithm to avoid extra communications we
(0)
compute vector B2 partially and then permute vectors X2 = X1 , B2 as above.
Afterwards, we complete the computation of vector B2 (its missing item) and
solve equation A2 X2 = B2 on n + 1 time layer with the CG method in parallel.
By resuming aforesaid one step of the algorithm to be run requires
Csr = 4p(p − 1),
N
Cc =
p

�
(25m − 7)

�

n+ 1
ICG 2

+

Ct = 4M

n+1
ICG

�

�
�
N
N−
,
p

�
8M
+ 90M −
− 26 + 24M + 4.
p

n+ 1

n+1
are the number of iterations of the CG method in solving
Here ICG 2 and ICG
equation (2) on n+ 12 and n+1 time layers, and Cc is a computational complexity
of the algorithm.
At this we ﬁnish the description of the parallel algorithm and consider some
test experiments all of which are given for one step of the algorithm and for
n+ 1
n+1
= 1. The horizontal axis, in all the pictures, is 2p , p = 0, 1, . . . , 6.
ICG 2 = ICG
By following [10] let us consider relative eﬃciency and speedup

Sp =

T1
,
Tp

Ep =

Sp
,
p

where Tp is a time to run a parallel algorithm on a computer with p processors
(p > 1), T1 is a time to run a sequential algorithm on one processor of the same
computer.
As we can see from ﬁgure 1 relative speedup and eﬃciency are satisfactory
even for a grid of N = M = 512 size.

A Parallel ADI Method

909

Fig. 1. Relative speedup (to the left) and eﬃciency (to the right) of the algorithm at
various grid sizes.

4

Conclusion

In conclusion we would like to say a few words about further work which will be
aimed at elaboration of a parallel ADI method for solving the following equation
�
� �
�
�
2
2
�
�
�
∂
∂
∂h
∂ζ
ρhk
+
ρhk
+ ρ v(x) + v(y) ,
=
a
∂t
∂x
∂x
∂x
∂x
i
i
i
i
i=1
i=1
∗ ∂h

which is one of the base equations in solving the problem of gravitational ﬂow
of ground water.

References
1. R. Barrett, M. Berry, T.F. Chan, J. Demmel, J.M. Donato, J. Dongarra, V. Eijkhout, R. Pozo, C. Romine, Henk Van der Vorst, Templates for the Solution of
Linear Systems: Building Blocks for Iterative Methods,
http://www.netlib.org/templates/Templates.html
2. J. Bear, D. Zaslavsky, S. Irmay, Physical principles of water percolation and seepage. UNESCO, (1968)
3. I. Foster, Designing and Building Parallel Programs: Concepts and Tools for Parallel Software Engineering, Addison-Wesley Pub. Co., (1995)
4. W. Gropp, E. Lusk, A. Skjellum, T. Rajeev, Using MPI: Portable Parallel Programming With the Message-Passing Interface, Mit press, (1999)
5. L.A. Krukier, I.V. Schevtschenko, Modeling Gravitational Flow of Subterranean
Water. Proceedings of the Eighth All-Russian Conference on Modern Problems
of Mathematical Modeling, Durso, Russia, September 6-12, RSU Press, (1999),
125-130

910

I.V. Schevtschenko

6. MPI: A Message-Passing Interface Standard, Message Passing Interface Forum,
(1994)
7. P. Pacheco, Parallel Programming With MPI, Morgan Kaufamnn Publishers,
(1996)
8. D. Peaceman and J. H.H. Rachford, The numerical solution of parabolic and elliptic
diﬀerential equations. J. Soc. Indust. Appl. Math., No.3 (1955), 28-41
9. A.A. Samarskii and A.V. Goolin, Numerical Methods, Main Editorial Bord for
Physical and Mathematical Literature, (1989)
10. Y. Wallach, Alternating Sequential/Parallel Processing, Springer-Verlag, (1982)

