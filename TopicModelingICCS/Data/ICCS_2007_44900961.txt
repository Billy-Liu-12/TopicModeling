A Fault-Tolerant Real-Time Scheduling Algorithm in
Software Fault-Tolerant Module
Dong Liu1, Weiyan Xing2, Rui Li1, Chunyuan Zhang1, and Haiyan Li1
1

6 yuan 7 dui, Department of Computer, National University of Defense Technology,
Changsha, Hunan 410073, China
windleaf1980@163.com
2
China Huayin Ordnance Test Center, Huayin 714200, China

Abstract. In software fault-tolerant module, the key issue that affects the
performance of fault-tolerant scheduling algorithm is how to predict precisely
whether a primary is executable. In order to improve the prediction precision, a
new algorithm named DPA, Deep-Prediction based Algorithm, is put forward.
DPA uses prediction-table to predict whether a primary can be completed
before it is scheduled. Simulation results show that DPA provides more
execution time for primaries and wastes less processor time than the wellknown similar algorithms.
Keywords: scheduling algorithm, software fault-tolerance, real-time system.

1 Introduction
In addition to the function constraints and time constraints, real-time systems in lifecritical applications should supply high reliability so that the systems would not halt
in the presence of task failure. Therefore, various fault-tolerant modules were put
forward to solve the problem. One of the widely used modules is software faulttolerant module, which uses uniprocessor scheduling algorithms to schedule two
versions for each real-time task, namely primary and alternate [1] [2] [3].
In software fault-tolerant module, real-time system has a set of n real-time periodic
tasks τ = {τ1, τ2, …, τn}. τi has a period Ti and two independent versions of
computation program: the primary Pi and the alternate Ai. Pi has a computation time
pi, Ai has a computation time ai, and, usually, pi ≥ ai for 1 ≤ i ≤ n.
Let the planning cycle, T, be the least common multiple (LCM) of T1, T2, …, Tn.
We only need to consider all task invocations during the first planning cycle [0, T].
The primary and the alternate of the jth job, Jij, of τi are denoted by Pij and Aij. We
define rij = (j - 1) Ti to be the release time and dij = jTi be the deadline of Jij.
Since Pij provides a better computation quality, we expect to complete as many
primaries as possible while guaranteeing either the primary or the alternate of each
task to be successfully completed by its deadline. If there are primaries pending for
execution, alternate will not be scheduled until the latest possible time, called the
notification time, denoted by vij. Therefore, we can say that vij is the pre-deadline of
Pij. FP is denoted as the probability that the primary fails after its execution.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 961–964, 2007.
© Springer-Verlag Berlin Heidelberg 2007

962

D. Liu et al.

[1] proposed BCE (Basic & CAT & EIT) algorithm to provide fault-tolerant
scheme in software fault-tolerant module. BCE includes three sub-algorithms: Basic,
CAT and EIT. Basic algorithm uses a fixed priority-driven preemptive scheduling
scheme to pre-allocate time intervals to alternates as late as possible, and, at runtime,
attempts to execute primaries before alternates. Since the prediction of an executable
primary is the key issue that affects the scheduling performance, CAT (Check
Available Time) algorithm is adopted to make prediction and abort the primary that
has not sufficient time to finish. When processor becomes idle, EIT (Eliminate Idle
Time) algorithm advances the scheduling of the alternate, which has the highest
priority, to save time.
[2] and [3] enhanced BCE algorithm and introduced two algorithms: PKSA
(Probing K-steps Algorithm) and CUBA (Changing Utilization-Based Algorithm).
Both algorithms probe K steps, which are the probing deepness of the algorithms,
before the executions of primaries, so that they can prevent early failure of one
primary from triggering failures in subsequent tasks’ executions. In this way, the
algorithms increase the percentage of successfully completed primaries compared to
BCE. Generally, PKSA works better than CUBA [2].
On the base of BCE and PKSA [1] [2], this paper proposes Deep-Prediction Based
Algorithm (DPA) in order to precisely predict whether a primary is executable.

2 DPA Scheduling Algorithm
In this paper, we use a time-table, named prediction-table (PT), to make prediction for
Pij, named host primary. PT stores the execution information of Pij and all its
preemptive primaries Pmn and alternates Amn.
Theorem 1. Let the current time be t, Pij has been released, and the notification time
of Aij is vij. If the total time that has been allocated for primaries (not including Pij)
and alternates during [t, vij] is I, then the available time of Pij is AT = vij – t - I.
Proof. Since Pij must be completed by its deadline vij, the maximum available time
for Pij to use will be vij – t. During [t, vij], besides Pij, there exist the primaries Pmn,
which preempt Pij, and the alternates, whose primaries have failed or been aborted.
All of the primaries and the alternates preempt Pij in PT, and the total time occupied
by these tasks is I. Consequently, the available time, denoted by AT, for Pij in PT will
be vij - t - I. This is the relation we desired to prove.
The procedure of constructing PT for host primary Pij, PT(Pij), is described below:
Let t denote the current time. Pij has been released.
(1) PT is initialized to be idle. Set the start-time and the end-time of PT to be t and
vij respectively. Then, copy the time intervals that have been allocated to alternates by
backward-RM scheduling algorithm [1] during [t, vij] to PT. An alternate-list,
containing all the alternates in PT, is created, and the alternates in the list are sorted
ascendingly in order of their notification time.
(2) Let Amn denote the first unchecked alternate, and Pmn be its primary. If Pmn has
been aborted or failed, go to (2) to check the next alternate in alternate-list; otherwise,
go to (3). If there is no unchecked alternate in alternate-list, go to (4).

A Fault-Tolerant Real-Time Scheduling Algorithm

963

(3) Judge whether the available time in PT is sufficient for Pmn using Theorem 1. If
Pmn can meet its pre-deadline, then append Pmn’s time into PT and withdraw the time
intervals occupied by Amn. Otherwise, abort Pmn. Go to (2).
(4) Judge whether the available time in PT is sufficient for Pij using Theorem 1. If
Pij can meet its pre-deadline, append Pij’s time into PT, and return “successful”. If Pij
can not finish, return “failed”.
The following algorithm describes DPA in detail.
Procedure DPA( )
(1) Set the current time, t, to be 0; set the current scheduling state, S, to be “not
PT”.

(2) Use the backwards-RM algorithm to allocate time intervals for all
alternates.
(3) The current time is t.
(3.1) If S = “not PT”, then:
(3.1.1) If an alternate arrives, execute the alternate. Go to (4);
(3.1.2) If the processor is idle, do EIT algorithm. Go to (3)..
(3.1.3) If a primary arrives, let Pij denote the primary whose alternate has the
smallest notification time among all the released primaries. If PT(Pij) = “successful”,
set S to “PT”; otherwise, abort Pij. Go to (3).
(3.2) If S = “PT”, let Pij denote the host primary. Then:
(3.2.1) If it is time to execute Pij in PT, schedule Pij. If Pij is completed, set S to
“not PT”. If there is no fault during Pij’s execution, remove Aij; otherwise, reserve Aij.
(3.2.2) If it is time to execute Pmn (Pmn ≠ Pij) in PT, schedule Pmn. If Pmn is
completed and failure occurred during its execution, set S to “not PT”.
(3.2.3) it is time to execute Amn in PT, schedule Amn.
(4) Set the next time, and go to (3).
In the next section, we will use simulations to demonstrate the efficiency of DPA
compared to PKSA. (Since PKSA is better than CUBA [2], we only compare PKSA
and DPA.)

3 Simulation Results
We use two metrics: PSP (Percent of time used by Successful Primaries) and W
(Wasted time units). PSP is the percentage of time used by successfully completed
primaries. W is the time wasted by executing inexecutable (not failed) primaries.
In the simulation, we set FP to be 0.05 and set the probing deepness of PKSA to be
4, 8 and 16. We simulated five tasks with different Ti, pi, ai for 500 times. Ti of each
task was between 10 and 150 time units and ai was 0.1 times of Ti. By adjusting the
proportion of primaries’ computation time to their periods, we can control the
utilization of primaries, UP. We simulated 10000 time units in each simulation.
Through this way, we got 500 results of PSP and W, respectively, and then the results
were averaged. The averages are exactly the final results shown in Fig.1.

964

D. Liu et al.
90%

350

PKSA(deepness=4)
PKSA(deepness=8)
PKSA(deepness=16)

80%

PKSA(deepness=4)
PKSA(deepness=8)
PKSA(deepness=16)
DPA

300

DPA

250

70%

200

P
S
P

W

150

60%

100
50%

50
0

40%
0.9

1.03

1.1

1.32 1.42 1.74 2.03 2.36

Up

2.7

3

3.21

0.9 1.03 1.1 1.32 1.42 1.74 2.03 2.36 2.7

Up

3

3.21

Fig. 1. Comparison between DPA and PKSA with different Up

When UP < 1.1, primaries’ computation time is short, and both algorithms can
predict that most of primaries have sufficient available time to execute, so two
algorithms get similar scheduling performances. When 1.1 < Up < 3, DPA wastes less
processor time and provides more time to successful primaries compared to PKSA.
When Up > 3, the performances of two algorithms get close again, since most
primaries can not be completed before notification time.

4 Conclusion
In this paper, we proposed DPA algorithm for software fault-tolerant module. The
algorithm constructs prediction-table, PT, to predict exactly whether a primary is
executable. Simulation results show that DPA gets more execution time for primary
and less wasted processor time compared to the well-known similar algorithms so far.
The algorithm is being used in a RT-Linux based system and has realized faulttolerant function well.

References
1. Han C.C, Shin K.G , Wu J: A Fault-Tolerant Scheduling Algorithm for Real-Time Periodic
Tasks with Possible Software Faults. IEEE Transactions on computers, Vol. 52 (2003) 362372
2. Han J.J, Li Q.H, Abbas A. Essa: A dynamic Real-Time Scheduling Algorithm with
Software Fault-Tolerance. Journal of Computer Research and Development, Vol. 42 (2005)
315-321
3. Li QH, Han J.J, Essa A.A., Zhang W.: Dynamic scheduling algorithms with software faulttolerance in hard real-time systems. Journal of Software, Vol. 16 (2005) 101-107

