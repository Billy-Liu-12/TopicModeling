An ACO Algorithm with Adaptive Volatility
Rate of Pheromone Trail
Zhifeng Hao1,2, Han Huang1, Yong Qin3, Ruichu Cai1
1

College of Computer Science and Engineering, South China University of Technology,
Guangzhou 510640, P.R. China
2
National Mobile Communications Research Laboratory, Southeast University, Nanjing
210096, P.R. China
3
Center of Information and Network, Maoming University, Maoming, Guangdong, 525000,
P.R. China
bssthh@163.com, hanhuang_scut@hotmail.com

Abstract. Ant colony optimization (ACO) has been proved to be one of the best
performing algorithms for NP-hard problems as TSP. The volatility rate of
pheromone trail is one of the main parameters in ACO algorithms. It is usually
set experimentally in the literatures for the application of ACO. The present
paper proposes an adaptive strategy for the volatility rate of pheromone trail
according to the quality of the solutions found by artificial ants. The strategy is
combined with the setting of other parameters to form a new ACO algorithm.
Finally, the experimental results of computing traveling salesman problems
indicate that the proposed algorithm is more effective than other ant methods.
Keywords. Ant colony optimization, pheromone trail, adaptive volatility rate

1 Introduction
ACO was first proposed by M. Dorigo and his colleagues as a multi-agent approach
to deal with difficult combinatorial optimization problems such as TSP [1-2]. Since
then, many applications to the NP-hard problems have shown the effectiveness of
ACO [3].
The main parameters of ACO may conclude: k is the number of artificial ants, ρ

is the parameter for volatility of pheromone trail and α , β determine the relative
importance of pheromone value and heuristic information [2]. All of the parameters
are usually set with experimental methods in the application of ACO [3]. The have
been also several works [4-7] for the adaptive parameter setting of ACO algorithms.
This paper presents a tuning rule for ρ based on the quality of the solution
constructed by the artificial ant. Then, the adaptive rule is used to form a new ACO
algorithm, which is tested to compute several benchmark TSP problems. The
experimental result indicates that the proposed ACO algorithm with adaptive ρ
performs better than other ACO algorithms [2, 8].
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 1167–1170, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1168

Z. Hao

2 Adaptive Volatility Rate of Pheromone Trail
In ACO algorithms [3], each ant builds a tour (i.e. a feasible solution to the TSP
problem) by repeatedly applying the state transition rule as Equation 1 shows.

⎧ [τ gs (t )]α [ηgs ]β ( g ,t )
if s ∈ J k ( g)
⎪⎪
β ( g ,t )
α
Pgs( m) (t ) = ⎨ ∑ [τ gr (t )] [ηgr ]
⎪ r∈Jm ( g )
⎪⎩
0
otherwise
m

(1)

m -th ant moves from city g to city
s in the t -th iteration, τ is the pheromone, η = 1/ d is the reciprocal of distance
d gs , and J m ( g ) is the set of cities not visited when ant m is at city g .

where P

gs

is the probability with which the

After constructing its tour, an artificial ant also modifies the amount of pheromone
on the visited edges by applying the pheromone updating rule:

τ gs ( t + 1) = (1 − ρ )τ gs ( t ) + ρ Δ τ gs ( t )

(2)

Δτ gs (t ) is the increment for the pheromone of edge ( g , s ) at the t -th
iteration, and ρ = 0.1 is the volatility rate of the pheromone trail [2-3].

where

In order to update the pheromone according to the quality of solutions found by
ants, an adaptive rule for volatility of the pheromone trail is designed as follows:

ρ m = L−m1 /( L−m1 + L−P1 )
where

(3)

Lm is the length of the solution S m found by the m -th ant, and LP is the

length of the solution built based on the pheromone matrix (Equation 4).

s = arg max {[τ (r , u )}
u∈J m ( r )

where

(4)

s is the city selected as the next one to city r for any (r , s ) ∈ S P .

The motivation of the proposed rule is: better solutions should contribute more
pheromone, and the worse ones contribute less. We use this rule to design a new ACO
algorithm, which is similar to ant colony system (ACS) [2] except for the updating
rule [2] (Equation 5). For i = 1,..., k + 1 ( k ants and the best-so-far ant),

τ gs ( t + 1) = (1 − ρ i )τ gs ( t ) + ρ i Li − 1
where ∀ ( g , s ) ∈ S i and

ρi = L−i 1 /( L−i 1 + L−P1 )

for the t -th iteration.

(5)

An ACO Algorithm with Adaptive Volatility Rate of Pheromone Trail

1169

3 Numerical Results
This section indicates the numerical results in the experiment that the proposed ACO
algorithm is used to solve TSP problems [9]. Other ant approaches ACS [2] and the
ACO [8] are also tested in the same machines as the comparison with the proposed
ACO. Several TSP instances are computed by the three algorithms on a PC with an
Intel Pentium 550MBHz Processor and 256MB SDR Memory, and the results are
shown in Table 1. It should be noted that every instance is computed 20 times. The
algorithms would not stop until a better solution could be found in 500 iterations.
Table 1 shows that the proposed ACO algorithm (PACO) performs better than ACS
[2] and the ACO [8]. The shortest lengths and the average lengths obtained by PACO
are shorter than those found by ACS and the ACO in all of the TSP instances.
Furthermore, it can be concluded that the standard deviations of the tour lengths
obtained by PACO are smaller than those of another algorithms. Therefore, we can
conclude that PACO is proved to be more effective and steady than ACS [2] and the
ACO [8]. Computation time cost of PACO is not less than ACS and ACO in all of the
instances because it needs to compute the value of volatility rate k + 1 times per
iteration. Although all optimal tours of TSP problems cannot be found by the tested
algorithms, all of the errors for PACO are much less than that for another two ACO
approaches. The algorithms may make improvement in solving TSP when reinforcing
heuristic strategies like ACS-3opt [2] are used.
Table 1. Comparison of the results in TSP instances

Problem
kroA100

ts225

pr226

lin105

kroB100

kroC100

lin318

Algorithm
ACS
ACO
PACO
ACS
ACO
PACO
ACS
ACO
PACO
ACS
ACO
PACO
ACS
ACO
PACO
ACS
ACO
PACO
ACS
ACO
PACO

best
21958
21863
21682
130577
130568
130507
84534
83659
81967
14883
14795
14736
23014
22691
22289
21594
21236
20775
48554
48282
47885

Ave
22088.8
22082.5
22076.2
133195
132984
131560
86913.8
87215.6
83462.2
15125.4
15038.4
14888
23353.8
23468.1
22728
21942.6
21909.8
21598.4
49224.4
49196.7
49172.8

time(s)
65
94.6
117.2
430.6
439.3
419.4
378.4
523.8
762.2
88.8
106.6
112.2
56.2
102.9
169.6
54.8
78.1
114.8
849.2
902.7
866.8

Standard deviation
1142.77
1265.30
549.85
7038.30
7652.80
1434.98
4065.25
5206.70
3103.41
475.37
526.43
211.34
685.79
702.46
668.26
509.77
814.53
414.62
1785.21
2459.16
1108.34

1170

Z. Hao

4 Discussions and Conclusions
This paper proposed an adaptive rule for volatility rate of pheromone trail, attempting
to adjust the pheromone based on the solutions obtained by artificial ants. Thus, a new
ACO algorithm is designed with this tuning rule. There is a special pheromone
updating rule in the proposed algorithm whose framework is similar to Ant Colony
System. There are some experimental comparisons among the proposed ACO
approach and other methods [2, 8] in solving TSP problems. The results show the
effectiveness of the proposed algorithm.
Further study is suggested to explore the better management for the optimal setting
of the parameters of ACO algorithms, which will be very helpful in the application.
Acknowledgements. This work has been supported by the National Natural Science
Foundation of China (60433020, 10471045), Program for New Century Excellent
Talents in University (NCET-05-0734), Natural Science Foundation of Guangdong
Province (031360, 04020079), Excellent Young Teachers Program of Ministry of
Education of China, Fok Ying Tong Education Foundation (91005), Key Technology
Research and Development Program of Guangdong Province (2005B10101010), State
Key Lab. for Novel Software Technology, Nanjing University (200603), open research
fund of National Mobile Communications Research Laboratory, Southeast University
(A200605), Nature Science Foundation of Guangdong (05011896), and Nature Science
Foundation of Education Department of Guangdong Province (Z03080).

References
1. Dorigo, M., Caro, G.D., Gambardella, L.M.: Ant algorithms for Discrete Optimization,
Massachusetts Institute of Technology, Artificial Life 5: 137-172, 1999
2. Dorigo, M., Gambardella, L.M.: Ant Colony System: A Cooperative Learning Approach to
the Travelling Salesman Problem, IEEE Transactions on Evolutionary Computation, 1 (1),
53-66, 1997
3. Dorigo, M., Stützle, T.: Ant Colony Optimization. MIT Press, Cambridge, MA (2004)
4. Watanabe, I., Matsui, S.L.: Improving the Performance of ACO Algorithms by Adaptive
Control of Candidate Set, Evolutionary Computation, 2003. CEC '03. The 2003 Congress
on Volume 2, 8-12 Dec. 2003 Page(s):1355 - 1362 Vol.2
5. Pilat, M.L., White, T.: Using Genetic Algorithms to Optimize ACS-TSP, M. Dorigo et al.
(Eds.):ANTS 2002, LNCS 2463, 282-287, 2002
6. Gambardella, L.M., Dorigo, M.: Ant-Q: A Reinforcement Learning approach to the
travelling salesman problem, Appeared in: Proceedings of ML-95, Twelfth Intern. Conf. On
Machine Learning, Morgan Kaufmann, 252-260, 1995
7. Huang H., Yang X.W., Hao Z.F., Cai R.C.: A novel ACO algorithm with adaptive
parameter, D.S. Huang et al. (Eds.): ICIC 2006, LNBI 4115, 12-21, 2006
8. Sun, J., Xiong, S.W., Guo, F.M.: A new pheromone updating strategy in ant colony
optimization, Proceedings of 2004 International Conference on Machine Learning and
Cybernetics, 1, 620-625, 2004
9. Reinelt, G.: TSPLIB. A traveling salesman problem library. ORSA Journal on Computing,
3 (4), 376-384, 1991

