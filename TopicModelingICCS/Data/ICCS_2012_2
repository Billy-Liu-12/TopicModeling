Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1021 – 1029

International Conference on Computational Science, ICCS 2012

An adjoint based implementation of the Parareal algorithm
Vishwas Raoa , Adrian Sandua
a Computational

Science Laboratory, Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg, VA 24061
{visrao, asandu7}@vt.edu

Abstract
This paper presents a new ‘Parareal-algorithm’ to solve time-dependent ODEs parallel in time. The algorithm approximates the solutions later in time simultaneously with the solutions earlier in time. To approximate the solutions
simultaneously, an optimization problem is constructed and solved using gradient based techniques. The accurate gradients are evaluated using adjoints. Promising results are obtained when the interval of interest is split into suﬃciently
small subintervals.
Keywords: Parareal, Adjoints, Sensitivity analysis

1. Introduction
Parareal algorithms aim to solve time-dependent problems parallely in time. A Parareal algorithm to solve evolution problems in parallel, was presented by Lions, Maday and Turnici in [1]. They had developed a method which
approximates the solution later in time before approximating the solution completely, earlier in time. This algorithm
was extensively applied for solving problems in ﬂuids and structure [2], Navier-Stokes equations [3], for reservoir
simulation [4]. Parareal method has been recently applied to parabolic PDEs. Staﬀ and Rønquist discuss about the
stability of the Parareal algorithm in [5]. Stability and convergence of the Parareal algorithm applied to PDEs are
discussed in [6]. Gander and Vanderwille [7] have shown how to cast the Parareal as a multiple shooting method and
multigrid method. The general idea is to decompose the time integration interval into smaller subintervals and to solve
an initial value problem on each of the subinterval parallely.
Consider the following ODE,
y = f (t, y) ,

y(tinitial ) = y0 ,

tinitial ≤ t ≤ tﬁnal .

(1)

Gander and Vanderwile [7] deﬁne the Parareal algorithm using two propagation operators. One of the operator is
a coarse solution operator ( G(T 2 , T 1 , u01 ) ) which gives a rough approximation to u(T 2 ) given the initial conditions
u(T 1 ). The other operator is a ﬁne solution operator ( F(T 2 , T 1 , u01 ) ), where, ukn denotes the initial conditions for
kth iteration at the nth boundary and T n represents the starting time of the nth interval and the ending time of n − 1 st
interval. They give the following interpretation of the Parareal algorithm:
k+1
k
k
uk+1
n+1 = G(T n+1 , T n , un ) + F(T n+1 , T n , un ) − G(T n+1 , T n , un ) .

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.110

(2)

1022

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

The time interval [tinitial , tﬁnal ] is split into M subintervals as follows:
tinitial = T 0 < T 1 < · · · < T M−1 < T M = tﬁnal .

(3)

They use the above procedure iteratively on the intervals to obtain the solutions at the boundaries.We use a similar
strategy to split the time intervals and reformulate the ODE as an optimization problem and solve it by using GaussNewton method.
Our paper is organized as follows. In section 2 we present the parallel solution procedure, the formulation of the optimization problem, computation of the gradient by sensitivity analysis and minimization by Gauss-Newton method.
Section 3 presents numerical experiments and the comparison of the results with the traditional Parareal algorithm.
We present the conclusions and future work in section 4.
2. Parallel Solution Procedure
2.1. Notation
A numerical integration method (e.g., a Runge Kutta method) uses N time steps to solve the equation (1)
ti = ti−1 + hi ,

i = 1, · · · , N ,

t0 = tinitial , tN = tﬁnal ,

and computes the numerical solutions yi ≈ y(ti ) for i = 0, . . . , N. We formally denote the numerical solution process
that computes the solution at ti+1 from the solution at ti by
yi = Mti−1 →ti (yi−1 ) ,

i = 1, · · · , N .

Similarly, the set of consecutive numerical steps that evolve the solution from tk to t , > k, will be denoted by
y = Mtk →t (yk ) ,

∀ > k.

For example,
yk+3 = Mtk →tk+3 (yk ) = Mtk+2 →tk+3 Mtk+1 →tk+2 Mtk →tk+1 (yk )

.

The serial solution procedure consists of applying N consecutive steps of the method, starting from the initial condition, to obtain the solution at the ﬁnal time
y(tﬁnal ) ≈ yN = Mt0 →tN (y0 ) .
2.2. Split the simulation time interval
For a parallel-in-time solution we partition the simulation time interval [tinitial , tﬁnal ] into M subintervals, with
boundaries as shown in equation (3). We choose the boundaries such that they correspond to integer steps of the
numerical method,
T i = t i , i = 0, . . . , M ,
where i are integers. This implies that
numerical method

0

= 0 and

M

= N. The ﬁrst subinterval consists of the ﬁrst

[T 0 , T 1 ] = [t0 , t 1 ] .
The second subinterval consists of the next

2

−

1

steps of the numerical method

[T 1 , T 2 ] = [t 1 , t 2 ] = [t 1 , t 1 +1 ] ∪ [t 1 +1 , t 1 +2 ] ∪ · · · ∪ [t 2 −1 , t 2 ] ,
and so on.

1

steps of the

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

1023

2.3. Deﬁne and solve M independent ODE systems.
Consider the following approximations of the solution at the interval boundaries
u0 = y0 ;

ui ≈ y(ti ) , i = 1, . . . , M − 1 .

Then a numerical solution can be computed on each interval [ti−1 , ti ] starting from the initial condition ui−1
ui = Mt i−1 →t i (ui−1 ) ,

in parallel for i = 1, . . . , M .

The systems are independent from one another. Each interval has its own known initial condition and proceeds
independently. Thus we can compute the solution in parallel.
2.4. Deﬁne a cost function to penalize jumps.
What we compute in section (2.3), is not the solution of the original ODE, but rather are M solutions on M
subintervals. At each interval boundary T i there is a jump between ui , the solution computed on [T i−1 , T i ] and ui , the
initial condition for the next interval.
To obtain the solution of the original ODE we need to choose the initial conditions ui such that the result of the
integration on the current interval matches the initial conditions of the next interval
ui = ui = Mt i−1 →t i (ui−1 ) ,

i = 1, . . . , M .

We need to compute these values of ui . For this, we deﬁne a cost function that depends on ui , and that penalizes the
jumps across interval boundaries
J(u1 , . . . , u M−1 ) =

1
2

N−1

ui − Mti−1 →ti (ui−1 )

T

R−1
ui − Mti−1 →ti (ui−1 ) .
i

(4)

i=1

Here Ri ’s are symmetric weight matrices and can be chosen as follows
Ri ( j, j) = (Atol j + Rtol j |u0i ( j)|)2 ,
where, Atol and Rtol are the absolute and relative tolerances respectively. This will scale the cost function and
will reduce the eﬀect of large diﬀerences in the components of the initial condition. The initial conditions for each
subinterval determine the entire solution. They are obtained by minimizing this cost function
opt

opt

(u1 , . . . , u M−1 ) = arg min J.
We know that the optimal value of the cost function is J = 0, and the optimal values of the initial conditions are the
numerical solutions obtained with the serial algorithm
opt

ui

=yi,

i = 1, · · · , M − 1 .

2.5. Solve the minimization problem.
To solve the minimization problem, we use gradient based methods. We use sensitivity analysis [8, 9, 10] to
compute the discrete gradient and the approximate Hessian. The tangent linear model associated with the numerical
solution is denoted by
δyi+1 = Mti →ti+1 (yi ) · δyi = Mti →ti+1 δyi , i = 0, . . . , N − 1 ,
and the adjoint (of the tangent linear) model is denoted by
λi = Mti →ti+1

λi+1 = Mti+1 →ti λi+1 ,

i = N − 1, . . . , 0 .

To solve the optimization problem, we use the Gauss-Newton method. Unlike the Newton’s method, the GaussNewton method does not require the exact Hessian. The method is given by
xk+1 = xk − H(xk )−1 G(xk ) .

(5)

1024

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

Here H(x) and G(x) are the discrete Hessian and gradients respectively.
The cost function has a gradient of the form
∇ui J = R−1
ui − Mti−1 →ti (ui−1 ) − Mti+1 →ti R−1
ui+1 − Mti →ti+1 (ui ) .
i
i

(6)

The Hessian is block tridiagonal.
∇2ui ,ui−1 J

=

−R−1
i Mti−1 →ti ,

∇2ui ,ui J

=

−1
R−1
i + Mti+1 →ti Ri Mti →ti+1 −

∇2ui ,ui+1 J

=

−Mti+1 →ti R−1
i .

(7)
d
Mti+1 →ti (ui ) R−1
ui+1 − Mti →ti+1 (ui ) ,
i
dui

(8)
(9)

It should be noted that ∇u J and ∇2ui ,u j J are same as G and H of the equation (5) respectively.
To use the Gauss-Newton method, we need an approximate Hessian and the gradient. In the equation (8), we
neglect the term
− dud i Mti+1 →ti (ui ) R−1
ui+1 − Mti →ti+1 (ui ) .
i
The above term does not contribute signiﬁcantly to the Hessian, also computing it is very costly. Hence what we
obtain is an approximate Hessian. Further, the gradient can be computed in parallel as follows
Solve

in parallel for i = 1, . . . , M .

ui = Mt i−1 →t i (ui−1 )

Compute vi = ui − ui

in parallel for i = 1, . . . , M .

Solve vi = Mti+1 →ti R−1
i vi+1

in parallel for i = 1, . . . , M − 1 .

This is done by running the adjoint model on [T i , T i+1 ]. The adjoint variable is initialized with λ(t i+1 ) = R−1
i vi+1 .
After the backward in time integration we obtain λ(t i ) = vi .
Finally, we are in a position to compute the gradient as
∇ui J = R−1
i vi − vi ,

i = 1, · · · , M − 1 .

(10)

Now we have all the necessary components to use the Gauss-Newton method to ﬁnd the solution for the optimization
problem. We avoid the computation of inverse by solving the following system of equations iteratively, using non
linear conjugate gradient method.
H Δx = −G ,

(11)

=

(12)

and the equation (5) becomes
xk+1

xk + Δx .

3. Numerical Experiments and Results
In this section, we present the results obtained when the method was used to solve the Arenstorf’s orbit problem[11].
The following equations govern the physics of the Arenstorf’s orbit.

y1
y2

y1 + μ
y1 − (1 − μ)
−μ
,
D1
D2
1−μ
μ
= y2 − 2y1 − y2
+
,
D1
D2
= y1 + 2y12 − (1 − μ)

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

1025

0

10

−5

10

−10

Cost Function

10

−15

10

−20

10

−25

10

M=5
M=10
M=15
M=20

−30

10

0

1

2

3

Iterations

Figure 1: Decrease of cost function for diﬀerent values of M. (The number of subintervals)

where,
μ

=

m1
,
m1 + m 2
3

D1

= ((y1 + μ)2 + y22 ) 2 ,

D2

= ((y1 − (1 − μ)2 )2 + y22 ) 2 .

3

The second order equations can be converted to a ﬁrst order system by the following substitutions
y3

=

y1 ,

y4

=

y2 .

The time interval of interest was split into 5, 10, 15 and 20 subintervals. The problem was solved with both the
traditional Parareal and with ‘Adjoint Parareal’ method. Our method converges faster than the traditional Parareal for
larger number of subintervals (M). It takes fewer outer iterations than the traditional Parareal for larger values of M.
The ﬁgure 1 shows the variation of the cost function with iterations for diﬀerent interval sizes. With the GaussNewton method, irrespective of the interval size, the function values go to zero in 3-4 iterations. The ﬁgures 2, 3,
4, 5 clearly show that Parareal with adjoints performs better than the traditional Parareal with repsect to the number
of iterations taken by the Gauss-Newton method. Irrespective of the interval size, the optimization is numerically
observed to converge to an accurate solution in 3-4 iterations. In case of ‘traditional Parareal’ it is observed that the
number of iterations to converge is closely related to the number of subintervals (in our experiments we observed
that it takes M − 3 iterations to converge). Hence if M is suﬃciently large (For example M = 10 or more), then the
‘Adjoint Parareal’ outperforms the ‘traditional Parareal’. It should be noted that we count only the iterations taken by
the Gauss-Newton method to converge in the case of ‘Adjoint Parareal’. It is also observed that ‘traditional Parareal’
achieves very high accuracy when it converges, hence it will be interesting to use ‘Adjoint Parareal’ for the initial
iterations and use the ‘traditional Parareal’ in the later iterations and examine the results. The ﬁgures 6 and 7 show
the times taken for 3 iterations of both traditional Parareal and Adjoint Parareal for diﬀerent sizes of the interval. The
code for the traditional Parareal was tested on heat equation and the convergence results matched with those described
in [7]. These are serial codes and work is underway to parallelize them. The algorithms needs to be tested on larger
systems to draw concrete conclusions on the timing aspect.

1026

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

0

Relative Error (L2 Norm)

10

−5

10

−10

10

Adjoint Parareal
Traditional Parareal

−15

10

0

1

2

3

Iterations

Figure 2: Decrease of L2 norm of the relative error for M = 5.

−2

10

−3

Relative Error (L2 Norm)

10

−4

10

−5

10

−6

10

Adjoint Parareal
Traditional Parareal

−7

10

0

1

2
Iterations

Figure 3: Decrease of L2 norm of the relative error for M = 10.

3

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

−1

10

−2

Relative Error (L2 Norm)

10

−3

10

−4

10

−5

10

−6

10

Adjoint Parareal
Traditional Parareal

−7

10

0

1

2

3

Iterations

Figure 4: Decrease of L2 norm of the relative error for M = 15.

−1

10

−2

Relative Error (L2 Norm)

10

−3

10

−4

10

−5

10

−6

10

Adjoint Parareal
Traditional Parareal

−7

10

0

1

2
Iterations

Figure 5: Decrease of L2 norm of the relative error for M = 20.

3

1027

1028

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

−2

10

−3

Relative Error (L2 Norm)

10

−4

10

−5

10

−6

10

Adjoint Parareal
Traditional Parareal

−7

10

0

0.5

1

1.5

Time in seconds

Figure 6: Decrease of the L2 norm of the relative error with cpu-time for M = 10

−1

10

−2

Relative Error (L2 Norm)

10

−3

10

−4

10

−5

10

−6

10

Adjoint Parareal
Traditional Parareal

−7

10

0

0.5

1

1.5
Time in seconds

2

2.5

3

Figure 7: Decrease of the L2 norm of the relative error with cpu-time for M = 20.

Vishwas Rao and Adrian Sandu / Procedia Computer Science 9 (2012) 1021 – 1029

1029

4. Conclusions and Future Work
We conclude that re-casting system of ODEs as an optimization problem can give better performance than the
traditional Parareal algorithm. But the challenge lies in solving the inner linear system in the equation (12). Since the
Hessian is close to being symmetric positive deﬁnite, iterative methods like conjugate gradient and preconditioned
conjugate gradient were tried to solve the system, but because of ill-conditioned H, it is diﬃcult to solve the system in
small number of iterations. We intend to try other optimization techniques like the Levenberg-Marquardt method to
check the rate of convergence. Using Levenberg-Marquardt method would require reformulation of the optimization
problem. Use of preconditioners to improve the condition number of the Hessian is another possible way to reduce
the number of inner iterations. This method needs to be tested with bigger systems like the heat equation or the
shallow water equation. It is highly likely that the method gives better performance improvements when used on
larger systems.
Acknowledgements
This work has been supported in part by NSF through awards NSF OCI-8670904397, NSF CCF-0916493, NSF
DMS-0915047, NSF CMMI-1130667, and by the Computational Science Laboratory at Virginia Tech.
References
[1] J. Lions, Y. Maday, G. Turnici, A “parareal” in time discretization of pde’s.
[2] C. Farhat, M. Chandesris, Time-decomposed parallel time-integrators: Theory and feasibility studies for ﬂuid, structure and ﬂuid-structure
applications.
[3] P. Fischer, F. Hecht, Y. Maday, A “parareal” in time semi-implicit approximation of the Navier-Stokes equations.
[4] I. Garrido, M. Espedal, G. Fladmark, A convergence algorithm for time parallelization applied to reservoir simulation.
[5] G. Staﬀ, E. Rønquist, Stability of the “parareal” algorithm.
[6] G. Bal, On the convergence and the stability of the “parareal” algorithm to solve partial diﬀerential equations.
[7] M. Gander, S. Vanderwalle, Analysis of the “parareal” time-parallel time-integration method.
[8] H. Zhang, A. Sandu, Fatode: A Library for Forward, Adjoint, and Tangent Linear Integration of Stiﬀ Systems.
[9] M. Alexe, A. Sandu, On the Discrete Adjoints of Variable Step Time Integrators.
[10] A. Sandu, P. Miehe, Forward, Tangent Linear and Adjoint Runge-Kutta Methods in KPP-2.2 for Eﬃcient Chemical Kinetic Simulations.
[11] R. Hairer, S. Nørsett, G. Wanner, Solving Ordinary Diﬀerential Equations 1, Nonstiﬀ Problems, 1993.

