Multiagent Simulation of Physical Phenomena
by Means of Aspect Programming
´ zy´ski
Slawomir Bieniasz, Stanislaw Ciszewski, and Bartlomiej Snie˙
AGH University of Science and Technology, Department of Computer Science,
Krakow, Poland
bieniasz@agh.edu.pl, scisz@iisg.agh.edu.pl, sniezyn@agh.edu.pl

Abstract. Along with the evolution of the numerical methods new software methodologies have been developed. Goal of our research is to apply
Aspect Oriented Programming (AOP) in the development of multiagent
simulation system. In this paper theoretical model of aspect-multiagent
system is presented, its architecture and implementation is described.
Results of experiments performed conclude the work. The model considered here can serve as a design tool for foundry processes, especially
to design conditions for cooling of a casting leading to desired crystal
structure.

1

Introduction

Simulation software is usually build using structural programming techniques,
which resembles functions and equations found in an application domain. This
leads to a clear structure of a model which is typically specialized in a narrow
ﬁeld of the application.
The next milestone of software engineering, object orientation paradigm,
has been introduced to numerical methods last years. The advantages of this
approach are well known, but on the ﬁeld of simulation of natural phenomena
one important drawback have to be pointed. The data centric encapsulation,
which perfectly plays its role on business model ﬁeld, is hard to be properly
done when common state is more shared then divided.
The paper presents the next step approach to this problem i.e. composition
of Agent Methodologies and Aspect Oriented Programming (AOP) [1]. In such
an approach the state of the system is modelled as an environment, typically
a mesh, which could be observed and changed by set of agents. The physical
phenomena are represented as their societies, mutual relations and specialized
roles. The separation of crosscutting concerns is used to distinguish both the
physical phenomena and parts of the software.
The paper develops those ideas as follows. The second section gives the description of some related works on the ﬁeld of aspect-multiagent approach. The
third section presents a theoretical model of such system which is centered upon
the separation of physical phenomena concept. The demonstration system Aspect MAFES is described in the forth section. The real life examples are shown
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 759–766, 2006.
c Springer-Verlag Berlin Heidelberg 2006

´ zy´ski
S. Bieniasz, S. Ciszewski, and B. Snie˙

760

in the ﬁfth section. The model considered there can serve as a design tool for
foundry processes, especially to design conditions for cooling of a casting leading
to desired crystal structure.

2

Related Work

Aspect programming is used to build multiagent systems for several years.
Kendal [2] presents how aspects can be used to model, design and implement
agent roles, which focuses on the position and responsibilities within an overall
multiagent system. Examples of roles are broker, mediator, and bureaucracy.
Garcia et al. [3] describe using aspect-oriented programming to separate
concerns in multiagent systems development. Two main groups of aspects are
proposed: agency aspects (such as autonomy, collaboration, and mobility), and
generic aspects (e.g. exception handling, and persistance). Additionally, application of computational reﬂection is proposed to manipulate separately interagent
level properties.
Robbes et al. [4] propose application of aspect-oriented programming in multiagent systems that are based on the Aalaadin [5] MAS model. It is done on two
leveles: conceptual (where aspect is uniﬁed with the group concept) and implementation. Aspects that are proposed are connected with messaging (message
building, messaging strategy, distributed messaging), agent lookup, visualizatoin
and debuging, and ﬂow control.
In this work an approach similar to the Garcia’s and Robbes’ is used in the
numerical simulation domain.

3

Theoretical Models

Let us denote by S a set of states of universe, by P a set of observations, by A
a set of actions, and by Ag a set of agents. Classically, agent is determined as
pair of methods [6]:
ai = (seei , actioni ),
(1)
where:
seei : S → P,
actioni : P → A,

(2)
(3)

where P is a set of sequences of observations from P . Function seei receives
information about the environment and transforms it into some internal observation. The actioni chooses an action that should be executed according to the
history of information received.
In this work an environment is treated as a deterministic state transition
function:
env : A × S → S
(4)

Multiagent Simulation of Physical Phenomena

761

With such assumption a consecutive application of seei , actioni and env is valid,
only if observations and actions that are executed are alternate. To overcome
this problem the additional function:
σ : Ag → N,

(5)

is introduced to assign a priority to every agent. Priorities should be assigned in
a way that agent actions and observations with the same priority are alternate.
To handle more sophisticated functionality, the basic structure of the agent
system is extended in the following way:
– the state of the universe is modelled as a family of partial functions,
– to introduce slices, instructions used to code seei and acti are considered
with static data ﬂow dependencies extended to the universe,
– ﬁnally, physical representation of aspect waving is deﬁned.
Let Γ = ∅ be a set of entities (or attributes) in the universe. For any γ ∈ Γ
we deﬁne the set of its values Vγ . By a V = γ∈Γ Vγ the total space of values is
noted. With this annotations the function:
s:Γ

γ → s(γ) ∈ Vγ ⊂ V

(6)

denotes the state of the universe in a given time. We assume that for all γ ∈ Γ the
set of values Vγ contains a special none element. For a given state the statement
s(γ) = none means that γ cannot be taken into account in the state s.
The internal structure of an agent is a pair (I, ), where I denotes the set
of instructions, and
is a static data ﬂow relation. It is assumed that
is
an order, as usual. This relation is naturally extended to the entities of Γ by
instruction value dependencies.
Deﬁnition 1. The slice in I is a pair A = (AΓ , AI ) where AΓ ⊂ Γ and AI is
set of instructions satisfying following conditions:
i then a ∈ AΓ ,
– if i ∈ AI then ∀a ∈ Γ such that: a
j
i then j ∈ AI .
– if i ∈ AI and a ∈ AΓ then ∀j ∈ I such that: a

Universe entity
Instruction
Data flow
Attribute value dependency
Slice

Fig. 1. Slices in the MAS

762

´ zy´ski
S. Bieniasz, S. Ciszewski, and B. Snie˙

The deﬁnition is illustrated in Fig. 1. The dots below depicts the elements of the
universe. The instructions, marked as rectangles, depend on their values. The
data ﬂow relation between instructions transfer the value dependency to the
further instructions. The two slices are marked by ovals.
Let us remark, that any slice A could be treated as a sum of intersection
with agent methods. It is denoted as: Asee = A ∩ see and Aaction = A ∩ action.
Deﬁnition 2. Two slices A and B are independent iﬀ AΓ ∩ B Γ = ∅ and
AI ∩ B I = ∅.
Our example (Fig. 1) shows such a situation.
Deﬁnition 3. A slice A is complete iﬀ A and the smallest slice which contain
its complement (Γ − AΓ , I − AI ) are independent.
The completeness of slices A should be understood, in the context of this article,
as a separation of physical phenomena. Each of them could be distinguished by
a set of entities and their values, which constitutes restriction of universe state
to AΓ ⊂ Γ .
Deﬁnition 4. A slice A separates phenomenon iﬀ there exists a complete slice
B such that: AΓ = B Γ and AI ⊂ B I
Let us consider a slice A and a family of {Xi }i=1,2,...,k such that: Xi = (XiΓ , X I ),
where: XiΓ ⊂ Γ and XiI ⊂ I for i = 1, 2, ..., k.
Deﬁnition 5. A slice A is properly extended (weaved) by a Xi when A + Xi =
(AΓ ∪ XiΓ , AI ∪ XiI ) is also a slice.
Deﬁnition 6. With the above notation the aspect system separates phenomena
if all partial proper extensions for set U ⊂ {1, 2, ..., k}: A + U Xi separates
phenomena; where A + U Xi means (...((A + Xi1 ) + Xi2 )... + Xin ) for ij ∈ U ,
j ∈ {1, 2, ..., n}, n = |U |.

4

System Description

During refactoring of the MAFES system (Multi Agent Finite Environment System) [7] several aspects were identiﬁed. As a result an Aspect MAFES system
was built according to a theoretical model described above.
System consists of a multiagent basic model, with which separate phenomena,
control, and visualization aspects are weaved.
Multiagent basic model consist of an environment in the form of the node
matrix, and a set of agents operating on these nodes. The environment is used
to model a space. Every node has references to the closest neighbors. Agents
observe the universe state, and aﬀect the part of it, by changing selected entities
values, which are in theirs activity range.
Aspects are used to assign tasks to agents. Task assignment is connected with
adding appropriate functionality to agents to perform given task and weaving

Multiagent Simulation of Physical Phenomena

763

appropriate resources and attributes to the universe. Aspects are used to add
physical phenomenons (such as motion, heat exchange, crystallization, etc.) and
other activities (control, visualization, storing simulation results, etc.).
The following physical phenomenon aspects are implemented in the system:
heat exchange, crystallization, and motion. Schemas of these aspects are presented in Fig. 2.

Fig. 2. Aspects of phenomena: a) legend, b) aspect of heat exchange, c) aspect of
crystallization, d) aspect of motion

Aspect of heat exchange (Fig. 2-b) adds to the environment nodes the following properties: temperature, speciﬁc heat, heat conductivity, and density. To
the agent activity temperature change algorithm is added. According to the theoretical model, it is build of two parts: observation that gets temperature and
other parameters of the linked node and its neighbors, and action that estimates
diﬀerentials of the temperature and changes the temperature of the linked node.
Aspect of crystallization (Fig. 2-c) is implemented using model of eutectic
equilibrium. It adds to the environments attributes representing all necessary
crystallization parameters (FS, N, R, CGN). Agent with this aspect weaved
observes temperature and these parameters. Using actual and historical observations (history is necessary to recognize undercooling point), it estimates temperature change and applies it to the linked node.
Aspect of motion (Fig. 2-d) causes that agent observes and aﬀects all moving
space (nodes that represent it). Such an agent transfers properties of these nodes
according to the speed of motion. This action should be done before these mentioned above. As a result, agents with this aspect weaved have higher priority.
Three more aspects are used in Aspect MAFES: control (e.g. used to control
the cooling), visualization (to present the state of simulation) and result storing
(to store all necessary simulation parameters). Because of the lack of space, they
are not described here.
Aspect MAFES is implemented using AspectJ [8, 9] language, a simple, uniform and very practical extension of Java. This language adds several tools that
provide a support to modular implementation of crosscuting concerns.

764

´ zy´ski
S. Bieniasz, S. Ciszewski, and B. Snie˙

Aspects extend an environment using introductions to nodes. Agents functionality is extended by deﬁning cut points and advices.

5

Experiments

To test the Aspect MAFES system, several experiments were done. Results of
two of them are presented below.
5.1

First Experiment: Heat Exchange and Motion

Two phenomena are considered in this experiment: heat exchange and a motion.
A temperature map for a sequence of time stamps is presented in Fig. 3-(I).
Thermophysical parameters for layers are presented in Table 1. They are chosen
in a way that heat exchange in the upper layer is much slower then in the lower
layer.

Fig. 3. (I) – temperature map for consequent time stamps in the ﬁrst experiment – in
the right column upper layer is moving ﬁve times faster then in the left column; (II) –
temperature (left column) and FS coeﬃcient (right column) maps for consequent time
stamps in the second experiment
Table 1. Termophysical parameters used in experiments
Parameter

First Experiment
Second Experiment
Lower layer Upper layer Cast
Mould
Heat conductivity [W/K b]
20
5
210
1
Speciﬁc heat [J / (kg K)]
300
1180
1180
1333
Density [kg / m3]
1200
2250
2550
1500
Latent heat [J / kg]
3.73E+5
610
Eutectic temperature [◦ C]

Multiagent Simulation of Physical Phenomena

765

Two speeds of the upper layer vu were tested. Left column (a) is a result for
the speed vu = 0.002[m/s], right (b) is for vu = 0.01[m/s]. Time stamps are
chosen in a way that pictures in the same row have the same positions of the
upper layer.
5.2

Second Experiment: Heat Exchange and Crystallization

In this experiment heat exchange and crystallization in a foundry process model
are considered. Cast has a stepped shape. Results of simulation are presented
in Fig. 3-(II). Rows represent consecutive time stamps. In the left column (a)
temperature map is presented, in the right column (b), FS coeﬃcient, which
represent the fraction of the solid phase, is shown. Termophysical parameters
for mould and cast are presented in Table 1. Initially, temperature of the cast is
700 [◦ C], and of the mould is 20 [◦ C].
The shape of a cast causes a big diﬀerence in the speed of cooling down of
speciﬁc regions. As a consequence, microcrystalline structure is non-uniform.

6

Conclusions

Presented concept of the aspect-multiagent simulation system may be applied to
a wide variety of practical problems, which must take into consideration cooperation of superimposed processes occurring within the common environment.
Some experiments show usefulness of the proposed computational approach.
Further development will include improvement of system versatility through incorporation of other agent and aspect types as well as adaptation to other applications.
There are several main advantages resulting from AOP application during
development of the simulation system:
– there is a straight correspondence between physical phenomenon (used during analysis) and aspect (used in software development);
– code for the every physical phenomenon and other concerns (such as control, visualization, storing results) is modularized (written in one unit of
compilation);
– there is an analogy between phenomenon overlapping and aspect weaving;
– building versions of the system for speciﬁc requirements is very simple (it is
enough to weave appropriate aspects);
– implementation of conﬁguration of the system is easier;
As a result, structure of the code is much simpler and easy to understand and
maintain.

References
1. Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C., Loingtier, J.M.,
Irwing, J.: Aspect-oriented programming. In: Proc. of ECOOP’97, Springer Verlag
(1997) 220–242
2. Kendall, E.: Aspect-oriented programming for role models. In: In Proc. of The
Aspect-Oriented Programming Workshop at ECOOP’99. (1999)

766

´ zy´ski
S. Bieniasz, S. Ciszewski, and B. Snie˙

3. Garcia, A., Chavez, C., Silva, O., Silva, V., Lucena, C.: Promoting advanced separation of concerns in intra-agent and inter-agent software engineering. In: Workshop
on Advanced Separation of Concerns in Object-oriented Systems (ASoC) at OOPSLA’2001, Tampa Bay, Florida, USA (2001)
4. Robbes, R., Bouraqadi, N., Stinckwich, S.: An aspect-based multi-agent system. In:
Research Track of the ESUG 2004 Smalltalk Conference, Kthen (Anhalt), Germany
(2004)
5. Ferber, J., Gutknecht, O.: A meta-model for the analysis and design of organizations
in multi-agent systems. In: Third International Conference on Multi-Agent Systems
(ICSMAS98). (1998) 128–135
6. Weiss, G., ed.: Multiagent Systems: A Modern Approach to Distributed Artiﬁcial
Intelligence. The MIT Press, London (1999)
7. Bieniasz, S., Cetnarowicz, K., Nawarecki, E., Kluska-Nawarecka, S.: Agentbased simulation in ﬁnite element environment. In Binder, Z., ed.: Management
and Control of Production and Logistics: a proceedings volume from the 2nd
IFAC/IFIP/IEEE conference. Volume 1., Grenoble, Oxford, Pergamon (2001) 545–
550
8. AspectJ Team: The AspectJ documentation. (http://www.eclipse.org/aspectj/)
9. Kiczales, G., Hilsdale, E., Hugunin, J., Kersten, M., Palm, J., Griswold, W.: An
overview of AspectJ. In: Proc. of the ECOOP 2001. Volume 2072 of Lecture Notes
in Computer Science., Springer (2001)

