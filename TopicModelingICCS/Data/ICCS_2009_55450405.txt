A Parallel Nonnegative Tensor Factorization
Algorithm for Mining Global Climate Data
Qiang Zhang1 , Michael W. Berry2, Brian T. Lamb2 , and Tabitha Samuel2
1

Department of Biostatistical Sciences, Wake Forest University Health Sciences,
Medical Center Blvd, Winston Salem, NC 27157
qizhang@wfubmc.edu
2
Department of Electrical Engineering and Computer Science,
University of Tennessee, 203 Claxton Complex, Knoxville, TN 37996-3450
{berry,blamb,tsamuel}@eecs.utk.edu

Abstract. Increasingly large datasets acquired by NASA for global climate studies demand larger computation memory and higher CPU speed
to mine out useful and revealing information. While boosting the CPU
frequency is getting harder, clustering multiple lower performance computers thus becomes increasingly popular. This prompts a trend of parallelizing the existing algorithms and methods by mathematicians and
computer scientists. In this paper, we take on the task of parallelizing the
Nonnegative Tensor Factorization (NTF) method, with the purposes of
distributing large datasets into each cluster node and thus reducing the
demand on a single node, blocking and localizing the computation at the
maximal degree, and ﬁnally minimizing the memory use for storing matrices or tensors by exploiting their structural relationships. Numerical
experiments were performed on a NASA global sea surface temperature
dataset and result factors were analyzed and discussed.
Keywords: nonnegative tensor factorization, parallel computation,
data mining, global climate.

1

Introduction

Data mining techniques are commonly used for the discovery of interesting patterns in earth science data. Such patterns can help to both understand and
predict changes in climate and the global carbon cycle. Regions of the earth can
be partitioned into land and ocean areas from which subregions described by an
ensemble land- or sea-based parameters are possible. Patterns within these subregions are mined to reveal both spatial and temporal autocorrelation. In this
study, we sought to identify regions (or clusters) of the earth which have similar
short- or long-term characteristics. Earth scientists are particularly interested in
patterns that reﬂect deviations from normal seasonal variations (e.g., El Ni˜
no
and La Ni˜
na). Interpreting these patterns can facilitate a better understanding
of biosphere processes and the eﬀects human policy decisions at a global scale.
Such eﬀects include deforestation, air and water quality, urbanization, and global
warming.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 405–415, 2009.
c Springer-Verlag Berlin Heidelberg 2009

406

Q. Zhang et al.

Eigensystem-based analysis driven by principal component analysis (PCA)
and the singular value decomposition (SVD) has been used to cluster climate indices [14]. Unfortunately, the orthogonal matrix factors (basis vectors) generated
by the SVD are diﬃcult to interpret and as discussed by Steinbach et al. in [13],
stronger signals typically mask weaker signals. Among other data mining techniques, (approximate) Nonnegative Matrix Factorization (NMF) has attracted
much attention since the early work of Paatero and Tapper [11] and Lee and
Seung’s seminal paper on learning the parts of objects [9]. In NMF, an m × n
(nonnegative) mixed data matrix X is approximately factored into a product of
two nonnegative rank-k matrices, with k small compared to m and n, X ≈ W H.
This factorization has the advantage that W and H can provide a physically
realizable representation of the mixed data, due to the inherent nonnegativity
constraint. Nonnegative Tensor Factorization (NTF) is a natural extension of
NMF to higher dimensional data. In NTF, high-dimensional data, such as 3D
or 4D global climate data, is factored directly and is approximated by a sum of
rank-1 nonnegative tensors. See Figure 1 for an illustration of 3-D tensor factorization. Similar to NMF, we also see a quick development of NTF algorithms
[12,15] and their applications in recent years. In this research, we exploit the
nonnegative tensor factorization of multidimensional climate data in order to
capture patterns/signals not possible with traditional 2-way factor analysis.

2

Parallel Nonnegative Tensor Factorization

In nonnegative tensor factorization (NTF), high-dimensional data, such as global
sea surface temperature, is factored directly and is approximated by a sum of
rank-1 nonnegative tensors. See Figure 1 for an illustration of a 3-D tensor
factorization.
Definition 1. Let T ∈ RD1 ×D2 ×D3 be a nonnegative tensor and define
k

Tˆ =

x(i) ◦ y (i) ◦ z (i) ,
i=1

to be in a CANDECOMP (CP) canonical factored form, where x(i) ∈ RD1 , y (i) ∈
RD2 , and z (i) ∈ RD3 are all nonnegative. Then, a rank-k nonnegative approximate tensor factorization problem is defined as
min ||T − T˜ ||2F , subject to T˜ ≥ 0.
˜
T

(1)

Given the large datasets we encounter with global climate data, our interest in
this study is to parallelize the problem posed above and distribute computations
evenly to processors in a distributed computing environment. By Deﬁnition (1),
the NTF problem is posed as a non-linear optimization problem, which is not
easily parallelizable. In a naive approach, we may separate the original data cube
into 3D blocks and ﬁt factors for each block in parallel. However, the factors from

A Parallel Nonnegative Tensor Factorization Algorithm

407

Fig. 1. An illustration of 3-D tensor approximate factorization using a sum of rank one
tensors

each block may not match together, which is to say, blocks along each dimension
should have an identical factor in either X, Y or Z. This almost certainly would
not be the case when we optimize for three factors individually for each block.
Nevertheless, our hope lies in the fact that a common approach in solving (1) is
the Alternating Least Squares (ALS) method [3,6], which is a special case of the
block coordinate descent method, also known as the Block Gauss-Seidel (BGS)
method [7]. At each iteration step, the BGS method (in alternating fashion)
optimizes only a subset of the variables, while keeping the rest ﬁxed, and turns
the original non-convex problem into a sequence of convex least squares subproblems. In NTF, this means holding two matrix factors ﬁxed while ﬁtting for
the other one. Thus, the original NTF problem is transformed into three semiNMF (nonnegative matrix factorization) sub-problems in each iteration. Here
we use the term “semi” to represent the optimization only for one of the two
factor matrices, while assuming the other is given.
Definition 2. Given A ∈ Rm×n ≥ 0 and W ∈ Rm×k ≥ 0, a semi-NMF problem
is defined as
min Φ(H) = ||A − W H||2F , subject to H ≥ 0.
H

(2)

One important observation on (2) is that solving (2) is equivalent to solving for
each column of H independently, i.e.
min Φ(hi ) = ai − W hi
hi

2
F,,

(3)

where ai and hi are the column vectors of A and H. This provides a great
opportunity for parallelization of each semi-NMF subproblem, even though the
original NTF problem is not deﬁned for easy parallelization.
The ALS approach splits the NTF problem (1) into three semi-NMF subproblems, i.e. given X and Y , we solve for Z by
min Φ(Z) = Tz − (X
Z

Y )Z

2
F,

(4)

where Tz ∈ RD1 D2 ×D3 is the unfolded tensor T along the z dimension and
(Tz )(j−1)∗D2 +i,k = tijk . X Y is the Khatri-Rao product of the two matrices.
Next we ﬁx X and Z, and solve for Y by

408

Q. Zhang et al.

min Φ(Y ) = Ty − (X

Z)Y

Y

2
F,

(5)

where Ty ∈ RD1 D3 ×D2 is the unfolded tensor T along the y dimension and
(Ty )(k−1)∗D3 +i,j = tijk . Finally, we ﬁx Z and Y , and solve for X by
min Φ(X) = Tx − (Z

Y )X

X

2
F,

(6)

where Tx ∈ RD2 D3 ×D1 is the unfolded tensor T along the x dimension and
(Tx )(k−1)∗D3 +j,i = tijk .
Here we use a modiﬁed version of a Projected Gradient Descent (PGD)
method developed by Lin [10] to solve the semi-NMF problem (2). The projected gradient descent method is basically adding a projection function to the
regular gradient descent method.
H (p+1) = P+ [H (p) − αp ∇Φ(H (p) )],
T

(7)

T

where the gradient is ∇Φ(H) = W W H − W A, and P+ is the projection
function onto the nonnegative domain. Lin [10] enhanced the performance of
the PGD method by improving the search for the optimal step size using the
Armijo rule.
Two observations can be made about the PGD method. First, to solve for H,
we only need to use two quadratic forms of W and A, i.e. W T W and W T A
and by comparing the sizes of two quadratic forms, i.e. k × k and k × n, with the
sizes of W and A, i.e. m × k and m × n, and knowing m, n
k, we can save
considerable memory required to store these matrices. Second, we can also split
W and A and compute W T W and W T A in parallel, i.e.
T

p

W W =
i=1

WiT Wi

T

p

and W A =

WiT Ai .

i=1

Here, Wi ∈ Rm/p×k is a block sub-matrix of W , Ai ∈ Rm/p×n is a block submatrix of A, p is the number of processors, and i = 1, . . . , p.
2.1

Distribution of Data

We distribute four matrices to independent processors in the following ways to
facilitate parallel I/O and computation. We divide Tz by row blocks, Tzi , each
block having a size of D1 D2 /p × D3 . This allows for parallel loading of data.
One important observation is that we do not need to save Ty and Tx in the
memory due to their relationships with Tz , stated in the following proposition
(proof is straightforward and thus omitted). These relationships will be used in
computing the quadratic forms.
Proposition 1. The relationships between Tx , Ty and Tz are:
1. Each column of Ty is a vectorized row block matrix of Tz .

A Parallel Nonnegative Tensor Factorization Algorithm

409

2. Each row block matrix of Tx is a transpose of the corresponding row block
matrix of Tz .
We next divide X, Y and Z by row blocks, each block having a size of Di /p ×
k, i = 1, 2, 3. This allows for parallel initialization and writing of these matrices
to output. Note that if D1 , D2 or D3 cannot be divided by p, the last block will
have a remainder number of rows.
2.2

Parallelization of the First Semi-NMF (4)

For convenience, we represent X Y by W . We ﬁrst collect Xi from each
process(or) to form a full X, and compute the local Wi = X Yi . We then locally
compute WiT Wi and WiT Tzi and compute their sums (W T W and W T Tz ,
respectively) using the dsesum2d subroutine provided by BLACS [4]. W T Tz is
then partitioned into column blocks of a size k × D3 /p for input into the PGD
subroutine. Thus, instances of the PGD subroutine run in parallel to solve for
each block Zi . This process is illustrated in Figure 2.
2.3

Parallelization of the Second Semi-NMF (5)

Here, we represent X Z by W . We ﬁrst collect Zi from each process(or)
to form a complete Z, and since we already have the complete X within each
process(or), we can compute the complete W = X Z, and thereby compute
W T W . To compute W T Tyi , notice that each column of Ty is a row block of Tz ,

Fig. 2. Flowchart for the ﬁrst semi-NMF subproblem (4) within NTF

410

Q. Zhang et al.

Fig. 3. Flowchart for the second semi-NMF subproblem (5) within NTF

and thus we can avoid saving Ty in memory and use the vectorized blocks of the
local Tz to multiply with W . Because W T Tyi is locally computed, it can used
by a call to the PGD subroutine. Thus, independent calls to the PGD subroutine
solve for each block Yi in parallel. This process is illustrated in Figure 3.
2.4

Parallelization of the Third Semi-NMF (6)

Here, we represent Z Y by W . We use the already collected complete Z and
compute Yi in order to formulate Wi = Z Yi , which would then be used to
compute W T W . To compute WiT Txi , notice that each row block of Tx is the
transpose of the corresponding row block of Tz , and thus we can avoid saving
Tx in memory and use the row blocks of local Tz to multiply with Wi . We
deploy the LAPACK [1] subroutine dgemm to avoid transposing Tzi . To sum up
WiT Wi and W T Txi , we divide W T Tx into column blocks of a size k × D1 /p and
make separate calls to the PGD subroutine. Again, these calls to PGD execute in
parallel to solve for each block Xi . The ﬂowchart for this process is very similar
to the one in Figure 2.

3

Data and Experimental Results

The six climate-based indices used for this study (see Table 1) were provided
by researchers at the NASA Ames Research Center (ARC) in Moﬀett Field,
CA. Pre-processing was performed to guarantee that the six variables matched
the same coordinate system and time span. Most of the values are interpolated

A Parallel Nonnegative Tensor Factorization Algorithm

411

Table 1. Climate variables considered in this study with adjustments (or shifts) to
enforce nonnegativity (if needed)
Name
sst
ndvi
tem
pre
hg500

Description
Adjustment
sea surface temperature
+273.15
normalized diﬀerence vegetation index
+0.2
land surface temperature
+273.15
precipitation
geopotential height (elevation) for
+300
barometric pressure of 500 millibars
hg1000 geopotential height (elevation) for
+300
barometric pressure of 1000 millibars

monthly averages on a uniform grid (with a slight distortion at the poles). Interpolation for some of the variables (such as geopotential height) necessarily
produced negative values in some of the extreme regions (where it is diﬃcult
to sample or when surface pressure1 is below 1000 mbar). It is not uncommon
for many of the array values to be interpolated due to the sparsity of the original samples. The Arctic region, in particular, has few weather stations so that
data values for many of the corresponding (lattitude, longitude) coordinates are
interpolated from readings taken hundreds of miles away. Simple shifts (scalar increments) to these interpolated values are applied to all negative array elements
to insure that all NTF input arrays are nonnegative.
Each parameter (from Table 1) is deﬁned by a 3-way array or datacube of
dimension 720 × 360 × 252. The ﬁrst two dimensions correspond to longitude
and latitude coordinates, respectively, and the third dimension represents the
month of reading. The time dimension spans from January 1982 to December
2002 for a total of 252 months (i.e., 21 years).

Fig. 4. Computation speedup of the parallel NTF algorithm

1

Such was the case for the New Orleans area during hurricane Katrina.

412

Q. Zhang et al.

(a)

(b)

(c)

Fig. 5. (a) Global map of sea surface temperature patterns, (b) monthly variations
of sea surface temperature patterns, (c) yearly variations of sea surface temperature
patterns

A Parallel Nonnegative Tensor Factorization Algorithm

413

All computations were performed on a Sun Fire X4600 M2 with 16 AMD
2.8GHz cores and 32GB of RAM. The original MATLAB R NTF codes were
rewritten in C++ and compiled with several libraries including LAPACK [1],
ScaLAPACK [2], BLACS [4], BLAS [5] and MPICH [8].
3.1

Speedup of the Parallel Computation

We use a simulated datacube in the size of 600×400×200 to evaluate the speedup
of the parallel NTF computation, by setting the number of processors at 1, 2,
4, 8 and 10. The size was deliberately chosen to be multiples of the number of
processors to avoid any inconvenience in data distribution. The leftmost graph of
Figure 4 shows the total computation time used for 100 iterations of the parallel
NTF algorithm, taken from the processor that ﬁnishes last. The rightmost graph
of Figure 4 shows the corresponding speedup. A sublinear speedup was achieved
for 2 to 8 processors with an approximate peak speedup of 6.8 (among all runs
with up to 10 processors).
3.2

Clustering Global Climate Data

The sea surface temperature parameter, originally in MATLAB R format, was
partitioned into four sections and written in ASCII format for parallel reads
by four diﬀerent processes. The original data cube was ﬁrst reshaped into a
259200 × 12 × 21 array, and after removing sections corresponding to land-based
coordinates the resulting data cube was 176876 × 12 × 20. We also removed the
last year data of data to make the time dimension a multiple of 4 for convenience.
Our intent was to extract typical monthly variation patterns in the second
(tensor) factor, typical yearly variation patterns in the third factor and their
corresponding global maps in the ﬁrst factor. All three factors are shown in
Figure 5, and they are sorted by the norm of the CP tensor from the greatest to
the smallest in order to rank signiﬁcance. We note that in Figure 5.b, the results
in the last month are replicated at month 0 to reﬂect a full cycle.
The second factor represents El Ni˜
no, which has a characteristic peak in the
winter and its global map shows a dark red tongue-shaped area oﬀ the coast
of Ecuador. A yearly warming trend is observed in the fourth factor, mostly in
the northern hemisphere and around the northern Paciﬁc coastal area of China
and Russia, and also to the northern Atlantic coastal area of the United States
and Canada. It is also of interest to note that the last pattern shows some clear
seasonal variations mostly along coastal areas (see the isolated red regions).

4

Conclusions

In this study, the nonnegative tensor factorization (NTF) method as a data mining tool is parallelized with the purpose of eﬃciently processing large datasets
encountered in earth science. The parallel algorithm exploits the structural

414

Q. Zhang et al.

relationships between matrices used in the original NTF algorithm for data distribution, memory savings and even computation task distribution. It is specifically applied to NASA-provided global land- and sea-based climate data with
interesting results presented and analyzed for global sea surface temperature, in
particular. Although not reported in this work, additional parallel NTF experiments using diﬀerent combinations of the climate variables listed in Table 1 have
been conducted. We expect to report on the results of clustering multiple landand sea-based parameters in the near future.

Acknowledgement
This research was sponsored in part by the National Aeronautics and Space
Administration (NASA) Ames Research Center under contract No. 07024004.

References
1. Anderson, E., Bai, Z., Bischof, C., Blackford, S., Demmel, J., Dongarra, J., Du
Croz, J., Greenbaum, A., Hammarling, S., McKenney, A., Sorensen, D.: LAPACK
Users’ Guide, 3rd edn. SIAM, Philadelphia (1999)
2. Blackford, L.S., Choi, J., Cleary, A., D’Azevedo, E., Demmel, J., Dhillon, I., Dongarra, J., Hammarling, S., Henry, G., Petitet, A., Stanley, K., Walker, D., Whaley,
R.C.: ScaLAPACK Users’ Guide. SIAM, Philadelphia (1997)
3. Cichocki, A., Zdunek, R., Amari, S.: Hierarchical ALS Algorithms for Nonnegative
Matrix and 3D Tensor Factorization. In: Davies, M.E., James, C.J., Abdallah,
S.A., Plumbley, M.D. (eds.) ICA 2007. LNCS, vol. 4666, pp. 169–176. Springer,
Heidelberg (2007)
4. Dongarra, J., Whaley, R.C.: LAPACK Working Note 94: A User”s Guide to the
BLACS v1.0, Technical Report: UT-CS-95-281 (1995)
5. Dongarra, J., Du Croz, J., Duﬀ, I.S., Hammarling, S.: A set of Level 3 Basic Linear
Algebra Subprograms. ACM Trans. Math. Soft. 16, 1–17 (1990)
6. Faber, N.K.M., Bro, R., Hopke, P.K.: Recent developments in CANDECOMP/PARAFAC algorithms: a critical review. Chemometr. Intell. Lab. 65, 119–
137 (2003)
7. Grippo, L., Sciandrone, M.: On the convergence of the block nonlinear Gauss-Seidel
method under convex constraints. Operations Research Letters 26, 127–136 (2000)
8. Gropp, W., Lusk, E., Skjellum, A.: Using MPI: Portable Parallel Programming
with the Message Passing Interface. MIT Press, Cambridge (1994)
9. Lee, D., Seung, H.: Learning the Parts of Objects by Non-Negative Matrix Factorization. Nature 401, 788–791 (1999)
10. Lin, C.: Projected gradient methods for non-negative matrix factorization. Neural
Computation 19, 2756–2779 (2007)
11. Paatero, P., Tapper, U.: Positive matrix factorization a nonnegative factor model
with optimal utilization of error-estimates of data value. Environmetrics 5, 111–126
(1994)
12. Shashua, A., Hazan, T.: Non-negative tensor factorization with applications to
statistics and computer vision. In: Proceedings of the 22nd International Conference
on Machine Learning, pp. 792–799 (2005)

A Parallel Nonnegative Tensor Factorization Algorithm

415

13. Steinbach, M., Tan, P.-N., Kumar, V., Klooster, S., Potter, C.: Discovery of climate
indices using clustering. In: Proceedings of the Ninth ACM SIGKDD Conference
on Knowledge Discovery and Data Mining (KDD 2003), Washington, DC, August
24-27, pp. 446–455 (2003)
14. Storch, H.V., Zwiers, F.W.: Statistical Analysis in Climate Research. Cambridge
University Press, Cambridge (1999)
15. Zhang, Q., Wang, H., Plemmons, R., Pauca, P.: Tensor methods for hyperspectral data analysis: a space object material identiﬁcation study. Journal of Optical
Society of America A 12, 3001–3012 (2008)

