Sliced-Time Computations with Re-scaling for
Blowing-Up Solutions to Initial Value
Diﬀerential Equations
Nabil R. Nassif1 , Dolly Fayyad2 , and Maria Cortas3
1

American University of Beirut, Beirut Lebanon
Lebanese University, Faculty of Science II, Fanar Lebanon
Lebanese University, Computer Center, Museum Square, Beirut Lebanon
2

3

Abstract. In this paper, we present a new approach to simulate timedependent initial value diﬀerential equations which solutions have a common property of blowing-up in a ﬁnite time. For that purpose, we introduce the concept of “sliced-time computations”, whereby, a sequence
of time intervals (slices) {[Tn−1 , Tn ]| n ≥ 1} is deﬁned on the basis of a
change of variables (re-scaling), allowing the generation of computational
models that share symbolically or numerically “similarity” criteria. One
of these properties is to impose that the re-scaled solution computed on
each slice do not exceed a well-deﬁned cut-oﬀ value (or threshold) S. In
this work we provide fundamental elements of the method, illustrated
on a scalar ordinary diﬀerential equation y = f (y) where f (y) veriﬁes
∞
f (y)dy < ∞. Numerical results on various ordinary and partial dif0
ferential equations are available in [7], some of which will be presented
in this paper.

1

Introduction

Let Ω be an open domain of IRn with boundary Γ , suﬃciently regular. We
consider in this work some numerical aspects related to the blow-up in ﬁnite
time, of the solution of the semi-linear parabolic equation consisting in ﬁnding
{Tb , u} where 0 < Tb < ∞, u : Ω × [0, Tb ) such that:
ut − ∆u = f (u), x ∈ Ω, 0 ≤ t < Tb , u(x, 0) = u0 (x) ≥ 0, ∀x ∈ Ω,
u(x, t) = 0, ∀x ∈ Γ, 0 < t < Tb .

(1)

The function f is such that f (y) = O(y p ) or f (y) = O(eky ) as y → ∞ and
veriﬁes:
f : IR → IR+ , with f ∈ C 1 , f and f strictly monotone increasing on IR+ .
(2)
Under (2), there exists a unique solution to (1) such that, if u0 ≥ 0, then
u(., t) ≥ 0, for all t in the time domain of existence for u. Furthermore, it is
∞ 1
dx < ∞ for some a ≥ 0. In fact, it is
easy to verify that under (2.3), then a f (x)
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 58–65, 2005.
c Springer-Verlag Berlin Heidelberg 2005

Sliced-Time Computations with Re-scaling for Blowing-Up Solutions

59

shown in ([4] pp. 55-56), that this condition is necessary for ﬁnite blow-up time to
problem (1). Thus, the solution {Tb , u} is assumed to satisfy a blowing-up property, speciﬁcally the existence of a time Tb , such that limt→T − ||u(., t)||∞ = ∞.
b
where the L∞ -norm is deﬁned by ||g||∞ = maxx∈Ω |g(x)|, for all functions g : IR
∞
→ IR . Under (2), the blow-up time Tb , veriﬁes (see [4]), 0 [ f (z)]−1 dz <
∞
u
Tb < 0 [f (z) − λ1 z]−1 dz, with δ ∗ = λ1 sup{ f (u)
, u ≥ 0} < 1, u0 =, λ1 being the ﬁrst eigenvalue of the problem −∆Φ = λΦ. As to the points of Ω
where the explosion occurs, Friedman et McLeod ([10]) proved that the set
E of blow up points of (1), form a compact subset E in Ω. In case the domain Ω satisﬁes a radial symmetry property around the origin o, and u0 is
a radial function, then E reduces to a single point which is the origin itself.
This property is conﬁrmed by [4] who gives also the asymptotic behavior of
the solution when t → Tb . Space discretization of (1) leads naturally to very
stiﬀ solutions that demonstrate rapid growth in a short range of time, particularly when numerical time integration gets close to the blow-up time. This
rapid growth imposes major restrictions on the time step. It is easily veriﬁed
in such case, that even adaptive numerical procedures (available for example
in the various ode MATLAB solvers) fail to provide an acceptable approximation to either the solution or to the blow-up time. Thus, our objective in this
work is to obtain numerical algorithms for ﬁnding an approximation to u and
as well an estimate of the blow-up time Tb , using a new rescaling technique.
In previous papers (see [8], [9]) we have implemented a numerical method to
solve (1) based on an -perturbation that transforms the system into an equivalent one that possesses a “mass conservation property” (see [13]). The solution of this resulting problem is known to be global, thus subject to be solved
using standard numerical methods for stiﬀ systems. Several authors have attempted to solve numerically ﬁnite blow-up time problems. To our knowledge,
initial work can be found in [11],[12], when f (u) = λeu . The authors compute an approximation to the blow-up time, for several values of λ, through a
semi-discretization of the space variables, then solve the resulting ordinary differential system of equations using Runge-Kutta methods. More sophisticated
algorithms based on rescaling techniques have been considered by Chorin [6],
and also Berger and Kohn [5] when f (u) = uγ . Such technique can describe
accurately the behavior of the solution near the singularity. However, one of
its main disadvantages is a varying mesh width and time step at each point
in space-time, linked to the rapid growth in the magnitude of the solution.
Consequently, this requires simultaneously the adjustment of boundary conditions to avoid the loss of accuracy far from the singularity. In References
[1],[2], the authors analyze the blow-up behavior of semidiscretizations of reaction diﬀusion equations. More recently, Acosta, Duran and Rossi derived in
[3] an adaptive time step procedure for a parabolic problem with a non-linear
boundary condition that causes blow-up behavior of the solution. They used
also an explicit Runge Kutta scheme on the resulting system of ordinary differential equations, obtained from the semi-discretization of the space variable
using a standard piecewise linear ﬁnite element method followed by lumping

60

N.R. Nassif, D. Fayyad, and M. Cortas

the mass matrix. A time rescaling procedure is also introduced with necessary and suﬃcient conditions for the existence of blow-up for the numerical
solution.
Our approach in this paper diﬀers from those just cited in the sense that we
attempt to rescale simultaneously the time and space variables, aiming at the
generation of a sequence of “slices” of time intervals {[Tn−1 , Tn ] : n = 1, 2, ...},
such that on each of these subintervals, the computation of the solution can be
easily controlled by a preset threshold (or cut-oﬀ ) value S, avoiding thus
overﬂow in the global computations. We illustrate the method on an elementary
diﬀerential equation y = f (y) having blow-up under (2). In fact, the technique
we are presenting was motivated by an invariance property in the cases when
f (y) = ey or f (y) = y p . The scalar problem consists in ﬁnding {Tb , y}, where
0 < Tb < ∞, y : [0, Tb ) → R such that:
dy
= f (y), 0 < t < Tb , y(0) = y0 , lim y(t) = ∞.
t→Tb
dt

(3)

In order to determine the ﬁrst time subinterval [0, T1 ], we start by normalizing
(3), by introducing the normalizing parameters α(1) and β (1) through the change
of variables y(t) = y0 +α(1) z(s), t = β (1) s. Thus, the base Model corresponding
to (3), is given by:
β (1)
dz
= g1 (s) = (1) f (y0 + α(1) z), 0 < s ≤ s1 , z(0) = 0, z(s1 ) = S.
ds
α

(4)

S

th
where s1 = 0 g1dz
slice
(z) . Stepping up the solution forward, we deﬁne the n
by rescaling both variables y and t in the initial value problem

dy
= f (y), Tn−1 < t, y(Tn−1 ) = yn−1 ,
dt
using the change of variables:
t = Tn−1 + β (n) s, y(t) = yn−1 + α(n) z(s)

(5)

Thus, the subinterval [Tn−1 , Tn ] is determined recurrently for n ≥ 2 using the
rescaled model:
dz
= gn (z), 0 < s ≤ sn , z(0) = 0, z(sn ) = S.
ds
(n)

(6)
S

β
The function gn (.) is given by gn (z) = [f (yn−1 )+α(n) z] α
(n) , with sn = 0 gn (z)dz.
Note that, the base and rescaled models are respectively deﬁned by the parameters: {g1 , s1 , g1 (0), g1 (S)} and {gn , sn , gn (0), gn (S)}. When gn = g1 , both the
rescaled and base models are identical. Such is the case when f (y) = ey or
f (y) = y p , with respectively αn = 1 βn = e−yn−1 and αn = yn−1 βn = (yn−1 )1−p .
In general, the sequences {Tn } and {yn = y(Tn )} verify:

Tn = Tn−1 + β (n) sn , yn = yn−1 + α(n) S

(7)

Sliced-Time Computations with Re-scaling for Blowing-Up Solutions

61

Determining the sequences {α(n) } and {β (n) } appears to be crucial in the implementation of our rescaling method. This will be done in sections 2 and 3
respectively. More precisely, the sequence {α(n) } is determined consistently with
the explosive behavior of the solution of the initial value problem (3). In section
3, we analyze the sequence {β (n) } which allows the computation of the sequence
{Tn }, using (5.2), Tn = Tn−1 + β (n) sn . In this view, we start by deﬁning a
“similarity” criterion between the base and rescaled models identiﬁed by the
parameters:
Deﬁnition 1. The rescaled model (6) is said to be similar to the base model (4),
if there exists two positive constants c and C independant of n, such that:
cg1 (0) ≤ gn (0) ≤ gn (z) ≤ gn (S) ≤ Cg1 (S).
The sequences {α(n) } and {β (n) are determined as follows.
1. The main criteria on which we rely to determine the adequate values of the
parameters {α(n) } is the explosive behavior of the initial problem (3). That
is, the sequences {Tn } and {yn } generated by (7) should satisfy the blow-up
behavior of the solution, limn→∞ yn = ∞, yn = y(Tn ), limn→∞ Tn = Tb . On
(n)
(n)
S
that basis and given the estimate αf (ynS) ≤ Tn − Tn−1 ≤ fα(yn−1
) , the sequence
{αn } must verify the necessary conditions: (i) the inﬁnite series
(n)
is divergent and (ii) limn→∞ ( fα(yn ) ) = 0.

∞
n=1

α(n)

Note that the 2 cases, α(n) = 1 and α(n) = yn−1 (corresponding to gn = g1 ,
when respectively, f (y) = ey and f (y) = y p ) verify such necessary conditions.
Moreover, the resulting sequences {yn } reveal to be respectively geometric or
arithmetic, which signiﬁcantly simpliﬁes the implementation of the rescaling
method. Although conditions (i) and (ii) provide a wide range of choices for
the sequence {α(n) } we restrict ourselves to the choices α(n) = yn−1 in the
case f (y) = O(y p ) and α(n) = 1 if f (y) = O(ey ).
2. For the sequence {β (n) }, we rely on the estimate gn (0) ≤ gn (z) ≤ gn (S)
which implies gnS(S) ≤ sn ≤ gnS(0) , ∀n. Thus, ﬁxing the bounds on sn can
β (n)
f (yn−1 ) and
α(n)
β (n)
β (n)
gn (S) = α(n) f (yn ), hence gn (z) depends directly on the ratio α
(n) and
the sequence {yn }. Since we cannot ﬁx simultaneously gn (0) and gn (S),
gn (S)
n)
we let rn = f f(y(yn−1
) = gn (0) and choose gn (0) = g1 (0), implying that

be obtained directly by ﬁxing those of gn . Since gn (0) =

(1)

f (0)
g1 (0)
β
β (n) = α(n) f (y
= α(n) α
. Thus g1 (0) ≤ gn (z) ≤ g1 (0)rn im(1) f (y
n−1 )
n−1 )

plying

S
rn g1 (0)
(n)

≤ sn ≤

S
g1 (0) .

If f (y) = O(y p ), α(n) = yn−1 or f (y) =

O(ey ), α = 1, the sequence {rn } is uniformly bounded and one has similarity between the base and rescaled models according to Deﬁnition 1. Furn−1
= β (n) sn ≤ β (n) T1 gS1 (0) .
thermore, Tn −T
T1

62

N.R. Nassif, D. Fayyad, and M. Cortas

Thus, re-scaling Algorithm Main features are described by the following steps:
1. Choice of the cut-oﬀ value S, and of the computational tolerance εT ol
f
2. Given ymax
the maximum acceptable argument for f (.) in the computational environment, verify Compatibility Test to insure no overﬂows
would cause process interruption. When α(n) = 1, Test is given by:
yf
1 −1
S
.
+ 1 < max
Sf
εT ol
S
3. Using RK4 (or other method) solve the base model to determine [0, T1 ] and
y(t) on [0, T1 ] using cut-oﬀ value S.
(a) Start the recurrence for n > 1
(b) Re-scaling the variables (t = Tn−1 + β (n) s y(t) = yn−1 + α(n) z(s))
(c) Specify and program the function gn .
(d) Solve the re-scaled model using RK4: Determine sn using cut-oﬀ value
S.
(e) Deduce Tn = Tn−1 + β (n) sn and y(t) on [Tn−1 , Tn ].
n−1
≤ εT ol . nST OP := n
(f) End recurrence when Tn −T
T1
4. Set the approximation blow-up as Tb := TnST OP
5. Compile the global solution y(t) on [0, Tb ].
6. Visualize the numerical solutions.

2

Application to a Blowing-Up Semi-linear Parabolic
System

Applying the method of sliced-time computations on the problem (1) is done
through a ﬁrst step consisting of a semi-discretization in space of this system.
This leads to a system of ordinary diﬀerential equations. In fact, ﬁnding an
invariance, or even deﬁning a similarity on (1) seems to be a very complex
task. On the other hand, dealing with a a ﬁrst order semi-discretized system
resulting from (1), allows an eventual track to applying the method of slicedtime computations. We introduce some notations.
Deﬁnition 2. If V = (V1 , V2 , ..., Vk )T ∈ IRk , then F (V ) = (f (V1 ), f (V2 ), ...,
f (Vk )T ∈ IRk . On the other hand, DV is the diagonal matrix whose diagonal
elements are the components of the vector V , i.e. DV = Diag(V ) ∈ IRk×k .
We choose the ﬁnite diﬀerences method for discretization. Let h = (h1 , h2 , ...,
hd )T ∈ IRd , (|h| = maxi |hi |), the discretization parameter. k = k(h) is the
number of nodes in Ω as well as the dimension of the semi-discretized problem.
The solution u of (1) being known on the boundaries Γ , the approached solution
U (t) of (8) is only about the nodes in Ω. k(h) = O(|h|−d ) and lim|h|→0 k(h) =
∞. Under such conditions, the ith component of Ui (t) is an approximation of
the solution u on the node xi ∈ Ω and on the time t. Let ui (t) = u(xi , t),
∀i = 1, ..., k and let u(t) = {ui (t) : 1 ≤ i ≤ k} the resulting vector of IRk . The
semi-discretization leads to the following problem:
dU
+ AU = F (U ), U (0) = U0 ,
dt

(8)

Sliced-Time Computations with Re-scaling for Blowing-Up Solutions

63

having U (t) ∈ IRk and F : IRk → IRk , and A ∈ IRk×k , A is a square matrix representing the standard ﬁnite diﬀerences discretization corresponding to
−∆ on Ω. An nth slice [Tn−1 , Tn ] for (8), starts with the initial value problem
dU
dt = −AU + F (U ), Tn−1 ≤ t, U (Tn−1 ) = U n−1 . If we consider the change of
variables:
(n)

(n)

Ui (t) = Ui,n−1 + αi Zi (s), αi

= 0, ∀i, ∀n, t = Tn−1 + β (n) s, β (n) = 0. (9)

Written in matrix, this is equivalent to:
U (t) = U n−1 + D α(n) Z(s).

(10)

which gives the following form for the rescaled model:
dZ
= −An (Z) + Gn (Z), Z(0) = 0, Z(sn )
ds
where

∞

= S.

[F (U n−1 + D α(n) Z)] ,
Gn (Z) := β (n) D −1
α(n)

(11)

(12)

and An (Z) := β (n) D −1
[A(U n−1 + D α(n) Z)]. Using (9) and (10), we have
α(n)
for s = sn , Un = U (Tn ) = Un−1 + D α(n) Z(sn ), Tn = Tn−1 + β (n) sn . For
n = 1, (11) deﬁnes the base model. No invariance can be found between the
base model and the rescaled model. We will therefore be looking for similarity
criteria, with f (.) verifying (2). Since our numerical tests are limited to the case
of a single blow-up point, we assume the explosion of the vector U (t) occurs for
the component i0 , i.e. we assume the existence of i0 independent of h such that
(n)
the solution U (t) of (8) veriﬁes U (t) ∞ = |Ui0 (t)|. As for {αi , 1 ≤ i ≤ k}, we
(n)
discern two cases: (i) f (.) is exponential order leading to αi = 1 , ∀i . and (ii)
(n)
(1)
f (.) is polynomial order in which case we choose αi = Ui,n−1 , ∀i , (αi = 1,
lorsque U0 = 0) . In fact, (9) added to the last identity lead respectively to
Un ∞ = U0 ∞ + nS or Un ∞ = (1 + S)n U0 ∞ . Using (9), we have
(n)
respectively |Ui,n | ≤ |Ui,0 | + nS, if αi = 1 and |Ui,n | ≤ (1 + S)n |Ui,0 |, if
(n)
αi = Ui,n−1 . Both relations are consistent with limn→∞ Un ∞ = ∞. We aim
now to deﬁne the similarity for (11). In order to obtain {β (n) }, we noted that
in (11), dZ
ds is the sum of a diﬀusion term−An (Z), and a reaction term Gn (Z).
Since the reaction term rules the behavior of the solution, β (n) will be obtained
through a lower similarity property of the form Gn (0) ∞ = G1 (0) ∞ . This
F (Un−1 ) ∞ = β (1) D −1
F (U0 ) ∞ , which can also be
leads to: β (n) D −1
α(n)
α(1)
written as:
β (n) = β (1)

D −1
α(1)

∞
−1
D α(n) ∞
f (U

F (U0 )

F (Un−1 )
)

(n)

0 ,0
Thus, β (n) = β (1) f (Ui i,n−1
) if αi

(n)
αi

0

∞
∞

= β (1)

D α(n) ∞ F (U0 ) ∞
.
D α(1) ∞ F (Un−1 ) ∞

= 1 and β (n) = β (1)

(13)

|Ui0 ,n−1 | f (Ui0 ,0 )
|Ui0 ,0 | f (Ui0 ,n−1 )

if

= Ui,n−1 . Computing Z(s) on the nth slice [Tn−1 , Tn ] gives S n = Z(sn ).

64

N.R. Nassif, D. Fayyad, and M. Cortas

Fig. 1. Variation of the single point of the solution u and of ln(u) against the time
2
1
. Note the equal slices due to
t. Ω is unidimensional, S = 3, h = 14 and τ = h2 = 16
(n)
αi = 1

Fig. 2. Variation of the solution u of the problem u = ∆u + ey , over the slices having
u(0) = 0, S = 2, Ω is bidimensionnel −1 ≤ x ≤ 1 et −1 ≤ y ≤ 1 having 15 × 15 = 225
nodes

Under the validity of (12), we conclude that Gn (S n ) = β (n) D −1
F (Un ).
α(n)
Gn (S n )

Consequently,
= Gn (0)

f (Ui0 ,n )
∞ f (Ui ,n−1 ) .

has: Gn (Z)
Gn (0)

0

∞

=

∞

∞

F (Un−1 )

|f (Ui0 ,n )|
∞ |f (Ui ,n−1 )|
0

Furthermore, since U n (t) = U n−1 + D α(n) Z(s), one

= β (n) D −1
α(n)

f (Ui0 (t))
∞ f (Ui ,n−1 )
0

β (n) D −1
α(n)

≤ Gn (0)

∞

F (Un−1 )

f (Ui0 ,n )
∞ f (Ui ,n−1 ) .
0

f (Ui0 (t))
∞ f (Ui ,n−1 )
0

and Gn (Z)

∞

Since f (Ui0 (t)) ≤ f (Ui0 ,n ), one has

under the assumptions on f (.) added to (13), limn→∞ β (n) = 0 and Gn (Z)
f (U 0 ,n )
C Gn (0) ∞ if f (Ui i,n−1
) ≤ C, ∀n.
0

=

∞

≤

Sliced-Time Computations with Re-scaling for Blowing-Up Solutions

A numerical application is conducted on
(11) are given by

∂u
∂t

65

= ∆u + eu . The rescaled models

dZ
= β (n) D −1
[−(AU n−1 + D α(n) Z)]
α(n)
ds
[e(U n−1 +Dα(n) Z) ] = −An (Z) + Gn (Z), 0 < s ≤ sn ,
+ β (n) D −1
α(n)
(n)

Z(0) = 0, Z(sn ) ∞ = S. We pick αi = 1, ∀i, ∀n, implying D α(n) = I,
eUn−1 ∞ = β (1) D −1
eU0 ∞ , leading to β (n) =
and from (13), β (n) D −1
α(n)
α(1)
U0 ∞

β (1) eUn−1 ∞ . The ﬁgures below are few results of numerical experiments cone
ducted on blow-up problems. (See [7]).

References
1. Abia L.M. , Lopez-Marcos J.C. , Martinez J. Blow-up for semidiscretizations of
reaction diﬀusion equations. Appl. Numer. Math. 20(1996)145-156.
2. Abia L.M. , Lopz-Marcos J.C. , Martinez J. On the blow-up time convergence of semidiscretizations of reaction diﬀusion equations. Appl. Numer. Math.
26(1998)399-414.
3. Acosta G. , Duran R. , Rossi J. An adaptive time step procedure for a parabolic
problem with blow-up.
4. Bebernes J., Eberley D. Mathematical Problems from Combustion Theory.
Springer-Verlag, (1989).
5. Berger M. , Kohn R. Rescaling algorithm for the numerical calculation of blowingup solutions. Commun. Pure Appl. Math. 41(1988)841-863.
6. Chorin A. Estimates of intermittency, spectra, and blow-up in developped turbulence. Commun. Pure Appl. Math. 34(1981)853-866.
7. Cortas M. Calcul par tranches pour les ´equations diﬀ´
erentielles `
a variable temps
a
` caract`ere explosif. Thesis, Universit´e de Reims, January 2005.
8. Fayyad D. , Nassif N. Approximation of blowing-up solutions to semilinear
parabolic equations using “mass-controlled” parabolic systems. Mathematical Modeling and Methods in the Applied Sciences,9(1999) pp. 1077-1088.
9. Fayyad D. , Nassif N. On the Numerical Computation of blowing-up solutions for semi-linear parabolic equations. Mathematical Methods in the Applied
Sciences,24(2001)pp. 641-657.
10. Friedman A., McLeod B. Blowup of positive solutions of semilinear heat equations.
Indiana Univ. Math. J 34 (1985) pp 425-447.
11. Kapila A. K. Reactive-diﬀusive system with Arrhenius kinetics: Dynamics of ignition. SIAM J. Appl. Math. 39(1980)21-36.
12. Kassoy D. , Poland J. The induction period of a thermal explosion in a gas between
inﬁnite parallel plates. Combustion and Flame50(1983)259-274.
Crandall M. et al. , Academic Press(1987)159-201.
13. Pierre M. , Schmitt D. Blow-up in reactio-diﬀusion systems with dissipation of
mass. Rapport INRIA, 2652(1995).

