Optimizing Surface Triangulation Via
Near Isometry with Reference Meshes
Xiangmin Jiao, Narasimha R. Bayyana, and Hongyuan Zha
College of Computing
Georgia Institute of Technology, Atlanta, GA 30332, USA
{jiao,raob,zha}@cc.gatech.edu

Abstract. Optimization of the mesh quality of surface triangulation is
critical for advanced numerical simulations and is challenging under the
constraints of error minimization and density control. We derive a new
method for optimizing surface triangulation by minimizing its discrepancy from a virtual reference mesh. Our method is as easy to implement
as Laplacian smoothing, and owing to its variational formulation it delivers results as competitive as the optimization-based methods. In addition, our method minimizes geometric errors when redistributing the
vertices using a principle component analysis without requiring a CAD
model or an explicit high-order reconstruction of the surface. Experimental results demonstrate the eﬀectiveness of our method.
Keywords: mesh optimization, numerical simulations, surface meshes,
nearly isometric mapping.

1

Introduction

Improving surface mesh quality is important for many advanced 3-D numerical
simulations. An example application is the moving boundary problems where
the surfaces evolve over time and must be adapted for better numerical stability,
accuracy, and eﬃciency while preserving the geometry. Frequently, the geometry
of the evolving surface is unknown a priori but is part of the numerical solution,
so the surface is only given by a triangulation without the availability of a CAD
model. The quality of the mesh can be improved by mesh adaptation using edge
ﬂipping, edge collapsing, or edge splitting (see e.g. [1,2,3,4,5]), but it is often
desirable to ﬁx the connectivity and only redistribute the vertices, such as in
the arbitrary Lagrangian-Eulerian methods [6]. In this paper, we focus on mesh
optimization (a.k.a. mesh smoothing) with ﬁxed connectivity.
Mesh smoothing has a vast amount of literature (for example, see [7,8,9,10,11]).
Laplacian smoothing is often used in practice for its simplicity, although it is not
very eﬀective for irregular meshes. The more sophisticated methods are often optimization based. An example is the angle-based method of Zhou and Shimada [11].
Another notable example is the method of Garimella et al. [7], which minimizes the
condition numbers of the Jacobian of the triangles against some reference Jacobian
matrices (RJM). More recently, the ﬁnite-element-based method is used in [8], but
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 334–341, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Optimizing Surface Triangulation

335

their method is relatively diﬃcult to implement. Note that some mesh smoothing methods (such as the angle-based method) are designed for two-dimensional
meshes, and the conventional wisdom is to ﬁrst parameterize the surface locally or
globally and then optimize the ﬂattened mesh [2,12,13,14]. To preserve the geometry, these methods typically require a smooth or discrete CAD model and associated point location procedures to project the points onto the surface, which
increase the implementation complexity.
The goal of this paper is to develop a mesh smoothing method that is as
simple as Laplacian smoothing while being as eﬀective as the sophisticated
optimization-based methods without parameterizing the mesh. The novelty of
our method is to formulate the problem as a near isometic mapping from an
ideal reference mesh onto the surface and to derive a simple iterative procedure
to solve the problem. Due to its variational nature, the method can balance
angle optimization and density control. It also eliminates the needs of the preprocessing step of surface parameterization and the post-processing step of vertex
projection, so it is much easier to implement and is well-suited for integration
into numerical simulations.
The remainder of the paper is organized as follows. In Section 2, we formulate the mesh optimization problem and explain its relationship to isometric
mappings. In Section 3, we describe a simple discretization of our method for
triangulated surfaces with adaptive step-size control. In Section 4, we present
some experimental results. Section 5 concludes the paper with discussions of
future research directions.

2

Mesh Optimization and Isometric Mappings

Given a mesh with a set of vertices and triangles, the problem of mesh optimization is to redistribute the vertices so that the shapes of the triangles are
improved in terms of angles and sizes. Surface parameterization is the procedure
to map the points on one surface onto a parameter domain (such as a plane or
sphere) under certain constraints such as preservation of areas or angles [15].
Although surface parameterization has been widely used in computer graphics
and visualization [16,17,18,19,20,21], in this section we explore an interesting
connection between it and mesh optimization.
More formally, given a 2-manifold surface M ⊂ R3 and a parameter domain
Ω ⊂ R2 , the problem of surface parameterization is to ﬁnd a mapping f : Ω → M
such that f is one-to-one and onto. Typically, the surface M is a triangulated
surface, with a set of vertices P i ∈ R3 and triangles T (j) = (P j1 , P j2 , P j3 ). The
problem of isometric parameterization (or mapping) is to ﬁnd the values of pi
such that f (pi ) = P i , the triangles t(j) = (pj1 , pj2 , pj3 ) do not overlap in Ω,
and the angles and the areas of the triangles are preserved as much as possible.
We observe that the constraints of angle and area preservation in isometric parameterization are similar to angle optimization and density control in
mesh optimization, except that the requirement of Ω ⊂ R2 is overly restrictive.

336

X. Jiao, N.R. Bayyana, and H. Zha

Fig. 1. Atomic mapping from triangle on M1 to triangle on M2

However, by replacing Ω with the input surface and replacing M by a “virtual”
reference mesh with desired mesh quality and density (for example be composed
of equilateral triangles of user-speciﬁed sizes, where the triangles need not ﬁt
together geometrically and hence we refer to it as a “virtual” mesh), we can
then eﬀectively use isometric parameterization as a computational framework
for mesh optimization, which we describe as follows.
Let M1 denote an ideal virtual reference mesh and M2 the triangulated surface
to be optimized. Let us ﬁrst assume that M2 is a planar surface with a global
parameterization ξ, and we will generalize the framework to curved surfaces in
the next section. In this context, the problem can be considered as reparameterizing M2 based on the triangles and the metrics of M1 . Consider an atomic
linear mapping g ≡ f2 ◦ f1 −1 from a triangle on M1 onto a corresponding triangle on M2 , as shown in Figure 1, where f1 and f2 are both mappings from a
reference triangle. Let J 1 and J 2 denote their Jacobian matrices with respect
to the reference triangle. The Jacobian matrix of the mapping g is A = J 2 J −1
1 .
For g to be nearly isometric, A must be close to be orthogonal. We measure
the deviation of A from orthogonality using two energies: angle distortion and
area distortion. Angle distortion depends on the condition number of the matrix
A in 2-norm, i.e., κ2 (A) = A 2 A−1 2 . Area distortion can be measured by
det(A) = det(J 2 )/ det(J 1 ), which is equal to 1 if the mapping is area preserving.
Let us deﬁne a function
τp (s) ≡

sp + s−p if s > 0
∞
otherwise,

(1)

where p > 0, so τp is minimized if s = 1 and approaches ∞ if s ≤ 0 or s → ∞.
To combine the angle- and area-distortion measures, we use the energy
EI (T, μA ) ≡ (1 − μA )τ1 (κ2 (A)) + μA τ 12 (det(A)),

(2)

where μA is between 0 and 1 and indicates the relative importance of area
preservations versus angle preservation. For feasible parameterizations, EI is ﬁnite because det(A) > 0 and κ2 (A) ≥ 1. To obtain a nearly isometric mapping,

Optimizing Surface Triangulation

337

we must ﬁnd ξ i = g(xi ) for each vertex xi ∈ M1 to minimize the sum of EI over
all triangles on M1 , i.e.,
EI (M1 , μA ) ≡

(3)

EI (T, μA ).
T ∈M1

We refer to this minimization as nearly isometric parameterization of surfaces
(NIPS ), which balances the preservation of angles and areas. This formulation
shares similarity with that of Degener et al. for surface parameterization [12],
who also considered both area and angle distortions but used a diﬀerent energy.
Note that the special case with μA = 0 would reduce to the most isometric
parameterization (MIPS) of Hormann and Griener [18] and is closely related to
the condition-number-based optimization in [7].
The direct minimization of EI may seem diﬃcult because of the presence
of κ2 (A). However, by using a result from [22] regarding the computation of
Dirichlet energy ED (g) = trace(AT A) det(J1 )/4 as well as the fact that
τ1 (κ2 (A)) = κF (A) =

4ED (g)
trace(AT A)
=
,
det(A)
det(J 2 )

(4)

one can show that
τ1 (κ2 (A)) =

1
det(J 2 )

cot αi li

2
2,

(5)

i

where αi and li ≡ ξ i− − ξ i+ are deﬁned as in Figure 1, and i− and i+ denote
the predecessor and successor of i in the triangle.
To minimize EI , we must evaluate its gradient with respect to ξ i . For a triangle
◦
T , let l⊥
i ≡ n × li denote the 90 counter-clockwise rotation of the vector li on
M2 . It can be veriﬁed that
∂EI (M, μA )
=
∂ξi

(j) (j)

(j) (j)

(j) (j)⊥

si+ li+ − si− li− + ti li

,

(6)

i∈T (j)

where
s± = (1−μA )

1
det(J 1 ) − det(J 2 )
2 cot α±
κF
and ti = (1−μA )
+ μA
. (7)
det(J 2 )
det(J 2 ) 2 det(J 1 ) 12 det(J 2 ) 32

Equation (6) is a simple weighted sum of its incident edges and 90◦ counterclockwise rotation of opposite edges over all its incident triangles T (j) .

3

Mesh Optimization for Curved Surfaces

From Eqs. (6) and (7), it is obvious that ∂EI /∂ξi does not depend on the
underlying parameterization ξ i of M2 , so it becomes straightforward to evaluate
it directly on a curved surface. In particular, at each vertex i on M1 , let V i ≡
(t1 |t2 )3×2 denote the matrix composed of the unit tangents of M2 at the point.
To reduce error, we constrain the point to move within the tangent space of

338

X. Jiao, N.R. Bayyana, and H. Zha

M2 so that the displacements would be V i ui , where ui ∈ R2 . Because of the
linearity, from the chain rule we then have
∂EI (M1 , μA )
= V Ti
∂ui

(j) (j)

(j) (j)

(j) (j)⊥

si+ li+ − si− li− + ti li

,

(8)

i∈T (j)

where li ∈ R3 as deﬁned earlier. This equation constrains the search direction
within the local tangent space at vertex i without having to project its neighborhood onto a plane.
We estimate the tangent space as in [23]. In particular, at each vertex v,
suppose v is the origin of a local coordinate frame, and m is the number of the
faces incident on v. Let N be an 3 × m matrix whose ith column vector is the
unit outward normal to the ith incident face of v, and W be an m × m diagonal
matrix with Wii equal to the face area associated with the ith face. Let A denote
N W N T , which we refer to as the normal covariance matrix. A is symmetric
positive semi-deﬁnite with real eigenvalues. We use the vector space spanned
by the eigenvectors corresponding to the two smaller eigenvalues of A as the
tangent space. If the surface contains ridges or corners, we restrict the tangent
space to contain only the eigenvector corresponding to the smallest eigenvalues
of A at ridge vertices and make the tangent space empty at corners.
To solve the variational problem, one could use a Gauss-Seidel style iteration
to move the vertices. This approach was taken in some parameterization and
mesh optimization algorithms [3,7]. For simplicity, we use a simple nonlinear
Jacobi iteration, which moves vertex i by a displacement of

di ≡ −V i V

T
i

i∈T (j)

(j) (j)

(j) (j)

i∈T (j)

si+ + si−

(j) (j)⊥

si+ li+ − si− li− + ti li
(j)

(j)

.

(9)

This Jacobi-style iteration may converge slower but it can be more eﬃcient than
the Gauss-Seidel style iteration, as it eliminates the need of reestimating the
tangent spaces at the neighbor vertices of v after moving a vertex v.
The concurrent motion of the vertices in the Jacobi-style iterations may lead
to mesh folding. To address this problem, we introduce an asynchronous step-size
control. For each triangle pi pj pk , we solve for the maximum α ≤ 1 such that
(α) (α) (α)

(α)

the triangle pi pj pk does not fold, where pi ≡ pi + αdi [23]. We reduce
di at vertex i by a factor equal to the minimum of the αs of its incident faces.
After rescaling the displacement of all the vertices, we recompute α and repeat
the rescaling process until α = 1 for all vertices.

4

Experimental Results

In this section, we present some preliminary results using our method for static
2-D meshes and dynamic 3-D meshes.

Optimizing Surface Triangulation

339

Table 1. Comparative results of optimizing 2-D meshes. CN-based is our method with
μA = 0 and CNEA-based with μA = 1. Symbol ‘-’ indicates mesh folding.

U1
Original 12.0
Laplacian 33.1
Angle-based 32.9
CN-based 36.0
CNEA-based 35.7

(a)

Minimum angle
U2 U3 R1 R2
8.8 8.5 0.11 1.1
31.4 30.8 5.8 4.9
30.9 29.5 3.9 36.1 34.6 12.6 8.9
35.3 34.2 12.7 7.8

R3
0.043
4.5
10.3
8.9

U1
129.5
99.4
96.0
96.8
97.0

(b)

Maximum angle
U2 U3 R1 R2
156.9 147.5 179.7 176.9
105.9 109.2 168.3 170.8
103.7 105.9 170.3 100.1 105.6 153.2 157.3
101.3 105.8 153.9 163.4

(c)

R3
179.9
171.0
156.2
160.6

(d)

Fig. 2. Sample meshes (a,c) before and (b,d) after mesh optimization

4.1

Optimization of 2-D Meshes

We ﬁrst compare the eﬀectiveness of our method against the length-weighted
Laplacian smoothing and the angle-based method of Zhou and Shimada [11].
Because these existing methods are better established for planar meshes, we
perform our comparisons in 2-D. Table 1 shows the minimum and maximum angles of six diﬀerent meshes before and after mesh optimization, including three
relatively uniform meshes (denoted by U1, U2, and U3) and three meshes with
random points (denoted by R1, R2, and R3). In our methods, we consider the
virtual reference mesh to be composed of equilateral triangles with the average
area of the triangles. Figure 2 shows the original and the optimized meshes using
our method with μA = 1 for U1 and R1. In nearly all cases, the condition-number
based method (i.e., μA = 0) performs substantially better in minimum angles for
all cases, comparative or slightly better in maximum angles for uniform meshes,
and signiﬁcantly better in maximum angles for the random meshes. The areaequalizing optimization delivers slightly worse angles than condition-number
based optimization, but the former still outperforms edge-weighted Laplacian
smoothing and the angle-based methods while allowing better control of areas.
4.2

Optimization of Dynamic Meshes

In this test, we optimize a mesh that is deformed by a velocity ﬁeld. Our test
mesh discretizes a sphere with radius 0.15 centered at (0.5, 0.75, 0.5) and contains
5832 vertices and 11660 triangles. The velocity ﬁeld is given by

340

X. Jiao, N.R. Bayyana, and H. Zha

Fig. 3. Example of optimized dynamic surfaces. Colors indicate triangle areas.

u(x, y, z) = cos(πt/T ) sin2 (πx)(sin(2πz) − sin(2πy)),
y(x, y, z) = cos(πt/T ) sin2 (πy)(sin(2πx) − sin(2πz)),
z(x, y, z) = cos(πt/T ) sin2 (πz)(sin(2πy) − sin(2πx)),

(10)

where T = 3, so that the shape is deformed the most at time t = 1.5 and
should return to the original shape at time t = 3. We integrate the motion of the
interface using the face-oﬀsetting method in [23] while redistributing the vertices
using the initial mesh as the reference mesh. In this test the angles and areas of
the triangles were well preserved even after very large deformation. Furthermore,
the vertex redistribution introduced very small errors and the surface was able
to return to a nearly perfect sphere at time t = 3.

5

Conclusion

In this paper, we proposed a new method for optimizing surface meshes using a
near isometry with reference meshes. We derived a simple discretization, which is
easy to implement and is well suitable for integration into large-scale numerical
simulations. We compared our method with some existing methods, showed substantial improvements in the maximum and minimum angles, and demonstrated
its eﬀective use for moving meshes. As a future direction, we plan to extend our
method to optimize quadrilateral meshes and 3-D volume meshes.
Acknowledgments. This work was supported by a subcontract from the Center for Simulation of Advanced Rockets of the University of Illinois at UrbanaChampaign funded by the U.S. Department of Energy through the University
of California under subcontract B523819 and in part by the National Science
Foundation under award number CCF-0430349.

References
1. Alliez, P., Meyer, M., Desbrun, M.: Interactive geometry remeshing. ACM Trans.
Graph. 21 (2002) 347–354 Proc. SIGGRAPH 2002.
2. Frey, P., Borouchaki, H.: Geometric surface mesh optimization. Comput. Visual.
Sci. (1998) 113–121

Optimizing Surface Triangulation

341

3. Hormann, K., Labsik, U., Greiner, G.: Remeshing triangulated surfaces with optimal parametrizations. Comput. Aid. D’s. 33 (2001) 779–788
4. Praun, E., Hoppe, H.: Spherical parametrization and remeshing. ACM Trans.
Graph. 22 (2003) 340–349 Proc. SIGGRAPH 2003.
5. Surazhsky, V., Gotsman, C.: Explicit surface remeshing. In: Eurographics Symposium on Geometric Processing. (2003) 20–30
6. Donea, J., Huerta, A., Ponthot, J.P., Rodriguez-Ferran, A.: Arbitrary LagrangianEulerian methods. In Stein, E., de Borst, R., Hughes, T.J., eds.: Encyclopedia of
Computational Mechanics. Volume 1: Fundamentals. John Wiley (2004)
7. Garimella, R., Shashkov, M., Knupp, P.: Triangular and quadrilateral surface mesh
quality optimization using local parametrization. Comput. Meth. Appl. Mech.
Engrg. 193 (2004) 913–928
8. Hansen, G.A., Douglass, R.W., Zardecki, A.: Mesh Enhancement. Imperial College
Press (2005)
9. Knupp, P., Margolin, L., Shashkov, M.: Reference Jacobian optimization based
rezone strategies for arbitrary Lagrangian Eulerian methods. J. Comput. Phys.
176 (2002) 93–128
10. Shashkov, M.J., Knupp, P.M.: Optimization-based reference-matrix rezone strategies for arbitrary lagrangian-Eulerian methods on unstructured grids. In: Proc. the
10th International Meshing Roundtable. (2001) 167–176
11. Zhou, T., Shimada, K.: An angle-based approach to two-dimensional mesh smoothing. In: Proceedings of 9th International Meshing Roundtable. (2000) 373–384
12. Degener, P., Meseth, J., Klein, R.: An adaptable surface parameterization method.
In: Proc. the 12th International Meshing Roundtable. (2003) 227–237
13. Knupp, P.: Achieving ﬁnite element mesh quality via optimization of the jacobian matrix norm and associated quantities. part i: a framework for surface mesh
optimization. Int. J. Numer. Meth. Engrg. 48 (2000) 401–420
14. Sheﬀer, A., de Sturler, E.: Parameterization of faceted surfaces for meshing using
angle-based ﬂattening. Engrg. Comput. 17 (2001) 326–337
15. Floater, M.S., Hormann, K.: Surface parameterization: a tutorial and survey.
In: Advances in Multiresolution for Geometric Modelling. Springer Verlag (2005)
157–186
16. Desbrun, M., Meyer, M., Alliez, P.: Intrinsic parameterizations of surface meshes.
In: Proc. Eurographics 2002 Conference. (2002)
17. Gotsman, C., Gu, X., Sheﬀer, A.: Fundamentals of spherical parameterization for
3d meshes. ACM Trans. Graph. 22 (2003) 358–363 Proc. SIGGRAPH 2003.
18. Hormann, K., Greiner, G.: MIPS: An eﬃcient global parametrization method. In
Laurent, P.J., Sablonniere, P., Schumaker, L.L., eds.: Curve and Surface Design:
Saint-Malo 1999. (2000) 153–162
19. Khodakovsky, A., Litke, N., Schröder, P.: Globally smooth parameterizations with
low distortion. ACM Trans. Graph. 22 (2003) 350–357 Proc. SIGGRAPH 2003.
20. Kos, G., Varady, T.: Parameterizing complex triangular meshes. In Lyche, T.,
Mazure, M.L., Schumaker, L.L., eds.: Curve and Surface Design: Saint-Malo 2002,
Modern Methods in Applied Mathematics. (2003) 265–274
21. Sheﬀer, A., Gotsman, C., Dyn, N.: Robust spherical parametrization of triangular meshes. In: Proc. the 4th Israel-Korea Bi-National Conference on Geometric
Modeling and Computer Graphics. (2003) 94–99
22. Pinkall, U., Polthier, K.: Computing discrete minimal surfaces and their conjugates.
Exper. Math. 2 (1993) 15–36
23. Jiao, X.: Face oﬀsetting: a uniﬁed framework for explicit moving interfaces. J.
Comput. Phys. 220 (2007) 612–625

