Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 166–175

International Conference on Computational Science, ICCS 2011

A Dynamic Multi-Objective Optimization Framework for Selecting
Distributed Deployments in a Heterogeneous Environment
Elisabeth Vineka,1 , Peter Paul Beranb,, Erich Schikutab
b University

a CERN, CH-1211 Gen`
eve 23, Switzerland
of Vienna, Workﬂow Systems and Technology Group, Rathausstr. 19/9, A-1010 Vienna, Austria

Abstract
In distributed systems, where several deployments of a speciﬁc service exist, it is a crucial task to select and
combine concrete deployments to build an executable workﬂow. Non-functional properties such as performance and
availability are taken into account in such selection processes that are designed to reach certain objectives while meeting constraints. In this paper, a concrete data-intensive application scenario from a High-Energy Physics experiment
comprising a deployment selection challenge is introduced. A generic model for distributed systems is presented
based on which a formal model representing the individual components of the system is derived. The optimization
problem is approached both from the angle of the user and the angle of the system provider. Moreover the dynamic aspects of the underlying system are taken into account. This results in a dynamic multi-objective optimization problem
for which an explicit memory-based genetic algorithm is proposed.
Keywords: Service Selection, Multi-Objective Optimization, Genetic Algorithm.

1. Introduction
With the advent of distributed systems - be it Grids, Clouds, or Web Service environments - the selection of a
resource on which to execute a given job, respectively the selection of a service to respond to a given request, became
a crucial task. As distributed systems are on the scene for several decades now, many approaches exist to the resource
or service selection challenge. They all aim at allowing some optimization, depending on the system requirements.
Minimize the execution time of jobs, minimize costs associated with a task, maximize the overall system throughput,
and maximize some custom deﬁned utility function are examples for such optimizations. In a system where several
deployments of a given functionality (service) exist, the decision about which ones to execute can be based on the
evaluation of non-functional attributes such as performance indicators, availability and reliability measures, and the
current state of the deployment at invocation time.
In this paper, we study the deployment selection challenge from two diﬀerent and usually conﬂicting angles,
namely from the user’s and the system provider’s perspective. Users want to optimize the execution of their speciﬁc
Email addresses: elisabeth.vinek@cern.ch (Elisabeth Vinek), peter.beran@univie.ac.at (Peter Paul Beran),
erich.schikuta@univie.ac.at (Erich Schikuta)
1 Corresponding author

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.018

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

167

requests (e.g. in terms of minimizing the execution time) without worrying about the consequences for the overall
system. The provider’s objective however is to optimize the system throughput and allow a fair usage of the resources,
or a usage mode as deﬁned by the decision makers. While the users are most likely pursuing the same strategy for each
request, the system responsible may face a dynamic environment, including changing requirements, changing usage
patterns and changing decisions in terms of business objectives. To address this issue, we propose a multi-objective
optimization framework for selecting distributed deployments in a heterogeneous environment. Our model reﬂects
the dynamic that a distributed system is likely to face.
This work issues from and is based on a real-world application scenario from the ATLAS Experiment aiming at
discovering new physics at the Large Hadron Collider [1]. The TAG system [2] is a distributed system composed of
databases and several web services accessing them. Its main goal is to allow fast and eﬃcient querying of metadata
about the events occurring in the ATLAS detector and is thus meant to speed up the resource-intensive analysis process
by preselecting interesting data. The TAG system is characterized by tightly coupled components, a central control
instance, a relatively stable environment and the possibility to gather intensive knowledge about the behavior of the
components. Taking these characteristics into account, we developed a generic representation of distributed systems
in general and the TAG environment in particular, a formal model describing the components and leading to the
multi-objective optimization problem, and we introduce a dynamic multi-objective optimization framework based on
genetic algorithms.
The remainder of this document is organized as follows. Section 2 details the motivational scenario. In Section 3
the building blocks of a distributed system in general, and of our application system in particular, are described
and put in relation. Based on these building blocks, a formal model for describing the TAG system is developed in
Section 4. Section 5 describes the concrete multi-objective optimization problem faced in the applications scenario
and introduces a dynamic genetic algorithm approach to solve it. Section 6 discusses related work in the area of
service selection in multi-objective optimization problems. Section 7 concludes and details the next steps.
2. Motivational Scenario
ATLAS is one of the detectors of the Large Hadron Collider (LHC) hosted at CERN, the European Organization
for Nuclear Research. The ATLAS experiment aims at discovering new physics by analyzing a massive amount of
data from proton-proton collisions [1]. In order to allow for a fast selection of physics events without having to
actually look inside big datasets, event-level metadata – so-called TAGs – are produced. A TAG is a small, high-level
summary of an event with key physics quantities and information for back-navigation to the underlying event. TAGs
are stored in relational databases (and in ﬁles, but this is not considered in the scope of this work), and mainly webbased services are provided for accessing TAGs, making queries, transforming output formats, shipping outputs to
the requester and eventually submit analysis jobs to the Grid. Both the TAG databases and their associated services
are distributed around the world. Currently, several sites located in Europe and in Canada are hosting either TAG
data, or services, or both. A speciﬁc functionality – or service – thus exists at several locations. There is a central
control instance managing the deployment of services at all participating sites. Therefore, as opposed to most service
selection scenarios described in literature, the considered system is very well known, can be actively monitored and
is relatively stable. Sites and deployments are added as the system evolves, but at a reasonable pace that can be
tracked. The deployments of a given functionality are usually identical in terms of their software version (i.e. we
are not in presence of several diﬀerent implementations of a functionality, but diﬀerent deployments of the same
piece of software), but as they are running on heterogeneous machines at diﬀerent sites, they diﬀer in their nonfunctional attributes such as performance and availability. When a user starts a request, there are many possibilities of
combining databases and services, some of them being eﬃcient, while others might suﬀer from high latencies, poor
network throughput, or overloaded machines. Not only the concrete resources used have their limitations, but also
the connections between them have to be taken into account. It is thus a challenge to select and combine concrete
database and service deployments when a request is initiated. This problem maps to a Multi-dimensional Multi-choice
Knapsack Problem (MMKP) [3] known to be NP-hard in the strong sense [4]. In order to allow for such a selection,
the system initially has to be documented in a proper way and the individual components registered in a way that
can be easily queried. Additionally, the components need to be described in terms of their non-functional attributes,
the system usage needs to be understood to derive query patterns and proﬁles, and an optimization problem has to be
formulated. In summary, the following requirements and goals are addressed:

168

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

1.
2.
3.
4.

Make all TAG databases look like one, i.e. hide any data distribution details from the users.
Make the service deployments transparent to the user.
Ensure an eﬃcient use of all available resources from both the user and the system perspective.
Enable load balancing and fail over mechanisms for TAG resources and services.

The ﬁrst goal has been achieved by implementing a metadata registry which is not subject of this paper. The
approaches for the other three goals are described in the remainder of this paper. The system ontology presented in
the next section has been developed for building a model of the distributed TAG system based on which a special
service registry has been implemented. In order to address the goals 3 and 4, a service selection optimizer has to be
implemented based on speciﬁc optimization goals.
3. Components of our Distributed System
As a ﬁrst step towards analyzing the distributed TAG system, we developed a generic description of the building
blocks of a distributed system and their interactions. This has been presented in our previous work [5]. Figure 1 shows
a UML Class Diagram representing the individual parts of a distributed system.

Figure 1: System Ontology (UML Class Diagram)

The System Ontology is composed of Components and Attributes describing them. A component can be one of the
following classes. A Provider is a Virtual Organization or simply a geographical site that participates in the considered
distributed system by hosting at least one resource. A Resource is a physical or logical entity capable of hosting a
service. Examples of resources are web servers, databases and virtual machines. A resource belongs to a provider,
as expressed by the composition symbol in Figure 1. A Service is a generic functionality, described by functional
attributes. The union of a system’s services completely describes its functionality. A Deployment is the part invoked
by a client. It is modeled as an association class between Resource and Service, i.e. it is a concrete instance of a
generic service, running on a speciﬁc resource.
Additionally, a Link class is deﬁned between components. When several deployments are composed to form a
complex workﬂow, the link between them – generally referring to a network link – is important to consider, as the
transfer of data has an impact on the overall performance. In the presented system ontology, the link is however deﬁned
at the component level, in order to sustain ﬂexibility as regarding to its deﬁnition in a concrete system description. In
some systems, it might be possible to deﬁne and describe a link between deployments, but in others it might suﬃce to
deﬁne links between providers or resources.

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

169

Each component is described by one or several discriminative attributes. Generally, attributes can be classiﬁed
into functional and non-functional ones. Functional attributes describe the speciﬁc function of a component, generally
including inputs, behavior and outputs. Thus, they describe what the speciﬁc component is supposed to accomplish,
as opposed to how. Examples of a functional attribute are access patterns and details of business logic. Non-functional
or QoS attributes describe characteristics related to the operations of components, specifying how a component accomplishes a given functionality. Examples for QoS attributes include diﬀerent performance metrics, availability and
reliability.
This model is a simpliﬁed system representation, containing all the components required for our heuristic deployment selection optimization approach. Broader models have been proposed, such as the Common Information Model
(CIM), a DMTF standard [6]. The CIM details all system components including metrics, and provides means to describe systems, databases, devices, networks, events etc. We developed our own simpliﬁed generic model in order to
show the applicability of our approach without requiring a too detailed system representation.
Based on the presented generic model, a TAG Service Catalog has been implemented as a database schema. All
sites, resources, services and deployments are registered in this catalog and updated upon changes. Additionally,
deployment executions are actively logged and the resulting raw statistics are regularly aggregated to compute higherlevel attributes such as availability and speciﬁc performance indicators.
4. Formal Representation of the TAG Components and Attributes
All parts needed to outline the presented distributed system and to perform the optimization are described in the
following. The outlined formal model is based on the system ontology presented in Section 3 and follows the approach
developed in [7].
4.1. Attributes
An attribute – or quality – is deﬁned as: qi = id(qi ), Di , normi (ai ) where id(qi ) is a function associating a unique
identiﬁer to the attribute, Di is the Deﬁnition Domain and normi (ai ) is a normalization function that speciﬁes how to
map the attribute value ai to a normalized value in the interval [0, 1]. Associating a unique identiﬁer to each attribute
allows to make attributes comparable across provider boundaries. However, as it is not needed for further developing
the formal model, it can be omitted for now. The simpliﬁed attribute representation is thus: qi = Di , normi (ai ). ai ∈ Di
is a concrete value the attribute can take. Table 1 lists two example attributes, namely availability and latency.
Attribute
Availability
Latency

Component
Deployment
Link

Di
[0,1]
R+

Example Value (a0i )
0.988 (98.8%)
2 ms

Normalized Value normi (a0 i)
normi (a0i ) ∈ [0, 1]
normi (a0i ) ∈ [0, 1]

Table 1: Attribute Examples

The normalization map for increasing attribute values (the higher the better) such as for availability is deﬁned as:
⎧
⎪
⎪
if a0i = max(ai ),
⎨1
normi (a0i ) = ⎪
⎪
⎩ a0i
for all other values.
max(ai )
The normalization map for decreasing attribute values (the lower the better) such as for latency is deﬁned as:
⎧
⎪
⎪
if a0i = min(ai ),
⎨1
normi (a0i ) = ⎪
⎪
⎩ min(ai ) for all other values.
a0i
4.2. Components
Next, we formally deﬁne all system components. The number of diﬀerent attributes per component is deﬁned as
k.

170

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

Provider: We deﬁne P = P1 ∪ ... ∪ Pn as the union of all providers or sites, where n = |P| is the number of providers
in our system.
A concrete provider Pi , i ∈ {1, ..., n} is deﬁned as:
Pi = {id(Pi ), [qi1, ..., qik ]}

(1)

Resource: We deﬁne R = R1 ∪ ... ∪ Rn as the union of all resources, where n = |R| is the number of resources in our
system.
A concrete resource Ri , i ∈ {1, ..., n} is deﬁned as:
Ri = {id(Ri ), P j , [qi1 , ..., qik ]}

(2)

i.e. the belonging to a provider is part of the resource deﬁnition. According to Equation 1, this is equivalent to:
Ri = {id(Ri ), {id(P j ), [q j1 , ..., q jk ]}, [qi1 , ..., qik ]}

(3)

Service: We deﬁne S = S 1 ∪ ... ∪ S n as the union of all services, where n = |S | is the number of services in our
system.
A concrete service S i , i ∈ {1, ..., n} is deﬁned as:
S i = {id(S i ), [qi1 , ..., qik ]}

(4)

Deployment: We deﬁne D = D1 ∪...∪Dn as the union of all deployments, where n = |D| is the number of deployments
in our system.
A concrete deployment Di , i ∈ {1, ..., n} is deﬁned as:
Di = {id(Di ), R j , S l , [qi1 , ..., qik ]}

(5)

i.e. the resource and service a deployment is associated with are part of the deployment deﬁnition. According
to Equations 1, 2 and 7, this is equivalent to:

Di

= {id(Di ),
{id(R j ), {id(Pm ), [qm1 , ..., qmk ]}, [q j1 , ..., q jk ]},
{id(S l ), [ql1 , ..., qlk ]},
[qi1 , ..., qik ]}

(6)

i.e. the deﬁnitions of the provider, resource and service are part of the deployment deﬁnition. Selecting a
concrete deployment thus implies selecting a concrete provider, resource and service.
Link: We deﬁne L = L1 ∪ ... ∪ Ln as the union of all links, where n = |L| is the number of links in our system.
A concrete link Li , i ∈ {1, ..., n} is deﬁned as:
Li = {C1 , C2 , [qi1 , ..., qik ]}

(7)

where C1 and C2 are two components linked by the Link L. Links are a special class, because the components
they connect should be deﬁned, however the link properties do not depend on the component properties. This
is reﬂected in Figure 1 as the Link class is not derived from the Component class, but associated to it.

171

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

4.3. Workﬂows and Quality Ratings
A concrete deployment or link is thus described by an attribute vector Ai ∈ Di . In the optimization context,
this attribute vector is mapped to a quality vector Qi = normi (Ai ) by applying the respective normalization map to
each single attribute. Each quality vector Qi has an associated vector wi that, for each attribute, deﬁnes its weight.
An abstract workﬂow is the representation of a sequence of invoked services (can be in parallel) to meet a certain
requirement (satisfy a given request).



"##$






	


	

%%%


"##$



	

%%%


 !




	



	


Figure 2: Example Abstract Workﬂow

Figure 2 shows an example abstract workﬂow taken from our TAG use case. The workﬂow consists of invoking
one iELSSI instance (allows to browse TAG databases), one or more TAG databases in parallel, one instance of Extract
service (allows to retrieve data) and again one or more TAG databases in parallel. Each rectangle in the picture is a
service that needs to be replaced by a deployment when creating a concrete workﬂow for the abstract one. The choice
of deployment implicitly including the choice of links, i.e. link properties are taken into account when building a
concrete workﬂow.
Formally, an abstract workﬂow W0 is deﬁned as W0 = (V, E, f0 ) where (V, E) is a directed graph and f0 : V → C
is a function mapping each deployment to its service.
A concrete workﬂow is an instance of an abstract workﬂow. It is deﬁned as W = (V, E, fd ) where (V, E) is a
directed graph and fd is a deployment selection map such that fd : V → D. A concrete workﬂow W is sensible for W0
if the function that maps a deployment to a service is compatible with the function that selects a service for each node.
In the absence of speciﬁc requirements or constraints, W is feasible for W0 if it is sensible for W0 , i.e. all possible
combinations are in principle acceptable.
The Quality of each deployment i is computed as follows:
n

Q(Di ) =

wDik × norm(aDik )

(8)

k=1

where n is the number of attributes applied to that deployment. Similarly, the Quality of each link j is computed as
follows:
m

Q(L j ) =

wL jk × norm(aL jk )

(9)

k=1

where m is the number of attributes applied to that link.
As can be seen in Figure 3, the total workﬂow is not necessarily only a sequence. We thus need to deﬁne composition patterns and respective attribute aggregation functions. This has been proposed in our previous work [8].
Here, we concentrate on the patterns used in our example workﬂow, as depicted in Figure 3: sequence and split-sync
(parallel).
Let p = 1, ...n be the distinct patterns used in the abstract workﬂow and agg p be the quality aggregation function
for each pattern. The overall workﬂow quality Q(W) is deﬁned as:
n

Q(W) =

agg p (Q(Di ), Q(L j ))
p=1

(10)

172

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

#)*

&



	

#)*






&

&





	+


+






 !"#$#%&#'(





	



&

Figure 3: Example Workﬂow with Composition Patterns

5. Dynamic Multi-Objective Optimization
In this section, the goal functions are described and an algorithm to solve the optimization problem is presented.
5.1. Goal Functions
Based on the formal model developed in the previous section, we are now able to formulate the objective functions and constraints of our concrete optimization problem. As outlined in the introduction, the present deployment
selection problem is studied from two diﬀerent angles. First, from the user’s perspective, the goal is to minimize
the execution time of each request, while satisfying constraints such as minimum availability and reliability requirements. As we are interested in the execution times of feasible workﬂows in relation to each other (i.e. ranking the
feasible workﬂows) rather than in absolute values, mapping the execution time to the Quality Ranking introduced
in Section 4.3 is a valid abstraction. Second, from the perspective of the system provider that is supposed to be a
central instance, the goal is to ensure a fair and eﬃcient usage of all available resources. This goal is referred to as
utilization in the remainder. In the optimization process, we are thus not only considering a single user request, but
also the overall system behavior over a certain time period. In terms of an optimization objective, this can be mapped
to minimizing the variance of the quality ratings for each abstract workﬂow. We are thus facing a multi-objective
optimization problem comprised of two goals:
1. Maximize the quality of a single request: Max(Q(W))
2. Minimze the variance of the quality over time: for each W0 , minVar(Q(W))
potentially subject to deﬁned constraints.
These two goals are conﬂicting, as one tries to reach the best solution for a single given request, without taking into
account the overall system state and the consequences for other requests potentially occurring in the same time frame,
and the second one tends to optimize the request distribution and the fairness of resource usage. As in most multiobjective optimization problems, the goal is thus to ﬁnd and investigate a set of solutions that satisfy both objectives
at an acceptable level. In other words, the goal is to identify solutions in the Pareto optimal set.
Additionally, we require the overall optimization framework to be dynamic in the following aspects:
• Changes in the Environment. The environment we are facing is dynamic, as sites, resources and deployments
can be added and attributes can change over time. As mentioned earlier, the system is not constantly changing
and the changes are well-controlled, but the optimization needs to adapt to them.
• Objective Weights. While designing the optimization algorithm, one decision to make is about the relative
weight of one objective to the other. In a well-known application environment as ours, we argue that we can
deﬁne time-dependent usage proﬁles and application speciﬁc proﬁles, e.g. peak usage periods. Depending on
these proﬁles, we want to put the emphasis on one objective or the other. As an example, in periods with very
low system activity, the ﬁrst objective (maximize the quality rating) should be higher weighted. During periods
of high system usage, it is more important to equally distribute the requests, thus the second objective is higher
weighted. This is only possible because we are able to determine such proﬁles based on the mining of historical
data.

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

173

• Prioritization of abstract workﬂows. In a real-world application scenario, it can be a requirement to prioritize
some use cases over others in a deﬁned time frame. For example, in a period of high data analysis activity (e.g.
before conferences) that requires data extraction, the abstract workﬂows related to the Extract service might be
given priority over all others. We thus want to provide a mechanism for allowing to set such priorities and use
them in the optimization process.
Based on these dynamic requirements, several proﬁles can be determined that describe the system state at a given
point in time.
5.2. Explicit Memory-Based Genetic Algorithm
Genetic Algorithms (GA) are well-suited for solving static as well as dynamic multi-objective optimization (DMO)
problems, as stated in [9, 10]. In DMO problems, it is desirable to be able to quickly react to changes without starting
the optimization process from scratch. In terms of GA, this means that the population of the algorithm has to react
to changes as fast as possible [9]. There mainly exist four approaches to reach this goal, according to [11]: diversity
after the changes, diversity along the runtime, memory-based techniques and multi-population techniques.
In the present use case, memory-based techniques are the most promising ones, as we are facing a problem where
similar conditions reappear in regular intervals (time/usage proﬁles). There are two ways of storing information in
memory, by implicit memory or explicit memory [11]. Implicit memory schemes use redundant representations to
implicitly store information that can be used during a run. Explicit memory schemes allow to store useful information
from the current generation for reuse in later generations or environments. They thus use up additional storage space.
It is possible to not only store good solutions from the current generation, but also information that associates those
solutions with a particular environment, in our case a usage proﬁle. In later runs, environment characteristics can
be matched with already known environment information, and the associated good solutions can be retrieved and
updated. This is called associating memory scheme [12]. As we are facing a controlled environment that can be
described at any given point in time, an optimization strategy using an explicit memory-based genetic algorithm is
promising.
A simple pseudo code example of such an algorithm is listed in Algorithm 1. A knowledge base is associated with
the optimization environment. In regular intervals, the best individual of a population is stored along with a vector
that characterizes the system state. Each time this vector changes, i.e. a new environment is encountered, the genetic
algorithm is restarted with a given fraction of random individuals and a given fraction of successful individuals for a
similar environment. The key to this approach is to eﬃciently represent and store the environment information and
deﬁne similarity mappings between diﬀerent environments. The environment can be described using a bit-encoded
proﬁle vector v having a ﬁxed length and description. The value 1 at a given position means that the associated proﬁle
is currently active, otherwise the value is set to 0. Time and usage proﬁles can be derived by analyzing historical
logging data. The deﬁnition of proﬁles for the system conﬁguration in terms of deployments and their status needs
further investigation.
Especially we have to pay attention to the two mentioned speciﬁc GA-functions: crossover and mutate and how
they can be applied to our selection of workﬂow components.
• The crossover function takes two or more individuals – concrete workﬂows with selected deployments – of a
given population and combines them to deduce a new and (hopefully) better individual. As mentioned in the
previous section we measure the quality of an individual – a solution workﬂow satisfying our optimization targets – by Q(W). Regarding our service selection challenge we can apply the crossover function by splitting up
the workﬂows in several subworkﬂows and recombining them at a certain link, i.e. we split the example workﬂow after Parallel 1 and before the Sequence 2 block. Thus each workﬂow can be fragmented into two halves,
allowing to build up a new workﬂow (individual) out of a front and a rear of two discriminative workﬂows
(indivuduals).
• The mutate function allows to alter – respectively replace – characteristics of an individual by using a comparable, similar characteristic that gains a higher quality value as the replaced one. Due to this improvement the
overall quality of the individual increases. Applied to a workﬂow in our service selection scenario this means
that we only replace one or more fragments of a constructed workﬂow (individual). Therefore we have to

174

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

identify deployments with similar characteristics concerning the business logic, but possessing a higher quality
level. As in the crossover case the goal of this function is to create new individuals (workﬂow conﬁgurations)
that show a higher quality than the actual existing ones.

t := 0 and initialize population P(0) randomly;
t M := rand(5, 10) and initialize memory M(0) randomly;
v0 := 0 (default proﬁle vector);
repeat
evaluate(P(t),M(t));
if v! = v0 then
ﬁnd the closest proﬁle vector V M (t);
denote the best memory point BM (t), V M (t) ;
I(t) := create α × (n − m) individuals from V M (t);
P’(t) := replace the worst individuals in P(t) by ones in I(t);
else
P’(t) := P(t);
end
if t = t M then
t M := t+rand(5, 10);
denote the best individual in P’(t) by BP (t);
VP (t) := proﬁle vector in P’(t);
if still any random point in M(t) then
replace a random memory point by BP (t), VP (t) ;
else
c
S cM (t), V M
(t) := the memory point closest to BP (t), VP (t) ;
if f (BP (t)) ≥ f (S cM (t)) then
c
S cM (t), V M
(t) := B p (t), V p (t) ;
end
end
end
P’(t) := selectForReproduction(P’(t));
crossover(P’(t), pc );
mutate(P’(t), pm );
until termination condition true;
Algorithm 1: Proﬁle-Based Associative Memory Genetic Algorithm

6. Related Work
Genetic algorithms have recently been leveraged for solving QoS-aware service composition problems [13, 14, 15,
16]. While some are solving single-objective optimization problems [14], other approaches deal with multi-objective
problems. Wada et. al. [15] apply a multi-objective genetic algorithm to the QoS-aware service composition problem. They also deﬁne services (Abstract Services), deployments (Concrete Services), abstract workﬂows (Business
Processes), concrete workﬂows (Business Process Instances) and consider three example QoS attributes, namely
throughput, latency and cost. They deﬁne a business process based on three patterns with associated composition
functions for the mentioned QoS attributes. Based on these concepts, the authors present a multi-objective genetic
algorithm called E 3 -MOGA in which each individual represents a solution of the service composition problem. Its
ﬁtness value is then calculated based on its domination rank and density. Individuals evolve through genetic crossover
and mutation, and the algorithm ultimately gives a set of Pareto solutions. In each iteration, three diﬀerent service
levels are considered. The adopted approach is close to ours, but it does not take into account the dynamic of the

Elisabeth Vinek et al. / Procedia Computer Science 4 (2011) 166–175

175

underlying system and assumes static objective functions. Qiqing et. al. [16] present an approach to globally optimize
the quality of service using multi-objective ant colony optimization (MOCACO). The authors compare their algorithm to the multi-objective genetic algorithm (MOGA) proposed in [13] for the same kind of problem and show that
MOCACO outperforms MOGA both in terms of runtime performance and in terms of ﬁnding more good solutions.
Again, the underlying system is assumed to be static, which diﬀers from our approach.
7. Conclusion and Future Work
Departing from a real-world optimization problem as described in Section 2, we developed a generic representation of the studied distributed system, derived a formal model and formulated a concrete dynamic multi-objective
optimization problem. Analyzing the optimization problem in more detail led to the conclusion that an explicit
memory-based genetic algorithm is an appropriate solution approach. The next steps include the implementation of
the described algorithm, calibration of the model, and the evaluation of possible variations of the algorithm. Special
attention will be given to the eﬃcient representation of the environment in memory. The assessment of the overall
approach and the evaluation of our model will be carried out both in the real system and in a simulated environment. A
service registry is in place that stores all components of the distributed TAG system and computes concrete attributes
as described in Section 3. A prototype implementation of the deployment selection algorithm will be provided and
assessed in the production system. In parallel, in order to study the scalability of the approach, we plan to build a simulated copy of our environment in the SimGrid tool [17], simulate diﬀerent load scenarios, and reassess the algorithm
based on these results. Additionally, as described in [9], parallel processing can generally speed up the execution time
of genetic algorithms applied to dynamic multi-objective optimization problems. We thus plan to provide a parallel
version of the proposed algorithm.
References
[1]
[2]
[3]
[4]
[5]

[6]
[7]
[8]
[9]
[10]
[11]
[12]

[13]

[14]

[15]
[16]
[17]

The ATLAS Collaboration, The ATLAS Experiment at the CERN Large Hadron Collider, in: JINST 3 S08003, 2008, p. S08003.
The ATLAS Collaboration, ATLAS computing, Technical Design Report ATLAS, CERN, Geneva, 2005.
T. Yu, Y. Zhang, K.-J. Lin, Eﬃcient algorithms for Web services selection with end-to-end QoS constraints, ACM Trans. Web 1 (1) (2007) 6.
D. Pisinger, Algorithms for Knapsack Problems, Ph.D. thesis, DIKU, University of Copenhagen, Denmark, Technical Report 95-1 (1995).
E. Vinek, P. P. Beran, E. Schikuta, Mapping Distributed Heterogeneous Systems to a Common Language by Applying Ontologies, in: PDCN
2011: Proceedings of the 10th IASTED International Conference on Parallel and Distributed Computing and Networks, IASTED/ACTA
Press, 2011, accepted for publication.
Distributed Management Task Force, Common Information Model (CIM), Schema 2.28.0 (February 2011).
URL http://dmtf.org/standards/cim
K. Koﬂer, I. Ul Haq, E. Schikuta, A Parallel Branch and Bound Algorithm for Workﬂow QoS Optimization, Parallel Processing, International
Conference on 0 (2009) 478–485.
E. Vinek, P. P. Beran, E. Schikuta, Classiﬁcation and composition of qos attributes in distributed, heterogeneous systems, in: submitted to
CCGRID, 2011.
M. C´amara, J. Ortega, F. de Toro, A single front genetic algorithm for parallel multi-objective optimization in dynamic environments, Neurocomput. 72 (2009) 3570–3579.
A. Konak, D. W. Coit, A. E. Smith, Multi-objective optimization using genetic algorithms: A tutorial, Reliability Engineering & System
Safety 91 (9) (2006) 992 – 1007, special Issue - Genetic Algorithms and Reliability.
Y. Jin, J. Branke, Evolutionary Optimization in uncertain Environments - A Survey, Evolutionary Computation, IEEE Transactions on 9 (3)
(2005) 303–317.
S. Yang, Explicit Memory Schemes for Evolutionary Algorithms in Dynamic Environments, in: S. Yang, Y.-S. Ong, Y. Jin (Eds.), Evolutionary Computation in Dynamic and Uncertain Environments, Vol. 51 of Studies in Computational Intelligence, Springer Berlin / Heidelberg,
2007, pp. 3–28.
S. Liu, Y. Liu, N. Jing, G. Tang, Y. Tang, A Dynamic Web Service Selection Strategy with QoS Global Optimization Based on Multi-objective
Genetic Algorithm, in: H. Zhuge, G. Fox (Eds.), Grid and Cooperative Computing - GCC 2005, Vol. 3795 of Lecture Notes in Computer
Science, Springer Berlin Heidelberg, 2005, pp. 84–89.
M. C. Jaeger, G. Mhl, QoS-based Selection of Services: The Implementation of a Genetic Algorithm, in: T. Braun, G. Carle, B. Stiller (Eds.),
In KiVS 2007 Workshop: Service-Oriented Architectures und Service-Oriented Computing (SOA/SOC, VDE Verlag, Bern, Switzerland,
2007, pp. 359–370.
H. Wada, P. Champrasert, J. Suzuki, K. Oba, Multiobjective Optimization of SLA-Aware Service Composition, in: Proceedings of the 2008
IEEE Congress on Services - Part I, SERVICES ’08, IEEE Computer Society, Washington, DC, USA, 2008, pp. 368–375.
F. Qiqing, P. Xiaoming, L. Qinghua, H. Yahui, A Global QoS Optimizing Web Services Selection Algorithm Based on MOACO for Dynamic
Web Service Composition, Information Technology and Applications, International Forum on 1 (2009) 37–42.
H. Casanova, A. Legrand, M. Quinson, SimGrid: A Generic Framework for Large-Scale Distributed Experiments, in: Proceedings of the
Tenth International Conference on Computer Modeling and Simulation, IEEE Computer Society, Washington, DC, USA, 2008, pp. 126–131.

