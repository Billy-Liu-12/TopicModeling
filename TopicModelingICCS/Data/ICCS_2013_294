Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 429 – 438

International Conference on Computational Science, ICCS 2013

A Discrete Adjoint Model for OpenFOAM
M. Towaraa,∗, U. Naumanna
a Software

and Tools for Computational Engineering, RWTH Aachen University, 52056 Aachen, Germany

Abstract
We present a discrete adjoint version of the open-source ﬂuid-dynamics package OpenFOAM obtained by operator overloading
which yields, in comparison to continuous adjoint versions, a greater ﬂexibility and robustness. We discuss our implementation
and how the discrete adjoint version of OpenFOAM diﬀers from existing continuous implementations. To reduce the inherent
memory requirement of discrete adjoint code we introduce a checkpointing scheme to trade computation time for memory.
Moreover we show results from a relevant reference case.
Keywords: CFD, OpenFOAM, discrete adjoints, shape optimization

1. Introduction
In this paper we show how to apply Algorithmic Diﬀerentiation (AD) [1] to an industrial size CFD code. We
use the popular computational ﬂuid dynamics solver package OpenFOAM[2]. OpenFOAM is open-source under
the GPL and is implemented in C++.
In section 2 we show the background of the studied CFD shape optimization problem. We introduce and
compare continuous and discrete mode for obtaining derivatives of the problem. In section 3 we present the implementation of our discrete adjoint solver discreteAdjointSimpleFoam which calculates derivatives needed
for shape optimization. Furthermore we implement techniques to reduce the memory footprint of this solver. In
section 4 we present results for a optimization test case obtained with our discrete adjoint solver.
2. CFD and AD Background
2.1. Primal Navier-Stokes Equations
The Navier-Stokes equations for incompressible, isothermal, Newtoinian ﬂuid consist of the equations of
momentum and mass conservation:
1
∂v
+ v · ∇v = ν∇2 v − ∇p + b
∂t
ρ
∇·v=0
∗ Markus

Towara. Tel.: +49-241-80-20127.
E-mail address: towara@stce.rwth-aachen.de.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.206

(1)
(2)

430

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

where v denotes the velocity vector, p the pressure, ν the kinematic viscosity, ρ the density and b a vector of
external body forces (e.g. gravity).
For three dimensions this leads to four partial diﬀerential equations with four unknowns. Typically one wants
to solve the equations of momentum and mass conversation independently to be able to apply the discretizations
for generic conservation eqauations [3]. The velocities can be uniquely derived from the momentum equations,
if one treats the pressure as a source term. But the equation of mass conservation does not contain the pressure
p, so an additional hypothesis is needed. This leads to iteration methods such as the SIMPLE-Algorithm [4].
The latter algorithm is implemented in the OpenFOAM solver binary simpleFoam which calculates stationary
incompressible ﬂows with a pseudo-time stepping scheme.
For the use case of shape optimization we add an additional resistance term −αv to the right hand side of
the momentum equation (1) and neglect external body forces. This resistance term will allow us to penalize the
velocity in individual cells in the discretized equations. For this one aims to ﬁnd cells in which a reduction of
velocity (by increasing α) will lead to an improved ﬂow w.r.t. to a given cost function.
∂v
1
+ v · ∇v = ν∇2 v − ∇p − αv
∂t
ρ
This approach or slight variations thereof are widely used in shape optimization [5, 6].
2.2. Continuous Adjoint Formulation
To be able to understand the fundamental diﬀerences between the continuous and discrete approach to adjoining the Navier-Stokes equations we ﬁrst brieﬂy introduce the derivation of the continuous equations. From the
primal equations of mass and momentum conservation the adjoint counterparts can be derived analytically by variation techniques [5]. These adjoint equations can be solved along the primal equations to obtain the sensitivities
of the chosen cost functional J w.r.t. the parameters α:
−2D(u)v = −∇q + ∇ · (2νD(u)) − αu −
∇·u=

∂JΩ
.
∂p

∂JΩ
∂v

In addition to the already introduced variables v, p, α, ν there are now also variables u for the adjoint velocity, q
∂JΩ
denotes the dependance of the
for adjoint pressure and J for the used cost function. The partial derivative
∂v
cost functional on the inner domain. For the use case of ducted ﬂows this term often vanishes, because the cost
function only depends on the boundary of the domain (e.g. total pressure loss).
The boundary conditions for the adjoint equations have to be derived by hand for each individual cost function. For the derivation of the boundary conditions for ducted ﬂow using the total dissipation of the system as
cost function see [5]. The solver adjointShapeOptimizationFoam which is available in OpenFOAM 2.0 and
following versions implements the pressure loss minimization cost function
Jp =

Γ

p dΓ

which corresponds to our discrete implementation. In [5] a slightly diﬀerent total dissipation minimizing formulation is proposed:
1
J=−
p + v2 v · n dΓ.
2
Γ
For both formulations Γ denotes the inﬂow and outﬂow boundaries.
The sensitivity of the cost function J w.r.t. the resistance term for each individual cell αi can be determined by
the inner product of primal and adjoint velocities, scaled by the cell volume Vi :
∂J
= (vi · ui ) Vi .
∂αi

431

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

2.3. Optimization Algorithm
If the sensitivities of J with respect to each αi are known (either obtained by continuous or discrete methods),
then the resistance ﬁeld α can be updated by a suitable optimization algorithm to improve the solution w.r.t. the
given cost functional.
The simplest method to update α is to apply method of steepest gradient descent with ﬁxed stepsize:
= αti − λ
αt+1
i

∂J t
.
∂αti

To obtain a steady solution after a ﬁnite number of optimization steps α is capped below zero and above a certain
threshold (otherwise α would rise indeﬁnitely in regions of negative sensitivities and could fall below zero in
regions with positive sensitivities, which is physically impossible)
0 ≤ α ≤ αmax .
2.4. Discrete Adjoint Formulation
We treat our optimization problem as J : IRn → IRm , J(x) → min!, where each function evaluation J(x) implies
a complete solver run on the nonlinear equation systems. For the purpose of shape optimization m will either be
one or O(1).
First order AD assumes J to be at least once continuously diﬀerentiable at all points of interest. For a given
implementation of y = J(x), a corresponding (ﬁrst-order) tangent-linear code computes a directional derivative
y(1) = J (1) (x, x(1) ) ≡ ∇J · x(1) ,
where x(1) ∈ IRn , y(1) ∈ IRm , and ∇F = ∇F(x) ∈ IRm×n denotes the Jacobian matrix of F. A (ﬁrst-order) adjoint code
computes
x(1) = J(1) (x, y(1) ) ≡ ∇J T · y(1) ,
where x(1) ∈ IRn and y(1) ∈ IRm . Dense Jacobians can be obtained in tangent-linear mode at O(n) · Cost(F), where
Cost(F) denotes the computational cost of a single evaluation of F. The same Jacobian is obtained in adjoint mode
at O(m) · Cost(F).
For the purpose of our OpenFOAM optimization we use the adjoint model, because a large number of inputs
(n) are mapped to a rather small amount of outputs (m).
Second and higher derivatives can be obtained by re-applying the tangent-linear model on the existing tangentlinear or adjoint code.
Conceptually, AD is based on the fact that each computer program can be decomposed at run time into a single
assignment code
for j = n, . . . , n + p + m − 1
v j = ϕ j (vi )i≺ j ,
where i ≺ j denotes a direct dependence of the variable v j on vi . The result of each elemental function ϕ j is
assigned to an unique auxiliary variable v j . The n independent inputs xi = vi , for i = 0, . . . , n − 1, are mapped onto
m dependent outputs y j = vn+p+ j , for j = 0, . . . , m − 1. The values of p intermediate variables vk are computed for
k = n, . . . , n + p − 1.
Assuming diﬀerentiability of the elemental functions at the current point, the tangent-linear mode of AD
augments each elemental assignment with its tangent-linear model as follows:
for j = n, . . . , n + p + m − 1
∂ϕ j (1)
·v
v(1)
j =
∂vi i
i≺ j
v j = ϕ j (vi )i≺ j .

(3)

432

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

Directional derivatives are propagated in parallel with the original function evaluation.
In adjoint mode, a forward evaluation of the original program is succeeded by the propagation of adjoints for
all vi in reverse order, that is, for i = n + p − 1, . . . , 0 :
⎫
⎪
⎪
for j =n, . . . , n + p + m − 1
⎬
forward section
⎪
⎪
⎭
v j = ϕ j (vi )i≺ j
⎫
⎪
⎪
(4)
for i =n + p − 1, . . . , 0
⎪
⎪
⎪
⎪
⎬
∂ϕ j
reverse section
⎪
⎪
⎪
v(1)i =
· v(1) j
⎪
⎪
⎪
∂v
i
⎭
j:i≺ j
Note that the v j computed in the forward section are potentially required as arguments of local partial derivatives
within the reverse section. They are read in reverse with respect to the original order of their evaluation. The
additional (compared with the tangent-linear code) persistent memory requirement of the adjoint code is O(n + p +
m). The data ﬂow reversal is the main challenge in adjoint AD. It is responsible for black-box AD typically not
being applicable to large-scale numerical simulations. The available persistent memory may simply not be large
enough [7].
2.5. Discrete vs. Continuous Adjoint Formulation
The diﬀerent approaches to the determination of adjoints may lead to diﬀerences in the results. In the continuous approach the equations to determine the adjoint quantities are derived analytically from the primal equations.
This assumes that the exact primal solution can be obtained by solving the primal equations. Those systems
(primal & adjoint) are discretized and solved coupled in variables (the primal velocity v appears in the adjoint
equations) but independently in terms of numerical methods. So the discretization of equations and the accuracy
of the solution may diﬀer between primal and adjoint solutions. The discrete approach on the other hand generates
continuous
primal
problem

analytical
derivation

discretized
primal
problem

algorithmic
differentiation

primal
solution

continuous
adjoint
problem

discrete
adjoint
problem

discretized
adjoint
problem

adjoint
solution

adjoint
solution

Fig. 1. Comparison of continuous and discrete adjoint model. Solid edges belong to the continuous model, dashed lines correspond to the
discrete model

the adjoints directly from the primal discretization. Thus the adjoints correspond to the results of the solution of
the primal equations. It is important to note that these adjoints are exact for the steps taken in the given program.
But if the solution of the primal equations has not converged yet, the adjoints, while giving the exact adjoints of
the iteration history, may not give the desired adjoints of the primal solution.In Fig. 2.5 we illustrate the diﬀerent
approaches to continuous and discrete adjoint calculation.
3. Implementation of the Discrete Adjoint
3.1. Operator Overloading
The operator overloading approach implements the steps required to diﬀerentiate a program described in eq. (3)
and eq. (4) by overloading the elemental functions ϕ j in the code. This allows to propagate the partial derivatives

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

in case of tangent linear mode or to store the required intermediate values which are needed in the reverse section.
We store these intermediate values in a data structure called tape. The data ﬂow reversal corresponds to the
interpretation of the discrete adjoint code. Details on the implementation of operator overloading can be found in
[7, 1].
We use the operator overloading tool dco/c++ [8]. It can be used to obtain ﬁrst derivatives by tangent linear or
adjoint mode. Furthermore second and higher order derivatives are obtained by applying tangent-linear or adjoint
modes to the ﬁrst-order models again [7]. There are other overloading tools available such as ADOL-C [9],
FADBAD [10] or CppAD [11]. Refer to www.autodiﬀ.org for a comprehensive list of tools.
3.2. Enabling Operator Overloading in OpenFOAM
In order to be able to perform operator overloading one has to replace all ﬂoating point variables relevant to
the calculation of the cost functional with an active data type. In dco/c++ this type is called dco::a1s::type.
As it is hard to identify the relevant variables in such a big project as OpenFOAM, and choosing a too limited set
of variables might aﬀect the ﬂexibility of the framework, the most convenient way is to replace them all. dco/c++
has methods to identify if variables need to be included into the tape. This so called activity analysis [12] keeps
the overhead induced by replacing all ﬂoating point values with active datatypes low (see Tab. 2).
OpenFOAM features a highly modular and abstracted program structure. It uses global typedefs for its
datatypes which simpliﬁes the switching of the used data type from ﬂoating point values to our new active data
type for the whole framework.
3.3. Black-Box AD Approach
By Black-Box we mean applying the operator overloading technique to a program without further exploiting
knowledge about the underlying program structure. Of course to be able to use the overloading tools, complete
access to the sources of the program is needed.
With the help of our discrete adjoint OpenFOAM framework the calculation of derivatives is quite forward.
∂J
of the Navier-Stokes
Here we will brieﬂy present how to adjoin a complete solver run to obtain derivatives
∂αi
equations with additional resistance term as presented in section 2.1. Note that this only calculates the sensitivities
of the cost-function w.r.t. one given state of α and does not imply an optimization. Listing 1 shows the main
routine of a solver executable discreteAdjointSimpleFoam which is derived from the OpenFOAM standard
solver simpleFoam. In the code U corresponds to v, p to p and alpha to α. The inclusion of the resistance term
αv is handled in line 16. The only additional overhead comes from:
•
•
•
•
•
•

memory allocation for the tape (line 4)
initializing the cost function (line 3)
registering the individual entries of alpha as inputs (lines 6-7)
evaluation of the cost function (lines 43-49)
setting of output adjoints and interpretation (lines 53-54)
retrieving the calculated sensitivities (lines 56-60)

The calculation of the cost function can easily be replaced by other formulations, as there are no strong
limitations to what can be evaluated (for example J can depend on any value of p or v, regardless if it is lying in
the domain or on the boundary, in contrast to the continuous version where only values on the boundary can be
evaluated without altering the governing equations). Some examples which come to mind are:
• minimization/maximization of the velocity in a certain cell / a cell set
• maximization of curl in a certain region (mixing)
• achieving prescribed outﬂow fractions over multiple outlets
Listing 1. Discrete adjoint solver derived from simpleFoam, additional statements are marked with //dco:
1
2
3

i n t main ( i n t a r g c , char ∗ a r g v [ ] ) {
/ / [ I n i t i a l i z a t i o n s , additional includes omitted ]
s c a l a r D o u b l e J = 0 ; / / dco : r e s u l t v a r i a b l e f o r c o s t f u n c .

433

434

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438
dco : : a 1 s : : g l o b a l t a p e = dco : : a 1 s : : t a p e : : c r e a t e ( ) ;

4

/ / dco : c r e a t e t a p e

5

f o r ( i n t i =0; i < a l p h a . s i z e ( ) ; i ++)
g l o b a l t a p e −> r e g i s t e r v a r i a b l e ( a l p h a [ i ] ) ;

6
7
8

f o r ( runTime ++; ! runTime . end ( ) ; runTime ++){
# i n c l u d e ” r e a d S I M P L E C o n t r o l s . H”
p. storePrevIter ();
tmp< f v V e c t o r M a t r i x > UEqn
(
fvm : : d i v ( p h i , U)
− fvm : : l a p l a c i a n ( nu , U)
+ fvm : : Sp ( a l p h a , U)
);
UEqn ( ) . r e l a x ( ) ;
s o l v e ( UEqn ( ) == − f v c : : g r a d ( p ) ) ;

9
10
11
12
13
14
15
16
17
18
19
20

p . boundaryField ( ) . updateCoeffs ( ) ;
v o l S c a l a r F i e l d rAU = 1 . 0 / UEqn ( ) . A ( ) ;
U = rAU∗UEqn ( ) . H ( ) ;
UEqn . c l e a r ( ) ;
p h i = f v c : : i n t e r p o l a t e (U) & mesh . S f ( ) ;
a d j u s t P h i ( p h i , U, p ) ;

21
22
23
24
25
26
27

/ / Non− o r t h o g o n a l p r e s s u r e c o r r e c t o r l o o p
f o r ( i n t n o n O r t h =0; nonOrth <=n N o n O r t h C o r r ; n o n O r t h ++){
f v S c a l a r M a t r i x pEqn ( fvm : : l a p l a c i a n ( rAU , p ) == f v c : : d i v ( p h i ) ) ;
pEqn . s e t R e f e r e n c e ( p R e f C e l l , p R e f V a l u e ) ;
pEqn . s o l v e ( ) ;

28
29
30
31
32
33
34
35

}

36

i f ( n o n O r t h == n N o n O r t h C o r r )
p h i −= pEqn . f l u x ( ) ;

37

# i n c l u d e ” c o n t i n u i t y E r r s . H”
p . r e l a x ( ) ; / / E x p l i c i t l y r e l a x p r e s s u r e f o r momentum c o r r e c t o r
U −= rAU∗ f v c : : g r a d ( p ) ;
/ / Momentum c o r r e c t o r
U. c o r r e c t B o u n d a r y C o n d i t i o n s ( ) ;

38
39
40
41
42

/ / CALCULATE COST FUNCTION J = Sum o v e r p a t i n l e t
J = 0;
forAll ( pressurePatches () , prpI ){
l a b e l p a t c h I = mesh . boundaryMesh ( ) . f i n d P a t c h I D ( p r e s s u r e P a t c h e s ( ) [ p r p I ] ) ;
c o n s t f v P a t c h& p a t c h = mesh . b o u n d a r y ( ) [ p a t c h I ] ;
J += gSum ( p . b o u n d a r y F i e l d ( ) [ p a t c h I ] ∗ p a t c h . magSf ( ) ) ;
}
runTime . w r i t e ( ) ;

43
44
45
46
47
48
49
50

}

51
52

dco : : a 1 s : : s e t ( J , 1 . 0 , − 1 ) ; / / dco : c a l c . s e n s i t i v i t i e s o f J w . r . t . t h e i n p u t s a l p h a
g l o b a l t a p e −> i n t e r p r e t a d j o i n t ( ) ; / / dco : r e v e r s e i n t e r p r e t a t i o n o f t h e t a p e

53
54
55

d o u b l e d J d a =0;
f o r ( i n t i = 0 ; i < a l p h a . s i z e ( ) ; ; i ++){
g e t ( a l p h a [ i ] , dJda , − 1 ) ; / / dco : r e t r i e v e t h e s e n s i t i v i t i e s f r o m t h e t a p e
s e n s [ i ] = d J d a ; / / dco : s a v e s e n s i t i v i t i e s i n o b j e c t
}
runTime . w r i t e ( ) ;
return ( 0 ) ;

56
57
58
59
60
61
62
63

}

Unfortunately the simplicity of this approach comes with a price. The tape has to store the whole iteration process.
In each outer (pseudo-) time iteration (lines 9-51) sparse linear equation systems for the solution of v (lines 12-18)
and p (lines 30-32) are constructed. These systems are solved with iterative solvers. This iterative solver is called

435

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

d times for the solution of v with d = 2 for 2D and d = 3 for 3D cases. The equation for p needs to be solved
n times where n equals the number of non-orthogonal correction steps for p. If there are additional variables for
turbulence the number of solver calls increases even further. All those inner solver calls and iterations have to
be taped. This leads to a considerable memory consumption which will exceed the available memory of most
machines for all but simple problems. Table 1 lists the memory consumption of the tape holding 10 outer time
steps for a coarse testproblem with 1300 cells using diﬀerent inner solvers. The total tape memory needed is
1167 MB for the left case and 1358 MB for the right case, leading to an additional overhead not related to the
solvers of about 19 MB for both cases (for U we measure the diﬀerence in tape size from line 12 to line 19, for p
we measure the diﬀerence from line 21 to line 39.)
Table 1. Memory requirements for ten outer time steps for two diﬀerent choices of the inner solvers. The convergence criterium is
for all solvers. nNonOrthCorr=1. The used geometry consists of 1300 quad-cells (2D).
variable
U
p

solver
PBiCG
GAMG

total iterations
93
160

tape memory
348 MB
800 MB

variable
U
p

solver
smooth
DICPCG

total iterations
260
387

= 10−6

tape memory
280 MB
1060 MB

In the following we present typical run times for the execution of the OpenFOAM solver. We inspect the
following cases:
• unaltered passive version of simpleFoam, i.e., with double datatype still in place
• discrete adjoint version of simpleFoam, i.e. double datatype replaced with dco::a1s::type, to study the
overhead introduced by the active datatype
• discreteAdjointSimpleFoam with taping but without interpretation
• full discreteAdjointSimpleFoam with taping and interpretation

Table 2. Execution times for the diﬀerent solver runs. The whole program execution is measured, ten time steps are calculated.
solver
passive simpleFoam
active simpleFoam
tape discreteAdjointSimpleFoam
full discreteAdjointSimpleFoam

execution time [s]
1.07
2.27
11.9
15.9

factor
1.00
2.12
11.12
14.85

We observe that introducing the active datatype roughly doubles the run time if no further actions are undertaken. This shows that the replacement of all ﬂoating-point values by active datatypes does not have a dramatic
eﬀect on the run time. After we registered some dependent variables in the tape, the run time roughly increases by
a factor of ﬁve. This is a result that lies in the range one expects from solutions obtained with AD by overloading.
If one includes the tape interpretation into the timing the factor increases again by a factor of roughly 1.3. This
shows that the tape interpretation is quite eﬃcient and a major part of the eﬀort is already done while creating the
tape (a process often called preaccumulation [13]).
One should note that discreteAdjointSimpleFoam includes the additional resistance term in the momentum
equations, while simpleFoam does not. For this example the resistance term α was chosen as α ≡ 0, so the
term should not have any inﬂuence on the number of solver iterations and consequently should not have a major
inﬂuence on run time.
3.4. Checkpointing
In order to reduce the amount of memory occupied by the tape created in the forward run one can introduce a
technique called checkpointing [14]. Only parts of the forward execution are taped, the rest is executed in passive
mode (i.e. with taping switched oﬀ). As we taped only a part of the forward execution we can interpret only
this part in the reverse interpretation sweep. After the reverse sweep the partially calculated adjoints are stored in
memory and the tape can be erased. Then the program is executed in forward mode again to tape the next part of
the program. Afterwards the stored adjoints can be restored and the reverse interpretation can be resumed with

436

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

the new tape. This alternation between forward execution and reverse interpretation is repeated until the whole
program has been taped and interpreted.
To decrease the amount of operations needed to return from the start of the recalculation to the point where
the tape is activated again, we can save the program state (create a checkpoint) at given intervals (in the case
of OpenFOAM the ﬁelds U, p, phi need to be saved). If such checkpoints exist one can resume the forward
calculation from the nearest checkpoint instead of needing to start from scratch again.
One has to ﬁnd a reasonable trade-oﬀ between computation time, memory needed for checkpoint storage and
memory needed for taping the forward run. There are numerous ways to do this eﬃciently, for example one could
use the revolve algorithm [15].Currently we use an equidistant checkpointing scheme, i.e., checkpoints are written
after a given constant number of iterations. See Fig. 3 for a visualization of the needed steps to implement this
checkpointing scheme.
Table 3. Example of the memory needed for one typical taping step or checkpoint on a unit-cube blockmesh. The spacial resolution in each
direction is doubled from row to row. The tape sizes depend on the amount of solver iterations to convergence and are thus not constant.
Problem size n
1000
8000
64000

Checkpoint Memory [MB/Checkpoint]
0.174
1.180
8.620

0

1

2

3

4

5

0

1

2

3

4

5

0

1

2

3

4

0

1

2

3

0

1

2

0

1

6

max. Tape Memory [MB/Step]
46.53
488.3
5934

0

1

2

3

4

0

1

2

3

4

0

1

2

3

0

1

5

6

Fig. 2. Needed calculation steps for primal run and complete interpretation of six time steps with one intermediate checkpoint (at t=3) and
one (left) resp. two (right) taped time steps. Shaded Time steps are checkpointed, circled time steps are taped for interpretation and underlined
steps need to be recomputed from the last checkpoint.

3.5. Implementation of the Optimization Algorithm
We use the steepest gradient descent algorithm as introduced in section 2.3. To obtain the needed derivatives
the solver is run with ﬁxed α for a ﬁxed number of iterations. If necessary checkpointing is applied. Those
iterations are then adjoined to obtain the sensitivities of the cost functional w.r.t. α. After this the ﬁeld α can be
updated with a steepest gradient descent step. Afterwards the derivatives w.r.t. this new state need to be obtained,
so new solver iterations need to be taped. This process is repeated until a set number of optimization steps are
completed or α has converged.
4. Results
4.1. Maximization of Velocity in a Speciﬁed Single Cell
For this example we examine a rectangular duct of length 10 l × 1 l. At the inlet x = 0 l we prescribe a constant
velocity magnitude of vin and a zero-gradient condition for the pressure. At the outlet (x = 10 l) we ﬁx p and apply
a zero-gradient condition to the velocity. We set the boundaries y = 0 l and y = 1 l as no-slip walls. We chose vin
such that the Reynolds number Re = vinν l equals Re = 10. We assume laminar incompressible steady ﬂow.
The optimization goal is to maximize the velocity component in x-direction in cell i p which lies nearest to the
midpoint pm = (5 l, 0.5 l). To obtain a solution which still retains a reasonable pressure loss we also introduce

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

0

restore checkpoint

1
store adjoints
2
restore checkpoint
3
4
5
6
7
restore adjoints

8

store adjoints

9

evaluate cost function
set adjoints

Fig. 3. Visualization of the steps needed to connect the chunks of reverse interpretation to retrieve the correct adjoints. For this example we
consider nine time steps, place checkpoints every three time steps and assume we can tape three time steps at a time.

a dependence of the cost functional on pressure loss (otherwise the optimizer would place material everywhere
but in the desired cell). As the optimizer is conﬁgured to minimize a given cost functional we transform the
maximization to a minimization by switching the sign:
J = c1 · Jv + c2 · J p = min!.
where Jv and J p are deﬁned as follows:
Jv = − v xi
Jp =

Γ

i=i p

p dΓ.

Γ denotes the inﬂow and outﬂow boundaries.
For this example we set c1 = 1 and c2 = 0.001. We examine two meshes, one 401×41×1 cubic cell block mesh
and one ﬁner 801 × 81 × 1 cubic cell block mesh. For both meshes the solution converges to a hourglass shape (see
Fig. 4). This shape features a channel through cell i p with a height of just one cell where α = 0. The geometries
are symmetric to the x- and y- axis when the origin is placed in the point pm . Due to leakage in the punished cells
the analytic optimal solution for v xi p can not be reached, but if one thinks of these cells as completely blocked
(α → ∞) it is clear that these solutions would be optimal solutions, as the whole ﬂow has to pass through cell i p .
The convergence history (Fig. 5) shows that the cost function J does indeed decrease monotonically.

Fig. 4. Optimized shapes for the maximization of velocity. Coarse mesh on the left, ﬁne mesh on the right.

437

M. Towara and U. Naumann / Procedia Computer Science 18 (2013) 429 – 438

value of cost function

438

c2 J p
Jv
J = Jv + c2 J p

0

−100

−200

20

40
60
optimization step

80

100

Fig. 5. convergence history of the cost functions over 100 optimization steps for the coarse optimization case

5. Conclusion & Outlook
We presented a new approach to adjoining OpenFOAM and its application to shape optimization. Subsequent
work will be done to improve the optimization algorithm by replacing the steepest descent algorithm by a pseudoNewton algorithm like BFGS [16] or even a Newton algorithm. The latter requires second derivatives, which also
can be obtained by the AD tool dco/c++. With a more sophisticated optimizer we can also introduce complex
constraints like volume constraints. Another area for improvement is to replace the used equidistant checkpointing
scheme by revolve [15]. The techniques shown can be potentially applied to all solvers in OpenFOAM, so the
optimization can be extended to, for example, turbulent compressible ﬂows.
References
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]

A. Griewank, A. Walther, Evaluating Derivatives: Principles and Techniques of Algorithmic Diﬀerentiation, SIAM, 2008, Ch. 6.
OpenCFD Ltd., URL: http://openfoam.com/.
J. H. Ferziger, M. Peric, Computational Methods for Fluid Dynamics, Springer, 1999.
S. Patankar, Numerical heat transfer and ﬂuid ﬂow, Hemisphere Pub. Corp., 1980.
C. Othmer, A continuous adjoint formulation for the computation of topological and surface sensitivities of ducted ﬂows, International
Journal for Numerical Methods in Fluids 58 (8) (2008) 861–877.
L. H. Olesen, F. Okkels, H. Bruus, A high-level programming-language implementation of topology optimization applied to steady-state
Navier-Stokes ﬂow, International Journal for Numerical Methods in Engineering 65 (7) (2006) 975–1001.
U. Naumann, The Art of Diﬀerentiating Computer Programs. An Introduction to Algorithmic Diﬀerentiation., SIAM, 2012, Ch. 1&2.
J. Lotz, K. Leppkes, U. Naumann, dco/c++ - derivative code by overloading in C++, Aachener Informatik Berichte (AIB-2011-06).
A. Walther, A. Griewank, Getting started with Adol-C, U. Naumann and O. Schenk, Combinatorial Scientiﬁc Computing, Chapman-Hall
CRC Computational Science (2012) 181–202.
C. Bendtsen, O. Stauning, FADBAD, a ﬂexible C++ package for automatic diﬀerentiation (IMM–REP–1996–17).
B. M. Bell, CppAD: a package for C++ algorithmic diﬀerentiation, Computational Infrastructure for Operations Research, COIN-OR
(http://www.coin-or.org/CppAD).
B. Kreaseck, L. Ramos, S. Easterday, M. Strout, P. Hovland, Hybrid static/dynamic activity analysis, Lecture Notes in Computer Science
– ICCS 2006 3994 (2006) 582–590.
J. Utke, U. Naumann, M. Fagan, N. Tallent, M. Strout, P. Heimbach, C. Hill, C. Wunsch, OpenAD/F: A modular, open-source tool for
automatic diﬀerentiation of Fortran codes, ACM Transactions on Mathematical Software 34 (4) (2008) 18:1–18:36.
J. Grimm, L. Pottier, N. Rostaing-Schmidt, Optimal time and minimum space-time product for reversing a certain class of programs,
Computational Diﬀerentiation: Techniques, Applications, and Tools (1996) 95–106.
A. Griewank, A. Walther, Algorithm 799: revolve: an implementation of checkpointing for the reverse or adjoint mode of computational
diﬀerentiation, ACM Transactions on Mathematical Software 26 (1) (2000) 19–45.
J. Nocedal, S. Wright, Numerical Optimization, Springer, 1999, Ch. 8.

