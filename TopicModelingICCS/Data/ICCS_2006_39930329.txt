Cellular Automata Architecture
for Elliptic Curve Cryptographic Hardware·
Jun-Cheol Jeon, Kee-Won Kim, Byung-Heon Kang, and Kee-Young Yoo··
Department of Computer Engineeing, Kyungpook National University,
Daegu, 702-701 Korea
{jcjeon33, nirvana, bhkang}@infosec.knu.ac.kr,
yook@knu.ac.kr

Abstract. Elliptic Curve Cryptosystems (ECC) are in the spotlight due to their
significantly smaller parameters. The most costly arithmetic operation in ECC
is division, which is performed by multiplying the inverse of a multiplicand. On
the other hand, Cellular Automata (CA) have attracted a lot of attention regarding their potential for various applications. Thus, this paper presents an ECbased hardware architectural model for division based on CA over Galois Field
GF(2n). The proposed architectural model is highly regular, expandable, and it
has reduced latency based on periodic boundary CA. The proposed architecture
can be easily implemented into the hardware design of crypto-coprocessors.

1 Introduction
In cryptography, in order to achieve a high level of security, many public-key algorithms that rely on computations in GF(2n) require a large fields, and some fields need
to be as big as GF(22000). Hence, there is a need to develop an efficient algorithm for
the multiplication in GF(2n). Significantly smaller parameters, however, can be used
in ECC than in other competitive systems such RSA and ElGamal, but with an
equivalent level of security. The benefits of having smaller key sizes include faster
computations and reductions in processing power, storage space, and bandwidth. This
makes ECC ideal for constrained environments such as PDAs, cellular phones, and
smart cards [1].
ECC was proposed as an alternative to the established public-key cryptosystems of
RSA and ElGamal, and it has recently received a great deal of attention in various
industries and academia [2, 3]. The main reason for this attention is that there is no
sub-exponential algorithm that can solve discrete logarithm problem on a properly
chosen elliptical curve. The main operation of ECC is an inverse/division operation,
which can be regarded as a special case of exponentiation [4]. However, since a division operation is quite time consuming, efficient algorithms are required for practical
applications, especially for a public key cryptosystem where operands can be as large
as 512bits or even larger.
·
··

This work was supported by the Brain Korea 21 Project in 2006.
Corresponding author.

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 329 – 336, 2006.
© Springer-Verlag Berlin Heidelberg 2006

330

J.-C. Jeon et al.

Finite field GF(2n) arithmetic operations have recently been applied to a variety of
fields, including cryptography and error-correcting codes [5]. A number of modern
public key cryptography systems and schemes, for example, the Diffie-Hellman key
pre-distribution, ElGamal cryptosystem, and ECC, require division and inversion
operations [6]. Wang [7] proposed parallel-in parallel-out division architecture with a
latency of (2n2-1.5n) and a critical path of (T2AND+ 3T2XOR). Kim’s serial-in serial-out
architecture [8] has a latency of (2n2-2n) and a critical path of (2T2AND+3T2XOR+
TMUX). However, fast arithmetic architecture is still needed to design dedicated highspeed circuits.
Cellular automata have been used in evolutionary computation for over a decade.
They have been used in various applications, such as parallel processing and number
theory. CA architecture has been used to design arithmetic computations that Zhang
[9] proposed an architecture with programmable cellular automata, Choudhury [10]
designed an LSB multiplier based on CA, and Jeon [11] proposed a simple and efficient architecture based on periodic boundary CA.
This paper proposes CA architecture based on EC cryptography for division. We
focused on the architecture in ECC, which uses restricted irreducible polynomials,
especially, trinomials and pentanomials. The structure has a time complexity of (n2n)(T2AND+T2XOR+TMUX) and a hardware complexity of (nAND+(n+2)/(n+6)XOR+
nMUX+4nREGISTER). In addition, our architecture can easily be expanded to be
used in other public key cryptosystem with additional (n-2)/(n-6) XOR gates. Our
architecture focuses on both area and time complexity.
The rest of this paper is organized as follows. The theoretical background, including finite fields, ECC, and CA, is described in Section 2. Section 3 presents the proposed division architecture based on CA, and we present our discussion, together with
a comparison of the performances between the proposed architecture and previous
works, in Section 4. Finally, Section 5 presents our conclusion.

2 Preliminary
In this section, we discuss the mathematical background of the finite field and ECC,
and the characteristics and properties of cellular automata.
2.1 Finite Fields
A finite field, which is a set of finite elements, can be defined by commutative law,
associative law, distributive law and it contains for facilitates for addition, subtraction,
multiplication, and division. A number of architectural models have already been developed to construct low complexity bit-serial and bit-parallel multiplications, by using
various irreducible polynomials that can reduce the complexity of modular multiplication. Since a polynomial basis operation does not require a basis conversion, it can be
readily matched to any input or output system. In addition, due to its regularity and
simplicity, the ability to design and expand it into high-order finite fields, with a
polynomial basis, is easier to realize than with other basis operations [12].
A finite field can be viewed as a vector space of dimension n over GF(2n). That is,
there exists a set of n elements {1, α, …, αn-2, αn-1} in GF(2n), such that each

Cellular Automata Architecture for Elliptic Curve Cryptographic Hardware

331

A∈GF(2n) can be written uniquely in the form A = ∑ Aiα i , where Ai ∈{0,1}. This
section provides one of the most common bases of GF(2n) over GF(2), which are
polynomial bases [12, 13]. Let f(x) = xn + ∑in=−01 f i x i , where fi ∈{0,1}, for i = 0, 1, … ,
n-1, be an irreducible polynomial of degree n over GF(2). For each irreducible polynomial, there exists a polynomial basis representation. In such a representation, each
element of GF(2n) corresponds to a binary polynomial of less than n. That is, for A
∈GF(2n) there exists n numbers Ai ∈{0,1} such that A = An-1αn-1 + …+ A1α + A0. In
many applications, such as cryptography and digital communications, the polynomial
basis is still the most widely employed criterion [7, 8, 14]. In the following, we confine our attention to computations that use the polynomial basis.
2.2 Elliptic Curve Cryptosystem
In ECC, computing kP is the most important arithmetic operation, where k is an integer and P is a point on the elliptic curve. This operation can be computed by the addition of two points k times. ECC can be done with at least two types of arithmetic, each
of which gives different definitions of multiplication [15]. Two types of arithmetic
are, namely, Zp arithmetic (modular arithmetic with a large prime p as the modulus)
and GF(2n) arithmetic, which can be done with shifts and exclusive-ors.
We focused on GF(2n) arithmetic operation. Let GF(2n) be a finite field by definition. Then, the set of all solutions for equation E: y2 + xy = x3 + a2x2 + a6, where a2, a6
∈GF(2n), a6 ≠ 0, together with the special point called the point at infinity O, is a nonsupersingular curve over GF(2n). Let P1 = (x1, y1) and P2 = (x2, y2) be points in
E(GF(2n)) given in affine coordinates [16]. Assume that P1 , P2 ≠ O, and P1 ≠ -P2. The
sum P3 = (x3, y3) = P1 + P2 is computed as follows; if P1 ≠ P2 then λ = (y1 + y2)/( x1 +
x2), x3 = λ2 + λ + x1 + x2 + a2, y3 = (x1 + x3)λ + x3 + y1, and if P1 = P2 (called point doubling), then λ = y1 / x1 + x1, x3 = λ2 + λ + a2, y3 = (x1 + x3)λ + x3 + y1 (see [16]).
In either case, the computation process requires one division, one squaring, and
one multiplication. Squaring can be substituted by multiplication. From the point
addition operation, it should be noted that no computation processes, except for addition, are performed at the same time due to the data dependency. Therefore, the sharing hardware between the division and multiplication processes is more desirable than
the separated implementation of the division and multiplication processes [4, 13].
The additive inverse and multiplicative inverses in GF(2n) can be calculated efficiently using the extended Euclidean algorithm. Division and subtraction are defined
in terms of additive and multiplicative inverses: A-B is A+(-B) in GF(2n) and A/B is
A·(B-1) in GF(2n). Here, the characteristic 2 finite fields GF(2n) used should have
n∈{113, 131, 163, 193, 233, 239, 283, 409, 571} [4]. Addition and multiplication in
GF(2n) should be performed by using one of the irreducible binary polynomials of
degree n. This restriction is designed to facilitate interoperability while enabling implementers to deploy efficient implementations that are capable of meeting common
security requirements [16].
The rule that is used to pick acceptable reduction polynomials is the followings: If
a degree n binary irreducible trinomial, f ( x) = x n + x k + 1 , for n > k ≥1 exists, then,
the irreducible trinomial with the smallest possible k should be used, otherwise the

332

J.-C. Jeon et al.

degree n binary irreducible pentanomial can be used, f ( x) = x n + x k 3 + x k 2 + x k1 + 1 ,
for n > k3 > k2 > k1 ≥1, with k3 being as small as possible, k2 being as small as possible for the given k3, and k1 as small as possible for the given k3 and k2, . These polynomials enable the efficient calculations of field operations.
2.3 Cellular Automata

A CA is a collection of simple cells arranged in a regular fashion. CAs can be characterized by four properties: Cellular geometry, neighborhood specifications, the number of states per cell, and the rules that are used to compute to a new state. The next
state of a CA depends on the current state and rules [17].
A one-dimensional cellular automaton consists of a linearly connected array of n
cells, each of which takes the value of 0 or 1, and a transition function f(s) on the state
configuration, s, with q variables. The value of the cell state si is updated in parallel,
by using this function in discrete time steps as sit+1=f(sti+j) where –r ≤ j ≤ r [10]. The
parameter q is usually an odd integer, i.e. q = 2r+1, where r is often named the radius
of the function f(s); the possible configurations and the total number of rules for the
two state CAs, with the radius r of the neighborhood are 2q and 2n where n = 2q. A
new value of the ith cell is calculated by using the value of the ith cell itself and the
values of the r neighboring cells to the right and left of the ith cell.
Furthermore, if the same rule applies to all the cells in a CA, the CA is called a uniform or regular CA, whereas if different rules apply to different cells, it is called a
hybrid CA. In addition, in the structure of CAs, the boundary conditions should be
taken into consideration since there exists no left neighbor of the leftmost cell and
right neighbor of the rightmost cell, among the cells that compose the CA. According
to the conditions, they are divided into three types: Null Boundary CA (NBCA), Periodic Boundary CA (PBCA), and Intermediate Boundary CA (IBCA). In this paper,
we only consider PBCA, which is mainly used in this area because of their efficient
cyclic properties.
We employ the characteristics of PBCA, which is that the left neighbor of the leftmost cell becomes the rightmost cell and they are adjacent to each other. If the next
state is determined by 2-bit shift to the left, it can be expressed as sit+1= sti-2 (0≤i≤n-1).
This means that the next state of the ith cell is changed by the second right neighbor
of the current ith cell. The proposed architecture carries out shift operations and
modular reductions using the introduced property.

3 CA Architecture for Division
This section presents an A/B architecture based on cellular automata. Finite field division in GF(2n) can be performed by using multiplication and inverse processes; that
is, A/B = AB-1, where A and B are the elements of GF(2n). Here, the multiplicative
inverse of the field element B can be obtained by recursive squaring and multiplication, since the field element B can be expressed as
B −1 = B 2

n

−2

= ( B ( B ( B L B ( B ( B ) 2 ) 2 L) 2 ) 2 ) 2

(1)

Cellular Automata Architecture for Elliptic Curve Cryptographic Hardware

333

Division also can be easily induced by equation (1).
C = AB −1 = A( B( B( B L B( B( B) 2 ) 2 L) 2 ) 2 ) 2
The above equation can be generalized as follows:

C0 = B

Ci = B (Ci −1 ) 2 = B 2

i +1

−1

, (1 ≤ i ≤ n − 2)

Cn −1 = A(Cn − 2 ) 2 = AB 2

n

−2

= AB −1

(2)
(3)

In equation (2), we compute the Ci value for the n-2 clock cycles. Then, we can
compute the division results by equation (3). Meanwhile, we assume that XY = D =
(Dn-1 …D1 D0), where X and Y are the field elements; equation (4) is held for a certain
k in a reduction trinomial, i.e. f ( x) = x n + x k + 1 .
Dn-2⋅xn-1 + Dn-3⋅xn-2 +…+ (Dn-1⊕Dk-1)xk + … +D1⋅x2 + D0⋅x1 + Dn-1

(4)

In equation (4), shift operations and modular reduction are performed by a given
transition rule and reduction trinomial. The operation shown in equation (4) should be
performed twice in order to accomplish Ci for n-2 times. Therefore, trinomials and
pentanomials based multiplications are computed as the next equations respectively.
Dn-3⋅xn-1 + Dn-4⋅xn-2 +…+ γxk+1 + δxk +… +D0⋅x2 + D n-1⋅x1 + Dn-2,

(5)

where γ = Dn-1⊕Dk-1 and δ = Dn-2⊕Dk-2
Dn-3⋅xn-1 + Dn-4⋅xn-2 +…+ ζxk3+1 + ηxk3 +…+ ζ′xk2+1 + η′xk2 +…+ ζ′′xk1+1 + η′′xk1
+… + D0⋅x2 + D n-1⋅x1 + Dn-2,

(6)

where ζ = Dn-1⊕Dk3-1, ζ′ = Dn-1⊕Dk2-1, ζ′′ = Dn-1⊕Dk1-1, η = Dn-2⊕Dk3-2, η′ = Dn-2⊕Dk2-2,
and η′′ = Dn-2⊕Dk1-2.
The architectural model based on the above equations (5) and (6) are shown in Fig. 1
and Fig. 2. In terms of the CA concept, both architectural models are based on 5neighborhood and sit+1= sti-2 (0≤i≤n-1), which is also expressed as rule 2863311530.

Fig. 1. Multiplication architecture based on irreducible trinomials

In order to satisfy equation (3), A should be multiplied by the square of Cn-2. The
result is C = A·B-1 and when A = 1, the algorithm realizes the inverse operation B-1.
Fig. 3 shows the division architecture. Each initial value is such that cellular automata
have all zeros (Cir = 0, 0 ≤ i ≤ n-1); the B register and shift register have Bi values (Bir
= Bn-1 … B2 B1 B0).

334

J.-C. Jeon et al.

Fig. 2. Multiplication architecture based on irreducible pentanomials

Fig. 3. Division architecture based on Fig. 1 and Fig. 2

For initial n clock cycles, the values in the shift register are sequentially broadcast
to the connected line in order to multiply the values in Bir, and Cir is evolved based on
PBCA. After the evolution of Cir, the values are transferred to the shift register, just as
the initialized form in the shift register. (Cn-2)2 is computed according to the process
described by n-2 times.
At the end of the transition, the system chooses Ai values in the B register for the
final resultant values. It is possible to perform A/B division in n(n-1) clock cycles by
using n AND gates, n+2/n+6 XOR gates, n Muxes, and 4n bits registers. In addition,
extra equipment, such as the control signals for transferring results in cellular automata to the shift register and the changing of the values in the B register, right after
deriving the values of B-1.
Moreover, our architecture can be easily applied to other public key cryptosystems
by using general irreducible polynomials. In Fig. 1 and 2, by using additional n-2/n-6
XOR gates, the proposed architecture can perform a general division operation. Although the architecture is used as a general divider, it has the same latency as in Fig. 3
because of the parallelization.

4 Comparison and Analysis
A comparison of the proposed CA architecture for EC-based cryptography, with existing structures, was performed focusing on time and hardware complexity issues. As
such, Wang’s [7] and Kim’s [8] division architectural methods were chosen.
Wang proposed a parallel-in parallel-out A/B architectural model, which has a latency of 2n2-1.5n and a critical path of (T2AND+ 3T2XOR) over GF(2n). Kim proposed a
serial-in serial-out A/B architectural model, which has a latency of 2n2-2n and critical
path of (2T2AND+ 3T2XOR+ TMUX) over GF(2n).

Cellular Automata Architecture for Elliptic Curve Cryptographic Hardware

335

Table 1. A comparison of the performance of the A/B Circuits
Item

Wang et al. [7]

Irreducible
polynomial

general

Critical path

T2AND+ 3T2XOR

Latency
Hardware
Complexity
-Registers(R)
-Latch(L)
-Inverter(I)

2n2-1.5n

I/O format

3n3 -3n2 AND
3n3 -3n2 XOR
8.5n3 -8.5n2 (L)
Parallel-in
parallel-out

Kim et al. [8]
general
2T2AND+ 3T2XOR
+ TMUX
2n2-2n
4n2-7n+3 AND
3n2-5n+2 XOR
14n2-22n+8 (L)
n2-2n+1Mux
3n2-6n+2 (I)
Serial-in
serial-out

Fig. 3
Trinomial/
pentanomial
T2AND+
T2XOR+TMUX
2n2-n

T2AND+
T2XOR+TMUX
2n2-n

n AND
n+2/n+6 XOR
4n (R)
n Mux

n AND
2n XOR
4n (R)
n Mux

general

Serial-in parallel-out

In general, parallel architectural models need much more hardware equipment than
serial fashion architectural models, and the issue of latency is reversed. The proposed
architectural model, however, has less complexity than the serial or parallel fashion
architectural methods, with respect to both space and time. Our architectural model
has been constructed based on ECC. However, our architecture can be easily applied
to other public cryptosystems with additional n-2/n-6 XOR gates, while the existing
systolic architectural models including those of Wang’s and Kim’s, hardly reduce the
level of complexity, although they apply the restrict polynomials.

5 Conclusion
This paper has presented CA architecture in order to compute A/B modulo irreducible
trinomials and pentanomials, which are restricted in the Certicom Standard for ECC.
We have proposed a simple CA hardware architectural model that is the most costly
arithmetic operation scheme in ECC over GF(2n). The proposed architectural model
includes the characteristics of both an evolutionary PBCA and the restricted polynomials, and it has minimized both time and hardware complexity concerns. Moreover,
we have shown that our architectural model can be easily applied to general division
architectural method with no additional latency needed. Our CA architecture has a
regularity and modularity. Accordingly, it can be used as a basic architecture not only
for ECC, but also for other public key cryptosystems.

References
1. I. Lopez and R. Dahab, An overview of Elliptic Curve Cryptography, University of
Campinas Press, Brazil (2000)
2. N. Koblitz, Elliptic curve cryptosystems, Mathematics of Computation, Vol. 48. (1987)
203-209
3. V. Miller, Use of Elliptic Curves in Cryptography, Advances in Cryptology-CRYPTO’85,
Springer-Verlog Lecture Notes in Computer Science, Vol. 218. (1986)

336

J.-C. Jeon et al.

4. A. J. Menezes, Elliptic Curve Public Key Cryptosystems, Boston, MA: Kluwer Academic
Publishers (1993)
5. T. R. N. Rao and E. Fujiwara, Error-Control Coding for Computer Systems, Englewood
Cliffs, NJ: Prentice-Hall (1989)
6. W. Drescher, K. Bachmann, and G. Fettweis, “VLSI Architecture for Non Sequential Inversion over GF(2m) using the Euclidean Algorithm,” The International Conference on
Signal Processing Applications and Technology, Vol. 2. (1997) 1815-1819
7. C. L. Wang and J. H. Guo, “New Systolic Arrays for C+AB2, inversion, and division in
GF(2m)”, IEEE Trans. on Computer, Vol. 49, No. 10. (2000) 1120-1125
8. N. Y. Kim and K. Y. Yoo, “Systolic architecture for inversion/division using AB2 circuits
in GF(2m)”, Integration, the VLSI journal, Vol. 35. (2003) 11-24
9. C. N. Zhang, M. Y. Deng, and R. Mason, “A VLSI Programmable Cellular Automata Array for Multiplication in GF(2n),” PDPTA ’99 International Conference (1999)
10. P. Pal. Choudhury and R. Barua, “Cellular Automata Based VLSI Architecture for Computing Multiplication and Inverses in GF(2m),” IEEE 7th International Conference on VLSI
Design (1994) 279-282
11. Jun-Cheol Jeon and Kee-Young Yoo, "An Evolutionary Approach to the Design of Cellular Automata Architecture for Multiplication in Elliptic Curve Cryptography over Finite
Fields," Lecture Notes in Artificial Intelligence PRICAI 2004: Trends in Artificial Intelligence (LNAI 3157), Springer-Verlag, Vol. 3157. (2004) 241-250
12. A. J. Menezs, Applications of Finite Fields, Boston, MA: Kluwer Academic Publishers
(1993)
13. IEEE P1363, Standard Specifications for Public Key Cryptography (2000)
14. S. W. Wei, “VLSI architecture of divider for finite field GF(2m)”, IEEE International
Symposium on Circuit and Systems, Vol. 2. (1998) 482-485
15. C. Kaufman, R. Perlman, and M. Speciner, Network Security private communication in a
public world, New Jersey: Prentice Hall (2002)
16. SEC 1: Elliptic Curve Cryptography version 1.0, Certicom Reserch (2000)
17. J. Von Neumann, The theory of self-reproducing automata, University of Illinois Press,
Urbana and London (1966)

