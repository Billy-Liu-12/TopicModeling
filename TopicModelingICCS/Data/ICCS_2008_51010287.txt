View-OS: A New Unifying Approach Against
the Global View Assumption
Ludovico Gardenghi1 , Michael Goldweber2 , and Renzo Davoli1
1

2

Dept. of Computer Science
University of Bologna
Bologna, Italy
{garden,renzo}@cs.unibo.it
Dept. of Mathematics and Computer Sciences
Xavier University
Cincinnati, OH
mikeyg@cs.xu.edu

Abstract. One traditional characteristic of operating systems is that
all the processes share the same view of the environment. This global
view assumption (GVA) means that for processes running on the same
computer, the same pathname points to the same ﬁle, the processes share
the same network stack and therefore the same IP addresses, the routing
characteristics are identical, etc. There have been many proposals for
“bending” the GVA for either individual processes or for the system
as a whole. Some of these proposals include microkernels or specialized
virtual machines. Most proposals are for system administrators, others
are tailored to speciﬁc applications.
A View-OS is our unifying solution for altering the GVA. It allows
a user to partially or completely redeﬁne the behavior of an arbitrary
subset of the system calls called from his processes, thus altering his view
of the environment in terms of ﬁle system, communication, devices, access
control etc. We have implemented it with a system-call, partial, modular
virtual machine called *MView. Each divergence from the standard view
may be implemented in a speciﬁc module.
Hence instead of always having to load a complete kernel (e.g. Usermode Linux), the overhead of a per-process deﬁnition of the environment
depends on the degree of divergence from the standard global view.

1

Introduction: A Change in Perspective

Modern operating systems make processes run inside “sandboxes” that isolate
them and provide protection with respect to other processes and resources. When
a process needs a system service (e.g. more memory, new processes, communication with existing ones, access to the ﬁle system or to the network, I/O with
devices) the boundary of these sandboxes is crossed via a system call. Hence
from the perspective of a process, the set of system calls made available by the
operating system is the only “window” through which a process can “see the
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 287–296, 2008.
c Springer-Verlag Berlin Heidelberg 2008

288

L. Gardenghi, M. Goldweber, and R. Davoli

world” beyond itself. All possible interaction between processes and resources is
mediated through this facility.
Actually, other kinds of communication are available. For instance, in a UNIXlike system, processes may use shared memory or send/receive signals. Shared
memory allocation, as well as signals, however are only made available through
system calls. Similarly, the structure and content of ﬁle systems as well as communication with devices, other processes, and other hosts can be deﬁned exclusively in terms of “what responses are given to the process by system calls.”
This set of answers represents the view of the world for the process. All processes
whose system calls are serviced by the same kernel, therefore, share the same
view—the global view assumption, or GVA. Consider the following: a process
running on system A has all its system calls answered from the kernel running
on system B. This process would work the same as if it was really running on
B: it would see B’s ﬁle system, its network address and routing, and so on. The
view is provided to the process by system B’s kernel.
We deﬁne a system where each process is allowed to create its own unique view
or perspective as a View-OS[1] [2]. In a View-OS each process makes use of the
services and resources oﬀered by the kernel to deﬁne their own process-speciﬁc
view. For instance, an individual view may contain:
– A modiﬁed view of the ﬁle system from that shown by the kernel. This
might include added, removed or changed subsets, diﬀerent permissions, or
be physically deployed on remote hosts.
– New network interfaces with ad-hoc addresses, hidden addresses, or diﬀerent
routing and ﬁltering rules.
– More generally, a diﬀerent set of visible and accessible devices, each with
its own set of permissions and semantics. Notably, both the permissions and
semantics may be diﬀerent from those provided by the kernel.
This is accomplished in a View-OS by providing each user-mode process with
the capability for redeﬁning system call behavior or even to deﬁne new ones.
1.1

Security Issues

A View-OS, like any traditional global view operating system, must insure that
there is no danger to system security. Process views cannot be constructed without regard to security issues. A process can build a view only by relying on the set
of resources the kernel would “normally” make available to it. No global changes
to the system can be made while inside a personal view if those changes are not
allowed under normal conditions. Key to the View-OS concept is that a process
could however see local changes as if they were global ones. Some examples.
Disk image mounting. Assume a user owns a disk image ﬁle. This user is able
to read its contents. Mounting it as a ﬁle system is nothing but interpreting
the contents according to some ﬁle system structure. In a View-OS, the user
could mount the image inside a personal view of the ﬁle system namespace.

View-OS: A New Unifying Approach Against the Global View Assumption

289

Remote ﬁle systems. Similarly, a user may want to connect a remote subtree
from another host to the local ﬁle system namespace, using some network
transport. As long as the user has enough privileges on the network and on
the remote subtree, there is no reason for not allowing the user to extend
her personal perspective of the local host with a new portion of ﬁle system.
The remainder of this paper is as follows. In section 2 we provide an overview
of tools, models and architectures that have inﬂuenced View-OS, pointing out
similarities and diﬀerences between them and our project. In section 3 we expand
on the basic ideas of a View-OS, focusing on the fundamental concepts of the
proposal. Section 4 closes the paper with some observations of using our *MView
View-OS in the ﬁeld, our conclusions and future directions for this project.

2

Other Models and View-OS

In this section we present a comparison between View-OS and a selection of tools,
models and techniques for virtualization. In particular our goal is to illustrate
how speciﬁc aspects of each such tool/technique can be captured by a View-OS.
Virtual machines [3] [4] (VMs) are the oldest[5] and most used tools able to
change the perspective of processes. Processes running inside a virtual machine
have the same view they would have if running on a diﬀerent system. VMs may
virtualize physical architectures[6] [7] [8] [9] [10] [11] [12] [13] [14] or abstract
ones[15], at various levels (typically a whole hardware architecture is emulated,
thus allowing the user to install and run an operating system and all its applications). The important point here is that the perspective is completely changed
with respect to the real, underlying one; moreover, it is shared by all the processes inside the VM. A View-OS allows a greater degree of ﬂexibility: if needed,
the perspective change may aﬀect only a subset of the processes and then only
a subset of their views. Moreover, a View-OS oﬀers a lighter approach when it
is not necessary to boot an entire operating system.
In a paravirtualization, the VM monitor is a light layer called the hypervisor. As with virtual machines, each virtualized system (or domain) needs to boot
a kernel; the hypervisor just provides scheduling between domains. The shared
devices are managed by a speciﬁc, privileged “Domain 0.” Paravirtualization is
the key idea of Xen[16]. Xen provides good support for device drivers, inherited
from those running in Domain 0. Since Xen implements entire virtual machines,
the VM management must be done by root. As with “classical” virtual machines,
a View-OS can be used to overcome the issues addressed by paravirtualization
while sharing the concept that device drivers and existing applications can be
inherited from existing systems or lower (possibly virtual) layers.
In microkernel systems, requests made to the kernel are sent as messages
to speciﬁc servers. Each server is responsible for a speciﬁc task (e.g. ﬁle system
management, network, memory). In a typical microkernel each server manages
requests for every process, thus giving the usual global view. However, it is
possible to have diﬀerent servers for diﬀerent groups of processes, thus creating

290

L. Gardenghi, M. Goldweber, and R. Davoli

more than one perspective. This is the where microkernels and a View-OS are
similar. There are, however, to two very important diﬀerences.
– As stated by the name, a microkernel is a kernel architecture. Its aim is the
same as a monolithic kernel: providing services to processes. Using a pool
of servers instead of a single, bigger process is only matter of cleaner design
and failure isolation. Usually, processes are not able to start new, personal
servers. Server management is a privileged action that can be only performed
by the kernel.
– Microkernels come as completely new and diﬀerent operating systems. They
have their set of system calls, their device drivers, their ABI, etc. This is
a serious obstacle toward the eﬀective usability of microkernel prototypes:
the usually limited hardware compatibility and the need to port existing
applications to the new system (or to write new ones from scratch) greatly
reduces the user base. Alternatively, View-OS concepts, as demonstrated by
our working prototypes, may be implemented gradually on existing systems,
thus keeping binary compatibility with existing applications and relying on
existing operating systems for device drivers.
The Exokernel [17] architecture is an attempt to loosen the tight link between interface and implementation of the various abstractions given by the
operating system. Its approach is to move the physical resource management
into user space (or application level) and provide a low level interface from a
minimal kernel to “untrusted” libraries. A View-OS also may allow this. Provided that a user process has enough authorizations to access a device in raw
mode, it may exploit View-OS by inserting a personal, custom driver between
itself and the device. The View-OS approach adds these capabilities on top of
an existing kernel, allowing the simultaneous usage of some kernel and some
user device drivers, together with a gradual migration from the ﬁrst ones to the
second ones depending on the availability of new user-level drivers.
Plan 9 [18] was a very important research project by Bell Labs. In Plan 9
each process has its own name space. A process can change, add, or remove entities from its name space without aﬀecting other processes. Everything in Plan
9 is accessible through names: networking, ﬁle system, GUI windows, etc. Thus
a change in the name space implies a change in the process view. Unfortunately,
Plan 9 has its own kernel, thus the number of supported architectures and available device drivers is quite limited. Moreover, since Plan 9 has a very diﬀerent
system model from other modern operating systems, the porting of applications
from other operating systems to Plan 9 is often diﬃcult. A View-OS provides
processes with some of the features of Plan 9 while retaining compatibility with
standard (Linux) kernels and applications.
System Call Interposition. This technique is used to monitor every system
call generated by a process. Its main goal is to create a sort of “jail,” “sandbox,”
or “guarded environment” for process execution, and to keep track of potential
malicious activities by processes. System Call Interposition is often used only to
deny dangerous operations (e.g. access to sensitive data). Blocking or denying

View-OS: A New Unifying Approach Against the Global View Assumption

291

system calls becomes a trivial sub-case of system call redeﬁnition and, thus, easy
to implement with a View-OS.
FUSE [19] is a mechanism, available in recent Linux releases, that allows the
kernel to rely on user-mode programs for ﬁle system support. It suﬀers from the
GVA, as ﬁle systems are mounted with the usual mount semantics and aﬀect the
whole system. For this reason, this special purpose virtualization is commonly
restricted from users or allowed with speciﬁc limitations. A View-OS provides
the same features of FUSE, with the additional ability of limiting the visibility
only to a subset of processes, and allowing regular users to mount real, virtual,
local or remote ﬁle systems with no interference between each other. Moreover,
our implementation has source-level compatibility with existing FUSE modules.
“Minor” partial virtualities. There are a number of classic and well-known
tools from UNIX-like systems that are good examples of speciﬁc applications
which modify the GVA using diﬀerent techniques: chroot, a system call operating
on the ﬁlesystem namespace; fakeroot, a user-space access control hack based
on dynamic libraries preloading; /dev/tty and /proc/self, ﬁles with a diﬀerent
meaning for each process.
This enumeration while far from complete is hopefully representative. There
are also many partial, ad-hoc tools which are also neither interoperable nor
integratable. Regardless, our goal is to show that a View-OS is a very strong
step toward providing a uniﬁed framework discussing and implementing various
methodologies and strategies for modifying the GVA.

3

View-OS: Relaxing the Global View Assumption

UMView (and KMView) are proof of concept prototypes of a View-OS. In
this section we describe a View-OS—its goals and capabilities—in more general terms. We will, nevertheless, refer to *MView when we wish to provide a
practical example of a given concept. All the software has been released under
the GPL free license and is available in the standard Debian distribution. The
Virtual Square wiki[20] provides access to the software, technical documents and
examples.
A View-OS allows users to change the perspective of their processes. The
basic idea is to redirect each system call to a monitor, or hypervisor. The running
process does not have immediate access to the “real” services given by the kernel
through system calls; each system call request is “intercepted” and checked by
the hypervisor. The hypervisor then decides on one of two behaviors depending
on the speciﬁc system call and on its parameters.
If the hypervisor decides that the system call refers to a unmodiﬁed part of
the perspective/view, it just asks—or makes the process ask—the underlying
level to execute the call. A View-OS, deﬁned in this manner, is a natural ﬁt for
nesting, as its interface is the same toward both its upper and lower levels. For
this reason, letting the process run the system call “as it is” may mean asking the
real kernel to execute the request, or asking a lower View-OS instance to check
for a possible change in perspective. From the point of view of the hypervisor,
there is no diﬀerence between these two cases.

292

L. Gardenghi, M. Goldweber, and R. Davoli

On the other hand, the hypervisor may elect to “trigger” and implement a
change in some portion of the view of a process. This may mean executing an
existing system call with altered semantics or the execution of a new system call
not supported by the underlying level. For example the View-OS may implement
a new system call to open a disk image ﬁle, read its content, parse it according
to a speciﬁc ﬁle system format, and let the calling process believe it is accessing
a real disk with real ﬁles and directories.
A View-OS allows a user to “boot” a minimalist “kernel” and conﬁgure it to
manage diﬀerent ﬁle systems, network stacks and services other than the real
ones. (i.e. The ones made available by the kernel used to boot the machine.)
The same may also apply to device drivers: the underlying kernel exports a raw
view on a device and the hypervisor takes care of using the correct driver for it.
This is very similar to the microkernel and exokernel approaches, as described
in section 2.
What the View-OS concept changes is that the microkernel and exokernel
approaches, in addition to the other approaches previously described are no
longer mutually exclusive. Depending on the speciﬁc issue, one can choose a more
monolithic approach or a more modular one. Both the system administrator and
the user may cooperate and have more ﬂexibility in choosing for each service the
best option, basing their decision on performances, security needs, and software
availability.
For instance, if the current monolithic kernel does not yet provide a driver
for a given device—it may be under development—the system administrator
may choose to use a user-level driver via a View-OS hypervisor. As soon as a
more oﬃcial driver becomes available for the operating system kernel it may
be plugged in and used. Similarly, an inability to update the current kernel or
the need for better performance may lead the administrator to delegate some
services to the hypervisor or to the kernel.
Our prototypes, *MView are designed to work on a GNU/Linux system and
are potentially able to work with every peripheral that is supported by the Linux
kernel; allowing the user to run non-modiﬁed version of GNU/Linux software.
We denote this ﬂexible approach as a millikernel. That is, this solution locates
between the two extreme solutions: microkernels (everything but a minimalist
message-passing engine must be outside the kernel) and monolithic kernels (everything that is not a user-created process lives inside the kernel).
In the remaining part of this chapter we will describe some of the most promising View-OS areas of application.
3.1

Security

A View-OS allows one to implement the required granularity for one of the
most theoretically important security principles: the principle of the minimum
privilege.
At present, UNIX-like systems provide two main authorization mechanisms.
The ﬁrst (and older) one is the usual owner/group permissions system. Recently,
the privileges traditionally associated with the superuser have been split into

View-OS: A New Unifying Approach Against the Global View Assumption

293

distinct units known as capabilities, which can be independently enabled and
disabled. Capabilities may include the ability to bypass some permission checks
on the ﬁle system, to kill other user’s processes, to invoke privileged network
operations, to change attributes and priority for a process, and so forth. While
this mechanism tries to capture the need for greater granularity, it is not useful
for regular users as capabilities only refer to global administrative activities. Nonadministrative users are not able to deﬁne their own capabilities nor associate
them with their processes.
With networking, the security situation is even worse. A given system has a
ﬁxed network stack and a ﬁxed set of network interfaces. There are no useful
ﬂexible control mechanisms that can be used to allow or deny network-related
operations to single users or processes. If a network interface is up, everyone can
see it and everyone can open ports and listen for packets on it.1
These UNIX authorization mechanisms do not comply with the minimum
privilege principle, both for users and administrators. A View-OS allows an
administrator to give a process exactly the minimum set of (ﬁle, network, . . . )
resources that are necessary to complete its task.
An administrator may want to reﬁne capabilities for a certain process. For
instance, she may decide that a given process may ignore ﬁle system permissions
but only on a subtree.
Users may be given personal TCP/IP addresses, so it becomes easier to apply
shaping or ﬁltering rules. While this is currently possible, it requires keeping
track of every TCP connection and every single UDP packet.
Quite often, users would like to separate and isolate diﬀerent groups of activities (e.g. work, leisure, experiments). A game should not be able to access
e-mail ﬁles/directories. If a user wants to try a new, unstable application she
also wants to protect her data from accidental deletions. A View-OS addresses
all these problems by allowing users and superusers to describe a minimal set of
resources around every process.
Finally, with a View-OS, many, if not all of the operations that require “set
user ID” executables (e.g. the mount command) may be converted to regular
(non-suid) operations. Hence one can remove many potential security holes: executables ran by regular users but with superuser privileges.
3.2

Flexibility

Dealing with malicious or broken software is not the only ﬁeld where a ViewOS proves useful. The open-ended ﬂexibility of a View-OS allows users to build
their world around themselves. Our uniﬁcation approach also helps in making
diﬀerent virtualizations cooperate and integrate. Transformations away from the
global view can be relative to the ﬁle system, network, devices, and a group of
other less frequently used components of a process view.
1

There are some packet ﬁltering infrastructures such as IPTables which allow the
system administrator to enforce various policies but, typically, the granularity on
users and processes is too coarse.

294

L. Gardenghi, M. Goldweber, and R. Davoli

While we have described the individual virtualizations made possible by an
implementation of a View-OS, it is instructive to consider more complex ViewOS applications. The aim is to give an idea of how one is able to combine
diﬀerent, simple, but interoperable virtualizations to create useful structures.
It is worth pointing out that View-OS was designed as part of a bigger virtualization framework, named Virtual Square[21] [22]. Also part of this framework
is VDE[23], a virtual networking tool able to connect virtual and real machines
together. A VDE is often used to combine diﬀerent View-OS instances and link
them to real networks.
A remote encrypted ﬁle system. Let’s assume that a (very paranoid) user
keeps a Second Extended disk image on her home computer and that a portion
of this ﬁle system is encrypted using EncFS. This user may want to access this
disk image while on another computer. The traditional approach would require
her to copy the whole disk image onto the local host and then mount it with
superuser privileges via the loopback device. With a View-OS she may combine
three diﬀerent modules: a ssh module to reach the remote ﬁle system on her
home machine; an ext2 module to mount the disk image and, ﬁnally, an encfs
module to decrypt its content. None of these operations require root access, and
none of the other local users can see see the contents of the disk image.
Partitioning images and devices at user level. The basic idea is to let
a user manage her disk images (or their removable storage devices) entirely in
user space. In the case of removable media, we assume that the kernel grants
exclusive read/write privileges on the device to that user. A speciﬁc *MView
module allows to see a ﬁle or device as a disk, to partition it (using the usual
Linux tools) and to mount the new partitions entirely at user level. The kernel
does not have to support every single (strange) kind of ﬁle system that any user
may want to use, but simply delegates the parsing of the raw device content to
another layer i.e. a View-OS.
Per-process IP stack or address. Not only IP addresses, but even network stacks may be assigned on a per-process basis. This is useful to test new,
experimental implementations or to use diﬀerent optimizations and tuning for
diﬀerent kinds of applications. The combination of VDE with a network stack
module for the View-OS level makes this possible. The increased level of isolation and granularity makes mobility and server reorganization much easier as a
single daemon may have its own speciﬁc IP address and can keep it even if it
has to be moved onto a diﬀerent physical host.
3.3

Fast Prototyping

A key advantage to the View-OS approach to virtualization is the possibility
to create very light environments with single, focused/speciﬁc alterations to the
global view. This makes a View-OS very useful every time a designer has to build
and test prototypes for applications or protocols and doesn’t want (or can’t) alter
the conﬁguration of the running system.Usually, whole system virtual machines

View-OS: A New Unifying Approach Against the Global View Assumption

295

have to be created, conﬁgured and if needed interconnected. This “heavy” approach can often be lightened using a View-OS. Examples illustrating how a
View-OS allows for fast and lightweight prototyping include copy-on-write for
conﬁgurations ﬁles, providing a light framework for testing network protocols,
verifying the eﬀectiveness of new system calls, and the testing of new ﬁle system
implementations.

4

Conclusions

The founding idea behind a View-OS is the change in perspective that we made
while examining a system. Instead of focusing on the operating system and its
kernel which sees processes as an uniform set of objects, we consider a process
as the main actor that makes use of operating system services as a way to build
up its own perspective. The term we use to denote the classical way of looking
at a system is GVA (global view assumption). The goal of a View-OS is to relax
this very limiting approach.
Furthermore, we endeavored to provide a uniﬁed approach encompassing different techniques, concepts, paradigms both in operating systems architectures
and virtual machine design toward to our goal of relaxing the GVA. Instead of
using tool A to relax one portion of a view, and tool B (which might not even
interoperate with A) to relax a diﬀerent portion of one’s view, one need only use
a View-OS—a uniﬁed paradigm for relaxing any portion (or portions) of a view,
all accomplished in user-mode.
UMView (and KMView) are working prototypes of a View-OS. UMView is implemented as a System Call Virtual Machine and allows regular Linux programs
to run on regular Linux kernels with the added beneﬁt of allowing processes to
create their own personal perspective/view by themselves—no superuser intervention is needed. We believe that having a working, usable implementation is
as important as creating a good model.
It is a future goal to not only speed up the performance of *MView, but
to meaningfully measure the overhead these View-OS implementations impose.
It is a non-trivial task to simply determine what to measure for this. We can
report that an “empty” KMView environment, i.e. one with no perspective altering modules loaded, yielded an ad hoc measured 20% loss of performance with
respect to an unaltered system. This overhead, though not so low, is quite encouraging considering KMView is a proof-of-concept prototype and not intended
as a production environment, yet.
Another future goal is to explore the educational potential of a View-OS. If
one believes that the best way to learn about something is to build one, then
implementing View-OS modules becomes an excellent educational pursuit. Since
all is executed in user-mode, students can literally safely explore system behavior
by redeﬁning it in every conceivable way: coherent or not, safe or unsafe, without
compromising the integrity of the rest of the system.

296

L. Gardenghi, M. Goldweber, and R. Davoli

References
1. Davoli, R.: The View-OS project., http://www.sf.net/projects/view-os
2. Davoli, R., Goldweber, M., Gardenghi, L.: UMView: View-OS implemented as a
system call virtual machine. In: 7th Usenix Symposium on Operating Systems
Design and Implementation. Poster Session, Seattle, WA (November 2006)
3. Smith, J., Nair, R.: Virtual Machines: Versatile Platforms for Systems and Processes. Morgan Kaufmann, San Francisco (2005)
4. Smith, J.E., Nair, R.: The architecture of virtual machines. IEEE Computer 38(5),
32–38 (2005)
5. Adair, R., Bayles, R., Comeau, L., Creasy, R.: A virtual machine system for the
360/40. Technical report, IBM Cambridge Scientiﬁc Center Report 320-2007, Cambridge, Mass. (May 1966)
6. Bellard, F.: Qemu, a fast and portable dynamic translator. In: USENIX 2005 Annual Technical Conf., FREENIX Track hardware emulator (2005)
7. Bartholomew, D.: Qemu: a multihost, multitarget emulator. Linux J (145) (2006)
8. Qumranet Inc.: KVM: Kernel-based virtualization driver (2006),
http://kvm.qumranet.com
9. Gavare, A.: GXemul project, http://gavare.se/gxemul/
10. Microsoft (formerly from Connectix): Virtual PC,
http://www.microsoft.com/windowsxp/virtualpc/
11. VMware, Inc.: VMware, http://www.vmware.com/
12. Lawton, K.: Bochs project home page, http://bochs.sourceforge.net
13. Biallas, S.: PearPC project, http://pearpc.sourceforge.net
14. Morsiani, M., Davoli, R.: Learning operating system structure and implementation through the MPS computer system simulator. In: Proc. of the 30th SIGCSE
Technical Symp. on Computer Science Education, New Orleans, pp. 63–67 (1999)
15. Goldweber, M., Davoli, R.: The Kaya project and the μMPS hardware emulator.
In: Proc. of ITiCSE 2005. Conf. on Innovation and Technology in Computer Science
Education, Lisbon (2005)
16. Dragovic, B., Fraser, K., Hand, S., Harris, T., Ho, A., Pratt, I., Warﬁeld, A.,
Barham, P., Neugebauer, R.: Xen and the art of virtualization. In: Proc. of the
ACM Symp. on Operating Systems Principles (October 2003)
17. Engler, D.R., Kaashoek, M.F., O’Toole, J.: Exokernel: an operating system architecture for application-level resource management. In: SOSP 1995: Proc. of the
15th ACM symposium on Operating Systems principles, pp. 251–266. ACM Press,
New York (1995)
18. Pike, R., Presotto, D., Dorward, S., Flandrena, B., Thompson, K., Trickey, H., Winterbottom, P.: Plan 9 from Bell Labs. Computing Systems 8(3), 221–254 (Summer
1995)
19. Szeredi, M.: FUSE: ﬁlesystem in user space, http://fuse.sourceforge.net
20. Davoli, R.: Virtual square wiki page, http://wiki.virtualsquare.org/
21. Davoli, R.: Virtual square. In: Proc. of OSS2005. Open Source Software 2005,
Genova (2005)
22. Davoli, R., Goldweber, M.: Virtual square in computer science education. In: Proc.
of ITiCSE05. Conf. on Innovation and Technology in Computer Science Education,
Lisbon (2005)
23. Davoli, R.: VDE: virtual distributed ethernet. In: Proc. of Tridentcom 2005, Trento
(2005)

