Application of R-Functions Method and Parallel
Computations to the Solution of 2D Elliptic Boundary
Value Problems
Marcin Detka and Czesław Cichoń
Chair of Applied Computer Science, Kielce University of Technology,
Al. Tysiąclecia Państwa Polskiego 7,
25-314 Kielce, Poland
{Marcin.Detka,Czeslaw.Cichon}@tu.kielce.pl

Abstract. In the paper, the R-function theory developed by Rvachew is applied
to solve 2D elliptic boundary value problems. Unlike the well-established FEM
or BEM method, this method requires dividing the solution into two parts.
In the first part, the boundary conditions are satisfied exactly and in the second
part, the differential equation is satisfied in an approximate way. In such a way,
it is possible to formulate in one algorithm the so-called general structural
solution of a boundary-value problem and use it for an arbitrary domain and
arbitrary boundary conditions. The usefulness of the proposed computational
method is verified using the example of the solution of the Laplace equation
with mixed boundary conditions.
Keywords: structural solution, R-functions, parallel computations.

1 Introduction
Mathematical models of engineering problems are often defined as boundary-value
problems involving partial-differential equations. For the description of such
problems it is required to have analytical information connected with the equation
itself (or a set of equations) and geometrical information necessary to define
boundary conditions. This information concerns the solution domain, shapes of
particular parts of the boundary, distribution and forms of the imposed constraints and
the like. It is accounted for in a different way in various solution methods. In the
paper, such problems are solved in a uniform way using the R-function theory,
developed by Rvachew et al. [3]. In this theory, the so-called structural solutions are
constructed with the use of elaborated tools of the analytical geometry. As a result,
the structural solution exactly satisfying the boundary conditions contains some
unknown parameters that have to be computed.
The paper is limited to elliptic problems in two dimensions. Such problems are still
dealt with because of their well-known relation to many physical models.
Furthermore, theoretical and numerical results obtained in this area are very useful in
practice.
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 1022–1031, 2008.
© Springer-Verlag Berlin Heidelberg 2008

Application of R-Functions Method and Parallel Computations

1023

The discrete solution is determined using orthogonal, structured grid nodes over
the Cartesian space C which contains the solution domain Ω . The unknown function
of the problem is approximated by means of assuming a set of simple spline functions
of the first order. The property of the support locality and density of these functions
make it possible to compute, in an effective way, parameters of the structural solution,
by redistributing the solution procedure into processors. In the algorithm of the
parallel solution, the meshless method, proposed by Yagawa et al. [6], is applied. In
this method, the resulting system of linear equations is constructed in a “row-by-row”
fashion.
The usefulness of the proposed method of computations is verified with the
example of the solution of the Laplace equation with mixed boundary conditions.

2 Problem Statement and the Method of Solution
Consider the linear operator equation of the form:

Au = f

in Ω ⊂ ℜ 2 ,

(1)

where f ∈ L2 (Ω) .
It is well known, that when A is a linear positive-defined operator on a linear set
DA in a separable Hilbert space H, and f ∈ H , the generalized solution u of Eq. (1)
is an element of the so-called energy space HA that minimizes the functional [2]:

J (u ) =

1
B(u , u ) − ( f , u ) H ,
2

(2)

where B(u , u ) = ( Au, u ) H and ( f , u ) H are bilinear and linear functionals,
respectively.
Because of the equivalence of Eqs. (1) and (2), in numerical computations it is
preferred to solve Eq. (2) using the Ritz method. It is assumed that for the most
general boundary conditions the solution can by represented in the structural
form:

u = φ0 + ωϕ (φ1 ) ,

(3)

where ω is a known function that takes on zero values on the boundary ∂Ω and is
positive in the interior of Ω . Functions φ0 and φ1 are chosen in such a way so as to
satisfy all boundary conditions. The specification of the function

ϕ

depends on the

problem under consideration (see Section 4). It should be noted that functions φ0 and

φ1 can by specified in a piece-wise fashion with different values prescribed to them at
each part of the boundary ∂Ω . The advantage of the solutions in the form of Eq. (3)

1024

M. Detka and C. Cichoń

is that the function ω describes completely all the geometrical information
of a particular boundary value problem. The equation ω = 0 defines the geometry
of a domain implicitly. The functions ω are constructed using the theory
of R-functions developed by Rvachev [3].
Finally, functions φ0 and φ1 can by expressed by only one function φ [5] that in
the Ritz approximation is sought in the form:
n

φ N = ∑ c jψ j ,

(4)

j =1

where N is a positive integer, c j are unknown parameters and {ψ j } are some basis
functions. The sole purpose of the function φ N is to satisfy the analytical constraints
of the boundary value problem. It means that the structure of Eq. (3) does not place
any constraints on the choice of the functions ψ j [4]
After integrating over the domain Ω , the functional J (u ) becomes an ordinary
function of the parameters

c1 , c2 ,K, c N . Therefore, the condition δJ = 0 is

equivalent to the solution of the linear algebraic equation, characterized by the matrix
equation:

Kc = F .

(5)

3 Parallel Procedure of Computations
Basis functions {ψ j } can be defined globally in the domain Ω , or locally with the
dense local supports. As regards the parallel solution of the problem, the local
approach is preferable, therefore it is chosen in the paper.
Let us define the Cartesian space C ⊂ ℜ 2 and assume that the solution domain is
subspace Ω ⊂ C , Fig. 1. Then, the space C is discretized using the regular mesh
points of the structured grid. It is necessary to choose integers n and m, and define
step size h and k by h = ( xb − xa ) n and k = ( yb − y a ) m , where points a( xa , ya )
and b( xb , yb ) are given a priori. For each point of the grid, the simple spline of the
first order based on the sixth triangles, containing the grid vertex j is defined, Fig. 2.
The basis function ψ j is composed of the six linear functions:

ψ j = {ψ 1j ,ψ 2j ,...,ψ 6j } ,

(6)

where functions ψ kj , k = 1,2,...,6 , have the following form in the local coordinate

(

)

system s1 = ( x − x j ) / h, s 2 = ( y − y j ) / k :

Application of R-Functions Method and Parallel Computations

⎧ψ 1j = 1 − s1 − s2
⎪ 2
⎪ψ j = 1 − s2
⎪ψ 3j = 1 + s1
⎪
ψ j = ⎨ψ 4j = 1 + s1 + s2
⎪ψ 5 = 1 + s
2
⎪ j
⎪ψ 6j = 1 − s1
⎪
⎩0

1025

if ( s1 , s2 ) ∈ T1
if ( s1 , s2 ) ∈ T2
if ( s1 , s2 ) ∈ T3
if ( s1 , s2 ) ∈ T4
if ( s1 , s2 ) ∈ T5
if ( s1 , s2 ) ∈ T6
otherwise
.

Fig. 1. Cartesian space C and the solution domain

Fig. 2. Linear dashed basis function ψ

j

(7)

Ω

1026

M. Detka and C. Cichoń

The algorithm of parallel computations is shown in Fig. 3. The main steps of the
computations are as follows:
1. Decomposition of the space C into Cp subdomains, p=1,2,…,P, where P is the
number of processors.
2. Parallel identification of nodes in each subdomain Cp according to the rule shown
in. Fig. 4.
3. Parallel modification of subdomain Cp in order to balance the number of nodes in
each processor.
4. Parallel supplement of the nodes set in the domain Cp with neighbouring nodes
which are active in the solution of the problem.
5. For each node j, parallel computations of the elements Kjk and Fj, k=1,2,…,7 (max)
of the matrix equation (5).
6. Parallel solution of the matrix equation (5) by the conjugate gradient method using
the Portable Extensible Toolkit for Scientific Computation (PETSc) library.

Fig. 3. The algorithm of parallel computations

Numerical integration is needed to calculate the matrix K and the vector F .
Integration over triangles is performed with the use of 4-point Gaussian quadrature.
For the case when the boundary ∂Ω crosses the triangle an additional procedure has
been applied in order to divide the integration region into subregions. The rule states

Application of R-Functions Method and Parallel Computations

1027

Fig. 4. Decomposition of the solution domain (P=3), identification of nodes

that “the active subregion” is such a part of the triangle that belongs to the Ω domain
and contains any of integration points. Next, integrals over the new triangle or
quadrilateral subregions are also computed numerically. The above rule has also been
applied to the identification of nodes in the subdomains.

4 Example
The proposed solution method has been verified with a simple example
taken from [1].
Consider the Laplace equation on the domain Ω , shown in Fig. 5

− ∇ 2u ( x, y ) = 0 in Ω ,

(8)

with the boundary conditions on ∂Ω

∂u
∂y

=0
∂Ω1

∂u
= −2 u ( x, y ) ∂Ω = 80
4
∂x ∂Ω3
.

(9)

u ( x, y ) ∂Ω = −4 x 4 + 33x 2 − 2 x + 17.
2

The exact solution is equal to:

u ( x, y ) = 81 − 2 x + x 2 − y 2 .
The geometric domain
primitives

(10)

Ω can be defined as a Boolean set combination of four

Ω = Ω1 ∩ Ω 2 ∩ Ω 3 ∩ Ω 4 ,

(11)

1028

M. Detka and C. Cichoń

Fig. 5. Solution domain Ω of the Laplace equation (8)

defined as

Ω i = {( x, y ) ∈ ℜ 2 : ωi ( x, y ) ≥ 0}.

(12)

Functions ωi , normalized to the first order, have the form:

ω1 = y , ω 2 =

8 − 2x2 − y
16 x 2 + 1

,
(13)

2
ω3 = x , ω 4 =
( y − 1 + x),
2
and the equation of the solution domain

Ω can be expressed in the following way:

ω = ω1 ∧ 0 ω 2 ∧ 0 ω3 ∧ 0 ω 4 ,
where

(14)

∧ 0 is the R0 – conjunction.

After some manipulations, the structural form of the solution (3) takes the final
form

u = g 01 − ωD1 ( g 01 ) + ωg11 − ωD1 (φg 02 ) + φg 02 ,
where D1 (•) = ∂ω ∂ (•) + ∂ω ∂ (•) and

∂x ∂x

∂y ∂y

(15)

Application of R-Functions Method and Parallel Computations

g 01 =

(−4 x 4 + 33 x 2 − 2 x + 17)ω134 + 80ω123
,
ω 234 + ω134 + ω124 + ω123

g11 =

− 2ω1
,
ω1 + ω3

ω234 + ω124
,
g 02 =
ω 234 + ω134 + ω124 + ω123

1029

(16)

where ωijk = ωi ω j ω k .The functional (2) takes the form

⎡⎛ ∂u ⎞ 2 ⎛ ∂u ⎞ 2 ⎤
J (u ) = ∫ ⎢⎜ ⎟ + ⎜⎜ ⎟⎟ ⎥dΩ + 4 ∫ u d∂Ω 3 .
∂x
∂y
Ω⎢
∂Ω 3
⎣⎝ ⎠ ⎝ ⎠ ⎥⎦

(17)

The formulae for the calculation of the matrix K coefficients and the column vector
F , Eq. (5), are given explicitly in [1].
Computations have been made for h=k=0.5, 0.2 and 0.1, which has led to the sets
of the basis functions {ψ j }, j = 1,2,3,..., N , where N= 63, 307 and 1124. The quality of
the solution has been verified calculating the absolute, relative and least square errors:

ε 1 = max | u exac − u approx | ,

(18)

u exac − u approx
|,
u exac

(19)

∑ (u exac − u approx ) 2 .

(20)

i

ε 2 = max |
i

ε3 =

1
N

i

The results of computations are given in Table 1. It should be noted that the
improvement in the calculation accuracy at higher mesh density is smaller than
expected. Probably, the reason is that the basic functions ψ j are too simple. The last
column in Table 1 presents the data given in [1], where the global approximations are
assumed in the form of the third degree complete polynomial. It should be stressed
that although the final solution is worse, it is obtained with notably less numerical
effort.
Table 1. Approximation errors

ε1
ε2
ε3

h=k=0.5
6.00

h=k=0.2
2.34

h=k=0.1
1.98

[1]
10.32

0.15

0.05

0,04

0.41

2.62

0.93

0.85

19.18

1030

M. Detka and C. Cichoń

The graphs of the u function for different vertical and horizontal cross-sections of
the Ω domain are shown in Fig. 6.

Fig. 6. Graphs of the u function for the different cross-sections, +++ discretization k=h=0.5,
△△△ discretization k=h=0.1,--- polynomial N=3 [1],
exact
solution

◇◇◇ discretization k=h=0.2,

Fig. 7. Speedup and parallel efficiency in the function of the number of processors (time of the
parallel solving of the linear equations set has been omitted), theoretical ideal speedup, +++
discretization k=h=0.5, ◇◇◇ discretization k=h=0.2, △△△ discretization k=h=0.1

Application of R-Functions Method and Parallel Computations

1031

As expected, the assumption of simple linear basis functions yields quite
satisfactory computational results for suitably dense mesh nodes. Some inaccuracies
that occur in the interior of the domain solution probably result from approximate
calculations of the function derivatives, which appear in the formulae. In the program,
these derivatives are calculated using of the GNU Scientific Library (GSL). Fig. 7
shows how the speedup and parallel efficiency varies with the numbers of processors
for various problem sizes. The presented algorithm has been parallelized using
Message Passing Interface (MPI MPICH ver. 1.2.7p1) library function and GNU C
Compiler (ver.3.2). It has been tested with 9 nodes cluster with 2 Intel Xenon 2.4 Mhz
1GB of RAM. The nodes have been connected by a Gigaethernet.

5 Conclusions
In the paper, the so-called structural solution has been applied to the solution of the
elliptic partitial-differential equations. In the algorithm of the computations some
properties of the structural solution have been exploited, namely the fact that the
solution is composed of two parts, one of them fulfils exactly the boundary conditions
and the others fulfils the differential equation in an approximate way. This feature of
the solution can be employed effectively if we assume simple, linear basis functions
over local simplexes and use the structured grid of nodes. That, together with the
“row-by-row” method of computing the coefficients of the resulting system of linear
algebraic equations, leads to the effective parallel algorithm of the solution.
In the authors’ opinion, the efficiency of the proposed method should be
particularly observable in the analysis of the problems with real great domain
solutions. On the other hand, if more complex boundary value problems are to be
solved, the local basis spline functions of the higher order will probably be needed.

References
1. Grzymkowski, R., Korek, K.: On R-function Theory and its Application in Inverse Problem of
Heat Conduction. Information Technology Interfaces. In: Proceedings of the 23rd International
Conference on Pula, Croatia, pp. 393–402 (2001)
2. Reddy., J.N.: Applied Functional Analysis and Variational Methods in Engineering.
McGraw–Hill Book Company, New York (1986)
3. Rvachew, W.L., Sliesarienko, A.P.: Algiebra łogiki i intierwalnyje prieobrazowanija w
krajewych zadaczach (in Russian), Izd. Naukowa Dumka, Kijów (1976)
4. Shapiro, V.: Theory of R-functions and Applications, Technical Report, Cornell University
(1988)
5. Wawrzynek., A.: Modelling of solidification and cooling of metals and heat diffusion
problems by R-function method (in Polish), Zesz. Nauk. Pol Śląskiej, Mechanika 119,
Gliwice, Poland (1994)
6. Yagawa, G.: Node-by-node parallel finite elements: a virtually meshless method. Int. J.
Numer. Meth. Eng. 60(1), 69–102 (2004)

