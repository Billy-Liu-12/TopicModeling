A Space-Efficient Algorithm for Pre-distributing
Pairwise Keys in Sensor Networks
Taekyun Kim1 , Sangjin Kim2 , and Heekuck Oh1
1

2

Department of Computer Science and Engineering, Hanyang University, Korea
{tkkim, hkoh}@cse.hanyang.ac.kr
School of Internet Media Engineering, Korea University of Technology and Education, Korea
sangjin@kut.ac.kr
Abstract. We propose a space-efficient key pre-distribution scheme based on
quasi-orthogonal finite projective plane. This approach, compared to the previous
approaches, guarantees full connectivity and the uniqueness of pairwise keys.
Moreover, the size of the key ring depends not on the size of the key pool,
√ but
on the size of the network. The actual order of the key ring size is only O( N),
where N is the size of the network. As a result, our approach provides better
scalability than previous approaches.

1

Introduction

We are concerned with establishing pairwise symmetric keys for sensor nodes. These
keys are required to provide authenticity of sensor nodes and secrecy of information
exchanged between them. Current approach is to initialize each sensor node with some
secret information before deployment [1, 2, 3]. After deployment, these sensor nodes
perform a protocol with neighboring nodes to establish the required pairwise keys.
Some systems [2] need boostrapping to create the new pairwise keys, whereas the other
systems [1, 3] pre-distribute randomly selected pairwise keys. Our method is different
from the previous probabilistic methods [1, 3] in that we store keys in sensor nodes in a
deterministic way.

2

The Proposed Approach

Definition 1. An FPP (Finite Projective Plane) is a geometrical system G =
(P, L , I ) satisfying the following conditions, where P is a finite set of points, L
is a finite set of lines, and I is an incidence relation between P and L .
• For all points P, Q ∈ P with P = Q, there exists a unique line l ∈ L that passes
through P and Q.
• There exist at least 3 points.
• For every line l ∈ L , there exists a point not incident with l.
• Every line passes through at least 3 points.
• Every pair of distinct lines intersect.
This work was supported by the Ministry of Information and Communication, Korea, under
the university HNRC-ITRC program supervised by the IITA.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 958–962, 2005.
c Springer-Verlag Berlin Heidelberg 2005

A Space-Efficient Algorithm for Pre-distributing Pairwise Keys

959

Fig. 1. Example of FPPs

Fig. 2. Construction of key rings for each node using an FPP of order n = 2

Definition 2. For any n ≥ 2, if each line of an FPP is incident with exactly n + 1 points,
we call this FPP a finite projective plane of order n.
If G is an FPP of order n, then there are n2 + n + 1 points and lines in total. An
FPP of order n does not exists for all n ≥ 2. However, it is known that FPPs of order
n = pk exists, where p is a prime number and k is a positive integer. If we map points
to numbers and lines to sets, a finite projective plane of order n can be shown as Fig. 1.
There are many FPPs for a given order. Each FPP in Fig. 1 is just one of them.
In our method, the lines of an FPP is mapped to sensor nodes and points on a line to
the key ring assigned to the corresponding node. For example, Fig 2.(a) shows the key
ring assigned to each node when we use a single FPP of order n = 2. We denote Ni as a
sensor node ID, and Ki as a symmetric key. In this case, the maximum number of nodes
we can deploy is N = n2 + n + 1 and the size of key ring in each node is K = n + 1. The
relationship between N and K is N = K(K − 1) + 1. Since every pair of distinct lines
intersect in an FPP, each pair of node is guaranteed to have a single common key in
their respective key rings. However, if we use this common key as the pairwise key, all
pairwise keys are not unique. For example, the pairwise key of pairs (N1 , N4 ), (N1 , N6 ),
(N4 , N6 ) are all the same.
To make pairwise keys unique, we use an another FPP as shown in Fig 2.(b). Since
we used two FPPs, each pair of nodes have a pair of common keys. For example, N1
and N4 shares K1 and K3 . We use h(K1 ||K3 ) as the pairwise key between N1 and N4 ,
where h is collision-resistant hash function from {0, 1}∗ to {0, 1}k , where k is the key
length in bits. However, if we randomly assign the second FPP without any constraint,
we may still get pairs that uses the same pairwise keys. For example, in Fig 2.(b), N3 ,
N4 , and N5 all have K5 and K2 in common. This problem occurs if and only if a triple of
nodes that share a common key in the first FPP also share a common key in the second
FPP. This problem is independent of the order of FPP used. That is, the problem occurs
if this condition holds without regard to the order of FPP used.
To remedy this problem, we interchange the nodes and keys in the FPP. Since FPP
satisfies the principle of duality, the resulting plane is also an FPP. We interchange
them because we are not concerned with what specific keys are in each node’s key
ring but with the combinations of nodes that share a common key. Fig 3.(a) shows

960

T. Kim, S. Kim, and H. Oh

an interchanged FPP of Fig 2.(a). To the right of the FPP, we show the combinations of
nodes that share the same key. To make each pairwise keys unique, no two combinations
appearing on the same row in the first FPP must not also appear on any row in the
second FPP. The FPP of Fig 3.(b) satisfies this condition. We say that FPP of Fig 3.(a)
and Fig 3.(b) are quasi-orthogonal to each other. More formally, quasi-orthogonality of
FPP is defined as below.
{N1 , N4 , N6 } :
{N1 , N2 , N5 } :
{N1 , N3 , N7 } :
{N2 , N4 , N7 } :
{N3 , N4 , N5 } :
{N2 , N3 , N6 } :
{N5 , N6 , N7 } :

(1, 4), (1, 6), (4, 6)
(1, 2), (1, 5), (2, 5)
(1, 3), (1, 7), (3, 7)
(2, 4), (2, 7), (4, 7)
(3, 4), (3, 5), (4, 5)
(2, 3), (2, 6), (3, 6)
(5, 6), (5, 7), (6, 7)
(a)

{N1 , N2 , N4 } :
{N1 , N3 , N6 } :
{N3 , N4 , N7 } :
{N2 , N3 , N5 } :
{N4 , N5 , N6 } :
{N1 , N5 , N7 } :
{N2 , N6 , N7 } :

(1, 2), (1, 4), (2, 4)
(1, 3), (1, 6), (3, 6)
(3, 4), (3, 7), (4, 7)
(2, 3), (2, 5), (3, 5)
(4, 5), (4, 6), (5, 6)
(1, 5), (1, 7), (5, 7)
(2, 7), (2, 6), (6, 7)
(b)

Fig. 3. Quasi-orthogonal FPPs of order n = 2

Definition 3. Two FPPs G1 = (P1 , L1 , I1 ) and G2 = (P2 , L2 , I2 ) with the same
order are quasi-orthogonal if the following conditions hold:
1. P1 = P2 ,
2. For every line l1 ∈ L1 and l2 ∈ L2 , there exist at most two points incident with both
l1 and l2 .
Fig 4 shows two quasi-orthogonal FPPs of order n = 3.
{N1 , N5 , N8 , N11 }, {N1 , N2 , N6 , N7 }
{N1 , N3 , N9 , N10 }, {N1 , N4 , N12 , N13 }
{N2 , N4 , N5 , N9 }, {N5 , N6 , N10 , N12 }
{N3 , N5 , N7 , N13 }, {N3 , N4 , N6 , N8 }
{N7 , N8 , N9 , N12 }, {N2 , N8 , N10 , N13 }
{N4 , N7 , N10 , N11 }, {N2 , N3 , N11 , N12 }
{N6 , N9 , N11 , N13 }

{N1 , N3 , N5 , N12 }, {N1 , N4 , N7 , N8 }
{N1 , N6 , N10 , N11 }, {N1 , N2 , N9 , N13 }
{N2 , N3 , N4 , N10 }, {N2 , N5 , N7 , N11 }
{N2 , N6 , N8 , N12 }, {N3 , N6 , N7 , N9 }
{N3 , N8 , N11 , N13 }, {N4 , N5 , N6 , N13 }
{N4 , N9 , N11 , N12 }, {N5 , N8 , N9 , N10 }
{N7 , N10 , N12 , N13 }

Fig. 4. Quasi-orthogonal FPPs of order n = 3

Theorem 1. Given two quasi-orthogonal FPPs of order n, there is a way to assign key
rings to nodes in a network of size n2 + n + 1 or smaller, so that all of the pairwise keys
are unique. Furthermore, the size of key ring in each node is 2n + 2.
Proof. If we use two FPPs, uniqueness of pairwise keys are violated if and only if the
followings are satisfied.

A Space-Efficient Algorithm for Pre-distributing Pairwise Keys

961

1. 3 nodes share a common key in the first FPP.
2. These 3 nodes also share a common key in the second FPP.
Since the quasi-orthogonality of FPPs guarantees that no three nodes share a common
key in both FPPs, the argument is correct.
The followings are the steps used to construct key rings for sensor nodes of size N.
√
i) Step 1: Construct an FPP of order n = pk ≥ N, where p is prime and k is a
positive integer. Given an FPP of √
order n, the maximum supportable network size
is n2 + n + 1. Therefore, if n ≥ N, the maximum supportable network size is
larger than N. If we consider incremental addition, the number of nodes that will
be deployed after initial deployment must be taken into consideration.
ii) Step 2: Find a quasi-orthogonal FPP of the FPP constructed in step 1.
iii) Step 3: Assign a key to each row of the two quasi-orthogonal FPPs. Since the
assigned keys must be different from each other, the total number of keys used is
2N = 2n2 + 2n + 2.
iv) Step 4: Find the dual FPPs by interchanging keys and nodes of the two quasiorthogonal FPPs constructed in step 3.
v) Step 5: Assign a pair of key rings to each node. Without loss of generality, this
procedure can be done at random, i.e., the node ID is meaningless at this point.
Furthermore, there is no restriction for making a pair of key rings as long as each
ring is from the different dual FPPs. This allows us N! choices of assigning key
ring pairs to nodes. From the principle of duality, the key ring size of each node is
2K = 2n + 2.
This completes the proof.

✷

Fig. 5. Key rings allocated to each node when using two FPPs of order n = 3

Fig 5 shows key rings assigned to each node when using two quasi-orthogonal FPPs
depicted in Fig 4. Here, we assumed that first set of nodes {N1 , N3 , N5 , N12 } share K1 ,
the second set of nodes {N1 , N4 , N7 , N8 } share K2 and so on. However, the order of
assigning keys to second FPP is irrelevant and does affect√the uniqueness of pairwise
keys. The size of key ring assigned to each node is 2K ≈ 2 N.

3

Conclusion

In this paper, we have shown that it is possible to deterministically construct a key
ring for sensor nodes having following characteristics: (i) it guarantees fully direct

962

T. Kim, S. Kim, and H. Oh

connectivity, (ii) it guarantees uniqueness of pairwise keys, (iii) the size of the key
ring stored at each node depends on the size of the network, whereas previous approach
depends
on the size of the key pool, (iv) the order of the key ring stored at each node is
√
O( N), where N is the size of the network.

References
1. Chan, H., Perrig, A., Song, D.: Random Key Predistribution Schemes for Sensor Networks.
Proc. of the IEEE Symp. on Security and Privacy, IEEE Press (2003) 197–215
2. Deng, J., Han, R., Mishra, S.: Security Support For In-Network Processing in Wireless Sensor
Networks. Proc. of the 1st ACM Workshop on the Security of Ad Hoc and Sensor Networks,
ACM Press (2003), 83–93
3. Eschenauer, L., Gligor, V.D.: A Key-Management Scheme for Distributed Sensor Networks.
Proc. of the 9th ACM Conference on Computer and Communications Security, ACM Press
(2002), 41–47

