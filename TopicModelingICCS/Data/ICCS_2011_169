Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 1650–1659

Model-driven adaptation of question answering systems for
ambient intelligence by integrating restricted-domain knowledge
Katia Vila, Jose-Norberto Maz´on, Antonio Ferr´andez
Department of Software and Computing Systems, University of Alicante
San Vicente del Raspeig Road, 03690 Alicante, Spain

Abstract
Ambient Intelligence (AmI) requires Question Answering (QA) systems for providing intuitive interfaces to state
natural language questions and obtaining precise answers related to some specific topic. Therefore, adapting QA
systems to new restricted domains is an increasingly necessity for these systems to be applied in AmI environments.
Unfortunately, research addressing adaptation of QA systems to new domains has two main drawbacks: (i) QA systems are manually tuned, which requires a huge eﬀort in time and cost, and (ii) tuning of QA systems depends on the
specific representation scheme of the restricted-domain knowledge, thus hinders incorporation of new resources into
the system. To overcome these drawbacks, this paper presents a novel approach based on model-driven development
in order to seamlessly integrate textual information and knowledge resources to automatically and eﬀortlessly adapt
QA systems to be useful for restricted-domain AmI environments, such as e-Science.
Keywords: integrating knowledge resources, model-driven software development, ambient intelligence, question
answering

1. Introduction
Ambient Intelligence (AmI) facilitates humans to smoothly interact with the environment by means of intuitive
interfaces that are embedded in all kinds of objects [1]. Therefore, AmI environments could be useful for supporting
e-Science [2], since they can enable scientists to analyze, share and discuss their insights, experiments and results in
a more easily and seamlessly manner [3]. For example, a scientist may wish to intuitively interact with some device
for reusing available information about some experiments [4]. Since humans most often interact through written
or spoken language [5], “intuitive” means that users of AmI environments should be able to state questions and to
obtain the expected answers in natural language. Furthermore, AmI should be aware of the fact that large amount of
useful information is stored in textual form [6]. Interestingly, Question Answering (QA) systems are good candidates
for these purposes, since they allow users to obtain concise answers to questions stated in natural language from a
collection of text documents or corpus [7]. Having studied the major evaluation forums for QA systems such as
TREC1 and CLEF2 conferences, a common architecture of a QA system consists of three diﬀerent sequential phases
Email addresses: kvila@dlsi.ua.es (Katia Vila), jnmazon@dlsi.ua.es (Jose-Norberto Maz´on), antonio@dlsi.ua.es (Antonio
Ferr´andez)
1 TREC:Text REtrieval Conference, http://trec.nist.gov/
2 CLEF: Cross-Language Evaluation Forum, http://clef-campaign.org/

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.178

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

1651

(see Question Answering part of the Fig. 1): (i) question analysis for analyzing and understanding the question by
classifying it, and extracting the significant keywords; (ii) these keywords are used by an Information Retrieval (IR)
system in order to select and retrieve the relevant passages or documents; and (iii) finding and extracting the expected
answer by using natural language processing tools (such as PoS tagger, syntactical parser, entity annotator, semantic
role parser, etc.) to analyze this set of passages. If this architecture is analyzed, then it is obvious that the phase of
question analysis is dependent on the knowledge from the domain which is usually included in question patterns3 .
Nowadays many Open-Domain Question Answering (ODQA) systems have been developed. ODQA systems
includes question patterns useful for dealing with a large spectrum of general questions. However, AmI environments
for e-Science should be aware of the specific needs of scientists, thus requiring the customization of the QA system
to be feasible for one of the wide range of environments (such as hospitals, museums, agricultural, etc.). Therefore,
Restricted-Domain Question Answering (RDQA) should be used in AmI to adapt QA to a certain scientific area.
Question patterns for RDQA can be designed from the scratch, which makes portability of the system highly complex,
or from initial open-domain question patterns, which may cause problems in the adaptation due to restricted-domain
features [8, 7]. Some of these problems of adaptation are: (i) question patterns are manually tuned [9], which requires a
huge eﬀort in time and cost, and (ii) question patterns depend on the representation scheme of the available knowledge
resources [7], therefore their codification may be modified every time that a new resource is incorporated.
To overcome these drawbacks, we propose an approach to obtain existing question patterns from an ODQA system
and adapting them by integrating knowledge resources from a specific domain in an automatic manner. This approach
is based on model-driven software development [10] which has been proven useful for defining and managing several
kind of software models in an easy and structured way with a high degree of automatization. Our initial hypothesis is
that the adaptation of ODQA systems to a new domain can be seen as a model-driven software development scenario,
in such a way that existing question patterns, collection of documents from the corpus, and knowledge from the
domain are integrated into models which will guide the derivation of the new patterns for the restricted domain. The
main benefit of our approach is that the adaptation of question patterns is automatically done in a systematic, wellstructured, and comprehensive manner, which significantly reduce the amount of manual labour required in adapting
QA systems to a restricted domain for using AmI in e-Science.
The remainder of this paper is structured as follows. Section 2 presents some related work about the process of
adapting existing ODQA patterns for a specific domain. Afterwards, Sect. 3 describes our model-driven approach to
use knowledge resources in the adaptation of question patterns for restricted domains. Section 4 shows the implementation of our approach and its applicability by means of a set of experiments. Finally, Sect. 5 sketches out our
conclusions and future work.
2. Related Work
Nowadays, the process of adapting existing ODQA patterns for a specific domain is manually done by using
linguistic resources [9, 11, 12, 13], thus being costly and prone-to-fail. Other approaches analyze potential questions
to be answered [14, 15], which is feasible for open domains, where repositories of questions are easily acquired from
CLEF, TREC or from the Web4 , but diﬃcult to apply in restricted domains since comprehensive enough training
corpus are hard to find [7]. Our point of view is that patterns should be tuned by using diﬀerent kinds of knowledge
resources from a specific domain. These knowledge sources are also known as Knowledge Organization Systems
(KOS)5 ; according to the level of detail or granularity of the knowledge they refer to, two kind of KOS exist: generic
KOS (such as WordNet6 , EuroWordNet7 , SUMO8 , etc.) or the more precise domain KOS (such as Agrovoc thesaurus9
for the agricultural domain). However, these KOS have their own formats and interfaces, which must be unified by
3 Note that for the purpose of this paper, we will refer to all the possible strategies for detecting relationships between elements in the question (e.g., logic forms,
regular expressions, syntactical relations, dependency relations and so forth) as patterns.
4 AskJeeves: http://www.ask.com;Yahoo!Answers:http://answer.yahoo.com
5 Knowledge Organization Systems include a variety of schemes that organize, manage, and retrieve information. This term is intended to encompass all types of
schemes for promoting knowledge management [16], e.g., dictionaries, thesaurus, or ontologies
6 http://wordnet.princeton.edu/
7 http://www.illc.uva.nl/EuroWordNet/
8 http://www.ontologyportal.org/
9 http://www.fao.org/agrovoc/

1652

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

the QA system, thus being a costly task [7, 8, 17]. Bearing these consideration in mind, we propose a model-driven
approach to automatically adapt question patterns in ODQA system to a restricted domain from the collection of
documents by integrating available KOS.
3. Model-driven adaptation for question analysis
Our approach consists of automatically adapting question patterns for restricted-domain QA by integrating KOS
within a six-step model-driven process. In each step the models for the existing question patterns are acquired and
adapted by using a restricted domain model derived from the collection of documents and KOS from the restricted
domain. Our approach is shown in Fig. 1 and the diﬀerent steps are next described.

Figure 1: Our model-driven approach for adapting QA systems to restricted domains.

3.1. Metamodels for adapting question analysis
Under the model-driven umbrella, and according to [18], “a model is a description of (part of) a system written in
a well-defined language”, while “a well-defined language is a language with well-defined form (syntax), and meaning
(semantics), which is suitable for automated interpretation by a computer”. First, a model must focused on those
important parts of a system, thus abstracting away superfluous details. Secondly, well-defined languages can be
designed by means of metamodeling [19], which provides the foundation for creating models in a meaningful, precise
and consistent manner. Therefore, a restricted domain and a question pattern metamodels have been designed for
being used in our approach.
3.1.1. Restricted domain metamodel
Our purpose is creating models that represent terms from the restricted-domain corpus and joining them with their
corresponding concepts from the available KOS. To this aim we have defined the restricted domain metamodel which
contains the adequate elements to create a variety of these models (see Fig. 2).
The core element in this metamodel is the RestrictedDomainModel metaclass which is useful for creating a model
for a particular restricted domain. The CorpusTerm metaclass is useful for representing any of the terms appearing
in a corpus. A metaattribute value is used to store the lemmatized value of each term. There are several lexical
kind of corpus terms as adjectives, nouns or verbs, which are represented as several subclasses of the CorpusTerm,
i.e. AdjectiveTerm, NounTerm or VerbTerm metaclasses. It is worth noting that syntactical relations between these
terms (which can be easily provided by PoS tagger and syntactical parser when the corpus is processed) are valuable
for being used in further steps of our approach. Specifically, the VerbTerm metaclass has relations to indicate which
NounTerm can be seen as subject or as an object. Also the NounTerm can be related to an adjective or to other nouns.
These relations are important to detect the multi-words which often appear in restricted domains (e.g. “calcium
hydroxide” or “adrenal cortex hormones”in the chemical domain). Also, every kind of CorpusTerm has its own type
(coming from several Enumerations as shown in Fig. 2). Finally, every CorpusTerm may also have some semantic

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

1653

Figure 2: Overview of our restricted domain metamodel.

information (SemanticLabel metaclass). This semantic information can be provided by open-domain tools when the
corpus is being processed in the QA task, such as semantic role parser, Name Entity Recognizer (NER), temporal
or numerical expressions recognizer, etc. The SemanticLabel metaclass indicates the name of the technique used to
acquire the semantic information, the obtained value by applying these techniques and, also the probability of the
certainty of this value. For example, for terms “Congo river” and “lake Kariba” there is a semantic relation whose
value is “Inland waters”, name is “NER”, and probability is “1”, since this value has been obtained by using a NER.
Furthermore, Concept and Equivalence metaclasses allow the elements of this restricted-domain metamodel to be
semantically enriched with concepts and relationships from several KOS. The Concept metaclass refers to an element
from a particular KOS. Each of these elements has a value to represent it. Besides, each concept can be related to one
or more concepts through relations of synonymy, hypernymy and hyponymy. Each concept may be related to more
than one KOS for which the name is indicated and also an ID for the concept within this KOS. This metaclass has an
isTop metaattribute that states if it is a top concept in that KOS. Equivalences between a term and a concept can be
defined: the metaclass Equivalence represents an association between Concept and NounTerm.
3.1.2. Question pattern metamodel
Existing patterns from ODQA systems must be represented into a model in order to be able to adapt them to the
domain represented in a restricted domain model. To this aim we have defined the question pattern metamodel which
contains the adequate elements to create a variety of these question pattern models (see Fig.3(a)). These models will
define the system question typology, i.e. question types that the system will be able to answer, thus detecting the kind
of expected answer and the keywords of the question.
A Pattern metaclass have several associated expressions (i.e. Expression and Association metaclasses) in order to
represent a pattern. Moreover, a pattern is associated to an answer type (i.e. AnswerType metaclass), in such a way
that the kind of expected answer is known when the classification of the question by choosing the pattern that best
fits with the question. A metaclass Expression is used to consider every kind of expressions. For example, syntactical
labels such as PP-preposition, PtDt-interrogative pronoun or determinant, VBC-verbal head, SNS-simple noun phrase,
SPP-simple preposition phrase and their values (e.g., an expression PtDt could have “which” as value). Expressions
may have some related concepts (e.g., a SNS may have hyponyms of certain concepts within their expression). A
metaclass Association relates expressions in order to know a sequential order. It has an antecedent and a consequent.
An example could be association with name “PtDt-VBC” whose antecedent is an expression “PtDt” and a consequent
“VBC”. An AnswerType metaclass refers to one or more concepts in order to determine the type of the answer. A
metaclass Concept contains one or more IDs stored in the attribute that identifies diﬀerent KOS where this concept is
supposed to appear and also several verbs that frequently are associated to the concept.
3.2. Adapting question patterns with restricted-domain knowledge
Once our metamodels have been defined, every step of our approach for adapting the existing question patterns by
using restricted domain knowledge is described (see Fig. 1).

1654

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

(a) Overview of our question pattern metamodel.

(b) Sample restricted domain model.

Figure 3: Question pattern metamodel and sample of restricted domain model.

3.2.1. Obtaining a restricted-domain model from the corpus
As our adaptation approach is based on the most relevant terms appearing in the corpus, the first step consists
of obtaining a restricted domain model (according to our aforementioned metamodel at Sect. 3.1.1) that contains all
the available information from these terms previously extracted in the collection processing (see transformation T1
in Fig. 1). The transformation T1 has been defined to automatically obtain most relevant terms from the corpus and
defining their corresponding elements in the restricted domain model. This transformation selects these terms based
on two constraints: lexical (each term must be a noun, an adjective or a verb) and statistical (terms must have certain
frequencies, e.g. relative frequency (fr) or tf-idf frequency [20]). It is worth noting that the threshold values for these
frequencies may be modified depending on the specific domain. From each selected term, a class CorpusTerm is
created (AdjectiveTerm, VerbTerm or NounTerm) with its corresponding lexical, syntactic and semantic information
obtained from the corpus processing in the QA task, including the diﬀerent kind of relationships between them. From
now on, a running example based on the agricultural domain from the Cuban Journal of Agricultural Science10 ) is
used as a proof of concept of our approach, which can be used in an AmI environment of a chemical or biological
laboratory. Sample relevant terms from our case study are: “chlorimuron”, “sulphonylureas”, “group”, “division”
and “growth” as common nouns; “inhibit”, “control” and “belong” as main verbs; and “chemical” and “cellular” as
qualifying adjectives. Also, the following syntactical information was extracted: “group” is related to the “chemical”
adjective, “division” and “growth” nouns are related to the “cellular” adjective, while “chlorimuron” noun is the
subject of the verbs “inhibit”, “control” and “belong”. This information is stored in the corresponding CorpusTerm
classes (see Fig.3(b)).
3.2.2. Enriching the restricted-domain model.
The second step of our approach consists of adding semantic knowledge to the already defined elements of the
restricted-domain model by means of concepts and relationships from diﬀerent kinds of KOS in order to create an
enriched restricted domain model. This enrichment step is done in the T2 transformation (see Fig. 1) which allows
mapping our restricted-domain metamodel with those parts of the KOS that will be useful in the following steps
of our approach, thus abstracting away unnecessary details. For example, hierarchical relationships of the Restricted
Domain metamodel are found in the broader term and narrower term respectively if the KOS is a thesaurus; hypernyms
and hyponyms if it is a lexical database as WordNet; subclass-of and instance-of if it is an ontology; functional
10 RCCA: Revista Cubana de Ciencia Agr´ıcola, http://www.ica.inf.cu/productos/rcca/

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

1655

dependencies if it is a relational database, etc. Also, this transformation makes the system adaptable since new KOS
can be integrated in our restricted-domain model if T2 is adapted to the new KOS, instead of changing the whole QA
system. Therefore transformation T2 provides the KOS-independence of our approach, since it includes the required
information into the restricted-domain metamodel by managing the heterogeneity of the KOS. In order to manage
diﬀerent kinds of KOS, elements of the available KOS that correspond to the elements of the destination metamodel
(i.e. Restricted Domain metamodel) are required to be defined. To do so, transformation T2 is composed of several
extractors that are in charge of dealing with the specific storage format of the KOS (e.g. databases, text files, XML,
OWL or RDF files, etc.), thus creating the necessary elements in the restricted-domain model.
Transformation T2 associates each corpus term previously detected with some concept from the domain KOS.
First simple words of NounTerm are searched, and then multi-words by using its Related Adjectives and Related Nouns
attributes. An Equivalence class is created for associating each new Concept class (including its corresponding KOS
classes) to some existing NounTerm classes. The following step is to search for synonyms, hyponyms and hypernyms
of the new Concept class in a domain KOS until a top concept is reached. Then, every top concept from the domain
KOS is checked to be associated to some concept from a generic KOS (some disambiguation algorithm can be used at
this stage), and if this association does not exist then hyponyms (and their synonyms) of this top concept are checked.
For each concept belonging to a generic KOS, its hypernyms (and its synonyms) are added to the restricted-domain
model until finding a top concept. The rationale behind T2 transformation is to associate corpus terms with concepts
from the domain KOS and not with the concept from the generic KOS, since (i) it is likelier to restricted-domain terms
appear in the domain KOS, and (ii) polysemy is avoided because restricted-domain terms appear in the generic KOS
are previously disambiguated with the domain KOS.
Following our running example, we choose to use the Agrovoc thesaurus as agricultural domain KOS, and WordNet as generic KOS. The NounTerm “chlorimuron” (see Fig. 3(b)) in the restricted-domain model is checked to appear
in Agrovoc. It is found, so a new concept “chlorimuron” is created and also a new equivalence between both. Then,
KOS is navigated by its broader term relationships in order to find those concepts which are hypernyms. The concept
“sulphonylurea” is then found, and also “sulphonamides” and “amides” as top concept in this domain KOS. Afterwards, this top concept is intended to be mapped to some concept in WordNet. In this case “amide” is found. Then,
by recovering hypernymy relations, concepts “organic compound”,“chemical compound”, and concept “substance”
as top concept in this generic KOS are found. All these new concepts are added to the restricted domain model to
obtain an enriched one (see sample in Fig. 3(b)).
3.2.3. Obtaining EAT taxonomies from the restricted-domain model
An Expected Answer Type (EAT) taxonomy is used by the QA system to determine the semantic type of the
answer, thus reducing the searching space over documents, while a right answer is obtained. The enriched restricteddomain model, previously obtained, is used to create an EAT taxonomy for the restricted domain by applying transformation T3 (see Fig. 1). Obviously, concepts in this taxonomy can be more or less refined, so a level of granularity
should be selected in T3 by applying certain criteria over the enriched restricted-domain model (we refer reader to our
previous work [21] for further details). We advocate for creating an EAT taxonomy from the terms in the restricted
domain model (and not directly from the domain KOS) in order to assure that it contains those semantic classes more
closely related to the domain. For example, if the domain of the corpus is fisheries but only an agricultural KOS is
available (which also includes concepts and relationships from fisheries), then it is assured that the resulting enriched
restricted model only contains those concepts from the domain KOS related to fisheries, ignoring the rest of the agricultural terms. Therefore, an EAT taxonomy derived from this restricted-domain model will have an adequate size,
structure and recall for the actual domain. Finally, it is worth noting that the result of transformation T3 is a sub-model
of the enriched restricted-domain model obtained in the transformation T2 (see Sect. 3.2.2).
3.2.4. Obtaining question pattern models
To adapt existing patterns to a new domain, they have to be first acquired from the QA system. Transformation T4
(see Fig. 1) is responsible for obtaining existing question patterns in a question pattern model from the baseline ODQA
system by using the metamodel in Sect. 3.1.2. These transformations depend on the kind of the implementation of the
system, therefore our approach can manage every kind of pattern by only updating transformation T4. Fig. 4(a) shows
an example of pattern from our previously developed ODQA system (AliQAn [13]) called “patternEO1” which is
implemented in C++. Importantly, the answer type (e.g. “entity object‘”) is defined through the TGroup class, while

1656

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

(a) Sample of question pattern code.

(b) Sample of a question pattern model.

Figure 4: Example of an open-domain question pattern.

the pattern (e.g. “patternEO1”) is defined with the TPattern class. In AliQAn system the elements of the question
(e.g. “which” as PtDt, “be” as Verb and SNS) and syntactical relations between them are defined at the TPattern class.
Finally, the elements of SNS type are defined by the identifier of the concepts which are related with the answer type
and their corresponding kind of semantic relation (i.e. L-Literal, S-Synonym, and H-Hyponym). The corresponding
question pattern model is shown in Fig. 4(b), and it has the following expressions: PtDt (value: “which”), VBC (value:
“be”) and SNS (whose related concepts are “musical instrument”, “building”, etc.); as associations “PtDt-VBC” and
“VBC-SNS”; and the answer type is “entity object”. Lastly, it is worth noting that this pattern makes ODQA system
able to identify questions of kind: “Which is the musical instrument that Beethoven was playing?”.
3.2.5. Adapting question pattern models
Transformation T5 (see Fig. 1) collects both the EAT taxonomy of the enriched restricted-domain model and
models of existing question patterns, in order to generate new question pattern models specifically tuned for the
restricted domain. The first step is to obtain the concepts from EAT taxonomy of the enriched restricted-domain
model (previously obtained in Sect. 3.2.3) and represent them with the Concept metaclass of the adapted question
pattern model, together with the required information to fill all the attributes of this class. The next step is to search
for relationships between concepts which have been added to the adapted question pattern model (new concepts) and
those existing concepts in the question pattern model (old concepts) which allow deciding if patterns of an old concept
can be used to define patterns for a new concept. Assuming that every top-level concept of the generic KOS used by
the ODQA system has patterns, we will create a new pattern derived of an existing one if when comparing the old
concept and the new concept the following conditions hold: (i) they are equal, (ii) they have a common hypernym
provided by the same KOS, i.e. they are siblings in the hierarchy, or (iii) they maintain a hyponym-hypernym relation,
i.e. they are parent and child in the hierarchy. For example, recalling our case study, concept “sulphonylurea” has
“substance” as hypernym top concept which is not among old concepts. However, “object” is an old concept with
defined patterns and it has the same top concept hypernym than “substance” which is “physical entity”. Concepts
“substance” and “object” are then siblings, so patterns from “object” can be reused to the new concept “substance”. In
addition, the concept “substance” and the new concept “sulphonylurea” have a hypernym-hyponym relation, therefore
a new pattern for the “sulphonylurea” concept is also created from the old pattern previously explained for the “object”
concept (i.e. “patternEO1” in Fig. 4(b)). The name of the new pattern is “patternSulphonylurea1” (see Fig. 5(a)), and
it has the following expressions: PtDt (value: “which”), VBC (value: “be”) and SNS (whose related concepts are
“sulphonylurea”, “chlorimuron”, “bensulfuron”, and “chlorsulfuron”); as associations they have “PtDt-VBC” and
“VBC-SNS”; and the answer type is “substance sulphonylurea”. Finally, it is worth to point out that a new kind of
question can be answered: “Which is the sulphonylurea used for the weeds control in the soja crops?”

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

(a) Sample of an adapted question pattern model.

1657

(b) Sample of an adapted question pattern code.

Figure 5: Example of adapted question pattern.

3.2.6. Generating new question pattern code.
Finally, transformation T6 automatically deploys the corresponding code for a specific QA system. To do so, these
transformations are based on the notion of customizable templates in order to capture rules for translating question
pattern models into corresponding code for diﬀerent QA systems. A adapted question pattern “patternSulphonylurea”
resulting for applying our approach is shown in Fig. 5(b).
4. Implementation and Results
Metamodels and transformations have been implemented by using the Eclipse Framework11 . Eclipse is an open
source project conceived as a modular platform able to be extended by plugins in order to add features to the development environment. In order to give support to modeling tasks, we have used facilities provided by Eclipse Modeling
Framework (EMF)12 and Graphical Modeling Framework (GMF)13 . For implementing transformations between models, ATL (Atlas Transformation Language)14 has been selected, since it is fully integrated with Eclipse. ATL is
integrated with EMF, allowing the definition and execution of transformations between models by means of rules that
matches elements in source and target models. For example, three rules have been defined for transformation T3 (see
Sect. 3.2.3): RestrictedDomainmodel2EAT (for creating a target restricted domain model from the source one), Concept2Concept4EAT (for matching Concept classes in the source restricted domain model that fulfill the granularity
criteria, thus creating new Concept classes in the target model), and NewConcept4EAT (for creating new Concept
classes as hyponyms of the Concepts classes created by the previous rule provided the granularity criteria holds). The
concept2concept4EAT rule is shown next.
rule concept2concept4EAT {
from c1:RD!Concept (c1.hypernym.size()=0 and c1.hasDescendentsWithMoreThan2Hyponyms())
to c2:RD!Concept (value<-c1.value, hyponym<-c1.hyponym, hypernym<-c1.hypernym)
do{
for(i in c1.hyponym){
if(i.hasDescendentsWithMoreThan2Hyponyms()){
c2.hyponym<-thisModule.newConcept4EAT(i);
thisModule.resolveTemp(c1.getRestrictedDomainModel(),’rm2’).concepts<-c2.hyponym;
}
}
}
}

11 http://www.eclipse.org
12 http://www.eclipse.org/emf
13 http://www.eclipse.org/gmf
14 http://www.eclipse.org/atl

1658

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

This ATL rule has a from part with the pattern to be matched in the source restricted domain model (a Concept
class c1 without hypernyms and having more that two hyponyms, which is the granularity criteria). The to part of this
ATL rule consists of several elements to be created in the target model (a Concept class c2 which is the counterpart
of the aforementioned c1). Also, this rule contains a do part in order to execute the newConcept4EAT rule for each
hyponym concept of c1 provided the granularity criteria.
Transformations that generate code have been implemented by using Acceleo15 , which is integrated in EMF. Each
transformation is called module. Each module may contain one or several templates which are in charge of generating
text or queries for extracting information from the source model. For example, transformation T6 is implemented by
the Acceleo module generateQuestionPattern, an excerpt of which is defined as follows.
[module generateQuestionPattern(’http://questionpatternmetamodel/1.0’)/]
[template public generateQuestionPattern(q : QuestionPatternModel)]
[for(a : AnswerType | q.questionTypology)]
[file(a.name.concat(’.cc’), false, ’UTF-8’)]
TGroup generating[a.name.toUpperFirst()/]() {
list<TBS> listBlocks; TGroup [a.name/]("[a.name/]");
[for (p : Pattern | q.hasPatterns)] [if (p.answerType.name=a.name)] TPattern [p.name/]; [...] [/if] [/for]
} [/file] [/for] [/template]

This module contains a template that has an input parameter q of class QuestionPatternModel. Next, by using
the file label, the name of the output file is indicated. In this file, the code of a function that returns an object of the
class TGroup is created. Within this function, the code for generating the patterns included as elements of the Pattern
class in the the adapted question pattern model is created (objects of TPattern class), provided the answer type of the
pattern corresponds to the name of the question typology of the question pattern model.
First Experiment. A previous study about our baseline ODQA system AliQAn [13] was carried out with 180 training
questions over the RCCA corpus (i.e. 2024 articles from the RCCA journal), where it was detected that 73.3% of
errors in the adaptation of the system was caused by (i) a poor and incorrect EAT taxonomy, and (ii) an incorrect
classification of questions for absence or ineﬃciency of the question patterns. Precisely, the precision of the system
AliQAn reached a 28.8% taking into account only the first answer and a 13.6% considering the three first answers.
These results are very low as compared with the average (i.e. around 43% of precision) reached by AliQAn in the
CLEF evaluation forum. Besides it attained an overall recall of 33%. A sample of aﬀected question were: “Which
is the limiting factor in the performance decreasing of the alfalfa legumes?” which is classified as “entity person”
instead of “climatic factors”. This question fails because the concept “climatic factors” cannot be found in the EAT
taxonomy used by AliQAn, and neither the corresponding question pattern.
Second Experiment. First step in this experiment consists of processing this corpus with a PoS tagger (MACO [22])
and a syntactical parser (SUPAR [23]), indexing it and computing frequencies for each term. As we consider the most
relevant terms as those having fr>25 and tf-idf>0.01, 8696 relevant terms were obtained and specified in a restricteddomain model by means of transformation T1. Then, noun terms are used in transformation T2 for enriching the
restricted-domain model by using Agrovoc and WordNet. This model has 9022 concepts. Afterwards, the EAT
taxonomy was obtained from the restricted-domain model by applying transformation T3 with the criteria of choosing
those concepts with more than two hyponyms. The EAT taxonomy then contains roughly 10% of concepts from the
restricted-domain model. Finally, we realized the rest of transformations of our approach (i.e. from T4 to T6), thus
generating 325 new EAT concepts and their corresponding code for about 2600 question patterns. These data show
how much eﬀort would require accomplishing restricted-domain adaptation manually and the benefit of applying
our approach for supporting this process. Furthermore, it is worth noting that, by using our approach, the precision
and recall are 58.3% and 75%, respectively. If we compared these values to the results of our first experiment, we
can appreciate an increment in 29.5% of the precision and 42% of the recall. In consequence there was a reduction
of errors detected in the previous experiment in a 57.8%. These results show the eﬀectiveness of our approach in
the adaptation of AliQAn to the agricultural domain of the RCCA journal. After applying our approach on the
aforementioned sample question (stated in the first experiment), since words in the corpus were detected (such as
“hail”, “rain”, “snow”, etc.) related to the concept “atmospheric precipitation”, a pattern is created for its hypernym
“climatic factors” and the question is successfully classified.
15 http://www.eclipse.org/acceleo

Katia Vila et al. / Procedia Computer Science 4 (2011) 1650–1659

1659

5. Conclusions
AmI stresses the importance of QA systems for providing attractive natural language interfaces to be seamlessly
used by humans for obtaining concise answer to questions stated in natural language from a collection of text documents or corpus [6]. However, to be used in e-Science, QA systems must be adapted to scientific restricted domains
by integrating diﬀerent knowledge. In this paper we have presented our approach for tackling the complex task of
automatically adapting QA system to restricted domains in a systematic, well-structured, and comprehensive manner
by using an innovative point of view borrowed from model-driven software development [10]. We have focused on
explaining how to adapt the question patterns of an ODQA system to a new restricted domain by using diﬀerent kinds
of KOS. The main advantages of our approach are (i) adaptability of a QA system to diﬀerent restricted domains by
only using a collection of documents and available KOS, (ii) portability of patterns to any QA system, (iii) integration
of diﬀerent kind of KOS by means of a common metamodel. Our immediate future work consists of carrying out a
more complete set of experiments to measure the eﬀectiveness of our approach in the whole process of applying QA
to a wide range of AmI environments for e-Science.
Acknowledgments.
This research has been partially funded by the Valencia Government under projects PROMETEO/2009/119 and
ACOMP/2011/001, and by the Spanish government under project Textmess 2.0 (TIN2009-13391-C04-01).
References
[1] C. Ramos, J. C. Augusto, D. Shapiro, Ambient intelligencethe next step for artificial intelligence, IEEE Intelligent Systems 23 (2) (2008)
15–18.
[2] D. D. Roure, Y. Gil, J. A. Hendler, Guest editors’ introduction: E-Science, IEEE Intelligent Systems 19 (1) (2004) 24–25.
[3] D. D. Roure, N. R. Jennings, N. R. Shadbolt, The semantic grid: Past, present and future., Vol. 93, 2005, pp. 669–681.
[4] D. D. Roure, e-Science and the Web, IEEE Computer 43 (5) (2010) 90–93.
[5] C. Ramos, Ambient intelligence - a state of the art from artificial intelligence perspective, in: J. Neves, M. F. Santos, J. Machado (Eds.), EPIA
Workshops, Vol. 4874 of Lecture Notes in Computer Science, Springer, 2007, pp. 285–295.
[6] I. Gurevych, M. M¨uhlh¨auser, Natural language processing for ambient intelligence, Special Issue of KI-Zeitschrift ”Ambient Intelligence und
K¨unstliche In-telligenz” (2007) 10–16.
[7] D. Moll´a, J. L. V. Gonz´alez, Question answering in restricted domains: An overview, Computational Linguistics 33 (1) (2007) 41–61.
[8] D. Ferr´es, H. Rodr´ıguez, Experiments adapting an open-domain question answering system to the geographical domain using scope-based
resources, in: Proceedings of the Multilingual Question Answering Workshop of the EACL 2006, 2006, pp. 69–76.
´ Rodrigo, C. Forascu, I. Alegria, D. Giampiccolo, N. Moreau, P. Osenova, Overview of respubliqa 2009:
[9] A. Pe˜nas, P. Forner, R. Sutcliﬀe, A.
Question answering evaluation over european legislation, in: Working Notes of Cross Language Evaluation Forum (CLEF), 2009.
[10] B. Selic, The pragmatics of model-driven development, IEEE Software 20 (5) (2003) 19–25.
[11] U. Hermjakob, Parsing and question classification for question answering, in: Proceedings of the workshop on Open-domain question answering, Association for Computational Linguistics, Morristown, NJ, USA, 2001, pp. 1–6. doi:http://dx.doi.org/10.3115/1117856.1117859.
[12] S. M. Harabagiu, D. I. Moldovan, M. Pasca, R. Mihalcea, M. Surdeanu, R. C. Bunescu, R. Girju, V. Rus, P. Morarescu, Falcon: Boosting
knowledge for answer engines, in: TREC, 2000.
[13] S. Roger, K. Vila, A. Ferr´andez, M. Pardi˜no, J. M. G´omez, M. Puchol-Blasco, J. Peral, Using aliqan in monolingual qa@clef 2008, in: CLEF,
2008, pp. 333–336.
[14] D. Ravichandran, E. H. Hovy, Learning surface text patterns for a question answering system, in: ACL, 2002, pp. 41–47.
[15] L. Kosseim, J. Yousefi, Improving the performance of question answering with semantically equivalent answer patterns, Data Knowl. Eng.
66 (1) (2008) 53–67.
[16] G. Hodge, Systems of Knowledge Organization for Digital Libraries: Beyond Traditional Authority Files, The Digital Library Federation
Council on Library and Information Resources, 2000.
[17] E. Nyberg, T. Mitamura, R. Frederking, V. Pedro, M. W. Bilotti, A. Schlaikjer, K. Hannan, Extending the JAVELIN QA system with domain
semantics.
[18] A. Kleppe, J. Warmer, W. Bast, MDA Explained. The Practice and Promise of The Model Driven Architecture, Addison Wesley, 2003.
[19] J. B´ezivin, On the unification power of models, Software and System Modeling 4 (2) (2005) 171–188.
[20] R. Baeza-Yates, B. Ribeiro-Neto, Modern information retrieval, ACMPress,New York.
[21] K. Vila, J.-N. Maz´on, A. Ferr´andez, J. M. G´omez, Model-driven knowledge-based development of expected answer type taxonomies for restricted domain question answering, in: Fourth International Conference on Metadata and Semantic Research (MTSR) 2010, Communications
in Computer and Information Science (CCIS), vol. 108, 2010, pp. 107–118.
[22] S. Ferr´andez, J. Peral, Investigating the best configuration of hmm spanish pos tagger when minimum amount of training data is available, in:
A. Montoyo, R. Mu˜noz, E. M´etais (Eds.), NLDB, Vol. 3513 of Lecture Notes in Computer Science, Springer, 2005, pp. 341–344.
[23] A. Ferr´andez, M. Palomar, L. Moreno, An empirical approach to spanish anaphora resolution, Machine Translation 14 (3-4) (1999) 191–216.

