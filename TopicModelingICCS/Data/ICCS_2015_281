Procedia Computer Science
Volume 51, 2015, Pages 1373–1382
ICCS 2015 International Conference On Computational Science

Graphical high level analysis of communication in
distributed virtual reality applications
Marcelo de Paiva Guimar˜aes1 , Bruno Barberi Gnecco2 , Diego Roberto Colombo
Dias3 , Jos´e Remo Ferreira Brega4 , and Luis Carlos Trevelin3
1

Open University of Brazil-UNIFESP/Faccamp’s Master Program, S˜
ao Paulo, SP, Brazil
marcelodepaiva@gmail.com
2
Corollarium Technologies, S˜
ao Paulo, SP, Brazil
brunobg@corollarium.com
3
UFSCAR, S˜
ao Carlos, SP, Brazil
[diegocolombo.dias,trevelin]@dc.ufscar.br
4
UNESP, Bauru, SP, Brazil
remo@fc.unesp.br

Abstract
Analysing distributed virtual reality applications communicating through message-passing is
challenging. Their development is complex, and knowing if something is wrong depends on
the states of each process, defects (bugs) cause software crashes, hangs, and generation of
incorrect results. To address this daunting problem we specify functional behavior models (for
example, using synchronization barriers and shared variables) for these applications that ensures
correctness. We also developed the GTracer tool, which compares the functional behavior
models developed with the messages transmitted among processes. GTracer checks for violations
of these models automatically and displays the message traﬃc graphically. It is a tool made
for libGlass, a message library for distributed computing. We have been able to ﬁnd several
non-trivial defects during the tests of this tool.
Keywords: Analysis, distributed computing, Virtual Reality, message passing, bug, defects

1

Introduction

The paradigm of running virtual reality applications in distributed system was successful, but
of course these applications still suﬀer from software defects (bugs) [11]. Debugging distributed
applications and analysing their behavior for correctness is a complex problem. Although much
research has been conducted to detect software defects, most of these applications are still
analyzed by means of print statements, data monitors, operating system monitors, and so on,
to generate output messages, which are checked after an execution ends, requiring a considerable
amount of programmer time and eﬀort [13].
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.343

1373

Graphical high level analysis of communication in distributed VR applications

Guimar˜
aes et al.

Distributed virtual reality applications are prone to bugs due to their complex architecture.
These include not only the network and multi-processing, but also time dependencies such as
framelock (ensuring that new video frames are swapped in synchrony) and datalock (consists in
maintaining coherent scene data for each frame on every process) [12]. We also have to ensure
that performance is acceptable for a real time experience.
A low-level approach such as printf or a debugger is inadequate for analysing distributed
virtual reality applications, because there are various nodes interconnected by a computer
network running multiple processes concurrently (cluster). This leads to several issues: pausing
a debugger may lead to inconsistencies and alter the ﬂow in a way that is just unusable, and
prints would generate large amounts of data that could not be read in real-time.
Computer clusters have been adopted for virtual reality applications [12] due to the advances
of network bandwidth, the exponential growth of processor capabilities and the improvements
of dedicated graphics hardware. It is important to have tools to use and debug them. Using
clusters it is possible to create fully immersive and interactive environments at a very aﬀordable
cost. Figure 1 depicts an example of a multiprojection application running on a 6-node cluster,
interactively.

Figure 1: High immersive and interactive virtual reality application based on cluster
To analyse these applications, we specify a set of high-level functionalities (for example,
synchronization and variable sharing) and a model for the application ﬂow. The set of functionalities was designed to eﬃciently address the expected needs of these applications. In this
sense, they can be seen as the core of a generic solution for distributed virtual reality applications. Instead of viewing the application execution on the cluster as a text log, our approach
allows one to view a trace of messages cross checked by expected behavior.
In our work, analysing is viewed as a process of checking if the application follows the
expected behavior. We demonstrate how we formulate this set of functionalities that allowed
us to create GTracer, a tool that checks violations in the application when using libGlass [1],
a library for distributed computing. This paper lists also a few bugs that this approach can
discover automatically for the developers.
The major contributions presented in this paper are:
1374

Graphical high level analysis of communication in distributed VR applications

Guimar˜
aes et al.

• Functional behavior models for distributed virtual reality applications;
• A tool that checks if software follows the expected functional behavior model;
• Developers gain a better understanding of the application behavior through a high-level
view (graphical interface);
• Working with high-level data is easier and the user can instantly see what is wrong;
• Developers can easily verify the application states over its execution; and
• Valuable tool for teaching distributed computing.
This paper proceeds as follows. In section 2, we present related works. Section 3 shows the
requirements of distributed virtual reality applications. Section 4 details the functional behavior
models, GTracer and some examples of analysis. Finally, section 5 contains the conclusions of
this paper.

2

Related Work

Analysis of distributed applications is more diﬃcult than of sequential programs, as they are
more complex, generate larger amounts of data and suﬀer from other problems such as race
conditions and deadlocks [11]. The analysis process should not interfere with the coding of
these applications.
Some tools do not require any change, collecting data using native system resources, such
as the operating system or monitoring the network traﬃc with sniﬀers. In spite of being satisfactory for some cases, it is not robust enough to capture details of the application execution.
It is desirable also that the performance of the application should not be considerably aﬀected,
which is not always possible. That is a reason why analysis is not always enable in production
builds. There is a large amount of research about post-mortem analysis, including statistical
analyses of resource use [2], correlation of events [4], following component dependencies [7], and
veriﬁcation of causal paths [13].
Figure 2 is a graph that relates the size of the system versus the developer eﬀort to use
the tool. Systems range from a single node to a massive scale Internet application, while
developer eﬀort ranges from manual debugging to an automatic tool. Using commands such
as printf or debuggers such as gdb [13] and gprof [9] require a larger eﬀort by the developer.
MaceMC [10] and VeriSoft [8] are tools for Model Veriﬁcation that check for speciﬁc properties,
but require implementation in the code. Pinpoint [6] focuses on identifying component errors,
using concepts of probability to detect anomalies in a log of error events, instead of analysing full
paths. Magpie [5] is an example of tool that does not require any changes to the application
under analysis, but requires the development of a speciﬁc program written by an expert to
track information through the causal path. Project 5, WAP5 and Pip also use causal path
technique [13]. Of course we have automated tests to check if software behaves as expected, but
while they do point out errors, they have limited usefulness to debug the cause of these errors.
This paper presents GTracer, a tool that analyses the messages passing among processes
running on a cluster, matching messages against expected behaviors. This allows the developer
to easily notice and check possible problems such as errors in the synchronization of shared
data, and deadlocks. This tool does not aim to replace traditional debuggers, but help the
development of distributed applications, particularly in virtual reality, which are restricted to
at most a few dozen nodes. It also helps to debug and validate the main library itself, libGlass.
1375

Graphical high level analysis of communication in distributed VR applications

Guimar˜
aes et al.

Figure 2: Size of the system versus the developer eﬀort to use the tool (adapted from [13])

GTracer does not require any change to the application code, because libGlass has a debug
mode that generates logs.

3

Requirements of Distributed Virtual Reality Applications

A 3D immersive and interactive application running in a cluster aims to render multiple views
of the same visual data set at real time. Each process usually has access to the entire data set
(3D models and textures), then independently determines how much of the data set is visible
given its allocated viewing frustum, and renders just that part. These applications have a
tendency to be created in a master/slave setup because it is easier to program and the number
of nodes is low enough to scale.
In order to maintain synchronicity and coherence over the data, datalock and framelock
are commonly used for developing of distributed virtual reality applications. According to [12]
and colleagues, datalock maintains data coherence among processes on a distributed system.
In distributed virtual reality applications all images associated to the same frame must render
the same position on every process. Framelock, also called swaplock, ensures the coherence in
scenes. Thus, every process is able to render at the same time of the others.
The classical approach to write a distributed virtual reality application is using a library for
generic distributed computing, and then implement high-level functionality on top of the lowlevel primitives available. The advantages of using high-level primitives over low-level primitives
are that they are easier to understand and use, and often more portable. The most used low
level solutions are BSD sockets and MPI. It is common to use libraries with high-level primitives
such as libGlass, which is tailored for distributed virtual reality applications. These primitives
are easier to understand and use.
1376

Graphical high level analysis of communication in distributed VR applications

4

Guimar˜
aes et al.

Functional Behavior Models

LibGlass can generate a log of all packets sent and received by the process. Each message is
connected to a primitive and is logged into a ﬁle. We propose to log the following parameters
of each message: process identiﬁcation, primitive identiﬁcation, source process, target process,
data modiﬁed (barrier name, variable shared name and value, or event name and value queue),
and timestamp. GTracer allows to ﬁnd errors in the implementation, both of the main library
itself and its applications. Figure 3 depicts the main interface of GTracer, which has buttons
for reading log ﬁles, run log analysis, visualize log, and ﬁlter messages. Tabs organize the
visual presentation of messages transmitted by each process in separate or by all processes
together. Since all messages have a unique identiﬁer and timestamp it is possible to organize
them chronologically, even without a synchronized global clock. To run an analysis the user
opens the logs and then clicks on the run button.

Figure 3: GTracer interface
An important characteristic of GTracer is that developers do not write any additional code,
they only have to enable log during compilation and libGlass generates all the low-level code for
exporting the function messages. This makes the tool easier to use. The main idea of GTracer is
to check whether underlying messages are working as speciﬁed in the model. More speciﬁcally,
GTracer extracts the commands of message passing from the applications and veriﬁes whether
they are working as expected. For example, GTracer can extract the behavior expected from a
synchronization command based on message source and target. All messages are presented in
an ordered sequence that helps the developer to understand the application behavior. These
ordered messages can help the developer in ﬁnding, for example, which process is being a
bottleneck, and on which node it is running.
We designed a functional model for applications that can be used for an analyzer tool. In
addition, this model could serve as a common ground for design libraries for distributed virtual
reality applications, in order to enhance the developer’s cognition over the developing. For this
purpose, we specify behavior expected for each functionality, primitives, and other functional
needs, trying to mitigate potential issues related to software.
1377

Graphical high level analysis of communication in distributed VR applications

4.1

Guimar˜
aes et al.

Synchronization barriers

A barrier is a point at which the application pauses until all of its processes have reached it.
Barriers are linear algorithms [3] and have two phases, arrival and release. A process enters
a barrier and is frozen until all processes have arrived at the barrier. Then processes move
to release phase and are released. An application can have diﬀerent synchronization points
and barriers in the code. The same barrier can be used in more than one process. Barriers
are used in our model for distributed virtual reality applications to implement datalock and
framelock. GTracer helps to verify that barriers are synchronizing as expected. More than that,
synchronization barriers are an easy way to deadlock a program: all it takes is that one process
calls a barrier and another call some other barrier. This is a problem especially when not all
processes start to compute together: late starters will most likely deadlock if nothing is done,
since there are no guarantees that when they call their ﬁrst barrier, the other processes will do
that too. libGlass provides certain deadlock protections, and GTracer helps the developer to
identify deadlocks.
Figure 4(a) shows a sequence diagram that describes the linear behaviour for barriers as
it was implemented on libGlass, and its two phases. During arrival phase the master process
receives the sync primitive from all N client processes, registering that they are stopping at
the barrier. After getting sync from all processes the release phase is started, when the master
process sends a ”sync” primitive back to all processes.
GTracer analyses the log, veriﬁes if barriers do the expected behavior (deﬁned by libGlass)
and emits a warning if they do not. Extra information such as the list of barriers declared in
each process is also available. Figure 4(b) shows unexpected behavior: in this case, process
1 registered only barrier B1, however the server sent a primitive to release barrier B2, which
would indicate an issue on libGlass, since it controls the barriers on every process.

(a)

(b)

Figure 4: (a) Linear model for barrier synchrony as implemented by libGlass (b) GTracer: slave
process received the barrier release, but does not own the barrier

4.2

Shared variables

Distributed virtual reality applications share variables that must be synchronized during the
execution. Camera position (that is, the apex of the frustrum) is a common example. These
variables are a form of shared variable — the user speciﬁes when they should be updated
globally, and when the local variables should be synchronized with the global value. Processes
can have diﬀerent sets of shared variables. The same shared variable can be used in more than
one process. The explicit synchrony call (usually combined with a barrier) locks the application
1378

Graphical high level analysis of communication in distributed VR applications

Guimar˜
aes et al.

temporarily and leads to performance loss, but is necessary to ensure datalock and swaplock.
Developers must determine which variables will be shared and synchronized.
In a server-client model, for example, a process sends a new variable value (sendUpdate)
to a main process (send update phase), and other processes make use of the updated value
(getUpdate) to receive it (get update phase) – Figure 5(a). Each library has its own algorithm
to decide which value will be the current. For example, libGlass assumes the value received
from the lowest process id number.
Figure 5(b) shows an analysis with a ﬁlter to display only messages relating to shared
variables. When checking the messages, GTracer detected that the current value is 15. The
correct value was sent to process 1, but the wrong value (17) was sent to process 2. This is a
situation that the library altered the variable value incorrectly and therefore has a bug. Besides
checking the expected behavior, GTracer helps to identify the exact moment and which process
altered the values. The developer can also see which variables were declared by each process.

(a)

(b)

Figure 5: (a) Model of synchronous shared variables implemented by libGlass (b) GTracer:
inconsistent value sent to process 2

4.3

Asynchronous events

They are basically a queue, or FIFO (ﬁrst-in, ﬁrst-out), of values. They are quite useful
for propagating asynchronous changes or events in a distributed virtual reality application.
There are plenty of them, like input events. The GTracer helps to verify how these events are
propagated and treated. Usually, in a server-client communication, a process sends an event to
a main process, who spreads the event to the other processes as soon as possible. A process
can have diﬀerent event variables.
Figure 6(a) shows the model of asynchronous events implemented by libGlass. The processes
uses the primitive sendEnqueue to add a new value in the global queue (Enqueue phase). After
receive a new event, the master propagates it to all processes that declared interest in the event
(Propagate phase). The events are added in a local FIFO when they arrive. The processes use
the primitive unQueue to request the ﬁrst value of the global queue.
Figure 6(b) depicts the analysis made by GTracer of the propagation of asynchronous events,
1379

Graphical high level analysis of communication in distributed VR applications

Guimar˜
aes et al.

leading to the veriﬁcation of an inconsistency between the value received by the server (event
with value 5) and the propagated value (7). The tool also shows events registered by each
process and when they were sent and received.

(a)

(b)

Figure 6: (a) Model of asynchronous events implemented by libGlass (b) Analysis by GTracer
of the propagation of asynchronous events

4.4

Alias

One of the major problems of multiprojection environments is how to assign each process to
render a diﬀerent view frustrum. For example, in a multiprojection system with three diﬀerent
processes we need to render the front, left and right views, respectively. Aliases are function
or variable with diﬀerent value on each process, allowing to associate each process with their
rendering view function. In the example given, the same code runs on all processes and calls
the function set view(), which handles the frustrum. This function sets the camera, and calls
the aliased version to set the correct view. Setup is usually made by the master process (the
ﬁrst one to connect) at initialization. A process executes the primitive associating a process
to a function (Association phase) and Call to execute the associated function (Call phase) –
Figure 7(a).
Figure 7(b) shows the analysis by GTracer of alias usage, which detected that the function
”left” was called instead of ”front” by process 1. The aliases are shown so the user can see their
values at each moment.

4.5

Process management

Processes management is one of the diﬃculties in working with distributed systems. This led us
to add some primitives to handle needs such as closing all running processes. The primitive that
does that is killAll. When the main process receives this primitive it broadcasts the message to
all other processes, and they are ﬁnished by themselves. (Figure 8(a)).
Figure 8(b) depicts an example of analysis performed by GTracer. It shows how the server
sent the shutdown primitive without having received a trigger for application shutdown (killall).
1380

Graphical high level analysis of communication in distributed VR applications

(a)

Guimar˜
aes et al.

(b)

Figure 7: (a) Function association model (b) Analysis of the association model made by GTracer

(a)

(b)

Figure 8: (a) Model for application shutdown (b) Server sent the kill command without receiving
a trigger

5

Conclusions

Analysis of distributed applications can be complex and diﬃcult. Some tools require more
involvement of the developer and a larger eﬀort, since they need modiﬁcations in the application
source code to insert control points, veriﬁcation or adding speciﬁc calls. On the other hand,
some tools have features so the programmer does not have to modify or insert code manually
in the application.
Distributed applications are more complex because there are multiple processes running in
separate machines. While libraries exist to help development, tools to debug are not always
easy to use. Much work remains to be done in the area of debugging of distributed virtual
reality applications, as the huge amount of information overwhelms the developer. LibGlass,
a library for distributed computing, can create a message log, allowing analysis of all traﬃc.
GTracer is a tool to extract these messages, analyse their contents and check their validity.
Finally, it generates a bug report that provides detailed diagnostic information.
1381

Graphical high level analysis of communication in distributed VR applications

Guimar˜
aes et al.

Graphic time lines are a practical way to understand application traﬃc and states. With
static analysis of the logs it helps the detection of invalid behavior. This helps both the development of libGlass itself and any applications that use it. It is also extremely helpful for
pedagogical purposes, as students can see and understand all message traﬃc and relate to what
it happening in the application.

6

Acknowledgments

Funda¸c˜
ao de Amparo a` Pesquisa do Estado de S˜
ao Paulo(FAPESP), CAPES, and Open University of Brazil (UAB/UNIFESP) are acknowledged for ﬁnancial support.

References
[1] libglass – the transparent solution for distributed computing, 2015.
[2] Marcos K. Aguilera, Jeﬀrey C. Mogul, Janet L. Wiener, Patrick Reynolds, and Athicha Muthitacharoen. Performance debugging for distributed systems of black boxes. In Proceedings of the
Nineteenth ACM Symposium on Operating Systems Principles, SOSP ’03, pages 74–89, New York,
NY, USA, 2003. ACM.
[3] Norbert S Arenstorf and Harry F Jordan. Comparing barrier algorithms. Parallel Computing,
12(2):157 – 170, 1989.
[4] Paul Barham, Austin Donnelly, Rebecca Isaacs, and Richard Mortier. Using magpie for request
extraction and workload modelling. In Proceedings of the 6th Conference on Symposium on Opearting Systems Design & Implementation - Volume 6, OSDI’04, pages 18–18, Berkeley, CA, USA,
2004. USENIX Association.
[5] Paul Barham, Rebecca Isaacs, Richard Mortier, and Dushyanth Narayanan. Magpie: Online
modelling and performance-aware systems. In Proceedings of the 9th Conference on Hot Topics
in Operating Systems - Volume 9, HOTOS’03, pages 15–15, Berkeley, CA, USA, 2003. USENIX
Association.
[6] Mike Y. Chen, Emre Kiciman, Eugene Fratkin, Armando Fox, and Eric Brewer. Pinpoint: Problem determination in large, dynamic internet services. In Proceedings of the 2002 International
Conference on Dependable Systems and Networks, DSN ’02, pages 595–604, Washington, DC,
USA, 2002. IEEE Computer Society.
[7] Rodrigo Fonseca, George Porter, Randy H. Katz, Scott Shenker, and Ion Stoica. X-trace: A
pervasive network tracing framework. In Proceedings of the 4th USENIX Conference on Networked
Systems Design &#38; Implementation, NSDI’07, pages 20–20, Berkeley, CA, USA, 2007. USENIX
Association.
[8] Patrice Godefroid. Software model checking: The verisoft approach. Form. Methods Syst. Des.,
26(2):77–101, March 2005.
[9] Susan L. Graham, Peter B. Kessler, and Marshall K. Mckusick. Gprof: A call graph execution
proﬁler. SIGPLAN Not., 17(6):120–126, June 1982.
[10] Charles Edwin Killian, James W. Anderson, Ryan Braud, Ranjit Jhala, and Amin M. Vahdat.
Mace: Language support for building distributed systems. SIGPLAN Not., 42(6):179–188, June
2007.
[11] Dieter KranzlM¨
uller. Event Graph Analysis for Debugging Massively Parallel Programs. PhD
thesis, Institut f¨
ur Technische Informatik und Telematik, 2000.
[12] B. Raﬃn, L. Soares, Tao Ni, R. Ball, G.S. Schmidt, M.A. Livingston, O.G. Staadt, and R. May.
Pc clusters for virtual reality. In Virtual Reality Conference, 2006, pages 215–222, March 2006.
[13] Patrick Alexander Reynolds. Using Causal Paths to Improve Performance and Correctness in
Distributed Systems. PhD thesis, Durham, NC, USA, 2006. AAI3265281.

1382

