An Efficient and Reflective Event Filtering for
Context-Awareness in Ubiquitous Computing
Kyu Bong Cho1, Sung Keun Song1, Hee Yong Youn1, and Gyung Leen Park2
1

School of Information and Communications Engineering
Sungkyunkwan University, Suwon, Korea
mongbong@skku.edu, skk103@devg.org, youn@ece.skku.ac.kr
2
Department of Computer Science and Statistics
Cheju National University, Cheju, Korea
gpark@cheju.ac.kr

Abstract. In the ubiquitous computing system fast and reliable event delivery is
important to properly adapt to the dynamically changing environment. Such requirement could be satisfied by message-based middleware based on the publish/subscribe model. In this paper we propose a scheme that allows reflective
filtering through the reasoning process. The objective of the reflective filtering
is to prevent waste in the space of the event queue of the event channel due to
useless events and reduce the network load. Performance evaluation reveals that
the proposed scheme displays a significant improvement over the existing event
service, Java messaging service (JMS) and omnievent service, in terms of event
delivery time.
Keywords: Context-oriented filtering, event service, message-oriented middleware, publish/subscribe, reflective filtering.

1 Introduction
The ubiquitous computing for any-time, any-where, any-network, any-device, and
any-service is becoming a core paradigm of the modern information-oriented society.
In such environment the post PC-type computers provide various services useful to
human by using real-time context information of the objects [1]. Here reliable and fast
communication must be guaranteed to adapt to the dynamically changing environment and receive the context data of the environment including the event data [2,3].
In the ubiquitous environment the basic mechanisms employed for event transmission are remote procedure call (RPC), remote method invocation (RMI), and message- oriented middleware (MOM), etc. The RPC offers an abstraction of high level,
but it does not guarantee reliability in addition to static binding and limited scalability. To solve the problem while dealing with the heterogeneous environment of various programming languages, hardware platforms, and operating systems, the MOM
based on message queuing was developed. Later, the distributed object computing
paradigm providing more abstraction and transparency of users appeared. There
also exist peer-to-peer, publish/subscribe, and hierarchical channel model as the messaging scheme for event transmission. The common characteristics of various MOM
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 587 – 594, 2006.
© Springer-Verlag Berlin Heidelberg 2006

588

K.B. Cho et al.

products and the publish/subscribe model based on message queuing and filtering are
presented in [4,5].
The publish/subscribe model among various messaging models is a representative
event transmission model used widely. The current popular event-based transmission
services are JMS (Java Message Service) [7], CORBA event service [9], and CORBA
Notification service [6]. They employ filtering to filter unwanted events out. However, the overhead of filtering in the Notification service has been recognized to be
very high because filtering occurs in several proxies. Note that the JMS needs JVM,
which is an additional overhead of Java-based system with respect to the speed of
event delivery. The JMS handles message filtering in the server like CORBA Notification service, and thus the overhead in the processing and managing the messages in
the queue is high [8].
In this paper we propose a reflective filtering approach where the filtering criteria
of the client are sent to the supplier through a reasoning process. The approach can
enhance the capability of event service using the algorithm of highly efficient and
scalable reflective message filtering [9]. It implements context-awareness for handling the requests generated from the environment the users belong to. The objective
of the proposed reflective filtering is to prevent the waste in the space of the event
queue of the event channel due to useless events and reduce the network load. Extensive experimentation reveals that the proposed approach allows consistently higher
performance than the JMS and CORBA event service in terms of event delivery time
for various numbers of servers and data sizes. Also, it reveals that the performance
significantly varies according to where the filtering is applied.
The rest of the paper is organized as follows. Section 2 presents the related work
and Section 3 introduces the proposed event filtering approach. The proposed approach is evaluated in Section 4, and conclusion is made in Section 5.

2 The Related Work
2.1 Classification of Filtering Algorithms
Several algorithms for distributed filtering have been proposed. Evaluation and comparison of the algorithms are difficult due to the diversity of the approaches. What is needed
is a concise classification of the approaches employed for distributed filtering [10].
Location of Filtering: Filtering can be performed at the subscribers (flooding of
events) or providers (flooding of profiles), or at certain broker nodes. Flooding of
events results in high network traffic, but requires small memory space. Flooding of
profiles, however, results in the opposite: less network traffic but large memory space.
Filtering at fixed brokers allows the advantage of filtering control according to available resources, but has the disadvantage of high load at the filtering brokers in terms
of network traffic and memory usage.
Spreading of Filtering Complexity: The filtering complexity can be spread over
several brokers by exclusive filtering at certain brokers or by distributed filtering.
Exclusive filtering can be implemented with some control overhead. A disadvantage

An Efficient and Reflective Event Filtering

589

of exclusive filtering is the danger of multiple notifications for a single event because
the event notification may be forwarded to several neighbor brokers.
Communication with the Subscribers: In direct communication only the filtering
broker and the subscriber are involved in the communication. A disadvantage here is
that either a connectionless protocol has to be used (resulting in unreliable communications) or new connections have to be established over the time. When forwarding
messages via the network of brokers, only the neighbor brokers and local clients
communicate directly. Local clients are the publishers and subscribers that are directly connected to a broker. A drawback here is high memory usage. When using
brokers as the proxies, the brokers act as the subscribers to their neighbor nodes and
thus the number of subscribers each broker node has to deal with in limited. Exploiting the coverage between the profiles of several subscribers is possible and beneficial
in several aspects. A disadvantage, though, is the necessity of post-filtering in the
notification to the client subscribers.
2.2 Java Message Service (JMS)
The Java Message Service is a Java API that allows the applications to create, send,
receive, and read the messages. A JMS provider is a messaging system that implements the JMS interfaces and provides administrative and controlling features. The
two kinds of administered objects are destinations and connection factories. The technology underlying these objects is likely to be very different from one implementation
of the JMS API to another. Therefore, management of the objects belonging to different administrative tasks varies from provider to provider. The JMS clients access the
objects through portable interfaces, and therefore a client application can be run with
little or no change on more than one implementation of the JMS API. Figure 1 illustrates the way the components in the JMS interact with each other.

Fig. 1. The JMS API architecture

The JMS message is composed by a header, properties, and body, and it is typed
based on the data contained in the message body. The class hierarchy of the JMS
message is organized such that the Message interface, which is the root interface for
all the JMS message types, defines the header fields, property facility, and associated
accessor methods. A JMS message selector is used by a JMS client to specify which
messages it is interested in. It is based on the values contained in the message header,
which includes standard header fields as well as optional fields that are added via

590

K.B. Cho et al.

application, standard, or provider-specific properties. As noted earlier, a message
selector cannot refer to the value of the message body. A message selector is a Boolean expression that, when it evaluates to be true, results in the matched message to be
passed to the client. It is defined as a string, and its syntax is based on a subset of the
SQL92 conditional syntax. Creating a selector involves the generation of a string that
conforms to the defined syntax [7].

3 The Proposed Event Filtering
The proposed event filtering is a part of a new reflective context-oriented event service embedded in the CALM (Component-based Autonomic Layered Middleware)
research project [11]. We first briefly introduce the CALM.
3.1 CALM
The CALM adopts the reflective paradigm and agent system to construct a flexible
and efficient middleware platform for ubiquitous computing. It also provides useful
development tools. It consists of two internal layers, one external layer, and various
tools forming an efficient agent-based platform. The internal layer consists of the
communication platform layer and agent platform layer. The communication platform
layer is constructed such that it can provide various distributed services based on the
context and situation using appropriate communication protocols and devices in wired
and wireless environment. The agent platform layer is composed using the components so that it can maximize the efficiency of the service, adapt itself to the environment, and accommodate the advantage of diverse agent systems. The external layer is
composed by self-growing engine and ontology-based situation-awareness engine
required for providing intelligent services.

Fig. 2. The structure of the proposed reflective filtering

An Efficient and Reflective Event Filtering

591

3.2 Reflective Filtering
The objective of reflective filtering is to prevent waste in the space of the event queue
of the event channel due to useless events and reduce the network load. The concept
of reflective filtering process is shown in Figure 2. The consumers decide the filtering
criteria with which each consumer declares what kinds of context information are
desired to be received through reasoning. The adapter of the consumers connects it to
the event channel and sends its own filtering criteria to relevant proxysuppliers. The
filtering monitor of the event channel monitors and analyzes the filtering criteria of
the consumers and sends the result of analysis to the adapters of the suppliers. The
filtering monitor is normally in sleeping mode and activates itself upon receiving a
new filtering criterion from a consumer or a new consumer connects to the event
channel. The adapter of the suppliers receives the filtering criteria from the filtering
monitor of the event channel. The adapter of the suppliers filters out the events that
the application has not indicated to receive from the event channel.
3.3 Reliable Communication
The proposed event service employs event numbering and event queues to support
reliable communication. The format of an event of the proposed event service is as
follows;

The event channel and adapter have an event queue, respectively. Reliable communi-cation is provided as follows; the adapter of the supplier stores the events at its
own event queue before sending them to the event channel. Thereafter, it sends the
events to the event channel. It waits for an acknowledgment from the event channel
after sending the events. If the adapter receives an ACK from the event channel and
the event queue is full, it overwrites the Acked events with new events until the
events are Acked. In case that the adapter receives a retransmission request from the
event channel, it resends the events stored in the event queue.
Efficient message filtering needs an effective design of header and payload of the
message. Message is the most important part in message filtering and the message
format is shown in Figure 3. The events communicate with each other using the messages carrying the data of applications, and different components of the adapter are
used in message transmission. The components compose an alive system.

592

K.B. Cho et al.

Fig. 3. The message format

A message object is divided into two parts, message header and message data itself (payload). The messages have several different types decided based on the payload of the message. The payload is StreamMessage, MapMessage object, or takes a
standardized TextMessage, ObjectMessage and BytesMessage type. A message carries data, and it is also used as a simple means of notification of the events occur-ing
in the system.
The message header supplies the MetaData describing who created the message,
when it was created, and how long it is valid. Also, a message can include the attribute that can be defined and set by the client. The subscribers can filter the message
through this attribute and select the messages according to the value of the specification header and payload. The message attribute is put in the additional header that can
be attached to the message, and it allows the application developer to include more
information in a message.

4 Performance Evaluation
The performance of the proposed approach is carried out concerning message delivery
time, and it is compared with the omnievent service and JMS. The test platform includes twelve identical Windows XP-based PCs, each with one 2.1-Ghz CPU and

2000

JMS(nofiltering)
Proposed(nofiltering)
JMS(filtering)
Proposed(filtering)

Event delivery time(sec)

1800
1600
1400
1200
1000
800
600
400
200
0
256B 512B 1K

2K

4K

8K 16K 32K 64K 128K 256K 512K 1M

2M

Event size

Fig. 4. The comparisons of event delivery time for one-to-one connection

An Efficient and Reflective Event Filtering

593

512-Mbyte RAM. In case of the proposed reflective filtering and omnievent service
ten PCs host suppliers, one PC hosts the naming server, and one PC hosts the consumer. In case of the JMS ten PCs are senders (suppliers), which connect to their local
server and a PC is their subscriber (consumer). Figure 5 and 6 show the average event
delivery time of 1000 test runs in case of one-to-one and many-to-one connection,
respectively.
In Figure 4 each supplier generates 2000 context information while the event size
is increased up to 2Mb. Notice from the figure that filtering allows faster delivery
than the case of nonfiltering for both the systems. Also, notice that the proposed event
service displays always smaller delivery time while the improvement gets more
significant as the event size grows. Figure 5 shows the filtering efficiency when the
number of suppliers is increased. Again, the proposed scheme shows a significant
improvement because filtering occurs in the JMS server while the suppliers transmit
data without considering the consumer’s preference. Note that the proposed event
service applies filtering in the supplier. We obtain the same result with the omnievent
service, which is not included here due to space limit.

JMS(nofiltering)
Proposed(nofiltering)
JMS(filtering)
Proposed(filtering)

70

Event delivery time(sec)

60
50
40
30
20
10
0
1

2

3

4

5

6

7

8

9

10

Number of suppliers

Fig. 5. The comparisons of event delivery time for many-to-one connection

5 Conclusion and Future Work
In the pervasive computing the importance of event filtering is very high since a large
number of events are generated in the environment. Various distributed filtering algorithms have been proposed for the publish/subscribe based systems, but systematic
analysis and comparison of them is difficult. In this paper we have proposed a context-oriented event filtering approach supporting reliable communica-tion and reflective filtering through the adapters. The proposed event filtering is implemented in the
CALM developed by the authors. It also reduces the network load of CORBAbased event servers which is an important requirement for large scale ubiquitous

594

K.B. Cho et al.

environment. Extensive computer simulation reveals that the proposed approach allows consistently higher performance than other approaches in terms of event delivery
time for various number of servers and data sizes. We will further investigate the
filtering approaches dynamically adaptable for various operational conditions and
requirements.

References
1. Ha, W. Ubiquitous IT revolution and the third space Korean Elictrinic, 2002.
2. Karen, H. and Jadwiga, I. A Software Engineering Framework for Context-Aware
Pervasive computing. Proceedings of the Second IEEE Annual Conference on Pervasive
Computing and Communications (PERCOM’04), pp. 77.
3. Schantz, R. E. and Schmidt, D. C. (2001) Middle-ware for Distributed Systems: Evolving
the Common Structure for Network-centric Application Encyclopedia of Software Engineering, New York, Wiley & Sons pp. 801-813.
4. Astley, M., Sturman, D. and Agha, G. Customizable middleware for modular distributed
software. Commun ACM 44, 5 (May 2001), pp. 99–107.
5. Coulson, G. What is reflective middleware? IEEE Distribute System Online 2, 8 (Dec.
2001); see computer.org/dsonline/middleware/RMarticle1.htm.
6. Object Mgmt. Group Notification Service Specification OMG Doc. Telecom/99-07-01 ed.,
July 1999.
7. http://java.sun.com/products/jms/tutorial/
8. Lan, G. et al. An Efficient, Scalable Content-Based Messaging System. Proceedings of the
seventh IEEE International Enterprise Distributed Object Computing conference
(EDOC’03), pp. 278–285.
9. Object Management Group Event Service Specifi cation Version 1.2, October 2004.
10. Sven, B. and Annnika, H. Classification and Analysis of Distributed Event Filtering Algorithms. Proceedings of Cooperative Information Systems (CoopIS) 2004 International
Conference, pp. 301–318.
11. Youn, H.Y. et Al. CALM: An Intelligent Agent-based Middleware Architecture for Community Computing, Proceedings of the third Workshop on Software Technologies for Future Embedded & Ubiquitous Systems (SEUS 2006).

