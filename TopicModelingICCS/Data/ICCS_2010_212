Procedia Computer
Science
00 (2010)
1–8 1 (2012) 117–124
Procedia Computer
Science

www.elsevier.com/locate/procedia

International Conference on Computattional Science, ICCS 2010

Dimensional recursion for multivariate adaptive integration
Elise de Doncker and Karlis Kaugars
Department of Computer Science, Western Michigan University, Kalamazoo, MI 48008, United States

Abstract
We consider multivariate integrals which can be expressed as iterated integrals over product regions. The iteration
over the dimensions is applied recursively for a numerical evaluation. We evaluate a scheme for setting the tolerated
error in the interface between the integration levels and address the eﬃciency of the resulting method with respect to
time and space requirements.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Dimensional recursion, automatic iterated integration, relative error interface, discriminal sensory
process, biometrics.

1. Introduction
The user of an integration algorithm or software generally wants to approximate an integral to within a prescribed
accuracy, which may be absolute (εa ) or relative (εr ) or a combination of both. The goal is then to obtain a numerical
approximation Q f to an integral
f (x) dx

If =

(1)

D

and an (absolute) error estimate E f, in order to satisfy an accuracy requirement where the actual error E f = Q f − I f =
ρ I f does not exceed the estimated error E f (in absolute value); and the latter does not exceed the prescribed tolerated
error, i.e.,
(2)
| Q f − I f | ≤ E f ≤ max { εa , εr | I f | }.

A basic integral approximation to (1) can be calculated by using an integration rule (quadrature or cubature rule,
for univariate and multivariate integrals, respectively), which is a weighted sum of function values. An error estimate
can be obtained by comparing two or more rule approximations.
We use basic rule approximations designed to be of a polynomial degree of accuracy, i.e., exact for polynomials up
to (and not beyond) the corresponding degree. Thus, depending on the integrand behavior, a basic rule approximation
by itself will not generally provide suﬃcient accuracy so that we will need a more elaborate strategy to increase the
integrand sampling, such as an adaptive integration which attempts to handle problem areas by region partitioning. The
latter will clearly suﬀer from a dimensionality curse since partitioning in a higher-dimensional space is not eﬀective.
However, by invoking an integration method recursively across dimensions, it may be possible to retain beneﬁts of
Email address: {elise.dedoncker,karlis.kaugars}@wmich.edu (Elise de Doncker and Karlis Kaugars)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.014

118

E. de Doncker,
/ Procedia
Computer
Science
E.K.
de Kaugars
Doncker and
K. Kaugars
/ 00 (2010)
1–8 1 (2012) 117–124

2

its lower-dimensional application. This leads to recursive implementations of numerical iterated integration, for an
integral over a product region D = D1 × . . . × D which can be written in the form
dx (1) . . .

If =
D1

dx ( ) f (x (1) , . . . , x ( ) ).

(3)

D

We have applied numerical iterated integration with adaptive integration strategies (on the levels j = 1, . . . , )
for the computation of loop integrals in high energy physics, e.g., in [1, 2, 3, 4, 5], and for other mathematical
modeling problems in [6], where the focus was on the applications and the interface problem was not addressed.
The technique is implemented recursively using the lower-dimensional code across successive groups of dimensions.
Iterated integration was implemented with non-adaptive (lattice) methods in [7].
An interface problem [8] arises between the applications on successive levels, particularly with respect to setting
the requested accuracy from each level to the next lower level. The problem was addressed for double integration
using non-speciﬁc one-dimensional codes and with respect to absolute error in [9]. An extension of the latter for
integrals of the form (3) was given in [10]. In this paper we evaluate a scheme applied particularly for a two-level
recursion.
The two-level dimensional recursion is directly applicable to the mathematical modeling of diﬀerences in taste
perceptions or discriminal sensory processes. Since Thurstone [11] deﬁned a discriminal process in 1927 as a “process
by which the organism identiﬁes, distinguishes or reacts to stimuli”, a large body of work has emerged in this area,
much of which in collaborations with the food and beverage industries. Discriminal sensory probabilities are naturally
expressed as integrals over Rn × Cn where Cn is an n-dimensional sphere or a portion thereof. We apply an automatic
numerical strategy with an adaptive integration on both of the n-variate integration levels.
The error tolerance interface is outlined in Section 2. We describe a two-dimensional experimental implementation
in Section 3 and give results with respect to accuracy and memory use. Section 5 describes the N-dimensional
application to a probability integral occurring in biometrical modeling of diﬀerences in sensory perceptions.
2. Error Tolerance Interface
We will ﬁrst outline the error tolerance interface for double integration, as it is essentially the same for a more general
two-level iterated integration.
Let us denote the integral
I f = I = I1 =
where g(x) =
b2
a2

b2
a2

b1

dx

a1

b2

dy f (x, y) =

a2

b1

dx g(x)

a1

dy f (x, y). On the inner (lower) level we obtain, for a given x, an approximation Q2 = Q2 (x) ≈

dy f (x, y) = g(x) with actual absolute error E2 = E2 (x) , so that Q2 (x) =
level, the integral approximation is Q = Q1 ≈ I = I1 and we have
Q1 =

b1
a1

dx Q2 (x) − E1

b1

=
a1

=
so that
|Q − I| ≤

b1
a1

dx [

I−

b2
a2

b1
a1

b2
a2

dy f (x, y) − E2 (x). On the outer (top)

dy f (x, y) − E2 (x) ] − E1

dx E2 (x) − E1 ,

(1)
dx | E2 (x) | + | E1 | ≤ ε(2)
a | b2 − a2 | + εa

(4)

(1)
(2)
(1)
assuming that | E2 (x) | ≤ ε(2)
a (for each x) and | E 1 | ≤ εa where εa and εa are the tolerated errors on the inner and
outer level, respectively. Thus in order to achieve overall absolute accuracy εa it suﬃces to require that
(1)
ε(2)
a | b2 − a2 | + εa ≤ εa .

E. de Doncker, K.E.Kaugars
/ Procedia
Computer
(2012) 117–124
de Doncker
and K. Kaugars
/ 00Science
(2010) 1
1–8

119
3

If we furthermore produce associated absolute error estimates E(i)
a (x), i = 1, 2 with absolute values in between the
actual and the tolerated errors, then
(1)
(1)
| Q − I | ≤ | b2 − a2 | max | E(i)
≤ ε(2)
a (x) | + Ea
a | b2 − a2 | + εa .
x

In practice, this needs to be implemented with guarding factors. Estimated errors are generally conservative but may
also be under-estimated especially in diﬃcult cases. It is furthermore recommended to evaluate the inner integral
more accurately than the outer integral, as errors on the evaluation points may be perceived as roundoﬀ error by the
outer integration procedure.
An extension of (4) for the general integral (3) follows as
(2)
| Q − I | ≤ ε(1)
a + | D1 | εa + . . . +

−1

| D j | ε(l)
a

j=1

(5)

where | D j | is the volume of region D j .
A modiﬁcation of (4) to account for relative error can be given in the form
|Q − I| ≤

b1
a1

dx |

2 (x) |

b2

|

a2

dy f (x, y) | +

1

≤ ε(2)
r

b1
a1

dx |

b2
a2

dy f (x, y) | + ε(1)
r

(6)

where 1 and 2 (x) represent outer and inner actual relative errors. The bounds in (6) are thus expressed in terms of
absolute value functions.
3. Experimental Code
In order to test and evaluate iterated integration and error estimation, we have developed a C language implementation
of (N times) iterated one-dimensional integration. Subsequently we refer to the experimental code as IQ2D. The
integration program uses the Gauss-Kronrod 15-point integration rule pair in both directions and fully supports 2D
iterated integration. The code implements the adaptive integration meta-algorithm of Figure 3 at each level of the
iterated integration.
The algorithm is implemented recursively, with the diﬀerence
among dimensions appearing in the methods used to evaluate
Evaluate initial region and update results
a region. For the ﬁnal (inner) dimension of integration, region
Initialize priority queue to be empty
while (evaluation limit not reached and estimated
evaluation consists of evaluating the integrand at multiple points
error too large)
and constructing a result and error estimate using the traditional
Retrieve region from priority queue
Gauss-Kronrod integration points. At each other level of integraSplit region
tion, region evaluation consists of creating one subregion along
Evaluate new subregions and update results
the next dimension for each of the Gauss-Kronrod evaluation points
Insert new subregions into priority queue
and then making a recursive call to evaluate that region. For example, using a 15-point rule with a two dimensional function re- Figure 1: Adaptive integration meta-algorithm
sults in 15 recursive calls at the top level with each call having a
ﬁxed x1 (= x) coordinate. Each of these calls then constructs a priority queue which evaluates the function at 15 points
in the x2 (= y) dimension with the common x1 coordinate.
The estimated error parameter is computed locally along each dimension while the evaluation limit is treated as a
global constant value. Termination of a recursive call occurs when the local error condition is met or the global evaluation limit is reached. Each of the upper dimensions terminates when either the current recursive call has exceeded
the evaluation limit or when the estimated error along the dimension is smaller than the requested accuracy.
4. Two-dimensional Tests and Memory Use
4.1. Numerical results
As a simple two-dimensional example let us consider an integral from the paper on (the adaptive Monte Carlo

120

E. de Doncker,
/ Procedia
Computer
Science
E.K.
de Kaugars
Doncker and
K. Kaugars
/ 00 (2010)
1–8 1 (2012) 117–124
p
0
1
2
3
4
5
6
7
8
9
10
11
12

IQ2D Variable ε(2)
a
Abs. err.
# Eval.
0.00e+00
465
0.00e+00
20535
2.42e-13
86145
6.17e-12
179985
5.16e-11
314985
9.09e-10
400335
8.42e-10
460365
1.90e-04
456255
1.53e-03
1011015
1.80e+00
100000005
1.80e+00
100000005
1.80e+00
100000005
1.80e+00
100000005

IQ2D Fixed ε(2)
a
Abs. err.
# Eval.
0.00e+00
465
0.00e+00
23025
2.53e-13
96765
6.30e-12
205755
5.20e-11
366255
9.08e-10
468255
8.44e-10
555255
4.91e-11
648345
6.90e-10
3449505
1.80e+00
100000005
1.80e+00
100000005
1.80e+00
100000005
1.80e+00
100000005

Dqage × Dqage
Abs. err.
# Eval.
1.11e-16
225
0.00e+00
21255
2.40e-13
93135
3.49e-13
208035
1.58e-13
388125
4.49e-13
561585
1.69e-09
527205
1.42e-10
686745
3.94e-10
902145
3.20e-08
106965
4.32e-09
1964385
1.87e-01
58651365
3.14e+00
50895

4

Dcuhre
Abs. err.
# Eval.
1.24e-12
3843
2.06e-12
144165
5.96e-12
1998675
1.37e-12
21040551
8.04e-12
99999963
4.40e-07
99999963
3.38e-02
99999963
1.99e+00
99999963
3.04e+00
99999963
3.13e+00
99999963
3.14e+00
99999963
3.14e+00
99999963
3.14e+00
99999963

Table 1: Comparison of function evaluations for Dice function

integrator) Dice [12], which has the behavior of a Feynman loop integral in high energy physics [1, 2, 3, 4, 5],
1

1

dx

I(α) f =
0

dy
0

1
2αy
1
= 2 arctan − α log(1 + 2 ).
α
(x + y − 1)2 + α2
α

(7)

The integrand function f (x, y) is depicted over the unit
square in Figure 2 for α = 10−1 and has a ridge of height
2(1 − x)/α along y = 1 − x. The function parameter is
α = 10−p where p = 1, 2, . . . , 10, which causes an increasingly diﬃcult anomaly as the ridge becomes higher and
steeper.
Table 1 lists the actual error and the number of integrand evaluation points used. The maximum number of
integrand evaluations was set to 100 million. The absolute
error tolerance for the outer integration was set at 1 × 10−8
while the error tolerance of the inner integration was initially set at 2 × 10−9 . For the ﬁxed error criterion case
in IQ2D, the inner error tolerance was held constant. For
the variable criterion the tolerance for computing the inner integrals (i.e., the function evaluations for the outer
integration) was scaled with respect to the length of the
outer interval 2 × 10−9 /(outer interval length). Changing
Figure 2: Plot of integrand function f of (7) for α = 0.1
the inner tolerance to reﬂect the size of the outer region
results in signiﬁcantly fewer integrand evaluations for most cases. On the other hand, a conservative error estimate
can have beneﬁts, as in the cases of p = 7 and p = 8. The higher tolerance on the inner integral results in a failed
integration when a variable inner tolerance is used. The very high and steep peak is missed by the evaluation points,
and the routine underestimates the actual error and terminates prematurely.
For comparison, Table 1 gives results of an iterated integration where (a modiﬁcation of) the Quadpack onedimensional integration program Dqage [13] is used in both coordinate directions. The 1D integration procedure
adheres to the adaptive algorithm of Figure 3 and terminates when the requested accuracy is achieved or the maximum
allowed number of integrand evaluations is reached. The function peak was partially missed for p = 7 resulting in
a failed integration. The maximum number of evaluations (9,975) for the outer integration was reached for p = 11.
The function peak was missed at p = 12 where the procedure stopped prematurely. Thus the Dqage application is
somewhat better at dealing with higher peaks but uses more integrand evaluations than IQ2D for smaller values of p.
Table 1 furthermore lists results obtained with the multivariate adaptive integration package Dcuhre [14]. The
routine breaks down at α = 10−5 where it runs up to the maximum allowed number of function evaluations. The

E. de Doncker, K.E.Kaugars
/ Procedia
Computer
(2012) 117–124
de Doncker
and K. Kaugars
/ 00Science
(2010) 1
1–8

p
0
1
2
3
4
5
6
7
8
9

Variable ε(2)
a
Rgns D0 Rgns D1
1
3
9
15
19
31
29
43
39
57
41
67
39
79
33
95
99
131
1
6650795

Fixed ε(2)
a
Rgns D0 Rgns D1
1
3
9
15
19
31
29
47
39
57
41
69
39
83
39
95
43
149
1
6650795

121
5

Est. 2D Rgns.
7
335
1407
2967
5240
6681
7812
8497
34312
1538461.62

Table 2: Region evaluations by dimension Dice function

accuracy deteriorates signiﬁcantly from this point on as α decreases. We use the integration rule of degree 7 provided by Dcuhre which uses a fairly low number of points, as is recommended for problems which require intensive
partitioning of the integration region.
4.2. Memory Use
The use of iterated integration can also signiﬁcantly reduce the memory usage of adaptive integration by subdividing
the global priority queue into a series of local priority queues. Table 2 lists the number of regions used while generating
the results listed in Table 1. The D0 regions column lists the total number of regions evaluated along the ﬁrst dimension
of integration. These regions remain in memory for the duration of the computation. The D1 regions are kept in a
local priority queue, and the value reported in Table 2 is the maximum number of regions active at any time along D1 .
In the worst case, the total memory footprint of the algorithm is O(RD0 + RD1 ), i.e. the regions stored at the ﬁrst level
of iteration and the maximum region storage required at the second level along with some constant number of local
variables, parameters, etc.
For the simple integral produced by p = 0, there is no advantage to iterated integration, and there may be a
disadvantage - if the integral could be solved with the function evaluation points generated by crossing two 15-point
integration rules, only a single region would be needed as opposed to the four required for iterated integration. When
iterated integration fails - e.g. the case of p = 9, the ﬁrst D0 iteration point results in a D1 integration which fails to
meet the error criterion, the iterated method results in a local priority queue which is just as large as the global queue
needed by a multi-dimensional integration routine.
In non-trivial cases where iterated integration succeeds, there is a large memory utilization advantage to the
method. The inner integrands meet the error condition within a few hundred regions - indeed for most values p < 8
the inner priority queue size is limited to fewer than 100 regions, while the global priority queue is limited to fewer
than 50 regions.
A direct comparison of the memory utilization with a N-Dimensional integration routine is diﬃcult due to the
diﬀerences in the number of function evaluations used per region as well as the region subdivision patterns from
diﬀerent algorithms. The Dcuhre routine uses 65 function evaluations per region (with its key parameter set to 4).
Assuming for the moment that the method would succeed, we can take the number of function evaluations used during
iterated integration and estimate the number of regions needed for a 2D integration routine - these values are listed
in the estimated 2D regions column in Table 2 above. The iterated integration routine outperforms the potential 2D
integrator’s memory footprint by a substantial amount, ranging from a high of 65% of the memory needed for p = 1
to a low of 1% for p = 8.
The amount of memory used to represent a region depends on the speciﬁc implementation of the priority queue
– using dynamic allocation requires two heap pointers while a ﬁxed size implementation can implement the priority
queue in an array. The dynamic allocation model has signiﬁcant beneﬁts in the case of iterated integration, allowing
the D2 integration routines to limit the amount of memory used. In either case, the region structure needs to store at
least ﬁve doubles for a 2D integration (the ﬁxed D0 point, the minimum and maximum of the integration region in D1 ,

122

E. de Doncker,
/ Procedia
Computer
Science
E.K.
de Kaugars
Doncker and
K. Kaugars
/ 00 (2010)
1–8 1 (2012) 117–124

6

the result and the estimated error). In this case (to allow for the maximum 100 million integrand evaluations), a space
of more than 19 million doubles has to be assigned for the region storage and manipulation in Dcuhre.
For its interval storage by means of an ordered list structure, the Dqage routine uses four double arrays and one
integer array each of which has the length of the total number of intervals generated. A set of these arrays is passed
in the call to invoke the next level in the interface. Thus, only sets of these are needed for an level interface.
In this case, to allow n = 333 intervals in each coordinate direction for double integration ( = 2), the array space
required in memory at any one time will not exceed that of 4.5n × ≈ 3000 doubles. Using this space, 333 intervals
are generated in 332 bisections and 30 points are used per bisection. Thus the total number of points allowed per
direction is 15 + 332 ∗ 30 = 9, 975. If an equal amount of work is done in the two coordinate directions, then the total
number of points that can be generated in the two-dimensional region is 9, 9752 = 99, 500, 625.
5. Discriminal Sensory Probability
5.1. Deﬁnition and Notations
In this section we consider an application of two-level dimensional recursive integration. We studied evaluation
techniques for discriminal taste testing in [15, 16] for the duo-trio and triangular models.
In the test trials, two sets of objects are considered, S x and Sy , where S x is referred to as the standard set. The
stimulus objects S x1 and S x2 are selected from S x and the object S y is taken from Sy .
In the duo-trio method, S x1 is identiﬁed to the subject as being from the standard set. The other two objects
are then presented in random order, and the subject is asked which of those is more similar to the standard. In the
triangular method, the three objects are given to the subject at random and the trial consists of identifying the less
similar object.
The stimuli S x1 , S x2 and S y correspond the n-vectors of sensory values x1 , x2 and y, respectively, where the xvectors are drawn from an n-variate normal distribution with mean μ x and variance-covariance matrix V x , and y from
an independent n-variate normal distribution with mean μy and variance-covariance matrix Vy .
Thus for the duo-trio method, the probability P of a correct response is given by
P = Pr ( || u || < || v || ),

(8)

with u = x1 − x2 and v = x1 − y, which can be expressed by the N = 2n-dimensional integral
P=
where
f (u, v) =

Rn

f (u, v) du dv

(9)

Cn

exp[− 12 (z − μ)τ V −1 (z − μ)]
,
(2π)n |V|1/2

Vx
x
0
, the combined variance-covariance matrix V = 2V
with z = uv , μ = μx −μ
V x V x +Vy and |V| = det(V). The integration
y
region Cn for u is the sphere || u || < || v || centered at the origin and of radius || v ||.
The probability of a correct response for the triangular method is is given by a similar integral. In this paper we
will further focus on the duo-trio probability.

5.2. Representations
The integral (9) over Rn × Cn can be interpreted as an iterated integral where the inner integral over Cn yields the
integrand function of the outer integral over Rn ,
P=

Rn

du f (u, v) .

dv

By using spherical coordinates for the inner integration this is
√2
2
P=

Rn

v1 +...+vn

dv [

0

π

dr

0

(10)

Cn

dϕ1 . . .

0

2π

π

dϕn−2

0

˜ ],
dϕn−1 f˜(r, ϕ, v) J(ϕ)

(11)

E. de Doncker, K.E.Kaugars
/ Procedia
Computer
(2012) 117–124
de Doncker
and K. Kaugars
/ 00Science
(2010) 1
1–8

2n

2n-dimensional integration
Result
#Eval.
Time

Iterated integration
Result
#Eval.
Time

4
6
8
10

.50036
.50030
.50515
.50585∗

.49986
.49824
.50067
.50156∗

9945
304129
5981865
99999515

8.0e-03
2.44e-01
7.03e+00
16.23e+02

26775
201903
1765465
46377707

123
7

1.20e-02
1.08e-01
1.40e+00
57.28e+00

Table 3: Numerical results for duo-trio probability

˜ is the Jacobian of the transformation.
where the transformed function is f˜(r, ϕ, v) = f (u(r, ϕ), v) and J(ϕ)
In view of the near symmetry for small || μ || it may be advantageous to also use spherical coordinates for the
integration over Rn (as mentioned in [16]). This gives
P=

∞
0

π

dR
√2

0

v1 +...+v2n

[
0

2π

π

dϑ1 . . .

0

dϑn−2

0

π

dr
0

dϕ1 . . .

dϑn−1
2π

π
0

dϕn−2

0

ˆ ϑ) ],
dϕn−1 fˆ(r, ϕ, R, ϑ) J(ϕ,

(12)

ˆ ϑ) as the new Jacobian. Whereas transformations to obtain constant limits were necessary in [15, 16]
with J(ϕ,
(to allow integration over a hyper-rectangular region), that is not needed in (11) and (12) since the inner limits are
determined by the evaluation points of the outer integration.
5.3. N-dimensional Numerical Results
We evaluate the probability P according to (10) as a two-level dimensional-recursive integral over Rn × Cn . The
integration variables are transformed to spherical coordinates as in (12) for the inner and outer integration. The outer
integration is performed over a sphere of radius truncated to 8 in view of the exponential decay of the integrand. For
the matrix V in the exponent of the integrand function we use V = 2II 2II where I is the identity matrix.
Table 3 gives results obtained for μ = 0 and n = 2, 3, 4, 5 with the iterated integration on the right and with Dcuhre
(for the corresponding 2n-dimensional integrals) on the left. The exact integral for μ = 0 is 0.5 (cf. [15]). For both
methods, the result, number of integrand evaluations and the time (obtained with the GNU function etime) are listed.
The computations were run on a system with 2.26 quad core Xeon processor with an 8MB cache (model E5520) and
containing 12GB of ram.
The absolute error tolerance strategy is implemented according to (5), i.e.,
(2)
| Q − I | ≤ ε(1)
a + | D1 | εa

(13)

with | D1 | as the volume of the outer integration region.
As was the case with the double integration, the dimensional recursion is performed with far less memory use
than the corresponding 2n-dimensional integration. For Dcuhre, the user speciﬁes a maximum number of function
evaluations and must supply the necessary work space in a (double precision) work array that is passed to the (Fortran)
routine via the integration call from the main program. For the tests on the left of Table 3, the maximum number of
function evaluations was set to 10 million for dimensions 2n = 4 and 6 and the work array needs to be of length
923,094 for a 4-dimensional integration, and of length 496,914 for 6 dimensions. The maximum number of function
evaluations was set to 100 million for dimensions 8 and 10, requiring a work array of length 2,398,098 and 948,462,
respectively.
In comparison, with the maximum number of function evaluations set to 10,000 on the inner and outer levels of the
iterated integration, the array lengths needed are 1922, 1298, 942 and 704 for dimensions 4, 6, 8 and 10, respectively.
Recall that only about twice that space is needed for the region storage on the two recursion levels.
For this experiment, the iterated strategy takes less function evaluations for the larger values of n and takes less
time than the standard 2n-dimensional method. For the 10-dimensional integral (n = 5), the iterated method reaches
the maximum number of evaluations (10,000) in the outer integration and the standard integration reaches the overall
100 million maximum (indicated with ∗ ).

124

E. de Doncker,
/ Procedia
Computer
Science
E.K.
de Kaugars
Doncker and
K. Kaugars
/ 00 (2010)
1–8 1 (2012) 117–124

8

6. Conclusions and Future Work
Developing a recursive set of routines for iterated integration has allowed us to begin experimenting with iterated
integration and error tolerance and estimation code in a structured fashion without rewriting code for each integrand
problem. It has led to new insights about the computation of error tolerance and estimates and will form the experimental platform for our future work.
This code base will be the basis for continued work towards a generalized n-dimensionsal iterated integration
codebase. The use of the C language allows us to more naturally implement recursive routines and incorporate our
previous work with parallel codes, as well as explore emerging parallel technologies such as Cuda.
Both the IQ2D and Dqage x Dqage can underestimate the errors for particularly diﬃcult integrals, and correcting
this situation will be a primary focus of our continuing work. We will be evaluating error estimation techniques in the
underlying rule implementation and exploring alternative techniques of error estimation such as result convergence.
In addition to the current work utilizing absolute error tolerance, the code still needs updates to include relative
error tolerances. At present, the IQ2D code only implements the Gauss-Kronrod rule sets, and including iterated
integration of several diﬀerent multi-dimensional rules is a promising research direction.
References
[1] E. de Doncker, Y. Shimizu, J. Fujimoto, F. Yuasa, Computation of loop integrals using extrapolation, Computer Physics Communications 159
(2004) 145–156.
[2] E. de Doncker, Y. Shimizu, J. Fujimoto, F. Yuasa, L. Cucos, J. Van Voorst, Loop integration results using numerical extrapolation for a
non-scalar integral, Nuclear Instuments and Methods in Physics Research Section A 539 (2004) 269–273, hep-ph/0405098.
[3] E. de Doncker, On a numerical evaluation of loop integrals, in: LoopFest II, Brookhaven National Laboratory, 2003,
http://quark.phy.bnl.gov/loopfest2/doncker.pdf.
[4] E. de Doncker, S. Li, J. Fujimoto, Y. Shimizu, F. Yuasa, Regularization and extrapolation methods for infrared divergent loop integrals,
Springer Lecture Notes in Computer Science (LNCS) 3514 (2005) 165–171.
[5] E. de Doncker, S. Li, Y. Shimizu, J. Fujimoto, F. Yuasa, Numerical computation of a non-planar two-loop vertex diagram, in: LoopFest V,
Stanford Linear Accelerator Center, 2006, http://www-conf.slac.stanford.edu/loopfestv/proc/present/DEDONCKER.pdf.
[6] E. de Doncker, K. Kaugars, S. Li, H. Li, Y. Shimizu, J. Fujimoto, F. Yuasa, T. Ishikawa, N. Hamaguchi, Interdisciplinary applications of
mathematical modeling, in: 2nd International Conference on Interaction Sciences, 2009, aCM Proceedings ISBN: 978-1-60558-710-3.
[7] I. Robinson, T. Li, plrint5d: A ﬁve-dimensional automatic cubature routine designed for a multi-core platform, to appear (2010).
[8] F. N. Fritsch, D. K. Kahaner, J. N. Lyness, Double integration using one-dimensional adaptive quadrature routines: A software interface
problem, ACM TOMS 7 (1) (1981) 46–75.
[9] D. Kahaner, C. Moler, S. Nash, Numerical Methods and Software, Prentice Hall, 1988.
[10] E. de Doncker, S. Li, Error distribution for iterated integrals, World Scientiﬁc and Engineering Academy and Society Transactions on Mathematics 6 (1) (2007) 86–90.
[11] L. L. Thurstone, A law of comparative judgement, Psychological Review 34 (1927) 273–286.
[12] K. Tobimatsu, S. Kawabata, Multi-dimensional integration routine DICE, Tech. Rep. 85, Kogakuin University (1998).
¨
[13] R. Piessens, E. de Doncker, C. W. Uberhuber,
D. K. Kahaner, QUADPACK, A Subroutine Package for Automatic Integration, Springer Series
in Computational Mathematics, Springer-Verlag, 1983.
[14] J. Berntsen, T. O. Espelid, A. Genz, Algorithm 698: DCUHRE-an adaptive multidimensional integration routine for a vector of integrals,
ACM Trans. Math. Softw. 17 (1991) 452–456.
[15] K. Mullen, D. M. Ennis, E. de Doncker, J. A. Kapenga, Multivariate models for the triangular and duo-trio methods, Biometrics 44 (1988)
1169–1175.
[16] J. A. Kapenga, E. de Doncker, K. Mullen, D. M. Ennis, The integration of the multivariate normal density function for the triangular method,
in: P. Keast, G. Fairweather (Eds.), Numerical Integration; Recent Developments, Software and Applications, NATO ASI Series, Reidel,
1987, pp. 321–328.

