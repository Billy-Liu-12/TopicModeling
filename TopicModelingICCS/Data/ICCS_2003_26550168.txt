Quasar: A New Tool for Concurrent Ada
Programs Analysis
Sami Evangelista, Claude Kaiser, Jean-Fran¸cois Pradat-Peyre, and
Pierre Rousseau
CEDRIC – CNAM Paris
292, rue St Martin, 75003 Paris
{evangeli,kaiser,peyre,lrousseau}@cnam.fr

Abstract. Concurrency introduces a high degree of combinatory which
may be the source of subtle mistakes. We present a new tool, Quasar,
which is based on ASIS and which uses fully the concept of patterns. The
analysis of a concurrent Ada program by our tool proceeds in four steps:
automatic extraction of the concurrent part of the program; translation
of the simpliﬁed program into a formal model using predeﬁned patterns
that are combined by substitution and merging constructors; analysis of
the model both by structural techniques and model-checking techniques;
reporting deadlock or starvation results. We demonstrate the usefulness
of Quasar by analyzing several variations of a non trivial concurrent
program.

1

Introduction

Concurrency introduces at the same time design facilities and reliability problems. Indeed, the interleaving of tasks execution leads to a high degree of combinatory and may be the source of subtle mistakes that are diﬃcult to detect by
simple simulations or human reasoning. Furthermore, a little modiﬁcation in a
part of the code can produce a major transformation of the application behavior. Classically encountered problems are deadlock, starvation or more generally
race conditions on shared resources.
An automatic and easy to use tool is crucial for eﬃciently validating concurrent software and gaining in conﬁdence with the code. Indeed such a tool will
act as a very clever front-end compiler which aim is not to check syntax nor
classical language semantic but to verify the concurrent semantic of the application with respect to safety or liveness properties. We have built such a tool,
named Quasar. It is based on the implementation of the ASIS interface for the
GNAT Ada 95 compiler and uses fully the concept of patterns. The analysis of
a concurrent Ada program by Quasar proceeds in four steps:
1. Automatic extraction of the relevant part of the program with respect to
a given property; the present implementation is focused on the analyzis of
global properties like deadlock or starvation. This step is denoted as program
slicing [HS99], [DH99], [CDH+ 00] and reduces greatly the size of formal
models produced in the second step;
J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 168–181, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Quasar: A New Tool for Concurrent Ada Programs Analysis

169

2. Translation of the simpliﬁed program into a formal model. We have chosen
colored Petri nets [Jen91], [GPPch] as target formalism because their analysis
may combine several techniques that are supported by experienced tools. For
this translation we use the concept of pattern and Quasar produces nets with
two basic constructors: substitution (that substitutes an abstract Petri net
by a concrete one) and composition (that merges two diﬀerent nets into a
unique one).
3. Analysis of the model by combining structural techniques (like Petri nets
reductions [Ber85], [HPP03], [PPP00]) and ﬁnite state veriﬁcation methods
(like temporal logic formula veriﬁcation); in the current version of Quasar
we use Maria [Mak02] as model checker.
4. Construction of a report; when the target property is not veriﬁed, the report indicates the sequence of actions that invalidates the property. For the
moment, the produced report makes reference to the “sliced” program.
The originality of Quasar lies in the genericity of the analysis (a large part of
Quasar is independent of the source language) and in the extensive use of recent
structural Petri net analysis techniques (like extended agglomerations [HPP03]).
In the next section we present some patterns and show how they are used for
producing colored Petri nets from Ada code source. Then we explain the use of
the ASIS interface to perform the ﬁrst two phases of analysis. We demonstrate
in Sect. 4 the usefulness of our tool Quasar by analyzing a non trivial concurrent
program proposed by L. Pautet in an advanced computing science course at
ENST Paris. The paper ends brieﬂy reviewing similar works and pointing out
future actions.

2

Translation Patterns

The translation of a concurrent program to a high-level Petri net is similar to
the compilation of a program in assembler. In both cases, the aim is to map the
semantic of a program from a particular formalism towards another formalism.
High-level Petri nets (with inhibitor arcs) and Ada have the same expressiveness.
It is therefore possible to translate any Ada program to a Petri net; the translation does not raise any theoretical problem. However, we must keep in mind that
concurrency may introduce combinatorial explosion. As our aim is to perform
exhaustive analysis, the generated nets mustn’t create useless combinatory.
The translation proceeds in two steps: ﬁrst, each element of the program
(statements, expressions, and declarations) is translated in a predeﬁned Petri
net pattern. Then all these patterns are combined by merging or by substitution
to produce the ﬁnal Petri net. For instance, Fig. 1 depicts three patterns used to
respectively translate a call to an entry E, the accept statement of a server to an
entry E and the translation of a loop statement without an iteration scheme. One
can remark that place END_LOOP of this model exists but is not systematically
relied to a transition: this will be the case only if the internal loop statement
contains an exit statement.

170

S. Evangelista et al.

E.CALL

<idS, ...>

<idC, ...>

<id, ...>
LOOP

<idS, idC, ...>
E.CALL
<idS, idC, ...> <idS, ...>

WAITING

<idC, ...>

<idC, ...>

<id, ...>
MT(Il)

MT(IE)

E.RETURN
<idC, ...>
Server.E(...);

<idS, ...>
END_LOOP

E.RETURN
<idS, ...>

<id, ...>

accept E do IE; end E;

loop Il; end loop;

Fig. 1. Three patterns

<idS, ...>
<idC, ...>

E.CALL
<idS, idC, ...>
<idS, idC, ...>

<idS, ...>

WAITING
MT(IE)
<idC, ...>

<idC, ...>

<idS, ...>

<idC, ...>
E.RETURN
<idS, ...>

Fig. 2. Merging result

The merging operation consists in producing a Petri net by combining two
Petri nets; this merging is done by the assimilation of places having the same
name in both nets (we impose also that they share the same color domain, and
that naming is an injective application: two diﬀerent objects cannot have the
same name). So places having the same name appear only once in the resulting
net and all arcs of the merged nets take into account this assimilation. For
instance, if in the models given Fig. 1, E denotes the same entry in the two nets
of the left, then the merging of these two nets produces the model described
in Fig. 2. In all these models, internal statements of compound statements are
modeled by abstract transitions (for instance the abstract transition MT(IE) or
MT(Il) in Fig. 1).
The substitution operation replaces an abstract transition by the corresponding concrete model. This operation consists in sticking input and output places
of an abstract transition to the “enter” or to the “quit” transition of the concrete
model (obviously, some constraints apply when performing this operation, especially on the existence of the “enter” and of the “quit” transition). For example,
the substitution of the abstract transition MT(IE) of Fig. 2 by the model on the
right of Fig. 1 in the model of Fig. 2, produces the net depicted on the left of
Fig. 3. This model corresponds to a call of an entry that executes a loop state-

Quasar: A New Tool for Concurrent Ada Programs Analysis

171

<idS, ...>
<idC, ...>

E.CALL
<idS, idC, ...>
<idS, idC, ...>

<id, ...>
<idS, ...>

LOOP

WAITING
<id, ...>

<id, ...>

<idS, ...>

LOOP

E.CALL
<idS, idC, ...>

<idC, ...>
<id, ...>

<idS, idC, ...>

<idS, ...>

WAITING
MT(Il)

MT(IE)

<id, ...>
<idC, ...>

<idC, ...>

<id, ...>
<idC, ...>

<idC, ...>

<idS, ...>

<idC, ...>
E.RETURN

END_LOOP

<idS, ...>

<idC, ...>
<idS, ...>
END_LOOP

<idC, ...>
E.RETURN

<id, ...>
<idS, ...>

Fig. 3. Substitution result

ment. It is also possible to substitute the abstract transition MT(Il) (of Fig. 1)
by the net of Fig. 2. In this case we obtain the net on the right of Fig. 3. This
model corresponds to repetition of the call to the entry E.
As said previously, we must obtain a colored Petri net corresponding precisely
to the analyzed concurrent program; but remember that produced models are
of interest only if they can be analyzed. In particular, we must limit as much as
possible the combinatory explosion. A key point for this limitation appeared in
identiﬁers attribution when translating a task body. Indeed, a task must have a
unique internal identiﬁer; for instance this allows to distinguish responses of a
server to its clients.
Although giving names at run time to task body instances can be modeled
by colored Petri nets, it leads to N ! conﬁgurations when the number of tasks in
the program is N . Thus we have excluded momentarily this Ada construction in
our alpha version of Quasar.

3

Using ASIS

In this section, we describe how we get the information from Ada source code
by using the Ada Semantic Interface Speciﬁcation (ASIS for short) [ISO99].
3.1

A Brief ASIS Description

To implement Quasar, we need to be able to read and analyze a full Ada source
code. To do this, we use the Ada Semantic Interface Speciﬁcation (ASIS). It is an
interface between an Ada environment and any tool requiring information from

172

S. Evangelista et al.

Element Syntax tree node
Iterator
Query

(1 Pre_Op)

(6 Post_Op)

Variable := 1;
Variable : Integer;
Corresponding_Name_Declaration(Variable)
(2 Pre_Op)
Variable
(3 Post_Op)

(5 Post_Op)
1
(4 Pre_Op)

Fig. 4. Navigating in the syntax tree with ASIS

it. To represent the diﬀerent elements of a program, ASIS deﬁnes three main
abstractions: the context, which represents the set of compilation units on which
the ASIS tools can be applied to (i.e., an Ada environment), the compilation
units, which can be considered as the Ada compilation units deﬁned in the Ada
95 RM (Sect. 10), and the element which represent any node of the syntax tree.
An element can be a task body declaration, an integer expression, or any other
component of a program. Element categorization is performed by ASIS functions
like Asis.Elements.Declaration Kind(E) which returns the type of declaration of
E (for instance, a task declaration).
ASIS provides two methods for navigating in the syntax tree. The ﬁrst one
is an iterator which allows to traverse the syntax tree by using the depth-ﬁrst
method. During the traversal of each element, it permits to apply a pre and a
post procedure. This method can be useful to get a list of elements (for example,
the list of task declarations).
The second method consists in a set of queries. These queries give informations about a node of the tree (i.e. an ASIS element). But more than simple
queries, these functions give the possibility to navigate through the syntax tree
by the semantic correspondence between elements. For example, there is a query
delivering the element in which is declared a variable used in an assignment.
Fig. 4 shows the diﬀerent navigation possibilities through a source code provided by ASIS.
3.2

A Speciﬁc Library Based on ASIS

Generating Petri nets from Ada programs requires the lists of all declared items
of each kind (ordinary types, simple tasks, simple protected objects, tasks, protected objects, functions, procedures, entries, variables and constants). Moreover, each collected element requests some particular information for translating
it into its corresponding Petri net part. For instance, the mapping of a procedure
declaration needs its name, its parameters and their type and also the Petri net
corresponding to its statements.

Quasar: A New Tool for Concurrent Ada Programs Analysis

173

Get_For_Bound(Var, Lower, Upper)

Asis.Definitions.Lower_Bound
For I in Type_Range loop
Asis.Statements.For_Loop_Parameter_Specification

1

Asis.Definitions.Integer_Constraint

I in Type_Range

Range 1..10

Asis.Declarations.Specification_Subtype_Definition

Asis.Declarations.Type_Declaration_View

Asis.Definitions.Subtype_Mark
Type_Range

1..10

type Type_Range is Range 1..10;

Asis.Expressions.Corresponding_Name_Declaration

ASIS Queries
Our procedure

Fig. 5. Example of ASIS simpliﬁcation

As a general library, ASIS is not so easy to use and it is sometimes difﬁcult to ﬁnd the right sequence of queries. Moreover, our tool uses often the
same sequences of queries. Therefore each used sequence has been packed in a
unique function. Our tool needs also some speciﬁc queries which are not directly
provided by ASIS. So we have written our own speciﬁc and simpliﬁed library
which provides a well-deﬁned programming interface for Quasar programmers
and which calls the ASIS powerful tools.
For instance, as shown on Fig. 5, our library provides a unique function which
gives the lower and the upper bound of a “for loop” statement.
The information extracted from the source code is useful beyond the generation of the corresponding Petri net. It is also used to withdraw from this source
code all the elements which are not related to the required property, i.e. in the
present implementation, deadlock or starvation. For instance, in the procedure
Log of the package Output (Appendix A), as the Put instruction is considered to
be non blocking, lines 31, 32, 33 and 35 can be suppressed. So, the internal statements of the case block (line 30-34) become empty: they can be suppressed and
then also the loop statement (lines 29-36). After these suppressions, the value
of the global variable Info_Table becomes unused (we obtain this information
with a speciﬁc Asis query). So, all the assignments performed on this variable
(line 27) and also its declaration (line 8) can be withdrawn. The declaration of
the type Info and the parameters I, S, T of the procedure Log become then
unused and can be suppressed. These suppressions lead to the simpliﬁed package
Output_Simple given in Appendix B.
In the same way, delay statements are of no interest when analyzing qualitative properties: we can suppress them without modifying the analyzed program
with respect to the studied property. For instance, in Appendix A, lines 28 and
31 of the procedure diner can be suppressed; these suppressions lead to the
suppression of the variable Max_Tick in the same procedure (line 10) and as a
direct result, the package Random becomes unused.

174

4

S. Evangelista et al.

Quasar in Action

We propose now to show that Quasar can be very useful for validating a concurrent program. We use a concurrent solution to the dining philosophers problem
proposed as an example by L. Pautet in an advanced programming course 1 .
We are interested in this solution because it is not ours, because it makes a
rather complicated and clever use of requeue statements in a protected object
and because it allows to experiment some little variations around the initial
solution.
The dining philosophers problem is a paradigm for resource allocation without pre-emption with race conditions: a philosopher x competes with its two
neighbors for obtaining its two sticks (the one numbered x and the one numbered x+1). Depending on the policy chosen for the sticks allocation, it may be
possible to reach a deadlock (for instance all philosophers have taken one fork) or
to suﬀer from the starvation problem (for instance two philosopher can starve a
common neighbor). It’s very common to reinsert a problem when attempting to
suppress another one. For instance, suppressing starvation may reinsert deadlock
while suppressing deadlock may introduce starvation. Although this paradigm
is easy to express and can be implemented with comparatively short programs,
it leads to very subtle and high combinatory solutions.
The solution that is presented can be classiﬁed as a solution with resources
reservation and is composed of ﬁve modules: the package “types” that declares
basic types, the package “random” that is used for randomizing the time elapsed
by each philosopher in action (thinking, hungry, eating), the package “output”
that provides ﬁne outputs, the package “chop” that deﬁnes the chopsticks management and at last, the procedure “diner” that implements the behavior of the
philosophers and which is the main procedure (it declares 5 philosophers). All
these packages are given in Appendix A. In order to analyze diﬀerent versions, we
modify the boolean expressions assigned to the boolean variable Updating which
is used as a guard (called barriers in Ada95) in the protected object Sticks.
The protected object semantic is the corner stone of the studied solution.
In particular, each philosopher takes sticks one by one: ﬁrst the left, by a call
to the entry Get_Left, then the right one, managed by the entry Get_Right.
It goes from the left to the right by a requeue statement. When the requested
stick is not free, the philosopher requeues to an internal entry (Get_Left_Q or
Get_Right_Q) depending on the needed stick (left or right). After executing the
statements of these internal entries, philosophers are requeued again onto the
corresponding external entry.
All these entries are guarded by a boolean variable named Updating (the
guard is either “Updating” or its negation, “not Updating”). This variable is
updated in three sub-programs of the protected object Sticks: in the entry
Get_Left_Q, in the entry Get_Right_Q and in the procedure Free. The corresponding code is denoted in Appendix A by respectively EXP1, EXP2, and EXP3.
The modiﬁcation of this variable (and then of barriers values) must allow to
1

http://www.infres.enst.fr/˜ pautet/sip/paca/

Quasar: A New Tool for Concurrent Ada Programs Analysis

175

unblock waiting tasks or to block new arrival tasks. As an example of using our
tool, let us ﬁnd possible assignments to EXP1, EXP2, and EXP3 which deﬁne a
correct solution (no deadlock, no starvation). Following the initial solution, let
us use the queue size of the diﬀerent entries. Four symmetric expressions can be
expressed:
A1
A2
A3
A4

::
::
::
::

(
(
(
(

Get
Get
Get
Get

Left
Left
Left
Left

’ Count >
’ Count >
Q ’ Count
Q ’ Count

0)
0)
> 0)
> 0)

or
and
or
and

( Get
( Get
( Get
( Get

R i g h t ’ Count >
R i g h t ’ Count >
Right Q ’ Count
Right Q ’ Count

0)
0)
> 0)
> 0)

If we want to ﬁnd the correct solution(s) without using a tool like Quasar
we have to reason and/or to perform some simulations to gain in conﬁdence
with the kept solutions. If we want to be exhaustive, we have to perform 43 = 64
diﬀerent simulations. Having experimented automatically these simulations, with
diﬀerent action delays, we have observed 3 diﬀerent behaviors: some solutions
completely deadlock, some other ones deadlock partially (some tasks ﬁnish when
others block) and some ﬁnish normally. After several hours of simulations and
thinking we have the insight that at most three solutions may be correct: the
solutions which assign A3 to EXP1 and to EXP3 and which assign either A2, A3 or
A4 to EXP2.
However, using Quasar, only the solution which assigns A3 to EXP1, EXP2 and
EXP3 is proved to be deadlock free (it’s the original solution). The two others
suﬀer from a deadlock that can be explained using execution traces provided by
Quasar. For instance, a part of the trace corresponding to the deadlock of the
solution EXP1 ← A3, EXP2 ← A4, EXP3 ← A3, is given in Appendix C. This trace
shows that deadlock occurs when the queuing policy of the entry Get_Right_Q
is not FIFO: philosopher 0 goes eating and obtains its two sticks; philosopher
4 takes its left fork and is queued in Get_Right_Q queue; philosopher 3 takes
its left fork and is queued in Get_Right_Q queue; then philosopher 0 frees its
sticks; the modiﬁcation of the variable Updating and the egg-shell model implies
that either 3 or 4 will be serviced. If queuing policy is not FIFO, then 3 may be
chosen; A4 is evaluated to False, then Updating is assigned with False, and 3 is
requeued on Get_Right; as its barrier is true, 3 is serviced but it cannot obtain
its right stick and is then requeued to Get_Right_Q; as Updating is now equal
to false, the barrier of Get_Right_Q is closed and 4 cannot be serviced. When
philosopher 2, then 1, then 0 call Get_Left there is a deadlock. This deadlock is
not detected by simulation because this simulation gives a biased view of possible
executions (e.g. a FIFO entry queuing policy).
The correctness of the original solution relies on the egg-shell model of protected objects but is not depending on the queuing policy implemented by the
run time and Quasar proves that it is deadlock free. Some others reliable solutions are discussed in [BKPP97] and [KPP97] in which a simple solution, using
entry families, is discussed.

176

5

S. Evangelista et al.

Related Works

Analyzing concurrent programs with formal methods is a recurrent challenge.
Ada83 code analysis with Petri net techniques and particular with structural
techniques like invariants or net reductions has been done by Murata and its
team [MSS89], [TSM90], [NM94]. The use of ordinary Petri nets seems to us a
major drawback of these works since it’s very diﬃcult with this formalism to express complex programming patterns. In the same perspective, [BW99], [GSX99]
or [BWB+ 00] are intentions papers for Ada95 while in Vienna, J. Blieberger and
its team use symbolic data ﬂow analysis framework for detecting deadlocks in
Ada programs with tasks [BBS00]. With a quite diﬀerent approach, some very
interesting work is being done at Bell Laboratories by G.J Holzmann’s team
[HS99], [Hol00b] [Hol00a], [GS02]. In particular this team developped the tool
FeaVer [HS00], based on the Spin model-checker, that allows the veriﬁcation of
distributed applications written in ANSI-C source code. In parallel, P. Godefroid (also at Bell Laboratories) has developped a tool named VeriSoft [God97],
[GHJ98].
At Kansas State University the Bandera project [CDH+ 00] aims to verify
multi-threaded Java source code with model cheking techniques, using an adaptation of the Spin tool.
From our experience, all these tools suﬀer from a intermediate language
(Promela or internal description language) less mature and studied than Petri
nets. We claim that using colored Petri nets allows us to limit the combinatory
explosion by combinig more easily and more eﬃciently structural techniques
(that work directly on the model) and eﬃcient techniques based on the underlying state graph exploration.
We have built a prototype tool [BPP99] based on colored Petri nets. However
it was too monolithic and we were not able to choose amongst several possible
construction patterns when producing formal models from source code. Furthermore, as we had deﬁned our own grammar, and our own parser for an Ada
subset, we had very important diﬃculties to augment the part of the language
that we can analyze. The present Quasar is based on this experience and it uses
also new results of Petri nets structural analysis.

6

Conclusion

In this paper we have presented the underlying ideas of Quasar, a new tool for
concurrent Ada programs analysis, and an example of its use. We are experimenting it extensively in order to stabilize the implementation of our algorithms,
and to get feedback of its users. The next steps have several purposes:
– extending the graphical interface and easing its use by practitioners;
– extending the scope of analyzable Ada constructions, such as tagged types
or dynamic tasking creation;
– extending the analysis capacity using stochastic or temporal Petri nets.

Quasar: A New Tool for Concurrent Ada Programs Analysis

177

All material used in this paper, as well as an alpha version of Quasar and
related documentations, are available on http://quasar.cnam.fr.

References
[BBS00]

J. Blieberger, B. Burgstaller, and B. Scholz. Symbolic Data Flow Analysis for Detecting Deadlocks in Ada Tasking Programs. In Proc. of the
Ada-Europe International Conference on Reliable Software Technologies,
Potsdam, Germany, 2000.
[Ber85]
G. Berthelot. Checking properties of nets using transformations. In
G. Rozenberg, editor, Advances in Petri nets, volume No. 222 of LNCS.
Springer-Verlag, 1985.
[BKPP97] K. Barkaoui, C. Kaiser, and J.F. Pradat-Peyre. Petri nets based proofs of
Ada95 solution for preference control. In Proc.of the Asia Paciﬁc Software
Engineering Conference (APSEC) and International Computer Science
Conference (ICSC), Hong-Kong, 1997.
[BPP99]
E. Bruneton and J.F. Pradat-Peyre. Automatic veriﬁcation of concurrent
ada programs. In Michael Gonzalez Harbour and Juan A. de la Puente,
editors, Reliable Software Technologies-Ada-Europe’99, number 1622 in
LNCS, pages 146–157. Springer-Verlag, 1999.
[BW99]
A. Burns and A. J. Wellings. How to verify concurrent Ada programs: the
application of model checking. ACM SIGADA Ada Letters, 19(2):78–83,
1999.
[BWB+ 00] A. Burns, A. J. Wellings, F. Burns, A. M. Koelmans, M. Koutny, A. Romanovsky, and A. Yakovlev. Towards modelling and veriﬁcation of concurrent ada programs using petri nets. In Pezz´e, M. and Shatz, M., editors,
DAIMI PB: Workshop Proceedings Software Engineering and Petri Nets,
pages 115–134, 2000.
[CDH+ 00] James C. Corbett, Matthew B. Dwyer, John Hatcliﬀ, Shawn Laubach,
Corina S. Pasareanu, Robby, and Hongjun Zheng. Bandera: extracting
ﬁnite-state models from java source code. In International Conference on
Software Engineering, pages 439–448, 2000.
[DH99]
Matthew B. Dwyer and John Hatcliﬀ. Slicing software for model construction. In Partial Evaluation and Semantic-Based Program Manipulation,
pages 105–118, 1999.
[GHJ98]
Patrice Godefroid, Robert S. Hanmer, and Lalita Jategaonkar Jagadeesan.
Model checking without a model: An analysis of the heart-beat monitor of
a telephone switch using verisoft. In International Symposium on Software
Testing and Analysis, pages 124–133, 1998.
[God97]
Patrice Godefroid. Verisoft: A tool for the automatic analysis of concurrent
reactive software. In Computer Aided Veriﬁcation, pages 476–479, 1997.
[GPPch]
C. Girault and J.F. Pradat-Peyre. Les r´eseaux de Petri de haut-niveau.
In M. Diaz, editor, Les r´eseaux de Petri: Mod`eles Fondamentaux, number
ISBN: 2-7462-0250-6, chapter 7, pages 223–254. Hermes, 2001 (French).
[GS02]
G.J.Holzmann and Margaret H. Smith. An automated veriﬁcation method
for distributed systems software based on model extraction. IEEE Trans.
on Software Engineering, 28(4):364–377, April 2002.

178

S. Evangelista et al.

[GSX99]

[Hol00a]
[Hol00b]

[HPP03]
[HS99]

[HS00]

[ISO99]
[Jen91]

[KPP97]

[Mak02]
[MSS89]

[NM94]

[PPP00]

[TSM90]

Ravi K. Gedela, Sol M. Shatz, and Haiping Xu. Formal modeling of
synchronization methods for concurrent objects in ada 95. In Proceedings
of the 1999 annual ACM SIGAda international conference on Ada, pages
211–220. ACM Press, 1999.
G.J. Holzmann. Logic veriﬁcation of ansi-c code with spin. pages 131–147.
Springer Verlag / LNCS 1885, Sep. 2000.
G.J. Holzmann. Software veriﬁcation at bell labs: one line of development.
Bell Labs Technical Journal, 5(1):35–45, Jan-March 2000. Bell Labs 75th
year anniversary issue.
S. Haddad and J.F. Pradat-Peyre. New powerfull Petri nets reductions.
Technical report, CEDRIC, CNAM, Paris, 2003.
G.J. Holzmann and Margaret H. Smith. Software model checking - extracting veriﬁcation models from source code. pages 481–497, Kluwer
Academic Publ., Oct. 1999. also in: Software Testing, Veriﬁcation and
Reliability, Vol. 11, No. 2, June 2001, pp. 65–79.
G.J. Holzmann and Margaret H. Smith. Automating software feature
veriﬁcation. Bell Labs Technical Journal, 5(2):72–87, April-June 2000.
Issue on Software Complexity.
ISO/IEC 15291. Ada Semantic Interface Speciﬁcation (ASIS), 1999.
K. Jensen. Coloured Petri nets: A hight level language for system design
and analysis. In Jensen and Rozenberg, editors, High-level Petri Nets,
Theory and Application, pages 44–119. Springer-Verlag, 1991.
C. Kaiser and J.F. Pradat-Peyre. Comparing the reliability provided by
tasks or protected objects for implementing a resource allocation service: a
case study. In TriAda, St Louis, Missouri, november 1997. ACM SIGAda.
M. Makela. Maria user’s guide. Technical report, Helsinki Univ. of Technology, Finland, 2002.
T. Murata, B. Shenker, and S.M. Shatz. Detection of Ada static deadlocks
using Petri nets invariants. IEEE Transactions on Software Engineering,
Vol. 15(No. 3):314–326, March 1989.
M. Notomi and T. Murata. Hierarchical reachability graph of bounded
Petri nets for concurrent-software analysis. IEEE Transactions on Software Engineering, Vol. 20(No. 5):325–336, May 1994.
D. Poitrenaud and J.F. Pradat-Peyre. Pre and post-agglomerations for
LTL model checking. In M. Nielsen and D Simpson, editors, High-level
Petri Nets, Theory and Application, number 1825 in LNCS, pages 387–
408. Springer-Verlag, 2000.
S. Tu, S.M. Shatz, and T. Murata. Applying Petri nets reduction to
support Ada-tasking deadlock detection. In Proceedings of the 10th IEEE
Int. Conf. on Distributed Computing Systems, pages 96–102, Paris, France,
June 1990.

Quasar: A New Tool for Concurrent Ada Programs Analysis

A
1
2
3
4
5

1
2
3

1
2
3
4

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33

1
2
3
4
5
6
7
8
9
10
11
12
13
14

179

Packages of the Analysed Program

package Types i s
N P h i l o s o p h e r s : constant : = 5 ;
type I d i s mod N P h i l o s o p h e r s ;
type S t a t u s i s ( E a t i n g , T h i n k i n g , Hungry ) ;
end Types ;
package Random i s
function Value return N a t u r a l ;
end Random ;
with Types ; use Types ;
package Output i s
procedure Log ( I : I d ; S : S t a t u s ; T : N a t u r a l ) ;
end Output ;
with Ada . Text IO , Ada . I n t e g e r T e x t I O ; use Ada . Text IO , Ada . I n t e g e r T e x t I O ;
package body Output i s
type I n f o i s record
S : Status ;
T : Natural ;
end record ;
I n f o T a b l e : array ( I d ) o f I n f o : = ( others => ( Hungry , 0 ) ) ;
protected Mutex i s
entry P ;
procedure V ;
private
F r e e : B o o l e a n : = True ;
end Mutex ;
protected body Mutex i s
entry P when F r e e i s begin F r e e : = F a l s e ; end P ;
procedure V i s begin F r e e : = True ; end V ;
end Mutex ;
procedure Log ( I : I d ; S : S t a t u s ; T : N a t u r a l ) i s
begin
Info Table ( I ) : = ( S , T) ;
Mutex . P ;
f o r P in I n f o T a b l e ’ Range loop
case I n f o T a b l e ( P ) . S i s
when E a t i n g
=> Put ( ”
eating ” ) ;
when T h i n k i n g => Put ( ” t h i n k i n g ” ) ;
when Hungry
=> Put ( ”
hungry ” ) ;
end case ;
Put ( I n f o T a b l e ( P ) . T , Width = > 4 ) ;
end loop ;
New Line ;
Mutex . V ;
end Log ;
end Output ;
with Types ;
use Types ;
package Chop i s
type Ready Table i s array ( I d ) o f B o o l e a n ;
protected S t i c k s i s
entry G e t L e f t
(C : I d ) ;
entry G e t R i g h t ( C : I d ) ;
procedure F r e e
(C : I d ) ;
private
entry G e t L e f t Q
(C : I d ) ;
entry Get Right Q ( C : I d ) ;
Ready
: Ready Table : = ( others => True ) ;
Updating : B o o l e a n : = F a l s e ;
end S t i c k s ;
end Chop ;

180

1
2
3
4
5
6
7
8
9
10
11

S. Evangelista et al.

package body Chop i s
protected body S t i c k s i s
entry G e t L e f t
(C : I d ) when not Updating i s
begin
i f Ready ( C ) then
Ready ( C ) : = F a l s e ;
requeue G e t R i g h t ;
else
requeue G e t L e f t Q ;
end i f ;
end G e t L e f t ;

12
13
14
15
16
17

entry G e t L e f t Q ( C : I d ) when Updating i s
begin
Updating : = EXP1 ;
requeue G e t L e f t ;
end G e t L e f t Q ;

18
19
20
21
22
23
24
25
26

entry G e t R i g h t
(C : I d ) when not Updating i s
begin
i f Ready ( C + 1 ) then
Ready ( C + 1 ) : = F a l s e ;
else
requeue Get Right Q ;
end i f ;
end G e t R i g h t ;

27
28
29
30
31
32

entry Get Right Q
(C : I d ) when Updating i s
begin
Updating : = EXP2 ;
requeue G e t R i g h t ;
end Get Right Q ;

33
34
35
36
37
38
39
40

1
2
3
4
5

procedure F r e e
(C : I d ) i s
begin
Ready ( C ) : = True ; Ready ( C + 1 ) : = True ;
Updating : = EXP3 ;
end F r e e ;
end S t i c k s ;
end Chop ;
with Chop , Random , Output , Types ; use Types ;
procedure D i n e r i s
Tick Delay
: constant D u r a t i o n : = 1 . 0 ;
Max Tick
: constant : = 1 ;
Max Times
: constant : = 7 ;

6
7
8
9

task type P h i l o s o p h e r i s
entry I n i t (N : I d ) ;
end P h i l o s o p h e r ;

10
11
12
13
14
15

task body
Self
N Tick
begin
accept

Philosopher is
: Id ;
: Natural ;
I n i t (N : I d ) do S e l f : = N ; end I n i t ;

16
17
18
19
20
21
22
23
24
25
26

f o r Times in 1 . . Max Times loop
Chop . S t i c k s . G e t L e f t ( S e l f ) ;
N Tick : = Random . Value mod Max Tick ;
Output . Log ( S e l f , E a t i n g , Times ) ;
delay T i c k D e l a y ∗ N Tick ;
Chop . S t i c k s . F r e e ( S e l f ) ;
Output . Log ( S e l f , T h i n k i n g , Times ) ;
delay ( Max Tick − N Tick ) ∗ T i c k D e l a y ;
Output . Log ( S e l f , Hungry , Times ) ;
end loop ;

Quasar: A New Tool for Concurrent Ada Programs Analysis
27
28
29
30
31
32
33

end P h i l o s o p h e r ;
P h i l o s o p h e r s : array ( I d ) o f P h i l o s o p h e r ;
begin
f o r P in P h i l o s o p h e r s ’ Range loop
Philosophers (P) . I n i t (P) ;
end loop ;
end D i n e r ;

B
1
2
3
4

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

181

Sliced Package Output

with T y p e s S i m p l e ; use T y p e s S i m p l e ;
package O u t p u t S i m p l e i s
procedure Log ;
end ;
package body O u t p u t S i m p l e i s
protected Mutex i s
entry P ; procedure V ;
private
F r e e : B o o l e a n : = True ;
end Mutex ;
protected body Mutex i s
entry P when F r e e i s begin F r e e : = F a l s e ; end P ;
procedure V i s begin F r e e : = True ; end V ;
end Mutex ;
procedure Log i s
begin
Mutex . P ;
Mutex . V ;
end Log ;
end ;

C
(...)

A Part of a Deadlock Execution Trace
Updating := false

Diner.Philosophers(0).25
Chop.Philosophers(0).07
Get_Left
Chop.Philosophers(0).09,10,11
Chop.Philosophers(0).23
Get_Right
Chop.Philosophers(0).25,26,30
Diner.Philosophers(0).29
Diner.Philosophers(1).25
Diner.Philosophers(2).25
Diner.Philosophers(3).25
Diner.Philosophers(4).25
Chop.Philosophers(4).07
Get_Left
Chop.Philosophers(4).09,10,11
Chop.Philosophers(4).23
Get_Right
Chop.Philosophers(4).25,28
Chop.Philosophers(4).32
Get_Right_Q ---x
Chop.Philosophers(3).07
Get_Left
Chop.Philosophers(3).09,10,11
Chop.Philosophers(3).23
Get_Right
Chop.Philosophers(3).25,28
Chop.Philosophers(3).32
Get_Right_Q
Chop.Philosophers(0).38
Free

Chop.Philosophers(0).40,41
Chop.Philosophers(0).42
Updating :=
Chop.Philosophers(0).43
Diner.Philosophers(0).25
Chop.Philosophers(3).34
Updating :=
Chop.Philosophers(3).35
Chop.Philosophers(3).23
Get_Right
Chop.Philosophers(3).25,28
Chop.Philosophers(3).32
Get_Right_Q
Chop.Philosophers(2).09,10,11
Chop.Philosophers(2).23
Get_Right
Chop.Philosophers(2).25,28
Chop.Philosophers(2).32
Get_Right_Q
Chop.Philosophers(1).07
Get_Left
Chop.Philosophers(1).09,10,11
Chop.Philosophers(1).23
Get_Right
Chop.Philosophers(1).25,28
Chop.Philosophers(1).32
Get_Right_Q
Chop.Philosophers(0).07
Get_Left
Chop.Philosophers(0).09,10,11
Chop.Philosophers(0).23
Get_Right
Chop.Philosophers(0).25,28
Chop.Philosophers(0).32
Get_Right_Q

true

false

---x

---x

---x

---x

