Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2472 – 2481

International Conference on Computational Science, ICCS 2013

Operating System from the Scratch: a Problem-Based Learning
Approach for the Emerging Demands on OS Development
Renˆe S. Pintoa , Pedro Nobilea , Edwin Mamania , Lourenc¸o P. J´uniora , Helder J. F. Luza ,
Francisco J. Monacoa
a ICMC

– Universidade de S˜ao Paulo – Campus de S˜ao Carlos, P.O. BOX 668, S˜ao Carlos 13560-970, Brazil

Abstract
In recent past history of computer systems industry, for decades, the hegemony of a few de facto standards dictated by
major proprietary commercial products dominated the Operating Systems (OS) ﬁeld. In such technological context, consonantly to this trend, the knowledge objective focused by academical and training courses on OS-related disciplines has often
been addressed more from the stand point of essential theoretical background than of the technical skills for actuation on design and development ﬁeld. Emerging paradigms, nevertheless, have been rapidly changing this scenario. Among them, the
establishment of Open Source concept is boosting the growing diversity of new operating systems; concomitantly, evolution of
embedded hardware architectures has make it possible to run sophisticated operating systems where only bare rudimentary, ad
hoc system-software were once practical. Aligned along this perspective, this paper introduces a new platform for teaching and
training programs on OS development founded on a project-based approach which guides the student throughout the process
of designing and programming a suﬃciently simple, but yet realistic and fully functional, OS from the scratch. The diﬀerential
of the present proposal regarding related works is that, instead of either merely inspecting example-code or experimenting with
simulators, the apprentice is guided across the challenge of coding an entire new instance of a didactic system speciﬁcation.
A comparison of the companion OS-example with existing alternatives brings out a less complex implementation structure
which maps conceptual modules with implementation blocks in an intuitive correspondence and with reduced function coupling. Moreover, the learning platform comes with a courseware material consistently linked to the laboratory practices, and
aimed at the systemic comprehension of the many related multidisciplinary aspects.
Keywords: Operating Systems; Computer Science Education; Problem-based learning

1. Introduction
After the emergence of the ﬁrst operating systems during the early days of commercial computing era, the
practical ubiquity of a few very successful products that dominated the industry for over two decades signiﬁcantly
restricted the activity on OS development out of the domain of major players. Such trend was then followed by
a corresponding resettling of the relevance of the OS-related disciplines in academic curriculum more towards
the theoretical background than towards technical skills for professional actuation on the ﬁeld. This scenario,
nonetheless, is rapidly changing. The dissemination of the open source development model — with the noteworthy diversiﬁcation of novel industrial-standard operating system — and the evolution of the embedded hardware
∗ Corresponding

author. Tel.: +55-016-3373-8631 ; fax: +55-016-3371-9633.
E-mail address: rene@icmc.usp.br.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.424

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

2473

platform capable of running sophisticated operating system have both contributed to a trend of increase in the demand for professionals to actuate directly on OS development. This includes the design of new operating systems,
porting of legacy OSes to new hardware, device driver implementation and other specialized technical activities
where the eﬀective knowledge of both theoretical and practical aspects of operating system design and implementation is relevant, specially in view of the challenges of novel architecture paradigms and requirements of
distributed, mobile, pervasive, real-time and critical applications.
Along with the conceptual approach to the main aspects important to the comprehension of OS theory, a strategy which has been increasingly employed by more advanced courses is introducing the student to laboratory
practices involving programming exercises. These usually include experimenting with algorithms with the aid of
OS simulator or exploratory intervention on example source-code of real operating systems. Widely known examples include program instructions based on Tanenbaum’s MINIX [1] educational OS and the regarded GNU/Linux
project, increasingly adopted as case study in academic text books, due to its recognized importance and its open
source licence. Nevertheless, although well exploited in this context, the experience of make small changes in
parts of a complex operating system, such as Minix and Linux, is still less rich than that of designing and building
an entire operating system in terms of the systemic view of the whole and the relations between the many conceptual and practical aspects involved. Speciﬁcally, the connection of the theoretical problems and algorithms, on
one hand, and the engineering techniques available to their technological implementation and integration, on the
other hand, can appear fragmented if not properly correlated during the course of the instruction program.
This work introduces an educational platform for courses on operating system development that address this
challenge by a project-based learning strategy in which the student is conduced throughout a step-by-step laboratory exercise of designing and implementing an entire, fully functional, operating system from the scratch.
Among the reasons why this is admittedly challenging is the notoriously broad scope of speciﬁc technical
aspects involved, including hardware speciﬁcities, interrelation of many subsystems and low-level programming
and architecture-dependent issues. The construction of the many functions of even a basic OS requires a solid
multidisciplinary background, which encompasses from hardware architecture and a bit of electronics to assembly
programming and practical approaches to classical algorithmic problems. Although there is a vast amount of
material on the Internet with useful information for the execution of such ambitious project, those sources are
mostly sparse in papers, tutorials, informal reports and abundant source-code examples. A systematic compilation
of all this information into a didactic guide for laboratory practices, which encompasses all the process steps of
constructing an simple, yet realistic, fully functional operating system is not available in the form herein proposed.
The experience with the learning platform reported in the present paper is grounded on the speciﬁcation of
a OS architecture whose structure, at the implementation level, maps a simple and coherent correspondence between conceptual topics and source code. This design is conceived so as to present a step-by-step instructional
program made of learning modules sequentially connected and directly linked to the implementation modules.
The implementation architecture, therefore, aims at minimizing the functional coupling between subsystems and
function calls, and obeys a perspective of incremental development of the source code according to an intuitively
connected sequence referring to the didactic material.
The platform includes also an abundant documentation, both external and internal, which explains each part
and oﬀers a guided tutorial to implement an entire OS according to the speciﬁcation. In addition, a companion
instantiation of this speciﬁcation, called the TempOS operating system, for a standard Intel IA-32 (x86 32 bits)
architecture, is also provided and referenced by the didactic material. This work has been carried in the scope of a
research project withing the Laboratory of Distributed Systems and Concurrent Programing of SSC-ICMC USP1 ,
and of the National Institute of Science and Technology on Critical Embedded Systems INCT-SEC2 , where it is
expected to be used as a training material for development of embedded and real-time operating systems.
2. Related Work
A review on the curricula of some regarded academic courses on Operating Systems reveals several initiatives
aligned to the perspective of this work. The regarded text-book “Operating System Design and Implementation”[1]
1 www.usp.br
2 www.inct-sec.org

2474

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

(ﬁrst edition published in 1987) is a classical courseware adopted by many computer science courses. Nowadays,
there are also other books which uses Linux source code as study case[2]. Other similar iniatives, described in the
literature, are usually performed with the aid of educational Operating Systems, most of them based on simulation,
i.e. algorithms which are evaluated in hardware architecture emulators[3]. A good example of this is Nachos[4],
an educational Operating System developed at Berkeley University. The kernel runs over other OS, simulating a
MIPS R2000/3000 architecture. In the described approach, students receive just a skeleton code, to which they
are required to develop and add features not implemented. The OS/161[5] is another education OS, developed at
Harvard and based on their experiences with Nachos, aiming to overcome some of its limitations.
Among non-emulated educational Operating Systems, i.e. which are executed directed on real hardware, there
are many examples of OS for embedded architectures. Xinu[6] was developed in the 1980s at Purdue University;
despite being the main theme of two text books, currently it’s not being developed anymore[7]. Topsy[8] it’s a
micro-kernel OS developed by Swiss Federal Institute of Technology in the Computer Engineering and Networks
Laboratory. According to [7], its usage seems to be restricted only to few European colleges. Topsy runs on
a MIPS R3000 microprocessor, either on physical hardware or on simulators. For more complex platforms, as
the conventional PC architecture, there is one of most famous Operating Systems project: Minix[9], an Unix
clone written by Andrew S. Tanenbaum between 1984 and 1897. At that time, Unix was open and used by many
universities in their OS’s courses. Starting by version 7, AT&T changes the software license, banning the studying
of Unix source code, so Minix became an important alternative. Although architecturally more modern (based
on micro-kernel architecture), Minix are seen my many more as an academic concept than as real production OS,
being a big discussion point of the well known Tanenbaum-Torvalds debate Minix vs. Linux[10] — apropos,
Minix, since version 3.0 is not long and educational-purpose, according to the oﬃcial FAQ[11]. In the set of
case studies, the usage of Operating Systems in undergraduate courses are based on simulations, modiﬁcation of
existent kernels or on the implementation of very speciﬁc functions.
3. The TempOS platform
One major diﬃculty to conduce a course on Operating System through the full step-by-step source code
programming is that the implementation of its several essential features, in a complex system, can be found very
fragmented along many parts of the source code, instead of conceptually structured in cohesive modules. Issues
concerning performance and resource eﬃciency, essential features for most OSes, may recommend architectural
decisions that result in a strong interdependence of diﬀerent components, so that a particular functionality is
performed by complex interactions among a lot of procedures and program functions that share states. If on one
hand it is possible to apply object-oriented modeling in the architectural design, the real implementation has yet to
be mapped in a low level vision system, which means interacting with the hardware and its particular speciﬁcities
– not always well abstractly encapsulated in a higher level view. Thus, it is often not trivial to elaborate a roadmap
of classes that connects concepts to the implementations in a simple way, and which relates the addressed content
to self-contained parts of source code (Figure 1).
The strategy of the proposed learning platform, which accounts for its diﬀerential regarding related works,
is based on the conception and speciﬁcation of an OS architecture at the implementation level, in which the
component modules are designed to minimize the source code coupling, and to present a simple and direct relation
with the conceptual topics highlighted at the theoretical study (Figure 2). Ideally, the study of the source code
should be facilitated by a instructional program linked to concise modules with low interaction with other parts,
specially if those are to be addressed in later chapters. This is also true for the implementation exercise, if the
complete architecture can be designed incrementally, from the parts already added to the system, diminishing the
eﬀort to resort to source fragments throughout the entire program, not intuitively related.
The proposed platform consists of the system speciﬁcations, description the learning and training method and
an implementation instance which exempliﬁes the covered content. Armed with this resource, the student shall
be able to reimplement by himself the whole architecture, with the possibility to exercise his knowledge by doing
modiﬁcations and functional extensions. It is a general requirements of the aforementioned system the simple and
comprehensive architecture design, didactic and readable code, comprehensive and precise documentation.

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

2475

Fig. 1. High interdependence between
concept and implementation.
Fig. 2. Lower interdependence between
concept and implementation.

3.1. Platform components
The platform, called TempOS, is composed by the following components:
• a complete architecture speciﬁcation of a functional Operating System, based on Unix (monolithic kernel),
designed for IA-32 Architecture (Intel x86) and composed by speciﬁc modules, including
– system kernel, which provides a internal (for device drivers) and external (for system calls) API following POSIX standard, besides manage all basic machine recourses.
– device drivers for general devices (like keyboards and IDE disk), and for speciﬁc devices, such as
Programmable Interrupt Timer (PIT) and Programmable Interrupt Controller (PIC);
• source code of an Operating System which implementation follows the platform speciﬁcation, exemplifying
implementation techniques and project approaches for each system component;
• a complete guide divided into practical activities, which by the using of the platform model, leads the
students through a build process of a basic (but functional) Operating System, since the ﬁrst lines of code
up to more complex modules, including booting process, hardware access, memory management and other
high level functions. The classes sequence is designed to be used as the based courseware for undergraduate
computer science and engineering courses.
3.2. Platform Architecture
The TempOS architecturecorresponds to the Unix architecture presented in Bach (1986)[12] with some adaptation. It has a monolithic kernel adherent to the POSIX standard system calls. The Virtual File System layer
allows supporting several ﬁle systems and it’s based on Linux’s VFS layer. The architecture is composed by six
main modules: system call interface, virtual ﬁle system layer (VFS), buﬀer cache, device drivers, hardware control
and process control subsystem.
3.3. The TempOS Operating System
The OS-example accompanying TempOS platform, also named TempOS3 was written for IA-32 (x86 32 bits)
architecture, 93.33% in C language, using assembly (AT&T syntax) strictly for architecture dependent code. With
a simple compilation system using conventional shell scripts and the make tool), TempOS can be built and tested
usually ﬂawless from any GNU/Linux system, and can be either run on an emulated environment with QEMU4 or
running on real hardware (PC). Comments represent 40.63% of the code and contains references to other learning
3 TempOS stands for “TempOS is an educational and multi purpose Operating System”, playful recursive acronym in homage to GNU
system.
4 Open source processor emulator, available at http://www.qemu.org

2476

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

material (such as for Intel IA-32 manuals). The source code was structured keeping in mind the decoupling
of theoretical concepts at the source code level. Figure 3 shows the organization of the source code related to
each module of the architecture speciﬁcation. Files are expressed by ellipses, directories by polygons and the
architecture modules by rectangles. The arch directory contains all architecture dependent code. Other ﬁles not
direct related with the modules were omitted for clarity.
fs/mount.c fs/namei.c fs/vfs.c
Virtual File System
fs/bhash.c
Buffer cache
drivers/char/

drivers/block/
Device Drivers
fs/devices.c
TempOS
Memory Management

kernel/mm/

Scheduler

kernel/sched.c

Inter-process communication

lib/semaphore.c

Process Control subsystem

kernel/syscall.c

kernel/exit.c
System call interface
kernel/read.c
arch/
kernel/write.c

kernel/fork.c

kernel/execve.c

Fig. 3. The organization of TempOS source code with modules relationships.

The source code is available at http://tempos-project.org under a GPL license and is totally modularized, enforcing an eﬀective isolation of x86 architecture-dependent code. Among its features TempOS has a multiboot
system that can be handled by GRUB5 , a standard C function library, dynamic kernel reallocation (linked at 3GB),
ﬂat memory addressing organization, shared IRQs, device drivers for keyboard and generic PATA controllers,
POSIX system calls, Virtual File System Layer, partial support for EXT2 File System, fully support to partition
tables, kernel threads, round robin scheduler and other basic resources present in production Operating Systems.
After its initialization, TempOS loads the init program onto the RAM and starts to run it in user space. Through
doxygen tool6 a complete source code documentation (for functions structures, data structures speciﬁcation, etc)
can be generated in HTML or PDF.
TempOS OS follows the TempOS platform architecture speciﬁcation and the companion courseware describes
the process whereby the operating system is developed. The study guide is composed by ten conceptual topics
linked sequentially, referencing practical “step by step” implementation exercises7 . Following these steps, the
student is guided by an iterative developing process leading to the incremental building of a POSIX operating
system. Figures 4 and 5 shows TempOS running on QEMU emulator and one of the pages of internal kernel
documentation.
5 http://www.grub.org.
6 Available

at http://www.doxygen.org
at [13] or http://www.teses.usp.br/teses/disponiveis/55/55134/tde-06122012-105021/pt-br.php.
guage translation is on progress as a volunteer eﬀort by contributors.
7 Available

Lan-

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

Fig. 4. TempOS running on QEMU emulator.

2477

Fig. 5. TempOS kernel internal documentation.

4. TempOS and related approaches
Linux and Minix are two OS’s being used in courses with practical approaches. However, version 2.6.30 of
Linux kernel has more than 11 million of lines of code[14] and Minix is not much shorter. To bring out some
notion of TempOS’ dimension and structural complexity, a comparison can be made considering the source code
of a very early version of Linux (version 0.99.15) and the lasted educational-purpose Minix (version 2.0.0). It’s
important to note that both systems, even in their older and smaller versions, encompass far more features than
TempOS, as well as a lot more device drivers, a full TCP/
P IP stack and other resources. Naturally, their source codes
are therefore incomparably larger. Having a shorter source code, in this aspect, is purposely proposed by TempOS
as an advantage: it is easier to read and to understand, at the cost of lacking sophistication and performance
improvements of the other two kernels. A question that can immediately come to mind is then why not just
using a “shrinked” version of a legacy operating system? Indeed this idea was also considered and even tried.
Nevertheless, the eﬀort
ﬀ to strip a production kernel such as Linux from “unwanted” parts is prone to result either
in a overwhelmingly impracticable eﬀort,
ﬀ
or in a non-functional collection pieces of code – writing a new OS
came out as a more eﬃcient approach. Furthermore, the code decoupling and the clarity vs. performance trade-oﬀ
was a major concern not always addressed with the same perspective by production operating systems.
Figure 6 shows the graphic for total lines of code (including comments and blank lines) and the total lines
of comments for each evaluated Operating System. The percentage indicates total amount of comments for the
whole source code. Regarding the evaluated sources, Linux was the biggest kernel, with 120874 lines of code,
followed by Minix, with 17421 and TempOS, with 6236 lines of code. Regarding the comments, TempOS source
code presented the major portion, being 40,63% of the whole sources composed by comments, followed by Minix,
with 21,12% and Linux, with 18,17%.
Lines of Code

18,17%

21,12%

40,63%

0

Number of Lines

20000 40000 60000 80000

120000

Total of Lines
Comments

Linux 0.99.15

Minix 2.0.0

TempOS

Fig. 6. Number of Lines of Code and Comments

2478

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

5. Utilization example
Keeping in mind the implementation focus of the platform, the direct relation of TempOS source code and
the theoretical conceptual and architecture modules is meant to facilitate the learning and understanding of the
theory. For instance, when studying the OS process scheduler implementation, a student inspecting Linux might
be required to go through a piece of code like that implemented by the complementary functions schedule() and
init scheduler(). TempOS implements those same functions, but enforcing the didactic requirements proposed by
the platform. For instance, TempOS scheduler study is performed by the schedule() and init scheduler() functions
as show bellow.
void i n i t s c h e d u l e r ( void (∗ s t a r t r o u t i n e ) ( void ∗ ) )
{
/ ∗ Create c i r c u l a r l i n k e d l i s t ∗ /
c l l i s t c r e a t e (& t a s k s ) ;
/ ∗ S t a r t scheduler time counter ∗ /
sched cnt = j i f f i e s + scheduler quantum ;
/ ∗ A r c h i t e c t u r e dependent ∗ /
arch init scheduler ( start routine );
}

The init scheduler() function initializes the rotate list, sets the time at a new task will be swithed (jiﬃes +
scheduler quantum) and calls the routine to execute the architectural dependent code, that transforms the passed
function (start routine) in the initial kernel thread. The schedule() function is called always that the time quantum
is reached. The next task choice is done using Round-Robin algorithm, i.e., the next task of the list that is in
the “READY TO EXECUTE” will be put to execute by using the function switch to(), as in the following code,
where the macro GET TASK only returns the pointer to the task structure from the pointer of the input in the
rounded list:
void schedule ( void )
{
task t ∗ c task ;
c l l i s t ∗ tmp , ∗ h e a d ;
i f ( c u r t a s k == NULL) {
return ;
}

}

/ ∗ do s c h e d u l e ∗ /
tmp = h e a d = c u r t a s k ;
do {
tmp = tmp−> n e x t ;
c t a s k = GET TASK ( tmp ) ;
i f ( c t a s k −> s t a t e == TASK RUNNING | |
c t a s k −> s t a t e == TASK READY TO RUN ) {
s w i t c h t o ( tmp ) ;
break ;
} else {
continue ;
}
} w h i l e ( tmp == h e a d ) ;

The Linux scheduler (0.99.15), in turn, makes use of the same functions and shceduling policy. However
sched init() is implemented as follow:
void s c h e d i n i t ( void )
{
int i ;
struct desc struct ∗ p ;
b h b a s e [ TIMER BH ] . r o u t i n e = t i m e r b h ;
i f ( s i z e o f ( s t r u c t s i g a c t i o n ) != 1 6 )
p a n i c ( ” S t r u c t s i g a c t i o n MUST be 16 b y t e s ” ) ;
s e t t s s d e s c ( g d t +FIRST TSS ENTRY ,& i n i t t a s k . t s s ) ;
s e t l d t d e s c ( g d t +FIRST LDT ENTRY,& d e f a u l t l d t , 1 ) ;
s e t s y s t e m g a t e ( 0 x80 ,& s y s t e m c a l l ) ;
p = g d t +2+FIRST TSS ENTRY ;
f o r ( i =1 ; i <NR TASKS ; i ++) {
t a s k [ i ] = NULL ;
p−>a=p−>b =0;
p ++;
p−>a=p−>b =0;
p ++;
}
/ ∗ C l e a r NT , s o t h a t we won ’ t h a v e t r o u b l e s w i t h t h a t l a t e r on ∗ /
a s m ( ” p u s h f l ; a n d l $ 0 x f f f f b f f f ,(% e s p ) ; p o p f l ” ) ;
load TR ( 0 ) ;
load ldt (0);
o u t b p ( 0 x34 , 0 x43 ) ;
/ ∗ b i n a r y , mode 2 , LSB / MSB , ch 0 ∗ /
/ ∗ LSB ∗ /
o u t b p (LATCH & 0 x f f , 0 x40 ) ;
o u t b (LATCH >> 8 , 0 x40 ) ;
/ ∗ MSB ∗ /
i f ( r e q u e s t i r q ( TIMER IRQ , ( v o i d ( ∗ ) ( i n t ) ) d o t i m e r ) ! = 0 )
p a n i c ( ” Could n o t a l l o c a t e t i m e r IRQ ! ” ) ;
}

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

2479

As in that version Linux has used the task switching mechanism of the x86 architecture, the function sched init()
starts a TSS structure in the available GDT entries. After, the ﬂag NT was cleaned up and the TR registers (Task
Register) ant the LDT table are loaded. Finally, the PIT registers are conﬁgured and the routine to IRQ0 treatment
is registred though register irq() function. As for the schedule() function, it not only performs the scheduling but
also checks the blocked tasks waiting for a signal or alarm, and those can be “waked up” loading debugging values
to certain registers. It is implemented by the following code:
asmlinkage void schedule ( void )
{
int c ;
struct task struct ∗ p ;
struct t a s k s t r u c t ∗ next ;
unsigned long t i c k s ;
/ ∗ c h e c k alarm , wake up any i n t e r r u p t i b l e t a s k s t h a t h a v e g o t a s i g n a l ∗ /
cli ();
ticks = itimer ticks ;
i t i m e r t i c k s = 0;
itimer next = ˜0;
sti ();
need resched = 0;
p = &i n i t t a s k ;
for ( ; ; ) {
i f ( ( p = p−> n e x t t a s k ) == & i n i t t a s k )
goto confuse gcc1 ;
i f ( t i c k s && p−> i t r e a l v a l u e ) {
i f ( p−> i t r e a l v a l u e <= t i c k s ) {
s e n d s i g (SIGALRM , p , 1 ) ;
i f ( ! p−> i t r e a l i n c r ) {
p−> i t r e a l v a l u e = 0 ;
goto e n d i t i m e r ;
}
do {
p−> i t r e a l v a l u e += p−> i t r e a l i n c r ;
} w h i l e ( p−> i t r e a l v a l u e <= t i c k s ) ;
}
p−> i t r e a l v a l u e −= t i c k s ;
i f ( p−> i t r e a l v a l u e < i t i m e r n e x t )
i t i m e r n e x t = p−> i t r e a l v a l u e ;
}
end itimer :
i f ( p−> s t a t e != TASK INTERRUPTIBLE )
continue ;
i f ( p−> s i g n a l & ˜ p−> b l o c k e d ) {
p−> s t a t e = TASK RUNNING ;
continue ;
}
i f ( p−> t i m e o u t && p−> t i m e o u t <= j i f f i e s ) {
p−> t i m e o u t = 0 ;
p−> s t a t e = TASK RUNNING ;
}
}
confuse gcc1 :
/∗ this is
#if 0
/∗
/∗
/∗
/∗
if
}

the scheduler proper : ∗ /
g i v e p r o c e s s e s t h a t go t o s l e e p a b i t h i g h e r p r i o r i t y . .
T h i s d e p e n d s on t h e v a l u e s f o r TASK XXX ∗ /
T h i s g i v e s s m o o t h e r s c h e d u l i n g f o r some t h i n g s , b u t ∗ /
can be v e r y u n f a i r u n d e r some c i r c u m s t a n c e s , s o . . ∗ /
( TASK UNINTERRUPTIBLE >= ( u n s i g n e d ) c u r r e n t −> s t a t e &&
c u r r e n t −> c o u n t e r < c u r r e n t −> p r i o r i t y ∗ 2 ) {
++ c u r r e n t −> c o u n t e r ;

∗/

# endif
c = −1;
next = p = &i n i t t a s k ;
for ( ; ; ) {
i f ( ( p = p−> n e x t t a s k ) == & i n i t t a s k )
goto confuse gcc2 ;
i f ( p−> s t a t e == TASK RUNNING && p−> c o u n t e r > c )
c = p−> c o u n t e r , n e x t = p ;
}
confuse gcc2 :
if (! c) {
for each task (p)
p−> c o u n t e r = ( p−> c o u n t e r >> 1 ) + p−> p r i o r i t y ;
}
i f ( c u r r e n t != n e x t )
k s t a t . c o n t e x t s w t c h ++;
switch to ( next ) ;
/ ∗ Now maybe r e l o a d t h e debug r e g i s t e r s ∗ /
i f ( c u r r e n t −> d e b u g r e g [ 7 ] ) {
loaddebug ( 0 ) ;
loaddebug ( 1 ) ;
loaddebug ( 2 ) ;
loaddebug ( 3 ) ;
loaddebug ( 6 ) ;
};
}

In contrast to TempOS scheduler code, Linux routines make no strict isolation of architecture-dependent routines, and refers to functions with purposes not strictly necessary to the understanding of the scheduling mechanism itself, such as alarm and signals checking, in addition to programming speciﬁc hardware (PIC and debug

2480

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

registers). TempOS scheduler code does not clutter the routine with functions not speciﬁc to the theoretical module, which can be explored opportunely.
6. Results and Conclusions
The development of TempOS platform started in 2008 and the ﬁrst oﬃcial release was available in 2012.
During this period, the system was explored in a few pilot experiences in the scope of the undergraduate courses
at the ICMC-USP. In 2009, when the platform was in still in its early stage of development, TempOS was ﬁrst
experimented in the context the discipline “Operating Systems II”, for the students of the 4th year the Computer
Engineering course. The proposed class program was to challenge students to develop a primitive kernel for Intel
IA-32 architecture, which should run in a real hardware (PC) and execute basic routines in kernel space. The
kernel should run in real mode, implementing interrupt control, basic drivers, such as PIC/PIT, keyboard and textmode video drivers. A small shell to support basic commands, only to illustrate kernel execution, should also be
implemented. Since the platform courseware guide was not complete on that time, students were allowed to resort
to TempOS source code for architecture-dependent parts.
Originally 17 students were enrolled into the course. The very ﬁrst lesson learned from trying out our approach
was a simple, yet disturbing one: Operating Systems scare computer sciences/engineer students. Such observation
became evident when, no less then 36% of the students simply dropped the course after the ﬁrst day of class right
after the didactic program announcement — and that without raising any questions or complaints. After the fact,
when the event was reported to the course instructor, inquired about the reason for such a radical decision some
students argued that the mere idea of designing an OS was “terrifying” enough for them to consider themselves
capable of such an “overambitious endeavor”, reserved to “guru hackers only” — to paraphrase some heard aexpressions. Not a pleasant ﬁnding in the context of a graduate course whose aim is to prepare future professionals
for pushing technological development towards new achievements.
The 11 remaining students, however, completed the entire course and sucessfully accomplished the mission.
Table 1 show the distribution of the ﬁnal scores (minimal score to complete the course is 5.0).
Table 1. Students grades of Operating Systems course using TempOS platform

Grade
5.0 - 5.9
6.0 - 6.9
7.0 - 7.9
8.0 - 8.9
9.0 - 9.9

Number of students
2
2
0
2
5

After this preliminary experience, the TempOS has been exercised a few times, but always as extra-class
activity, while the platform deployment strategy gains maturity and can be considered to oﬃcially integrate the
discipline curriculum. In the last essay, carried out in 2012, subscriptions were open for a one-semester extra
class course on OS development. A total of 20 participants were selected among undergraduate students from the
courses of Computer Sciences and Computer Engineering. The course program covered the process of design and
implementation of a functional OS for x86 32-bit platform, from the boot to user-space process execution. The
program included also the implementation of a simpliﬁed libc port with some POSIX functions (fork, exec, read,
write and a simpliﬁed printf.) With the library and a cross complier (gcc) the students were supposed to program
a very simple shell with basic features such as ﬁle system manipulation and program execution.
Out of the 20 participants, 14 completed the course; 6 dropped after 3 months — inquired about the reason,
5 of them argued upon the need to study for other formal disciplines and 1 engaged in a trainee program. The
remaining students accomplished the goals with diﬀerent levels of success. All of them were able to implement
an operational kernel with the required functionality — no line of code from TempOS example were reused. Only
6 were able to port the lib and write the shell, what corresponds to 30% of the participants. This result was
considered reasonable for the purpose of the experience, bearing in mind that the course was run as a completely

Renˆe S. Pinto et al. / Procedia Computer Science 18 (2013) 2472 – 2481

2481

optional activity, neither counting credits nor oﬀering any certiﬁcate. The next reproduction of the experiment
shall include a systematic qualitative assessment based on a methodologically prepared question sheet.
7. Final Remarks
TempOS platform is one of the outcomes of a long-lasting eﬀort to update the didactic program of OS-related
disciplines oﬀered by the SSC-ICMC USP to undergraduate students of the courses on Computer Sciences and
Computer Engineering. As a ﬁrst step, it is expected to be formally integrated into the curriculum of the discipline
“Operating System II” as the main laboratory practice. In the medium term, this can also be extended to the former
discipline “Operating System II” under the perspective of a problem-based learning approach also for OS theory.
A long term goal might be to merge those two disciplines, along with “Computer Organization”, into a series
of connected courses with integrated theory-practice approach. The next goal towards this direction is extending
the didactic material compiled for the TempOS platform into a text-book for courses on Operating Systems and
Computer Organization, currently in elaboration by the authors of this article. It is expected to be an option to
undergraduate, graduate and professional course instructors interested on a hands-on approach to computer system
disciplines.
Acknowledgements
Authors are grateful to FAPESP (Fundac¸a˜ o de Amparo a` Pesquisa do Estado de S˜ao Paulo), CNPq (Conselho
Nacional de Desenvolvimento Cient´ıﬁco e Tecnol´ogico), CAPES (Coordenadoria de Aperfeic¸oamento de Pessoal
de N´ıvel Superior) and INC-SEC (Instituto Nacional de Ciˆencia e Tecnologia em Sistemas Embarcados Cr´ıticos)
for their support.
References
[1] A. S. Tanenbaum, Sistemas Operacionais: projeto e implementac¸a˜ o, Bookman, 2000.
[2] J. O’Gorman, Operating Systems with Linux, Palgrave Macmillan, 2001.
[3] R. Souza Pinto, F. Monaco, Uma plataforma de aprendizado baseado em projeto para ensino e treinamento em sistemas operacionais, in:
Anais do XXXII Congresso da Sociedade Brasileira de Computac¸a˜ o, 2012.
[4] W. Christopher, S. Procter, T. Anderson, The Nachos instructional operating system, in: Proceedings of the USENIX Winter 1993
Conference Proceedings on USENIX Winter 1993 Conference Proceedings, Usenix Association, 1993, p. 4.
[5] D. Holland, A. Lim, M. Seltzer, A new instructional operating system, in: Proceedings of the 33rd SIGCSE technical symposium on
Computer science education, ACM, 2002, pp. 111–115.
[6] J. Carissimo, XINU–an easy to use prototype for an operating system course, ACM SIGCSE Bulletin 27 (4) (1995) 56.
[7] C. L. Anderson, M. Nguyen, A survey of contemporary instructional operating systems for use in undergraduate courses, J. Comput.
Small Coll. 21 (1) (2005) 183–190.
[8] G. Fankhauser, C. Conrad, E. Zitzler, B. Plattner, Topsy–a teachable operating system, Computer Engineering and Networks Laboratory,
ETH Zurich 2001.
[9] A. Tanenbaum, A UNIX clone with source code for operating systems courses, ACM SIGOPS Operating Systems Review 21 (1) (1987)
29.
[10] C. DiBona, S. Ockman, M. Stone, Open sources: Voices from the open source revolution, O’Reilly & Associates, Inc. Sebastopol, CA,
USA, 1999.
[11]
[12] M. J. Bach, The design of the Unix Operating System, Prentice-Hall, 1986.
[13] R. Souza Pinto, Uma plataforma para ensino e treinamento em desenvolvimento de sistemas operacionais, Master’s thesis, Universidade
de S˜ao Paulo (June 2012).
URL http://www.teses.usp.br/teses/disponiveis/55/55134/tde-06122012-105021/pt-br.php
[14] A. Greg Kroah-Hartman, Jonathan Corbet, Who writes linux: How fast it is going, who is doing it, what they are doing, and who is
sponsoring it: An august 2009 update., Tech. rep., Linux Foundation (August 2009).

