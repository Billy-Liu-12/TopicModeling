A Coarse-Grained Parallel Algorithm for
Maximal Cliques in Circle Graphs
E.N. Cáceres1 , S.W. Song2 , and J.L. Szwarcﬁter3
1

Universidade Federal do Mato Grosso do Sul
Departamento de Computação e Estatı́stica
Campo Grande, MS, 79069, Brazil
edson@dct.ufms.br
2
Universidade de São Paulo
Departamento de Ciência da Computação - IME
São Paulo, SP - 05508-900 - Brazil
song@ime.usp.br
3
Universidade Federal do Rio de Janeiro
Instituto de Matemática and Núcleo de Computação Eletrônica
Rio de Janeiro, RJ, 21945-970, Brazil
jayme@nce.ufrj.br

Abstract. We present a parallel algorithm for generating the maximal
cliques of a circle graph with n vertices and m edges. We consider the
Coarse-Grained Multicomputer Model (CGM) and show that the proposed algorithm requires O(log p) communication rounds, where p is the
number of processors, independent of n. The main contribution is the
use of a new technique based on the unrestricted depth search for the
design of CGM algorithms.

1

Introduction

In this paper we present a new CGM/BSP parallel algorithm for ﬁnding maximal
cliques in circle graphs.
Circle graphs are a special kind of intersection graphs. Recognition of circle
graphs has been an open problem for many years until the mid-eighties with solutions discovered independently by several researchers [1,8,10]. These algorithms
basically makes use of a graph decomposition technique [5,6]. The presented
algorithms are sequential polynomial algorithms. a We consider the problem
of generating all maximal cliques in a circle graph of n vertices and m edges.
Szwarcﬁter and Barroso have studied this problem and presented a sequential
O(n(m + α)) algorithm [11] where α is the number of maximal cliques of the
graph. Cáceres and Szwarcﬁter [3] present a PRAM algorithm of O(α log 2 n)
time using n3 processors in a CREW PRAM.
To our knowledge there are no known parallel algorithms for ﬁnding maximal cliques in circle graphs under the coarse-grained parallel computing model.
Based on [11] and [3] we present a CGM (Coarse-Grained Multicomputer) algorithm for this problem that requires O(log p) communication rounds. The main
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2074, pp. 638–647, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

A Coarse-Grained Parallel Algorithm for Maximal Cliques in Circle Graphs

639

contribution of this paper is the introduction of the unrestricted search as a new
technique for the design of CGM algorithms.

2

Coarse-Grained Multicomputer (CGM) Model

The PRAM model has been extensively utilized to produce many important
theoretical results. Such results from PRAM algorithms, unfortunately, do not
necessarily match the speedups observed on real parallel machines.
In this paper, we present a parallel algorithm that is based on a more practical
parallel model. More precisely, we will use a version of the BSP model [13] referred to as the Coarse Grained Multicomputer (CGM) model [7]. In comparison
to the BSP model, the CGM allows only bulk messages in order to minimize message overhead. A CGM consists of a set of p processors P1 , . . . , Pp with O(N/p)
local memory per processor and an arbitrary communication network (or shared
memory). A CGM algorithm consists of alternating local computation and global
communication rounds. Each communication round consists of routing a single
h-relation with h = O(N/p), i.e. each processor sends O(N/p) data and receives
O(N/p) data. We require that all information sent from a given processor to
another processor in one communication round is packed into one long message,
thereby minimizing the message overhead. A CGM computation/communication
round corresponds to a BSP superstep with communication cost g Np . Finding an
optimal algorithm in the coarse grained multicomputer model is equivalent to
minimizing the number of communication rounds as well as the total local computation time. The CGM model has the advantage of producing results which
correspond much better to the actual performance on commercially available
parallel machines.

3

Notation and Terminology

Circle graphs are intersection graphs of a family of chords of a circle. Consider
a family of n chords, numbered as 1 − 1� , 2 − 2� , . . . , n − n� , in a circle C (or
equivalently in a square) (see Fig. 1 on the left). Assume that any two chords
do not share a same endpoint. This corresponds to a circle graph G = (V, E)
where each chord corresponds to a vertex: V = {1, 2, . . . , n} and the edge set E
is formed by edges (u, v) if chord u intersects chord v. The corresponding circle
graph is shown on the right of Fig. 1.
A circular sequence S of G is the sequence of the 2n distinct endpoints of
the chords in circle C, by traversing C in a chosen direction, starting at a given
point in C. Denote by S1 (v) and S2 (v) respectively the ﬁrst and second instances
in S of the chord corresponding to v ∈ V in C. Denote by Si (v) < Sj (w) (for
i, j = 1, 2) when Si (v) precedes Sj (w) in S. We have S1 (v) < S2 (v).
Let G = (V, E) be a circle graph, S the circular sequence of G. An S1 orientation G of G is an orientation in which any directed edge (v, w) ∈ E satisﬁes S1 (v) < S1 (w). The S1 -orientation is an acyclic digraph (directed graph).

640

E.N. Cáceres, S.W. Song, and J.L. Szwarcﬁter
3’�

��

6’ �
4’ ◗
� �

◗

1
�

��

���
��

◗

2
�

�

�
���
��
��3
�
� �
�
�4
�
�

◗ �
◗�
5
�◗�
✟�
◗
✟
�
◗ �✟
✟
◗
�
✟
◗
✟
�
�
◗
✟
2’ �
�
�✟ �
◗�

1
�
✁❅
❆
�
�✁ ❆❅
❆ ❅
� ✁
✁
❆ ❅�2
6�
�
❆ �
❅ ✁
✁
�❆
❅
✁ ❅
� ❆
�✁
❆�
❅�
�

6
5’ 1’
5
4
3
Fig. 1. Family of chords (left) and the corresponding circul graph on the right G =
(V, E)

Let G denote an acyclic orientation of G. Av (G) and A−1
v (G) are the subsets
of vertices that leave or enter v, respectively. For v, w ∈ V , v is an ancestral
of w in G if the directed graph contains a path v − w. In this case, w is a
descendant of v. Denote by Dv (G) the set of descendants of v. If w ∈ Dv (G)
and v � =w, then v is a proper ancestral of w and w a proper descendant of v. G is
denominated a transitive digraph with respect to edges when (v, w), (w, z) ∈ E
implies (v, z) ∈ E. The transitive reduction GR is the subgraph of G formed by
the edges that are not motivated by transitivity. In other words, the transitive
reduction of a directed graph G is the subgraph GR with the smallest number of
edges such for every path between vertices in G, GR has a path between those
vertices.
Let G = (V, E) be a non-directed graph, |V | > 1 and G an acyclic orientation
of G.
Let v, w ∈ V . We denote by Z(v, w) ⊂ V the subset of vertices that are
simultaneously descendants of v and ancestrals of w in G. An edge (v, w) ∈ E
induces a local transitivity when G(Z(v, w)) is a transitive digraph. Clearly, in
this case the vertices of any path from v to w induce a clique in G. Furthermore,
(v, w) induces a maximal local transitivity when there does not exist (v � , w� ) ∈ E
diﬀerent from (v, w) such that v � is simultaneously an ancestral of v and w � a
descendant of w in G. (v, w) is denominated a maximal edge. The orientation G
is locally transitive when each of its edges induces local transitivity. Fig. 2 shows
an example of a locally transitive orientation.
Based on the following theorem, one can use locally transitive orientations
for ﬁnding maximal cliques.
Theorem 1. Let G = (V, E) be a graph, G a locally transitive orientation of G
and GR the transitive reduction of G. Then there exists a one-to-one correspondence between the maximal cliques of G and paths v − w in GR , for all maximal
edges (v, w) ∈ E.
The proof can be found in [11].

A Coarse-Grained Parallel Algorithm for Maximal Cliques in Circle Graphs

641

�
�
�❅
�
❅
�
�
❘
✠
✒
❅
�
�
❅�
�
�
✲
�
✲
�
❅
�❅
�
❅
�
❅
�
❘
❘
✒
✒
❅
�
❅
�
❅��
❅��
Fig. 2. A locally transitive digraph G = (V, E)

4

Algorithm for Unrestricted Search in Acyclic Digraphs

In a depth search of a graph, each edge is visited a constant number of times.
Such a search process is known as a restricted search. An unrestricted search in
a graph G is a systematic process of traversing G such that each edge is visited
a ﬁnite number of times. The only restriction is that the process terminate.
The sequential unrestricted depth search of a connected graph G = (V, E) is
given as follows. The algorithm starts with a given vertex v chosen as root. It
uses a stack Q.
Unrestricted Search (v)
Mark v
Push v onto stack Q
For each vertex w adjacent to v do
if w is not in Q then
visit edge (v, w)
Unrestricted Search (w)
Pop v from Q
Unmark v
Now we will implement this algorithm in CGM. First we give some deﬁnitions.
Given a digraph G = (V, E), for each vertex v ∈ V we deﬁne the successor of
v (suc[v]) as a ﬁxed element of the adjacency list of v. Let e = (u, v) ∈ E. We
deﬁne the successor of e as the edge (v,suc[v]). A kl-path is a path C in G with
initial edge e = (k, l). An edge e ∈ E belongs to kl-path C if e is the successor
of some edge on the path C, and e � ∈C. An edge (u, v) can belong to more than
one kl-path.
For a undirected graph G, we consider each edge (u, v) as two distinct directed
edges (u, v) and (v, u).
Since the successor of each vertex is ﬁxed, all the edges on a kl-path incident
with a vertex v have a same successor (v,suc[v]). A kl-path can be a simple path,
a cycle, a path together with a cycle or the union of two cycles. In the case when
G = (V, E) is an acyclic digraph, the kl-paths are formed by simple paths, with
an initial vertex k and a ﬁnal vertex t.

642

E.N. Cáceres, S.W. Song, and J.L. Szwarcﬁter

We present below an algorithm for unrestricted depth search in acyclic digraphs. The algorithm computes all maximal simple paths from a given root
r.
The algorithm initially decomposes the digraph G = (V, E) into a set of klpaths. This decomposition is obtained through the deﬁnition of the successors
of vertices and edges of G. The algorithm initializes the successor of each vertex
v ∈ V as the ﬁrst element of its adjacency list of v. After the decomposition, the
algorithm explores the edges of the kl-path such that k = r, where r is the root
of the search and l = suc[r]. The visited edges form a maximal simple path C.
Once we have determined a maximal simple path C = {v0 , · · · , vp }, for r = v0
on the kl-path, we can obtain a new maximal simple path, if it exists, as follows.
We determine the last vertex vi ∈ C that has some vertex in its adjacency list
that has not been visited yet. The successors of the vertices vj � ∈ {v0 , · · · , vi } are
modiﬁed to be the ﬁrst element of the adjacency list of each vj , and the successor
of vi is altered to be the element of the adjacency list of vi immediately following
suc[vi ]. The successors of the vertices {v0 , · · · , vi−1 } remain unaltered. The new
deﬁnition of successors determines a new decomposition of the digraph into a set
of kl-paths. We determine a simple path C = {vi , · · · , vt } on a kl-path in the new
decomposition, with k = vi and l = suc[vi ]. The path C = {v0 , · · · , vi , · · · , vt }
formed by the union of the paths {v0 , · · · , vi } and {vi , · · · , vt } is a new maximal
simple path. The remaining maximal simple path, if they exist, are computed
analogously.
All the vertices wi that are not reachable from the root vertex r are not
included in the search.
Algorithm: Unrestricted Search
1. Deﬁne a root r, construct the adjacency lists of G and initialize the maximal
simple path CM .
2. Decompose the digraph G into a set of kl-paths.
3. Determine a simple path C from r on the kl-path, with k = r and l = suc[r].
4. Compute the maximal simple path CM = CM ∪ C. Verify the existence of
any vertex vi ∈ CM that has in its adjacency list a vertex that has not been
visited yet.
5. In case vi exists, CM = {v0 , · · · , vi−1 }. Alter the successors of the vertices
vi � ∈CM , and unmark the edges e ∈ G that do not belong to the path CM .
6. Apply steps 2, 3, 4, and 5 to the set of unmarked edges of G for r = vi until
all possible maximal simple paths from v0 have been explored.
First, we rank the adjacency lists of all v ∈ V and deﬁne the successor of v
to be the ﬁrst element of the adjacency list of v.
We start with the root r and with the deﬁned successors, this represents
a maximal path in G. Since our graph is acyclic, using list ranking, we can
rank all vertices of this path. After this, we mark the last vertex of the path and
change the successor (if there is one) of the tail of this path and compute another
maximal path. Otherwise, using a proper data structure, we can backtrack in
this path and visit a vertex that was not visited before.

A Coarse-Grained Parallel Algorithm for Maximal Cliques in Circle Graphs

643

The unrestricted search in this acyclic graph can be done in O(log p) communication rounds.

5

The Maximal Cliques Algorithm

An S1 -orientation G of a given circle graph G can be easily obtained through
its circular sequence. We thus assume that a S1 -orientation is given as input.
It can also be observed [11] that if G is locally transitive, then (v, w) ∈ E is a
−1
maximal edge if and only if Av (G) ∩ Aw (G) = A−1
v (G) ∩ Aw (G) = ∅.
Step 3 below is the main step of this algorithm and is based on the unrestricted search.
5.1

Algorithm Description

CGM Algorithm: Maximal Cliques
1. Construct the transitive reduction GR .
2. Determine all maximal edges of G.
3. For each maximal edge (v, w) ∈ E, determine all paths v − w in GR .
5.2

An Illustrative Example

Consider the circle graph G of Fig. 1. Consider the S1 -orientation shown in Fig. 3
(a).
1
�
�
✁❅
❆
�✁ ❆❅
✠
❘
� ✁
❆ ❅
6 �� ✁ ✛
❆ ❅�2
❄ ❆❯ �
❅ ☛✁
�
✁❅
❆ ❄
✠
✻
� ❆
❅
✁ ■
❅�
�
�✁
❆�

1
�
✁❅

✁

✁

❅
❘
❅

✁
❅�2
�
❅ ☛✁
� ❄
❅
✁
✠
✻✁ ■
�
❅
�
❅�
�
�✁

6�

5
4
3
5
4
3
Fig. 3. (a) Graph G (S1 -orientation) and (b) Transitive Reduction Graph GR

Step 1
Determine the transitive reduction GR of G.
We can easily determine the adjacency lists A−1
v (G) for all the vertices of G.
We can also obtain the lists A−1
v (G) by partitioning the edge lists into sublists,
one for each vertex v. We use the array of lists ADJ to store the adjacency
lists. ADJ[vi ] contains the list of vertices vj that arrives in vi . Using recursive
doubling, we remove from each adjacency list ADJ[vi ] all the vertices that are
in adjacency lists ADJ[vj ], for all vj ∈ ADJ[vi ]. This can be done as follows.

644

E.N. Cáceres, S.W. Song, and J.L. Szwarcﬁter

for all vi ∈ V in parallel do
ADJ[vi ] ← A−1
vi (G)
BADJ[vi ] ← ∪vj ∈ADJ[vi ] ADJ[vj ]
repeat �log n� times
for all vi ∈ V in parallel do
BADJ[vi ] ← BADJ[vi ] ∪ {∪vj ∈BADJ[vi ] BADJ[vj ] }
for all vi ∈ V in parallel do
ADJ[vi ] ← ADJ[vi ] − BADJ[vi ]
The adjacency lists A−1
vi (GR ) are given by ADJ[vi ].
The main step that is repeated O(log n) times amounts to using the pointer
jumping or recursive doubling technique. By this technique, it can be easily shown
that the CGM algorithm requires O(log n) communication rounds. We can however do better by using the p2 -ruling set technique presented in [4] for the list
ranking problem. An r-ruling set is deﬁned as a subset of selected list elements
that has the following properties: (1) No two neighboring elements are selected.
(2) The distance of any unselected element to the next selected element is at
most r. Because of the characteristics of circle graphs and the S1 -orientation,
we have at most O(n2 ) partial lists in graph G. So this step can be done with
O(log p) communication rounds.
For our example GR is
(1, 2)(1, 5)(2, 3)(2, 4)(4, 6)(5, 6)
Step 2
In this step we determine the maximal edges of G. We base on the observation
[11] that if G is locally transitive, then (v, w) ∈ E is a maximal edge if and only
−1
if Av (G) ∩ Aw (G) = A−1
v (G) ∩ Aw (G) = ∅.
We can either assume the adjacency lists as part of the input or easily computer them. In the example, we have
A1 (G) = {2, 3, 4, 5, 6} A−1
1 (G) = ∅
A2 (G) = {3, 4, 6}
A−1
2 (G) = {1}
A−1
A3 (G) = ∅
3 (G) = {1, 2}
A−1
A4 (G) = {6}
4 (G) = {1, 2}
A5 (G) = {6}
A−1
5 (G) = {1}
A−1
A6 (G) = ∅
6 (G) = {1, 2, 4, 5}
We thus compute the following maximal edges.
(1, 3)(1, 6)
Step 2 can be computed with a constant number of communication rounds.

A Coarse-Grained Parallel Algorithm for Maximal Cliques in Circle Graphs

645

Step 3
In this step we ﬁrst compute for each v ∈ V the subsets W (v) formed by
vertices w such that (v, w) is a maximal edge. From the maximal edges obtained
in Step 2 we get
W (1) = {3, 6} W (2) = ∅
W (3) = ∅
W (4) = ∅
W (5) = ∅
W (6) = ∅
Construct now the subgraph H of GR induced by the vertices that are
simultaneously descendants of v and ancestrals of any w ∈ W (v). This can be
done by determining the transitive closure [9] GR and through the intersection
of the vertices that leave v with those that enter each of w ∈ W (v). The paths
v − w in GR taken from a certain vertex v are exactly the source-sink paths in
H. These paths can be obtained through the parallel unrestricted depth search
algorithm (see Section 4).
For our example the subgraph H is shown in Fig. 4.
1
�
✁❅

✁

✁

❅
❘
❅

✁
❅�2
❅ ☛✁
�
✁
❅
� ❄
✠
✻✁ ■
❅
�
�
�✁
❅�
�

6�

5

4
3
Fig. 4. Graph H

(1, 2)(1, 5)(2, 3)(2, 4)(4, 6)(5, 6)
Let us now perform an unrestricted search on the digraph H.
The unrestrited search in this acyclic graph can be done in O(log p) communication rounds.
Observe that digraph H is acyclic. Using the parallel unrestricted search
algorithm of [2] we determine the maximal paths of H. For our example the
maximal paths in H are:
C1 = {1, 2, 3}

C2 = {1, 2, 4, 6}
C3 = {1, 5, 6}

The source-sink paths of H obtained in the previous step form maximal
cliques of G.

646

6

E.N. Cáceres, S.W. Song, and J.L. Szwarcﬁter

Correctness

Lemma 1. Let G = (V, E) be a weakly connected digraph. Let v ∈ V and a
kl-path in G such that k = v and l = suc[v]. Then the kl-path is: (i) a simple
path; (ii) a cicle; or (iii) a path connected to a cycle.
Proof: [3]
Lemma 2. Let G = (V, E) be an acyclic weakly connected digraph. Then each
kl-path is a simple maximal path.
Proof: [3]
Theorem 2. Let G = (V, E) be an acyclic weakly connected digraph. All maximal paths of G, starting at the root vertex r, will be found by the algorithm at
least once.
Proof: [3]
Theorem 3. Let G = (V, E) be an acyclic weakly connected digraph. None of the
maximal paths of G, starting at the root vertex r, will be found by the algorithm
more than once.
Proof: [3]
Lemma 3. Graph GR obtained at the end of Step 1 of the parallel algorithm is
the transitive reduction of G.
Proof: At each iteration we compute for each vertex v the set Lv formed by the
union of the adjacency lists of the vertices that arrive at v. The set L v contains
the vertices for which there exists at least one path of length ≥ 2i to v. At each
iteration i, for each vertex v, we remove, from the adjacency lists of the vertices
that arrive at v, those vertives that belong to Lv . After �log n� iterations, all
the vertices that are ancestral of v belong to Lv . Thus the adjacency lists will
contain only vertices vj for which there does not exist any path joining uj to v
diﬀerent of (uj , v).
Theorem 4. The parallel algorithm computes all the maximal cliques correctly.
Proof: By the previous lemma, the algorithm computes the transitive reduction
correctly. By using the unrestricted search of an acyclic digraph, we determine
all the maximal paths in the digraph H. The correctness result follows from the
fact that the S1 −orientation G is locally transitive.
Acknowledgments
The ﬁrst author is supported by PRONEX-SAI. The second author is supported
by FAPESP (Fundação de Amparo à Pesquisa do Estado de São Paulo) Proc. No.
98/06138-2, CNPq Proc. No. 52.3778/96-1 and 46.1230/00-3, and CNPq/NSF
Collaborative Research Program Proc. No. 68.0037/99-3. The third author is
partially supported by the Conselho Nacional de Desenvolvimento Cientı́ﬁco e
Tecnológico, CNPq, and Fundação de Amparo à Pesquisa do Estado do Rio de
Janeiro, FAPERJ, Brazil.

A Coarse-Grained Parallel Algorithm for Maximal Cliques in Circle Graphs

647

References
1. A. Bouchet.: Reducing Prime Graphs and Recognizing Circle Graphs. Combinatorica 7 (1987) 243–254
2. E.N. Cáceres.: Parallel Algorithms for Graph Problems. (In Portuguese.) PhD
thesis, COPPE - UFRJ, Rio de Janeiro - RJ, (1992)
3. E. N. Cáceres and J. L. Szwarcﬁter.: In preparation.
4. E. Cáceres, F. Dehne, A. Ferreira, P. Flocchini, I. Rieping, A. Roncato, N. Santoro, and S.W. Song.: Eﬃcient Parallel Graph Algorithms For Coarse Grained
Multicomputers and BSP. In: Proceedings ICALP ’97 - 24th International Colloquium on Automata, Languages, and Programming. P. Degano, R. Gorrieri, A.
Marchetti-Spaccamela (editors). Lecture Notes in Computer Science 1256 (1997)
390–400
5. W. H. Cunningham.: Decomposition of Directed Graphs. SIAM J. Alg. and Disc.
Methods 3 (1982) 214–228
6. W. H. Cunningham and J. Edmonds.: A Combinatorial Decomposition Theory.
Canad. J. Math. 32 (1980) 734–765
7. F. Dehne (Ed.), Coarse grained parallel algorithms. In: Special Issue of Algorithmica 24 (1999) 173–426
8. C. P. Gabor, W.L. Hsu, and K. J. Supowit.: Recognizing Circle Graphs in Polynomial Time. J. of Assoc. Comput. Mach. 36 (1989) 435–474
9. R. M. Karp and V. Ramachandran.: Parallel Algorithms for Shared-Memory Machines. In: J. van Leeuwen (ed.): Handbook of Theoretical Computer Science Vol.
A. Chapter 17, The MIT Press/Elsevier (1990) 869–941
10. W. Naji.: Graphes des Cordes, Caractérisation et Reconnaissance. Disc. Math. 54
(1985) 329–337
11. J. L. Szwarcﬁter and M. Barroso.: Enumerating the Maximal Cliques of Circle
Graph. In: F.R.K. Chung, R.L. Graham, and D.F. Hsu (eds.): Graph Theory,
Combinatorics, Algorithms and Applications, SIAM Publications (1991) 511–517
12. L. G. Valiant.: The Complexity of Enumeration and Reliability Problems. SIAM
J. Comp. 8 (1979) 410–421
13. L. G. Valiant.: A Bridging Model for Parallel Computation. Communication of the
ACM 33 (1990) 103–111

