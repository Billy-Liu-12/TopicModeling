Computing Maximal Tori Using LiE and
Mathematica
Alfred G. No¨el
The University of Massachusetts, Department of Mathematics, Boston, MA
02125-3393, USA

Abstract. This paper describes an algorithm for computing maximal
tori of the reductive centralizer of a nilpotent element of an exceptional
complex symmetric space. It illustrates also a good example of the use
of Computer Algebra Systems to help answer important questions in the
ﬁeld of pure mathematics. Such tori play a fundamental rˆ
ole in several
problems such as: classiﬁcation of nilpotent orbits of real Lie groups [13],
description of admissible nilpotent orbits of real Lie groups [14], [15], [16],
[17], classiﬁcation of spherical nilpotent orbits [8], [9], determination of
component groups of centralizers of nilpotents in symmetric spaces [7],
[10].

1

Introduction

A few years ago, while we were at MIT, David Vogan asked us to investigate the
classiﬁcation of admissible orbits of real exceptional Lie Groups. This problem
was open for nearly 20 years. After consulting the literature we observed that
the problem could be solved by implementing a computational scheme based
on a theorem of Takuya Ohta [16]. The interested reader may look at our papers [14],[15] to see a solution. However the same computational scheme can be
adapted to several other problems which are part of a long term project which
started about seven years ago. As Computer Algebra Systems and computer
hardware become more and more powerful we expect them to be a very important part of the pure mathematician’s toolbox. In this paper we intend to explain
the basic aspects of the algorithmic scheme and to share our thoughts on some
software development projects that we shall start in the near future in order to
achieve some compatibility between LiE and Mathematica. We hope that pure
mathematicians and computer algebra systems designers will ﬁnd this paper interesting. In order to proceed we need some deﬁnitions. The reader who is not
familiar with the concepts of Lie algebras and Lie groups or with the notations
used below may want to peruse the appendix at the end of this paper.
Let g be a real semisimple Lie algebra with adjoint Lie group G and gC its
complexiﬁcation. Also let g = k ⊕ p be a Cartan decomposition of g. Finally, let
θ be the corresponding Cartan involution of g and σ be the conjugation of gC with
regard to g. Then gC = kC ⊕ pC where kC and pC are obtained by complexifying
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 728–736, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Computing Maximal Tori Using LiE and Mathematica

729

k and p respectively. Denote by KC the maximal compact connected subgroup
of the adjoint group GC of gC , with Lie algebra kC .
A triple (x, e, f ) in gC is called a standard triple if [x, e] = 2e, [x, f ] = −2f and
[e, f ] = x. If x ∈ kC , e and f ∈ pC then (x, e, f ) is said to be normal. It is a result of
Kostant and Rallis [12] that any nilpotent e of pC can be embedded in a standard
normal triple (x, e, f ). Let kC (x,e,f ) be the centralizer of (x, e, f ) in kC . Then it
is known that kC (x,e,f ) is a reductive Lie algebra. Moreover kC e = kC (x,e,f ) ⊕ ne
where ne is a nilpotent ideal.

2

Problem Description and Algorithm Implementation

Using the above notations we would like to solve the following problem:
Let t be a Cartan subalgebra of gC such that x ∈ t. Find a maximal torus t1 of
kC (x,e,f ) such that t1 ⊆ t.
The reader should be aware that in general t1 = t(x,e,f . A counterexample can
be found in [14]. Furthermore, there is currently no good characterization of
such a torus in the literature. And our conversation with several experts led us
to believe that such characterization may be quite technical.
Our contribution consists of the solution of the problem for complex exceptional
symmetric spaces pC via an algorithm described below.
From now on we shall assume that the group G is a simple exceptional real
Lie group and that GC /K C is one of its associated complex symmetric spaces.
Let ∆ be the simple Bourbaki root system of GC . If G has equal rank, that is
the rank(G) = rank( K) then we choose ∆k , a simple root system of K C , to
be of Vogan type otherwise we choose ∆k as in Djokovi´c [5]. The Vogan root
systems are described in Knapp [11]. Up to conjugacy we can always chose a
representative of a class given in Djokovi´c [4],[5]. Hence it is enough to compute
t1 from the data given there. To simplify the description of the algorithm we
assume that g has equal rank.
Algorithm
Input: g is a real exceptional simple Lie algebra, ∆k = {β1 , . . . , βl }, where l is
the rank of kC , and t is a Cartan subalgebra of gC deﬁne by ∆k .
Computation
1. Compute x using the values of βi (x). Such values are found in Djokovi´c [4],
[5].
r

2. Using x, express e =
i=1

cγi Xγi , where γi is a non compact root, Xγi a non

zero root vector and cγi a complex number, in one of the regular semisimple

730

A.G. No¨el

subalgebra le of minimal rank r given in Djokovi´c. Create the normal triple
(x, e, f )
3. Compute the intersection of the kernels of γi on t. Observe that the complex
span of such an intersection is a maximal torus in kC (x,e,f ) .
Output: t1 is the complex span of the intersection computed in 3.
Implementation
We use two software packages LiE version 1.1 and Mathematica version 4.0 to
implement the previous algorithm. The fact that Mathematica oﬀers an environment for symbolic computation makes it possible to solve certain systems of
equations in a nice way. We could have used Mapple for that purpose also. We
have tried to use some Mathematica packages for Coxeter groups but we were
not satisﬁed with the results. Mathematica [21] is a well known package. LiE is
used mostly by mathematicians and physicists who perform computations of a
Lie group theoretic nature. LiE does not provide an environment for symbolic
computation. However using vectors and matrices with integer entries as basic
computational objects it does allow the programmer to access and test a lot of
non trivial results and conjectures about complex reductive Lie groups, their
representations and their Weyl groups. Moreover, it only works with integer
numbers and does not have a polynomial system of equations solver. LiE is written in C and run mostly on Unix systems. There are also some executables for
the classic Macintosh system. More information on Lie can be found in [18]. The
computations were carried out on a Power Macintosh G3 running Mac OS 8.6
with 256 Megabytes Random Access Memory. We did not time the algorithm.
However familiarity with Lie theory is enough to convince us that most of the
modules in LiE should run fast. The only diﬃculty is the computation of the
nilpotent e when the 2-eigenspace of x in pC is large. We will say more about
this below. We shall ﬁrst give a generic implementation scheme and then we will
use a speciﬁc example with some pieces of code in order to give the reader a
good ﬂavor of the work.
To compute the neutral element x, we use the labeling given in Djokoki´c in order
to solve a linear system of equations in Mathematica. Once we have computed
x, we put its coeﬃcients in a one dimensional array that is fed to a routine
written in LiE. This routine computes the 2-eigenspace of x in pC and returns a
list of candidates for e. The list of candidates is a two-dimensional array which
is reconﬁgured and fed to Mathematica. This list yields a list of candidates for
f by negating its values. At this point Mathematica can test a candidate by
solving the system of equations [e, f ] = x on the two lists. Lie theory guarantees
the existence of a solution. We can now go back to LiE to compute the brackets
[Hαi , e] where αi are the simple roots of gC and Hαi ∈ t . This allows us to set
up a system of linear equations to be solved in Mathematica. The solution of

Computing Maximal Tori Using LiE and Mathematica

731

the last system gives a basis for a maximal torus in kC (x,e,f ) . This is the desired
torus.
Example
We choose this example so that the reader can quickly check the results. However
he or she should be aware that the algorithm can be used for all nilpotents in
the exceptional complex symmetric spaces. The reader is encouraged to consult
[14],[15]. Let g be EII (or E6(2) ), a real form ofE6 , and let ∆ = {α1 , α2 , . . . , α6 }
the Bourbaki simple roots of gC . Then ∆k = {β1 , . . . , β6 }, where β1 = α1 ,
β2 = α3 , β3 = α4 , β4 = α5 , β5 = α6 and β6 = α1 + 2α2 + 2α3 + 3α4 + 2α5 + α6 ,
is a set of simple roots for kC = sl6 (C) ⊕ sl2 (C). The root system deﬁned by ∆k
is a Vogan system. See Knapp [11] for more information on such systems.
We consider orbit 6 labeled ”00000 4” in Djokovic’s classiﬁcation [4]. We use the
given label to compute the neutral element x as follows:
Assume that x = aHα1 +bHα2 +cHα3 +dHα4 +eHα5 +f Hα6 with a, b, c, d, e, f ∈
ZZ. Using the Cartan matrix of E6 we solve the following system in Mathematica:
In[1]:= Solve [{2a−c == 0, −a+2c−d == 0, −b−c+2d−e == 0, −d+2e−f ==
0, −e + 2f == 0, b == 4}, {a, b, c, d, e, f }]
Out[1]:={{a → 2, b → 4, c → 4, d → 6, e → 4, f → 2}}.
Hence we ﬁnd x = 2Hα1 + 4Hα2 + 4Hα3 + 6Hα4 + 4Hα5 + 2Hα6 .
Next we show how to compute the nilpotent e. First, we generate a list of candidates in LiE as follows: ( This is the actual LiE code )
setdefault E6; n = n pos roots; l = Lie rank; alpha = pos roots;
# KC simple root system #
beta =
[[1,0, 0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0],[0,0,0,0,1,0], [0,0,0,0,0,1],[1,2,2,3,2,1]];
x=[2,4,4,6,4,2];
# Store all the roots #
neg roots = - alpha; roots = alpha ∧ neg roots;
for k = 1 to 2*n pos roots do
if (roots[k][1] != 1 && roots[k][1] != -1) then value = 0;
for i = 1 to l do
for j = 1 to l do
value = value + roots[k][i]*x[j] * Cartan(alpha[i], alpha[j]); od; od; ﬁ; od;
# Compute the 2 eigenspace of x in pC #
pc2 = 0; peigen2 = null(n pos roots, l);

732

A.G. No¨el

for k = 1 to 2*n pos roots do
if (roots[k][2] == 1
roots[k][2] == -1) then
pvalue = 0; for i = 1 to l do for j = 1 to l do
incr = roots[k][i]*x[j]; prod = Cartan(roots[i], roots[j]);
pvalue =pvalue + incr*prod; od; od; print (roots[k]); print(pvalue);
if (pvalue == 2) then pc2 = pc2+1; peigen2[pc2] = roots[k]; ﬁ; ﬁ; od;
# Create a list of candidates for e or compute e directly if possible #
count = 0; k = 2; c = null(k); for i = 1 to k do c[i] = i; od;
j= 1;
while j != 1 do if Cartan type([peigen2[c[1]],peigen2[c[2]]]) == A2T4)
then if (2([peigen2[c[1]] + peigen2[c[2]]) == x)
then for i =1 to k do print( peigen2[c[i]]); od; print (” ”) break;ﬁ;ﬁ;
j=k;
while c[j]== (pc2-k +j) do j = j-1; if j == 0 then break ﬁ; od;
if j !=0 then c[j] = c[j] +1 ﬁ;
for i = j+1 to k do if i == 1 then c[i] = 1 else c[i] = c[i-1] +1; ﬁ od;od;
The output of the above LiE session is two vectors [1,1,1,2,1,0] and [0,1,1,1,1,1]
which are the roots that deﬁne
√
e = 2(Xα1 +α2 +α3 +2α4 +α5 + Xα2 +α3 +α4 +α5 +α6 )
and
f=

√

2(X−(α1 +α2 +α3 +2α4 +α5 ) + X−(α2 +α3 +α4 +α5 +α6 ) ).

In most cases the equation [e, f ] = x has to be solved in Mathematica from the
list of candidates in order to determine e. Next we evaluate the base elements of
t on e in order to set up a system of equations to be solved in Mathematica. The
solutions of such a system will give a base of the desired maximal torus. Again
we show the implementation in the following LiE and Mathematica sessions.
e1 = [1,1,1,2,1,0]; e2 = [0,1,1,1,1,1];
for i =1 to l do print (alpha[i]); print (Cartan(e1,alpha[i])); od; print(” ”);
for i =1 to l do print (alpha[i]); print (Cartan(e2,alpha[i])); od;
Since the base elements that we want are of the form aHα1 + bHα2 + cHα3 +
dHα4 + eHα5 + f Hα6 , the output of the above LiE session is fed to Mathematica
in the form of the following system of equations.
In[2]:=Reduce[{a − c + d − f == 0, −a + b + c − d + f == 0}, {a, b, c, d, e, f, }]
Out[2]:= a == c − d + f &&b == 0
This last result gives us a base of the desired maximal torus
t1 = CHα5 ⊕ CHα1 + Hα3 ) ⊕ C(Hα4 + Hα6 ) ⊕ C(Hα3 + Hα4 ).

Computing Maximal Tori Using LiE and Mathematica

3

733

Conclusion and New Directions

The implementation of the algorithm described above has to be automated further. Currently, LiE and Mathematica do not share data. We had to write translators in order to transfer the diﬀerent lists to be processed. The implementation
of the search for the nilpotent is exhaustive, that is, we try to compute appropriate subsets of a subset of the 2-eigenspace of the neutral element. Such an
eigenspace could be large and therefore we need better search techniques in order
to quickly eliminate the branches of the search tree which will not take us to a
solution. We have started to work in this direction. We can use the theory of Lie
groups in order to increase the speed. However we would like to investigate the
possibility of using certain search techniques from the ﬁeld of Computer Science.
Mathematica is a proprietary multi-purpose software package and the source
code is not available to the public. This is not the case for LiE which is designed
speciﬁcally for computations in complex Lie groups and their representations.
The mathematical algorithms are well conceived and their implementations seem
to work well on average. In some cases where the Weyl group had to be processed, we observed some scalability problems. We are currently investigating
the possibility of adding more functions which deal with real Lie groups and
their representations. The scope and feasibility of such a project are being evaluated. An other approach is to realize LiE as a Mathematica package. We have
not looked at this alternative. However we believed that such package may not
work as well as the stand alone version. It is also desirable to design a good
graphic user interface for LiE. LiE is maintained by M. A. A. van Leeuwen at
l’Universit´e de Poitiers in France. More information on LiE can be obtained at
http://wwwmathlabo.univ-poitiers.fr/ maavl/LiE/.
We should point out that John Stembridge from the University of Michigan USA
has created a Mapple software package called Coxeter/Weyl for manipulating
weights and characters of irreducible representations of semisimple Lie algebras,
including functions for computing weight multiplicities, tensor product decompositions, and branching. However, we found LiE to be faster and easier to use
for the type of algorithms we sought to implement. Information on Coxeter/Weyl
can be obtained at http://www.math.lsa.umich.edu/ jrs/maple.html#coxeter.
This work was very enjoyable and continues to help us in our mathematical
research either for quickly checking conjectures or for carrying out non trivial
computations on Lie groups of moderate sizes. We expect this type of activities
to become more prevalent in theoretical investigations. The mathematically inclined reader will ﬁnd one more interesting application of the algorithm in the
following appendix.
Acknowledgment. The author wishes to thank the referees for their helpful
and insightful comments.

734

A.G. No¨el

References
1. Auslander L., Kostant B.: Polarization and unitary representations of solvable Lie
groups Invent. Math. 14 (1971) 255–354
2. Bourbaki N.: Groupes et Alg`ebre de Lie Chapitres 4,5,6, Elements de
math´ematique. MASSON (198)
3. Duﬂo M.: Construction de repr´
esentations unitaires d’un groupe de Lie, Harmonic
Analysis and Group Representations, C.I.M.E. (1982)
4. Djokovi´c D.: Classiﬁcation of nilpotent elements in simple exceptional real Lie algebras of inner type and description of their centralizers, J. Alg. 112 (1987) 577–585
5. Djokovi´c D.: Classiﬁcation of nilpotent elements in simple real Lie algebras E6(6)
and E6(−26) and description of their centralizers J. Alg. 116 (1988) 196–207
6. Kirillov A. A.: Unitary representations of nilpotent Lie groups Russian Math. Surveys l17 (1962) 57–110
7. King D. R.: The Component Groups of Nilpotents in Exceptional Simple Real Lie
Algebras Communications In Algebra l20 (1) (1992) 219–284
8. King D. R.: Spherical nilpotent orbits and the Kostant-Sekiguchi correspondence
To appear in Trans. Amer. Soc.
9. King D. R.: Classiﬁcation of spherical nilpotent orbits in complex symmetric space
submitted
10. King D. R., No¨el A. G.: Component Groups of Centralizers of Nilpotents in Complex Symmetric Spaces Journal of Algebra 232 (2000) 94–125
11. Knapp A. W.:Lie Groups Beyound an Introduction Birkh¨
auser, Progress in Mathematics Boston 140 (1996)
12. Kostant B., Rallis S.: Orbits and Representations associated with symmetric spaces
Amer. J. Math. 93 (1971) 753–809
13. Noel A. G.: Nilpotent orbits and theta-stable parabolic Subalgebras AMS Journal of
representation theory 2 (1998) 1–32
14. No¨el A. G.: Classiﬁcation of Admissible Nilpotent Orbits In simple Exceptional real
Lie algebras of Inner type AMS Journal of Representation Theory 5 (2001) 455–493
15. No¨el A. G.: Classiﬁcation of Admissible Nilpotent Orbits In simple real Lie algebras
E6(6) and E6(−26) AMS Journal of Representation Theory 5 (2001) 494–502
16. Ohta T.: Classiﬁcation of admissible nilpotent orbits in the classical real Lie algebras J. of Algebra 136, No. 1 (1991) 290–333
17. Schwartz J.: The determination of the admissible nilpotent orbits in real classical
groups Ph. D. Thesis M.I.T. Cambridge, MA (1987)
18. Van Leeuwen M. A. A., Cohen A. M., Lisser B.:LiE Apackage for Lie Group Computations Computer Algebra Nederland, Amsterdam The Netherlands (1992)
19. Vogan D. jr:Unitary representations of reductive groups Annals of Mathematical
Studies, Princeton University Press Study 118 (1987)
20. Vogan D. jr: Associated varieties and unipotent representations Harmonic Analysis
on Reductive Groups Birkh¨
auser, Boston-Basel-Berlin (1991) 315–388
21. Wolfram S.: The Mathematica Book Wolfram media, Cambridge University Press
(1998)

Computing Maximal Tori Using LiE and Mathematica

4

735

Appendix

I. Classiﬁcation of Real Nilpotent Orbits of G on g
The main result in [13] is a classiﬁcation of the nilpotent orbits of the real
group G on its real Lie algebras g. The classiﬁcation is an extension of the socalled Bala-Carter classiﬁcation for complex Lie groups. We were able to use the
Kostant-Sekiguchi correspondence to classify the nilpotent orbits of KC on pC
instead. Maintaining the above notations the main result is:
Theorem [No¨
el]. There is a 1-1 correspondence between triples (x, ef ) and
triples (l, q, w) where l is a (θ, σ)-stable minimal Levi subalgebra of gC containing
e, q a θ-stable parabolic subalgebra of the derived algebra of l and w a L ∩ KC module in pC . ( L is a connected Lie group of gC with Lie algebra l).
Proof. See [13].
The following proposition gives a construction of the minimal Lie algebra l via
the algorithm described in this paper.
Proposition [No¨
el]. If l is a minimal (σ, θ)-stable Levi subalgebra of gC containing a nilpotent element e of pC then l = gC t , where t is a maximal toral
subalagebra of kCe and gC t is the centralizer of t in gC .
Proof. See [13].
The next step in the development of the theory discussed in [13] is the explicit
realization of the parametrization given in the preceding theorem. Hence, it is
necessary to compute the minimal Levi subalgebra which contains the nilpotent.
Here is the LiE session corresponding to the orbit discussed earlier.
#Compute the minimal Levi contain e
#base of t
t1 = [0,0,0,0,1,0]; t2 = [1,0,1,0,0,0]; t3 = [0,0,0,1,0,1]; t4 = [0,0,1,1,0,0];
minlev = null(n pos roots,l); counter = 0;
for k = 1 to 2n pos roots do if
Cartan(t1,roots[k]) == 0 && Cartan(t2,roots[k]) == 0 &&
Cartan(t3,roots[k]) == 0 &&Cartan(t4,roots[k]) == 0 then counter =
counter+1; minlev[counter] = roots[k];ﬁ;od;
levy=null(counter,l);
for k = 1 to counter do levy[k]=minlev[k];od;
print(Cartan type(levy));
Thus we ﬁnd
[l, l] = CX±(α1 +α2 +α3 +2α4 +α5 ) ⊕ CX±(α2 +α3 +α4 +α5 +α6 ) ⊕
CX±(α1 +2α2 +2α3 +3α4 +2α5 +α6 ) .

736

A.G. No¨el

Hence l is of type A2 ⊕ T4 . The reader should be aware of the fact that the
derived subalgebra of the minimal theta-stable Levi containing the nilpotent is
not in general the regular semisimple subalgebra given by Djokovi´c.
II. Basic Deﬁnitions and Notations
A vector space g over C or IR, with a bilinear bracket operation [x, y] is called
a Lie algebra if [x, x] = 0 and [x, [y, z]] + [y, [z, x]] + [z, [x, y]] = 0. The set Mn
of n × n matrices is a Lie algebra with [A, B] = AB − BA where A and B are
matrices in Mn .
A Lie group G is a group and a manifold on which multiplication and taking
inverse are analytic. The tangent space of G at the identity element of G is called
the Lie algebra of G. The set GLn of all n × n invertible matrices is a Lie group
with Lie algebra Mn .
The classical Lie groups are closed subgroups of GLn . The exceptional Lie groups
are not subgroups of GLn . The same goes for Lie algebras.
A Lie group acts on its Lie algebra. For example, GLn acts on Mn by conjugation.
The orbits resulting from this action are called conjugacy classes.
A square matrix B = 0 is nilpotent if there exists p ∈ IN such that B n = 0. Each
element z ∈ g deﬁnes a map adz on g as follows: adz (y) = [z, y] for all y ∈ g.
An element z ∈ g is nilpotent if adz can be represented by a nilpotent matrix.
The conjugacy class of a nilpotent element consists of nilpotent elements and is
called a nilpotent orbit.
The set of elements of G which ﬁx a speciﬁc element x ∈ g is called the centralizer
of x in G and is denoted by Gx . The centralizer in G of a subset S of g centralizes
every element of S and is denoted by GS .
The set of elements y of g which commute with a speciﬁc element x ∈ g, that is
[x, y] = 0, is called the centralizer of x in g and is denoted by g x . The centralizer
in g of a subset S of g commutes with every element of S and is denoted by g S .
A real Lie algebra g has a Cartan decomposition g = k ⊕ p where k is a compact
Lie subalgebra of g and p a vector space. In this case there exists a Cartan
involution θ of g with 1-eigenspace k and (-1)-eigenspace p. For example, if
g = sl(n, IR), the set of n × n real matrices of trace zero, then k = so(n, IR) the
set of anti-symmetric matrices g and p is made of the symmetric matrices of g.
In this case the Cartan involution is deﬁned as θ(A) = −AT for all A ∈ g.
A maximal torus of g is a maximal Abelian subalgebra of g. If g = sl(n, IR) then
the set of diagonal matrices in g is a maximal torus of g.

