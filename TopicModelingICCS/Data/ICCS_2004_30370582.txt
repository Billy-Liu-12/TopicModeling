A Parallel Splitting up Algorithm for the
Determination of an Unknown Coeﬃcient in
Multi Dimensional Parabolic Problem
Daoud S. Daoud and D. Subasi
Department of Mathematics, Eastern Mediterranean Univ., Famaqusta, North
Cyprus – Mersin 10 Turkey
daoud.daoud@emu.edu.tr

Abstract. One of the global approach for solving the two dimensional
inverse parabolic problem is the predictor corrector which takes place
for evaluating the pair (u, p) and adjusting the evaluation for the desired accuracy. In this work we will present a new parallel algorithm(of
non iterative type) for solving two or higher dimensional inverse control
problem.

1

Introduction

In this article we study the ﬁnite diﬀerence method for approximating the source
control parameter p(t), and the solution u = u(x, y, t) of the following inverse
model problem deﬁned by; Find u = u(x, y, t) and p = p(t) which satisfy
ut =
u + p(t)u + φ(x, y, t) in Ω × [0, T ]
u(x, y, 0) = f (x, y) (x, y) ∈ Ω
u(x, y, t) = g(x, y, t) on∂Ω × [0, T ]

(1)

subject to the over speciﬁcation condition at a point (x∗ , y ∗ ) in the spatial domain Ω given by;
u(x∗ , y ∗ , t) = E(t)
(2)
One of the global techniques for solving problem (1) and (2) is the predictor
corrector ﬁnite diﬀerence scheme introduced by J.R. Canon et al. [1].
The proposed splitting algorithm is deﬁned to split the problem in accordance
to the spatial variables into independent one dimensional sub problems which
classiﬁed as Additive Splitting Method and its of non iterative type.

2

Parallel Splitting up Method

The general deﬁnition of the multi dimensional parabolic problem is given by
∂u
=
∂t

m
j

∂
∂u
(aj
)+f
∂xj
∂xj

in Ω × [0, T ],

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 582–585, 2004.
c Springer-Verlag Berlin Heidelberg 2004

(3)

A Parallel Splitting up Algorithm

583

where u(0) = u0 , with Dirichlet boundary conditions over ∂Ω × [0, T ].
The domain Ω is a bounded domain in Rm (m = 2, 3), aj are scalars, and
∂u
∂
the assembled coeﬃcients of the central diﬀerence discretization for ∂x
(aj ∂x
),
j
j
m

∂
∂u
and for j=1 ∂x
(aj ∂x
) are denoted by Aj and A, respectively. The key to the
j
j
splitting algorithm is the splitting up algorithm by Lu, et. al. [3], given by

Algorithm 1 First order implicit splitting up method.
j
Step1. Let δt > 0 be any time step. For j = 1, . . . m the solution v n+ 2m is given
by:
j
(4)
(I − mδtAj )v n+ 2m = v n + mδtf n+1
m

j

1
n+ 2m
.
Step 2. v n+1 = m
j=1 v
Step 3. If T < (n + 1)δt go to step 1, otherwise stop.

Theorem 2. The splitting up method given by algorithm 1 is globally a ﬁrst
order splitting in δt.
Proof. For the proof see [2]
Theorem 3. With respect to each spatial variable xj , j = 1, . . . m the soluj
tion v n+ 2m given by step 1, and the solution v n+1 by step 2 of algorithm 1 is
unconditionally stable in 2 norm.
Proof. For the proof see [2]

3

Inverse Control Problem Splitting Algorithm

In this section we will present the parallel splitting up algorithm for the inverse
control problem (1-2).
Algorithm 4 Inverse Problem Splitting up Method.
j
Step1. Let δt > 0 be any time step. For j = 1, . . . m solve for v n+ 2m :
v n+j/2m − v n
1
1
= Aj v n+j/2m + pn+1 v n+j/2m + φn+1
mδt
m
m
m

(5)

j

1
n+ 2m
Step 2. v n+1 = m
.
j=1 v
Step 3. If T < (n + 1)δt go to step 1, otherwise stop.

In the predictor corrector algorithm we ﬁrstly assume that v(x, y, t) and p(t) are
given at the time t = nδt, for δt > 0, and let l = 0, 1, . . . be the correction level.
The generic splitting up and Predictor-Corrector algorithm is given by
Algorithm 5 Predictor Corrector Method for Inverse Control Problem
Step 1: For l = 0 let pn+1(l) = pn , solve the following splitted one dimensional
problem
v n+1/4 −v n
= Ax v n+1/4 + 12 pn+1(0) v n+1/4 + 12 φn+1 ,
2δt
(6)
v n+1/2 −v n
1 n+1(0) n+1/2
1 n+1
n+1/2
= Ay v
+ 2p
v
+ 2φ
,
2δt

584

D.S. Daoud and D. Subasi

the solution v n+1(l) = 12 (v n+1/4 + v n+1/2 ), where Ax , and Ay represent the assembled coeﬃcients of the central diﬀerence approximation for uxx , and uyy respectively.
Step
2:
Since
v(xi∗ , yj ∗ , t)
=
E(t), where (xi∗ , yj ∗ )
=
(x∗ , y ∗ ) i.e v(xi∗ , yj ∗ , .)n+1(l) = E n+1(l) , then problem (1) for E(t) is
given by
E (t) = v(xi∗ , yj ∗ , t) + p(t)E(t) + φ(xi∗ , yj ∗ , t),
(7)
then the splitting up of (7) in accordance to the splitting up algorithm is given
by
E n+1/4(l) −E n
2δt

= vxx (xi∗ , yj ∗ , .)n+1(l) + 12 pxn+1(l+1) E n+1/4(l) + 12 φn+1 ,

E n+1/2(l) −E n
2δt

= vyy (x , y , .)
j∗

n+1(l)

+

1
n+1(l+1) n+1/2(l)
E
2 py

3

3

2.5

2.5

2

2

P(t)

P(t)

(8)
i∗

1.5

1

1.5

1
δ x=0.02,δ t=0.001,r=2.5
δ x=0.02,δ t=0.0005,r=1.25
δ x=0.02,δ t=0.0001,r=0.25
exact p
*
*
x =0.4,y =0.1

0.5

0

+

1 n+1
.
2φ

0

0.1

0.2

0.3

0.4

0.5
TIME

0.6

0.7

0.8

0.9

δ x=0.025,δ t=0.001,r=1.6
δ x=0.025,δ t=0.0005,r=0.8
δ x=0.025,δ t=0.0001,r=0.16
exact p
*
*
x =0.4,y =0.1

0.5

1

0

0

0.1

0.2

0.3

0.4

0.5
TIME

0.6

0.7

0.8

0.9

1

Fig. 1. The exact value and the estimated values of p(t) for diﬀerent δx and δt for
problem 1, simulated over [0, 1]

Table 1. The error due to the solution of problem 1 for x∗ = 0.4 and y ∗ = 0.1
δx = 0.02
r
2.5
1.6
1.25
0.8
0.25
error 4.63008e(-4) 2.52485e(-4) 2.07695e(-4) 8.93606e(-5) 6.05821e(-5)

The solution of (8) for px and py is given by
pxn+1(l+1) =

(E n+1/4(l) −E n )−2δtvxx (xi∗ ,yj ∗ ,.)n+1(l) −δtφn+1
,
δtE n+1/4(l)

py n+1(l+1) =

(E n+1/2(l) −E n )−2δtvyy (xi∗ ,yj ∗ ,.)n+1(l) −δtφn+1
,
δtE n+1/2(l)

pn+1(l+1) =

1
(pxn+1(l+1) + py n+1(l+1) ),
2

(9)

(10)

A Parallel Splitting up Algorithm

585

where px and py represent the correction with respect to x and y variables respectively.
Step3: Update the solution v n+1(l) using step 1 for l = 1, 2, . . . and considers
the latest value of pn+1(l+1) .
The value of pn+1(l+1) will then be adjusted till it satisﬁes the pre assigned
tolerance(e.g. |pn+1(l+1) − pn+1(l) | ≤ 10−4 ) for the evaluation of the pair (v, p)
over the time interval [tn , tn+1 ].
Theorem 6. The splitting up algorithm 4 of the inverse problem is a globally a
ﬁrst order algorithm in δt.

4

Numerical Experiments and Conclusion

In this section we report the numerical results from solving an inverse control
problem using algorithm 5 described in section 3 for evaluating the pair (u, p). In
general we take an exact solution u(x, y, t), source function p(t) we refer to the
general problem (1)-(2) to formulate our model problems using algorithm 5 to
compute the value of the solution v n+1 and p(t), and to compare the numerical
results with the exact values.
Model problem 1. We consider the following problem
ut =

u + p(t)u + φ(x, y, t),

deﬁned over Ω × [0, 1] with initial conditions u(x, y, 0) = sin( π4 (x + 2y)) and the
boundary conditions given by
u(0, y, t) = et sin( π2 y) , u(1, y, t) = et sin( π4 (1 + 2y)),
u(x, 0, t) = et sin( π4 x) , u(x, 1, t) = et sin( π4 (x + 2)),
From the numerical results we demonstrate the accuracy of the evaluated
function p(t) over the whole time interval [0, 1] independently on the time stepping or the spatial mesh spacings.

References
1. J.R. Cannon, Yanping Lin, S.Wang, Determination of source parameter in parabolic
equations. Meccanica, vol. 27:85-94,1992.
2. D.S. Daoud, Non Overlapping Domain Decomposition and Additive Splitting up
Methods for Multi Dimensional Parabolic Problem, Numer. Methods Partial Differerntial Eq. to appear.
3. T.Lu, P. Neittaanmaki, and X-C Tai, A parallel splitting up method and its application to Navier-Stokes equations. Applied Mathematics Letters, Vol. 4, No. 2:25-29,
1991.

