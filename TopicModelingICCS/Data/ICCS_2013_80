Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2193 – 2202

2013 International Conference on Computational Science

Multiagent approach for building distributed adaptive computing
system
Anatoly Kaliaeva*
a

Scientific Research Institute of Multiprocessor Computing Systems of Southern Federal University, R.Luxemburg st. 8-a, Taganrog
347922, Russia

Abstract
The new method of the organization of the distributed adaptive computations is offered in the presented paper. The method
allows using resources of computers united by a network for solving coherent tasks. The main feature of the given method
is adaptive correcting of process of computation if parameters of computing nodes are varying or nodes fail. This ability is
achieved because of system decentralization and multiagent approach: all nodes of computing system are equal and nodes
have to unite to solve incoming tasks. Also this paper presents algorithms based on the developed method and program
model of decentralized computing system.
© 2013
013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
and peer
review under
responsibility
of the
organizers
of the
International
Conference
on Computational
Selection and/or
peer-review
under
responsibility
of the
organizers
of 2013
the 2013
International
Conference
on Computational
Science
Science
Keywords: distributed computations, failsafe computations, adaptability, decentralization, communities, agents;

1. Introduction
The idea of using personal computers connected in a computing network for solving complicated timeconsuming tasks was proposed a long time ago. But only ten years ago such systems grew to be actively used
a massive appearing of local networks, the development of Internet access, and increasing of average speed of
network access and information exchange.
An analysis of modern GRID systems such as Globus Toolkit, Condor, AppLeS, X-COM, etc. [3] [4] [5] [6]
shows that most of them are supposed to be used in corporate computer networks that are based on many
computing devices with similar parameters and constant characteristics. The computations in such GRID

* Corresponding author. Tel.:+7-952-566-6699; fax: +7-952-566-6699.
E-mail address:anatoly.kaliaev@gmail.com.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.390

2194

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

networks are usually controlled by one or more servers that provide the service functions of GRID and
distributes incoming tasks between executive computing nodes (ECNs). [7]
Analysis of modern GRID systems shows that majority of functions of such systems are performed on the
service level, implemented on the basis of dedicated service compute nodes (servers). Such organization of the
system makes it easy to provide load balancing between executive computing nodes when the characteristics of
the ECNs vary in the predictable way.
But there is a great number of private personal computers which are connected by local and global networks
today. Major part of such computers is being idle during noticeable part of time. Therefore, there is an urgent
task of using of such idle resources for building GRID-systems. In this case, since such executive computing
nodes are owned by individuals, they actually can be considered as "freelancers". In other words, the main task
of using these ECNs as a part of a GRID is ability to change their characteristics at any moment as a result of
actions of the owner (for example, additional load). Additionally, the various ECNs that are working within a
single GRID may differ from each other, and this makes it even more difficult to distribute incoming tasks
effectively.
There were attempts of effective using of such computing resources in recent years. For example, the most
famous of such projects is SETI@home (setiathome.berkeley.edu) that uses the volunteers to filter the signals
from outer space in order to search for extraterrestrial intelligence. There are few other similar projects, but all
of them have limitations. They are oriented on solving of tasks that can be easily decomposed into separate,
independent pieces. It simplifies implementation of load balancing of the individual ECNs and ensures the
sustainability of the computational process when characteristics of the individual ECNs are dynamically
varying.
because it needs to solve complicated tasks, i.e. tasks consisting of information dependent parts. Such
complication appears because the set of ECNs in GRID (hereinafter we will call the whole set of ECNs a
computing network of GRID) is mixed: some ECNs have higher computational performance, some ECNs have
a wider channel, and the most important that there is dynamic change of parameters of ECNs depending on the
actions of their owners. It is clear that effective loading of a heterogeneous GRID network with dynamically
changing ECNs parameters while solving coherent tasks is a challenge. [8] This task can be solved by the
development of adaptive methods and algorithms for distributed computing in GRID, which will allow the
system to adjust computation process to dynamic changes of ECNs parameters in computing network. This
paper is dedicated to development of such methods.
2. Principles of organization and functioning of the decentralized GRID
The main idea of the developed method of GRID organization is to avoid dedicated servers and to switch to
a decentralized organization of the GRID. Such organization is based on interaction between independent
agents, implemented in all system ECNs. To solve the task of interaction between users and agents, the system
uses passive service nodes that perform the minimum of functions. Such nodes actually serve as so-called
"bulletin boards"(hereinafter in this work we will call such servers bulletin boards of BBs) Figure 1 shows a
structure chart of such a decentralized GRID.

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

Fig. 1.

2195

A structure chart of decentralized GRID

The main elements of the system are active interacting agents that plan, schedules and control computations
in GRID. Agents are physically implemented on basis of ECNs. They organize the process of solving incoming
tasks. To do that agents of the system interact and create a community for solving each task. [5] The main
purpose of the community is to solve its task during a specified time period. Set of the community can
dynamically vary. The system may experience a variety of dynamic changes in computing network, such as
failures of ECNs, variation of their productivity, reducing of data transfer rates, as well as other variations that
lead to increasing of time of the solution. Such variations make community change its composition in order to
ensure solving the task in a user-specified period of time.
In general a decentralized GRID-system works as follows. Users of the system use their computers to form
task they need to solve. Also they set requirements for the time of tasks solution and determine a motivation for
solving the task which is represented by some number of virtual beneficial points (in reality this points can be
money or something useful). After these steps user sends the task to a bulletin board. Agents of the
decentralized GRID are periodically asking BBs of system about presence of new tasks. If such a task is
detected, the agents begin to form the community to solve it. Each agent evaluates "profit" of the solution of the
task using tas
"beneficial", agent joins the community to solve this task. In this case, the new agent takes some part of
computations required to solve the task. At some point the number of agents in the community becomes
sufficient to solve the task in time. After that the expansion of the community stops. While performing the task
agents are monitoring parameters of their ECNs. If they detect variations of parameters of ECNs that cause
exceeding of user-specified, the community is ready to accept new agents. Once the task is solved, the result is
sent back to the user, and then the community dissolves itself.
As can be seen from the general description of the organization of a decentralized GRID, its work consists
of three main stages:
The formation of the task and placing it on the bulletin board;
Creation of a community of agents;

2196

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

Distribution of computations in the community.
Let us make a detailed description of these stages.
3. Formal representation of tasks in the system
Since it is assumed that the solution will be performed by the community of agents, therefore it is necessary
to present the task in a form suitable for parallelization. That is why we decided to use an information graph as
the basis for the task representation in the system.
Information graph of the task is a graph whose vertices correspond to certain parts of the task (in this paper
we will call such parts the subtasks) and arcs correspond to data streams transferred from one subtask to
another. In order to get the information graph of the task, users must present the task in a form which can be
logically decomposed into parts. These parts may be connected to each other by some information connections.
Q is associated with the i-th subtask. Also
In the information graph G(Q, X) of the task each vertex q i
user specifies the computational complexity Yi (defined as the maximum number of elementary operations
X is associated to the amount of data Wij,
performed in the solution this subtask). Each arc x(q i, qj)
transferred between subtasks qi and qj.
To simplify the parallelization of the task graph is convenient to represent the information in the multilayer
parallel form (MPF). To represent the graph in such form the vertices of the graph should be grouped into
subsets Vi according to the following rule: if the arc x(qm, qn) comes from the layer j to the layer k, then it is
necessarily that j <k. Figure 2 shows such form for the graph which consists of 9 vertices.

Fig. 2.

The multilayer parallel form of the information graph of the task

With the MPF of the task the maximum number of parallel subtasks can be easily evaluated. This parameter
is determined by the maximum number of vertices in the task graph layers. In addition, by means of MPF we
can generate the sequence of subtasks solutions. Enumeration starts from the lower layers and goes up.
Besides the user must specify two additional parameters: time for solving the task and number of benefit
points gained for its solution.
The task formed in such a way is sent to one of the bulletin boards of decentralized GRID.

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

4. Algorithm for creating a community of agents
When the user sends the task to the BB of the decentralized GRID, agents of the system start the process of
creation a community to solve it.
While working with the in decentralized GRID agents use the following algorithm for creation a community
to solve user tasks:
Algorithm 1 - Algorithm for creation a community of agents
1. The user sends the generated task to one of BBs of the system;
2. BB marks the incoming task as incomplete one;
3. Agent Aj is looking for tasks that are marked as incomplete at known BBs. For each of these tasks, agent
reads the following information:
(a) A graph G of the task;
(b) The price P for solving the task;
(c) Statuses of all subtasks qi (i = 1, K) ("Solved" / "Running" / "Free");
(d) Time left for solving Tmax;
(e) The level of parallelizable M;
4. Agent Aj analyzes the possibility and expediency of its participation in the community to solve found tasks.
To do this:
(a) Agent Aj ranks tasks by the ratio of their profitability value (P / Y);
(b) The agent Aj takes the next task from the list starting with the most profitable. If the list is empty, then
the agent proceeds to step 5;
(c) Agent Aj reads the number N of agents in community of the task and the parameters of their
performance;
(d) If N = M, where N is a number of agents involved in the community, and M is a level of parallelizable of
the task, the agent removes a task from a list of detected tasks and proceeds to step 4b;
(e) Agent finds out if present community is enough to solve task in time. To do it agent evaluates time of
solution

, where Yi is computational complexity of the still unsolved subtask q i, L is the

number still unsolved subtasks, Sj is the current performance of ECN j, D is a number of ECNs in the
community. If Tmax < Ts then the agent removes a task from a list of detected tasks and goes to step 4b;
(f) Agent Aj enters into the community;
(g) If the total performance of members of the community is enough to solve the task in time, then agent
marks the task as complete on the BB;
5. If the agent Aj joined the community, then go to next step, otherwise it goes into standby mode for defined
time interval Twaiting and then go to step 3;
6. The community is created (expanded) and agents begin to solve the task.
The algorithm above allows forming a community of agents in GRID to solve incoming tasks. The
composition of the community depends on the current performance of its members. This means that the
composition of the community is adapting to the dynamically changeable parameters of ECNs.
5. Algorithm of effective solution of the task in a community of agents
Once the community (consisting of at least one agent) was created, there is a problem of distribution of
subtasks between participants. The algorithm below shows how agent of community works in this mode.

2197

2198

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

Algorithm 2 - Algorithm for the distribution of sub-tasks in the community of agents
1. If the community has free agent (i.e. an agent who does not have current job), then it sends a message to all
other agents of community to launch procedure for the allocation of free subtasks. To perform that each
agent of community do:
(a) Agent Aj finds free subtask qR which have the smallest number;
(b) For the selected subtask qR agent Aj calculates the time of its execution
2. The resulting value

on its ECN j;

is sent to all other members of the community;

3. The agent, which provides the lowest execution time
take subtask qR and mark it as "running";
4. Agent, which is working on subtask q R, requests input data required for the solution from ECNs of subset
Qprev (where Qprev is a subset of vertices connected with vertex qR by input arc);
5. Agents of community begin (continue) the solution of subtasks assigned to them;
6. As soon as one of agents completes decision of the subtask, it marks the subtask as "Solved";
7. Using the computational complexity of solving the subtask Y R and time of decision T sol the agent
determines the current performance of its ECNs Sj, as Sj = YR / Tsol. The result values are reported to all
other agents and to BB;
8. Agents estimate current parameters of members of the community to find out possibility of solution of the
task in user-specified time. If community cannot solve all subtasks in time then they mark the task as
"incomplete" and process of creation of community starts (Algorithm 1);
9. If there are any free subtasks then go to step 1;
10. The user task is solved and the resulting data is transmitted to the BB and then to the user's PC.
The algorithm above is adaptive because it is taking into account dynamic variations of the parameters of
ECNs while distribution of subtasks in a community of agents.
6. The experimental results
To verify the efficiency of algorithms for adaptive allocation of network resources the program model of
decentralized GRID was created. This program model allows simulating the GRID containing of up to 10000
ECNs and having up to 1000 user tasks. The interface of the program model is shown in figure 3.

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

Fig. 3. Interface of program model of decentralized GRID

Here, the table on the right side defines a set of user tasks to be solved in the system, their status ("Free" /
"Running" / "Solved") and parameters (number of virtual points offered for their solution, the time required for
solution, complexity, etc.). Each task in this table is marked by its color for easy visualization of the modeling
process. A visual mapping of ECNs is situated in the center of the window (set of circles). Each circle
corresponds to a single ECN and its color matches the color of the task that is currently executing at this time.
The major goals of research were the experimental proof of efficiency of adaptive algorithms, as well as
evaluation of the relative loss of time of ECNs due to organization of the computational process when using
these algorithms. That is why several series of experiments with different computer network GRIDs and user
tasks have been carried out using the program model.
It was decided to use two criteria: percent of actual load at ECNs which can show loss of processor time due
to organizational purposes and percent of tasks solved in time which show efficiency of system for end-user.
There also was decided to explore influence of following parameters of GRID: number of ENCs (P1),
frequency of incoming tasks (P2), performance of ECN (S1), throughput of network (S2), computational
complexity of tasks (S3), volume of data to send between subtasks (S4), price for solving task (T1), number of
subtasks in task (T2) and time for solving (T3). As you can see there was great number of parameters that is
why it was necessary to use some kind of plan for performing experiments. I decided to divide parameters to
three groups: Primary (P) (system parameters), Secondary (S) (parameters of specific tasks and ECNs), and
Tertiary (T) (user-conditional parameters). For primary parameters I used absolute values, for secondary

2199

2200

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

relative values and for tertiary limited random values. Every experiment was pe
result more precise. Volume of article give no opportunity to show all the experimental results that is why
below you can see tables (Table 1, Table 2) with some part of them.
Table 1. Results for experiments. Percent of actual load at ECNs.

Secondary parameters
S1
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

+
+
+
+
+
+
+
+

S2
+
+
+
+
+
+
+
+
Average

S3

S4

+
+
+
+
+
+
+
+

+
+
+
+
+
+
+
+

P1=500
P2=10
80
79
81
83
82
81
84
83
78
77
81
80
77
77
81
83
80,43

P1=500
P2=50
89
87
89
90
89
88
89
88
86
86
88
87
86
85
87
89
87,68

Actual load at ECNs, %
P1=500
P1=1000
P2=100
P2=10
88
71
87
69
88
71
88
72
87
72
86
70
88
75
86
73
86
72
85
72
88
74
86
74
86
71
85
72
86
73
87
74
86,68
72,18

P1=1000
P2=50
76
76
77
78
76
75
78
77
78
78
79
77
75
77
77
80
77,12

P1=1000
P2=100
74
73
75
74
76
73
78
76
76
77
78
77
73
75
74
78
75,43

P1=500
P2=50
98
98
97
96
98
97
97
96
99
97
98
97
99
97
97
98
97,43

Tasks solved in time, %
P1=500
P1=1000
P2=100
P2=10
97
99
97
99
97
99
97
98
98
99
97
99
97
98
96
98
98
99
97
99
98
99
97
99
99
99
97
99
96
99
98
99
97,25
98,81

P1=1000
P2=50
98
98
98
98
99
98
98
98
99
98
98
98
99
98
98
99
98,25

P1=1000
P2=100
98
98
98
97
99
98
97
97
98
97
97
98
99
98
98
98
97,81

Table 2. Results for experiments. Percent of tasks solved in time.

Secondary parameters
S1
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

+
+
+
+
+
+
+
+

S2
+
+
+
+
+
+
+
+
Average

S3

S4

+
+
+
+
+
+
+
+

+
+
+
+
+
+
+
+

P1=500
P2=10
99
98
98
98
99
99
98
98
99
99
99
99
99
99
99
99
98,68

As you can see in tables experiments have shown that almost all the tasks received by the system have been
successfully solved
experiments were stopped), which proves the efficiency of the proposed algorithms. The actual load of ECNs

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

while organization ranged from 72% to 92% of the total time depending on parameters of GRIDs and tasks
which comparable with modern GRIDs.
To approve results of program model experiments it was necessary to develop prototype of decentralized
GRID. You can see screenshots of alpha version of agent and bulletin board of developed prototype on figures
below

Fig. 4. Prototype of agent of decentralized GRID.

Fig. 5. Prototype of bulletin board of decentralized GRID.

Using shown prototype of decentralized GRID we performed some local experiments in our laboratory (max
12 PCs). While performing experiments we were changing parameters of PCs by executing performanceconsuming applications and even turned computers down but GRID was working well. These experiments have
shown that proposed methods and algorithms are working in real systems. For now our main goal is working
on user interface for decentralized GRID and performing experiments using internet.

2201

2202

Anatoly Kaliaev / Procedia Computer Science 18 (2013) 2193 – 2202

7. Conclusion
In this paper we propose a method and algorithms of adaptive organization of distributed computing in a
decentralized GRID. The main features of the proposed approach are:
Ability to use in a GRID computing resources of individual PC owners (ECNs, "freelancers");
The decentralized organization of the computations, which implies the use of passive service nodes with a
minimum list of functions, while the main part of functions of organization is performed by agents physically
realized on ECNs;
Algorithm for creation a community of agents to deal with incoming user tasks on the one hand takes into
account the "interests" of the freelancers, but on the other hand provides minimization and adaptation of their
number in the community to changing parameters of the computer network, including the restoration due to
failures or shutdowns of ECNs.
Adaptive algorithm for the distribution of subtasks between the members of the community, taking into
account the current (dynamically changing) parameters of ECNs, ensuring their effective loading.
References
[1] Foster, I., Kesselman, C. and Tuecke, S. The Anatomy of the Grid: Enabling Scalable Virtual Organizations. International Journal of
High Performance Computing Applications, 15 (3). 200-222. 2001
[2] Foster, I., Kesselman, C., Nick, J. and Tuecke, S. The Physiology of the Grid: An Open Grid Services Architecture for Distributed
Systems Integration. Global Grid Forum, URL http://www.globus.org/alliance/publications/papers/ogsa.pdf
[3] About the Globus Toolkit, http://www.globus.org/toolkit/about.html
[4] How SETI@home works, http://seticlassic.ssl.berkeley.edu/about_seti/about_seti_at_home_1.html
[5] Thain, D., Tannenbaum, T., and Livny, M, Distributed Computing in Practice: The Condor Experience Concurrency and Computation:
Practice and Experience, Vol. 17, No. 2-4, 323-356, 2005
[6] Berman, F. Wolski, R. , Adaptive computing on the Grid using AppLeS, IEEE Transactions on Parallel and Distributed Systems, Vol.
14, 369 382, 2003
[7] Kalyaev. A.I. Decentralized organization manager for GRID community-based agents. - Proceedin
8, 2011, 230-238
[8] Kalyaev. A.I. The method and algorithms of adaptive distributed computing in a decentralized GRID - Herald of computer and
4-5, 2012. 28-33, 37-41

