Procedia Computer Science
Volume 80, 2016, Pages 472–483
ICCS 2016. The International Conference on Computational
Science

Network Services and Their Compositions for
Network Science Applications
Sherif Elmeligy Abdelhamid1 , Chris J. Kuhlman2 , Madhav V. Marathe1,2 , and
S. S. Ravi3
1

3

Department of Computer Science, Virginia Tech, Blacksburg, USA.
sherief@vt.edu
2
Biocomplexity Institute of Virginia Tech, Blacksburg, USA.
ckuhlman,mmarathe @vbi.vt.edu
Department of Computer Science, University at Albany, Albany, USA.
ravi@cs.albany.edu

Abstract
Network science is moving more and more to computing dynamics on networks (so-called contagion processes), in addition to computing structural network features (e.g., key players) and
other parameters. Generalized contagion processes impose additional data storage and processing demands that include more generic and versatile manipulations of networked data that
can be highly attributed. In this work, we describe a new network services and work ow system called MARS that supports structural network analyses and generalized network dynamics
analyses. It is accessible through the internet and can serve multiple simultaneous users and
software applications. In addition to managing various types of digital objects, MARS provides
services that enable applications (and UIs) to add, interrogate, query, analyze, and process
data. We focus on several network services and work ows of MARS. We also provide a case
study using a web-based application that MARS supports, and several performance evaluations
of scalability and work loads. We nd that MARS e ciently processes networks of hundreds of
millions of edges from many hundreds of simultaneous users.
Keywords: Network Science, Data Management, Services, Workﬂow Systems, Performance Evaluation

1
1.1

Introduction
Background and Motivation

Network science is the study of physical systems that are represented as networks. Various
disciplines make use of graph abstractions biology [9], sociology [13], and health sciences [17],
to name a few. Many software tools exist for computing structural properties (i.e., measures)
on networks (e.g., SNAP, NetworkX, Pajek). Far fewer systems exist for computing (contagion) dynamics on networks, particularly on large networks with 1 million or more vertices.
472

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.326

Network Services and Their Compositions · · ·

Abdelhamid, Kuhlman, Marathe and Ravi

(Typically for contagion dynamics, network vertices (nodes) represent agents with behaviors,
and edges represent agent interactions. States of agents change over time due to neighborhood
interactions.) Running these codes requires computing expertise in scripting to generate input
and to post-process output les, and are typically not accessible to those without computing
skills [11]. To provide accessibility to non-computing experts, still fewer systems combine high
performance computing (HPC) with an intuitive user interface (UI) as part of a web application
(web app), an example being EDISON [1].
Network services are essential for these types of web apps: they provide (meta)data storage,
query, and analysis facilities that are used by both UIs and (HPC) simulation engines. In
network science and dynamics, these data include agent dynamics models, their properties,
and validity ranges; and networks and their vertex and edge attributes. Services include query,
storage and retrieval, computations of network structural properties, and provenance. A speci c
example task is to nd all vertices with degree greater than 50 and kshell at least 25, and to
those nodes, assign the threshold pair (2,6) for dynamics computations. The required properties
(degree and kshell) may or may not exist for the speci ed network, and if they do not, then they
are computed on the y, results are returned to the requestor, and both the properties and the
query results are stored in a repository to service other requests. These and other requirements
motivated the development of a work ow system that we refer to as MARS.

1.2

Contributions

A summary of our major contributions follows.
1. MARS Work ow Service. MARS is a server-based work ow system developed for network science scienti c computing. It operates by concurrently servicing multiple users and
multiple applications and is accessed through the internet, using a well-de ned API. It was
designed to support both GUI functionality as well as HPC computational requirements, but
the system is application-agnostic and thus not tied to either. It contains a repository along
with several categories of services, but we con ne ourselves to network services and their workows in this paper. These services store networks, compute measures on them, manipulate
subsets of network vertices and edges, and query data. MARS also uses external applications
to support services, thereby increasing its capabilities. These applications currently run on an
HPC computing cluster (MARS uses a PBS scheduler to launch executables) and are oblivious
to the services that invoke them. MARS can be recon gured to run these third-party codes on
other platforms.
The services are stand-alone executing processes that can reside on di erent compute nodes
for increased performance through data locality and for exibility in mapping processes to
hardware. As we will demonstrate, work ows are composed not only of sequences of services,
but also of interleaved functions across services. Both stateless (i.e., REST-ful) and stateful
(i.e., session) interactions with external applications are supported. All aspects of stateful
interactions (hand-shaking, coordinating multiple requests by the same application for the same
session) are handled completely by MARS. A customized grammar for SQL-like queries is used
to support special requirements for network dynamics. While network science is the target
application for this work, a large part of this system is general; e.g., a new query parser could
be inserted for another application and the software used to compute measures on networks
can be changed out for other applications.
2. MARS and Big Data. The MARS repository houses many types of digital objects (DOs).
There are multiple categories for DOs; we focus here only on the networks that are stored for
simulations because they are central for computations in this domain. We use the relational
473

Network Services and Their Compositions · · ·

Abdelhamid, Kuhlman, Marathe and Ravi

database model and an SQL-like grammar. Currently, the largest networks within MARS have
9 million vertices and 406 million edges. Networks may be directed or undirected, and may
have any number of vertex and edge attributes, of any primitive type (e.g., integers, doubles,
strings). With advancements in data mining and machine learning (e.g., [8]) to infer properties
of networks, the ability of MARS to store domain attributes greatly expands the range of
possible network dynamics simulations. For the services described herein, MARS works with
multiple data formats, taking computing performance and data storage into consideration:
(unformatted) at ASCII les, relational DB tables, and formatted (e.g., JSON) data objects
are used in particular places, depending on requirements.
3. Illustrative Case Study. We provide a case study of contagion spread on a Facebook
network using EDISON. The dynamics model is a complex contagion and we show that the dynamics are a ected by the seeding conditions (i.e., what vertices of the network initially possess
the contagion), and by threshold assignments. Threshold is the parameter that characterizes
dynamics. We then identify the services and work ows of MARS that are used to support the
computations. Other EDISON studies that utilize MARS are provided in [1].
4. Performance Evaluation. A collection of performance evaluations is provided. They
focus mainly on the services for network query execution and computation of network structural
parameters, since these are most compute-intensive. Results are computed for various networks
to reveal how performance changes with network size, and demonstrate that MARS services
can be executed at scale on networks that range from a few thousand to hundreds-of-millions of
edges, with hundreds of simultaneous users. When used with UIs, where a human is in-the-loop,
execution time a ects user perception of the UI application.

1.3

Comparison of MARS with Other Systems

Our system is not a work ow management system (WMS) in the sense of [5] because our needs
are di erent in some ways. Our work ows are geared toward a particular application space
that of network science. Our system is both the environment for executing work ows and the
work ows themselves. Most large WMS are largely focused more on the physical infrastructure
for executing work ows across domains; e.g., Triana [16] uses Grid resources and Pegasus [4]
uses the Condor system and services many domains. Additional tools are sometimes used to
construct the work ows; e.g., Wings [7].
The scope of individual work ows run on WMSs is generally larger; they often run larger
applications that take longer times to execute (tens of thousands of CPU hours), and form endto-end (i.e., complete) analysis systems, an example being earthquake analyses [4]. In contrast,
our work ows tend to be more generic within network science and they are designed to
service many applications and users simultaneously. Most of our work ows do not run for
tens of hours, although some of them can, depending on input data size and the particular
analyses requested. This leads to another di erentiator, which is provenance, a key feature
of WMSs [5]. Because MARS services multiple users for targeted needs, we do not keep a
permanent log of every use of the system, although we could. However, we do store, index, and
curate results from service calls to improve response time in subsequent calls for service by the
same or di erent users and applications (a system service called memoization). WMSs typically
record data such as the calling program, date and time of execution, and other metadata to
trace these interactions.
Other works compose their own work ows and work ow systems using particular approaches
that suit their requirements, as do we. Examples include customized code [6], workbenches [14],
and Semantic Automated Discovery and Integration (SADI) services for the sematic web [3].
474

Network Services and Their Compositions · · ·

Abdelhamid, Kuhlman, Marathe and Ravi

Work ow systems are sometimes called problem solving environments and web services [12].

1.4

Technical Challenges

There are many challenges for building a system to support generalized contagion dynamics
simulations on large networks (those with 1 million or more vertices). These include the following. (i) Designing modular, interoperable categories of services, where each service is a
distinct, relocatable process. These designs enable more exible compositions of work ows and
can exploit data locality. (ii) Providing stateless (REST-ful) and stateful (i.e., session) services.
REST APIs are ubiquitous in service oriented architectures, but network science applications
also require stateful sessions with MARS. A session may be comprised of multiple interacting service and work ow requests to accommodate domain logic that requires software control
structures (such as IF or WHILE) to execute between calls to the MARS API. A simple example is book-keeping for multiple queries of network edges to ensure that properties for all edges
are speci ed in a dynamics model. (iii) Developing an SQL-like query grammar with special
features for network dynamics. Querying networks for dynamics involves not only querying for
sets of vertices and edges, but also manipulating recursively the return sets and performing set
operations. These are handled by our grammar, which can be viewed as an extension of SQL for
the relational model. As part of a larger e ort on cyberinfrastructures for network science, we
are also studying the resource description framework (RDF) of subject-predicate-object triples
and SPARQL query approaches. (iv) Fast processing of highly attributed big data to support UI
responsiveness. Supporting UIs provides an important use case for MARS. For example, if a
client application s sole job is to compute measures on large networks, and these are submitted
as batch jobs, latency is less of an issue. However, in MARS, computing graph measures is
not the end goal; it is a human-in-the-loop task that is part of the larger goal of computing
network dynamics. Hence, for user experience when working through a UI, the services must
be e cient. We provide data in Section 6.
Paper Organization. MARS is overviewed in Section 2. Selected network services and
work ow services are presented in Section 3 and 4. A case study using these services is provided
in Section 5 and performance evaluations of them comprise Section 6. Related Work and
Conclusions form the last two sections.

2

MARS System Overview

Figure 1 provides a system view of MARS. The boxes in the large central gray box represent
categories of services. The Repository (including the relational database management system,
RDMS) is central, as it houses a variety of DOs through an expanding collection of tables.
Figure 3 provides a large portion of the entity-relationship diagram for the repository. Tables in
brown indicate per-network node (vertex) and edge storage, including network-speci c schema
to account for network-varying attributes. The Search Engine Service (SES) is a low-level
service that provides support for several other services.
In this paper, we focus on four of the Network Services and two of the System Work ow
Services (SWS) of Figure 1. While many services may provide isolated results, almost all of
them also interact/cooperate through work ows in order to accomplish user-requested tasks.
Services acquire information about other services through the Registry Service. Each service
is a stand-alone process; services communicate via messages through a REST implementation
and use well-de ned APIs. The services may be constructed in any programming language. All
services to date are written in Python and Java.
475

Network Services and Their Compositions

Figure 1: Overview of the MARS system.

Abdelhamid, Kuhlman, Marathe and Ravi

Figure 2: Several network services (here
in gray boxes) correspond to orange boxes
in Figure 1. Each service is a separate
process and can run on diﬀerent servers.
Selected interactions among services are
illustrated.

External systems may request stateful interactions, and in these cases, MARS handles connections, handshaking, state storage, and storage updates with successive service requests within
one session. When a session ends, these resources are automatically recouped. These tasks are
transparent to the application making the requests.

3

Network Services

Selected major Network Services from Figure 1 are provided in Figure 2, along with a few
representative interactions. All are used in various workﬂows (Section 4). Several low-level
details are not addressed here, but are implemented; an example is DB table indexing.

3.1

Network Storage Service, NStS

NStS supports directed and undirected networks, and any number and type of vertex and edge
labels (also called attributes or properties). Attributes are essentially of two types: domainbased and structural. Structural attributes are generated within MARS using the Network
Measure Service, NMS (below). For each network added to the system, two tables are created
to store vertices and edges and their attributes, and properties of the network are added to
a network table, immediately and over time. Thus, these tables of attributes can grow and
shrink and table schemas correspondingly change. NStS supports these and other actions; cf.
Figure 2. Many networks have ﬁve to seven vertex attributes (one has 59) and a few edge
attributes. Simple and multi-edge graphs, and those with self-loops, can be stored with these
schema, but they are not well suited for hypergraphs.

3.2

Network Query Service, NQS, and Network Query Parsing Service, NQPS

The NQS and NQPS parse, validate, and execute queries submitted through the API. NQPS
contains a custom-built grammar that interprets SQL-like queries and specialized queries, and
476

Network Services and Their Compositions

Abdelhamid, Kuhlman, Marathe and Ravi

prevents SQL-injection. We chose SQL because of its widespread use. These queries are
performed on networks, and return sets of vertices or edges, or subgraphs in JSON format.
Illustrative queries are provided in Table 1.
Simple
queries return sets of vertices or edges based on their
properties.
The properties
may be domain-based and
structural parameters; e.g.,
see the ﬁrst query involving clustering coeﬃcient and
age. Mixed queries possess
WHERE clauses that are of
diﬀerent type than the return
set type. For example, one
may select a set of edges based
on the properties of incident
vertices (and also of edge properties). Sampling multisets returns number of sets of vertices or edges from a single
query. The query is separated
into number distinct queries
that can be executed in parallel if the DBMS supports
concurrency.
This capabilFigure 3: Partial view of the entity relationship diagram.
ity is useful in obtaining seed
sets for multiple simulation instances. NQS is one of the use cases for connection sessions (i.e., state-ful interactions with
MARS), where users may require multiple sets of vertices, for example, and specify diﬀerent
dynamics properties for each vertex set. A session is required to keep track of which vertices
have been selected (all vertices must be assigned properties). NQS also performs set operations,
which are useful in manipulating previously existing vertex and edge sets and their elements.
The return sets from a query contain the vertex (or edge) IDs, and may also contain all of
the graph element properties, depending on an interface argument. This enables ﬂexibility and
eﬃciency in terms of response time and data storage for the calling application, for large data
manipulation.
Table 1: Examples of four types of queries handled by the NQS and NQPS.
Query Example
select nodes from chicago where degree >40 and clustering ≤ 0 6 and age > 18
and age ≤ 25
select edges from epinions where u.degree >72 or v.degree >72 and
u.clustering <0.5 and v.clustering ≥ 0 5 and u.gender = M and u.age >60
select sample(number= 10, [10,30]) nodes from google-web where age >30
setA union setB except setC

Query Type
simple
mixed
sampling multisets
set operation

477

Network Services and Their Compositions · · ·

Abdelhamid, Kuhlman, Marathe and Ravi

Table 2: Selected measures supported by the NMS for vertices, edges, and graphs.
Network Measure
Betweenness centrality
Degree
Clustering coe cient
K-shell
Diameter
Radius

3.3

Programming
guage
Python
SQL DBMS
Python
Serial C++
Parallel C++
Python

Lan-

Package

Target

NetworkX
Standalone
Standalone
Standalone
Galib Library
NetworkX

Edge
Node
Node
Node
Network
Network

Network Query Search Service, NQSS

To improve user experience, all valid queries from all users are retained by the system and are
provided to a user in searchable catalog form. The goal is that a user does not have to compose
queries from scratch, but rather can search for an existing query that matches her needs, or
one close to the desired query, which can then be edited.

3.4

Network Measure Service, NMS

NMS computes structural measures of networks, such as degree, clustering coe cient, and
betweenness centrality of vertices of a graph. NMS uses a software repository of MARS that
includes paths to executables and command line arguments. New executables can be added to
the repository. NMS also uses a Job Submission Service (JSS) that generates qsub les for the
Torque/PBS scheduler (these executables run on an HPC cluster, but could be recon gured to
run on other hardware). This service is generic in that while we use it to compute structural
properties of graphs, NMS can launch any executable that operates on a graph and then add
the results to the Repository (with appropriate interactions with other services). This service
uses serial and parallel standalone executables and di erent libraries, some of which are listed
in Table 2. There can be multiple codes for the same measure, particularly for those that do not
scale well for large graphs, such as betweenness centrality. In this case, one code may compute
an exact solution and another may compute an approximate one.

4

System Work ow Service

The System Work ow Service (SWS) orchestrates the execution of sequences of MARS services
to accomplish tasks. Only system architects have access to these work ows; they can be created
(currently by coding the sequencing manually), modi ed, or deleted. All users may use the
work ows. Figure 4 presents two system work ows. The red Error ovals indicate that MARS
detects an error in the inputs and hence cannot complete the work ow. It is important to note
that each of these diagrams represents an algorithm, and that each of these algorithms invokes
a sequence of lower-level algorithms that are encoded in the services. The algorithms are not
provided here for lack of space.

4.1

Query Execution Work ow

The rst work ow (Figure 4(a)) executes user-supplied queries. The NQSS may help a user
construct a valid query (not shown in the gure). The Parsing Service parses the query against
a grammar. If the query exists (determined by the Memoization Service) in the Repository
and it is not a sampling multiset query, then the NQS returns the stored results immediately.
478

Network Services and Their Compositions

(a)

Abdelhamid, Kuhlman, Marathe and Ravi

(b)

Figure 4: Examples of system workﬂows for (a) query execution, which orchestrates ﬁve
diﬀerent services, the NQPS (in yellow), NQS (in pink), NMS (in blue), NStS (in grey) and
NQSS (in green);(b) validating new queries, performed solely by the NQS (in pink), and can
be part of query execution workﬂow in (a).
Otherwise, a query validation workﬂow (described in Figure (b)) is launched and the workﬂow
ends if the query is not valid. Otherwise, MARS determines whether the query requires measures
that are not currently stored (using the Memoization Service), but for which an executable
exists. If an executable does not exist, the workﬂow returns the result “invalid”. If an executable
does exist, the NMS computes the required measure, NStS stores the results in the Repository,
and query execution resumes through the NQS. Note that the gray boxes are not connected
in the workﬂow: functionality of the NStS is spread across the workﬂow. Other services have
similar features in other workﬂows.

4.2

Query Validation Workﬂow

The second workﬂow (Figure 4(b)) is used to validate new queries entered by users. This
process is launched either as part of the query execution workﬂow, or individually, if a user
wants to validate a query before execution. NQS is only used in the workﬂow. This example
illustrates how a workﬂow can be executed by a single service, in contrast to Figure 4(a) where
ﬁve services interoperate.

5

Illustrative Case Study

We examine the spread of complex contagions in networks, where vertices can be in state 0
(resp., 1), meaning that a vertex does not (resp., does) possess a contagion. We investigate the
contagion spread size (i.e., the fraction of vertices in state 1) as a function of time. See Figure 5;
these results were generated using EDISON [1]. The threshold θ is the same for all vertices in
one simulation, and is given in the legend. The threshold of a vertex v is the minimum number
of neighbors that it requires to be in state 1 for v to transition from state 0 to 1. Once in
state 1, a vertex remains in that state. This can represent rumor-spreading, for example. The
300 seed nodes for each of the 50 runs (the curves in the plot are averages over these runs) were
determined randomly from all vertices with degree d > 20 (solid curves) or d < 10 (dashed).
For a given d regime, the seed vertex sets are the same for all thresholds, for comparison. As
vertex threshold θ increases, the ﬁnal fraction of vertices in state 1 decreases, and the time to
479

Network Services and Their Compositions

Abdelhamid, Kuhlman, Marathe and Ravi

Figure 5: Complex contagion simulations on a Facebook network of 63392 vertices, where the
time histories of the cumulative fraction of nodes in state 1 (i.e., the aﬀected state) are
plotted against time, for diﬀerent thresholds θ.
reach this maximum fraction increases. As threshold increases, the disparity in results between
these cases for d, for a ﬁxed θ, increases.
Several MARS services are used in this study: NMS, NStS, NQS, NQPS, NQSS, and Memoization Service. Of particular note, to select seed vertices, the compact query feature and
special features of the query grammar were used to specify all 50 sets of 300 seed nodes for
each analysis, with a single query. The workﬂow of Figure 4(a) is used twice in each of the 8
EDISON analyses. Other services and workﬂows that are beyond the scope of this paper were
also used.

6

Performance Evaluation

Several experiments have been completed to evaluate various aspects of MARS and directly
address issues brought up in Sections 1, 3, and 4. We show ﬁve results here. In all of these
studies, the networks are treated as undirected and range up to 400 million edges in size. We
test the NQS and NMS because these involve the most processing among the network services.
The test system is a virtual machine comprised of an Intel Xeon X5670, 2.93 GHz processor
running CentOS release 6.7. The services tested were implemented with Python 2.7.5.
Experiment 1: Eﬀect of using memoization on query time. We executed the same
query, to select all vertices of a graph, over selected networks stored in MARS: select nodes
from g, where g is the name of the network. The JSON string return data from the ﬁrst
execution of a query is also stored as an entry in a table, indexed by a query ID, for fast
retrieval for repeated querying. The Memoization Service enters new data and interrogates
existing data. In the later case, the Memoization Service returns the JSON object immediately
if a submitted query is matched with a previously executed query. Without memoization, each
query gets executed in full. Figure 6 provides data for four networks. It is clear that as the size
of the network increases, the beneﬁts of memoization increases. Also, if we use the memoization
times as conservative estimates for checking whether requested results already exist, then this
time is a small fraction of the computation time when the results do not already exist; i.e.,
memoization overhead is low.
Experiment 2: Time to calculate degree and degree product using stand-alone
codes. Computing graph structural parameters is one of the network services (NMS). Figure 7 shows for several networks the times to compute selected vertex and edge parameters
using stand-alone Python codes, and overhead activities. The scenario is that networks are
downloaded from DB tables, the degree for each vertex and the product of the degrees of the
480

Network Services and Their Compositions

Abdelhamid, Kuhlman, Marathe and Ravi

incident vertices for each edge are computed, and the new data are uploaded into the DB and
indexes are re-established. These results show that overhead times can rival the compute times,
but that as more measures are computed with one download of the network, these costs are
amortized more eﬀectively. “Double storage” of networks, where they are housed in DB tables
and on the hard-drive in ASCII format, is selectively done in MARS to reduce overheads, and
these data explain why.
Experiment 3: Time to calculate diﬀerent structural parameters. The time to compute diﬀerent structural parameters can vary considerably. Here, we compare the times to compute the k-shell and degree of each vertex of selected networks using stand-alone executable
codes for the structural computations, including the overheads of the previous experiment.
Figure 8 demonstrates that execution times can be signiﬁcant when the graph is large (e.g.,
almost 300 million edges), although this will depend on the graph parameter. Data such as
these explain why a set of measures is computed for a network when it is initially uploaded into
MARS (as part of a workﬂow), and is not made visible until these computations have ﬁnished:
to hide latency.

Figure 6: Time to return
query results for four
networks when using the
Memoization Service (and
not) for networks up to
4.1 million vertices (400 M
edges).

Figure 7: Total time to
compute degree per vertex
(vertex property) and
degree product (edge
property), along with
overhead times, for several
networks.

Figure 8: Times to compute
graph measures (degree and
k-shell per vertex) for
several networks, up to
9 million vertices and
273 million edges.

Experiment 4: Time to calculate vertex degree using the DBMS versus programming language. The results of a previous experiment demonstrated that overhead times
associated with downloading a graph and uploading vertex and edge properties can be signiﬁcant. Consequently, if graph measures can be computed within the DB, then these overheads
can be eliminated. To compare these approaches, the degree of each node is computed within
the DB and by the approach of Experiment 2. Results in Figure 9 show that for larger networks,
the time savings of performing the computations within the DB is signiﬁcant. For example,
for Pokec (1.6 million vertices, 30 million edges), the compute time within the DB is about
16% that for downloading the network and computing measures with a stand-alone Python
code. Hence, measures that are suﬃciently simple to compute within the DBMS should be.
The DB-generated results use indexed tables. As with virtually all DB operations on large
datasets, results are highly dependent on indexing. It also highlights the beneﬁts of using
parallel programs for structural computations (here the Python computations are serial).
Experiment 5: Network services load testing. Since MARS may simultaneously service
multiple applications and multiple users, the expected number of concurrent service requests
could be in the 100s or more. To investigate scalability, we used the open source load testing
software SoapUI (https://www.soapui.org/) to generate diﬀerent types of loads on MARS,
481

Network Services and Their Compositions

Figure 9: Execution times that may be
realized for network structural properties
that can be computed within the DBMS
for networks up to 1.6 million vertices and
30 million edges.

Abdelhamid, Kuhlman, Marathe and Ravi

Figure 10: Average execution time to
return query results across diﬀerent values
of simultaneous query requests (x-axis).
The average execution time is stable,
indicating scalability.

based on a simulated number of users, each making one service request. Here, we evaluate a
particular query on the netscience (1.5K vertices) and Google (875K vertices) networks: select
nodes from g where id < 50, where g is the name of the network. Results for the tests are
shown in Figure 10, where the number of user requests increases slowly over time from 1 to
2500. The average time to execute the query across the entire set of users whose size is indicated
on the x-axis, is relatively stable at about 0.1 seconds, and thus indicates that the system is
scalable to at least roughly 2500 users.

7

Additional Related Work

A number of issues were addressed in Section 1.3, particularly as MARS diﬀers from other systems. Here, we take a more general view of workﬂow and query systems. There are many other
WMSs, like Taverna [18], and Kepler [10] that ﬁt the same basic description given previously.
Although we chose SQL and relational databases for their familiarity among users, this
is not required. There are SPARQL (i.e., RDF)-to-SQL translators and reverse translators.
There are also several extensions to SPARQL. Other query languages for networked data have
been proposed; see a recent survey [2]. GraphDB focuses on spatially embedded networks such
as highway systems or power lines. GOOD is based on an object-oriented model and can be
used to modify graph structure; it is a starting point for other languages. Horton [15] enables
execution of queries on large distributed graphs in parallel.

8

Conclusions and Future Work

We have described a new system of services and domain-based workﬂows for network science,
with priority on supporting generalized contagion dynamics on networks. These are described
and performance data are provided for several of these services. A case study was provided that
used several services and workﬂows in simulating network dynamics. MARS is actively being
worked and new services are being added.

Acknowledgements
We thank the anonymous reviewers for their useful comments and suggestions. We thank
our external collaborators and members of the Network Dynamics and Simulation Science
Laboratory (NDSSL). We thank Dr. Maleq Khan for providing a couple of parallel codes for
network measures. This work was partially supported by DTRA Grant HDTRA1-11-1-0016,
DTRA CNIMS Contract HDTRA1-11-D-0016-0001, and NSF NetSE Grant CNS-1011769.
482

Network Services and Their Compositions · · ·

Abdelhamid, Kuhlman, Marathe and Ravi

References
[1] Sherif El Meligy Abdelhamid, Chris J. Kuhlman, Gizem Korkmaz, Madhav V. Marathe, and S. S.
Ravi. Edison: a web application for computational health informatics at scale. In Proceedings of
the 6th ACM BCB Conference, pages 413–422. ACM, 2015.
[2] Renzo Angles and Claudio Gutierrez. Survey of graph database models. ACM Computing Surveys
(CSUR), 40(1):1, 2008.
[3] Mikel Egana Aranguren and Mark D. Wilkinson. Enhanced reproducibility of sadi web service
workﬂows with Galaxy and Docker. GigaScience, 4(59), 2015.
[4] Scott Callaghan, Ewa Deelman, Dan Gunter, Gideon Juve, Philip Maechling, Christopher Brooks,
Karan Vahi, Kevin Milner, Robert Graves, Edward Field, David Okaya, and Thomas Jordan.
Scaling up workﬂow-based applications. J. Comput. Syst. Sci., 76(6):428–446, September 2010.
[5] Ewa Deelman, Dennis Gannon, Matthew Shields, and Ian Taylor. Workﬂows and e-science: An
overview of workﬂow system features and capabilities. Future Gener. Comput. Syst., 25(5):528–
540, May 2009.
[6] Alastair P. Droop. qsubsec: a lightweight template system for deﬁning sun grid engine workﬂows.
Bioinformatics, 2014.
[7] Yolanda Gil, Varun Ratnakar, Jihie Kim, Pedro Antonio Gonzlez-Calero, Paul Groth, Joshua
Moody, and Ewa Deelman. WINGS: Intelligent workﬂow-based design of computational experiments. IEEE Intelligent Systems, 26(1), 2011.
[8] David Hallac, Jure Leskovec, and Stephen Boyd. Network lasso: Clustering and optimization in
large-scale graphs. In KDD, 2015.
[9] Ulas Karaoz, T. M. Murali, Stan Letovsky, Yu Zheng, Chunming Ding, Charles R. Cantor, and Simon Kasif. Whole-genome annotation by using evidence integration in functional-linkage networks.
Proceedings of the National Academy of Sciences, 101(9):2888–2893, 2004.
[10] Bertram Lud¨
ascher, Ilkay Altintas, Chad Berkley, Dan Higgins, Efrat Jaeger, Matthew Jones,
Edward A. Lee, Jing Tao, and Yang Zhao. Scientiﬁc workﬂow management and the kepler system:
Research articles. Concurr. Comput. : Pract. Exper., 18(10):1039–1065, August 2006.
[11] C. M. Macal and M. J. North. Tutorial on agent-based modelling and simulation. J. Simulation,
4:151–162, 2010.
[12] S. Majithia, M. Shields, I. Taylor, and I. Wang. Triana: a graphical web service composition and
execution toolkit. In Proceedings. IEEE International Conference on Web Services, pages 514–521,
July 2004.
[13] Daniel J. Myers and Pamela E. Oliver. The opposing forces diﬀusion model: the initiation and
repression of collective violence. Dynamics of Asymmetric Conﬂict, 1(2):164–189, 2008.
[14] Rami Rifaieh, Roger Unwin, Jeremy Carver, and Mark A. Miller. SWAMI: Integrating biological
databases and analysis tools within user friendly environment. In 4th International Workshop on
Data Integration in the Life Sciences (DILS), 2007.
[15] Mohamed Sarwat, Sameh Elnikety, Yuxiong He, and Gabriel Kliot. Horton: Online query execution
engine for large distributed graphs. In Data Engineering (ICDE), 2012 IEEE 28th International
Conference on, pages 1289–1292. IEEE, 2012.
[16] Ian Taylor, Matthew Shields, Ian Wang, and Andrew Harrison. The Triana workﬂow environment:
Architecture and applications. Workﬂows for e-Science, pages 320–339, 2007.
[17] Thomas W. Valente. Social networks and health: Models, methods, and applications. Oxford
University Press, 2010.
[18] Katherine Wolstencroft, Robert Haines, Donal Fellows, Alan Williams, et al. The taverna workﬂow
suite: designing and executing workﬂows of web services on the desktop, web or in the cloud.
Nucleic Acids Research, pages W557–W561, 2013.

483

