Exact and Approximate Algorithms for Topological
Design of Wide Area Networks with Non-simultaneous
Single Commodity Flows
Andrzej Kasprzak
Wroclaw University of Technology, Chair of Systems and Computer Networks
50-370 Wroclaw, Poland
kasprzak@zssk.pwr.wroc.pl

Abstract. The problem is concerned with designing of wide area computer
networks. This problem is very important from practical point of view because
the network, when designed efficiently, can and does become the lifeblood of a
business organization. The problem consists in selection of the nonsimultaneous single commodity flow routes, channel capacities and the wide
area network topology in order to maximize the value of the min-max flow
subject to the budget constraint. The problem is NP-complete. Then, the branch
and bound method is used to construct the exact algorithm. Several properties
of the problem are formulated and proved. Computational results are reported.

1 Introduction
Data transmission in a wide area network (WAN) environment involves the design of
a communication network. Several different formulations of the design problem can
be found in the literature; generally, they correspond to different choices of criterion,
of design variables and of constraints [1], [2], [3]. Usually delay, cost, throughput and
network reliability are applied as criteria. For the purpose of this paper the throughput
of the WAN represented by non-simultaneous single commodity flow requirements is
selected as criterion. The design variables are following: topology, channel capacities
and routing (i.e. flows). The techniques used for the solution of topological design
problem depend on the nature of cost-capacity functions. The problem is considered
for linear, concave and discrete cost-capacity functions [3]. Since the channel
capacities can be chosen from discrete sequence defined by ITU-T (International
Telecommunications Union – Telecommunications Sector) recommendations, then
only discrete cost-capacity function is important from practical point of view.
Consider the network and maximal flows between each pair of its nodes. Of all the
maximal flows in the network the one the value of which is minimal is called the minmax flow. The non-simultaneous single commodity flow requirements are understood
here as the value of the min-max flow in the network.
In the paper, we consider the new problem which is concerned with selection of the
capacities of channels and their geographical layout (i.e. network topology) so as to
satisfy the investment budget constraint and maximize the min-max flow value. The
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2660, pp. 799–808, 2003.
© Springer-Verlag Berlin Heidelberg 2003

800

A. Kasprzak

budget constraint limits the number of channels that may be included in the optimal
network topology as well as the values of capacities of these channels chosen from
the set of discrete values of capacities defined by ITU-T recommendations. The
discrete cost-capacity function is considered. Also we assume that there are only halfduplex channels in the WAN. The considered problem can be formulated as follows.
Given:

Maximize:
over:
subject to:

node location, possible channels locations, channel capacity options
and costs, budget of the WAN
value of min-max flow
topology, channel capacities, routing (i.e. min-max flow)
flow constraints, channel capacity constraints, budget constraint.

First, several cases of the network synthesis problem with non-simultaneous single
commodity flow requirements were studied by Gomory and Hu [2], [4]. They study
minimum cost network design problems with the linear cost-capacity function and
without budget constraint. The formulation of the considered problem differs from the
formulation of Gomory and Hu problem because: we assume the discrete costscapacity function (Gomory and Hu assume only linear cost-capacity function), we
take into account the budget constraint (Gomory and Hu problem is solved without
the budget constraint) and we use other optimization criterion (value of min-max
flow) than criteria used in [2], [4]. The main difference between the problem [2], [4]
and the problem considered here is such that the problem [2], [4] belongs to the class
of continuous problems and our problem belongs to the class of discrete problems.
The formulation of the problem considered here is similar to formulations of
topological design problems of WAN presented for example in the papers [1], [3].

2 Problem Formulation
Let p’ be the number of channels which must be installed in the WAN and let m be the
number of possible channels which may be used to build the WAN. The capacity of
the i-th channel which must be installed is denoted by c0i . For each potential i-th

{

}

channel there is the set ZC i = c1i , c 2i ,..., c ri (i )−1 of alternative capacities from among
which exactly one must be chosen if the i-th channel was chosen to build the network.
Let d ki be the cost of leasing capacity cki . Let the network S = G; c, d be the
model of the WAN. The network S is defined by a undirected multigraph G = N , L ,
by a capacity function c and by a discrete cost function d; L denotes the set of arcs.
N={1,..., n} - the set of nodes; N corresponds to the set of nodes of the WAN,
A={wm+1,..., wp} - the set of fixed undirected arcs; each arc from this set
corresponds to the channel which must be installed in the WAN; p=p’+m.

{

}

W i = w1i ,..., wri (i )−1 - the set of alternative undirected arcs; at most one arc from
this set may be used to construct the network S. This set corresponds to the i-th
channel which may be used to build the WAN. The number of all W i is equal to m.
The functions c and d are defined as follows:

Exact and Approximate Algorithms for Topological Design

( )
( )
c (w ) = c and d (w ) = 0 for every w ∈A,
where c (w ) and d (w ) are the capacity and the cost of the arc w

801

c wij = c ij and d wij = d ij for every wij ∈ W i , i=1,..., m,
i

i
0

i
j

i

i

i
j

i
j

, respectively.

All arcs from the set W i connect the same pair of nodes. Each arc wij corresponds
to capacity c ij from the set ZCi. If the arc wij is chosen to construct the network S,
then it means that the i-th channel with capacity c ij is used to build the WAN.

( )

Let’s call the arcs wri (i ) for i=1,..., m the empty arcs; then c wri (i ) = 0 and

{ }

( )

d wri (i ) = 0 . Then the set W i = W i ∪ wri (i ) is the set of alternative arcs from among
which exactly one arc must be used to construct the network S. If the arc wri (i ) is
chosen then the i-th channel is not used to build the WAN. Let the set W be the sum
of all sets Wi. Thus, L=W∪A. Let Xr⊂W be the set of arcs such that Xr includes
exactly one arc from each set Wi. Xr is called a selection. Let R be the set of all such
selections. Each selection Xr generates the undirected graph Gr = N , A ∪ X r and
the associated network S r = Gr ; c, d . Therefore, the network Sr defines unique
WAN because the selection Xr determines simultaneously potential channels which
are used to build the WAN and the values of capacities for these channels.
Let vr (i, j ) be the maximal flow value from source i to sink j in the network Sr.

vr (i, j ) is obtained solving the capacited maximal flow problem [2]. To find the
maximal flows between all pairs of nodes of the network the Gomory and Hu
algorithm [2] may be applied. It is easy to see that the flow between each pair of
nodes in the network Sr corresponds to the packets flow in the WAN which topology
and channel capacities are given by Xr.
Let V(Xr) be the value of min-max flow in the network Sr, then
V ( X r ) = min vr (i, j ) .
i , j∈ N

(1)

Let DB be the budget of the WAN and let d(Xr) be the building cost of Sr. Then,
the considered topological design problem can be formulated as follows.

max V ( X r )

(2)

Xr∈R

(3)

Xr

subject to

d (X r ) =

∑ d (w) ≤ DB .

w∈X r

(4)

802

A. Kasprzak

3 Calculation Scheme

( )

Assuming that r(i)=2 and c w1i = 1 for i=1,..., m, A=∅, the problem (2-4) is resolved
itself into the "two-connectivity" problem. Since the two-connectivity problem is NPcomplete [5] then the problem (2-4) is also NP-complete as more general. Then, the
branch and bound method can be used to construct the exact algorithm for solving the
considered problem. The detailed description of the calculation scheme of the branch
and bound method may be found in the literature.
Starting with the initial selection X1∈R we generate a sequence of selections. The
arc w∈W is called normal if w∈X1. The arc which does not belong to X1 is called
reverse. A replacement of any arc by other arc from Wi is called complementing.
The generation of a new selection involves the choice of a certain normal arc from
Xr for complementing; it is called the branching rules. For each selection Xr we
perform a testing operation (i.e. upper bound) to check the possibility of the
generation of Xs with the greater value of min-max flow than already found.
If the new selection Xs is generated from Xr by complementing the normal arc by
the reverse arc, then we constantly fix this reverse arc. It means that this reverse arc
cannot be complemented by any other in every possible successor of Xs. So, for each
selection Xr we constantly fix a set Fr ⊂ X r . The arcs which do not belong to Fr are
called free in Xr. If we want backtrack from X1 then the algorithm terminates.

4 Testing Operation
The basic task of this operation is the computation of upper bound UBr of value of
min-max flow for every possible successor generated from Xr. Let C r be the upper
bound of the sum of capacities of all arcs in Sr and in all its successors − it may be
calculated using the algorithm similar to one presented in [3].
For each network Ss we have v s (x, y ) ≤ c s (x, N ) for every x, y ∈ N , x ≠ y , where

cs (x, N ) is the sum of capacities of all arcs connected to node x in Ss. Summing over
all nodes x, y ∈ N , x ≠ y , we obtain
v s (N , N ) =

n

n

n

∑ ∑ v s (x, y ) ≤ (n − 1) ∑ c s (x, N ) = (n − 1)c s (N , N )

x =1 y =1
y≠ x

x =1

(5)

where cs (N , N ) is double sum of capacities of all arcs in Ss. Since V ( X s ) ≤ v s (x, y )
for every x, y ∈ N , x ≠ y , then after summing over all nodes x, y we obtain

n(n − 1)V ( X s ) ≤ vs ( N , N ) .

(6)

Exact and Approximate Algorithms for Topological Design

803

It follows from (5) and (6) that V ( X s ) ≤ c s (N , N ) / n . Since C r is the upper bound
of sum of all arc capacities in Sr and its successor Ss then cs (N , N ) ≤ 2C r . Then the
value of min-max flow V ( X s ) in every successor Xs of the Xr is bounded and

V ( X s ) ≤ 2C r / n .

(7)

Then the right hand side of the inequality (7) is the upper bound of min-max flow
value in every successor of Xr. The following corollary follows from (6) and (7).
Corollary 1. Let Xs be the successor of Xr∈R. The value V ( X s ) is maximal iff the

maximal flows between every pair of nodes in Ss are equal to 2C r / n .
Let vru (x, y ) be the maximal flow in the network S ru = Gru ; c, d , where

Gru = N , A ∪ Fr . The network S ru contains only arcs from the sets A and Fr which
are not changed in every successor of Sr. Then, for the maximal flows v s (x, y ) in
every successor Ss of the network Sr the following condition is satisfied

v s ( x, y ) ≥ v ru (x, y ) for every x, y ∈ N , x ≠ y .

(8)

Let us assume that there is v ru (k , l ) such that v ru (k , l ) > 2C r / n in Sr. It follows
from the above assumption and from (8) that for each successor Ss of the network Sr

the condition v s (k , l ) = v s (l , k ) > 2C r / n is satisfied.
Then, it follows from the corollary 1 that there also exist maximal flows less than
2C r / n in the network Ss. In such case, the value V ( X s ) may be bounded using
condition (6) only for x, y ∈ N such that x ≠ y and (x,y)≠(k,l). Then, taking into
account the conditions (5), (8) and that cs (N , N ) ≤ 2C r we obtain

V (X s ) ≤

(

)

2(n − 1)Cr − vru (k , l ) + vru (l , k )
.
n(n − 1) − 2

(9)

Next, if there exists vru (a, b ) , (a,b)≠(k,l) greater than the right hand side of (9) then
the above procedure should be done again. Based on (9) the following algorithm for
calculation the upper bound UBr may be formulated.
Step 1. Compute C r . Let B = {( x, y ) : x, y ∈ N , x ≠ y} , e = 2C r / n , a=0 and b=0.

Calculate all vru (x, y ) in S ru .
Step 2. If there are the pairs (x,y) such that vru (x, y ) > e in the set B then perform

a = a + v ru (x, y ) , b = b + 1 , B = B − {( x, y )} for each pair (x,y) and go to step 3.
Otherwise go to step 4.
Step 3. Calculate e = (2(n − 1)C r − a) /( n(n − 1) − b) and go to step 2.
Step 4. Perform UBr = e and stop.

804

A. Kasprzak

5 Branching Rules
The purpose of branching rules is to find the normal arc from Xr for complementing
and generating a successor of Xr with the possibly greatest value of the min-max flow.

(

)

The arc wij = x, y is adjacent to the cut X , X in the network Sr if there exists

x ∈ X and y ∈ X . The minimum capacity cut which is connected with the min-max
flow is called the min-max cut. It follows from the max-flow − min-cut theorem [2]
that if we want increase the maximal flow in the network then the minimum capacity
cut must increase. Then, it is easy to observe that the following corollary is true.
Corollary 2. Let Xr∈R. If there exists a network Ss (successor of Sr) such that
V ( X s ) > V ( X r ) then the selection Xs contains at least one reverse arc wij ∈ W − X r

of the normal arc wki ∈ X r adjacent to the min-max cut in Sr.
Let E r = X r − Fr be the set of all normal arcs which may be complemented by
reverse arcs in Xr, and let Mr be the set of all reverse arcs of normal arcs from the set
Er which are adjacent to min-max cut in Sr. Also let B be the subset of the set N, and
let z(x,B) be the number of node a such that a∈B and v r (x, a ) = min v r (x, b ) .

(

Theorem 1. Let Xr∈R and let Z, Z

)

b∈B

be the min-max cut in Sr. If Ss is obtained

from Sr by complementing the normal arc wki by the reverse arc wij = x, y ∈ M r
then

V ( X s ) ≥ V ( X r ) + ∆irkj ,

where

((

(

( ) ( )

)

∆irkj = min ∆irkj,1 , c wij − c wki , ∆irkj,2 ,

) )

∆irkj,1 = v r (z ( x, Z ), x ) − V ( X r ) and ∆irkj,2 = v r z y, Z , y − V ( X r ) .

(

)

Proof. Let e∈Z, t∈ Z and let Q, Q be the minimal capacity cut separating nodes
x and e in Sr (Fig. 1). Then vr (e, t ) = V ( X r ) . After complementing wki by wij we can
located "additional flow" ∆v r (e, t ) from e to t on paths from e to t which contain the
arc wij because it is the one way to increase the maximal flow vs (e, t ) in Ss. Then,
after complementing the value v s (e, t ) − vr (e, t ) will be greater or equal to minimum
of the three values: the value of additional flow from e to x, the difference between
capacities of arcs wij and wki and the value of additional flow from y to t. Thus,

(

( ) ( )

)

v s (e, t ) − v r (e, t ) ≥ min ∆v r (e, x ), c w ij − c wki , ∆v r ( y, t ) .

(10)

Assume that Z ⊂ Q . Otherwise we obtain the same results. Let U = Z ∩ Q and

(

) (

) (

)
additional flow from the node e to the node x is ∆v r (e, x ) = c(U , D ) − c(U , Z ) .
Because (U , Z ) ⊂ (Q, Q ) and (D, Z ) ⊄ (Q, Q ) then c(U , Z ) ≤ c(D, Z ) . Hence,

D = Z ∩ Q (Fig. 1). It is easy to observe that c Z , Z = c U , Z + c D, Z . The

Exact and Approximate Algorithms for Topological Design

(

(

)) ( (

) ( )) ( ) ( )
= v r (e, x ) − v r (e, t ) + c (D, Z ) − c (U , Z ) ≥ v r (e, x ) − v r (e, t ) .

∆v r (e, x ) = c(U , D ) + c U , Z − c U , Z + c D, Z + c D, Z − c U , Z =

Z

805

(11)

Z

D
U
x

t
e

y

Q

Q

Fig. 1. The location of nodes and sets in the set of all nodes N

Taking into account that vr (e, t ) = V ( X r ) we obtain ∆vr (e, x ) ≥ vr (e, x ) − V ( X r ) .
The minimum value of the right hand side of the last inequality is for e=z(x,Z), then

∆v r (e, x ) ≥ v r (z ( x, Z ), x ) − V ( X r ) = ∆irkj,1 .

(12)

Analogically we obtain that

((

) )

∆vr ( y, t ) ≥ vr z y, Z , y − V ( X r ) = ∆irkj,2 .

(13)

Substituting (12) and (13) into (10) and taking into account that vr (e, t ) = V ( X r )

(

( ) ( )

)

we obtain that v s (e, t ) − V ( X r ) ≥ min ∆irkj,1 , c w ij − c wki , ∆irkj,2 . Then

v s (e, t ) ≥ V ( X r ) + ∆irkj .

(14)

To find the upper bound of V(Xs) we should bounded the value of maximal flow
between any pair of nodes a and b in Ss. There are three possible cases:

A. a ∈ Z , b ∈ Z . We obtain, using (14) that vs (a, b ) ≥ V ( X r ) + ∆irkj ,
B. a, b ∈ Z . Taking into account the triangle inequality [2] we obtain
v s (a, b ) ≥ min(v s (a, t ), v s (b, t )) . Since values v s (a, t ) and v s (b, t ) are greater than

right hand side of (14) then vs (a, b ) ≥ V ( X r ) + ∆irkj ,

C. a, b ∈ Z . Analogically to case B: v s (a, b ) ≥ min (v s (e, a ), v s (e, b )) ≥ V ( X r ) + ∆irkj .
By definition the value of min-max flow is not greater than the value of the

maximal flow between each pair of nodes, then V ( X s ) ≥ V ( X r ) + ∆irkj .

ir
The choice criterion for complementing is as follows: δ kj
= V ( X r ) + ∆irkj − UBr .

806

A. Kasprzak

6 Approximate Algorithm
The exact algorithm involves to find the initial selection X1 such that X1∈R and for
which the condition (4) is satisfied. Moreover, the initial selection X1 should be the
near-optimal solution of the problem (2-4). To find the feasible initial selection X1 as
above the following approximate algorithm is proposed.
Step 1. Assign maximum available capacities arcs to X1 i.e. perform i=1 and

{

}

X 1(i ) = w11 , w12 ,..., w1m .

( )

( )

Step 2. Compute V X 1(i ) . If d X 1(i ) ≤ DB then the feasible initial selection is

found. Perform X 1 = X 1(i ) and the algorithm terminates. Otherwise go to step 3.

Step 3. Choose the arcs wkl = x, y ∈ X 1(i ) and wkl +1 ∈ W l − X 1(i ) for which the

( ) ( ) ( )

value vi (x, y ) − c wkl + c wkl +1 − V X 1(i ) is maximal; vi ( x, y ) denotes the maximal

flow from the node x to the node y in S1(i ) = G1(i ) ; c, d

(

{ }) { }

where G1(i ) = N , A ∪ X 1(i ) .

Perform i=i+1 and X 1(i ) = X 1(i −1) − wkl ∪ wkl +1 . Go to step 2.
Using the presented approximate algorithm we obtain the approximate (near
optimal) solutions in a short computation time and using the presented exact
algorithm we obtain the optimal solutions in a long computation time.

7 Computational Results
Extensive numerical experiments were performed with presented algorithms for many
different network topologies. The experiments were conducted with two main
purposes in mind: first, to examine the impact of various parameters on solutions (i.e.
min-max flow) and second, to test the computational efficiency of the algorithms.
The typical dependence of optimal min-max flow value on budget is presented in
the Fig. 2. It follows from results obtained for many considered networks that the
optimal min-max flow value in terms of budget is the function belonging to following
class:

for 0 ≤ DB < D1
0

V = a ⋅ DB + b for D1 ≤ DB ≤ D2
V
for D2 < DB ≤ DBmax
 max

(15)

where a, b, D1 and D2 are constant coefficients, Vmax and DBmax are maximal
feasible min-max flow value and maximal budget in the network respectively.
It is easy to see that D1 = −b / a and D2 = (Vmax − b ) / a . Then, to find the function
(15) for some network it is enough to known only the values of a and b. To compute a
and b the identification problem must be solved e.g. using the Last Squares Method.

Exact and Approximate Algorithms for Topological Design

807





9

















'%

Fig. 2. The dependence of optimal min-max flow value V on budget DB

The quality of the approximate algorithm was examined. Let the distance between
approximate and optimal solutions be denoted by k = (V ( X 1 ) − V / V ) ⋅ 100% . The
value k shows how the results obtained using the approximate algorithm are worse
than the optimal solutions. Let

K [a, b] =

number of solutions for which k ∈ [a,b ]
⋅ 100%
number of all solutions

denotes number of solutions obtained from approximate algorithm (in percentage)
which are greater than optimal solutions more than a% and less than b%. In the Fig. 3
the distance [0%] means that the approximate solutions obtained from the
approximate algorithm are equal to the optimal solutions obtained from the exact
algorithm, i. e. for such solutions the distance k = 0 .

Fig. 3. The distance between the approximate and optimal solutions

Moreover, the numerical experiments have demonstrated that there exists
dependence between numbers of iterations P of the exact algorithm and the

808

A. Kasprzak

normalized budget NDB = (DB / DBmax ) ⋅ 100% which was introduced to compare
the results obtained for different network topologies. It follows from numerical
experiments ( Fig. 4) that the exact algorithm is especially effective from computation
point of view for NDB∈[0,20]∪[40,100].

Fig. 4. The dependence of number of iteration P on normalized budget NDB

8 Conclusion
In the paper the exact and approximate algorithms are presented. It follows from
computational experiments that about 60% approximate solutions are equal to optimal
solutions (Fig. 3). We are of the opinion that the very good performance of the
approximate algorithm obviates, in most practical cases, the application of the exact
algorithm, that is for more time-consuming. Moreover, the proposed algorithms may
be also applied for solving the network design problem maximizing the number of
different routes between each pair of nodes subject to budget constraint. In this case,
each set Wi contains only the empty arc and the arc the capacity of which is equal to
one.

References
1. Amiri A.: A System for the Design of Packet-switched Communication Networks with
Economic Tradeoffs. Computer Communications 21 (1998) 1670–1680
2. Ford L. R., Fulkerson D. R.: Flows in Networks. Princeton University Press, Princeton, New
Jersey (1962)
3. Kasprzak A.: Topological Design of the Wide Area Networks. Wroclaw University of
Technology Press, Wroclaw (2001)
4. Minoux M.: Synthesis and Optimum Network Design Problems: Models, Solution Methods
and Applications. Networks 19 (1989) 313–360
5. Plesnik J., The Complexity of Design a Network with Minimum Diameter. Networks 11
(1981) 77–85

