Procedia Computer Science
Volume 29, 2014, Pages 1711–1721
ICCS 2014. 14th International Conference on Computational Science

GPGPU Application to the Computation of Hamiltonian
Matrix Elements between Non-orthogonal Slater
Determinants in the Monte Carlo Shell Model
Tomoaki Togashi1 , Noritaka Shimizu1 , Yutaka Utsuno1,2 , Takashi Abe3 , and
Takaharu Otsuka1,3
1

2

Center for Nuclear Study, University of Tokyo, Hongo Tokyo 113-0033, Japan
{togashi,shimizu}@cns.s.u-tokyo.ac.jp
Advanced Science Research Center, Japan Atomic Energy Agency, Tokai, Ibaraki 319-1195, Japan
utsuno.yutaka@jaea.go.jp
3
Deparment of Physics, University of Tokyo, Hongo Tokyo 113-0033, Japan
tabe@nt.phys.s.u-tokyo.ac.jp, otsuka@phys.s.u-tokyo.ac.jp

Abstract
We apply the computation with a GPU accelerator to calculate Hamiltonian matrix elements
between non-orthogonal Slater determinants utilized in the Monte Carlo shell model. The
bottleneck of this calculation is the two-body part in the computation of Hamiltonian matrix
elements. We explain an eﬃcient computational method to overcome this bottleneck. For
General-Purpose computing on the GPU (GPGPU) of this method, we propose a computational
procedure to avoid the unnecessary costs of data transfer into a GPU device and aim for eﬃcient
computation with the cuBLAS interface and the OpenACC directive. As a result, we achieve
about 40 times better performance in FLOPS as compared with a single-threaded process of
CPU for the two-body part in the computation of Hamiltonian matrix elements.
Keywords: GPGPU, cuBLAS, OpenACC

1

Introduction

Solving quantum many-body problems directly in reasonable computational time is one of
the main interests of modern physics and chemistry. For nuclear systems, one of the direct
solutions is to diagonalize a many-body Hamiltonian matrix with large harmonic-oscillator
single-particle basis sets, which is called a Conﬁguration Interaction (CI) calculation. The
nuclear Hamiltonian is diagonalized by the Lanczos method which is an iterative technique to
obtain the low-lying eigenvalues and eigenvectors. Presently, the Lanczos method is capable of
treating the diagonalization of the Hamiltonian matrix with 1010−11 dimensions. In order to
overcome the current limitation of the Lanczos method, the Monte Carlo shell model method
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.156

1711

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

is proposed. In the Monte Carlo shell model, non-orthogonal Slater determinants with singleparticle states of a linear combination of harmonic-oscillator basis are selected by obeying the
variational principle and the solution is obtained by utilizing the Hamiltonian matrix elements
between these Slater determinants with ∼ 102 dimensions. Recent study with the Monte
Carlo shell model calculation has solved the states of medium-mass nuclei corresponding to the
eigenstates of the Hamiltonian matrices with 1015−16 dimensions [1].
Several eﬀorts to apply GPGPU to CI calculations [2] have been performed recently. In
the Monte Carlo shell model, the GPGPU can be implemented with comparative ease since
the main computational problems are attributed to the operations of matrices and/or vectors
in the computation of the Hamiltonian matrix elements. Recent computation with a GPU
accelerator demonstrates greater performance for matrix operations than CPU computing [3].
Hence, we attempt to apply GPGPU to the computation of Hamiltonian matrix elements for
higher performance. In the present work, the CPU computing is also assigned to operations
which are not well suited for the GPU computing such as hybrid CPU-GPU platforms [4].
In section 2, we give an overview of the numerical method for computing Hamiltonian
matrix elements between non-orthogonal Slater determinants based on our previous work [5].
In section 3, we explain a procedure to compute Hamiltonian matrix elements for GPGPU. The
performance results are discussed in section 4. Finally, we summarize the present work and
refer to the future prospects of this study in section 5.

2

Numerical Method for Computing Hamiltonian Matrix
Elements

In the Monte Carlo shell model, the wave function of the nuclear many-body Hamiltonian is
approximated by a superposition of a ﬁnite number of non-orthogonal Slater determinants as
|Ψ =

f (q)|Φ(q) ,

(1)

q

where |Φ(q) and f (q) denote a Slater determinant and its amplitude indexed by the state q,
respectively. Each Slater determinant is represented by the product of the creation operators
of a linear combination of harmonic oscillator basis a†i (q):
Nf

|Φ(q) =
i

a†i (q)|− =

Nf

Ns

i

l

D(q)li c†l

|− ,

(2)

where Nf and Ns are the numbers of fermions regarded as nucleons (protons and neutrons) in
a nuclear system and the number of single-particle states of a harmonic-oscillator orbit, respectively. D(q)li is a complex coeﬃcient of a linear combination and c†l is a creation operator which
generates the single-particle state of a fermion from a vacuum |− . The Slater determinants
|Φ(q) are characterized practically by the Ns × Nf matrix (Ns ≥ Nf ) D(q). In general, the
above states |Φ(q) are non-orthogonal between one another: Φ(q )|Φ(q) = 0. The candidates of |Φ(q) , i.e., D(q) are generated and highly selected obeying the variational principle
by utilizing the formula of the auxiliary-ﬁeld Monte Carlo technique described in Ref. [6]. The
optimization of the vector f (q) in Eq. (1) is usually carried out by the variational principle:
δ Ψ|H|Ψ / Ψ|Ψ = 0 where the form of the Hamiltonian is written as
Ns

H=
l1 l2

1712

tl1 l2 c†l1 cl2 +

1
4

Ns
l1 l2 l3 l4

v¯l1 l2 ,l3 l4 c†l1 c†l2 cl3 cl4 .

(3)

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

In this equation, tl1 l2 and v¯l1 l2 ,l3 l4 represent the one- and two-body parts of the matrix elements
for single-particle bases in the Hamiltonian, respectively. The variational principle leads to the
Hill-Wheeler equation [7] corresponding to a generalized eigenvalue problem:
q (H(q , q) −
EN (q , q))f (q) = 0 for the norm matrix: N (q , q) = Φ(q )|Φ(q) and the Hamiltonian matrix:
H(q , q) = Φ(q )|H|Φ(q) .
Here, the computational problem is attributed to calculate the norm and Hamiltonian matrices. The norm matrix N (q , q) and the Hamiltonian matrix H(q , q) are written as
N (q , q) = det D(q )† · D(q) ,
Ns

tl1 l2 ρl2 l1 (q , q) +

H(q , q) = N (q , q)
l1 l2

1
2

Ns

ρl3 l1 (q , q) v¯l1 l2 ,l3 l4 ρl4 l2 (q , q) , (4)
l1 l2 l3 l4

where ρll (q , q) is the component of the Ns × Ns density matrix ρ(q , q):
ρ(q , q) = D(q) · D(q )† · D(q)

−1

· D(q )† .

(5)

The dots in Eqs. (4) and (5) represent matrix multiplication. This notation is also used in the
following.
Since a general Slater determinant of Eq. (2) does not necessarily possess the symmetries
that the Hamiltonian originally has, the broken symmetries have to be restored by projecting
the wave function onto a state which has good quantum numbers. For instance, the total
angular momentum is restored from |Φ(q) by performing a three-dimensional integration over
the Euler angles [8]. Practically, a numerical integration with the weight function W for Euler
angles is carried out for the norm matrix N (q , q) and the Hamiltonian matrix H(q , q). Hence,
for the total angular-momentum projection, Eq. (4) is rewritten as
Nm

N (q , q) =

Nm

W r N 0 (q , q r ),

H(q , q) =

r
0

W r N 0 (q , q r )H 0 (q , q r ),

r

r

†

r

N (q , q ) ≡ det D(q ) · D(q ) ,
H 0 (q , q r ) ≡

Ns
l1 l2

tl1 l2 ρl2 l1 (q , q r ) +

1
2

Ns

ρl3 l1 (q , q r ) v¯l1 l2 ,l3 l4 ρl4 l2 (q , q r ),

(6)

l1 l2 l3 l4

where Nm is the number of mesh points in a numerical integration, q r denotes the state |Φ(q)
rotated by the Euler angle corresponding to mesh point r, and W r is the value of the weight
function at mesh point r. Note that it is not necessary to rotate the other state |Φ(q ) since
the Hamiltonian and total angular-momentum projector are commutable and the projector has
an idempotent-like property [8].
The numerical calculation directly using Eq. (6) is ineﬃcient because v¯l1 l2 ,l3 l4 is very sparse.
The conservation of the z component of the angular momentum j leads to v¯l1 l2 ,l3 l4 = 0 unless
jz (l1 ) + jz (l2 ) = jz (l3 ) + jz (l4 ) is satisﬁed. Hence, we convert the sparse matrix v¯l1 l2 ,l3 l4 into
the block-dense matrix by using this conservation. First, the density-matrix elements ρll (q , q r )
are grouped according to Δm ≡ jz (l ) − jz (l), and the set of (l, l ) having a common Δm is
indexed by k = 1, 2, ..., NΔm as ρ˜ (Δm, q , q r )k . In a similar way, the two-body matrix elements
v¯l1 l2 ,l3 l4 are categorized according to Δm13 ≡ jz (l1 ) − jz (l3 ) and Δm24 ≡ jz (l2 ) − jz (l4 ) as
v˜ (Δm13 , Δm24 )k k , where the sets of (l1 , l3 ) and (l2 , l4 ) having Δm13 and Δm24 , respectively,
1713

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

˜ (i) in the left and
Figure 1: Schematic illustration of the operations of t ρ˜ · v˜ · ρ˜ and t ρ˜(i) · (˜
v · θ)
right sides, respectively.
are indexed by k and k. Then, the two-body part of H 0 (q , q r ) in Eq. (6) becomes
1
2
=

Ns

ρl3 l1 (q , q r ) v¯l1 l2 ,l3 l4 ρl4 l2 (q , q r )

l1 l2 l3 l4

1
2

1
=
2

ρ˜ (Δm13 , q , q r )k v˜ (Δm13 , Δm24 )k k ρ˜ (Δm24 , q , q r )k
Δm13 Δm24 k k

ρ˜ (−Δm, q , q r )k v˜ (−Δm, Δm)k k ρ˜ (Δm, q , q r )k ,

(7)

Δm k k

where the last equality is derived from the necessary condition for v¯l1 l2 ,l3 l4 being non-zero:
jz (l1 ) + jz (l2 ) = jz (l3 ) + jz (l4 ), i.e., Δm13 = jz (l1 ) − jz (l3 ) = −(jz (l2 ) − jz (l4 )) = −Δm24 ≡
−Δm. Since the density matrix ρ˜(Δm, q , q r ) and the two-body matrix v˜(−Δm, Δm) for a
given Δm are one- and two-dimensional arrays, respectively, Eq. (7) is regarded as a t (vector)
× (matrix) × (vector) operation to be t ρ˜ · v˜ · ρ˜ = Δm t ρ˜(−Δm) · v˜(−Δm, Δm) · ρ˜(Δm), where
the indexes are omitted for simplicity, as illustrated schematically on the left side (a) of Fig. 1.
It is clearly seen that v¯l1 l2 ,l3 l4 is transformed into the block-antidiagonal matrix v˜ whose blocks
are dense sub-matrices.
In addition to the two-body part, the one-body matrix elements tl1 l2 are grouped according
to Δm as a one-dimensional array of t˜(Δm) and the operation of the one-body part becomes
˜
˜(Δm, q , q r ). In this paper, this notation is also simpliﬁed as t˜ · ρ˜ in a similar
Δm t(Δm) · ρ
way to the two-body part.
The operation of Eq. (7) in the calculation of the Hamiltonian matrix of Eq. (6) has
room for improvement. The (matrix) × (vector) operation v˜ · ρ˜, which costs most of the
computational time, is repeated a number of times for diﬀerent ρ˜’s: v˜ · ρ˜(1) , v˜ · ρ˜(2) ,....
By binding vectors ρ˜(1) , ρ˜(2) , ..., ρ˜(Nc ) into a matrix θ ≡ (˜
ρ(1) , ρ˜(2) , ..., ρ˜(Nc ) ), repeated (matrix) × (vector) operations are carried out by a (matrix) × (matrix) operation at one time:
(˜
v · ρ˜(1) , v˜ · ρ˜(2) , ..., v˜ · ρ˜(Nc ) ) = v˜ · θ, where the number of columns Nc can be chosen arbitrarily.
Then, the two-body part of the Hamiltonian matrix for the i-th density matrix is given by
t (i)
ρ˜ · (˜
v · θ)(i) , where (˜
v · θ)(i) stands for the i-th column of the matrix v˜ · θ, illustrated schematically on the right side (b) of Fig. 1. Ideally, by binding the Nm ’s density matrices in Eq. (6) into
a matrix, this computation should be carried out at one time on the whole. However, actually,
one needs to introduce the chunk size of the number of density matrices to be bound into a
˜ (i)
matrix, Nb , due to limitations of memory size. Hence, in practice, the operation of t ρ˜(i) ·(˜
v · θ)
(1) (2)
(Nb )
˜
where θ ≡ (˜
ρ , ρ˜ , ..., ρ˜
) is performed. In our previous work, the matrix multiplication of
v˜ · θ˜ computed by the BLAS interface allowed us to achieve eﬃcient performance in the CPU
computing.
1714

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

Figure 2: Computational procedure in this work. The detail is described in text.

3

Computational Procedure

In this section, we explain a procedure to compute Eq. (6) with Eq. (7) for GPGPU. Here, we
mention the main point to achieving eﬃcient computation in GPGPU: in short, data transfer
into a GPU device is carried out with as small a number of times as possible. In GPGPU, data
transfer into a GPU device can be a new bottleneck due to the low memory bandwidth of PCI
Express bus transactions between the CPU and GPU. In this work, we propose a procedure to
avoid transferring the data into a GPU device many times.
Figure 2 shows the computational procedure schematically. Before this process, the data of
t˜ and v˜ are transferred into a GPU device because they are ﬁxed for the whole process. On the
other hand, the density matrices ρ˜, which are calculated by the sets of various states |Φ(q) , need
to be computed for each set. Hence, one should note the number of times data is transferred into
a GPU device for the density matrices ρ˜. In this work, as shown in Fig. 2, the computational
parts of the CPU and GPU are separated perfectly. The CPU computing consists of the ﬁrst,
second and third steps for the computation of density matrices. The ﬁrst step is to compute
D(q (i) ) by rotating the state |Φ(q) by the Euler angle corresponding to the mesh point (i).
The second is to compute D(q (i) ) · (D(q )† · D(q (i) ))−1 and N 0 (q , q (i) ) = det(D(q )† · D(q (i) )).
Then, in the third step, we create the Nb Ns × Nf matrix θ tmp whose (i)-th sub-matrix is
D(q (i) ) · (D(q )† · D(q (i) ))−1 as shown in Fig. 2. The CPU part takes charge of the complicated
operations for the Ns × Nf small matrices of D(q) and D(q ), which are not eﬃcient enough for
the GPU computing. In the fourth step, the data of θ tmp saved in the third step are transferred
1715

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

into the GPU device. The data transfer into the GPU device is necessary only once by utilizing
the data saved as only one matrix θ tmp .
The GPU computing performs the rest of the computation of the density matrices in the ﬁfth
step and the computation of the one- and two-body parts in the Hamiltonian matrix element
in the sixth step. In the ﬁfth step, the matrix multiplication θ tmp · D(q )† is performed and the
Nb Ns ×Ns matrix θ tmp ·D(q )† is transformed into the matrix with Nb ’s columns θ˜ according to
Δm as mentioned in section 2. This step reduces the repeated matrix multiplication operations
of D(q (i) ) · (D(q )† · D(q (i) ))−1 and D(q )† into one operation of θ tmp · D(q )† . Practically, for
the computation of Eq. (7), the complex matrix θ˜ is separated into the real and imaginary parts
and has 2Nb ’s columns for more eﬃciency because the matrix v˜ is real due to the rotational
and time-reversal symmetries of the nuclear Hamiltonian. In the sixth step, the operations for
˜ (i) and the two-body part t ρ˜(i) · (˜
˜ (i) in the Hamiltonian are carried
the one-body part (t˜ · θ)
v · θ)
out in the GPU device by using θ˜ computed in the ﬁfth step. The operations of the matrix
˜ and v˜ · θ˜ are computed by the cuBLAS [3] interface, and the
multiplication θ tmp · D(q )† , t˜ · θ,
˜ (i) is performed by the OpenACC directive [9]. Finally, the data
scalar product of t ρ˜(i) · (˜
v · θ)
of the Nb ’s matrix elements of H 0 (q , q (1) ), ..., H 0 (q , q (i) ), ..., H 0 (q , q (Nb ) ) are returned into the
host of the CPU process.

4

Measurement of Performance

In this section, computational performance is compared between a single-threaded process of
the CPU and the use of one GPU accelerator by adopting a realistic many-body system and
measuring the elapsed time to compute the Hamiltonian matrix elements.

4.1

Benchmark System

In this work, we consider a nuclear system composed of eight protons and eight neutrons, i.e.,
16
O, and the nuclear Hamiltonian is taken as a JISP16 interaction [10]. We introduce major
shells (Nshell ) which deﬁne the sets of harmonic-oscillator single-particle orbits and adopt Nshell
= 4, 5, 6 and 7. The number of single-particle states Ns and the set of harmonic-oscillator
single-particle orbits for each major shell are listed in Table 1. The number of single-particle
states Ns is generally determined from the number of major shells Nshell : Ns = Nshell · (Nshell +
1) · (Nshell + 2)/3. Each single-particle state of the Slater determinant is assumed to be a
pure proton or neutron. Hence, the number of fermions Nf is 8, for instance, and Ns is 168
in the case of Nshell = 7 for both proton and neutron states. Note that the matrix elements
H 0 (q , q r ) in Eq. (6) have no dependence on the number of fermions Nf and the number of
particles is irrelevant to the computational time for these matrix elements. For the total angularmomentum projection, the numbers of mesh points for three Euler angles are 30, 20, and 30,
respectively. In general, the parity symmetry should also be restored and its projector doubles
the Euler-angles mesh points by the space reﬂection. Hence, we need 30 × 20 × 30 × 2 = 36, 000
mesh points, whose value becomes Nm in Eq. (6). We take the number of the chunk size Nb
as 768, which is the optimized value for Nshell = 7. This means that the Euler-angle’s 36, 000
mesh points are split into 47 groups by Nb in this work.
It would be worth accounting for the dimension of the two-body matrix elements v˜ to
estimate the order of elementary ﬂoating-point operations. The dimensions of the dense submatrices grouped as Δm of v˜ are exhibited for each major shell Nshell in Fig. 3. As seen in
Table. 1 and Fig. 3, the dimension of the sub-matrix for Δm = 0 in v˜, NΔm=0 , which has
1716

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

the largest dimension among the sub-matrices, is so much larger than the number of singleparticle states Ns : NΔm=0
Ns . For the computation of the density matrices, the order of
operations is no more than O(Ns2 Nf ). The orders of operations for one- and two-body parts in
2
the Hamiltonian matrix elements are no more than O(NΔm=0 ) and O(NΔm=0
), respectively.
Hence, although the wasted operations for the sparse matrix v¯l1 l2 ,l3 l4 are reduced by Eq. (7), the
two-body part in the Hamiltonian matrix elements occupies almost all of the computational
2
operations on the whole and can be the bottleneck because O(NΔm=0
)
O(Ns2 Nf ) when
taking into account that Ns
Nf . Furthermore, since Ns increases with the number of major
3
shells Nshell according to O(Nshell
), this bottleneck becomes more critical in the case of a larger
major shell.
For the measurement of estimating the elapsed time, we compute the Hamiltonian matrix
elements among 5 diﬀerent Slater determinants, which lead to 15 diﬀerent matrix elements due
to the Hermiticity of the Hamiltonian matrix.
Nshell
4

Ns
40

5

70

6

112

Harmonic-Oscillator Single-Particle Orbits
(spdsf p) ≡ (0s1/2 )2 (0p3/2 )4 (0p1/2 )2 (0d5/2 )6 (0d3/2 )4 (1s1/2 )2
(0f7/2 )8 (0f5/2 )6 (1p3/2 )4 (1p1/2 )2
(spdsf p) + (gds),
(gds) ≡ (0g9/2 )10 (0g7/2 )8 (1d5/2 )6 (1d3/2 )4 (2s1/2 )2
(spdsf p) + (gds) + (hf p),
(hf p) ≡ (0h11/2 )12 (0h9/2 )10 (1f7/2 )8 (1f5/2 )6 (2p3/2 )4 (2p1/2 )2

7

168

(spdsf p) + (gds) + (hf p) + (igds),
(igds) ≡ (0i13/2 )14 (0i11/2 )12 (1g9/2 )10 (1g7/2 )8 (2d5/2 )6 (2d3/2 )4 (3s1/2 )2

Table 1: The number of single-particle states Ns and the set of harmonic-oscillator singleparticle orbits are listed for each major shell Nshell . Each harmonic-oscillator orbit is described
as (nlj )2j+1 , where n, l, and j denote the number of nodes, the orbital angular momentum as
the spectroscopic notation, and the total angular momentum, respectively, and has the diﬀerent
(2j + 1)’s z components of total angular momentum j.

Figure 3: The dimensions of the sub-matrices grouped as Δm of the two-body matrix elements
v˜ are plotted for each major shell Nshell .

1717

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

Figure 4: The performance for the two-body part in the computation of Hamiltonian matrix
elements. The left ﬁgure presents the speedup of the performance of the GPU computing to
that of the single-threaded CPU computing for each major shell Nshell . The right ﬁgure presents
the performance in FLOPS of the GPU computing directly.

4.2

Computational Environment

In this work, we use an AMD Opteron 6274 processor with a clock speed of 2.20 GHz and a
NVIDIA Tesla K20X GPU accelerator. The computational performance is compared between
a single-threaded process of CPU and that with one GPU accelerator. The theoretical peak
performance of the CPU is 17.6 GFLOPS per a CPU core. The GPU accelerator has the
theoretical peak performance of 1.31 TFLOPS for double precision. Our code, written in Fortran
90/95/2003, is compiled by PGI Accelerator Fortran Compiler Version 13.10 with the option to
designate NVIDIA CUDA Version 5.0. The matrices of D(q), tl1 l2 , and v¯l1 l2 ,l3 l4 are of doubleprecision. In the process of the CPU, matrix and/or vector operations are computed by the
BLAS interface with the optimized BLAS implementation: AMD Core Math Library (ACML).
As mentioned in section 3, the operations for steps 5 and 6 shown in Fig. 2 are performed with
the cuBLAS interface and the OpenACC directive by one GPU accelerator. The computational
performance is measured with wall-clock time at a microsecond-level resolution, which is enough
for our present purposes.

4.3

Results and Analyses

We have measured the elapsed time to compute the two-body part in Hamiltonian matrix elements and evaluated the performance in FLOPS. In this measurement, the elementary ﬂoatingpoint operations are counted theoretically for (matrix) × (matrix) operations v˜ · θ and (vector)
× (vector) operations t ρ˜(i) · (˜
v · θ)(i) in each Δm block. For instance, in the case of Nshell = 7,
when considering the isospin parts and the parity projection in this benchmark system, the
number of calls per chunk for the cuBLAS interface is 106. In this case, taking into account
that the number of the split by the chunk size Nb is 47 as mentioned in section 4.1, the total
number of calls leads to 106 × 47 = 4, 982.
On the left side of Fig. 4, this performance of the GPU computing in FLOPS is compared
with that of the single-threaded process of the CPU for each major shell Nshell . As seen here,
the GPU computing achieves more than 40 times better performance of the single-threaded
process of the CPU in the case of Nshell = 7. On the right side of Fig. 4, the performance of
the GPU in FLOPS shows the execution eﬃciency reaches about 50% of the theoretical peak
1718

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

Figure 5: The performance for the whole computation and the density matrices compared
between the use of the GPU and the single-threaded CPU computing. The computation of
density matrices corresponds to the steps from 1 to 5 in Fig. 2. The left ﬁgure represents the
speedup of the performance of computing with the GPU to that of only the single-threaded
CPU. In this ﬁgure, ’Total’ and ’ρ’ represent the results of the whole computation and the
density matrices, respectively. The right ﬁgure represents the ratio of the elapsed time to
compute the density matrices in the parts of the CPU and GPU to that in only the singlethreaded CPU. These CPU and GPU parts correspond to the steps from 1 to 3 and 4 to 5 in
Fig. 2, respectively.
performance of 1.31 TFLOPS for the computation of Nshell = 7. In this computation, the
performance of the single-threaded process of the CPU changes slightly from about 10 to 15
GFLOPS with the increase of major shells. This represents the saturation of the performance
of the CPU process. However, for the GPU computing, the performance is improved gradually
with the increase of major shells.
The behavior of the performance in this GPU computing can be interpreted as the performance of matrix multiplication with cuBLAS. To make the discussion clear, we introduce
2
¯Δm =
the average dimension of the dense sub-matrices in v˜ as N
Δm NΔm where NΔm
represents the dimension of the sub-matrix for Δm. The elementary ﬂoating-point operations
¯Δm × N
¯Δm matrix) × (N
¯Δm × 2Nb matrix) become nearly equal to those of v˜ · θ. The
of (N
¯Δm are about 300, 850, 2, 000 and 4, 100 for
average dimensions of the dense sub-matrices N
Nshell = 4, 5, 6 and 7, respectively. In this computational environment, we have measured the
¯Δm × N
¯Δm matrix) × (N
¯Δm × 2Nb matrix)
performance with cuBLAS of the operations of (N
for each Nshell . These performances correspond to about 70, 230, 500 and 720 GFLOPS for
Nshell = 4, 5, 6 and 7, respectively, which agrees roughly with the performance for the two-body
part in the computation of Hamiltonian matrix elements. For the extrapolation according to
¯Δm ≈ 7, 800 in Nshell = 8 and N
¯Δm ≈ 15, 600 in Nshell = 9, their performance is expected
N
to be about 900 and 990 GFLOPS in Nshell = 8 and 9, respectively, not taking into account
problem of memory size.
On the left side of Fig. 5, the performance in the inversion of the elapsed time for the whole
of the computation including the transactions between the CPU and GPU is compared between
computing with the GPU and that of only the single-threaded CPU. The performance with the
GPU computing for total computation attains about 27 times better performance of only the
single-threaded CPU in the case of Nshell = 7. For the whole of the computation, the elapsed
time to compute the one-body part is negligible, but that of the density matrices ρ˜ is moderate.
1719

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

In this work, although we focus on improvement in eﬃciency for the computation of the twobody part, the GPU computing is applied partly to the computation of the density matrices ρ˜
at step 5 in Fig. 2. As seen on the right side of Fig. 5, this application of the GPU reduces the
computational time of the density matrices. As in the two-body part, the performance for the
computation of the density matrices is better with the increase of major shells. However, its
change is not as drastic as that of the two-body part. This can be explained by the property
of the GPU computation, where its computational performance is better when the number of
elementary ﬂoating-point operations is larger, because the order of operations of θ tmp · D(q )†
˜ (i) in the twoin the computation of the density matrices is O(Nb Ns2 Nf ), and that of t ρ˜(i) · (˜
v · θ)
2
2
2
body part is O(Nb NΔm=0 ) leading to O(Nb NΔm=0 )
O(Nb Ns Nf ) when taking into account
that Ns
Nf .

5

Summary and Prospects

We have applied GPGPU to compute the two-body part in Hamiltonian matrix elements between non-orthogonal Slater determinants in the Monte Carlo shell model to overcome its
bottleneck. In this work, we have proposed a computational procedure to minimize the transactions between the CPU and GPU for the GPGPU of Hamiltonian matrix elements. As a
result, we found that the GPU computing using the NVIDIA Tesla K20X GPU accelerator for
the two-body part achieves about 40 times better performance in FLOPS of the single-threaded
CPU, and its execution eﬃciency reaches about 50% of the theoretical peak performance of the
GPU accelerator in the case of Nshell = 7. Furthermore, in this computation, the GPU computing has also been applied to a part of the computation of the density matrices and has
contributed to the improvement of performance on the entire computation.
As future research, we would like to apply the hybrid of a multi-threaded CPU and GPU
for more eﬃciency. For better performance, the matrix multiplication for small matrices would
be computed in parallel by an algorithm with Dynamic Parallelism [11], which would enable a
thread to create the child threads and make ﬁner parallelization possible in a GPU device. The
memory size of the two-body matrix elements v˜ requires more gigabytes for Nshell ≥ 8 shown in
Fig. 3 of Ref. [5]. In the case of larger major shells, one GPU computing would not be feasible
and it would be indispensable to introduce multi-GPGPU environment.

Acknowledgments
This work is supported by High Performance Computing Infrastructure (HPCI) Strategic Programs for Innovative Research (SPIRE) Field 5 from MEXT. We acknowledge Mr. A. Naruse,
Dr. S. Morino, and Mr. Y. Hirano at NVIDIA for fruitful discussions and comments.

References
[1] N. Shimizu, T. Abe, Y. Tsunoda, Y. Utsuno, T. Yoshida, T. Mizusaki, M. Honma, and T. Otsuka.
New-generation monte carlo shell model for the k computer era. Prog. Theor. Exp. Phys., page
01A205, 2012.
[2] D. Oryspayev, H. Potter, P. Maris, M. Sosonkina, J. Vary, S. Binder, A. Calci, J. Langhammer,
and R. Roth. Leveraging gpus in ab initio nuclear physics calculations. In Parallel and Distributed
Processing Symposium Workshops & PhD Forum, 2013 IEEE 27th International, page 1365, 2013.
[3] NVIDIA Developer Zone. https://developer.nvidia.com/cuBLAS.

1720

GPGPU Application to the Monte Carlo Shell Model

Togashi, Shimizu, Utsuno, Abe and Otsuka

[4] P. Benner, P. Ezzatti, E. S. Quintana-Ort´ı, and A. Rem´
on. Using hybrid cpu-gpu platforms to
accelerate the computation of the matrix sign function. In Eurp-Par 2009 Parallel Processing
Workshops, Lecture Notes in Computer Science, volume 6043, page 132, 2010.
[5] Y. Utsuno, N. Shimizu, T. Otsuka, and T. Abe. Eﬃcient computation of hamiltonian matrix
elements between non-orthogonal slater determinants. Comp. Phys. Comm., 184:102, 2013.
[6] T. Otsuka, M. Honma, T. Mizusaki, N. Shimizu, and Y. Utsuno. Monte carlo shell model for
atomic nuclei. Prog. Part. Nucl. Phys., 47:319, 2001.
[7] J. J. Griﬃn and J. A. Wheeler. Collective motions in nuclei by the method of generator coordinates.
Phys. Rev., 108:311, 1957.
[8] P. Ring and P. Schuck. The Nuclear Many-Body Problem. Springer, 1980.
[9] OpenACC Home. http://openacc.org.
[10] A. M. Shirokov, J. P. Vary, A. I. Mazur, and T. A. Weber. Realistic nuclear hamiltonian: Ab
exitu approach. Phys. Lett. B, 644:33, 2007.
[11] NVIDIA, Cuda Dynamic Parallelism Programming Guide.
http://docs.nvidia.com/cuda/pdf/CUDA_Dynamic_Parallelism_Programming_Guide.pdf.

1721

