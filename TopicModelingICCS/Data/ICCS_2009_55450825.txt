From Algorithm to Agent
Krzysztof Cetnarowicz
AGH University of Science and Technology, Krakow, Poland
cetnar@agh.edu.pl

Abstract. Although the notion of an agent has been used in computer
science for a dozens of years now it is still not very well deﬁned. It
seems that there is a lack of formal deﬁnition of such concepts as an
“object” and an “agent”. It makes diﬃcult formal analysis of algorithms
developed with their use. We should ﬁnd more formal description that
has connection with the basic deﬁnition of the algorithm.
In the paper we will propose an approach that may help to develop
more formal deﬁnitions of an agent and an object with the use of algorithm concept. Starting from the notion of the algorithm and using the
observation that complex algorithm should be developed with the use
of its decomposition we propose some ideas how we can consider such
notions as object and agent.
Proposed approach takes into consideration the necessity of the autonomy and of an agent and object and the problems of the interactions
between them and suggest the resolution of the problems by communication and observation process.
Presented concept of an object and an agent makes possible to ﬁnd
further more formal deﬁnitions of these notions and ﬁnd the crucial properties of these concepts and the main diﬀerence between the notion of
an object and the notion of an agent.

1

Introduction

Development of programming techniques and methods of software construction
may be viewed as the development of algorithms working in a given environment ([14]). The process of creation of new more powerful algorithms resulted in
deﬁnition of new elements that may be used to build them. Algorithms became
more complex and more diﬃcult to be developed. So, according to the principle:
“divide and conquer” we will decompose the algorithm and the development
process.
Although the notion of an agent has been used in computer science for dozens
of years now it is still not very well deﬁned. It seems that there is a lack of
formal deﬁnition of such concepts as an “object” and an “agent”. It makes
formal analysis of algorithms developed with the use of concept of an object or
an agent diﬃcult ([10], [11], [12]).We should ﬁnd better formal description that
has connection with the base deﬁnition of the algorithm.
In the paper we will propose an approach that may help to develop more
formal deﬁnitions of an agent and an object within the concept of an algorithm.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 825–834, 2009.
c Springer-Verlag Berlin Heidelberg 2009

826

K. Cetnarowicz

Starting from the notion of an algorithm and using the observation that complex
algorithm should be developed with the use of its decomposition we propose some
ideas how we can consider such notions as object and agent. Proposed approach
takes into consideration the necessity of the autonomy of an agent and an object
and the problems of the interactions between them and suggest the resolution
of the problems by communication and observation process. ([1], [2], [5], [7]).
Considering non-formal, based on intuition point of view of the concept of
an algorithm we can say that an algorithm describes activity of an object or an
agent in a given environment ([4], [8], [14]). These were programmers who noticed
that current algorithms are hard to be developed because of their complexity,
and the way to simplify the creation process is to use the previously mentioned
method “divide and conquer”. A number of approaches to divide (or rather
decompose) an algorithm had been invented and applied. The idea of an object
and then of an agent may be considered as the result of an attempt to enable
the decomposition of an algorithm. Presented here approach to the notion of an
object and an agent makes possible to ﬁnd properties of these concepts and the
diﬀerence between them.

2

Algorithm and Decomposition

We can consider the following deﬁnition of the algorithm ([13]):
Alg = (U, F )

(1)

where:
U − set,

U = ∅,

F : U →U

(2)

Function F is a partial function. It means that the domain of the function F is a
subset of the set U . Elements u of the set U are called states of the algorithm Alg.
Realization (execution) of the algorithm Alg for a given initial state u0 may
be considered as a ﬁnite sequence [3]:

or inﬁnite:
such, that

u0 , u1 , ... ui , ui+1 , ... uk

(3)

u0 , u1 , ... ui , ui+1 , ...

(4)

ui+1 = F (ui )

(5)
k

The sequence is ﬁnite when there is a ﬁnal state u . There is a ﬁnal state when
uk belongs to the Im(F ) and does not belong to the Dom(f ). So, the ﬁnal states
of the algorithm Alg are elements of the set U that do not belong to the domain
of the function F .
To determine elements u of the set U is usually realized by characteristic
properties of the elements u. We can consider elements of the set U as n-tuples
of characteristic parameters [6]:
uk = (xk1 , xk2 , ..., xkm )

(6)

From Algorithm to Agent

827

where every element xij determines a characteristic property j of the element ui .
Instead of the set U we use the set X of n-tuples (xk1 , xk2 , ..., xkm ).
When we consider the function F :
F (uk ) = (uk+1
)
1

(7)

and using the following expressions:
uk = (xk1 , xk2 , ..., xkm ),

uk+1 = (xk+1
, xk+1
, ..., xk+1
m )
1
2

(8)

we can ﬁnd that the function F may be replaced by the partial function f : X →
X, which operates on the mentioned above characteristic properties:
, xk+1
, ..., xk+1
f (xk1 , xk2 , ..., xkm ) = (xk+1
m )
1
2

(9)

In practical applications there is a great number of characteristic properties that
deﬁne the states of the algorithm and the function f is complex. Consequently,
it is diﬃcult to study and develop the algorithm. In such a case the best way is
to decompose the the algorithm.
The decomposition of the algorithm Alg concerns the set of characteristic
properties (xi1 , xi2 , ..., xim ), and the function f . As the result of such decomposition we have to obtain the decomposition of the complex algorithm Alg into a
number of partial algorithms Alg1 , Alg2 , ...Algn .
The main goal of the decomposition is to enable the separate development of
every partial algorithm. Then the complex algorithm is built as composition of
the partial algorithms. Let us consider the algorithm Alg = (X, f ) deﬁned by
the set of states (or characteristic properties), and the function f realizing the
evolution of the algorithm. So we have:
Alg = (X, f ),

f : X → X.

(10)

Let the algorithm Alg is decomposed into partial algorithms what means that
instead the algorithm Alg we consider a number of partial algorithms. To simplify
our analysis we can consider that we have two partial algorithms Algr and Algs .
Using the partial algorithms Algr and Algs we may obtain the same results as
the with the use of the algorithm Alg.
The decomposition may concern the function f and/or the set X. Let us consider as a ﬁrst approach only the decomposition of the function f . The function
f may be decomposed into two partial functions fr and fs by the following way:
f = fr ∪ fs ,

fr ∩ fs = ∅

(11)

fr : X → X,

Algr = (X, fr )

(12)

fs : X → X,

Algs = (X, fs )

(13)

The successive application of functions fr and fs enables to transform the starting state of the algorithm to the ﬁnal one that represents a needed solution. But
the decomposition of only the function f is not suﬃcient to enable the separate

828

K. Cetnarowicz





	


	




		







	


	


		
Fig. 1. Schema of the decomposition of characteristic properties

development of partial algorithms. We have to decompose the set X of the algorithm Alg. Let us consider following sets of properties of the algorithms: Xr representing properties of the algorithm Algr , Xs - properties of the algorithm
Algs and the set X0 describing resources of the environment that are accessible
for every partial algorithm. The set X is decomposed by the following way:
X = X0 × Xr × Xs

(14)

The set Xr (Xs - respectively) represents properties of the algorithm Algr (Algs
- respectively) and for the sake of separate development of the algorithms Algr
and Algs we have to enclose hermetically the properties of every algorithm. As a
result of that the algorithm Algr has no more access to the parameters Xs and
vice versa (dash arrow on the ﬁg. 1).
We can consider two solutions proposed for this problem. One basing on the
communication paradigm that leads us to the object concept, and the next one
using operation of the observation that gives us the concept on agent.

3

Decomposition of an Algorithm Using the Concept of
an “Object”

We can consider the decomposition of the set of characteristic properties. Every
partial algorithm has its own subset of characteristic properties. A given partial
algorithm r (Algr ) is deﬁned by the function fr and the set of characteristic
properties: {xpr , xpr +1 , ..., xkr } that is a subset of the global set of characteristic
properties: {x1 , x2 , ..., xm }. The characteristic properties of one partial algorithm

From Algorithm to Agent

829

(for instance Algr ) may be used by the function of this algorithm (fr )and are
not accessible to another algorithm (for instance Algs ) what means that they
may not be used by the function fs (ﬁg. 1). Such consideration brought us to
the concept of an “object” [13].
We can say that the partial algorithm Algr may be considered as an object
Objr , the state of the object is described by parameters {xpr , xpr +1 , ..., xkr } and
the evolution of the state of this object is realized by the function fro .
Considering proposed concept of an object we can notice that the lack of
the access by the algorithm of a given object Objr (by its function fro ) to the
parameters ({xps , xps +1 , ..., xks }) of the object Objs is a too big restriction. To
resolve the accessibility restriction problem a number of methods of access (under
control) to the parameters of a given object has been proposed. The object Objs
may make its own parameters accessible for the function f or of the object Objr
(ﬁg. 2).
During the development we introduce the concept of the object tools of controlled access to the internal parameters of another object. So, a given object
Objr (its function fro ) has accessible its own parameters {xpr , xpr +1 , ..., xkr }
called internal parameters of the object Objr , and in a limited way the parameters of other objects (for example to the parameters {xps , xps +1 , ..., xks } of the
object Objs . Obviously the object has access to the global parameters that are
accessible to any object. There are tools to give control (restrictions) of the access to the internal parameters of an object. One of the most elegant tools is
the use of methods deﬁned in the body of the object to which internal parameters the access is realized. We may consider methods are tools for a particular
communication between objects.





	


	


	







	


	


	



Fig. 2. Schema of the access of the object (partial algorithm) Objr to the parameters
of the object Objs

830

K. Cetnarowicz

The scenario of the access of one object (Objr ) to parameters of another object
(Objs ) may be described as follow:
– Function fro realizing execution of the object Objr needs the following information: the value of its own parameters of the object Objr , global parameters
and the value of some parameters of the object Objs .
– The object Objr to get access to the parameters of the object Objs put in
execution (by calling) a properly selected method of the object Objs and due
to the execution of this method the object Objr obtain information about
parameters of the object Objs . The access is controlled by the object Objs
by the algorithm of its method and the access may be realized, partially
realized or forbidden.
We can consider the function fro as following:
(x1 , ..., xk , xpr , ..., xkr , xps , ..., xks )
= fro (x1 , ..., xk , xpr , ..., xkr , method1(xps , ..., xks )).

(15)

– When the object Objr has all the necessary information it can realize evolution of the state of the algorithm using its own function fro . In the result of
the execution the parameters of the algorithm may be modiﬁed. Object Objr
may modify without restrictions its own parameters (xpr , xpr +1 , ..., xkr ) and
global parameters. But sometimes as the result of application of the function
fro the modiﬁcation of internal parameters of another (Objs ) is necessary. For
this purpose the methods of the object Objs may be used. Object Objr using
the properly chosen method of the object Objs may change value of internal parameters of that object ( for instance: method2(xps , ..., xks ) (ﬁg. 2)).
Obviously this modiﬁcation is controlled by the object Objs by algorithms
of methods used.
The presented scenario of the communication between objects causes independency of an object to be considerably restricted. For instance in presented scenarios the object Objs may not give access to its internal parameters for the
object Objr what may block algorithm of the object Objr . We can say that autonomy of the object Objr is depended (under restriction) on the object Objs
(ﬁg. 2).
Using the proposed concept of the object with tools of communication by
the “call of method” we can decompose a given complex algorithm into partial
algorithms represented by objects ([9]. Cooperation of this objects makes possible
the execution of the complex algorithm as a whole. The realization of the complex
algorithm is the result of the successive application of the functions fro and fso
in a properly deﬁned order (cooperation of the objects Objr and Objs ).

4

Decomposition of an Algorithm with the Concept of an
“Agent”

The loss of independency (or autonomy) of partial algorithms realized as objects
is the price paid for the cooperation of objects in the system realized by the object
oriented approach.

From Algorithm to Agent

831


	




	

	



		
Fig. 3. Schema of execution of the algorithms of objects with the use of observation of
behavior of other objects. It is a principle of the concept of an agent.

We can try to ﬁnd a solution where partial algorithms are realized as entities
more independent than objects. It is possible due to the observation operation.
Using the observation operation one algorithm may observe behavior of another
one. It leads us to the concept of an agent. The way of the action of a given
agent may be illustrated by the following example:
– Function realizing algorithm of the agent Agr needs its own parameters,
global data, and parameters of the agent Ags .
– Therefore the agent Agr observes behavior of the agent Ags . It means the
agent Agr follows changes in the environment (global data) that are caused
by the actions of the agent Ags . Due to this observation agent Agr may
deduce the state of parameters of the agent Ags . This observation and deduction is an independent process of intentions of the agent Ags , although
the received data do not give the full information about the internal parameters of the agent Ags . But information obtained may be suﬃcient for the
agent Agr to continue its actions.
– Agent Agr being in possession of necessary information, and using its function fr may modify its own parameters and state (global parameters) of the
environment. These changes are realized usually as an execution of an event
in the environment. Agent Agr has no possibilities to change directly the
internal data of the agent Ags but by the means of modiﬁcation of the state
of the environment it have impact on the state of other agents. Agent Ags
observes the changes in the environment caused by the agent Agr . Due to
this changes agent Ags modiﬁes its own parameters.
Agent observing environment (global data) and behavior of other agents may
realize its actions (ﬁg. 3). Presented concept of an agent gives considerable

832

K. Cetnarowicz



	




	










Fig. 4. Schema of an agent acting in the environment with the use of its model

augmentation of independence of an agent and possibility of interaction between agents. That is the crucial diﬀerence between the concepts of the object
and the agent.
Resuming we can say that the source of information for the agent is the state of
the global data (state of the environment, or resources of the environment represented by (x1 , ..., xk , )), local data of the agent (state of the agent Agr represented
by (xpr , ..., xkr , )) and observed behavior of other agents (for instance Ags ). This
information agent may acquire by observation of the environment(ﬁg. 4).
The algorithm is created as the environment containing resources (represented
by global data) and agents that remain and act in the environment.
Not all information acquired by the observation of the environment is necessary for a given agent to be able to act in the environment. To select the only
necessary information agent may use a method of modeling the environment.
Due to the operation of observation a given agent builds in its mind a model
of the environment. Using this model m agent may select the necessary information, and then use it to realize its action in the environment. This selection
is realized by the adopted abstraction level of the model construction and its
manipulation.
Using presented idea we can consider the following scenario of action by a
given agent that is in a given environment:
– Agent using the operation of observation acquires information from the environment and builds a model (m) of the environment in its mind. The
model is created with adopted by the agent abstraction level - what means
that in the model only some characteristic properties of the environment are
memorized (only information necessary for agents’s actions).
– Agent plans actions in the environment using the analysis of created model m.
– Agent carries out the planned actions realizing events in the environment.

From Algorithm to Agent

833

Agent Agr to observe the changes in the environment caused by the agent
Ags has to memorize in the model m not only actual state of the environment
i−1
(xi1 , ..., xik , ) but also ,,historical data” (xi−1
1 , ..., xk , )describing the state of the
environment before changes caused by the agent Ags . That is the model m of
the agent that contains all data (including “historical data”) necessary for the
agent to act in the environment. The application of the model m may enable the
autonomy of the agent and realize cooperation among agents.

5

Conclusion

Presented approach to the description of decomposition of the algorithm helps
to deﬁne the concept of the object and the agent.
The paper makes possible to explain reasons for introduction of the object
and agent notions. It enables to determine the principal diﬀerence between an
object and an agent and to establish their main properties.
It may be useful for development of Object Oriented Technologies and Agent
Oriented Technologies to create complex multiagent systems.

References
1. Cetnarowicz, E., Cetnarowicz, K., Nawarecki, E.: The simulation of the behavoiur
of the world of autonomous agents. In: Proc. of the XVII International Czech Poland - Slovak Colloqium - Workshop: Advanced Simulation of Systems, Zabrzech
na Morave, Czech Republic, vol. 2, pp. 107–115 (1995) ISBN 80-901751-4-7
2. Cetnarowicz, K.: Problems of the evolutionary development of the multi-agent
world. In: Proc. of the First International Workshop: Decentralized Multi-Agent
Systems DIMAS 1995, Krakow, Poland, pp. 113–123 (1995) ISBN 83-86813-10-5
3. Cetnarowicz, K., Cetnarowicz, E.: Multi-agent decentralised system of medical
help. In: Management and Control of Production and Logistics. IFIP, IFAC, IEEE
Conference, Grenoble, France, 2000. ENSIEG, LAG Grenoble, France (2000)
4. Cetnarowicz, K., Dobrowolski, G., Ko@zlak, J.: Active agents cooperation in decentralized systems. In: Bubnicki, Z. (ed.) Proc. of the 12th Int. Conf. on Systems
Science, vol. 1, pp. 57–62. Oﬁcyna Wydawnicza Politechniki Wroc@lawskiej (1995)
ISBN 83-7085-152-5
5. Cetnarowicz, K., Nawareck, E.: Syst`eme d’exploitation decentralis´e realis´e `
a l’aide
de syst`emes multi-agents (Operating System Realized with the Use of Multi-agent
Systems). In: Proceedings, Troisi`eme Journ´ees Francophone sur l’Intelligence Artiﬁcielle Distribu´ee et les Syst`emes Multiagents, St Baldoph, Savoie, Francja, pp.
311–322 (1995)
6. Crowley, J.L., Demazeau, Y.: Principles and techniques for sensor data fusion. In:
Signal Processing, vol. 32, pp. 5–27. Elsevier Science Publishers B. V., Amsterdam
(1993)
7. Nawarecki, E., Cetnarowicz, K.: A concept of the decentralized multi-agent rt system. In: Proc. of the International Conference Real Time 1995, Technical University
of Ostrava VSB, Ostrava, Czech Republic, pp. 167–171 (1995) ISBN 80-901751-6-3

834

K. Cetnarowicz

8. Nawarecki, E., Cetnarowicz, K., Cetnarowicz, E., Dobrowolski, G.: Active agent
ˇ
idea applied to the decentralized intelligent systems development. In: Stefan,
J.
(ed.) Modeling and Simulation of Systems MOSIS 1994, Ostrava, pp. 64–71. House
of Technology Ltd. (1994) ISBN 80-901229-8-1
9. Nicola, J., Coad, P.: Object-Oriented Programming. Prentice Hall, Inc., Englewood
(1993)
10. Rao, A.S., Georgeﬀ, M.P.: Modelling rational agents within a bdi architecture. In:
Proc. of the Second International Conference on Principles of Knowledge Representation and Reasoning, KR 1991, Cambridge, MA, USA, pp. 473–484 (1991)
11. Shoham, Y.: Agent-oriented programming. Artiﬁcial Intelligence 60, 51–92 (1993)
12. Weiss, G.: Multiagent Systems. MIT Press, Cambridge (1999)
13. Winkowski, J.: Programowanie symulacji procesow (Programming of Simulation
Process). Wydawnictwo Naukowo-Techniczne, Warszawa (1974)
14. Wirth, N.: Algorithms+Data Structures = Programs. Prentice-Hall Series in Automatic Computation (1976)

