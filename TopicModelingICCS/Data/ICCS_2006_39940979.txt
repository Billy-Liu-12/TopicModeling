Accuracy Enhancement by Selective Use
of Branch History in Embedded Processor
Jong Wook Kwak1 , Seong Tae Jhang2 , and Chu Shik Jhon1
1

Department of Electrical Engineering and Computer Science,
Seoul National University, Shilim-dong, Kwanak-gu, Seoul, Korea
{leoniss, csjhon}@panda.snu.ac.kr
2
Department of Computer Science, The University of Suwon,
Suwon, Gyeonggi-do, Korea
stjhang@suwon.ac.kr

Abstract. The branch prediction accuracy is one of essential parts of
performance improvement in embedded processors as well as modern
microarchitectures. Until now, the length of branch history has been statically ﬁxed for all branch instructions, and the history length is usually
selected in accordance with the size of prediction table. In this paper, we
propose a dynamic per-branch history length adjustment policy, which
can dynamically change the history length for each branch instruction.
The proposed solution tracks data dependencies of branch instructions
and identiﬁes strongly correlated branches in branch history. Compared
to the previous bimodal style predictors and the ﬁxed history length
predictors in embedded processors, our method provides better history
length for each branch instruction, resulting in substantial improvement
in prediction accuracy.
Keywords: Branch Prediction, Branch History, History Length Adjustment, Data Dependency, gshare Predictor.

1

Introduction

To achieve higher performance, recent microarchitectures have made use of
deeper pipeline, dynamic scheduling and multi-issue superscalar processor technologies. In the ﬁeld of embedded processors, such technology trends are expected
to be realized in a near future as well. Consequently, accurate branch predictor
will be one of essential parts of modern embedded processors, because the penalty
for a branch miss-prediction increases as the number of pipeline stages and the
number of instructions issued per cycle increase [1]. Although there have been
many proposals of complex hybrid branch predictors in modern microarchitectures, they can not directly be implemented in embedded processors, due to the
strict hardware resource constraints in their environments. Instead, most branch
predictors in embedded processors have used the small-scale bimodal style predictors[2]. In bimodal predictors, the only information in branch prediction is
the address of branch instruction(PC), without Global Branch History(GBH).
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 979–986, 2006.
c Springer-Verlag Berlin Heidelberg 2006

980

J.W. Kwak, S.T. Jhang, and C.S. Jhon

However, as shown in many previous works, branch instructions have a special
feature in their executions, called correlation, and the prediction accuracy is expected to increase if the predictor additionally utilizes the correlation features of
branch instructions[3][4]. In this paper, we propose a new novel algorithm and
hardware structure, which can be implemented in embedded processors with
providing the correlation features, as the alternative of bimodal predictors in
embedded processors. Our policy is much more proﬁtable to high-performance
embedded systems. The rest of this paper is organized as follows. Section 2
describes the backgrounds and the related works about this paper. Section 3
proposes dynamic per-branch history length adjustment and explains its distinctive algorithm and required hardware structure. In section 4, we simulate
our proposal and discuss the simulation results. Finally, section 5 concludes this
paper.

2

Backgrounds and Related Works

Various vectors of information can be used as an input of branch predictors. The
branch address was ﬁrstly proposed to index the Pattern History Table (PHT).
This style of predictors is often called as the bimodal predictor and it is still
widely used in current microarchitectures, because the bimodal distribution of
branch execution is one of main characteristics of most branch instructions[5].
Further, in the ﬁeld of embedded environments, bimodal predictor is an essential branch predictor. For examples, XScale Processor implements the bimodal
predictor with 2 bit saturation counter in Branch Target Buﬀer(BTB)[2]. In the
family of ARM processors, they implement simple bimodal style branch predictors as well, due to the strict hardware resource constraints[6]. However, it has
been shown that some branches, especially conditional branches, are strongly
correlated to the outcomes of a few past branch instructions. The 2-level adaptive branch predictor and its variations utilize this idea. This mechanism uses
two levels of branch history to make the predictions; the history of the last k
branches encountered and the branch behavior for the last s occurrences of the
speciﬁc pattern of these k branches[3].
Meanwhile, the length of branch history is statically ﬁxed for all branch instructions, and the history length is usually selected in accordance with the size
of PHT. However, as shown in previous works, diﬀerent branch instructions require diﬀerent length histories to achieve high prediction accuracies [7][8][9]. In
previous works, [7] and [8] require prior-proﬁling to change the history length. Although [9] provides dynamic history length ﬁtting method, it also requires many
intervals which consist of a ﬁxed number of consecutive branch instructions, to
proﬁle and change the history length, thus it is semi-dynamic. On the whole,
these intervals induce the overall decrease of IPC. However, our policy adjusts
the history length in program execution time, that is fully-dynamic. Moreover,
our policy is per-branch method and provides optimal history length for each
branch instruction, which is not the case of previous works.

Accuracy Enhancement by Selective Use of Branch History

3

981

History Length Adjustment in Branch Prediction

In this section, we propose Dynamic Per-Branch History Length Adjustment
(called DpBHLA Policy), and additionally we show its algorithm and required
hardware structure. The proposed solution tracks data dependencies of branch
instructions and identiﬁes strongly correlated branches(called key branch) in
branch history, based on operand register in branch instruction. By identifying
the key branch, the DpBHLA policy selectively uses the information of key
branch in GBH, resulting in diﬀerent history length for each branch instruction.

BB0

BB
if ( R 2 )
BB2

BB1

NT

T

R1=R2+R3
if ( R 3 )

BB3

R1=4
if ( R 4 )

LD R3, M EM

BB4

BB5

BB6

if ( R 1 )
BB7

BB8

R4=R1+R3
if ( R 2 )
BB9
if ( R 2 )

BB10
if ( R 4 )
G lo b a l H is to r y f o r if ( R 4 ) :
...T N N T T N

Fig. 1. Example Scenario

Figure 1 shows the example scenario to illustrate the DpBHLA mechanism.
Figure 1 is a kind of Control Flow Gragh(CFG), composed of Basic Blocks
(BBs). Each basic block consists of one branch instruction and a few other
instructions which do not change the execution path. if (R4) in BB10 is the
branch instruction in which we want to predict the execution path. The GBH
for if (R4) in BB10 is currently (...TNNTTN). To identify the key branch, we
introduce Branch Register Dependency Table (Br RDT), which stores the key
branch information. Figure 2 shows its structure. In Figure 2, the number of
entries in Br RDT is the same as the number of architectural registers and the
width of each entry is the same as the history length n, according to the 2n PHT
size. To select the optimal history length for each branch instruction, each entry
in Br RDT is handled by the following algorithm, shown in Figure 3.
The algorithm in Figure 3 mainly controls each entry of Br RDT, based on
the instruction format. The important instruction formats in our algorithm are

982

J.W. Kwak, S.T. Jhang, and C.S. Jhon
0

The Most Recent Branch

1
.
.
.
i-th entry

History Length

1

0

.
.
.
30

0

1

1

0

Br_RDT Entry
0: Non Key Branch
1: Key Branch

31
Branch Register Dependency
Table (Br_RDT)

Fig. 2. Branch Register Dependency Table

(1) conditional branch instruction and (2) register writing instruction. In case of
conditional branch instructions, the Length Indicator takes the entries of source
operands in branch instructions, and newly set the value of logic 1 into the LSB
ﬁeld of Reg Srci in Br RDT, with shifting one bit left in all Br RDT entry. In
case of register writing instructions, each Reg Srci in Br RDT is bit-wise-or ed,
and the entry of Br RDT(Reg dest) takes the result.
if (Conditional Branch Instruction){
Length Indicator = Br RDT(Reg Src1 )(|Br RDT (Reg Src2 )|...);
AllBr RDT entry << 1;
Br RDT (Reg Src1 ) = 1|Br RDT (Reg Src1 );
(Br RDT (Reg Src2 ) = 1|Br RDT (Reg Src2 ); ...)
}
else if (Register Writing Instruction){
Br RDT (Reg dest) = Br RDT (Reg Src1 )(|Br RDT (Reg Src2 )|...);
}
(...) depends on the number of source operands in branch instruction

Fig. 3. History Length Adjustment Algorithm

Figure 4 illustrates the example contents for selecting the history length of
if (R4) in BB10. In Figure 4, the entry of R4 in BB10 is (...0000100) and
the Length Indicator uses the entry of R4 in Br RDT at the end of the algorithm. The entry of Br RDT indicates whether i-th ﬁeld of each Br RDT
entry is BB which contains the key branch or not. Therefore, this vector describes that the BB which has the data dependency with R4 in BB10 is 3
ahead BB (i.e., third ﬁeld) from BB10, and it additionally indicates that the
strongly correlated branch (i.e., key branch) with if (R4) in BB10 exists in 3
ahead BB (i.e., BB4). Actually, R4 is aﬀected by the value of R1 and R3 in BB8

Accuracy Enhancement by Selective Use of Branch History
Br_RDT

Br_RDT

Br_RDT

R1

X

X

X

X

X

X

X

R1

X

X

X

X

X

X

0

R1

X

X

X

X

X

X

1

R2

X

X

X

X

X

X

X

R2

X

X

X

X

X

X

1

R2

X

X

X

X

X

X

1

R3

X

X

X

X

X

X

X

R3

X

X

X

X

X

X

0

R3

X

X

X

X

X

X

0

R4

X

X

X

X

X

X

X

R4

X

X

X

X

X

X

0

R4

X

X

X

X

X

X

0

BB0

The begin of BB2

Br_RDT

The end of BB2
Br_RDT

Br_RDT

R1

X

X

X

X

X

1

0

R1

0

0

0

0

0

0

0

R1

0

0

0

0

0

0

0

R2

X

X

X

X

X

1

0

R2

X

X

X

X

X

1

0

R2

X

X

X

X

1

0

0

R3

X

X

X

X

X

0

1

R3

X

X

X

X

X

0

1

R3

X

X

X

X

0

1

0

R4

X

X

X

X

X

0

0

R4

X

X

X

X

X

0

0

R4

X

X

X

X

0

0

1

The begin of BB3

The begin of BB4

The end of BB3

Br_RDT

Br_RDT

Br_RDT

R1

0

0

0

0

0

0

0

R1

0

0

0

0

0

0

1

R1

0

0

0

0

0

0

1

R2

X

X

X

X

1

0

0

R2

X

X

X

1

0

0

0

R2

X

X

X

1

0

0

0

R3

0

0

0

0

0

0

0

R3

0

0

0

0

0

0

0

R3

0

0

0

0

0

0

0

R4

X

X

X

X

0

0

1

R4

X

X

X

0

0

1

0

R4

0

0

0

0

0

0

1

The end of BB4

The begin of BB8

Br_RDT

983

The end of BB8

Br_RDT

R1

0

0

0

0

0

1

0

R1

0

0

0

0

1

0

0

R2

X

X

1

0

0

0

1

R2

X

1

0

0

0

1

1

R3

0

0

0

0

0

0

0

R3

0

0

0

0

0

0

0

R4

0

0

0

0

0

1

0

R4

0

0

0

0

1

0

0

The end of BB9

Length Indicator (History Length=3)
0

0

0

0

1

0

0

BB10

Fig. 4. The Example Contents of Br RDT

(R4=R1+R3 ), and the value of R1 and R3 is used by BB4 (if(R1)) and BB2
(if(R3)) respectively. By the or -ing function of the algorithm (Br RDT (R4) =
Br RDT (R1) Br RDT (R3)), R4 in Br RDT has the value of (...0000001) at
the end of BB8. In this way, R4 has (...0000100) at the end of the algorithm.
This result indicates that the key branch for if (R4) in BB10 is if (R1) in BB4.
Consequently, when predicting if (R4) in BB10, we use history length 3 (TTN,
i.e., BB4, BB8 and BB9), instead of predeﬁned static history length n for the
2n PHT size(...TNNTTN). As shown in this example, by identifying the key
branch, the diﬀerent history length can be used for each branch instruction.

4

Performance Evaluation

In this section, we evaluate the performance of our proposal. We use an eventdriven simulator, SimpleScalar [10], for our simulation. As benchmark programs,
we use SPEC 2000 application suits[11].
At ﬁrst, Figure 5 shows miss-prediction rate(%) vs. history length, for each
application. In Figure 5, we vary the number of PHT entries from 512 to 4K,
and we change the history length from 1 to n for each 2n PHT size. Although
the results are strongly application dependent, the selected four simulation results show the representative result patterns, compared to other applications.
As shown in Figure 5, the prediction accuracy is signiﬁcantly aﬀected by the
history length. For example, the diﬀerence between the best accuracy and the
worst accuracy is 2.1%, in case of 181.mcf in 512 PHT. Furthermore, the best
history length is also dependent on the PHT size, as shown in 181.mcf : (1) history length 6 in 512 PHT vs. (2) history length 8 in 4K PHT. Overall, these

984

J.W. Kwak, S.T. Jhang, and C.S. Jhon

results indicate that the optimal history length is truly application and system
dependent. Therefore, we should use the dynamic method to optimally select
the best history length, regardless of applications and system characteristics.

197.parser

181.mcf
4K PHT
2K PHT
1K PHT
512 PHT

8.8
8.3

8
7.5

7.8

7

7.3

6.5

6.8

6

6.3
5.8

4K PHT
2K PHT
1K PHT
512 PHT

5.5
1

2

3

4

5

6

7

8

9

10

175.vpr

11

12

4K PHT
2K PHT
1K PHT
512 PHT

22
21

1

2

3

4

5

6

7

8

9

10

186.crafty

11

12

4K PHT
2K PHT
1K PHT
512 PHT

18

20
16

19
18

14

17
16

12

15
14

10

13
12

1

2

3

4

5

6

7

8

9

10

11

12

8

1

2

3

4

5

6

7

8

9

10

11

12

Fig. 5. Branch Miss-Prediction Rate vs. History Length

On the other hand, Figure 6 shows the branch prediction accuracy(%) vs.
PHT size. Generally, it has been known that the simple bimodal predictor is
superior to the 2-level predictor or the gshare predictor in case of small PHT
size, because a short length of the GBH can not provide enough information to
distinguish each branch instruction. Our simulation shows this phenomenon as
well, in case of simulation results in 512 PHT entries, as shown in average result.
Due to this reason, the bimodal predictor is usually adopted by the small-scale
embedded processors. Besides, as the PHT size increases, the 2-level predictor
and the gshare predictor, on the contrary, provide better prediction accuracy
than the bimodal predictor.
Figure 7 shows the miss-prediction rate(%) of DpBHLA policy in 512, 1K,
and 2K PHT, respectively. In our simulation, Fixed Length depicts the result
of conventional ﬁxed and static history length policy, and Length Adjustment is
our proposal. As shown in Figure 7, DpBHLA policy outperforms Fixed Length
policy, 2.1% in average, and the improvement is up to 4.7% in case of 175.vpr.
Moreover, in small-scale system environment(such as 512 PHT), DpBHLA signiﬁcantly outperforms Fixed Length policy, and it even outperforms the bimodal

Accuracy Enhancement by Selective Use of Branch History
100

95

90

85

512 bimod
512 2lev
512 gshare

80

100

100

98

98

96

96

94

94

92

92

90

90

88

88

86

sw
im
av
er
ag
e

m
es
a

eq
ua
ke

ga
p

tw
olf

vp
r

eo
n

m
cf

gc
c

gz
ip

75

86
1K bimod
1K 2lev
1K gshare

84
82

2K bimod
2K 2lev
2K gshare

82

sw
im
av
er
ag
e

m
es
a

eq
ua
ke

ga
p

tw
olf

eo
n

vp
r

m
cf

gc
c

av
er
ag
e

gz
ip

sw
im

m
es
a

eq
ua
ke

ga
p

tw
olf

vp
r

eo
n

gz
ip

m
cf

80
gc
c

80

84

Fig. 6. Branch Prediction Accuracy vs. PHT Size
22
Fixed Length
Length Adjustment

20
18
16
14
12
10
8
6
4
2

vpr

gcc

mcf

crafty

parser

eon

vortex

bzip2 average

18

20
18

Fixed Length
Length Adjustment

16
14

Fixed Length
Length Adjustment

16
14
12

12

10

10

8

8

6

6
4

4

2

2

0

gap

vpr

gcc

mcf

crafty

parser

eon

gap

vortex

bzip2 average

0

vpr

gcc

mcf

crafty

parser

eon

gap

vortex

bzip2 average

Fig. 7. The Reduction of Branch Miss-Prediction in DpBHLA Policy

985

986

J.W. Kwak, S.T. Jhang, and C.S. Jhon

predictor which usually provides better prediction accuracies in small embedded
systems. This result indicates that the DpBHLA policy can be implemented in
the microarchitectures which use the previous ﬁxed history length policy. Further, the DpBHLA policy can also be implemented in small-scale embedded
processors, with better prediction accuracy than the bimodal predictors.

5

Conclusion

To realize the performance potential of today’s widely-issued, deeply-pipelined
processor environments, the accurate branch predictor becomes one of essential
parts of modern microarchitectures and embedded processors. In this paper, we
presented Dynamic Per-Branch History Length Adjustment (DpBHLA) policy,
which is fully-dynamic and per-branch method to eﬃciently select the history
length, regardless of applications and system characteristics. The proposed solution provided up to 4.7% improvement in prediction accuracy, compared to the
ﬁxed history length policy, and it even outperformed bimodal predictors in small
system environments.

References
1. J. L. Hennessy and D.A Patterson, “Computer Architecture : A Quantitative Approach”, Third Edition, Morgan Kaufmann Publishers, Inc, 2001.
2. Intel XScale Core Developer’s Manual, January, 2004
3. Yeh, T. Y. and Patt, Y. N., “Two-level adaptive branch prediction”, In Proceedings
of the 24th ACM/IEEE International Symposium on Microarchitecture, 51-61,
1991
4. McFarling, S., “Combining branch predictors. Tech. Rep. TN-36m”, Digital Western Research Lab., June, 1993
5. Keith Diefendorﬀ, “K7 Challenges Intel, New AMD Processor Could Beat Intel’s
Katmai”, Microprocessor Report, Vol. 12, No. 14, 1998
6. Steve Furber, “ARM System-on-Chip Architecture”, 2nd edition, Addison-Wesley,
2000
7. J. Stark, M. Evers, and Y. N. Patt, “Variable length path branch prediction”, In
Proc. 8th Int’l Conf. on Architectural Support for Programming Languages and
Operating Systems, pp. 170-179, 1998.
8. M.-D. Tarlescu, K. B. Theobald, and G. R. Gao, “Elastic history buﬀer: A low-cost
method to improve branch prediction accuracy”, In Proc. Int’l Conf. on Computer
Design, pp. 82-87, 1997.
9. T.Juan, S. Sanjeevan, and J. J. Navarro, “Dynamic history length ﬁtting: A third
level of adaptivity for branch prediction”, In Proc. 25th Int’l Symp. on Computer
Architecture, pp. 155-166, 1998.
10. D. Burger, T. M. Austin, and S. Bennett, ”Evaluating future micro-processors:
the SimpleScalar tool set”, Tech. Report TR-1308, Univ. of Wisconsin-Madison
Computer Sciences Dept., 1997
11. SPEC CPU2000 Benchmarks, http://www.specbench.org

