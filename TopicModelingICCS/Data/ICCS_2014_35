Procedia Computer Science
Volume 29, 2014, Pages 2442–2448
ICCS 2014. 14th International Conference on Computational Science

Computation of ECG signal features using MCMC
modelling in software and FPGA reconﬁgurable hardware
Timothy Bodisco1 , Jason D’Netto2 , Neil Kelson2 , Jasmine Banks1 , and Ross
Hayward1
1

2

Science & Engineering Faculty, Queensland University Of Technology, Australia
{timothy.bodisco,j.banks,r.hayward}@qut.edu.au
High Performance Computing & Research Support, Queensland University Of Technology, Australia
{j.dnetto,n.kelson}@qut.edu.au

Abstract
Computational optimisation of clinically important electrocardiogram signal features, within
a single heart beat, using a Markov-chain Monte Carlo (MCMC) method is undertaken. A
detailed, eﬃcient data-driven software implementation of an MCMC algorithm has been shown.
Initially software parallelisation is explored and has been shown that despite the large amount of
model parameter inter-dependency that parallelisation is possible. Also, an initial reconﬁgurable
hardware approach is explored for future applicability to real-time computation on a portable
ECG device, under continuous extended use.
Keywords: ECG signal analysis, Markov-chain Monte Carlo, FPGA hardware implementation

1

Introduction

Electrocardiogram (ECG) signal analysis involves identiﬁcation of heart rate and other clinically
relevant features, such as: the QRS complex, T wave, and ST segment, which characterise
peak values and time intervals within a single heart beat. An important scenario is where
the subject’s ECG signal is continuously monitored (e.g. in a home or workplace setting) for
at least 24 hours via a portable battery powered recording device. Detailed real time signal
processing is not usually performed by the device but rather via data download and computer
analysis after completion of the recording period. Such recording devices are referred to as
Holter monitors [7].
Both time and power eﬃcient computation is needed in order to realise a portable ECG monitor suitable for continuous extended use and real time signal processing with the capability of
detecting a range of clinically relevant features beyond the usual heart rate and, less commonly,
QRS complex detection. Additionally, a relatively high sampling frequency is needed to ensure
suﬃcient signal quality. Currently, there does not appear to be a portable ECG monitor that
matches these requirements. Many commercially available monitors run at an extremely low
2442

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.228

Computation of ECG signal features in Software and FPGA

Bodisco et al.

sampling frequency, such as 250 Hz, which has been recommended as a minimum for the detection of the ECG waveform QRS complex [8]. However, this low sampling frequency may
preclude accurate detection of other features. Monitors that attempt to obtain additional clinically signiﬁcant ECG signal characteristics typically operate at higher sampling frequency of 1
kHz and peak voltages of 6 to 8 mV [7]. However, the higher frequency devices on the market
are portable devices suited for emergencies and are not suitable for constant use [3], and/or
perform data recording only [11, 8]. A 1 kHz and low power device with a 24 hour battery life
has been developed [12], but performs limited signal analysis using only amplitude and slope.
Further, it has been shown [10] that the detection method used in this device, while using very
little power, suﬀers greatly under noisy conditions and is insuﬃcient for accurate characteristic
detection.
In this work, we focus on a Markov-chain Monte Carlo (MCMC) based approach recently
proposed by the Authors [2] which compares favourably with existing algorithms (e.g. [9, 10])
in modelling a typical healthy ECG signal trace, in the presence of extreme noise and some
variability. Presented here is a work-in-progress toward the generation of a hardware based ECG
monitor. This paper shows how to eﬃciently implement the MCMC model in software; powereﬃcient Field Programmable Gate Array (FPGA) reconﬁgurable hardware is also explored to
determine the future applicability of this approach for real time computation on a portable
battery powered device, operating for continuous periods of one or more days.

2

MCMC modelling

The ECG signal is modelled here as a Normal distribution with a time-varying mean and
some precision (inverse of the variance) where the time-varying mean is a generic mathematical
representation of the ECG signal from a typical adult heart beat. Feature identiﬁcation is
achieved by modelling the signal as a continuous, piecewise deﬁned function over a data window
[0,T] that encapsulates the beat of interest, and resolving change-point parameters in the model,
denoted δi , and the parameters associated with the amplitudes of the features, denoted αi . The
key ECG features include the P, Q, R, S and T wave amplitude, duration and timing. Owing
to space limitations, the full details of the model and the standard computation are omitted;
however, this information can be found in a corresponding paper by the Authors [2]. Brieﬂy,
Equation 1 illustrates the model:
s (t) = y ∼ N (μ (t) + DC, τ )
⎧
π
⎪
⎪
⎪α1 cos δ1 t + β
⎪
⎪
⎪
π
⎪
−α2 cos δ2 −δ
(t − δ1 ) + β − α1 + α2
⎪
1
⎪
⎪
⎪
⎨−α cos
π
3
δ3 −δ2 (t − δ2 ) + β − α1 + 2α2 + α3
μ (t) =
β−α1 +2α2 +2α3
⎪ β−α1 +2α2 +2α3 cos
π
⎪
⎪
2
δ4 −δ3 (t − δ3 ) +
2
⎪
⎪
⎪
⎪
...
⎪
⎪
⎪
⎪
π
⎩−α cos
12
T −δ17 (t − δ17 ) + α12 − 2α11

0 ≤ t < δ1
δ1 ≤ t < δ2
δ2 ≤ t < δ3
δ3 ≤ t < δ4

(1)

δ17 ≤ t < T

where other symbols include the time t, the DC voltage oﬀset DC, and an initial oﬀset β for
matching of the signal and model at the start of the data window.
Feature identiﬁcation is achieved by resolving the model parameters in an iterative process
using MCMC. This process works by proposing candidate values for each model parameter in
2443

Computation of ECG signal features in Software and FPGA

Bodisco et al.

a random walk and determining the probability of whether the candidate parameter is more or
less likely than the current parameter [5]. For each parameter the candidate value is selected
from a Normal distribution with the current parameter as the mean and some deviation. The
probability of acceptance, A, is governed by Equation 2.
A = min 1,

p (θ∗ |·)
R (θ∗ )
m−1
R (θ
) p (θm−1 |·)

(2)

where, m denotes the mth MCMC iteration and · denotes the full set of model parameters
omitting the parameter of interest denoted as θ. For computational eﬃciency the proposal
R(θ ∗ )
ratio, R(θ
m−1 ) , is assumed to be unity and,
p (θ|·) ∝ p (y|θ; ·) p (θ)
As p (y|θ; ·) represents the probability of the data given the model parameters, it is reliant
on the data as a whole (p (θ) is the prior distribution for the parameter θ). Therefore, the
computation of the the probability of acceptance, A, is done with Equation 3.
A = min 1,

p (yi |μ∗i , τ ) p (θ∗ )
·
p (yi |μi , τ ) p (θ)

(3)

From a computational stand-point, Equation 3 is problematic as the product of a series of
probabilities will always tend to zero. This is easily overcome by exploiting the features of the
logarithmic function, i.e.
log

p (yi |μ∗i , τ )
p (yi |μi , τ )

=
=

log

p (yi |μ∗i , τ ) − log
log (p (yi |μ∗i , τ )) −

p (yi |μi , τ )
log (p (yi |μi , τ ))

therefore,

p (yi |μ∗i , τ )
= exp
log (p (yi |μ∗i , τ )) −
log (p (yi |μi , τ )) .
(4)
p (yi |μi , τ )
In the format shown in Equation 4, the computation can be minimised by saving the value of
the sum of log probabilities from the previously successful (candidate value accepted) iteration.
Therefore, at each iteration only the sum of log probabilities using the candidate value to
generate μ∗ need to be generated. This modelling approach is shown graphically in Figure 1.

3

Software design

A ﬂowchart of the model algorithm suitable for software implementation is shown in Figure 1.
There is an outer FOR loop for the number of iterations, inside this loop there is a sequential
FOR loop for the calculation of each of the model parameters. After creating the new candidate values for the δi parameters updates involve boundary checking—each δi parameters is
constrained, i.e. δi−1 < δi < δi + 1. With each the new candidate value (from model parameters: δi , αi , β or DC), a new μ is calculated (denoted μ∗ ), and the sum of new log probabilities
is determined, Equation 4, and therefore the probability of acceptance, A, is determined, Equation 3. For the model parameter τ only the sum of log probabilities is needed to be determined
as changing τ does not eﬀect μ. As A is the probability of acceptance, if A is less than 1 then
acceptance is determined by comparing to a random number sampled from a Uniform distribution [0,1] (i.e. if A ≥ Unif[0, 1] accept the candidate parameter). The candidate value becomes
the new value of the model parameter if the acceptance test passes.
2444

Computation of ECG signal features in Software and FPGA

Bodisco et al.

Figure 1: Flowchart of the model algorithm

2445

Computation of ECG signal features in Software and FPGA

Bodisco et al.

Table 1: Parameter Update Streams
α1 α5 α11
β
α6
α4
α2 α7 α10
α12 α8
α3
τ
α9 DC

3.1

Parallelism opportunities

The δi parameter updates can not be parallelised because δi is dependent on δi−1 and δi+1 .
However, most of the α parameters are dependent on only a small subset of the model parameters, and the nature of these dependencies allow for three parallel streams for parameter
updating, as shown in Table 1. Each stream will require their own copy of the parameters while
updating a given parameter, and synchronise the parameter they updated after the update is
completed.

3.2

Bottlenecks

For the software implementation, the computational bottlenecks in the algorithm include performing mathematical operations of cosine, ex , xy , log x, and Γ(x) [6] within the parameter
updates. The rest of the software implementation involves relatively less costly addition, subtraction, multiplication, division, branching, assignment, loops, Boolean logic and reading/writing ﬁles.

4

FPGA design

A FPGA comprises reconﬁgurable hardware capable of performing multiple asynchronous operations [4] which can be leveraged to obtain accelerated computation of functions with many
operations. For the present initial study, an initial FPGA hardware design informed by the
MCMC model and the software design implementation is attempted. To this end, an examination of the computational aspects of the MCMC model and software implementation is
useful, and some observations can be made in this regard. Only one δi variable is calculated
at once, as δi is dependent on δi−1 and δi+1 , where δ0 = 0 and δ18 = T . Each δi equation can be considered of the form αmultiply cos δhighπ−δlow (t − δlow ) + αaddition , where each
cos δhighπ−δlow (t − δlow ) can be treated separately and input with the appropriate δhigh and
δlow values depending on the value of t to produce the desired output. Most of the δi equations
have diﬀerent αaddition combinations and αmultiply is a single variable except for δ4 andδ13 .
Also, for δ6 , δ7 , δ8 , δ15 , δ16 and δ17 , αaddition = αmultiply with the appropriate α value used
depending on the value of t.
Figure 2 shows a simpliﬁed diagram of the proposed method to create the model mean for
any given parameter as a single clock tick hardware block. The parameters bus is a bus of all
the current α, β and DC values from Equation 1. The δ bus is a bus of all the current δ values.
The δselect bus is the binary encoding for which equation is to be active, and which δ values are
δhigh and δlow . The enable bus uses the δselect bus to switch on only one δ equation at a time.
For single clock tick computation, cosine values can be drawn from a look-up table. The clock
is used to synchronise the δ functions and the cosine block. The cosine look-up table functions
2446

Computation of ECG signal features in Software and FPGA

(a)

Bodisco et al.

(b)

Figure 2: A simpliﬁed diagram suitable for the HDL implementation of (a) the model equation
and (b) the δ7 and δ16 equations
on the inverted clock to ensure the required value is present at the positive edge of the clock
for use by the δ equation blocks.
Given the similarities between the lines of the piecewise function, Equation 1, in the FPGA
approach it is possible to signiﬁcantly improve the computation time by creating modules. This
work would, therefore, look at initially creating modules speciﬁcally aimed at accelerating the
ex , xy , log x, and Γ(x) functions [1].

5

Conclusions

The computation of a data-driven MCMC algorithm has been shown in this paper. Additionally, the optimisation for a software implementation of an MCMC algorithm for feature
identiﬁcation of ECG signals has been given. It has been shown that there are excellent opportunities to parallelise the MCMC algorithm, despite the signiﬁcant dependency between the
model parameters. As a work-in-progress toward a stand alone personal monitor, the future
hardware implementation of the feature identiﬁcation algorithm is also discussed and some implementation optimisations and strategies have been shown. Therefore, the feasibility of using
this approach in reconﬁgurable hardware has been conﬁrmed.

References
[1] J. Banks, N. Kelson, H. Macintosh, M. Dagg, R. Hayward, T. Bodisco, and R. Brown. Calculation
of volume from crank angle using reconﬁgurable hardware. In 4th International Conference on
Computation Methods, 2012.

2447

Computation of ECG signal features in Software and FPGA

Bodisco et al.

[2] T. Bodisco, J. D’Netto, N. Kelson, J. Banks, R. Hayward, and T. Parker. Characterising an ECG
signal using statistical modelling: a feasibility study. ANZIAM Journal, 55:C1–C15, 2014.
[3] Center for Advanced Research in Engineering. High resolution ECG machine and telemedicine
systems. http://carepvtltd.com/Tele_Medicine_Systems/cms.php?id=High_Resolution_ECG_
Machine_and_Telemedicine_Systems. Accessed: 2013-7-25.
[4] P. Chu. FPGA prototyping by VHDL examples. Wiley-Interscience, 2008.
[5] A. Gelman, J. Carlin, H. Stern, and D. Rubin. Bayesian Data Analysis: Second Edition. Chapman
& Hall/CRC, 2003.
[6] W. Harms. tgamma(3) - Linux Programmers Manual. http://man7.org/linux/man-pages/man3/
tgamma.3.html, 2002. Accessed: 2014-1-29.
[7] T. Hilbel, T. Hlems, H. Katus, and C. Zugck.
Telemetry in the clinicial setting.
Herzschrittmachertherapie & Elektrophysiologie, 19(3):146–164, 2008.
[8] S. Nabar, A. Banjeree, S. Gupta, and R Poovendran. GeM-REM: Generative model-driven resource
eﬃcient ECG monitoring in body sensor networks. In International Conference on Body Sensor
Networks. IEEE, 2011.
[9] M. Niknazar, B. Vahdat, and S. Mousavi. Detection of characteristic points of ECG using quadratic
spline wavelet transform. In Interrnational Conference on Signals, Circuits and Systems. IEEE,
2009.
[10] J. Pan and W. Tompkins. A real-time QRS detection algorithm. IEEE Transactions on Biomedical
Engineering, BME-32(3):230–236, 1985.
[11] Philips. DigiTrak XT Holter Recorder. http://www.healthcare.philips.com/me_en/products/
cardiography/products/holter/holter_xt.wpd. Accessed: 2013-7-25.
[12] L. Zhang and G. Wang. A novel portable one lead ECG monitor with low cost and long time
recording based on NUC501. In Chinese Control and Decision Conference, 2010.

2448

