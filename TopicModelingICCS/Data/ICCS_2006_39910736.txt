Solving Election Problem in Asynchronous
Distributed Systems
SeongHoon Park
School of Electrical and Computer Engineering,
Chungbuk National Unvi. Cheongju ChungBuk 361-763, Korea
spark@chungbuk.ac.kr

Abstract. So far, the weakest failure detectors had been studied extensively for
several of such fundamental problems. It is stated that Perfect Failure Detector
P is the weakest failure detector to solve the Election problem with any number
of faulty processes. In this paper, we introduce Modal failure detector M and
show that to solve Election, M is the weakest failure detector to solve election
when the number of faulty processes is less than ⎡n/2⎤. We also show that it is
strictly weaker than P.

1 Introduction
The concept of (unreliable) failure detectors was introduced by Chandra and
Toueg[6], and they characterized failure detectors by two properties: completeness
and accuracy. Based on the properties, they defined several failure detector classes:
perfect failure detectors P, weak failure detectors W, eventually weak failure detectors
W and so on. In [6] and [8] they studied what is the "weakest" failure detector to
solve Consensus. They showed that the weakest failure detector to solve Consensus
with-any number of faulty processes is W and the one with faulty processes bounded
by ⎡n/2⎤ (i.e., less than ⎡n/2⎤ faulty processes) is W.
After the work of [8], several studies followed. For example, the weakest failure
detector for stable leader election is the perfect failure detector P [7], and the one for
Terminating Reliable Broadcast is also P [6].
In this paper, we first redefine the model of failure detectors and consider the
weakest failure detectors to solve the stable leader election problem with the
assumption that there is a majority of correct processes. We show that if f is only
bounded by a value of less than ⎡n/2⎤, where n is the number of processes, the
weakest failure detector to solve election is not P.
The rest of the paper is organized as follows. In Section 2 we describe our system
model. In Section 3 we introduce the Modal Failure Detector M and show that to
solve Election, M is necessary while P is not, whereas M is sufficient when a majority
of the processes are correct. Finally, Section 4 summarizes the main contributions of
this paper and discusses related and future work.

◇

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 736 – 743, 2006.
© Springer-Verlag Berlin Heidelberg 2006

Solving Election Problem in Asynchronous Distributed Systems

737

2 Model and Definitions
Our model of asynchronous computation with failure detection is the one described in
[5]. In the following, we only discuss some informal definitions and results that are
needed for this paper.
2.1 Processes
We consider a distributed system composed of a finite set of processes Ω={1,2,..,n} to
be completely connected through a set of channels. Each process has a unique id and
its priority is decided based on the id, i.e., a process with the lowest id has the highest
priority. Communication is by message passing, asynchronous and reliable. Processes
fail by crashing and the crashed process does not recover. We consider systems where
at least one process is correct (i.e. f |Ω| ).
A failure detector is a distributed oracle which gives hints on failed processes. We
consider algorithms that use failure detectors. An algorithm defines a set of runs, and
a run of algorithm A using a failure detector D is a tuple R = < F, H, I, S, T>: I is an
initial configuration of A; S is an infinite sequence of events of A (made of process
histories); T = t0 · t1 · t2 · · tk is a list of increasing time values indicating when each
event in S occurred where t0 denotes a starting time; F is a failure pattern that denotes
the set F(t) of processes that have crashed through any time t. A failure pattern is a
function F from T to 2Ω. The set of correct processes in a failure pattern F is noted
correct(F) and the set of incorrect processes in a failure pattern F is noted crashed(F);
H is a failure detector history, which gives each process p and at any time t, a
(possibly false ) view H(p,t) of the failure pattern. H(p,t) denotes a set of processes,
and q∈ H(p,t) means that process p suspects process q at time t.

〈

2.2 Failure Detector Classes, Reducibility and Transformation
Two completeness properties have been identified. Strong Completeness, i.e. there is
a time after which every process that crashes is permanently suspected by every
correct process, and Weak Completeness, i.e. there is a time after which every process
that crashes is permanently suspected by some correct process. Four accuracy
properties have been identified. Strong Accuracy, i.e. no process is never suspected
before it crashes. Weak Accuracy, i.e. some correct process is never suspected.
Eventual Strong Accuracy ( Strong), i.e. there is a time after which correct processes
are not suspected by any correct process; and Eventual Weak Accuracy ( Weak), i.e.
there is a time after which some correct process is never suspected by any correct
process.
The notation of problem reduction was first introduced in the problem complexity
theory [10], and in the formal language theory [9]. It has been also used in the
distributed computing [11,12]. We consider the following definition of problem
reduction. An algorithm A solves a problem B if every run of A satisfies the
specification of B. A problem B is said to be solvable with a class C if there is an
algorithm which solves B using any failure detector of C. A problem B1 is said to be

◇

◇

738

S. Park

reducible to a problem B2 with class C, if any algorithm that solves B2 with C can be
transformed to solve B1 with C. If B1 is not reducible to B2, we say that B1 is harder
than B2.
2.3 The Stable Leader Election
The stable leader election problem is described as follows: at any time, at most one
process considers itself the leader, and at any time, if there is no leader, a leader is
eventually elected. Once a process is elected to be a leader, it can’t be demoted
before crash. The stable leader election problem is specified by the following two
properties:
• Safety: At any time, if a correct process has its leader set to true, then all other
processes that had their leader set to true crashed.
• Liveness: At any time, there eventually exists a process that has its leader set
to true.

3 Failure Detector to Solve Election
We define the Modal failure detector M, which is weaker than P. We show that, to
solve Election: (1) M is necessary (for any environment), and (2) M is sufficient for
any environment with a majority of correct processes. We then show that (3) P is
strictly stronger than M for any environment where at least one processes can crash in
a system of at least three processes.
3.1 Modal Failure Detector
Each module of failure detector M outputs a subset of the range 2Ω. The most
important property of M, denoted by Modal Accuracy, is that a process that was once
confirmed to be correct is not suspected before crash. Let HM be any history of such a
failure detector M. Then M satisfies the following properties:

• Strong Completeness: There is a time after which every process that crashes is
permanently suspected by every correct process.
• Eventual Weak Accuracy: There is a time after which some correct process is never
suspected by any correct process.
• Modal Accuracy: Initially, every process is suspected. After that, any process that is
once confirmed to be correct is not suspected before crash. More precisely:
3.2 The Necessary Condition for Election
The basic idea of our algorithm is the following. Initially, the value of FLi and CLi is
set toΩ and Φ respectively. That means that initially every process is suspected and
none is confirmed. After that each process periodically invokes election and waits
until the result of election is returned. If the received leader is in FLi, then process i
removes it from FLi and puts it into CLi. If it is not identical with the current leader
then process i puts the id of the current leader into FLi since the leader that was once
confirmed to be correct has crashed.

Solving Election Problem in Asynchronous Distributed Systems

739

/* Algorithm executed by every process i */
1 FLi : =Ω;
2 CLi := Φ;
3 current_leader := NULL;
4 Periodically (τ) do
5 election();
6 Upon received (leader, j) do
7 if ( j ∈ FLi j∉ CLi ) then
8
FLi := FLi – { j };
9
CLi := CLi ∪ { j };
10 end-if
11 if ( current_leader ≠ j) do
12
FLi := FLi ∪ { current_leader };
13
current_leader := j;
14 end-if

∧

Fig. 1. Emulating M using Election
Lemma 3.1. The algorithm of Fig.2 uses Election to implement M.
Proof. We show below that FLi satisfies Strong Completeness, Eventually Weak
Accuracy and Modal Accuracy properties of M.

• Strong Completeness: Once elected as a leader, the process can be demoted only if
it crashes. Initially, every process is suspected by invoking FLi :=Ωin line 2 of fig.1.
Therefore, it satisfies strong completeness. After that the correct process i removes j
from FLi in line 8 of fig.1 only once at most and only if process i received j as a
leader. Let assume that process j is elected as the leader and then crashes at time t, and
let assume that process i is a correct process. Then by the liveness property of
election, process i eventually receives the message (leader, j). Assume by
contradiction that strong completeness is violated. It implies that process i never puts j
into FLi even though it has crashed. This means that process i invokes election in line
5, but always receive j as a leader in line 6 of fig.1, even though it has crashed.
However, because leader process j crashes at time t, there is a time t’ so that for every
t’’> t’, process i never receives process j as a leader by the liveness property of
election: a contradiction.

• Eventually Weak Accuracy: By contradiction, assume that eventual weak accuracy
is violated. It implies that with every correct process j, there is a correct process i that
suspects it. Let process j be elected as a leader and it doesn’t crash. That is to hold,
there should be a correct process i that never stops suspecting j even though j is
elected to be the leader in the algorithm of fig.1. However, by the liveness property of
the election algorithm of fig. 1, once correct processes j is elected as a leader and
doesn’t crash, then every correct process eventually receives the message (leader, j)
and knows that j is a leader: contradiction.


740

S. Park

• Modal Accuracy: By contradiction, assume that modal accuracy is violated. By
algorithm fig. 1, the predicate j∉ FLi (t) implies that at time t’’< t, process j is elected
and removed from FLi. The predicate j∈ FLi (t’) implies that at time t’> t, process k (
k≠ j ) is elected as a leader when j is the current leader and j is inserted to FLi. Given
that a process was once elected as a leader in stable election, the process can be
demoted only if it crashes. Thus, the new leader can be returned only if the current
leader crashes. That implies j∈F(t’). So it is a contradiction.

The following theorem follows directly from Lemma 3.1.
Theorem 3.1. If any failure detector D solves election, then M μ D.
3.3 The Sufficient Condition for Election
Periodically processes wait for an output from M to ensure the leader’s crash. If the
process receives from M the information that the current leader has crashed and at the
same time the status of current leader is not false, i.e., (current_leaderi ≠ ⊥), the
process invokes consensus with a new candidate for leader and decides the new leader
returned by consensus. Otherwise the process decides the current leader. We assume
that every process i, either crashes, or invokes election in Fig.2. The new leader
candidate of participant i, denoted new_candidatei, is decided by the next function.
The current leader, denoted by current_leaderi, is decided by the consensus function.
The status of participant i whether it is a leader or not is decided by the variable,
leaderi. That is, if the variable leaderi is set true, the process i considers itself a leader.
function election( )
/* Algorithm executed by every process i */
1 leaderi := false;
2 current_leaderi := ⊥;
3 new_candidatei := Next(0);
4 current_leaderi := Consensus(new_candidatei);
5 if (current_leaderi = i ) then leaderi = true fi
6 Periodically (τ) inquiry Mi
7 Upon received HM(i) from Mi do
8 if ((current_leaderi∈ HM(i))∧(current_leaderi ≠ ⊥)) then
9
new_candidatei := Next(current_leaderi);
10 current_leaderi := ⊥;
11 current_leaderi := Consensus(new_candidatei);
12 if (current_leaderi = i ) then leaderi := true fi
13 fi
Fig. 2. Transforming Consensus into Election with M

We define the Next function of process i in Fig.2 as follows.
Next( k ) = min { j | j∉ H(i ,t) ∧ j ≠ k }.
Lemma 3.2. The algorithm of Fig.2 uses M to transform Consensus into Election.
Proof. We consider the properties of Election separately.

Solving Election Problem in Asynchronous Distributed Systems

741

• Safety: A process that every correct process does not suspect is eventually elected
as a leader by Next and Consensus functions. Let process i be the current leader
elected at time t that is denoted by current_leader ( t ) = i, then clearly the process i is
a correct process that the failure detector M of every correct process does not suspect
at time t’, t’< t. By Modal Accuracy the new leader is elected only when the current
leader i has crashed.

• Liveness: Consider leader i that is elected at time t in Fig.3. After that, if the
leader process crashes at time t’, t’>t, then by Strong Completeness of M, there is a
time after that some correct processes suspect the current leader. There is eventually
some correct process which executes line 7-11 of fig. 3. They decide a prospective
leader by using the Next function and transfer it as a parameter to Consensus
function. With the Validity property of Consensus, a process decides its leader only
if some process has invoked consensus. By the Termination property of Consensus,
every correct process eventually decides a leader that ensures the Liveness property
of Election.

We define here failure detector M. Each module of M outputs a subset of Ω. Failure
detector M satisfies Strong Completeness and Eventually Weak Accuracy, together
with Modal Accuracy. Since Consensus is solvable with Strong Completeness and
Eventually Weak Accuracy for any environment with a majority of correct processes
[8], then the following theorem follows from Lemma 3.2:
Theorem 3.2. M solves Election for any environment where a majority of processes
are correct, f<n/2.
Finally, we can state the following theorem from Theorem 3.1 and Theorem 3.2.
Theorem 3.3. For any environment with f < n/2, M is the weakest failure detector to
solve Election.
Proof : It is straightforward from Theorem 3.1 and Theorem 3.2
3.4 Modal Failure Perfection Is Not Perfection
Obviously, failure detector P can be used to emulate M for any environment, i.e., M μ
P. We state in the following that the converse is not true for any environment where at
least one processes can crash in a system.
Theorem 3.4. P j M for any environment where at least one process can crash in a
system.
Proof. (By contradiction). We assume that there is an algorithm AM→P that transforms
M into failure detector P. Then we show the fact that P, transformed by above the
algorithm, satisfies Strong Completeness, but it does not satisfy Strong Accuracy: So
it is a contradiction. We denote by output(P) the variable used by AM→P to emulate
failure detector P, i.e., output(P)i denotes the value of that variable at a given process
i. Let F1 be the failure pattern where process 1 has initially crashed and no other
process has crashed, i.e., F1(t0) = { 1}. Let H1 be the failure detector history where all

742

S. Park

processes permanently output {1} at t’, t’> t0; i.e., ∀i∈Ω,∃t’∈T, t’> t0 : H1( i , t’) =
{ 1}. Clearly, H belongs to M(F1). Since variable output(P) satisfies Strong
Completeness of P then there is a partial run of A M→P, R1 = < F1, H1, I, S1, T > such
that ∃j∈Ω,∃t’’∈T, t’’≥ t’ : {1}⊂output(P)j. Consider failure pattern F2 such that
correct(F2)=Ω (F2 is failure free) and define the failure detector history H2 such that ∀
i∈Ω,∀t∈T : H2( i, t) = { 1}, t’≤ t≤ t’’ and H2( i, t) = Φ, t > t’’. Note that H2∈
M(F2) and t’ ≤ t ≤t’’ ,∀i∈Ω-{ 1} : H1(i ,t) = H2(i ,t). Consider R2 = < F2, H2, I, S2, T
> of A M→P such that S1[k] = S2[k],∀t∈T, t’ ≤ t ≤t’’. Let R2 outputs a history HP∈
P(F2). Since partial runs of R1 and R2 for t’≤ t ≤t’’ are identical, the resulting history
HP of process j is:∀t∈T, t’≤ t ≤t’’: { 1 }⊂output(P)j. But in R2, at t, t’≤ t ≤t’’ : 1
∈ output(P)j and 1∈correct(F2), which means that P violates Strong Accuracy: a
contradiction.


4 Concluding Remarks
So far the applicability of these results to problems other than Consensus has been
discussed in [6,13,14,15]. In [8], it is shown that Consensus is sometimes solvable
where Election is not. In [7], it was shown that the weakest failure detector for
Election is Perfect failure detector P, if we consider Election to be defined among
every pair of processes. If we consider however Election to be defined among a set of
at least three processes and at most one can crash, this paper shows that P is not
necessary for Election. An interesting consequence of this result is that there exists a
failure detector that is weaker than Perfect failure detector P to solve Election at the
environment where a majority of processes are correct, f<n/2.
This paper introduces Modal failure detector M which is weaker than Perfect
failure detector P, and shows that: (1) M is necessary to solve Election, (2) M is
sufficient to solve Election, and (3) M is the weakest failure detector to solve Election
when a majority of the processes are correct. A corollary of our results above is that
we can construct a failure detector that is strictly weaker than P, and yet solves
Election.
Is this only theoretically interesting? We believe not, as we will discuss below.
Interestingly, failure detector M consists of
S+Modal Accuracy and it helps
deconstruct Election: intuitively, S conveys the pure agreement part of Election,
whereas Modal Accuracy conveys the specific nature of detecting a leader crash.
Besides better understanding the problem, this deconstruction provides some practical
insights about how to adjust failure detector values in election protocols.
In terms of the practical distributed applications, we can induce some interesting
results from the very structure of S+Modal Accuracy on the solvability of Election.
In real distributed systems, failure detectors are typically approximated using timeouts. To implement the Modal Accuracy property, one needs to choose a large timeout value in order to reduce false leader failure suspicions. However, to implement
S, a time-out value that is not larger than the one for Modal Accuracy is needed.
S+Modal Accuracy might reduce
Therefore an election algorithm based on
possibility of violating the safety condition but speed up the consensus of electing a
new leader in the case of a leader crash.

◇

◇

◇

◇

◇

Solving Election Problem in Asynchronous Distributed Systems

743

References
1. G. LeLann: Distributed Systems–towards a Formal Approach. Information Processing 77,
B. Gilchrist, Ed. North–Holland, 1977.
2. H. Garcia-Molina: Elections in a Distributed Computing System. IEEE Transactions on
Computers, C-31 (1982) 49-59
3. H. Abu-Amara and J. Lokre: Election in Asynchronous Complete Networks with
Intermittent Link Failures. IEEE Transactions on Computers, 43 (1994) 778-788
4. G. Singh: Leader Election in the Presence of Link Failures. IEEE Transactions on Parallel
and Distributed Systems, 7 (1996) 231-236
5. M. Fischer, N. Lynch, and M. Paterson: Impossibility of Distributed Consensus with One
Faulty Process. Journal of ACM, (32) 1985 374-382
6. T. Chandra and S.Toueg: Unreliable Failure Detectors for Reliable Distributed Systems.
Journal of ACM, 43 (1996) 225-267
7. L. Sabel and K. Marzullo. Election Vs. Consensus in Asynchronous Distributed Systems.
In Technical Report Cornell Univ., Oct. 1995
8. T. Chandra, V. Hadzilacos and S. Toueg: The Weakest Failure Detector for Solving
Consensus. Journal of ACM, 43 (1996) 685-722
9. J. E. Hopcroft and J. D. Ullman: Introduction to Automata Theory, Languages and
Computation. Addison Wesley, Reading, Mass., 1979
10. Garey M.R. and Johnson D.S: Computers and Intractability: A Guide to the Theory of NPCompleteness. Freeman W.H & Co, New York, 1979
11. Eddy Fromentin, Michel RAY and Frederic TRONEL: On Classes of Problems in
Asynchronous Distributed Systems. In Proceedings of Distributed Computing Conference.
IEEE, June 1999
12. Hadzilacos V. and Toueg S: Reliable Broadcast and Related Problems. Distributed
Systems (Second Edition), ACM Press, New York, pp.97-145, 1993
13. R. Guerraoui: Indulgent Algorithms. In: Proceedings of the ACM Symposium on
Principles of Distributed Computing, New York: ACM Press 2000
14. Schiper and A. Sandoz: Primary Partition: Virtually-Synchronous Communication harder
than Consensus. In Proceedings of the 8th Workshop on Distributed Algorithms, 1994
15. R. Guerraoui and A. Schiper: Transaction model vs. Virtual Synchrony model: bridging
the gap. In: K. Birman, F. Mattern and A. Schiper (eds.): Distributed Systems: From
Theory to Practice. Lecture Notes in Computer Science, Vol. 938. Springer- Verlag,
Berlin Heidelberg New York (1995) 121-132

