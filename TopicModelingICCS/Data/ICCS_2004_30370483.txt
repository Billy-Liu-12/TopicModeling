2D and 3D Representations
of Solution Spaces for CO Problems
Eugeniusz Nowicki and Czeslaw Smutnicki
Wroclaw University of Technology,
Institute of Engineering Cybernetics,
Janiszewskiego 11-17, 50-372 Wroclaw, Poland
enowicki@ict.pwr.wroc.pl, czeslaw.smutnicki@pwr.wroc.pl
Abstract. This paper presents various graphical techniques developed
by us to support research of some very hard combinatorial optimization
(CO) problems. Thanks to increased eﬃciency of algorithms and high
power of modern PC, we are able to make visualization of the solution
space and search trajectories, which in order, allows us to analyze and
design modern approximate approaches quickly running towards good
solution. We provide unique graphic representations of solution spaces
and search trajectories of modern approximate algorithms dedicated for
the job-shop problem, the one of the hardest problem in CO.

1

Introduction

Among variety of combinatorial optimization (CO) problems, the scheduling theory provides many hard cases, among which the job shop scheduling problem is
known as a particularly hard one. This multidimensional, discrete CO problem
follows from Operations Research (OR) practice, has relatively simple formulation, excellent industrial applications, ﬁnite but huge number of solutions and
unfortunately is strongly NP-hard. That’s why it is also considered as a permanent indicator of practical eﬃciency of advanced scheduling algorithms, manifesting indirectly the power of OR theory and algorithmic skillfulness. During
last ﬁfty years, a lot of various methods have been designed to solve the problem
in a quick time, see reviews in [1,8].
Modern approximate approaches, as an example tabu search (TS), simulated
annealing (SA) and genetic search (GS), dominate in the job-shop research carried out in the last decade. Although made works improve signiﬁcantly algorithms eﬃcacy (measured by the accuracy as opposing to the running time)
observed phenomena of surprisingly good accuracy and capricious convergence
depending on instances remain unexplained to the end. One supposes that the
answer lies in the chaotic structure of the solution space, characteristic for CO
problems. In particular, amazing TS algorithm, very fast and of excellent accuracy below 4%, designed by us few years ago for the job-shop problem [4],
inspires us to explore these phenomena using advanced graphical tools.
We used for visualizations selected public benchmarks with the number of
operations varying from 225 to 2,000, [7]. Research was supported by Grant
T11A 01624 of the State Committee for Scientiﬁc Research.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 483–490, 2004.
c Springer-Verlag Berlin Heidelberg 2004

484

2

E. Nowicki and C. Smutnicki

Problem, Models, Solutions

There are a set of jobs N = {1, . . . , n}, a set of machines M = {1, . . . , m} and a
set of operations O = {1, . . . , o}. Set O is decomposed into subsets corresponding
to the jobs. Job j consists of a sequence of oj operations indexed by (lj−1 +
j
1, . . . , lj−1 + oj ) which should be processed in that order, where lj = i=1 oi ,
n
j = 1, . . . , n (l0 = 0), and
i=1 oi = o. Operation i must be processed on
machine µi ∈ M during the time pi > 0, i ∈ O. Each machine can process
at most one operation at a time. A feasible schedule is deﬁned by start times
Si ≥ 0, i ∈ O, such that the above constraints are satisﬁed. We look for a feasible
schedule that minimizes the makespan maxi∈O (Si + pi ).
The choice of the model (MILP, disjunctive graphs) determines the form of
the solution and thus character, structure, dimensionality and cardinality of the
space. We operate on the following permutation-and-graph model, [4], which has
the smallest cardinality with minimal fraction of infeasibility.
Set O can be decomposed into subsets Mk = {i ∈ O : µi = k}, k ∈ M .
The sequence of operations from Mk is deﬁned by πk = (πk (1), . . . , πk (|Mk |)),
permutation on Mk , k ∈ M . Let Πk be the set of all permutations on Mk . The
processing order of operations is deﬁned by m-tuple π = (π1 , . . . , πm ), where
π ∈ Π = Π1 × Π2 × . . . × Πm . It is linked with schedule Si , i ∈ O by the digraph
G(π) = (O, R∪E(π)) with a set of nodes O and a set of arcs R∪E(π), where R =
oj −1
n
m
|πk |−1
{(πk (i), πk (i+1))}.
i=1 {(lj−1 +i, lj−1 +i+1)} and E(π) =
j=1
k=1
i=1
Node i ∈ O in G(π) has weight pi , arcs have weight zero. Processing order π is
feasible if G(π) does not contain a cycle. Then Si equals the length of the longest
path going to the vertex i (but without pi ) in G(π), i ∈ O. Makespan Cmax (π)
for feasible π equals the length of the longest path (critical path) in G(π). Thus,
Π is the solution space, where a processing order π ∈ Π is its element.

3

Solution Space

Space Π is discrete, has dimension o, is ﬁnite, but its cardinality is of astronomical size. For the small historical instance FT10 (n = 10, m = 10, o = nm = 100),
m
we have |Π| = k=1 (|Mk |!) = (n!)m ≈ 4 · 1065 , however only (!) approximately
4 · 1048 solutions are feasible, see [5]. The projection of feasible solutions of FT10
on 2D plane printed in high resolution 2400 dpi covers area of 4 · 1032 km2 ,
whereas the surface of Jupiter has only 6.4 · 1010 km2 . “Typical” searching procedure is able to check at most 109 solutions, which corresponds to only 0.1 m2
of the area and can be shown as thread of 0.01 mm width and 10 km length.
The space Π can be perceived as hyper-graph, where nodes represent solutions and each arc links two solutions, so that the former can be obtained
from the later by using a move. For the given solution π, the subset of solutions
(nodes) linked by single arc with π is called the hyper-neighborhood of π, and
can be generated by various types of moves. The move changes sequence of operations processed on a common machine as follows: (A) A-move swaps a pair
v = (a, b) of two adjacent operations a, b, (S) S-move swaps a pair v = (a, b) of

2D and 3D Representations of Solution Spaces

485

two any operations a, b, (I) I-move for a pair v = (a, b) of operations a, b, cuts
out operation a and then inserts it immediately after operation b (if a precedes
b), or immediately before operation b (otherwise). Let πv denote the processing order obtained after the move v. The set of all moves of type Z performed
from π will be denoted by V Z (π), whereas the obtained hyper-neighborhood by
N Z (π) = {πv : v ∈ V Z (π)}, Z ∈ {A, S, I}. The sequence of successive solutions
π 0 , π 1 , . . . , π r , where π i+1 ∈ N Z (π i ), i = 0, 1, . . . , r − 1 constitutes the trajectory (path in the hyper-graph). Hyper-neighborhoods of type A, S, I have strong
connectivity property, i.e. for each pair of solutions α, β ∈ Π exists trajectory
so that α = π 0 , π 1 , . . . , π r = β and r is ﬁnite.
Because of hyper-neighborhood size, its selected subset has been used in local
search and called simply neighborhood. There are a few attributes for neighborhoods generated by moves: size, feasibility, usefulness and connectivity, [5], which
inﬂuence on trajectories going through the space. The most popular neighborhoods are the following two based on A-moves. The ﬁrst is generated by move set
V A1 (π) ⊆ V A (π), where v = (a, b) ∈ V A1 (π) if only a and b belongs to a critical
path in G(π), [3]. All these moves are feasible (leads from feasible to feasible
solution), but some of them are useless (leads to essentially worse solutions).
Neighborhood has only weak connectivity property (β is not any but one of optimal solutions). The second is generated by the move set V A2 (π) ⊆ V A1 (π),
obtained from V A1 (π) by elimination of all useless moves, with the help of block
property; all moves are feasible, [4]. Although N A2 (π) does not have the connectivity property, in experiments it behaves better than other neighborhoods.

4

Distances in the Space

We deﬁne the distance DZ (π, σ) between processing orders π, σ ∈ Π as the minimal number of moves Z ∈ {A, S, I} necessary to go from π to σ (i.e. the shortest
path in hyper-graph). Clearly, we have DZ (π, σ) = 1 for σ ∈ N Z (π). It has been
shown, [5], that because move is being performed inside single machine, then
permutation πk can be mapped onto permutation on set N k = {1, 2, . . . , |Mk |},
k ∈ M . Thus, the measure DZ (π, σ) = k∈M DkZ (πk , σk ) and its properties can
be derived from properties for measure DkZ (πk , σk ) between permutations πk
and σk on the set N k . Follows results from [2], there have been collected in [5]
basic properties of measures for all types of moves (A,N,I): recipes for calculation, mean value, variance and computational complexity. Here only notice that
the measure DkA (πk , σk ) equals the number of inversions in permutation πk−1 σk ,
where πk−1 is the inverse permutation πk , k ∈ M . Hereinafter we analyze the use
of A-moves only, thus upper index A will be skipped in proper notions.
For the sake of huge size of the space, its character can be analyzed statistically by random sampling. In Fig. 1 (left) one can ﬁnd, for typical benchmark ta04 (n = 15, m = 15, o = 225), the distribution of DIST (π) =
100 ∗ D(π, π REF )/Dmax , where Dmax = maxα,β D(α, β) = mn(n − 1)/2, taking
into account the random sample of ALL solutions and the random sample of
FEASible solutions, where π REF is a ﬁxed reference solution (optimal solution).

486

E. Nowicki and C. Smutnicki

FEAS

1,0

frequence [%]

0,25

frequence [%]

1,2

ALL

FEAS

0,20

0,8
0,15
0,6
0,10
0,4
0,05

0,2
DIST [%]
0,0

RE [%]
0,00

0

10

20

30

40

50

60

70

0

25

50

75

100

125

150

175

200

Fig. 1. Instance ta04: Distribution of DIST (π) (left) and RE(π) (right) for 500,000
random solutions; ALL - for any solutions, FEAS - for feasible solutions

Curve ALL ﬁts ideally to the theoretical distribution of D(α, β), with the mean
0.5 ∗ Dmax . From curve FEAS one can read the mean value of DIST distribution
for feasible solutions equal approximately 0.25 ∗ Dmax ; this holds for almost all
benchmarks ta–. Both distributions do not depend on the choice of π REF .
The distribution of RE(π) = 100 ∗ (Cmax (π) − Cmax (π REF )/Cmax (π REF ),
which is the relative error, for the same sample of FEASible solutions is shown
in Fig. 1 (right). The distribution is close to gaussian. RANdomly found solution has RE≈120% (standard deviation 15%), whereas we know that the best
constructive algorithm called INSA oﬀers RE≈20% and the best improvement
algorithm TS has RE≈4%. Note also, that ﬁnding feasible solution with RE below 50% is statistically inﬁnitesimal. Results remain valid for all ta– benchmarks.

5( >@







\





























',67 >@




















[














Fig. 2. Instance ta04: 2,000 random feasible solutions in coordinates DIST/RE (left)
and X/Y (right);
marks starting solution found by INSA, ◦ - optimal solution

2D and 3D Representations of Solution Spaces

487

The main goal of the space analysis is the identiﬁcation of the landscape
and its typical element called the big valley, which plays role of an attractor
in the space. Its presence means that distances between good locally optimal
solutions and the global one are signiﬁcantly positively correlated with goal
function values of these solutions. It also means that majority of very good local
optima concentrates in a relatively small area of the solution space.
In Fig. 2 one can ﬁnd plot of random feasible solutions showing the correlation
0.3 between DIST and RE (statistically signiﬁcant on the level 0.1%), both
calculated with respect to the optimal solution π REF . This fact conﬁrms the
existence of “big valley”, not only for good locally optimal solutions (as it showed
in [5]) but also for all feasible solutions.

5

2D Transformations

Our aim is to transform solutions π j ∈ Π, j = 1, . . . , t into points on 2D plane
“rationally” preserving the distance from Π. Problem of transformation continuous n-dimensional space Rn into space R2 is known for years, see the review
in [6]. However, some troubles appear in the application to CO problems. First,
the source space is discrete. Second, metric in Π is not Euclidian, takes only discrete values, and can inﬂuence on the ﬁnal result of the transformation. Third,
and the most important in our opinion, the calculation process should be cheap
since in practice we need to transform 1,000 . . . 10,000 solutions from the space
with dimension 200. . .2,000. That’s why we focus chieﬂy on reference points
approaches. Among a few proposals, we describe below only one, fast and of
satisfactory mapping accuracy (accuracy is measured by the correlation between
distances in space Π and Euclidian distances of 2D images). Let σ i , i = 1, . . . , r
be a sequence of reference solutions. Each π is transformed into point (x, y) on
2D plane according to the following formula
x
=
y

r
i=1

D(π, σ i )

)
sin( (i−1)π
r
cos( (i−1)π
)
r

(1)

We performed tests on most of 80 ta- benchmarks, with r = 3 reference
solutions: σ 1 = π REF , σ 2 – solution generated by algorithm INSA used as the
starting point for our method TS in [4], and σ 3 – solution generated by SPT
rule, one of the most commonly applied in constructive algorithms. In the series
of graphical runs for a few known algorithms, we found similar results for all
benchmarks. Then, we discuss here only one, typical. In Fig. 3 one can ﬁnd
search trajectories (in various axes) performed by algorithms TS, SA, RANdom;
all work on neighborhood N A2 . Compare chaotic track of algorithm RANdom
trapped in a local sub-area of the solution space with directional track of TS; in
these conditions the behavior of SA is similar to RANdom. (From unpublished
here results we found that RANdom and SA behaves even worse if we replace
N A2 by greater neighborhood e.g. N A1 or N A .) This static ﬁgure does not reﬂect
the evolution of the trajectory in time, therefore in Fig. 4 we have provided speed
of convergence of tested methods in iterations (in time) – TS is the best.

488

E. Nowicki and C. Smutnicki

40

RE [%]

y

TS

TS

0

35
-2
30
-4

25

-6

20

-8

15

-10

10

-12

5
DIST [%]

0
0

40

2

4

RE [%]

6

8

10

x
-14
-18

12

-16

-14

-12

y

SA

-10

-8

-6

-4

-2

SA

0

35
-2
30
-4

25

-6

20
15

-8

10

-10
-12

5
DIST [%]
0

x
-14

0

40

2

4

RE [%]

6

8

10

12

RA

-18

-16

-14

-12

-10

-8

-6

-4

-2

RA

y
0

35
-2

30

-4

25

-6

20
15

-8

10

-10
-12

5

x

DIST [%]
0

-14
0

2

4

6

8

10

12

-18

-16

-14

-12

-10

-8

-6

-4

-2

Fig. 3. Instance ta04: 10,000 iterations of algorithms TS, SA, RANdom (ploted every 10
iterations) in coordinates DIST/RE (left) and X/Y (right);
marks starting solution
found by INSA, ◦ - optimal solution

2D and 3D Representations of Solution Spaces












5(>@

76

',67 >@




 5(>@























5$1

',67 >@










 5(>@
























489

6$

',67 >@




5(>@



6$



76



5$1

,WHU












Fig. 4. Speed of convergence for the instance and algorithms from Fig. 3; there are
marked only solutions reducing the makespan

Fig. 5. Instance ta04: Optimization surface spanned on solutions from Fig. 2 right

490

E. Nowicki and C. Smutnicki

Clearly, the choice of r and the location of reference solution inﬂuences on
the image – this subject is currently being studied. Primal tests suggest that
reference solutions should be spread widely, whereas the increase of r does not
inﬂuence on mapping accuracy signiﬁcantly.

6

Optimization Surfaces

Using certain transformation of solutions into 2D points, we can try to draw in
3D the optimization surface, spanned on points (xi , yi , zi ), i = 1, . . . , t, where
(xi , yi ) is the image of solution π i on 2D, zi = RE(π i ), and π 1 , . . . , π t is the
sample of feasible solutions from Π. An example of such surface spanned on a
part of points from Fig. 2 is shown in Fig. 5. It destroys our classical imagination
about optimization process – the surface is sharp without any regularity, like the
brush, fur, high mountain or stone forest. Local extremes are distributed densely,
chaotically, and act as deception points. The primal two natural associations are
more suitable since through the increase of the sample cardinality one obtains
higher density of tops and wells on almost the same area. The ﬁgure indicates
fundamental troubles in the research of CO problems, formulated as the rhetorical question “How to ﬁnd the proper path on this surface being a small ant with
limited visibility?” This pessimistic attitude is overcomed by existing algorithms
– TS from [4] ﬁnds such path intentionally and consciously, tending to RE=0%
for ta04 (RE≈4% for all ta– instances). Other methods, like SA or GS search
space through the sampling points on the surface - properties of such methods
are completely predicable. That’s why frequently SA and GS need support by
complete/partial neighborhood search procedures in order to reach satisfactory
quality.

References
1. Bla˙zewicz, J., Domschke, W., Pesh, E.: The job shop scheduling problem. Conventional and new solution techniques. European Journal of Operational Research 93
(1996) 1–33
2. Knuth, D.E.: The art of computer programming. Addison Wesley Longman (1997)
3. Van Laarhoven, P., Aarts, E., Lenstra, J. K.: Job-shop scheduling by simulated
annealing. Operations Research 40 (1992) 113–125
4. Nowicki, E., Smutnicki C.: A fast tabu search algorithm for the job-shop problem.
Management Science 42 (1996) 797–813
5. Nowicki, E., Smutnicki, C.: Some new ideas in TS for job-shop scheduling. Technical
Report 50/2001. In print in: Rego C., Alidaee B. (eds.): Adaptive Memory and
Evolution: Tabu Search and Scatter Search. Kluwer Academic Publisher (2004)
6. Siedlecki, W., Siedlecka, K., Sklansky, J.: An overview of mapping techniques for
exloratory pattern analysis. Pattern Recognition 25 (1988) 411–429
7. Home page of E. Taillard: http://www.eivd.ch/ina/collaborateurs/etd/default.htm
8. Vaessens, R., Aarts, E., Lenstra, J.K.: Job shop scheduling by local search. INFORMS Journal of Computing 8 (1996) 303–317

