A High-Level Petri Net Based Decision Support
System for Real-Time Scheduling and Control of
Flexible Manufacturing Systems: An
Object-Oriented Approach
Gonca Tuncel and Gunhan Mirac Bayhan
Department of Industrial Engineering,
University of Dokuz Eylul,
35100 Bornova-Izmir, TURKEY
{gonca.tuncel, mirac.bayhan}@deu.edu.tr

Abstract. Petri nets (PNs) are powerful tools for modeling and analysis
of discrete event dynamic systems. The graphical nature and mathematical foundation make Petri net based methods appealing for a wide variety
of areas including real-time scheduling and control of flexible manufacturing systems (FMSs). This study attempts to propose an object-oriented
approach for modeling and analysis of shop floor scheduling and control
problem in FMSs using high-level PNs. In this approach, firstly, object
modeling diagram of the system is constructed and a heuristic rule-base
is developed to solve the resource contention problem, then the dynamic
behavior of the system is formulated by high-level PNs. The methodology
is illustrated by an FMS.

1

Introduction

Due to high complexity of ﬂexible manufacturing systems, some mathematical
programming related methods such as integer programming, linear programming, and dynamic programming often lack to describe the practical constraints
of complex scheduling problems. On the other hand, classical scheduling techniques such as branch-and bound and neighborhood search techniques cause
substantial increase in state enumeration, and thus computation time grows exponentially as the problem size increases. Recently, either existing techniques
are improved or new scheduling approaches are developed to deal with the
practical constraints of real-world scheduling problems. These methods include
simulation-based approaches, expert systems, PNs based methods, AI-based
search techniques, and hybrid methods [1]. Although the ﬁrst applications of
PNs were in the ﬁeld of communication protocols and computer systems, they
have been extended and applied to the broader range of problems including the
scheduling of production systems by means of their modeling capabilities and
formulation advantages. A signiﬁcant advantage of PNs is its representation capability. PNs can be explicitly and concisely model concurrent, asynchronous
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 843–851, 2005.
c Springer-Verlag Berlin Heidelberg 2005

844

G. Tuncel and G.M. Bayhan

activities, multi-layer resource sharing, routing ﬂexibility, limited buﬀers, and
precedence constraints [2], [3]. However, modeling and analysis of complex or
large size systems require too much eﬀort, since considerable number of states
and transition requirements cause state explosion problem. Furthermore, PNs
are system dependent and lack some features like modularity, maintability, and
reusability, which are the properties of Object-Oriented approach [4]. Therefore, recently, there has been a growing interest in merging PNs and Objectoriented approach to combine graphical representation and mathematical foundation of PNs with the modularity, reusability, and maintability features of
Object-orientation. Here, we present a PN based Decision Support System (DSS)
for real-time shop ﬂoor scheduling and control of FMSs. High-level PNs and Object Oriented Design (OOD) approach were used for system modeling, and a
heuristic rule (knowledge) based approach was employed for scheduling /dispatching in control logic. The presented DSS helps managers to take control
decisions eﬀectively and eﬃciently by considering the current status of the shop
ﬂoor. The proposed methodology is illustrated on an example FMS. Many researchers have employed PNs for scheduling and control of manufacturing systems [5], [6], [7], [8]. However, Petri-net based dynamic scheduling of FMSs dealing with production of several product types with ﬂexible routes, setup times,
material handling system, and operator constraints has not been given much
attention. In Section 2, modeling methodology is given. The paper is concluded
by Section 3.

2

Modeling Methodology for Real-Time Shop Floor
Scheduling and Control Problem of FMSs

FMSs are characterized by concurrency, resource sharing, routing ﬂexibility, limited buﬀer sizes, and variable lot sizes. For interaction activities, and the coordination of individual units, a descriptive and dynamic modeling tool is required
to model in detail the concurrency, and synchronization with respect to time
[1]. The units in this system can be considered as objects interacting with each
other, and they can be added, removed or modiﬁed. Therefore, OOD concepts
can be employed to design of shop ﬂoor scheduling and control systems in FMSs,
and PNs can be used to model dynamic behavior of the system. The properties
and behavior of the objects were modeled by the data/attribute and methods
/operations. OOD methodology used for development of the DSS is similar to
those given in [9], [10].
2.1

Illustration of the Methodology with an FMS with Alternative
Operations and Setup Times

An FMS with alternative operations and setup times is employed to explain the
modeling methodology of the proposed decision support system for real-time
shop ﬂoor scheduling and control problem. The physical layout of the system
considered is shown in Figure 1. The system consists of a loading and unloading

A High-Level PNs Based DSS for Real-Time Scheduling

845

Fig. 1. Layout of the FMS

station, 9 workstations (CNC1, CNC2, Multiplex1, Multiplex 2, HMC1, HMC2,
HMC3, Drill 1, and Drill 2), a material-handling system, and several operators.
Each workstation has one machine with input and output buﬀers with limited
capacity. Each machine can only process a part at a time, and once a part is
processed the machine setup is needed to process a diﬀerent part type. Each
workstation is allowed to contain two pallets at most at a time. The FMS is
designed to produce a variety of products simultaneously. Each product has
alternative routes for some operations (i.e. two or more machines are enable to
perform same operations). The operational policy is under push paradigm. Each
job has a best operation sequence that determines the order in which resources
must be assigned to the job. But the eﬃcient utilization of resources on real time
basis requires a real time resource allocation policy to assign resources to jobs as
they advance through the system. Since each machine is capable of processing
a variety of part types and each part has to visit a number of machines, there
is often a conﬂict when more than one part is contending for the same machine
or material handling system. The problem is the allocation of resources to a
set of tasks, that is, determination of the best route of each task in the system
according to the current shop-ﬂoor condition (due dates, release dates, order
quantities, tardiness penalties, inventory levels, and setup status).
Object Modeling of the System. The object modeling technique (OMT)
that is the most widely used OOD methodology is employed to describe and
analyze the object classes. It divides the system considered into object classes,
and it is used to model the static relations among FMS objects by the class
structure. Each individual FMS object is derived as an instance of CPN class
module. The behavior of the objects is described by operations associated with
object classes. Figure 2 shows the OMT diagram corresponding to the DSS. This
diagram captures the relevant properties of the FMS objects and their functions

846

G. Tuncel and G.M. Bayhan

Fig. 2. OMT Diagram of the FMS

in the DSS. The links between objects with black dots at each end represent the
associations. Individual classes of FMS objects are deﬁned as follows:
Load and Unload Station Class: raw parts with the attributes such as products type, due date, and process plan, are set up on pallets and stored to the load
storage buﬀer, and a route request is sent to the Scheduler Class for the pallet
stored. When information on next destination for a pallet is received from the
Scheduler Class, the pallet is moved to the active buﬀer, loaded to the transpallet, and sent to the destination workstation. If all operations of the parts on a
pallet are completed, the pallet returns to the load/unload (L/UL) station and it
is transferred to unload storage buﬀer. Then the ﬁnished products are unloaded
from the pallet. Thus, pallets become available and are sent to the free pallet
buﬀer to be used again.
Workstation Class: parts are processed at machining stations. Once a
transpallet arrives at a workstation, the pallet is moved to the input buﬀer
of the workstation and the transpallet becomes free. When machining station
is idle, the pallet goes from the input buﬀer to the machining buﬀer, and one
operator request is sent to the Operator Object. Machine setup control is also
performed in WS class. If the machine operates the same part type with the
previous part type, it doesn’t need a setup operation. When all the parts on the
pallet are processed, the pallet is sent to the output buﬀer of the workstation,
and a routing request is sent to the Part Routing Control object. When a routing request is replied for a pallet, it is transferred to the active buﬀer, and then
sent to the destination station by transpallet. Part transport class: parts are
transported by transpallet between stations. The Part Transport Object accepts
a transport request from the Scheduler Class, and forwards a transpallet to the

A High-Level PNs Based DSS for Real-Time Scheduling

847

station, which required it. Thus ready pallet is loaded to the transpallet, and
transferred to the destination station.
Operator class: machine setup operation, loading and unloading operations
are performed by operators. Operators working at workstations are represented
by Operator Class.
Scheduler class: part ﬂow between stations are controlled and managed
by Scheduler Class. Part Routing Control Object is an instance of Scheduler
Class. In a manufacturing system, concurrent ﬂow of parts competing for sharing
limited resources causes resource contention problem. Resource sharing in any
manufacturing system often leads to conﬂicts. The system controller must be
capable of resolving these conﬂicts eﬀectively. From the standpoint of the PNs,
resource sharing increases the complexity in scheduling. The proposed DSS use
a heuristic rule based approach to solve resource contention problems and to
determine the best route(s) of the parts, which have routing ﬂexibility. The
following heuristics are used to solve the resource contention problem:

E_BUFFER:NUL(1)

LOAD_STORAGE:NUL(25)

ROUTE_REPLY:R_CONTROL
TRANSP_REPLY:T_CONTROL

RAW_PARTS:PART

P_PALLET:PART

LOAD_P_PALLET

P_LOAD_STORE:PART

MOVE_P_STORAGE

P_TRANSFER

RELEASE_P_PALLET

ROUTE_REQ:R_CONTROL

DELIVER_RAW_PARTS

READY_P_PALLET:PAR

PARTS_R:PART

ACTIVE_BUFFER:NUL(3)

ENABLE:NUL(1)
OPERATORS:NUL(2)

ORDERS:PART

FREE_PALLETS:NUL(50)

SET_ACTIVE_BF_CAPACITY

ORDERS_ARRIVE,T

SEND_F_PARTS

P_PALLET_IN_UNLOAD:PART

P_TRANSP_ARRIVE:PA

PARTS_F:PART

F_PARTS:PART

UNLOAD_P_PALLET

STORE_P

RECEIVE_F_P

INITIALIZE:NUL(1)

STATISTIC_BF:NUL(1)

UNLOAD_BUFFER:L_U_STATION(50)

TRANSP_FREED:NUL

FINISHED_PRODUCTS:PART
R_REQUEST_2

T_REQUEST_1

Fig. 3. CPN Model of Load / Unload Station Class

– Finished products have priority for transportation.
– Semi-ﬁnished or raw parts are ranked according to their next operation number (highest is ﬁrst), or due dates (lowest is ﬁrst) for the parts with the
identical operation number.
– Alternative machines are ranked according to their operation time (shortest
is ﬁrst), and the pallet is routed to the available machine among the alternative machines which is ranked ﬁrst and doesn’t require setup operation.

848

G. Tuncel and G.M. Bayhan

– If there is no available machine, which doesn’t need setup operation, the
route request is accepted regarding the order’s critical ratio.
– After all the route requests are checked under the current system status, the
route requests, which are not critical, are reevaluated to be routed.

CPN Models of FMS Objects. Dynamic behavior/control logic of the FMS
is formulated by constructing high-level PN model of the system based on the
static relations of the OMT model. For this purpose, each CPN class model is ﬁrst
constructed to capture concurrency and synchronization of the system. Internal
places and transitions are used to model the operations and dynamic behavior
inside the Object Class, and input and output places are used to model the
interface of the objects. Then all the related PN models of classes are connected
through the input and output places to obtain the complete model and the
control logic of the system. In Figures through 3-7, the CPN class models are
displayed.
RT_REQ_RECEIVE

RT_REQUEST:R_CONTROL

ROUTE_REQ:R_CONTROL

ROUTE_FINISHED_P,5

FINISHED_P:R_CONTROL

CHECK_FINISHED_P,3

TRANSP_ACKN:NUL

UNLOAD_BUF:L_U_STATION

SETUP_ST:P_TYPE

CHECK_NEXT_OPERTN,2
INITIALIZE:NUL

ROUTE_ST_P,4

R_REQ:R_CONTROL

ALTR_RT_COUNTER,3

ROUTE_REQUEST:R_CONTROL

ROUTE_REPLY:R_CONTROL

ROUTE_CR_P,4

SEIZE_R_REQUEST

COMPUTE_CR,2

WS_STATUS:WORKSTATION

CHECK_CR

RELEASE_R

ENABLE:NUL(1)

R_REQUEST:R_CONTROL

P_PALLET_CR:R_CONTROL
ALTR_RT_CNTR,3
TRANSP_REQ:T_CONTROL

CHECK_NOT_CR

RELASE_REQ,2

ENABLE1:NUL(1)

ROUTE_P,3

SEIZE_R_REQ

R_REQ_2:R_CONTROL

ALTR_RT_CNTR1,2

RT_REQ:R_CONTROL

P_NOT_ST_CR:R_CONTROL

RELEASE_RT_REQ,1

T_REQUEST

R_REPLY_1

R_REPLY_2

Fig. 4. CPN Model of Scheduler Class

Since the standard PNs are insuﬃcient to model the complex and large size
systems, they have been extended to High-level PNs, which allow arbitrary complex data types for tokens. Thus, transitions and places can be constructed by
using a special programming language. In this study, Artifex which is a modeling
and simulation environment supporting the design of discrete event systems is
employed to model CPN classes by using a high level language C/C++.

A High-Level PNs Based DSS for Real-Time Scheduling

OPERT_ACKN:O_CONTROL(1)

OPERT_REQ:O_CONTROL

P_PALLET_RECEIVE

MACHN_READY

P_PARTS_UNLOAD

P_PALLET_IB:PART

849

P_LAOD

P_AT_MACHINE:PART

P_PALLET_MCH:PART

PARTS:PART

P_TRANSP_ARRIVE:PART
MACHINE_ST:NUL
P_PROCESSING

PARTS_TYPE:P_TYPE
OPERT_REPLY:O_CONTROL

MCHN_SETUP

SETUP_ST:P_TYPE

TRANSP_FREED:NUL

WS_ST:WORKSTATION(1)
MACHINE_STATUS:NUL(1)

TRANSP_REPLY:T_CONTROL

LAST_P_TYPE:P_TYPE(1)

ROUTE_REPLY:R_CONTROL

P_PALLET_OB:PART

P_PALLET:PART

LOAD_P_PALLET

MOVE_P_OB

RELEASE_P

TRASFER_P

P_PROCESSED:PART

WS_STATUS:WORKSTATION

P_PALLET_READY:PART

P_UNLOAD

PARTS_READY:PART

READY_P_PALLET:PART

ROUTE_REQ:R_CONTROL
OUTPUT_BF:NUL(1)

ACTIVE_BUFFER:NUL(1)

OPERT_FREED:NUL

R REQUEST 1

T REQUEST 2

O REQUEST

Fig. 5. CPN Model of Workstation Class

TRANSP_REPLY:T_CONTROL

T_TRANSFER:NUL(1)

ACCEPT_T_R

TRANSP_REQ:T_CONTROL

LOAD_P

T_REQ_ACCEPTED:T_CONTROL

SET_TRANSP_CAPACITY

T_REPLY

ROUTE_T

PALLET_IN_TRANSP:PART

P_TRANSP_ARRIVE:PART

F_TRANSP_ARRIVE

FREE_TRANSP:NUL

ENABLE:NUL(1)

READY_P_PALLET:PART

T_REPLY_1

TRANSP_ACKN:NUL(1)

TRANSP_FREED:NUL

T_REPLY_2

Fig. 6. CPN Model of Part Transport Class

3

Conclusion

In recent years, there has been a growing interest in applying PN theory for
scheduling of production systems by means of their modeling capabilities and
formulating advantages. In this study, a PN based DSS for shop ﬂoor schedul-

850

G. Tuncel and G.M. Bayhan

O_REPLY
OPERT_ACKN:O_CONTROL

OPERT_A_B:NUL(1)

OPERT_AT_WS:O_CONTROL

OPERT_REQ:O_CONTROL
ACCEPTED_O_R:O_CONTROL

ACCEPT_OPERT_REQ

SEND_OPERT

OPERT_ARRIVE

ENABLE:NUL(1)

FREE_OPERT:NUL

OPERT_FREED:NUL

SET_OPERT_CAPACITY

Fig. 7. CPN Model of Operator Class

ing and control of FMSs is presented. In the modeling process, object-oriented
approach is used. The developed rule-based DSS aims to solve the problem of
resource contention problem and to determine the best route(s) of the parts,
which have routing ﬂexibility. Decisions are taken on real-time basis by checking
product types, due dates, alternative process plans, next possible destination
resource, setup status, and resource utilizations rates. The DSS takes a global
view of the system state before making decision about resource assignment, and
proposes a dynamic approach to solve the conﬂict problems. It has adaptive and
autonomous ability for obtaining intelligent control, and can be used for diﬀerent production systems by only changing some system parameters (i.e. number
of operators and stations, types of products, and process plan information) in
Object Classes. Performance analysis can be performed under diﬀerent system
conﬁgurations.

References
1. Lin, J.T., Lee, C.C.: Petri net-based integrated control and scheduling scheme for
flexible manufacturing cells. Computer Integ. Manuf.Systems, 10 (1997)109-122.
2. Murata, T.: Petri Nets: Properties, Analysis and Applications. Proceedings of the
IEEE, vol.77/4 (1989) 541-580.
3. Zurawski, R., Zhou, M.C.: Petri Nets and Industrial Applications: A Tutorial.
IEEE Transactions on Industrial Electronics, 4 (1994) 567-582.
4. Wang, L.: Object-oriented Petri nets for modelling and analysis of automated manufacturing systems. Computer Integ. Manuf. Systems, 26 (1996) 111-125.
5. Hatano, I., Yamagata, K., Tamura, H.: Modeling and on-line scheduling of flexible
manufacturing systems using stochastic Petri nets. IEEE Trans. Software Eng., 17
(1991) 126-133.
6. Lee, D.Y., DiCesare, F.: Scheduling flexible manufacturing systems using Petri nets
and heuristic search. IEEE Trans. Robot. Automat., 10 (1994) 123-133.

A High-Level PNs Based DSS for Real-Time Scheduling

851

7. Chetty, O.V.K., Gnanasekaran, O.C.: Modelling, simulation and scheduling of flexible assembly systems with coloured petri nets. Int. J. Adv. Manufacturing Technology, 11 (1996) 430-438.
8. Jain, P.K.: Solving resource contention problem in FMS using Petri nets and a
rule-based approach. Int. J. of Production Research, 39 (2001) 785-808.
9. Chen, J., Chen, F.F.: Performance modelling and evaluation of dynamic tool allocation in flexible manufacturing systems using coloured Petri nets: An object-oriented
approach. Int. J. of Adv. Manufacturing Technology, 21 (2003) 98-109.
10. Venkatesh, K., Zhou, M.C.: Object-oriented design of FMS control software based
on object modeling techniques diagrams and Petri nets. J. of Manufacturing Systems, 17 (1998) 118-136.

