Procedia Computer Science
Volume 80, 2016, Pages 1671–1681
ICCS 2016. The International Conference on Computational
Science

Anticipative Hybrid Extreme Rotation Forest
Borja Ayerdi1 , Manuel Graña1
Computational Intelligence Group, UPV/EHU, Dept. CCIA, San Sebastian, Spain

Abstract
This paper introduces an improvement on the recently published Hybrid Extreme Rotation
Forest (HERF), consisting in the anticipative determination of the the fraction of each classiﬁer
architecture included in the ensemble. We call it AHERF. Both HERF and AHERF are heterogeneous classiﬁer ensembles, which aim to proﬁt from the diverse problem domain speciﬁcities
of each classiﬁer architecture in order to achieve improved generalization over a larger spectrum of problem domains. In this paper AHERF are built from a pool of Decision Trees (DT),
Extreme Learning Machines (ELM), Support Vector Machines (SVM), k-Nearest Neighbors
(k-NN), Adaboost, Random Forests (RF), and Gaussian Naive Bayes (GNB) classiﬁers. Given
a problem dataset, the process of anticipative determination of the ensemble composition is as
follows: First, we estimate the performance of each classiﬁer architecture by independent pilot
cross-validation experiments on a small subsample of the data. Next, classiﬁer architectures
are ranked according to their accuracy results. A probability distribution of classiﬁer architectures appearing in the ensemble is built from this ranking. Finally, the type of each individual
classiﬁer is decided by sampling this probability distribution. Computational experiments on a
collection of benchmark classiﬁcation problems shows improvement on the original HERF, and
other state-of-the-art approaches.
Keywords: ELM, heterogeneous ensembles

1

Introduction

Ensembles of classiﬁers aim to obtain improved classiﬁcation results by the combination of
weak and diversiﬁed classiﬁers [21, 30]. Early ensemble of classiﬁers were homogeneous, such
as the Random Forest, which combines the outputs of a collection of Decision Trees (DT) by
majority voting [5, 6] built from bootstrapped training data over random variable selections, or
the ensembles of Support Vector Machines (SVM) [19]. Sequential data selection approaches
have also been applied to build a pipeline of ensembles progressively more specialized [26]. In
the design of ensembles, there is an emphasis on diversiﬁcation following from the expectation that classiﬁers with quite diﬀerent ﬁelds of expertise may have a synergistic eﬀect on the
whole to improve classiﬁcation performance. Approaches to obtain diversiﬁcation include the
preprocessing of the data by randomized rotation matrices applied, as in Rotation Forests [24],
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.507

1671

AHERF

Ayerdi, Gra˜
na

or supervisedly built projections [11]. Another way to obtain diversiﬁcation is to build heterogeneous ensembles, where individual classiﬁers have diﬀerent architectures, so that intrinsic
sensitivity of the methods to the data distribution may be exploited to have diversity [2]. Recent approaches on the decomposition of multi-class problems into several one-class problems
can be viewed as an special case of the ensemble approach [20, 18]
Extreme Learning Machines (ELM) [17, 12, 14, 16] have a great appeal for their very quick
learning, despite their lack of stability, i.e. repeated instances of training may provide wide
diﬀerent performance results. Ensemble classiﬁers assume that the individual classiﬁer error
follows a symmetric (if not Gaussian) distribution around zero (no bias), so that the joint eﬀect
of the ensemble is to reduce the error, assuming that the combination of errors is additive. This
works well if the individual classiﬁers are independent and the joint decision is equivalent to
an OR rule. Voting ELM (V-ELM) [4, 3, 9] is a direct composition by majority voting of a
collection of ELMs trained independently. This straightforward ensemble approach enhances
the stability of ELM results, by approaching the limit perfect classiﬁcation performance when
the number of training samples grows suﬃciently. In this line of work, the recently proposed
Hybrid Extreme Rotation Forest (HERF) [2], is an heterogenous ensemble of ELMs and DTs
over a random rotation of bootstrapped training data similar to the Rotation Forest. HERF has
been shown to be successful in remote sensing and medical image segmentation [1]. However,
we have observed that the rigid composition of the ensemble is very restrictive.
The contribution of this paper is an anticipative procedure for the selection of the ensemble components, as well as an extension of the pool of elementary classiﬁer architectures. We
call this approach AHERF. The procedure is based on the probability distribution modeling
the likelihood of including a classiﬁcation architecture in the ensemble on the basis of its performance on a subsample of the dataset. Hence, building the ensemble involves sampling of
this probability distribution to decide the architecture of each individual classiﬁer added to
the ensemble. Individual classiﬁer specialization is enhanced by this anticipative modeling and
sampling [29]. That is, the AHERF may have quite diﬀerent architecture composition depending on the problem. Note that some ensembles, such as Random Forests and AdaBoost, are
used as elementary classiﬁers in AHERF, so that the realization of AHERF in this paper is
an ensemble of ensembles. We provide a rationale justiﬁcation of the expected improvement
due to the architecture probabilistic selection, formalizing the intuition that using classiﬁer
architectures which are better suited to the dataset at hand improves the performance of the
whole.
The paper is structured as follows: Section 2 recalls the basic deﬁnitions of the classiﬁer
building methods used in the AHERF. Section 3 describes the algorithm building the randomized rotation data transformation. Section 4 gives the description of the AHERF. Section 6
discusses the experimental design followed the validation of proposed AHERF. Section 7 gives
the experimental results and a discussion of their signiﬁcance. Section 8 gives our conclusions
and future work.

2

Elementary Classiﬁers

Elementary classiﬁers implementation in the experiments reported in this paper are extracted
from SciKit1 Python package [22]. The Python implementation of AHERF is available at 2 .

1 http://scikit-learn.org/stable/supervised_learning.html#supervised-learning
2 http://www.ehu.es/ccwintco/index.php/GIC-source-code-free-libre

1672

AHERF

Ayerdi, Gra˜
na

Decision trees and random forests Decision Trees (DT) [7, 23] are built by recursive
partitioning of the data space using some quantitative criterion (e.g., mutual information, gainratio, gini index). Tree leaves correspond to the probabilistic assignment of data samples to
classes. Often, a pruning process is applied in order to reduce both tree complexity and training
data overﬁtting. Ensembles of DT classiﬁers were among the ﬁrst been proposed, i.e. Bagging
[5] and Random Forests [6]. Random Forests are ensembles of DT, where each individual DT is
built on a bootstrapped training data subset over a random subset of the input variables. The
majority voting rule applied to the ensemble of outputs decides the input data class assignment.
We use the default settings of SciKit, 10 trees of unlimited depth.
ELM Extreme Learning Machines (ELM) [17, 13, 16, 14, 15] was proposed as a very fast
training algorithm for single-layer feedforward neural networks (SLFN). The key observation
leading to ELM is that it is possible to teach a SFLN sidestepping the costly gradient descent
training of the hidden layer by performing a random instantiation of the SLFN hidden layer node
weights. Summarizing, the neural network output applied to all data samples can be written
ˆ where H is the hidden layer output matrix, and β = (β1 . . . βM )T
in matrix form as Hβ = Y,
T
ˆ
and Y = (ˆ
y1 , . . . , y
ˆN ) are the network output weights and value of the output units of the
network, respectively. The training problem reduces to the estimation of the output weights β,
which is a least squares linear problem minimizing the classiﬁcation error traditionally solved
by the Moore–Penrose generalized inverse of the matrix H , denoted H† , so that the training
ˆ = H† Y.
problem reduces to computing β
Support Vector Machines Support Vector Machines (SVM) [8, 27] look for the set of
support vectors that allow to build the optimal discriminating surface in the sense of providing
the greatest margin between the classes. In this way, the decision function can be expressed in
terms of the support vectors only:
f (x) = sign

αi yi K (si , x) + w0 ,

(1)

where K(xi , xj ) ≡ φ(xi )T φ(xj ) is a kernel function, αi is a weight constant derived from the
SVM process and the si are the support vectors [27]. For training, the SVM approach solves
the dual optimization problem is
1
min αT Qα − eT α,
α 2

(2)

subject to yT α = 0, 0 ≤ αi ≤ C, i = 1, . . . , l, where e is the vector of all ones, C > 0 is
the upper bound on the error, Q is an l × l positive semi-deﬁnite matrix, Qij ≡ yi yj K(xi , xj ).
Model selection in SVM involves the selection of the appropriate kernel function as well as
tuning of its parameters, which not trivial task. In this work we have used the default setting
of Scikit, which is the Radial Basis Function (RBF) with γ = 1/N , where N is the number of
samples.
k-Nearest Neighbors k-Nearest Neighbors (k-NN) is the simplest formulation of the supervised training, where the training samples are used as class prototypes. The class assigned to the
test input pattern is the result of majority voting on the K closest training patterns according
to some deﬁned distance in pattern space, which most often is the Euclidean distance.
1673

AHERF

Ayerdi, Gra˜
na

Adaboost Adaptive Boosting (AdaBoost)[25, 10] is a meta-algorithm for machine learning
that can be used in conjunction with many other learning algorithms to improve their performance. AdaBoost trains a weak classiﬁer in a series of rounds t = 1, ..., T . For each iteration
the distribution of sample weights Wt is updated, indicating the importance of examples in the
data set for the classiﬁcation. On each round, the weights of each incorrectly classiﬁed example
are increased (or alternatively, the weights of each correctly classiﬁed example are decreased),
so that the new classiﬁer focuses more on those examples. The base classiﬁer we have used is
DT, applying the default SciKit setting is 50 classiﬁers.
Gaussian Naive Bayes Naive Bayes methods follow from the “naive” assumption that the
components of the pattern vectors are statistically independent, so that the posterior probability
n
of the class can be approximated as P (y |x1 , . . . , xn ) ∝ P (y) i=1 P (xi |y ), where P (xi |y ) is
the likelihood of the i-th feature, and P (y) the a priori probability of the class. The Gaussian
Naive Bayes assumes that the likelihood follows a Gaussian distribution, where the mean and
standard deviation of each feature is estimated from the sample.

3

Randomized Data Rotation

In this section we present the general procedure for randomized data rotation applied in order
to increase diversiﬁcation of the ensemble components. Let us consider n-dimensional random
input vectors x = [x1 , . . . , xn ]T ∈ Rn , and organize the whole set of N data samples into a
matrix of size n × N :
⎛

x11
⎜ ..
X=⎝ .
x1n

···
..
.
...

⎞
xN
1
.. ⎟
. ⎠
xN
n

where matrix columns are samples of x. Each matrix entry, xji is the value of the i-th dimension
of the j-th vector sample. Let us name Fi the i-th dimension feature variable. Therefore, the
vector of sample values for Fi is given by the i-th row of X, i.e. Xi = [x1i , x2i , . . . , xN
i ]. To
construct the training/testing datasets for a speciﬁc classiﬁer Di in an ensemble, we carry out
the following steps:
1. Partition the set of feature variables F into K subsets of variables.
2. For each subset of feature variables, Fk , k = 1, . . . , K
(a) extract the corresponding data Xk from the training data set
(b) compute the partial randomized rotation matrix Rk using Principal Component
Analysis (PCA) from Xk
3. Compose the global rotation matrix R = [R1 , . . . , RK ], reordering columns according to
the original data,
4. Transform the train and test data applying the same rotation matrix.
1674

AHERF

4

Ayerdi, Gra˜
na

Adaptive Hybrid Extreme Rotation Forest

Let x = [x1 , . . . , xn ]T be a sample described by n feature variables, F is the feature variable
set and X is the data set containing N training samples in a matrix of size n × N . Let Y
be a vector containing the class labels of the data samples, Y = [y1 , . . . , yN ]T . The number of
classes is denoted Ω. Denote by D1 , . . . , DL the classiﬁers in the ensemble, that can be trained
in parallel, as in the Bagging and Random Forests.
The Anticipative Hybrid Extreme Rotation Forest (AHERF) algorithm training and testing
phases are summarized in Algorithm 1. We specify the training and test phases of each crossvalidation fold. For training, ﬁrst, a model selection phase is performed, where 30% of the
training data is used. For each classiﬁer type described in the previous section, a 5-fold crossvalidation is performed on the selected data (line M3). The resulting average accuracies are
ranked, so that rk is the ranking value of the k-th classiﬁer type (line M4). Then (line M5),
k)
,
each classiﬁer is assigned a selection probability according to the expression pk = F ib((C+1)−r
C
F ib(i)
i=1

where F ib (i) is the i-th value of the Fibonacci series.

5

Rationale for AHERF

The work on the design of heterogenous ensembles of classiﬁers is motivated by the well known
no-free lunch theorems [28], which state that no single approach is optimal either for the solution
of diﬃcult optimization problems, as well as for machine learning solution of classiﬁcation
and regression problems. Therefore, we would like to predict which kind of classiﬁer building
approach is optimal for the problem domain at hand. If we have no hint, we may try building a
heterogeneous ensemble so that we may have some chance of applying the best approach from
the pool of available approaches.
The idea in AHERF is to build an ensemble where the best ﬁtted classiﬁer types are more
frequent. Suppose we have a problem domain characterized by a ground truth classiﬁcation
mapping C : X → Ω, that gives the true class ω ∈ Ω corresponding to each input feature
vector x ∈ X . Any classiﬁer t C that we may built from a collection of input/output patterns
N
X = {(xi , ωi )}i=1 , where t ∈ T denotes the classiﬁer type from a collection of methods T , i.e.
the classiﬁcation building type, provides us with its best estimation of the true class ω
ˆ =t C (x).
We can safely say that this estimation is given somehow as a maximum a posteriori estimation,
i.e.
ω
ˆ = maxtˆP (ω |x ) ,
ω

where t denotes the classiﬁer architecture, and

tˆ
P

(ω |x )
t

ω∈Ω

denotes the data driven esti-

mation of the a posteriori probabilities by classiﬁer C. The accuracy of a classiﬁer can be
computed as the expectation of the distance between the a posteriori distribution and the
ground truth classiﬁcation:
t

A = EX

tˆ
P

(ω |x ) − C (ω, x)

,
ω

where EX [.] denotes the expectation over the input space, i.e. over all possible sampling
processes providing the training dataset X, and C (ω, x) is 1 for the true class, and 0 for the
others. The cross-validation experiments are a minimum variance way to provide estimates of
the accuracy.
1675

AHERF

Ayerdi, Gra˜
na

Algorithm 1 Anticipative tuning of Hybrid Extreme Rotation Forest (AHERF)
Training Phase
Given
X : z-scores of input dataset (n × N matrix).
Y : the labels of the dataset (1 × N matrix)
L : the number of classiﬁers in the ensemble
K : the number of feature subsets
Begin
Anticipative Model selection
M1
Select 30% of the dataset for model selection
M2 For each classiﬁer type k = 1, . . . , M
M3
Perform 5-fold cross-validation, obtain accuracy Ak
M4 Rank Ak , assigning rk to the k-th classiﬁer
F ib((C+1)−rk )
, k = 1, . . . , M
M5 Assign selection probability pk =
C
F ib(i)
i=1

On the 70% unused data, perform 10-fold cv, at each fold:
Ensemble construction on each training fold
For each individual classiﬁer Di , i = 1 . . . L
Computation of rotation matrix Riα :
Partition F into K random subsets: Fi,j ; j = 1 . . . K
For each Fij , j = 1 . . . K
- Let Xi,j be the subset of X corresponding to features in Fi,j .
7
- Ci,j obtained from PCA on Xi,j
8
Compose Riα using matrices Ci,j .
9
Decide the model of Di sampling {pk ; k = 1, . . . , M }
10
Train classiﬁer Di on training set (Riα X, Y ) or (X, Y )
End ensemble construction
2
3
4
5
6

Test on each testing fold
Let Ω be number of classes
C1
For each unknown xtest z-scores.
C2
di = Di (Riα xtest ); i = 1, . . . , L
L
C3
cω = i=1 δdi ,ω ; i = 1, . . . , L
test
C4
c
= arg max{cω , ω = 1, . . . , Ω}
ω

M

If we have an ensemble of classiﬁers {t Ck }k=1 , then we will have as many a posteriori
distribution estimations
M
tP
ˆk (ω |x )
ω

k=1

as classiﬁers. If the ensemble decision is by majority voting, such as in AHERF, then the
ensemble class estimation is given by
ω
ˆ = arg max |{k |ω = ωˆk }| ,
ω

where ω
ˆ k = maxtˆP k (ω |x ). In a broad sense, we can say that the accuracy of the ensemble can
ω

1676

AHERF

Ayerdi, Gra˜
na

be modeled by
tˆ
P

AM ∝ EX

k

(ω |x ) − C (ω, x)

k

ω

in the sense that the increase in closeness of the a posteriori distributions of the ensemble
constituents to the ground truth will always reﬂect in an increase in accuracy. It is immediate
that
M

AM ∝

t

Ak .

k=1

Let us assume that there is some accuracy ranking of the classiﬁer types, so that t1 A >
A > t3 A > .... Let us denote by nt the number of ensemble constituents of type t, so that
an ensemble is characterized by the vector n = [nt |t ∈ T ∗ ], where T ∗ denotes the identiﬁers of
the classiﬁers types ordered by accuracy ranking. Then it is immediate that for two ensembles
such that n > n according the lexicographic ordering, i.e. the classiﬁer with the best ranking
is more frequent, then the ﬁrst ensemble will very likely have accuracy greater than the second.
The strategy of AHERF is to estimate via cross-validation on a small dataset the classiﬁer type
ranking t1 A > t2 A > t3 A > ..., using this information to drive the selection of the classiﬁer
type of each individual constituent. In order to have ensembles whose characteristic vector n is
of the form nt1 >> nt2 >> nt3 > ... we sample an integer random variable whose distribution
of probability is an approximation of the exponential distribution built using the Fibbonacci
series on the ranking. The anticipatory character of AHERF comes from this prediction of
the appropriate distribution of classiﬁer types before building and training the ensemble. This
stochastic sampling of the classiﬁer type (with replacement) allows for some ﬂexibility (i.e. when
the diﬀerence in performance is not so great we would like to have some less sharp diﬀerence
in number of classiﬁers, and viceversa) and avoids the need to set speciﬁc settings of the
t2

6

Experimental design

Validation Methodology All of the reported experimental results are computed as the
average of 50 repetitions of a 10-fold cross-validation approach, where all feature extraction and
classiﬁcation parameters are estimated from the training datasets and applied to the testing
datasets as such.
z-score data normalization We perform a data normalization by the independent computation of the z-score of each input variable given by the expression z = x−μ
σ , where x is the input
variable, μ is the variable mean estimation, and σ the variable standard deviation estimation.
This normalization removes scale eﬀects reducing all variables to the same order of magnitude,
and linear shifts. In cross-validation approaches, the μ and σ are estimated on the training
data and used as such on the testing data, resulting in some minor inconsistencies if there is
any sampling bias.
Model parameter selection The following parameters remain to be speciﬁed or selected
for each combination of data rotation and ensemble of classiﬁers. All of them are set in the
same way for all the cases, because we want to avoid any eﬀect from them in the experimental
results.
• L: The number of individual classiﬁers,is set to L = 35 for all experiments.
1677

AHERF

Ayerdi, Gra˜
na

• Classiﬁer intrinsic parameters: The DT depth is set to 10 in all cases, except for some
defaults in SciKit. The number of hidden nodes in the ELM is set to min N3 , 1000 . The
SFLN architecture trained by ELM has a single output unit encoding the output of the
classiﬁer as an integer value, both for two-class and many-classes datasets.
• K: The number of partitions of the set of features has been set to K = n4 . As the
eﬀective partitions are random, it is very likely that some of them will be composed of
only one vector.
Materials We have performed the computational experiments over 16 datasets used for the
comparison and validation are in the public domain, they have been extracted from the UCI
machine learning repository 3 , including multi-class instances as well as two class problems.

7

Experimental Results

Table 1 shows the average and standard deviation of the accuracy obtained on the crossvalidation classiﬁcation results, comparing AHERF with other state-of-the -art classiﬁer architectures. In fact, the competing algorithms are the base architecture classiﬁers. It can be
appreciated that AHERF gives the best results in most cases (Ecoli: 88.69%; Liver: 73.67%;
Sonar: 87%; Spambase: 93.96%, etc) and it is close to the best result in the others. We found
these results encouraging. In the Iris database, the winning algorithm in terms of mean accuracy (OP-ELM: 97.80±8.93) has such a big standard deviation that a conventional t-test
asserts (p>0.1) that there is no signiﬁcant diﬀerence between AHERF and the winning algorithm. This is not the case of the Monks datasets, where the AHERF shows high variability
(Monk1: ±4.90; Monk2: ±3.58; Monk3: ±2.42), while the winning algorithms have much less
standard deviation (Monk1: ±0.81; Monk2: ±2.83; Monk3: ±0.46), we can assert that there is
a signiﬁcant diﬀerence. The reason for this behavior lies in the nature of the Monks datasets
which are discrete and categorical, diﬃcult to deal with by algorithms such as ELM or SVM.
The ability to obtain an speciﬁc tuning to the datasets at hand comes to a price, which is the
need for additional training and testing on the available data. When the datasets are of small
size, such as the ones used for the demonstration in this paper, the reduction of the actual data
used for system training is a more worrying issue than the time required to carry the additional
training. This reduction impedes other desirable procedures, such as the ﬁne tuning of the
classiﬁers’ hyperparameters, which require in some cases delicate search. The application of
AHERF to big datasets, would reduce this problem, so we may expect even better results than
those reported here.

8

Conclusions and future work

The proposal of the AHERF hybrid ensemble classiﬁer is an improvement of HERF algorithm,
including the anticipative selection of the classiﬁer type according to the prediction of the
classiﬁer types accuracy in each database. We built a selection probability distribution according
to the ranked accuracies found in a model selection cross-validation experiment. The results
obtained on a collection of benchmark databases are encouraging, improving on HERF and
other state-of-the-art classiﬁers. Further works are being addressed on the one hand to apply
AHERF in other areas like medical image processing (fMRI, CTA, etc) and remote sensing
3 http://archive.ics.uci.edu/ml/

1678

AHERF

Table 1: Average accuracy results of cross-validation experiments, with standard deviations, over a collection of benchmark databases.
Maximum accuracy per dataset is highlighted in bold. Star entries are not signiﬁcantly worse than the winner.
SVM(RBF) OP-ELM
BP
k-NN
ELM
DT
HERF
AHERF
Balance

95.88±1.31

92.31±1.83

90.92±2.14

87.00±1.80

69.8±2.73

76.01±2.81

90.99±1.61

90.57±1.45

Breast-can

95.55±0.82

95.33±1.29

95.01±1.66

96.32±1.03

97.78±1.22

96.36±0.49

97.40±0.89*

97.51±1.15*

Diabetes

77.31±2.73*

77.34±3.17*

77.23±2.81*

74.09±2.73

55.91±1.31

71.57±4.8

77.64±1.97*

78.13±3.88

Ecoli

85.83±2.79

85.20±2.88

80.27±3.91

83.68±2.22

35.9±10.48

73.85±3.85

88.07±2.45*

88.69±6.02

Iris

94.36±2.76*

97.80±8.93

95.60±3.00*

96.04±2.23*

86.67±4.80

96.67±2.80*

96.64±2.00*

96.00±4.42*

Liver

68.24±4.58

65.85±4.75

66.50±4.45

61.46±3.27

62.12±4.98

66.37±3.59

72.75±3.88*

73.67±6.19

Sonar

83.48±3.88

71.70±4.79

70.31±5.40

66.30±4.93

86.47±3.35*

74.71±4.08

80.08±4.24

87.00±6.82

Soybean

99.56±1.32*

99.12±1.51*

88.17±9.38

79.74±11.47

100.00±0.00

100.00±0.00

100.00±0.00

100.00±0.00

Spambase

93.50±0.45*

91.23±0.78

92.06±0.78

88.61±0.53

70.31±0.93

91.47±1.21

92.57±0.60

93.96±0.79

Waveform

85.78±0.62*

85.46±0.64

85.94±0.76

82.65±0.72

57.56±1.94

74.34±0.75

85.77±0.67

87.12±1.42

Wine

97.48±1.57

98.18±1.72

94.10±3.12

96.23±2.01

65.52±15.99

94.83±2.11

98.30±1.60

99.41±1.76

Digit

98.14±0.01

98.34±0.25

-

97.54±0.01

98.25±0.16

100.00±0.00

99.92±0.05*

99.24±0.26*

Hayes

75.00±0.00

70.43±4.95

74.43±7.08

75.00±0.00

77.89±4.04

83.51±0.96

83.09±5.05*

80.62±9.46

Monk1

94.44±0.01

74.79±3.91

69.99±13.82

80.56±0.01

98.26±0.81

93.48±3.90

97.87±2.96*

93.70±4.90

Monk2

84.72±0.01

70.35±3.58

72.84±2.92

71.53±0.01

83.02±3.75

93.17±6.62

96.33±2.83

72.38±3.58

Monk3

90.04±0.01

88.77±2.31

80.41±6.07

80.79±0.01

95.71±2.94

99.34±0.46

98.82±0.79

97.49±2.42

Ayerdi, Gra˜
na

1679

AHERF

Ayerdi, Gra˜
na

image processing problems, and on the other hand to improve the combination of the outputs
of the ensemble.
Acknowledgments
The Basque Government grant IT874-13 for the research group.

References
[1] B Ayerdi, J Maiora, A d’Anjou, and M Graña. Applications of hybrid extreme rotation forests for image segmentation. International Journal of Hybrid Intelligent Systems,
11(1):13–24, 2014.
[2] Borja Ayerdi and Manuel Graña. Hybrid extreme rotation forest. Neural Networks, 52:33–
42, 2014.
[3] Borja Ayerdi and Manuel Graña. Hyperspectral image nonlinear unmixing and reconstruction by elm regression ensembles. Neurocomputing, in press, 2015.
[4] Borja Ayerdi, Ion Marques, and Manuel Graña. Spatially regularized semisupervised ensembles of extreme learning machines for hyperspectral image segmentation. Neurocomputing, 149, Part A:373–386, 2015.
[5] L. Breiman. Bagging predictors. Machine learning, 24(2):123–140, 1996.
[6] L. Breiman. Random forests. Machine learning, 45(1):5–32, 2001.
[7] L. Breiman, J. Friedman, R. Olshen, and C. Stone. Classiﬁcation and Regression Trees.
Wadsworth and Brooks, Monterey, CA, 1984.
[8] Christopher Burges. A tutorial on support vector machines for pattern recognition. Data
Mining and Knowledge Discovery, 2(2):167–121, 1998.
[9] Jiuwen Cao, Zhiping Lin, Guang-Bin Huang, and Nan Liu. Voting based extreme learning
machine. Information Sciences, 185(1):66 – 77, 2012.
[10] Y. Freund and R. Schapire. A decision-theoretic generalization of on-line learning and
an application to boosting. In European Conference on Computational Learning Theory,
pages 37, 23, 1995.
[11] Nicolás García-Pedrajas and César García-Osorio. Constructing ensembles of classiﬁers
using supervised projection methods based on misclassiﬁed instances. Expert Systems with
Applications, 38(1):343 – 359, 2011.
[12] G.-B. Huang, L. Chen, and C.-K. Siew. Universal approximation using incremental constructive feedforward networks with random hidden nodes. IEEE Trans. Neural Networks,
17(4):879–892, 2006.
[13] G. B. Huang, D. H. Wang, and Y. Lan. Extreme learning machines: a survey. International
Journal of Machine Learning and Cybernetics, 2:107–122, 2011.
[14] Gao Huang, Guang-Bin Huang, Shiji Song, and Keyou You. Trends in extreme learning
machines: A review. Neural Networks, 61:32 – 48, 2015.
1680

AHERF

Ayerdi, Gra˜
na

[15] Guang-Bin Huang, Zuo Bai, L.L.C. Kasun, and Chi Man Vong. Local receptive ﬁelds based
extreme learning machine. Computational Intelligence Magazine, IEEE, 10(2):18–29, May
2015.
[16] Guang-Bin Huang, Hongming Zhou, Xiaojian Ding, and Rui Zhang. Extreme learning machine for regression and multiclass classiﬁcation. IEEE TRANSACTIONS ON SYSTEMS,
MAN, AND CYBERNETICS—PART B: CYBERNETICS,, 42(2):513–529, 2012.
[17] Guang-Bin Huang, Qin-Yu Zhu, and Chee-Kheong Siew. Extreme learning machine: Theory and applications. Neurocomputing, 70(1–3):489 – 501, 2006.
[18] Konrad Jackowski, Bartosz Krawczyk, and Michal Wozniak. Improved adaptive splitting
and selection: the hybrid training method of a classiﬁer based on a feature space partitioning. Int. J. Neural Syst., 24(3), 2014.
[19] Hyun-Chul Kim, Shaoning Pang, Hong-Mo Je, Daijin Kim, and Sung-Yang Bang. Constructing support vector machine ensemble. Pattern Recognition, 36:2757–2767, 2003.
[20] Bartosz Krawczyk, Michał Woźniak, and Francisco Herrera. On the usefulness of oneclass classiﬁer ensembles for decomposition of multi-class problems. Pattern Recognition,
48(12):3969 – 3982, 2015.
[21] Nikunj C. Oza and Kagan Tumer. Classiﬁer ensembles: Select real-world applications.
Information Fusion, 9(1):4 – 20, 2008.
[22] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau,
M. Brucher, M. Perrot, and E. Duchesnay. Scikit-learn: Machine learning in Python.
Journal of Machine Learning Research, 12:2825–2830, 2011.
[23] J. Ross Quinlan. C4.5: Programs for Machine Learning. Morgan Kaufmann, 1993.
[24] J.J. Rodriguez, L.I. Kuncheva, and C.J. Alonso. Rotation forest: A new classiﬁer ensemble
method. Pattern Analysis and Machine Intelligence, IEEE Transactions on, 28(10):1619
–1630, oct. 2006.
[25] R.E. Schapire and Y. Singer. Improved boosting algorithms using conﬁdence-rated predictions. Machine Learning, 37(3):297–336, December 1999.
[26] M. Termenon and M. Grana. A two stage sequential ensemble applied to the classiﬁcation
of alzheimer’s disease based on mri features. Neural Processing Letters, 35(1):1–12, 2012.
[27] V. Vapnik. Statistical learning theory. Wiley-Interscience, 1998.
[28] D.H. Wolpert and W.G. Macready. No free lunch theorems for optimization. IEEE Trans.
on Evol. Comp., 1(1):67 – 82, 1997.
[29] Michal Wozniak, Manuel Graña, and Emilio Corchado. A survey of multiple classiﬁer
system as hybrid systems. Information Fusion, 16:3–17, 2014.
[30] Michal Wozniak, Manuel Graña, and Emilio Corchado. A survey of multiple classiﬁer
systems as hybrid systems. Information Fusion, 16(0):3 – 17, 2014.

1681

