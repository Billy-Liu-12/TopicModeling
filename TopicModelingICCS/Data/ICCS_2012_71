Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 328 – 337

International Conference on Computational Science, ICCS 2012

Proximity load balancing for distributed cluster-based
individual-oriented ﬁsh school simulations.
Roberto Solar, Remo Suppi, Emilio Luque
Department of Computer Architecture & Operating Systems
Universitat Aut`onoma de Barcelona
Bellaterra, 08193, Barcelona, Spain

Abstract
Partitioning and load balancing are highly important issues in distributed individual-oriented simulation. Choosing
how to distribute individuals on the distributed environment can be a crucial factor at the moment of executing the
simulation. Partitioning an individual-oriented system should be eﬃcient in order to reduce communication involved
in interaction between individuals belong to diﬀerent logical processes. Furthermore, if the individual-oriented model
exhibits mobility patterns, we should be able to maintain the load balancing in order to keep the global application
performance. In this work, we present a proximity load balancing strategy for a distributed cluster-based individualoriented ﬁsh school simulator. On one hand, we implement a robust cluster-based partitioning method by means of
covering radius criterion and voronoi diagrams. We use a proximity criterion to distribute individuals on the distributed
architecture. On the other hand, we propose a proximity load balancing strategy in order to maintain the application
performance as the simulation progresses.
Keywords: High-performance simulation, individual-oriented models, distributed simulation, data clustering,
nearest-neighbor, load balancing.

1. Introduction
Social aggregations of autonomous individuals are a common behavior which can be observed at diﬀerent scales
and levels of complexity. This type of behavior occurs in a wide organisms range, from unicellular (bacteria, myxobacteria, amoeboid) to higher vertebrates (tunas, dolphins, whales). In this type of system, each individual autonomously
reacts to stimuli coming from other individuals and/or the environment (usually within a perception range). These
individual-level decisions are spread through the system provoking emergent phenomena. Depending on the species,
these association may be called as herds, shoals, ﬂocks, schools or swarms. Furthermore, collective behaviors can be
seen in many research areas such as: ecology and biology [1, 2, 3, 4, 5], military strategies [6], sociology [7, 8, 9],
✩ This research has been supported by the MICINN Spain under contract TIN2007-64974 and the MINECO (MICINN) Spain under contract
TIN2011-24384
Email addresses: roberto.solar@caos.uab.es (Roberto Solar), remo.suppi@uab.es (Remo Suppi), emilio.luque@uab.es (Emilio
Luque)

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.035

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

329

physics [10, 11], health care [12], vehicular traﬃc [13], ﬁre suppression strategies [14], etc.
There are two approaches in order to model population dynamics: equation-oriented or individual-oriented modeling. On one hand, in equation-oriented modeling the system is represented by a set of state variables and its evolution
consists of solving a set of diﬀerential equations (eg Lotka-Volterra equations, also known as prey-predator equations). On other hand, in individual-oriented modeling the system is represented by a set of individuals characterized
by their behaviors (interaction rules) and attributes, and an environment in which interaction occurs. Nevertheless, it
is very diﬃcult to solve an individual-oriented model analytically whereby it is necessary using simulation tools in
order to observe system variables through time.
Over the past few years, the computational requirements to execute an individual-oriented simulation within a reasonable time period have become the main disadvantages. On one hand, as we face up close-to-reality models, high
processing power in order to solve complex individuals interactions. On other hand, to handle large-scale workloads,
a huge memory space is required in order to store individuals. The combination of these disadvantages forces us to
change our traditional sequential simulation techniques towards high performance distributed simulation.
One important problem in distributed simulation is how to distribute individuals on the distributed architecture
in order to obtain the best performance of our applications (scalability, eﬃciency, minimum communication times,
etc). Individual-oriented systems can be implemented in a distributed fashion by making each node responsible for a
ﬁxed portion of the problem domain. This ﬁxed portion can be assigned using either a grid-based or a cluster based
approach. The grid-based approach consists of assigning to each node a simulation space portion together with the
set of individuals currently residing in that area. The cluster-based approach consists of assigning to each node a ﬁxed
set of individuals.
In [15] we implement a cluster-based partitioning method based on covering radius criterion and voronoi diagrams. The main beneﬁt of our method is creating small-size clusters limited by a covering radius in function of the
individual’s maximum vision range. This allows us to limit the interaction between individuals belonging to adjacent
clusters in order to reduce computing involved in neighbors selection process. Furthermore, we implement a proximity cluster grouping method in order to distribute individuals on the distributed architecture. We group clusters into p
”meta-clusters”, that is, p collections of contiguous clusters which are distributed over p computing unities.
After solving the problem of individuals distribution, we confront with the inherent mobility patterns of the ﬁsh
school model. One of the characteristics of a spatially-explicit individual-oriented model with mobility patterns is individuals can change its position in the geometrical space according to the simulation progresses. This can cause problems since individuals can migrate from a logical process to other, increasing the chances of overloading/underusing
resources, impacting the global application performance.
In this work we present a dynamic load balancing strategy for a cluster-based distributed individual-oriented ﬁsh
schools simulator. Our load balancing strategy is based on re-conﬁgurating and re-distributing the local workload.
The Re-conﬁguration process consists of re-grouping clusters into meta-clusters with size close to the mean. There
is no explicit re-distribution process because migration process is responsible for sending non-local data where it
belongs.
1.1. Related work
In this section we focus at previous works about partitioning approaches in distributed individual-oriented simulation. Furthermore, we describe the load balancing strategies applied to each problem. Partitioning methods can be
classiﬁed into two approaches: grid-based and cluster-based. Next, we will take a look at the most important works
in this area.
Grid-based methods
In [10] is proposed two partitioning methods based on Voronoi cells (body-centered-cubic and face-centered-cubic
lattices), used in simulations of the sillium model for amorphous silicon. In [16] a micro-cells based method is used.
In this method, the problem domain is decomposed to small cubes, called micro-cells, and they are grouped into subdomains (groups of adjacent micro-cells), and each sub-domain is assigned to a distinct processing element. The load
balancing method mainly relies on adjusting the adjacent grid cells according to the diﬀerence of their workloads.
In [5] a column wise block-striped decomposition to partition the simulated space in bird ﬂocking simulation is
presented. Load balancing by means of re-partitioning and re-distributing the simulated space is performed. In [4, 3]

330

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

is used a grid-based approach, named strip decomposition. The simulation space is divided evenly into n strips, each
strip is assigned to a processing node together with the individuals residing currently in that area. Every processing
node executes the simulation with local data, making data exchange using two types of messages: neighbors exchange
[17] and migration. In this work a simulation study of large-scale of ﬁsh schools is carried out. There are no load
balancing strategies implemented.
Cluster-based methods
In [11] a new approach for parallel domain decomposition of vortex particles based on k-means clustering of
the particle coordinates is proposed. The paper investigates hierarchical evaluation of vortical velocities in a vortex
simulation of a transverse jet at high Reynolds number. They also introduce compatible techniques for dynamic load
balancing, including adaptive scaling of cluster volumes and adaptive redistribution of cluster centroids. In [8] is
presented a method of partitioning individuals on the distributed architecture using an adapted k-means clustering
algorithm. The paper shows the application of cluster partitioning algorithms for large-scale agent-based crowd simulation. There are no load balancing strategies implemented. In [7] is proposed a partitioning method based on convex
hulls to simulate large crowds of autonomous agents. This approach consists of handling partitions as the convex
hull of the points that represent the individuals positions in a particular area. Load balancing consists of each node
computes the distance of their agents to the neighbor hulls and sorts by distance in a list. The underused nodes ask an
overloaded neighbor node to migrate some agents (ﬁrst agents in the sorted list). The reassignment process will ﬁnish
when the underused node reaches the average value of agents stored by nodes.
2. Individual-oriented models
Individual-oriented modeling is a computational paradigm used to study complex social phenomena which emerge
from decentralized decision-making. This approach helps us to understand how from individual-level interaction can
appear system-level properties. These individuals might represent: ﬁsh in schools [1, 4, 3], people in crowds [7, 8],
birds in ﬂocks [2], etc. Using this modeling paradigm, the system is decomposed into two low-level components: A
set of autonomous entities called ”individuals” - each individual is deﬁned in terms of its attributes and acts on the
basis of a set of behavioral rules, and, an environment or framework - logical location where individuals reside and
interact.
Some individual-oriented models are also spatially-explicit which means individuals are associated with a location
in geometrical space. Furthermore, some spatially-explicit individual-oriented models can exhibit motion patterns
which means individuals can change their position in geometrical space as the simulation progresses.
Individual-oriented models also allow us: to include diﬀerent types of individuals within the same model, to deﬁne
individuals with two levels of heterogeneity (behavioral rules and attributes values), to model interactions between
individuals and its environment, and to represent learning mechanisms.
2.1. Fish school model
Fish schools are one of the most frequent social groups in the animal world [18]. This type of social aggregation
shows complex emergent properties such as: high level of synchronization, strong group cohesion, leaderless group
navigation and non-hierarchical structure.
The biological model [18, 1] used in this work describes the change of position and orientation of a single individual depending on the position and orientation of a ﬁxed number of neighbors. In order to select appropriately the
neighbor’s inﬂuence, we identify four vision areas: attraction, repulsion, parallel orientation and non visible (Figure
1).

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

331

Figure 1: Neighbor inﬂuences areas.

Depending on the neighbor’s spatial-temporal position the individual chooses between four behavior patterns:
Repulsion: In order to avoid collision between ﬁsh of the same group. Consists of rotating the ﬁsh’s orientation a
minimum-angle so the ﬁsh and its neighbor are perpendicular (Figure 2(c)).
Parallel orientation: In order to keep the group synchronization. Consists of matching the ﬁsh’s orientation with
its neighbor. (Figure 2(b)).
Attraction: In order to keep the group cohesiveness. Consists of steering the ﬁsh’s orientation towards its neighbor’s
position (Figure 2(a)).
Searching: If there are no neighbors within the ﬁsh vision range, the ﬁsh starts to swim in random directions.

(a) Attraction.

(b) Parallel orientation.

(c) Repulsion.

Figure 2: Fish school behavioral rules.

3. Partitioning method
Individual-oriented systems can be partitioned using two methods: cluster-based or grid-based. Cluster-based
methods focus on grouping individuals by means of some criterion (proximity, similarity, familiarity, etc). Grid-based
methods focus on partitioning the space into geometrical subdivisions. In this work, we implement a cluster-based
partitioning method based on voronoi diagrams and covering radius criterion.
Voronoi diagram is one of the most fundamental data structures in computational geometry. Given some number
of objects in the space, their Voronoi diagram divides the space according to the nearest-neighbor rule: each object is
associated with the area closest to it [19]. In covering radius criterion, we try to bound the area [ci ] by considering a
sphere centered at ci that contains all the objects of the problem domain lying in the area [20].
A metric space is a particular type of vectorial space where a distance between objects is deﬁned. Given a set of
objects X subset of the universe of valid objects U and a distance function d : X2 → R, so ∀x, y, z ∈ X, must be met
the following conditions:
Positiveness:
Symmetry:

d(x, y) > 0, d(x, x) = 0
d(x, y) = d(y, x)

Triangular inequality: d(x, y) + d(y, z) ≥ d(x, z)

(1)
(2)
(3)

332

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

Since individuals are associated with a position in three-dimensional euclidean space, we assume that these individuals together with the euclidean distance (which determines the visibility of individuals or objects in environment),
generating a metric space. This allows us to introduce concepts of similarity or proximity within the distributed simulation.
The proposed partitioning method consists of two stages: First, the centroids selection by means of covering radius criterion, which ensures that a set of centroids far away enough from others. Second, the space decomposition by
means of voronoi diagrams, which allows us to deﬁne similar size areas with similar number of individuals (as long
as individuals are uniformly distributed in space). Both criteria are applied to construct the data structure described in
the next section.
3.1. Data structure
The metric data structure used to store individuals is called ﬁxed-radius list of clusters [20]. Speciﬁcally, we use
an hybrid voronoi diagram/covering radius criterion to build a ﬁxed-radius list of clusters [21]. The radius is ﬁxed in
function of the maximum ﬁsh vision area. This allows us to deﬁne areas in which individuals can interact only with
other individuals belonging to adjacent areas, reducing computing involved in the neighbors selection process.
The structure is formed by a linked list of clusters. Each cluster consists of several data such as: a centroid which is the most representative element of the cluster, the covering radius - distance from the centroid to the farthest
individual in the cluster, the processor identiﬁer (PID) - indicates in which node each cluster is stored, a bucket - in
which individuals belonging to the cluster are stored, the cluster identiﬁer (CID) - indicates the cluster position in the
list, and a distance chart which stores the distance to other clusters (Fig. 3).

Figure 3: List of clusters.

Figure 4: Covering radius/Voronoi diagram partitioning.

3.2. Construction
The construction of our list of clusters consists of iterative insertion of individuals within the data structure. First,
if the list is empty, the ﬁrst individual is selected as a centroid. Next, for each individual, the distance to each centroid,
in order to ﬁnd the minimum distance, is calculated. If the minimum distance is greater than Rmax (Fixed radius,
Rmax = f actor × R MAX , f actor ≥ 0.5), the individual is selected as a centroid, otherwise, the individual is inserted
in the closest cluster. The construction algorithm complexity is O (nk), where n is the number of individuals and
k the number of clusters (k < n).In Figure 4 a two-dimensional example of our cluster-based partitioning method
is shown. One of the main improvements of our proposal is to reduce the execution time of sequential algorithm.
Sequential algorithm performs exhaustive computing (n × n) in order to ﬁnd the most inﬂuential neighbors. In our
case, individuals only perform computing on their nearest-neighbors individuals belonging to adjacent clusters, which
reduces computing involved in obtaining the spatial-temporal position of their neighbors.
4. Distributed time-driven simulation
An important issue in discrete simulation is the mechanism in which the state variables changes as simulation time
advances. There are two types of time-advance approaches: time-driven and event-driven. In time-driven approach,

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

333

the simulation time is subdivided into a sequence of equal-sized steps, and the simulation advances from one time
step to the next [22]. In event-driven mechanism, the simulation time is computed when an event is processed, adding
the event timestamped to the execution time. Furthermore, it is necessary to consider the time management protocol
because this will ensure that the execution of the distributed simulation is properly synchronized. Time management
algorithms can be classiﬁed as conservative or optimistic [22]. In conservative algorithms, the process is blocked
until all execution conditions are satisﬁed. In optimistic algorithms, the process will continue even if some execution
condition is not fulﬁlled, but this algorithm includes mechanisms in order to recover from causality issues.
We implement a time-driven time-advance mechanism because the individual-oriented model used in this work
describes the motion of a ﬁsh school in discrete time steps, i.e. each ﬁsh moves at the same time. Furthermore, we
implement a conservative time-management protocol because each logical process requires exchanging information
from adjacent logical processes before starting the next simulation step.
4.1. Distribution model
The distribution model used in this work is based on proximity concept. We distribute the list header together with
a ﬁxed set of diﬀerent clusters to each node. This ﬁxed set of clusters is determined from the maximum number of
#individuals
individuals that each node can have ( #processors
), and how close are to each other. The main issue of our distribution
model is to assign contiguous groups of clusters to each node in order to decrease communication and computing
involved to select data to transfer. In other words, we group clusters by proximity into sets of clusters that we have
called meta-cluster.
4.2. Simulation
Each node independently executes the simulation with local data making data exchange through three type of messages: neighbors exchange, centroids broadcasting and migration. The distributed simulation algorithm is described
bellow:
Neighbors exchange: Consists of intersecting local clusters with non-local clusters in order to ﬁnd adjacency. In
other words, we determine if the farthest individuals of two clusters can see each other. Let [ci ] and [c j ] be two
clusters centered at ci and c j with covering radius ri and r j ; d(ci , c j ) is the distance between ci and c j ; R MAX is
the individual’s maximum vision range.
d(ci , c j ) − (ri + r j ) ≤ R MAX

(4)

Equation (4) determines if the local cluster ci and the non-local cluster c j are intersected. If there is intersection,
we store [ci ] in a list l pid ([c j ] ∈ P pid ). There are p number of l pid lists, where p is the number of processors and
pid is the processor id. Next, we send each l pid list to corresponding processor P pid and receive the lists from
other processors. The received data within the local list of clusters are temporarily stored.
Update centroids: Consists of updating positions and orientations of local clusters centroids. Each processor broadcasts the updated local clusters centroids to others (centroids broadcasting). At this point we have two lists of
clusters: the updated and original list of clusters.
Update buckets: Consists of updating positions and orientations of individuals belonging to local clusters buckets.
First, we need to determine the cluster neighborhood by means of Equation (4). Once individual’s position and
orientation is updated, the individual within the updated list header is reinserted. The reinsertion criterion is
based on the voronoi diagram. If the individual is left out of the list header, a new clusters is created.
Load balancing: This process will be described in subsection 4.3.
Migration: Consists of sending non-local data where it belongs. The reinsertion process can be made within any
cluster of the list, even if the cluster is not local (since each processor stores the entire list header). But, each
cluster have a processor identiﬁer, indicating where the data belongs. After the simulation step ﬁnishes, we
need to restore the consistency of the list of clusters. For each cluster [ci ], if the cluster’s pid is not equal to
local pid, we store the cluster [ci ] in a list l pid . Finally, we send each list to corresponding processor P pid and
receive the lists from other processors.

334

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

Radius broadcasting: Additionally, each processor broadcasts all local clusters’ covering radius to others.
4.3. Load balancing strategy
Simulations of individual-oriented spatially-explicit models with mobility patterns can cause several problems
when we execute it on a distributed environment. These problems mainly appear when individuals migrate from
a logical process to other causing overload or underused of resources. This load imbalance can provoke a global
application performance degradation.
In this work we propose a load balancing strategy based on proximity criteria. Our load balancing strategy consists
of re-conﬁgurating and re-distributing the data structure. This process is similar to the distribution algorithm in which
we group clusters by proximity into sets of clusters that we have called meta-cluster. The load balancing strategy is
described below:
Detect imbalance: We have to know what is the real number of individuals per cluster (what we do not know
before migration), in order to detect when imbalance occurs. Once we know the real number of individuals per
cluster, we can detect underused or overloaded resources. We deﬁne diﬀerent imbalance thresholds in order to
determine experimentally which is the best option. The results are shown in section 5.
Re-conﬁguration: Each logical process executes this process independently with local data. This process consists
#individual
. We regroup clusters into meta-clusters by
of adjusting the logical process workload to the mean #processors
means of changing the cluster’s PID. There are no message passing in this process.
Re-distribution: This process is done by using migration. We do not need extra message passing because the
migration process is responsible for sending non-local data to its owner.
5. Experimental results
The simulator was developed using C++ (gcc 4.3.2), STL (c++ Standard Template Library) and MPI namespace
(Open MPI 1.4.1). The simulation experiments were carried out using 1, 2, 4, 8, 16, 32 and 64 processors. We executed
simulations with 4096 and 8192 individuals per processor. Furthermore, we used two imbalance thresholds: 12.5%
and 25.0% of local workload, in order to detect underused or overloaded resources. Experimental results were obtained
from the average of 1000 simulation steps. Typical ﬁsh parameters used in our experiments are shown in Table 1. The
execution environment used for running our simulations is a Cluster IBM with the following characteristics: 32 IBM
x3550 Nodes, 2 x Dual-Core Intel(R) Xeon(R) CPU 5160 @ 3.00GHz 4MB L2 (2x2), 12 GB Fully Buﬀered DIMM
667 MHz, Hot-swap SAS Controller 160GB SATA Disk and Integrated dual Gigabit Ethernet.
Rattraction
R porientation
Rrepulsion
ω
neighbors
speed

10.0BL
5.0BL
1.0BL
π
3

10
Γ distribution

R MAX , maximum vision range

dead angle
front prioritized
K = 4, A = 3.3

Table 1: Typical ﬁsh parameters.

Fig 5 shows the speedup we gained using our distributed cluster-based simulation. On one hand, we have executed
the simulation using 262144 individuals and adjusting Rmin = 1.10 ∗ R MAX and Rmin = 1.20 ∗ R MAX . On other hand,
we have executed the simulation using 524288 individuals and adjusting Rmin = 1.30 ∗ R MAX and Rmin = 1.40 ∗ R MAX .
In both cases, we see a good speedup behavior, close to linear speedup.

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

335

Distributed Cluster-based Simulation Speedup
average of 100 simulation steps
64

linear speedup
speedup for 262.144 individuals
speedup for 524.288 individuals

Speedup

32
16
8
4
2
1
1

2

4

8

16

32

64

Number of Processors

Figure 5: Distributed Cluster-based Simulation Speedup.

Fig 6 shows that when we increase the number of processors, the simulation execution time also increases. This
occurs because when we increase the number of individuals, implies more interactions between individuals. Furthermore, we can see an increase in communication time because when we have more processors, we have to send data
to all adjacent nodes. Despite this, we can observe good performance considering we increase proportionally the
workload to the number of processors.
Simulation Execution Times
Workload = 4.096 Individuals per Processor
Rmin=1.10*RMAX, Rmax=1.20*RMAX
4

computing time
communication time

Execution Time (seconds)

Execution Time (seconds)

4.5

Simulation Execution Times
Workload = 8.192 Individuals per Processor
Rmin=1.30*RMAX, Rmax=1.40*RMAX

3.5
3
2.5
2
1.5
1

10

computing time
communication time

8
6
4
2

0.5
0

1 2 4 8 16 32 64
12.5% Imbalance Threshold

1 2 4 8 16 32 64
25.0% Imbalance Threshold

0

1 2 4 8 16 32 64
12.5% Imbalance Threshold

Number of Processors

(a) 4096 Individuals per Processor.

1 2 4 8 16 32 64
25.0% Imbalance Threshold

Number of Processors

(b) 8192 Individuals per Processor.

Figure 6: Simulation Execution Times.

In table 2, communication and computation times for the simulation of 262144 and 524288 individuals using 64
processors are shown. We see increase of communication and computation time proportionally to the workload size.
Furthermore, comparing the two cases, we see increase of communication time. This happens because we amplify the
covering radius factors when we increase the workload size. We have to amplify the covering radius factors because
if we linearly increase the list length, the algorithm will degrade its performance.
Workload (individuals)
Imbalance Threshold
Communication Time (seconds)
Computing Time (seconds)

262144
12.5%
25.0%
0.876568 0.890488
2.781602 3.253902

524288
12.5%
25.0%
1.61412 1.36612
7.59401 6.94258

Table 2: Summary of Communication/Computing Times with 64 Processors.

Fig 7 and 8 show an irregular behavior at the beginning of simulations. This happens because the simulation needs
to iterate synthetic input ﬁsh to achieve a ﬁsh schooling normal behavior.
Fig. 7 shows the workload of 64 processors during 1000 simulation steps. On one hand, ﬁg 7(a) show how the

336

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

load balancing strategy adjusts the workload when there is 12.5% of local imbalance, i.e. when the local number
of individuals is out of [3584, 4608]. On the one hand, ﬁg. 7(b) show the adjustment when there is 25.0% of local
imbalance, i.e. when the local number of individuals is out of [3072, 5120]. In Fig. 7(a) and 7(b) we clearly see
the workloads are within established ranges are maintained. But, ﬁg 6(a) shows that we obtained better results using
12.5% of imbalance threshold.
64 Processors Workload
Imbalance Threshold = 25.0%
Workload = 262144 Individuals

8000

8000

7000

7000
Number of Individuals

Number of Individuals

64 Processors Workload
Imbalance Threshold = 12.5%
Workload = 262144 Individuals

6000
5000
4000
3000
2000

6000
5000
4000
3000
2000

1000

1000
0

200

400
600
Simulation Step

800

1000

0

(a) 262144 individuals, 12.5% of local imbalance.

200

400
600
Simulation Step

800

1000

(b) 262144 individuals, 25.0% of local imbalance.

Figure 7: 64 Processors Workload over 1.000 Simulation Steps.

Fig. 8 shows the workload of 64 processors during 1000 simulation steps. On one hand, ﬁg 8(a) show how the
load balancing strategy adjusts the workload when there is 12.5% of local imbalance, i.e. when the local number
of individuals is out of [7168, 9216]. On the one hand, ﬁg 8(b) show the adjustment when there is 25.0% of local
imbalance, i.e. when the local number of individuals is out of [6144, 10240]. In Fig 8(a) and 8(b) we see a similar
behavior to the previous case. But, unlike the previous case, Fig 6(b) shows that we obtained better results using
25.0% of imbalance threshold.
64 Processors Workload
Imbalance Threshold = 25.0%
Workload = 524288 Individuals

13000

13000

12000

12000

11000

11000

Number of Individuals

Number of Individuals

64 Processors Workload
Imbalance Threshold = 12.5%
Workload = 524288 Individuals

10000
9000
8000
7000
6000
5000

10000
9000
8000
7000
6000
5000

4000

4000
0

200

400
600
Simulation Step

800

1000

(a) 524288 individuals, 12.5% of local imbalance.

0

200

400
600
Simulation Step

800

1000

(b) 524288 individuals, 25.0% of local imbalance.

Figure 8: 64 Processors Workload over 1.000 Simulation Steps.

6. Conclusions and Future Work
In this work we have presented our proximity load balancing method for distributed cluster-based individualoriented ﬁsh school simulations. We have executed experiments using large-scale workload (4096 and 8192 individuals per processor). We have increased the number of individuals proportionally to the number of processors in order
to show how our load balancing method works in diﬀerent scenarios. On one hand, we have a robust partitioning
method based on data clustering algorithms which have shown good performance [15]. On the other hand, we have

Roberto Solar et al. / Procedia Computer Science 9 (2012) 328 – 337

337

implemented a proximity load balancing strategy which adjust the workload according to the simulation advances.
The main contributions of our work are:
• We have proved that employing a robust partitioning method, we can obtain either a sequential or distributed
execution time reduction.
• Fig 7 and 8 have shown the feasibility of our proximity load balancing strategy. We can see the workload
between reasonable thresholds is maintained.
• Fig 6(a) have shown, using 64 processors and 12.5% of imbalance threshold, we obtained better results. Fig
6(b) have shown, using 64 processors and 25.0% of imbalance threshold, we obtained better results. That is, as
we increase the workload size, we have to be more permissive with the simulation.
6.1. Future work
The main objectives for future work are:
• Testing k-means algorithm in order to ﬁnd the best centroids and achieve better workload balancing.
• Testing our strategy using other individual-oriented models such as: swarm, ﬂock, crowd, etc.
References
1. A. Huth, C. Wissel, The simulation of ﬁsh schools in comparison with experimental data, Ecological Modelling 75-76 (1994) 135 – 146,
state-of-the-Art in Ecological Modelling proceedings of ISEM’s 8th International Conference.
2. C. W. Reynolds, Flocks, herds and schools: A distributed behavioral model, SIGGRAPH Comput. Graph. 21 (1987) 25–34.
3. R. Solar, R. Suppi, E. Luque, High performance individual-oriented simulation using complex models, Procedia Computer Science 1 (1)
(2010) 447 – 456, iCCS 2010.
4. R. Suppi, P. Munt, E. Luque, Using pdes to simulate individual-oriented models in ecology: A case study, in: Proceedings of the International
Conference on Computational Science-Part I, ICCS ’02, Springer-Verlag, London, UK, 2002, pp. 107–116.
5. B. Zhou, S. Zhou, Parallel simulation of group behaviors, in: Proceedings of the 36th conference on Winter simulation, WSC ’04, Winter
Simulation Conference, 2004, pp. 364–370.
6. J. J. Corner, G. B. Lamont, Parallel simulation of uav swarm scenarios, in: Proceedings of the 36th conference on Winter simulation, WSC
’04, Winter Simulation Conference, 2004, pp. 355–363.
7. G. Vigueras, M. Lozano, J. Ordua, Workload balancing in distributed crowd simulations: the partitioning method, The Journal of Supercomputing (2009) 1–9.
8. Y. Wang, M. Lees, W. Cai, S. Zhou, M. Low, Cluster based partitioning for agent-based crowd simulations, in: Winter Simulation Conference
(WSC), Proceedings of the 2009, 2009, pp. 1047 –1058.
9. M. J. Quinn, R. A. Metoyer, K. Hunter-zaworski, Parallel implementation of the social forces model, in: Proceedings of the Second International Conference in Pedestrian and Evacuation Dynamics, 2003, pp. 63–74.
10. M. A. Stijnman, R. H. Bisseling, G. T. Barkema, Partitioning 3d space for parallel many-particle simulations, Computer Physics Comm 149
(2003) 121–134.
11. Y. M. Marzouk, A. F. Ghoniem, K-means clustering for optimal partitioning and dynamic load balancing of parallel hierarchical n-body
simulations, J. Comput. Phys. 207 (2005) 493–528.
12. D. M. Rao, A. Chernyakhovsky, Parallel simulation of the global epidemiology of avian inﬂuenza, in: Proceedings of the 40th Conference on
Winter Simulation, WSC ’08, Winter Simulation Conference, 2008, pp. 1583–1591.
13. S. B. Yoginath, K. S. Perumalla, Parallel vehicular traﬃc simulation using reverse computation-based optimistic execution, in: Proceedings of
the 22nd Workshop on Principles of Advanced and Distributed Simulation, PADS ’08, IEEE Computer Society, Washington, DC, USA, 2008,
pp. 33–42.
14. X. Hu, Y. Sun, Agent-based modeling and simulation of wildland ﬁre suppression, in: Proceedings of the 39th conference on Winter simulation:
40 years! The best is yet to come, WSC ’07, IEEE Press, Piscataway, NJ, USA, 2007, pp. 1275–1283.
15. R. Solar, R. Suppi, E. Luque, High performance distributed cluster-based individual-oriented ﬁsh school simulation, Procedia CS 4 (2011)
76–85.
16. D. Zhang, C. Jiang, S. Li, A fast adaptive load balancing method for parallel particle-based simulations, Simulation Modelling Practice and
Theory 17 (6) (2009) 1032 – 1042.
17. C. Ding, Y. He, A ghost cell expansion method for reducing communications in solving pde problems, in: Proceedings of the 2001 ACM/IEEE
conference on Supercomputing (CDROM), Supercomputing ’01, ACM, New York, NY, USA, 2001, pp. 50–50.
18. A. Huth, C. Wissel, The simulation of the movement of ﬁsh schools, Journal of Theoretical Biology 156 (3) (1992) 365 – 385.
19. F. Aurenhammer, Voronoi diagrams - a survey of a fundamental geometric data structure, ACM Comput. Surv. 23 (1991) 345–405.
20. E. Chavez, G. Navarro, An eﬀective clustering algorithm to index high dimensional metric spaces, in: Proceedings of the Seventh International
Symposium on String Processing Information Retrieval (SPIRE’00), IEEE Computer Society, Washington, DC, USA, 2000, pp. 75–.
21. R. U. Paredes, C. Marquez, R. Solar, Construction strategies on metric structures for similarity search, CLEI Electron. J. 12 (3).
22. R. M. Fujimoto, Parallel and Distribution Simulation Systems, 1st Edition, John Wiley & Sons, Inc., New York, NY, USA, 1999.

