Genomes Containing Duplicates Are
Hard to Compare
(Extended Abstract)
Cedric Chauve1 , Guillaume Fertin2 , Romeo Rizzi3 , and St´ephane Vialette4
1

` Montr´eal
LaCIM, CGL, D´epartement d’Informatique, Universit´e du Qu´ebec A
CP 8888, Succ. Centre-Ville, H3C 3P8, Montr´eal (QC) - Canada
chauve@lacim.uqam.ca
2
Laboratoire d’Informatique de Nantes-Atlantique (LINA), FRE CNRS 2729
Universit´e de Nantes, 2 rue de la Houssini`ere, 44322 Nantes Cedex 3 - France
fertin@lina.univ-nantes.fr
3
Dipartimento di Matematica e Informatica - Universit`
a di Udine - Italy
Romeo.Rizzi@dimi.uniud.it
4
Laboratoire de Recherche en Informatique (LRI), UMR CNRS 8623
Facult´e des Sciences d’Orsay - Universit´e Paris-Sud, 91405 Orsay - France
vialette@lri.fr

Abstract. In this paper, we are interested in the algorithmic complexity
of computing (dis)similarity measures between two genomes when they
contain duplicated genes. In that case, there are usually two main ways
to compute a given (dis)similarity measure M between two genomes G1
and G2 : the ﬁrst model, that we will call the matching model, consists in
computing a one-to-one correspondence between genes of G1 and genes of
G2 , in such a way that M is optimized in the resulting permutation. The
second model, called the exemplar model, consists in keeping in G1 (resp.
G2 ) exactly one copy of each gene, thus deleting all the other copies, in
such a way that M is optimized in the resulting permutation. We present
here diﬀerent results concerning the algorithmic complexity of computing
three diﬀerent similarity measures (number of common intervals, MAD
number and SAD number) in those two models, basically showing that
the problem becomes NP-complete for each of them as soon as genomes
contain duplicates. In the case of MAD and SAD, we actually prove that,
under both models, both MAD and SAD problems are APX-hard.

1

Introduction

A classical method to compute phylogenies based on gene orders in whole genomes is to ﬁrst compute a pairwise distance matrix, obtained by comparing every
pair of genomes in a considered dataset. Note that the pairwise distance between
two gene orders G1 and G2 is often deduced from a similarity or dissimilarity
measure, say M , between G1 and G2 . Gene orders are usually represented by
Work partially supported by the French-Italian Galileo Project PAI 08484VH and
the French-Qu´ebec 60th CPCFQ.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 783–790, 2006.
c Springer-Verlag Berlin Heidelberg 2006

784

C. Chauve et al.

signed sequences on the alphabet of gene families, where every element in a
genome is a gene (each gene being represented either as a letter or an integer).
Any gene belongs to a unique gene family, and two genes that have the same
label, regardless of the sign, belong to the same gene family. A family f of genes
is said to be balanced between two genomes if the number of occurrences of genes
of f is the same in both genomes. Two genomes G1 and G2 are consequently said
to be balanced if all families of genes in G1 and G2 are balanced. In this paper we
consider only balanced pairs of genomes, for reasons that we describe later in this
section. When there are no duplicates in a balanced pair of genomes, it can be
represented by a signed permutation, and the computation of the measure M is
polynomial-time solvable in several models that have been used in practice (e.g.
number of breakpoints, reversal distance, number of conserved intervals, number
of common intervals, MAD and SAD numbers among others). However, aside of
a few exceptions, like small genomes of viruses and organelles, duplicated genes
and other genomic markers are common in genomes, due to several evolutionary
mechanisms, like gene duplication or whole genomes duplications [7]. Hence, it
is an important problem to be able to handle those duplicates when measuring
the distance or (dis)similarity between pairs of genomes. The main approach
is to transform the two signed sequences G1 and G2 in a signed permutation,
that allows to use one of the models deﬁned in this case. This has been done in
two diﬀerent ways, called the matching model and the exemplar model. In the
matching model, we want to end up in a situation where the pair of genomes is
balanced. For this, for each family f of genes, we establish a maximal one-to-one
correspondence between the genes of f in G1 and the genes of f in G2 , before
deleting the genes of f which have not been paired. The result is a complete
matching between G1 and G2 that induces a signed permutation. The goal is to
compute the matching that induces a signed permutation that is optimal, among
all signed permutation given by all possible matchings, for the chosen measure
M . In the exemplar model, introduced by Sankoﬀ [6], the idea is to keep exactly
one copy of each family in each genome, that can be seen as the ancestral copy of
all occurrences of the corresponding gene family. Consequently, we end up here
again with a signed permutation and the goal is to compute the exemplar copy
of each gene family that induces a signed permutation that is optimal for M .
Let occ(G, g) denote the maximum number of occurrences of a gene g in genome
G (regardless of the signs), and let occ(G) be the maximum of occ(G, g) over all
genes g in G. Note that if occ(G1 ) = 1 (that is, if G1 contains no duplicates),
then for any genome G2 , both the matching and the exemplar models coincide.
In this paper, we present new results on the algorithmic complexity of computing diﬀerent (dis)similarity measures, for balanced1 pairs of genomes that
1

Note that comparing real genomes often lead to unbalanced pairs of signed sequences
and requires either models of measure that accounts for the insertion and deletion
of gene and gene segments [1] or methods to balance a pair of genomes [4]. However,
for all models we are aware of, insertion/deletions are not necessary for a balanced
pair of genomes, and then the complexity of the balanced problem is suﬃcient to
give the complexity of the more general problem.

Genomes Containing Duplicates Are Hard to Compare

785

contain duplicates. Several measures have already been studied like the number
of breakpoints [3, 1], the number of reversals [3, 4] and the number of conserved
intervals [2]. Basically, it has been shown that, for each of the above mentioned
measures, the problem is NP-complete as soon as duplicates are present in
genomes, in both the matching and exemplar approaches ; some inapproximability results are also given in some cases [9]. Here, we follow the same line and
we describe results for three other similarity measures, namely number of common intervals, Maximum Adjacency Disruption number (MAD) and Summed
Adjacency Disruption number (SAD), which will be deﬁned in Section 2. In order to simplify notations, and since none of those three measures depends on the
signs given to the genes (unlike measures like breakpoints, conserved intervals
and reversals), we consider only unsigned genomes. We focus in Section 3 on the
problem of computing the number of common intervals in genomes containing
duplicates, and show that the problem is NP-complete in both the matching
and exemplar models. In Sections 4 and 5, we prove that, under both models,
both the MAD and SAD problems are APX-hard when genomes contain duplicates. Due to space constraints, no formal proof will be given in this extended
abstract ; they will appear in the journal version of the paper.

2

Preliminaries

In this section, we deﬁne the three similarity measures we are interested in. As
mentioned before, each of those measures asks that the genomes are balanced,
and that a one-to-one correspondence exists between any gene of G1 and a gene
of G2 . Hence we will often conveniently rename genome G1 into the identity
permutation on n genes, Idn (that is, 1 2 3 . . . n) and G2 can be recomputed
accordingly into a new permutation. We now deﬁne those three measures.
Number of common intervals: a common interval between G1 and G2 is a substring of G1 for which the exact same content can be found in a substring of G2 .
For example, let G1 = Id5 and G2 = 1 5 3 4 2, then the interval [3, 5] of G1 is a
common interval.
Maximum Adjacency Disruption Number (MAD): this notion has been recently
introduced by Sankoﬀ and Haque [8], where a genome is represented by a string
of integers. This number, say M, is deﬁned as the maximum between two values
M1,2 and M2,1 , where M1,2 (resp. M2,1 ) is the maximum diﬀerence between two
consecutive genes (i.e., integers) in G2 (resp. G1 ) , supposing that G1 = Idn
(resp. that G2 = Idn ) and that G2 (resp. G1 ) has been renamed accordingly. We
need to compute both M1,2 and M2,1 in order to restore symmetry, since those
two measures might diﬀer.
Summed Adjacency Disruption Number (SAD): this notion has also been introduced by Sankoﬀ and Haque [8], and can be seen as a global variant of the MAD
number. Similarly to the previous case, suppose Gi = Idn and Gj = g1j g2j . . . gnj
has been renamed accordingly (i = j ∈ {1, 2}). The Summed Adjacency Disn−1
n−1
1
2
ruption number is then deﬁned as S = k=1 |gk1 − gk+1
| + k=1 |gk2 − gk+1
|. In

786

C. Chauve et al.

other words, we sum the diﬀerences between consecutive genes, and we do that
in both “directions” to avoid asymmetry.
Note that the two last measures are actually dissimilarity measures, which
means that the goal is to minimize them, while the ﬁrst is a similarity measure
that we wish to maximize.

3

Number of Common Intervals

Let EComI (resp. MComI) denote the problem of computing the maximum
number of common intervals in the exemplar (resp. matching) model. We show
that both EComI and MComI are NP-complete, even for restricted instances.
The reduction we give below is valid for both models, since it shows NP-completeness in the case occ(G1 ) = 1. However, in order to simplify notations, we will
mention here only the exemplar model (i.e., the EComI problem). The reduction is from VertexCover. Starting from any instance of VertexCover (that
is, a graph G = (V, E) with V = {v1 , v2 . . . vn } and E = {e1 , e2 . . . em }),
we will ﬁrst describe a polynomial-time construction of two genomes G1 and
G2 such that occ(G1 ) = 1 and occ(G2 ) = 2. We ﬁrst describe G1 : G1 =
b1 , b2 . . . bm , x, a1 , C1 , a2 , C2 . . . an , Cn , y, bm+n , bm+n−1 . . . bm+1
The ai s, the bi s, x and y are genes, while Ci s are sequences of genes. They
are deﬁned as follows:
–
–
–
–
–

for any 1 ≤ i ≤ n, ai = 2(i − 1)m + i ;
for any 1 ≤ i ≤ n, Ci = (ai + 1), (ai + 2) . . . (ai + 2m) ;
for any 1 ≤ i ≤ n + m, bi = an + 2m + i ;
x = bn+m + 1 ;
y = bn+m + 2.

It can be seen that no gene appears more than once in G1 , thus occ(G1 ) = 1.
Now we describe the construction of G2 :
G2 = y, a1 , D1 , bm+1 , a2 , D2 , bm+2 . . . bm+n−1 , an , Dn , bm+n , x
The duplicated genes in G2 are b1 , b2 . . . bn , and are spread within the Di s.
Moreover, each bi , 1 ≤ i ≤ n will appear only twice in G2 . We now describe the
contents of Di , 1 ≤ i ≤ n. Basically, Di is constructed in two steps: (1) we ﬁrst
construct, for each i, a sequence of genes Di , which is a speciﬁc shuﬄe of the
contents of Ci = (ai + 1), (ai + 2) . . . (ai + 2m). More precisely, let min = ai + 1
and max = ai + 2m ; then Di = (ai + 3), (ai + 5) . . . (ai + 2m − 3), (ai + 2m −
1), min, max, (ai + 2), (ai + 4) . . . (ai + 2m − 4), (ai + 2m − 2) ; (2) for any
1 ≤ i ≤ n, we obtain Di by adding some bj s (1 ≤ j ≤ m) into Di , accordingly to
the initial graph G we are given. More precisely, for any edge ej that is incident
to a vertex vi in G, we add the gene bj between the j-th and the (j + 1)-th gene
of Di . This process gives us the Di s. Note that no two bj s (1 ≤ j ≤ m) can
appear contiguously in a Di , and that no Di starts or ends with a bj (all Di s
start and end with a gene that only appears in Ci in G1 ).

Genomes Containing Duplicates Are Hard to Compare

787

Lemma 1. Let G be a graph and G1 and G2 be the two genomes obtained by the
construction described above. G admits a Vertex Cover V C such that |V C| ≤ k
iﬀ there exists an exemplar genome GE
2 obtained from G2 having at least I =
2nm + 4n + m + 3 − 2k common intervals.
As a direct consequence of Lemma 1, we conclude that the EComI problem is
NP-complete. Moreover, as mentioned before, the proof and the result are also
valid for the MComI problem, since our construction implies occ(G1 ) = 1. We
thus have the following theorem.
Theorem 1. The EComI and MComI problems are both NP-complete, even
when occ(G1 ) = 1 and occ(G2 ) = 2.
We also consider, for the matching model, instances for which the constraints do
not rely on the maximum number of duplicates per family, but on the number
of families that contain duplicates. We have the following result.
Theorem 2. The MComI problem is NP-complete, even when f (G1 ) = f (G2 )
= 1, where f (G) denotes the number of diﬀerent families of genes that contain
duplicates in G.

4

Maximum Adjacency Disruption (MAD)

Let EMAD (resp. MMAD) denote the problem of computing the minimum
MAD number of in the exemplar (resp. matching) model. In this section, we
prove inapproximability results for both the EMAD and MMAD problems.
More precisely, we show that for no ε > 0, EMAD (resp. MMAD) admits a
(2 − ε)-approximation algorithm, unless P=NP. This inapproximability result
does not rely on the PCP theorem. We will also remark however, how, reconsidering the reduction proposed in view of APX-hardness results based on the
PCP theorem, one can replace the constant 2 above with a strictly bigger constant. The proof is split into two: we ﬁrst study the complexity of a restricted
form of SAT, which we call Uniform-SAT, and in particular we show that it is
NP-complete. Next, we show that a (2−ε)-approximation algorithm for EMAD
(resp. MMAD), for some ε > 0, would imply the existence of a polynomial-time
algorithm for Uniform-SAT. Finally, we obtain the inapproximability result
for EMAD (resp. MMAD).
In the following, 3SAT will denote the restriction of SAT for which each
clause contains at most 3 literals. We introduce a restricted form of 3SAT
called Uniform-SAT, as follows: an instance X, C of 3SAT is an instance
of Uniform-SAT when the following two conditions are met: (i) for each clause
C ∈ C, either all literals occurring in C are positive occurrences of variables from
X or all literals occurring in C are negated occurrences of variables from X and
(ii) for each variable x ∈ X, x has at most 3 positive and at most 2 negated
occurrences within C. A 3SAT formula F = C∈C C is called 3-bounded if no
variable has more than 3 occurrences within C and is called (2, 2)-bounded if

788

C. Chauve et al.

no variable has more than 2 positive occurrences and no more than 2 negated
occurrences within C. The following two facts are known: (1) the decision problem 3SAT is NP-complete even when restricted to 3-bounded formulas and
(2) the optimization problem Max-3SAT is APX-hard even when restricted to
3-bounded formulas [5]. Since both problems admit a trivial self-reduction in
case a variable has only positive (or only negated) occurrences, then the following two facts also hold: (1) 3SAT is NP-complete even when restricted to
(2, 2)-bounded formulas and (2) Max-3SAT is APX-hard even when restricted
to (2, 2)-bounded formulas. Notice that, of the above two results, only the second
is related to the PCP-theorem.
Theorem 3. Deciding whether a given Uniform-SAT formula is satisﬁable is
NP-complete.
Theorem 3 here above does not need the PCP theorem and is all what is required
in the following for proving that, for no ε > 0, EMAD (resp. MMAD) admits
a (2 − ε)-approximation algorithm, unless P=NP. With dependence on PCP, we
have the following result, which, besides being of independent interest, can be
used to show that the right constant for the approximability of EMAD (resp.
MMAD) is not 2.
Theorem 4. Given a Uniform-SAT formula, the problem of ﬁnding a truth
assignment maximizing the number of satisﬁed clauses is APX-hard.
We now prove that both the EMAD and MMAD problems are APX-hard. The
result holds for both problems, since we prove it in the case where occ(G1 ) = 1,
where they coincide. The result rests on a reduction form Uniform-SAT. Assume we are given an instance X, C of Uniform-SAT, where X = {x1 , x2 , . . . ,
xn }. Here, C can be partitioned into the family P = {P1 , P2 , . . . , Pmp } of clauses
comprising only positive literals and the family N = {N1 , N2 , . . . , Nmn } of
clauses comprising only negated literals. Let Mε be a suﬃciently big positive
integer that we will ﬁx later in order to force our conclusions. We propose to
compare two genomes G1 and G2 . Here, G1 is the simple (that is, without repetitions) genome G1 of length L1 = 2 Mε + mp + mn + n − 1 deﬁned as follows:
G1 = 1 2 3 . . . L1 . A gene at position i in G1 with i ≤ mp or i ≥ L1 − mn + 1
is called a ∗-gene. Genome G2 has length L2 = 2 Mε + 6 n − 1, and conforms to
the following pattern, where we have found it convenient and pertinent to spot
out the displacement of the ∗-genes within genome G2 .
G2 = mp + 1, . . . , mp + Mε , ∗, ∗, ∗, ∗, ∗, mp + Mε + 1, ∗, ∗, ∗, ∗, ∗, mp + Mε + 2, . . .
. . . , ∗, ∗, ∗, ∗, ∗, mp +Mε +n, mp +Mε +n+1, mp +Mε +n+2, . . . , mp +2 Mε +n−1
We will specify later the precise identity of the ∗-genes within genome G2 . For
now, notice that in G2 we have precisely n runs of 5 consecutive ∗-genes. We put
these runs into (1, 1)-correspondence with the n variables in X, so that the i-th
run corresponds to variable xi , for i = 1, 2, . . . , n. For each i = 1, 2, . . . , n, let
Pi and Ni be the lists of index sets of the clauses from P and N which contain
variable xi . E.g., if xi appears in P3 , in P7 , and in N2 , then Pi = (3, 7), whereas

Genomes Containing Duplicates Are Hard to Compare

789

Ni = (2). Notice that the lengths of the lists Pi and Ni are at most 3, and 2,
respectively. ¿From the list Pi we obtain a list Pi of length precisely 3 by possibly
iterating the last element in Pi the required number of times (that is, 3 − |Pi |
times). A list Ni of length precisely 2 is similarly obtained from list Ni . Now, for
each i = 1, 2, . . . , n, the i-th run of 5 consecutive ∗-genes consists in the following
5 characters: (∗, ∗, ∗, ∗, ∗) → (Pi [1], Pi [2], Pi [3], L1 −mn +Ni [1], L1 −mn +Ni [2])
The above reduction leads us to the following result.
Theorem 5. For no ε > 0, EMAD (resp. MMAD) admits a (2 − ε)-approximation algorithm, unless P=NP.
Remark 1. There actually exists a constant c > 2 such that EMAD (resp.
MMAD) admits no c-approximation algorithm unless P=NP. We can get to
this stronger conclusion if in the proof of Theorem 5 here above we apply Theorem 4 instead of Theorem 3.

5

Summed Adjacency Disruption (SAD)

Let ESAD (resp. MSAD) denote the problem of computing the minimum SAD
number of in the exemplar (resp. matching) model. In this section, we prove that
both problems ESAD and MSAD, expressed on two genomes G1 and G2 such
that |G1 | ≤ |G2 | cannot be better than log(|G1 |) approximated. This result holds
for both the exemplar and the matching models, since we prove it in the case
where occ(G1 ) = 1, for which the two problems coincide. The inapproximability of ESAD (resp. MSAD) is obtained starting from the inapproximability of
SetCover. This result will hence depend on the PCP theorem, but will deliver
stronger SetCover-like inapproximability thresholds than for the EMAD ans
MMAD problems discussed in the previous section.
Let V, S be an instance of SetCover, where V = {1, 2, . . . , n}, and S =
{S1 , S2 , . . . , Sm } is a family of subsets of V . We can assume n is even, say
n = 2k, and each set Si contains precisely k = n2 elements, say si1 , si2 , . . . , sik .
The well-known inapproximability results for SetCover hold also under these
assumptions, since we can think of enlarging a ground set V , originally on k
elements, by adding a set V of k new elements, adding V to S, and enlarging
the other sets in S with elements from V until their size rises up to k. Let
M = m3 n3 play the role of a suﬃciently big positive integer. We propose to
compare two genomes G1 and G2 . Here, G1 is the simple genome G1 of length
L1 = M + n + m deﬁned as follows: G1 = 1 2 3 . . . L1 . Genome G2 has length
L2 = M + m(k + 1), and is constructed as follows:
G2 = n+1, n+2, . . . , n+M, s11 , s12 , . . . , s1k , n+M +1, s21 , s22 , . . . , s2k , n+M +2, . . .
m
m
, sm−1
, . . . , sm−1
, n + M + m − 1, sm
. . . , sm−1
1 , s2 , . . . , sk , n + M + m
1
2
k
The above reduction leads us to the following result.
Theorem 6. There exists a constant c > 0 such that ESAD (resp. MSAD)
admits no (c log |G1 |)-approximation algorithm, unless P=NP.

790

6

C. Chauve et al.

Conclusion

In this paper, we have investigated the algorithmic complexity of the problem
of computing similarity measures between genomes, in the case where genomes
contain duplicates. This has been done for three measures: common intervals,
MAD and SAD. We have shown that the three problems are NP-complete, for
both the exemplar and matching variants. Moreover, we have provided APXhardness results concerning MAD and SAD. Our results basically show that as
soon as duplicates are present, the problems become hard, even in very restricted
instances. Moreover, as can be seen, no APX-hardness result is known concerning
common intervals ; we are currently investigating those questions.

References
1. G. Blin, C. Chauve, and G. Fertin. The breakpoint distance for signed sequences.
In 1st Int. Conference on Algorithms and Computational Methods for Biochemical
and Evolutionary Networks, CompBioNets 2004, volume 3 of Texts in Algorithms,
pages 3–16. KCL Publications, 2004.
2. G. Blin and R. Rizzi. Conserved interval distance computation between non-trivial
genomes. In 11th Int. Comp. and Combinatorics Conference (COCOON’05), volume
3595 of LNCS, pages 22–31, 2005.
3. D. Bryant. The complexity of calculating exemplar distances. In D. Sankoﬀ and
J. Nadeau, editors, Comparative Genomics: Empirical and Analytical Approaches to
Gene Order Dynamics, Map Alignment, and the Evolution of Gene Families, pages
207–212. Kluwer Acad. Pub., 2000.
4. X. Chen, J. Zheng, Z. Fu, P. Nan, Y. Zhong, S. Lonardi, and T. Jiang. Assignment of
orthologous genes via genome rearrangement. IEEE/ACM Trans. on Comp. Biology
and Bioinformatics, 2(4):302–315, 2005.
5. M.R. Garey and D.S. Johnson. Computers and Intractability: a guide to the theory
of NP-completeness. W.H. Freeman, San Franciso, 1979.
6. D. Sankoﬀ. Genome rearrangement with gene families. Bioinformatics, 15(11):909–
917, 1999.
7. D. Sankoﬀ. Gene and genome duplication. Curr. Opin. Genet. Dev., 11(6):681–684,
2001.
8. D. Sankoﬀ and L. Haque. Power boosts for cluster tests. In Comparative Genomics,
RECOMB 2005 International Workshop, RCG 2005, volume 3678 of LNBI, pages
121–130. Springer, 2005.
9. N. Cam Thach. Algorithms for calculating exemplar distances. Honours Year
Project Report, National University of Singapore, 2005.

