An Efficient Dynamic Programming Algorithm and
Implementation for RNA Secondary Structure Prediction
Guangming Tan, Xinchun Liu, and Ninghui Sun
Institutue of Computing Technology, Chinese Academy of Sciences, China
{tgm, lxc, snh}@ncic.ac.cn

Abstract. RNA secondary structure prediction based on free energy rules for
stacking and loop conformation remains a major computational method. The
basic dynamic programming algorithm needs O(n4) time to calculate the
minimum free energy for RNA secondary structure. To date, there are two
variants for handling this problem: either the internal loops are bounded by a
maximal size k giving a time complexity of O(n2*k2), or one uses the trick of
Rune Lyngso, which makes use of the regularities of loop energies, to reduce
time complexity to O(n3) without restriction. We propose a new dynamic
programming algorithm for RNA secondary structure prediction by analyzing
energy rules. Through only additional O(n) space, this algorithm eliminates
redundant calculation in the energy calculation of internal loop with
unrestricted/restricted size and reduces the time complexity of this part from
O(n4) to O(n3), then the overall time complexity to O(n3).

1 Introduction
RNA secondary structure prediction has been one of major research area of
computational biology. Many computational methods have been proposed since
experimental methods determining secondary structure are time and cost consuming.
Tinoco et.al. (1971, 1973) proposed a good approximate method to calculate the
stability of a folded RNA molecule by adding independent contributions from base
pair stacking and loop-destabilizing terms from secondary structure. Based on this
model, algorithms for computing the most stable structures have been proposed.
Dynamic programming algorithms (Zuker et al, 1989) based on the minimum free
energy model are practical methods for RNA secondary structure prediction without
pseudo-knots. They give rigorous solutions to the problems of computing a minimum
free energy structure.
In general, the dynamic programming algorithms require O(n4) time (where n is the
length of RNA sequence), especially for the internal loop. If the stability of an
internal loop can be assumed only to depend on the size of internal loop, Waterman
and Smith(1986) describe how to reduce the time requirement to O(n3). By bounding
internal loops to small loops (k), a method risks missing some optimal large internal
loops, but the time required for evaluating internal loops is reduced to O(k2), thus
reducing the overall complexity to O(k2n2)( Hofacker, Ivo L. 1994, 2003). For
unrestricted internal loop, a O(n3) algorithm was proposed by Rune Lyngso et
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 869 – 876, 2005.
© Springer-Verlag Berlin Heidelberg 2005

870

G. Tan, X. Liu, and N. Sun

al(1999). This algorithm allows all internal loops to be evaluated in time O(n3) based
on a property of current free energy functions.
In this paper, based on the regularities of loop energies, we will propose an
efficient dynamic programming algorithm that also reduces the overall time
complexity to O(n3), but with only O(n) additional space. The rest of this paper is
structured as follows. In METHODS, we briefly describe the problem of evaluating
energies of loops in RNA secondary structure prediction. In ALGORITHMS, we
present an efficient O(n3) algorithms for calculating energies for certain free energy
functions. In IMPLEMENTATION, we compare our method to the popular
previously used method. CONCLUSION concludes this paper.

2 Methods
The formal definition of an RNA secondary structure is described by Rune Lyngso
et.al and we will use the same definition and notations (In the rest of this paper, we
will not give the definition and the explanation of notations since we refer to this
article for a presentation of the dynamic programming algorithm). The secondary
structure is assumed not to contain pseudo-knots. One can view a pseudo-knot free
secondary structure S as a collection of loops together with some external unpaired
bases. The loops are classified into six kinds of loops: hairpin loop, bulge, internal
loop, multi-branched loop and stacked pair.
The energy of an RNA secondary structure is assumed to be the sum of the
energies of the independent loops of the structure, that is, the energy of a loop only
depends on the loop and not on the rest of the structure (Tinoco et al 1973). Based on
these assumptions one can specify a recursion to calculate the energy of the optimal
structure for a sequence s. The energy of an optimal structure of the sequence from i
through j closed by (i,j):
V(i, j) = min {eH (i, j ), eS (i, j ) + V (i + 1, j − 1), VBI (i, j ),VM (i, j )}

(1)

Where eH(i,j) is the energy of a hairpin loop closed by (i,j) and eS(i, j) is the energy
of stacking base pair (i,j) with (i+1,j-1). The energy VBI(i,j) of an internal loop closed
by (i,j):
V B I (i, j ) =

m in

{ e L ( i , j , i ', j ') + V ( i ', j ')}

(2)

i < i '< j '< j
i '− i + j − j '> 2

VM(i,j) is the energy of multi-branched loop closed by (i,j):

( +1,k −1)+WM(k, j −1)}
⎧min{WMi
⎫
⎪i+1<k≤j−1
⎪
⎪
{WMi( +2,k)+WM(k +1, j −1)}+d3 ⎪
in
⎪⎪i+m
⎪⎪
2<k≤j−1
VM(,i j) =min⎨
⎬
⎪ min{WMi( +1,k)+WM(k +1, j −2)}+d5 ⎪
⎪i+1<k≤j−2
⎪
⎪ min{WMi
( +2,k)+WM(k +1, j −2)}+d3+d5⎪
⎩⎪i+2<k≤j−2
⎭⎪

(3)

An Efficient Dynamic Programming Algorithm and Implementation for RNA

871

Where d3 and d5 is the energy of dangle on 3’ and 5’, WM(i, j) is an extra array, it
can be calculated from:

WM(i, j) = min{V (i, j) + b,WM(i, j −1) + c,WM(i +1, j) + c

min{WM(i, k −1) +WM(k, j)}}

(4)

i<k≤ j

From the four equations above, we can see that the dynamic programming algorithm
should fill some arrays. Equation 2 shows that the evaluation of internal loops needs
O(n4) time. Equation 3 and 4 show that the evaluation of multi-branched loops need
O(n3) time. The overall time complexity of the dynamic programming algorithm is
O(n4). In the next section, based on the property of current free energy functions
discovered by Rune Lyngso et.al, an efficient algorithm to evaluate the internal loops
with unrestricted size will be proposed. Furthermore, through eliminating redundant
calculation, our method speedups original algorithm when the maximum size of
internal loops is restricted to MAXLOOP.

3 Algorithms
In order to calculate VBI(i,j), the algorithm should calculate the minimum energy
among all base pairs (i’,j’), where i<i’<j’<j,i’-i+j-j’>2. According to equation 2, it
seems that the algorithm should travel all pairs (i’,j’)in the interval for each step. By
utilizing the regularity of energy rule of internal loop, equation 5 splits the
contribution to energy VBI(i,j). The contributions to the energy VBI(i,j) of an internal
loop closed by (i,j) are split into three parts(Lyngso et al, 1999): (a). An entropic term
that depends on the size of the loop. (b). Stacking energies for the mismatched base
pairs adjacent to the enclosing (exterior and interior) base pair. (c). An asymmetry
penalty for asymmetric loops. We write the internal loop energy function as:
⎧size(i '− i + j − j '− 2) + asymmetry(i '− i −1, j − j '−1)⎫
VBI(i, j) = min ⎨
⎬
i <i '< j '< j
+stacking(i, j) + stacking (i ', j ') + V (i ', j ')
⎭
i ' −i + j − j '>2 ⎩

(5)

Lyngso’s method consider bulge loop as a special internal loop. However, energy rule
for bulge loop is different from internal loop, so bulge loop usually are not counted as
special loop. We repartition the contributions to the energy of internal loop. Besides
energy depending on size of loop and asymmetry penalty, our method adds bulge loop
energy contribution. Stacking energy is not explicitly evaluated as a contribution to
energy of internal loop, but a contribution to three parts of energy above. The rest of
this section will describe that how our method calculates VBI(i,j) through dividing the
dynamic matrix. By equation 5, the energies of bulge loops are easy to be calculated
separately by selecting the minimum energy among all pairs energy in the horizontal
and vertical line with (i,j). The asymmetry(i’-i-1,j-j’-1) is a energy function depending
on |i’+j’-i-j| (Papanicolaou et al. 1984). As experiment shown, the asymmetry(i’-i-1,jj’-1) reaches a maximum value (MAX_ASY) when |i’+j’-i-j|>5 (Papanicolaou et al.
1984). We therefore separately calculate the contribution of the asymmetry(i’-i-1,j-j’1) using equation 5 for |i’+j’-i-j| 5 (see the region between slash i and slash i+11 in
Figure 1).

872

G. Tan, X. Liu, and N. Sun

Fig. 1. The spatial correlation between the calculation of VBI(i,j) and VBI(i,j+1). From left to
right, the two pairs in the right top are (i,j) and (i,j+1) respectively. For VBI(i,j), the region of
asymmetry locate between slash i and slash i+11. For VBI(i,j+1), the region of asymmetry
locate between slash i+1 and slash i+12. The additional base pairs are the colored pairs located
in the rightmost column. This figure doesn’t give bulge loops

Now, we can calculate the minimum among all pairs located in all diagonal lines,
that is the energy depending on size of loop. After get the minimum energy of
asymmetry penalty, we can replace asymmetry(i’-i-1,j-j’-1) in equation 5 by its
maximum value(MAX_ASY), thus equation only depending on size of loop is
rewritten as:
⎧size(i '− i + j − j '− 2) + stacking(i, j)
⎫
VBI _ len(i, j) = min ⎨
⎬
i <i '< j '< j
stacking
(
i
',
j
')
V
(
i
',
j
')
MAX
_
ASY
+
+
+
⎭
i ' −i + j − j '>2 ⎩

(6)

In fact, most of the pairs traveled in calculating VBI(i,j+1) have been traveled in
calculating VBI(i,j). From (i,j) to (i,j+1), some new pairs {(i, k) | i<=k<=j+1} (see
Figure 1) are added and loop sizes of all pairs (i’,j’) are increased by 1. The internal
loop size of pairs, which internal loop size is len-1 when calculating VBI(i,j), is len
when calculating VBI(i,j). In equation 6, stacking(i’,j’)+V(i’,j’) is independent of size
of loop. In order to avoid redundant calculation, the minimum energy among the pairs
with the same internal loop size is stored for the next step. We add a new array with
the size of the internal loop as index and each entry represents the minimum energy
among pairs with the same internal loop size.

An Efficient Dynamic Programming Algorithm and Implementation for RNA

LOOP(len) =

min

i '−i + j − j '+2=len

{stacking(i ', j ') +V (i ', j ')}

873

(7)

LOOP(len) is the minimum energy among all pairs (i’,j’) which form loops with size
len. Equation 3 only represents the meaning of array LOOP and LOOP(len) can be
deduced from LOOP(len-1) instead of selecting a minimum among the energy of all
pair (i’,j’) using equation 7. From (i,j) to (i,j+1), some additional base pairs are added.
But only one new pair is added to the set of pairs with the same internal loop size or
one diagonal line in Figure 1(see Figure 1. One new pair in each diagonal at each

LOOP(len) = min {LOOP(len − 1), stacking ( p, q) + V ( p, q)}

(8)

step). Supposed that the new pair is (p,q), we get the formulation:
When calculating VBI(i,j), the minimum energy is quickly obtained using equation
8 instead of calculating the energy for all pairs. Figure 1 shows the relationship
between the calculation of VBI(i,j) and VBI(i,j+1). The internal loop size of pairs in
diagonal len-1 is len-1 when calculating VBI(i,j), however, it becomes len when
calculating VBI(i,j+1) , then LOOP(len) is updated by formulation 4. The update of
each entry of array LOOP(len) needs only one comparison operation between
previous entry LOOP(len-1) and the energy of one new pair such as the colored pair
in Figure 1.
Thus the calculation of VBI(i,j) is divided into three independent part. We rewrite
(2) as :
⎧si zei( '-i + j - j'-2)+asymmet r y(i'-i-1, j - j'-1)
⎫
⎪+st ack i ng(,i j)+st ack i ng(i', j')+V(i', j') i'+ j'-i- j |<5⎪
⎪
⎪
( '-i + j - j'-2)+st ack i ng(,i j)
⎪⎪bul gei
⎪⎪
VBI(i,j) = min⎨
⎬
(9)
+
)
+
V
(
i
'
,
j
'
)
i
'i
-1
=
0
or
j
j
'
1
=
0
st
ack
i
ng
i
j
(
'
,
'
⎪
⎪
⎪mi n{LOOPlen
⎪
( )+si z elen
( )}
⎪
⎪
4<len≤MAX LOOP⎭⎪
⎩⎪+st ack i ng(,i j)+MAX _ASY
In equa tion 2, it takes O(MAXLOOP*MAXLOOP/2) to the free energy for the
internal loop whereas this computations in equation 9 only takes O(MAXLOOP*C),
where C is const value. The time complexity of the original algorithm is O(n2*
MAXLOOP2) or O(n4) when the length of internal loop is unrestricted. The optimized
algorithm reduces the time complexity to O(n2* MAXLOOP) or O(n3) using only
O(MAXLOOP) or O(n) space.
Our method reduces the time complexity of dynamic programming algorithm to
O(n3) owing to reducing the O(n4) algorithm for calculating internal loops to O(n3). If
the size of internal loops is restricted to MAXLOOP(30), the time complexity of
internal loops evaluation is O(n2*MAXLOOP) or O(n2) (MAXLOOP is a constant),
however, the evaluation of multi-branched loops is O(n3). The overall time
complexity of optimized algorithm is O(n3).

874

G. Tan, X. Liu, and N. Sun

4 Implementation
We implemented the method described here by modifying the open source package
ViennaRNA since the package just implements a O(n3) dynamic programming
algorithm with restricted size of internal loops (MAXLOOP=30), its time complexity
is O(n4) when the size of loops is unrestricted. We call the optimized package IctRNA.
The prediction results of IctRNA are the same with that of original ViennaRNA
package.
Experimental results show that IctRNA has significant speedup and the platform
used is 1.6GHz Opteron processor, 3GB memory. First, we restrict the maximum size
of internal loops to 30. IctRNA is a newly implementation of ViennaRNA using our
O(n3) algorithm. Table 1 shows that the time comparison between ViennaRNA and
IctRNA. With the length of RNA sequences increasing, the speedup contribution of
optimized internal loop decreases because its time contribution to the overall time
decreases. For this case, the bottleneck of algorithm is not internal loop but the
evaluation of multi-branched loops. In ViennaRNA, when predicting secondary
structure for lsu_ecoli, the time of evaluating multi-branched loops(VM) almost is
two times as the time of evaluating internal loops(VBI).
Table 1. The runtime in seconds of ViennaRNA and the IctRNA. VBI: the time of evaluating
internal loops
programs

ViennaRNA

IctRNA

sequences

VBI

overall

VBI

overall

0.010

0.016

0.007

0.013

0.036

0.078

0.023

0.032

0.401

0.454

0.217

0.262

0.560

0.643

0.336

0.423

11.061

16.390

6.359

11.618

37.642

69.123

22.477

50.073

trna_yeast_phe.fa
(83bp)
5S_ecoli.fa
(154bp)
SRP_human.fa
(312bp)
RNaseP_ecoli.fa
(387bp)
ssu_ecoli.fa
(1556bp)
lsu_ecoli.fa
(2918bp)

We also test the performance of the optimized algorithm with unrestricted size of
internal loops. We set the maximum size of internal loops is n, where n is the length
of RNA sequence. In order to emphasize the effect of optimized algorithm for internal
loops calculation, we only compare the time of calculating internal loops and overall
time. So the two programs have an improved calculation of multi-branched loops.
Table 2 gives experimental results. From Table 2, we can find that a majority of

An Efficient Dynamic Programming Algorithm and Implementation for RNA

875

overtime is the calculation of internal loops. Our optimized algorithm on the
calculation of internal loops achieves huge speedup.
Table 2. The runtime in seconds of ViennaRNA and the optimized algorithm (IctRNA)
program
sequences

ViennaRNA
VBI
overall

IctRNA
VBI

owerall

trna_yeast_phe.fa
(83bp)
5S_ecoli.fa
(154bp)
SRP_human.fa
(312bp)
RnaseP_ecoli.fa
(387bp)
ssu_ecoli.fa
(1556bp)
lsu_ecoli.fa
(2918bp)

0.009

0.017

0.005

0.012

0.075

0.083

0.019

0.028

3.358

3.381

0.253

0.289

7.359

7.412

0.251

0.523

3204.177

3208.005

31.786

35.482

51166.314

51194.369

213.668

237.222

Mfold also implements a O(n3) algorithm with the unrestricted size of the internal
loops. Obviously, our implementation of O(n3) algorithm is different from Mfold,
which is based on the method proposed by Lyngso, R.B. and Zuker, M et al (1999).
However, our implementation is faster than Mfold as shown Chart1.

Mf ol d
I ct RNA

5S_ecol i

SRP_human

RNaseP_ecol i

ssu_ecol i

l su_ecol i

Chart 1. The runtime in seconds of IctRNA and Mfold. The platform used is 1.6GHz Opteron
processor. The overall time of Mfold for 5 sequences (5S_ecoli, SRP_human, RnaseP_ecoli,
ssu_ecoli and lsu_ecoli) are 0.796s, 3.987s, 6.746s, 78.112s and 349.568s

5 Conclusion and Acknowledgements
The dynamic programming algorithm for RNA secondary structure prediction
contains redundant calculation. We take advantage of spatial correlation between two

876

G. Tan, X. Liu, and N. Sun

continuous steps to eliminate the redundancy and decrease the times of computation
in computing internal loops and multi-branched loops energy. The optimized
algorithm is much faster than the original program ViennaRNA, we will build a web
server based on IctRNA.
We would like to thank Dr.Geir Skogerbo and Dr. Dongbo Bu for revising this
paper. This work is supported by National Natural Science Foundation of China under
the contract no. 60373044 and knowledge innovative project of Chinese Academy of
Sciences under the contract no. KSCX2-SW-233.

Reference
1. Zuker,M. and Stiegle,P. (1981) Optimal computer folding of larger RNA sequences using
thermodynamics and auxiliary information. Nucleic Acids Res., 9, 133-148
2. Lyngso, R. B. and Zuker, M et al (1999) Fast evaluation of internal loops in RNA
secondary structure prediction. Bioinformatics. Vol.15(6), 440-445
3. HoHacker,IvoL.(1994) http:// www. tbi. univie. ac. at/ ~ivo /RNA/
4. Hofacker, Ivo L. (2003)Vienna RNA secondary structure server. Bioinformatics. Vol.31
(13), 3429-3431, 2003
5. Tinoco,I., Uhlenbeck, O.C. and Levine, M.D.(1971) Estimation of secondary structure in
ribonucleic acids. Nature, 230, 362-367.
6. Tinoco,I and Borer, N, P et al(1973) Improved estimation of secondary structure in
ribonucleic acids. Nature New Biology, 246:40-41
7. Rune B.Lyngsø, Michael Zuker and Christian N. S. Pedersen. (1999) An Improved
Algorithm for RNA Secondary Structure Prediction. BRICS May 1999
8. Michael Zuker. (2003) Mfold web server for nucleic acid folding and hybridization
prediction. Nucleic Acids Res. 31 (13), 3406-15, 2003
9. Papanicolaou, C., Gouy,M. and Ninio, J. (1984) An energy model that predicts the correct
folding of both the tRNA and the 5S RNA molecules. Nucleic Acids Res., 12, 31-44.
10. Waterman,M.S. and Smith,T.F. (1986) Rapid dynamic programming methods for RNA
secondary structure. Adv. Appl. Math., 7, 455-464.

