Agent Based Load Balancing Middleware for
Service-Oriented Applications
Jun Wang, Yi Ren, Di Zheng, and Quan-Yuan Wu
School of Computer Science,
National University of Defence Technology,
Changsha, Hunan, China 410073
junwang@nudt.edu.cn

Abstract. Kinds of load balancing middleware have already been applied
successfully in distributed computing. However, they don’t take the services
types into consideration and for different services requested by clients the
workload would be different out of sight. Furthermore, traditional load
balancing middleware uses the fixed and static replica management and uses the
load migration to relieve overload. However, to the complex service-oriented
applications, the hosts may be heterogeneous and decentralized at all and load
migration is not efficient for the existence of the delay. Therefore, we put
forward an Agent based autonomic load balancing middleware to support fast
response, hot-spot control and balanced resource allocation among different
services. Corresponding simulation tests are implemented and their result s
indicated that this model and its supplementary mechanisms are suitable to
complex service-oriented applications.
Keywords: Web Service, Service-Oriented Applications, Load Balancing,
Adaptive Resource Allocation, Middleware.

1 Introduction
In recent years, with the rapid development of e-business, web based applications are
developed from localization to globalization, from B2C to B2B, from centralized
fashion to decentralized fashion and many applications are constructed based on
services. The services are executed by using the heterogeneous back-end resources
such as high performance systems, mass storage systems, database system etc.
However, the applications may be integrated across the Internet by using the services
and the distributed services and resources must be scheduled automatically,
transparently and efficiently. To service the increasing online clients those transmit a
large, often busty, number of requests and provide dependable services with high
quality constantly, we must make the distributed computing systems more scalable
and dependable. And even under high load, the systems must still support the services
as usual. Therefore, we must balance the load of the diverse resources to improve the
utilization of the resources and the throughput of the systems. Currently, load
balancing mechanisms can be provided in any or all of the following layers in a
distributed system:
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 974–977, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Agent Based Load Balancing Middleware for Service-Oriented Applications

•

•
•

975

Network-based load balancing: This type of load balancing is provided by IP
routers and domain name servers (DNS). However, load balancing at these
layers is somewhat limited by the fact that they do not take into account the
content of the client requests.
OS-based load balancing: At the lowest level for the hierarchy, OS-based load
balancing is done by distributed operating system in the form of lowest system
level scheduling among processors [3, 4].
Middleware-based load balancing: This type of load balancing is performed
in middleware, often on a per-session or a per-request basis. The key enterprise
applications of the moment such as astronavigation, telecommunication, and
finance all make use of the middleware based distributed software systems to
handle complex distributed applications.

There are different realizations of load balancing middleware. For example,
stateless distributed applications usually balance the workload with the help of
naming service [5]. But this scheme of load balancing just support static non-adaptive
load balancing and can’t meet the need of complex distributed applications. For more
complex applications, the adaptive load balancing schema [6, 7, 8] is needed to take
into account the load condition dynamically and avoid override in some node.
However, traditional load balancing middleware uses the fixed and static replica
management and load monitoring schemes to relieve overload. But to the complex
service-oriented applications, the hosts may be heterogeneous and decentralized at all
and load migration is not efficient for the existence of the delay. Therefore, we put
forward an Agent based autonomic load balancing middleware to support fast
response, hot-spot control and balanced resource allocation among different services.

2 Architecture of the Load Balancing Middleware
Our middleware will directly address to the problems by providing load balancing for
the service-oriented applications, preventing bottlenecks at the application tier,
balancing the workload among the different services and enabling replication of
service components in a scalable way to provide more access to the high performance
back end resources. The service components are object-based components and they
can be distributed or remotely located in different resources. Our load balancing
service is a system-level service and it is introduced to the application tier by using
IDL [1, 2] interfaces. Figure 1 features the core components in our load balancing
service as follows:
Service Replica Repository: Instances of services need to register with the Service
Group. All the references of the groups are stored in the Service Replica Repository.
A service group may include several replicas and we can add or remove replicas to
the groups. The main purpose of the service group is to provide a view containing
simple information about the references to the locations of all replicas registered with
group. The uses need not to know where the replica is located.
Decision Agent Group: The service decision agent acts as a proxy between the client
and the dynamic service. It enables transparency between them without letting the
client knowing about the multiple distributed service replicas. The agent is in charge

976

J. Wang et al.

of getting the best replica for the service and the client requests proceed with their
normal procedure such as calling methods from the service replica. The decision
agent makes decisions based on the algorithms configured in our load balancing
policy according to the Component Configurator design pattern.
Load Monitor: Load monitor collects load information from every load agent within
certain time interval. The load information should be refreshed at a suitable interval
so that the information provided is not expired. The hosts may have different
workload when processing some certain client requests and the workload of the
different hosts may fluctuate in different ways. Therefore we suggest an approach that
the refresh rate can be adjusted according to the workload of the hosts.

Fig. 1. Components of the Load Balancing Middleware

Load Agent: The purpose of load agent is to provide load information of the hosts it
resides when requested by load monitor. As different services might have replicas in
the same host, it is hard to presume the percentage of resource is being used by which
service at particular moment. Therefore, a general metric is needed to indicate the
level of available resources at the machine during particular moment.
Load Prediction: This module use the machine-learning based load prediction
method where the system minimizes unpredictable behavior by reacting slowly to
changes and waiting for definite trends to minimize over-control decisions.
Replica Management Agent Group: The purpose of these agents is to dynamically
manage the replicas to achieve a balance load distribution among different services. In
order to carry out service replication, we determine parameters such as initial number
of replica, maximum number of replica, when to replicate, where to replicate etc. As
different service contains different characteristics such as process time, priority and
popularity, we coordinate services in order to avoid monopolizing of resource by
popular service and unfair treatment for high priority service.
Several complex tests have been completed, and we can see that by using the Load
Agent the overhead of monitoring will be decreased effectively. Furthermore, with the
addition of the number of the hosts and the services, the resources can still be

Agent Based Load Balancing Middleware for Service-Oriented Applications

977

allocated efficiently and the workload of the resources can be balanced with the help
of the Replica Management Agent Group. Especially to the hot-spot services sharing
the workloads with the extra replicas is much better than load migration among the
overloaded servers.

3 Conclusions
Kinds of load balancing middleware have already been applied successfully in
distributed computing. However, they don’t take the services types into consideration
and for different services requested by clients the workload would be different out of
sight. Furthermore, traditional load balancing middleware uses the fixed and static
replica management and uses the load migration to relieve overload. However, to the
complex service-oriented applications, the hosts may be heterogeneous and
decentralized at all and load migration is not efficient for the existence of the delay.
Therefore, we put forward an Agent based autonomic load balancing middleware to
support fast response, hot-spot control and balanced resource allocation among
different services. Corresponding simulation tests are implemented and their result s
indicated that this model and its supplementary mechanisms are suitable to complex
service-oriented applications.

Acknowledgements
This work was funded by the National Grand Fundamental Research 973 Program of
China under Grant No.2005cb321804, the National High-Tech Research and
Development Plan of China under Grant No.2004AA112020 and the National Natural
Science Foundation of China under Grant No.60603063.

References
1. Object Management Group, The Common Object Request Broker: Architecture and
Specification, 3.0 ed., June 2002.
2. Henning, M., Vinoski, S.: Advanced CORBA Programming With C++. Addison-Wesley
Longman, Massachusetts (1999)
3. Chow, R., Johnson, T.: “Distributed Operating Systems and Algorithms”, Addison-Wesley
Publishing Company (1997)
4. Rajkumar, B.: High Performance Cluster Computing Architecture and Systems,
ISBN7.5053-6770-6.2001
5. IONA Technologies, “Orbix 2000.” www.iona-iportal.com/suite/orbix2000.htm.
6. Othman, O'Ryan, C., Schmidt, D. C.: The Design of an Adaptive CORBA Load Balancing
Service. IEEE Distributed Systems Online(2001)
7. Othman, O., Schmidt, D. C.: Issues in the design of adaptive middleware load balancing. In:
ACM SIGPLAN, ed. Proceedings of the ACM SIGPLAN workshop on Languages,
Compilers and Tools for Embedded Systems. New York: ACM Press(2001)205-213
8. Othman, O., O’Ryan, C., Schmidt, D.C.: Strategies for CORBA middleware-based load
balancing. IEEE Distributed Systems Online(2001) http://www.computer.org/dsonline

