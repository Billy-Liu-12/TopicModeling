The COOLFluiD Framework: Design Solutions
for High Performance Object Oriented Scientific
Computing Software
Andrea Lani1 , Tiago Quintino1,2 , Dries Kimpe2,3 , Herman Deconinck1 ,
Stefan Vandewalle2 , and Stefaan Poedts3
1

3

Von Karman Institute, Aerospace Dept.,
Chaussee de Waterloo 72,
B-1640 Sint-Genesius-Rode, Belgium
2
Catholic University Leuven, Computer Science Dept.,
Celestijnenlaan 200A, B-3001 Leuven, Belgium
Catholic University Leuven, Center for Plasma-Astrophysics,
Celestijnenlaan 200B, B-3001 Leuven, Belgium

Abstract. The numerical simulation of complex physical phenomena is
a challenging endeavor. Software packages developed for such purpose
should combine high performance and extreme ﬂexibility, in order to allow an easy integration of new algorithms, models and functionalities,
without penalizing run-time eﬃciency. COOLFluiD is an object-oriented
framework for multi-physics simulations using multiple numerical methods on unstructured grids, aiming at satisfying these needs. To this end,
speciﬁc design patterns and advanced techniques, combining static and
dynamic polymorphism, have been employed to attain modularity and efﬁciency. Some of the main design and implementation solutions adopted
in COOLFluiD are presented in this paper, in particular the Perspective
and the Method-Command Patterns, used to implement respectively the
physical models and the numerical modules.

1

The COOLFluiD Architecture

COOLFluiD (Computational Object-Oriented Library for Fluid Dynamics) is
a multi-physics and multi-methods platform that combines ﬂexibility and high
performance for the simulation of complex ﬂuid dynamical phenomena on unstructured grids. The package is implemented in C++, which, during the last
decade, has shown a great potential for scientiﬁc applications, oﬀering signiﬁcant
support to develop both ﬂexible and eﬃcient code: Cogito, ELEMD ([Arge97]),
MOUSE, Deal ([OONum]) are only few examples of available C++ platforms.
An overview of the COOLFluiD framework is sketched in Fig. 1. It consists of a kernel, where Simulation, the simulation manager object, and MeshData, the basic data-structure object are implemented. Also the abstract interfaces for all the polymorphic objects are deﬁned in the kernel, in particular the ones for the physics description (PhysicalModel ) and for the numerical
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 279–286, 2005.
c Springer-Verlag Berlin Heidelberg 2005

280

A. Lani et al.
KERNEL

PLUG−INS

SIMULATION

PHYSICAL
MODEL

PHYSICAL
LIBRARY

MESHDATA

NUMERICAL
METHOD

NUMERICAL
LIBRARY

Fig. 1. Simpliﬁed overview of the COOLFluiD framework

methods (e.g., MeshCreator, SpaceMethod, ConvergenceMethod, LinearSystemSolver ). Each concrete numerical method or physical model is enclosed in a
separate plug-in library. This plug-in policy, which provides COOLFluiD with
signiﬁcant modularity and extensibility, relies heavily on two complementary
techniques, namely self-registration and self-conﬁguration of objects, whose basic principles are explained below.
1.1

Self Registration of Objects

The self registration of objects, pioneered by [Bev98] in a C++ context, automatizes the creation of polymorphic objects and reduces implementation and
compilation dependencies. This is of great help in easing the integrability of new
components in the framework, since they can be compiled as external plug-ins
and loaded dynamically, on demand, into the main core application. A generic
polymorphic concrete object (ConcreteObj ) can be registered by simply instantiating the corresponding ObjectProvider in the implementation ﬁle:
ObjectProvider<BaseObj, ConcreteObj> myProvider("objName");
and it can be created by calling the corresponding Factory:
BaseObj* objPtr = Factory<BaseObj>::getProvider("objName")->create();
1.2

Self Configuration of Objects

In COOLFluiD, objects can be self-conﬁgurable, meaning that they can create
and set their own data. The template conﬁguration function was inspired by the
Yagol library [Yagol]. An object is made self conﬁgurable, by deriving it from a
parent class ConﬁgObject and by adding a call to
addConfigOption("OptionKey", &configData);
in its constructor for each conﬁgurable data member conﬁgData. In particular,
OptionKey is the conﬁguration key string, used to map the value of conﬁgData.
We consider, for instance, what would appear in a conﬁguration ﬁle for the RK
(Runge-Kutta) time stepper object:

The COOLFluiD Framework

281

ConvergenceMethod = RK
RK.coeff = 0.28 0.61 1.0
RK is the self-conﬁguration value for the ConvergenceMethod, which is the conﬁguration key for the homonymous polymorphic object. RK is also the selfregistration key for the Runge-Kutta class, that will be then instantiated and will
conﬁgure itself with the three given coeﬃcients, whose conﬁguration key is coeﬀ.
1.3

Parallel Data-Structure

COOLFluiD uses a parallel layer designed to minimize impact on both users
and software developers by exporting a high level platform independent interface. Parallelization is fully transparent and high performance is assured by
techniques like parallel IO and remote memory access, when supported by the
underlying platform. The intrinsically parallel data-structure is encapsulated in
a Facade object [Gamma95], MeshData, whose main component is DataStorage.
The latter oﬀers a simple interface to create and handle generic typed arrays of
data to be shared among diﬀerent numerical Methods and Commands, allowing
to treat uniformly both local and distributed data. When running in parallel, all
MPI calls are encapsulated in an underlying dynamically growing parallel array,
hidden to the clients of DataStorage. The following examples show how to create
and get local (global) data:
getDataStorage()->createData<StorageType>("storageName",
storageSize);
DataHandle<LOCAL, StorageType> myStorage =
getDataStorage()->getData<StorageType>("storageName");

2

Physical Model: Perspective Pattern

The framework is designed to apply diﬀerent numerical methods for the solution
of systems of Partial Diﬀerential Equations, which typically appear in the form:
∂U
+∇·F=S
∂t

(1)

where U (unknown variables), F (convective and viscous ﬂuxes), S (source term)
depend on the chosen physical model. Such a physical model can be seen as a
composition of entities, e.g., coeﬃcients, quantities and thermodynamic properties. Note that one can look at the same physics through diﬀerent formulations
of the equations, involving the use of diﬀerent sets of variables, transformations,
or other adaptations tailored, e.g., towards a particular numerical method.
This logical picture can be translated into an implementation oﬀering multiple views or perspectives for the same physics, according to the speciﬁc needs.
The ﬁrst advantage is that this design approach is able to break a hypothetical
heavy and hard-to-deﬁne interface for the physical model object into a limited

282

A. Lani et al.

PhysicalModel

getNbEquations()
validate()

ConcreteModel

getNbEquations()
validate()
getPhysicalData()
getCoeff()
physicalData
coeff

VariableSet

setEigenValues()
getEigenValues()
splitJacobian()
setJacobian()

MyVariableSet

setEigenValues()
getEigenValues()
splitJacobian()
setJacobian()
concreteModelPtr

VarTransformer

OtherPerspective

setMatrix()

function1()

getMatrix()

function2()

transform()

function3()

MyVarTransformer

MyPerspective

setMatrix()

function1()

getMatrix()

function2()

transform()

function3()

concreteModelPtr

concreteModelPtr

Fig. 2. Perspective pattern applied to a Physical Model module

granularity of independent abstractions. Flexibility and maintainability are positively aﬀected too. If new base Perspectives objects are needed in order to provide
new points of view for the same physics, they can easily be attached without
needing to modify the existing code.
The OMT (Object Modeling Technique) class diagram of the pattern is shown
in Fig. 2. It reﬂects the composition-based Adapter described in [Gamma95], but
it has a single shared Adaptee object (ConcretePhysicalModel), and multiple abstract Targets (called Perspectives here), each one with a number of derived
classes (Adapters). The Perspective pattern is conceptually opposite to the View
Handler presented in [Busch00], since the former helps to tackle a situation in
which the diﬀerent views (and their interfaces) are not all foreseeable a priori,
meaning that it would be impossible to deﬁne both an handler object and a
single abstract view interface, as required by the latter.
Data and functionalities that are typical of a certain physics, but invariant to
all its possible Perspectives, should be implemented in the actual ConcretePhysicalModel object. The base PhysicalModel deﬁnes a very general abstract interface. The concrete one implements the virtual methods of the parent class
and deﬁnes another interface to which the ConcretePerspective objects (and
only those) are statically bound. As a result, a client makes use of the physical model through an abstract layer, enlargeable if required, given by a number
of perspective objects (VariableSets, VariableTransformers, etc.) while all their
collaborations with the concrete physics are completely hidden. As all the other
polymorphic objects in COOLFluiD, also PhysicalModels and Perspectives are
self-registrable and, if needed, self-conﬁgurable.

The COOLFluiD Framework

3

283

Method-Command Pattern

Every numerical module is implemented following a common design structure,
to which we will refer as the Method-Command pattern. It consists of a concrete
Method object delegating tasks to a number of Commands that share a tuple of
multiple receivers. A conﬁgurable BaseMethod object (e.g., SpaceMethod, ConvergenceMethod, MeshCreator) deﬁnes the abstract interface for a speciﬁc type of
Method (Fig. 3). Each ConcreteMethod implements the virtual functions of the
corresponding parent BaseMethod by encapsulating requests for speciﬁc actions
(setup, unsetup, compute something . . . ) in ad-hoc Commands. ConcreteMethod
functions can act as Template Methods [Gamma95] where the hooks are not virtual functions but polymorphic commands. Each Command behaves therefore
as a Strategy object (see [Gamma95]) in performing a speciﬁc task, which can be
accomplished in several diﬀerent ways. All the Commands share some common
data enclosed in ConcreteMethodData, a conﬁgurable tuple typically aggregating the multiple receivers. The latter are polymorphic Strategy or Perspective
objects, providing, e.g., the dynamic binding to the physics.
The ﬂexibility yielded by this structural pattern is considerable and does
not aﬀect performance, since the fast-path code is wrapped inside the concrete
Commands or their receivers. The Method-Command pattern can be viewed as
a sophisticated variant of the Whole-Part pattern described in [Busch00], or as
a three-layer Strategy, where Methods, Commands and command receivers are
completely interchangeable, self registering and self conﬁgurable.
Some applications of the pattern within the COOLFluiD framework will now
be presented, in order to show the high reusability provided by this approach,
but also its suitability to deal with complex numerical problems.

BaseMethod

ConfigObject

action1()

configure()

action2()

ConcreteMethodData

ConcreteMethod

getObjA()
getObjB()
getObjC()

action1()
action2()

Command

execute()
Command

execute()

...
action1−>execute()
...

ObjA

Concrete
ObjA

ObjB

Concrete
ObjB

ObjC

Concrete
ObjC

Action1

execute()
Action2

execute()

Fig. 3. OMT diagram of a Method-Command pattern

284

A. Lani et al.

3.1

Space Method

A SpaceMethod takes care of the spatial discretization of the given set of partial
diﬀerential equations, according to a speciﬁed numerical scheme on a given mesh.
The abstract interface of a SpaceMethod is as follows:
class SpaceMethod : public ConfigObject {
public:
// constructor, destructor, accessors, mutators ...
virtual setup() = 0;
// setup data
virtual unsetup() = 0; // unsetup data
virtual void computeRHS() = 0; // compute residual and jacobian terms
virtual void applyBC() = 0; // apply boundary conditions
};
A possible concrete class is the so-called cell centered FiniteVolume (FV) method:
class CellCenterFVM : public SpaceMethod {
public:
typedef Command<CellCenterFVMData> FVMCom;
// overridden parent virtual functions ...
private:
SharedPtr<CellCenterFVMData> _data; // shared data
std::auto_ptr<FVMCom> _setup;
// setup command
std::auto_ptr<FVMCom> _unSetup; // unsetup command
std::auto_ptr<FVMCom> _compRHS; // compute residual command
std::vector<FVMCom*> _bcs;
// boundary conditions
};
As an example, we present the implementation of the method applyBC() in
CellCenterFVM, which shows how all actions are nicely encapsulated:
void CellCenterFVM::applyBC() {
for_each(_bcs.begin(), _bcs.end(), mem_fun(&FVMCom::execute));
}
As shown in Fig. 4, CellCenterFVMData holds pointers to polymorphic Strategies like FluxSplitter, the ﬂux splitting scheme and PolyRec, the polynomial reconstructor; VarSet, the Perspective encapsulating physical model traits related
to speciﬁc sets of variables, etc.
The implementation of other concrete SpaceMethods, like Residual Distribution
(RD) or Finite Element (FE), follows an identical Method-Command pattern.
3.2

ConvergenceMethod and LinearSystemSolver

Figure 5 shows the collaboration between two abstract methods: Convergence
Method, responsible of the iterative procedure, and LinearSystemSolver.
In this case, an implicit convergence method, BackwardEuler, delegates polymorphically the solution of the resulting linear system to PetscLSS, which interfaces

The COOLFluiD Framework

285

PhysicalModel

SpaceMethod

CellCenterFVM
Data

CellCenterFVM

Concrete
PhysicalModel

Command

Setup

VarSet

Concrete
VarSet

Command

Unsetup

PolyRec

Concrete
PolyRec

Command

Compute
RHS

Flux
Splitter

Concrete
Splitter

Command

BC

Fig. 4. Finite Volume module

Convergence
Method

Backward
Euler

LinearSystem
Solver

Backward
Euler Data

Petsc
LSS Data

PetscLSS

Command

Setup

Setup

Command

Command

Unsetup

Unsetup

Command

Command

Update
Solution

Solve
System

Command

Fig. 5. Backward Euler and Petsc Linear System Solver modules

the PETSc library ([Petsc]). BackwardEuler makes use of commands for the setup,
unsetup and solution update. Also PetscLSS delegates tasks to speciﬁc commands
sharing some data (PetscLSSData), such as references to the (parallel) Petsc matrix and the (parallel) Petsc vectors involved in the solution of the linear system.

4

Conclusions

The ﬂexible and reusable design solutions presented in this paper have allowed an
easy integration of several components in COOLFluiD: explicit (Runge-Kutta)
and implicit (Newton, Crank-Nicholson) time stepping, diﬀerent spatial discretizations (FV, RD, Space-Time RD, FE), diﬀerent physical models (Euler,
compressible Navier-Stokes, Magneto Hydro Dynamics), a parallel ﬂexible data-

286

A. Lani et al.

Fig. 6. Mach contours and isolines for an Euler simulation with blended LDA/N scheme
(left) and 2nd order Roe scheme with Barth limiter (right) on a Falcon airplane (mesh
courtesly provided by Dassault Aviation)

structure supporting the use of hybrid meshes, etc. The implementation of many
other functionalities is underway: Aero-Thermo-Chemical models, incompressible Multi-Phase ﬂows, error estimation, mesh movement and adaptation.
Fig. 6 shows the result of a simulation of the Euler gas dynamics equations
over a Falcon airplane geometry, ﬂying at Mach 0.85, with two diﬀerent high
order spatial discretizations, namely cell vertex RD and cell centered FV.

Acknowledgments
T. Quintino acknowledges the ﬁnancial support of Funda´cao Ciencia e Tecnologia.

References
[Bev98]

Beveridge, J.: Self-Registering Objects in C++. Dr. Dobb´s Journal,
8/1998.
[Gamma95] Gamma, E., Helm, R. Johnson, R., Vlissides, J.: Design Patterns. Elements of Reusable Object-Oriented Software. Addison Wesley, 1995.
[Busch00]
Buschmann, F., Meunier, R. Rohnert, H., Sommerlad, P., Stal, M.:
Pattern-Oriented Software architecture. A System of Patterns. Wiley,
2000.
[Arge97]
Arge, E., Bruaset, A. M. , Langtangen, H. P. eds.: Modern Software Tools
for Scientiﬁc Computing, Birkh¨
auser, 1997.
[OONum]
Open Systems Laboratory: The Object-Oriented Numerics Page,
http://www.oonumerics.org/oon/, 2005.
[Yagol]
Pace, J.: Another Getopt Library, http://yagol.sourceforge.net, 2003.
[Petsc]
Argonne National Laboratory: PETSc. Portable, Extensible Toolkit for
Scientiﬁc Computation, http://www-unix.mcs.anl.gov/petsc, 2004.

