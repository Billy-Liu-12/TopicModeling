Spline Surface Intersections Optimized for GPUs
Sverre Briseid1 , Tor Dokken1,2 , Trond Runar Hagen1,2 ,
and Jens Olav Nygaard1
1

SINTEF, Dept. of Applied Math., P.O. Box 124 Blindern, N-0314 Oslo, Norway
Centre of Mathematics for Applications (CMA), University of Oslo, Norway
{sbr, tdo, trr, jnygaard}@sintef.no
http://www.sintef.no/gpgpu

2

Abstract. A commodity-type graphics card with its graphics processing unit (GPU) is used to detect, compute and visualize the intersection
of two spline surfaces, or the self-intersection of a single spline surface.
The parallelism of the GPU facilitates fast and eﬃcient subdivision and
bounding box testing of smaller spline patches and their corresponding
normal subpatches. This subdivision and testing is iterated until a prescribed level of accuracy is reached, after which results are returned to
the main computer. We observe speedups up to 17 times relative to a
contemporary 64 bit CPU.

1

Introduction

We can divide most surface intersections into three categories: 1) self-intersections for which the normal degenerates to zero length, 2) self-intersections
for which this does not happen, and 3) intersections between two surfaces, resulting in an intersection curve, see Figure 1. There are a number of other kinds
of intersections, more or less degenerate, like intersections in points, intersections
with coincident parts of the surface(s), etc. See [5] for more information about
intersections.
Detecting and ﬁnding intersections is particularly important in all computer
aided design (CAD) systems, as well as in numerous other applications. In CAD
systems, geometries are traditionally represented with the help of spline surfaces
and spline curves. For an introduction to splines, see e.g., [2]. With the advent of
fast and programmable GPUs oﬀering 32 bit ﬂoating point precision, a natural
course of action is to use the GPU for such geometric computations.
F

S2
P

F

S

S1
P

P2
P1

S

Fig. 1. From the left, a self-intersection with degenerate normals (a), a self-intersection
with no degenerate normals (b) and an intersection of two surfaces resulting in a well
deﬁned intersection curve (c)
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 204–211, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Spline Surface Intersections Optimized for GPUs

205

The main limitations of the GPU are the single precision arithmetics, the
limited inter-process communication, and the bottleneck in the passing of results
back to the main computer from the graphics card. By adapting our algorithms
to the GPU, we have maneuvered around these obstacles. The processing of
geometry on the GPU is not farfetched, since the GPU is designed not only to
render geometry, but also to some degree process it, even though this is focused
around the processing of triangles.

2

Background

Current CAD-technology is built on the STEP-standard (ISO 10303) from the
early 1990s, and is consequently based on the computer performance at that
time. Volume objects in CAD are described by the outer and possibly inner shells
limiting the volume. A shell is described by a surface patchwork. Degree 1 and 2
algebraic surfaces, i.e., planes, spheres, cones and cylinders are central in CADsystems. More complex sculptured shapes are represented by piecewise rational
parametric surfaces using non-uniform rational B-spline surfaces (NURBS).
Closed forms can be found for the intersection of surfaces of algebraic degrees
1 and 2. However, for intersections of surfaces of higher algebraic degree, numerical methods have to be used. CAD surface intersection until recently only
worked well for transversal intersections, where the normals of the surfaces are
non-parallel along the intersection curve [9]. If the normal ﬁelds of two surfaces
do not intersect then Sinha’s theorem [7] states that the surfaces do not have a
closed intersection loop. Thus recursive subdivision can be used to create subsurfaces in regions with potential closed intersection loops and detect these (loop
destruction) [8]. For singular intersections where the surface normals are parallel along the intersection curve the theorem does not apply. For near singular
intersections where the surface normals are near parallel along the intersection
curve, the theorem often does not help much, as normal ﬁelds are in general
approximated before overlap is tested [3, 6].
To better solve the singular and near singular surface intersection problems,
as well as attempt to solve the surface self-intersection challenge, the idea of
approximate implicitization was introduced [1]. In the EU IST FET-Open GAIA
projects (2000-2005) surface intersection and self-intersection algorithms were
developed following these ideas. However, performance of these new combined
recursive and approximate implicit intersection algorithms is not as good as
required for industrial use. Thus the idea was born to use the GPU for ”naive”
extensive subdivision to establish guaranteed intersection conjectures that can
guide the recursion strategy used in the CPU-based algorithms.

3

Numerical Methods and Implementation on the GPU

Given a spline surface, it can contain any number and combination of the intersections in Figure 1. If we ﬁnd an intersection in a subpart of the surface, this
does not exclude other intersections in the same subpart. We will now discuss

206

S. Briseid et al.
A

Start with a Bezier patch
F

B

yes

Subdivide given patch into
patchwork of smaller subpatches

H

Further checking for
self−intersections?

For each subpatch, apply this
algorithm, to sort all
subpatches into two subsets:

no

Continue with (pairwise) checking
for "ordinary" intersections

Proceed when subset has
been fully populated

C
Does the normal−subpatch
contain degeneracies?

yes

G

This subpatch may contain a
self−intersection, and possibly
intersection(s) with other
subpatches

no
D
Does the normal−cone span
more than pi?

yes
I

For all subpatches, make bounding
boxes, then test all pairs of non−adjacent
subpatches. For adjacent subpatches, we
test on the sum of normal cone widths.

no
E

J

Accumulate subpatch in subpatch−set
to be checked for "ordinary"
intersections

When all subpatches are placed in their
appropriate set, continue with either further
self−intersection detection, or testing for other
intersections:

For a given subpatch, do
the tests outlined in box I
above make an intersection
possible for this subpatch?

L
no

This
subpatch does not
contain an intersection
of interest

yes
K

The set of remaining subpatches may
contain some sort of intersection

Fig. 2. The ﬂowchart describing the processing of a Bezier-patch. Note that in stages
C and D, subpatches can be processed in parallel, and that subpatches are collected
in sets in E, G and H. In J, pairs of subpatches are processed in parallel, while sets of
subpatches again are accumulated in K and L. Finally, any resulting subpatch in these
sets may be further subdivided in A, and the procedure repeated.

how to ﬁnd the various kinds of intersections, with reference to the schematic
ﬂowchart in Figure 2.
3.1

Splines and Spline Surfaces

One special case of a spline surface is the Bezier patch. A Bezier patch of degree d, or order k = d+1, is a linear combination of k 2 basis functions, and can
therefore be represented by a k×k matrix of coeﬃcients. A larger spline surface
can be subdivided into a set of Bezier patches, each of which can be further
subdivided. The coeﬃcient matrix for a patchwork of Bezier patches is a matrix
of independent k × k sub-matrices of coeﬃcients, which makes Bezier patches
convenient building blocks in our spline-based GPU-algorithms.
Since we are interested in 3D surfaces, our spline surfaces will have 3D coeﬃcients, or if we use rational spline surfaces (NURBS) 4D coeﬃcients. In this
paper, we focus on non-rational splines, but we note that in both cases the
coeﬃcients ﬁt nicely into the RGBA-quadruples of GPU fragments.

Spline Surface Intersections Optimized for GPUs

3.2

207

Knot Insertion and Subdivision
p

We have a spline surface S(u, v) = i,j=1 ci,j Ni (u)Nj (v) = (N T CN )(u, v), of
degree d, where N T = (N1 (·), . . . , Np (·)) consists of p B-spline functions and C
is a p × p matrix of 3D coeﬃcients. By giving all knots multiplicity k by knot
insertion, we get a set of Bezier subpatches describing the same surface. For
simplicity, and without loss of generalization, we use the same knot vectors for
the two directions, resulting in the new representation
T

¯ DN
¯ )(u, v),
S(u, v) = (N T CN )(u, v) = (N

(1)

where the new coeﬃcients D are given by D = ACAT , and we have the relation
¯ between the new and old basis functions N
¯ and N . Here, A is the
N = AN
knot insertion matrix corresponding to the insertion of the new knots. For more
on splines and knot insertion, see again [2].
For S itself a Bezier patch, we would typically subdivide it into 22n new
Bezier subpatches, by splitting the original knot vector interval into 2n subintervals. We compute the accompanying knot insertion matrix A on the CPU
and pass it on as a texture together with C to the GPU. The computation of
the new coeﬃcient matrix D can then be done eﬃciently on the GPU using two
passes for the two matrix multiplications in D = (AC)AT . Notice that only the
second of these multiplications, AC multiplied with AT , really does gain from
the eﬃciency of the GPU, since the ﬁrst multiplication only results in a matrix
with order O(2n ) coeﬃcients, while the latter produces O(22n ) coeﬃcients. These
shaders are quite simple, and have good “arithmetic to texture fetch” ratios for
our cubic 3D Bezier patches.
We then test each of the subpatches for self-intersections and/or pairs of them
for intersections and discard subpatches without any possible (self-)intersections.
This whole procedure can then be iterated. The result is a set of small patches
which may contain intersections. These can be used as a starting point for more
traditional intersection algorithms which are better suited for the CPU, or used
directly for visualization. A subset of the three kinds of intersections may be
computed by breaking oﬀ proper parts of the algorithm in Figure 2.
3.3

Bounding Box Tests

We look for intersections (not self-intersections) by subdividing patches and
discarding subpatches that do not have rectangular bounding boxes that overlap
any other than those of their neighbours. Note that the convex hull property for
splines implies that the subpatches are contained in these boxes. This does not
guarantee an intersection in the remaining subpatches, but we will never discard
subpatches wrongly.
To avoid making an assumption about adjacent subpatches (in the parameter
domain) not intersecting each other even though their bounding boxes always
will, we do not use the bounding box test on such pairs, but instead compare
the sum of their normal cone widths to π. The normal cone is a bounding box

208

S. Briseid et al.

α

Fig. 3. From the left, a) a Bezier patch with normals indicated, b) the normals collected, and c) the normal cone with the angle/width α indicated

for the normals of a subpatch, speciﬁed as a direction and an angle, as shown in
Figure 3. If the sum is smaller than π, the adjacent subpatches cannot intersect.
(See Figure 2, boxes I and J.)
If we subdivide a Bezier patch into 2n × 2n subpatches, we get 24n ordered
pairs of subpatches, including both subpatches paired to themselves and pairs
of neighbouring subpatches. Given the subpatches organized in a 2n k ×2n k coeﬃcient matrix, as produced by the knot insertion of Section 3.2, we can easily
form two matrices of size 2n×2n containing two opposite corners of the bounding
boxes of the subpatches, on the GPU.
To compute the bounding boxes, we use the depth buﬀer to implement a
fast maximum and minimum operator to be applied to all coeﬃcients of all the
subpatches. The bounding boxes are represented as two 2n×2n textures, that are
afterward treated as 1D textures of length 22n . These are then used to form the
tensor product of all pairs, and a new texture of size 22n×22n is used to store the
boolean results of all the bounding box tests. Since this matrix is symmetric, we
can eliminate half of the tests by rendering a triangle rather than a quad when
running the corresponding shader on the GPU.
3.4

Self-intersection Tests

The subpatches making out the full Bezier patch can be independently checked
for self-intersections. We do this by checking for degenerate, or “close to degenerate” normals, and checking the width of the normal cone.
Degenerate Normals. If we take a smooth surface without any intersections,
and pull a part far away from any edges out and fold it back into itself, we get a
self-intersecting surface as shown in Figure 1a. Here, a fold F with the darkened
underside of patch P is shown. In the two intersection points S1 and S2 we have
degenerate normals. Note that on the sides of the protruding fold F we also
have intersections like those in Figure 1b and 1c, in which the normals are not
degenerate.
To test for degenerate normals, we form the normal surface of the patch, and
subdivide this like the patch itself. The only diﬀerence is that if the surface patch
has degree d, the normal surface will have degree 2d−1. From each subpatch of
the normal surface, we ﬁnd a bounding box for the coeﬃcients, thus getting a
bounding box for the normals. If this bounding box does not contain the origin

Spline Surface Intersections Optimized for GPUs

209

(given some tolerance) the corresponding surface subpatch cannot contain any
degenerate normal, and we can dismiss the subpatch as not having this particular
kind of self-intersection. This corresponds to the test C in Figure 2.
We compute the normal surface of the d-degree Bezier patch on the CPU, and
subdivide it on the GPU as described above in Section 3.2. Since the degree is
2d−1 we cannot use exactly the same shaders as for the Bezier patch itself, as
we do not want the degree to be a variable. Rather, we use specialized shaders
for each degree, but the algorithm is the same.
The test of degeneracy is then applied to this hull of all the subpatches,
i.e., all the coeﬃcients of the normal subpatches are compared to a speciﬁed
small tolerance. This will result in a large matrix of boolean values, which can
then be treated according to how we use it for speciﬁc applications. If further
subdivison is to be performed, we can remove the irrelevant subpatches, and
start the iteration again on the remaining subpatches. Or these can be returned
to the CPU. A third use is to simply detect whether any of the normals at all
are degenerate, this can be done very quickly with occlusion culling techniques.
Normal Cone Tests. Note that if the subpatch is to contain any self-intersections, we must have a normal cone with width greater than π. This test
corresponds to the one depicted as test D in the algorithm in Figure 2.
For these tests we make approximate normal cones that are not as “tight” as
they could be, but faster to construct on the GPU. We average the coeﬃcients
of the normal subpatches, i.e., the subdivided normal patches, for the direction
of the cones. The width of each cone is computed as the maximal deviation from
this average to all normals on the subpatch. This is accomplished by iterating a
very simple shader, in eﬀect averaging, or blending, triples (the directions) and
storing the largest angle.
3.5

Tying It Together

In Sections 3.1 to 3.4, we have seen how we take a spline surface as input, subdivide it into a larger set of Bezier subpatches, and perform tests on subpatches
and pairs of such to determine whether certain intersections can be present.
Depending on what tests we want to perform, we may adapt the algorithm in
Figure 2 to our purpose. If we are interested in, e.g., only self-intersections of
the kind producing degenerate normals, we iterate the sub-loop ABCGF . If we
are interested in not only detecting the presence of self-intersections for which
the normals do not disappear, but also ﬁnding them, we must follow a path in
the ﬂowchart ending in either E or H, followed by the subpatch-pair testing
J, resulting in a set of patches in K that may contain intersections. Further
processing of this set can be done either on the CPU, or the subpatches can be
subdivided by iterating the algorithm from the top again. In the latter case, the
currently slow returning of larger amounts of data from the GPU to the CPU
can be avoided, the cost being that one must instead remove the uninteresting subpatches from the pool of such subpatches on the GPU. The authors are
currently working on such an addition, following the ideas in [4].

210

4

S. Briseid et al.

Results and Conclusions

We have made use of the GPU to do computations that it was not primarily
designed for. This means that the algorithms chosen are somewhat diﬀerent from
what have been used so far on more general computers, for the same purposes.
To ﬁt the GPU architecture, the algorithm has been made less adaptive and
more “brute force” than would be natural for a pure-CPU intersection algorithm.
For comparison, we have made C-code that mimics the GPU-algorithm. This
may seem to favor the GPU over the CPU, but the eﬀect is lessened by the fact
that our GPU-algorithm will be even more eﬃcient when combined with proper
controlling CPU-based code. Such code will add more adaptivity to the GPUalgorithm. Work is in progress to implement a CPU+GPU-based module that
Table 1. Timings in seconds for a selection of sizes n. For small n, computational
overhead is signiﬁcant, but we see convergence in the speedup factor quickly after.
This also testiﬁes to the scalability of the algorithm and code.
n
4
5
6
7
8

GPU
7.456e-03
1.138e-02
7.271e-02
9.573e-01
1.515e01

CPU
6.831e-03
7.330e-02
1.043e00
1.607e01
2.555e02

Speedup factor
0.9
6.4
14.3
16.8
16.9

Fig. 4. A cubic Bezier patch with one corner pulled through itself, to create a (transversal) self-intersection. This also creates a crease in the surface, a region with high curvature. If the corner was pulled even more, this fold would produce a self-intersection
with degenerate normals. As it is, the normals are only “near degenerate”, and the region (darkened) has been detected by our GPU code, given a suﬃciently high tolerance
for “degeneracy”. To the left, the Bezier patch, to the right, the corresponding normal
surface, where the near degenerate normals appear as a region around the origin.

Spline Surface Intersections Optimized for GPUs

211

can be substituted for a corresponding purely CPU-based module in a widely
used CAD system, giving us an even better test bed.
On an NVIDIA GeForce 7800GT graphics card, we have tested the subdivision
of cubic Bezier patches into 2n ×2n subpatches, followed by tests for degenerate
normals, subdivision of the quintic normal patch into the same number of normal
subpatches, computation of the approximate normal cones, the bounding boxes,
and ﬁnally the bounding box pair intersections. The CPU-version (C-code) was
run on an AMD X2 4400+ without threading, and is compiled with the GNU gcc
compiler with optimization -O2. Tests with -O3, -march=k8, -mfpmath=sse,387
and -ffast-math did not produce signiﬁcantly diﬀerent timings. Explicit vector
instructions are not used. The corresponding times are listed in Table 1. An
illustration of the detection of near degenerate normals in a near-self-intersection
situation is shown in Figure 4.

References
1. Dokken T., Aspect of Intersection algorithms and Approximation, Thesis for the
doctor philosophias degree, University of Oslo, Norway, 1997, 52-105.
2. Farin, G.: Curves and surfaces for CAGD: a practical guide. Morgan Kaufmann
Publishers Inc. San Francisco, CA, USA (2002)
3. Hohmeyer, M. E., Robust and Eﬃcient Surface Intersection for Solid Modelling,
Report No. UCB/CSD 92/681, Computer Science Division, University of California,
(1992).
4. Horn, D.: Stream Reduction Operations for GPGPU Applications, in GPUGems
2 : Programming Techniques for High-Performance Graphics and General-Purpose
Computation, Addison-Wesley, (2005) 573–587
5. Patrikalakis, N.M.: Shape Interrogation for Computer Aided Design and Manufacturing. Springer-Verlag New York, Inc. Secaucus, NJ, USA (2002)
6. Sederberg, T.W. and A.K. Zundel, Pyramides that bound surface patches. CVGIP:
Graphics Models and Image Processing, (1996), 75-81.
7. Sinha, P., E. Klassen and K.K. Wang, Exploiting topological and geometric properties for selective subdivision. In ACM Symposium on Computational Geometry,
ACM Press, (1985), 39-45.
8. Skytt, V., A recursive approach to surface-surface intersection, in Mathematical
Methods for Curves and Surfaces: Tromsø 2004 , M. Dæhlen, K. Mørken, and L. L.
Schumaker (eds.), Nashboro Press, Brentwood, (2005), 327˘
2014338.
9. Skytt, V., Challenges in surface-surface intersections, in Computational Methods for
Algebraic Spline Surfaces (COMPASS), T. Dokken and B. J¨
uttler (eds), Springer,
(2004), 11-26.

