Framework for Workﬂow Parallel Execution in
Grid Environment
Lican Huang
Institute of Network & Distributed Computing,
Zhejiang Sci-Tech University,
Hangzhou,P.R.China
Ministry’s intelligent virtual research center, Zhejiang University
{huang lican@}@yahoo.co.uk

Abstract. This paper presents a framework for Web Service based workﬂow optimisation in Grid environment. In this framework, parallel service
is introduced as adaptor and container of parallel block of workﬂow. In
parallel service, workﬂow is divided into multi sub-workﬂows, which are
dispatched and executed in parallel at diﬀerent workﬂow engines in different grid nodes. By this strategy, the performance of workﬂow can be
enhanced greatly. In this paper, we also give a strategy how to guarantee
the correctness in complicated network environment by redundant computing.
Keywords: workﬂow optimisation,Grid, e-Science,workﬂow Parallelization.

1

Introduction

Web service technologies are widely used in industry and research institutes.
This brings in a variety of Web service composition languages and a variety
of workﬂow engines available, some of which implement the same description
language, but diﬀer in their conﬁguration, speciﬁc deployment description, and
performance[1]. Grid[2] aims to solve resource and information sharing problems
between virtual organizations. A variety of workﬂow management systems for
Grid computing have been reported in literature. These range from portal-based
interface for users to connect components together, to complete systems that
allow composition and deployment of a set of services. Often these systems are
categorized as being a Problem Solving Environment(PSE)[3]. In many ways,
a PSE is seen as a mechanism to integrate diﬀerent software construction and
management tools and application speciﬁc libraries, within a particular problem
domain. Often PSE and Grid Computing Environment are interchangeable – as
PSE research predates the existence of Grid infrastructure. A key element within
a PSE is therefore the provision of a workﬂow engine that enables a set of services
(provided by one or more scientist) to be executed, in the context of a particular
application. Workﬂow in PSE often is called as scientiﬁc workﬂow[4]. Scientiﬁc
workﬂow is the workﬂow technology used by scientists to access and analyze
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 228–235, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Framework for Workﬂow Parallel Execution in Grid Environment

229

data in scientiﬁc research. Scientiﬁc workﬂow often requires support for large
data volumes, high throughput computation or high performance computation.
Scientiﬁc workﬂow usually takes long time to execute, from several hours to
several months. Therefore, scientiﬁc workﬂow optimisation is an important issue.
There are several kinds of workﬂow optimisation: Static optimisation by re-order of
workﬂow[5], Dynamic optimisation by selecting optimal service from multi semantic Web Services based on machine’s status such as CPU speed, CPU load monitored just before the service is executed[6] and Workﬂow parallelization by dividing
workﬂow into sub workﬂows which are executed in multi workﬂow engines.
Workﬂow parallelization for optimisation in Grid environment is a challenge issue. We need to discover the optimal workﬂow engines to execute sub-workﬂows.
The workﬂow engines are diﬀer in workﬂow languages, conﬁguration, autodeployment, etc. And the performance of workﬂow engines are diﬀer in the quality and workload of host machines at the pre-execution point. We also need to
solve fault-resistance in the complex network environment.
We present a framework for workﬂow optimisation in Grid environment. The
discovery of suitable workﬂow engines is based on domain speciﬁc P2P - VIRGO
[7], which is hybrid of structural and un-structural P2P technologies. We use
parallel service as a container of sub workﬂows, which contains workﬂow parallelization, workﬂow engine discovery,dispatcher of sub workﬂows, collector of
sub results, and integration of sub results into ﬁnal result. The fault-resistance
is solved by executing multi copies of sub-workﬂows in Grid environment.
The structure of this paper is as follows: Section 2 describes framework for
workﬂow parallel execution in Grid environment; Section 3 presents implementation of prototype; and ﬁnally we give conclusions.

2

Framework for Workﬂow Parallel Execution in Grid
Environment

In the workﬂow applications, the parallel blocks are re-written as parallel service
as Figure 1 shows. Parallel service serves as adaptor and container of parallel
block in workﬂow script. The script describing workﬂow block and parameters
of the block are input into parallel service as parameters. After sub workﬂows
are dispatched and executed in multi workﬂow engines, the results are collected
and integrated into ﬁnal result, and output as parameters into the successive
Web service in the workﬂow script.
The parallel service contains workﬂow parallelization, workﬂow engine discovery, dispatcher,collector,and integrator shown in Figure 2. Workﬂow parallelization parallelizes the parallel block of workﬂow into multi blocks of sub
workﬂows, which can be auto-deployed and executed in workﬂow engines. Workﬂow engine discovery discovers suitable workﬂow engines, which are active,
support for corresponding workﬂow languages and lightweight workload, etc.
Dispatcher dispatches sub workﬂows into multi Grid nodes which host workﬂow
engines. Collector collects the results sent by the Grid nodes which have executed
these sub workﬂows. Integrator integrates these results into a whole.

230

L. Huang

Fig. 1. workﬂow parallelization

Fig. 2. The components of parallel service

Figure 3 shows the sequence of the framework of workﬂow parallel execution.
The parallel blocks of workﬂow are transformed into parallel services in the
workﬂow scripts at design time. Then the scripts are deployed. When client
invokes workﬂow engine, the workﬂow engine will invoke services according to
the script. When it encounters the parallel blocks, the engine will invoke parallel
service. The parallel service ﬁrst divides the parallel block into several sequential
sub workﬂow scripts. Then, the parallel service discovers the suitable workﬂow
engines, and then dispatches these sub workﬂow scripts into the Grid nodes
which host the suitable workﬂow engines. After that, the parallel service collects
the executed results by the Grid nodes and integrates these results into a whole.
Finally, the parallel service sends the result to the workﬂow engine.

Framework for Workﬂow Parallel Execution in Grid Environment

231

Fig. 3. The sequence of workﬂow parallelization

2.1

Workﬂow Parallelization

This module parallelizes workﬂow as multi sub workﬂow blocks. As Figure 1
shows, the block of workﬂow is parallelized as six sub blocks. This module also
adds input and output parameters into sub workﬂow scripts. It concerns about
analysis of workﬂow dependence graph. It may involve with the strategies for
parallelism at multiple levels of workﬂow granularities in order to optimize workﬂow execution[8].
2.2

Workﬂow Engine Discovery

In the cluster of workﬂow engines, to ﬁnd out the most suitable engine for a speciﬁc task is an important issue. Workﬂow engines are diﬀerent in workﬂow languages, in the vendors and in performance, etc. The process of workﬂow engine
discoverer is as follows: When workﬂow engine discoverer discovers the locations
of workﬂow engines according to properties of required workﬂow engines (see
Table 1) such as supported workﬂow languages, auto-deploy,operation system of
hosts, etc., the host machines will invoke the processes of Ganglia[9] to get their
performance data such as host workload, CPU speed, etc. Then workﬂow engine
discoverer will collect information of suitable workﬂow engines which lists the
locations, language, performance, availability, active time, failure frequency and
so on for workﬂow engines. These workﬂow engines are optimally re-ordered by

232

L. Huang

their performance data. Finally dispatcher of parallel service will dispatch the
workﬂow sub blocks into those suitable workﬂow engines by the rule that the
workﬂow sub blocks are dispatched into those optimal workﬂow engines.
Table 1 shows some terminologies about workﬂow engine.
Table 1. Workﬂow engine description terminologies
workﬂow language
workﬂow engine
workﬂow engine stability
whether workﬂow engine is auto-deployed?
performance of workﬂow engine
host performance
Operation system of workﬂow engine host
etc.

Compared with discovering Web services with UDDI, there are no existed
standards to discover the workﬂow engines. We here use VIRGO P2P network
to discover workﬂow engines. VIRGO is a domain-related hierarchical structure
hybriding un-structural P2P and structural P2P technology. VIRGO consists of
prerequisite virtual group tree, and connections cached by least-recently used and
minimum distance replacement strategies. The workﬂow properties are published
into the nodes of VIRGO network which are the hosts of the workﬂow engines.
The workﬂow engines are classiﬁed as domain catalogues. The nodes containing
workﬂow engines join VIRGO network as the same domains as the classiﬁcations of workﬂow engines. The discovery of workﬂow engine uses VIRGO lookup
protocol[7][10] to ﬁnd the suitable workﬂow engines. The main advantage using
VIRGO based distributed workﬂow engines discovery are that all hosts of suitable workﬂow engines can concurrently get performance data by Ganglia and
the discovery is eﬀective when there are a large amount of Grid nodes.
2.3

Dispatcher

When workﬂow parallelization has divided workﬂow into many sub workﬂows,
the dispatcher dispatches these sub workﬂows to the suitable workﬂow engines.
The suitable workﬂow engines are chosen based on the strategies as following:
1. sub workﬂows are dispatched into diﬀerent workﬂow engines.
2. the workﬂow engines which host many Web services of sub workﬂow prefer
to those which invoke Web service remotely.
3. the highest performance of workﬂow engines are preferred to be chosen. The
workload, CPU speed, etc of workﬂow engines are obtained by monitor such as
Ganglia.
4. the key sub workﬂows are dispatched into several copies of workﬂow engines
to solve the fault-resistance problems.

Framework for Workﬂow Parallel Execution in Grid Environment

2.4

233

Collector

After dispatcher dispatched sub workﬂows to the workﬂow engines, and all workﬂow engines deployed and executed these sub workﬂows, the collector will receive
the results sent by the sender of those workﬂow engines.
2.5

Integrator

When all results are collected by collector, the integrator will integrate the results
into a whole. It will produce the parameters of output as the input parameters
of the successor Web services.

3

Implementation of Prototype

We have implemented the prototype of parallel service. The parallel service is
a standard Web service taking as adaptor of parallel blocks of workﬂow. We
use XML document to represent the parallel block of workﬂow. In this XML
document, the script of workﬂow block and the output interfaces of parameters
are described.
We have implemented two classes –MasterNode, which dispatches subworkﬂow
, and ExecuteNode, which executes subworkﬂow.
Class MasterMode includes functions of parallelization, which divides parallel
block into subworkﬂows, discoveryWorkﬂowEngine, which discovers the optimal
workﬂow enignes, Dispather, which dispatches subworkﬂows into the optimal
workﬂow engines, Collector, which collects the results from workﬂow engines,
and Integrater, which integrates the results into the whole result.
Class ExecuteNode includes functions of Receiver, which receives the message
containing subworkﬂow script from Master Node , deployer, which automatically
deploys the subworkﬂow script in workﬂow engine, Executer, which invokes subworkﬂow and get the result, and Sender, which sends the result to Master Node.
The following is pseudo code of parallelServiceProxy service:
public String[]parallelServiceProxy(String
XMLparallelXML,String[]parameters)
{
subworkflowList =
masternode.parallelization(XMLparallelXML,parameters);
workflowEngines =
masternode.discoveryWorkflowEngine(XMLparallelXML);
masternode.Dispatcher(subworkflowList, workflowEngines);
collectResults= masternode.Collector( message);
results = masternode.Integrater(collectResults );
return results;
}

234

L. Huang

In the above, discoveryWorkﬂowEngine has following pseudo code:
public String[] discoveryWorkflowEngine( String XMLparallelXML )
{
WorkflowEngineMeta = parse(XMLparallelXML);
Send WorkflowEngineMeta to virgo-lookup protocol;
workflowEnginesXML = get_response_of_virgo-lookup;
workflowEnginesList=DecisionWorkflowEnigne(workflowEnginesXML);
/*re-order optimally workflow engines by performance data*/
return workflowEnginesList;
}
The pseudo code of Receiver in Execute Node is as following:
public void Receiver(Message msg)
{
subworkflowscript = parse_workflowscript(msg);
parameters = parse_paremeters(msg);
WebServiceURL = deployer(subworkflowscript,parameters);
result = Executer(WebServiceURL);
msg = modifyMessage(result);
Sender(msg) to Master Node;
}
Every host machine of workﬂow engine installed virgo software. The functions
of discoveryWorkﬂowEngine, Dispatcher and Collector in MasterNode class and
functions of Receiver,Sender in ExecuteNode use virgo socket port to send and
receive messages. The VIRGO node uses Tomcat as Web Server and Axis as Web
service container. Every node implements Lookup protocol and VIRGO structure maintenance, and matchmaker and Register for Web Service and workﬂow
engine. The messages are XML formed. The message type in the message is used
to distinguish kinds of messages and indicates how to handle these messages.
We use BPEL4WS as experimental workﬂow language and Activebpel as
workﬂow engines. The operation system for host machines of workﬂow engine is
Linux. We have used simple example to do the experiments.

4

Conclusions

We have presented a framework for workﬂow parallel execution for workﬂow
optimisation in Grid environment. In this framework, parallel workﬂow block is
divided into multi sub-workﬂows, which are dispatched and executed in parallel
at diﬀerent workﬂow engines in diﬀerent grid nodes. We also give a strategy how
to guarantee the correctness in complicated network environment by redundant
computing. We use parallel service as adaptor and container of parallel block
of workﬂow. We insert parallel services into workﬂow script at design time as
agents which execute multi sub workﬂows in parallel. Workﬂow engine discovery

Framework for Workﬂow Parallel Execution in Grid Environment

235

is based on VIRGO protocol to eﬀectively ﬁnd suitable workﬂow engines. We
also implemented the prototype of the framework. In the near future, we will
use a real optimal workﬂow example from Bioinformatics to demonstrate the
enhance eﬀectiveness of Research via the strategy presented in this paper.

Acknowledgments
This paper is supported by Research Funds of Zhejiang Sci-Tech Univeristy
(No:0604229). Author also thanks anonymous reviewers for their comments to
modify the paper.

References
1. L. Huang, D. W. Walker, O. F. Rana and Y. Huang, ”Dynamic Invocation, Optimisation and Interoperation of Service-oriented Workﬂow”, CCGRID2005 WIP
section, Cardiﬀ 2005
2. I. Foster, and C. Kesselman, ”Globus: A Metacomputing Infrastructure Toolkit”,
International Journal of Supercomputer Applications, 11(2): 115-128, 1997
3. O. Bunin, Y. Guo, and J. Darlington, ”Design of Problem-Solving Environment
for Contingent Claim Valuation”, Proceedings of EuroPar, LNCS 2150, Springer
Verlag, 2001
4. Bertram Ludascher, et.al, ”Scientiﬁc workﬂow management and the Kepler system:
Research Articles”, Concurrency and Computation: Practice & Experience, 18(10):
1039 - 1065 , 2006
5. Yash Patel, Andrew Stephrn McGough and John Darlington, ”Grid Workﬂow Scheduling In WOSE”, UK e-Science Programme All Hands Meeting 2006
(AHM2006)
6. L. Huang, D. W. Walker, Y. Huang and O. F. Rana , ”Dynamic Web Services Selection for Workﬂow Optimization”, UK e-Science Programme All Hands Meeting
2005 (AHM2005)
7. L. Huang, ”VIRGO: Virtual Hierarchical Overlay Network for Scalable Grid Computing”, Proc. European Grid Conference (EGC2005), in LNCS 3470, pp911-921,
February 14-16, 2005, Amsterdam, Netherlands
8. Michael J Pan and Arthur W Toga, ”Multi-granularity parallelization for scientiﬁc
workﬂow management”, http://www.loni.ucla.edu/twiki/pub/Pipeline/ ResearchPublications/parallelStrategies.pdf
9. Ganglia, 2006 http://ganglia.sourceforge.net/
10. L. Huang, ”A P2P service discovery strategy based on content catalogues”, the
20th CODATA International Conference, Beijing, China, 23-25 October

