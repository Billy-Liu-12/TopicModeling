Data Storage and Compression in Real-time Database
Hong An Wang, Hong Jin, Qiang Wang and Guo Zhong Dai
Intelligent Engineering Lab, Institute of Software,
Chinese Academy of Sciences, Beijing 100080, P. R. China
hjin@ihw.com.cn
wha99@sina.com

Abstract. In the development of the real-time database, the processing, storing
and compressing of real-time data are important. How to store with high
efficiency and speediness is discussed in this paper. In the developing of our
real-time database system (Agilor), the object-oriented storing manner is
adopted, a modified swinging door compression method is presented and datasmoothing technology is used to control the influence of the measurement
noise.
Keywords. Real-time database, Data storage, Data compression, Data
smoothing, Object-oriented, Process industry

1 Introduction
In recent decades of years, many researchers carried through in-depth investigation on
real-time database technology and real-time data management [1][2][3][4]. In the
control area of process industry, real-time database products [5], such as PI of OSI
Software, Inc. and InfoPlus of Aspen Technology Inc., are all more representative.
In the system structure of Chinese process industry CIMS, the real-time database
(RTDB) gets more and more emphasized as a key supporting technology [5][6]. As a
structure-opened distributed real-time database system can not only high efficiently
process and store real-time data in producing process in time, and provide real-time
data and self-contained historical information for controlling optimization, technique
improvement and management decision-making, but also downwards integrate
producing controlling system, upwards integrate managing decision-making system.
Thereby to the integration of producing equipment, heterogeneous control system and
producing management is realized to present high-speed uniform data platform for
managing decision-making, planning schedule, advanced process control and quality
control.
Aiming at specialty and requirement of process industry CIMS in our country, we
bring forward a real-time database system structure based on integration, and develop
an object-oriented real-time database [6][7] (called as Agilor) integrated with three
technologies of real-time database, temporal database and active database. In the
designing and developing of Agilor system, storage of huge amounts of data and high
efficient storing-taking of data are one of important problems cared in this paper and
will be introduced in following sections. In the applications of real-time database to
process industry, rapid and high efficient storage and querying huge amounts of data

are required. The speed and storage offered by traditional relation database
technology is short of the actual requirement far off. The temporal database
technology is used to present the storage strategy for historical data and the modified
swinging door method is proposed as a data compression algorithm in the developing
of Agilor system.
Other parts are arranged as follows. In Section 2, Agilor system is briefly
introduced. The technologies of data storage and data compression, adopted in Agilor
system, are presented in Section 3 and Section 4 respectively.

2 Overview of Agilor System
Aiming at the integrated characteristic of process control information, a structure with
distributed three layer application systems is adopted in Agilor system. It is presented
that a real-time database is used as the core, and these three layers of control, data and
client are connected compactness based on the ligament of middleware of data
communication service. The collectivity structure of the core part of real-time
database is divided into three administrative levels of application interface layer,
management layer and data layer.
The real-time data server in Agilor system structure is the core of Agilor system. It
is mainly with responsibility for storing and managing real-time data. It receives realtime data transmitted from the real-time data gathering subsystem, and then takes
compression and storage. The user can make statistics, give an alarm and publish realtime data by using other system tools in the system, meanwhile, Agilor system
presents users a suit of API and standard data query interface such that it is
convenient for users to develop application in the real-time database platform. Its
system structure is shown in following figure.
Connection management

Connection management

of Web clients

of local clients

console

Device manager
Log management

Runcore

M anagement of tag table

User management

Rule management
M anagement of historical data

Connection management

Reasoning component

of data gathering device

of real-time rules

Fig. 1. Structure of real-time database server of Agilor system
When data amount maintained in system is larger, multiple real-time data servers can
be configured to lighten the load of the main real-time data server, meanwhile, the
reliability of the whole system can be enhanced by remote redundant storage

The tag table management module in figure is with responsibility for maintaining
tag information table in which stores all information of real-time data tags, and that
the organization and index of data tags are referred to the international standard OLE
for Process Control (OPC).
When the tag scale is larger, the storage of the tag table is divided into two stages.
The full information of tag table is stored in a disc file, while usual tag attribute and
the current value of tag are stored in the memory all together, such that it is
guaranteed that the processing speed of system is impregnability.
The module of historical data management is with responsibility for maintaining
historical data of tag. When the value of a tag changes, fore value is stored in the
historical database in the form of historical data according to needs.

3 Data Storage
Process industries require to storing a great deal of historical data with high
efficiency. The speed of data storing must exceed that of data sampling, and the
respond on other events can not be lost as a great deal of data is inputted in a short
period of time. On the other hand, because of very bulkiness of historical data
amount, the query speed is affected, so that a special optimization in query flow and
structure is needed in order to satisfy the demand of high-speed data storing and
query. Moreover, the data compression is necessary before data are stored. Some key
tags are stored in order to decrease data storage. When a datum is queried, its
approximate value satisfied a accuracy index can be obtained by interposing with time
if it has not be stored.
3.1 Process of data storing
An object-oriented temporal model is adopted in the historical database subsystem of
Agilor system [8][9]. Historical data are divided into three stages of historical data
buffering pool, the current historical data file and a queue of historical data files,
which register data in the near future, metaphase and at a specified future date
respectively.
When historical data come, it need be determined whether they are stored into the
historical database by essential smoothing and compression processing according to
the measurement accuracy of a sensor. After data are determined to be stored, they are
first stored in the historical data buffering pool. After the buffering pool is filled, the
data in the pool will be stored into the current historical file in blocks. Historical data
files are stored in queue. After all historical data files are filled, the earliest historical
data file is chosen as the usual empty historical file.˄Seeing figure 2˅
In this figure, the buffering queue of historical data is used to buffer real-time data
sent from the core of the real-time database system, and acts as a bridge between the
core and the historical database.
Data smoothing is to deal with measurement noise. Whether data need to be
smoothed depends on the measurement accuracy of an instrument. Data compression

is indispensable step. A datum is determined as a key tag stored by data compression.
Only key tags are written into the historical data buffering pool.
Historical data buffering pool is the main buffering space of historical data in
memory, and is used to store historical data in the near future such that the storing
efficiency of historical data in the near future gets increased and unnecessary disc
operations are reduced.
Historical data file queue is the main disc space of historical data storage. In this
queue, a historical data file is needed at least. The appending of historical data at
some time only carries through in the current historical data file. After all historical
files are filled; the next usable empty historical data file is designated to be the current
historical data file. When there is no empty file, the earliest file is cleaned out.
Buffering queue
of historical data

Smoothing and
compression

Buffering pool of
historical data

Index file of
historical data

File queue of historical data
Archive
of
historical data

Historical
data file

Current data
file

Index information
of historical data

Historical
data file

Fig. 2. Data flow of historical database

The overall arrangement of page form is adopted for historical data files, each of
which is divided into basic data area and patulous data area. The index information of
data is defined in the basic data area, and that historical data can be dynamically
appended and interposed in the patulous data area.
Historical data pigeonholing termly extirpates historical data files from the
historical data file queue according to the amount of historical data stored in system.
In addition, the extirpated historical file can be compressed again, stored in the
historical data archive then, and can be putted in the queue again when it is necessary.
The size of a historical data file and the length of the queue can be configured
according to the scale of historical data and need be convenient to compress and
archive files.
Historical database is implemented using asynchronous storing manner, i.e., the
data storing operation only needs to append historical data at the end of buffering
queue of historical data and return back at once, and then data needed to be stored in
historical data buffering queue are written into historical data buffering pool by inside
work thread of system after processing of smoothing and compression.
3.2 Structure of data storage
Because there is higher demanding of time for collection, processing, storing and

query of data in a real-time database system, the data storing manner and index
mechanism are of a prodigious difference with that in non real-time database.
In order to fasten the access time of real-time data and enhance predictability and
timeliness of access task, a network data model is adopted in Agilor system according
to the international standard OPC such that the organization and index of data are
divided into three stages of device, group and tag.
Data types supported in Agilor system include integer, double, byte, Boolean,
string and etc., where integer and double occupy 4 bytes in memory respectively, byte
and Boolean only occupy 1 byte respectively. They are stored in two kinds of data
files respectively. As for a character string, it is split into one and one character such
that a record of one value with character string is divided into that of multiple values
with byte and stored in a data file which data term is a byte. When a user queries, all
correlative track records are taken out from data files, integrated to a character string
and returned back to the user by the data management module, which process is
transparent completely.
Moreover, in order to enhance processing speed of data and predictability of
processing time of a task, it is to avoid for application and allocation of dynamic
memory and disc operation to the best of our abilities in the design of Agilor system.
It is designed that the information of a tag is stored in memory and indexed speedily
by pointer and subscript. Under the condition of smaller scale of tags and larger
resources, all information is permitted to be fold into the memory. When the scale of
tags is larger, the storage of tags is divided into two parts of usual and unusual
information tables of tags such that the processing speed is guaranteed to be
impregnable. Full information of tags is considered to be stored in disc files in
designing. After the system starts up, usual attributes of a tag are stored in memory
together with the current value of the tag in processing.
3.3

Structure of object storage

The intrinsic object model is extended temporally in Agilor system. There are not
only temporal attributes and but also non-temporal attributes for an Agilor temporal
object model. Following figure 3 gives the storing structure of an Agilor object.
Where, ‘oid’ is the only identifier of an object, ‘oid_i’ is the ith object’s identifier,
‘attr_i’ is the name of the ith attribute, ’ref_i’ is the name of the ith relation. It can be
seen from figure 3 that there are respectively stored corresponding information of an
object in class database, object database and attribute database of Agolor system.
What stored in the kind database are definitions of all kinds of the system, which
include the attribute, relation, method, constraint and event of a kind in the kind
database. Using only an identifier ‘cid’ identifies every kind.
What stored in the object database is relative information of each object. The actual
attribute of an object is stored in the attribute database and not directly stored in
object database in the design of Agilor system. What stored in object database is the
index of each attribute in the attribute database, e.g., object id, class id, non-temporal
attribute, non-temporal relation, temporal attribute, temporal relation, and etc.
What stored in the attribute database is the attribute data of each object. Attribute
data of temporal data and non-temporal data are stored in temporal attribute database

Class id

and non-temporal attribute database respectively. What stored in temporal attribute
database is time sequences, every which is identified using only a temporal attribute
‘id’˄or temporal relation ‘id’˅. The basic data structure of temporal attribute is a
list of tuples, every which is composed of two elements of ‘time’ and ‘value’. Every
temporal attribute corresponds to a list. What stored in the non-temporal attribute
database are non-temporal attribute value and non-temporal relation value.

Class id
Attribute definition of class and public information, e.g.,
method, constraint, event, et al.

Object Database

Non-temporal Attribute Database

Object id

Attr_i_id

Value_i

Class id

Ref_i_id

Oid_i

Non-temporal attribute attr_i_id

Temporal Attribute Database
t_attr_i_id

Value_j, j=1,2,…

Non-temporal relation ref_i_id
Temporal attribute t_attr_i_id
Temporal relation t_ref_i_id

Time-stamp j
t_ref_i_id

Oid_j, j=1,2,…
Time-stamp j

Fig. 3. Storage structures of objects

3.4 Storage flow
In order to guarantee Agilor system to support the management of a great deal of
temporal data, following steps are adopted when data flow of temporal attribute
database is designed:
1). When the temporal attribute value of an object in system changes, its new
value is not directly stored into data file. The system sends it into the first stage of
buffering pools and then returns back to deal with the next task. These data are stored
into file by background data storing thread.
2). Two stages of buffer are deigned. The first stage of buffer is a queue, which
is shared by data managing thread and data storing thread. The second buffer is for
preventing from the writing of frequent files and enhancing the efficiency of data
storage. A buffer area is set up for every attribute ‘id’. Storing thread gets data from

the first buffer and writes them into the buffer area corresponding to ‘id’ instead of
writing them into a file directly. When the buffer area is full, all data in the buffer area
will be one-off written into a data file.
3). In order to prevent data files from mass data such that the management is easy,
Agilor system adopts a form of file queue to manage data file, which length is
determined by the system administrator. When a file is full, the next file in the file
queue then is opened to enhance data storage and querying efficiency.

4 Data compression
A real-time database system need present highly-speed data collection and processing
first. There are usually several ten thousands and more tags collected in a process
industry. The interval of data collection reaches to second stage, so the data amount is
great. The real-time information of every equipment and process need be stored in the
memory in order to guarantee data storage and reading speed of ten thousands and
more data tags. In section 3.1, it is mentioned data need be processed by compressing
to assure whether the current datum tag is needed to be stored in a data file before it is
written into the data buffer pool. In order to insure high frequency of data storage, it
needs to decrease storage of data to the best of our abilities under a certain of
accuracy index.
Historical data must be compressed in order to enhance the efficiency of disk
storage. Systems require not only higher compressibility, but also fast and high
accuracy data decompression. It needs a system can present an effective compression
algorithm of historical data. In the development of Agilor system, two steps are
presented to compress data in order to enhance the data compressibility:
Before processing data measured by an instrument with more worse measurement
accuracy, the smoothing technology of data is used to pretreat relative data in order to
weaken the influence of measurement errors on the quality of measurement data.
Based on the swinging door algorithm used in the real-time database system PI and
developed by OSI Software Inc., an approach of dynamically choosing the
compression deviation specification is proposed. In querying data, it only needs to
decompress by using time interpolation algorithm.
4.1 Swinging Door Algorithm
The first step: to calculate following three slopes when reviewing the current
measurement value:
S1=(Vc-(Vp+delta))/T
S2=(Vc-(Vp-delta))/T
S=(Vc-Vp)/T
Where, Vc is the current measurement value, Vp is the previous measurement value,
delta is the compression deviation specification, and T is the time interval between
these two measurements.
The second step: to use the new value instead of the old one for S1 when the new
S1 is larger than the old one.

The third step: to use the new value instead of the old one for S2 when the new S2
is smaller than the old one.
The forth step: the current measurement value don’t need to be stored when
S1 d S d S 2 , and the next measurement value is tested follow, otherwise, the last
measurement value before the current measurement value needs to be stored.
The fifth step: to continue above process as a new measurement value comes.
Results of data compression using Swinging Door algorithm depend on the
magnitude of the compression deviation specification greatly [10]. The bigger the
compression deviation specification is, the bigger the data compressibility and the
more worse the data accuracy of the decompression, whereas the smaller the
compression deviation specification is, the smaller the data compressibility and the
higher the data accuracy of the decompression.
4.2 Influence of Measurement errors on Data Compression
A measurement datum can be divided into three parts. The first part is the absolute
portion, which can be considered as constant in measurement process and can be
estimated according to past historical data. The second part is relatively changed and
depends on physical changing process of a measured parameter. The measurement
error or measurement noise of a sensor is the third part, which depends on
measurement accuracy of the sensor.
In these three parts of a measurement datum, the value of the absolute part has no
influence on the compression using Swinging Door algorithm, and the main factors of
the influence are the relative variety part and the measurement error. Usually, the
relative variety part changes continuously, and that the measurement error is
stochastic. When a sensor has very high measurement accuracy, its measurement error
is small, and then data compressibility depends on the changing curve of the relative
variety part. When a sensor has very lower measurement accuracy, its measurement
error is great, and then data compressibility depends on the measurement error and the
changing curve of the relative variety part. When the measurement error is great to a
certain extent, it can cover up the relative variety part, in this case, it is no meanings
to describe the second part in measurement data.
In table 1, five batch measurement data are compressed. Each batch has 1001 data
tags. In these five batches, the absolute part and the relative variety part of
measurement data are the same for each batch. The first batch has no considered the
measurement error. The standard deviations in other four batches are taken as 0.05,
0.10, 0.15 and 0.20 respectively. The constant compression deviation specification is
0.1. The compression results show the compressibility decreases greatly when a
sensor has low measurement accuracy. The data compression ratio is defined as (MN)/M, where M is the sum of testing tags and N is the sum of stored tags.
Table 1. Influence of measurement error on data compression

Standard deviation of noise
Data compression ratio˄%˅

0.00
99.30

0.05
72.03

0.10
43.76

0.15
31.87

0.20
24.98

4.3 Dynamic Choice of Compression Deviation Specification
When the measurement accuracy of a sensor is not good, it shows its measurement
data are not enough exactness itself. In this case, it needs not to overemphasize the
decompression accuracy when data are decompressed. Therefore, it is considered to
choose the compression deviation specification dynamically when data are
compressed. It depends on changing of data to adjust step of data compression
properly.
Assume data at time t(1), …, t(n-1) are not stored by testing (where, t(1)< … <t(n1)), to test the measurement value obtained at time t(n). Let k(i) be the slop between
the measurement tag at t(i) and the last stored measurement tag at t(0), the following
compression deviation specification with exponential form is chosen:
' D exp E max{k (i )}  min{k (i )} (t (n)  t (0))
Where, D>0, E>0 are constant and can be determined according to the experience
and the statistical result of relative historical data.
For those four batches of data with measurement error in table 1, the compressing
method using the dynamic compression deviation specification is used and yields data
compression ratio given in table 2. The initial compression deviation specification
and parameters of DǃE are 0.1, 1.0 and 0.5 respectively. Compared to table 1, it
shows easily that the data compressibility increases obviously after using the
compressing method with the dynamic compression deviation specification.
Table 2. Compression effect using the dynamic compression deviation specification

Standard deviation of noise
Data compression ratio˄%˅

0.05
94.31

0.10
81.11

0.15
74.13

0.20
56.14

4.4 Data Smoothing
When the measurement error of a sensor is large, measurement noise need be
smoothed such that the smoothed measurement data even more represent or approach
the actual value of the measurement parameter. Then, the smoothed measurement data
instead of the original one is compressed and the data compressibility increases. In
Agilor system, the following smoothing formula is used:
x(n)=Dx(n-1)+Ey(n+1)+(1-D-E)y(n)
Where, x(n) is the measurement value at t(n) after smoothing processing, x(n-1) is
the smoothed value at t(n-1), y(n) is the current actual measurement data at t(n),
y(n+1) is the next actual measurement data at t(n+1), D and E are weighed-factors
and satisfy D+E<1. How data smoothing is depends on the amount of D and E.

5 Applications and Conclusion
Our laboratory participates in the development of a Chinese nine-five keystone
project: Product Information Measurement and Decision-making Supporting System

in a Typical Demonstration Project of the Petrifaction Application Software. During
five years, a more full real-time database system (Agilor) is developed. After then,
this system gets consummated by applying to several projects and obtains well effect
in actual applications. Application results show the proposed data storage manner and
data compression method are feasible and applicable.

References
1. Stankovic, J., Son, S., Hansson, J.: Misconceptions About Real-Time Databases, IEEE
Computer. Vol. 32, No. 6, pp. 29-36, June (1999)
2. Ramamritham, K.: Real-Time Databases. (invited paper) International Journal of Distributed
and Parallel Databases 1 (1993), pp. 199-226
3. Haritsa, J. R., Ramamritham, K.: Real-time data in the new millennium. Real-time System,
(2000)
4. Huang, J., Stankovic, J. A.: An integrated real-time data management architecture for
industrial control system. TR93-08, (1993)
5. Zhang, Z. L., et al.: Real-time Database Principle and Application. Publishing Company of
Chinese Petrifaction, 2001 (in Chinese)
6. Yang, Q.: Real-time Database in Process CIMS. Thesis of Master’s Degree, Institute of
Software, Chinese Academy of Sciences, (2001)
7. Yang, Q., Wang, K., Wang, H. A., Dai, G. Z.: A case for real-time database for industrial
integrated control systems. to Appear in Computer Engineering and Applications (in
Chinese).
8. Deux, O. et al.: The O2 System, October 1991/Vol 34, No 10/Communications of The ACM.
9. Stankovic, J., Son, S.: An architecture and object model for distributed object-oriented realtime database. IEEE International Symposium on Object-Oriented Real-time Distributed
Computing (ISORC’98), Kyoto, Jaan, April (1998)
10. Bristol, E.H.: Swinging Door Trending: Adaptive Trend Recording?. ISA National
Conference Proceedings, (1990), pp. 749-753

