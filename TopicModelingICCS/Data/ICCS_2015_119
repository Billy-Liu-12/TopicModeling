Procedia Computer Science
Volume 51, 2015, Pages 2337–2346
ICCS 2015 International Conference On Computational Science

Towards a general deﬁnition of
Urgent Computing
Siew Hoon Leong1,2 and Dieter Kranzlm¨
uller2,1
1

Leibniz Supercomputing Centre, Garching near Munich, Germany
siew-hoon.leong@lrz.de, dieter.kranzlmueller@lrz.de
2
Ludwig-Maximilians-Universit¨
at M¨
unchen, Munich, Germany
kranzlmueller@ifi.lmu.de, h.leong@campus.lmu.de

Abstract
Numerical simulations of urgent events, e.g. tsunamis and storm, must be completed within a
stipulated deadline. The simulation results are needed by relevant authorities in making timely
educated decisions to mitigate ﬁnancial losses, manage aﬀected areas and reduce casualties.
The existing deﬁnition of urgent computing is too usage context speciﬁc and thus restricts the
identiﬁcation of urgent use cases and the general application of urgent computing. Related
paradigms like real-time computing, and crisis and disaster management computing further
complicate matters. We thus aim to extend and reﬁne the existing deﬁnition to provide a
comprehensive general version to clarify the diﬀerences. The requirements of urgent computing,
the urgent system and its characteristics, deadline and cost will be elaborated. This general
deﬁnition will aid in the identiﬁcation of the unique challenges of urgent computing and in turn
simulates innovative multi-disciplinary solutions to address these challenges.
Keywords: Urgent Computing, Terms, Requirements, Deﬁnition, Characteristics, Deadline, Cost

1

Introduction

Disasters and crises often occur unexpectedly at anywhere and anytime. In spite of the technological and scientiﬁc advances in recent decades, it is still impossible to predict the onset
and/or advancement of many natural disasters, e.g. earthquakes, tsunamis and storms, well in
advance. Numerical computations can simulate the onset and/or advancement of such disasters by utilising an array of data that are commonly unknown until the zero hour, i.e. shortly
before/when/after a disaster or crisis strikes, leaving no time to spare. Urgent computing (UC)
is a class of computing to support such computations to enable responsible authorities to make
educated decisions by providing simulated predictions of a potential extensive loss situation,
e.g. the impact and required evacuation zones. It facilitates simulations to start and complete
within a required timeframe to support decision making for managing the aﬀected areas to
reduce casualties.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.402

2337

Towards a general deﬁnition of Urgent Computing

Leong and Kranzlm¨
uller

UC is frequently being confused with other classes of computing, in particular real-time
computing (RTC), and crisis and disaster management computing (CDMC). The time critical
characteristics of UC brings to mind RTC while its application, to manage loss from urgent
events, hints a relationship to CDMC. Consequently, it prompts some to propose inappropriate
(near) real-time solutions for UC challenges. Non-time critical CDMC computations were also
mistaken as urgent computations. Unfortunately, the existing deﬁnition of UC is insuﬃcient to
dispel the confusion and highlight the diﬀerences. This obstructs the identiﬁcation of unique
challenges and use cases, and impedes the progress of UC. A general and yet comprehensive
deﬁnition of UC is thus required. With such a deﬁnition, its unique challenges can more easily
be identiﬁed to simulate new innovative solutions across multiple disciplines.
This paper is organised as follows. In section 2, related work in deﬁning UC will be shared.
An analysis of the existing deﬁnition and its shortcomings are discussed in section 3. Section 4
describes the reﬁned deﬁnition of UC for general application. Finally, the conclusion and future
work are shared in section 5.

2

Related Work

UC came into the limelight via the US project, SPRUCE (Special PRiority and Urgent Computing Environment) [1] in 2006. The ﬁrst conference publication [1], which was based on a
SPRUCE whitepaper1 , was published in 2007 with a focus on SPRUCE as an urgent highperformance computing system. The term ”urgent computing” was introduced on the pretext
that it was self-explanatory and was thus without a deﬁnition or reference. Four implementation requirements for supporting UC were stated. They revolved around UC job sessions, policy
frameworks among resource providers, permission and user authorisation for priority jobs. The
paper [2] from 2008 clariﬁed the needs and requirements of an urgent system, i.e. the SPRUCE
system. The implementation requirements were further elaborated in the descriptions of the UC
framework. UC (system) was not formally deﬁned but was hinted with examples illustrating
its usage, and keywords and phrases like ”immediate attention”, ”event-driven”, ”deadlinebased” and ”late results are useless”. The ﬁrst comprehensive deﬁnition of UC was penned
by Trebon [3] in his dissertation work to enable UC within the existing distributed computing
infrastructure, i.e. SPRUCE. Understandably, his work was inﬂuenced by SPRUCE’s requirements, leading to a usage context speciﬁc deﬁnition of UC. It imposed a number of restrictions
in the UC requirements, which were considered as unnecessary.
There were since numerous UC related publications for speciﬁc use cases [4][5], addressing
speciﬁc challenges [6][7] and sharing an early warning system framework [8]. In these work, there
were no attempts to reﬁne the deﬁnition of UC, use cases [9] that did not require signiﬁcant
resource usage or long computation time, thus violating the requirements deﬁned by Trebon,
were accepted as urgent use cases. As such, there is a need to evaluate the existing deﬁnition
of UC and reﬁne it such that it is applicable in a more general context while conforming with
requirements of existing UC work.

3

Analysing the Existing Deﬁnition

The most complete attempt to deﬁne UC is in Trebon’s dissertation work [3] that was based
on the SPRUCE environment. The aim was to design and implement an UC environment
that took advantage of the high performance computing (HPC) resources within the TeraGrid,
1 http://spruce.teragrid.org/papers/spruce_whitepaper.pdf

2338

Towards a general deﬁnition of Urgent Computing

Leong and Kranzlm¨
uller

predecessor project of Extreme Science and Engineering Discovery Environment (XSEDE)2 .
Consequently, UC was deﬁned with the following three requirements [3, p.2]:
(i) The computation operates under a strict deadline after which the computation results
may give little practical value.
(ii) The onset of the event that necessitates the computation is unpredictable.
(iii) The computation requires signiﬁcant resource usage.
This set of requirements provides a good hint to what UC is but are too speciﬁc to SPRUCE’s
requirements for general application. The use of imprecise terms, strict and signiﬁcant, require
clariﬁcations. In the ﬁrst requirement, the deadline was deﬁned to be ”strict”. It was also
shared that an urgent system falls somewhere between a soft and a hard real-time system
(RTS) [3, p.9], which a soft and a hard deadline correspond to respectively. Since there exists
a ﬁrm deadline classiﬁcation in RTS that falls between a soft and a hard deadline, does a strict
deadline correspond to a ﬁrm deadline? A written correspondence with Trebon revealed that
the deﬁned strict deadline is indeed a ﬁrm deadline. Since the result of UC in SPRUCE was
not planned to be the one and only source of information for the decision makers, but to aid the
decision making [3, p.11], a more conservative ﬁrm classiﬁcation instead of hard was deﬁned.
The second requirement is arguably the most insightful requirement among the three. It
illustrates the unpredictable nature of an urgent event, albeit just the onset, and thus the
rational behind the urgency, i.e. time criteria, in UC. However, on deeper consideration, it
becomes obvious that it is not the unpredictable onset of urgent events that imposes the time
constraint. Instead, it is the lack of or late arrival of required data that delays the initiation
of urgent computations until the zero hour that induces the urgency. Of course, one crucial
reason for the lack of or late arrival of required data is due to the unpredictable onset of urgent
events. However, in the case of storm, the onset of the event is known but due to its dynamic
and long lasting nature, urgent computations have to be performed as the event develops, i.e.
as up-to-date data become available.
The third requirement is the most SPRUCE speciﬁc requirement among the three. In the
context of SPRUCE where an impressive array of expensive HPC resources was available, the
requirement to restrict use cases to those that required ”signiﬁcant resource usage” is understandable. It is more interesting, i.e. challenging, to address such use cases as conﬁrmed by
Trebon. However it leaves much room for interpretation. Signiﬁcant resource usage is dependent on the amount of resources an infrastructure has and is also dependent the technological
advancement at the said point in time. A computing centre with a cluster of 100 cores will
see 50 cores as a signiﬁcant resource usage while a computing centre with a cluster of 10,000
cores will interpret it very diﬀerently. A simulation application that uses ten of thousands of
cores is a major achievement a decade ago but is now simply a well-scaled application. The
shortcomings in the three requirements will be addressed in the following section.

4

Deﬁning Urgent Computing

UC requires computations to commence in short order and complete within a stipulated deadline
so as to support mitigation activities in preparation, response and recovery from an event that
requires immediate attention. The result of the computations enables the relevant authorities
to make swift and timely educated decisions to mitigate ﬁnancial losses, manage aﬀected areas
and reduce casualties.
2 https://www.xsede.org/

2339

Towards a general deﬁnition of Urgent Computing

4.1

Leong and Kranzlm¨
uller

Urgent Computing Terms

Common terms used while deﬁning UC are clariﬁed in this section.
• An urgent use case is a description of a recurring issue, e.g. a ﬂood, or a high impact
issue, e.g. a nuclear meltdown in a reactor, which is expected to potentially result in
extensive loss. The loss is expected to be mitigated with the support of time-critical
computations.
• An urgent event is an occurrence at a point in space and time that can potentially
create an extensive loss situation, which requires immediate attention.
• An urgent service is the act of the activities, i.e. computation, decision making and
coordination work, to fulﬁll the function of an urgent system.
• An urgent computation is a computing activity that must commence in short order, i.e.
immediately or as soon as possible, to simulate an urgent event. An urgent computation
is triggered by an urgent event, either the commencement or the expectation of it.
• An urgent product is the processed result of an urgent computation that can be directly
used for decision making and coordination activities to support loss mitigation.
• An urgent system is a system to enable urgent computation(s) and support decision
making and coordination work such that loss mitigation is possible.

4.2

Requirements

The functional and non-functional requirements of UC will be elaborated.
4.2.1

Functional Requirements

Similar to RTC, the functional requirements of UC include data collection requirements and
man-machine interaction requirements [10]. Additionally, to facilitate the decision and coordination system, the functional requirements also comprise of data evaluation requirements.
(i) Data collection: Data describing the state of a controlled object is essential to determine if an urgent computation should be triggered, and where and how it should be initiated.
Examples of controlled objects are a disaster observation centre, and a compute resource and
its corresponding compute environment. Most frequently, data collection is performed via timetriggered observations. However, in some cases, data collection of controlled objects are triggered by an event, i.e. an event-triggered observation. An example is update of the operating
system of a compute resource that triggers an update of the data about the resource.
Monitoring is an important mechanism to detect abnormalities in the urgent system. Time
triggered continuous monitoring of each component in the urgent system is an important function to detect issues in advance to facilitate both the eﬃcient resolution and avoidance of failing
components during an event.
(ii) Man-machine interaction is an important interface, particularly in the case where the
UC trigger is autonomous. Unlike RTS, this interface is not as safety-critical since the decision
making and coordination system is a separate component. However, an incorrectly implemented
man-machine interface can still lead to interruption of services that can be ﬁnancially costly.
(iii) Data evaluation is a crucial functionality. Mistakes here can result in incidents that
contribute to the catastrophic consequences instead of the desired loss mitigation. In order to
2340

Towards a general deﬁnition of Urgent Computing

Leong and Kranzlm¨
uller

faciliate the decision and coordination system, the results have to be processed and reorganised
in an useful manner, i.e. urgent products, for easy evaluation. Data analytics and machine
learning are important mechanisms to support this function.
4.2.2

Non-functional Requirements

Non-functional requirements relate to the success of the urgent system. They are the underlying
criteria determining the eﬀectiveness and eﬃciency of a system.
(i) Reliability of an urgent system is the probability that a speciﬁed urgent service is carried
correctly before an instance in time, the urgent deadline. The reliability is dependent on the
condition that the urgent system is operational at the time when it is initiated. Reliability can
be improved by a provision of alternative failover components. This aligns with the the data
collection functionality where failed components are known in advance and backup components
are automatically selected.
(ii) Maintainability of an urgent system is the probability that the full system is recovered
within a speciﬁed time interval after a failure or change. Similar to RTS, there is a fundamental conﬂict in reliability and maintainability [10]. The need to have failover components for
reliability increases the complexity of the system and thus the maintainability.
(ii) Availability of an urgent system is the probability that an operational system, albeit
not fully, is available over the planned operational time interval of the system. It is measured
by the fraction of time that the urgent system is ready to provide the urgent service [10].
Availability is directly related to maintainability while reliability is dependent on availability.
(iv) Security of an urgent system pertains to the ”trustworthiness” of the system. It is a
key attribute that inﬂuences the integrity of the system and its associated components. Security
is directly related to reliability and can aﬀect availability and maintainability.

4.3

An Urgent System
evaluation
interface

man-machine
interface
operator

operator
cluster

instrumentation
interface

urgent
computer
system

decision and
coordination
system

controlled
object

computational
cluster

computational
cluster

controlled
cluster

Figure 1: An urgent system
An urgent system can be represented as shown in ﬁgure 1, with reference to the RTS [10,
p.2], consisting of four components. This diﬀers from the RTS due to the additional component, the decision and coordination system. An example of an implementation of the urgent
computer system, and decision and coordination system is the CIS framework [8] and a decision support system [5] respectively. The computation results of a RTS, in particular a hard
RTS, are typically static in nature, i.e. a predeﬁned set of expected results. Thus, the decision
and coordination activities are relatively simple and can be easily designed into the real-time
computer system as conditioned responses since they are based on expected results.
On the other hand, an urgent system can have dynamic computation results, which cannot
be exhaustively predeﬁned. The corresponding decision and coordination activities are thus
complicated and have to be modelled as a separate component. Additionally, the controlled
objects of an urgent system can be tightly coupled and include both humans and machines.
2341

Towards a general deﬁnition of Urgent Computing

Leong and Kranzlm¨
uller

Naturally, humans unlike machines are more dynamic in urgent situations and are thus harder
to coordinate and control. The complexity meant that the decision and coordination activities
have to revisited to accommodate both the developing situation and the changing status of
errant controlled objects.
In simple urgent use cases, an urgent system can also be modelled as a three components
system as in the case of a RTS. In such cases, the possible scenarios of the urgent event can be
exhaustively predeﬁned such that the responses, i.e. the decision and coordination activities,
are designed into the system. One such example is an earthquake early warning system [11]. In
this urgent use case, the regions that should receive a warning in event of a signiﬁcant (decided
in advance) earthquake are predeﬁned. The urgent computation will determine the aﬀected
regions and the result is then forwarded to predeﬁned media channels (controlled objects), the
radio stations, the television stations, etc. A warning is then eﬀectively disseminated to the
civilians. No complex decision or coordination activities are required. The civilians should then
carry out mitigation activities, e.g. hide under a table, on their own accord.
In summary, an urgent system works as such. The operator in the operator cluster will
initiate an urgent computation via the man-machine interface on the computational cluster
upon the detection of an urgent event. The computational cluster can be a single workstation,
a Cloud/Grid/HPC resource, etc. The operator can be another computer system in a fully
autonomous urgent system. Once the urgent products are ready, they are forwarded to the
decision and coordination system to be evaluated. The decision and coordination system can
be a fully autonomous system, e.g. a machine learning system or a semi-autonomous decision
and coordination support system that has human(s), i.e. domain experts of the use case or mitigation experts, making and coordinating the ﬁnal decision(s). Additional urgent computations
can be further initiated by the decision and coordination system if deemed useful. Decisions and
coordination plans are then improved. An urgent system can have multiple controlled objects,
both humans and machines, that require delicate couplings.
4.3.1

Pre-computation Characteristics

Pre-computation characteristics will describe the conditions before an urgent computation(s).
(i) The urgent event is expected to potentially result in extensive loss to multiple stackholders and can include at least one government agency.
(ii) Data required to set up the initial condition of an urgent computation is unavailable until
the zero hour, i.e. shortly before/when/after the urgent event is observed.
(iii) Simulation result(s) with improved accuracy is expected by using the zero hour data.
(iv) Computations must commence immediately or as soon as possible in order to meet the
deadline and thus computing resources must be available in short notice.
(v) Provided time constraints, i.e. the deadlines, are estimates and the error can be in seconds,
minutes, hours or even days.
One important characteristic of UC is the extensive loss, typically in the range of multiple
millions to billions. Multiple stack-holders, including the government agencies, are aﬀected.
Due to the potential loss involved, the cost of urgent computations is typically insigniﬁcant in
comparison. The term ”extensive loss” raises the question of how extensive must a loss be.
Is a single human life a suﬃciently extensive loss to warrant an urgent computation? What
if there are no multiple stack-holders, e.g. a homeless man with no family? The decision is
2342

Towards a general deﬁnition of Urgent Computing

Leong and Kranzlm¨
uller

ultimately in the hands of decision makers who will determine the ”cost” of a human life. The
characteristics are meant as guidelines to make it easier to identify urgent use cases. As UC
matures, the characteristics are expected to evolve.
The main motivation to perform urgent computations is the expectation of improved accuracy in the simulation results by using the ”live” data at the zero hour. The next two
characteristics help to ﬁlter out use cases that do not require the zero hour data for the computation and/or will not beneﬁt with an improved accuracy. A CDMC example is the Forecast
Propagation Database for Tsunami [12], a non UC solution, where an exhaustive possible scenarios are pre-simulated and the results kept. Upon an impending tsunami, the best match
simulation from the database is used to predict the event.
The fourth characteristic shares that to satisfy the time constraint, i.e. deadline, the computations must commence swiftly upon getting the required data. Computation resources should
thus be available in short notice correspondingly. If the computations do not have to commence
in short order, it is not an urgent computation.
Finally, as opposed to most RTC events where time constraints/deadlines are known, i.e.
deterministic, the time constraints of UC are often unknown and are a part of the targeted
computation results. As such, they are typically estimated and errors are expected. In best
case scenario, the errors can be in the range of seconds or minutes but they can be also in the
range of hours and even days in the worst case scenarios. This unpredictable characteristic
makes the realisation of UC more challenging than hard RTC.
4.3.2

Post-computation Characteristics

Post-computation characteristics will describe the conditions after an urgent computation(s).
(i) An urgent computation must generate urgent product(s) within a stipulated deadline for
it to be useful.
(ii) Decision and coordination activities commence or recommence immediately upon the
availability of the urgent product(s).
(iii) The decision makers use the urgent product(s) to make informed decision(s) to mitigate
the loss of the event.
(iv) Direct loss of the event can be expected, though mitigated, upon meeting the stipulated
deadline and, making and carrying out informed decisions.
Meeting the stipulated deadline in UC is crucial to the success of system. Lateness may
imply that no mitigation eﬀort can be carried out. Meeting the deadline thus constitutes to the
post-computation characteristics as one of the most crucial and yet fundamental requirement.
Decision and coordination activities have to immediately commence upon the availability
of the urgent product(s) for UC to make sense. If the decision and coordination activities can
wait then it does not require an urgent computation. The importance of meeting the stipulated
deadline originates from the need for immediate decision making before mitigation activities
become futile. Naturally, the more time there is for mitigation activities, the better the plan
can be and the overall reduction in severity of the loss.
One important diﬀerence between UC and RTC is whether direct loss/cost of the event will
be incurred upon meeting a deadline. A RTS is designed such that in a deterministic set of
scenarios, if a deadline is met, no direct loss/cost is incurred. However, in the case of urgent
system, even in an ideal prescribed scenario, direct loss can still be expected upon meeting the
deadline. The main aim is to mitigate the loss since complete avoidance is likely impossible.
2343

Towards a general deﬁnition of Urgent Computing

Leong and Kranzlm¨
uller

The urgent product(s) should provide the necessary information to support the decision
makers into making informed decisions to reduce the severity, i.e. the loss, of the event. If
urgent products are unnecessary for the decision making process or mitigation eﬀort, then the
urgent computations are correspondingly unnecessary.
4.3.3

Deadline

A deadline is a point in time where a predeﬁned task(s) has to be completed. The time constraints or ”in time” requirements of UC can be expressed in terms of deadlines. To manage the
unpredictable timing characteristic, a reﬁned deﬁnition of urgent system deadlines is required.
UC deadlines can be either ﬁrm or hard. If the urgent products are helpful, e.g. not the only
source of information, for the decision making, the deadlines are ﬁrm. If the urgent products
are crucial, e.g. the only source of information, for the decision making, the deadlines are hard.
A hard deadline in RTS is deﬁned as ”A deadline is said to be hard if the consequences of not
meeting it can be catastrophic” [13, p.7] while a ﬁrm deadline is deﬁned as ”A deadline is said
to be ﬁrm if the results produced by the corresponding task cease to be useful as soon as the
deadline expires, but consequences of not meeting the deadline are not very severe” [13, p.7].
The deadlines of urgent system are deﬁned as such:
• Deterministic ﬁrm deadline: A deadline is deterministic ﬁrm if the deadline is predictable and not meeting it renders the result useless but the consequences are not very
severe.
• Non-deterministic ﬁrm deadline: A deadline is non-deterministic ﬁrm if the deadline
is unpredictable and not meeting it renders the result useless but the consequences are
not very severe.
• Deterministic hard deadline: A deadline is deterministic hard if the deadline is predictable and the consequences of not meeting it can be catastrophic.
• Non-deterministic hard deadline: A deadline is non-deterministic hard if the deadline
is unpredictable and the consequences of not meeting it can be catastrophic.
One critical diﬀerence of urgent deadlines with real-time deadlines is the expectation of
consequences upon meeting the deadline in the ideal situation where the urgent system is
functioning as expected. Deterministic ﬁrm and hard deadlines are synonymous with the ﬁrm
and hard deadlines of RTS respectively. A non-deterministic deadline is an unique and more
common characteristic of UC that diﬀerentiates it from a RTS. As opposed to hard RTS where
under pre-deﬁned scenarios, meeting the deadline means avoiding catastrophe. Urgent systems
are frequently only attempting to mitigate the consequences such that it will not be catastrophic.
The early earthquake warning system for instance is only useful to those who are of a certain
distance from the epicentre of an earthquake.
Due to the lack of information until the zero hour and the dynamic nature of many urgent
events, determining a deadline is frequently impossible. Such deadlines can only be estimated
and the models used are typically best estimations. A signiﬁcant inherited error is thus expected.
The non-deterministic characteristic invalidates many well-proven solutions of hard RTS since
it is impossible to design a system to exhaustively handle dynamic and unpredictable scenarios.
4.3.4

Cost

Cost is an important characteristic of UC to quantify loss. It helps to determine if an urgent
computation is worthwhile to be carried out. Two costs, computation cost and event cost, are
2344

Towards a general deﬁnition of Urgent Computing

Leong and Kranzlm¨
uller

crucial to UC. Generally, the cost of an urgent computation (Cc ) should be less than or equal
the cost incurred from an urgent event (Ce ), i.e. Cc ≤ Ce , for a computation to be considered
as worthwhile. However, this is only true in the ideal situation where the actual cost of the
event is zero as a result of a perfect mitigation decision. A more appropriate representation
of the computation and event cost is shown in (1). Cme refers to the cost of the event after
mitigation activities are carried out by relying on the urgent products from the computation.
Cc ≤ Ce − Cme

(Cme ≤ Ce )

(1)

The relationship between Cme and Ce can be further expressed by providing a mitigation
factor, α as shown in (2). α will be in the range zero and one. Zero represents the ideal scenario
where there is no event cost due to a perfect mitigation decision while one represents the worst
case scenario where no mitigation activities can be made to reduce the event cost.
Cme = αCe

(0 ≤ α ≤ 1)

(2)

α is to be derived e.g. from previous events of similar nature. By combining equations (1)
and (2), the relationship between Cc and Ce is simpliﬁed as such:
Cc ≤ (1 − α)Ce

(0 ≤ α ≤ 1)

(3)

Equation 3 provides a mechanism to assist decision makers to measure if UC is worthwhile
for a particular urgent use case or event. Event cost (Ce ) can be estimated in advance using
information from similar events that occurred previously. Cost of an event includes both direct
and indirect cost. Examples of direct cost are damages in infrastructures and loss of human
lives. Indirect cost can include ﬁnancial losses from a loss of investment and tourism after the
event. The exact cost of an event is hard to estimate due to the diﬃculties in quantifying some
losses, e.g. human lives, and the determination of whether a particular indirect cost is a result
of the urgent event [14].

5

Conclusion and Future Work

UC is still a rather novel paradigm. The initial attempt to deﬁne it led to a usage context
speciﬁc deﬁnition that is unsuitable for general applications. To improve it, the initial deﬁnition was analysed to understand its shortcomings. The shortcomings were then addressed by
reﬁning and extending the deﬁnition. The updated deﬁnition includes a clariﬁcation on commonly used UC terms, UC requirements, UC as a system and its pre- and post-computation
characteristics, deadline and cost. The updated deﬁnition is also checked against some existing
UC implementations, e.g. [8] and [15], though not elaborated in this work, for conformance.
With this reﬁned deﬁnition, the diﬀerences among UC, and RTC and CDMC are clariﬁed to
enable scientists to more easily identify urgent use cases and address its unique challenges. We
will address one of such challenges in our future work to enable urgent use cases, veriﬁed with
this reﬁned deﬁnition, to use a wide array of existing e-Infrastructures for UC [16]. This opens
up many new possibilities and also unique challenges due to the heterogeneity of resources
and their environments. To better gather the requirements of diﬀerent urgent use cases and
e-Infrastructures, a prototype UC data management system [7] was implemented. The underlying framework will be further reﬁned and additional systems to perform other urgent services
in UC, e.g. preemption job management, will be investigated. The ultimate goal is to be able
to have a ﬂexible framework that can enable UC on any heterogeneous resources.
2345

Towards a general deﬁnition of Urgent Computing

5.1

Leong and Kranzlm¨
uller

Acknowledgments

The author would like to thank C. Anthes, H. Heller, DRG group, etc. at Leibniz Supercomputing Centre for their valuable motivations, suggestions, feedbacks and support. A big thanks
to N. Trebon for his prompt responses and kind words of encouragement.

References
[1] P. Beckman, S. Nadella, N. Trebon, and I. Beschastnikh. Spruce: A system for supporting urgent highperformance computing. In Grid-Based Problem Solving Environments, volume 239 of IFIP The International Federation for Information Processing, pages 295–311. Springer US, 2007.
[2] P. Beckman, I. Beschastnikh, S. Nadella, and N. Trebon. High Performance Computing and Grids in
Action, volume 16, chapter Building an Infrastructure for Urgent Computing, pages 75–95. IOS Press,
2008.
[3] N. Trebon. Enabling Urgent Computing within the existing distributed computing infrastructure. PhD
thesis, University of Chicago, August 2011.
[4] B. Blanton, J. McGee, J. Fleming, C. Kaiser, H. Kaiser, H. Lander, R. Luettich, K. Dresback, and R. Kolar.
Urgent computing of storm surge for north carolina’s coast. In International Conference on Computational
Science, volume 9 of Procedia Computer Science, pages 1677 – 1686. Elsevier, 2012.
[5] V. V. Krzhizhanovskaya, N. B. Melnikova, A. M. Chirkin, S. V. Ivanov, A. V. Boukhanovsky, and P. M. A.
Sloot. Distributed simulation of city inundation by coupled surface and subsurface porous ﬂow for urban
ﬂood decision support system. In ICCS, volume 18 of Procedia Computer Science, pages 1046 – 1056.
Elsevier, 2013.
[6] S. V. Kovalchuk and A. V. Boukhanovsky. High-level knowledge-based structures for simulation within
urgent computing tasks. In ICCS, volume 9 of Procedia Computer Science, pages 1694 – 1703. Elsevier,
2012.
[7] S. H. Leong, D. Kranzlm¨
uller, and A. Frank. A data management system to enable urgent natural disaster computing. In EGU General Assembly Conference Abstracts, volume 16 of EGU General Assembly
Conference Abstracts, page 4699, May 2014.
[8] B. Balis, M. Kasztelnik, M. Bubak, T. Bartynski, T. Gubaa, P. Nowakowski, and J. Broekhuijsen. The
urbanﬂood common information space for early warning systems. In ICCS, volume 4 of Procedia Computer
Science, pages 96 – 105. Elsevier, 2011.
[9] N. Palmer, R. K., T. Kielmann, and H. Bal. The case for smartphones as an urgent computing client
platform. In ICCS, volume 9 of Procedia Computer Science, pages 1667 – 1676. Elsevier, 2012.
[10] H. Kopetz. Real-Time Systems: Design Principles for Distributed Embedded Applications, Second Edition.
Springer, LLC, 233 Spring Street, New York, NY 10013, USA, 2011.
[11] E. Yamasaki. What we can learn from japan’s early earthquake warning system. Momentum, 1:1–26, 2012.
[12] E. Gica, M. C. Spillane, V. V. Titov, C. D. Chamberlin, and J. C. Newman. Development of the forecast
propagation database for noaa’s short-term inundation forecast for tsunamis (sift). Technical Report OAR
PMEL-139, U.S. Dept. of Commerce, National Oceanic and Atmospheric Administration, Oﬃce of Oceanic
and Atmospheric Research, Paciﬁc Marine Environmental Laboratory, 2008.
[13] K.G. Shin and P. Ramanathan. Real-time computing: a new discipline of computer science and engineering.
Proceedings of the IEEE, 82(1):6–24, January 1994.
[14] R. E. Litan, J. W. Jacobs, W. D. Iwan, S. D. Parker, G. M. Horberger, R. M. Hamilton, et al. The
impacts of natural disasters: A framework for loss estimation. Technical report, Committee on Assessing
the Costs of Natural Disasters - Board on Natural Disasters and Commission on Geosciences Environment
and Resources - National Research Council, 1999.
[15] S. V. Ivanov, S. V. Kovalchuk, and A. V. Boukhanovsky. Workﬂow-based collaborative decision support
for ﬂood management systems. In ICCS, volume 18 of Procedia Computer Science, pages 2213 – 2222.
Elsevier, 2013.
[16] S. H. Leong, A. Frank, and D. Kranzlm¨
uller. Leveraging e-infrastructures for urgent computing. In ICCS,
volume 18 of Procedia Computer Science, pages 2177 – 2186. Elsevier, 2013.

2346

