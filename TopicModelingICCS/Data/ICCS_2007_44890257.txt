Analyzing Data Dependence Based on Workﬂow
Net
Yu Huang, Hanpin Wang , Wen Zhao, and Jiaqi Zhu
School of EECS, Peking University, Beijing, China, 100871
huangyu1979@gmail.com, whpxhy@pku.edu.cn

Abstract. Workﬂow management systems (WfMSs) frequently use data
to coordinate the execution of workﬂow instances. A WfMS makes routing decisions according to data constraints. This paper presents an extended workﬂow net which has its business form and portrays data constraints among tasks which act as the decision condition. Data constraint
is expressed by pre-condition and post-condition which formalize a task’s
input and output conditions. After introducing the model, we give an important deﬁnition of consistence related to data dependance. Then, we
proposes a domain computation method during reduction to verify the
consistence. The method considers data operation during reduction. In
the end, a case study is analyzed by our method.

1

Introduction

Workﬂow has become an essential technology in e-business, providing a ﬂexible and appropriate environment for development and maintenance of nextgeneration component-oriented information systems for enterprise applications
[1]. Nowadays, workﬂow management systems have been widely deployed in the
domains of administration, production, and scientiﬁc research in order to ensure
high eﬃciency of business process.
There exist many formal models mainly aiming at control ﬂow and resource
perspective, e.g. [1][2][3], but few concerning data perspective. Data perspective mainly handles business documents and other objects which ﬂow between
activities, and local variables of the workﬂow. Data perspective is crucial for
the correctness of a workﬂow execution, because routing decisions depend on it.
There are a series of concepts that apply to the representation and utilization
of data within workﬂow systems. [4] integrated workﬂow model with production data model to support production development. [5] proposed data guard to
guarantee signiﬁcant changes in data. Nevertheless, no articles have given formal
models linking the business form with data dependence and veriﬁcation methods
to check the soundness related to data.
Supported by the National Grand Fundamental Research 973 Program of China
under Grant No. 2002CB312004 and 2002CB312006 and the National 863 Plans
Projects of China under Grant No. 2006AA01Z160.
Corresponding author.
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 257–264, 2007.
c Springer-Verlag Berlin Heidelberg 2007

258

Y. Huang et al.

[2] proposed a subclass of Petri nets called the workﬂow net (WF-net) which
models the control ﬂow perspective of a workﬂow. Tasks are represented by
transitions, and procedure logic is modeled by places and arcs. Some papers
extended WF-net to model resource perspective, critical section, etc. [3][7]. This
paper gives an extended workﬂow net describing the data dependence. Then we
introduce the inconsistent problem after adding data constraint. Therefore, we
give the deﬁnition of data consistency. Furthermore, we propose a new method
to verify its property.
The structure of the remainder is: section 2 states basic deﬁnitions about
workﬂow and its extension. Section 3 discusses the conditional expressions and
some new reduction rules for analyzing data consistency. This paper concludes
in section 4.

2

Basic Workﬂow Deﬁnitions

In this section, we give the basic notions of workﬂow net and its extension.
Deﬁnition 1 (Petri net). A Petri net is a triple (P, T, F ) where:
– P is a ﬁnite set of places.
– T is a ﬁnite set of transitions, and P ∩ T = ∅.
– F ⊆ (P × T ) ∪ (T × P ) is a set of edges.
Given a Petri net (P, T, F ), we will use the following notations: • p = {t| <
t, p >∈ F }, p• = {t| < p, t >∈ F },• t = {p| < p, t >∈ F }, t• = {p| < t, p >∈ F }.
Deﬁnition 2 (Workﬂow net (WF-net)). A Petri net N = (P, T, F ) is a
WF-net if and only if:
– N has two special places: i and o where • i = ∅, o• = ∅.
– If we add a transition t∗ to N , connecting place o with i so that • t∗ = i, the
Petri net N ∗ obtained is strongly connected. where t∗ represents a transition
which connects the output to the input.
Deﬁnition 3 (Soundness). A WF-net N = (P, T, F ) is sound if and only if:
– For every state or marking M reachable from state i, there exists a ﬁring
sequence leading from state M to state o. Formally:
*
*
∀M (i −
→ M ) ⇒ (M −
→ o)
– State o is the only state reachable from state i. Formally:
∗
→ M ∧ M ≥ o) ⇒ (M = o)
∀M (i −
– There are no dead transitions in (N ,i). Formally:
∗
t
∀t∈T ∃M,M i −
→M −
→M
Examples of the business process include insurance claim, visa application, goods
ordering and goods transportation, etc. All these processes share three qualities:
case-driven, process-essential and a predeﬁned explicit procedure. Every process
has a predeﬁned (or predesigned) business form(B-form) or document, like a

Analyzing Data Dependence Based on Workﬂow Net

259

visa application form, an order form of goods. Therefore, B-form is the key to
deﬁne a workﬂow process. A B-form(document) is a view for an information set
required to support a task which is the unit consisting of a workﬂow. A B-form
is ﬁlled up and its content is changed when it is passed from task to task.
Deﬁnition 4 (B-form). B-form is a set of typed variables which have been
evaluated.
Deﬁnition 5 (Domain Expression). Domain expression is the following form:
{(variable1 , variable2 , · · · , variablen ), (valueRange1, valueRange2, · · · ,
valueRangen)}, n ∈ N. E represents that all variables can be evaluated into
arbitrary values which are allowed in their type. ∅ denotes that all variables
cannot be valuated into any values.
Domain expression is divided into two parts: one represents the variables, the
other represents the respective evaluated ranges.
Deﬁnition 6 (Data Constraint). The data constraint of a task indicates its
precondition and postcondition. When a transition is ﬁred, the B-form in this
moment must satisfy its data constraint. Data constraint is composed of two
parts: data constraint={precondition, postcondition}.
The precondition and postcondition are represented by domain expressions which
describe the constraint of variables in the B-form. The variables which aren’t
included in the precondition or postcondition represent that the ﬁred transition
does not care them. We call {precondition, postcondition} bi-domain.
Deﬁnition 7 (Data Dependence Workﬂow net (DDWF-net)). ADDWFnet is Five tuples N = (P, T, F ; ϕ, B), satisfying the followings:
1. (P,T,F) is a WF-net.
2. B is a B-form which is dealt with in the workﬂow. The initial values in B
are null. And B0 represents the initial B-form which means initial marking
M0 = {i = B0 }.
3. ϕ is a function from tasks to the set of data constraints.
Figure 1 is an example of application of leaving in government aﬀair processing. In the DDWF-net, B-form is represented by token. The variables in B-form
is changed or copied by tasks which can be ﬁred. Since every task has data constraint, there exists consistency between the B-form and data constraint. When

Fig. 1. An Example of DDWF-net

260

Y. Huang et al.

a task can be ﬁred, we must evaluate whether the B-form satisﬁes its precondition. For example, in Figure 1, if t2 can be ﬁred and days > 60, then there
exists conﬂict with the constraint of t2 . What is more, at the point of choice or
parallel, we must judge whether the preconditions of following tasks have the
relationship of choice or parallel. Actually, the decision-making must be consistent with the control relation. If p3 has one token and the days = 14, dead state
occurs. Therefore, we must give one method to solve these problems. Next, we
deﬁne the property of consistency.
Deﬁnition 8 (Data Consistency of DDWF-net). A DDWF-net N = (P, T,
F ; ϕ, B) is consistent, satisfying the followings:
1. For every marking M which can be reachable from i, if every p in P and
M (p) = 0, domain of every variable in B-form of M (p) is in the union of
respective variables in preconditions of p• .
2. For every place p, the intersection of every variable of preconditions in p• is
empty.
According to the deﬁnition, place p2 in Figure 1 dissatisﬁes item 2, since the
intersection of variable days in the preconditions of t3 , t4 is not empty. Therefore,
data consistency is an import property.

3

Domain Computation Analysis Based on Reduction

Workﬂow process model is a description and speciﬁcation model of business
process. Structural and data conﬂict of process model is hard to be detected
without computer aid. Therefore, an automatic mechanism is essential to discover errors in the model quickly, and the analysis of workﬂow has gradually
become a hot yet diﬃcult spot in the current workﬂow research. In [2], Aalst
WMP made use of the analytical method of Petri nets to verify the soundness
of Wokﬂow net(WF-net). Many scholars share in common with the idea of reduction which can be used to detect conﬂicts in models. The earliest is Sadiq
who proposed several reduction rules to reduce workﬂow graph(acyclic graph)
for detecting structural conﬂict[1]. However, there are no researches based on
data dependence. How to verify the data consistency of a workﬂow model is a
complex problem. In the following, we introduce a domain computation method
based on reduction.
Deﬁnition 9 (Domain Operation). Domain operation gives all the operators
in domain expression.
1. divide(/): a/b means removing the variables in b from a and the result acts
as the return of a/b.
2. symmetry substraction(⊗):a ⊗ b return the common variables and the commutative substraction of their ranges. For example: ((x, y), ({1, 2}, {2, 3})) ⊗
((x, z), ({0, 2}, {1, 3})) = ((x), ({0, 1})).

Analyzing Data Dependence Based on Workﬂow Net

261

3. intersect(∩): a ∩ b return not only the common variables and the intersection
of their ranges but also the diﬀerent variables. For example: ((x, y), ({1, 2},
{2, 3})) ∩ ((x, z), ({0, 2}, {1, 3})) = ((x, y, z), ({2}, {2, 3}, {1, 3})).
4. union (∪): a ∪ b return not only the common variables and the union of their
ranges but also the diﬀerent variables. For example: ((x, y), ({1, 2}, {2, 3})) ∪
((x, z), ({0, 2}, {1, 3})) = ((x, y, z), ({0, 1, 2}, {2, 3}, {1, 3})).
The intersect and union satisfy commutative laws and distributive laws:
1. a ∪ b = b ∪ a, a ∩ b = b ∩ a.
2. (a ∪ b) ∩ c = (a ∪ c) ∩ (b ∪ c).
3. (a ∩ b) ∪ c = (a ∩ c) ∪ (b ∩ c).
In order to relate data constraint to control ﬂow, we deﬁne some conditional
expressions to describe the computation of data constraint. We use the form
(pre1 , post1 ) to represent data constraint.
Deﬁnition 10 (conditional expression(bi-domain computation)).
First, we introduce the basic operators.
1. OR: (pre1 , post1 ) ∨ (pre1 , post2 ) = ((pre1 ∪ pre2 ), post1 ) if post1 = post2 . Its
semantics is if two elements have choice relationship and the same postcondition then the unitary precondition is the union of their preconditions.
2. AND: (pre1 , post1 ) ∧ (pre2 , post2 ) = ((pre1 , post1 ∪ post2 )) if pre1 = pre2 .
Its semantics is if two elements have parallel relationship and the same precondition then the unitary postcondition is the union of their postconditions.
3. ADD: (pre1 , post1 )+(pre2 , post2 ) = (pre1 ∩(pre2 /post1 ), post2∩(post1 /(pre2
∪post2 )) if post1 ⊆ pre2 that means the range of each variable in post1 is
a subset of the rang of respective variable in pre2 . This operation expresses
the simple connection. If ¬post1 ⊆ pre2 , then the expression would return to
an error because of the occurrence of dead lock. Therefore, through estimating the condition, we can judge whether the model has the property of data
consistency.
Then, we introduce distributive laws in operators.
1. ((pre1 , post1 ) ∨ (pre2 , post2 ) · · · ∨ (pren , postn )) + (pre, post) = ((pre1 ∩ (pre/
post1 )) ∪ (pre2 ∩ (pre/post2 ))... ∪ (pren ∩ (pre/postn )), post ∩ ((post1 /(pre ∪
post)) ∪ (post2 /(pre ∪ post)) · · · · · · (postn /(pre ∪ post)))) if post1 ∪ post2 ∪
· · · postn ⊆ pre, otherwise ¬post1 ∪post2 ∪· · · postn ⊆ pre would lead to deadlock and an error would be thrown. Therefore, according to this operator, we
can judge the data consistency.
2. ((pre1 , post1 )∧(pre2 , post2 ) · · ·∧(pren , postn ))+(pre, post) = (pre1 ∩pre2 · · ·∩
pren ∩ pre/post1 ∩ pre/post2 · · · ∩ pre/postn , post ∩ (post1 /(pre ∪ post)) ∩
(post2 /(pre ∪ post)) · · · ∩ (postn /(pre ∪ post))) if post1 , post2 , · · · postn ⊆
pre, otherwise dead lock would occur and an error would be thrown which
dissatisﬁes the data consistency.

262

Y. Huang et al.

3. (pre, post) + ((pre1 , post1 ) ∨ (pre2 , post2 ) · · · ∨ (pren , postn )) = ((pre ∩ (pre1 /
post)) ∪ (pre ∩ (pre2 /post)) · · · ∪ (pre ∩ (pren /post)), post1 ∩ ((post/(pre1 ∪
post1 )) ∪ (post2 ∩ (post/(pre2 ∪ post2 ))) · · · ∪ (postn ∩ (post/(pren ∪ postn )))))
if pre1 ∪ pre2 ∪ · · · pren ⊆ post and ∀i, j, prei ⊗ prej = E(i = j), otherwise
dead lock would occur and an error would be thrown which dissatisﬁes the
data consistency.
4. (pre, post)+((pre1 , post1 )∧(pre2 , post2 ) · · ·∧(pren , postn )) = (pre∩pre1 /post
∩pre2 /post · · · ∩ pren /post, post1 ∩ post2 · · · ∩ postn ∩ (post/(pre1 ∪ post1 )) ∩
(post/(pre2 ∪ post2 )) · · · ∩ (post/(pren ∪ postn )))if post1 , post2 , · · · postn ⊆
pre, otherwise dead lock would occur and an error would be thrown which
dissatisﬁes the data consistency.
Theorem 1 (Expression Consistency). If a conditional expression can be
computed to the form of one bi-domain and the precondition of the respective
bi-domain is E, then the expression is data consistent. And during computing,
if an error is thrown, the expression is data inconsistent.
Because all computations of expressions keep the data consistency, the theorem
naturally comes into existence.
After introducing the conditional expression or domain computation, we must
solve the problem of how to construct the expression in order to compute whether
the DDWF-net has consistent data constraints. We use the reduction rules to
build the conditional expression. The following reduction rules keep soundness in
control ﬂow based on [1]. For the simpleness of reducing procedure, every place
also has the (pre,post) constraint. In the beginning, the constraint of every place
is (E, E) representing no restriction, i.e., all variables can be their typed values.
Reduction 1. The sequential structure which is composed of two places and one
transition can be reduced into a ADD conditional expression. Figure 2 shows the
procedure.
(pre1,post1)

(pre2,post2)

(pre3,post3) (pre1,post1)+(pre2,post2)+(pre3,post3)

Fig. 2. Rule One

(pre1,post1)

(pre2,post2)

(pre3,post3)

(pre1,post1)+(pre2,post2)+(pre3,post3)

Fig. 3. Rule Two

Reduction 2. The sequential structure which is composed of two transitions
and one place can be reduced to a ADD conditional expression. Figure 3 shows
the procedure.
Reduction 3. This rule describes the merging of xor-split and xor-join. Figure
4 shows the procedure.
Reduction 4. This rule describes the merging of and-split and and-join. Figure
5 shows the procedure.

Analyzing Data Dependence Based on Workﬂow Net

Fig. 4. Rule Three

263

Fig. 5. Rule Four

Theorem 2 (Soundness and Data Consistency). If a DDWF-net can be
reduced to one place without any error and the precondition of the respective
bi-domain is E, then DDWF-net is data consistent.
According to [1], that one model can be reduced to one place means the model
is sound. Due to theorem 1, that the conditional expression can be computed
to one bi-domain denotes the model is data consistent. Therefore, this theorem
comes into existence.
We give a DDWF-net which is sound but data inconsistent through applying
reduction rules. Figure 6 shows the example. Its B-form has only three variables
x ∈ {1, 2, 3, 4, 5, 6},y ∈ {0, 1, 2, 3},z ∈ [0, 1]. And the respective data constraints
are: g1 = (E, E), g2 = (x > 2, E), g3 = (x ≤ 2, E), g4 = (y > 2 ∧ x > 4, E), g5 =
(y = 3, E), t1 = (E, (z > 0.5)), t2 = (E, (y > 2)), t3 = (E, (x > 4)), t4 = (E, (z <
0.3 ∧ y = 3)), t5 = (E, (x > 4))t6 = (E, (z > 0.2)), t7 = (E, E), other places are
equal to (E, E).
g2

t4

g1

t2

g3
g4

t5

t3

p1

t7

t1

g5

g1

p2
p3

t6

Fig. 6. DDWF-net with Data Inconsistent

g2
g3

p4
g5

g4

Fig. 7. DDWF-net After First
Reduction

Furthermore, we construct the conditional expression through the reduction
rules. Firstly, we apply the rule one and two to construct conditional expression
which is shown in Figure 7. The respective data constraints are: p1 = t1 , p2 =
t2 , p3 = t3 , p4 = t7 , g2 = (x > 2, (z < 0.3 ∧ y = 3)), g3 = (x ≤ 2, (x > 4)), g4 :=
(y > 2 ∧ x > 4, (z > 0.2)),others remain intact. Secondly, we apply the rule three
and four shown Figure 8. The respective data constraints are: g6 = g2 ∨g3 = (x >
2, (z < 0.3 ∧ y = 3)) ∨ (x ≤ 2, (x > 4)), p5 = p2 ∧ p3 . Thirdly, Figure 9 shows the
third reduction. The respective data constraints are: p6 = p1 +g6 +p4 = (E, (z >
0.5))+((x > 2, (z < 0.3∧y = 3))∨(x ≤ 2, (x > 4)))+(E, E) = (E, (z < 0.3∧y =
3 ∧ x > 4)), p7 = p5 + g4 = (E, (z > 0.2)). At last, we reduce the model into one
place, get one conditional expression, and judge whether it can be computed into
one bi-domain. The conditional expression is g1 + (p6 ∧p7 )+ g5 . It is obvious that
(p6 ∧ p7 ) + g5 can throw an error. Actually, postcondition of (p6 ∧ p7 ) satisﬁes
y = 3, but the precondition of g5 dissatisﬁes y = 3. Though the example is small,
it shows that our method is correct and usable.

264

Y. Huang et al.
p1

g6

g1

p6

p4
g5

p5

g4

Fig. 8. DDWF-net After Second Reduction

4

g5

g1
p7

Fig. 9. DDWF-net After Third
Reduction

Conclusion

This paper presents an extended workﬂow net which can describes business
form and data constraints among tasks acting as the decision conditions. Data
constraint is expressed by bi-domain, and we give an important deﬁnition of consistency related to data dependence. Then, we propose some domain operators
and conditional expressions. During the reduction, we construct the conditional
expression in order to analyze the data consistency. This paper also analyzes an
example to conﬁrm our methods. For further study, we will do more extended
work on veriﬁcation of our workﬂow model and implement a tool based on our
method.

References
1. Wasim Sadiq, Maria E. Orlowska. Applying Graph Reduction Techniques for Identifying Structural Conﬂicts in Process Models. In M.Jarke and A. Oberweis, editors,
Proceedings of the 11th International Conference on Advanced Information Systems
Engineering (CAiSE ’99), Lecture Notes in Computer Science vol. 1626: 195-209.
Springer-Verlag, Berlin, 1999.
2. W.M.P. van der Aalst, The Application of Petri Nets to Workﬂow Management.
Journal of Circuits, Systems and Computers, vol. 8, pp. 21-66, 1998.
3. Kees van Hee, Alexander Serebrenik, Natalia Sidorova, and Marc Voorhoeve, Soundness of Resource-Constrained Workﬂow Nets. Lecture Notes in Computer Science
vol. 3536, pp. 250-267, 2005.
4. Nigel Baker, Alain Bazan, G. Chevenier, Florida Estrella, Zsolt Kovacs, T. Le Flour,
Jean-Marie Le Goﬀ, S. Lieunard, Richard McClatchey, Steve Murray, Jean-Pierre
Vialle, An Object Model for Product and Workﬂow Data Management. Proceedings
of Ninth International Workshop on Database and Expert Systems Applications, pp.
731-738, 1998.
5. Johann Eder and Marek Lehmann, Workﬂow Data Guards, Lecture Notes in Computer Science vol. 3760, pp. 502-519, 2005.
6. Bartosz Kiepuszewski. Expressiveness and Suitability of Languages for Control Flow
Modelling in Workﬂows. PHD thesis, 2002.
7. Yehia Thabet Kotb, Andre Stephan Baumgart. An Extendted Petri net for modeling workﬂow with critical secitons. Proceedings of the 2005 IEEE International
Conference on e-Business Engineering.
8. Jaeho Kim, Woojong Suh, Heeseok Lee. Document-based workﬂow modeling: a casebased reasoning approach. Expert Systems with Applications vol. 23, pp. 77-93, 2002.

