EFoX: A Scalable Method for Extracting
Frequent Subtrees
Juryon Paik, Dong Ryeol Shin, and Ungmo Kim
Dept. of Computer Engineering, Sungkyunkwan University,
300 Chunchun-dong, Jangan-gu, Suwon-si, Gyeonggi-do 440-746, Republic of Korea
quasa277@gmail.com, {drshin, umkim}@ece.skku.ac.kr

Abstract. The more web data sources provide XML data, the greater
information ﬂood problem has been caused. Hence, there have been increasing demands for eﬃcient methods of discovering desirable patterns
from a large collection of XML data. In this paper, we propose a new
and scalable algorithm, EFoX, to mine frequently occurring tree patterns
from a set of labeled trees. The main contribution made by our algorithm
is that there is no need to perform any tree join operation to generate
candidate sets.

1

Introduction

The ﬁrst step toward mining information from XML documents is to ﬁnd frequent
subtrees occurring in a large collection of XML trees. However, the discovery of
frequent subtrees appearing in a large-scaled tree-structured dataset is not an
easy task to do. The main diﬃculties arise in candidate subtrees enumerations
and in pattern tree matching. The problem here is that the enumeration of candidates is typically made by join operations; as the number of XML documents
increases, the eﬃciency of previously developed algorithms deteriorates rapidly.
Hence, it is required to ﬁnd more scalable and less burdensome methods for
extracting frequent subtrees. In this paper, we propose a novel algorithm EFoX
(Extract Frequent subtrees of Xml trees) for eﬃciently ﬁnding frequent subtrees
from a set of XML documents. The proposed algorithm not only reduces significantly the number of tree prunings, but also simpliﬁes greatly each round by
avoiding time-consuming join operations.

2

Related Work

Wang and Liu [4] considered mining of collections of paths in ordered trees by
using Apriori [1] technique. Asai et al. [2] proposed FREQT for mining labeled
This research was supported in part by University IT Research Center Project funded
by the Korean Ministry of Information and Communication and by Korea Science
& Engineering Foundation (R01-2004-000-10755-0).
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 813–817, 2005.
c Springer-Verlag Berlin Heidelberg 2005

814

J. Paik, D.R. Shin, and U. Kim

ordered trees. FREQT uses rightmost expansion notion to generate candidate
trees by attaching new nodes to the rightmost edge of a tree. Zaki [5] proposes
two algorithms, TreeMiner and PatternMatcher, for mining embedded subtrees
from ordered labeled trees. The common problem of the previous approaches is
identiﬁed as follows: Each tree pruning round during generating candidate sets
requires to perform expensive join operations. Therefore, as the number of XML
documents increases, the eﬃciency for extracting frequent subtrees deteriorates
rapidly since both the cost of join operations and the number of pruning rounds
add up.

3

Algorithm EFoX

In this section, we present a new algorithm EFoX for eﬃciently extracting frequent subtrees from a given set of trees. To this end, EFoX consists of two steps;
The ﬁrst one is to create and maintain KidSet to avoid join operations entirely
and reduce the number of candidates. The second step is to extract frequent
subtrees incrementally based on data stored in KidSet.
3.1

Generating KidSet

Let D = {T1 , T2 , . . . , Ti } be a set of trees and let |D| be the number of trees in
D.
Definition 1 (key). Let Kd be a collection of node labels assigned on the nodes
at depth d in every tree in D. (Assume that depth of root node is 0.) We call
each member in Kd by a key.
At this point, note that there may exist some nodes labeled with the same names
in D. Thus, for each key we need to identify the list of trees in which the key
belongs.
Definition 2 (KidSet). A KidSet, [K]d , is defined as a set of pairs (kd , tid )
where kd is a key in Kd and tid is a list of tree indexes in which kd belongs.
According to some minimum support, a collection of KidSets can be classiﬁed
as two classes.
Definition 3 (Frequent). Given some minimum support σ and a pair (kd , tid ),
the key kd is called frequent if |tid | ≥ σ × |D|.
Definition 4 (Frequent Set). Given a KidSet, [K]d , a pair in [K]d is called
Frequent Set if its key is frequent. Otherwise, it is called Candidate Set. We
denote Frequent Set and Candidate Set by [F ]d and [C]d , respectively.
It is required to consider the characteristic of tree structure. This consideration
stems from the fact that same labels can be placed several times throughout a
XML tree.

EFoX: A Scalable Method for Extracting Frequent Subtrees

815

Cross-Reference operation. Let FS = {[F ]0 , [F ]1 , . . . , [F ]d } be an initial set
of Frequent Sets and CS = {[C]0 , [C]1 , . . . , [C]d } be an initial set of Candidate
Sets. Let i be one of integers 0 < i ≤ d. One round of cross-reference operation consists of following two phases:
– Phase 1. Compute ([F ]i vs. [C]i−1 ) and ([C]i vs. [F ]i−1 to [F ]0 ).
The purpose of this step is to eliminate pairs from Candidate Sets, which
are actually the pairs included in any previous Frequent Sets. We reduce a
number of pairs in Candidate Sets signiﬁcantly due to this phase.
– Phase 2. Compute ([C]i vs. [C]i−1 ).
This step adopts Apriori-style. However, the eﬃciency is dramatically improved since there exists no join operation between labels to generate candidate sets. Through this phase, we derives (not generate) Candidate Set
with union operation. Because of the hierarchical KidSet structure, it is
not required to generate candidate paths and additional candidate pairs by
using join operations. At every end of a round, [C]i unions all pairs not
belonged to any Frequent Sets between [F ]0 and [F ]i−1 . Consequently, two
consecutive Candidate Sets are always processed to ﬁnd additional frequent
elements.
3.2

Mining Frequent Subtrees

The ﬁnal set of Frequent Sets contains all keys which are frequent. However, not
every Frequent Set has elements, and not every key has connection each other.
We don’t consider the empty sets because an empty Frequent Set implies that
any label can be placed. The ﬁrstly appeared nonempty Frequent Set stores the
keys which are root nodes of frequent subtrees. Based on those nodes, frequent
subtrees are incrementally obtained by forming paths with keys in the rest Frequent Sets. During construction of frequent subtrees, they are extracted from
the trees as shown by Theorem 1.
Theorem 1 Correctness of EFoX. The bigger frequent subtree is always
expanded from one of the smaller frequent subtrees.
Proof. omitted due to lack of space.

4

Evaluation

To evaluate the eﬀectiveness and the scalability of our algorithm, we carried out
a couple of experiments on artiﬁcially generated medium-size data sets by tree
generator described in [3]. We evaluated EFoX over the generic algorithm FSM.
The basic idea of behind FSM is to identify frequent subtrees through a repeated
process of enumerating and pruning candidate subtrees. Two synthetic data set,
S15 (σ = 0.15) and T10K (T = 10000), were tested. The generator mimics three
target frequent trees reﬂecting predeﬁned parameters. We refer the reader to the
paper [3] for a detailed explanation of using parameters.

816

J. Paik, D.R. Shin, and U. Kim

The execution time for data set S15 with varying number of input trees is
shown in Fig. 1(a). It can be seen that EFoX demonstrates a dramatic improvement over the generic frame FSM. Fig. 1(b) shows the execution time for data
set T10K with changing minimum support. The execution time decreases as the
minimum support increases in both algorithms, but there is signiﬁcant time difference between them. We stopped to run FSM since the running time exceeds
several hours.

100

8000
FSM

FSM

7000

EFoX

7684

EFoX

80

CPU Time (sec)

CPU Time (sec)

6000
60

40

5000
4000
3000
2000

20

1000
0
1000

2000

4000
Number of Trees

8000

(a) Scalability : Data set S15

16000

0

31

0.05

17

9.7

113

0.1 Minimum Support 0.15

6

2.4

0.2

(b) Eﬃciency : Data set T10K

Fig. 1. Execution Time

5

Conclusion

A new type of tree mining has been deﬁned in the paper. A new algorithm,
EFoX, is proposed to discover frequent subtrees. The algorithm uses a special
data structure, KidSet, to manipulate frequent node labels and tree indexes.
EFoX is evaluated with artiﬁcial medium-size data sets. Our experimental results
show that EFoX performs much better than generic frame FPM, both in terms of
scalability and eﬃciency. We need further research to adapt the current proposed
methodology to both synonym and polysemy of each element of XML trees, for
use in other XML mining operations, namely, clustering or classiﬁcation.

References
1. R. Agrawal and R. Srikant. Fast algorithms for mining association rules in large
databases. In Proc. of the 12th International Conference on Very Large Databases,
pp487–499, 1994.
2. T. Asai, K. Abe, S. Kawasoe, H. Arimura, H. Sakamoto, and S. Arikawa. Eﬃcient
substructure discovery from large semi-structured data. In Proc. of the 2nd SIAM
International Conference on Data Mining (ICDM’02), 2002.

EFoX: A Scalable Method for Extracting Frequent Subtrees

817

3. A. Termier, M-C. Rousset, and M. Sebag. TreeFinder : a First step towards
XML data mining. In Proc. of IEEE International Conference on Data Mining
(ICDM’02), pp.450–457, 2002.
4. K. Wang, and H. Liu. Schema discovery for semistructured data. In Proc. of the
3rd International Conference on Knowledge Discovery and Data Mining (KDD’97),
pp.271–274, 1997.
5. M. J. Zaki. Eﬃciently mining frequent trees in a forest. In Proc. of the 8th
ACM SIGKDD International Conference on Knowledge Discovery and Data mining
(KDD’02), pp.71–80, 2002.

