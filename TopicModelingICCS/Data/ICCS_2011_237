Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 471–478

International Conference on Computational Science, ICCS 2011

ASIODS - An Asynchronous and Smart I/O Delegation System
Maxime R. Huguesa,c,1,∗, Michael Morettib , Serge G. Petitonc , Henri Calandraa
a Total

Exploration & Production, Pau, France
Networks, Mountain View, California 94043, USA
Laboratoire d’Informatique Fondamentale de Lille, Lille, France

b DataDirect
c CNRS/LIFL,

Abstract
In high performance computing, many large scientiﬁc and engineering problems are solved on a supercomputer
which is the gathering of two specialized entities, one dedicated to computations and another one to I/O. Many
applications to settle problems have deterministic behaviors in computations and I/O. This knowledge may be used
to load data in advance or delegate data writing on dedicated nodes. Thereby, it could be interesting to use the
specialized parts of the supercomputer and this knowledge in order to have a better cache management by uncoupling
computations and I/O. This has led to the design and evaluation of a ﬁrst prototype of ASIODS. This paper presents
the architecture of our approach and the results obtained showing the concept capabilities. We demonstrate that the
approach reduces the execution time by avoiding I/O access penalties.
Keywords: I/O Delegation, Graph Description, Distributed System

1. Introduction
Petascale supercomputers are already available and exascale machines are on the way to accelerate the resolution
of numerous challenges like climate change, genomics, physics and to get a higher image deﬁnition of the subsurface
to discover oil and gas. These many sustaining petaﬂops machines should be very complex and before using it
there are many issues that computer scientists must face such as fault tolerance, energy consumption, network and
storage performance. Programming is also a challenge because of the machine architecture that should be composed
of different hardware levels: large cluster, very high speed optical interconnect between sockets, massively multicore
processors and probably accelerators (GPU, Many Integrated Core, FPGA). Each level should have its own convenient
parallelism and thus the programming of these machines should be hard to use efﬁciently the various parallelism levels.
Programming paradigm may change to a more adapted model which will be able to take into account these levels and
users expertise. For this class of supercomputers, the amount of data will also grow in relation to the computing
power on one hand because of the numerous data to analyze in input and on another hand because applications will
make use of the computing power to deliver a higher accuracy of the problem that will generate a deluge of data.
More than hundred petabytes and a bandwidth around TB/s will be necessary to run some experiments. Therefore,
∗

Email address: maxime.hugues@total.com (Henri Calandra)
author

1 Corresponding

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.049

472

Maxime R. Hugues et al. / Procedia Computer Science 4 (2011) 471–478

the storage performance will be a big issue to reach the maximum throughput of applications. However, this is an
ongoing problem for common applications which generate and rely on a large data set, like in oil and gas with seismic
imaging applications. To improve storage performances, one of the main techniques is to keep the last recently used
data in the system memory to get a faster access. This method is named caching and allows to take advantage of the
larger memory bandwidth and to hide the latency of hard drives. Nevertheless, this technique is limited as it does not
give the opportunity to retrieve data faster for applications with irregular I/O accesses. One solution is to anticipate
data reading by copying data in advance from the storage to a memory zone that has a low latency and a fast rate
access. This is commonly called data prefetching.
Many algorithm of scientiﬁc computing are composed of computation steps that can be determined at compile or
running time. So the number of operations, data exchanges and the I/O are deterministics and known by users. This
knowledge could be harnessed to prefetch data and delegate data writing in an asynchronous and smarter way in
order to overlap computations and communications. We propose in cooperation with DataDirect Networks (DDN), a
storage solution company for high performance computing, to explore an asynchronous and smart I/O approach based
on user expertise. DDN has recently released a new product which offers an open part for users to run a piece of
code directly on the storage system. Our proposition is to delegate I/O on this new solution which avoids to sacriﬁce
some computing nodes for prefetching and delegation and take advantage of it by using the I/O dependency graph of
applications. Dependencies have the great interest to offer a smarter management of prefetching in an asynchronous
way that leads to develop and evaluate an asynchronous and smart I/O delegation system (ASIODS) presented in this
paper. The next section outlines some related works in I/O optimization such as I/O forwarding and delegation. The
third section outlines the new DDN storage system, SFA10000E, and explains the advantages of it. The fourth section
presents the architecture of ASIODS and explains its design to process ﬁles asynchronously and exchange data with
computation processes. In the following, the approach is compared to a classical I/O version of a BLAS3 operation in
order to observe the execution speed up and analyze the behavior of the software in the ﬁfth section. The last section
discusses about the obtained results and presents the future extension of the software platform.
2. Related Work
To improve storage performances, the main optimization of ﬁle system is to keep the most recent used data in
system memory to get a faster access. This method is named caching and allows to take advantage of the read output
of RAM which is 10 times faster and has a lower latency than hard drives. In parallel and distributed programming,
the most common used library (MPI) offers some I/O optimizations with ROMIO [1] such as caching or collective
operations. Some other researches have increased performances by delegating I/O operations, also known as I/O
forwarding, to a subset of nodes [2] [3] to avoid the disk contention and to not overload disks with a huge number
of requests. The mix of both ideas has been tried and is successful to increase storage performances by delegating
I/O and caching on a system formed by a group of nodes [4]. All of these techniques rely on collective I/O, caching
and I/O forwarding to optimize disk accesses and by keeping most recent used data in a fast memory zone. However,
this kind of technique is limited and does not give the possibility to use efﬁciently the cache for irregular I/O accesses
and take in account the user expertise on applications. One solution is to prefetch data in a memory zone which
has a fast rate and a low latency. Our proposal use this knowledge and in contrary to the proposed approach does
not rely on speciﬁc operating system to make I/O forwarding. In [5], a fragment of application is ﬁrstly run to
identify future I/O references and generate prefetch requests. Our approach does not use a pre-execution to determine
prefetch requests but I/O are expressed in relation to tasks separately from the computation code by the end-user.
Despite our ﬁrst implementation lacks of maturity and is not completed, it offers to insulate computations and I/O
by using the parallelism is expressed at a high level by end-users. These expressions come from the fact that many
algorithm of scientiﬁc computing are deterministics in number of operations, data exchange and I/O. Therefore, this
knowledge may be used to prefetch data in a smart way and may offer to overlap computations and communications.
The memory zone where data are put in advance could be also used to write data asynchronously on the storage. We
propose to explore an advanced approach for an asynchronous and smart I/O management based on the I/O delegation
for prefetching or write through on a dedicated part by using the I/O dependency graph of applications.

Maxime R. Hugues et al. / Procedia Computer Science 4 (2011) 471–478

473

3. DataDirect Networks SFA10000E
SFA10000E is a new technology from DDN which lowers the I/O latency and provides enough CPU to run
applications inside the storage by using virtualization. This architecture has the advantage when application program
halts/crashes for any reasons, the underlying storage continues functioning. One controller also helps eliminate up to
6 servers in the cluster, and the accompanying infrastructure complexity and power requirements. Those capabilities
rely on a new architecture of the SFA10000E controller which is composed of two Intel Westmere processors. One
is exclusively assigned to run RAID which processes I/O requests to SATA or SAS drives and this allows the RAID
subsystem to use all of their resources to realize high-performance RAID. Different levels of RAID are supported
such as RAID 1,5 and 6. This part is insulated from the outside world by using virtualization. The second processor
is devoted to run up to 6 virtual machines (VM) per controller. Users can tune the virtual machine conﬁguration up
to 6 cores and 48GB of memory and use their preferred operating system, such as Linux or Windows, through an
ISO image with or without the SFA Virtual Disk Driver which allows to access to the RAID space and storage. The
driver presents the back-end SFA storage as standard block devices in the VM OS. Users have also the possibility
to select which RAID virtual disk is presented in which VM. A shared-memory architecture between the RAID and
VMs allows fast access to the storage and a very little performance degradation in VMs. PCIe devices may be bound
to VMs such as InﬁniBand (IB) or Gigabits Ethernet (GigE) card to provide high-speed network interfaces. Those
are dedicated to VMs and not shared among in order to give the entire bandwidth of the network card to the VMs.
All these features provide to reach a throughout of 5GB/s or more from a controller-pair and a storage capacity up to
1.2PB.
4. ASIODS Design
Supercomputers are designed to achieve high performance for intensive computing by running many thousand
cores interconnected through a high bandwidth network and a shared high performing storage. However, machines can
be seen as a distributed system composed of two subsets. The ﬁrst one is composed of cores dedicated to computations
and the second one is a set of cores and disks of the storage. Both are thus in charge of speciﬁc tasks. The I/O
delegation allows to take advantage of the specialization by separating concerns of computations on the Cluster part
and storage accesses on Storage part. Both parts realize data exchange through a memory zone named the Global
Buffer Memory (GBM), as shown on the ﬁgure 1. The Cluster part (red circle) is composed of cores dedicated to
computations (small pink circle). The computation cores execute scientiﬁc kernels of the parallel application. One
node of the Cluster or outside, the Master, does not run any computations and is in charge to manage the application
execution. It has the graph of I/O dependencies, each node of the graph corresponds to a task associated to different
ﬁles needed, the size of data, the offset, the process ranks and a completion status of the I/O. Each I/O is considered
as a request and all are sent to the I/O Manager of the Storage part in order to make a copy. A synchronization is
regularly made between both parts to update the completion status which are used to authorize computation cores to
read or write data into the GBM. The Storage part (green circle) is composed of cores dedicated to the storage (small
green circle) and an I/O Manager process. The I/O Manager is in charge to receive the requests from the Master
and to dispatch them to the storage cores. Each storage core has its own request list to process and manages the
space available of its physical memory which belongs to the GBM. The I/O Manager is synchronized with storage
cores to know the completion status of each request and the space available into the GBM. To exchange data between
computation and storage cores, a memory zone is deﬁned, the Global Buffer Memory. Data are placed in this memory
in order to be processed from or to the storage. The properties of the memory zone are very low latency and high
read/write performances, in fact better than the storage system drives. The GBM is physically distributed among many
devices to load balance the processing burden and reach a large space of exchange which is considered as one memory
space managed by the I/O Manager. Device is a generic word to refer to various storage elements which can be of
different natures. It can be a bunch of Solid State Disk (SSD) set on each nodes to give a large and fast storage for
each processor, some distributed memory on non-used nodes of the Cluster to transfer needed data as close as possible
of processors or storage nodes to enhance caching capabilities by reading in advance data. All these conﬁgurations
depend on the most suitable strategy for a determined application because they have some trade-offs.
In our implementation of the design, end-user declares I/O and task dependencies through an API which takes
as parameters the ﬁle name, the offset, the size, the number of accesses and the task name. These dependencies are

474

Maxime R. Hugues et al. / Procedia Computer Science 4 (2011) 471–478

Figure 1: ASIODS Architecture

handled by the Master as an ordered list that is planned to be extended by a graph and high level management of tasks
in a next version to get a transparent support. It is composed of two threads, one dedicated to send and synchronize
the request list with the I/O Manager and the second is in charge to give authorization to computation cores to access
at the GBM. The thread receives the access request and looks for it in the request list if the completion status has been
set to complete. It after returns to the computation core to access at the GBM or block it until the request is processed
on the Storage part. The I/O Manager is also composed of two threads, one to receive and synchronize requests with
the Master and a second to dispatch and synchronize requests among storage cores. In this paper, we have chosen to
apply the available RAM on SFA10000E as the GBM to avoid the sacriﬁce of computation cores to the delegation and
prefetching. However, we can notice that the implement of ASIODS is independent from the DDN platform and can
run over different ﬁle system. As a consequence, each storage core controls ﬁve threads. One is dedicated to interact
with the I/O Manager. Two threads process I/O of request in a FIFO order between the storage and the GBM. Finally,
two threads are in charge to send and receive data from the GBM to computation cores.
5. Performance Evaluation
After the presentation of the design, this section presents the performance results of ASIODS in order to evaluate
our approach and to ﬁnd improvement points. Experiments are based on a platform composed of one client for
computations and one product development controller of SFA10000E which are directly interconnected through an
InﬁniBand link. The client and the VM conﬁguration which runs on SFA10000E are given in the table 1. In the VM,
12 virtual drives are presented and formatted with the GPFS ﬁle system to provide a total capacity of 5.5TB. For our
evaluation, we have chosen to take advantage of the open space to users on the storage platform and use as GBM the
memory available in the VM, i.e. 10GB. Experiments compare performances of a block matrix product algorithm with
classical I/O and with ASIODS. Only the blocks in input are retrieved from the storage. Various number of blocks
and block sizes of the algorithm have been set to modify the number of I/O and see the performance behaviors.

Maxime R. Hugues et al. / Procedia Computer Science 4 (2011) 471–478

Name
VM-Singlet
(SFA-10Ke)
Client

Virtual Drives
12

475

Processor
Cores
Memory
Network
Xeon E5530 2.40 GHz
4
10GB
Mellanox IB
(Nehalem)
4xQDR (40 Gb/s)
2x Xeon E5410 2.33 GHz
8
16GB
Mellanox IB
(Harpertown)
4xQDR (40 Gb/s)
Storage Conﬁguration
File System
Capacity
GPFS Read Bandwidth
GPFS
5.5 TB
2.7 GB/s
Table 1: Hardware Resources

5.1. Block Matrix Product Algorithm
The classical version of the algorithm computes successively a product between each element of a row and each
element of a column of two dense matrices, A and B, and sums the result of each element product which is an element
of a result dense matrix C. For the blocked version, dense matrices A, B and C are deﬁned and partitioned into
NbBlock × NbBlock blocks of dimension BlockS ize × BlockS ize. Each block is also divided into sub-block of a ﬁxed
size (2000 × 2000) in order to increase the number of read accesses. To process the product, this version uses the
algorithm 1 which has 3 loops to multiply each block row I of A by each block column J of B, sums the block I,J
of C and put the result into it. We notice that a matrix-matrix product is realized to multiply each block. To run it
on many cores, the algorithm is parallelized with MPI (Message Passing Interface) by allocating each block C[I,J]
computations on a core such as rank = I ∗ NbBlock + J. The algorithm order is of NbBlock3 and runs on p cores such
as p = NbBlock2 . We have developed three versions of the block matrix multiplication in order to compare the peak
performance reachable by the application in different modes. The ﬁrst one is named No I/O which computes all data
from RAM. The second one is named Classical I/O reads at each step of the loop K the blocks A[I,K] and B[K,J] and
keep in RAM the block C[I,J]. The third one is our approach of I/O delegation and is named ASIODS. The Master
sends all I/O to the I/O Manager which registers it. The computation processes ask for data in the same way as the
Classical I/O version and receive it when they are loaded in the GSM. Thereby, the Classical I/O and ASIODS version
have the same I/O behavior and read 2 ∗ (NbBlock × Blocksize/2000)3 blocks during their execution.
Algorithm 1 Block Matrix Product Algorithm
Require: A (partitioned into NbBlock × NbBlock)
Ensure: C = A × B
for I = 1 to NbBlock do
for J = 1 to NbBlock do
for K = 1 to NbBlock do
C I J = AIK × BK J
end for
end for
end for

5.2. Performance Results
The knowledge of the relation between tasks and their I/O needs offers the opportunity to have a better cache
management by moving in advance necessary data from the storage to a memory zone with a higher throughput.
ASIODS is aware of these information and also insulates I/O by delegating these operations on a dedicated node, the
SFA10000E in our case. Thereby, our approach may accelerate accesses to the storage in comparison to a classical
I/O use. For a block matrix multiplication partitioned into 2 × 2, 4 processes are executed in parallel and get back
at each computation step two blocks of matrix A and B from the storage. The implementation of the algorithm with
ASIODS gives an average of 8% of execution improvement than the version with the classical I/O, as shown on the
ﬁgure 2. Moreover, the performance gap becomes smaller between ASIODS and the No I/O version which is the peak
performance sustainable by the application.

476

Maxime R. Hugues et al. / Procedia Computer Science 4 (2011) 471–478

Figure 2: Performance for a block matrix product of 2x2 blocks

To evaluate our approach with a higher number of requests at the same time, the block matrix product is now
partitionned into 3 × 3 blocks and run 9 processes in parallel. As shown on the ﬁgure 3, ASIODS gives 11% of
execution improvement than the Classical I/O version for a block size of 2000 × 2000 and it is still achieving good
performances on other cases. However, results decrease as the block size grows, i.e. number of I/O. This comes from
the data status checking between the Master and the computation processes in order to give the authorization access
to the GBM. In our implementation of ASIODS, only one thread is dedicated to receive requests to check if data are
ready or not to be retrieved for computations. It creates a communication bottleneck that we plan to correct in a next
version.
In previous experiments, both versions have been evaluated by modifying the problem size to increase the number
of I/O. Data size to retrieve from the storage was at a ﬁxed dimension that have a constant I/O access time and did not
signiﬁcantly involve the network latency. The ratio between computation time of sub-block products and I/O access
time to get data was thus kept at the same value. We now propose to play on these parameters by ﬁxing the block
size and by modifying variously the size of sub-blocks. A matrix block in our algorithm is divided into sub-blocks
which are read from storage at each computation step. Smaller is the sub-block size, higher is the number of subblocks and thus the amount of I/O which takes a higher part of the computation time. ASIODS also achieves good
performances with an average of 10% of acceleration in comparison to a classical I/O usage. This result is especially
for small sub-block cases in which more data are read in advance and placed in the global buffer memory. It allows
to hide the disk latency that is more important when a small data set must be read and play a higher part in the global
execution time, in particularly when the range of data to process has a short computation time. However, ASIODS
generates a penalty for larger sub-blocks when blocks have a small division and the amount of I/O decreases. In our
model, the Master sends requests to the I/O Manager which has to move forward from the storage to the GBM. The
transmission of requests and the synchronization between both parts is impacted by the network latency that involves
lower performance on large sub-blocks. It was not clear on previous experiments because the amount of data read in
advance was sufﬁcient to hide this problem. In these cases also, the computation time of sub-blocks is higher than the
I/O access time which involves a lower contribution of I/O in the global computation time. ASIODS should improve
the performance, a little bit less because of this point, but the request processing is also in cause of this performance
degradation. The request transmission and processing must be improved in a next version in order for our approach

Maxime R. Hugues et al. / Procedia Computer Science 4 (2011) 471–478

477

Figure 3: Performance for a block matrix product of 3x3 blocks

to be efﬁcient in most I/O cases. Despite the fast ASIODS suffers from performance loss. The approach offers a
segregation between computation and I/O and so a more transparent way for end-users to use efﬁcient I/O by taking
advantage of smarter cache management.
6. Conclusion and Future Work
In this paper, we have presented the design of an asynchronous and smart I/O delegation system and have evaluated
the ﬁrst implementation in order to validate the proof of concept and its potential. The simple algorithm benchmark
with a low I/O bandwidth has demonstrated an execution improvement of 8% than a classical I/O usage by moving
in advance data from storage to a high throughput memory zone in order to get faster accesses and hide disk latency.
Performance speedup obtained is not very high and without our approach can be balanced with a supplementary
I/O rack in order to get more I/O bandwidth. However, results have shown ASIODS helps to go closer to the peak
performance of the application and we have explained the source of performance degradation. Problems are the
transmission latency of requests between the Master which knows the relation tasks dependencies and I/O and the I/O
Manager which is in charge to move data from the storage to a memory zone with a higher throughput, the GBM. The
request processing by the I/O Manager was also detected as a bottleneck. We plan in a second stage to improve these
points and extend the evaluation to write performances on a real application.
Moreover, ASIODS allows to hide disk latency by reading advance data and also avoid disk contention by minimizing the number of clients which access the storage at a time. The relation knowledge between task dependencies
and I/O gives a more end-users approach in which I/O are expressed at a high level and are transparently processed
and optimized. We have observed during the implementation of our benchmark that is easy to describe the task dependencies and I/O for a simple application with common programming language but it should be more complex for
direct methods. A better way and more end-users oriented to express task dependencies should investigate such as the
graph description language of YML [6]. With a high level programming language and the description of the relation
between tasks dependencies and I/O offer a way to integrate I/O into a programming model for Excascale supercomputers. The delegation is also an interesting point for some applications which need to apply a pre or post-processing
treatment on data, such as some computational ﬂuid dynamic applications. This operation with our approach and

478

Maxime R. Hugues et al. / Procedia Computer Science 4 (2011) 471–478

Figure 4: Performance for 3x3 blocks with a ﬁxed block size of 10000 × 10000

the ﬁltering approach of DataCutter [7] could be put together in order to delegate on a node pre and post-processing
treatment and thus speedup execution of parallel and distributed applications.
7. References
[1] R. Thakur, W. Gropp, E. Lusk, Users Guide for ROMIO: A High-Performance, Portable MPI-IO Implementation, Mathematics and Computer
Science Division, Argonne National Laboratory, aNL/MCS-TM-234 (Oct. 1997).
[2] A. Nisar, W.-k. Liao, A. Choudhary, Accelerating I/O Forwarding in IBM Blue Gene/P Systems, in: SC ’10: Proceedings of the 2010
ACM/IEEE conference on Supercomputing, IEEE Press, 2010.
[3] N. Ali, P. Carns, K. Iskra, D. Kempe, S. Lang, R. Latham, R. Ross, L. Ward, P. Sadayappan, Scalable I/O Forwarding Framework for HighPerformance Computing Systems, in: IEEE International Conference on Cluster Computing, 2009.
[4] A. Nisar, W.-k. Liao, A. Choudhary, Scaling Parallel I/O Performance Through I/O Delegate and Caching System, in: SC ’08: Proceedings of
the 2008 ACM/IEEE conference on Supercomputing, IEEE Press, Piscataway, NJ, USA, 2008, pp. 1–12.
[5] J. Blas, F. Isaila, J. Carretero, R. Latham, R. Ross, Multiple-Level MPI File Write-Back and Prefetching for Blue Gene Systems, in: M. Ropo,
J. Westerholm, J. Dongarra (Eds.), Recent Advances in Parallel Virtual Machine and Message Passing Interface, Vol. 5759 of Lecture Notes in
Computer Science, Springer Berlin / Heidelberg, 2009, pp. 164–173.
[6] O. Delannoy, N. Emad, S. G. Petiton, Workﬂow Global Computing with YML, in: Proceedings of the 7th IEEE/ACM International Conference
on Grid Computing, 2006, pp. 25–32.
[7] S. M. Beynon, M. Beynon, R. Ferreira, T. Kurc, A. Sussman, J. Saltz, J. H. Medical, DataCutter: Middleware for Filtering Very Large Scientiﬁc
Datasets on Archival Storage, in: In IEEE Symposium on Mass Storage Systems, IEEE Computer Society Press, 2000, pp. 119–133.

