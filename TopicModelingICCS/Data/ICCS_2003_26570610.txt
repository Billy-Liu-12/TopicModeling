Fast Parallel Algorithm for Volume Rendering
and Its Experiment on Computational Grid
Hyung-Jun Kim, Sung-Up Jo, Yong-won Kwon, So-Hyun Ryu,
Yong-je Woo, Chang-Sung Jeong1 , and Hyoungwoo Park2
1

Department of Electronics Engineering, Korea University
1-5Ka, Anam-dong, Sungbuk-ku, 136-701, Korea
csjeong@charlie.korea.ac.kr
2
Supercomputing Center, KISTI, Daejeon, Korea

Abstract. In this paper we present a fast and well balanced parallel
algorithm for volume rendering, and shows our experimental result on
Grid computing environment. Our algorithm is based on a new dynamic
space leaping method of forward projection, and we shall show that the
exploitation of load balancing through the dynamic distribution of data
obtained during the execution of the forward projection and the reduction in time taken for the traversal of data and image space sharply
speed up the whole algorithm. We implement the parallel ray casting
algorithm on computational grid which consists of various heterogenous
machines, and have shown that it has relatively good speedup due to the
well organized dynamic load balancing.

1

Introduction

Advances in high speed network and powerful computers make it possible to
construct a large-scale high performance distributed computing environments,
called a computational grid which uses networks of computers as a single uniﬁed
computing resource[1]. Computational grid enables large-scale scientiﬁc research
to better utilize distributed, heterogeneous resources to solve a computational intensive applications by supporting a common set of services and capabilities that
are deployed across resources. Globus establishes a software framework for grid
infrastructure by providing a meta computer toolkit, called Globus toolkit[2].
In this paper we present a fast and well balanced parallel algorithm for volume
rendering, one of the computation intensive problems in visualization area, and
shows our experimental result on computational grid using Globus toolkit.
Volume rendering is a technique for visualizing 3D arrays of sampled data.
It has applications in various areas such as medical imaging and scientiﬁc
visualization[3]. However, since volume rendering requires high computational
costs, the parallel implementation of volume rendering is essential. There have
This work has been supported by KIPA-Information Technology Research Center,
University research program by Ministry of Information & Communication, and
Brain Korea 21 projects in 2003
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 610–618, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Fast Parallel Algorithm for Volume Rendering

611

been developed a lot of the parallel techniques developed for volume rendering,
but ray casting is one of the volume rendering technique well suited for parallel processing. In ray casting, a ray is casted from the viewpoint through each
image pixel and tested for intersection with the volume data. If a ray intersects
the volume, the contents of the volume along the ray are sampled, transformed
into color and opacity, and composited, and the resulting value is taken as the
pixel contents. Ray casting speeds can be improved by a variety of acceleration methods such as adaptive termination[5,7], adaptive sampling rate along
the ray, adaptive reﬁnement, spatial coherency between rays, and space leaping
method[8]. In this paper, we are concerned with the design of the parallel ray
casting algorithm based on space leaping method.
A number of parallel ray casting algorithms have been reported in the
literature[9,10]. They exploit either image space or object space partition, and
each partitioned element is executed as a task in parallel. However, the previous
parallel algorithms have some diﬃculties and limits in load balancing due to the
diﬀerence of the computation time taken for each ray traversal. In this paper we
present a fast and well balanced parallel ray casting algorithm based on dynamic
space leaping technique. We shall show that the load balancing by the dynamic
distribution of data obtained during the execution of the forward projection and
the reduction in time taken for the traversal of data and image space sharply
speed up the whole algorithm.
The outline of our paper is as follows: In section 2, we describe basic idea
of dynamic space leaping method brieﬂy. In section 3, we give a parallel casting
algorithm using dynamic space leaping method, and in section 4, we explain
the experimental result which shows the signiﬁcant speed up of our method. In
section 5, we give a conclusion.

2

Basic Idea

One of the most widely used and eﬀective acceleration techniques for ray casting
is to eﬃciently traverse or altogether skip the empty data space and implement
re-sampling process only in non-empty data space. This method is called space
leaping. In this section we describe a dynamic space leaping method our parallel
algorithm is based on.
Space-leaping method skips empty data space to reduce rendering time effectively. However, most of the previous space-leaping methods has three drawbacks which may degrade the whole performance: First, they require a complex
ray traversal algorithm in 3D space to skip empty data space or additional 3D
memory as large as original volume data to store information on transparent
voxels[12,9,10]. Second, they generate rays for all the pixels in the screen even
though some of them are assigned no value since the rays emitted through those
pixels do not intersect any objects in data space[6,12,7]. Third, they has some
limit in achieving load balancing for ﬁnding non-empty data space or valid image pixels due to the static data distribution[11]. Our dynamic space leaping
method overcomes the drawbacks by not only performing eﬃcient skipping pro-

612

H.-J. Kim et al.

Fig. 1. Forward Projection – Active pixel and active depth

cess in data and image space and but also executing dynamic load balancing for
data relevant to the skipping process.
If the ray through a pixel in the screen intersects any non-empty voxel during
the traversal through data space, the pixel contributes to the ﬁnal image, and
is called active pixel; otherwise nonactive pixel. Since nonactive pixel does not
contribute to the ﬁnal image and ray does not have to be casted for the nonactive
pixel, skipping nonactive pixels in the image space and casting rays only for the
active pixels can speed up the whole algorithm in addition to skipping empty
space for each ray as in the previous space leaping method.
Dynamic space leaping method not only identiﬁes active pixels, but also
stores, in each active pixel, the coordinates of the ﬁrst and last non-empty voxels encountered by the ray emitted at that pixel. (See ﬁgure 1.) The ﬁrst and last
non-empty voxels are called nearest and farthest active voxels and their coordinates nearest and farthest active depths respectively. Then, we can start the ray
traversal for each active pixel directly from the nearest active depth and stop it
at the farthest active depth instead of traversing the entire propagation path.
Therefore, we do not need the complex ray traversal algorithm to skip empty
space since active depths directly indicate the points where the ray starts and
stops the traversal through data space.
The acceleration technique of dynamic space leaping method is based on
forward projection which maps each voxel in volume data onto the screen in
order to ﬁnd active pixels and active depths and dynamic distribution of data
obtained during forward projection to speed up the calculation of active pixels
and active depths as well as the values for each active pixel. During the traversal
of volume data, non-empty voxel is projected onto a pixel in the image screen,
and the projected pixel is identiﬁed as an active pixel, and the coordinate of the

Fast Parallel Algorithm for Volume Rendering

613

projected voxel is stored to ﬁnd the nearest and farthest depths of the pixel.
However, traversing all the voxels one by one is not eﬃcient even though it is
easy and simple, since it may waste a great amount of time on traversing empty
voxels. Our forward projection method makes use of run-length encoded volume
data and line drawing algorithm to further improve its speed. By traversing line
by line and then slice by slice along volume data, a run-length encoded data
is generated which is a series of empty or non-empty voxel runs. By using runlength encoded volume data, we can accelerate the forward projection algorithm
by skipping all the empty voxel runs at once. However, it still takes some time
to process non-empty voxel run, since we need to traverse each voxel in the
non-empty voxel run one by one to project it to the screen. In order to further
accelerate the projection process of non-empty voxel run, we exploit line drawing
algorithm. For each non-empty voxel run during the traversal of the run-length
encoding volume data, its ﬁrst and last voxels are projected onto the screen, and
their corresponding two active pixels are found respectively. Then, the active
pixels corresponding to the other voxels of the run are calculated by applying
line drawing algorithm to those two active pixels as start and ending pixels
respectively. Finally, for each active pixel, its depth to the corresponding voxel
is obtained by linear interpolation between the depths of the ﬁrst and last active
pixels. Due to the diﬀerence of the length of voxel run and ray traversal path for
each active pixel, there are diﬀerences in time taken to calculate active pixels and
active depths for each voxel run and to ﬁnd value for each active pixel during the
traversal through volume data. In dynamic space leaping method, voxel runs and
active pixels obtained during the forward projection are dynamically distributed
among processes to achieve load balancing for calculating active pixels and active
depths, and their values respectively.

3

Parallel Volume Rendering

In this section, we describe a parallel algorithm using the dynamic space leaping method. Our parallel algorithm consists of two phases: calculation of active
pixels and active depths for each active pixel, and calculation of values for each
active pixel on the screen in the second phase. Our parallel ray casting algorithm
achieves the speed up by dynamic distribution of voxel runs for the calculation of
active pixels and depths in the line drawing algorithm in the ﬁrst phase, and the
dynamic distribution of active pixels for the calculation of their values through
ray traversal in the second phase respectively. In addition, it reduces time taken
to traverse in data and image space by skipping empty voxels and non-active
pixels respectively during forward projection.
3.1

Initial Conﬁguration

Volume rendering requires a large amount of computing power due to its inherent high computational costs. Since Grid supports easy and eﬃcient access

614

H.-J. Kim et al.

Fig. 2. Master-slave parallel model created by GRAM

to numerous distributed heterogenous computing resources, it provides a computing environment well suited for the design and implementation of our parallel ray casting algorithm. Globus establishes a software framework for Grid
infrastructure by providing a meta computer toolkit, called Globus toolkit[2,
1], and becomes a defacto standard for Grid services. In designing and implementing our algorithm, we make use of these technology, including Globus services, such as Resource Management(GRAM)[14], Security Management(GSI),
Information Management(MDS)[13] and Data management(Grid FTP)[15], and
MPICH-G2[4] which is a message-passing-type communication library based on
Globus Toolkit. For the description of our algorithm, we only refer to GRAM
and GSI services for simplicity. GRAM(Globus Resource Allocation Manager)
consists of gatekeeper and Grid proxy, which are a daemon process on GRID
resource node and a client module respectively. GSI(Grid Security Infrastructure) allows a user to authenticate just once per computation, at which time a
credential is generated that allows processes created on behalf of user to acquire
resources, and so on without additional user intervention.
Figure 2 shows how master and slave processes are created, and how they
interact with each other. In Grid, all the participating nodes need a credential
issued from CA(Certiﬁcated Authorization) so that they can identify one another by mutual authentication. Initial conﬁguration for our parallel ray casting
algorithm can be carried out for creation of master and slave processes before
executing two phases as follows: First, GRID proxy carries out a mutual authentication with gatekeeper of each allocated node through GSI[16] before sending a
request for the creation of process. After mutual authentication, it prepares a job
speciﬁcation using RSL(Resource Speciﬁcation Language) which describes execution ﬁle path, command option and environmental value of the corresponding

Fast Parallel Algorithm for Volume Rendering

615

Fig. 3. First Phase

process to be created, and then sends it to a gate-keeper in allocated nodes which
in turn activates a local job manager to create one master and slave processes
which shall be involved in the computation of our ray casting algorithm. The
master and slave processes interact with each other to transfer a job allocation
and its result through MPICH-G2[4].
3.2

First Phase

In the ﬁrst phase we ﬁnd active pixels and active depths by using forward projection as follows: Initially, the volume data is partitioned among allocated processes, and each process ﬁnds, for its statically assigned volume data, its runlength encode which consists of non-empty voxel runs. Then, non-empty voxel
runs are dynamically distributed among idle processes from the master process,
and each process ﬁnds active pixels and their active depths for the assigned voxel
runs by using line drawing algorithm, and returns them to the master process.
Since each computing node has equal amount of load for the calculation of active
pixels and depths due to the dynamic distribution of voxel runs, the computation
time of active pixels in each process has little diﬀerence, and the overall load of
the ﬁrst phase becomes well balanced.
3.3

Second Phase

In the second phase, for the ray traversal through volume data, the active pixels
obtained in the ﬁrst phase are distributed among processes(master or slave) from
the master process. Here, dynamic load balancing is achieved by continuously
supplying idle processes with a small set of active pixels as in the ﬁrst phase.
The value of each active pixel on the screen is calculated as follows: Generate a
ray through the active pixel into the data space. Starting at the nearest active
depth where the ray intersects non-empty voxel, follow the ray while sampling the

616

H.-J. Kim et al.

Fig. 4. Second Phase

volume at constant interval. Accumulate the color and opacities of these sampled
values. Stop following the ray when it is known that it cannot signiﬁcantly change
its value, or when it intersects the farthest active depth. The resulting partial
images are merged to yield the ﬁnal image in the master process. Similarly
as in the ﬁrst phase, each computing node has equal amount of load for the
calculation of values for active pixels due to the dynamic distribution of active
pixels, the computation time of values for active pixels in each process has little
diﬀerence, and the overall load of the second phase becomes well balanced. Also,
additional speedup is obtained by performing skipping processes in image and
data space based on the information on active pixels and active depths during
the ray traversal.

4

Experiment

We implemented the parallel ray casting algorithm by using Globus toolkit and
MPICH-G2[4] on computational grid environment which consists of 12 heterogeneous machines, two Ultrasparc1, one SGI O2, a SGI Octane, eight Pentium
IV PCs connected by 100 Mbps Ethernet. One master process is created on
Pentium IV and slave processes on other machines using resource management
service in GRAM of Globus toolkit. Our test data set is a 256 x 256 x 225 human
head, and image screen measures 1024 x 1024 pixels. The details of hardware
and software information for each machine are shown in table 1.
Since each machine has diﬀerent computing power, we have measured the
relative performance with M1 as reference machine by comparing the execution
time of the identical sequential ray casting program on each machine. Then,
the expected speed up is computed as a sum of each relative performance of
participating machines. The relative performance of the machines obtained by
executing the identical sequential ray casting program is shown in table 2. Table
3 shows the execution time, speed up and eﬃciency of ray casting according

Fast Parallel Algorithm for Volume Rendering

617

Table 1. Machine speciﬁcations
Machine type
M1
M2
M3
M4
Model
Pentium IV PC USparc1
O2
Octane
CPU
P IV
UltraSPARC MIPS R10000
Clock(MHz)
1740
143
150
250
Memory(MBytes)
1024
128
128
512
OS
Linux 2.2
Solaris 2.5 IRIX 6.3 IRIX 6.5

Table 2. Measurement of relative performance with respect to M1 for ray casting
machine i
M1
M2
M3
M4
OS
Linux
Solaris2.5 IRIX6.3 IRIX6.5
(spec.)
(PIV-1.7G) (USparc1) (O2 ) (Octane)
running time
103.01
413.812 205.390 128.690
relative perf.
1.0
0.249
0.502
0.800

Table 3. Performance results of parallel ray casting on GRID
number of machines 1(M1 ) 2(M1,4 ) 4(M1,2,3,4 ) 8(M1,1,1,1,2,2,3,4 ) 11(M1,1,1,1,1,1,1,1,2,2,3,4 )
expected speedup
1.0
1.8
2.551
6.351
9.551
time (sec) 103.01 69.74
49.429
20.398
13.892
GRID
speedup
1.0
1.477
2.084
5.050
7.415
eﬃciency (%) 100.0 82.03
81.70
79.52
77.64

to the number of machines. The eﬃciency represents the ratio of speedup with
respect to expected speedup. As the number of machines increases, the parallel
algorithm shows relatively good speed up with eﬃciency around 80% without
degrading its performance due to the communication overhead. This results from
the eﬃcient dynamic load balancing from the computation of active pixels and
depths and their proper data distribution.

5

Conclusion

In this paper we have presented a fast and well balanced parallel algorithm for
volume rendering based on the dynamic space leaping method. The acceleration
technique of dynamic space leaping method is based on forward projection which
allows the fast calculation of active pixels and depths and the dynamic load
balancing. We have shown that our parallel ray casting algorithm achieves the
speed up by dynamic distribution of voxel runs for the calculation of active
pixels and depth in the ﬁrst phase, and the dynamic distribution of active pixels
for the calculation of their values in the second phase respectively. Moreover,
additional speed up is obtained by performing skipping processes in image and
data space based on the information on active pixels and active depths during
the ray traversal in the second phase. We have implemented the parallel ray
casting algorithm on computational grid which consists of various heterogenous
machines by using Globus toolkit and MPICH-G2, and have shown that it has
relatively good speedup due to the well organized dynamic load balancing.

618

H.-J. Kim et al.

References
1. I. Foster, C. Kesselman, S. Tuecke, “The Anatomy of the Grid: Enabling Scalable
Virtual Organizations,” International J. Supercomputer Applications, 15(3),
2001.
2. I. Foster, and C. Kesselman, “The Globus Project: A Status Report,” Heterogeneous Computing Workshop,” pp. 4–18, 1998.
3. P. Steven, P. Michael, L. Yarden, S. Peter-Pike, H. Charles, “Interactive Ray
Tracing for Volume Visualization,” IEEE Trans. on Visualization and Computer
Graphics, Vol. 5, No. 3, pp. 238–250. 1999.
4. MPICH-G2, http://www.hpclab.niu.edu/mpi/g2 body.html
5. J. Danskin, and Hanrahan, P., “Fast algorithms for volume ray tracing,” 1992
workshop on Volume Visualization, Boston, MA, 1992, pp. 91–98.
6. J. Danskin, R. Bender, and G. T. Herman, “Algebraic reconstruction techniques
(ART) for three-dimensional electron microscopy and X-ray photography,” J.
Theoretical Biology, vol.29, pp. 471–482, 1970.
7. Yagel, R., Cohen, D., Kaufman, A. And Zhang, Q., “Volumetric Ray Tracing,”
TR 91. 01. 09, Computer Science, SUNY at Stony Brook, January 1991.
8. R. Yagel, and Z. Shi, “Accelerating Volume Animation by Space-Leaping,” Visualization ’93, 1993, pp. 63–69.
9. V. Goel and A. Mukherjee, “An Optimal Parallel Algorithm for Volume Ray
Casting, Visual Comput,” Vol. 12, 1996, pp. 26–39.
10. C. Kose and A. Chalmers, “Proﬁling for eﬃcient parallel volume visualization,”
Parallel Computing Vol. 23, 1997, pp. 943–952.
11. S. U. Jo and C. S. Jeong, “A Parallel Volume Visualization Using Extended
Space Leaping Method,” PARA2000, 2001, pp. 296–305.
12. M. Levoy, “A hybrid ray tracer for rendering polygon and volume data,” IEEE
Computer Graphics & Application Vol.10, No.2, 1990, pp. 33-40.
13. K. Czajkowski, et al, ”Grid Information Services for Distributed Resource Sharing,” HPDC-10, August 2001.
14. K. Czajkowski, et al., “Resource Co-Allocation in Computational Grids,”
HPDC-8, 1999, pp. 219–228.
15. B. Allcock, et al., “Data Management and Transfer in High Performance Computational Grid Environments,” Parallel Computing Journal,” Vol. 28 (5), May
2002, pp. 749–771.
16. I. Foster, et al. “A Security Architecture for Computational Grids,” Proc. 5th
ACM CCSC, pp. 83–92, 1998.

