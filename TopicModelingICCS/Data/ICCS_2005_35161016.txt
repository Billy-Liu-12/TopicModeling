Implementation of a Distributed Data Mining System
∗

Ju Cho1, Sung Baik1, , and Jerzy Bala2
1

Sejong University, Seoul 143-747, Korea
{jscho, sbaik}@sejong.ac.kr
2 Datamat Systems Research, Inc.
1600 International Drive, McLean, VA 22102, USA
jbala@dsri.com

Abstract. This paper describes the implementation of a distributed data mining
system. The system consists of a web server, a pre-processor for data preparation, a mediator, and agents. A distributed learning algorithm of a decision tree
in an agent-mediator communication mechanism is the most important and difficult to achieve the distributed data mining in this system, in the view of implementation. The algorithm has successfully been implemented with several
techniques. Its implementation is presented in a UML (Unified Modeling Language) sequence diagram.

1 Introduction
In this paper, we consider a distributed data mining (DDM) approach [1], in which the
modified decision tree algorithm on an agent based framework can deal with heterogeneous data sets in the distributed environment [2,3]. The data mining based on the
algorithm takes full advantage of all the available data through a mechanism for integrating data from a wide variety of data sources and is able to handle data characterized by geographic (or logical) distribution, complexity and multi-feature representations, and the vertical partitioning/distribution of feature sets.
The paper describes the implementation of an agent based distributed data mining
system which consists of a web server, a pre-processor for data preparation, a mediator, and agents. The web server supports users with a web-based interface through
which they can access databases located at different sites and manipulate data mining
facilities. The pre-processor prepares data sets for data mining by dealing with databases in a distributed way. The implementation of data preparation for DDM is presented in section 2. The mediator coordinates the communication between several
agents with security concerns such as authentication. Each agent is located at each
heterogeneous data site to achieve coordinated learning through the cooperation of local learning and communication with the other agents. The implementation of the
communication, between the mediator and agents for DDM, and the distributed learning algorithm of a decision tree in the communication mechanism is presented in
section 3.
∗

Author for Correspondence.

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 1016 – 1019, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Implementation of a Distributed Data Mining System

1017

2 Data Preparation for Distributed Data Mining
Data preparation is a preliminary and necessary phase for data mining. In DDM, data
sets located in different distributed sites should be processed and converted to appropriate data forms in advance, so that data mining can be performed in a distributed
fashion. Fig. 1 shows a UML sequence diagram for data preparation. In our work, two
kinds of files are generated from the database for DDM; 1) a control file (e.g. data.ctr)
and 2) a learning file (e.g. data.lea). The steps of data preparation are as follows:
1.

2.

3.

4.

The selected database schema information and the meta-data from all of different
distributed sites are exchanged via communication between the mediator and
agents. Each agent deals with each database at its own location.
According to the exchanged information, control files are generated at the sites
participating for data analysis. Each control file has all schema information obtained from all databases located at different sites.
The values of the class field selected by a user are transferred to other sites from
the site which the class field belongs to. The class information is found in all example control files presented in Fig. 2.
A primary key for associating the data across different sites is selected. The only
co-existing values of the primary key field in all databases are selected. And then
their associated tuples are selected to build a learning file in each site.

Web Browser

Web Server

requestPreparation()

Agent 1

Mediator

…

Agent N

getPreparation()
runPreparation()
[start Data Preparation]

[display the file list]

runPreparation()
[start Data Preparation]

[return the file list]

Fig. 1. UML Sequence Diagram for Data Preparation for DDM

3 Distributed Data Mining
A data mining engine was implemented in C in a previous work [4]. The communication interface within the agent was implemented in Java. The communication of the
mediator and the agents was implemented in Java on RMI (Remote Method Interface). The data mining engine implemented in C is interfaced with the communication interface implemented in Java by JNI (Java Native Interface). The interfaces of
core remote methods for DDM are presented in Fig. 3.

1018

J. Cho, S. Baik, and J. Bala

Before Data Preparation
pkey

X1

X2

X3

pkey

X4

X5

class

001

1.3

10

23

001

1.3

26

1

002

2.1

15

91

003

1.2

32

0

004

0.5

15

11

004

1.2

11

0

005

1.9

10

17

006

1.1

26

1

007

1.2

10

21

007

1.1

15

1

Key
Association

DB 1

DB 2

After Data Preparation
data.ctr
classes
c: 0 0
c: 1 1
attribute
5
a: X1 con 0.0
a: X2 con 0.0
a: X3 con 0.0
a: X4 con 0.0
a: X5 con 0.0

data.ctr
data.lea
X1 X2 X3 class
1.3 10 23
0.5 15 11
1.2 10 21

1
0
1

classes
c: 0 0
c: 1 1
attribute
5
a: X1 con 0.0
a: X2 con 0.0
a: X3 con 0.0
a: X4 con 0.0
a: X5 con 0.0

data.lea
X4 X5 class
1.3 26
1.2 11
1.1 15

1
0
1

Fig. 2. Examples of Data Sets before/after Data Preparation
public interface Mediator extends Remote {
...
public void startDataMining(String fileNm) throws RemoteException;
public void setEntropy(String agentName, double entropy, int splitData) throws RemoteException;
public void setDDT(String agentName, byte[] b, int len) throws RemoteException;
...
}
public interface Agent extends Remote {
...
public void runDataMining(String fileNm) throws RemoteException;
public void notifyRole(boolean winOrLooser) throws RemoteException;
public void getDDT(byte[] b, int len) throws RemoteException;
...
}

Fig. 3. Interface Methods for the Communication between Mediator and Agent

Fig. 4 presents a UML sequence diagram for DDM. The distributed learning algorithm of a decision tree in an agent-mediator communication mechanism is as follows:
1. runDataMining() : Start the local data mining processes associated with local
agents.
2. [find the attribute] : Find the attribute and its associated value that can best split
the data into the various training classes during local mining.

Implementation of a Distributed Data Mining System

1019

3. setEntropy() : Send the best local attribute and its associated value to the mediator.
4. [select the best attribute] : Select the best attribute from the best local attributes of
all the agents.
5. notifyRole() : Notify each agent of its role for the next action (splitting or waiting).
6. [split the data] : Split the data, according to the best global attribute and its associated
split value, in the formation of two separate clusters of data in the selected agent.
7. setDDT() & getDDT() : Distribute the structural information in each cluster and
the best attribute to the other agents through the mediator.
8. [construct the partial decision tree] : Construct the partial decision trees according
to the structural information in other agents.
9. [generate rules] : Generate decision rules at each agent and notify the mediator
for termination if there is no more splitting. Otherwise, go to step 2.
10. [notify the end of DDM] : Terminate.

Web Server

Web Browser

requestDataMining()

Agent 1

Mediator

…

Agent N

startDataMining()
runDataMining()

runDataMining()

[find the attribute]

[find the attribute]

setEntropy()

setEntropy()
[select the best attribute]

notifyRole()
[split the data]
setDDT()
[construct the
partial decision tree]

notifyRole()

getDDT()

[generate rules]

[display results]

[construct the
partial decision tree]
[generate rules]

[notify the end of DDM]

Fig. 4. UML Sequence Diagram for Distributed Data Mining

References
1. S. W. Baik, J. Bala and J. S. Cho: Agent Based Distributed Data Mining, Lecture Notes in
Computer Science, Vol. 3320, pp.42-45, 2004
2. D. Caragea, A. Silvescu and V. Honavar: Decision Tree Induction from Distributed, Heterogeneous, Autonomous Data Sources, Proceedings of the Conference on Intelligent Systems
Design and Applications (ISDA 03), 2003
3. C. Giannella, K. Liu, T. Olsen and H. Kargupta: Communication Efficient Construction of
Decision Trees Over Heterogeneously Distributed Data, Proceedings of the Fourth IEEE International Conference on Data Mining (ICDM 04), pp.67-74, 2004
4. J. Bala, S. W. Baik, S. Gutta and P. Pachowicz: InferView: An Integrated System for
Knowledge Acquisition and Visualization, Proceedings of AFCEA Federal Data Mining
Symposium, 1999

