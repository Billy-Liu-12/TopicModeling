SyNRAC: A Maple-Package for Solving Real
Algebraic Constraints
Hirokazu Anai and Hitoshi Yanami
Information Technology Core Laboratories, Fujitsu Laboratories Ltd.
Kamikodanaka 4-1-1, Nakahara-ku, Kawasaki 211-8588, Japan
anai@jp.fujitsu.com, yanami@flab.fujitsu.co.jp
Abstract. In this paper we present a maple-package, named SyNRAC,
for solving real algebraic constraints derived from various engineering
problems. Our main tool is real quantiﬁer elimination and we focus on
its application to robust control design problems.

1

Introduction

SyNRAC is a maple-package aiming to be a comprehensive toolbox composed of a
collection of solvers for real algebraic constraints derived from various engineering problems. SyNRAC stands for a Symbolic-Numeric toolbox for Real Algebraic
Constraints. The solvers to be addressed include mainly symbolic ones and also
symbolic-numeric ones to improve eﬃciency of symbolic approaches. Hence they
can deal with parametric and nonconvex constraints.
The focus of the implemented algorithms is on practically eﬀective quantiﬁer
elimination (QE) for certain industrial/engineering problems and simpliﬁcation
of quantiﬁer-free formulas. Therefore SyNRAC provides a yet another implementation of quantiﬁer elimination, a thing which is still missing in maple. Currently
the following algorithms are available in SyNRAC:
• a special QE by the Sturm-Habicht sequence for sign deﬁnite condition (§2.1)
• a special QE by virtual substitution for linear formulas (§2.2)
• some simpliﬁcations of quantiﬁer-free formulas
Furthermore, based on SyNRAC we are going to develop some toolboxes tailored
for speciﬁc application ﬁelds, e.g., robust control design, on MATLAB, which
would be novel tools that provide new systematic design procedures for engineers.
Taking maple/MATLAB as a platform has the following advantages:
• maple-packages are automatically incorporated into MATLAB, which is
widely used in engineering, via its “Symbolic Math Toolbox”
• They provide a good environment to realize symbolic-numeric solvers
(ﬂoating-point arithmetic, many numerical packages for, e.g., optimization)

We note that this work is strongly motivated by one of the authors’ previous
works concerning practically eﬀective applications of QE to robust control design
problems [1,2,3]. They show that when we solve practical control problems it is
eﬀective to use the scheme that well combines reduction of problems to particular
formulas and usage of QE algorithms specialized to such particular formulas.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 828–837, 2003.
c Springer-Verlag Berlin Heidelberg 2003

SyNRAC: A Maple-Package for Solving Real Algebraic Constraints

2

829

Special Quantiﬁer Elimination Methods

Our current focus of implemented solvers is on QE algorithms specialized to particular types of input formulas that are suﬃciently eﬃcient for practical problems. Two special QE algorithms explained below are now available in SyNRAC.
Moreover simpliﬁcation of quantiﬁer-free formulas is important. Formulas
which occur during a special QE algorithm tend to get extremely large, deeply
nested and highly redundant. Utilizing simpliﬁcation algorithms combined with a
special QE algorithm contributes to improve not only readability of the resulting
formula but eﬃciency of the computation (see [4,5] for possible simpliﬁcations).
Automatic formula simpliﬁers are implemented in REDLOG1 and QEPCAD.2
Implementation of such simpliﬁcations in SyNRAC is ongoing.
2.1

Special QE Using the Sturm-Habicht Sequence

A special QE method based on the Sturm-Habicht sequence for the ﬁrst-order
formula ∀x f (x) > 0, where f (x) ∈ R[x] was proposed in [4]. The algorithm is
desired to be modiﬁed for checking a sign deﬁnite condition (SDC):
∀x > 0, f (x) > 0 ,

(1)

since a quite wide range of the important problems in robust control can be
reduced to SDC (see §3.1). We brieﬂy sketch a special QE algorithm using the
Sturm-Habicht sequence for the SDC (see [1] for details).
n
k
Deﬁnition 1. Let P, Q be polynomials in R[x]; P =
k=0 ak x , Q =
m
k
=
k=0 bk x , where n, m are non-negative integers. For i = 0, 1, . . . ,
min(n, m) we deﬁne the subresultant Sresi (P, n, Q, m) associated to P, n, Q and
i
i
j
i
m of index i as
j=0 Mj (P, Q)x , where Mj (P, Q) is the determinant of the
matrix composed by the columns 1, 2, . . . , n + m − 2i − 1 and n + m − i − j in
the matrix si (P, n, Q, m):
n+m−i




an . . . a 0


..
..

 m−i
.
.




a
.
.
.
a
n
0
 
si (P, n, Q, m) := 
.
 bm . . . b 0
 




..
..

 n − i
.
.
bm . . . b 0
k(k+1)

Let v = n + m − 1 and δk = (−1) 2 . The Sturm-Habicht sequence associated
to P and Q is deﬁned as the list of polynomials {SHj (P, Q)}j=0,...,v+1 given by
SHv+1 (P, Q) = P , SHv (P, Q) = P Q, SHj (P, Q) = δv−j · Sresj (P, p, P Q, v)
for j = 0, 1, . . . , v − 1, where P = dP
dx . In particular, {SHj (P, 1)}j=0,...,v+1 is
called the Sturm-Habicht sequence of P . We simply denote it by {SHj (P )}.
1
2

REDLOG is a QE package based on virtual substitution (§2.2) on REDUCE.
QEPCAD is a general QE package that is applicable to all ﬁrst-order formulas based
on cylindrical algebraic decomposition (CAD) [6,7].

830

H. Anai and H. Yanami

The Sturm-Habicht sequence can be used for real root counting in almost the
same way as the Sturm sequence. Moreover it has better properties in terms of
specialization and computational complexity (see [8,9] for details).
Theorem 1 (Gonz´
alez-Vega et al.[9]). Let P (x) ∈ R[x] and
{g0 (x), . . . , gk (x)} be a set of polynomials obtained from {SHj (P (x))} by
deleting the identically zero polynomials. Let α, β ∈ R ∪ {−∞, +∞} s.t. α < β.
We deﬁne WSH (P ; α) as the number of sign variations on {g0 (α), . . . , gk (α)}.
Then WSH (P ; α, β) ≡ WSH (P ; α) − WSH (P ; β) gives the number of real roots
of P in [α, β].
We denote the principal j-th Sturm-Habicht coeﬃcient of SHj (f ), i.e., the coeﬃcient of degree j of SHj (f ), by stj (f ) and the constant term of SHj (f ) by
ctj (f ) for all j. Then we have
WSH (f ; 0, +∞) = WSH (f ; 0) − WSH (f ; +∞)
= V ({ctn (f ), . . . , ct0 (f )}) − V ({stn (f ), . . . , st0 (f )}) ,

(2)

where V ({ai }) stands for the number of sign changes over the sequence {ai }.
The SDC (1) holds if and only if both WSH (f ; 0, +∞) = 0 and stn (f ) > 0
hold. Hence an equivalent condition to the SDC (1) can be obtained as follows:
Consider all the possible sign combinations over the polynomials cti (f ),sti (f )
(there are at most 32(n+1)−3 = 32n−1 patterns since ct0 (f ) = st0 (f ), stn (f ) > 0,
stn−1 (f ) > 0); Choose all sign conditions that satisfy WSH (f ; 0, +∞) = 0 by
(2); Construct semi-algebraic sets generated by cti (f ), sti (f ) for the selected
sign conditions and combine them as a union. The obtained condition is of the
form of a union of semi-algebraic sets. They are expected to contain many empty
sets. We can prune some impossible sign combinations beforehand (see [1]). All
procedures mentioned above have been implemented in SyNRAC.
2.2

Linear QE by Virtual Substitution

We present another special QE algorithm, i.e., quantiﬁer elimination for linear
formulas. A linear formula is a formula whose atomic subformulas are all linear
with respect to its quantiﬁed variables. In 1993 Weispfenning [10] proposed a
QE algorithm for linear formulas. Loos and Weispfenning [11] have presented
more eﬃcient algorithms. We explain the essence of their algorithms.
Let Q1 x1 · · · Qn xn ϕ be a linear formula, where Qi ∈ {∀, ∃} and ϕ is a
quantiﬁer-free formula. By using the equivalence ∀xϕ(x)⇐⇒¬(∃x¬ϕ(x)), we can
change the formula into an equivalent formula of the form
(¬)∃x1 · · · (¬)∃xn (¬)ϕ .
The negation ‘¬’ that precedes a quantiﬁer-free formula can be easily eliminated (use De Morgan’s law and rewrite the atomic subformulas), which is not
essential part of quantiﬁer elimination. In addition to that, a practical problem
is mostly given by an existential formula, i.e., a formula of the form ∃x1 · · · ∃xn ϕ.
We assume from now on that the input is an existential formula. Thus our main
purpose is to eliminate the quantiﬁed variable ∃x in ∃xϕ with ϕ quantiﬁer-free.

SyNRAC: A Maple-Package for Solving Real Algebraic Constraints

831

Deﬁnition 2. Let ϕ be a quantiﬁer-free formula, x ∈ X a variable, and S a
set of terms, where each term t ∈ S does not contain x. Then S is called an
elimination set for ∃xϕ if the equivalence
ϕ(x//t)

∃xϕ ⇐⇒
t∈S

holds, where ϕ(x//t) is the formula obtained by a modiﬁed substitution.3
It is known that for any given linear formula ∃xϕ as above, there exists an
elimination set for the formula.
Lemma 1 (Weispfenning [10]). Let ϕ be a linear quantiﬁer-free formula, x
a quantiﬁed variable in ϕ, and Ψ = {ai x − bi ρi 0|i ∈ I, ρi ∈ {=, =, ≤, <}} the
set of atomic subformulas in ϕ. Then
S=

bi bi
1 bi
bj
( + )|i, j ∈ I, i = j
,
± 1|i ∈ I ∪
ai ai
2 ai
aj

is an elimination set for ∃xϕ, where S is regarded as a set of linear terms.
By using Lemma 1, we can eliminate all the quantiﬁers in a given formula;
eliminate them one by one from inside.
Loos and Weispfenning [11] have found smaller elimination sets than in
Lemma 1 and succeeded in improving the algorithm because smaller elimination
sets help prevent the number of atomic subformulas from getting larger during
the elimination process. All the QE algorithms mentioned here have been implemented in SyNRAC. Furthermore an algorithm that returns a sample point if
the input formula turns out to be ‘true’ has also been implemented in SyNRAC.

3

Fixed-Structure Robust Controller Synthesis

As applications of SyNRAC we focus on ﬁxed-structure robust controller synthesis
problems: Controller synthesis problems are to choose controller parameters so
that given speciﬁcations are satisﬁed. It is strongly desired that the ﬁxed-order
controller design problems be resolved in practical problems which operate under
the constraint of ﬁxed structure. However, it is a long-standing open problem
in robust control and the lack of eﬀective results on the problem has prevented
modern design methods from being applicable to such practical problems.
Recently methods based on QE have been proposed for such robust controller
synthesis and multi-objective design problems [12,13,14,15,1]. The design scheme
they used is, so called a parameter space approach, as follows:
1. Determine the structure of the controller and select the design parameters,
e.g., x1 and x2 in the PI-controller x1 + xs2 are the parameters
2. Reduce the speciﬁcations to the equivalent ﬁrst-order formulas
3

There is a procedure assigning the expression ϕ(x/t) obtained from ϕ by substituting
t for x a formula equivalent to it. We denote the resulting formula by ϕ(x//t).

832

H. Anai and H. Yanami

3. Compute the admissible regions of the design parameters for all speciﬁcations
by applying QE to the obtained ﬁrst-order formulas
4. Superpose the admissible regions in the parameter space and take the parameters in the intersections
However, since they in general need to use general QE algorithm based on CAD,
they have a drawback on computational complexity. For the eﬃcient computation it is eﬀective to use the scheme that well combines reduction of target
problems to particular classes of formulas and usage of special QE algorithms
for the particular input formulas. Actually this scheme is successfully applied to
several open problems in robust control; the following are such examples.
3.1

Control Synthesis Based on SDC

Many important design speciﬁcations in robust control such as H∞ norm constraints, gain/phase margins and stability radius speciﬁcation, which are frequently used as indices for the robustness of feedback control systems, can be
recast as SDCs (see [16,17,18,3,19,1]). A special quantiﬁer elimination method
using the Sturm-Habicht sequence has suﬃcient practicability for the SDCs derived from practical control problems [1,3]: For example, an H∞ norm constraint
of a strictly proper transfer function P (s) = n(s)/d(s) given by
P (s)

∞

:= sup |P (jω)| < 1
ω

is equivalent to ∀ω d(jω)d(−jω) > n(jω)n(−jω). Since we can ﬁnd a function
f (ω 2 ) which satisﬁes f (ω 2 ) = d(jω)d(−jω) − n(jω)n(−jω) > 0, letting x = ω 2
lead to SDC. Similarly, a ﬁnite frequency H∞ norm deﬁned by
P (s)

[ω1 ,ω2 ]

:=

sup

ω1 ≤ω≤ω2

|P (jω)| < 1

can be recast as the condition f (x) = 0 in [ −ω22 , −ω12 ], which is reduced to
SDC for f (z) by a bilinear transformation z = −(x + ω22 )/(x + ω12 ).
3.2

Linear Programming Approach to Control Design

Recently it has been reported in [2] that other important problems in robust control, which are recast as parametric linear programming (LP) problems, can be
resolved with suﬃcient eﬃciency for practical use by using a special QE method
based on virtual substitution [10]: If there is no feasible controller parameter
value for a given speciﬁcation, it is required to relax the given speciﬁcation
within acceptable levels. A systematic approach to estimating how we can relax
a design speciﬁcation is achieved by applying QE to parametric LP.
We brieﬂy review robust controller synthesis via LP [20]. Consider a feedback
control system shown in Fig.1, where p = [p1 , p2 , . . . , ps ] is the vector of uncertain real parameters in the plant G and x = [x1 , x2 , . . . , xt ] is the vector of real
parameters of the controller C. Assume that the controller considered here is of

SyNRAC: A Maple-Package for Solving Real Algebraic Constraints

833

Fig. 1. A standard feedback system

ﬁxed-order. The performance of the control system can often be characterized
by a vector a = [a1 , . . . , al ] which are functions of the plant and controller parameters p and x: ai = ai (x, p), i = 1, . . . , l. Here we take the ai to represent the
coeﬃcients of a closed-loop performance function. Suppose that the target value
of the closed-loop performance vector is ∆T = [δ1T , . . . , δlT ] ∈ Rl . We denote the
nominal value of the plant parameter by p = p0 and deal with uncertainty in
the plant by letting p lie in a box Π given by
+
Π = {P | p−
i ≤ pi ≤ pi , i = 1, 2, . . . , s} .

The control system design is ideally to choose the controller parameter vector
x which satisﬁes the set of equations ai (p0 , x) = δiT , i = 1, . . . , l. However, this
is in general not attainable. Moreover, under plant perturbations the ideal performance deteriorates. Hence the robust performance problem requires ensuring
that the controller design vector x can be chosen so that the performance aggravation, which could occur as p ranges over the uncertainty set Π, remains
within acceptable limits. Therefore, we suppose that target performance ∆T is
given as the interval set
∆T = {∆T | δiT − ≤ δiT ≤ δiT + , i = 1, 2, . . . , l} ,
which is the relaxation of the desired target performance δT . Then the goal of
controller synthesis problem is to ﬁnd a controller parameter vector x which
satisﬁes the following set of inequalities
δiT − ≤ ai (p, x) ≤ δiT + , i = 1, 2, . . . , l

(3)

for all p ∈ Π. Assume that the parameter p appears linearly or multilinearly
in a(p, x) whereas x appears linearly (this is valid in many control problems).
Then the constraints (3) obviously have a standard LP form. To estimate possible
relaxation of the given speciﬁcation, we regard endpoints of the target box as
parameters in (3) and then compute the possible range of the endpoints so that
a feasible controller exists by applying QE to a parametric version of (3). A
typical example is the ﬁxed-order robust pole assignment problem (see §4).

4

Computational Examples

In this section we show some computational examples to illustrate how SyNRAC
works and its application to concrete control problems:4 We load the packages:
4

All computations were executed on a Pentium III 1 GHz processor.

834

H. Anai and H. Yanami

> read "synrac";

with(combinat);

First we solve the QE problem ∀x > 0, a2 x2 + a1 x + a0 > 0:
> qe_sdc(a2*xˆ2+a1*x+a0,x);
-a0 < 0 and a1 < 0 and -4*a0+a1ˆ2 < 0 or
-a0 < 0 and -a1 < 0 and -4*a0+a1ˆ2 < 0 or
-a0 < 0 and -a1 < 0 and 4*a0-a1ˆ2 < 0
time = 0.02, bytes = 123614

Next we solve the existential linear QE problem ∃x∃y(y > 2x+3∧x > 0∧y < s):
> qe_lin([x,y], y>2*x+3 and x>0 and y<s);
-1/2*s < -3/2
time = 0.03, bytes = 144686

Finally we show the examples of decision problems for both commands:
> qe_sdc(xˆ5-xˆ2+3*x-9,x);
time = 1.11, bytes = 8774262

false

> qe_lin([x,y], y<2*x+2 and y<=-3*x+12 and y>(1/3)*x+5);
true
A sample point: [x, y], [52/25, 144/25]
time = 0.03, bytes = 155078

Example 1 (H∞ norm constraints for sensitivity function). Consider the feed1
, C(s, x) = x1 + xs2 . We want to
back system shown in Fig.1 with G(s) = s−1
ﬁnd feasible regions of the controller parameter x so that the system satisﬁes
a ﬁnite frequency H∞ norm constraint of a complementary sensitivity function
T (s):
||T (s)||[ωt ,∞] ≡ max ||T (iω)|| < γt ,
(4)
ωt ≤ω≤∞

G(s)C(s)
where T (s) = 1+G(s)C(s)
and ωt and γt are given real values. We can see from a
simple symbolic computation that (4) is reduced to the following SDC:

x > 0, ft (x) ≡ x2 + a1 x + a0 > 0 ,
where a1 = 2ωt2 − 2x2 + (1 − x1 )2 − x21 /γt2 , a0 = ωt4 − (2x2 − (1 − x1 )2 +
x21 /γt2 )ωt + m2 (1 − 1/γt2 ). Performing qe sdc in SyNRAC to ft (x) instantly gives
us the following equivalent formula:
(−a0 < 0 ∧ a1 < 0 ∧ −4a0 + a21 < 0) ∨ (−a0 < 0 ∧ −a1 < 0 ∧ −4a0 + a21 < 0) ∨
(−a0 < 0 ∧ −a1 < 0 ∧ 4a0 − a21 < 0)

After manual simpliﬁcation we have the only one equivalent condition:

SyNRAC: A Maple-Package for Solving Real Algebraic Constraints

835

(a0 > 0 ∧ a1 > 0 ∧ 4a0 − a21 < 0) .
Moreover we can ﬁnally simplify the condition to obtain (a0 > 0∧a1 > 0) because
4a0 − a21 < 0 is true due to the structure of a0 , a1 . Then if we specify the values
of ωt , γt , we immediately have possible regions of controller parameters x1 , x2
which satisfy the given complementary sensitivity constraint. For example, the
possible region for ωt = 20, γt = −0.1 with stability condition (x1 > 1 ∧ x2 > 0)
obtained from the Hurwitz criterion, is shown as the shaded region in Fig 2.

Fig. 2. The possible regions of Example 1 (left) and 2 (right).

Example 2 (Possible relaxation of robust pole assignment speciﬁcation). We consider a PI control system with C(s) = x1 + xs2 for the plant G(s) = (d2 s2 +d11 s+d0 ) .
The closed-loop characteristic polynomial is
δ(s) = d2 s3 + d1 s2 + (x1 + c0 )s + x2 .
Then pole assignment problem is to locate the roots of δ(s) at(within) desired
place(region). The target pole location is given as roots of a given target polynomial. Now we want to estimate how much we can relax the given infeasible
speciﬁcation. The target(relaxed) characteristic polynomial is given by
δT (s) = δ3T s3 + δ2T s2 + δ1T s + δ0T ,
where δiT − ≤ δiT ≤ δiT + . Assume the endpoints have the following structure:
δiT − = σ i (δi0 − ei γ), δiT + = σ i (δi0 + ei γ) for all i where δi0 , ei are given constants
and σ and γ are parameters which stand for changes of the time-scale (or frequency range) and a magnitude of perturbations, respectively. Then we ﬁnd the
possible region of δiT − , δiT + (i.e., γ, σ) so that there exists a controller parameter
x satisfying that all the roots of δ(s) are within the root space of δT (s). Based
on the argument in §3.2 we have the following formulas corresponding to (3):
ϕ ≡ ((δ3T − ≤ d2 ≤ δ3T + ) ∧ (δ2T − ≤ d1 ≤ δ2T + ) ∧ (δ1T − ≤ x1 + d0 ≤ δ1T + ) ∧
(δ0T − ≤ x2 ≤ δ0T + ) ∧ (−1 ≤ d0 ≤ 1) ∧ (1 ≤ d1 ≤ 3/2) ∧ (−1/2 ≤ d2 ≤ 3/2)) .

Here we take δ00 = 4, δ10 = 6, δ20 = 4, δ30 = 1, e0 = 1, e1 = 3/4, e2 = 1/2, e3 = 1/4.
We execute qe lin in SyNRAC to the ﬁrst-order formula

836

H. Anai and H. Yanami

∃x1 ∃x2 ∃d0 ∃d1 ∃d2 ϕ(x1 , x2 , d0 , d1 , d2 , σ, γ)
16

to obtain instantly an equivalent quantiﬁer-free formula of the form i=1 τi (γ, σ),
where τi is the conjunction of atomic formulas. After additional simpliﬁcation
we ﬁnally get the following quantiﬁer free formula
ψ(γ, σ) = τ1 (γ, σ) ∨ τ2 (γ, σ) ,
where
τ1 = ( P2 ≥ 0 ∧ P3 ≥ 0 ∧ P5 ≥ 0 ∧ P6 ≥ 0 ∧ P7 ≥ 0 ∧ P8 ≥ 0 ),
τ2 = ( P1 ≥ 0 ∧ P2 ≤ 0 ∧ P5 ≥ 0 ∧ P6 ≥ 0 ∧ P7 ≥ 0 ∧ P8 ≥ 0 ),
P1 = γσ 3 + 4σ 3 − 2, P2 = γσ 3 + 4σ 3 − 6, P3 = γσ 3 − 4σ 3 + 6,
P4 = γσ 2 + 8σ 2 − 2, P5 = γσ 2 + 8σ 2 − 3, P6 = γσ 2 − 8σ 2 + 3,
P7 = γσ,
P8 = γ.
The possible region of γ, σ given by ψ is illustrated as the shaded region in
Fig.2. Since we ﬁnally have all the possible region as semialgebraic sets in γ-σ
space, we can easily obtain the minimum relaxation.

5

Conclusions

We have presented maple-package SyNRAC for solving real algebraic constraints.
Although our project is currently under development and there is still a considerable way to go until the state-of-the-art techniques in real quantiﬁer elimination
are implemented in SyNRAC, we think our package has now reached a stage of
development that justiﬁes publication. We are continually improving the eﬃciency of implemented algorithms and are going to implement other algorithms
(including symbolic-numeric algorithms) for solving real algebraic constraints
into SyNRAC. We also plan to develop some toolboxes tailored for speciﬁc applications (e.g., parametric robust control toolbox) based on SyNRAC. In order
to make our system applicable to those who are interested in but not familiar with symbolic computation and maple software, we are going to incorporate
SyNRAC into MATLAB and implement interfaces to modeling formulas and
sophisticated visualization facility of feasible parameter regions in a parameter
space.
Acknowledgements. The authors would like to thank Shinji Hara and
Kazuhiro Yokoyama for their invaluable advice.

References
1. Anai, H., Hara, S.: Fixed-structure robust controller synthesis based on sign definite condition by a special quantiﬁer elimination. In: Proceedings of American
Control Conference 2000. (2000) 1312–1316

SyNRAC: A Maple-Package for Solving Real Algebraic Constraints

837

2. Anai, H., Hara, S.: Linear programming approach to robust controller design by a
quantiﬁer elimination. In: Proceedings of SICE Annual Conference 2002 (Osaka,
Japan). (2002) 863–869
3. Anai, H., Hara, S.: A parameter space approach for ﬁxed-order robust controller
synthesis by symbolic computation. In: Proceedings of IFAC World Congress on
Automatic Control b’02. (2002)
4. Gonz´
alez-Vega, L.: A combinatorial algorithm solving some quantiﬁer elimination
problems. In Caviness, B., Johnson, J., eds.: Quantiﬁer Elimination and Cylindrical Algebraic Decomposition. Texts and monographs in symbolic computation.
Springer-Verlag (1998) 365–375
5. Dolzmann, A., Sturm, T.: Simpliﬁcation of quantiﬁer-free formulae over ordered
ﬁelds. Journal of Symbolic Computation 24 (1997) 209–231
6. Collins, G.E.: Quantiﬁer elimination for the elementary theory of real closed ﬁelds
by cylindrical algebraic decomposition. In Brakhage, H., ed.: Automata Theory
and Formal Languages. 2nd GI Conference. Volume 33 of Lecture Notes in Computer Science., Gesellschaft f¨
ur Informatik, Springer-Verlag, Berlin, Heidelberg,
New York (1975) 134–183
7. Collins, G.E., Hong, H.: Partial cylindrical algebraic decomposition for quantiﬁer
elimination. Journal of Symbolic Computation 12 (1991) 299–328
8. Gonz´
alez-Vega, L., Lombardi, H., Recio, T., Roy:, M.F.: Sturm-habicht sequence.
In: Proceedings of ISSAC”89, Portland, ACM Press (1989) 136–146
9. Gonz´
alez-Vega, L., Recio, T., Lombardi, H., Roy, M.F.: Sturm-habicht sequences
determinants and real roots of univariate polynomials. In Caviness, B., Johnson, J.,
eds.: Quantiﬁer Elimination and Cylindrical Algebraic Decomposition. Texts and
Monographs in Symbolic Computation. Springer, Wien, New York (1998) 300–316
10. Weispfenning, V.: The complexity of linear problems in ﬁelds. Journal of Symbolic
Computation 5 (1988) 3–27
11. Loos, R., Weispfenning, V.: Applying linear quantiﬁer elimination. The Computer
Journal 36 (1993) 450–462 Special issue on computational quantiﬁer elimination.
12. Abdallah, C., Dorato, P., Yang, W., Liska, R., Steinberg, S.: Application of quantiﬁer elimination theory to control system design. In: Proceedings of 4th IEEE
Mediteranean Symposium on Control and Automation. Maleme, Crete. (1996)
340–345
13. Dorato, P., W.Yang, C.Abdallah: Robust multi-objective feedback design by quantiﬁer elimination. J. Symb. Comp. 24 (1997) 153–159
14. Jirstrand, M.: Constructive Methods for Inequality Constraints in Control. PhD
thesis, Link¨
oping University, Sweden (1998)
15. Anai, H.: On solving semideﬁnite programming by quantiﬁer elimination. In Proc.
of American Control Conference, Philadelphia (1998) 2814–2818
16. Hara, S., Kimura, T., Kondo, R.: H ∞ control system design by a parameter space
approach. In: Proceedings of MTNS-91, Kobe, Japan (1991) 287–292
17. Kimura, T., Hara, S.: A robust control system design by a parameter space approach based on sign deﬁnition condition. In: Proceedings of KACC-91, Soul,
Korea (1991) 1533–1538
18. Kondo, R., Hara, S., Kaneko, T.: Parameter space design for H∞ control (in
japanese). Trans. of SICE 27 (1991) 714–716
˘
19. Siljak,
D.D.: New algebraic criterion for positive realness. Journal of the Franklin
Institute 291 (1971) 109–120
20. Keel, L., Bhattacharyya, S.: Robust control under parametric uncertainty. part
II: design. In: SYMBOLIC METHODS in control system analysis and design.
Number 56 in IEE Control Engineering Series, IEE (1999) 203–226

