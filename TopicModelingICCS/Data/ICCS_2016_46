Procedia Computer Science
Volume 80, 2016, Pages 2062–2073
ICCS 2016. The International Conference on Computational
Science

Urgent Computing - A General Makespan Robustness
Model for Ensembles of Forecasts
Siew Hoon Leong1,2 and Dieter Kranzlm¨
uller1,2
1

Leibniz Supercomputing Centre, Garching near Munich, Germany
2
Ludwig-Maximilians-Universit¨
at M¨
unchen, Munich, Germany
leong@lrz.de

Abstract
Urgent computing requires computations to commence in short order and complete within
a stipulated deadline to support mitigation activities in preparation, response and recovery
from an event that requires immediate attention. Missing an urgent deadline can lead to
dire consequences where avoidable human and ﬁnancial losses ensued. Timely allocation of
resources to meet the deadline is crucial. Robustness is of great importance to ensure that
small perturbations on the computing systems do not aﬀect the makespan of the allocations
so that the deadline can be met. This work focuses on developing a general mathematical
makespan model for urgent computing to enable a robust allocation of ensemble forecasts while
minimising the makespan. Three patterns of diﬀerent resource allocation will be investigated
to illustrate the model. The result will aid in satisfying the most crucial requirement, the time
criterion, of urgent computing.
Keywords: Urgent Computing, Ensemble, Forecasts, Resource allocation, Robustness

1

Introduction

Disasters, both natural and man-made, have caused great casualties and losses to civilians and
national leaders. According to the 2015 annual Global Assessment Report [5] from the United
Nation oﬃce, the economic losses from disasters are reaching US$250 billion to US$300 billion each year. From 1980 to 2012, 42 million life years were lost in disasters. Evident eﬀorts
had been made in Europe and around the world to be better prepared for such events. The
establishment of the Copernicus Programme1 in 2008 by the European Commission (EC) to
monitor and forecast the environment, and to publicly share selected information with general
public is an illustration of the commitment to build a stronger disaster response. To complement such initiatives, urgent computing (UC), which leverages on the most up-to-date data to
simulate higher order accuracy predictions, is gaining increasing attention. UC produces high
1 http://emergency.copernicus.eu/

2062

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.526

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

conﬁdence low uncertainty forecasts, which can only be computed at zero hour, i.e. shortly
before/when/after a disaster/crisis strikes, leaving no time to spare.
The main requirement [10] to realise UC is to ensure that the required numerical forecasts
of an urgent event are completed before a deadline such that there is suﬃcient lead time for
decision and mitigation activities. Late results will mean a lack of information to make educated
decisions for mitigation activities, which can result in catastrophic losses in both human lives
and economically. Consequently, the stringent timing requirements of UC have to be fulﬁlled.
However the inherent uncertainties in most forecast models and collected observational data
further limit UC’s ability to perform a single high-ﬁdelity forecast to accurately and reliably
predict the onset and advancement of an urgent event. Main limitations in observational data
can be attributed to data errors, missing data and/or conﬂicting observed data while core
limitations in forecast models are related to the incomplete understanding and modelling of
the underlying science, e.g. the physics, and the simpliﬁed numerical representation of complex
processes. Thus, a deterministic forecast is rarely conceivable. This leads to the prevalence of
stochastic methods [6], probabilistic forecasting, where an ensemble of forecasts [2] is leveraged
upon to improve the forecast conﬁdence. The need to enable ensembles of forecasts within
time constraints intensiﬁes the challenge to realise UC. Multiple heterogeneous resources, e.g.
e-Infrastructures [9], might be utilised simultaneously to compute the forecasts. It is thus
crucial to allocate the resources eﬀectively such that the deadline can be met in spite of small
perturbations on any of the computing resources.
We thus adapt the work of [1] to introduce a UC speciﬁc mathematical model to quantify
makespan robustness of resource allocations for ensembles of forecasts. Makespan is the length
of a schedule of a resource allocation for the urgent computation(s). It represents the time from
the start of the allocation to the point in time when all assigned computations complete. This is
the ﬁrst work in the ﬁeld of UC that focuses on ensembles of forecasts and their corresponding
resource allocations. A set of UC speciﬁc deadline variables has to be deﬁned to be applied
within the model. Three ensembles of forecasts resource allocation patterns that will inﬂuence
makespan robustness are identiﬁed and integrated into the model. The ﬁnal model will be used
in various resource allocation heuristics to quantify makespan robustness such that the most
appropriate resources are selected such that makespan robustness is maximised, i.e. makespan
is corresponding minimised, while ensuring that the deadline is met.
This paper is organised as follows. In Section 2, related work in UC, resource allocation and
ensemble forecasts are shared. The robustness measurement model speciﬁc to UC is presented
in Section 3. Section 4 describes three patterns of allocation of ensemble forecasts. The tests
and results with the three resource allocation patterns are shared in Section 5. Finally, the
conclusion and future work are discussed in Section 6.

2

Related Work

In science gateway project SPRUCE (Special Priority and Urgent Computing Environment),
allocation of resources was based on an opportunistic approach [4] and/or on elevated-priority
policies [3], i.e. next-to-run, preemption, etc. In another UC work [8], an attempt to study
the impact of UC on resource management policies, schedules and resource utilisation on three
resources was carried out. Four diﬀerent resource allocation strategies are proposed – (1) Loadbalancing via the minimum queue length (2) Dedicated (one) resource provider for urgent jobs
(3) Combine the above two. If no dedicated resource is available, choose the resource with the
minimum queue length (4) Minimum completion time policy. In another UC related work for
early warning system (EWS), a hybrid scheduling algorithm for urgent workﬂows [12] based
2063

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

on traditional and meta-heuristic approaches within cloud resources is developed. In ﬁrst two
UC work, only one single computation is considered, i.e. a single forecast. The EWS hybrid
scheduling algorithm manages multiple forecasts but since they are not a part of an ensemble,
the requirements are diﬀerent. Our work is the ﬁrst that focuses on makespan robustness instead
of just makespan in UC and deals with the realistic need to manage ensembles of forecasts.
There are numerous distributed resource allocation [14][13] research work that focus on
makespan/deadline robustness [7][11]. Most deadline/makespan work focus on how to eﬃciently
ﬁt jobs/tasks onto a limited set of resources, under the assumption that there are insuﬃcient
resources to execute all jobs concurrently. Due to the inherent computation complexity, heuristic
approaches are prevalent. In UC, makespan robustness is particularly crucial since missing a
deadline will imply that the results of urgent computations become useless.
There are many UC events, e.g. storms and wildﬁres, where there is no single forecast
model or set of conditions, i.e. physical parameters, initial and boundary conditions, that
can guarantee a high-ﬁdelity forecast. Consequently, stochastic [6] as opposed to deterministic
forecast methods are increasingly prevalent. Ensemble forecasting [2], which can include the
simulations of a number of numerical models, and/or perturbations in initial conditions and/or
physical parameters, provides the basis for stochastic predictions.

3

Makespan Robustness Model

Robustness is deﬁned as the tolerance of a computing system to perform faithfully in event
of perturbation(s). Perturbations in urgent systems can lead to performance degradation that
can aﬀect the makespan of computations and cause dire consequences as a result of missing
deadlines. To ensure that the impact is minimised, designing robustness into the system is of
utmost importance. Three timing variables are thus deﬁned to express the characteristics of
urgent deadlines (refer to [10, p.2344] for urgent deadline deﬁnitions) as follows:
• tideal illustrates a point in time where the required minimum lead time for maximum
mitigation activities, i.e. minimum loss, can be achieved. After this point in time, the
loss is expected to increase exponentially.
• tdeadline illustrates a point in time where only the minimum mitigation activities, e.g.
evacuate civilians, deﬁned by the decision makers are possible.
• tterminus illustrates a point in time where there is no longer any lead time for any mitigation activities, i.e. maximum loss.
Based on the work of [1] [11], a mathematical metric to measure robustness can be designed
via a four-steps FePIA procedure – (1) Identify the robustness criteria. (2) Identify possible
system and environment perturbation parameters. (3) Identify the impact of perturbation
parameters. (4) Determine the smallest collective variation in perturbation parameter values.
The FePIA procedure is thus applied to enable UC to support ensembles of forecasts.
The most crucial robustness criteria, i.e. system performance features Φ, in UC is makespan
φk (kth performance feature in Φ). Makespan refers the length of a schedule, i.e. from the start
of an allocation, ts , to the point in time when all allocated urgent computations complete,
for a given resource allocation. Consequently, makespan robustness represents the tolerance to
perform faithfully in event of perturbations such that the length of the schedule of a resource
allocation adheres to the UC deadline. The selected resource allocation μ must satisfy the initial
condition as shown in (3.1). Figure 1 summarises the relationship among the timing variables.
2064

A General Makespan Robustness Model for Ensembles of Forecasts


	


	







		


	
	

Leong and Kranzlm¨
uller

 

Figure 1: Urgent Computing Timing Variables

ts + φk < tdeadline

and tdeadline < tterminus

(3.1)

where
φk represents the kth performance feature, i.e. makespan, in Φ.
System and environment conditions of each computing resource cj contribute to the set of
identiﬁed perturbation parameters πj that can adversely inﬂuence makespan as shown in (3.2).
φkj = f (πj )

and πj ∈ Π

(3.2)

where
φkj refers to the makespan of a given computing resource cj for resource allocation μ.
f (πj ) represents the maximum execution time of a given computing resource cj for the forecast applications ai , which has been allocated.
The makespan of a resource allocation μ on n resources is as follows:
φk = max f (πj )
∀cj

and j = 1..n

(3.3)

In order to satisfy the performance features, i.e. makespan, the boundary condition that
illustrates the error tolerance has to be deﬁned. The acceptable tolerance has to satisfy (3.1).
The ideal boundary condition is φk ≤ tideal . However realistically, as long as the makespan is
within the limits as shown in (3.4), mitigation activities are possible.
ts < φk < tterminus

(3.4)

The error tolerance has to be set within the above range, using the minimum case as follows:
= τ φestimated
φactual
k
k

and φactual
≤ tdeadline < tterminus
k

(3.5)

where
refers to the actual makespan of a resource allocation μ.
φactual
k
is makespan of a resource allocation μ by using pre-collected/computed data of
φestimated
k
each forecast ai on each computing resource cj .
τ is the tolerance value, i.e. tolerable error, for a given resource allocation. τ is ≥ 1.
Finally, the Euclidean norm (l2 -norm) is applied to ﬁnd the largest distance between the
actual and estimated perturbation parameters, πjactual and πjestimated respectively. This distance
2065

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

will be referred as the robustness radius rμ as shown in (3.6) to represent the tolerable error
range while adhering to the deadline.
rμ (φk , πj ) =

min

πj :φk =τ φestimated
k

πjestimated − πjactual

2

(3.6)

The above equation can be further simpliﬁed since the actual makespan πjactual can be taken
as a point while the estimated makespan πjestimated as a hyperplane. Consequently, the righthand-side of (3.6) can be solved by a point-to-plane distance formula [15, p.22][1, p.633] as
shown in (3.7).

rμ (φk , πj )

=

τ φk − f (πj )
number of consecutive applications allocated to cj

(3.7)

=

tdeadline − f (πj )
number of consecutive applications allocated to cj

(3.8)

Finally, to extend the above robustness radius equation for all φk ∈ Φ, the robustness metric
ρμ , which is the minimum of all robustness radii is deﬁned as follows:
ρμ (Φ, πj ) = min rμ (φk , πj )
φk ∈Φ

(3.9)

In order to ease the assessment of the robustness metric, an assessment metric θμ that
normalised the robustness metric in terms of the stipulated deadline is introduced as follow:
θμ (φk ) =

4

ρμ (Φ, πj )
tdeadline

(3.10)

Ensembles of Forecasts Allocation Patterns

There are mainly three patterns to allocate an ensemble of forecasts to resources. The pattern encountered will be dependent on the number and size of resources as illustrated in the
following subsections. The chosen allocation pattern will aﬀect the makespan of an allocation.
Reallocation of applications or moving of applications from one resource to another upon failure
is not considered in this work.

4.1

Independent Consecutive Forecast Applications

The only possible combination for consecutive allocation pattern in terms of number and size
of resources is represented by one case as follows.
Case 1: One small resource with suﬃcient nodes/cores to compute one forecast at any point
in time. Forecasts thus are computed consecutively.
For the consecutive forecast allocation pattern, the execution time of the given resource is
n

f (π1 , i) =

φk1 (i)
i=1

where
2066

(4.1)

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

i and n represent the instance and total number of applications assigned to the single
resource c1 respectively.
φk1 (i) refers to the makespan of an application ai on the resource c1 .
This is obviously the worst case resource allocation pattern for an ensemble of forecasts and
should be avoided since makespan cannot be minimised. It also potentially presents a single
point of failure.

4.2

Independent Concurrent Forecast Applications

The possible combinations for concurrent allocation pattern in terms of number and size of
resources can be summarised with four cases.
Case 1: One big resource with suﬃcient nodes/cores for all forecasts to compute concurrently.
Case 2: Multiple small resources where there are suﬃcient number of resources for each resource to compute one forecast.
Case 3: Multiple small and big resources where there are less number of resources as compared
to the number of forecasts. Each small size resource has to compute one forecast while the big
size resources will compute more than one forecasts concurrently.
Case 4: Multiple big resources where there are less number of resources as compared to the
number of forecasts. The big size resources will compute more than one forecasts and all forecasts on all resources are computed concurrently.
For the concurrent forecast allocation pattern, the execution time of each given resource is
f (πj , 1) = φkj (1)

(4.2)

where
φkj (1) refers to the makespan of an application ai (i = 1 since all applications are running
concurrently) on resource cj .
In the case where multiple forecasts are running currently, i.e. concurrent slots, on a big
resource, each slot can be taken as if it is a single resource to simplify the equation. This
is obviously the ideal resource allocation pattern for ensemble of forecasts since it oﬀers an
allocation with the least makespan and should thus be adopted when possible. The main
challenge is to ﬁnd resource providers and corresponding resources, both in numbers and sizes,
to support and realise such an allocation. Case 1 should however be avoided since it can
potentially result in a single point of failure.

4.3

Independent Concurrent and Consecutive Forecast Applications

The possible combinations for concurrent and consecutive allocation pattern in terms of
number and size of resources can be summarised with the three cases.
Case 1: One large resource with suﬃcient nodes/cores for more than one forecast but not
all to compute concurrently. Forecasts that cannot compute concurrently are computed consecutively.
Case 2: Multiple small and big resources where there are less number of resources as compared
to the number of forecasts. Each small size resource has to compute one forecast while the big
2067

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

size resources will compute more than one forecasts concurrently. The forecasts that are not
computed concurrently are computed consecutively.
Case 3: Multiple big resources where there are less number of resources as compared to the
number of forecasts. The big size resources will compute more than one forecasts concurrently.
The forecasts that are not computed concurrently are computed consecutively.
In these cases, the execution time of each given resource is
n

f (πj , i) =

φkj (i)

(4.3)

i=1

where
φkj (i) refers to the makespan of an application ai on resource cj .
This is a realistic resource allocation pattern when only a limited set of resources is available.
Case 1 should be avoided due to the threat of a single point of failure.

5

Test and Result

In order to evaluate the makespan robustness model and the three resource allocation patterns,
thirty ensemble of forecasts and ten resources are introduced in the following tests. The given
tdeadline is 3. The makespan of each forecast application on each resource is generated with a
Gamma distribution as follows:
φkj (i) = Gamma(shape, scale) ∗ 0.15 + β

(5.1)

where
j−1
i−1
, scale is set to 1.0 and β is set to 1 +
.
shape is set to 1 +
10
10
All forecast applications on each given resource cj will have the same β value while each
forecast application i on all given resources share the same shape. This is to emulate the production behaviour of a ﬂash ﬂood ensemble forecast using the WRF-ARW (Weather Research
& Forecasting-Advanced Research WRF) model with eight diﬀerent microphysic options on
two production computing resources, SuperMUC and SuperMUC Phase 2, hosted at Leibniz
Supercomputing Centre as shown in Figure 2. Generally, using a better performance resource
will result in a better execution time for most applications as can be seen from the ﬁrst seven
microphysic options. Similarly, the algorithm used in an application will determine the general execution time eﬃciency, e.g. Kessler out-performs all other applications, independent
of resources. However, the compatibility between the architecture of resources, and the algorithms and numerical schemes used can inﬂuence the eﬃciency, e.g. Morrison on SuperMUC
out-performs the generally more time eﬃcient SuperMUC Phase 2.
In order to generate realistic test data for thirty forecasts in an ensemble with ten computing
resources, β in equation (5.1) will represent the execution time performance of a resource while
shape will model the algorithmic execution time of a speciﬁc forecast. The gamma distribution
will provide the randomness to model the compatibility between a resource and application.
The resulting execution time distribution is illustrated in Figure 3. Each symbol represents
the execution time of forecast applications, A1 to A30 (corresponding to a1 to a30 ), on a given
computing resource cj . In general, the resources with a smaller j will have a comparatively
better execution time performance.
2068

Execution Time (s)

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

·104
1.2
1
SuperMUC
SuperMUC Phase 2

0.8
0.6

Kessler WSM3 Ferrier WSM5 WSM6 WSM6DThompsonMorrison
Forecast Application with different Microphysic Options

Execution Time (h)

Figure 2: Execution Times of 8 Ensemble Forecasts on SuperMUC and SuperMUC Phase 2
c1
c2
c3
c4
c5
c6
c7
c8
c9
c10

3
2
1
A1

A6

A11

A16

A21

A26

Forecast Applications

Figure 3: Gamma Distribution of Execution Times for 30 Ensemble Forecasts on each Resource

Due to the computational complexity [1][p.636] involved in computing the robustness radius,
near-optimal heuristic [11] approaches are typically employed. In the following subsections, the
results are based on heuristic approaches. Each resource allocation pattern will be evaluated.

5.1

Independent Consecutive Forecast Applications

In the case where only one single resource is available, based on the given tdeadline , the total
execution time f (πj , 1) and robustness metric of each resource when all forecasts are allocated
is shown in Table 1. There is basically no single resource that can fulﬁl the deadline requirement. Consequently, the makespan robustness metric for each resource is negative. A negative
robustness metric thus illustrates that the deadline is not met.
Resources
f (πj , 1)
Robustness
Metric

R1
40.48

R2
44.49

R3
47.03

R4
48.7

R5
53.43

R6
57.78

R7
58.09

R8
63.96

R9
65.98

R10
66.9

-6.84

-7.58

-8.04

-8.34

-9.21

-10.00

-10.06

-11.13

-11.50

-11.67

Table 1: Total Execution Time f (πj , 1) and Robustness Metric
When deadline cannot be met, an attempt to allocate the maximum number of application
forecasts if not all within the deadline should be made. Table 2 shows the best eﬀort resource
allocation μ for each resource in event that only one resource is available during the allocation.
In order to maximise makespan robustness, the forecast with the shortest execution time is
allocated ﬁrst. The allocation will end when the maximum number of forecasts is allocated
without exceeding the deadline. Thus, only one to two forecasts can be scheduled depending
on the resource that is available within the tdeadline boundary condition. In the case where
the allocation ends due to a deadline violation, i.e. before all forecasts can be allocated, the
2069

A General Makespan Robustness Model for Ensembles of Forecasts

Resources
R1
R2
R3
R4
R5
R6
R7
R8
R9
R10

Allocated Forecast
Applications
A4, A1
A4, A12
A12, A30
A9, A3
A3, A2
A1
A2
A2
A2
A3

Total Execution
Time f (π1 , i)
2.08
2.33
2.52
2.72
2.85
1.54
1.62
1.71
1.86
1.93

Leong and Kranzlm¨
uller
Robustness
Radius
0.65
0.48
0.34
0.20
0.11
1.46
1.38
1.29
1.14
1.07

Table 2: Consecutive Applications on One Resource
robustness metric (rμ (φk , πj ) = 0.11) becomes insuﬃcient as an indicator of an eﬀective allocation. Resource R6, which only allocated one application A1, has a better robustness metric
than resources, e.g. R1 and R2, which can potentially complete two forecasts.

5.2

Independent Concurrent Forecast Applications

From equations (3.2) and (4.2), it can be derived that to maximise robustness, the forecast
application with the longest execution time should be allocated to the fastest resource. Thus,
the adopted order of allocation is to give priority to applications with higher mean execution
time. Since ten resources are available in this test, it will be assumed that each resource is big
and can accommodate all ensemble forecasts concurrently if required (Case 4 in Section 4.2).
Resources
R1
R2
R3
R4

Allocated Forecast Applications
A24,
A10,
A22,
A27,
A29

A14,
A15,
A23,
A20,

A25,
A12,
A17,
A30,

A28, A18, A11, A19,
A3, A4, A6, A8, A1, A2
A26, A13, A7, A5
A21, A16, A9

Max Execution
Time f (πj , 1)

Robustness
Radius

1.48

1.52

1.45
1.47
1.62

1.55
1.53
1.38

Table 3: Concurrent Applications on Multiple Resources
The result of the allocation μ is shown in Table 3. All thirty ensemble forecasts are assigned only to the ﬁrst four resources R1 to R4 in order to minimise makespan by utilising
the best execution time performance resource for each application. The robustness metric of
this allocation is 1.38. Since robustness metric is positive, it implies that the deadline is met.
The assessment metric of this allocation is 0.46 (refer to equation (3.10). This implies that
the allocation is able to tolerate makespan perturbations up to 46% of the deadline. Naturally,
maximising makespan robustness is good but it led to the over-subscription of a few resources,
which can potentially lead to reliability issue, i.e. “a single point of failure”. For example, if
R1 fails, potentially 16 forecasts might not complete successfully.
Thus, another test is conducted by adding a constraint of three concurrent applications per
resource. The resulting allocation as shown in Table 4 has a lower robustness metric of 0.99 and
2070

A General Makespan Robustness Model for Ensembles of Forecasts

Resources
R1
R2
R3
R4
R5
R6
R7
R8
R9
R10

Allocated Forecast
Applications
A24, A14, A26
A22, A23, A17
A27, A20, A25
A29, A21, A28
A18, A11, A19
A13, A16, A10
A30, A9, A7
A15, A3, A4
A12, A5, A8
A6, A1, A2

Max Execution
Time f (πj , 1)
1.57
1.44
1.47
1.62
1.60
1.77
1.80
1.93
2.01
2.01

Leong and Kranzlm¨
uller
Robustness
Radius
1.43
1.56
1.53
1.38
1.40
1.23
1.20
1.07
0.99
0.99

Table 4: Concurrent Applications on Multiple Resources with Constraint
a corresponding assessment metric of 0.33. This is due to the need to allocate some forecasts
on less execution time eﬃcient resources in order to achieve a better load balance across the
resources. The gain in load balance is not reﬂected by the makespan robustness metric.

5.3

Independent Concurrent and Consecutive Forecast Applications

In this test, the initial constraints are – 1) The better performing resources R1 to R5 each
allows three concurrent applications. 2) Resources R6 to R10 each allows only one concurrent
application. 3) Consecutive applications are allowed on all resources as long as tdeadline is not
violated. The available resources are an example of Case 2 in Section 4.3.
Resources
(Concurrent Slot)
R1(1)
R1(2)
R1(3)
R2(1)
R2(2)
R2(3)
R3(1)
R3(2)
R3(3)
R4(1)
R4(2)
R4(3)
R5(1)
R5(2)
R5(3)
R6
R7
R8
R9
R10

Allocated Forecast
Applications
A24, A15
A14, A12
A26, A3
A22, A4
A23, A7
A17, A5
A27, A8
A20, A1
A25, A6
A29
A21, A2
A28
A18
A11
A19
A13
A30
A10
A16
A9

Max Execution
Time f (πj , i)
2.72
2.54
2.66
2.51
2.55
2.67
2.81
2.84
2.69
1.62
2.84
1.55
1.60
1.56
1.55
1.65
1.72
2.27
1.87
2.24

Robustness
Radius
0.20
0.32
0.24
0.34
0.32
0.23
0.13
0.11
0.22
1.38
0.11
1.45
1.40
1.44
1.45
1.35
1.28
0.73
1.13
0.76

Table 5: Concurrent and Consecutive Applications on Multiple Resources
2071

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

Due to the computational complexity in calculating the robustness radius, a near-optimal
heuristic with these rules are applied – 1) Applications with the longest mean execution time
are allocated ﬁrst to available concurrent slots. 2) The remaining applications are matched
with free consecutive slots on available resources while ensuring that the total execution times
f (πj , i) are minimised and the makespan robustness radii are maximised.
Table 5 shows the resulting allocation μ with robustness metric of 0.11 and a corresponding
assessment metric of 0.04. This implies that although the deadline is met, only a relatively small
aggregated perturbation tolerance of approximately 4% of the deadline. Generally, in terms of
load balancing, this allocation enables a good distribution of jobs across resources where each
resource hosts at least one application. However due to initial constraints, some resources
have to host multiple applications not only concurrently but also consecutively. This adversely
aﬀects the makespan robustness since if an application that has consecutive applications queuing
behind it is delayed due to perturbations, all applications in this consecutive queue are aﬀected.
Consequently, the makespan is increased resulting in aggregated reduction in robustness. An
ensemble of forecasts with this allocation pattern will thus have a lower tolerance for system
perturbations and less lead time for mitigation activities as compared to concurrent allocation
pattern.

6

Conclusion and Future Work

UC is an important research topic for disaster mitigation. It requires computations to commence
in short order and complete within a stipulated deadline. Due to the uncertainty in most forecast
models, stochastic method as opposed to deterministic method is prevalent. Consequently, an
ensemble of forecasts is expected for UC. This work thus presents a general mathematical
makespan model for UC to allocate ensembles of forecasts robustly to computing resources
such that small perturbations in the resources will not adversely inﬂuence the ability to meet
the stipulated deadline. Unlike other UC work, this is the ﬁrst to focus on makespan robustness
and ensembles of forecasts. Urgent computing timing variables and three allocation patterns
of ensemble forecasts are shared. Tests based on near-optimal heuristic approaches are carried
out to evaluate the model and allocation patterns.
It demonstrates the usefulness of makespan robustness metric in quantifying robustness
and also showing if the deadline is met. The assessment metric helps to further evaluate the
robustness metric to analyse the perturbation tolerance of an allocation. This led to observation
that the usefulness of these metrics are limited to makespan robustness and cannot assist in
assessing if an allocation has a good load balance. In summary, we draw a few conclusions:
– 1) When there are insuﬃcient resources to meet the deadline, makespan robustness is an
insuﬃcient measurement for an eﬀective allocation since cannot quantify how many forecasts are
allocated. 2) Maximising robustness and/or minimising makespan does not lead to a good load
balance and can result in reliability issues, e.g. single point of failure. 3) Robustness is adversely
aﬀected by the number of consecutive applications on one resource. Thus, concurrency, i.e
suﬃcient resources (both in number and size), is a more optimal allocation strategy for UC.
Leveraging on multiple distributed resources, e.g. e-Infrastructure [9], is highly recommended.
In this work, we focus only on the UC timing requirements. In reality, the resources used
within the allocation have varying characteristics, e.g. frequency scaling options, which add
additional challenges to the allocation. Future work thus includes adding additional measurements, e.g. reliability, and taking into consideration the characteristics, e.g. frequency scaling
and energy usage, of computing resources.
2072

A General Makespan Robustness Model for Ensembles of Forecasts

Leong and Kranzlm¨
uller

References
[1] S. Ali, A. A. Maciejewski, H. J. Siegel, and J.-K. Kim. Measuring the robustness of a
resource allocation. Parallel and Distributed Systems, IEEE Transactions on, 15(7):630–
641, Jul 2004.
[2] F. Atger. The skill of ensemble prediction systems. Monthly Weather Review, 127(9):1941–
1953, 1999.
[3] P. Beckman, S. Nadella, N. Trebon, and I. Beschastnikh. SPRUCE: A System for Supporting Urgent High-Performance Computing. In Grid-Based Problem Solving Environments,
volume 239 of Procedia Computer Science, pages 295–311. Springer US, 2007.
[4] B. Blanton, J. McGee, J. Fleming, C. Kaiser, H. Kaiser, H. Lander, R. Luettich, K. Dresback, and R. Kolar. Urgent Computing of Storm Surge for North Carolina’s Coast. In
ICCS Proceedings, volume 9 of Procedia Computer Science, pages 1677–1686. Elsevier,
2012.
[5] B. Desai and A. Maskrey. Making Development Sustainable: The Future of Disaster Risk
Management. Global Assessment Report on Disaster Risk Reduction. Geneva, Switzerland:
United Nations Oﬃce for Disaster Risk Reductions (UNISDR), 2015.
[6] E. S. Epstein. Stochastic dynamic prediction. Tellus, 21(6):739–759, 1969.
[7] O. H. Ibarra and C. E. Kim. Heuristic Algorithms for Scheduling Independent Tasks on
Nonidentical Processors. J. ACM, 24(2):280–289, Apr 1977.
[8] K. Kurowski, A. Oleksiak, w. Piatek, and J. Weglarz. Impact of Urgent Computing on
Resource Management Policies, Schedules and Resources Utilization. In ICCS Proceedings,
volume 9 of Procedia Computer Science, pages 1713–1722. Elsevier, 2012.
[9] S. H. Leong, A. Frank, and D. Kranzlm¨
uller. Leveraging e-Infrastructures for Urgent
Computing. In ICCS Proceedings, volume 18 of Procedia Computer Science, pages 2177–
2186. Elsevier, 2013.
uller. Towards a General Deﬁnition of Urgent Computing. In
[10] S. H. Leong and D. Kranzlm¨
ICCS Proceedings, volume 51 of Procedia Computer Science, pages 2337 – 2346. Elsevier,
2015.
[11] A. M. Methta, J. Smith, H. J. Siegel, A. A. Maciejewski, A. Jayaseelan, and B. Ye. Dynamic
resource allocation heuristics that manage tradeoﬀ between makespan and robustness. The
Journal of Supercomputing, 42(1):33–58, 2007.
[12] D. Nasonov and N. Butakov. Hybrid Scheduling Algorithm in Early Warning Systems.
Procedia Computer Science, 29:1677 – 1687, 2014. 2014 International Conference on Computational Science.
[13] X. Qin and H. Jiang. A dynamic and reliability-driven scheduling algorithm for parallel
real-time jobs executing on heterogeneous clusters. Journal of Parallel and Distributed
Computing, 65(8):885 – 900, 2005.
[14] S. Srinivasan and N. K. Jha. Safety and reliability driven task allocation in distributed
systems. Parallel and Distributed Systems, IEEE Transactions on, 10(3):238–251, 1999.
[15] G. Strang and K. Borre. Linear Algebra, Geodesy, and GPS. Wellesley-Cambridge, 1997.
2073

