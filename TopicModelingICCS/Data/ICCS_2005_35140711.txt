A Layout Algorithm for Signal Transduction Pathways as
Two-Dimensional Drawings with Spline Curves1
Donghoon Lee, Byoung-Hyon Ju, and Kyungsook Han*
School of Computer Science and Engineering, Inha University,
Inchon 402-751, Korea
khan@inha.ac.kr

Abstract. As the volume of the biological pathway data is rapidly expanding,
visualization of pathways is becoming an important challenge for analyzing the
data. Most of the pathways available in databases are static images that cannot
be refined or changed to reflect updated data, but manual layout of pathways is
difficult and ineffective. There has been a recent interest in the use of the threedimensional (3D) visualization for signal transduction pathways due to the
ubiquity of advanced graphics hardware, the ease of constructing 3D visualizations, and the common perception of 3D visualization as cutting-edge technology. However, our experience with visualizing signal transduction pathways
concluded that 3D might not be the best solution for signal transduction pathways. This paper presents an algorithm for dynamically visualizing signal
transduction pathways as 2D layered digraphs.

1 Introduction
Recently a number of biological pathway databases have been developed, and visualization of biological networks is crucial to the effective analysis of the data. There are
several types of biological networks, such as signal transduction pathways, protein
interaction networks, metabolic pathways, and gene regulatory networks. Different
types of network represent different biological relationships, and are visualized in
different formats in order to convey their biological meaning clearly. The primary
focus of this paper is the representation of signal transduction pathways.
A signal transduction pathway is a set of chemical reactions in a cell that occurs
when a molecule, such as a hormone, attaches to a receptor on the cell membrane. The
pathway is a process by which molecules inside the cell can be altered by molecules on
the outside [1]. A large amount of data on signal transduction pathways is available in
databases, including diagrams of signal transduction pathways [2, 3, 4]. However, most
of these are static images that cannot be changed to reflect updated data. It is increasingly important to visualize signal transduction pathways from databases.
1

This study was supported by the Ministry of Health & Welfare of Korea under grant 03-PJ1PG3-20700-0040.
* Correspondence Author.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 711 – 718, 2005.
© Springer-Verlag Berlin Heidelberg 2005

712

D. Lee, B.-H. Ju, and K. Han

Signal transduction pathways are typically visualized as directed graph (digraph in
short) in which a node represents a molecule and an edge between two nodes represents a biological relation between them. Signal transduction pathways convey their
meaning best when they are visualized as layered digraphs with uniform edge flows.
Therefore, the problem of visualizing signal transduction pathways can be formulated
as a graph layout problem. There has been a recent interest in the use of the threedimensional (3D) visualization for signal transduction pathways due to the ubiquity of
advanced graphics hardware, the ease of constructing 3D visualizations, and the
common perception of 3D visualization as cutting-edge technology. However, our
experience with visualizing signal transduction pathways concluded that 3D might not
be the best solution for signal transduction pathways. Because most 3D visualization
techniques have a 2D visualization counterpart, a question arises with respect to the
appropriateness of 3D visualization as opposed to 2D visualization for signal transduction pathways. This paper presents an algorithm for automatically visualizing
signal transduction pathways as 2D layered digraphs.

2 Layout Algorithm
To discuss the layout algorithm, a few terms should be defined. Suppose that G=(V,
E) is an acyclic digraph. A layering of G is a partition of V into subsets L1, L2, … , Lh,
such that if (u, v) ∈ E, where u ∈ Li and v ∈ Lj, then i > j. The height of a layered
digraph is the number h of layers, and the width of the digraph is the number of nodes
in the largest layer. The span of an edge (u, v) with u ∈ Li and v ∈ Lj is i – j.
We visualize signal transduction pathways as layered digraphs. The visualization
algorithm is composed of 3 steps at the top level: (1) layer assignment and cycle handling, (2) crossing reduction, and (3) placement of edges with span > 1.
2.1 Layer Assignment and Cycle Handling
This step assigns a y-coordinate to every node by assigning it to a layer. Nodes in the
same layer have the same y-coordinate values. It first places all the nodes with no
parent in layer L1, and then each remaining node n in layer Lp+1, where Lp is the layer
of n’s parent node. When the layer of a node is already determined, the larger value of
layers is assigned to the node. Node L in the middle graph of Fig. 1, for example, is
assigned to layer 4 from the path (A, E, I, L), but 3 from the path (B, G, L). The larger
value of 4 becomes the layer number of node L.
The main drawback of this layering is that it may produce a too wide digraph and
that an edge may have a span greater than one. The number of edges whose span > 1
should be minimized because they cause the subsequent steps (steps 2-3) of the algorithm take long [9]. We place the source node of an edge whose span > 1 to higher
layers so that the span of the edge becomes one.
Fig. 1 shows an example of the initial layer assignment for the input data of signal
transduction below. The initial layer assignment is adjusted to minimize edge spans,
as shown in Fig. 2. This step also handles cycles in signal transduction pathways.
Starting with a node with no parent node, it assigns a layer to every node along the
edges connected to the node. When it encounters a node with a layer assigned to it, it
has found a cycle. It starts with a new node no parent node and repeats the same thing.
When every node has been assigned a layer, it goes on to step 2.

A Layout Algorithm for Signal Transduction Pathways
A
B
B
C
D
E
F
G
G
I
I
K

713

E
F
G
I
I
I
H
J
L
K
L
D

Fig. 1. An example of assigning nodes to layers. The layer numbers in grey indicate the previously assigned numbers. There is a cycle (D, I, K) in the graph

Fig. 2. (A) Initial digraph. (B) Layered digraph. Node D has an upward edge due to a cycle (I,
K, D, I)

Algorithms 1-3 describe step 1 in detail
Algorithm 1 AssignLevel ()
foreach(nd ∈ G)
nd.nodeLayerLvl=-1;
foreach(nd ∈ G)
if(not (nd has owner))
AssignNodeLevel(nd, 0);
AlignBottom();

714

D. Lee, B.-H. Ju, and K. Han

Algorithm 2 AssignNodeLevel (node, nodeLvl)
if(node.nodeLayerLvl < nodeLvl) {
node.nodeLayerLvl = nodeLvl;
foreach(eg ∈ Node)
if (eg is node’s child) {
if(node’s child is not count) {
AssignNodeLevel(eg, nodeLvl+1);
}
else return;
}
Algorithm 3 AlignBottom ()
foreach(nd ∈ G) {
if(nd.nodeLayerLvl != nd.minChildLvl-1)
nd.nodeLayerLvl = nd.minChildLvl-1;
}

2.2 Crossing Reduction
The problem of minimizing edge crossings in a layered digraph is NP-complete, even
if there are only two layers [10]. We use the barycenter method to order nodes at each
layer [11, 12]. In the barycenter method, the x-coordinate of each node is chosen as
the barycenter (average) of the x-coordinates of its neighbors. Since two adjacent
layers are considered in this method, edges whose span >1 are ignored in this step.
Suppose that the element

mkl(i ) of incidence matrix M(i) is given by
⎧1, if (v k , vl ) ∈ E
mkl(i ) = ⎨
otherwise
⎩0,

(1)

The row barycenter γk and column barycenter ρl of incidence matrix
M = (mkl ) are defined as
q

q

l =1

l =1

p

p

k =1

k =1

γ k = ∑ l ⋅ mkl / ∑ mkl

(2)

ρ l = ∑ k ⋅ mkl / ∑ mkl

(3)

The number C of crossings of the edge between vk and vl is given by

C ( v k , vl ) =

p

l −1

∑ ∑ mαβ ⋅ m

α = k +1 β =1

kl

(4)

When rearranging the order of rows (columns), the row (column) barycenters are
computed and arranged in increasing order with the order of columns (rows) fixed. By
repeatedly alternating row and column barycenter ordering, the total number of crossings is reduced. The algorithm for reducing the total number of crossings is given in
Algorithms 5-7, and Fig. 3A shows an example of computing the initial row and col-

A Layout Algorithm for Signal Transduction Pathways

715

umn barycenters, and the total number of crossings for a graph in Fig. 2B. Fig 3B
shows the final row and column barycenters, and the total number of crossings after
applying Algorithms 5-7, and the final layout obtained is displayed in Fig. 4A.
Algorithm 4 baryCenter(tarLayer)
foreach(nd in curLayer)
nd.calculateBCValue(tarLayer);
if(isNeedSort) {
curLayer.sortbyBCValue;
return true;
} else return false;
Algorithm 5 calculateBCValue(tarLayer)
BCValue=0; node_layer_cntSub=0;
foreach(nd in tarLayer) {
if(this is nd’s neighbor) {
BCValue += nd.LayerIdx;
node_layer_cntSub++;
}
}
BCValue/=node_layer_cntSub;
Algorithm 6 calcBaryCenter()
do {
bWork=true;
foreach(layer in G) bWork &= layer.nextLayer.baryCenter(layer);
foreach(layer in G) bWork &= layer.baryCenter(layer.preLayer);
} while (bWork)

Fig. 3. (A) The initial row and column barycenters, and the total number of crossings for a
graph in Fig. 3B. (B) The final row and column barycenters, and the total number of crossings
of a graph in Fig. 4A. When rearranging the order of rows and columns based on the row barycenter γk and column barycenter ρl, nodes with γk=0 or ρl=0 need not be rearranged

716

D. Lee, B.-H. Ju, and K. Han

Fig. 4. (A) Digraph with an optimized placement for all nodes and edges except the edges with
span > 1. (B) Graph with dummy nodes introduced for edges with span > 1. Both nodes d1 and
d2 are inner dummy nodes

2.3 Placement of Edges with Span > 1
This step places long edges whose edge span > 1, which have been ignored in the prev
ious steps. Every edge with span=2 is placed using an inner dummy node. Dummy no
des that can be included inside the current graph are called inner dummy nodes, and ar
e considered when computing barycenters (Fig. 4B). On the contrary, dummy nodes that
cannot be included inside the current graph are called outer dummy nodes and excluded
when computing barycenters. For edges with span > 2, it first computes possible edge c
rossings caused by inner dummy nodes and outer dummy nodes and selects whichever
with fewer edge crossings. When one or more inner dummy nodes are created, the cross
ing reduction step is performed. Otherwise, there is no further crossing reduction.
Inner dummy nodes are created at each layer and the inner dummy nodes are inclu
ded when computing barycenters. Therefore, their positions are not fixed until the last
step. On the other hand, a pair of outer dummy nodes are created for an edge, one bel
ow the source node and the other above the sink node. When the source node is locate
d in the left of the center line of the entire graph, all the outer dummy nodes are place
d in the left of the current graph; otherwise, they are placed in the right side. Edges co
nnecting dummy nodes are displayed using spline curves instead of straight line segm
ent (see Fig. 6 for an example).
Algorithm 7 AddDummy()
for each node n ∈ V {
for each downward edge e of n {
if (n.nodeLayerLvl+1 < child(n).nodeLayerLvl)
CreateDummyNodes();
}
}

3 Results
The algorithms were implemented in a web-based program called PathwayViewer.
PathwayViewer runs on Windows 2000/XP/Me/98/NT 4.0 systems. An example of
the user interface of the program is shown in Fig. 5. Fig. 6 shows the actual signal

A Layout Algorithm for Signal Transduction Pathways

717

transduction pathway of mitogen-activated protein kinase. Note the two spline curves
for the edges with span > 1, which have been placed using dummy nodes.

Fig. 5. Example of the user interface of the program. Red arrows indicate the source nodes
activate the sink nodes. Blue lines ended with filled circles indicate that source nodes inhibit the
sink nodes. The node selected by a user (the yellow node in the signal transduction pathway) is
also highlighted in the node list window

Fig. 6. The signal transduction pathway of mitogen-activated protein kinase, visualized by our
algorithm

718

D. Lee, B.-H. Ju, and K. Han

4 Conclusion
Most databases with signal transduction pathways offer static images. These static
images are esthetic since they are hand-made and are fast in loading. However, static
images are difficult to refine or change to reflect new data. We have developed an
algorithm for automatically representing signal transduction pathways from databases
or text files. Unique features of the algorithm include (1) cycles in the pathways are
handled; (2) edges with span > 1 are represented as spline curves; (3) it does not place
all sink nodes (nodes with no parent) in layer 1 but moves them to a lower layer so
that edge spans can be minimized; and (4) edge bends occur only at dummy nodes
and the number of edge bends is minimized. We are currently extending the program
to overlay various types of additional information onto the signal transduction pathways.

References
1. Kanehisa, M., Goto, S., Kawashima, S., Nakaya, A.: The KEGG databases at GenomeNet.
Nucleic Acids Research 30 (2002) 42-46
2. Hippron Physiomics, Dynamic Signaling Maps. http://www.hippron.com/products.htm
3. BioCarta. http://www.biocarta.com
4. Kanehisa, M., Goto, S.: KEGG: Kyoto encyclopedia of genes and genomes. Nucleic Acids
Research 28 (2002) 27-30
5. Wackett, L., Ellis, L., Speedie, S., Hershberger, C., Knackmuss, H.J., Spormann, A.,
Walsh, C., Forney, L., Punch, W., Kazic, T., Kaneshia, M., Berndt, D.: Predicting microbial biodegradation pathways. ASM News 65 (1999) 87-93
6. Overbeek, R., Larsen, N., Pusch, G., D’Souza, M., Selkov, E., Kyrpides, N., Fonstein, M.,
Maltsev, N.: WIT: integrated system for high-throughput genome sequence analysis and
metabolic reconstruction. Nucleic Acids Research 28 (2000) 123-125
7. Selkov, E., Grechkin, Y., Mikhailova, N.: MPW: the metabolic pathways database. Nucleic Acids Research 26 (1998) 43-45
8. Karp, P., Riley, M., Saier, M., Paulsen, I., Paley, S. M.: The EcoCyc and MetaCyc databases. Nucleic Acids Research 28 (2000) 56-59
9. Gansner, E.R., Koutsofios, E., North, S.C., Vo, K.-P.: A technique for drawing directed
graphs. IEEE Transactions on Software Engineering 19 (1993) 214-230
10. Garey, M.R., Johnson, D.S.: Crossing Number is NP-Complete. SIAM J. Algebraic Discrete Methods 4 (1983) 312-316
11. Sugiyama, K., Tagawa, S., Toda, M.: Method for visual understanding of hierarchical system structures, IEEE Transaction on Systems, Man, and Cybernetics SMC-11 (1981) 109125
12. Sugiyama, K.: Graph Drawing and Applications for Software and Knowledge Engineering.
Singapore (2002)

