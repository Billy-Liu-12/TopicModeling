QoS-Enabled Service Discovery Using Agent Platform*
Kee-Hyun Choi, Ho-Jin Shin, and Dong-Ryeol Shin
School of Information & Communication Engineering Sungkyunkwan University, Korea
{gyunee, hjshin, drshin}@ece.skku.ac.kr
http://nova.skku.ac.kr
Abstract. As the number of Internet services is growing rapidly, the network
users need a framework to locate and utilize those services that are available in
the Internet. As a result, dynamic service discovery plays an important role in
certain networks, such as P2P networks. Recently many P2P mechanisms have
been proposed which focus on the naming and discovery protocols. However,
because these mechanisms do not provide congestion management and prioritybased scheduling in P2P networks, they cannot provide an efficient communication among the nodes. Based on these observations, in this paper, we propose a
QoS-based agent framework, designed to resolve such problems, and demonstrate its effectiveness.

1 Introduction
Service discovery is increasing in importance as its usage becomes more and more
widespread throughout the Internet. The entire premise of the Internet is centered on the
sharing of information and services. The focus of P2P networks is the mechanism by
which a peer provides other peers with services and discovers the services availabe from
other peers. In such an environment, a peer can be any network-aware device such as
cell phones, PDA, PC or any device you can imagine that passes information in and out.
In some cases, a peer might be an application distributed over several machines.
A large number of papers dealing with service discovery have recently been published. Although the schemes proposed provide efficient and fast searching mechanisms for service discovery, they do not consider QoS. With these observations in
mind, we developed a new agent platform designed to provide QoS and evaluated its
effectiveness by simulation, which is a main contribution of this paper. The remainder
of this paper is organized as follows. Section 2 describes the proposed agent platform.
In section 3, we present the simulation results for the proposed system. Finally, we
conclude this paper in Section 4.

2 Proposed Agent Platforms
In this section, we describe our proposed Agent Platform (AP) architecture. The overall design of the architecture is shown in Figure 1. We adopt the FIPA[1] reference
* This research was partially supported by a grant from the CUCN, Korea and Korea Science & Engineering Foundation (R01-2004-000-10755-0).
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 950 – 953, 2005.
© Springer-Verlag Berlin Heidelberg 2005

QoS-Enabled Service Discovery Using Agent Platform

DF

①
A

Fig. 1. Agent Platform

②

951

④

③
Gateway

Fig. 2. a) Agent platform b) Setup sequence

model and add new components. The Agent Service Manager is a QoS solution for
ad-hoc networks and P2P networks. By using the ASM, we allow our agent platform
to provide QoS in P2P networks. The ASM uses two separated but not independent
management agents. The PMA provides dynamic priority information according to
the network status. When an application wants to transmit its data, it contacts the DF,
in order to obtain priority information from the PMA. In this way, each application
can control its traffic according to the priority assigned by the PMA. The DF updates
the priority information whenever the network status changes. Figure 2-b) shows the
setup procedure. Table 1 shows the priority level of each type of service. The DF
classifies the traffic according to the priority information. When the DF receives a
service request message, it returns the current priority information. We can control
congestion by using the second special agent, which is called the CCA. The CCA also
uses priority information, just as the PMA does. However, the CCA verifies the priority information by periodically sending a check messages. Thus, applications (e.g.,
ftp, telnet, multimedia, etc.) can adjust their sending rate accordingly. By means of
these two agents, we can adjust the data rate at the local system (e.g., PC, PDA, and
Notebook, etc) whenever the network traffic is changed. Moreover, the network traffic can be classified using the information in the gateway. Thus, the priority is not
fixed but adjustable according to the network environment.

3 Simulations
This section presents the performance results of the priority-based service discovery
(PSD) mechanism. We simulate our mechanism with/without an infrastructure (e.g.,
AP, gateway).
3.1 Simulation with Infrastructure
We simulate these mechanisms using a simple dumbbell network model in a wired
network. The gateway has ten traffic sources and the nodes, which are attached to the
gateway, are wireless nodes. These wireless nodes do not move in our simulation. In
Link2, we test both the droptail queuing mechanism and the proposed priority-based

952

K.-H. Choi, H.-J. Shin, and D.-R. Shin

Table 1. Priority Level

Fig. 3. Network Topology

queuing mechanism. Figure 3 depicts the network topology. Using the NS simulator
[2], a simulation was conducted in order to determine to what extent the proposed
scheme improves the time-limited traffic as compared to the conventional mechanisms (droptail queue in this paper). We use TCP traffics for both the light and bulk
data traffic. Each TCP flow uses an FTP application. We change the maximum congestion window size of each TCP flow according to its priority. High priority traffic is
either CBR or EXP traffic. Figure 4 shows the simulation results. Even if the number
of traffic sources increases, the CBR traffic using PSD does not slow down, whereas
the CBR traffic with the droptail queuing mechanism does. Moreover, the TCP traffic
with PSD shows the almost the same result as that with the droptail mechanism,
which implies that the proposed scheme improves the performance of time-limited
traffic without affecting the TCP traffic.
3.2 Simulation in Ad-Hoc Network
We modify the DFS[3] mechanism using the priority information. The DFS protocol
for WLANs allocates bandwidth to flows in proportion to their weights and accounts
for variable packet sizes. The DFS schedules packets for transmission based on their
eligibility. Because of the distributed nature of the DFS protocol, collisions may occur, which causes priority reversal and undermine the fairness. Although DFS provides fairness and better throughput, the backoff interval is directly proportional to the
Packet-length/Weight ratio in the linear scheme of DFS. For this reason, we use the
priority-based backoff algorithm in enhanced DFS[4]. The scenario and parameters
used in this paper are identical to those used in DFS. We perform simulations based
on the implementation described in [3]. The channel bandwidth is set to 2Mbps. The
simulation environment consists of n nodes. All of the nodes are stationary and are in
transmission range of each other, in order to simulate a broadcast LAN. The number
of nodes is always even. In this paper, identical flows refer to flows that are always
backlogged and have equal packet size. Figure 5 shows the throughput results for the
PSD, DFS and DCF mechanisms. We note that PSD not only guarantees fairness but
also improves the throughput of time-limited traffics.

QoS-Enabled Service Discovery Using Agent Platform

953

4 Conclusions
With the increasing number of people using mobile devices such as PDAs, cellphones, notebooks, etc., the need to connect them to the Internet for ubiquitous sharing and data access is increasing. An efficient service discovery infrastructure plays
an important role in such a dynamic environment. We reviewed a number of existing
service discovery frameworks and found that they all suffer from one common problem, namely, a lack of QoS-based service discovery. In this paper, we introduced an
agent platform designed to support QoS management. The simulation results show
that the proposed mechanism improves the performance of time-limited traffic, without affecting that of other traffic, and guarantees fairness in an ad-hoc network.

Fig. 4. Aggregated throughput in wired network

Fig. 5. Throughput of 64 flows in wireless
network

References
1. FIPA: Agent Management Specification, Dec. 2002.
2. K. Fall and K. Varadhan, “ns Notes and documentation”, tech. rep., VINT Project, UCBerkeley and LBNL(2003)
3. N. H. Vaidya, P. Bahl, and S. Gupta, “Distributed Fair Scheduling in a Wireless LAN”, In
Proc. Of ACM MOBICOM2000, Boston, MA USA(200) 167–178
4. K.H Choi, H.J. Shin and Dong-Ryeol Shin, “Delay and Collision Reduction Mechanism for
Distributed Fair Scheduling in WIreless LANs”, ICCSA, May, 2004.

