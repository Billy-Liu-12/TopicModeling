Disjoint Segments with Maximum Density
Yen Hung Chen1 , Hsueh-I Lu2, and Chuan Yi Tang1
1

2

Department of Computer Science,
National Tsing Hua University, Hsinchu 300, Taiwan, R.O.C.
{dr884336, cytang}@cs.nthu.edu.tw
Department of Computer Science and Information Engineering,
National Taiwan University, Taipei 106, Taiwan, R.O.C.
hil@csie.ntu.edu.tw

Abstract. Given a sequence A of numbers and two positive integers
and k, we study the problem to ﬁnd k disjoint segments of A, each has
length at least , such that their sum of densities is maximized. We give
the ﬁrst known polynomial-time algorithm for the problem: For general
k, our algorithm runs in O(n k) time. For the special case with k = 2
(respectively, k = 3), we also show how to solve the problem in O(n)
(respectively, O(n + 2 )) time.

1

Introduction

Let A = a1 , a2 , . . . , an be the input sequence of n numbers. Let Ai,j denote
the consecutive subsequence ai , ai+1 , . . . , aj of A. The length of Ai,j , denoted
a +ai+1 +···+aj
of Ai,j .
|Ai,j |, is j − i + 1. The density of Ai,j , denoted d(Ai,j ) is i j−i+1
Observe that with an O(n)-time preprocessing to compute all O(n) preﬁx sums
a1 + a2 + · · · + aj of A, the density of any segment Ai,j can be obtained in O(1)
time.
Two segments Ai,j and Ai ,j of A are disjoint if i ≤ j < i ≤ j or i ≤
j < i ≤ j. Two segments of A overlap if they are not disjoint. Motivated by
the locating GC-rich regions [9, 14, 15, 16], CpG islands [3, 5, 11, 18] in a genomic
sequence and annotating multiple sequence alignments [17], Lin, Huang, Jiang
and Chao [13] formulated and gave an O(n log k)-time heuristic algorithm for the
problem of identifying k disjoint segments of A with maximum sum of densities.
Speciﬁcally, given two additional positive integers k and , the problem is to ﬁnd
k disjoint segments of A, each has length at least , such that the sum of their
densities is maximized. We present the ﬁrst known polynomial-time algorithm
to solve the problem. Our algorithm runs in O(n k) time for general k. We also
show that the special case with k = 2 (respectively, k = 3) can be solved in O(n)
(respectively, O(n + 2 )) time.

The corresponding author. Address: 1 Roosevelt Road, Section 4, Taipei 106, Taiwan,
R.O.C. Webpage: www.csie.ntu.edu.tw/∼hil/.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 845–850, 2005.
c Springer-Verlag Berlin Heidelberg 2005

846

Y.H. Chen, H.-I. Lu, and C.Y. Tang

Related work. When k = 1, the problem studied in the present paper becomes
the extensively studied maximimum-density segment problem [2, 6, 9, 10, 12]. The
problem for general k is also closely related to the GTile with bounded number
of tiles problem [1], which is a natural extension of the maximum-sum segment
problem studied in [12, 4].
The rest of this paper is organized as follows. Section 2 describes our O(n k)time algorithm for general k. Section 3 shows how to solve the case with k = 2
in O(n) time. Section 4 shows how to solve the case with k = 3 in O(n + 2 )
time. Section 5 concludes the paper with open questions.

2

Our Algorithm for General k

For a set U of segments, let D(U ) = S∈U d(S). A set of segments is feasible to
our problem if it consists of k disjoint segments of A, each has length at least .
A set U ∗ of segments is optimal if U ∗ is feasible and D(U ∗ ) ≥ D(U ) holds for
any feasible set U .
Lemma 1. There exists an optimal set U ∗ of segments such each segment in
U ∗ has length less than 2 .
Proof. Suppose that U ∗ contains a segment Ai,j with |Ai,j | ≥ 2 . Then, both
U ∗ ∪ {Ai,i+ −1 } − {Ai,j } and U ∗ ∪ {Ai+ ,j } − {Ai,j }. Moreover, one of them
has to be optimal, since max(d(Ai,i+ −1 ), d(Ai+ ,j )) ≥ d(Ai,j ). We then use the
new optimal set to replace the original U ∗ . The lemma is proved by continuing
this process until each segment in the resulting optimal set U ∗ has length less
than 2 .
According to Lemma 1, it suﬃces to focus on segments with lengths at least
and less than 2 . Let ρ be the number of such segments in A. Clearly, ρ = O(n ).
Deﬁne G to be a graph on these ρ segments such that two nodes in G are adjacent
if and only if their corresponding segments overlap in A. Observe that G is an
interval graph. Let the weight of each node be the density of its corresponding
segment. Then, the problem to compute an optimal set U ∗ of segments becomes
the problem to identify a maximum weight independent set of G that has size
k. To the best of our knowledge, no such an algorithm is known, although the
version without restriction on the size has been studied in the literature [8, 7].
Our algorithm for identifying an optimal U ∗ is via the standard technique of
dynamic programming as shown below. For each j = 1, 2, . . . , n, let Aj consist
of the segments Ai,j of A with 1 ≤ i ≤ j ≤ n and ≤ |Ai,j | < 2 . For each
∗
denote a set of t disjoint segments of A1,j , each has length
j = 1, 2, . . . , n, let Uj,t
∗
∗
) is maximized. Note that U ∗ = Un,k
.
at least and less than 2 , such that D(Uj,t
∗
One can easily compute all Uj,1 with 1 ≤ j ≤ n in O(n ) time. For technical
∗
∗
= ∅ and D(Uj,t
) = −∞. To compute all O(nk)
reason, if j < t , then let Uj,t
∗
entries of Uj,t in O(n k) time, we use the following straightforward procedure
for each t > 1 and j ≥ t .
∗
∗
Let Uj,t
= {As,j } ∪ Us−1,t−1
, where s is an index i that maximizes
∗
) over all indices i such that Ai,j is a segment in Aj .
d(Ai,j ) + D(Ui−1,t−1

Disjoint Segments with Maximum Density

847

∗
Since each Aj has size O( ), if those Uj,t−1
with j = 1, 2, . . . , n are available,
∗
then all Uj,t with j = 1, 2, . . . , n can be computed in O(n ) time. One can then
∗
in O(n k) time by iterating the above process for t = 2, 3, . . . , k.
obtain U ∗ = Un,t
Therefore, we have the following theorem.

Theorem 1. It takes O(n k) time to find k disjoint segments of a length-n
sequence, each has length at least , such that the sum of their densities is maximized.

3

Our Algorithm for k = 2

It turns out that the linear time algorithm of Chung and Lu [2] for the case
with k = 1 can be a useful subroutine to solve the case with k = 2 in linear
time. For each i = 1, 2, . . . , n, let Pi (respectively, Qi ) be a maximum density
segment with length at least for A1,i (respectively, Ai,n ). Clearly, Pi and Qi+1
are disjoint segments of A for each i = 1, 2, . . . , n − 1. Chung and Lu’s algorithm
has the nice feature that can process the input sequence in an online manner.
Therefore, all Pi and Qi with 1 ≤ i ≤ n can be computed by Chung and Lu’s
algorithm in O(n) time. The set {Pi , Qi+1 } with maximum D({Pi , Qi+1 }) is
clearly an optimal solution for the case with k = 2. Therefore, we have the
following theorem.
Theorem 2. It takes O(n) time to compute a pair of disjoint segments of a
length-n sequence, each has length at least , such that the sum of their densities
is maximized.

4

Our Algorithm for k = 3

Suppose that So1 , So2 and So3 form an optimal set of segments for the case with
k = 3. We ﬁrst ﬁnd a maximum-density segment SM = Ami ,mj in A. We also
compute maximum-density segments SL = Ali ,lj in A1,mi −1 and SR = Ari ,rj in
Amj +1,n , respectively. Then we ﬁnd the optimal two disjoint density segments
{SL1 , SL2 } in A1,mi −1 and {SR1 , SR2 } in Amj +1,n . Let {SM , SM } be the element in
{{SL , SR }, {SL1 , SL2 }, {SR1 , SR2 }}
that has maximum sum of densities. Moreover, we ﬁnd the maximum-density
segment SLL = Alli ,llj in A1,li −1 and the maximum-density segment SRR =
Arri ,rrj in Arj +1,n . Furthermore, we ﬁnd the maximum density segment SLLL
in A1,lli −1 and the maximum-density segment SRRR in Arrj +1,n . For brevity,
we use Sx ∼ Sy (respectively, Sx ↔ Sy ) to denote that segments Sx and Sy
overlap (respectively, are disjoint). Let U be the set of segments which are intersect to SM with length from to 2 − 1. Finally, for each segment S in U , we
perform the following Algorithm 1 to ﬁnd three disjoint segments {S1 , S2 , S3 }
with {S1 , S2 , S3 } ∩ S = ∅.

848

Y.H. Chen, H.-I. Lu, and C.Y. Tang

Algorithm 1:
1. For each segment Sv = Avi ,vj in U , let S2 = Sv . do
1.1. (Case 1: Sv ∼ ami but Sv ↔ amj ): Find the maximum-density
segment SR in Avj +1,mj +2 −2 . Then let S3 = SR .
If Sv ↔ SL then S1 = SL
else
If Sv ∼ SL but Sv ↔ SLL then ﬁnd the maximum-density segment
SL in Ali −2 +2,vi −1 then let S1 be the maximum density segment
between SL and SLL .
else ﬁnd the maximum-density segment SL in Alli −2 +2,vi −1 then let
S1 be the maximum density segment between SL and SLLL .
1.2. (Case 2: Sv ∼ amj but Sv ↔ ami ): Find the maximum-density
segment SL in Ami −2 +2,vi −1 . Then let S1 = SL .
If Sv ↔ SR then let S3 = SR
else
If Sv ∼ SR but Sv ↔ SRR then ﬁnd the maximum-density segment
SR in Avj +1,rj +2 −2 then let S3 be the maximum density segment
between SR and SRR .
else ﬁnd the maximum-density segment SR in Avj +1,rrj +2 −2 then
let S3 be the maximum density segment between SR and SRRR .
1.3. (Case 3: Sv ⊂ Sm ): Find the maximum-density segments SL and
SR in Ami −2 +2,vi −1 and Avj +1,mj +2 −2 . Let {S1 , S3 } = {SL , SR }.
end for
2. Let {Sa , Sb , Sc } be the maximum total density segments in all these three
disjoint segments {S1 , S2 , S3 }.
Finally, if
D({Sa , Sb , Sc }) ≤ D({SM , SM , SM }),
then let {So1 , So2 , So3 } be {SM , SM , SM }; otherwise, let {So1 , So2 , So3 } be
{Sa , Sb , Sc }. Though there are O( 2 ) iterations in Algorithm 1, we only need
O( 2 ) time in total. We can pre-process to ﬁnd all SR in case 1, all SR in case
3, all SL in case 2 and all SL in case 3 in O( 2 ) time. Because the lengths
of Ami −2 +2,vi −1 and Avj +1,mj +2 −2 are O( ) and the length of SM is at most
2 − 1. Also pre-process to ﬁnd all SL in case 1 and all SR in case 2 take O( 2 )
time. As a result, the time complexity of Algorithm 1 is O( 2 ).
Theorem 3. It takes O(n + 2 ) time to compute three disjoint segments of a
length-n sequence, each has length at least , such that the sum of their densities
is maximized.
Proof. Since the time complexity of Algorithm 1 is O( 2 ), our algorithm runs in
O(n + 2 ) time. It remains to prove the correctness of our algorithm. For any
three disjoint segments {S1 , S2 , S3 } in A, we will show
D({So1 , So2 , So3 }) ≥ D({S1 , S2 , S3 }).

Disjoint Segments with Maximum Density

849

For convenience, let S1 be the left segment, let S2 be the middle segment, and
let S3 be the right segment for the three disjoint segments {S1 , S2 , S3 } in A.
First, if each of S1 , S2 and S3 does not overlap with SM , then
D({SM , SM , SM }) ≥ D({S1 , S2 , S3 }).
If only one segment of {S1 , S2 , S3 } overlaps with SM , then
D({SM , SM , SM }) ≥ D({S1 , S2 , S3 }).
Hence, the rest of the proof assumes that at least two segments of {S1 , S2 , S3 }
overlaps with SM and
D({S1 , S2 , S3 }) > D({SM , SM , SM }).
Without loss of generality, we may assume that segment S2 = Sv = Avi ,vj
overlaps with SM . Then we consider the following three cases. Case 1: Sv ∼ ami
but Sv ↔ amj , case 2: Sv ∼ amj but Sv ↔ ami , and case 3: Sv ⊂ Sm . We
prove the result for case 1 and case 3. The case 2 can be shown similar to case
1. For case 1, let SR is the maximum-density segment in Avj +1,mj +2 −2 and
S3 = SR . Because d(S1 ) ≤ d(SL ) and d(S2 ) ≤ d(SM ), the segment S3 must be
a subsequence in Avj +1,mj +2 −2 ; otherwise, we have
D({SL , SM , SR }) ≥ D({S1 , S2 , S3 }).
Hence, we only choose a best S1 in A1,vi −1 . We consider the following three cases.
(1) if Sv ↔ SL , we only let S1 = SL because SL is the maximum-density segment
in A1,mi −1 . (2) If Sv ∼ SL but Sv ↔ SLL . For S1 , we only consider the segments
SLL and SL , where SL is a maximum-density segment in Ali −2 +2,vi −1 . Because
S1 ∼ SL , segment S1 is either in A1,li −1 or in Ali −2 +2,vi −1 . (3) Sv ∼ SL and SLL .
For S1 , we only consider the segments SLLL and SL , where SL is a maximumdensity segment in Alli −2 +2,vi −1 . Because S1 ∼ SLL , segment S1 is either in
A1,lli −1 or in Alli −2 +2,vi −1 . For case 3, let SL is the maximum-density segment
in Ami −2 +2,vi −1 and SR is the maximum-density segment in Avj +1,mj +2 −2 .
Because d(Sv ) ≤ d(SM ), we only let {S1 , S2 , S3 } = {SL , Sv , SR }. Otherwise,
we have
D({SL , SM , SR }) ≥ D({S1 , S2 , S3 }).

5

Conclusion

We have shown the ﬁrst known polynomial-time algorithm to compute multiple disjoint segments whose sum of densities is maximized. An immediate open
question is whether the problem can be solved in o(n k) time. Also, it would be
interesting to see our techniques for k = 2, 3 to be generalized to the cases with
larger k.

850

Y.H. Chen, H.-I. Lu, and C.Y. Tang

References
1. P. Berman, P. Bertone, B. DasGupta, M. Gerstein, M.-Y. Kao and M. Snyder: Fast
Optimal Genome Tiling with Applications to Microarray Design and Homology
Search. Journal of Computational Biology, 11:766–785, 2004.
2. K.-M. Chung and H.-I. Lu: An Optimal Algorithm for the Maximum-Density Segment Problem. SIAM Journal on Computing, 34:373–387, 2004.
3. R. Durbin, S. Eddy, A. Krogh, and G. Mitchison: Biological Sequence Analysis.
Cambridge University Press, 1998.
4. T.-H. Fan, S. Lee, H.-I. Lu, T.-S. Tsou, T.-C. Wang, A. Yao: An Optimal Algorithm
for Maximum-Sum Segment and Its Application in Bioinformatics. In Proceedings
of the 8th International Conference on Implementation and Application of Automata, Lecture Notes in Computer Science 2759, 251–257, Santa Barbara, July
2003, Springer-Verlag.
5. M. Gardiner-Garden, and M. Frommer: CpG Islands in Vertebrate Genomes. Journal of Molecular Biology, 196:261–282, 1987.
6. M.H. Goldwasser, M.-Y. Kao, and H.-I. Lu: Linear-Time Algorithms for Computing
Maximum-Density Sequence Segments with Bioinformatics Applications. Journal
of Computer and System Sciences, 70:128–144, 2005.
7. U. I. Gupta, D. T. Lee, and J. Y.-T. Leung: Eﬃcient Algorithms for Interval Graphs
and Circular-Arc Graphs, Networks 12:459–467, 1982.
8. J. Y. Hsiao, C. Y. Tang, and R. S. Chang: An Eﬃcient Algorithm for Finding a
Maximum Weight 2-Independent Set on Interval Graphs, Information Processing
Letters, 43(5):229-235, 1992.
9. X. Huang: An algorithm for Identifying Regions of a DNA Sequence That Satisfy
a Content Requirement. Computer Applications in the Biosciences, 10:219–225,
1994.
10. S. K. Kim: Linear-Time Algorithm for Finding a Maximum-Density Segment of a
Sequence. Information Processing Letters, 86:339-342, 2003.
11. F. Larsen, R. Gundersen, R. Lopez, and H. Prydz: CpG Islands as Gene Marker
in the Human Genome. Genomics, 13:1095–1107, 1992.
12. Y.-L. Lin, T. Jiang, K.-M. Chao: Eﬃcient Algorithms for Locating the LengthConstrained Heaviest Segments with Applications to Biomolecular Sequence Analysis. Journal of Computer and System Sciences, 65:570–586, 2002.
13. Y.-L. Lin, X. Huang, T. Jiang, K.-M. Chao: MAVG: Locating Non-overlapping
Maximum Average Segments in a Given Sequence. Bioinformatics, 19:151–152,
2003.
14. A. Nekrutenko and W.-H. Li: Assessment of Compositional Heterogeneity within
and between Eukaryotic Genomes. Genome Research, 10:1986–1995, 2000.
15. P. Rice, I. Longden, and A. Bleasby: EMBOSS: The European Molecular Biology
Open Software Suite. Trends in Genetics, 16:276–277, 2000.
16. P. H. Sellers: Pattern Recognition in Genetic Sequences by Mismatch Density.
Bulletin of Mathematical Biology, 46:501–514, 1984.
17. N. Stojanovic, L. Florea, C. Riemer, D. Gumucio, J. Slightom, M. Goodman, W.
Miller, and R. Hardison: Comparison of Five Methods for Finding Conserved Sequences in Multiple Alignments of Gene Regulatory Regions. Nucleic Acids Research, 27:3899–3910, 1999.
18. D. Takai, and P.A. Jones: Comprehensive Analysis of CpG Islands in Human Chromosomes 21 and 22. Proceedings of the National Academy of Sciences, 99:3740–
3745, 2002.

