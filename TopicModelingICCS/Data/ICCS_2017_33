Available online at www.sciencedirect.com

This
This
This

ScienceDirect

space is reserved for the Procedia header, do not use it
space
isComputer
reservedScience
for the
header, do not use it
Procedia
108CProcedia
(2017) 897–906
space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Agent-based Decision Support System
Agent-based Decision Support System
for Technology
Recommendation
Agent-based
Decision
Support System
for1 Technology Recommendation
1
Grzegorz Legien
Sniezynski
, Dorota Wilk-Kolodziejczyk12 ,
for1, Bartlomiej
Technology
Recommendation
1
12
2
1

GrzegorzKluska-Nawarecka
Legien , Bartlomiej
Sniezynski
, Dorota
Wilk-Ko
lodziejczyk
, 2
, Edward
Nawarecki
, and
Krzysztof
Jaśkowiec
Stanisawa
2
1
1
12
, Edward
Nawarecki
, and
Krzysztof
Jaśkowiec
Stanisawa
Kluska-Nawarecka
Grzegorz
Legien1 , Bartlomiej
Sniezynski
, Dorota
Wilk-Ko
lodziejczyk
, 2
1
AGH University of Science and2 Technology, Al. Mickiewicza
1 30, 30-059 Krakow, Poland, 2
, Edward Nawarecki , and Krzysztof Jaśkowiec
Stanisawa
Kluska-Nawarecka
1
bartlomiej.sniezynski@agh.edu.pl
1

AGH University of Science and Technology, Al. Mickiewicza 30, 30-059 Krakow, Poland,
2
Foundry Research Institute
in Krakow, Zakopianska Street 73, Krakow, Poland
bartlomiej.sniezynski@agh.edu.pl
AGH
University of Science
and Technology, Al. Mickiewicza 30, 30-059 Krakow, Poland,
2
Foundry Research Institute
in Krakow, Zakopianska Street 73, Krakow, Poland
bartlomiej.sniezynski@agh.edu.pl
2

Foundry Research Institute in Krakow, Zakopianska Street 73, Krakow, Poland

Abstract
This paper presents an idea of a multi-agent decision support system. Agent-based technology
Abstract
allowspaper
for decentralized
problem
and creating
systems,
mixing
This
presents an idea
of a solving
multi-agent
decisioncomplex
support decision
system. support
Agent-based
technology
Abstract
various
processing
as simulation,
reasoning
machine
learning
and mixing
allows
allows
for
decentralized
problem
solving
and creating
complex
decision
support
systems,
This paper
presentstechniques,
an idea
of asuch
multi-agent
decision
supportand
system.
Agent-based
technology
for distributed
knowledge.
Oursuch
main
iscomplex
an agent-based
architecture
for
various
processing
techniques,
as contribution
simulation,
reasoning
and
machine
learning
anddecision
allows
allows
for
decentralized
problem
solving
and creating
decision
support
systems,
mixing
support
systemsknowledge.
which
is anOur
agent-based
implementation
of aand
labeled
deductive
system.
Such
for
distributed
main
is an agent-based
architecture
for
various
processing
techniques,
such
as contribution
simulation,
reasoning
machine
learning
anddecision
allows
approach
allowsknowledge.
to decompose
an
inference
algorithm
modules and
support
systems
which
is anOur
agent-based
implementation
of aseparate
labeled architecture
deductive
system.
Such
for
distributed
main
contribution
is aninto
agent-based
fordistribute
decision
knowledge
base into
parts.
system
isimplementation
tested
on a domain
of material
choice
support
for
approach
allows
to decompose
an
inference
algorithm
into
modules
and
distribute
support systems
which
is an The
agent-based
of aseparate
labeled
deductive
system.
Such
casting. allows
knowledge
base into
parts. Thean
system
is tested
on a domain
of material
choice
for
approach
to decompose
inference
algorithm
into separate
modules
andsupport
distribute
casting.
knowledge
base
into
parts.
The
system
is
tested
on
a
domain
of
material
choice
support
for
Keywords:
agent-based
expert
system, B.V.
inference and machine learning integration, logic of plausible
©
2017 The Authors.
Published
by Elsevier
casting.
Peer-review
under
responsibility
of
the
scientific
committee
of
the
International
Conference
on
Computational
Science
reasoning agent-based expert system, inference and machine learning integration, logic of plausible
Keywords:
reasoning
Keywords: agent-based expert system, inference and machine learning integration, logic of plausible
reasoning

1 Introduction
1 Introduction
Multi-agent systems are efficient architectures for decentralized problem solving [1]. Decision
1
Introduction
support systems may be very complex. Therefore such architectures are applied in such systems

Multi-agent systems are efficient architectures for decentralized problem solving [1]. Decision
development
[5, 6,
7, are
8, very
9].
An
agent-based
technology
allows toproblem
mix
processing
techsupport
systems
may
be
complex.
Therefore
architectures
arevarious
applied
in [1].
suchDecision
systems
Multi-agent
systems
efficient
architectures
forsuch
decentralized
solving
niques,
such
as
simulation,
reasoning
and
machine
learning
and
allows
to
distribute
processing.
development
[5,
6,
7,
8,
9].
An
agent-based
technology
allows
to
mix
various
processing
techsupport systems may be very complex. Therefore such architectures are applied in such systems
Our
main
contribution
is
an
agent-based
architecture
for
decision
support
systems.
Our
niques,
such
as
simulation,
reasoning
and
machine
learning
and
allows
to
distribute
processing.
development [5, 6, 7, 8, 9]. An agent-based technology allows to mix various processing techapproach
has
a
theoretical
background:
our
system
is
an
agent-based
implementation
of
a
Our
main
contribution
is
an
agent-based
architecture
for
decision
support
systems.
Our
niques, such as simulation, reasoning and machine learning and allows to distribute processing.
labeled
deductive
system
in
which
agents
are
used
to
decompose
the
system
simultaneously
approach
has
a
theoretical
background:
our
system
is
an
agent-based
implementation
of
a
Our main contribution is an agent-based architecture for decision support systems. Our
in
two
orthogonal
dimensions:
knowledge
distribution
and
processing.
The
first
one
allows
labeled
deductive
system
in
which
agents
are
used
to
decompose
the
system
simultaneously
approach has a theoretical background: our system is an agent-based implementation of a
to
create
a system,system
in which
a knowledge
base
is divided
parts.
InThe
this first
way
a decision
in
two
orthogonal
dimensions:
distribution
andinto
processing.
one
allows
labeled
deductive
in which
agents are
used
to decompose
the system
simultaneously
support
service
may
be
provided
without
sharing
the
knowledge.
The
second
dimensions
allows
to
create
a
system,
in
which
a
knowledge
base
is
divided
into
parts.
In
this
way
a
decision
in two orthogonal dimensions: knowledge distribution and processing. The first one allows
to
anmay
inference
algorithm
intosharing
separate
support
be which
provided
without
themodules.
knowledge.
The second
dimensions
allows
to decompose
createservice
a system,
in
a knowledge
base is
divided
into parts.
In this
way a decision
This
work
is
a
continuation
of
[3,
4]
in
which
we
presented
LPR
Intelligent
Information
Systo
decompose
an
inference
algorithm
into
separate
modules.
support service may be provided without sharing the knowledge. The second dimensions allows
tem
(LIIS)
with
a
centralized
architecture.
We
have
chosen
the
same
knowledge
representation
This
work
is
a
continuation
of
[3,
4]
in
which
we
presented
LPR
Intelligent
Information
Systo decompose an inference algorithm into separate modules.
temThis
(LIIS)
with
a
centralized
architecture.
We
have
chosen
the
same
knowledge
representation
work is a continuation of [3, 4] in which we presented LPR Intelligent Information Sys1
tem (LIIS) with a centralized architecture. We have chosen the same knowledge representation
1
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.034

898	

Agent-based Decision SupportGrzegorz
System Legien
for Technology
Recommendation
Legień,
B. Śnieżyński, et al.
et al. / Procedia
Computer Science 108CG.
(2017)
897–906

and reasoning formalism: the Logic of Plausible Reasoning (LPR) [2] and applied an agentbased architecture. As a result, our implementation combines many knowledge manipulation
techniques during reasoning in a decentralized way. It also allows to integrate the machine
learning techniques in the reasoning algorithm. Execution of the learning algorithm is defined
as a complex inference rule executed in an inference chain if the reasoning process is not able
to continue classical reasoning. Training data consists of facts stored already in the knowledge
base. The new knowledge may be used in the same inference chain to derive a decision.
In the following sections related research is discussed, the agent-based model of the system
is presented. Next, LPR basics and the software are described. Results of experiments in a
domain of technology recommendation for casting conclude the work.

2

Related research

The main point of using decision support systems (DSS)[7] is to provide a user with the possibility to consult with an automated system while making decisions. The DSS, as a rule, includes a
set of procedures, starting from data determination and processing, and finishing by generation
and evaluation of alternatives. Thus, a typical DSS can be logically divided and represented
by three main modules or levels: the first one, responsible for data fusion and pre-processing,
the second, dedicated to a necessary calculations (modeling, data mining, etc.) and the third,
which executes simulation and manages a humancomputer interaction. Agent-based decision
support system (ADSS) architecture presented in the cited paper was developed in accordance
with the typical structure of a DSS. The system consists of three levels, the first is aimed
for meta-data creation, the second is responsible for hidden knowledge discovering, and the
third level provides a real-time decision. It is applied to support environmental health impact
decisions.
In paper [6] a framework for building decision support systems using an agent-based technology is proposed to support organizations characterized by physically distributed, enterprisewide, heterogeneous information systems. Intelligent agents have offered big potential in supporting well-defined tasks such as information filtering, data mining and data conversion. This
paper proposes a taxonomy of agent characteristics that can be used to help to identify agents
providing different types of decision tasks. Development of agent-based DSS is proposed as being a process of putting together a coordinated workflow of collaborating agents that is able to
support a problem-solving process. Developing an agent-based DSS requires a new approach.
Two-tier approach is proposed to designing an agent-based DSS. The first tier is in essence
an assignment model that consists of searching, identifying and selecting the agent(s) that are
most appropriate to accomplish required tasks. The second aims at devising a coordination and
collaboration strategy for all the involved agents to work together (the last two phases of the
lifecycle). This phase consists of finding decision support requirements and devising a detailed
breakdown of all decision processes. Processes are sets of partially ordered steps intended to
reach a particular goal. Process steps are the most primitive, atomic processes.
The aim of [9] is to prepare an expert system based on intelligent softbots and prepare and
propose a portfolio of Information Systems (IS) that has the maximum alignment with the strategy plan. Attaining such an issue, an expert system, which emerges through the implementation
of a credible methodology, is proposed. The fuzziness of such an expert system is embedded in
its data supply agent which prepares necessary information through an environmental survey.
In paper [5] a multi-agent architecture is proposed for an electric arc furnace steel making
processes. Adaptive neuro-fuzzy inference system is used to generate agents knowledge bases.
Contract net protocol is used as negotiation protocol in the proposed multi-agent system. The
2

	

Agent-based Decision SupportGrzegorz
System Legien
for Technology
Recommendation
Legień,
B. Śnieżyński, et al.
et al. / Procedia
Computer Science 108CG.
(2017)
897–906

proposed multi-agent architecture is organized as a population of cognitive, autonomous, and
heterogeneous agents, the User agent, Ingot Casting (IC) agent, Vacuum Degassing (VD) agent,
Ladle Furnace (LF) agent, Electric Arc Furnace (EAF) agent, and Customer agent. Each agent
is responsible for locally executing the tasks of the resource in charge, and has the ability to
co-operate and communicate with other agents.
Integration of the machine learning and reasoning is a field of study of several researchers.
A system presented in [10] is based on Neural logic networks corresponding to three-valued
logic. System allows for adaptive learning of new rules from its experience. In [11] neural
network is applied to overcome brittleness of classical expert systems. It is used for choosing
the most appropriate questions for the current case. Description of user’s interaction with
system is collected as training data for the network. In [12] adaptive expert system is proposed
for aircraft maintenance. It recommends the most accurate action for symptoms reported by
user. Like in examples above, learning uses historical data (in this case repairs register) to
update association weights between symptoms and actions. Certainty of suggested diagnosis is
increased in case of successful prediction or decreased in the other case. Symptoms may be also
combined using generalization. In the solutions presented above machine learning algorithms
are not part of the formal reasoning system. Therefore the integration of machine learning and
reasoning is not complete.
In CoMES system [13] authors attempted to join many popular techniques from Artificial
Intelligence and Software Engineering. Machine learning is used for updating the knowledge
base, which can be accessed by few algorithms in parallel. The system uses an agent architecture
to integrate knowledge from human experts and other expert systems.
Logic of Plausible Reasoning (LPR) used in our system for knowledge representation was
proposed by Alan Collins and Richard Michalski [2]. The goal of that work was to identify
reasoning patterns used by humans and create a formal system, which would be able to represent
these patterns. The objective set by the creators has caused that LPR is significantly different
from other known knowledge representation methods: there are many inference rules in LPR
and many parameters are specified for representing the uncertainty of knowledge.

3

Agent-based Architecture for Decision Support Systems

In this section our agent-based architecture for decision support systems is introduced. At the
beginning general assumptions and agents are introduced. Next, a knowledge representation
applied and a distributed inference algorithm are presented. At the end, the most important
issues related to system implementation are discussed.
Agents The system is designed as a framework, which is based on the Knowledge Market
component and other agents with various responsibilities. All agents share a common API
for inter-agent communication. To join the system an agent needs only to know the host and
a TCP port of the Knowledge Market service. Using these parameters it can register in the
Knowledge Market and start serving or listening for requests. Each request contains its ID,
type (for example: reasoning, proof cost calculation request, search for a knowledge element)
and a map containing request data, which depend on the request type. The data form is not
verified by the framework. The receiver of the request determines the way how the data is
used. An agent can also subscribe to receive requests of all/selected types. It needs to define
a function for handling the subscribed requests. Knowledge Market component keeps a list of
3

899

900	

Agent-based Decision Support System for Technology Recommendation
G. Legień, B. Śnieżyński, et al.
Grzegorz Legien et al. / Procedia Computer Science 108C (2017) 897–906

1
Knowledge Market

Registrations’
Queue

Requests’
Topic

LPR
Reasoning
Request

Answer

KME
Agent
API

Registered
agent

KME
Agent
API

Reasoning
agent

4

3
Answer
Registration
Message

KME
Agent
API

Unregistered
agent

LPR
Reasoning
Request

2
Reasoning
Engine
(e.g. LprLibrary)

Figure 1: Agent-based Architecture for Decision Support Systems
connected agents, gathers statistics and provides infrastructure required for communication. It
wraps a messaging bus and initializes queues and topics. The list of agents is updated during a
registration and unregistration. Knowledge Market can be spotted as a type of a Broker Agent.
Architecture we propose is presented in Fig. 1. The figure shows also the following scenario:
1.
2.
3.
4.

Knowledge Market initialization.
Agents register in the Knowledge Market service.
Reasoning Agent subscribes for requests of type ”LPR Reasoning”.
Registered Agent sends a request of type ”LPR Reasoning” (step 1 in Fig. 1), which
contains a hypothesis to verify. The agent also subscribes for a related answer.
5. The message is assigned to the JMS topic in a Knowledge Market component.
6. One of the Reasoning Agents receives the request (step 2 in Fig. 1). It processes the
request (finds a proof), packs a response and sends it back (step 3 in Fig. 1).
7. Message is transported to the Knowledge Market and sent to the Registered Agent (step
4 in Fig. 1).
Knowledge representation The framework described above provides an environment for a
distributed reasoning using various representation techniques. In our research we have chosen
LPR. If needed, instead of LPR another technique, which can be formulated using LDS, may
be easily used.
The language used by LPR consists of a countable set of constants C, variables X, the
seven relational symbols, and logical connectives → and ∧. Formally, it is a quadruple: L =
(C, X, {V, H, B, E, S, P, N }, {→, ∧}). The relational symbols (V, H, B, E, S, P, N ) are used for
defining the following relationships:
• H defines the hierarchy; expression H(o1 , o, c) means that o1 is o in a context c;
• B is used to present the fact that one object is placed below another one in a hierarchy;
• V is used for representing statements: V (o, a, v) is a representation of the fact that object
o has an attribute a equal to v;
• E is used for representing relationships; the notation E(o1 , a1 , o2 , a2 ) means that values
of attribute a1 of object o1 depend on attribute a2 of the second object o2 ;
4

	

Agent-based Decision Support System for Technology Recommendation
G. Legień, B. Śnieżyński, et al.
Grzegorz Legien et al. / Procedia Computer Science 108C (2017) 897–906

Table 1: Selected rules transforming object-attribute-value triples
GENo
H(o1 , o, c)
E(o, a, o, c)
V(o1 , a, v)
V(o, a, v)

SP ECo
H(o1 , o, c)
E(o, a, o, c)
V(o, a, v)
V(o1 , a, v)

SIMo
S(o1 , o2 , c)
E(o1 , a, o1 , c)
V(o2 , a, v)
V(o1 , a, v)

MP
α1 ∧ . . . ∧ αn → V(o, a, v)
α1
..
.
αn
V(o, a, v)

• S determines similarity between objects; S(o1 , o2 , c) represents the fact that o1 is similar
to o2 in a context c;
• P represents order: P (o1 , o2 ) means that concept o1 precedes concept o2 ;
• N is used for comparing the concepts; N (o1 , o2 ) means that concept o1 is different from
the concept o2 .
To represent vagueness of the knowledge it is possible to extend statement definition and
allow to use composite value [v1 , v2 , . . . , vn ] (list of elements of C). It can be interpreted that
object o has an attribute a equal to v1 or v2 , . . ., or vn . If n = 1 instead of V (o, a, [v1 ]) notation
V (o, a, v1 ) is used.
In statements, value should be placed below an attribute in a hierarchy: if V (o, a, [v1 , v2 , . . .,
vn ]) is in a knowledge base, there should be also H(vi , a, c) for any 1 ≤ i ≤ n, c ∈ C.
LPR formula means every atomic formula: H(o1 , o2 , c), B(o1 , o2 ), V (o, a, v), E(o1 , a1 ,
o2 , a2 ), S(o1 , o2 , c), P (o1 , o2 ), where o, o1 , o2 , a, a1 , a2 , c, v ∈ C, a conjunction of atomic formulas and implications in the form of α1 ∧ α2 ∧ . . . αn → V (oα , aα , v α ), where n ∈ N, n >
α α
α
α
α
α
0. It is assumed that αi has the form of V (oα
i , ai , vi ), P (vi , wi ) or N (vi , wi ), and
α α α α α α
α
o , oi , a , ai , v , vi , wi ∈ C ∪ X for 1 ≤ i ≤ n.
Inference is defined as a sequence of proof rule applications. Every proof rule has its cost
assigned. The reasoning algorithm searches for proofs with high certainty and low cost.
The most commonly used proof rules operate on the statement (others can be found in [2]).
Index attached to the name of the rule tells us what is transformed: o is an object, and v is the
value. Selected rules are shown in Table 1. GENo is generalization of objects in statements (its
opposite is SPECo – object specialization. SIMo represents reasoning by analogy (similarity)
between objects. There are also similar rules transforming values in statements: GENv, SPECv
and SIMv. MP is the classical Modus Ponens inference rule.
Machine learning algorithms may be automatically executed during an inference process.
Currently two complex proof rules are defined. Both apply rule induction using AQ [16] or C4.5
[17] algorithms. See [3] for details.
Inference algorithm Reasoning algorithm (see [3]) is an adaption of the A* algorithm,
which allows to limit the size of the inference tree built to find a proof. Our implementation
uses elements of Breadth-first search, exploring shortest branches of the tree first.
Calculation of proof’s cost is moved outside of the original reasoning algorithm and is
performed by a specialized agent. Calculation distribution can go even further: reasoning
process can be performed by a group of agents working in parallel.
Implementation Application is completely written in Java. To achieve an architecture distribution, Java Messaging Service API is used, in Active MQ implementation. Application is
5

901

902	

Agent-based Decision SupportGrzegorz
System Legien
for Technology
Recommendation
Legień,
B. Śnieżyński, et al.
et al. / Procedia
Computer Science 108CG.
(2017)
897–906

based on an asynchronous communication concept and a publish - subscribe model. Request
and answers are sent serialized as JSON with Gson library. Topics for inter-agent communication are stored in the agent called ”Knowledge Market”. Dependencies and build process are
managed by Maven.
Project structure is divided into two main parts: API dedicated for Agents and environmental components. First group contains interfaces and classes required for agent to cooperate
with other agents - registration in environment, sending requests, receiving responses, subscribing and unsubscribing. Generally they wrap JMS methods and group packages with data
required for command (register, send) execution. Environmental components implement agent
which works as an administrative node. It stores registry of agents working in environment and
statistics. Knowledge Market agent also configures Apache MQ, initializes JMS structures and
opens port for connections. Provided REST API, which allows sending reasoning request and
checking it state, was implemented with use of Jersey framework. Reasoning agent presented
in experimental part takes advantage of LprLibrary.

4

Experimental Results

Experiments simulate a situation where an agent-based environment is a backend of recommendation system from field of metalurgy. User answers questions of a diagnostic scenario,
providing knowledge elements used later during a reasoning. Its aim is search for an optimal
recommendation of casting, matching user’s constraints. Request Sender Agent can be spoted
as an initial point of whole process, which starts when a user answers (or skips) all questions.
During experiments two scenarios were evaluated in the fully initialised, distributed agent
environment. Responsibilities for inferencing and calculating proof’s cost are sepearted into
different agents, which could be a common real-world case. In effect three agents are used:
• Request Sender - agent has a hypothesis which needs to be proved and its proof’s cost
has to be estimated.
• Reasoning Agent - uses a LPR reasoning engine to propose a proof for the given hypothesis.
• Cost Calculator Agent - calculates cost of the proof. Its policy may be based on a
computational cost, resource-consumption or any other criterion.
At the beginning all agents need to register in the environment. In the next step Request
Sender Agent sends request with a hypothesis to verify. Message is catched by the Reasoning
Agent which is designed for handling this type of requests. When inferencing is finished, its
result is sent back to the Request Sender. If a proof has been found, its cost still misses. Agent
sends the proof to the Cost Calculator Agent. It computes proof’s cost and sends it again to
the Request Sender. This pattern is followed by both scenarios below.
Knowledge Base To show advantages of the proposed solution, a decision support system
was developed in a domain, which is complex enough, contains hierarchies of objects, and is
characterized by a number of parameters of an intuitive nature, difficult to measure. The system
supports the choice of metal products manufacturing technology, casting technology included.
The knowledge base consists of more than 700 formulas.
In the application of LIIS system considered here an appropriate material, which could
replace the traditional materials (forged steel, cast steel) is recommended. This material can
be Austempered Ductile Iron (ADI), which has a favorable relationship between the tensile
strength (Rm) and an elongation (A), offering at the same time significantly lower manufacturing costs (savings of approx. 20%). The decision about the possible use of ADI must be
6

	

Agent-based Decision SupportGrzegorz
System Legien
for Technology
Recommendation
Legień,
B. Śnieżyński, et al.
et al. / Procedia
Computer Science 108CG.
(2017)
897–906

based, however, on more detailed analysis of requirements imposed on a particular product
and its characteristics, to mention as an example the damping capacity, corrosion resistance,
dimensions, the batch size, and the weight of a single item.
Core of the knowledge base are hierarchies. They were defined during consultations with experts. They represent facts that ADI is a kind of cast iron and define its 63 subtypes (ADI GSJ1400-1, ADI 1, ADI 2, ..., ADI 31, ..., ADI 34, ADI 41, ..., ADI 44, ADI 51, ..., ADI 68, ... ).
Context is related to a cost, production volume, application and mechanical properties. The
first label value (typicality) is high (often equal to 1.0), which means that certainty of specialization of objects and values (SPECo and SPECv) will be also high. The second label
(dominance) is low. Examples of hierarchy formulas: H(adi, cast iron, cost): 0.8: 0.1, H(adi,
cast iron, volume production):0.8:0.1, H(adi gsj-1400-1,adi, application):1.0:0.1.
The following notation denotes the similarity between two types of materials, which in this
case are ADI and carburized steel, discussed in terms of their application. Label represents a
high similarity level. Example of the similarity formula: S(adi,steel carburized,application):0.8
In statements a minimum elongation and tensile strength of selected steel grades are
expressed. Labels representing certainty have high values. Similar statements are prepared for other types of ADI (like ADI 4, ADI 42, ADI 52 etc.). Some parameters are
not known and corresponding statements are missing. Examples of statements: V(adi,
application, rake):1.0, V(adi gsj-1400-1, minimal elongation A, 1):1.0, V(adi gsj-1400-1, tensile strength Rm, 1400):1.0, V(engjs 14001, chemical composition c, 3.462-3.524):1.0.
The rest of formulas have form of an implication. Four of them allow to recommend a
material for production (see below). They have a conclusion V(casting, material alternative,
X). The more parameters are checked (and more premises the rule has), the more certain the
answer is. The first implication checks an application, costs, tensile strength and minimal
elongation and it has a certainty 1.0. Fourth rule checks only the application, therefore its
certainty is equal to 0.25 Other rules allow to predict the production costs assuming a particular
batch size and product weight. An example rule:
V(casting,application required,A) ∧ V(X, application,A) ∧ V(casting,cost required,
COST MAX) ∧ V(X,cost,COST CALCULATED) ∧ P(COST CALCULATED,COST MAX)
∧ V(casting,tensile strength Rm required,STRENGTH MIN) ∧ V(X, tensile strength Rm,C)
∧ P(STRENGTH MIN,C) ∧ V(casting,minimal elongation A required,ELONG MIN)
∧ V(X,minimal elongation A,E) ∧ P(ELONG MIN,E)] →V(casting,material alternative,X):1.0
Scenario 1 First scenario presents a short and easy to analyse proof. Only a casting’s application (rake), maximum allowed cost (15) and parameters requied for productional expenses
(production volume - large, weight - heavy) are specified for a diagnostic system. It sends back
a recommendation ‘adi‘ with confidence 0.5, which means that for given criteria all castings
from ADI group can be applied.
Next, the proof is sent to a Cost Calculator Agent. It is noted as a list with formulas and
applied knowledge transformations (opertions):
[ { ’ formulas ’
{ ’ formulas ’
{ ’ formulas ’
’ operation
{ ’ formulas ’

: [ ] , ’ o p e r a t i o n ’ : ’UNIFICATION { } ’ } ,
: [ ’ P ( 1 2 , 1 5 ) ’ ] , ’ o p e r a t i o n ’ : ’UNIFICATION { } ’ } ,
: [ ’V( c a s t i n g , v o l u m e p r o d u c t i o n , l a r g e ) : 1 . 0 ’ , ’P ( 1 2 , 1 5 ) ’ ] ,
’ : ’UNIFICATION { } ’ } ,
: [ ’V( c a s t i n g , weight , heavy ) : 1 . 0 ’ ,
’V( c a s t i n g , v o l u m e p r o d u c t i o n , l a r g e ) : 1 . 0 ’ , ’P ( 1 2 , 1 5 ) ’ ] ,
’ o p e r a t i o n ’ : ’UNIFICATION {COST CALCULATED=12} ’} ,
{ ’ f o r m u l a s ’ : [ ’N −> V( adi , c o s t ,COST CALCULATED) : 1 . 0 ’ ,
’N : 0 . 0 ’ , ’ P(COST CALCULATED, 1 5 ) ’ ] , ’ o p e r a t i o n ’ : ’MP’ } ,

7

903

904	

Grzegorz Legien et al. / Procedia Computer Science 108C (2017) 897–906
Agent-based Decision Support System for Technology Recommendation
G. Legień, B. Śnieżyński, et al.

Request
Sender

Reasoning
Agent

Cost
Calculator

Request
V(casting,application_required, rake)
V(castingcost_required, 15)
V(casting, volume_production, large)
V(casting, weight, heavy)

Proof
Recommendation:
ADI
Cost: 10

Inferencing

Cost
Estimating

Proof
Recommendation:
ADI

Figure 2: Cooperation between agents in scenario 1
...
{ ’ formulas ’
’ I : 0.0 ’]
{ ’ formulas ’
’ operation

: [ ’ I −> V( c a s t i n g , m a t e r i a l a l t e r n a t i v e ,VALUE) : 0 . 5 ’ ,
’ o p e r a t i o n ’ : ’MP’ } ,
: [ ’V( c a s t i n g , m a t e r i a l a l t e r n a t i v e ,VALUE) : 0 . 5 ’ ] ,
’ : ’HYPOTHESIS’ } ]

,

Sequence diagram showing cooperation between agents in this scenario is presented in Fig. 2.
Cost Calculator Agent computes cost of a given proof. It contains mostly unifications (costless
in used policy) and two modus ponens transformations (each of them costs 5 units). Final cost
- 10 - is returned to the Request Sender Agent.
Scenario 2 In this scenario user gives following answers for questions of the recommendation
system: application is rake, production volume is large, weight is heavy and minimum tensile
strength Rm is 1100.
Reasoning engine recommends a casting ‘adi gjs-1400-1‘ with certainty 0.75. Cost Calculator
Agent estimates its cost as 14, due to two MP transformations (2 * 5) and two SIMo rules (2
* 2) applied. Other operations have no cost. Proof tree for this scenario is presented in Fig. 3
Summary Domain experts reviewed results of presented scenarios. Achieved answers and
their certainties were evaluated as a correct.
Distribution of expert system does not affect it usability and a final user’s experience in
comparison with a centralized system (e.g. centralized LIIS presented in [4]). Complete results
including both a proof and its cost estimation were obtained.

5

Conclusions and Further Works

The described system illustrates an application of the agent-based architecture in an expert
system. Agents provide a processing of the knowledge based on a labeled deductive system.
8

	

Grzegorz Legien et al. / Procedia Computer Science 108C (2017) 897–906
Agent-based Decision Support System for Technology Recommendation
G. Legień, B. Śnieżyński, et al.

V(casting, material_alternative, adi):0.5
MP (Cost: 5)
[V(casting, application_required, A):1.0,
V(X, application, A):1.0,
V(casting, cost_required, COST_MAX):1.0,
V(X, cost, COST_CALCULATED):1.0,
P(COST_CALCULATED, COST_MAX)]
→ V(casting, material_alternative, X):0.5

P(12, 15)

V(adi, cost, 12):1.0
MP (Cost: 5)

V(casting, application_required, rake):1.0

V(casting, weight, heavy):1.0
[V(casting, weight, heavy):1.0,
V(casting, volume_production, large):1.0]
→ V(casting, cost, 12):1.0

V(adi, application, rake):1.0
V(casting,cost_required,15):1.0

V(casting, volume_production, large):1.0

V(casting, material_alternative, engjs_14001):0.75
MP (Cost: 5)

[V(casting, application_required, A):1.0,
V(X, application, A):1.0,
V(casting, cost_required, COST_MAX):1.0,
V(X, cost, COST_CALCULATED):1.0,
P(COST_CALCULATED, COST_MAX),
V(casting,strength_tensile_Rm_required,
STRENGTH_MIN):1.0, V(X,rm,C):1.0,
P(STRENGTH_MIN,C)]
→ V(casting, material_alternative, X):0.75

P(1100, 1417.8-inf)
V(casting,strength_tensile_Rm_required,1100):1.0

V(engjs_14001, rm, 1417.8-inf):1.0

V(casting, application_required, rake):1.0
P(12, 15)

V(engjs_14001, application, rake):1.0
SIMo (Cost: 2)
S(adi, engjs_14001, application):1.0
V(adi, application, rake):1.0

V(engjs_14001, cost, 12):1.0
SIMo (Cost: 2)

V(casting,cost_required,15):1.0
S(engjs_14001,adi,cost):1.0

V(adi, cost, 12):1.0
MP (Cost: 5)
V(casting, weight, heavy):1.0

V(casting, volume_production, large):1.0

[V(casting, weight, heavy):1.0,
V(casting, volume_production, large):1.0]
→ V(casting, cost, 12):1.0

Figure 3: Proof tree for Scenario 1 (top) and Scenario 2 (bottom)

They send a reasoning request, preform inference, calculate a proof cost and display process
results, cooperating in a distributed environment. The system functionality is not changed in
comparison with the earlier, centralized implementation. However, the agent paradigm used has
many advantages. It increases the system flexibility and allows to introduce additional modules
easily. Load balancing and a failover can be achieved by multiple instantions of identical agents.
Reasoning agent can be created in several variants to provide different inference algorithms. Also
the knowledge processing chain can be easily extended by adding new knowledge processing
agents, e.g. proof rating agent, which may select an optimal proof from a proof group found
by the agents. What is more, a knowledge base can be distributed. With such a feature the
system can work as a platform for integration of heterogeneous knowledge sources. Current
experiments have a form of a proof of concept. Therefore in the future more experiments have
to be done to compare the results with other systems.
Acknowledgments The research reported in the paper was supported by the grant of The National Centre
for Research and Development (LIDER/028/593/L-4/12/NCBR /2013).
9

905

906	

Agent-based Decision SupportGrzegorz
System Legien
for Technology
Recommendation
Legień,
B. Śnieżyński, et al.
et al. / Procedia
Computer Science 108CG.
(2017)
897–906

References
[1] Ricci, A., Santi, A. (2012). Agent-oriented computing: Agents as a paradigm for computer programming and software development. International Journal on Advances in Software, 5:36-52.
[2] Michalski, R.S., Collins, A. (1989). The logic of plausible reasoning: A core theory. Cognitive
Science, 13:1-49.
[3] Sniezynski B., Legien G., Wilk-Koodziejczyk D., Kluska-Nawarecka S., Nawarecki E., Jaskowiec K.,
Creative Expert System: Result of Inference and Machine Learning Integration, DEXA 2016: 27th
International Conference on Database and Expert Systems Applications, Porto, Portugalia.
[4] Legien G., Sniezynski B., Wilk-Koodziejczyk D., Kluska-Nawarecka S., Nawarecki E., Jaskowiec
K., Expert System with Web Interface Based on Logic of Plausible Reasoning, DEXA 2015: 26th
International Conference, 2015, Valencia, Hiszpania.
[5] Fazel Zarandi M.H, Ahmadpour P. (2009). Fuzzy agent-based expert system for steel making process, Expert Systems with Applications, 36:9539–9547.
[6] Sueyoshi T., Tadiparthi G.R. (2009) An agent-based decision support system for wholesale electricity market, Decision Support Systems, 25:225–237.
[7] Sokolova M.V, Fernandez-Caballero A. (2009). Modeling and implementing an agent-based environmental health impact decision support system, Expert Systems with Applications, 36:2603–2614.
[8] Wagner N., Agrawal V. (2014). An agent-based simulation system for concert venue crowd evacuation modeling in the presence of a fire disaster, Expert Systems with Applications, 41:2807–2815.
[9] Fazel Zarandi M.H., Tarimoradi M., Shirazi M.A., Turksan I.B. (2015). Fuzzy intelligent agent-based
expert system to keep Information Systems aligned with the strategy plans: A novel approach
toward SISP, Proc. of the 5th World Conference on Soft Computing (WConSC), 2015 Annual
Conference of the North American.
[10] Ho Chung L. Ah Hwee T. Hoon Heng T. Boon Toh, L. Connectionist expert system with adaptive
learning capability. Knowledge and Data Engineering IEEE Trans. on, vol. 3(2) pp. 200-207, 1991.
[11] Esterline A. C. Wiriyacoonkasem, S. Adaptive learning expert systems In Southeastcon 2000. Proceedings of the IEEE, pp. 445-448. IEEE, 2000.
[12] Hancock, J.P., Tran, L.P. (1989). An adaptive-learning expert system for maintenance diagnostics,
Proc. of Aerospace and Electronics Conference, NAECON 1989, pp. 1034-1039 vol.3, 1989.
[13] Bach, K., Deutsch, J.O., Hanft, A., Manz, J., Muller, T., Newo, R., Reichle, M., Schaaf, M.,
Weis, K.H., Althoff, K.D. (2007). Collaborative multi-expert-systems, Proceedings of International
Conference on Artificial Intelligence
[14] Michalski, R.S. (1994). Inferential theory of learning: Developing foundations for multistrategy
learning, i n R. S. Michalski, (Ed), Machine Learning: A Multistrategy Approach, Volume IV.
Morgan Kaufmann Publishers.
[15] Michalski, R.S., Alkharouf, N.W. (1996). Multistrategy task-adaptive learning using dynamically
interlaced hierarchies, i n Wnek J. Michalski, R. S., (Eds), Proceedings of the Third International
Workshop on Multistrategy Learning.
[16] Larson, J., Michalski, R.S. (1975) Aqval/1 (aq7) users guide and program description, Technical
Report 731, Department of Computer Science, University of Illinois, Urbana, June 1975.
[17] Quinlan, J.R. (1993). C4.5: Programs for Machine Learning. Morgan Kaufmann.
[18] Sniezynski, B. (2014). Integration of inference and machine learning as a tool for creative reasoning,
i n G. Stojanov, et al. (Eds), Modeling Changing Perspectives - Reconceptualizing Sensorimotor
Experiences, volume FS-14-05, Papers from the AAAI Fall Symposium 2014, Virginia
[19] Sniezynski, B. (2005). Recommendation System Using Multistrategy Inference and Learning, in
Szczepaniak, P.S., Kacprzyk J., Niewiadomski A., (Eds.), Advances in Web Intelligence, volume
3528, pp. 421-426

10

