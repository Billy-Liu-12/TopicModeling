Grid Information Service Based on Network Hops*
Xia Xie, Hai Jin, Jin Huang, and Qin Zhang
Cluster and Grid Computing Lab
Huazhong University of Science and Technology, Wuhan, 430074, China
hjin@hust.edu.cn

Abstract. Grid information service influences outcome of applications on grid
platforms directly. In this paper, network coordinate is introduced in grid information service mechanism to locate each grid node. With the hop count generation algorithm, network hops between user and resource providers can be
forecasted, and results can be submitted to grid information service, which offers a list of resource providers with network hops increasing so that scheduler
can work more efficiently. Performance proves that it is suitable for timesensitive applications or applications with special restriction of network hops.

1 Introduction
Grid system can offer several key services and one of them is Grid Information Service (GIS) [4]. Relational Grid Monitoring Architecture (R-GMA) offers a global
view of the information [1]. Globus Toolkit’s Monitoring and Discovery System
(MDS) defines and implements mechanisms for service and resource discovery and
monitoring in distributed environments. The latest version MDS4 [6] is defined in the
new WS-Resource Framework and WS-Notification specifications.
In this paper, GIS based on network hops is proposed. By using the network hops,
the network distance between the user and resource providers can be calculate. A list
of candidate resource providers with hop count in increasing order can be returned
automatically. User can choose the resource provider with minimum network hops.

2 Design Principle
We predict the hop count between two nodes according to their network coordinates.
Some notations are defined as follows. Lij stands for actual hop counts between node i
and node j. Xi is the network coordinates of node i. E is the system squared-error. L is
an aggregate of nodes and the sum of nodes is Listlength(L). d is a constant defined
according to user’s requirement.

E = ∑∑ ( Lij − xi − x j )
i

*

2

(1)

j

This paper is supported by National Science Foundation of China under grant 60125208 and
90412010, ChinaGrid project of Ministry of Education of China.

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 1051 – 1054, 2006.
© Springer-Verlag Berlin Heidelberg 2006

1052

X. Xie et al.

xi − x j is the distance of network coordinates from node i to j in appointed coordinate space. Hop count algorithm calculates the unit-length vector from node i to j by
minimizing Eq.1. In order to reduce the network traffic, we change the policy that
each node running hop count algorithm only communicates with part of the other
nodes. These parts of the other nodes make up of an aggregate L and the nodes in L
must not less than d+1.
Hop count algorithm generates a unit-length vector in randomly chosen direction
and detaches two nodes at a same location so that network coordinate of each node
can be quickly convergent. The node running the hop counts algorithm keeps on updating network coordinates periodically. If the network topology changes, node will
update automatically. With the network coordinates of node i and j, the third information service node can forecast the network hops between these two nodes though node
i does not communicate or measure the actual hop count with node j.
For hierarchical information service, node can get its network coordinates by running the network hop count algorithm. New user node or new resource provider node
gets the IP address, network coordinates and estimated error of other nodes through
the information providers and composes of its own L. For information service in the
P2P style, each node runs the hop count algorithm to get its own network coordinates.
New node gets the IP address, network coordinates and estimated error of other nodes
through an arbitrary node to make up of L.
Index service is embedded with an optimizer of network hop count. Function of the
optimizer is to calculate the hop count between user and candidate resource provider
through their network coordinates and sort the hop count in increasing order. Index
service returns a list of candidate resource providers to users but not ensures the
availability of each resource provider. Index service also does not include policy information and resource provider need not to publish its own policy. For user who does
not select the attached service, user can negotiate with each result item one by one.
Only after authenticated can the resource provider deal with the submitted task.

3 Experiments and Analysis
Two performance metrics are used here: average response time and throughput of
information discovery. Average response time of information discovery is the time
from information discovery requirement being sent out to the time the results return.
It is an average value for multiple simulations. We call the general information service without optimizer “random information service”.
We use a grid simulation, JFreeSim [2]. JFreeSim is a grid simulation tool based
on multiple tasks, multiple schedulers and multiple resources model. As a modular
and extensible simulation tool, JFreeSim realizes many entity modeling and communication mechanisms between all entities, and makes system simulation according
with the characteristics of the grid environment.
We use the Inet [3] topology generator to create 8,000-node wide-area AS-level
network with a variable number of 500 client nodes with 4 client nodes per stub.
ModelNet [5] is used to emulate wide-area bandwidth and latencies. Transit-transit
and transit-stub links are 155 Mb/s and client-stub links are 2 Mb/s. Latencies are
based on the Inet topology. The 500 client nodes are simulated by 11 PCs running

Grid Information Service Based on Network Hops

1053

JFreeSim. Hop count algorithm is implemented in each information entity, grid user
entity or resource entity generated by JFreeSim. Each PC has 1.6 GHz Pentium IV
processor and 512 MB RAM with Redhat 9.0 operating system. All PCs are connected using Gigabit Ethernet. One of 11 PCs simulates information service and information service uses MDS4. The number of resource providers is 50, 100, 200, and
400, respectively. Other 10 PCs are used to simulate resource providers and users.
The number of simulated grid user is 80, 160, 240, 320, 400, and 480, respectively.
Fig. 1 describes the average response time of information discovery for random information service and GIS based on network hops. For the later, it is also divided into
two types: one is resource discovery with the range of hops, which is less than 10 and
submitted by users; another is resource discovery without giving the range of network

Fig. 1. Average response time for information discovery

Fig. 2. Throughput for information discovery

1054

X. Xie et al.

hops. Comparing these figures, we can draw conclusions as follows: 1) GIS based on
network hops has longer average response time; 2) information discovery with
the range of hops has longer average response time than information discovery without giving the range of network hops; 3) more information provided by resource providers, more average response time.
Fig. 2 describe throughput of information discovery. We find: 1) throughput of information discovery in GIS based on network hops is smaller than random information service; 2) more resource providers, less throughput; 3) information discovery
with the range of hops has smaller throughput than information discovery without
giving the range of network hops.

4 Conclusions
In order to improve performance of the grid information service in time-sensitive
application, we propose a grid information service based on network hops. Using
network coordinate, the network hops between user and candidate resource provider
can be predicted, and a list of network hops in increasing order can be returned. User
can use the resource provider with minimum network hops. The grid resource sharing
and cooperation can be more efficiently.

References
1. A. W. Cooke, A. J. G. Gray, L. Ma, W. Nutt, J. Magowan, M. Oevers, P. Taylor, R. Byrom,
L. Field, S. Hicks, J. Leake, M. Soni, A. J. Wilson, R. Cordenonsi, L. Cornwall, A. Djaoui,
S. Fisher, N. Podhorszki, B. A. Coghlan, S. Kenny, and D. O'Callaghan, “R-GMA: An Information Integration System for Grid Monitoring”, Proceeding of the 10th International
Conference on Cooperative Information System, 2003.
2. H. Jin, J. Huang, X. Xie, and Q. Zhang, “JFreeSim: A Grid Simulation Tool Based on
MTMSMR Model”, Proceedings of 6th International Workshop on Advanced Parallel
Processing Technologies, Hong Kong, China, 2005.
3. H. Chang, R. Govindan, S. Jamin, S. Shenker, and W. Willinger, “Towards Capturing Representative AS-level Internet Topologies”, Int. J. Comp. and Tele. Net. 44 (2004), pp.737755.
4. H. N. L. C. Keung, J. R. D. Dyson, S. A. Jarvis and G. R. Nudd, “Performance Evaluation
of a Grid Resource Monitoring and Discovery Service”, IEE Proceeding on Software, 150,
2003, pp.243–251.
5. K. Yocum, K. Walsh, A. Vahdat, P. Mahadevan, D. Kostic, J. Chase, D. Becker, “Scalability and Accuracy in A Large-Scale Network Emulator”, Proceeding of the Fifth Symposium
on Operating Systems Design and Implementation, 2002, pp.271-284.
6. J. M. Schopf, M. D'Arcy, N. Miller, L. Pearlman, I. Foster, and C. Kesselman, “Monitoring
and Discovery in A Web Services Framework: Functionality and Performance of the
Globus Toolkit’s MDS4”, Technical report, printed by ANL/MCS, 2004, pp.1248-1260.

