Procedia Computer Science
Volume 80, 2016, Pages 2158–2168
ICCS 2016. The International Conference on Computational
Science

GPU Optimization for Data Analysis of Mario Schenberg
Spherical Detector
Eduardo C. Vasconcellos1 , Esteban W. G. Clua1 , Reinaldo R. Rosa2 , Jo˜ao G. F.
M. Gazolla1 , Nuno C´esar da R. Ferreira2 , Victor Carlquist3 , and Carlos F. Da
Silva Costa4
1

2

Fluminense Federal University, Niteroi, Rio de Janeiro, Brazil
evasconcellos@id.uff.br
esteban@ic.uff.br
gazolla@ic.uff.br
National Institute for Space Research, S˜
ao Jos´e dos Campos, S˜
ao Paulo, Brazil
reinaldo@lac.inpe.br
nuno@dpi.inpe.br
3
IFSP, Campos do Jord˜
ao, SP, Brazil
victorcarlquist@gmail.com
4
University of Florida, Gainesville, Fl, USA
filipe.dasilva@ufl.edu

Abstract
The Gravitational Wave (GW) detectors, advanced LIGO and advanced Virgo, are acquiring
the potential for recording unprecedented astronomic data for astrophysical events. The Mario
Schenberg detector (MSD) is a smaller scale experiment that could participate to this search.
Previously, we developed a ﬁrst data analysis pipeline (DAP) to transform the detector’s signal
into relevant GW information. This pipeline was extremely simpliﬁed in order to be executed
in low-latency. In order to improve the analysis methods while keeping a low execution time,
we propose three diﬀerent parallel approaches using GPU/CUDA. We implemented the parallel
models using cuBLAS library functions and enhance its capability with asynchronous processes
in CUDA streams. Our novel model achieves performances that surpass the serial implementation within the data analysis pipeline by a speed up of 21% faster than the traditional model.
This ﬁrst result is part of a more comprehensive approach, in which all DAP modules that can
be parallelized, are being re-written in GPGP/CUDA, and then tested and validated within
the MSD context.
Keywords: GPU computing, many matrix operations, gravitational waves, astrophysical events, astrophysical data analysis

2158

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.375

GPU Optimization for Data Analysis of Mario Schenberg . . .

1

Vasconcellos et al.

Introduction

Gravitational Wave (GW) astronomy along with conventional Electro-Magnetic (EM) astronomy will bring in the near future unprecedented information about astrophysical events and
fundamental processes. Unlike EM signals, GWs can give information on the innermost structure of stars and on the core of massive objects, like neutron stars [5], but evidently, GW
astronomy could only start after the ﬁrst detection.
Recently, in October 2015, the two GW detectors - “advanced LIGO” [14] in Louisiana
and another in Washington, USA - started acquiring data. This is an exciting era for the GW
research as the LIGO detectors have and will continue to substantially increase their probability
detection factors [2]. The GW detector “advance Virgo” [1] will join the detector network in
2016.
One of the possible solution to corroborated a GW detection is to search for electromagnetic
(EM) counterparts like EM transient from X to γ ray. A neutrinos ν counter part could also be
used. The expected relative arrival time of EM emissions to the GW peak [11, 13, 16, 15] stands
from a few seconds to weeks. In order to use the EM counterpart, GW detectors need to be
all-sky sensitive and to point out the direction of an incoming GW, with further transmission
of this information to EM observatories in a short timespan.
The Mario Schenberg detector is a smaller scale experiment compared to the two previous
detectors which are 4km long interferometers. It has a strain sensitive and a narrow band
which are not competitive with them. Nevertheless it can still contribute to GW astronomy.
Its detection principle uses a spherical resonant mass (all-sky sensitive) with a high mechanical
quality factor Q ∼ 107 . The sphere’s mass and diameter are 1150 kg and 65 cm respectively,
which leads to a resonant frequency f0 ∼ 3.2 kHz. Gravitational waves couple to the sphere’s
ﬁve quadrupolar modes [17, 6]. The sphere’s mechanical oscillations are then converted into
electromagnetic signals by six resonant transducers with klystron type cavities [12, 4, 3]. This
multichannel feature allows a direct GW direction determination. Finally, the signal is demodulated, ampliﬁed and digitized for subsequent analysis. A data acquisition system was developed
to execute these steps in real time with a perfect timestamp [10].
In order to confront Mario Schenberg’s results with possible EM counterparts, a ﬁrst low
latency pipeline was developed [9]. Data are divided in temporal series of determined length. For
each data set, the main pipeline steps are the followings: (a) A time-frequency transformation of
the six channels is applied; (b) The voltage is then converted in quadropolar mode amplitudes
HM which have the amplitudes of strain; (c) A pass band ﬁlter is applied and the SNR is
computed; (d) In case that it passes a nominal value, the GW direction and polarisation is
retrieved from these data. This pipeline was optimized for ”linear computation” and was
simpliﬁed to maintain a low latency.
In order to maintain a low cost computation and increase the amount of processed data,
in this paper we propose a novel parallel strategy based on GPGPU architecture to accelerate
the conversion signal stage in the [9] pipeline. We ﬁrst introduce the conversion signal algorithm used in [9]. Then we present our experimental environment and our ﬁrst approach to
parallelize the conversion signal task using a GPGPU-CUDA within the context of heterogeneous computation. Next we present two more models of parallelization using multiple CUDA
streams. Finally, we discuss the performance of our three diﬀerent strategies pointing out possible optimizations and provide an overview of the next step which will allow to further increase
performance.
2159

GPU Optimization for Data Analysis of Mario Schenberg . . .

2

Vasconcellos et al.

Signal Conversion

The serial approach of [9] Mario Schenberg’s data analysis pipeline comprise the following steps
for each sequence of data: First, temporal series of measured voltage V (t) are transformed in
the frequency domain Vf f t by a Fourier transformation using the FFTW3 library, then voltage
spectra Vf f t are converted into GW amplitude HM by matrix operations. Each sequence is
composed of 6 channels with N data, therefore Vt is a 6 × N matrix and Vf f t and are complex
6 × (1 + N/2) matrices. The number of quadrupolar modes amplitudes of the sphere are 5,
thus HM is 5 × (1 + N/2). The missing information is a monopolar mode not used for this
research. The last conversion Vf f t into HM is computationally demanding. The matrices Vf f t
are multiplied by a constant: 5 × 6 matrix B, and then each column of the resultant matrix
is multiplied by an 5 × 5 matrix T . As Vf f t has (1 + N/2) columns, we will have (1 + N/2)
products of the following equation
Ti ∗ (B ∗ Vf f t )i ,

(1)

where (B ∗ Vf f t )i is the ith column of resultant matrix (B ∗ Vf f t ) and Ti the ith matrix T .
The serial approach is presented in Algorithm 1, and its average performance for complete all
matrix operations for diﬀerent input sizes are showed in Table 2.
Algorithm 1 ConversionSignal
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:

Allocate an array V[6][N]
Read voltage data from ﬁle and store it in V
Nf f t ← (N/2) + 1
Allocate an array Vf f t [6][Nf f t ]
Performs time to frequency conversion on voltage data using FFTW3 (Fast Fourier transform) and store it
in Vﬀt[6][Nf f t ]
Allocate an array B[5][6]
Calculate elements of B
Allocate an array T[Nf f t ][5][5]
for k ← 1, (Nf f t − 1) do
Read the kth matrix T from ﬁle and store it in T[k]
Allocate an array Vaux[5]
Allocate an array HM[5][Nf f t ]
for r ← 0, 4 do
HM[r][0] ← 0.0 + i0.0
for k ← 1, (Nf f t − 1) do
for r ← 0, 4 do
Vaux[r] := 0.0 + i0.0
for c ← 0, 5 do
Vaux[r] := Vaux[r] + B[r][c] * Vﬀt[c][k] / constant
factor ← constant * k * k
HM[:][k] ← factor * T[k] * Vaux
(T[k] * Vaux) is a matrix product
Write HM array in output ﬁle

3

Experimental Environment

The serial approach of [9], which is our basis, uses the IEEE double arithmetic and, to stay
compatible with its original implementation and the expected output, we keep double precision
in our study. The experiments was conduced on an machine running Ubuntu 14.04.3 LTS
and powered by an Intel i7-4790, 24 GB of RAM, and a GPU NVIDIA TITAN X which has
2160

GPU Optimization for Data Analysis of Mario Schenberg . . .

Vasconcellos et al.

3072 cores, 12 GB of RAM, max memory bandwidth 336.5 (GB/sec), and peak single precision
ﬂoating point performance (GFLOP) 6.6 TFlops and maximum output of 250W
The C++ codes was compiled with g++ version 4.8.4 and CUDA source codes with nvcc,
CUDA version 7.5.
We use the cuBLAS library which is an implementation of BLAS (Basic Linear Algebra
Subprograms) on top of CUDA runtime. It has an expressive collection of functions and data
structures that allows a C/C++ program to use the NVIDIA GPU computational resources to
solve linear algebra problems without requiring CUDA kernel manual implementation.

4

A GPU Signal Conversion Approach

Our ﬁrst approach was to use cuBLAS library functions to, individually, parallelize each matrix
operation in serial code. We use ﬁrst a CUDA kernel to generate the matrices B inside the
GPU, avoiding time loss with their transfer from the CPU to the GPU memory. After that, we
call cuBLAS function cublasZgemm to performs Equation 2
Vaux = B ∗

1
∗ Vf f t
constant

.

(2)

Once we obtain Vaux , we call another cuBLAS function, named cublasZgemv, to perform each
one of the Nf f t products (see Algorithm 1)
hmf f t [i] = Ti ∗

constant ∗ i2 ∗ Vaux [i] ,

(3)

where the braked [i] means the ith column of the matrix, and Ti is the ith T matrix (Algorithm
2).
Algorithm 2 Naive
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:

Allocate memory on CPU
Allocate memory on GPU
Read data from hard drive
Nf f t ← (N/2) + 1
Perform time to frequency conversion on voltage data using FFTW3
Copy all necessary data from CPU memory to GPU memory
Call kernelCalcB to calculate B
Call cublasZgemm to calculate Vaux
Set all elements of the ﬁrst column HM [0] as 0.0 + i0.0
for k ← 1, (Nf f t − 1) do
Call cublasZgemv to calculate HM [k]
Copy HM from GPU memory to CPU memory
Write HM array in output ﬁle

N depends of input data

Algorithm 2 is a naive approach and does not has any optimization. Table 1 shows the
average time taken for the main CUDA activities in our code. This approach has two bottleneck:
memory copy and low GPU occupancy rate. The memory copy from and to GPU is a problem
because they block the GPU for computing data, since it keeps waiting for all data to arrive
before starting the computational process. On the other hand, the large number Nf f t of small
matrices operations necessary to calculate HM are solved in GPU one by one, which causes a
low GPU occupancy.
2161

GPU Optimization for Data Analysis of Mario Schenberg . . .
Input length
per channel
65, 536
131, 072
524, 288
1, 048, 576

CUDA memcpy
HtoD
10.64ms
21.44ms
85.94ms
169.62ms

CUDA memcpy
DtoH
1.57ms
3.15ms
12.51ms
25.03ms

Vasconcellos et al.

kernelCalcB

cublasZgemm

cublasZgemv

0.06ms
0.06ms
0.06ms
0.06ms

0.19ms
0.37ms
1.38ms
2.26ms

134.68ms
251.33ms
969.03ms
1, 920.46ms

Table 1: Time spent in diﬀerent stages of our naive CUDA implementation. The terms memcpy
HtoD and memcpy DtoH means, respectively, the memory copy process form CPU to GPU and
from GPU to CPU. All times are given in milliseconds (ms).

4.1

Optimizing Data Transfer with Streams

In order to address the two bottlenecks and thus to achieve better performance, we enhance the
GPU occupancy by splitting the job between diﬀerent CUDA streams. This approach allows
to overlap data transfer and computation, using a concurrency strategy.
Our stream implementation splits the matrix Vf f t into Ns sub-matrices with width (Nf f t −
1)/Ns, where Ns is the number of CUDA streams set. Each sub-matrices will be copied from the
CPU memory and processed by a single stream. In the end each stream will copy its piece of ﬁnal
result back to the CPU memory, also in a concurrent way. Following this approach, we develop
two stream models, one using the same cuBLAS functions as our naive implementation (cuBLAS
model) and another using a combination of cublasZgemm and a kernel that we developed to
process the matrix-vector products presented in Equation 3 (kernel model).
The cuBLAS model is an implementation with CUDA streams of our naive algorithm. We
split Vf f t in sub-matrices and demands that each stream transforms its Vf f t sub-matrix into a
HM sub-matrix by following our naive algorithm. The pseudo code for this model is presented
in Algorithm 3 and the obtained performance in the next section.
Algorithm 3 CublasModel
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:

Allocate memory on CPU
Allocate memory on GPU
Read data from persistent drive
Nf f t ← (N/2) + 1
N depends of input data
Ns is the number of CUDA streams
Nc ← ( Nf f t - 1 ) / Ns
Performs time to frequency conversion on voltage data using FFTW3
Call kernelCalcB to calculate B
for s ← 0, (Ns-1) do
Set CUDA stream s as active
Copy from CPU memory to GPU memory a Vf f t sub-matrix [Vf f t ]s with Ns columns
1
Call cublasZgemm to calculate Vaux sub-matrix [Vaux ]s = B ∗ const.
∗ [Vf f t ]s
for k ←((s*Ns)+1), ((s+1)*Ns) do
Call cublasZgemv to calculate column HM [k]
see Equation 3
Copy HM sub-matrix [hmf f t ]s from GPU memory to CPU memory

15: Set all elements of the ﬁrst column HM [0] as 0.0 + i0.0
16: Write HM array at an output ﬁle

We also propose another algorithm approach using CUDA streams, were we split the job
between CUDA streams in our cublas model and try to avoid the problem of doing small
operations (lines 12 and 13 in Algorithm 3). We propose a CUDA kernel that will process not
only one, but a set of Vaux columns at the same time. The algorithm calculates how many
columns of Vf f t will be processed by each stream. Then the set of columns given to a stream
2162

GPU Optimization for Data Analysis of Mario Schenberg . . .

Vasconcellos et al.

will be split between n blocks of 256 threads. The number of blocks that we must create will
be given by the equation
Nf f t − 1
,
(4)
N umOf Blocks =
Ns ∗ 256
where, like before, Ns are the number of CUDA streams allocated to process the task. In this
model, each thread within a block will process a product of the type of Equation 3 and calculate
a column of HM . The algorithm for this model are similar to Algorithm 3, where the only
diﬀerence is that the iteration of lines 12 and 13 is replaced by a single call of the CUDA kernel
(Algorithm 4).
Algorithm 4 CUDA kernel
1: numColsToProcess := (Nf f t - 1)/Ns
2: startVauxCol := 1 + (s * numColsToProcess);
3: i := startVauxCol + ( ( blockIdx.x * 256 ) + threadIdx.x )
the block and thread identiﬁers
4: hmf f t [i] = Ti ∗ constant ∗ i2 ∗ Vaux [i]

4.2

Ns is the number of CUDA streams
s is the stream identiﬁer
blockIdx.x and threadIdx.x are, respectively,

Experiments and Results

We ran four diﬀerent experiments, each one with a diﬀerent size input data. The spherical
detector Mario Schenberg is simulated in these tests using a full detector model [7, 8]. This
simulated data consists of six time series of voltage values, each one coming from a diﬀerent
channel.
Each strategy that we apply to parallelize the serial code has a diﬀerent behavior in its
execution. Figures 1, 2 and 3 show the time line for CUDA operations in each one of our
solutions when processing an input with size 524, 288 voltage values per channel. The cuBLAS
kernels in our naive implementation reach a parallelization in the level of block of threads.
Although memory copy seems to be relevant, kernel gemv2N (Figure 1) dominates the processing
time. For the experiment in Figure 1, gemv2N is called sequentially 262, 144 times; each call
generates an individual grid with blocks of 128 threads. The GeForce TitanX has 3072 CUDA
cores divided in 24 multiprocessors (SM) that can host up to 2048 threads each. This numbers
indicates how low is our GPU occupancy running our naive implementation. We take an average
time of 0.0036ms to run a single kernel, but during this time we use only 6.25% of a single SM.

Figure 1: CUDA Visual Proﬁler timeline for naive implementation. Diﬀerent colors distinguish
diﬀerent kernels and memory copy operations (HtoD or DtoH).
Figures 2 and 3 show the concurrent strategies. Both ﬁgures shows an execution using 4
CUDA streams. In the cuBLAS model the same algorithm of our naive implementation is
used by each stream. With this modiﬁcation we achieve a second level of parallelization and
2163

GPU Optimization for Data Analysis of Mario Schenberg . . .

Vasconcellos et al.

launch concurrent CUDA operations (memory copy/computation and computation/computation). The resultant time was 0.0036ms and the block of threads conﬁguration remained with
128 threads, but now we launch 4 kernels at same time and reduce the number of kernel calls
to 65, 536 calls per CUDA stream.

Figure 2: CUDA Visual Proﬁler timeline for cublas model. Diﬀerent colors distinguish diﬀerent
kernels and memory copy operations (HtoD or DtoH).

Finally, Figure 3 shows our more eﬃcient solution, called as the kernel model. With this
implementation we elevate to 1.22ms the time taken by a single kernel call, almost 340 times
slower then gemv2N. However, diﬀerent than our prevoius algorithms, in kernel model the CUDA
kernel is called only 4 times to process all the 262, 144 necessary matrix-column products (see
Equation 3). In comparison with our other implementations, the time spent in the matrices
operations are so small that, as Figure 3 shows, the time taken by memory copy operations are
now more relevant than the one of all CUDA kernels.

Figure 3: CUDA Visual Proﬁler timeline for kernel model. Diﬀerent colors distinguish diﬀerent
kernels and memory copy operations (HtoD or DtoH).
The time spent by our codes per number of CUDA streams and per size of input data are
presented in Figure 4. We can see that the combination of CUDA streams with cublasZgemv
function, as we did in cuBLAS model, do not work well. cuBLAS model takes more time to
transform Vf f t into HM than our naive implementation, and the performance degrade as we
launch more CUDA streams. By comparing the proﬁles of both codes we found that the API
2164

GPU Optimization for Data Analysis of Mario Schenberg . . .

Vasconcellos et al.

Figure 4: This curves shows the time spent by our codes for diﬀerent input sizes and number
of CUDA streams. The naive code does not depend on number of CUDA streams.

calls are responsible for this performance degradation. The cudaLaunch call, for example, takes
∼5% more time in cuBLAS model than in naive code. Another expressive diﬀerence lays in
the memory copy operation from CPU to GPU that takes ∼2% more time in cuBLAS model.
Figure 2 shows that the interval where CUDA operations are actually concurrent are small, and
no suﬃce to surpass the superior amount of time demanded by it API calls when compared to
naive code.
Figure 4 shows clearly that the kernel model has the best performance between our codes
for all sizes of input data and number of tested CUDA streams. In order to compare the
performance of kernel model with the serial approach, we must choose a number of CUDA
streams that achieve best performance. According to Figure 5 curves we have a performance
gain with two to eight CUDA streams, and start loosing with eight to thirty two, which is
the maximum number of streams. This eﬀect is presumably due to the fact that above eight
streams the higher number of threads demands that GPU scheduler queue part of then. The
comparison between the performance of kernel model running with eight CUDA streams and
the one of serial model are presented in Table 2. We can see that kernel code accelerate matrix
2165

GPU Optimization for Data Analysis of Mario Schenberg . . .

Vasconcellos et al.

Figure 5: Performance of kernel model per number of CUDA streams for the four diﬀerent
input sizes tested. For a better visualization, the time axis has been normalized. The variation
between the small time value and the largest in all experiments are given by the interval
[12.05, 208.3].
operations reducing time taken in ∼ 21% compared to serial code.
Input length
per channel
65, 536
131, 072
524, 288
1, 048, 576

Serial
code
16.2
30.9
124.7
253.7

Kernel
model
12.7
25.0
97.8
196.5

Table 2: Time taken to perform all matrix operations according the size of input data. All
times are given in milliseconds. Kernel model times are average times for executions with 8
CUDA streams.

5

Conclusions and Future Work

We evaluate three approaches using CUDA to optimize time consumption by parallelizing matrix operations in a serial pipeline to process GW data. We adopt linear algebra library cuBLAS
functions as a CUDA kernel developed speciﬁcally to process the high number of small matrix
operations required by the problem. We found that: (i) the bottle neck of serial code lies in the
Nf f t matrix-matrix products demanded to transform Vf f t into HM ; (ii) by individually using
cuBLAS function cublasZgemv to paralellize the process, each one of this Nf f t matrix-matrix
product performance is decreased when compared to serial code, due to memory copy and API
calls; (iii) split matrix operations in diﬀerent CUDA streams but keep using cublasZgemv leads
to no better result, once the concurrent region is small and the time spent with API call grows;
(iv) The simple CUDA kernel running in diﬀerent CUDA streams using GPU resources to solve
2166

GPU Optimization for Data Analysis of Mario Schenberg . . .

Vasconcellos et al.

in parallel a set of matrix products presents the best performance. The kernel solution reduce
time consumption in ∼ 21%. This results seems to mean that cuBLAS library do not work well
with a high number of small matrix operations.
Further experiments are required in order to increase the performance. We believe that
a diﬀerent data structure than the array that we use could optimize the performance within
cuBLAS model. A new kernel designed to have ∼ 100% occupancy rate per SM (stream
multiprocessor) could improve the performance of our kernel model. GW astronomy is a new
source of astrophysics information that will generate a lot of data in near future. Fast tools for
data analysis are demanded and we believe that GPUs can help achieve better performances
for such tools. Within this paradigm, we began studies and tests of parallel versions for the
Pipeline’s FFT module taking into account both CUDA and OpenCL for benchmark purposes.
In preliminary results experiments indicate that speedup can be at least 20% on the result
published here.

References
[1] J. Aasi, others, and (LIGO Scientiﬁc Collaboration and Virgo Collaboration). Prospects for localization of gravitational wave transients by the advanced ligo and advanced virgo observatories.
arXiv:1304.0670v1, 2013.
[2] J. Abadie et al. Predictions for the rates of compact binary coalescences observable by groundbased gravitational-wave detectors. Class. Quantum Grav., 27(17), 2010.
[3] O. D. Aguiar, L. A. Andrade, J. J. Barroso, et al. The brazilian gravitational wave detector Mario
Schenberg: status report. Class. Quantum Grav., 23:S239–S244, 2006.
[4] O D Aguiar et al. Status report of the Schenberg gravitational wave antenna. J. Phys.: Conf.
Ser., 363(1):012003, 2012.
[5] Nils Anderson and Kostas D Kokkotas. Gravitational wave astronomy: The high frequency window. Lect. Notes Phys., 653:255–276, 2004.
[6] C´esar A. Costa, Odylio D. Aguiar, and Nadja S. Magalh˜
aes. The Mario Schenberg gravitational
wave detector: A mathematical model for its quadrupolar oscilations. arXiv:gr-qc/0312035, 2003.
[7] C´esar Augusto Costa. Simula¸ca
˜o da resposta do detector Mario Schenberg a ondas gravitationais
oriundas de fontes astrof´ısicas. PhD thesis, INPE, SJC, Brazil, 2005.
[8] C´esar Augusto Costa and Odyilo D. Aguiar. Simulated response of the Mario Schenberg detector
to gravitational wave signals with noise. JPCS, 32:18–22, 2006.
[9] C. F. Da Silva Costa, C. A. Costa, and O. D. Aguiar. Low latency data analysis for the spherical
detector Mario Schenberg. Class. Quantum Grav., 31(8):085012, 2014.
[10] C. F. Da Silva Costa, C. Strauss, and C. A. Costa. Timestamp reliability of the Schenberg
Gravitational Wave detector data acquisition system. Submitted, 2014.
[11] Jonah Kanner, Tracy L. Huard, Szabolcs Marka, David C. Murphy, Jennifer Piscionere, Molly
Reed, and Peter Shawhan. Looc up: Locating and observing optical counterparts to gravitational
wave bursts. Class. Quantum Grav., 25(184034), 2008.
[12] G. L. Pimentel, O. D. Aguiar, J. J. Barroso, and M. E. Tobar. Investigation of ultra-high sensitivity
klystron cavity transducers for broadband resonant-mass gravitational wave detectors. J. Phys.:
Conf. Ser., 122, 2008.
[13] Jameson Graef Rollins. Multimessenger Astronomy with Low-Latency Searches for Transient Gravitational Waves. PhD thesis, Columbia University, 2011.
[14] J. R. Smith (for the LIGO Scientiﬁc Collaboration). The path to the enhanced and advanced ligo
gravitational-wave detectors. Class. Quantum Grav., 26(114013):8, 2009.

2167

GPU Optimization for Data Analysis of Mario Schenberg . . .

Vasconcellos et al.

[15] C W Stubbs. Linking optical and infrared observations with gravitational wave sources through
transient variability. Class. Quantum Grav., 25(184033), 2008.
[16] Julien Sylvestre. Prospects for the detection of electromagnetic counterparts to gravitational wave
events. Ap. J., 591(1152), 2003.
[17] Carl Z. Zhou and Peter F. Michelson. Spherical resonant-mass gravitational wave detectors. Phys.
Rev. D, 51:2517–2545, Mar 1995.

2168

