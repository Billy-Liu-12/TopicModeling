Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 1244–1251

Real-coded Estimation of Distribution Algorithm by Using
Probabilistic Models with Multiple Learning Rates
Masahiro Nakaoa , Tomoyuki Hiroyasub , Mitsunori Mikic , Hisatake Yokouchib , Masato Yoshimic
a Center

for Computational Sciences, University of Tsukuba, Ibaraki, Japan
of Life and Medical Sciences, Doshisha University, Kyoto, Japan
c Faculty of Science and Engineering, Doshisha University, Kyoto, Japan

b Department

Abstract
Here, a new Real-coded Estimation of Distribution Algorithm (EDA) is proposed. The proposed EDA is called
Real-coded EDA using Multiple Probabilistic Models (RMM). RMM includes multiple types of probabilistic models
with diﬀerent learning rates and diversities. The search capability of RMM was examined through several types of
continuous test function. The results indicated that the search capability of RMM is better than or equivalent to that
of existing Real-coded EDAs. Since better searching points are distributed for other probabilistic models positively,
RMM can discover the global optimum in the early stages of the search.
Keywords: estimation of distribution algorithm, optimization, continuous function

1. Introduction
Estimation of Distribution Algorithms (EDAs)[1, 2, 3] has been expected to solve optimization problems eﬃciently. The optimization problem is to ﬁnd design variables that give maximum or minimum value to ﬁtness function
under constraint condition. The optimization problems are generally described as follows.
minimize(maximize) f (x),

sub ject to x ∈ F

(1)

Several types of EDAs have been proposed as new evolutionary algorithms based on probabilistic models with
substantial mathematical background. Bit-string type EDAs were developed in early EDA studies[4, 5, 6]. Recently,
Real-coded EDAs the search points of which are expressed with real value vectors have been introduced[7, 8].
Continuous Population-Based Incremental Learning (PBILc)[9] is a simple Real-coded EDA. It was reported that
PBILc can search eﬀectively for ﬁnding good solutions to continuous test functions with high dimensions. PBILc
builds probabilistic models with estimation of the distribution that utilizes the current promising population, past
population, and learning rate.
To obtain better solutions, it is important for EDA to control diversity of the population similar to GA[10]. However, for EDA to keep the diversity of the population, it requires a great deal of time to obtain a good solution. This
is because the population converges early. On the other hand, when EDA loses the diversity of the population, the
population converges early into local optima. Thus, the diversity of the population is very important[11].
Email address: mnakao@ccs.tsukuba.ac.jp (Masahiro Nakao)

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.134

Masahiro Nakao et al. / Procedia Computer Science 4 (2011) 1244–1251

Figure 1: Sampling

1245

Figure 2: Estimation

Hierarchical Importance Sampling (HIS)[12] is an EDA that pays attention to diversity control of the population.
The main mechanism of HIS is to search using multiple populations with diﬀerent diversities. Although HIS has
been conﬁrmed to be eﬀective for distributed test functions, it is diﬃcult to obtain a good solution for continuous test
functions with some probabilistic models[13].
This paper proposes a novel method, Real-coded EDA using Multiple Probabilistic Models (RMM), which utilizes
probabilistic models with multiple learning rates. RMM refers to PBILc to build a probabilistic model and HIS to
exchange information in populations with diﬀerent diversities. After describing the algorithm of RMM, the performances of RMM are compared with those of existing EDAs, and we investigate the utility of probabilistic models
with multiple learning rates.
2. Hierarchical Importance Sampling
In general EDA, only one population and one probabilistic model are used. Therefore, if the population has
been converged and the global optimum is outside the population range, it is diﬃcult to ﬁnd the global optimum.
HIS[12] is another type of EDA that uses multiple populations (X1 , · · · , XL ) and probabilistic models (p1 (x), · · · , pL (x))
with diﬀerent diversities. HIS searches using all populations and probabilistic models, and is designed that some
populations are converged and others are not. Thus, HIS performs not only to ﬁnd good solutions quickly but also to
avoid converging into the local optimum.
HIS has two main operators, which are performed repeatedly sampling and estimation. In sampling, all probabilistic models create search points independently (Fig. 1). In estimation, all the populations are merged into one pool
from Xl , Xl+1 and Xl−1 . Then, new probabilistic models are built from the good search points, which are selected from
the merged pool (Fig. 2).
In HIS, the diversity of the new created population has to be determined and the target distribution (q1 (x), · · · , qL (x))
of the probabilistic model should be settled for each model. The target distribution is designed as a model the diversity
of which is changed sequentially. In HIS, when a new probabilistic model is created, the number of selected search
points is not determined but the target distribution is ﬁxed. Therefore, search points should be selected to build a new
probabilistic model that has the target distribution. Thus, the number of selected points is small when the diversity of
the target model is small, and conversely the number of selected points is large when the diversity of the target model
is large.
This section described several mechanisms of HIS. These mechanisms help HIS to control the diversity of populations. Therefore, HIS can search eﬀectively.
3. Proposal of Real-coded EDA by Using Probabilistic Models with Multiple Learning Rates
3.1. Design Policy
In this section, RMM that uses multiple populations and probabilistic models similar to HIS is proposed. RMM
refers to a probabilistic model and method for generating search points of PBILc[9]. PBILc uses a simple rule for
updating the probabilistic model based on the normal distribution (N(μi , σ2i ), i is a dimension number) in real-coded
EDAs, and we feel that facilitates to investigate a eﬀectiveness of using multiple probabilistic models.

1246

Masahiro Nakao et al. / Procedia Computer Science 4 (2011) 1244–1251

1. Generate search points using uniform distribution in each population (X1 , · · · , XL ).
2. Calculate the function values of all search points in populations.
3. Initialize average (μi ) and variance (σ2i ) in each probabilistic model. The μi is equal to the design variable of
the best search point in the population. The σ2i is set as a squared size of 1/4 of domain.
4. do{
For l = 1 to L
(1) Select good search points from Xl−1 , Xl , Xl+1 .
(2) Update probabilistic model pl according to eq. 3, 4 and learning rate βl .
(3) Generate next population from probabilistic model pl .
(4) Replace population Xl with the generated population.
}until(stopping criterion reached)
Figure 3: Pseudo Code

The proposed algorithm has a mechanism to alter the learning rate used for updating each probabilistic model to
generate various populations. PBILc uses variance (σ2i ) in a probabilistic model, and the value of variance can be
controlled by the learning rate.
3.2. Algorithm
There are ﬁve parameters in RMM: number of probabilistic models and population couples (L), number of search
points generated by one probabilistic model (C), cutting rate (K), maximum learning rate (β1 ), and minimum learning
rate (βL ). The pseudo-code of RMM is shown in Fig. 3.
First, RMM initializes all populations (X1 , · · · , XL ) and probabilistic models (p1 , · · · , pL ). In the initialization of
population, it generates search points by uniform distribution. For the initial probabilistic model, the average (μi )
of normal distribution’s parameter the model has that is determined as a design variable of best search point in the
initialized population. The variance (σ2i ) should be a large value to search widely in the ﬁrst stage. Thus, the variance
is set a squared size of 1/4 of domain.
To change the diversity of each population, the maximum learning rate (β1 ) is set to the probabilistic model with
the lowest diversity, and the minimum learning rate (βL ) is set to the probabilistic model with the highest diversity.
The other learning rate (βl , (l = 2 · · · L − 1)) is determined for the value to become small sequentially. In this paper,
the learning rate is determined using the following equation:
l−1

βL L−1
(2)
β l = β1 ·
β1
To update the probabilistic model, it selects 3 × C × K good search points from three populations (Xl−1 , Xl , Xl+1 ).
If the case of l = 1 or l = L, it selects 2 × C × K good search points from two populations (X1 · X2 or XL−1 · XL ).
RMM builds each probabilistic model by using selected search points. The average (μi ) and variance (σ2i ) of
normal distribution’s parameter is calculated by eq. 2 , 3 and 4 similar to PBILc.
μt+1
= (1 − β)μti + β(X best1 + X best2 − X worst )
i

= (1 − β)σti + β
σt+1
i

k
j
j=1 (X

k

¯ 2
− X)

(3)

(4)

As shown in eq. 3, the next generation average (μt+1
i ) is calculated by a linear combination of two best and the
worst search points in population. In eq. 4, the next generation diversity (σt+1
i ) is updated from the diversity of current
good search points. The k(= 3 × C × K or 2 × C × K) is a number of high-ranking search points. The X¯ is an average
value in current populations.
Finally, each updated probabilistic model generates C new search points and current populations are replaced with
them.

Masahiro Nakao et al. / Procedia Computer Science 4 (2011) 1244–1251

1247

Table 1: Test functions

Function
Name

Dependency

Formula (S is design variable domain)
S = [−5.12, 5.12]n

Sphere

n
i=1

Ellipsoid

n
i−1/n−1
xi )2
i=1 (1000

k-tablet

k
i=1

xi2
xi2

+

most basic function

S = [−5.12, 5.12]

n

(k = n/4) S = [−5.12, 5.12]

n
2
i=k+1 (100xi )

Ackley

20 − 20 exp(−0.2 1/n
− exp(1/n ni=1 cos(2πxi ))

Rastrigin-1.0

10n + ni=1 (xi − 1.0)2 − 10 cos(2π(xi − 1.0))
S = [−5.12, 5.12]n

Schwefel

418.98289n +

Bohachevsky
Griewank

n−1 2
i=1 (xi

+0.7)

xi sin

stronger ill-scaled single-peak function

+e
S = [−32.768, 32.768]n

xi2 )

√
|xi |

weaker multi-peak function
No

n
i=1 4000 −
2
i
j=1 x j

n
i=1

cos

x
√i
i

weaker multi-peak function

S = [−512, 512]n

same as above

S = [−64, 64]

Ridge
Rosenbrock
-Chain

n−1
i=1

100(xi+1 − xi2 )2 + (xi − 1.0)2

Rosenbrock
-Star

n−1
i=1

100(x1 − xi2 )2 + (xi − 1.0)2

n

the good area is along straight line
strong dependence is between adjoined
variables

S = [−2.048, 2.048]n
Yes
S = [−2.048, 2.048]n

2 0.25
2 0.1
+ xi+1
) × (sin2 (50(xi2 + xi+1
) ) + 1.0)
n
S = [−100, 100]
n−1 2
i=1 (xi

stronger multi-peak function
stronger multi-peak function there
is suboptimal solution in part away

S = [−512, 512]n

n
i=1

Schaﬀer

weaker ill-scaled single-peak function
n

2
+ 2xi+1
− 0.3 cos(3πxi ) − 0.4 cos(4πxi+1 )
S = [−5.12, 5.12]n
xi2

1.0 +

n
i=1

n
i=1

Feature

strong dependence is between x1 and
other variables
suboptimal solutions are in a circular
pattern

4. Experimentation
4.1. Experimental setting
To evaluate the search capability of RMM, several types of numerical experiment were performed. To compare
the performance, PBILc and Distributed Probabilistic Model-Building Genetic Algorithm (DPMBGA)[14] were performed as conventional EDAs. DPMBGA also uses distributed populations similar to RMM. The results of RMM
were also compared with those of REX star [15], which is a real-coded GA and has high search capability.
In the experiments, continuous numerical test functions were used as summarized in Table 1. There were 12
functions, each of which had diﬀerent characteristics: dependency, ill-scale, multi-peak, etc. In each function, the
dimension n was set to 20. When the best search point reaches below 1.0 × 10−7 before the number of evaluations
reaches 2 × 106 , it is judged that the global optimum is discovered.
In these experiments, in addition to evaluating the search capability, several types of parameter of RMM and
PBILc were applied and the best parameter was determined. The combination of parameters of RMM is shown in
Table 2. The parameter of DPMBGA was set according to the reference article[14] (Table 3). The parameter of PBILc
was set equal that of RMM as much as possible (Table 4).
4.2. Results
All simulations were performed 20 trials with the same parameters and all combinations of parameters were
examined. In the results, among the same algorithms, the simulation that derived the global optimum in 20 times and
that had a smaller average evaluations than other simulations is illustrated.

1248

Masahiro Nakao et al. / Procedia Computer Science 4 (2011) 1244–1251

Table 2: Parameters of RMM

Couple of probabilistic
model and populations L
Search points generated by
one probabilistic model C
Cutting rate K
Maximum learning rate β1
Minimum learning rate βL

4, 6, 8, 10
5, 10, 15, 20, 25, 30
0.75, 0.66, 0.50,
0.33, 0.25, 0.20
0.001, 0.002, · · · , 0.009
0.01, 0.02, · · · , 0.09
0.10, 0.15, · · · , 0.50
same as above
(only β1 > βL )

Table 3: Parameters of DPMBGA

Search points
Cutting rate
Elites
Islands
Rate of immigration
Interval of immigration
Archive size
Ampliﬁcation Rate
Mutation rate
Independent component
analysis

512
0.250
1
32
0.0625
5
100
2.000
0.050
ON (if the function
with dependency)

Table 4: Parameters of PBILc

Search points P
Cutting rate K
Learning rate α

20, 40, · · · , 300
The same cutting rate
in Table 2
The same maximum learning
rate in Table 2
Table 5: Results

Func.
Sph.
Elli.
k-tab.
Ackl.
Rast.
Schw.
Boha.
Grie.
Ridg.
RChain
RS tar
Scha.

RMM
3.4 × 103
1.0 × 104
8.4 × 103
6.9 × 103
1.2 × 105
1.1 × 105
6.4 × 103
5.8 × 103
5.4 × 104
1.3 × 105
6.3 × 104
5.4 × 104

PBILc
2.8 × 103
3.3 × 104
3.0 × 104
7.7 × 103
1.4 × 105
1.4 × 106
6.2 × 103
8.6 × 103
9.1 × 104
−
−
9.4 × 104

DPMBGA
1.3 × 105
1.7 × 105
1.6 × 105
2.7 × 105
6.0 × 105
8.0 × 105
1.6 × 105
3.0 × 105
3.5 × 105
9.5 × 105
4.5 × 105
−

REX star
6.9 × 103
8.5 × 103
1.1 × 104
1.4 × 104
1.2 × 105
(No Data)
1.5 × 104
(No Data)
(No Data)
4.7 × 104
5.5 × 104
7.7 × 104

The results are shown in Table 5, where “ - ” indicates that the algorithm could not ﬁnd a global optimum. The
standard deviations of all results were suﬃciently small from 0.7% to 12.1% compared with the average value. The
results of REX star are from the reference article[15].
Table 5 shows that RMM can ﬁnd the global optimum more rapidly than PBILc excluding Sphere and Bohachevsky function. These results indicate that the performance of RMM is superior to that of DPMBGA. Compared with RMM and REX star , the diﬀerences in average evaluations of RMM were from 0.4 to 1.2 times except
Rosenbrock-Chain function. Thus, the performance of RMM is almost equivalent to that of REX star .
5. Discussion
5.1. Parameters
Table 6 shows the parameters that yielded the best performance. First, we discuss the maximum and minimum
learning rates (β1 and βL ). In Rastrigin-1.0 and Schwefel functions do not have dependency between design variables
where the values of β1 and βL are close. On the other hand, in Ridge and Rosenbrock-Chain functions have dependency
between design variables where those are 10.0 and 12.5 times diﬀerent. When the values of β1 and βL are close, the
convergence speeds of all populations are rapid because each population is similar. However, the population does not
cause the initial convergence in a multi-peak function and the global optimum can be discovered. This is because
multiple probabilistic models are estimated for one design variable. When the values of β1 and βL are markedly
diﬀerent, the diversity of the population is maintained because the convergence speed of each population is diﬀerent.
In functions with a strong dependency, RMM can search eﬀectively because the search with maintenance of population
diversity is important.
Next, we focus on the number of probabilistic models (L). To determine the eﬀects of the value of L, all the
search points (L × C) are ﬁxed as 120 and the value of L = 4, 6, 8, 10 is changed. Other parameters are as shown in
Table 6. The target test functions are Rastrigin-1.0, Schwefel, Ridge and Rosenbrock-Chain. The other experiment

1249

Masahiro Nakao et al. / Procedia Computer Science 4 (2011) 1244–1251

Table 6: The best parameters of RMM

Function
Sphe.
Elli.
k-tab.
Ackl.
Rast.
Schw.
Boha.
Grie.
Ridg.
RChain
RS tar
Scha.

L
4
10
8
4
4
10
8
6
4
4
4
6

C
5
5
5
5
5
10
5
5
5
5
10
10

K
0.33
0.33
0.33
0.33
0.50
0.66
0.25
0.33
0.50
0.50
0.25
0.25

β1
0.25
0.45
0.30
0.35
0.01
0.25
0.35
0.45
0.50
0.50
0.50
0.30

βL
0.20
0.35
0.25
0.15
0.009
0.20
0.20
0.25
0.05
0.04
0.05
0.25

Table 7: Number of probabilistic models and search capability

Function
Rast.
Schw.
Ridg.
RChain

L=4
20/20
1.5 × 106
8/20
1.3 × 105
20/20
2.0 × 106
20/20
9.4 × 105

L=6
20/20
1.3 × 106
13/20
1.4 × 105
0/20
20/20
1.0 × 106

L=8
20/20
1.2 × 106
16/20
1.4 × 105
0/20
20/20
1.8 × 106

L = 10
20/20
1.1 × 106
19/20
1.4 × 105
0/20
20/20
2.8 × 106

Table 8: The best 10 performance parameters in single-peak functions

Function
Sphe.
Elli.
k-tab.
Ridg.
RChain
RS tar

Dependency
No

Yes

L
4, 6
4∼10
4∼10
4
4
4

C
5
5
5
5, 10
5, 10
10, 15

K
0.20∼0.33
0.33∼0.66
0.33∼0.66
0.25∼0.66
0.33∼0.66
0.20∼0.33

β1
0.20∼0.50
0.25∼0.50
0.30∼0.50
0.35∼0.50
0.40∼0.50
0.45∼0.50

βL
0.10∼0.40
0.15∼0.45
0.15∼.35
0.03∼0.10
0.02∼0.05
0.03∼0.06

environments are the same as Section 4. The results are shown in Table 7. The upper row shows that the number
of discovered the global optimum in 20 trials and the lower row shows that the average of the evaluations when the
global optimum was discovered. Table 7 indicates that the performance is high in multi-peak functions with a large
value of L and in single-peak functions with a small value of L. The larger the value of L is, the higher the probability
of searching for a diﬀerent area is. Thus, it is easy to discover the optimum point because the probability of population
convergence in the suboptimal solution is small.
To verify the points mentioned above, the histories of the averages of each probabilistic model with L = 4 and
L = 10 were examined. In Fig. 4, the transition of only one design variable among 20 dimensions is described. As
the results of multi-peak functions, each population searches for a more diﬀerent area with larger value of L. As the
results of single-peak functions, all populations search for almost the same area with all value of L. In single-peak
functions, the smaller the value of L is, the larger the value of search points generated by one probabilistic model C
is when all search points are ﬁxed. Generally, the greater the number of search points is, the better the local search
capability is. To solve single-peak functions quickly, it is better to have greater local search capability. Therefore, the
search capability increases with small value of L. For the multi-peak functions, the search capability for various areas
is essential. Therefore, the value of L should be high. However, Table 6 shows that the values of the best value of L of
Ellipsoid and k-tablet functions, which are single-peak functions, are 10 and 8. These results were in contrast to the
above assumption.
The best 10 parameters of all single-peak functions were investigated in Table 8. Table 8 shows that the value of L
is diﬀerent for functions that do not have dependency between design variables. On the other hand, the smallest value
of L is only 4 for the functions that have dependency between design variables. Moreover, the diﬀerence between
the values of β1 and βL of functions that do not have dependency was smaller than that of functions that do have
dependency. When the diﬀerence between the values of β1 and βL is small, the convergence of populations is high
because each population is similar. If the value of C is ﬁxed, the amount of calculation is increased in one generation
with high value of L. However, the inﬂuence of the values of β1 and βL on population convergence is larger than the
value of L because the landscape of the functions that do not have dependency is simple. Therefore, it is assumed

1250

Masahiro Nakao et al. / Procedia Computer Science 4 (2011) 1244–1251

Figure 4: History of μi of each probabilistic model

that the inﬂuence of the value of L on performance is small in simple functions. A global optimum can be found in
Ackley, Rastrigin-1.0, Griewank and Schaﬀer functions if the value of L is small because these functions do not fall
easily into the local optimum because their landscapes have a single peak from a broader standpoint.
Based on these discussions, the value of L is set to a small value for multi-peak functions and to a large value for
single-peak functions.
5.2. Eﬀectiveness of multiple learning rates
In this section, we discuss the movement width of the populations of RMM and PBILc. In the function with
strong dependency between design variables, such as Ridge or Rosenbrock-Chain function, population convergence
occurs easily. Therefore, the population needs to reach the global optimum before population convergence. Eq. 2
determines the movement width of the population generated by the probabilistic models of RMM. While PBILc builds
a probabilistic model from only one population, RMM builds a probabilistic model from three populations. Therefore,
the movement width of the RMM population is often larger than that of PBILc because RMM uses three populations
that diﬀer in their diversity.
To determine the movement width, we examine for Ridge and Rosenbrock-Chain function. The parameters of
RMM are shown in Table 6 and those of PBILc are the same values of RMM. The result is shown in Fig. 5. Fig. 5
indicates that the width of the population of RMM is larger than that of PBILc. The width of the population of RMM
repeats the increase and decrease, while that of PBILc always decreases. The width of the population of RMM changes
more easily than that of PBILc because RMM builds probabilistic model from multiple populations. Moreover, Fig.
5 shows that the width of the population of RMM is large with a high learning rate, while that of PBILc is small
with a high learning rate. Eq. 2 and 3 indicate that the width of the population is large with a high learning rate and
the variance of the population tends to be small. However, the width of the population is small because the smaller
the variance is, the smaller the range of population generated by a probabilistic model is. Therefore, the width of
the population of PBILc becomes small when the learning rate is high. In the case of RMM, the variance of the
population can be maintained more easily than that of PBILc due to the use of multiple populations. Thus, the width
of the population of RMM is larger when the learning rate is high.

Masahiro Nakao et al. / Procedia Computer Science 4 (2011) 1244–1251

1251

Figure 5: The movement width of population

6. Conclusions
In this paper, a new type of real-coded EDA, RMM, was proposed. RMM can form multiple populations with high
diversity of variables by setting diﬀerent learning rates in each probabilistic model. To evaluate its search capability,
RMM was applied to ﬁnd the solution in 12 continuous test functions. The results showed that the search capability
of RMM is better than or equivalent to those of existing real-coded EDAs.
The relation of the number of probabilistic models and the search capability of RMM was also discussed. The
numerical experiments indicated the following two tendencies. First, RMM with many probabilistic models has
stronger search capability for functions with multi-peak landscape structures. When RMM has many probabilistic
models, the diﬀerent points were used for searching in each probabilistic model. For functions with a multi-peak
structure, it is important to have a search with a high diversity of solutions to ﬁnd the global optimum. Second, on
the other hand, RMM with a small number of probabilistic models has greater search capability for functions with a
single-peak landscape structure. In this case, RMM requires greater local search capability and this helps to ﬁnd the
global optimum.
Reference
[1] M¨uehlenbein, H. and Paass, G.: From recombination of genes to the estimation of distributions I. Binary parameters., Parallel Problem
Solving from Nature, pp. 178–187 (1996)
[2] Larranaga, P. and Lozano, J. A. e.: Estimation of Distribution Algorithm, Kluwer Academic Publishers (2002)
[3] Pelikan, M., Goldberg, D. E., and Lobo, F.: A survey of optimization by building and using probabilistic models., Technical report, Computational Optimization and Applications, 21(1), 5-20. Also IlliGAL Report, No. 99018 (2002)
[4] Shumeet B.:Population-Based Incremental Learning: A Method for Integrating Genetic Search Based Function Optimization and Competitive
Learning. Technical Report CMU-CS-94-163, Carnegie Mellon University (1994)
[5] Jeremy S. De Bonet, Jr. Charles L. Isbell, and Paul Viola.: MIMIC: Finding Optima by Estimating Probability Densities. Advance in Neural
Information Processing Systems, Vol. 9, pp. 424-430 (1997)
[6] Martin P., David E. Goldberg, and Erick Cant´u-Paz. BOA: The Bayesian Optimization Algorithm. Proc. Genetic and Evolutionary Computation Conference 1999, pp. 525-532 (1999)
[7] Stephan Rudlof and Mario K¨oeppen.: Stochastic Hill Climbing with Learning by Vectors of Normal Distributions. Online Workshop on
SOFT COMPUTING (1996)
[8] P. Bosman and D. Thierens.: Continuous Iterated Density Estimation Evolutionary Algorithms Within The IDEA Framework. Proceedings
of the OBUPM Workshop at the 2000 Genetic and Evolutionary Computation Conference, pp. 197-200 (2000)
[9] Sebag, M. and Ducoulombier, A.: Extending population-based incremental learning to continuous search spaces, Proc. of the Parallel Problem
Solving from Nature - PPSN V, pp. 418–427 (1998)
[10] Goldberg, D. E.: Optimization and Machine Learning, Addison-Wesley Publishing Company (1989)
[11] V. Scott G. and Darrell W. : Serial and Parallel Genetic Algorithms as Function Optimizers, Proceedings of the Fifth International Conference
on Genetic Algorithms, pp. 177-183 (1993)
[12] Higo, T. and Takadama, K.: Maintaining Multiple Populations with Diﬀerent Diversities for Evolutionary Optimization Based on Probability
Models, Information and Media Technologies, Vol. 3, No. 2, pp. 362–374 (2008)
[13] Higo, T.: Research on the Importance Sampling Method for Evolutionary Algorithms Based on Probability Models, Ph.D. thesis, Tokyo
Institute of Technology (2008)
[14] Tomoyuki, H., Mitsunori, M., Masaki, S., Hisashi, S., Shigeyoshi, T., Jack, D.: Distributed Probabilistic Model-Building Genetic Algorithm,
Proceedings of the 2003 Genetic and Evolutionary Computation Conference (2003)
[15] Shigenobu, K.: The Frontiers of Real-coded Genetic Algorithms, Transactions of the Japanese Society for Artiﬁcal Intelligence Vol. 24 No.
1 SP-N, pp. 147–162 (2009)

