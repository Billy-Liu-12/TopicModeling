Procedia Computer Science
Volume 51, 2015, Pages 336–345
ICCS 2015 International Conference On Computational Science

Expressively Modeling the Social Golfer Problem in SAT
Fr´ed´eric Lardeux1 and Eric Monfroy2
1

2

Universit´e d’Angers, Angers, France. Frederic.Lardeux@univ-angers.fr
LINA - UMR 6241, TASC - INRIA Universit´e de Nantes, France. Eric.Monfroy@univ-nantes.fr

Abstract
Constraint Satisfaction Problems allow one to expressively model problems. On the other
hand, propositional satisﬁability problem (SAT) solvers can handle huge SAT instances. We
thus present a technique to expressively model set constraint problems and to encode them
automatically into SAT instances. Our technique is expressive and less error-prone. We apply
it to the Social Golfer Problem and to symmetry breaking of the problem.
Keywords: Set Constraints, SAT Encoding, Social Golfer Problem, Constraint Programming, CSP

1

Introduction

Most combinatorial problems can be formulated as Constraint Satisfaction Problems (CSP) [12].
A CSP is deﬁned by some variables and constraints between these variables. Solving a CSP
consists in ﬁnding assignments of the variables that satisfy the constraints. One of the main
strength of CSP is expressiveness: variables can be of various types (ﬁnite domains, intervals,
sets, . . . ) and constraints as well (linear, non linear, arithmetic, set, Boolean, . . . ). On the other
hand, the propositional satisﬁability problem (SAT) is restricted (in terms of expressiveness)
to Boolean variables and propositional formulae. However, SAT solvers can now handle huge
SAT instances (millions of variables and clauses). It is thus attractive to encode CSPs into SAT
(e.g., [3, 5]) in order to beneﬁt from the expressiveness of CSP and the power of SAT.
In this paper we are concerned with the encoding of CSP set constraints into SAT instances. In the constraint programming community, various systems for set constraints have
been designed (e.g., as special libraries [11] or integrated in a solver [1]). They have shown that
numerous problems can easily be modeled with sets.
Coding set constraints directly into SAT is a tedious tasks (e.g., [13] or [10]). Moreover,
when one wants to optimize its model in terms of variables and clauses this quickly leads to
very complicated and unreadable models in which errors can easily appear. Thus, our approach
is based on an automated encoding of set constraints into SAT instances. To this end, we deﬁne
some encoding rules (⇔enc ) that encode set constraints (such as union, membership, cardinality,
. . . ) into the corresponding SAT clauses and variables. The advantage is that the modeling
language (i.e., standard set constraints) is declarative, expressive, simple, and readable. We
have tried this technique on various problems, and the SAT instances which are automatically
336

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.252

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

generated have a complexity similar to the complexity of improved direct SAT formulations,
and their solving with a SAT solver (in our case Minisat) is eﬃcient. We illustrate our approach
with the Social Golfer Problemn (SGP): q golfers play every weeks during w weeks split in g
groups of p golfers (q = p.g); how to schedule the play of these golfers such that no golfer plays
in the same group as any other golfer more than once?
Works such as [3] and [5] make a relation between CSP and SAT solving (in terms of
consistency properties) for ﬁnite domain constraints. Here, we are concerned with a diﬀerent
type of constraints. [13] (a revision and improvement of [10]) is a direct modeling of the SGP into
SAT, whereas we are concerned with a higher-level modeling language which is automatically
transformed into SAT instances. [13] also proposes various symmetry breaking techniques to
improve the model; some of these symmetries naturally disappear with set constraints (e.g., no
permutation due to numbering of players in groups). The remaining symmetries can easily be
broken in our model by adding constraints or by reﬁning the initial model. Note that we use
the cardinality global constraint of [4] to encode set cardinality.

2

Set Constraint Encoding

We present the encoding of usual (CSP) set constraints (e.g., ∈, ∪, ∩, . . . ) into SAT clauses.
Universe and Supports. Informally, the universe is the set of all elements that are considered
in a model of a given problem while the support F of a set F appearing in this model is a set
of possible elements of F (i.e., F is a superset of F ).
Deﬁnition 1. Let P be a problem, and M be a model of P in L, i.e., a description of P from
the natural language to the language of constraints L.
• The universe U of M is a ﬁnite set of constants.
• The support of the set F of the model M is a subset of the universe U ; we denote it by F. F
represents the elements of U that can possibly be elements of F :
F ⊆F ⊆U

and

F ∈ P(F)

where P(F) = {A|A ⊆ F} is the power set of F. We say that F is over F.
Note that each element of U \ F cannot be an element of F . We denote sets by upper-case
letters (e.g., F ) and their supports by calligraphic upper-case letters (e.g., F). When there is
no confusion, we shorten ”the set F of the model M ” to ”the set F ”. Consider a model M with
a universe U , and a set F over F. For each element x of F, we consider a Boolean variable
xF which is true if x ∈ F and false otherwise. We call the set of such variables the support
variables for F in F. In the following, we write xF for xF = true and ¬xF for xF = f alse.
The ⇔enc Encoding Rule. In the following, we consider three sets F , G, and H respectively
deﬁned on the supports F, G and H of the universe U , and for each x ∈ U the various Boolean
variables xF , xG , and xH as deﬁned before. |G| denotes the cardinality of the set G.
Our encoding rules also consider cases for which the supports are not minimal: for example,
for the constraint F = G, the sets F \ G and G \ F can be non empty whereas F \ G and G \ F
must be empty. Allowing the supports to be non minimal makes easier the modeling process:
one does not have to compute the minimal support. This is practical when sets are built from
numerous sets and constraints. Note also that using the minimal supports reduces the size of
the generated SAT instances.
337

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

The encoding rule is noted ⇔enc . The clauses that are generated by this rule are of the form
∀x ∈ F, φ(xF ) which denotes the |F| formulae φ(xF ) built for each element x of the support
F of F (x refers to the element of the universe/support, and xF to the variable representing x
for the set F ). For the membership constraint, the rule is not quantiﬁed; for multi-intersection
and multi-union, an additional universal quantiﬁer over i is used to denote a set of encoding
rules, each rule being related to one of the sets Fi .
Table 1 presents our rules for set constraint: ﬁrst the constraint, then its encoding into SAT,
and ﬁnally, the number of clauses generated. Note that some constraints like x ∈ F or F = G
are deﬁned similarly as constraints deﬁned in Table 1. Moreover, constraints can be linked
by ∨, ∧, and →. In our implementation, the result of a union must be stored in a set: thus,
n
H = i=1 Fi is equivalent to H = F1 ∪ H1 , H1 = F2 ∪ H2 , . . . but the multi-union constraint
signiﬁcantly reduces the number of SAT variables.

3

SAT Encoding for Set Constraint Model

Among the various SAT models for the SGP, the most classical is the direct encoding (DE) [13]
(which was already a revision of [10]). [13] also proposes a variant of the DE using intermediate
variables (we call it TME). We propose a model for the SGP using set constraints in a solver
independent way. These constraints are then encoded into SAT using our ⇔enc rules.
Set constraints model An instance of the problem is given by a triple g − p − w: p players per
group, g groups per week, and w weeks. The universe is the set of players P = {p1 , . . . , pq } with
q = g.p being the total number of players. We need w.g set variables to model the groups G1,1 ,
. . . , Gw,g . The set Gi,j is the group j of week i and is over the support Gi,j = P. Each Gi,j
will contain p players from P. The supports are ”minimal”: they cannot be reduced without
loosing (symmetric) solutions. We now give the constraints of the Social Golfer Problem.
• p players per group every weeks
• Every golfer plays every weeks

∀i ∈ [1..w], ∀j ∈ [1..g], |Gi,j | = p

(1)

Gi,j = P

∀i ∈ [1..w]

(2)

j=1..g

• No golfer plays in two groups the same week

Gi,j = ∅

∀i ∈ [1..w]

(3)

j=1..g

Constraints (3) are not required since they are implied by Constraints (1) and (2).
• Two players cannot play twice together in the same group
∀w1 , w2 ∈ [1..w], pi , pj ∈ P, g1 , g2 ∈ [1..g], w1 > w2 ∧ i > j ∧
pi ∈ Gw1 ,g1 ∧ pj ∈ Gw1 ,g1 ∧ pi ∈ Gw2 ,g2 → pj ∈ Gw2 ,g2

(4)

Another formulation of these constraints can be given using the cardinality constraints:
(5)
∀w1 , w2 ∈ [1..w], g1 , g2 ∈ [1..g], w1 > w2 ∧ g1 ≥ g2 ∧ |Gw1 ,g1 ∩ Gw2 ,g2 | ≤ 1
SCE: Set Constraint Encoding From the above set model, our ⇔enc encoding rules automatically generate SAT instances (see Section 2). The number of generated clauses is:
g.p

ug.p

ug.p

ug.p

i
+ 1)( i2 + 1) − ( i2 + 1)])
• Constraints (1) generates w.g.w.(g.p + i=1 [2ug.p
i (
2
g.p
g.p
g.p
g.p
g.p
clauses with ug.p = 1,u1 = g.p and ui = u2i−1 + 2u2i + ug.p
2i+1 . The complexity of the
formula generated by Constraints (1) is O(w2 .g 3 .p2 ).

338

⇔enc

F =G

⇔enc

F ∩G=H

⇔enc

F ∪G=H

⇔enc

F ⊆G

⇔enc

H =F \G

⇔enc

n
i=1

Fi

⇔enc

H=

n
i=1

Fi

⇔enc

339

|G| = k

⇔enc

⎩
⎧
⎨
⎩
⎧
⎪
⎪
⎪
⎪
⎪
⎪
⎨
⎪
⎪
⎪
⎪
⎪
⎪
⎩
⎧
⎪
⎪
⎪
⎪
⎨
⎪
⎪
⎪
⎪
⎩
⎧
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨

⎪
I=∅,
⎪
⎪
I∪J=N
⎪
n
n
⎪
⎪
|H \ ( i=1 Fi )| unit clauses
⎪
⎩ ∀x ∈ H \ ( i=1 Fi ), ¬xH
n
∈ Fi \ H, ¬xFi
i=1 |(Fi \ H| unit clauses
⎧ ∀i ∈ [1..n], ∀x
n
n
n
2.|H ∩ ( i=1 Fi )| (n + 1)-ary cl.
⎨ ∀x ∈ H ∩ ( i=1 Fi ),
i=1 xFi ↔ xH
n
n
n
| i=1 Fi \ H| n-ary clauses
∀x ∈ i=1 Fi \ H,
i=1 (¬xFi )
⎩
n
n
|H \ ( i=1 Fi )| unit clauses
∀x ∈ H \ ( i=1 Fi ), ¬xH
n
n
n
u
u
u
n
n
n
n + i=1 2uni ( 2i + 1)( 2i + 1) − ( 2i + 1) clauses and
i=1 ui variables
[4]
n
n
n
n
n
n
with un = 1, u1 = n and ui = u2i−1 + 2u2i + u2i+1 .

Lardeux, Monfroy

H=

⎧
⎨

Expressively Modeling the Social Golfer Problem in SAT

x∈F

Table 1: Set constraints encoding into SAT
x ∈ F, xF
1 unit clause
x ∈ F, f alse 1 empty clause
∀x ∈ F ∩ G, xF ↔ xG 2.|F ∩ G| binary clauses
|F \ G| unit clauses
∀x ∈ F \ G, ¬xF
|G \ F| unit clauses
∀x ∈ G \ F, ¬xG
∀x ∈ F ∩ G ∩ H, xF ∧ xG ↔ xH |F ∩ G ∩ H| ternary clauses + 2.|F ∩ G ∩ H| binary clauses
∀x ∈ (F ∩ G) \ H, ¬xF ∨ ¬xG
|(F ∩ G) \ H| binary clauses
|H \ (F ∩ G)| unit clauses
∀x ∈ H \ (F ∩ G), ¬xH
∀x ∈ F ∩ G ∩ H, xF ∨ xG ↔ xH |F ∩ G ∩ H| ternary clauses + 2.|F ∩ G ∩ H| binary clauses
2.|(F ∩ H) \ G| binary clauses
∀x ∈ (F ∩ H) \ G, xF ↔ xH
∀x ∈ (G ∩ H) \ F, xG ↔ xH
2.|(G ∩ H) \ F| binary clauses
|H \ (F ∪ G)| unit clauses
∀x ∈ H \ (F ∪ G), ¬xH
|F \ H| unit clauses
∀x ∈ F \ H, ¬xF
|G \ H| unit clauses
∀x ∈ G \ H, ¬xG
∀x ∈ F ∩ G, xF → xG |F ∩ G| binary clauses
|F \ G| unit clauses
∀x ∈ F \ G, ¬xF
∀x ∈ F ∩ G ∩ H, xF ∧ ¬xG ↔ xH |F ∩ G ∩ H| ternary clauses + 2.|F ∩ G ∩ H| binary clauses
∀x ∈ F \ (G ∪ H), ¬xF
|F \ (G ∪ H)| ternary clauses
|H \ F| unit clauses
∀x ∈ H \ F, ¬xH
2.|(F ∩ H) \ G| binary clauses
∀x ∈ (F ∩ H) \ G, xF ↔ xH
|(F ∩ G) \ H| binary clauses
∀x ∈ (F ∩ G) \ H, xF → xG
|H ∩ ( i∈I Fi ) \ ( j∈J Fj )|.(|I| + 1) binary clauses and
I,J∈P(N ),
∀I, J ∈ P(N ), I = ∅, I ∪ J = N,
I=∅,
I∪J=N
∀x ∈ H ∩ ( i∈I Fi ) \ ( j∈J Fj ),
|H ∩ ( i∈I Fi ) \ ( j∈J Fj )| (|I| + 1)-ary clauses
I,J∈P(N ),
i∈I xFi ↔ xH

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

• Constraints (2) generates w.g.p clauses.
• Two formulations are possible: Constraints (4) generates w.(w − 1).g.(g + 1).q.(q − 1)/2)
clauses (O(w2 .g 4 .p2 )) and Constraints (5) generates w.((w − 1)/2).g.((g + 1)/2).3.q.(q +
q
uqi
uqi
q
q ui
2 5 3
i=1 [2ui ( 2 + 1)( 2 + 1) − ( 2 + 1)]) clauses (O(w .g .p )).
Complexity of the SAT instances Since the complexity of Constraints (4) is O(w2 .g 4 .p2 )
whereas the complexity of Constraints (5) is O(w2 .g 5 .p3 ), we will only focus on the implication
formulation (Constraints (4)). The complexity of the SAT instances generated by the Set
Constraint Encoding (SCE) model made from Constraints (1), (2), and (4) is O(w2 .g 4 .p2 ).
Post-treatment by Unit Propagation Unit propagation is a simple process to eliminate
unit clauses (clauses with only false literals and one free literal) by giving the true value to the
free literals. This valuation can produce new unit clauses; the process is applied until there is no
longer any unit clause. Algorithms for unit propagation may signiﬁcantly reduce: 1) instance
sizes, 2) number of variables and 3) solving time. Note that the cardinality constraint encoding
that we have chosen generates numerous unit clauses that vanish using unit propagation.

4

Symmetry Breaking for the SGP

Removing symmetric solutions eases the work of a (SAT) solver. The Social Golfer Problem is
highly symmetric: the position of a player in a group is not relevant; the groups in a week can
be renumbered; the weeks can be swapped. Symmetry breaking thus consists in eliminating
symmetries by adding new constraints or modifying the model. [10] proposes some clauses to
remove symmetries among players, to order groups within a week to order lexicographically the
weeks, ... However, these clauses become more and more complicated and mistakes can easily
be introduced. Indeed, [13] revised the clauses for symmetry breaking of [10] in order to correct
the ranges of the various
and . We call this encoding TMESB . More symmetries can be
broken, such as in [9]. All symmetries can be broken [6], but this is often at the cost of a super
exponential number of constraints. Thus, this cannot be considered in practice.
With our set language, we have two possibilities to break symmetries: by adding extra
constraints to the initial model or by reﬁning the model itself by modifying the supports of
sets and the constraints. Since our model is diﬀerent from the one of [10] and [13], we do not
obtain the same symmetries. However, we try to break similar symmetries.The ﬁrst group of
symmetry breaking (SB1) consists in ﬁlling the ﬁrst week as follows: the ﬁrst p players are sent
to the ﬁrst group of the ﬁrst week; the next p players, on the second group of the ﬁrst week;
and so on. We consider a second group SB2 of symmetry breaking to complete SB1: the ﬁrst
p players are spread in diﬀerent groups each week. When p is greater than g we can rather
obviously see that the problem has no solution. In the following, we thus consider g ≥ p.
Symmetry breaking for the set constraint model by adding constraints. For SB1,
we only have to add the following simple constraints to the model of the SCE.
∀i ∈ [1..p.g], pi ∈ G1,i

div (p+1)

(6)

For the second group SB2 of symmetry breaking, the required constraints are also simple:
∀i ∈ [2..w], ∀j ∈ [1..p], pj ∈ Gi,j

(7)

These constraints add clauses to the SAT instances: however, these extra constraints are unit
clauses that will produce unit propagation and thus will vanish. The SAT encoding of the
340

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

set model with symmetry breaking by adding constraints to the model is named SCESBC and
consists in Constraints (1), (2), (4), (6), and (7).
Symmetry breaking for the set constraint model by modifying the model. Although modifying the model is more tedious, this reduces the supports of sets and cardinality
constraints, and consequently the generated SAT instances. The only modiﬁcation for SB1
consists in both modifying the supports of the groups of the ﬁrst week and to ﬁx these groups:
∀i ∈ [1..g], G1,i = {p1+(i−1).g , . . . pp+(i−1).g } and ∀i ∈ [1..g], G1,i = G1,i

(8)

The other sets, variables, and constraints remain unchanged. To introduce SB2, we change the
group variables. Instead of the Gi,j , we now consider the sets G1,1 , . . . , Gw,g such that:
• for the ﬁrst week Gi,j = Gi,j ;
• for the following weeks Gi,j = Gi,j ∪ {pj } if j ≤ p, Gi,j = Gi,j otherwise.
The support of the G1,i (i.e., the groups of the ﬁrst week) are deﬁned as with SB1. Since
the p ﬁrst players are spread on the p ﬁrst groups of each week, the supports of the other groups
can be reduced to P = {pp+1 , . . . , pq }, and ∀i ∈ [2..w], ∀j ∈ [1..g], Gi,j = P
P players per group every weeks. Constraints (1) must be replaced by Constraints (9)–(11).
∀i ∈ [1..g], |G1,i | = p
∀j ∈ [2..w], ∀i ∈ [1..p], |Gj,i | = p − 1
∀j ∈ [2..w], ∀i ∈ [p + 1..g], |Gj,i | = p

(9)
(10)
(11)

Every golfer plays every week. Constraints (12) replace Constraints (2).
∀j ∈ [2..w]

Gj,i = P

(12)

i=1..g

Two players cannot play twice together in the same group. Constraints (4) are replaced
by Constraints (13)–(16). Since 2 groups Gi,j with j ≤ p and i > 1 have player pj in common,
the corresponding groups Gi,j (which supports do not contain the pl , l ≤ p) cannot have any
other player pk in common:
∀w1 , w2 ∈ [2..w], pi ∈ P, g1 ∈ [1..p], w1 > w2 , pi ∈ Gw1 ,g1 → pi ∈ Gw2 ,g1

(13)

The relation between other two groups is not changed.
Between a group of the ﬁrst week (except the ﬁrst group) and groups of other weeks:
∀w1 ∈ [2..w], pi , pj ∈ P, g1 ∈ [2..g], g2 ∈ [1..g], i > j,
pi ∈ G1,g1 ∧ pj ∈ G1,g1 ∧ pi ∈ Gw1 ,g2 → pj ∈ Gw1 ,g2

(14)

Without considering p ≤ g, then g1 must be considered in [2..g] to generate the proper constraints (that will generate a failure during the resolution of the SAT instance).
Between two groups (except of the ﬁrst week) equally numbered with an index greater than p:
∀w1 , w2 ∈ [2..w], pi , pj ∈ P, g1 ∈ [p + 1..g], w1 > w2 , i > j,
pi ∈ Gw1 ,g1 ∧ pj ∈ Gw1 ,g1 ∧ pi ∈ Gw2 ,g1 → pj ∈ Gw2 ,g1

(15)

Between two groups (except of the ﬁrst week) not equally numbered:
∀w1 , w2 ∈ [2..w], pi , pj ∈ P, g1 , g2 ∈ [1..g], w1 > w2 , g1 = g2 , i > j,
pi ∈ Gw1 ,g1 ∧ pj ∈ Gw1 ,g1 ∧ pi ∈ Gw2 ,g2 → pj ∈ Gw2 ,g2

(16)

The SAT encoding of the set model with symmetry breaking by modifying the model is named
SCESBM and consists in Constraints (8)–(16).
341

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

Table 2: List of the encoding names
Name
DE
TME
TMESB
SCE
SCESBC
SCESBM
NAMEUP

5

Description
Direct Encoding
Triska-Musliu encoding
TME with symmetry breaking
SAT encoding of the set constraint model
SCE with symmetry breaking by adding constraints
SCE with symmetry breaking by modifying the mode
encoding after unit propagation treatment

Constraints
[13]
[13]
[13]
(1), (2), (4)
(1), (2), (4),(6), (7)
(8)–(16)

Comparisons of Models

Table 2 summarizes the encodings (described in the previous sections) that we compare in the
following sections. NAMEUP denotes the encoding NAME after unit propagation.
Expressiveness. The variables of our set model are much simpler: we need 2 indices instead
of 4, making them more readable. The second diﬀerence is the simplicity and readability
of constraints. Indeed, set constraints are more expressive than pure SAT clauses. Then,
the encoding into SAT is performed by the ⇔enc encoding rules. The advantage is double:
1) constraints are readable, expressive, easy to modify, resulting in a much understandable
model; 2) less mistakes are introduced since the modeling process is much simpler. Moreover,
the set encoding is solver independent. Indeed, the same model (changing the syntax) can be
used in a set constraint CSP solver or in a SAT solver after the ⇔enc encoding proposed above.
Adding symmetry breaking in the set model can be done by adding constraints/clauses or by
modifying the model itself. The process is a bit more complicated than just adding constraints,
but the result is worth: instances are smaller and solving time is faster.
In terms of expressiveness, readability, error introduction, and solver dependence, our set
model is superior to direct encodings such as DE or TME. Breaking symmetries is also easier.
Model Structure We generated a set of SGP instances with: the direct encoding DE, the
Triska-Musliu encoding [13] (TME), and our set constraint encoding with unit propagation
post-treatment (SCEUP ) and without (SCE). In Table 3, each instance is deﬁned by the triple
(groups, players per group, weeks) and for each encoding the numbers of variables and clauses
are given. For each instance, encodings generating the smallest number of clauses and variables
are in bold. Instance size is not the only comparison criterion. Nevertheless, big instances
are intractable due to the limited computer memory. It is thus necessary to generate as small
as possible instances. Direct encoding (DE) is clearly unsuitable when the number of players
or groups increases; With the introduction of auxiliary variables the number of clauses is less
important for TME but the number of variables increases. SCE produces more variables but
less clauses. As might be expected, SCEUP provides the most interesting encoding in terms of
number of clauses and number of variables: indeed, SCE generates a lot of unit clauses and
binary clauses (Section 3) that vanish using unit propagation.
Impact of the symmetry breaking We applied the two symmetry breaking processes of
Section 4 and results are presented in Table 3. For TME, introducing symmetry breaking
only increases the number of clauses (around 10% more clauses), the number of variables does
not change. Note also that unit propagation is not worth for TME instances nor for TMESB
instances: there is no unit clause. For SCE, symmetry breaking by adding constraints adds a
negligible amount of constraints (see SCESBC ). More interestingly, adding symmetry breaking
by modifying the model (SCESBM ) signiﬁcantly reduces the size of the generated SAT instances:
from 20 up to 60% less variables and from 40 to 60% less clauses. This signiﬁcant reduction is
342

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

Table 3: Size of instances generated using diﬀerent encodings.
Prob.
5-3-6
5-3-7
8-4-4
8-4-5
8-4-6
8-4-7
8-4-8
8-4-9
8-4-10
9-4-6
9-4-7
9-4-8
9-4-9
9-4-10

DE
var
cl.
×106
1 350
3
1 575
4
4 096
48
5 120
81
6 144 121
7 168 170
8 192 227
9 216 292
10 240 365
7 776 196
9 072 274
10 368 366
11 664 470
12 960 588

TME
var
cl.
×103
1 800
60
2 100
79
5 120 323
6 400 483
7 680 675
8 960 898
10 2401 153
11 5201 441
12 8001 759
9 7201 048
11 3401 401
12 9601 805
14 5802 261
16 2002 767

T M E*SB
var
cl.
×103
1 800
71
2 100
92
5 120 390
6 400 567
7 680 776
8 9601 016
10 2401 288
11 5201 592
12 8001 928
9 7201 191
11 3401 568
12 9601 996
14 5802 261
16 2003 006

SCE
var
cl.
×103
8 625
50
11 110
68
24 224 235
34 752 373
47 072 543
61 184 744
77 088 978
94 7841 243
114 2721 540
117 324 858
157 2841 180
203 0761 553
254 7001 976
312 1562 451

SCESBM
var
cl.
×103
5 702
21
7 734
30
14 192
96
22 476 173
32 552 273
44 420 396
58 080 542
73 532 711
90 776 902
46 344 448
63 368 652
82 984 895
105 1921 176
129 9921 496

SCESBC
var
cl.
×103
8 625
50
11 110
68
24 224 235
34 752 373
47 072 543
61 184 744
77 088 978
94 7841 243
114 2721 540
117 324 858
157 2841 180
203 0761 553
254 7001 977
312 1562 451

SCEUP
var
cl.
×103
1 410
44
1 645
60
3 840 205
4 800 335
5 760 498
6 720 692
7 680 918
8 6401 175
9 6001 465
7 344 793
8 5681 104
9 7921 465
11 0161 878
12 2402 342

SCESBM
UP
var
cl.
×103
860
18
1 032
26
2 376
78
3 168 149
3 960 243
4 752 361
5 544 500
6 336 663
7 128 848
5 620 472
6 008 562
7 024 783
8 0401 040
9 0561 334

SCESBC
UP
var
cl.
×103
980
23
1 176
34
2 580
92
3 440 176
4 300 288
5 160 427
6 020 593
6 880 786
7 7401 006
5 620 472
6 744 701
7 868 975
8 9921 294
10 1161 658

due to the reduction of supports and to the cardinality constraints.
Without unit propagation, the instances of SCESBM are always the smallest ones w.r.t. the
number of clauses. Unit propagation has no impact at all on TME. However, its impact is
signiﬁcant on SCE, SCESBM , and SCESBC . For SCE, unit propagation divides the number of
variables by 6 to 25: this is mainly due to the variables of the cardinality constraints. The
number of clauses is reduced of around 10%. For SCESBC , unit propagation reduces even more
the number of variables (up to 30 times less variables). The number of clauses is reduced from
30 to 60%. For SCESBM , unit propagation is less spectacular: indeed, the initial model itself is
reduced. However, the number of variables is divided by 5 up to 15. The number of clauses is
reduced of about 10%.
To summarize, unit propagation is more beneﬁcial to SCESBC ; however, SCESBM
always
UP
gives the best instances in terms of number of clauses and number of variables.

6

Experimental Analysis

We now compare the eﬃciency of the encodings in terms of solving time, using the well known
solver Minisat [8]. SatELite [7] is a pre-treatment in Minisat to drastically reduce the number
of clauses and variables. This pre-treatment has a cost but it generally improves the global
running time. It can also be deactivated. Table 4 represents respectively the running time of
Minisat with and without SatElite as pre-treatment.
Experimentations are realized on a 2.60GHz Intel Core i5-2540M CPU and 4 GB RAM. For
each experiment, the time-out is 300 seconds (”-” if time-out is reached). The direct encoding
DE is not presented since, as supposed, no results are obtained in a reasonable time. Table 4
shows that the use of SatElite is diﬃcult to predict: depending on the instance, it signiﬁcantly
improves or degrades the results. On average, it does not improve the results and the best
running times are obtained without pre-treatment. Symmetry breaking modifying the model
(SCESBM ) provides the best (or very close to the best) results, with or without pre-treatment.
The use of unit propagation has a weak impact to the resolution time of SCESBM . Adding
constraints to break symmetries (SCESBC ) does not produce any improvement except when
SBC
SBM
.
unit propagation is applied (SCESBC
UP ). Indeed, SCEUP obtains results as good as SCE
Breaking symmetries in TME is rather ﬂuctuating: depending on the instances and depending
on the use of SatELite, it signiﬁcantly improves or degrades the results.
To summarize, the best results are obtained with our set constraint model, with SCESBC
UP
when the pre-treatment is applied, or predominantly with SCESBM
UP when the pre-treatment is
343

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

SCESBM
UP

SCESBC
UP

SCESBC

SCEUP

SCESBM

SCE

TMESB

TME

SCESBC
UP

SCESBM
UP

SCEUP

SCESBC

SCE

0.01
0.28
0.03
0.07
0.09
0.98
0.13
0.24
0.68
-

TMESB

0.01
1.79
0.03
0.05
0.08
0.56
0.11
0.14
2.62
-

TME

with SatElite
without SatElite
5-3-6
8.92 0.69 0.18 0.06 0.12 0.12 0.07 0.04
9.37 0.30 1.05 0.01 0.01 0.26
5-3-7 98.28 13.37 1.42 0.13 1.21 5.09 0.09 0.08 97.47 24.86 9.19 0.06 0.13 5.67
8-4-4
1.04 1.33 0.97 0.32 1.19 0.90 0.29 0.27
0.05 0.23 0.09 0.03 0.07 0.07
8-4-5
2.26 2.64 1.93 0.86 2.51 1.89 0.84 0.78
0.08 0.58 0.13 0.06 0.11 0.06
8-4-6
4.44 5.16 3.65 1.87 4.74 3.65 1.82 1.71
0.25 3.58 0.27 0.14 0.18 0.19
8-4-7 34.25 94.68 8.66 3.59 8.52 7.52 3.64 3.46 27.05 25.88 3.53 0.48 1.71 1.94
8-4-8
8-4-9
8-4-10
9-4-6
8.45 10.52 11.24 3.15 10.34 11.10 2.71 4.58
0.23 3.72 0.37 0.13 0.29 0.25
9-4-7 13.69 27.16 18.95 5.80 17.8 19.04 5.12 8.76
0.31 6.61 0.58 0.22 0.51 0.36
9-4-8
- 31.87 11.10 29.60 31.48 12.72 14.90 247.83
- 14.66 5.03 1.10 20.93
9-4-9
9-4-10
-

Prob.

SCESBM

Table 4: Minisat Solving Time

not applied. Finally, the best results are obtained without pre-treatment.

7

Discussion and Conclusion

Modeling. Modeling a problem with set constraints and then automatically generating the
corresponding SAT instances is much simpler than writing direct encodings. Breaking symmetries is rather tedious in direct encodings, very easy by adding constraints in the set model,
and rather easy by modifying the set model. Using a higher level language is thus beneﬁcial to
the modeling phase: it simpliﬁes the task, and avoid making errors (mainly in the numerous
indices required by a direct encoding). The SAT encoding is then automatically done.
SAT Instances The SAT instances that are automatically produced by our encoding are of
good quality: 1) they always produce signiﬁcantly less clauses (with or without symmetry
breaking, and with or without unit propagation); 2) with unit propagation, they also generate
less variables; and 3) they are solved faster with Minisat, without ”tuning parameters”, with
or without pre-treatment with SatElite.
Symmetry breaking Breaking symmetries by adding constraint to the set model is very
simple. Moreover, the generated SAT instances after unit-propagation are much smaller, and
the solving time is also improved. Symmetry breaking by modifying the model is even more
beneﬁcial, however, the eﬀort is more important. This extra work is very beneﬁcial for the size
of the generated SAT instances, but not so much worth for the solving time (it depends on
instances, and pre-treatment). Thus, one has to make the trade-oﬀ between solving time and
modeling time. Instance size can be the deciding factor: larger problems can be modeled and
generated introducing symmetry breaking into the model as in SCESBM .
Set constraints In terms of sets, the expressiveness of systems such as [1]) is more or less the
same as the one we propose: that was our goal. The advantage of [11] or [1] is that sets can be
mixed with other constraints. In the future, we also plan to encode other types of constraints.
In systems such as [11] or [1], a special solver has to be designed (e.g., a domain reduction phase
interleaved with search). [2] compares set constraint solvers for the SGP: most of the results are
obtained with special (dynamic) search heuristics orl solving mechanisms. Our approach is very
diﬀerent: we do not want to design a special solver, nor to tune an existing one for eﬃciently
solving our SAT instances; we want to transform a high level set model into a ”good” quality
SAT instance that is eﬃciently solved by an existing multi-purpose SAT solver. In terms of
344

Expressively Modeling the Social Golfer Problem in SAT

Lardeux, Monfroy

computing time, the 5-3-6 instance of the same set model of the SGP is not solved before the
time-out (300s.) with the standard solver of [1] whereas it takes less that 1s. in Minisat.
Conclusion We have presented a technique for encoding set constraints into SAT: the modeling
process is done with some expressive set constraints which are then automatically encoded into
SAT instances using our ⇔enc rules. This technique has been applied successfully to the Social
Golfer Problem, and to study some symmetry breaking on this problem. The advantages of our
technique are the following: 1) the modeling process is expressive, declarative, and readable.
Moreover, it is solver independent and independent from CSP or SAT; 2) the technique is
less error-prone than direct SAT encodings; 3) symmetries can be broken by just adding new
constraints or by reﬁning the model; 4) the SAT instances which are automatically generated are
smaller than the ones of [13]; with unit propagation, our instances also contain less variables
than the ones of [13]; 5) ﬁnally, with respect to solving time, our automatically generated
instances of the Social Golfer Problem are solved faster with or without unit propagation, with
or without constraint breaking, with or without the SatElite pre-treatment. We have also
modeled and solved other problems (such as car-sequencing). We obtained very readable and
simple set models. The generated SAT instances also appeared to be well-suited for Minisat.
We plan to reﬁne the notion of supports and integrate a pre-process to reduce them. This
does not have any impact on the SGP, but for many problems (in which supports are not clear
at the principle), it is important to reduce supports before generating SAT instances.

References
[1] Minizinc. http://www.minizinc.org/.
[2] F. Azevedo. An attempt to dynamically break symmetries in the social golfers problem. In CSCLP,
pages 33–47, 2006.
[3] F. Bacchus. Gac via unit propagation. In Proc. of CP 2007, volume 4741 of LNCS, pages 133–147.
Springer, 2007.
[4] O. Bailleux and Y. Boufkhad. Eﬃcient cnf encoding of boolean cardinality constraints. In Proc.
of CP 2003, volume 2833, pages 108–122. Springer, 2003.
[5] C. Bessi`ere, E. Hebrard, and T. Walsh. Local consistencies in sat. In Selected Revised Papers of
SAT 2003., volume 2919 of LNCS, pages 299–314. Springer, 2004.
[6] J. M. Crawford, M. L. Ginsberg, E. M. Luks, and A. Roy. Symmetry-breaking predicates for
search problems. In Proc. of KR’96, pages 148–159. Morgan Kaufmann, 1996.
[7] N. E´en and A. Biere. Eﬀective preprocessing in sat through variable and clause elimination. In
SAT 2005, volume 3569, pages 61–75, 2005.
[8] N. E´en and N. S¨
orensson. An extensible sat-solver. In SAT 2003, volume 2919, pages 502–518,
2003.
[9] P. Flener, A. M. Frisch, B. Hnich, Z. Kiziltan, I. Miguel, J. Pearson, and T. Walsh. Breaking row
and column symmetries in matrix models. In CP 2002, volume 2470, pages 462–476. Springer,
2002.
[10] I. Gent and I. Lynce. A sat encoding for the social golfer problem. In IJCAI05 workshop on
modelling and solving problems with constraints, 2005.
[11] C. Gervet. Conjunto: Constraint propagation over set constraints with ﬁnite set domain variables.
In Proc. of ICLP’94, page 733. MIT Press, 1994.
[12] F. Rossi, T. P. van Beek, and Walsh, editors. Handbook of Constraint Programming. Elsevier,
2006.
[13] M. Triska and N. Musliu. An improved sat formulation for the social golfer problem. Annals of
Operations Research, 194(1):427–438, 2012.

345

