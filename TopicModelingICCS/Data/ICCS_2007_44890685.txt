Pushing Frequency Constraint to Utility Mining Model
Jing Wang, Ying Liu, Lin Zhou, Yong Shi, and Xingquan Zhu
Data Technology and Knowledge Economy Research Center, Chinese Academy of Sciences
Graduate University of Chinese Academy of Sciences
Beijing, China 100080
{jingw04, zhoulin05}@mails.gucas.ac.cn,
{yingliu, yshi}@gucas.ac.cn, xqzhu@cse.fau.edu

Abstract. Traditional association rules mining (ARM) only concerns the
frequency of itemsets, which may not bring large amount of profit. Utility mining
only focuses on itemsets with high utilities, but the number of rich-enough
customers is limited. To overcome the weakness of the two models, we propose a
novel model, called general utility mining, which takes both frequency and utility
into consideration simultaneously. By adjusting the weight of the frequency
factor or the utility factor, this model can meet the different preferences of
different applications. It is flexible and practicable in a broad range of
applications. We evaluate our proposed model on a real-world database.
Experimental results demonstrate that the mining results are valuable in business
decision making.
Keywords: general utility, utility mining, association rules mining, weighted
association rules mining.

1 Introduction
Traditional association rules mining (ARM) [2] is to identify frequently occurring
patterns of itemsets. ARM model treats all the items in the database equally by only
considering if an item is present in a transaction or not. However, frequent itemsets may
only contribute a small portion of the overall profit to the business and generate huge
amount of inventory cost, labor cost, transportation cost.
In order to overcome the weakness of traditional association rules mining, utility
mining model was proposed in [3]. Intuitively, utility is a quantitative measure of how
“useful” (i. e. “profitable”) an itemset is. The definition of utility of an itemset X, u(X),
is the sum of the utilities of X in all the transactions containing X.
Can we have a more general model which takes both frequency and utility into
consideration simultaneously?
We propose a general utility mining model which is a linear combination of utility
and frequency gu(X): λ sup ( X ) + (1 − λ ) u ( X ) , where sup ( X ) denotes the
S

U

S

frequency of itemset X in the database, u ( X ) denotes the fraction of the utility of
U

itemset X out of total utility, λ is the weight of frequency, and (1-λ) is the weight of
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 685–692, 2007.
© Springer-Verlag Berlin Heidelberg 2007

686

J. Wang et al.

utility. A user specified threshold ε is used to measure the “usefulness” of itemset X.
High utility itemsets with low supports may be filtered out by our model; popular
itemsets that generate very low utility may also be filtered out.
Table 1 is an example transaction database where the total utility is 400. The number
in each transaction in Table 1(a) is the sales volume of each item, and the subjective
value of each item is listed in Table 1(b). For instance, let’s set ε=15% and λ=0,
gu({B,C,E}) = 0.18 > ε, {B,C,E} is a high utility itemset. Although {B,C,E} generates
$72 profit, it occurs only once in the database, which may potentially incur
overstocking problem. If we set λ=0.4, gu({B,C,E}) = 0.148 < ε, thus {B,C,E} is not
interesting to the marketing professionals.
Table 1. A transaction database
(a) Transaction table.

(c)The support and profit for all itemsets
Item- Supp
Profit Itemsets Supp
sets
-ort
($)
-ort

Profit
($)

ITEM
TID
T1

A

B

C

D

E

A

5

24

BE

3

240

0

0

18

0

1

B

5

240

CD

1

43

T2

0

6

0

1

1

C

5

50

CE

5

85

T3

2

0

1

0

1

D

4

36

DE

4

56

T4

1

0

0

1

1

E

4

50

ACD

1

52

T5

0

0

4

0

2

AB

2

26

ACE

2

51

T6

1

1

0

0

0

AC

2

41

ADE

2

46

T7

0

10

0

1

1

AD

2

36

BCE

1

72

T8

3

0

25

3

1

T9

1

1

0

0

0

AE
BC

3
1

33
62

BDE
CDE

2
1

182
48

T10

0

6

2

0

2

BD

2

172

ACDE

1

57

(b) Subjective value table. The right
column displays the profit of each
item per unit in dollars.
ITEM PROFIT ($)(per unit)
A

3

B

10

C

1

D

6

E

5

(d)Transaction utility (TU) of
the transaction database.
TID TU TID TU
T1

23

T6

13

T2

71

T7

111

T3

12

T8

57

T4

14

T9

13

T5

14

T10

72

The difficulty of general utility mining is that the model does not follow “downward
closure property” (anti-monotone property), that is, a high general utility itemset may
consist of some low general utility sub-itemsets. Without this property, the number of
candidates generated at each level increases exponentially. We push the frequency
factor into Two-Phase algorithm proposed in [1], which maintains a
Transaction-weighted Downward Closure Property. We apply our proposed general

Pushing Frequency Constraint to Utility Mining Model

687

utility mining model on a real world database and the observations demonstrate the
significance of general utility mining.
The rest of this paper is organized as follows. Section 2 overviews the related work.
In Section 3, we introduce the technical terms in utility mining model. In Section 4, we
propose the general utility mining model. Section 5 presents the experimental results
and we summarize our work in Section 6.

2 Related Work
A number of ARM algorithms and optimizations have been proposed in the past ten
years. The common assumption is that each item in a database is equal in weight and
the sales quantity is 0 or 1. These algorithms exploit the “downward closure property”
as disclosed in Apriori [2] (all subsets of a frequent itemset must be frequent).
Researches that assign different weights to items have been proposed in [4, 5, 6, 7].
These weighted ARM models are special cases of utility mining.
A utility mining algorithm is proposed in [9], which captures the semantic
significance of itemsets at the transaction level. It focuses on mining the top-K high
utility closed patterns that directly support a given business objective.
An alternative formal definition of utility mining and theoretical model was
proposed in [3], where the utility is defined as the combination of objective information
in each transaction and additional resources. Since this model cannot rely on
“downward closure property” to restrict the number of itemsets to be examined, a
heuristic is used to predict whether an itemset should be added to the candidate set.
An efficient utility mining algorithm, Two-Phase algorithm is proposed in [1]. It
proposes the concept of “transaction-weighted utilization” and maintains
“Transaction-weighted Downward Closure Property”. Two-Phase algorithm finds out
itemsets with high transaction-weighted utilization first, and then find out itemsets with
high utility. It is scalable and the memory cost as well as the computation cost is
efficiently reduced.

3 Utility Mining
We start with the definition of a set of terms that leads to the formal definition of utility
mining problem. The same terms are given in [1].
•
•
•
•
•

I = {i1, i2, …, im} is a set of items.
D = {T1, T2, …, Tn} is a transaction database where each transaction Ti ∈ D is a
subset of I.
o(ip, Tq), objective value, represents the value of item ip in transaction Tq.
s(ip), subjective value, is the specific value assigned by a user to express the user’s
preference.
u(ip, Tq), utility of an item ip in transaction Tq,, is defined as o(ip, Tq ) × s (ip ) .

688

•

J. Wang et al.

u(X, Tq), utility of an itemset X in transaction Tq, is defined as

∑ u(i ,T ) , where X
p

q

ip∈X

•

= {i1, i2, …, ik} is a k-itemset, X ⊆ Tq and 1≤ k≤ m.
u(X), utility of an itemset X, is defined as
u ( X , Tq ) .

∑

Tq ∈D ∧ X ⊆Tq

•

tu(Tq), the transaction utility of transaction Tq, is the sum of the utilities of all the
items in Tq: tu (T ) =
u (i , T ) .
q

∑

p

q

i p ∈Tq

•

twu(X), the transaction-weighted utilization of an itemset X, is the sum of the
transaction utilities of all the transactions containing X: twu ( X ) =
∑ tu (Tq ) .

•

sup(X), the support count of an itemset X, is the count of all the transactions
containing X.
U the total utility of all the transactions: U =
∑ tu (Tq) .

X ⊆ Tq ∈ D

•

，

Tq∈D

•

S, the total number of transactions.

X is a high utility itemset if u(X) ≥ ε, where X ⊆ I and ε is the minimum utility
threshold, otherwise, it is a low utility itemset. For example u({A, D, E}) = u({A, D,
E}, T4) + u({A, D, E}, T8) = 46. If ε = 120, {A, D, E} is a low utility itemset.

4 General Utility Mining
In order to push frequency into utility mining model, we propose a general utility
mining model which combines both frequency and utility linearly. We define General
Utility and General Transaction Utility, and propose an extension to the Two-Phase
algorithm in [1]. In addition, we discuss the universality and flexibility of this model.
4.1 Definitions and Theorems
Definition 1. (General Utility) The General Utility of itemset X, denoted as gu(X), is
the linear combination of frequency and utility:
gu(X)= λ sup ( X ) + (1 − λ ) u ( X ) (3.1)

（

S

U

）

where λ 0 ≤ λ ≤ 1 is the weight assigned by users to adjust the contribution of
frequency and utility. As sup(X) ≤ S, u(X) ≤ U, 0 ≤ sup( X ) ≤ 1, 0 ≤ u ( X ) ≤ 1, so 0 ≤
U

S

gu(X) ≤ 1.

Definition 2. (High General Utility Itemset) For a given itemset X, X is a high general
utility itemset if gu(X) ≥ ε where ε (0 ≤ ε ≤ 1) is the minimum threshold.

，

Definition 3. (General Transaction-weighted Utilization) The general transaction
-weighted utilization of itemset X, denoted as tgu(X), is the combination of transaction
-weighted utilization and frequency: tgu(X)= λ sup ( X ) + (1 − λ ) twu ( X ) (3.2)
S

U

Pushing Frequency Constraint to Utility Mining Model

689

Definition 4. (High General Transaction-weighted Utilization Itemset) For a given
itemset X, X is a high general transaction-weighted utilization itemset if tgu(X) ≥ ε’
where ε’ (0 ≤ ε’ ≤1) is the minimum threshold.

，

Theorem 1. (General Transaction-weighted Downward Closure Property) Let Ik
be a k-itemset and Ik-1 be a (k-1)-itemset such that Ik-1 ⊂ Ik. If Ik is a high general
transaction-weighted utilization itemset, Ik-1 must be a high general
transaction-weighted utilization itemset.
Proof: Let T I k be the collection of the transactions containing Ik and T I k −1 be the
collection containing Ik-1. Since Ik-1 ⊂ Ik, T I k −1 is a superset of T I k . According to
twu( I k −1 ) =

∑ tu(T ) ≥ ∑ tu(T ) = twu( I
q

I k −1 ⊆Tq∈D

p

k

)

I k ⊆Tp∈D

definition of twu(X) and tu(X),
. And the
itemsets that contain Ik must contain Ik-1, so sup(Ik-1) ≥ sup(Ik). Thus we can get
k −1
k −1
k
k
tgu(Ik-1)= λ sup ( I ) + (1 − λ ) twu ( I ) ≥ λ sup ( I ) + (1 − λ ) twu ( I ) =tgu(Ik) ≥ ε’.
S

U

S

U

The General Transaction-weighted Downward Closure Property indicates that only
the combinations of high general transaction-weighted utilization (k-1)-itemsets could
be added into the candidate set Ck at each level.
Theorem 2. Let HGTWU be the collection of all high general transaction-weighted
utilization itemsets in a transaction database D, and HGU be the collection of high
general utility itemsets in D. If ε’= ε, then HGU ⊆ HGTWU.
Proof: ∀X ∈ HGU, if X is a high general utility itemset, then

∑ u ( X , Tq )
u( X )
sup( X )
sup( X )
X ⊆ Tq
+ (1 − λ )
=λ
+ (1 − λ )
S
U
S
U
u
i
T
u
(
,
)
(
∑ ∑ p q
∑ ∑ i p , Tq )
sup( X )
sup( X )
X ⊆ Tq i p ∈ X
X ⊆Tq i p ∈Tq
=λ
+ (1 − λ )
≤λ
+ (1 − λ )
S
U
S
U
twu ( X )
sup( X )
=λ
+ (1 − λ )
= tgu ( X )
S
U

ε ' = ε ≤ gu ( X ) = λ

Thus, X is a high general transaction-weighted utilization itemset and X ∈HGTWU.
4.2 Two-Phase Algorithm
According to the above two theorems, we can utilize the General Transaction-weighted
Downward Closure Property in general transaction-weighted utilization mining in
Phase I, assuming ε’ = ε, and prune those overestimated itemsets in Phase II. (Note we
use the new term transaction-weighted utilization to distinguish it from utility. The
focus of this paper is not to propose this term, but to utilize the property of
transaction-weighted utilization to help reduce the searching space in general utility
mining.)
Phase I
Let’s use the sample database in Table 1 to show how general transaction-weighted
utilization mining model works. Assume the transaction-weighted utilization threshold

690

J. Wang et al.

ε’ =0.4 and λ=0.5. At level 1, HGTWU1 ={{B}, {C}, {D}, {E}} and C2 ={{B, C}, {B,
D}, {B, E}, {C, D}, {C, E}, {D, E}}. After the second scan of database, tgu ({B, C})
=0.24<ε’, tgu ({B, D}) =0.3275<ε’, tgu({B, E})=0.4675, tgu ({C, D}) = =0.12125 < ε’,
tgu ({C, E}) = 0.4725 and tgu ({D, E}) = 0.51625. Thus, HGTWU2 ={{B, E}, {C, E},
{D, E}}, and then C3 = Φ. Candidate generation stops after the second database scan.
The efficient candidate generation process results from the General
Transaction-weighted Downward Closure Property.
Phase II
Based on Theorem 2, if we let ε’=ε, the complete set of high general utility itemsets is a
subset of the high general transaction-weighted utilization itemsets discovered in phase
I. In the above example, by scanning the database another time, we finally get high
general utility itemsets HGU = {{B}, {B, E}}. The other five itemsets obtained in
Phase I are pruned. Only three database scans are incurred in the whole process of
Phase I and II.
4.3 Model Universality and Flexibility
Traditional association rules mining (ARM) [2] and utility mining [1, 3] can be viewed
as special cases of our proposed general high utility mining model. Utility mining
focuses on zone I and IV in Figure 1. ARM focuses on zone III and IV in Figure 1. Our
general model focuses on the region above the straight line in Figure 1. The line is
actually the visualization of formula 3.1.

Utility

High

Low

I

II
Low

IV

III
High

Frequency

Fig. 1. High utility itemsets, frequent itemsets, high general utility itemsets

By adjusting λ, we can adjust the impact of frequency and utility in general utility. In
Figure 1, when λ increases, frequency becomes more important in the application. When
λ is 1, our model is the traditional association rules mining model. When λ decreases,
utility becomes more important. When λ is 0, it is the utility mining model. By assigning
different λ, users can mine different “useful” itemsets according to their own demands.
For example, we set ε=0.4. When λ=0.2, u({B,E})=240, sup({B,E})=3,
gu({B,E})=0.54>ε, {B,E} is a high general utility itemset; u({C,E})=85, sup({C,E})=5,
gu({C,E})= 0.27<ε, {C,E} is not a high general utility itemset. However, if we set

Pushing Frequency Constraint to Utility Mining Model

691

λ=0.8, gu({B,E})=0.36 < ε, it is not a high general utility itemset any more, but {C, E}
becomes a high general utility itemset since gu({C,E})= 0.4425 > ε.

5 Experimental Evaluation
We evaluate our general utility mining model by using a real-world market data from a
major grocery chain store in California, USA. It contains products of various
categories, such as food, health care, gifts, and others. There are 1,112,949 transactions
and 46,086 items in the database, and the total utility is 26,388,499.8 dollars. Each
transaction consists of the products and the sales volume of each product purchased by
a customer at a time point. The utility table describes the profit of each item. The size of
this database is 73MByte. The average transaction length is 7.2. The subjective value
table, which is the profit table, describes the profit of each product.
Table 2. Top 10 itemsets and corresponding support, utility and general utility when varying λ
(ε =0.075%)
Ȝ=0 (Utility Mining)
Utility Support
General
(%)
(%)
Utility (%)
Itemset
39171, 39688 0.2435
0.3449
0.2435
39690, 39692 0.1942
0.028
0.1942
39182, 39206 0.1714
0.016
0.1714
39143, 39182 0.1631
0.0128
0.1631
5166, 16967
0.1606
0.227
0.1606
21283, 21308 0.1572
0.315
0.1572
16967, 16977
0.157
0.7009
0.157
21308, 22900 0.1528
0.2946
0.1528
10481, 16967 0.1296
0.1461
0.1296
16967, 21738 0.1083
0.3893
0.1083

Itemset
39171, 39688
16967, 16977
39690, 39692
21283, 21308
5166, 16967
21308, 22900
39182, 39206
39143, 39182
16967, 21738
10481, 16967

Ȝ=0.1
Utility Support
General
(%)
(%)
Utility (%)
0.2435
0.3449
0.2536
0.157
0.7009
0.2114
0.1942
0.028
0.1776
0.1572
0.315
0.173
0.1606
0.227
0.1672
0.1528
0.2946
0.1669
0.1714
0.016
0.1559
0.1631
0.0128
0.1481
0.1083
0.3893
0.1364
0.1296
0.1461
0.1312

Itemset
16967, 16977
13743, 16967
16967, 16975
39430, 39432
16967, 21738
3482, 3510
16967, 16978
16967, 39684
39171, 39688
11780, 11783

Ȝ=1 (ARM)
Utility
Support
General
(%)
(%)
Utility (%)
0.157
0.7009
0.7009
0.0623
0.4967
0.4967
0.0948
0.4033
0.4033
0.031
0.399
0.399
0.1083
0.3893
0.3893
0.0763
0.382
0.382
0.06
0.3784
0.3784
0.0409
0.3733
0.3733
0.2435
0.3449
0.3449
0.0394
0.3404
0.3404

Itemset
16967, 16977
39171, 39688
13743, 16967
16967, 16975
16967, 21738
21283, 21308
3482, 3510
21308, 22900
16967, 16978
39430, 39432

Ȝ=0.5
Utility
Support
General
(%)
(%)
Utility (%)
0.157
0.7009
0.429
0.2435
0.3449
0.2942
0.0623
0.4967
0.2795
0.0948
0.4033
0.249
0.1083
0.3893
0.2488
0.1572
0.315
0.2361
0.0763
0.382
0.2292
0.1528
0.2946
0.2237
0.06
0.3784
0.2192
0.031
0.399
0.215

We compare the itemsets discovered from general utility algorithm, Apriori and
utility mining by varying the value of λ and the threshold ε. Table 2 shows the top 10
itemsets when ε=0.075%. (We only show itemsets longer than 1.) From Table 2, we can
observe different top 10 high general utility itemsets when varying λ. For example,
itemset {39690, 39692} is in the top 10 high general utility itemsets when λ=0.1
(assigning more weight to the utility factor), but left out when λ=0.5 (assigning equal

692

J. Wang et al.

weight to the utility and the frequency factor) due to its large utility 0.1942% but small
support 0.028%. Itemset {39430, 39432} (utility = 0.031%， support = 0.399%) is just
the opposite case. {21283, 21308} is in the top 10 itemsets when λ=0.5, but it is not in
the top 10 frequent itemsets. It shows that the itemsets discovered by our proposed
model are different with those by ARM or utility mining in many cases, more
emphasizing the balance between frequency and utility.

6 Conclusions
General utility mining is a generalization of association rules mining (ARM) and utility
mining. It balances the impact of frequency and utility by adjusting their weights,
respectively. ARM and utility mining are two special cases of this model. General
utility mining can overcome their weakness. It has a high universality and flexibility.
We defined a term called general utility and general transaction-weighted utilization
model which holds Transaction-weighted Downward Closure Property. We proposed
a Two-Phase algorithm that can discover high general utility itemsets highly
efficiently. A real data set from a chain grocery store was used to evaluate our proposed
model and the experimental results showed that it could find itemsets that are missed by
utility mining model and ARM. Our model can be applied in a broad range of
applications, such as, business intelligence, web log mining, etc.

Acknowledgements
This research has been partially supported by a grant from National Natural Science
Foundation of China (#70621001, #70531040, #70501030, #70472074, #60674109),
973 Project #2004CB720103, Ministry of Science and Technology, China, and BHP
Billiton Co., Australia.

References
1. Ying Liu, Wei-keng Liao and Alok Choudhary: A Fast High Utility Itemsets Mining
Algorithm. Utility-Based Data Mining Workshop with the 11th SIGKDD, 2005.
2. Agrawal and R. Srikant: Fast algorithms for mining association rules. 20th VLDB (1994)
3. Hong Yao, Howard J. Hamilton, and Cory J. Butz: A Foundational Approach to Mining
Itemset Utilities from Databases. SDM (2004)
4. C.H. Cai, Ada W.C. Fu, C.H. Cheng, and W.W. Kwong: Mining Association Rules with
Weighted Items. IDEAS (1998)
5. W. Wang, J. Yang, and P. Yu: Efficient Mining of Weighted Association Rules (WAR).
6th KDD (2000)
6. Feng Tao, Fionn Murtagh, and Mohsen Farid: Weighted Association Rule Mining using
Weighted Support and Significance Framework. 9th KDD (2003)
7. S. Lu, H. Hu, and F. Li: Mining weighted association rules. Intelligent Data Analysis, 5(3)
(2001), 211-225
8. B. Barber and H.J.Hamilton: Extracting share frequent itemsets with infrequent subsets.
Data Mining and Knowledge Discovery, 7(2) (2003), 153-185
9. Raymond Chan, Qiang Yang, Yi-Dong Shen: Mining high utility Itemsets. ICDM (2003)
10. IBM data generator, http://www.almaden.ibm.com/software/quest/Resources/index.shtml

