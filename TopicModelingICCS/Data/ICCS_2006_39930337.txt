Eﬃcient Application of Hybrid 150/90 Cellular
Automata to Symmetric Cryptography
A. F´
uster-Sabater1, P. Caballero-Gil2 , and M.E. Pazo-Robles1
1

Instituto de F´ısica Aplicada, C.S.I.C.
Serrano 144, 28006 Madrid, Spain
amparo@iec.csic.es
2
DEIOC, University of La Laguna
38271 La Laguna, Tenerife, Spain
pcaballe@ull.es

Abstract. In this work, it is shown that a wide class of nonlinear sequence generators, the so called interleaved sequence generators, can be
modelled in terms of linear cellular automata. A simple modelling procedure based on the concatenation of automata has been derived. The
cryptographic characteristics of the generated sequences (period, linear
complexity, number of diﬀerent sequences) have been also analyzed. The
technique is very simple and can be applied to generators in a range of
practical applications.
Keywords: Linear automata, sequence generator, symmetric cryptography.

1

Introduction

Sensitive information to be transmitted or stored requires certain characteristics
of conﬁdentiality. Such a quality makes use of an encryption function currently
called cipher that converts the plaintext into the ciphertext. Symmetric cryptography are usually divided into two large classes: stream ciphers and blockciphers. Stream ciphers are the fastest among the encryption procedures so they
are implemented in many technological applications e.g. algorithms A5 in GSM
communications [8] or the encryption system E0 used in the Bluetooth speciﬁcations [1]. Stream ciphers try to imitate the ultimate one-time pad cipher and
are designed to stretch a short secret seed (the secret key) into a long sequence
(keystream) of seemingly random bits. This keystream is then XORed with the
plaintext in order to obtain the ciphertext. Most keystream generators are based
on Linear Feedback Shift Registers (LFSRs) [6] combined in a nonlinear way.
Such generators produce keystreams with high linear complexity, long period
and good statistical properties.
On the other hand, bit sequences generated by one-dimensional binary Cellular Automata (CA) with three site neighborhood and linear transition rules
Work supported by Ministerio de Educaci´
on y Ciencia (Spain) Projects SEG200402418 and SEG2004-04352-C04-03.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 337–344, 2006.
c Springer-Verlag Berlin Heidelberg 2006

338

A. F´
uster-Sabater, P. Caballero-Gil, and M.E. Pazo-Robles

[2] have been found to be isomorphic to conventional LFSRs. Thus, the latter
structures can be simply substituted by the former ones in order to accomplish
the same goal: generation of keystreams with application in symmetric cryptography. Nevertheless, the main advantage of these CA is that multiple generators
designed in terms of LFSRs as nonlinear structures preserve the linearity when
they are expressed under the form of CA.
The question that arises in a natural way is: are there one-dimensional linear CA able to produce the sequence obtained from any LFSR-based nonlinear
generator? The answer is yes and, in fact, this paper stresses the problem of
given a particular LFSR-based generator how to ﬁnd one-dimensional CA that
reproduce exactly their output sequences. More precisely, in this work it is shown
that a wide class of LFSR-based nonlinear generators, the so called interleaved
sequence generators, can be modelled in terms of linear CA. Among this class
of generators we can enumerate: Clock-Controlled generators, Cascade-ClockControlled generators, Shrinking generator or the generators producing Kasami
sequences, GMW sequences, No sequences, Klapper et al. sequences ... (see [7]).
Interleaved sequences [7] satisfy a common property: they can be decomposed
into a collection of shifts of an unique PN -sequence and zero sequences. This
kind of sequences can be obtained from linear multiplicative polynomial CA.
That is to say, CA made out of a basic structure concatenated a number of
times. Therefore, the goal of this work is double:
– To analyze linear multiplicative polynomial CA with emphasis on the cryptographic parameters of their generated sequences (period, linear complexity,
characteristic polynomial, number of diﬀerent output sequences etc. ).
– To model the above nonlinear LFSR-based generators in terms of linear
multiplicative polynomial CA.
Once the generators have been linearized, all the theoretical background on
linear CA can be applied to their analysis and/or cryptanalysis.

2

Fundamentals and Basic Notation

Our attention is concentrated on one-dimensional binary hybrid linear CA with
three neighborhood sites and rules 90 and 150. Both rules can be deﬁned as
follows:
Rule 90
+ xk+1
xkn+1 = xk−1
n
n

Rule 150
xkn+1 = xk−1
+ xkn + xk+1
n
n

Indeed, xkn+1 the content of the k-th cell at time n + 1 depends on the content
of either two diﬀerent cells (rule 90) or three diﬀerent cells (rule 150) at time
n, for (k = 1, ..., L) where L is the length of the automaton. A natural form of
automaton representation is an L-tuple Δ = (d1 , d2 , ..., dL ) where dk = 0 if the
k-th cell veriﬁes rule 90 while dk = 1 if the k-th cell k veriﬁes rule 150.
For an one-dimensional null hybrid cellular automaton of length L = 10 cells,
conﬁguration rules ( 90, 150, 150, 150, 90, 90, 150, 150, 150, 90 ) and initial state

Eﬃcient Application of Hybrid 150/90 Cellular Automata

339

Table 1. An one-dimensional null hybrid linear cellular automaton of 10 cells with
rule 90 and rule 150 starting at a given initial state
90

150

150

150

90

90

150

150

150

90

0
0
0
1
0
0
0
1
0
1
..
.

0
0
1
0
0
0
1
0
1
0
..
.

0
1
1
1
0
1
1
0
1
1
..
.

1
0
1
1
1
0
0
1
1
1
..
.

1
0
1
1
1
1
0
0
1
0
..
.

1
1
0
0
0
0
0
0
1
1
..
.

0
0
1
1
1
1
0
1
0
1
..
.

1
0
0
0
0
1
1
1
0
1
..
.

1
0
1
1
0
1
0
0
1
1
..
.

0
1
0
1
1
0
1
0
0
1
..
.

(0, 0, 0, 1, 1, 1, 0, 1, 1, 0), Table 1 illustrates the formation of its output sequences
(binary sequences read vertically) and the succession of states (binary conﬁgurations of 10 bits read horizontally). For the previous rules, the diﬀerent states
of the automaton are grouped in closed cycles [5] as well as any output sequence
can be generated at any cell provided that the right state cycle is chosen.
Next, some important deﬁnitions are introduced.
Deﬁnition 1. A Multiplicative Polynomial Cellular Automaton is defined as
a cellular automaton whose characteristic polynomial is of the form PM (X) =
(P (X))p where p is a positive integer. If P (X) is a primitive polynomial, then the
automaton is called a Primitive Multiplicative Polynomial Cellular Automaton.
A widely accepted measure of the unpredictability of a sequence is its linear
complexity [9] that can be deﬁned as follows:
Deﬁnition 2. The linear complexity of a sequence is the shorter linear recursion
satisfied by such a sequence.
For a binary sequence {xn }, the linear recurrence relationship that speciﬁes the
n-th element as a combination of the r previous ones can be written:
r

xn +

ci xn−i = 0,

n≥r

(1)

i=1

where the sequence elements (xn ) as well as the coeﬃcients (ci ) belong to a
ﬁnite ﬁeld, GF (2). The linear recursion can be expressed as a linear diﬀerence
equation:
(E r +

r

i=1

ci E r−i ) xn = 0,

n≥0

(2)

340

A. F´
uster-Sabater, P. Caballero-Gil, and M.E. Pazo-Robles

where E is the shifting operator that operates on xn , i.e. Exn = xn+1 . The
characteristic polynomial of the diﬀerence equation (2) is:
P (X) = X r +

r

ci X r−i .

(3)

i=1

Let P (X) be a primitive polynomial of degree r and α ∈ GF (2r ) one of its
roots. In this case [9],
2
(r−1)
(4)
α, α2 , α2 , . . . , α2
are the r roots of such a polynomial. If PM (X) = (P (X))p , then the roots of
PM (X) will be the same as those of P (X) but with multiplicity p. Consequently,
all the binary sequences generated by a primitive multiplicative polynomial cellular automaton will satisfy the linear diﬀerence equation:
(E r +

r

ci E r−i )p xn = 0,

n ≥ 0.

(5)

i=1

Our analysis focuses on all the possible solutions {xn } of this equation. For a
particular sequence generated at the k-th cell, the notation will be {xkn }.

3

Cryptographic Properties of Multiplicative Polynomial
CA

In this section, the characteristics of the sequences obtained from this kind of
CA are considered in terms of their cryptographic parameters.
3.1

Period of the Generated Sequences

The solutions of the equation (5) are linear combinations of p · r solutions of the
form:
p−1

xn =

(
i=0

where Sni =

r−1
j=0

j

j

A2i α2

n

n
i

r−1

j

j

A2i α2 n ),

(6)

j=0

represents the n-th element of a PN -sequence [9] of

period 2r −1 where Ai ∈ GF (2r ). Thus, the binary sequence {xn } can be written
as the sum of p times the same PN -sequence weighted by a binomial coeﬃcient
p−1

{xn } =
i=0

n
i

{Sni }.

(7)

In addition, each binomial coeﬃcient deﬁnes a succession of binary values with
a constant period pi . Therefore, the sequence {xn } is the sum of p sequences of
distinct periods Ti = pi · (2r − 1) and the period of the total sequence will be:
T = max{Ti / Ai = 0 (i = 0, . . . , p − 1)}.

(8)

Eﬃcient Application of Hybrid 150/90 Cellular Automata

341

It can be noticed that the period of the diﬀerent sequences {xn } generated
by a multiplicative polynomial cellular automaton depends on the choice of the
coeﬃcients Ai in the equation (6). All sequences generated at the same state cycle
have the same period. Nevertheless, the same automaton can produce sequences
with distinct periods depending on the state cycle considered.
3.2

Linear Complexity of the Generated Sequences

According to [9], the linear complexity of a sequence equals the number and multiplicity of characteristic polynomial roots that appears in the linear recurrence
relationship. Therefore, coming back to the equation (6), the linear complexity
of {xn } can be computed. In fact, we have r roots each of them with multiplicity
p. Thus, if imax is the greatest value of i (i = 0, . . . , p − 1) for which Ai = 0,
then the linear complexity LC of the sequence {xn } will be:
LC = (imax + 1) · r .

(9)

It can be noticed that the linear complexity of the diﬀerent sequences {xn }
generated by a multiplicative polynomial cellular automaton depends on the
choice of the coeﬃcients Ai in (6). All sequences generated at the same state
cycle have the same linear complexity. Nevertheless, the same automaton can
produce sequences with distinct linear complexities depending on the state cycle
considered.
3.3

The Number of Diﬀerent Generated Sequences

In order to count the number of diﬀerent sequences {xn } generated, the choice
of the coeﬃcients Ai in the equation (6) must be considered. Diﬀerent situations
can take place:
– If Ai = 0 ∀ i, then all the cells of the cellular automaton will generate the
identically null sequence.
– If A0 = 0 and Ai = 0 ∀ i > 0, then all the cells of the cellular automaton will
generate a unique PN -sequence {Sn0 } of period T0 = 2r −1 and characteristic
polynomial P (X).
– If A0 ∈ GF (2r ), A1 = 0 and Ai = 0 ∀ i > 1, then there will be 2r · (2r − 1)
possible choices of (A0 , A1 ). According to subsection 3.1, the period of these
sequences will be T1 = p1 · (2r − 1). Thus, the number of diﬀerent sequences
for these values of Ai is:
N1 =

2r · (2r − 1)
= 2r−1 .
p1 · (2r − 1)

(10)

– In general, if A0 , A1 , . . . , Ai−1 ∈ GF (2r ), Ai = 0 and Aj = 0 ∀ j > i, then
there will be 2(i r) · (2r − 1) possible choices of (A0 , A1 , . . . , Ai ). According
to subsection (3.1), the period of these sequences will be Ti = pi · (2r − 1).
Thus, the number of diﬀerent sequences for these values of Ai is:
Ni =

2(i r) · (2r − 1)
2(i r)
=
.
Ti
pi

(11)

342

A. F´
uster-Sabater, P. Caballero-Gil, and M.E. Pazo-Robles

The total number of diﬀerent sequences obtained from a multiplicative polynomial cellular automaton will be:
p−1

Ntotal =

Ni .

(12)

i=0

The null sequence is excluded.

4

Constructing Keystream Generators by Concatenation
of Primitive CA

In the previous section, structural properties of the sequences obtained from
multiplicative polynomial cellular automata have been considered. Now the particular form of these automata is analyzed. Since the characteristic polynomial
of such automata is PM (X) = (P (X))p , it seems quite natural to construct
a multiplicative polynomial cellular automaton by concatenating p times the
automaton whose characteristic polynomial is P (X). The procedure of concatenation is based on the following result.
Lemma 1. Let Δ = (d1 , d2 , ..., dk ) be the representation of an one-dimensional
binary hybrid linear cellular automaton with k cells and characteristic polynomial
Pk (X) = (X + d1 )(X + d2 )...(X + dk ). The cellular automaton whose characteristic polynomial is P2k (X) = (Pk (X))2 is represented by:
Δ = (d1 , d2 , ..., dk , dk , ..., d2 , d1 ).

(13)

Sketch of proof. The result follows from the fact that [2]:
Pk (X) = Pk (X) + Pk−1 (X)
where Pk (X) is the polynomial corresponding to Δ = (d1 , d2 , ..., dk ). In the same
way
Pk+1 (X) = (X + dk )Pk (X) + Pk (X)
Pk+2 (X) = (X + dk−1 )Pk+1 (X) + Pk (X)
..
.

..
.

P2k (X) = (X + d1 )P2k−1 (X) + P2k−2 (X).
Thus, by successive substitutions of the previous polynomial into the next one
we get:
P2k (X) = (X + d1 )P2k−1 (X) + P2k−2 (X) = (Pk (X))2 .
✷
In this way, the construction of a linear model based on CA is carried out by
the following algorithm:

Eﬃcient Application of Hybrid 150/90 Cellular Automata

343

Input: The parameters of a nonlinear interleaved sequence generator.
– Step 1: Determine the irreducible factor P (X) of the characteristic polynomial of the interleaved sequence.
– Step 2: Compute the pair of basic CA [2] whose characteristic polynomial is
the irreducible factor P (X).
– Step 3: For each one of these basic CA, construct by successive concatenations the longer cellular automaton able to generate the original interleaved
sequence.
Output: Two linear CA producing the corresponding interleaved sequence.
Let us see a simple example of application. The shrinking generator [4] is a typical example of cryptographic generator with characteristic polynomial PM (X).
The characteristics of this generator can be summarized as follows: The generator is made of two LFSRs, SR1 and SR2, with lengths Lj (j = 1, 2) and
feedback polynomials Pj (X)(j = 1, 2), respectively. The decimation rule is: the
bit produced by SR2 is discarded if the corresponding bit of SR1 equals 0. The
decimated sequence is just the output sequence of the generator. The generator characteristic polynomial is of the form PM (X) = (P (X))p , P (X) being a
primitive polynomial of degree r = L2 and 2(L1 −2) < p ≤ 2(L1 −1) . Moreover,
P (X) is the characteristic polynomial of the cyclotomic coset E in GF (2L2 ) with
E = 20 + 21 + . . . + 2L1 −1 , see ([6]).
The output sequence will be a solution of a linear diﬀerence equation corresponding to primitive multiplicative polynomial CA. Consequently, the shrinking
generator can be expressed in terms of a linear model based on CA. A numerical
example illustrates the modelling procedure.
Input: A shrinking generator characterized by two LFSRs of lengths L1 = 3,
L2 = 5 respectively and characteristic polynomial P2 (X) = X 5 +X 4 +X 3 +X +1.
Now, p = 2L1 −1 = 4 and r = L2 = 5.
Step 1: P (X) the irreducible factor of the generator characteristic polynomial is:
P (X) = X 5 + X 3 + 1 .
Step 2: The pair of basic CA whose characteristic polynomial is P (X) are:
01100
00110
Step 3: Computation of the required pair of CA by successive concatenations.
For the ﬁrst automaton:
01100
0110110110
0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 0 (ﬁnal automaton)
For the second automaton:
00110
0011111100
0 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 0 (ﬁnal automaton)

344

A. F´
uster-Sabater, P. Caballero-Gil, and M.E. Pazo-Robles

For each automaton, the procedure in Step 3 has been carried out L1 − 1
times. In fact, each basic complemented automaton has been concatenated
p = 2L1 −1 times.
Output: Two binary strings codifying the required CA.
In this way, we have obtained a pair of linear CA able to produce, among other
sequences, the interleaved sequence corresponding to the given shrinking generator. Analogous procedure applies for any of the keystream generators mentioned
in section 1.

5

Conclusions

In this work, cryptographic properties of the primitive multiplicative polynomial
CA have been analyzed. It is shown that a wide class of LFSR-based sequence
generators (interleaved sequence generators) can be described in terms of CAbased structures. In this way, sequence generators conceived and designed as
complex nonlinear models can be written in terms of simple linear models. The
linearity of these cellular models can be advantageously used in the analysis
and/or cryptanalysis of such cryptographic generators.

References
1. Bluetooth, Specifications of the Bluetooth system, Version 1.1, February 2001, available at http://www.bluetooth.com/
2. K. Cattell et al. Synthesis of One-Dimensional Linear Hybrid Cellular Automata,
IEEE Trans. Computers-Aided Design, Vol. 15, No. 3, pp. 325-335, 1996.
3. S. J. Cho et al. Computing Phase Shifts of Maximum-Length 90/150 Cellular
Automata Sequences. Proc. of ACRI 2004. Lecture Notes on Computer Science,
Springer-Verlag, Vol. 3305, pp. 31-39, 2004.
4. D. Coppersmith, H. Krawczyk and Y. Mansour, The Shrinking Generator. Proc.
of CRYPTO’93. Lecture Notes in Computer Science, Springer Verlag, Vol. 773, pp.
22-39, 1994.
5. A. K. Das, A. Ganguly, A. Dasgupta, S. Bhawmik and P. P. Chaudhuri, Eﬃcient
Characterization of Cellular Automata. IEE Proc., Part E. 1, pp. 81-87, 1990.
6. S.W. Golomb, Shift Register-Sequences, Aegean Park Press, Laguna Hill, 1982.
7. G. Gong, Theory and Applications of q-ary Interleaved Sequences, IEEE Trans. on
Information Theory, Vol. 41, No. 2, pp. 400-411, 1995.
8. GSM,
Global
Systems
for
Mobile
Communications,
available
at
http://cryptome.org/gsm-a512.htm
9. E.L. Key, An Analysis of the Structure and Complexity of Nonlinear Binary
Sequence Generators, IEEE Trans. Informat. Theory, Vol. 22, No. 6, pp. 732-736,
1976.
10. M. Serra et al. The Analysis of One-dimensional Linear Cellular Automata and
Their Aliasing Properties, IEEE Trans. on Computer-Aided Design , Vol. 9, No. 7,
pp. 767-778, 1990.
11. X. Sun et al. The Concatenation and Partitioning of Linear Finite State Machines,
Int. J. Electronics. Vol. 78, pp. 809-839, 1995

