A Performance Model of Fault-Tolerant Routing
Algorithm in Interconnect Networks
F. Safaei1,2, M. Fathy2, A. Khonsari1,3, and M. Ould-Khaoua4
1

IPM School of Computer Science, Tehran, Iran
{safaei, ak}@ipm.ir
2
Dept. of Computer Eng., Iran Univ. of Science and Technology, Tehran, Iran
{f_safaei, mahfathy}@iust.ac.ir
3
Dept. of ECE, Univ. of Tehran, Tehran, Iran
4
Dept. of Computing Science, Univ. of Glasgow, UK
mohamed@dcs.gla.ac.uk

Abstract. The Software-Based fault-tolerant routing [1] has been proposed as
an efficient routing algorithm to preserve both performance and fault-tolerant
demands in large–scale parallel computers and current multiprocessor systemson-chip (Mp-SoCs). A number of different analytical models for fault-free
routing algorithms have been suggested in the past literature. However, there
has not been reported any similar analytical model of fault-tolerant routing in
the presence of faulty components. This paper presents a new analytical model
to capture the effects of failures in wormhole-switched k-ary n-cubes using
Software-Based fault-tolerant routing algorithm. The validity of the model is
demonstrated by comparing analytical results with those obtained through
simulation experiments.

1 Introduction
Over the recent years, there exist many compute-intensive applications that require a
large amount of processing power that can be merely achieved with massively parallel
computers [1, 2]. The failure of components in such systems does not only reduce the
machine computational power, but also deforms the interconnection network, which
may consequently lead to a disconnected network. A network is disconnected if there
exist two nodes without any fault-free path to route messages between them [2].
Direct networks have been a popular means of interconnecting mechanisms in
parallel computers. The k-ary n-cube (also referred as n-dimensional, radix-k torus) is
currently used as one of the most popular topologies for direct network. Moreover, the
torus has been widely adopted in the last generation of practical parallel machines [2].
Network latency is one of the major factors that affect the performance communication networks. In order to minimize the network latency, wormhole switching (also
known as wormhole routing [3]) has been widely adopted in the networks. Network
throughput can be increased by organizing the flit buffers associated with each
physical channel into several virtual channels. A virtual channel consists of a buffer,
together with associated state information, capable of holding one or more flits of a
message [4].
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 744 – 752, 2006.
© Springer-Verlag Berlin Heidelberg 2006

A Performance Model of Fault-Tolerant Routing Algorithm in Interconnect Networks

745

Routing is the process of transmitting data from one node to another node in a
given system. Most past multicomputers have adopted deterministic routing (also
widely known as Dimension-ordered routing [5]) where messages with the same
source and destination addresses always take the same network path. Fault-tolerance
is the ability of a routing algorithm to bypass faulty nodes/links in the network. The
Software-Based approach [1] as an instance of fault-tolerant routing algorithm has
been widely reported in literatures. The research presented in this paper use
theoretical results of queuing theory to predict the message latency of the SoftwareBased routing scheme in the presence of faulty components.
The reminder of the paper is structured as follows. Section 2 describes some terms
and backgrounds used in this paper. Section 3 presents our modeling approach while
Section 4 validates the analytical model using a discrete-event simulator. Finally,
Section 5 summarizes the work reported in this paper and presents possible directions
for future works.

2 Preliminaries
The k-ary n-cube, where k is referred to as the radix and n as the dimension, has N=kn
nodes, arranged in n dimensions, with k nodes per each dimension. Each node can be
identified by an n-digit radix k address (a1, a2,…, an). Nodes, with address (a1, a2,…,
an), (b1, b2,…, bn) are connected iff there exists i, (1≤i≤n), such that ai=(bi ± 1) mod k
and ai=bj for 1≤i≤n; i≠j. Each node consists of a Processing Element (PE) and router.
A node is connected to its neighbouring nodes via the input and output channels. The
injection/ejection channel is used by the processor to inject/eject messages to/from the
network.

3 The Analytical Model
This section describes the assumptions used in the analysis, and then presents the
analytical models for deterministic Software-Based routing algorithm.
3.1 Assumptions
The model is based on the following assumptions that have been widely employed in
similar networks analysis studies [4-9].
•
•
•

•

Nodes generate traffic independently of each other, and which follows a Poisson
process with a mean rate of λg messages per cycle.
The arrival process at a channel is approximated by an independent Poisson
process.
Message destinations are uniformly distributed across network nodes. Message
length is M flits, each of which requires one-cycle to move from one router to the
next.
The local queue at the injection channel in the source node has infinite capacity.
Moreover, messages are transferred through the ejection channel to the local node
as soon as they arrive at their destinations.

746
•

•

•

F. Safaei et al.

V (V>1) virtual channels are used per physical channel. At a given routing step, a
message chooses randomly one of the available virtual channels at one of the
physical channels, if available, that brings it closer to its destination.
Each node failed with probability Pf. The probabilities of node failure in the
network are equiprobable and independent of each other. Moreover, Faults are
static [1-3] and distributed uniformly throughout the network such that do not
disconnect it.
Nodes are more complex than links and thus have higher failure rates [1, 2]. So,
we assume only node failures.

3.2 Outline of the Analytical Model
The mean message latency is composed of the mean network latency, L , which is the
time to cross the network, and then the mean waiting time, Ws , seen by the message in
the local queue before entering the network. However, to capture the effects of the
virtual channels multiplexing, the mean message latency is scaled by a factor, V ,
representing the average degree of virtual channels multiplexing, that takes place at a
given physical channel. Therefore, we can write the mean message latency as [6]
Mean message latency = ( L + Ws )V

(1)

In what follows, we will describe the calculation of L , Ws , and V .
3.2.1 Calculation of the Mean Network Latency ( L )
In the Software-Based fault-tolerant routing, when a message encounters a fault, it is
first re-routed in the same dimension in the opposite direction. If another fault is
encountered, the message is routed in a perpendicular dimension in an attempt to
route around the faulty regions [1]. At each dimension a message may encounters a
node that is faulty with probability Pf or a node that is non-faulty again with
probability (1-Pf). Thus, the average number of hops traversing each dimension, k f , is
calculating by weighting average of average number of hops taken in each case.
Therefore, using the method proposed in [7], k f is calculated by

((

) )(

(

)

k/2
i
⎧ 2 k / 2−1 i + k / 2 k . 1 + k .P
f ∑ i =1 ( −1) + 1 2i
⎪ ∑ i =1
kf = ⎨
( k −1) / 2
k/2
⎪ 2∑
i k . 1 + k .Pf ∑ i =1 (−1)i + 1 2i
i =1
⎩

(

)(

(

)

)

)

k is even
k is odd

(2)

Each PE generates, on average, λg, messages in a cycle. Resulting in a total Nλg
newly-generated messages per cycle in the network. Since each message visits, on
average, nk f hops to cross the network, and the total number of channels in the
network is 2nN, the rate of messages received by each channel, λc , can be written as
λc = λg k f 2

(3)
Fig. 1 depicts the state transition diagram of the message flow through the network
with the associated transition probability and latencies at each state. The message
needs to pass r-1 intermediate nodes to reach its destination. State Lr, j (0≤j≤ r-1)

A Performance Model of Fault-Tolerant Routing Algorithm in Interconnect Networks

747

denotes that the header is at the intermediate node. Moreover, states Lr, 0 and Lr, r
denotes that the header is at the source and destination nodes, respectively. Thus, the
Latency seen by a message at the destination is
Lr, n=0

(4)

Fig. 1. The state transition diagram of the message flow in deterministic Software-Based routing

Let Pb be the probability of blocking at dimension j. A message is blocked at a
j
given dimension j when all the virtual channels of that dimension are busy. To
compute Pb two cases should be considered: (i) V virtual channels are busy, and (ii)
j

V-1 virtual channels are busy. The number of combinations where V-1 out of V virtual
channels are busy is VV−1 of which only one combination result in all virtual channels

( )

are busy. Let Pj (0≤v≤V) represents the probability that v virtual channels at a
v
physical channel in dimension i are busy. Taking into account the two above cases,
Pb can be calculated as
j

Pb j = PjV + PjV −1

( )
V
V −1

(5)

The latency Lr, j, seen by the message when crossing channel j, can be written as
L r , j = [1 − ( PV + Pf )]( Pb j Wc j + 1 + Lr , j +1 ) + Pf ( M + Δ + Ws + Lsr , j ) + Lr , j PV

(6)

In the Equation (6), the first term accounts for the case when does not encounter a
faulty component at channel j. The message may wait Wc with probability Pb to
j

j

acquire one of the required virtual channels to advance to the next channel (i.e., j+1),
where it sees latency Lr, j+1 to complete its journey. The second term, on the other
hand, accounts for the case when the message encounters a faulty component. In this
case, the message is delivered to the local queue of the current intermediate node after
M cycles to account for the message transmission time. It also may suffer a delay
overhead of Δ cycles due to its re-injection at the node. The message then experiences
a waiting time Ws in the local queue. Once at the head of local queue, it may

748

F. Safaei et al.

experience blocking before it manages to access a virtual channel to make its next hop
to continue its network journey. Therefore, the latency seen by a message at the head
of local queue, Ls , is given by
r, j

Ls r , j = (1 − PB )( Pb j WC j + 1 + Lr , j +1 ) + PB Ls r , j

(7)

Where PB is the probability that a message blocked at the local queue and given by
the Equation (15). To compute the mean latency for a message, we first consider the
ejection channel. The service time for this channel, T0 , is simply the message length,
M cycles. A message at dimension j, traverses k f hops, on average, and then moves to
the next dimension j-1. At each hope there is one cycle to transfer header flit over a
channel, and some delay due to blocking in the network. Thus, the mean service time
of a channel in dimension j, T j , can be expressed as
⎧⎪M
Tj = ⎨
⎪⎩T j −1 + k f Lr ,0

j=0

(8)

1≤ j ≤ n

Finally, the mean network latency, L , seen by a message visiting nk f channels to
cross from source to destination is given by
L = Tn

(9)

3.2.1.1 Calculation of the Mean Waiting Time ( Wc ). To determine the mean waiting
j

time, Wc , to acquire a virtual channel in dimension j, an M/G/1 queue is used with a
j
mean waiting time given by [9]
w = ρ jT j (1 + CT2j ) 2(1 − ρ j ) , ρ j = λcT j , CT2j = σ T2j T j 2

Where λc is the traffic rate on the channel, T j is its mean service time, and

σ T2
j

(10)
is the

variance of the service time distribution. Since the minimum service time at a channel
equals to the average service time of the channels in the next dimension, T j −1 ,
following a suggestion proposed in [8], the variance of the service time can be
approximated as
σ T2 = (T j − T j −1 ) 2
j

(11)

Hence the mean waiting time to acquire a virtual channel in dimension j becomes
Wc j = λcT j 2 [1 + (T j − T j −1 ) 2 T j 2 ] 2(1 − λcT j )

(12)

The above equations reveal that there are several inter-dependencies between the
different variables of the model. For example, Equations (6) and (8) denote that T j is
a function of Wc while Equation (12) shows that Wc is a function of T j . Given that
j
j
closed-form solutions to such inter-dependencies are very difficult to determine the
different variables of the analytical model are calculated using iterative techniques for
solving equations [9].

A Performance Model of Fault-Tolerant Routing Algorithm in Interconnect Networks

749

3.2.1.2 Calculation of the mean waiting time in the local queue ( Ws ). The local queue
at the injection channel of a given node is
treated as an M/G/1 queuing system, as
shown in Fig. 2. The local queue receives
two types of messages: messages that are
newly-generated by the local PE and those
that experience blocking at the input
channels of the node. Let us refer to these Fig. 2. The queuing model at the injection
two types as “newly-generated” and “transit” channel of a given node
messages, respectively. The local queue
receives newly-generated messages at a mean rate of λg messages in a cycle. When a
transit message reaches a given node, it may suffer from blocking at the current node
with probability PV. The rate of transit messages arriving at the local queue is given by
2n λcPV

(13)
Therefore, the total traffic rate, λt , arriving at the local queue of a given node can be
written as
λt = λg + 2n λcPV

(14)

The probability that a message blocked at the local queue, PB, can be expressed as
PB = PV ( λg + 2n λc)/ λt

(15)
When a message has required (κ +1) retransmission attempts to cross the network,
it should be experienced κ transmission failures before successfully leaving the local
queue. It follows that the time interval between the start of transmission of a given
message and successfully leaving the local queue is Tn + Wc + κ cycles with the
n

following probability
(1 − PB ) PBκ

κ = 0,1, 2,...

(16)

Therefore, service time distribution in the local queue is given by
Pr[TT = Tn + Wcn + κ ] = (1 − PB ) PBκ

κ = 0,1,2,...

(17)

The first two moments of the service time in the local queue are given by
E [TT ] = TT = ∑κ =0 TT (1 − PB ) PBκ = ∑κ =0 (Tn + Wcn + κ )(1 − PB ) PBκ
∞

∞

= Tn + Wcn + PB (1 − PB )
E [TT2 ] = TT2 = ∑ κ =0 TT2 (1 − PB ) PBκ = ∑ κ =0 (Tn + Wcn + κ ) 2 (1 − PB ) PBκ
∞

(18)

∞

= (Tn + Wcn ) 2 + ( PB (1 − PB )) 2 + 2(Tn + Wcn ) PB (1 − PB )

(19)

A message at the local queue enters the network through any of the V virtual
channels. Using the Pollaczek-Khinchine [9] formula with a mean arrival rate λt/V and
the Equations (18) and (19), yields the mean waiting time, Ws , experienced by a
message in the local queue as

750

F. Safaei et al.
⎧
⎛ P
P
⎪
(λt V ) ⎨(Tn + Wcn ) 2 + 2(Tn + Wc n ) B + ⎜⎜ B
1
−
P
2
B ⎝ 1 − PB
⎪⎩
(λt V )TT
=
Ws =
2(1 − (λt V )TT )
⎧
⎫
P
2⎨1 − (λt V )(Tn + Wc n + B ) ⎬
1 − PB ⎭
⎩

⎞
⎟⎟
⎠

2⎫

⎪
⎬
⎪⎭

(20)

3.2.1.3 Calculation of the average degree of virtual channels multiplexing ( V ). The
probability, Pv , that v virtual channels are busy at a given physical channel can be
determined using a model proposed in [4]. In the steady state, the model yields the
following probabilities
⎧1
v =0
⎪⎪
q jv = ⎨ q jv−1λc T j
0<v <V
⎪
v =V
⎪⎩ q jv−1 λc (1/ T j − λc )

,

⎧1 ∑ V q jv
v=0
⎪
⎪
Pjv = ⎨ Pjv −1λc T j
⎪
⎪⎩ Pjv −1 λc (1/ T j − λc )

v =0
0<v <V

(21)

v =V

Averaging over all dimensions, the average degree of multiplexing of virtual channels
in the network is given by [4]
V =

1
n

∑ j =1⎛⎜⎝ ∑v = 0 v 2 Pjv ∑v = 0 vPjv ⎞⎟⎠
n

V

V

(22)

Fig. 3. The mean message latency of deterministic Software-Based routing in an 8-ary 2-cube
and an 8-ary 3-cube networks with message length M=32 and 64 flits, number of random failed
nodes nf =0, 3, 5, 12 and number of virtual channels per physical channel V=4, 10.

A Performance Model of Fault-Tolerant Routing Algorithm in Interconnect Networks

751

4 Validation of the Analytical Model
Fig. 3 depicts latency results predicted by the model plotted against those provided by
the discrete-event simulator for an 8-ary 2-cube and an 8-ary 3-cube using deterministic Software-Based routing, respectively. Two message lengths are used, M=32
and 64 flits. Random failed nodes are determined using a uniform random number
generator while the delay overhead due to the message re-injection (Δ) is set to zero.
Moreover, the number of virtual channels per physical channel is set to V=4, 10 and
different number of random failed nodes is set to nf =0, 3, 5 and 12. The horizontal
axis in this figure represents the traffic generation rate while the vertical axis shows
the mean message latency. The results reveal that the analytical model predicts the
mean message latency with a good degree of accuracy in all regions. However, some
discrepancies around the saturation point are apparent. This is a result of the
approximations made when constructing the analytical model, e.g. the approximation
used to estimate the variance of the service time distribution at a channel. This
approximation greatly simplifies the model by avoiding the computation of the exact
distribution of the message service time at a given channel.

5 Conclusions
A large number of fault-tolerant routing algorithms proposed in literatures for
massively parallel systems, cluster-based systems, mobile systems, sensor networks,
and multiprocessor systems-on-chip (MP-SoCs). The Software-Based fault-tolerant
routing that has been known as an efficient routing method for reliable communication networks can route a message from source to destination, even in the presence
of faulty components. In this paper, we proposed a new analytical model to compute
the mean message latency of deterministic Software-Based routing in an n-dimensional torus. Simulation experiments have shown that the results predicted by the
model are in good agreement with those obtained through simulations under different
working conditions. Future directions may include evaluating the perfor-mance of
adaptive Software-Based routing and the other well-known fault-tolerant routing
algorithms using our suggested approach.

References
1. Suh, Y. J., et al.: Software-based rerouting for fault-tolerant pipelined communication, IEEE
TPDS, 11 (3) (2000) 193-211.
2. Dally, W. J., Towles, B.: Principles and practices of interconnection networks, Morgan
Kaufman Publishers, New York (2004).
3. Ni, L. M., McKinley, P. K.: A survey of wormhole routing techniques in direct networks,
IEEE Computer, 26 (2) (1993) 62-76.
4. Dally, W. J.: Virtual channel flow control, IEEE TPDS, 3 (2) (1992) 194–205.
5. Dally, W. J., Seitz, C. L.: Deadlock-free message routing in multiprocessor interconnection
networks, IEEE TC, 36 (5) (1987) 547-553.

752

F. Safaei et al.

6. Ould-Khaoua, M.: A performance model of Duato’s adaptive routing algorithm in k-ary ncubes, IEEE TC, 48 (12) (1999) 1-8.
7. Agarwal, A.: Limits on interconnection network performance, IEEE TPDS, 2 (4) (1991)
398-412.
8. Draper, J.T., Ghosh, J.: A comprehensive analytical model for wormhole routing in
multicomputer systems, JPDC, 32 (2) (1994) 202-214.
9. Kleinrock, L.: Queueing Systems, Vol. 1, John Wiley, New York (1975).

