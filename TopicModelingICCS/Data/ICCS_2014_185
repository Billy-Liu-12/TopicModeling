Procedia Computer Science
Volume 29, 2014, Pages 2351–2359
ICCS 2014. 14th International Conference on Computational Science

Development of a Computational Framework for
Block-Based AMR Simulations
1

Hideyuki Usui1, Akihide Nagara1, Masanori Nunami2 and
Masaharu Matsumoto 3
The Graduate School of System Informatics, Kobe University, Kobe, Japan
2
National Institute for Fusion Science, Toki, Japan
3
Information Technology Center, The University of Tokyo, Tokyo, Japan
h-usui@port.kobe-u.ac.jp

Abstract
AMR technique can provide efficient numerical calculat ion by adapting fine cells to regions where
higher numerical resolution is required. Ho wever, it is generally d ifficu lt fo r users to imp lement the
AMR technique in their generic simu lation programs which use uniform cells. For the purpose of
carrying out numerical simulat ions including the AMR technique, we developed a framework for
blocked-structured AMR simulat ion by wh ich we can easily convert a generic uniform-cell simu lation
program to the one with the AMR treat ment. In this paper we describe the developed framework and
show the implementation of a simulation program into the framework by taking a two -dimensional
advection simulation as an example.
Keywords: Adaptive M esh Refinement, block-based AM R, AM R simulation, framework

1 Introduction
Large-scale parallel co mputation has been widely performed in various fields of engineering as
well as science and its importance is rap idly growing in each field. The amount of available
computational resources, however, is finite and sometime insufficient to realize a large -scale
simu lation model required to solve a specific problem. Despite the increasing co mputational power,
lack of nu merical resolution is a persistent problem in simulat ion studies. To efficiently use the
available co mputational resources with keeping the required high resolution in computation, adaptive
mesh refinement (AMR) technique [Zeeu w Powell, 1993] is one of the pro mising methods, which has
been mostly used in fluid-type simu lations. If we need a non-adaptive mu lti-scale simulat ion, it is can
be easily realized with comb ination of unifo rm-cell simu lation space with different cell size. Ho wever,
in init ial-value problems in wh ich we need to solve various phenomena fro m the transient state to the
steady state, it is generally difficu lt to predict a region where we need high resolution. In such a case,

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2014.05.219

2351

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

AMR becomes a powerful method because simu lation regions with high resolution are automat ically
created during a simu lation run. The AMR technique can provide efficient nu merical calculation by
adapting fine cells to regions where higher numerical resolution is required. As an examp le of AM R
framework, PARAM ESH [MacNeice, Olson, Mobarry, deFainshtein, Packer, 2000] is used in several
fields.
In our research group, we developed an innovative plasma particle code using AMR called
PARM ER [Usui, Nunami, Moritaka, Matsui, Yagi, 2011]. PARM ER incorporates so called cell-based
AMR technique with wh ich we adaptively generate hierarch ical layers with d ifferent cell size at the
cells where a certain physical quantity exceeds a threshold for refinement. We would like to apply the
AMR technique used in PARM ER to generic simu lation programs used in various research fields. It
is, however, generally d ifficu lt to imp lement the AMR treat ment in conventional simulat ion codes
which are programmed based on uniform cell size. Particu larly it is comp lex to numerically handle
hierarchical layers with different cell size in a simu lation run. Therefore, in this study, for those who
are interested in adopting the AMR technique to their own simu lation programs, we developed an
advanced AMR framework with which the AM R technique is relatively easily introduced in a generic
simu lation program. To remove the difficulty of porting AMR to generic codes, we set that a region
which needs to be refined is limited to a block-structured one consisting of the fixed number of cells.
In the present study, our method can be applied to a simulation program in which differential
equations are locally solved with finite difference method. We do not consider a solver which uses
global operations with spatial synchronization such as Po isson’s equation as an application to the
developed framework.
In this paper, our newly developed AMR framework is described in Sec. 2. In Sec. 3, we show an
example of the AMR framework application to a simple simulat ion in which a two -dimensional
advection equation is solved.

2 Block-Based AMR Framework
2.1 Block-Structured Domain
In the framework development, we decided to adopt the block-structured AMR [Berger Oliger,
1984] [Norman Bryan, 1999]
because of better portability than
Self-similar block
Block
Cell
other AMR-structures. In the
• Cell size becomes half
block-structured AMR, regions
• The same number of cells
required for the AMR treat ment
in the simu lation do main have a
self-similar structure. The selfsimilar b lock-structured domains
for AMR are managed in a fully
threaded tree (FTT) data structure
which
allows
recursive
refinement on a block-by-block
basis [Khokhlov, 1998]. Each
block consists of a domain
formed with the fixed number of
cells with uniform cell size. A
block in a different level of
Figure 1: Example of block configuration in two-dimensional
refinement in the FTT structure
domain. In this case, a block has 4×4 cells.
has different cell size keeping the

2352

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

same nu mber o f cells. For instance,
in one level higher, the cell size
becomes half. In each b lock, we
can incorporate the same uniformneighbor
neighbor
cell simulat ion program of our
Level N
interest and independently perform
Block
Block
Block
the simulation. Since each block
has a common domain with the
same number of cells because of
parent
child child
self-similarity, what we need to
consider is the cell size in each
Level N+1
Block Block Block Block
block depending on the refinement
level wh ich is given in the FTT
structure.
Figure 2: Block connections in the FTT structure.
A simple examp le is shown in
Figure 1 in which each block has
4×4 cells and the simu lation
domain consists of 4×4 baseblocks. We call a b lock with the coarsest cells the base-block. It should be noted that the number of
cells in the refined block is the same as that in base-block because of self-similarity although the cell
size becomes half. The number of cells in each block and the number of base -block consisting of the
whole simulation domain can be initially set as input parameters .
Figure 2 shows the block connections in the one-dimensional FTT structure. Each block has
informat ion about the level of refinement given in the FTT structure and the physical quantities
defined at each cell in the block. Every b lock has three kinds of pointer wh ich refer to neighbor, child,
and parent blocks determined in the FTT structure. The neighbor pointer configures connections to
adjacent blocks in the same h ierarchical level. The child pointers and the parent pointer configure
connections to blocks with fine and coarse cells located in the same region in different hierarchical
levels, respectively. The parent block remains when child blocks are generated. In three -dimensional
model, the physical quantities in each cell in the child blocks are obtained by the linear interpolation of
those of eight parent-level cells which are most closely located around the corresponding child cell.
Nu merical connection to neighboring blocks is configured by a buffer region. As shown in Figure
3, each block has a buffer region at the edges of the physical do main of the block. The buffer region
consists of additional cells which are necessary in updating the physical quantities in the physical
domain by the finite difference method. In the base-block level, as shown in (a) o f Figure 3, the
physical values at the boundary of the adjacent block are simp ly copied to the cells in the buffer region.
Although one cell is assigned for the buffer region in Figure 3, the number of the buffer cells can be
arbitrarily set by the users depending on the requirement of the fin ite difference method used in the
corresponding simulat ion solver. In the child block, as shown in (b) of Figure 3, a buffer region is also
attached at the edge of the physical reg ion and the physical quantities in the buffer cell are inherited
fro m the base-block by the linear interpolation as explained above. By making use of the buffer region,
we can t reat each block as an independent unit even if blocks in different level of h ierarchy face to
each other at the block boundary. As stated earlier, the h ierarch ical relation of all b locks is managed in
the FFT structure, which allows us to incorporate the AMR treat ment in simu lation with a high degree
of flexibility. In block calcu lation routine, the user can easily insert a generic nu merical code, wh ich is
described in the following section.

2353

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

(a) Between base-blocks

Block

Buffer
cell
cell

cell

cell

cell

….

Neighbor block

….

cell

cell

cell

cell

Buffer
cell
Block boundary

(b) Between parent and child blocks
Block boundary
Block

….

cell

cell

cell

cell

Buffer
cell

parent

interpolation
cell cell cell cell cell cell Buf.
cell

child

Figure 3: Buffer region at the edges of block. (a) data exchange between buffer cells in the base-block
level, (b) data copy to buffer cell from the parent block by interpolation.

2.2 Procedures of the AMR Framework Usage
We can easily modify a generic uniform-cell simu lation program into an AMR one by inserting it
into our developed AMR framework. Since the framework can handle the h ierarch ical relation among
the blocks with the FTT structure, what the users basically have to prepare is the outer boundary
condition for the entire simu lation space, the main routine for calculat ion in each block, and a criterion
for the cell refinement. We need to prepare these three parts in the Fortran language. In the fo llo wing
we explain the AMR framework usage by describing a program implementation to the framework.
The basic structure of the framework is shown in Figure 4. We use block arrays which are defined
as structure data to keep the data such as physical quantities in b locks. In the framework, there are two
major loops; the outer loop works for the temporal evolution with the number of time steps Nstep and
the inner one is for the block calculation with the number of blocks Nall . Before the main do loops, we
need to provide parameters regarding blocks such as the number of cells per block and the total
number of base-blocks consisting of a whole simulation do main as well as initial conditions for
physical quantities which are to be solved in the simulation.
In the outer loop corresponding to the time increment, the framework has important routines
regarding the cell refinement which has to be done before the block loop. The functions of the routines
are the follo wings. (1) check if the physical quantities in a cell exceed the criterion for the cell
refinement which is in itially set, (2) generate child blocks if necessary, (3) connect blocks with
pointers and construct a FTT, (4) exchange the boundary data between neighbor blocks for buffer
region in the same hierarchical level, and (5) copy the data from the parent to the child blocks by
interpolation when refinement occurs. These functions are included in the framework and the users do
not have to modify except for the setup of the refinement criteria for a certain physical quantity.

2354

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

In the inner loop, user’s solver is inserted and the physical quantities in all the b locks are updated.
First, the contents of the block arrays containing the physical quantities in the simulation are copied to
temporary arrays defined in the framework such as A, B, and C (Procedure (1) in Figure 4). Second,
we update the physical quantities by performing a simulat ion using the arrays A, B and C in each block
(Procedure (2) in Figure 4). Since the cell size is uniform in each block, the inserted generic program
can be used without any consideration of the cell refinement, which is the advantage of using the
current AMR framework. Finally, we copy the updated values in the temporary arrays to the internal
block arrays defined in each block (Procedure (3) in Figure 4). The treat ment of the outer boundary
condition for the entire simulation is done after the main calculation at each time step.
Before the actual simu lation performance, we need to determine several parameters for the
framework use. For simplicity, we assume a two -dimensional simu lation space. First, we set the
number of cells contained in one block. The block shape can be configured into a rectangle, not
limited to a square. Since we adopt self-similar b lock system in the current framework, the nu mber of
cells in a block is maintained even if the cell size changes in the different hierarchical level. The cell
size of the base-block, dx and dy in the x and y directions respectively, also have to be given. Then we
need to determine how many base-blocks are necessary to realize the whole simulation domain.
Once the base-block setup is done, we need to set some parameters for the cell refinement. Prior to
the AMR simulat ion, the user has to determine the maximu m number o f the hierarchical level n max in
the FTT structure by considering how high the spatial resolution is needed in the corresponding
simu lation. The cell sizes in a block with one-level higher refinement become dx/2 and dy/2 in the x
and y directions respectively. In the same manner, the cell size for the n-th level block becomes dx/2n
where n denotes the hierarchical level with respect to the base-block level. Although the cell size

Framework

program
type(oct_Block) :: block
real :: A(nx,ny,nz), B(nx,ny,nz), C(nx,ny,nz)
Initial parameter setup
do istep=1,Nstep (Time loop)
Treatment of cell refinement

䐟

䐠
䐡

do index=1,Nall (Block loop)
Main calculation
Data copy
A(:,:,:) = block(index)%F(1,:,:,:)
B(:,:,:) = block(index)%F(2,:,:,:)
C(:,:,:) = block(index)%F(3,:,:,:)
Insert uniform-cell program
call advance_field
Data copy to block arrays
block(index)%F(1,:,:,:) = A(:,:,:)
block(index)%F(2,:,:,:) = B(:,:,:)
block(index)%F(3,:,:,:) = C(:,:,:)
enddo
Outer Boundary treatment
enddo
stop
end program

Uniform-cell program
subroutine advance_field
real :: A(nx,ny,nz), B(nx,ny,nz),
C(nx,ny,nz)
do iz=1,nz
do iy=1,ny
do ix=1,nx
A(ix,iy,iz) = 䞉䞉䞉
䞉䞉䞉䞉
B(ix,iy,iz) = 䞉䞉䞉
䞉䞉䞉䞉
C(ix,iy,iz) = 䞉䞉䞉
䞉䞉䞉䞉
enddo
enddo
enddo
return
end subroutine advance_field

Figure 4: Incorporation of user’s program to the AM R framework

2355

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

differs in each hierarchical level, we use a common temporal interval dt which is set for the n max level
in other different levels. The user also has to set some criteria for the physical quantities for the cell
refinement. The criteria are arbitrary such as some local values or gradients of any physical quantities
solved in the corresponding simu lation. When the corresponding physical values exceed the criteria
the cell refinement will be conducted on the block basis in the simulation.
For the purpose of high performance co mputation, parallel calculation is inevitable by using
mu ltip le processes. The current AMR framework is applicable to parallel calcu lation. In parallelization,
the whole simu lation do main consisting of base-blocks at the in itial state is uniformly d ivided into the
number of process used in the parallel calculation and each subdomain wh ich is composed of a group
of base-blocks is assigned to each process. As explained earlier, data in buffer cells located at the
edge of the block boundary has to be provided fro m the neighbor block. When the block boundary in a
subdomain coincides with the process boundary, the data copy to buffer cells between neighbor blocks
has to be done through MPI because the corresponding two neighbor blocks are contained in different
processes. This function is also incorporated to the current framework. Fro m th is point of view, th is
framework is also useful in parallelizing a user’s program with the domain decomposition method
even if there is no need to use the AMR function.

3 Example of Block-Based AMR Simulation
3.1 Simulation Model
To demonstrate the effectiveness of the developed framework, we converted a simple simu lation
program on the two-dimensional advection equation into an AMR simu lation program by using the
framework. In solving the advection equation, we simp ly adopted the upwind differencing scheme
(UDS).

f i ,nj1

f i ,nj  cx

't n
't n
( f i , j  f i n1, j )  c y
( f i , j  f i ,nj 1 )
'x
'y

In the above equation, fi,j n denotes a field value at the time step n and cell point (i, j). cx , cy , 'x, 'y,
and 't are the phase velocities and the cell sizes along the x and y directions, and the time step interval,
respectively. In the simulation, we set the local field gradient as a criterion for the b lock-based cell
refinement. The following shows the criterion used in the current test simulation.

max ª¬ fi , j  fi r1, j , fi , j  fi , j r1 º¼ ! N
When the local field gradient exceeds a fixed value N wh ich is in itially set, a new block with fine
cells is locally created in the corresponding region. The maximu m refinement level n ma x is 3 for th is
simu lation. The in itial configurat ion of blocks is shown in Figure 5. A block consists of 10×10 cells in
the x-y plane. We used four processes for the MPI parallel calcu lation with the do main deco mposition
scheme. Each process handles 5×5 base-blocks.
As an initial value of f, we set a square-shaped waveform at the center with the size of 40×40 cells
of a base-block shown in Figure 4. Since the gradient of f is the largest at the waveform boundary,
blocks of the level 3 are init ially created there. We provide an initial velocity to the waveform as cx=cy
and let the waveform propagate along the diagonal direction of the simulat ion plane. The outer
boundary condition of the simulation domain is periodic.

3.2 Evaluation of the Test Simulation
Figure 6 shows the profile of the square-shaped waveform and its corresponding block
configuration in the x-y plane around the final stage of the simulat ion. Although not shown in the

2356

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

Initial configuration of blocks

F

Y

Y

X
Base block
(Lv.0)

Enlarged view

X

Lv.2

Y

Lv.1

Block
Cell

Base block
(Lv.0)
Lv.3

Figure 5: Initial configuration of blocks used in the test
simulation in which a two-dimensional advection equation is
solved. Scales shown in the upper panel are the numbers of
cells for the Lv. 1 block.

X
Figure 6: Spatial profile of the waveform
at the later time and the corresponding block
configuration shown in the upper and lower
panels, respectively.

figure, the waveform propagated across the simulat ion system mu lt iple times. Because of nu merical
diffusion by UDS in solving the advection equation in the waveform propagation, the edge of the
waveform diffuses and the region with the finite gradient of the field spreads. Then the area of the
AMR treat ment eventually increases around the waveform boundary as shown in the lower panel of
Figure 6.
For co mparison, we performed another simulation using a uniform cell system in which the
smallest cell size, dx/23 , used in the AM R simu lation is adopted. We compared the waveforms
obtained in two different simulat ions at the final t ime step. Although not displayed here, we could
confirm that there is little difference found between the two waveforms. The temporal variat ion of the
gradient of the waveform is the same in both simulations because the spatial resolution at the field
gradient is supposed to be the same in the t wo cases. This imp lies that the AMR treat ment sufficiently
works in the modified simulation program by using the current framework.
Next we examined the computational efficiency in terms of calculation time and memo ry usage in
the simu lation. The calculation t ime in the b lock-AM R simu lation is reduced approximately half in
comparison with that in the uniform-cell simulat ion. In the current case, the total calculat ion time is
about 400 seconds in the block-AM R simu lation while appro ximately 200 seconds in the uniform-cell
simu lation. Even though there are some overheads for the AMR treat ment, we confirmed the
calculation time is much reduced in the block-AMR simulation.

2357

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

In the simulat ion, we adopted the domain decomposition method for parallelization. Each
subdomain is assigned to each process and the amount of memo ry consumed in each process varies in
time because the AMR region moves in the simulat ion domain. To co mpare the me mory consumption
between the block-AMR simu lation and the uniform-cell simu lation, we take a specific subdomain
where an AMR region is created and the maximu m amount of memory is required. In the current
simu lation, the process which requires the maximu m a mount of memory in the AMR simulation
consumes 72MB while 160MB is consumed in the uniform-cell simulation.
As long as the current simulation model is concerned it turned out that the total calculation time
and the amount of the memory usage are both reduced almost by half when the AMR framework is
introduced. This implies that a simulat ion with AMR t reat ment has an advantage in the reduction of
the usage of computational resources.

4 Conclusion
To min imize the effort to introduce the AMR technique into generic simu lation programs using
uniform cells, we developed a blocked-structured AMR framework by which we can easily separate
the calculation part fro m the AMR treat ment in a simu lation. A whole simulat ion domain consists of a
number of base-blocks. The base-block is formed with cells and users can arbitrarily set the number of
cells in a block prior to the simulat ion. If necessary, we can apply AMR to each block do main, not to a
single cell, by setting a criterion of cell refinement for physical quantities such as density and field
gradient. The newly created refined block has the half cell size but has the same number of cells as
that of the parent block. Namely block domains are self-similar structures. All the block do mains are
organized in a FTT data structure so that the hierarchical relation among the blocks is well maintained.
Users’ generic program is ported into each block do main and solved independently. Each block
domain has a buffer region which surrounds the physical domain of the block. Through the buffer
region, data of adjacent blocks are exchanged for the boundary calculation with finite difference
methods. By these systematic connections among blocks, a simu lation in a wh ole do main is efficiently
performed.
In parallelizing a simu lation program with mu ltip le p rocesses we generally use the domain
decomposition method with which we uniformly separate the whole simu lation region into
subdomains with the number of p rocesses available fo r the parallel calculat ion. In parallelizing the
block-structured simulation, each divided subdomain consists either of a single block or a group of
blocks depending on the memo ry size of each process. In the domain deco mposition method we need
to exchange the boundary data of each subdomain between adjacent processes. The data exchange
between processes is handled with MPI and this treat ment is also supported in the current b lock-AM R
framework. Fro m this point of view, the developed framework is also useful for users to parallelize a
code with the domain decomposition method using mult iple processes even if there is no need to use
the AMR function in the simulation.
One of the issues in parallelizing a simulat ion program is the load balance among processes
assigned to a simulation run. In a simu lation using this block-AMR framework the load of each
process changes in time because AMR regions can move from a subdomain to another. A subdomain
which contains child domains has a load larger than th e one which consists of base blocks only. This
load inbalance among subdomains has to be solved for efficient parallel calculation. To maintain the
load balance, reorganization of subdomains should be done during a simulat ion run. At this mo ment,
however, we imp lemented no specific treat ment to change the subdomains in the current framework,
which should be somehow added to the framework in the near future.
In this paper, we described the basic concept and function of the developed framework as well as
the procedure in porting a generic simulat ion code into this framework. By taking a two-dimensional
advection equation as an examp le, we performed a test simulation of a square-shaped waveform

2358

Framework for Block-Based AMR Simulations

H. Usui, A. Nagara, M. Nunami and M. Matsumoto

propagation by using the developed AMR framework. In the waveform propagation, we could confirm
that high resolution is achieved adaptively and locally at the steep gradient of the waveform by the
creation of new b locks with fine cells. We also confirmed that the co mputation resources used for this
test simulation are reduced almost by half in co mparison with those used in a uniform cell simu lation
for the present case.
Currently this framewo rk has been preliminarily applied to a Magneto-Hydrodynamics (M HD)
plasma simu lation for the analysis of mu lti-scale and non-uniform p lasma phenomena such as Kelv inHelmho ltz instability. In addition to MHD model simulat ion, we plan to apply the framework to
plasma part icle simu lation. Since part icles move randomly in a simulat ion domain, they do not remain
in a specific block. To be able to handle these particles in AMR simulat ion by using the framework,
we need to develop an additional function for the particle treat ment and attach the function to the
current framework, which is left as a future work.

References
Berger, J., & Oliger, J. (1984). Adaptive mesh refinement for hyperbolic partial differential equations.
J. Comput. Phys.
Carlisle, D. (2010, April). graphicx: Enhanced support for graphics. Retrieved fro m
http://www.ctan.org/tex-archive/ help/Catalogue/entries/graphicx.html
Khokhlov, A. (1998). Fully Threaded Tree Algorithms for Adaptive Refinement Fluid Dynamics
Simulations. J. Comput. Phys.
MacNeice, P., Olson, K., Mobarry, C., deFainshtein, R., & Packer, C. (2000). PARAMESH: A parallel
adaptive mesh refinement community toolkit. Computer Physics Communications.
Norman, M., & Bryan, G. (1999). Cosmological Adaptive Mesh Refinement. Numerical Astrophysics.
Usui, H., Nunami, M., Moritaka, T., Matsui, T., & Yag i, Y. (2011). A Multi-Scale Electromagnetic
Particle Code with Adaptive Mesh Refinement and Its Parallelization. Procedia Co mputer
Science.
Zeeuw, D., & Po well, K. (1993). An adaptively refined cartesian mesh solver for the euler equations.
J. Comput.Phys.

2359

