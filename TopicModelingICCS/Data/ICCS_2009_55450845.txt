Graph Grammar Based Petri Nets Model of
Concurrency for Self-adaptive hp-Finite Element
Method with Triangular Elements
Arkadiusz Szymczak and Maciej Paszy´
nski
Department of Computer Science
AGH University of Science and Technology,
Al. Mickiewicza 30, 30-059 Cracow, Poland
arek.szymczak@gmail.com, paszynsk@agh.edu.pl
http://home.agh.edu.pl/~paszynsk

Abstract. The paper presents the model of concurrency for the selfadaptive hp-Finite Element Method (hp-FEM) with triangular elements.
The model concerns the process of an initial mesh generation as well as
mesh adaptation. The model is obtained by defining CP-graph grammar
productions as basic undivided tasks for both mesh generation and adaptation algorithms. The order of execution of graph grammar productions
is set by control diagrams. Finally, the Petri nets are created based on
the control diagrams. The self-adaptive hp-FEM algorithm modeled as a
Petri net can be analyzed for deadlocks, starvation or infinite execution.

1

Introduction

In this paper we present the model of concurrency for the self-adaptive hpFinite Element Method (hp-FEM) with triangular elements. The self-adaptive
hp-FEM algorithm starts from an arbitrary initial mesh and generates a sequence
of meshes delivering exponential convergence of the numerical error with respect
to the mesh size [4,5]. This is done by breaking selected elements into smaller
elements (this procedure is called h reﬁnements) or by modifying the polynomial
order of approximation on selected element edges or interiors (this procedure is
called p reﬁnement). The algorithm can be utilized for solving two and three
dimensional engineering problems with very high accuracy [4,5].
The parallel version of both two and three dimensional self-adaptive hp-FEM
algorithms were created according to the domain decomposition paradigm [6,7].
The parallel implementations, although eﬃcient and scalable, showed the need
for further theoretical analysis of the concurrency hidden within the self-adaptive
algorithm. Two graph grammar models for both sequential and parallel hpFEM algorithms were created, for both rectangular [8] and triangular [9] ﬁnite
elements. The models utilize the CP graph grammar introduced by [1,2,3].
In this paper, we extend the graph grammar model presented in [9] for the
case of generation of an arbitrary initial mesh. We also create the model of
concurrency, expressed by control diagrams setting the order of execution of
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 845–854, 2009.
c Springer-Verlag Berlin Heidelberg 2009

846

A. Szymczak and M. Paszy´
nski

graph grammar productions, and presenting which productions can be executed
concurrently. Finally, the Petri nets are created, for both initial mesh generation
and mesh adaptation algorithms. The Petri nets model will allow for creating
the reachability graphs, ﬁnding place/transition invariants, and similar tools for
the self-adaptive hp-FEM algorithm. The hp-FEM modeled as a Petri net can
be analyzed for deadlocks, starvation or inﬁnite execution.

2

2D Mesh Generation

In this section we present a set of graph grammar productions for generation of
two-dimensional mesh with triangular ﬁnite elements. This extends the graph
grammar introduced in [9] generating a linear sequence of triangular elements.
The new productions PI1 - PI8, presented in Figure 1, realize the topology generation of an arbitrary shape 2D triangular mesh. Meaning of the node symbols
is as follows:
– E1, E2 - type-1 (triangle) and type-2 (upside-down triangle) element,
respectively

Fig. 1. Set of graph grammar productions PI1 - PI8 for the generations of triangular
finite element two dimensional mesh

Graph Grammar Based Petri Nets Model of Concurrency

847

Fig. 2. Graph grammar productions PI9 - PI12 connecting layers of generated elements

848

A. Szymczak and M. Paszy´
nski

– NIL - fake node denoting no adjacent node
– ANY - fake node meaning that given node is irrelevant to the given
production
The new productions PI9 - PI14, presented in Figure 2 and 3, are responsible
for identiﬁcation of adjacent elements to prevent element overlapping. Since new
element is always derived from one existing element and each element can have
up to 3 adjacent elements, missing up to 2 bonds must be detected. Therefore,
as soon as any of productions PI9 - PI14 matches, it must be executed before
subsequent execution of productions PI1 - PI8.
We summarize this section with an exemplary derivation of a single row of
triangular ﬁnite element mesh. The mesh is generated by the following sequence
of graph grammar productions: PI1 - PI4 - PI7 - PI4. The resulting graph and
the corresponding ﬁnite element mesh is presented in Figure 4.

Fig. 3. Graph grammar productions PI13 - PI14 connecting layers of generated elements

3

Graph Grammar Based Model of Concurrency

In this section we present the control diagram based model of concurrency for the
process of an initial mesh generation as well as mesh h adaptation. The model

Graph Grammar Based Petri Nets Model of Concurrency

849

Fig. 4. Exemplary finite element mesh obtained by executing the following sequence
of graph grammar productions PI1 - PI4 - PI7 - PI4

is presented in Figure 5. The following list summarized symbols used in the control diagrams. Some graph grammar productions referred in the list were deﬁned
in [8], while the productions PI1 - PI14 were described in the previous section.
– PE1 - production for generation of type 1 element structure
– PE2 - production for generation of type 2 element structure
– PCEH - production for identiﬁcation of common edge of horizontally adjacent elements
– PCEV - production for identiﬁcation of common edge of vertically adjacent
elements
– PJI1 - production allowing for breaking type 1 element interior
– PJI2 - production allowing for breaking type 2 element interior
– PFE - production allowing for breaking edge between two broken interiors
– PBI1 - production for breaking type 1 element interior
– PBI2 - production for breaking type 2 element interior
– PBE - production for breaking element edge
– PWest1 - production for propagation of adjacency data for west edge of
element type 1
– PEast1 - production for propagation of adjacency data for east edge of
element type 1
– PSouth - production for propagation of adjacency data for south edge of
element type 1
– PWest2 - production for propagation of adjacency data for west edge of
element type 2
– PNorth - production for propagation of adjacency data for north edge of
element type 2
– PEast2 - production for propagation of adjacency data for east edge of element type 2
The generation of an initial mesh can be highly parallelized, as it is illustrated
on the left panel in Figure 5. While subsequent elements are being added to the
mesh, the structure of already existing elements may be constructed and their
common edges may be identiﬁed. Adaptation of the mesh is more sequential,
as it is presented on the right panel in Figure 5. Generally, while all possible
transformations of the same type can be executed concurrently, diﬀerent types
of transformations must be executed in the predeﬁned order. However, since

850

A. Szymczak and M. Paszy´
nski

Fig. 5. Left panel: Control diagram based model of concurrency for the process of the
generations of triangular finite elements two dimensional mesh. Right panel: Control
diagram based model of concurrency for the process of h adaptation.

the mesh elements may have to be reﬁned in portions (enforced by the mesh
regularity rule), a new portion of reﬁnements can be started while adjacency
propagation of the previous portion is still running.

Graph Grammar Based Petri Nets Model of Concurrency

4

851

Petri Nets Model of Mesh Transformations

In this section we introduce the Petri net based model of concurrency for the
initial mesh generation as well as for h adaptation. In addition to the control
diagram based model it provides analysis tools typical for Petri nets like reachability graphs, place/transition invariants, etc. A system modeled as a Petri
net can be analyzed for deadlocks, starvation or inﬁnite execution. This model
also allows to express some quantitative relationships between graph grammar
productions.

Fig. 6. Petri nets model of concurrency for the process of triangular finite element two
dimensional mesh generation

Figure 6 presents a priority Petri net with guards for initial mesh generation.
Transitions are named after productions they execute. Priorities are assigned to
transitions (in subscript) to enforce certain sequence of execution. Transitions
PI9 - PI14 (priority 1) should be executed as soon as they get activated, before
any other transition being active at the same time. The prioritization has been
introduced to ensure correct mesh construction (with no overlapping elements).
Transitions PI9 - PI14 have an additional activation guard - they can be activated only if there is an actual matching for these productions in the mesh being
generated. The condition expressed with the guard is not enforced by the net
itself. Edge weights denote the number by which the marking of the destination
place is increased or the marking of the origin place is decreased. The meaning
of some of the places is as follows:

852

A. Szymczak and M. Paszy´
nski

– p3 number of type 2 elements that can be produced from current mesh
shape
– p4 number of type 1 elements that can be produced from current mesh
shape
– p21 number of elements left to be produced
The initial marking is: p0 - 1, p21 - N, where N is a parameter to the system
telling how many elements the initial mesh will consist of. The rest of the places
are empty. Just one token in place p0 implies that only one of the starting transitions (PI1 or PI2) may be ﬁred since they are in conﬂict. The only transitions
that increase the number of tokens in the net are PE1, PE2 and PI3 - PI8.
Only one of the transitions: PE1 input to place p3 or PE2 input to place p4
may be ﬁred and it may be ﬁred only once due to the starting transitions conﬂict. Transitions PI3 - PI8 have place p21 as input which limits the number of
their activations since the initial marking of that place is only decreasing during
the system execution. Therefore the Petri net is bounded and the initial mesh
generation will eventually stop.
The reachability graph is ﬁnite and suitable for analysis. Place p21 is the
determinant of the net’s liveness. When that place gets empty, the net quickly
reaches a dead marking - as soon as places p5, p16 and p18 also get empty.
Such a dead marking means the end of initial mesh generation; no deadlock
is possible while place p21 contains tokens. The Petri net structure is ﬁxed;
diﬀerent shapes of generated meshes will result in choosing diﬀerent paths in
the reachability graph.
Figure 7 presents the Petri net for h adaptation. The initial marking of place
p0 is the number of the mesh elements chosen for adaptation by an external

Fig. 7. Petri nets with guards model of concurrency for the process of h adaptation

Graph Grammar Based Petri Nets Model of Concurrency

853

driver. This includes elements that have to be broken as prerequisites to the
adaptation of the chosen elements (according to the mesh regularity rule). The
marking of place p1 determines the adaptation ”potential” of the mesh and
initially it will be: number of elements with 3 neighbors multiplied by 3 + number
of elements with 2 neighbors times 2 + number of elements with 1 neighbor. The
marking of places p1 and p8 should be preserved between subsequent iterations
of h adaptation.
The branch with places p2 and p3 models interior breaking of elements with
1 neighbor; branch with places p4 and p5 - elements with 2 neighbors; branch
with places p6 and p7 - elements with 3 neighbors. Two transitions linked with
a dashed line denote actually all activated transitions of a given type ﬁred concurrently. Although their numbers depend on the actual problem being solved,
the reachability graph is still ﬁnite and can be analyzed since the net is bounded
thanks to the place p0. Mesh regularity rules are enforced with the transition
guards. Therefore the net can reach a dead state even if places p1 and/or p8 still
contain tokens.

5

Conclusions

In this paper, we presented an extended graph grammar model, dedicated for
the self-adaptive hp-FEM algorithm with an arbitrary initial regular triangular
mesh. We analyzed both algorithms for an initial mesh generation and mesh
adaptation. We created the model of concurrency, based on control diagrams
deﬁning the relations between graph grammar productions. The Petri nets were
created, modeling both initial mesh generation and adaptation process. This
will provide the analysis tools typical for Petri nets like reachability graphs,
place/transition invariants, etc. The Petri nets model of the system can be analyzed for deadlocks, starvation or inﬁnite execution.
The future work in this ﬁeld will include the analysis of concurrency potential
of the remaining steps of hp-FEM. It may also be beneﬁcial to employ other
concurrency modeling tools for expressiveness comparison.
Acknowledgments. The work reported in this paper was partially supported
by Polish Ministry of Scientiﬁc Research and Information Technology, and by
the Foundation for Polish science under Homming program.

References
1. Grabska, E.: Theoretical Concepts of Graphical Modeling. Part One: Realization of
CP-Graphs. Machine Graphics and Vision 2(1), 3–38 (1993)
2. Grabska, E.: Theoretical Concepts of Graphical Modeling. Part Two: CP-Graph
Grammars and Languages. Machine Graphics and Vision 2(2), 149–178 (1993)
3. Grabska, E., Hliniak, G.: Structural Aspects of CP-Graph Languages. Schedae Informaticae 5, 81–100 (1993)

854

A. Szymczak and M. Paszy´
nski

4. Demkowicz, L.: Computing with hp-Adaptive Finite Elements. Chapman &
Hall/Crc Applied Mathematics & Nonlinear Science, vol. I (2006)
5. Demkowicz, L., Kurtz, J., Pardo, D., Paszynski, M., Rachowicz, W., Zdunek, A.:
Computing with hp-Adaptive Finite Elements. Chapman & Hall/Crc Applied Mathematics & Nonlinear Science, vol. II (2007)
6. Paszy´
nski, M., Kurtz, J., Demkowicz, L.: Parallel Fully Automatic hp-Adaptive 2D
Finite Element Package. Computer Methods in Applied Mechanics and Engineering 195(7-8)(25), 711–741 (2006)
7. Paszy´
nski, M., Demkowicz, L.: Parallel Fully Automatic hp-Adaptive 3D Finite
Element Package. Engineering with Computers 22(3-4), 255–276 (2006)
8. Paszy´
nski, M., Paszy´
nska, A.: Graph transformations for modeling parallel hpadaptive Finite Element Method. In: Wyrzykowski, R., Dongarra, J., Karczewski,
K., Wasniewski, J. (eds.) PPAM 2007. LNCS, vol. 4967, pp. 1313–1322. Springer,
Heidelberg (2008)
9. Paszy´
nska, A., Paszy´
nski, M., Grabska, E.: Graph transformations for modeling hpadaptive Finite Element Method with triangular elements. In: Bubak, M., van Albada, G.D., Dongarra, J., Sloot, P.M.A. (eds.) ICCS 2008, Part III. LNCS, vol. 5103,
pp. 604–613. Springer, Heidelberg (2008)

