Procedia Computer
Science
Procedia
Computer
Science
00 (2010)
1–1077–86
Procedia
Computer
Science
1 (2012)

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Ontological musings on how nature computes
J.F. Nystrom1,∗
Mathematics Department, Ferris State University
Big Rapids, MI USA

Abstract
Modern physical theory and modern computational techniques are used to provide conjecture on how nature computes. I utilize time-domain simulation of physical phenomena and build analogies between elements of computation
and the “things” of Universe computation, resulting, for example, in the identiﬁcation of the quantum vacuum as the
power source for Universe computation. While reviewing how Universe can be viewed as a computation, we ﬁnd the
need for Negative Universe (which is a part of the quantum vacuum mechanism). This idea is compared with Penrose’s current model which utilizes a separate Platonic world outside of physical Universe. Lastly, in the Discussion,
I present an updated version of computational cosmography as a model for Universe as computation.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Universe as computation, quantum vacuum, computational cosmography

1. Introduction
Ontology: The metaphysical study of the nature of being and existence.
Herein I use modern time-domain computer simulation2 (of physical phenomena) to motivate and inform a discussion
on how nature computes. I will try to answer questions such as: (1) During a simulation (of some time-dependent
behavior of physical phenomena) what part of the computation/computer most resembles actual matter and radiation;
(2) what part of the computation/computer most resembles the manifestation of physical laws; (3) what can be learned
about how nature computes by investigating how modern time-domain simulations are accomplished; and ultimately
(4) if Universe can be viewed as a type of computation, what is the best way to think properly about this most
ubiquitous of all computations. Throughout the paper I concentrate on how we organize the computing equipment
during a time-domain simulation. I identify the parts of our computer systems that have an analogous element in the
physical world; i.e., parts that play a similar role in the computation that is Universe.
In Sect. 2 I give an overview of modern time-domain simulation techniques with an eye towards comparing our
computation techniques to what goes on in the physical world. Throughout this section I will draw analogies between
∗

Email address: nystroj@ferris.edu (J.F. Nystrom)
author
time-domain simulation will advance a solution in time. For example, a computational electromagnetics solver can continuously update
ﬁeld variables (i.e., the electric and magnetic ﬁeld variables, which can sum totally be called the solution) in time to predict the propagation of the
ﬁelds under speciﬁc conditions.
1 Corresponding
2A

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.010

78

J.F.
ProcediaComputer
Computer
Science
1 (2012)
77–86
J.F. Nystrom
Nystrom //Procedia
Science
00 (2010)
1–10

2

parts of the computer simulation and the “things” in the physical world being simulated. (Here the “things” of
Universe computation can be matter, radiation, an energy event, or any attributes thereof.) I include comments on data
sets, computational steering, and the oft forgotten fact that computation requires power sources everywhere. Sect. 2
concludes with a summary of the analogy I have (at that point) built up between parts of a time-domain simulation
and “things”/stuﬀ of the physical world.
In Sect. 3 I present an initial view of Universe as computation at the Planck scale and discuss the reality of the
quantum vacuum[1]. I utilize the term reality ﬂux[2, 3] to capture many of the quantum vacuum eﬀects that will be
germane to the topics under consideration. I will postulate that reality ﬂux is a type of “power source” that is available
everywhere in the computation that is Universe. I outline how current scientiﬁc theory implicitly views Universe as a
type of emergent computation[4]. I discuss both what we consider the Data of Universe to be, and what the Code of
Universe does. I discuss how Universe can be viewed as a steered computation, and how Mind could be incorporated
in a Universe as computation.
The Discussion revisits the analogy that has been built between the “things”/stuﬀ of the physical world and parts of
the computer during the running of a time-domain simulation. I summarize the results of my analysis and provide still
more conjecture and comments on thinking properly about how nature computes. Herein I also present an updated
description of my computational cosmography model[5, 6] of Universe as computation and compare the model to
Feynman’s chequer board ideal and Smolin’s spin network of Leibniz monads.
2. Modern time-domain simulation
A time-domain simulation of an aspect of the physical world attempts to model in a computer the time-evolution
of physical events in an accurate manner. Many techniques are available for such simulations, with Cellular Automata
(CA) techniques, and techniques that model the Partial Diﬀerential Equation (PDE) descriptions arguably the most
popular. In these time-domain simulations the evolution of the physical phenomena under study is represented at a
given time step by the state of all the cells/nodes in the computational domain. The time-evolution of the system is
realized when all cells in the computational domain are updated (usually in lock step) using the rules of the simulation
to produce a new set of states; which in turn represents the next moment in time. Each moment in time is typically
separated from the previous moment in time by an amount Δt.
In the remainder of this section I provide an overview of how we organize computational equipment when performing basic and/or advanced techniques for the time-domain simulation of physical events. Throughout this section
an attempt will be made to identify parts of our computer systems that have an analogous element in the physical
world; that is, the so-identiﬁed part of the computer plays a role in the simulation similar to the role played by its
analogous element in the actual physical computation that is Universe.
2.1. Computer as scratch pad
Modern computer systems use (computer) memory as a scratch pad wherein binary bits are manipulated by actions
in the Central Processing Unit (CPU). The memory of a typical computer system is segmented, so that one area of
memory will hold code (or instructions), and a separate area of memory will hold data. In a time-domain simulation,
the Arithmetic Logic Unit (ALU) actions are algorithmically designed to coordinate bit manipulations of the data that
correspond to how certain features of the physical world currently under study may evolve in time. When the simulation is running, the code is typically monolithic in that it would hardly ever be changed; but the data is constantly
updated to simulate the time-evolution of the solution.
Here then, for the single CPU model, during a time-domain simulation the data is the stuﬀ that will most resemble
physical “things” in Universe. The code acts in a way similar to how the physical laws (in Universe) act; in that the
code instructs the data what to do.
code and data Example:. In a computational electromagnetic time-domain simulation (e.g., see [7, 8]), data structures
are created to hold values of the electric and magnetic ﬁeld values. Typically, the data structures for a time-domain
simulation will discretize the space of the simulation into some type of space ﬁlling grid (e.g., a Cartesian xy- or
xyz-grid) and hold separate ﬁeld values for each vertex of the grid; thus creating the cells/nodes of the computational
domain. Here then, the data of the simulation is directly analogous to the electric ﬁeld E and the magnetic ﬁeld B.

J.F.J.F.
Nystrom
/ Procedia
1 (2012)
77–86
Nystrom
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10

79
3

The code of the simulation will provide (among other things) the eﬀect of the Maxwell Equations, and simulate the
propagation of the ﬁelds throughout the space of the time-domain simulation.
2.2. Variations on the basic theme
The basic model of computing can be extended to include many CPUs working on a large simulation at once.
A shared-memory multiprocessor has multiple CPUs (and/or multiple processor cores) that share a common scratch
pad (i.e., memory) wherein the data of the simulation is updated. A distributed-memory multiprocessor system will
partition the data of the simulation into separate partially disjoint scratch pads, and each CPU will modify/use it’s
local scratch pad.
For these multiprocessor conﬁgurations, the main diﬀerence is that each data can potentially get more attention
than in the single CPU conﬁguration. By dividing the data of the simulation among multiple CPUs, each CPU can
be responsible for a smaller number of data elements in the simulation. Compare this to the situation in Universe as
computation, where (we implicitly surmise that) each “thing” in Universe gets continuous attention.
2.3. Looking for a new theme
In every CPU model the data must be brought in from memory into the CPU. A newer technique for time-domain
simulation alleviates some of this overhead cost of moving data back and forth between memory and CPU. These
techniques utilize Field Programmable Gate Arrays (FPGA)[9]. In this computation model both the code of the
simulation and the data of the simulation are encoded in the circuits of the FPGA device. Each data element has its
own set of circuits, and the input signals and output signals of the encoded code circuits in the FPGA then represent
the data of the simulation. In this model, each data element gets constant attention from the circuits that are acting as
the code of the simulation. Thus, in this FPGA model for time-domain simulation, the physical laws that we usually
place in code are now programmed as circuits, thus creating a type of substrate that the data pass through.
This time-domain simulation model (which uses FPGA) is the closest technique available to the way we think
nature computes, to wit: the “things” of Universe computation are distributed throughout space (analogous to the data
being spread throughout the FPGA); and according to our best scientiﬁc understanding, the rules (or physical laws) of
the Universe computation act on all the “things” in space at all times (which is analogous to the situation where each
data element has its own set of dedicated circuits). Here I suggest we view the (code) circuits of the FPGA as a type
of simulation aether[10] which permeates the computational space3 .
2.4. Data sets and computational steering
In time-domain simulations it is often the case that multiple copies of the complete data set need to be maintained
in memory. This situation is a result of the techniques that are used to evolve the solutions (i.e., the data) in time. To
be speciﬁc, most CA-based simulations will update the data set of the simulation in lock step, meaning all cells have
the rules applied using the current state of the data set, and as we update each cell of the data set we must create a
separate data set containing the new values for each cell. Only after all cells (of the data set) have been updated can
the previous state of the solution be discarded and replaced with the new, time-evolved state. For PDE techniques, the
situation may be worse, where, for example, 3-4 copies of the data set may be required for high-order Runge-Kutta
techniques.
A time-domain simulation can be computationally steered based solely on initial conditions, or more elaborate
time-domain simulations can be steered interactively. Game systems should be viewed as time-domain simulations
proper if the dynamics of the game include physically based motions (e.g., like the FIFA 10 soccer game). A steered
time-domain simulation has data to represent the current state and algorithms that control the setting of the next state
based on current data and any of the possible from-outside-the-system inputs. These from-outside-the-system inputs
can steer the simulation to act in a particular manner (so directed by the inputs). In a FIFA 10 soccer game, for
example, I can steer a player with the ball to either “pass” or “shoot” depending on which of two buttons I press; and
the particular choice I take impacts the future of the simulation. Thus, time-domain games are a good example of
time-domain simulations that are steered interactively.
3 It is well-known that Maxwell reasoned that space provided a background substrate that supported the propagation of electromagnetic ﬁelds,
i.e., he supported the aether idea. In this way, the vacuum ﬁeld, whose zero state is supposed to contain an inﬁnite number of light-quanta[1],
should be considered such an aether ﬁeld.

80

J.F.
ProcediaComputer
Computer
Science
1 (2012)
77–86
J.F. Nystrom
Nystrom //Procedia
Science
00 (2010)
1–10

4

2.5. Computation requires power sources everywhere
The logic and sequential circuit operations underlying conventional computing equipment are implemented in
silico with transistor circuits that require a voltage source and ground connection available throughout the circuitry.
This is an oft forgotten fact of computation, in that the control decisions eﬀected in circuitry requires an immersion in
a voltage-ground setup.
When we look for an analogy between time-domain simulation and Universe as computation in this area, we do
ﬁnd (according to quantum mechanical descriptions of the so-called quantum vacuum[1]) that Universe also requires
a type of “power source” available throughout. Herein I refer to the actions of the quantum vacuum that act as the
“power source” for Universe as computation as the reality ﬂux[2, 3]. (This reality ﬂux involves all the antiparticles and
virtual particles that are part of the quantum vacuum actions, and which is, in fact, required in order for any process
at all to exist in Universe.)
2.6. The analogy between time-domain simulation and Universe as computation – so far
I have identiﬁed data to represent the “things” (of Universe as computation) and code to represent the physical
laws (that dictate what the “things” in the Universe as computation do). For FPGA-based simulations, code is replaced
by logic circuits, and these circuits that control the manipulation of data act as a simulation aether that the data pass
through. In Sect. 3 I will take an analogy to this computational setup and argue for a mechanism in Universe as
computation that serves a similar aether role. Such an aether would permeate all physical space and instruct the
“things” in Universe on how to behave (or “what to do”).
Modern computation equipment requires a power source and ground available throughout the circuitry. Modern
science insists that Universe has a similar requirement, in that actions available from the quantum vacuum need be
available throughout Universe in order for process to occur.
3. Universe as time-domain computation
When contemplating Universe as a computation, I submit it best if Universe is imagined as a seething dance of
energy events whose true dynamics should be couched at the Planck scale. This Planck scale is where Wheeler’s
G/c3 , and
quantum foam4 is envisioned to exist, and is a realm involving quantities such as Planck Length, L =
Planck Time, T = L/c. Such a Universe as computation would need a quantum description that would include the
so-called virtual particles (and antimatter) which seemingly pass in and out of physical existence, and that may even
deploy eﬀects both forward and backward in time. It is at this level we will ultimately have to think about when we
look at Universe as a time-domain computation. But to start, we review what modern science tells us currently.
In thinking about the analogy between Universe as computation and time-domain simulation we should be mindful
of the following:
◦ Universe seems to maintain only one copy of each “thing” (or energy event) as it evolves in time;
◦ The code that implements the physical rules operative in Universe seems to apply everywhere and to apply at
all times; and
◦ The distributed computation that is Universe requires a type of “power source” according to the best current
quantum mechanical descriptions[1] of the lowest level interactions in Universe.
In the remainder of this section I elaborate on this view of Universe as computation and begin by presenting
details on the part played by the quantum vacuum in Universe as computation (where I need use terms such as
Negative Universe and reality ﬂux). I describe Data of Universe computation and Code of Universe computation
using facts from modern science (which includes a concise synopsis of the Standard Model). I conclude this section
with a discussion on how to reason about Universe as a steered computation, including details on how Mind can be
part of Universe as computation, and comments on related ideas attributed to Penrose, Fuller, Rorty, Kim and Bohm.
4 In Wheeler’s words[11]: “I found myself forced to invent the idea of quantum foam, made up nor merely of particles popping into and out of
existence without limit, but of space-time itself churned into a lather of distorted geometry.”

J.F.J.F.
Nystrom
/ Procedia
1 (2012)
77–86
Nystrom
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10

81
5

3.1. Quantum vacuum implications and the reality ﬂux
The quantum vacuum is a term used to describe certain peculiar aspects in modern physical theory. It is the case,
for example, that negative energy electrons (i.e., positrons) and other antiparticles are required in the quantum theory
for Lorentz invariance (i.e., special relativity considerations) and causality[12]. Quantum theory suggests that there
are antiparticles and virtual photons that need to surround all physical electrons, and that these entities are assumed
to literally jump in and out of existence; which in turn creates a type of enormous reality ﬂux. This reality ﬂux is thus
required in order for any type of process in Universe to exist.
I use the term Negative Universe[13] to describe that aspect of the quantum vacuum where antiparticles ﬂux toand-fro when they are not in physical Universe. The thinking here is that Negative Universe has some necessary
non-spatio-temporal5 attribute/essence. The reality ﬂux that occurs between Negative Universe and physical Universe
serves a similar purpose in Universe computation that voltage diﬀerence (and current) play in modern computers.
Negative Universe thus acts as both a “source” and “ground” for the computation that is physical Universe, and
further, Negative Universe needs to connect with all of physical Universe at all times.
3.2. The Data of Universe computation
Consider now the diﬀerent levels at which we use science to reason about processes in Universe (e.g., with physics,
chemistry, and biology). These diﬀerent levels depend on processes at a lower level, and inﬂuence events at the higher
level. In this way, Universe as computation can be viewed as an emergent computation[4], where at minimum the
following levels of emergent behaviors are assumed to exist:
◦ Fundamental particles and forces combine to form certain primitive stable aggregate systems, which we refer
to as the chemical elements, H − U;
◦ These primitive aggregate systems then combine in certain ways to form molecules and compounds;
◦ Another important level of emergent behavior is the coordinated interaction of aggregate systems and forces
that produce the “things” involved in biology; and
◦ The ubiquitous carbon atom is a very important emergent behavior, as is the hydrogen bond, both key participants in the highest level of localized emergent behavior yet found, the phenomena of life.
Our current bottom level (sans Wheeler’s quantum foam) of data in Universe is incorporated in the so-called
Standard Model[15]. The Standard Model places “particles” into three categories: Leptons, Hadrons, and Gauge
Bosons. Leptons contain the electron, muon, and tau particles, and each of these has an associated neutrino, and all
six of these particles have an antiparticle. The hadrons are all built from quarks, and are separated into two types:
Mesons (which act as bosons), and Baryons (which act as fermions). There are six diﬀerent quarks used to build
hadrons, and each quark has an antiparticle. The Gauge Bosons are particles that make up the interaction ﬁelds for
the fundamental forces, and are thus viewed as the carriers of the forces. It is also assumed that some of the data of
Universe computation has certain fundamental characteristics; including mass, charge, spin, isospin, color, etc..
3.3. The Code of Universe computation
In a time-domain simulation the code is analogous to physical laws in Universe. I will be concerned with the
physical laws that pertain to time-dependent phenomena. Physical laws governing time-dependent behavior of the
data of Universe all involve forces. Modern science currently tracks four fundamental forces, where each force is
believed to be mediated by a gauge boson (i.e., the quanta of the interaction ﬁeld[16]). Thus, one view would suggest
that the code of Universe as computation is the stuﬀ that calculates:
◦ The gravitation interaction between all data items (which is possibly mediated by a graviton);
◦ The electromagnetic interaction between data items with charge (which is mediated by the photon);
◦ The weak interaction that acts between data items classiﬁed as leptons and quarks (which is mediated by the
W ± and Z ◦ gauge bosons); and
◦ The strong interaction between data items classiﬁed as quarks (which is mediated by gluons).
5 A Richard Rorty term[14]. Rorty surmises that Mind has/requires some type of non-spatio-temporal habitation. This (aforementioned) attribute
of Mind puts the computing required for Mind in Negative Universe.

82

J.F.
ProcediaComputer
Computer
Science
1 (2012)
77–86
J.F. Nystrom
Nystrom //Procedia
Science
00 (2010)
1–10

6

We could now have some debate over exactly at what level the code of Universe as computation operates. For
example, while the electric and magnetic ﬁelds in physical Universe can be quantized quantum mechanically in terms
of photon interactions, it suits modern science and engineering endeavors ﬁne to look at this code eﬀect at the level
of the Maxwell Equations (which describe the rules of the electromagnetic interaction at the ﬁeld level). To decide at
which level to think about the code of Universe as computation, consider how the code of Universe as computation
interacts with the data of Universe as computation: To wit; the data of Universe as computation is embedded in a type
of substrate called space-time, and all data of Universe as computation must have access to the reality ﬂux.
code and data Example:. In the Universe as computation, for data with a characteristic of charge, the reality ﬂux
supports the activity that propagates interaction photons between data items. It is then the aggregate behavior of the
interaction photons that is the ﬁeld phenomena we can measure and describe using the Maxwell Equations.
3.4. Universe as steered computation
In modern science, all physical laws that involve forces are causal laws, with the associated cause-and-eﬀect
on the “things” in Universe dictating the time-evolved behavior of said “things.” However, not all phenomena we
encounter in physical Universe seems to conform to this causal picture. For example, dig this: I turn my head, I raise
a ﬁnger, and then take a wink; here my mental processes seem to dictate (or steer) some actions in the machine that
is me. The signals from my brain propagate through my spinal cord and fan out in my body to eﬀect movements
in the appropriate muscles in a causal manner to be sure. But what of the initial “thought” wherein I (apparently?)
decided to make this gesture? This is an example of Mind involved in the computational steering of the Universe as
computation.
In no small part due to his view concerning the non-computability of Mind, Sir Roger Penrose has developed a
model[17] for Mind in Universe as computation that involves a lot of structure outside of physical Universe proper.
Hameroﬀ explains it thusly[18], “. . . proto-conscious experience is a basic property of physical reality accessible
to a quantum process associated with brain activity. The proposed process is Roger Penrose’s objective reduction
(OR), a self-organizing ‘collapse’ of the quantum wave function related to instability at the most basic level of spacetime geometry.” For more speciﬁcs, including a description of the Orch-OR process, we continue from [18]: “In
the Penrose-Hameroﬀ model of ‘orchestrated objective reduction’ (‘Orch OR’), OR quantum computation occurs in
cytoskeletal microtubules within the brain’s neurons and links cognition with proto-conscious experience and Platonic values embedded in spacetime geometry.” Penrose makes use of a Platonic World outside of physical Universe
for the abode of things needed for mental processes. In this paper, Penrose’s Platonic World will ﬁt into the nonspatio-temporal abode of Negative Universe. The Penrose-Hameroﬀ Orch-OR mechanism, being a type of connection
between Negative Universe and brain (in physical Universe), can thus be thought of as being part of the reality ﬂux.
Penrose thus places key operations associated with Mind in Negative Universe. Fuller[13] explicitly places the
forms associated with thought in Negative Universe, and Rorty[14] does so implicitly by virtue of requiring some type
of non-spatio-temporal abode for Mind. This split between physical Universe and some other thing outside (of physical
Universe) should be reminiscent of the classic Cartesian dualism of mind and matter. As Symons explains[19], many
philosophers hold such a view now, and suggests Jaegwon Kim thinks “the world is split in two with minds on one side
and stuﬀ on the other.” Here, Kim thinks of the physical Universe as being made up of a single basic stuﬀ (energy?).
Throughout this paper I have presented a case for a similar type of dualism (with Mind in Negative Universe), and
shown that modern physical theory may implicitly assume same by virtue of use of the quantum vacuum. Negative
Universe also supports Bohm’s idea of an Implicate Order, which supposed[20] “. . . that the whole universe is in some
way enfolded in everything and that each thing is enfolded in the whole.”
We need the concept of Negative Universe on the other side of the reality ﬂux, but we should be careful about
any assumptions we make about the structure of Negative Universe beyond the requirements that have been laid out
herein. We do not have techniques which can probe the architecture of the non-spatio-temporal abode that is Negative
Universe. The computational analogy suggests that the code of Universe as computation resides in Negative Universe
and it is via actions of the reality ﬂux that this code produces eﬀects in physical Universe that we describe with the
physical laws of modern science. To be sure, we do not know the programming language with which this code is
written, but the Standard Model views the eﬀects of the code in terms of gauge bosons that make up the interaction
ﬁelds between the base data of Universe as computation, and emergent eﬀects could possibly drive the rest.

J.F.J.F.
Nystrom
/ Procedia
1 (2012)
77–86
Nystrom
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10

83
7

4. Discussion
Computation changes philosophy, and computation has changed science. Modern science no longer need rely
solely on exact (or perturbative) analytical techniques to investigate how nature behaves; thus we can now contemplate
Universe as computation. But computational eﬀorts which would purport to start with leptons and hadrons (or below
in the quantum foam) and calculate results up to the highest level are largely viewed as impractical. However, this
does not mean that the natural philosopher should not still endeavor to understand and/or at least think about Universe
as computation beginning at a lowest-level. It is hoped that the analysis provided in this paper can help us better
understand the issues associated with a Universe as computation.
This paper has developed a deep analogy between modern computational techniques and a view of Universe as
computation. The main contributions of this paper are related to the identiﬁcation of the reality ﬂux as the “power
source” for Universe as computation. Other key points include:
◦ The obvious analogy between data of a simulation with the “things” in Universe, and the analogy between code
of a simulation and the physical laws we see operative in Universe;
◦ The identiﬁcation of time-domain Game simulations as the quintessential example for simulations that are
computationally steered from-outside-the-system;
◦ The analogy between ﬁrmware-based simulation employing FPGA devices and physical theories that employ
the concept of an aether; and
◦ The use of the concept of a Negative Universe as the abode for the stuﬀ of the reality ﬂux.
In reviewing how modern science views the code and data of Universe as computation, we found that it is through
the reality ﬂux that the data of Universe as computation is instructed what to do by the code of Universe as computation. This is analogous to how code in a time-domain simulation instructs the CPU how to move around and
manipulate data in a time-domain simulation. To be speciﬁc, the code in a time-domain simulation, while typically
written in a high-level language, is translated and stored in memory in a machine language (ML) representation. It
is the ML that controls (or directly represents via microcode interpretation) the electrical signaling that controls all
aspects of the hardware operation; including which registers get gated onto the ALU buses and which arithmetic operation is to be performed each step by the ALU. Thus it is appropriate to ask: At what level does the code of Universe
as computation operate? The code of Universe as computation needs to control the involvement of the reality ﬂux in
support of higher level manifested physical laws; speciﬁcally, this code needs to manage the involvement of the gauge
bosons that presumably mediate the fundamental forces (and the associated reality ﬂux support thereof).
By virtue of the availability of Negative Universe, whence emerges into Universe as computation the reality ﬂux,
space is ﬁlled with the code of Universe as computation, and this is exactly what aether theories[2, 10] were created
to describe. Modern particle and nuclear physics has again returned to this type of aether framework with the use of
the Higg’s ﬁeld[21] (which is a mechanism that is distributed throughout all space and wherefrom matter is endowed
with mass). For modern time-domain simulation techniques, a computational analogy to physical space as an aether
tracks closely with what happens in FPGA-based simulations. In FPGA-based simulations, the data is immersed in a
computational substrate that provides the eﬀects of code, dictating the time-evolution of the data. The code circuits
of the FPGA are programmed utilizing development tools from from-outside-the-system, which implement circuit
conﬁgurations used in the FPGA for both code and data - thus the FPGA acts as a true computational aether.
4.1. on how nature computes
I have showed how modern physical theory presumes a type of “power source” that is available to support Universe
operation. We must combine both the reality ﬂux and Negative Universe concepts to account for the actions of the
quantum vacuum. Smolin, in his eﬀort to explain how we might ﬁgure out how Universe operates[22], wants to hold
to the principle “that there is nothing outside the universe.” But how can this be if he utilizes actions of the quantum
vacuum in his physical theory? Where does he think all that stuﬀ of the reality ﬂux goes when it is not in physical
Universe? I have identiﬁed Negative Universe as the abode for the stuﬀ of the reality ﬂux and Mind. Penrose’s
model[17] for Universe also utilizes something outside physical Universe, his so-called Platonic World. Penrose and
Hameroﬀ connect the Platonic World with the physical Universe with the so-called Orch-OR mechanism (which is
a connection between Mind and brain - allowing for consciousness). Here we should view Orch-OR as supporting a
computational steering mechanism operating out of Negative Universe via the reality ﬂux.

84

J.F.
ProcediaComputer
Computer
Science
1 (2012)
77–86
J.F. Nystrom
Nystrom //Procedia
Science
00 (2010)
1–10

8

Figure 1: Jitterbug oscillation example between VE and icosahedron states. (Courtesy of R.W. Gray.)

Modern science frames gravity as a radiative force mediated by a graviton. However, even with some of the most
elaborate experiments ever devised, we cannot detect gravitational waves or gravitons. Fuller envisioned gravity to
have a tensional characteristic[6, 13], and viewed gravity as the instantaneous most economical interrelationship of all
energy events. This idea that gravity has a tensional character instead of a radiative character means that gravitational
interaction between data with the characteristic of mass/energy is not reliant on the involvement of gauge bosons.
Here then we place the mechanism for implementing an instantaneous gravitational interaction in Negative Universe
– and the non-spatio-temporal nature of this abode should preclude concerns over the intractability of the many-body
problem that gravity solves every instant of time in the Universe as computation. Furthermore, with gravity now
surmised to have its functioning in Negative Universe – like Mind does, gravity can now be viewed as a computational
steering mechanism for Universe as computation.
4.2. computational cosmography
In previous papers[5, 6] I described the computational cosmography (CC). The data of the CC are based on spaceenclosing primitive forms. The primitive polyhedral forms combine to form aggregate systems. In a full dynamical
system the larger aggregate systems would evolve correspondence with data of Universe as computation, and, for
example, exhibit similar fundamental characteristics (e.g., something we can call charge). From [5]: “CC is a computational vision which utilizes emergence and the geometrical system described in Fuller’s synergetic geometry to
produce simulations whose higher-level behaviors resemble physical phenomena, and whose lower-level interactions
are intended to help us understand this Universe better.”
code and data Example:. In the computational cosmography model the data resides in an active lattice/substrate.
The active substrate, based on synergetic geometry principles[13], is formed in the ideal by interconnecting Vector
Equilibrium (VE) cells into a substrate resembling a face-centered cubic (FCC) lattice. In the CC interplay of space
and matter[5] the active lattice substrate (which in theory resembles a spin network like that used in loop quantum
gravity[22]), needs to jitterbug6 slightly at a node when responding to data. This deformation/jitterbug activity of the
lattice (driven by an analogous CC-style reality ﬂux) would induce the creation of new nodes, which in turn causes
the “space” of the computation to expand from with-everywhere [sic]. The code of the CC needs to encompass
◦ The rules governing the interactions of the polyhedral forms with the active substrate;
◦ The rules governing the jitterbug activity of the foamy-like active and evolving substrate; and
◦ The rules that maintain tensional attributes associated with the evolving background substrate in order to provide
an eﬀect in the computation that we would label as gravity.
The CC model is similar to the situation I describe for the code and data of Universe as computation, with the
caveat that the “things” in the quantum foam are based on geometrical principles, as is the structure of the underlying
space itself. The overall CC vision agrees with Feynman’s conjecture that the operation of nature should be simple like
the activity of a chequer board[23], rather than having nature solving equations to decide what to do next. Hameroﬀ
gives references and suggests[18] that “Smolin likens spin network volumes to Leibniz monads and suggests that selforganizing processes at this level constitute a ﬂow of time, . . . ”. With a few (geometrical and aether related) caveats,
this is similar to the picture the CC model is meant to present.
6 Jitterbug is Fuller’s term for the deforming action a VE can take as it goes from a cuboctahedron phase, through an icosahedron phase, and
potentially all the way to an octahedron phase. Figure 1 contains a jitterbug example showing a VE oscillating from VE to icosahedron, back to the
VE state, and then to the other icosahedron.

J.F.J.F.
Nystrom
/ Procedia
1 (2012)
77–86
Nystrom
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10
e3

85
9

e5
e4

e2

e6

e1

Figure 2: VE cell with chosen vector basis.

I have previously placed electromagnetic phenomena on an FCC lattice made from vector equilibrium cells[5, 7,
8]. Figure 2 shows a VE cell with the vector basis I use for this computational electromagnetic solver. Here, six
basis vectors are used to encode the electromagnetic ﬁelds at each node. Thus electromagnetics can be included in
the CC model. I continue development on other aspects of the CC model, in albeit small steps. Because the CC
utilizes geometric forms (as opposed to values at nodes) for the big bits[24] of the computation, it is important to
have techniques to control the movement of forms on lattices. A basic methodology was derived[25] to describe
the random walks of polygons in two-dimensions. We have extended that work to include the random walks of
tetrahedrons within a FCC lattice[26]. Since the FCC lattice is an interconnected grid of tetrahedra and octahedra,
when a tetrahedron walks, it must walk around octahedral voids. Here a tetrahedron can take one of a possible 23
moves each step (which includes a possible null move) and still maintain at minimum one common vertex with the
previous location. I will next consider the random walks of A-modules and B-modules within the FCC lattice. These
modules are fundamental, as Fuller found that any space-ﬁlling object (e.g., a cube) has a ratio of 2 A-modules to
every B-module. (For an overview of these modules and the CC, see [5, 6].)
Further stages needed in order to develop a robust CC model may start with the creation of interaction rules to
produce a Game of Life[27]-type CA using geometrical forms on a ﬁducial FCC lattice. Eventually however we must
address the requirements itemized in the code and data Example in this section. One key diﬀerence between this
sample Game of Life CA of geometrical forms and the CC model is that the CC model proposes an active background
substrate (as opposed to a ﬁducial/ﬁxed background lattice) wherein the aggregate polyhedra systems reside and
transform. To wit; The interaction of aggregate forms (read data) with the substrate induces jitterbug activities at
nodes of the substrate, and in turn this causes the emergence of new nodes in the substrate. It is in an analogous
way that I would propose that “matter makes space” in a Universe as computation, which in itself explains why all
galaxy sized entities in our physical Universe are receding from each other. This jitterbug-based space expansion
(from with-everywhere) can also be used to explain the how of momentum conservation. As the substrate evolves, we
need maintain tensional attributes for elements of the substrate, which would assist with a code eﬀect that we could
label as gravity. In this way, gravity in the CC has a tensional characteristic, and thus is not a radiative-based force
involving a gauge boson.
Associated with the introduction of the active substrate we should also require rules that govern a Negative space
(of the computation) and an accompanying CC-reality ﬂux. This CC-reality ﬂux would provide needed forms (and
anti-forms) to implement the code of the CC. When we place geometrical forms into this would-be CC system, we
may ﬁnd that we also need create an accompanying anti-form, keep track of the anti-form in the Negative space, and
establish some connection between form and anti-form using the CC-reality ﬂux. These type of initial conditions
(involving forms and anti-forms) could create in the large an oscillation of forms into and out of the real-space of the
computation.
Lastly, we would want to create visualizations and take measurements of aggregate systems behavior. If, in an
analogous manner to Universe as computation, these base forms of the CC are at an extremely low-level, then the
measurement techniques would need summarize large scale behaviors and catalog consistent patterns of activity.
Once these type of techniques are established, we could look for familiar things we ﬁnd in our Universe, and then
wonder, correctly, whether this is how nature computes.

86

J.F. Nystrom
Nystrom/ /Procedia
ProcediaComputer
Computer
Science
1 (2012)
77–86
J.F.
Science
00 (2010)
1–10

10

Dedication
R. Buckminster Fuller, that funny little man who imagined Things and No Things; who was convinced
that nature has an underlying geometrical basis; who envisioned Universe as an entity operating in pure
principle only, and who also intuited the need for a Negative Universe. This humble work is dedicated to
Bucky, well known in the later years of his life as the world’s friendly genius. Thanks for the inspiration,
thanks for your synergetic geometry artifacts, and thanks most of all for the example you set.
[1] P.W. Milonni, The Quantum Vacuum: An Introduction to Quantum Electrodynamics. Academic Press (1993)
[2] J.F. Nystrom, Universe as Computation, Modern Aether Theory, and the Funda-Mentalistic Mind, Consciousness Research Abstracts of Toward
a Science of Consciousness 2008, 161-162 (2008)
[3] J.F. Nystrom, Teleological Mechanism for the Simulation Argument, Consciousness Research Abstracts of Quantum Mind 2007, 60-61 (2007)
[4] Stephanie Forrest, Emergent Computation: Self-organizing, collective, and cooperative phenomena in natural and artiﬁcial computing networks, Emergent Computation, MIT/North-Holland (1991)
[5] J.F. Nystrom, On the Omni-directional Emergence of Form in Computation, Lecture Notes in Computer Science, 3305, 632-641 (2004)
[6] J.F. Nystrom, Tensional computation: Further musings on the computational cosmography, Applied Mathematics and Computation, 120 ,
211-225 (2001)
[7] J.F. Nystrom, The Isotropic Vector Field Decomposition Methodology, Conference Proceedings of the 18th Annual Review of Progress in
Applied Computational Electromagnetics (2002)
[8] J.F. Nystrom, Grid Construction and Boundary Condition Implementation for the Isotropic Vector Field Decomposition Methodology, Conference Proceedings of the 19th Annual Review of Progress in Applied Computational Electromagnetics (2003)
[9] S. Murtaza, A.G. Hoekstra, and P.M.A. Sloot, Performance modeling of 2D Cellular Automata on FPGA, Conference Proceedings of the 17th
International Conference on Field Programmable Logic and Applications (2007)
[10] E.T. Whittaker, A History of the Theories of Aether and Electricity (2 volumes). Harper Torchbooks Reprint (1960)
[11] J.A. Wheeler, with K. Ford, Geons, Black Holes and Quantum Foam: A Life in Physics, W.W. Norton (2000)
[12] S. Weinberg, The Quantum Theory of Fields: Volume I Foundations, Cambridge University Press (1995)
[13] R.B. Fuller, Synergetics: Explorations in the Geometry of Thinking. MacMillan (1975)
[14] R. Rorty, Philosophy and the Mirror of Nature, Princeton University Press (1979)
[15] H. Frauenfelder and E.M. Henley, Subatomic Physics, Prentice Hall (1991)
[16] S.Y. Auyang, How is Quantum Field Theory Possible?, Oxford University Press (1995)
[17] R. Penrose, The Large, the Small, and the Human Mind, Cambridge University Press (1997)
[18] S.R. Hameroﬀ, Funda-Mentality: Is the Conscious Mind Subtly Linked To A Basic Level Of The Universe?, Trends in Cognitive Sciences,
2, 119-127 (1998)
[19] J. Symons, Computational Models of Emergent Properties, Minds & Machines, 18, 475-491 (2008)
[20] D. Bohm and B.J. Hiley, The undivided universe: An ontological interpretation of quantum theory, Routledge (1993)
[21] G. Bernardi, M. Carena, and T. Junk, Higgs bosons: theory and searches, Reviews of Particle Data Group: Hypothetical particles and
Concepts (2007)
[22] L. Smolin, Three Roads to Quantum Gravity, Basic Books (2001)
[23] R. Feynman, The Character of Physical Law, MIT Press (1967)
[24] P.H. Huyck and N.W. Kremenak, Design & Memory, McGraw-Hill (1980)
[25] J.F. Nystrom, On the Random Walks of Geometrical Forms in Two-Dimensions, Conference Proceedings of the 2008 International Conference
on Scientiﬁc Computing (2008)
[26] J.F. Nystrom and J. C. Robinson, Random Walk of a Tetrahedron in an FCC Lattice, (to be submitted to) CA-CSC’10: 2nd Cellular Automata,
Theory and Applications Workshop (2010)
[27] J.L. Casti, Alternate Realities: Mathematical Models of Nature and Man, Wiley (1989)

