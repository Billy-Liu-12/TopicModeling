Procedia Computer Science
Volume 51, 2015, Pages 2822–2826
ICCS 2015 International Conference On Computational Science

Automatic Query Driven Data Modelling in Cassandra
Roger Hernandez1 , Yolanda Becerra1,2 , Jordi Torres1,2 , and Eduard Ayguad´e1,2
1

2

Barcelona Supercomputing Center, Barcelona, Spain
roger.hernandez@bsc.es
Universitat Polit`ecnica de Catalunya - Barcelona Tech, Barcelona, Spain
yolandab@ac.upc.edu
torres@ac.upc.edu
eduard@ac.upc.edu

Abstract
Non-relational databases have recently been the preferred choice when it comes to dealing with
BigData challenges, but their performance is very sensitive to the chosen data organisations. We
have seen diﬀerences of over 70 times in response time for the same query on diﬀerent models.
This brings users the need to be fully conscious of the queries they intend to serve in order to
design their data model. The common practice then, is to replicate data into diﬀerent models
designed to ﬁt diﬀerent query requirements. In this scenario, the user is in charge of the code
implementation required to keep consistency between the diﬀerent data replicas. We propose
and design a mechanism and a prototype to provide users with transparent management, where
queries are matched with a well-performing model option. Additionally, we propose to do so by
transforming the replication mechanism into a heterogeneous replication one, in order to avoid
squandering disk space while keeping the availability and reliability features.
Keywords: big data, nosql, cassandra, models, dynamic model selection, heterogeneous replication

1

Introduction

Modelling for NoSQL databases becomes a complex task when trying to design the database
for good performance as the programmer has to consider all the queries that will be executed
on the database beforehand, to ensure that every query is accommodated by some model in
order to reduce heavy variabilities in response time and server load. The process requires a lot
of database and query awareness and it is heavily bound to the models that are being queried.
For example, for the case of the key-value database of Cassandra if a query is not focused on
row keys its performance will be very poor. In fact, it may even not be possible to execute some
queries if the data schema has not been carefully designed. We studied these behaviours in our
previous work [6] and determined the existence of aﬃnities between models and queries that
favoured their row structure, reaﬃrming ourselves in that in order to seek optimal performance,
the ideal would be to have a model for each type of query.
2822

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2015.05.441

Query Driven Data Modelling

R. Hernandez, Y. Becerra, J. Torres and E. Ayguad´e

Figure 1: Heterogeneous replication for a Cassandra cluster with 3 diﬀerent Conceptual Families
and replication factor of 3
Nevertheless, all this management falls on the user responsibility, therefore he would manually require to build all the diﬀerent replicas. This implies further hassle such as assuming
the extra redundancy, maintaining the consistency between all the models that share common
data when it had to be inserted or changed, or being mindful about performance issues or extra
load time when having to modify database data since it would involve to do one write per data
replica instead of a single write to the database.
In this paper we propose to provide databases with automatic Query Driven Data Modelling
(QDDM), which is meant to remove these shortcomings and inconveniences from the user. On
one hand, by modelling the schemas automatically, and on the other hand, by receiving incoming
queries, analysing them, and choosing which of the available models is the most suited to serve
the query with the best performance outcome. In fact, in some cases where the query was
formerly invalid in regard to database structure, the user may even get a response because
QDDM could mutate it into a query for a model that can serve what the client was asking for.
Additionally, the system will also manage the heterogeneous replication mechanisms it plans
to incorporate. This will relieve the user from having to manually manage replication and keep
consistency in the database. Moreover, the implementation of QDDM will not require extra
disk space as we propose to exploit the heterogeneous replicas for reliability and availability
ends, which merges all the replication beneﬁts into a single layer of physical replication.
In order to show the feasibility and potential beneﬁts of this idea, we have implemented and
evaluated a prototype that implements the described QDDM system in the Apache Cassandra
database.

2

Query Driven Data Modelling

Our proposal consists in making use of these inherent mechanisms towards oﬀering diﬀerent data
layouts that suit diﬀerent queries, altogether with choosing which of these layouts is the most
suited one for each query transparently to the database users. It also aims to integrate model
diversity and replication used in availability and reliability, into a database where replication
becomes heterogeneous.
Take as an example the architecture of the Cassandra database. In Figure 1 we picture the
data distribution layout when Cassandra evolves with QDDM. With the new approach data
is still replicated, however due to the heterogeneity it gains it becomes able to provide the
2823

Query Driven Data Modelling

R. Hernandez, Y. Becerra, J. Torres and E. Ayguad´e

Figure 2: Generic query path through the QDDMP

database with more options that will help increase performance.
A portion of data is identiﬁed by a key that determines which nodes host each of the data
replicas. With the addition of QDDM, data organisation and sharding will vary for the replicas,
thus the query will be, if required, automatically translated before seeking the nodes hosting
the requested data.

2.1

System prototype

In Figure 2 we can see the overall integration of our implementation for a Query Driven Data
Modelling Prototype (QDDMP) within Cassandra. This build will allow us to evaluate the
beneﬁts of our proposal with an implementation external to Cassandra, at the client side.
However, it should be noted that in a production environment it should be integrated within
the database. This external prototype acts practically analogous as having QDDM built into
Cassandra, thus we will be able to get preliminary results to show the potential beneﬁts of
QDDM.
The QDDM prototype intercepts the query before it reaches Cassandra. The query is
parsed, and then analysed. If it consists of a query that modiﬁes the model structure in any
way (CREATE, ALTER or DROP, TABLE or INDEX. . . ) the QDDM metadata is updated
with the new information and then the query is forwarded to Cassandra. Otherwise, if the query
is just managing data (SELECT, INSERT, UPDATE, DELETE. . . ) it will also be analysed
before reaching Cassandra, and rebuilt in order to suit the QDDM prototype data models that
the metadata deﬁnes for the data involved in the query, and the consistency levels the user
requested.
2.1.1

QDDM management metadata

To simulate this system, we have implemented the QDDMP as a wrapper of the DataStax
Java Driver used by the client application. The QDDMP stores some metadata that keeps
information of the models and relations between them in the database. The QDDMP adds a
new category within the Cassandra modelling tools, that of Conceptual Family. A Conceptual
Family consists of a group of tables that represent the same dataset but that are modelled in
a diﬀerent organisation, therefore a two-way translation is possible between every table in a
Conceptual Family. In fact, the translation process is internal within the QDDMP, allowing the
system to mutate between tables at any time it is required to keep the database functionalities
2824

Query Driven Data Modelling

R. Hernandez, Y. Becerra, J. Torres and E. Ayguad´e

working, without the need of external assistance.
2.1.2

Query path

After determining whether the query is aﬃne or not, it may be mutated into other model queries
depending on whether if it is a read or a write, the consistency policy requirements, or if there
are opportunities to increase performance. If it is reading from the database, data will have to
be fetched from all the replicas in order to check their validity. Otherwise, if it is writing to the
database, data will need to be written speciﬁcally to each model. Once the queries have been
mutated they will be forwarded to Cassandra.
In this prototype we have implemented two of the consistency policies oﬀered by Cassandra
when writing data: one that waits until data have been written in every replica (ALL), and
one that waits until they have been written to at least one replica, being that the one of the
queried model, if it existed (PRIMARY ).
For the ALL consistency level, data is written to the database in parallel by using one thread
for each update. In the case of consistency PRIMARY a thread is used to write the data to
the main replica, and the rest of updates are put in a queue for pending writes. The elements
of the queue are executed in background threads to the user’s choice of parallelism level. Since,
due to internals of CQL which limits the INSERT query to one row, elements are written one
by one into the database the model that is being written will not have any special impact on
performance.
On the other hand, if the query is just attempting to read from the database (SELECT), it
will be analysed and matched against the QDDMP metadata corresponding to the Conceptual
Family of the queried model in order to see if there is a better option to achieve the same
results. If there is not, the QDDMP just lets the query through, however if the QDDMP
detects improvement can be made, it will mutate the query into a more appropriate one that
suits the model options it can oﬀer. The decision to determine if a model is more suitable than
another is based on whether the query is being made by row key or not, this is a well known
key-value database practice[3]. Other queries are, even if the database model accepts them,
highly discouraged due to the expected high overhead this would suppose. Data retrieved by a
mutated query will be returned in a format that matches the former query by means of a result
translation process.

3

Related work

When having replicated heterogeneous data or there are internal model references, and the
database system cannot manage this automatically, the clients have to be conscious of the
possible changes on this data. This has been proven to be a major hassle in many situations, and
the database always has better resources and solutions to make the changes in a more optimal
way, such as triggers [4] or rule systems [10] in SQL databases. However, updating these tables
is not straightforward because one write to the database can translate into executing a piece of
code that writes into multiple tables, thus performance impacts have to be carefully planned.
Moreover, these challenges become even more delicate when dealing with a distributed system
where besides performance, reliability, availability, synchronization and other constraints have
to be considered [9], [5].
However, even with the existence of materialised views, deciding which materialised views
to create, and to maintain them, is a challenge on itself. Part of a QDDM system is focused
on analysing queries and existing models to create new models. Research on SQL databases
2825

Query Driven Data Modelling

R. Hernandez, Y. Becerra, J. Torres and E. Ayguad´e

to automate schema building revolves around index creation [2] and materialised views [1] in
SQL systems, recently extending the automatic modelling decisions to the NoSQL ﬁeld [8].
Striving for even more automatisation, a lot of work has been put into DynaMat [7], a system
that dynamically materializes views and maintains them. However, unlike ours, DynaMat is
a relational solution, and furthermore it focuses on deciding which queries to materialise in
order to save disk by creating only those that are going to be used enough times to cover
for the drawbacks. To update data in order to keep consistency they propose oﬄine methods,
whilst in our approach updates are done online without overhead additions. Another important
diﬀerence between DynaMat and QDDM is that, even though we provide a disk resource friendly
solution, saving disk space is not our main goal, since replicated data is part of the nature in
highly distributed storage in order to cover availability and reliability concerns.

Acknowledgments
The authors would like to thank Jonathan Ellis and the DataStax community for their insight
into our work. This work is partially supported by the BSC-CNS Severo Ochoa program, the
TIN2012-34557 project, with funding from the Spanish Ministry of Economy and Competitivity
and the European Union’s FEDER funds, and the SGR 2014-SGR-1051.

References
[1] Sanjay Agrawal, Surajit Chaudhuri, and Vivek R. Narasayya. Automated selection of materialized
views and indexes in sql databases. In Proceedings of the 26th International Conference on Very
Large Data Bases, pages 496–505, San Francisco, CA, USA, 2000. Morgan Kaufmann Publishers
Inc.
[2] Surajit Chaudhuri and Vivek R. Narasayya. An eﬃcient cost-driven index selection tool for microsoft sql server. In Proceedings of the 23rd International Conference on Very Large Data Bases,
pages 146–155, San Francisco, CA, USA, 1997. Morgan Kaufmann Publishers Inc.
[3] DataStax.
Best practices in deploying and managing datastax enterprise.
http://www.datastax.com/wp-content/uploads/2014/04/WP-DataStax-Enterprise-BestPractices.pdf.
[4] Kapali P. Eswaran. Aspects of a trigger subsystem in an integrated database system. In Proceedings
of the 2Nd International Conference on Software Engineering, pages 243–250, Los Alamitos, CA,
USA, 1976. IEEE Computer Society Press.
[5] Martin Hentschel, Maxim Grinev, and Donald Kossmann. Building data ﬂows using distributed
key-value stores. Technical Report 742, Systems Group, Department of Computer Science, ETH
Zurich, October 2011.
[6] Roger Hernandez, Cesare Cugnasco, Yolanda Becerra, Jordi Torres, and Eduard Ayguade. Experiences of using cassandra for molecular dynamics simulations. In Proceedings of the 23rd Euromicro
International Conference on Parallel, Distributed and Network-Based Processing, 2015.
[7] Yannis Kotidis and Nick Roussopoulos. Dynamat: A dynamic view management system for data
warehouses. SIGMOD Rec., 28(2):371–382, June 1999.
[8] Michael J. Mior. Automated schema design for nosql databases. In Proceedings of the 2014
SIGMOD PhD Symposium, pages 41–45, New York, NY, USA, 2014. ACM.
[9] A. Segev and J. Park. Updating distributed materialized views. IEEE Trans. on Knowl. and Data
Eng., 1(2):173–184, June 1989.
[10] Jennifer Widom. The starburst active database rule system. IEEE Trans. on Knowl. and Data
Eng., 8(4):583–595, August 1996.

2826

