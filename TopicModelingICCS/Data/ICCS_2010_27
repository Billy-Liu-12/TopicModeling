Procedia Computer
Science
Procedia Computer
Procedia
ComputerScience
Science001(2010)
(2012)1–10
1267–1276

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Towards policies for data insertion in dynamic data driven
application systems: a case study sudden changes in wildland ﬁre
Roque Rodr´ıguez, Ana Cort´es, Tom´as Margalef
Computer Architecture and Operating Systems Department, Universitat Aut´onoma de Barcelona, Bellaterra, Spain

Abstract
We have applied the Dynamic Data Driven Application System (DDDAS) methodology to predict wildﬁre propagation. Our goal is to build a system that dynamically adapts to sudden changes in environmental conditions. For
this purpose, we are building a parallel wildﬁre prediction method, which is able to assimilate real-time data to be
injected in the prediction process at execution time. This data-injection needs to be intelligent in order noy to disturb
the simulation process outputs. In this paper, we propose a policy for data insertion using a statistical approach and
we design a set of experiments based on California wildﬁre where Santa Ana winds generate the ideal conditions for
sudden changes in ﬁre behavior.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Dynamic Data Driven Application System, Parallel computing, Forest ﬁre prediction, HPC, Evolutionary
computing, Data insertion policy

1. Introduction
During a wildﬁre, sudden changes in environmental conditions can result in dramatic changes in ﬁre behavior.
These changes represent a signiﬁcant risk for the people who are ﬁghting against the forest ﬁre. The wildﬁre in
Slovak Paradise National Park in 2000 is a case where people were entrapped by ﬁre (six people’s lives lost) [1].
The technical analysis of this catastrophe concluded that the main factors which determined the mentioned extreme
ﬁre behavior were a sudden change of the wind speed combined to an oval shape of the valley with abrupt slopes
resulting in an intense growth in the uphill direction. Another example of the tragic consequences of sudden changes
in environmental conditions is the wildﬁre ﬁre produced last summer (21 July 2009) in Horta de Sant Joan - Catalonia
(Spain) where four ﬁreﬁghters died. The ﬁreﬁghters were reportedly trapped during a change in wind’s direction,
which blocked their escape route on an 1975 acres forest ﬁre in El Port National Park.
Southern California is one of the most prone regions in North America to the development of large wildﬁres, due to
a unique combination of environmental conditions that are favorable to the development of large ﬁres such as volatile
fuels, dense fuel growth, steep terrain, and recurrent droughts. The inﬂuence of the Santa Ana winds further increases
the risk of large ﬁres. In a Santa Ana event [2], the normal onshore marine airﬂow is replaced by oﬀshore, downs lope
Email addresses: dario@caos.uab.es (Roque Rodr´ıguez), ana.cortes@uab.es (Ana Cort´es), tomas.margalef@uab.es (Tom´as
Margalef)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.141

1268

R.
Rodr´ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

2

winds. The combination of high wind speeds, dry continental air, clear skies, and increased temperatures can rapidly
dry fuels. The prevailing conditions during a Santa Ana event, including low relative humidity, high wind speed, and
warming, can result in “explosive” burning conditions [3, 4]. This means, the probability of sudden changes in wind
conditions is very high.
Dynamic Data Driven Application System (DDDAS) [5, 6] for forest ﬁre spread prediction arises as a relevant tool
to approach this kind of catastrophes. Basically, a DDDAS is a paradigm whereby application (or simulations) and
measurements become a symbiotic feedback control system. DDDAS entails the ability to dynamically incorporate
additional data into an executing application and, in reverse, the ability of an application to dynamically steer the
measurement process. Such capabilities improve the classical forest ﬁre spread prediction because it allows guiding
the simulation by injecting real time data during the prediction process. However, an arbitrarily data injection into the
system could not be always proﬁtable. In order to maximize the improvements provided by real time data injection,
data injection policies should be designed to determine an acceptable variability threshold for the input variable, which
determines whether to inject the data or not.
2. Related work
Classically, forest ﬁre spread prediction has been performed by executing a plane ﬁre simulator (FS) initialized
with the required input data such as initial ﬁre front, vegetation type, meteorological conditions, interval time to be
simulated and so on. The prediction provided by this basic scheme usually generates erroneously outputs that do not
match the real ﬁre propagation. For this prediction scheme, the interval time (t0 -t1 ), where t0 is the initial instant
time and t1 is the instant time at which the ﬁre spread is going to be predicted, is known as the Prediction phase or
Prediction stage. In our research, we included another phase, previous to the prediction one, where the simulator’s
input parameters are calibrated depending on the observed ﬁre’s behavior. This phase is called Calibration phase or
Calibration stage. Figure 1 shows how this two stages prediction method works. The Calibration stage lasts from t0 to
t1 and the Prediction stage goes from t1 to t2 . The Calibration stage needs two real ﬁre fronts to be operable, the initial
ﬁre front at t0 and a posterior real ﬁre evolution at t1 for comparative purposes. Once the set of input parameters has
been calibrated, the system shifts to the next time interval t1 − t2 and uses the adjusted set of input parameters (called
scenario) as inputs to the ﬁre simulator in the Prediction stage. Finally, the prediction provided for the whole system
is the ﬁre spread evolution provided as output by the Fire Simulator (FS) in the Prediction stage [7, 8].

Figure 1: Two stages prediction method

The initial design of this scheme was done using as a working hypothesis the idea that the environmental conditions keep quite similar during both the Calibration stage and the Prediction stage. Two alternatives have been
developed to approach this two stages prediction scheme: the unique solution and the multiple solution approach
also called statistical integration. The two stages prediction scheme based on a unique solution basically consists of
applying an optimization algorithm during the Calibration stage, which provides as input to the Prediction stage a
unique combination of the input variables. Genetic Algorithm (GA) has been demonstrated to be the most eﬃcient
scheme for this kind of problem. However, the main drawback of this approach is the loss of reliability when the
working hypothesis is broken. A ﬁrst attempt to overcome this problem was the design of a multiple solution scheme

R. Rodr´
ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

1269
3

called Statistical Integration. This approach is based on analyzing a probability map obtained by overlapping the
ﬁre evolution provided for a huge number of scenarios. Then, the best probability is chosen for prediction purposes.
This probability value implicit includes the information of multiples scenarios what produces a positive eﬀect in the
prediction provided by the entire system. However, the main drawback of such a scheme is the execution time. In
order to be useful, the statistical approach must execute hundreds of thousands of scenarios becoming a very time
consuming task. Consequently, the ﬁre spread prediction could be provided in an outdated time what have no sense if
we want to deal with a real time prediction system.
Therefore, new techniques could be designed to overcome the above mentioned disadvantages. We propose an
alternative two stages prediction scheme called SAPIFE3 - this is the Spanish acronym for Adaptive System for Fire
Prediction Based in Statistical-Evolutive Strategies (Sistema Adaptativo para la Predicci´on de Incendios Forestales
basados en Estrat´egias Estad´ıstico-Evolutivas) [9, 10], which joins the advantages of the two previous described ﬁre
spread prediction methods (GA and Statistical Integration). This new approach is able to reduce the number of total
scenarios to simulate, from a number such as hundreds of thousands to some hundreds, by optimizing the set of
scenarios through the use of a Genetic Algorithm. Although the ﬁrst design of SAPIFE3 did not consider real time
data injection into the system, this feature was immediately included in the next version referring to this prediction
scheme as SAPIFE3rt . In ﬁgure 2, we see the main components of the SAPIFE3rt , which are going to be described with
more details in the next section.

Figure 2: SAPIFE3rt architecture

3. SAPIFE3rt
SAPIFE3rt has been implemented using the master/worker programming paradigm. The Master node is responsible
for running the main tasks of the two method’s phases, the GA and the Statistical Integration. Furthermore, the Master
receives data from the external sources at run time, such as data from Surface Weather Stations. The Worker nodes
run f (FireS im), our black-box simulator, which is in turn the most compute-intensive part of our method. Following,
we will describe in more detail how each component of SAPIFE3rt is implemented:
1. Genetic Algorithm: At the initial time, the master receives data from external sources: ﬁre propagation maps,
topographical data and meteorological variables. Once all this initial data has been properly set up, the master

1270

R.
Rodr´ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

4

starts running the GA and generates the scenarios’ population. Afterwards, the initial real ﬁre propagation
map and these scenarios are distributed among the Workers using a Factoring Scheduling policy [11], avoiding
communication bottlenecks. Workers start running f (FireS im) over the received scenarios and compare their
outputs to the real propagation map obtaining an error value for each scenario simulated. The workers then send
back this error to the master. As the master receives all scenarios, it proceeds to run the evolutive operations
(elitism, selection, crossover and mutation). This ﬁrst phase is repeated over a number of n generations. The
ﬁnal output of this phase is a population of Best Scenarios (BSc).
2. Statistical Integration: The input of the second phase is the BSc from the previous phase. These scenarios
are distributed to the workers. They can be modiﬁed according to the existence of a sudden change in wind’s
condition. If there is a sudden change either in wind direction or wind speed, the population of scenarios will
be modiﬁed prior to their delivery to the workers. In each new scenario, the wind values are changed according
to the new data obtained from the Surfaces Weather Stations and a dispersion factor around this new data. This
new population is called Best Scenario Modiﬁed (BS cM) and is then sent to the workers. The workers will
then run f (FireS im) over this population and return back the simulated propagation maps. Finally, the master
integrates all these maps and, according to the real map, it generates a probability map that will be used as
prediction for the next time frame.
3. Data Collection System component: This component is responsible to gather all information regarding the ﬁre’s
environment, such as weather, topography and terrain composition data (the fuel) and must work alongside GIS
(Geographical Information System) tools. This module must also be well connected to a network of weather
stations such as the Network of Automatic Weather Stations of Catalonia’s government. This module will also
be in charge of injecting data at real-time. If a sudden change is detected, it will be introduced in the form of
replacing the worst individual who came from the GA.
4. Policies for data insertion
As we have previously mentioned, the initial working hypothesis of the two stages prediction methods required
that the environmental conditions keep quite similar both in Calibration stage and Prediction stage. Therefore, we
need to check the degree of variability of the environmental conditions before the Prediction stage takes place. In
the next section, we shall explain the methodology to detect sudden changes in environmental conditions in order to
decide whether the data collected should be inserted into the system or not.
4.1. Sudden changes detection
To determine whether a data should be inserted into the system or not, ﬁrst of all, we need to study the frequency
of reading data from the sources. This value is signiﬁcantly diﬀerent depending on the type of data we are dealing
with. Subsequently, we introduce a simple classiﬁcation of SAPIFE3rt inputs according to their variability.
1. Fixed-data: This data usually is stored in databases and is read previous to execution time and their values keep
constant throughout the simulation process. In other words, we need to read this data from databases only once
before beginning the simulation process.
2. Dynamic-data:
(a) Remote sensing and pre-processed by Geographical Information Systems (RSGIS): these data are satellite images of the ﬁre evolution. They are taken many times when the hazard occurs. These data give
information about the behavior of the forest ﬁre and permit us to calibrate the SAPIFE3rt outputs.
(b) Weather Stations (WS): these data have the most dynamic behavior of all the simulator inputs. Their
values depend on the environmental conditions and they need real-time monitoring during the simulation
process. SAPIFE3rt used these parameters to determinate if a sudden change has occurred and steered the
simulation process. For instance, the wind direction and wind speed are read from weather stations near
the ﬁre zone.
3. Data-estimated: this kind of input data corresponds to parameters whose values are unknown prior to the simulation process and they could not be obtained during the simulation. Those values should be either calculated
or estimated before the execution.

R. Rodr´
ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

1271
5

In this paper, we have used the f ireLib [12] simulator (a C library based on BEHAVE ﬁre behavior algorithms
[13]) as a simulation core. Table 1 lists all input data needed for this simulator, as well as their corresponding type and
sources. FireLib is a cellular automata simulator, where the terrain is a matrix of cells and, as output, it generates the
average time that each cell is burned, as well as the average ﬂames’ height. To evaluate the ﬁre simulator outputs we
used the error formula shown in equation (1). This equation calculates the diﬀerences in the number of cells burned,
both missing or in excess, between the simulation and the real ﬁre.
Error =

(Cells ∪ −InitCells) − (Cells ∩ −InitCells)
RealCells − InitCells

(1)

Table 1: S APIFErt3 imputs

Inputs
M Fuel model
Wspd Wind speed
Wdir Wind direction
S◦ Slope
Atan(PI∗(S◦ /180) Aspect
M1 1-hr dead fuel moisture
M10 10-hr dead fuel moisture
M100 100-hr dead fuel moisture
Mherb Live herbaceous fuel moisture
Mapini Initial map
Mapevo Evolution map

type
Fixed-data
Dynamic-data
Dynamic-data
Fixed-data
Fixed-data
Data-estimated
Data-estimated
Data-estimated
Data-estimated
Dynamic-data
Dynamic-data

source
Databases
Weather Stations
Weather Stations
Databases
Databases
SAPIFE3rt
SAPIFE3rt
SAPIFE3rt
SAPIFE3rt
RS GIS
RS GIS

The time interval of the Calibration stage should be the same as for the Prediction stage. This period of time is
determined by the frequency of the read map. Therefore, if we read the ﬁrst map at time t0 and the second map at time
t x the period for calibration stage is P = t x − t0 . Usually the frequency of reading data from weather stations is greater
than the frequency of reading a map. Furthermore, we can evaluate the sample of dynamic data for each Calibration
stage. In particular, if we can obtain data from the weather stations every ti and the evolution map each tm , the sample
size for studying the sudden changes is: N = tm /ti .
To illustrate how the detection of sudden changes has been implemented, we have used as a representative example
the information collected at the weather station KCAYORBA4 [14] located at the Complex Fire of California in
november 2008. In ﬁgure 3 we see the samples of wind speed taken from the weather station on Calibration stagei
and prediction stagei+1 . This diﬀerences in the wind speed dispersion can cause that the prediction could get away
from the real ﬁre propagation, therefore, we must deﬁne a method for detecting this environmental conditions variation
between stagei and stagei+1 .
To measure sudden changes, we use statistical tools as Arithmetic Mean (x) and Standard deviation (σ). The ratio
between mean and deviation is the index of variation of one variable throughout two stages. Therefore, in ﬁgure 4
we observe that wi is the arithmetic mean of wind speed data in the calibration stagei and σi is the standard deviation
of wind speed data in the calibration stagei . Consequently, wi+1 , σi+1 are the arithmetic mean and standard deviation
in the prediction stagei+1 . For that reason, if we use this data for marking two points in the Cartesian coordinate
system where the “y” axis represents the wind speed mean and the “x” axis shows the standard deviation, It allows
us to calculate the distance between these two points using the Pythagorean formula for the distance. The distance
α between these points is the Change Factor of a given Variable (CFV) through two stages. If γ = wi+1 − wi and
β = σi+1 − σi , the method for distance calculation is
CFV =

(wi+1 − wi )2 + (σi+1 − σi )2

(2)

1272

R.
Rodr´ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

Speed

6

14

14

12

(w i+1 ,  i+1)

Wind speed mean (mph)

12

mph

10

8

10



8



6

(wi ,  i)

4
6
2
4
0
540

560

580

600

620

640

0

660

1

2

3

minutes

Stage i

Stage i+1



Figure 3: Wind speed patterns gathered from the weather station
KCAYORBA4 between 9 to 11 am on July 16th , 2008.

4

5

μ

Figure 4: Change factor of a given variable calculated using the
Pythagorean formula for the distance between two points.

The α distance is the change factor of variation of each variable (CFV) through two stages. Using this factor we
can measure the diﬀerences in the variable behavior between Calibration stage and Prediction stage. Therefore, we
should set a threshold to determine if a sudden change has occurred and if it aﬀects the system outputs in a negative
way.
As we have previously mentioned, to calculate the threshold, we carried out a set of tests using data gathered
from KCAYORBA4. The objective of these tests is to determine the relationship between CFV and the error level.
To facilitate the study, we take into account only wind speed and we conﬁgure SAPIFE3rt without data insertion at
execution time. So, we focus only on one variable to calculate the CFV to study how it aﬀects S APIFErt3 outputs.
Accordingly, we can study each variable in an independent way.
If X and Y represent the CFV and error-prediction respectively, the correlation is:
Corr =

xy − x¯y¯
x2 − x¯2

y2 − y¯ 2

, where x¯ =

1
n

n

xi is the mean of the data x

(3)

i=1

The correlation is 1 in the case of an increasing linear relationship, -1 in the case of a decreasing linear relationship,
and some value in between in all other cases, indicating the degree of linear dependence between the error and CFV.
For these cases of study, we obtain a correlation value equal to 0.97 (corr=0.97) indicating the strong dependence
between the variables. Figure 5 presents the results obtained by this method. We see that SAPIFE3rt has the best error
level when the CFV is lower. The error tends to increase when the CFV increases. In addition, if CFV is lower that
1.5, prediction error of SAPIFE3rt is below 30%. We use this data to conﬁgure the CFVthreshold in (1.5). In other words,
if CV F > CFVthreshold , then SAPIFE3rt should insert data at execution time.
4.2. CFV estimations
The results obtained in the previous section demonstrated that the working hypothesis for the two stages method
is correct. We have observed that if the conditions in the Calibration stagei are quite similar to the conditions in
the Predictions stagei+1 , the prediction error tends to be lower. However, if we focus on the problem in the context
of real-time, we cannot calculate the CFV with all wind samples for prediction stagei+1 . This means SAPIFE3rt can
get all wind samples from calibration stagei , but only some wind samples from prediction stagei+1 (see ﬁgure 3).
Therefore, wi+1 and σi+1 are calculated based on a number of samples n that depends on GA execution time.
Figure 6 shows the process and data insertion with time execution. We see that the ﬁrst real map to be injected
in the system by SAPIFE3rt is Mapini (used as initial map). The second real map Mapevo is used by the GA process
in the error function (see equation 1). When GA is running, the system is able to assimilate data. This data is the
wind data coming from the weather station. The data gathering when GA is running is used by the system to calculate
the CFV. If the CFV exceeds the CFVthreshold , the ﬁnal population scenarios from GA is modiﬁed between 25% and

1273
7

R. Rodr´
ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

0.6

0.5

Error

0.4

0.3

0.2

0.1

0
0

1

2

3

4

5

CFV

Figure 5: Correlation between CFV and error level in the forest ﬁre
propagation prediction of SAPIFE3rt .

Figure 6: SAPIFE3rt process and data insertion for real map every
30 minutes and wind speed every 5 minutes.

7

7

6

6

5

5

4

4

CFV

CFV

30%. We can see from this example that the SAPIFE3rt can read three wind samples to estimate wi+1 and σi+1 before
ﬁnishing the GA . Therefore, scenarios that have a high error are selected and their wind genes are modiﬁed. This
new population is called Best Scenarios Modiﬁed and is then sent to S tatisticalIntegration S I. The S I integrates all
these maps, and according to the real map, it generates a probability map that represents the prediction for minute t60 .

3

3

2

2

1

1
1

2

3

4

5

Steps

1

2

3

4

5

Steps
Real

Estimanted

Figure 7: CFV estimations based on arithmetic mean and standard
deviation calculated with 3 samples of wind speed.

Real

Estimanted

Figure 8: CFV estimations based on arithmetic mean and standard
deviation calculated with 6 samples of wind speed.

The SAPIFE3rt ﬂexibility allows us to set the system for map insertion every one hour and data wind to be injected
every 5 minutes. Therefore, we can conﬁgure the calibration and prediction stage in every one-hour steps. In this way,
SAPIFE3 rt has more time for execution with a large number of scenarios and it can also gather more wind’ samples
to estimate wi+1 and σi+1 .
In ﬁgure 7, we see the CFV based on three samples for estimate wi+1 and σi+1 . The CFVreal based on the total
samples of wind gathering on calibration stagei and prediction stagei+1 . We noticed that real and estimated CFV do
not follow the same tendency. Therefore, we must take into account this factor to calculate the threshold. In this case,
we see a penalty caused by the small number of samples. However, in ﬁgure 8, we show that the values of real and
estimate CFV values do follow the same tendency. The estimation for wi+1 and σi+1 is better than the previous test
because, in this example, we have more samples to calculate CFV. Consequently, if we decrease the frequency of
reading the map and keep reading frequency of wind, the system has more samples to improve the estimation of wi+1
and σi+1 . It is important to notice that the number of samples is always 50% of the total in these two cases. These
results show that the wind pattern tends to have a deﬁned behavior through time . However, we see how over time,
the wind pattern tends to have a deﬁned behavior. Consequently, we could identify those patterns if we have enough
samples.

1274

R.
Rodr´ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

8

5. Experiments Results
In November 2008, southern California was hit by devastating ﬁres. The extreme conditions of Santa Ana’s winds
[2] combined with the environment’s low humidity, created the ideal conditions for ﬁres. In order to test our DDDAS
forest-ﬁre propagation prediction system, we performed a set of postmortem experiments based on the conditions of
the Freeway Complex Fire. The main objective of these experiments is to demonstrate the beneﬁts of DDDAS for
forest ﬁre prediction, especially when environmental conditions are quite dynamic showing suddenly changes in wind
speed and wind direction. Figure 9 shows the ﬁre perimeter in November 16, 2008 where it is possible to visualize the
KCAYORBA4 weather station at the bottom of the image. We used KML language to visualize the ﬁre into Google
Earth, so it is possible to verify the situation of the ﬁres.

Figure 9: Study domain, Freeway Complex Fire, California (USA)

Now we want to test if the policy for data insertion can improve the prediction results. For this purpose, we have
set up two types of experiments.
5.1. Experiment 1
We set SAPIFE3rt to read wind data every 5 minutes and real maps every 30 minutes. Therefore, in ﬁgure 10 we
see the results obtained by SAPIFE3rt using a policy for data insertion and without using any insertion. In last case, if
the system does not use a policy to insert data, the data is always injected at execution time.
0.6
14
0.5

Wind speed mean (mph)

12

error

0.4

0.3

0.2

0.1

10

8

6

4

2

0
0

0
Step 1

Step 2

Step 3

Step 4

Step 5

predictions
With Policy

Without Policy

Figure 10: Experiment 1, policy impact in SAPIFE3rt

1

2

3

4

5


Stage 0
Stage 1

Stage 2
Stage 3

Stage 4
Stage 5

Figure 11: Experiment 1, ratio between mean wind speed and standard deviation

1275
9

R. Rodr´
ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276
Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

Figure 10 represents in the y axis the error between the simulated and the real map. In the x axis we have the
simulation steps for each time period. The obtained results show that the errors are lower in steps 1 and 5 when
SAPIFE3rt uses a policy for data insertion. It also improves the prediction error about 15% about the SAPIFE3rt without
policy. That means that, the CFV is lower than CFVthreshold , so the system has decided not to inject data. Obviously,
inserting data in these two cases has a negative eﬀect in the prediction results because the working hypothesis, based
on the idea that the environmental conditions keep quite similar during both the Calibration stage and the Prediction
stage, for these steps is not broken. Therefore, the GA is the most eﬃcient scheme under those conditions and injecting
data disturbs the GA.
In ﬁgure 11, we see in the y axis the arithmetic mean of wind speed throughout each stage. The x axis shows
the standard deviation for each stage. Every step is composed of two stages, stagei and stagei+1 , respectively. That
is the correspondence between Calibration and Prediction stages in our method. Such as, step 1 (in the ﬁgure 10) is
composed of stages 0 and 1. Step 2 is composed of stages 1 and 2. Finally, the last step 5 is composed of stages 4 and
5. Therefore, we see the distances between points is the CFV (shown in ﬁgure 5). Consequently, we can establish
the relationship between the prediction error level and the wind behavior. These results show that the system made
the correct decision to inject data. We see that the distance between stages 0 and 1 is short because the environmental
conditions in these stages are quite similar. That means that in this point, it is not necessary to inject data, according
with the working hypothesis of the method. In the same way, we observe a similar behavior in stages 4 and 5.
Therefore, if we look for the steps 1 and 5 in ﬁgure 10, we see the consequence for injecting data when it is not
necessary.
5.2. Experiment 2
For the second experiment, we conﬁgure the SAPIFE3rt inputs to read maps every one hour and to have the wind
insertion every 5 minutes. The main diﬀerence in this experiment is that the number of samples of wind to estimate is
bigger than in the previous test. It is important to notice that if the timeframe is long, we have a higher probability of
sudden changes.
0.6
14
0.5

Wind speed mean (mph)

12

error

0.4

0.3

0.2

0.1

10

8

6

4

2

0
0

0
Step 1

Step 2

Step 3

Step 4

Step 5

predictions
With Policy

No Policy

Figure 12: Experiment 2, sudden changes impact on the data insertion policy

1

2

3

4

5


Stage 0
Stage 1

Stage 2
Stage 3

Stage 4
Stage 5

Figure 13: Experiment 2, ratio between mean win speed and standard desviation

In ﬁgure 12, we observe that SAPIFE3rt (with policy for data insertion) improves the prediction results on steps 4
and 5. Furthermore, in ﬁgure 13, we note that the distance between stages 3 and 4 or 4 and 5 are very short. This
means, if steps 4 and 5 are composed by stages 3 with 4 and 4 with 5, respectively, we have a direct relationship
between the error and distance. In other words, when the distance is short, data insertion is not necessary. For this
case, SAPIFE3rt makes a correct decision when it uses a policy for data insertion. It is important to notice that the
distance is the CFV we showed in equation 2 where the main diﬀerence is that wi+1 and σi+1 are estimated by six
samples of wind. Finally, in the other steps, the error level is quite uniform when the data is injected.
6. Conclusion and ongoing work
In this work, we have demonstrated that to improve the results of a DDDAS, a policy for data injection is required
in order not to disturb the simulation outputs. As a study case, we have used a forest ﬁre spread prediction system

1276

R. Rodr´ıguez et al. / Procedia Computer Science 1 (2012) 1267–1276

Roque Rodriguez et al. / Procedia Computer Science 00 (2010) 1–10

10

called SAPIFE3rt . Although the underlying ﬁre spread simulator has a wide set of input variables, we focus our study
on the wind parameter and, in particular, on the wind speed value. We have proposed an injection policy based on
parameter variability through time (Change Factor of a given Variable, CFV) to decide whether it is proﬁtable to
inject data or not. The proposed policy can be improved if we add more variables to the equation. We have validate
CFV using data from the Free Complex Fire occurred at California in November 2008. We also conclude that the
acquisition data frequency directly aﬀects the prediction results, as well as the precision on the detection of sudden
changes. Since data insertion is useful in the presence of sudden changes, as much accurate the detection of this event
is, better prediction results will be obtained.
This work also encourage us in the way to achieve the implementation of policies for data insertion on DDDAS
for forest ﬁre behavior prediction that could provide the rules for design a policy of data insertion for any DDDAS.
Acknowledgment
This work is supported by the MEC-Spain under contract TIN 2007-64974.
References
[1] L. Halada, P. Weisenpacher, J. Glasa, Reconstruction of the forest ﬁre propagation case when people were entrapped by ﬁre, Forest Ecology
and Management 234 (2006) 127–127.
[2] M. Raphael, The santa ana winds of california, Earth Interactions 7 (1234567891011131214) (2003) 1–13.
[3] R. Clark, A. Hope, S. Tarantola, D. Gatelli, P. Dennison, M. Moritz, Sensitivity analysis of a ﬁre spread model in a chaparral landscape, Fire
Ecology 4 (1) (2008) 1–13.
[4] M. Schroeder, M. Glovinsky, V. Hendricks, F. Hood, M. Hull, H. Jacobsen, R. Kirkpatrick, D. Krueger, L. Mallory, A. Oertel, et al., Synoptic
weather types associated with critical ﬁre weather. AD 449–630. US Department of Commerce, National Bureau of Standards, Institute for
Applied Technology, Washington, DC (1964) 449–630.
[5] Douglas, C. The Dynamic Data Driven Application Systems website [online] (2006) [cited 15 January 2010].
[6] F. Darema, Grid computing and beyond: The context of dynamic data driven applications systems, Proceedings of the IEEE 93 (3) (2005)
692–697. doi:10.1109/JPROC.2004.842783.
[7] G. Bianchini, A. Cort´es, T. Margalef, E. Luque, S2F2M-Statistical System for Forest Fire Management, Lecture Notes in Computer Science
3514 (2005) 427–434.
[8] M. Denham, A. Cort´es, T. Margalef, E. Luque, Applying a Dynamic Data Driven Genetic Algorithm to Improve Forest Fire Spread Prediction,
Lecture Notes in Computer Science 5103 (2008) 36–45.
[9] R. Rodriguez, A. Cort´es, T. Margalef, E. Luque, An adaptive system for forest ﬁre behavior prediction, in: Proceedings of the 2008 11th IEEE
International Conference on Computational Science and Engineering, IEEE Computer Society, Washington, DC, USA, 2008, pp. 275–282.
[10] R. Rodr´ıguez, A. Cort´es, T. Margalef, Injecting dynamic real-time data into a dddas for forest ﬁre behavior prediction, in: ICCS 2009:
Proceedings of the 9th International Conference on Computational Science, Springer-Verlag, Berlin, Heidelberg, 2009, pp. 489–499.
[11] E. Cesar, A. Moreno, J. Sorribes, E. Luque, Modeling Master/Worker applications for automatic performance tuning, Parallel Computing
32 (7-8) (2006) 568–589.
[12] C. D. B., Firelib user manual and tecnhical reference (2006).
URL http://www.fire.org/
[13] P. Andrews, C. Chase, BEHAVE: Fire Behavior Prediction and Fuel Modeling System BURN Subsystem, Part 2, System.
[14] Weather Underground , History for kcayorba4 (2008) [cited 15 January 2010].
URL http://www.wunderground.com/weatherstation

