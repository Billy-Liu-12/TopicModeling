Procedia Computer Science
Volume 29, 2014, Pages 648–658
ICCS 2014. 14th International Conference on Computational Science

Rendering of Feature-Rich Dynamically Changing
Volumetric Datasets on GPU
Martin Schreiber, Atanas Atanasov,
Philipp Neumann, and Hans-Joachim Bungartz
Technische Universit¨
at M¨
unchen, Munich, Germany
schreibm@in.tum.de,atanasoa@in.tum.de,neumanph@in.tum.de,bungartz@in.tum.de

Abstract
Interactive photo-realistic representation of dynamic liquid volumes is a challenging task for
today’s GPUs and state-of-the-art visualization algorithms. Methods of the last two decades
consider either static volumetric datasets applying several optimizations for volume casting, or
dynamic volumetric datasets with rough approximations to realistic rendering. Nevertheless,
accurate real-time visualization of dynamic datasets is crucial in areas of scientiﬁc visualization
as well as areas demanding for accurate rendering of feature-rich datasets.
An accurate and thus realistic visualization of such datasets leads to new challenges: due to
restrictions given by computational performance, the datasets may be relatively small compared
to the screen resolution, and thus each voxel has to be rendered highly oversampled. With our
volumetric datasets based on a real-time lattice Boltzmann ﬂuid simulation creating dynamic
cavities and small droplets, existing real-time implementations are not applicable for a realistic
surface extraction.
This work presents a volume tracing algorithm capable of producing multiple refractions
which is also robust to small droplets and cavities. Furthermore we show advantages of our
volume tracing algorithm compared to other implementations.
Keywords:

1

Introduction

The photo-realistic real-time rendering of dynamic liquids, represented by free surface ﬂows and
volumetric datasets, has been studied in numerous works [13, 9, 10, 14, 18]. Diﬀerent properties
related to the light-liquid surface interaction such as reﬂections, refractions and the global
illumination scheme of the environment need to be taken into account. For the visualization
of refractions and reﬂections, the view-space approximations [21, 20] gained growing attention
due to their interactive frame rates, however neglecting particular features in the volumetric
datasets.
648

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.058

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

M. Schreiber et al.

Figure 1: Screenshots with photon mapping and main caustics at an edge of the chessboard.
Note the accurate rendering of refractions and reﬂections at the cavity.

On-the-ﬂy rendering of ﬂow simulation data bares particular challenges: highly dynamic
ﬂow behavior leads to small-sized cavities (e.g. right image in Fig. 1) and ﬁne droplets. Another
important characteristic for scientiﬁc applications of the respective free surface ﬂows is given
by the wetting properties of a liquid such as its surface tension. A correct visualization of the
contact angle, that is the angle between liquid and wall in case of droplets, is necessary to
compare simulation data to experimental results. Therefore, the small-scale, but feature-rich
eﬀects need to be visualized properly for scientiﬁc applications.
An approach for surface extraction is given by volume casting. The existing volume-casting
schemes lead to noisy, non-physical silhouette artifacts (e.g. left image in Fig. 4). Robust normal
extraction and careful treatment of multiple intersection points between the light source and
the ﬂuid surface become important for the further improvement of the visual quality. Screenspaced approximations for the computation of reﬂections and refractions [7, 19] do not satisfy
our demands on rendering cavities for feature-rich and highly convex objects as well as small
droplets.
We consider an online visualization with refractions and reﬂections of voxel-based volumetric
datasets with constant refractive index. We use data from a real-time GPU-based Lattice
Boltzmann simulation of free surface ﬂows [15] as input: the iso surface is represented scalarwise in each voxel of a volumetric dataset.
Our contribution is the development of a volume tracing method which is based on a combination of the interpolated sampling and the DDA algorithm originally used for the acceleration
of polygonal-based ray tracing [5]. Such a sampling leads to improved quality for our volume
tracing method due to accurate intersection point extractions as well as the iso surface normals
which are crucial for accurate refractions and reﬂections. We ﬁnally compare our approach
to other approximations in both quality as well as performance. The structure of this paper
follows the visualization pipeline presented in the next Section.

2

Simulation and visualization pipeline

Lattice Boltzmann simulation: Our volume datasets are generated by a real-time simulation
based on a free surface extension of the Lattice Boltzmann method (LBM) for GPUs using the
D3Q19 layout [15, 17] . The LBM simulation uses density distribution functions (DDFs) fi
which are deﬁned on a Cartesian grid. Each fi corresponds to the probability to ﬁnd molecules
moving at a velocity ci inside a given grid cell.
Based on a collide-stream pattern, the distributions ﬁrst interact locally (to model diﬀusion)
649

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU
Simulation output
(OpenCL context)
OpenCL buffer

Low
Hint for
processing Medium
intensity:
High

Conversion to flat texture

Format conversion
(OpenGL context)

Volume texture

Triangle vertex extraction
(Marching cubes)

Iso surface
extraction

Draw triangle vertices

Iso surface
visualization

M. Schreiber et al.

Ray casting

Front/Back face texture

Viewspace refractions

Front/Back face texture

Tracing with
refractions and
reflections

Ray tracing

Caustics with
photon mapping

Ray casted front and
back faces

Light space photon map
Render with caustic map

2.5D render stages

3D render stages

Figure 2: Overview of the rendering stages for representation of dynamic liquid volumes. Diﬀerent colors represent diﬀerent computational intensities. Arrows illustrate dependencies between
stages.

and are subsequently streamed to the neighboring grid cells (convection). The distributions can
thus be interpreted as moving mass inside a given cell or between neighboring grid cells with
density ρ =
fi and velocity u =
fi ei . In a ﬂuid simulation with free surfaces, we distinguish
between cells ﬁlled with ﬂuid, partially ﬁlled cells and gas cells without any ﬂuid [15]. We store
two additional values for each array element: the ﬂuid mass m which is used to track the change
of the ﬂuid mass Δm(x) = i Ai · (f¯i (x + ei ) − fi (x)) from one cell to its neighbors and the
ﬂuid fraction value m
ρ representing the ﬁll grade of the cell. The latter one is then used for the
surface extraction. Based on this methodology, free surface ﬂows are simulated on the GPU.
Small-scale structures such as droplets arise from the simulation, cf. Fig. 5 for droplets at the
domain boundaries.
Visualization pipeline: The developed visualization pipeline is shown in Fig. 2: the boxes
represent diﬀerent stages of the rendering algorithms, the underlying methods and their complexity. The arrows describe the dependencies of the diﬀerent stages. For example, ”Ray
tracing” depends on ”Volume texture” since the former is driven on a 3D volume texture. The
render stages on the left-hand side show the pipeline for both 2.5D view- and light-space approximations. The stages on the right present the 3D volumetric approximations on which we
focus in this work. The ﬁrst stage ”iso surface visualization” in Fig. 2 produces an iso surface
by either extracting the surface explicitly by the marching cubes algorithm or by rendering
the iso surface with ray casting. The second stage ”tracing with refractions and reﬂections”
accounts for the refractions and reﬂections either by view-space approximations or by volume
tracing methods. The last stage renders caustics with front- and backface approximation based
on either vertex rendering or ray casting.
650

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

3

M. Schreiber et al.

Related work

Surface representation: Surfaces can be represented either explicitly via prescribed vertex
coordinates or in an implicit manner by computing intersections with iso surfaces.
Explicit representation - vertex arrays: Contrary to a volume casting method which frequently samples the volume for each fragment, an explicit representation such as a vertex array
can be rendered very fast. Vertex arrays are also faster for ﬁnding the ﬁrst intersection point
than volume casting. Since our simulation data are given as volumetric datasets, an explicit
representation has to be computed ﬁrst: a vertex array for the surface extraction and visualization of volumetric datasets can be generated by the marching cubes algorithm (cf. [3]). This
surface extraction method is based on the HistoPyramid hierarchy [24], a hierarchical index
data structure, which is used to stream compacted output. The data structure resembles a
Laplacian pyramid which uses the active cells of the marching cubes algorithm as input and
produces a vertex array, holding the points of the extracted surface in the most compact way.
The overhead induced by this vertex array generation have to be compensated by the ongoing
render stages (see left stages in Fig. 2) to be competitive to our volume tracing method.
Implicit representation - volume casting: Volume casting is one of the preferred methods for
volumetric data stored in 3D or ﬂat textures, for example in the context of rendering CT scans
[9, 12, 11]. It is used for the rendering of high resolution datasets. The method is accelerated
by applying a preprocessing step for empty space skipping. For real-time ﬂuid simulation
data obtained from a single GPU or a moderate number of compute nodes, the resolution is
expected to be much lower. Therefore, the resulting iso surfaces—such as the iso surface of the
ﬂuid fraction in our case—have to be rendered highly oversampled due to the screen resolution.
The need for oversampling enforces the utilization of a surface extraction technique, diﬀerent to
traditional ray casting algorithms for GPUs. The interface layer of our ﬂuid simulation is only
one cell in size which is typical for iso surface rendering problems and demands for accurate
surface visualization. Slight changes in normals due to wrong surface extractions are negligible
for the surface representation. This, however, does not hold when rendering refractions and
reﬂections: small perturbations in normals yield an increase of the noise.
For volumetric datasets, 3D textures are commonly used since trilinear interpolation is
natively supported. Determining the exact ray intersection points with such iso surfaces is,
however, computationally intensive. Therefore, only approximations are used and explained in
the following.
Volume iso surface intersection algorithms: Running the visualization directly on
implicit-surface representations demands for intersection algorithms. Here we consider diﬀerent
ways for sampling and computation of iso surface intersections.
Simple sampling: Equidistant spatial steps can be used to sample along a single ray through
a volume. This is mainly used for volume tracing with alpha blending [9]. For iso surface
rendering, the sampling is usually stopped if the current value exceeds a particular threshold
and returns the current spatial coordinate.
Interpolated sampling: The equidistant sampling only considers the last spatial coordinate
and voxel value at this position. This can be extended by linear interpolation of the iso surface
intersection point. For this purpose, the value obtained at the ﬁnal coordinate, i.e. the value
which ﬁnally exceeds or undershoots the respective iso surface threshold, and the value obtained
at the preceding sampling point are used to compute the approximated iso surface intersection
point.
DDA sampling: The DDA algorithm was originally developed to determine the crossing of
bounding cell volumes with a line [5]. In case of volume rendering, this algorithm is also used
651

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

M. Schreiber et al.

for sampling only those voxels or rectangular areas intersected by the volume casting path,
e.g. for volumetric iso surface extraction on CPUs [16] or for template-based volume viewing
[23]. To our best knowledge, this method was never considered for volume tracing.
Raytracing-induced intersection points: Computations of intersection points for ray tracing can be diﬀerentiated by their input data:
Volume-tracing algorithms: The volume tracing algorithms on GPUs [2] so far only consider
binary intersection search. This is insuﬃcient for our case e.g. due to small droplets, since binary
intersection searches are not robust to local extrema.
Polygonal-based algorithms: Classical ray tracers on GPUs compute intersections using
polygonals in object space. To compute such ray intersections eﬃciently on GPUs [1, 4, 6], the
polygonal data structures are typically preprocessed. Since the ﬂow simulation data are rapidly
changing over time, the preprocessing needs to be carried out for each frame. This is ineﬃcient
for our type of scenarios.
View-space algorithms: Other approaches for illumination of surfaces are based on viewspace ray tracing. Typical approximations such as front- and backface extractions (e.g. [7, 19])
are incapable of rendering cavities of our ﬂuid and thus would neglect important features.
Caustics: The global illumination of the environment can be simulated by photon mapping. A
stochastic approximation based on the Monte Carlo method was published in [8]. Due to the
emission of photons in random directions, the original algorithm is not suitable for modern GPU
devices. An image-based technique in light space [21] provides enough regularity for modern
GPUs. The performance and quality of the technique can be further enhanced by introducing
hierarchical caustic maps and adaptivity (e.g. [20, 22]).

4

Eﬃcient volume tracing

Our implementation of the surface extraction is based on the algorithm for volume casting
presented in [9]. This approach is based on a multi-pass method. In the ﬁrst two passes of the
algorithm, entry and exit points of the rays through the volume are determined by applying
front- and backface rendering of the volume-bounding cube. The remaining passes are used for
the actual ray traversal and for the evaluation of the stopping criterion based on a target iso
value.
In our implementation we merge all these steps in a single-pass as follows: the entry and
exit points are determined by rendering the front faces for the entry points and computing the
exit points implicitly based on the direction of the ray entering the volume. This computation
is based on the vertex coordinate of the entry point and a partitioning of the cube’s modelview matrix into the rotational and translational components. In our case, this led to slight
performance improvements for which we account by avoiding an additional rendering pass and
a framebuﬀer access to read the coordinates of the backface.
For the correct representation of the ﬂuid’s surface, we need to compute the normals at
intersection points. A frequently used method to compute an approximation of the normal is
to apply forward- or backward-diﬀerences. In case of the ﬂuid surface, such diﬀerences produce
unnatural surfaces, especially for reﬂections and refractions on surfaces with high gradient and
symmetrically looking ﬂuid surfaces. Hence, we use central diﬀerences to compute the normals.
This is crucial for an accurate description of surface normals used to compute refractions and
reﬂections. We further implemented three variants of the casting algorithm:
“Simple” ray casting: The ﬁrst variant is the implementation of the intersection algorithm
from [9] using equidistant step sizes. If the ray exits the volume before an exceeded iso value
could be detected, the fragment is simply discarded since no iso surface was hit by the ray.
652

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU
(A)

(B)

Equidistant sampling

(C)

(D)

M. Schreiber et al.

(E)

(F)

DDA sampling

Figure 3: Diﬀerent cases for equidistant and DDA sampling in 2D. The DDA sampling leads
to a strongly reduced noise in the silhouette, see Fig. 4.

Interpolated ray casting: Our second ray casting method extends the previous one by storing
the old 3D sampling point and its respective sampling value. To improve the accuracy of the
intersection point computation, the previous sampling point is also involved in the computation
of the real piercing point by applying linear interpolation. Let n denote the step when the
value vn at the current position pn exceeds the iso value i. Then, the improved approximated
n ·(i−vn−1 )
. However,
intersection position pf inal is computed by linear interpolation pn−1 ·(vnv−i)+p
n −vn−1
even if the intersection point is improved by this linear interpolation, it is still not accurate
since the volume sampling is based on a tri-linear interpolation of the underlying volumetric
dataset.
DDA volume ray casting: Since the simple and interpolated volume ray casting work with
equidistant steps, such a shader program samples the cells mainly in the inner area. Sampling in
these areas results in the aforementioned tri-linear interpolation, whereas sampling the volume
only on the cube’s sides would lead to a bi-linear interpolation, hence reducing the order of error.
Therefore, we use the DDA algorithm to sample on the side of the cells only. The intersection
point with the iso surface is then approximated by using a linear interpolation between the last
two sampling points similar to the interpolated ray casting method. This leads to a sampling
method with adaptive step sizes. The initialization and the computation of the piercing points
for the DDA method on the voxel borders are implemented without any branch-divergence for
eﬃcient execution on current GPU architectures.
We further analyze particular ﬂuid surface constellations which depend on the ﬂuid fraction
of the thin layer and the view: This leads to strong artifacts created for such thin ﬂuid layers
when the interpolated ray casting is used. Diﬀerent sample cases to highlight these issues are
presented in Fig. 3. Diﬀerent rays and the corresponding sampling points for an equidistant
step length are shown on the left. For (A), rendering the iso surface is skipped, even if the
ray goes straight through the sampling point. Only slight changes in view are necessary to
render the iso surface as shown in (B) and (C). DDA sampling is not as prone to such artifacts
as sampling with equidistant step sizes. Three examples are shown on the right. Even when
changing the view angle slightly, the iso surface is rendered as sketched in (D) and (E) since
the edges are not skipped. However, there are constellations when the tri-linear interpolated
iso surface is not detected correctly (F) but, in contrast to the sampling with equidistant step
sizes, these constellations do not lead to a noisy silhouette extraction.
Volume-tracing shader: To compute refractions based on volume datasets, intersection
points have to be known for arbitrary starting points and directions of a ray.
Volume tracing can be seen as an extension to the volume casting algorithm, shooting out
one or more rays from the ﬁrst iso surface intersection point to improve the visual appearance.
In this way the algorithm continues sampling the volume with refracted or reﬂected rays by
using ray casting until the desired next surface intersection point is found. Next, we present an
eﬃcient shader implementation circumventing the issues presented in the previous sections.
653

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

M. Schreiber et al.

Support of multiple intersections: To compute multiple intersections, the ﬁrst intersection
is handled in a special way. The coordinates, the normal at this point and the reﬂected view
vector are stored separately for lighting purposes. The data from the ﬁrst intersection is also
used to apply the Fresnel term with an appropriate environment lookup. For the remaining
intersections, a for-loop computing the intersections and the reﬂection or refraction vector is
used.
Intersection test: For rays searching the piercing point to enter the ﬂuid matter, the sampling
value has to be above the iso value and for rays which are already in the ﬂuid matter, the
sampling value is below the iso value in each sampling step. For performance reasons, both have
to be combined to one intersection function to avoid function-divergence (similar to branchdivergence) by using an in/out state ﬂoat number S: S has to be set to +1 if the start position
of the ray is outside the ﬂuid and to −1 if the start position is inside the ﬂuid. Doing so, the
collision test is extended by two multiplications. For the current sampling value V , the test
whether this value exceeds the iso value is modiﬁed. This optimization of merging two separated
functions leads to a robust performance increase, but obviously depends on the tested scenario.
Refraction/reﬂection: Given the normal on the iso surface based on central diﬀerences, the
refracted vector or—in case of a total internal reﬂection—the reﬂected vector is computed.
Environment lookup: After refractions or total internal reﬂections up to a ﬁxed number
were determined, or if the ray is leaving the volume after at least one iso surface intersection
was found, the intersection with environment objects has to be computed. Computing these
intersections with ray-tracing methods based on polygons and a preprocessing step is a very
intensive task. It also prohibits ray tracing of an environment which consists of arbitrary,
moving and deformable objects. Therefore, for eﬃciency reasons, we use a lookup in a cube
map created for each frame.

5

Results

We ﬁrst test our surface rendering method for extraction of accurate silhouettes of droplets.
Then we focus on comparing our volume tracing approach to previous work to show advantages
as well as drawbacks depending on particular requirements and rendering settings such as
screen resolution. Finally, we present an extension incorporating caustics in combination with
ray-tracing of feature-rich volumes.
Iso surface visualization with volume casting:
Visual appearance: Our ﬁrst test scenario is given by breaking dam simulations: an artiﬁcial
dam holds the ﬂuid in a reservoir. The ﬂuid is released from the reservoir and splashes into the
rest of the computational domain. For the breaking dam simulation, the most interesting area
for our purposes is the one close to the thin ﬂuid layer on the right side of the domain. This
area is created after a few time steps and contains small droplets that stick to the no-slip wall.
The advantages of the DDA iso surface extraction over the marching cubes and the interpolated
volume casting methods are given in Fig. 4, showing clear silhouettes of the extracted surface.
Performance: In the second scenario a spherical drop of ﬂuid is created in the middle of a
cubic volume. The height of the cubic volume covers the screen, the radius of the drop is set
to 14 of the volume size and the viewport resolution is 800 × 600. The step size for the two
equidistant sampling methods is set to 0.5. The average FPS for diﬀerent domain resolutions
are given in the following table:
654

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

Interpolated volume casting

DDA volume casting

M. Schreiber et al.

Marching cubes

Figure 4: Diﬀerent visualizations for one time step of the breaking dam simulation. For the
interpolated volume casting, the noise created by non DDA sampling is clearly visible while the
marching cubes algorithm (only shown for comparison) creates the sharpest edges.
Implementation / Domain Size
Simple
Interpolation
DDA

163
2015
1941
1343

323
1420
1351
832

643
850
819
482

1283
501
491
261

While all methods can be used for real-time purposes, we further consider the quality of
each method. The simple version is the fastest, however, due to the bad visual appearance such
as the noisy silhouette extraction, has the worst quality. The interpolation method only shows
a slight performance decrease compared to the simple version. The DDA version is slower than
the interpolated ray casting which was used in the benchmark scenarios. However, this version
has to be used when the rendering requires a robust surface extraction since this method yields
a compromise between performance and visual appearance.
Volume tracing with refractions:
Visual appearance: We ﬁrst determine a useful limitation for the ray tracing iterations.
Therefore, three screenshots of a ﬂuid with a rapidly changing ﬂuid fraction have been created,
see Fig. 5. The screenshot on the left uses front-/backface approximations in screen space. The
middle screenshot considers up to 4 iso surface intersections with volume tracing and the right
screenshot up to 8 intersections. The approximation with front- and backface approximation is
clearly incapable of rendering the total inner refractions visible on the down-side of the ﬂuid in
the middle screenshot. Applying our volume tracing method with only two intersections leads
to a similar result as the one produced by the front- and backface approximation. This demonstrates that two intersections are insuﬃcient for rendering details such as the total internal
reﬂection on the bottom ﬂuid surface after the second intersection.
This visualization of the ﬂuid after the total internal reﬂection is only generated for at least
3 iterations: the ﬁrst intersection enters the liquid area, the next ray is reﬂected on the bottom
of the ﬂuid and the third one ﬁnally intersects again with the ﬂuid.
Using 8 iterations almost halves the FPS for the given test scenario and since the visual
improvement compared to only 4 iterations is almost negligible, only up to 4 iterations are
used in the following. A screenshot of a breaking dam simulation is given in Fig. 6 with a tiled
color background. Up to 4 refractions or total internal reﬂections are computed and the Fresnel
reﬂection is used only for the ﬁrst intersection point. With a closer look at the bottom layer of
the ﬂuid, the surface with the normal pointing upwards is visible. This visualization requires at
655

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

front-/backface

4 iterations

M. Schreiber et al.

8 iterations

Figure 5: Screenshots for interpolated volume tracing with diﬀerent limitations for ray tracing
iterations. Left: view-space approximation using front- and backface extraction only. Mid: new
volume tracing method with 4 iterations. Right: new volume tracing method with 8 iterations.

front-/backface

4 iterations
Figure 6: Left: Visualization of concave iso surface. Right: Breaking dam simulation with tiled
color background and up to 4 ray tracing iterations with Fresnel term in ﬁrst iteration.
least three intersections: (1) entering the ﬂuid, (2) total internal reﬂection and (3) intersecting
with the ﬂuid surface.
Performance: Benchmark results for a falling drop simulation using a domain size of 643
are given in the following table.
Simulation domain size: 643
Interpolated volume tracing
Eye-space refr. with step-size 1.0
Eye-space refr. with step-size 2.0
Eye-space refr. with step-size 10.0

Size of viewport
800 × 600 1600 × 1040
132 fps
83 fps
144 fps
72 fps
158 fps
95 fps
160 fps
132 fps

Comparing the interpolated volume tracing with the eye-space sampling with step-size 1.0, the
656

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

M. Schreiber et al.

volume tracing is faster for higher screen resolutions. In contrast, the eye-space sampling is
computationally more eﬃcient for lower screen resolutions (row 4). We further observed that
slightly increasing the step size did not have signiﬁcant impact on the visual appearance.
Volume tracing and caustics: We extended the presented algorithm with caustics based on
[20, 22]. A visualization of a falling drop simulation is presented in Fig. 1. The shadow emitted
by the ﬂuid was approximated with the shadow map, which was already computed in the pass
to extract the front-/backfaces of the ﬂuid. The shadow map for the diﬀuse objects, used to
cast the shadow of the monkey head, was also already computed in the pass for the surface
extraction of the diﬀusive objects.

6

Conclusions

In this work, we analyzed volume visualization methods for dynamically generated, featurerich volumetric datasets with two phases of diﬀerent refraction indices. In particular, we put
our focus on accurate cavity and silhouette extraction, and correct visualization of refractions
and total internal reﬂections. All these aspects should be considered with an eﬃcient implementation on state-of-the-art GPU architectures. A new DDA-based volume tracing method is
introduced, leading to more robust surface-intersection tests and an improved silhouette extraction. Furthermore, a multi-intersection algorithm is required to visualize cavities in feature-rich
volumetric datasets. Based on these improved intersections, we can also compute normals with
higher precision. This accurate normal computation is mandatory for robust refractions and
total internal reﬂections. The branch divergence required for distinguishing the tracing within
one of the two diﬀerent phases of the algorithm could be combined into a single phase via a
mathematical reformulation.
With respect to the eﬃciency of our approach on the current GPUs, the results show that
the DDA-based volume tracing algorithm is competitive to alternative approaches. Considering the additional requirements for the quality of the representation, the presented algorithm
furthermore convinces in the visual results. Consequently, our approach demonstrates very
promising performance for real-time rendering of rapidly changing feature-rich datasets.
Acknowledgements: This work was supported by the German Research Foundation (DFG)
as part of the Transregional Collaborative Research Centre “Invasive Computing (SFB/TR 89).
It is partially based on work supported by Award No. UK-c0020, made by the King Abdullah
University of Science and Technology (KAUST).

References
[1] Timo Aila and Samuli Laine. Understanding the eﬃciency of ray traversal on GPUs. In Proc. of
the Conf. on High Perf. Graphics 2009, HPG ’09. ACM, 2009.
[2] Chen Cao, Zhong Ren, Baining Guo, and Kun Zhou. Interact. rend. of non-constant, refr. media
using the ray eq. of gradient-index optics. Computer Graphics Forum.
[3] Christopher Dyken, Gernot Ziegler, Christian Theobalt, and Hans-Peter Seidel. High-speed marching cubes using histopyramids. Computer Graphics Forum, 2008.
[4] T. Foley and J. Sugerman. Kd-tree accel. struct. for a gpu raytracer. In Proc. of the ACM
SIGGRAPH/EUROGRAPHICS conf. on Graph. HW, HWWS ’05. ACM.
[5] Akira Fujimoto, Takayuki Tanaka, and Kansei Iwata. Arts: Accelerated ray-tracing system. Computer Graphics and Applications, IEEE, 6(4):16–26, 1986.

657

Rendering of Feature-Rich Dynamically Changing Volumetric Datasets on GPU

M. Schreiber et al.

[6] Daniel Reiter Horn, Jeremy Sugerman, Mike Houston, and Pat Hanrahan. Interactive k-d tree
gpu raytracing. In Proc. of the 2007 symp. on Interact. 3D graphics and games, I3D ’07, pages
167–174. ACM, 2007.
[7] Wei Hu and Kaihuai Qin. Interactive approximate rendering of reﬂections, refractions, and caustics. IEEE Trans. on Vis. and Computer Graphics.
[8] Henrik Wann Jensen. Realistic Image Synthesis Using Photon Mapping. A. K. Peters, Ltd., Natick,
MA, USA, 2001.
[9] Jens Kr¨
uger and R¨
udiger Westermann. Acceleration Techniques for GPU-based Volume Rendering.
In Proceedings IEEE Visualization 2003, 2003.
[10] Yuri Kryachko. Using vertex texture displacement for realistic water rendering. In GPU Gems 2.
Addison-Wesley Professional, April 2005.
[11] Gerd Marmitt, Heiko Friedrich, and Philipp Slusallek. Interactive volume rendering with ray
tracing. Eurographics State of the Art Reports, pages 115–136, 2006.
[12] Hanspeter Pﬁster. Moderne Volumenvisualisierung (modern volume visualization). it–Information
Technology (vormals it+ ti), 46(3/2004):117–122, 2004.
[13] Simon Premoze and Michael Ashikhmin. Rendering natural waters, 2001.
[14] Rong qin Chen. Real-time water rendering based on the graphics hardware acceleration. In Image
Analysis and Sig. Proc., 2009. IASP 2009, 2009.
[15] Martin Schreiber, Stefan Zimmer, Philipp Neumann, and Hans-Joachim Bungartz. Free-surface
lattice-boltzmann simulation on many-core architectures. In Proceedings of the International Conference on Computational Science (ICCS) 2011, June 2011.
[16] M. Sramek and A. Kaufman. Fast ray-tracing of rectilinear volume data using distance transforms.
Vis. and Computer Graphics, IEEE Transactions on, 2000.
[17] N. Thuerey. Physically based animation of free surface ﬂows with the lattice boltzmann method.
PhD thesis, Mar 2007.
[18] Nils Th¨
urey, C K¨
orner, and U R¨
ude. Interactive free surface ﬂuids with the lattice boltzmann
method. FAU, System Simulation (LSS) Technical Report 05, 4, 2005.
[19] Chris Wyman. An approximate image-space approach for interactive refraction. In ACM SIGGRAPH 2005 Papers, SIGGRAPH ’05, pages 1050–1053. ACM, 2005.
[20] Chris Wyman. Hierarchical caustic maps, 2007.
[21] Chris Wyman and Scott Davis. Interactive image-space techniques for approximating caustics. In
In Proceedings of ACM I3D, pages 153–160. ACM Press. 2, 2006.
[22] Chris Wyman and Greg Nichols. Adaptive caustic maps using deferred shading, 2009.
[23] Roni Yagel and Arie Kaufman. Template-based volume viewing. Computer Graphics Forum,
11(3):153–167, 1992.
[24] Gernot Ziegler, Art Tevs, Christian Theobalt, and Hans-Peter Seidel. GPU point list generation
through histogram pyramids. Research report, 2006.

658

