About the Relationship between Election Problem and
Failure Detector in Asynchronous Distributed Systems
Sung-Hoon Park
Dept. of Computer Science, NamSeoul University, Chung-Nam 330-800, Korea
spark@nsu.ac.kr

Abstract. This paper is about the relationship between Election problem
and Failure Detector in asynchronous distributed systems. We first discuss
the relationship between the Election problem and the Consensus problem
in asynchronous distributed systems with unreliable failure detectors.
Chandra and Toueg have stated that Consensus is solvable in asynchronous
systems with unreliable failure detectors. But, in contrast to the Consensus
problem, the Election problem is impossible to solve with unreliable failure
detectors even with a single crash failure. More precisely, the weakest
failure detector that is needed to solve this problem is a Perfect Failure
Detector, which is strictly stronger than the weakest failure detector that is
needed to solve Consensus.

1 Introduction
To elect a Leader (or Coordinator) in a distributed system, an agreement problem
must be solved among a set of participating processes. This problem, called the
Election problem, requires the participants to agree on only one leader in the system
[1]. The problem has been widely studied in the research community [2,3,4,5,6]. One
reason for this wide interest is that many distributed protocols need an election
protocol.
The Election problem is described as follows. At any time, there is at most one
process that considers itself a leader and all other processes consider it as to be their
only leader. If there is no leader, a leader is eventually elected.
Consensus and Election are similar problems in that they are both agreement
problems. The so-called FLP impossibility result, which states that it is impossible to
solve any non-trivial agreement in an asynchronous system even with a single crash
failure, applies to both problems [7]. The starting point of this paper is the
fundamental result of Chandra and Toueg [8], which states that Consensus is solvable
in asynchronous systems with unreliable failure detectors.
An interesting question is then whether the Election problem can also be solved in
asynchronous systems with unreliable failure detectors. The answer to this question is
“No”. This means that the Election problem is harder than the Consensus problem.
However, in contrast to initial intuition, the reason Election is harder than Consensus
is not upon its Liveness condition. The difficulty in solving Election is actually upon
its Safety condition (all the processes connected the system never disagree on the
leader). This condition requires precise knowledge about failures which unreliable
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 185–193, 2003.
© Springer-Verlag Berlin Heidelberg 2003

186

S.-H. Park

failure detectors cannot provide. More precisely, the weakest failure detector that is
needed to solve this problem is a Perfect Failure Detector, which is strictly stronger
than the weakest failure detector that is needed to solve Consensus.
The rest of the paper is organized as follows. Section 2 describes motivations and
the related works. In Section 3 we describe our system model. In Section 4 and 5 we
show that the weakest failure detector for solving Election is a Perfect failure
Detector. Finally, Section 6 summarizes the main contributions of this paper and
discusses related and future work.

2 Motivations and Related Works
In recent years, several paradigms have been identified to simplify the design of faulttolerant distributed applications in a conventional static system. Election is among the
most noticeable, particularly since it is closely related to group communication, which
(among other uses) provides a powerful basis for implementing active replications.
It was shown in [7] that the Consensus problem cannot be solved in an
asynchronous system if even a single crash failure can occur. The intuition behind this
widely cited result is that in an asynchronous system, it is impossible for a process to
distinguish between another process that has crashed and one that is merely very
slow. The consequences of this result have been enormous, because most real
distributed systems today can be characterized as asynchronous, and Consensus is an
important problem to be solved if the system is to tolerate failures.
As a result, the Consensus problem has frequently been used as a yardstick of
computability in asynchronous fault-tolerant distributed systems. That means that if
any problem is harder than Consensus, it also cannot be solved in asynchronous
systems.
The asynchronous model of computation is especially popular in practice because
unpredictable workloads are sources of asynchrony in many real systems. Therefore
rendering any synchrony assumption is valid only probabilistically. Thus, the
impossibility of achieving Consensus reveals a serious limitation of this model for
fault-tolerant applications such as the Election problem. Because Consensus is such a
fundamental problem, researchers have investigated various ways of circumventing
the impossibility.
Actually, the main difficulty in solving such a problem in presence of process
crashes lies in the detection of crashes. As a way of getting around the impossibility
of Consensus, Chandra and Toug extended the asynchronous model of computation
with unreliable failure detectors and showed that the Consensus problem is solvable
even with unreliable failure detectors [10].
We are not the first to show that there are problems harder than Consensus. The
first such result that we are aware of is [11] in which the authors show that NonBlocking Atomic Commitment (NB-AC) cannot be implemented with the weakest
failure detector that can implement Consensus. This problem arises when transactions
update data in a distributed system and the termination of transactions should be
coordinated among all participants if data consistency is to be preserved even in the
presence of failures [12]. It resembles the Election problem in that NB-AC is harder
than Consensus.

About the Relationship between Election Problem and Failure Detector

187

To solve the NB-AC problem with an unreliable failure detector, they propose
Non-Blocking Weak Atomic Commitment (NB-WAC) protocol and show that a
failure detector weaker than a Perfect Failure Detector is strong enough to solve NonBlocking Weak Atomic Commitment (NB-WAC).

3 Model and Definitions
Our model of asynchronous computation with failure detection is the one described in
[10]. In the following, we only recall some informal definitions and results that are
needed in this paper.
3.1 Processes
We consider a distributed system composed of a finite set of processes Ω={p1,p2,..,pn}
completely connected through a set of channels. Communication is by message
passing, asynchronous and reliable. Processes fail by crashing; Byzantine failures are
not considered.
Asynchrony means that there is no bound on communication delays or process
relative speeds. A reliable channel ensures that a message, sent by a process pi to a
process pj, is eventually received by pj if pi and pj are correct (i.e. do not crash).
To simplify the presentation of the model, it is convenient to assume the existence
of a discrete global clock. This is merely a fictional device inaccessible to processes.
The range of clock ticks is the set of natural numbers. A history of a process pi∈Ω is a
0
1
2
k
k
sequence of events hi = ei · ei · ei · · · ei , where ei denotes an event of process pi
occurred at time k. Histories of correct processes are infinite. If not infinite, the
k
process history of pi terminates with the event crashi (process pi crashes at time k ).
Processes can fail at any time, and we use f to denote the number of processes that
may crash. We consider systems where at least one process correct (i.e. f. |Ω| ).
A failure detector is a distributed oracle which gives hints on failed processes. We
consider algorithms that use failure detectors. An algorithm defines a set of runs, and
a run of algorithm A using a failure detector D is a tuple R = < F, H, I, S, T>: I is an
initial configuration of A; S is an infinite sequence of events of A (made of process
histories); T is a list of increasing time values indicating when each event in S
occured; F is a failure pattern that denotes the set F(t) of processes that have crashed
at any time t; H is a failure detector history, which gives each process p and at any
time t, a (possibly false ) view H(p,t) of the failure pattern: H(p,t) denotes a set of
processes, and q∈ H(p,t) means that process p suspects process q at time t.
3.2 Failure Detector Classes
Failure detectors are distributed oracles related to the detection of failures. A failure
detector of a given class is a device that gives hints on a set of processes that it
suspects to have crashed.

188

S.-H. Park

The Oracle notion has first been introduced as a language whose words can be
recognized in one step from a particular state of a Turing machine [13,14]. The main
characteristic of such oracles is to hide a sequence of computation steps in a single
step (they may also hide an uncomputable function). They have been used to provide
a hierarchy of problems. Hence the Oracle notation is related to the detection of
failures. These oracles do not change the pattern of failures that affect the execution in
which they are used. The main characteristic of such oracles is not related to the
number of computation steps they hide, but to the guess they provide about failures.
Failure detectors are abstractly characterized by completeness and accuracy
properties [10]. Completeness characterizes the degree to which crashed processes are
permanently suspected by correct processes. Accuracy restricts the false suspicions
that a process can make.
Two completeness properties have been identified. Strong Completeness, i.e. there
is a time after which every process that crashes is permanently suspected by every
correct process, and Weak Completeness, i.e. there is a time after which every process
that crashes is permanently suspected by some correct process.
Four accuracy properties have been identified. Strong Accuracy, i.e. no process is
never suspected before it crashes. Weak Accuracy, i.e. some correct process is never
suspected. Eventual Strong Accuracy (.Strong ), i.e. there is a time after which correct
processes are not suspected by any correct process; and Eventual Weak Accuracy
(.Weak ), i.e. there is a time after which some correct process is never suspected by
any correct process. A failure detector class is a set of failure detectors characterized
by the same completeness and the same accuracy properties (Fig. 1).
For example, the failure detector class P, called Perfect Failure Detector, is the set
of failure detectors characterized by Strong Completeness and Strong Accuracy.
Failure detectors characterized by Strong Accuracy are reliable: no false suspicions
are made. Otherwise, they are unreliable.

Completeness
Strong
Weak

Strong
P
Q

Weak
S
W

Accuracy
.Strong
.P
.Q

.Weak
.S
.W

Fig. 1. Failure detector classes. A failure detector class is a set of failure detectors characterized
by the same completeness and the same accuracy properties.

For example, failure detectors of S, called Strong Failure Detector, are unreliable,
whereas the failure detectors of P are reliable.
3.3 Reducibility and Transformation
The notation of problem reduction first has been introduced in the problem
complexity theory [14], and in the formal language theory [13]. It has been also used
in the distributed computing [15,16]. We consider the following definition of problem
reduction. An algorithm A solves a problem B if every run of A satisfies the

About the Relationship between Election Problem and Failure Detector

189

specification of B. A problem B is said to be solvable with a class C if there is an
algorithm which solves B using any failure detector of C. A problem B1 is said to be
reducible to a problem B2 with class C, if any algorithm that solves B2 with C can be
transformed to solve B1 with C. If B1 is not reducible to B2, we say that B1 is harder
than B2.
A failure detector class C1 is said to be stronger than a class C2, (written C1 ≥ C2),
if there is an algorithm which, using any failure detector of C1, can emulate a failure
detector of C2. Hence if C1 is stronger than C2 and a problem B is solvable with C2,
then B is solvable with C1. The following relations are obvious: P ≥ Q, P ≥ S, .P ≥.Q,
.P ≥.S, S ≥W, .S ≥.W, Q≥W, and .Q ≥.W. As it has been shown that any failure
detector with Weak Completeness can be transformed into a failure detector with
Strong Completeness [10], we also have the following relations: Q ≥ P, .Q ≥ .P, W ≥ S
and .W ≥.S. Classes S and .P are incomparable.
3.4 The Election Problem
The Election problem is described as follows: At any time, at most one process
considers itself the leader, and at any time, if there is no leader, a leader is eventually
elected. More formally, the Election Problem is specified by the following two
properties:

− Safety: All processes connected the system never disagree on a leader.
− Liveness: All processes should eventually progress to be in a state in which all
processes connected to the system agree to the only one leader.
3.5 The Consensus Problem
In the Consensus problem (or simply Consensus), every participant proposes an input
value, and correct participant must eventually decide on some common output value
[9,17]. Consensus is specified by the following conditions.

− Agreement: no two correct participant decide different values;
− Uniform-Validity: if a participant decides v, then v must have been proposed by
some participant;
− Termination: every correct participant eventually decide.
Chandra and Toueg have stated the following two fundamental results [8]:
1. If f < |Ω|, Consensus is solvable with either S or W.
2. If f < |Ω|/2, Consensus is solvable with either .S or .W.

190

4

S.-H. Park

Impossibility of Solving the Election Problem with Unreliable
Failure Detectors

In this section, we show that the Election problem is not solvable in asynchronous
systems with unreliable failure detectors. This impossibility result holds even with the
assumption that at most one process may crash. Though a Strong Failure Detector is
sufficient to solve Consensus, it is not sufficient to solve Election. More precisely, we
show that if f > 0, Election can not be solved with either .P or S.

Theorem 1. If f > 0, Election can not be solved with either .P or S.
PROOF (by contradiction). Consider a failure detector D of .P (respectively of S). We
assume for a contradiction that there exists a deterministic election protocol E that can
be combined with a failure detector D such that E + D is also an election protocol.
Consider an algorithm A combined with E + D which solves Election and a run R = <
F, HD, I, S, T > of A. We assume that only two processes Pi and Pj are correct.
Consider that Pi is a leader at time (R, t0). At time (R, t1) where t1 > t0, the process Pj
sends a message to confirm whether the leader is alive. At time (R, t2) where t2 > t1,
the process Pi sends a reply message to the process Pj. But at time (R, t3) where t3 > t1,
Pj falsely suspects other process Pi by the Weak accuracy property of the unreliable
failure detector D in some run. At time (R, t4) where t4 > t3, Pj considers itself a leader
by delaying the receipt of the reply message sent by Pi until t5, where t5 > t4. Thus at
time (R, t5) both Pi and Pj consider themselves the leader, violating the assumption
that A is an election protocol. But after time t5, all the processes except Pi and Pj are
suspected. Hence there is a time after which every process that crashes is permanently
suspected by every correct process. So HD satisfies Strong Completeness.
Consider Accuracy.

− If D is of class .P, HD satisfies Eventual Strong Accuracy, i.e. there is a time after
which correct participants are never suspected by any correct participant. As Pi and
Pj are never suspected after time t5 in HD, then HD satisfies Eventual Strong
Accuracy.
− If D is of class S, HD satisfies Weak Accuracy, i.e. some correct participant is never
suspected in HD. As Pj is never suspected by the correct process Pi, HD satisfies
Weak accuracy.
− This is a contradiction.
By the relation between failure detector classes, we have the following Corollary.
Corollary 1. If f > 0, Election is not solvable with either .Q, S, W or .W.

5 The Weakest Failure Detector for Solving the Election Problem
In the previous section, we showed that the Election problem is not solvable in
asynchronous systems with unreliable failure detectors. Then, what is the weakest
failure detector that is needed to solve this problem in asynchronous distributed

About the Relationship between Election Problem and Failure Detector

191

systems? In this section, as the answer to this question, we show that a Perfect Failure
Detector is the weakest failure detector for solving Election.
Theorem 2. If f > 0, a failure detector of class Q is sufficient to solve Election.
PROOF: The Election problem can be solved using an election protocol E combined
with the following algorithm A and a failure detector D belonging to class Q:
1. Each process has a unique ID number that is known by all processes a priority.
2. The leader is initially the process with the lowest ID number.
3. If a process detects a failure, it broadcasts this information to all other processes.
Upon receiving such a message, the receiver detects the failure.
4. When a process detects the failure of all processes with lower ID numbers, then
that process becomes the leader.
The proof that the protocol E satisfies Election is as followings.

− Safety (proof by contradiction). The election protocol E starts only when the
current leader has failed by the strong Accuracy property of D which belongs to the
class Q (line 3). Assume that the current leader has crashed at time (R, t1) in some
run R of the protocol E. We assume for the contradiction that two processes, Pi and
Pj (Pi ≠ Pj ) are elected as leaders at time (R, t5), where t5 > t1. To be elected as a
leader, they must have detected the failure of all processes with lower ID numbers
(line 4). That means that Pi and Pj have detected the failure of all processes with
lower ID numbers at a time (R, t3) and at a time (R, t4) respectively, where t1 < t3, t4
< t5. As two processes are different each other (Pi ≠ Pj ), at least one of them has a
lower ID number (line 1). Thus, one process falsely suspected the other. But it is
contradiction to the assumption that a failure detector D of class Q has the strong
Accuracy property, i.e. no process is never suspected before it crashes.
− Liveness. In case of the current leader’s failure at time (R, t1) in some run of E ,
some correct process eventually detects the leader’s crash by the Weak
Completeness property of the failure detector D of class Q ( i.e. there is a time after
which every process that crashes is permanently suspected by some correct process
) and broadcasts this information at time (R, t2) where t2> t1 (line 3). By the reliable
channel assumption, every correct process eventually receives the information and
starts to detect the failures of all processes with lower ID (line 3). Because the
process detected a failure broadcasts this information to all other processes (line 4),
every correct process eventually suspects every failed process. Thus at time (R, t3)
where t3 > t2, at least one process eventually has completed the detection of all
failed processes with lower ID. That process becomes a leader at time (R, t4) where
t4 > t3 (line 4).
Theorems 1, 2 and Corollary 1 together show that a failure detector of class Q that
satisfies Weak Completeness and Strong Accuracy is the weakest failure detector
sufficient to solve Election. However, the failure detectors belonging to class Q are
strong enough to implement a Perfect Failure Detector, as shown in [10]. Hence, we
have the following theorem.

192

S.-H. Park

Theorem 3. A weakest failure detector to solve Election is the Perfect Failure
Detector.
PROOF: As we mentioned it above, Theorems 1, 2 and Corollary 1 together show
that a failure detector belonging to the class Q is the weakest failure detector
sufficient to solve Election. It is shown in [8] that a failure detector of class Q
satisfying Strong Accuracy and Weak Completeness can be used to implement a
Perfect Failure Detector P. Therefore a Perfect Failure Detector is the weakest failure
detector that is sufficient to solve Election. This theorem follows from Theorems 1, 2
and Corollary 1.

6 Concluding Remarks
The importance of this paper is in extending the applicability field of the results,
which Chandra and Toueg have studied on solving problems, into the Election
problem in asynchronous system (with crash failures and reliable channels)
augmented with unreliable failure detectors.
More specifically, what is the weakest failure detector for solving the Election
problem in the asynchronous system? As an answer to this question, we showed that
Perfect failure Detector P is the weakest failure detector to solve the Election problem
in asynchronous systems. Though S or W are sufficient to solve Consensus, we
showed that they are not sufficient to solve Election. Therefore the Election problem
is strictly harder than the Consensus problem even when assuming a single crash.
Determining that a problem Pb1 is harder than a problem Pb2 has a very important
practical consequence, namely, the cost of solving Pb1 cannot be less than that of
solving Pb2. That means that the cost of solving Election cannot be less than that of
solving Consensus.
The applicability of these results to problems other than Consensus has been
discussed in [8,17,18,19]. To our knowledge, it is however the first time that Election
problems are discussed in asynchronous systems with unreliable failure detectors. We
are not sure that there are problems harder than Election. But we can define failure
detectors that are stronger than a Perfect Failure Detector. For example, we can define
a failure detector that is not only perfect but also guarantees that a failure of a process
is detected only after all messages that it has sent have been received by the detecting
process. We can use this failure detector to solve some problems such as the nonblocking version of the asynchronous Primary-Backup problem [12].

References
1.
2.
3.

G. LeLann: Distributed Systems–towards a Formal Approach. Information Processing 77,
B. Gilchrist, Ed. North–Holland, 1977
H. Garcia-Molina: Elections in a Distributed Computing System. IEEE Transactions on
Computers, C-31 (1982) 49–59
H. Abu-Amara and J. Lokre: Election in Asynchronous Complete Networks with
Intermittent Link Failures. IEEE Transactions on Computers, 43 (1994) 778–788

About the Relationship between Election Problem and Failure Detector
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.

193

H.M. Sayeed, M. Abu-Amara, and H. Abu-Avara, “Optimal Asynchronous Agreement
and Leader Election Algorithm for Complete Networks with Byzantine Faulty Links.,”
Distributed Computing, vol. 9, no. 3, pp.147–156, 1995
J. Brunekreef, J.-P. Katoen, R. Koymans, and S. Mauw, “Design and Analysis of Dynamic
Leader Election Protocols in Broadcast Networks,” Distributed Computing, vol. 9, no. 4,
pp.157–171, 1996
G. Singh: Leader Election in the Presence of Link Failures. IEEE Transactions on Parallel
and Distributed Systems, 7 (1996) 231–236
M. Fischer, N. Lynch, and M. Paterson: Impossibility of Distributed Consensus with One
Faulty Process. Journal of ACM, (32) 1985 374–382
T. Chandra and S.Toueg: Unreliable Failure Detectors for Reliable Distributed Systems.
Journal of ACM, 43 (1996) 225–267
D. Dolev and R Strong: A Simple Model For Agreement in Distributed Systems. In: B.
Simons and A. Spector (eds.): Fault-Tolerant Distributed Computing. Lecture Notes in
Computer Science, Vol.448. Springer-Verlag, Berlin Heidelberg New York (1987) 42–50
T. Chandra, V. Hadzilacos and S. Toueg: The Weakest Failure Detector for Solving
Consensus. Journal of ACM, 43 (1996) 685–722
Rachid Guerraoui. “Revisiting the Relationship between Non-Blocking Atomic
Commitment and Consensus,” In Proceedings of the 10th International Workshop on
Distributed Algorithms, Springer Verlag (LNCS 857), 1996
P.A.Bernstein, V. Hadzilacos, and N. Goodman, “Concurrency Control and Recovery in
Database Systems,” Addison Wesley, 1987
J. E. Hopcroft and J. D. Ullman: Introduction to Automata Theory, Languages and
Computation. Addison Wesley, Reading, Mass., 1979
Garey M.R. and Johnson D.S: Computers and Intractability: A Guide to the Theory of NPCompleteness. Freeman W.H & Co, New York, 1979
Eddy Fromentin, Michel RAY and Frederic TRONEL: On Classes of Problems in
Asynchronous Distributed Systems. In Proceedings of Distributed Computing Conference.
IEEE, June 1999
Hadzilacos V. and Toueg S: Reliable Broadcast and Related Problems. Distributed
Systems (Second Edition), ACM Press, New York, pp.97–145, 1993
V. Hadzilacos, “On the Relationship between the Atomic Commitment and Consensus
Problems,” In Fault-Tolerant Distributed Computing, pp. 201–208. B. Simons and A.
spector ed, Springer Verlag (LNCS 448), 1987
Schiper and A. Sandoz: Primary Partition: Virtually-Synchronous Communication harder
than Consensus. In Proceedings of the 8th Workshop on Distributed Algorithms, 1994
R. Guerraoui and A. Schiper: Transaction model vs. Virtual Synchrony model: bridging
the gap. In: K. Birman, F. Mattern and A. Schiper (eds.): Distributed Systems: From
Theory to Practice. Lecture Notes in Computer Science, Vol. 938. Springer-Verlag, Berlin
Heidelberg New York (1995) 121–132

