On the Scrambled Sobo´l Sequence
Hongmei Chi1 , Peter Beerli2 , Deidre W. Evans1 , and Micheal Mascagni2
1

2

Department of Computer and Information Sciences,
Florida A&M University, Tallahassee, FL 32307-5100
hchi@cis.famu.edu
School of Computational Science and Information Technology,
Florida State University, Tallahassee, FL 32306-4120

Abstract. The Sobo´l sequence is the most popular quasirandom sequence because of its simplicity and eﬃciency in implementation. We
summarize aspects of the scrambling technique applied to Sobo´l sequences and propose a new simpler modiﬁed scrambling algorithm, called
the multi-digit scrambling scheme. Most proposed scrambling methods
randomize a single digit at each iteration. In contrast, our multi-digit
scrambling scheme randomizes one point at each iteration, and therefore
is more eﬃcient. After the scrambled Sobo´l sequence is produced, we use
this sequence to evaluate a particular derivative security, and found that
when this sequence is numerically tested, it is shown empirically to be
far superior to the original unscrambled sequence.

1

Introduction

The use of quasirandom, rather than random, numbers in Monte Carlo methods,
is called quasi–Monte Carlo methods, which converge much faster than normal
Monte Carlo. Quasi–Monte Carlo methods are now widely used in scientiﬁc
computation, especially in estimating integrals over multidimensional domains
and in many diﬀerent ﬁnancial computations.
The Sobo´l sequence [21, 22] is one of the standard quasirandom sequences and
is widely used in quasi–Monte Carlo applications. The eﬃcient implementation of
Sobo´l sequence uses Gray codes. We summarize aspects of this technique applied
to Sobo´l sequences and propose a new scrambling algorithm, called a multiple
digit scrambling scheme. Most proposed scrambling methods [1, 8, 16, 19] randomized a single digit at each iteration. In contrast, our multi-digit scrambling
scheme, which randomizes one point at each iteration, is eﬃcient and fast because the popular modular power-of-two pseudorandom number generators are
used to speed it up.
The construction of the Sobo´l sequence uses linear recurrence relations over
the ﬁnite ﬁeld, F2 , where F2 = {0, 1}. Let the binary expansion of the nonnegative integer n be given by n = n1 20 + n2 21 + ... + nw 2w−1 . Then the nth element
(j)
of the jth dimension of the Sobo´l sequence, xn , can be generated by
(j)

(j)

(j)
x(j)
n = n1 ν1 ⊕ n2 ν2 ⊕ ... ⊕ nw νw
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 775–782, 2005.
c Springer-Verlag Berlin Heidelberg 2005

(1)

776

H. Chi et al.
(j)

where νi is a binary fraction called the ith direction number in the jth dimension. These direction numbers are generated by the following q-term recurrence
relation
(j)

νi

= a1 νi−1 ⊕ a2 νi−2 ⊕ ...aq νi−q+1 ⊕ νi−q ⊕ (νi−q /2q ).
(j)

(j)

(j)

(j)

(j)

(2)

We have i > q, and the bit, ai , comes from the coeﬃcients of a degree-q
primitive polynomial over F2 . Note that one should use a diﬀerent primitive
polynomial to generate the Sobo´l direction numbers in each diﬀerent dimension.
(j)
(j)
(j)
Another representation of νi is to use the integer mi = νi ∗ 2i . Thus, the
(j)
choice of q initial direction numbers νi becomes the problem of choosing q odd
m

(j)

integers mi < 2i . The initial direction numbers, νi = 2ii , in the recurrence,
(j)
where i ≤ q, can be decided by the mi ’s, which can be arbitrary odd integers
i
less than 2 . The Gray code is widely used in implementations [4, 11] of the Sobo´l
sequence.
The direction numbers in Sobo´l sequences come recursively from a degree-q
primitive polynomial; however, the ﬁrst q direction numbers can be arbitrarily
assigned for the above recursion (equation (2)). Selecting them is crucial for
obtaining high-quality Sobo´l sequences. The top pictures in both Fig. 1 and Fig.
2 show that diﬀerent choices of initial direction numbers can make the Sobo´l
sequence quite diﬀerent. The initial direction numbers for the top picture in
ﬁgure (1) is from Bratley and Fox’s paper [4]; while top picture in ﬁgure (2)
results when the initial direction numbers are all ones.
Sobo´l [22] realized the importance of initial direction numbers, and published an additional property (called Property A) for direction numbers to
produce more uniform Sobo´l sequences; but implementations [11] of Sobo´l sequences showed that Property A is not really that useful in practice. Cheng and
Druzdzel [5, 20] developed an empirical method to search for initial direction
(j)
numbers, mi , in a restricted space. Their search space was limited because they
had to know the total number of quasirandom numbers, N , in advance to use
their method. Jackel [10] used a random sampling method to choose the initial
(j)
(j)
mi with a uniform random number uij , so that mi = uij ×2i−1 for 0 < i < q
(j)
with the condition that mi is odd.
Owing to the arbitrary nature of initial direction numbers of the sequence,
poor two-dimensional projections frequently appear in the Sobo´l sequence. Morokoﬀ and Caﬂisch [18] noted that poor two-dimensional projections for the
Sobo´l sequence can occur anytime because of the improper choices of initial
direction numbers. The bad news is that we do not know in advance which initial direction numbers cause poor two-dimensional projections. In other words,
poor two-dimensional projections are diﬃcult to prevent by trying to eﬀectively
choose initial direction numbers. Fortunately, scrambling Sobo´l sequences [8, 19]
can help us improve the quality of the Sobo´l sequence having to pay attention
to the proper choice of the initial direction numbers.
(j)

(j)

On the Scrambled Sobo´l Sequence

0.8

0.8
Dimension 28,

1

Dimension 28,

1

0.6

0.6

0.4

0.4

0.2

0

777

0.2

0.2

0.4
0.6
Dimension 27

0.8

1

0

0.2

0.4
0.6
Dimension 27

0.8

1

Fig. 1. Left: 4096 points of the original Sobo´l sequence and the initial direction numbers
are from Bratley and Fox’s paper [4]; right: 4096 points of the scrambled version of the
Sobo´l sequence

2

Scrambling Methods

Recall that Sobo´l sequence is deﬁned over the ﬁnite ﬁeld, F2 [13]. Digit permutation is commonly thought eﬀective in the ﬁnite ﬁeld, Fp . When digit permutation
is used to scramble a quasirandom point over Fp , the zero is commonly left out.
The reason is that permuting zero (assuming an inﬁnite string of trailing zeros)
leads to a biased sequence in the sense that zero can be added to the end of any
sequence while no other digit can. So this strategy for pure digital permutation,
where zero is not changed, is not suitable for the Sobo´l sequence because the
Sobo´l sequence is over F2 . For example, we could write 0.0101 as 0.01010000 if
we want to scramble 8 digits. If zero is left out, the scrambled results for 0.0101
and 0.01010000 are same. Otherwise, the bias may be introduced.
The linear permutation [8] is also not a proper method for scrambling the
(1)
(2)
(s)
Sobo´l sequence. Let xn = (xn , xn , . . . , xn ) be any quasirandom number in
(1) (2)
(s)
[0, 1)s , and zn = (zn , zn , . . . , zn ) be the scrambled version of the point xn .
(j)
(j)
(j) (j)
(j)
Suppose that each xn has a b-ary representation as xn = 0.xn1 xn2 ...xnK ...,
where K deﬁnes the number of digits to be scrambled in each point. Then we
deﬁne
zn(j) = c1 x(j)
(3)
n + c2 , for j = 1, 2, .., s,
where c1 ∈ {1, 2, ..., b − 1} and c2 ∈ {0, 1, 2, ..., b − 1}. Since the Sobo´l sequence
is built over F2 , one must assign 1 to c1 and 0 or 1 to c2 . Since the choice of c1
is crucial to the quality of the scrambled Sobo´l sequence, this linear scrambling
method is not suitable for the Sobo´l sequence or any sequence over F2 .
As stated previously, the quality of the Sobo´l sequence depends heavily on
the choices of initial direction numbers. The correlations between diﬀerent dimensions are due to improper choices of initial direction numbers [5]. Many

778

H. Chi et al.

methods [5, 10] to improve the Sobo´l sequence focus on placing more uniformity
into the initial direction numbers; but this approach is diﬃcult to judge by any
measure. We concentrate on improving the Sobo´l sequence independent of the
initial direction numbers. This idea motivates us to ﬁnd another approach to
obtain high-quality Sobo´l sequences by means of scrambling each point.

0.8

0.8
Dimension 28,

1

Dimension 28,

1

0.6

0.6

0.4

0.4

0.2

0

0.2

0.2

0.4
0.6
Dimension 27

0.8

1

0

0.2

0.4
0.6
Dimension 27

0.8

1

Fig. 2. Left: 4096 points of the original Sobo´l sequence with all initial direction numbers
ones [23], right: 4096 points of the scrambled version of the Sobo´l sequence

3

An Algorithm for Scrambling the Sobo´l Sequence

We provide a new approach for scrambling the Sobo´l sequence, and measure the
eﬀectiveness of this approach with the number theoretic criterion that we have
used in [6]. Using this new approach, we can now scramble the Sobo´l sequence
in any number of dimensions.
The idea of our algorithm is to scramble k bits of the Sobo´l sequence instead
of scrambling one digit at a time. The value of k could be any positive integer
as long as we could ﬁnd a suitable Linear Congruential Generators (LCG) for it.
Assume xn is nth Sobo´l point, and we want to scramble ﬁrst k bits of xn . Let
zn be the scrambled version of xn . Our procedure is described as follows:
1. yn = xn ∗ 2k , is the k most-signiﬁcant bits of xn , to be scrambled.
2. yn∗ = ayn (mod m) and m ≥ 2k − 1, is the linear scrambling, applied to this
integer.
y∗
3. zn = 2nk + (xn − y2nk ), is the reinsertion of these scrambled bits into the Sobo´l
point.
The key step of this approach is based on using LCGs as scramblers. LCGs
with both power-of-two and prime moduli are common pseudorandom number
generators. When the modulus of an LCG is a power-of-two, the implementation
is cheap and fast due to the fact that modular addition and multiplication are

On the Scrambled Sobo´l Sequence

779

just ordinary computer arithmetic when the modulus corresponds to a computer
word size. The disadvantage, in terms of quality, is hard to obtain the desired
quality of pseudorandom numbers when using a power-of-two as modulus. More
details are given in [14, 15]. So LCGs with prime moduli are chosen in this paper.
The rest of our job is to search for a suitable and reliable LCG as our scrambler. When the modulus of a LCG is prime, implementation is more expensive. A
special form of prime, such as a Merssene1 or a Sophie-Germain prime2 , can be
chosen so that the costliest part of the generation, the modular multiplication,
can be minimized [15].
To simplify the scrambling process, we look to LCGs for guidance. Consider
the following LCG:
(4)
yn∗ = ayn (mod m),
where m is chosen to be a Merssene, 2k −1, or Sophie-Germain prime in the form
of 2k+1 − k0 , k is the number of bits needed to “scramble”, and a is a primitive
root modulo m [12, 7]. We choose the modulus to be a Merssene or SophieGermain [15] because of the existence of a fast modular multiplication algorithms
for these primes. The optimal a should generate the optimal Sobo´l sequence, and
the optimal a’s for modulus 231 − 1 are tabulated in [7]. A proposed algorithm
for ﬁnding such optimal primitive root modulus m, a prime, is described [6].
Primarily, our algorithm provides a practical method to obtain a family of
scrambled Sobo´l sequences. Secondarily, it gives us a simple and uniﬁed way
to generate an optimal Sobo´l sequence from this family. According to Owen’s
proof [19], after scrambling, the Sobo´l sequence is still a (t, s)-net with base 2.
However, using our algorithm, we can begin with the worse choices for initial
direction numbers in the Sobo´l sequence: all initial direction numbers are ones.
The results are showed in Fig.2. The only unscrambled portion is a straight line
in both pictures. The reason is that the new scrambling algorithm cannot change
the point with the same elements into a point with diﬀerent elements.

4

Geometric Asian Options

Here, we present the valuation of a complex option, which has a simple analytical
solution. The popular example for such problems is a European call option on
the geometric mean of several assets, sometimes called a geometric Asian option.
Let K be the strike price at the maturity date, T . Then the geometric mean of
N assets is deﬁned as
N

G=(

1

Si ) N ,

i=1

where Si is the ith asset price. Therefore the payoﬀ of this call option at maturity
can be expressed as max(0, G − K). Boyle [3] proposed an analytical solution
1
2

If 2q − 1 and q are primes, then 2q − 1 is a Merssene prime.
If 2q + 1 and q are primes, then 2q + 1 is a Sophie-Germain prime.

780

H. Chi et al.

for the price of a geometric Asian option. The basic idea is that the product of
lognormally distributed variables is also lognormally distributed. This property
results because the behavior of an asset price, Si , follows geometric Brownian
motion [2]. The formula for using the Black-Scholes equation [2, 9] to evaluate
a European call option can be represented as
CT = S ∗ N orm(d1 ) − K ∗ e−r(T −t) ∗ N orm(d2 ),
ln(S/K) + (r + σ 2 )(T − t)
√
with d1 =
,
σ T −t
√
d2 = d1 − σ T − t,

(5)

where t is current time, r is a risk-free rate of interest, which is constant in
the Black-Scholes world, and Norm(d2 ) is the cumulative normal distribution.
Because the geometric Asian option has an analytical solution, we have a
benchmark to compare our simulation results with analytical solutions. The
parameters used for our numerical studies are as follows:
Number of assets
Initial asset prices, Si (0)
Volatilities, σi
Correlations, ρij
Strike price, K
Risk-free rate, r
Time to maturity, T

N
100, for i = 1, 2, ..., N
0.3
0.5, for i < j
100
10%
1 year

The formula for computing the analytic solution for a geometric Asian
option is computed by a modiﬁed Black-Scholes formula. Using the BlackScholes formula, we can compute the call price by using equation (5) with
modiﬁed parameters, S and σ 2 , as follows:
S = Ge(−A/2+σ
A=
σ2 =

1
N

2

/2)T

N

σi2

(6)

i=1

1
N2

N

N

ρij σi σj .
i=1 i=j

We followed the above formula in equation (5) and (6), computed the prices for
diﬀerent values of N = 10 and N = 30, with K = 100, and computed p = 12.292
and p = 12.631 respectively. For each simulation, we had an analytical solution,
so we computed the relative diﬀerence between that and our simulated solution
|p
−p|
, where p is the analytical solution and pqmc is the
with the formula qmc
p
price obtained by simulation. For diﬀerent N , we computed pqmc by simulating
the asset price ﬂuctuations using geometric Brownian motion. The results are
shown in Fig.3.

On the Scrambled Sobo´l Sequence

781

Fig. 3. Left: geometric mean of 10 stock prices; right: geometric mean of 30 stock
prices. Here the label “Sobol” refers to the original Sobo´l sequence [4], while “DSobol”
refers to our optimal Sobo´l sequence

From equation (5), we can see that random variables are drawn from a normal
distribution. Each Sobo´l point must be transformed into a normal variable. The
favored transformation method for quasirandom numbers is the inverse of the cumulative normal distribution function. The inverse normal function provided by
Moro [17] was used in our numerical studies. From Fig. 3, it is easily seen that the
optimal Sobo´l sequence performs much better than the original Sobo´l sequence.

5

Conclusions

A new algorithm for scrambling the Sobo´l sequence is proposed. This approach
can avoid the consequences of improper choices of initial direction numbers that
negatively impact the quality of this sequence. Therefore, our approach can enhance the quality of the Sobo´l sequence without worrying about the choices of
initial direction numbers. In addition, we proposed an algorithm and found an
optimal Sobo´l sequence within the scrambled family. We applied this sequence
to evaluate a complex security and found promising results even for high dimensions. We have shown the performance of the Sobo´l sequence generated by
our new algorithm empirically to be far superior to the original sequence. The
promising results prompt us to use more applications to test the sequences, and
to reach for more general scrambling techniques for the Sobo´l sequence.

References
1. E. Atanassov. A new eﬃcient algorithm for generating the scrambled sobo´l sequence. In Numerical Methods and Applications (LNCS 2542), pages 81–90, New
York, 2003. Springer-Verlag.

782

H. Chi et al.

2. F. Black and M. Scholes. The pricing of options and corporate liabilities. Journal
of Political Economy, 81:637–659, 1973.
3. P. Boyle. New life forms on the option landscape. Journal of Financial Engineering,
2(3):217–252, 1992.
4. P. Bratley and B. Fox. Algorithm 659: Implementing sobo´l’s quasirandom sequnence generator. ACM Trans. on Mathematical Software, 14(1):88–100, 1988.
5. J. Cheng and M.J. Druzdzel. Computational investigation of low-discrepancy sequences in simulation algorithms for bayesian networks. In Uncertainty in Artificial
Intelligence: Proceedings of the Sixteenth Conference (UAI-2000), pages 72–81, San
Francisco, CA, 2000. Morgan Kaufmann Publishers.
6. H. Chi, M. Mascagni, and T. Warnock. On the optimal Halton sequences. Mathematics and Computers in Simulation, To appear, 2005.
7. G. A. Fishman and L. R. Moore. An exhaustive analysis of multiplicative congruential random number generators with modulus 231 − 1. SIAM J. Sci. Stat.
Comput., 7:24–45, 1986.
8. H. S. Hong and F. J. Hickernell. Algorithm 823: Implementing scrambled digital
sequences. ACM Transactions on Mathematical Software, 29(2):95–109, june 2003.
9. J. Hull. Options, Future and Other Derivative Secutrities. Prentice-Hall, New
York, 2000.
10. P. Jackel. Monte Carlo Methods in Finance. John Wiley and Sons, New York,
2002.
11. S. Joe and F. Y. Kuo. Remark on Algorithm 659: Implementing Sobo´l’s quasirandom sequence generator. ACM Transactions on Mathematical Software, 29(1):49–
57, March 2003.
12. D. E. Knuth. The Art of Computer Programming, vol. 2: Seminumerical Algorithms. Addison-Wesley, Reading, Massachusetts, 1997.
13. R. Lidl and H.Niederreiter. Introduction to Finite Fields and Their Applications.
Cambridge University Press, Cambridge, 1994.
14. M. Mascagni. Parallel linear congruential generators with prime moduli. Parallel
Computing, 24:923–936, 1998.
15. M. Mascagni and H. Chi. Parallel linear congruential generators with SophieGermain moduli. Parallel Computing, 30:1217–1231, 2004.
16. J. Matousek. On the l2-discrepancy for anchored boxes. Journal of Complexity,
14:527–556, 1998.
17. B. Moro. The full monte. Risk, 8(2) (February):57–58, 1995.
18. W.J. Morokoﬀ and R.E. Caﬂish. Quasirandom sequences and their discrepancy.
SIAM Journal on Scientific Computing, 15:1251–1279, 1994.
19. A.B. Owen. Randomly permuted(t,m,s)-netsand (t,s)-sequences. Monte Carlo
and Quasi-Monte Carlo Methods in Scientific Computing, 106 in Lecture Notes in
Statistics:299–317, 1995.
20. S. H. Paskov and J. F. Traub. Faster valuation of ﬁnancial derivatives. J. Portfolio
Management, 22(1):113–120, Fall 1995.
21. I.M. Sobo´l. On the distribution of points in a cube and the approximate evaluation
of integrals. USSR Comput. Math. and Math. Phy., 7(4):86–112, 1967.
22. I.M. Sobo´l. Uniformly distributed sequences with additional uniformity properties.
USSR Comput. Math. and Math. Phy., 16:236–242, 1976.
23. S. Tezuka. Uniform Random Numbers, Theory and Practice. Kluwer Academic
Publishers, IBM Japan, 1995.

