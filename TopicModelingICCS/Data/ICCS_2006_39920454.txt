A Symbolic Approach to Quantum Computation
Simulation
Ant´
onio Pereira and Ros´
alia Rodrigues
Department of Mathematics,
University of Aveiro -Portugal,
{antoniop, rosalia}@mat.ua.pt

Abstract. This paper presents SQCS: a Mathematica package for the
symbolic simulation of quantum computation. It can be a useful tool
in the development and testing of quantum algorithms as well as in the
teaching and learning of quantum computation.
The strength of this symbolic approach is here illustrated with Grover’s
quantum algorithm for database search.

1

Introduction

Simulating quantum computations on a classical computer is, in general, a hard
task. Every classical simulator of the dynamics of a quantum computer faces two
problems: the representation of quantum states and its unitary evolution. (See,
for example, Nielsen and Chuang [1] or Kitaev [2] for introductory readings on
the basic concepts of quantum computation.)
In fact, a pure state of a composite closed quantum system with n d-level
qudits can be seen as a unit vector on a Hilbert space of dimension dn , i.e.,
a normalized vector with dn complex components. Also every unitary operator
deﬁned in a Hilbert space of dimension dn can be described by a dn × dn complex unitary matrix. Working directly with these vectors and matrices becomes
unfeasible even when the number of qudits is small.
Most of the existing quantum computation simulators follow the linear algebra
matrix approach, ranging from simple applets that handle computations with a
maximum of 4 qudits to heavy clusters of computers capable of solving problems
with a maximum of 30 qubits.
The complexity of simulating the state evolution of a quantum computer, for a
given quantum algorithm, is strongly related with the number of entangled qudits
in the system. We expect a quantum algorithm to admit an eﬃcient simulation
when, along the simulation process, only small subsystems of the whole system
become entangled.
This work was partially supported by the R&D unit Center for Research in Optimization and Control (CEOC) of the University of Aveiro – Portugal.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 454–461, 2006.
c Springer-Verlag Berlin Heidelberg 2006

A Symbolic Approach to Quantum Computation Simulation

2

455

The Symbolic Quantum Computation Simulator

On trying to build a simulator over an environment like Mathematica[3], the ﬁrst
observation to take into account is that not the content of a quantum object need
to be stored, but only its identiﬁer. To our knowledge, even the existing quantum
computation applications developed with Mathematica fail to take advantage of
this fact.
For instance, any basis state of a qudit on a d-dimensional Hilbert space need
not be represented as a full length d list, not even as a packed array, but simply as
a symbolic labelled object with head ket. Subsequent operations on such objects
should work only symbolically. Also every unitary operator can be represented
by a list of rules that deﬁne its symbolic action on quantum states.
The basic objects and operators deﬁned in SQCS are introduced next. Most
have external notations for the Mahematica frontend associated with the internal
representations.
2.1

Kets

For d ≥ 2 let Zd denote the set {0, . . . , d − 1}. A qudit is a quantum system
whose state is a unit vector in a d-dimensional Hilbert space. We assume that
the underlying Hilbert space is always Hd = Cd . It has become common practice
to identify the canonical computational basis of Hd with the set {|k , k ∈ Zd },
in Dirac notation.
The general state of a qudit is |ψ = k∈Zd ak |k , where ak ∈ C, for k ∈ Zd
and k∈Zd |ak |2 = 1. The case d = 2 gives the usual deﬁnition of a qubit with
2
2
general state, |ψ = a |0 + b |1 , |a| + |b| = 1, a, b ∈ C.
In SQCS each basis state of a Hilbert space is represented by a symbolic object with head ket. Figure 1 shows some examples and basic properties of ket
objects.
<< SQCS`

<< SQCS`

8ket@0D, ket@1D, ket@0, 3D, ket@1, 3D, ket@2, 3D<

… ψ0 ] = 1 ê Sqrt@2D … 0] + I ê Sqrt@2D … 1]

8… 0], … 1], … 03 ], … 13 ], … 23 ]<

… 0]
è!!!! +
2

α … ψ] + α … φ] êê Simplify

… ψ1 ] = I … ψ0 ] + 1 ê Sqrt@2D … 1]

α H… φ] + … ψ]L
α … φ] + β … φ] êê Simplify
Hα + βL … φ]
… φ] − … φ]
0

… 1]
è!!!!
2

… 1]
è!!!! +
2

… 0]
i
j
j
j è!!!! +
k 2

… ψ1 ] êê Simplify
… 0]
è!!!!
2

Fig. 1. Some algebraic properties of ket objects

… 1] y
z
z
è!!!! z
2 {

456

2.2

A. Pereira and R. Rodrigues

Bras

The set of linear functionals on a Hilbert space H is also an Hilbert space, called
the dual space of H and denoted by H† . According to Riesz theorem, the inner
product in H induces a one to one correspondence between the elements of H
and H† . In Dirac notation, the dual of the ket state |ψ ∈ H is the bra state
†
ψ| = |ψ ∈ H† .
In SQCS the dual of a ket object is another object with head bra. Figure 2
displays some basic properties of bra objects and of the dagger function.
2.3

BraKets and the Inner Product

Considerer a bra object ψ| ∈ H† . Since ψ| is a linear functional in H, the action
of ψ| on a ket object |φ ∈ H, ψ| (|φ ) gives a complex number, denoted by
the braKet ψ|φ .
Objects of type braKet can also have a diﬀerent meaning. Recall that the
Hilbert space H is equipped with a inner product, assumed to be conjugatelinear in the ﬁrst argument and linear in the second. If we denote the inner
product of |ψ and |φ by ψ| · |φ , then ψ| · |φ = ψ|φ = ψ| (|φ ).
Some properties of the inner product of kets are shown in ﬁg. 3.
2.4

The Kronecker Product

The underlying Hilbert space of a composite system, say a system composed of
two qubits, is the tensor product space of the underlying Hilbert spaces of the
<< SQCS`

<< SQCS`

… ψ0 ] = 1 ê Sqrt@2D … 0] + I ê Sqrt@2D … 1]

8bra@0D, bra@1D, bra@0, 3D, bra@1, 3D, bra@2, 3D<
8Y0 …, Y1 …, Y03 …, Y13 …, Y23 …<

Hα … ψ] + β … φ]L

… 0]
è!!!! +
2
… ψ0 ]

†

†

Y0 …
è!!!! −
2

Yψ … α∗ + Yφ … β∗

… 1]
è!!!!
2

Y1 …
è!!!!
2

Fig. 2. Some algebraic properties of bra objects
<< SQCS`

<< SQCS`

8Y0 … 1], Y1 … 1], Y13 … 23 ]<

Hα Yψ … + β Yφ …L ⋅ … η] êê. expandInnerProduct

80, 1, 0<

Yψ … η] α∗ + Yφ … η] β∗

8Y0 … ⋅ … 1], Y1 … ⋅ … 1], Y13 … ⋅ … 23 ]<

Yη … ⋅ Hα … φ] + β … ψ]L êê. expandInnerProduct

80, 1, 0<

α Yη … φ] + β Yη … ψ]

Fig. 3. Some algebraic properties of the inner product of kets

A Symbolic Approach to Quantum Computation Simulation

457

<< SQCS`

<< SQCS`

… φ] ⊗ H… ψ] ⊗ … η]L === H… φ] ⊗ … ψ]L ⊗ … η]

Hα … φ] + β … ψ]L ⊗ … η] êê. expandKron

True

α … φ] ⊗ … η] + β … ψ] ⊗ … η]

Hα … φ]L ⊗ … ψ]

… η] ⊗ Hα … φ] + β … ψ]L êê. expandKron

α … φ] ⊗ … ψ]

α … η] ⊗ … φ] + β … η] ⊗ … ψ]

… φ] ⊗ Hα … ψ]L

H… 0] + … 1]L

α … φ] ⊗ … ψ]

… 0] ⊗ … 0] + … 0] ⊗ … 1] + … 1] ⊗ … 0] + … 1] ⊗ … 1]

⊗2

ê. expandPow êê. expandKron

Fig. 4. Some algebraic properties of the tensor product

subsystems, H⊗2
2 = H2 ⊗ H2 . Thus the state of a quantum system with n qudits
is a unit vector of Hd ⊗n . This space has a computational basis with dn states
denoted by |xn−1 ⊗ · · · ⊗ |x1 ⊗ |x0 , where xj ∈ Zd , j = 0, 1, . . . , n − 1.
Each basis state in Hd ⊗n naturally associates with the radix d representation
n−1
of the integer j=0 xj dj ∈ Zdn , hence the following notations are equivalent:
|xn−1 ⊗ · · · ⊗ |x1 ⊗ |x0 ≡ |xn−1 · · · x1 x0 ≡

n−1
j=0

xj dj .

A state |ψ ∈ Hd ⊗n is called a product state if it can be decomposed as |ψ =
|ψn−1 ⊗ · · · ⊗ |ψ1 ⊗ |ψ0 , for some sequence of states |ψi ∈ Hd , i = 0, . . . , n − 1.
If no such sequence exists, |ψ is said to be an entangled state.
The tensor product, also known as the Kronecker product, is associative,
noncommutative and distributive with respect to linear combinations. Figure 4
displays some examples.
2.5

Operators

In SQCS every linear operator is represented by an object op[name_,n_,f_], where
name is a label for the operator, n is the number of qudits on which the operator
acts, and f is the function that deﬁnes the action of the operator on the basis
qudits.
The eﬃcient simulation of the action of a unitary operator on a given quantum
state is directly related to the possibility of decomposing it as a tensor product
of operators acting on a small number of qudits. Thus a major concern when
deﬁning a new operator in SQCS is to represent it as factored as possible.
Several operators are already available in SQCS. In particular, the identity operator In , where n is the number of qudits on which the operator acts (thus
diverging from the usual notation where subscripts represent the dimension of
the underlying Hilbert space of the operator). Other examples of provided operators are:
The Hadamard Operator. One of the fundamental operators in quantum
computation for creating superpositions of states is the Hadamard operator, H.
It acts on one qubit by H |i = √12 |0 + (−1)i |1 , for i = 0, 1. Figure 5
illustrates the fact that H is its own inverse.

458

A. Pereira and R. Rodrigues

<< SQCS`

<< SQCS`

numericOff

Η ⋅ … 0]

numericOff

… 0] + … 1]
è!!!!
2

Η⋅

Η ⋅ … 1]

… 0]

… 0] + … 1]
è!!!!
2

êê. expandLinearInside êê Simplify

Η⋅Η
Ι1

… 0] − … 1]
è!!!!
2

Fig. 5. The Hadamard operator in action
<< SQCS`
numericOff;

<< SQCS`

Η⊗4 ⋅ … 0]⊗4

numericOff;

Η⊗2 ⋅ … 0] ⊗ … 1] ê. expandKron

⊗4
1
I… 0] + … 1]M
4

1
H… 0] ⊗ … 0] − … 0] ⊗ … 1] + … 1] ⊗ … 0] − … 1] ⊗ … 1]L
2

Η⊗3 ⋅ … 0] ⊗ … 1] ⊗ … 0]

Η⊗5 ⋅ Η⊗5
Ι5

H… 0] + … 1]L ⊗ H… 0] − … 1]L ⊗ H… 0] + … 1]L
è!!!!
2 2

Fig. 6. The Walsh-Hadamard operator in action

The Walsh-Hadamard Operator. Let H⊗n denote the Walsh-Hadamard
operator on n qubits. It is deﬁned by
⊗n

H

|i =

1
2n/2

2n −1

(−1)i·j |j ,

(1)

j=0

for each basis state |i of the Hilbert space H = H2 ⊗n and where i · j denotes
the bitwise inner product of i and j modulo 2.
Using (1) directly in Mathematica would require exponentially increasing
memory resources. This can be avoided by observing that, given |ψ = ⊗n−1
i=0 |ψi ,
where each |ψi ∈ H2 , the state H⊗n |ψ can be computed in linear time by
n−1
H⊗n |ψ = i=0 H |ψi .
Some properties of the Walsh-Hadamard operator are displayed in ﬁg. 6. Its
implementation is based on the general concept of tensor powers of quantum
objects, which is fully supported in SQCS. Note that the internal evaluation is a
purely symbolic process, hence taking no signiﬁcant memory resources.
The Outer Product. Consider the Hilbert space H = Hd ⊗n and two basis
states |i , |j ∈ H. The outer product operator |i j| is deﬁned by the action on
each basis state |k , k = 0, . . . , dn − 1, by (|i j|) |k = j|k |i .

A Symbolic Approach to Quantum Computation Simulation

459

<< SQCS`
H… ψ] ⋅ Yφ …L ⋅ … η]
Yφ … η] … ψ]
H… 0] ⋅ Y1 …L

⊗4

⋅ H… 0] ⊗ … 0] ⊗ … 1] ⊗ … 1]L

0
H… 0] ⋅ Y1 …L

⊗4

⋅ H… 1] ⊗ … 1] ⊗ … 1] ⊗ … 1]L

… 0] ⊗ … 0] ⊗ … 0] ⊗ … 0]

<< SQCS`
y
i 3
z ⋅ … 0 ] êê. expandLinearOutside
j
j
4
z
j‚ … i4 ] ⋅ Yi4 …z
{
ki=0
… 04 ]

Fig. 7. The outer product operator in action

Given a state |ψ = ⊗n−1
s=0 |ψs , where |ψs ∈ H2 , the outer-product action
(|i j|) |ψ can be computed in time O(n) by ﬁrst computing radix-2 decompon−1
sitions of the integers i and j, i.e., |i = ⊗n−1
s=0 |is , j| = ⊗s=0 js |, and then use
n−1
the identity (|i j|) |ψ = s=0 (|is js |) |ψs .
An important property involving the outer product operator is the completeness
dn −1
relation i=0 |i i| = In . Figure 7 exhibits several properties of this operator.

3

Simulation of Grover’s Algorithm in

SQCS

Consider the problem of searching through an unstructured database. Let N =
2n be the number of records in a database labelled by the integers 0, 1, . . . , N −1.
Let x0 be the label of the only record in the database to be searched for.
Any classical algorithm solving this problem must take, on average, O (N ) steps
to ﬁnd x0 . However, Lov Grover [4] devised a quantum algorithm that ﬁnds the
√
unknown label, with probability not less than 1 − N1 , in just O
N steps.
Grover’s algorithm was simulated for databases sizes varying from 22 to 232 .
All the simulations were performed on a Pentium IV, 3.0 GHz processor, 1 GB
of RAM, personal computer.
In all the simulations the ﬁnal measurement step was ignored, in order to overcome the problem of generating a probability distribution over an exponential
number of values and then sampling from it (although an eﬃcient implementation of the measurement operator is possible due to the simple structure of the
representation of the ﬁnal state in Grover’s algorithm).
Next we brieﬂy review Grover’s algorithm. For a more detailed analysis and
generalizations see for example [5].
3.1

A Glimpse of Grover’s Algorithm

We are given a blackbox function, which we can query as many times as we like,
deﬁned by
1 if x = x0
.
(2)
f (x) =
0 otherwise

460

A. Pereira and R. Rodrigues
Seconds

Seconds
700

600

500

400

300

700

600

Seconds
3.5
3
2.5
2
1.5
1
0.5

500

400

300

6

200

8

10

12

14

16

18

n
200

100

100

n
10

15

20

25

30

1 µ 109

2 µ 109

3 µ 109

4 µ 109

N

Fig. 8. Simulation times for the quantum database case

This function, for which no knowledge of the internal computational work is
assumed, will be called the oracle.
In the quantum perspective, the oracle is given as a blackbox unitary operator Uf deﬁned by |x ⊗ |y → |x ⊗ |f (x) ⊕ y , where ⊕ denotes the addition
modulo 2. Uf is equivalent to the unitary operator I|x0 = I −2 |x0 x0 |.
Grover’s algorithm is based on the operator Q = − H⊗n I|0 H⊗n I|x0 which
performs a rotation of the state of the system towards the desired state |x0 .
Algorithm[Grover].
1.
2.
3.
4.
3.2

Initialize the state of the system to |ψ0 = |0 ⊗n .
Apply the Walsh-Hadamard
operator, |ψ1 = H⊗n |ψ0 .
√
For i = 1 to k ≈ π4 N do |ψi+1 = Q |ψi .
Measure |ψk+1 with respect to the basis {|0 , |1 , . . . , |N − 1 }.
Simulations for a Quantum Database

In this case it is assumed that the oracle is given by the operator I|x0 . The
index x0 is randomly picked up from {0, . . . , 2n − 1} and no database is in fact
generated. When the goal is to test the behaviour and correctness of Grover’s
algorithm this layout seems adequate.
Simulation Results. Grover’s algorithm was simulated over instances of size
n ∈ {2, . . . , 32} qubits (searching on a database with k = 2n elements). We were
able to simulate Grover’s algorithm for n = 30, using a common PC, in about
5 minutes. As expected, the running times display an exponential growth when
taken as a function of the number of qubits, whereas when taken as a function
of the database size they follow the square-root curve, as depicted in ﬁg. 8.
3.3

Simulations for a Classical Database

In this case a classical database is ﬁrst generated and the oracle operator deﬁned
by Oracle · |x = (−1)f (x) |x where f (x) is the classical oracle call function (2).
When applying Grover’s operator, we had to fully expand some intermediary
states since no useful tensor product decomposition of the oracle operator was
found.

A Symbolic Approach to Quantum Computation Simulation

461

Seconds
140
120
100
80

Seconds

Seconds

140

0.35
0.3

120

0.25

100

0.2
0.15

80

60

5

0.05

6

7

8

9

10

11

n

60

40

40

20

20

6

8

10

12

14

16

n

N
10000

20000

30000

40000

50000

60000

Fig. 9. Simulation times for the classical database case

Simulation Results. Grover’s algorithm was simulated over instances of size
n ∈ {4, 5, . . . , 16} qubits. Figure 9 displays the simulation running times as a
function of the number of qubits, as well as a function of the database size. Both
graphics follow an exponential curve, explained by the inherent ineﬃciency of
the oracle calls in the algorithm.

4

Conclusions

Mathematica can provide a powerful environment for the implementation of a
quantum computer simulator, as long as we are able to keep, as much as possible,
the implementation at the symbolic level.
A new symbolic approach for the simulation of quantum computations has
been proposed. SQCS is an ongoing project still lacking many features. Measuring
operators, an improved quantum register address manager and simulations of
more quantum algorithms are currently being developed.

References
1. Nielsen, M.A., Chuang, I.L.: Quantum Computation and Quantum Information.
Cambrige University Press (2000)
2. Kitaev, A.Y., Shen, A., Vyalyi, M.: Classical and quantum computation. Volume 47
of Graduate Studies in Mathematics. American Mathematical Society (2002)
3. Wolfram, S.: TheMathematica Book, Fifth Edition. Wolfram Media, Inc. (2003)
4. Grover, L.K.: A fast quantum mechanical algorithm for database search. In: Proc.
28th Annual ACM Symposium on the Theory of Computing. (1996) 212–219
5. Biham, E., Biham, O., Biron, D., Grassl, M., Lidar, D.A.: Grover’s quantum search
algorithm for an arbitrary initial amplitude distribution. Physical Review A 60
(1999) 27–42

