A Distributed Real-Time Tele-operation System
Based on the TMO Modeling*
Hanku Lee1 and Segil Jeon2, ∗∗
1

School of Internet and Multimedia Engineering, Konkuk University, Seoul, Korea
hlee@konkuk.ac.kr
2 BioMolecular Informatics Center, Konkuk University, Seoul, Korea
Tel.: +82-11-9154-3793
sgjeon@ricl.konkuk.ac.kr

Abstract. The fast development of grid computing environments makes it possible to access geographically distributed remote instruments, experimental
equipments, databases, human resources with respect to real-time in grid computing environments. With conventional programming method, it is very difficult to implement real-time models in uncontrolled distributed environments
and to support well-defined interfaces from real-time systems to external systems. We propose an easy-to-use TMO-based tele-operation model with less
strict real-time constraints in grid environments. Using the proposed model, we
design and develop a TMO-based tele-operation system for real industrial applications used for tsunami-detecting instruments.

1 Introduction
Today we access geographically distributed remote instruments, experimental
equipments, databases, human resources, high-performance computers, etc, as if
accessing local resources from a long distance away. But it brings us another side:
How are these instruments, devices and data well-synchronized in distributed
real-time systems? With conventional programming methods it is very difficult to
design and implement well-defined real-time models in uncontrolled distributed
environments.
We propose a TMO-based distributed real-time tele-operation model with less
strict real-time constraints in grid environments. The proposed model can be used to
control tsunami-detecting instruments. For example, a remote meteorologist can control and monitor tsunami-detecting instruments and conference with local meteorologists from a long distance away using the proposed model in grid computing environments.
In the next section, we discuss related works such as TMO, Distributed Objectoriented Freeway Simulator (DOFS), Real-time CORBA. Then, we propose a TMObased tele-operation model and mention design and implementation issues in section
3. Section 4 concludes.
* This paper was supported by Konkuk University in 2006.
Corresponding author.

∗∗

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 272 – 279, 2006.
© Springer-Verlag Berlin Heidelberg 2006

A Distributed Real-Time Tele-operation System Based on the TMO Modeling

273

2 Related Works
The Time-Triggered Message-Triggered Object (TMO) was established in early
1990’s with a concrete syntactic structure and execution semantics for economical
reliable design and implementation of RT systems [1, 2, 4, 5]. TMO is a high-level
real-time computing object. It is built in standard C++ and APIs called TMO Support
Library (TMOSL).
TMO contains two types of methods, time-triggered methods (SpM), which are
clearly separated from the conventional service methods (SvM). The SpM executions
are triggered upon reaching of the RT clock at specific values determined at the design time whereas the SvM executions are triggered by service request messages from
clients. Moreover, actions to be taken at real times which can be determined at the
design time can appear only in SpM’s. Real-time Multicast and Memory Replication
Channel (RMMC) is an alternative to the remote method invocation for facilitating
interactions among TMOs. Use of RMMCs tends to lead to better efficiency than the
use of traditional remote method invocations does in the area of distributed multimedia applications that involve frequent delivery of the same data to more than two
participants distributed among multiple nodes.
Distributed Object-oriented Freeway Simulator (DOFS) [3] is a freeway automobile traffic simulator conducting with the goal of validating the potential of the TMO
structuring scheme supported by the recently implemented TMOSM. DOFS is intended to support serious studies of advanced freeway management systems by providing high-resolution high-accuracy easily expandable freeway simulation. The system can help the Driver avoiding the traffic road and supply real-time traffic information. The TMO scheme brings major improvement in the RT system design and implementation efficiency.
The Real-time CORBA (RT-CORBA) [6] is an optional set of extensions to
CORBA to be used as a component of a real-time system. It is designed for applications with hard real-time requirements, such as avionics mission computing, as
well as those stringent soft real-time requirements, such as telecommunication call
processing. Moreover, to allow applications to control the underlying communication protocols and end-system resources, the Real-time CORBA specification
defines standard interfaces that can be used to select and configure certain protocol
properties.

3 The Proposed TMO-Based Tele-operation Model
3.1 Architecture
Due to the fast development of the Internet and grid computing environments, it is
possible for engineers and researchers to access remote instruments and computing
resources from a long distance away. However, we need to support real-time controls
and the timing characteristics on these geographically distributed, grid-enabled, and
real-time applications without pain during the development.

274

H. Lee and S. Jeon
RMMC
Channel

RMMC
Channel
Socket
Channel

User Interface

Local Area Network (LAN)

Wide
Area
Network

WebCam_TMO
Control_SpM
Event_SpM
Monitoring_SpM

Sensor_TMO
Control_SpM
Event_SpM
Monitoring_SpM

Message
Time_TMO

Handling

Supply Time To RMMC
Pseudo TMO Thread

Server
WebCam_TMO
Control_SpM
Event_SpM
Monitoring_SpM

Sensor_TMO

User
Interface
Domain

Control_SpM
Event_SpM
Monitoring_SpM

MHS Domain

Remote Domain

Fig. 1. The Architecture of TMO-Based Tele-Operation Model

Figure 1 depicts the architecture of the proposed TMO-based tele-operation model.
One of the main issues for the proposed model is to apply the easy-to-use TMO to
real-time applications that are usually hard to design and implement with conventional programming methods. The proposed model is divided to 3 domains: remote
domain, message-handling-service domain, user interface domain.
The remote domain (RD) is to collect remote data and to monitor remote instruments. RD consists of the Time TMO and working TMOs. The Time TMO gives the
timing characteristics to other working TMOs (e.g. WebCam_TMO and Sensor_TMO) via the Real-time Multicast and Memory Replication Channel (RMMC).
The video, audio, and sensor data with the timing characteristics are transferred via
the socket channel to the message-handling-service domain The time characteristics
supplied by the Time TMO are more suitable to the proposed model than those supplied by the Internet or GPS time services since the Time TMO is closely located to
other working TMOs and this locality avoids the network latency that makes it hard to
synchronize real-time applications.
The message-handling-service domain (MHSD) is to manage message-handling
servers in order to help data communication between UID and RD. MHSD provides
the grid-enabled environments based on the TCP/IP-based client/server model and
grid applications to handle control-messages between UID and RD to be safely and
precisely transferred. MHSD should keep waking up, be started prior to other domains, and wait for control-messages. Servers in MHSD can storage a large amount
of data from the remote domain and can provide the secure management of data from
the remote domain to the interfaces.
Finally, the user interface domain (UID) is to provide user interfaces to check the
status of the whole system, to manage incoming and outgoing control-messages between the client and remote instruments, and to handle real-time information needed
for the tele-operation application for the client. This domain is implemented in MFC.

A Distributed Real-Time Tele-operation System Based on the TMO Modeling

275

3.2 Implementation
In this section we mention several implementation issues for the remote domain in
detail. Figure 2 represents the basic structure of the remote domain, called TMObased real-time agent framework for the proposed TMO-based tele-operation system.
The real-time agent framework is implemented using TMO toolkit [1]. It consists of
the Time TMO and working TMOs (e.g. WebCam_TMO and Sensor_TMO). Moreover, it is basically divided into three services: control-message waiting and processing service, time service, and real-time data processing service.

RMMC Channel
Update
Time

Socket Channel

Read
Time

Read
Time
Send
Data

Check
Message

Time TMO

SpM

Pseudo
TMO
Thread

Sensor TMO

Webcam TMO

Change
value

Send
Data

SpM

Give the timing
characteristics
to the main threads
for initialing working TMOs

SpM
SpM Check Flag
And Change period
Base of the Flag value

Main Thread

Flag
1/0

Main Thread

Main Thread

Fig. 2. The Remote Domain: TMO-Based Real-Time Agent framework

The control-message waiting and processing service waits for and processes control-messages from UID according to message types using the Pseudo-TMO-Thread.
The Pseudo-TMO-Thread is located in the Time TMO and gives the timing characteristics to the main threads for initialing all working TMOs in the remote domain. But
The Pseudo-TMO-Thread keeps waking up unlike SpM of TMO periodically wakes
up. Major initialization steps for the agent framework are as follows:
1. The Pseudo-TMO-Thread is invoked and checks up the header information of
control-messages from MHSD.
2. Each message is classified such as WebCamMessage, and is sent to its designated TMO.
3. Each TMO extracts the timing characteristics from its control-message, initializes its time, and builds up the socket channel among other TMOs.

276

H. Lee and S. Jeon

4. The TMO middleware is activated.
5. The TMO-based real-time agent framework is activated.
The Pseudo-TMO-Thread keeps waking up and getting control-messages from
UID. If a control-message is a normal command to control remote instruments, then
the Pseudo-TMO-Thread does normal real-time data processing in this service. But if
a control-message is a command to scale up or down the whole system in the time
dimension, then the Pseudo-TMO-Thread extracts data out of the message, stops the
designated SpM for a while, changes the period of the designated SpM, and restarts
the designated SpM. When a working TMO needs to process video data, sometimes,
the data processing time exceeds the period of SpM for the TMO. It happens because
of the network latency or the size of the video data. In this case, the period of SpM
should be extended more than the data processing time.
For example, when the network becomes delayed, the data transfer from web cameras becomes delayed as well. To avoid the latency of the whole system because of
the latency of the video transfer, the Pseudo-TMO-Thread gets a control-message
from UID to change the period of SpM for web cameras from 1 second to 3 seconds.
After the network becomes normal, the Pseudo-TMO-Thread gets another controlmessage from UID to change the period back. This functionality makes the TMObased real-time agent framework flexible for real-time monitoring.
The time service is served by the Time TMO that is closely located to other working TMOs. The time service synchronizes the timing characteristics of each SpM in
working TMOs. The real-time data processing service manages data processing according to the timing characteristics of each SpM and attaches the timing characteristics on video and sensor data. The time service and the real-time data processing service use RMMC that is a real-time communication channel among working TMOs to
broadcast common information such as the timing characteristics and memory for
working TMOs. RMMC is a good alternative to the Internet or GPS time services
since it avoids the network latency that makes it hard to synchronize real-time applications. SpM of the Time TMO periodically (e.g. 200 micro-seconds) updates the
timing characteristics of RMMC using its own timing characteristics. Then each SpM
reads the timing characteristics of RMMC, attaches it on video, audio, and sensor
data, and transfer data to MHSD.
Figure 3, 4, and 5 represents a distributed, real-time tele-operation system to detect tsunami based on our proposed model. The TMO-based tele-operation system is
a real-time, tele-operation, and tele-monitoring system. Using the tsunami detecting
system, a meteorologist can monitor the ocean, control the instruments, and conference with local engineers from a long distance away. In detail, first, a remote meteorologist monitors the current status of a designated point of the ocean on his/her
computer from a long distance away. Second, the video, audio, and sensor data
from the point are collected and synchronized by the TMO-based real-time agent
framework and transferred via MHSD to the remote engineer. Third, the data are
updated and displayed on his/her computer. Finally, the remote meteorologist
can control remote instruments by controllers on his/her computer, send control-

A Distributed Real-Time Tele-operation System Based on the TMO Modeling

277

messages such as scaling up or down the whole system in the time dimension, and in
advance warn local meteorologists to prepare the natural disaster. Using the system,
moreover, the remote meteorologist can chat and talk with local meteorologists.

Recent Data

Sensor GPS

Historical Data

Place pointer on sensor at left to display corresponding plot below
or click on sensor at left to view sensor page
105

104

Water Column Height at 100
4192.0

103

4191.5

`

4191.0
102
4190.5

101

4190.0
100

4189.5

Tsunami is detected

4189.0
01/06

01/07

01/08

01/09

01/10

Tsunami Sensor

Fig. 3. Historical Data of Tsunami Detecting Tele-Operation System

Recent Data

Sensor GPS

Historical Data

Current Time :
2005.11.01 12:30 PM

Time
105

00 AM

104

24 PM
Water Column Height at 100

103

4192.0
4191.5
`

4191.0
102
101

4190.5
4190.0

100
Tsunami is detected

4189.5
4189.0
01/06

01/07

01/08

01/09

01/10

Tsunami Sensor

Fig. 4. Historical Data of Tsunami Detecting Tele-Operation System

278

H. Lee and S. Jeon

Recent Data

Sensor GPS

Historical Data

105
Sensor GPS Coordinates
104
103

102
101
100
Tsunami is detected

Sensor ID

Latitude

Longitude

100

120.03 W

101

35.01 N
`
35.33 N

102

36.05 N

121.55 W

103

36.99 N

120.80 W

104

37.51 N

121.48 W

105

37.87 N

121.48 W

120.66 W

Tsunami Sensor

Fig. 5. Sensor GPS Data of Tsunami Detecting Tele-Operation System

3.3 Advantages and Restrictions of the Proposed Model
We experienced several advantages of adapting TMO on the proposed model during
implementing a TMO-based tele-operation system.
Developers can highly predict the timing performance using TMO during designing and developing the proposed TMO-based model. Execution of time consuming
unpredictable I/O operations such as video outputs, keyboard inputs, etc, can be handled by the Pseudo-TMO-Thread. Each TMO thread designated to instruments are not
burdened with these suffering tasks.
Moreover, it is easy to implement and debug TMO nodes. Implementing and debugging of real-time controls and the timing characteristics cause pain during the
development of distributed real-time applications with conventional real-time methods. But all we need to do is to use communication APIs, thread initializing, managing, and terminating APIs, supported by the TMO tool kit.
It is easy to modify and expand the proposed TMO-based model. We often need to
scale up or down the whole system in the time dimension. Many modifications could
be needed with conventional real-time methods. But all we need to do is to change the
scale of the real-time clock of TMO for the proposed TMO-based model.
We experienced some restrictions that TMO-based real-time applications are not
suitable to real-time systems handling huge amount of data in a relatively short SpM
wakeup period. For example, wind channel experiments in aerospace researches generally need video capturing instruments taking approximately 1,000 photos per second
and the size of each photo is approximately 1M bytes. In this case, we can easily scale
down the period of SpM (e.g. 10 micro-seconds). But it is impossible to process this
amount of video data in time with contemporary hardware and network environments.

A Distributed Real-Time Tele-operation System Based on the TMO Modeling

279

Thus, we urge TMO-based real-time applications are suitable to systems with less
strict real-time constraints such as tsunami-detecting instruments, etc, since those
instruments product relatively small amount of data in the period of SpM and are not
a time-critical decision model.

4 Conclusion
We proposed an easy-to-use TMO-based tele-operation model with less strict realtime constraints in grid environments. Using the proposed model, we designed and
developed a TMO-based tele-operation system for real industrial applications able to
be used to control and monitor tsunami-detecting instruments.
The TMO-based tele-operation model, proposed in this paper, is promising since it
provides a sound TMO-based real-time agent framework, cost-effectively resolving
the problems caused by conventional programming methods during the development.
However, the experimental research and development with the proposed model is at
an early stage. Moreover, much more research efforts are needed to develop more
stable TMO-based real-time agent framework.
We will adapt the proposed model to develop a tsunami detecting system in the
future research.

References
1. TMOSL_v4.0_manual_draft http://dream.eng.uci.edu/TMOdownload/
2. Kim,K.H, “APIs for Real-Time Distributed Object Programming”, IEEE Computer,June
2000,pp.72-80
3. K.H.(Kane) Kim, Juqiang Liu, Masaki Ishida and Inho Kim.: “Distributed Object-Oriented
Real-Time Simulation of Ground Transportation Networks with the TMO Structuring
Scheme” , Proc. COMPSAC '99 (IEEE CS Computer Software & Applications Conf.),
Phoenix, AZ, Oct. 1999, pp.130-138.
4. Kim, K.H., "Real-Time Object-Oriented Distributed Software Engineering and the TMO
Scheme", Int'l Jour. of Software Engineering & Knowledge Engineering, Vol. No.2, April
1999, pp.251-276.
5. Kim, K.H., "Object Structures for Real-Time Systems and Simulators", IEEE Computer,
August 1997, pp.62-70.
6. Douglas Schmidt, Fred Kuhns, "An overview of the Real-time CORBA Specification",
IEEE Computer special issue on Object-Oriented Real-time Distributed Computing, June
2000, pp.56-63.
7. Real-Time for Java Experts Group, “Real-time Specification for Java, Version 0.9.2,” 29
Mar. 2000, http://www.rtj.org/public.

