Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
377–385

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

MEGSOR iterative method for the triangle element solution of 2D
Poisson equations
Jumat Sulaimana,∗, Mohammad Khatim Hasanb , Mohamed Othmanc , Samsul Ariﬃn Abdul Karimd
a School of Science and Technology,
University Malaysia Sabah, 88999 Kota Kinabalu, Sabah, Malaysia
b Department of Industrial Computing,
University Kebangsaan Malaysia, 43600 UKM Bangi, Selangor, Malaysia
c Department of Communication Technology and Network,
University Putra Malaysia, 43400 UPM Serdang, Selangor D.E., Malaysia
d Department of Fundamental and Applied science,
Universiti Teknologi Petronas, bandar Seri Iskandar, 31750 Tronoh, Perak, Malaysia

Abstract
In previous studies of ﬁnite diﬀerence approaches, the 4 Point-Modiﬁed Explicit Group (MEG) iterative method
with or without a weighted parameter, ω, has been pointed out to be much faster as compared to the existing four point
block iterative methods. The main characteristic of the MEG iterative method is to reduce computational complexity
compared to the full-sweep or half-sweep methods. Due to the eﬀectiveness of this method, the primary goal of
this paper is to demonstrate the use of the 4 Point- Modiﬁed Explicit Group (MEG) iterative method together with
a weighted parameter, namely 4 Point-MEGSOR. The eﬀectiveness of this method has been shown via results of
numerical experiments, which are recorded and analyzed, show that that the 4 Point-MEGSOR iterative scheme is
superior as compared with the existing four point block schemes.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Modiﬁed Explicit Group, Point Block Iteration, Galerkin Scheme, Triangle Element.

1. Introduction
In solving science and engineering problems that involve partial diﬀerential equations, some researchers have
recommended to use the two common numerical methods such as mesh-free [5, 27, 23] and mesh-based methods in
order to obtain numerical solutions. For mesh-based methods, there exist several available schemes such as ﬁnite element, ﬁnite diﬀerence, boundary element, and ﬁnite volume being widely used to construct approximation equations
of science and engineering problems: linear, nonlinear, homogeneous and inhomogeneous. This paper, however, is
primarily concerned with the triangle element solutions based on the Galerkin scheme for solving 2D Poisson equations. Apart from the Galerkin scheme, actually, other weighted residual schemes such as the subdomain, collocation,
∗ Corresponding

author: :+6088 320 305/313
Email addresses: jumat@ums.edu.my (Jumat Sulaiman), khatim@ftsm.ukm.my (Mohammad Khatim Hasan),
mothman@fsktm.upm.edu.my (Mohamed Othman), samsul_ariffin@petronas.com.my (Samsul Ariﬃn Abdul Karim)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.041

378

J. J.Sulaiman
ComputerScience
Science
(2012)1–9
377–385
Sulaimanetetal.
al.//Procedia
Procedia Computer
001(2010)

2

least-square, and moments [8, 9] can be also considered to construct triangle element approximation equations. In
this paper, by using the ﬁrst order triangle ﬁnite element approximation equation, the eﬀectiveness of the 4 PointMEGSOR method will be investigated for solving the 2D Poisson equation. This 4 Point-MEG method will be
compared to the existing 4 Point Explicit Group (EG) [24, 7] and Explicit Decoupled Group (EDG) [1, 24, 3] iterative
methods.
To demonstrate the eﬃciency of the 4 Point-MEG method with or without the weighted parameter, ω, let us
consider the 2D Poisson equation deﬁned as
∂2 U
∂x

2

+

∂2 U
∂y2

= f (x, y),

(x, y) ∈ D = [a, b] × [a, b]

(1)

with the Dirichlet boundary conditions
U(x, a) = g1 (x),
U(x, b) = g2 (x),
U(a, y) = g3 (y),
U(b, y) = g4 (y),

a ≤ x ≤ b,
a ≤ x ≤ b,
a ≤ y ≤ b,
a ≤ y ≤ b.

The solution domain for problem (1) needs to be divided uniformly in both x and y directions with a mesh size, h
which is deﬁned as
b−a
,
m = n + 1.
(2)
h=
m
The full-, half-, and quarter-sweep networks of triangle ﬁnite elements need to be built as a guideline to derive triangle
ﬁnite element approximation equations. Then these approximation equations will be used to form systems of ﬁnite
element approximation equations for problem (1). Similarly using the same concept of the half-, and quarter sweep
iterations applied to ﬁnite diﬀerence methods [1, 17, 18, 12], ﬁnite element networks will consist of several triangle
elements in which each triangle element will involve three solid node points only of type • as shown in Figure 1. As
a result, the implementation of the full-, half-, and quarter-sweep iterative algorithms will be performed onto the node
points of the same type until the iterative convergence criterion will be satisﬁed. Then other approximate solutions at
remaining node points (points of the diﬀerent type) will be calculated directly [1, 3, 10, 17, 18, 24].

Figure 1: a)., b).and c). show the distribution of uniform node points for the full-, half-, and quarter-sweep cases respectively at m = 8.

2. Quarter-sweep triangle element approximation
As explained the ﬁrst section, we examine and demonstrate the eﬀectiveness of the 4 Point-MEGSOR method by
using the quarter-sweep triangle element approximation equation based on the Galerkin scheme in solving 2D Poisson
equations. By considering a group of three solid node points of type • only, the general approximation of the function,
in the form of interpolation function for an arbitrary triangle element, e can be stated as [8, 11, 25]
U [e] (x, y) = N1 (x, y)U1 + N2 (x, y)U2 + N3 (x, y)U3

(3)

379
3

J. Sulaiman
et al.et/ Procedia
Computer
Science
1 00
(2012)
377–385
J. Sulaiman
al. / Procedia
Computer
Science
(2010)
1–9

And then the shape functions, Nk (x, y), k = 1, 2, 3 can generally be given as
Nk (x, y) =

1
(ak + bk x + ck y), k = 1, 2, 3
|A|

(4)

where,
|A| = x1 (y2 − y3 ) + x2 (y3 − y1 ) + x3 (y1 − y2 ),
⎡
⎤ ⎡
⎤ ⎡
⎤ ⎡
⎤ ⎡
⎤ ⎡
⎢⎢⎢ a1 ⎥⎥⎥ ⎢⎢⎢ x2 y3 − x3 y2 ⎥⎥⎥ ⎢⎢⎢ b1 ⎥⎥⎥ ⎢⎢⎢ y2 − y3 ⎥⎥⎥ ⎢⎢⎢ c1 ⎥⎥⎥ ⎢⎢⎢ x3 − x2
⎢⎢⎢
⎥⎥⎥ ⎢⎢⎢
⎥⎥⎥ ⎢⎢⎢
⎥⎥⎥ ⎢⎢⎢
⎥⎥⎥ ⎢⎢⎢
⎥ ⎢
⎢⎢⎣ a2 ⎥⎥⎦ = ⎢⎣⎢ x3 y1 − x1 y3 ⎥⎥⎦ , ⎢⎢⎣ b2 ⎥⎥⎦ = ⎢⎢⎣ y3 − y1 ⎥⎥⎦ , ⎢⎢⎣ c2 ⎥⎥⎥⎥⎦ = ⎢⎢⎢⎢⎣ x1 − x3
a3
x1 y2 − x2 y1
b3
y1 − y2
c3
x2 − x1

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎦ .

Moreover, then the ﬁrst order partial derivatives of the shape functions towards x and y can be shown respectively as
⎫
bk ⎪
∂
⎪
(Nk (x, y)) = |A|
⎬
∂x
k = 1, 2, 3
(5)
ck ⎪
∂
⎭
(Nk (x, y)) = |A| ⎪
∂y

Figure 2: Computational molecules of the Galerkin triangle ﬁnite element scheme in case of a). the full-sweep, b). the half-sweep, and c). the
quarter-sweep cases

By using the deﬁnition of the hat function, Rr,s (x, y) [22], the approximation of the function, U(x, y) in case of the
full-, half- and quarter-sweep cases for the entire domain in Eq. (1) will be simpliﬁed respectively as
m

m

Rr,s (x, y)Ur,s ,

U(x, y) =

(6)

r=0 s=0
m

m

m−1

m−1

Rr,s (x, y)Ur,s +

U(x, y) =
r=0,2,4 s=0,2,4

and

Rr,s (x, y)Ur,s ,

(7)

r=1,2,5 s=1,3,5
m

m

Rr,s (x, y)Ur,s

U(x, y) =

(8)

r=0,2,4 s=0,2,4

Similarly, the deﬁnition of the approximate function, f (x, y) for the all cases can be easily deﬁned via the hat function.
In fact, Eqs. (6), (7) and (8) ca be referred as approximate solutions for problem (1).
To construct the full-, half-, and quarter-sweep linear ﬁnite element approximation equations for problem (1), the
development of approximation equations for this paper will be limited by taking account of the Galerkin ﬁnite element
scheme. Now consider the Galerkin residual method [8, 9, 11] be given as

D

Ri, j (x, y)E(x, y) dxdy = 0, i, j = 0, 1, 2, ..., m

(9)

380

J. J.Sulaiman
ComputerScience
Science
(2012)1–9
377–385
Sulaimanetetal.
al.//Procedia
Procedia Computer
001(2010)
2

where, E(x, y) = ∂∂xU2 +
in the following form

∂2 U
∂y2

4

− f (x, y) is a residual function. By imposing the Green theorem, Eq. (10) can be derived
∂U
−Ri, j (x, y) ∂U
∂y dx + Ri, j (x, y) ∂x dy
b
b ∂R (x, y)
∂U ∂Ri, j (x, y) ∂U
i, j
−
+
∂x
∂x
∂y
∂y
a
a
λ

where,

b

Fi, j =

dxdy = Fi, j

(10)

b

a

a

Ri, j (x, y) f (x, y) dxdy.

By substituting Eq. (5) and imposing the boundary conditions into problem (1), Eq. (11) will generate a linear system
for all cases. For simplicity, the linear system can generally be presented as
Ki,∗ j,r,s Ur,s =

−
where,

b

Ki,∗ j,r,s =

a

b
a

∂Ri, j ∂Rr,s
dxdy +
∂x ∂x

Ci,∗ j,r,s =

b
a

Ci,∗ j,r,s fr,s
b
a

b
a

(11)

∂Ri, j ∂Rr,s
dxdy,
∂y ∂y

b
a

Ri, j (x, y)Rr,s (x, y) dxdy.

Actually the linear system in Eq. (12) for the full-, half- and quarter-sweep cases can be easily expressed in the
stencil form respectively as follows:
1. Full-sweep stencil [25, 21, 9]

2. Half-sweep stencil

⎡
⎢⎢⎢ 0
⎢⎢⎢
⎢⎢⎣ 0
0

⎡
⎢⎢⎢ 1
⎢⎢⎢
⎢⎢⎣ 0
1

⎡
⎡
⎤
⎢ 0 1
⎢⎢⎢ 0 1
0 ⎥⎥⎥
h2 ⎢⎢⎢⎢
⎢⎢⎢
⎥⎥⎥
⎢⎢ 1 6
⎢⎢⎣ 1 −4 1 ⎥⎥⎦ Ui, j =
12 ⎢⎣ 1 1
0 1
0

0
−4
0

1 0
0 −4
1 0

⎡
⎢⎢⎢ 0
⎢⎢⎢
⎢⎢⎣ 0
0

1
0
1

3. Quarter-sweep stencil [25, 21, 9]
⎡
⎢⎢⎢
⎢⎢⎢
⎢⎢⎢
⎢⎢⎢ 1 0
⎢⎢⎢
⎢⎢⎣

1
1
0

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎦ fi, j ,

⎡
⎤
⎤
⎢ 1 0 1 0 ⎥⎥⎥
1 0 ⎥⎥⎥
h2 ⎢⎢⎢⎢
⎥⎥⎥
⎢⎢⎢ 0 5 0 1 ⎥⎥⎥⎥⎥ fi, j , i = 1,
0 0 ⎥⎥ Ui, j =
⎣
⎦
⎦
6
1 0 1 0
1 0
⎡
⎤
⎤
⎢ 0 1 0 1 0 ⎥⎥⎥
1 0 ⎥⎥⎥
h2 ⎢⎢⎢⎢
⎥⎥⎥
⎢⎢⎢ 1 0 6 0 1 ⎥⎥⎥⎥⎥ fi, j , i 1, n,
0 0 ⎥⎥ Ui, j =
⎣
⎦
⎦
6
0 1 0 1 0
1 0
⎡
⎤
⎤
⎢ 0 1 0 1 ⎥⎥⎥
0
1 ⎥⎥⎥
h2 ⎢⎢⎢⎢
⎥⎥⎥
⎢⎢⎢ 1 0 5 0 ⎥⎥⎥⎥⎥ fi, j , i = n.
−4 0 ⎥⎥ Ui, j =
⎣
⎦
⎦
6
0 1 0 1
0
1
1
0
−4
0
1

0

⎡
⎤
⎢⎢⎢
⎥⎥⎥
⎢⎢
⎥⎥⎥
2
⎥⎥⎥
h ⎢⎢⎢⎢⎢
⎥
1 ⎥⎥ Ui, j =
⎢ 1 0
⎥⎥⎥
12 ⎢⎢⎢⎢⎢
⎥⎥⎦
⎢⎣
1

⎤
1
1 ⎥⎥
⎥⎥⎥
0
⎥⎥⎥
6 0 1 ⎥⎥⎥⎥ fi, j ,
⎥⎥⎥⎥
0
⎥⎦
1

(12)

(13)

(14)

(15)

(16)

To facilitate us for the implementation of block iterative methods, illustration of the stencil forms in Eq. (12)
till(16) can be visualized via the full-, half-, and quarter-sweep computational molecules as shown in Figure . Indeed,
three computational molecules comprise seven solid node points in formulating their approximation equations. Since
two of its coeﬃcients are zero, these computational molecules for full-, half-, and quarter-sweep triangle ﬁnite element
schemes are the same form as compared to the existing ﬁve point ﬁnite diﬀerence scheme [1, 3, 24]. Then by taking
account of these computational molecules, the further discussion in the next section for four point block iterative
methods will be straightforward to explain on how to construct their formulation.

J. Sulaiman
et al.et/ Procedia
Computer
Science
1 00
(2012)
377–385
J. Sulaiman
al. / Procedia
Computer
Science
(2010)
1–9

381
5

3. Formulation of Four Point Block Iterative Methods
According to previous ﬁndings on various block iterations, the 4 Point-MEG iterative method has been inspired by
Othman and Abdullah [14] via the quarter-sweep iterative scheme to solve problem (1) by using the second order ﬁnite
diﬀerence approximation equation. Furthermore, the basic concept of MEG iterative method has been widely used to
get ﬁnite diﬀerence solutions of various problems [15, 18]. In general, implementation of this method will be imposed
onto solid node points in Figure 1(c) till the convergence test criterion will be met. Afterward approximate values
of the remaining node points at the triangle ﬁnite element networks as shown in Figure 1(c) will be also calculated
directly by using the same steps in the ﬁnite diﬀerence method [1, 3, 10, 18, 24]. For comparison purpose, this paper
will also consider other two four point block iterative methods such as 4 point-EG and 4 point-EDG [1]. Again these
three four point block iterative methods basically will be formulated by using the corresponding triangle element
approximation equations in Eq. (12) till (16).
3.1. 4 Point-EG scheme
This scheme involves a complete group of four points accordingly for generating systems of linear equations,
(4x4). By considering Eq. (12), this scheme can be expressed in the following system of linear equations [24, 1]
⎡
−1 −1 0
⎢⎢⎢ 4
⎢⎢⎢ −1 4
0
−1
⎢⎢⎢
⎢⎢⎢ −1 0
4
−1
⎣
0
−1 −1 4

where,

⎤⎡
⎥⎥⎥ ⎢⎢⎢ Ui, j
⎥⎥⎥⎥ ⎢⎢⎢⎢ Ui+1, j
⎥⎥⎥ ⎢⎢⎢
⎥⎦⎥ ⎢⎣⎢ Ui, j+1
Ui+1, j+1

⎤ ⎡
⎥⎥⎥ ⎢⎢⎢ S 1
⎥⎥⎥ ⎢⎢⎢ S
⎥⎥⎥ = ⎢⎢⎢ 2
⎥⎥⎦⎥ ⎢⎢⎣⎢ S 3
S4

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎦

(17)

S 1 = Ui, j−1 + Ui−1, j − Fi, j , S 2 = Ui+1, j−1 + Ui+2, j − Fi+1, j ,

and

S 3 = Ui−1, j+1 + Ui, j+2 − Fi, j+1 , S 4 = Ui+1, j+2 + Ui+2, j+1 − Fi+1, j+1 .
Fi , j =

h2
( fi−1, j + fi+1, j + fi, j−1 + fi, j+1 + fi−1, j−1 + fi+1, j+1 + 6 fi, j ),
12

for i, j = 1, 2, 3, ..., n.
Determining the inverse matrix of the coeﬃcient system (17), the 4 Point-EG iterative schemes can generally be
shown as
⎡
⎤(k+1) ⎡
⎤
⎢⎢⎢ Ui, j
⎥⎥⎥
⎢⎢⎢ 0.25S 1 + S a ⎥⎥⎥
⎢⎢⎢ U
⎥⎥⎥
⎢⎢⎢ 0.25S + S ⎥⎥⎥
2
b ⎥
⎢⎢⎢⎢ i+1, j ⎥⎥⎥⎥
⎥,
= ⎢⎢⎢⎢
(18)
⎢⎢⎣ Ui, j+1 ⎥⎥⎦
⎢⎢⎣ 0.25S 3 + S b ⎥⎥⎥⎥⎦
U+1i, j+1
0.25S 4 + S a
where,

a1 = S 1 + S 4 ,

S a = (a1 + 2a2 )/24,

a2 = S 2 + S 2 ,

S b = (2a1 + a2 )/24.

3.2. 4 Point-EDG scheme
According to Abdullah[1], the 4 Point-EDG method has been proven faster than 4 Point-EG method in solving
two-dimensional Poisson equation via second-order rotated ﬁnite diﬀerence approximation equation. Similarly the
same steps in ﬁnite diﬀerence approach, let a four solid point group be considered to form a (4x4) linear system

where,

⎡
−1 0
0
⎢⎢⎢ 4
⎢⎢⎢ −1 4
0
0
⎢⎢⎢
⎢⎢⎢ 0
0
4
−1
⎣
0
0
−1 4

⎤⎡
⎥⎥⎥ ⎢⎢⎢ Ui, j
⎥⎥⎥⎥ ⎢⎢⎢⎢ Ui+1, j+1
⎥⎥⎥ ⎢⎢⎢
⎥⎥⎦ ⎢⎢⎣ Ui+1, j
Ui, j+1

⎤ ⎡
⎥⎥⎥ ⎢⎢⎢ S 1
⎥⎥⎥ ⎢⎢⎢ S
⎥⎥⎥ = ⎢⎢⎢ 2
⎥⎥⎥ ⎢⎢⎢ S 3
⎦ ⎣
S4

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎦

S 1 = Ui−1, j−1 + Ui−1, j+1 + Ui+1, j−1 − Fi, j , S 2 = Ui, j+2 + Ui+2, j + Ui+2, j+2 − Fi+1, j+1 ,

(19)

382

and

J. J.Sulaiman
ComputerScience
Science
(2012)1–9
377–385
Sulaimanetetal.
al.//Procedia
Procedia Computer
001(2010)

6

S 3 = Ui, j−1 + Ui+2, j−1 + Ui+2, j+1 − Fi+1, j , S 4 = Ui−1, j + Ui−1, j+2 + Ui+1, j+2 − Fi, j+1 .
Fi , j =

h2
( fi−2, j + fi+2, j + fi−1, j−1 + fi−1, j+1 + fi+1, j−1 + fi+1, j+1 + 6 fi, j ),
6

for i, j 1, n.
The linear system in Eq.(19) can be decomposed independently into two (2x2) linear systems. Therefore, the 4
Point-EDG method can be easily reduced as
Ui, j
Ui+1, j+1
Ui+1, j
Ui, j+1

(k+1)

=
(k+1)

=

4 1
1 4
4
1

1
4

S1
S2
S3
S4

(20)

,

(21)

.

3.3. 4 Point-MEGSOR scheme
Let a four point group be considered to form a (4x4) linear system given as [14, 13]
⎤ ⎡
⎤
⎡
⎤⎡
−1 −1 0 ⎥⎥ ⎢⎢ Ui, j
⎥⎥⎥ ⎢⎢⎢ S 1 ⎥⎥⎥
⎢⎢⎢ 4
⎥⎥⎥ ⎢⎢⎢
⎥
⎢
⎢⎢⎢ −1 4
0
−1 ⎥⎥ ⎢⎢ Ui+2, j ⎥⎥⎥ ⎢⎢⎢ S 2 ⎥⎥⎥⎥
⎢⎢⎢
⎥=⎢
⎥
⎥⎢
⎢⎢⎢ −1 0
4
−1 ⎥⎥⎥⎥⎦ ⎢⎢⎢⎢⎣ Ui, j+2 ⎥⎥⎥⎥⎦ ⎢⎢⎢⎢⎣ S 3 ⎥⎥⎥⎥⎦
⎣
Ui+2, j+2
S4
0
−1 −1 4

(22)

where,

S 1 = Ui, j−2 + Ui−2, j − Fi, j , S 2 = Ui+2, j−2 + Ui+2, j − Fi+2, j ,

and

S 3 = Ui−2, j+2 + Ui, j+4 − Fi, j+2 , S 4 = Ui+2, j+4 + Ui+4, j+2 − Fi+2, j+2 .
Fi , j =

(2h)2
( fi−2, j + fi+2, j + fi, j−2 + fi, j+2 + fi−2, j−2 + fi+2, j+2 + 6 fi, j ),
12

for i, j = 1, 2, 3, ..., n.
Again this system in Eq. (22) can be rewritten by multiplying the inverse of the coeﬃcient matrix, A in order to
develop the 4 Point-MEG iterative scheme shown as
⎡
⎢⎢⎢ Ui, j
⎢⎢⎢ U
⎢⎢⎢ i+2, j
⎢⎢⎢ Ui, j+2
⎣
U+2i, j+2

where,

⎤(k+1) ⎡
⎥⎥⎥
⎢⎢⎢ 0.25S 1 + S a
⎢⎢⎢ 0.25S + S
⎥⎥⎥⎥
2
b
⎥⎥⎥
= ⎢⎢⎢⎢
⎥⎥⎦
⎢⎢⎣ 0.25S 3 + S b
0.25S 4 + S a

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥ ,
⎥⎥⎥
⎦

(23)

a1 = S 1 + S 4 , a2 = S 2 + S 2 ,
S a = (a1 + 2a2 )/24, S b = (2a1 + a2 )/24.
By adding the weighted parameter, ω into Eq.(23), the 4 Point-MEGSOR iterative scheme can be simpliﬁed as
⎡
⎢⎢⎢ Ui, j
⎢⎢⎢ U
⎢⎢⎢ i+2, j
⎢⎢⎢ Ui, j+2
⎣
U+2i, j+2

⎤(k+1)
⎡
⎥⎥⎥
⎢⎢⎢ Ui, j
⎥⎥⎥
⎢⎢⎢ U
⎥⎥⎥
= (1 − ω) ⎢⎢⎢⎢ i+2, j
⎥⎥⎥
⎢⎢⎣ Ui, j+2
⎦
U+2i, j+2

⎤(k+1)
⎡
⎥⎥⎥
⎢⎢⎢ 0.25S 1 + S a
⎥⎥⎥
⎢⎢⎢ 0.25S + S
2
b
⎥⎥⎥
+ ω ⎢⎢⎢⎢
⎥⎥⎥
0.25S
+
S
⎢
3
b
⎢
⎦
⎣
0.25S 4 + S a

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥ ,
⎥⎥⎥
⎦

(24)

where the value of ω is in the range [1, 2). If ω = 1.0, the scheme (23) becomes a special case of scheme (24).
Obviously, only solid node points have been taken account of constructing several complete group of four points.
For the case of remaining solid node points near the right and top boundaries, this matter is named as the four point
block iterative methods with ungroup points scheme [2]. Beside block iterative methods, the Gauss-Seidel (GS)
iterative method will used as a comparison control of numerical solutions.

383
7

J. Sulaiman
et al.et/ Procedia
Computer
Science
1 00
(2012)
377–385
J. Sulaiman
al. / Procedia
Computer
Science
(2010)
1–9

4. Numerical experiments
To validate the performance of the 4 Point-MEG scheme with or without weighted parameter, ω by using the
quarter-sweep triangle ﬁnite element approximation equation in Eq. (24) based on the Galerkin scheme, there are
three criteria such as number of iterations, execution time and maximum absolute error being used as measurement
parameters for comparison. Some numerical experiments were carried out in solving the following 2D Poisson equation [1]
∂2 U ∂2 U
+ 2 = x2 + y2 exp(xy), (x, y) ∈ D = [a, b] × [a, b]
(25)
∂x2
∂y
Then boundary conditions and the exact solution of the problem (25) are deﬁned by
U(x, y) = exp(xy),

(x, y) = [a, b] × [a, b]

(26)

All results of numerical experiments, obtained from implementation of the GS, 4 Point-EG, 4 Point-EDG and 4 PointMEGSOR methods, have been tabulated in Table 1. In the implementation mentioned above, the convergence test
criterion considered the tolerance error, = 10−10 .
Table 1: Comparison of number of iterations, execution time (in seconds) and maximum errors for the iterative methods with the optimal value of
ω.

Methods
GS
4-EG
4-EDG
4-MEG
4-MEGSOR
Methods
GS
4-EG
4-EDG
4-MEG
4-MEGSOR
Methods
GS
4-EG
4-EDG
4-MEG
4-MEGSOR

Number of iterations
Mesh size
64
128
7368
27164
3830
14160
2917
10797
1031
3830
97(ω=1.76)
192(ω=1.8712)
Execution time (seconds)
Mesh size
64
128
7.37
16.91
1.03
9.43
0.57
5.89
0.24
1.30
0.00
0.04
Maximum absolute errors
Mesh size
64
128
3.6970e-5
9.3750e-6
3.6953e-5
9.3048e-6
1.6312e-4
4.4746e-5
1.4769e-4
3.6953e-5
1.4769e-4
3.6935e-5

256
99433
52020
39729
14160
376(ω=376)

358
185735
97370
74425
26597
546(ω=1.9517)

256
209.34
128.22
77.86
13.65
0.25

358
761.62
503.34
333.03
53.17
1.43

256
2.8971e-6
2.5966e-6
1.1932e-5
9.3048e-6
9.2386e-6

358
2.4006e-6
1.7721e-6
6.2456e-6
4.8598e-6
4.7226e-6

5. Conclusion and Future Works
In the previous section, it can be seen that the full-, half-, and quarter-sweep triangle ﬁnite element approximation
equations based on the Galerkin scheme can be easily represented in the stencil forms, see in Eq. (12) till (16).

384

J. J.Sulaiman
ComputerScience
Science
(2012)1–9
377–385
Sulaimanetetal.
al.//Procedia
Procedia Computer
001(2010)

8

Through numerical results observed in Table 1, the ﬁndings show that number of iterations for two mesh sizes, 128
and 358 have declined approximately 64.35−64.52% and 95.22−99.05% correspond to the 4 Point-MEG and 4 PointMEGSOR methods compared to the GS method. Indeed, the execution time of these mesh sizes for both 4 Point-MEG
and 4 Point-MEGSOR methods have demonstrated faster by 82.47 − 98.33% and 99.95 − 99.68% respectively than
the GS method. It can be concluded that the 4 Point-MEGSOR method is far better than among existing four point
block iterative methods. This is due to the computational complexity of the quarter-sweep scheme is nearly 25% of
the full-sweep case. Beside that, approximate solutions for all four point block iterative methods are also in good
agreement compared to the GS method. Overall it seems that the whole results for the eﬀectiveness of the MEGSOR
method is obviously parallel with the results obtained by using ﬁnite diﬀerence methods. For our future works, further
observations can be proceeded to examine on various block points of the MEG scheme and then to apply the use of this
method as a smoother for the multigrid [12, 13]. Based on recent ﬁndings, the combination between the MEG iterative
method with appropriate precondition techniques is one of interesting current issues being discussed [4]. Apart from
the above studies, the further investigation for the capability of MEG iterative methods needs to be conducted for
solving other multi-dimensional partial diﬀerential equations [6, 1, 10].
References
[1] Abdullah, A.R.: The Four Point Explicit Decoupled Group (EDG) Method: A Fast Poisson Solver, Intern. Journal of Computer Mathematics,
38(1991) 61-70.
[2] Abdullah, A.R & Evans, D.J. . Fast Group Explicit algorithm for diﬀusion problems, Intern. Journal of Computer Mathematic. 27(1989):
181-197.
[3] Abdullah, A.R., Ali, N.H.M.: A comparative study of parallel strategies for the solution of elliptic pde’s, Parallel Algorithms and Applications,
10(1996) 93-103. Abdullah, A.R & Evans, D.J. (1989). Fast Group Explicit algorithm for diﬀusion problems, Intern. Journal of Computer
Mathematic. 27: 181-197.
[4] Ali, N.H.M. & Fijasri, N.F.:Splitting strategies for preconditioned Explicit Group schemes, Sains Malaysiana. 35(2)(2006): 49-54.
[5] Belytschko, T., Krongauz, Y., Organ, D., Fleming, M. & Krysl, P.: Meshless methods: An overview and recent developments. Computer
Methods in Applied Mechanics And Engineering. 139(1996): 3-47.
[6] Evans D.J.: Group Explicit Methods for the Numerical Solutions of Partial Diﬀerential Equations. Australia: Gordon and Breach Science
Publishers(1997).
[7] Evan, D.J., Yousif, W.F.: The Explicit Block Relaxation method as a grid smoother in the Multigrid V-cycle scheme, Intern. Journal of
Computer Mathematics, 34(1990) 71-78.
[8] Fletcher, C.A.J.: The Galerkin method: An introduction. In. Noye, J. (pnyt.). Numerical Simulation of Fluid Motion, North-Holland Publishing Company, Amsterdam (1978) 113-170.
[9] Fletcher, C.A.J.: Computational Galerkin method. Springer Series in Computational Physics. Springer-Verlag, New York (1984).
[10] Ibrahim, A., Abdullah, A.R.: Solving the two-dimensional diﬀusion equation by the four point explicit decoupled group (EDG) iterative
method. Intern. Journal of Computer Mathematics, 58(1995) 253-256.
[11] Lewis, P.E., Ward, J.P.: The Finite Element Method: Principles and Applications. Addison-Wesley Publishing Company, Wokingham (1991)
[12] Othman, M., Abdullah, A.R.: The Halfsweeps Multigrid Method As A Fast Multigrid Poisson Solver. Intern. Journal of Computer Mathematics, 69(1998) 219-229.
[13] Othman, M., Abdullah, A.R.: An Eﬀcient Multigrid Poisson Solver. Intern. Journal of Computer Mathematics, 71(1999) 541-553.
[14] Othman, M., Abdullah, A.R.: An Eﬃcient Four Points Modiﬁed Explicit Group Poisson Solver, Intern. Journal of Computer Mathematics,
76(2000) 203-217.
[15] Othman, M., Abdullah, A.R., Evans, D.J.: A Parallel Four Point Modiﬁed Explicit Group Iterative Algorithm on Shared Memory Multiprocessors, Parallel Algorithms and Applications, 19(1)(2004) 1-9 (On January 01, 2005 this publication was renamed International Journal of
Parallel, Emergent and Distributed Systems).
[16] Parter, S.V.: Estimates for Multigrid methods based on Red Black Gauss-Seidel smoothers, Numerical Mathematics, 52(1998) 701-723.
[17] Sulaiman. J., Hasan, M.K., Othman, M.: The Half-Sweep Iterative Alternating Decomposition Explicit (HSIADE) method for diﬀusion
equations. LNCS 3314, Springer-Verlag, Berlin (2004)57-63.
[18] Sulaiman, J., Othman, M., Hasan, M.K.: Quarter-Sweep Iterative Alternating Decomposition Explicit algorithm applied to diﬀusion equations. Intern. Journal of Computer Mathematics, 81(2004) 1559-1565.
[19] Sulaiman. J., Hasan, M.K., Othman, M.: Red-Black Half-Sweep Iterative Method Using Triangle Finite Element Approximation for 2D
Poisson Equations. LNCS 4487, Springer-Verlag, Berlin (2007)326-333.
[20] Sulaiman. J., Hasan, M.K., Othman, M.: Red-Black EDGSOR Iterative Method Using Triangle Element Approximation for 2D Poisson
Equations. LNCS 4707, Springer-Verlag, Berlin (2007)298-308.
[21] Twizell, E.H.: Computational methods for partial diﬀerential equations. Ellis Horwood Limited, Chichester (1984).
[22] Vichnevetsky, R.: Computer Methods for Partial Diﬀerential Equations, Vol I. New Jersey: Prentice-Hall (1981)
[23] Yagawa, G. & Furukawa, T.: Recent developments of Free Mesh method. International Journal for Numerical Methods in Engineering.
47(2000): 1419-1443.
[24] Yousif, W.S., Evans, D.J.: Explicit De-coupled Group iterative methods and their implementations, Parallel Algorithms and Applications,
7(1995) 53-71.

J. Sulaiman
et al.et/ Procedia
Computer
Science
1 00
(2012)
377–385
J. Sulaiman
al. / Procedia
Computer
Science
(2010)
1–9

385
9

[25] Zienkiewicz, O.C.: Why ﬁnite elements?. In. Gallagher, R.H., Oden, J.T., Taylor, C., Zienkiewicz, O.C. (Eds). Finite Elements In FluidsVolume, John Wiley & Sons,London 1(1975) 1-23
[26] Zhang, J.: Acceleration of Five Points Red Black Gauss-Seidel in Multigrid for Poisson Equations, Applied Mathematics and Computation,
80(1)(1996) 71-78.
[27] Zhu, T.: A New Meshless Regular Local Boundary Integral Equation (MRLBIE) approach. International Journal for Numerical Methods in
Engineering. 46(1999): 1237-125

