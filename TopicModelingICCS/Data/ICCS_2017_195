Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
Procedia Computer Science 108C (2017) 937–947

This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

On the performance and scalability of an HPC enhanced
Multi
Agent System
based evacuation
simulator
On the
performance
and scalability
of an HPC
enhanced
1
LeonelMulti
Aguilar1Agent
, Maddegedara
Lalith
, Tsuyoshi
Ichimura1simulator
, and Muneo Hori1
System
based
evacuation

Earthquake Research Institute, The University of Tokyo, Bunkyo, Tokyo 113-0032

Leonel Aguilar1 , leaguilar,lalith,ichimura,hori@eri.u-tokyo.ac.jp
Maddegedara Lalith1 , Tsuyoshi Ichimura1 , and Muneo Hori1
Earthquake Research Institute, The University of Tokyo, Bunkyo, Tokyo 113-0032
leaguilar,lalith,ichimura,hori@eri.u-tokyo.ac.jp

Abstract
This paper presents some of the techniques, algorithms and designs used to enable mass
evacuation
Abstract simulations to take advantage of high performance computing infrastructure. A
briefThis
overview
a tsunami
evacuation
simulator
capable
simulating
urban
areas
of
paper of
presents
somemass
of the
techniques,
algorithms
and of
designs
used to
enable
mass
hundreds of simulations
km2 in sub-meter
detail
is provided.
Enhancements
the serial algorithms
for path
evacuation
to take
advantage
of high
performancetocomputing
infrastructure.
A
finding
reducingofthe
path finding
in 94% simulator
and a cache
friendly
boundary
extraction
brief overview
a tsunami
masstime
evacuation
capable
of visual
simulating
urban
areas of
algorithm
overall detail
simulation
time inEnhancements
50% are presented.
Furthermore
thefor
hybrid
hundreds ofcutting
km2 inthe
sub-meter
is provided.
to the serial
algorithms
path
parallel reducing
(distributed
(MPI)
+ in
shared
memory
(OpenMP))
framework
is described.
A
finding
the memory
path finding
time
94% and
a cache
friendly visual
boundary
extraction
dynamic load
balancing
technique
reducing
theinidling
from 50% of
the execution
to
algorithm
cutting
the overall
simulation
time
50% time
are presented.
Furthermore
the time
hybrid
3% is presented.
Finally
measures
thread
parallel(OpenMP))
strong scalability
up to
threads of
parallel
(distributed
memory
(MPI)of+the
shared
memory
framework
is 16
described.
A
82.69% and
distributed
strong
scalability
up totime
2048from
processes
are presented.
dynamic
load
balancingprocess
technique
reducing
the idling
50% of
of 75.93%
the execution
time to
3%
is presented.
Finally
measures
ofB.V.
the
thread
parallel
strong scalability
up to
16 threads
of
©
2017
The Authors.
Published
by Elsevier
Keywords:
Evacuation
simulation,
Multi
agent
system,
High performance
computing,
Parallel
comput82.69%
and
distributed
process
strong
scalability
up
to
2048
processes
of
75.93%
are
presented.
Peer-review
under
responsibility
of
the
scientific
committee
of
the
International
Conference
on
Computational
Science
ing
Keywords: Evacuation simulation, Multi agent system, High performance computing, Parallel computing

1

Introduction

The
of mass evacuations provide extensive challenges due to their scale, the uncertainty
1 analysis
Introduction
in human actions and behaviors, the scarcity of these events and the inability to perform real
life
These
challenges
haveprovide
lead toextensive
the proliferation
computational
to study
Thedrills.
analysis
of mass
evacuations
challengesofdue
to their scale,models
the uncertainty
evacuations
and
human
mobility
in
general.
in human actions and behaviors, the scarcity of these events and the inability to perform real
the computational
infrastructure
grows
in capacity and
performance methods
techlife As
drills.
These challenges
have lead to
the proliferation
of computational
models and
to study
niques
need
to
be
developed
to
effectively
take
advantage
of
them.
Reports
on
the
scalability
of
evacuations and human mobility in general.
software
used
for
evacuation
simulation
are
limited
to
tens
of
CPU
cores
[1].
Other
pedestrian
As the computational infrastructure grows in capacity and performance methods and techevacuation
software
provide scalability
reports
up to Reports
hundredsonofthe
CPU
cores [2].
niques need simulation
to be developed
to effectively
take advantage
of them.
scalability
of
Although
these
programs
are
state
of
the
art
tools,
the
computational
infrastructure
has
grown
software used for evacuation simulation are limited to tens of CPU cores [1]. Other pedestrian
rapidly
requiring
enhancements
to achieve
better scaling
and
complex
evacuation
simulation
software provide
scalability
reports
upperformance.
to hundreds Modeling
of CPU cores
[2].
behavior
with
millions
of
agents
in
detailed
environments
require
further
considerations
the
Although these programs are state of the art tools, the computational infrastructure has on
grown
performance
and scalability
of the
rapidly requiring
enhancements
to simulators.
achieve better scaling and performance. Modeling complex
behavior with millions of agents in detailed environments require further considerations on the
1
performance and scalability of the simulators.
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.284

1

938	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

Aguilar et.al.

This paper extends the previous work on the HPC enhancements of a mass evacuation
simulator[3]. And presents performance and scalability measures along with the techniques and
algorithms used to achieve the reported performance.
The contribution of this paper is to provide scalability and performance measures for an
evacuation simulation software along with the design considerations and techniques. Additionally it addresses two costly bottlenecks in the simulation: the agents’ visual perception of
the environment (algorithmic considerations and cache friendliness) and their route planning
(graph model reduction).
The rest of the paper is organized as follows. Section 2 provides a brief overview of the
evacuation simulator and its multi agent system. Section 3 presents details of the hybrid parallel
extension. Section 4 presents the enhancements in the vision and path finding algorithms.
Section 5 concludes this paper.

2

The evacuation simulator

The evacuation simulator is based on the Multi Agent System (MAS) paradigm. This enables
the modeling of heterogeneity in crowds, different modes of evacuation, etc. Autonomous software agents are used to simulate evacuees in an environment. Each agent possesses individual
roles, responsibilities, knowledge of the surroundings and characteristics.
In contrast to other evacuation simulators, agents move in a continuous 2D space not restricted to cells or graphs but consider all the traversable space for their movement. An accurate
representation of the physical space is critical for the intended use case of tsunami evacuation
simulation as the whole tsunami evacuation happens in a few minutes time-frame. The short
time-frame amplifies any inaccuracies introduced in the models. Additionally the aim of the
evacuation simulator is to handle mass evacuations of urban domains. This requires the use of
models of the domain that provide enough information and details about the surroundings but
also scales to domains of hundreds of km2 . Due to the high computational cost of the simulator
a High Performance Computing(HPC) extension has been implemented [3].

2.1

Environment

The evacuation simulator is designed to include large urban domains in sub-meter details including indoors spaces. In order to accomplish this a hybrid vector/raster domain is adopted,
see Figure 1. This allows to efficiently provide details of the environment without sacrificing
higher level features such as path planning.
The dynamically changing details of the environment are provided using a raster model, a
grid where each cell represents the state of the region, i.e. unoccupied space, exit, obstacles or
designated evacuation/safe areas. Agents rely on their vision to perceive and discover the state
and changes in their environment. These changes occur due to debris from collapsed buildings
or tsunami inundation [5]. In order to efficiently provide higher level features such as path
planning, spatial experience storage and data collection a graph embedded in the traversable
spaces is provided. This graph provides a lighter data structure that enables better performance.

2.2

Agents

Autonomous agents are used to model evacuees in the simulation. Heterogeneity of characteristics and behaviors in human crowds and different modes of evacuation need to be considered.
This is performed by specializing the agents’ logic and by providing different instantiations
2

	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

Aguilar et.al.

Graph of path network
prior to disaster

grid of 1m×1m

High resolution
grid of dynamically
changing environment

Figure 1: Hybrid model of grid and graph environments. The grid is dynamically updated,
reflecting changes in the environment. The graph is static and represents the path network
before the disaster.
to their characteristics. Building blocks for the constitution of the agent’s logic are provided.
They provide the ability to perform tasks such as path planning, perceive their surroundings,
navigate, avoid collisions, etc. [6]. Agents’ features can be tuned to match specific field observations. In example [4] shows the tuning of the agents’ collision avoidance. Several models of
pedestrian evacuees are implemented (visitors, residents, law enforcement) all- of them possess
their own set of abilities and goals, i.e. law enforcement aid other evacuees in their evacuation
and have full knowledge of the environment and the ability to communicate with other law
enforcement agents over long distances to collectively plan their paths. Additionally different
mode of evacuations are possible e.g. using cars [7].

3

Parallel computing extension

By design agents are meant to be heterogeneous in their behavior with different logic composition and different usage of their features, i.e. car drivers could get desperate while waiting in a
queue and re-plan their path often while other drivers might be calm and not need to re-plan.
Some agents would have different visual radiuses leading to different time requirements for their
visual boundaries to be populated, etc. Moreover agents will tend to gather around safer areas
providing non homogeneous density through the simulated space.
This situation provides challenges uncommon for other types of simulations that rely on discrete entities, e.g smooth particle hydrodynamics,discrete element method. When simulations
involve millions of agents in large urban areas computational resources encompassing several
distributed computing nodes are required. Agents of different sizes, compositions with varying
workload need to be transferred efficiently between computing nodes while maintaining the
computational load balance throughout the allotted HPC infrastructure.
A hybrid parallel approach is used to handle the workload. The domain is decomposed
and partitions are assigned to individual computational nodes, information between nodes is
exchanged using MPI messages. Within a computational node the agent execution is parallelized
using OpenMP, the execution of an agent is considered as a task and individual threads take
charge of completing the tasks. This hybrid approach allows sharing of large data structures
like grids between computing cores in a node; this reduces the required memory requirements
for a simulation. Additionally the task parallelism allows to mitigate the difference in run-time
among agents.
3

939

940	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

3.1

Aguilar et.al.

Domain decomposition and dynamic load balancing

In order to decompose the work to be processed by several computational nodes, the positions
of the agents are used to generate a 2D-tree. Each leaf represents a domain partition and equals
the number of computational nodes, see figure 2(a). As the simulation progresses agents move
towards evacuation areas and re-partitioning is performed. Repartitioning assuming that each
agent involves the same computing time leads to high load imbalance. In practice cumulative
idling times of more than 50% of the total execution time are observed when the heterogeneity
of agent composition is high.

Figure 2: (a)-left, Decomposed domain (b)-right, Partition structure
In order to overcome this problem, agents report their average execution time during the
last few time-steps. Each individual process keeps track of the total execution time in its
partition and triggers the re-partitioning process when its own work falls below or increases
above predefined thresholds from its initial work load. Furthermore the points in the 2D-tree
are weighted based on their average execution time to balance execution time instead of number
of agents. This provides a better estimate of the computational load reducing the cumulative
waiting times to 3%.

3.2

Partition structure and communication hiding

As models of agents become more complex the data structures also grow in size. This makes
communicating and syncing agents across computing nodes an expensive process. Partitions
posses an inner layer that encompasses all the agents whose information is only required by
a computation node and a to send region which holds the information of that the neighboring
processes need in order to keep continuity. An additional ghost layer, to receive region, encompasses all the agents that are needed by the current process to keep continuity with surrounding
processes. Figure 2(b) shows a schematic view of these partitions. In order to amortize the
communication cost, the to send region is executed first to overlap communicating the agents
with the execution of the inner layer, see [3].
Different types of communication take place during the simulation; agents move between
partition boundaries and they have to be migrated to their new partition, agents are close to
a neighboring partition which requires their ghost copies to sync their external states during
re-partitioning, agents positions and execution weights need to be gathered and used to repartition, etc. Object types (e.g. resident) provide their own user defined MPI Datatype based
on the type of communication required. These user defined data types are used to create a
global data type for the communication. This global data type maps directly memory regions
in the exchanging processes (in reference to MPI BOTTOM) avoiding the need of additional
buffering/packing for the exchange.
4

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

3.3

Aguilar et.al.

Scalability results

Strong scalability measures are taken for the scaling of the program. Strong scalability is defined
as (Tm /Tn )/(n/m), where Tk is the execution time with k number of CPU cores and n ≥ 2m
each strong scalability measure is taken with respect to the previous core increment.
The intra-node scalability is tested using 100,000 agents in Kochi City area for 4000 timesteps. Measures for intra-node scalability are taken using a single node in The University of
Tokyo’s FX10 system, 16-core SPARC64 IXfx processor with 32GB of RAM in the computing
node.
# Threads
1
2
4
8
16

Time
16924.53s
8839.33s
44685.85s
2501.26s
1512.52s

Strong scalability

S.S. (base 1 thread)

95.73%
94.32%
93.67%
82.69%

95.73%
90.30%
84.58%
69.94%

Table 1: Intra-node strong scaling
The inter node scalability is tested using 2 million agents in an 81km2 area of Tokyo for 400
timesteps using RIKEN’s K computer, 8-core SPARC64 VIIIfx processor with 16GB of RAM
per computing node using flat MPI. Tables 1 and 2 show the results of the measures and figure
3 shows a comparison with the ideal scalability.
# Processes
256
512
1024
2048

Time
6683.38s
4002.65s
2500.78s
1646.78s

Strong scalability

S.S. (base 256 processes)

83.49%
80.03%
75.93%

83.49%
66.81%
50.73%

Table 2: Inter node strong scaling

16000

6400

Ideal

Ideal

Results

Results
Time (s)

8000

Time (s)

	

4000

3200

1600
2000
1000

800
1

2

4

# Threads

8

16

256

512

# Processes

1024

2048

Figure 3: (a)- Intra node scalability (b)- Inter node scalability

5

941

942	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

4

Aguilar et.al.

Improving performance

The efficient use of high performance computing infrastructure is very important as the waste
of resources gets amplified by the number of computational resources used. The need for better
performing software is not only due to the need to obtain the simulation results faster but also
to provide fair use of the shared computing infrastructure. Two of the most resource demanding
features of the agents in the tsunami evacuation simulator are their visual perception of the
details of the environment and their path planning abilities. The execution time required by
these features varies depending on how intensively they are used (getting desperate in queues,
path re-planning when roads are blocked, etc.), specifics of the domain (open spaces, road
network complexity, road widths, etc.) and individual characteristics of the agents (visual
radius, visibility angle, etc.). Through profiling (using Valgrind’s callgrind) it is found that
vision and path finding could take up to 70% of the execution time. This section presents the
improvements to the vision and path finding algorithms.

4.1

Vision

Agents perceive their surroundings by scanning their environment in a radar like way and
obtaining a visual boundary, see figure 4(a). Creating the vision rays, tracing them and calculating the intersection points with obstacles is computationally expensive. In order to reduce
the computational cost instead of calculating the rays from the actual agent position, discrete
origins are created and rays originating from them are precalculated at the start of the simulation. Agents then query the radar template closest to their actual position with respect to their
current cell. This process trades off the calculating time with the storage necessary to hold
the radar templates and the accuracy of an approximate position. The process for obtaining
the visual boundary (Horizon) can be seen in algorithm 1. Although this algorithm is more
efficient than calculating the ray intersections on the fly, figure 5(a) shows redundant accesses
to many of the cells as several rays might pass along the same cells. In order to reduce the
redundancy in cell access the concept of “ray path” is introduced, two rays share the same path
to an end cell if they passed the same cells to reach there. Figure 4(b) exemplifies this concept,
ray A and B share the same path (0,1,2,3,4,5) until the intersection with the obstacle (5), while
ray C (0,1,2,3,9,10,11) diverges path at 9. By preprocessing hash tables of the common paths
and divergences the number of redundant reads can be reduced. Minor modifications to the
original algorithm are needed to take advantage of this information, see highlighted regions in
algorithm 1. Ray D shows that redundancies still occur as it diverges early and revisits cells 9
and 10. Figure 5(b) shows the decrease in cell accesses and the remaining redundancies using
this technique. The time reduction obtained by using the path hashing technique in comparison
to naively checking every cell can be seen in figure 6.
4.1.1

Cache friendliness

Further analysis on the performance of the enhanced vision algorithm (using Fujitsu’s advanced
profiler (FAPP)) shows a large amount of CPU cache misses, see Figure 6 (Path Hashing). The
target architecture SPARC64 VIIIfx provides 6MB L2 cache and 32KB L1 cache [8]. Furthermore, this architecture provides means of partitioning these caches in sectors and loading data
to them, see [9]. The two large data structures involved in the visual boundary extraction are
the grid and the rays (precalculated ray-grid intersection data). Loading the grid data structure
to the L2 cache provides a significant reduction in the time spent in fetching data from memory
but it is unable to clear it completely, see 6(+SECTOR). As 6MB of L2 cache is enough to
6

	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

Aguilar et.al.

Figure 4: Vision (a)-left, visual boundary (b)-right, rays cells (hashed cells are occupied)
Algorithm 1: Vision boundary extraction + enhancement (highlighted additions)
input : my position, agent position ,sight distance, vision length,direction, facing
direction
output: Horizon, contains discrete end points information along the radar directions
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

ChooseClosestTemplate(my position,sight distance,direction)
for ∀HorizonElement ∈ Horizon do
for ∀RayElement ∈ CurrentRay do
cell state=QueryGrid(RayElement.position)
if cell state==OCCU P IED then
HorizonElement = RayElement.data
PopulateSamePathRays(RayElement.data)
AdvanceHorizonAndRayToDivergence()
break
if cell state==EN D then
HorizonElement = RayElement.end data
PopulateSamePathRays(RayElement.end data)
AdvanceHorizonAndRayToDivergence()
break
AdvanceRay()
return Horizon

Figure 5: Number of queries to individual cells (a)-left, Original algorithm (Naive) (b)-right,
Improved algorithm (Path hashing)
7

943

944	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

Aguilar et.al.

hold the two data structures the code and data structures are re-factored to make better use
of the cache. The rays information are reduced to the minimum and stored with their data
ordered in the same manner as their accesses. Loops in line 2 and 3 in algorithm1 are used
to populate a lighter data structure then used to populate the “HorizonElements” sequentially,
lines 6,11. The result of this re-factoring can be seen in figure 6 (+REFACTOR). This reduces
the time taken to populate the vision in an additional 50% from the enhanced “Path Hashing”
algorithm (without any cache consideration).
Instruction commit
NAÏVE
PATH HASHING
PH + SECTOR
PH + REFACTOR
0

L2 cache access

0.5

1

Other (No instruction commit)

1.5

2

2.5

Memory access

3

3.5

4

Figure 6: Visual boundary extraction algorithm CPU cache profiling times (seconds) for 100
Agents during 200 time steps of simulation.
The overall benefits of the improved algorithm are dependent on the complexity and proximity of the surroundings and the agent characteristics such as visual range and radar resolution.
In practice reductions of 30%-70% in cell accesses and up to 50% reduction in the total run-time
are observed.

4.2

Graph model reduction

In order for the agents to be able to navigate through the environment and use landmarks for
their experiences, calculate road widths, etc. an embedded graph is provided. This graph is
embedded along all the empty spaces of the domain, thus providing redundant nodes to keep
more accurate track of roads. An embedded graph in a 52km2 of Kochi City, Japan, see figure
7(a), contains more than 300,000 nodes and almost half a million links, see Table 3. Path
finding in such a graph is computationally intensive. In order to improve the path finding
performance a topological graph that includes only key nodes (intersections and endpoints)
is created from the embedded graph, see figure 7(b). This model reduction technique allows
performing path-finding efficiently without any loss in accuracy.

4.3

Path finding

In order to keep coherence between the simplified and the embedded graphs data structures
mapping nodes and links between the two graphs are necessary. These maps are populated
during the pre-processing of the simplified graph. Path searches need to be translated between

Simplification

Figure 7: (a)-left, Embedded graph (b)-right, Simplification process
8

	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

Aguilar et.al.

the simplified graph and embedded graph. Given that the starting node of the search in the
embedded graph might be in between two nodes of the simplified graph and that a translation
process needs to take place. A modified version of Dijkstra algorithm shown in algorithm 2 is
used; changes highlighted.
Algorithm 2: Path finding in simplified graph: Modified Dijkstra algorithm.
input : N0E , starting node in the embedded graph, N1S and N2S , starting node in the
simplified graph, inB1 , dist1 and inB2 ,dist2 , nodes and distance in between N0E
and NxS , IsValid() instantiated with the minimum width required by the agent
wmin and his known to be blocked paths, positive weighted simplified graph
GS = (V, E)
output: path to destination and its length
1

2
3
4
5
6
7
8
9
10
11
12

for ∀u ∈ V do distance(u)= ∞; parent(u)= −1; // Initialize shortest
distance to reach every node to ∞ and best node parent to −1-unknown
// N0E might lie between two nodes in GS
if N1S then ( distance(N1S )= dist1 ; priority queue.add(N1S ,distance(N1S ));
if N2S then ( distance(N2S )= dist2 ; priority queue.add(N2S ,distance(N2S ));
while not priority queue.empty() do
u = priority queue.top();
if IsADestination(u) then break();
priority queue.pop();
for ∀(u, v) ∈ E do
dl = l(u, v) if distance(v ) > distance(u)+dt and IsValid(u,v ) then
distance(v )=distance(u)+l(u, v);
parent(v )=u;
priority queue.add(v,distance(v ));

14

if IsADestination(u) then // Translates the path back to the embedded graph
and adds the head node and nodes in between
TranslatePathAddStart(N0E ,N1S ,inB1 ,N2S ,inB2 ,length)

15

return path , length

13

A comparison of run times for calculating 1000 agent paths from random locations in Kochi
city is seen in Figure 3. A reduction of 94% in the path search run time is achieved through
the use of a simplified graph.

Embedded graph
Simplified graph

Nodes
352371
29282

Links
484814
66340

Run time
37.31s
2.24s

Table 3: Size and run-time comparison between the embedded and topological graph, for 1000
random agent’s paths

9

945

946	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

5

Aguilar et.al.

Concluding remarks

An overview of some of the techniques and algorithms to improve the performance and scalability of a multi agent system based mass tsunami evacuation simulator is presented. Although
these techniques are presented in the context of a tsunami evacuation simulator the experiences
are portable to similar systems. Systems with complex heterogeneous agents with unpredictable
workloads that require special considerations to efficiently take advantage of HPC infrastructure are common. A dynamic load balancing technique coupled with task parallelism reduces
the idling time from 50% to 3% of the execution time. Many of these systems rely on graphs or
raster models as essential building blocks. This paper shows raster cell access and cache friendliness considerations in a visual boundary extraction algorithm leading to an overall impact of
50% run-time reduction. A model reduction technique for large embedded graphs transferring
path finding queries from an embedded to a topological graph reducing the path finding time
in 94% is provided. The use of HPC infrastructure requires special focus on scalability. This
paper shows results in thread parallel strong scalability up to 16 threads of 82.69% and strong
scaling up to 2048 processes of 75.93%.
Acknowledgments
This work was supported by JSPS KAKENHI Grant Number 24760359. Parts of the results
are obtained using K computer at the RIKEN Advanced Institute for Computational Science
and FX10 at The University of Tokyo.

References
[1] Waraich, Rashid A; Charypar, David; Balmer, Michael; Axhausen, Kay W; ”Performance improvements for large-scale traffic simulation in MATSim”, Computational Approaches for Urban
Environments, Springer International Publishing, 211-233,2015
[2] Wagoum, Armel Ulrich Kemloh, et al. ”Parallel real time computation of large scale pedestrian
evacuations.” Advances in Engineering Software 60: 98-103,2013
[3] M. L. Wijerathne, L. A. Melgar, M. Hori, T. Ichimura, and S. Tanaka. HPC enhanced large urban area evacuation simulations with vision based autonomously navigating multiagents. Procedia
Computer Science, (1515-1524), 2013.
[4] Leonel Enrique Aguilar Melgar, Maddegedara Lalith, Muneo Hori, Tsuyoshi Ichimura, Seizo
Tanaka, A Scalable Workbench for Large Urban Area Simulations, Comprised of Resources for
Behavioural Models, Interactions and Dynamic Environments, PRIMA 2014: Principles and Practice of Multi-Agent Systems, Volume 8861, Lecture Notes in Computer Science, pp 166-181, 2014
[5] Jacob, S., Aguilar, L., Wijerathne, L., Ichimura, T. and Tanaka, S.. Agent Based Modeling and
Simulation of Tsunami Triggered Mass Evacuation Considering Changes of Environment Due to
Earthquake and Inundation. Journal of Japan Society of Civil Engineers, Ser. A2 (Applied Mechanics (AM)), Vol. 17, No. 2, pp.I 671-I 680., 2014
[6] L. A. Melgar, L. Wijerathne, M. Hori, T. Ichimura, and S. Tanaka. On the Development of an MAS
Based Evacuation Simulation System: Autonomous Navigation & Collision Avoidance, PRIMA
2013: Principles and Practice of Multi-Agent Systems, Springer, Lecture Notes in Computer Science, pp 388-395, 2013
[7] Aguilar Leonel, Wijerathne Lalith, Ichimura Tsuyoshi, Muneo Hori, Tanaka Seizo, Mixed mode
large urban area tsunami evacuation considering car-pedestrian interactions, Journal of Japan Society of Civil Engineers, Ser. A2 (Applied Mechanics Papers Vol. 18), Volume 71, 633-641, 2015

10

	

On the performance and scalability
an HPC
based
evacuation
simulator
LeonelofAguilar
et al.enhanced
/ ProcediaMAS
Computer
Science
108C (2017)
937–947

Aguilar et.al.

[8] Yoshida, T., Hondo, M., Kan, R., & Sugizaki, G. SPARC64 VIIIfx: CPU for the K computer.
Fujitsu Sci. Tech. J, 48(3), 274-279,2012
[9] Perarnau, Swann, and Mitsuhisa Sato. ”Toward Automated Cache Partitioning for the K Computer.” IPSJ SIG-HPC, 2012.

11

947

