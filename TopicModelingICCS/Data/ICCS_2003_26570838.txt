Symbolic Computation of High-Order Exact
Picard Iterates for Systems of Linear Diﬀerential
Equations with Time-Periodic Coeﬃcients
Armando G.M. Neves
UFMG – Departamento de Matem´
atica
Av. Antˆ
onio Carlos, 6627 – Caixa Postal 702
30123-970 – B. Horizonte – MG, BRAZIL
aneves@mat.ufmg.br

Abstract. In symbolic manipulation packages such as MATHEMATICA it is possible to substitute the built-in function for integration by
a user-programmed speciﬁc integration function and symbolically evaluate exact high-order Picard iterates for systems of linear diﬀerential
equations with time-periodic parameter-dependent coeﬃcients. With this
technique we get excellent approximations in feasible CPU times for the
solutions of these diﬀerential equations explicitly dependent on the parameters. We compare our technique with the one described by Sinha
and Butcher [9], in which instead of exact Picard iterates, only a certain
number of terms in the expansion of these iterates in Chebyshev polynomials is obtained. Our technique is exempliﬁed by application to the
Mathieu equation and calculation of linear stability domains for simple
and double inverted pendula subjected to vertical periodic motions of
the pivot.

1

Introduction

In spite of many of its properties being well-known and presented in the textbooks under the name of Floquet theory [5], the explicit solution of systems of
linear ordinary diﬀerential equations with time-periodic coeﬃcients is in general
not possible to ﬁnd. Of course, all of the standard numerical methods such as
Runge-Kutta are available, but one of their disadvantages is that in many interesting applied problems, one wants to know how properties of the solution
vary as one or more parameters are continuously varied. Instead of running the
method again for each set of values of the parameters one is interested in, it
would be very nice if approximations to the solutions are given as functions of
the parameters.
An interesting example of a physical problem involving a system of diﬀerential
equations with time-periodic coeﬃcients depending on parameters is the study
of inverted simple or multiple pendula subjected to vertical periodic motion of
Partially supported by FAPEMIG, Research Funding Foundation of the State of
Minas Gerais, Brazil
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 838–847, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Symbolic Computation of High-Order Exact Picard Iterates

839

their pivots. In this case we may have as parameters the frequency and amplitude
of the motion of the pivot, the lengths of the pendula, their masses, damping
coeﬃcients and so on. If we are interested in small oscillations, the equations can
be linearized and, as a result of the symbolic calculation of good approximations
to their solution, we can determine the regions of stability and instability of the
pendula as functions of the parameters.
There exist well-known methods for general problems of diﬀerential equations
involving parameters, e.g. perturbation theory [6] and averaging [8]. But these
techniques usually do not perform well when the parameters are not too small
and convergence to the true solution is diﬃcult or impossible to check. More
recently, Guttalu and Flashner [4] developed a method which performs well when
the parameters are not small, but CPU time expensive and also not yielding the
solution as an explicit function of time.
Still more recently, Sinha and Butcher [9], [3] introduced a method based on
Picard iteration, also known as Peano-Baker series in control literature. Picard
iteration is the most frequently used method in proving the theorem of existence
and uniqueness of solutions to initial value problems in diﬀerential equations,
see for example [2]. It is known to converge locally to the true solution as the
number of iteration steps goes to inﬁnity. We found it remarkable that, besides
its theoretical interest, Picard iterations are also useful as a practical method
for ﬁnding approximate solutions.
Sinha and Butcher expand the coeﬃcient matrix of the system of diﬀerential equations in shifted Chebyshev polynomials and then Picard iterates of the
truncated expansion in Chebyshev polynomials are computed symbolically in
the parameters. The number m of polynomials retained in the expansion can
be chosen by the user. The important fact, which explains the success of Sinha
and Butcher’s method is that, as a consequence of the properties of Chebyshev
polynomials, one can trade the integrations in the Picard method by matrix
products. Their method also performs well when the parameters are not small,
runs in smaller CPU times than Guttalu and Flashner’s (see comments at page 7
of [3]) and, in opposition to Guttalu and Flashner’s, yields the solutions explicitly
as functions of time.
The method we explain in this paper shows that it is possible to get rid of
the Chebyshev expansion in the evaluation of Picard iterates, obtaining thus
exact Picard iterates. With a Computer Algebra System (CAS) such as MATHEMATICA, we are able to perform large numbers of exact Picard iterates, as
many as Sinha and Butcher in [3], in feasible CPU times. This is possible because
we prove that all necessary integrals are of functions in a small deﬁnite class.
We can then avoid using the built-in function for integration, which is too slow,
and program instead a speciﬁc integration function which is able to evaluate the
symbolic integral of any function in the class.
Our method is exempliﬁed in this paper by applying it to the calculation of
stability domains for the Mathieu equation and for inverted simple and multiple
pendula driven by vertical periodic motion of their pivots. Our results were

840

A.G.M. Neves

obtained using MATHEMATICA. A package for the method was developed and
may be downloaded from our web site at
http://www.mat.ufmg.br/˜aneves/diffusion/picard.htm
In [7] we explain thoroughly the implementation details of the package and
provide examples of its usage. Our speciﬁc integration function relies heavily on
the strong pattern matching ability of MATHEMATICA, as exempliﬁed in the
code at the appendix. We think the same method can be implemented in other
CAS, or even in some traditional programming language. Probably this will
require extra programming work to mimic MATHEMATICA pattern matching
constructs.
Of course the expressions for exact high-order Picard iterates are very complicated, containing hundreds or thousands of terms. Although not useful to be
written in blackboard, we show that the exactness of our results yields visible
diﬀerences when compared to results in [3] calculated with the same number of
Picard iterates. In their method, because of the ﬁnite number m of terms retained
in the Chebyshev expansion in each iteration step, the neglected coeﬃcients in
the series would give contributions to the retained ones. Even if one performs a
very large number p of steps, the solution might not improve as a consequence
of accumulated errors in the retained coeﬃcients.
As a consequence of the proof of the existence-uniqueness theorem in diﬀerential equations, it is also possible to give rigorous bounds on the committed
errors when one calculates only a ﬁnite number p of Picard iteration steps. Of
course, these estimates are not available for the method by Sinha and Butcher.
In a further paper we intend to provide such estimates.

2

Picard Iteration and Floquet Theory

Let t ∈ R and x(t) and f (t, x) be functions with values in Rn . Consider then
the problem of ﬁnding the solution to the initial value problem for the system
of diﬀerential equations
dx(t)
dt
x(t0 )

= f (t, x)
,
= x0

(1)

where t0 ∈ R is the initial “time” and x0 ∈ Rn is the initial “position”.
The Picard iterate of a function y(t) with initial condition x0 is deﬁned as
(Tx0 y)(t) = x0 +

t
t0

f (τ, y(τ )) dτ .

(2)

Let (Tx20 y)(t) = (Tx0 (Tx0 y)) (t), (Tx30 )y(t) = Tx0 (Tx20 y) (t) and so on. If f and
∂f
∂x are continuous, then it can be shown that given any continuous y(t), its
mth Picard iterate Txm0 y(t) converges to the solution of (1) as m → ∞, if t is
in a suitable interval of values close to t0 . The proof of this result is in fact

Symbolic Computation of High-Order Exact Picard Iterates

841

the standard proof of the existence and uniqueness theorem for solutions to
diﬀerential equations, see for example [2]. If the system is linear, i.e. f (t, x) is of
the form
f (t, x) = A(t) x(t) ,
(3)
where A(t) is an n × n matrix, then convergence holds for all t ∈ R.
Let ej , j = 1, 2 . . . , n denote the vector in Rn with all coordinates equal to
0, except for the jth coordinate, which is equal to 1. Let φj (t) be the solution
to the linear system (1) with f (t, x) given by (3) and initial condition
x(t0 ) = ej .

(4)

If Φ(t0 , t) is the n × n matrix whose jth column is φj , then x(t) = Φ(t0 , t) x0
is the soultion to the same system with initial condition x(t0 ) = x0 . Matrix
Φ(t0 , t) is then called a fundamental matrix solution. As in what follows we will
be always taking the initial time t0 = 0, we abbreviate Φ(t0 , t) as Φ(t).
As Φ(t) is in general not possible to calculate, our aim in this paper is to
calculate approximations to it. We will call Φ(p) (t) the approximation to Φ(t)
having as jth column the pth Picard iterate of ej with initial condition ej , i.e.
Tepj ej .
We will do that not in the general linear case, but in the special one when
A(t) is periodic of period L, i.e., A(t + L) = A(t). We restrict a bit more by
considering matrices of the form
N

A(t) = A0 +

(Ack cos(

k=1

2πk
2πk
t) + Ask sin(
t)) .
L
L

(5)

All our examples already have this form with N = 1, but in principle any
reasonable periodic matrix can be approximated by one of the above form by
retaining a ﬁnite number of terms in its Fourier series.
From Floquet’s theory of linear systems with periodic coeﬁcient matrix [5],
stability properties of the solutions can be obtained from the fundamental matrix
solution evaluated at the period, i.e. Φ(L) in our case. This matrix is called the
Floquet transition matrix (FTM). The relation between stability and the FTM
is that the equilibrium solution x(t) = 0 is stable (i.e. any solution remains close
to the equilibrium solution for all times) if and only if all the eigenvalues λi of
the FTM are such that |λi | ≤ 1, [5].
Another result from Floquet’s theory [5] we will need in the following is that
the product of the eigenvalues of the FTM is
λi = exp
i

3

L
0

tr A(s) ds

.

(6)

Implementation Details

If the reader performs (by hand or with a symbolic software) some of the ﬁrst
Picard iterates for a linear system with matrix in the form (5) and uses easy

842

A.G.M. Neves

trigonometric identities to replace products of trigonometric functions by sums,
he will be able to prove by induction that the only functions that need to be
integrated are ﬁnite linear combinations of functions of the form
τ r sin qτ

or

τ r cos qτ ,

(7)

where r and q are integers, r, q ≥ 0. As these integrals with r = 0 or q = 0 are
easily computed and integration by parts can be used recursively to reduce the
values of r, we can create a new function that overrides the built-in integration
function of the software and calculates any integral that can possibly come out of
the iterations. As recursion is necessary, our new integration function also memorizes the values of already calculated integrals, so that these are not calculated
anew every time they are needed.
The reader may convince himself that a new integration function is necessary
if he computes Φ(p) by using the built-in function of his software with p more
than 10 iterates. We will need 20 or more iterations in our examples. In [7], it is
shown that integrations are much quicker with our method.
In the typical example of approximating the solution of the Mathieu equation (10), the 15th Picard iterate of one initial condition had 1480 terms in its
expanded form and only 164 terms after grouping similar ones. In using the expanded result to calculate the next iterate, each kind of integral would have to
be evaluated in average 9 times, unless we ﬁrst group similar terms and then
perform each integration only once. Results show also that as the number of
iterations grows, the computational eﬀort necessary to group terms will eventually compensate for the smaller number of integrations to be performed. So, we
provided grouping of terms before integration in our function.
The complete MATHEMATICA code for deﬁning our integration function is
given in the appendix.

4

Inverted Driven Pendula

As an example of an interesting physical system whose solution depends on a set
of parameters and can be approximated by our method, consider n uniform rods,
i.e. physical pendula, all with the same length l, mounted one over the other. The
system is under inﬂuence of gravity with acceleration g and the suspension point
is subjected to external periodic driving in the vertical direction, its position
being given by
f (t) = ε cos ω0 t .
(8)
It is almost incredible, but if the amplitude ε and the frequency ω0 are carefully
chosen, such an arrangement of pendula may be stabilized, see [1].
Let θi (t) denotes the angular coordinate of the ith pendulum with respect to
an upward vertical and θ(t) = (θ1 (t), . . . θn (t)). The equations of motion of such
a system can be deduced in the Lagrangian formalism, see [7]. Linearizing them
in the neighborhood of the upward pointing equilibrium θ(t) = 0, one ﬁnds they
can be written as

Symbolic Computation of High-Order Exact Picard Iterates

d2 θ
+ ρ D θ(τ ) = 0 ,
dτ 2
cos τ and τ = ω0 t is the rescaled time.
B

where ρ = − ωg2 l +
0

l

In the case of a single rod (n = 1), we have B =
n = 2, we have D = diag{3/2, 1/2} and
B =

4/3
1/2

1/2
1/3

1
3

843

(9)

and D = 12 . In the case

.

In order to apply our method to this system, multiply (9) by B −1 and then
put it in form of a ﬁrst-order linear system by deﬁning the 2n-dimensional vector
x(t) = (θ(t), θ (t)).
In the case of one pendulum, (9) is in the form of the well-known Mathieu
equation
θ (τ ) + (a + b cos τ ) θ(τ ) = 0 ,
(10)
where parameters a and b are given by
a=−

3g
2ω02 l

(11)

and

3ε
(12)
2l
and the primes now refer to diﬀerentiation with respect to τ .
In the case of n pendula, n > 1, besides solving directly by our method the
system of 2n equations, it is possible to give a more clever solution [1]. It can
be seen that the matrix B −1 D is always diagonalizable with distinct positive
eigenvalues µ1 , . . . , µn . Let vi , i = 1, . . . n be the corresponding eigenvectors and
U the matrix whose columns are v1 , . . . , vn . Thus U −1 B −1 DU is diagonal and by
n
deﬁning “normal” coordinates ϕi = j=1 (U −1 )ij θj we have that (9) decouples
to n independent Mathieu equations
b=

ϕi (τ ) + µi

−

g
+ cos τ
ω02 l
l

ϕi (τ ) = 0 ,

(13)

i = 1, 2, . . . , n.
In the next section we are going to show the results obtained by our method
both in the case of the Mathieu equation and in the case of a double pendulum.

5
5.1

Results
Mathieu Equation

In order to compare with the results of [9], we calculated Φ(24) (a, b, t), i.e. the
24th exact Picard iterate for the fundamental solution matrix of (10) as an explicit function of the parameters a and b and time t. Table 1 shows the eigenvalues

844

A.G.M. Neves

Table 1. Eigenvalues of the FTM for the Mathieu equation for several values of a and
b and diﬀerent methods. For each set of values of a and b the top row is the “exact”
result obtained by a fourth order Runge-Kutta, the middle row is our result with p = 24
Picard iterations and the bottom row is the result by Sinha and Butcher with p = 24
and m = 15 terms retained in the Chebyshev expansion.
exact
a = −0.75
our result
Sinha-Butcher
exact
a = 0.0
our result
Sinha-Butcher
exact
a = 0.75
our result
Sinha-Butcher
exact
a = 1.50
our result
Sinha-Butcher

b = 0.01
0.00434 ; 230.754
0.00434 ; 230.754
0.00433 ; 230.754
0.99901 ± 0.04442i
0.99901 ± 0.04442i
0.99901 ± 0.04442i
0.66606 ± 0.74590i
0.66606 ± 0.74590i
0.66606 ± 0.74590i
0.15804 ± 0.98743i
0.15830 ± 0.98658i
0.15829 ± 0.98659i

b = 0.75
0.00577 ; 173.295
0.00577 ; 173.295
0.00577 ; 173.297
-8.47371 ; -0.11801
−8.47371; −0.11801
-8.47367 ; -0.11800
0.36764 ± 0.92997i
0.36764 ± 0.92997i
0.36764 ± 0.92997i
0.32108 ± 0.94705i
0.32124 ± 0.94648i
0.32169 ± 0.94611i

b = 1.5
0.05810 ; 17.2120
0.05810 ; 17.2120
0.05801 ; 17.2129
-34.3546 ; -0.02911
-34.3546 ; -0.02911
-34.3551 ; -0.02909
0.41935 ± 0.90782i
0.41935 ± 0.90782i
0.41935 ± 0.90784i
1.33050 ; 0.75160
1.33078 ; 0.75136
1.33493 ; 0.74892

of the 24th approximation to the FTM (i.e. Φ(24) (2π, a, b)) for some chosen values of a and b obtained by our method alongside with the values reported in [9]
both by their method and by a fourth order Runge-Kutta with a tolerance of
10−8 .
Another interesting result is the picture of the stability boundaries for the
solutions to the Mathieu equation. Solutions are stable for the (a, b) values such
that the eigenvalues λi , i = 1, 2 of the FTM Φ(2π) satisfy |λi | ≤ 1. Because the
particular form taken by matrix A in the case of the Matheu equation is such
2
that tr A = 0, it follows by (6) that i=1 λi = 1. As the sum of the eigenvalues is
always a real number, it can be seen that solutions change from stable to unstable
at the points where tr Φ(2π, a, b) = ±2. The stability boundaries are the curves
where this condition is fulﬁlled. We show in ﬁgure 1 the stability boundaries of
the Mathieu equation obtained by using the 50th Picard iterate to approximate
the FTM as a function of a and b and the condition of its trace being equal to
±2. This ﬁgure should be compared with ﬁgure 1C in [3], produced by using the
same number of Picard iterates and 32 terms in the Chebyshev expansion in the
same range of values for a and b (we accounted for the fact that the authors use
a diﬀerent form for Picard equation). Our result does not produce the spurious
points seen at the far right end of their picture. This proves that exact Picard
iterates, as opposed to the approximate ones calculated in [3], do produce better
results. As [3] does not display numerical results such as those in table 1, we
cannot numerically compare accuracy of our results with theirs.
Concerning CPU times, we cannot make exact comparisons with results by
Sinha and Butcher, because we produced our results with more modern machines. The cumulative CPU time to produce their ﬁgure similar to our ﬁgure 1

Symbolic Computation of High-Order Exact Picard Iterates

845

b
20
17.5
15
12.5
10
7.5
5
2.5
2

4

6

8

10

a

Fig. 1. Stability boundaries for the Mathieu equation calculated using 24 Picard iterates.

was 114 hours with a SUN SPARC 20 with 128 MB of RAM. Our ﬁgure 1 was
produced by a 1 GByte Pentium 4 with 512 MB of RAM in only 52 minutes.
5.2

Vertically Driven Double Pendulum

As a further check for the accuracy of our method, we calculate the linear stability boundaries for a system of 2 pendula in 2 diﬀerent ways. It is natural to
present the stability boundary for such a double pendulum in a graph where the
horizontal axis is the amplitude of the driving given in units of the length l of
the pendulum and the vertical axis the frequency of the driving in units of the
frequency of small oscillations of the undriven pendulum. Such a graph is given
in ﬁgure 2. The full line in the ﬁgure was calculated by the normal coordinates
method, as explained in the previous section, whereas the dots were produced by
directly calculating the Floquet transition matrix for the system of 4 diﬀerential
equations. In both instances, we used 20 Picard iterates. Notice how the results
calculated by both methods agree.

6

Conclusions

By following the idea of Sinha and Butcher [9], we used Picard iterates to approximate the solutions of systems of linear ordinary diﬀrential equations with
parameter-dependent periodic coeﬃcients. We showed that in CPU times similar
to theirs, or even smaller, we are able to obtain exact Picard iterates symbolically
in parameters, whereas they obtain approximate Picard iterates.

846

A.G.M. Neves

100
80
60
40
20

0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09
Fig. 2. Stability boundaries for a vertically driven linearized inverted double pendulum
calculated by 2 methods, both with 20 Picard iterates. The full line result was calculated
by the normal coordinates method. The dots were produced by directly approximating
the solution for the system of 4 diﬀerential equations. For small enough amplitude, the
stable region is the one above the corresponding curve, i.e. the high-frequency region.

Our method was tested on the Mathieu equation and also in systems of 2
and 3 linearized vertically driven pendula. Excellent results can be obtained in
feasible CPU times using around 20 Picard iterates.

References
1. D. J. Acheson, A pendulum theorem, Proceedings of the Royal Society of London A
443, 239–245 (1993).
2. M. Braun, Diﬀerential Equations and their Applications, 2nd edition. SpringerVerlag, New York (1978).
3. E. A. Butcher and S. C. Sinha, Symbolic Computation of Local Stability and Bifurcation Surfaces for Nonlinear Time-Periodic Systems, Nonlinear Dynamics 17 ,
1–21 (1998).
4. R. S. Guttalu and H. Flashner, Stability Analysis of Periodic Systems by Truncated
Point Mappings, Journal of Sound and Vibration 189, 33–54 (1996).
5. D. W. Jordan, P. Smith Nonlinear Ordinary Diﬀerential Equations, 2nd edition,
Clarendon Press, Oxford(1987).
6. A. H Nayfeh, Perturbation Methods, John Wiley, New York (1973).
7. Armando G. M. Neves, Approximating Solutions of Linear Ordinary Diﬀerential
Equations with Periodic Coeﬃcients by Exact Picard Iterates, submitted to The
Mathematica Journal (2002).
8. J. A. Sanders and F. Verhulst, Averaging Methods in Nonlinear Dynamical Systems,
Springer-Verlag, New York (1985).
9. S. C. Sinha and E. A. Butcher, Symbolic Computation of Fundamental Solution Matrices for Linear Time-Periodic Dynamical Systems, Journal of Sound and Vibration
206, 61–85 (1997).

Symbolic Computation of High-Order Exact Picard Iterates

847

Appendix
NewIntegrate[x_Plus, var_Symbol]:=
Map[NewIntegrate[#,var]&, x]
NewIntegrate[c_ x_, var_Symbol]:= c NewIntegrate[x, var]/;
FreeQ[c,var]
NewIntegrate[c_, var_Symbol]:= c var /; FreeQ[c,var]
NewIntegrate[var_ˆn_. ,

var_Symbol] :=

varˆ(n + 1)/(n + 1)

NewIntegrate[Cos[m_. var_Symbol], var_Symbol] :=
NewIntegrate[Sin[m_. var_Symbol],
1/m - 1/m Cos[m var]

1/m Sin[m var]

var_Symbol] :=

NewIntegrate[var_ˆn_. Cos[m_. var_Symbol],
var_Symbol] := NewIntegrate[varˆn Cos[m var],
var] = 1/m varˆn Sin[m var] n/m NewIntegrate[varˆ(n - 1) Sin[m var], var]
NewIntegrate[var_ˆn_. Sin[m_. var_Symbol],
var_Symbol] := NewIntegrate[varˆn Sin[m var],
var] = -1/m varˆn Cos[m var] +
n/m NewIntegrate[varˆ(n - 1) Cos[m var], var]
NewIntegrate[function_, {var_, a_ , b_}]:=
Module[{int},
int= NewIntegrate[function, var];
(int/.var->b)- (int/.var->a)
]

