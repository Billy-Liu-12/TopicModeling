An XML Speciﬁcation for Automatic Parallel
Dynamic Programming
Ignacio Pel´aez, Francisco Almeida, and Daniel Gonz´alez
Departamento de Estad´ıstica, I. O. y Computaci´
on
Universidad de La Laguna, c/ Astrof´ısico F. S´
anchez s/n
38271 La Laguna, Spain
ignacio.pelaez@gmail.com, falmeida@ull.es, dgonmor@ull.es

Abstract. Dynamic Programming is an important problem-solving
technique used for solving a wide variety of optimizations problems. Dynamic programs are commonly designed as individual applications and,
software tools are usually tailored for speciﬁc classes of recurrences and
methodologies. We presented in [9] a methodological proposal that allowed us to develop a generic tool [DPSKEL] that supports a wide range
of Dynamic Programming formalizations for diﬀerent parallel paradigms.
In this paper we extent this work by including a new layer between the
end users and the tool in order to reduce the development complexity. This new layer consists in a XML speciﬁcation language to describe
Dynamic Programming problems in an easy manner.

1

Introduction

As stated in [2] Skeletal programming has revealed as an alternative and contributes to simplify programming, to enhance portability and to improve performance. Such systems hide the parallelism to the programmer and have been
characterized for been embedded entirely into a functional programming language or for integrating imperative code within a skeletal framework in a language or library. Some of these approaches can be seen at [4], [7], [3], [1], [6], [8],
[5], [2]. The underlying idea of separating the speciﬁcation of a problem, or an
algorithm, from implementation details that are hidden to the user is present in
all the proposals.
In [9] we presented a methodological proposal that allowed us to develop a
generic tool (DPSKEL) that supports a wide range of Dynamic Programming
formalizations for diﬀerent parallel paradigms. Parallelism is supplied to the
user in a transparent manner through a common sequential interface of C++
classes. The user provides the functional equation as a sequential C++ method.
DPSKEL has been developed and a release for shared memory architectures has
been validated using a set of tests problems representative of diﬀerent classes of
Dynamic Programming functional equations.
This work has been partially supported by the EC (FEDER) and the Spanish MEC
(Plan Nacional de I+D+I, TIN2005-09037-C02).
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 872–875, 2006.
c Springer-Verlag Berlin Heidelberg 2006

An XML Speciﬁcation for Automatic Parallel Dynamic Programming

873

We propose to introduce a new abstraction layer between the user and the
skeletons (DPSPEC from now on). This layer separates the fundamental logic
behind a problem speciﬁcation (the functional equation) from the speciﬁcs of
the particular middleware that implements it, the instantiation using DPSKEL.
This allows rapid developments and delivery of new applications. The beneﬁts
of the approach are signiﬁcant to scientists:
–
–
–
–

Reduced development time for new applications
Improved application quality
Increased use of parallel architectures by non expert users.
Rapid inclusion of emerging technology beneﬁts into their systems

We will show how this methodology can be applied without any loss of eﬃciency. The W3C recommendations have also been a requirement of the project.
The software architecture of our transformation tools is presented in table 1. The
paper has been structured as follows, we present in section 2 the XML speciﬁcation for DP (DPSPEC), and in section 3 the transformation between DPSPEC
and DPSKEL is stated. The paper ﬁnalizes with some concluding remarks and
future lines of work.
Table 1. Software architecture of the Dynamic Programming transformation tool
Mathematics Editor (Graphical)
MathML, OpenMath, etc.
Transformer to DPSPEC
DPSPEC
Transformer to DPSKEL
DPSKEL
OpenMP, MPI, OpenMP + MPI, etc.
Parallel Architecture

2

DPSPEC a XML Speciﬁcation for Dynamic
Programming Problems

Although some of the XML speciﬁcations already existing (MathML, OpenMath, OMDoc, XDF, ...) could be used to specify the DP functional equation,
we decided to develop our own speciﬁcation adapted to DP problems. The main
reasons for that decision were to reduce the elements to the minimum and to
introduce some changes in the structure on speciﬁc elements appearing in classical speciﬁcations. These design issues make easier the later parsing and allow a
better semantical analysis to detect data dependencies, while keeping as closer as
possible to the user deﬁned equation at the same time. The semantical analysis
determines the traversing mode of the DP table. DPSPEC brings together the
elements to describe piecewise deﬁned functions, simple variables and vectors,
arithmetic, logical, relational and max, min operators, and iterators. Table 2
summarizes elements available in the DPSPEC language.

874

I. Pel´
aez, F. Almeida, and D. Gonz´
alez
Table 2. Current elements available in DPSPEC
Element
Main element
Logical functions
Conditional
Relational operators
Binary mathematical operators
N-ary mathematical operators
N-ary iterative operators
States
Variables
Constants
User deﬁned functions
User deﬁned vectors

3

Operation
<problem>
<and>, <or>, <not>
<cond>
<lt>, <le>, <gt>, <ge>, <eq>, <ne>
<minus>, <divide>, <power>
<plus>, <times>, <max>, <min>
<imax>, <imin>
<state>
<ci>
<cn>
<functiondef>, <function>
<vectordef>, <vector>

Automatic Parallelization of Dynamic Programming
Problems

The automatic parallelization of Dynamic Programming problems is achieved
by making explicit transformations on the DPSPEC data ﬁle holding the Dynamic Programming equation. The XML description of the formula is converted
into a speciﬁc instantiation of the DPSKEL C++ skeleton to solve the problem considered. However, scientists typically represent the functional equation
as mathematics expressions, using their favorite equation editor (latex, OpenOfﬁce, etc.). Therefore, two transformations are implicitly involved in the process,
the conversion of the mathematical equation to the XML speciﬁcation and the
transformation of the XML equation speciﬁcation into the set of C++ classes.
The ﬁrst transformation step is currently provided automatically for many popular MathML software editors, which generate a MathML document for a given
equation. DPSPEC is compatible with MathML and the conversion between
a MathML document into a DPSPEC document is achieved through a XSLT
preprocessing step.
The second transformation step involves a deeper analysis of the functional
equation, we perform a DOM parsing of the XML functional equation to produce
the proper C++ required classes of DPSKEL, the parser has been developed
using the Xerces-C++ library.

4

Conclusions and Future Work

As a conclusions we can say that we have developed a XML speciﬁcation language to describe Dynamic Programming problems (DPSPEC). We present a
methodology that allows to generate automatically parallel applications. The
methodology is based in the existence of general parallel programs (DPSKEL)
that can be generated from the XML speciﬁcation. The code generated is eﬃcient

An XML Speciﬁcation for Automatic Parallel Dynamic Programming

875

since no overhead is introduced during the transformation steps. The technique
has been validated with a wide range of cases of study. Several extensions to DPSPEC are in the agenda. A natural extension to the language is to support new
data types. Once a XML speciﬁcation has been stated, transformations from/to
many other languages can be developed at a reasonably cost. We are also interested in the development of new transformation tools from other languages to
DPSPEC, that is the case for example OpenMath and from DPSPEC to other
languages such as WSDL to provide the interface for a web service application.
This work has been partially supported by the EC (FEDER) and the Spanish
MEC (Plan Nacional de I+D+I, TIN2005-09037-C02).

References
1. M. Aldinucci, S. Gorlatch, C. Lengauer, and S. Pelagatti. Towards parallel programming by transformation: The FAN skeleton framework. Parallel Algorithms
and Applications, 16(2–3):87–122, 2001.
2. Murray Cole. Bringing skeletons out of the closet: a pragmatic manifesto for skeletal
parallel programming. Parallel Comput., 30(3):389–406, 2004.
3. Marco Danelutto and Massimiliano Stigliani. Skelib: Parallel programming with
skeletons in c. In Euro-Par ’00: Proceedings from the 6th International Euro-Par
Conference on Parallel Processing, pages 1175–1184, London, UK, 2000. SpringerVerlag.
4. John Darlington, A. J. Field, Peter G. Harrison, Paul H. J. Kelly, D. W. N. Sharp,
and Q. Wu. Parallel programming using skeleton functions. In PARLE ’93: Proceedings of the 5th International PARLE Conference on Parallel Architectures and
Languages Europe, pages 146–160, London, UK, 1993. Springer-Verlag.
5. A. J. Dorta, J. A. Gonz´
alez, C. Rodr´ıguez, and F. de Sande. llc: A parallel skeletal
language. Parallel Processing Letters, 13(3):437–448, 2003.
6. E. Alba et al. MALLBA: A library of skeletons for combinatorial optimisation (research note). In Proceedings of the 8th International Euro-Par Conference, volume
2400 of LNCS, pages 927–932, 2002.
7. Daniel Gonz´
alez-Morales, Francisco Almeida, F. Garcia, J. Gonzalez, Jose; L. Roda,
and Casiano Rodr´ıguez. A skeleton for parallel dynamic programming. In Euro-Par
’99: Proceedings of the 5th International Euro-Par Conference on Parallel Processing, pages 877–887, London, UK, 1999. Springer-Verlag.
8. Herbert Kuchen. A skeleton library. In Euro-Par’02: Proceedings of the 8th EuroPar Conference on Parallel Processing, pages 620–629, London, UK, 2002. SpringerVerlag.
9. Ignacio Pel´
aez, Francisco Almeida, and Daniel Gonz´
alez. High level parallel skeletons for dynamic programming. Parallel Processing Letters, To appear, 2006.

