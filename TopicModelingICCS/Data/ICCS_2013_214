Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2223 – 2232

2013 International Conference on Computational Science

Interactive workflow-based infrastructure for urgent computing
Konstantin V. Knyazkov a,*, Denis A. Nasonov a, Timofey N. Tchurov a,
Alexander V. Boukhanovsky a
a

National Research University of Information Technologies, Mechanics and Optics, Birzhevaya line 4, 199034 Saint-Petersburg, Russia

Abstract
Workflow became a mainstream formalism for complex scientific problems representation and is applied to different
domains. In this paper we propose and analyze the interactive workflow model as the base for urgent computing (UC)
infrastructures. Majority of research works in the area of urgent computing is focused on the deadline-driven scheduling
issues for the existing high performance computing. This work tries to look at the problem of building a workflow-driven
UC infrastructure from another side and to take into account the interactive nature of decision support. Workflow formalism
is taken as the base for investigation. After analyzing the peculiarities of workflow-based UC infrastructure we propose an
extended interactive workflow model. This model unifies the interactive capabilities of workflows and allows interactive
systems to be described by consolidation of heterogeneous resources: high performance computing, users, software,
external devices and data sources. This approach is represented on the crowd management application and is partially
shown in the implemented prototype.
The Authors.
Authors. Published
Published by
by Elsevier
Elsevier B.V.
B.V. Open access under CC BY-NC-ND license.
© 20133 The
Selection and
and/or
under
responsibility
of the
organizers
of 2013
the 2013
International
Conference
on Computational
Selection
peerpeer-review
review under
responsibility
of the
organizers
of the
International
Conference
on Computational
Science
Science
Keywords: urgent computing; workflow management system; interactive workflow; computational steering

1. Introduction
Urgent computing (UC) is a quite new approach to solve tasks, related to high performance
computing (HPC) and targeted on decision support in any kind of emergency situations with severe time
limitations. Application areas of urgent computing [1] include weather and natural disaster prediction, space,
health care. UC is a complex area which includes methodological approaches (collaborative decision
support [2], human interaction arrangement) and technical aspects (HPC resource utilization, execution
planning of deadline-driven tasks). The SPRUCE infrastructure [3] has been developed to meet the UC-specific

* Corresponding author. Tel.: +7-812-337-6490
E-mail address: constantinvk@gmail.com.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.393

2224

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

domain requirements. The infrastructure is focused on the UC support by the existent HPC resources and
proposes organizational and methodological approaches. The deadline-driven resource allocation was studied
presented several methods of planning in time limited conditions.
by several research groups [4, 5]. They
These works concern only the
importance of interactive applications in UC is shown by several researches. The problem of decision support
in early warning system is studied in the paper [6]. The approach based on integration of
tools
computer simulations and interactive tools allowed the advanced data analysis methods to be used in the
work [7]. The interactive nature of the collaborative decision support is based on remote experts involvement
which was discussed in the paper [2].
Workflow (WF) became the mainstream model in e-Science for consolidation of heterogeneous
computational, human and hardware resources within the scientific research [8]. Nevertheless, the large part of
workflow management systems (WMS) use workflow models which are based on the principle of batch
execution. However, they cannot provide the appropriate level of reactivity for interactive systems required by
the UC domain. At the same time the workflow models with interactive capabilities are gaining popularity. For
instance, data streaming for medical applications in Grid is introduced in the publication [9]. WMS WS-VLAM
allows workflow modules to communicate through ports [10]. The work [11] presents the research on WMS
built according to Service Oriented Architecture for interactive soft real-time tasks.
This paper proposes the approach of building urgent computing infrastructures based on the interactive
principles which adequately comply with the nature of observable natural phenomenon. Another goal of the
work is to find a way of building urgent computing systems using the popular workflow formalism.
2. Backgrounds: aspects and requirements of workflow-based urgent computing infrastructure
In the paper [3] the authors propose general design requirements for UC infrastructure. Below we propose
the extended list of requirements to UC infrastructures based on the workflow formalism. The requirements
listed below are associated with the activities depicted in the figure 1. Activities relate to deployment and
.

Fig. 1. Activities within an urgent computing infrastructure

Collaboration on decision making (P1). Decision-making process usually involves groups of experts with
different specialization. An urgent computation environment should provide interaction support tools for the
members of the decision-making team in the structured formal way.

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

System sustainability and fault tolerance (P2). Sustainability includes a long time system running without
interruptions and successful task execution under the condition of high system load. Fault tolerance guarantees
to save operability in the case of a system module failure.
Limited resources (P3). If a resource intensive computation requires additional power, it is important to
provide immediate access to third-party resources which might not be integrated to the system. The same
assumption applies to the new software support. When urgent WF is already running, it can be especially
critical to make some parallel computations with the use of new resources and software (e.g., in order to verify
the hypothesis or to increase the result accuracy).
Reliable resource provisioning (P4). Under the conditions of uncertainty, due to stochastic behavior of the
environment to provide better resource utilization, the advanced scheduling techniques are required along with
the estimations based on the retrospective statistical data and integrated application's performance models.
Orientation on human-computer interaction (P5). All components of the user interfaces (UI) have to provide
fast response without unexpected delays. Furthermore, emergency puts strong restrictions on decision-making
time. In this case it's tremendously important to have simulation result not at the end of computation, but as
soon as a new actual data in computation emerges at runtime. For instance, in the case of iterative modeling an
expert can make an assumption already during calculation and restart the simulation with corrected parameters,
saving extra time. Computational steering technology is highly important for UC, because it involves the user
as an active participant of the system and allows the user to change problem statement at runtime. That leads to
reduction of the system
Advanced user management facilities (P6). Well-structured organization of the processes inside the UC
infrastructure leads to time saving, an order and minimization of errors. UC infrastructure should comply with
organizational structure and allow administrator to differentiate access rights. Additional point is the user
policy which provides rights and priorities to possible actions within urgent session.
Effectiveness (P7). Deadline-driven computations make demands to the whole infrastructure effectiveness.
Connection of external devices (P8). UC may require several types of external devices which are useful for
the system operation: data sensors, control panels, alarm panels.
UC infrastructure should meet the presented requirements in order to provide decision-making support
functionality with a high level of sustainability and rich human-computer interaction capabilities.
3. Methods: interactive workflows
some of the requirements presented in the section 2 because of the lack of
Batch WMS
port human interaction mechanisms except for inputs
interactive capabilities. Originally
parameters definition. Devices, which operate in real-time, cannot be included into traditional WF (under realtime here and further we mean soft real-time). In traditional workflows the decision support process
depends on the results which can be obtained only after the computation is finished. At the same time
interactive data acquisition might strongly improve decision support. Thereby we decided to move to the
enhanced interactive workflow model.
3.1. Principles
To fulfill all the urgent computing requirements we propose the following four abstract principles as an
extension to conventional workflows.
1. Blocks and workflows can be long-running. Tasks and whole workflows can run for infinitely long time.
2. Management mechanisms for long-running blocks should be provided. To control such blocks and their
lifecycle a new type of control mechanisms should be presented.
3. Blocks can communicate at runtime with each other and with an external environment.

2225

2226

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

4.

Capability
The launched workflow is not a static structure: it can
be extended by the WF scenario or by some block logic.
Further we will name the workflow which implements these four principles interactive workflow (IWF).
3.2. Block model
Block is the basic element of a WF. By the workflow block we understand a piece of software which is
executed on computational resource. Block has an interface containing input and output parameters at the
workflow level. After the problem statement is specified (inputs are defined), the execution system schedules
and launches the block on the target resource. The following elements of interactive environment can be
represented as blocks: computer modeling software (e.g. Octave, Python, Weka); data sources (e.g. sensors,
web-services, databases); user interface and its elements (e.g. buttons, frames, editors); human computer
interaction devices (e.g. alarm panels); controlled objects (e.g. valves, gates); active interactive workflows.
Communication between blocks means that blocks can transfer data between each other. As the basic
abstraction for communication we choose the client-server model. Client depends on server and should know
all the required information for establishing the connection. One connection is made between client and server
ports which are characterized by the protocol. The protocol should match one connection.
Modern software already supports interactive capabilities provided by the operating systems: file streams,
pipes, and network communications. These features can be used within workflow execution. For instance:
video and audio processing software can form pipeline workflows; software logs can be delivered to the user in
real time. However, all the diversity of existing communication capabilities of legacy software cannot be
two generic communication ways: communication over the network and
data streaming. Communication over the network is characterized by the protocol. For instance, the distributed
client-server application connected over the protocol TCP can be set up by specification of the port number for
. Streaming provides the capability of
server and configuration
routing the data streams used by the software (files, pipes) over the network.
The next chosen type of communication is based on reactive programming paradigm oriented around data
flows and the propagation of change. This paradigm can be implemented by addition of the new
communication type runtime parameters. Parameters of this type change value at runtime. Connections can
be made between output and input parameters. When the output value changes, the modification propagates to
all the inputs connected with it.
The event-driven nature of UC is represented in the blocks management mechanism within the workflow.
Block has a set of supported commands and a set of events. System commands are responsible for blocks
lifecycle control (start, stop). System events correspond to
e changes (created, run, stopped, and
failed). Events and commands which were defined by the user can be introduced during embedding.
WF structure can be changed at runtime according to the fourth principle. This may be initiated by the block
in the case when it needs to run additional processing blocks involving extra computational resources. This can
be performed in a batch mode (to receive output results) or in interactive mode (to fetch real-time data).
All the interaction capabilities of the block are depicted in the fig. 2(a).
3.3. Workflow model
processing modules and
The interactive workflow model like a traditional one consists of blocks
dependencies between them. Dependencies of interactive WF are divided into three types: control flow, data
flow and communication dependencies. Control flow dependency of IWF acquires the event-driven features to
respond interactive requirements. Control flow dependencies match event subscriptions which represent the
conditions of command execution. Traditional control elements of workflows, such as conditions (if),

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

loops (for), forks and joins remain to regulate the control flow. Communication dependency which is described
above acquires the major role in IWF. Sample abstract interactive WF is presented in the figure 2(b).
Workflow has a composite structure and can contain nested workflows as blocks. Therefore, workflow has a
inputs and outputs, ports, commands and events.
program interface which is the same as a

Fig. 2. (a) interactive block with its interface; (b) sample interactive workflow

4. Implementation
4.1. Workflow execution and scheduling
Implementation of the IWF principles affects the model of workflow block by adding methods of
interaction. However, from the execution system perspective the interactive block remains batch and inherits all
the associated mechanisms: configuration, data stage-in, invocation, data stage-out. This allows using of
existent batch-oriented infrastructures to execute interactive blocks.
The general peculiarity of interactive workflow execution process in comparison to traditional workflow is
is ready to run only when all of its communication
the
connections can be established, i.e. parent blocks are already running and their endpoint addresses are known.
Information about target endpoints is transferred to the block during configuration procedure.
Resource allocation service should ensure that connection is possible between resources where dependant
block and its target will be executed. Furthermore, within the scheduling process it is important to take into
account the additional factors: the probability of communication losses and connection bandwidth.
4.2. User interface
Event-driven programming is widely used in graphical user interfaces because of interactive nature of this
approach. By using the proposed event-based mechanism, UI control elements, such as buttons or text edits,
can be represented in a system as blocks which have input and output ports and can generate events. Data
nput
binding technology can be implemented using the proposed reactive programming approach.
parameters can be bound to corresponding UI elements and all the changes done by the user will affect inputs
of the block. Output parameters can be represented in UI as read-only elements. Representation depends on the
a text label, time graph, progress bar,
type and designer
etc. Depending on a type, file can be shown as a text area for text files, image box for pictures, etc. It is very
important to have an ability to add representation modules for nonstandard data types. By using the listed
technologies the designer can develop interactive programs with user interface.

2227

2228

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

The special type of UI is generic UI. Visual construction environments for traditional workflows allow to
compose workflows using different blocks from the toolbox. Generic UI adds the capability to construct the
user interface using inputs and outputs of blocks as tools. Generic UI can be used for interactive debug and the
user can observe and steer any port he wants in real time. The main difference with general UI described above
is that the user adds elements and makes data links with data sources interactively. The layout created with
generic UI could be exported for future automatic UI generation.
4.3. Interactive workflow design patterns
To demonstrate the proposed approach the implementations of interactive design patterns are shown in terms
of the IWF model below. Graphical representation is depicted in the figure 3 under corresponding letters.

Fig. 3. Demonstration of interactive patterns

Computing and visualization separation (A). The reactive programming paradigm allows establishing
connection. This feature can be used to connect visualization applications with modeling process.
toThe advantage of this approach is the simultaneous use of several visualization applications.
Computational steering (B). Computational steering allows the user to change the problem statement for the
modeling process at runtime without restarting and to see the results immediately. This feature can be
implemented using reactive programming ports or block command interface. It should be mentioned that under
the modeling process in the figure there may be a nested interactive workflow.
Automatic scaling (C). When network, computational or other resources are limited and load of the
interactive system changes in time, it is important to have the balancing mechanism to control the effectiveness
of resource usage. For this purpose the following scheme can be implemented. Master block controls total
amount of work and distributes it to slave blocks. When the load crosses a certain threshold, the master starts a
new slave on a new resource. When the load reduces sufficiently, the master can kill the excess slave.
Process runtime validation (D). Unification of parameters and their types allows automatic monitoring of
output values. This could be useful in the following cases: validat
about faults; observation of the dynamics of outputs changes can be applied for convergence control (e.g. if
computation diverges it may be stopped).
Process observation (E). Previous pattern can be used by the user through interface.
Pipelining (F). Data streaming allows creation of data processing pipelines by connecting stream ports.
Event trigger (G). Event generated by the block may be connected to supported command of another block.
Moreover, event can be linked to the block creation function and will lead to new block creation.

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

2229

4.4. The CLAVIRE platform
To evaluate the proposed approach we have implemented the IWF principles in the CLAVIRE platform
which is an example of traditional workflow management system [12]. CLAVIRE platform is focused on the
use of existing software without its modification (legacy software) and CLAVIRE provides a user with
convenient block and WF description domain-specific capabilities. Firstly, the user embeds the software
needed within WF by describing it using domain-specific language or special tools. Along with general
information and information about inputs and outputs the description contains execution parameters including
parametric performance model. The model helps execution system to make predictions on calculation time for
the specific problem statement [13]. After blocks are ready, the WF can be composed using a special language.
The platform allows connecting HPC resources of different types: Grids, IaaS clouds, batch-queue controlled
clusters, single machines.
The prototype of interactive workflow execution system together with the demonstration application was
developed within the CLAVIRE platform.
4.5. Workflow execution system modification
To implement four basic principles the following system modifications were made:
Block description language was extended by input and output port description capabilities. User can define
ports, supported commands and events for software.
Workflow description language was extended by port connection capabilities. Connection can be declared
according to reactive programming paradigm with a
Communication dependencies were introduced in the workflow management service.
Implemented communication environment using ZeroMQ and BSON technologies. All the interactive
capabilities are provided to block in a program library.
Interactive block configuration mechanism was defined. Configuration for interactive blocks is transferred
using text files with specific format.
Interactive capabilities are available for blocks by using the special program library. To transmit data
between blocks and to provide an interactive control flow we choose ZeroMQ communication technology,
which is based on the message passing principle. Reactive programming was implemented as one-to-many
PUB/SUB template: all the changes of output values go as notifications to subscribed input values. Commands
5. Experimental study: crowd management
5.1. Use case
Nowadays in the boundaries of the city it is especially crucial to prevent critical situations in the case of
unexpected panic in the crowd. The important aspect of unexpected situations on the crowded events is urgency
and lack of time for decision making. In the figure 4, as an example, an UC system presents our view on how
IWF concept can be used to support organization of such events. This scheme also demonstrates applicability
of the patterns from the section 4.3.
The main scenario consists of two parts: event negotiation (WF#1) and coordination (all WFs). The process
starts from the social event entry to the local municipal authority. It usually contains common formal
information, such as event cause, location and number of participants. According to this information, along
with additional details provided by municipal authority the social group profile (SGP) is created. SGP is used
to start WF#1 and for crawling through the internet social networks to find a network graph that represents

2230

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

expected social group. The "Social Network Crawler" block implements a "computation steering" pattern to
provide the user with capability to change the crawling search criteria. It's very useful in the case when
additional information should be provided during already started crawling. In addition the crawler implements
an "automatic scaling" pattern to manage all crawling bots from the master node. In the next step, WF block
"Complex Network Modeling" runs in multiple instances with a sweep of statistical parameters based on the
characteristics of the found graph. The result of generated social network graphs (SNG) is translated to
"Information Excluding Modeling" and "Information Spreading Modeling" WF blocks, which exclude the
nodes from the SNG according to selected strategies and then spread information over the modified SNG.
Output data passes to "Crowd Modeling" (CM) interactive WF block. Due to the fact that CM input parameters
should take their value from a set of the possible values to analyze all potential situations distinctive
mechanism based on the patterns of "modeling and visualization", "process observation" and "computation
steering" is suggested. This allows the experts to divide concurrent runs of CM between each other and to focus
their management only on local groups of modeling instances. On the other hand, they can observe all the
modeling results through the macro parameters. In the figure 4 the design of "Crowd Control" GUI for experts
is demonstrated. In our case only overall system characteristics based on a collected public data are taken into
consideration (number of expected attendants, size of the crowd and distribution of people). That complies with
a personal privacy.

Fig. 4. Scheme of interactive crowd management application

The "Crowd Modeling" takes the location, number of participants, participant profile as the input
parameters and generates a pressing map with cumulative numerical characteristic (CNC). During decision
making ("Crowd Control", "Crowd Visualization") this characteristic is the main indicator which/to allow the
staging of the event. If the requested parameters of the event don't comply with safety requirement, the
alternatives for initiators are suggested (e.g. another location or other date).
The common idea of coordination is based on the condition of "safe event" which means that the size of
crowd is allowed to grow until there is at least one case of safe situation predicted by modeling. During the
staging of the event crowd modeling is also used, but a part of the variable parameters is fixed, e.g. location
can't be changed already. In addition, new WF#2 is involved. Concurrently running interactive blocks "Security

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

Cordon Analysis"(SCA) and "Crowd Image Analysis"(CIA) become the main source of information that helps
decision making. SCA provides the information from security posts. CIA extracts data from pictures made over
the event by flying machine or stationary cameras. These block use "pipelining" pattern to observe the situation
through the streaming video and provided data. To check an assumption an expert can quickly create a new WF
(WF#3) by using hot deploy of software and computational resources.
5.2. Experiment
The part of application presented in the section 5.1 was implemented and successfully tested on the
prototype. To create the demonstration example we took the computational model of crowd panic described
in [14]. The model allows to perform the experiments with different scenarios. The example of crowd escape
time profile for four scenarios is depicted in the figure 5(a). Scenarios differ by the obstacles map, therefore,
escaping time differs. Minimization of escaping time can be a global parameter for optimization. In the figure
we can see that the first case is the best and the fourth is the worst.

Fig. 5. (a) crowd escaping time profiles for different scenarios, (b) latency graph for constantly growing size of crowd

Before embedding to the CLAVIRE the application contained both modeling and visualization functions. By
using the interactive library we separated the modeling and visualization parts into two blocks. Visualization
block became an interactive UI which fetches the data from modeling block. In the modeling block we
introduced the output runtime parameter which provides information about agents' position. The parameter
changes its value at each modeling step. This approach allowed us to provide the simultaneous work of several
visualization blocks connected to one modeling block. Command interface was tested by introducing another
new block a generator which re-initializes the agent positions and a map at each time interval.
In the framework of the experiment we got the mean value of latency about 70 ms for the crowd size 30000
(message size ~ 600 Kb, network bandwidth is 100 Mb/s, 2 visualization blocks). Communication environment
has showed the performance which is sufficient for the development of human interaction applications.
Fig. 5(b) demonstrates the change of latency depending on a message size between modeling and visualizing
blocks. In this experiment the size of crowd increases from 5000 to 50000 constantly by 5000. Peaks match the
re-initialization of modeling process and lead to a small lag. At the same time the average overhead of batch
execution on the CLAVIRE took about 5 sec. (not taking into consideration the model initialization time). The
interactive application allowed the user to carry out several experiments in one session without restarting.

2231

2232

Konstantin V. Knyazkov et al. / Procedia Computer Science 18 (2013) 2223 – 2232

6. Conclusion
In this work we presented our view on the aspects of UC infrastructure which is more focused on interactive
capabilities and may complement the traditional view. The described interactive workflow model unifies the
interactive capabilities of UC environment within the blocks and workflows. This allows building of complex
distributed systems on high level of abstraction work in soft real-time mode. Using the proposed model we
demonstrated the representation of several patterns related to interactive systems. The interactive WF model
was applied to design a complex UC infrastructure for crowd management which remains the subject of further
research. At this time evaluation of the implemented solution showed feasibility of the proposed approach.
Acknowledgements
This research was supported by the project granted from Decree 220 (urgent computing) of the Russian
Federation Government.
References
[1]
[2] Sergey V. Ivanov, Sergey S. Kosukhin, Anna V. Kaluzhnaya, Alexander V. Boukhanovsky, Simulation-based collaborative decision
support for surge floods prevention in St. Petersburg, Journal of Computational Science, vol. 3, Issue 6, 2012, pp. 450-455.
[3] Beckman P., Nadella S., Trebon N., Beschastnikh I. SPRUCE: A System for Supporting Urgent High-Performance Computing. In IFIP
International Federation for Information Processing, vol. 239, Grid-based Problem Solving Environments, pp 295-311.
[4]
Chicago, August 2011, 117 p.
[5] M. Malawski, G. Juve, E. Deelman, J. Nabrzyski "Cost- and Deadline-Constrained Provisioning for Scientific Workflow Ensembles in
IaaS Clouds" SC '12 Proceedings of the International Conference on High Performance Computing, Networking, Storage and
Analysis, Article No. 22, 2012, 11 p.
[6] V.V. Krzhizhanovskaya, G.S. Shirshov, N.B. Melnikova, R.G. Belleman, F.I. Rusadi, B.J. Broekhuijsen, B.P. Gouldby, J. Lhomme, B.
Balis, M. Bubak, A.L. Pyayt, I.I. Mokhov, A.V. Ozhigin, B. Lang, R.J. Meijer, Flood early warning system: design, implementation
and computational modules, Procedia Computer Science, Volume 4, 2011, Pages 106-115.
[7] Atkins, K., Barrett, C. L., Beckman, R., Bisset, K., Chen, J., Eubank, S., Feng, A., Feng, Z., Harris, S. D., Lewis, B., Anil Kuman, V.
S., Marathe, M. V., Marathe, A., Mortveit, H., Stretz, P. An Interaction Based Composable Architecture for Building Scalable Models
of Large Social, Biological, Information and Technical Systems. CTWatch Quarterly, vol. 4, n. 1, March 2008.
[8] J. Yu, R. Buyya "A Taxonomy of Workflow Management Systems for Grid Computing", Journal of Grid Computing, 2005, vol. 3, n. 34, pp. 171-200.
[9] S. Koulouzis, E. Zudilova-Seinstra, A. Belloum, Data transport between visualization web services for medical image analysis,
Procedia Computer Science, Volume 1, Issue 1, May 2010, pp. 1727-1736.
[10] V. Korkhov, D. Vasyunin, A. Wibisono, V. Guevara-Masis, A. Belloum, Cees de Laat, P. Adriaans, and L.O. Hertzberger. 2007. WSVLAM: towards a scalable workflow system on the grid. In Proceedings of the 2nd workshop on Workflows in support of large-scale
science (WORKS '07). ACM, New York, NY, USA, pp. 63-68.
[11] Gogouvitis S., Konstanteli K., Waldschmidt S., Kousiouris G., Katsaros G., Menychtas A., Kyriazis D., Varvarigou T. Workflow
management for soft real-time interactive applications in virtualized environments. Future Generation Computer Systems, vol. 28,
Issue 1, 2012, pp. 193-209.
-Science Infrastructure for Data[12]
-510.
[13] S. Kovalchuk, A. Larchenko, A. Boukh
Knowledge Engineering and Management, Advances in Intelligent and Soft Computing, vol. 123, 2012, pp. 121-128.
[14] A. Mordvintsev; V.V. Krzhizhanovskaya; M.H. Lees and P.M.A. Sloot: Simulation of City Evacuation Coupled to Flood Dynamics, in
Proceedings of the 6th International Conference on Pedestrian and Evacuation Dynamics, 6th International Conference on Pedestrian

