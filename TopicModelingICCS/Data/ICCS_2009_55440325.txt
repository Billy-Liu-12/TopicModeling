Unrestored Flow Optimization in Survivable
Networks Based on p-Cycles
Adam Smutnicki
Chair of Systems and Computer Networks,
Wroclaw University of Technology,
Wybrzeze Wyspianskiego 27, 50-370 Wroclaw, Poland
adam.smutnicki@pwr.wroc.pl

Abstract. This paper deals with Unrestorable Flow Optimisation
(UFO) problem in networks protected by p-cycles. This novel protection technique is used as the eﬃcient tool for ensuring survivability of
computer networks. In this paper there have been formulated mathematical model of UFO problem, discussed its theoretical properties, and
proposed the original solution algorithm based chieﬂy on metaheuristics. The algorithm combines k-shortest paths method, multi knapsack
problem, p-cycles generator, linear programming and some local search
procedures.
Keywords: computer network, survivability, optimisation, p-cycles,
UFO problem.

1

Introduction

Survivability of computer networks and systems is located among the most important subjects in modern computer engineering and science. This research
topic embraces the wide spectrum of particular technological and theoretical
problems derived from computer architecture area, network topology, communication protocols, transmission, coding, cryptography, etc. The topology of the
computer network has crucial meaning for its survivability, since physical creation of the net links is much more time-consuming and troublesome than producing a new (or spare) device, furthermore faults of network links and nodes
are still the common problem. The idea of usage p-cycles is quite new, but have
been widely developed among recent years. p-Cycles are very favorable in comparison with traditional ring or mesh topologies. In this paper, we present and
discussed the new optimization problem, generated by the concept of network
protection by using p-cycles, where the criteria is not a cost, but the level of
restorability ensured by using currently available net resources.
This paper is organized as follows. Section 2 provides brief introduction into
p-cycles idea. Section 3 describes, in detail, new problem of unrestorable ﬂow
optimization, called hereinafter the UFO problem. Section 4 discusses some its
properties and solution methods. Conclusions one can ﬁnd in Section 5. Because
of the strong NP-hardness of UFO problem, this paper introduces basically the
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 325–334, 2009.
c Springer-Verlag Berlin Heidelberg 2009

326

A. Smutnicki

mathematical model, then discusses its essential properties including layer decomposition and computational complexity and, at the end, provides a wide
spectrum of solution methods. Particular algorithms, as well as experimental
results based on standard benchmarks are shown in separate our paper [1].

2

Background of p-Cycles

Traditionally, the most popular solution for providing restorability in computer
networks was to use either ring or mesh topology. Ring oﬀers short restoration
time as well as simple restoration scheme, however its design and operation is
rather complex and the usage of total transport bandwidth is ineﬃcient. Mesh
is easy to design, optimize and operate, but have greater than ring restoration
time. Mesh networks don’t require as much spare capacity as rings, because in
the restoration process capacity demand can be split between diﬀerent links. On
the other hand, rings are so eﬃcient in the restoration process because there
are no need to search for restoration path. Obviously, there is a great need to
ﬁnd topology, which aggregates all advantageous properties of mesh and ring
networks. This idea was fully realized in the concept of p-cycles, that means
“fast as ring”, “eﬃcient as mesh”, preconﬁgurable and protected.
In normal non-failure state, routing for ﬂow demands between pairs of nodes,
is done using one of many routing techniques. Set of p-cycles is formed in advance
while conﬁguring network, to be ready to use in case of any failure and perform
real-time recovery. p-Cycles are not an ordinary cycles. Let us consider a mesh
network and choose some cycle (Fig. 1 a). In classical cycle protection approach,
this cycle protects all spans being “on-cycle”. In the paper [2] it is shown that
cycle established on mesh network protects also “straddling spans”, i.e. spans
between cycle nodes, but not belonging to the cycle (Fig. 1 b). Observe, that
in case of failure of “straddling span” the arc of cycle can be used to transfer
whole ﬂow from this failed span. This property allows one to extend protection
provided by p-cycles on straddling spans as well. Fig. 1 c shows which spans
cannot be protected using this properties.
In case of failure of “on cycle” span, there is one path which can be used to transfer ﬂow (Fig. 2 a). But for failure of “straddling span” there are two diﬀerent paths,
which can be used for recovery process. Arc of the cycle can be used as a path, or
both arcs to achieve lower load on links (Fig. 2 b and c). Because without using
any additional links and spare capacity we achieve much higher level of protection, protected are not only cycle spans but also “straddling spans”. “Straddling
spans” have twice the leverage of an on-cycle span in terms of eﬃciency because
when they fail, the cycle itself remains intact and can thereby oﬀer two protection
paths for each of unit of protection capacity. This spans are not limited to be inside
a cycle, each span between two nodes of the cycle is protected by this idea.
Notice, we do not need any additional spare capacity to protect “straddling
spans”, because the spare capacity from ring spans is used to protect those spans.
This means that we can protect much more spans and link capacity using the
same amount of spare capacity as in the ring model. Thus, under the some costs,
we can achieve higher level of network survivability.

Unrestored Flow Optimization in Survivable Networks Based on p-Cycles

(a)

(b)

327

(c)

Fig. 1. p-Cycles in the mesh network

(a)

(b)

(c)

Fig. 2. p-Cycles protection schemes for various types of failure

3

The UFO Problem

In the literature, most papers dealing with survivable networks concentrate on
ensuring 100% survivability. But only few authors have considered (not only
mentioned) problem, where 100% of restorability may not be achievable. For
networks protected by p-cycles, in [3] there has been proposed problem in which
the level of restorability is maximized, assuming ﬁxed amount of spare capacity.
Another paper [4] mentions about diﬀerent idea — minimization of
unrestorable ﬂow in the network with ﬁxed capacities, where no additional capacity is necessary, since restoration is done within available spare capacity, left
after optimization of all ﬂow demands. This problem, called by us Unrestorable
Flow Optimisation (UFO), will be studied extensively in our paper. Below, we
deﬁne it formally as follows. (Notation based on [5] and [6] will be used.)
We have given: network topology, link capacities, traﬃc demand matrix, candidate paths for demands, p-cycles conﬁguration. Optimization over working
ﬂows in normal non-failure state of the network is done, for protection in the
case of single link failure. The objective is to minimize the unrestored ﬂow, i.e.
ﬂow that due to limited link capacity cannot be restored using p-cycles.
Indices
e, l = 1, . . . , E network links (spans)
d = 1, . . . , D demands

328

A. Smutnicki

p = 1, . . . , Pd candidate paths for ﬂows realizing demand d
q = 1, . . . , Q p-cycles
s = 1, . . . , S failure states
Constants
D
set of all demands
E
set of all spans
Q
set of all p-cycles
Qe ∈ Q set of p-cycles which can be used for restoration span e
De ∈ D set of demands using span e
δedp
= 1, if link e belongs to path p realizing demand d; 0 otherwise
— volume of demand d
hd
ce
— capacity of link e
βeq
= 1, if link e belongs to p-cycle q; 0 otherwise
= 1, if p-cycle q can be used for restoration of link e; 0 otherwise i.e.
eq
link e either belongs to p-cycle q or is a straddling span of q
— coeﬃcient of restoration paths provided for failed link e by an
γeq
instance of p-cycle q (= 1 for an on-cycle link; = 0.5 for a straddling
span; = 0 otherwise)
Variables
xdp = 1 if demand d uses path p; 0 otherwise (binary)
fe — load of link e associated with working demands
ydeq = 1 if demand d uses path p-cycle q for restoration in the case of failure
of link e; 0 otherwise
zde = 1 if demand d is not restored in the case of failure of link e; 0 otherwise
gel — load of link e associated with p-cycle in the case of failure of link l
Overall optimization criteria function is:
min U (y, z; x, Q) = min
y,z

y,z

zde hd ,
e

(1)

d

with constraints:
zde +

eq ydeq

= Ade , e = 1, . . . , E, d = 1, . . . , D

(2)

q

gel =

Beldq ydlq , e = 1, . . . , E, l = 1, . . . , E
d

(3)

q

gel ≤ se ,

e = 1, . . . , E,

l = 1, . . . , E,

(4)

where Ade , Beldq , are constants used to make equations more clear for ﬁxed x:
fe =

δedp xdp hd ,
d

Ade =

δedp xdp ,
p

e = 1, . . . , E,

(5)

p

e = 1, . . . , E,

d = 1, . . . , D,

(6)

Unrestored Flow Optimization in Survivable Networks Based on p-Cycles

Beldq =

δldp xdp βeq γlq hd ,

329

e = 1, . . . , E,

p

l = 1, . . . , E,

d = 1, . . . , D,

q = 1, . . . , Q,

(7)

and:
se = ce − f e ,

e = 1, . . . , E.

(8)

Auxiliary variable se , deﬁned in (8) and used in constraint (4), will be called
residual spare capacity, left after fulﬁlling all traﬃc demands from set D transfered over paths determined by x. Auxiliary constant Ade takes only binary
values, Ade ∈ {0, 1}, which means that either there is no possibility to restore
demand d in case of failure of span e (then zde = 1 and all ydeq = 0, q = 1, . . . , Q)
or there exists possibility of restoring d in case of failure of span e using one chosen p-cycle q (then ydeq = 1 and zde = 0). The formulated optimization problem
is a Mixed Integer Linear Programming (MILP) task. However, because of the
problem size, and well-known weakness of the general MILP solution methods,
we give up MILP techniques and transform the problem into new one.
Using equation (2) in (1) and substituting equation (3) into inequality (4),
the problem receives the following form:
min U (y, z; x, Q) = min
y,z

y

(Ade −
e

Ade hd − max

=
e

y

d

eq ydeq )hd
q

d

eq hd ydeq ,
e

d

Bledq ydeq ≤ sl , e = 1, . . . , E, l = 1, . . . , E.
d

(9)

q

(10)

q

In these equations index e stands for span being damaged; when another index
l is used also for spans, it refers to other span which has been inﬂuenced by
damaged span e.
First element in equation (9) is constant and does not have any inﬂuence on
the form of optimal solution, but only on its value. Problem (9) described by
second element with constraint (10), can be solved by a sequence of problems
known in literature as Knapsack Problem (KP) or Multiple Knapsack Problem
(MKP). Constraint (10) determines whether there is a need to consider KP either
or MKP case. Transformation of (9) – (10) into MKP is shown below.
Consider right side of equation (9) for ﬁxed span e in a form:
max
y

d

Cedq ydeq ,

(11)

eq hd ,

(12)

q

where:
Cedq =
with constraints:
Bledq ydeq ≤ sl ,
d

q

l = 1, . . . , E.

(13)

330

A. Smutnicki

For ﬁxed e, exists d×q binary decision variables ydeq . So the criteria function (11)
corresponds to optimal packing Q knapsacks with elements 1, 2, . . . , D. In order
to match constraint (13) with constraints from MKP [7], the new notion rq will be
used, called hereafter residual capacity of p-cycle q. Value rq stands for maximum
ﬂow which can be added to all spans in p-cycle q, without exceeding residual
capacity of the spans. Calculation of p-cycle residual capacities is a complex
problem – we will discussed it, in detail, in Section 4.3. For further considerations,
we assume that capacity of p-cycle meet constraint rq > 0 and:
sl =

βlq rq .

(14)

q

Substituting (14) in constraint (13) one can obtain:
Bledq ydeq ≤
d

βlq rq ,

q

l = 1, . . . , E.

(15)

q

Condition (15) is then transformed into sequence of Q × E conditions in the
following form:
Bledq ydeq ≤ βlq rq , q = 1, . . . , Q, l = 1, . . . , E,

(16)

d

what makes stronger constraint that original (15). Summing inequalities (16) by
sides for each l (this is relaxation) inequality (13) will be received. Observe in
deﬁnition (7) that value Bledq does not depend on l, so:
∗
=
Bledq = Bedq

δedp xdp γeq hd ,

(17)

p

because (16) is fulﬁlled obviously for βlq = 0, while this condition have to be
fulﬁlled additionally for βlq = 1. Using (17), constraint (15) can be transformed
into:
∗
Bedq
ydeq ≤ rq , q = 1, . . . , Q.
(18)
d

for those l for which βlq = 1. It corresponds to missing constraint for knapsacks
capacities 1, . . . , Q in MKP (constraints (18) are identical for all l). If Q = 1
(special case) MKP is simpliﬁed and takes form of KP.
Finally, value:
max
Cedq ydeq ,
(19)
y

e

d

q

can be calculated step by step, analyzing possibility of restoring ﬂow fe using
p-cycles after the failure of span e, for all e ∈ E such fe > 0. If only fe = 0
nothing have to be restored — ydeq = 1, zde = 0, e ∈ E because hd = 0 for
d ∈ D. So (19) can be ﬁnally written in a form:
Cedq ydeq ,

max
y

where: E+ = {e ∈ E : fe > 0}.

e∈E+ d∈De q∈Qe

(20)

Unrestored Flow Optimization in Survivable Networks Based on p-Cycles

4

331

Solution Proposal

Solution proposal tends to decomposition of the problem (1) – (8) leading to the
series of known, simpler cases.
4.1

Decomposition

In the context of Section 3 one can propose quite natural layer decomposition of
optimization problem into several sub-problems. At the begin we have the network with known topology, span capacities and costs and a set of ﬂow demands.
Each demand determines ﬂow transfer between pair of nodes (from source to
destination). In order to satisfy these demands routing paths have to be found.
This problem is known in the literature as multicomodity ﬂow (MCF). MCF
problem requires the set of paths (for example k shortest paths k-SP) between
speciﬁed pair of nodes, among which MCF selects the set of the best ones ([5]).
Observe, the conﬁguration of paths satisfying demands need be advantageous
for p-cycles conﬁguration. Our overall aim is to ﬁnd the optimal set of p-cycles;
this can be done by metaheuristic algorithm, which goes through the solution
space by certain search trajectory verifying candidates on p-cycles. Successive
p-cycles in this space are pre-generated by using a reasonable generator. One
among many described in literature can be used.
For ﬁxed set of p-cycles and ﬁxed routing paths realizing demands we have
to solve the UFO problem. Its optimal solution is created by independent checking of restorability for each span with nonzero ﬂow. If this span transfers single
commodity ﬂow, its restorability case can be simply evaluated. Otherwise, if the
span transfers multicommodity ﬂow, the Multiple Knapsack Problem (MKP) is
used to ﬁnd optimal restoration scheme (described brieﬂy in Section 4.2). Both
cases require the evaluation of so called spare capacity of the cycle. For disjoin
cycles, inside current p-cycles conﬁguration, such evaluation can be made independently and the problem is not troublesome. If cycles inside current p-cycles
conﬁguration are not disjoint, the problem of ﬁnding real spare capacity of cycles can be written as special linear programming (LP) problem — described
in Section 4.3.
4.2

Minimisation of Unrestorable Flow

Let us consider criteria function (1) in the mathematical model from Section 3.
In order to calculate its value we need to known matrix zde , where hd is known
in advance as the input data for this problem. According to the description in
Section 3, all routing paths have to be chosen for this calculations (realizing all
ﬂow demands) and dedicated conﬁguration of p-cycles also have to be known,
with its residual capacities calculated. Algorithm for calculation of zde values is
presented in Lis. 1.1. All symbols are consistent with those from Section 3. This
algorithm refers to equations (9) – (10). It examines all spans e ∈ E+ in the
network, whether whole ﬂow from De can be restored using p-cycles Qe in case
of failure of each particular span.

332

A. Smutnicki
Listing 1.1. Pseudocode of algorithm for calculation zde values.

for e ∈ E do
begin
(Re , Ue ) = checkRestoriationP osibility(e, De, Qe ) ;
for d ∈ Re do zde = 0 ;
for d ∈ Ue do zde = 1 ;
end ;
The key role plays function checkRestoriationP osibility(); it determines
whether all ﬂow demands can be restored or not in case of failure of span e.
If all ﬂow demands cannot be restored, the function returns two sets of: Re for
restorable, and Ue for unrestorable demands, minimising the total amount of
unrestored ﬂow.
One can distinguish four following scenarios in case of failure of span e (We
say that particular span belongs to p-cycle, if it is either on-cycle span or
a straddling-span on this p-cycle.):
1. span e does not belong to any p-cycle, so Qe = ∅; thus deﬁnitely ﬂow from
span e cannot be restored, so ydeq = 0, q = 1, . . . , Q and in consequence
zde = 1, d ∈ De ;
2. ﬂow on span e consists of only one commodity |De | = 1 and span e belongs
to one p-cycle, so |Qe | = 1; ﬂow can be either restored or not, depending on
residual capacity of this p-cycle;
3. ﬂow on span e is a multicommodity ﬂow, |De | > 1 and span e belongs to one
p-cycle, so |Qe | = 1 — ﬂow can be restored or not depending on residual
capacity of this p-cycle;
4. ﬂow on span e is a multicommodity ﬂow and span e belongs to more than
one p-cycle, so ﬂow can be restored or not depending on residual capacity
of those p-cycles.
Case (1) is obvious. Case (2) is simple – ﬂow can be restored if hd ≤ rq (hd
is a value of ﬂow for demand d, rq is a residual capacity of p-cycle q). In case
(3), the total ﬂow for span e can be restored if d∈De hd > rq . In this case,
the selection of demands to be restored is signiﬁcant — it is the optimization
problem, modeled by using Knapsack Problem. The most complex case (4) is
modeled by MKP, as already mentioned.
4.3

p-Cycles Residual Capacities

According to description in Section 3 there is no possibility to add any spare
capacity, only existing spare capacity in working spans can be used. This assumptions generates several additional constraints. The most important is a decision
problem how much of spare capacity have to be assigned to each of used p-cycles,
in situation when at least two cycles have common span — Fig. 3. In this situation sum of p-cycles capacities cannot exceed span spare capacity. Additionally

Unrestored Flow Optimization in Survivable Networks Based on p-Cycles

333

maximization of sum of whole p-cycles spare capacity is desired. Mathematical
formulation of this problem is described below. Let us deﬁne:
rq — capacity of p-cycle q;
se — available spare capacity on span e;
rqmax — maximum potential capacity of p-cycle q (deﬁned in equation (21));
βeq = 1 if span e belongs to p-cycle q;
Maximum potential capacity of each p-cycle is bounded by value:
rqmax = min{se : e = 1, . . . , E, e ∈ q}.

(21)

For each span we have constraint:
rq βeq ≤ se ,

e = 1, . . . , E

(22)

q

Total amount of p-cycles capacity should be maximised:
rq ,

max

q = 1, . . . , Q

(23)

q

taking into account constraints:
0 ≤ rq ≤ rqmax ,

q = 1, . . . , Q

(24)

The problem (23) – (24) is a typical linear programming task, so simplex
method can be recommended here to solve it.

Fig. 3. Example of conﬁguration where two p-cycles have common span

4.4

Problem Complexity

Two described previously problems, namely the ﬁnding of zde values and calculation of residual capacities, are only activities performed during the evaluation
of the current (ﬁxed) p-cycles and the current routing paths conﬁguration. In the
pessimistic case, we have to solve certain MKP problem(s), which is, according
to [7], strongly N P-hard. So the process of evaluation single solution is strongly
N P-hard, too. Note, that the generation of the set of p-cycles candidates (in
the local search algorithm) appears to be also quite complicated problem, see [1]
for detail, because the number of possible cycles in network has non-polynomial
character; the similar remarks refers also to generation of the set of paths – candidates for realizing routes for each demand.

334

5

A. Smutnicki

Conclusions

We have formulated problem of increasing computer network survivability by using p-cycles as an combinatorial optimization problem. The problem alone has
been neither discussed nor solved in the literature, yet. Although the problem
can be modeled as a general MILP task, presented by us transformations show
that it is quite complicated case. We have also shown that problem is strongly
N P-hard, which suggests that the most suitable solution methods should rely on
metaheuristic approaches. We have also shown original decomposition method
and then proposed highly dedicated algorithm for each particular subproblem.
Due to limited size of the paper, we have presented here the primal part of extensive studies made for the problem stated – detailed analyzes of the algorithm
as well as wide experimental research on common benchmark test are presented
in the complementary paper [1], also submitted for this conference.

References
1. Smutnicki, A., Smutnicki, C.: An Algorithm for Flow Optimization in Survivable
Networks Based on p-Cycles. Submitted for International Conference on Computational Science, ICCS 2009 (2009)
2. Grover, W.D., Stamatelakis, D.: Cycle-oriented Distributed Preconﬁguration: Ringlike Speed with Mesh-like Capacity for Self-planning Network Restoration. In: Proceedings of ICC 1998 IEEE International Conference on Communications, Atlanta,
Georgia, USA, June 1998, pp. 537–543 (1998)
3. Grover, W.D.: Mesh-Based Survivable Networks: Options and Strategies for Optical,
MPLS, SONET, and ATM Networking. Prentice Hall PTR, New Jersey (2003)
4. Smutnicki, A., Walkowiak, K.: Modeling Flow Allocation Problem in MPLS Network
Protected by p-Cycles. In: Peringer, P., S., J. (eds.) Proceedings of 42nd Spring International Conference on Modelling and Simulation of Systems, Hradec nad Moravici,
Czech Republic, MARQ, April 2008, pp. 35–42 (April 2008)
5. Pi´
oro, M., Medhi, D.: Routing, Flow, and Capacity Design in Communication and
Computer Networks. Elsevier Inc., San Francisco (2004)
6. Cholda, P., Jajszczyk, A., Wajda, K.: The Evolution of the Recovery Based on
p-Cycles. In: Proceedings of the 12th Polish Teletraﬃc Symposium PSRT 2005,
Pozna´
n, Poland, pp. 49–58 (September 2005)
7. Kellerer, H., Pferschy, U., Pisinger, D.: Knapsack Problems. Springer, Heidelberg
(2004)

