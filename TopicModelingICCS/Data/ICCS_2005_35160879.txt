Transaction Oriented Computing (Hive Computing)
Using GRAM-Soft
Kaviraju Ramanna Dyapur and Kiran Kumar Patnaik
Department of Computer Science,
Birla Institute of Technology (Deemed University), Mesra, India
{kaviraju15, kkpatnaik}@bitmesra.ac.in

Abstract. The promise of Hive Computing – Organizations being able to
acquire all the power they need for only as long as is necessary – is incredibly
compelling. Hive Computing has experienced significant success in bringing
productivity gains, high performance and cost savings to business applications
such as; Enterprise Resource Planning (ERP), Customer Relationship Management (CRM), Supply Chain Management (SCM) and B2B portals (E-commerce
sites). Grid Computing has brought productivity gains, high performance
and cost savings, but in some places it is largely incomplete, i.e. when it comes
to the questions of mission-critical computing in general and transaction oriented in particular. This paper discusses a new approach to the development,
deployment and management of mission-critical applications – called Hive
Computing – that is designed to complement and extend the vision of Grid
Computing.

1 Introduction
Hive computing assumes that failure is the rule, not the exception. Computers and
other hardware are vulnerable to numerous technical and human-induced flaws and
catastrophic failures. Hive Computing takes the lead from the designers of TCP in assuming that computers are unreliable, and designs systems that can deal with rather
than fear system failure. Hive Computing is a comprehensive and integrated approach
to the development, deployment and management of transaction-oriented applications. The goal of Hive Computing is to enable business and other organizations to
leverage the rising performance and falling process of commodity computers to construct mission-critical computing solutions that are both reliable and affordable. Hive
Computing is derived from Grid Computing, but especially meant for transactionoriented tasks.
This paper presents a functionality of GRAMSoft that takes the Hive computing
approach to Transaction oriented applications in business applications resulting in
productivity gains, high performance and cost savings.

2 Hive Computing Based Infrastructure
The key functions of Hive are; receiving and processing requests that are sent to it by
a client and an administrator, broadcasting request to the Hive and execution of job by
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 879 – 882, 2005.
© Springer-Verlag Berlin Heidelberg 2005

880

K.R. Dyapur and K.K. Patnaik

a worker which is an individual computer that has three characteristics; 1) all workers
must be located on the same logical network, 2) regardless of their exact hardware
configuration, the same software is deployed on all workers and 3) all workers are
dedicated to the Hive. Also administers a worker and maintaining database of status
of sub-tasks and each worker status (idle or busy).

Fig. 1. Key components of Hive

3 Software to Build Hive Computing Infrastructure
The tool “GRAM-Soft” that forms a Hive Computing infrastructure containing transaction-oriented resources. This software involves: Mobile Agents (MAs), MetaComputing (MC), Resource Co-Allocation.
3.1 Mobile Agents in GRAM-Soft
In our GRAM-Soft, MAs are the carriers of tasks so as to execute them and return
with the result to the system from where user has submitted his job. Also, they are
meant for job migrations from one resource to another resource (upon its failure on
one resource) and resumption of its execution from the point where it has been suspended. When the sub-task (sub-task may contain several files) is under execution on
one computer, status of each file (Under Progress, Completed or Suspended) will be
recorded in a “Task_Status” file. This file information decides whether or not sub-task
execution is to be resumed in another capable computer. The sub-task, containing
only those files that are failed to execute (can be known by looking at “Task_Status”
file) is migrated to first available capable computer and its execution is resumed.
3.2 Meta Computing in GRAM-Soft
MC allows applications to use collection of computational resources on an as needed
basis, without regard to physical location of resources. Existing MC features in Gridbased softwares are; locating and allocating computational resources, Authentication
of resources and Process creation. Additional MC features in GRAM-Soft are; execution ordering on processes, grouping of jobs and rescheduling (if necessary). This introduces five challenging resource management problems such as, site autonomy
problem, heterogeneous substrate problem, policy extensibility problem, co-allocation
problem and online control problem. “No existing Meta-Computing Resource Man-

Transaction Oriented Computing (Hive Computing) Using GRAM-Soft

881

agement Systems address all the problems”. GRAM-Soft also addresses the issues
prevalent in resource co-allocation.

4 Architecture of GRAM-Soft
Principal components of GRAM-Soft are:
GRAM Client Library: Used by application or co-allocator acting on behalf of an
application. It interacts with the GRAM gatekeeper at a remote site to perform mutual authentication and transfer a request containing resource specification.
MAs: Responsible for migrating sub-tasks between different capable computers.
GRAM Gatekeeper: Performs Mutual authentication of user and resource, determines local user name for the remote user and starts a job manager, which executes
as that local user which actually handles the request. Here gatekeeper must run
privileged programs all the time.

Fig. 2. GRAM-Soft Scheduling Model

RSL Parsing Library: It contains resource characteristics like, main memory available, CPU processing rate, secondary memory available, and resource type.
Job Manager: Initiates execution of sub-task’s files and monitors their status, performs callback of sub-task termination. Job manager is destroyed once the sub-task
for which it was responsible is terminated.
GRAM Reporter: It is responsible for storing into MDS various information like
job schedules, status of sub-tasks’ files and computer status (idle or busy).
MDS: Provides information about current availability and capabilities of the resources.

882

K.R. Dyapur and K.K. Patnaik

5 Conclusions
Here, we have focused on creating a heterogeneous Hive that contains set of transaction oriented high performance resources required for time-critical transactions. Such
infrastructure should be developed as a decentralized job management system for
which we believe mobile agents, meta-computing and resource co-allocation could
serve as a Hive infrastructure. Regardless of precisely how businesses choose to leverage its power, there is no doubt that – by building on and extending the idea of Grid
Computing – Hive Computing will provide businesses and other organizations with
tremendous levels of flexibility and drive down the cost of reliability. In this work, we
will develop a heterogeneous agent-based hierarchical model, resource scheduling
(meta-computing environment) and co-allocation to meet the requirements of the scalability. Our future work will focus on the implementation of a resource allocation
management in a Hive infrastructure using GRAM-Soft tool that contains methodology of the mobile agents, meta-computing and resource co-allocation.

References
[1] Chris O’Leary -Hive Computing for Transaction Processing Grids, Tsunami Research
[2] J. Gehring and A. Reinefeld. MARS - A Framework for Minimizing the Job Execution
Time in a Metacomputing Environment. Future Generation Computer Systems, 12(1):
1996.
[3] J. Weissman. The Interference Paradigm for Network Job Scheduling. Proceedings of the
Heterogeneous Computing
[4] K. Czajkowski, I. Foster – Resource Management Architecture for Metacomputing Systems.
[5] K. Czajkowski, I. Foster and C. Kesselman - Resource Co-Allocation in Computational
Grids
[6] K. Czajkowski, I. Foster, C. Kesselman, S. Martin, W. Smith, S. Tuecke. Resource Management Architecture for Meta-Computing Systems.
[7] F. Berman, R. Wolski, J. Schopf and G. Shao. Application level scheduling on distributed
heterogeneous networks. In proceedings of Supercomputing’96. ACM Press, 1995.
[8] S. Zhou. LSF: Load sharing in large-scale heterogeneous distributed systems. In proc.
Workshop on Cluster Computing, 1992.

