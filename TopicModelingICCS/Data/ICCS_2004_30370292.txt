Simulation of Deformable Objects Using Sliding Mode
Control with Application to Cloth Animation
Farshad Rum and Brandon W. Gordon
Control and Information Systems (CIS) Laboratory, Department of Mechanical and
Industrial Engineering, Concordia University, Montreal, Quebec, Canada,
bwgordon@me.concordia.ca

Abstract. A new method is presented for simulation of deformable objects that
consist of rigid and flexible structural elements using the control based Singularly Perturbed Sliding Manifold (SPSM) approach. The problem is multi-scale
due to its rigid and flexible components and forms a set of differential-algebraic
equations. The problem is formulated as a set of ODEs with inequality constraints by allowing some deviations in the rigid links. The SPSM approach is
particularly well suited for such problems. It is shown that this method can handle inconsistent initial conditions, and it allows the user to systematically approximate the equations due to its robustness properties. The inherent attractivity of the sliding dynamics enables the method to handle sudden changes in
position, velocity or acceleration while satisfying geometrical constraints. The
desired level of accuracy in constraint errors is achieved in a finite time and
thereafter. Moreover, the new approach is explicit and capable of performing
multi-rate and real-time simulations. Finally, it is shown that the SPSM approach to simulation requires the inversion of a smaller matrix than comparable
implicit methods. The result is significantly improved performance for computationally expensive applications such as cloth animation.

1 Introduction
Animation of deformable structures such as hair, chain, cloth and jelly-type materials
has imposed some challenging problems due to their multi-scale nature. Such problems have little resistance in bending/shear directions, but are often very stiff with
hard constraints in elongation/shear directions. The resulting set of equations is therefore stiff and traditional explicit methods usually cannot handle them efficiently due
to small time steps that they demand.
Implicit methods on the other hand can handle larger time steps; however, they
have no built-in mechanism to deal with algebraic constraints. For a visually realistic
animation of cloth a maximum deviation of 10% in the stiff direction (usually elongation) is recommended [1]; otherwise, the cloth will become like rubber. Traditionally
it has been up to the user to select proper parameters in the stiff direction so that deviations do not exceed their limit. Such an approach might require a lot of trial and errors and if a large gain is necessary it can substantially limit the allowable time step,
which was the reason for incorporating the method in the first place.

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 292–299, 2004.
© Springer-Verlag Berlin Heidelberg 2004

Simulation of Deformable Objects Using Sliding Mode Control

293

Another approach has been to first solve the equations by imposing and correcting
the constraints [2]. Such a method requires additional overhead and can result in artifacts that may in turn require another algorithm to correct the momentum/energy alterations caused by enforcing the constraints [3]. The proposed SPSM approach, however, has a built-in mechanism [4] to handle the limits on the constraints while at the
same time solving the set of ODEs. Another merit of this approach is that due to its
attractive boundary layer [5] it can be combined with existing codes that require sudden corrections in position, velocity or acceleration of particles in order to satisfy
various geometrical constraints.
As we show in Sect. 2 the governing equations of a flexible object can be easily
written as a set of ordinary differential equations in bending and shear direction and
constrained by a set of algebraic equations in elongation directions. This class of
equations is commonly referred to as differential-algebraic (DAEs) equations. In general, one can write such equations as:
x = f (t , x, z) , 0 = g(t , x, z )

(1)

with x ∈ ℜn , z ∈ ℜ m , f : ℜ × ℜ n × ℜ m → ℜ n , and g : ℜ × ℜ n × ℜ m → ℜm . Where
nonlinear functions f and g respectively represent the ODE part and algebraic constraints of the DAE.
In most cases the accuracy level required for constraints allows us to permit a certain amount of error, ε . Therefore the above set of DAEs can be relaxed to the following set of ODEs with algebraic inequalities:
x = f (t , x, z) , g i (t , x, z ) ≤ ε i , i = 1,..., m

(2)

where g i (t , x, z) represents each algebraic constraint and m is the total number of
them. The common amount of ε used in simulation of cloth objects is 10% of the rest
length in that link.
Singularly perturbed sliding manifold, SPSM, is a recent method developed to particularly attack problems of the type given by equations (2). SPSM equations can be
efficiently solved by any explicit method and this allows us to perform a multi-rate
simulation [6]; moreover, this approach is object-oriented thus any simulation code
developed by this approach can be easily integrated with other simulation codes [6].
SPSM realization is a robust method that allows us to ignore various terms and make
efficient simulations in a systematic manner. Reaching phase and locking properties
of the sliding control [5] translate into two desirable properties in our application.
Firstly the fact that inconsistent initial conditions that are an issue for BDF methods
[7] are systematically dealt with; in fact it is possible to show that after a finite time
the bounds on errors are satisfied [5] and secondly the locking property of the sliding
control assures us that once these bounds are reached they will be satisfied for the rest
of the simulation.
Finally as we will see in Sect. 3 SPSM method has to invert a smaller size matrix at
each time step compared to BDF methods.

294

F. Rum and B.W. Gordon

2 Problem Formulation
We model the flexible object as a collection of distributed masses connected to each
other via rigid/flexible connections, which is also referred to as a particle system.
These models have the ability to capture complex dynamical behaviors and are well
suited to animation needs [3]. All the forces either internal or external simply depend
on location and velocity of particles therefore in order to simulate such systems we
only need to compute forces on each particle and two simple integrations will yield
positions and velocities.

Fig. 1. A generic 3D section of a flexible object modelled as a particle system

As shown in Fig. 1 we can generally categorize the forces on particles as internal
G
forces due to flexible connections, Fint , that are responsible for shear and bending behavior of the object, internal forces due to rigid connections, z , and finally the exterG
nal forces, Fext , that represent interaction forces between the object and the environment such as collisions, contacts, gravity, wind, etc. Take note that we are not
modeling the rigid links as springs but rather keep their forces as unknowns for the
controller to determine. As a result we have the following ODE:
G
G
R
k = Vk

(3)
G
G
G
 = 1  z rˆ + F + F , k = 1,..., n
V
∑
k
j
kj
int
,
k
ext
,
k
p

mk  j



with these constraints
0 = Li − L0i , i = 1,..., n l .

(4)

G
G
Here R k and Vk represent the position and velocity of each particle, n p is the number of particles, rˆkj is the unit vector from particle k to j that is at the other end of
the rigid link connecting them. For constraints, Li is the instantaneous length of the
i th link, L0i is its desired length and nl represents the total number of links.
By permitting the length of links to change as much as ε i the constraints will be
the following inequalities:

Li − L0i ≤ ε i , i = 1,..., n l .

(5)

Simulation of Deformable Objects Using Sliding Mode Control

295

We start application of the SPSM method by introducing the following error variable:
wi = Li − L0i

(6)

Differentiating w.r.t. time (see Fig. 1) one obtains:

G G 2
2
G G
Vi − Vc − w i
G
G
 −V
  .
i =
w i = rˆci . Vi − Vc , w
+ rˆci . V
c
 i

Li

(7)

G
G
G
 = 1  z rˆ + F + F 
V
∑
c
j cj
int ,c
ext ,c 

mc  j


(8)

(

)

Since

 . Therefore, according to definition of index of
We can see that z terms appear in w
a DAE [7] our problem is of index three. The sliding surface designed by the SPSM
method will then be:
i + 2 µw i + wi
si = µ 2 w

(9)

where µ is a positive parameter that determines the dynamics of the fast motion. The
SPSM method then designs a controller that forces the motion to the above desired
dynamics. In order to see the effect of µ on error we recall the following result from
[5]:
Lemma 1. If si (t ) ≤ ε i for t ≥ t r then the error and its derivatives are bounded by:
wi (t ) ≤ ε i , w i (t ) ≤

2ε i

µ

i (t ) ≤
and w

4ε i

µ2

for t ≥ t r .

(10)

Note that in the above lemma we did not assume that initial conditions are necessarily
consistent. Sliding mode control guarantees that after a finite reaching time, tr , the
motion will be contained within the desired accuracy bound, si (t ) ≤ ε i , and the
locking property guarantees that the motion will satisfy the required bounds ever after
[5]. This in fact not only solves our ODE problem with inequality constraints,
wi (t ) ≤ ε i , but also keeps the error derivatives bounded after a finite reaching phase
with no need for the initial conditions to be consistent.
In order to achieve the above goals we design a controller that determines the value of
v = z . The value of the link forces, z , will then be obtained by integrating v .
 i w.r.t time and packing the w vector we can write:
Differentiating w
w
 = J Ω v + β , J Ω =
Substituting in eq. (9) we obtain:


∂w
∂z

(11)

296

F. Rum and B.W. Gordon

 + 2µw
 + w = µ 2 J Ω v + µ 2β + 2µw
 + w = J s v + α
s = µ 2 w

(12)

 + w .
J s = µ 2 J Ω , α = µ 2 β + 2 µw

(13)

where

If we solve the above equation for v we can steer the sliding motion into the desired boundary layer. At this stage we incorporate ideas from sliding modes control
and make use of its robustness properties. Since computation of exact α can potentially be expensive we approximate it by αˆ . Moreover, it is possible to avoid inverting the original J s that is potentially very large when we have a large number of
rigid links in the object and use an approximate inverse denoted by Jˆ −1 . In [4]
s

Gordon shows that if we compute v by the following controller:


 s
ν = − Jˆ −s 1  αˆ + K diag  sat  i

  ε i


 

 

(14)

the motion will converge to its desired error bound after a short reaching phase and
will stay there ever after, if the following conditions are satisfied:
1- J s Jˆ −s 1K - diag[α − J s Jˆ −s 1αˆ ] has to be positive diagonally dominant.
(15)
2- J s Jˆ −s 1K must be uniformly positive definite.
The sat(.) function used in eq. (14) is indeed the linear saturation function and is
used to smooth the control and help us avoid the chattering phenomenon [5] common
to sliding mode control methods.
In this work we simply invert the real jacobian matrix, Jˆ s−1 = J −s 1 , thus reducing
(15) to:

1- K - diag[α − αˆ ] has to be positive diagonally dominant.

(16)

2- K must be uniformly positive definite.
The above criteria can then be easily satisfied by a large enough K . All we are left
with is choosing αˆ and computing the J s matrix.
 and
The exact expression for α is given by eq. (13). One can notice that w
w have already been evaluated in the process of calculating s and choice of

 + w
αˆ = 2 µw
(17)
does not involve much computational overhead. If we further take our gain matrix to
be diagonal, K = diag(k i ) , the only sufficient condition we need to meet becomes:
ki ≥ µ 2 β i

(18)

Simulation of Deformable Objects Using Sliding Mode Control

297

Given the fact that β i mainly depends on the ODE (3) that is under control we do
not have to retune the gains each time we try a new value for µ .
Consider the generic link i in Fig. 1 and the particle, Pc connecting it to link j .
Using definition (11) with equations (7) and (8) yields:

[J Ω ]i, j

if i ≠ j
− rˆci .rˆcj / mc

− 1 / mi1 − 1 / mi 2 if i = j and none of the two end particles

of link i has an acceleration constraint
=
if i = j and only one end particle of link i
− 1 / mi ,free

does not have an acceleration constraint

if links i and j have no nodes in common
0

(19)

In the above equation masses of the two end particles of link i are denoted by mi1
and mi 2 and mass of the particle in link i that does not have an acceleration constraint is represented by mi ,free . Examples of an acceleration constraint could include
when the particle is fixed at its place or when it is attached to another object, which is
considerably more massive compared to the cloth. In the latter situation the acceleration of the attaching particle is mainly governed and constrained by the corresponding
point in that object, for example consider the attachment points in animation of parachute or sail for cloth, or the connecting point of hair to an object.
Finally take note that the size of the jacobian matrix that has to be inverted is equal
to the number of rigid links, nl . We will make use of this fact in Sect. 3.
Remark 1. In simulations that we performed, the algorithm proved to be robust
against programming errors that yielded a slightly wrong J s . Aside from the fact that
an amount of error in permitted by eq. (15), if the user makes a mistake in recognizing
if a particle’s acceleration is or is not constrained, the constraint could be considered
as a neglected external force on that particle. This simply induces an error in αˆ and as
demonstrated by (16) can be robustly cancelled by choosing a big K , which apparently does not involve any additional overhead. This fact can be especially handy
when our flexible object dynamically changes its connections with other objects, e.g.
when the sails are torn and taken away by a strong wind! A more common case happens in interactive animations where some points of the flexible object are dynamically chosen and moved by the user. We successfully tested this idea in our simulations presented in Sect. 3.

3 Application to Cloth Animation
We adopt the structure proposed by Provot [2] that has proven effective in cloth animation [3]. The particles are rigidly linked to their adjacent horizontal and vertical
particles. Shear spring-dampers attach immediate diagonally adjacent particles and finally bending characteristics are modeled by inserting spring and dampers between
every other horizontally or vertically neighboring nodes.

298

F. Rum and B.W. Gordon

In animations we study a n r by n c grid of particles and we set the maximum
amount of deviation in rigid links to be less than 10% of their intended lengths. As
mentioned in Sect. 2 in all simulations we simplified the programming task by ignoring constraints in particles in evaluation of J s .
In order to test the new algorithm we initially compressed the left side of the cloth
and fixed it at its two left corners. This is a typical example of inconsistent initial
conditions that commonly arise in cloth animation, e.g. to attach pieces of cloth to
rigid bodies. It is obvious that finding a consistent set of initial conditions that locates
particles in proper positions to give this simple geometric shape is potentially tedious.
In our example we exerted a tiny impulse to one of the particles and the algorithm
automatically located all particles in proper positions that satisfied all constraints
(Figs. 2).

(a)

(b)

(c)

Fig. 2. Testing the reaching phase of the algorithm by inconsistent initial conditions (a) before
and (b) after a finite reaching time and subject to wind and gravity (c) subject to an external
geometrical constraint

In simulations the motion reaches the desired boundary layer in at most 2 seconds
for the link with the most initial deviation. We also tested the algorithm simultaneously under gravity, wind and an external object that imposed geometrical perturbations as shown in Figs. 2.
In order to compare the SPSM approach with the well-established BDF method we
run a number of simulations using the popular implicit method proposed in [8]. The
results of simulations are presented in table (1). For simplicity we used a constant step
size in all simulations. The set of equations in both cases are sparse and the CG
method [9] is used in all simulations. Note that eq. (19) shows that J s is symmetric
and sparse with a maximum of seven non-zero elements on each row; because each
link is at most connected to six other ones.
As shown in table (1) the SPSM method always has a smaller matrix size. Given a
nr by nc grid of particles the number of links equals nl = nr ( nc − 1) + nc ( nr − 1) and
the number of particles is n p = nr nc . The size of the matrix in implicit method [8] is
three times the number of particles, 3n p = 3nc nr , compared to the size of the J s ,
which is equal to the number of links or nl = 2nc nr − nc − nr . Table 1 summarizes the
results of simulations on an 8 × 8 grid of particles for 20 seconds. Simulations were
run on a 2519 MHz processor. Note that in order to avoid instability in the implicit

Simulation of Deformable Objects Using Sliding Mode Control

299

method we had to reduce the amount of initial perturbations (left side compression) to
one-third the amount shown in Figs. 2. It is evident from these results that the proposed approach is much more computationally efficient than standard implicit methods.
Table 1. Simulation results for SPSM and the implicit method [8]

Method
Implicit
SPSM

CPU
time (sec)
41.12
5.47

Size of the sparse
system
192
112

Max. stable cte. step
size (sec)
0.002
0.019

4 Conclusions
In this paper we have studied the problem of simulating a deformable object consisting of rigid and flexible inner connections using sliding mode control. As our case
study we developed a code that simulated a piece of cloth under initial and continuous
disturbances and compared it to a popular implicit method. The new approach was
seven times faster, more than three times more robust to disturbances, handled almost
ten times larger time steps and finally led to a sparse system with nearly half the size
of the implicit method.

References
1. House, D., Breen ,D. E., (eds.): Cloth Modeling and Animation. A.K. Peters, Natick Mass.
(2000)
2. Provot, X.: Deformation Constraints in a Mass-Spring Model to Describe Rigid Cloth Behaviour. Proc. Graphics Interface 95 (1995) 147-154
3. Desbrun, M., Meyer, M., Barr, A.H.: Interactive Animation of Cloth-Like Objects for Virtual Reality. Journal of Vizualisation and Computer Animation (2000)
4. Gordon, B.W.: State Space Modelling of Differential-Algebraic Systems using Singularly
Perturbed Sliding Manifolds. Ph.D Thesis, MIT, Mechanical Engineering Dept., August
(1999)
5. Slotine, J.-J.E.: Sliding Controller Design for Nonlinear Systems. Int. J. Control. 40
(1984) 2
6. Gu, B., Asada, H.H.: Co-Simulation of Algebraically Coupled Dynamic Subsystems. ACC
(2001) 2273-2278
7. Brenan, K., Campbell, S., Petzold, L.: Numerical Solution of Initial Value Problems in Differential-Algebraic Equations. Amsterdam, North-Holland (1989)
8. Baraff, D., Witkin, A..: Large Steps in Cloth Simulation. In: Cohen, M. (ed.): SIGGRAPH
98 Conference Proceedings. Annual Conference Series, P. Addison-Wesley, July (1998)
43-54
9. Shewchuk, J.: An Introduction to the Conjugate Gradient Method Without the Agonizing
Pain. Technical report CMU-CS-TR-94-125, Carnegie Mellon University (1994)

