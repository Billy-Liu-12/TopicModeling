A Grid-Enabled Scene Rendering Application
M. Caballer, V. Hern´
andez, and J.E. Rom´
an
D. de Sistemas Inform´
aticos y Computaci´
on, Universidad Polit´ecnica de Valencia,
Camino de Vera, s/n, E-46022 Valencia, Spain.
{micafer,vhernand,jroman}@dsic.upv.es

Abstract. The work presented in this paper represents a step forward
in the wide adoption of grid technologies in more conventional commercial applications. The application treated herein is a global illumination
scene rendering engine in which grid tools have been used to execute
the computation remotely, as well as to incorporate certain interesting
characteristics. This engine can be incorporated, for instance, in an electronic commerce application in order to add visualization capabilities to
a conventional virtual store. The rendering engine implements a parallel
version of the radiosity illumination algorithm, providing high quality
and allowing a fast response for moderately complex scenes.

1

Introduction

This paper presents a remote scene rendering service, implemented with standard grid tools. These tools provide some desirable features such as uniformity,
transparency, reliability, ubiquity and security [4] which can be very important
in some applications but are lacking in more conventional Internet technologies.
In particular, Globus Toolkit 2 [3] has been selected for the middleware layer,
since it is currently one of the most widely accepted grid frameworks.
This work is a follow-up of the EU-funded research project VRE-Commerce
(see http://www.grycap.upv.es/vrecommerce), whose main objective was the integration of fast synthetic image generation in electronic commerce applications,
with special focus on the furniture and ceramics sectors. The application enables
the user to obtain realistic renders of customized environments in which products from the virtual store have been placed. These images are generated with
radiosity techniques [6], in particular with a parallel implementation so that the
response time is bearable for an e-commerce setting (see [2] for details).

2

Prototype Implementation

The complete operation of the application is illustrated in Figure 1. The user
accesses the virtual store located in the web server and makes the image generation request (step 1). A CGI program (linked with the Globus libraries) located
in the web server is in charge of managing this request on behalf of the user and
having it processed by the grid. The required steps are described next. In this
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 54–57, 2004.
c Springer-Verlag Berlin Heidelberg 2004

A Grid-Enabled Scene Rendering Application

55

Fig. 1. Scheme of the rendering service.

process, several diﬀerent Globus components participate, which may be placed
in diﬀerent physical locations.
Discovery of Grid Resources. First, the Monitoring and Discovery Service
(MDS) included in Globus is used to obtain information about the resources
available in the grid. The CGI program uses the information provided by MDS in
order to select the most suitable resource. The decision is based on the number
of free nodes. This information is also used to select the number of nodes to
allocate for the radiosity program. If there are not enough free resources, the
program will suggest the user to wait and try later (steps 2 and 3).
Job Submission. Once the computational server has been chosen, the CGI
program launches the radiosity calculation via the Globus Resource Allocation
Manager (GRAM). Before this, it is necessary to authenticate within the grid
by means of a proxy, containing the certiﬁcate and public key of the grid user.
Once authenticated, the job is submitted to the remote resource (step 4).
Update of Geometrical Data Files. The radiosity program needs a set of
ﬁles containing the geometrical models of furniture pieces or the tiles textures in
the case of ceramics. These ﬁles belong to the diﬀerent manufacturers that oﬀer
products in the application. The ﬁles are cached locally in each computational
server. The grid scheme adds the possibility to update the master copies of the
ﬁles by the manufacturers, as well as to add new ones. The program analyzes
the scene looking for the furniture or ceramic pieces used, and then queries the
Replica Manager for their location (step 5). Then the dates of remote and local
ﬁles are compared so that download is only done if necessary (step 6).
Return of Results. The CGI program uses the identiﬁer returned by the
GRAM service to detect the job ﬁnalization. When the job is ﬁnished the program uses the I/O functions provided by the GASS (Global Access to Secondary
Storage) service to send the image generated by the radiosity algorithm back to
the web server (step 7). Using these functions the CGI program can obtain the
image with no need of modiﬁcation of the radiosity code. Finally, the web server
will display the image in the client’s web browser (step 8).

56

M. Caballer, V. Hern´
andez, and J.E. Rom´
an

Fig. 2. Some of the images used for validation and timing.

3

Testing and Results

Several tests have been carried out to verify the operation and performance of
the whole system. Four test cases have been used to measure times in order to
assess the overhead incurred by the Globus components. The chosen scenes are
representative examples of the scenes that can be designed with the application.
The generated images are illustrated in Figure 2.
The measured time begins when the user clicks the “Generate Image” button
and ﬁnishes when the system starts to send the resulting image (the transfer time
of the image is not taken into account because it depends on the type of Internet
connection). The times considered for comparison have been the time consumed
by the radiosity program and the accumulated time corresponding to the grid
functions (which includes steps 1 – 5 and 7 in ﬁgure 1). The time obtained for
each of the test cases is shown in Table 1, along with the initial number of
polygons and patches at the end of execution, as well as the number of lights
(to give an indication of the size of the problem).
The time added by the grid operations is slightly larger than 10 seconds,
which is reasonable considering the response time requirement of 1 – 2 minutes
established initially in the VRE-Commerce project. Although the time consumed
by Globus functions represents a non-negligible percentage, it is constant, and,
therefore, it will be less signiﬁcant in more complex scenes. More details about
the tests can be found in [1].
Table 1. Characteristics of the test scenes and measured times (in seconds).
Scene Polygons Patches Lights Radiosity Globus Total
Ex. 1 2426
28562
2
46
12
59
Ex. 2 5160
28740
2
56
12
68
Ex. 3 4908
24372
2
60
11
71
Ex. 4 1374
20118
2
17
13
30

A Grid-Enabled Scene Rendering Application

4

57

Conclusions and Future Work

Grid tools pursue a number of properties (ubiquity, security, etc.) that are very
important for distributed applications. Globus Toolkit 2 provides all the functionality required for our application. The beneﬁts obtained by applying grid
technologies have been the following in this case:
– Scalability: it is possible to add computational resources easily, so that the
application can automatically use them.
– Fault tolerance: if any computational server fails, the system can redirect
the request to the active ones.
– Security: the user must be authenticated to access the system, and all network data is encrypted. Although in this application there are no conﬁdential
data, security may be a key issue in other commercial applications.
– Load balancing: the system selects the most suitable grid resource.
– Data management: the system enables easy update of the furniture data and
ceramic textures.
The system operation has been tested successfully in diﬀerent situations,
showing a robust behavior against possible failures. The execution overheads,
owing to Globus components, are reasonable for the application.
With respect to future development of the system, diﬀerent working lines are
being considered. On one hand, after the release of Globus Toolkit 3, the logical
extension would be to migrate to this new platform to take advantage of its new
possibilities, adapting the application to the Open Grid Services Architecture
deﬁned in [5]. Among other things, this involves standardizing the way information is exchanged between the client application and the grid service. This opens
the door to providing service to other applications such as standalone room design tools or, more generally, anyone requiring high-quality, fast rendering. For
certain applications such as ﬁlm making, this would entail harnessing greater
amount of computing power and using geographically distributed resources. Finally, a desirable feature is to represent resulting renders with a 3-D modeling
language (such as VRML or X3D) to allow for interactivity.

References
1. Caballer M., Hern´
andez V., Rom´
an J.E.: A grid-enabled scene rendering application.
Technical Report DSIC-II/04/04, Universidad Polit´ecnica de Valencia (2004)
2. Caballer M., Guerrero D., Hern´
andez V., Rom´
an J.E.: A parallel rendering algorithm based on hierarchical radiosity. Lecture Notes in Computer Science 2565
(2003) 523–536
3. Foster I., Kesselman C.: Globus: A metacomputing infrastructure toolkit. Internat.
J. Supercomputer Appl. 11 (1997) 115–128
4. Foster I., Kesselman C.: The Grid: Blueprint for a New Computing Infrastructure.
Morgan Kaufmann (1998)
5. Foster I., Kesselman C., Nick J., Tuecke S.: The physiology of the grid: An open
grid services architecture for distributed systems integration (2002)
6. Sillion F., Puech C.: Radiosity and Global Illumination. Morgan Kaufmann (1994)

