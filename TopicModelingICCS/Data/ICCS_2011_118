Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 1092–1100

International Conference on Computational Science, ICCS 2011

Adaptive Time Step for Cardiac Myocyte Models
Ricardo Silva Campos, Marcelo Lobosco, Rodrigo Weber dos Santos1
Department of Computer Science and Master Program in Computational Modeling, Federal University of Juiz de Fora, Juiz de Fora, Brazil

Abstract
The modeling of the electrical activity of the heart is of great medical and scientiﬁc interest as it provides a way to
better understand the underlying biophysical phenomena, supports the development of new techniques for diagnoses
and serves as a platform for drug tests. At cellular level, the electrical activity of cardiac myocytes may be simulated
by solving a system of ordinary diﬀerential equations (ODEs) describing the electrical behavior of the cell membrane.
Because the biophysical processes underlying this phenomenon are non-linear and change very rapidly, the ODE
system is challenging to solve numerically. Furthermore, the implementation of these models is a hard task. This
paper presents a tool to describe models using Ordinary Diﬀerential Equations. It is based on CellML standard and
automatically generates C++ source-code, with numerical methods to solve the model’s equations. The aim of this
work is to present a numerical method with adaptive time step based on the Euler Method and Second Order RungeKutta method. The proposed method accelerated the execution and kept numerical errors under control. Preliminary
results suggest this adaptive method is up to 25 times faster than the explicit Euler method with ﬁxed time step.
Keywords: Adaptive Time Step, Cardiac Modeling

1. Introduction
Cardiac diseases are a major cause of death in the world, and a lot of work has been done to elucidate the causes
and mechanisms of heart problems. Computer models have become valuable tools for the study and comprehension
of the complex phenomena of cardiac electrophysiology. The models have played an important role in this ﬁeld [1]
and support the tests of new drugs, the development of new medical devices and non-invasive diagnostic techniques.
The contraction of the heart is preceded by an electrical discharge, named action potential (AP), in the myocytes
which propagates through the whole organ. Abnormal changes in the electrical properties of these cardiac cells as
well as in the structure of the heart tissue can lead to life-threatening arrhythmias and ﬁbrillation.
Mathematical models have been widely used to study the electrical activity in myocytes. They are usually formulated as a system of non-linear Ordinary Diﬀerential Equations (ODEs) describing processes occurring on a wide
range of time scales. These models are being continually developed to give an increasingly detailed and accurate
description of cellular physiology. However, this development also tends to increase the complexity of the models.

Email addresses: ricardo@ice.ufjf.br (Ricardo Silva Campos), marcelo.lobosco@ice.ufjf.br (Marcelo Lobosco),
rodrigo.weber@ufjf.edu.br (Rodrigo Weber dos Santos)
1 Corresponding author

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.116

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

1093

Common to all the recent models is that they include a large number of highly complex coeﬃcient functions, and
the fast dynamics of the state variables make the equations challenging to solve numerically. The simulation of a
single cell behavior, i.e. only one ODE system, over a short time interval is not computational costly. However, it can
become an important issue when the cell models are used to investigate processes which demand long simulations [2]
or in simulations of cardiac tissue [3]. Therefore, it is necessary to pursuit new eﬃcient techniques to solve the ODE
system.
Due to the simplicity of implementation, explicit ODE solvers such as the classical forward Euler method are
commonly used [4]. However, explicit methods, for stability requirements, have to take very small time steps. Such
limitation could lead to very computational costly simulations, which produce results much more accurate than typical
requirements in biomedical engineering applications [5]. The aim of this work is to implement a fast, stable and
accurate numerical method. Our method is based on Euler and Second Order Runge-Kutta (RK2) method. The time
step increase or decrease according to the relative error between these methods, in order to speed up the execution.
2. Computational Modeling
The heart is in charge of pumping blood to the whole body via rhythmical contractions. The contractions are
synchronized by electrical pulses, called action potential (AP). The dynamics of the processes that underlie the action potential (AP) in a cardiac cell are typically described by a set of ODEs that model the total ionic current Iion
(predominantly Na+ , K + , Ca2+ and Cl− ) through protein channels in the cell membrane.
The equation 1 shows how the transmembrane voltage (V) depends on the total ionic current Iion :
−y )
I stim − Iion (V,→
∂V
=
∂t
Cm

(1)

−y ) is the sum of ionic transmembrane currents present in the cardiac
Where I stim is a external stimulus current, Iion (V,→
→
−
cell, Cm is the membrane capacitance, and y represents all other variable that inﬂuence the dynamics of the ionic
−y are also modeled by ODEs:
currents. The dynamics of →
∂y j
−y )
= f j (t,→
∂t

(2)

−y , used in the modeling of a particular ionic current. It is important to note that f j are non-linear
y j is a variable, from →
functions that depend on many variables.
2.1. Ionic Current Models
In this work four diﬀerent cardiac cell models from diﬀerent species, with diﬀerent levels of complexity and
suitable for performing large–scale spatial simulations were considered to simulate the kinetics of Iion in 1-2.
The Bondarenko et al. model (BNK) was the ﬁrst mouse ventricular myocytes model [6]. The ionic currents term
Iion in this model consists of the sum of 15 transmembrane currents and is given by Equation 3:
Iion = ICaL + I p(Ca) + INaCa + ICab + INa
+INab + INaK + IKto, f + IKto,s + IK1
+IK s + IKur + IK ss + IKr + ICl,Ca

(3)

Where ICaL is the L-type Ca2+ current, I p(Ca) is the maximum (Ca2) pump current, INaCa is the Na+ /Ca2+ exchanger,
INa is the fast Na+ current, INab and ICab are the background Na+ and Ca2+ currents respectively, INaK is Na+ /K +
pump, IKto,s e IKto, f are the slow and rapidly inactivating transient outward K+ current, IK1 is the inward rectiﬁer
K + current, IKr and IK s are the rapid and the slow delayed rectiﬁer K + currents respectively, IKur is the ultrarapidly
activating delayed rectiﬁer K + current, IK ss IKss a noninactivating steadystate K+ current and ICl,Ca is Ca2+ activated
Cl− current.
In summary it has 41 state variables that control ionic currents and cellular homeostasis. In this model the ionic
channels are represented by Markov chains.

1094

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

In the ten Tusscher et al.[7] human ventricular model (TNNP), the term Iion is the sum of all transmembrane ionic
currents and is given by Equation 4.:
Iion = INa + IK1 + Ito + IKr + IK s
+ICaL + INaCa + INaK
+I pCa + I pK + IbCa + IbNa
+

+

(4)
+

Where INa is the fast Na current, IK1 the inward rectier K current, Ito the transient outward K current, IKr
and IK s are the rapid and the slow delayed rectier K + currents respectively, ICaL the L-type Ca2+ current, INaCa is the
Na+ / Ca2+ exchanger, INaK is Na+ / K + pump, I pCa and I pK are plateau Ca2+ and K + currents, IbCa and IbK are
background Ca2+ and K + currents.
In summary, the model is based on a set of 19 ODEs that describes the ionic currents and the intracellular concentration of Na+ , K + and Ca+2 .
The Garny et al. model [8] represents rabbit sino-atrial cells, with 15 ODEs. The ionic Current is given by
Equation 5.
Iion = INa + ICaL + ICaT + Ito
+I sus + IKr + IK s + I fN a
+I fK + IbN a + IbC a + IbK
+INaCa + I p + ICap

(5)

Where INa is the sodium current, ICaL is the L-type calcium current, ICaT is the T-type calcium current, IKr and IK s
are rapid and slow potassium current, I f Na and I f K are hyperpolarization active current of sodium and potassium,
IbNa , IbCa and IbK are the background currents of sodium, calcium and potassium, INaCa is the sodium and calcium
exchanger, I p is the the sodium and potassium pump, ICap is the persistant calcium current.
The Noble et al. model [9] is a mathematical model of ventricular AP of guinea-pigs. It has 22 ODEs, and its
ionic current is given by Equation 6.
IIon = IK1 + Ito + IKr
+IK s + INaK + INa + IbNa
+I pNa + ICaL + INaCa + IbCa

(6)

Where IK1 is the time independent potassium current, Ito is the outward transient current, IKr and IK s are rapid and
slow rectifying current of potassium, INaK is the sodium/potassium current, INa is the fast sodium current, IbNa and
IbCa are the background sodium and calcium currents, I pNa is the sodium persistant current, ICaL is the L-type calcium
current, INaCa is the sodium/calcium exchanger.
2.2. CellML
The CellML standard [10] is XML (Extensible Markup Language) based standard for description of cellular
models. It provides the computational biology community with both a human- and computer-readable representation
of mathematical relationships of biological components. CellML contains tags for describing cellular components
and another pattern to describe mathematical equations, called MathML [11]. It allows researchers to share their
models, even though they use diﬀerent tools to simulate them, and allows components of a model to be easily used by
other models, so that the modeling process is simpler and faster. Although initially developed for biological models,
CellML can be used to describe diﬀerent phenomena.
This standard describes the cellular components, and their equations, but the pattern itself is not able to solve
models. In this paper we used the AGOS tool [12], which is a transformation tool that was designed to translate
cellular models written in CellML language into a C++ application program interface (API). AGOS was implemented
in C++ and makes use of basic computer data structures and algorithms in order to capture the variables, parameters
and equations that are embedded in a CellML ﬁle and to translate them to a C++ API. The transformation process
consists of identifying and extracting the ODE elements documented in the XML ﬁle and automatically generating
the corresponding code.

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

1095

3. Methodology
3.1. Adaptive Method
The original AGOS solver uses the forward Euler’s method (Equation 7).
j
−
= yij + h f j (ti ,→
yi )
yi+1

(7)

−
Where
is the discretization of y j at time (i + 1)h, h is the time step, is the previous iteration, and f j (ti ,→
yi ) is
the equation j of the ODE system. This method needs small time steps to obtain stable results. The ODE system
is very stiﬀ in realistic models, therefore the solver needs smaller time steps, which slows down the simulations.
Furthermore, tissue simulations are expensive, because they demand the solution of many cell models simultaneously.
For instance, the simulation of cardiac cell activity for one second may take some minutes to run. To simulate a tissue,
the numerical methods may take several hours to simulate a single heartbeat. In order to speed up the simulation,
this work implemented an adaptive time step method that has better performance and keeps the numerical errors
under control. The adaptive method is based in the Forward Euler’s Method, described above, and the RK2 method
(Equation 8).
j
yi+1

yij

j
yi+1

j
−
yi+1
= yij + h f j (ti ,→
yi )
h
−−→
−
= yij + ( f j (ti ,→
yi ) + f j (ti+1 , yi+1 ))
2

(8)

j
j
Where yi+1
is computed by Euler’s method (Equation 7), yi+1
is to be computed by the RK2 method, yij is the value
−−→
−
yi ) is the system computed at time ti and with yij . f j (ti+1 , yi+1 ) is the
at previous iteration, h is the time step, and f j (ti ,→
−−→
system at time ti+1 and with yi+1 . This method is more expensive to solve, because at every iteration step, it neeeds
to solve the right-hand side twice. However, this method’s results are more accurate. To speed up the execution, we
implemented, an adaptive time step, described in Equation 9.

j
yi+1

j
−
= yij + hi f j (ti ,→
yi )
yi+1
hi
−−→
−
= yij + ( f (ti ,→
yi ) + f (ti+1 , yi+1 ))
2
−→
−
→−−
yi+1
y−i+1
errori =
∞
−
→
y−i+1
hi+1 = get new h(erroi , hi )

(9)

j
) and then computes the same iteration
The adaptive method computes one iteration step using Euler’s Method (yi+1
j
using RK2 Method (yi+1 ). After that, the algorithm computes the relative error between the Euler’s and RK2 methods,
for each variable of the ODE system. The largest relative error (errori ) is used to calculate a new time step. The
time step increases when the solution is stable, so the simulation demand less time to be ﬁnished. Otherwise, if the
diﬀerence between the two methods is signiﬁcant, the time step is decreased to keep the numerical error under control.
The function get new h(erroi , hi ) is presented in Figure 1. It ﬁnds the new time step using errori [13] and the
current time step hi . The function needs to receive a tolerance, set by the user. The procedure to compute a new h is as
follows: If the error is lower than half tolerance, h is increased, we chose to multiply it by 1.5. If the error is between
half tolerance and the tolerance, h is kept for the next iteration. If the error is between the tolerance and the double of
the tolerance, h is decreased. We multiply it by 0.65. Otherwise, the method discards the results, divide h by 2 and
recompute the current iteration.

3.2. Comparing the methods
We compared the results computed by Euler’s, RK2 and the Adaptive methods. The numerical error was computed
by Equation 10, i.e. it just considers the action potential of each simulation, since it is the most important variable of

1096

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

Figure 1: Calculating the new time step

Table 1: Results - Time

Model
Bondarenko et al.
ten Tusscher & Panﬁlov
Garny et al.
Noble et al.

Euler (s)
352
463
136
46

Adaptive (s)
14
141
6
15

Speedup
25.1
3.3
22.7
3.0

the model.
∗
errortotal

=

(ViRK2 − Vi∗ )2

(10)

(ViRK2 )2

ViRK2 is the potential V computed by RK2, this method was chosen as our exact solution, because it is the most
accurate one. Vi∗ is the potential computed by the Euler’s or Adaptive method, at instant i.
3.3. Computational Resources
We performed the simulations on an Intel(R) Core(TM)2 Quad, 2.33GHz, 4Gb of RAM memory. The operating
system is Linux Red Hat 4.1.2-46.
4. Results and discussion
Four models were run with the methods described above. The adaptive method was executed with diﬀerent
tolerances, and this work only reports the tolerances that satisﬁed the requirement of a numerical error less than 1 %,
when compared to the solution of the RK2 method with ﬁxed time step.
The time step for Euler’s method was estimated manually, and we used the largest possible time step for the
method to converge and that resulted in a numerical error less than 1%, also compared with the RK2 method. The
Bondarenko et al. [6], Tentusscher & Panﬁlov [7] and Noble et al. [9] models must be stimulated, in some speciﬁc
periods of time. If the adaptive method uses a large time step, the stimulus could be lost. To avoid that, the time step
was limited to a maximum time step, which was chosen to be the stimulus duration. There is no maximum time step
for models that do need need to be stimulated, such as the case of the Garny et al. model [8].
Table 1 presents the runtime of the Euler’s and Adaptive Methods (in seconds) for each cardiac myocyte computational model.
Table 2 presents the numerical errors of the methods (in percentage), comparing the Euler and Adaptive methods
with RK2, for each for each cardiac myocyte computational model.

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

1097

Table 2: Results - Error

Model
Bondarenko et al.
ten Tusscher & Panﬁlov
Garny et al.
Noble et al.

Euler (%)
0.003
0.02
0.8
0.1

Adaptive (%)
0.7
0.08
0.9
0.5

Table 3: Fixed, maximum and minimum time steps for each method and model

Model
Bondarenko et al.
ten Tusscher & Panﬁlov
Garny et al.
Noble et al.

h Fixed
2e-4
1e-3
3e-6
1e-5

h Maximum
1.4e-1
5.2e-1
8.1e-4
5.5e-4

h Minimum
1.1e-4
9.2e-4
1.5e-6
6.9e-6

Table 3 presents the ﬁxed time step h used by Euler and RK2 methods, and the maximum and minimum time steps
obtained by the Adaptive method.
The Bondarenko et al. [6] model was stimulated at a frequency of 2Hz, simulating the cell activity for 10 seconds.
The stimulation was done during 0.5 ms. Euler’s method ran in 352 s, with error of 0.003 %. With tolerance of 0.2,
the adaptive method ran in 14s, with an error of 0.7 %. This numerical error can be considered satisfactory and the
speedup obtained was 25.1, with respect to the forward Euler method. Figure 2 presents how the action potential and
time step h behave during the ﬁrst second of simulation. The data are normalized.
The ten Tusscher & Panﬁlov [7] model was stimulated with a frequency of 2 Hz in a simulation of 100s of cell
activity. The stimulus duration is 1ms. The Euler method ran in 463s, with an error of 0.02 %. The adaptive method,
with a tolerance of 0.2, ran on 141s with an error of 0.08 %. The speedup was 3.3, again as compared to the execution
time of the forward Euler method. Figure 3 shows how the action potential and h behave during the ﬁrst second of
simulation. The data are normalized.
The Garny et al. [8] model was simulated by 100s. This model does not need an external stimulus and therefore
there was no need to set a maximum time step. The Euler method ran in 136s, and produced an error of 0.8%. With a
tolerance of 0.0003 for the adaptive method, the solution got error of 0.9 % in 6s of execution, with speedup of 22.7.
Figure 4 shows how the action potential and h behave during the ﬁrst second of simulation. The data are normalized.
The tolerance of 0.2 used by the other models were not small enough to satisfy the requirement of numerical error
less than 1 %. We believe this is related to the lack of a maximum time step, since this is not required for the model
of Garny et al. [8].
The model of Noble et al. [9] was stimulated at a frequency of 2Hz, simulating the cell activity for 100 seconds.
The stimulus was done during 3 ms. The Euler method was executed in 46s, with an error of 0.01 %. With tolerance
of 0.2, the adaptive method was implemented in 15 seconds, with an error of 0.5 %. The error percentage obtained
with the adaptive method was small, and the speedup obtained was slightly higher than 3. Figure 5 shows how the
action potential and h behave during the ﬁrst second of simulation. The data are normalized.
5. Conclusion
We have implemented a numerical method with an adaptive time step scheme inside the AGOS framework, a
tool that automatically generates solvers for biological models described in the CellMl language. Diﬀerent cardiac
myocyte models were tested. For all the performed tests the new method was able to keep the numerical errors under
control. In addition, in terms of execution time, the new method was always faster than the traditional forward Euler
scheme with ﬁxed time step. The new method was up to 25 times faster than the traditional scheme.
As future work, we intend to examine other models, explore techniques to implement these methods using parallel
computing with OpenMP and use these methods for the simulation of cardiac tissues. We are also looking at the
implementation of more sophisticated algorithms to adapt the time step.

1098

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

Figure 2: Voltage and time step - Bondarenko et al.

Figure 3: Voltage and time step - ten Tusscher & Panﬁlov

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

Figure 4: Voltage and time step - Garny et al.

Figure 5: Voltage and time step - Noble et al.

1099

1100

Ricardo Silva Campos et al. / Procedia Computer Science 4 (2011) 1092–1100

Acknowledgment
The authors would like to thank FAPEMIG, CAPES and CNPq.
References
[1] D. Noble, Modelling the heart: insights, failures and progress, Bioessays 24 (2002) 1155–63.
[2] C. Costa, R. Campos, F. Campos, R. W. dos Santos, Web applications supporting the development of models of chagas disease for left
ventricular myocytes of adult rats, in: Computational Science - ICCS 2008, Vol. 5103, Berlin, Germany, 2008, pp. 120–129.
[3] P. Hunter, A. Pullen, B. Smaill, Modelling total heart function, Annu Rev Biomed Eng 5 (2003) 147–177.
[4] E. J. Vigmond, M. Hughes, G. Plank, L. J. Leon, Computational tools for modeling electrical activity in cardiac tissue, J. Electrocardiol. 36
(2003) 69–74.
[5] M. Maclachlan, J. Sundnes, R. Spiteri, A comparison of non-standard solvers for odes describing cellular reactions in the heart, Comput
Methods Biomech Biomed Engin 10 (2007) 317–326.
[6] V. E. Bondarenko, G. P. Szigeti, G. C. L. Bett, S. J. Kim, R. L. Rasmusson, A computer model of the action potential of the mouse ventricular
myocytes, American Journal of Physiology (2004) H1378–H1403.
[7] K. H. W. J. ten Tusscher, A. V. Panﬁlov, Alternans and spiral breakup in a human ventricular tissue model, American Journal of Physiology,
Heart and Circulatory Physiology 3 (2006) H1088–1100.
[8] A. Garny, P. Kohl, P. J. Hunter, M. R. Boyett, D. Noble, One-dimensional rabbit sinoatrial node models, Journal of Cardiovascular Electrophysiology 14. doi:10.1046/j.1540.8167.90301.x.
[9] D. Noble, A. Varghese, P. Kohl, P. Noble, Improved guinea-pig ventricular cell model incorporating a diadic space, ikr and iks, and lengthand tension-dependent processes., The Canadian journal of cardiology 14 (1) (1998) 123–134.
URL http://view.ncbi.nlm.nih.gov/pubmed/9487284
[10] CellML, Cellml (2011).
URL http://www.cellml.org
[11] MathML, Mathml (2011).
URL http://www.w3.org/Math/
[12] C. B. Barbosa, R. W. Santos, R. AMORIM, L. N. Ciuﬀo, F. Manfroi, R. S. Oliveira, F. O. Campos, A transformation tool for ode based
models, Lecture Notes in Computer Science.
[13] S. E. Minkoﬀ, N. M. Kridler, A comparison of adaptive time stepping methods for coupled ﬂow and deformation modeling, Applied Mathematical Modelling 30 (9) (2006) 993 – 1009. doi:10.1016/j.apm.2005.08.002.
URL http://www.sciencedirect.com/science/article/B6TYC-4H5N261-1/2/43f870b3c1bef3a9c7c7c68d295c6d69

