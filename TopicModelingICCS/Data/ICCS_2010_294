Procedia Computer
Science
Procedia Computer
001(2010)
Procedia
ComputerScience
Science
(2012)1–9
367–375

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Characterizing Sparse Preconditioner Performance for the Support
Vector Machine Kernel
Anirban Chatterjee, Kelly Fermoyle, Padma Raghavan
Department of Computer Science and Engineering, The Pennsylvania State University

Abstract
A two-class Support Vector Machine (SVM) classiﬁer ﬁnds a hyperplane that separates two classes of data with
the maximum margin. In a ﬁrst learning phase, SVM involves the construction and solution of a primal-dual interiorpoint optimization problem. Each iteration of the interior-point method (IPM) requires a sparse linear system solution,
which dominates the execution time of SVM learning. Solving this linear system can often be computationally
expensive depending on the conditioning of the matrix. Consequently, preconditioned linear systems can lead to
improved SVM performance while maintaining the classiﬁcation accuracy. In this paper, we seek to characterize
the role of preconditioning schemes for enhancing the SVM classiﬁer performance. We compare and report on the
solution time, convergence, and number of Newton iterations of the iterior-point method and classiﬁcation accuracy
of the SVM for 6 well-accepted preconditioning schemes and datasets chosen from well-known machine learning
repositories. In particular, we introduce Δ-IPM that sparsiﬁes the linear system at each iteration of the IPM. Our results
indicate that on average the Jacobi and SSOR preconditioners perform 10.01 times better than other preconditioning
schemes for IPM and 8.83 times better for Δ-IPM. Also, across all datasets Jacobi and SSOR perform between 2 to 30
times better than other schemes in both IPM and Δ-IPM. Moreover, Δ-IPM obtains a speedup over IPM performance
on average by 1.25 and as much as 2 times speedup in the best case.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Support Vector Machine, linear system preconditioning scheme, performance

1. Introduction
A support vector machine (SVM) classiﬁer [1, 2], ﬁrst introduced by Vapnik [1], is widely used to solve supervised
classiﬁcation problems from diﬀerent application domains such as document classiﬁcation [3], gene classiﬁcation [4],
content-based image retrieval [5], and many others. The two-class SVM classiﬁes data by ﬁnding a hyperplane that
separates the data into two diﬀerent classes. Additionally, it ensures that the separation obtained is maximum and the
separating margins can be identiﬁed by a few data elements called support vectors. In practice, the SVM classiﬁer
problem translates to a structured convex quadratic optimization formulation, which involves a large linear system
solution to obtain the hyperplane parameters. The SVM classiﬁer was discussed in greater detail by Burges [2]. The
Email addresses: achatter@cse.psu.edu (Anirban Chatterjee), kjf198@cse.psu.edu (Kelly Fermoyle), raghavan@cse.psu.edu
(Padma Raghavan)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.040

368

A.A.Chatterjee
ComputerScience
Science
(2012)1–9
367–375
Chatterjeeetetal.
al.// Procedia
Procedia Computer
001(2010)

2

implementations of SVM can be studied in two broad categories: (i) active set methods to solve the convex quadratic
problem (Joachims [6], Osuna et al. [7], Platt [8], and Keerthi et al. [9]), and (ii) primal-dual formulation using the
interior-point method (IPM) (Magasarian and Mussicant [10] and Ferris and Munson [11]).
In this paper, we focus on the primal-dual formulation that solves a large linear system at each Newton iteration of
the interior-point method to obtain the optimal solution. Our goal is to characterize and potentially improve the performance of this linear system solution, thus enhancing the quality and performance of SVM learning. This linear system
can be solved either using a direct solver (such as sparse Cholesky solver) or an iterative solver (such as conjugate
gradient solver). However, since the IPM requires a linear system solution at each step and the linear system is large,
preconditioned iterative methods are preferred over direct methods. We use the preconditioned conjugate gradient
solver [12] with a suite of well-accepted matrix preconditioners to characterize the role of matrix preconditioners in
improving SVM quality and performance. We conjecture that certain preconditioning techniques may perform better
than others depending on the numerical and structural properties of the application data. Additionally, we propose our
Δ-IPM ﬁltering scheme that thresholds the coeﬃcient matrix in the linear system before preconditioning and solving
it at each IPM iteration. Δ-IPM aims to drop numerically insigniﬁcant values, which we conjecture may be due to
inherently noisy data, in order to obtain an improved solution time.
The remainder of this paper is organized as follows. Section 2 discusses background and related work in generating and solving the SVM classiﬁer problem. Section 3 presents a description of interior-point method and a
characterization methodology. We present our experimental evaluation in Section 4. Finally, we present our summary
in Section 5.
2. Background and related work
In this section, we ﬁrst present a description of the SVM classiﬁcation problem followed by a discussion on
popular SVM formulations.
2.1. Support Vector Machines
A two class support vector machine (SVM) classiﬁer [1, 2] ﬁnds a hyperplane that separates the two classes of
data with maximum margin. Finding a maximal separating hyperplane in the training data essentially translates to
solving a convex quadratic optimization problem [13].
Consider a dataset X, with n observations, m features (or dimensions), and the ith observation belonging to a
distinct class represented by di ∈ {−1, 1}. We deﬁne two maximal separating hyperplanes as w · x + β = −1, and
w · x + β = 1, where x is a sample observation, w is the weight vector deﬁning the hyperplane, and β is the bias.
Clearly, the separation between the two planes is 2/||w||2 . Therefore, the planes are at maximum separation from each
other when ||w||22 is minimized. This is the motivation for the primal objective function. Section 2.1.1 presents the
constrained primal problem in greater detail.
2.1.1. SVM problem formulation
In this section, we brieﬂy describe the main steps in formulating the primal-dual SVM solution as stated by Gertz
and Griﬃn [14]. We use an implementation of this formulation for our experiments.
We deﬁne D as a diagonal matrix with the diagonal given by d = (d1 , . . . , dn ). Vector e is a vector of all ones.
The components of vector z represent the training error associated with each point. Equation 1 presents the primal
formulation of the SVM optimization problem. The training error terms in the objective function and the constraint
are a form of regularization to prevent overﬁtting. Typically, this regularization is referred as 1-norm regularization.
The goal of the objective function is to minimize the squared norm of the weight vector while minimizing the training
error.
minimize ||w||22 + τeT z
subject to D(Xw − βe) ≥ e − z
(1)
z ≥ 0
The solution of the primal problem is constrained by a set of inequality constraints. The inequality constraints
in the primal problem although linear can be diﬃcult to solve. Therefore, we formulate the dual of the problem and
develop a primal-dual formulation that simpliﬁes the solution process.

A. Chatterjee
et al.et/ Procedia
Computer
Science
1 00
(2012)
367–375
A. Chatterjee
al. / Procedia
Computer
Science
(2010)
1–9

369
3

2.2. Assigning a new sample to a class
Once the optimal planes are found using the primal-dual formulation, the SVM assigns a class to a new sample
using a simple decision criteria. Equation 2 represents the decision function d(x).
d(x) =

1 if wT x + β ≥ 0;
−1 otherwise

(2)

2.3. SVM implementations
There are multiple implementations of the SVM classiﬁer available. A widely used implementation of SVM is
Lin et al.’s LIBSVM [15], which is a package that provides a uniﬁed interface to multiple SVM implementations
and related tools. Jochims developed SVM-Perf [6] as an alternative but equivalent formulation of SVM, that uses a
Cutting-Plane algorithm for training linear SVMs in provably linear time. This algorithm uses an active set method to
solve the optimization problem.
In this paper, we focus primarily on the interior-point method to solve the primal-dual SVM optimization problem.
Mangasarians’ Lagrangian SVM (LSVM) [10] proposes an iterative method to solve the lagrangian for the dual of a
reformulation of the convex quadratic problem. This is one of the initial works on solving an SVM using the interiorpoint method. Subsequently, Ferris and Munson [11] extended the primal-dual formulation to solve massive support
vector machines. Chang et al.’s Parallel Support Vector Machine (PSVM) [16] algorithm performs a row-based
approximate matrix factorization that reduces memory requirements and improves computation time. The main step
in the PSVM algorithm is an Incomplete Cholesky Factorization that distributes n training samples on m processors
and performs factorizations simultaneously on these machines. In the next step, upon factorization the reduced kernel
matrix is solved in parallel using the interior-point method. For n observations and p dimensions (p
n), PSVM
reduces memory requirement from O(n2 ) to O(np/m), and improves computation time to O(np2 /m).
Recently, Gertz and Griﬃn [14], in their report, developed a preconditioner for the linear system (M = 2I +
Y T Ω−1 Y − σ1 yd yTd ) within an SVM solver. Their approach uses the fact that the product term in the linear system
(Y T Ω−1 Y) can be represented as the sum of individual scaled outer products (Σni ω1i yi yTi ). The scale of the outer
products can vary from 0 to ∞, hence the proposed preconditioner (i) either omits terms in the summation that are
numerically insigniﬁcant, or (ii) replaces these small terms by a matrix containing only the diagonal elements. Gertz
and Griﬃn show that, typically, replacing the smaller terms with the diagonal matrix is more eﬃcient. In this paper,
we use the same formulation and notation as used in [14].
3. Characterizing sparse preconditioner performance for SVM
To characterize the performance of preconditioning schemes for the SVM classiﬁer, we start by ﬁrst presenting
the interior-point method as discussed by Gertz and Griﬃn [14]. We then provide a description of our comparison
methodology and the preconditioners considered.
3.1. Interior-point method to solve the SVM optimization problem
The interior-point method is a well-known technique used to solve convex primal-dual optimization problems.
This method repeatedly solves Newton-like systems obtained by perturbing the optimality criteria. We deﬁne Y = DX
and simplify Dβe as dβ. We use ρβ to denote the residual, which is a scalar quantity. The interior-point method as
deﬁned in Gertz and Griﬃn [14] is represented using Equations (3a) to (3f) (Equation 4 in [14]), which present the
Newton system that the interior-point method solves repeatedly until convergence.
2Δw − Y T Δv =
eT DΔv =
−Δv − Δu =
YΔw − dΔβ + Δz − Δs =
ZΔu + UΔz =
S Δv + VΔs =

−rw
−ρβ

(3a)
(3b)

−ru
−rv

(3e)
(3f)

−rz
−r s

(3c)
(3d)

370

A.A.Chatterjee
ComputerScience
Science
(2012)1–9
367–375
Chatterjeeetetal.
al.// Procedia
Procedia Computer
001(2010)

4

where, ru = Zu, and rv = S v.
We deﬁne rΩ = rˆ s − U −1 Z rˆz , where the residuals are deﬁned as rˆz = rz + Z −1 ru and rˆ s = r s + V −1 rv .
Equation 4 presents the matrix representation of the equations. We deﬁne Ω = V −1 S + U −1 Z (Equation 7 in [14]).
⎛
⎞
⎞⎛
⎞
⎛
⎜⎜⎜ rw ⎟⎟⎟
⎜⎜⎜ 2I
0 −Y T ⎟⎟⎟ ⎜⎜⎜ Δw ⎟⎟⎟
⎜
⎟
⎟
⎜⎜⎜
⎟
⎜
0
dT ⎟⎟⎟⎟ ⎜⎜⎜⎜ Δβ ⎟⎟⎟⎟ = − ⎜⎜⎜⎜ ρβ ⎟⎟⎟⎟
(4)
⎜⎜⎝ 0
⎝
⎠
⎠⎝
⎠
Y −d
Ω
Δv
rΩ

Finally, a simple row elimination of the above sparse linear system results in an equivalent block-triangular system
presented in Equation 5. These equations have been reproduced from [14].
⎛
⎞
⎞⎛
⎞
⎛
⎜⎜⎜ rw + Y T Ω−1 rΩ ⎟⎟⎟
⎜⎜⎜ 2I + −Y T Ω−1 Y −Y T Ω−1 d 0 ⎟⎟⎟ ⎜⎜⎜ Δw ⎟⎟⎟
⎜
⎟
⎜
⎟
⎟
⎜⎜⎜
−dT Ω−1 Y
dT Ω−1 d
0 ⎟⎟⎟⎟ ⎜⎜⎜⎜ Δβ ⎟⎟⎟⎟ = − ⎜⎜⎜⎜ ρβ − dT Ω−1 rΩ ⎟⎟⎟⎟
(5)
⎜⎜⎝
⎝
⎠
⎠⎝
⎠
Δv
Y
−d
Ω
rΩ

Execution time of this system is dominated by repeated solution to the system in Equation 5 until convergence, which
ﬁnally yields the weight and the bias vectors.

3.2. Characterization methodology
The training time in a support vector machine typically dominates the classiﬁcation time. More importantly, the
training time is primarily dependent on the time required to solve the sparse linear system (described in Section 3.1)
at each newton iteration of the interior point method. Alternatively, matrix preconditioning techniques have proven
eﬀective in reducing solution times by improving convergence of sparse linear systems [17]. However, for the SVM
problem very little is known about the eﬀect of diﬀerent preconditioners on training time. In this paper, we seek to
evaluate the role of matrix preconditioners in improving the performance of this sparse linear system solution.
We refer to the interior-point formulation described in Section 3.1 as IPM in the rest of the paper. We propose an
IPM that sparsiﬁes the coeﬃcient matrix in each iteration by dropping all elements in the matrix less than a particular
threshold Δ before solving the linear system. We refer to our IPM scheme as Δ-IPM. We conjecture that due to the
nature of the datasets many elements in the coeﬃcient matrix may be numerically insigniﬁcant and can be dropped
without aﬀecting convergence or the classiﬁcation accuracy. Also, dropping elements implies that we increase the
sparsity in the coeﬃcient matrix which may result in faster solution times. However, the percentage of elements
dropped from the matrix can vary largely depending on the dataset.
Preconditioning Methods. We select a wide spectrum of preconditioners from very simple (eg. Jacobi) to
relatively complicated (eg. Algebraic Multigrid). Table 1 lists the preconditioners used in this paper. The ICC and
ILU preconditioners were applied with level-zero ﬁll, and the ILUT threshold was set to 10−2 .
Notation
Jacobi
SSOR
ICC
ILU
ILUT
AMG

Description
Jacobi preconditioner [17]
Symmetric Successive Over-relaxation [17]
Incomplete Cholesky (level 0 ﬁll) [18]
Incomplete LU (level 0 ﬁll) [19]
Incomplete LU (drop-threshold) [19]
Algebraic Multigrid (BoomerAMG) [20]
Table 1: List of preconditioners.

Our main aim is to characterize the solution time while maintaining solution quality and convergence. We also
observe classiﬁcation quality on a test data suite for each method, ideally to ﬁnd preconditioners that reduce solution
time while maintaining classiﬁcation accuracy.

A. Chatterjee
et al.et/ Procedia
Computer
Science
1 00
(2012)
367–375
A. Chatterjee
al. / Procedia
Computer
Science
(2010)
1–9

371
5

4. Experiments and evaluation
In this section, we ﬁrst describe our setup for experiments that includes a description of the preconditioning methods, the SVM implementation, and details of the datasets used. We then deﬁne our metrics for evaluating performance
of the preconditioning techniques. Finally, we present results and ﬁndings on the performance of our selected preconditioners on our sample datasets.
4.1. Experimental setup
We evaluate the performance of 6 sparse linear system preconditioners for 6 popular datasets obtained from the
UCI Machine Learning Repository [21].
Support Vector Machine implementation. We adapt the Object Oriented Quadratic Programming (OOQP)
package [22] to implement our SVM convex quadratic problem described in Sections 2.1 and 3.1. The linear system
in the SVM formulation is instrumented using PETSc [23, 24, 25], and is solved using the preconditioned conjugate
gradient (PCG) solver in PETSc.
Description of datasets. We compare the performance of the 6 preconditioners (listed in Table 1) on a suite of 6
popular datasets. Table 2 lists the datasets along with the number of observations and dimensions in each dataset. It
is important to mention that for the CovType, SPAM, Mushrooms, and Adult datasets we projected the data to higher
dimensions as described in [14].
Dataset
CovType
Spam
Gisette
Mushrooms
Adult
Realsim

Observations
2,000
2,601
6,000
8,124
11,220
22,000

Dimensions
1,540
1,711
5,000
6,441
7,750
20,958

Table 2: List of datasets.

4.2. Evaluation and discussion
We ﬁrst describe the metrics used for evaluating preconditoner performance, and then present a discussion of our
results.
Metrics for evaluation. We use total solution time (measured in seconds) as a measure of overall performance.
Total solution time includes the time required to solve the predictor step and the corrector step over multiple iterations
of the IPM. Additionally, we report IPM iterations along with relative residual error obtained to evaluate convergence
of the IPM with the preconditioner. Additionally, we monitor classiﬁcation accuracy (percentage of correctly classiﬁed entities) to determine the quality of the classiﬁcation or hyperplane obtained after training.
IPM convergence. Table 3 presents the total solution time required to ﬁnd a separating hyperplane during SVM
learning. An (*) in Table 3 indicates that the method terminated at an intermediate iteration with a zero pivot. We
observe that the Jacobi preconditioning scheme performs better than other schemes for the CovType, Gisette, and
Mushrooms datasets while the SSOR scheme leads performance for SPAM, Adult, and Real-Sim datasets. For our
suite of datasets, the Jacobi or SSOR preconditioner are 2 to 30 times faster than ICC, ILU, ILUT, and AMG methods
while obtaining similar accuracy. Typically, linear systems resulting from machine learning datasets display diverse
properties, and Table 3 indicates such variations. Our results indicate that a simple preconditioner like Jacobi or SSOR
can be more appropriate than a more complex method like ICC or AMG.

372

A.A.Chatterjee
ComputerScience
Science
(2012)1–9
367–375
Chatterjeeetetal.
al.// Procedia
Procedia Computer
001(2010)

Jacobi
CovType
SPAM
Gisette
Mushrooms
Adult
Real-Sim
Total

62.4
306.6
1,608.9
1,132.6
2, 620.2
2, 243.0
5,730.7

IPM Solution Time (seconds)
SSOR
ILU
ILUT
134.0
148.0
15, 626.1
2, 062.1
717.1
542.5
18,687.3

73.9
4, 676.4
16, 877.1
2, 173.5
9, 249.4
∗
33,050.3

68.2
4, 660.6
11, 269.7
2, 311.5
8,427.9
∗
26,737.9

6

ICC

AMG

74.0
3, 962.7
7, 760.6
2, 089.3
8, 514.2
∗
22,400.8

383.4
2, 299.4
11, 315.0
3, 000.9
7, 889.9
14, 877.9
24,889.0

Table 3: SVM training time (in seconds) required using each preconditioner. (*) indicates that method failed due to a zero pivot. Total indicates
the sum of the times per method across all datasets other than Real-Sim.

Table 4 indicates the relative residual obtained by each dataset-preconditioner pair upon convergence to a hyperplane. We set our convergence threshold (δ) to 10−8 and our analysis suggests that a successful preconditioner only
needs to obtain a fast-approximate solution (relative residual approximately close to δ) which can often prove to be a
better choice than solving for the optimal plane. We observe that although the relative residual for the ICC method is
the lowest in case of CovType, the Jacobi method obtains almost similar classiﬁcation accuracy 16% faster than ICC.

Jacobi
CovType
SPAM
Gisette
Mushrooms
Adult
Real-Sim

2e-03
4e-06
1e-13
6e-08
1e-05
3e-04

Relative Residual
SSOR
ILU ILUT
1e-03
8e-07
2e-09
4e-06
6e-04
2e-03

1e-04
6e-10
1e-13
6e-09
4e-06
*

1e-04
6e-10
1e-13
6e-09
4e-06
*

ICC

AMG

9e-05
6e-06
1e-13
4e-09
4e-06
*

1e-03
4e-06
1e-13
6e-08
1e-05
3e-04

Table 4: A summary of realtive residuals obtained by each preconditioning method.

Table 5 presents the number of interior-point method iterations required by each dataset-preconditioner pair.
Figures 1(a) and (b) illustrate the total training time and the number of non-linear iterations of the Mehrotra-PredictorCorrector method, respectively. We observe that on average all pairs require the same number of iterations, which
implies that the time for SVM learning is primarily dominated by the time required to solve the linear system.
Mehrotra-Predictor-Corrector Iterations
Jacobi SSOR ILU ILUT ICC
CovType
SPAM
Gisette
Mushrooms
Adult
Real-Sim

24
38
16
30
30
19

28
41
18
30
25
18

35
36
16
29
28
*

35
36
16
29
28
*

37
39
16
27
27
*

AMG
36
38
16
29
27
19

Table 5: Number of interior-point iterations obtained for the SVM training phase using each preconditioner.

Finally, Table 6 presents the classsiﬁcation accuracy obtained on our dataset suite when a particular preconditioner was applied during the SVM learning phase. Our accuracy results are proof that a simple method that obtains an
approximate separating hyperplane relatively fast performs as well as other time consuming preconditioning methods
that seek to obtain a near optimal separation.

373
7

A. Chatterjee
et al.et/ Procedia
Computer
Science
1 00
(2012)
367–375
A. Chatterjee
al. / Procedia
Computer
Science
(2010)
1–9

(a)

(b)

Figure 1: (a) Total time, and (b) number of iterations required to solve interior-point method (IPM)

Jacobi
CovType
SPAM
Gisette
Mushrooms
Adult
Real-Sim

74.95
81.30
100.00
100.00
81.54
97.32

Classiﬁcation Accuracy
SSOR
ILU
ILUT
66.65
81.30
100.00
100.00
81.50
97.32

73.95
81.80
100.00
100.00
81.56
*

73.95
81.80
100.00
100.00
81.56
*

ICC

AMG

73.95
81.80
100.00
100.00
81.56
*

72.55
81.25
100.00
100.00
81.54
97.32

Table 6: Classiﬁcation accuracy obtained by each preconditioner on the same test data. For datasets Gisette and Mushrooms testing data was not
available to provide accuracy results therefore we used the training data to test.

Δ-IPM convergence. We selected 10−3 as our Δ threshold for our experiments using the ﬁrst ﬁve datasets (as
Real-Sim resulted in zero-pivot for ILU, ILUT, and ICC). We observe that on average our proposed method Δ-IPM
drops between 15% to 85% of the nonzeros in the coeﬃcient matrix across all preconditioner-dataset pairs. This
increase in sparsity directly results in improved solution times. Table 7 presents the solution time using Δ-IPM. We
observe that on average we get a speedup of 1.25 and in case of Gisette the speedup is as high as 1.96 in the best case.
Additionally, the Jacobi preconditioner demonstrates the best total time across the ﬁve datasets.

Jacobi
CovType
SPAM
Gisette
Mushrooms
Adult
Total

62.2
293.1
1679.5
806.7
1865.7
4707.2

Δ-IPM Solution Time (seconds)
SSOR
ILU
ILUT

ICC

AMG

54.7
3497
9308.9
1831.3
6784.2
21476.1

69
3343.8
5135.9
1545
5575
15668.7

342.4
1490.1
8246.2
2947.1
6043.1
19068.9

123.3
138.5
11903.3
2153.2
549.9
14868.2

57.9
4229.5
8599.4
1693.1
8535.7
23115.6

Table 7: Δ-IPM solution times obtained for each preconditioned system after thresholding the matrix at each predictor-corrector iteration (Δ =
10−3 ). An (*) indicated that the method could not converge.

We observe that the classiﬁcation accuracy of Δ-IPM is comparable to IPM and in some cases identical. Therefore,

374

A.A.Chatterjee
ComputerScience
Science
(2012)1–9
367–375
Chatterjeeetetal.
al.// Procedia
Procedia Computer
001(2010)

8

Δ-IPM achieves signiﬁcant speedups while classifying as well as IPM. Our results reinforce the preconditioning ideas
discussed in [14] and show that signiﬁcant speedups can be obtained by dropping numerically insigniﬁcant elements
in the matrix.
5. Conclusion
In this paper, we provided two important intuitions on improving the performance of the support vector machine.
First, we evaluated the role of 6 diﬀerent matrix preconditioners on SVM solution time and showed that the Jacobi
and SSOR preconditioners are 2 to 30 times more eﬃcient than other preconditioners like ILU, ILUT, ICC, and AMG.
This leads us to believe that a simple preconditioner can help obtain an approximate separating hyperplane which may
be as eﬀective as a near optimal plane but can be obtained signiﬁcantly faster. Additionally, since the training time is
low, such a system could be trained more often to maintain higher accuracy. Furthermore, we show that our proposed
method Δ-IPM that increases the sparsity of the linear system using appropriate thresholding of the coeﬃcient matrix
(before preconditioning and solving the linear system) can provide on average a speedup of 1.25 across the broad
spectrum of preconditioners. These ﬁndings can (i) prove useful in designing novel preconditioning methods for
the SVM problem that are both simple and eﬀective, and (ii) help understand numerical properties of linear systems
obtained from machine learning datasets better. We further plan to explore various tradeoﬀs involved in designing
preconditioners especially for systems that show high degree of variability and instability.
6. Acknowledgement
Our research was supported by NSF Grants CCF-0830679, OCI-0821527, and CNS-0720749.
7. References
[1] V. N. Vapnik, The Nature of Statistical Learning Theory (Information Science and Statistics), Springer, 1999.
[2] C. J. Burges, A tutorial on support vector machines for pattern recognition, Data Mining and Knowledge Discovery 2 (1998) 121–167.
[3] T. Joachims, Text categorization with suport vector machines: Learning with many relevant features, in: ECML ’98: Proceedings of the 10th
European Conference on Machine Learning, Springer-Verlag, London, UK, 1998, pp. 137–142.
[4] J. Zhang, R. Lee, Y. J. Wang, Support vector machine classiﬁcations for microarray expression data set, Computational Intelligence and
Multimedia Applications, International Conference on 0 (2003) 67. doi:http://doi.ieeecomputersociety.org/10.1109/ICCIMA.2003.1238102.
[5] S. Tong, E. Chang, Support vector machine active learning for image retrieval, in: MULTIMEDIA ’01: Proceedings of the ninth ACM
international conference on Multimedia, ACM, New York, NY, USA, 2001, pp. 107–118. doi:http://doi.acm.org/10.1145/500141.500159.
[6] T. Joachims, Training linear svms in linear time, in: KDD ’06: Proceedings of the 12th ACM SIGKDD international conference on Knowledge
discovery and data mining, ACM, New York, NY, USA, 2006, pp. 217–226. doi:http://doi.acm.org/10.1145/1150402.1150429.
[7] E. Osuna, R. Freund, F. Girosi, Improved training algorithm for support vector machines (1997).
[8] J. C. Platt, Fast training of support vector machines using sequential minimal optimization (1999) 185–208.
[9] S. S. Keerthi, S. K. Shevade, C. Bhattacharyya, K. R. K. Murthy, Improvements to platt’s smo algorithm for svm classiﬁer design, Neural
Comput. 13 (3) (2001) 637–649. doi:http://dx.doi.org/10.1162/089976601300014493.
[10] O. L. Mangasarian, D. R. Musicant, Lagrangian support vector machines, J. Mach. Learn. Res. 1 (2001) 161–177.
doi:http://dx.doi.org/10.1162/15324430152748218.
[11] M. C. Ferris, T. S. Munson, Interior point methods for massive support vector machines, SIAM Journal on Optimization 13 (2003) 783–804.
[12] J. R. Shewchuk, An introduction to the conjugate gradient method without the agonizing pain, Tech. rep., Pittsburgh, PA, USA (1994).
[13] J. Nocedal, S. J. Wright, Numerical Optimization, Springer, 1999.
[14] E. M. Gertz, J. Griﬃn, Support vector machine classiﬁers for large datasets, Technical Memorandum ANL/MCS-TM-289.
[15] C.-C.
Chang,
C.-J.
Lin,
LIBSVM:
a
library
for
support
vector
machines,
software
available
at
http://www.csie.ntu.edu.tw/ cjlin/libsvm (2001).
[16] E. Y. Chang, K. Zhu, H. Wang, H. Bai, J. Li, Z. Qiu, H. Cui, Psvm: Parallelizing support vector machines on distributed computers, in: NIPS,
2007, software available at http://code.google.com/p/psvm.
[17] Y. Saad, Iterative Methods for Sparse Linear Systems, Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 2003.
[18] T. F. Chan, Henk, A. Van, H. A. van der Vorst, Approximate and incomplete factorizations, in: ICASE/LaRC Interdisciplinary Series in
Science and Engineering, 1994, pp. 167–202.
[19] T. Dupont, R. P. Kendall, J. Rachford, H. H., An approximate factorization procedure for solving self-adjoint elliptic diﬀerence equations,
SIAM Journal on Numerical Analysis 5 (3) (1968) 559–573.
URL http://www.jstor.org/stable/2949704
[20] V. E. Henson, U. M. Yang, Boomeramg: A parallel algebraic multigrid solver and preconditioner, Applied Numerical Mathematics 41 (1)
(2002) 155 – 177. doi:DOI: 10.1016/S0168-9274(01)00115-5.

A. Chatterjee
et al.et/ Procedia
Computer
Science
1 00
(2012)
367–375
A. Chatterjee
al. / Procedia
Computer
Science
(2010)
1–9

375
9

[21] A. Asuncion, D. Newman, UCI machine learning repository (2007).
URL http://www.ics.uci.edu/∼mlearn/MLRepository.html
[22] E. M. Gertz, S. J. Wright, Object-oriented software for quadratic programming, ACM Trans. Math. Softw. 29 (1) (2003) 58–81.
doi:http://doi.acm.org/10.1145/641876.641880.
[23] S. Balay, K. Buschelman, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, B. F. Smith, H. Zhang, PETSc Web page,
http://www.mcs.anl.gov/petsc (2009).
[24] S. Balay, K. Buschelman, V. Eijkhout, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, B. F. Smith, H. Zhang, PETSc users manual,
Tech. Rep. ANL-95/11 - Revision 3.0.0, Argonne National Laboratory (2008).
[25] S. Balay, W. D. Gropp, L. C. McInnes, B. F. Smith, Eﬃcient management of parallelism in object oriented numerical software libraries, in:
E. Arge, A. M. Bruaset, H. P. Langtangen (Eds.), Modern Software Tools in Scientiﬁc Computing, Birkh¨auser Press, 1997, pp. 163–202.

