Procedia Computer Science
Volume 80, 2016, Pages 1301–1312
ICCS 2016. The International Conference on Computational
Science

DarcyLite: A Matlab Toolbox for Darcy Flow
Computation
Jiangguo Liu1 , Farrah Sadre-Marandi2 , and Zhuoran Wang3
1

∗

Department of Mathematics, Colorado State University (USA), liu@math.colostate.edu
Mathematical Biosciences Institute, Ohio State University (USA), sadre.1@mbi.osu.edu
Department of Mathematics, Colorado State University (USA), wangz@math.colostate.edu

2
3

Abstract
DarcyLite is a Matlab toolbox for numerical simulations of ﬂow and transport in 2-dim porous
media. This paper focuses on the ﬁnite element (FE) methods and the corresponding code
modules in DarcyLite for solving the Darcy equation. Speciﬁcally, four major types of ﬁnite
element solvers, the continuous Galerkin (CG), the discontinuous Galerkin (DG), the weak
Galerkin (WG), and the mixed ﬁnite element methods (MFEM), are examined. Furthermore,
overall design and implementation strategies in DarcyLite are discussed. Numerical results are
included to demonstrate the usage and performance of this toolbox.
Keywords: Darcy ﬂow, Flow in porous media, Mixed ﬁnite element methods, Weak Galerkin

1

Introduction

The Darcy’s law is a fundamental equation for modeling ﬂow in porous media. It is usually
further coupled with transport equations. Two examples amongst the vast applications in this
regard are oil recovery in petroleum reservoirs [4, 10, 13] and drug delivery to tumors. Eﬃcient
and robust Darcy solvers are needed for transport simulators [6]. There exist many ﬁnite
element solvers for the Darcy equation, or more generally second order elliptic boundary value
problems, e.g., the continuous Galerkin ﬁnite element methods [5], the discontinuous Galerkin
ﬁnite element methods [2], the enhanced Galerkin (EG) ﬁnite element methods [13], the mixed
ﬁnite element methods [7], and the newly developed weak Galerkin ﬁnite element methods
[10, 16]. These types of ﬁnite element methods have distinctive features in addition to certain
common features. Diﬀerent ﬁnite element solvers might be favored by diﬀerent users and/or
applications. Their implementations share some common strategies but also need diﬀerent
treatments [11]. Based on these considerations, we have developed DarcyLite, a Matlab toolbox
that contains solvers for the Darcy equation and concentration transport equations. Matlab is
chosen as the programming language, due to its popularity, easiness for coding, and integrated
∗ All

three authors were partially supported by US National Science Foundation Grant DMS-1419077.

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.485

1301

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

Liu, Sadre-Marandi and Wang

graphics functionalities. This toolbox is easy to use and eﬃciently solves medium-size 2-dim
ﬂow and transport problems. It is expandable. This allows incorporation of other (new) types
of solvers for ﬂow and transport problems. But this paper focuses on the Darcy solvers.
In this paper, we discuss mainly four ﬁnite element solvers (CG, DG, WG, MFEM) and their
Matlab implementations in DarcyLite. This includes details on mesh data structure, quadratures, ﬁnite element mass and stiﬀness matrices, handling of boundary conditions, assembly of
global discrete linear systems, computation of numerical velocity and normal ﬂuxes on edges,
examination of local mass conservation, and presentation of numerical pressure and velocity. A
numerical example is included to demonstrate the use and eﬃciency of this toolbox.
We consider 2-dim elliptic boundary value problems (Darcy problems) formulated as
∇ · (−K∇p) ≡ ∇ · u = f,
p = pD , x ∈ Γ ,

x ∈ Ω,

u · n = u N , x ∈ ΓN ,

D

(1)

where Ω ⊂ R2 is a bounded polygonal domain, p is the primal unknown (pressure), K is a
hydraulic conductivity (permeability) tensor that is uniformly symmetric positive-deﬁnite, f
is a source term, pD , uN are respectively Dirichlet and Neumann boundary data, n the unit
outward normal vector on ∂Ω, which has a nonoverlapping decomposition ΓD ∪ ΓN .
We deﬁne a subspace and a manifold respectively for scalar-valued functions as follows
HD,0 (Ω) = {p ∈ H 1 (Ω) : p|ΓD = 0},

HD,pD (Ω) = {p ∈ H 1 (Ω) : p|ΓD = pD }.

1
The variational form for the primal variable pressure reads as: Seek p ∈ HD,p
(Ω) such that
D

Ω

K∇p · ∇q =

Ω

fq −

ΓN

1
∀q ∈ HD,0
(Ω).

uN q,

(2)

The Darcy equation can also be rewritten as a system of two ﬁrst-order equations by considering the primal variable (pressure) and ﬂux (velocity u = −K∇p) as follows
K−1 u + ∇p = 0,

∇ · u = f.

(3)

We deﬁne a subspace and a manifold respectively for vector-valued functions as follows
HN,0 (div, Ω) = {v ∈ L2 (Ω)2 : divv ∈ L2 (Ω), v|ΓN = 0},
HN,uN (div, Ω) = {v ∈ L2 (Ω)2 : divv ∈ L2 (Ω), v|ΓN · n = uN }.
The mixed variational formulation reads as: Seek u ∈ HN,uN (div, Ω) and p ∈ L2 (Ω) such that
⎧
⎪
⎨

Ω

⎪
⎩ −

(K−1 u) · v −
Ω

(∇ · u)q = −

Ω

p(∇ · v) = −
Ω

ΓD

pD v · n,

∀v ∈ HN,0 (div, Ω),
∀q ∈ L2 (Ω).

f q,

(4)

For Darcy FE solvers, two desired properties are (assuming uh is the numerical velocity):
• Local mass conservation: For any element E with n being the outward unit normal
vector on its boundary ∂E, there holds
uh · n =
∂E

1302

f.
E

(5)

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

Liu, Sadre-Marandi and Wang

• Normal ﬂux continuity (in the integral form): For an interior edge γ shared by two
elements Ei that have respectively outward unit normal vectors ni (i = 1, 2), there holds
γ

u h | E1 · n 1 +

γ

uh |E2 · n2 = 0.

(6)

These important quantities are set as standard outputs of the FE solvers in this toolbox:
(1) Numerical pressure average over each element;
(2) Numerical velocity at each element center (and if needed, coeﬃcients in the basis of the
elementwise approximation subspace, e.g., RT0 or RT[0] );
(3) Outward normal ﬂuxes on all edges of each element;
(4) Local-mass-conservation residual on each element if a FE solver is not locally conservative;
(5) Normal ﬂux discrepancy across each interior edge if the normal ﬂuxes are not continuous.

2

FE Solvers for Darcy Equation: CG, DG, WG, MFEM

2.1

Continuous Galerkin (CG)

The CG solvers for the Darcy equation are based on discretizations of the primal variational
formulation (2). CG P1 on triangular meshes and CG Q1 on rectangular meshes are most
frequently used. For a triangular mesh Th with no hanging nodes, let Vh be the space of all
continuous piecewise linear polynomials on Th . Let V0h = Vh ∩HD,0 (Ω) and VDh = Vh ∩HD,pD (Ω)
(after Lagrangian interpolation of Dirichlet boundary data being performed). A ﬁnite element
scheme using CG P1 for the pressure is established as: Seek ph ∈ VDh such that
K∇ph · ∇q =
T ∈Th

E

fq −
T ∈Th

T

∀q ∈ V0h .

uN q,
γ∈ΓN
h

γ

(7)

After the numerical pressure ph is obtained, the numerical velocity is calculated ad hoc [4].
The CG P1 basis functions are actually barycentric coordinates. Computation and assembly
of element stiﬀness matrices are relatively easy. CG P1 or Q1 schemes have the least numbers
of unknowns. But CG schemes are not locally mass-conservative and do not have continuous
normal ﬂuxes across edges [8]. Post-processing is needed [5] to render a numerical velocity the
above two properties.

2.2

Discontinuous Galerkin (DG)

Let Eh be a rectangular or triangular mesh, deﬁne Vhk as the space of (discontinuous) piecewise
polynomials with a total degree ≤ k on Eh . A DG scheme seeks ph ∈ Vhk such that [13]
Ah (ph , q) = F(q),

∀q ∈ Vhk ,

(8)

where
K∇ph · ∇q −

Ah (ph , q) =
E∈Eh

E

{K∇ph · n}[q]
γ∈ΓIh ∪ΓD
h

γ

{K∇q · n}[ph ] +

+β
γ∈ΓIh ∪ΓD
h

γ

γ∈ΓIh ∪ΓD
h

αγ
hγ

(9)
[ph ][q],
γ

1303

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

F(q) =

fq −
E∈Eh

E

K∇q · npD +

uN q + β
γ∈ΓN
h

γ

Liu, Sadre-Marandi and Wang

γ∈ΓD
h

γ

γ∈ΓD
h

αγ
hγ

pD q.
γ

(10)

Here αγ > 0 is a penalty factor for any edge γ ∈ Γh and β is a formulation parameter [13].
Depending on the choice of β, one ends up with the symmetric interior penalty Galerkin (SIPG)
for β = −1, the nonsymmetric interior penalty Galerkin (NIPG) for β = 1, and the incomplete
interior penalty Galerkin (IIPG) for β = 0.
Stability of the above DG scheme for a numerical pressure relies on the penalty factor. DG
numerical velocity can be calculated ad hoc. The DG velocity is locally mass-conservative, but
its normal component is not continuous across element boundaries. As pointed out in [2], this
leads to nonphysical oscillations, if the DG velocity is coupled to a DG transport solver in a
straightforward manner. This could make particle tracking diﬃcult or impossible, if the DG
velocity is used in a characteristic-based transport solver.
The features and usefulness of the H(div) ﬁnite elements, especially, the BDM ﬁnite element
spaces motivate post-processing of the DG velocity via projection [2]. The post-processed
velocity has the following properties [2]:
(i) The new numerical velocity has continuous normal components on element interfaces;
(ii) The new numerical velocity reproduces the averaged normal ﬂux of the DG velocity;
(iii) It has the same accuracy and convergence order as the original DG velocity.
Details on implementation of the DG schemes and their post-processing can be found in [2, 11].

2.3

Weak Galerkin (WG)

The WG ﬁnite element methods are developed based on the innovative concepts of weak gradients and discrete weak gradients [16]. Instead of using the ad hoc gradient of shape functions,
discrete weak gradients are established at the element level to provide nice approximations of
the classical gradient in partial diﬀerential equations.
The WG approach considers a discrete shape function in two pieces: v = {v ◦ , v ∂ }, the
interior part v ◦ could be a polynomial of degree l ≥ 0 in the interior E ◦ of an element, the
boundary part v ∂ on E ∂ could be a polynomial of degree m ≥ 0, its discrete weak gradient
∇w,n v is speciﬁed in V (E, n) ⊆ Pn (E)2 (n ≥ 0) via integration by parts:
(∇w,n v) · w =
E

v ◦ (∇ · w),

v ∂ (w · n) −
∂E

∀w ∈ V (E, n).

E

For example, for a triangle T , W G(P0 , P0 , RT0 ) uses a constant basis function on T ◦ , a constant
basis function on each edge on ∂T , and speciﬁes the discrete weak gradients of these 4 basis
functions in RT0 . Normalized basis functions for RT0 facilitate computation of these discrete
weak gradients [8, 10, 11], although small-size linear systems need to be solved in general.
The WG schemes for the Darcy equation rely on discretizations of (2). Let Eh be a triangular
or rectangular mesh, l, m, n nonnegative integers, Sh (l, m) the space of discrete shape functions
on Eh that have polynomial degree l in element interior and degree m on edges, Sh0 (l, m) the
subspace of functions in Sh (l, m) that vanish on ΓD . Seek ph = {p◦h , p∂h } ∈ Sh (l, m) such that
p∂h |ΓD = Q∂h pD (projection of Dirichlet boundary data) and
Ah (ph , q) = F(q),
1304

∀q = {q ◦ , q ∂ } ∈ Sh0 (l, m),

(11)

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

Ah (ph , q) :=

K∇w,n ph · ∇w,n q,
E∈Eh

Liu, Sadre-Marandi and Wang

f q◦ −

F(q) :=

E

E∈Eh

E

uN q.
γ∈ΓN
h

(12)

γ

After obtaining the numerical pressure ph , one computes the WG numerical velocity by
uh = Rh (−K∇w,n ph ),

(13)

where Rh is the local L2 -projection onto V (E, n). But it can be skipped when K is a constant
scalar on the element. The normal ﬂuxes are computed accordingly. The WG schemes are
locally conservative and produce continuous normal ﬂuxes (in the integral form) [10, 11, 16].

2.4

Mixed Finite Element Methods (MFEM)

The mixed ﬁnite element schemes for the Darcy equation are based on discretizations of the
mixed variational form (4). A pair of ﬁnite element spaces (Vh , Wh ) are chosen such that Vh ⊂
H(div, Ω) for approximating velocity and Wh ⊂ L2 (Ω) for approximating pressure and together
they satisfy the inc-sup condition. Among the popular choices are (RT0 , P0 ), (BDM1 , P0 ) for
triangular meshes and (RT[0] , Q0 ) for rectangular meshes [10, 11].
For a rectangular or triangular mesh Eh , denote Uh = Vh ∩ HuN ,N (div; Ω) and Vh0 = Vh ∩
H0,N (div; Ω). A mixed FE scheme can be stated as: Seek uh ∈ Uh and ph ∈ Wh such that
⎧
⎪
⎪
⎪
⎨

K−1 uh · v −
E∈Eh

E

⎪
⎪
⎪
⎩ −

ph (∇ · v) = −
E∈Eh

E

γ∈ΓD
h

(∇ · uh )q = −
E∈Eh

E

pD (v · n),
γ

f q,
E∈Eh

∀v ∈ Vh0 ,
(14)
∀q ∈ Wh .

E

For implementation of (RT0 , P0 ), the edge-based basis functions for Vh can be used in
computation and assembly of element matrices [10, 11]. A symmetric indeﬁnite linear system
is solved. This is taken care by Matlab backslash, although it is nontrivial behind the scene.
An obvious advantage of the MFEM schemes is the automatic local mass conservation
(obtained by taking test function q = 1 in (14) 2nd equation) and normal ﬂux continuity
(built in the construction of H(div) ﬁnite element spaces). It is interesting to observe certain
equivalence between the MFEM schemes and the WG ﬁnite element schemes [10].

3

Design and Implementation of DarcyLite

DarcyLite is implemented in Matlab, which is a popular interpretative language. Although it is
diﬀerent than compilation languages like C/C++ or Fortran, Matlab is very eﬃcient in matrix
or array operations, since its core was implemented mainly in Fortran. This also means that
Matlab arrays are stored columnwise. The integrated development environment and graphics
functionalities oﬀered by Matlab are very helpful for educational purposes.
The above observations guide our overall design of DarcyLite:
• Code modules and separation of tasks;
• Minimization of function calls;
• Columnwise storage and access for full matrices or arrays;
1305

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

Liu, Sadre-Marandi and Wang

• Utilizing Matlab (i, j, s)-format for sparse matrices;
• Performing operations on a mesh for all elements simultaneously.
This section further elaborates on these ideas through a list of selected topics. Some data
structures and implementation techniques in DarcyLite share the same spirit as those in [1, 3].

3.1

Mesh Data Structure

Mesh information can be categorized as geometric (node coordinates, positions of element centers, etc.), topological (an element vs its nodes, adjacent edges of a given edge, etc.), and
combinatorial (the number of neighboring nodes of a given node, etc.). Some basic mesh data
are used by all types of ﬁnite element solvers, even though they use some derived mesh info in
diﬀerent ways. Mesh data can be organized as
(i) Primary info such as the numbers of nodes/elements, node coordinates, an element vs its
nodes: NumNds, NumEms, node, elem
(ii) Secondary info such as an edge vs its vertices, an edge vs its neighboring element(s), an element vs its all edges: NumEgs, edge, edge2elem, elem2edge, LenEg, area, EmCntr
(iii) Tertiary info are more speciﬁc to particular ﬁnite element solvers. For instance, DG
needs to know what are the neighboring elements for a give element, MFEM and WG
need speciﬁc info on whether an edge is the 2nd edge of a given element. The info on the
(unit) normal vector of a given edge is also used by MFEM and WG.
For example, the geometric info about mesh node coordinates is organized as an array of size
NumNds*2, the topological info about triangular elements vs their vertices is organized as an
array of size NumEms*3. Shown below is a code fragment for computing all triangle areas based
on the columnwise storage in Matlab.
k1 = TriMesh.elem(:,1); k2 = TriMesh.elem(:,2); k3 = TriMesh.elem(:,3);
x1 = TriMesh.node(k1,1); x2 = TriMesh.node(k2,1); x3 = TriMesh.node(k3,1);
y1 = TriMesh.node(k1,2); y2 = TriMesh.node(k2,2); y3 = TriMesh.node(k3,2);
TriMesh.area = 0.5*abs((x2-x1).*(y3-y1)-(x3-x1).*(y2-y1));

Based on these three levels of mesh info, DarcyLite organizes mesh data as a structure that has
several dynamic ﬁelds. The ﬁelds can be easily added or removed. Code modules are provided
for mesh info enrichment (adding data ﬁelds at a higher level), see code modules
TriMesh_Enrich1.m,

3.2

TriMesh_Enrich3.m,

RectMesh_Enrich1.m,

RectMesh_Enrich3.m

Implementation of Quadratures

Integrals on elements and element interfaces comprise a major portion of computation in ﬁnite
element methods. Although this looks like a simple issue, but code eﬃciency can be improved
when we adopt an unconventional approach. For example, in the W G(P0 , P0 , RT0 ) scheme for
the Darcy equation, one needs to compute the integrals T f over all triangular elements. If a
K-point Gaussian quadrature is applied, then the conventional approach would be
K

f dT ≈ |T |
T

1306

f (αk P1 + βk P2 + γk P3 )wk ,
k=1

∀T ∈ Th ,

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

Liu, Sadre-Marandi and Wang

where (αk , βk , γk ), wk (k = 1, . . . , N ) are respectively the barycentric coordinates and weights
of the quadrature points. The order of summation and loop can be reversed:
GlbRHS = zeros(DOFs,1);
NumQuadPts = size(GAUSSQUAD.TRIG,1);
for k=1:NumQuadPts
qp = GAUSSQUAD.TRIG(k,1) * TriMesh.node(TriMesh.elem(:,1),:)...
+ GAUSSQUAD.TRIG(k,2) * TriMesh.node(TriMesh.elem(:,2),:)...
+ GAUSSQUAD.TRIG(k,3) * TriMesh.node(TriMesh.elem(:,3),:);
GlbRHS(1:NumEms) = GlbRHS(1:NumEms) + GAUSSQUAD.TRIG(k,4) * EqnBC.fxnf(qp);
end
GlbRHS(1:NumEms) = GlbRHS(1:NumEms) .* TriMesh.area;

3.3

Element-level Small Matrices and Mesh-level Sparse Matrices

Finite element schemes involve computation of element-level small-size full matrices, e.g., mass
matrices and stiﬀness matrices, and mesh-level large-size sparse matrices, e.g., the global stiﬀness matrix. In general, we avoid using cell arrays of usual matrices, since they may be ineﬃcient. Instead we use 3-dim arrays. For example, in the W G(P0 , P0 , RT0 ) scheme for the
Darcy equation, each triangle involves one WG basis function for element interior and three
WG basis functions for the edges. The discrete weak gradient of each of the four WG basis
functions is a linear combination of the three RT0 normalized basis functions [10]. We organize
these coeﬃcients as a three-dimensional array
CDWGB = zeros(TriMesh.NumEms, 4, 3);

The interaction of the discrete weak gradients of the 3 basis functions results in a 3-dim array
ArrayGG = zeros(TriMesh.NumEms, 3, 3);

These element-level small full matrices are assembled into the sparse global stiﬀness matrix
DOFs = TriMesh.NumEms + TriMesh.NumEgs;
GlbMat = sparse(DOFs,DOFs);

Instead of using a loop over all elements, we utilize the (i, j, s)-structure in Matlab and the
mesh topological info:
for i=1:3
II = TriMesh.NumEms + TriMesh.elem2edge(:,i);
for j=i:3 % Utilizing symmetry
JJ = TriMesh.NumEms + TriMesh.elem2edge(:,j);
if (j==i)
GlbMat = GlbMat + sparse(II,II,ArrayGG(:,i,i),DOFs,DOFs);
else
GlbMat = GlbMat + sparse(II,JJ,ArrayGG(:,i,j),DOFs,DOFs);
GlbMat = GlbMat + sparse(JJ,II,ArrayGG(:,i,j),DOFs,DOFs);
end
end
end

See the following code modules for more details:
Darcy_WG_TriP0P0RT0_AsmSlv.m,

Darcy_WG_RectQ0P0RT0_AsmSlv.m

1307

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

3.4

Liu, Sadre-Marandi and Wang

Enforcement of Essential Boundary Conditions

For CG and WG, Dirichlet boundary conditions are essential, but Neumann boundary conditions are natural, see Equations (7,11). For MFEM, Neumann conditions are essential but
Dirichlet conditions are natural, see Equation (14). For DG, Dirichlet conditions are enforced
weakly [13] in the bilinear and linear forms, see Equations (8,9,10). Theoretically, a zero essential boundary condition corresponds to a nice subspace for the numerical solution in the ﬁnite
element scheme. For a non-zero essential condition, however, we usually use the terminology
“manifold” to accommodate the numerical solution. From the implementation viewpoint, to
enforce essential boundary conditions, we need to modify the global sparse linear system obtained from a ﬁnite element scheme. There are basically two approaches, hard (“brutal”) and
soft (“gentle”). We illustrate the latter using a simple linear system.
Let {x1 , x2 } be unknowns that satisfy a linear system as follows
A11
A21

A12
A22

x1
x2

=

b1
b2

.

Assume x2 = c is the essential boundary condition. A brutal way is to modify the system to
A11
0

x1
x2

A12
I

=

b1
c

.

But this usually damages the symmetry in the original linear system. An alternative is to
consider solving A11 x1 = b1 − A12 c, which is a linear system with a smaller size and maintains
the symmetry of A11 shown in the original system. Note that
b1 − A12 c
∗

=

b1
b2

−

A11
A21

A12
A22

0
c

involves a simple matrix-vector multiplication (using the original global coeﬃcient matrix) and
we just need to take the ﬁrst block in the ﬁnal result vector. See the following code modules
for more details:
Darcy_CG_RectQ1t_AsmSlv.m, Darcy_WG_TriP0P0RT0_AsmSlv.m, Darcy_WG_RectQ0P0RT0_AsmSlv.m

3.5

Interface with Other Software Packages

DarcyLite focuses on solving ﬂow and transport problems in the environment provided by
Matlab. It can import triangular meshes generated by other packages, e.g., PDE Toolbox and
DistMesh [12], which also run on Matlab. DarcyLite provides functions for triangular mesh
conversion from the aforementioned two packages.
Triangle is a popular triangular mesh generator developed in C. DarcyLite can read in
the mesh data ﬁles generated by Triangle in the so-called ﬂat ﬁle transfer (FFT) approach.

3.6

Graphical User Interface (GUI) of DarcyLite

A graphical user interface (GUI) is provided with DarcyLite for demonstration and education
purposes. It was developed using Matlab built-in guide (graphical user interface development
environment). The GUI is based on the event-driven design principle and some techniques
in SENSAI [14] are adopted. The GUI has three parts as shown in Figure 1: Preparation,
Numerical method, and Presentation.
1308

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

Liu, Sadre-Marandi and Wang

Figure 1: A screen snapshot of the Graphical User Interface (GUI) for DarcyLite

I. Preparation. This part allows the user to specify details for a problem to be solved.
(A) A domain is deﬁned, including the endpoints along the x- and y-axis. The default
settings suggest a rectangular domain with both axes starting at 0 and ending at 1.
(B) Specify the Darcy equation thru a hydraulic conductivity K and a source term f .
(C) Dirichlet and Neumann boundary conditions are speciﬁed. The two built-in options for
K, f , and boundary conditions are deﬁned according to two popular test examples.
(D) A mesh is to be generated. The user can choose between a rectangular or triangular
mesh by specifying the numbers of uniform partitions nx, ny for the x, y-directions, respectively.
Default settings suggest nx = 20, ny = 20. The Show Mesh button pops up a ﬁgure window
for the user to check whether a correct mesh has been generated.
(E) Gaussian type quadratures (for edges, rectangles, and triangles) are chosen. The default
choices (5,25,13) are suﬃcient for most cases.
II. Numerical Method. This part of the GUI lists the four major types of ﬁnite element
solvers. The user can choose among Continuous Galerkin, Discontinuous Galerkin, Weak
Galerkin, or Mixed Finite Element Method. Then the user must click the Run Code button. A popup will conﬁrm that the inputs from Part I are correct for the chosen ﬁnite element
solver. Otherwise, an error message will pop up.
III. Presentation. The checkboxes in this part allow the user to display any combination
of the numerical pressure and velocity proﬁles, local mass-conservation residual (LMCR), and
ﬂux discrepancy across edges.
1309

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

4

Liu, Sadre-Marandi and Wang

A Transport Solver: Implicit Euler + Weak Galerkin

DarcyLite contains also ﬁnite element solvers for transport problems in 2-dim prototyped as
⎧
⎪
⎨ ct + ∇ · (vc − D∇c) = f (x, y, t), (x, y) ∈ Ω, t ∈ (0, T ),
c(x, y, t) = 0, (x, y) ∈ ∂Ω, t ∈ (0, T ),
(15)
⎪
⎩
c(x, y, 0) = c0 (x, y), (x, y) ∈ Ω.
Here c(x, y, t) is the unknown (solute) concentration, v the Darcy velocity, D > 0 a diﬀusion
constant, f a source/sink term. There exist various types of ﬁnite element methods for transport
problems. Here we brieﬂy discuss a numerical scheme that utilizes the implicit Euler for timemarching and weak Galerkin for spatial approximation.
For simplicity, we assume Ω is a rectangular domain equipped with a rectangular mesh Eh
and a numerical velocity uh has been obtained from applying a ﬁnite element solver that is
locally mass-conservative and has continuous normal ﬂuxes. The unknown concentration is
(n)
approximated using the lowest order ﬁnite element space W G(Q0 , P0 , RT[0] ). Let Ch (n ≥ 1)
be such an approximation at discrete time tn , then there holds for n ≥ 1,
(n)

(n)

(Ch , w)E − Δt
E∈Eh

(n−1)

=

(Ch

(n)

(uh Ch , ∇w,d w)E + Δt D
E∈Eh

E∈Eh

, w)E + Δt

E∈Eh

(∇w,d Ch , ∇w,d w)E

(f, w)E .

(16)

E∈Eh
(0)

An initial approximant Ch
ﬁnite element space.

can be obtained via local L2 -projection of c0 (x, y) into the WG

The “Implicit Euler + Weak Galerkin” scheme has two nice properties:
(n)

(i) Ch |E ◦ represents intuitively the cell average of concentration on any element E.
(ii) The scheme is locally and hence globally conservative. This is veriﬁed by taking a test
function w that has value 1 in one element interior but 0 in all others and on all edges.
The 2nd term on the left side of the above equation characterizes interaction of the ﬂow (Darcy
velocity) and the concentration (discrete weak) gradient. The 3rd term is a symmetric term
similar to that in any elliptic problem. The 1st term on the right side represents the mass at
the previous time moment, whereas the last term depicts the source/sink contribution during
the time period [tn−1 , tn ].

5

Numerical Experiments

This section presents numerical results to demonstrate the use of DarcyLite. We consider an
example of coupled ﬂow and transport. A numerical Darcy velocity is fed into the transport
solver discussed in the previous section.
For the Darcy equation, Ω = (0, 1)2 , the hydraulic conductivity proﬁle is taken from [7]
(also used in [10, 11]). There is no source. A Dirichlet condition p = 1 is speciﬁed for the left
boundary and p = 0 for the right boundary. A zero Neumann condition is set for the lower
and upper boundaries. The Darcy solver W G(Q0 , P0 , RT[0] ) is used on a uniform 100 × 100
rectangular mesh (but for graphics clarity, Figure 2 Panel (a) shows results of 40 × 40 mesh).
1310

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

Liu, Sadre-Marandi and Wang

For the transport problem (15), T = 0.5, D = 10−3 , there is no source. An initial constant
concentration is placed in [0.1, 0.2] × [0.3, 0.7]. The RT[0] numerical velocity from the Darcy
solver is used in the IE+WG scheme (16) with a 100 × 100 rectangular mesh and Δt = 5 ∗ 10−4 .
Figure 2 Panel (b)(c)(d) present numerical concentration proﬁles for time moments t =
0, 0.25, 0.5, respectively. It can be observed that the transport pattern reﬂects well the ﬂow
features: (i) The upper part of the domain has stronger ﬂow and hence the concentration front
in the upper part advances faster than that in the lower part. (ii) In Panel (d), in the middle of
the domain, an almost vertical transport path can be observed. This clearly reﬂects the strong
ﬂow in the domain from position (0.4, 0.5) downward to position (0.5, 0.3), see Panel (a) also.
Note that the mass ﬂux on the domain boundary is zero. It can be checked numerically
(n)
that the total mass in the domain E∈Eh Ch |E ◦ |E| remains at 4.000 ∗ 10−2 for all discrete
time moments (t = 0 through t = 0.5 with increment 0.05). This veriﬁes the mass conservation
property (ii) discussed in Section 4. However, there are small negative concentrations. Eliminating oscillations in numerical concentrations of convection-dominated transport problems is a
nontrivial issue [9]. Particular treatments for the “Implicit Euler + Weak Galerkin” transport
solver are currently under our investigation.
1

WG: Numerical pressure and velocity

Projected initial concentration

1

1

0.9

0.9

0.9

0.9

0.8

0.8

0.8

0.8

0.7

0.7

0.7

0.7

0.6

0.6

0.6

0.6

0.5

0.5

0.5

0.5

0.4

0.4

0.4

0.4

0.3

0.3

0.3

0.3

0.2

0.2

0.2

0.2

0.1

0.1

0.1

0.1

0

0

0.2

0.4

0.6

0.8

0

1

0

0.2

(a)

0.6

0.8

1

0

(b) time t = 0

Numerical concentration

1

0.4

Numerical concentration

1
0.9

0.9

0.8

0.8

0.7

0.7

0.6

0.6

0.7

0.9
0.8

0.6

0.7

0.5

0.6
0.4

0.5

0.5

0.5

0.4

0.4

0.4

0.3

0.3

0.3

0.3

0.2

0.2

0.2

0.2

0.1

0.1

0.1

0

0

0

0.2

0.4

0.6

0.8

(c) time t = 0.25

1

0

0.1
0

0

0.2

0.4

0.6

0.8

1

(d) time t = 0.5

Figure 2: Example: Coupled Darcy ﬂow and transport. (a) Numerical pressure and velocity. (b) Initial
concentration. (c) Concentration at time t = 0.25. (d) Concentration at time t = 0.5. Results for (c)(d) are
obtained using W G(Q0 , P0 , RT[0] )(h = 10−2 ) and implicit Euler Δt = 5 ∗ 10−4 .

1311

DarcyLite: A Matlab Toolbox for Darcy Flow Computation

6

Liu, Sadre-Marandi and Wang

Concluding Remarks

DarcyLite is a small-size code package developed in Matlab for solving 2-dim ﬂow and transport
equations. It will be extended to include 3-dim solvers and test cases.
For the ﬂow equation, DarcyLite provides four major types of FE solvers (CG, DG, WG,
MFEM) on triangular and rectangular meshes. CG post-processing [5] and the enhanced
Galerkin (EG) [13] will be included later. For the transport equation, DarcyLite provides
solvers for both steady-state and transient problems. For the latter, it oﬀers solvers of Eulerian
type and Eulerian-Lagrangian type [15]. For coupled ﬂow and transport problems, solvers for a
2-phase model [8] are provided. DarcyLite is being extended to include more solvers that are
eﬃcient, robust, and respect physical properties, e.g., local conservation, positivity-preserving.
Besides applications like petroleum reservoir and groundwater simulations, DarcyLite is
being extended to include ﬂow and transport problems in biological media, e.g., drug delivery.
The URL for this code package is http://www.math.colostate.edu/~liu/code.html

References
[1] J. Alberty, C. Carstensen, and S. Funken. Remarks around 50 lines of matlab: short ﬁnite element
implementation. Numer. Algor., 20:117–137, 1999.
[2] P. Bastian and B. Riviere. Superconvergence and h(div) projection for discontinuous galerkin
methods. Int. J. Numer. Meth. Fluids, 42:1043–1057, 2003.
[3] L. Chen. ifem: an integrated ﬁnite element methods package in matlab. Tech. Report, Math Dept.,
Univ. of California at Irvine (2009), 2009.
[4] Z. Chen, G. Huan, and Y. Ma. Computational methods for multiphase ﬂows in porous media.
SIAM, 2006.
[5] B. Cockburn, J. Gopalakrishnan, and H. Wang. Locally conservative ﬂuxes for the continuous
galerkin method. SIAM J. Numer. Anal., 45:1742–1770, 2007.
[6] C. Dawson, S. Sun, and M. Wheeler. Compatible algorithms for coupled ﬂow and transport.
Comput. Meth. Appl. Mech. Engrg., 193:2565–2580, 2004.
[7] L. Durlofsky. Accuracy of mixed and control volume ﬁnite element approximations to darcy
velocity and related quantities. Water Resour. Res., 30:965–973, 1994.
[8] V. Ginting, G. Lin, and J. Liu. On application of the weak galerkin ﬁnite element method to a
two-phase model for subsurface ﬂow. J. Sci. Comput., 66:225–239, 2016.
[9] V. John and E. Schmeyer. Finite element methods for time-dependent convection–diﬀusion–
reaction equations with small diﬀusion. Comput. Meth. Appl. Mech. Engrg., 198:475–494, 2008.
[10] G. Lin, J. Liu, L. Mu, and X. Ye. Weak galerkin ﬁnite element methdos for darcy ﬂow: Anistropy
and heterogeneity. J. Comput. Phys., 276:422–437, 2014.
[11] G. Lin, J. Liu, and F. Sadre-Marandi. A comparative study on the weak galerkin, discontinuous
galerkin, and mixed ﬁnite element methods. J. Comput. Appl. Math., 273:346–362, 2015.
[12] P. Persson and G. Strang. A simple mesh generator in matlab. SIAM Review, 46:329–345, 2004.
[13] S. Sun and J. Liu. A locally conservative ﬁnite element method based on piecewise constant
enrichment of the continuous galerkin method. SIAM J. Sci. Comput., 31:2528–2548, 2009.
[14] S. Tavener and M. Mikucki.
Sensai:
A matlab package for sensitivity analysis.
http://www.math.colostate.edu/ tavener/FEScUE/SENSAI/sensai.shtml.
[15] H. Wang, H.K. Dale, R.E. Ewing, M.S. Espedal, R.C. Sharpley, and S. Man. An ellam scheme for
advection-diﬀusion equations in two dimensions. SIAM J. Sci. Comput., 20:2160–2194, 1999.
[16] J. Wang and X. Ye. A weak galerkin ﬁnite element method for second order elliptic problems. J.
Comput. Appl. Math., 241:103–115, 2013.

1312

