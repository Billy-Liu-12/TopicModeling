Genetic Evolution Approach for Target Movement
Prediction
Sung Baik 1, Jerzy Bala 2, Ali Hadjarian3, and Peter Pachowicz 3
1 School of Computer Engineering
Sejong University, Seoul 143-747, KOREA
sbaik@sejong.ac.kr
2 School of Information Technology and Engineering
George Mason University
Fairfax, VA 22030, U.S.A.
jbala@gmu.edu
3 Sigma Systems Research, Inc.
Fairfax, VA 22032, U.S.A.
{ahadjarian, ppach}@sigma-sys.com

Abstract. This paper presents a genetic evolution system, for target movement
prediction, which includes functions inferring opponents' strategic movements
and displaying such predicted movements in an interactive 3D visualization
space. To speed up the analysts' ability to access and integrate information, the
prediction approach generates new movements based on past behaviors and application of an inheritance mechanism. It applies Genetic Algorithms (GAs)
learning techniques to evolve new individuals in the population of movements
in order to converge the evolution process toward optimal movements. The approach is implemented into the GEM (Genetic Evolution of Movement) system
and its performance has been experimentally evaluated.

1 Genetic Evolution of Target Movement for Prediction
GEM uses Genetic Algorithms (GAs) [1-4] to generate the population of movement
generation operators. By using crossover and mutation, the population evolves and
only the strongest elements survive, thus contributing to improved performance in
terms of more probable/optimal movements. This contribution is used as an objective
evaluation function to drive the generation process in its search for new and useful
movement generation operators. There are 6 steps for GEM’s processing (Fig. 1.):
Step 1: Movements Population Seeding. This step sets the initial population of
movements. It can use a random selection of initial movements or the Historical
Movement Database (HMD). Movements selected from HMD represent historical
GMTI target data for scenarios (i.e., tracking and targeting engagements) similar to
the one for which the prediction is requested. This step also defines the evaluation
function.
Step 2: Binary Encoding. A string representation for each movement is generated using a genetic encoding schema.

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 678–681, 2004.
© Springer-Verlag Berlin Heidelberg 2004

Genetic Evolution Approach for Target Movement Prediction

679

Step 3: Application of Genetic Operators. Crossover and mutation operations are applied during each evolutionary cycle generating additional movements (offspring
movements).
Step 4: Binary Decoding. This step executes a reverse process to the binary encoding
step (i.e., Step 2 of the algorithm).
Step 5: Evaluation. New movements in the population are evaluated according to the
evaluation function defined in Step 1.
Step 6: Recombination. In this step worse performing movements (according to the
evaluation function) are discarded from the population leaving the same number of
encoded movements in the population as initially set up in Step 1. Step 6 feeds back
to Step 2 and restarts the next iteration of the movement generation process.

Historical
Movements
Database

Step
Step11

Movement
Movement
Population
Population
Seeding
Seeding

Step
Step22

Binary
BinaryEncoding
Encoding

Step
Step33

Population
Of Movements

Application
Applicationofof
Genetic
GeneticOperators
Operators

Population
Of Movements
(binary representation)
10101010101110101
10101010101010010
10101010000110101

Step
Step44

Binary
BinaryDecoding
Decoding
Visual Interface

Step
Step55

Evaluation
Evaluation

Population
Of Movements
(partially converged
movements)

Constraints
Knowledge
Base

Step
Step66

Recombination
Recombination

Fig. 1. Movement generation steps

1.1 GA Operations and Evaluation Function
The crossover operation, when applied to two operators produces offspring strings
(operators). Offspring operators inherit movement characteristics from both their parents and the information about the relevant characteristics can be easily transferred to
subsequent generations. This mechanism is possible because the data structure used to
represent operators is "linearized.” Linearized data structures are those string representations for which the relevance of genetic information is decreasing as one moves
from the left towards the right fields/bits (moving through movement timeframes). As

680

S. Baik et al.

a consequence, the last operation applied to the current movement causes only minor
changes to the operator structure.
The mathematical analysis of GAs shows that they work best when the internal
representation encourages the emergence of useful building blocks that can be subsequently recombine to produce improved performance. GEM's string decoding/encoding method identifies these building blocks as the movement fields and subfields in the string representation.
Mutation provides for occasional disturbances in the movement structure to insure
diversity in the genetic individuals over long periods of time and to prevent stagnation
in the search process for better movements.
The step 5 of GEM’s processing evaluates movements in the population according
to the evaluation function defined in Step 1. The function scores each movement by
calculating partial scores for all <MSP, MP> pairs. The partial score is computed by
linking <MSP, MP> pair's constraint parameters to the "constraint map". The map
consists of several spatially arranged layers representing sets of constraints (e.g., geographical, tactical, communicational, and doctrinal). The location constraint on a
given layer represents a probability distribution for the <MSP, MP> pair to originate
at this location (i.e., MSP to be at this location at timeframe T, and with MP linking
this location to the next MSP at timeframe T+1).
Each movement in the genetic population has to be evaluated according to an
evaluation function. Each MSP probability at timeframe T is computed as the product
of the location probability value at the (X,Y) location and the MSP probability at
timeframe T-1.
1.2 Genetic Algorithms
GAs are iterative procedures which maintain a "population” of candidate solutions
P(t) to the objective function f(x):
P(t) = <x1(t), x2(t), ... , xN(t)>

(1)

Each structure xi in population P is simply a binary string of length L. Generally,
each xi represents a vector of parameters to the function f(x), but the semantics associated with the vector is unknown to the GA. During each iteration step, called a "generation", the current population is evaluated, and, on the basis of that evaluation, a
new population of candidate solutions is formed.
The initial population P(0) is usually chosen at random. Alternately, the initial
population may contain heuristically chosen initial points. In either case, the initial
population should contain a wide variety of structures. Each structure in P(0) is then
evaluated. For example, if we are trying to minimize a function f, evaluation might
consist of computing and storing f(x1), ... , f(xN).
The structures of the population P(t+1) are chosen from the population P(t) by a
randomized "selection procedure" that ensures that the expected number of times a
structure is chosen is proportional to that structure's performance, relative to the rest
of the population. That is, if xj has twice the average performance of all the structures
in P(t), then xj is expected to appear twice in population P(t+1). At the end of the
selection procedure, population P(t+1) contains exact duplicates of the selected
structures in population P(t).

Genetic Evolution Approach for Target Movement Prediction

681

In order to search other points in the search space, some variation is introduced
into the new population by means of idealized “genetic recombination operators.”
The most important recombination operator is called "crossover.” Under the crossover
operator, two structures in the new population exchange portions of their binary representation. This can be implemented by choosing a point at random, called the crossover point, and exchanging the segments to the right of this point. Termination may
be triggered by finding an acceptable approximate solution to f(x), by fixing the total
number of evaluations, or some other application dependent criterion.

2 System Interfacing and Experiments
A 3D visualization space is used in the GEM system to interface with the user. This
interfacing space renders depiction of current movements in the evolved population of
movements. It is also used as an editor. The editor can access the Historical Movement Database (HMB) to select and visualize the initial population of movements, to
be used for population seeding, visualize intermittent results of the prediction process,
and visually control various systems’ parameters. This system-interfacing component
has been implemented using In3D - a cross-platform Java class library designed to
enable the creation of interactive 3D visualizations of complex information spaces
(developed by Visual Insights Corp.)
The performance of the GEM system has been experimentally evaluated on its
ability to converge the population of movements to the most probable movement in
the lowest number of genetic cycles. After some evolutionary runs of the genetic engine, all movements and their corresponding significant points are mostly converged
to one movement. During experiments, a non-convergence result was observed when
the evaluation function is formed for a highly multi-modal initial search space. The
population of individual movements converged to two separate movements. In such
case, the search process has to start from a larger set of initial movements (i.e., search
from a larger number of points in the initial cycle of GAs). A higher mutation rate can
also potentially alleviate this problem.

References
1. Bethke, A. D., "Genetic algorithms as function optimizers,” Ph.D. Thesis, Dept. Computer
and Communication Sciences, Univ. of Michigan, 1981.
2. Brindle, A., "Genetic algorithms for function optimization,” Ph.D. Thesis, Computer Science Dept., Univ. of Alberta, 1981.
3. DeJong, K. A., "Adaptive system design: a genetic approach," IEEE Trans. Syst., Man,
and Cyber., vol. SMC-10, no. 9, pp. 566-574, Sept. 1980.
4. DeJong, K. A., "Analysis of the behavior of a class of genetic adaptive systems," Ph. D.
Thesis, Dept. Computer and Communication Sciences, Univ. of Michigan, 1975.

