A Linear Algorithm for Edge-Face Coloring
Series-Parallel Graphs
Jian-Liang Wu1 and Ping Wang2
1

Department of Mathematics, Shandong University, Jinan, Shandong, P.R. China
jlwu@math.sdu.edu.cn
2
Dept. of Math., Stats. and Computer Science, St. Francis Xavier University,
Antigonish, NS, Canada, B2G 2W5

Abstract. Let G be a series-parallel graph. In this paper, we present a
linear algorithm of constructing an oriented binary decomposition
tree of G. We use it to ﬁnd 33 unavoidable subgraphs of G. Based on
these 33 avoidable subgraphs, we can determine the edge-face chromatic
number, denoted by χef (G), of G where G is 2-connected and Δ(G) =
5. This completes the literature of determining χef (G) for 2-connected
series-parallel graphs.
Keywords: edge-face coloring, decomposition tree, series-parallel graph.

1

Introduction

In this paper all graphs are simple, undirected and plane. A plane graph G is a
particular drawing of a planar graph on the Euclidean plane. Let G be a plane
graph with vertex set V (G), edge set E(G) and face set F (G). An edge-face
coloring of a plane graph G is a coloring of E(G) F (G) such that no two
adjacent or incident elements receive the same color. A 2-terminal simple seriesparallel graph, denoted by SP -graph, is a graph with two distinguished vertices
(the terminals) that is obtained as follows:
Base case A single edge uv is a 2-terminal SP-graph with terminals u and v.
Recursive step Let G1 be a SP-graph with source u(G1 ) and terminal v(G1 ),
and let G2 be a SP-graph with source u(G2 ) and terminal v(G2 ).
-A graph G obtained from G1 and G2 by identifying v(G1 ) and u(G2 ) is a SPgraph with source u(G) = u(G1 ) and terminal v(G) = v(G2 ). Such a connection
is called a series connection.
-A graph G obtained from G1 and G2 by identifying u(G1 ) and u(G2 ) and
v(G1 ) and v(G2 ) is a SP-graph with source u(G) = u(G1 ) = u(G2 ) and terminal
v(G) = v(G2 ) = v(G2 ) where u(G1 )v(G1 ) and u(G2 )v(G2 ) can not be both edges
simultaneously in G1 and G2 . Such a connection is called a parallel connection. It
is well-known that the following statements are equivalent if G is a 2-connected
graph:
This research is supported by NSFC(10471078, 10631070, 60673059) and NSERC.
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 389–396, 2007.
c Springer-Verlag Berlin Heidelberg 2007

390

J.-L. Wu and P. Wang

w
u

v

w
u

v

u

v
w
p

p

S
S

uw

wv

Figure 1-a

uw

uv

wv

Figure 1-b

uv

s

uw

wv

Figure 1- c

Fig. 1. Examples of series and parallel connections

(1)
G does not contain K4 as a minor;
(2)
G is a 2-terminal SP-graph;
(3)
G is a partial 2-tree.
The family of SP-graphs is a distinguished family of plane graphs which is
particularly interesting to computer scientists. For example, the problem of determining chromatic index is NP-complete. On the other hand, for plane graphs
G, it is not known whether determining χ (G) is NP-hard. However, there is a
linear algorithm to ﬁnd χ (G) if G is a series-parallel graph [12]. Fast algorithms
have been found on the SP-graphs for min-max matching problem, Steiner subgraph and dominating set problems (see [3]). Graph theorists also use SP-graphs
in an attempt to solve problems on plane graphs. For example, Seymour’s conjecture on chromatic index, if G is a plane graph then χ (G) = max{Δ(G), Γ (G)
}, was ﬁrst proven on outerplane graphs, then on series-parallel graphs (see [5])
¯
2X
¯ denotes the
: X ⊂ V (G), |X| ≥ 3 and odd } and X
where Γ (G) = max{ |X|−1
set of edges with both ends in X.
In 1975, Mel’nikov [2] conjectured that Δ(G) ≤ χef (G) ≤ Δ(G) + 3 for any
plane graph G. Waller [7] (independently by Sanders and Zhao [4]) proved the
conjecture by using the Four Color Theorem. Wang and Lih [10] recently proved
the conjecture without using the Four Color Theorem. Borodin [1] proved that
for any plane graph G, χef (G) ≤ max{11, Δ(G) + 1}. Wang [8] proved that for
any outerplane graph G, χef (G) ≤ max{7, Δ(G) + 1} and χef (G) = Δ(G) if G
is 2-connected and Δ(G) ≥ 6. In [9], Wang and Zhang further improved Wang’s
result and obtained the edge-face chromatic number of outerplane graphs with
Δ(G) ≥ 5. Wu and Wang [11] extend the previous result to SP-graphs and
proved that χef (G) = Δ(G) if G is a 2-connected SP-graph with Δ(G) ≥ 6.
This result provides a better upper bound than the one in Borodin’s result and
encompasses a larger family of plane graphs than the one given by Wang and
Zhang in [9]. In the following theorem, we will prove the remaining case where
Δ(G) = 5. This is the only case which is still open for these types of theorems
in which χef (G) = Δ(G) with Δ(G) ≥ c because of the following example. Let
abc and xyz be two triangles. We form a new graph G by identifying vertices c
and x and add a P2 between a and z. Clearly, χef (G) = 5 and Δ(G) = 4. In

A Linear Algorithm for Edge-Face Coloring Series-Parallel Graphs

391

fact, a family of graphs constructed similarly with any two odd cycles has the
same property. This completes the literature of edge-face coloring of 2-connected
SP-graphs.
Theorem 1. If G is a 2-connected SP-graph, then χef (G) = 5 if Δ(G) = 5.

2

Subgraph Identiﬁcation

It is well-known that a SP-graph G can be represented by a binary decomposition
tree [6]. This technique has been used very successfully to design linear time
algorithms to obtain diﬀerent parameters of SP-graphs (see [12] [13]). In order
to apply the binary decomposition tree technique successfully to the face coloring
problem, we not only need to construct a binary decomposition tree to represent
G but we also require this representation to provide further information about
the allocation of faces with respect of its adjacent edges. In the following we
shall use the left child and the right child of a node to distinguish whether a
face is on the left side or the right side of a particular subgraph. Next we will
deﬁne an oriented binary decomposition tree of G, denoted by TO , according to
the binary decomposition tree of G, denoted by T , where T is constructed by
the algorithm provided by by Takamizawa et.al. in [6].
Lemma 1. Let G be a 2-terminal SP-graph with terminals u and v. Then there
exists an acyclic edge orientation of G such that u is the only source and v is
the only terminal.
This can be easily showed by using induction to the connection steps in the
deﬁnition of a 2-terminal simple SP-graph. By Lemma 1, we can assign an acyclic
edge orientation to G from the source to the sink of G. Let G1 be a SP-graph
with source u(G1 ) and terminal v(G1 ), and let G2 be a SP-graph with source
u(G2 ) and terminal v(G2 ). For any S node in the binary decomposition tree of T ,
we assign G1 as its left child and G2 as its right child in TO if v(G1 ) = u(G2 ). For
example, Figure 1-a shows a binary decomposition tree which represents a series
connection of two oriented edges. For any P node in the binary decomposition
tree of T , we assign G1 as its left child and G2 as its right child in TO if G1 is on
the left side of G2 when facing from the source to the terminal in G2 . Otherwise
we assign G2 as its the left child and G1 as its right child in TO if G1 is on the
right side of G2 when facing from the source to the terminal in G2 . For example,
Figure 1-b and Figure 1-c show two binary decomposition trees which represent
two possible parallel connections for the case where G1 = uv and G2 = uwv.
Clearly, all internal nodes are either S or P nodes and all leaves are edges
of G. We shall use a sequence SXY (P XY ) to denote a subtree of TO where
X and Y are the left child and the right child of S (P ) which can be either a
subtree or a leaf (e ∈ E(G)). Since we have to color faces of G, P XY and P Y X
might be diﬀerent. By the symmetry of subgraphs, most of SXY and SY X are
the same.
Theorem 2. Let G be a 2-connected SP-graph. Then G must contain at least
one of the following 33 unavoidable subgraphs (see Figure 2).

392

J.-L. Wu and P. Wang

x1
u

x1

x2
v

s1
x1 x3

u

v

x2

s3

x4

v

u

x4
x 3 s'
6

x1

x2

x2
x3

u
v

u

v

x1

x5
u

x4

x4

x3

v

x2

u x2

s 14

u

v

x1
v

x3 x5
x4

x2

s 17

s'' 15

u

x3

x2
v

x2
s' 20

x2 x4
x3

u

v

x4

u

v
s 20
x1

x1

x3 x4

x2 x3 x4
v

u

x3 x4

u

s 22

x4

x2

x2

u

v

x3

v

s 19

x1

x3
s 21

u

x1

x2

x1

v

s 16

s' 18

x1
u

x4

u

x3

x6
x5

x1

s 18

x4

v

x2

x3

v

v

x2
x3

x1

x3
u

x1

x4

x4

x4

x3

x5

u

s' 15

x1
x2 x6

x4

u

x6

x2 x
3 x
4

s 15

v

s 13

x1

x5

x5 v

s8

x2

x6

x4

x5

s7

s 12

x1 x3 x6

x4

v

x3

x2

s 11

x4

x2

x1
x3

x6

s5

x5
x1

x1

v

v

u

v

x4

u

x2 x4

v

u

v

x5

x1
x3

x1
x2
x3

x5

s'' 6

s 10

x1

x3

u

s4

x2

x2

x4

x1
v

x1 x3

x5
x2

x1

s9

u

x4

x3

u

x5

s6

u

v

x2

u

u

x1

x3

u

s2

x1
x2

x1

x2

x2

v

s 23

v

s' 23

x1
x2 x1 x4
x3

u

x1
x2
x3

u

v

x4

v

x2

x2

u

x4

x1

x3

v u

x4

v

u

x5

s 30

x2

x1

v

x4
s 32

x6

u

x4

v

x3

u

x1

s' 32

x4

v
x6

x1

x4

v

v u

x2 x3 x4
s 29

u

x2 x3

u

x5

x1
s'' 32

x4
v
x5

s 31
x1

x3

x5
x4

v
x6

Fig. 2. 33 unavoidable subgraphs

v

s'' 26

x1

x2

x5
x4

x4

x1

x5

x3

s'' 30

x2

u

s'' 28

x1

v u
x5

s' 30

x3 x
5

u

x4

x3

x3

v

x5

x2

x3

x4

s' 26

s' 28

x2

x2

x3

v u

x2

x2

s 28
x1

x2

s 26

x5
x4

x3

u

x1

x3

x3

u

s 27
x1

v

x1

x3
x4

s 25

x1

x2 x3

x2

v

s' 24
x1

u

u

x4

s 24

x1

x2

u

x2 x3
s 33

x5
v

x4
x6

x5
v

A Linear Algorithm for Edge-Face Coloring Series-Parallel Graphs

393

Proof. Let P {tk , tk−1 , ..., t1 , t0 } be the longest path in TO where t0 = e is a leaf
node and tk is the root node. Since G is a simple graph, the last internal node t1
must be a S node. For convenience, let A0 = See (see Figure 3). In the following,
we shall move up on the longest path P and ﬁnd all the desired subgraphs. Since
the nodes t0 and t1 have been discussed above, we shall start from ti where i ≥ 2
in the following cases.
Case 1. i = 2
If t2 = S, then one of its two children of t2 must be A0 and the other can
be either A0 or a leaf node. In all three cases, s1 is found. If t2 = P , then
there are three possible combinations and we call the three resulting subgraphs
A1 = P A0 e, A1 = P eA0 and A2 = P A0 A0 (see Figure 3).

A0

A'

A1

1

A2

A' 3

A3

A''' 3

A' 6

A4

A'' 6

A'' 3

A5

A6

A''' 6

Fig. 3. Ai for i = 1, 2, ..., 6

Case 2. i = 3
One of the children of t3 must be in {A1 , A1 , A2 }.
Subcase 2.1. t3 = S
SA1 A2 and SA1 A2 leads s4 ⊆ G. SA1 e leads to s2 ⊆ G. SA2 e leads s3 ⊆ G.
Let A3 = SA1 A1 , A3 = A1 A1 , A3 = A1 A1 and A3 = A1 A1 (see Figure 3).
Subcase 2.2. t3 = P
It is impossible to have P XY where X and Y ⊆ {e, A1 , A1 } because G is
a simple graph. P eA2 , P A2 e, P A1 A2 , P A2 A1 , P A1 A2 , P A2 A1 , P A0 A1 and
P A1 A0 lead to s9 ⊆ G. P A2 A2 leads to s7 ⊆ G. Let A4 = P A0 A1 = P A1 A0
and A5 = P A0 A2 = P A2 A0 (see Figure 3).
Case 3. i = 4
One of the children of t4 must be in {A3 , A3 , A3 , A3 , A4 , A5 }. Since Δ(G) = 5,
we will not consider the combinations of A4 and A4 , A4 and A5 , and, A5 and
A5 .

394

J.-L. Wu and P. Wang

Subcase 3.1. t4 = S
SXY leads to s2 ⊆ G if X ∈ {e, A0 } and Y ∈ {A3 , A3 , A3 , A3 }. SXY implies
that one of {s6 , s6 , s6 } is a subgraph of G if X ∈ {A1 , A1 , A3 , A3 , A3 , A3 } and
Y ∈ {A3 , A3 , A3 , A3 }. SA2 Y leads to s4 ⊆ G if Y ∈ {A3 , A3 , A3 , A3 }. SA4 Y
leads to s13 ⊆ G if Y ∈ {A3 , A3 }. SA5 Y leads to s10 ⊆ G if Y ∈ {A3 , A3 }. SA4 Y
leads to s12 ⊆ G if Y ∈ {e, A0 }, to s13 ⊆ G if Y ∈ {A1 , A1 }, and to s14 ⊆ G if
Y = A2 . SA5 Y leads s8 ⊆ G if Y ∈ {e, A0 }, to s10 ⊆ G if Y ∈ {A1 , A1 }, and to
s11 ⊆ G if Y = A2 .
Subcase 3.2. t4 = P
Let A6 = P A3 e = P eA3 , A6 = P A3 e = P eA3 , A6 = P A e = P eA3 and
A6 = P A3 e = P eA3 (see Figure 3). P A3 A0 and P A3 A0 lead to s25 ⊆ G.
P A0 A3 and P A3 A0 lead to s24 ⊆ G. P XY and P Y X lead to s24 ⊆ G if X = A0
and Y ∈ {A3 , A3 }. P A3 A1 and P A1 A3 lead to s20 ⊆ G, P A1 A3 and P A3 A1 lead
to s19 ⊆ G, P A3 A1 and P A1 A3 lead to s18 ⊆ G, and P A3 A1 and P A1 A3 lead
to s21 ⊆ G. P XY and P Y X lead to either s18 ⊆ G or s20 ⊆ G if X ∈ {A1 , A1 }
and Y ∈ {A3 , A3 }. P XA2 and P A2 X lead to s4 ⊆ G if X ∈ {A3 , A3 , A3 , A3 }.
P A3 A3 and P A3 A3 lead to s16 ⊆ G. P A3 A3 leads to s15 ⊆ G. And P A3 A3
leads to s17 ⊆ G. P A3 A3 and P A3 A3 lead to s15 ⊆ G. P A3 A3 and P A3 A3
lead to s15 ⊆ G. P XA4 and P A4 X lead to either s20 ⊆ G or s21 ⊆ G if
X ∈ {A3 , A3 }. P XA4 and P A4 X lead to s20 ⊆ G if X ∈ {A3 , A3 }. P XA5 and
P A5 X lead to s10 ⊆ G if X ∈ {A3 , A3 }. It is impossible to have P XA4 and
P A4 X where X ∈ {e, A1 } because G is a simple graph. P A4 A2 and P A2 A4 lead
to s9 ⊆ G. P A5 e and P eA5 lead to s9 ⊆ G. P A5 X and P XA5 lead to s7 ⊆ G if
X ∈ {A0 , A2 }. P A5 A1 and P A1 A5 lead to s7 ⊆ G. P A5 A1 and P A1 A5 lead to
s9 ⊆ G.
Case 4. i = 5
One of the children of t5 must be in {A6 , A6 , A6 , A6 }. Since Δ(G) = 5, we will
not consider the subtrees SXY , P XY and P Y X where X ∈ {A6 , A6 , A6 , A6 }
and Y ∈ {A4 , A5 , A6 , A6 , A6 , A6 }.
Subcase 3.1. t5 = S
SA6 Y leads to s26 ⊆ G if Y = {e, A0 }, to either s28 ⊆ G or s30
Y ∈ {A1 , A1 , A3 , A3 }, and to s32 ⊆ G if Y = A2 . SA6 Y leads to s27
Y ∈ {e, A0 }, to either s29 ⊆ G or s31 ⊆ G if Y ∈ {A1 , A1 , A3 , A3 },
s33 ⊆ G if Y = A2 . SA6 Y and SA6 Y lead to either s26 ⊆ G or s26
Y ∈ {e, A0 }, to either s28 ⊆ G or s28 ⊆ G if Y ∈ {A1 , A3 }, to either s30
s30 ⊆ G if Y ∈ {A1 , A3 }, and to either s32 ⊆ G or s32 ⊆ G if Y = A2 .

⊆ G if
⊆ G if
and to
⊆ G if
⊆ G or

Subcase 3.1. t5 = P
Since G is a simple graph, we will not consider the subtrees P XY and P Y X
where X ∈ {A6 , A6 , A6 , A6 } and Y ∈ {e, A1 , A1 }.
P A6 A0 and P A6 A2 lead to s18 ⊆ G. P XY and P Y X lead to either s28 ⊆ G or
s30 ⊆ G if X = A6 and Y ∈ {A3 , A3 , A3 , A3 }. P A0 A6 and P A2 A6 lead s22 ⊆ G.
P A6 A0 and P A6 A2 lead to s19 ⊆ G. P XY and P Y X lead to either s29 ⊆ G
or s31 ⊆ G if X = A6 and Y ∈ {A3 , A3 , A3 , A3 }. P A0 A6 and P A2 A6 lead to

A Linear Algorithm for Edge-Face Coloring Series-Parallel Graphs

395

s23 ⊆ G. P XY leads to s18 ⊆ G and P Y X leads s23 ⊆ G if X ∈ {A6 , A6 }
and Y ∈ {A0 , A2 }. P XY and P Y X lead to either s30 ⊆ G or s30 ⊆ G if
X ∈ {A6 , A6 } and Y = A3 , and to either s28 ⊆ G or s28 ⊆ G if X{A6 , A6 }
and Y = A3 . This completes the proof.
Since the algorithm we used to construct T given by Takamizawa et.al. in [6] is
a linear algorithm in terms of |E(G)| and we traverse T once to construct TO .
We may traverse the whole tree TO once in the worst case to ﬁnd one of the 33
unavoidable subgraphs in G. Therefore, one can ﬁnd one of the 33 unavoidable
subgraphs in G in O(|E(G)|). This technique of constructing an oriented binary
decomposition tree from any SP-graph can be applied to future research on the
problems that are related to the faces and edges of any SP-graph. As an example,
we will use it to prove Theorem 1 in the next section.

3

Proof of Theorem 1

Proof. We shall prove the theorem by induction on |V (G)| + |E(G)|. Clearly, the
result is obvious if |V (G)| ≤ 4. Let G ⊂ G and φ be an edge-face coloring of
G where φ : (EF (G)) → C = {1, 2, ..., 5}. We shall extend φ to an edge-face
coloring σ of G with t colors. For convenience, we denote T (v) = C\{φ(vv ) :
v ∈ N (v)}, the set of colors missing at vertex v. In Figure 2, let f denote the
face on the left side of uv and f denote the face on the right side of uv when
facing from u to v, and, without loss of generality, let φ(f ) = 1 and φ(f ) = 2.
For s1 , let G be the result graph by identifying vertices x1 and x2 in G. Then
φ can be easily extend to G since d(x1 ) = d(x2 ) = 2 and |C| ≥ 5. For s2 , let
G = G\{x1 } and c1 ∈ T (u). If c1 = 1, then we assign σ(ux2 ) = 1, σ(ux1 ) =
2, σ(vx2 ) = σ(ux1 x2 ) = 4, and σ(x1 x2 ) = 5. If c1 = 1, we can assign σ(ux2 ) = 3,
σ(vx2 ) = 4, σ(ux1 ) = c1 ; σ(x1 x2 ) = 2 and σ(ux1 x2 ) = {4, 5} − c1 if c1 = 2 or
σ(x1 x2 ) = 5 and σ(ux1 x2 ) = 4 if c1 = 2.
For s3 , let G = G\{x1 , x2 } + ux3 and c1 ∈ T (u). If c1 = 1, then we assign
σ(ux2 ) = 1, σ(ux1 ) = σ(x2 x3 ) = 3, σ(vx3 ) = σ(ux1 x3 x2 ) = 4 and σ(x1 x3 ) = 5.
If c1 = 1, we can assign σ(ux1 ) = c1 , σ(x2 x3 ) = 1, σ(ux2 ) = σ(x1 x3 ) = 3,
σ(vx3 ) = 4 and σ(ux1 x3 x2 ) = {4, 5} − c1 .
For s4 , let G = G\{x1 , x2 , x4 } + ux3 . Without lose of generality, we may
assume that φ(ux3 ) = 3 and φ(x3 v) = 4. Let c1 ∈ T (u) and c2 ∈ T (v). If
c1 = c2 = 1, then we can assign σ(ux2 ) = σ(vx3 ) = 1, σ(x3 x4 ) = 2, σ(ux1 ) =
σ(x2 x3 ) = 3, σ(vx4 ) = σ(ux1 x3 x2 ) = 4, and σ(vx3 x4 ) = σ(x1 x3 ) = 5. Now
consider the case where c1 = 1 and c2 = 1. We can assign σ(ux2 ) = 1, σ(ux1 ) =
σ(x2 x3 ) = 3, σ(vx3 ) = σ(ux1 x3 x2 ) = 4, σ(vx4 ) = c2 ; σ(x1 x3 ) = 2, σ(x3 x4 ) = 5
and σ(vx3 x4 ) = 3 if c2 = 2 or σ(x1 x3 ) = 5, σ(x3 x4 ) = 2 and σ(vx3 x4 ) = {3, 5} −
c2 . Note that the case where c1 = 1 and c2 = 1 can be solved similarly. Finally,
we consider the case where c1 = 1 and c2 = 1. We assign σ(ux1 ) = c1 , σ(x4 v) =
c2 , σ(ux2 ) = σ(x3 x1 ) = 3, σ(vx3 ) = 4, σ(x2 x3 ) = 1, and σ(ux1 x3 x2 ) ∈ {4, 5}\c1;
σ(x3 x4 ) = 5, σ(vx3 x4 ) = 3 if c2 = 2 or σ(x3 x4 ) = 2, σ(vx3 x4 ) ∈ {3, 5}\c2 if
c2 = 2.

396

J.-L. Wu and P. Wang

The rest of proof is similar with these cases. We shall leave it on the following
website www.stfx.ca\people\pwang\restproof.pdf.
Remarks. The process of coloring these 33 unavoidable subgraphs takes a constant time. Hence, one can color the edges and faces of G with 5 colors in
O(|E(G)|) time.

References
1. Borodin, O. V.: Simultaneous coloring of edges and faces of plane graphs. Discrete
Math. 128 (1994) 21-33
2. Mel’nikov, L. S.: Problem in recent advances in graph theory. Proc. International
Symposium, Prague, 1974, Academic Praha (1975) 543
3. Richey, M.B., Parker, R. G.: Minimum-maximal matching in series-parallel graphs.
Euro. J. of Operation Research 33 (1987) 98-103
4. Sanders, D.P., Zhao, Y.: On simultaneous edge-face colorings of plane graphs. Combinatorica no. 3 17 (1997) 441–445
5. Seymour, P. D.: Colouring Series-Parallel graphs. Combinatoria 10(4) (1990) 379392
6. Takamizawa, K., Nishizeki, T., Saite, N.: Linear-time computability of combinatorial probelms on series-aprallel graphs. J. Assoc. Comput. Mach. 29 No. 4 (1982)
1382-1389
7. Waller, A.O.: Simultaneously coloring the edges and faces of plane graphs. J. Combinatorial Theory, Series B 69 (1997) 219-221
8. Wang, W.F.: On the colorings of outerplane graphs. Discrete Math. 147 (1995)
257-269
9. Wang, W.F., Zhang, K.M.: Δ-matchings and edge-face chromatic numbers. (Chinese) Acta Math. Appl. Sinica 22(2) (1999) 236-242
10. Wang, W.F., Lih, K.W.: A new proof of Melnikov’s conjecture on the edge-face
coloring of plane graphs. Discrete Math. 253 (2002) 87-95
11. Wu, J.L., Wang, P.: Simutaneous coloring of edges and faces of series-parallel
graphs. Adavnces in Mathematics, No.4, Vol.34 (2005) 461-467
12. Zhou, X., Suzuki, H., Nishizeki, T.: A Linear Algorithm for Edge-coloring SeriesParallel Multigraphs. J. of Algorithms 20 (1996) 174-201
13. Zhou, X., Nishizeki, T.: Multicoloring of Series-Parallel Graphs. Algorithmica 38
(2004) 271-294

