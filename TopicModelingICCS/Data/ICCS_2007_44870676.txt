Eﬃcient Deadlock Detection in Parallel
Computer Systems with Wormhole Routing
Soojung Lee
GyeongIn National University of Education
6-8 Seoksu-dong, Anyang, Korea 430-739
sjlee@gin.ac.kr

Abstract. Wormhole routing has been popular in massively parallel
computing systems due to its low packet latency. However, it is subject
to deadlock, where packets are waiting for resources in a cyclic form indeﬁnitely. Current deadlock detection techniques are basically dependent
on the time-out strategy, thus yielding unignorable number of false deadlock detections especially in heavy network loads or with long packets.
Moreover, several packets in a deadlock may be marked as deadlocked,
which would saturate the resources allocated for recovery. This paper
proposes a simple but more accurate deadlock detection scheme which
is less dependent on the time-out value. The proposed scheme presumes
deadlock only when a cyclic dependency among blocked packets exists.
Consequently, the suggested scheme considerably reduces the probability
of detecting false deadlocks over previous schemes, thus enabling more
eﬃcient deadlock recovery and higher network throughput. Simulation
results are provided to demonstrate the eﬃciency of the proposed scheme.

1

Introduction

Wormhole routing has been quite popular in parallel computing systems with
interconnection networks, because it can signiﬁcantly reduce packet latency and
the requirement of packet buﬀers is obviated [1]. In wormhole routing, a packet
is split into several ﬂits for transmission. A header ﬂit leads the route and the
remaining ﬂits follow in a pipelined fashion. However, it is susceptible to deadlock, where a set of packets may become blocked forever. This situation occurs
when each packet in the set requests a channel resource held by another packet
in the set in a circular way.
Deadlock avoidance has been a traditional approach in handling deadlock
problem [2]. In this approach, routing is restricted in a way that no cyclic dependency exists between channels. For example, the turn model [3,6] prohibits
turns that may form a cycle. However, such design of routing algorithm results in
low adaptivity and increased latency. A routing algorithm is said to be adaptive
if a routing path is selected based on dynamic network conditions.
A way to have higher throughput while avoiding deadlock is using the virtual
channel. A number of virtual channels share a physical channel, thereby composing virtual networks and facilitating adaptive routing algorithms. In [4], virtual
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 676–683, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Eﬃcient Deadlock Detection in Parallel Computer Systems

677

channels are divided into two classes; one for dimension-order routing with no
cyclic dependency and the other for fully adaptive minimal routing. Although
this scheme can provide more ﬂexibility, it is only partially adaptive.
The frequency of deadlock occurrence is reported to be very low with a fully
adaptive routing algorithm [11]. Hence, it is wasteful to limit routing adaptivity
for rarely occurring deadlocks. This motivated a new approach to handling deadlocks, deadlock detection and recovery. The criteria for determining deadlock is
basically time-out. That is, a packet is presumed as deadlocked if it has been
waiting for longer than a given threshold [7,10] or if all of its requested channels
are inactive for longer than the threshold [9]. Although these schemes can detect
all deadlocks, they may misinterpret simply-congested packets as deadlocked. A
more sophisticated method to determine deadlock was proposed in [8], which,
to our knowledge, performs best in detecting deadlocks accurately. It notices a
sequence of blocked packets as a tree whose root is a packet that is advancing.
When the root becomes blocked later, only the packet blocked due to the root is
eligible to recover. However, the accuracy of the mechanism in [8] relies on the
dependency conﬁguration of blocked packets as well as the threshold value. In
general, deadlock is recovered by ejecting deadlocked packets from the network
[8] or by forwarding them through a dedicated deadlock-free path [10].
Deadlock frequency determines the performance of deadlock detection and
recovery schemes. In heavily loaded networks, those packets presumed as deadlocked will saturate the recovery resources, thus degrading performance considerably. Therefore, it is required that only real-deadlocked packets use the
resources, as their occurrence frequency is low [11]. However, previous schemes
[7,8,9] cannot distinguish between real deadlocked and blocked packets waiting
longer than the given threshold. Also, they force all the packets in deadlock to
recover, although it is suﬃcient to choose only one packet to break the deadlock.
The performance of a fully adaptive routing algorithm relies on the eﬀectiveness of the deadlock detection mechanism associated with it. We propose
simple but eﬀective deadlock detection mechanisms which employ a special control packet named probe to detect deadlock. A blocked packet initiates a probe
when all of its requested channels are inactive for the threshold and propagates
it along the path of inactive channels. The presence of deadlock is presumed, if a
cyclic dependency among blocked packets is suspected through probe propagation, thereby reducing the number of packets detected as deadlocked considerably
over previous schemes. The performance of our schemes is simulated and compared with that of a previous scheme [8], known to be most eﬃcient in reducing
the number of false deadlock detections.

2

The Proposed Mechanism

We ﬁrst describe our scheme for mesh networks. To depict resource dependencies
at a point of time, the channel wait-for graph (CWFG) can be used, where
vertices represent the resources (either virtual channels or physical channels
for networks with no virtual channel) and edges represent either ‘wait-for’ or
‘owned-after’ relations [5,11,12]. A wait-for edge (ci , cj ) represents that there

678

S. Lee

exists a message occupying channel ci and waiting for channel cj . An owned-after
edge (ci , cj ) implies the temporal order in which the channels were occupied, i.e.,
cj is owned after ci . In a network with virtual channels, a packet header may
proceed if any of the virtual channels associated with its requested channel is
available. Hence, in such network, there are multiple wait-for edges outgoing
from a vertex, while there always exists only one owned-after edge, as data ﬂits
in wormhole networks simply follow their previous ﬂits in a pipelined fashion. For
the description of the proposed mechanism, we introduce the following notation.
Notation 1. Assume that blocked packet m holds c and an edge (c, c ) exists
in the CWFG. We refer to c as a predecessor of c with respect to m and denote
the set of predecessors of c with respect to m as pred(c)|m . Also, let dim(c)
and dir(c) denote the dimension and direction of a physical or virtual channel
c, respectively.
As a cycle is a necessary condition to form a deadlock, our scheme is motivated
by a simple observation that a cycle involves at least four blocked packets in a
minimal routing. From this observation, one may think of an idea that a cycle
is detected by counting the number of blocked packets in sequence. That is, if
the number counts up to at least four, one concludes that a potential deadlock
exists. This idea obviously reduces the number of false deadlock detections over
those schemes which simply measure the channel inactivity time for time-out for
deadlock detection; these schemes would yield deadlock detections as much as
the number of blocked packets.
Obviously, our idea may detect deadlock falsely. For instance, consider a sequence of blocked packets residing within one dimension only, without turning
to other dimensions; note that such sequence of blocked packets cannot form a
cycle in meshes. Our idea would declare deadlock in such case, although there
is none. Therefore, in order to further reduce the number of false deadlock detections, we take a diﬀerent view of identifying a cycle. Namely, we focus on the
number of corners, rather than on the number of blocked packets in sequence.
If the number of corners formed by a sequence of blocked packets counts up to
four or more, the presence of a deadlock is presumed.
The above criteria for detecting deadlock based on the number of turns are
likely to detect deadlock falsely. However, the frequency of deadlock occurrence
is reported to be very low with a fully adaptive routing algorithm [11]. Hence, it
is believed that a complex cycle would rarely occur except in a heavy network
condition. Moreover, it is more important to quickly dissipate congestion by
resolving simple cycles before they develop into complex ones.
To implement the above idea, we employ a special control packet named probe
to traverse along inactive channels for deadlock detection. Basically a probe is
initiated upon time-out. However, in order not to initiate probes repetitively
along the same channel, a bit, named PIB (Probe Initiation Bit), is allocated
for each physical channel to indicate that a probe is initiated and transmitted
through the channel. The bit is reset when the physical channel becomes active.
Speciﬁcally, probes are initiated and propagated according to the following rules.

Eﬃcient Deadlock Detection in Parallel Computer Systems

679

Rule 1. A router initiates a probe if
(i) there is a blocked packet,
(ii) all the channels requested by the blocked packet are inactive for threshold
T O due to other blocked packets holding the channels, and
(iii) PIB of any one of the channels requested by the blocked packet is zero.
Let c be a channel with zero PIB, requested by the blocked packet. Also, let m
be one of the packets holding c. Upon initiation, the router transmits probe(m)
through c and sets the PIB of c to one.
Rule 2. When a packet is delivered along a channel with PIB of one, set the
PIB to zero.
Rule 3. Let c be the input channel through which probe(m) is received. Let
e be (c, c ), where c ∈ pred(c)|m . If e is an owned-after edge, simply forward
probe(m) through c . Otherwise if e is a wait-for edge, check if all the channels
requested by m are inactive for threshold T OF due to other blocked packets
holding the channels. If yes, transmit probe(m ) through c , where m is one of
the packets holding c . If no, discard the received probe(m).
By Rule 3, a probe follows the path through which a blocked packet is routed
until the header of the packet is met. At that moment, all the channels requested
by the header are checked for their inactivity time. When the time exceeds T OF
threshold for each of the channels, the probe is forwarded through one of the
channels. Unlike T O, one may set T OF to a small value, in order not to delay
the probe transmission.
Let us call the process of initiation and transmission of a probe probing.
The probe carries the information on the number of turns made by blocked
packets which hold the channels on the probing path; a packet is said to make
turn if it changes its routing dimension. The number of turns is represented by
count. When a router receives a probe, it examines count carried by the probe
If count is at least four, the router presumes the presence of deadlock. As count
is carried by probes, we name this mechanism COUNTING scheme. Speciﬁcally,
the mechanism manipulates count as follows.
Rule C1. Upon initiation of a probe for blocked packet m waiting on input
channel c, if the probe is to be transmitted along channel c , then
(i) if dim(c) = dim(c ), then transmit the probe carrying count of zero along c .
(ii) otherwise transmit the probe carrying count of one along c .
Rule C2. Upon receiving a probe through channel c, if the probe is to be
transmitted along channel c , then
(i) if dim(c) = dim(c ), then increase the received count by one.
(ii) if count ≥ 4 and (c, c ) is a wait-for edge, then declare deadlock; otherwise,
transmit the probe carrying count along c .
In Rules C1 and C2, whether to send the probe or not and which channel to send
the probe through are all determined by Rules 1 and 3. Rule C2 allows deadlock

680

S. Lee

declaration when the probe encounters a packet header. This is to recover the
potential deadlock by selecting that packet as a victim.
Note that COUNTING scheme does not consider directions of turns. It may
misinterpret a non-cyclic sequence of blocked packets involving turns of the same
direction as deadlock. In order to better distinguish deadlock, we suggest a slight
modiﬁcation to COUNTING scheme that reﬂects the direction of turns. A bit
is used for each direction in each dimension. For example, four bits are used for
2D networks; two bits for positive and negative directions in dimension zero and
another two bits in dimension one. In general, 2n bits are used for nD networks.
These bits are carried by probes as count is carried in COUNTING scheme.
The basic idea of the modiﬁed scheme is set the bits corresponding to the turn
direction and declare deadlock when at least four bits corresponding to any two
dimensions are set. We call this modiﬁed scheme BITSET scheme. The basic
operations for probe and PIB management are the same as described in Rules 1
to 3. Hence, we present only bit operations below.
Notation 2. Probes in BITSET scheme carry 2n T Bs (Turn Bits) in nD networks. Speciﬁcally, T Bd, + and T Bd, − represent bits for positive and negative
directions in dimension d, respectively.
Rule B1. Upon initiation of a probe for blocked packet m waiting on input
channel c, if the probe is to be transmitted along channel c , then
(i) if dim(c) = dim(c ), then transmit the probe along c carrying zero T Bs.
(ii) otherwise transmit the probe along c carrying T Bs with T Bdim(c), dir(c)
and T Bdim(c ), dir(c ) set, where dir(c) = + if packet m was sent along positive
direction of c. Otherwise, dir(c) = −. dir(c ) is set similarly.
Rule B2. Upon receiving a probe through channel c, if the probe is to be transmitted along channel c , then
(i) if dim(c) = dim(c ), then set T Bdim(c), dir(c) and T Bdim(c ), dir(c ) .
(ii) if T Bd1, + , T Bd1, − , T Bd2, + , and T Bd2, − , for any two dimensions d1 and
d2, are set and (c, c ) is a wait-for edge, then declare deadlock; otherwise, transmit the probe carrying T Bs along c .
In k-ary n-cube networks, deadlock can be formed involving wraparound channels. This type of deadlock may not be detected by the rules above if it does not
include suﬃcient number of turns. We take a simple approach for detecting such
deadlock by regarding wraparound channel usage along the same dimension as a
180-degree turn, thus increasing count by two for COUNTING scheme. For BITSET scheme, it is treated as if the packet is making a 180-degree turn through
one higher dimension, thus setting TBs corresponding to those two dimensions.
The detailed description is omitted due to the space constraint.

3

Performance

This section presents simulation results of the proposed schemes and the scheme
in [8] which is considered, to our knowledge, as most eﬃcient in reducing the

Eﬃcient Deadlock Detection in Parallel Computer Systems
Deadlocked Packets (%)

Deadlocked Packets (%)

7

7

6

6

Deadlocked Packets (%)

681

Deadlocked Packets (%)

7
0.3

5

BIT
CNT
LOP

BIT
CNT
LOP

5

6
BIT
CNT
LOP

5
0.2

4

4

4

3

3

3

2

2

2

1

1

1

0

0
0
0.2
0.4
0.6
0.8
1
Normalized Load Rate (f/n/c)
(a)

BIT
CNT
LOP
0.1

0
0
0.2
0.4
0.6
0.8
1
Normalized Load Rate (f/n/c)
(b)

0
0
0.2
0.4
0.6
0.8
1
Normalized Load Rate (f/n/c)
(c)

0
0.2
0.4
0.6
0.8
1
Normalized Load Rate (f/n/c)
(d)

Fig. 1. Percentage of packets detected as deadlocked (a) T O=16 cycles, 16x16 meshes.
(b) T O=16 cycles, 8x8x8 meshes. (c) T O=16 cycles, 16x16 tori. (d) T O=128 cycles,
16x16 meshes.

number of false deadlock detections. The simulations are run on 16x16 and 8x8x8
mesh and torus networks. Channels are with three virtual channels of buﬀer
depth of two ﬂits. The routing algorithm is minimal and fully adaptive. Packets
are 32 ﬂit-sized and their destinations are assumed uniformly distributed. We
assume one clock cycle each for transmission of a ﬂit over a channel, decoding
a control ﬂit, and crossing a switch. The statistics have been gathered after
executing the program for 50000 clock cycles. The result of the ﬁrst 10000 cycle
is discarded for the initial transient period. Packets are generated exponentially
with varying injection rate where the same rate is applied to all nodes. A packet
presumed as deadlocked is ejected from the network and re-injected later when
any of its requested channel resources is available.
We measured the percentage of packets detected as deadlocked by each strategy for varying normalized load rate of ﬂits per node per cycle (f/n/c). Figure 1
shows the results for two T O thresholds of 16 and 128 clock cycles. The results of
[8] are indicated with the legend ‘LOP’ and those of COUNTING and BITSET
schemes with ‘CNT’ and ‘BIT’, respectively. T OF threshold for forwarding probes
is set to two cycles for all experiments. The four ﬁgures show similar behaviors
approximately. As expected, the percentage increases with the load rate. BIT detects almost no deadlock except for torus networks. Overall, CNT performs better
than LOP, its percentage being approximately as much as eight times lower for
meshes and eleven times lower for tori. It is shown that for large T O such as 128
cycles, LOP yields less than 0.3 percentage of packets presumed as deadlocked,
even at high loads for meshes. The results for CNT for the three network types
are almost comparable, although packets would turn more often in 3D networks.
Normalized accepted traﬃc measured in ﬂits per node per cycle is presented
in Figure 2 for 2D meshes. All three schemes perform comparably in most cases
except for high loads and T O of 16 cycles, at which the throughput of LOP
drops drastically. This is because LOP detects too many packets as deadlocked
for that network condition, as shown in Figure 1(a). Note that for other network
conditions, the diﬀerence in the number of deadlocked packets has no signiﬁcant
eﬀect on throughput.

682

S. Lee
Accepted Traffic (f/n/c)

Number of Probings (/n/c)

Accepted Traffic (f/n/c)
0.01

0.6

0.6
BIT
CNT
LOP

0.008

BIT
CNT
LOP

0.4

0.4

0.2

0.2

BIT (TO=16)
CNT (TO=16)
BIT (TO=128)
CNT (TO=128)

0.006

0.004

0.002

0

0
0

0.2

0.4

0.6

0.8

1

Normalized Load Rate (f/n/c)
(a)

0

0.2

0.4

0.6

0.8

1

Normalized Load Rate (f/n/c)
(b)

0
0
0.2
0.4
0.6
0.8
1
Normalized Load Rate (f/n/c)
(c)

Fig. 2. 16x16 meshes (a) Normalized accepted traﬃc when TO=16 cycles. (b) Normalized accepted traﬃc when TO=128 cycles. (c) Mean number of probe initiations per
node per clock cycle.

Table 1. Mean number of probe transmissions per probing for COUNTING scheme
Network
Conﬁgurations
16x16 meshes and TO=16 cycles
16x16 meshes and TO=128 cycles
8x8x8 meshes and TO=16 cycles
8x8x8 meshes and TO=128 cycles

0.1
N/A
N/A
N/A
N/A

Normalized Load Rate
0.2 0.3 0.4 0.5 0.6 0.7
5.6 6.6 6.2 6.3 6.4 6.6
N/A N/A N/A 6.3 5.5 6.7
4.5 3.9 3.8 3.9 4.1 4.2
N/A N/A 2.8 3.4 4.0 4.3

0.8
6.6
7.3
4.3
4.4

0.9
6.6
8.5
4.4
4.5

As the proposed schemes utilize a control packet, we measured its load on the
router through the number of probings and the number of probe transmissions per
probing. The number of probings initiated by a node per cycle is shown in Figure
2(c) for 2D meshes. Obviously, a node tends to initiate probings more often with
higher loads but less frequently with higher thresholds. In particular, there is a
signiﬁcant diﬀerence between the results for the two thresholds. It is observed for
T O of 128 cycles that there is virtually no probing activity regardless of the network load. For T O of 16 cycles, it is noted for both schemes that a node initiates
approximately two probings per 1000 clock cycles at the saturated load and no
more than ﬁve probings at extremely high loads. The reason for the slight diﬀerence between the results of the two schemes at high loads for T O of 16 cycles is due
to the fact that CNT detects more deadlocks than BIT as shown in Figure 1(a).
That is, it facilitates blocked packets to proceed, since more packets are ejected
from the highly loaded network. This reduces the need for probe initiations. BIT
and CNT schemes showed similar results for the other network conﬁgurations.
Table 1 shows the number of probe transmissions for a probing. In general,
more probes are transmitted for 2D meshes than for 3D meshes. This is simply
because packets have more routing adaptivity and are less blocked in 3D meshes.
It is noted that the number of probes tends to increase with the load rate for
both networks, especially for T O of 128 cycles. For T O of 16 cycles, blocked
packets are dissipated promptly by more frequent probings than for 128-cycle
T O, which leads to lower possibility of forwarding probes.

Eﬃcient Deadlock Detection in Parallel Computer Systems

4

683

Conclusions

This paper proposed enhanced mechanisms for deadlock detection in wormholerouted direct networks. Diﬀerent from the previous schemes, the proposed schemes
do not solely rely on the threshold value. A control packet propagates to ﬁnd out
the presence of deadlock. As the control packets traverse only along inactive channels, they virtually do not disturb normal packet progression. Simulation studies
are conducted to compare the performance of the proposed schemes with that of
the scheme which, to our knowledge, is most eﬃcient in reducing the number of
false deadlock detections. The simulation results demonstrate that the suggested
schemes yield a substantial decrease in the number of deadlock detections in
various network conditions. Consequently, our schemes outperform the previous
scheme in terms of the network throughput irrespective of the time-out threshold.

References
1. Al-Tawil, K.M., Abd-El-Barr, M., Ashraf, F.: A survey and comparison of wormhole routing techniques in a mesh network. IEEE Network 11(2) (1997) 38–45
2. Park, H., Agrawal, D.P.: A generic design methodology for deadlock-free routing
in multicomputer networks. Journal of Parallel and Distributed Computing 61(9)
(2001) 1225–1248
3. Chiu, G.M.: The odd-even turn model for adaptive routing. IEEE Trans. Parallel
and Distributed Systems 11(7) (2000)
4. Duato, J.: A general theory for deadlock-free adaptive routing using a mixed set of
resources. IEEE Trans. Parallel and Distributed Systems 12(12) (2001) 1219–1235
5. Duato, J.: A necessary and suﬃcient condition for deadlock-free adaptive routing
in wormhole networks. IEEE Trans. Parallel and Distributed Systems 6(10) (1995)
1055–1067
6. Glass, C.J., Ni, L.M.: The turn model for adaptive routing. Journal of the ACM
41(5) (1994) 874–902
7. Kim, J., Liu, Z., Chien, A.: Compressionless routing: a framework for adaptive and
fault-tolerant routing. IEEE Trans. Parallel and Distributed Systems 8(3) (1997)
229–244
8. Martinez, J.M., Lopez, P., Duato, J.: FC3D: ﬂow control-based distributed deadlock detection mechanism for true fully adaptive routing in wormhole networks.
IEEE Trans. Parallel and Distributed Systems 14(8) (2003) 765–779
9. Martinez, J.M., Lopez, P., Duato, J.: A cost-eﬀective approach to deadlock handling in wormhole networks. IEEE Trans. Parallel and Distributed Systems 12(7)
(2001) 716–729
10. Pinkston, T.M.: Flexible and eﬃcient routing based on progressive deadlock recovery. IEEE Trans. Computers 48(7) (1999) 649–669
11. Pinkston, T.M., Warnakulasuriya, S.: Characterization of deadlocks in k-ary n-cube
networks. IEEE Trans. Parallel and Distributed Systems 10(9) (1999) 904–921
12. Schwiebert, L., Jayasimha, D.N.: A necessary and suﬃcient condition for deadlockfree wormhole routing. Journal of Parallel and Distributed Computing 32 (1996)
103–117

