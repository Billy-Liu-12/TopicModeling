Dynamic Data Path Prediction in Network Virtual
Environment
Sun-Hee Song, Seung-Moon Jeong, Gi-Taek Hur1, and Sang-Dong Ra2
Digital Contents Cooperative Research Center Dongshin University,
1
Dept. of Digital Contents, Dongshin University
2
Dept. of Computer Engineering, Chosun University
shsong@dsu.ac.kr

Abstract. This research studies real time interaction and dynamic data shared
through 3D scenes in virtual network environments. In a distributed virtual
environment of client-server structure, consistency is maintained by the static
information exchange; as jerks occur by packet delay when updating messages
of dynamic data exchanges are broadcasted disorderly, the network bottleneck
is reduced by predicting the movement path by using the Dead-reckoning
algorithm. The shared dynamic data of the 3D virtual environment is
implementation using the VRML EAI.
Keywords: net-VE, Dead-reckoning, Consistency.

1 Introduction
Net-VE(Network Virtual Environment)[1][2] is a system that connection the
distributed network to the virtual reality technology and offers 3D space to
cooperate distributed multi-users interaction through realtime networking.
Consistency at a distributed virtual environment[3] of the client-server structure is
continued by continuous exchange of static information among distributed clients.
The cycles transfer of static information brings traffic overhead of network. The
precise way for network users to know the others’ static is to transfer the packet by
hand shaking for each frame, which takes a overload of the synchronization and
decrease the velocity.
Based on the roles by which the dynamic data of the distributed multi-users is
processed through the multi-casting communication via the client-server and the peerpeer server, the network system in this study is composed of the message server and
the application server and distribution servicing loads by allocating realtime data to
the dynamic data server and non-realtime data to the static data server. When a new
client is connecter to a 3D scene of the network virtual space, it interpolates the prior
location with the Dead-reckoning[4] path prediction algorithm of DIS(Distributed
Interactive Simulation) to continue consistency and presentation the dynamic data
sharing scene of the 3D virtual space.
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 150–153, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Dynamic Data Path Prediction in Network Virtual Environment

151

2 Dynamic Data Path Prediction
2.1 Path Prediction Using Dead-Reckoning Algorithm
When you know the current location x(t ) , the location at the time change t + Δt after
movement for a cycle interval from the time t at an average velocity can be
calculated as in expression (1). Based on the location of the shared object in
expression (1), the object location at the current time can be estimated. The previous
location is interpolated if the error is over the predetermined threshold after reviewing
the error between the estimated and the actual static values.

x(t + Δt ) = x(t ) + xΔt
y (t + Δt ) = y (t ) + yΔt

x = V cosψ
y = V sinψ

(1)

V : average velocity at thetime [t , t + Δt ]

ψ : average direction angle at thetime [t , t + Δt ]

Fig. 1. Dead-reckoning Convergence

Fig. 1 shows the Dead-reckoning convergence process. We can get more precise
estimates by increasing the estimate function interval of expression (2) but it results in
more composite calculation. Therefore, we use 2nd level functions such as 1st
differentials or 2nd differentials. We adjusts the threshold of the Dead-reckoning
convergence number and control the static information transfer rate. The client that
receives the discreteness dynamic data static information creates a continually shared
static using the shared static location convergence expression (2)
x(t ) = x(t0 ) + (t − t0 )

(t − t0 ) 2 d 2 x(t )
dx(t )
|t =t0 +
|t =t0 +"
dt
2
dt 2

(2)

Fig. 2. shows the measurement of the actual location, the convergence location and
the estimated location error when the path from the initial value of the dynamic data
by the Dead-reckoning convergence width, ( x, y,θ ) =(1.5, 1.8, 70.0°), to the value,
( xn , yn ,θ n ) =(4.62, 5.64, 70.0°), is set to the velocity 2.4, the acceleration 0, the time

stamp 2.0, and the DR Interval 0.75, 0.50, 0.10, 0.05. When the actual location in
Table 1 and the location prediction error by convergence width are measured at the
point ( xn , yn ,θ n ) =(4.62, 5.64, 70.0°), the estimated error rate gets smaller and it
becomes possible to predict the location which is closer to the actual path when the

152

S.-H. Song et al.

Dead-reckoning convergence width is adjusted between 0.05 and 0.5, as shown in
Fig. 2. As the location prediction interpolation error is 0 or -0.01 in (b) DR Interval =
0.10 and (c) DR Interval = 0.05, the dynamic data movement is not sensed at the
client rendering. Although realtime rendering is more possible as the consistency is
higher, it is possible to send the location change information of the shared object to
the other clients and continue an proper transfer rate when in 0.10, because the server
function and frequent updates cause network broadband width delays.

(a) DR Interval=0.50

(b) DR Interval=0.10

(c) DR Interval=0.05

Fig. 2. Position Prediction of Dead-reckoning Convergence

The location interpolation includes check of the error between the estimated and
the real values and interpolation of the previous location when the error is over the
predetermined threshold of the Dead-reckoning convergence. If the threshold is big,
the average transfer rate of static information is low, even though the error of the
shared static gets bigger. If the threshold is small, the average transfer rate and
broadband width get heighten even though the error of the shared static gets smaller.
Pt 0 and V r mean the ESPDU location and velocity, respectively. expression (3)is for
interpolating the previous location of the entity using the initial location value
the time stamp velocity at the linear block

t0 by

d n and the location estimate t1 .

Pt1 = Pt 0 + V r (t1 − t0 ) .

(3)

3 Conclusion
The dynamic data whose path was predicted by a Dead-reckoning algorithm
interpolates the previous location with an interpolation node(Interpolation), transfers
the shared object static information, and continues consistency with other clients.
At the network 3D virtual space, the movement path was predicted using the Deadreckoning algorithm at the client buffer because the congested broadcast by
interaction and static information caused network delay and jerks. The error between
the estimated and the actual static values, which is more than the threshold based on

Dynamic Data Path Prediction in Network Virtual Environment

153

the shared object location, required interpolation of the prior location using the Deadreckoning estimate function and multicasting of the ESPDU packet of the DIS.
Fig. 3 is the 3D scene with the output through the client rendering engine at the
network virtual space. The actual path of the dynamic data agent_A is 'Actual Path',
and as the Dead-reckoning estimate location path is a 'DR path' and the dynamic data
moves suddenly when the user who received the shared static updates the information,
it does not change right away to a client cache value, but moves to the 'Interpolation
path' by the convergence interval.

Fig. 3. Dead-reckoning Apply of 3D Graphics Scene

References
[1] Singhal, S. and Zyda, M., 1999. Networked Virtual Environments: Design and
Implementation, ACM Press [ISBN 0-201-32557-8].
[2] Bouras, C., Triantafillou, V. and Tsiatsos, T., 2001. Aspects of collaborative learning
environment using distributed virtual environments In Proceedings of ED-MEDIA,
Tampere, Finland, June25-30 pp.173-178
[3] Bouras,C., Psaltoulis, D., Psaroudis, C. and Tsiatsos, T., 2003. Multi user layer in the EVE
distributed virtual reality platform In Proceedings of Fifth International Workshop on
Multimedia Networks Systems and Applications (MNSA 2003) Providence, Rhode Island,
USA, May 19-22 pp.602-607.
[4] W. Cai, F.B.S. Lee, L. Chen, An auto-adaptive Dead-reckoning algorithm for distributed
interactive simulation, in: Proceedings of the Thirteenth Workshop on Parallel and
Distributed Simulation, 1999, pp.82-89.

