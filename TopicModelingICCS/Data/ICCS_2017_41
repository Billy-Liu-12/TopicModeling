Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
Computer
Science
(2017) 1414–1423
This Procedia
space is
reserved
for 108C
the Procedia
header, do not use it
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

An Exact Resolution for the Probabilistic Traveling
An Exact Resolution for the Probabilistic Traveling
Problem under
A Priori Strategy
AnSalesman
Exact Resolution
for thethe
Probabilistic
Traveling
Salesman
Problem under
the
A Priori Strategy
Mohamed
Abdellahi
Amar1 , Walid
and Monia
Bellalouna1
Salesman
Problem
underKhaznaji
the A2, Priori
Strategy
Mohamed Abdellahi Amar1 , Walid Khaznaji2 , and Monia Bellalouna1

1
1
1

Laboratory CRISTAL-GRIFT, National
1 School of Computer 2Science, University Campus Manouba,
1
Mohamed
Abdellahi Amar
, School
Walid2010,
, and Monia
Bellalouna
Laboratory
CRISTAL-GRIFT,
National
ofKhaznaji
Computer
University
Campus Manouba,
Manouba
Tunisia Science,
Manouba 2010,
Tunisia
medabdellahiamar@yahoo.fr,
monia.bellalouna@ensi.rnu.tn
Laboratory CRISTAL-GRIFT,
National
School monia.bellalouna@ensi.rnu.tn
of Computer Science, University Campus Manouba,
2
medabdellahiamar@yahoo.fr,
Tunisia SESAME University
2
Manouba
2010, Tunisia
Tunisia
SESAME
University
walid.Khaznaji@sesame.com.tn
medabdellahiamar@yahoo.fr,
monia.bellalouna@ensi.rnu.tn
walid.Khaznaji@sesame.com.tn
2
Tunisia SESAME University
walid.Khaznaji@sesame.com.tn

Abstract
Abstract
The Probabilistic Traveling Salesman Problem (PTSP) is an extension of the classical Traveling
The
Probabilistic
Salesman
Problem (PTSP)
is an extension
of of
thethe
classical
Traveling
Salesman
ProblemTraveling
(TSP). The
main difference
is the stochastic
presence
customers,
that
Abstract
Salesman
Problem
(TSP).
The
main
difference
is
the
stochastic
presence
of
the
customers,
that
is,
the
number
of
them
to
be
visited
each
time
is
a
random
variable,
where
each
customer
The
Probabilistic
Traveling
Salesman
Problem
(PTSP)
is an extension
of the
classical
Traveling
is,
the
number
of
them
to
be
visited
each
time
is
a
random
variable,
where
each
customer
associates
with a given
probability
occurrence.
Thestochastic
resolutionpresence
of problem
consists
in finding
Salesman
Problem
(TSP).
The mainof
is the
of the
customers,
that
associates
with
avisiting
given
probability
ofdifference
occurrence.
The the
resolution
of length
problem
consists
in finding
an
a
priori
tour
all
customers
which
minimizes
expected
over
all
possibilities.
is,
the
number
of
them
to
be
visited
each
time
is
a
random
variable,
where
each
customer
an
a priori
tour visiting
allan
customers
which minimizes
the expected
length
all possibilities.
In
this
paper,
propose
exact of
algorithm
for the
of the
PTSP.over
In
this
context,
we
associates
withwe
a given
probability
occurrence.
Thesolution
resolution
of problem
consists
in finding
In
this
paper,
we
propose
an
exact
algorithm
for
the
solution
of
the
PTSP.
In
this
context,
we
derive
new
expressions
for
the
lower
bound
and
transitional,
permanent
evaluations
as
well
as
an
a priori
tour
visiting for
all customers
which minimizes
the expected
lengthevaluations
over all possibilities.
derive
new
expressions
the
lower
bound
and
transitional,
permanent
as
well
as
the
mechanism
of
separation.
The
numerical
results
demonstrate
the
advantage
of
the
proposed
In
this
paper, we
propose
an exact
algorithmresults
for thedemonstrate
solution of the
PTSP.
In this
context,
we
the
mechanism
of
separation.
The
numerical
the
advantage
of
the
proposed
evaluations.
derive
new expressions for the lower bound and transitional, permanent evaluations as well as
evaluations.
the
mechanism
of Published
separation.
The
numerical
results
demonstrate
the advantage
of evaluations
the proposed
Keywords:
probabilistic
traveling
salesman
exact
solution, branch
and bound,
©
2017
The Authors.
by Elsevier
B.V. problem,
Keywords:
probabilistic
traveling
salesmancommittee
problem,ofexact
solution, branch
andonbound,
evaluations
Peer-review
under
responsibility
of the scientific
the International
Conference
Computational
Science
evaluations.
Keywords: probabilistic traveling salesman problem, exact solution, branch and bound, evaluations

1 Introduction
1 Introduction
The Probabilistic Traveling Salesman Problem (PTSP) is a type of NP-complete problem. It is
1
Introduction
The
Probabilistic
Traveling Salesman
(PTSP)
is a(TSP).
type of
NP-complete
problem.
is
a variation
of the well-known
TravelingProblem
Salesman
Problem
This
probabilistic
version It
was

a
variation
of the well-known
Traveling
Salesman
Problem (TSP).
Thisconsider
probabilistic
version
was
initially
introduced
by Jaillet
[1], it can
be formulated
here
a complete
The
Probabilistic
Traveling
Salesman
Problem
(PTSP) as
is afollows:
type ofwe
NP-complete
problem.
It is
initially
introduced
by
Jaillet
[1],
it can
be
formulated
as
follows:
we
consider
here
athe
complete
connected
graph
G
=
(V,
E),
where
its
arcs
are
valued,
V
is
the
set
of
vertices,
E
set
of
a
variation graph
of the well-known
probabilistic
was
connected
G
= (V, E),Traveling
where
itsSalesman
arcsdefined
are Problem
valued,
V(TSP).
is theThis
set
of
vertices,
Eversion
thea set
of
edges.
Let
P
be
a
probability
distribution
on
the
sub-set
of
V
:
P(V
),
T
be
given
initially
introduced
by Jaillet [1],
it can be formulated
as
follows:
weofconsider
here
abecomplete
edges.
Let
P
be
a
probability
distribution
defined
on
the
sub-set
V
:
P(V
),
T
a
given
an
a priori graph
tour through
. For
eachits
sub-set
S ⊆valued,
V , we V
consider
modification
it
connected
G = (V,V
where
arcs are
is the U
setaa of
vertices, E method,
the set of
an
a priori
tour through
VE),
. For
eachvertices
sub-set
S⊆
V , we consider
U
modification
method,
it
consists
in
erasing
from
T
the
absent
by
remaining
in
the
same
order.
Let
L
be
a
real
edges.
Let
P be afrom
probability
distribution
defined
on the insub-set
of Vorder.
: P(VLet
), TLTbebea agiven
consists
in
erasing
T
the
absent
vertices
by
remaining
the
same
real
random
variable
defined on
which
in an aS priori
T and for
S of P(V ),Tmethod,
associates
an a priori
tour through
V .P(V
For),
sub-set
⊆ V , tour
we consider
U each
a modification
it
random
variable
defined
on
P(V
),each
which
in an a priori
tour
Tconsists
and for
each
S of P(V
),priori
associates
the
length
of
the
tour
through
S.
The
solution
of
problem
in
finding
an
a
tour
consists
in
erasing
from
T
the
absent
vertices
by
remaining
in
the
same
order.
Let
L
be
a
real
the
length
of
the tour
S. Theexpected
solutionlength
of problem
consists
finding
an
a Tpriori
tour
visiting
all
points
that through
minimizes
of a T
tour
[1].in
For
S=
i
random
variable
on P(V ), the
which
in an a length
priori tour
andT
for
each
Seach
of P(V
), S
associates
visiting all
pointsdefined
that minimizes
the
expected
of
a
tour
T
[1].
For
each
S
=
S
i
2n of problem consists in finding an a priori tour
the length of the tour through S. The solution

n
2
visiting all points that minimizes
the
expected
a )tour
E(L
P (Si )Lof
(Si ) T [1]. For each S = Si
(1)
(T,U
) ) =  length
(T,U
E(L(T,U ) ) = i=1
P (Si )L(T,U ) (Si )
(1)
n
2

i=1
E(L(T,U ) ) =
P (Si )L(T,U ) (Si )
(1)
1
i=1
1

1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.068

1

	

An Exact Resolution for Mohamed
the Probabilistic
Amar,
Khaznaji
and Bellalouna
Abdellahi Traveling
Amar et al. Salesman...
/ Procedia Computer Science 108C
(2017)
1414–1423

It was explicitly exhibited by Jaillet [1] for the heterogeneous and homogeneous version. As
regards the last, it is shown as follows: let d(i, j) be a distance between the nodes i, j, and
p = P (k) ∀k ∈ T , q = 1 − p, the expected length of a tour T is
E(LT ) = p2

n−2

r=0

qr

n


d(i, T r (i))

(2)

i=1

Where T r (i) is the successor number r of i in the tour T .
The development of methods for resolution of the PTSP is a very active research field, the
reason is that it can be used to model many real-world applications [1, 2, 3]. Therefore, various
methods of resolution were proposed to solve it. We cite the most studied heuristics: nearest
neighbor and space filling curve analyzed in [4], local search heuristics 2-opt and 1-shift [4, 5],
and other variations of them [6]. On the other hand, a wide variety of metaheuristics were
introduced for the PTSP: stochastic simulated annealing [7, 8], different type of ant colony
system [9, 5], genetic algorithm [10], hybrid honey bees mating optimization [11]. A few papers
of the exact algorithms were proposed to solve the PTSP: an integer nonlinear programming,
exact branch and cut and branch and bound [1, 12, 13].
In this paper, we propose an exact algorithm for the PTSP, through a new adaptation of
Little algorithm [14]. The main difference between the TSP and PTSP resides in the evaluations.
In fact, the values of rows and columns of distance matrix do not contribute in terms of a tour
for the TSP, which is not the case of the PTSP. Given these considerations we derive the lower
bound and probabilistic evaluations. In this paper we split the work into the following parts.
Next, in section 2, we exhibit a discerption of Little algorithm for the TSP. In section 3, we
present and analyze the proposed algorithm for the solution of the PTSP. In section 4, the
numerical results are discussed. Finally, in section 5 we give the conclusion and future work.

2

Little Algorithm

The algorithm that we describe here is Little’s algorithm [14]. It is an algorithm applicable to
problems whose matrix is positive. The separation is based on the specific tour construction
procedure, for limit the search space to the most promising [14]. Here we briefly present the
principal steps of the algorithm for the TSP.

2.1

Matrix Reduction

We consider for all this section the matrix as shown in Table 1a. The first step consists in
reducing the distance matrix, we appear one zero in each row and each column. For each row,
we determine its minimum and we subtract it from all elements of row. We repeat the same
action for all matrix rows and columns. The results are shown in Table 1b.
A
a B
C
D

A
∞
1
7
1

B
2
∞
4
3

C
5
8
∞
9

D
3
6
2
∞

b

A
B
C
D

A
∞
0
5
0

B
0
∞
2
2

C
0
4
∞
5

D
1
5
0
∞

c

A
B
C
D

A
∞
0(4)
5
0(2)

B
0(2)
∞
2
2

Table 1: Initial matrix(a), reduced matrix (b) and penalty cost(c)

2

C
0(4)
4
∞
5

D
1
5
0(3)
∞

1415

1416	

An Exact Resolution for Mohamed
the Probabilistic
Amar,
Khaznaji
and Bellalouna
Abdellahi Traveling
Amar et al. Salesman...
/ Procedia Computer Science 108C
(2017)
1414–1423

2.2

Initial Evaluation

The sum of the numbers removed during the reduction of matrix, noted, EvT SP (n) is called
initial bound for TSP, where n is the order of the initial matrix.
EvT SP (n) =

n


min Ri +

i=1

n


min Cj

(3)

j=1

Where Ri is the ith row and Cj is the j th column.

2.3

Calculation Penalty Cost

The first step of the separation is calculation of penalty cost for each zero in the matrix. The
penalty cost PNij is calculated as follows
PNij = min Ri + min Cj

(4)

Where min Ri represents the minimum of the ith row, and min Cj represents the minimum of
the j th column. Table 1c illustrates the penalty cost of each zero of the initial reduced matrix
(the values within parenthesis denote the penalty cost).

2.4

Separation and Evaluation

The approach of separation and evaluation is described through the following example:
• If we choose the arc AC, the length of the final tour increases by zero.
• Not choose the arc AC: C isn’t the successor of A (i.e., B or D is the successor of A), and
A isn’t the predecessor of C (i.e., B or D is the predecessor of C).
As a result the penalty cost for the arc AC equals PNAC = 0 + 4, we continue the same process
for all zeros in the matrix. Then, we choose the zero that has the biggest penalty cost, and we
separate according to it (we have the choice between the arcs AC and BA that have the same
biggest penalty cost). In this case we constantly choose the topmost and the leftmost penalty
cost that corresponds to arc AC.

2.5

Next Evaluations

In an analogous way, we repeat the steps: calculation penalty cost and separations for the
different next branches until the matrix only contains zeros, where the final tree is finished. By
transforming these steps of the Little algorithm and profiting from the probabilistic elements,
we design and develop in the following section the proposed exact algorithm for the PTSP.

3

The Algorithm Procedure for the PTSP

Now, we present our main contribution that consists in designing and developing an exact
algorithm that we will adapt to the resolution for the PTSP, by basing on the expected length
of a tour introduced by Jaillet [1]. This design takes the form of ”Branch and Bound” in the
probabilistic framework, by deriving the equations of the evaluations. The fact that we generate
these probabilistic evaluations is to direct the search space towards the promising sub-spaces
3

	

An Exact Resolution for Mohamed
the Probabilistic
Amar,
Khaznaji
and Bellalouna
Abdellahi Traveling
Amar et al. Salesman...
/ Procedia Computer Science 108C
(2017)
1414–1423

(i.e., the possibility of finding the optimal solution is very feasible). We give in this section,
the evaluation process for each node of the tree. The design starts by deriving an expression of
the initial evaluation, then the probabilistic evaluations and penalty cost for each 0arc . Finally
we use the previous distance matrix ( Table 1a) to explain the different involved steps of the
proposed algorithm.

3.1

Matrix Reduction

In the same manner of Littel’s algorithm for the TSP, we reduce the matrix. The lower bound
for the TSP equals EvT SP (4) = 9(as shown in section 2.2), which will help us to calculate the
initial evaluation for the PTSP.

3.2

Initial Evaluation

We give here an initial evaluation noted EvP T SP (n) in order to separate the problem into two
first sub-problems. This first evaluation associated with the root R of the tree.
Proposition 1. Let G=(V,E,M) be a graph such as |V | = n, V is the set of vertices, E the
set of edges and M is distance matrix. The probabilistic evaluation P.EP T SP : which is defined
as follows is considered as a lower evaluation for the PTSP
P.ER = P.EvP T SP (n) = EvT SP (n)(p2

n−2

r=0

q r ) = EvT SP (n)p(1 − q n−1 )

(5)

Proof. According to the length of the tour through V we have:
LT =

n

i=1

d(i, T r (i)) ≥

n


minj=i (d(i, j)) +

i=1

n

j=1

mini=j (d(i, j)) ⇒ LT ≥ EvT SP (n)

(6)

by combining the expression 6 with formula 2, we obtain
E(LT ) ≥ p2

3.3

n−2


q r EvT SP (n)

r=0

∀

T ⇒ P.EvP T SP (n) = EvT SP (n)(p2

n−2


qr )

(7)

r=0

Probabilistic Evaluations and Penalty Cost

This section shows in details the construction of transitional probabilistic evaluations based on
the formula 2.
Proposition 2. For the next two nodes of the tree we give the next two transitional probabilistic
evaluations due to choice of an arc, according to its effect on the construction of the optimal
tour. For the arc AB(the same for other arcs):
1. Choose AB: increase the expected length of the tour at least by
P.EvAB

=

P.EvR + p2

n−2


(r)

q r [minX=A d(A, X)] + p2 EvT SPN ext

(8)

r=1

Where EvT SPN ext is the evaluation of resulting matrix for the TSP where row A and
column B are removed.
4

1417

1418	

An Exact Resolution for Mohamed
the Probabilistic
Amar,
Khaznaji
and Bellalouna
Abdellahi Traveling
Amar et al. Salesman...
/ Procedia Computer Science 108C
(2017)
1414–1423

2. Not choose AB: increase the expected length of the tour at least by
P.EvAB

=
+

(1)

(1)

P.EvR + p2 [minK=B d(A, K) + minK=A (d(K, B))]
p2

n−2


(r)

(9)

(r)

q r [minX=K d(A, X) + minX=B d(K, X)]

r=2

P.EvAB represents the probabilistic penalty cost for the arc AB, min(i) d(A, X) is the ith
minimum of row A, n is the size of the initial matrix, these formulas are valid for all
iterations.
Proof. Consider now a PTSP example of order 4. Based on formula 2 we may be split the
formula into four components as in Table 2, where d(A, T r (A)) represents the distance between
the point A and its successor number r in the tour T . Taking the column A of Table 2 which
corresponds to the arc A and its successors. As q = 1 − p ∈ [0, 1] we have p2 q ≥ · · · ≥ p2 q n−2

E(LT ) =

p
p2 [
+p2 q[
+p2 q 2 [

A
d(A, T 0 (A))
d(A, T 1 (A))
d(A, T 2 (A))

B
+d(B, T 0 (B))
+d(B, T 1 (B))
+d(B, T 2 (B))

C
+d(C, T 0 (C))
+d(C, T 1 (C))
+d(C, T 2 (C))

D
+d(D, T 0 (D))]
+d(D, T 1 (D))]
+d(D, T 2 (D))]

Table 2: Demonstration
So, by arranging the elements of column A of Table 2 such as


 

min(0) d(A, X)
d(A, T 0 (A))
 min(1) d(A, X)  =  d(A, T 1 (A)) 
d(A, T 2 (A))
min(2) d(A, X)
(0)
where min(n−2)
 ≥
 · · · ≥ min .


a
c
2
Let V1 =
∈ R such as a ≤ b and V2 =
∈ R2 such as c ≤ d. we have
b
d
ad + bc ≤ ac + bd.
According to above inequation we obtain the following expression 10
n−2

r=0

q r min(r) d(A, X) ≤

n−2


q r min(i) d(A, X)

(10)

r,i∈{0,...n−2}

The expression 10 leads to: at least we increase the expected length of the tour if we choose
the arc AB by
n−2

(r)
p2
q r minX=A d(A, X)
(11)
r=1

that represents P.EvAB − P.EvR (for the other arcs we repeat the same way).
On the other hand, if we do not choose the arc AB means there exists a node X = B, that
is, the successor of A and exists a node Y = A that is, the predecessor of B, that verifies
AX = min1 of the column A of Table 2 and Y B = min1 of the column Y of Table 2, then
5

	

An Exact Resolution for Mohamed
the Probabilistic
Amar,
Khaznaji
and Bellalouna
Abdellahi Traveling
Amar et al. Salesman...
/ Procedia Computer Science 108C
(2017)
1414–1423

in this case we know the two columns of Table 2 A and Y , as a result at least we increase the
expected length of the tour if we do not choose the arc AB by
p2 [d(A, X) + d(Y, B)] + p2

n−2


(r)

(r)

q r [minK=X d(A, K) + minK=B d(Y, K)]

(12)

r=2

that represents P.EvAB − P.EvR (for the other arcs we repeat the same expressions).
Applying the evaluations on the above matrix, with p = 0.5, we obtain EvT SP = 9,
P.EvP T SP = 3.9375, and Table 3a.
A
(a) B
C
D

A
∞
0(1.875)
5
0(1.625)

B
0(0.875)
∞
2
2

C
0(1.375)
4
∞
5

D
1
5
0(1.0625)
∞

(b)

A
C
D

B
∞
2
0

C
0
∞
3

D
1
0
∞

Table 3: Probabilistic penalty cost(a) and reduced matrix after the removal of the arc BA(b)

3.4

Separation and next Evaluations

We start from the root of the tree, which equals 3.9375. The problem is divided into two subproblems with the approach(depth-first, breadth-first) according to the previous probabilistic
penalties cost, which are shown in Table 3a. It too easily shows that the biggest probabilistic
penalty cost resides in the arc BA which equals 1.875. So, we separate according to this arc.
First remove the row B, column A and replace BA by ∞ to prohibiting the parasitic circuits.
And calculate the second term of the expression P.EvBA via the resulting matrix which is shown
by Table 3b. In this case, according to the previous calculation probabilistic penalty cost BA
and probabilistic evaluation BA, we construct the first branching of the tree, which is shown
in Figure 1.

Figure 1: The first branch of the tree for the PTSP

3.5

Construction of the Tree

The search continues until all branches have been visited either eliminated or the end of the
process is reached. That is, the permanent evaluation is less than the all transitional evaluations,
which are defined by the expected length of each final branch by profiting that the expected
length can be calculated in O(n2 ) time Jaillet [1]. During the rest of study we calculate the
probabilistic penalty cost for each zero in order to separate the problem, it is calculated as the
6

1419

1420	

An Exact Resolution for Mohamed
the Probabilistic
Amar,
Khaznaji
and Bellalouna
Abdellahi Traveling
Amar et al. Salesman...
/ Procedia Computer Science 108C
(2017)
1414–1423

same previous techniques. Here as the P.EvBA ≤ P.EvBA , we continue with the matrix in
Table 3b, then we calculate its penalties.
We note that there are terms do not exist in reduced matrix of order 3 in Table 3b. To
calculate these terms we use the first reduced matrix(Table 1b), the result is shown in Table
4a. We separate according to the arc AC which has the biggest probabilistic penalty cost, and
the tree becomes as Figure 2. In the same manner as the previous techniques of separations,
we find the following matrix (Table 4b), and we put CB = ∞ to avoid the sub-cycles. Now
A
(a)
C
D

B
∞
2
0(0.875)

C
0(1.375)
∞
3

D
1
(b) C
0(1,0625)
D
∞

B
∞
0

D
0
∞

Table 4: Probabilistic penalty cost (a) and resulting matrix after removal of the arc AC(b)

Figure 2: Second step for first branch
by observing the Table 4b we note that the conditions of stops are verified for this branch. We
stop the search process for it, the result is shown in Figure 3a. In this case we can calculate the
exact value of the expected length of the tour in this branch and it equals E(LBACDB ) = 6.25.
This value is a terminal for this branch, as a result it becomes a first permanent evaluation,
which is schematized by Figure 3a. Now, as the evaluation of BA is better than the best one
retained, we continue the search with this branch and it is made as: taken the initial reduced
matrix and we put BA = ∞, for that the arc BA does not contribute to the tour. In the
same manner, we calculate the probabilistic penalty cost for each zero, which is schematized
by matrix in Table 5a. It shows that the biggest probabilistic penalty cost resides in the arc
A
(a) B
C
D

A
∞
∞
5
0(0.545)

B
0(0.875)
∞
2
2

C
0(0.457)
0(0.945)
∞
5

D
1
4
0(1.0625)
∞

(b)

A
B
D

A
∞
∞
0

B
0
∞
2

C
0
0
∞

Table 5: Probabilistic penalty cost(a) and reduced matrix with removal of the arc CD(b)
CD, which equals 1.0625. So, we separate according to this arc. In the same manner, remove
the row C, column D and replace CD by ∞ to prohibiting the parasitic circuits. And calculate
the second term of expression P.EvCD , according to the resulting matrix that is shown by the
matrix in Table 5b.
7

	

Abdellahi Amar
et al. /Salesman...
Procedia Computer Science 108C
(2017)
1414–1423
An Exact Resolution forMohamed
the Probabilistic
Traveling
Amar,
Khaznaji
and Bellalouna

Figure 3: The first final branch(a) and final tree(b)

Here, as the permanent evaluation E(LBACDB ) = 6.25 is less than all transitional evaluations
as in Figure 3b, the search process must be stopped. The final tree is schematized by Figure
3b, it shows that the tour BACDB is an optimal solution.
After the design algorithm, we define the performance factor P F in order to evaluate the
quality of evaluations. It equals the number of the nodes created by the our approach
Nb
n
k
normalized by the total number of nodes for a complete binary tree of n levels:
2
=
k=0
Nb
2n+1 − 1 (that represents the sum of the first n terms of a geometric series), P F = 2n+1
−1 .
9
For above example the P F equals 249−1 = 31
= 0.290, meaning that 29 % of the tree has in
fact been created to find the optimal solution. Through this result we perform the algorithm
in next section.

4

Computational Experiments

In this section, we discuss a series of computational experiments in order to evaluate the performance and stability of our exact resolution for the PTSP. It was run on Windows 10, 4GB
of RAM, 2.10 GHz processor, with java programming language to perform the simulations. We
were studied the proposed algorithm on: probability of presence, the execution time as well as
the performance factor. We have conducted tests for a number n of points by using a generator
of pseudo random number. The number n varying from 4 to 18 with a 1 interval, and probability p ∈ {0.1, 0.2, ...0.9} (we have a 30-run average for each experience).
The Figure 4 shows the gain of time that we obtained for different probabilities p ∈
{0.1, 0.2, ...0.9}. This gain is very considerable if we compare it with the worst case (n − 1)!. We
not also for the probabilities p = 0.1, 0.2, 0.3 that the problem is difficult in comparison to the
probabilities p > 0.7, this being foreseeable, in view of the proposed penalty cost is a function
increasing in probability. To further examine the effectiveness of the proposed exact algorithm.
The Figure 5 summarizes the proportions of depth in the tree. It is shown that the number of
the nodes created by proposed algorithm is much less than the whose of complete enumeration
method. More precisely, when the number of points reaches 14, the deviation between the
two algorithms is very large, therefor the proposed algorithm yields the best performance.
Through these studies an estimation of performance factor is also calculated by means of the
8

1421

1422	

Abdellahi Amar
et al. /Salesman...
Procedia Computer Science 108C
(2017)
1414–1423
An Exact Resolution forMohamed
the Probabilistic
Traveling
Amar,
Khaznaji
and Bellalouna

Figure 4: Execution time(ms) as a function of the number of points

Figure 5: NcPA and worst case as a function of the number of points
next equation, it is for each experience calculated as:
PF =

Number of nodes created by proposed algorithm(NcPA)
2N +1 − 1

(13)

This factor allows us to have an idea about the quality of proposed separations and evaluations.
In fact, it is good if its value goes to 0. We obtain that the performance factor converges for
9

	

Abdellahi Traveling
Amar et al.Salesman...
/ Procedia Computer Science 108C
(2017)
1414–1423
An Exact Resolution for Mohamed
the Probabilistic
Amar,
Khaznaji
and Bellalouna

different points to the interval [0.101, 0.751]. On average equals 0.3311, which implies that it
marks a deviation 66.89% from the worst case.

5

Conclusion and Future Work

In this paper, an exact branch and bound algorithm was extended to the PTSP. At first, the
proposed algorithm was tested on a matrix example to explain the different necessary steps,
namely, lower bound, probabilistic evaluations, separations and the approach of stop. The
numerical results were showed that the gain of execution time obtained was considerable. It
was pointedly proven the efficiency of probabilistic evaluations. More specifically on average
the performance factor equals 0.3311, meaning that 33.11 % of the tree has in fact been created
to find the optimal solution. Our future work will include a parallel implementation with
massive grids. Also the Karp partitioning algorithm will be reinforced, when combined with
the proposed algorithm.

References
[1] P. Jaillet. Probabilistic traveling salesman problems. PhD thesis, Dissertation, Massachusetts
Institute of Technology, Cambridge, MA, USA., 1985.
[2] A.M Campbell. Aggregation for the probabilistic traveling salesman problem. Computers &
Operations Research, 33:2703–2724, 2006.
[3] M. Bellalouna, A. Gharbi, and W. Khaznaji. The k-means and tsp based mobility protocol modeling as a probabilistic combinatorial optimization problem. In The Ninth International Conference
on Systems and Networks Communications, pages 48–53, Nice, France, 2014.
[4] D. Bertsimas and L. Howell. Further results on the probabilistic traveling salesman problem.
European journal of Operational Research, 65:68–95, 1993.
[5] L. Bianchi. Ant colony optimization and local search for the probabilistic traveling salesman problem: a case study in stochastic combinatorial optimization. PhD thesis, Univ. Libre de Bruxelles,
Brussels, Belgium, 2006.
[6] Y.-H. Liu. Diversified local search strategy under scatter search framework for the probabilistic
traveling salesman problem. European Journal of Operational Research, 191:332–346, 2008.
[7] M. Bellalouna. Probabilistic combinatorial optimization problems. PhD thesis, Ecole Nationale des
Ponts et Chaussées, Paris, France, 1993.
[8] N. E. Bowler, T. M. A. Fink, and R. C. Ball. Characterization of the probabilistic traveling
salesman problem. Physical Review E, 68:036703, 2003.
[9] L. Bianchi, L. M. Gambardella, and M. Dorigo. Solving the homogeneous probabilistic traveling
salesman problem by the aco metaheuristic. In Lecture Notes in Computer Science, Springer,
Berlin, volume 2463, pages 176–187, 2002.
[10] Y-H. Liu, R-C. Jou, and C-J. Wang. Genetic algorithms for the probabilistic traveling salesman
problem. In Lecture Notes in Artifical Intelligence, pages 77–82, 2004.
[11] Y. Marinakis and M. Marinaki. A hybrid honey bees mating optimization algorithm for the
probabilistic traveling salesman problem. In Evolutionary Computation, pages 1762–1769, 2010.
[12] G. Laporte, F. Louveaux, and H. Mercure. An exact solution for the a priori optimization of the
probabilistic traveling salesman problem. Operations Research, 42:543–549, 1994.
[13] S. Rosenow. Comparison of an exact branch-and-bound and an approximative evolutionary algorithm for the probabilistic traveling salesman problem. Operations Research Proceedings, pages
168–174, 1998.
[14] J. D. C. Little, K. G. Murat, D.W. Sweeney, and C. Karel. An algorithm for traveling salesman
problem. Operations Research, 11:972–989, 1963.

10

1423

