Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 1352 – 1361

International Conference on Computational Science, ICCS 2013

How to Determine the Topology of Hierarchical Tuning Networks
for Dynamic Auto-Tuning in Large-Scale Systems
Andrea Mart´ınez∗, Anna Sikora, Eduardo C´esar, Joan Sorribes
Computer Architecture and Operating Systems Department, Universitat Aut`onoma de Barcelona, 08193 Bellaterra, Barcelona, Spain

Abstract
Automatic analysis and tuning is a key strategy that helps to exploit the potential of high performance systems. However,
for parallel applications with long running times, dynamic behaviour or highly data dependent performance patterns, it is
necessary to make use of the strength of dynamic auto-tuning. An important factor in dynamic auto-tuning on a large scale is the
number of additional resources required by the tuning system itself in order to reduce impact on the application performance.
A tradeoﬀ must be made between the loss of eﬀectiveness of a tuning system using too few resources and the loss of its
eﬃciency using too many resources. Most automatic analysis or tuning systems do not provide assistance for deﬁning how
many additional resources are required. In this work, we address this problem proposing a method focused on calculating the
structure of hierarchical tuning networks. The topology will be composed of the minimum number of non-saturated resources.
Experimental evaluation performed covers diﬀerent use cases, each one showing that tuning networks built according to our
proposal make eﬃcient use of resources, while providing a high quality analysis and tuning environment.
Keywords: performance tools, dynamic and automatic analysis, dynamic and automatic tuning, resource usage, eﬃciency

1. Introduction
Performance analysis and tuning is a useful mechanism for identifying, understanding and ﬁxing performance
problems in large-scale parallel applications. Speciﬁcally, when applications have long runnings times or behavioural patterns that change depending on the input data set or according to data evolution, dynamic auto-tuning
is the most viable tactic. This involves performing automatic monitoring and analysis of the application, and then
dynamically resolving performance issues during the execution, without recompiling or restarting.
In order to bring this strategy to high performance computers, we have presented a novel approach for scalable
dynamic auto-tuning in [1]. This approach is based on a hierarchical tuning network of analysis modules combined
with an abstraction model which will allow scalable analysis and tuning through a combination of local and global
improvements. The analysis and tuning process follows the model employed by MATE (Monitoring, Analysis
and Tuning Environment) [2].
Dynamic auto-tuning tools must be active during the execution of the analysed application. As such, they
require additional resources in order to reduce or eliminate interference with the application. However, in a time
when reducing energetic computational cost is an important consideration of high performance systems, a careful
∗ Corresponding

author. Tel.: +34-93-581-1990 ; fax: +34-93-581-2478.
E-mail address: amartinez@caos.uab.es.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.302

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

balance must be struck when choosing the number of additional resources to dedicate to the analysis and tuning
process. Using too few resources will hamper the eﬀectiveness of the tuning tool, but unnecessary use of resources
should be avoided to reduce power consumption.
In this work, we propose an explicit method for calculating an eﬃcient topology for our proposed hierarchical
tuning network. The method provides the minimum number of resources needed to carry out a dynamic and
automatic analysis and tuning process, considering speciﬁc parameters that characterise the behaviour of the
tuning network and the application being analysed.
Experimental tests have been performed to verify the accuracy of this method in calculating eﬃcient and
eﬀective hierarchical tuning networks for diﬀerent use cases. The results show that tuning networks built according
to our proposal are composed of the minimum number of non-overloaded analysis modules that make eﬃcient use
of resources.
In Section 2 we give an overview of our model for hierarchical dynamic auto-tuning. The method to determine
the topology of this hierarchical tuning network, the main contribution of this work, is presented in Section 3. The
experimental evaluation is shown in Section 4. A description of the resource usage of related performance analysis
tools can be found in Section 5. Finally, conclusions and future work are presented in Section 6.
2. Model for Hierarchical Dynamic Auto-Tuning
The dynamic auto-tuning model, that we previously proposed, is based on a descentralised analysis process
using a tuning network of distributed analysis modules (Analyzers), structured as a hierarchical tree. Following
MATE’s analysis and tuning model, the Analyzers operate in three basic and continuous phases: monitoring,
performance analysis, and modiﬁcation. First, the Analyzers instrument the parallel application, using instrumentation orders for monitoring. These orders indicate the points in the applications that have to be measured to
gather information about the behaviour of the application. In the analysis phase, Analyzers receive this information in form of events, search for bottlenecks, and give solutions for overcoming them. Finally, instrumentation
orders for tuning are sent by the Analyzers to apply the given solution. The tuning orders specify the points to be
dynamically changed in the application to improve its performance.
The Analyzers located at the base level of the hierarchy directly monitor, analyse, and tune disjoint subsets
of application tasks. Each subset of children forms an analysis and tuning domain. The analysis scheme of the
hierarchy’s base is replicated in all levels of the hierarchy in order to present a homogeneous view of the model. To
do this, an abstraction mechanism between diﬀerent levels of the hierarchy was devised. This mechanism consists
of representing each Analyzer as a parallel application task to its parent Analyzer, and behaving as such during the
performance analysis and tuning process. This means that each Analyzer has to receive instrumentation orders for
monitoring and tuning and also generate events which abstract the performance information from its own domain
to send it to its parent Analyzer. This allows performance analysis over the entire parallel application.
In this proposal, Analyzers use a performance model that is deﬁned in terms of the programming paradigm
(such as [3] and [4]). To evaluate a performance model, it is necessary to collect information about the application
tasks and their interactions. To build the hierarchical tuning network, we need to divide the parallel application
tasks into several subsets to be managed by separate Analyzers. For this reason, the analysis and tuning domain
of an Analyzer must ﬁt the programming paradigm of the performance model it uses.
We use the SPMD application shown in Figure 1(a) to illustrate these concepts. This application, consisting
of 16 tasks connected in a 4x4 grid, can be analysed using an SPMD performance model. Dividing the 4x4 grid in
subgrids of size 2x2, subsets of tasks equivalent to the SPMD paradigm are obtained. So, each 2x2 subgrid is the
analysis and tuning domain of an Analyzer located at the base level of the analysis hierarchy. Therefore, this level
of analysis is composed of 4 Analyzers (A1.1, A1.2, A1.3 and A1.4). These Analyzers will become the analysis
and tuning domain of the root Analyzer A1. A1 also uses an SPMD performance model, so its immediate children
should act as parallel application tasks abstracting the behaviour of the real tasks within their domain.
This approach also works with other programming paradigms such as hierarchical master-worker or masterworker of pipelines. The structured nature of these kinds of applications allows an analysis process using diﬀerent
performance models throughout the analysis hierarchy. Considering the second case, a master-worker of pipelines
where each worker is a pipeline, we can ﬁnd parts of the analysis that can be performed independently for each

1353

1354

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

A1

A1

T1

A1.4

A1.3
A1.1

Subgrids

A1.2

T13

T14

A1.1
T15

T2

T16
T3

T9

T10

T11

A1.2

T4

A1.3

T5

T10
T6

T1

T11
T7

T2

T12
T8

T3

T8

T12
T6

T5
T9

T7

T9

T10

T4

Fig. 1: Hierarchical tuning network over (a) an SPMD application and (b) a master-worker of pipelines application.
pipeline, and globally for the whole master-worker structure [5]. Figure 1(b) presents an example of a masterworker of pipelines composition and the associated hierarchical tuning network of Analyzers.
The abstraction mechanism between levels in the hierarchy is the key mechanism for both, a) conducting a
scalable and decentralised analysis, and b) eﬃciently managing the volume of data necessary to perform analysis
and tuning. To implement the abstraction mechanism, each Analyzer has an associated component called an
Abstractor. It is responsible for representing its associated Analyzer as a parallel application task to its parent
Analyzer, and behaving as such during the analysis and tuning process, receiving instrumentation orders and
generating events. For this purpose, the Abstractor must be able to receive instrumentation orders from, and send
events to, its parent Analyzer.
As it can be seen in Figure 2(a), the Abstractor makes the connection with the parent Analyzer, and the
Analyzer associated with this Abstractor connects with its analysis and tuning domain, i.e. its immediate children.
The functional design of both components and their communication paths are shown in Figure 2(b).
The Abstractor is composed of two main modules:
• Instrumentation Order Translator. Once an instrumentation order for monitoring or tuning is received
by the Abstractor, the Instrumentation Order Translator transforms it into one or more new instrumentation
orders which will be sent to its associated Analyzer’s children.
• Event Creator. This module creates events using the data contained in events received from its associated
Analyzer. Created events have to encapsulate the information requested by monitoring orders previously
received by the Abstractor from its parent Analyzer.
The Abstractor communicates with its associated Analyzer via an internal API. Every Analyzer is composed
of three main modules:
• Tunlet. The module that contains the implementation of the performance model used for the performance
analysis and tuning process. It includes knowledge about the places in the application code where the
instrumentation must be inserted to gather information about the application’s performance (monitoring
points), the set of expressions that model the application’s behaviour (performance model), and the points
of the applications that can be changed by a tuning action to improve its performance (tuning points).

T1



	


T2

Abstractor

A1.1

Events
Instrumentation orders





 

	







		

A1





	


	






T3


	

	


Fig. 2: (a) Detail of Figure 1(b) showing the use of the Abstractor; (b) Abstraction mechanism design.

1355

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

• Event Manager. This module is responsible for receiving and managing events generated by the parallel
application tasks or other descendant Analyzers. An event received by this module may be created as a result
of the monitoring instrumentation orders generated by its Tunlet or the Tunlet of an ancestor Analyzer. In
the ﬁrst case, the Event Manager will transfer this event to its Tunlet, and in the second case it will transfer
it to the Event Creator module of its associated Abstractor. In this way the events required by the ancestor
Analyzers may ﬂow through the hierarchy.
• Instrumentation Order Sender. This module has to send the instrumentation orders received from its
Tunlet, or from its associated Abstractor, to its analysis and tuning domain.
Users must provide the knowledge required to carry out the analysis and tuning abstraction. In the Analyzer,
following the philosophy of MATE [6], users must codify the performance model of a particular programming
paradigm in the Tunlet. In the Abstractor, users have to specify the Abstraction Model. This model contains information about how the Instrumentation Order Translator should map orders for monitoring and tuning, received
from the parent Analyzer, to the analysis and tuning domain of its Analyzer. It also contains the map-reduce
function that the Event Creator will use to aggregate received information and encapsulate it in a new event which
is sent to the parent Analyzer.
3. Determining the Topology of the Hierarchical Tuning Network
Given a parallel application, the proposed tuning network may have several topologies. The structure of the
topology will depend on the number of levels in the hierarchy and the number of analysis modules in each level.
In this work, we propose the creation of tuning networks that use the fewest possible resources, so a topology
with the minimum number of analysis modules must be found. However, these analysis modules cannot become
saturated. An analysis module is saturated if it cannot process and act upon the information that it receives from
the application at the frequency with which it is sent.
The amount of work that an analysis module performs is determined by characteristics of the performance
and the Abstraction models and the number of nodes which make up its analysis and tuning domain. In order to
determine the domain size that an analysis module can manage without becoming saturated, we have developed
an expression that models the work performed by the analysis module during each analysis and tuning process.
An analysis and tuning process is deﬁned as the work that an analysis module has to complete to perform the
detection of performance problems and make decisions to improve the performance of the parallel application.
Considering the variables presented in Table 1, we can deﬁne the total time that an analysis module requires to
carry out an analysis and tuning process as:
N · Ea · T m + T a (N) +

Ea
· T c + T t · frp
Ec

(1)

This work can be divided into several actions:
1. Gathering behavioural information about the nodes that make up the analysis and tuning domain of the
analysis module. The time required to gather an event and transfer it to the Tunlet or the Event Creator is
T m . This action is repeated for each event received before detecting performance problems, i.e N · Ea .
2. Detecting performance problems and making the necessary decisions which will improve the performance
of the application. According to the characteristics of the performance model, the time taken by an analysis
module to detect performance problems, T a (N), can be constant or dependent on the number of nodes in the
analysis and tuning domain of the analysis module.
3. Creating a new event using the behavioural information previously gathered, taking a time equal to T c . The
number of occurrences of this action in an analysis and tuning process is determined by Ea /Ec .
4. Translating an instrumentation order received from the parent Analyzer, taking a time of T t . How often this
action is performed depends on the arrival frequency of tuning orders sent by the parent Analyzer, frp .
The frequency at which an analysis and tuning process takes place in an analysis module is fa = frc /Ea . This
value ultimately depends on the frequency with which events are generated in the parallel application task, fe .

1356

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

Table 1: Description of variables which represent the performance and abstraction models.
Variable description
N
the number of nodes in the analysis and tuning domain for each analysis module
Ea
the number of events received from each child node of the analysis and tuning domain before performing analysis to detect
performance problems
Ec
the number of events received from each child node of the analysis and tuning domain before creating a new event which will be
sent to the level above in the hierarchy
T a (N)
the time required to perform analysis to detect performance problems. This time can be constant or dependent on N
the time required to transfer each event received by the analysis module to the correct module, where it is stored
Tm
Tc
the time required to create a new event which will be sent to the level above in the hierarchy
the time required to transform an instrumentation order which will be sent to the level below in the hierarchy
Tt
frp
the tuning order reception frequency from the parent analysis module
the event reception frequency from each child node of the analysis and tuning domain
frc
fe
the event generation frequency of the parallel application tasks

In order to avoid saturation, the maximum time that an analysis module can dedicate to carry out an analysis
and tuning process is 1/ fa , the analysis period. This constraint is deﬁned by the following expression:
N · Ea · T m + T a (N) +

Ea
1
· T c + T t · frp ≤
Ec
fa

(2)

If the time spent performing the work of an analysis and tuning process is equal to 1/ fa , the analysis module
does not have free time between two analysis and tuning processes. In other words, it is occupied 100% of the
time making eﬃcient use of the resources. A hierarchical tuning network composed of analysis modules which
are 100% occupied (but not saturated) will use the smallest possible number of resources and consequently, it will
have the minimum number levels in the hierarchy.
Knowing the characteristics of the performance and the Abstraction models of an analysis module, expression
2 can be used to determine the maximum domain size of the analysis module without saturating it. The procedure
for determining the topology of a hierarchical tuning network is shown in Algorithm 1. Beginning with the number
of parallel application tasks, the ﬁrst iteration of the loop calculates the number of analysis modules which will
form the base of the hierarchy. This is done by calculating the maximum domain size at this level, N, according
to expression 2. These analysis modules will become the tasks to be distributed amongst the analysis modules in
the next iteration of the loop. This procedure is repeated until the number of analysis modules at level i in the
hierarchy is equal to 1 - this analysis module is the root of the hierarchical tuning network.
It is possible that the variables which deﬁne the analysis and tuning process are diﬀerent at each level i in the
hierarchy. For example, a master-worker of pipelines would require diﬀerent performance and abstraction models
for each paradigm employed. In this case, the appropriate values for these variables must be used for each level i.
Algorithm 1 Calculating the topology of the hierarchical tuning network.
Input: #T asks // Number of tasks of the parallel application.
i
Input: Eai , Eci , T ai (N), T mi , T ci , T ti , frp
, frci // Analysis and tuning process variables for each level i
Output: T opology[]
i = 0 // i indicates the level of the hierarchy. i = 0 means the base of the hierarchy.
Current level tasks = #T asks // The base level tasks are all the tasks of the parallel application.
repeat
N=

1
fai

i

E
i
− ai ·T ci −T ai (N)−T ti · frp
Ec

i
Eai ·T m

tasks
#Analysis modules = (int) Current level
N
T opology[i] = #Analysis modules
Current level tasks = #Analysis modules
i++
until #Analysis modules == 1

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

1357

4. Experimental Assessment
The goal of this study is to verify that a hierarchical tuning network built following expression 2 is comprised
of the minimum number of non-saturated analysis modules. This study has been carried out using a prototype tool
that simulates the behaviour of the hierarchical tuning model described in Section 2. The prototype is implemented
using the TBON communication framework MRNet [7].
The supercomputer SuperMUC at Leibniz Supercomputing Centre was used to perform the experimental tests.
Each experiment used a subset of a single island composed of 512 nodes interconnected by Inﬁniband FDR10.
The nodes have 2 8-core 2.7GHz Intel Xeon processors and run SuSe Linux.
The experimental assessment is structured in two use cases, each one presents diﬀerent circumstances which
can arise when using the hierarchical tuning network.
4.1. Local and global analysis and tuning process
Many problems can be attacked in a distributed manner in order to more quickly solve performance issues.
Load balancing can be performed both locally and globally in such a way that local performance improvements
can be achieved without worsening the global performance of the application.
In this use case, the hierarchical tuning network will perform both local analysis, at intermediate analysis
modules and global analysis at the root analysis module. The abstraction mechanism allows the analysis modules
to carry out the same analysis and tuning process, regardless of the level they are in.
To represent this use case, we suppose a parallel SPMD application with 2048 tasks and performance and
abstraction models characterised by the following values:
•
•
•
•

fe of 10 events per second per simulated task.
Ea of 5, a performance problem detection phase is performed every 5 batches of events.
Ec of 1, a single new event is sent to the parent level every batch of events, as such frc = fe at all levels.
Linear T a (N) of 1ms, i.e. the performance problems detection phase lasts 1ms per node within the analysis
and tuning domain of the analysis module.
• T m of 1ms.
• T c and T t of 0.1ms.
• frp of fe /(10 · Ea ), a tuning action is received every 10 seconds.
These values are used for all levels in the hierarchy. Substituting these values into expression 2 and following
the algorithm shown in Section 3, the tuning network which makes the best use of resources can be determined.
The predicted topology is given for Experiment 1 in Table 2.
In order to achieve the goal of the experimental study, it is necessary to compare the predicted tuning network
topology with other topologies without changing the characteristics of the parallel application or the performance
and abstraction models. Experiments 2 and 3 in Table 2 represent these topologies, with a greater and fewer
number of analysis modules in level 0 respectively.
To determine whether or not the hierarchical tuning network is structured optimally to use the smallest number
of non-saturated analysis modules, we deﬁne a measurement called analysis lag. This is deﬁned as the time
between the generation of the ﬁnal event required for an analysis and tuning process and the start of that process,
as shown in Figure 3.
A saturated analysis module presents an analysis lag which steadily increases during the experiment’s execution. This is because the analysis module has an increasing backlog of events to process due to being unable to
Table 2: Tuning network topologies for local and global analysis.
Experiment
1
2
3

Level 0
#Analysis modules Domain size
27
76
28
74
26
79

Level 1
#Analysis modules Domain size
1
27
1
28
1
26

1358

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

Event batch

Management

t

Analysis

Analysis lag

Fig. 3: Analysis lag.
complete an analysis and tuning process within the analysis period. On the other hand, a stable analysis lag, one
that does not change signiﬁcantly over time, indicates a non-saturated analysis module.
Figure 4(a) shows the analysis lag over time for the analysis modules located at level 0 in the hierarchy for the
three compared topologies. These results show the expected behaviour, wherein the analysis lag from Experiment
3 reﬂects its saturated state (due to having fewer level 0 analysis modules than necessary), Experiments 1 and 2,
are not saturated as demonstrated by the stability of their analysis lag.
As it can be seen in Figure 4(b), the analysis lag in level 1 does not change signiﬁcantly between experiments.
The root analysis module is operating far below its saturation point, however the quality of the performance
analysis and tuning process carried out by the level 1 analysis module in Experiment 3 will be greatly degraded
by the saturated state of the level 0 analysis modules.
The average occupation for each level in the hierarchy is shown in Figure 4(c). Analysis module occupation
is used to measure the eﬃciency of the tuning network from the point of view of resource usage. This metric is
calculated as the proportion between the time that an analysis module is carrying out performance analysis and
tuning actions and the total time that it is active. Experiments 1 and 3 have level 0 analysis modules that make
eﬃcient (near optimal) use of the resources, but the level 0 analysis modules in Experiment 2 are less occupied.
This is due to having fewer nodes in the analysis and tuning domain than the maximum it can manage, whereas
Experiment 1 has a number of nodes near the maximum and Experiment 3 exceeds this limit. Because the level 1
analysis module is operating below its saturation point, it is unavoidably under occupied in all experiments.

35
Experiment 1
Experiment 2
Experiment 3

1000

30

Analysis lag (ms)

log Analysis lag (ms)

10000

100

10

25
20
15

Experiment 1
Experiment 2
Experiment 3

10
5
0

0

10

20

30

40

50

0

Experiment time (s)

5

10

15

20

25

30

35

40

45

50

Experiment time (s)

(a)

(b)

% Occupation

100

Level 0 Analysis modules
Level 1 Analysis modules

80
60
40
20
0
Experiment 1

Experiment 2

Experiment 3

(c)

Fig. 4: Analysis lag of the (a) level 0 and (b) level 1 analysis modules in milliseconds; (c) Percentage of occupation
of the analysis modules for each conducted experiment.

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

1359

Taking into account analysis lag and occupation, the predicted tuning network topology, Experiment 1, is the
best candidate. It provides near optimal eﬃciency with respect to the use of resources while employing the minimum number of non-saturated analysis modules. While Experiment 3 has level 0 analysis modules with slightly
higher eﬃciency, their saturated state would lead to a severely degraded analysis and tuning process. Meanwhile,
Experiment 2 presents a small reduction in the analysis lag, but does not make eﬃcient use of resources.
If we had a parallel application with more than 2048 tasks, with the same performance and abstraction model
parameters as this use case, the number of level 0 analysis modules would be increased. The proposed method
would continue adding level 0 analysis modules, until the level 1 analysis module reaches its capacity. After this
point, it would calculate a topology with three levels, dividing the level 0 analysis modules between two or more
level 1 analysis modules. From this adaptation arises the scalable pattern of our hierarchical tuning network.
4.2. Centralised-only analysis and tuning process
Certain problems can only be solved at a global level, by the root analysis module, while the rest of the
hierarchy supports it via the abstraction mechanism. An example of such a situation is tuning the MPI parameter
MP EAGER LIMIT, which consist of setting the optimal maximum size for sending messages without the handshaking protocol. In these cases the hierarchical tuning network would be heterogeneous, because the behaviour
of the analysis modules is diﬀerent depending on the level where they are located. The level 0 analysis modules
will aggregate data from their analysis and tuning domains to pass on to the root analysis module, which will
perform the actual analysis.
The same parameters are used for this case as in the previous section, with the exception that we use a linear
T a (N) of 45ms for the root analysis module only, all other analysis modules perform no analysis (T a (N) = 0), and
T m is 0.4ms.
For a parallel SPMD application of 2048 tasks, the proposed method predicts a hierarchy composed of two
levels, given under Experiment 1 in Table 3. The evaluation process is the same as the previous use case, where
Experiements 2 and 3 represent tuning networks with more and less level 0 analysis modules respectively.
Since the level 0 analysis modules do not perform analysis, we substitute the analysis lag measurement for
event creation lag. The event creation lag is the time between the generation of the ﬁnal event required to create
an event to be sent to the parent level in the hierarchy and the start of that event creation process.
Figure 5(a) shows the event creation lag for the level 0 analysis modules. The most important observation
here, is that an analysis module cannot handle, even theoretically, an inﬁnite number of application tasks even
when it has no analysis time. This is due to the time it takes to perform other duties, such as event management
and the creation of events to be sent to the parent level in the hierarchy. As can be seen in this ﬁgure, the level 0
analysis modules in Experiment 3 are saturated, as expected.
The analysis lag for the root analysis module, at level 1, is presented in Figure 5(b). In this case, the root
analysis module in the predicted tuning network is also close to saturation. As such, when an additional analysis
module is added in Experiment 2, alleviating the level 0 analysis modules, this root analysis module becomes
saturated. This shows a border line case where, if only a few more application tasks were added, a third level in
the hierarchy would be required.
Diﬀering from the previous use case, the characteristics of this use case generate high occupation in both levels
in the hierarchy, as can bee seen in Figure 5(c). In Experiment 1, both levels are almost 100% occupied because
their analysis and tuning domains present the maximum size. In Experiment 2, the level 0 analysis modules are
slightly less occupied, while the level 1 analysis module remains almost completely occupied. In fact the level 1
analysis module is saturated, as we saw in Figure 5(b) - however the occupation measurement does not reﬂect this.
Table 3: Tuning network topologies for centralised-only analysis.
Experiment
1
2
3

Level 0
#Analysis modules Domain size
9
228
10
205
8
256

Level 1
#Analysis modules Domain size
1
9
1
10
1
8

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

10000

78125

log Analysis lag (ms)

log Event creation lag (ms)

1360

Experiment 1
Experiment 2
Experiment 3

1000

100

10
0

10

20

30

40

15625
3125
625

Experiment 1
Experiment 2
Experiment 3

125
25
5
1

50

0

5

10

Experiment time (s)

15

20

25

30

35

40

45

50

Experiment time (s)

(a)

(b)

% Occupation

100

Level 0 Analysis modules
Level 1 Analysis modules

80
60
40
20
0
Experiment 1

Experiment 2

Experiment 3

(c)

Fig. 5: (a) Event creation lag of the level 0 analysis modules in milliseconds; (b) Analysis lag of the level 1 analysis
modules in milliseconds; (c) Percentage of occupation of the analysis modules for each conducted experiment.
This situation is reversed in Experiment 3, the level 1 analysis module is slightly less occupied than in Experiment
1 and the level 0 analysis modules show the same occupation level even though they are saturated.
As in the previous use case, the predicted hierarchical tuning network, given in Experiment 1, is in fact the
topology that makes the best use of resources. Additionally, with this use case we show how the proposed method
calculates the most eﬃcient non-saturated topology, including heterogeneous situations where the analysis process
diﬀers from one level to another, up to extreme cases where some levels do not perform any analysis.
5. Related Work
There are a number of tools which perform dynamic auto-tuning of parallel applications, such as Active
Harmony [8], Autopilot [9], and PerCo [10]. All these tools make use of a centralised analysis architecture,
thereby using at most, one additional machine to perform analysis. While this method makes eﬃcient use of
resources, it will also exhibits scalability issues as the size of the parallel application increases.
To ﬁnd examples of similar analysis architectures, we examined analysis tools that provide automatic performance analysis without dynamic tuning and work in large-scale systems.
The Scalasca toolset [11] performs a post-mortem analysis based on a parallel trace-analysis scheme. After
application termination, Scalasca loads trace ﬁles into main memory and analyses them making use of the same
resources which were used to execute the parallel application.
In order to work in large-scale systems, eﬀorts presented by the tools TAU [12] and Paradyn [13], use hierarchical architectures for analysis using MRNet. These hierarchical analysis architectures are run on additional resources. In these works, the objective is that analysis network nodes provide a reasonable performance, avoiding
the resource saturation that would lead to a scalability bottleneck in the tool itself. However, in the architectures
used in the experimental tests, no method is given to select the number of required resources or to justify the
topologies presented from the point of view of resource usage.
In Periscope [14] the automatic analysis is performed by analysis agents structured according to a hierarchical
scheme. Currently, the number of additional resources used to allocate the agents is a user deﬁned parameter.

Andrea Martínez et al. / Procedia Computer Science 18 (2013) 1352 – 1361

1361

The analysis agents notify the user if they were saturated during the last experiment, which allows the user to add
additional analysis resources in future executions.
Unlike the works presented in this section, our proposal constructs tuning networks considering the characteristics of the analysis and tuning process and the application itself. This gives the user much better control over
balancing the use of resources with the quality of the tuning environment.
6. Conclusions and future work
We have presented a method that calculates how many additional resources are required to carry out scalable
dynamic auto-tuning using a hierarchical tuning network. This method provides tuning network topologies which
make the most eﬃcient use of resources, avoiding that the nodes of the network become bottlenecks in the system.
This is achieved by considering the characteristics of the parallel application and the analysis and tuning process.
This method has been created for our novel approach to scalable dynamic auto-tuning, which makes use of a
hierarchical tuning network of analysis modules and an abstraction mechanism for communication between levels
in the hierarchy.
Experimental evaluation has been performed using two distinct use cases which demonstrate that the proposed
method is able to adapt to diﬀerent classes of analysis and tuning processes. In all cases, the method selects
hierarchical tuning networks characterised by providing a high quality analysis and tuning environment, using the
minimum number of resources required to do so.
An open line of research would be to create a generalised methodology capable of calculating similarly optimal
tuning network topologies for other approaches that perform online automatic or dynamic performance analysis
in large-scale contexts.
Acknowledgment
This research has been supported by the MICINN-Spain, under contract TIN2011-28689. The authors thankfully acknowledge the resources and technical assistance provided by the Leibniz Supercomputing Centre.
References
[1] A. Mart´ınez, A. Sikora, E. C´esar, J. Sorribes, Hierarchical MATE’s approach for dynamic performance tuning of large-scale parallel
applications, in: Proc. of the EEE International Performance Computing and Communication Conference, 2012, pp. 191–192. doi:9781-4673-4883-6/12/.
[2] A. Morajko, Dynamic tuning of parallel/distributed applications, Ph.D. thesis, Universitat Aut`onoma de Barcelona (2004).
[3] E. C´esar, A. Moreno, J. Sorribes, E. Luque, Modeling master/worker applications for automatic performance tuning, Parallel Comput.
32 (7) (2006) 568–589. doi:10.1016/j.parco.2006.06.005.
[4] A. Moreno, E. C´esar, A. Guevara, J. Sorribes, T. Margalef, Load balancing in homogeneous pipeline based applications, Parallel Comput.
38 (3) (2012) 125–139. doi:10.1016/j.parco.2011.11.001.
[5] J. Guevara, E. C´esar, J. Sorribes, A. Moreno, T. Margalef, E. Luque, A performance tuning strategy for complex parallel application, in:
PDP, 2010, pp. 103–110.
[6] A. Morajko, T. Margalef, E. Luque, Design and implementation of a dynamic tuning environment, Journal Parallel and Distributed
Computing 67 (2007) 474–490. doi:10.1016/j.jpdc.2007.01.001.
[7] M. J. Brim, L. DeRose, B. P. Miller, R. Olichandran, P. C. Roth, MRNet: A scalable infrastructure for the development of parallel tools
and applications, in: Proc. Cray User Group 2010, Edinburgh, Scotland, May 2010.
[8] C. Tapus, I.-H. Chung, J. Hollingsworth, Active Harmony: Towards automated performance tuning, in: Proc. of the Conf. on High
Performance Networking and Computing, 2003, pp. 1–11.
[9] R. L. Ribler, H. Simitci, D. A. Reed, The Autopilot performance-directed adaptive control system, Future Generation Computer Systems
18 (1) (2001) 175–187. doi:10.1016/S0167-739X(01)00051-6.
[10] K. Mayes, M. Luj´an, G. D. Riley, J. Chin, P. V. Coveney, J. R. Gurd, Towards performance control on the Grid, Philosophical Transactions
of the Royal Society: Series A 363 (1833) (2005) 1975–1986.
[11] B. Mohr, B. Wylie, F. Wolf, Performance measurement and analysis tools for extremely scalable systems, Concurr. and Computat.: Pract.
Exper. 22 (2010) 2212–2229. doi:10.1002/cpe.1585.
[12] A. Nataraj, A. D. Malony, A. Morris, D. C. Arnold, B. P. Miller, A framework for scalable, parallel performance monitoring, Concurr.
Comput. : Pract. Exper. 22 (6) (2010) 720–735. doi:10.1002/cpe.v22:6.
[13] P. C. Roth, B. P. Miller, On-line automated performance diagnosis on thousands of processes, in: Proc. of the ACM SIGPLAN symposium
on Principles and Practice of Parallel Programming, New York, USA, 2006, pp. 69–80. doi:10.1145/1122971.1122984.
[14] S. Benedict, V. Petkov, M. Gerndt, PERISCOPE: An online-based distributed performance analysis tool, in: Parallel Tools Workshop,
Dresden, 2009, pp. 1–16.

