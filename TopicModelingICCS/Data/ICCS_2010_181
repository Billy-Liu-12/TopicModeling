Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
239–247

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010
Performance and accuracy of Lattice-Boltzmann kernels on multi- and manycore
architectures
Dirk Ribbrock∗, Markus Geveler∗, Dominik G¨oddeke∗, Stefan Turek∗
Institut f¨ur Angewandte Mathematik und Numerik (LS3), TU Dortmund,
Vogelpothsweg 87, D-44227 Dortmund, Germany

Abstract
We present diﬀerent kernels based on Lattice-Boltzmann methods for the solution of the two-dimensional Shallow
Water and Navier-Stokes equations on fully structured lattices. The functionality ranges from simple scenarios like
open-channel ﬂows with planar beds to simulations with complex scene geometries like solid obstacles and non-planar
bed topography with dry-states and even interaction of the ﬂuid with ﬂoating objects. The kernels are integrated into
a hardware-oriented collection of libraries targeting multiple fundamentally diﬀerent parallel hardware architectures
like commodity multicore CPUs, the Cell BE, NVIDIA GPUs and clusters. We provide an algorithmic study which
compares the diﬀerent solvers in terms of performance and numerical accuracy in view of their capabilities and their
speciﬁc implementation and optimisation on the diﬀerent architectures. We show that an eightfold speedup over
optimised multithreaded CPU code can be obtained with the GPU using basic methods and that even very complex
ﬂow phenomena can be simulated with signiﬁcant speedups without loss of accuracy.
Keywords: High performance computing, Lattice-Boltzmann methods, shallow water equations, ﬂuid-structure
interaction, GPU computing, CUDA, Cell BE, multithreading
c 201202.70.-c,
⃝
Published 07.05.Bx,
by Elsevier 89.20.Ff,
Ltd. Open access
under CC BY-NC-ND license.
PACS:
47.11-j
2010 MSC: 35Q68, 74F10, 35Q35

1. Introduction and Motivation
The accurate and interactive simulation of ﬂuid ﬂow is very challenging, in particular in terms of computational
resources. The (two-dimensional) shallow water equations (SWE) are a well known formulation to approximating
a three-dimensional ﬂuid by its surface using a depth-averaged quantity for the vertical velocity. They are used
to reduce computational complexity, and are applicable for instance in dam-break- and open-channel ﬂows. In the
inhomogeneous case, source terms are used to represent external forces such as wind shear stress or slope and friction
induced by the bed topography.
The Lattice-Boltzmann method (LBM) is a modern numerical technique that starts with a fully discrete model
rather than discretising a set of partial diﬀerential equations and solving them directly. One of the key features
Email address: dirk.ribbrock@math.tu-dortmund.de (Dirk Ribbrock)
author

1 Corresponding

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.027

240

D.
Ribbrock
et etal.al./ Procedia
Science00
1 (2012)
239–247
Dirk
Ribbrock
/ ProcediaComputer
Computer Science
(2010) 1–9

2

of the LBM with fully structured lattices is that an implementation in parallel is comparably easy, which makes it a
promising method, especially in view of modern computational hardware, which evolves towards massive ﬁne-grained
parallelism:
During the past few years, computer architecture has reached a turning point. Together, the memory, power
and ILP (Instruction Level Parallelism) wall form a ‘brick wall’ [1], and performance is no longer increased by
frequency scaling, but by parallelisation and specialisation. Commodity CPUs have up to six cores, the Cell processor
is heterogeneous, and throughput-oriented ﬁne-grained parallel designs like GPUs are transitioning towards becoming
viable general purpose compute resources. On the software side, programming models for ﬁne-grained parallelism
are subject to active discussion and are rapidly evolving. Programmers have to adapt to this inevitable trend, because
compiler support is on the far horizon if at all, in particular for computations with low arithmetic intensity (ratio
of arithmetic operations per memory transfer). Established parallelisation strategies for both shared and distributed
memory architectures have to be revisited, and diﬀerent strategies are necessary for diﬀerent architectures. Various
optimisation techniques may lead to numerical deviations and it is no longer granted that the same asymptotically very
eﬃcient algorithm is optimal in terms of runtime eﬃciency on all these architectures. In addition, recent publications
show that any sophisticated extension like, for example ﬂuid-structure interaction (FSI) often leads to a signiﬁcant
loss of performance on non-commodity hardware.
1.1. Related Work
Fan et al. [2] were the ﬁrst to implement a Lattice-Boltzmann solver on a cluster of GPUs. Advanced LatticeBoltzmann solvers on CPUs and GPUs have been implemented by T¨olke and Krafczyk [3], Th¨urey [4] and Pohl [5].
St¨urmer et al. [6] have implemented a Lattice-Boltzmann solver using the Cell BE simmulating a three dimensional
blood ﬂow. Closest in spirit are the publications by Williams et al. [7] and Peng et al. [8], who have developed
and benchmarked the performance of Lattice-Boltzmann solver libraries supporting diﬀerent emerging and leading
multicore platforms. H¨ubner et al. [9] provide numerical studies for a sophisticated solver for the two-dimensional
Navier-Stokes equations using a fully implicit approach to the Lattice-Boltzmann equation as a PDE.
1.2. Paper Contribution and Paper Overview
In section 2.1 and section 2.2 we brieﬂy review the shallow water equations and their solution using the LatticeBoltzmann method with support for internal boundaries. In section 2.3 we summarise some modiﬁcations to the
LBM to incorporate more realistic simulation scenarios with nontrivial bed topologies, in particular the dynamic
ﬂooding and drying of areas. Furthermore, this section describes our approach to couple the simulation of ﬂuids
with moving solid objects that inﬂuence the behaviour of the ﬂuid. Section 3 is dedicated to parallelisation and
vectorisation techniques for the LBM-SWE solvers. We present eﬃcient algorithms for all levels of parallelism
encountered in modern computer architectures. In section 4 we measure the numerical accuracy and performance of
our solvers for several prototypical benchmark problems. Performance is evaluated on a cluster of conventional CPUs
communicating via MPI, on multi-socket multi-core systems, on a Cell blade, and on modern fully programmable
GPUs. We are convinced that such algorithmic studies with respect to exploiting parallelism on various levels for
a given application are necessary at this point, in particular in view of the challenges outlined in this section. We
conclude with a summary and a discussion in section 5.
2. Mathematical Background
2.1. Shallow Water Equations
Using the Einstein summation convention (subscripts i and j are spatial indices) the two-dimensional shallow
water equations in tensor form read
∂h ∂(hu j )
+
=0
∂t
∂x j

and

1
∂b
∂hui ∂(hui u j )
∂ h2
√
+
+ g ( ) = −g h
+ n2b h− 3 ui u j u j ,
∂t
∂x j
∂xi 2
∂xi

(1)

where h is the ﬂuid depth, u = (u1 , u2 )T its velocity in x- and y-direction, and g denotes the gravitational acceleration.
In addition, we apply a source term which internalises forces acting on the ﬂuid due to the slope of the bed and

D. Ribbrock
et al. /etProcedia
Computer
Science
1 (2012)
239–247
Dirk Ribbrock
al. / Procedia
Computer
Science
00 (2010)
1–9

241
3

material-dependent friction: The slope term is deﬁned by the sum of the partial derivatives of the bed topography,
weighted by gravitational acceleration and ﬂuid depth (b denoting the bed elevation), and we deﬁne the friction term
using the Manning equation, where nb denotes a material-speciﬁc roughness coeﬃcient.
2.2. Lattice Boltzmann Method
In order to solve problem (1) with some initial conditions h(x, t = 0), u(x, t = 0) and a constant bed topography,
b(x), we apply the Lattice-Boltzmann method (LBM) with a suitable equilibrium distribution to recover the SWE.
In the LBM, the ﬂuid behaviour is determined by particle populations residing at the sites of a regular grid (the
lattice). The particles’ movement (streaming) is restricted to ﬁxed trajectories eα (lattice-velocities) deﬁned by a local
neighbourhood on the lattice. We use the D2Q9 lattice, which deﬁnes the lattice-velocities in√the direction of the eight
(α−1)π
(α−1)π
2e(cos (α−1)π
spatial neighbours as e0 = (0, 0), eα = e(cos (α−1)π
4 , sin
4 ) for α ∈ {1, 3, 5, 7} and eα =
4 , sin
4 )
Δx
for α ∈ {2, 4, 6, 8} with e = Δt being the ratio of lattice spacing and timestep. Particle behaviour is deﬁned by
the Lattice-Boltzmann equation and a corresponding collision operator. Here, the Lattice-Bhatnagar-Gross-Krook
(LBGK) collision operator [10] is used, which is a linearisation of the collision-integral around its equilibrium state
with a single uniform relaxation time τ. Using this relaxation, the Lattice-Boltzmann equation can be written as
1
1
Δt
∂b
√
+ n2b h− 3 ui u j u j ), α = 0, . . . , 8,
fα (x + eα Δt, t + Δt) = fα (x, t) − ( fα − fαeq ) + 2 eαi (−g h
τ
∂xi
6e

(2)

eq

where fα is the particle distribution corresponding with lattice-velocity eα and fα a local equilibrium distribution,
eq
which deﬁnes the actual equations that are solved. In order to recover the SWE, a suitable fα has to be deﬁned for
every lattice-velocity. Zhou [11] has shown that the equilibria can be written as
⎧
⎪
⎪
α=0
h(1 − 5gh2 − 22 ui ui )
⎪
⎪
⎪
⎨ gh 6eeαi ui 3e eα j ui u j ui ui
eq
(3)
fα = ⎪
+
+
−
)
α = 1, 3, 5, 7
h(
⎪
6e2
3e2
2e4
6e2
⎪
⎪
⎪
⎩h( gh2 + eαi u2i + eα j u4i u j − ui ui2 ) α = 2, 4, 6, 8
24e
12e
8e
24e
and that the SWE can be recovered by applying Chapman-Enskog expansion on the LBGK approximation (2). Finally,
macroscopic mass (ﬂuid depth) and velocity are obtained by
fα (x, t)

h(x, t) =
α

and

ui (x, t) =

1
h(x, t)

eαi fα ,

α = 0, . . . , 8

(4)

α

respectively. We use the popular bounce-back rule as boundary conditions, where particles are reﬂected using opposite
outgoing directions.
2.3. Extended methods
Using the LBM introduced above as a starting point for advanced solvers, we present two general extensions to
the basic LBGK method.
The LBM for the shallow water equations presented above can interact with the bed surface and therefore is
not restricted to simple scenarios (as it would be if an equilibrium distribution function corresponding to the twodimensional Navier-Stokes equations had been used). However, it is restricted to subcritical ﬂows, i. e., the ﬂuid
depth is signiﬁcantly greater than zero. The ﬁrst extension to the method aims at allowing so-called dry-states, since
the dynamic drying and wetting of the bed topography is a feature desired by many applications. In our approach,
we deﬁne a ﬂuid depth lower than a speciﬁed small threshold parameter as dry and set the macroscopic velocity at
dry sites to zero, to avoid the division by zero in the extraction phase of the original algorithm (the evaluation of
equation (4)). Additionally, local oscillations caused by critical non-zero ﬂuid depths are conﬁned with an adaptive
limiter approach.
In order to simulate rigid bodies moving within the ﬂuid (ﬂuid structure interaction, FSI), the method described
so far is extended by three major algorithmic steps: In the ﬁrst step, the forces acting on the ﬂuid due to a moving
boundary have to be determined. We use the so called BFL-rule [12], which interpolates the momentum values for

242

D.
Ribbrock
et etal.al./ Procedia
Science00
1 (2012)
239–247
Dirk
Ribbrock
/ ProcediaComputer
Computer Science
(2010) 1–9

4

the consistency with non-zero Dirichlet boundary conditions induced by a moving boundary. The interpolation is
achieved by taking values in opposite direction of the solid movement similar to the bounce-back rule.
The second major step in performing FSI is the extrapolation of missing macroscopic quantities. Moving solids
imply that the lattice is in general not invariant over time: Lattice sites that belong to a solid region at time t may
become ﬂuid sites at time t + Δt. In this case, the missing quantities have to be reconstructed. We use an indirect
so-called equilibrium reﬁll method proposed for example by Caiazzo [13], which uses a three point-backward approximation after calculating the opposite direction of the solid’s movement in order to use one-dimensional extrapolation
only.
Finally, the force acting on the solid due to ﬂuid movement is determined by the Momentum-Exchange algorithm
(MEA) [14].The MEA uses special distribution functions to compute the moments resulting from incoming particles
and outgoing particles corresponding to a single lattice-velocity at a speciﬁc solid (boundary) point.
3. Implementation and Parallelisation
3.1. LBM Solvers
We have implemented a modular ‘construction kit’ for Lattice-Boltzmann based solvers for the SWE and concentrate our analysis on ﬁve conﬁgurations: Our basic solver (LBMSWE ) is designed for simple simulations and does not
support source terms. Hence, it is suitable for the uniform SWE (equations (1) with its right hand side set to zero)
and for ﬂow problems involving only a planar bed. To enable a numerical comparison with other CFD solvers, the
equilibrium distribution functions (3) can be replaced by those for the Navier-Stokes equations (solver LBMNAVSTO ),
see for example Caiazzo for the exact equations [13]. Including the source term (right hand side of equation (1))
for the bed’s slope and friction and the techniques described in section 2.3 to incorporate dry-states into our ﬁrst
solver leads to a method for the inhomogeneous SWE (LBMSWE+ ). Adding all functionality associated with moving
self-propelled solids results in a FSI capable solver (LBMFSI ). Finally, the same conﬁguration as LBMSWE+ using the
Navier-Stokes module instead of the SWE module is labelled LBMNAVSTO+ . As reference we use a FEM discretisation for the two-dimensional Navier-Stokes equations (FEMNAVSTO ) provided by the FEATFLOW project [15] for our
numerical validation, see section 4.
3.2. Eﬃcient Parallelisation and Vectorisation
In all solvers presented in the previous section, parallelism is trivially abundant: All work performed for each
lattice site is independent of all other sites. However, this general observation does not lead in a straightforward
manner to an eﬃcient parallelisation and in particular vectorisation, especially for the more complex solvers. Our
implementation supports coarse-grained parallelism for distributed memory systems, medium-grained parallelism on
multicore shared memory machines, and ﬁne-grained parallelism corresponding to the SIMD paradigm. The latter is
important not only in the SSE units of conventional CPUs, but also on graphics processors. For instance, the SIMD
width is 32 on current NVIDIA CUDA-capable GPUs. Only the actual implementation of the algorithms varies for
diﬀerent architectures, see section 3.3.
The SIMD processing implies that branches should be avoided in the innermost loops, because otherwise serialisation of the branches occurs. In the context of our FSI-LMB solver, sites can be ﬂuid, solid, dry or moving boundary,
and each type has to be treated diﬀerently. Furthermore, diﬀerent computations are performed in the collision steps
for the nine lattice velocities of the D2Q9 model. For an eﬃcient vectorisation, we want to store all data contiguously
in memory. A special packing algorithm is used to determine the largest connected areas in the given domain: For
the basic solver without source terms and FSI, all obstacle sites can be eliminated a priori, as they contain no ﬂuid
throughout the entire calculation. In a second step, all remaining sites are classiﬁed with respect to their neighbours
in all nine directions. For example, if the northern neighbours of two adjacent lattice-sites are also adjacent and have
the same boundary conditions, the solver can process these sites in a vectorised manner without branches. However,
for the advanced algorithms, this lattice-compression technique is not suitable since the lattice is dynamically altered
by e.g. the movement of the solids. In this case, the packing algorithm is only run once in the preprocessing phase,
packing only stationary obstacles as in the original algorithm. Dynamic lattice transformation in the actual simulation
is achieved by tagging lattice sites either as ﬂuid, solid or ﬂuid-boundary, etc. In all cases, the packed data is stored in

D. Ribbrock
et al. /etProcedia
Computer
Science
1 (2012)
239–247
Dirk Ribbrock
al. / Procedia
Computer
Science
00 (2010)
1–9

243
5

one-dimensional arrays that contain ranges of lattice-sites with related neighbours and similar boundary conditions.
In addition to vectorisation, the approach also ensures good spatial and temporal locality of the computations.
Figure 1 exemplarily depicts the data layout stemming from the packing- and domain decomposition algorithms
for a situation with one stationary obstacle (top) and one object moving to the right (bottom right). Hence, the vectors
only contain data for ﬂuid sites. The classiﬁcation step generates index vectors containing intervals that guide the
computation for each lattice velocity (illustrated by the diﬀerently colored arrows in ﬁgure 1): All ﬂuid sites in an
interval can be treated equally by the LBM algorithms. This approach is very similar to the one proposed by Krafczyk
et al. [16]. Since moving objects alter the lattice in each timestep, the computationally intense preprocessing is
avoided by using dynamic marking of the lattice sites geometrically enclosed by the moving solid’s boundary (e.g.
solid (gold), solid-boundary (tan) and sites that need to be initialised (red) in ﬁgure). Note, that the ratio of ﬂuid and
(stationary) solid sites is usually much greater than in our small example and the (integer) index vectors are only as
long as needed for the speciﬁc lattice-velocity to keep the additional memory imprint as small as possible.




Figure 1: Data layout after preprocessing: Left: Full distribution function. Right: Data- and index vectors after partitioning. The colored arrows
visualise index limits that deﬁne the intervals for homogeneous computations: The black arrows represent integer values associated with distribution
function f1 , the green ones with f2 and so on. For instance, in the ﬁrst part of the domain (denoted with patch 0), the ﬁrst black arrow indicates
that streaming into direction (1, 0)T is no longer valid, since the index reaches the right boundary. Hence, any streaming can be processed in a
branch-free way. In addition, note that in patch 0, all non-ﬂuid sites are not represented in the packed data and index vectors, because they represent
a stationary solid obstacle whereas patch 1 contains the moving solid and therefore no packing applies.

To be able to distribute the solver calculation across various cores and calculate the solution in parallel, the domain
(the packed data vectors) is partitioned into diﬀerent nearly independent parts. We pad local arrays with a few ghost
entries (white sites in ﬁgure 1), allowing it to synchronise with its predecessor and successor. As we use a onedimensional data layout, each part has only two direct neighbour subdomains to interact with. After each time step
every part sends its own results corresponding to subdomain boundaries to the ghost sites of its direct neighbours. As
soon as every part has ﬁnished these independent, non-blocking transfers, the next time step calculation can begin.
On shared memory architectures, the synchronisation phase does not involve message passing, but can be realised via
locks on shared data, and thus the procedure is conceptually the same. Consequently, the communication between the
diﬀerent parts is very eﬃcient, because it involves no serialisation.
3.3. Hardware-Oriented Implementation
The solver is built on top of the HONEI libraries [17] to be able to use the diﬀerent target hardware plattforms
eﬃciently. HONEI provides a wide range of software backends to access diﬀerent hardware via a uniﬁed interface.
Its generic backend approach enables the programmer to develop code without having to care about speciﬁc hardware
details, and applications built on top of the libraries are written only once and can directly beneﬁt from hardware
acceleration by simply designating them with a hardware tag. Furthermore, the backend speciﬁc infrastructure eases
the development of application-speciﬁc functionality, because hardware speciﬁc optimisation has not to be done from
scratch: The CPU backend is built around SSE intrinsics. The multicore backend uses PThreads to provide an abstract
thread type and tools to execute and synchronise these threads. The GPU backend is based on NVIDIA CUDA and
provides simpliﬁed access to any CUDA enabled GPU. In addition, all memory transfers between main memory and
the GPU device memory are done automatically and executed only if necessary. The Cell backend enables support
for the IBM Cell BE and grants a comfortable way to create custom SPE programs on top of the IBM SPE libraries.
Finally, the MPI backend encapsulates the common message passing interface.

244

D.
Ribbrock
et etal.al./ Procedia
Science00
1 (2012)
239–247
Dirk
Ribbrock
/ ProcediaComputer
Computer Science
(2010) 1–9

6

4. Results
4.1. Validation
Since all backend-speciﬁc implementations compute the same numerical results (within a very small limit) as
the CPU-implementation, the following numerical tests concentrate on a comparison with an external CFD code as
well as with comparisons between the diﬀerent solvers. We ﬁrst set up two test scenarios for each LBM-SWE solver
described in section 3.1 and compare their ability to conserve macroscopic mass (i. e., ﬂuid depth in the SWE case).
The basic LBM solver LBMSWE is tested with a full dam-break simulation with a cuboidal ﬂuid body collapsing over
the initially planar surface (scenario FCuDB). In addition, we introduce some stationary obstacles to simulate a partial
dam-break situation (scenario PCuDB). For the solver conﬁguration that makes use of the source terms, we modify
the ﬁrst scenario by employing a non-planar bed topography given by bγ (x, y) = γ(x2 + y2 ) for subcritical values of
γ and label this scenario with FCuDBslope . Critical ﬂuid depths are simulated using the partial dam-break situation
with an initially dry lower basin (scenario PCuDBdry ). Finally, the solver with full functionality is set up to simulate a
single box moving through the ﬂuid in non-cartesian direction with planar bed topography (scenario BoxFSI) as well
as with the bottom deﬁned by the function bγ (scenario BoxFSIslope ).
We measure the relative error in volume (which is the error in macroscopic mass in the SWE case) as Evol =
Vana −Vres
, where Vana is the analytical volume. Table 1 displays the resulting relative errors after convergence for
Vana
the three LBM-SWE solvers and the corresponding scenarios for diﬀerent levels of discretisation (level d implies a
lattice resolution of (50 · 2d−1 )2 ). We emphasise, that these numbers do not vary signiﬁcantly when using diﬀerent
architectures. The results presented are produced by using the CUDA backend with a NVIDIA GeForce GTX 285 in
single precision.
d
1
2
3
4
5
6

LBMSWE
FCuDB
PCuDB
1.83E-04 9.33E-04
6.37E-05 5.56E-04
7.96E-06 4.45E-06
1.11E-06 1.48E-06
7.97E-07 7.40E-06
7.96E-07 0.96 E-06

LBMSWE+
FCuDBslope PCuDBdry
2.75E-02
1.11E-01
2.74E-02
5.05E-02
2.74E-02
5.70E-03
1.01E-02
5.01E-03
8.96E-03
5.00E-03
4.70E-04
4.98E-03

LBMFSI
BoxFSI
BoxFSIslope
1.74E-02
1.66E-02
3.41E-03
1.94E-02
9.98E-04
1.50E-02
2.58E-06
3.00E-03
4.00E-07
2.60E-03
2.01E-07
1.01E-04

Table 1: Relative error in volume Evol for diﬀerent solvers and simulations.

As it is common with the LBGK approximation for the SWE, we verify, that single versus double precsion is
not an issue here as well and double precision results are usually not signiﬁcantly better than single precision ones.
Secondly, all error values decrease as expected at higher lattice-resolution. At the largest problem sizes, the relative
errors range from 0.000005 % using the basic solver, to 0.05 %with a more complex bed topography. The same holds
true for our LBMFSI solver which implies that the added FSI functionality does not lead to a signiﬁcant mass loss.
With dry-states present, our experimental approach reaches an error of approximately 0.5 % at higher lattice sizes.
(Δx, Δt, τ)
(1, 1, 1)
(1, 1, 1.5)
(1, 1, 0.6)
(1, 1, 0.9)
(1, 1, 1.1)
(1, 0.9, 1)
(1, 1.1, 1)
(0.9, 1, 1)

EFEM
LBMNAVSTO
2.00E-03
2.12E00
1.57E00
5.0E-01
2.52E-01
1.95E-03
1.95E-03
1.95E-03

EFEM
LBMNAVSTO+
1.55E-03
8.90E-01
1.02E00
8.50E-02
1.08E-01
1.55E-03
1.55E-03
1.55E-03

reduction
22.5%
58%
35%
83%
57%
20.5%
20.5%
20.5%

#iters
LBMNAVSTO
26250
17369
74665
30031
23654
26700
26025
26024

#iters
LBMNAVSTO+
26120
17119
64434
29257
23580
26347
25894
25669

Table 2: Relative error EFEM and numbers of iterations until steady-state for the driven-cavity test.

In a second test series, we compare our Navier-Stokes based solver conﬁgurations to the results computed by the
corresponding FD solver provided by H¨ubner [9] as well as with the corresponding solver within the FEATFLOW

245
7

D. Ribbrock
et al. /etProcedia
Computer
Science
1 (2012)
239–247
Dirk Ribbrock
al. / Procedia
Computer
Science
00 (2010)
1–9

project [15]. Besides the comparison with external codes, this test aims at showing that our most sophisticated solver,
LBMFSI , may produce quantitatively more accurate results than the basic solver. In order to do so, we use a lid-driven
cavity scenario with the Reynolds number set to 100 and represent the moving wall by a moving solid in order to apply
the microscopic moving-boundary conditions instead of resetting only macroscopic velocity in each timestep. Table 2
shows the error EFEM = ||uFEM − ures || and the total numbers of iterations until a steady state is reached, where uFEM is
the x-component of the macroscopic velocity at a vertical testline through the center of the domain computed by the
solver FEMNAVSTO and ures the corresponding result using LBMNAVSTO or LBMNAVSTO+ respectively. The results are
shown for several diﬀerent solver parameterisations labelled with the corresponding values of (Δx, Δt, τ). It can be
seen that the LBM solvers can be parameterised so that they are competitive to the FEM solvers: Error norms around
0.2 % imply component-wise diﬀerences in the macroscopic velocity at the fourth or ﬁfth digit in average, although,
as expected, they can of course not compete against them when more accuracy is required. Furthermore, our moving
boundary-capable solver enhances numerical accuracy by 20 to 80 % compared to the basic solver and slightly reduces
the needed numbers of iterations until the steady-state is reached. Again, these results are independent of the evaluated
hardware architectures.
4.2. Performance Benchmarks
We ﬁrst assess the performance of the basic solver without its source term and FSI modules. Figure 2 shows the
mega lattice updates per second (MLUP/s) for increasing lattice size, simulating a partial dam-break scenario.
40
35

250

SWE GTX 285
SWE 8800 GTX
SWE Core i7, 4 thread
SWE Opteron, 3 threads
SWE QS22 Blade
FSI GTX 285
SWE+ GTX 285

30
25
MLUP/s

300

200

MLUP/s

1 process, 1 node
2 processes, 2 nodes
3 processes, 3 nodes
4 processes, 4 nodes
8 processes, 4 nodes

20

150

15

100

10
5

50

0
0

2

250

500

2

1000

2

2

1500
Number of lattice sites

2000

2

(a) Performance benchmark

2400

2

2

2800

2502

5002

10002
15002
20002
Number of lattice sites

24002

28002

(b) Strong scalability with MPI

Figure 2: Left: Partial dam-break benchmark on diﬀerent architectures (solver LBMSWE ); with non-planar bed (solver LBMSWE* ); with moving
solids (solver LBMFSI ). Right: Strong scaling with MPI on an Opteron cluster with inﬁniband interconnect.

The CPU SSE/multicore backend is evaluated on a dual-socket dual-core AMD Opteron 2214 system and an Intel
Core i7 quad-core workstation. The Cell backend is tested with an IBM QS22 Cell blade with two Cell BE processors.
The GPU-based solver is executed on a NVIDIA GeForce 8800 GTX and a GeForce GTX 285. The QS22 blade
executes twice as fast as the Opteron system, but is outperformed by a factor of two by the Core i7 system. Even the
older 8800 GTX outperforms all CPU systems but is restricted to small lattice sizes due to its comparatively small
amount of on-chip memory. Finally, the GTX 285 reaches eight times the performance of the fastest CPU system.
These speedup factors are proportional to the bandwidth to oﬀ-chip memory of the various architectures, ranging
from 6.4 GB/s per socket (Opteron), 25 GB/s (Cell) and 33 GB/s (i7) to 89 GB/s and 160 GB/s for the two GPUs. We
emphasise that the speedup of the GPU over other architectures is in line with the measurements for the basic LBM
solver, even with full FSI functionality. The timing measurements for the more complex solvers demonstrate that all
solver conﬁgurations can cope with high resolutions in reasonable time. For example, even the full algorithm running
at 50 MLUP/s can compute a single timestep on a lattice with approximately 1.7 million lattice-sites in less than
0.04 seconds, corresponding to 30 timesteps per second. The more advanced solvers do not beneﬁt from the static
lattice compaction (cf. section 3.2) to the same extent as the basic solver, because the domain changes in the course

246

D.
Ribbrock
et etal.al./ Procedia
Science00
1 (2012)
239–247
Dirk
Ribbrock
/ ProcediaComputer
Computer Science
(2010) 1–9

8

of the simulation. Besides the additional computational eﬀort, the loss in performance compared to the basic solver is
therefore certainly due to the increase in conditional branches in the code.
Opteron 3 threads
Core i7 4 threads
QS22 blade
GeForce 8800 GTX
GeForce GTX 285

EquilibriumDistribution
61
48
7
19
32

CollideStream
24
35
72
52
37

Extraction
15
17
16
19
24

Boundaries
0
0
5
10
7

Table 3: Breakdown of the diﬀerent kernels in one solver step (solver LBMSWE ): Fraction of total runtime for the kernel computing equations (3)
(EquilibriumDistribution), a fused collisions and streaming kernel (CollideStream) and a single kernel for determining the macroscopic
quantities (equations (4), labeled Extraction) and ﬁnally, a module responsible for applying boundary conditions (Boundaries).

Detailed measurements of the LBMSWE solver reveal, that only the kernel responsible for computing the equilibrium distribution functions is compute-bound, all other operations are limited in performance by the memory bandwidth. Table 3 shows that the equilibrium distribution kernel consumes only a small percentage of execution time on
the devices with a high ﬂoating point throughput. In contrast these architectures spend much more relative time in the
collide and stream kernels, which requires many additional memory transfers.
Figure 2(b) ﬁnally shows almost perfect strong scaling of the MPI backend using the LBMSWE solver on a small
cluster of Opteron 2214 nodes.
5. Conclusions and Future Work
A hardware oriented approach to two-dimensional ﬂow problems based on diﬀerent governing equations has been
presented. Performance critical kernels have been implemented as ‘building blocks’ for Lattice-Boltzmann based
solvers. Besides a wide applicability, the approach aims at targeting multiple ﬂoating point hardware architectures
under a uniﬁed interface. It has been shown that our approach can cope with complex ﬂow problems with reasonable
performance and accuracy on all architectures under consideration.
In future work, we will explore heterogeneous systems, e.g., the simultaneous use of the CPU cores and GPUs in
cluster nodes, to maximise the computational eﬃciency. In addition, performance comparison with diﬀerent state of
the art approaches to solving the SWE are in progress.
Acknowledgements
We would like to thank Danny van Dyk, Sven Mallach and all contributors to HONEI. This work has been supported by Deutsche Forschungsgemeinschaft (DFG) under the grant TU 102/22-2, and by BMBF (call: HPC Software
f¨ur skalierbare Parallelrechner) in the SKALB project (01IH08003D / SKALB). Thanks to NVIDIA for generous
hardware donations, and to IBM Germany for access to QS22 blades.
References
[1] M. V. Wilkes, The memory gap (keynote), in: Workshop on Solving the Memory Wall Problem, ISCA-2000, 2000, http://www.ece.neu.
edu/conf/wall2k/wilkes1.pdf.
[2] Z. Fan, F. Qiu, A. Kaufman, S. Yoakum-Stover, GPU cluster for high performance computing, in: SC ’04: Proceedings of the 2004
ACM/IEEE conference on Supercomputing, 2004, p. 47. doi:10.1109/SC.2004.26.
[3] J. T¨olke, M. Krafczyk, TeraFLOP computing on a desktop PC with GPUs for 3D CFD, International Journal of Computational Fluid Dynamics
22 (7) (2008) 443–456. doi:10.1080/10618560802238275.
[4] N. Th¨urey, K. Iglberger, U. R¨ude, Free surface ﬂows with moving and deforming objects for LBM, Proceedings of Vision, Modeling and
Visualization 2006 (2006) 193–200.
[5] T. Pohl, High Performance Simulation of Free Surface Flows Using the Lattice Boltzmann Method, Ph.D. thesis, Universit¨at ErlangenN¨urnberg (2008).
[6] M. St¨urmer, J. G¨otz, G. Richter, U. R¨ude, Blood ﬂow simulation on the Cell Broadband Engine using the Lattice Boltzmann Method, Tech.
Rep. 07-9, Lehrstuhl f¨ur Systemsimulation, Universit¨at Erlangen-N¨urnberg (2007).
[7] S. Williams, J. Carter, L. Oliker, J. Shalf, K. A. Yelick, Lattice Boltzmann simulation optimization on leading multicore platforms, in: IEEE
International Symposium on Parallel and Distributed Processing, IEEE, 2008, pp. 1–14. doi:10.1109/IPDPS.2008.4536295.

D. Ribbrock
et al. /etProcedia
Computer
Science
1 (2012)
239–247
Dirk Ribbrock
al. / Procedia
Computer
Science
00 (2010)
1–9

247
9

[8] L. Peng, K. Nomura, T. Oyakawa, R. Kalia, A. Nakano, P. Vashishta, Parallel Lattice Boltzmann Flow Simulation on Emerging Multi-core
Platforms, Springer-Verlag, Berlin, Heidelberg, 2008.
[9] T. H¨ubner, S. Turek, Eﬃcient monolithic simulation techniques for the stationary Lattice Boltzmann equation on general meshes, Computing
and Visualization in Science 13 (3) (2010) 129–143. doi:1007/s00791-009-0132-6.
[10] F. J. Higuera, J. Jimenez, Boltzmann approach to lattice gas simulations, EPL (Europhysics Letters) 9 (7) (1989) 663–668. doi:10.1209/
0295-5075/9/7/009.
[11] J. G. Zhou, Lattice Boltzmann methods for shallow water ﬂows, Springer, 2004.
[12] M. Bouzidi, M. Firdaouss, P. Lallemand, Momentum transfer of a Boltzmann-lattice ﬂuid with boundaries, Physics of Fluids 13 (11) (2001)
3452–3459. doi:10.1063/1.1399290.
[13] A. Caiazzo, Asymptotic Analysis of lattice Boltzmann method for Fluid-Structure interaction problems, Ph.D. thesis, Technische Universit¨at
Kaiserslautern, Scuola Normale Superiore Pisa (Feb. 2007).
[14] A. Caiazzo, M. Junk, Boundary forces in lattice Boltzmann: Analysis of momentum exchange algorithm, Computers & Mathematics with
Applications 55 (7) (2008) 1415–1423.
[15] C. Becker, S. Turek, Featﬂow – ﬁnite element software for the incompressible Navier-Stokes equations, User manual, Universit¨at Dortmund
(1999).
[16] M. Krafczyk, P. Lehmann, O. Philippova, D. H¨anel, U. Lantermann, Lattice Boltzmann Simulations of complex Multi-Phase Flows, Springer,
2000.
[17] D. van Dyk, M. Geveler, S. Mallach, D. Ribbrock, D. G¨oddeke, C. Gutwenger, HONEI: A collection of libraries for numerical computations
targeting multiple processor architectures, Computer Physics Communications 180 (12) (2009) 2534–2543. doi:10.1016/j.cpc.2009.
04.018.

