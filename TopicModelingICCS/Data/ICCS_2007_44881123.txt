Design and Development of Software Configuration
Management Tool to Support Process Performance
Monitoring and Analysis
Alan Cline1, Eun-Pyo Lee2, and Byong-Gul Lee2
1

Ohio State University, Department of Computer Science and Engineering,
Columbus, Ohio, USA
acline@carolla.com
2
Seoul Women’s University, Department of Computer Science,
Seoul, Korea
eun-pyo@hanmail.net, byongl@swu.ac.kr

Abstract. Most SCM tools underestimate the potential ability of monitoring
and reporting the performance of various software process activities, and
delegate implementation of such capabilities to other CASE tools. This paper
discusses how SCM tool can be extended and implemented to provide valuable
SCM information (e.g., metric data) in monitoring the performance of various
process areas. With the extended SCM tool capability, stakeholders can
measure, analyze, and report the performance of process activities even without
using the expensive CASE tools.
Keywords: Software Configuration Management, Process Metric.

1 Introduction
Software Configuration Management (SCM) is a key discipline for development and
maintenance of large and complex software systems [1], [2]. Many researches and
studies show that SCM is the most basic management activity for establishing and
maintaining the integrity of software products produced throughout the software life
cycle. The activities of SCM include identifying configuration items/units, controlling
changes, maintaining the integrity and the traceability of the configuration item, and
auditing and reporting of configuration management status and result.
The existing configuration management tools support some or the combination of
these activities with the help of functions including change control, version control,
work space management, and build/release control [3]. However, most SCM tools
underestimate the benefits of using the SCM metric capability in monitoring and
measuring of other process areas and have their implementation depend on other
CASE tools such as project management tool or spreadsheet software [4]. We believe
that the SCM tool capability can be extend to provide some valuable services and
information for monitoring and measuring the performance of various process
activities, such as project management, requirement management, or software quality
assurance. For example, to monitor the stability of requirements (SR) during
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 1123–1130, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1124

A. Cline, E.-P. Lee, and B.-G. Lee

requirement management, some of the primitive metric data from the change control
function can be utilized as follows:

∑i Initial Requirementsi∙ Ti) .

SR = NCR / (

(1)

where NCR represents the total number of change request on a requirement and Ti is
the time interval between the initial check-in and the final release of a requirement.
Current SCM tools rarely provide the mechanism for incorporating the
management and utilization of SCM metrics into other process areas. They usually
define only a few set of primitive SCM metrics and let the thirsty user utilize them on
a need basis. Besides, the current tools have no way of monitoring and measuring the
performance for a newly defined process or out of the defined scope. For example, a
user might be interested in measuring the effectiveness of the training plan prepared
for an organization or a senior manager might want to create a new process role with
a new responsibility and to see how the jobs get done. In this situation, the user is
prone to purchase a tool fit to that purpose.
This paper describes the design and development of SCM tool which can provide
the measurement, analysis, and reporting of the process performance in the broader
process areas. The remainder of this paper is organized as follows. Section 2 gives the
related works by comparing the exiting SCM tool capability based on metric
utilization. Section 3 and 4 describe the design and usage of our SCM tool in
supporting of metric capability. Finally, the conclusion and future works appears in
Section 5.

2 Current Configuration Management Tools
The features of the current SCM tools are limited to the support of only a few areas
such as requirement management or project tracking and oversight. Covering the
entire software process activities then costs for purchasing the expert tools.
IBM’s ClearQuest provides a workflow management capability and enforce the
process monitoring. However, for this service to be useful, it needs to integrate with a
tool, Portfolio Manager, for the profiling of process information from the extern [5].
Telelogic’s Synergy, integrated with Dashboard, intends to support a decision making
of project manager by automating data collection, analysis, and reporting of
measurement data. However, the tool only focuses on automating the requirement
management process data [6]. Borland’s StarTeam tends to offer a comprehensive
solution that includes integrated requirements management, change management,
defect tracking, and project and task management [7]. However, its primary usage is
limited to the SCM only and depends on external CASE tools to utilize the SCM
information in other process activities. Continuus/CM toolset also cannot be used for
the complicated process environment due to its lack of process related information
[8], [9]. The study of [10] supports our view by stating that the current SCM tools
have: 1) No support with the planning function; 2) No sufficient support with process
related functions; 3) No support with the report and audit mechanisms; 4) No support
with measurement.

Design and Development of SCM Tool

1125

3 Development of Configuration Management Process Tool
To lessen the problem of existing SCM tools, we propose a Configuration
Management Process Tool (CMPT) by implementing features such that the software
project team can monitor and analyze their process performance by utilizing the SCM
metrics for each process area. CMPT is implemented in JAVA and runs on a singleuser workstation connected to a remote shared CVS server.
Configuration Management Process Tool

Upper Mgmt

Trainers

customized (reconfigured)
courseware or manuals

change metrics*

change
requests and
requirement
elements (e.g.
use cases,
object classes)

training docs to
be controlled

Requirements
Manager

nbr of defects, number
of changes, change
owner and status

change metrics*, repair schedule/

Project Manager status, version change summary
project docs to be
controlled, test and dev
schedule

Configuration
Management Process
Tool

defects repaired, test
schedule variance

version requests and
defects repaired

QA
Manager

change metrics*, repair schedule/
status, version change summary

defects found, time
repaired

Test
Manager,
Tester

defect categories, acceptable nbr of
defects

code files and merged
versions

config ID per
info set; readiness
checklist
project docs to be
controlled; access perms;
CM guidelines &
processes

Configuration Manager

Project
Leader,
Developer
*change metrics = defect MTTR, product stability
(MTBF), schedule variance

Fig. 1. Context Diagram of the CMPT

Figure 1 illustrates the scope of CMPT and data flow that comes in and out of a
system. The requirements manager, for instance, inputs the requirement artifacts for
controlling and monitoring of use cases and object model classes. CMPT can deliver
to requirement manager the status reports containing the number of defects, the
number of changes and change requests, the change owner and date, and the status of
change requests.
3.1 Change Control Process
Among the many features of CMPT, the change control provides a base playground
for monitoring and collecting the various process data. The state flow diagram in
Figure 2 represents the invariants, pre-conditions, and post-conditions of change
control process.
The change control flows are divided into two modes, free text module and
executable module. The free text module elements (e.g., Proposal, Charter, Requirement
Specification, Design, Test Plan, Training Plan, and etc.) can have several states:
REQUEST PROPOSED, APPROVED, COMPLETE, and some intermediate states.
Executable modules (e.g., Change Requests, Defects, Code, Test Cases, and Use

1126

A. Cline, E.-P. Lee, and B.-G. Lee

Cases) go through seven states: REQUEST PROPOSED, APPROVED, ASSIGNED,
IMPLEMENTED, TEST READY, TESTED and COMPLETE states. CMPT is
designed to monitor and collect the status information for each of these states to provide
more accurate and affluent metrics for other process areas.
Check-in
Incident
(failed Test
Case)
Check-in
CR or
PLM from
new
req'mts

CR or FTM
Proposed
Check-in
CR (Add,
Delete,Up
date) from
testing

Incidents
that can
be
ignored

CCB
declares
Incident
as Defect

Defect
Proposed

CCB
approves
Item

CCB does
not
approve

Unapprove
d (archives
RPO)

Defect
Approved

PM re-assigns
to Developer

CR or FTM
Approved
TM
assigns
Tester

Test
Assigned

PM
assigns
Developer

Dev
Assigned

Test
Implem

Defect or CR
Proposed for
failed test
case

Author
Assigned

Developer
checks in
code
modules

Tester
checks in
test cases

Tester
confirms NOT
ALL tests
pass

PM
assigns
Author

Author
checks in
planning
module

Dev
Implem

Developer
checks in
code
modules

FTM
Written

Tester
checks in
test cases

Test Ready

GOTO TEST
OR DEV
ASSIGNED
(System
notifies Tester
or Developer)

Tester
confirms
ALL tests
pass

Configuration
Items Job Flow
all inputs required
either/or
input

Request
Tested

CCB does
not
approve
revision

CCB
approves
revision

Resubmitted

CCB
approves
revision

Complete

Fig. 2. Flow Items of the SCM Change Process

3.2 User Profiles and Transaction Permissions
CMPT facilitates with an access control mechanism for it can be utilized by different
participants in various process areas. Table 1 shows each user’s transaction CMPT
facilitates. The Project Manager will input project documents to be controlled, and the
test and development schedule. The Project Manager then want change metrics, repair
schedules, development and change statuses, and version change summaries for the
product from CMPT. The Requirements Manager may input requirement elements for
control and monitoring and want CMPT to deliver reports containing the number of
defects, number of changes and change requests, the change owner and date, and
status of change requests and repairs. The Test Manager and Tester may want CMPT
to generate defect repair reports (change metrics) and test schedule variance. Both
Developers and Project Leaders may want CMPT to produce merged product
versions, code files, traceable version links, and change reports. CMPT can provide
Configuration Manager with version or configuration ID and configuration status

Design and Development of SCM Tool

1127

profiles to help coordinating the various SCM activities. CMPT also provides the
audit mechanism to enforce the CM guidelines and policies as planned. For the QA
Manager, CMPT provides various QA metrics for each process area under the control
of SCM.
Table 1. Example of Each User’s Transaction Permissions
User
Trans.
Get metric
report
Check out
item
Change
request
Approve
change
request

PM

RM

QM

CM

TM

Proj.
Leader/
Developer

Tester

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

Trainer

General
Users

√
√

3.3 Process Metric
The key to the process metrics analysis is to analyze the actual effort, schedule,
deviation of cost and plan, and defects during the project [11], [12]. Table 2 shows a
sample of such metrics provided in [11]. In CMPT, these metrics can be calculated
from Cartesian product of the fine grained SCM events (e.g., check-in, release, checkout, change request, change, change completion, and etc.) and scale measurements
(e.g., number of events, frequency of events, time interval, average time, and etc.).
Table 2. SCM Process Metrics
Metric
Schedule variance
Effort variance
Size variance
Change stability
Change density
Residual change density
Change distribution in
each development phase

Equation
(Actual duration-Planned duration)/Planned duration
(Actual effort-Planned effort)/Planned effort
(Actual size-Planned size)/Planned size
Number of change request/Total number of baseline items
Number of changes for each baseline/Time span between check
in and out
Number of changes completed / Number of changes requested
Number of changes in each phase/Total number of changes

4 Work Scenarios of CMPT
This section describes how CMPT can be utilized in producing metrics for monitoring
other process activities. Figure 3 shows that CMPT facilitates a set of transactions and
access permission associated with user’s role. A user can define and customize
various roles and transactions according to their process condition and environment.

1128

A. Cline, E.-P. Lee, and B.-G. Lee

Fig. 3. Setting SCM Permissions

Figure 4 and 5 show how user can retrieve or store a configuration item. For
checking out a configuration item (Figure 4), CMPT facilitates an exclusive locking
and shows a lock icon for the items that already have been checked out. For checking
in (Figure 5), a user can check in either free-text documents or executable elements.
In CMPT, both the check-in and the check-out event are combined with the scale
measurement (e.g., time, frequency, number and etc.) to produce the finer grained
SCM metrics, such as number of check-in or time of check-out.

Fig. 4. Check-out of Configuration Item

Fig. 5. Check-in of Configuration Item

Any project team member can propose a change request for adding new item(s),
and replacing and deleting any existing item(s) with reasons and expected completion
time (Figure 6). All element types of new items are pre-defined by the Configuration
Manager. Once a Change Request (CR) is proposed, the CCB reviews the CR or
defect for approval or disapproval. If CR or defect is approved, the Project Manager
and Test Manager assign the request to developers and testers for implementation.

Design and Development of SCM Tool

1129

Fig. 6. Create a Change Request Proposal

User can get a metrics report for a selected configuration item with a graph
(Figure 7). The graph view can provide a summary of various process performances.
Users can select a report type from predefined types such as configuration status,
history, tracking, or release report. The scale can be chosen from number of events,
frequency of events, time interval, and average time, and the metrics can be chosen
from check-in, release, check-out, change request, change, and change completion of
configuration items. Figure 7 indicates the frequency of change request for each use
case. In this case, use case no.2 shows the highest frequency of change requests.

Fig. 7. Get Metrics Report

5 Conclusion and Future Work
SCM’s capability has to extend to provide some valuable services to monitor other
process or management activities, such as project management or software quality
assurance. Current SCM tools rarely provide such a monitoring capability nor provide
fine-grained data useful enough. This paper described the design and development of

1130

A. Cline, E.-P. Lee, and B.-G. Lee

an SCM tool which can provide the measurement, analysis and reporting capability
for monitoring other process performance without using expensive CASE tools. The
proposed CMPT tool can:
1. define and customize the access/role control and associated transaction
selection,
2. define and customize the process work flow, and
3. utilize the work flow status information and metrics to provide process
performance information.
Currently, the CMPT’s process customization capability only applies to change
control. For future work, the customization scheme should be extended and enhanced
to adopt the various process characteristics and project environments. More studies
should also be focused on the reporting, including graphing, extraction, and
translation of process metric data.
Acknowledgments. This research was supported by the MIC (Ministry of
Information and Communication), Korea, under the ITRC (Information Technology
Research Center) support program supervised by the IITA (Institute of Information
Technology Advancement) (IITA-2006-(C1090-0603-0032)).

References
1. S. Dart: “Concepts in Configuration Management Systems,” Proc. Third Int’l Software
Configuration Management Workshop (1991) 1-18
2. D. Whitgift: Methods and Tools for Software Configuration Management, John Wiley and
Sons (1991)
3. A. Midha: “Software Configuration Management for the 21st Century,” TR 2(1), Bell Labs
Technical (1997)
4. Alexis Leon: A guide to software configuration management, Artech House (2000)
5. IBM Rational: ClearCase, http://www-306.ibm.com/software/awdtools/changemgmt/
(2006)
6. Peter Baxter and Dominic Tavassoli: “Management Dashboards and Requirement
Management,” White Paper, Telelogic (2006)
7. Borland: Starteam, http://www.borland.com/us/products/starteam/index.html.
8. Continuus Software/CM: Introduction to Continuus/CM, Continuus Software Corporation
(1999)
9. Merant :PVCS, http://www.merant.com/products/pvcs/
10. Fei Wang, Aihua Ren: “A Configuration Management Supporting System Based on
CMMI,” Proceedings of the First International Multi-Symposiums on Computer and
Computational Sciences, IEEE CS (2006)
11. R. Xu, Y. Xue, P. Nie, Y. Zhang, D. Li: “Research on CMMI-based Software Process
Metrics,” Proceedings of the First International Multi-Symposiums on Computer and
Computational Sciences, IEEE CS (2006)
12. F. Chirinos and J. Boegh: “Characterizing a data model for software measurement,”
Journal of Systems and Software, v. (74), Issue 2 (2005) 207-226
T

