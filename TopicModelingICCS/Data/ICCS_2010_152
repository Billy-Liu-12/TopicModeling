Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–9
2301–2309

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010
Using Ontologies for the Federated Simulation of Critical Infrastructures
Alberto Tofania,∗, Elisa Castorinia , Paolo Palazzaria , Andrij Usovb , Cesaire Beyelb , Erich Romeb , Paolo Servilloc
a ENEA,

b Fraunhofer

Via Anguillarese 301- S. Maria di Galeria 00123 Roma, Italy - www.casaccia.enea.it
Institut IAIS, Schloss Birlinghoven - 53754 Sankt Augustin, Germany - www.iais.fraunhofer.de
Piazzale E. Fermi 1 - Porto del Granatello 80055 Portici (NA), Italy - www.criai.it

c CRIAI,

Abstract
This paper presents a Knowledge Base System (KBS) as a key component of a federated simulation framework
aimed at investigating the dependencies among Critical Infrastructures (CIs). The KBS, based on the ontological
formalism, represents the properties and the relations of each simulation domain and the dependency relations among
diﬀerent domains. Some auxiliary data structures, necessary to model the interaction among the simulators of diﬀerent
CIs, have been deﬁned and have been populated through suitable queries to the KBS. The adoption of the ontological
formalism allowed the deﬁnition of a common formalism to deal with the heterogeneity arising from the presence of
diﬀerent domains.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: CI Protection, CI Dependency Analysis, Knowledge Base System, Federated Simulation, Ontology

1. Introduction
The study of Critical Infrastructures Protection (CIP) has been indicated by the European Commission as a fundamental research topic [1] for the development and improvement of the European economy and society. A deﬁnition of
European Critical Infrastructures ca be found in In [2]. In spite of its high relevance, the understanding of system of
critical infrastructures with all their interdependencies is still immature. The study of these complex infrastructure systems demands joint interdisciplinary eﬀorts of researchers, industrial stake-holders and governmental organisations
to overcome all the diﬃculties involved as availability of models and data for single infrastructures, interoperable
simulation of multiple infrastructures, testbeds and benchmarks for protection solutions.
The various aspects of infrastructure networks present numerous theoretical and practical challenges in modelling,
prediction, simulation and analysis of cause-and-eﬀect relationships in coupled systems [3]. These systems comprise a
heterogeneous mixture of dynamic, interactive, and often non-linear entities, unscheduled discontinuities, and numerous other signiﬁcant eﬀects. Then, modelling and analysis of these systems requires consideration of their large-scale,
non-linear, and time-dependent behaviour.
The report [4], about European CI disruptions, describes and classiﬁes the cascading eﬀects among European CIs.
Due to the high relevance of studying, modelling and simulating CIs and their dependencies, the European Commission has funded the Design of an Interoperable European federated Simulation network for Critical InfraStructures
(DIESIS) [5], [6] project with the aim to establish the concepts and methodologies of an e-Infrastructure for the
∗ Corresponding

author
Email address: alberto.tofani@enea.it (Alberto Tofani )

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.258

2302

A. Tofani et
al. / Procedia Computer Science 1 (2012) 2301–2309
/ Procedia Computer Science 00 (2010) 1–9

2

modelling and simulation of CIs. In particular, the project is a feasibility study for the realisation of an European
Infrastructures Simulation and Analysis Centre (EISAC)1 that should have the same aims and functionalities of the
American NISAC initiative [7].
Currently, two major general approaches [8] are used in the CIP research ﬁeld: integrated vs coupled modelling
approaches. In the former case, the approach is to create an integrated system model that attempts to model multiple
infrastructures and their (inter)dependencies within one framework. On the contrary, within the coupled modelling
approaches a series of individual infrastructure simulations are coupled together in order to illustrate the cascading
inﬂuence between them. In both the cases, the scenario description (CI networks and their interconnections) is usually
embedded in the simulation framework and this makes the scenario representation and the analysis tasks very diﬃcult.
In this work, which summarises some of the results achieved in the DIESIS project, we propose the separation
of the scenario representation (Scenario Deﬁnition Phase) from the simulation framework (Federated Simulation
Phase). The main idea is to develop a Knowledge Base System (KBS) based on ontology and rules providing the
semantic basis for the federated simulation framework [9], [10]. In particular, a federation of simulators can be
considered as a System of Systems where every simulator represents an independent entity with its own behaviour
and purpose. The super-system considers the interaction of these entities and puts in evidence an emergent behaviour
that doesn’t reside in any component system [11]. Therefore, in a federated simulation, the stand-alone simulators
must be linked together so that an understandable and meaningful information exchange could be performed. This
requires that simulators could interact and cooperate. In order to achieve this interoperability we propose the adoption
of ontologies which allow both an uniform modelling of heterogeneous infrastructures and the easy representation of
inter-domain dependencies.
2. Related works
Several approaches have been explored to model CI interdependencies to enable federated simulations. In particular, the HLA (High Level Architecture) standard [12] and the MSI (Multi-Simulator Interface) program [13], currently
are among the most relevant works in this ﬁeld. However, these approaches do not seem to be suitable for simulations
in the infrastructure domain. The coupling of simulators is based on a common data model that has to be implemented by all involved simulators. However, this data model is on a purely syntactical level and does not provide
semantic information about the modelled domain. HLA makes it also diﬃcult to integrate diﬀerent timing models.
The work proposed in [9] is conceptually similar to the approach presented in this paper. In fact, both address the
issue of knowledge reuse and both are based on an ontological framework able to realise a semantic layer between
CI concepts and computer systems, independently from technology, architecture and applications. Unlike the work
presented in [9], that uses simulation models, our approach refers to infrastructure domain models. This allows to
gain more generality in relation to the software simulator to be used, increasing the reuse potentiality of such models
for other simulators. Another similar approach is investigated in [14], where ontologies are used to face the problem of semantic inaccessibility when diﬀerent simulation tools are used in a federated environment. This approach
allows signiﬁcant increases in the quality of information sharing and communications for distributed modelling and
simulation application, but its requirement to use pre-existing ontology models implies the need to perform a complex
comparative ontology analysis including the management of concepts mismatches. Our work proposes a KBS able
to create an abstraction of the considered domains, to represent and formalise parameters and dependencies, which
are relevant for the problems to be investigated. The strength and innovation of our approach lies in the creation of
a common level of abstraction for the systems involved, where the semantic of dependencies can be formalised in a
simulator-independent fashion. Moreover, the work presented in this paper realises a real integration of the ontological
framework inside a federated simulation framework, by introducing further components interfacing speciﬁc domain
simulators and managing/synchronising the federated simulation session.
1 The research leading to these results is partially funded by the European Community’s Seventh Framework Programme FP7/2007-2013 under
grant agreement n 212830.

2303
3

A. Tofani et al.//Procedia
ProcediaComputer
Computer
Science 1 (2012) 2301–2309
Science 00 (2010) 1–9

3. KBS
The KBS establishes a common formalism, for scenario and domain knowledge experts, to represent the main
aspects, elements and properties of the considered domains and their interconnections. The KBS is based on the
Ontology Web Language (OWL) and the ontologies are deﬁned through proper speciﬁcations of classes, properties
and individuals (instances of classes). The individuals represent the physical/logical entities that form the universe
of a speciﬁc domain. For instance, a speciﬁc electrical load is an individual of the electrical ontology. The OWL
allows to group individuals in classes that deﬁne the properties shared by all their individuals. The properties can
be used either to specify relationships between individuals and data type values (Datatype Properties) or to describe
relationships among individuals (Object Properties). Then, if we denote with Pr the set of properties we have
Pr = DP ∪ OP, with DP = {p | p Datatype Property}, OP = {p | p Ob ject Property}
The KBS architecture includes the following ontology deﬁnitions:
• World ONTology (WONT);
• Infrastructure domain ONTologies (IONTs);
• Federation ONTology (FONT).
The WONT is a general template providing the basic structures and rules to deﬁne CI domains. In particular, the
WONT allows the deﬁnition of CI domain elements (through the WONT class Component), their physical and logical
interconnections (through the WONT object property isConnected) and the dependencies among diﬀerent CI domains
(through the WONT object property isA).
The IONTs inherit the basic template from the WONT and represent the speciﬁc knowledge on the critical infrastructure domains. For instance, the electric IONT class Load (that models the electric load element) and the
telecommunication IONT class Switch (that models the telecommunication switch element) are subclasses of the
WONT class Component. In addition, the railway IONT property isLinked that models the connection between two
railway stations is a sub-property of the WONT property isConnected; similarly, the telecommunication IONT property transmits that models the connection between a transmitter and a receiver is another sub-property of the WONT
property isConnected. Analogously, all dependencies among the considered CI domains are modelled through ad-hoc
designed sub-properties of the WONT property isA.
In the following, given a CI domain Xi , Ci indicates the set of all components of Xi and Pri indicates the set of
properties related to the components of Xi . Then, a generic IONT can be represented as IONT i = {Ci , Pri }.
Once the IONT has been deﬁned to model a particular domain, it is possible to create individuals (instances of
IONT classes) to represent actual network domains (for example the electrical power network or the telecommunication network of a speciﬁc city district). Similarly to the IONT deﬁnitions, we indicate with Ci∗ the set of the all
instantiated components belonging to the domain Xi and with Pri∗ the set of instantiated properties related to Xi . Then,
the IONT instance IONT i∗ can be expressed as IONT i∗ = {Ci∗ , Pri∗ }.
The FONT includes all IONTs of the domains involved in the considered scenario (our scenario entails the electrical, the telecommunication and the railway domains). The FONT properties (sub-properties of the WONT property
isA) allow to model dependencies among components of diﬀerent domains (e.g. the FONT property feedsTelco models the electrical supply of telecommunication nodes). The sets of the FONT properties and of the FONT instantiated
properties are deﬁned respectively as:
FPr = {sp(a, b) | sp sub-property of isA, a ∈ Ci , b ∈ C j , i
∗

j} and

FPr∗ = {sp(a, b) | sp sub-property of isA, a ∈ Ci∗ , b ∈ C ∗j , i

j}

The FPr allows the deﬁnition of FONT rules that express the dependency semantic. The FONT rules, expressed using
the Semantic Web Rule Language (SWRL), have been actually translated into their JAVA counterpart and implemented
through ”if-then-else” constructs embedded within the Federation Managers which incapsulate the simulators of each
CI domains (Federation Managers are explained in Section 5). As explanatory example, consider the FONT rule which
models the dependency of the functioning status {ON FAULT} of a railway signal (Signalrw ) on the functioning status

2304

A. Tofani et
al. / Procedia Computer Science 1 (2012) 2301–2309
/ Procedia Computer Science 00 (2010) 1–9

4

{ON OFF} of the communication channel (Channeltlc ) used to tele-control the signal. This rule, based on the FONT
property teleControl, is implemented as follows:
if (Channeltlc == OFF) then Signalrw = FAULT
4. Scenario Graph
Using the KBS, it is possible to derive a directed graph G = (V, E) where V is the set of nodes that represent all
the individuals and E is the set of edges that represent all the physical and dependency connections. Considering the
IONT instance IONT i∗ corresponding to domain Xi , we denote with xij the jth individual of the IONT i∗ . The function
to derive the set V of the vertices of G from the KBS is reported in Figure 1.
getGraphVertices
V := ∅
for all IONT i∗ in the KBS do
for all individual j of IONT i∗ do
V := V ∪ xij
end for
end for
j

Figure 1: The getGraphVertices procedure: the individual xi represents the jth component vertex of the IONT instance IONT i∗ .

The set of edges E is partitioned in two subsets P and D (P ∪ D = E, P ∩ D = ∅). The edge (vi , v j ) p ∈ P represents
a physical or logical connection between the components vi and v j of a domain Xi . The edge (vi , v j )d ∈ D represents
the dependency connection between the components vi and v j belonging to diﬀerent IONT instances: for example,
considering the telecommunication domain, an edge (vi , v j ) p may represent a physical link between a router vi and
a workstation v j . On the other hand, if a medium voltage power electric station vi feeds a telecommunication base
station v j , this kind of dependence is represented through an edge (vi , v j )d .
The set of edges E is derived using the deﬁnition of the properties isConnected and isA in the KBS (see Section 3).
The procedures to derive the P and D sets are shown in Figure 2 and Figure 3 respectively. These procedures use the
following deﬁnitions. If S is a property, the predicate S (a, b) is true for all the pairs of individuals (a, b) that satisfy
the property S . Moreover, E(S ) denotes the set of all the individual pairs in E that satisfy S i.e.
E(S ) = {(a, b) | (a, b) ∈ E, S (a, b) ≡ true}
get P GraphEdges
P := ∅
for all sub-properties S n of the properties isConnected do
for all pairs of individuals (a, b) ∈ E(S n ) do
P := P ∪ (a, b) p
end for
end for
Figure 2: The get P GraphEdges procedure.

Finally, given a scenario graph G = (V, E) and the set D of the dependency connections among components of
diﬀerent IONT instances, for each vi ∈ V it is possible to deﬁne the following sets of vertices:

Deﬁnition The set of Source Vertices SV for vi is deﬁned as the set of vertices that are connected to vi through
incoming dependency connections i.e. SV(vi ) = {vk | ∃ (vk , vi )d ∈ D}.

A. Tofani et al.//Procedia
ProcediaComputer
Computer
Science 1 (2012) 2301–2309
Science 00 (2010) 1–9

2305
5

get D GraphEdges
D := ∅
for all sub-properties S n of the properties isA do
for all pairs of individuals (a, b) ∈ E(S n ) do
D := D ∪ (a, b)d
end for
end for
Figure 3: The get D GraphEdges procedure.

Deﬁnition The set of Target Vertices TV for vi is deﬁned as the set of vertices that are connected to vi through outgoing
dependency connections i.e. TV(vi ) = {vk | ∃ (vi , vk )d ∈ D}.
The sets Source and Target Vertices, that are deﬁned considering only the dependency connection edges, are
fundamental to the deﬁnition of particular data structures (described in Section 5) that allow the correct exchange of
information among the diﬀerent CI domains.
5. DIESIS architecture and data structures
The DIESIS federated simulation framework consists of domain simulators, Federated Managers and the Federation Control Module (FCM). Each IONT i deﬁned in the KBS corresponds to a domain simulator that has to be
embodied within a speciﬁc Federation Manager to be compliant with the behaviour deﬁned for the DIESIS federated
simulation environment. The Federation Manager is in charge to interface the speciﬁc domain simulator with the
Federation Managers of the other domain simulators, with the KBS and with the Federated Control Module which
is a centralised component that manages and synchronises a federated simulation session. The synchronisation and
federated simulation management procedures are described in Section 6.
A DIESIS simulation session is formed by a number of domain simulators that have to be federated in order to
obtain a global realistic scenario simulation. The proposed KBS (and the related scenario graph G) plays a central
role in the deﬁnition and setting of this environment.
5.1. Dependency lists
To manage the dependencies among the considered CI domains, suitable data structures for Federation Managers
have been deﬁned. The state of a component in a domain Xi can inﬂuence (in this case it is a source) and/or be inﬂuenced (in this case it is a target) by the state of components belonging to other domains. To force such a dependency
behaviour, the Federation Managers use the Source Dependency List (SDL) and the Target Dependency List (TDL)
data structures. The SDL and TDL data structures are based on the deﬁnitions of Source and Target Vertices of Section
4. The procedures to create the SDL and TDL data structures are described in Figure 4 and in Figure 5.
createSDL(Xi , G)
begin
SDLi := ∅
VXi :=getVerticesOfDomain(Xi )
for all v j ∈ VXi do
for all vk ∈ SV(v j ) do
SDLi :=SDLi ∪ vk
end for
end for
end
Figure 4: The createSDL(Xi , G) procedure.

2306

A. Tofani et
al. / Procedia Computer Science 1 (2012) 2301–2309
/ Procedia Computer Science 00 (2010) 1–9

6

6. Federated simulation controller
6.1. Deﬁnition and tasks
A CI simulator used to represent a particular domain in the federated simulation network is usually a stand-alone
application which uses its own ﬁxed time model as well as a ﬁxed structure of the CI model and works completely
independent from other domain simulators. The federated simulation controller is an adapter which connects a particular CI simulator (a “federate”) to other federation nodes (other simulators or technological components like KBS
and the federation controller module). Its primary task is to manage and synchronise the common simulation time and
event forwarding between the simulators in a network. Furthermore it allows extending the simulator model by additional components if they are needed for the deﬁnition of dependencies between the CIs. Another important property
of the federation simulation controller is the ability to encapsulate and automate any kind of communication required
for the management of a federated simulation. The adapters can communicate directly via TCP/IP as well as via the
additional communication layer which is used for the demonstrator and is described in [15].
createTDL(Xi , G)
begin
TDLi := ∅
VXi :=getVerticesOfDomain(Xi )
for all v j ∈ VXi do
for all vk ∈ TV(v j ) do
TDLi :=TDLi ∪ vk
end for
end for
end
Figure 5: The createTDL(Xi , G) procedure.

Immediately before the federated simulation is started the federation simulation controller receives a list of other
node locations (IP addresses and the application IDs) from the FCM. This allows him to open direct peer-to-peer
connections to other federates during the simulation. Moreover it queries the KBS to load the proper source and target
dependency lists for its domain. Altogether the federation simulation controller disposes of the following important
variables:
1. A node locations list to establish peer-to-peer connections to other federates.
2. A list of local state variables which can be aﬀected by events produced by other federates and has to be synchronised with the simulator’s model elements.
3. A target dependency lists for the simulated domain in order to send the changes of local variables (detected by
monitoring the local variables’ list) to proper dependent domains.
4. A cache for the changed values of foreign state variables and a source dependency list to ensure completeness
of the received information about the external events.
5. A clock for the federation-wide simulation time. This clock has to be synchronised with the internal simulator’s
time as well as with the external common simulation time.
The next section shows how this data is used by a federation simulation controller to manage and synchronise the
simulation time and non-local events.
6.2. Distributed time and event synchronisation
Though the DIESIS architecture concept oﬀers some more ﬂexible alternatives to HLAs concepts e.g. through
the introduction of the lateral coupling and service network concepts [16], the time management of DIESIS, thus far
realised in the scope of the TPoC, is comparable to the conservative time management strategy as deﬁned in HLA
[17], [18]. This concept can however be extended through additional and alternative bridges for a pair- or group-wise
synchronisation. The following section describes the distributed time and event synchronisation as implemented in the

A. Tofani et al.//Procedia
ProcediaComputer
Computer
Science 1 (2012) 2301–2309
Science 00 (2010) 1–9

2307
7

DIESIS TPoC. The concept of the common simulation time is mandatory for the cooperation of diﬀerent simulators
(the “federates”). It ensures the correctness of the event order even if some simulators do not use the time concept for
their internal computations (as it is the case for steady state simulators) and is also required for the visualisation and
analysis.
The federation simulation controller makes the entire node working event based from the point of view of the
federation. To achieve this goal the federation simulation controller has to be able to control the internally used
simulator by making it to perform simulation steps of a pre-deﬁned variable length (a “step” from the point of view
of the federation may require several internal simulation steps or runs) and to pause or stop the local simulation to
wait for external results. For the realisation of such a solution, the requirements of the simulator and its API are: (1)
the adapter should be able to pause or stop the simulation as soon as the given internal simulation time is reached. If
the simulation was stopped (and not paused) the ability to restart the simulation using the previously computed model
state as a new initial state is required, (2) it should be possible to compute a simulation time interval from the current
time point to the next event (or a breakpoint) in the future. Alternatively, a possibility to restore the previous model
state and to restart the simulation using it as an initial state should be supported.
This approach is applicable to a large number of the currently available CI simulators that use various time models
(like the event based model, constant time steps, steady state, etc.) and allows the synchronisation of the controller’s
clock with the simulation time of the internal simulator. A Time Management Module (TMM) is a special federation
node which is used to synchronise the internal clocks of all federation. For the demonstrator the TMM was implemented as an integral part of the federation control module. Each federation node computes its desired value for the
next time step (a time to the next scheduled event) and sends it to the time management module. If no events are
scheduled a node submits a negative value (this denotes that it does not care about the duration of the next simulation
step). As soon as the time management module has collected the suggested time steps from all federates, it chooses the
minimal non-negative value and sends it back to the federates. The federation adapters increase their internal clocks
by this minimal value and are able o perform a globally identical simulation step. Receiving only negative values by
the TMM denotes a global steady state. In this case the simulation can be automatically stopped. This mechanism
forces all federates to have identical simulation clock values at the beginning of the same simulation step.
Figure 6 shows the algorithm of time and event synchronisation for a particular federation node for a domain i.
Here ExternalChanges represents the cache that receives and stores the changes of the external state variables represented in the SDLi (as described in the previous section), SimulationTime is the federation adapter’s clock and NextStep
denotes the duration of the next simulation step. The federation simulation controller checks the ExternalChanges for
new or modiﬁed values of the external state variables. If it detects those modiﬁcations (received in the previous simulation step) it applies the FONT rules for the simulated domain (e. g. computes the eﬀect of these changes to its local
variables). After that, the following two tasks will be performed in parallel:
1. Simulate the time interval given by the previously computed value of NextStep, estimate a new value for it and
report resulting changes of the local variables to the nodes represented in its target dependency list TDLi . If no
model changes were computed, an empty change list will be submitted.
2. Wait for the model change reports from all federation nodes from the SDLi (including the empty change lists)
and store them in the list ExternalChanges.
If some external model changes in a domain from SDLi were received (ExternalChanges is not empty) then this
may require an immediate modiﬁcation of the local state variables. Therefore the value of NextStep will be set to
zero. The last action in the simulation loop is sending the suggestion for the next step to the TMM, receiving the
federation-wide minimal value, and adding it to the internal simulation clock. The simulation loop can be interrupted
at any time if a StopSimulation message from the FCM has been received.
7. Conclusion
In this paper we summarise some of the main results achieved within the DIESIS (Design of an Interoperable
European federated Simulation network for critical InfraStructures) european project. In particular, we describe the
Knowledge Base System (KBS) developed to model Critical Infrastructures (CIs), their interconnections and dependencies and the procedures and data structures deﬁned to implement the federated and distributed simulation of CIs.

2308

A. Tofani et
al. / Procedia Computer Science 1 (2012) 2301–2309
/ Procedia Computer Science 00 (2010) 1–9

8

simulateAndSynchronise
begin
NextStep := 0
SimulationTime := 0
ExternalChanges := ∅
repeat
if ExternalChanges ∅ then
Apply FONT rules for my domain
end if
parallelised do
Perform simulation step of length NextStep
if next event can be scheduled then
NextStep := time to the next scheduled event
else
NextStep := −1
end if
for all dependent domain X represented in my TDL do
Send modiﬁed local state variables or ∅ to the federate X
end for
in parallel to
ExternalChanges := ∅
repeat
Receive external state variable changes ExtVars from other federates
ExternalChanges:=ExternalChanges ∪ ExtVars
until received messages from all domains represented in my SDL
end parallelised
if ExternalChanges ∅ then
NextStep := 0
end if
Send NextStep to the time management module
NextStep := value received from the time management module
SimulationTime := SimulationTime + NextStep
until a StopSimulation message has been received from the FCM
end
Figure 6: The simulateAndSynchronise(Xi , G) procedure.

The KBS is based on the ontological framework and is used to model both the characteristics of each CI and the
interdependencies among the CIs.
The main advances w.r.t. the state of the art in CI interdependencies modelling and simulation approaches are:
(1) the creation of an abstraction of the considered domains to represent and formalise parameters and dependencies
which are relevant for the problems to be investigated, (2) the proposal of a ﬂexible federated simulation framework
supporting the explicit separation of the Scenario Deﬁnition Phase from the Federated Simulation Phase. Indeed, the
proposed federated simulation framework and the KBS have been used in actual federated simulation experiments,
to study the global behaviour of the resulting “System of System” under diﬀerent conditions and constraints (e.g.
parameter variations or changes of the environmental conditions). The proposed approach has been validated using a
realistic scenario that involved three CI domains (electrical, telecommunication and railway) and a ﬂood simulator as
generator of external events. In particular, the select scenario concerned a speciﬁc district of Rome and the population
of the KBS consisted on the instantiation of the IONT components specialised with their actual characteristics. The
electric and telecommunication IONT instances have been populated with realistic data coming from a previous European project [19], whereas the railway IONT has been populated by acquiring public available data and knowledge
about the domain. The proposed KBS template allowed to deﬁne the three CI models (representing the knowledge
about the domains), the related networks (the actual network domains) and the dependencies among them. Moreover,

A. Tofani et al.//Procedia
ProcediaComputer
Computer
Science 1 (2012) 2301–2309
Science 00 (2010) 1–9

2309
9

the proposed simulation framework allowed to eﬀectively federate the domain simulators and it was possible to show
the propagation of the fault eﬀects generated by a ﬂooding of the area where the considered domain networks are
located.
References
[1]
[2]
[3]
[4]

Council Directive 2008/114/EC of 8 December 2008.
Communication from the Commission COM(2006) 786, 2006.
S. M. Rinaldi, J. P. Peerenboom, T. K. Kelly: Critical infrastructure interdependencies, IEEE Control Systems Magazine 21(6), 2001.
E. Luiijf, A. Nieuwenhuijs, M. Klaver, M. van Eeten, E. Cruz: Empirical ﬁndings on critical infrastructure dependencies in europe, CRITIS
Proc., 2008.
[5] DIESIS project website: www.diesis-project.eu.
[6] E. Rome, S. Bologna, E. Gelenbe, E. Luiijf and V. Masucci: DIESIS – Design of an Interoperable European Federated Simulation Network
for Critical Infrastructures, In: Proceedings of the 2009 SISO European Simulation Interoperability Workshop (EURO SIW ’09) – July 13-16,
2008, Istanbul, Turkey, pp. 139–146, SCS, San Diego, CA, USA, 2009.
[7] NISAC website: www.sandia.gov/nisac.
[8] P. Pederson, D. Dudenhoeﬀer, S. Hartley, M. Permann: Critical infrastructure interdependency modeling: A survey of us and critical infrastructure interdependency modeling: A survey of u.s. and international research. Tech. report, Idaho National Laboratory, 2006.
[9] T. Rathnam, C.J.J. Paredis Developing Federation Object Models using Ontologies, Proceedings of the 36th Winter Simulation Conference,
2004.
[10] R.K. McNally, S.W. Lee, D. Yavagal, W.N. Xiang Learning the critical infrastructure interdependencies through an ontology-based information system, Environment and Planning B: Planning and Design, 34, pp. 1103-1124, 2007.
[11] M.W. Maier: Architecting principles for systems-of-systems, Systems Engineering, 1 (4): 267-284, 1999.
[12] J. S. Dahmann, R. M. Fujimoto, R. M. Weatherly: The department of defense High Level Architecture. Proceedings of the 1997 Winter
Simulation Conference.
[13] A. Rubin, C. Hein, G. Prasad: Multi- Simulation Interface (MSI) for Complex Simulations.
[14] B. Perakath, A. Kumar, V. Ajay: Using ontologies for simulation integration. Proceedings of the 2007 Winter Simulation Conference.
[15] G. G¨orbil, E. Gelenbe: Design of a Mobile Agent-Based Adaptive Communication Middleware to Enable Federations of Critical Infrastructure
Simulations, CRITIS Proc., 2008. In: Pre-proceedings of the fourth International Workshop on Critical Information Infrastructures Security
(CRITIS ’09), Erich Rome, Robin Bloomﬁeld (eds.), Sankt Augustin: Fraunhofer IAIS, 2009, pp. 145–160. Conference: Bonn, Germany,
September 30–October 2, 2009.
[16] Public DIESIS deliverable available at: http://www.diesis-project.eu/include/Documents/DIESIS Final Architectural Design.pdf
[17] R.M. Fujimoto, Time Management in the High Level Architecture, SIMULATION Special Issue on High Level Architecture, vol. 71, no. 6,
388-400, 1998.
[18] C. D. Carothers, R. M. Fujimoto, R. M. Weatherly, A. L. Wilson, Design and Implementation of HLA Time Management in the RTI version
F.0, Winter Simulation Conference, December 1997.
[19] IRRIIS project website: www.irriis.org.

