Net’O’Drom–
An Example for the Development of Networked
Immersive VR Applications
Christoph Anthes1 , Alexander Wilhelm2 , Roland Landertshamer1 ,
Helmut Bressler1 , and Jens Volkert1
1

GUP, Institute of Graphics and Parallel Processing
Johannes Kepler University, Altenbergerstraße 69, A-4040 Linz, Austria
canthes@gup.uni-linz.ac.at
2
The Visioneers,
Fabrikstraße 2, A-4020 Linz, Austria
http://www.thevisioneers.com

Abstract. Developing Networked Virtual Environments (NVEs) is a
challenging task. Designers and programmers of such an application can
encounter many pitfalls. For a public event, a night of science, a networked Virtual Reality (VR) application had to be designed and implemented. This paper will describe the technical and conceptual design of
this application - The Net’O’Drom game. Possible pitfalls during the design and implementation of NVEs will be pointed out and suggestions on
how to overcome these issues will be given. A closer look at the problem
areas of physics, network communication and graphical eﬀects is taken.

1

Introduction

Networked graphics applications are becoming more and more common nowadays. If we take a closer look in the area of VR and NVEs, medical visualisations,
safety training and architectural design are just a few application areas, where
the users beneﬁt from interaction in a networked environment. Not only the
area of VR but also the area of multi-player games opens a vast market for
networked graphics applications. The algorithms and distribution mechanisms
between these two areas are very similar, but VR provides additional challenges
like multi-wall displays, diﬀerent interaction techniques and it has tighter constraints considering responsiveness.
This paper gives an overview on the design of a networked graphics application
and takes a racing game as an example. The example of such a game seams to
be ideal, since it consists of the common components usually needed in NVEs.
The description of the components and the overall design of the Net’O’Drom
game should give an idea on how to approach the development of an NVE. It
should not be considred as a generic approach, but rather be an inspiring source
for design ideas. Common issues which arise during the development of such a
VE will be pointed out and suggestions on how to overcome these obstacles will
be given.
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 752–759, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Net’O’Drom– An Example for the Development

753

The following Section examines various design approaches in the ﬁeld of VEs
and NVEs. Afterwards the conceptual design from an artistic point of view
will be given. Section 4 will describe the application design of the Net’O’Drom
game. The next Chapters will focus on the developed physics engine, the network
component and the eﬀects used to enhance immersion and the gaming experience. The ﬁnal Sections conclude the paper and provide an outlook into future
developments.

2

Related Work

In general VR applications can be developed in many ways. Authoring systems
allow experts of a given application domain, which have not much programming
experience to design VEs by using graphical editors. Other systems like DIVE[1],
ALICE[2] or AVANGO1 [3] rely on the use of scripting languages like TCL and
Python. Through the use of graphical interfaces or scripting languages the design
of a VE is more intuitive, but obvious drawbacks are limited ﬂexibility and a
higher need of computational power. Many domain speciﬁc problems have to
be solved by using workarounds. In most cases the applications are tailored
speciﬁcally to fulﬁll the needs of the given problem domain. To avoid complexity
and to allow for more intuitive structuring of a VE scene graphs like Performer
[4] are used.
To allow multiple participants inside a VE, network protocols have to be deﬁned and connection topologies between the diﬀerent participants have to be
chosen. The used communication protocols are closely associated to the underlying topologies. Singhal and Zyda give a detailed introduction into NVE topologies and protocols [5]. A good overview which demonstrates the close connection
between multi-user games and NVEs is given in [6].

3

Conceptual Design

In the Net’O’Drom game two players compete in a virtual race. They drive their
vehicles on a race-track and try to reach the goal before the other player.
3.1

The Principle of Mutual Dependent Interaction

It was expected that users with diﬀerent experience in the area of games and
input devices had to interact with each other. Due to that reason an unfair situation during the game would arise which could decrease the gaming experience. In
a racing game the more experienced player is able to advance much faster than
the inexperienced player, which reduces the aspect of a challenge enormously.
To overcome this problem a game mechanism had to be found which keeps the
players vehicles in spatial proximity.
1

Formerly known as AVOCADO.

754

C. Anthes et al.

Our approach guarantees this mutual interaction by coupling the players’ vehicles with a rubber band mechanism, which keeps the vehicles below a maximal
distance. This mechanism generates interesting tactical game situations, whereas
the faster player is pulling the slower player along. Both players can apply their
acceleration and braking force on the other players’ vehicles by pulling the rubber band together. The gaming idea is easy to understand and increases the
competition between the players. Even close to the end of the race it is still
possible to gain the lead.
3.2

Technical Implementation of 3D Models

Due to performance reasons the 3D models had to be designed using a low
amount of polygons. Materials for the objects can be developed with the use of
photographic references. A distinction between movable, modular objects and
objects of the environment are made. Movable and modular objects (avatars,
vehicles and race track tiles) are textured with a diﬀuse general lighting situation
which is deﬁned through the use of skylights and ambient occlusion shadows.
This type of lighting generates a strong plasticity and emphasises details. It
implements the common light distribution based on the human perception and
is perceived as a balanced light by the observers. For the static objects of the
VE diﬀerent daylight situations were deﬁned for the diﬀerent levels of the game.
The objects, background images and architectures are illuminated similar to the
movable objects to achieve a level of consistency.
To combine the lighting situation with the lighting-neutral materials of the
geometries in common textures a procedure called texture baking is needed.
This process guarantees the quality of pre-rendered image quality in a real time
application.
The rendering process does not take the camera perspective as a basis for
texture calculation, but the UVW-coordinates of the according 3D object. This
produces a polygon-based, object projection of light and material attributes on
a 3D object per polygon. The result is mapped as a self-illuminated texture with
the same UVW coordinates on the given objects. With that mechanism it is
possible to achieve an image quality, which is normally known from rendered
animations and visualisations.

4

Game Architecture

The architecture of the Net’O’Drom NVE consists of a network module, a database module, a physics engine, independent libraries for eﬀects and a highly speciﬁc physics engine. A core module combines the independent parts and manages
the application. It acts as glue between the individual components and contains
the management of events. Graphical output is handled via the scene graph
OpenSG, and audio output is generated via the OpenAL audio library. Figure 1
shows the diﬀerent components and their communication routes. Three diﬀerent
classes of components can be identiﬁed which are shown in diﬀerent shades of

Net’O’Drom– An Example for the Development

755

Fig. 1. Overview of the architecture

grey. On the bottom and the left part of the Figure the external libraries are
shown. The central part is formed of the actual application core and the modules.
In between the application core and the scene graph additional modules which
are used to extend the underlying scene graph functionality are shown. These
additional modules are implemented as scene graph nodes since they represent
graphical eﬀects or non standard geometries which will be explained in detail in
Section 4.4. Multi-threading is highly desirable for various components. The input device component and the network component should be independent from
the rest of the application and should be polled at certain intervals, to avoid
unnecessary waiting times for the application. If physics is used in a VR application it should be performed on a separate processor if available, since physics
calculation is normally a computationally intense task.
4.1

Structuring the VE

When designing a VE several options arise for the organisation of the scene
graph. Ideally nodes should be easy to cull and the structure should be organized
and stored in a manner, that the application designer is able to easily change the
scene layout without changing the hierarchy of the graph or altering the source
code. In our example application the Net’O’Drom racing game proprietary text
ﬁles deﬁne which objects are available in the particular scene and how they
are arranged. A VE as structured in the Net’O’Drom application consists of
tiles, entities and environments. Additionally each player controls a vehicle to
which an avatar and particle systems representing the exhausts of the vehicle
are attached.
One environment represents a region of the race track. The tiles and entities
represent the visible objects in the world. Tiles are used to structure the race
track and can only be arranged on a grid. This approach has been chosen to allow
for an intuitive deﬁnition inside the conﬁguration ﬁles, easy frustum culling and
eﬃcient physics calculation. The entities do not have any direct technical purpose
and are used to create the atmosphere of the VE. They can be arbitrarily placed

756

C. Anthes et al.

Fig. 2. The scene graph of the Net’O’Drom application

inside an environment. An overview of the scene graph of the example application
is given in Figure 2. Organisation of a scene graph should be done in most cases
in a way that the diﬀerent branches of the graph describe certain regions. Ideally
the upper nodes in the graph describe a spatially larger region where their child
nodes are located inside this region. A common mistake is grouping the diﬀerent
nodes based on their logic, e.g. grouping all tiles or all entities in the scene
under one node. Since most scene graph implementations provide optimizations
like frustum culling based on the node hierarchy it is recommended to organize
the scene based on the spatial position of nodes in the environment.
4.2

Physics

A physics engine in the context of computer games and VEs simulates the behaviour of rigid bodies, which comprises the following tasks: rigid body motion,
collision detection and response and constrained interaction of rigid bodies. Typically these calculations are performed in 3D space on simpliﬁed proxy geometries to reduce the needs of computational power. In our sample application we
decided to tailor a highly eﬃcient, problem speciﬁc physics engine. The basic
idea is to perform as much work as possible in 2D. Therefore a heightmap is
calculated based on the surface. In order to perform collision detection in 2D,
obstacles and moving objects on the surface are approximated by 2D primitives.
Heightmap. The heightmap is generated out of a set of geometries which is
considered as surface of the area reachable by the vehicle. The height values are
obtained by performing intersection tests between the surface geometry and rays
going into the direction of gravity. Also the surface normals are kept which are
necessary to determine the orientation of objects on the heightmap in 3D. This
procedure is time consuming but it needs to be performed only when the surface
geometry changes. Queries to the heightmap of the height value or normal for

Net’O’Drom– An Example for the Development

757

a given (x, y) position on the surface are performed by simply interpolating the
values of its neighbours.
A limitation to this approach is that each point on the surface can have exactly
one height value.
Collision Detection. Collision detection aims to determine the intersection of
two objects. Our implementation provides lines and circles as collision primitives.
In the simulation the vehicles are represented by circles and the obstacles on
the surface are approximated by line sets which describe the 2D shapes of the
obstacles. Every possible collision point on the obstacle’s mesh is determined
by simulating the vehicle scratching along the obstacle. The result is a line
set which describes the collision shape of the obstacle in 3D. These lines are
then projected into 2D space for use in the collision detection algorithm. Since
the vehicle is mobile and moves over a non-planar surface its 2D shape can
change over time. To avoid a collision test with changing 2D shapes our collision
detection algorithm considers the orientation of the vehicles. A more detailed
description on this approach can be found in [7].
To allow for eﬃcient physics calculation it is always important to know the
given application domain. Using a standard approach and working with all of
the triangles of the scene will decrease the overall performance enormously. The
representation of the scene should be pre-processed and simpliﬁed in advance as
much as possible to allow for simpliﬁed calculations in the physics component.
4.3

Network

The network module makes a clear distinction between two types of transmission
data, continuous movement data and discrete events. The communication topology is a peer-to-peer (p2p) architecture designed for two users. One client starts
the application as a server and the second client has to connect to this server.
Once this connection is established, both clients work on their fully replicated
copy of data and synchronise the application via messages. For most NVEs we
can identify three diﬀerent types of messages which are used for position update,
scene management and management of the network topology.
The ﬁrst type of messages describes the transformation of the vehicle in the
VE and other physical properties of the vehicles like speed and orientation. To
avoid the additional latencies other than the network delay the updates have to
be transmitted as fast as possible. Therefore the continuous ﬂow of movement
data is distributed via UDP. If the latencies introduced by the network are
already to high it is possible to extrapolate the position of the remote users
representation, in our case the vehicle with the avatar, by using predictive dead
reckoning algorithms.
A second type of messages consists of discrete events which have to be handled
in a reliable manner. Events can be used for many purposes, e.g. to trigger
animations, to trigger sound eﬀects, or to provide reliable information for the
physics engine. These reliable events guarantee a consistent state of an NVE.

758

C. Anthes et al.

Another message type is used to manage the network topology and is mostly
independent from the application. Typical messages which are transmitted could
be joining or leaving of a participant of the VE.
An important issue designing network protocols for NVEs lies in the byte
order, which diﬀers between standard Intel and AMD CPUs and most of the
CPUs used in supercomputers.
4.4

Graphical Eﬀects

Graphical eﬀects are useful to increase the degree of immersion and to attract
users. Particle systems [8] are often used in safety applications to demonstrate the
propagation of smoke or to animate ﬁres and explosions. Flocking [9] algorithms
can be used to create a more dynamic and life-like VE.
In general these eﬀects are not necessary for the simulation of the VE, they
have to be separated from the actual application layer and should be updated
once per frame. Besides their usefulness for enhancing immersion and their ability to create life-like environments these eﬀects have more in common. They can
cause signiﬁcant performance issues when they are used in combination with immersive multi-screen displays. Particle systems emit particles from their core and
update each frame the attributes of the set of emitted particles. These updates
have to be synchronized between the diﬀerent displays. Similar problems arise
with ﬂocking algorithms, where the boids of the ﬂock have to be synchronised
in their position and animation phase. To overcome these probles a collection of
boids or a collection of particles has to be implemented as a single node.
Most of these problems can be avoided by using shared memory architectures
and synchronizing the memory access where the changes of the nodes come into
eﬀect. If the multi-wall display is driven by a cluster system, the distribution of
random seeds and the synchronization of these seeds can be used to synchronize
particle systems and ﬂocking algorithms.

5

Conclusions and Future Work

The actual Net’O’Drom application was demonstrated to the public with great
success on an SGI Onyx with an active stereo Curved Screen was used as output
display. This system was interconnected to a portable Linux driven PC with a
passive stereo powerwall display.
This paper has identiﬁed the necessary core parts for a networked VR application. Suggestions on how to design these components were given with the
example of Net’O’Drom, a networked racing game. Not only technical aspects
like physics or network communication were presented, but also other aspects
like graphical design or eﬀects which are used to increase immersion were introduced. Many pitfalls that can be made during the development of NVEs have
been shown, and suggestions how to maneuver around these obstacles were given.
Core parts of the Net’O’Drom application are being used in a framework for
the design of more generic NVEs - the inVRs framework. An brief overview of

Net’O’Drom– An Example for the Development

759

the inVRs framework is given in [10]. Furthermore this application will be used
as a demonstration application to show the capabilities of the edutain@grid
middleware.

Acknowledgments
We would like to thank all the people from the Johannes Kepler University and
the University of Reading, which helped to implement this application most
notably: Helmut Garstenauer, Martin Garstenauer, Adrian Haﬀegee, Marlene
Hochrieser, Franz Keferb¨
ock, Stephan Reiter, Christian Wressnegger, and Johannes Zarl. The modelling and design of the VE was done by students of the
Kunstuniversit¨
at Linz: Wolfgang Hauer, Clemens Mock, Paul Pammesberger,
Ivan Petrov, Georg-Friedrich Sochurek, Silke Wiesinger and Wolfgang W¨
ogerer.
For additional support for the organization of the public demonstration event
we would like to thank Gerhard Funk, Christa Sommerer, and Friedrich Valach.
The work described in this paper is supported in part by the European Union
through the IST-034601 project ”edutain@grid”.

References
1. Carlsson, C., Hagsand, O.: Dive - a platform for multiuser virtual environments.
Computers and Graphics 17 (1993) 663–669
2. Conway, M.J., Pausch, R., Gossweiler, R., Burnette, T.: Alice: A rapid prototyping
system for building virtual environments. In: ACM Conference on Human Factors
in Computing Systems (CHI ’94). Volume 2., Boston, MA, USA, ACM Press (1994)
295–296
3. Tramberend, H.: Avocado: A distributed virtual reality framework. In: IEEE
Virtual Reality (VR ’99), Houston, TX, USA, IEEE Computer Society (1999)
14–21
4. Rohlf, J., Helman, J.: Iris performer: A high performance multiprocessing toolkit
for real-time3d graphics. In: SIGGRAPH, ACM Press (1994) 381–394
5. Singhal, S.K., Zyda, M.J.: Networked Virtual Environments - Design and Implementation. Addison-Wesley Professional (1999)
6. Smed, J., Kaukoranta, T., Hakonen, H.: A review on networking and multiplayer
computer games. Tucs technical report no 454, Turku Centre for Computer Science
(2002)
7. Bressler, H., Landertshamer, R., Anthes, C., Volkert, J.: An eﬃcient physics engine
for virtual worlds. In: Mediaterra 06. (2006)
8. Reeves, W.T.: Particle systems - a technique for modeling a class of fuzzy objects.
ACM Transactions on Graphics 2 (1983) 93–108
9. Reynolds, C.W.: Flocks, herds, and schools: A distributed behavioral model. Computer Graphics 21 (1987) 25–34
10. Anthes, C., Volkert, J.: invrs - a framework for building interactive networked virtual reality systems. In: International Conference on High Performance Computing
and Communications (HPCC ’06), Munich, Germany, Springer (2006) 894–904

