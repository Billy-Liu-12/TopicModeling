Equivalent Semantic Translation from Parallel DEVS
Models to Time Automata
Shoupeng Han and Kedi Huang
College of Mechaeronics Engineering and Automation,
National University of Defense Technology, 410073, Changsha Hunan, China
hspself@163.com

Abstract. Dynamic reconfigurable simulation based on Discrete Event System
Specification (DEVS) requires efficient verification of simulation models.
Traditional verification method of DEVS model is based on I/O test in which a
DEVS model is regarded as a black box or a grey box. This method is low
efficient and insufficient because input samples are often limited. This paper
proposes a formal method which can translate Parallel DEVS model into a
restrict kind of Timed Automata (TA) with equivalent behaviors. By this
translation, a formal verification problem of Parallel DEVS model can be
changed into the formal verification of according timed automata.
Keywords: Discrete Event System Specification (DEVS), Timed Transition
System (TTS), Semantic Equivalence, Timed Automata (TA).

1 Introduction
One of the intended consequences of utilizing simulations in dynamic, data-driven
application system (DDDAS) [1] is that the simulations will adjust to new data as it
arrives. These adjustments will be difficult because of the unpredictable nature of the
world and because simulations are so carefully tuned to model specific operating
conditions. Accommodating new data may require adapting or replacing numerical
methods, simulation parameters, or the analytical scientific models from which the
simulation is derived. These all require simulation modules in DDDAS to be
dynamically reconfigurable. Furthermore, the substitutions must be verified before
they are injected into the running simulation so that they can behave required
properties. So, how to verify simulation system and simulation component more
efficiently is a critical problem for dynamic reconfigurable simulation. Formal
verification is a kind of method which can search the whole state space in acceptable
time. In contrast to traditional verification method based on I/O test, it has many
advantages, such as the verification process can be automated and the resources are
more limited etc. This paper will propose a formal verification method for models
formalized with discrete event system specification (DEVS) [2] [3] which is a
representative formalism in modeling time varying reactive discrete systems. This
method is based on trace equivalence which can change the verification problem of
DEVS model to the verification of TA [4] with equivalent behaviors.
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 1246 – 1253, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Equivalent Semantic Translation from Parallel DEVS Models to Time Automata

1247

2 Formal Semantic for Parallel DEVS Model
Though Parallel DEVS has a well-defined syntax, its behavior is given as a kind of
abstract simulator informally. In order to verify Parallel DEVS models formally, a
formal behavior semantic of it must be defined at first [5] [6]. In this paper, Timed
Transition System (TTS) is selected as the semantic base of DEVS models’
behaviors.
2.1 Parallel DEVS [2]
Parallel DEVS formalism consists of two parts, atomic and coupled models. An
atomic model is a structure:

M = < X , Y , S , s0 , δ int , δ ext , δ con , λ , ta >

(1)

With

X = {( p, v) | p ∈ IPorts, v ∈ X p } is the set of input events, IPorts is the set of input

ports， and X p is the range of values of port p ;

Y = {( p, v) | p ∈ OPorts, v ∈ Yp } is the set of output events, OPorts is the set of
output ports, and Yp is the range of values of port p ;
S is the set of states, s0 is the initial state;

δ int : S → S is the internal transition function;
δ ext : Q × X b → S is the extern transition function, X b is a set of bags over
elements in X , Q = {( s, e) | s ∈ S , 0 < e < ta( s )} , e is the elapsed time since last state
transition;
δ con : S × X b → S is the confluent transition function, subject to δ con ( s, φ ) = δ int ( s ) ;

ta : S → R0,+ ∞ is the time advance function, R0,+ ∞ refers to nonnegative real value;
Atomic models may be coupled in the DEVS formalism to form a coupled model. A
coupled model tells how to connect several component models together to form a new
model. A coupled model is defined as follows:
N =< X , Y , D,{M i | i ∈ D},{I i },{Z i , j } >

(2)

where,
X is a set of input events;
Y is a set of output events;
D is a set of components names;
For each i in D , M i is a component model; I i is the set of influencees for i;
For each j in I i , Z i , j is the i-to-j output translation function. It includes three
cases: (1) Z i , j : X → X j , if i = N ； (2) Z i , j : Y j → Y , if j = N ； (3) Z i , j : Yi → X j , if
i ≠ N and j ≠ N . Above three functions are also called EIC, EOC and IC。

1248

S. Han and K. Huang

2.2 Timed Transition System (TTS)

A Timed Transition system Tt is represented as a 5-tuple:
Tt =< S , init , Σ, D, T >

(3)

where
S is a possibly infinite set of states;
init is an initial state;
Σ = Act ∪ R0+ is the alphabet, where Act is a set of discrete actions;
x
D is a set of discrete transitions, noted s ⎯⎯
→ s ' , where x ∈ Σ and s, s ' ∈ S ,
asserting that “from state s the system can instantaneously move to state s ' via the
occurrence of the event x ”;
d
T is a set of time-passage transitions, noted s ⎯⎯
→ s ' , where s, s ' ∈ S , asserting
that “from state s the system can move to state s ' during a positive amount of time d in
which no discrete events occur”. Time-passage transition is assumed to satisfy two
axioms:
d
d'
d +d '
Axiom 1: If s ⎯⎯
→ s ' and s ' ⎯⎯
→ s '' , then s ⎯⎯⎯
→ s '' ;
d
Axiom 2: Each time-passage step s ⎯⎯
→ s ' has a trajectory.

A I -trajectory is defined as a
The trajectory used usually is I -trajectory.
function ω : I → S , where I is a closed interval of real value beginning with 0. ω also
d '− d
→ ω (d ') . We
satisfy following property: for ∀d , d ' ∈ I , if d < d ' , then ω (d ) ⎯⎯⎯
often use ω.ltime to represent the supremum of I , ω. fstate to denote the first state

ω (0) in I , and ω.lstate to denote the last state ω (ω.ltime) in I . So, there is a [0, d ] d
trajectory with transition s ⎯⎯
→ s ' , where ω. fstate = s and ω.lstate = s ' .
Timed execution fragment: Given a TTS, its timed execution fragment is a finite
altering sequence γ = ω0 a1ω1a2ω2 anωn , where ωi is a I -trajectory, ai is a discrete

ai +1
event and ωi .lstate ⎯⎯→
ωi +1 . fstate . The length and initial state of γ is noted as

γ .ltime and γ .ltime , where γ .ltime = Σiωi .ltime and γ . fstate = ω0 . fstate . All possible

timed execution fragments of Tt is described as a set execs(Tt ) .

Timed trace: Every timed execution fragment γ = ω0 a1ω1a2ω2 anωn has an
according timed trace noted trace(γ ) , which is defined as an altering sequence
consists of pairs noted (ai , ωi .ltime) , where the orders of ai in trace(γ ) is just the
same as they occur in γ . All possible timed traces of Tt is described as traces(Tt ) .
2.3 Semantic of DEVS Model Based on TTS

Behavior semantic of atomic Parallel DEVS model can be described by timed
execution fragment and time trace. For a Parallel DEVS model defined in equation
(1), its execution fragment is a finite altering sequence γ = ω0 a1ω1a2ω2 anωn which
includes two kinds of transitions:

Equivalent Semantic Translation from Parallel DEVS Models to Time Automata

1249

Time-passage transition: each ωi in γ is a map from interval I i = [0, ti ] to global
state space of D . For ∀j , j ' ∈ I i | j < j ' , if ωi ( j ) = ( s, e) , then ωi ( j ') = ( s, e + j '− j ) .
Discrete event transition: discrete events in parallel can be divided into two
categories: input and output events. According to the execution of DEVS, when they
occur concurrently, output events must be dealt first. As shown in abstract simulator
of DEVS, when an atomic model is going to send output, it will receive a event “ ∗ ”
first, “ ∗ ”event and output event can been seen as a pair because they must be
concatenated simultaneity; if there is no input event when output event occurs, the
component will receive an empty event φ . If ( s, e) = ωi −1 (sup( I i −1 ))
and ( s ', e ') = ωi (inf( I i )) , one of following conditions should be satisfied:
ai = *, e = ta( s ), ( s ', e ') = ( s, e) and λ ( s ) ∈ Y

(3.1)

ai ∈ X , δ ext ( s, e, ai ) = s ', e ' = 0 and e < ta( s)

(3.2)

ai ∈ X , δ con ( s, ai ) = s ', e ' = 0 and e = ta( s)

(3.3)

ai = φ , δ int ( s) = s ', e ' = 0 and e = ta( s)

(3.4)

If two timed systems have the same timed trace set, they have the same timed
behavior set obviously. The behavior semantic of Parallel DEVS model can be
described by a TTS which has the same timed trace set of the DEVS model. For a
DEVS model M = < X , Y , S , s0 , δ int , δ ext , δ con , λ , ta > , there is an translation
noted Tts upon it, which can translate M into a semantic equivalent TTS:

Tts ( M ) =< S M , initM , Σ M , DM , TM >

(4)

with:
SM = QM = {( s, e) | s ∈ S , 0 ≤ e ≤ ta( s)} is the state set, it is equal to the global state
space of M ;
init M = ( s0 , 0) is the initial state;
Σ M = ( X ∪ {φ , ∗}) ∪ Y ∪ R0+ is the alphabet;

DM is the discrete event transition, for ∀x ∈ (( X ∪ {φ }) ∪ Y ) , it is defined as:
x
DM = {( s, e) ⎯⎯
→( s ', 0) | ( s, e) and s ' satisfy the condition described in equation(3)}

TM is the time-passage transition, for ∀d ∈ R0+ , it is defined as:
d
TM = {( s, e) ⎯⎯
→( s, e ') | ( s, e) ∈ QM , e ' = e + d , 0 ≤ e ' ≤ ta( s )}

Obviously, Tts ( M ) has the equivalent semantic with M .

3 Semantic of Coupled Parallel DEVS Model Based on TA
3.1 Timed Automata

A timed automata consists of a finite automata augmented with a finite set of clock
variables, and transitions with clock constraints, additionally the locations can contain
local invariant conditions.

1250

S. Han and K. Huang

For a set of clocks noted X , clock constraint over it is defined by:

ϕ := x ∼ c | x − y ∼ c | ¬ϕ | ϕ1 ∧ ϕ2 , where x and y are clocks in X , c is a
ϕ
ϕ
nonnegative real value integer constant, 1 and 2 are clock constraints. The set of all
constraints over X is noted Φ ( X ) .
+
A clock assignment over a set X of clocks is a function v : X → R0, ∞ , it assign
each clock a real value. If a clock constraint ϕ is true for all clocks under a clock
assignment v , we call v satisfy ϕ , noted v ∈ ϕ . For Y ⊆ X , [Y
t ]v means each
clock x ∈ Y is assigned a value t , while each clock in X − Y satisfy v .
A timed automata is defined as a 6-tuple: A =< L, l0 , Σ, C , I , E > , where L is a
finite set of location; l0 is an initial location; Σ is a finite alphabet; C is a finite set of

clock; I : L → Φ( X ) is a map, it assign each l ∈ L a clock constraint in Φ ( X ) ;

E ⊆ L × Σ × Φ(C ) × 2C × L is a set of transition, < l , a, ϕ , λ , l ' > means a transition from
l to l ' when an action a occurs and ϕ is satisfied by all clocks, λ ⊆ C is the set of
clocks needed to be reset when the transition occurs. < l , a, ϕ , λ , l ' > is also noted
a ,φ , λ
l ⎯⎯⎯
→l ' .
For a timed automata A =< L, l0 , Σ, C , I , E > , its semantic is defined as a TTS:
Tt =< S A , init A , Σ A , DA , TA >
where
S A is a set of state which consists of a pair (l , v ) , where l ∈ L and v ∈ I (l ) ;

init A = (l0 , v0 ) , v0 ∈ I (l0 ) is a clock assignment, and for each x ∈ C , v0 ( x) = 0 ;

Σ A = Σ ∪ R0,+ ∞ is the alphabet;
TA is a set of time-passage transition, for a state (l , v) and a nonnegative real value
d
d ≥ 0 , if each 0 ≤ d ' ≤ d satisfies (v + d ') ∈ I (l ) , then (l , v) ⎯⎯
→(l , v + d ) ;
DA is a set of discrete event transition, for a state (l , v) and a transition
a
< l , a, ϕ , λ , l ' > , if v ∈ ϕ , then (l , v) ⎯⎯
→(l ',[λ

0]v) and [λ

0]v ∈ I (l ') .

3.2 From Atomic Finite DEVS to TA

TA has more expressiveness than DEVS model to model timed systems. In this
section, we will seek to find a translation function Taut which can translate a Parallel
DEVS model M to a trace equivalent TA noted Taut ( M ) . As shown in Fig.1, TTS is
selected as the common semantic base for these two models. Because infinite
DEVS model cannot be formal verified for its infinite global state space, we only
consider finite Parallel DEVS here, the finiteness of DEVS model include two
aspects: first, the number of states is finite; second, the number of external
transitions should be also finite, i.e. each external transition function should be a
finite piecewise function.

Equivalent Semantic Translation from Parallel DEVS Models to Time Automata

1251

Fig. 1. Illustration of semantic equivalence between DEVS model M and its according TA
model Taut ( M ) . TTS model is the middle base for this equivalence.

For an atomic DEVS model M = < X , Y , S , s0 , δ int , δ ext , δ con , λ , ta > , there is
an equivalent semantic translation noted Taut upon it, which can translate a DEVS
model into a semantic equivalent TA (shown in Fig.2):

Taut ( M ) =< LM , l0 ( M ), Σ M , CM , I M , EM >

(5)

with
LM = S is a set of location;

l0 ( M ) = s0 is an initial location;
Σ M = { X ∪ {φ , ∗}} ∪ Y is an alphabet;
CM is a clock set, because there is a time variable e in atomic DEVS model, so
there is also a clock in CM , noted CM = {e} ;
I M : LM → Φ (CM ) is a map, for ∀l ∈ LM , I M (l ) : 0 ≤ e < ta(l ) ;
a ,ϕ ,κ
EM ⊆ LM × Σ M × Φ(CM ) × 2CM × LM is the set of transition, for (l ⎯⎯⎯
→ l ') ∈ EM ,
it includes three cases:

(1) If a = ∗ , then (ϕ : e = ta(l )) ∧ (κ = {}) ∧ (l ' = l )) ;

(6.1)

(2) If a ∈ X , then (ϕ : 0 < e < ta(l )) ∧ (κ = {e}) ∧ (l ' = δ ext ((l , e), a)) or

(6.2)

(ϕ : e = ta(l )) ∧ (κ = {e}) ∧ (l ' = δ con (l , a)) ;
(3) If a = φ , then (ϕ := e = ta(l )) ∧ (κ = {e}) ∧ (l ' = δ int (l )) ;

(6.3)

Fig. 2. Illustration of the translation from DEVS model M to its according TA model Taut ( M ) .
Where “!” refers to output event, “?” refers to received event, “*” refers to an internal event
sent by the coordinator of M , which will be discussed in section3.3.

1252

S. Han and K. Huang

It is easy to find that the semantic of Taut ( M ) is just also the TTS Tts ( M ) defined in
equation (4). Thereby, the semantic of Taut ( M ) is equal to the semantic of M .
3.3 From Coupled DEVS Model to Composition of TAs

Given two TAs A1 =< L1 , l10 , Σ1 , C1 , I1 , E1 > , A2 =< L2 , l20 , Σ 2 , C2 , I 2 , E2 > and two sets
of clock C1 and C2 don’t intersect, the parallel composition of them is a TA
noted A1 || A2 =< L1 × L2 , l10 × l20 , Σ1 ∪ Σ 2 , C1 ∪ C2 , I , E > , where I (l1 , l2 ) = I (l1 ) ∧ I (l2 )
and transition E is defined as follows:
(1) For ∀a ∈ Σ1 ∩ Σ 2 , if transition < l1 , a, ϕ1 , λ1 , l1' > and < l2 , a, ϕ 2 , λ2 , l2' > exist in

E1 , E2 respectively, then < (l1 , l2 ), a, ϕ1 ∧ ϕ 2 , λ1 ∪ λ2 , (l1' , l2' ) > is included in E ;
(2) For ∀a ∈ Σ1 \ Σ 2 , transition < l1 , a, ϕ1 , λ1 , l1' > in E1 and l2 ∈ L2 , transition

< (l1 , l2 ), a, ϕ , λ1 , (l1' , l2 ) > is included in E ;
(3) For ∀a ∈ Σ 2 \ Σ1 , transition < l2 , a, ϕ 2 , λ2 , l2' > in E2 and l1 ∈ L1 , transition

< (l1 , l2 ), a, ϕ 2 , λ1 , (l1 , l2' ) > is included in E ;
The composition of DEVS model is completed by a coordinator, which has the
same interface as an atomic DEVS model and it can also be included in another
coordinator. The communication among DEVS models is a weak synchronization
relationship which is controlled by the coordinator: when time elapsed equal to the
time advancement, state transition of child model must occurs in parallel after all of
them have sent the output. This weak synchronization can be depicted by channels in
TA, where a channel is signed by “?” and “!” event with the same event name. In this
way, the coupled model of a coordinator and its child models have just the same
behavior as parallel composition of TAs (shown in Fig.3.) according with them.

Fig. 3. Illustration of the translation from coordinator of coupled DEVS model to its according
TA model. Where “c” is the coordinator discussed here; “!” refers to output event, “?” refers to
received event, “*parent” refers to an internal event for driven output sent by the parent of the
coordinator; “*” is the internal event for driving output the coordinator send to its child models;
“Xc”, “Yc” refer to input and output event the coordinator interact with outside environment;
“Xi” , “Yi” refers to the input and output events the coordinator send to and receive from its
child models, “Xi”; “eL” is the time of last event; “eN” is the time of next output event
scheduled, function NexteN () refers the function to update the value of eN when transition has
just occurred. In many kinds of TAs (such as TA defined in UPPAAL[7]), global variables are
allowed in TA, so Xi, Yi, Xc, and Yc can all be defined as integer value or integer vectors, which
will improve the efficiency. “eG” is the global virtual time controlled by the root coordinator.

Equivalent Semantic Translation from Parallel DEVS Models to Time Automata

1253

3.4 Semantic of the Whole DEVS Model

A virtual simulation system is a closed system; the execution of the whole simulation
model is controlled by a time management unit which is due to schedule the time
advancement of the whole system. In DEVS based simulation, the time advancement
is managed by a special coordinator named root coordinator, which has no interaction
with outside environment and only be responsible for advancing global virtual time eG
and translating the output of one of its child model to the input of another child
model. It is a reduced coordinator and its according TA is showed in Fig.4.

Fig. 4. Illustration of the translation from root coordinator of the whole DEVS simulation
model to its according TA model. Where “r” refers to the root coordinator discussed here;
“*Root” refers to an internal event for driven output of its child models; “eG” is the global
virtual time; function NexteG () is the function to update the value of eG when a simulation step
has just passed. Internal event between it and its child models noted “Xj” and “Yw” are also be
defined as integer value or integer vectors like Fig.3.

4 Conclusion
Trace equivalence is laid as the basis of the translation from Parallel model to Timed Automata model. This is an observable equivalence because trace can be observed from outside. This kind of equivalence can be used in DEVS component based simulation where
the things we concerned most are not the internal detail of the components but the behaviors of them. Based on this equivalent translation, formal DEVS model verification can
be realized easily using existing model checking methods and tools upon timed automata.

References
1. Darema, F.: Dynamic Data Driven Application systems: A New Paradigm for Application
Simulations and Measurements. Lecture Notes in Computer Science, Vol. 3038. SpringerVerlag, Heidelberg (2004) 662–669
2. Zeigler, B.P., Praehofer, H., Kim, T.G.: Theory of Modeling and Simulation, 2nd edn.
Academic Press, New York (2000)
3. Hu, X., Zeigler, B.P., Mittal, S.: Variable Structure in DEVS Component-Based Modeling
and Simulation. SIMULATION: Transaction of the Society for Modeling and Simulation
International, Vol.81. (2005)91–102
4. Alur, R., Dill, D.L.: A theory of timed automata. Theoretical Computer Science, Vol. 126.
(1994) 183–235
5. Labiche, D.: Towards the Verification and Validation of DEVS Models. In: Proceedings of
the Open International Conference on Modeling & Simulation. (2005)295–305
6. Dacharry, H.P., Giambiasi, N.: Formal Verification with timed automata and DEVS models.
In: Proceedings of sixth Argentine Symposium on Software Engineering. (2005)251–265
7. Larsen, K.G., Pettersson, P.: Uppaal in a Nutshell. Int. Journal on Software Tools for
Technology Transfer, Vol. 1. (1997)134–152

