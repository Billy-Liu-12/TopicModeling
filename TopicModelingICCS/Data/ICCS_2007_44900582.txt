Adaptive Vertical Handoff Management Architecture
Faraz Idris Khan and Eui Nam Huh*
Internet Computing and Security Lab
Department of Computer Engineering, Kyung Hee University, 449-701 Suwon, South Korea
{faraz,johnhuh}@khu.ac.kr

Abstract. The 4G mobile system is a collection of radio networks providing
access to IP based services. It ensures seamless roaming and users are always
connected to the best network providing QoS (Quality of Service) to the end
user. The mechanism of switching to a different network is termed as vertical
handoff. In this paper we propose a vertical handoff management architecture
which ensures efficient utilization of a mobile terminal resource i.e. CPU. This
is achieved by employing feedback mechanism which allocates CPU resource
according to the network load by adapting the CPU scheduler. In the end the
simulation results are presented which are in accord with our idea.
Keywords: feedback scheduling, CPU scheduler adaptation, quality of service,
resource management, vertical handoff.

1 Introduction
The interest in 4G networks is increasing at a rapid pace as wireless networks and
mobile communications are growing at an astonishing rate. It promises to provide a
broader range, lower access costs, the convenience of using a single “all in one” device. This is achieved by overlaying two or more networks with differing characteristics. One of the advantages of such architecture is that it enables applications to maintain QoS (Quality of Service) by switching to a better network. There are two kinds of
vertical handoff situation that might occur, low data rate to high data rate or vice
versa. The application consumption rate should be adaptively adjusted proportional to
the arrival rate of the packets by changing the CPU allocation. In order to provide
undisrupted service to the end user there are various vertical handoff management
architecture proposed in literature [1] which mostly considers content adaptation after
vertical handoff. There is relatively no architecture proposed which consider the impact of vertical handoff on CPU usage. Section 2 discusses briefly the system architecture with our proposed Adaptive CPU scheduling module which is discussed in
section 2.1. Section 3 discusses the simulation results.

2 System Architecture
The architecture is designed with a middleware based approach. The device, application, user, current network profile are stored in a context repository (CR). The decision
*

Corresponding author.

Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 582–585, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Adaptive Vertical Handoff Management Architecture

583

engine (DE) monitors the context cache for triggering the handoff upon detection of
context changes i.e. which can be degradation in QoS due to changes in network characteristics, disconnection from the current network etc. Network Resource Monitoring
Agent (NRMA) monitors the network resources i.e. packet arrival rate. The interaction
among the modules is shown in figure 1. The CPU scheduler adaptation module is
discussed in detail in subsection 2.1.

Fig. 1. System Architecture designed using a middleware based approach

2.1 CPU Scheduler Adaptation Module
A mobile terminal can either move from high data rate to low data rate or low data
rate to high data rate. In case of first scenario the application consumes the data from
the buffer at a faster rate than the arrival rate of the packets. This means that the application is allocated more CPU than needed. In the later case the buffer will fill up at
a rate faster than the application consumption rate. The monitoring is done after an
interval t which we call an epoch. An optimal point q is defined in a buffer which is
achieved by dynamically changing the CPU allocation C P U a llo c proportional to the
arrival rate of the packets.
We define two parameters buffer fill level and proportional change to implement
CPU scheduler adaptation module.
Buffer fill level: The buffer fill level q(t) at time t is given by the formula
q(t) = C u r r e n t b u f f e r s i z e a t t i m e t
T o ta l b u ffe r s iz e

(1)

Proportional change: Let us represent the arrival rate of the packets in the current
and the arrival rate of the packets in the previous epoch
epoch as λ
cu rren t

as λ previous . Then proportional change p(t) at time t is given by the formula
p(t) = λ
λ

cu rren t
p r e v io u s

The algorithm for CPU scheduler adaptation module is given in Figure 2.

(2)

584

F.I. Khan and E.N. Huh

λ previous = updateArrivalRate()

//Get initial arrival rate of the packets

for ever do

λ

= updateArrivalRate()

current

p(t) =

//Calculate proportional change

If (p(t) < q or p(t) > q)

C P U alloc
End if

λ

//Get current arrival rate of the packets

λ current
λ p r e v io u s

p r e v io u s

= λ

//Check current buffer level
=

CPU

a l lo c

* p(t)

//Proportionally allocate CPU resource

cu rrent

End for

Fig. 2. CPU Scheduling Adaptation Logic

3 Simulation
The simulation considers the following vertical handoff scenarios
•
•

Switching from low data rate network to high data rate network
Switching from high data rate network to low data rate network

We simulated our idea in Discrete Event Simulation using C++. For our simulation
we have considered the optimal buffer size of 100 packets. Table 1 shows the parameters that we have chosen to simulate the vertical handoff situation.
3.1 Low Data Rate Network to High Data Rate Network
When a mobile terminal switches to a network of high data rate the queue length will
increase with the passage of time due to increase in arrival rate of the packets. From
Figure 3 it is evident that the buffer size remains optimal during vertical handoff scenario and interestingly the average waiting time experienced by the packet also converges as shown in Figure 3.
Average Queue Length
160

140

140

With CPU Scheduler
Adaptation 0.75
With CPU Scheduler
Adaptation 0.5
With Out CPU Scheduler
Adaptation

120
100
80
60
40
20
0

Averag e W aitin g Tim e
(sec)

Average Queue Length
(packets)

Average Waiting Time
160

120

With CP U Scheduler
A daptation 0.75

100
80

With CP U Scheduler
A daptation 0.5

60

With Out CPU Scheduler
A daptation

40
20
0

1 31 61 91 121 151 181 211 241 271 301 331
Simulation Time (sec)

1 28 55 82 109 136 163 190 217 244 271 298 325
Simulation Time (sec)

Fig. 3. Left side shows average queue length and right side shows average waiting time (Vertical handoff from low data rate to high data rate network)

Adaptive Vertical Handoff Management Architecture

585

3.2 High Data Rate Network to Low Data Rate Network
In case of moving to a network with low data rate the queue size will decrease which
is shown in figure 4. The standard deviation from the optimal point with out CPU
scheduling adaptation is 40 and with CPU scheduler adaptation the standard deviation
is 15.3 and 18 for a proportional change of 0.75 and 0.50 respectively. The graph on
the right hand side of Figure 4 shows the average waiting time of the packets in the
queue in this scenerio.
Average Waiting Time

With CPU Scheduler
A daptation 0.75

k

With CPU Scheduler
A daptation 0.5
With Out CPU Scheduler
A daptation

1

30 59 88 117 146 175 204 233 262 291 320
Simulation Time (sec)

Average Waiting Time
(sec)

A verag e Q u eu e L en g t h
(p ack ets)

Average Queue Length
180
160
140
120
100
80
60
40
20
0

160
140
120
100
80
60
40
20
0

With CPU Scheduler
A daptatio n 0.75
With CPU Scheduler
A daptatio n 0.50
With Out CPU
Scheduler Adaptation

1

36 71 106 141 176 211 246 281 316
Simulation Time (sec)

Fig. 4. Left side shows average queue length and right side shows average waiting time (Vertical handoff from high data rate to low data rate network)
Acknowledgements. This research was supported by MIC (Ministry of Information and

Communication), Korea, under ITRC (Information Technology Research Center)
support program supervised by the IITA (Institute of Information Technology Advancement). (IITA-2006-C1090-0603-0040).

Reference
1. Helal, S., Lee, C., Zhang, Y.G., Richard III, G.G.: An Architecture for Wireless LAN/WAN
Integration. Wireless Communication and Networking Conference Vol. 3. IEEE, Chicago
(2000) 1035-1041

