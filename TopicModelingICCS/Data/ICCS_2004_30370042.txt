Numerical Continuation of Branch Points of
Limit Cycles in MATCONT
Annick Dhooge1 , Willy Govaerts1 , and Yuri A. Kuznetsov2
1

Department of Applied Mathematics and Computer Science, Gent University,
Krijgslaan 281-S9,B-9000 Gent, Belgium
{Annick.Dhooge,Willy.Govaerts}@UGent.be
2
Mathematical Institute, Utrecht University,
Budapestlaan 6, 3584 CD Utrecht, The Netherlands
Yu.Kuznetsov@math.uu.nl

Abstract. matcont is a matlab continuation package for the interactive numerical study of a range of parameterized nonlinear problems.
We discuss a recent addition to the package, namely the continuation of
branch points of limit cycles in three parameters which is not available
in any other package. This includes the exact location of the BPC points
and branch switching. The algorithm is important in the numerical study
of symmetry and we illustrate it in the case of the famous Lorenz model
for the atmospheric circulation.

1

Introduction

Numerical continuation is a technique to compute a sequence of points which
approximate a branch of solutions to F (x) = 0 where F : IRN +1 → IRN .
In particular, we consider a dynamical system of the form
dx
= f (x, α)
dt

(1)

with x ∈ IRn , f (x, α) ∈ IRn , and α a vector of parameters. In this setting
equilibria, limit points, limit cycles etcetera can be computed.
matcont provides a continuation toolbox for (1) which is compatible with
the standard matlab representation of ODEs. The package is freely available
at: http://allserv.UGent.be/˜ajdhooge/research.html. It requires matlab 6.*. In [4] we describe the implementation in matcont of the continuation
of the Fold bifurcation of limit cycles, using a minimal extended system, i.e.
we only append a scalar equation to the deﬁnition of limit cycles [6]. Here we
discuss the continuation in three parameters of branch points of limit cycles, an
algorithm which is not available in any other package. For general background
on dynamical systems we refer to [8,9]; for the algorithms that involve BPC we
refer to [7].
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 42–49, 2004.
c Springer-Verlag Berlin Heidelberg 2004

Numerical Continuation of Branch Points of Limit Cycles in MATCONT

2
2.1

43

Mathematical Background on Limit Cycles and Their
Branch Points
Limit Cycles and Their Branch Points

A limit cycle is an isolated closed orbit that corresponds to a periodic solution
of (1) with period T , i.e. x(0) = x(T ). Since T is not known in advance, it is
customary (cf auto [5], content [10]) to use an equivalent system deﬁned on
the unit interval [0, 1] by rescaling time:
dx
− T f (x, α) = 0,
dt
x(0) = x(1).

(2)

To obtain a unique solution the following integral constraint is often used [5,10]:
1

x(t), x˙ old (t) dt = 0,

(3)

0

where x˙ old (t) is the derivative vector of a previously calculated limit cycle and
is therefore known, x, v is just a diﬀerent notation for xT v. The left-hand side
of (3) will be sometimes denoted by Intx˙ old (x).
If, say, α1 is the control parameter in (1) then a branch point of limit cycles
(BPC) is a solution to (2)–(3) in (x(t), T, α1 )-space where the null space of the
derivative operator of (2)–(3) with respect to x(t), T, α1 has dimension greater
than one. Generically, it then has a two-dimensional null space and the solution
to (2)–(3) has two intersecting branches in (x(t), T, α1 )-space. The complete
BVP deﬁning a BPC point using the minimal extended system is
 dx
=0

dt − T f (x, α)

 x(0)
− x(1)
=0
(4)
1

x(t), x˙ old (t) dt = 0

 0
G[x, T, α]
=0
where G = (G1T G2T )T is deﬁned by requiring


 11 21 
00
v v


 v 12 v 22   0 0 


.
0
0
=
L

 v 13 v 23  


1
0
1
2
G G
01
Here v 1k and v 2k are vector functions, G1 and G2 are scalars and


D − T fx (x(·), α)
− f (x(·), α)
− T fα1 (x(·), α) w01

δ1 − δ0
0
0
w02 



Intx˙ old (·)
0
0
w03 
L=


v011
v012
v013
0 
v022
v023
0
v021

(5)

(6)

44

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

where the bordering operators v011 , v021 , function w01 , vector w02 and scalars
v012 , v022 , v013 , v023 and w03 are chosen so that L is nonsingular [6,7]. To interpret (6) correctly, note that δa v = v(a). The deﬁning system composed of (5)
and (6) can be used to continue the BPC in three control parameters.

3

Numerical Continuation of Limit Cycles

For the numerical continuation of a limit cycle with respect to a control parameter we discretize the system consisting of (2) and (3); to use a Newton-like
method the Jacobi matrix of the discretized system is also needed. We exploit
the sparsity by using the matlab routines for sparse matrices.
Using the orthogonal collocation described, for example, in [4] we obtain the
discretized BVP (2)–(3) in the form:




m
j=0




xi,j li,j (ζi,k ) − T f (

N −1
i=0

m−1
j=0

σi,j xi,j , x˙ i,j
old

m
j=0

xi,j li,j (ζi,k ), α) = 0
x0,0 − xN −1,m = 0
+ σN,0 xN,0 , x˙ N,0
old = 0

The ﬁrst equation in fact consists of N m equations, one for each combination of
i = 0, 1, 2, ..., N − 1 and k = 1, 2, ..., m.
In the Newton iterations during the continuation process a system consisting
of theJacobi matrix and an extra row (the tangent vector) is solved. For N = 3
test intervals, m = 2 collocation points and dim(x) = 2 this matrix has the
following sparsity structure (•’s are generically non-zero). This is explained in
more detail in [4].


x0,0
•
•
•
•

























 •

 •

 •
•

x0,1
• •
• •
• •
• •

•
•
•
•

x1,0
• •
• •
• •
• •
•
•
•
•

•
•
•
•
•
•
•
•

x1,1

•
•
•
•

x2,0

•
•
•
•

•
•
•
•
•
•
•
•

x2,1

•
•
•
•
•
•
•
•

•
•
•
•

x3,0

•
•
•
•

•
•
•
•
•
•
• • • • • • • • • • •
• • • • • • • • • • •


α1
• 

• 

• 

• 

• 

• 

• 

• 
.
•
• 

•
• 

•
• 

•
• 


•


•

• • • 
• • •
T
•
•
•
•
•
•
•
•
•
•
•
•

(7)

Numerical Continuation of Branch Points of Limit Cycles in MATCONT

4

45

Continuation of BPC Cycles

4.1

Discretization of the BPC Equations

The last equation in (4) expresses that the operator


D − T fx (x(·), α) − f (x(·), α) − T fα1 (x(·), α)


δ1 − δ 0
0
0
Intx˙ old (·)
0
0

(8)

that appears as a block in (6) is rank deﬁcient. In the numerical implementation in matcont and cl matcont we replace this by the condition that the
discretized operator of (8) is rank deﬁcient: G1d = G2d = 0. To ﬁnd Gid , we solve


 11 21 
00
vd vd


 12 22   0 0 
d  vd vd 

0
0
L  13 23  = 
(9)


vd vd


1
0
G1d G2d
01
where Ld =


[ D − T fx (x(·), α) ]d
 Idim(x) 0n×(N m−1)dim(x) − Idim(x)

Int[x˙ old (·)]d

11T

v0d
21T
v0d

[−f (x(·), α)]d
0
0
12
v0d
22
v0d

[−T fα1 (x(·), α)]d
0
0
13
v0d
23
v0d



1
w0d
2
w0d

3 
w0d
,
0 
0
(10)

11 21
1
2
12 22 13 23
where the bordering vectors v0d
, v0d , w0d
and w0d
and scalars v0d
, v0d , v0d , v0d
3
d
and w0d are chosen so that L is nonsingular. The structure is similar to that of
(7); however, the bordering rows and columns have a diﬀerent meaning.
To continue a solution branch of the discretized equations (4), the Jacobi
matrix of the system is needed, which means that the derivatives of Gd with
respect to the unknowns of the system, i.e., with respect to xi,j , T , and the
control parameters α, have to be calculated.
The derivative with respect to z (being a component of xi,j , T or α) is obtained from


 11 21 
 11 21 
00
vdz vdz
vd vd


 12 22 
 v 12 v 22   0 0 
d  vdz vdz 
d
d  = 0 0.
L  13 23  + Jz 

 vd13 vd23  
vdz vdz
0 0
1
2
1
2
Gdz Gdz
Gd Gd
00

Simplifying gives



11
vdz
 v 12
dz
Ld 
13
 vdz
G1dz




J1 J2
21
vdz
0 0
22 


vdz


0
23  =  0
.
vdz
0 0
2
Gdz
0 0

46

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

where Ji = [T fx (x(t), α]dz vdi1 + [f (x(t), α)]dz vdi2 + [T fα1 (x(t), α]dz vdi3 , i = 1, 2.
Instead of solving this for every z we solve the transposed equations
(wd1T , wd2T , wd3 , wd4 , wd5 )Ld = (0, 0, 0, 1)

(11)

where wd1 is a dim(x) × N m vector, wd2 a dim(x) vector and wd3 , wd4 and wd5 are
scalars. Combining (9) and (11) we ﬁnd
Gidz = wd1T ([T fx (x(t), α]dz vdi1 + [f (x(t), α)]dz vdi2 + T fα1 (x(t), α]dz vdi3 ).

(12)

So in each iteration step we solve three systems with the structure of (7) or
its transpose.
4.2

Initialization and Adaptation of the Borders

The bordering vectors in (10) must be such that the matrix Ld is nonsingular.
We choose them in such a way that Ld is as well conditioned as possible. This
involves an initialization of the borders when the continuation is started and a
subsequent adaptation during the continuation.
During the initialization the borders must be chosen so that the extension
Ld of O =


[−f (x(·), α)]d [−T fα1 (x(·), α)]d
[ D − T fx (x(·), α) ]d

 Idim(x) 0dim(x)×(N m−1)dim(x) − Idim(x)
0
0
0
0
Intf (x(·),α)d
has full rank. We ﬁrst perform an QR orthogonal-triangular decomposition with
column pivoting. The matlab command [Q, R, E] = QR(f ull(O)) produces a
permutation matrix E, an upper triangular matrix R of the same dimension as
O and an unitary matrix Q so that OE = QR. The column pivoting guarantees
that the QR decomposition is rank revealing and in particular that abs(diag(R))
is decreasing. Since O has rank defect 1, the last element on the diagonal and the
bottom right element of R should be zero (up to approximation). The borders
11T 12 13
21T 22 23
[v0d
v0d v0d ] and [v0d
v0d v0d ] in (10) are chosen as an orthogonal base for the
null space of O. If p is a two-column matrix that spans this null space, then from
Op = 0 follows that RE T p = 0. Setting the bottom right element and the last
element on the diagonal of R to zero, we obtain




∗ ∗ ∗ ... ∗ ∗ ∗
0 ∗ ∗ ... ∗ ∗ ∗






0 0 ∗ ... ∗ ∗ ∗ T
0 0

E p = 




... ∗
...




0 0 0 ... ∗ ∗ ∗


0 0 0 ... 0 0 0
00
By imposing some structure on E T p we get






 p1 p2 
 R 1 b1 b2  
 0 0


.
=
 



1 0 
0 0 0
00
0 1

Numerical Continuation of Branch Points of Limit Cycles in MATCONT

47

or
R1 (p1 p2 ) = −(b1 b2 )
11T 12 13
where R1 is a nonsingular square upper triangular matrix. So [v0d
v0d v0d ] and
21T 22 23
[v0d v0d v0d ] in (10) are initially chosen as the normalization and orthogonalization of E[(R1 \[−b1 , −b2 ]); eye(2)] where eye(2) is the 2-by-2 identity matrix. We
1T 2T 3 T
choose this column as the bordering column [w0d
w0d w0d ] in (10). This choice
of the borders in (10) makes the bordered matrix nonsingular.
11T 12 13
21T 22 23
The borders [v0d
v0d v0d ] and [v0d
v0d v0d ] are adapted by replacing them
by the normalized and orthogonalized [vd11T vd12 vd13 ] and [vd21T vd22 vd23 ] in (9). The
1
2
3
borders w0d
in (10) are adapted by solving the transposed equations
, w0d
and w0d
and replacing them respectively by the normalized and orthogonalized wd1 , wd2
and wd3 in (11).

5

BPC Cycles on a Curve of Limit Cycles

Generically, i.e. if no symmetry is present, then BPC are not expected on curves
of limit cycles. However, they are common if the system has symmetry. The
location and processing of BPC in that case requires a special treatment.
5.1

Branch Point Locator

Location of BPC points in as zeros of some test functions causes numerical
diﬃculties because no local quadratic convergence can be guaranteed (see [3] in
the case of equilibria). This diﬃculty is avoided by introducing an additional
unknown β ∈ IR and considering the minimally extended system:
 dx
=0

dt − T f (x, α) + βp1

 x(0)
− x(1) + βp2
=0
(13)
1

x(t), x˙ old (t) dt + βp3 = 0

 0
G[x, T, α]
=0
T
T
is the bordering vector
where G is deﬁned as in (5) and [pT
1 p2 p3 ]
1T
2T
3 T
[w0d ; w0d ; w0d ] in (10) calculated as in §4.2. We solve this system with respect to x, T, α1 and β by Newton’s method with initial β = 0. A branch point
(x, T, α1 ) corresponds to a regular solution (x, T, α1 , 0) of system (13) (see [1],
p. 165).

5.2

Processing of the BPC

2
The tangent vector v1st at the BPC singularity is approximated as v1st = v1 +v
2
where v1 is the tangent vector in the continuation point previous to the BPC
and v2 is the one in the next point. To start the continuation of the secondary
cycle branch passing through the BPC point, we need an approximation of the
tangent vector of the secondary branch. We choose the vector which is in the
space spanned by p = [p1 p2 ] obtained in §4.2 as an orthogonal base for the null
space of O and orthogonal to the tangent vector to the primary branch.

48

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

500

400

450
350

LPC
NS
BPC
400

300

z

z

350

300
250

BPC
NS
250

200
200

150

−60

−40

−20

0
x

20

40

150

60

−60

−40

−20

0
x

20

40

60

(b) Continuation of
asymmetric limit cycle

(a) Continuation of
symmetric limit cycle
Fig. 1.

800

16

700

15

600
14

z

sigma

500

13

400
12

300
11

200

−80

−60

−40

−20

0
x

20

40

60

10
300

80

350

400

450

500

550

600

650

700

750

r

(b) Continuation of
BPC curve in (r,σ)-space.

(a) Continuation of
BPC curve in phase space.
Fig. 2.

6

An Example

Consider the Lorenz model [11] where x, y and z are state variables and r, σ and
b are parameters:

 x˙ = σ(−x + y)
y˙ = rx − y − xz
(14)

z˙ = −bz + xy.
This problem satisﬁes the equivariance relation with respect to a group of
two transformations, i.e. {I3 , S}, where S = Diag(−1, −1, 1). As in the Tutorial
to content[10], we compute an orbit starting from the point (0, 50, 600) at
σ = 10, r = 400 and b = 83 and start a limit cycle continuation with respect
to the control parameter r from the converged closed orbit. This is clearly a
branch of S-symmetric periodic solutions of (14), see Fig. 1(a). We detect a
BPC at r = 312.9735 . . .. We continue in r the secondary cycle branch passing
through the BPC point. From Fig. 1(b) it is clear that for the secondary cycle
the S-symmetry is broken. To compute the branch of BPC points with respect
to r through the BPC point with control parameters r, σ we need to introduce

Numerical Continuation of Branch Points of Limit Cycles in MATCONT

49

an additional free parameter that breaks the symmetry. We choose to introduce
a parameter and extend the system (14) by simply adding the term to the
right-hand side of the ﬁrst equation in (14). For = 0 this reduces to (14)
while for = 0 the symmetry is broken. Using the code for the continuation of
generic BPC points with three free parameters r, σ, we continue the curve of
non-generic BPC points, where remains close to zero (1e − 8). The picture in
Fig. 2 clearly shows that the symmetry is preserved.

References
1. Beyn, W.J., Champneys, A.R., Doedel, E., Govaerts, W., Kuznetsov, Yu.A., Sandstede, B.: Numerical continuation and computation of normal forms. In: B. Fiedler,
ed. “Handbook of Dynamical Systems, Vol 2”, Elsevier 2002, 149–219.
2. Dhooge, A., Govaerts, W., Kuznetsov Yu.A.: matcont: A matlab package for
numerical bifurcation analysis of ODEs, ACM TOMS 29(2) (2003), 141–164.
3. Dhooge, A., Govaerts, W., Kuznetsov, Yu.A., Mestrom, W., Riet, A.M. : A Continuation Toolbox in matlab, Manual (2003):
http://allserv.UGent.be/ ˜ajdhooge/doc_cl_matcont.zip
4. Dhooge, A., Govaerts, W., Kuznetsov, Yu.A.: Numerical continuation of fold bifurcations of limit cycles in matcont, Proceedings of the ICCS 2003, Part I. Springer
Verlag Lecture Notes in Computer Science, Vol. 2657 (May 2003) (eds. P.M.A.
Sloot, D. Abramson, A.V. Bogdanov, J.J. Dongarra, A.Y. Zomaya and Y.E. Gorbachev), 701–710.
5. Doedel, E.J., Champneys, A.R., Fairgrieve, T.F., Kuznetsov, Yu.A., Sandstede, B.,
Wang, X.J., auto97-auto2000 : Continuation and Bifurcation Software for Ordinary Diﬀerential Equations (with HomCont), User’s Guide, Concordia University,
Montreal, Canada (1997–2000): http://indy.cs.concordia.ca.
6. Doedel, E.J., Govaerts W., Kuznetsov, Yu.A.: Computation of periodic solution
bifurcations in ODEs using bordered systems, SIAM J. Numer. Anal. 41(2) (2003),
401–435.
7. Doedel, E.J., Govaerts, W., Kuznetsov, Yu.A., Dhooge A.: Numerical continuation
of branch points of equilibria and periodic orbits, Preprint 1280, Department of
Mathematics, Utrecht University, The Netherlands (2003)
8. Govaerts, W.: Numerical Methods for Bifurcations of Dynamical Equilibria, SIAM,
Philadelphia (2000).
9. Kuznetsov, Yu.A.: Elements of Applied Bifurcation Theory, 2nd edition, SpringerVerlag, New York (1998)
10. Kuznetsov, Yu.A., Levitin, V.V.: content: Integrated Environment for Analysis
of Dynamical Systems. CWI, Amsterdam (1997): ftp://ftp.cwi.nl/pub/CONTENT
11. Lorenz, E.: Deterministic non-periodic ﬂow, J. Atmos. Science 20 (1963), 130–141.

