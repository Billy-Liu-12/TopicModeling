Eﬃcient Password-Authenticated Key Exchange
for Three-Party Secure Against Undetectable
On-Line Dictionary Attacks
Jeong Ok Kwon1,2 , Kouichi Sakurai1 , and Dong Hoon Lee2
1

2

Department of Computer Science and Communication Engineering,
Kyushu University, Japan
pitapat@cist.korea.ac.kr, sakurai@csce.kyushu-u.ac.jp
Center for Information Security Technologies (CIST), Korea University, Korea
donghlee@korea.ac.kr

Abstract. A password-authenticated key exchange (PAKE) protocol
in the three-party setting allows two users communicating over a public
network to agree on a common session key by the help of a server. In the
setting the users do not share a password between themselves, but only
with the server. In this paper, we explore the possibility of designing
a round-eﬃcient three-party PAKE protocol with a method to protect
against undetectable on-line dictionary attacks without using the random oracle. The protocol matches the most eﬃcient three-party PAKE
protocol secure against undetectable on-line dictionary attacks among
those found in the literature while providing the same level of security.
Finally, we indentify the relations between detectable on-line and undetectable on-line dictionary attacks by providing counter-examples to
support the observed relations1 .
Keywords: Cryptography, password-authenticated key exchange, dictionary attacks, round complexity, mobile network security.

1

Protocols for PAKE in the Three-Party Setting

We now present our two protocols 3PAKE1 and 3PAKE1 for PAKE in the
three-party setting. 3PAKE1 is designated to protect passwords from detectable
on-line and oﬀ-line dictionary attacks and is explicit authentication. 3PAKE2 is
designated to enhance 3PAKE1 against undetectable on-line dictionary attacks
in addition to detectable on-line and oﬀ-line dictionary attacks, yet still requires
four rounds and is implicit authentication. In this paper, we assume the parties
can transmit messages simultaneously.

1

This work was done while the ﬁrst author visits in Kyushu Univ. and was supported
by the Ministry of Information & Communications, Korea, under the Information
Technology Research Center (ITRC) Support Program.
This is a very partial version of the full paper available at http://
cist.korea.ac.kr/pitapat/JeongOkKwonTriS.ps

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 977–980, 2006.
c Springer-Verlag Berlin Heidelberg 2006

978

J.O. Kwon, K. Sakurai, and D.H. Lee

3PAKE1

Public information. Two primes p, q such that p = 2q + 1, where p is a safe prime
such that the decision Diﬃe-Hellman problem is hard to solve in G. A ﬁnite cyclic
group G has order q, and g1 ,g2 are generators of G both having order q, where g1 and
g2 must be generated so that their discrete logarithmic relation cannot be known.
A hash function H from {0, 1}∗ to {0, 1}l . A message authentication code (MAC),
Mac = (Mac.gen, Mac.ver). Given a random key k, Mac.gen computes a tag τ for a
message M ; we write this as τ = Mac.genk (M ). Mac.ver veriﬁes the message-tag pair
using the (shared) key, and returns 1 if the tag is valid or 0 otherwise. F is a pseudo
random function family.
Initialization. Each user Ui for i ∈ {1, 2} obtains pwi at the start of the protocol
using a password generation algorithm PG(1k ) which on input a security parameter
1k outputs a password pwi uniformly distributed in a password space password. Then
H(U ||S||pwi )
H(U ||S||pwi )
mod p and vi,2 = g2 i
mod p which are veriﬁers
Ui sends vi,1 = g1 i
of the password to the server S over a secure channel. Upon receiving the veriﬁers, S
stores them in a password ﬁle with an entry for Ui . The indices are cyclic, i.e., Un+1
is U1 , where n = 2.
Round 1. An initiator Ui for i = 1 broadcasts (Ui , Ui+1 , S).
Round 2. Each user Ui chooses a random number xi ∈ Z∗q , computes Xi,S = g1xi ·
vi,2 mod p, and sends (Ui ,Xi,S ) to the server.
Round 3. Upon receiving (Ui ,Xi,S ), S selects a random number s ∈ Z∗q and computes
XS,i = (Xi+1,S /vi+1,2 )s · vi,2 mod p, and sends (S,XS,i ) to each user Ui for i = {1, 2}.
Round 4. Upon receiving (S,XS,i ), each user Ui computes ki = (XS,i /vi,2 )xi mod p
and τi = Mac.genki (Ui Ui+1 S) and sends (Ui , τi ) to Ui+1 .
Key computation. Upon receiving (Ui , τi ), each user Ui+1 computes
Mac.ver ki+1 (τi ). Each user Ui+1 halts if Mac.ver returns 0 or computes the
session key ski+1 = Fki+1 (U1 S U2 ) otherwise.

Remark. We have observed that the relations between detectable and undetectable on-line dictionary attacks. This is, the security against detectable on-line
dictionary attacks does not necessarily imply the security undetectable on-line
dictionary attacks and vice versa. To support the observed relations we consider
counter-examples presented in this paper. For the ﬁrst relation, consider our
ﬁrst protocol 3PAKE1. 3PAKE1 is secure against detectable on-line dictionary
attacks but it is insecure against undetectable on-line dictionary attacks. For the
second relation, consider our second protocol 3PAKE2. We can modify 3PAKE2
to secure against undetectable on-line dictionary attacks but to insecure against
detectable on-line dictionary attacks. If the MAC veriﬁcation between each user
and the server is removed in Round 4 of 3PAKE2, the protocol does not secure against on-line dictionary attacks anymore because the users cannot detect
and log the failed guesses. Therefore we must independently consider the both
attacks and provide methods to resistant to both attacks when design secure
protocol for 3-party PAKE.

Eﬃcient PAKE

979

3PAKE2

Same as 3PAKE1 except the following points.
Round 2. Each user Ui chooses a random number xi ∈ Z∗q , computes
Xi,S = g1xi · vi,2 mod p, and sends (Ui ,Xi,S ) to the server S. For i = {1, 2},
S chooses random numbers yi ∈ Z∗q , computes XS,i = g1yi · vi,2 mod p, and sends
(S,XS,i ).
Round 3. Upon receiving (S,XS,i ), each user Ui computes ki,S = (XS,i /vi,2 )xi mod p
and τi,S = Mac.genki,S (Ui ||S||Xi,S ||XS,i ) and sends (Ui , τi,S ) to S.
Round 4. Upon receiving (Ui , τi,S ), S computes Mac.verkS,i (τi,S ) where
kS,i = (Xi,S /vi,2 )yi mod p for i = {1, 2}. S halts if at least one of Mac.verkS,i returns
0 or proceeds to the next process otherwise. S selects a random number s ∈ Z∗q ,
x
and computes YS,i = (g1 i+1 )s and τS,i = Mac.genkS,i (Ui ||Ui+1 ||YS,i ) and sends
(S,YS,i ,τS,i ) to each user Ui .
Key computation. Upon receiving (S,YS,i ,τS,i ), each user Ui computes
Mac.ver ki (τS,i ). Each user Ui halts if Mac.ver returns 0 or computes the session key
ski+1 = Fki+1 (U1 S U2 ) otherwise, where ki = (YS,i )xi mod p.

Security of 3PAKE2.
1. 3PAKE2 is secure against detectable on-line dictionary attacks since the
users are able to detect a failed guess by the MAC veriﬁcation in Round
4. 3PAKE2 is resistant to undetectable on-line dictionary attacks since the
server is able to depart honest requests from malicious attempts. If the MAC
veriﬁcation in Round 3 is failed, the server will notice that whose password to
being a target of undetectable on-line dictionary attacks and it be at a crisis.
After a small amount of failed guesses the server reacts and informs the target
user to stop any further use of the password and to change the password
into a new one. 3PAKE2 is secure against oﬀ-line dictionary attacks via the
diﬃculty of the decision DDH problem.
2. Key secrecy means that no computationally bounded adversary should learn
anything about session keys shared between two honest users. Especially in
the 3-party key exchange model existing a server, more desirable security
notion is that the participating server should not learn anything about session keys shared between two honest users, additionally. 3PAKE2 provides
strong key secrecy since passwords are unguessed from dictionary attacks
and in order to learn some signiﬁcant information on session keys, the adversary A including S has to solve the DDH problem or break the MAC
which is selectively unforgeable against adaptively chosen message attacks.
3. Forward secrecy means that even if long-term secret keys of one or more users
are compromised, the secrecy of previous session keys established by honest
users without any interference by the adversary is not aﬀected. 3PAKE2
provides forward secrecy under the DDH assumption. That is, even if the

980

J.O. Kwon, K. Sakurai, and D.H. Lee

passwords of users are compromised, any adversary cannot learn any signiﬁcant information on previously established session keys under the DDH
assumption.
4. A protocol is secure against known key attack (or Denning-Sacco attack) if
the following conditions hold. First, even with the session key from an eavesdropped session an adversary cannot gain the ability to impersonate the
legitimate user directly. Second, an adversary cannot gain the ability to performing oﬀ-line dictionary attacks on the users’ passwords from using the
compromised session keys which are successfully established between honest entities. Third, a legitimate user Ui knowing pwi does not learn any
information about the partner Ui+1 ’s password pwi+1 from the session key
established with Ui+1 . In 3PAKE2, the session keys are computationally
independent from each other. Thus, a compromised old session key is not
helpful for A in attempting known key attack. To break the second condition A has to solve the DDH problem. The security on the third condition
is also provided under the DDH assumption. That is, to successfully mount
an oﬀ-line dictionary attack from the session key established with Ui+1 , Ui
knowing pwi has to solve the DDH problem, in which one’s password pwi is
not helpful in attempting the oﬀ-line dictionary attack against pwi+1 .

2

Concluding Remarks

In this paper, we have proposed a three-party PAKE protocol secure against
detectable/undetectable on-line and oﬀ-line dictionary attacks without making
use of the random oracle model. However, we only provided informal security
analysis. Proving the security of our protocol in the standard model is the subject
of ongoing work.

