The NORMA Language Application to Solution
of Strong Nonequilibrium Transfer Processes
Problem with Condensation of Mixtures
on the Multiprocessor System
A.N. Andrianov1 , K.N. Eﬁmkin1 , V.Yu. Levashov2 , and I.N. Shishkova3
1

2
3

The Keldysh Institute of Applied Mathematics, Russia,
efi@a5.kiam.ru
Institute for High Performance Computing and Data Bases, Russia
levashov@mcsa.ac.ru
Moscow Power Engineering Institute (Technical University), Russia
irina@mcsa.ac.ru

Abstract. The application of NORMA language for problem of strong
nonequilibrium transfer processes is discussed. The parallel algorithm for
problem solution is created. This algorithm was realized on the multiprocessors system.The result of calculation and eﬃciency of program are
presented.

1

Some Properties and Facilities of the NORMA
Language

The declarative NORMA language [1]- [3] formalised the mathematical speciﬁcation resulting from discretization of continuous diﬀerential equations. Thus this
is the language of extremely high level and a speciﬁcation of a computational task
is turned into an executable program automatically by the translator-synthesiser
for the NORMA language. This language was created to specify generic gridbased solutions to problems in applied mathematics but the area of its application turned out to be wider. Now the NORMA language is at the stage of
practical use.
Note that the speciﬁcation of a task solution in NORMA mentions only those
rules (constraints) which must be met by the values of the variables and besides
speciﬁcation has no embedded memory representations and few of usual elements
of programs (e.g., no control statements). Only the Norma translator needs to
know about memory, processors, caches and the other hardware paraphernalia
that make most programs in general purpose programming languages so hard to
port to new computing environments.
It is important to note that there are no extra dependencies in the NORMA
speciﬁcation though they are usually imposed in programming especially at the
stage of algorithm optimisation. These links often limit the possibilities of parallelising. For instance the construction COMMON in the Fortran language or indirect addressing usually limits automatic parallelization of the programs. From
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 502–510, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

The NORMA Language Application

503

this point of view the NORMA language has one more advantage: it is the
language with single assignment. This fact is known to be very important for
automatic parallelising.
The scheme for parallelising a solution used during a NORMA translation
is brieﬂy as follows. A graph of data dependencies is built after their analysis.
A level-parallel graph of the algorithm is constructed to satisfy all dependencies
with the maximum possible (ideal) parallelism. That graph is projected onto the
architectural model of the target computer system. In constructing a projection,
the memory model (distributed memory or shared memory), the number of the
processors, and various component bandwidth factors are taken into consideration. Diﬀerent optimizations are performed, of various kinds to attempt to solve
performance problems related to the granularity of parallelism, load balancing
on all available processors etc.
From our point of view, instead of changing a sequential version of a program to a parallel one or directly designing a parallel program, there is a more
promising third way when the original statement of a problem may be realized
as both parallel and sequential variants. This third approach is based on a key
principle: when formulating a new task do not impose extra constraints - later
you may face an environment where they cause inconvenience and ineﬃciency.
Fortunately, mathematical speciﬁcations almost always adhere to this principle.
The NORMA language required new algorithms for translation and parallelising. The major results are given in [4]. Norma language compiler can generate target parallel programs in Fortran with PVM or MPI libraries or OpenMP
Fortran or serial Fortran programs.
Some key features of the NORMA language are named below.
NORMA contains features for both common mathematical notions (e.g. integer, real numbers, vectors, matrices, functions etc.) and the notions typical for
the given application domain (e.g. grid, index space, grid function, iteration on
time and space).
In NORMA the notion domain represents an index space. It contains integer
sets i1 , . . . , in , n > 0 each of them is a co-ordinate of a point in n- dimensional index space. A unique index name is given to each coordinate axis of n-dimensional
space. Domain may be conditional and unconditional. Conditional domain consists of the points from index space which number and coordinates may be
changed depending on meeting the conditions on domain. An unconditional domain consists of a ﬁxed number of points in an index space at coordinates that
can be determined during translation.
A one-dimensional domain sets a range of points along some coordinate axis
of index space, for example: RegionK: (k=1..15). A multidimensional domain
is a domain product built by operation ”;”. For example, two-dimensional domain Oij is a product of domains Oi and Oj: Oij: (Oi;Oj), where domains Oi
and Oj can be declared as Oi: (i=1..N) and Oj: (j=2..M). Possible modiﬁcation to a domain includes adding or deleting some points and changing the range.
Domain may be conditional and unconditional. Conditional domain consists of
the points from index space which number and coordinates may be changed

504

A.N. Andrianov et al.

depending on meeting the conditions on domain. An unconditional domain consists of a ﬁxed number of points in an index space at coordinates that can be
determined during translation.
In NORMA scalar variables are simple variables but variables deﬁned on
domain are vectors, arrays and matrices. Declaration of the variable sets its
type - REAL, INTEGER, or DOUBLE - and, if it is a variable on a domain,
indicates the domain of points where variable values may be computed. For
example, declaration VARIABLE First, Last DEFINED ON Oij deﬁnes
variables First, Last on domain Oij; it means that the values may be assigned
to these variables in every point of domain Oij for i = 1, . . . , N, j = 2, . . . , M .
Calculating formulae obtained by technical expert are usually written in the
form of relations. For example, calculating formulae for the solution system of
linear equations Ax = B has the form:
j = 1, . . . , N, i = 1, . . . , N ;
m0,i,j = ai,j ,
r0,i = bi , i = 1, . . . , N ;
j = 1, . . . , N, i = 1, . . . , N ;
mt,t,j = mt−1,t,j /mt−1,t,t ,
i = 1, . . . , N ;
rt,t = rt−1,t /mt−1,t,t ,
mt,i,j = mt−1,i,j − mt−1,i,t ∗ mt,t,j , j = 1, . . . , N,
i = 1, . . . , t − 1, t + 1, . . . , N ; t = 1, . . . , N ;
i = 1, . . . , t − 1, t + 1, . . . , N ; t = 1, . . . , N ;
rt,i = rt−1,i − mt−1,i,t ∗ rt,t ,
i = 1, . . . , N ;
xi = rN,i ,
Extract from the NORMA program is given below:
Example of a NORMA Program
Ot:(t=0..n) . Oi:(i=1..n) . Oj:(j=1..n).
Oij:(Oi;Oj) . Otij:(Ot;Oij) .
Oti:(Ot;Oi) . Otij1:Otij/t=1..n. Oti1:Oti/t=1..n.
DOMAIN PARAMETERS n=10.
VARIABLE a DEFINED ON Oij.
VARIABLE m DEFINED ON Otij.
VARIABLE b DEFINED ON Oi.
VARIABLE r DEFINED ON Oti.
INPUT a ON Oij, b ON Oi.
OUTPUT x ON Oi.
FOR Otij/t=0 ASSUME m = a.
FOR Oti/t=0 ASSUME r=b.
Otij11, Otij12:Otij1/i=t.
Oti11, Oti12:Oti1/i=t.
FOR Otij11 ASSUME m = m[t-1,i=t]/m[t-1,i=t,j=t].
FOR Oti11 ASSUME r = r[t-1,i=t]/m[t-1,i=t,j=t].
FOR Otij12 ASSUME m = m[t-1]-m[t-1,j=t]?m[i=t].
FOR Oti12 ASSUME r = r[t-1]-m[t-1,j=t]?r[i=t].
FOR Oi ASSUME x = r[t=n].
Necessary computations are speciﬁed by ASSUME operator:
FOR domain ASSUME relation.
This operator is a key-feature of the NORMA language. The relation gives
the rule for computing the variable’s value from the left part by the values of

The NORMA Language Application

505

the variable from the right part. It also gives the index dependencies between
the variables. Values for the left variable must be computed at all points of the
domain. The rule for each computation is deﬁned very precisely but the computations do not need to occur where given. The program does not specify the
mode (parallel or serial) or order for computations. It just tells what value relations must be preserved. Speciﬁc computations must be done only soon enough
to determine values that depend upon them.
Indices with no oﬀsets in the formulae notations may be omitted because
they are automatically restored by the translator in analysis of the program.
The conditional domain deﬁnition, Otij11, Otij12 : Otij1/i=t determines
two disjoint sub-domains Otij11 and Otij12. The ﬁrst consists of points from
domain Otij1 where condition i=t is true; the second, points where i �= t. In
general, a condition is a logical expression. The diﬀerences in two given above
ways of calculating formulae representation are only in the form (index representation, linearity of the speciﬁcation) but they are equivalent in their contents.

2

Description of the Application

Norma language and Norma system was used to create parallel program implementation for the problem of strong nonequilibrium transfer processes with
condensation of diﬀerent mixtures on the surfaces.
Continuum media methods give a good description of diﬀerent phenomena in
conditions which are characterized by small deviation from the state of thermodynamic equilibrium. By nonequilibrium growth the study of transfer processes
should be made by the help of molecular kinetic theory basing on the Boltzmann
equation.
Boltzmann kinetic equation (BKE) for two-dimensional non-steady statement for two- component mixture has form:
∂fA
∂fA
∂fA
+ ξx
+ ξy
= JAA + JAB
∂t
∂x
∂y

(1)

∂fB
∂fB
∂fB
+ ξx
+ ξy
= JBB + JBA ,
∂t
∂x
∂y
where f = f (x, t, ξ) is velocity distribution function, ξ(ξ x , ξy , ξz ) - molecular velocity, t - time, x, y - Cartesian co-ordinates, JAA - collision integral describing
interactions between molecules of component A, JBB - collision integral describing interactions between molecules of component B, JAB and JBA - between A
and B molecules.
In writing the expression for each collision integrals we have used the notations introduced by [5].
�� ���
J=
(2)
(f � f1� − f f1 ) |ξ − ξ1 |bdΩ, dΩ = db d� dξ1 .
Ω

506

A.N. Andrianov et al.

The method of direct numerical solving of Boltzmann equation [5] is used
which, the authors believe, is one of the most correct methods in kinetic solving
of the processes characterized by strong nonequilibrium. The Boltzmann kinetic equation, from the physical viespoint, adequately describes gas ﬂows with
high deviation from local thermodynamic equilibrium. No additional suppositions about the shape of its solution or simpliﬁcations of the equation itself, that
may lower the accuracy of the physical model, are made. Current status of interphase energy, momentum, mass transfer in strong vaporation- condensation of
pure vapor is suﬃcient for calculation of various one-dimensional problems. Twoand three-dimensional problems have been investigated not so comprehensively
as for one-dimensional statement. However the investigation of transfer problems namely in many-dimensional statement can have the principal meaning.
The paper assumes obtaining the macroparameters ﬁeld and velocity distribution functions of molecules along the whole ﬂow area. They present independent
scientiﬁc interest and provide understanding of nonequilibrium gas ﬂows features
and revealing the role of molecules interaction in a rareﬁed environment. Certain
attention will be paid to solving of one kinetic equation in the case of pure gas or
the kinetic equation system written for diﬀerent components in the case of gas
mixture with calculating of collision integrals considering interaction of particles
of diﬀerent nature.
The method of direct numerical solving of the Boltzmann kinetic equation
developed by F.G.Tcheremissine and V.V.Aristov [5]. The direct numerical solving of the Boltzmann equation presupposes introduction of a ﬁxed grid in the
velocity and physical space. Transition from constantly changed values to a set
of discrete values leads to a system of a large number (of the order of some hundreds or thousands) integro-diﬀerential equations. Partial derivates are replaced
by their ﬁnite diﬀerence analogues:

ΔfAk
ΔfAk
ΔfAk

k
k


+ JAB
,
+ ξxk
+ ξyk
= JAA

 Δt
Δx
Δy

(3)



ΔfBk
ΔfBk
ΔfBk

k
k


+ JBA
,
+ ξxk
+ ξyk
= JBB
Δt
Δx
Δy
were k - is number of point in velocity grid.
This system is resolved by an iterative procedure. Calculation of the multidimensional collision integral is made by the Monte-Carlo technique which can be
improved by the use of randomized uniformly distributed sequences instead of
usual random nodes. The used method is accepted worldwide. It allows one to
obtain solving of steady and non-steady many-dimensional problems with complex boundary conditions with suﬃcient precision and to reveal delicate features
of nonequilibrium ﬂow by diﬀerent potentials of molecules interaction.

The NORMA Language Application

3

507

Results of Computation

Solution results for above described problem were obtained due to the NORMA
system application on the system with distributed memory multiprocessers (two
Alpha 21264/667MHz in node, memory 1Gb in node, SAN Myrinet to communication, 64 nodes). Norma program was compiled in Fortran with MPI library.
Problem size (dimension of grid) is 100 x 100 x 18 x 18 x 9.
For measurements purpose we have used four variants of processors conﬁgurations: 20 processors (20 x 1 in line and 5 x 4 in matrix) and 50 processors (50 x
1 in line and 10 x 5 in matrix). Table 1 shows times (in seconds) of computations
that were obtained for 100 iterations during solution process.
Table 1. Times (in seconds) of computations for 100 iterations
Processors Time
Total time
Communication

20(20x1)
265.61
30.83

20(5x4)
253.66
19.19

50(50x1)
142.81
17.19

50(10x5)
119.88
10.20

Communication overhead are results of point-to-point communications and
all-to-all communications. Volume of all-to-all communications is about 2,2 Mb
in each iteration.
We hope, that the approach based on usage of Norma system, can appear
useful for creation of mobile eﬀective parallel programs for solution of a practical
mathematical physics problems.
Solution results of the problem about gas mixture ﬂow are presented in Fig. 1
- 4. Calculation domain is 50x50 mean free paths of nitrogen molecules at temperature T0 = 300 K and numerical density n0 = 2.42 · 1017 . The gas mixture enter
in investigated domain through opening and ﬂow out through others boundary
surfaces. Maximum value of nitrogen density and helium density in Fig. 1, 2 is
0.50n0 .
It should be noted that results were got as solutions of the Boltzmann equation for gas-gas mixture in nonequilibrium problem. The presented pictures are
illustrating that ﬂows of mixture components are diﬀerent. This result is caused
by nitrogen and helium molecule interactions.

4

Acknowledgment

The study is supported by Russian Foundation for Basic Researches, Grants
00-02-16273 and 01-01-00411.

508

A.N. Andrianov et al.

Fig. 1. Nitrogen density

Fig. 2. Helium density

The NORMA Language Application

Fig. 3. Nitrogen velocity

Fig. 4. Helium velocity

509

510

A.N. Andrianov et al.

References
1. A.N. Andrianov, K.N. Eﬁmkin, I.B. Zadykhailo. Nonprocedural language for mathematical physics. Programming and Computer Software, v17, 2(1991), pp. 121-133
2. A.N. Andrianov, A.B. Bugerja, K.N. Eﬁmkin, I.B. Zadykhailo. The speciﬁcation of
the NORMA language. Preprint of Keldysh Ins. of Appl. Math., Russian Academy
of Sc., 120(1995), pp.1-50. (in Russian).
3. I.B. Zadykhailo, K.N. Eﬁmkin. Meaningful terms and new generation languages
(the problem of stability, friendly interface and adaptation to execution environment). Information technologies and computational systems, 2(1996), pp. 46-58. (in
Russian)
4. A.N.Andrianov. The synthesis of parallel and vector programs by the nonprocedural
Norma speciﬁcation. Ph.D., Moscow, 1990, 131 p. (In Russian).
5. Aristov V.V., Tcheremissine F.G., The direct numerical solving of the kinetic Boltzmann equation., Moscow: Computing Center of the Russian Academy of Sciense.
1992.

