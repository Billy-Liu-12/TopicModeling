Knowledge Aware Bisimulation and Anonymity
Han Zhu1 , Yonggen Gu2 , and Xiaojuan Cai1

2

1
Basics Lab, Department of Computer Science
Shanghai Jiao Tong University, Shanghai, China
{zhu-h,cxj}@sjtu.edu.cn
Department of Computer Science and Technology
Huzhou Teachers College, Huzhou, China
gyg68@hutc.zj.cn

Abstract. We propose a knowledge aware bisimulation equivalence relation on the Calculus of Applied Pi Calculus. Applied Pi is well-known
for discribing and analyzing security protocols. Our equivalence relation
is especially useful in analyzing the property of anonymity. We give an
analysis of iKP anonymity as a running example to show the eﬀectiveness of this approach.
Keywords: Network Security, Formal Methods, Applied Pi, Anonymity.

1

Introduction

The Calculus of Applied Pi, pioneered by Abadi and Fournet [1] is an extension
of π-calculus [2,3]. In the ﬁeld of analyzing security protocols, where knowledge
and term equations play an important rule in guaranteeing security properties of
protocols (secrecy, authentication, etc), Applied Pi is the most suitable process
calculus. It has a more general setting of terms to model most security primitives nowadays, and this setting provides a mechanism to model unknown new
primitives which would appear in future. The calculus itself is decoupled from
terms, so its algebraic property is not aﬀected by which primitives its terms are
modeling. It has been used to model Just Fast Keying [4], certiﬁed email [5],
private authentication [6], etc.
In Applied Pi, the security properties such as secrecy and authentication are
captured by the labeled bisimilarity [1], which is deﬁned upon labeled transition
system. However labeled bisimilarity does not seem to be a suitable equivalence
relation between processes for security protocols. One reason is that it does not
take account of knowledge. Secondly it is not a congruent relation. It is also
coarser than we want. For example, given the equational theory
dec(enc(x, y), y) = x
This work is supported by the National 973 Project (2003CB317005), the National
Nature Science Foundation of China (60573002, 60703033), the Nature Science Foundation of Huzhou City Zhejiang Province (2007YZ10) and the Sci-Tech Brainstorm
Stress Project of Huzhou City Zhejiang Province (2007G22).
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 53–62, 2009.
c Springer-Verlag Berlin Heidelberg 2009

54

H. Zhu, Y. Gu, and X. Cai

let us take the following two processes:
A ≡ νm.(¯
a enc(m, k) .b(x).(τ.¯
c c + τ.d¯ d
+ τ.if dec(x, k) = m then c¯ c else d¯ d ))
B ≡ νm.(¯
a enc(m, k) .b(x).(τ.¯
c c + τ.d¯ d ))
One can easily check that A is labeled bisimilar to B since
dec(enc(m, k), k) = k
is one of the equations in the equational theory. But from the viewpoint of an
practical observer, these two processes should not be bisimilar. Because the third
summand of A,
τ.if dec(x, k) = m then c¯ c else d¯ d
could tell apart the content it receives on channel b by sending something on
channel c or d. While process B does not have this ability.
The basic idea is straightforward. A knowledge based environment with time
precedence relation is used to deal with the bounded names. The environment
records the history of a process when it is running. The time precedence relation
records those pairs of names and terms. Its role is to inhibit from substituting
a later emitted term for a free substitutable name. The resulting equivalence
relation is ﬁner than labeled bisimilarity enough to rule out the unreasonable
equality of A and B in the above example. It also enjoys the full congruent property, which requires an equivalent relation closed under every operator including
input preﬁx. In the ﬁelds of analyzing security protocols, a congruent equivalence
relation means we can verify security properties of a large system by break up to
small parts, then each small part satisﬁes a security property implies the whole
system also satisﬁes it.
Related Works. Using process calculi to analyze network security protocols is
ﬁrstly studied by Lowe [7], wherein a ﬂaw of Needham-Schroeder key distribution
protocol is found by modeling the protocol in CSP and checking it with FDR.
Later on, some ad hoc calculi are proposed, among which the Spi Calculus [8]
and the Applied Pi Calculus [1] are the most widely studied. Many knowledge
aware equivalence relations, like framed bisimulation [9], hedged bisimulation [10]
to name a few, on Spi have been proposed to extend standard bisimulation
equivalence which lacks knowledge representation.
Anonymity, also called untraceability, is ﬁrstly proposed by Chaum [11] to
solve the Dinning Cryptographer Problem. Schneider and Sidiropoulos analyze
anonymity with CSP [12]. In [13] Kremer and Ryan analyzed the FOO92 voting
protocol in Applied Pi and prove that it satisﬁes anonymity. Chothia [14] uses
bisimulation in the π-calculus to test the anonymity of an anonymous ﬁle-sharing
system. Cai [15] uses Probabilistic Applied Pi to give anonymity a quantitative
analysis. The anonymity of iKP is studied in [16]. Principals of the protocol
are modeled as Applied Pi processes and the anonymity is captured by static
equivalence. The work is instructive, however, their formulation of anonymity

Knowledge Aware Bisimulation and Anonymity

55

is unclear and the proof is not correct though the results do hold. We give
an unambiguous formulation of anonymity based on the open bisimilarity and
provide a sound proof of it.
Outline of the Paper. The rest of the paper is organized as follows. Section 2 brieﬂy
introduces the Applied Pi Calculus and develops knowledge aware bisimilarity and
proves its properties. Improvements on analyzing iKP anonymity is shown in Section 3. Finally Section 4 concludes and points out some directions for future research. All technical details and additional information can be found in [17].

2
2.1

Applied Pi and Open Bisimulation
Applied Pi

In this subsection, we brieﬂy recall the syntax and semantics of the Applied Pi
Calculus. Readers are referred to [1] for full details.
We presume a countable set of names Nc , ranged over by a, b, . . . and their
decorated forms, and a countable set of variables Nv , ranged over by x, y, . . .
and their decorated forms. n
˜ denotes some ﬁnite set of names {n1 , . . . , nk }. A
signature Σ is the set of all function symbols needed to model some protocols.
Terms are deﬁned as follows:
L, M, N, T ::= a, b, c, . . . | x, y, z, . . . | f(M1 , . . . , Ml )
They are constructed from names, variables and function application on terms.
A substitution σ is a map from variables to terms. As in π-calculus, names are
used to express channels, and set of channels is denoted by Chan. Names can
represent atomic data such as keys, nonces, random numbers as well. Function
applications on terms are proposed to model all kinds of cryptographic operations
such as encryption and decryption. The relationship of cryptographic primitives
is described by an equational theory E. For example, when we are dealing with
symmetric cryptography, we could let Σ = {enc, dec} and E has the following
equation dec(enc(x, y), y) = x.
Plain processes are constructed by commonly seen operators:
P, Q, R ::= 0 | u(x).P | u
¯ N .P | P | Q | !P
| νn.P | if M = N then P else Q
Extended processes are plain processes paralleled by active substitutions and
the restrict operator also has eﬀect on active substitutions:
A, B, C ::= P | A | B | νn.A | νx.A | {M/x}
The diﬀerences between plain processes and extended processes are active
substitutions. The notation {M/x} is an active substitution which replaces the
variable x with the term M . The active substitution {M/x} typically appears
when the term M has been sent out, and the environment could receive it. The

56

H. Zhu, Y. Gu, and X. Cai

frame of an extended process is the active substitution part of an extended
˜ /˜
˜ ). Every
process. It can be written in the form of φA = ν n
˜ .{M
x} and n
˜ ⊆ n(M
extended process can be mapped into its frame by removing plain processes.
We write f n(A) and bn(A) for free and bound names of A. The set of names
that occur in A is denoted as n(A) = bn(A)∪f n(A). If A is an extended process,
the frame of A is the active substitution part of it. Function dom(φ) returns the
domain of a frame φ. The set of frames are denoted by F rame.
Frames can be viewed as the static knowledge exposed by A to the environment, so there comes the deduction [18] which can be done by the environment.
We write φ M to mean that M can be deduced from φ.
Definition 1. We say that two terms M and N are equal in the frame φ, and
n} ∩ (f n(M ) ∪
write (M = N )φ, if and only if φ ≡ ν n
˜ .σ, M σ = N σ and {˜
f n(N )) = ∅ for some names n
˜ and substitution σ.
Definition 2. We say that two closed frame φ and ψ are statically equivalent,
denoted by φ ≈s ψ if dom(φ) = dom(ψ) and for all terms M, N , we have (M =
N )φ if and only if (M = N )ψ.
Definition 3 (Static Equivalence ≈s ). We call two closed extended processes
A, B statically equivalent, and write A ≈s B, if their frames are statically equivalent.
Definition 4. Labeled bisimilarity ≈l is the largest symmetric relation R on
closed extended processes such that A R B implies,
1. A ≈s B;
τ
τ ∗
2. if A −→ A , then B −→ B and A RB for some B ;
α
3. if A −→ A and f v(α) ⊆ dom(A) and bn(α) ∩ f n(B) = ∅, then
τ ∗ α
τ ∗
B −→ −→−→ B and A R B for some B .
The decidability of the equational theory is crucial in automatically checking
equality between two Applied Pi processes. Some positive results have been reported in [18]. For example, deducibility is decidable in polynomial time for a
large class of equational theories including the theories for encryption, decryption and digital signatures. In this paper, we assume that the deducibility of
equational theories are always decidable.
2.2

Open Bisimulation

The active substitution is already a good candidate for the knowledge aware
environment. However it will be absorbed by an input action. This causes some
information lost after an interaction, so we reserve the time precedence constraint
on substitutions. Since a term can substitute for a free name, our precedence
relation is deﬁned on F rame × (Nc ∪ Nv ). The frame of a process is obtained by
mapping all plain processes to 0, and all active substitutions remained.
The environment will be the form of e = V, ≺ , plus the implicit frames of
extended processes. V is the set of substitutable names and variables, and ≺ is

Knowledge Aware Bisimulation and Anonymity

57

time precedence relation. The constraint on substitution is achieved by the socalled respectiveness of a substitution to an environment σ e. As the bisimulation
game is playing, the environment should be updated and extended accordingly.
In Applied Pi, it is not required that the same σ applies to both P and Q,
since two key protected cyphertexts are thought to be equal when the key is
unknown to observers. We use a tuple σ = σ1 , σ2 , whose ﬁrst part σ1 applies
to P and σ2 applies to Q. From now on, we write bold face A to denote a tuple
in the form of A1 , A2 .
Definition 5. A tuple V, ≺ is an environment, if V ⊆ (Nc ∪Nv ) is a finite set
of substitutable names and variables from both two sides, ≺= ≺1 , ≺2 and ≺i ⊆
F rame×V (i ∈ {1, 2}) is the precedence relation between frames and substitutable
names and variables. The set of all environments is denoted by E.
The intuition behind an environment e = V, ≺ is to make a clear notion of what
can be substituted for and what can be substituted when applying substitution.
Relation ≺i stores the time precedence between the frame and the input names,
thus avoiding substituting a later emitted bounded name or term for a currently
substitutable name.
Definition 6. We say a pair of substitution σ = σ1 , σ2 respects e, denoted by
σ e if the following holds,
–
–
–
–

dom(σi ) ⊆ V for i ∈ {1, 2};
∀x ∈ V : x ∈ dom(σ1 ) ⇐⇒ x ∈ dom(σ2 );
∀x ∈ V : xσ1 = xσ2 , where φi ≺i x for i ∈ {1, 2};
if x ∈ Chan, then xσi ∈ N for i ∈ {1, 2}.

The environment should be updated when a pair of substitution is applied,
reﬂecting the changes of names.
Definition 7. Let σ = σ1 , σ2 be a pair of substitutions, e = V, ≺ be an
environment, the updated environment eσ = V , ≺ is defined as follows,
– V = V \ dom(σ);
– φi σi ≺i xσi if φi ≺i x.
The environment should also be extended when an input bounded name becomes
a(x)

free, e.g. the x in P when a(x).P −→ P . So we have the following deﬁnition.
Definition 8. Let e = V, ≺ be an environment. The extension of e, denoted
by e ⊕V (x) = V , ≺ will be defined as,
– V = V ∪ {x};
– ≺i =≺i ∪{ φi , x }.
We deﬁne e−1 = V −1 , ≺−1 where ≺−1 is the reverse relation of ≺. An open
relation R is a subset of E × P × P , such that ∀ e, P1 , P2 ∈ R : f n(Pi ) ⊆ V . It
is called symmetric if ∀ e, P1 , P2 ∈ R : e−1 , P2 , P1 ∈ R.

58

H. Zhu, Y. Gu, and X. Cai

Definition 9. An open relation R is an open bisimulation if e, P1 , P2 ∈ R imμ1
plies P1 ≈s P2 , and for all σ e, if P1 σ1 −→ P1 with bn(μ1 ) ∩ f n(P1 ) = ∅, then
τ ∗ μ2 τ ∗
there exist P2 , μ2 such that P2 σ2 −→ −→−→ P2 with bn(μ2 ) ∩ f n(P2 ) = ∅ and,
– if μ1 = τ , then μ2 = τ and eσ , P1 , P2 ∈ R;
¯ x , then μ2 = a
¯ x and eσ , P1 , P2 ∈ R;
– if μ1 = a
– if μ1 = a(M1 ), then μ2 = a(M2 ) where M1 = M2 and
eσ ⊕V (f n(M1 , M2 )), P1 , P2 ∈ R.
We say that P and Q are open bisimilar, denoted by P ≈eo Q, if there exists an open
f n(P,Q),∅,∅
bisimulation R such that e, P, Q ∈ R. We call ≈o
open bisimilarity.
Our deﬁnition of open bisimilarity is sound with respect to labeled bisimilarity.
f n(P,Q), ∅,∅

Theorem 1. If P ≈o

Q then P ≈l Q.

The example stated in Section 1 shows that there exist two labeled bisimilar
processes which are not open bisimilar. So we have the following corollary.
Corollary 1. Open bisimilarity is strictly included in labeled bisimilarity.
Congruence is an important property of equivalence relation in process algebra. It requires an equivalent relation closed under every operator. A congruent
equivalence relation means we can verify security properties of a large system by
break up to small parts, then each small part satisfy a security property implies
the whole system also satisfy it. Fortunately, we have the following theorem.
Theorem 2. Open bisimilarity is a congruence.

3

Analyzing iKP Anonymity

iKP (i-Key-Protocol, i = 1, 2, 3) is a family of secure electronic payment protocols [19,20]. It involves three parties: the buyer B, the seller S and the acquirer
A. We are concerned in the anonymity of 1KP.
We write SKX for the secret key of party X (X ∈ {B, S, A}), and P K(SKX )
for its corresponding public key. H is an ideal hash function. EX means encryption and SX means signature. We will use the following notations for messages
transmitted in the protocol:
–
–
–
–
–
–
–
–
–

Desc: Description of purchase and delivery address.
SaltB : Random number to salt Desc.
Authprice: Amount and currency.
Date: Time stamp.
N onceS : Nonce of S.
IDS : ID of S.
T IDS : Transaction ID chosen by the seller.
BanB : Buyer’s account number.
RB : Random number chosen by B.

Knowledge Aware Bisimulation and Anonymity

59

– IDB : Pseudo-ID of B, which is equal to H(RB , BanB ).
– Code: Authorization code.
Composite messages are deﬁned as follows:
–
–
–
–
–

Common = (Authprice, IDS , T IDS , Date, N onceS , IDB , H(SaltB , Desc)).
Clear = (IDS , T IDS , Date, N onceS , H(Common)).
Slip = (Authprice, H(Common), BanB , RB ).
EncSlip = EA (Slip).
SigA = SA (Code, H(Common)).

The operation ﬂow of this protocol consists of six steps:
1. Initiate B −→ S : SaltB , IDB . The buyer sends init, which is composed of
the hash code of his/her account number, a random number, etc.
2. Invoice S −→ B : Clear. The seller answers by the hash code of price and
other information. The message is composed of common and clear.
3. Payment B −→ S : EncSlip. The buyer checks the invoice and sends the
payment slip encrypted by the acquirer’s public key.
4. Auth-Request S −→ A : Clear, H(SaltB , Desc), EncSlip. The seller requests the acquirer to authorize the payment. The message is composed of
clear and req.
5. Auth-Response A −→ S : Code, SigA . The acquirer checks the request,
extracts information from it, authorizes it and then sends response resp to
the seller.
6. Confirm S −→ B : Code, SigA . The seller extracts the response and the
signature of the acquirer, veriﬁes it and then sends confirm to the buyer.
We now model this protocol in Applied Pi. The signature Σ of it is:
Σ = {init, clear, common, slip, req, resp, confirm, proj.i,
hash, dec, enc, checksig, pk, true, false}
The function symbols init, clear, common, slip, req, resp, and confirm represent the
message ﬂows transmitted in the protocol. Their parts can be extracted. The
extraction operator here we use is proj.i. The rest of function symbols in Σ is
self-evident. They are common cryptographic primitives.
The equational theory is:
dec(enc(x, pk(z)), z) = x
checksig(enc(x, z), pk(z)) = true
proj.i(tuple(x1 , . . . , xl )) = xi

if 1 ≤ i ≤ l

The last equation is a short form of a family of equations with similar forms,
that is
tuple ∈ {init, clear, common, slip, req, resp, confirm}

60

H. Zhu, Y. Gu, and X. Cai

We use substitutions to deﬁne the messages transmitted in the protocol:
σ1 = {init(SaltB , IDB )/x1 }
σ2 = {clear(IDS , T IDS , Date, N onceS ,
hash(Authprice, IDS , T IDS , Date, N onceS ,
proj.2(x1 ), hash(proj.1(x1 ), Desc)))/x2 }
σ3 = {enc(slip, pk(SKA ))/x3 }
σ4 = {req(x2 , hash(proj.1(x1 ), Desc), x3 )/x4 }
σ5 = {resp(Code, enc(Code, hash(common), SKA ))/x5 }
σ6 = {confirm(proj.1(x5 ), proj.2(x5 ))/x6 }
This approach is inspired by Gu et al [16].
Three parties are deﬁned as follows: PB stands for the buyer, PS for the seller
and PA for the acquirer. In addition, FB (x), FS (x), FA (x) represent respectively
the actions which the buyer, the seller and the acquirer are required to perform
after ﬁnishing the protocol ﬂows. The processes are:
P ≡ (νAuthprice, Desc).PB | PS | PA
PB ≡ (νSaltB , RB ).(CBS x1 σ1 | !(CSB (x2 ).
if proj.5(x2 ) = hash(Authprice, proj.1(x2 ), proj.2(x2 ),
proj.3(x2 ), hash(RB , BanB ), hash(SaltB , Desc))
then (CBS x3 σ3 | !(CSB (x6 ).if checksig(proj.2(x6 ),
pk(SKA )) then FB (x6 )))))
PS ≡ (νIDS , T IDS , Date, N onceS ).(CBS (x1 ).(CSB x2 σ2
| CBS (x3 ).(CSA x4 σ4 | CAS (x5 ).CSB x6 σ6 .FS (x5 ))))
PA ≡ (νSKA ).!(CSA (x4 ).if proj.2(dec(proj.3(x4 ), SKA )) =
hash(proj.1(dec(proj.3(x4 ), SKA )), proj.1(proj.1(x4 )),
proj.2(proj.1(x4 )), proj.3(proj.1(x4 )), proj.4(proj.1(x4 )),
hash(proj.3(dec(proj.3(x4 ), SKA )), proj.4(dec(proj.3(x4 ),
SKA ))), proj.1(x4 )) then (νCode).(CAS x5 σ5 .FA (x4 )))
Buyers want to keep anonymous from eavesdroppers and sellers. Furthermore,
buyers may even want to keep anonymous from the payment system provider
(acquirers). We will show that iKP does not oﬀer anonymity with respect to the
payment system provider. It does minimize the exposure of buyers’ identities to
sellers and eavesdroppers. The crucial point is whether the BanB (Buyer B’s
Account Number) in PB can be exposed to the environment. The results are
formally stated in the following theorem.
Theorem 3. Suppose FA (x1 ) ≈eo FA (x2 ) for every e if and only if x1 = x2
and the same property holds for FB (x) and FS (x). Suppose PB (x) be the process PB having x substituted for BanB and B1 = B2 . Let v = {CSB , CBS },

Knowledge Aware Bisimulation and Anonymity

61

v = v ∪ {CAS , CSA } and p = ∅, ∅ . If we abbreviate (νAuthprice, Desc).
PB (x) | PS to PBS (x), then we have
PBS (B1 ) ≈ov,p PBS (B2 )
and

PBS (B1 ) | PA ≈ov ,p PBS (B2 ) | PA

Proof (sketch). Let us play the bisimulation game using our open approach. In
each step, we update or extend the environment accordingly in order to record
the knowledge exposed to the environment faithfully. We ﬁnd that BanB only
occurs in the frame of processes. After PBS (B1 ) and PBS (B2 ) have ﬁred their
respective output actions CBS x3 σ3 ,
φ(PBS (B1 )) = {enc((Authprice, hash(common), B1 , RB ), pk(SKA ))/x3 }
| {(SaltB , hash(RB , B1 ))/x1 } | σ1 | σ2 | σ3
and
φ(PBS (B2 )) = {enc((Authprice, hash(common), B2 , RB ), pk(SKA ))/x3 }
| {(SaltB , hash(RB , B2 ))/x1 } | σ1 | σ2 | σ3
v,p

It is obvious that φ(PBS (B1 )) ≈s φ(PBS (B2 )), then PBS (B1 ) ≈o
PBS (B2 )
follows easily.
For the case in which acquirers are taken account of, proj.3(dec(x3 , SKA )) =
B1 is deducible in φ(PSB (B1 ) | PA ), but is not deducible in φ(PSB (B2 ) | PA ).
Therefore we have φ(PBS (B1 ) | PA ) ≈s φ(PBS (B2 ) | PA ). This suggests us that
the attacker hidden in the environment can tell the diﬀerence of two account
numbers. By the assumption that FA (x1 ) ≈eo FA (x2 ) for all e if x1 = x2 , we
v ,p
have PSB (B1 ) | PA ≈o
PBS (B2 ) | PA .

4

Conclusion

In this paper we propose a knowledge aware open bisimulation relation for the
Applied Pi Calculus. Our relation is more suitable for analyzing security protocols. It also has many other advantages, which include the congruent property and a ﬁner distinguishability. By analyzing the anonymity of iKP, it is
shown that playing the knowledge aware bisimulation game can eﬀectively analyze anonymity, which is hard to obtain by many other methods.
As for the future work, we would like to apply this approach to check other
security properties, such as authentication and non-repudiation. We are also
working on developing automatically equivalence checking tools.

Acknowledgements
The authors would like to thank anonymous referees for their constructive comments and suggestions.

62

H. Zhu, Y. Gu, and X. Cai

References
1. Abadi, M., Fournet, C.: Mobile Values, New Names, and Secure Communication.
In: Proceedings of POPL 2001, pp. 104–115. ACM Press, New York (2001)
2. Milner, R., Parrow, J., Walker, D.: A Calculus of Mobile Processes, part I. Information and Computation 100(1), 1–40 (1992)
3. Milner, R., Parrow, J., Walker, D.: A Calculus of Mobile Processes, part II. Information and Computation 100(1), 41–77 (1992)
4. Abadi, M., Blanchet, B., Fournet, C.: Just Fast Keying in the Pi Calculus. In: Schmidt,
D. (ed.) ESOP 2004. LNCS, vol. 2986, pp. 340–354. Springer, Heidelberg (2004)
5. Abadi, M., Blanchet, B.: Computer-Assisted Veriﬁcation of a Protocol for Certiﬁed
Email. In: Cousot, R. (ed.) SAS 2003. LNCS, vol. 2694, pp. 316–335. Springer,
Heidelberg (2003)
6. Fournet, C., Abadi, M.: Hiding Names: Private Authentication in the Applied pi
Calculus. In: Okada, M., Pierce, B.C., Scedrov, A., Tokuda, H., Yonezawa, A. (eds.)
ISSS 2002. LNCS, vol. 2609, pp. 317–338. Springer, Heidelberg (2003)
7. Lowe, G.: Breaking and Fixing the Needham-Schroeder Public-Key Protocol Using
FDR. Software - Concepts and Tools 17(3), 93–102 (1996)
8. Abadi, M., Gordon, A.: A Calculus for Cryptographic Protocols: The Spi Calculus.
Information and Computation 148, 1–70 (1999)
9. Abadi, M., Gordon, A.: A Bisimulation Method for Cryptographic Protocols.
Nordic Journal of Computing 5(4), 267–303 (1998)
10. Borgstr¨
om, J., Briais, S., Nestmann, U.: Symbolic Bisimulation in the Spi Calculus.
In: Gardner, P., Yoshida, N. (eds.) CONCUR 2004. LNCS, vol. 3170, pp. 161–176.
Springer, Heidelberg (2004)
11. Chaum, D.: The Dining Cryptographers Problem: Unconditional Sender and Recipient Untraceability. Journal of Cryptology 1, 65–75 (1988)
12. Schneider, S., Sidiropoulos, A.: CSP and Anonymity. In: Martella, G., Kurth, H.,
Montolivo, E., Bertino, E. (eds.) ESORICS 1996. LNCS, vol. 1146. Springer, Heidelberg (1996)
13. Kremer, S., Ryan, M.: Analysis of an Electronic Voting Protocol in the Applied PiCalculus. In: Sagiv, M. (ed.) ESOP 2005. LNCS, vol. 3444, pp. 186–200. Springer,
Heidelberg (2005)
14. Chothia, T.: Analysing the MUTE Anonymous File-Sharing System using the piCalculus. In: Najm, E., Pradat-Peyre, J.-F., Donzeau-Gouge, V.V. (eds.) FORTE
2006. LNCS, vol. 4229. Springer, Heidelberg (2006)
15. Cai, X., Gu, Y.: Measuring anonymity. In: 5th Information Security Practice and
Experience Conference (ISPEC 2009). LNCS, vol. 5451, pp. 183–194. Springer,
Heidelberg (2009)
16. Gu, Y., Li, G., Fu, Y.: Analyzing iKP Security in Applied pi Calculus. In: Zhang,
J., He, J.-H., Fu, Y. (eds.) CIS 2004. LNCS, vol. 3314. Springer, Heidelberg (2004)
17. Zhu, H., Cai, X.: An Open Approach for the Applied pi Calculus. Technical report,
Shanghai Jiao Tong University (2008)
18. Abadi, M., Cortier, V.: Deciding Knowledge in Security Protocols under Equational
Theories. In: D´ıaz, J., Karhum¨
aki, J., Lepist¨
o, A., Sannella, D. (eds.) ICALP 2004.
LNCS, vol. 3142, pp. 46–58. Springer, Heidelberg (2004)
19. Bellare, M., Garay, J., Hauser, R., et al.: Design, Implementation, and Deployment
of the iKP Secure Electronic Payment System. IEEE Journal of Selected Areas in
Communications 18, 611–627 (2000)
20. Bellare, M., Garay, J., et al.: iKP — A Family of Secure Electronic Payment
Protocols. In: Proceedings of USENIX Workshop on Electronic Commerce (1995)

