Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 682 – 691

International Conference on Computational Science, ICCS 2013

A parallel algorithm for a physiological non-linear model of the
cochlea
Doron Sabo , Shlomo Weiss , Miriam Furst
School of Electrical Engineering, Tel Aviv University, Tel Aviv 69978, Israel

Abstract
We present a parallel algorithm that solves a time-domain non-linear mathematical model of the cochlea. The previously
known serial solution of the cochlear model is recursive in the longitudinal dimension and iterative in the time dimension.
These two characteristics of the serial solution limit parallelism and prevent eﬃcient computations on a massively parallel
processor. We introduce a novel parallel algorithm that successfully overcomes the challenges posed by the cochlear model.
We present performance results of a parallel implementation of the algorithm that shortens the computation time by a typical
factor of 160 − 180, which makes the proposed algorithm of practical value for applications such as clinical audiological
diagnosis.
Keywords: Computational Methods; Complex Systems; Computational Applications; Parallel and Distributed Computing;
Advanced Computing Architectures; GPU.

1. Introduction
Solving the cochlear model for normal and abnormal ears has been a computational challenge for decades. It
is a non-linear problem described by a set of partial diﬀerential equations. Most solutions are quasi-linear and are
solved in the frequency domain. In order to predict abnormal hearing a diﬀerent frequency response should be
introduced (e.g. [1, 2]).
We have developed a time-domain non-linear mathematical ear model that can ﬁt either normal or abnormal
auditory systems. The input to the model is an acoustic stimulus. It can be either simple tones at any sound level
or speech embedded in a noisy background with any signal-to-noise ratio. The model includes a middle ear model
and an inner ear model which incorporates many structural parts that are the possible sources for hearing loss.
The output of the model is cochlear motion that stimulates the auditory nerve. The model allows visualization of
normal and abnormal ears in response to diﬀerent types of acoustic stimuli. The eﬀect of hearing aids on abnormal
ears can be visualized as well. The simulation of the model on a current CPU may require about 3000 times of the
signal duration.
It is the purpose of the current work to develop a parallel algorithm for the cochlear model, and to demonstrate
that the algorithm runs suﬃciently fast on commodity GPUs to make the algorithm useful for applications such as
clinical audiological diagnosis and hearing-aid ﬁtting. The current paper makes the following contributions.
E-mail address: doron.sabo@gmail.com (Doron Sabo), weiss@eng.tau.ac.il (Shlomo Weiss), mira@eng.tau.ac.il (Miriam Furst).

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.232

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

(a) The snail shaped structure of the cochlea. Vibrations of the
ear drum are ampliﬁed by the middle ear and transferred to the
entrance of the cochlea—a ﬂexible tissue called the oval window.
Movements of the oval window cause pressure changes in the
ﬂuid-ﬁlled ducts of cochlea.

(b) The spiral shape of the cochlea is stretched to form a long tube
separated by the tectorial membrane (TM) and the basilar membrane (BM). Pressure diﬀerences Ptm and Pbm induce mechanical oscillations in the tectorial membrane and the basilar membrane respectively. For a pure (single frequency) tone, resonance
is produced at a sharply deﬁned location on the cochlear partition.
Hence diﬀerent frequency components of the input signal produce
mechanical oscillations at diﬀerent locations along the cochlea.

Fig. 1. Cochlea schematic representation.

1. We introduce a new parallel algorithm that solves the non-linear mathematical model of the cochlea.
2. We present an eﬃcient implementation of the parallel algorithm on a GPU and optimizations that reduce
the GPU’s execution time.
3. We report a comprehensive evaluation of the performance of the proposed algorithm.
2. Human Ear Model
The mammalian ear is composed of three major parts: the outer ear, the middle ear and the inner ear. The outer
ear includes the pinna, the ear canal, and the ear drum. The middle ear is an air-ﬁlled cavity behind the ear drum
which includes three small ear bones—the ossicles. The inner ear includes a snail shaped structure, the cochlea.
The sound is directed by the outer ear through the ear canal to the eardrum. When sound strikes the ear drum, the
movement is transferred through the three bones of the middle ear, reaching the upper ﬂuid-ﬁlled ducts of cochlea
through a ﬂexible tissue called the oval window (see Figure 1). The upper cochlear duct is called scala vestibuli
and the bottom duct is referred to as scala tympani. The space between the top and bottom ducts is labeled scala
media.
The middle ear’s task is to match the impedance of the sound pressure in the air to that of the ﬂuid. The
ﬂuid inside the upper cochlear duct is moved and causes a pressure diﬀerence between the upper and lower ducts.
This pressure diﬀerence causes the basilar membrane (the membrane that separates the scala tympani and scala
media) to move. Two types of auditory receptor cells inhabit the scala media, the inner hair cells (IHCs) that
innervate the auditory nerve and the outer hair cells (OHCs) that act as local ampliﬁers. The OHCs lay on the
basilar membrane (BM) and their upper part is embedded in a gel like membrane, the tectorial membrane (TM).
The OHCs are changing their length due to the BM movement which in turn enhances the BM movement. Finally,
the BM velocity is transmitted to the brain through the IHCs and the auditory nerve.
Modeling the human ear requires a detailed model of the cochlea, middle and outer ears. A common approach
is to model the inner ear as a one-dimensional structure. The cochlea is considered an uncoiled structure with
two ﬂuid-ﬁlled compartments with rigid walls, that are separated by an elastic partition—the basilar membrane.
The cochlear partition, whose mechanical properties are describable in terms of point-wise mass density, stiﬀness
and damping, is regarded as a ﬂexible boundary between scala tympani and scala vestibuli. Thus at every point
along the cochlear duct, the pressure diﬀerence P across the partition drives the partition’s velocity. By applying

683

684

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

fundamental physical principles, such as conservation of mass and the dynamics of deformable bodies [3], the
diﬀerential equation for P is obtained by:
∂2 P(x, t) 2ρβ ∂2 ξbm (x, t)
=
,
(1)
A
∂x2
∂t2
where ξbm is the basilar membrane displacement, A represents the cross-sectional area of scala tympani and scala
vestibuli, β is the BM width and ρ is the density of the ﬂuid in both scala vestibule and scala tympani.
The pressure on the BM (Pbm ) is a result of both the ﬂuid diﬀerence pressure and the pressure caused by the
OHCs (Pohc ). The relation between the pressures of BM, TM and OHC is shown in Figure 1 [4], which can be
interpreted as:
Pbm (x, t) = P(x, t) + Pohc (x, t)
0 = Pohc (x, t) + Ptm (x, t)

.

The mechanical properties of both BM and TM are simulated as second order oscillators which yield:
⎫
2
(x,t) ⎪
⎪
Pbm (x, t) = Kbm ξbm (x, t) + Rbm ∂ξbm∂t(x,t) + Mbm ∂ ξbm
⎬
2
∂t
,
⎪
∂ξtm (x,t)
∂2 ξtm (x,t)
⎪
⎭
Ptm (x, t) = Ktm ξtm (x, t) + Rtm
+ Mtm
2
∂t

(2)

(3)

∂t

where Kbm , Ktm , Rbm , Rtm , Mbm , Mtm are the eﬀective stiﬀness, damping, and mass per unit area of BM and TM
respectively (see Table 1). The TM displacement is deﬁned as ξtm .
The pressure developed by each OHC is obtained from the spring properties of the OHC’s membrane whose
length, Δlohc , changes due to the electrical potential developed on the OHC membrane. The total pressure depends
on the eﬀective population of OHCs along the cochlear partition and is deﬁned by γ(x). The parameter γ(x) is
deﬁned in the range [0, 1]. A cochlea with no active OHCs is obtained by γ(x) = 0. When γ(x) → 1 the cochlear
model reveals an unstable response which yields ξbm → ∞. γ(x) = 0.5 yielded an optimal cochlea that best ﬁt
physiological results [4]. Combining all these factors yields:
Pohc = γ(x)Kohc ξohc ,

(4)

where Kohc is the spring coeﬃcient of the OHC membrane (see Table 1) and ξohc is the OHC displacement that
obtained by: ξohc = ξtm − ξbm − Δlohc . The elongations and contraction of the OHCs is a non-linear function of the
OHC membrane’s electrical potential ψ [5]. It is usually described as a sigmoid function [6], [7] as follows:
αl

Δlohc = α s

e(− αs ψ) − 1

= α s tanh(−

αl
ψ),
αs

(5)
e
+1
where αl and α s are constants (see Table 1). The OHC electrical potential ψ is obtained by solving the OHC
equivalent circuit (see Figure 1) [3]; [4] which is obtained by the diﬀerential equation:
α

(− α sl ψ)

∂ψ
+ ωohc ψ = ηξohc ,
(6)
∂t
where η and ωohc are constants deﬁned in Table 1.
The ear model described by the diﬀerential equations 1-6 is solved by applying the boundary conditions:
⎫
∂2 ξow (t) ⎪
∂P(x,t)
⎪
⎪
⎪
∂x | x=0 = 2ρC ow ∂t2
⎬
,
(7)
⎪
⎪
⎪
⎪
⎭
P(L, t) = 0
where L is the cochlear length (see Table 1) and ξow is the oval window displacement. In order to obtain ξow , the
middle and outer ears model was applied [8] [9] as expressed by the following diﬀerential equation:
∂2 ξow (t)
∂ξow (t)
1
Gow
+ ωow ξow (t) =
+ γow
P(0, t) +
Pin (t),
∂t
σow
σow
∂t2

(8)

685

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691
Parameter
Kbm
Rbm
Mbm
ωc f
gtm (x)
Ktm
Rtm
Mtm
gohc
Kohc (x)
αl
αs
ωohc
η
ωow
σow
Cow
Gow
γow
ψ0
ρ
β
A
L
x

Value/Deﬁnition
1.286x10−6 e1.5x
0.25x10−6 e−0.6x
1.282e−1.5x
√
Kbm (x)/Mbm (x)
Rbm (x)/(Mbm (x)ωohc )
gtm (x)Kbm (x)
1.282xe−1.5x
0
10−3
gohc Ktm (x)
5 · 10−5
1 · 10−6
2π1000
1/(αl · ωohc )
2π1500
0.5
6 · 10−3
21.4
500
70 · 10−3
1
0.003
0.5
3.5
cm

Description
Eﬀective basilar membrane stiﬀness per unit area [gr/cm2 s2 ]
Eﬀective basilar membrane damping density per unit area [gr/cm2 s]
Eﬀective basilar membrane mass density per unit area [gr/cm2 ]
Angular frequency of the basilar membrane [Hz]
Gain diﬀerence between the eﬀective OHC and the eﬀective TM
Eﬀective tectorial membrane stiﬀness per unit area [gr/cm2 s2 ]
Eﬀective tectorial membrane damping density per unit area [gr/cm2 s]
Eﬀective tectorial membrane mass density per unit area [gr/cm2 ]
Gain diﬀerence between the eﬀective OHC and the eﬀective TM
Eﬀective OHC membrane stiﬀness density per unit area [gr/cm2 s2 ]
Electromotility displacement to voltage [cm/V]
Peak to peak electromotility displacement [cm]
Outer hair cells cutoﬀ frequency [Hz]
Electrical properties of the hair cell [V · sec/m]
Oval window cutoﬀ frequency [Hz]
Oval window aerial density [gr/cm2 ]
Coupling of oval window to basilar membrane
Coupling of oval window displacement to ear canal pressure
Oval window resistance
Outer hair cell resting potential [V]
Perylimph density [gr/cm3 ]
Width of the basilar membrane [cm]
Cross-sectional area of the cochlea scalae [cm2 ]
Cochlear length [cm]
Distance from stapes

Table 1. List of model parameters.

where ωow , Gow and σow are all constants.
The initial conditions are:
ξbm (x, 0) =

∂ξbm (x, 0)
∂ξtm (x, 0)
∂ξow (0)
= ξtm (x, 0) =
= ψ(x, 0) = ξow (0) =
= 0.
∂t
∂t
∂t

3. Serial Implementation on CPU
Substituting (2) and (3) in the partial diﬀerential equation (1) yields:
∂2 P(x, t)
− Q(x)P(x, t) = −Q(x)G(x, t),
∂x2

(9)

where Q(x) = AM2ρβ
and G(x, t) = −[Rbm (x)ξbm (x, t) + Kbm (x)ξ˙bm (x, t) + Ptm (x, t)]. With t as a parameter we now
bm (x)
have an ordinary diﬀerential equation (9) instead of the partial diﬀerential equation (1). Equation (9) represents
an ordinary second order diﬀerential equation of P as a function of x and can be solved by applying the boundary
conditions speciﬁed by (7).
The boundary conditions problem is solved for every time position t by converting the problem from the
continuous to the discrete domain. The cochlear length is divided into N equal sections where xi = n · Δx for
0 ≤ n ≤ N and Δx = NL . The ﬁrst and second derivatives of P are approximated using the Taylor series in the
discrete domain:
∂P(x, t) P(xn+1 , t) − P(xn , t)
≈
,
(10)
∂x
Δx
∂2 P(x, t) P(xn+1 , t) − 2P(xn , t) + P(xn−1 , t)
≈
.
(11)
∂x2
Δx2
Substituting (10) in the ﬁrst boundary condition of (7) for x = 0 yields:
P(Δx, t) = P(0, t) + Δx · 2ρ · Cow

∂2 ξow (t)
.
∂t2

(12)

686
∂2 ξow (t)
∂t2

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

is obtained from (8). Thus (12) becomes
P(Δx, t) = (1 + Δx)

2ρCow
P(0, t) = Y0 ,
σow

(13)

ow
where Y0 = 2ρ · Cow [ Gσow
Pin (t) − γow ξ˙ow (t) + ωow ξow (t)] · Δx. The second boundary condition of (7) for x = L yields:

P(N − 1, t) = 0.

(14)

Substituting (11) in (9) for 1 ≤ n ≤ N − 1 yields:
P(xn+1 , t) − (2 + Δx2 Q(xn ))P(xn , t) + P(xn−1 , t) = −Δx2 Q(xn )G(xn , t).
Equations (13), (14), and (15) can be expressed in a matrix formulation as:
AP(t) = Y(t),

(15)

where A is a tridiagonal matrix in which the main diagonal consists of:
−(1 + Δx

2ρCow
), −(2 + Δx2 Q(x1 )), . . . , −(2 + Δx2 Q(xN−1 )), 1
σow

and the two other non-zero diagonals are all ones. P(t) and Y(t) are shown below.
P(t) = [P(0, t), P(Δx, t), . . . P((N − 1)Δx, t), P(L, t)]T ,
Y(t) = [Y0 , Δx2G(Δx, t)Q(Δx), . . . , Δx2G((N − 1)Δx, t)Q((N − 1)Δx), 0]T .
Given Y(t) the solution of (15) is the pressure along the cochlear partition:
P(t) = A−1 Y(t).

(16)

A set of initial conditions second order ordinary diﬀerential equations for ξbm , ξtm , ξow , and ψ as a function of
t is obtained by (6) and (8) along with the substitution of (2), (4), and (5) in (3). This set is solved by using the
modiﬁed Euler method with adaptive step size [10]. The initial step size Δt is 10−15 sec.
A convergence test code is implemented to decide on updating the length of the time step. This test is based on
the Lipschitz continuity principle. The Lipschitz continuity is a strong form of uniform continuity for functions.
The Lipschitz constant deﬁnes for every two points on the graph of a continuous function the upper limit on the
absolute value of the slope of the line that connects these two points [11], [12].
If the algorithm diverges the time step is updated to Δt = Δt2 , and the computation for the current time position
restarts. If the algorithm converges for the current time position the time step is updated to Δt = 2Δt and the
algorithm advances to the next time position. Otherwise the algorithm does not diverge but it still does not
converge for the current time step and another iteration is performed for the current time position.
Normally for a given acoustic signal and N = 256 the algorithm converged for Δt ≈ 10−6 sec. The run time of
the serial version of the algorithm is about three order of magnitudes longer than the duration of the signal. This
motivates us to develop a parallel algorithm that could be eﬃciently implemented on CUDA (Compute Uniﬁed
Device Architecture) [13].
4. Parallel Algorithm
The serial solution of the cochlear model is recursive in the longitudinal dimension and iterative in the time
dimension. Both of these properties limit parallelism. As a result the serial solution requires substantial processing
that is orders of magnitudes longer than the duration of a real-time voice signal. In this section we develop a
parallel algorithm that can eﬃciently use the massive parallelism available in GPUs.

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

Block
0
1
...
Nt − 1

Algorithm runs for interval
[0, (tBT I + tBOP )]
[tBT I , (2 · tBT I + tBOP )]
...
[(Nt − 1) · tBT I ,
(Nt · tBT I + tBOP )]

We discard solutions for interval
[0, tBOP ]
[tBT I , (tBT I + tBOP )]
...
[(Nt − 1) · tBT I ,
((Nt − 1) · tBT I + tBOP )]

Fig. 2. Partitioning in the time dimension—each bar represents a time interval handled by one CUDA block. Overlapping sections are
discarded.

4.1. Parallelism in the time dimension
The model uses a one dimensional description of the cochlear partition, hence it was natural to chose a one
dimensional grid in the parallel implementation. The cochlear partition was divided into N x sections along the
x-axis, each section processed by one thread. The parallel algorithm uses large amounts of constant data in its
computations. The data are read from the CPU host to the global memory of the GPU during the initialization
phase of the launch of the CUDA kernel. At the end of a time step, when that time step converges, the algorithm
stores the current results and advances to the next time step. The memory traﬃc can slow down the execution time
dramatically. To prevent excessive memory accesses the equation is solved for a long time interval in one kernel
launch, so that the traﬃc to and from the global memory is done once for a long segment of input processing.
Each thread handles one cochlear section and resolves the basilar membrane velocity for “block time interval”
tBT I seconds. The thread stores results to global memory once in each Δtout seconds, where Δtout represents the
desired temporal resolution of the output.
To achieve parallelization in the time dimension we partitioned the processing into Nt blocks, such that each
block solves the equations for all the cochlear sections for a diﬀerent time interval. The time intervals are handled
by blocks that are not completely independent, and two consecutive time intervals, mapped to two consecutive
CUDA blocks, have an overlapping interval of tBOP seconds. This requires each block to run the algorithm for a
total of tBT I + tBOP seconds. That is, a speciﬁc block L solves the model for the interval T (L) = {(L − 1) · tBT I ≤
t ≤ L · tBT I + tBOP }. Since the output is required to have a temporal resolution of Δtout , for each kernel launch each
I +t BOP
+ 1 results of a speciﬁc cochlear section. The results computed in the ﬁrst tBOP seconds in
thread returns tBTΔt
out
each block are discarded.
Figure 2 illustrates the time dimension partitioning graphically, showing the time interval processed by each
block, including the discarded (overlapping) interval. The non overlapping intervals processed by each block are
connected together to form the ﬁnal result.
4.2. Parallelism in the longitudinal dimension
As mentioned earlier, the boundary conditions were the main obstacle limiting parallelization in the x dimension. These boundary conditions are expressed in the set of linear equations in (15). The reference software uses
the LU decomposition method for solving the equation. LU decomposition is an eﬃcient way for solving tridiagonal matrices sequentially, but it is a recursive method that cannot be easily parallelized and deployed on parallel
multicore or multithreaded processors; hence it is not eﬃcient on GPUs.
Basic smoothers (numerical algorithms used for solving a system of linear equations) like the Jacobi method
and SOR (successive over relaxation) are the most common way to parallelize a linear system. The purpose of
“smoothers” is to reduce, or smooth, in an eﬃcient way the approximation error ([14]). Smoothing was used
earlier on GPUs for multigrid solvers [15], and more recently with CUDA for power grid analysis [16] and for
solving the Euler compressible equations [17]. More advanced smoothers are more diﬃcult to deploy in parallel
[18].
Taking advantage of the tridiagonal shape of the equations set, we used Jacobi relaxation and implemented it
with only a few ﬂoating point operations for each Jacobi iteration. By manipulating (15) we get the following for

687

688

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

1≤n≤ N−1:

ˆ n) =
Q(x

1
2+Δx2 Q(xn )

ˆ n)
P(xn , t) = (Yn (t)−1·P(xn−1 , t)−1·P(xn+1 , t))· Q(x

⎫
⎪
⎪
⎪
⎪
⎬
.
⎪
⎪
⎪
⎪
⎭

(17)

By denoting the following:
Al = [0, 1, 1, 1, . . . , 1, 0]T ,
Au = [1, 1, 1, 1, . . . , 1, 0]T ,
and
Am = [

1
−(1 +

ow
Δx 2ρC
σow )

,

1
1
1
,
,...,
, 1]T ,
−(2 + Δx2 Q(x1 )) −(2 + Δx2 Q(x2 ))
−(2 + Δx2 Q(xN−1 ))

we can combine equations 17, 13 and 14 and write:
P(xn , t) = (Yn (t) − Al [n] · P(xn−1 , t) − Au [n] · P(xn+1 , t))Am [n], 0 ≤ n ≤ N.
Computation of P(t) is implemented running Jacobi relaxation for a constant number of iterations J. We
assume that the convergence tests will catch the cases in which the computation of P(t) is not converged after J
Jacobi iterations. The equation of a speciﬁc iteration j is deﬁne as:
P j (xn , t) = (Yn (t) − Al [n] · P j−1 (xn−1 , t) − Au [n] · P j−1 (xn+1 , t))Am [n], 0 ≤ n ≤ N.
Here, Al , Au and Am are constant during the processing and can be computed in advance. All variables are
stored in the shared memory, and the division by the mass is replaced with multiplication with M1n . The pressure
P(xn , tn+1 ) for each cochlear section xn is computed by a diﬀerent thread. Hence each thread performs three
multiplications, two add/sub operations and seven shared memory accesses for one Jacobi iteration. Inter-thread
synchronization is required however after each Jacobi iteration since each thread uses the result of its neighbors
for the next iteration. Since synchronization between threads that belong to the same block is much more eﬃcient
in CUDA we limited N x to the size of a CUDA block.
On the NVIDIA GTX 590, the GPU used in this research, a block may contain up to 1024 threads.However
the number of threads that can be deﬁned in a block is limited also by other resources used by the threads such as
shared memory. In our implementation we used blocks of size N x = 256 threads, a resolution that proved to be
enough for the convergence of the algorithm and also met the limitations, imposed by resource demands, on the
size of a block.
5. Evaluation of the CUDA implementation
This section describes the process of evaluating the parallel implementation. The goal of our implementation
is to achieve best performance (minimal run time) for the algorithm while keeping the error of the parallel implementation suﬃciently low. We ﬁrst describe how we compute the error. Then we explain how we conﬁgure
several parameters for the Jacobi relaxation method as well as for the overlapping intervals, while considering the
trade-oﬀ between performance and error. Finally, we describe some additional optimizations done in the code.
5.1. Error calculation of the parallel implementation
During the development of the parallel implementation we continuously compared our results to the results
of the reference software. Since small alignment mismatches can occur between the reference software and the
outputs of the parallel implementation, the error calculations are based on comparison of average results of short
time sections. The error of the parallel implementation was computed as follows.
1. For each cochlear section i we compute the mean value basilar membrane speed as follows:
end
| ξ˙bm [i] | = tend −t1start +1 tt=t
| ξ˙bm [i, t] | .
start

689

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

CPU
CPU Clock
RAM Size
RAM Clock

Intel Core 2 Duo E4400
2GHz
2GByte (DDR2)
333MHz

NVIDIA Card
Number of cores
Stream processors (per core)
GPU clock
RAM size (per core)
RAM peak bandwidth (per core)

Table 2. Processor conﬁguration for sequential, singlecore computation.

GTS 450
1
192
783MHz
1GByte
57.7GB/sec

GTX 590
2
512
607MHz
1.5GByte
163.9GB/sec

Table 3. Hardware conﬁguration for the parallel code.

2. For each test, we ran the reference software and the parallel CUDA implementation, and computed the
2
N−1 ˙
| ξbm [i] |re f erence so f tware , where N is the number of sections in the
following quantity: Ere f mean = i=0
x-axis. Ere f mean represents the energy of the output and is used to normalize the computed error.
N−1 ˙
3. We denote the energy of the error as follows Eerr mean = i=0
(| ξbm [i] |CUDA − | ξ˙bm [i] |re f erence so f tware )2 .

4. Finally, we deﬁne the normalized error as Err =

Eerr mean
Ere f mean .

5.2. Overlapping interval size
As explained earlier in the paper, the aim of the overlapping interval is to eliminate the impact of the initial
value conditions on the output results. That is, unlike in the reference software, the problem is divided into time
intervals and each interval is solved by a diﬀerent CUDA block, using the same initial conditions. The reference
software uses initial conditions only once, for t = 0. The implementation diﬀerence causes an implementation
error. The impact of the initial conditions is largest at the starting point of each block and declines with time.
Since we discard the ﬁrst portion handled by each block (the overlapping interval) we would like the overlapping
interval to be long enough, so that the contribution of the initial conditions to the output decayed suﬃciently and
the parallel implementation error is minimized. Further enlarging the overlapping interval increases execution
time. We performed several simulations to check the impact of the length of the overlapping interval on the error
and the execution time.
Figure 3 shows normalized run time of the parallel implementation as a function of overlapping interval length
for two diﬀerent sinusoidal inputs. For each input the run time is normalized relative to the run time obtained
for an overlapping interval of 0.5ms. The sections computed by each kernel launch had a length of 20ms. As
an example, for a section with an overlapping interval of 10ms we expect to get a normalized run time value of
20+10
∼ 10+0.5
= 1.46, assuming linear behavior. The results conﬁrm this assumption. In all the simulations we used
tBT I = 20ms.
Figure 4 shows the parallel implementation error as function of the overlapping interval size for various sinusoidal inputs with diﬀerent frequencies as well as for the syllable “bor”. For all the inputs the curve has a “knee”
shape around overlapping interval sizes of 2-5ms. For a longer overlapping interval we get reasonably small error
(less than ∼ 10−3 . Therefore, overlapping interval size of 5ms is used in the rest of this paper.
6. Performance of Parallel Algorithm
Prior to evaluating the performance of the parallel algorithm, we ran all the tests using a serial version of the
code. Table 2 shows the conﬁguration of the PC station used for the runs. In the CPU version we used only a
single core for the computations. For the GPU implementation ran the simulations on two cards, NVIDIA GTS
450 and GTX 590. Table 3 shows the conﬁguration of both cards. We only used one GPU of the two available in
the GTX 590.
For performance results we used a set of sinusoidal inputs with frequencies in the range 1KHz to 10KHz and
amplitudes in the range -10dB to 100dB. We also used voice inputs. Figure 5 shows the run time of the CPU
version for sinusoidal inputs, with each input 0.3sec long. The run time varies from 1.5 minutes to 6 minutes
corresponding to ×300 to ×1200 slower than real time.
Figure 6 illustrates the ratio (parallel run time to serial run time) for the two GPU cards. The diagram shows
that the frequency of the input signal has limited eﬀect on the speedup. The amplitude of the input signal, not

690

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

Fig. 3. Normalized run time of the parallel implementation as a
function of the overlapping interval size for two 10KHz sinusoidal
inputs. For each input the run time is normalized by dividing in
the run time of the implementation with overlapping interval size of
0.5ms. The graphs show linear behavior.

Fig. 4. Error of the parallel implementation as a function of the
overlapping interval size for 40dB sinusoidal inputs with diﬀerent
frequencies and for the syllable “bor.”

Fig. 5. Run time of the serial version for sinusoidal inputs. The
input signals are 0.3 sec long. The run time increases with frequency
and amplitude, an indication that the non-linear components of the
model become dominant.

Fig. 6. The ratio (parallel algorithm run time)/(serial run time) for
the GTS 450 and GTX 590 graphics card. For this application GTX
590 is more than twice as fast as GTS 450.

shown in the ﬁgure, has no eﬀect. This result indicates that, although the amount of computation increases with
both the amplitude and frequency of the input (refer to Figure 5), the parallel algorithm keeps its edge over the
serial version for the entire range of signal amplitude and frequency. The speedup of ×160 − ×180 achieved by
the parallel algorithm comes out to a typical slowdown of only 5–6 times relative to real time.
7. Conclusions
The purpose of this work was to design an eﬃcient parallel algorithm that solves the non-linear time-domain
mathematical model of the cochlea. However the non-linear model exhibits little parallelism both in the spatial
dimension and in the time dimension. To achieve our goal in the the spatial dimension we use Jacobi’s method
and show that when using an iterative numerical solution we can take advantage of diﬀerent convergence rates of
the method in diﬀerent iterations. Using a variable number of Jacobi iterations for diﬀerent stages of the solution
improves performance by 20-30 percent.

Doron Sabo et al. / Procedia Computer Science 18 (2013) 682 – 691

The main performance beneﬁt however comes from parallelism. To achieve parallelism in the time dimension,
we show that we can break the computation into time intervals, while keeping an overlap between consecutive
intervals. This approach allows us to solve time intervals in parallel. We also show that, for a stable system,
we can shorten the overlapping intervals and still the initial conditions suﬃciently decline to get small enough
approximation errors. In spite of the iterative nature of the solution and the dependences both in the spatial and
temporal dimensions, we demonstrate a speedup of typically 160 − 180 relative to the serial implementation.
This makes the proposed parallel algorithm of practical value for instance in clinical audiological diagnosis and
hearing-aid ﬁtting. As for to-date, there is no objective method to evaluate the hearing of the impaired listener and
estimate the beneﬁt of a possible hearing aid. Models of normal and abnormal auditory systems can signiﬁcantly
improve the clinical audiological diagnosis and the ability to ﬁt hearing aids. The parallel computational solution
that was introduced in this paper can play an important role in developing eﬃcient automatic tools to ﬁt hearing
aids.
We plan to expand this research in the future by applying the methods devised in this work to other non-linear
computationally-intensive problems.
References
[1] R. Ferry, R. Meddis, A computer model of medial eﬀerent suppression in the mammalian auditory system, Journal of the Acoustical
Society of America 122 (2007) 3519–3526.
[2] M. S. A. Zilany, I. C. Bruce, P. C. Nelson, L. H. Carney, A phenomenological model of the synapse between the inner hair cell and
auditory nerve: Long-term adaptation with power-law dynamics, Journal of the Acoustical Society of America 126 (2009) 2390–2412.
[3] A. Cohen, M. Furst, Integration of outer hair cell activity in a one-dimensional cochlear model, The Journal of the Acoustical Society of
America 115 (5) (2004) 2185–2192.
[4] O. Barzelay, M. Furst, Time domain one-dimensional cochlear model with integrated tectorial membrane and outer hair cells, Vol. 84,
American Institute of Physics, 2011, pp. 79–84.
[5] S. Kakehata, J. Santos-Sacchi, Membrane tension directly shifts voltage dependence of outer hair cell motility and associated gating
charge., Biophysical journal 68 (5) (1995) 2190–7. doi:10.1016/S0006-3495(95)80401-7.
[6] D. Z. He, P. Dallos, Properties of voltage-dependent somatic stiﬀness of cochlear outer hair cells, Journal of the Association for Research
in Otolaryngology 1 (1) (2000) 64–81. doi:10.1007/s101620010006.
[7] S. T. Neely, J. B. Allen, Retrograde waves in the cochlea, Concepts and Challenges in the Biophysics of Hearing - Proceedings of the
10th International Workshop on the Mechanics of Hearing (2009) 62–67doi:10.1142/9789812833785 0011.
[8] Y. Halmut, The prediction of TEOAE in a one dimensional human ear model, M.Sc. thesis, Tel-Aviv University (2006).
[9] C. L. Talmadge, a. Tubis, G. R. Long, P. Piskorski, Modeling otoacoustic emission and hearing threshold ﬁne structures., The Journal of
the Acoustical Society of America 104 (3 Pt 1) (1998) 1517–43.
[10] R. Nagle, E. Saﬀ, A. Snider, Fundamentals of diﬀerential equations, Benjamin/Cummings, 1989.
[11] M. Searc´oid, Metric spaces, Springer Verlag, 2006.
[12] T. Donchev, E. Farkhi, Stability and Euler approximation of one-sided Lipschitz diﬀerential inclusions, SIAM journal on control and
optimization 36 (1998) 780.
[13] D. B. Kirk, W.-m. W. Hwu, Programming Massively Parallel Processors: A Hands-on Approach, Morgan Kaufmann Publishers, 2010.
[14] I. Yavneh, On red black SOR smoothing in multigrid, SIAM J. Sci. Comput 17 (1994) 180–192.
[15] D. G¨oddeke, R. Strzodka, S. Turek, Performance and accuracy of hardware-oriented native-, emulated- and mixed-precision solvers in
FEM simulations, International Journal of Parallel, Emergent and Distributed Systems 22 (4) (2007) 221–256.
[16] Z. Feng, P. Li, Multigrid on GPU: Tackling power grid analysis on parallel SIMT platforms, in: International Conference on ComputerAided Design, 2008, pp. 647–654.
[17] E. Elsen, P. LeGresley, E. Darve, Large calculation of the ﬂow over a hypersonic vehicle using a GPU, Journal of Computational Physics
227 (24) (2008) 10148–10161.
[18] D. G¨oddeke, R. Strzodka, Cyclic reduction tridiagonal solvers on GPUs applied to mixed precision multigrid, IEEE Transactions on
Parallel and Distributed Systems 22 (1) (2011) 22–32.

691

