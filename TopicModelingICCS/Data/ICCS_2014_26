Procedia Computer Science
Volume 29, 2014, Pages 866–876
ICCS 2014. 14th International Conference on Computational Science

A quick earthquake disaster estimation system with fast
urban earthquake simulation and interactive visualization
Kohei Fujita1,2 , Tsuyoshi Ichimura3 , Muneo Hori3 ,
M. L. L. Wijerathne3 , and Seizo Tanaka3
1

Department of Civil Engineering, The University of Tokyo, Tokyo, Japan
2
Research Fellow of the Japan Society for the Promotion of Science
3
Earthquake Research Institute, The University of Tokyo, Tokyo, Japan
{fujita,ichimura,hori,lalith,stanaka}@eri.u-tokyo.ac.jp

Abstract
In the immediate aftermath of an earthquake, quick estimation of damage to city structures
can facilitate prompt, eﬀective post-disaster measures. Physics-based urban earthquake simulations, using measured ground motions as input, are a possible means of obtaining reasonable
estimates. The diﬃculty of such estimation lies in carrying out the simulation and arriving at
a thorough understanding of large-scale time series results in a limited amount of time. We
developed an estimation system based on fast urban earthquake disaster simulation, together
with an interactive visualization method suitable for GPU workstations. Using this system, an
urban area with more than 100,000 structures can be analyzed within an hour and visualized
interactively.
Keywords: Urban earthquake simulation, time to solution, interactive visualization

1

Introduction

Assessing the distribution of damaged city structures immediately after an earthquake is important for a prompt, eﬀective initial response. In an ideal system, damage to individual structural
components (beams, columns) would be detected by installing sensors on each structure in a
city. However, such a system would be expensive to implement, and thus a method is needed
to estimate the damage to structures using ground motion records obtained at observation
stations located every 103∼4 m. Local soil conditions and properties of individual structures
have a strong eﬀect on structural damage, and thus it is desirable to take such information
into account. Also, the estimation must be completed in a short time if it is to be used for
planning a prompt initial response. In current quick disaster estimation systems, structural
damage is estimated by interpolating seismic intensity indices recorded at observation stations,
expressing local soil conditions in terms of ampliﬁcation factors (see [1] for a review of current
866

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.078

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

quick disaster estimation systems). While structural damage can be estimated with small computational cost, the nonlinear behaviors of surface soils and properties of individual structures
are not reﬂected in results obtained using such methods. On the other hand, geospatial data
on structures and local soil conditions in cities are being measured and stored in databases,
and physics-based numerical simulation methods that analyze the seismic responses of soils and
structures are being developed. In this study, we developed a quick disaster estimation system
based on numerical simulation, combining geospatial data and simulation methods to obtain
estimates that incorporate nonlinear responses of soils and structures.
First, a fast simulation method is needed to analyze soils and structures for a quick disaster
estimation system. In an eﬀort to estimate the consequences of anticipated earthquakes, some
studies combine geospatial data with procedures that analyze each phase of an earthquake
disaster. One such simulation method is the Integrated Earthquake Simulator (IES), which
models and analyzes the responses of soils and structures using geospatial data and numerical
analysis techniques of seismic design [2]. Although parallel computational methods have been
applied to IES to carry out the large-scale calculations needed to analyze the responses of
individual structures in a city [3], further acceleration and automation of the overall simulation
procedure is necessary to complete the estimation in a short time.
Eﬀective countermeasures vary depending on the type and severity of the structural damage,
and its distribution throughout a city. Such detailed damage information can be estimated by
observing the dynamic responses of structures (e.g., changes in natural frequencies or plastic
deformation). Accordingly, a seamless understanding of the dynamic responses of structures,
from an overall perspective of the city to close-up views of individual city blocks, is desirable for
planning post-disaster measures. To understand such information in a short time, interactive
visualization of the time series data is needed. Because a large amount of data are obtained from
cities with many structures, the use of standard visualization software on GPU workstations
results in low frame rates, which are not suitable for practical use.
In this study, we developed a quick earthquake disaster estimation system based on fast
urban earthquake simulation and interactive visualization of large-scale time series data. We
automate and accelerate the overall IES procedure so that reasonable estimates for typical city
districts can be obtained in less than an hour. We also improve the frame rate of the interactive
visualization by reducing the complexity of the surface mesh under constraints on visualized
quality, and combining this technique with methods suitable for current GPU workstations.

2

Quick earthquake disaster estimation system

The quick earthquake disaster estimation system consists of a simulation module and a visualization module, as illustrated in Fig. 1. An observed ground motion at surface is input to
the simulation module to compute the time history response of each city structure, using soil
and structural data. In the visualization module, the displacement time series of structures are
visualized interactively to convey the distribution of estimated damage to the users. Instead
of targeting large systems, which have computational job queues and ﬁle transfer overhead, we
target moderate-sized systems that can be employed for disaster estimation purposes.

3

Simulation module

To estimate structural response using observed ground motion as input, the simulation module
integrates (i) a bedrock wave estimation method, (ii) a ground motion analysis method, and
867

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

Input data

Observed ground motion at surface

Bedrock wave estimation
Soil data

Estimated wave
at bedrock
Ground motion analysis

Simulation module
(run on compute cluster)

Estimated wave
at surface
Structure data

Structural response analysis
Estimated response
of structures

Interactive visualization of large-scale time-varying
structural response data

(file transfer)
Visualization module
(run on GPU workstation

Figure 1: Overview of the quick earthquake disaster estimation system

Structures
Surface
Interface between
soil layers
Bedrock

Observed ground
motion at surface
(i) Bedrock wave
estimation

(iii) Structural
response analysis
Estimated wave at surface
(ii) Ground
motion analysis

Figure 2: Overview of the simulation process. (i) Wave at bedrock is estimated using observed
ground motion at surface. (ii) Ground motion analysis is performed under each structure using
local soil properties using estimated wave at bedrock as an input. (iii) Structural response
analysis is performed for each structure using estimated wave at surface.
(iii) a structural response analysis method, as illustrated in Fig. 2. The latest IES technique
computes the earthquake disaster process from the source (fault) to the city, with Monte Carlo
analyses for uncertainty modeling. Such technique is designed for obtaining reliable estimates
using considerable time of high performance computers. In this section, we use parts of the IES
technique and enhance it for fast disaster estimation.
In the original IES technique, seismic waves propagating from a source are input to an
urban earthquake disaster simulation. To obtain a post-disaster estimate via this approach,
bedrock wave estimation must be carried out separately and then input to the program. Such
868

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

manipulations entail a considerable amount of time and human error, and thus are not suitable
for solving time-critical problems. We integrate the bedrock wave estimation method into IES
and automate the overall procedure.
(i) For bedrock wave estimation, we assume a horizontally stratiﬁed soil structure, and
estimate the wave in the engineering bedrock (E) using multiple-reﬂection theory and equivalent
linear analysis. (ii) For ground motion analysis, we use 1D FEM, which is capable of nonlinear
constitutive modeling with relatively small computational cost. We use the Ramberg-Osgood
model and the Masing rule for the nonlinear constitutive model. (iii) For structural response
analysis, we use the one component model, which models individual structural components
(beams and columns) as elements with nonlinear axial, shear, and rotational springs. The
Takeda model is used as the nonlinear constitutive model. These analysis methods are standard
methods used in structural design practice that have been veriﬁed and validated in many
studies. Thus, in principle, the estimates obtained by combining such methods should have high
reliability. On the other hand, analysis methods have limitations depending on the problem to
be solved (e.g., estimation of wave at bedrock is diﬃcult when soil liquefaction has occurred).
In the future, we plan to conﬁrm that each analysis method is used as intended, and validate
the simulation by comparing results with observed damage.
Most of the computational cost is incurred while analyzing the ground motion and structural
response, because bedrock wave estimation is performed only once per run, while ground motion
analysis and structural response analysis are repeated for each structure in the target area.
Accordingly, high-performance computing methods have been applied to ground motion analysis
and structural response analysis for application to cities with large numbers of structures [3].
Here ground motion analysis points and structures are distributed to processes, and serial
programs that analyze each point are run in parallel, using ﬂat MPI. An all-worker model is
used, with static load-balancing at the beginning of the simulation, based on past runtime
measurements.
Large-scale time series data are passed between modules, and thus eﬃcient data-handling
techniques are needed to accelerate the simulation. Using the ﬁle system to pass the computed
wave at surface from the ground motion analysis program to the structural response analysis
program leads to large I/O and expends considerable time. Thus structural response analysis
and ground motion analysis of a given structure are distributed to the same process, so that the
computed wave at surface can be passed through memory, eliminating ﬁle operations. When
outputting structural response data to the ﬁle system, creating ﬁles for each structure leads to
a large number of ﬁles and high overhead. We divide the structures into several groups, and
collect output data for each group to reduce the number of ﬁles and increase the ﬁle size, thereby
improving the ﬁle throughput. Because the structures in each group are scattered among many
processes, the collective output function of MPI-I/O is used to collect and output the data.

4

Visualization module

Because the quick disaster estimation method yields a dynamic displacement response for each
structure in a city, visualization of large-scale time series data is needed. Visualization methods
for large-scale data can be categorized into online (e.g., [4, 5]) and oﬄine rendering methods. Online methods employ the same computer resources used for the main simulation (e.g.,
supercomputers), while oﬄine methods employ computer resources that are not used for the
main simulation (e.g., GPU workstations). Online rendering methods with interactive or batch
operations oﬀer high performance, but occupy the main computer resources, and are often so
complex that they are accessible only to a limited number of highly skilled users. On the other
869

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

1. File input (all time steps)

2’. Nodal data computation on CPU and
caching on main memory
(all time steps, coarse and fine models)

1. File input

3’. Data copying to GPU memory
(connectivity of coarse and fine models)

2. Nodal data computation on
CPU

3. Data copying to GPU
memory

3’’. Data copying to GPU
memory (nodal data of
step/model/tile)

If model or tile
changes

4. Polygon rendering on GPU
4. Polygon rendering on GPU

Time shifting of
preprocessing

else

5. Model and tile
selection

Wait for input
Change
view

Change
time step

i) Original method

Wait for input
Change view
Change time
step

Interactive multi-resolution
and selective rendering
ii) Developed method

Figure 3: Comparison of the visualization methods

hand, oﬄine methods oﬀer moderate performance, but are aﬀordable and comparatively simple. The data that must be visualized in quick disaster estimation typically amount to less
than a terabyte, and thus could be handled by improving the performance of current oﬄine
rendering methods. In this section, we discuss the problems of using standard oﬄine rendering
methods for interactive visualization of time series data, and explain the techniques we have
implemented to improve their performance.
A common approach to oﬄine rendering of polygons utilizes the following procedures: (1)
read data from the ﬁle system, (2) compute nodal values (coordinate, color, normal direction)
on the CPU, (3) transfer nodal data to the GPU, and (4) render the polygons on the GPU, as
illustrated in Fig. 3 i). Procedure (4) is recalculated when the view (camera angle, origin, scale
of parallel projection) is changed, while procedures (1)∼(4) are repeated for each time step in
the time series data.
Table 1 lists the time usage of each procedure when rendering a 6.0 km × 4.5 km urban
region containing 104,962 structures. In this visualization, structures are modeled with roofs
and walls. Each structure is decomposed into triangles (see Fig. 4 i)), which are colored
according to the magnitude of the displacement, with vertices that are warped according to the
displacement vector (see Fig. 5). We used a workstation with dual Intel Xeon X5690 CPUs,
1333 MHz 96 GB DDR3 memory, an Nvidia Quadro 6000 GPU, and a 3 × 500 GB SAS HDD
RAID0 ﬁle system with the RedHat Enterprise Linux 6.2 (x86 64) operating system. The GPU
870

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

Table 1: Model size and time usage of original visualization method. The frame rate of rendering
time series data is 1.0/0.843 = 1.18FPS.
Model size
#nodes
#triangles
Time usage (per time step)
1. File input (s)
2. Nodal data computation on CPU (s)
3. Data copying to GPU memory (s)
4. Polygon rendering on GPU (s)
Total (s)

2,350,064
3,823,024
0.105
0.549
0.144
0.046
0.843

⃷

Structure
shape

i) Original model
(Fine model)

Time history
displacement

=

Visualized
structure

ii) Coarse model

Figure 4: Structure models used for visualization. The ﬁne model is used for the original
method while both models are used in the developed method. Coarse models are generated
by simplifying the geometry of roofs and walls.

Figure 5: 2D schematic view of visualization of polygons with warping by nodal displacement values and coloring by magnitude of displacement. Actual rendering is
performed in 3D with Gourard-shading using OpenGL 4.4 with GLEW 1.10.0 library.

has 6 GB GDDR5 SDRAM memory, and is connected to the motherboard via PCI Express
2.0x16, with a maximum bandwidth of 8 GB/s per direction. OpenGL 4.4 with the GLEW
1.10.0 library is used to implement the visualization program. From the table, we can see that
the time spent for procedure (4) is short, and thus interactive visualization of a single time
step is possible. On the other hand, it is not practical to use such a method for interactive
visualization of time series data, because the sum of the procedures (1)∼(4) is required to
process each time step, resulting in a frame rate of 1.18 FPS.
Under ideal circumstances, it should be possible to render the time series data at the frame
rate of procedure (4), by storing the nodal data in the GPU memory and rendering the corresponding time step on the GPU. On the other hand, because the amount of nodal data
(coordinates, normal vector, RGBα) for each time step is #nodes*10*sizeof(ﬂoat) bytes, it is
not possible to store the complete history in the onboard memories of current GPUs. Thus
we preprocess the nodal data for all time steps in the main memory, and transfer the data
and render the corresponding time steps on the GPU, as illustrated in Fig. 3 ii). Although it
takes time to transfer the nodal data from the main memory to the GPU, we can signiﬁcantly
871

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

increase the interactive frame rate compared to the method in which ﬁle access and nodal data
computation are performed every time a time step is referenced.
Because the time required for data copying and polygon rendering is proportional to the
number of nodes and polygons, respectively, we can expect to further increase the frame rate
by decreasing the model size. Many methods have been developed for simplifying a surface
mesh with minimum degradation in the quality of rendered images (see [6] for a review of multiresolution modeling of a surface mesh). In this study, we implement a two-level multi-resolution
rendering method, which uses a ﬁne model for a close-up view and a coarse (simpliﬁed) model
for a distant view. The ﬁne model is the same as the one used in the original method (Fig. 4
i)), and the coarse model is generated by simplifying the roof to a rectangle, and skipping one
node in every two stories to simplify the walls, as illustrated in Fig. 4 ii). To switch between
the two models,
Use coarse model (r > r0 )
(1)
Use ﬁne model
(else)
is used. Here r denotes the camera scale, ranging in value from 0 to 1, where r = 1 represents
the scale at which the entire model is displayed on the screen. The models are switched
automatically, with r0 acting as a threshold during interactive visualization.
We can further reduce the model size by decomposing the model into non-overlapping domains, and selectively transferring and rendering only the parts of the model that actually
appear on the screen. An urban region normally spreads in the North-South and East-West
directions, and is thin in the vertical direction. Accordingly, we decompose the domain using
a 2D structured grid in the North-South and East-West directions to create disjoint tiles. The
tiles to be rendered are selected by
Render tile
Do not render tile

(PNE , PNW , PSE , PSW or PC is inside screen)
(else)

(2)

and transferred to the GPU. Here PNE , PNW , PSE , PSW , and PC respectively indicate the
Northeast corner, Northwest corner, Southeast corner, Southwest corner, and center of the tile.
Although Eqs. (1) and (2) must be evaluated every time the view is changed, it is expected
that this can be accomplished in a negligible amount of time, because only simple arithmetic
is involved. For time shifting of preprocessing, nodal data for all time steps are prepared and
loaded in the main memory prior to interactive visualization, as illustrated in Fig. 3 ii). The
nodal data of the ﬁne and coarse models are prepared and partitioned for multi-resolution
rendering and selective rendering.

5
5.1

Performance measurements and application
Performance of simulation

We measure the performance of the simulation module. Again we target a 6.0 km × 4.5 km
domain with 104,962 structures, and compute the response to an earthquake lasting 40.96 s. The
domain is an urban region of central Tokyo, with business, commercial, and heavily populated
residential districts. It is decomposed into nine 2.0 km × 1.5 km tiles, such that the structures
are almost evenly distributed among the tiles. The wave is computed with time discretization
of 0.002 s for the ground motion analysis, while 0.005 s is used for the structural analysis. The
responses of the structures from t = 6 s to 26 s (dt = 0.02 s, 1,000 steps), amounting to a total
size of 6.58 GB, are output to the ﬁle system.
872

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

Table 2: Time usage of developed simulation method. Numbers indicate average time spent
for all processes in seconds, while numbers in brackets indicate the ratio of speedup compared
with that of 48 processes. Near ideal strong-scaling is attained with 192 processes (98.7%).
Processes used for analysis
Preparation (s)
Ground motion (s)
Structure response (s)
File output (s)
Total (s)

48
0.7
6918.0
4856.0
21.1
11795.9

0.8
3475.7
2407.1
28.3
5912.0

96
(0.86)
(2.00)
(2.01)
(0.75)
(1.99)

0.6
1737.9
1216.6
28.2
2983.2

192
(1.30)
(3.98)
(3.99)
(0.75)
(3.95)

Table 2 lists the time spent analyzing the problem when diﬀerent numbers of processes are
used. Here runtime is measured using a computing cluster with 16 computing nodes, each
with dual Hexa-core Intel Xeon X5680 CPUs with 1333 MHz 48 GB DDR3 memory, connected
with Quad data rate InﬁniBand communication links, with a 12 × 300 GB SAS HDD RAID10
ﬁle system. We can see that the time used for analysis decreases as the number of processes
increases, and that the analysis can be completed in less than an hour when 192 processes are
used.

5.2

Performance of visualization

Table 3 lists the time and memory used for interactive visualization. We enhanced a commercial
visualization software (AVS/Express of Cybernet Systems Co., Ltd.) for implementation of
the module, and used the same problem and workstation described in Sections 4 and 5.1 for
measurement. The domain is decomposed into nine 2.0 km × 1.5 km tiles, as before. We can
see that the respective numbers of nodes and elements of the coarse model are 0.32 and 0.23
times those of the ﬁne model. We can also see that 119 MB of memory per time step is used
to store the coarse and ﬁne models in the main memory. The amount of memory usage is not
a problem, because terabytes of memory can be installed in the latest workstations.
We ﬁrst consider the time spent on preparation. Because the coarse model is computed from
the ﬁne model on the ﬂy, the amount of data read from the ﬁle system is the same as that of
the original version. Thus the time spent ﬁle-reading is about the same as that of the original
version. In the version developed in the present research, nodal data are computed for both
the coarse model and the original model, and thus the nodal computation time is increased
by a factor of 1.26. Copying connectivity information from the main memory to the GPU is
obtained only once per run, and thus the time spent on procedure (3’) is negligible compared
to the other procedures.
Next, we measure the rendering time for each model, and compare it to the measurements
for the original method (Table 1). Because the model size is decreased and only nodal data are
transferred to the GPU, the time spent on copying data for the coarse model (all tiles) to GPU
memory is about 1/13 that of the original method. The polygon rendering time also decreases
with the model size. This results in a frame rate of 1.0/0.0296 = 33.8FPS when visualizing the
time series data. Furthermore, we can see that the additional reduction in model size when
zooming in on 1 tile (ﬁne model) results in a frame rate of 1.0/0.0126 = 79.4 FPS. The time
spent selecting the models and tiles is negligible compared to the total rendering time.
873

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

Table 3: Memory and time usage of developed visualization method. Time indicates averaged
values of 100 time steps. The frame rate of rendering time series data is 1.0/0.0296 = 33.8FPS
and 1.0/0.0126 = 79.4FPS for all tiles (coarse model) and 1 tile (ﬁne model), respectively.

Model sizes
Fine model
#nodes
#triangles

2,350,064
3,823,024

#nodes
#triangles

755,248
880,884

Coarse model

Memory usage
Nodal data per time step
Others

118.5MB
87.8MB

Time usage
Preparation
1. File input, per time step (s)
2. Nodal data computation on CPU, per time step (s)
3’. Data copying to GPU memory, once for all steps (s)
Total, per time step (s)
Rendering (coarse model, all tiles)
3”. Data copying to GPU memory (s)
4’. Polygon rendering on GPU (s)
Total (s)
Rendering (ﬁne model, 1 tile)
3” Data copying to GPU memory (s)
4’. Polygon rendering on GPU (s)
Total (s)
Model and region selection
5. Evaluation of Eq.(1) & Eq.(2)

5.3

0.1036
0.6890
0.1440
0.7940
0.0185
0.0111
0.0296
0.0064
0.0062
0.0126
<1ms

Application

An application of the quick disaster estimation system is shown in Fig. 6. We again use the
problem employed for the time measurements in Sections 5.1 and 5.2. For a 100-step time series
dataset, after 79 s of ﬁle-reading and computation of nodal values on the CPU, the screen boots
with a view of the entire domain using the coarse model, as shown in Fig. 6 (i). When the
play button is pressed, the time steps proceed as shown in Fig. 6 (i)∼(i”). The frame rate here
is about 33.8 FPS. When the mouse is scrolled, the view zooms to the center of the domain,
and the model automatically changes from the coarse model to the ﬁne model, as shown in
Fig. 6 (ii) and (iii). The time spent changing between the ﬁne and coarse models is 0.097 s.
The mouse is used to interactively change the view, as shown in Fig. 6 (iv) and (v). We can
continue to move through the time series data by again pressing the play button, as shown in
Fig. 6 (v)∼(v”). Here the frame rate is about 79.4 FPS. Although it is not shown here, we can
zoom out to display the entire domain again, or rotate/zoom to have a better look at a city
block of particular interest, and replay the time series data with the same FPS as before.
874

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

i) Overall view (coarse model)

i’) Time stepping (33.8FPS)

i’’) Time stepping (33.8FPS)

ii) Medium view (coarse model)

iii) Medium view (fine model)

iv) Close up view (fine model)

v) Close up view (fine model)

v’) Time stepping (79.4FPS)

v’’) Time stepping (79.4FPS)

Figure 6: Usage of the developed system. White squares indicate the region of view in the next
subﬁgure. Interactive visualization is possible for time series data with 100,000 structures.

6

Closing remarks

We developed an earthquake disaster estimation system that uses physics-based numerical simulation methods to obtain the distribution of urban structural damage following an earthquake.
We automated and accelerated the overall simulation process, and implemented a module for
interactive visualization of time series data. Using this system, we were able to carry out
disaster estimation for 100,000 structures in less than an hour, taking nonlinear ground and
structural properties into account, and to visualize time series structural response results with
interactive frame rates.
In the future, we plan to improve our method to make it applicable to large cities, such
as Tokyo as a whole, with 10 times the number of structures targeted in the present study.
We expect that such problems can be handled using larger number of computing nodes for
the simulation, and by modifying the visualization module by increasing the number of multiresolution levels, so that larger domains can be interactively visualized with lower-resolution
models. Together with background reading/computing of nodal data, we plan to use dataencoding methods (e.g., [7]) to load more time steps in memory and reduce the time required
875

Quick earthquake disaster estimation system

Fujita, Ichimura, Hori, Wijerathne, and Tanaka

to transfer data to GPU memory.
Acknowledgments We acknowledge the support of Ms. Sachiko Hayashi of Cybernet Systems Co., Ltd., for implementation of our visualization methods in AVS/Express.

References
[1] M. Erdik, K. Sesetyan, M.B. Demircioglu, U. Hancilar, and C. Zulﬁkar. Rapid earthquake loss
assessment after damaging earthquakes. Soil Dyn. Earthq. Eng., 31(2):247 – 266, 2011.
[2] Muneo Hori and Tsuyoshi Ichimura. Current state of integrated earthquake simulation for earthquake hazard and disaster. Journal of Seismology, 12(2):307–321, 2008.
[3] M. L. L. Wijerathne, M. Hori, T. Kabeyazawa, and T. Ichimura. Strengthening of parallel computation performance of integrated earthquake simulation. J. Comput. Civ. Eng., 2012.
[4] James P. Ahrens, Jonathan Woodring, David E. DeMarle, John Patchett, and Mathew Maltrud.
Interactive remote large-scale data visualization via prioritized multi-resolution streaming. In Proceedings of the 2009 Workshop on Ultrascale Visualization, UltraVis ’09, pages 1–10, 2009.
[5] T. Tu, H. Yu, L. Ramirez-Guzman, J. Bielak, O. Ghattas, K. L. Ma, and D. R. O’Hallaron. From
mesh generation to scientiﬁc visualization: an end-to-end approach to parallel supercomputing. In
Proceedings of the 2006 ACM/IEEE conference on Supercomputing, SC ’06, 2006.
[6] M. Garland. Multiresolution modeling: Survey & future opportunities. In Eurographics ’99 – State
of the Art Reports, pages 111–131, 1999.
[7] K. L. Ma. Visualizing time-varying volume data. Comput. Sci. Eng., 5(2):34–42, 2003.

876

