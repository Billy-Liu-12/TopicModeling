Seismic Wave Field Modeling with Graphics
Processing Units
Tomasz Danek
Department of Geoinformatics and Applied Computer Science,
Faculty of Geology, Geophysics and Environmental Protection
AGH University of Science and Technology,
Al. Mickiewicza 30, 30-059 Krakow, Poland
tdanek@agh.edu.pl

Abstract. GPGPU - general-purpose computing on graphics processing units is a very eﬀective and inexpensive way of dealing with time
consuming computations. In some cases even a low end GPU can be
a dozens of times faster than a modern CPUs. Utilization of GPGPU
technology can make a typical desktop computer powerful enough to
perform necessary computations in a fast, eﬀective and inexpensive way.
Seismic wave ﬁeld modeling is one of the problems of this kind. Some
times one modeled common shot-point gather or one wave ﬁeld snapshot
can reveal the nature of an analyzed wave phenomenon. On the other
hand these kinds of modelings are often a part of complex and extremely
time consuming methods with almost unlimited needs of computational
resources. This is always a problem for academic centers, especially now
when times of generous support from oil and gas companies have ended.

1

Introduction

Recent rapid development of computer based entertainment made graphics cards
one of the most important part of whole computer systems. Typical modern personal computer systems and a constantly growing percentage of portable systems
are designed to be multimedia centers. Fortunately some of a modern entertainment technology can be used for something more than an entertainment. It is
well known that a graphic processing unit is in fact a powerful parallel system
dedicated for matrix-to-matrix calculations (rendering). During last years many
methods of using this power for calculations were developed. Intensive involvement of two the most important companies at this market: NVIDIA and ATI
results in a marvelous dedicated software (e.g. CUDA, Stream SDK) and an astonishing hardware (NVIDIA TESLA). At the same time classic methods based
on OpenGL including additions and standard hardware were developed. This paper is focused only on noncommercial, as free as possible, open-source solutions
of the later kind. These solutions are usually better for long academic projects
because rules of usage are clear and constant which is not always true in the
case of commercial software, even if one can use them without any additional
costs. One of the typical projects of this kind is a seismic wave ﬁeld modeling.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 435–442, 2009.
c Springer-Verlag Berlin Heidelberg 2009

436

T. Danek

The growing popularity of this method in seismic and seismology (e.g. [1,2]) has
been recently connected with the usage of inexpensive HPC clusters (e.g. [3]).
But access to supercomputers or HPC clusters is usually limited. It is very common that small local problems, which can be easily solved with parallel computations have to be queued for hours because there are not enough free cluster
resources. Moreover, many new extremely computationally expensive methods
which use wave ﬁeld modelings are being developed now. For example full wave
form inversion through Monte Carlo sampling sometimes requires hundreds of
thousands of models to be computed [2].

2

Seismic Wave Field Modeling

Wave ﬁeld modeling is an important tool for seismic exploration and seismology.
It can be used during all stages of seismic investigations and for various earthquake related analysis. First attempts of using a seismic wave ﬁeld modeling were
undertaken in the seventies by Alford, Kelly and others [4,5]. These attempts
were limited to very small models due to the limitations of computers at that
time. Even now serial computations for models of a standard exploration scale
could last many days. Fortunately wave ﬁeld modeling is a problem which is
easy and eﬀective to solve with parallel systems. In this paper a simple acoustic
wave equation was chosen for a test computation:
∂2p
− c2
∂t2

∂2p ∂2p
+ 2
∂x2
∂z

= f (x, z, t)

(1)

where p(x, z) is pressure, c(x, z) is velocity of acoustic wave, t is time and f
denotes function which describes pressure change in source.
The second order ﬁnite diﬀerence approximation of the above equation (without source term) can be written as follows[4]:
p(i, j, k + 1) =
2(1 − 2γ 2 )p(i, j, k) − p(i, j, k − 1)
+γ 2 (p(i + 1, j, k) + p(i − 1, j, k) + p(i, j + 1, k) + p(i, j − 1, k))

Fig. 1. Example result of acoustic wave ﬁeld modeling

(2)

Seismic Wave Field Modeling with Graphics Processing Units

437

where γ=cΔt/δh, Δt is the time sampling interval, Δh is the distance between
the grid points
in x and z directions. The stability criterion for the above scheme
√
is: γ ≤ 1/ 2.
It is also necessary to add proper border conditions. In this tests typical nonreﬂective boundary conditions by Reynolds [6] were used.
One of possible modeling result presentations, a snapshot of wave ﬁeld propagating through complicated geological medium is presented in Figure 1.

3

GPGPU

GPGPU - General-Purpose computation on GPUs is one of the most rapidly
developing part of modern computer science. Originally GPUs were created for
very speciﬁc operations connected only with graphics. Later, when new advanced
features - like possibility of ﬂoating point parallel operations - were introduced,
it became clear that these units can be used for very fast and extremely inexpensive calculations. At the beginning this kind of utilization of GPUs seemed
to be only marginal part of the IT market. But now, when the ﬁrst GPU-based
heterogeneous cluster joined the ”Top 500”, (November 17th, 2008) GPGPU is a
mainstream technology with a sophisticated dedicated hardware and an eﬀective
commercial software. At the same time many free and open software solutions
were created. They made a typical hardware to be much more programmerfriendly (e.g. BrookGPU).
The main source of computational power of a GPU is its design. Most of the
transistors are dedicated to a data processing when the caching and data control
functionalities are limited [7] (see Figure 2). This high specialization makes a
GPU powerful tool for computations but at the same time makes it very weak
for many other tasks which are hard to parallelize, like all kind of applications
dominated by memory communication [8]. There are also other limitations like
amount of memory and texture sizes. Usually all computational problems have
to ﬁt into 1GB of memory and 4096 to 8192 texture size.

Fig. 2. Comparison of the design diﬀerences between CPU (left) and GPU (right)
architecture [7]. (white: ALU; light gray: data control; dark gray: cache; black: DRAM).

438

4

T. Danek

Implementation

The proposed solution was tested on one of the departmental PC cluster, made
of 30 computers with low end AGP Nvidia adapters. The best ones were 7300 GT
with 256 MB memory. Additional tests were done on PCI Express Nvidia 8600
GT card with 512 MB memory. Other important card parameters are shown in
table 1. All cluster machines were working under Linux operating system but
all tests were repeated for MS Windows XP for comparison purposes. In both
cases the newest possible standard drivers were used. All test codes have been
written in C (gcc for Linux and VC++ for Windows) and OpenGL shading
language (Listing 1). Data were stored in GL TEXTURE RECTANGLE ARB
texture targets which are the most natural targets for computational purposes.
It is because of a lack of coordinates normalization and an arbitrary dimensions. In all cases only one ﬂoating point number per texel was stored, therefore GL LUMINANCE texture format and GL FLOAT R32 NV internal format
were used. For intra-cluster communication mpich implementation of MPI was
used. All test runs were done for a simple two layer geological model of various
sizes. Wave velocity in upper layer was 1000 m/s and 2000 m/s in lower. Wave
motion was modeled for 0.3 second. Distance between grid points was 1 meter
Table 1. Parameters of GPUs used in tests
Model

Chip

Core
Memory Memory Pixel
Vertex
clock
clock
type
shader shader
7300 GT G73 400 MHz 1000 MHz GDDR3
8
4
(128Bit)
8600 GTS G84 675 MHz 2000 MHz GDDR3 up to 32 up to 32
(128Bit)

Listing 1. OpenGL shading language implementation of equation 2. vec2 type
was used for code clarity. V p - wave velocity; p and pm - wave ﬁeld at time t
and t − 1; ds - distance between grid points; dtr - time step.
v1=vec2(gl_TexCoord[0].x,gl_TexCoord[0].y);
w=2.0*texture2DRect(p,vec2(v1.x,v1.y)).x
-texture2DRect(pm,vec2(v1.x,v1.y)).x
+((dtr*dtr)/(ds*ds))
*texture2DRect(Vp,vec2(v1.x,v1.y)).x
*texture2DRect(Vp,vec2(v1.x,v1.y)).x*(
texture2DRect(p,vec2(v1.x+1.0,v1.y)).x
+texture2DRect(p,vec2(v1.x-1.0,v1.y)).x
+texture2DRect(p,vec2(v1.x,v1.y+1.0)).x
+texture2DRect(p,vec2(v1.x,v1.y-1.0)).x
-4.0*texture2DRect(p,vec2(v1.x,v1.y)).x
);

Seismic Wave Field Modeling with Graphics Processing Units

439

which means that 1200 iterations were needed for ﬁnal result. In all numerical
experiments non-reﬂective boundary conditions were used. In case of GPU computations these kind of conditions are applied by proper if statements which
makes computations up to 10% slower. Alternatively attenuating boundary conditions can be used but they require an additional texture to be created, which
is memory consuming. Additionally all models were calculated conventionally
using typical cluster node with Intel Pentium 4 3.0 Ghz processor and 2 GB
of memory. In this part of the experiment GNU and Intel compilers were used.
Obtained times were a base for unoptimized and optimized speedup calculations.

5

Selected Results and Discussion

In the experiment computational times needed by both of the analyzed GPUs
were calculated for Linux and Windows operating systems. The relation between
time of computations and model size is shown in Figure 3. The results show that
in 8600 GTS card case computations for the very small models are marginally
faster under Linux system but for larger models Windows driver is faster. The
interesting phenomenon is a rapid increase of the time of computations for the
largest analyzed model under Linux. Exactly the same was observed for one of
the older Windows drivers, so probably this problem will be ﬁxed in the future.
Surprisingly in the case of 7300 GT relation between results is reversed and
computations under Linux are usually faster. Figures 4, 5 and 6 show how much
faster GPU computations are in comparison with unoptimized and optimized
codes run on Intel P4 3.0 GHz CPU . It is clearly visible that for usual scale
models GPU computations are 10 (7300 GT) to 50 (8600 GTS) times faster than
gcc compiled CPU code with default set of ﬂags (no optimization)(Figure 4). Results of similar experiment but for optimized gcc code are presented in Figure 5.
The fastest code was obtained for singe -O3 ﬂag. Executables compiled with
more sophisticated options were slower or their average processor time was almost exactly the same. In this case GPU version was up to 20 times faster.
The last comparison was done for Intel C compiler (Figure 6). As it was expected icc codes with standard set of ﬂags and autoparallelization were better
than those generated with gcc, but still 8600 GTS card was over a dozen times
faster. It is important to emphasize that both cards are inexpensive and one
can get the cheaper one for much less then 100 USD. The other important phenomenon to discuss is a rapid fall of the acceleration curve for larger model in the
case of the 8600 GTS card. GPGPU calculations speedup curves usually have
rather unstable shape which is strongly connected with the version of the card
driver. It is also important to realize that analyzed case is special and very well
suited for GPGPU and one should not expect similar speedups for other kinds of
computations.

6

Summary

Possibility of GPGPU computations application in seismic wave ﬁeld modeling
was presented in this paper. It is clearly visible that graphics processing units

440

T. Danek

120
8600 GTS LINUX
8600 GTS WINDOWS

100
7600 GT LINUX
7600 GT WINDOWS

Time [s.]

80

60

40

20

0

0
80
0
10
00
12
00
14
00
16
00
18
00
20
00
22
00
24
00
26
00
28
00
30
00
32
00
34
00
36
00
38
00
40
00

60

40

20

0

0

Model size

Fig. 3. Relation between time of computations and size of the model for selected hardware and systems. Values on bottom axis represent grid points per side of rectangular
model. Black bars: 8600 GTS - Linux; dark gray bars: 8600 GTS - Windows; light gray
bars: 7300 GT - Linux; white bars: 7300 GT - Windows.

60

Relative speedup

50

40
8600 GTS LINUX
8600 GTS WINDOWS

30
7600 GT LINUX
7600 GT WINDOWS

20

10

0
0

500

1000

1500

2000

2500

3000

3500

4000

Model size

Fig. 4. Relative speedups for selected hardware and systems. The base for speedup
calculations is time of conventional CPU computations performed on Intel Pentium 4
3.0 GHz processor - results for unoptimized gcc. Black rectangles: 8600 GTS - Linux;
dark gray rectangles: 8600 GTS - Windows; light gray triangles: 7300 GT - Linux;
white triangles: 7300 GT - Windows.

Seismic Wave Field Modeling with Graphics Processing Units

441

60
8600 GTS LINUX
8600 GTS WINDOWS

50
7600 GT LINUX

Relative speedup

7600 GT WINDOWS

40

30

20

10

0
0

500

1000

1500

2000

2500

3000

3500

4000

Model size

Fig. 5. Relative speedups for selected hardware and systems. The base for speedup
calculations is time of conventional CPU computations performed on Intel Pentium 4
3.0 GHz processor - results for the best set of gcc optimization options. Black rectangles:
8600 GTS - Linux; dark gray rectangles: 8600 GTS - Windows; light gray triangles:
7300 GT - Linux; white triangles: 7300 GT - Windows.

60
8600 GTS LINUX
8600 GTS WINDOWS

50
7600 GT LINUX

Relative speedup

7600 GT WINDOWS

40

30

20

10

0
0

500

1000

1500

2000

2500

3000

3500

4000

Model size

Fig. 6. Relative speedups for selected hardware and systems. The base for speedup
calculations is time of conventional CPU computations performed on Intel Pentium 4
3.0 GHz processor - results for the best set of Intel compiler (icc) optimization options.
Black rectangles: 8600 GTS - Linux; dark gray rectangles: 8600 GTS - Windows; light
gray triangles: 7300 GT - Linux; white triangles: 7300 GT - Windows.

442

T. Danek

are very eﬀective in this kind of computations. It should be stressed that presented tests are preliminary and other more complicated cases must be studied.
Anyway the obtained results are promising and can be a contribution to studies
concerning eﬃciency of alternative modern HPC methods in seismic and seismology.
Acknowledgments. This work was ﬁnanced by the AGH - University of Science and Technology, Faculty of Geology, Geophysics and Environmental Protection as a part of statutory project number 11.11.140.561.

References
1. Pietsch, K., Marzec, P., Kobylarski, M., Danek, T., Lesniak, A., Tatarata, A.,
Gruszczyk, E.: Identiﬁcation of seismic anomalies caused by gas saturation on the
basis of theoretical P and PS waveﬁeld in the Carpathian Foredeep, SE Poland.
Acta Geophysica 55(2) (2007)
2. Debski, W., Danek, T., Pieta, A., Lesniak, A.: Waveform inversion through the
Monte Carlo sampling. In: 31st General assembly of the European Seismological
Commission, Hersonissos, Crete (2008)
3. Lesniak, A., Danek, T.: Eﬃciency of Linux clusters in multi-component elastic wave
ﬁeld modeling in anisotropic media. In: 68th EAGE conference and exhibition, Wien
(2006)
4. Alford, R.M., Kelly, K.R., Boore, D.M.: Accuracy of ﬁnite - diﬀerence modeling of
acoustic wave propagation. Geophysics 39(6) (1974)
5. Kelly, K.R., Ward, R.W., Treitel, S., Kelly, K.R., Alford, R.M.: Synthetic seismograms: A ﬁnite-diﬀerence approach. Geophysics 41(6) (1975)
6. Reynolds, A.C.: Boundary conditions for the numerical solution of wave propagation
problems. Geophysics 43 (1978)
7. NVIDIA CUDA Compute Uniﬁed Device Architecture Programming Guide. Version
2.0 - 06. 07 (2008)
8. Owens, J.D., Luebke, D., Govindaraju, N., Harris, M., Kruger, J., Lefohn, A.E.,
Purcell, T.J.: A Survey of General-Purpose Computation on Graphics Hardware.
Computer Graphics forum 26(1) (2007)

