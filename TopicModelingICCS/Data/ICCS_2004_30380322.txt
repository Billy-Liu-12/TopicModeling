Petri Nets as Executable Speciﬁcations of
High-Level Timed Parallel Systems
Franck Pommereau
LACL, Universit´e Paris 12 — 61, avenue du g´en´eral de Gaulle
94010 Cr´eteil, France
pommereau@univ-paris12.fr

Abstract. We propose to use high-level Petri nets for the semantics
of high-level parallel systems. This model is known to be useful for the
of veriﬁcation and we show that it is also executable in a parallel way.
Executing a Petri net is easy in general but more complicated in a timed
context, which makes necessary to synchronise the internal time of the
Petri net with the real time of its environment. Another problem is to
relate the execution of a Petri net, which has its own semantics, to that
of its environment; i.e., to properly handle input/output.
This paper presents a parallel algorithm to execute Petri nets with time
enforcing the even progression of the internal time with respect to the
real time and allowing the exchange of information with the environment.
We deﬁne a class of Petri nets suitable for a parallel execution machine
which preserves the step sequence semantics of the nets and ensures
time consistent executions while taking into account the solicitation of
its environment. The question of the eﬃcient veriﬁcation of such nets
has been addressed in a separate paper [4], the present one is focused
on the practical aspects involved in the execution of so modelled systems.
Keywords: Petri nets, parallelism, real-time, execution machines.

1

Introduction

Petri nets are widely used as a model of concurrency, which allows to represent
the occurrence of independent events. They can be as well a model of parallelism,
where the simultaneity of the events is more important, when we consider their
step sequence semantics in which an execution is represented by a sequence of
steps, i.e., simultaneous occurrences of transitions. In this paper, we consider
high-level Petri nets for modelling high-level parallel systems, with the aim to
allow both veriﬁcation and execution of the speciﬁcation. Petri nets like those
used in this paper are already used has a semantical domain for parallel programming languages or process algebra, e.g., [3,4]. These approaches could be
directly applied to massively parallel languages or formalisms.
Executing a Petri net is not diﬃcult when we consider it alone, i.e., in a
closed world. But as soon as the net is embedded in an environment, the question
becomes more complicated. The ﬁrst problem comes when the net is timed: we
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 322–330, 2004.
c Springer-Verlag Berlin Heidelberg 2004

Petri Nets as Executable Speciﬁcations

323

have to ensure that its time reference matches that of the environment. The
second problem is to allow an exchange of information between the net and its
environment. Both these questions are addressed in this paper.
This work is set in the context of causal time which allows to use “ordinary”
(untimed) Petri nets by explicitly introducing a tick transition which increments
counters used as clock watches by the rest of the system [2,5]. It was shown in [1,
4] that the causal time approach is highly relevant since it is simple to put into
practice and allows for eﬃcient veriﬁcation through model checking. In this
context, the tick transition of a Petri net may causally depend on the other
transitions in the net, which results in the so called deadline paradox [2]: tick
is disabled until the system progresses. In the closed world of veriﬁcation, this
statement is logically equivalent to “the system has to progress before the next
tick”, which solves the paradox. But, this is not the case in the open world of
execution.
In this paper, we deﬁne a parallel execution machine whose role is to run a
Petri net with a tick transition in such a way that the ticks occur evenly with
respect to the real time. We show that this can be ensured under reasonable
assumptions about the Petri net. The other role of the machine is to allow the
communication between the Petri net and the environment. Producing output
is rather simple since the net is not disturbed; but reading input (i.e., changing
the behaviour of the net in reaction to the changes in the environment) is more
diﬃcult and may not be always possible. We will identify favourable situations,
very easy to obtain, in which the reaction to a message is ensured within a
short delay. An important property of our execution machine is that it preserves
the step sequence semantics of the Petri net: this machine can be seen as an
implementation of the Petri net execution rule including constraints related to
the environment (real time and communication).
This paper is an extended abstract of a technical report which can be found at
http://www.univ-paris12.fr/lacl where more details (and proofs) are given.

2

Basic Deﬁnitions about Petri Nets

This section brieﬂy introduces the class of Petri nets that will be used in the
following. We assume that the reader is familiar with the notion of multisets and
we denote by mult(X) the set of all ﬁnite multisets over a set X.
Let S be a set of actions symbols, D a ﬁnite set of data values (or just values)
and V a set of variables. For F ⊆ S and X ⊆ D ∪ V, we denote by F ⊗ X the
df
set {a(x) | a ∈ F, x ∈ X}. Then, we deﬁne A = S ⊗ (D ∪ V) as the set of actions
(with parameters). These four sets are assumed pairwise disjoint.
A labelled marked Petri net is a tuple N = (S, T, , M ) where:
– S is a non-empty ﬁnite set of places;
– T is a non-empty ﬁnite set of transitions, disjoint from S;
– deﬁnes the labelling of places, transitions and arcs (elements of (S × T ) ∪
(T × S)) as follows:

324

F. Pommereau

• for s ∈ S, the labelling is (s) ⊆ D which deﬁnes the tokens that the
place is allowed to carry (often called the type of s),
df
• for t ∈ T , the labelling is (t) = α(t)γ(t) where α(t) ∈ A and γ(t) is a
boolean expression called the guard of t,
• for (x, y) ∈ (S × T ) ∪ (T × S), the labelling is (x, y) ∈ mult(D ∪ V)
which denotes the tokens ﬂowing on the arc during the execution of the
attached transition. The empty multiset ∅ denotes the absence of arc;
– M is a marking function which associates to each place s ∈ S a multiset in
mult( (s)) representing the tokens held by s.
Petri nets are depicted as usual with several simpliﬁcations: the two components of transition labels are depicted separately; true guards and brackets
around sets are omitted; arcs may be labelled by expressions as a shorthand,
like n + 1 in the ﬁgure 1 page 325 which could be replaced by y ∈ V by adding
a guard y = n + 1 to the transition tτ .
A binding is a function σ : V → D which associates concrete values to the
variables appearing in a transition and its arcs. We denote by σ(E) the evaluation
of the expression E bound by σ. Let (S, T, , M ) be a Petri net, and t ∈ T one
of its transitions. A binding σ is enabling for t at M if the guard evaluates to
true, i.e., σ(γ(t)) = , and if the evaluation of the annotations on the adjacent
arcs respects the types of the places, i.e., for all s ∈ S, σ( (s, t)) ∈ mult( (s))
and σ( (t, s)) ∈ mult( (s)).
A step corresponds to the simultaneous execution of some transitions, it is
a multiset U = {(t1 , σ1 ), . . . , (tk , σk )} such that ti ∈ T and σi is an enabling
binding of ti , for 1 ≤ i ≤ k. U is enabled if the marking is suﬃcient to allow the
ﬂow of tokens required by the execution of the step. It is worth noting that if a
step U is enabled at a marking, then so is any sub-step U ≤ U . A step U enabled
by M may be executed, leading to the new marking M deﬁned for all s ∈ S by
df
M (s) = M (s) − (t,σ)∈U U ((t, σ)) ∗ σ( (s, t)) + (t,σ)∈U U ((t, σ)) ∗ σ( (t, s)).
This is denoted by M [U M which naturally extends to sequences of steps. A
marking M is reachable from a marking M if their exists a sequence of steps ω
such that M [ω M ; we will say in this case that M enables ω.
The labelled step associated to a step U is deﬁned as (t,σ)∈U U ((t, σ)) ∗
σ(α(t)), which allows to deﬁne the (labelled ) step sequence semantics of a Petri
net as the set containing all the sequences of (labelled) steps enabled by a net.
A Petri net (S, T, , M ) is safe if any marking M reachable from M is such
that, for all s ∈ S and all d ∈ (s), M (s)(d) ≤ 1, i.e., any place holds at most
one token of each value. The class of safe Petri nets is very interesting for both
theoretical and practical reasons. In particular, they have ﬁnitely many reachable
markings, each of which enabling ﬁnitely many steps whose sizes are bounded
by the number of transitions in the net. As many previous works [5,1,4,3], this
paper only considers safe Petri nets.

Petri Nets as Executable Speciﬁcations
Ù ´Ü µ Ø¿
Ý

¼

º

Ø
Ò

Ü

¼

¯ ¯

Ñ

¯

Ø½

½ ´Ñ µ

Ò·½

Ý

¼

¼

¼

Ñ

Ø¾

¾´ µ

Ñ

º

¯ ¯

½

½
¼½

½
Ü

Ý
Ñ

¼

Ù ´ Ü µ Ø¿

º

¼ ¼

¼

Ñ

´Òµ

Ò

¯

Ø½

½ ´Ñ µ

º

´Ò µ
Ò·½

¼ ¼

¼

Ñ
Ñ

Ø

325

Ý
Ñ

¼

Ñ

Ø¾
¾´ µ

Ñ

Fig. 1. On the left: an example of a CT-net, where η > 0, {a1 , a2 , u, τ } ⊆ S,
{c, n, m, x, y} ⊆ V and {0, . . . , η} ∪ {•} ⊆ D. On the right: the tick-reactive version
of this net, where i ∈ V

3

Petri Nets with Causal Time: CT-Nets

The class of Petri nets we are actually interested in consists in safe labelled Petri
nets, with several restrictions, for which we will deﬁne some speciﬁc vocabulary
related to the occurrence of ticks. We assume that there exists τ ∈ S.
A Petri net with causal time (CT-net) is a safe Petri net (S, T, , M ) in
which there exists a unique tτ ∈ T such that α(tτ ) ∈ {τ } ⊗ (D ∪ V) and, for all
t ∈ T \ {tτ }, we have α(t) ∈
/ {τ } ⊗ (D ∪ V). Moreover, we impose that tτ has at
least one incoming arc labelled by a singleton. This transition tτ is called the tick
transition of the net. A tick-step is a step U which involves the tick transition,
i.e., such that τ (d) ∈ U for a d ∈ D. Thanks to the safety and the last restriction
on tτ , any tick-step contains exactly one occurrence of the tick transition.
The left of the ﬁgure 1 gives a toy CT-net in which the role of the tick
transition is to increment a counter located in the top-right place. When the
transition t1 is executed, it resets this counter and picks in the top-left place
a value which is bound to the variable m. This value is transmitted to the
transition t2 which will be executable when at least m ticks will have occurred.
Thus, m speciﬁes the minimum number of ticks between the execution of t1 and
that of t2 . At any time, the transition t3 may randomly change the value of this
minimum while emitting a visible action u(x) where x is the new value. Notice
that the maximum number of ticks between the execution of t1 and that of t2
is enforced by the type of the place connected to tτ which speciﬁes that only
tokens in {0, . . . , η} are allowed (given η > 0).
Assuming η ≥ 5, a possible execution of this CT-net is {τ (0)}{u(2)}{a1 (2)}
{τ (0), u(1)}{τ (1)}{u(5)}{τ (2)}{τ (3)}{a2 (3), u(0)}{τ (4)}.
A CT-net (S, T, , M ) is tractable if there exists an integer δ ≥ 2 such that,
for all marking M reachable from M , any sequence of at least δ non-empty steps
enabled by M contains at least two tick-steps. In other words, the length of an
execution between two consecutive ticks is bounded by δ whose smallest possible
value is called the maximal distance between ticks. This notion of tractable nets is
important because it allows to distinguish those nets which can be executed on a
realistic machine: indeed, a non-tractable net may have potentially inﬁnite runs
between two ticks (so called Zeno runs), which cannot be executed on a ﬁnitely

326

F. Pommereau

fast computer without breaking the evenness of ticks occurrences. For example,
the CT-net of our running example is not tractable because the transition t3 can
be executed inﬁnitely often between two ticks: in the execution given above, the
step {u(5)} could be arbitrarily repeated.
The communication between a CT-net and its environment is modelled using
some of the actions in transitions labels. We distinguish for this purpose two
ﬁnite disjoint subsets of S: Si is the set of input action symbols and So is that
of output actions symbols. We assume that τ ∈
/ Si ∪ So . We also distinguish a
set Dio ⊆ D representing the values allowed for input and output. Intuitively,
the distinguished symbols correspond to communication ports on which values
from Dio may be exchanged. Thus the execution of a transition labelled by
ao (do ) ∈ So ⊗ Dio is seen as the sending of the value do on the output port ao .
Conversely, if the environment sends a value di ∈ Dio on the input port ai ∈ Si ,
the net is expected to execute a step containing the action ai (di ). In general, we
cannot ensure that such a step is enabled, in the worst case, it may happen that
no transition has ai in its label.
A CT-net is reactive to a set of action symbols R ⊆ Si if: (1) either, for all
a ∈ R and all d ∈ Dio , it always allows, but never forces, the execution of a step
containing a(d); (2) or the net is in a marking M from which only actions in
Si ∪ So may ever be executed (M is called ﬁnal ). Thus, a net which is reactive
to some actions will always allow a good responsiveness to the solicitation of the
environment using these actions. It turns out that building such a net is very
easy in general: for instance, the net given on the left of the ﬁgure 1 is reactive
to {u} (assuming Dio ⊆ {0, . . . , η}) thanks to the self loop on t3 .
Unfortunately, it can be shown that any CT-net N which is reactive R ⊆ Si is
not tractable. This negative result shows that the intuitive notion of reactiveness
is too strong: the non-tractability actually indicates that a reactive CT-net is
expected to be able to respond instantaneously to all the messages that the
environment would send on a port in R. But if the number of such messages
sent in a given amount of real time is not bounded then a ﬁnitely fast computer
cannot avoid to miss some of them. We thus assume that the environment may
not produce more than one message on each port between two ticks, which leads
to the new notion of tick-reactiveness.
We denote by U [a] the number of occurrences of the action symbol a in a
df
step U , i.e., U [a] = a(x)∈U U (a(x)). Let N be a CT-net whose marking is M0
and R ⊆ Si , consider an execution M0 [U1 M1 · · · [Uk Mk of N such that only
Uk may be a tick-step (if it is not, Mk should enable only the empty step), and
df
deﬁne U0 = ∅. Then, N is tick-reactive to R if: (1) for 0 ≤ i < k, the marking
Mi is reactive to R \ ∪0≤j≤i {a ∈ R | Uj [a] > 0}; (2) N with the marking Mk is
tick-reactive to R. This deﬁnition is inductive and holds over the executions of
a CT-net. Intuitively, it states that N can react to any message sent on a ∈ R
after what it may miss them until the next tick, being then able to react again.
This guarantees that one message on a may always be handled between two
ticks, which exactly matches our assumption. It turns out that it is generally
easy to transform a reactive CT-net into a tick-reactive one. For instance, the

Petri Nets as Executable Speciﬁcations

327

right of the ﬁgure 1 shows a modiﬁed version of our running example which is
tick-reactive to {u} and tractable (the step {u(5)} could not be duplicated now).
A step U is consistent if U [a] ≤ 1 for all a ∈ Si ∪ So . A CT-net is consistent
if none of its reachable markings enables a non-consistent step. Non-consistent
steps are those during the execution of which several communications can take
place on the same port. Since the transitions executed by a single step occur
simultaneously, this means that several distinct values may be sent or received on
the same port at the same time. This is certainly something which is not realistic
and should be rejected. The nets given in the ﬁgure 1 are both consistent.

4

Compilation and Execution

We now show how to transform a tractable and consistent CT-net into a form
more suitable to the execution machine. This corresponds to a compilation
whose result will be an automaton (non-deterministic in general), called a CTautomaton, whose states will be the reachable markings of the net and whose
transitions will correspond to the steps allowing to reach one marking from another. It should be remarked that this compilation is not required but allows to
simplify things a lot, in particular in an implementation of the machine: with
respect to its corresponding CT-net, a CT-automaton has no notion of markings,
bindings, enabling, etc., which results in a much simpler model.
In order to record only the input and output actions in a step U of a CT-net,
df
we deﬁne the set of the visible actions in U by U = U ∩ (((Si ∪ So ) ⊗ Dio ) ∪
({τ } ⊗ D)). Because of the consistency, U could not be a multiset.
Let N = (S, T, , M ) be a tractable and consistent CT-net, the CT-automaton
df
of N is the ﬁnite automaton A(N ) = (SA , TA , sA ) where:
– SA is the set of states deﬁned as the set of all the reachable markings of N ;
df
– the set of transitions is TA ⊆ SA × LA × SA , where LA = {A ⊆ ((Si ∪ So ) ⊗
Dio ) ∪ ({τ } ⊗ D)}, and is deﬁned as the set of all the triples (M , A, M )
such that M , M ∈ SA and there exists a non-empty step U of N such that
M [U M and A = U ;
df
– sA = M ∈ SA is the initial state of A(N ), i.e., the initial marking of N .
We now describe the execution machine. In order to communicate with the
environment, a symbol ao ∈ So is considered as a port on which a value d ∈
Dio may be written, which is denoted by a ← d (more generally, this is used
for any assignment). Similarly, a symbol ai ∈ Si is considered as a port on
/
which such a value, denoted by ai ?, may be read; we assume that ai ? = ◦ ∈
D when no communication is requested on ai . Moreover, in order to indicate
to the environment if a communication have been properly handled, we also
assume that each a ∈ Si may be marked “accepted” (the communication has
been correctly handled), “refused” (the communication could not been handled),
“erroneous” (a communication on this port was possible but with another value,
or that a communication was expected but not requested) or not marked, which

328
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:

F. Pommereau
s ← sA
Θ ← now
while s has successors do
for all a ∈ Si do
a ← “no mark”
end for
I ← {a ∈ Si | a? = ◦}
choose a transition (s, A, s )
if A is a tick step then
wait until now = Θ + ∆
Θ ← now
end if
execute(A, I)
s←s
end while

procedure execute(A, I) :
17: for all a(d) ∈ A (a = τ ) do
18:
if a ∈ So then
19:
a←d
20:
else if a ∈ Si and a? = d then
21:
a ← “accepted”
22:
else
23:
a ← “erroneous”
24:
end if
25:
I ← I \ {a}
26: end for
27: for all a ∈ I do
28:
a ← “refused”
29: end for

Fig. 2. The main loop of the execution machine (on the left) and the execution of a
step A with respect to requested inputs given by I (on the right).

is represented by “no mark”. We also use the notation ai ← “mark” when an
input port is being marked.
Let (SA , TA , sA ) a CT-automaton and let ∆ be an amount of time (deﬁned
below). We will use three variables: Θ is a time corresponding to the occurrences
of ticks; s ∈ SA is the current state; I ⊆ Si is a set of input ports. The statement
“now” evaluates to the current time when it is executed.
The behaviour of the machine is given in the ﬁgure 2. Several aspects of this
algorithm should be commented:
– the “for all” loops are parallel loops;
– each execution of the “while” loop performs a bounded amount of work,
in particular the following numbers are bounded: the number of ports; the
number of transitions outgoing from a state; the number of actions in each
step. Assuming that choosing a transition requires a ﬁxed amount of time
(see below), ∆ is the maximum amount of time required to execute the
“while” loop δ − 1 times;
– no tick is explicitly executed but its occurrence actually corresponds to the
execution of the line 11;
– one can show that the even occurrence of the ticks is ensured.
We still have to deﬁne how a transition may be chosen, in a ﬁxed amount
of time, in order to mark “accepted” as much as possible input ports in I.
To start with, we assume a total order on Si . This corresponds to a priority
between the ports: when several communications are requested but not all are
possible, we ﬁrst serve those on the ports with the highest priorities. Then, given
I, we deﬁne a partial order ≺ on the transitions outgoing from a state and the
machine chooses one of the smallest transitions according to ≺. This choice may
be random or driven by a scheduler. For instance, we may choose to execute
steps as large as possible, or steps no larger than the number of processors, etc.
But this discussion is out of the scope of this paper.

Petri Nets as Executable Speciﬁcations

329

The partial order ≺ is based on the lexicographic order on the vectors VA ∈
{“accepted”, “no mark”, “refused”, “erroneous”}Si obtained by simulating the
execution of each step A and assuming that the marks are ordered as given
above. Again, it is clear that building these vectors and choosing the smallest
is feasible in a ﬁxed amount of time since the number of transitions outgoing
from a given state is bounded. This is also feasible in parallel: all the VA ’s can
be computed in parallel and the selection of the smallest one is a reduction.
Notice that if ≺ allows to deﬁne a total order on steps, it is not the case for the
transitions since several transitions may be labelled by the same step.
Proposition 1. Let a ∈ Si be an input action symbol and N be a CT-net which
is tick-reactive to R
a. Then, the execution of A(N ) will never mark a as
“erroneous” nor “refused” except from a state which is a ﬁnal marking of N .
Moreover, if a? = d = ◦ before the execution of the line 7 in the ﬁgure 2, then a
is marked “accepted” after the line 13 has executed.

5

Conclusion

We deﬁned a parallel execution machine which shows the adequacy of causal
and real time by allowing time-consistent executions of causally timed Petri nets
(CT-nets) in a real-time environment. We also shown that it was possible to
ensure that the machine eﬃciently reacts to the solicitation of its environment
by designing CT-nets having the property of tick-reactiveness, which is easy to
ensure. In order to obtain these results, several restrictions have been adopted:
(1) only safe Petri nets are considered; (2) the nets must be tractable, i.e., they
cannot have unbounded runs between two ticks; (3) the nets must be consistent,
i.e., they cannot perform several simultaneous communications on the same port;
(4) the machine must be run on a computer fast enough to ensure that the environment cannot attempt more than one communication on a given port between
two ticks. We do not consider the tractability and consistency requirements as
true restrictions since they actually correspond to what can be performed on
a realistic machine. The last restriction is actually a prescription which can be
ensured after measuring physical properties of the environment and choosing an
appropriate computer. Future works may consider using non-safe Petri nets, but
this class happens to be expressive enough for many interesting problems and
there may be no real need to remove the ﬁrst restriction.
Petri nets like CT-nets have been used for a long time as a semantical domain
for high-level parallel programming languages and process algebras (see, e.g., [3,
4]) and these techniques could be directly applied to massively parallel languages
or formalisms. Considering the features of the execution machine combined with
the fact that CT-nets allow for eﬃcient veriﬁcation, we obtain a framework in
which the analysed model and the executed code are the same object, which
saves from the risk of implementation errors.

330

F. Pommereau

References
1. C. Bui Thanh, H. Klaudel and F. Pommereau. Petri nets with causal time for system
veriﬁcation. MTCS 2002. ENTCS 68(5), Elsevier, 2003.
2. R. Durchholz. Causality, time, and deadlines. Data & Knowledge Engineering, 6.
North-Holland, 1991.
3. H. Klaudel. Compositional High-Level Petri nets Semantics of a Parallel Programming Language with Procedures. SCP 41, Elsevier, 2001.
4. F. Pommereau. Causal Time Calculus. FORMATS’03. LNCS, Springer, to appear.
5. G. Richter. Counting interfaces for discrete time modelling. Technical report 26,
GMD. September 1998.

