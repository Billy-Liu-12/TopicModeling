An Adaptive Neuro-fuzzy Approach for Modeling and
Control of Nonlinear Systems
Otman M. Ahtiwash and Mohd Zaki Abdulmuin
Center of Factory and Process Automation, Faculty of Engineering,
University of Malaya
50603 Kuala Lumpur, MALAYSIA.

ahtiwash@tm.net.my
Abstract. Fuzzy Inference Systems (FISs) and Artificial Neural Networks
(ANNs), as two branches of Soft Computing Systems (SCSs) that pose a
human-like inference and adaptation ability, have already proved their
usefulness and have been found valuable for many applications [1],[2]. They
share a common framework of trying to mimic the human way of thinking and
provide an effective promising means of capturing the approximate, inexact
nature of the real world process. In this paper we propose an Adaptive NeuroFuzzy Logic Control approach (ANFLC) based on the neural network learning
capability and the fuzzy logic modeling ability. The approach combines the
merits of the both systems, which can handle quantitative (numerical) and
qualitative (linguistic) knowledge. The development of this system will be
carried out in two phases: The first phase involves training a multi-layered
Neuro-Emulator network (NE) for the forward dynamics of the plant to be
controlled; the second phase involves on-line learning of the Neuro-Fuzzy
Logic Controller (NFLC). Extensive simulation studies of nonlinear dynamic
systems are carreid out to illustrate the effectiveness and applicability of the
proposed scheme.

1 Introduction
In recent years, Fuzzy Inference Systems (FISs) and Artificial Neural Networks
(ANNs) have attracted considerable attention as candidates for novel computational
systems because of the variety of the advantages that they offer over conventional
computational systems [1]-[5]. Unlike other classical control methods, Fuzzy Logic
Control (FLC) and ANNs are more model free controllers, i.e. they do not require
exact mathematical model of the controlled system. Moreover, they are becoming
well-recognized tools of designing identifiers and controllers capable of perceiving
the operating environment and imitating a human operator with high performance.
FLC has the strengths of linguistic control, parallelism, relaxation, flexibility, and
robustness. But there has been no systematic approach in implementing the adaptive
fuzzy control system. For example, the shape and location of membership function for
each fuzzy variable must be obtained by trail-error or heuristic approach. Also, when
an expert cannot easily express his knowledge or experience with the linguistic form
of (If-Then) control rule, it is not easy to construct an efficient control rule base [6].
ANNs have the characteristics of high parallelism, fault-tolerance, and adaptive
and learning abilities. But there exist some problems in the neural control; firstly, it is
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2074, pp. 198–207, 2001.
© Springer-Verlag Berlin Heidelberg 2001

An Adaptive Neuro-fuzzy Approach for Modeling and Control of Nonlinear Systems

199

not easy to decide the optimal number of layers and neurons; secondly, the learning
algorithm of the neural network has slow convergence speed and thirdly, the neural
networks take numerical (quantitative) computations rather than symbolic or linguistic
(qualitative) computations [7].
In order to overcome such problems, there have been considerable research efforts
to integrate FLC and ANNs for developing what is known as neuro-fuzzy control
systems [5]-[10]. The fusion of the two approaches, which can enlarge their
individual strengths and overcome their drawbacks, will produce a powerful
representation flexibility and numerical processing capability [11]-[13], [14]-[17].
In this paper we present another approach of an adaptive neuro-fuzzy logic control
scheme (ANFLC) using the hybrid combination of fuzzy logic and neural networks.
The proposed control scheme consists of a neuro-fuzzy logic controller (NFLC) and a
neuro-emulator (NE). In the NFLC, the antecedent and consequent parts of the fuzzy
rules are constructed using a multi-layered neural network with clustering method.
The NFLC is trained to refine its parameters adaptively using error backpropagation
learning algorithm (EBP). After constructing the adaptive neuro-fuzzy control system
by NFLC and NE, the effectiveness of the proposed scheme will be demonstrated and
evaluated by different nonlinear dynamic cases.
Output
Layer 5. Output
node

1

2

1

1

n1�n2

2

n1-1

1

Layer 4. Normalization
nodes

n3

n1

1

n2

2

In

I1

Inputs

Layer 3. Rule
nodes

Layer 2. Input
term (partition)
nodes

Layer 1. Input
nodes

Fig. 1. Topology of the Neuro-Fuzzy model

2 Neuro-fuzzy Logic Controller
Both the FLC and ANNs have been employed together to design a neuro-fuzzy logic
controller (NFLC). A fuzzy system with learning ability has been constructed and is
trained directly from the input-output data of the plant. Since the NFLC has the
property of learning; membership functions and fuzzy rules of the controller can be
tuned automatically by the learning algorithm [6],[13],[15]. Learning is based on the
performance error, which is evaluated by comparing the process output with the
desired or required output.

200

O.M. Ahtiwash and M.Z. Abdulmuin

The NFLC presented here is based on a self-learning FLC. The learning method is
basically a special form of the error backpropagation (EPB), which is used for
training ANNs. To train the controller, the EBP method is employed to propagate the
plant output error signal through different stages in time.
The NFLC architecture is composed of five layers as shown in Fig. 1, where the
layers are functionally described as: the input layer (L1), the fuzzy partition layer (L2),
the firing strength layer (L3), the normalized firing strength layer (L4) and the output
layer (L5). The first four layers perform the fuzzy partition of the input space and
construct the antecedent part while the last layer together with the weights and the
results obtained by the partition carry out the implementation task of control and
learning. This structure can update membership function and rule base parameters
according to the gradient descent update procedure.
2.1 Fuzzy Elements of the Neuro-fuzzy Logic Controller
Since a Multi-Input-Multi-Output (MIMO) system can always be separated into group
of a Multi-Input-Single-Output (MISO) systems, we only consider a multi-input (error
and change in error)-single output (control action) neuro-fuzzy logic controller here.
Fig.2 shows the basic structure of a traditional FLC consisting of four major
blocks [1],[12],[18]. These blocks can be described as: The fuzzification interface is a
mapping from the observed non-fuzzy input space U � � n to the fuzzy set defined in
U. The fuzzy set defined in U is characterized by a membership function �F � U �
�0,1�, and is labelled by a linguistic term F such as “big” and “small”. The fuzzy rule
base is a set of the neuro-fuzzy controller rules in the form:
Rj : If (x1(t) is A1j) and (x2(t) is A2j) Then (u(t) is Bj), For j = 1, . . ., N, and, t = 1,2,…
Where N is the number of rules, x1(t) and x2(t) are the input variables to the NFLC at
time t given as [15]:
x1 �t � � y r �t � � y p �t �
(1)
is the error between the reference signal and the actual system output, and
x �t � 1� � x1 �t �
(2)
x 2 �t � � 1
�T
is the change in error. �T is the sampling period, Aij and B j are linguistic terms
characterized by the membership functions � A ( x i (t )) and � B j (u (t )) respectively.
ij
Throughout this study, the Aij uses the Gaussian shaped membership function,
defined by [10],[17]:

� � ( x (t ) � c ) � 2 �
i
ij � �
�
� Aij ( x i (t )) � exp �� �
(3)
�
� �
�
ij
� �
�
�
�
�
The fuzzy inference machine is a decision making logic which employs fuzzy rules
from the fuzzy rule base to determine the fuzzy outputs corresponding to its fuzzified
inputs. Using the centroid defuzzification method, the defuzzification interface
determines the non-fuzzy output of the neuro-fuzzy controller in the form [3]:

An Adaptive Neuro-fuzzy Approach for Modeling and Control of Nonlinear Systems

�

N

u (t ) �

� y j � A1 j ( x1(t )) � A2 j ( x2 (t ))

j �1
N

�

� � A1 j ( x1(t )) � A2 j ( x2 (t ))

j �1

201

�
(4)

�

In the previous equation, xi is the input of node i, Aij is linguistic label associated
with this node, cij and � ij are adiustable real valued parameters representing the
centre and width of the the Gaussian-shaped function; y j is the point in the output
space at which � B j achieve its maximum.

���������
Data

Input
(crisp)

Rule

Fuzz.
Interface

(fuzzy)

Defuzz.
Interfac

���������������

Output
(crisp)

(fuzzy)

Fig. 2. General Structure of Fuzzy Systems

2.2 Neuro-emulator Model
In this paper, we consider the dynamic system goverened by the following
relationship [2],[4]:

y �t � � f { y(t � 1),..., y(t � n y ), u(t ),..., u(t � nu )}

(5)

where, y �t � and u �t � are the system output and input repectively; n y , nu are the
corresponding lags in the output and input, f ( �) is a nonlinear function. The task is to
approximate and generalize f ( �) using the multi-layer neuro-emulator with,
X �t � � [ y(t � 1) ... y(t � n y ) u(t) u (t � nu )]T

(6)

We may formulate the problem using the multi-layer neuro-emulator with the inputoutput response
(7)
yˆ �t � � fˆ ( X (t ))
Training is done by using EBP algorithm whose MISO relationship forward stage is
n1

neti � � wE x j � bi
ij

(8)

j �1

and,

oi �t � � g ( neti )

where, the superscript E stands for the neuro-emulator;

(9)
wijE

and bi are the hidden-

input node connection weights and the threshold respectively, for j = 1,…,n1 and i =

202

O.M. Ahtiwash and M.Z. Abdulmuin

1,…,n2; n1 is the number of nodes in the input layer and n2 is the number nodes in the
hidden layer. Furthermore, g(.) is the sigmoid activation function described as [4]:
g (� ) �

1
1 � exp(�(�))
n2

y E(t) � � wEjk o j (t )
j �1

(10)
(11)

where, w Ejk are the output-hidden node weights. The error function eE(t) utilized
during the learning period can be defined as
e E (t ) �

1
( y p (t ) � y E (t ))2
2

(12)

In order to minimize the above error function, the weight variations �wijE and �w Ejk
of the neuro-emulator can be determined as follows
wijE (t �1) � wijE (t ) � �wijE (t )

(13)

and,

w Ejk (t �1) �

(14)

with,

�wijE (t ) � ��

and,

�w Ejk (t ) � ��

where,

� kE � y p (t ) � yE (t )

and,

�

E
j

�

w Ejk (t ) � �w Ejk (t )

�e E (t )
�wijE (t )

� ��� Ej x j (t )

�e E (t )
�wEjk (t )

� �� � kE o Ej (t )

g �( X (t ))� � kE w Ejk
j

(15)
(16)
(17)
(18)

where, g �(�) denotes the activation function derivation. After the NE has been trained
to emulate the plant exactly, the plant output y p (t ) is replaced with the NE output

y E (t ) . Then the error signal � c of the NFLC can be obtained as follows:

� k� E � y r (t ) � y E (t )

(19)

� �j E � g �( X (t ))� � k� E w Ejk

(20)

j

Thus the performance error at the output of the NFLC can be obtained as [2],[14]:
� c � � � �jE w Ejk
(21)
j

where, the superscript c stands for the neuro-fuzzy controller.

3 Adaptive Neuro-fuzzy Logic Control System
When there exist some variations in the internal or external environments of the
controlled plant, it will be required for the controller to possess the adaptive ability to
deal with such changes. Thus, in this section, an adaptive neuro-fuzzy logic control
system (ANFLC) will be developed by using the NFLC described earlier in section 2.

An Adaptive Neuro-fuzzy Approach for Modeling and Control of Nonlinear Systems

203

But, when applying the previous NFLC, there are some difficulties in obtaining the
performance error signal. To overcome this problem we use the neuro-emulator (NE)
presented in the previous section, which can emulate the plant dynamics and
backpropagate, the errors between the actual and desired outputs through the NE. Fig.
3 shows the proposed scheme constructed by the two input-single output NFLC and
the NE, where k1, k2 and k3 are the scaling gains for x1, x2 and u respectively.
+

yp(t-1)
yp(t-2)

yr (t)

+

-

NeuroEmulator

ep(t)

K1
K3
K2

-

u(t)

yE(t)
eE(t)

+

PLANT

yp(t)

Neuro-fuzzy controller

Fig. 3. The Proposed Adaptive Neuro-fuzzy Logic Controller Scheme

3.1 Learning Mechanism
At each time step we adjust the parameters of the NE before updating the controller.
For this purpose, the EBP training algorithm is used to minimize the performance
error ep as follows:
1
(21)
e p (t ) � {( y r (t ) � y E (t )) 2 }
2
From equation (4), we train y j as follows [6],[9]:

y j (t ) � y j (t � 1) � �y j (t )
�y j (t ) � ��

�e p (t )
�c ij (t )

� � �y j (t � 1)

(22)
(23)

where, � is the learning rate and � is the constant momentum term. Using the chain
rule, we have:
� j n2 c c
�e p (t )
� e p (t ) N
� wij w jk g �( neti )
(24)
�y j (t )
� j � j i �1
Thus the training algorithm for y j

y j (t) � y j (t � 1 ) � ��� p (t)

j

� Nj

n2

c c
� wij w jk g �(net i )] � � y j (t � 1 )

j i �1

In order to train cij in (3) and (4), we use

(25)

204

O.M. Ahtiwash and M.Z. Abdulmuin

c ij (t ) � cij (t � 1) � �c ij (t )
�c ij (t ) � ��

�e p (t )
�c ij (t )

(26)

� � �cij (t � 1)

(27)

Again, using the chain rule, we have

� y (t) � u(t) �� x (t) � c (t) �
n2
ij �
� j
�� i
� e p (t) � wijc w cjk g �(net i )�
�
�
��
N
2
�cij (t)
� � j �1 j �� ( ij )
i �1
�
�
��
and the training algorithm for cij is
n2
�
c ij (t) � cij (t � 1 ) - �e p (t) � wijc w cjk g �(net i )
i �1
�
�e p (t)

� y (t) � u(t) �� x (t) � c (t) ��
ij ��
� j
�� i
��
����
�� � � � ij (t � 1 )
N
2
�
(
)
�
j
ij
j �1
��
�
��
By using the same above methods, we train �ij in (3) and (4) as:
� ij (t ) � � ij (t � 1) � �� ij (t )

(28)

(29)

(30)

Thus the training algorithm for �ij is
ij (t)

�

ij (t � 1 ) �

n2
�
c c
�e p (t) � wij w jk g �(net i )
�
i �1

� y (t) � u(t) �� (x (t) � c (t)) 2
ij
� j
�� i
��
����
N
( ij ) 3
� � j �1 j ��

4

��
�� �
���
��

(31)
ij (t � 1 )

Simulations

In this work, the proposed model is examined using two different applications. Firstly,
the well known example of a nonlinear dynamic system given in [6],[19] was used to
test for the predicted plant output. This is governed by the following difference
equation:
y(t � 1) � a1 y(t ) � a 2 y (t � 1) � f [u(t )] ;
The nonlinear function has the form:

f (u ) � 0.6 sin(� u ) � 0.3 sin(3 � u ) � 0.1 sin(5 � u ) ; In order to predict the plant
outputs, the following difference equation was used:
yˆ ( k � 1) � a1 y(t ) � a2 y(t � 1) � fˆ [u(t )] ;
where a1 = 0.3 and
a2 = 0.6. For the prediction stage we select
� � 0.01, n1 � 3, n 2 � 12 , and � � 0.7 . The parameters wij and wkj are initialized
randomly and uniformly distributed over [-0.5, 0.5]. Training data of 500 samples are
generated from the plant model and used to train wij and wkj in order to minimize the
performance error at each time interval. Fig.4(a) shows that the model is

An Adaptive Neuro-fuzzy Approach for Modeling and Control of Nonlinear Systems

205

approximated and converged to the plant output after only a few iterations. For the
control stage, after the learning process is finished, the model is tested utilizing the
same intilized parameters and the trained weights were being used to train NFLC in
(25), (29) and (31) using (21). Fig.4(b) shows the improved results obtained using the
combined scheme. Moreover, the adaptive capabilities and generalization abilities of
the proposed scheme are further investigated by changing the input functions to:
f (u ) � 0.3 cos( u(t )) � 0.25 sin( u(t )) for 250 � t � 325 and f (u ) � 0.45 sin( u(t )) for

325 � t � 500 , where u(t ) � sin( 2�t 100) , the results are also shown in Fig. 4(b).
the ANFLC model has a good match with the actual model with Ep = 0.02638,
obviously, the proposed scheme can commendably identify the plant and assured its
tracking performance.
Secondly, for further invetigations, the scheme was tested on a highly nonlinear
system used in [20]:
0.4 y(t � 1) sin( y(t � 2))
y(t ) � 0.8 sin( y(t � 1)) �
� 0.5u(t ) ,
1 � y 2 (t � 2)
with the desired input sequence signal chosen as [sin(t 20) � sin(t 50)] .
After extensive testing and simulations, the ANFLC model proved a good
performance in forecasting the output of the complex-dynamic plant, it has a good
match with the actual model where the performance error minimized from Ep = 0.355
to Ep = 0.00138, The results of the prediction and control stages of this nonlinear
system are presented in Fig. 5(a) and (b), respectively. Comparable performance to the
first plant were obtained.

Actual & Desired Outputs

4
2

2

0

0

-2
-4

Actual & Desired Outputs

4

-2
yact
0

50

ydes

100 150 200 250 300 350 400 450 500
Prediction error

-4

0

1

1

0.5

0.5

0

0

-0.5

-0.5

-1

0

50

100 150 200 250 300 350 400 450 500
No. of Samples

(a)

-1

0

50

100 150 200 250 300 350 400 450 500
Performance Error

50

100 150 200 250 300 350 400 450 500
No. of Samples

(b)

Fig. 4. Actual and Desired Outputs for 1st model: (a) For Prediction Stage: � Ep = 0.2310;
(b) For Control Stage: � Ep = 2.638e-02

206

O.M. Ahtiwash and M.Z. Abdulmuin

Desired & Actual Outputs

3

yact

2

2

1

1

0

0

-1

-1

-2

Desired & Actual Outputs

3

ydes

0

200

400

600

800

1000

Prediction Error

1

1200

-2

0

100 150 200 250 300 350 400 450 500

Performance Error

0.5

0.5

0.25

0

0

-0.5

-0.25

-1

50

0

200

400

600
800
No. of Samples

(a)

1000

-0.5
1200 0

50

100 150 200 250 300 350 400 450 500
No. of Samples

(b)

Fig. 5. Actual and Desired Outputs for 2nd model: (a) For Prediction Stage: � Ep = 0.355;
(b) For Control Stage: � Ep = 1.38e-03

5

Conclusions

A flexible, adaptive neuro-fuzzy controller scheme (ANFLC) using the integration of
FLC and ANNs has been proposed in this paper. The main features of the proposed
control is that it does not require a reference model and it can be used to identify the
unknown dynamics of the plant. The membership functions in the antecedent part and
the real numbers in the consequent part of the NFLC are optimized by this method.
The main advantages of the proposed model over FLC & ANNs are:
�
A neural net mapping, of “Black Box” type, which is difficult to interpreted , is
avoided.
�
The tuning problem of fuzzy controllers is eliminated.
Two nonlinear examples are treated to demonstrate the potential applicability and
usefulness of this approach in nonlinear dynamic processes.

References
1. C. Lee, “Fuzzy Logic in Control Systems: Fuzzy Logic Controller, Part I & II ”, IEEE
Trans. on Systems, Man, and Cybernetics, Vol.20, No.2, 1990, pp. 404-418.
2. V. Kasparian and C. Batur, “Model Reference Based Neural Network Adaptive Controller”,
ISA Trans., Vol.37, 1998, pp. 21-39.
3. D. Psaltis; A. Sideris; and A. Yamamura, “A Multi-layered Neural Network Controller”,
IEEE Control Systems Magazine, 1988, pp. 17-21.
4. J. Tanomaru and S. Omatu, “Process Control by On-Line Trained Neural Controllers”,
IEEE Transactions on Industrial Electronics, Vol.39, No.6, 1992, pp. 511-521.

An Adaptive Neuro-fuzzy Approach for Modeling and Control of Nonlinear Systems

207

5. L-X. Wang, “Adaptive Fuzzy Systems and Control: Design and Stability Analysis”,
Prentice Hall, NJ, 1994.
6. L-X. Wang and J. Mendel, “Back-propagation fuzzy system as nonlinear dynamic system
identifiers”, IEEE International Conference on Fuzzy System. 1992, pp. 1409 –1418.
7. C. Lin and C. Lee, “Neural-network-based fuzzy logic control and decision system”, IEEE
Trans. Computers, vol. 40, no. 12, 1991, pp. 1320-1336,
8. C-T. Lin; C-F Juang and C-P Li, “Water bath temperature control with a neural fuzzy
inference network”, Fuzzy Sets And Systems, Vol.111, Issue 2. 2000, pp. 285-306.
9. D. Kaur and B. Lin, “On the Design of Neural-Fuzzy Control System”, Inter. Journal of
Intelligent Systems, Vol.13, 1998, pp.11-26.
10. J. Kim, and N. Kasabov, “HyFIS: adaptive neuro-fuzzy inference systems and their
application to nonlinear dynamical systems”, Neural Networks, Vol. 12, Issue 9, 1999, pp.
1301-1319.
11. P. Dash; S. Panda; T. Lee; J. Xu and A. Routray, “Fuzzy and Neural Controllers for
Dynamic Systems: an Overview”, IEEE Proceedings. 1997, pp. 810-816.
12. R-J Jang and T. Sun, “Neuro-Fuzzy Modeling and Control”, Proceeding of the IEEE,
Vol.83, No.3, 1995, pp. 378-404.
13. S. Horikawa; T. Furahashi; and Y. Uchikawa, “On fuzzy modeling using fuzzy neural
networks with the backpropagation algorithm”, IEEE Trans. on Neural Networks, vol.3,
1992, pp. 801-806.
14. T. Hasegawa; S-I Horikawa; T. Furahashi and Y. Uchikawa, “An Application of Fuzzy
Neural Networks to Design Adaptive Fuzzy Controllers”, Proceedings of International
joint Conference on Neural Networks, 1993, pp.1761-1764.
15. Y. Hayashi; E. Czogala and J. Buckley, “Fuzzy neural controller”, IEEE Intelligent. Conf.
on Fuzzy Systems, 1992, pp. 197-202.
16. Y. Shi & M. Mizumoto, “Some considerations on conventional neuro-fuzzy learning
algorithms by gradient descent method”, Fuzzy Sets and Systems. Vol.112, Issue 1, 2000,
pp. 51-63.
17. Y. Wang and G. Rong, “A Self-Organizing Neural Network Based Fuzzy System”, Fuzzy
Sets and Systems, No.103, 1999, pp. 1-11.
18. P. Lindskog, “Fuzzy Identification from a Grey Box Modeling Point of View”, Technical
Report, Department of Electrical Engineering, Linkoping University, Linkoping, Sweden,
1996.
19. K. S. Narendra and K. Parthsarathy, “Identification and control of dynamical systems using
neural networks”, IEEE Trans. on Neural Networks, Vol.1. No.1, 1990, pp. 4-27.
20. L. Pavel and M. Chelaru “Neural Fuzzy Architecture for Adaptive Control”, Proceedings of
IEEE, pp. 1115-1122. 1992.

