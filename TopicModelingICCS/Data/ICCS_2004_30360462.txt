Performance Measurement Model
in the G-PM Tool
Roland Wism¨
uller1 , Marian Bubak2,3 , Wlodzimierz Funika2,3 ,
Tomasz Arod´z2,3 , and Marcin Kurdziel2,3
1

LRR-TUM, Institut f¨
ur Informatik, Technische Universit¨
at M¨
unchen, D-85747
Garching, Germany
wismuell@in.tum.de
2
Institute of Computer Science, AGH, al. Mickiewicza 30, 30-059 Krak´
ow, Poland
3
Academic Computer Centre – CYFRONET, Nawojki 11, 30-950 Krak´
ow, Poland
{bubak,funika}@uci.agh.edu.pl
phone: (+48 12) 617 39 64, fax: (+48 12) 633 80 54, phone: (+49 89) 289 17676

Abstract. This paper focuses on the model of the performance analysis
of distributed grid-enabled applications within the G-PM tool. The
major focus is at the issues that arises as a consequence of the on-line
application monitoring paradigm the G-PM follows. In particular, two
major issues are presented - the consequences of a discrete nature of
measuring the function based performance quantities, and the aggregation of performance values that were measured at distant locations, and
thus may be desynchronized.
Keywords: Grid, performance analysis, performance monitoring

1

Introduction

The introduction of grid computing has a great impact on the development of
parallel applications. In order to meet the new requirements of the users, the
application development tools also have to be adapted to the new computing
paradigm.
In this paper, we describe the evolution of one these tools, i.e., the performance analysis tool for grid applications – G-PM [3]. The G-PM is developed
as part of the CrossGrid project [4]. The tool uses the OCM-G [1] as a low level
monitoring system and was designed to allow for on-line performance analysis.
During its development, a number of issues concerning the implementation of
measurements have to be addressed in order to meet the constraints of the grid
computing. This resulted in a relaxation of the strict on-line scheme of the tool.
Furthermore, the initially assumed pure pull model of communicating with the
OCM-G was augmented to include reservation requests.
This work was partly funded by the European Commission, project IST-2001-32243,
CrossGrid
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 462–465, 2004.
c Springer-Verlag Berlin Heidelberg 2004

Performance Measurement Model in the G-PM Tool

2

463

Issues with Measuring the Function-Based Metrics

The G-PM is mainly focused on measuring various quantities (metrics) related
to function calls. This may be e.g. duration of the MPI Send() calls since the
application start-up or the amount of data received with MPI Recv() function.
The appropriate library functions are instrumented, so the values of these metrics
are gathered at the start and the end of the individual function calls.
Consider the metric measuring the total time spent in MPI Send() since
some start time, denoted as a function R (t) of time t. It is not possible to
measure the value of R directly. What can be measured is the function V (t),
i.e. the total wall-clock time since the beginning of the measurement (in such
a case, V (t) = t). The value of R can then be obtained in the following way:
R(t) = i:tb ,te ≤t (V (tei ) − V (tbi )). The tbi and tei are the time stamps of the ith
i i
begin and end of the function call. In the same approach, the V (t) may, e.g.,
denote the total amount of data received by MPI Recv() until the time t.
The G-PM tool inspects the value of R at ﬁxed intervals, i.e., at moments tj .
The scheme outlined above works ﬁne, as long as tj falls into the range tei , tbi+1
and not in tbi , tei , i.e. falls between consecutive function calls. In the latter case,
the measured value of R does not reﬂect the real value of the metric. This is
because the value of R is not updated until the end of the function call. Only
then V (tei ) is known, and diﬀerence between the values of V at the end and
beginning of the function call (i.e. diﬀerence between V (tei ) V (tbi )) can be added
to the previous value of R. For example, in case of the MPI Send() delay, the
value of R, if inspected during the call to MPI Send(), does not take into account
the time spent in this call.
We propose two solutions to this problem. In case the value of V (t) can be
accessed at any moment in time, as it is in the case of V (t) = t, we modify the
function R if the time tj of the query falls within some function call. The current
value of V at time tj of the data query (i.e. V (tj )) is used instead of the yet
unknown value V (tei ) at yet unknown time tei of the end of the call.
The scheme outlined above is not suitable if the value of V (t) cannot be
queried at any time. That is the case of e.g. MPI Recv() total data volume
transferred. The amount of the data received can be known only at the times
of the end of the function call. Therefore, if R is inspected during the call to
MPI Recv(), the value R (tj ) gives only the amount of data received before the
beginning of the call. The data received between the beginning of the function
call and the querying of the value of R is not taken into account. Thus, the values
of the metrics can be misleading, especially when the duration of the function
calls is long.
A solution to the problem is to make use of the asynchronous nature of the
underlying OCM-G monitoring system. The replies to the data requests are sent
to the G-PM asynchronously. Originally, the reply is sent immediately as the
data is gathered from the sites of the grid where the monitored application is
running. However, this reply can be postponed until the current function call
ends, and the value of R reﬂects the real value. In this way, the G-PM tool

464

R. Wism¨
uller et al.

will always display correct data. However, the visualization may be temporarily
delayed, as the replies will no longer arrive immediately after the requests for
measurement data to be displayed.

3

Performance Measurement under Large Network
Latency Conditions

The G-PM makes it possible to narrow the measurement of performance properties of the application to any set of processes speciﬁed by the user. The partial
results from this locations can be aggregated to produce the ﬁnal performance
measurement value. This is a strong advantage of the tool that facilitates to ﬁnd
performance bottlenecks in the application. On the other hand, the aggregated
value is only meaningful, if the measurement was performed on all nodes at the
same time interval. Consequently, the monitoring must be synchronized across
grid nodes. Currently, the G-PM communicates with the OCM-G in a purely
pull model. Each time when a new performance value is needed the requests
from the G-PM are sent to OCM-G service manager and then broadcast to local
monitors. This preserves the G-PM user’s workstation from being overloaded by
messages from the OCM-G. However, if the network latency is high and varies
signiﬁcantly across links, the pooling may make the required synchronization
impossible.
For this reasons, a hybrid model that shares some properties of both pull
and push approaches, is being considered to replace the current communication
scheme between G-PM and the OCMG-G. In this hybrid approach, the G-PM
asks the OCM-G to measure a performance property at given time intervals. This
request is time stamped in OCM-G’s service manager and broadcast to local
monitors. The local monitors compute the results at requested time intervals
and store them in a temporal buﬀer. Provided that the clocks on local nodes
are synchronized (which can be assured within a reasonable accuracy), the time
stamp of the initial G-PM request will allow to synchronize the performance
measurement across the nodes. To preserve the user workstation from being
overloaded, the results are sent from the OCM-G buﬀers only at an explicit
request from the G-PM. An important issue that must be solved in this approach
is handling the OCM-G buﬀers overﬂow. In this case, the OCM-G may simply
perform a partial aggregation of the results, (e.g. via averaging) to reduce the
number of data points.
The synchronization of performance measurement across nodes has an additional advantage. Suppose, that the user monitors two performance properties: a
mean value of the communication send volume per one second and a total communication send volume from the application startup. Both this performance
properties are based on the metric that measures the send volume in communication operations. The desynchronization across the nodes may result in the
measurements being performed at diﬀerent points in time. Consequently, if the
synchronization is kept, the values of the metric can be shared.

Performance Measurement Model in the G-PM Tool

4

465

Conclusions

The G-PM tool measures the performance of the distributed application in an
on-line fashion. This is a strong advantage in the grid computing where long running applications are common. On the other hand, a number of issues arise which
result from the requirements posed by the on-line analysis. Some of these, like
e.g., the inﬂuence of a discrete nature of the performance monitoring of the function based quantities on the measurement results, are already addressed within
the G-PM. Others, like e.g. meaningful aggregation of measurement results from
diﬀerent nodes, still require further study.
An illustration of the evolution of the performance measurement model the
G-PM follows is the communication schema between the tool and underlying
monitoring layer - OCM-G. Originally, the communication was designed in a
strictly pull model. The rationale behind this was the minimization of the probability that the user workstation will be overloaded by performance measurement
data. Currently, a new schema is being worked out that is based on a hybrid pull
and push model. This schema is believed to still prevent the G-PM from being
overloaded, while enabling performance measurements of the application in an
on-line, grid-wide synchronized fashion.

References
1. Bali´s, B., Bubak, M., Funika, W., Szepieniec, T., and Wism¨
uller, R.: An Infrastructure for Grid Application Monitoring. In: Kranzlm¨
uller, D. et al. (Eds.), Recent
Advances in Parallel Virtual Machine and Message Passing Interface, 9th European PVM/MPI Users’ Group Meeting, Sept. - Oct. 2002, Linz, Austria, Lecture
Notes in Computer Science 2474, pp. 41-49, Springer-Verlag, 2002.
2. Bali´s, B., Bubak, M., Funika, W., Szepieniec, T., and Wism¨
uller, R.: Monitoring
and Performance Analysis of Grid Application. In: P.M.A. Sloot et al. (Eds.),
Computational Science - ICCS 2003, June 2003, St. Petersburg, Russia, Lecture
Notes in Computer Science 2657, pp. 214-224, Springer-Verlag, 2003.
3. Bubak, M., Funika, W., Wism¨
uller, R., Arodz, T., and Kurdziel, M.: The G-PM
Tool for Grid-oriented Performance Analysis. In: 1st European Across Grids Conference, Santiago de Compostela, Spain, Feb. 2003.
http://wwwbode.in.tum.de/˜wismuell/pub/santiago03a.ps.gz
4. CrossGrid - Development of Grid Environment for interactive Applications, EU
Project, IST-2001-32243, Technical Annex. http://www.eu-crossgrid.org
5. Wism¨
uller, R., Bubak, M., Funika, W., Arod´z, T., and Kurdziel, M.: Support for
User-Deﬁned Metrics in the Online Performance Analysis Tool G-PM. Accepted
to 2nd European AcrossGrids Conference, Nicosia, Cyprus 2004.
6. Wism¨
uller, R., Bubak, M., Funika, W., and Bali´s, B.: A Performance Analysis
Tool for Interactive Applications on the Grid. In: Performance Analysis and Grid
Computing, Proc. Workshop on Clusters and Computational Grids for Scientiﬁc
Computing, Sept. 2002, Le Chateau de Faberges de la Tour, France. Kluwer, 2003.
In print.
7. Wism¨
uller, R. , Oberhuber, M. , Krammer, J. , and Hansen,O. : Interactive debugging and performance analysis of massively parallel applications. In: Parallel
Computing, 22(3):415-442, March 1996.

