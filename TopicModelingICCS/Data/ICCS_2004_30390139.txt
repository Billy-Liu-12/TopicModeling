GA and CHC. Two Evolutionary Algorithms to
Solve the Root Identiﬁcation Problem in
Geometric Constraint Solving
M.V. Luz´
on1 , E. Barreiro1 , E. Yeguas, and R. Joan-Arinyo2
1

Escuela Superior de Ingenier´ıa Inform´
atica. Universidade de Vigo,
Av. As Lagoas s/n, E-32004 Ourense
{luzon,enrique}@uvigo.es
2
Escola T´ecnica Superior d’Enginyeria Industrial de Barcelona.
Universitat Polit`ecnica de Catalunya,
Av. Diagonal 647, 8a , E-08028 Barcelona
robert@lsi.upc.es

Abstract. Geometric problems deﬁned by constraints have an exponential number of solution instances in the number of geometric elements
involved. Generally, the user is only interested in one instance such that,
besides fulﬁlling the geometric constraints, exhibits some additional properties.
Selecting a solution instance amounts to selecting a given root every
time the geometric constraint solver needs to compute the zeros of a
multi valuated function. The problem of selecting a given root is known
as the Root Identiﬁcation Problem.
In this paper we present a comparative study of a basic genetic algorithm
against the CHC algorithm. Both techniques are based on an automatic
search in the space of solutions driven by a set of extra constraints. A
number of case studies illustrate the performance of the methods.
Keywords: Evolutionary algorithms, Constructive geometric constraint
solving, Root identiﬁcation problem, Solution selection.

1

Introduction

Modern computer aided design and manufacturing systems are built on top
of parametric geometric modeling engines. The ﬁeld has developed sketching
systems that automatically instantiate geometric objects from a rough sketch,
annotated with dimensions and constraints input by the user. The sketch only
has to be topologically correct and constraints are normally not yet satisﬁed.
The core of those sketching systems is the geometric constraint solver.
Geometric problems deﬁned by constraints have an exponential number of
solution instances in the number of geometric elements involved. Generally, the
user is only interested in one instance such that besides fulﬁlling the geometric
constraints, exhibits some additional properties. This solution instance is called
the intended solution.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 139–146, 2004.
c Springer-Verlag Berlin Heidelberg 2004

140

M.V. Luz´
on et al.

Selecting a solution instance amounts to selecting one among a number of
diﬀerent roots of a nonlinear equation or system of equations. The problem of
selecting a given root was named in [1] the Root Identiﬁcation Problem.
Several approaches to solve the Root Identiﬁcation Problem have been reported in the literature. Examples are: Selectively moving the geometric elements,
conducting a dialogue with the constraint solver that identiﬁes interactively the
intended solution, and preserving the topology of the sketch input by the user.
For a discussion of these approaches see, for example, references [1,7,20] and
references therein.
In [16,15] we reported on a new technique to automatically solve the Root
Identiﬁcation Problem for constructive solvers, [1,9]. The technique over-constrains the geometric problem by deﬁning two diﬀerent categories of constraints.
One category includes the set of constraints speciﬁcally needed to solve the
geometric constraint problem. The other category includes a set of extra constraints or predicates on the geometric elements which identify the intended
solution instance. Once the constructive solver has generated the space of solution instances, the extra constraints are used to drive an automatic search of
the solution instances space performed by a genetic algorithm, [11,24]. The search outputs a solution instance that maximizes the number of extra constraints
fulﬁlled.
In this paper we study the performance of two evolutive algorithms applied
to solve the Root Identiﬁcation Problem: the basic genetic algorithm and the
CHC algorithm. In both cases, the automatic search in the space of solutions is
driven by the set of extra constraints.

2

Constructive Geometric Constraint Solving

In two-dimensional constraint-based geometric design, the designer creates a
rough sketch of an object made out of simple geometric elements like points,
lines, circles and arcs of circle. Then the intended exact shape is speciﬁed by
annotating the sketch with constraints like distance between two points, distance
from a point to a line, angle between two lines, line-circle tangency and so on. A
geometric constraint solver then checks whether the set of geometric constraints
coherently deﬁnes the object and, if so, determines the position of the geometric
elements. Figure 1 shows an example sketch of a constraint-based design.
Many techniques have been reported in the literature that provide powerful
and eﬃcient methods for solving systems of geometric constraints. For example,
see [4] and references therein for an extensive analysis of work on constraint solving. Among all the geometric constraint solving techniques, our interest focuses
on the one known as constructive.
Constructive solvers have two major components: the analyzer and the constructor. The analyzer symbolically determines whether a geometric problem
deﬁned by constraints is solvable. If the problem is solvable, the output of the
analyzer is a sequence of construction steps which places each geometric element in such a way that all constraints are satisﬁed. This sequence is known

GA and CHC. Two Evolutionary Algorithms

P5

d2

d1
P3
a1

r1

r1

P2

P6

d2

distance(P1 , P2 )
distance(P1 , P3 )
distance(P2 , P4 )
distance(P2 , P5 )
distance(P3 , P4 )
distance(P3 , P5 )
distance(P4 , P6 )
distance(P5 , P6 )
angle(line(P1 , P3 ), line(P2 , P1 ))

d2
d2

P4

d1
P1

=
=
=
=
=
=
=
=
=

141
r1
r1
d1
d1
d2
d2
d2
d2
a1

Fig. 1. Geometric problem deﬁned by constraints

as the construction plan. Figure 2 shows a construction plan generated by the
ruler-and-compass geometric constraint solver reported in [14] for the problem
depicted in 1. After assigning speciﬁc values to the parameters, the constructor
interprets the construction plan and builds an object instance, provided that no
numerical incompatibilities arise.
1.
2.
3.
4.

P1
P2
α1
α2

=
=
=
=

point(0, 0)
point(r1 , 0)
direction(P2 , P1 )
adif (α1 , a1 )

5.
6.
7.
8.

P3
P4
P5
P6

=
=
=
=

rc(line(P1 , α2 ), circle(P1 , r1 ))
cc(circle(P2 , d1 ), circle(P3 , d2 ))
cc(circle(P2 , d1 ), circle(P3 , d2 ))
cc(circle(P4 , d2 ), circle(P5 , d2 ))

Fig. 2. Construction plan for the problem in Fig. 1

Function names in the plan are self explanatory. For example function adif
denotes subtracting the second angle from the ﬁrst one and asum denotes the
addition of two angles while rc and cc stand for the intersection of a straight
line and a circle, and the intersection of two circles, respectively.
In general, a well constrained geometric constraint problem, [10,13,18], has
an exponential number of solutions. For example, consider a geometric constraint
problem that properly places n points with respect to each other. Assume that
the points can be placed serially, each time determining the next point by two
distances from two already placed points. In general, each point can be placed
in two diﬀerent locations corresponding to the intersection points of two circles.
For n points, therefore, we could have up to 2n−2 solutions. Possible diﬀerent
locations of geometric elements corresponding to diﬀerent roots of systems of
nonlinear algebraic equations can be distinguished by enumerating the roots
with an integer index. For a more formal deﬁnition see [7,22].
In what follows, we assume that the set of geometric constraints coherently
deﬁnes the object under design, that is, the object is generically well constrained
and that a ruler-and-compass constructive geometric constraint solver like that
reported in [14] is available. In this solver, intersection operations where circles
are involved, rc and cc, may lead to up to two diﬀerent intersection points,

142

M.V. Luz´
on et al.

depending on whether the second degree equation to be solved has no solution,
one or two diﬀerent solutions in the real domain. With each feasible rc and cc
operation, the constructor in the solver associates an integer parameter sk ∈
{−1, 1}, that characterizes each intersection point by the sign of the square root
in the corresponding quadratic equation. For details on how to compute sk , the
reader is referred to [22].

3

The Root Identiﬁcation as a Constraint Optimization
Problem

We will solve the Root Identiﬁcation Problem by over-constraining the geometric
constraint problem: The intended solution instance to a well constrained problem
is speciﬁed by deﬁning a set of extra constraints or predicates on the geometric
elements. As extra constraint, the user can apply the usual geometric constraints
or speciﬁc topological constraints like P ointOnSide(P, line(Pi , Pj ), side), which
means that point P must be placed on one of the two open half spaces deﬁned
by the straight line through points Pi , Pj , oriented from Pi to Pj . Parameter
side takes values in {right, left}.
Recall that we consider ruler-and-compass constructive geometric constraint
solving. In this context, geometric operations correspond to quadratic equations,
thus each constructive step has at most two diﬀerent roots. Let sj denote the
integer parameter associated by the solver with the j-th intersection operation,
either rc or cc, occurring in the construction plan. Since we are interested only
in solution instances that actually are feasible, that is, solution instances where
no numerical incompatibilities arise in the constructor, we only need to consider integer parameters sj taking value in the set of signs Dj = {−1, 1} that
characterizes each intersection point.
Assume that n is the total number of rc plus cc intersection operations in
the construction. We deﬁne the index associated with the construction plan as
the ordered set I = {s1 , . . . , sj , . . . , sn } with sj ∈ Dj , 1 ≤ j ≤ n. Therefore the
Cartesian product of sets I = D1 × . . . × Dn deﬁnes the space where the solution
instances to the geometric constraint problem belong to.
A construction plan which is solution to a geometric constraint problem
can be seen as a function of the index I. Moreover, the construction plan can
be expressed as a ﬁrst order logic formula, [15]. Let Ψ (I) denote this formula.
Clearly, the set of indexes {I ∈ I | Ψ (I)} is the space of feasible indexes, that is
the set of indexes each deﬁning a solution to the geometric constraint problem.
This set of indexes is the allowable search space, [5].
Let {C1 , C2 , . . . , Cm } be the set of extra constraints given to specify the intended solution instance and let Φ = C1 ∧ C2 ∧ . . . ∧ Cm . Let f be a (possibly
real-valued) function deﬁned on Ψ (I) ∧ Φ which has to be optimized. Then, according to Eiben and Ruttkay, [5], the triple < I, f, Ψ (I) > deﬁnes a constraint
optimization problem where ﬁnding a solution means ﬁnding an index I in the
allowable search space with an optimal f value.

GA and CHC. Two Evolutionary Algorithms

4

143

Evolutionary Algorithms

Evolutionary algorithms which model natural evolution processes were already
proposed for optimization in the 1960s. The goal was to design powerful optimization methods, both in discrete and continuous domains, based on searching
methods on a population, members of which are coded problem solutions, [2].
In previous works [16,15] we shown that evolutionary algorithms are a feasible
technique to solve the Root Identiﬁcation Problem. In this work we compare the
performance of two kinds of evolutionary algorithms: Genetic Algorithms and
CHC algorithms.
4.1

The Genetic Algorithm

Genetic algorithms (GA) are search algorithms that model sexual reproduction.
Sexual reproduction is characterized by recombining two parent strings into an
oﬀspring. This recombination is called crossover. Crossover is the recombination
of traits of the selected members in the hope of producing a child with better ﬁtness levels than its parents. Crossover is accomplished by swapping parts
of strings representing two members in the population. GAs were invented by
Holland, [12]. Recent surveys can be found in [8] and [11].
4.2

The CHC Algorithm

The main drawback of GAs is the premature convergence: After a few generations, the current population reaches an state where the goal function is not
optimal and no longer improves.
The heterogeneous recombination and cataclysmic mutation algorithm
(CHC) is an evolutive algorithm with binary coding which tries to avoid the
premature convergence by getting a suitable balance between the ability to explore the search space for diversity and the ability to explote the local properties
of the search for an appropriate selection. Instead the mutation operation of GAs,
CHC includes a restart process that oﬀers many of the beneﬁts of a great size
population without the cost of a slower search, [6].

5

Experimental Study

To assess and compare the performance of GA and CHC algorithms when applied to solve the Root Identiﬁcation Problem, we considered eleven diﬀerent
problems. For each problem a number of extra constraints to select the intended solution instance were deﬁned. The goal was to select one index such that
the number extra constraints fulﬁlled by the associated solution instance was
maximum.
The number of indexes in the initial population was always 20 and the maximum number of generations allowed was 30. For GAs the crossover and mutation
probabilities were 0.3 and 0.1 respectively. In the search reinicialization, the CHC

144

M.V. Luz´
on et al.
Table 1. T test results
Problem Algorithm
CHC
1
GA
CHC
2
GA
CHC
3
GA
CHC
4
GA
CHC
5
GA
CHC
6
GA
CHC
7
GA
CHC
8
GA
CHC
9
GA
CHC
10
GA
CHC
11
GA

Mean
32.70
32.32
28.38
27.84
38.48
37.96
34.17
33.94
39.12
37.87
37.14
36.53
46.74
45.71
47.92
47.18
26.91
26.83
31.73
30.60
23.16
22.53

StDev SE mean
1.251
0.125
1.588
0.159
1.324
0.132
1.461
0.146
1.467
0.147
0.183
1.825
1.484
0.148
1.530
0.153
3.059
0.306
5.076
0.508
1.826
0.183
2.129
0.213
2.473
0.247
3.220
0.322
1.857
0.186
2.236
0.224
0.944
0.094
0.954
0.095
2.178
0.218
4.110
0.411
1.779
0.178
0.295
2.952

t

Sig. level

-1.879

0.062

-2.738

0.007

-2.221

0.028

-1.079

0.282

-2.109

0.036

-2.175

0.031

-2.537

0.012

-2.546

0.012

-0.596

0.552

-2.429

0.016

-1.828

0.069

algorithm kept the 3 best ﬁtting indexes. The remaining 17 indexes in the population were generated using these 3 individuals as templates and randomly
changing the 35% of the binary signs, [6].
GA and CHC algorithms were applied to each problem one hundred times.
The initial population in each run was the same for both algorithms and the
value of the goal function at the end of the run was recorded.
Table 1 summarizes the experimental results. The fourth and ﬁfth column
give respectively the mean and the standard deviation of the number of extra
constraints fulﬁlled in the set of one hundred runs. In all cases, the mean for
the CHC algorithm was higher that for the GA while the standard deviation for
CHC was smaller that for GA. Therefore, CHC showed a better performance in
ﬁnding the intended solution instance.
To assess whether the mean of the goal functions yielded by each evolutive
algorithm are statistically diﬀerent from each other, we applied a t-test, [23].
Columns labeled t and Sig. level in Table 1 give the t value for the t-test and
the signiﬁcance level associated respectively. Problems 1, 4, 9 and 11 show a
signiﬁcance level higher than 0.05, the usually accepted level value. Notice, however, that only in problems 4 and 9 the signiﬁcance level is clearly higher than
0.05. Therefore, we conclude that, in average, the instance solution selected by
the CHC algorithm fulﬁlls more extra constraints than that selected by the GA.

GA and CHC. Two Evolutionary Algorithms

6

145

Conclusions and Future Work

The Root Identiﬁcation Problem can be solved using GA and CHC evolutive algorithms. The idea is to over-constrain the problem and use the extra constraints
to drive the algorithm search.
Experimental results from a signiﬁcative benchmark show that performance
of CHC is better than GA’s. On the one hand, CHC algorithms do no show
premature convergence. On the other hand, in the average and with a signiﬁcance
level higher than 0.05, the instance solution selected by the CHC algorithm shows
a better ﬁtting than that selected by the GA.
Currently we are working in two diﬀerent directions. One focuses on applying
new evolutive algorithms to solve the Root Identiﬁcation Problem and to study
the relative performance. The goal of the other line of research is to deﬁne
strategies to automatically deﬁne values for evolutive parameters (population
size, crossover and mutation probabilities, etc) as a function of the geometric
constraint problem at hand.
Acknowledgements. This research has been partially supported by FEDER
and CICYT under the project TIC2001-2099-C03-01.

References
1. W. Bouma, I. Fudos, C. Hoﬀmann, J. Cai, and R. Paige. Geometric constraint
solver. Computer-Aided Design, 27(6):487–501, June 1995.
2. H.J. Bremermann, J. Roghson, and S. Salaﬀ. Global properties of evolution processes. In H.H. Pattee, E.A. Edelsack, L. Fein, and A.B. Callahan, editors, Natural
Automata and Useful Simulations, pages 3–42. Macmillan, 1966.
3. B.D. Br¨
uderlin. Rule-Based Geometric Modelling. PhD thesis, Institut f¨
ur Informatik der ETH Z¨
urich, 1988.
4. C. Durand. Symbolic and Numerical Techniques for Constraint Solving. PhD
thesis, Purdue University, Department of Computer Sciences, December 1998.
5. A.E. Eiben and Zs. Ruttkay. Constraint-satisfaction problems. In T. B¨
ack, D.B.
Fogel, and Z. Michalewicz, editors, Handbook of Evolutionary Computation, chapter C5.7, pages C5.7:1–C5.7:5. Institute of Physics Publishing Ltd and Oxford
University Press, 1997.
6. L.J. Eshelman. The CHC adaptive search algorithm: How to safe search when engaging in nontraditional genetic recombination. Foundations of Genetic Algorithms,
pages 265–283, 1991.
7. C. Essert-Villard, P. Schreck, and J.-F. Dufourd. Sketch-based pruning of a solution
space within a formal geometric constraint solver. Artiﬁcial Intelligence, 124:139–
159, 2000.
8. In S. Forrest, editor, Proceedings of the Fifth International Conference on Genetic
Algorithms, San Mateo, CA, 1993. Morgan Kaufmann.
9. I. Fudos and C.M. Hoﬀmann. Correctness proof of a geometric constraint solver.
International Journal of Computational Geometry & Applications, 6(4):405–420,
1996.

146

M.V. Luz´
on et al.

10. I. Fudos and C.M. Hoﬀmann. A graph-constructive approach to solving systems of
geometric constraints. ACM Transactions on Graphics, 16(2):179–216, April 1997.
11. D.E. Goldberg. Genetic Algorithms in Search, Optimization , and Machine Learning. Addison Wesley, 1989.
12. J. H. Holland. Adaptation in Natural and Artiﬁcial Systems. Ann Arbor: The
University of Michigan Press, 1975.
13. R. Joan-Arinyo and A. Soto-Riera. Combining geometric and equational geometric
constraint solving techniques. In VII Congreso Espa˜
nol de Inform´
atica Gr´
aﬁca,
pages 309–324. Eurographics, June 1997.
14. R. Joan-Arinyo and A. Soto-Riera. Combining constructive and equational geometric constraint solving techniques. ACM Transactions on Graphics, 18(1):35–55,
January 1999.
15. R. Joan-Arinyo and M.V. Luz´
on and A. Soto. Constructive geometric constraint
solving: a new application of genetic algorithms. In Parallel Problem Solving from
Nature-PPSN VII, volume 1, pages 759–768, 2002.
16. R. Joan-Arinyo and M.V. Luz´
on and A. Soto. Genetic algorithms for root multiselection in constructive geometric constraint solving. Computer & Graphics,
27:51–60, 2003.
17. S.C. Kleene. Mathematical Logic. John Wiley and Sons, New York, 1967.
18. G. Laman. On graphs and rigidity of plane skeletal structures. Journal of Engineering Mathematics, 4(4):331–340, October 1970.
19. L. Lov´
asz and Y. Yemini. On generic rigidity in the plane. SIAM Journal on
Algebraic and Discrete Methods, 3(1):91–98, March 1982.
20. M.V. Luz´
on. Resoluci´
on de Restricciones geom´etricas. Selecci´
on de la soluci´
on
deseada. PhD thesis, Dpto. de Inform´
atica. Universidade de Vigo., Septiembre
2001.
21. N. Mata. Solving incidence and tangency constraints in 2D. Technical Report
LSI-97-3R, Department LiSI, Universitat Polit`ecnica de Catalunya, 1997.
22. N. Mata. Constructible Geometric Problems with Interval Parameters. PhD thesis, Dept. LSI, Universitat Polit`ecnica de Catalunya, Barcelona, Catalonia, Spain,
2000.
23. W. Mendenhall and T. Sincich. Statistics for engineering and the sciences, 4th
Edition. Prentice-Hall, 199.
24. Z. Michalewicz. Genetic Algorithms + Data Structures = Evolution Programs.
Springer-Verlag, 1996.

