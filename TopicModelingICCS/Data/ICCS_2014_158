Procedia Computer Science
Volume 29, 2014, Pages 980–990
ICCS 2014. 14th International Conference on Computational Science

Modeling phase-transitions using a high-performance,
Isogeometric Analysis framework
Philippe Vignal1 , Lisandro Dalcin2 , Nathan.O Collier3
, and Victor.M. Calo4
1

2

Center for Numerical Porous Media (NumPor),
Materials Science and Engineering (MSE),
King Abdullah University of Science and Technology, Thuwal, Saudi Arabia
philippe.vignal@kaust.edu.sa
Consejo Nacional de Investigaciones Cient´ıﬁcas y T´ecnicas, Santa Fe, Argentina
Center for Numerical Porous Media (NumPor),
King Abdullah University of Science and Technology, Thuwal, Saudi Arabia
dalcinl@gmail.com
3
Center for Numerical Porous Media (NumPor),
King Abdullah University of Science and Technology, Thuwal, Saudi Arabia
nathaniel.collier@gmail.com
4
Center for Numerical Porous Media (NumPor),
Applied Mathematics and Computational Science (AMCS),
Earth Sciences and Engineering (ErSE),
King Abdullah University of Science and Technology, Thuwal, Saudi Arabia
victor.calo@kaust.edu.sa

Abstract
In this paper, we present a high-performance framework for solving partial diﬀerential equations
using Isogeometric Analysis, called PetIGA, and show how it can be used to solve phase-ﬁeld
problems. We speciﬁcally chose the Cahn-Hilliard equation, and the phase-ﬁeld crystal equation
as test cases. These two models allow us to highlight some of the main advantages that we have
access to while using PetIGA for scientiﬁc computing.
Keywords: phase-ﬁelds, Cahn-Hilliard equation, phase-ﬁeld crystal equation, isogeometric analysis

1

Introduction

Increasingly and steadily, scientiﬁc progress is being made thanks to advanced computing capabilities, and an improved understanding of physical problems. If the proper model is used
for the problem under consideration, one can many times get through simulation reliable and
accurate predictions of properties that are not easily accessible or in the worst cases, not measurable, in a laboratory setting. Nonetheless, coming up with these models is not a trivial task.
980

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.088

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

Along these lines, one of the areas that has recently garnered more attention in computational
materials science is phase-ﬁeld modelling [18], with the goal of representing phase-transitions.
These models rely on the mathematical deﬁnition of a free energy functional that characterises
a system, and accounts for both the components that constitute the system, as well as the
interaction between them. A wide variety of phase transitions have been successfully modelled
with them [18, 19].
Models usually take the form of nonlinear, partial diﬀerential equations in the phase-ﬁeld
framework, and they can have numerical and physical issues that need to be addressed [20].
When trying to solve problems involving phase transitions, the complications usually arise in
the interfacial area, where a correct solution might require a very high spatial and/or temporal
resolution. It is in such cases where eﬃcient computational resources are needed, that take
advantage of eﬃcient libraries for scientiﬁc computing using state of the art implementations
and technologies. This was the idea behind the inception of PetIGA [6, 8], an open source library
that built the Isogeometric Analysis capability on top of PETSc (Portable, Extensible Toolkit
for Scientiﬁc Computation). The choice to base it on Isogeometric Analysis, a ﬁnite element
method (FEM) with NURBS basis functions with some improved capabilities over traditional
FEM, comes from the fact that this basis is well suited to solve higher-order partial diﬀerential
equations [7], as the NURBS-based spaces can be constructed to possess an arbitrary degree
of inter-element continuity. This gives a lot of ﬂexibility in terms of the choice made for the
spatial discretization of a particular partial diﬀerential equation when compared to classical
ﬁnite elements [15].
PetIGA was built over PETSc to make use of a wide array of tools already available for the
solution of partial diﬀerential equations, namely time-stepping algorithms and solvers (both
linear and nonlinear). Along with them, PETSc also has built-in monitors that can be used to
speed up the prototyping process when one is trying to solve a new equation, which allow to
quickly identify the real sources of error. In this work, we start by giving a brief tutorial on some
of the capabilities PetIGA has, and follow by discussing the solution of two phase-ﬁeld models
that have been extensively researched the past few years: the Cahn-Hilliard equation (CH),
and the phase-ﬁeld crystal equation (PFC).

2

PetIGA.

PetIGA is a software framework that implements a NURBS-based ﬁnite element method, popularly known as isogeometric analysis (IGA) [7]. By being built on top of PETSc, one gets
access to a useful collection of algorithms and data structures for the solution of partial diﬀerential equations (PDEs). PETSc was written so as to be applied to a wide range of problem
sizes. It has successfully been used in large-scale simulations and shown to have good scaling
results [2, 3]. This is why it was a sensible choice as a platform to develop PetIGA.

2.1

Isogeometric analysis basics.

IGA was proposed initially in [16]. It was motivated by the desire to ﬁnd a technique for solving
PDEs which would simplify the problem of converting geometric descriptions for discretizations
in the engineering design process. After creating a computer aided design (CAD), the process
of converting the representation to a form that is suitable for analysis is considered to be the
main bottleneck of the engineering analysis process, consuming up to 80% of the time [7].
By using the NURBS basis directly, isogeometric methods avoid the time-consuming step of
981

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

generating the intermediate geometry by using the CAD representations, as NURBS are capable
of representing complex geometries more precisely.
Added to this, IGA introduced a new level of reﬁnement, on top of the common h-reﬁnement
(i.e. increasing the number of elements in a mesh) and p-reﬁnement (i.e. increasing the polynomial order of the basis function), known as k-reﬁnement, which allows to arbitrarily increase the
continuity across elements and can thus be used in discretizations that require C p−1 -continuity,
where p represents the polynomial order. Work has been done on these higher-order continuous
basis functions and it has been observed, both numerically and theoretically [1, 11], that they
possess better accuracy per degree of freedom than standard C 0 basis functions. The development of eﬃcient, scalable solvers is also important though, as the weak form discretizations
with the higher-order continuous basis functions result in linear systems that are expensive to
solve [4, 5].

2.2

The philosophy behind PetIGA

By extending PETSc, that had the idea of parallelism embedded in its implementation, we
got direct access to diﬀerent modular components available for the solution of PDEs, such as
direct and iterative solvers, diﬀerent types of preconditioners and explicit and implicit timestepping schemes. PetIGA was implemented with the idea in mind that a user, willing to solve
a nonlinear and time-dependent partial diﬀerential equation in a ﬁnite element setting, should
only need to know how to get the variational formulation of the equation he was trying to solve.
Once this was achieved, he would have access to a framework that allowed him to transfer his
code to a supercomputer without any additional work, allowing him to speed up his solution
process through the use of more processors. We did not want a user to have to deal with MPI, or
have to link codes to well known routines that are already implemented and highly optimized,
but instead focus time on actually solving equations, and gaining a better understanding of
them through simulation. The goal was achieved with PetIGA, a library where the job of the
user is that of assembling the vectors and matrices stemming from the discretization.
The software takes care of assembling the local contributions to a globally distributed data
structure in distributed memory architectures, many times a complicated task to complete.
This was achieved in big part thanks to PETSc, which provides the support to do so. It also
provides data structures called distributed arrays (DAs) for managing data, for methods whose
discretization is based on a structured grid topology. This particular component optimises the
partition of the computational domain among the diﬀerent processors used, and is the main
reason why we developed the IGA object. This object leads to a nearly optimal partition of
the degrees of freedom of the domain for a single patch of NURBS-based isogeometric ﬁnite
elements by trying to minimise the load imbalance among processors. More information on
how the actual assembly of the diﬀerent matrices and vectors is done can be found in [6], and
tutorials for the software are being developed. The object-oriented setting of PetIGA hides the
details of parallelism and problem assembly, such that the actual application codes are short
and easy to read. The user only needs to provide the integrand of the weak form.

3

High-order phase-ﬁeld models: the Cahn-Hilliard (CH)
and the phase-ﬁeld crystal (PFC) equations.

Phase-ﬁeld models have received a lot of attention from many diﬀerent ﬁelds, being a truly
interdisciplinary area with problems related to numerical analysis, physics and thermodynam982

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

ics [18]. In this section we give a brief review on the basic structure of phase-ﬁeld frameworks,
as well as some background on the Cahn-Hilliard (CH) and phase-ﬁeld crystal equations (PFC).

3.1

Phase-ﬁeld modelling

In these models, a phase-ﬁeld parameter φ, continuous over the whole space, is used to represent
the diﬀerent phases. The physical behaviour of this phase-ﬁeld is then usually deﬁned through
the minimisation of a free energy functional F[φ(r)] that characterises the system, deﬁned as
F[φ(r)] =

2

g(φ) + α |∇φ| + β (Δφ)

Ω

2

dV,

(1)

where g(φ) is used to represent the bulk free energy and can take either the form of a logarithmic
function (as in CH in this work) or a polynomial (as in PFC), the parameters α and β are
constants that take values between −1 and 1, and the gradient and Laplacian terms model the
physics of the interfacial eﬀects. This framework allows for an implicit tracking of the interface,
compared to sharp-interface models, and leads to less stiﬀ systems where arbitrary rules do
not have to be used to track the interface [18]. To set the PDE, a variational derivative of the
δF[φ(r)]
selected free energy is taken,
, which is then coupled to the evolution of φ in time,
δφ
such that
δF[φ(r)]
∂φ
= −∇a · −M (φ)∇a
∂t
δφ

(2)

where M (φ) represents a mobility for the component(s) being considered, a takes a value of one
if the phase-ﬁeld represents a conserved quantity (i.e. density) or zero otherwise, and t stands
for time. We now proceed to deﬁne the partial diﬀerential equations considered in this work.

3.2

The Cahn-Hilliard equation.

The CH equation is a fourth-order, nonlinear and time-dependent, partial diﬀerential equation.
In this work, we consider the dimensionless version, adapted from [12], where the free energy
FCH is deﬁned as
FCH =

Ω

(c)log(c) + (1 − c)log(1 − c) + 2θc(1 − c) +

θ
|∇c|2 dV,
3γ

(3)

where the phase-ﬁeld parameter c represents concentration, γ is a dimensionless number related to the thickness of the interfaces and is given a value of 3000, and θ, equal to 3/2, is a
dimensionless number that represents a critical transition ratio. The CH equation has successfully been used to model spinodal decomposition, a physical mechanism in which a mixture
phase-separates when θ takes a value greater than one. Considering that the concentration is
a conserved quantity, the PDE becomes
∂c
δFCH
= ∇ · Mc ∇
∂t
δc
= ∇ · (Mc ∇ (μc − Δc))

(4)

where μc represents a chemical potential deﬁned as
μc =

c
1
log
+ 1 − 2c.
2θ
1−c
983

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

Finally, the strong form of this equation can be expressed as
⎧
∂c
⎪
⎪
− ∇ · (Mc ∇ (μc − Δc)) = 0
on Ω×]0, T ]
⎪
⎪
∂t
⎪
⎪
⎪
⎨c = c
on Ω × {t = 0}
0

Mc ∇ (μc − Δc) · n = s
⎪
⎪
⎪
⎪
Mc λ∇c · n = 0
⎪
⎪
⎪
⎩c = g

(5)

on Γs ×]0, T ]
on Γ×]0, T ]
on ΓD ×]0, T ]

To get the weak form for this equation and be able to implement the residual in PetIGA, we let
V denote the trial and weighting function spaces, and consider periodic boundary conditions in
all directions. The variational formulation, obtained by multiplying the strong form by a test
function w and integrating by parts, is stated as: ﬁnd c ∈ V such that ∀w ∈ V,
(w, c)
˙ Ω + (∇w, Mc ∇μc + ∇Mc Δc)Ω + (Δw, Mc Δc)Ω = 0,

(6)

∂c
, (., .)Ω represents the L2 inner product over the domain Ω and V needs to be
∂t
H2 -conforming. We use the Galerkin method (although collocation is also available in PetIGA)
to discretize the inﬁnite dimensional problem and derive the semidiscrete formulation which is
then stated as: ﬁnd ch ∈ V h ⊂ V such that ∀wh ∈ V h ⊂ V such that
where c˙ =

wh , c˙h

Ω

+ ∇wh , Mch ∇μhc + ∇Mch Δch

Ω

+ Δwh , Mch Δch

Ω

= 0.

(7)

We suppose that the discrete space V h is spanned by the linear combination of basis functions
NA , which are C 1 -continuous B-spline basis functions that are associated to the global degree
of freedom A, that runs from 1 to nd , where nd represents the dimension of the discrete space.
With regards to PetIGA, if one is able to get equation (7) and an initial condition, testing of
the residual can already be done to check if the system converges to a solution, or compare the
results to a benchmark problem. This can save time while prototyping a code or model. Being
a nonlinear time-dependent problem, the CH model requires the use of a Jacobian if one sets
the problem up with a Newton-type scheme. Another advantage of PETSc is that it is able to
approximate the Jacobian through ﬁnite-diﬀerencing. The user does not even need to code it to
start getting results. With regards to the time-discretization, we employ the adaptive scheme
from [12], which uses the generalised-α method.

3.3

The phase-ﬁeld crystal equation

The PFC equation is a sixth-order, nonlinear time-dependent partial diﬀerential equation. Even
though it was initially developed to study problems related to solidiﬁcation [9] at atomic length
scales and diﬀusive time scales, it has since then been used to tackle issues in crack propagation,
dislocation dynamics, and formation of foams [10].
In the equation, the order parameter φ represents an atomistic density ﬁeld, which is periodic
in the solid state and uniform in the liquid one. The free energy functional for the phase-ﬁeld
crystal equation in its dimensionless form is given by [9, 17]
FP F C =

Ψ(φ) +
Ω

1 2
φ − 2|∇φ|2 + (Δφ)2
2

dV,

(8)

where Ψ(φ) = 14 φ4 − 2 φ2 . Notice that the sign in front of the gradient term |∇φ| is negative
in this case, whereas it is positive in the case of CH. This has physical implications in the
984

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

behaviour of the equations, as in CH, interfaces (i.e. where the gradients are present) will be
energetically penalised and so the equation will tend to minimise them, whereas in PFC they
will be energetically favoured because of their negative contribution to the free energy. To get
the PDE, we apply the same procedure as before (again with a = 1 as density is a conserved
quantity) and get
∂φ
δFP F C
= ∇ · Mφ ∇
∂t
δφ
= Δ (1 + Δ)2 φ + Ψ (φ))

(9)

where the mobility Mφ is taken to be equal to one, and Ψ (φ) = φ3 − φ. By considering the
boundary conditions, the strong form of the problem can then be stated as follows: over the
¯ −→ R, ﬁnd φ : Ω
¯ × [0, T ] −→ R such
spatial domain Ω and the time interval ]0, T [, given φ0 : Ω
that
⎧
∂φ
2
⎪
on Ω×]0, T ]
= Δ (1 + Δ) φ − φ + φ3
⎪
⎪
⎪
∂t
⎪
⎪
2
3
⎪
⎨∇ (1 + Δ) φ − φ + φ · n = 0
on Ω×]0, T ]
(10)
∇(2φ + Δφ) · n = 0
on Ω×]0, T ]
⎪
⎪
⎪
⎪
⎪
∇φ · n = 0
on Ω×]0, T ]
⎪
⎪
⎩
¯
φ(x, 0) = φ0 (x)
on Ω
The following splitting of the equation is proposed
∂φ
= Δσ,
∂t
2
σ = (1 + Δ) φ + Ψ (φ)

(11a)
(11b)

where Ψ (φ) = − φ + φ3 . We chose this formulation to compare results with the formulation
presented in [21]. The functional space V ∈ H2 is deﬁned, where H2 corresponds to the Sobolev
space of square integrable functions with square integrable ﬁrst and second derivatives. A weak
form of equations (11a) and (11b) is derived by multiplying them by test functions q ∈ H2
and w ∈ H2 , respectively, and integrating by parts. Assuming periodic boundary conditions in
every direction, one can state the problem as: ﬁnd φ ∈ V and σ ∈ V such that for all q ∈ V and
w∈V
q, φ˙

Ω

+ (∇q, ∇σ)Ω = 0,

(12a)

(w, σ)Ω − (w, Ψ (φ) + φ)Ω + (∇w, 2∇φ)Ω − (Δw, Δφ)Ω = 0.

(12b)

To derive a ﬁnite element approximation to the problem, we pick the ﬁnite dimensional space
V h ⊂ V and derive a semi discrete formulation. The problem is then to ﬁnd φh , σ h ∈ V h such
that for all q h , wh ∈ V h
q h , φ˙ h
wh , σh

Ω
Ω

+ ∇q h , ∇σ h

Ω

= 0,

− wh , Ψ (φh ) + φh

(13a)
Ω

+ ∇wh , 2∇φh

Ω

− Δwh , Δφh

Ω

= 0.

(13b)

We again suppose that the discrete space V h is spanned by the linear combination of basis
functions NA , which are C 1 -continuous B-spline basis functions that are associated to the global
degree of freedom A, that runs from 1 to nd , where nd represents the dimension of the discrete
space.
985

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

With regards to the implementation, we let the global vectors of degrees of freedom associated to φhn and σnh be Φn and Σn , respectively. The residual vectors for this formulation are
then given by
Rφ (Φn , Φn+1 , Σn+1 );
σ

R (Φn , Φn+1 , Σn+1 );

φ
Rφ = {RA
};

A = 1, ..., nb ,

(14)

σ
{RA
};

A = 1, ..., nb ,

(15)

σ

R =

φ
σ
= 0 and RA
= 0 are deﬁned as
where RA

qh ,

[[φhn ]]
Δt

wh , σh
− w

h

Ω

Ω

+ ∇q h , ∇σ h

Ω

φ
= RA
,

1
− wh , Ψ (φhn+1 + φhn )
2

, φhn+1/2

Ω

+ 2 ∇w

h

(16)

Ω

, ∇φhn+1/2

Ω

− Δwh , Δφhn+1/2

Ω

σ
= RA
.

(17)

1 h
where [[φhn ]] = φhn+1 − φhn and φhn+1/2 =
φ
+ φhn . A system of nonlinear equations for
2 n+1
Φn+1 and Σn+1 is obtained by having the residual vectors be equal to zero, and solved using
Newton’s method. By having Φn+1,(i) and Σn+1,(i) be the ith iteration of Newton’s algorithm,
the iterative procedure was deﬁned as in [13]: taking Φn+1,(0) = Φn and Σn+1,(0) = Σn . Then,
for i = 1, .., imax ,
(1) Compute residuals using Φn+1,(i) , Σn+1,(i) , denoted as Rφ(i) and Rσ(i) , respectively.
(2) Compute the tangent matrix Ki using the ith iterates. This matrix is given by
K(i) =

Kφφ
(i)
Kσφ
(i)

Kφσ
(i)
Kσσ
(i)

.

(3) Solve the linear system
Kφφ
(i)
Kσφ
(i)

Kφσ
(i)
Kσσ
(i)

δΦn+1,(i)
δΣn+1,(i)

=−

Rφ(i)
Rσ(i)

(4) Update the solution such that
Φn+1,(i+1)
Σn+1,(i+1)

=

Φn+1,(i)
Σn+1,(i)

+

δΦ(i+1)
δΣ(i+1)

This algorithm needs to be repeated until the norm of both residual vectors is reduced to a
given tolerance of their initial value.
We found it interesting to analyze the behavior of the free energy with diﬀerent implicit
time marching schemes. And herein lies one of the other advantages of PETSc: the code to
solve the equation using Backward Euler, the theta method, or generalized-α is exactly the
same, and does not need to be recompiled if one wishes to switch between schemes. An added
advantage, is the fact that options can be directly speciﬁed as command line arguments.

4

Numerical Results.

In this section we present some numerical results for both equations, showing how PetIGA can
be used to visualise the solution in real time, as well as some of the features that make it a
986

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

(a) t = 0

(b) t = 7.78 ∗ 10−4

(c) t = 0.1

Figure 1: Spinodal decomposition. Snapshots of the numerical approximation to the concentration at diﬀerent time steps. The computational mesh is composed of 642 C 1 quadratic elements.

Figure 2: Output for the -snes check jacobian argument. The hand-coded jacobian is compared to PETSc’s ﬁnite diﬀerence approximation.

useful tool in solving high-order, partial diﬀerential equations. The examples that are dealt
with are taken from [12] for CH, and from [20] for PFC.

4.1

Spinodal decomposition using the Cahn-Hilliard equation.

The initial condition was set to be
c(t = 0, x) = 0.63 + cˆ,

(18)

over the whole domain (the unit square), with cˆ a uniform random variable with values contained in the interval [−0.05, 0.05]. As the value of θ lies above one, we can see the occurrence
of a phase separation during the evolution of the concentration in Figure 1, where the command
to execute the program looks like this:
mpiexec -n 4 ./CahnHilliard2D -N 64 -p 2 -C 1 -ts monitor draw solution
where mpiexec -n 4 speciﬁes the number of processors one is using (in this case four),
CahnHilliard2D is the name of the executable being used, and N, p and C control the number
of elements, the polynomial order and the degree of continuity of the basis functions used to
solve the problem, respectively. The snapshots shown are taken at diﬀerent times during the
phase separation, and the solution presented in [12] is recovered, which conﬁrms the correct implementation of the algorithm proposed. These snapshots are generated in real-time, as PETSc
has 2D visualisation capabilities to make the debugging process easier, and all one needs to
do is add −ts− monitor− draw− solution as an argument in the command line when executing the program. By adding −snes− mf, one can use the ﬁnite-diﬀerence calculated jacobian
for the residual that was established, or check the explicitly coded jacobian using the option
−snes− check− jacobian and get an output as shown in Figure 2. Tolerances can also be set
as command line arguments, both for the linear (ksp) and nonlinear (snes) solvers. By being
connected to PETSc, one really gets a large number of very useful tools to monitor and identify problems while trying to solve complicated partial diﬀerential equations. All the options
available can be shown by adding -help as an argument.
987

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

(a) t = 0

(b) t = 20

(c) t = 150

Figure 3: Crystal growth in a supercooled liquid. Snapshots of the numerical approximation
to the atomistic density ﬁeld of the phase ﬁeld crystal equation using Crank-Nicolson. The
computational mesh is composed of 1902 C 1 quadratic elements. The time step is 1.0.

4.2

Crystal growth using the phase-ﬁeld crystal equation.

For the following example, we simulate crystal growth in a supercooled liquid. The initial
condition is given by
φ0 (x) = φ¯ + A cos

qy
√
3

cos(qx) − 0.5cos

2q
√ y
3

(19)

where φ¯ represents the average value of φ(x), A is the amplitude of the ﬂuctuations in density,
and q represents a wavelength related to the lattice constant [18]. These parameters take the
values
√
√
3
15 − 36φ¯2
4 ¯
¯
; q=
; A=
φ+
.
= 0.325; φ =
2
2
5
3
φ¯ can be seen as the value given to the density of the liquid, whereas the second term of
equation (19) really sets the structure for the solid. In this case, an initial solid nucleus is
placed in the center of a square domain, and is surrounded by liquid of the same material that
is below its critical temperature of fusion. This leads to an evolution which sees the solid phase
√
20π
12 3π
¯
×
.
grow as the liquid crystallizes around it. The domain size chosen is Ω =
q
q
The initial condition was chosen so as to only have one hexagon of atoms lying in the center
of the domain. The evolution of the single crystal is shown in ﬁgure 3. The growth of the
crystalline phase can be observed, with features being similar to the ones presented in [13, 14].
We also observed the free energy to be non-increasing at each time step.

5

Conclusions.

In this paper, a high-performance implementation of isogeometric analysisis is presented. The
software is built in such a way that the user only has to worry about coding the integrand of the
weak form and the initial condition. PetIGA is a useful tool for the solution of high-order partial
diﬀerential equations that arise in phase-ﬁeld models. The prototyping stage is simpliﬁed as
compared to other frameworks, as the monitors we get access to through PETSc speed up the
988

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo

debugging process. The framework allows the user to focus on how to solve a problem instead
of how to implement it.

6

Future Work

Given the possibility of generating higher-order continuous spaces, diﬀerent formulations are
possible when solving these equations with IGA. Even though the number of degrees of freedom increases with each split of the equation, that doesn’t necessarily translate to longer
computational times. Properties such as energy-stability and mass conservation also need to
be guaranteed for the numerical scheme used to be valid. Our future work will tackle theses
problems. We will analyse the numerical complexity of the splits, as well as develop numerical
schemes that possess the aforementioned properties.

6.1

Acknowledgments

This work was supported by NumPor, the centre for Numerical Porous Media.

References
[1] I. Akkerman, Y. Bazilevs, V.M. Calo, T.J.R. Hughes, and S. Hulshoﬀ. The role of continuity in
residual-based variational multiscale modeling of turbulence. Computational Mechanics, 41:371–
378, 2008.
[2] S. Balay, K. Buschelman, V. Eijkhout, W.D. Gropp, D. Kaushik, M.G. Knepley, L. Curfman
McInnes, B.F. Smith, and H. Zhang. PETSc users manual. Technical Report ANL-95/11 Revision 3.0.0, Argonne National Laboratory, 2008.
[3] S. Balay, K. Buschelman, W. D. Gropp, D. Kaushik, M. G. Knepley, L. Curfman McInnes, B. F.
Smith, and H. Zhang. PETSc Web page, 2010. http://www.mcs.anl.gov/petsc.
[4] N. Collier, L. Dalcin, D. Pardo, and V.M. Calo. The cost of continuity: performance of iterative
solvers on isogeometric ﬁnite elements. SIAM Journal on Scientiﬁc Computing, 35(2):A767–A784,
2013.
[5] N. Collier, D. Pardo, L. Dalcin, M. Paszynski, and V.M. Calo. The cost of continuity: A study of
the performance of isogeometric ﬁnite elements using direct solvers. Computer Methods in Applied
Mechanics and Engineering, 213-216(0):353–361, 2012.
[6] N.O. Collier, L. Dalc´ın, and V.M. Calo. PetIGA: High-performance isogeometric analysis. arxiv,
abs/1305.4452, 2013. http://arxiv.org/abs/1305.4452.
[7] J.A. Cottrell, T.J.R. Hughes, and Yuri Bazilevs. Isogeometric Analysis: Toward Uniﬁcation of
CAD and FEA. John Wiley and Sons, 2009.
[8] L. Dalcin and N. Collier. Petiga: A framework for high performance isogeometric analysis. https:
//bitbucket.org/dalcinl/petiga, last viewed January 2014, 2012.
[9] K.R. Elder, M. Katakowski, M. Haataja, and M. Grant. Modeling elasticity in crystal growth.
Phys. Rev. Lett., 88:245705, Jun 2002.
[10] H. Emmerich, H. L¨
owen, R. Wittkowski, T. Gruhn, G.I. T´
oth, G. Tegze, and L. Gr´
an´
asy. Phaseﬁeld-crystal models for condensed matter dynamics on atomic length and diﬀusive time scales: an
overview. Advances in Physics, 61(6):665–743, 2012.
[11] J.A. Evans, Y. Bazilevs, I. Babuˇska, and T.J.R. Hughes. n-widths, sup-infs, and optimality
ratios for the k-version of the isogeometric ﬁnite element method. Computer Methods in Applied
Mechanics and Engineering, 198(21-26):1726–1741, 2009.

989

Modeling phase-transitions using a high-performance, IGA framework.Vignal, Dalcin, Collier and Calo
[12] H. G´
omez, V. M. Calo, Y. Bazilevs, and T.J.R. Hughes. Isogeometric analysis of the Cahn-Hilliard
phase-ﬁeld model. Computer Methods in Applied Mechanics and Engineering, 197(49-50):4333–
4352, 2008.
[13] H. G´
omez and X. Nogueira. An unconditionally energy-stable method for the phase ﬁeld crystal
equation. Computer Methods in Applied Mechanics and Engineering, 249-252(0):52–61, 2012.
[14] Z. Hu, S.M. Wise, C. Wang, and J.S. Lowengrub. Stable and eﬃcient ﬁnite-diﬀerence nonlinearmultigrid schemes for the phase ﬁeld crystal equation. Journal of Computational Physics,
228(15):5323 – 5339, 2009.
[15] T.J.R. Hughes. The ﬁnite element method: linear static and dynamic ﬁnite element analysis.
Dover Publications, 2000.
[16] T.J.R. Hughes, J.A. Cottrell, and Y. Bazilevs. Isogeometric analysis: CAD, ﬁnite elements,
NURBS, exact geometry and mesh reﬁnement. Computer Methods in Applied Mechanics and
Engineering, 194:4135–4195, 2005.
[17] A Jaatinen and T Ala-Nissila. Extended phase diagram of the three-dimensional phase ﬁeld crystal
model. Journal of Physics: Condensed Matter, 22(20):205402, 2010.
[18] N. Provatas and K. Elder. Phase-Field Methods in Materials Science and Engineering. Wiley-VCH,
1st edition, 2010.
[19] R. Spatschek, C. M¨
uller-Gugenberger, E. Brener, and B. Nestler. Phase ﬁeld modeling of fracture
and stress-induced phase transitions. Phys. Rev. E, 75:066111, Jun 2007.
[20] P. Vignal, L. Dalcin, D.L. Brown, N.O. Collier, and V.M. Calo. Energy-stable time discretizations
for the phase-ﬁeld crystal equation. in preparation, 2014.
[21] P.A. Vignal, N. Collier, and V.M. Calo. Phase ﬁeld modeling using petiga. Procedia Computer
Science, 18(0):1614 – 1623, 2013. 2013 International Conference on Computational Science.

990

