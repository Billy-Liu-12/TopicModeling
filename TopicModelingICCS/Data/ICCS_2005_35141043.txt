Advancing Scientific Computation by Improving
Scientific Code Development: Symbolic
Execution and Semantic Analysis
Mark Stewart
QSS Group Inc. at NASA Glenn Research Center
Brook Park, Ohio, USA 44135
Mark.E.Stewart@grc.nasa.gov

Abstract. This paper presents an implementation of a technique for automated,
rigorous scientific program comprehension and error detection. The procedure
analyzes fundamental semantic concepts during a symbolic execution of a user’s
code. Since program execution is symbolic, the analysis is general and can
replace many test cases. The prototype of this procedure is demonstrated on two
test cases including a 5k line of code (LOC) program. Although this technique
promises a powerful tool, several challenges remain.

1 Introduction
As scientific computing matures, a lingering problem is the manual nature of code
development and testing. Arguably, the underlying issue is code semantics—the what,
why, and how of computer code—and how to automate recognition of code (perhaps
even synthesis) thereby reducing the time and effort of code development, testing, and
maintenance. Certainly, code developers can manually translate between their code
and classical mathematical and physical formulae and concepts (with reasonable
reliability). However, formalization and automation of this process has not occurred.
To address these concerns, this paper reports on an effort to formalize and
automatically analyze these scientific code semantics using symbolic execution and
semantic analysis.
The thesis of symbolic execution is that the semantics of a programming
language’s construct (the variables, data structures, and operators) can be faithfully
represented symbolically. Further, this symbolic representation can be propagated
during an execution of the code to provide a general and rigorous analysis.
However, symbolic execution of program statements generates symbolic
expressions that will grow exponentially—unless simplified. Here semantic analysis
simplifies these expressions by recognizing formulae and concepts. Semantic analysis
stores and recognizes the classical mathematical, logical, and physical concepts and
notation that code developers and engineers are familiar with.
The concept of symbolic execution was introduced by King [1] in 1976. In a
review article, Coward [2] suggests symbolic execution has languished due to the
difficulty of implementation, and cites four problems:
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 1043 – 1050, 2005.
© Springer-Verlag Berlin Heidelberg 2005

1044

M. Stewart

1) evaluating array references dependent on symbolic values,
2) the evaluation of loops where the number of iterations is unknown,
3) checking the feasibility of paths: how to process branch conditions dependent on
symbolic expressions,
4) how to process module calls: symbolically execute each call or execute once and
abstract,
Code semantics have been the focus of some work [3,4,5] including the use of an
ontology and parsers for natural language understanding [6]. Petty [7] presents an
impressive procedure where—during numerical execution—the units of variables and
array elements are analyzed. The procedure can be easily applied to a user’s code;
however the numerical execution results in high wall-time and memory requirements.
This symbolic execution / semantic analysis procedure is not only intellectually
appealing as a formalism; it can be fast and very general! Human programmers analyze
code at approximately 0.5 LOC per minute; symbolic execution runs
quickly—approximately 1000 times faster than a human—often faster than
numerically executing the code itself! The procedure is general and rigorous because it
uses the abstraction of symbols—not numbers; a single symbolic analysis can replace
testing with a suite of conventional test cases. In Code 1, for example, if the search
fails, a memory bounds error occurs. Symbolic execution detected this error, but
numerical execution would require a specific set of inputs before this error occurred.
Code 1: Analysis detects how the search failure results in a memory access error
Dimension array(100)
…
Do 10 I = 1, 100
If ( test_value .le. array(i) ) goto 20
10
Continue
20
value = array(I)
Symbolic execution / semantic analysis is not without challenges, and in the
following sections, the symbolic execution procedure is explained, key problems and
solutions are presented, and results are demonstrated including results for a 5k LOC
scientific code.

2 Symbolic Execution/Semantic Analysis Procedure
This symbolic execution / semantic analysis procedure has two preliminary steps.
First, the user makes semantic declarations (1) that provide the fundamental semantic
identity of primitive variables in the code including any program inputs.
A <= acceleration, m/s2;
M <= mass, kg;

(1)

Second, a parser converts the user’s code and semantic declarations into a tree
representation in a language independent form. Symbolic execution / semantic analysis
start from this basis.

Advancing Scientific Computation by Improving Scientific Code Development

1045

2.1 Symbolic Execution
Symbolic execution is similar to the ubiquitous numerical execution. In both cases
statements from the user’s program are executed. However, instead of loading into
memory numerical values of variables, a symbolic execution emulator uses symbolic
values that describe the variables. This emulator takes statements from the user’s
program, performs the operations on these symbols, and generates symbolic
expressions. This symbolic execution emulator has a prescribed action or response to
each operation encountered in a user’s program, including +, -, *, /, **, array
references, logical operators and loops. Table 1 contrasts numerical and symbolic
execution.
Table 1. Comparison of numerical and symbolic execution for code statements. For numerical
execution, the input file contains “4 5”; the semantic declarations are (1)

Code
Statement

Numerical
Execution

Symbolic Execution/ Semantic
Analysis

READ M, A

Place 4 into M,
5 into A

Attach Semantic Declaration to
Instance of M and A;
Ignore input file

B=M

Transfer Number
Value

Transfer Symbolic Value

M*A

Calculate 4 * 5

If (A.eq.5) then
B=5

A.eq.5 is True,
so
Transfer 5 to B

Form “mass * acceleration”,
“kg * m/s2”, and attempt
simplification by semantic analysis
Form “A.EQ.5 ⇒ 5 | B”
and attempt simplification by
semantic analysis

2.2 Semantic Analysis
As statements are symbolically executed, the generated symbolic expressions become
larger—unless they are simplified. The role of semantic analysis is to recognize and
simplify the fundamental mathematical, logical, and physical formulae used in these
expressions. Here, parsers [8,9] are used to recognize formulae in expressions and
simplify them. For example, the physical formula “Force = Mass * Acceleration” is
one of many formulae encoded in one expert parser. If the parser examines the
expressions in Table 1, it will recognize “Mass * Acceleration” and replace it with
“Force”. More details of how formulae are recognized in parsers are given in [10].
Semantic analysis is not only a vital simplification tool for successful symbolic
execution; symbolic representations exist for many semantic aspects of scientific and
engineering code, including units, dimensions, vector analysis, and physical and
mathematical equations. Table 2 provides a comprehensive list.

1046

M. Stewart

Table 2. Scientific semantic properties analyzed by the procedure, including sample equations
and number of parsers
Property Analyzed
Physical Equation
Math Equation
Logical Expression
Value / Interval
Grid Location
Vector Analysis
Non-Dimensional
Dimensions
Unit
Object
Data Type

Sample Equation
force ⇐ mass * accel
∆φ ⇐ φ - φ
φ ⇐ If (True) φ else θ
[1,50] ⇐ [0,49] + 1
φi ⇐ φi+1 + φi-1
2
2
2
φ⋅φ ⇐ φx + φy + φz
φ/A ⇐ χ/A + ϕ/A
L ⇐ (L/T) * T
m ⇐ m/s * s
fluid ⇐ fluid * anything
Real ⇐ Real * Integer

Parsers
3
5
2
2
4
1
1
1
1
1
1

3 Symbolic Execution of Array References, Loops, and Conditional
Statements
Coward [2] noted that array references, loops, and conditional expressions are a
challenge in symbolic execution. The challenge is that execution of these constructs
depends on the numerical value of variable(s).
For example, while numerical
execution of an array evaluation involves retrieving a value at a known numerical
index, symbolic execution only knows what is symbolically possible for the index and
must retrieve array elements within the corresponding range of index values.
Symbolic execution requires more complex analysis than for numerical execution,
however advantages exist. The principle advantage is greater generality and
rigorousness. The following three sections will pursue this issue for array
representation, loops, and logical expressions.
3.1 Array Assignments and References
Code 2 demonstrates symbolic execution of a simple loop. After symbolic execution,
the array A is represented as in Figure 1 where symbolically identical array
elements—the fourth through Nth (and 2nd,3rd and N-1st to 100th)— have been grouped
together, while the first array element has not.
Code 2. Simple Loop shows how loops and array references are symbolically executed

10

Integer A(100)
Read N
A(1) = 5
Do 10 i=4,N
A(i) = 1
continue

Advancing Scientific Computation by Improving Scientific Code Development

1

2

5

4

N

1047

100

1

Fig. 1. Symbolic representation of the array A after execution of Code 2. Undefined values are
diagonally shaded; array values are in bold; array indices are above

This grouping of symbolically identical array elements uses an ontology for array
indices; the ontology entities are shown in Table 3. In Code 2, scientific code
developers will easily recognize that the array variable “i” is a Counter, variable “N” is
a Number.
Table 3. Entities in the Array Index Ontology. All are integer valued
Index Entity

Role of Index Entity

Integer Constant
Number
Counter
Compressed Counter
Enumeration
Offset
Offset Index
Index Number
Compressed Index
Number

A Known, Unchanging Value
A Variable: Unspecified, Unchanging Value
A Variable: Taking on all Integer Values in a Range
Scalar Representation of Counters for Multiple Array Indices
A Product of Integer Constant and Number Expressions
Delineates Multiple Arrays Stored in 1-D Array
Offset plus Compressed Counter
A Variable: Unspecified, Unchanging Value, in a Range
Scalar Representation of Index Numbers for Multiple Array
Indices

These index entities organize an array’s representation. To evaluate an array
reference, the procedure compares the array indices—symbolically—with the index
entities that bound the groupings in the array representation. For example, to reference
A(N+1) in Figure 1, the procedure compares N+1 with 1, 2, 4, N, and 100, and
concludes A(N+1) is in the final grouping of array entries from N+1 to 100.
Not only does the grouping of symbolically identical array elements use memory
efficiently, it eliminates duplicate analysis. Where loops apply an identical operation
over large parts of an array—as is so common in scientific computing—the semantic
analysis is reduced to one analysis of an array assignment or reference. This is the
principle reason why symbolic execution / semantic analysis can be faster than
numerical execution of the same code!
3.2 Loop Evaluation
Loop evaluation is a further hurdle in symbolic execution. The issue is whether
dependencies exist between loop iterations. Often no dependencies exist between
iterations, and straight line symbolic execution is possible. If dependencies do exist
between loop iterations, an attempt is made to use Mathematical Induction to deduce
values.

1048

M. Stewart

3.3 Conditional Expressions
Symbolic execution of conditional expressions is a challenging issue since symbolic
values in the condition force the examination of each block of conditional code. The
current procedure symbolically executes the statements from each possible code block.
Then, for each variable, the procedure forms a conditional expression that is valid
following the conditional expression. This expression is propagated through the
following code.
3.4 Subroutine Calls
The current procedure deals with routine calls by symbolically transferring call line
parameters and global variables to a child symbol table, and then symbolically
executing the routine. Upon completion of the routine, call line parameters and global
variables are updated in the parent symbol table.
In the test cases studied, repeat calls to routines were not excessive—since routine
calls within loops are executed once or a few times. In principle, symbolically identical
routine calls need not be repeated, but this feature has not been implemented yet.
3.5 Speed of Symbolic Execution/Semantic Analysis
The wall time requirements for symbolic execution of a code are fundamentally
different from the wall time requirements of numerical execution. Two opposing issues
influence the wall time—and decide the economics—of symbolic execution.
First, symbolic execution is considerably more expensive than numerical
execution on an operation by operation basis. Numerical execution of “A*B” includes
memory accesses and a floating point operation—usually within optimized software
and hardware. Symbolic execution of “A*B” includes constructing a data structure
representation of the expression, and its examination by several expert parsers.
Second, the computationally demanding parts of scientific codes are usually the
iterations of code within loops. Yet, in symbolic execution of a loop, symbolically
equivalent (and numerically different) iterations can be grouped together and analyzed
once. Consequently, symbolic execution is very attractive for loop intensive code. In
particular, symbolic execution can be faster than symbolic execution for loop intensive
code. Conversely, codes with fewer loops can execute more slowly symbolically than
numerically.

4 Demonstration of Results
This symbolic execution / semantic analysis procedure has been developed and tested
with two codes.
COMDES is a 1-dimensional aerodynamic design code written in FORTRAN77
with extensive use of aerodynamic formulae, relatively less use of mathematical
formulae, and minimal use of subroutines. Symbolic execution completes successfully
with 100% semantic analysis of units (Table 4).
STAGE2 is a 5k LOC, 2-dimensional computational fluid dynamics (CFD) code that
solves turbulent, aerodynamic flow over compressor blade sections. Written in

Advancing Scientific Computation by Improving Scientific Code Development

1049

FORTRAN77, it is aggressively coded and makes extensive use of mathematical
formulae, loops, array references and assignments (compacting multi-dimensional
arrays into a 1D array, and multiple blocks of data into a 1D array), conditional
expressions, and routine calls. The symbolic execution and semantic analysis of units
completes almost completely. Details are shown in Table 4. For realistic grids and
number of iterations, the resulting loop sizes make symbolic execution much faster
than conventional numerical execution.
Table 4. Current performance results for the semantic analysis program’s analysis of two test
cases. Max. memory is the gross memory required to represent and retain all local and global
semantic information during the semantic analysis; the executable size is 5.0 MByte.
Calculations performed on a PC with a Pentium 4 2.2 GHz processor with 512 MByte of RAM.
The analysis results reflect the semantic analysis code’s quality and not the quality or ability of
the tested codes
Code

Lines (k Semantic Symb Exec Wall
Unit
Statements
loc)
Declarations
Time (s)
Recognition Executed (k)
Rate (%)

Max
Memory
(MBytes)

Comdes

0.4

42

15.1

100.

.5

5.5

STAGE2

4.9

87

199.4

93.9

8.2

65.3

5 Discussion
5.1 Semantic Complexity
Refinement of this symbolic execution / semantic analysis procedure revealed
increasingly complex semantic concepts corresponding to aggressive programming
techniques.
For example, array indices were encountered that store a
multi-dimensional array in a 1D array, and store multiple blocks of data in a 1D array.
This observation poses several questions: “Is the population of semantic concepts
used in code limited or bounded?”, “Does clear, well written code use only a bounded
set of basic semantic concepts?”, and “What are the limits on human programmers’
knowledge, comprehension, and reliability?”
5.2 Inference Chains and Recognition Reliability
Reliability is a big challenge for symbolic execution. Recognizing and simplifying one
expression depends on successfully recognizing and simplifying preceding
expressions; conversely, failing to recognize one result usually prevents any further
recognition. For example, in Code 2, a failure to locate and assign to A(1)
compromises the remainder of the analysis.
This dependency is called the inference chain or inference tree. A code’s inference
chains can be exceedingly long. In COMDES, chains as long as 140 inferences have
been measured, and the longest chains in STAGE2 are probably at least an order of
magnitude greater. As code size and number of inferences increase, the chance of a
recognition failure also increases and reliability decreases.

1050

M. Stewart

5.3 Problem Difficulty
The difficulty of implementing symbolic execution / semantic analysis is a further
challenge. Complete symbolic execution of the STAGE2 code involved previous work
[10] plus a large extension effort that was completed (part-time) over 3 years.
Achieving symbolic execution of the next code is easier, but still a major effort. The
expectation is that refinement efforts accumulate so that development time drops for
each successive user’s code until closure is reached.

6 Conclusions
This work demonstrates that rigorous, automated symbolic analysis of scientific code is
possible with a formalization of code semantics. Further, this work reveals the
challenges of symbolic execution / semantic analysis, in particular, semantic
complexity and recognition reliability.
Lastly, this work emphasizes the fundamental role of semantics in software, and
how this role has been obscured by our contentment with manual software
development.

References
1. King, J. C., “Symbolic Execution and Program Testing,” Communications of ACM, 1976,
19, (7), pp. 385-394
2. Coward, P. D., “Symbolic Execution Systems-A Review,” Software Engineering Journal,
Nov. 1988. P 229-239
3. L. M. Wills, “Automated Program Recognition: A Feasibility Demonstration,” Artificial
Intelligence 45 (1-2): 113-172 (1990).
4. A. Quilici, “A Memory-Based Approach to Recognizing Programming Plans,” Comm. of
the ACM, 37(5):84 (1994).
5. B. Di Martino, C. W. Keβler, “Two Program Comprehension Tools for Automatic
Parallelization,” IEEE Concurrency, Jan.-March 2000.
6. J. Allen, Natural Language Understanding (Benjamin/Cummings, Menlo Park, 1987)
7. Petty, G. W., “Automated computation and consistency checking of physical dimensions
and units in scientific programs,” Software—Practice and Experience, 2001; 31
pp.1067-1076
8. S. C. Johnson, “Yacc--Yet Another Compiler-Compiler,” Comp. Sci. Tech. Rep. No. 32.
(AT&T Bell Laboratories, Murray Hill, 1977).
9. A.V. Aho, R. Sethi, J. D. Ullman, Compilers: Principles, Techniques, and Tools
(Addison-Wesley, Reading, 1986).
10. M.E.M. Stewart, S. Townsend, “An Experiment in Automated, Scientific-Code Semantic
Analysis,” AIAA-99-3276, June 1999

