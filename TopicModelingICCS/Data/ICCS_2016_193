Procedia Computer Science
Volume 80, 2016, Pages 951–961
ICCS 2016. The International Conference on Computational
Science

Hierarchical Density-Based Clustering based on GPU
Accelerated Data Indexing Strategy∗
Danilo Melo1 , S´avyo Toledo1 , Fernando Mour˜ao1 , Rafael Sachetto1
, Guilherme Andrade2 , Renato Ferreira2 , Srinivasan Parthasarathy3 , and
Leonardo Rocha1
1

Universidade Federal de S˜
ao Jo˜
ao del Rei, S˜
ao Jo˜
ao del Rei, Minas Gerais, Brasil
{danilo,savyo,fhmourao,sachetto,lcrocha}@ufsj.edu.br
2
Universidade Federal de Minas Gerais, Belo Horizonte, Minas Gerais, Brasil
{gnandrade,renato}@dcc.ufmg,br
3
Dept. of Computer Science and Engineering, The Ohio-State University
srini@cse.ohio-state.edu

Abstract
Due the recent increase of the volume of data that has been generated, organizing this data has
become one of the biggest problems in Computer Science. Among the diﬀerent strategies propose to deal eﬃciently and eﬀectively for this purpose, we highlight those related to clustering,
more speciﬁcally, density-based clustering strategies, which stands out for its ability to deﬁne
clusters of arbitrary shape and the robustness to deal with the presence of data noise, such as
DBSCAN and OPTICS. However, these algorithms are still a computational challenge since
they are distance-based proposals. In this work we present a new approach to make OPTICS
feasible based on data indexing strategy. Although the simplicity with which the data are indexed, using graphs, it allows explore various parallelization opportunities, which were explored
using graphic processing unit (GPU). Based on this structure, the complexity of OPTICS is
reduced to O(E ∗ logV ) in the worst case, becoming itself very fast. In our evaluation we show
that our proposal can be over 200x faster than its sequential version using CPU.
Keywords: Hierarchical Density Clustering, Parallel Algorithms, Graphic Processing Unit

1

Introduction

With the advent of Web 2.0, the volume of data generated has increased signiﬁcantly, as well
as the high complexity of its relations. This scenario has originated a problem for several applications: there is more data than that can be eﬀectively analyzed. Consequently, organizing
∗ This

work was partially supported by Nvidia, CNPq, CAPES, Fapemig, and INWEB.

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.389

951

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

and ﬁnding appropriate information resources to fulﬁll the needs of users has become one of the
most challenging problems in computer science. New proposals for models and algorithms that
are able to handle this data eﬃciently (response time and appropriate use of computational
resources) and eﬀectively (response quality, or the robustness and accuracy to perform a task)
are emerging every moment. Among these, we highlight those related to clustering [18], that
consists in to organize large sets of objects into diﬀerent groups (clusters) according to a speciﬁc
similarity metric. These techniques can be used in many diﬀerent scenarios, such as social networks, recommendation systems, bioinformatics etc., making their use even more challenging.
Although there are many clustering proposal in the literature [2], the eﬀectivity of most
proposal is limited because they require many very sensible input parameters. Determining the
value of these parameters is hard since diﬀerent results can be found with slight changes in
the values. Facing these challenges, a set of strategies that has showed most successful is the
density-based clustering, which stands out for its ability to deﬁne clusters of arbitrary shape as
well as the robustness with which it deals with the presence of data noise [13, 17]. The main
idea behind these proposal is that clusters are areas with high density (many objects) separated
by areas with low density (few or none objects). An area is considered dense if there are more
the M inP ts with a distance between them lower than . However, choose suitable values for
M inP ts and specially is still not trivial. In this sense, a new approach to deal with the problem is proposed in [5] called OPTICS. Instead to provide clusters directly, OPTICS produces
an ordering of objects of the dataset, according to the structure called reachability, starting
from a high value of . This structure represents density-based clustering and the clusters can
be extracted from this structure using diﬀerent values of ≤ .
Considering that OPTICS is a distance-based proposal, on which is necessary to know the
distance between each pair of objects, it suﬀers from a performance bottleneck, mainly when
it is applied in large and complex scenarios. In the literature, strategies have been proposed
to make these applications feasible, whether through data indexing techniques [10, 8], either
through the parallelization of these tasks using diﬀerent processing units [9, 21]. With respect
to parallelization strategies, the use of graphics processing units (GPU’s) [15] has been given
considerable importance, since these are able of providing a higher level of parallelism than
multicore CPU’s [4], associated with a lower energy consumption [1].
In this work we present a new approach to make OPTICS feasible based on data indexing
strategy parallelized using GPU. More speciﬁcally, our approach represents the original data as
a graph G(V, E), where V represents the objects and E the edges connecting the objects that are
distance smaller than . To represent this graph, we adapt the compact METIS structure [19].
We use three vectors, V a that represents the vertices (i.e. the index represents the vertex and
each position stores its degree and the position in vector Ea where its adjacency list begins),
Ean that stores the nodes in the adjacency list and Ead that stores the edge weight (distance).
The process to construct this structure is made completely in parallel using a GPU and, at the
end, the adjacency list for each node is also sorted in parallel. Based on this structure, the
application of OPTICS algorithm becomes very fast, since most the costly original operations
is reduced to O(1). In this case, the complexity of OPTICS starts to be dominated by the
runtime to maintain a heap structure, which corresponds to O(E ∗ logV ) in the worst case. In
our experiments we demonstrate that this approach results in an extremely eﬃcient algorithm
regarding to the execution time, achieving a speedup greater than 200× using just one GPU.
952

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

2

Danilo

Related Work

Data clustering is one of the most used techniques in data mining. Its goal is basically, receiving
a dataset as input, organize the data into semantically consistent groups, based on a previously
deﬁned similarity metric. In [18] several issues related to the use of clustering techniques are
presented, highlighting some of its challenges, such as how to properly set the input parameters,
how to specify a good similarity measure metric and how to work with large volumes of data.
Several clustering algorithms are found in the literature [2]. These algorithms range from
simpler techniques and widely used in various scenarios, such as k-means [14] to more elaborate
and context-driven techniques, such as subspace clustering [3] and partitioning clustering [12].
A set of clustering techniques which is receiving great attention is the one related to densitybased clustering [13, 5, 17]. Such techniques are distinguished by their ease of implementation
and by the applicability in diﬀerent contexts. Moreover, these techniques do not need to determine in advance, as an algorithm input, the number of clusters, as is done by the others
techniques mentioned above.
Among the density-based clustering techniques aforementioned, one of the most referenced
in the literature is DBSCAN [13]. Its operation is based on calculating a proximity radius
between each pair of objects, which is deﬁned according to the adopted similarity metric (i.e.
Euclidean distance, cosine similarity, etc.). From a minimum proximity radius, deﬁned as an
algorithm input, objects are grouped with each other whenever they are within this proximity radius. The main issue associated to DBSCAN is that clusters can have diﬀerent density,
therefore, it would be necessary to execute DBSCAN many times, using diﬀerent proximity
radius. The main algorithm proposed to solve this problem is the OPTICS [5]. This algorithm
does not produce clusters as result, but an augmented ordering of the dataset representing its
density-based clustering, normally using high values of proximity radios (i.e. named ). Based
on this dataset ordering it is possible to extract clusters using diﬀerent values of ≤ .
Despite to be necessary to execute it just one time, OPTICS still a distance-based proposal
as DBSCAN, which is computationally expensive. One of the most used strategies to improve
the performance of these algorithms is the data indexing [10, 8]. Among the most commonly
used indexing techniques, we can highlight the priority R-Tree [16], that reduces the complexity
of these algorithms from O(n2 ) to O(nlogn). Another strategy adopted to make these algorithms feasible in large data volume scenarios is the use of parallel computing, either through
distributed memory strategies [9, 21] or, more recently and with good results, through strategies
that use graphics accelerators [20, 4]. In [20], the authors present an interesting study on how
several data mining applications can be implemented using GPU in CUDA architecture [15].
In [4] is shown a parallel version of the DBSCAN algorithm using CUDA.
In this work we present a data indexing strategy parallelized using GPU in order to make
OPTICS feasible. More speciﬁcally, our approach represents the original data as a graph
G(V, E) stored in a compact structure based on METIS [19], completely constructed in parallel
using GPUs. Based on this structure, the complexity of OPTICS is reduced to O(E ∗ logV ) in
the worst case, becoming very fast.

3
3.1

GPU Accelarated Data Indexing Strategy for OPTICS
OPTICS: An Overview

As previously mentioned, OPTICS does not produce clusters as result. Instead, it produces an
ordering of objects of the dataset representing its density-based clustering. Given a parameter
953

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

, the ordering encapsulates the information of all clusters that can be generated with any
values of ≤ . The OPTICS is based on three main concepts: -neighborhood, core-distance
and reachability-distance, deﬁned as below:
Deﬁnition 3.1. ( -neighborhood):
distance(p, s) ≤ :

The neighborhood of an object p is the set of objects s so that
N (p) = {p|distance(p, s) ≤ }

Deﬁnition 3.2. (core-distance of p): Let M inP ts be a natural number and MinPts-distance(p) be the distance
from p to its MinPts’neighbor, the core-distance of p is deﬁned as below
coreDist

,M inP ts (p)

=

U ndef ined,
MinPts-distance(p),

if |(N (p)| < M inP ts
otherwise

Deﬁnition 3.3. (reachability-distance): The reachability distance of an object p with respect to an object o is
deﬁned as below:
reachDist

,M inP ts (p, o)

=

U ndef ined,
max(coreDist(o), distance(o, p)),

if N (o) < M inP ts
otherwise

Intuitively, the core-distance correspond to the smallest distance between p and an object
in its -neighborhood, or U ndef ined if p is not a core object. The reachability-distance of an
object p w.r.t. another object o is the smallest distance such that p is directly density reachable
from o if o is a core object. All objects start with reachability distance as U ndef ined.
Brieﬂy, we can describe the OPTICS algorithm as below. OPTICS maintains a priority
queue named Seeds to expand the ordering of objects. The priority is deﬁned according to
the reachability distance of objects. First, it selects randomly an unprocessed object p and
determines its core distance. If p is a core object (coreDist ,M inP ts (p) = U ndef ined), for all
its neighbours q ∈ N (p) are calculated a new reachability distance. If q is not in Seeds, it is inserted into it according to new reachability distance. If q is already in Seeds and its reachability
distance is larger the new one, a new reachability distance is assigned to it and q moves-up on priority queue Seeds. All this process is repeated until Seeds is empty and there is no unprocessed
object. Based on the output of OPTICS algorithm we can extract any density-based clustering w.r.t M inP ts and a clustering distance ≤ scanning the cluster-ordering and assigning
cluster-memberships depending on the reachability-distance and the core-distance of objects.
Algorithm 1 OPTICS Algorithm
function OPTICS(Dataset, , MinPts)
for all ((p ∈ Datase) and (p.processed = True)) do
N = neighbors(p, )
p.processed = True
output p
p.setCoreDist(p, , MinPts)
if p.coreDist = UNDEFINED then
Seeds = empty priority queue
Update(N, p,Seeds)
for all q ∈ Seeds do
N = neighbors(q, )
q.processed = True
output q
q.setCoreDist(q, , MinPts)
if q.coreDist = UNDEFINED then
Update(N , q)
end if
end for
end if
end for
end function

954

function Update(N, p, Seeds)
cdist = p.coreDist
for all ((o ∈ N ) and (o.processed = True)) do
newrdist = max(cdist, distance(p, o))
if o.reachDist = UNDEFINED then
// o is not in Seeds
o.reachDist = newrdist
insert(o, Seeds)
else
if newrdist < o.reachDist then
o.reachDist = newrdist
// move-up on queue
decrease(o, Seeds)
end if
end if
end for
end function

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

This process is illustrated in Algorithm 1. As discussed by the OPTICS authors, the runtime for OPTICS is heavily dominated by the runtime to get the -neighborhood which must
be performed for each object in the database, i.e. the runtime is O(n2 ). In order to reduce
this complexity, some data indexing techniques [10, 8] can be used. As we will see in the next
section, in this paper we adapt the METIS data structure, originally presented in [19].

3.2

Serial implementation

In our proposal, we represent the data as a graph G(V, E), where V represents the objects to
be clustered and E the edges connecting the objects that are within the minimum distance
radius of each other (i.e. this distance must be smaller than ). In this algorithm, the edges are
weighted, where the weight is the distance between two objects. This distance can be calculated
by metrics of similarity (i.e. Cosine Similarity) or distance (i.e. Euclidian Distance), according
to each scenario. As our main goal is the parallelization of this algorithm using GPUs, which
have a major memory limitation, we chose to represent the graph using a compact adjacency
list, adapting the METIS structure [19]. For this we use three vectors, V a that represents the
vertices, Ean that stores the nodes in the adjacency list and Ead that stores the edge weight
(distance). In V a the index represents the vertex and each position of the vector stores two
values: the number of vertices that are adjacent to this vertex (its degree) and the position in
vector Ea where its adjacency list begins.
We illustrate this data structure through Figure 1. For instance, to ﬁnd the adjacency list
of the object with label 0, we ﬁrst get the values stored in the position 0 of V a. The ﬁrst value
represents the vertex degree (in this case 2) and the second, the index where its adjacency list
begins in Ean (index 0). Then we are able to obtain its adjacency list by visiting two positions
in Ean , starting from position 0. We can also obtain the distance between the objects by
accessing Ead . In this case we obtain the objects 2 and 3, that are 0.5 and 1.75 distant from
object 0, respectively. The space complexity of this data structure is O(V + E).

Figure 1: The data structure used to represent the graph.
Algorithm 2 presents a pseudocode that illustrates the construction process of the graph
that represents the data. As can be seen, the algorithm receives as input parameters the data
(dataset), and M inP ts and returns the resulting graph represented by the above structure.
For each object, we ﬁrst calculate the distance to other objects. If the calculated value is lower
than the input parameter , an edge is created between these objects, and the weight is also
stored in Ead . After this ﬁrst step we sort, using the distance, each of the adjacency lists. In
955

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

the case of serial implementation, we adopted the QuickSort algorithm, that has a complexity of
O(nlogn). The sort step is very important as it makes the complexity to search the M inP tsth
neighbour O(1), which corresponds to the process to ﬁnd the core distance.
Algorithm 2 Algorithm for the graph construction
function MakeGraph(M inP ts, , dataset, Graph)
for all p ∈ dataSet do
for all q ∈ dataset do
if proximity(p, q) ≤ then
InsertEdge(p, q, Graph)
end if
end for
dataset = dataset - p
SortAdjacentList(p)
end for
end function

After indexing the data, the next step is to apply the OPTICS algorithm presented in Algorithm 1. In this case, the functions to determine the total of neighbors of an object p, as well
its core distance is O(1). In our case, we adopt a heap structure to represent the priority queue
Seeds. Therefore, the complexity of OPTICS becomes dominated by the runtime to maintain
the heap structure, which corresponds to O(E ∗ logV ) in the worst case. On the other hand, the
indexing process has a time complexity of O(V 2 ), since, in the worst case, it will require a comparison between each pair of objects. As mentioned earlier, although there are more elaborate
indexing techniques aimed at reducing this complexity, our choice was based on the parallelization opportunities that can be exploited using GPUs, as we shall see in the next section.

3.3

Parallel implementation

As discussed in the previous section, the OPTICS is divided into two main stages: (1) graph
construction and (2) OPTICS process. In this paper we focus on the parallelization of the ﬁrst
stage, for two main reasons. First, the graph construction has higher complexity than the OPTICS process using the graph structure and also it has many parallelization opportunities. Second, the parallelization of OPTICS process using the graph structure proposed is limited to the
parallelization of heap structure manipulation, which has many critical sections. As we shall see
in the Section 4, the OPTICS process corresponding to less than 1% of the total execution time.
The computational process to construct the graph representation, as described in Section 3.2,
involves three arrays: V a, Ean and Ead with spatial complexity of O(V ) and O(E) respectively,
and four basic steps: (1) calculating the ﬁrst value of V a; (2) calculating the second value of
V a; (3) constructing the Ea; and, ﬁnally (4) sorting the adjacent lists present in Ean by the
distance in Ead . In our approach, all these steps where parallelized using GPUs, as described
below and summarized on Figure 2.
• Vertices degree calculation: For each vertex, we calculate the total number of adjacent vertices. In this step, we can use the multiple cores of the GPU to process multiple
vertices in parallel. Our parallel strategy using GPU assigns a thread to each vertex, i.e.,
each entry of the vector V a. Each GPU thread will count how many adjacent vertices has
under its responsibility, ﬁlling the ﬁrst value on the vector V a. As we can see, there are
no dependency (or communication) between those parallel tasks (embarrassingly parallel
problem). Thus, the computational complexity can be reduced from O(V 2 ) to O(V ).
• Adjacency index calculation: The second value in V a is related to the start index in
Ea of the adjacency list of a particular vertex. The calculation of this value depends on the
956

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

start index of the vertex adjacency list and the degree of the previous vertex. For example,
the start index for the vertex 0 is 0, since it is the ﬁrst vertex. For the vertex 1, the start
index is the start index from the previous vertex (i.e. 0), plus its degree, already calculated
in the previous step. We realize that we have a data dependency where the next vertex depends on the calculation of the preceding vertices. This is a problem that can be eﬃciently
done in parallel using an exclusive scan operation [6]. For this operation, we used the
thrust library, distributed as part of the CUDA SDK. This library provides, among others
algorithms, an optimized exclusive scan implementation that is suitable for our method.
• Adjacency lists assembly: Having the vector V a been completely ﬁlled, i.e., for each
vertex, we know its degree and the start index of its adjacency list, calculated in the two
previous steps, we can now simply mount the compact adjacency list, represented by Ea.
Following the logic of the ﬁrst step, we assign a GPU thread to each vertex. Each of these
threads will ﬁll the adjacency list of its associated vertex with all vertices adjacent to it.
The adjacency list for each vertex starts at the index present in the second value of V a,
and it has an oﬀset related to the degree of the vertex.
• Adjacency lists sorting: Having the vector Ean and Ead been completely ﬁlled, we can
now simply sort each adjacent list presented in Ea. Following the logic of the Third step,
we assign a GPU thread to each vertex. Each of these threads will sort the adjacency list
of its associated vertex. In this case, instead to use the Quicksort, we adopt the Selection
Sort, since the complexity of this algorithm is always O(n2 ), in the worst, average and
best cases, consequently avoiding an unbalanced workload between the threads.

Figure 2: Computation and data transfers illustration.

4
4.1

Experimental Evaluation
Experimental Setup

To evaluate the proposed strategy, we developed a set of tests ranging the size of the input
data set between 5, 000 and 700, 000 objects in a two dimensional space (two attributes). For
each data size we extracted the execution times for the construction of the graph, the sorting
process, the OPTICS process, as well as the total time spent by the application, for both CPU
and GPU implementations. From these data we evaluate and compare the speedup achieved by
the GPU implementation in each part of the algorithm, as well as in the application as a whole.
In all our tests we used data sets with 20 randomly generated Gaussian clusters. Furthermore,
the input parameters are ﬁxed for all tests being M inP ts = 4 and = 0.05. The choice of this
conﬁguration was based on that presented in [7].
957

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

The implementation was written in C and C for CUDA (nVidia) [15], and all experiments
were performed using a GNU/Linux 4.1.13 machine, with 32GB of memory and a Intel Core
i7-4930K 3.40GHz processor. For the GPU tests we used a Tesla K40c, with 2,880 CUDA
cores organized in 15 multiprocessors. This GPU has a total of 12 GB of memory. The
distance metric adopted was the Euclidean Distance [11]. In the following subsections, ﬁrst
we present a proﬁling execution of the all application in order to verify which stages are more
computationally expensive and, consequently, justifying the parallelization choices previously
described. After that, we present the results obtained in the construction of the graph, and
ﬁnally in the application as a whole, presenting the speedup and the achieved gains.

4.2

Proﬁling Execution

In order to evaluate which steps are the most expensive in our algorithm, we measured the
execution times for the construction of the graph, the sorting process, the OPTICS process, as
well as the total time spent by the application, for the CPU implementation. Figure 3 shows the
execution times of each step for all tested datasets. It is easy to see that the graph construction
dominates the execution time for all tested datasets, being 99,97% of the total time for the
700, 000 objects dataset. This result shows us that the parallelization of graph construction
was a good choice. The sorting step is also an important operation as it makes some operations
O(1) in OPTICS process. We also parallelized this step, but as it is only a small fraction of
the total time, we will report in the next sections only the speedups achieved to the graph
construction and the total execution time.

Figure 3: Runtime for each part in CPU

4.3

Graph construction evaluation

As described in previous sections, the graph construction step has the greater time complexity
(O(V 2 )), thus requiring most of the processing time of the entire application. Figure 4 present
the results obtained with the GPU parallelization of this step. As can be seen, there is a signiﬁcant reduction in the execution time of this step. The speedup increases signiﬁcantly until
N = 100, 000. For values of N greater than 100, 000 the growth is less pronounced stabilizing
around N = 600, 000 with a 214× speedup. This stabilization is explained by the fact that
when we increase the input size we also increase the number of GPU threads/blocks. Then the
overhead generated to schedule the amount of threads becomes a limiting factor, stagnating the
958

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

speedup at a certain point. Anyway, a 214× speedup using only one GPU can be considered
an excellent result.

(a) Runtime

(b) Speedup

Figure 4: Runtime and speedup of graph construction

4.4

Total time evaluation

In Figure 5 we present the results for the total time. Evaluating the runtime and speedup
achieved by our algorithm, we can see that the the maximum speedup achieved was 211x, decreasing the execution time from 8, 568.75s on CPU to 40.59s on GPU, with 700, 000 objects.
It is worth nothing that even with a multicore implementation of this algorithm presenting a
linear speedup, we would need to have more than 200 CPUs to achieve the same result achieved
by our GPU implementation. If we take cost into consideration, our results are even more
impressive. While a GPU like the one we used in our experiments costs about US$2,000.00,
obtaining a conﬁguration with 200 CPU cores would cost around US$300,000.00.

(a) Runtime

(b) Speedup

Figure 5: Runtime and Speedup of Our Proposal

959

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

5

Danilo

Conclusions and Future Work

In this work we present a new approach to make OPTICS feasible based on data indexing
strategy parallelized using graphic processing unit (GPU). More speciﬁcally, our approach represents the original data as a graph G(V, E), where V represents the objects and E the edges
connecting the objects that are distance smaller than ). To represent this graph, we adapt the
compact METIS structure [19] which is constructed adopting a parallel strategy implemented
using a GPU. Based on this structure, the complexity of OPTICS is reduced to O(E ∗ logV )
in the worst case, becoming it very fast. In order to evaluate our proposal, we developed a
test set in which the number of objects to be clustered ranged between 5, 000 and 700, 000
objects in a two-dimensional space. For each data size, we extracted the execution times for
the construction of the graph, the sorting process, the OPTICS process, as well as the total
time spent by the application, for both CPU and GPU implementations, in order to calculate
the speedup. We demonstrate that our approach is an extremely eﬃcient, achieving a speedup
greater than 200× using just one GPU.
As future work, we aim to investigate and to propose new strategies to parallelize in GPU
the core of OPTICS algorithm, its heap manipulation, integrating it with our data indexing
GPU strategy. There are some proposals on literature that must be evaluated with this purpose, such as the adoption of PRIM’s Minimum Spanning Tree algorithm [21]. Moreover, we
also intend to extend these strategies to use multiple GPUs. Finally, we will evaluate all these
proposals on real data scenarios, where the volume is very large and the data are represented
by several dimensions.

References
[1] Reducing the Energy Consumption of Embedded Systems by Integrating General Purpose GPUs.
Technical reports in computer science. TU, Department of Computer Science, 2010.
[2] Charu C. Aggarwal and Chandan K. Reddy. Data Clustering: Algorithms and Applications.
Chapman & Hall/CRC, 1st edition, 2013.
[3] Rakesh Agrawal, Johannes Gehrke, Dimitrios Gunopulos, and Prabhakar Raghavan. Automatic
subspace clustering of high dimensional data for data mining applications. In Proceedings of the
1998 ACM SIGMOD international conference on Management of data. ACM.
[4] Guilherme Andrade, Gabriel Ramos, Daniel Madeira, Rafael Sachetto, Renato Ferreira, and
Leonardo Rocha. G-dbscan: A {GPU} accelerated algorithm for density-based clustering. Procedia
Computer Science, 18:369 – 378, 2013. 2013 International Conference on Computational Science.
[5] Mihael Ankerst, Markus M. Breunig, Hans-Peter Kriegel, and J¨
org Sander. Optics: Ordering
points to identify the clustering structure. In Proceedings of the 1999 ACM SIGMOD International
Conference on Management of Data, SIGMOD ’99, pages 49–60, New York, NY, USA, 1999. ACM.
[6] Guy E. Blelloch. Preﬁx sums and their applications. Technical Report CMU-CS-90-190, School
of Computer Science, Carnegie Mellon University., 1990.
[7] Christian B¨
ohm, Robert Noll, Claudia Plant, and Bianca Wackersreuther. Density-based clustering using graphics processors. In Proceedings of the 18th ACM conference on Information and
knowledge management, CIKM ’09, pages 661–670, New York, NY, USA, 2009. ACM.
[8] Guang-Ho Cha and Yong-Ik Yoon. Clustered indexing technique for multidimensional index structures. In Proceedings of the 13th International Conference on Database and Expert Systems Applications, DEXA ’02, pages 935–944, London, UK, UK, 2002. Springer-Verlag.
[9] Min Chen, XueDong Gao, and HuiFei Li. Parallel dbscan with priority r-tree. 2010.
[10] Peter Christen. A survey of indexing techniques for scalable record linkage and deduplication.
IEEE Transactions on Knowledge and Data Engineering, 24:1537–1555, 2012.

960

Hierarchical Density-Based Clustering based on GPU Accelerated Data Indexing Strategy

Danilo

[11] Michel Marie Deza and Elena Deza. Encyclopedia of Distances. Springer Berlin Heidelberg, 2009.
[12] S. Anitha Elavarasi, Dr. J. Akilandeswari, and Dr. B. Sathiyabhama. A survey on partition
clustering algorithms, 2011.
[13] Martin Ester, Hans peter Kriegel, J¨
org S, and Xiaowei Xu. A density-based algorithm for discovering clusters in large spatial databases with noise. pages 226–231. AAAI Press, 1996.
[14] Vance Faber. Clustering and the continuous k-means algorithm. Los Alamos Science, 22, 1994.
[15] Massimiliano Fatica and David Luebke. High performance computing with CUDA. Supercomputing 2007 tutorial. In Supercomputing 2007 tutorial notes, November 2007.
[16] D. M. Gavrila. R-tree index optimization. In In Sixth International Symposium on Spatial Data
Handling, pages 771–791, 1994.
[17] Alexander Hinneburg and Hans-Henning Gabriel. Denclue 2.0: fast clustering based on kernel
density estimation. In Proceedings of the 7th international conference on Intelligent data analysis.
[18] A. K. Jain, M. N. Murty, and P. J. Flynn. Data clustering: a review. ACM Comput. Surv., 31(3).
[19] George Karypis and Vipin Kumar. A fast and high quality multilevel scheme for partitioning
irregular graphs. SIAM J. Sci. Comput., 20(1):359–392, December 1998.
[20] Dela Kumarihamy and Lasya Arundhati. Implementing data mining algorithms using NVIDIA
CUDA, 2009.
[21] Mostofa Ali Patwary, Diana Palsetia, Ankit Agrawal, Wei-keng Liao, Fredrik Manne, and Alok
Choudhary. Scalable parallel optics data clustering using graph algorithmic techniques. In Proceedings of ACM SC ’13.

961

