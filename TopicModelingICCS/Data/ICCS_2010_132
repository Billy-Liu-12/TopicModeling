Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
347–355

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Behavioral modeling of the dominant dynamics in input-output
transfer of linear(ized) circuits
T.G.J. Beelena,1 , E.J.W. ter Matena , H.J. Sihalohob , S.J.L. van Eijndhovenb
a NXP

Semiconductors / Central R& D / Physical Design Methods, High Tech Campus 46-210, 5656 AE Eindhoven, the Netherlands;
{Theo.G.J.Beelen, Jan.ter.Maten}@nxp.com
University of Technology, Mathematics and Computer Science, Mathematics for Industry, P.O.Box 513, 5600 MB Eindhoven, the
Netherlands; Henry.Sihaloho@gmail.com, S.J.L.v.Eijndhoven@tue.nl

b Eindhoven

Abstract
We present a powerful procedure for determining both the dominant dynamics of the input-output transfer and
the corresponding most inﬂuential circuit parameters of a linear(ized) circuit. The procedure consists of several steps
in which a speciﬁc (sub)problem is solved and its solution is used in the next step. We combine regression tools
techniques and trade oﬀ analysis with recent techniques from Model Order Reduction.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Regression, Design of Experiments, Symbolic Model, Dominant Poles

1. Introduction
In nowadays circuit designs knowledge of both the dominant dynamics of the input-output transfer and the corresponding most inﬂuential circuit parameters are crucial. We present a procedure that consists of a speciﬁc sequence of
several steps. In each step we use a method or algorithm known from literature, or a commercially available software
tool or a circuit simulator. Part of the algorithms has been developed at NXP Semiconductors. A key ingredient is the
use of the Dominant Pole Algorithm, developed as Model Order Reduction technique [7, 8]. A regression technique
is used to be able to to decide for a trade-oﬀ between complexity and accuracy between approximating models. We
demonstrate the approach for a specifc Low Pass Filter circuit.
2. Problem description
A crucial step in modern circuit design is in depth investigation of the stability and oscillatory behavior of electronic circuits. It is well-known that these items are determined by the poles of the transfer function of the (linearized)
circuit model. The poles are characterized by the majority of the circuit components. For real-life circuits the poles
have to be computed numerically. Hence, the designer does not know a relationship between the computed poles and
the circuit components. In this paper we describe a procedure how to ﬁnd an explicit formula for the dominant poles
in terms of the relevant circuit parameters.
1 Corresponding

author

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.038

348

T.G.J.
Beelen
ComputerScience
Science
(2012)
347–355
T.G.J.
Beelenetetal.
al // Procedia
Procedia Computer
001(2010)
1–9

2

3. Procedure to solve the problem
The key of our solution is that we solve the problem by a unique combination of dedicated steps which solve a
few underlaying subproblems. The overall problem is solved by applying the appropriate tools and methods in the
speciﬁc order as indicated in the ﬂow depicted below. More details of the ﬂow are given in Section 5.
Firstly, we notice that a circuit simulator package is needed that can perform all kind of classic circuit analyses and
that includes the so-called ’Dominant Pole Algorithm’ (DPA) [7, 8]. The beneﬁt of this DPA algorithm is that it
computes only the ’dominant’ poles (instead of all).
Secondly, a software tool is needed that can generate mathematical regression (or symbolic) models given a set of
input data. These tools mostly use a so-called genetic algorithm [3, 4, 5, 11].
4. Flow chart of the overall procedure
Given: A circuit design with the set P of all circuit parameters and a circuit simulator including the Dominant Pole
Algorithm.
Step 1: Select a subset {P1 , P2 , . . . , Pk } of most inﬂuential parameters out of P.
Subset {P1 , P2 , . . . , Pk }
Step 2: Set up a Design of Experiments (DOE, [6]) for {P1 , P2 , . . . , Pk }
Design of Experiments that deﬁnes n speciﬁc simulation runs
(s)
with settings p(s)
1 , . . . , pk , s = 1, . . . , n
Step 3: Run the circuit simulations according to the DOE-table to compute the dominant poles and amplitudes, using
the Dominant Pole Algorithm
(s)
Set of dominant poles {λ(s)
1 , . . . , λk }, with amplitudes
(s)
(s)
{A1 , . . . , Ak }, s = 1, . . . , n

Step 4: Use the Symbolic Regression tool to generate several mathematical models Fi, j for each λi and Ai .
Tables with mathematical models Fi, j for each λi and Ai ,
including a complexity and error measure for each Fi, j .
Step 5: Choose the ’best’ or ’most appropriate’ model for each λi and Ai .
’best’ models for λi and Ai :
λi Fˆ i (Pν1i , Pν2i , . . . , Pνti ),
i
Ai Gˆ i (Pμi1 , Pμi2 , . . . , Pμir ).
i

Step 6:
Decide: repeat procedure (yes/no).
If No then Go to Step 7 else Go to Step 1
Step 7: Postprocessing
Step 8: Stop

349
3

T.G.J. T.G.J.
Beelen
et al.et/ Procedia
Computer
Science
(2012)
347–355
Beelen
al / Procedia
Computer
Science1 00
(2010)
1–9

5. Details of the individual steps
Given: Dominant Pole Algorithm [7] The dynamical behavior of a circuit can be studied via the transfer function
H(s)
H(s) = A

(s − z1 )(s − z2 ) . . . (s − zm )
,
(s − λ1 )(s − λ2 ) . . . (s − λN )

(1)

where λ1 , λ2 , . . . , λN ∈ C denote the poles of the circuits. The key concept of the Dominant Pole Algorithm is
that H(s) is written as a sum instead of a product of rational functions, i.e.,
N

H(s) =
i=1

Ai
=
s − λi

L

N

Ai
Ai
+
,
s − λi i=L+1 s − λi

i=1

(2)

Ai
L
where the sum i=1
s−λi contains all dominant terms that (almost) fully determine the circuit dynamics and in
general L
N. Thus,
L

H(s) ≈

i=1

Ai
.
s − λi

(3)

Hence, only these L dominant terms need to be computed and this is precisely what the DPA does. Roughly
speaking, a ’dominant’ term has a pole λi with Re(λi )
Re(λk ), k i, and an amplitude Ai with |Ai |
|Ak |,
k i [7].
Step 1: Selection Select a subset {P1 , P2 , . . . , Pk } of k (say 5 ≤ k ≤ 60) circuit parameters being the most inﬂuential
to the dominant poles. Notice that the diﬀerent types of circuit parameters can vary in magnitude on extremely
diﬀerent scales. For example, a resistor has values typically varying O(103 ) − O(106 ), while a capacitance has
values ranging from O(10−12 ) − O(10−6 ) . This can cause severe problems when generating models using the
Symbolic Regression tool. To avoid this, scaled variations (in %) of the nominal circuit parameter should be
used in the Design of Experiment.
Step 2 Given the subset {P1 , P2 , . . . , Pk }, construct a Design Of Experiments (DOE) as indicated in [1, 2]. Such a
DOE has the following important characteristics:
• requires a relatively small number n of simulation runs

• ensures good (but not necessarily optimal) space ﬁlling
• is an (almost) orthogonal design

• can handle up to 67 parameters (see [1, 2], being far better than elsewhere)

Step 3 Let λ1 , λ2 , . . . , λm , (m ≤ n) be the dominant poles of the circuit. Carry out n circuit simulations with the
parameter settings as speciﬁed by the DOE to compute the dominant poles (and their amplitudes) numerically,
(s)
(s) (s)
(s)
(s)
using DPA. Let {p(s)
1 , . . . , pk } be the parameter settings and let λ1 , λ2 , . . . and A1 , A2 , . . . be the computed
(s)
poles and amplitudes in run s, 1 ≤ s ≤ n. Notice that each λi is an approximation of λi . Thus, the DOE can
(s)
be visualized by a table consisting of two parts, the ﬁrst one specifying the parameter settings p(s)
1 , . . . , pk to
be used as input and the second part showing the values of the output variables per simulation run as displayed
in Table 1.
input parameters
P2
...
Pk

run

P1

1
..
.
s
..
.
n

p(1)
1
..
.
p(s)
1
..
.
p(n)
1

p(1)
2
..
.
p(s)
2
..
.
p(n)
2

...
...
...
...
...

p(1)
k
..
.
p(s)
k
..
.
p(n)
k

λ1
λ(1)
1
..
.
(s)
λ1
..
.
λ(n)
1

output parameters
. . . λm
A1
...
...
...
...
...
...

λ(1)
m
..
.
(s)
λm
..
.
λ(n)
m

A(1)
1
...
A(s)
1
..
.
A(n)
1

...
...
...
...
...

Am
A(1)
m
...
A(s)
m
..
.
A(n)
m

350

T.G.J.
Beelen
ComputerScience
Science
(2012)
347–355
T.G.J.
Beelenetetal.
al // Procedia
Procedia Computer
001(2010)
1–9

4

Table 1: The Design of Experiments with input and output parameters.

Step 4 Supply the Design of Experiments to the commercial Symbolic Regression software package ’DataModeler’
[4]. This tool constructs mathematical models using a genetic algorithm [5]. The main output of this tool is a
list of mathematical models that (approximately) describe the dominant poles in terms of the most inﬂuential
circuit parameters out of the set {P1 , P2 , . . . , Pk }. The full output consists of
• For each pole λi : a number of mathematical models Fi, j , j = 1, . . . , ni , each being an expression for the
pole as an explicit function of the most inﬂuential circuit parameters, i.e., λi ≈ Fi, j (P¯ 1 , . . . , P¯ ti, j ) where
{P¯ 1 , . . . , P¯ ti, j } is a subset of {P1 , P2 , . . . , Pk }. The number ti, j of circuit parameters in the jth model Fi, j
for λi depends on i and on j and ti, j ≤ k. Furthermore, each parameter P¯ l is equal to a P-parameter, say
P¯ l = Pνl , for some index νl with 1 ≤ νl ≤ k. In general, the parameters in the various models Fi, j can be
diﬀerent per model, i.e., the index νl depends on i and j. We will explicitly indicate this by writing νli, j
instead of νl . So, we have λi ≈ Fi, j (Pνi, j , Pνi, j , . . . , Pνi, j ). See Table 2 for an illustrative example.
ti, j

2

l

• A table showing the complexity and accuracy per model Fi, j . See Table 2 below.
• A diagram which shows the so-called Pareto front of the complexity versus accuracy of the models. See
Fig. 1.

Figure 1: Pareto front indicating the trade-oﬀ between the accuracy and complexity of the generated models

Step 5 Choose the ’best’ or ’most appropriate’ model for each λi and Ai by a trade-oﬀ analysis using the Pareto front
diagram.
Step 6 If necessary, repeat the Steps 1-5 for another set of circuit parameters. Otherwise, go to Step 7.
Step 7 Proceed with post processing, including stability and sensitivity analysis, tuning of oscillators, parameter
optimization and robust design.
Remark Let Fi, j∗ denote the ’best’ or ’most appropriate’ model out of all Fi, j . Analogously, Gi, j∗∗ for Ai . For notational
simplicity, we will write Fˆ i , Gˆ i for Fi, j∗ , Gi, j∗∗ , i.e., we have
λi

Fˆ i (Pν1i , Pν2i , . . . , Pνti ),
i

Ai

Gˆ i (Pμi1 , Pμi2 , . . . , Pμir ).
i

(4)

Consequently, (recall (3)) the transfer function H(s) can be expressed as follows:
L

H(s) ≈

i=1

Ai
s − λi

L

Gˆ i (Pμi1 , Pμi2 , . . . , Pμir )

i=1

s − Fˆ i (Pν1i , Pν2i , . . . , Pνti )

i

i

.

(5)

351
5

T.G.J. T.G.J.
Beelen
et al.et/ Procedia
Computer
Science
(2012)
347–355
Beelen
al / Procedia
Computer
Science1 00
(2010)
1–9

In words, the transfer function is given as an explicit mathematical expression in terms of a small number of most
inﬂuential circuit parameters. Recall that in general L
N, ti
n and ri ≤ n. Thus, our approach is a very eﬃcient
way to compute the transfer function as an explicit mathematical function of the most inﬂuential circuit parameters.
model Fi, j

i, j

νki, j

ti, j

λ1

≈
=

F1,1 (P1 , P4 )
2P1 + 0.3P4

1, 1

2

λ1

≈
=

F1,2 (P1 , P4 , P6 )
1.98P1 + 0.32P4 − 0.04P6

1, 2

3

λ1

≈
=

F1,3 (P1 , P3 , P4 , P6 )
1.98P1 + 0.01P3 + 0.32P4 − 0.05P3 P6

1, 3

4

ν11,1
ν21,1
ν11,2
ν21,2
ν31,2
ν11,3
ν21,3
ν31,3
ν41,3

=
=
=
=
=
=
=
=
=

Compl.

1 − R2

29

0.35

51

0.18

76

0.02

1,
4
1,
4,
6
1,
3,
4,
6

Table 2: Fictitious output example of the Symbolic Regression tool.

6. Details of the output of the Symbolic Regression Tool
The main part of the output of the Symbolic Regression Tool is a table with mathematical models for the dominant
poles. We give the following example in Table 2.
Suppose we have 10 inﬂuential parameters {P1 , . . . , Pk } (so, k = 10). For simplicity, we assume there is one dominant
pole λ1 and 3 models for λ1 (so, n1 = 3).
Remarks
• The complexity is a measure for how complicated the generated model is, see [4, 11]. The larger the number is,
the more complex the model is. See column Compl. in Table 2.
• The quality of the symbolic models Fi, j can be measured by the Fitness metric 1 − R2 (R2 is the coeﬃcient of
multiple determination). We have [6]
R2

=

SSR
=
SST

Fitness = 1 − R2

=

SSE
=
SST

n
y(s) − y¯ }2
s=1 {ˆ
,
n
(s)
¯ }2
s=1 {y − y
n
(s)
ˆ (s) }2
s=1 {y − y
,
n
(s)
¯ }2
s=1 {y − y

(6)
(7)

where y(s) = y(s) (χ), (s = 1, . . . , n) are the numerical values of the output variable χ as obtained in run s of the
DOE (the output variable χ is λi or Ai as used in Table 1). These values are input for the symbolic regression
tool. y¯ is the mean of y(s) . yˆ (s) is the value of the function Fi, j evaluated with the parameter settings of run s. y(s)
depends on i, but not on j, whereas yˆ (s) depends on both i and j.
7. Application to a fourth order Low Pass Filter
7.1. Introduction to Circuit and Transfer Function
Consider a circuit consisting of two Low Pass Filters [9], as shown in Figure 2.
The nominal values of the components are given in Table 3.
R1 = 200Ω
R4 = 500Ω

R2 = 1kΩ
R5 = 2kΩ

R3 = 2kΩ
R6 = 3kΩ

C1 = 2.5μF
C3 = 4μF

C2 = 1μF
C4 = 3μF

Table 3: The nominal values of the components.

352

T.G.J.
Beelen
ComputerScience
Science
(2012)
347–355
T.G.J.
Beelenetetal.
al // Procedia
Procedia Computer
001(2010)
1–9

6

Figure 2: Circuit with two Low Pass Filters in series

The transfer functions of the subcircuits are given by
R2 /R1

H1 (s)

=

−

(R2 R3C1C2

H2 (s)

=

−

(R5 R6C3C4 )s2 + (R6C3 + R5C3 +

)s2

+ (R3C1 + R2C1 +

R2 R3 C 1
R1 )s

+1

R5 R6 C 3
R4 )s

+1

R5 /R4

,

(8)

.

(9)

The transfer function of the whole circuit is then given by H(s) = H1 (s)H2 (s). The largest pole λ1 corresponding to
(8) is given by
λ1 =

−C1 R1 R2 − C1 R1 R3 − C1 R2 R3 + (C1 R1 R3 + C1 R2 R3 )2 − 4C1C2 R1 2 R2 R3
.
2C1C2 R1 R2 R3

(10)

7.2. Components and Modeling Parameters
Due to the orders of diﬀerence in the ranges of the nominal values for Ri and C j (recall detailed description of Step
1 above) we cannot use the components themselves as the modeling parameters. Therefore, we start with introducing
normalized resistor Ji = Ri /Rk , and capacitor I j = C j /Cq values and relaxation times τi = RiCi /(Rk Cq ), where Rk and
Cq are the reference components. Next, consider variations to the components Ri and C j , i.e., let Ri = R0i (1 + ΔRi )
(i = 1, . . . , 6) and C j = C0 j (1 + ΔC j ) ( j = 1, 2, 3). Then we have
Ji =

R0i (1 + ΔRi )
C0i (1 + ΔCi )
, Ci =
,
R0k (1 + ΔRk )
C0q (1 + ΔCq )

τi =

R0i (1 + ΔRi )C0i (1 + ΔCi )
.
R0k C0q

(11)

Write each parameter P in (11) in the form P0i (1 + ΔPi ). We easily ﬁnd
I0i =

C0i
,
C0q

ΔIi =

ΔCi − ΔCq
R0i
, J0i =
,
1 + ΔCq
R0k

ΔJi =

ΔRi − ΔRk
R0i C0i
, τ0i =
, Δτi = ΔRi + ΔCi + ΔRi ΔCi .
1 + ΔRk
R0k C0q

When taking R4 and C1 as reference components (implying ΔR4 = 0 and ΔC1 = 0) and choosing Δτ4 , ΔI2 , ΔI3 , ΔJ1 , ΔJ2 , ΔJ5 , ΔJ6
as modeling parameters, we have the following relationship between modeling parameters and variations:
model.par
variation

Δτ4
ΔC4

ΔI2
ΔC2

ΔI3
ΔC3

ΔJ1
ΔR1

ΔJ2
ΔR2

ΔJ5
ΔR5

ΔJ6
ΔR6

We choose 5 levels of variation ΔPi for the modeling parameters Pi (where P = R, C or τ), i.e., ΔPi ∈ {−α, −α/2, 0, α/2, α}.
In the example below we will use α = 0.2 (or 20%).
7.3. Symbolic Regression Setups
The creation of analytic models for λ1 is done using the symbolic regression tool [4]. For simplicity, we choose
the tool settings such that only simple arithmetic operators (+,-,* and /) are used and only polynomial models for λ1
are created.
Since we have 7 modeling parameters, each with 5 levels, we need in theory 57 = 78125 simulation runs. However,
we can apply the speciﬁc design O17
7 [1, 2] to deﬁne only 17 runs, giving the following design set-up:

353
7

T.G.J. T.G.J.
Beelen
et al.et/ Procedia
Computer
Science
(2012)
347–355
Beelen
al / Procedia
Computer
Science1 00
(2010)
1–9

run
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

Δτ4
0
0.1
0.2
0.1
0.1
0.2
0.2
0.1
0
0
−0.1
−0.2
−0.1
−0.1
−0.2
−0.2
−0.1

ΔI2
−0.1
0
−0.1
0.2
−0.2
0.1
−0.1
0.2
0
0.1
0
0.1
−0.2
0.2
−0.1
0.1
−0.2

ΔI3
−0.1
−0.2
0.1
0
−0.1
−0.2
0.2
0.1
0
0.1
0.2
−0.1
0
0.1
0.2
−0.2
−0.1

ΔJ1
−0.1
−0.2
−0.2
−0.1
0.1
0.2
0.1
0
0
0.1
0.2
0.2
0.1
−0.1
−0.2
−0.1
0

ΔJ2
0.2
−0.1
0
0.1
0.2
−0.1
−0.1
0.2
0
−0.2
0.1
0
−0.1
−0.2
0.1
0.1
−0.2

ΔJ5
0.2
−0.1
0.1
−0.2
−0.2
0.1
0
0.1
0
−0.2
0.1
−0.1
0.2
0.2
−0.1
0
−0.1

ΔJ6
0.1
0.2
−0.2
−0.1
0
−0.1
0.2
0.1
0
−0.1
−0.2
0.2
0.1
0
0.1
−0.2
−0.1

λ1
−13.09
−17.38
−15.29
−19.75
−20.01
−19.09
−10.57
−11.52
−14.95
−17.89
−13.93
−15.33
−11.75
−11.62
−12.40
−22.76
−19.91

Table 4: Design of Experiments for pole λ1 , when α = 0.2.

When running the symbolic regression tool with this set-up, we ﬁnd 13 models for λ1 . The corresponding parameter
occurrence is as follows: ΔI2 [13x (=100%)], ΔJ4 [11x (=84.6%)], ΔJ3 [10x (=76.9%)], and ΔI1 [1x (=7.7%)].
For simplicity, we only consider the following 3 models λ1 (i) , i = 1, 2, 3, out of 13:
λ1 (1)

=

λ1 (2)

=

λ1 (3)

= −15.507 + 15.358 ( μ + ν3 + ν4 ) − 3.491 ( μ + ν3 + ν4 )2 ,
= ΔI2 ,
νk = ΔJk , (k = 3, 4).

μ

−15.720 + 17.071 μ + 12.803 ( ν3 + ν4 ),

−15.519 + 14.415 ( μ + ν3 + ν4 ) − 3.276 ( μ + ν3 + ν4 )2 ,

Term
Constant
μ = ΔI2
μ2 = ΔI2 2
ν3 = ΔJ3
ν32 = ΔJ3 2
μν3 = ΔI2 ΔJ3
ν4 = ΔJ4
ν42 = ΔJ4 2
μν4 = ΔI2 ΔJ4
ν3 ν4 = ΔJ3 ΔJ4

λ1 (1)
−15.72
17.071
0
12.803
0
0
12.803
0
0
0

λT1
−14.942
15.186
−15.439
12.463
−10.362
−12.833
13.371
0
−13.785
−11.599

λ1 (2)
−15.519
14.415
−3.276
14.415
−3.276
−6.552
14.415
−3.276
−6.552
−6.552

λ1 (3)
−15.507
15.358
−3.491
15.358
−3.491
−6.981
15.358
−3.491
−6.981
−6.981

%(1)
5.2
12, 4

%(2)
3.9
5.1

%(2)
3.8
1.1

2.7

15.7

23.2

4.2

7.8

14.9

(2)
(3)
T
(i)
Table 5: Overview of model coeﬃcients for λ(1)
1 , λ1 , λ1 , and for the Taylor expansion λ1 . Here α = 0.2. % gives the relative
deviation of the constant and the linear terms when compared to λT1 .

Model λ1 (1) is a simple linear model that fulﬁlls 1 − R2 < 10−1 . The models λ1 (2) and λ1 (3) have additional second
order terms to improve the model Fitness.
Just for comparison reasons, we also determine the Taylor series of λ1 using the nominal values in Table 3, and leave
out all terms of order Δ3 and higher. We ﬁnd
λT1

=

μ =

−14.942 + 15.186 μ − 15.439 μ2 + 12.463 ν3 − 12.833 μ ν3 +
−10.362 ν32 + 13.371 ν4 − 13.785 μ ν4 − 11.599 ν3 ν4 ,

ΔI2 ,

νk

=

ΔJk ,

(k = 3, 4).

354

T.G.J.
Beelen
ComputerScience
Science
(2012)
347–355
T.G.J.
Beelenetetal.
al // Procedia
Procedia Computer
001(2010)
1–9

8

We can compare the models λT1 and λ1 (i) by looking at their coeﬃcients in Table 5. The Table also gives the relative
deviation of the coeeﬁcients of the constant and the linear terms when compared to the corresponding one for λT1 .
Figure 3 shows a comparison between the models.
run
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

Δτ4
−0.1
0
0.1
0
0.2
−0.1
−0.2
−0.1
0.2
−0.1
−0.2
0
0.1
−0.2
0.1
0.2
0.1

ΔI2
0
−0.1
0.1
−0.2
−0.1
−0.2
0.1
0.2
0.2
0.2
0
0
−0.1
0.1
−0.2
−0.1
0.1

ΔI3
0.1
0
0
0.2
0
0.2
0.1
−0.2
−0.1
−0.2
0.1
−0.2
−0.1
−0.1
−0.1
0.2
0.1

ΔJ1
0.1
−0.1
−0.1
−0.2
−0.2
0
0.1
−0.2
0.1
−0.1
0.2
0.2
−0.1
0.1
0
0
0.2

ΔJ2
−0.1
0.1
0.2
0.1
−0.1
−0.2
0
−0.2
−0.2
0.2
−0.1
0.1
0.1
0
0.2
−0.1
0

ΔJ5
0.1
−0.2
−0.2
−0.1
−0.1
0.1
−0.2
0.1
0
0.1
0.2
−0.1
0
0.2
−0.1
0.2
0

ΔJ6
0
0
0.1
−0.1
0.1
−0.1
−0.2
−0.1
0.1
0.2
−0.2
−0.2
0.2
−0.1
0
0.1
0.2

λ1
−12.51
−17.94
−16.48
−14.88
−15.01
−12.57
−19.77
−18.98
−15.32
−14.66
−14.10
−24.98
−14.13
−15.59
−18.19
−9.800
−11.52

Table 6: Validation test data for the chosen models for pole λ1 , when α = 0.2.

Figure 3: Comparison between the models.

The next step is to validate the chosen models using a diﬀerent data set than in Table 4. The validation test data
are shown in Table 6. In this way, we can check how well the chosen models represent the operating region for this
case. Using formula (7) we can compute the Fitness of each model based on the design test data (Table 4) and the
validation test data (Table 6), respectively: λ1 (1) : 1.7 ∗ 10−2 vs 4.6 ∗ 10−2 ; λ1 (2) : 1.3 ∗ 10−2 vs 2.3 ∗ 10−2 ; λ1 (3) : 0.9 ∗ 10−2
vs 1.4 ∗ 10−2 . Note that model λ1 (1) has comparable Fitness as λ1 (2) and λ1 (3) . Clearly, the the second order terms in
λ1 (2) and λ1 (3) do not signiﬁcantly improve the Fitness. When balancing between the ﬁtness and complexity, we judge
model λ1 (1) to be favorite.

T.G.J. T.G.J.
Beelen
et al.et/ Procedia
Computer
Science
(2012)
347–355
Beelen
al / Procedia
Computer
Science1 00
(2010)
1–9

355
9

8. Conclusions
In this paper we presented a powerful and general procedure for explicit modeling the dominant characteristics of
the transfer function of an electric circuit in terms of the most inﬂuential circuit parameters. The procedure consists
of several steps including setting-up a special Design of Experiment, circuit simulations, computing the dominant
circuit poles, and generating mathematical models using symbolic regression techniques. The procedure was applied
to a Low Pass Filter circuit. Our ﬁrst numerical experiments indicate that the procedure gives promising results.
Further research on more complicated circuits has still to be carried out. This will include comparison to outcomes
by state-of-the-art software like Analog Insydes [3] (symbolic circuit simulator) and the SUMO Matlab toolbox [10]
(behavioural modeler).
9. References
[1] T.M. Cioppa, Eﬃcient Nearly Orthogonal and Space-ﬁlling Experimental Designs for High-dimensional Complex Models, Ph.D. Dissertation,
Naval Postgraduate School, Monterey, California, September 2002 (see http://edocs.nps.edu/npspubs/scholarly/dissert/2002/
Sep/02sepCioppaPhD.pdf).
[2] T.M. Cioppa, T.W. Lucas, Eﬃcient nearly Orthogonal and Space-ﬁlling Latin Hypercubes, Technometrics, Vol. 49, No. 1, Feb. 2007, pp.
45–55.
[3] T. Halfmann, T. Wichmann: Symbolic Methods in Industrial Analog Circuit Design, in: A.M. Anile, G. Al`ı, G. Mascali (Eds.): Scientiﬁc
Computing in Electrical Engineering, Series Mathematics in Industry, 9, pp. 87–92, 2007 [See also: Analog Insydes, http://ai.itwm.
fhg.de/ai/features/].
[4] M. Kotanchek, G. Smits, E. Vladislavleva, Trustable symbolic regression models: using ensembles, interval arithmetic and Pareto fronts
to develop robust and trust-aware models, in: T. Soule, R. Riolo and B. Worzel (Eds), Genetic and Evolutionary Computation Series,
book Genetic Programming Theory and Practice V, Springer Science and Business Media LLC, pp. 201–220, 2008 [for DataModeler see
http://www.evolved-analytics.com].
[5] J. Koza, Genetic Programming: On the Programming of Computers by Means of Natural Selection, MIT Press, Cambridge, MA, 1992.
[6] D.C. Montgomery, Design and Analysis of Experiments, Wiley, 6th edition, 2005.
[7] J. Rommes, Methods for eigenvalue problems with applications in pole-zero analysis, Ph.D. Thesis, Utrecht University, 2007 [http://
igitur-archive.library.uu.nl/dissertations/2007-0626-202553/index.htm].
[8] J. Rommes, N. Martins, Computing dominant poles of large second-order transfer functions, SIAM Journal on Matrix Analysis and Applications, Vol. 30, Issue 1, pp. 346-363, 2008.
[9] H.J. Sihaloho, S.J.L. van Eijndhoven, T.G.J. Beelen, Symbolic Modeling of Transfer Function Poles of a Seven-parameter Circuit, NXP
Semiconductors & Eindhoven University of Technology, Eindhoven, The Netherlands, 2008, Techn. Note NXP-R-TN 2008/00090, NXP
Semiconductors, Eindhoven, 2008.
[10] SUMO - SUrrogate MOdeling Lab, Matlab software, http://sumo.intec.ugent.be, 2010.
[11] E. Vladislavleva, Model-based problem solving through symbolic regression via Pareto genetic programming, Ph.D. Thesis, Tilburg Univiversity, 2008 [http://arno.uvt.nl/show.cgi?fid=80764].

