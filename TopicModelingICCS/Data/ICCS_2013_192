Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2076 – 2085

International Conference on Computational Science, ICCS 2013

C2M: Open and Decentralized Cloud Contact Management
Sebastian G¨ond¨ora , Jeshurun Devendraraja
a Telekom

Innovation Laboratories / TU Berlin, Service-centric Networking, Ernst-Reuter-Platz 7, 10587 Berlin, Germany

Abstract
The task of allowing people to easily synchronize contact details of acquaintances between diﬀerent devices and applications
over the Internet has led to the rise of cloud-based address repositories, where users can synchronize the local contact database
of a device or application with a central server. Anyhow, such systems requires each user to maintain a distinct contact database
on his own, resulting in multiple copies of each person’s contact information. As these copies need to be manually maintained,
typographical errors and outdated data records are hard to be found or deleted, which is why constant maintenance eﬀort is
required in order to stay up to date. These issues have been addressed by cloud-based contact management systems such as
Cloudtact, which allow users to store one’s contact details on a central server, which is then used to share the user proﬁles
with other users of the same service. Although systems like Cloudtact update probably outdated or erroneous information
by synchronizing with the owner’s proﬁle, their users are forced to entrust their data to the respective system’s operator, thus
creating a lock-in eﬀect that disallows other systems to synchronize contact information. To overcome this problem and to
promote a heterogeneous ecosystem without any lock-in eﬀects, we propose Cloud Contact Management (C2M), an open and
decentralized proﬁle management system that facilitates its users to host their own proﬁle information on arbitrary federated
servers. Therefore, contact details are only stored at one single location and controlled and maintained solely by the respective
owner. Clients may be synchronized in order to stay up to date, while the proﬁle owner may grant or deny access to his data
on an individual, ﬁne grained level. The proposed protocol is based on HTTPS and employs JSON to exchange data.
Keywords: Social Contacts; Contact Detail Synchronization; Distributed Address Book; Social Address Book; Cloud
Computing; Social Networks

1. Introduction
The social component of the World Wide Web gains in importance. Because we all are social beings, we are
eager to establish social contact. But once connections to other individuals have been established, one needs to
maintain a list of one’s acquaintances in order to stay in touch. As an individual’s contact details tend to change
from time to time, keeping this contact list up-to-date is a crucial task. Although nowadays possibilities exist
that allow people to stay in contact via Online Social Networks (OSN), mostly private and conﬁdential contact
details are still rather exchanged via e-mail and are rather stored in online address books. Also the fact that social
network providers make commercial use of their customers’ data is a further reason to avoid such services to
make contact details public. Generally, this lack of trustworthiness is displayed towards all services which store
individual users’ data but are managed in a central manner [1][2]. Despite the disadvantages of missing privacy
∗ Corresponding

author. Tel.: +49-30-8353-58166
E-mail address: sebastian.goendoer@tu-berlin.de.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.377

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

2077

and data ownership, centralized services have the advantage that data is stored on one single location so that the
user can synchronize his data with an arbitrary number of client devices.
Setting up a self-hosted server that stores one’s contact details may solve the privacy problem, but it still does
not solve the problem that contact details have to kept up-to-date manually: Once a user changes one or more
contact details, all of his acquaintances have to be notiﬁed and must update their local database. Notifying all
acquaintances in a manual way would be very ineﬃcient even if the notiﬁcation process is automated, still each
of the notiﬁed users is required to update the modiﬁed contact details in his address book manually.
To overcome this problem and promote a heterogeneous ecosystem without any lock-in eﬀects, we propose
Cloud Contact Management (C2M), which is an open and decentralized proﬁle management system that allows
its users to host their own proﬁle information on arbitrary federated servers. Using C2M, contact details of each
user are only stored at one single location - which can be freely chosen - and controlled and maintained solely by
the respective owner. Clients may be synchronized in order to stay up to date, while the proﬁle owner may grant
or deny access to his data on an individual, ﬁne grained level.
In Section 2, we give a detailed overview of similar approaches and systems and furthermore describe existing
technologies and protocols. In Section 3, details of the proposed C2M protocol are described. In Section 4,
we elaborate on the prototypical implementation of our C2M Server and mobile C2M Client, which has been
implemented as a proof of concept and will be used for future evaluation. Section 5 concludes the paper and gives
an outlook about the next steps.
2. Related Work
As the Internet allows us to stay in contact with a growing number of individuals, maintaining a list of one’s
acquaintances is a highly important task. Over the last decades, several services and solutions to store and maintain
contact details have been proposed that facilitate sharing and synchronizing contact details between multiple devices of one person, or between diﬀerent individuals. In this section, we describe current solutions for maintaining
a database of people’s contact details.
Directory services were early approaches to maintain network-based databases storing data that should be
accessible by multiple clients. A directory service is in general a system that stores and organizes information
in a certain network, while providing access for legit clients. An existing standard for directory services is the
Lightweight Directory Access Protocol (LDAP), which has been speciﬁed by the IETF [3] [4] [5], based on X.500
[6]. LDAP describes directory services that allow authorized clients to access data stored on LDAP servers.
Among other functionality, LDAP allows to store and maintain a database of contact details, thus allowing to be
used as a network-based address repository. LDAP servers may be conﬁgured to have a referral server in order to
be incorporated in the global directory. Though directory services are a de-facto standard for address management,
it is optimized for read operations. As we plan on extending C2M with functionality that requires data to be added
or changed frequently, LDAP is not featured in our approach.
With the growing importance of (OSN) such as Facebook1 or Google+2 , users of such services are able to
provide detailed contact information about themselves on their proﬁle page. This way, other users who are allowed
to access a user’s proﬁle page can access the contact details speciﬁed in the proﬁle. Even though Facebook and
other OSN providers allow their users to conﬁgure access permissions for other users on a ﬁne grained level, users
tend not to entrust all too private contact information, for example phone numbers, to social networks [1][2]. As
popular OSN platforms are mainly centralized platforms that lock their users into a closed solution, protocols and
formats for decentralized OSNs receive more and more attention. OpenSocial, one of the most ambitious projects
with the aim of decentralizing OSNs has been published by Google in 2007 [7]. OpenSocial is a set of open APIs
to make applications of social networks interoperable. Using this standard, cross-platform sharing of contents such
as status updates or messages is possible, provided the participating platforms support the OpenSocial protocol.
In the area of Decentralized Online Social Networks (DOSN) [8], Tent is a protocol that aims to facilitate open
and decentralized OSNs [9]. Using Tent, users can request authorization to subscribe to social status updates from
1 Facebook:
2 Google+:

http://www.facebook.com
http://plus.google.com

2078

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

a certain user proﬁle, which is hosted on a certain server. Once authorization has been granted, the server pushes
all updates to the subscribed proﬁles, which may be hosted on arbitrary other servers. Tent 0.2, which has been
released in late 2012 and is still under development relies on HTTP and JSON and employs OAuth 2.0 for access
authorization of social applications.
The protocol OAuth is used to store protected resources at a trusted party. Whenever service providers need
to access such resources to authenticate a user, the trusted party provides access to the user’s protected resources
without providing the actual credentials of a user. This way, a service provider is granted limited access to the
required resources without being able to break a user’s privacy [10]. OAuth has been introduced initially in
2006 and has been constantly improved ever since. In 2010, OAuth 2.0 was introduced [11] [12] [13], whose
main advantages are better support for non-browser based applications, the cryptography working without client
applications, ease of parsing, sorting and encoding the signatures, as well as the short-lived tokens provided by
the trusted parties [14]. The combination of OpenID [15] and OAuth led to the idea for OpenID Connect [16],
which provides both single sign-on and authentication by a trusted party in a single ﬂow using a RESTful and
API-friendly interface [17]. In 2008, another approach to combine both authentication and identiﬁcation in a
single protocol ﬂow was proposed by Google called Step 2 [18]. With the exception of minor technical details,
Step 2 provides equivalent functionality as OpenID Connect.
With the trend towards multiple computational devices owned by each individual, the necessity to synchronize
arbitrary data between diﬀerent devices has fueled the progress of cloud services in general. One of the features
most visible to the end user is a cloud-based address book, that synchronizes a device’s contact list with a database
in the cloud. Google Contacts3 for example synchronizes the contact list of an Android-based smartphone with
Google’s servers and allows a user to sync the same contact to multiple devices. Though, automatic synchronization between diﬀerent Google accounts or other services is not possible. Especially at Google Contacts it is
remarkable that Google is eager to advance the service and achieves this by providing plug-ins and add-ons for
other service providers for example, Microsoft Outlook, Mozilla Thunderbird, Apple Cobook, and other services.
This helps Google to enlarge the dataset of the contacts stored by each user despite of the fact that users are
frustrated being locked into a closed platform [19].
Sync.me4 promises its users to keep their local contact lists up to date by acquiring updated or additional
information from OSN proﬁles. This way, one’s address book gets not only updated but also augmented with
additional information from an arbitrary number of third party sources. As the contact details of these sources
does not necessarily coincide, Sync.me uses a Dedupe Tool to merge duplicates and detect conﬂicting entries. According to their own statements, the platform syncs more than a billion contacts. According to statistics provided
by AppData5 in the US, Sync.me ranked as #50 of the Top Free Apps Social Networking Genre and as #23 in
Germany in the same category (constituted on 10 January 2013).
While the aforementioned services allow users to synchronize contact details with an Internet based service
in order to keep one’s contact lists synchronized between multiple devices, diﬀerent users cannot synchronize
contact details between each other. As a result, each user maintains a distinct copy of a certain contact. Though
open speciﬁcations for the exchange of contact information exist (e.g., vCard [20], all users need to update their
own copy manually whenever this contact’s data changes for whatever reason. Services such as Cloudtact6 ,
Memotoo7 , or Soocial8 allow their users to maintain a proﬁle with all contact details they want to publish, while
clients can pull updates from the respective server directly. Anyhow, these services are centralized and mostly
closed solutions that require all contacts to use the adequate application to sync.
As the aforementioned systems for contact management are not able to satisfy the requirements of our vision
of a decentralized, open, and privacy-preserving solution, we Cloud Contact Management (C2M). C2M is a
system that allows individuals to automatically inform friends and acquaintances about changes in ones contact
details, where these respective data records are automatically updated. Hence, C2M facilitates easy and automated
3 Google

Contacts: https://contacts.google.com
http:/www.sync.me
5 AppData: http//www.appdata.com
6 Cloudtact: http://www.cloudtact.com
7 Memotoo: http://memotoo.com
8 Soocial: http://www.soocial.com
4 Sync.me:

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

2079

updating of one’s contact database. In the next chapter, we explain details of design and implementation the C2M
approach.
3. C2M: Design and Implementation
The main objective of C2M is to supersede current practices for storing contact details, where each user has to
manually maintain his own contact database. While such approaches are error prone and hard to keep up to date
for obvious reasons, C2M proposes a paradigm where each individual hosts and maintains his own proﬁle holding
all of his contact information such as name, addresses, phone numbers, email addresses, or domain names. Other
users of C2M may then request a permission to access the proﬁle, while the proﬁle owner may disclose only
certain parts (e.g. work-related but not private address data) of his information on an individual basis. Therefore,
users only keep a list of links to their contact’s proﬁle repositories instead of storing a manually maintained copy
of this data. With C2M, the contact details of a certain individual are automatically synchronized with the clients
of all authorized users, rendering manually maintained copies obsolete. As only one version of an individual’s
data needs to be kept up to date, to overall maintenance overhead is signiﬁcantly reduced, while an individual’s
data privacy is ensured.
3.1. Design
We envision a system that allows users not only to host their own proﬁles on a self-hosted server, but also
to implement new software for servers or clients or to extend existing implementations with new features. Like
Yeung et al. [8], we believe that an open and decentralized platform would allow users not only to beneﬁt from its
functionality, but also to protect their data privacy by deﬁning ﬁne grained access permission for other users, as
well as self-hosting of their proﬁles in order to protect server operators with questionable intents from accessing
their data.
Therefore, we propose a novel approach for a decentralized social cloud-based contact management system
where each user is in charge for maintaining a single copy of his own contact information (e.g., home address,
date of birth, phone numbers, or email addresses), while other users can request permission to access certain parts
of his proﬁle. Using this approach, users are able to maintain full control of their proﬁle data by hosting their
proﬁle on a self-hosted server - or entrust their proﬁle data to a server operator of their choosing.
C2M works as follows: each user maintains a list of his own personal contact information, which is hosted on
a C2M Server. Other users of C2M may request authorization to access the contact information of this user, who
may then grant access to distinct parts of his contact details, for example his private phone number or a proﬁle
picture, but not his date of birth. Previously authorized C2M Clients may then query the server for updates made to
the proﬁle. This way, only one copy of a user’s contact details needs to be maintained, as the other users’ copies are
automatically synchronized and therefore kept up-to-date, plus typographical errors and outdated contact details
are prevented as manually maintained contact lists are no longer necessary (see Figure 1).

Fig. 1. Architectural overview of C2M

As access to one’s contact details can be conﬁgured on an individual and ﬁne grained basis, users can use C2M
to publish their contact details in a secure and reliable way as they maintain full control about who can access what

2080

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

parts of their data. Furthermore, users can freely choose a C2M Server operator of their liking to host their proﬁle
- or run their own.
3.1.1. Roles
In order to establish an unambiguous terminology, we deﬁne the following roles for the diﬀerent participating
parties of the C2M protocol.
• A Contact Provider in the C2M context is an individual, who maintains a user proﬁle on a C2M Server. He
is the owner of the proﬁle he created and therefore allowed to access and alter any information. Furthermore,
Contact Providers can grant access permissions to Contact Consumer for certain parts of their proﬁle.
• A Contact Consumer in the C2M context is an individual, to whom a Contact Provider has granted access
to his proﬁle. A Contact Consumer may query a Contact Provider’s server for an updated version of his
proﬁle.
• A Server Administrator in the C2M context is the administrator of a C2M Server. As each one may host his
own C2M Server, he may be both the Contact Provider and the Server Administrator.
In C2M, a C2M Server stores the user proﬁles of one or more Contact Providers. Each Contact Provider is
allowed to view and alter his own proﬁle. Furthermore, Contact Providers may grant access to Contact Consumers
to certain parts of their own user proﬁle, which they can access using a C2M Client, where a C2M Client is an
application that is used to poll available contact information for a list of Contact Providers.
3.2. Protocol
As the decentrality of its architecture is one the core features of C2M, the proposed protocols need to cover not
only the communication between a client and a server, but also the communication between two diﬀerent servers.
To facilitate a loosely coupled decentralized architecture, C2M employs HTTPS. Hence, PUT, DELETE, GET,
and POST methods are utilized to exchange messages. In order to uniquely identify a user, C2M employs URLs
as user ids. For example, http://server-alice.com/c2m/user/alice is the user id identifying a server
(server-alice.com) and a proﬁle name (Alice) of a certain Contact Provider.
The message payload utilizes the well known and broadly accepted JavaScript Object Notation (JSON) [21]
to format data types where each record deﬁnes a category such as address or phone number, a name, a value and a
revision number. The revision number is used to track changes of proﬁles, and prevent unnecessary data exchange
during synchronization. Using this format, the data format is kept human-readable, while the length of a message
is minimized. The following listing shows an example of a data record describing a mobile phone number.
[ {
” c a t e g o r y ” : ” phone ” ,
” name ” : ” m o b i l e ” ,
” v a l u e ” : ” +49 170 1234567 ” ,
” r e v i s i o n ” : 42
} ]
Listing 1. Data format for a mobile phone number

The remainder of this section describes the C2M protocol for client authentication, authorization, synchronization and update. It is important to point out that all communication is required to be secured using HTTPS
connections to prevent imposers to perform a man-in-the-middle-attack, allowing an attacker to claim one’s identity with an intercepted session id. All servers hosting user proﬁles need to employ valid certiﬁcates for proper
and secure authentication. After a certain amount of time, session ids should be revoked in order to require a C2M
Client to re-authorize itself before synchronizing again.
3.2.1. Client Authentication
In order to authenticate a C2M Client with a C2M Server, a user enters his login credentials (for example, user
name and password) in the C2M Client application. The credentials are then sent to the C2M Server that checks
them for correctness and responds with a message informing whether the login attempt was successful or not.

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

3.2.2. Client Update
Once authenticated correctly, a C2M Client can request the list of associated contacts from the C2M Server
employing the following protocol:
1. A user Alice sends a request for a client update to her C2M Server A with the client id c.id. If Alice uses an
conﬁgured C2M Client, a new client identiﬁer is generated automatically.
2. Server A checks whether c.id is already known and replies with a list of all contact ids associated with
Alice’s account with the matching session identiﬁers if available. If no session ids are available for c.id, the
reply contains only a list of contact identiﬁers and the C2M Client needs to re-request authorization from
all contacts.
3.2.3. Client Authorization
Each C2M Client of a Contact Consumer (Alice) that wants to synchronize proﬁle information of a Contact
Provider’s (Bob) proﬁle needs to authorize with the Contact Provider’s C2M Server B ﬁrst. To achieve proper
authorization, B issues a session id s.id for the Contact Consumer that can only be utilized by his C2M Client. The
session id is used in conjunction with a unique client id c.id to authenticate the Contact Consumer’s C2M Client
with the Contact Provider’s C2M Server B. Authorization of a C2M Client of a user Alice with a C2M Server
hosting Bob’s proﬁle is described by the Authorization Protocol (see Figure 2). For this protocol, we assume
that Alice’s C2M Client has been authenticated with her C2M Server A, which is done by providing her login
credentials.
The described authorization protocol serves a similar purpose as OAuth [13]. While in OAuth, a service
provider is granted access to a protected resource at which the user is already enrolled, in C2M a Contact Consumer attempts to access a secured resource at a Contact Provider’s server. Therefore, we propose an alternative
authorization protocol.

Fig. 2. C2M authentication protocol

1. Once authenticated correctly with Server A, the Contact Consumer (Alice) sends an authorization request
to the Contact Provider’s (Bob’s) C2M Server B containing its client id c.id, and Alice’s user id alice.id and
the target user id of Bob (bob.id).
2. Bob’s C2M Server B checks whether Bob has granted Alice the permission to access (parts of) his proﬁle
data. If Bob did not issue an explicit permission for user Alice, the request is denied and the protocol ends.
Otherwise, Server B generates a random session id s.id, and sends s.id and c.id to Alice’s C2M Server A.
Server B memorizes that a session has been initiated for a client c.id of User Alice with a session id s.id.
3. Alice contacts her server A, which forwards the correct s.id to her client. s.id is bound to the client id c.id
so if Alice uses multiple client applications, each application needs to authorize itself with Bob’s server
separately to get a unique session id.
4. Alice’s C2M Client is now in posession of the session id s.id, which can now be used for the further
communication with B.

2081

2082

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

The protocol works under the assumption, that Alice and Bob previously exchanged their user ids, so that they
both know where the respective other’s proﬁle is hosted.
3.2.4. Data Synchronization
Once a C2M Client has been authorized to access a certain user proﬁle hosted on a C2M Server, it can request
updates for this proﬁle. To request updates for a certain user proﬁle, the Data Synchronization Protocol is used.
Again, we assume that Alice’s C2M Client has been authenticated with her C2M Server A and all communication
is secured using HTTPS.

Fig. 3. C2M sync protocol

1. The Contact Consumer (Alice) sends a synchronization request to the Contact Provider’s (Bob’s) C2M
Server B, providing her user id alice.id, Bob’s user id bob.id, its client id c.id, and the session id s.id
previously issued by B. Furthermore, Alice’s C2M Client provides the revision number alice.bob.revision
of the last update for Bob’s proﬁle.
2. B checks, whether the provided session id s.id and client id c.id matches the ones issued during the authorization phase. If the requesting C2M Client is not authorized properly, the request is denied and the
protocol ends. Otherwise, B compares the provided revision number alice.bob.revision with the latest revision number bob.revision of Bob’s proﬁle. If there is no newer version of Bob’s proﬁle, (alice.bob.revision
== bob.revision), B terminates the protocol by responding with a message stating that there is no new data.
If a newer version of Bob’s proﬁle is available, Server B responds by sending a message with the newest
version of Bob’s proﬁle data and the latest revision number bob.revision.
4. C2M Prototype
In this section, the prototypical implementation of C2M is described, which has been developed as proof of
concept. The prototype comprises an Android-based smartphone client and a Linux-based server application.
4.1. Android C2M Client
The C2M Client is a mobile application based on the mobile operating system Android. The decision for
Android is based on the fact that it currently holds the highest market share [22] - thus, our application will be
available for a high number of smart phone users. The main tasks of the client application are twofold: ﬁrst, it
is the interface for a Contact Consumer to request permissions to access the contact details of Contact Providers,
and second, it serves as the interface for Contact Providers to update one’s own contact details stored on one’s
C2M Server. When using C2M initially, the ﬁrst interaction with the C2M Client application looks as follows:
The user is asked to choose a user name and the corresponding password. After the user enrolled successfully, he
is requested to provide his contact details.

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

2083

4.1.1. Requesting other users’ contact details
To initiate the authorization process, a user has to know the user ID of another user in order to request permission to access his contact details. Once Alice knows Bob’s user ID she can ask for permission by clicking on the
Add Friends-button (Figure 4) and than entering Bob’s user ID (Figure 5). Once added, Alice’s client initiates the
authorization protocol as described in Chapter 3. Once Alice’s client has been authorized successfully by Bob’s
server, Alice is listed as a friend of Bob and hence may synchronize his contact details.

Fig. 4. View on Bob’s address list

Fig. 5. Interface for adding contacts

4.1.2. Updating one’s own contact details
As depicted in Figure 4, beside his friends’ contact details, Bob is able to view and edit his own contact details.
When a data record of Bob’s contact details gets updated, the changes are sent to his C2M Server and may then be
synchronized with his friends’ C2M Clients. Now his friends can fetch the updated version via their C2M Client
applications as described in Chapter 3, while the frequency of synchronization requests can be conﬁgured by each
client individually.
4.2. C2M Server
The C2M Server has three main tasks: First of all, a C2M Server needs to store the contact details of a
user. Second, it has to provide interfaces for remote clients for data synchronization. Third, it should provide an
interface for its users to add and maintain their own contact details as well as manage the list of authorized Contact
Consumers, which are a user’s acquaintances.
4.2.1. Storing the user’s contact details
In order to store his contact details on his C2M Server, a Contact Provider uses his C2M Client application to
provide an initial set of contact details. Once he completed to create his proﬁle, his contact details are ready to be

2084

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

synchronized with his friends. In the further use of the service a Contact Provider can modify his contact details
in the same way.
4.2.2. Synchronization
Once a Contact Provider changes some of his contact details, all of his friends’ clients need to be updated.
Once a C2M Client request an update, the process is fully automated as described in Chapter 3. In the case that a
Contact Consumer possesses more than one device, a unique session is created for each of his devices.
4.2.3. Client authorization
Whenever a synchronization request is received by a C2M Server, it needs to be validated. Therefore, the
Contact Provider’s C2M Server maintains a list of session IDs initiated by already-authorized C2M Clients. C2M
Clients, which have been authorized successfully by a C2M Server use the unique session identiﬁer issued by this
C2M Server during the initial authorization phase for identiﬁcation purposes at a later time.
4.3. Use case
In the following, we describe a use case of the C2M system. Because we’ve already provided detailed descriptions of each process in the chapters above, we limit the use case to the essential points.
1. Setting up one’s own contact details
After installing the C2M Client software on his smartphone, Bob chooses a C2M Server and creates a user
account. Bob uses his C2M Client to provide his contact details, which are stored on his C2M server.
2. Requesting and permitting to access contact details
Once Bob’s contact details are set up and uploaded on his C2M server, Alice may request authorization to
access Bob’s contact details. Bob accepts Alice’s request and grants access to his business contact details.
As he does not want Alice to contact him at home, he keeps his home address and private phone number
hidden from her.
As soon as Bob granted Alice the permission to sync parts of his data, her C2M Client is notiﬁed and
initiates data synchronization. This way, Alice receives Bob’s business contact details, but not his home
address or private phone number.
3. Updating and synchronizing contact details.
As Bob’s company moved to a new address, he needs to update his contact details using his C2M Client
application. Once a data record has been updated, Alice’s contact list have to be updated by adopting the
changes. Therefore, Alice’s C2M client regularly queries Bob’s server whether Bob’s contact details have
changed. Since this is the case, Bob’s C2M Server responds to the query with the data that needs to be
updated by Alice’s C2M Client.
5. Conclusion
In this paper, we proposed Cloud Contact Management (C2M), a system that allows users to harness the power
of a federated cloud-based contact repository. While existing systems either lock users into a closed solution for
synchronization of a contact’s details or do not support synchronization between diﬀerent user accounts resulting
in multiple isolated, unsynchronized, and therefore error prone copies of an individual’s contact details, C2M
proposes a paradigm, where only one single copy of each data record is maintained. As this data record is kept
up to date by the respective owner alone and synchronized to all authorized clients, typographical errors and outdated contact details can be avoided altogether. Furthermore, C2M allows for ﬁne-granular access control, thus
facilitating users to deﬁne who will be able to access what parts of their contact details. As C2M enables users to
set up and operate their own C2M Server, proﬁle data is not necessarily disclosed to a possibly untrusted platform
operator. We built a prototypical implementation of an Android-based C2M Client and a C2M Server, demonstrating the potential of the proposed protocol. The next steps will be to further develop both client and server
implementation and to extend the protocol to support additional information such as real-time communication and
social proﬁle data.

Sebastian Gond
¨ o¨ r and Jeshurun Devendraraj / Procedia Computer Science 18 (2013) 2076 – 2085

References
[1] T. Taraszow, E. Aristodemou, G. Shitta, Y. Laouris, A. Arsoy, Disclosure of personal and contact information by young people in social
networking sites: An analysis using facebook proﬁles as an example, International Journal of Media & Cultural Politics 6 (1) (2010)
81–101.
[2] H. Krasnova, S. Spiekermann, K. Koroleva, T. Hildebrand, Online social networks: why we disclose, Journal of Information Technology
25 (2) (2010) 109–125.
[3] Internet Engineering Task Force (IETF), Lightweight Directory Access Protocol (v3) RFC 2251, http://www.ietf.org/rfc/
rfc2251.txt (1997).
[4] Internet Engineering Task Force (IETF), Lightweight Directory Access Protocol (LDAP) The Protocol RFC 4511, http://tools.
ietf.org/html/rfc4511 (2006).
[5] Internet Engineering Task Force (IETF), Lightweight Directory Access Protocol (LDAP) Transactions RFC 5805, http://tools.
ietf.org/html/rfc5805 (2010).
[6] International Telecommunication Union (ITU-T), X.500: Information technology - Open Systems Interconnection - The Directory:
Overview of concepts, models and services, http://www.itu.int/rec/T-REC-X.500/en.
[7] Mark Halvorson, Opensocial speciﬁcation 2.5.0 draft, http://opensocial-resources.googlecode.com/svn/spec/trunk/
OpenSocial-Specification.xml.
[8] C. Yeung, I. Liccardi, K. Lu, O. Seneviratne, T. Berners-Lee, Decentralization: The future of online social networking, in: W3C
Workshop on the Future of Social Networking Position Papers, Vol. 2, 2009.
[9] Apollic Software, LLC, Tent protocol, https://tent.io/docs.
[10] P. Kaila, OAuth and OpenID 2.0, From End-to-End to Trust-to-Trust (2008) 18.
[11] S. Pai, Y. Sharma, S. Kumar, R. Pai, S. Singh, Formal veriﬁcation of OAuth 2.0 using Alloy framework, in: Communication Systems
and Network Technologies (CSNT), 2011 International Conference on, IEEE, 2011, pp. 655–659.
[12] M. Ko, G. Cheek, M. Shehab, R. Sandhu, Social-networks connect services, Computer 43 (8) (2010) 37–43.
[13] Internet Engineering Task Force (IETF), The OAuth 2.0 Authorization Framework, http://tools.ietf.org/html/rfc6749 (2012).
[14] E. Hammer-Lahav, D. Recordon, D. Hardt, The OAuth 2.0 authorization protocol, draft-ietf-oauth-v2-18 8.
[15] D. Recordon, D. Reed, OpenID 2.0: a platform for user-centric identity management, in: Proceedings of the second ACM workshop on
Digital identity management, ACM, 2006, pp. 11–16.
[16] OpenID Foundation, OpenID Connect, http://openid.net/connect/ (2012).
[17] N. Sakimura, et al., OpenID Connect Standard 1.0 (2011).
[18] Google, OpenID OAuth Extension, http://step2.googlecode.com/svn/spec/openid_oauth_extension/latest (2009).
[19] B. Fitzpatrick, D. Recordon, Thoughts on the social graph, http://bradfitz.com/social-graph-problem/ (2007).
[20] Internet Engineering Task Force (IETF), vcard speciﬁcation rfc 6350, http://tools.ietf.org/html/rfc6350 (2011).
[21] D. Crockford, The application/json media type for javascript object notation (json), http://tools.ietf.org/html/rfc4627 (2006).
[22] Gartner, Gartner says worldwide sales of mobile phones declined 3 percent in third quarter of 2012; smartphone sales increased 47
percent, http://www.gartner.com/it/page.jsp?id=2237315 (2012).

2085

