Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 1466–1474

International Conference on Computational Science, ICCS 2011

Interior Point Methods for the Inverse Medium Problem on
Massively Parallel Architectures
M. J. Grotea , J. Hubera , O. Schenka
a Department

of Mathematics and Computer Science, University of Basel, Switzerland

Abstract
We consider the time-harmonic inverse medium problem, which ﬁnds many applications in science and engineering (e.g. optical tomography, seismic imaging, and non-destructive testing). It leads to large-scale non-convex
PDE-constrained optimization problems and requires multiple solutions of notoriously diﬃcult Helmholtz-type equations. A priori knowledge about the medium is also included through box constraints and thus avoid false solutions.
The resulting nonconvex optimization problem is solved by a primal-dual interior-point algorithm, which is based on
a full-space primal-dual approach to achieve feasibility and optimality simultaneously. It is combined with a sparse
matrix factorization solver to attain a high level of performance and scalability on massively parallel architectures. We
discuss the potential of the inversion method for a multi-layered inverse medium problem arising in seismic imaging
and computational results are reported for seismic inversion examples on up to 1,024 cores of a Cray XE6.
Keywords: seismic imaging, PDE constrained optimization, interior point method
2000 MSC: 86-06, 86-08, 86A22, 90C06, 90C26, 90C51, 49M25,

1. Introduction
Parameter estimation from data measurements in spatially distributed models is ubiquitous across many areas
of science and engineering. Typically, the physical phenomenon under consideration is modelled by a system of
partial diﬀerential equations (PDEs), which contains unknown parameters. When those parameters describe material
properties of the underlying medium, they usually vary in space. The inverse medium problem then consists in
reconstructing the characteristics of the medium from partial (and often noisy) observations. In doing so, a nonlinear
functional is minimized, which involves both the misﬁt to the measurements and a Tikhonov-type regularization term
to tackle the inherent ill-posedness. Hence inverse medium problems are naturally formulated as PDE-constrained
optimization problems, where the numerical solution of the PDE itself, the forward problem, is but a fraction of the
entire process. Due to their shear size and inherent ill-posedness, they lead to some of the greatest challenges in
computational sciences.
Because waves are not only sensitive to material changes but can also travel over long distances while retaining
much of their shape, they yield natural information carriers when probing an unknown medium. Generally, the higher
Email addresses: marcus.grote@unibas.ch (M. J. Grote), johannes.huber@unibas.ch (J. Huber), olaf.schenk@unibas.ch
(O. Schenk)

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.159

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

1467

the frequency of the waves, the more detailed the information content. Seismic waves, for instance, carry information
about the Earth’s interior or deeply buried natural resources all the way to the surface, where they can be measured.
In seismic imaging, the goal is to reconstruct the sub-surface properties of the Earth’s crust from those measurements,
be it at the local or the planetary scale. In the frequency domain, the forward problem then leads to a Helmholtz-type
equation [1], which itself is notoriously diﬃcult to solve numerically, especially at higher frequencies [2]. While the
forward problem is nonetheless linear, the inverse problem is not.
Following the “discretize-then-optimize” approach, we ﬁrst discretize both the wave ﬁelds and the unknown spatially varying wave speed of the medium by standard ﬁnite elements. Then, the inverse medium problem of seismic
imaging leads to a ﬁnite dimensional, non-convex, constrained optimization problem:
minn F(x)
x∈R

s.t. cE (x) = 0
cI (x) ≥ 0,

(1)

where the objective F : Rn → R, the constraints cE : Rn → R p , and cI : Rn → Rq are continuously diﬀerentiable.
The objective function F quantiﬁes the misﬁt of the predicted and the measured wave ﬁelds, whereas the equality
constraints cE represent the discretized Helmholtz equations. To avoid false solutions, we further limit the parameter
space by including previous knowledge about the medium through the inequality constraints cI (x).
Several methods [3, 4] are available for the numerical solution of PDE-constrained optimization problems, such
as the full space and the reduced space approach. In the reduced space approach, the wave ﬁelds are eliminated using
the forward problem, leading to a smaller but dense unconstrained minimization problem, where each evaluation of
the objective functional nevertheless requires the accurate solution of the forward problem. In the full space approach,
optimality and feasibility are reached simultaneously, and only linearized state equations need to be solved in every
optimization step; this can tremendously improve overall performance [5, 6, 7]. In particular, the full space approach
takes advantage of exact ﬁrst- and second-order derivative information, which leads to faster and even super-linear
convergence in the vicinity of the solution.
For large-scale nonlinear optimization problems, currently the two most promising methods are sequential quadratic
programming (SQP) and interior-point methods (IPM); in fact, in the absence of inequality constraints both are equivalent [4]. In the presence of (a large number of) inequality constraints, however, prevailing SQP methods become
increasingly ineﬃcient due to the combinatorial complexity of ﬁnding the active set of constraints. Thus, we instead
use a primal-dual interior-point algorithm, as implemented in the open source optimization library IPOPT [8, 9].
Fast (local) convergence of PDE-constrained optimization methods relies on the inclusion of accurate secondorder derivative information, which requires the solution of a very large sparse linear system in each iteration. The
numerical solution of those linear systems usually is the most expensive part of the algorithm. In particular, all
state-of-the-art direct factorization methods for sparse linear systems, make heavy use of combinatorial reordering
techniques, such as weighted graph matching [10, 11, 12], to minimize the ﬁll-in. Here, we shall use an extended
version of the parallel direct solver WSMP [13] that scales up to one thousand processors (see Section 5).
2. Discretization of the Helmholtz Equation
We consider a ﬁnite sub-region, Ω, embedded in a two or three-dimensional unbounded medium. Inside Ω, the
wave ﬁeld then satisﬁes the Helmholtz equation
Δu(x) + k(x)2 u(x) = f (x),

x ∈ Ω,

n = 2, 3,

(2)

where Δ denotes the Laplace Operator, u the complex valued wave ﬁeld, and k(x) = ω/c(x) the wave number with
angular time frequency ω and local wave speed c(x). Here f (x) consists of a collection of point sources at locations
xe ∈ Ω. Since all sources are inside the computational domain Ω, the waves are purely outgoing as they reach the
artiﬁcial boundary ∂Ω. To prevent spurious reﬂections from it, we impose the Sommerfeld-type ﬁrst-order absorbing
boundary condition [14]
∂u(x)
= i k(x) u(x),
x ∈ ∂Ω,
(3)
∂n

1468

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

for simplicity. We subdivide Ω into triangles T i , i = 1, ...NT . Then a standard Galerkin ﬁnite element discretization of
(2) – (3) with piecewise linear Lagrangian basis functions ϕi (x), i = 1, . . . , Nh leads to the linear system
A(k) u := −K u + M(k) u + B(k) u = b.

(4)

Here, both the wave ﬁeld and the wave number are expanded in the ﬁnite element basis as uh = i ui ϕ, kh =
The stiﬀness matrix K, the mass matrix M(k), the boundary matrix B(k), and the load vector b are deﬁned as
Ki, j =

Ω

∇ϕi ∇ϕ j dx,

M(k)i, j =

Ω

kh2 ϕi ϕ j dx,

B(k) s,t = i

∂Ω

kh ϕ s ϕt ds

bi = ϕi (xe ).

i

ki ϕ.

(5)

The matrix A(k) is sparse and complex symmetric (but not hermitian). By splitting the integrals into elementwise
contributions, the matrix entries can be eﬃciently computed in parallel.
3. The Inverse Medium Problem
For each point source at position xe , the wave ﬁeld is measured at the observation sites xm , m = 1, . . . , Nm , resulting
in the discrete measurements ue,m , e ∈ {1, . . . , Ne }. We denote by ue the discrete values ui for the corresponding wave
ﬁeld e and by k the discrete values ki for the wave number. Following the full space approach, the optimization
variable x consists of all wave ﬁelds together with the wave number, x = (u1 , . . . , uNe , k ) . The goal is to determine
the wave number k that minimizes the mismatch in the corresponding measurements. To tackle ill-posedness, a
regularization term R(k) = ∇kh 22 is added to the objective function, leading to the discrete optimization problem:
min
x

s.t.

Ne

|Im ue − ue,m |2 + α2 R(k)
⎞⎛ ⎞ ⎛ ⎞
⎜⎜⎜A(k)
⎟⎟⎟ ⎜⎜⎜ u1 ⎟⎟⎟ ⎜⎜⎜ b1 ⎟⎟⎟
⎜⎜⎜
⎟⎟⎟ ⎜⎜⎜ . ⎟⎟⎟ ⎜⎜⎜ . ⎟⎟⎟
.
..
⎟⎟⎟ ⎜⎜⎜ .. ⎟⎟⎟ − ⎜⎜⎜ .. ⎟⎟⎟ = 0,
cE (x) = ⎜⎜⎜
⎝⎜
⎠⎟ ⎝⎜ ⎠⎟ ⎜⎝ ⎟⎠
b Ne
A(k) uNe
k+ − k
≥ 0.
cI (x) =
k − k−

F(x) =

1
2

e=1
⎛

(6)

Here, Im denotes the evaluation matrix and ue,m the measured values of wave e at all measurement points xm . The
equality constraints cE (x) require each wave ﬁeld to satisfy (4). The inequality constraints cI (k) ≥ 0 impose additional
box constraints on k, which are typically available in practice.
Depending on the discretization and the number of measured waves, the resulting optimization problem is computationally challenging; even for a small mesh, the number of optimization variables and constraints can easily reach
into the millions. Due to the product of k and u in the equality constraints in (6), the optimization problem is nonlinear
and nonconvex. As a consequence, the inverse problem may contain many local, non-global minima; the number of
such false solutions can be further reduced by taking into account previous knowledge through the box constraints cI .
4. Interior-point Method for Large-Scale Nonlinear Optimization
The optimization problem (6) is not only large-scale but also nonconvex due to the nonlinearity in the equality
constraints. To handle inequality constraints, interior point methods (IPMs) instead add a logarithmic barrier term to
the objective function weighted by the barrier parameter μ. Thus, in each outer iteration, the barrier subproblem
min
x

s.t.

F(x) − μ

ln(si )
⎛
⎜⎜⎜A(k)
⎜⎜
..
cE (x) = ⎜⎜⎜⎜
.
⎜⎝
i∈I

⎞⎛ ⎞ ⎛ ⎞
⎟⎟⎟ ⎜⎜⎜ u1 ⎟⎟⎟ ⎜⎜⎜ b1 ⎟⎟⎟
⎟⎟⎟ ⎜⎜⎜ . ⎟⎟⎟ ⎜⎜⎜ . ⎟⎟⎟
⎟⎟⎟ ⎜⎜⎜ .. ⎟⎟⎟ − ⎜⎜⎜ .. ⎟⎟⎟ = 0
⎟⎠ ⎜⎝ ⎟⎠ ⎜⎝ ⎟⎠
b Ne
A(k) uNe
cI (x) − s
= 0

(7)

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

1469

must be solved for each μ.
The ﬁrst-order optimality conditions for (7) are:
∇F(x) + ∇cE λE + ∇cI λI
−μS−1 1 − λI
ce (x) = A(k)ue − be
cI (x) − s

= 0,
= 0,
= 0,
= 0,

e = 1, . . . , Ne

(8)

where s denote standard slack variables. Here, λE and λI are the Lagrange multipliers of the inequality and equality
constraints, S the diagonal matrix with diagonal s, and 1 the vector with all entries equal to 1.
A Newton-type method is applied to solve the nonlinear system (8); then in iteration , the scaled Newton system
⎛
⎞
⎞⎛ ⎞
⎛
0
∇cE (x )
∇cI (x ) ⎟⎟ ⎜⎜⎜ px ⎟⎟⎟
⎜⎜⎜∇F(x ) + ∇cE (x ) λE + ∇cI (x ) λI ⎟⎟⎟
⎜⎜⎜H(x ) + δI
⎟
⎜⎜⎜
⎟⎟⎟⎟
⎜⎜⎜⎜
0
(μ + δ)I
0
−S ⎟⎟⎟⎟ ⎜⎜⎜⎜⎜ ps ⎟⎟⎟⎟⎟
−μ1 − S λI
⎟⎟⎟ ,
⎟⎟⎟ ⎜⎜ ⎟⎟ = − ⎜⎜⎜⎜
⎜⎜⎜
(9)
⎜⎜⎜
⎟⎟⎟
0
0
0
cE (x )
⎟⎟⎠ ⎜⎜⎜⎝pλE ⎟⎟⎟⎠
⎜⎜⎝ ∇cE (x )
⎝
⎠
pλI
−S
0
0
∇cI (x )
cI (x ) − s
where H(x ) = ∇2 F(x )+ i∈E∪I λi ∇2 ci (x ) must be solved. The solution of (9) is computationally the most expensive
part; it is described in Section 5.
Due to the nonconvexity of (6), the resuling search direction px may not be a descent direction. Then, to enforce a
descent direction, the matrix in (9) is modiﬁed by adding a multiple of the Identity matrix δI to the upper two diagonal
blocks. Once a search direction has been found, the step length is calculated from an ﬁlter rule combined with an
Armijo type rule for a merit function. Further details of the optimization algorithm as implemented in IPOPT can be
found in [8].
To conclude, we now explicitly derive the various terms that appear in (9). To do so, we ﬁrst rewrite the objective
function F(x) in (10) as
F(x)

=

1
2

Ne

Re(Im ue − ue,m )2 + Im(Im ue − ue,m )2 +
e=1

α
R(k).
2

(10)

Next, we diﬀerentiate (10) with respect to the real part of each scattered wave Re(ue ), to its imaginary part Im(ue ),
and to the control variable k:
∇Re(ue ) F
∇Im(ue ) F

=

Im Re(Im ue − ue,m ),

=

Im Im(Im ue − ue,m ),

∇2Re(ue ) F

=

∇2Im(ue ) F = Im Im .

Diﬀerentiation of the regularization term R(k) = ∇kh 22 ,
R(k) =

Ω

∇kh · ∇kh dx = k K k,

yields
∇k R(k)
∇2k R(k)

=

2 K k,

=

2 K.

Therefore, the Hessian matrix of the objective function is
⎛
⎜⎜⎜Im Im
⎜⎜⎜⎜
..
.
∇2x F(x) = ⎜⎜⎜⎜⎜
⎜⎜⎜
⎝

Im Im

αK

⎞
⎟⎟⎟
⎟⎟⎟
⎟⎟⎟
⎟⎟⎟ .
⎟⎟⎟
⎠

(11)

1470

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

It is a block diagonal matrix, where each block is sparse, symmetric and positive semideﬁnite. Hence, the objective
function is convex.
Similarly, we ﬁnd from (8) that

∇x cE (x)

=

⎛
⎜⎜⎜A(k)
⎜⎜⎜
A(k)
⎜⎜⎜
⎜⎜⎜
⎜⎜⎜
⎝

..

.

⎞
∇k (A(k) u1 ) ⎟⎟
⎟
∇k (A(k) u2 ) ⎟⎟⎟⎟
⎟⎟⎟ .
..
⎟⎟⎟
.
⎟⎟⎠
A(k) ∇k (A(k) uNe )

Recalling (4) and (5), we explicitely ﬁnd
(∇k (A(k) u)) s,t =

∂c s (k, u)
∂kt

=
=

∂
∂kt
∂
∂kt

=

T ∈T

T

kh2 uh ϕ s dx + i

∂T ∩∂Ω

kh uh ϕ s ds

kn ϕn km ϕm uh ϕ s dx + i
T ∈T n,m

T

m

ϕt kh uh ϕ s dx + i

2
T

T ∈T

∂T ∩∂Ω

∂T ∩∂Ω

km ϕm uh ϕ s ds

ϕt uh ϕ s ds.

(12)

Finally, we calculate the remaining term in (9), that is the second term of H(x). Since all second derivatives with
respect to u are zero, it is suﬃcient to diﬀerentiate (12) with respect to k and u. This yields
∂ 2 cs
=
2
∂kt ∂kr T ∈T

ϕt ϕr uh ϕ s dx,
T

∂2 cs
=
2
∂kt ∂ur T ∈T

ϕt kh ϕr ϕ s dx + i
T

∂T ∩∂Ω

ϕt ϕr ϕ s ds.

(13)

The linear combination of the terms in (13) leads to
⎛
⎜⎜⎜
⎜⎜⎜
⎜
λ s ∇2 c s (x) = ⎜⎜⎜⎜⎜
⎜⎜⎜
s∈E
⎝
Hk,u,1

⎞
Hk,u,1 ⎟⎟
.. ⎟⎟⎟⎟⎟
. ⎟⎟⎟ ,
⎟
Hk,u,Ne ⎟⎟⎟⎟⎠
Hk,k

0
...

Hk,u,Ne

where
N

(Hk,k,i )t,r =

ϕt ϕr ui ϕ s dx,

2λ s
s=1 T ∈T

T

(Hk,u )t,r =

ϕt kh ϕr ϕ s dx + i

2λ s
s T ∈T

T

∂T ∩∂Ω

ϕt ϕr ϕ s ds,

(14)

are sparse matrices.
5. Sparse Linear Algebra for Symmetric Indeﬁnite Matrices
The eﬃcient parallel solution of the saddle-point matrix in Eqn. (9) is of utmost importance for the nonlinear optimization process. Due to the discretization of the PDE-constrained optimization problem, linear symmetric indeﬁnite
systems with millions and even more unknowns have to be solved. To do so within reasonable time requires both
the eﬃcient use of powerful parallel computers and advanced combinatorial and numerical algorithms based on direct [10, 11, 15, 16] or approximate inverse factorizations [12, 2]. To date only very limited (highly parallel) software
for such large systems is generally available.
The algorithmic improvements of the past few years have reduced the time required to factor or approximately
factor sparse symmetric matrices by almost three orders of magnitude.1 Combined with signiﬁcant advances in the
1 This

progress for symmetric indeﬁnite matrices from computational physics or interior-point optimization has been reported e.g. in [10, 17].

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

1471

performance to cost ratio of computing hardware during this period, current sparse solver technology makes it possible
to solve quickly and easily problems that, until recently, might have been considered far too large. This section shortly
discusses the basic and the latest developments for sparse direct solution methods that have led to modern LDL
decomposition techniques for the Jacobian and Hessian matrices arising in large-scale nonlinear optimization. These
new methods for symmetric indeﬁnite matrices are now available within state-of-the art solvers such as PARDISO or
WSMP [15, 16].
Dynamic pivoting has always been a central tool by which nonsymmetric sparse linear solvers gain stability.
Therefore, improvements in speeding up direct factorization methods were limited to the uncertainties that have
arisen from using pivoting. Certain techniques, like the column elimination tree, have been useful for predicting the
sparsity pattern despite pivoting. However, in the symmetric case, the situation becomes more complicated since only
symmetric reorderings, applied to both columns and rows, are required, and no a priori choice of pivots is given. This
makes it almost impossible to predict the elimination tree in a sensible manner, and the use of cache-oriented level-3
BLAS is impossible. With the introduction of symmetric maximum weighted matchings [11, 10] as an alternative
to complete pivoting, it is now possible to treat symmetric indeﬁnite systems similarly to symmetric positive deﬁnite
systems. This allows to predict ﬁll-in using the elimination tree, and thus allows to set up the data structures that
are required to predict dense submatrices. This in turn means that one is able to exploit level-3 BLAS applied to the
supernodes. Consequently, the classical Bunch–Kaufman pivoting approach needs to be performed only inside the
supernodes. This approach has been successfully implemented in symmetric indeﬁnite version of PARDISO, and also
recently in WSMP. As a major consequence of this novel approach, the sparse indeﬁnite solver has been improved to
become almost as eﬃcient as its symmetric positive analogy.
We have integrated these methods [10, 11] into the recent parallel distributed version version of WSMP [13].
In addition, we have used in WSMP two types of parallelism for factoring the symmetric indeﬁnite matrices from
Eqn. ( 9). The ﬁrst, task parallelism, views the entire computation as a task-dependency graph and seeks to perform
independent tasks in parallel. The task dependency graph for factoring symmetric indeﬁnite sparse matrices happens
to be a tree, which is known as the elimination tree [18]. Data parallelism is the second type of parallelism available
and pertains to multiple processes performing a computational task such as panel factorization or an update operation
in parallel with the data distributed among the processes. Gupta et. al [16] analytically showed that one of the factors
that determines the scalability of parallelism in sparse factorization is whether task parallelism, data parallelism, or
both are exploited. When data parallelism is exploited, the scalability is quite sensitive to data distribution. A twodimensional distribution, where both the rows and the columns of the matrix or its submatrices are partitioned, leads
to more scalable parallel formulations than a one-dimensional distribution involving either partitioning of the rows or
the columns only. WSMP uses both task and data parallelism, gradually switching from the former to the latter as
the number of independent tasks declines and their sizes increases. In the data parallel part, it uses a two-dimensional
distribution.
6. Numerical Experiments
To illustrate the usefulness of inequality “box” constraints for the solution of inverse medium problems, we now
consider a simple two-dimensional layered medium that consists of three layers with a wave speed c(x) ranging from
0.9 to 1.1; it is shown in the left frame of Fig. 1. Next, we illuminated the medium with four diﬀerent point sources
at the frequency ω = 40 from below and thus obtained synthetic measurements ue,m at 40 equidistributed boundary
locations by solving the corresponding forward problems. We now include a priori information as rough upper and
lower bounds on c(x): 0.8 < c(x) < 1.3. After only 16 iterations, the IP method easily converged to the solution
shown in the middle frame of Fig. 1. However, if those box constraints are dropped, the algorithm no longer reaches
the true solution but instead ends up after 242 iterations in the false local minimumum shown in Fig. 1(c). Here and
in all experiments below we ﬁx the regularization parameter to α = 1.25 10−6 in (6).
Clearly, the above inclusion of a priori information through box constraints can be combined with a standard
frequency stepping strategy for improved robustness. For illustration, we consider again a two-dimensional medium
that consists of three layers with wave speed c = 1.0, 1.6, and 1.4; inside the two lower layers are buried two smaller
objects with c = 1.2 and c = 1.8, respectively, as shown in left frame of Fig. 2. This simple problem presents
some of the typical features that occur in seismic imaging. Again, we illuminated the medium with six diﬀerent
point sources with frequency ω = 10 from below and thus obtained synthetic measurements ue,m at 40 equidistributed

1472

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

(a)

(b)

(c)

Figure 1: Box constraints guide the algorithm to the true solution: true velocity proﬁle (a); reconstructed velocity proﬁle with box constraints after
16 iterations (b); false solution after 242 iterations without box constraints (c) – here note the modiﬁed color scale.

(a)

(b)

(c)

Figure 2: Multifrequency stepping helps to prevent false solutions while sharpening the reconstruction result: true velocity proﬁle (a), reconstruction
result with ω = 10 (b) and ω = 20 (c), where in the last example (b) was used as initial control guess.

boundary locations by solving the corresponding forward problems. Starting again from an initial uniform background
c(x) = 1, the IP method rapidly identiﬁed in 15 iterations the overall layered structure of the medium.
To detect the two smaller buried objects, we now illuminate the medium at the higher frequency ω = 20. Starting
from the same initial guess, however, the IP method converged to a false solution (not shown here). By applying the
frequency stepping strategy, that is by initializing the algorithm with the solution obtained from the lower frequency
ω = 10, convergence to the true solution was achieved in 12 iterations only. As shown in Fig. 2(c), the IP method
correctly identiﬁed both the location and the local wave speed of the hidden objects.
6.1. Scalability of the Inversion on Highly Parallel Architectures
To demonstrate the scalability of the IP method, we now consider the following three-dimensional scattering
problem. Inside a homogeneous unit cube with c = 1, we introduce a Gaussian heterogeneity with maximal amplitude
Δc = 0.4 and standard deviation 0.1, centered at (0.4, 0.4, 0.6). Waves radiated from two point sources located at
(0.1, 0.1, 0.2) and (0.1, 0.9, 0.8) were measured at 240 points distributed along the boundary with ω = 10. The threedimensional computational domain was subdivided into 3 · 106 tetrahedral elements, resulting in 641 151 degrees of
freedom each for the control variable k and for the real and imaginary part of every state variable ue , e = 1, 2. Thus,
the optimization problem contains 3 205 755 optimization variables, 2 564 604 equality and 1 282 302 inequality
constraints, and leads to a KKT matrix of size 5 761 359 with about 86 · 106 nonzero entries.
We used the Cray XE6 from the National Supercomputing Centre CSCS in Switzerland to test the performance
and scalability of the inverse medium application. The Cray XE6 is based on a 24-core AMD Opteron (aka Magny-

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

#nodes
8
16
32
64
128

1473

3D Inverse Medium Example
1-core 2-cores 4-cores 8-cores
48,435 24,462
12,746
8,350
25,908 14,338
8,423
4,878
14,948
8,409
5,081
2,898
8,793
5,022
2,841
1,543
5,862
2,982
1,507
1,260

Table 1: Parallel factorization and solution times in seconds (mixed OpenMP-MPI implementation) for one inverse medium example on the Cray
XE6 up to 1,024 cores.

Cours) CPU system running at 2.1 GHz and has 32 GB DDR3 main memory [19]. For the IP algorithm we limited
the number of compute cores to 1,024 cores. We have used the exact primal-dual interior point method [8] algorithm
that were implemented in a parallel distributed-memory version of IPOPT [8]. The Jacobian and Hessian matrices,
together with the right-hand side from Eqn. (9), were assembled with the ﬁnite element library libMesh [20] and the
parallel library PETSc [21, 22, 23]. The assembly was distributed over 64 processors and took only about 15 seconds.
We used PARDISO [10] to compute the pivoting and scaling vectors, and WSMP to factor the matrix in (9).
Table 1 shows the factorization times for an interior-point optimization matrix up to 1,024 cores on the Cray XE6.
In [10], we observed that the static orderings gives good results in terms of accuracy and the resulting factorization can
be done using a static two-dimensional distribution. As shown in Table 1, the performance improves almost linearly
with increasingly many cores, all the way to 1,024 cores. The number of threads per process aﬀects the performance
and using multiple threads per process is almost always beneﬁcial. In all cases, using two or four threads per MPI
process delivers better performance than using single threaded processes. There is only a slight performance increase
when eight or more threads are used. This is related to the architecture of the Cray XE6 processor, which consists of
four nodes each containing six AMD cores. In general, the eﬃciency on one core is in the order of 55% when going
from eight nodes to 128 nodes.
7. Conclusion
In this paper, we have used an interior-point method to solve the inverse medium problem for the time-harmonic
scalar wave equation. The method is based on a full-space primal-dual approach to achieve feasibility and optimality
simultaneously. To attain a high level of performance and scalability on massively parallel architectures, it is combined
with a highly parallel sparse matrix factorization solver. We have demonstrated that the inclusion of inequality bounds
and a frequency stepping strategy signiﬁcantly improves the robustness of the inversion process. Our current method
is not matrix-free yet, but it heavily makes use of recent algorithmic developments for symmetric indeﬁnite matrices.
Those methods allow a scalable two-dimensional distribution and factorization of a parallel direct solver even on
massively parallel architectures. In future work, we intend to use a matrix-free, inexact IPM [24] and a hybrid
factorization solver [25] as a preconditioner for a full parallel inexact nonlinear inversion. Ongoing work also includes
adaptive algorithms and a complete integration and parallelization of our approach.
8. Acknowledgements
We are grateful to Anshul Gupta (IBM Watson) and Andreas W¨achter (IBM Watson) for their comments and
for their help on modifying the WSMP and IPOPT software. In addition, we thank the Swiss National Center of
Supercomputing for access to the Cray XE6. This work was supported by the Swiss National Science Foundation and
the Swiss Platform for High-Performance and High-Productivity Computing HP2C.
[1] D. Colton, R. Kress, Inverse acoustic and electromagnetic scattering theory, Springer Verlag, 1998.
[2] M. Bollh¨ofer, M. J. Grote, O. Schenk, Algebraic multilevel preconditioner for the Helmholtz equation in heterogeneous media, SIAM J.
Scientiﬁc Computing 31 (5) (2009) 3781–3805.
[3] L. Biegler, O. Ghattas, M. Heinkenschloss, B. van Bloemen Waanders, Large-Scale PDE Constrained Optimization, Vol. 30, Lecture Notes
in Computational Science and Engineering, Springer-Verlag, 2003.
[4] J. Nocedal, S. Wright, Numerical Optimization, Springer, New York, NY, USA, 2006.

1474

M. J. Grote et al. / Procedia Computer Science 4 (2011) 1466–1474

[5] G. Biros, O. Ghattas, Parallel Lagrange-Newton–Krylov-Schur methods for PDE-constrained optimization. II: The Lagrange-Newton solver
and its application to optimal control of steady viscous ﬂows., SIAM J. Scientiﬁc Computing 27 (2) (2005) 714–739.
[6] G. Biros, O. Ghattas, Parallel Lagrange-Newton-Krylov-Schur methods for PDE-constrained optimization. I: The Krylov-Schur solver., SIAM
J. Scientiﬁc Computing 27 (2) (2005) 687–713.
[7] E. Haber, U. Ascher, Preconditioned all-at-once methods for large, sparse parameter estimation problems, Inverse Problems 17 (2001) 1847–
1864.
[8] A. W¨achter, L. T. Biegler, On the implementation of a primal-dual interior point ﬁlter line search algorithm for large-scale nonlinear programming, Mathematical Programming 106 (1) (2006) 25–57.
[9] A. W¨achter, C. Laird, IPOPT — Software package for large-scale nonlinear optimization, available at https://projects.coin-or.org/
Ipopt (2010).
[10] O. Schenk, A. W¨achter, M. Hagemann, Matching-based preprocessing algorithms to the solution of saddle-point problems in large-scale
nonconvex interior-point optimization, Comput. Optim. Appl. 36 (2-3) (2007) 321–341.
[11] O. Schenk, K. G¨artner, On fast factorization pivoting methods for symmetric indeﬁnite systems, Elec. Trans. Numer. Anal. 23 (1) (2006)
158–179.
[12] M. Hagemann, O. Schenk, Weighted matchings for preconditioning symmetric indeﬁnite linear systems, SIAM J. Scientiﬁc Computing 28
(2006) 403–420.
[13] A. Gupta, S. Koric, T. George, Sparse matrix factorization on massively parallel computers, in: Proceedings of the Conference on High
Performance Computing Networking, Storage and Analysis, ACM, 2009, pp. 1–12.
[14] A. Bayliss, M. Gunzburger, E. Turkel, Boundary conditions for the numerical solution of elliptic equations in exterior regions, SIAM Journal
on Applied Mathematics 42 (2) (1982) 430–451. doi:10.1137/0142032.
URL http://link.aip.org/link/?SMM/42/430/1
[15] A. Gupta, Fast and eﬀective algorithms for graph partitioning and sparse-matrix ordering, IBM Journal of Research and Development 41 (1.2)
(2010) 171–183.
[16] A. Gupta, G. Karypis, V. Kumar, Highly scalable parallel algorithms for sparse matrix factorization, IEEE Transactions on Parallel and
Distributed Systems 8 (5) (2002) 502–520.
[17] O. Schenk, M. Bollh¨ofer, R. A. R¨omer, On large scale diagonalization techniques for the Anderson model of localization, SIAM J. Scientiﬁc
Computing 28 (3) (2006) 963–983.
[18] J. W. Liu, The role of elimination trees in sparse factorization, SIAM J. Matrix Anal. Appl. 11 (1) (1990) 134–172.
[19] CSCS Web page, http://www.cscs.ch/455.0.html (2011).
[20] B. S. Kirk, J. W. Peterson, R. H. Stogner, G. F. Carey, libMesh: A C++ Library for Parallel Adaptive Mesh Reﬁnement/Coarsening
Simulations, Engineering with Computers 22 (3–4) (2006) 237–254, http://dx.doi.org/10.1007/s00366-006-0049-3.
[21] S. Balay, J. Brown, K. Buschelman, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, B. F. Smith, H. Zhang, PETSc Web page,
http://www.mcs.anl.gov/petsc (2009).
[22] S. Balay, J. Brown, , K. Buschelman, V. Eijkhout, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, B. F. Smith, H. Zhang, PETSc
users manual, Tech. Rep. ANL-95/11 - Revision 3.0.0, Argonne National Laboratory (2008).
[23] S. Balay, W. D. Gropp, L. C. McInnes, B. F. Smith, Eﬃcient management of parallelism in object oriented numerical software libraries, in:
E. Arge, A. M. Bruaset, H. P. Langtangen (Eds.), Modern Software Tools in Scientiﬁc Computing, Birkh¨auser Press, 1997, pp. 163–202.
[24] F. E. Curtis, O. Schenk, A. W¨achter, An interior-point algorithm for large-scale nonlinearoptimization with inexact step computations, SIAM
J. Scientiﬁc Computing 32 (6) (2010) 3447–3475.
[25] M. Manguoglu, A. Sameh, O. Schenk, PSPIKE: A parallel hybrid sparse linear system solver, Euro-Par Parallel Processing Conference
(2009) 797–808.

