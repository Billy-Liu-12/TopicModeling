Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
427–435

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Obtaining simultaneous equation models from a set of variables
through genetic algorithms
Jose J. L´opez-Esp´ına,1 , Domingo Gim´enezb
a Centro

de Investigaci´on Operativa, Universidad Miguel Hern´andez, Elche, Spain
de Inform´atica y Sistemas, Universidad de Murcia, Spain

b Departamento

Abstract
Traditionally, Simultaneous Equation Models (SEM) have been developed by people with a wealth of experience
in the particular problem represented by the model. Developing a SEM is very diﬃcult when there is a large number
of variables. It would be useful to have an algorithm which gives a satisfactory SEM according to an information
criterion. Because of the huge number of SEM possible, exhaustive search methods are not well suited, so an algorithm
to obtain a SEM from a set of variables has been designed. The algorithm combines genetic and greedy methods. The
behaviour of the algorithm is studied, and the results of some experiments are discussed.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Simultaneous Equations Models, Econometrics, Genetic Algorithms

1. Introduction
Although Simultaneous Equation Models (SEM) have traditionally been used in the economic world, today they
are used in many diﬀerent ﬁelds. Examples can be found in econometrics [1, 2], medicine [3], and even in the study
of the divorce rate [4]. SEM have usually been developed by people with a wealth of experience in the particular
problem represented by the model. The relationships between the variables are used to create the model, but these
will depend on the criteria chosen.
This paper studies how to obtain a SEM from a set of variables. The idea is to develop an algorithm which, given
the endogenous and exogenous variables, ﬁnds the best SEM possible according to an information criterion for model
comparison. The space of the possible solutions is very large since the number of equations of the best model is
between one and the total number of endogenous variables. Hence, exhaustive search methods are not very suitable.
Another possibility is to apply metaheuristic techniques [5]. An overview and classiﬁcation of the optimization
heuristic techniques for modelling regression problems is provided in [6].
This work analyzes a genetic algorithm which ﬁnds a SEM from a set of data variables [7]. The solution may
not necessarily be the best, but the cost of ﬁnding this solution is much lower than that of ﬁnding the best one
with exhaustive search methods. A basic version of a genetic algorithm is presented and greedy methods are used
Email addresses: jlopez@umh.es (Jose J. L´opez-Esp´ın), domingo@um.es (Domingo Gim´enez)
author

1 Corresponding

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.046

428

J.J. L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435

Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

2

to improve the algorithm, so obtaining a hybrid metaheuristic. The idea is to use a greedy method in the genetic
algorithm to explore the space of solutions better.
The goodness of the model depends on the experts’ criteria, but numerical methods can be used to represent
it. Single equation regression models have made use of several goodness criteria, for example Akaike Information
Criterion (AIC), corrected version of AIC (AICC), Schwarz BIC, Bozdogan ICOMP, etc. [1, 8, 9]. Some of them,
particularly AIC, BIC and AICC, have been modiﬁed for multivariate regression models [10, 11], and have been
adapted to SEM [12].
The problem of ﬁnding the best model using AIC and BIC information criteria and genetic algorithms has already
been studied for regression models [13], where diﬀerent metaheuristic techniques are compared and AIC and BIC are
compared experimentally when varying the parameters of the problem. The same author uses genetic algorithms to
obtain the optimal set of instrumental variables from a set of them [14]. 2SLS is studied and compared with other
techniques when instrumental variables are used in linear models.
Here, the versions of AIC and BIC criteria for SEM are used in the genetic algorithm to obtain a good SEM. We
study the eﬀect that modiﬁcations of the parameters has on the algorithm’s behaviour. As the size of the problem
increases so the execution time became longer. A parallel shared memory version is therefore used to reduce the time
needed for the model estimation. There are other studies on algorithms to obtain the best regression model from a set
of variables [15, 16, 17], but all of them are for regression models and, as far as we know, no work has focused on
SEM.
The paper is organized as follows. Section 2 reviews the background of SEM. In section 3, AIC and BIC criteria
for SEM are described. Section 4 deals with the basic genetic algorithm proposed. Section 5 incorporates the greedy
method. Section 6 summarizes the results of some experiments. Finally, in section 7 conclusions and future works are
outlined.
2. Simultaneous Equation Models
The scheme of a system with N equations, N endogenous variables (which inﬂuence and are inﬂuenced by the
other variables) and K predetermined or exogenous variables (which inﬂuence but are not inﬂuenced by the system)
[18] is:
y1 = β1,2 y2 + β1,3 y3 + . . . + β1,N yN + γ1,1 x1 + . . . + γ1,K xK + u1
y2 = β2,1 y1 + β2,3 y3 + . . . + β2,N yN + γ2,1 x1 + . . . + γ2,K xK + u2
...
yN = βN,1 y1 + . . . + βN,N−1 yN−1 + γN,1 x1 + . . . + γN,K xK + uN

(1)

where x1 , x2 , . . . , xK are exogenous variables, y1 , y2 , . . . , yN are endogenous variables, and u1 , u2 , . . . , uN are random
variables. All these variables are vectors with dimension d × 1, where d is the sample size. The problem is to obtain
β1,2 , β1,3 , . . . , βN,N−1 , γ1,1 , . . . , γN,K from a representative sample of the model.
Equation (1) can be represented in matrix form as:
BY T + ΓX T + uT = 0

(2)

where Y = (y1 . . . yN ) , X = (x1 . . . xK ) , u = (u1 . . . uN ).
The structural model (equation 2) can be expressed in reduced form:
Y = XΠ + v

(3)

ΠT = −B−1 Γ , v = −B−1 u

(4)

with:

An equation is identiﬁed if the number of parameters in the equation is lower than or equal to K+1, in other words,
ni − 1 ≤ K − ki where ni and ki are the number of endogenous and exogenous variables in equation i. The parameters
corresponding to an equation can be calculated only when the equation is identiﬁed (this is called order condition
[18]).

J.J.
L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435
Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

429
3

Two diﬀerent matrices can be deﬁned, X (d × K) and Y (d × N), which contain the exogenous and the endogenous
variables.
Two Step Least Square (2SLS) is the most commonly used algorithm to solve an equation in a SEM because it can
be used when the equation is exactly or over identiﬁed. In [19] diﬀerent expressions to calculate 2SLS are shown, and
sequential and parallel algorithms are studied for these expressions. Nevertheless, diﬀerent estimators have been used
to solve SEM [20, 21]. In this work 2SLS is used to solve the equations of a SEM. The application of other equation
solving methods (ILS, 3SLS,...) would not inﬂuence the SEM obtained but would aﬀect the execution time.
3. The problem: Find the best SEM given a set of values of variables
Given two sets of endogenous and exogenous variables, i.e. a matrix Y (d × N) of N endogenous variables
(the columns of Y, Y1 , ..., YN , are the endogenous variables), and a matrix X (d × K) of K exogenous variables (the
columns of X, X1 , ..., XK , are the exogenous variables), the problem is to obtain the best model which shows the
relationship between all these variables. Some of these variables have simultaneous inﬂuences and will appear in
diﬀerent equations.
One model is considered better than another if its information criterion is lower. There are diﬀerent information
criteria [12] and any one of them can be used to select the model. Because AIC and BIC are based on the maximum
likelihood method, it is necessary to minimize the covariance matrix of the prediction errors. The expressions of AIC
and BIC are:
AIC = d ln |Σˆ e | + 2
⎛
⎜⎜
ˆ
BIC = d ln |Σe | + ln d ⎜⎜⎜⎝

N
i=1
N
i=1

(ni + ki − 1) + N(N + 1)
⎞
⎟⎟
(ni + ki − 1) + 0.5N(N + 1)⎟⎟⎟⎠

(5)

(6)

where |Σˆ e | is the determinant of the covariance matrix of the errors ei , i = 1, ..., N, where ei is the diﬀerence between
Yi and the estimation of Yi given in equation i.
4. A Genetic Algorithm for SEM selection
The space of the diﬀerent possible SEM is very large. The total number of possible combinations is 2N(N+K) , and
therefore exhaustive search methods are not suitable here.
As an alternative, genetic algorithms [7] are used to approach the best Simultaneous Equation Model. A population of SEM composed of chromosomes representing particular models is explored. Each chromosome represents
a candidate for the best model. If the chromosome can be evaluated (i.e., if the model can be solved) a value of the
quality of the chromosome is calculated (using AIC or BIC criteria), and then it is compared with the rest of the
population.
A chromosome is represented by a matrix with N rows and N + K columns. In each row, an equation is represented
using ones and zeros. If variable j appears in equation i, the value for the (i, j) position in the chromosome is 1, and
0 if not. The ﬁrst N columns of a chromosome represent the endogenous variables and the other K columns represent
the exogenous ones.
In equation i, the main endogenous variable will be the variable i. Thus, if equation i is in the system, the position
(i, i) in the chromosome must be 1. For example, in a problem with N = 2 endogenous variables (Y1 and Y2 ) and
K = 3 exogenous variables (X1 , X2 and X3 ), the model
Y1 = β1,2 Y2 + γ1,1 X1 + γ1,2 X2 + u1
Y2 = β2,1 Y1 + γ2,3 X3 + u2

(7)

11110
11001

(8)

is represented by the chromosome

430

J.J. L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435

Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

4

where the ﬁrst two columns correspond to the endogenous variables, and the other three to the exogenous ones.
The general scheme of a genetic algorithm is used [7]. The functions in the scheme and the values of some
parameters for a basic genetic algorithm are shown below. The generational process in the genetic algorithm is
repeated until the process reaches the maximum number of iterations (MaxIter) or the best ﬁtness is repeated over a
number of successive iterations (MaxBest).
4.1. Deﬁning a valid chromosome
The necessary conditions to be a valid chromosome are:
• C1: The model has to have at least one equation.
• C2: If the (i, i) element is zero, the column i will have only zeros. This means that when equation i is not in the
system, variable i can not be in other equations.
• C3: Each equation in the model must have at least two variables, i.e., if the (i, i) element is 1, there exists a j
with 1 ≤ j ≤ N + K and j i such that the (i, j) element is 1.
• C4 (Rank condition [18]): Equation i is identiﬁed if it is possible to ﬁnd a (N − 1) × (N − 1) matrix with full
range whose elements are the unknown variables β1,2 , β1,3 , . . . , βN,N−1 , γ1,1 , . . . , γN,K that do not appear in the
equation.
The order condition (section 2) is a necessary but not suﬃcient condition for a model. However, the rank condition
is suﬃcient and necessary and subsumes the necessary order condition. For this reason only rank condition is used.
Algorithm 1 shows a scheme for creating a valid chromosome. All the above conditions are checked.
Algorithm 1 Scheme for creating a chromosome in the initialization of the population
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:

generate the N(N + K) elements randomly (zeros and ones with the same probability)
{C1 AND C2 CONDITIONS}
if N or N-1 elements e(i,i) are zero with i=1,...,N then
invert all the elements e(i,i) with i=1,...,N
end if
{C3 CONDITION}
for i=1...N do
if the element e(i,i) is zero then
make all the elements in column i zero
end if
end for
{C4 CONDITION}
for i=1...N do
if equation i fails the range condition then
generate randomly this equation (row i) and go to 3
end if
end for

Floating point operations are not used when analyzing a chromosome. However, the number of comparisons can
be very high and should be given consideration.
The time the ﬁtness function needs depends heavily on the algorithm used for solving a SEM. Improving the
ﬁtness function using matrix decomposition for 2SLS or using other estimators for solving the equations of the SEM
will take less time, but the solution of the genetic algorithm will be the same.
4.2. Initialization and EndConditions
Many valid individual solutions are randomly generated to form the initial population. The population size
(PopS ize) is stated at the beginning. Each chromosome is generated according to algorithm 1. If some information is known, some models could be proposed for insertion in the initial population.

J.J.
L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435
Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

431
5

4.3. Evaluating a chromosome
Three steps are necessary for the evaluation of a chromosome. First, the system which the chromosome represents
is solved. After that, the solution is used to estimate the main endogenous variable in each equation. Finally, the AIC
or BIC criterion is calculated using equation 5 or 6.
The cost of evaluating a chromosome is the sum of solving the system, estimating the main endogenous variables
and calculating the AIC or BIC parameter:
T solve (N, K) +

N
i=1

(ni + ki − 1) + 2N 2 d + 23 N 3 + N ≈ O(K 2 Nd + K 3 N)

(9)

Equation 9 considers the worst case in a chromosome (all the endogenous and exogenous variables of the problem
are included in the chromosome). The order is that of solving the system (T solve (N, K)) and is calculated by computing
the expression of 2SLS. Diﬀerent ways of computing the expression of 2SLS are shown in [19].
4.4. Selecting the best ranking and Crossover
In each generation a proportion of the existing population is selected to breed a new generation. A comparison
of the evaluations of all the chromosomes in the population is made in each generation, and only some chromosomes
(those in the best ranking) will survive. The number of chromosomes which survive in each population (S urvS ize) is
another parameter of the algorithm.
For each two new solutions to be produced (descendent1 and descendent2), a pair of ascendent (ascendent1 and
ascendent2) chromosomes is selected from the set of chromosomes which survive. Many diﬀerent methods can be
used to combine the ascendents. Table 2 in section 6 shows a comparison of the following methods:
• Single point crossover (Cross1): This is the basic crossover, and it is proposed as a ﬁrst approach. A number
e with 1 ≤ e ≤ N(N + K) of the total elements (zeros or ones) of the chromosome is chosen randomly, and the
ﬁrst e elements of ascendent1, i.e, the ﬁrst Ne equations plus the ﬁrst e − Ne N elements of the Ne equation,
and the last (NK − e) elements of ascendent2 are selected for descendent1. The other elements of ascendents
are selected for descendent2.
• Single point crossover considering equations (Cross2): This crossover is similar to the single point crosover
but it randomly chooses an equation instead of an element. A number e with 1 ≤ e ≤ N is chosen randomly and
the ﬁrst e equations from ascendent1 and the last N −e equations from ascendent2 are selected for descendent1,
and the other equations from ascendents are selected for descendent2.
• Crossover inside an equation (Cross3): An equation e is chosen randomly and then two numbers v1 and v2 are
generated randomly with 1 ≤ v1 ≤ N and 1 ≤ v2 ≤ K. All the equations of ascendent1 go to descendent1 except equation e, and likewise for the other pair. Equation e is generated in descendent1 using the ﬁrst v1 endogenous variables of equation e of ascendent1 and the remaining endogenous ones of equation e of ascendent2,
and using the ﬁrst v2 exogenous variables of equation e of ascendent1 and the remaining exogenous ones of
ascendent2. Similarly, equation e is generated in descendent2 using the rest of elements of equation e of
ascendents.
An example of the three kinds of crossover is shown in table 1.
4.5. Mutation
A small probability of mutation is considered in all the iterations. The mutation considered here is the bit inversion,
i.e., a chromosome of the new subset generated in the crossover is chosen randomly, and a number, e, for the equation
(with 1 ≤ e ≤ N) and a number, v, for the variable (with 1 ≤ v ≤ N + K) are generated randomly. Then, element v
of equation e is inverted. If the new chromosome is a valid one it is included in the population, if not, algorithm 1 is
used, starting in line 2, to create a valid chromosome. In each iteration a call to the mutation is made randomly (with
a probability called Pmut ).

432

J.J. L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435

Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

6

Table 1: An example of the three methods of crossover. In each case, e, v1 and v2 have been chosen randomly and the number of endogenous and
exogenous variables is N = 3 and K = 5.

Ascendent
asc1
asc2
11110110 10100100
11110101 01110100
01110110 11110110

Cross1
e = 10
desc1
11110110
11110100
11110110

desc2
10100110
01110101
01110110

Cross2
e=1
desc1
11110110
01110100
11110110

desc2
10100100
11110101
01110110

Cross3
e = 2, v1 = 2, v2 = 3
desc1
desc2
11110110 10100100
11110100 01110101
01110110 11110110

5. Greedy Method
When a chromosome is mutated and then placed in a diﬀerent part of the set of solutions, it may not have enough
quality to survive long enough to create new chromosomes in this area, even though the best solution may be close.
To avoid this problem, a greedy method is used in the mutation (algorithm 2) in the following way: an equation e and
a variable v are chosen randomly in chromosome c (line 2) which has been chosen to be mutated, and c1 is obtained.
Then, the best chromosome of the neighbourhood (those obtained by inverting only one element) is chosen (lines 6
to 11). If the best chromosome coincides with c1 , the loop ends and the chromosome is included in the population. If
not, c1 is substituted by the best chromosome found (line 15) and the process continues. This process is repeated until
NEG (Number of Equations in Greedy) diﬀerent equations are generated. Table 4 shows a comparison of the solution
when NEG is varied.
Algorithm 2 Scheme of the greedy algorithm in the mutation function
1: while Number of equations generated ≤ NEG do
2:
Generate 1 ≤ e ≤ N and 1 ≤ v ≤ N + K randomly
3:
c1 = Mutate(c) {invert the element (e, v) of the chromosome c}
4:
cbest = c1 AND EndConditions=false
5:
while EndConditions=false do
6:
for v=1...N + K do
7:
c2 = Mutate(c1 ) {invert the element (e, v) of the chromosome c1 }
8:
if GoodChromosome(c2 ) AND Evaluation(c2 ) < Evaluation(cbest ) then
9:
cbest = c2
10:
end if
11:
end for
12:
if cbest = c1 then
13:
EndConditions=true
14:
else
15:
c1 = cbest
16:
end if
17:
end while
18: end while

6. Experimental Results
Experimental results have been obtained in an Intel Itanium 2 system equipped with four dual-core 1.4 GHz
Montecito processors.
In the following experiments some parameters have been ﬁxed to values with which satisfactory results have been
ize
, MaxIter = 150, and the probability of mutation is 1 per cent).
obtained (S urvS ize= PopS
2
Table 2 compares the three crossover methods. The data variables are created randomly (each variable is a vector
of real numbers generated between 1 and 10). The cost of the algorithm and also the number of iterations needed to

433
7

J.J.
L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435
Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

ﬁnish are shown. The table shows that crossover inside an equation (Cross3) is the best option in cost but it obtains a
solution which has a slightly higher ﬁtness function. The lowest execution times and values of the ﬁtness function are
hightlined.
Table 2: A comparison of the three crossover methods for diﬀerent sizes of the problem. In each case, t is the execution time (in seconds), iter is
the number of iterations that the algorithm has needed to ﬁnish, and FF is the value of the ﬁtness function of the solution. The population size is
100 and MaxBest=15.

N
10
15
30
40

K
15
20
40
50

d
50
50
100
100

t
3.03
8.00
58.33
325.87

Cross1
iter
FF
48
2683.13
62
4548.68
50 21937.02
111 30956.78

t
5.11
6.73
87.54
294.19

Cross2
iter
FF
97
2732.90
53
4540.93
72 22120.11
102 31262.20

t
0.67
1.94
9.47
64.41

Cross3
iter
FF
20
2833.41
40
4709.50
17 22765.68
24 32975.04

To analyze the goodness of the solutions and to compare AIC and BIC criteria a valid chromosome is generated
randomly. This chromosome represents the real SEM to be obtained. To generate the values of the variables which
constitute the entry of the algorithm the exogenous variables are generated randomly and the endogenous variables are
calculated using equation 3, with the white noise vector v generated by following a N(0, σ), where σ varies between
0 and 0.1.
Table 3 shows a comparison between AIC and BIC when varying the population size
(PopS ize), σ and the problem size. The error shown is the sum of the squares of the diﬀerences between the values
observed of the main endogenous variables and those obtained by the estimation of these, divided by the values observed. The errors are calculated by running the algorithm ten times for the same data variables, and table 3 shows the
average and the standard deviation. The error increases when N and K increase. In most cases BIC obtains models
with lower error than AIC. But the behaviour of BIC is irregular because in some cases models with lower BIC and
higher error are obtained. For example, when N=30, K=40 and σ=0, ErrorBIC is lower when PopS ize = 100 than
when PopS ize = 500 (and when PopS ize is increased the solution found is better).
Table 3: A comparison of the solution found by the genetic algorithm based on AIC or BIC when varying the population size (PopS ize), the
number of endogenous variables (N) and the number of exogenous ones (K). The crossover is “inside an equation”, d = 100, MaxBest=15 and
MaxIter=150. ErrorAIC and ErrorBIC are the errors of the solution using AIC and BIC in the ﬁtness function.

N
30
30
30
40
40
40

K
40
40
40
50
50
50

S igma
0
0.01
0.1
0
0.01
0.1

PopS ize = 100
ErrorAIC ErrorBIC
1.470.72
1.240.65
1.170.32
0.990.39
1.060.32
0.920.42
2.290.52
2.010.43
1.640.46
1.580.40
1.640.37
1.540.34

PopS ize = 500
ErrorAIC ErrorBIC
1.310.31
1.330.54
0.880.28
0.870.36
0.910.35
0.950.31
2.290.64
2.280.78
1.590.49
1.620.27
1.560.38
1.310.19

Table 4 shows a comparison between the solutions found with and without the greedy method. The data shown are
the average and the standard deviation of 10 solutions found by the algorithm. When only one equation is generated
in the greedy method, both modes give similar AIC. When the number of equations in the greedy method (NEG)
increases, the solution found is much better than with the non-greedy version, although the cost increases. The
standard deviations when NEG = N4 and when NEG = N2 are higher. This is because there is a strong inﬂuence of the
randomly chosen equation in the ﬁnal evaluation of the chromosome.
When the size of the problem or PopS ize increases the execution time is very long. Thus, a parallel version of
the algorithm is developed in shared memory. Table 5 shows the speed-up and the execution time in an experiment

434

J.J. L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435

Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

8

Table 4: A comparison of the solution found by the genetic algorithm with and without greedy method, when varying the number of endogenous
variables (N) and the number of exogenous ones (K). PopS ize=100, d=100, the crossover is “inside an equation”, MaxBest=30 and MaxIter=150.

Mode
without greedy

NEG
1
N
4
N
2

with greedy

N

N = 10, K
AIC
2138.93495.92
2143.54399.53
1491.13488.72
−680.61642.75
−3586.46453.69

= 20
time
5.101.41
9.793.92
12.622.54
27.488.89
34.1720.74

N = 20, K = 30
AIC
time
4658.06722.33
15.415.20
4710.53580.39
49.1421.72
3072.981135.88
102.2345.53
811.65784.60
227.3583.93
−4920.00466.22 449.78165.68

where the data variables are generated randomly. PopS ize and the number of processors vary. The costliest parts
of the genetic algorithm are Evaluate, Crossover and Mutate, and have been paralleled simply by assigning some
chromosomes to each processor. The population is initialized only once, but it has a high cost and is also paralleled
as above. To study the parallelism, the algorithm is stopped when the maximum number of iterations (MaxIter) is
reached. The Speed-up increases when N and K increase. When PopS ize increases, the increment in the cost is lower
when N and K are large than when they are small.
Table 5: Execution time (in seconds) and speed-up of the algorithm in shared memory when varying the population size (PopS ize), the number of
endogenous variables (N), the number of exogenous variables (K), the sample size (d) and the number of processors. The crossover is “inside an
equation”, NEG = N2 and MaxBest=MaxIter=150.

.

PopS ize
100
100
100
500
500
500

N
10
20
30
10
20
30

K
20
30
40
20
30
40

d
100
100
100
100
100
100

1 proc
time
17.25
123.04
717.75
71.2
280.09
1309.45

2 proc
time
sp
10.61 1.63
63.74 1.93
370.99 1.94
41.74 1.71
144.82 1.93
682.78 1.92

4 proc
time
sp
6.48
2.66
33.41 3.68
190.42 3.77
24.66 2.89
97.48 2.87
344.18 3.81

8 proc
time
sp
3.73
4.63
20.72 5.94
98.48 7.30
16.29 4.37
54.06 5.18
180.86 7.24

7. Conclusions and Future Works
An algorithm to obtain a satisfactory SEM from a set of variables is studied. A hybrid algorithm is proposed.
Genetic and greedy methods are combined to avoid falling in local minima and to speed up the convergence. Diﬀerent
parameters are experimentally tuned. When the size of the model increases, the execution time can become very
large, and a parallel version of the algorithm is preferable. A shared memory version which allows us to eﬃciently
use multicore processors in the solution of the problem has been developed. For bigger models the use of more
complex systems (networks of multicores) could be preferable, so we are working on the development of hybrid
(message-passing plus shared memory) algorithms. Other metaheuristic methods (Scather Search, GRASP,...) are
being considered for application to this problem.
Acknowledgements:
This work has been partially supported by the Conserjer´ıa de Educaci´on de la Regi´on de Murcia (Fundaci´on
S´eneca, 08763/PI/08), and by the Spanish Ministerio de Ciencia e Innovaci´on (TIN2008-06570-C04-02/TIN).
The authors gratefully acknowledge the computer resources, technical expertise and assistance provided by the
Parallel Computing Group of the Polytechnic University of Valencia.

J.J.
L´opez-Esp´ın, D. Gim´enez / Procedia Computer Science 1 (2012) 427–435
Jose J. L´opez-Esp´ın, Domingo Gim´enez / Procedia Computer Science 00 (2010) 1–9

435
9

References
[1] H. Akaike, Information theory and an extension of the maximum likelihood principle, in: Proc. 2nd Int. Symp. on Information Theory, 1973,
pp. 267–281.
[2] H. G. Willian, Econometrics Analysis, Prentice-Hall, 2000.
[3] R. Henry, I. Lu, L. Beightol, D. Eckberg, Interactions between CO2 Chemoreﬂexes and Arterial Baroreﬂexes, Am. Journal of Physiology
274 (43) (1998) H2177–H2187.
[4] W. R. Ressler, M. S. Waters, Female earnings and the divorce rate: a simultaneous equation model, Applied Economics 32 (2000) 1889–1898.
[5] F. Glover, G. A. Kochenberger, Handbook of Metaheuristics, Kluwer, 2003.
[6] P. Winker, M. Gilli, Applications of optimization heuristics to estimation and modelling problems, Computational Statistics and Data Analysis
47 (2) (2004) 211–223.
[7] M. Mitchell, An Introduction to Genetic Algorithm, MIT, 1988.
[8] H. Bozdogan, D. Haughton, Informational complexity criteria for regression models, Computational Statistics and Data Analysis 28 (51-76).
[9] P. Shi, C. L. Tsai, A note on the uniﬁcation of the akaike information criterion, J. R. Statist. Soc. B 60 (1998) 551–558.
[10] E. J. Bedrick, C. L. Tsai, Model selection for multivariate regression in small samples, Biometrics 50 (1994) 226–231.
[11] Y. Fujikoshi, K. Satoh, Modiﬁed AIC and Cp in multivariate linear regression, Biometrika 84 (3) (1997) 707–716.
[12] A. Gorobets, The optimal prediction simultaneous equations selection, Economics Bulletin 36 (3) (2005) 1–8.
[13] G. Kapetanios, Variable selection in regression models using nonstandard optimisation of information criteria, Computational Statistics and
Data Analysis 52 (1) (2007) 4–15.
[14] G. Kapetanios, Choosing the optimal set of instruments from large instrument sets, Computational Statistics and Data Analysis 51 (2) (2006)
612–620.
[15] C. Gatu, E. J. Kontoghiorghes., A branch and bound algorithm for computing the best subset regression models, J. Comput. Graph Statist. 15
(2006) 1–19.
[16] M. Hofmann, C. Gatu, E. J. Kontoghiorghes, Eﬃcient algorithms for computing the best subset regression model for large-scale problems,
Computational Statistics and Data Analysis 52 (2007) 16–29.
[17] P. Yanev, E. J. Kontoghiorghes, Eﬃcient algorithms for estimating the general linear model, Parallel Computing 32 (2006) 195–204.
[18] D. Gujarati, Basic Econometrics, McGraw Hill, 1995.
[19] J.-J. L´opez-Esp´ın, D. Gim´enez, Message-passing two steps least square algorithms for simultaneous equations models, in: PPAM, 2007, pp.
127–136.
[20] D. A. Belsley, Paring 3sls calculations down to manageable proportions, Computer Science in Economics and Management 5 (1992) 157–169.
[21] E. J. Kontoghiorghes, Parallel algorithms for linear models: Numerical methods and estimation problems, Advances in Computational Economics, 2000.

