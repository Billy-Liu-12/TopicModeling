Using Adaptive Agents for the Fault-Tolerant
Mobile Computing System
Taesoon Park, Jaehwan Youn, and Dongryung Kim
Department of Computer Engineering, Sejong University,
Seoul 143-747, Korea
tspark@sejong.ac.kr, {rivian, fishangel}@sju.ac.kr

Abstract. This paper presents a fault-tolerance scheme based on mobile agents for the reliable mobile computing systems. The mobility of
the agent is suitable to trace the mobile hosts in the system and the
intelligence of the agent makes it eﬃcient to support the fault-tolerance
services. The proposed scheme especially focuses on the adaptiveness
of the agent. The agents try to keep the failure-recovery cost and the
failure-free operation cost within a certain level, regardless of the handoﬀ frequency of the mobile hosts. They also try to balance the two costs.

1

Introduction

Fault-tolerance is an important design issue to build a reliable mobile computing
system and many fault-tolerance schemes have been proposed [2, 3, 5]. However,
the fault-tolerance of these schemes is mainly supported by the mobile support
stations of the system and hence these schemes have the following problems in
common: First, the information required for the recovery of mobile hosts is managed by the mobile support station, which may cause the high processing delay
of the support station. Second, for the eﬃciency of the recovery, the information
managed by one support station is transferred to the new support station as the
corresponding mobile host moves to the new area, which may cause the severe
hand-oﬀ delay. Third, if the recovery information is not migrated to reduce the
hand-oﬀ delay, the mobile host experiences a longer recovery delay in case of a
failure.
To solve these problems, we have suggested a mobile agent based faulttolerance scheme for the mobile computing system [4]. In this scheme, a stationary agent residing in each mobile support station site takes care of the recovery
information of mobile hosts so that the support station can concentrate on its
own tasks, such as the mobility handling and the communication of the hosts.
Also, a set of mobile agents for each mobile host take care of the migration of the
recovery information and hence the recovery information migration of a host can
be performed asynchronously with its hand-oﬀ. As a result, the fault-tolerance
service does not cause any unnecessary hand-oﬀ delay. Another notable point of
this scheme is that mobile agents can make a migration decision suitable for the
behavior of each mobile host.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 807–814, 2006.
c Springer-Verlag Berlin Heidelberg 2006

808

T. Park, J. Youn, and D. Kim

However, in [4], the structure of the cooperative agents servicing the faulttolerance and their interaction models are mainly discussed and not much attention is given to the migration strategy of the mobile agent carrying the recovery
information. For the eﬃcient fault-tolerance service, the migration decision of
the agent is very important since the frequent migration may cause the severe
failure-free operation cost and the lazy migration may cause the longer recovery
delay of the host. Hence, in this paper, a new migration strategy of the mobile agent carrying the recovery information is proposed. The proposed scheme
employs the adaptive agent which keeps evaluating the possible failure-recovery
cost and the failure-free operation cost as the behavior of the mobile host, such
as the hand-oﬀ frequency or the communication frequency, varies. Based on the
evaluation, the agent schedules its migration to balance the two costs within a
certain range.

2
2.1

Background
Mobile Computing System

A mobile host (MH) is an entity which executes the computation and communicates with another MH while traversing the system. In order to provide eﬃcient
and seamless services for MHs, the entire area covered by the mobile computing
system [1] is divided into a number of service areas called the cells and one mobile support station (MSS) per cell is employed. Main tasks of the MSS are the
location management and the seamless communication services for the MHs. For
these services, MSSs are connected with each other through the high speed wired
network; and when an MH leaves a cell and enters the next cell, two corresponding MSSs exchange information regarding the location and the communication
status of the MH. This procedure is called the hand-oﬀ. The computation performed by the processes of an MH is assumed to follow a piece-wise deterministic
model, in which a process can always produce the same sequence of states for
the same sequence of message-receiving events.
2.2

Checkpointing and Message Logging

Checkpointing is an operation to save the intermediate states of the processes
into the stable storage, so that the processes can restore the saved states and
resume the computation from the restored states when the system fails [3]. Figure 1.(a) shows the eﬀect of checkpointing. The horizontal arrow and the shaded
boxes in the ﬁgure denote the progress of a process, Pi , and its periodic checkpointing, respectively. When Pi fails, it can resume the computation from the
latest checkpoint, instead of restarting from the initial state, which is called the
rollback-recovery.
Message logging is the operation to save the incoming messages of a process
into the stable storage so that the process can re-execute the computation with
the logged messages and reproduce the exactly same states which have occurred
right before the failure [3]. Figure 1.(b) shows the eﬀect of message logging. The

Using Adaptive Agents for the Fault-Tolerant Mobile Computing System

809

rollback-recovery

Pi

xxx
xxx
xxx

xxx
xxx
xxx

xx
xx
xx

failure

X

(a) Checkpointing and Rollback-Recovery

Pi

Pj

Pk

xx
xx
xx
xx

xxx
xxx
xxx
xxxxxxxxx
xxx
xxxxxxxxx
xxxxxxxxx
xxxxxxxxx
xxxxxxxxx
xxxxxxxxx
xxxxxxxx
xxxxxxxxx
xxxxxxxx
xxxxxxxx
xxxxxxxx
xxxxxxxx
xxx
xxxxxxxx
xxx
xxxxxxxxxxx

xxx
xxx
xxxxxxxxxxx
xxxxxxxx
xxxxxxxx
xxxxxxxx
rollback-recovery
xxxxxxxx
failure
xx
xxxxxxxx
xx
xxxxxxxx
X
xxxxxxxxx
xx
xxxxxxxxx
xx
xxxxxxxxx
xxxxxxxxx
xxxxxxxxx
xxxxxxxxx

(b) Checkpointing and Message Logging

Fig. 1. Checkpointing, Message Logging and Rollback-Recovery

small black circle in Figure 1.(b) denotes the logging of each incoming message.
With the message logging, Pj can re-process the logged messages during the
recomputation, instead of receiving new messages, so that it can produce the
same computational states which have been occurred right before the failure. As
a result, the failure of Pj does not aﬀect the other processes.
When the checkpointing and the message logging are considered for the mobile
computing system, MSSs provide the stable storage since the storages of MHs are
very limited. However, the MH moves around the system and hence checkpoints
and message logs saved for an MH become dispersed as the MH moves over a
number of cells. To eﬃciently manage the checkpoint and the message log, many
approaches have been proposed [5].

3
3.1

Fault-Tolerance Service Based on Adaptive Agents
Basic Scheme

One common problem of existing schemes is to manage the checkpoint and the
message logs as one pack. As shown in Figure 1, when a process fails, it ﬁrst
restores its latest checkpoint and then re-processes the logged messages. Hence,
the checkpoint near the MH can help the early start of the recovery however
the logged messages would be used gradually as the recomputation proceeds.
Considering the heavy migration cost of the checkpoint and message log pack, it
is wiser to separately manage these two types of recovery information. We have
presented a basic design of mobile agent based recovery information management
scheme in [4].
In the proposed design, three types of agents are used: One is the stationary
agent, called a Recovery Agent (RA). For each MSS site, one RA is used to

810

T. Park, J. Youn, and D. Kim

temporarily manage checkpoints and message logs produced by the MHs visiting
the cell. The others are mobile agents, called the checkpointing agent (CPA) and
the log agent (LGA), each of which manages and makes the migration decision
of the latest checkpoint and the message logs, respectively. The CPA retrieves
the latest checkpoint from the RA and migrates to the local MSS site of the
corresponding MH. The LGA retrieves the message logs from the RA or it can
just record the log location to relieve the large burden of the log migration. Note
that the migration of CPA and LGA is asynchronous with the migration of the
corresponding MH.

Cell1
RA1

MSS1
LGAi
(5) Log_Retrieve

(5) Log_Retrieve

Cell2
RA2

MSS2

CPAi

xx
xx
xx
xxxxxxx
xxxxxxx
xx
(3) Checkpoint_Retrieve
MHi
xxxxxxx
xxxxxxx
xx
xxxxxxx
(4) Log_Retrieve
(4) Checkpoint x
xxxxxxx
x
x(1) Recovery
Delivery
Request
xxxxxxx x
xxxxxxx
RA3 (6) Log

Delivery

MSS3

(2) Recovery
Request

Cell3

Fig. 2. Recovery based on Cooperative Agents

When an MH fails, the agents cooperate with each other to recover the failed
MH. Figure 2 describes the recovery process taken by these agents. When M Hi in
Cell3 fails, the recovery agent, RA3 , takes the prime responsibility of M Hi ’s recovery. Hence, on the receipt of the recovery message from M Hi , RA3 , contacts
with CP Ai and LGAi to retrieve the latest checkpoint and the logged messages
for M Hi . On the request from RA3 , CP Ai replies with the latest checkpoint
and LGAi sends the log collection messages to the recovery agents recorded in
its visiting list. After collecting the logged messages from other recovery agents,
LGAi , forwards the logs to RA3 . For the early start of the recovery process,
RA3 starts the recovery of M Hi as soon as it receives the latest checkpoint from
CP Ai , without waiting for the completion of the log collection. Then, RA3 sorts
the logged messages in the message sequence order and sends them to M Hi .
3.2

Adaptive Agent Based Fault Tolerance Service

One advantage of using mobile agents for the fault-tolerance service is that it is
possible to design the eﬃcient and proper agent migration strategy for each MH.
Owing to a variety of hand-oﬀ rates, checkpointing intervals and communication
rates of the MHs, the uniform migration strategy applied to all the MHs may
result in the unpredictable and ineﬃcient performance. Hence, to maintain the
overhead caused by CPA and LGA migration to be in a predictable level, the
careful design of the agent migration strategy suitable for each MH is desirable.

Using Adaptive Agents for the Fault-Tolerant Mobile Computing System

811

• Distance-based scheme: One important performance measure of this
fault-tolerance service is the failure-recovery cost, which is the cost to retrieve
the latest checkpoint and the message logs. The expected failure-recovery cost
of M Hi , say CFi R , can be expressed as
N

log
i
i
CFi R = α ∗ DCP
A ∗ SCP A ∗ CN + β ∗ Σj=1 Dlogj ∗ Slogj ∗ CN ,

(1)

i
where DCP
A is the expected distance between M Hi and its CPA at the time
i
of a failure; SCP
A is the expected size of the CPA; CN is the network cost
i
i
and Slog
are
for an object of the unit size to move in the unit distance; Dlog
j
j
the expected migration distance and the expected size of each message log of
M Hi ; and Nlog is the expected number of logged messages to be migrated for
each failure-recovery. The values of α and β are the weights. Since for the fast
recovery, it is more important to retrieve the latest checkpoint than to collect
the message logs, as it is discussed before, more weights should be put on the
checkpoint retrieval.
Since our focus is not to analyze the performance but to select the major
factors to aﬀect the performance, we can simplify the failure-recovery cost as
i
the function of DCP
A , such as
i
CFi R = k ∗ DCP
A,

(2)

i
i
where k = SCP
A ∗ CN and it is assumed that the values of SCP A and CN are
constant throughout the execution of M Hi ; and all the weights are put on the
checkpoint retrieval, such that α = 1 and β = 0. Now, the system can maintain
the constant or predictable failure-recovery cost for M Hi by adjusting the value
i
of DCP
A . We call this scheme the distance-based scheme for the CPA migration.
To implement the distance-based scheme, a proper value of DCP A is ﬁrst selected
for the wanted level of CF R . When M Hi migrates, it increments its migration
counter; and it asks the RA for the migration of the CP A when the counter
reaches the predetermined value.

• Time-based scheme: Another important performance measure of this
service is the failure-free cost, which is the cost to migrate the CPA and the
LGA (with or without its message logs) during the failure-free operation of the
M H. Let CFi F be the expected failure-free cost of M Hi per unit time. Then,
CFi F can be obtained as
CFi F =

1
1
i
i
i
i
∗ DCP
∗ DLGA
∗ SLGA
∗ CN ,
A ∗ SCP A ∗ CN +
i
i
TCP
T
A
LGA

(3)

i
i
where TCP
A and TLGA are the time intervals between two consecutive migration
i
i
events of the CPA and the LGA, respectively; and DCP
A and DLGA are the
expected distances between M Hi and its CPA or LGA for each migration, rei
i
spectively. To simplify the equation, it is assumed that the values of SCP
A , SLGA
and CN are constant throughout the execution of M Hi ; and we also assume the
case that the LGA does not carry any message log. Under this assumption,

812

T. Park, J. Youn, and D. Kim

i
i
SLGA
<< SCP
A and hence the second term is ignored. Then, the failure-free
cost can be rewritten as

CFi F = k ∗

1
i
∗ f (TCP
A ),
i
TCP
A

(4)

i
i
i
where k = SCP
A ∗ CN and DCP A = f (TCP A ). Note that the value of DCP A is
expressed as a function of TCP A since the longer migration interval allows the
more hand-oﬀs of a MH.
Now, to maintain the constant and predictable failure-free cost regardless of
the various behaviors of MHs, the time-based scheme for the CPA migration
is suggested. In the time-based scheme, a proper time-out value, TCP A is ﬁrst
selected for the wanted level of CF F . The CPA queries the current location of
M Hi and migrates to the corresponding MSS site, whenever the time-out timer
expires. When the CPA moves, it calculates the moving distance and sets the
old
, where Told is the previous time-out
next timer value as the value to Told ∗ DDnew
value, Dnew and Dold are the current and the previous moving distances. As a
result, the constant CF F value can be managed.

• Adaptive scheme: However, when both of the failure-recovery cost and the
failure-free cost are considered together, it is easily noticed that the two notions
of time-based and distance-based schemes conﬂict with each other. When the
1
should
short value of DCP A is selected to reduce the CF R , the value of TCP
A
become larger, which causes the higher CF F value; and vice versa. Hence, when
the system wants to have low costs for both of the failure-recovery and the
failure-free operation, the CPA should take one performance measure ignoring
the other; or it should take a certain level of the costs in-between two wanted
values.
i
For example, suppose that M Hi wants the value of DCP
A to be d and the
i
i
i
value of TCP A to be t. Let CF R [d] and CF F [d] be the failure-recovery cost and
the failure-free cost when the distance-based scheme with the distance value
of d is applied for the CPA migration. Similarly, let CFi R [t] and CFi F [t] be the
costs when the time-based scheme with the time value of t is applied. Then, the
adaptive CPA tries to keep the failure-recovery cost to be α ∗ CFi R [d] + β ∗ CFi R [t]
and the failure-free cost to be β ∗ CFi F [d]+ α∗ CFi F [t], where α+ β = 1. Note that
when α = 1, the CPA chooses the constant failure-recovery cost; and when β = 1,
the CPA chooses the constant failure-free cost. Otherwise, the CPA chooses the
costs in-between the wanted ones.
To implement this adaptive migration strategy, the CPA basically follows the
time-based method and the MH assigns the wanted values of TCP A , DCP A , α
and β. The adaptive CPA ﬁrst performs the time based migration with the given
time-out value of TCP A . For the ﬁrst k migration, it observes the expected disE
tance between the CPA and the MH, say DCP
A , under the given TCP A and
E
sets the target level of the distance as α ∗ DCP A + β ∗ DCP
A . Then, for each
migration, the CPA examines the migration distance. If the migration distance
exceeds the target distance, it decreases the value of TCP A to reach the target distance. Since the adaptive CPA keeps adjusting the migration frequency

Using Adaptive Agents for the Fault-Tolerant Mobile Computing System

813

considering the expected recovery cost, the overall performance can be maintained within the expected level.

4

Performance Study

To measure the performance of the adaptive agent based fault-tolerance service,
a simulation study has been performed. We have simulated a mobile computing
system consisting of 100 mobile hosts and 1000 X 1000 rectangular cells [1]. One
mobile support station is assumed for each cell. A mobile host stays in a cell
for λ1h time units and then migrates to one of its eight neighbor cells. The host
communicates with another mobile host and the communication rate of each
mobile host is λm = 1/10. The checkpointing rate and the failure rate of each
mobile host are assumed to be λc = 1/1000 and λf = 1/10000. These rates are
assumed to follow the exponential distribution.

Fig. 3. Performance of the Adaptive Agents

814

T. Park, J. Youn, and D. Kim

Figure 3.(a) and (b) show the failure-recovery cost and the failure-free cost
of the schemes, respectively. As it is expected, the distance based scheme with
the distance value of 6, which is denoted by D-6, produces the constant failurerecovery cost while its failure-free cost is unpredictable. Also, the time based
scheme with the time value of 300, which is denoted by T-300, guarantees the
constant failure-free cost while its failure-recovery cost can be too high. The
performance of adaptive schemes with diﬀerent weights are denoted by A-α:β
in the ﬁgure. The performance results show that the adaptive CPA eﬀectively
adjusts its performance for the various hand-oﬀ rates.

5

Conclusions

In this paper, we have presented the adaptive agent based fault-tolerance scheme
for the reliable mobile computing system. The proposed scheme especially focuses on the adaptiveness of the agent which keeps the failure-recovery cost and
the failure-free operation cost within a certain level considering the importance
of the two performance measures. We also presented the simulation results supporting the eﬀectiveness of the adaptive agents.

Acknowledgments
This work was supported by the Korea Research Foundation Grant funded by the
Korean Government(MOEHRD)(KRF-2005-041-D00745) and also supported by
grant No. B1220-0401-0037 from the University Fundamental Research Program
of Ministry of Information & Communication in Republic of Korea.

References
1. Ayildiz, I.F., Ho, J.S.M.: On Location Management for Personal Communications
Networks. IEEE Communications Magazine (1996) 138–145
2. Neves, N., Fuchs, W.K.: Adaptive Recovery for Mobile Environments. Communications of the ACM, Vol. 40, No. 1 (1997) 68–74
3. Park, T., Woo, N., Yeom, H.Y.: An Eﬃcient Optimistic Message Logging Scheme for
Recoverable Mobile Computing Systems. IEEE Transactions on Mobile Computing,
Vol. 1, No. 4 (2002) 265–277
4. Park, T.: Mobile Agent based Fault-Tolerance Support for the Reliable Mobile Computing Systems. Lecture Notes in Computer Science, Vol. 3454 (2005) 173–187
5. Pradhan, D.K., Krishna, P., Vaiday, N.H.: Recoverable Mobile Environment : Design
and Trade-Oﬀ Analysis. Proc. of the 26th Int’l Symp. on Fault Tolerant Computing
Systems (1996) 16–25

