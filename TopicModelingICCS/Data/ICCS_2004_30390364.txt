Symbolic Polynomial Interpolation Using
Mathematica
Ali Yazici1 , Irfan Altas2 , and Tanil Ergenc3
1

3

Computer Engineering Department, Atilim University, Ankara - Turkey
aliyazici@atilim.edu.tr
2
School of Information Studies, Wagga Wagga - Australia
ialtas@csu.edu.au
Mathematics Department, Middle East Technical University, Ankara - Turkey
tanil@metu.edu.tr

Abstract. This paper discusses teaching polynomial interpolation with
the help of Mathematica. The symbolic power of Mathematica is utilized
to prove a theorem for the error term in Lagrange interpolating formula.
Derivation of the Lagrange formula is provided symbolically and numerically. Runge phenomenon is also illustrated. A simple and eﬃcient
symbolic derivation of cubic splines is also provided.

1

Introduction

Students use software tools such as Mathematica or Maple to test mathematical ideas and access the Internet to develop an awareness of the wider learning
environment. Kaput [1] has suggested that the mathematical thinking ability
to recognize translation from one representation of a function to another can be
assisted by the use of computers. The use of a symbolic algebra package in combination with the Internet can develop new strategies and a deeper understanding
of many mathematical concepts.
A numerical treatment of Hermite interpolation is studied in [2] using Mathematica. In this paper, we demonstrate the symbolic use of Mathematica in
teaching interpolation concepts in a numerical computing course oﬀered to sophomore Engineering students at Atilim University. In addition to 3 hours/week
theoretical lectures, practical laboratory sessions are held (2 hours/week) for a
group of 20 students to support the theory.
In Section 2 polynomial interpolation and Lagrange interpolating polynomials are discussed. Mathematica instructions are used to derive polynomials and
the error formula for the linear case in Sections 2.2 and 2.3 respectively. Runge’s
phenomenon is demonstrated numerically with equally spaced nodes in Section
2.4. Use of the Chebyshev nodes as interpolation points are displayed in Section 2.5. Finally, Section 3 is devoted to the derivation of piecewise cubic spline
interpolation symbolically.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 364–369, 2004.
c Springer-Verlag Berlin Heidelberg 2004

Symbolic Polynomial Interpolation Using Mathematica

2

365

Polynomial Interpolation

Let xo , x1 , ..., xn be a set of n + 1 distinct real or complex numbers on [a, b], and
let yo , y1 , ..., yn be associated function values. Then the polynomial p(x) is said
to interpolate f (x) at these points if p(xk ) = f (xk ), k = 0, 1, ..., n.
2.1

Lagrange Form of the Interpolating Polynomial

Lagrange form of interpolating polynomial [3] is based on the polynomials
j

Ln,j (x) =

(x − xi )
,
(x
j − xi )
i=0

i = j,

j = 0, 1, . . . n

(1)

where xi ’s are interpolation nodes in [a, b] . For each j, Ln,j (x) is a polynomial
of degree n and has the property
Ln,j (xi ) =

1 if i = j
0 otherwise

(2)

We will write Ln,j (x) simply as Lj (x) when there is no confusion as to its
n
degree. It is easy to see that polynomial p(x) = k=0 Lk (x)f (xk ) has degree n
and satisﬁes the interpolation condition p(xj ) = f (xj ), j = 0, 1, . . . n.
If f n+1 (x) is continuous on [a, b], then interpolating polynomial
p(x)approximates f (x) for each x in [a, b] with an error
e(x) = f (x) − p(x) =

f n+1 (c)
W (x)
(n + 1)!

(3)

where W (x) = (x − xo )(x − x1 ) . . . (x − xn ) and c is a number in (a, b).
The function W (x) plays an important role in determining the size of the
error bound. Among all possible choice for distinct xj ’s j = 0, 1, . . . , n in [a, b] =
[−1, 1], maximum of W (x) is minimized if xi ’s are the roots of the (n + 1)st
degree Chebyshev polynomial.
2.2

Session: Lagrange Interpolation with Equally Spaced Points

A Mathematica session is set up to demonstrate the theoretical and practical
aspects of interpolation in a step wise manner. In this paper only a part of the
experiments are discussed. Complex coding and programming are avoided for
educational purposes at the cost of computational eﬃciency. Firstly, the error
formula (3) given above will be proven for the linear case using Mathematica.
The Mathematica instructions to prove the result is given below:
– Deﬁne the point set X for xo and x1 , and compute length of X = m = n+1
In[1]:= X = {xo, x1}, In[2]:= m = Length[X] Out[2]= 2

366

A. Yazici, I. Altas, and T. Ergenc

– Deﬁne a general function F and deﬁne Lj ’s symbolically in product form
In[3]:= F [x− ] := f [x]
In[4]:=L[j− , x− ] := P roduct[If [i == j, 1, (x − X[[i]])/(X[[j]] − X[[i]]),
{i, 1, m}]
– Compute, say, L[2, x] and display the interpolating polynomial p1 [x]
o
In[5]:= L[2, x] Out[5]= xx−x
1 −xo
In[6]:= p1 [x] := F [x0 ]L[1, x] + F [x1 ]L[2, x]
– Deﬁne a special function g[t]. Here, x, xo , and x1 are constants with respect
to t, and g[t] is zero at these points. Also, assume that x0 < x < x1
(t−x0 )(t−x1 )
In[7]:= g[t− ] := f [t] − p1 [t] − e1[x] (x−x
0 )(x−x1 )
– Compute the ﬁrst derivative of g with respect to t
In[8]:= g [t]
(t−x0 ))e1[x]
(t−x1 )e1[x]
f [x1
o]
Out[8]= − (x−x
− (x−x
− xfo[x
−x1 − −xo +x1 + f [t] − p1 [t]
0 )(x−x1 )
0 )(x−x1 )
– Compute the second derivative of g with respect to t at c1
In[9]:= g [z] Out[9]= − (x−x2e1[x]
+ f [z]
o )(x−x1 )
– Applying Rolle’s theorem to g[t] on [xo , x] to ﬁnd a value do in (x0 , x) so
that g [do ] = 0. A second application of Rolle’s theorem to g[t] on [x, x1 ]
produces a value d1 in (x, x1 ) so that g [d1 ] = 0. Observe that g [t] is zero at
do , and d1 . Therefore, again by Rolle’s theorem (applied to g [t] on [do , d1 ])
we ﬁnd the value c1 for which g [c1 ] = 0 which ends the proof.
In[10]:= Solve[g [c1 ] == 0, e1[x]]
Out[10]= {{e1[x] → 12 (x − xo )(x − x1 )f [c1 ]}}
This experiment encourages the students to utilize Mathematica for some
constructive proofs of simple theorems and for deriving required identites in the
method.
2.3

Session: Deriving Lagrange Interpolation Symbolically with
Mathematica

In this section, Lagrange interpolating polynomial p2 will be derived symbolically
for n=2 using 3 interpolation points.
– Deﬁne the point set X for the three (m=n+1) points xo , x1 , and x2
In[1]:= X = {xo, x1, x2} Out[1]= {xo, x1, x2}
In[2]:= m=Length[X] Out[2]= m=3
– Deﬁne a general function F and Lj ’s symbolically in product form
In[3]:= F [x− ] := f [x]
In[4]:= L[j− , x− ] := P roduct[If [i == j, 1, (x − X[[i]])/(X[[j]] − X[[i]]),
{i, 1, m}]
– Display L[1,x] symbolically
1 )(x−x2 )
In[5]:= L[1,x] Out[5]= (x(x−x
0 −x1 )(x0 −x2 )
– Form the quadratic interpolating polynomial p2 symbolically
In[6]:= p2[x− , X− ] = Sum[F [X[[i]]]L[i, x], {i, 1, m}]
(x−x0 )(x−x2 )f [x1]
(x−x0 )(x−x1 )f [x2]
1 )(x−x2 )f [x0]
Out[6]= (x−x
(x0 −x1 )(x0 −x2 ) + (−x0 +x1 )(x1 −x2 ) + (−x0 +x2 )(−x1 +x2 )
Out[6] is the quadratic interpolating polynomial as an approximation to f.

Symbolic Polynomial Interpolation Using Mathematica

2.4

367

Session: Runge’s Function Illustrated

The polynomial interpolation problem has a unique solution. However, use of
equally spaced interpolation points with polynomials of high degree may cause
divergence. This is known as Runge’s phenomenon and illustrated below.
1
Consider the function F (x) = 1+25x
2 over the interval [-1,1]. The interpolating polynomials p2[x], and p8[x] with 3, and 9 equally spaced points respectively,
in [−1, 1] are formed.
– Deﬁne the function and the interpolation points
1
In[1]:= F [x− ] := 1+25x
2 , In[2]:= xo = −1; x1 = 0; x2 = 1
In[3]:= X = {xo, x1, x2} Out[3]= {−1, 0, 1}
In[4]:= m = Length[X] Out[4]= 3
– Form Lj ’s symbolically in product form and compute p2[x].
In[5]:= L[j− , x− ] := P roduct[If [i == j, 1, (x − X[[i]])/(X[[j]] − X[[i]]),
{i, 1, m}] In[6]:= p2[x− , X− ] = Simplif y[Sum[F [X[[k]]]L[k, x], {k, 1, m}]
2
Out[6]= 1 − 25x
26
– Display p8[x]. Intermediate steps are similar and omitted.
Out[7]= 1.−1.77636x10−15 x−13.20303x2 −2.13163x10−14 x3 +61.36721x4 +
7.10543x10−14 x5 − 102.81501x6 + 4.973799x10−14 x7 + 53.68930x8
Now, students can obtain a plot of these polynomials to observe the divergence
with higher degree polynomials.
2.5

Session: Lagrange Interpolation with Chebyshev Points

A remedy to Runge’s phenomenon is to employ unequally spaced Chebyshev
nodes as interpolation points as discussed above. Now, Lagrange interpolating
polynomials will be formed at the Chebyshev nodes in a similar fashion.
– Compute the quadratic chebp2 at the Chebyshev nodes, ck .
In[10]:= m = 3
In[11]:= F or[k = 1, k ≤ m, k + +, c[k] = −Cos[P i(2k − 1)/(2m)]];
In[12]:= X = T able[c[k], k, 1, m] Out[12]= {−0.866025, 0., 0.866025}
In[13]:= L[j− , x− ] := P roduct[If [i == j, 1, (x − X[[i]])/(X[[j]] − X[[i]]),
{i, 1, m}]
In[14]:= chebp2[x− , X− ] = Simplif y[Sum[F [X[[k]]]L[k, x], {k, 1, m}]]
Out[14]= 1 + 0.x − 1.26582x2
– chebp8 is computed in a similar fashion.
Out[15]=1.+0.x−9.513432 −8.88178x10−16 x3 +31.3482x4 −1.95399x10−14 x5
− 40.3504x6 − 6.21725x10−15 x7 + 17.6203x8
– Finally, a plot the graph of F, p4, and chebp8 is given to illustrate the
Runge’s phenomenon (Fig.1) and use of Chebyshev nodes
In[17]:=P lot[F [x], p4[x, X], chebp8[x, X], x, −1, 1,
P lotRange− > All, AxesLabel− > x, y, T icks− > Automatic,
AxesOrigin− > 0, 0]
Observe that, Chebyshev nodes produces a good approximation and Lagrange method with equally spaced points seems to diverge.

368

A. Yazici, I. Altas, and T. Ergenc

y
F
p8
chebp8

1

0.5

-1

-0.5

0.5

1

x

-0.5

-1

Fig. 1. Plot of Runge function together with p8, and chebp8

3
3.1

Cubic Splines
Background

As shown above, high degree interpolating polynomials may produce divergent
approximations. To alleviate these diﬃculties, piecewise polynomial interpolation is provided [4], [5].
In the sequel, a natural cubic spline over two subintervals using 3 data points
will be derived symbolically using Mathematica.
3.2

Session: Deriving Cubic Splines with Mathematica

– Consider a set of three points (ti , yi ), i = 1, 2, 3. The required natural cubic
spline is deﬁned by two separate cubic polynomials p1 and p2 in [t1 , t2 ] and
[t2 , t3 ].
In[1]:= p1[t− ] := a + bt + ct2 + dt3 , In[2]:= p2[t− ] := e + f t + gt2 + ht3
– A total of 8 parameters (a,b,c,d,e,f,g, and h) are to be determined. Using
the interpolation condition at the end points, we obtain 4 equations
In[3]:= eq1 = y1 == (a + bt[1] + ct[1]2 + dt[1]3 )
In[4]:= eq2 = y2 == (a + bt[2] + ct[2]2 + dt[2]3 )
In[5]:= eq3 = y3 == (e + f t[2] + gt[2]2 + ht[2]3 )
In[6]:= eq4 = y3 == (e + f t[3] + gt[3]2 + ht[3]3 )
– Requiring the ﬁrst derivative to be continuous at t2 gives an additional equation as follows:
In[7]:= eq5 = p1 [t[2]] == p2 [t[2]] Out[7]= b + 2ct[2] + 3dt[2]2 ==
f + 2gt[2] + 3ht[2]2
– Requiring the second derivative to be continuous at t2 gives
In[8]:= eq6 = p1 [t[2]] == p2 [t[2]] Out[8]= 2c + 12d == 2g + 12h

Symbolic Polynomial Interpolation Using Mathematica

369

– Finally, by the conditions of natural cubic spline
In[9]:= eq7 = p1 [t[1]] == 0 Out[9]= 2c + 6d
In[10]:= eq8 = p2 [t[3]] == 0 Out[10]= 2g + 18h
– Cubic splines can be easily determined by solving the linear system of 8
equations in 8 unknowns using Mathematica’s Solve function
In[11]:= sol = Simplif y[Solve[eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8,
{a, b, c, d, e, f, g, h}]]
Out[11]={{a− > 2y1−y2, b− > 12 (−y1+y3), c− > − 34 (y1−2y2+y3), d− >
1
1
4 (y1 − 2y2 + y3), e− > 6y1 − 9y2 + 4y3, f − > 2 (−13y1 + 24y2 − 11y3), g− >
9
1
4 (y1 − 2y2 + y3), h− > 4 (−y1 + 2y2 − y3))}}

4

Conclusions

In this paper, use of Mathematica software is demonstrated for teaching polynomial interpolation problem in an educational setting. It has been shown that,
symbolic packages are quite eﬀective in deriving the required formula, and even
proving some simple constructive theorems as shown to prove the error term of
the Lagrange interpolation for the linear case.
Our experience reveals that students learned the concepts better and deeper.
At the same time, this approach and the symbolic power of Mathematica provided an interactive research environment for the students to develop new skills
and ideas.
With this approach, students may grasp important and diﬃcult concepts
easily in a laboratory environment.
The symbolic power provided by Mathematica, has provided a platform to
discuss the fundamental and diﬃcult issues related to the interpolation problem
and the cubic splines.
The authors are involved in the design of an interactive tool to put all the
ideas together in an integrated way to support teaching of numerical methods.

References
1. Kaput, J.: Technology and Mathematics Education, in Handbooks of Research on
Mathematics Teaching and Learning (Ed. Grouws, D.A.), MacMillan, New York
(1992) 515-556.
2. Reiter, C.A.: Exploring Hermite Interpolation with Mathematica, Primus, 2, 2(1992)
173-182.
3. Mathews, J.H.: Numerical Methods For Computer Science, and Mathematics,
Prentice-Hall International (1987).
4. De Boor, C.: A Practical Guide to Splines, Springer Verlag, (1978).
5. Heath, M.T.: Scientiﬁc Computing: An Introductory Survey, McGraw-Hill International Editions (1997).

