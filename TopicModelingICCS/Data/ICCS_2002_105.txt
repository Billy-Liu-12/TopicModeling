The Software Architecture of a Problem Solving
Environment for Enterprise Computing
Xu Jungang, Wang Hongan, Dai Guozhong
Chinese Academy of Sciences, Institute of Software,
Intelligence Engineering Lab., P.O. 8718, 100080 Beijing, China
xujungang@sina.com,wha99@sina.com,
guozhong@admin.iscas.ac.cn

Abstract. Problem Solving Environment (PSE) is a new and diverse area of
research, and till now it resists simple universally accepted definitions. In brief,
PSE is a complete and integrated computing environment in which new
application can be constructed, compiled and executed. This paper describes the
concept and software architecture of a PSE for Enterprise computing (E-PSE).
An E-PSE is developed to provide transparent access to heterogeneous
distributed computing resources in one enterprise, and is to improve research
productivity by making it easier to construct, compile and run computer
applications so that the enterprise can achieve more advanced economic benefit
as soon as possible. E-PSE includes four modules: Visual Enterprise Modeling
System, Visual Application Construction Environment, Application Wrapping
& Integrating Tool and Application Runtime Environment. An application of EPSE in the oil-refining enterprise is presented. Related work about PSE is also
described.

1 Introduction
The current advances in networking protocols (including ATM and fast Ethernet),
software development tools, and emerging WWW technologies have enabled the
development of a cost-effective, high performance distributed computing
environment, network-based computing [1]. But, the available software tools for a
high-performance computing environment still require detailed understanding of the
underlying architecture and components of application. Writing a parallel and
distributed program overwhelms most of the users due to the complexity of
communication and synchronization issues [2]. Furthermore, information
technologies have almost entered into every field, but it is impossible to require
scientists and engineers in each field to learn computer knowledge and programming.
In order that scientists and engineers can devote themselves to researches of their own
field, and improve efficiency of research work and achieve advanced research
production, it is necessary to develop an application development environment for
their field. This is the problem which computer experts and experts in the other field
This

research is supported by major research issue (79931000) of National Natural Science
Foundation of China.

face. As advanced programming language replaced the original machine language
owing to shielding the computer hardware, it is believed that there must exist one tool
that can shield computer hardware and software to replace current complicated
programming work, and can be used to develop application for any field. According
to this problem, computer experts have done much research work. Now we have had
the answer, which is to develop Problem Solving Environment for each field.
In engineering application field, there also exists the problem that enterprise
supervisors and engineers don’t know much about information technologies. How to
apply information technologies into enterprise better, and how to make use of the
advantages that enterprise personnel are very familiar with the enterprise business,
which are the problems that computer experts and enterprise engineers need to solve.
With the development of global economy, the traditional business mode of enterprise
is increasingly confronted with the challenge of market globalization. Day after day
people are realizing the importance that information technologies can reconstruct
traditional enterprise business. And enterprise must organize and regulate production
quickly, carry out the whole optimization of business process, and improve the
reactivity and competition capability so that it can stand at an advantageous station in
market competition, and achieve more economic benefit. So, to develop PSE for
enterprise computing is very necessary.
According to one of the applications of PSE in engineering field, this paper puts
forward the concept of PSE for Enterprise computing (E-PSE), and describes its
features and software architecture. E-PSE includes four modules: Visual Enterprise
Modeling System (VEMS), Visual Application Construction Environment (VACE),
Application Wrapping & Integrating Tool (AWIT) and Application Runtime
Environment (ARE).
This paper is organized as follows. Section 2 presents the concept, main purpose
and features of E-PSE. Section 3 describes the software architecture of E-PSE and
modules that E-PSE includes. Section 4 describes an application of E-PSE in the oilrefining enterprise. Section 5 introduces some related work. Section 6 contains
conclusions and prospects.

2 The Concept and Features of E-PSE
According to one of applications of PSE in engineering field, this paper brings
forth the concept of E-PSE. E-PSE is defined as follows, “E-PSE is one computerintegrated platform for enterprise computing, and it is a complete and integrated
Problem Solving Environment in which enterprise application system can be
constructed, compiled and executed. It provides various computing tools that can
solve problems existed in enterprise, which make supervisors and engineers of an
enterprise keep away from the ignorance of computer technologies and devote all
themselves to product development, business process management and improvement.
E-PSE is mainly used for modeling and simulation, decision-making supporting,
industrial process management.”
The main purpose of E-PSE is to provide a model-driven and component-based
application integration and development environment. Firstly, through enterprise

business process and application modeling, E-PSE can implement the seamless
integration from enterprise business process to enterprise application, and support the
integration of existing enterprise applications and development of new enterprise
applications. Secondly, E-PSE provides a set of wrapping and integrating tools for
existing and legacy applications to take full advantage of existing resources and
protect previous investment. Thirdly, E-PSE provides a component-based application
development method. One application can be represented as some components that
can realize certain business logic, and described as application flow graph. Fourthly,
E-PSE provides a set of component repository for certain applications, and the
component repository can be extended at any time. Furthermore, the model-driven
and component-based application integration and development method provided by
E-PSE meets the requirements of business process continuous improvements of
enterprise. In E-PSE, the business model describes enterprise business process, and
the application model describes the implementing method of an application. When
business process changes, the only thing to do is to change the components or the
links between the corresponding components, then the change of the application can
be implemented, which diminishes the influences of changes of business process on
applications as possible.
E-PSE has main features as follows: 1) It can make computer resources (including
computer hardware, networks and legacy systems) in one enterprise get used
sufficiently. 2) It can fit the changes of business object of the enterprise, including the
changes of business process and improvement of technical implementation. 3) It can
relieve supervisors and engineers from tedious computer application technologies and
make them concentrate on new management concepts, optimal business practice and
process technology, which can improve production efficiency to the maximum extent.
4) It is not necessary to program for developer to construct new application system,
what he needs to do is just to transfer his thoughts into new application system in EPSE, and to improve it in the future continuously.

3 The Architecture of E-PSE
E-PSE is composed of four modules: Visual Enterprise Modeling System (VEMS),
Application Wrapping & Integrating Tool (AWIT), Visual Application Construction
Environment (VACE) and Application Runtime Environment (ARE). VEMS is used
to build and modify enterprise models. AWIT wraps third party applications, standard
component repository and legacy systems into CORBA components, and places them
into Component Repository in VACE. VACE parses the enterprise model and
constructs the corresponding application model and then utilizes existing software
components in Component Repository to construct new application system, or
improve existing system. Once a new application is completed by VACE, and then it
is delivered to ARE and is scheduled to run on distributed computer resources. The
architecture of E-PSE is illustrated in Fig. 1.

3.1 VEMS
The main function of VEMS is to build and modify enterprise business models, it
consists of two parts: Modeling Tool and Reference Model Repository. We adapt
ARIS (Architecture of integrated Information Systems) Toolset as Modeling Tool,
which was published by IDS Scheer AG Corp. in Germany. ARIS modeling concept
keeps ahead of the world, which was first brought forth by Prof. Scheer in 1992 (see
Scheer, Architecture of integrated Information Systems, 1992). It provides integrated
methods to represent one enterprise through 5 kinds of views: Function view, Data
view, Organization view, Process view and Product/Service view.

Executor

Modeling
Tool

Reference
Model Repository

Business models

VEMS

Application models
Configuration Tool

Component Repository

New
applications

VACE

Scheduler

Resources
Performance
Database

ARE

AWIT

Third
part
applications

Standard component repository

Legacy
systems

Fig. 1. The software architecture of E-PSE

When we are building enterprise business model, we usually look for similar
model in Reference Model Repository first, and then modify them to the required
model, it is not necessary to build them from scratch. After customizing one reference
model into one enterprise’s own model, the enterprise can adjust the customized

model according to the changes of market requirements. Reference Model Repository
is based on the analysis of a lot of successful enterprise paradigms and is a kind of
knowledge base that collects the experience of many experts in the corresponding
industry. Reference Model Repository describes the specialized requirements of one
industry, and so it has comprehensive instructional significance for enterprise
requirements definition and other aspects in that industry. The enterprise feedback
information and customer questionnaire make clear that using reference models can
decrease workload of defining enterprise requirements dramatically.
The changeability of market and the development of information technologies are
the prime mover that urges enterprises to improve their own business process. To
improve one enterprise business process needs to continuously improve the existing
information system and build a new information system. On the contrary, to improve
the existing information system also needs to optimize the corresponding business
process, even reengineering the corresponding business process. To create new
business information system also needs to build the corresponding business processes
model. There are two kinds of enterprise business models: AS-IS model and TO-BE
model. AS-IS model describes the current situation of enterprise business, and TO-BE
model describes the future situation of enterprise business after continuous
improvements. In order to achieve the goal of enterprise business process
improvements, it needs to implement the conversion of the enterprise business model
from AS-IS model to TO-BE model, and then improve the existing information
system or build a new application. So, the first task of planning and developing
application is to build the corresponding business model.
3.2 AWIT
The function of AWIT is to wrap and integrate existing legacy systems, standard
component repository and third part applications into new application components,
and place them into Component Repository in VACE so that VACE can use them to
construct new applications.
AWIT adopts CORBA and XML technologies to wrap existing and newly built
components. Firstly, AWIT can be used to wrap a legacy system into a CORBAcompliant component, and then it is placed into the CR. A complete legacy system
may be wrapped as a single component, or it may be divided and wrapped as a series
of smaller components on assumption that the internal structure of the system is
known [3]. Wrapping a legacy system into a CORBA object is one kind of wrapping
method, which provides convenient interfaces for client to access these objects. The
advantage of this method is that the client needn’t know actual implementation on
server besides the interface. Wrapping can be realized in multi-levels: data, individual
module, sub-system and system [4]. After being wrapped into a CORBA object, the
legacy application can be reused in form of component in the heterogeneous and
distributed computing environment. Secondly, AWIT can integrate or wrap the third
party applications, and this needs to negotiate with the third party software provider
on related integration matters. After the two parties come into terms, the general
adopted method is to convert the API of the third party application into the API of the
new application, or change the process of dataflow and workflow in order to

exchange information among non-compatible applications. Finally, using XML can
simplify the wrapping process. General data format that XML defines allows
customer to denote, process and map information among different applications,
platforms and interfaces, while these aspects are very critical during the course of
processing legacy systems and third party applications. The potential value of XML in
integrating existing systems has been paid attention to.
3.3 VACE
VACE includes two parts: Component Repository (CR) and Configuration Tool.
The main function of VACE is to integrate components that correspond to the
business model into a new application by parsing the enterprise business model and
utilizing Configuration Tool. At the same time, VACE provides the interfaces with
real-time database and relative database for applications to realize data accessing.
Component Repository. Component Repository is a warehouse that stores all kinds
of components, mainly including graph, software component and sub-system. Graph
include all kinds of drawings that is processed through special processing; software
component is one basic software object such as COM object, CORBA object, Java
Bean and so on, which has its own interface describing file, attributes, methods and
events; sub-system is system resources that consist of some kinds of software
components. Users can operate Component Repository in the same way as operating
database, such as retrieving component that has special function, adding and deleting
corresponding component and etc.
Configuration Tool. Configuration Tool is a visual component composition tool, it
makes users create and edit application through composing components. In active
editor area, a component is represented as a clickable and draggable graphical icon,
each such icon includes component name and a set of markers for logical ports. The
user can select new components from Component Repository and add them into the
application sketch, then link them into one application flow graph. In a graph-based
programming environment, an application is defined as a directed graph where nodes
denote one component and links denote communication and synchronization between
nodes. Configuration tool mainly include key modules as follows:
x Project manager
x Drawing tool
x Control manager
x Real-time database manager interface
x Script editing environment
x Report form defining environment
x Variable manager
x Page editing interface
x Control network interface
Fig. 2 shows the windows of Configuration Tool. Project manager implements the
operations of creating, deleting and updating of one project. Drawing tool supports

familiar drawing and rendering methods. Control manager calls the interface of
system registration form, and it can make controls visually display in page editing
interface. If necessary, use real-time database manager interface to connect with realtime database manager. Script editing environment is organized with the format of
object, and it provides the method of editing control logic. Report form defining
environment can define format and content of real-time report form, which is
managed by Project manager, and executes in real-time database manager. Variable
manager is an independent module, and it can be installed and published
independently, we can use it to execute data gathering and physical variable
configuration. Page editing interface provides one blank template, on which we can
build application flow graph to construct a new application. Configuration tool can
define data source for data gathering and publication through calling Control network
interface.

Fig. 2. The windows of Configuration Tool

3.4 ARE
The main function of ARE is to maintain distributed computable resources of
enterprise, and schedule applications constructed by VACE so that they can run on
these resources.
Computable resources in distributed heterogeneous system should be registered in
Resources Performance Database before they are used. Resources Performance
Database maintains information about these resources. The information mainly

includes resources attributes and parameters [2][3]. These attributes are grouped into
two parts˖1) Static attributes, i.e. Host name, IP address, Architecture type, OS
Type, CPU speed, Hard disk and Memory size, Number and type of available network
interface, etc.; 2) Dynamic attributes, i.e. recent load measurement, available memory,
point-to-point network latency, available network bandwidth, etc.
The Scheduler is the most important part of the ARE. It interprets the application
constructed by VACE and assigns the current best available resources for running the
application in order to minimize the total execution time. The scheduling algorithm
computes the predicted time of each component and selects the current best available
resources within the enterprise networks. The scheduling decision is based on
software and hardware requirements, location and configuration of resources, up-todate machine/network loads.
Once the scheduling decision is completed, the application is delivered to the
Executor and runs on hardware under the control of the Executor.

4 An Application of E-PSE in the Oil-refining Enterprise
Supported by one National Research Project of China, we utilize the model-driven
and component-based method to implement the planning and development of some
information systems in an oil-refining enterprise. According to process enterprise
automation chain in ISO specification and the whole framework of the oil-refining
enterprise, we present the reference models of the oil-refining enterprise. We first use
Modeling Tool to build the business models of the demonstrated enterprise mentioned
above, and then refine the reference business models that fit oil-refining enterprise
from these models. These reference models are helpful for other oil-refining
enterprises to build their own business models, and then base on these models,
enterprises can use Configuration Tool to improve existing information applications
or create new information applications, such as applications that can monitor or
distribute process data generating during the production process, and etc. The
practicability of these reference models needs proving and improving further in the
other oil-refining enterprises in the future.

5 Related Work
PSEs have important significance to the research of each field, so researchers all
around the world research PSE in different aspects, such as its infrastructure, reusable
components, PSE for special field, or technologies used in PSEs, including distributed
collaborative work, visualization, artificial intelligence and so on. The current
advances in high-speed networks and WWW technologies have made network
computing a cost-effective and high-performance computing environment, which
provide more extensive foundation for researching on PSEs.
The current concept of a PSE has its origins in an April 1991 workshop funded by
the US National Science Foundation [5][6]. The workshop found that the availability
of high performance computing resources, coupled with advances in software tools

and infrastructure, made the creation of PSEs for computational science a practical
goal, and that these PSEs would greatly improve the productivity of scientists and
engineers. This is even truer today with the advent of web-based technologies, such as
Java, CORBA and XML for accessing remote resources and sharing information.
Since the 1991 workshop, PSE research has been mainly directed at implementing
prototype PSEs and at developing the software infrastructure or “middleware” for
constructing PSEs. Initially, many of the prototype PSEs that were developed focused
on linear algebra computations [7] and the solution of partial differential equations
[8]. More recently prototype PSEs have been developed specifically for science and
engineering applications. More generic infrastructure for building PSEs is also under
development ranging from fairly simple RPC-based tools for controlling remote
execution [9] to more ambitious and sophisticated systems such as Legion [10] and
Globus [11] for integrating geographically distributed computing and information
resources. The Virtual Distributed computing Environment (VDCE) developed at
Syracuse University [12] is very similar to E-PSE architecture described in section 3.
However, VDCE has not modeling module for enterprise, which is more suitable for
computing science.
In China, research projects on PSE aren’t so many as those in other countries,
especially in field. We wish our research could facilitate the development of
researching on PSE for engineering field.

6 Conclusions and Prospects
In this paper, we present the concept and the software architecture of E-PSE. EPSE can relieve supervisors and engineers of enterprise from tedious computer
application technologies and make them concentrate on new management concepts,
optimal business practice and process technologies, which can improve production
efficiency to the maximum extent. This is the main advantage of E-PSE.E-PSE is
composed of four modules: VEMS, AWIT, VACE and ARE.
We have put E-PSE into practice in an oil-refining enterprise in China, and its
effects are very remarkable. But, due to various causes, the theory and method about
E-PSE are just put into practice in enterprise in part, it is expected that E-PSE would
be further popularized and applied in enterprise in the future. And we’ll improve these
theories and methods further.
If one enterprise wants to keep its invincible position in the situation of more and
more intense market competition and globalization tide, it must adjust its business
process according to the changes of the market in time; it is a continuously changing
course. E-PSE adapts a model-driven and component-based software development
method, which provides technical support for continuous improvements of enterprise
business process, and can meet the requirements of high-speed developing
information technologies that the enterprise faces nowadays. This method is a major
goal and an inevitable trend of the researches on software development methods and
applications. Consequently, researches on E-PSE are very significant and important
for the development of the enterprise, and the application prospects of E-PSE are also

very bright, and it is sure that E-PSE can bring considerable economic benefits and
immeasurable value to the enterprise in the future.

References
1 Panda, D. K., Ni, L. M.: Special Issue on Workstation Clusters and Network Based
Computing. Journal of Parallel and Distributed Computing, 40 (1997) 1-3.
2 Hariri, S., Topcuoglu, H., Furmanski, W., Kim, D., Kim, Y., Ra, I., Bing, X., Ye, B., Valente
J.: Problem Solving Environments. IEEE Computer Society Press (1997).
3 Walker, D. W.: The Software Architecture of a Distributed Problem Solving Environment.
Computer Sciences, 10 December (1999).
4 Otte, R., Patrick, P., Roy, M.: CORBA tutorial, Shixian Li., first edition. Tsinghua Press
Beijing (1999) (in Chinese).
5 Gallopoulos, E., Houstis, E. N., Rice, J. R.: Computer as Thinker/Doer: Problem-Solving
Environments for Computational Science. IEEE Computational Science and Engineering,
Vol. 1 (2) (1994) 11-23.
6 Gallopoulos, E., Houstis, E. N., Rice, J. R.: Workshop on Problem-Solving Environments:
Findings and Recommentations. ACM Computing Surveys, Vol. 27(2) (1995) 277-279.
7 Casanova, H., Dongarra, J. J.: NetSolve: A Network-Enabled Server for Solving
Computational Science Problems. Int. J. Supercomputing Appl., Vol. 11(3) (1997) 212-223.
8 Houstis, E. N., et al.: Parallel ELLPACK Elliptic PDE Solvers. Intel Supercomputer Users
Group Conference, Albuquerque (1995).
9 Arben, P., Sprenger, C., Luthi, H. P., Vogel, S.: SCIDDLE: A Tool for Large-Scale
Distributed Computing. Technical Report 213, Institute for Scientific Computing, ETH
Zurich (1994).
10 Grimshaw, A. S., Nguyen-Tuong, A., Lewis, M. J., Hyett M.: Campus-Wide Computing:
Early Results Using Legion at the University of Virginia. Int. J. Supercomputing Appl., Vol.
11(2) (1997) 129-143.
11 Foster, I., Kesselman, C.: GLOBUS: A Meta-computing Infrastructure Toolkit. Int. J.
Supercomputing Appl., Vol. 11(2) (1997) 115-128. See also web site at
http://www.globus.org/.
12 Topcuoglu, H., Hariri, S., Furmanski, W., Valente, J., Ra, I., Kim, D., Kim, Y., Bing, X.,
Ye, B.: The Software Architecture of a Virtual Distributed Computing Environment.
Proceedings of the Sixth IEEE International Symposium on High Performance Distributed
Computing (HPDC-6), Portland (1997).

