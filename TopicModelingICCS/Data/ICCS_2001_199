A Feynman-Kac Path-Integral Implementation
for Poisson’s Equation
Chi-Ok Hwang and Michael Mascagni
Department of Computer Science, Florida State University, 203 Love Building
Tallahassee, FL 32306-4530

Abstract. This study presents a Feynman-Kac path-integral implementation for solving the Dirichlet problem for Poisson’s equation. The algorithm is a modiﬁed “walk on spheres” (WOS) that includes the FeynmanKac path-integral contribution for the source term. In our approach, we
use the Poisson kernel instead of simulating Brownian trajectories in detail to implement the path-integral computation. We derive this approach
and provide results from a numerical experiment on a two-dimensional
problem as veriﬁcation of the method.

1

Introduction

Since Müller proposed the “walk on spheres” (WOS) method for solving the
Dirichlet boundary value problems for the Laplace equation [1], WOS has been
a popular method. In addition, this random-walk based approach has been extended to solve other, more complicated, partial diﬀerential equations including Poisson’s equation, and the linearized Poisson-Boltzmann equation [2–8]. In
WOS, instead of using detailed Brownian trajectories inside the domain, discrete
jumps are made using the uniform ﬁrst-passage probability distribution of the
sphere. In this paper, this WOS method is combined with the Feynman-Kac formulation to solve the Dirichlet boundary value problem for Poisson’s equation.
Even though the Feynman-Kac method is well known among mathematicians
and mathematical physicists, [9–11], as a computational technique, it has not
been much implemented, even for simple cases, despite the fact that some modiﬁed WOS methods are mathematically derivable from the Feynman-Kac formulation [4]. We thus feel that it is worthwhile to implement the Feynman-Kac
formulation for some simple problems to show its utility. Here, we implement
the Feynman-Kac formulation for a simple Poisson problem. Instead of simulating the detailed Brownian trajectory, we use discrete WOS jumps together with
the Poisson kernel to incorporate the source term in the Poisson equation. In
previous work of others, diﬀerent Green’s functions have been used [2, 4, 8] for
the source term in the Poisson’s equation, but the Poisson kernel has never been
used. Here, we interpret the Poisson kernel as the probability density distribution
of a Brownian trajectory inside a ball during its passage from the ball’s center
to an exit point on the ball’s boundary. This is used in place of a direct simulation of the Brownian trajectory because the Poisson kernel gives the Brownian
walker’s density distribution inside the ball.
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 1282−1288, 2001.
© Springer-Verlag Berlin Heidelberg 2001

A Feynman-Kac Path-Integral Implementation

1283

This paper is organized as follows. In Section 2, we explain how to implement
the Feynman-Kac path-integral method for the Dirichlet problem for Poisson’s
equation. In Section 3, we give a numerical example. In Section 4, conclusions
are presented and future work is discussed.

2

Modiﬁed “walk on spheres”

In this section, we explain how to combine the WOS method [1] with the
Feynman-Kac path-integral representation for solving the Dirichlet problem for
Poisson’s equation. Our implementation is based on the well-known FeynmanKac representation of the solution to the Dirichlet problem for Poisson’s equation. Recall that the Dirichlet problem for the Poisson’s equation is:
1
∆u(x) = −q(x),
2
u(x) = f (x),

x∈Ω

(1)

x ∈ ∂Ω.

(2)

The solution to this problem, given in the form of the path-integral with respect
to standard Brownian motion Xtx , is as follows [9, 10]:
�
u(x) = E[

x
τD

0

q(Xtx )dt] + E[f (Xτxx )],

(3)

D

x
where τD
= {t : Xtx ∈ ∂Ω} is the ﬁrst passage time and Xτxx is the ﬁrst passage
D
location on the boundary, ∂Ω 1 .
Instead of simulating the detailed irregular motion of the Brownian trajectories, we use the Poisson kernel for a ball [10] with WOS as a probability density
function:

K(x, z) =

Γ (d/2) r2 − |x − a|2
,
2π d/2 r |x − z|d

x ∈ B(a, r),

z ∈ S(a, r).

(4)

Here, B(a, r) is a ball with center a and radius r, z is the ﬁrst passage location
on the surface of the ball, S(a, r), and d is dimension. We interpret the Poisson
kernel as the probability density distribution of the Brownian trajectory inside
the ball during its passage from the center to the boundary.
We construct a Brownian trajectory as a sequence of discrete jumps from
ball centers to ball surfaces. Using the Poisson kernel, the ﬁrst term of Eq. 3 for
each ith ball of a WOS (Brownian) trajectory becomes
�
xi
E[E{τD }
q(x)K(x, z)dx].
(5)
Bi

1

x
E[τD
]

Here, we assume that
< ∞ for all x ∈ Ω, f (x) and q(x) are continuous
and bounded, and that the boundary, ∂Ω, is suﬃciently smooth so as to ensure the
existence of a unique solution, u(x), that has bounded, continuous, ﬁrst-order and
second-order partial derivatives in any interior subdomain [9, 10].

1284 C.-O. Hwang and M. Mascagni

ε
Xk+1
Xk
Ω

Xn−1
Xn
Ω

X0
X1

Fig. 1. Modiﬁed WOS. X0 , X1 , ..., Xk , ..., Xn are a series of discrete jumps of a
Brownian trajectory which terminates on absorption in the -absorption layer.

Here, Bi is the volume of the ith ball and so the proceeding is a volume integral.
xi
It is also well known that the mean ﬁrst passage time in this situation is E[τDD ] =
ri2 /2d in d dimensions [12, 13]. Notice that the integral is improper at z when
x = z, the exit point.
Eq. 5 readily permits the use of WOS to eliminate the need to compute the
detailed Brownian trajectory. Instead, a series of discrete jumps in continuous
space terminating on the boundary, ∂Ω, is used. Jumping from ball to ball never
permits a trajectory to land exactly on the boundary. Thus we use the standard
WOS approach of “fattening” the boundary by  to create a capture region that
is used to terminate the walk [2]. The error associated with this approximation
has been theoretically estimated in previous WOS methods [6, 8].
We wish to compute the solution to the Dirichlet problem for Poisson’s equation at x0 . For each Brownian trajectory starting at x0 , with an -absorption
layer, we accumulate the internal contribution for each ball and the functional
value of the boundary condition at the ﬁnal exit location on ∂Ω. And so, an
estimate for the solution at x0 is given by the statistic

A Feynman-Kac Path-Integral Implementation

1285

Table 1.
r
0.1244
0.2320
0.2187
0.1476
0.0129

θ
-0.7906
-0.0274
-3.3975
-4.1617
-1.4790

Exact Monte Carlo
0.8623
0.8676
0.9678
0.9694
0.4308
0.4348
0.4695
0.4564
0.8890
0.8843

variance Average number of steps
0.0971
13.04
0.0039
8.70
0.1826
13.54
0.0886
13.01
0.0654
12.24

SN =

N
1 �
Zi ,
N i=1

(6)

where N is the number of trajectories and each statistic, Zi is given by
�
ni
�
xi
Zi =
[E{τD }

B(xi ,ri )

i=1

q(x)K(x, z)dx + f (Xτxx )].
D

(7)

Here, ni is the number of WOS steps needed for the ith Brownian trajectory to
terminate in the -absorption layer.

3

Numerical Experiments

In this section, we demonstrate our Feynman-Kac implementation by solving
numerically a boundary value problem for Poisson’s equation. We use as our
domain, Ω, the unit disk minus the ﬁrst quadrant, which was used in previous
research by DeLaurentis and Romero [8] (See Fig 1.):
Ω = {(r, θ) : 0 < r < 1, −3π/2 < θ < 0}.

(8)

We consider the Poisson equation:

2
r2
1
∆u(x) = −(1 − )e−r /2
(9)
2
2
with the boundary conditions u(r, 0) = e(−r2 /2), u(r, −3π/2) = −r1/3 +e(−r2 /2),
and u(1, θ) = sin(θ/3) + e−1/2 . The known analytic solution is

u(r, θ) = r1/3 sin(θ/3) + e−r

2

/2

.

(10)

For this two-dimensional problem, the Poisson kernel is
K(x, z) =

1 r2 − |x − a|2
,
2πr |x − z|2

x ∈ B(a, r),

z ∈ S(a, r),

(11)

and one random estimate is
Zi =

�
n
�
r2
i

i=1

4

B(xi ,ri )

q(x)K(x, z)dx + f (Xτxx ).
D

(12)

1286 C.-O. Hwang and M. Mascagni

2000
1800

running time (secs)

1600
1400
1200
1000
800
600
400 −7
10

−6

10

−5

10

−4

−3

10
10
ε−absorption layer

−2

10

−1

10

Fig. 2. Running time v.s. the thickness of the -absorption layer. This shows the usual
relation for WOS, running time (proportional to number of WOS steps for each Brownian trajectory) on the order of | log |.

Table I shows our simulation results for the solution at ﬁve diﬀerent points.
The absorption layer thickness is  = 10−4 , and the number of trajectories for
each run is N = 103 .
The errors associated with this implementation are (1) the error associated
with the number of trajectories (sampling error), (2) the error associated with
the -absorption layer, and (3) the error associated with the integration used for
the source term. We can reduce the statistical sampling error by increasing the
number of trajectories. The error associated with the -absorption layer can be
reduced by reducing , the -absorption layer thickness. However, increasing the
number of trajectories will increase the running time linearly, while reducing 
will increase running time on the order of | log |. In Fig. 2, we see the usual
relationship between running time and the thickness of the -absorption layer
in WOS: on the order of | log |. The reason for this is that the running time
increases proportionally to the number of WOS steps, ni , as an integration is
required for the source term in each WOS step. The error from the -absorption
layer can be investigated empirically if we have enough trajectories so that the
statistical sampling error is much smaller than the error from the -absorption
layer. Fig. 3 shows the empirical results with 106 Brownian trajectories: the
-layer error grows linearly in  for small .

A Feynman-Kac Path-Integral Implementation

1287

0.04

0.03

error

0.02

0.01
simulation error
linear regression

0

−0.01

0

0.01

0.02

0.03
0.04
0.05
ε−absorption layer

0.06

0.07

0.08

Fig. 3. Error arising from the -absorption layer with 106 Brownian trajectories. The
error is linear in .

4

Conclusions and Future Work

In this study, we implemented the Feynman-Kac path-integral representation
of the solution to the Dirichlet problem for Poisson’s equation combining the
well known WOS method with use of the Poisson kernel as a probability density
function. Using the Poisson kernel inside each WOS step, we avoid the need for
detailed information about the Brownian trajectory inside the spherical domain.
The Brownian trajectory is thus constructed as a series of discrete jumps using
WOS with the source contribution inside each WOS step computed using the
Poisson kernel.
Recently, we developed a modiﬁed WOS algorithm for solving the linearized
Poisson-Boltzmann equation (LPBE) [7] in a domain Ω:
∆ψ(x) = κ2 ψ(x),
ψ(x) = ψ0 (x),

x ∈ Ω,
x ∈ ∂Ω.

(13)
(14)

Here, κ is called the inverse Debye length [14]. We used a survival probability,
which was obtained by reinterpreting a weight function in a previously modiﬁed
WOS method [4]. This survival probability enabled us to terminate some Brownian trajectories during WOS steps. This method can be combined with the
method described in this paper to solve the Dirichlet boundary value problem
for ∆ψ(x) − κ2 ψ(x) = −g(x). This will be the subject of a future study.

1288 C.-O. Hwang and M. Mascagni

References
1. M. E. Müller. Some continuous Monte Carlo methods for the Dirichlet problem.
Ann. Math. Stat., 27:569–589, 1956.
2. K. K. Sabelfeld. Monte Carlo Methods in Boundary Value Problems. SpringerVerlag, Berlin, 1991.
3. A. Haji-Sheikh and E. M. Sparrow. The solution of heat conduction problems by
probability methods. Journal of Heat Transfer, 89:121–131, 1967.
4. B. S. Elepov and G. A. Mihailov. The “Walk On Spheres” algorithm for the
equation ∆u − cu = −g. Soviet Math. Dokl., 14:1276–1280, 1973.
5. T. E. Booth. Exact Monte Carlo solution of elliptic partial diﬀerential equations.
J. Comput. Phys., 39:396–404, 1981.
6. T. E. Booth. Regional Monte Carlo solution of elliptic partial diﬀerential equations.
J. Comput. Phys., 47:281–290, 1982.
7. C.-O. Hwang and M. Mascagni. Eﬃcient modiﬁed “Walk On Spheres” algorithm
for the linearized Poisson-Boltzmann equation. Appl. Phys. Lett., 78(6):787–789,
2001.
8. J. M. DeLaurentis and L. A. Romero. A Monte Carlo method for Poisson’s equation. J. Comput. Phys., 90:123–139, 1990.
9. M. Freidlin. Functional Integration and Partial Diﬀerential Equations. Princeton
University Press, Princeton, New Jersey, 1985.
10. K. L. Chung and Z. Zhao. From Brownian Motion to Schrödinger’s Equation.
Springer-Verlag, Berlin, 1995.
11. K. K. Sabelfeld. Integral and probabilistic representations for systems of elliptic
equations. Mathematical and Computer Modelling, 23:111–129, 1996.
12. L. H. Zheng and Y. C. Chiew. Computer simulation of diﬀusion-controlled reactions
in dispersions of spherical sinks. J. Chem. Phys., 90(1):322–327, 1989.
13. S. Torquato and I. C. Kim. Eﬃcient simulation technique to compute eﬀective
properties of hetergeneous media. Appl. Phys. Lett., 55:1847–1849, 1989.
14. R. Ettelaie. Solutions of the linearized Poisson-Boltzmann equation through the
use of random walk simulation method. J. Chem. Phys., 103(9):3657–3667, 1995.

