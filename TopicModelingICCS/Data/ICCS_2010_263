Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–8
1963–1970

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Automatic terrain modeling using transﬁnite element analysis
N.O. Collier, V.M. Calo
4700 King Abdullah University of Science and Technology
Building UN1550-4, Oﬃce 4333
Thuwal 23955-6900, Kingdom of Saudi Arabia

Abstract
An automatic procedure for modeling terrain is developed based on L2 projection-based interpolation of discrete
terrain data onto transﬁnite function spaces. The function space is reﬁned automatically by the use of image processing
techniques to detect regions of high error and the ﬂexibility of the transﬁnite interpolation to add degrees of freedom
to these areas. Examples are shown of a section of the Palo Duro Canyon in northern Texas.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: transﬁnite interpolation, attribute-based modeling, terrain modeling, automatic reﬁnement

1. Introduction
This paper is focused on the use of a surface modeling technique called Attribute-Based Modeling (AB Modeling) [1, 2] which is a generalization of transﬁnite interpolation. Transﬁnite interpolation has its beginning in 1973
where the term was coined by Gordon [3] where its use was to generate curvilinear grids in two- and three-dimensions.
The method blends the interior of a surface or volume by information from the boundaries. This is done in such a way
that the boundary curves or surfaces are interpolated exactly.
Gao and Rockwood’s generalization of this idea extends the notion of transﬁnite interpolation to allow contribution
from unconnected interior curves as well as boundary curves. In fact, the construction does not strictly need boundary
curves. Interior curves may be added in regions where more control is desired. This allows for an intuitive design of
surfaces, adding feature curves in areas where more control is desired without regard for the topology of the resulting
parameterization.
While the notion of design of terrain is an interesting topic, this paper proposes a technique for automatically
representing terrain data whose source is elevation. The proposed method will determine locations of curves based
on a projective error, speciﬁcally in this work the L2 residual. Since the surface will conform to the curves, a onedimensional regression analysis may be used to improve curve quality in target areas. This computation of the projections requires AB Modeling to be re-expressed as a sum of basis functions which we will detail here.
There are several techniques for the modeling of terrain, some of which are detailed in [4]. If the points are
regularly sampled, then a regular grid can be used to simply obtain a surface approximation. A Delaunay triangulation
[5] can be used to obtain a surface of irregularly spaced points. When more resolution is desired, subdivision surfaces
Email addresses: nathaniel.collier@kaust.edu.sa (N.O. Collier), victor.calo@kaust.edu.sa (V.M. Calo)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.220

1964

N.O. Collier, V.M. Calo / Procedia Computer Science 1 (2012) 1963–1970
2

N.O. Collier et al. / Procedia Computer Science 00 (2010) 1–8

[6, 7] may be used to obtain smooth approximations based on the original grid. Alternatively, the grid data may also
be used to develop a series of contour lines common to topographical maps. There are also examples of the use of
polynomials and B-splines to approximation the terrain data. Walton [8] uses curved knot lines to adapt tensor product
B-splines to be more suitable to model the sharp discontinuities that often are present in modeling terrain.
2. Transﬁnite Basis Function Construction
To illustrate how the parameterizations are constructed, consider Fig. 1. On the left side of the ﬁgure there are two
lines and a point which are called footprints, labeled by numbers inside of circles. Each footprint is the parametric
preimage that is mapped to image or physical space by some function ( f1 , f2 , and f3 in this case). The mapped
footprints are shown on the right and labeled with numbers in squares. Note that a footprint can be any entity of
equal or lower dimension relative to the dimension of the parameter space being used (e.g. points or lines in R2 ). The

u2

u1
1

f2 (u2 )

f1 (u1 )

d1

d2

1

2

2

u
F (u)
d3

3

u3

f3 (u3 )
3

Figure 1: On the left, the parameteric preimage of the mapped entities shown on the right
surface can then be parameterized as
F(u) = f1 (u1 )

1
d1

+

1
d1
1
d2

+

1
d3

+ f2 (u2 )

1
d1

+

1
d2
1
d2

+

1
d3

+ f3 (u3 )

1
d1

+

1
d3
1
d2

+

1
d3

(1)

where each of the footprint’s mapping is blended by a rational function of reciprocal distances. In [1] this technique
is demonstrated to be equivalent to a weighted least squares procedure, which is what leads to minimum potential
energy surfaces.
The procedure involves ﬁnding some point on each footprint, ui , and a distance, di , to the point at which we wish
to evaluate the surface, u. Then we ﬁnd the image of each of these points, fi (ui ), where the subscript i refers to the ith
footprint. Each of these images are weighted by the reciprocal distance to the footprint and divided by the sum. This
blends the mapped curves in such a way that a partition of unity is maintained. We will deﬁne the reciprocal of the
distance to the footprint as a variable, Wi := d1i . Therefore we can rewrite the interpolation as
nf

F(u) =

ˆ i (d)
fi (ui )W

(2)

Wi
Wj

(3)

i

where
ˆ i (d) :=
W

nf
j

n f is the number of footprints, and d is a vector of all the distances to all the footprints.

N.O. Collier, V.M. Calo / Procedia Computer Science 1 (2012) 1963–1970
N.O. Collier et al. / Procedia Computer Science 00 (2010) 1–8

1965
3

Now if we assume that each curve can be parametrized as
nb

fi (u) =

Bi,k (u)Ci,k

(4)

k

where k loops over the number of bases of the curve, nb and the functions Bi,k (u) are the kth one-dimensional basis of
the ith footprint with degree of freedom, Ci,k . Then the entire surface interpolation will become
nf

nb

i

k

F(u) =

ˆ i (d)Ci,k
Bi,k (ui )W

(5)

or if we take an index j to loop over unique combinations of the indices i and k,
ˆ i (d) C j
B j (ui )W

F(u) =
j

(6)

N j (u)

So the basis function of the ith footprint and kth local curve basis can be thought of as the curve basis extended to the
whole domain via a weighting function, that is
ˆi
N j (u) = Bki (ui )W

(7)

This enables the construction of bases on connected or unconnected networks of footprints which can be entities of
lower dimensions (i.e. lines and points in two-dimensions).
2.1. Derivative Control
The surface as it crosses the footprint may be controlled by expanding the function f in (2) into a combination of
the footprint curve f and a lofted curve g, extending the equation
nf

F(u) =
i

ˆ i (d)
(1 − si ) fi (ui ) + (si )gi (ui ) W

(8)

where in this case the lofted curve is blended linearly with the footprint curve. These lofted curves are called ribbons
in the literature [1]. The blending variable si is a scaled distance, where the scaling is selected such that si < 1 for
the whole domain. This involves a computation to determine the point in the domain furthest from the footprint and
ˆ i (d).
scaling the distance di that is already computed for the weighting function W
While here the footprint is blended with the ribbon via linear functions of s, richer functions can be used to enrich
the surface interpolation further from the footprint. In particular, the construction used in this work utilizes the ﬁrst
two terms of the quadratic Bernstein polynomials,
nf

F(u) =
i

ˆ i (d)
(1 − si )2 fi (ui ) + si (1 − si )gi (ui ) W

(9)

2.2. Sample Basis Functions
This method of constructing basis functions can be used on footprint networks which form polygons by enforcing
continuity at common points on joined footprints. These are types of functions typically seen in engineering applications. However, the freedom of topology which transﬁnite interpolation brings allows the generation of basis functions
for n-sided polygons, a series of which may be shown in Fig. 2.
However more general networks may also be chosen, where footprints may or may not be connected. This is
the feature which is exploited here to model terrain, where degrees of freedom may be added at will in areas where
reﬁnement is desired. Consider the following square domain with an added line along the diagonal, shown in Fig. 3.
In this example, each footprint is a cubic Bezier curve whose inﬂuence is extended to the two-dimensional domain via
transﬁnite interpolation. The resulting basis for the bottom and interior footprints are shown. Note that the this basis
will interpolate the included curve with C 0 continuity.

1966

N.O. Collier, V.M. Calo / Procedia Computer Science 1 (2012) 1963–1970
N.O. Collier et al. / Procedia Computer Science 00 (2010) 1–8

4

Figure 2: Plots of single basis functions for footprint networks which form convex polygons. In this case each side is
a linear Bezier curve, however the freedom is present to allow each side to be of diﬀerent order.
3. Terrain Modeling Technique
The general notion of the method developed to model terrain is to determine unknown degrees of freedom via L2
projections from discrete terrain data onto the transﬁnite function spaces used. This is expressed as
⎛
⎞
⎜⎜⎜
⎟⎟⎟
2
⎜
argmin ⎜⎜⎝ (Z −
N j (u)c j ) dΩ⎟⎟⎟⎠
(10)
c
Ω

j

where the transﬁnite interpolation is shown as a sum of basis functions and nodal degrees of freedom, N j and c j ,
respectively, and where Z represents the elevation data. To ﬁnd the minimum, the derivative is taken with respect to
each parameter, c j and set to zero.
⎞
⎛
⎟⎟⎟
⎜⎜⎜
⎜
⎜
2 ⎝⎜Z −
N j (u)c j ⎟⎟⎠⎟ (−Ni (u)) dΩ = 0
(11)
Ω

j

This results in the following matrix equations.

M·c=f

(12)

where M is the mass matrix and whose (a, b)th entry is computed by
Ma,b =

Na (u)Nb (u)dΩ

(13)

Z · Na (u)dΩ

(14)

Ω

f is called the load vector whose ath entry is given by
fa =
Ω

and where c is the vector of unknown degrees of freedom. In this work, the integrals will be approximated by cell
integration. Each pixel is taken as a small square area of the domain which we multiply by the integrand evaluated
at the cell center. The overall eﬀect is that the degrees of freedom are chosen that generate the closest surface to the
input terrain as possible, in the L2 sense. Note that the process is a continuous version of a least squares ﬁt using
discrete points, discussed in more detail in Chapter 2 of [9].
3.1. Reﬁnement of Footprints
The method features footprint insertion and automatic reﬁnement. This is realized by ﬁrst inserting the footprints
in the desired area in the domain. For boundary footprints this is trivial and for future interior footprints a method will
be shown in Sec. 3.2. In this work, each footprint is parameterized as a B-spline [10] and initially a single span linear
B-spline is used. Knots are subsequently inserted by splitting the span with the highest L2 residual. This is done while
maintaining a minimum feature length to avoid small features which tend to add ripples to the surface interpolations.
The implementation takes a user-speciﬁed tolerance for the residual which enables a uniform reﬁnement of footprint
curves.
As a test case, elevation data was interpolated from the Palo Duro Canyon1 [11] using only boundary footprints
and reﬁning each individually. Also, derivative control is added to each footprint which gives extra control to the
interior. The original data and approximation can be seen in Figs. 4 and 5.
1 http://sketchup.google.com/3dwarehouse/details?mid=edb44c07a55682f121fafe1eef0f95e

N.O. Collier, V.M. Calo / Procedia Computer Science 1 (2012) 1963–1970
N.O. Collier et al. / Procedia Computer Science 00 (2010) 1–8

(a) Network of footprints
forming a quadrilateral
convex polygon with an
included line

(b) Cubic basis functions of the bottom footprint

(c) Cubic basis functions of the interior footprint

Figure 3: Example footprint network and basis functions used to interpolate terrain data where red indicates
maximum values and blue represents zero.

1967
5

1968

N.O. Collier, V.M. Calo / Procedia Computer Science 1 (2012) 1963–1970
N.O. Collier et al. / Procedia Computer Science 00 (2010) 1–8

(a) Terrain data

(b) Surface approximation

Figure 4: Palo Duro Canyon data and interpolation using individually reﬁned boundary footprints

(a) G1 patch using cubic footprints

(b) G2 patch using quintic footprints

Figure 5: Surface plots of boundary footprint representation of Palo Duro Canyon. Coloring indicates source terrain
elevation values

6

N.O. Collier, V.M. Calo / Procedia Computer Science 1 (2012) 1963–1970

1969

N.O. Collier et al. / Procedia Computer Science 00 (2010) 1–8

7

3.2. Insertion of Footprints
Transﬁnite Element Analysis is a powerful tool in interpolation not only because footprints forming convex polygons can be independently reﬁned and blended but also because the footprints themselves can be added in any location.
An interpolation can be improved by adding footprints in regions where the approximation is poor, economizing the
use of degrees of freedom.
The following procedure is a method by which footprints are inserted into the domain.
1. The absolute error between the terrain data and its interpolation is computed (Fig. 6a) and treated like an image.
This error is thresholded at a user-deﬁned value to highlight regions of large error.
2. Each disjoint thresholded region is then uniquely identiﬁed and treated as a separate domain (Fig. 6b). The
small regions (less than 5 pixels) are removed from consideration (Fig. 6c). For each region, compute the L2
residual and select the region with the highest value. This aims at targeting not just the maximum error, but the
region which is most poorly represented.
3. For this targeted region, place a linear footprint which is a best ﬁt to the pixels involved in that region (Fig. 6d).
4. Recalculate the point error and continue the procedure
This process can be continued until some criteria is reached (e.g. maximum number of footprints reached, global
residual level achieved).
In the above boundary footprint representations (Fig. 5), this procedure is used to add ten footprints to key areas
of the surface. This resulting surface can be seen in Fig. 7. While the representation is improved in the sense that the
error was reduced, there are now lines of C 0 continuity which are not desirable from the aesthetic point of view.

(a) Point error between the terrain (b) Thresholded error,
data and surface approximation
threshold value =
0.5(errormax − errormin )

(d) Plot of footprint network with
(c) Thresholded error, unique
regions detected and small regions added footprint
removed

Figure 6: Steps of the footprint insertion process. Each row corresponds to the ﬁrst, ﬁfth, and tenth insertion

1970

N.O. Collier, V.M. Calo / Procedia Computer Science 1 (2012) 1963–1970
N.O. Collier et al. / Procedia Computer Science 00 (2010) 1–8

8

Figure 7: Surface representation of the terrain data using ten automatically selected footprints
4. Conclusions
This paper presents a procedure for automatically adapting transﬁnitely interpolated function spaces to approximate terrain, economizing the use of degrees of freedom by adding the control to regions determined as poorly
represented. While certain visual artifacts are present, the method is successful at adapting to represent the terrain.
The method is an eﬀective compression technique for representing abruptly varying data, such as permeabilities
in reservoir simulations. Alternative metrics for computing the optimality of the approximation may be used, such
as, H 1 , where both the function values and its gradients may be used to determine which are the best coeﬃcients to
represent the terrain.
The results presented are the ﬁrst attempt of a larger eﬀort to use this method to automatically model terrain
from discrete data. The method of constructing function spaces provides the modeler with a lot of freedom, yet the
challenge is to determine how to use this freedom optimally. This is currently a direction being pursued in this research
eﬀort.
5. References
[1] K. Gao, A. Rockwood, Mathematics of Surfaces XI, Springer Berlin / Heidelberg, 2005, Ch. Multi-sided Attribute Based Modeling, pp.
219–232. doi:10.1007/11537908.
[2] K. Gao, Multi-sided attribute based modeling, Ph.D. thesis, Colorado School of Mines (2005).
[3] W. Gordon, C. Hall, Construction of curvilinear coordinate systems and applications to mesh generation, International Journal for Numerical
Methods in Engineering 7 (1973) 461–471.
[4] G. Petrie, T. Kennie, Terrain modelling in surveying and civil engineering, Computer-Aided Design 19 (4) (1987) 187.
[5] T. de Kok, M. van Kreveld, M. Loﬄer, Generating realistic terrains with higher-order delaunay triangulations, Computational Geometry:
Theory and Applications 36 (1) (2007) 52–65.
[6] J. Peters, U. Reif, Subdivision Surfaces, Springer-Verlag, 2008.
[7] N. Pfeifer, A subdivision algorithm for smooth 3d terrain models, ISPRS Journal of Photogrammetry and Remote Sensing 59 (3) (2005)
115–127.
[8] D. Walton, Terrain modelling with b-spline type surfaces deﬁned on curved knot lines., Image and Vision Computing 5 (1) (1987) 37–43.
[9] T. J. Rivlin, An Introduction to the Approximation of Functions, Dover Phoenix Editions, 2003.
[10] L. Piegl, W. Tiller, The NURBS Book, Monographs in Visual Communication, Springer, New York, 1995.
[11] TaﬀGoch, Palo Duro Canyon data from Google 3D Warehouse (Nov 2009).

