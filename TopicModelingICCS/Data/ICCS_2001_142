A Job-Shop Scheduling Problem with Fuzzy Processing
Times
Feng-Tse Lin
Department of Applied Mathematics, Chinese Culture University
YangminShan, Taipei, Taiwan, ROC
ftlin@staff.pccu.edu.tw

Abstract. Job-shop scheduling is a difficult problem, both theoretically and
practically. This problem is a combinatorial optimization of considerable
industrial importance. Although the job-shop scheduling problem has often
been investigated, very little of this research is concerned with the uncertainty
characterized by the imprecision in problem variables. In this paper, we
investigate the job-shop scheduling problem with imprecise processing times.
We first use triangular fuzzy numbers to represent imprecise processing times,
and then construct a fuzzy job-shop scheduling model. Our work intends to
extend the deterministic job-shop scheduling problem into a more generalized
problem that would be useful in practical situations.

1

Introduction

The job-shop scheduling problem is concerned with allocating limited resources to
operations over time [3]. Between the operations precedence constraints for a job can
be defined. Although job-shop scheduling has always had an important role in the
field of production and operations management, it is a difficult problem in
combinatorial optimization [12]. The difficulty is due to the high number of
constraints, unfortunately unavoidable in the real-world applications [9]. The job-shop
scheduling problem can be described as follows. We are given n jobs and m machines.
Each job consists of a sequence of operations that must be processed on m machines
in a given order. Each operation must be executed uninterrupted on a given machine
for a given period of time and each machine can only handle at most one operation at
a time. The problem is to find a schedule, an allocation of the operations of n jobs to
certain time intervals on m machines, with a minimum overall time.
Solving the job-shop scheduling problem requires a high computational effort
and considerable sophistication [2, 4]. Instead of investigating using optimal
algorithms, it is often preferred to use approximation algorithms such as heuristics
and meta-heuristics, e.g. simulated annealing, genetic algorithms, and tabu search [1,
5, 6-9, 15, 17, 19]. However, most of the methods proposed in the literature required
the assumption that all time parameters are known exactly. This is a strong
assumption, which may cause severe difficulties in practice. An example is the
difficulty in estimating the exact processing times for all jobs on the machines. In fact,
there are many vaguely formulated relations and imprecisely quantified physical data
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2074, pp. 409–418, 2001.
© Springer-Verlag Berlin Heidelberg 2001

410

F.-T. Lin

values in real world descriptions since precise details are simply not known in
advance. Stochastic methods exist, but not many address imprecise uncertainty.
Although the job-shop scheduling problem has often been investigated, very few of
these studies take uncertainty, typified by the imprecision or vagueness in time
estimates, into account [10, 14, 15, 16, 18].
In this study, we investigate a job-shop scheduling problem with imprecise
processing time and use fuzzy numbers to represent imprecise processing times in this
problem. The main interest of our approach is that the fuzzy schedules obtained from
Property 1 are the same type as those in the crisp job-shop scheduling problem. The
fuzzy job-shop scheduling model, in the case of imprecise processing times, is then an
extension of the crisp problem.

2

Job-Shop Scheduling Problem

The deterministic job-shop scheduling problem is stated as follows. There are n jobs
to be scheduled on m machines. Each job consists of a sequence of operations that
must be processed on m machines in a given order [13]. Each operation is
characterized by specifying both the required machine and the fixed processing time.
Several constraints on jobs and machines, which are listed as follows [11]:
(1) Each job must pass through each machine once and only once.
(2) Each job should be processed through the machine in a particular order.
(3) Each operation must be executed uninterrupted on a given machine.
(4) Each machine can only handle at most one operation at a time.
The problem is to find a schedule to determine the operation sequences on the
machines in order to minimize the total completion time. Let c ik denote the
completion time of job i on machine k, and t ik denote the processing time of job i on
machine k. For a job i, if the processing on machine h precedes that on machine k, we
need the following constraint:

c ik � t ik � c ih
On the other hand, if the processing on machine k comes first, the constraint becomes

c ih � t ih � c ik
Thus, we need to define an indicator variable x ihk as follows:
x ihk

�1, processing on machine h precedes that on machine k for job i
��
� 0, otherwise

A Job-Shop Scheduling Problem with Fuzzy Processing Times

411

We can then rewrite the above constraints as follows:

c ik � t ik � L(1 � x ihk ) � c ih , i � 1, 2, ..., n, h, k � 1, 2, ..., m
where L is a large positive number. Consider two jobs, i and j, that are to be processed
on machine k. If job i comes before job j, we need the following constraint:
c jk � c ik � t jk

Otherwise, if job j comes first, the constraint becomes
c ik � c jk � t ik

Therefore, we also need to define another indicator variable y ijk as follows.
y ijk �

�1, if job i precedes job j on machine k
�0, otherwise
�

We can then rewrite the above constraints as follows:
c jk � c ik � L (1 � y ijk ) � t jk , i , j � 1, 2, ..., n, k � 1, 2, ..., m

The job-shop scheduling problem with a makespan objective can be formulated as
follows:
min max [ max [ c ik ]]

(1)

s.t. c ik � t ik � L (1 � x ihk ) � c ih , i � 1, 2, ..., n , h, k � 1, 2, ..., m

(2)

1� k � m 1� i � n

c jk � c ik � L (1 � y ijk ) � t jk , i , j � 1, 2, ..., n , k � 1, 2, ..., m

(3)

c ik � 0 , i � 1, 2, ..., n , k � 1, 2, ..., m

(4)

x ihk = 0 or 1, i � 1, 2, ..., n , h, k � 1, 2, ..., m

(5)

y ijk = 0 or 1, i , j � 1, 2, ..., n , k � 1, 2, ..., m

3

Constructing a Fuzzy Job-Shop Scheduling Model

3.1 Imprecise Processing Time
As in real life situations, some unexpected events may occur, resulting in small
changes to the processing time of each job. Therefore, in many situations, the

412

F.-T. Lin

processing time can only be estimated as being within a certain interval. Let us
illustrate this point using one example. The example taken from [10] is an industrial
case in a chemical environment. The chemical reaction depends not only on the
pressure and the temperature but also on the quality of the components. It is very
difficult to control this dependence. Therefore, the uncertainties of those reaction
times must also be modeled. Because of this interval estimation feature, the
representation of processing time for a job can be more realistically and naturally
achieved through the use of a fuzzy number. As a result, decision-makers (DM) do
not need to give a single precise number to represent the processing time of a job. We
use t jk , the processing time for job j on machine k, to denote the process time for
each job in this paper. However, t jk is just an estimate and its exact value is actually
unknown.
3.2 A Fuzzy Job-Shop Sequencing Model
Consider the schedule for the job-shop problem is performed several times in
practical situations. Obviously, the processing time for this schedule at different
execution times is not necessarily the same. Therefore, an estimated processing time
interval, i.e. [ t jk � � jk1 , t jk + � jk 2 ], should be given to represent the possible range of
values for the processing time. Thus the use of interval [ t jk � � jk 1 , t jk + � jk 2 ] is
more appropriate than the use of a single estimate, t jk , in practical situations. The
DM should carefully determine the parameters � jk 1 and � jk 2 , which satisfy
0 � � jk 1 � t jk and 0 � � jk 2 , for defining an acceptable processing time range for

any particular problem. After that, the DM can choose an appropriate value from the
interval [ t jk � � jk 1 , t jk + � jk 2 ] as an estimate for the processing time for job j on
machine k. Obviously, when the estimate happens to be t jk , which is the crisp
processing time, the error rate is zero. When the estimate deviates from t jk , the error
rate will become larger. In fact, we can use the term “confidence level” instead of
“error rate” while we consider processing time interval based on the fuzzy viewpoint.
We can therefore say that the confidence level is one if the processing time estimate
equals t jk . Otherwise, when the processing time estimate deviates from t jk , the
confidence level will become smaller. Finally, when the estimate approaches one of
the two ends of the interval, i.e. t jk � � jk 1 or t jk + � jk 2 , the confidence level will be
close to zero.
A level 1 triangular fuzzy number corresponding to the above interval [ t jk �
� jk 1 , t jk + � jk 2 ] is given as follows:
~
t jk � (t jk � � jk 1 , t jk , t jk � � jk 2 ; 1) � FN (1) ,
0 � � jk 1 � t jk , 0 � � jk 2 , j � 1, 2, ..., n , k � 1, 2, ..., m .

(6)

A Job-Shop Scheduling Problem with Fuzzy Processing Times

413

1

0

t jk � � jk 1

t jk

t jk + � jk 2

x

~

Fig. 1. A triangular fuzzy number t jk .

Fig. 1 shows a level 1 triangular fuzzy number ~
t jk . From fig. 1 we can see that the
~
membership grade at t jk in t jk is 1. However, the more the fuzzy number deviates
from the t position, the lesser the fuzzy numbers membership grade in ~
t . The
jk

jk

membership grade at t jk � � jk 1 or t jk + � jk 2 is zero. Of course, we can see that the
confidence level for an estimate in the interval corresponds to the membership grade
of a fuzzy number in the fuzzy sets. This concept naturally leads to the use of fuzzy
numbers for the processing time in the job-shop scheduling problem.
Let c~ik � (c ik , c ik , c ik ; 1) � (c~ik )1 � FN (1) .
(7)
The signed distance of level � fuzzy number is defined as follows. For each � � [0, 1]
~
~
~
and A � (a, b, c; � ) � FN (� ) . The signed distance of A measured from 01 is defined
~ ~
~
1
~
by d ( A, 01 ) � (2b � a � c) . Then d ( c~ik , 01 ) � c ik is the signed distance from 01 to
4
~
~
c~ik . Since d ( c~ik , 01 ) � c ik > 0, it is a positive distance from 01 to c~ik . Therefore
~
c ik � d ( c~ik , 01 ) is the completion time measured from the origin 0.
The relations � , � are the ranking as defined on FN (1) . We then fuzzify (1) - (4)
using (6) and (7) to obtain the following fuzzy job-shop scheduling problem:
~
min max [ max [ d ( c~ik , 01 )]]
1� k � m 1� i � n

s.t.

c~ik
c~

jk

c~ik

~
~
tik � ( L ( 1 � x ihk ))1 c~ih , i � 1, 2, ..., n , h, k � 1, 2, ..., m
~
~
c ik � ( L ( 1 � y ijk ))1 ~
t jk , i , j � 1, 2, ..., n , k � 1, 2, ..., m
~
01 , i � 1, 2, ..., n , k � 1, 2, ..., m

x ihk = 0 or 1, i � 1, 2, ..., n , k � 1, 2, ..., m
y ijk = 0 or 1, i , j � 1, 2, ..., n , k � 1, 2, ..., m

(8)
(9)
(10)
(11)
(12)

414

F.-T. Lin

~
Note that ( L ( 1 � x ihk ))1 is a fuzzy point at L (1 � xihk ) .
~
Since d ( c~ , 0 ) � c ,
ik

1

ik

1
~
�
~ ~
d (~
t jk , 01 ) � t jk � ( � jk 2 � � jk 1 ) , let t jk � d ( t jk , 01 ) .
4
We summarize (9)-(14) to obtain the following Property 1.

and

(13)
(14)

Property 1. The job-shop scheduling problem with imprecise processing time
modeled by fuzzy number is as follows:
(15)

min max [ max [ c ik ]]

s.t.

1� k � m 1�i � n
�
c ik � t ik � L (1 �

x ihk ) � c ih , i � 1, 2, ..., n , h, k � 1, 2, ..., m

c jk � cik � L(1 � y ijk ) �

�
t jk

, i , j � 1, 2, ..., n , k � 1, 2, ..., m

(16)
(17)

c ik � 0 , i � 1, 2, ..., n , k � 1, 2, ..., m

(18)

x ihk = 0 or 1, i � 1, 2, ..., n , h, k � 1, 2, ..., m

(19)

y ijk = 0 or 1, i , j � 1, 2, ..., n , k � 1, 2, ..., m

4

Computational Results

Consider an example from [11]. We compare the results obtained from Property 1
with that of the crisp job-shop scheduling problem using the Johnson’s constructive
algorithm. Johnson’s algorithm for, n / 2 / G / Fmax (i.e. n jobs, two machines, general
job-shop problem, to minimize makespan) problem is stated briefly as follows:
Suppose that the set of n jobs {J 1 , J 2 , ..., J n } may be partitioned into four types of
jobs.
Type A: Those to be processed on machine M 1 .
Type B: Those to be processed on machine M 2 .
Type C: Those to be processed on both machines in the order M 1 then M 2 .
Type D: Those to be processed on the machine in the order M 2 then M 1 .
Then the construction of an optimal schedule is straightforward, as follows:
(1) Schedule the jobs of type A in any order to give the sequence S A .
(2) Schedule the jobs of type B in any order to give the sequence S B .
(3) Schedule the jobs of type C according to Johnson’s algorithm for n / 2 / F / Fmax
(n jobs, 2 machines, flow-shop problem, to minimize makespan) problems to give
the sequence S C .
(4) Schedule the jobs of type D according to Johnson’s algorithm for n / 2 / F / Fmax
problems to give the sequence S D .

A Job-Shop Scheduling Problem with Fuzzy Processing Times

415

The example is the 9 / 2 / G / Fmax , nine jobs and two machines, with times and
processing order as given in Table 1.
Table 1. Processing order and times.

Job

First Machine

Second Machine

1
2
3
4
5
6
7
8
9

M 1 8 ( � t11 )

M 2 2 ( � t12 )

M 1 7 ( � t 21 )

M 2 5 ( � t 22 )

M 1 9 ( � t 31 )

M 2 8 ( � t 32 )

M 1 4 ( � t 41 )

M 2 7 ( � t 42 )

M 2 6 ( � t 52 )

M 1 4 ( � t 51 )

M 2 5 ( � t 62 )

M 1 3 ( � t 61 )

M 1 9 ( � t 71 )
M 2 1 ( � t 82 )

�
�

M 2 5 ( � t 92 )

�

An optimal crisp sequence for Table 1, obtained by Johnson’s algorithm is

Machine M 1
Machine M 2

Processing Sequence of jobs
(4, 3, 2, 1, 7, 5, 6)
(5, 6, 8, 9, 4, 3, 2, 1)

We can see that the total time Fmax = 44 for the optimal sequence. From Property 1,
we consider the following fuzzification for processing time t jk .
~
~
~
~
t11 � (8 � 2, 8, 8 � 4), t21 � (7 � 1, 7, 7 � 4), t31 � (9 � 3, 9, 9 � 1), t41 � ( 4 � 1, 4, 4 � 2),

~
~
~
t51 � ( 4 � 0.5, 4, 4 � 1), t61 � (3 � 0.6, 3, 3 � 1.5), t71 � (9 � 3, 9, 9 � 2),
~
~
~
~
t12 � ( 2 � 0.8, 2, 2 � 1), t22 � (5 � 1, 5, 5 � 2), t32 � (8 � 1, 8, 8 � 4), t 42 � (7 � 2, 7, 7 � 3),
~
~
~
~
t52 � (6 � 2, 6, 6 � 1), t62 � (5 � 0.9, 5, 5 � 2), t82 � (1 � 0.5, 1, 1 � 0.6), t92 � (5 � 2, 5, 5 � 1)
By (14) we obtain the following fuzzy processing times.
�

�

�

�

�

�

�

�

t11 � 8.5, t 21 � 7.75, t 31 � 8.5, t 41 � 4.25, t 51 � 4.125, t 61 � 3.225, t 71 � 8.75, t12 � 2.05,
�

�

�

�

�

�

�

t 22 � 5.25, t 32 � 8.75, t 42 � 7.25, t 52 � 5.75, t 62 � 5.275, t 82 � 1.025, t 92 � 4.75.

416

F.-T. Lin

Then we find an optimal schedule as follows:
Type A jobs: job 7 on M 1 .
Type B jobs: jobs 8 and 9 on M 2 in an arbitrary order (8,9).
Type C jobs: jobs 1, 2, 3, and 4 require M 1 first and then M 2 . Using Johnson’s
�

�

�

�

�

�

�

�

algorithm we obtain the relations t 31 � t 32 , t 41 � t 42 , and t 41 � t 31 ; t11 � t12 ,
�

�

�

�

t 21 � t 22 , and t12 � t 22 . Thus the sequence obviously is (4, 3, 2, 1).
Type D jobs: jobs 5 and 6 require M 2 first and then M 1 . Again, using Johnson’s
�

�

�

�

�

�

algorithm we obtain the relations t 51 � t 52 , t 61 � t 62 , and t 61 � t 51 . Note that M 1
now becomes the second machine. The sequence is therefore (5, 6).
Finally, an optimal sequence for Property 1 is

Machine M 1
Machine M 2

Processing Sequence of Jobs
(4, 3, 2, 1, 7, 5, 6)
(5, 6, 8, 9, 4, 3, 2, 1)

The processing sequence for jobs obtained from the fuzzy case is the same as that for
�

the crisp case. The total time is Fmax = 45.1 for the optimal sequence of Property 1.
We compare the result of Property 1with that of crisp case as follows:
�

Fmax � Fmax
Fmax

� 100 � 2.5% .

5 Conclusion
In this paper, we have investigated the fuzzy job-shop scheduling problem with
imprecise processing times. In conclusion, we point out that our work has produced
the following main results for the job-shop scheduling problem with fuzzy processing
times modeled as fuzzy numbers. In Section 3, we presented a fuzzy job-shop
scheduling problem based on triangular fuzzy numbers. In (14), if � jk 2 =
*

� jk 1 , �j , k , obviously, Fig. 1 is an isosceles triangle and we obtain t jk � t jk , �j , k .

Thus, the equations (15)-(19) will become the same as (1)-(5). If � jk 2 = � jk 1 = 0,
�j , k , the job-shop scheduling in the fuzzy sense of Property 1 will become the crisp
job-shop scheduling of equations (1)-(5). Therefore, the job-shop scheduling in the
fuzzy sense of Property 1 is an extension of the crisp scheduling of (1)-(5).

A Job-Shop Scheduling Problem with Fuzzy Processing Times

417

The interpretation of Fig. 1 is as follows: When � jk 2 > � jk 1 , �j , k , the triangle is
*

skewed to the right-hand side, thus obtaining t jk � t jk , �j , k . This means that the
completion time in the fuzzy sense is longer than in the crisp case. Conversely, when
� jk 2 < � jk 1 , �j , k , the triangle is skewed to the left-hand side, thus obtaining
*

t jk � t jk , �j , k , indicating that the completion time in the fuzzy sense is shorter than
�

the crisp case. From (14), we can see that t jk � t jk �

1
4

( � jk 2 � � jk 1 ) is the

�

processing time in the fuzzy sense, where t jk equals the crisp processing time, t jk ,
plus some variants due to the inclusion of fuzzy values.
The comparison of [10] with our work is as follows. Fortemps used six-point
fuzzy numbers to represent fuzzy durations and fuzzy makespan. In his approach, the
resulting fuzzy framework was not an extension of the original crisp problem. He
used a simulated annealing technique to solve the fuzzy model obtaining the
optimization sequence of the problem. In our approach, however, the crisp duration x
become an interval [x � �1 , x + � 2 ], 0 � �1 � x, 0 � � 2 , represents an allowable range
of duration. We let the fuzzy number ~
x = (x � � , x, x + � ; 1) correspond to the
1

2

interval [x � �1 , x + � 2 ]. Then we used a signed distance method for ranking fuzzy
numbers to obtain a fuzzy job-shop scheduling problem. After defuzzifying the fuzzy
problem using the signed distance ranking method, we obtained a job-shop scheduling
problem in the fuzzy sense. The resulting fuzzy framework in our approach is an
extension of the original crisp problem. Therefore, the algorithms that were used for
solving the crisp job-shop sequencing problem can also be used for solving the fuzzy
problem.

References
1.
2.
3.
4.
5.

Adams, J., Balas, E., and Zawack, D.: The Shifting Bottleneck Procedure for Job
Shop Scheduling. International Journal of Flexible Manufacturing Systems,
Vol.34, No. 3, (1987) 391-401
Applegate, D. and Cook, W.: A Computational Study of The Job-Shop
Scheduling Problem. ORSA Journal on Computing, Vol. 3, No. 2, (1991) 149156
Baker, K. R.: Introduction to Sequencing and Scheduling. John Wiley & Sons,
Inc., New York (1974)
Bellman, R. Esogbue, A., and Nabeshima, I.: Mathematical Aspects of
Scheduling and Applications. Pergamon Press, Oxford (1982)
Blackstone, J., Phillips D., and Hogg, G.: A State-of-The-Art Survey of
Dispatching Rules for Manufacturing Job Shop Operations. International Journal
of Production Research, Vol. 20, (1982) 26-45

418

6.

7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.

F.-T. Lin

Cheng, R. Gen, M. and Tsujimura, Y.: A Tutorial Survey of Job-Shop
Scheduling Problems Using Genetic Algorithms: Part I. Representation.
International Journal of Computers and Industrial Engineering, Vol. 30, No. 4,
(1996) 983-997
Croce, F., Tadei, R., and Volta, G.: A genetic algorithm for the job shop problem.
Computers and Operations Research, Vol. 22, (1995) 15-24
Coffman, E. G. Jr.: Computer and Job-Shop Scheduling Theory. John Wiley &
Sons, Inc., New York (1976)
Falkenauer, E. and Bouffoix, S.: A Genetic Algorithm for Job Shop. Proceedings
of the IEEE International Conference on Robotics and Automation, (1991) 824829
Fortemps, P.: Jobshop Scheduling with Imprecise Durations: A Fuzzy Approach.
IEEE Transactions on Fuzzy Systems, Vol. 5, No. 4, (1997) 557-569
French, S.: Sequencing and Scheduling: An introduction to the Mathematics of
the Job-Shop. John Wiley & Sons, Inc., New York (1982).
Garey, M., Johnson, D., and Sethi, R.: The Complexity of Flowshop and
Jobshop Scheduling. Mathematics of Operations Research, Vol. 1, (1976) 117129
Gen M., and Cheng, R.: Genetic Algorithms and Engineering Design, John
Wiley & Sons, Inc., New York (1997)
Ishii, H., Tada, M., and Masuda, T.: Two Scheduling Problems with Fuzzy Due
Dates. Fuzzy Sets and Systems, Vol. 46, (1992) 339-347
Ishibuchi, H., Yamamoto, N., Murata, T., and Tanaka, H.: Genetic Algorithms
and Neighborhood Search Algorithms for Fuzzy Flowshop Scheduling
Problems. Fuzzy Sets and Systems, Vol. 67, (1994) 81-100
Kerr, R. M. and Slany, W.: Research issues and challenges in fuzzy scheduling.
CD-Technical Report 94/68, Christian Doppler Laboratory for Expert Systems,
Technical University of Vienna, Austria (1994)
Krishna, K., Ganeshan, K. and Janaki Ram, D.: Distributed Simulated Annealing
Algorithms for Job Shop Scheduling. IEEE Transactions on Systems, Man, and
Cybernetics, Vol. 25, No. 7, (1995) 1102-1109
McCahon, C. S. and Lee, E. S.: Fuzzy Job Sequencing for A Flow Shop.
European Journal of Operational Research, Vol. 62, (1992) 294-301
van Laarhoven, P. J. M., Aarts, E. H. L, and Lenstra, J. K.: Job Shop Scheduling
by Simulated Annealing. Operations Research, Vol. 40, No. 1, (1992) 113-125

