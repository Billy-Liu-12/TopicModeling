Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1039 – 1046

International Conference on Computational Science, ICCS 2012

A second-order diagonally-implicit-explicit multi-stage integration
method
Hong Zhanga , Adrian Sandub,∗
a Computational

Science Laboratory, Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg, VA 24061
(zhang@vt.edu)
b Computational Science Laboratory, Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg, VA 24061
(sandu@cs.vt.edu)

Abstract
Implicit-explicit time stepping methods have proved useful for eﬃciently solving problems with both stiﬀ and
nonstiﬀ components. IMEX Runge-Kutta methods and IMEX multistep methods have been studied in the literature.
But there are no available IMEX general linear methods (IMEX-GLMs). In this paper, we construct IMEX schemes
based on diagonally-implicit multi-stage integration methods. The new algorithms have great potential for practical
use. Numerical results indicate the observed order of accuracy matches the theoretical order.
Keywords: implicit-explicit, general linear methods, diagonally-implicit multi-stage integration methods

1. Introduction
The implicit-explicit (IMEX) time integration schemes have been increasingly used for solving problems with
both stiﬀ and nonstiﬀ components, which may arise from a wide range of areas such as mechanical and chemical
engineering, astrophysics, meteorology and oceanography, and environmental science. Well-known examples include
advection-diﬀusion-reaction problems, systems containing ﬂuid-membrane interactions, and Navier-Stokes equations.
Such problems can all be expressed in a simpliﬁed model as
u˙ = f (u) + g(u),

(1)

where f corresponds to the nonstiﬀ term, and g corresponds to the stiﬀ term. An IMEX scheme treats the nonstiﬀ term
explicitly while handles the stiﬀ term implicitly, thereby gaining the beneﬁts from the low cost of explicit methods
and favorable stability properties of implicit methods.
IMEX linear multistep methods have been developed in [1, 2, 3], and IMEX Runge-Kutta methods have been built
in [4, 5, 6, 7]. These two families of IMEX methods have been accommodated into a generic framework based on the
unifying concept of general linear methods (GLMs), which was proposed by J.C Butcher [8]. This framework allows
easy switch between various explicit and implicit time-stepping methods and ﬁnally facilitate to ﬁnd more eﬃcient
methods and time-discretization veriﬁcation studies.
∗ Corresponding

author

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.112

1040

Hong Zhang and Adrian Sandu / Procedia Computer Science 9 (2012) 1039 – 1046

However, Runge-Kutta methods and linear multistep methods are only special cases of GLMs. There are a large
number of other possibilities for acceptable methods, among which diagonally implicit multistage integration methods
(DIMSIM) [9] are identiﬁed to be eﬃcient and accurate and to have great potentials for practical use. The added
complexity of GLMs such as DIMSIM improves the ﬂexibility to develop methods with better stability and accuracy
properties. To the best of our knowledge, there is no available IMEX schemes based on GLMs.
In this study, we propose a new family of implicit-explicit methods based on pairs of DIMSIMs, as an eﬀort toward
ambitious accommodation of all existing general linear methods into one uniﬁed framework.
2. General Linear Methods
2.1. Representation of General Linear Methods
Consider the initial value problem for an autonomous system of diﬀerential equations in the form
y (t) = f (y(t)), t ∈ [t0 , tF ],
y(t0 ) = y0 ,

(2)

f : Rm → Rm , y0 ∈ Rm . GLMs [10] for (2) can be represented by the abscissa vector c = [c1 , c2 , . . . , c s ]T , and a table
of four coeﬃcient matrices
U
,
V

A
B

A ∈ R s×s , U ∈ R s×r , B ∈ Rr×s and V ∈ Rr×r . On the uniform grid tn = t0 + nh,n = 0, 1, . . . , N,Nh = T − t0 , the ﬁxed
step size version of these methods takes the form
s

r

Yi = h

ui j y[n−1]
, i = 1, 2, . . . , s,
j

ai j f (Y j ) +
j=1

(3a)

j=1

s

r

y[n]
i =h

vi j y[n−1]
, i = 1, 2, . . . , r,
j

bi j f (Y j ) +
j=1

(3b)

j=1

where s is the number of internal stages and r is the number of external stages. Here, h is the step size, Yi is an
approximation to y(tn−1 + ci h) and y[n]
i is an approximation to the linear combination of the derivatives of y at the point
tn . The corresponding vector form is
Y = h(A ⊗ I)F(Y) + (U ⊗ I)y[n−1] ,
y[n] = h(B ⊗ I)F(Y) + (V ⊗ I)y[n−1] ,

(4a)
(4b)

where I is an identity matrix of the same dimension of the ODE system (m).
The stability function p(w, z) is deﬁned by the formula
p(w, z) = det(wI − M(z)),

(5)

w ∈ C and M is the stability matrix deﬁned by
M(z) = V + zB(I − zA)−1 U.

(6)

2.2. Diagonally implicit multistage integration methods
Diagonally implicit multistage integration methods (DIMSIMs), as a subclass of GLMs, was proposed by Butcher
[8] to overcome the limitations of linear multistep methods and Runge-Kutta methods (lack of A-stability of high
order linear multistep methods and low stage order for implicit Runge-Kutta methods). This class of methods is
characterized by the following properties:
1. A is lower triangular with the same element λ on the diagonal;

Hong Zhang and Adrian Sandu / Procedia Computer Science 9 (2012) 1039 – 1046

1041

2. V is a rank 1 matrix with nonzero eigenvalue equal to 1 to guarantee preconsistency;
3. Order p, stage order q, number of external stages r, number of internal stages s are related by p = q or p = q + 1
and r = s or r = s + 1.
DIMSIMs can be classiﬁed into four types according to the classiﬁcation of GLMs introduced in [8]. Type 1 or type
2 methods are those with arbitrary aii and λ = 0 or λ 0 and they are suited for non-stiﬀ or stiﬀ diﬀerential systems
respectively in a sequential computing environment. Type 3 or type 4 methods are corresponding parallel versions
requiring all non-diagonal elements in A be zero. Various DIMSIMs have been constructed with some speciﬁc stability
properties. For type 1 and type 2 methods, it is usually desired that they have the inherited Runge-Kutta stability
[11, 12].
Next we brieﬂy review the construction of type 1 DIMSIMs with p = q = r = s, U = I, and V = evT , where
t
v e = 1 since we will need to follow some procedures here when constructing IMEX-DIMSIM schemes. For details
regarding construction of Type 2 methods, we refer readers to [10].
Imposing the appropriate stage order and order conditions and additional stability requirement results in large
systems of polynomial equations for the remaining unknown parameters of the methods. If the order of the methods
is less than 5, these systems can be generated and solved symbolic manipulation packages such as MATHEMATICA
or MAPLE.
By design, the stability function p(w, z) has the form
p(w, z) = w s−1 (w − R(z)),

(7)

where R(z) is the stability function of RK method of order p = s. It can be demonstrated that the stability function of
DIMSIM of type 1 is a polynomial of the form
p(w, z) = w s − p1 (z)w s−1 + · · · + (−1) s−1 p s−1 (z)w + (−1) s p s (z),

(8)

where
= 1 + p11 z + p12 z2 + · · · + p1s z s ,

p1 (z)

= p21 z + p22 z2 + · · · + p2s z s ,
..
.
p s−1 (z) = p s−1,s−2 z s−2 + p s−1,s−1 z s−1 + p s−1,s z s ,
p s (z) = p s,s−1 z s−1 + p ss z s .
p2 (z)

Note that the coeﬃcients pi j of the polynomials pi (z) depend on ai j , vi . This leads to the system of (s − 1)(s + 2)/2
nonlinear equations
(9)
pkl = 0, k = 2, 3, . . . , s, l = k − 1, k, . . . , s,
with respect to (s − 1)(s + 2)/2 unknowns ai j and vi .
It is proved in [10] that the DIMSIM (A, U, B, V) has order p and stage order q equal to q = p = r = s if and only
if
(10)
B = B0 − AB1 − VB2 + VA,
where B0 , B1 , and B2 are s × s matrices with elements deﬁned by
1+ci
0

φ j (x)dx φ j (1 + ci )
,
,
φ j (c j )
φ j (c j )

and φi (x) is evaluated by

ci
0

φ j (x)dx

φ j (c j )

s

φi (x) =

(x − c j ), i = 1, 2, . . . , s.
j=1, j i

,

(11)

1042

Hong Zhang and Adrian Sandu / Procedia Computer Science 9 (2012) 1039 – 1046

To generate dense output, we consider approximations for hk yk (tn ) of the form
r

s

γk j y[n−1]
,
j

βki f (Yi ) +

hk yk (tn ) ≈
i=0

k = 0, 1, . . . , r.

j=0

It is shown in [8, 13] that these approximations are correct within O(h p+1 ) if and only if
˜ cz + Vw(z)
˜
[1, z, . . . , z p ]T ez = z Be
+ O(z p+1 )
p
j=0

where V˜ = [βki ], V˜ = [γki ], ecz = [ec1z , . . . , ecs z ]T and w(z) =
step, we can simply use the ﬁrst equation in 12 when k = 0,
s

y(tn ) ≈

(12)

α j z j . If we want to generate the solution at the last

r

γ0 j y[n−1]
.
j

β0i f (Yi ) +
i=0

(13)

j=0

3. Construction of IMEX-DIMSIM schemes
To derive an IMEX scheme, ﬁrstly we cast the system (1) as a partitioned system,
x˙ = fˆ(x, y),
y˙ = gˆ (x, y),

(14a)
(14b)

with u = x + y, fˆ = f (x + y) and gˆ = g(x + y). Applying a type 1 DIMSIM with p = q = r = s and U = I to equation
(14a) and a type 2 DIMSIM also with p = q = r = s and U = I to equation (14b) yields
s

aˆ i j f (X j + Y j ) + xi[n−1] , i = 1, 2, . . . , s,

Xi = h

(15a)

j=1
s

r

xi[n] = h

vˆ i j x[n−1]
, i = 1, 2, . . . , r,
j

bˆ i j f (X j + Y j ) +
j=1

(15b)

j=1

and
s

ai j g(X j + Y j ) + y[n−1]
, i = 1, 2, . . . , s,
i

Yi = h

(16a)

j=1
s

y[n]
i =h

r

vi j y[n−1]
, i = 1, 2, . . . , r.
j

bi j g(X j + Y j ) +
j=1

(16b)

j=1

Combine (15) and (16), and we have
⎛ s
⎞
s
⎜⎜⎜
⎟⎟⎟
⎜
ai j g(X j + Y j )⎟⎟⎟⎠ + xi[n−1] + y[n−1]
, i = 1, 2, . . . , s,
(17a)
Xi + Yi = h ⎜⎜⎝ aˆ i j f (X j + Y j ) +
i
j=1
j=1
⎛ s
⎞
s
r
r
⎜⎜⎜
⎟⎟⎟
⎜⎜⎝ bˆ i j f (X j + Y j ) +
xi[n] + y[n]
bi j g(X j + Y j )⎟⎟⎟⎠ +
vˆ i j x[n−1]
+
vi j y[n−1]
, i = 1, 2, . . . , r, (17b)
i = h⎜
j
j
j=1

j=1

j=1

j=1

If the type 2 DIMSIM (implicit) scheme shares the same abscissa vector c = [c1 , c2 , . . . , c s ]T and the same coeﬃcient
matrix V with the type 1 DIMSIM (explicit) scheme, Xi and Yi can be added up at at all internal stages. Then we

Hong Zhang and Adrian Sandu / Procedia Computer Science 9 (2012) 1039 – 1046

1043

can deﬁne a new internal stage vector as Zi = Xi + Yi and obtain the IMEX-DIMSIM (or diagonally-implicit-explicit
multi-stage integration method)
⎛ s
⎞
s
⎜⎜⎜
⎟⎟⎟
⎜
ai j g(Z j )⎟⎟⎟⎠ + xi[n−1] + y[n−1]
, i = 1, 2, . . . , s,
(18a)
Zi = h ⎜⎜⎝ aˆ i j f (Z j ) +
i
j=1
j=1
⎛ s
⎞
s
r
⎜⎜⎜
⎟⎟⎟
[n]
[n]
xi + yi = h ⎜⎜⎜⎝ bˆ i j f (Z j ) +
bi j g(Z j )⎟⎟⎟⎠ +
vi j x[n−1]
+ y[n−1]
, i = 1, 2, . . . , r,
(18b)
j
j
j=1

j=1

j=1

The derived IMEX-DIMSIM scheme can also be seen as a partitioned DIMSIM scheme. We note that for (18) xi
and yi need not to be known individually once they are initialized before the ﬁrst step. The combined quantity xi + yi
advances at each step as other normal DIMSIMs do.
According to the deﬁnition of DIMSIM, the initial values xi[0] and y[0]
i should approximate linear combinations
r

r

αˆ ik hk x(k) (t0 )

αik hk y(k) (t0 )

and

k=0

k=0

respectively where
αˆ 0 = e,
α0 = e,

ˆ i−1
ci
Ac
−
,
i! (i − 1)!
Aci−1
ci
.
αi = −
i! (i − 1)!

αˆ i =

Thus
xi[0] + y[0]
i
r

=

x(t0 ) + y(t0 ) + αˆ i1 hx (t0 ) + αi1 hy (t0 ) +

r

αˆ ik hk x(k) (t0 ) +
k=2

r

=

u(t0 ) + αˆ i1 h f (u(t0 )) + αi1 hg(u(t0 )) +

αik hk y(k) (t0 )
k=2

r

αˆ ik hk x(k) (t0 ) +
k=2

αik hk y(k) (t0 ).
k=2

Evaluation of the ﬁrst three terms is straightforward. But approximations of the other terms containing derivatives
x(k) (t0 ) and y(k) (t0 ) (of order higher than 1) remain to be further addressed if their analytical expressions are hard to
obtain.
To generate the solution at the last time step u(tF ) using (13), we must put more constraints on the coeﬃcients γ.
For type 1 DIMSIMs, if we choose the abscissa vector to be [0, c2 , . . . , c s ] s , the ﬁrst element of the vector y is exactly
the solution at the current step since α00 = 1 and α0i = 0 for i > 0 according to order conditions. In this case, β0 is
equal to the ﬁrst row of coeﬃcient matrix B while γ0 to the ﬁrst row of V. For type 2 DIMSIMs, there are usually
some free parameters left in B˜ and V˜ after satisfying (10). These free parameters could be chosen in such a way that
the type 1 DIMSIM shares the same coeﬃcients γ0 with the type 2 DIMSIM, and the diﬃculty of computing terms
and y[n−1]
individually can be avoided. We will illustrate this with speciﬁc examples in the following.
x[n−1]
j
j
4. A two-stage, second-order pair with p = q = r = s = 2
A second-order accurate type 2 DIMSIM with exactly the same linear stability as the diagonally-implicit RungeKutta method is [9]
⎤
⎡ 2− √2
⎥⎥⎥
⎢⎢⎢
0
1
0
2
√
⎥⎥
⎢⎢⎢⎢ 2 √2+6
2− 2
⎢⎢⎢
0√
1 ⎥⎥⎥⎥⎥
7
2
√
√
√
⎥⎥ .
⎢⎢⎢ 73−34 2 4 2−5 3− 2
2−1 ⎥
⎥⎥⎥
⎢⎢⎢
28 √
4√
2√
√2
⎥
⎢⎣ 87−48
2
3− 2
2−1 ⎦
1− 2
28

4

2

2

1044

Hong Zhang and Adrian Sandu / Procedia Computer Science 9 (2012) 1039 – 1046

The corresponding type 1 DIMSIM should have the same U, V and abscissa vector [0, 1]. Thus the only free parameter
is aˆ 21 since B is determined by A, V and abscissa vector in (10) as required by the order condition.
The stability polynomial is
√
√
√
√
√
√
⎡
⎤
⎢⎢⎢
6 − 2 + ( 2 − 3)ˆa21
(3 − 2)ˆa21 2 ⎥⎥⎥ ( 2 − 3)ˆa21 − 2 + 4
( 2 − 3)(ˆa21 − 2) 2
2
z+
z )⎦⎥ +
z+
z .
p(w, z) = w − w ⎣⎢1 +
2
4
2
4
(19)
Inheriting Runge-Kutta stability requires the coeﬃcients p21 = 0 and p22 = 0. However these two equations can not
be fulﬁlled at the same time. We choose to meet the condition p22 = 0, which yields aˆ 21 = 2, just to make its stability
properties ’close’ to Runge-Kutta methods. The resulting type 1 DIMSIM is
⎡
⎢⎢⎢
⎢⎢⎢
⎢⎢⎢
⎢⎢⎢
⎢⎢⎢
⎣

0
2
√

3 2−1
√4
3 2−3
4

0
0√

3− 2
4√
1− 2
4

1
0√

3− 2
2√
3− 2
2

0
1
√

2−1
√2
2−1
2

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥ .
⎥⎥⎥
⎦

Actually in the combination we can make only one of the two methods to inherit RK or SDIRK stability because there
are not enough free parameters to ﬁt the stability requirement. And it is much more important to impose good stability
on the type 2 DIMSIM dealing with stiﬀ terms.
According to the equation (13), the ﬁnal solution can be approximated within the desired order by applying the
following formula
u(tn ) ≈

βˆ 01 f (Z1 ) + βˆ 02 f (Z2 ) + β01 g(Z1 ) + β02 g(Z2 ) + γˆ 01 x1[n−1] + γˆ 02 x2[n−1] + γ01 y[n−1]
+ γ02 y[n−1]
.
1
2

(20)

Since c0 = 0, coeﬃcients for the type 1 DIMSIM equal to the ﬁrst rows of B and V
√
√
√
√
2−1
3 2−1
3− 2
3− 2
, βˆ 02 = bˆ 12 =
, γˆ 01 = v11 =
, γˆ 02 = v12 =
.
βˆ 01 = bˆ 11 =
4
4
2
2
Solving the order condition (12) gives
β01
γ01

√
√
√
√
73 − 34 2 43 − 31 2
−1 + 2 2 −4 + 3 2
=
+
g, β02 =
+
g,
28
28
4
4
√
√
√
√
3− 2 2− 2
2−1
2−2
=
+
g, γ02 =
+
g.
2
2
2
2

The choice of the free parameter g = 0 can make γ01 = γˆ 01 and γ02 = γˆ 02 , leading to
) + γˆ 02 (x2[n−1] + y[n−1]
),
u(tn ) ≈ βˆ 01 f (Z1 ) + βˆ 02 f (Z2 ) + β01 g(Z1 ) + β02 g(Z2 ) + γˆ 01 (x1[n−1] + y[n−1]
1
2

(21)

where the quantity x[n−1] + y[n−1] can be obtained directly by the time stepping scheme (18) we developed.
5. Numerical results
To conﬁrm the theoretical order of our derived IMEX-DIMSIM scheme, we conduct some tests on the nonlinear
van der Pol equation on the time interval [0, 0.5]
y
z

= f (y, z) + g(y, z) =

with initial values
y(0) = 2,

z
0

+

0
(1 − y2 )z − y /ε

292 2
1814 3
2 10
ε −
ε + O(ε4 ).
z(0) = − + ε −
3 81
2187
19683

(22)

(23)

Hong Zhang and Adrian Sandu / Procedia Computer Science 9 (2012) 1039 – 1046

1045

−3

10

−4

10

−5

global error

10

−6

10

−7

10

−8

10

second−order IMEX−DIMSIM
second−order IMEX−RK

−9

10

−4

−3

10

−2

10

10

−1

10

step size h
Figure 1: global error vs step size for the van del Pol equation

We choose the stiﬀness parameter ε = 0.001 to make the problem stiﬀ. In our experiment, step sizes h0 , h0 /2,
h0 /4 and h0 /8 with h0 = 0.01 were used. And the initialization of the quantity xi + yi was done by computing the
analytic derivatives by hand. For reference solutions, we used MATLABs ode15s routine with very small tolerances
atol = rtol = 2.22045e − 14.
We compare the diagonally-implicit-explicit multi-stage integration method with implicit-explicit midpoint method,
which is a second-order IMEX Runge-Kutta method considered in [4]. In Figure 1 we have plotted the global error,
measured in the L2 norm, against step size h. Both methods show an observed order of 2, which agrees exactly with
the predicted order of accuracy. For the same step size, our method is more accurate than the second order IMEX
Runge-Kutta method.
6. Conclusions and future work
In this paper we have introduced a new class of IMEX schemes based on pairs of diagonally-implicit multi-stage
integration methods to ﬁll in the gap where no existing IMEX-GLMs have been developed. We show the construction
of a second-order diagonally-implicit-explicit multi-stage integration method and provide the corresponding coeﬃcients. Numerical experiment on the stiﬀ van del Pol equation conﬁrms that their observed orders match the theoretical
results.
In the future work we will develop IMEX-DIMSIMs of higher orders and investigate their properties such as
stability and convergence, as well as their advantages compared to other existing IMEX schemes. There are also some
implementation issues that deserve further exploration.
Acknowledgement
This work has been supported in part by NSF through awards NSF OCI-8670904397, NSF CCF-0916493, NSF
DMS-0915047, NSF CMMI-1130667, and by the Computational Science Laboratory at Virginia Tech.
References
[1] U. M. Ascher, S. J. Ruuth, B. T. R. Wetton, Implicit-explicit methods for time-dependent partial diﬀerential equations, SIAM Journal on
Numerical Analysis 32 (3) (1995) pp. 797–823.

1046

Hong Zhang and Adrian Sandu / Procedia Computer Science 9 (2012) 1039 – 1046

[2] J. Frank, W. Hundsdorfer, J. Verwer, On the stability of implicit-explicit linear multistep methods, Applied Numerical Mathematics 25 (23)
(1997) 193 – 205, special Issue on Time Integration. doi:10.1016/S0168-9274(97)00059-7.
[3] W. Hundsdorfer, S. J. Ruuth, IMEX extensions Of linear multistep methods with general monotonicity, Journal of Computational Physics
225 (2) (2007) 2016 – 2042.
[4] U. M. Ascher, S. J. Ruuth, R. J. Spiteri, Implicit-explicit Runge-Kutta methods for time-dependent partial diﬀerential equations, Appl. Numer.
Math 25 (1997) 151–167.
[5] S. Boscarino, On an accurate third order implicit-explicit Runge–Kutta method for stiﬀ problems, Appl. Numer. Math. 59 (2009) 1515–1528.
doi:10.1016/j.apnum.2008.10.003.
[6] L. Pareschi, G. Russo, Implicit-explicit Runge-Kutta schemes and applications to hyperbolic systems with relaxation, Journal of Scientiﬁc
Computing 3 (2000) 269–287.
[7] J. Verwer, B. Sommeijer, W. Hundsdorfer, RKC time-stepping for advectiondiﬀusionreaction problems, Journal of Computational Physics
201 (1) (2004) 61 – 79. doi:10.1016/j.jcp.2004.05.002.
[8] J. C. Butcher, Z. Jackiewicz, Diagonally implicit general linear methods for ordinary diﬀerential equations, BIT Numerical Mathematics 33
(1993) 452–472, 10.1007/BF01990528.
[9] J.C., Butcher, Diagonally-implicit multi-stage integration methods, Applied Numerical Mathematics 11 (5) (1993) 347 – 363.
doi:10.1016/0168-9274(93)90059-Z.
[10] Z. Jackiewicz, General linear methods for ODE, John Wiley & Sons, Inc., 2009. doi:10.1002/9780470522165.fmatter.
[11] W. M. Wright, General linear methods with inherent Runge-Kutta stability, Ph.D. thesis, The University of Auckland (2002).
[12] J. Butcher, W. Wright, The construction of practical general linear methods, BIT Numerical Mathematics 43 (2003) 695–721,
10.1023/B:BITN.0000009952.71388.23.
[13] J. C. Butcher, Z. Jackiewicz, Implementation of diagonally implicit multistage integration methods for ordinary diﬀerential equations, SIAM
Journal on Numerical Analysis 34 (6) (1997) pp. 2119–2141.

