An NC Algorithm for Edgesum Problem on Trees 1

An NC Algorithm for Edgesum Problem on Trees
1

2

3

Indra Rajasingh , Jasintha Quadras , Paul Manuel
1

Department of Mathematics, Loyola College, Chennai
India 600 034
indrarajasingh@yahoo.com
2
Department of Mathematics, Stella Maris College, Chennai
India 600 086
jquadras@yahoo.com
3
Department of Information and Computer Science,
King Fahd University of Petroleum and Minerals, Dhahran,
Saudi Arabia 31261
manuel@ccse.kfupm.edu.sa

Abstract. We provide a simple NC algorithm to construct an embedding of a
path on a tree. Using this embedding, we solve the edgesum problem amd the
congestion problem of a path on trees.

Keywords : Fixed interconnection parallel architecture, cycle, tree, embedding,
labeling, dynamic algorithm, NC-algorithm, P-Complete, NP-Complete,
bandwidth, dilation, congestion, edgesum.

1. Introduction
Let G and H be finite graphs with n vertices. V(G) and V(H) denote vertex set of G
and H respectively. E(G) and E(H) denote the edge set of G and H respectively. A 1–1
mapping f: V(G)• V(H) is called embedding of G into H. H is normally called a host
graph. The graph G that is being embedded is sometimes called the virtual graph or
the guest graph. Some literatures use the name labeling instead of embedding. We
may use both terminologies here.
1.1 The Edgesum Problem
For an embedding f of G into H, Sf (G, H) is given by
S

f

(G , H ) =

∑

d

( u , v )∈ E ( G )

H

( f ( u ), f ( v ))

The edgesum S (G, H) of a graph G into H is defined by
S ( G , H ) = min
f

S

f

(G , H )

An NC Algorithm for Edgesum Problem on Trees 2

where the minimum is taken over all embeddings of G into H. The edgesum problem
of graph G into H is to find an embedding of G into H that induces the edgesum S(G,
H).
1.2 The Congestion Problem
The congestion of an embedding f of G into H is the maximum number of edges of
the guest graph that are embedded on any single edge of the host graph. Normally an
embedding f of G into H defines vertices of V(G) into V(H) and does not define the
edges of E(G) into E(H). In the congestion problem, we need the information how the
edges of E(G) are embedded into E(H). For every edge (u, v) of G, there are several
paths between its images f(u) and f(v) in H. Let us assume that the embedding f of G
into H defines the path between f(u) and f(v) in H for every edge (u, v) of G. Let us
say Pf (f(u),f(v)) denotes the path between f(u) and f(v) in H for the edge (u, v) of G
defined by f. This may be expressed in a mathematical format. Let Cf (G, H(e)) denote
the number of edges (u, v) of G such that e is in the path Pf (f(u),f(v)) between f(u) and
f(v) in H. In other words,
C f ( G , H ( e )) = | {( u , v ) ∈ E ( G ) / e ∈ P f ( f ( u ), f ( v ))} |
where Pf (f(u),f(v)) denotes the path of f between f(u) and f(v) in H. Then the
congestion of an embedding f of G into H is given as
C

f

(G , H ) =

max

e∈ E ( H )

C

f

( G , H ( e ))

The congestion of a graph G into H is defined as
C ( G , H ) = min
f

C

f

(G , H )

The congestion problem of a graph G into H is to find an embedding of G into H that
induces the congestion C(G, H).
Let Pn, and Tn denote a path and a complete binary tree respectively with the vertex set
V = {1, 2, 3, …n}. To distinguish the host graph, we call a vertex of a host graph as a
node. Since Tn is the host graph in this article, a vertex of Tn will be called a node
henceforth. The height of Tn is denoted by h and the diameter by d.
This graph embedding and edgesum arise from VLSI designs, data structures and data
representations, networks for parallel computer systems, biological models that deal
with cloning and visual stimuli, parallel architecture, structural engineering and so on
[LaWi99]. The edgesum problem of an arbitrary graph on a path is called linear
layout or the linear arrangement problem in VLSI literature [LaWi99]. The concept of
embedding is widely studied in the literature of fixed interconnection parallel
architectures [Leig92]. A parallel architecture is embedded into another architecture
to simulate one on another. Not surprisingly, the best embeddings are those for which
the dilation, expansion, congestion, edgesum, and load are all small. This is because

An NC Algorithm for Edgesum Problem on Trees 3

these measures bound the speed and efficiency with which a host graph can simulate
the guest graph.

2. Overview of the Paper
Most of the works on the edgesum problem are on the particular case in which the
host graph is a path [LaWi99], or a cycle [Lin97, LaWi99, Zhou00]. The edgesum
problem for an arbitrary graph on a path was shown to NP-complete [LaWi99].
In this paper the guest graph is a path. and the host graph is a tree. To our knowledge,
there are no research papers on the edgesum problem of a path on a tree. But
Klugerman et al. [KlRuSu98] have studied the edgesum problem of a complete graph
on hypercubes. We study the edgesum problem of a path on a tree and estimate the
edgesum as 2(n – 1) - d. Then we provide an NC algorithm to achieve this estimate.
Similarly, we don’t find any result on the congestion problem of a path on a tree
though there are a variety of results and discussions on other architectures such as tree
on star [TsChJuCh99], tree on pancake [FaHs00], planar graph on rectangular grid
[LiMoSi98], n-cube on rectangular grid [BeChHaRoSh00], tree on grid and extended
grid [OpSo00], tree on hypercube [MaUe99], mesh of array on hypercube etc
[Leig92]. We prove that C(Pn, Tn) = 2.
We like to point out that the host graph is a (almost) complete binary tree. All our
results on complete binary tree are extendable to any N-node rooted tree. We consider
complete binary tree for the sake of simplicity.
Let us describe the strategy we employ here to derive an NC-algorithm to solve the
edgesum problem of a path on trees. Inorder traversal on a tree is a widely known
technique [CoLeRiSt01]. This traversal is used to read the labels of the tree and
outputs the inorder listing of the labels. Here we use this technique to assign labels
{a , a ,…, a }into the nodes of the tree. Let us assume that a binary tree Tn is assigned
lables {a , a ,…, a } using inoder traversal. Then the binary tree Tn with these labels
satisfy binary search tree property [CoLeRiSt01] if a , • a , • … •, a . Most importantly,
this assignment achieves the edgesum S(Pn, Tn).But the inorder traversal in inherently
sequential [Re85]. Hence we construct an embedding based on bfs traversal, which
leads to a parallel algorithm. We use the inorder assignment (embedding) to show the
proof of correctness of the parallel algorithm.
1

2

n

1

2

n

1

2

n

3. The Edgesum Problem of a Cycle on a Complete Binary Tree

Lemma 3.1. The edgesum of a path on a complete binary tree is at least 2(n–1) – d
where d is the diameter of the tree.

An NC Algorithm for Edgesum Problem on Trees 4

Proof . Let f be an arbitrary embedding of Pn into Tn. It is assumed that the vertices of
Pn are ordered from 1 to n in a row. See Fig 3.1. Moreover, 1 and n are the end
vertices of Pn. Let P[1,n] denote the path joining labels f (1) and f (n) in Tn. Let e be an
edge of Tn but not in P[1,n]. Say T1 and T2 are the two components of Tn – e and the
labels f (1) and f (n) are in T1. See Fig3.2.

Let m be a vertex of Pn such that f (m) is in T2. Since f (1) is in T1 and f (m) is in T2,
there exists an edge (a, b) of Pn such that f (a) is in T1 and f (b) is in T2 where 1 • a, b •
m. Similarly, since f (m) is in T2 and f (n) is in T1, there exists an edge (r, s) of Pn such
that f (r) is in T2 and f (s) is in T1 where m • r, s • n. Thus e is covered by at least two
edges (a,b) and (r,s) of Pn. It means that e is counted for the edgesum at least twice.
This is true for every e which is not in P[1,n].
Since the length of P[1,n] is at most d, we have Sf(Pn, Tn ) • 2(n–1) – d. •
Now we design an embedding f of Pn into Tn that will induce an edgesum of 2
( n -1)– d.
Bfs-algorithm 3.2. The algorithm assigns a label to each node of Tn in bfs traversal.
See Fig 3.3. The labeling assignment starts at the root. The vertex set of a path Pn is
{1, 2, 3,…, n}.
1. labeling the root of Tn:
The root is labeled as • + 1 where • is the number of its left descendants.
2. labeling the left child of the root:
The left child of the root is labeled as •1 + 1 where •1 is the number of its left
descendants.
3. labeling the right child of the root:
The right child of the root is labeled as n – •2 where •2 is the number of its left
descendants
4. labeling the descendants of the left child of the root:
If a node is labeled x then
label its right child as x + l ( xR ) + 1
label its left child as x – r (xL) – 1;
5. labeling the descendants of the right child of the root:
If a node is labeled x then

An NC Algorithm for Edgesum Problem on Trees 5

label its right child as x – l (xR) – 1
label its left child as x + r (xL) + 1;
Where
• xR is the right child of node labeled x.
• xL is the left child of node labeled x.
• l ( xR ) is the number of left descendants of xR (the right child of node x).
• r (xL) is the number of right descendants of xL (the left child of node x).
End of bfs-algorithm.

Now we explain another algorithm, which is a minor modification of inorder traversal
[CoLeRiSt01]. We need this algorithm to prove the proof of correctness of bfsalgorithm 3.2.
Inorder-algorithm 3.3. This algorithm divides the tree Tn into two subtrees, that is,
the left subtree of the root and the right subtree of the root. The nodes of the left
subtree are assigned labels in an inorder traversal. While the left subtree of the root is
traversed in inorder, its nodes are assigned labels 1, 2, …, • respectively where • is the
number of left descendants of the root. See Fig 3.3.
The root is assigned a label •+1. Then in the same way, the right subtree of the root is
traversed in inorder. While the right subtree of the root is traversed in inorder, its
nodes are assigned labels n, n – 1,…, • +2 respectively.
End of inorder-algorithm.
Using induction hypothesis on the height of the tree Tn, we can prove the following
observation.

An NC Algorithm for Edgesum Problem on Trees 6

Lemma 3.4. The labeling generated by bfs-algorithm and inorder-algorithm are the
same.
The proof of the following lemma is a direct consequence of lemma 3.4.
Lemma 3.5. The embedding f of Pn into Tn is well defined (that is 1-1).
Remark: The labeling of inorder traversal satisfies a property called binary search tree
property [CoLeRiSt01]. This important property of a binary search tree is that all
labels in the left subtree of any node x are all less than x, and all labels in the right
subtree of x are greater than x.
Thus the labeling of the left subtree of the root of Tn satisfies binary search tree
property. The labeling of the right subtree of the root of Tn satisfies binary search tree
property in the reverse order. That is, all labels in the left subtree of any node x (in the
right subtree of the root) are all greater than x, and all labels in the right subtree of x
are less than x.
Lemma 3.6. Sf (Pn, Tn) • 2(n-1)– d.
Proof: Let P[1,n] denote the path joining labels 1 and n in Tn
Claim 1: every edge of P[1,n] is covered by exactly one edge of Pn.
The proof of the claim 1 follows from the fact the labeling satisfies the binary search
tree property. Let (a, b) be an edge of P[1,n] in the left subtree of the root of Tn such
that a < b. Then by using binary search tree property, it is true that (b – 1, b) is the
only edge in Pn which covers the edge (a, b) of Tn. In the same way, let (c, d) be an
edge of P[1,n] in the right subtree of the root of Tn such that c > d. Then (d, d+1) is
the only edge in Pn that covers the edge (c, d) of Tn.
In the same way we can prove the next claim too.
Claim 2: every edge of Tn – P[1,n] is covered by exactly two edges of Pn.
The proof of lemma 5.7 follows from the two claims.•
Time complexity. It is known that bfs traversal is in NC class [Leig92]. The bfsalgorithm 3.2 traverses the tree in bfs order calculating l (xR ) and r (xL ) at every node
of the tree. The l (xR ) and r (xL ) which are the number of left and right descendants of
a node can be calculated in constant time. Thus it is straightforward to state that the
edgesum problem of path on a binary tree is in NC class.
Regarding the inorder-algorithm 3.3, it is a dfs traversal, which is inherently
sequential [Re85].

An NC Algorithm for Edgesum Problem on Trees 7

Theorem 3.7. S (Pn, Tn) = 2(n-1)– d . The edgesum problem of a path Pn on a
complete binary tree is in NC class.
Corollary 3.8. Cf (Pn, Tn) = 2, , where f is constructed by bfs-algorithm 3.2.
Theorem 3.9. C (Pn, Tn) = 2. The congestion problem of a path Pn on a complete
binary tree is in NC class.

4. Conclusion
In this paper, the host graph is a complete binary tree. This can be extended to any
rooted trees to obtain sequential algorithms. One has to modify the inorder traversal
accordingly. But constructing parallel algorithms for arbitrary trees is a challenging
task.

References
[BeChHaRoSh00] Bezrukov, S. L.; Chavez, J. D.; Harper, L. H.; Röttger, M.; Schroeder, U.-P.,
The congestion of $n$-cube layout on a rectangular grid, Selected topics in discrete
mathematics (Warsaw, 1996). Discrete Math. 213 (2000), no. 1-3, 13--19.
[CoLeRiSt01] Cormen , Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Cliff,
Introduction to Algorithms, published by MIT Press and McGraw-Hill. (Second Edition,
2001).
[FaHs00] Fang, Wei-Chen; Hsu, Chiun-Chieh, On the fault-tolerant embedding of complete
binary trees in the pancake graph interconnection network, Inform. Sci. 126 (2000), no. 1-4,
191 – 204.
[KlRuSu98] Klugerman, Michael; Russell, Alexander; Sundaram, Ravi, On embedding
complete graphs into hypercubes, Discrete Math. 186 (1998), no. 1-3, 289 – 293.
[LaWi99] Lai, Yung-Ling; Williams, Kenneth, A survey of solved problems and applications
on bandwidth, edgesum, and profile of graphs, J. Graph Theory 31 (1999), no. 2, 75 – 94.
[Leig92] Leighton, Thomas F., Introduction to parallel algorithms and architecture: Arrays,
Trees, Hypercubes, Morgan Kaufmann Publishers, 1992, ISBN 1-55860-117-1.
[LiMoSi98] Liu, Yanpei; Morgana, Aurora; Simeone, Bruno, A linear algorithm for 2-bend
embeddings of planar graphs in the two-dimensional grid, Discrete Appl. Math. 81 (1998),
no. 1-3, 69 – 91.
[Lin97] Lin, Yixun, Minimum bandwidth problem for embedding graphs in cycles, Networks
29 (1997), no. 3, 135 – 140.
[MaUe99] Matsubayashi, Akira; Ueno, Shuichi, Small congestion embedding of graphs into
hypercubes, Networks 33 (1999), no. 1, 71 – 77.
[OpSo00] Opatrny, J; Sotteau, D., Embeddings of complete binary trees into grids and extended
grids with total vertex-congestion $1$, Discrete Appl. Math. 98 (2000), no. 3, 237--254.
[Re85] Reif, John H., Depth-first search is inherently sequential, Inform. Process. Lett. 20
(1985), no. 5, 229--234.
[TsChJuCh99] Tseng, Yu-Chee; Chen, Yuh-Shyan; Juang, Tong-Ying; Chang, Chiou-Jyu,
Congestion-free, dilation-2 embedding of complete binary trees into star graphs, Networks
33 (1999), no. 3, 221 – 231.

An NC Algorithm for Edgesum Problem on Trees 8
[Zhou00] Zhou, Sanming, Bounding the bandwidths for graphs Combinatorial algorithms,
Theoret. Comput. Sci. 249 (2000), no. 2, 357 – 368.

