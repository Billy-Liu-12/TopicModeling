Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 1136 – 1144

International Conference on Computational Science, ICCS 2013

Iterative Methods for Pricing American Options under the Bates
Model
Santtu Salmia , Jari Toivanena,b,∗, Lina von Sydowc
a Department

of Mathematical Information Technology, P.O. Box 35 (Agora), FI-40014 University of Jyv¨askyl¨a, Finland
for Computational and Mathematical Engineering, Stanford University, Stanford, CA 94305, USA
c Department of Information Technology, Uppsala University, Box 337, 751 05 Uppsala, Sweden

b Institute

Abstract
We consider the numerical pricing of American options under the Bates model which adds log-normally distributed jumps
for the asset value to the Heston stochastic volatility model. A linear complementarity problem (LCP) is formulated where
partial derivatives are discretized using ﬁnite diﬀerences and the integral resulting from the jumps is evaluated using simple
quadrature. A rapidly converging ﬁxed point iteration is described for the LCP, where each iterate requires the solution of an
LCP. These are easily solved using a projected algebraic multigrid (PAMG) method. The numerical experiments demonstrate
the eﬃciency of the proposed approach. Furthermore, they show that the PAMG method leads to better scalability than the
projected SOR (PSOR) method when the discretization is reﬁned.
Keywords: American option; Bates model; Finite diﬀerence method; Iterative method; Linear complementarity problem

1. Introduction
In this paper we consider the numerical pricing of American options. Such options can be exercised prior to
the date of maturity which leads to a free-boundary problem. This is in contrast to European options that can only
be exercised on the date of maturity leading to an easier problem to solve. Since trading of options has grown to
a tremendous scale during the last decades the need for accurate and eﬀective numerical option pricing methods
is obvious. The most common options give the holder either the right to sell (put option) or buy (call option) the
underlying asset for the strike price. A mathematical model to describe the behavior of the underlying asset is
needed to compute the option price. Many such models of varying complexity exist. Typically, more complicated
models reproduce more realistic paths of the underlying asset and are hence better to give accurate option prices
but they also make the numerical pricing process more challenging. The most commonly used model is the BlackScholes model [1], which assumes the value of the underlying asset to follow a geometric Brownian motion. In the
Merton model [2] log-normally distributed jumps are added to the Black-Scholes model, while in the Kou model
[3] the jumps are log-doubly-exponentially distributed. By making the volatility a stochastic quantity the Heston
model is derived [4], while the Bates model [5] combines the Merton model with the Heston model by adding
log-normally distributed jumps to the latter one. Finally, the correlated jump model [6] also lets the volatility jump
in the Bates model.
∗ Corresponding

author.
E-mail address: toivanen@stanford.edu.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.279

1137

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

One way to price options is to employ a Monte-Carlo type solver that simulates the behavior of the underlying
asset using the model employed and then compute discounted mean values. Such methods are known to have
nonfavorable convergence properties and the treatment of the early exercise feature is nontrivial which is why
we use another approach here. We formulate a linear complementarity problem (LCP) for a partial (integro-)
diﬀerential equation (P(I)DE) operator for the price, discretize the P(I)DE, and then solve the resulting LCPs.
Several methods have been proposed for solving the resulting LCPs. The Brennan and Schwartz algorithm [7] is
a direct method for pricing American options under the Black-Scholes model; see also [8]. Numerical methods
for pricing under the Heston model have been developed in [9], [10], [11], [12], [13], [14], for example. The
treatment of the jumps in the Merton and Kou models have been studied in [15], [16], [17], [18], [19], [20], for
example. Pricing under the Bates model has been considered in [21], [22] and under the correlated jump model in
[23].
In this paper, we price American call options under the Bates model. The spatial partial derivatives in the
resulting partial integro-diﬀerential operator are discretized using a seven-point ﬁnite diﬀerence stencil and the
integral term is discretized using a simple quadrature rule. The Rannacher scheme [24] is employed for the time
stepping. We solve the resulting LCPs by employing a ﬁxed point iteration described and analyzed in [25] where
each iteration requires the solution of an LCP. These are solved using a projected multigrid (PAMG) method which
was recently introduced in [26]. The numerical experiments demonstrate that the proposed method is orders of
magnitude faster than the projected successive overrelaxation (PSOR) method.
The outline of the paper is the following. The Bates model and an LCP formulation for an American call
option is described in Sect. 2. In Sect. 3 the discretization of the LCPs is introduced and the iterative method to
solve them is proposed in Sect. 4. Numerical experiments are presented in Sect. 5 and conclusions are given in
Sect. 6.
2. Option Pricing Model
Here, we consider the Bates model [5] that combines the Merton jump model [2] and the Heston stochastic
volatility model [4]. It describes the behavior of the asset value s and its variance y by the coupled stochastic
diﬀerential equations
√
ds = (μ − λξ)sdt + ysdw1 + (J − 1)sdn,
√
dy = κ(θ − y)dt + σ ydw2 .
Here μ is the growth rate of the asset value, κ is the rate of reversion to the mean level of y, θ is the mean level of y,
and σ is the volatility of the variance y. The two Wiener processes w1 are w2 have the correlation ρ. The Poisson
arrival process n has the rate λ and the jump size J is taken from a distribution
f (J) = √

1
2πδJ

exp −

[ln J − (γ − δ2 /2)]2
,
2δ2

where γ and δ deﬁne the mean and variance of the jump. The mean jump ξ is given by ξ = exp(γ) − 1.
For simplicity, from now on we assume that the market prices of the volatility and jump risks are zero. Applying the Feynman-Kac formula to the Bates model we arrive at the following PIDE
=
=

∂u
∂τ
∂u
∂τ

∞

∂ u
∂u
− 12 ys2 ∂∂su2 − ρσys ∂s∂y
− 12 σ2 y ∂∂yu2 − (r − q − λξ)s ∂u
∂s − κ(θ − y) ∂y + (r + λ)u − λ 0 u(Js, y, τ) f (J)dJ
∞
∂2 u
∂2 u
∂2 u
∂u
∂u
− a11 ∂s2 − a12 ∂s∂y − a22 ∂y2 − a1 ∂s − a2 ∂y + (r + λ)u − λ 0 u(Js, y, τ) f (J)dJ =: Lu,
(1)
where u is the price of a European option, τ = T − t is the time to expiry and q is the dividend yield. The initial
condition for (1) is deﬁned by
u = g(s, y),

0

2

2

2

where g is the payoﬀ function which gives the value of option at the expiry. In the following, we consider only
call options. A similar approach can be also applied for put options. The payoﬀ function for a call option with the
strike price K is
g(s, y) = max(s − K, 0).

1138

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

For the computations, the unbounded domain is truncated to
(s, y, τ) ∈ (0, S ) × (0, Y) × (0, T ]

(2)

with suﬃciently large S and Y.
The price u of an American option under the Bates model satisﬁes an LCP
⎧
⎪
Lu ≥ 0,
⎪
⎪
⎨
u
≥ g,
⎪
⎪
⎪
⎩ (Lu) (u − g) = 0.

(3)

We impose the boundary conditions
u(0, y, τ) = g(0, y),
u(S , y, τ) = g(S , y),
uy (s, Y, τ) = 0,

y ∈ (0, Y),

s ∈ (0, S ).

Beyond the boundary s = S , the price u is approximated to be the same as the payoﬀ g, that is, u(s, y, τ) = g(s, y)
for s ≥ S . On the boundary y = 0, the LCP (3) holds and no additional boundary condition needs to be posed.
3. Discretization
We will compute approximate prices u on a space-time grid deﬁned by the grid points (xi , y j , τk ), 0 ≤ i ≤ m,
0 ≤ j ≤ n, 0 ≤ k ≤ l. In space we use a uniform grid with grid steps Δs = S /m in the s-direction and Δy = Y/n in
the y-direction. We start by introducing a semidiscrete approximation for
u(si , y j , τ),

0 ≤ i ≤ m,

0 ≤ j ≤ n.

For the non cross-derivatives in (1) we use standard second-order, centered ﬁnite diﬀerence approximations.
In this paper, we assume that the correlation ρ is negative. Due to the cross-derivative, we use a seven-point
ﬁnite diﬀerence stencil. A similar stencil has been described in [21], [22]. For a positive correlation ρ, a suitable
seven-point stencil is given in [10], [11]. The cross-derivative is approximated by
1
∂2 u
(si , y j , τ) ≈
2u(si , y j , τ) − u(si−1 , y j+1 , τ) − u(si+1 , y j−1 , τ)
∂s∂y
2ΔsΔy
∂2 u
∂2 u
− (Δs)2 2 (si , y j , τ) − (Δy)2 2 (xi , y j , τ) .
∂s
∂y
Due to the additional derivative terms in (4), we deﬁne modiﬁed coeﬃcients for
a˜ 11 = a11 +

1 Δs
a12 ,
2 Δy

and

a˜ 22 = a22 +

∂2 u
∂s2

and

∂2 u
∂y2

(4)

as

1 Δy
a12 .
2 Δs

To avoid positive weights in the computational stencil when the convection dominates the diﬀusion, we add
some artiﬁcial diﬀusion according to
1
1
aˆ 11 = min a˜ 11 , − b1 Δs, b1 Δs
2
2

and

1
1
aˆ 22 = min a˜ 22 , − b2 Δy, b2 Δy .
2
2

This is equivalent to using a combination of one-sided and central diﬀerences for the convection part. The resulting
matrix is an M-matrix with nonpositive oﬀ-diagonals and positive diagonal. It is strictly diagonally dominant when
r + λ > 0.

1139

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

The integral term in (1) at each grid point si is denoted by Ii . We start by making the change of variable J = ez ,
to obtain
∞
∞
Ii =

u(Jsi , y, τ) f (J)dJ =

−∞

0

u(ez xi , y, τ)p(z)dz,

where p is the probability density function of the normal distribution with mean γ − δ2 /2 and variance δ2 given by
1
[z − (γ − δ2 /2)]2
.
p(z) = √
exp −
2δ2
2πδ
Then we decompose Ii into one integral over the computational domain deﬁned in (2) and one integral over the
remainder of the interval. The ﬁrst part is then divided on the spatial grid so that we get
n−1

Ii =

Ii, j +
j=0

where
Ii, j =

∞
ln sn −ln si

ln s j −ln si
ln s j+1 −ln si

g(ez si , y)p(z)dz,

(5)

u(ez si , y, τ)p(z)dz.

(6)

The price function u(s, y, τ) needs to be approximated between each grid point pair (si , si+1 ) in order to deﬁne
approximate values of Ii, j . For this, we use a piecewise linear interpolation
u(s, y, τ) ≈

si+1 − s
s − si
u(si , y, τ) +
u(si+1 , y, τ)
si+1 − si
si+1 − si

(7)

for s ∈ [si , si+1 ]. Using (7) in (6) we get
Ii, j ≈

si, j − δ2 /2
si, j+1 − δ2 /2
eγ
− erf
erf
√
√
2
δ 2
δ 2

α j xi +

si, j + δ2 /2
si, j+1 + δ2 /2
1
− erf
erf
√
√
2
δ 2
δ 2

β j xi ,

where erf(·) is the error function, si, j = ln s j − ln si − γ,
αj =

u(s j+1 , y, τ) − u(s j , y, τ)
,
s j+1 − s j

and

βj =

u(s j , y, τ)s j+1 − u(s j+1 , y, τ)s j
.
s j+1 − s j

The spatial discretization leads to a semi-discrete LCP
⎧
⎪
u + Au + a ≥ 0,
⎪
⎪
⎨ τ
u ≥ g,
⎪
⎪
⎪
⎩ (u + Au + a)T (u − g) = 0,
τ
where A is an (m + 1)(n + 1) × (m + 1)(n + 1) matrix, a is a vector resulting from the second term in (5), u and
g are vectors containing the grid point values of the price u and the payoﬀ g, respectively. In the above LCP, the
inequalities hold componentwise.
For the temporal discretization we use the Rannacher scheme [24]; see also [27]. The ﬁrst four time steps
are performed with the implicit Euler method with the time step Δτ/2, and then the rest of the time steps are
performed with the Crank-Nicolson method with the time step Δτ, where Δτ = T/(l − 2). Thus, the time grid is
deﬁned by
⎧
⎪
k
⎪
⎪
k = 0, 1, 2, 3,
⎨ 2(l−2) T,
τk = ⎪
⎪
k−2
⎪
⎩ T,
k = 4, 5, . . . , l.
l−2

The purpose of a few Euler steps in the beginning of the time-stepping process is to damp oscillatory components
of the solution. The discretization in time leads to the solution of the following sequence of LCPs:
LCP(B(k+1) , u(k+1) , b(k+1) , g),

(8)

1140

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

where u(k) denotes the vector u at the kth time step. Here LCP(B, u, b, g) denotes the linear complementarity
problem
⎧
⎪
(Bu − b) ≥ 0,
⎪
⎪
⎨
u ≥ g,
⎪
⎪
⎪
⎩ (Bu − b)T (u − g) = 0.
For the ﬁrst four time steps k = 0, 1, 2, 3, the implicit Euler method leads to
1
B(k+1) = I + ΔτA
2

and

1
b(k+1) = u(k) − Δτa.
2

(9)

For the rest of the time steps k = 4, 5, . . . , l − 1, the Crank-Nicolson method leads to
1
B(k+1) = I + ΔτA
2

and

1
b(k+1) = I − Δτ A u(k) − Δτa.
2

(10)

4. The solution of LCPs
The projected SOR method (PSOR) for LCPs was introduced by Cryer in [30]. The method performs successive over relaxed corrections for the components of the solution vector combined with a projection when a
component violates the early exercise constraint. For pricing American options this methods has been discussed
in the books [31], [29], for example. The method is fairly simple to implement, but typically the number of iterations grows substantially when the discretization is reﬁned. Thus, it is not usually eﬃcient when fairly accurate
option prices are sought. In this paper we will employ PSOR to (8) for comparison, see Sect. 5.
Here we will focus on an iterative scheme introduced in [22] and [25]. Let B denote the matrix B(k+1) in (9)
or (10) associated with the LCP (8). It has a regular splitting [28]
B = T − J,
where J is a block diagonal matrix with full diagonal blocks resulting from the integral term and T is the rest
which is a block tridiagonal matrix. Based on this splitting, the ﬁrst two authors of this paper proposed a ﬁxed
point iteration for LCPs in [22], [25]. It is a generalization of an iteration for linear systems described in [29] and
applied in [15], [18], [20]. The ﬁxed point iteration for LCP(B, u, b, g) reads
LCP(T, u j+1 , b + Ju j , g),

j = 0, 1, . . .

(11)

Each iteration requires the solution of an LCP with the block tridiagonal T and the multiplication of a vector by
J. Below we will describe and compare PSOR and PAMG to solve these LCPs.
Based on a convergence result in [25] and the properties of the discretization, we can easily see that the
reduction of the l∞ -norm of the error in each iteration of (11) is proportional to Δτλ. In general Δτλ is much less
than one yielding that the iteration converges very rapidly. In practice, typically only a few iterations are needed
to reach suﬃcient accuracy for practical purposes.
One way to solve the LCPs in (11) is to use PSOR. Since it is not an eﬃcient method for reﬁned discretizations
we will only use it here for comparison and instead make use of a projected algebraic multigrid method (PAMG)
introduced in [26]. With a well designed multigrid method, the number of iterations does not grow with reﬁned
discretizations. For extensive literature on this see, the book [32], for example. For solving LCPs Brandt and
Cryer introduced a projected full approximation scheme (PFAS) multigrid method in [33]. Another multigrid
method for similar problems was described in [34]. The PFAS method was used to price American options under
stochastic volatility by Clarke and Parrott in [9], and Oosterlee in [13]. Some alternative approaches employing
multigrid methods for option pricing have been considered in [35], [36], [37]. Reisinger and Wittum described a
projected multigrid (PMG) method for LCPs which resembles more closely a classical multigrid method for linear
problems in [38]. This method has been used to price American options in [38], [11].
The above mentioned methods are so-called geometrical multigrid methods which means that the spatial operators are discretized on sequence of grids. Furthermore, transfer operators between grids need to be implemented.

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

1141

The geometrical multigrid method can be implemented with some eﬀort especially when the computational domain is a rectangle like in this case, but it is not a black-box method to which one can just give the matrix and
vectors deﬁning the LCP. An algebraic multigrid (AMG) method [39], [40] builds the coarse problems and the
transfer operators automatically using the properties of the matrix. Recently, Toivanen and Oosterlee generalized
an AMG method for LCPs and called the resulting method as the projected algebraic multigrid (PAMG) method
[26]. Its treatment of LCPs in the coarser levels resemble the one in the PMG method [38]. The PAMG method is
easy to use and eﬃcient [26]. Below we present the algorithms for one iteration of PSOR and PAMG respectively.
Algorithm One iteration of PSOR(B, u, b, g)
for i = 1, . . . , dimB
ri = bi − dimB
j=1 Bi j u j
ui = ui + ωri /Bii
ui = max(ui , gi )
end for

Algorithm One iteration of PAMG(B, u, b, g)
if coarsest level then
solve LCP(B, u, b, g)
else
PS(B, u, b, g)
uc = 0
˜ − Bu)
rc = R(b
c
ˆ g − u)
g = R(
PAMG(Bc , uc , rc , gc )
˜ c
x = x + Px
PS(B, u, b, g)
end if

˜ and R
ˆ denote the restriction operators for the solution of the LCP and its constraint respectively. The
Here R
˜ Finally PS is a smoother for the LCP. For more details on these
prolongation for the LCP is denoted by P.
operators, see [26].
Finally, we summarize our algorithm to numerically price American options under the Bates model. Note that
PSOR or PAMG form inner iterations to the outer LCP-iteration. In the next section we will see that for PAMG,
both the outer and inner iteration-count is kept very low for each time-step.
Algorithm
Discretize (3) with (1) giving (8) with (9) and (10)
for k = 1, . . . , l (Time-stepping)
for j = 1, 2, . . . until convergence (LCP-iteration)
Solve (11) using PSOR or PAMG
end for
end for
5. Numerical Experiment
In our numerical example, we price American call options. The parameters for the Bates model are the same
as in [22] and they are deﬁned below.

1142

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

Parameter
Risk free interest rate
Dividend yield
Strike price
Correlation between the price and variance processes
Mean level of the variance
Rate of reversion to the mean level
Volatility of the variance
Jump rate
Mean jump
Variance of jump

Notation
r
q
K
ρ
θ
κ
σ
λ
γ
δ

Value
0.03
0.05
100
-0.5
0.04
2.0
0.25
0.2
-0.5
0.4

The computational domain is (x, y, τ) ∈ [0, 400] × [0, 1] × [0, 0.5]. For the PSOR method, the relaxation parameter
ω = 1.5 is used.
In Table 1 we report the numerical results. The table has the following columns:
•
•
•
•

Grid (m, n, l) deﬁnes the number of grid-points in x, y, and τ to be m, n, and l, respectively.
LCP iter. gives the average number of LCP iterations on each time step.
PSOR/PAMG iter. gives the average number of inner PSOR or PAMG iterations for solving one LCP.
Error gives the root mean square relative error given by
⎤
⎡ 5
2 1/2
⎢⎢⎢ 1
u(xi , θ, T ) − U(xi , θ, T ) ⎥⎥⎥⎥
⎢
⎥⎥⎦ ,
error = ⎢⎢⎣
5 i=1
U(xi , θ, T )

where x = (80, 90, 100, 110, 120)T . The reference prices U given in [22] at (xi , θ, T ), i = 1, 2, . . . , 5 are
0.328526, 2.109397, 6.711622, 13.749337, 22.143307. They were computed using a componentwise splitting method on the grid (4096, 2048, 514).
• Ratio is the ratio of the consecutive root mean square relative errors.
• CPU gives the CPU time in seconds on a 2.0 GHz Intel Core i7 PC using one thread. For the PAMG method,
the CPU time includes the AMG initialization time.
For the iterations, we use the stopping criterion
r¯ j

2

≤ 10−6 b 2 ,

where r¯ j is the reduced residual for the LCP iterations and the pure PSOR iterations respectively. It is deﬁned by
⎧ j
j
⎪
⎪
⎨ Bui − bi if ui > gi
j
r¯ i = ⎪
⎪
⎩0
if uij = gi .
For the inner PSOR/PAMG iterations it is deﬁned similarly with T and the associated vectors instead of B, u j , and
b.
The multiplication by the matrix J is the most expensive operation in the iteration. In order to perform it
eﬃciently with the LCP iterations, we collected all n + 1 multiplications corresponding to all x-grid lines together
and then performed the resulting matrix-matrix multiplication using the optimized GotoBLAS library [41].
In Table 1, roughly second-order accuracy is observed with the proposed discretization as the ratio is about
four on average. On ﬁner grids, only two LCP iterations are required to satisfy the stopping criterion. With the
coarsest grid (64, 32, 10), the LCP iterations with the PSOR and PAMG methods require the same amount of time
while the pure PSOR is twice slower. On ﬁner grids, the speed diﬀerences become large and the number of PSOR
iterations roughly doubles with each reﬁnement. On the ﬁnest grid (1024, 512, 130), the LCP iteration with the
PAMG method is about 12 times faster than the LCP iteration with the PSOR method, and it is 150 times faster
than the pure PSOR iteration.

1143

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

Table 1. The numerical results with ﬁve diﬀerent space-time discretizations.
method
Grid (m, n, l)
LCP iter.
PSOR/PAMG iter.
PSOR
(64, 32, 10)
47.6
(128, 64, 18)
50.2
(256, 128, 34)
109.6
(512, 256, 66)
216.8
(1024, 512, 130)
396.6
LCP iter.
(64, 32, 10)
2.4
35.5
with PSOR
(128, 64, 18)
2.0
44.4
(256, 128, 34)
2.0
101.0
(512, 256, 66)
2.0
212.4
(1024, 512, 130)
2.0
417.0
LCP iter.
(64, 32, 10)
2.5
2.9
with PAMG
(128, 64, 18)
2.1
3.5
(256, 128, 34)
2.0
3.5
(512, 256, 66)
2.0
3.3
(1024, 512, 130)
2.0
2.6

error
0.11765
0.04068
0.00740
0.00227
0.00038
0.11759
0.04064
0.00738
0.00226
0.00038
0.11760
0.04064
0.00738
0.00226
0.00038

ratio
2.89
5.49
3.26
5.93
2.89
5.50
3.27
5.96
2.89
5.50
3.26
5.93

CPU
0.09
1.24
42.00
1608.39
251758.87
0.04
0.28
5.19
107.91
1673.90
0.04
0.26
2.10
17.85
133.11

6. Conclusions
In this paper we considered a linear complementarity problem (LCP) with a partial integro-diﬀerential operator
for pricing American options under the Bates model. For the partial derivatives and integral we employed ﬁnite
diﬀerences and simple quadrature respectively. In the numerical experiments, the discretizations are roughly
second-order accurate in both space and time.
We proposed a rapidly converging iteration for solving LCPs at each time step. In each such iteration, an LCP
with a sparse matrix needs to be solved. We demonstrated that these problems can be eﬃciently and easily solved
with a projected algebraic multigrid method. With ﬁner discretizations this approach leads to an order or several
orders of magnitude faster method than using the projected SOR method.
References
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]

F. Black, M. Scholes, The pricing of options and corporate liabilities, J. Political Economy 81 (1973) 637–654.
R. C. Merton, Option pricing when underlying stock returns are discontinuous, J. Financial Econ. 3 (1976) 125–144.
S. G. Kou, A jump-diﬀusion model for option pricing, Management Sci. 48 (8) (2002) 1086–1101.
S. Heston, A closed-form solution for options with stochastic volatility with applications to bond and currency options, Rev. Financial
Stud. 6 (1993) 327–343.
D. S. Bates, Jumps and stochastic volatility: Exchange rate processes implicit Deutsche mark options, Review Financial Stud. 9 (1)
(1996) 69–107.
D. Duﬃe, J. Pan, K. Singleton, Transform analysis and asset pricing for aﬃne jump-diﬀusions, Econometrica 68 (6) (2000) 1343–1376.
M. J. Brennan, E. S. Schwartz, The valuation of American put options, J. Finance 32 (1977) 449–462.
S. Ikonen, J. Toivanen, Pricing American options using LU decomposition, Appl. Math. Sci. 1 (49-52) (2007) 2529–2551.
N. Clarke, K. Parrott, Multigrid for American option pricing with stochastic volatility, Appl. Math. Finance 6 (1999) 177–195.
S. Ikonen, J. Toivanen, Componentwise splitting methods for pricing American options under stochastic volatility, Int. J. Theor. Appl.
Finance 10 (2) (2007) 331–361.
S. Ikonen, J. Toivanen, Eﬃcient numerical methods for pricing American options under stochastic volatility, Numer. Methods Partial
Diﬀerential Equations 24 (1) (2008) 104–126.
K. Ito, J. Toivanen, Lagrange multiplier approach with optimized ﬁnite diﬀerence stencils for pricing American options under stochastic
volatility, SIAM J. Sci. Comput. 31 (4) (2009) 2646–2664.
C. W. Oosterlee, On multigrid for linear complementarity problems with application to American-style options, Electron. Trans. Numer.
Anal. 15 (2003) 165–185.
R. Zvan, P. A. Forsyth, K. R. Vetzal, Penalty methods for American options with stochastic volatility, J. Comput. Appl. Math. 91 (2)
(1998) 199–218.
A. Almendral, C. W. Oosterlee, Numerical valuation of options with jumps in the underlying, Appl. Numer. Math. 53 (1) (2005) 1–18.
L. Andersen, J. Andreasen, Jump-diﬀusion processes: Volatility smile ﬁtting and numerical methods for option pricing, Rev. Deriv. Res.
4 (3) (2000) 231–262.
R. Cont, E. Voltchkova, A ﬁnite diﬀerence scheme for option pricing in jump diﬀusion and exponential L´evy models, SIAM Numer.
Anal. 43 (4) (2005) 1596–1626.
Y. d’Halluin, P. A. Forsyth, K. R. Vetzal, Robust numerical methods for contingent claims under jump diﬀusion processes, IMA J.
Numer. Anal. 25 (1) (2005) 87–112.

1144

Santtu Salmi et al. / Procedia Computer Science 18 (2013) 1136 – 1144

[19] A.-M. Matache, C. Schwab, T. P. Wihler, Fast numerical solution of parabolic integrodiﬀerential equations with applications in ﬁnance,
SIAM J. Sci. Comput. 27 (2) (2005) 369–393.
[20] J. Toivanen, Numerical valuation of European and American options under Kou’s jump-diﬀusion model, SIAM J. Sci. Comput. 30 (4)
(2008) 1949–1970.
[21] C. Chiarella, B. Kang, G. H. Meyer, A. Ziogas, The evaluation of American option prices under stochastic volatility and jump-diﬀusion
dynamics using the method of lines, Int. J. Theor. Appl. Finance 12 (3) (2009) 393–425.
[22] J. Toivanen, A componentwise splitting method for pricing American options under the Bates model, in: Applied and numerical partial
diﬀerential equations, Vol. 15 of Comput. Methods Appl. Sci., Springer, New York, 2010, pp. 213–227.
[23] L. Feng, V. Linetsky, Pricing options in jump-diﬀusion models: an extrapolation approach, Oper. Res. 56 (2) (2008) 304–325.
[24] R. Rannacher, Finite element solution of diﬀusion problems with irregular data, Numer. Math. 43 (2) (1984) 309–327.
[25] S. Salmi, J. Toivanen, An iterative method for pricing American options under jump-diﬀusion models, Appl. Numer. Math. 61 (7) (2011)
821–831.
[26] J. Toivanen, C. W. Oosterlee, A projected algebraic multigrid method for linear complementarity problems, Numer. Math. Theory
Methods Appl. 5 (1) (2012) 85–98.
[27] M. B. Giles, R. Carter, Convergence analysis of Crank-Nicolson and Rannacher time-marching, J. Comput. Finance 9 (2006) 89–112.
[28] D. M. Young, Iterative solution of large linear systems, Academic Press, New York, 1971.
[29] D. Tavella, C. Randall, Pricing ﬁnancial instruments: The ﬁnite diﬀerence method, John Wiley & Sons, Chichester, 2000.
[30] C. W. Cryer, The solution of a quadratic programming problem using systematic overrelaxation, SIAM J. Control 9 (1971) 385–392.
[31] R. U. Seydel, Tools for computational ﬁnance, 4th Edition, Universitext, Springer-Verlag, Berlin, 2009.
[32] U. Trottenberg, C. W. Oosterlee, A. Sch¨uller, Multigrid, Academic Press Inc., San Diego, CA, 2001, with contributions by A. Brandt, P.
Oswald and K. St¨uben.
[33] A. Brandt, C. W. Cryer, Multigrid algorithms for the solution of linear complementarity problems arising from free boundary problems,
SIAM J. Sci. Statist. Comput. 4 (4) (1983) 655–684.
[34] R. H. W. Hoppe, Multigrid algorithms for variational inequalities, SIAM J. Numer. Anal. 24 (5) (1987) 1046–1065.
[35] M. Holtz, A. Kunoth, B-spline-based monotone multigrid methods, SIAM J. Numer. Anal. 45 (3) (2007) 1175–1199.
[36] S. Ikonen, J. Toivanen, Operator splitting methods for pricing American options under stochastic volatility, Numer. Math. 113 (2) (2009)
299–324.
[37] A. Ramage, L. von Sydow, A multigrid preconditioner for an adaptive Black-Scholes solver, BIT 51 (1) (2011) 217–233.
[38] C. Reisinger, G. Wittum, On multigrid for anisotropic equations and variational inequalities: Pricing multi-dimensional European and
American options, Comput. Vis. Sci. 7 (3-4) (2004) 189–197.
[39] J. W. Ruge, K. St¨uben, Algebraic multigrid, in: Multigrid methods, Vol. 3 of Frontiers Appl. Math., SIAM, Philadelphia, PA, 1987, pp.
73–130.
[40] K. St¨uben, Algebraic multigrid: An introduction with applications, in: Multigrid, Academic Press Inc., San Diego, CA, 2001.
[41] K. Goto, R. A. van de Geijn, Anatomy of high-performance matrix multiplication, ACM Trans. Math. Software 34 (3) (2008) Art. 12,
25.

