A Behavioural Notion of Subtyping for
Object-Oriented Programming in SPARK95
Tse-Min Lin1 and John A. McDermid2
1

2

Real-Time Systems Research Group
High Integrity Systems Engineering Research Group
Department of Computer Science
The University of York
Heslington, York YO10 5DD, UK
{lin,jam}@cs.york.ac.uk

Abstract The dynamic aspects of the object-oriented paradigm have
prevented the adoption of the latter for the implementation of high
integrity systems using the SPARK approach. This paper presents
a proposal that allows object-oriented programming in SPARK95,
whereas supporting SPARK’s static approach for veriﬁcation by imposing a notion of behavioural subtyping between a type and all its
subtypes. Behavioural subtyping supports modular reasoning through
supertype abstraction, hence all proofs can be discharged based only on
nominal/declared types. An example of proof is also presented.
Keywords: behavioural subtyping, modular reasoning, supertype
abstraction, object-oriented programming, SPARK

1

Introduction

Nowadays, the object-oriented paradigm [3,19] is the programming paradigm
most widely used for the implementation of software. However, the dynamic
aspects of the object-oriented paradigm (e.g. polymorphism and dynamic/late
binding) prevented its use for the implementation of high integrity applications
in the SPARK approach [1,2].
In this paper, we present how behavioural subtyping [7,16] can be introduced in the SPARK notation to support object-oriented programming. The
behavioural notion of subtyping ensures that a subtype preserves supertype abstraction, i.e. a subtype behaves like its supertype(s), and it is a very important
notion because it supports modular reasoning [13,12,22]. Supertype abstraction
allows properties to be proved based only on nominal (or declared) types because
a supertype stands for all its subtypes.
The overall motivation for the work presented in this paper is the support of
object-oriented programming in the SPARK notation, and this is done by:
1. Development of a notion of behavioural subtyping for the SPARK95 language;
J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 309–321, 2003.
c Springer-Verlag Berlin Heidelberg 2003

310

T.-M. Lin and J.A. McDermid
Table 1. Terminology: Object-oriented paradigm and Ada95

O-O Paradigm
class
state
method
state element/component
method invocation
subclass/subtype
superclass/supertype
hierarchy
inheritance
object/instance

Ada95
tagged type + primitive operations
tagged record
primitive operation
component (of a tagged type)
(dynamic) dispatching
descendant (derived from a tagged type)
ancestor (of a tagged type)
derivation class (rooted at a tagged type)
type extension
value

2. Proposal of new annotations for the speciﬁcation of the static properties (or
behaviour) of a class and its methods;
3. Deﬁnition of syntactical restrictions to ensure that the substitutability principle [5] of the object-oriented paradigm is supported;
4. Presentation of restrictions to forbid the deﬁnition of recursive classes, aliasing/sharing of access types, and introduction of subprograms that do not
dispatch.
The work presented in this paper is focused on the ﬁrst objective. A full description of our proposal can be found in [15]. Note that the meaning of the terms
used in this paper is drawn from the object-oriented paradigm. Table 1 presents
some terms that are commonly used in the object-oriented paradigm and their
equivalence in Ada95 [21].
This paper assumes that the reader has knowledge of the object-oriented
paradigm and the SPARK approach, and it is organized as follows. The next
section presents the deﬁnition of a notion of behavioural subtyping for SPARK95.
Section 3 illustrates an example where it is proved that the behavioural subtype
relation holds for the classes of a points hierarchy. Section 4 presents the related
works, conclusions, and suggestions for further work.

2

A Behavioural Notion of Subtyping for SPARK95

The inheritance mechanism of the object-oriented paradigm can be used for both
specialization and generalization of a type. Inheritance allows the deﬁnition of
new types (also known as subtypes) from previously deﬁned types (also known
as supertypes). The approach adopted by the vast majority of programming
languages is to introduce syntactic restrictions to ensure type safe use of polymorphism and late binding. However, very few programming languages provide
a mechanism to relate the behaviour of a subtype to the behaviour of its supertype(s). The main consequence of the absence of a behavioral subtype relation [7,

A Behavioural Notion of Subtyping for Object-Oriented Programming

311

16,22] is that the introduction of a new subtype can result in previously correct
program modules to have unexpected (or surprising) behaviour.
If aliasing is constrained (or even forbidden) and each subtype preserves
the behaviour of its supertype(s), then modular veriﬁcation of object-oriented
programs is possible [11,12,13,22]. This section presents how the behavioural
subtyping approach proposed in [7] can be supported in the SPARK context.
In the following we present deﬁnitions that are usually found in a denotational
semantic model of an object-oriented programming/speciﬁcation language in a
semi-formal way:1
1. The notation {state component ❀ value} will be used to represent the “value” of
an object. For example, a Point 2D object at coordinate (10, 20) is represented as
{x ❀ 10, y ❀ 20} whereas a Point 3D object at location (101, 2, 54) is represented
as {x ❀ 101, y ❀ 2, z ❀ 54};2
2. The existence of an environment used to record all deﬁnitions introduced in a
program (identiﬁers, static and dynamic types, values, syntactical level of declaration, arguments, etc.) is assumed. We are not interested in how it could be
represented/deﬁned, but only in that this environment can be used to provide all
information of interest.
This environment is represented by the Greek letter ε (epsilon). We also use a
decorated variation ε (and sometimes ε or another Greek letter) to represent
an environment that is obtained from ε after the “evaluation” (or execution) of a
statement. If the statement does not change anything (such as the statement null)
then ε is exactly the same as ε;
3. value ([[id]], ε) — returns the object that is stored in the identiﬁer id. The brackets [[ ]] are used to denote syntactical elements. If id is the name of a class,
then value([[id]], ε) returns the set of all objects/instances id. For example, in
a pure object-oriented language any type must be introduced by a class, therefore the (built-in) type Integer is assumed to be introduced by a class and
value([[Integer]], ε) = {. . . , −1, 0, 1, . . . };
4. obj ∈ value([[Class Name]], ε) — means that obj is an element/instance of the set
of objects of Class Name. For example, 10 ∈ value([[Integer]], ε) and {x ❀ 10, y ❀
20} ∈ value([[Point 2D]], ε);
5. eval ([[statement]], ε) — eval is the evaluation function and it takes two arguments: the statement to be evaluated and the environment to be used in the evaluation. Unlike the value function presented above, the evaluation function can
modify the environment and the resultant environment is called ε , that is, ε =
eval ([[statement]], ε). For example, if value([[x]], ε) = 1, then eval ([[x := 100]], ε) results in a new environment ε such that value([[x]], ε ) = 100. SPARK annotations
can refer to the previous value of any variable used, therefore, it will be assumed
that the environment also records this information. Using the example before, we
have that value([[x∼ ]], ε ) = 1;
6. pre ([[method (obj, arg2 , . . . , argn )]], ε) — returns true if in the environment
ε the precondition of method when invoked with object obj and arguments arg2 ,
. . . , argn is satisﬁed, otherwise it returns false;
1

2

For example: environment, evaluation function, semantic function, value, etc. A
reader interested in knowing how such deﬁnitions are introduced in the formal semantics of an object-oriented language is referred to [14,23].
Point 2D and Point 3D are presented in Section 3.

312

T.-M. Lin and J.A. McDermid

7. Convert Sub to Super (obj , ε) — the existence of a family of type conversion functions is assumed. In this deﬁnition we will assume the existence of a function that
converts subtype objects to supertype objects;
8. static type ([[id]], ε) — if id is an identiﬁer of a variable, then the function
static type returns its static (or declared) type in ε. Once a variable is declared,
its static type is ﬁxed — it cannot change in its scope of deﬁnition, therefore, for any environment ε obtained from ε the property static type ([[id]], ε) =
static type ([[id]], ε ) is true. The introduction of a local variable potentially hides
an identiﬁer of the enclosing scope. However, the SPARK approach forbids the redeﬁnition/redeclaration of an identiﬁer that is already in scope. This rule reduces
ambiguity;
9. dynamic type ([[id]], ε) — if id is an identiﬁer of a variable, then the function
dynamic type returns its dynamic type in ε. Due to subsumption, the dynamic
type of any variable can be a subtype of its declared/static type. As an example of
use of this function, the predicate dynamic type ([[x]], ε) = Point 3D is true if the
dynamic type of x in ε is Point 3D, which means that the predicate value([[x]], ε) ∈
value([[Point 3D]], ε) is also true.
In the scope of declaration of id, the dynamic type of id can change during execution to any of the subtypes of its static type. Therefore, the following properties
are always true in the scope of declaration of id:
static type ([[id]], ε) = static type ([[id]], ε )
static type ([[id]], ε)

dynamic type ([[id]], ε )

where is the behavioural subtype relation presented below;
10. id : X is used to indicate that id is an identiﬁer of dynamic type X in ε.

To guarantee behavioural subtyping the following rules must be enforced in
an object-oriented extension of SPARK95:3
Deﬁnition 1 Behavioural Subtype Relation ( )
Given two classes Super and Sub, Sub is a behavioural subtype of Super ,
Super Sub, if and only if the following properties are satisﬁed:
1. Syntactic Rules — Signature Compatibility
all primitive operations method in Super , that have been redeﬁned in Sub:
The number of formal arguments of both methods are the same;
The type of all controlling operands in each method must be the same;
All formal arguments of type Super in the supertype method must have type
Sub in the subtype method;
d) All formal arguments that do not have type Super in the supertype method
must have the same type in the subtype method;
e) The modes of all formal arguments in the supertype method are preserved in
the subtype method.

For
a)
b)
c)

3

These rules describe the veriﬁcation conditions that must be discharged in order
to demonstrate behavioural subtyping. Note that the formulae (∀ α | P • Q) and
(∃ α | P • Q) are equivalent to (∀ α • P ⇒ Q) and (∃ α • P ⇒ Q), respectively.

A Behavioural Notion of Subtyping for Object-Oriented Programming

313

The syntactical rules are just what Ada95 requires to ensure that all methods
are primitive operations, i.e. they can dispatch. However, they do not tie up the
behaviour of a class and its subclasses. In this respect, the most important rules
are the semantic rules presented below. They guarantee that a subclass behaves
like all its superclasses, or in other words, a class describes the behaviour of all its
“unknown” subclasses.4

2. Semantic Rules — Behavioural Compatibility
a) Correspondence of States Rule
∀ objsub ∈ value ([[Sub]], ε) • ∃ objsup ∈ value ([[Super ]], ε) •
Convert Sub to Super (objsub , ε) = objsup
This rule states that every object of the subtype has a corresponding object
in the supertype. If there were only one object x that did not satisfy this rule,
then modular reasoning would not be possible because no superclass object
could be used as an approximation to the behaviour of x .

b) Initialization Rule
For every initial state method Create in the supertype and subtype:
∀ id : Super • ∃ obj ∈ value ([[Super ]], ε); ε : environment |
eval ([[Create (id )]], ε) = ε • value([[id ]], ε ) = obj
∀ id : Sub • ∃ obj ∈ value ([[Sub]], ε); ε : environment |
eval ([[Create (id )]], ε) = ε • value([[id ]], ε ) = obj
This rule ensures that the initial state methods are consistent. That is, there
is at least one object that satisﬁes the invariant of each class. If this rule is
not satisﬁed then the class has no object at all due to a contradictory or false
class invariant.

c) Correctness of Initialstate Methods Rule
For every initial state method Create in the supertype that is redeﬁned in the
subtype:
∀ id1 : Super ; id2 : Sub • ∃ ε , ε : environment |
eval ([[Create (id1 )]], ε) = ε ∧ eval ([[Create (id2 )]], ε) = ε •
Convert Sub to Super (value([[id2 ]], ε )) = value([[id1 ]], ε )
This rule states that any object obtained by application of the initial state
method in the subtype is related to the object obtained by application of the
corresponding initial state method in the supertype. In another words, the
initial state of a subclass object is also a (related) initial state of a superclass
object. This is important, otherwise a subtype object could follow a history
that is not related to a supertype object as both objects would begin their
existence in non-related (initial) states.
4

Unknown in the sense that the behaviour of the superclass is an approximation to
the behaviour of any of its subclasses, even those that are not deﬁned yet.

314

T.-M. Lin and J.A. McDermid

d) Applicability of Subtype Methods Rule
For every method method in the supertype that is redeﬁned in the subtype:
∀ id1 : Super ; id2 : Sub |
Convert Sub to Super (value ([[id2 ]], ε)) = value ([[id1 ]], ε) •
pre ([[method (id1 , p2 , . . . , pn )]], ε) ⇒ pre ([[method (id2 , p2 , . . . , pn )]], ε)
where p2 , . . . , pn correspond to actual arguments.5 This rule says that whenever a supertype method is applicable, so is the corresponding subtype method
when invoked with the same arguments.

e) Correctness of Subtype Methods Rule
For every method method in the supertype that is redeﬁned in the subtype:
i. If method is declared as a procedure:
∀ id1 : Super ; id2 : Sub |
Convert Sub to Super (value ([[id2 ]], ε)) = value ([[id1 ]], ε) •
pre ([[method (id1 , p2 , . . . , pn )]], ε) ⇒
∃ ε , ε : environment |
eval ([[method (id1 , p2 , . . . , pn )]], ε) = ε
eval ([[method (id2 , p2 , . . . , pn )]], ε) = ε •
Convert dt{p2 ,ε

}

to dt{p2 ,ε

}

(value([[p2 ]], ε )) = value([[p2 ]], ε )

}

to dt{pn ,ε

}

(value([[pn ]], ε )) = value([[pn ]], ε )

...
Convert dt{pn ,ε

Convert Sub to Super (value ([[id2 ]], ε )) = value ([[id1 ]], ε )
where each dt{pi ,ε } , 2 ≤ i ≤ n, is used to represent the dynamic type of
the argument pi in ε , i.e. dt{pi ,ε } = dynamic type ([[pi ]], ε );6
ii. If method is declared as a function:
∀ id1 : Super ; id2 : Sub |
Convert Sub to Super (value ([[id2 ]], ε)) = value ([[id1 ]], ε) •
pre ([[method (id1 , p2 , . . . , pn )]], ε) ⇒
Convert dt{ressub ,ε} to dt{ressup ,ε} (
value([[method (id2 , p2 , . . . , pn )]], ε)) =
value([[method (id1 , p2 , . . . , pn )]], ε)
dt{ressub ,ε} and dt{ressup ,ε} are used to represent the type of the result returned by the methods deﬁned in Sub and Super , respectively, using the
environment ε.7
5
6

7

Although p2 , . . . , pn occur free in this rule, in practice static type checks ensure that
they conform to the signature of method as deﬁned in Super .
Note that if the dynamic type of pi is the same in both ε and ε (i.e. dt{pi ,ε } =
dt{pi ,ε } ), then Convert dt{pi ,ε } to dt{pi ,ε } is the identity function (that is, no
conversion is done). For an argument pi of mode in, SPARK ensures that it cannot be
modiﬁed, therefore Convert dt{pi ,ε } to dt{pi ,ε } (value([[pi ]], ε )) = value([[pi ]], ε )
holds.
The property to be proved for functions is simpler than the one for procedures
because functions in SPARK can neither have side-eﬀects nor change the object and
arguments used in the instantiation/invocation.

A Behavioural Notion of Subtyping for Object-Oriented Programming

315

This rule tells us that:
– If the supertype method is applicable, then rule (2d) ensures that the
subtype method is also applicable. However, the modiﬁcations done in the
arguments of mode out and in the objects that received the messages (id1
and id2 ) must be related. That is, the behaviour of the subtype method
is constrained by the behaviour of the supertype method;
– If the supertype method is not applicable, then the subtype method is
free to make any modiﬁcation to the object that received the message
and its arguments of mode out. That is, the behaviour of the subtype
method is not constrained by the behaviour of the supertype method.

✷
Although the semantic rules might look intimidating due to the presence of
universal and existential quantiﬁers, we argue that the task of proving that all
rules hold is not diﬃcult to be accomplished in practice. This is demonstrated
through an example of proof in the next section.

3

An Example of Proof

In this section we present a rigorous (or mathematical) proof that Point 3D is
a behavioural subtype of Point 2D. Both classes are presented below:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34

package Points is
type Point 2D is tagged private;
−−# own x, y;
type Point 2D object is access all
Point 2D’Class;
procedure Create (p: access Point 2D);
−−# access mode (p: out);
−−# initialstate;
−−# derives p from ;
−−# post p.x = 0 and p.y = 0;
procedure Add (p1: access Point 2D;
p2: access Point 2D’Class);
−−# access mode (p1: in out; p2: in);
−−# derives p1 from p1, p2;
−−# post p1.x=p1˜.x+p2.x and
−−#
p1.y=p1˜.y+p2.y;
function Coord X (p: access Point 2D)
return Integer;
−−# access mode (p: in);
−−# return p.x;
function Coord Y (p: access Point 2D)
return Integer;
−−# access mode (p: in);
−−# return p.y;
...
type Point 3D is new Point 2D with
private;
−−# own z;
type Point 3d object is access all
Point 3D’Class;
function Convert to parent (
p: access Point 3D)
return Point 2D object;
−−# access mode (p: in);

35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68

−−# return r => r.x=p.x and r.y=p.y;
procedure Create (p: access Point 3D);
−−# access mode (p: out);
−−# initialstate;
−−# derives p from ;
−−# post p.x=0 and p.y=0 and p.z=0;
procedure Add (p1: access Point 3D;
p2: access Point 2D’Class);
−−# access mode (p1: in out; p2: in);
−−# derives p1 from p1, p2;
−−# post p1.x=p1˜.x+p2.x and
−−#
p1.y=p1˜.y+p2.y and
−−#
(pfIs Point 3D (p2) =>
−−#
p1.z=p1˜.z+
−−#
pfView in Point 3D(p2)).z
−−# function pfIs Point 3D (
−−#
p: access Point 2D)
−−#
return Boolean;
−−# function pfView in Point 3D (
−−#
p: access Point 2D)
−−#
return Point 3D object;
function Coord Z (p: access Point 3D)
return Integer;
−−# access mode (p: in);
−−# return p.z;
...
private
type Point 2D is tagged
record
x , y : Integer ;
end record;
type Point 3D is new Point 2D with
record
z : Integer ;

316
69
70

T.-M. Lin and J.A. McDermid
end record;
end Points;

95
96
97

70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94

package body Points is
procedure Create (p: access Point 2D) is
begin
p.x := 0; p.y := 0;
end Create;
procedure Add (p1: access Point 2D;
p2: access Point 2D’Class) is
begin
p1.x := p1.x + Coord X (p2);
p1.y := p1.y + Coord Y (p2);
end Add;
function Coord X (p: access Point 2D)
return Integer is
begin
return p.x;
end Coord X;
function Coord Y (p: access Point 2D)
return Integer is
begin
return p.y;
end Coord Y;
...
function Convert to parent (
p: access Point 3D)

98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121

return Point 2D object is
res : Point 2D object := new Point 2D;
begin
res .x := p.x ; res .y := p.y;
return res;
end Convert to parent;
procedure Create (p: access Point 3D) is
begin
p.x := 0; p.y := 0; p.z := 0;
end Create;
procedure Add (p1: access Point 3D;
p2: access Point 2D’Class) is
begin
p1.x := p1.x + Coord X (p2);
p1.y := p1.y + Coord Y (p2);
if p2.all in Point 3D’Class then
p1.z := p1.z+
Coord Z (Point 3D object(p2));
end if;
end Add;
function Coord Z (p: access Point 3D)
return Integer is
begin
return p.z;
end Coord Z;
...
end Points;

The package Points is used to implement a points hierarchy. The class
Point 2D represents two dimensional points, whereas the class Point 3D represents three dimensional points.
The use of access to class wide types is necessary to support the substitutability principle of the object-oriented paradigm. The annotation access mode is
used to make explicit the mode under which the arguments of a subprogram call
will be manipulated. The annotation initialstate indicates that the subprogram
is an initial state operation, and as such it must be the ﬁrst subprogram to be
executed for any object.
The ﬁrst argument of all primitive operations has a special status in our
approach — it corresponds to the object that receives the message. This is
necessary because Ada95 does not make explicit the role of each argument of
a primitive operation. The proof function pfIs Point 3D (lines 50–52) is used
to verify if the dynamic type of p2 is rooted at Point 3D, whereas the proof
function pfView in Point 3D (lines 53–55) is used to return a copy of p2 as an
object rooted at Point 3D.
Note that we extended the use of the annotation own of SPARK. In lines 3
and 28, own annotations are used to make visible the state components of
Point 2D and Point 3D, respectively. The standard technique in SPARK to
make the components of a private record visible is to use proof functions.
Due to space constraints, in this section we only develop the proof that the
method Add of Point 3D preserves semantic rule (2e).8
Proof 1 The function Convert to parent (lines 31–35) is used to convert 3D points
into 2D points, and it corresponds to the semantic function Convert Sub to Super
used in the deﬁnition of behavioural subtyping presented in Section 2. Therefore,
8

The proof of compliance to the other rules can be found in [15, §4.3.4].

A Behavioural Notion of Subtyping for Object-Oriented Programming

317

Convert Point 3D to Point 2D (value([[objsub ]], ε)) in Deﬁnition 1 is represented as:
value ([[Convert to parent (objsub )]], ε)

(1)

in the points hierarchy.
No method in the points hierarchy changes any of its arguments. That is, for all
arguments, if any, they are of mode in only.9 This means that in the formula presented
in rule (2e) all predicates of the form:
Convert dt{pi ,ε

}

to dt{pi ,ε

}

(value([[pi ]], ε )) = value([[pi ]], ε )

for 2 ≤ i ≤ n, are true and do not need to be considered. Furthermore, due to the fact
that the preconditions of all methods are true,10 the property presented in rule (2e)
for procedures can be simpliﬁed to:
∀ id1 : Point 2D; id2 : Point 3D |

(2)

Convert Point 3D to Point 2D (value ([[id2 ]], ε)) = value ([[id1 ]], ε) •
∃ ε , ε : environment |
eval ([[method (id1 , p2 , . . . , pn )]], ε) = ε
eval ([[method (id2 , p2 , . . . , pn )]], ε) = ε •
Convert Point 3D to Point 2D (value ([[id2 ]], ε )) = value ([[id1 ]], ε )
The universal quantiﬁer in (2) requires id1 and id2 to be related. Therefore, we
can assume that p2d and p3d are variables of dynamic types Point 2D and Point 3D,
respectively, with the following property:
Convert Point 3D to Point 2D (value ([[p3d]], ε)) = value ([[p2d]], ε)

(3)

which is equivalent, by (1), to:
value ([[Convert to parent (p3d)]], ε) = value ([[p2d]], ε)

(4)

Given that (4) holds, the following properties about p2d and p3d, in ε, are true:
value([[p2d.x]], ε) = value([[p3d.x]], ε)

(5)

value([[p2d.y]], ε) = value([[p3d.y]], ε)

(6)

Properties (5) and (6) are true by the return annotation of Convert to parent. Because
p2d and p3d where selected arbitrarily with the only condition that (3) holds, it is
possible to simplify (2) further by using p2d and p3d, and applying ∀-elimination twice:
∃ ε , ε : environment |

(7)

eval ([[method (p2d, p2 , . . . , pn )]], ε) = ε
eval ([[method (p3d, p2 , . . . , pn )]], ε) = ε •
Convert Point 3D to Point 2D (value ([[p3d]], ε )) = value ([[p2d]], ε )
9
10

Recall that when the word “argument” is used, we are not considering the ﬁrst one
because it corresponds to the object that receives the message.
In our proposal, initial state methods (e.g. the Create methods of Point 2D and
Point 3D) cannot have preconditions because they must be always applicable. An
initial state method must be the ﬁrst method to be executed for any object.

318

T.-M. Lin and J.A. McDermid

In (7), the environments ε and ε are obtained from ε, therefore the following properties are true about p2d and p3d in ε and ε :
value([[p2d]], ε) = value([[p2d∼ ]], ε )
∼

value([[p2d]], ε) = value([[p2d ]], ε )
∼

(8)
(9)

value([[p3d]], ε) = value([[p3d ]], ε )

(10)

value([[p3d]], ε) = value([[p3d∼ ]], ε )

(11)

∼

∼

value([[p2d .x]], ε ) = value([[p3d .x]], ε )

(12)

value([[p2d∼.y]], ε ) = value([[p3d∼.y]], ε )

(13)

Properties (8), (9), (10), and (11) are true by deﬁnition of value. Property (12) is true
by (8), (11), and (5). Property (13) is true by (8), (11), and (6).
All arguments of Add are of mode in. Therefore, the following properties are true
about any actual argument arg used to instantiate Add:
∀ φ, φ : environement;
obj : Point 3D; arg : Point 2D | φ = eval ([[Add (obj , arg)]], φ) •
value([[arg]], φ) = value([[arg ∼ ]], φ )

(14)

value([[arg]], φ) = value([[arg]], φ )

(15)

(14) is true by the deﬁnition of value, and (15) is true by the deﬁnition of in mode
arguments (they cannot be modiﬁed). Now we have all properties necessary to show
that Add of Point 3D complies to the semantic rule (2e). The formula that needs to be
proved to hold is (7):
∃ ε , ε : environment |
eval ([[Add (p2d, p)]], ε) = ε
eval ([[Add (p3d, p)]], ε) = ε •
≡
≡

≡

≡

≡

Convert Point 3D to Point 2D (value ([[p3d]], ε )) = value ([[p2d]], ε )
(one-point rule applied twice)
Convert Point 3D to Point 2D (value ([[p3d]], γ)) = value ([[p2d]], δ)
(postcondition of Add in Point 2D)
Convert Point 3D to Point 2D (value ([[p3d]], γ)) =
value ([[p2d ⇒ (p2d.x=p2d∼.x+p.x and p2d.y=p2d∼.y+p.y)]], δ)
(p2d is an instance of Point 2D)
Convert Point 3D to Point 2D (value ([[p3d]], γ)) =
{x ❀ value([[p2d∼.x+p.x]], δ), y ❀ value([[p2d∼.y+p.y]], δ)}
(by (8) and (15))
Convert Point 3D to Point 2D (value ([[p3d]], γ)) =
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)}
(by (1))
value ([[Convert to parent (p3d)]], γ) =
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)}

A Behavioural Notion of Subtyping for Object-Oriented Programming

319

≡ (postcondition of Add in Point 3D)
value ([[Convert to parent (p3d ⇒
(p3d.x = p3d∼.x+p.x and p3d.y = p3d∼.y+p.y and
(pfIs Point 3D (p) =>
p3d.z=p3d∼.z+(pfView in Point 3D(p)).z)))]], γ) =
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)}
≡ (return annotation of Convert to parent)
value ([[r ⇒ (r.x = p3d∼.x+p.x and r.y = p3d∼.y+p.y)]], γ) =
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)}
≡ (r is an instance of Point 2D)
{x ❀ value([[p3d∼.x+p.x]], γ), y ❀ value([[p3d∼.y+p.y]], γ)} =
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)}
≡ (by (11) and (15))
{x ❀ value([[p3d.x+p.x]], ε), y ❀ value([[p3d.y+p.y]], ε)} =
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)}
≡ (by (5) and (6))
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)} =
{x ❀ value([[p2d.x+p.x]], ε), y ❀ value([[p2d.y+p.y]], ε)}
≡ (tautology)
true

✷
4

Conclusion

In this paper we presented how the static approach for veriﬁcation/analysis
advocated by SPARK can be extended to support object-oriented programming
through the notion of behavioural subtyping. The latter supports supertype
abstraction because a type stands for all its subtypes.
Supertype abstraction supports modular reasoning which is, in our opinion,
one of the most important beneﬁts of the object-oriented paradigm. We argue
that the only feasible approach to support object-oriented programming, whilst
preserving the SPARK approach of relying on static analysis to discharge veriﬁcation conditions, is through supertype abstraction. The advantage of supertype
abstraction is twofold: proofs can be discharged based solely on declared types
and the introduction of new subtype(s) in a type hierarchy does not require
retesting/reveriﬁcation of previous correct modules [11,22].
Since release 6.1, on July 2002, limited support for tagged types and type
extensions have been added to the SPARK language [6]. However, class-wide
operations including dynamic dispatching are not allowed, hence object-oriented
programming is still not supported in the SPARK language.
It is interesting to note that Eiﬀel [19] advocates an approach, known as
Design by Contract (DbC) [9,10,18], that is similar, but not equivalent, to the

320

T.-M. Lin and J.A. McDermid

notion of behavioural subtyping presented in this paper. DbC is based on the
use of assertions which are part of the implementation and are checked at runtime.11 In the SPARK approach, tools are provided for static program analysis
and proof, and they are used to guarantee that a program will always comply
to its annotations — no run-time checks are introduced in the executable code.
The rules of the behavioural subtype relation presented in Section 2 were
deﬁned semi-formally. Therefore, as a future development, it would be interesting
to update and extend the formal semantics of SPARK83, presented in [17,20]
using the Z notation [8], to support SPARK95 and the object-oriented approach
presented in this paper. The proof presented in the previous section is long,
but it is not complex and tool support can be implemented to help discharge
the veriﬁcation conditions generated by the semantic rules of the behavioural
subtype relation.
Note that in the deﬁnition of the class Point 3D presented in Section 3,
it was necessary to introduce two proof functions to verify the tag and return
a copy of the argument p2 as an object in the hierarchy rooted at Point 3D.
The proof functions are necessary because the FDL language [2, §11.5] does
not support the concepts of “tag” and “view” of Ada95. Therefore, another
interesting development would be to deﬁne an extension of the FDL language to
provide built-in support for tags and views, thus eliminating the need for proof
functions to access/verify tags and provide support for type conversion between
subtype and supertype objects.
The work presented in this paper has dealt with object-oriented programming in the SPARK approach. Support for other features of Ada95, namely
concurrency and real-time programming, are considered in another paper [4].
Acknowledgements. We would like to thank the anonymous referees for their
helpful comments, careful reading and valuable suggestions. Lin would also like
to thank Alan Burns and CNPq/Brazil.

References
1. P. Amey and G. Finnie. SPARK95 – diﬀerences from SPARK83. Technical Report
S.P0468.73.46, Praxis Critical Systems Limited, September 1998.
2. J.G.P. Barnes. High Integrity Ada: The Spark Approach. Addison-Wesley, 1997.
3. G. Booch. Object-Oriented Analysis and Design with Applications. Benjamin/Cummings, 2nd edition, 1994.
4. A. Burns and T.-M. Lin. Adding temporal annotations and associated veriﬁcation
to the Ravenscar proﬁle. In Ada-Europe 2003, LNCS (to appear). Springer-Verlag,
2003.
11

In Eiﬀel, assertions can be written using the language itself (e.g. function call) and,
as far as we know, no tool exists to verify (or guarantee) conformance of an Eiﬀel
program to its assertions prior to execution. Hence, the fact that a program in Eiﬀel
satisﬁes its assertions at run-time does not imply that the program is guaranteed to
always comply to its assertions.

A Behavioural Notion of Subtyping for Object-Oriented Programming

321

5. L. Cardelli. A semantic of multiple inheritance. Information and Computation,
76(2/3):138–164, 1988.
6. R. Chapman and P. Amey. SPARK toolset release note - release 6.1. Technical
Report EXM/RN, Praxis Critical Systems Limited, 2002.
7. K.K. Dhara and G.T. Leavens. Forcing behavioral subtyping through speciﬁcation
inheritance. Technical Report 95-20c, Department of Computer Science, Iowa State
University, 1997.
8. A.R. Diller. Z: An Introduction to Formal Methods. John Wiley, 2nd edition, 1994.
9. R.B. Findler, M. Latendresse, and M. Felleisen. Behavioral contracts and behavioral subtyping. ACM SIGSOFT Software Engineering Notes, 26(5):229–236, 2001.
10. E. Lamm. Adding Design by Contract to the Ada language. In Ada-Europe 2002,
volume 2361 of LNCS, pages 205–218. Springer-Verlag, 2002.
11. G.T. Leavens. Modular speciﬁcation and veriﬁcation of object-oriented programs.
IEEE Software, 8(4):72–80, 1991.
12. G.T. Leavens and D. Pigozzi. A complete algebraic characterization of behavioral
subtyping. Acta Informatica, 36(8):617–663, 2000.
13. G.T. Leavens and W.E. Weihl. Speciﬁcation and veriﬁcation of object-oriented
programs using supertype abstraction. Acta Informatica, 32(8):705–778, 1995.
14. T.-M. Lin. A formal semantics for MooZ (in portuguese). Master’s thesis, Department of Informatics, Federal University of Pernambuco (UFPE), 1993. Available
from www.cin.ufpe.br/ mooz/.
15. T.-M. Lin. Behavioural Subtype and Covariance of (Input) Arguments in ObjectOriented Speciﬁcation Languages (submitted). PhD thesis, Department of Computer Science, The University of York, 2002.
16. B.H. Liskov and J.M. Wing. A behavioral notion of subtyping. ACM Transactions
on Programming Languages and Systems, 16(6):1811–1841, 1994.
17. W. Marsh. Formal semantics of SPARK: Static semantics (Version 1.3). Technical
report, Program Validation Ltd., 1994.
18. B. Meyer. Design by contract. Technical Report TR-EI-12/CO, ISE Inc., 1987.
19. B. Meyer. Object-Oriented Software Construction. Prentice Hall, 2nd edition, 1997.
20. I. O’Neill. Formal semantics of SPARK: Dynamic semantics (Version 1.4). Technical report, Program Validation Ltd., October 1994.
21. S.T. Taft and R.A. Duﬀ, editors. Ada 95 Reference Manual: Language and Standard
Libraries, volume 1246 of LNCS. Springer-Verlag, 1997.
22. M. Utting. An Object-Oriented Reﬁnement Calculus with Modular Reasoning. PhD
thesis, Department of Computer Science, The University of New South Wales, 1992.
23. M. Wolczko. Semantics of Object-Oriented Languages. PhD thesis, Department of
Computer Science, The University of Manchester, 1988.

