DRN: A CORBA-Based Distributed Resource
Navigation System for Data Grid
Jia-Jia Miao, Ai-Ping Li, Jia Yan, and Quan-Yuan Wu
School of Computer Science, National University of Defense Technology
Changsha 4100073, P.R. China
elanmiao@yahoo.com.cn, apli@x263.net, elanmiao@gmail.com

Abstract. Data grids are becoming increasingly important for sharing distributed
data and information in collaborative environments. This paper presents a
CORBA-based Distributed Resource Navigation system consisting of Resource
Agents and Navigation Service. The former one is a middleware that provides
applications with a uniform set of operations to access heterogeneous distributed
storage resources including file systems and database systems, and archival
storage systems. The latter one is a metadata navigation service which is utilized
by DRN to improve data publishing and lookup efficiency. Experiments show
that CORBA-based DRN can provide the essential data virtualization services,
and that Navigation service and Resource agent have a good performance with
concurrent accesses.
Keywords: CORBA, Data intensive computing, Data virtualization.

1 Introduction
Grids [1] are environments that enable software applications to integrate computational
and data resources that are managed by diverse organizations in widespread locations.
Examples of data-intensive applications include experimental analyses and simulations in
several scientific disciplines [2,5], such as high-energy physics, climate modeling,
biomedical applications, earthquake engineering, oceanographic systems, and astronomy
and so on.
CORBA has emerged as a popular distributed computing standard and meets the
necessary requirements for grid computing [3], so as to be adopted by application
developers as one kind of the Grid infrastructure. N.A.B. Gray [4] made comparisons
of Web Service, Java RMI, and CORBA solutions for demonstration applications.
Work related to the DRN system includes the SRB [7], the SRM [8]. The DRN
system differs from those mentioned above in that it provides a file I/O interface to the
actual data item, which may reside in a file system or a database system. Thus, the
DRN system supports more types of storage resources. Till now, it has been
implemented for a variety of storage systems and OS platforms, and the resource
providers can implement the data accessing logic in the Resource Agent themselves.
Using DRN system, users do not need to care about the communications, which is
inter-realm by CORBA mechanism.
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 121–124, 2007.
© Springer-Verlag Berlin Heidelberg 2007

122

J.-J. Miao et al.

2 System Architecture
We propose a novel architecture of Distributed Resource Navigation System. We
developed Resource Agents (RAs) to provide seamless access to data stored on a
variety of storage resources, including file systems and database systems.
Furthermore, we define IDL files with file accessing operations, including readFile,
writeFile, makeDir, deleteDir, etc. For each kind of resource, we implemented the
object with this kind of IDL. Applications can use the distributed objects' operations
to access data stored anywhere of the distributed storage sites. The RA is used to
provide the capability to discover the information needed, identify data collections of
interest, and select and retrieve data items that may be distributed across a wide
network. The application builds on our system can use RAs to access heterogeneous
storage resources in a distributed system. The DRN employs a metadata Navigation
Service to manage descriptive as well as system metadata associated with data
collections and resources. Using the NS, we can store and retrieve metadata about
system entities, including RAs' object reference, storage resources, data items and
resource access control rules. By providing location transparency, the NS enables
attribute-based data accessing. This means that applications can locate the data
without providing low-level details or without referencing the data by path names.

Fig. 1. Client/Server Components of (a) the Navigation Service (b) the Resource Agent

Navigation Service, as shown in Fig. 1-a, a client-side stub is auto-generated from
this interface. On the server side, the interface is processed to yield a base class for
the implementation class. In our DRN system, the application communicates with
Services using CORBA mechanism. The application and RA use the Client Stub to
call Navigation Service’s functions.
By using Resource Agent, applications can seamless access the data and information
stored in the DRN system. The Resource Agent works as a resource wrapper, and it
provides the file model operations. From the viewpoint of the resource users, all
resources are file systems. As shown in Fig. 1-b, on the client side, applications use the
Client Stub, which is auto-generated from the interface, to call the remote service. On
the other side, resource providers must accomplish the function implements. As
CORBA is a language independent middleware, developers can use their favorite
language to accomplish the job.

DRN: A CORBA-Based Distributed Resource Navigation System for Data Grid

123

3 Experiments
In this section we describe our implementations in using the DRN in some
applications. In order to demonstrate the features of the DRN system, we present
these applications with synthesis data. We also utilize the implementation to illustrate
how to deploy the data management system with the DRN system. The total data size
of the implementation is 400GB, including about 4,300 files stored in a number of file
system servers, and more than 6,100 data items stored in certain number of DBMS.
One of the most important features of this architecture is that the NS must provide
data source register and un-register steadily. Then we design an artificial experiment
to prove this. In this experiment, that application Register-Machine use number 1 to
400 as the resource register name, it creates 20 threads register and un-register to NS
circularly. Then we have application Caller to call for the resources which have
registered at NS. Register-Machine will make the NS throw exception named
ResAlreadyExist, and Caller will induce exception named ResNotExist. Then we
compare two log file to show whether the NS can handle this.
Experimental results are shown in Fig. 2-a. The number of registered RA is the RA
which has registered at NS, and the number of Called RA is the RA which has been
called from Caller. The results follow our program design. Experimental results show
that Navigation Service can handle parallel request steadily.

Fig. 2. Experimental Results of (a) NS, (b) RA test
Table 1. Experimental Results of many users concurrent access different blob size
Blob Field
Size (kb)
434
434
434
434
434
434

The number of
Users
1
5
10
30
60
100

The number of
Cycles
10
10
10
10
10
10

Consume
Time (second)
1
7
13
37
75
123

124

J.-J. Miao et al.

We also evaluate data access consume in our system. In this experiment we use a
application simulate many users concurrently get the blob field from RA, which
wrapped a database resource. We analysis the time consume with different file sizes
and the time consume with different number of users.
Experimental results are shown in Fig. 2-b and Table 1, which 16 users with 5
cycles have a sharp reduce its’ time consume when compare with 1 user with 80
cycles. According to this, we can conclude that RA supports concurrent access and
has a good performance.

4 Conclusion
The DRN system provides the core service for building data management systems
that span multiple administration domains, multiple types of storage systems, and
multiple types of data access environments. The DRN is currently in release 1.4; we
implement it by using CORBA technology, with the platform named StarBus+ [6].
Thus, the client applications and the Resource Agent are implemented for Linux, Sun
Solaris, UNIX, and Windows. In order to provide quick implementation of the
Resource Agent, some kinds of templates are provided as well.
This paper proposes the first steps to create resources accessing and integration
architecture for data-intensive application domains. There are still many interesting
issues to be further studied in DRN, such as data replication, aggregating data in
containers, and I/O command aggregation via a remote proxy, etc.

References
1. Foster I, Kesselman C, Tuecke S. The anatomy of the grid: Enabling scalable virtual
organizations. Int. J. Supercomputer Applications, (2001) 15(3): 200-222
2. M. Antonioletti, A. Krause, N.W. Paton. An Outline of the Global Grid Forum Data Access
and Integration Service Specifications. J.-M. Pierson (Ed.): VLDB DMG 2005, LNCS
3836, pp. 71-84, (2005)
3. Snigdha Verma, Manish Parashar, Jarek Gawor, Gregor von Laszewski. Design and
Implementation of a CORBA Commodity Grid Kit. GRID (2001): 2-13
4. N.A.B. Gray. Comparison of Web Services, Java-RMI, and CORBA service
implementations. Australian Software Engineering Conference, (2004)
5. Reagan W. Moore. Integrating Data and Information Management. Keynote talk of
International Supercomputer Conference ISC, (2004)
6. Wang H M, Wang Y F and Tang Y B. StarBus+: Distributed object middleware practice for
Internet computing. Journal of Computer Science and Technology, (2005) July, 20(4):
542-551

