Automated Discovery in Elementary Extrema
Problems
Francisco Botana and Jos´e L. Valcarce
Departamento de Matem´
atica Aplicada I, Universidad de Vigo, Campus A
Xunqueira, 36005 Pontevedra, Spain
fbotana@uvigo.es
Departamento de Matem´
aticas, IES Pontepedri˜
na, 15702 Santiago, Spain
jvalcarce@edu.xunta.es

Abstract. This paper describes an enhancement of GDI, a dynamic
geometry environment that uses symbolic techniques for performing automatic proof and discovery in elementary geometry. We report a successful add–on that automatically discovers critical points in elementary
extrema problems speciﬁed via diagrams. Based in classical one variable
calculus, the new module, Optimus, is a step ahead in the cooperation
between dynamic geometry and computer algebra systems. It can be
used in technology rich environments for mathematics education, adding
new calculus abilities to dynamic geometry software.

1

Introduction

Dynamic geometry software refers to computer programs where accurate construction of geometric conﬁgurations can be done. The key characteristic of this
software is that unconstrained parts of the construction can be moved and, as
they do, all other elements automatically self–adjust, preserving all dependent
relationships and constraints. Commercial versions of dynamic geometry environments, namely Cabri Geometry [9] and The Geometer’s Sketchpad [8], appeared ending the 80’s, and, since they experienced a fast and wide dissemination
in computer aided mathematical education, remain today as market dominant
tools. Nevertheless, their approach heavily relies on numerical strategies that
have originated some problems which are creating a real bottleneck for future
developments: the so called continuity problem, the loci generation and the proof
capabilities [5].
The continuity problems refers to dynamic diagrams where a small move of
an element causes a sudden jump of a dependent element. It appears in constructions where a dependent point is located on a intersection comprising at
least a quadratic object.
The loci generation problem deals with the way geometric loci are computed
in standard dynamic geometry. The sampling approach taken in most systems
Partly supported by grant MTM2004-03175 from the Spanish MEC and by the
Technical University of Eindhoven, as a visiting scholar during March 2004.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 470–477, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Automated Discovery in Elementary Extrema Problems

471

only allows the generation of parametrically deﬁned loci, and their equations are
also unknown [2].
Regarding proof abilities, it must be noted that the accuracy of the constructions and the possibility to experiment with diﬀerent instances of them have
led to the extensive use of an activity that has been termed as ‘visual proving’
(of properties and theorems). Furthermore, Cabri incorporates an (unexplained)
‘property checker’ that can give an answer to a reduced list of geometric statements about a diagram.
Partly reacting to this numerical approach last generation dynamic geometry programs such as Cinderella [11], GDI [1, 3, 4], GEOTHER [13] and GEX
[7] start including formal tools. Based on projective geometry and Cayley-Klein
geometries (Cinderella), on the Groebner bases method (GDI), or on Ritt–Wu
characteristic sets (GEX and GEOTHER), these systems connect dynamic geometry with solid mathematical theories. Besides that, GDI and GEOTHER
show up two successful examples of cooperation between an interactive environment and a computer algebra system (Mathematica and CoCoA [6] in GDI,
Maple in GEOTHER).
This simple note describes a new way for computing, in an automatic manner, critical points in elementary extrema points described through dynamic
diagrams. Section 2 states the problem and illustrates the Optimus module by
means of a single exercise. The limitations and some extensions of the approach
are discussed in Section 3. Section 4 deals with a possible connection of Optimus
with other dynamic geometry environments via OpenMath.

2

User Interface and Architecture

We will restrict the study to optimization problems in one variable. Furthermore,
we will only consider problems that admit a plane geometric modelization in a
dynamic geometry setting, where the magnitude to optimize is deﬁned by means
of a dependent point, or can be reduced to it.
Let us illustrate the use of Optimus with a simple case: Two vertical poles
OA and PB are secured by a rope AXB going from the top A of the ﬁrst pole to
a point X on the ground between the poles and then to the top B of the second
pole. If the length of poles are 1 and 2, ﬁnd the position of X that requires the
least rope.
The ﬁrst task consists of building a dynamic model of the problem (Fig. 1).
Note that, besides the coordinate axes based on points O(0, 0) and U (1, 0) (being
U hidden in the diagram), there are only three free points A(0, 1), P (2, 0), B(2, 2)
and a dependent point X(x1 , x2 ), which lies on the line passing through O and
U . Since GDI uses a coordinate–based approach, the whole construction can be
algebraically described by the coordinates of points and the condition x2 = 0.
Once the construction is done, the user must specify the magnitude to optimize and the point on which it depends through an ad–hoc designed window
(Fig. 2). The magnitude distance(A,X)+distance(X,B) is internally translated as
the sum of a pair of polynomial constraints x3 + x4 , whose deﬁnitions are

472

F. Botana and J.L. Valcarce

Fig. 1. The construction for the two poles problem

x23 = (x21 + (1 − x2 )2 ) and x24 = ((2 − x1 )2 + (2 − x2 )2 ). Although taking the
square distances will be a source of imprecision, the need of coherence with other
GDI agents (prover, discoverer, ...) compelled us to maintain the computations
in a strict algebraic environment.

Fig. 2. Specifying the point and the magnitude to optimize

Once given the preceding information, GDI launches a local copy of Mathematica, if any, or calls a remote kernel via webMathematica. A small Mathematica package then performs the following operations:
– read the construction points and constraints and the optimization items,
– solve the polynomial constraints (x2 → 0),

Automated Discovery in Elementary Extrema Problems

473

– solve the optimization constraints
(x3 → ± x21 + (1 − x2 )2 ,x4 → ± (2 − x1 )2 + (2 − x2 )2 ),
– for each combination of the preceding solutions
• solve the derivative of the optimization condition with respect to the
unbound variable of the optimization point (x1 ),
• compute the coordinates of the construction dependent points,
• add this set of points to a list of possible solutions,
– return this list.
The list of critical and other dependent points is shown as a window in the
main screen of GDI or, if a remote Mathematica kernel is being used, by means
of a browser (Fig. 3). A numerical approximation of the coordinates is also given
in order to help the student placing the points in the dynamic construction. Note
also that, of course, the ﬁrst point X(−2, 0) does not optimize the length of the
rope, and it has been found due to the polynomial restriction above mentioned.

Fig. 3. The critical points found by the system

3

Limitations and Extensions of the Approach

Apart from the introduction of spurious solutions due to the polynomial restriction, it must be noted that the approach is not complete. Furthermore, it is
recommended that the system will be used under teacher guidance in elementary
levels, since it sometimes poses subtle questions requiring mature mathematical
skills or a deep knowledge of the system design.
Consider, for instance, ﬁnding which isosceles triangle inscribed in a given
circle has the greatest area. A common behavior in a dynamic geometry setting
would be drawing a circle and placing two points A(x1 , x2 ) and X(x3 , x4 ) on
the circle. The third triangle vertex B(x7 , x8 ) can be easily constructed through

474

F. Botana and J.L. Valcarce

the perpendicular bisector of segment AX and its intersection with the circle.
With this construction Mathematica ﬁnds 32 solutions to the set of polynomial
constraints when solving respect to an unbound coordinate of X, say x3 . Eight
of them are degenerate cases (A = X), since they include the rules x1 → x3
and (taken with equal sign) x2 → ± 1 − x23 , x4 → ± 1 − x23 . So, point B is
ill–deﬁned and no derivative is computed because the optimization condition is
null. Other sixteen solutions have two degrees of freedom: no rules for x1 , x3 are
found, according to the fact that A and X have just been deﬁned as arbitrary
points on the circle. The triangle area is then a two–argument function, and the
algorithm aborts the a posteriori computations. The remaining eight solutions
include the rules x1 → x3 , x2 → ± 1 − x23 , x4 → ∓ 1 − x23 , generating the
four solutions returned by the system
√
√
X(−1/2, − 3/2), A(−1/2, 3/2), B(1, 0)
√
√
X(−1/2, 3/2), A(−1/2, − 3/2), B(1, 0)
√
√
X(1/2, − 3/2), A(1/2, 3/2), B(−1, 0)
√
√
X(1/2, 3/2), A(1/2, − 3/2), B(−1, 0)
The shown incompleteness could be avoided just reducing the construction
freedom. Paying the price for some lost of generality, A could be deﬁned to be
U (1, 0), being X a point freely movable on the circle. The system returns in this
case the complete set of solutions
√
√
X(−1/2, − 3/2), B(−1/2, 3/2)
√
√
X(−1/2, 3/2), B(−1/2, − 3/2)
Note that a stronger connection of the Optimus and Discovery modules (not
yet fully implemented) will allow a user to get an answer such as The isosceles
triangle with greatest area inscribed in the circle must be equilateral (see [5] for
the abilities of GDI ﬁnding geometric properties expressed with natural language
statements).
The restriction of using Optimus only for one variable problems deserves additional explanation. GDI oﬀers an option for specifying extra constraints to a
construction. This option is the key for ﬁnding geometric loci with a posteriori
conditions, or for discovering facts about essentially non constructive situations
(see [10] for a paradigmatic example, the MacLane 83 theorem). Through the
introduction of extra constraints the system can be extended to deal with optimization problems in several variables. Consider ﬁnding the right triangle of
given perimeter and maximum area: deﬁning a vertex to be the origin O and
placing the remaining vertices A, X as dependent points on both axes, the user
can declare the perimeter to be a constant, say 14,
distance(O, X) + distance(O, A) + distance(A, X) = 14
and ask about the maximum area of the triangle, taking X as the dependent
point. Two of the eight found solutions are shown in Fig. 4, being the remaining

Automated Discovery in Elementary Extrema Problems

475

ones symmetrical. Again, the consideration of signed distances leads up to the
second group of solutions.
Another possible extension of Optimus has been studied. A construction involving an optimization condition can be done without any reference to numerical coordinates, that is, the coordinates of the free points or the values of the
constants can be symbolic (as they are when using the proving abilities of GDI).
In this case, the obtained solutions will exhibit more generality, but the price
to pay is, in general, an unmanageable increment of the expressions of dependent points. So, since these values are not easily readable, we have restricted the
domain of Optimus to constructions referred to a coordinate system.

Fig. 4. A pair of solutions of the two variable problem

4

Using Optimus with Other Dynamic Geometry
Systems

A goal of this short note consists of illustrating the connection of a dynamic geometry environment with a computer algebra system [12] for performing exact
computations about optimization problems. Since the inputs to the algorithm
described in Section 2 are the list of construction points, the constraints, a dependent point and the magnitude to optimize, any other dynamic geometry
system could be easily modiﬁed to deal with such problems. Nevertheless, the
character of proprietary software of most programs would convert this task in a
time consuming work, unless developed by their own designers. The Geometer’s
Sketchpad, for instance, can export its constructions to html code, for being visualized using the JavaSketchpad applet [15]. In this code, the value of an applet
parameter contains a readable description of the construction. Similarly, Cabri
has an option, Show Figure Description, that roughly describes a construction.
Cinderella and GEX have also a mechanism to see the textual description of
constructions. These tools can be used to analyse the construction and to get
the list of points and constraints. A little piece of code could be then developed in order to select the point and optimization conditions and to launch
Optimus. Nevertheless, in our opinion, a more promising future involves the use
of a common protocol for intercommunication such as OpenMath [16] or the

476

F. Botana and J.L. Valcarce

newest proposal GOOL [14]. Using OpenMath and the experimental plangeo
Content Dictionaries [17], a construction such as the one used in Section 2 can
be described by
point(O(0, 0)), point(U (1, 0)), point(A(0, 1)), point(P (2, 0)), point(B(2, 2)),
line(l, incident(O, l), incident(U, l)), point(X, incident(l, X))
and the optimization condition, deﬁning a new OpenMath symbol optimus, by
optimus(X, distance(A, X) + distance(X, B)
The ﬁrst part of this OpenMath code can be easily translated into a set of points
and a list of polynomials, as shown in the preceding Section. The optimization
condition carries up the rest of the required information for Optimus. So, any
OpenMath–capable system could connect to a remote Mathematica kernel for
performing this kind of computations.

5

Conclusion

We extend a dynamic geometry environment with the ability of computing critical points in elementary one variable optimization problems diagrammatically
described. To this end, we connect our dynamic tool with a computer algebra
system (Mathematica), where standard calculus techniques are employed. Furthermore, this connection can be either local, either via a remote Mathematica
kernel.
While optimization problems are usually managed by means of approximation techniques and empirical testing in educational uses of common dynamic
geometry systems, our proposal gives exact solutions to the exercises and, being
fully integrated with the geometry reasoning system, can be also exploited for
proving or discovering tasks.

References
1. Botana, F., Valcarce, J.L.: A dynamic-symbolic interface for geometric theorem
discovery. Computers and Education, 38(1-3), 21–35 (2002)
2. Botana, F.: Interactive versus symbolic approaches to plane loci generation in
dynamic geometry environments. Proc. I Int. Workshop on Computer Graphics
and Geometric Modeling (CGGM 2002), LNCS, 2330, 211-218 (2002)
3. Botana, F., Valcarce, J.L.: A software tool for the investigation of plane loci. Mathematics and Computers in Simulation, 61(2), 141–154 (2003)
4. Botana, F., Valcarce, J.L.: Automatic determination of envelopes and other derived
curves within a graphic environment. Mathematics and Computers in Simulation,
67(1–2), 3–13 (2004)
5. Botana, F., Recio, T.: Towards solving the dynamic geometry bottleneck via a
symbolic approach. Proc. 5th Int. Workshop on Automated Deduction in Geometry
(ADG 2004), LNAI, 3763, 92–110 (2006)

Automated Discovery in Elementary Extrema Problems

477

6. Capani, A., Niesi, G., Robbiano, L.: CoCoA, a system for doing Computations in
Commutative Algebra. Available via anonymous ftp from: cocoa.dima.unige.it
7. Gao, X.S., Zhang, J.Z., Chou, S.C.: Geometry Expert. Nine Chapters, Taiwan
(1998)
8. Jackiw, N.: The Geometer’s Sketchpad v 4.0. Key Curriculum Press, Berkeley
(2002)
9. Laborde, J. M., Bellemain, F.: Cabri Geometry II. Texas Instruments, Dallas (1998)
10. Recio, T., Botana, F.: Where the truth lies (in automatic geometry theorem proving). Proc. II Technical Session on Computer Graphics and Geometric Modeling
(TSCG 2004), LNCS, 3044, 761–770 (2004)
11. Richter–Gebert, J., Kortenkamp, U.: The Interactive Geometry Software Cinderella. Springer, Berlin (1999)
12. Roanes–Lozano, E., Roanes–Mac´ıas, E., Villar, M.: A bridge between dynamic
geometry and computer algebra. Mathematical and Computer Modelling, 37(9–10),
1005-1028 (2003).
13. Wang, D.: GEOTHER: A geometry theorem prover. Proc. 13th International Conference on Automated Deduction (CADE 1996), LNCS, 1104, 166–170 (1996)
14. Wang, D., Liang, T.: Towards a Geometric–Object–Oriented Language. Proc. 5th
Int. Workshop on Automated Deduction in Geometry (ADG 2004), LNAI, 3763,
130–155 (2006)
15. http://www.keypress.com/sketchpad/javasketchpad/
16. http://www.openmath.org
17. http://www.win.tue.nl/~amc/oz/om/cds/geometry.html

