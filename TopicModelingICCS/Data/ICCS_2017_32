Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
Science
(2017) 1185–1194
This Procedia
space isComputer
reserved
for 108C
the Procedia
header, do not use it
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Accelerating the Diffusion-Weighted Imaging Biomarker in
Accelerating the Diffusion-Weighted Imaging Biomarker in
the the
clinical
practice: comparative
study
Accelerating
Diffusion-Weighted
Imaging
Biomarker in
the clinical
practice: comparative
study
Ferran Borreguero
Torro11practice:
, J. Damian comparative
Segrelles Quilis11 , study
Ignacio Blanquer
the1,2 clinical
2
2
Ferran Borreguero
Torro , J. Damian Segrelles
Quilis , Ignacio Blanquer
Espert1,2 , Angel Alberich Bayarri2 , and Luis Martı́ Bonmatı́2
1
1
, Angel
Alberich
BayarriSegrelles
, and Luis
Martı́
Bonmatı́
FerranEspert
Borreguero
Torro
, J. Damian
Quilis
, Ignacio
Blanquer
1
Instituto de Instrumentacin
para Imagen Molecular
(I3M) Universitat Politcnica de2 Valncia,
1,2
2
1
,
Angel
Alberich
Bayarri
,
and
Luis
Martı́
Bonmatı́
Espert
Instituto de Instrumentacin para Imagen
Molecular
Valencia,
Spain(I3M) Universitat Politcnica de Valncia,
Valencia, Spain
ferborto@inf.upv.es;dquilis@dsic.upv.es;
iblanque@dsic.upv.es
Instituto de
Instrumentacin para Imagen Molecular (I3M)iblanque@dsic.upv.es
Universitat Politcnica de Valncia,
GIBI230 ferborto@inf.upv.es;dquilis@dsic.upv.es;
Biomedical Imaging Research Group, La Fe University
and Polytechnic Hospital,
Valencia,
Spain
2
GIBI230 Biomedical Imaging Research
Group,
La
Fe
University
and Polytechnic Hospital,
Valencia, Spain
ferborto@inf.upv.es;dquilis@dsic.upv.es;
iblanque@dsic.upv.es
Valencia,
Spain
angelalberich@gmail.com;marti
lui@gva.es
2
GIBI230 Biomedical angelalberich@gmail.com;marti
Imaging Research Group, La Fe University
and Polytechnic Hospital,
lui@gva.es
Valencia, Spain
angelalberich@gmail.com;marti lui@gva.es

1
2

Abstract
Abstract
Diffusion Weighted Imaging (DWI) methods (ADC and IVIM models) extract meaningful inDiffusion
Weighted Imaging (DWI) methods (ADC and IVIM models) extract meaningful information
Abstract about the microscopic motions of water of human tissues from MRIs. This is a non
formation
about which
the microscopic
motions ofrole
water
of human
tissues
from MRIs.
This
is agrade
non
invasive
method
plays (DWI)
an important
in the
diagnosis
of ischemic
strokes,
high
Diffusion Weighted
Imaging
methods (ADC
and
IVIM models)
extract
meaningful
ininvasive
method
which plays an important role in the diagnosis of ischemic strokes, high grade
gliomas
or
tumors.
formation about the microscopic motions of water of human tissues from MRIs. This is a non
gliomas
tumors.
In theor
La
Fe Polytechnic
DWI methods
aforementioned
aregrade
used
invasive
method
which playsand
an University
important Hospital,
role in thethe
diagnosis
of ischemic
strokes, high
In the La
Fe Polytechnic
andisUniversity
Hospital, the tool
DWIfor
methods
aforementioned
are used
in
clinical
practice
and
Matlab
used
as
a
development
his
out
of
box
performance
and
gliomas or tumors.
in
practice However,
and Matlab
is used
as takes
a development
tool for his
outtoofMatlab’s
box performance
and
fastclinical
prototyping.
each
image
hours
to
compute
due
environment
In the La Fe Polytechnic and University Hospital, the DWI methods aforementioned are used
fast
prototyping.functions.
However,Because
each image
takes
hours
to
compute
due to
Matlab’s environment
and
interpreted
of
this,
its
use
in
clinical
practice
is
limited.
in clinical practice and Matlab is used as a development tool for his out of box performance and
andIninterpreted
of this, versions
its use inonclinical
practice is
limited.
this paper functions.
weHowever,
presentBecause
three
different
parallel
paradigms
based
fast prototyping.
each compiled
image takes
hours towhich
compute
due to
Matlab’s
environment
In this paper
we present
three
compiled
versions
on which
different
parallel paradigms
based
on
multicore
(OpenMP)
and
GPU
(CUDA)
are
applied.
These
implementations
have
managed
and interpreted functions. Because of this, its use in clinical practice is limited.
on
multicore
(OpenMP)
and
GPU
(CUDA)
are
applied.
These
implementations
have
managed
to reduce
the
computation
time
to
less
than
one
minute,
therefore,
it
allows
easing
their
use
in
In this paper we present three compiled versions on which different parallel paradigms based
to
reduce
the practice
computation
time to
less than one
minute, therefore, it allows easing their use in
daily
clinical
at
a
cheap
acquisition
cost.
on multicore (OpenMP) and GPU (CUDA) are applied. These implementations have managed
daily clinical practice at a cheap acquisition cost.
to2017
reduce
computation
time
to less
than one minute, therefore, it allows easing their use in
Keywords:
DWI,
ADC,
IVIM,
OpenMP,
GPUs
©
The the
Authors.
Published
by
Elsevier
B.V.
Keywords:
DWI,
ADC, at
IVIM,
OpenMP,
GPUs
daily clinical
practice
a of
cheap
acquisition
cost.
Peer-review
under
responsibility
the
scientific
committee
of the International Conference on Computational Science
Keywords: DWI, ADC, IVIM, OpenMP, GPUs

1 Introduction
1 Introduction
A biomarker is a characteristic or property that is measured and evaluated in a quantifiable and
1
Introduction
A
biomarker
a characteristic
or an
property
that either
is measured
andif evaluated
in aprocess
quantifiable
and
objective
wayis[1],
and is used as
indicator,
to know
a biological
is normal
objective
way [1],
andmeasure
is used the
as an
indicator,
to knowintervention
if a biological
process
normala
or
pathogenic,
to
response
to aeither
to is
predict
A biomarker
is aorcharacteristic
or property
that
istherapeutic
measured and
evaluated or
in aeven
quantifiable
and
or
pathogenic,
or
to
measure
the
response
to
a
therapeutic
intervention
or
even
to
predict
future
state
a patient
(surrogate
Quantitative
Imaging
Biomarkers
[17]a
objective
wayof[1],
and is used
as an endpoints).
indicator, either
to know if
a biological
process(QIB)
is normal
future
state
of
a
patient
(surrogate
endpoints).
Quantitative
Imaging
Biomarkers
(QIB)
[17]
are
those that use
medical
imaging
(i.e. MRIs)
data source.
or pathogenic,
or to
measure
the response
to aastherapeutic
intervention or even to predict a
are The
thoseDiffusion-Weighted
that use medical imaging
(i.e.
MRIs)
as
data
source.
Imaging (DWI)
[2] is aQuantitative
QIB that uses
MRIs to
determine(QIB)
the movefuture state of a patient (surrogate
endpoints).
Imaging
Biomarkers
[17]
The
Diffusion-Weighted
Imaging
(DWI)
[2] is a In
QIB
that
uses
MRIs
to determine
the movement
of
water
in
the
tissues
(diffusion)
in-vivo.
an
ideal
free
environment,
movement
is
are those that use medical imaging (i.e. MRIs) as data source.
ment of water in the tissues (diffusion) in-vivo. In an ideal free environment, movement is
The Diffusion-Weighted Imaging (DWI) [2] is a QIB that uses MRIs to determine the move1
ment of water in the tissues (diffusion) in-vivo. In an ideal free environment, movement is
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.108

1

1186	

Accelerating Diffusion-Weighted
Imaging Biomarker
the clinical
practice
F. Borreguero et al.
Ferran Borreguero
Torro et al. /inProcedia
Computer
Science 108C (2017) 1185–1194

random or Brownian, but within the organism, water interacts with capillaries, fibers, membranes, or cells that modify this pattern. In areas where the composition or number of cells
is irregular, diffusion levels have unusual values that correctly detected can help to determine
the presence of tissue injury: liver injury [21], metastasis [10], or Pancreatic lesions [13], among
others.
The Apparent Diffusion Coefficient (ADC) and the Intravoxel Incoherent Motion (IVIM)
[12, 11] are two models of DWI. The simplest model is the ADC, since it assumes that water
movement is random within the body. However, ADC is not always a useful method because it
does not contemplate some scenarios, such as when it is applied to areas of the body with high
levels of perfusion (blood supply to a tissue). In these scenarios, the diffusion value is not only
affected by the movement of water, but also by the circulation in the capillaries. Therefore, the
use of the IVIM model is more appropriate.
Both models are coded in the form of mathematical equations whose values are the intensities
of the voxels of the image while the unknown parameters are diffusion values to be solved. While
ADC can be solved analytically, IVIM unknowns must be approximated using the curve fitting
or least squares method. The curve fitting methods represent the most expensive part from
the computational point of view, since they are iterative methods that approximate the result
trying to reduce the residual values. One of the most widely used curve fitting algorithms in
implementations of both models is the Levenberg-Marquardt [15].
In the context of this work, the La Fe Polytechnic and University Hospital (HUPLF) has the
implementations in Matlab of the ADC and IVIM models for use in clinical practice, provided
by the company QUIBIM S.L.. Matlab is a widely used language within the medical imaging
community because of its ease of programming, out-of-box performance, and the number of
available libraries and tools. Though there are specific toolboxes to run its programs through
multi-threaded executions or GPUs, the performance of Matlab is low. This fact causes that
the use of both implementations in the clinical practice of HUPLF is limited since its time cost
is very high (order of hours).
The objective of this work is to perform a study on the possible optimization techniques
applicable to the implementations of the ADC and IVIM models used in the HUPLF. These
optimizations will focus on the use of compiled languages and parallel programming paradigms
that take advantage of the features offered by GPUs and commercial off-the-shelf multicore
processors, given their low acquisition cost. The purpose of these optimizations is to reduce
computation times, so as not to limit the use of QIB in daily clinical practice in a non-intrusive
way for end users and without the need to make investments in computing resources that can
not be assumed by the hospital.

2

Materials and Methods

This section briefly describes the theoretical formulation of the ADC and IVIM models, as well
as an outline of how the Matlab implementation used in the HUPLF is structured, which is the
baseline of this work. Next, It describes the parallel paradigms used for the optimization of the
model. The following subsections describe the datasets and the infrastructure used to evaluate
and compare the different implementations.

2.1

Diffusion Weighted Imaging

For the calculation of the parametric maps, it is necessary first to acquire images that capture
the diffusion of the water in the tissues. MRI scanners are configured with a parameter b
2

	

Accelerating Diffusion-Weighted
Imaging Biomarker
the clinical
practice
F. Borreguero et al.
Ferran Borreguero
Torro et al. /inProcedia
Computer
Science 108C (2017) 1185–1194

Figure 1: MRI image of a liver (right). ADC parametric map (left)
.
(s/mm2 ), which reflects the strength, interval and duration of the magnetic pulses used to
obtain the image on the scanner. Water molecules with a lot of movement will appear for low
b-values (i.e. b = 50-100 s/mm2 ) while images with high b-values (i.e. b = 1000 s/mm2 ) will
show molecules with a slower motion.
The choice of the value of b will be determined by the field of study, age of the patient, body
morphology or type of pathology to be analyzed [3, 4]. For example, areas with metastases have
a higher concentration of cells that limit water movement, therefore a high b-value would be
recommended.
Most of the DWI implementations in the literature are mostly based on Maltab or Python
[7, 20] since these platforms offer a better prototyping environment and a variety of libraries
for computing the least squares.
2.1.1

Apparent Diffusion Coefficient

Apparent Diffusion Coefficient (ADC) (equation 1) assumes a totally random movement of
water with an exponential fall as the b value increases.
Sb = S0 e−b∗ADC

(1)

Figure 1 shows a comparison of a normal MRI image of a liver (Figure 1-right) versus the
parametric map resulting from applying the ADC model (Figure 1- left). As can be seen, the
ADC map shows zones of high intensity that may correspond to a possible lesions.
ADC starts from two images, one called S 0 acquired for b = 0 (rest) and another one called
S b with b different from zero, which is determined by the medical specialist according to the
study that he wants to perform. The mathematical model is applied to each voxel of the volume
and the D value representing the diffusion in that voxel is solved. Applying the process over
the whole image generates a parametric map such as the one showed at Figure 1.
2.1.2

Intravoxel Incoherent Motion

In [11], the IVIM model is proposed. Their formulation (equation 2) assumes that diffusion
follows a biexponential distribution and introduces two factors besides diffusion (D*), which are
perfusion (f) and pseudodiffusion (D) that incorporate in the model the circulation of irrigation
blood in the capillaries.
Sb = S0 ∗ f ∗ D∗ + S0 ∗ (1 − f ) ∗ D

(2)
3

1187

1188	

Accelerating Diffusion-Weighted
Imaging Biomarker
the clinical
practice
F. Borreguero et al.
Ferran Borreguero
Torro et al. /inProcedia
Computer
Science 108C (2017) 1185–1194

Figure 2: Voxel adquisition. Step 5
The result of IVIM are three parametric maps: D (pseudodiffusion), f (perfusion) and D*
(diffusion). In addition, in IVIM it is necessary to use more than two images for different values
b. There is no general rule about how many and what values of b must be used, since that
depends on the object of the study [18, 4]. However, there are studies to determine the optimal
number of b values to be used [14], which indicates that the optimal number are 16 different
values of b, with 10 being the minimum number of values for valid results.

2.2

Matlab Implementation of DWI

Each medical study is processed as a 4D volume in NIfTI format 1 , although other formats
such as DICOM could be processed2 . The first three dimensions correspond to each voxel of
the patient’s 3D volume, while the fourth dimension refers to each acquisition for a different b
value.
Algorithm 1 Matlab-C pseudocode
procedure Diffusion-Weighted Imaging
bvalues ← [0, 3, ..., 15]
volume ← [I(0), I(3), ..., I(15)]
4:
for i in voxels do
5:
xdata ← [I(0, i), I(3, i), ..., I(15, i)]
6:
diffusion ← curve fitting(xdata, bvalues)
1:
2:
3:

The pseudocode of the algorithm is shown on Algorithm 1. Once the 4D volume of the
NIfTI file is read (line 3), all voxels of the image (line 4) are processed iteratively. For each
voxel, we obtain a vector xdata with the intensity of that voxel for each image of different value
b (line 5) as shown in figure 2. Next, we use these data to solve the DWI equation (line 6)
depending on the model: ADC (analytically) or IVIM (curve fitting). Once all the voxels are
processed, the diffusion parametric map of the image is obtained.
Within the different alternatives for the implementation of curve fitting, the method used
in the Matlab implementation provided by the HUPLF is the levenberg-marquardt, since it is
1 Neuroimaging
2 DICOM

4

Informatics Technology Initiative. https://nifti.nimh.nih.gov
Standard http://dicom.nema.org/standard.html

	

Accelerating Diffusion-Weighted
Imaging Biomarker
the clinical
practice
F. Borreguero et al.
Ferran Borreguero
Torro et al. /inProcedia
Computer
Science 108C (2017) 1185–1194

the one traditionally used for DWI implementation [7, 19]. It is supported on the Matlab suite
through the lsqcurve fitting function, which is implemented entirety in Matlab except for the
linear resolution of equations which is implemented with native C. It is a standard iterative
algorithm for the resolution of the least squares when the equations are nonlinear.

2.3

Sequential approach

One of the main objectives is to optimize the baseline through the reimplementation of the
processing module in a more efficient language and allow its integration into the clinical practice
of the hospital in a way not intrusive for end users. Therefore, it has been decided to maintain
the existing Matlab User Interface (UI) and reimplement only the processing part proposed in
Figure 2. Matlab itself offers the MEX 3 files which allow bridging between Matlab and C,
C++ and Fortran. Since fortran now has almost residual use compared to the others, and we
do not need object-oriented programming or the templates provided by C++, we choose C as
the language to reimplement the processing block.

2.4

Parallel approach

In the implementations represented in Algorithm 1, when the diffusion value of ADC (direct
analytical form) or IVIM (curve fitting) of a voxel is solved, the calculation can be performed
independently in each voxel. Therefore, it is possible to parallelize the operations and reduce
the total computation time through parallel paradigms.
We present two alternatives of parallelization, these are multicore CPU using OpenMP and
GPU (NVIDIA) with CUDA. These are widely used in both scientific and medical settings [6, 9]
and can be implemented through extensions and pragmas of the C language.
The acquisition of these CPUs is inexpensive and little intrusive from the point of view of
their integration in hospital computing infrastructures. Other parallelization options such as
clusters (MPI) or cloud are discarded because of their high cost in acquiring the infrastructure
that supports it and its complexity in integrating into hospital computing infrastructures and
workflow.
2.4.1

OpenMP

OpenMP (OMP) [30] is a standard that defines a series of compilation directives and libraries
of high level routines which distribute different threads between the cores of the processor.
Although parallelization is trivial, care must be taken for cases with dependence on variables
between threads that can cause race conditions and inconsistent states.
At the time of executing the code it is possible to specify in how many threads are distributed
the iterations. However, if the number of threads exceeds the number of cores, several threads
will share resources and the execution time may reach a bottleneck and stop reducing the time.
2.4.2

Cuda

Current desktop CPUs and midrange servers range from 2 to 12 cores. In contrast, graphics
cards or GPUs have thousands of cores, but with smaller computing capacity and with different
architecture. GPUs may be more useful than CPUs with simple operations over many elements
such as the ones used on graphics rendering or matrix multiplications.
3 Matlab

MEX Files. https://es.mathworks.com/help/matlab/matlab_external/introducing-mex-files.

html

5

1189

1190	

Ferran Borreguero
Torro et al. /in
Procedia
Computer
Science 108C (2017) 1185–1194
Accelerating Diffusion-Weighted
Imaging Biomarker
the clinical
practice
F. Borreguero et al.

Case
R1
R2
R3
P1
P2
P3
C1
C2
C3

X
112
128
128
224
224
224
256
224
256

Y
112
128
128
224
224
224
256
224
256

Z
24
24
24
12
12
15
36
24
36

Voxels
301056
393216
393216
602112
602112
752640
2359296
1204224
2359296

Table 1: IVIM Dataset

Case
656a
656b
201
263
144
631a
631b
631c

X
256
256
256
256
256
256
256
256

Y
256
256
256
256
256
256
256
256

Z
20
20
24
24
26
30
30
30

Voxels
1310720
1310720
1572864
1572864
1703936
1966080
1966080
1966080

Table 2: ADC Dataset

The compute Unified Device Architecture [31] (CUDA) architecture is a development environment that allows access and programming of all resources offered by NVIDIA GPUs. It
is programmed through CUDA C, which extends the C language allowing to create functions
(kernels), which when launched are executed by different threads within the GPU.
When reimplementing the ADC and IVIM models, it is important to note that at the time
of executing a kernel function, the number of concurrent threads that execute it is specified.
Each thread computes the same kernel on different data. In addition, the kernel code has three
levels of hierarchy, that is, each kernel is executed on different threads, which are organized in
blocks and these in turn in grids. The threads belonging to the same block share a memory
space with which they can exchange messages.
The number of grids, blocks and threads can vary in each kernel and is defined in the
execution call itself. This information as well as thread and block indexes are accessible for
each thread at runtime through variables predefined by CUDA-C.

2.4.3

Dataset and Infrastructure

The images for the comparative analyzes have been provided by the HUPLF. For the ADC
model, the dataset used is shown in Table 1 in which each case has two values b. For the IVIM
model, the dataset used is shown in Table 2 in which each case has 15 bvalues (except case R1
with 14). Each case of the datasets is a 4-dimensional NIfTI file. On the tables, (X, Y and Z)
refer to the three axis of the image being the b value the forth one.
Tests have been conducted on an Intel i7 (twelve cores) CPU running at 3.20GHz and
attached to two 4GB GeForce GTX 680 GPU graphics cards of which only one is used. The
Matlab 2015 version has been used.

3

Results and Discussion

In this section, the reimplementations made on the Matlab baseline are shown as follows: a
sequential version in C language, a parallel version with OpenMP and another version with
GPU-Cuda. In addition, a comparative analysis of all the new versions made with respect to
the initial version of Matlab is presented.
6

	

Ferran Borreguero
Torro et al. /in
Procedia
Computer
Science 108C (2017) 1185–1194
Accelerating Diffusion-Weighted
Imaging Biomarker
the clinical
practice
F. Borreguero et al.

3.1

C-Sequential

There are different libraries with implementations in C for curve fitting (i.e. MinPack [16],
Ceres Solver4 ). However, since the purpose of this work is to make a temporal comparison to
the variant in Matlab, the lsqcurve fitting function has been literally transcribed from Matlab
to C. The source code in Matlab is easily accessible through the command ’edit lsqcurve fitting’
on the Matlab command line. With this transcript, it is indirectly ensured that the results
offered by the Matlab version correspond to the C version.
Some of the internal functions used by ’lsqcurvefit’ are not opensource and have not been
literally transcribed from Matlab. Therefore, the resolution of the root of a vector is based on
[5] and the linear resolution of equations uses the QR of Householder from [8].

3.2

OpenMP

In the calculation of the DWI for the ADC and IVIM models, the greatest computational load
resides in the loop that runs the voxels. Usually, although it depends on the use case, more
than half a million iterations are made. In the algorithm, each of these iterations is performed
sequentially, but since the computations are independent, the operations can be done in parallel.
With minor modifications, the ”#omp parallel for” pragma is placed in front of the main
loop that runs the voxels. In this way, OpenMP will distribute each iteration among the threads
specified by the user.

3.3

Cuda

The difference of architectures between GPU and CPU that has been exposed previously influences the type of parallel solutions that can be implemented with each paradigm. In OpenMP
the parallelism has a high granularity with little dependence of threads whereas in solutions
with Cuda (fine granularity) the threads are coordinated to obtain the final result.
In this work we intend to make a simple parallel approach in which we apply the same
paradigm used in OpenMP. Each independent thread will perform a single curve fitting, without
coordination between threads. Since in Cuda it is possible to launch a greater number of threads,
at the moment of the execution there will be many more calculations of voxels concurrently.
Since the computing capacity of each core is lower, the time of each curve fitting will be
greater with respect to OpenMP. Therefore, it is interesting to note the approaches offered
by each technology. On the one hand, OpenMP with a lower level of parallelism but greater
computing power, and on the other hand, Cuda with a high degree of parallelism and lower
individual performance.

4

Comparative Analysis

The ADC equation can be solved analytically, without the need to use curve fitting methods.
For the dataset in Table 1, the sequential version in C solved analytically takes less than half a
second for each case. Therefore, there is no need to apply parallelization to speedup even more
these results. The aforementioned comparative analysis of the parallel implementations will be
done using the IVIM model.
For the Cuda implementation, before executing the code we need to tune the number of
threads per block and the number of concurrent threads. Some images have millions of voxels
4 Ceres-Solver.

http://ceres-solver.org

7

1191

Ferran Borreguero Torro et al. / Procedia Computer Science 108C (2017) 1185–1194

1192	

Accelerating Diffusion-Weighted Imaging Biomarker in the clinical practice

F. Borreguero et al.

Figure 3: OpenMP threads execution time for IVIM Model

so that would be prohibitive to run such a quantity of threads concurrently on the GPU. We
have to establish an upper bound on the number on running parallel threads. If the number of
total voxels is greater than the upper limit, there will be threads that will compute more than
one curve fitting.
An heuristic study was carried out to determine the input parameters before comparing the
different versions implemented. Different combinations of number of concurrent threads (250
thousand, 500 thousand, 750 thousand) and number of threads per block (125, 150, 175) have
been tested. The time difference between all combinations (90 times) has been minimal (less
than 2 seconds). The combination with best times has been for 500.000 concurrent threads and
150 threads per block. This will be used during the comparative analysis.
Regarding the OpenMP version, we have to consider an input parameter when launching
the executions, this is the number of threads that you want to use. For the comparative study,
the following threads configurations (2, 4, 6, 8, 12 and 20) have been used. In addition, both
OpenMP and sequential versions have used O3 compilation option for optimization. Only
this option has meant a 3x improvement on execution time. The figure 3 shows how with
OpenMP an asymptotic limit with 12 threads is reached, which coincides with the number of
cores in the execution environment used. When the limit is exceeded, the threads must begin
to share resources within the cores and therefore, its execution stops being totally independent.
Therefore, for the performance of the comparative study, 12 threads are used.
Table 3 shows the comparative results of the different parallel implementations with the
speedups. It can be observed that only by applying C in sequential you get speedups of 300 on
the version in Matlab entering in times of minutes. From there, parallel versions are applied to
improve the times. The times in OpenMP are those that were obtained with 12 threads, which
was the most optimal configuration.
Given these results, it is proven that the GPU-Cuda version, despite running thousands of
voxels concurrently, due to the lowest computing power, can not compete with OpenMP times.
8

	

Ferran Borreguero Torro et al. / Procedia Computer Science 108C (2017) 1185–1194
Accelerating Diffusion-Weighted Imaging Biomarker in the clinical practice

Case
R1
R2
R3
P1
P2
P3
C1
C2
C3

Matlab
8322
8222
7277
23600
20900
25000
37040
23600
43000

Times
C
29
28
25
80
69
85
137
83
149

(seconds)
OpenMP
4,5
4,4
4
12
11
13
21
13
23

Cuda
12
13
11
28
25
29
43
34
56

Matlab-C
287
293
291
295
302
294
270
284
288

1193

F. Borreguero et al.

Speedups
C-OpenMP
6,44
6,36
6,25
6,67
6,27
6,54
6,52
6,38
6,48

C-Cuda
2,42
2,15
2,27
2,86
2,76
2,93
3,19
2,44
2,66

Table 3: Comparative times among the different implementations

5

Conclusion

Although it is a language of easy prototyping, the execution time for ADC and IVIM with
Matlab, makes its use in clinical practice limited.
Only with the transcription to C, the procedure has already entered in times of minutes,
compared to the previous hours. The other options presented have been an extension of possible
time improvements that have not involved a greater effort on the previous C code.
The procedure and code presented would not only be applicable to ADC and IVIM but also
to all those procedures for QIBs involving least squares processing, such as perfusion. With the
processes presented in this article, the possibility of using more widely these image processes
that previously have been used to a lesser extent by their difficulty of calculation.
The procedures and methodologies presented in this article facilitate the integration of
biomarkers in the radiological worflows of clinical practice.

6

Acknowledgment

The authors wish to thank the financial support received from “Ministerio de Economı́a, Industria y competitividad” for the project BigCLOE (TIN2016-79951-R) and the INDIGODatacloud project. INDIGO - DataCloud receives funding from the European Unions Horizon
2020 research and innovation programme under grant agreement RIA 653549.

References
[1] Jr Atkinson A.J., W. A. Colburn, V. G. DeGruttola, D. L. DeMets, G. J. Downing, D. F. Hoth,
J. A. Oates, C. C. Peck, R. T. Schooley, B. A. Spilker, J. Woodcock, and S. L. Zeger. Biomarkers
and surrogate endpoints: Preferred definitions and conceptual framework, mar 2001.
[2] Denis Le Bihan and E. Breton. Imagerie de diffusion in-vivo par résonance magnétique nucléaire.
Comptes-Rendus de l’Académie des Sciences, 93(5):27–34, 1985.
[3] Wolfgang Bogner, Stephan Gruber, Katja Pinker, Günther Grabner, Andreas Stadlbauer, Michael
Weber, Ewald Moser, Thomas H. Helbich, and Siegfried Trattnig. Diffusion-weighted MR for Differentiation of Breast Lesions at 3.0 T: How Does Selection of Diffusion Protocols Affect Diagnosis?
Radiology, 253(2):341–351, nov 2009.

9

Biomarker
the clinical
practice
Borreguero et al.
1194	 Accelerating Diffusion-Weighted
FerranImaging
Borreguero
Torro et al.in/ Procedia
Computer
Science 108C (2017) F.
1185–1194

[4] Alexander D. Cohen, Moira C. Schieke, Mark D. Hohenwalter, and Kathleen M. Schmainda. The
effect of low b-values on the intravoxel incoherent motion derived pseudodiffusion parameter in
liver. Magnetic Resonance in Medicine, 73(1):306–311, jan 2015.
[5] J. J. Dongarra, Jermey Du Cruz, Sven Hammerling, and I. S. Duff. Algorithm 679; a set of level 3
basic linear algebra subprograms: model implementation and test programs. ACM Transactions
on Mathematical Software, 16(1):18–28, mar 1990.
[6] Anders Eklund, Paul Dufort, Daniel Forsberg, and Stephen M. LaConte. Medical image processing
on the GPU Past, present and future. Medical Image Analysis, 17(8):1073–1094, 2013.
[7] Roberta Fusco, Mario Sansone, and Antonella Petrillo. The Use of the LevenbergMarquardt and
Variable Projection Curve-Fitting Algorithm in Intravoxel Incoherent Motion Method for DWMRI Data Analysis. Applied Magnetic Resonance, 46(5):551–558, may 2015.
[8] G.Golub and C.Van Loan. Matrix Computations. JHU Press, 3 edition, 1996.
[9] Xuejun Gu, Hubert Pan, Yun Liang, Richard Castillo, Deshan Yang, Dongju Choi, Edward
Castillo, Amitava Majumdar, Thomas Guerrero, and Steve B Jiang. Implementation and evaluation of various demons deformable image registration algorithms on a GPU. Physics in Medicine
and Biology, 55(1):207–219, jan 2010.
[10] Dow-Mu Koh and David J. Collins. Diffusion-Weighted MRI in the Body: Applications and
Challenges in Oncology. American Journal of Roentgenology, 188(6):1622–1635, jun 2007.
[11] D Le Bihan, E Breton, D Lallemand, M L Aubin, J Vignaud, and M Laval-Jeantet. Separation of
diffusion and perfusion in intravoxel incoherent motion MR imaging. Radiology, 168(2):497–505,
aug 1988.
[12] D Le Bihan, E Breton, D Lallemand, P Grenier, E Cabanis, and M Laval-Jeantet. MR imaging
of intravoxel incoherent motions: application to diffusion and perfusion in neurologic disorders.
Radiology, 161(2):401–407, nov 1986.
[13] Andreas Lemke, Frederik B. Laun, Miriam Klau, Thomas J. Re, Dirk Simon, Stefan Delorme,
Lothar R. Schad, and Bram Stieltjes. Differentiation of Pancreas Carcinoma From Healthy Pancreatic Tissue Using Multiple b-Values. Investigative Radiology, 44(12):769–775, dec 2009.
[14] Andreas Lemke, Bram Stieltjes, Lothar R. Schad, and Frederik B. Laun. Toward an optimal
distribution of b values for intravoxel incoherent motion imaging. Magnetic Resonance Imaging,
29(6):766–776, jul 2011.
[15] K Levenberg. A method for the solution of certain non-linear problems in least squares. Quarterly
of applied mathematics, 1944.
[16] JJ Moré, BS Garbow, and KE Hillstrom. The MINPACK Project, in Sources and Development of
Mathematical Software. Prentice-Hall, 1984.
[17] Jeffrey William Prescott. Quantitative Imaging Biomarkers: The Application of Advanced Image
Processing and Analysis to Clinical and Preclinical Decision Making. Journal of Digital Imaging,
26(1):97–108, feb 2013.
[18] E. E. Sigmund, G. Y. Cho, S. Kim, M. Finn, M. Moccaldi, J. H. Jensen, D. K. Sodickson, J. D.
Goldberg, S. Formenti, and L. Moy. Intravoxel incoherent motion imaging of tumor microenvironment in locally advanced breast cancer. Magnetic Resonance in Medicine, 65(5):1437–1447, may
2011.
[19] Harriet C. Thoeny and Frederik De Keyzer. Diffusion-weighted MR Imaging of Native and Transplanted Kidneys. Radiology, 259(1):25–38, apr 2011.
[20] Jussi Toivonen, Harri Merisaari, Marko Pesola, Pekka Taimen, Peter J Boström, Tapio Pahikkala,
Hannu J Aronen, and Ivan Jambor. Mathematical models for diffusion-weighted imaging of
prostate cancer using b values up to 2000 s/mm2: Correlation with gleason score and repeatability
of region of interest analysis. Magnetic resonance in medicine, 74(4):1116–1124, 2015.
[21] Ichiro Yamada, Winn Aung, Yoshiro Himeno, Tsuneaki Nakagawa, and Hitoshi Shibuya. Diffusion
Coefficients in Abdominal Organs and Hepatic Lesions: Evaluation with Intravoxel Incoherent
Motion Echo-planar MR Imaging. Radiology, 210(3):617–623, mar 1999.

10

