Procedia Computer Science
Volume 51, 2015, Pages 256–265
ICCS 2015 International Conference On Computational Science

Higher-Order Discrete Adjoint ODE Solver in C++
for Dynamic Optimization
Johannes Lotz1 , Uwe Naumann1 ,
Ralf Hannemann-Tam´as2 , Tobias Ploch2 , and Alexander Mitsos2
1

RWTH Aachen, Software and Tools for Computational Engineering, Aachen, Germany
[lotz, naumann]@stce.rwth-aachen.de
2
RWTH Aachen, Process Systems Engineering, Aachen, Germany
[Ralf.Hannemann-Tamas, Tobias.Ploch, Alexander.Mitsos]@avt.rwth-aachen.de

Abstract
Parametric ordinary diﬀerential equations (ODE) arise in many engineering applications. We
consider ODE solutions to be embedded in an overall objective function which is to be minimized, e.g. for parameter estimation. For derivative-based optimization algorithms adjoint
methods should be used. In this article, we present a discrete adjoint ODE integration framework written in C++ (NIXE 2.0) combined with Algorithmic Diﬀerentiation by overloading
(dco/c++). All required derivatives, i.e. Jacobians for the integration as well as gradients and
Hessians for the optimization, are generated automatically. With this framework, derivatives
of arbitrary order can be implemented with minimal programming eﬀort. The practicability
of this approach is demonstrated in a dynamic parameter estimation case study for a batch
fermentation process using sequential method of dynamic optimization. Ipopt is used as the
optimizer which requires second derivatives.
Keywords: Adjoints, ODE, Algorithmic Diﬀerentiation, Dynamic Optimization, C++

1

Introduction

Technical or physical systems are often modeled by means of parametric ordinary diﬀerential
equations (ODE). In this article, we consider parameter estimation with ODEs embedded. The
structure of the objective function Φ is shown and explained in Figure 1. If the minimization
is carried out by a second-order derivative-based method, the numerical optimizer requires ﬁrst
and second derivatives of the objective with respect to the free parameters.
According to the chain rule of diﬀerential calculus, derivatives of the objective naturally
include derivatives of the embedded ODE solutions. Gradients and Hessians can be computed
eﬃciently by ﬁrst- and second-order adjoints, respectively [5, 17]. In this article we apply
the discrete adjoint approach based on Algorithmic Diﬀerentiation (AD) [5, 13]. Our AD
approach is modularized and ﬂexible in that adjoint subroutines can be generated automatically
256

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.237

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

Figure 1: Illustration of the structure of the objective
function Φ, which will also be used in the parameter
estimation case study in Section 5. The parameters
p ∈ Rnp enter together with state xi−1 ≈ x(ti−1 ) ∈
Rnx the i-th embedded ODE solver call Si : Rnx ×
Rnp → Rnx , i = 1, ..., N . The solver is called N
times in a loop, where for each intermediate state xi a
contribution ϕi (xi ) is computed. Those contributions
are then used to form the objective Φ.
or optionally be coded manually. For this purpose, the C++ adjoint ODE solver NIXE 2.01 is
combined with the AD tool dco/c++2 .
We consider parametric initial value problems (IVPs) of type
x˙ = f (t, x, p) ,

t ∈ [t0 , tf ] ,

x(t0 ) = x0 (p) ,

(1)

nx

˙
where x(t) ∈ R is the state vector, x(t)
its time derivative, t is the independent time variable, p ∈ Rnp is a time-invariant parameter vector, t0 and tf are the initial and ﬁnal times,
respectively. The functions f : R × Rnx × Rnp → Rnx and x0 : Rnp → Rnx provide the right
hand side of the ODE and the initial values, respectively. They are assumed to be κ + J and
κ times continuously diﬀerentiable, respectively, with κ ≥ 2. Here J ≥ 1 denotes the order of
the integration method for the numerical solution of the IVP. Under weak assumptions on f
and x0 , the solution x(t, p) is κ times continuously diﬀerentiable with respect to p, which we
assume in the following. For details on the existence theorems and mathematical properties of
ODE systems we refer to [6]. In addition, we assume the overall objective function to be κ ≥ 2
times continuously diﬀerentiable.
NIXE implements the solution of (1), but also a modiﬁed discrete adjoint method. The
genericity of C++ facilitates the seamless coupling of AD libraries with NIXE. This combination enables arbitrary-order adjoint evaluation of the solver. Though the discrete approach is
pursued in this article, it needs to be mentioned that there is ongoing research in discrete (e.g.
[1]) and continuous (e.g. [10, 17]) approaches.

2

The Integrator NIXE

NIXE is a C++ template library for the solution of (1). It can be used both for the simulation
and for adjoint sensitivity analysis based on modiﬁed discrete adjoints. The NIXE solver relies on
the extrapolation of the linearly-implicit Euler discretization [4, 7] motivating the abbreviation
NIXE for NIXE Is eXtrapolated Euler. The concepts of the algorithm are brieﬂy sketched in
the following.
NIXE is an error-controlled variable step size and variable-order integrator. In general, we
integrate from t = t0 to t = tN = tf with additional integrator stops due to the deﬁnition of
the objective function on the grid points t1 , t2 , . . . , tN −1 , see Figure 1. Since we use variable
step size integration, within an interval [ti−1 , ti ], there may be additional integration stops at
ti−1 = τ0i , τ1i , . . . , τfii −1 , τfii = ti , as illustrated in Figure 2. At each of these intermediate stops,
we get accurate approximations of the state trajectories x(τji ) with an error within integration
tolerance [6]. Let y0 be such an approximation. Then we compute the approximation y1 of
1 NIXE
2 see

2.0 is the successor of NIXE 1.0, which was ﬁrst presented in [8].
https://www.stce.rwth-aachen.de/software/dco_cpp.html

257

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

Figure 2: Time integration. The numerical integrator NIXE computes approximations xi of the
continuous solution trajectory x(t) at the measurement times ti , i = 1, . . . , N , with intermediate
stops at the times τji . At the times ti , the objective function value Φ is incremented by ϕ(xi ).
i
i
i
x(τj+1
) with respect to the step size H = τj+1
− τji . We sketch the step from τji to τj+1
, or in
other words from y0 to y1 , respectively.
Let J be the maximal extrapolation order in this step. For j = 1, 2, . . . , J and an ordered
sequence of increasing integers n1 < n2 < · · · < nJ , we set hj := H/nj , yj,0 := y0 , and apply
the scheme

yj,k+1 = yj,k + (I − h A0 )−1 hj f (τji + (k + 1)hj , yj,k , p),
where

k = 0, . . . nj − 1

j = 1, . . . J , (2)

∂f i
(τ , y0 , p) and I ∈ Rnx ×nx is the identity matrix.
(3)
∂x j
This discretization scheme is of order one. It provides us with a family of ﬁrst-order approximations yj,nj for y1 . Higher-order methods [4] can be derived based on the Neville-Aitken
scheme
Yj,k − Yj−1,k
, k = 1, . . . , j − 1, j = 1, . . . , J . (4)
Yj,1 = yj,nj , Yj,k+1 = Yj,k +
(nj /nj−k ) − 1
For each step, the basic step size H and the extrapolation order J are determined online by
a combined step size and order control. The reader is referred to [4] or [7, pp. 131–141] for a
more detailed presentation.
Since the linearly-implicit Euler discretization is a so-called W -method [7, p. 114], the
Jacobian A0 could also be replaced by an approximation [16]. Schlegel et al. [19] exploit the
∂x
(t, p) ∈ Rnx ×np by solving the
W -method property to eﬃciently compute the sensitivities ∂p
ﬁrst-order sensitivity equations
∂f
∂ x˙
∂x ∂f
∂x
dx0
=
(t, x(t), p)
+
(t, x(t), p), t ∈ [t0 , tf ],
(t0 , p) =
(p)
(5)
∂p
∂x
∂p ∂p
∂p
dp
by means of a tailored linearly-implicit Euler extrapolation. Loosely spoken, Schlegel et al.
[19] construct a modiﬁed internal numerical diﬀerentiation scheme (cf. [3]), in that they drop
second derivatives of f .
For adjoint sensitivity analysis an analogous reduction is possible. Hannemann et al. [8]
construct a modiﬁed discrete adjoint scheme of the linearly-implicit extrapolated Euler discretization, where also second-order terms are dropped. This adjoint scheme has exactly the
same discretization error as the forward approach of Schlegel et al. [19].
As already mentioned, NIXE implements the modiﬁed discrete adjoint scheme of [8]. For
computing adjoint sensitivities, the states at the time points τji are stored in checkpoints. If
A0 =

258

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

the maximal number of checkpoints on an integration interval [ti , ti+1 ] is ﬁxed a priori, then
NIXE uses revolve [21] for optimal online checkpointing. For the adjoint sweep, NIXE requires
adjoints of f of the ODE in (1), i.e.
T

T

∂f
∂f
(t, x, p)
(t, x, p)
· y(1) , p(1) =
· y(1) , y(1) ∈ Rnx .
(6)
∂x
∂p
In (6) we already use the convention that adjoint variables or functions are marked by parenthesized subscripts with the diﬀerentiation order. In principle, the user of NIXE has to implement
the Jacobian A0 in (3) and the adjoint projections in (6) of f . Through the use of AD, those
derivatives can be generated automatically as shown in Section 3.
x(1) =

3

Algorithmic Diﬀerentiation and dco/c++

Algorithmic Diﬀerentiation (AD) [5, 13] is a semantic program transformation technique that
yields robust and eﬃcient derivative code. We follow the notation from [13]. For a given
implementation of a k-times continuously diﬀerentiable function Φ : Rnp → R, y = Φ(p) for
p ∈ Rnp and y ∈ R, AD generates implementations of corresponding tangent and adjoint
(1)
models automatically. The tangent model computes directional derivatives y (1) = ∂Φ
,
∂p · p
T

· y(1) . The vectors
whereas the adjoint model computes (projected) gradients p(1) = ∂Φ
∂p
(1)
np
(1)
p , p(1) ∈ R and the scalars y , y(1) ∈ R are ﬁrst-order tangents and adjoints of input and
output variables, respectively, see [13] for more details. The computational cost of evaluating
either of both models is a constant multiple of the cost of the original function evaluation. This
observation becomes particularly advantageous when computing the gradient of Φ for np
1.
In this case, instead of np evaluations of the tangent model to compute the gradient element
by element, only one evaluation of the adjoint model is required. Nonetheless, it needs to
be mentioned that the adjoint mode of AD usually requires a lot more memory, which makes
further techniques like checkpointing necessary. Higher derivatives can be obtained by recursive
instantiations of the tangent and adjoint models.
AD can be implemented either via source code transformation or operator overloading techniques. We use our AD overloading tool dco/c++. It has been successfully applied to a number
of problems in, for example, computational ﬂuid dynamics [18, 22]. As an introductory example we consider a generic implementation of a scalar univariate function y = f (x) in C++ as
follows:
template < typename T > void f ( const T & x , T & y );

For a simple evaluation the generic function is instantiated with data type double. A
basic tangent model can be generated through instantiation with the dco/c++ data type
dco::gt1s<double>::type.
This generic tangent 1st -order scalar type consists of value and
derivative components of base type double. The base type is passed as a template argument and
deﬁnes how the internal arithmetic is performed. The generic implementation of the function
remains unchanged. Directional derivatives (tangents) are propagated according to the chain
(1)
at x = 2 with x(1) , y (1) ∈ R and x(1) = 1.
rule. The following driver computes y (1) = ∂f
∂x (x) · x
# include " dco . hpp "
int main () {
dco :: gt1s < double >:: type x , y ;
dco :: value ( x ) = 2;
dco :: derivative ( x ) = 1;
f (x , y );
double dydx = dco :: derivative ( y );

259

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

...
}

On the other hand, adjoint inputs x(1) are computed as functions of adjoint outputs
y(1) . The basic adjoint model of dco/c++ uses the generic adjoint 1st -order scalar type
dco::ga1s<double>::type. The implied reversal of the data ﬂow [15] requires the overloading
tool to generate an internal representation of the function evaluation, which is usually referred
to as the tape. An adjoint computation consists of a recording step (building the tape) and
an interpretation step (propagate adjoints backwards through the tape). The following code
T
computes x(1) = ∂f
∂x (x) · y(1) at x = 2 with x(1) , y(1) ∈ R and y(1) = 1. Registration of the
active input x triggers the generation of the (in this case global) tape.
# include " dco . hpp "
int main () {
dco :: ga1s < double >:: global_tape = dco :: ga1s < double >:: tape_t :: create ();
dco :: ga1s < double >:: type x , y ;
dco :: value ( x ) = 2;
dco :: ga1s < double >:: global_tape - > r e g i s t e r _ v a r i a b l e ( x );
f (x , y );
dco :: derivative ( y ) = 1;
dco :: ga1s < double >:: global_tape - > i n t e r p r e t _ a d j o i n t ();
double dydx = dco :: derivative ( x );
...
}

Derivatives of arbitrary oder can be computed by nesting the dco/c++ data types. For example
dco::ga1s<dco::gt1s<double>::type>::type facilitates the computation of second derivatives of Φ
as follows:
∂ 2 Φ (2) ∂Φ T (2)
(2)
(2)
(2)
p(1) = y(1) ·
·p +
· y(1) , with y(1) , y(1) ∈ R and p(1) , p(2) ∈ Rnp ;
(7)
∂p2
∂p
see also Section 5.
dco/c++ oﬀers an interface for integrating adjoint code provided by the user into the interpretation of the tape. This often yields more eﬃcient and robust code; see, for example, [14].
The solution proposed in the next section combines a potentially user-deﬁned adjoint version
of NIXE with a dco/c++ tape.

4

AD-enabled NIXE

The key ingredient of AD-enabled NIXE are C++ templates. Two important prerequisites are
needed. First, all ﬂoating point operations within NIXE are performed with a generic data type
T, which enables execution of NIXE with double as well as dco/c++ data types. Second, the IVP
deﬁnition is generic with respect to the ﬂoating point data type T. The function EvalF needs to
be implemented by the user to compute the right hand side f of the ODE (1).
template < typename T >
struct model {
static void EvalF (...){ ... }
...
};

This model deﬁnition is passed to NIXE as a class template (rather than an already instantiated
template class) to enable its instantiation with arbitrary data types. The main routine in NIXE
is declared as follows.
template < template < typename > class MODEL , typename T > void nixe (...);

260

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

Figure 3: Instantiation graph for nixe and adjointNixe, the top-level subroutines of NIXE for
simulation and modiﬁed discrete adjoint sensitivity analysis, respectively. M is the model class
template described in Section 4. For a description of dco/c++ data types see Section 3.
It is generic with respect to arithmetic type T and the generic IVP class deﬁnition. The arguments to the function include the parameters p and the previous state xi−1 as inputs and the
current state xi as output (see Figure 1).
Integration of the ODE in (1) requires the evaluation of f and of its Jacobian. Furthermore,
the hand-written adjoint integrator adjointNixe (see Section 2) requires adjoints of f . The
instantiation graph with the corresponding dco/c++ data types is shown in Figure 3. All
required derivative models are generated automatically.
An adjoint of NIXE can now be computed either by calling the hand-written adjoint
adjointNixe with the data type double or by calling the original function nixe with a dco/c++ adjoint data type. Both versions should yield similar but not identical results, because adjointNixe
is based on modiﬁed discrete adjoints [8] (see Section 2) that merely approximate the exact
discrete adjoints. This diﬀerence can also be observed in the overall convergence behavior of
the nonlinear solver for the parameter estimation problem in Section 5. For second-order optimization algorithms the Hessian of the objective including NIXE is required. It can be computed
by instantiating the functions and classes in Figure 3 with a tangent data type instead of double.
Nested templates in C++ allows us to add another order of derivative information to the model
with minimal programming eﬀort. Derivatives of arbitrary order can be implemented very elegantly. Both ways of adjoining NIXE are seamlessly integrated into an overall AD version of
the objective function with dco/c++. Thus, AD can be applied to arbitrary objective functions
with embedded calls of the ODE integrator.

5

Case Study

In the preceding sections we introduced a C++-framework for higher-order (modiﬁed) discrete
adjoint sensitivity analysis for dynamic optimization. Dynamic parameter estimation of a batch
fermentation process will serve as a case study to illustrate the application of the presented
methodology. For nonlinear optimization, we use the software package Ipopt3 [23]. An illustration of the calling structure is shown and described in Figure 4. The objective Φ : Rnp → R
(see also Figure 1) collects discrepancies between simulated states xi (p) ≈ x(ti , p) ∈ Rnx and
ˆ i ∈ Rnx of x(t) at ti , where ti , i = 1, . . . , N , t1 < t2 < · · · < tN = tf correspond
measurements x
to measurement times:
N

Φ(p) :=

ϕi (xi (p)) ,

ˆi)
ϕi (xi (p)) := D · (xi (p)) − x

2
2

,

(8)

i=1

where D = diag(d1 , d2 , . . . , dnx ) ∈ Rnx ×nx is a diagonal scaling matrix.
The considered reaction system describes the biotechnological production of itaconic acid
3 see

https://projects.coin-or.org/Ipopt

261

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

Figure 4: Parameter estimation framework with Ipopt. template <typename T> phi is a function template implementing the objective (8); diﬀerent derivative information is obtained by
instantiation with suitable dco/c++ types.

using the fungus Aspergillus terreus (A. terreus) with glucose as substrate. This mechanism
represents an important reaction step in the bio-based manufacturing of ﬁne chemicals and
fuels. An accurate and validated model is indispensable for further analysis and optimization
of the fermentation process. The system can be described by modeling three components: mass
of A. terreus (X), product (P ), and substrate (S). For this case study, a Monod kinetic [12]
was modiﬁed to model the speciﬁc growth rate of A. terreus similar to Song et al. [20]:
i

S
P
1−
,
(9a)
S + KS
PCrit
where μX is the speciﬁc growth rate, μmax is the maximum speciﬁc growth rate, S is the substrate concentration, KS is the substrate saturation constant, P is the product concentration,
and PCrit is the critical product concentration. The exponent i describes the degree of product
inhibition. With this growth rate, the kinetic equation for cell growth of A. terreus is
X˙ = μX X .
(9b)
μX = μmax

The formation of itaconic acid can be described by the Luedeking-Piret model [11]: P˙ =
α μX X + β X. In this case, the formulation was modiﬁed to obtain a more accurate ﬁt for
product formation:
i

P
1
(α μX X + β X) 1 −
,
(9c)
1 + exp(γ · (tLag − t))
PCrit
where tLag describes the lag phase, γ is a smoothing coeﬃcient, and α and β correspond to
the Luedeking-Piret parameters. The product inhibition term is introduced to ensure that the
product concentration does not exceed PCrit . Substrate is converted to biomass (ratio YXS ),
product (ratio YPS ) and also used as energy source for biomass (rate mX X):
1 ˙
1 ˙
(9d)
S˙ = −
X−
P − mX X .
YXS
YPS
The model is ﬁtted to experimental data taken from Kuenz et√al. [9]. The scaling values of
D = diag(dX , dP , dS ) in the objective function (8) are dX = 10, dP = dS = 1. All ﬁtting
parameters and their ﬁnal values are listed in Table 1. The measured values together with the
initial and the ﬁtted solutions are plotted in Figure 5.
P˙ =

262

Higher-Order Discrete Adjoint ODE Solver in C++
parameter

μmax
PCrit
γ
α
YXS
mX
St=0

unit
h−1
g · L−1
g · g −1
g · g −1
g · (g · h)−1
g · L−1

f. val.
0.288
1000
0.0952
5.45E-07
0.818
0.0150
180

i. gue.
0.061
87
0.2
13.8
0.1
0.0001
-∗

Lotz et.al.

parameter
KS
i
tLag
β
YP S
Pt=0
Xt=0

unit
g · L−1
h
g · (g · h)−1
g · g −1
g · L−1
g · L−1

f. val.
1000
85.6
93.3
24.4
0.709
0
1

i. gue.
0.80
1.4
10
0.035
2.0
-∗
-∗

Table 1: List of parameters used in the model equations with their corresponding units and
ﬁtted values (f. val.) and initial guesses (i. gue.). The lower and upper bounds of all optimization
variables were set to lb = 0 and ub = 1000, respectively. Pt=0 , St=0 , and Xt=0 are the respective
initial values for the components.
∗

Initial values are ﬁxed and thus not optimized.

Φ
∇Φ
∇2 Φ · v
∇Φ
∇2 Φ · v

dco/c++
dco/c++
dco/c++
dco/c++

plain
plain
+ hand-written
+ hand-written

run time
7.1 · 10−4 s
4.5 · 10−3 s
8.8 · 10−3 s
4.8 · 10−3 s
9.8 · 10−3 s

tape size

run time ratio

4500 kB
7000 kB
2.7 kB
4.3 kB

6.2
12
6.8
14

Table 2: Run time, tape size and run time ratio for single evaluation of Φ, ∇Φ and ∇2 Φ · v
for diﬀerent approaches of diﬀerentiation. The run time ratio is the run time divided by the
run time of one evaluation of the objective without derivatives. The tape size measures only
the memory footprint of dco/c++. Measurements are performed on an Intel(R) Core(TM)
i5-3337U.
According to Section 4, gradients can be computed either by plain application of dco/c++
to the complete implementation of the objective Φ including the function nixe(), or by calling
the hand-written adjoint function adjointNixe described in Section 2, whenever adjoints of NIXE
are required. Discrepancies in the derivatives result in inferior convergence for the manually
written adjoint. With hand-written modiﬁed discrete adjoints, the optimizer Ipopt takes 74
major iterations until the stopping criterion is met, while with exact discrete adjoints, Ipopt
requires only 63 major iterations. The slowdown of the convergence of nonlinear optimizers in
presence of inexact derivatives is not surprising and has already been observed in comparison
of AD with ﬁnite diﬀerences [2].
As shown in Table 2, hand-written modiﬁed and exact discrete adjoints of NIXE are comparable in terms of run time. The hand-written adjoint is expected to use much less memory in
general, due to the approximations described in further detail in Section 2. The code for this
case study including NIXE and a free trial license for dco/c++ are available on request4 .

6

Conclusions

The results of the parameter ﬁtting shown in Figure 5 look promising. However, the optimal
parameter values deviate by orders of magnitude from those a system biologist might expect.
Currently, model (9) should rather be identiﬁed as an empirical model than one that is based
4 Please

contact info@stce.rwth-aachen.de

263

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

200

X measured
X initial
X ﬁtted
P measured
P initial
P ﬁtted
S measured
S initial
S ﬁtted

concentration

150

100

50

0
0

50

100

150

200

250

300

350

time [h]

Figure 5: Measurements and simulated temporal evolution of the concentrations of the components mass of A. terreus (X), product (P), and substrate (S).
on ﬁrst principle and constitutive equations. Thus, to ﬁnd an accurate mechanistic model,
there is still a lot of modeling and parameter estimation work to be done. To this end, it
is very important to solve the parameter estimation problems very fast. We emphasize, that
a large fraction of the overall computational eﬀort is in the computation of the gradient and
Hessian of the objective function. We were able to compute these derivatives very fast by
coupling NIXE with the AD library dco/c++. The answer to the question, whether one should
use exact or modiﬁed discrete adjoints of NIXE depends on some factors. Exact discrete adjoints
have the advantage of providing exact derivative information of the discretized problem, which
potentially leads to faster convergence of the optimizer. On the other hand the modiﬁed discrete
adjoints have a signiﬁcantly lower memory footprint.

Acknowledgments
We gratefully thank J¨
orn Viell for communicating the parameter estimation problem and
Kirsten Ulonska for providing us with the initial model of the fermentation kinetics.
This work was ﬁnancially supported by the BEProMod project, which is part of the NRWStrategieprojekt BioSC funded by the Ministry of Innovation, Science and Research of the
German State of North Rhine-Westphalia.
This work was performed as part of the Cluster of Excellence “Tailor-Made Fuels from
Biomass”, which is funded by the Excellence Initiative of the German federal and state governments to promote science and research at German universities.

References
[1] J. Albersmeyer and H. G. Bock. Sensitivity generation in an adaptive BDF-method. In H. G.
Bock, E. Kostina, H. X. Phu, and R. Rannacher, editors, Modeling, Simulation and Optimization

264

Higher-Order Discrete Adjoint ODE Solver in C++

Lotz et.al.

of Complex Processes, pages 15–24. Springer Berlin Heidelberg, 2008.
[2] J.T. Betts. Practical Methods for Optimal Control Using Nonlinear Programming. Siam, 2001.
[3] H.G. Bock. Numerical treatment of inverse problems in chemical reaction kinetics. Springer,
Heidelberg, 1981.
[4] P. Deufhard, E. Hairer, and J. Zugck. One-step and extrapolation methods for diﬀerential- algebraic systems. Numer. Math., 51(5):501–516, 1987.
[5] A. Griewank and A. Walther. Evaluating Derivatives: Principles and Techniques of Algorithmic
Diﬀerentiation. Number 105 in Other Titles in Applied Mathematics. SIAM, Philadelphia, PA,
2nd edition, 2008.
[6] E. Hairer, S. P. Nørsett, and G. Wanner. Solving Ordinary Diﬀerential Equations I - Nonstiﬀ
Problems. Springer, Berlin, 1993.
[7] E. Hairer and G. Wanner. Solving Ordinary Diﬀerential Equations II - Stiﬀ and DiﬀerentialAlgebraic Problems. Springer, Berlin, 1996.
[8] R. Hannemann, W. Marquardt, B. Gendler, and U. Naumann. Discrete ﬁrst- and second-order
adjoints and automatic diﬀerentiation for the sensitivity analysis of dynamic models. In Procedia
Computer Science, volume 1, pages 297–305, 2010.
[9] A. Kuenz, Y. Gallenm¨
uller, T. Willke, and K.-D. Vorlop. Microbial production of itaconic acid:
Developing a stable platform for high product concentrations. Applied microbiology and biotechnology, 96(5):1209–1216, 2012.
[10] S. Li and L. Petzold. Description of DASPKADJOINT: An adjoint sensitivity solver for diﬀerentialalgebraic equations. Technical report, Department of Computer Science, University of California
Santa Barbara, CA 93106, USA, Santa Barbara, CA, 2002.
[11] R. Luedeking and E. L Piret. A kinetic study of the lactic acid fermentation. Batch process at
controlled pH. Journal of Biochemical and Microbiological Technology and Engineering, 1(4):393–
412, 1959.
[12] J. Monod. The growth of bacterial cultures. Annual Reviews in Microbiology, 3(1):371–394, 1949.
[13] U. Naumann. The Art of Diﬀerentiating Computer Programs. An Introduction to Algorithmic
Diﬀerentiation. Number 24 in Software, Environments, and Tools. SIAM, Philadelphia, PA, 2012.
[14] U. Naumann, J. Lotz, K. Leppkes, and M. Towara. Algorithmic diﬀerentiation of numerical
methods: Tangent and adjoint solvers for parameterized systems of nonlinear equations. ACM
Transactions on Mathematical Software. To appear.
[15] U. Naumann, J. Utke, A. Lyons, and M. Fagan. Control Flow Reversal for Adjoint Code Generation. In Proceedings of the Fourth IEEE International Workshop on Source Code Analysis and
Manipulation (SCAM 2004), pages 55–64. IEEE Computer Society, 2004.
[16] U. Nowak. Dynamic sparsing in stiﬀ extrapolation methods. IMPACT Comput. Sci. Eng., 5(1):53–
74, 1993.
¨
[17] D.B. Ozyurt
and P.I. Barton. Cheap second order directional derivatives of stiﬀ ODE embedded
functionals. SIAM J. Sci. Comput., 26(5):1725–1743, 2005.
[18] M. Sagebaum, N. R. Gauger, U. Naumann, J. Lotz, and K. Leppkes. Algorithmic diﬀerentiation
of a complex C++ code with underlying libraries. Procedia Computer Science, 18:208–217, 2013.
[19] M. Schlegel, W. Marquardt, R. Ehrig, and U. Nowak. Sensitivity analysis of linearly-implicit
diﬀerential-algebraic systems by one-step extrapolation. Appl. Numer. Math., 48(1):83–102, 2004.
[20] H. Song, S. H. Jang, J. M. Park, and S. Y. Lee. Modeling of batch fermentation kinetics for
succinic acid production by Mannheimia succiniciproducens. Biochemical Engineering Journal,
40(1):107–115, 2008.
[21] P. Stumm and A. Walther. New algorithms for optimal online checkpointing. SIAM J. Scientiﬁc
Computing, 32(2):836–854, 2010.
[22] M. Towara and U. Naumann. A discrete adjoint model for OpenFOAM. Procedia Computer
Science, 18:429–438, 2013.
[23] A. W¨
achter and L. T. Biegler. On the implementation of an interior-point ﬁlter line-search algorithm for large-scale nonlinear programming. Mathematical Programming, 106:25–57, 2006.

265

