Procedia Computer Science
Volume 29, 2014, Pages 2080–2089
ICCS 2014. 14th International Conference on Computational Science

A Multi-layer Event Detection Algorithm for Detecting
Global and Local Hot Events in Social Networks
Zhicong Tan, Peng Zhang, Jianlong Tan, and Li Guo
Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China
tanzhicong,zhangpeng,tanjianlong,guoli@iie.ac.cn

Abstract
In this paper, we present a new approach to detect global hot events and local hot events. Unlike
previous event detection algorithms which do not distinguish between global events and local
events, we believe it is important that we make that distinction as certain events can only be
meaningful if they are placed in speciﬁc context while other events may arouse the interests of
general users. The main contribution of this paper is that we’ve customized hot events detection
by employing local community detection mechanisms and established a very clear concept for
global hot events and local hot events. We present in this paper a multi-layer event detection
algorithm which constructs a four-stage event detection procedure that produces a relatively
comprehensive description of events relevant to the unique makeup and diﬀerent interest of
microblog users. Both the global hot events and local hot events we gathered are represented
by a key tweet which contains suﬃcient information to depict a complete event. As a result of
our algorithm’s ability to precisely describe events which outperforms existing event detection
algorithms, it is now possible for people to better understand public sentiment towards hot issues
on microblogs. Experiments have shown that our multi-layer hot event detection algorithm
can produce promising results in mining the interests of diﬀerent communities, generating
relevant event clusters and presenting meaningful events to community users. The most allround evaluation indicator F-value, which takes both precision and recall rate into account,
has demonstrated that our algorithm outperforms the other three traditional approaches in
detecting hot events.
Keywords: global, community, event detection, microblog

1

Introduction

Social networks have been enjoying a rapid growth in the past few years and more and more people are using social networks as the platform to express their thoughts about social events. The
most prevalent and widely used platform of social networks is microblog. Therefore, microblogs
contain huge amount of information about hot events and public sentiment. The objective of
this paper is to present a novel approach of detecting both global hot events and local hot events
2080

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.192

A Multi-layer Event Detection Algorithm for Microblogs

Tan, Zhang, Tan, and Guo

on microblogs. Various kinds of models have been proposed to detect hot events on microblogs
[4, 6] and previous models or algorithms fail to address the problem of presenting meaningful
events (a meaningful event usually consists of six elements, when, where, who, what, why and
how). The typical result of event detection algorithm goes like a single word or a series of word
combinations which is inadequate to precisely depict certain events. Also, previous hot event
detection methods focus merely on presenting the so called hot events to all users regardless
of their interests and makeup. However, some users may not be interested in the hot events
presented because those methods never take the demographic adjustments into consideration.
As a result, it is vital that we ﬁrst establish a clear understanding of what is global hot event
and what is local hot event. A clear and detailed deﬁnition would help us construct the framework of our event detection algorithms. Then, we can customize the unique treats of diﬀerent
communities, make personalized hot event recommendations and also detect global hot events
as deﬁned in the following section. We approach this issue by employing community detection
mechanisms, mining the interests of diﬀerent communities and generating group level hot events
which are relevant to speciﬁc users.
In this paper, we present a community-based multi-layer hot event detection algorithm,
aiming at generating hot events relevant to speciﬁc communities. We intend to formulate our
method around the central idea that events could only be meaningful and relevant only if they
are placed in speciﬁc context and for those events which capture the focus of all community
users, we may call them global hot events. The main contribution of this paper is that we’ve
speciﬁcally and successfully addressed this issue as it relates to deﬁning global hot events and
local hot events and detecting microblog events on the community level. Also, we would like
to make the event results more meaningful by formulating a relatively complete description of
events.

2
2.1

Related Work
Community Detection

The basic assumption behind community detection is that microblog users with similar interests
tend to form a densely connected community, as a result, in order to make the hot events derived
from microblogs relevant and meaningful to speciﬁc user groups and establish a comprehensive
and precise description of both global hot events and local hot events, community detection is
an essential prerequisite. The reason why we deploy community detection algorithms into our
approach is that we want to customize the relevant interests for diﬀerent user communities while
in the meantime, determine the global topic which arouses the interest of general users. The
best way to accommodate user communities is to divide all users into diﬀerent communities with
each of those communities sharing similar interests. Optimization of the community detection
problem is known to be intractable and therefore, several algorithms have been proposed to divide users into diﬀerent communities with a reasonable amount of time and accuracy [3]. There
are three basic community detection methods proposed over the years to ﬁnd out reasonable
solutions and they include divisive methods, agglomerative methods and optimization methods
[8]. The basic idea behind divisive methods is that we can get communities by removing links
from the original graph while agglomerative methods are focused on merging nodes that would
make modularity of diﬀerent communities achieve local optimization.
In addition to the state of art approaches proposed, some researchers are also focused on
adding semantic information to the community detection process where they basically take
tweet content information into consideration when they are trying to detect communities[7].
2081

A Multi-layer Event Detection Algorithm for Microblogs

Tan, Zhang, Tan, and Guo

The microblog users in each community share much similar interests and therefore, extracting
hot events on the community level can make sure the hot events we derived for a certain
community are relevant to community’s user interest.

2.2

Event Detection

The traditional event detection algorithms adopt TF-IDF mechanisms to detect and track events
in news articles and microblog tweets with diﬀerent variations. Over the years, various kinds of
event detection algorithms have been proposed when it comes to event detection in microblogs
where the length of tweet content is relatively short. In Chinese microblogs, the length of
each tweet is strictly conﬁned to no more than 140 Chinese characters and consequently, the
traditional news article hot event detection algorithms are inappropriate for analyzing tweet
contents. Qiming Diao proposed a top-ranked LDA method that simultaneously captures two
basic observations of microblog hot topics [6]. Xun Wang proposed a time dependent HDP
model to detect events in twitter [9].
Topics models such as LDA have served as a very valuable tool capturing latent topics
within text and the traditional method for tokenizing text into bag of word format has also been
adopted into most of the algorithms for event detections. The tokenizing procedure involves
assigning a unique integer to a unique token so each tweet can be represented by a series of
integers and we call the tokenized result tweet vector. After the tokenizing procedure, we need
to employ cosine distance to measure the similarity between two tweet vectors. If the cosine
distance between two vectors is within a certain threshold, we believe those tweets belong to
the same class and hence, they are talking about similar topics. It is the basic approach for
text classiﬁcation.

3

Method

We propose a local multi-layer event detection algorithm which would make it possible for
us to conduct hot event detection on the community level and extract key tweets. The ﬁrst
step is community detection aiming at detecting user community as the input for subsequent
procedures. Topic generation is designed to generate topics for community users and we use
LDA model [2] to analyze user tweets to get topics. Once we have successfully generated
user communities and topics, we can extract user interests and construct topic-community
matrix revealing users’ common interests for each speciﬁc community which binds the structural
information of microblogs and the semantic information of microblogs together. The next step
is to classify user tweets into diﬀerent topics and formulate microblog events. Finally, we intend
to evaluate the weight of each tweet event and extract the top events to represent the event
cluster. The graphical model of our method is described by Figure 1, where general topic
refers to the topic we get from applying LDA to analyze tweet contents, event cluster contains
corresponding events which belong to the general topic class and central event is the key event
we extract from event cluster by employing event scoring function.

3.1

Topic Model

Various kinds of topic models have been used to generate topics from text documents and the
mostly widely used topic model is LDA model proposed by David Blei in 2003 [2]. Topic models
are algorithms for discovering the main themes that pervade a large and otherwise unstructured
collection of documents. Topic models can organize the collection according to the discovered
themes and the intuition behind LDA is that documents exhibit multiple topics.
2082

A Multi-layer Event Detection Algorithm for Microblogs

Tan, Zhang, Tan, and Guo

Figure 1: Graphic model for multi-layer event detection algorithm.

3.2

Topic-community Matrix

After the community detection procedure where we divide the users into diﬀerent communities
and the topic generation procedure, we then turn to user interest extraction, trying to capture
the unique features of the each community characterized by the users’ interests. The way we
extract user interest of each community is by constructing the topic-community matrix. Each
topic we get from the topic generation procedure represents each row in the topic-community
matrix and each community we get from the community detection procedure stands for each column in the topic-community matrix. The element in the topic-community matrix is interpreted
as the level of community interest for each topic.
Before we get to the speciﬁcs of how each element in the topic-community matrix is calculated, we need to establish a key assumption which would deﬁne a certain community’s interest
and that is, the interests of all users in a certain community can be reﬂected by a relatively
small number of key users in that community. Previous research work has been focusing on
discovering inﬂuential users[11] and inﬂuence maximization[5] in social networks, however, we
would like to take a more direct approach in microblog user relation graph. We believe key
users who have a large number of followers in a certain community can reﬂect common interests
for all users in that particular community. Consequently, we can extract each community’s user
interest by analyzing the key users’ tweet contents in each community. We use the number of
followers each user possesses as the criterion for determining key users in a certain community.
Then we take the topics from applying LDA model to analyze tweet content as the topic set
and calculate the number of appearance of a certain topic in each community. After calculating
the number of appearance of each topic in each community, we can get the topic-community
matrix which can reﬂect user interests in a certain community. The matrix value M[i,j] is
the weighted number of appearance of topic i in community j and higher matrix value means
users in community j share higher interests in topic i. A part of the topic-community matrix
is displayed in Table 1 which shows the user interest distribution among diﬀerent topics for
2083

A Multi-layer Event Detection Algorithm for Microblogs

Tan, Zhang, Tan, and Guo

diﬀerent communities. As illustrated in Table 1, each column represents the topic distributions
of diﬀerent communities and each row stands for community distribution of diﬀerent topics.
The distribution vectors can be presented as follows:
C = (M [i, 1], M [i, 2], ..., M [i, n])
T = (M [1, j], M [2, j], ..., M [m, j])
Where C stands for community i’s distribution of diﬀerent topics and n is the number of
topics we generate by employing topic models. T stands for the topic j’s distribution of diﬀerent
communities and m is the number of community in the entire group which could be determined
by the community detection procedure.
Matrix
Topic 1
Topic 2
Topic 3
Topic 4
Topic 5
Topic 6

Com 1
592
234
555
420
504
219

Com 2
259
126
174
89
306
25

Com 3
185
792
473
580
33
162

Com 4
579
277
736
614
179
244

Com 5
560
36
544
184
89
277

Com 6
520
432
257
267
120
337

Table 1: Topic-community matrix.

3.3

Deﬁnition of Hot Events

As suggested in the previous section, there are two types of hot events we want to generate and
one of which is local hot events capturing the interests of particular user community. The other
type of hot events is global hot event which reﬂects the general focus of general users. Table
1 can help us explain how local hot events and global hot events are deﬁned in a more precise
manner. For a certain user community i, it shares diﬀerent levels of topic interests and we only
take the top 3 topics as their primary topic interest and conduct event detection operations
on those topics. We use the symbol M[i,topN] to represent topic N that makes M[i,topN] the
Nth highest value of all elements in vector C. For example, if the three highest value in vector
C is M[i,top1],M[i,top2] and M[i,top3], we only need to detect hot events on topic top1, top2
and top3 and present the hot events we gathered to users of that particular community. As
far as the global hot event is concerned, we may ﬁrst assume that there is only one topic
in the topic-community matrix which arouses the general interest of all users across diﬀerent
communities. The way we determine that topic is by adopting an incremental approach which
goes as Algorithm 1
Once we have determined the global topic GT on which we can conduct event detection
operations, then we will be able to get the global hot event. As we could see from the global
topic selection algorithm, the central idea behind this process is that each community shares
diﬀerent levels of interests across diﬀerent topics, by incrementally adding the top k highest
value to each community vector, the ﬁrst topic topX that appears in all community vectors is
the global topic. Depending on individual circumstances, there may be more than one topic
that appears in all community vectors for the ﬁrst time and in such scenarios, we take all those
topics as global topics and consequently, all the hot events derived this way shall be called hot
events.
2084

A Multi-layer Event Detection Algorithm for Microblogs

1
2
3
4
5
6
7
8
9
10
11
12
13

Tan, Zhang, Tan, and Guo

Input: elements of topic-community matrix M, community vector Ci , variable k and
total community number N
Output: Global Topic number GT
k = 1;
while k ≤ N ; do
Init(Ci);
Select top k highest value for each commuinty;
Ci =(M [i, top1],M [i, top2],...,M [i, topk]);
if the same topic number topX exits in all community vector Ci then
Global topic GT =topX;
break;
end
else
k=k+1;
end
end
Algorithm 1: Global Topic Selection

4
4.1

Multi-layer Event Detection Algorithm
Community Detection and Topic Generation

We employ a fast unfolding community detection method proposed by Vincent D Blondel [3]
to divide users into diﬀerent communities. First of all, we construct the user relation graph
by taking 79955 users as nodes and 5682159 internal links as edges. Then we perform the
agglomerative algorithm to detect communities on that graph and we get 15 communities with
each community possessing diﬀerent user numbers. We use 31626478 pieces of tweets as our
input for topic generation and each user’s tweets are put into a single document. First, we
ﬁlter all the tweets whose length of content is less than 20 Chinese characters because those
tweets contain virtually no meaningful events. Second, we use NLPIR to conduct Chinese word
segmentation to those documents. We have to set the basic parameters for LDA before we
begin to use LDA model to generate topics. We set the number of topics to be 16 and in each
of those topics and the top 25 words would be selected to represent the topic. We display 10 of
the 16 topics generated after translating from Chinese to English in Table 2. As is illustrated
in Table 2, each topic is represented by a series of words and we can basically understand what
each of those topics is talking about, for example, all the words that represent the ﬁrst topic
relate to sports and the second topic is about history and society.

4.2

User Interest Mining and Text Classiﬁcation

We now have all 16 topics and 15 communities and the next step is to construct the topiccommunity matrix by calculating the weighted number of appearance of each topic in each
community. The size of matrix we get is 16 rows and 15 columns which correspond to the 16
topics and 15 communities respectively. Each element of the matrix is calculated by Eq. (1)
n

Mi,j =

Cj (Ti,k ) ∗ N (Ti,k )

(1)

k=1

2085

A Multi-layer Event Detection Algorithm for Microblogs

No
1
2
3
4
5
6
7
8
9
10

Tan, Zhang, Tan, and Guo

Sample topics
(Match) (Japan) (Football) (Olympics) (Champion) (Fans) (London) (Finals)
(History) (Society) (Nation) (Time) (World) (Culture) (Politics) (Freedom)
(Market) (Economy) (Investment) (Gold) (Stock) (Bank) (Policy) (Fund)
(Cellphone) (User) (Product) (Games) (Mobile) (Internet) (Experience) (App)
(Journalist) (Goverment) (News) (Nation) (Society) (Lawyer) (Issue) (Law)
(Enterprise) (Development) (Market) (Brand) (Industry) (Management) (Client)
(Culture) (Art) (Travel) (Masterpiece) (Acivity) (City) (Photography) (Review)
(Design) (Delicious) (Fashion) (Combination) (Taste) (Life) (Color) (Travel)
(Kids) (Health) (Doctor) (Hospital) (Baby) (Treatment) (Operation) (Patient)
(Music) (Movie) (Product) (Expection) (Show) (Performance) (Video) (Program)
Table 2: Sample topics.

Where Mi,j is the element in line i and column j of the topic-community matrix, k is the
number of words that represent each topic, Ti,k is the number k word that represents topic i,
Cj (Ti,k ) is the number of appearance of word Ti,k in community j and N (Ti,k ) is the weight of
word Ti,k .
For a certain community, we can determine its user interests among all 16 topics simply
by look-ing up in the topic-community matrix. As suggested in the previous section, a certain
community does not have the same level of interest across all 16 topics; we only conduct local
event detection on the top three topics for a particular community. And also, we ought to
conduct event detection operations on the global topic which we identiﬁed in the previous
procedure. The test dataset is selected by ﬁrst selecting 200 active microblog users from sina
microblog as our user set and then, gathering each day’s tweets of those users with the time
frame dating from 7 February 2014, 21:00:00 CST to 16 February 2014, 21:00:00 CST. After
that, we select 11600 tweets as our test data sets for event detection. We tokenize all tweets
using Scikit-learn toolkit and the shape of a tweet vector is described by Eq. (2)
Vi = (ni,1 , ni,2 , ni,3 , ..., ni,l )

(2)

Where ni,j is the number of appearance of word j in tweet i and l is the number of unique
tokens in a single tweet generated using Scikit-learn toolkit. Next, we compute the cosine
distance between a certain tweet vector and all 16 topic vectors and put that particular tweet
vector into the category which achieved the maximum cosine similarity. The purpose of text
classiﬁcation is to make sure that all tweets in a certain category are semantically similar.

4.3

Event Cluster Formulation and Central Event Extraction

After the text classiﬁcation procedure, there are 16 categories to which all the tweet belong. For
each of the tweet categories, we divide tweets in a certain category into diﬀerent event clusters.
We adopt K-means algorithm to formulate event clusters and we intend to choose centroids C
that minimize the in-cluster sum of squares objective function with a dataset X of n samples,
the sum of squares objective function is Eq. (3)
n

V =

minui ∈C (||xi − ui ||2 )

(3)

i=1

We set the number of iterations to be 10 and number of clusters to be 4. The ﬁnal results
we get after possessing 16 tweet categories are 64 event clusters and each of the event clusters
2086

A Multi-layer Event Detection Algorithm for Microblogs

Tan, Zhang, Tan, and Guo

represents a hot event. The next step is to extract key tweets from that event cluster in order
to formulate hot events. For the purpose of evaluating which tweet can best represent the hot
event in a certain community, we need take several key features of a tweet into account. We
have the retweeting number and comment number of each tweet to decide the importance of
a certain tweet. Also, we need to take the relevance coeﬃcient which is the cosine distance
between the tweet vector and the topic vector and the length of tweet i into consideration. The
scoring function we employ is described by Eq. (4)
Ti = (Ri + 2 ∗ Ci ) ∗ Si,k ∗ Li ∗ 10000

(4)

Where Ti is the number we use to sort the tweets, Ri is the retweeting number of tweet i,
Ci is the comment number of tweet i, Si,k is the cosine distance between tweet vector i and
topic vector k and Li is the length of tweet i. Then we sort all tweets in a certain event cluster
using our scoring function in decreasing order. The tweet which receives the highest score gets
to represent the event cluster and the event that particular tweet represents is the hot event.
The top 5 ranking results for event cluster No.5 which are displayed in Table 3 are all about
the Sochi winter Olympics. The winter Olympic topic is the global topic as we deﬁned in the
previous section as it is the ﬁrst topic that appears in our incremental community vector. Thus,
the events we get from the global topic are the global hot events which arouse the interest of
general users across diﬀerent communities. As the events in Table 3 indicate, the global hot
event in that particular time frame is the Sochi winter Olympics which had captured people’s
attention across China. Besides the global hot events we’ve just generated, local hot events
No
1
2
3
4
5

Global hot events
(China) (Winter Olympics) (Speed Skating) (Finals) (Silver medal)
(Winter Olympics) (Unexpected) (Finals) (Survive) (Speed Skating)
(Winter Olympics) (China) (Short-track Speed Skating) (Strive) (Medal)
(Dynamic)(Winter Olympics) (Birth) (Exciting)(Short-track Speed Skating)
(Winter Olympics) (China) (Medals)(Applause) (Man) (Finals) (History)
Table 3: Top 5 global hot events.

can also be determined in this phase of the process. As we’ve successfully located top 5 topics
each community users are interested in, we can use our multi-layer event detection algorithm
to generate local hot events as well. It is impossible to present all local hot events in this paper
because we’ve got 15 communities with each one of them possessing three hot event categories.
We merely select one of those 45 local hot events and display the ﬁnal result after translation
in the Table 4. We could clearly see the hot event for that particular community is about the
earthquake that transpired in Xin Jiang Province and our method eﬀectively captures a certain
group of people’s interest during that speciﬁc time frame.
No
1
2
3
4
5

Local hot events
(Xin Jiang) (Earthquake) (Aftershock) (Detect) (Epicenter) (Depth) (Rock)
(Earthquake) (Xin Jiang) (Disaster) (Collapse) (Damage) (Casualties)
(Xin Jiang) (Earthquake) (Epicenter) (Prediction) (Region) (Magnitude)
(Xin Jiang) (Army) (Helicopter) (Earthquake) (Region) (Disaster)
(Xin Jiang) (Earthquake) (Lasting) (Epicenter) (Scarce) (Journalist)
Table 4: Top 5 local hot events.

2087

A Multi-layer Event Detection Algorithm for Microblogs

4.4

Tan, Zhang, Tan, and Guo

Algorithm Evaluation

The evaluation procedure mainly involves evaluating the classiﬁcation accuracy [1] which is the
key standard for grading our algorithm. In order to evaluate the classiﬁcation accuracy of our
method, precision P , recall rate R and F-value F are employed as our standards and they can
be calculated as by Eq. (5)
|C|
|C|
2∗P ∗R
,R =
,F =
(5)
|A|
|B|
P +R
Where A is previously labeled hot event set, B stands for all the relevant hot events and
C represents the detected hot event set. The average precision is 90.6%, the average recall
rate is 81.3% and F-value is 0.86. We also compare our method with three other traditional
event detection methods. Table 5 shows the average precision, recall rate and F-value of our
algorithm and three other algorithms on our test dataset. The most comprehensive evaluation
indicator F-value, which takes both precision and recall rate into account, has demonstrated
that our algorithm outperforms the other three traditional approaches in detecting hot events.
Meanwhile, our algorithm captures the local level characteristics of hot events and makes it
relevant to speciﬁc user groups. Therefore, we can reach the conclusion that we could formulate
better event detection results which are both meaningful and relevant using our multi-layer event
detection algorithm.
P =

Algorithm
Our Algorithm
LDA
K-Means
Hierarchical Clustering

Precision
90.6%
77.4%
59.3%
81.9%

Recall
81.3%
81.3%
83.2%
82.5%

F-value
0.86
0.79
0.69
0.82

Table 5: Comparation of event detection methods.

5

Conclusions and Future Work

In this paper, we intend to detect global hot events and local hot events using our multi-layer
event detection algorithm. Unlike previous approaches where people do not distinguish between
global hot events and local hot events, we establish a clear and precise deﬁnition of global hot
events and local hot events using topic-community matrix which diﬀers from the traditional
murky deﬁnition of hot events. The ﬁnal results we presented is the top ranking tweets for
each particular community which can best describe a relatively complete event. Therefore, the
multi-layer hot event detection algorithm we proposed can well capture the interests of diﬀerent
communities, formulate relevant event clusters and present meaningful hot events to community
members.
The new idea we come up with is that no events can be called hot events unless they
are assigned to a group of speciﬁc users and placed in relevant context. Both the global hot
events and the local events we generated can satisfy the diﬀerent levels of microblog user scales.
Another very important contribution we made is that we expressed hot events by using at
least four of the six elements needed for a complete event (i.e., when, where, who, what, why
and how) by extracting key tweets from tweet clusters, and thus, making the results better
understandable than existing hot event detection algorithms. However, challenge still remains
as the total ﬂow of social network data stream, mostly notably, microblog data stream is
increasing at an exponential rate. As a result, how to deal with event detection in the big
2088

A Multi-layer Event Detection Algorithm for Microblogs

Tan, Zhang, Tan, and Guo

data environment is yet to be further explored and consequently, future work is designed to be
focusing on dynamic environments where data stream mining methods can be applied to adapt
to new trends and patterns in the recommender systems [10].

Acknowledgments
This work was supported by the NSFC (No. 61370025), 863 projects (No. 2011AA010703
and 2012AA012502), 973 project (No. 2013CB329606), and the Strategic Leading Science and
Technology Projects of Chinese Academy of Sciences(No. XDA06030200).

References
[1] James Allan, Ao Feng, and Alvaro Bolivar. Flexible intrinsic evaluation of hierarchical clustering
for tdt. In Proceedings of the twelfth international conference on Information and knowledge
management, pages 263–270. ACM, 2003.
[2] David M Blei, Andrew Y Ng, and Michael I Jordan. Latent dirichlet allocation. the Journal of
machine Learning research, 3:993–1022, 2003.
[3] Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefebvre. Fast unfolding of communities in large networks. Journal of Statistical Mechanics: Theory and Experiment,
2008(10):P10008, 2008.
[4] Qiming Diao, Jing Jiang, Feida Zhu, and Ee-Peng Lim. Finding bursty topics from microblogs. In
Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics: Long
Papers-Volume 1, pages 536–544. Association for Computational Linguistics, 2012.
[5] Jing Guo, Peng Zhang, Chuan Zhou, Yanan Cao, and Li Guo. Personalized inﬂuence maximization
on social networks. In Proceedings of the 22nd ACM international conference on Information and
Knowledge Management, pages 199–208, October 28-November 1, 2013, San Francisco, CA, USA.
[6] Qi He, Kuiyu Chang, and Ee-Peng Lim. Using burstiness to improve clustering of topics in news
streams. In Proceedings of the 7th International Conference on Data Mining (ICDM), pages 493–
498. IEEE, 2007.
[7] G-J Qi, Charu C Aggarwal, and Thomas Huang. Community detection with edge content in
social media networks. In Proceedings of the 28th International Conference on Data Engineering
(ICDE), pages 534–545. IEEE, 2012.
[8] Kumar Subramani, Alexander Velkov, Irene Ntoutsi, Peer Kroger, and H-P Kriegel. Density-based
community detection in social networks. In Proceedings of the 5th International Conference on
Internet Multimedia Systems Architecture and Application (IMSAA), pages 1–8. IEEE, 2011.
[9] Jing Jiang Sujian Li Xun Wang, Feida Zhu. Real time event detection in twitter. In WAIM’13
Proceedings of the 14th international conference on Web-Age Information Management, pages
502–513. Springer, 2013.
[10] Peng Zhang, Chuan Zhou, Peng Wang, B Gao, Xingquan Zhu, and Li Guo. E-tree: An eﬃcient
indexing structure for ensemble models on data streams. IEEE Transactions on Knowledge and
Data Engineering, 28 Feb. 2014. IEEE computer Society Digital Library. IEEE Computer Society,
http://doi.ieeecomputersociety.org/10.1109/TKDE.2013.185.
[11] Chuan Zhou, Peng Zhang, Jing Guo, Xingquan Zhu, and Li Guo. Ublf: An upper bound based
approach to discover inﬂuential nodes in social networks. In Proceedings of the 13th IEEE International Conference on Data Mining, December 7-10, 2013, Dallas, TX, USA.

2089

