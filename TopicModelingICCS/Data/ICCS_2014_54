Procedia Computer Science
Volume 29, 2014, Pages 2230–2240
ICCS 2014. 14th International Conference on Computational Science

A Faster Parallel Algorithm for Matrix Multiplication on a
Mesh Array∗
Sung Eun Bae1 , Tong-Wook Shinn2 , and Tadao Takaoka3
1
2
3

University of Canterbury, Christchurch, New Zealand
sung.bae@canterbury.ac.nz
University of Canterbury, Christchurch, New Zealand
tong-wook.shinn@pg.canterbury.ac.nz
University of Canterbury, Christchurch, New Zealand
tad.takaoka@canterbury.ac.nz

Abstract
Matrix multiplication is a fundamental mathematical operation that has numerous applications
across most scientiﬁc ﬁelds. Cannon’s distributed algorithm to multiply two n-by-n matrices
on a two dimensional square mesh array with n2 cells takes exactly 3n − 2 communication steps
to complete. We show that it is possible to perform matrix multiplication in just 1.5n − 1
communication steps on a two dimensional square mesh array of the same size, thus halving
the number of steps required.
Keywords:

Contents
1 Introduction

2231

2 Preliminaries

2231

3 Review of Cannon’s algorithm

2232

4 Reducing idling time

2234

5 Using values from all four directions

2237

6 Concluding remarks

2239

∗ This research was supported by the EU/NZ Joint Project, Optimization and its Applications in Learning
and Industry (OptALI).

2230

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.208

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

1

Bae, Shinn and Takaoka

Introduction

Matrix multiplication is one of the most fundamental operations in mathematics, having numerous applications in most scientiﬁc ﬁelds such as physics, computer graphics, statistics, applied
mathematics, etc. As such, many researchers have devoted much time and eﬀort to derive faster
algorithms, both serial and parallel, for performing matrix multiplication. With the amount
of data that needs to be processed forever increasing, faster algorithms, and especially faster
distributed algorithms for big data, are becoming increasingly important.
It is straightforward to multiply two n-by-n matrices in O(n3 ) time. This cubic time bound
was ﬁrst broken by Strassen, who gave a new upper bound of O(nω ) where ω < 2.81 [5] to
multiply two n-by-n matrices over a ring. Subsequently, there have been many improvements
to this time bound, with the current best value of ω < 2.373 given by Williams [9]. It is well
known that with O(nω ) processors, the product of two n-by-n matrices can be computed in
O(log n) time on a PRAM.
It has been known for some time that on a two dimensional (2D) square mesh array of size
n2 we can perform matrix multiplication in O(n) time. This array of processors is sometimes
called a “systolic array” to signify its rhythmical behaviour, and an algorithm based on this
communication model is often referred to as a VLSI (Very Large Scale Integration) algorithm
due to its easy implementability onto an integrated circuit. In other words, we can translate such
algorithms directly onto an Application Speciﬁc Integrated Circuit (ASIC) that is dedicated to
performing the given task at great speeds. Our parallel computing model is one of the simplest
for the ease of algorithm design and veriﬁcation. To implement it in a real parallel environment
such as MPI, we would need to consider practical details such as synchronization and scalability.
By skewing the matrices vertically and horizontally then loading them onto the 2D mesh
array from the top and the left, respectively, matrix multiplication can be performed in exactly
3n − 2 communication steps, such that each cell sends and receives O(1) data in each step.
This is commonly known as Cannon’s algorithm [1]. Kak later showed that by using a more
complicated mesh structure, the product of two matrices can be computed in exactly 2n − 1
steps [3].
On a related note, Ullman [7] introduced Guibas, Kung and Thompson’s algorithm [2] that
solves the All Pairs Shortest Paths (APSP) problem on a 2D square mesh array of size n2
by performing cascade (min, +)-matrix-squaring 3 times. In cascade matrix multiplication
previously computed elements are used in the computation of subsequent elements. Lakhani
and Dorairaj showed that the APSP problem can be solved in exactly 5n−5 steps on a 2D square
mesh array of size n2 without using cascade matrix multiplication [4]. Takaoka and Umehara
improved upon this algorithm to reduce the required number of steps down to 3.5n − 3 [6].
In this paper we present an algorithm to compute the product of two n-by-n matrices in
1.5n − 1 steps on a simple 2D square mesh array of size n2 . We also provide a formal proof for
Cannon’s algorithm, which we use later to formally prove our new algorithm.

2

Preliminaries

Let X = {xij } be an n-by-n matrix where xij denotes the element in row i and column j such
that 1 ≤ i, j ≤ n. Similarly let Y = {yij } be an n-by-n matrix. Let Z = X × Y , that is,
Z = {zij } is the product of X and Y . We assume xpq = ypq = 0 for all p, q < 0 or p, q > n. We
deﬁne 2D arrays x[i][j] and y[i][j] to store the values xij and yij , respectively.
We deﬁne a simple 2D square mesh array with n2 cells (processors), where each cell only
communicates with its four neighbors, Top, Bottom, Left and Right. Let cell(i, j) denote the
2231

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

l
b

v

t

r

Figure 1: The structure of a cell in our 2D mesh array.
cell on row i and column j, where 1 ≤ i, j ≤ n.
Each cell has ﬁve registers, t, b, l, r and v, as shown in Figure 1. Let t(i, j), b(i, j), l(i, j),
r(i, j) and v(i, j) denote the ﬁve registers in cell(i, j). Register t holds the data received from
Top that is subsequently passed down. Register b holds the data received from Bottom that
is subsequently passed up. Register l holds the data received from Left that is subsequently
passed to the right. Register r holds the data received from Right that is subsequently passed
to the left. Register v(i, j) holds the partial sum for zij . We assume that all registers are
initialized to 0.

3

Review of Cannon’s algorithm

We review Cannon’s parallel matrix multiplication algorithm. Let the two dimensional array
L[p][q] where 1 ≤ p ≤ n and 1 ≤ q < 2n hold the values for matrix X = {xij } where the matrix
is horizontally skewed. Let the two dimensional array T [p][q] where 1 ≤ p < 2n and 1 ≤ q ≤ n
hold the values for matrix Y = {yij } where the matrix is vertically skewed. We refer to L and
T as loader arrays because they hold the elements of the original matrices to be loaded onto
the mesh array. These loader arrays are not essential for actual implementation, but we use
them to provide additional clarity for the operation of the algorithm. We provide Algorithm
1 for the sole purpose of showing exactly how the matrices X and Y are skewed in L and T ,
respectively.
Algorithm 1 X is horizontally skewed in L, Y is vertically skewed in T
1: for i = 1 to n; j = 1 to 2n − 1 do
2:
L[i][j] ← x[i][j − i + 1]
3: for i = 1 to 2n − 1; j = 1 to n do
4:
T [i][j] ← y[i − j + 1][j]
We use L and T in Cannon’s algorithm, given by Algorithm 2. A close up of the upper left
corner of the 2D mesh array at the start of Cannon’s algorithm is shown in Figure 2, where
the skewed matrices X and Y , stored in L and T , respectively, are illustrated. We now provide
formal proofs for the correctness of Algorithm 2, which will be extended to prove subsequent
algorithms.
Lemma 1. After k steps of Algorithm 2, we have the following boundary conditions for j = 1
2232

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

Algorithm 2 Computing Z = X × Y in parallel
1: for k = 1 to 3n − 2 do
2:
for all 1 ≤ i, j ≤ n in parallel do
3:
l(i, 1) ← L[i][1]; /* load X from Left */
4:
t(1, j) ← T [1][j]; /* load Y from Top */
5:
if j > 1 then l(i, j) ← l(i, j − 1) /* receive data from Left */
6:
if i > 1 then t(i, j) ← t(i − 1, j) /* receive data from Top */
7:
v(i, j) ← v(i, j) + l(i, j) · t(i, j) /* accumulate value for zij */
8:
Shift L horizontally by one (i.e. L[i][j] ← L[i][j + 1])
9:
Shift T vertically by one (i.e. T [i][j] ← T [i + 1][j])

y31

y22

y21

y12

y13

y11
x13

x12

x22

x21

x11

x31

Figure 2: An illustration of Cannon’s algorithm, showing a close up of the upper left corner of
the mesh array.
and i = 1, respectively:

l(i, 1)
t(1, j)

=
=

x[i][k − i + 1]
y[k − j + 1][j]

Proof. Since the array L is originally L[i][j] = x[i][j − i + 1] and the elements are horizontally
shifted by one in each step, at the k-th step, l(i, 1) = L[i][1] is given by the initial value
L[i][k] = x[i][k − i + 1]. Similar argument can be made for t(1, j).
Lemma 2. For all k ≥ 0 and for all
where:
P (i, j, k) ⇔ l(i, j)
t(i, j)
v(i, j)

1 ≤ i, j ≤ n, we have the space/time invariants P (i, j, k)
= x[i][k − i − j + 2]
= y[k − i − j + 2][j]
= x[i][1]y[1][j] + x[i][2]y[2][j] + ...
+x[i][k − i − j + 2]y[k − i − j + 2][j]

Proof. Proof is based on induction on the three dimensional logical space indexed by (i, j, k).
The basis for k is P (i, j, 0). Since i, j ≥ 1, array indices for x and y become out of range. Thus
for P (i, j, 0), we have l(i, j) = t(i, j) = v(i, j) = 0. As mentioned in Section 2, the values of all
registers are initialized to 0 i.e. when k = 0 all registers are 0 by deﬁnition.
2233

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

For general P (i, j, k) for k ≥ 0, we start with the two cases j = 1 and j > 1. In the ﬁrst
case, from Lemma 1, we have l(i, 1) = x[i][k − i + 1] = x[i][k − i − j + 2] at the end of the k-th
iteration. In the second case, assume P (i, j − 1, k − 1) for induction, that is:
l(i, j − 1) = x[i][(k − 1) − i − (j − 1) + 2] = x[i][k − i − j + 2]
When j > 1, the assignment statement l(i, j) = l(i, j − 1) is performed (line 5). Thus at the
end of the k-th iteration, from induction, we have l(i, j) = x[i][k − i − j + 2] for k ≥ 0.
Similarly, from Lemma 1, we have t(1, j) = y[k − j + 1][j] = y[k − i − j + 2][j] for i = 1, and
from P (i − 1, j, k − 1) for i > 1, we have:
t(i − 1, j) = y[(k − 1) − (i − 1) − j + 2][j] = y[k − i − j + 2][j]
When i > 1, the assignment statement t(i, j) = t(i − 1, j) is performed (line 6). Thus we have
t(i, j) = y[k − i − j + 2][j] for k ≥ 0.
Also from P (i, j, k − 1) we have:
v(i, j) = x[i][1]y[1][j] + x[i][2]y[2][j] + ... + x[i][k − i − j + 1]y[k − i − j + 1][j]
Then the statement v(i, j) = v(i, j) + l(i, j) · t(i, j) is performed (line 7). Thus at the end of
the k-th iteration, P (i, j, k) holds.
Following on from Lemma 2, after iteration k = 3n − 2, that is, after 3n − 2 steps, we have
v(i, j) = x[i][1]y[1][j] + x[i][2]y[2][j] + ... + x[i][3n − i − j]y[3n − i − j][j] for all 1 ≤ i, j ≤ n. Since
the maximum value for i and j is n (as deﬁned in Section 2, x and y values for indices out of the
[1, n] range are 0), after 3n−2 steps v(i, j) = x[i][1]y[1][j]+x[i][2]y[2][j]+...+x[i][n]y[n][j] = zij
for all v(i, j) and thus Cannon’s algorithm takes exactly 3n − 2 steps to compute the product
of two n-by-n matrices.
As noted earlier, the loader arrays L and T are not required for actual implementation
because the matrix element that needs to be loaded onto a speciﬁc register at a speciﬁc time
can be derived from the location of the edge cells (i.e. cell(1, j) and cell(i, 1)), and the time, k.
In fact the formulae to compute exactly when and where loading of matrix elements must occur
have already been speciﬁed by Lemma 1. Thus we do not include the time taken to initialize
the loader arrays or any other operations performed on the loader arrays in the time analysis
of the parallel algorithms.

4

Reducing idling time

One shortcoming of Cannon’s algorithm is that most cells on the lower right hand corner of
the mesh array is not performing useful computation in the beginning. In fact, cell(n, n) only
starts to accumulate the partial sum for znn after 2n − 2 steps have already been computed. We
can reduce the idling time of cells on the lower right corner of the mesh array by loading values
of X and Y from Right and Bottom at the same time as loading the values from Left and Top,
thereby reducing the total number of steps required to perform matrix multiplication. Loading
data from both corners of the mesh array was also one of the key ideas used by Umehara to
reduce the number of steps required to solve the APSP problem on a mesh array [8].
We deﬁne two more loader arrays R and B, similarly to L and T as deﬁned in Section 3.
Again, these arrays are not essential, but we deﬁne them to clarify how the matrices are skewed
before the elements are loaded onto the mesh array. Algorithm 3 shows the exact contents of
R and B. We then present Algorithm 4 that can compute the product of two n-by-n matrices
in exactly 2n − 1 steps. An illustration of this algorithm is given in Figure 3.
2234

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

Algorithm 3 X is horizontally skewed in R, Y is vertically skewed in B
for i = 1 to n; j = 1 to 2n − 1 do
R[i][j] ← x[i][2n − i − j + 1]
for i = 1 to 2n − 1; j = 1 to n do
B[i][j] ← y[2n − i − j + 1][j]

Algorithm 4 Computing Z = X × Y in parallel
for k = 1 to 2n − 1 do
for all 1 ≤ i, j ≤ n in parallel do
if i + j ≤ n + 1 then
/* Region I */
l(i, 1) ← L[i][1] /* load X from Left */
t(1, j) ← T [1][j] /* load Y from Top */
if j > 1 then l(i, j) ← l(i, j − 1) /* receive data from Left */
if i > 1 then t(i, j) ← t(i − 1, j) /* receive data from Top */
v(i, j) ← v(i, j) + l(i, j) · t(i, j)
else
/* Region II */
r(i, n) ← R[i][1] /* load X from Right */
b(n, j) ← B[1][j] /* load Y from Bottom */
if j < n then r(i, j) ← r(i, j + 1) /* receive data from Right */
if i < n then b(i, j) ← b(i + 1, j) /* receive data from Bottom */
v(i, j) ← v(i, j) + r(i, j) · b(i, j)
Shift L and R horizontally by one
Shift T and B vertically by one

ynn
y1n

yn1
x1n

x1n

x11

I
II
xnn

xn1

xn1
yn1

y1n

y11
Figure 3: Loading values from both corners of the mesh array

2235

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

Lemma 3. After k steps of Algorithm 4, we have the following boundary conditions for j = n
and i = n, respectively:
r(i, n) = x[i][2n − i − k + 1]
b(n, j) = y[2n − j − k + 1][j]
Proof. Since the array R is originally R[i][j] = x[i][2n−i−j+1] and the elements are horizontally
shifted by one in each step, at the k-th step, r(i, n) = R[i][1] is given by the initial value
R[i][k] = x[i][2n − i − k + 1]. Similar argument can be made for b(n, j).
Lemma 4. For all k ≥ 0 and for all 1 ≤ i, j ≤ n such that i + j ≤ n + 1 (Region I), we have
the space/time invariants P (i, j, k) where:
P (i, j, k)

⇔

l(i, j) = x[i][k − i − j + 2]
t(i, j) = y[k − i − j + 2][j]
v(i, j) = x[i][1]y[1][j] + x[i][2]y[2][j] + ...
+x[i][k − i − j + 2]y[k − i − j + 2][j]

Proof. Same as the proof of Lemma 2.
Lemma 5. For all k ≥ 0 and for all 1 ≤ i, j ≤ n such that i + j > n + 1 (Region II), we have
the space/time invariants P (i, j, k) where:
P (i, j, k)

⇔

r(i, j) = x[i][3n − i − j − k + 1]
b(i, j) = y[3n − i − j − k + 1][j]
v(i, j) = x[i][n]y[n][j] + x[i][n − 1]y[n − 1][j] + ...
+x[i][3n − i − j − k + 1]y[3n − i − j − k + 1][j]

Proof. Proof is based on induction on the three dimensional logical space indexed by (i, j, k).
The basis for k is P (i, j, 0), where r(i, j) = b(i, j) = v(i, j) = 0. This is true by deﬁnition as all
registers are initialized to zero as speciﬁed in Section 2.
For general P (i, j, k) for 1 ≤ i, j ≤ n and k ≥ 0, we start with the two cases j = n and j < n.
In the ﬁrst case, from Lemma 3, we have r(i, n) = x[i][2n − i − k + 1] = x[i][3n − i − j − k + 1]
at the end of the k-th iteration. In the second case, assume P (i, j + 1, k − 1) for induction, that
is:
r(i, j + 1) = x[i][3n − i − (j + 1) − (k − 1) + 1] = x[i][3n − i − j − k + 1]
When j < n, the assignment statement r(i, j) = r(i, j + 1) is performed. Thus at the end of
the k-th iteration, from induction, we have r(i, j) = x[i][3n − i − j − k + 1] for k ≥ 0.
Similarly, from Lemma 3, we have b(n, j) = y[2n − j − k + 1][j] = y[3n − i − j − k + 1][j] for
i = n, and from P (i + 1, j, k − 1) for i < n and k ≥ 0, we have:
b(i + 1, j) = y[3n − (i + 1) − j − (k − 1) + 1][j] = y[3n − i − j − k + 1][j]
When i < n, the assignment statement b(i, j) = b(i + 1, j) is performed. Thus we have b(i, j) =
y[3n − i − j − k + 1][j] for k ≥ 0.
Also from P (i, j, k − 1) we have:
v(i, j) = x[i][n]y[n][j] + x[i][n − 1]y[n − 1][j] + ... + x[i][3n − i − j − k + 2]y[3n − i − j − k + 2][j]
Then the statement v(i, j) = v(i, j) + r(i, j) · b(i, j) is performed. Thus at the end of the k-th
iteration, P (i, j, k) holds.
2236

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

Theorem 6. Algorithm 4 correctly computes Z = X × Y in {v(i, j)} in 2n − 1 steps.
Proof. We divide the cells into two regions, Region I and Region II. All cell(i, j) such that i+j ≤
n + 1 belongs to Region I, and all other cells belong to Region II. For Region I, when k = 2n − 1,
by Lemma 4, we have v(i, j) = x[i][1]y[1][j]+x[i][2]y[2][j]+...+x[i][2n−i−j+1]y[2n−i−j+1][j].
Since the maximum value for i + j in Region I is n + 1, v(i, j) = zij for all v(i, j) in Region I.
For Region II, by Lemma 5 we have v(i, j) = x[i][n]y[n][j] + x[i][n − 1]y[n − 1][j] + ... + x[i][n −
i − j + 2]y[n − i − j + 2][j]. Since the minimum value for i + j is n + 2 for Region II, we have
v(i, j) = zij also for all v(i, j) in Region II.

5

Using values from all four directions

We can observe that in Algorithms 2 and 4, each cell(i, j) performs x[i][k] · y[k][j] for a single
value of k in each step. Suppose at a given step, x[i][k1 ] and y[k1 ][j] arrive on cell(i, j) from left
and top, respectively, and x[i][k2 ] and y[k2 ][j] arrive from right and bottom, respectively, such
that k1 = k2 . Then we can perform the calculation x[i][k1 ]y[k1 ][j] + x[i][k2 ]y[k2 ][j] in the given
step. This allows us to accumulate the sum of two products instead of just one product in a
single step, thereby reducing the total number of steps even further. We present Algorithm 5
to compute Z = X × Y in 1.5n − 1 steps by utilizing this key observation. An illustration of
this algorithm is given in Figure 4.
Algorithm 5 Computing Z = X × Y in parallel
for k = 1 to 1.5n − 1 do
for all 1 ≤ i, j ≤ n in parallel do
if i + j ≤ n2 + 1 then
Same as Region I in Algorithm 4
else if i + j > 3n
2 then
Same as Region II in Algorithm 4
else/* n2 + 1 < i + j ≤ 3n
2 */
/* Region III */
l(i, 1) ← L[i][1]
t(1, j) ← T [1][j]
r(i, n) ← R[i][1]
b(n, j) ← B[1][j]
if j > 1 then l(i, j) ← l(i, j − 1)
if i > 1 then t(i, j) ← t(i − 1, j)
if j < n then r(i, j) ← r(i, j + 1)
if i < n then b(i, j) ← b(i + 1, j)
v(i, j) ← v(i, j) + l(i, j) · t(i, j) + r(i, j) · b(i, j)
Shift L and R horizontally by one
Shift T and B vertically by one

Lemma 7. For all k ≥ 0 and for all 1 ≤ i, j ≤ n such that i + j ≤

n
2

+ 1 (Region I), we have
2237

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

y n2 n
y1n

yn1

x1n x1 n2

x1n
I
III
II

xn n2 xn1
yn1

xn1
y1n

y1 n2
Figure 4: Utilizing data from all four directions
the space/time invariants P (i, j, k) where:
P (i, j, k)

⇔

l(i, j) = x[i][k − i − j + 2]
t(i, j) = y[k − i − j + 2][j]
v(i, j) = x[i][1]y[1][j] + x[i][2]y[2][j] + ...
+x[i][k − i − j + 2]y[k − i − j + 2][j]

Proof. Same as the proof of Lemma 2.
Lemma 8. For all k ≥ 0 and for all 1 ≤ i, j ≤ n such that i + j >
space/time invariants P (i, j, k) where:
P (i, j, k)

⇔

3n
2

(Region II), we have the

r(i, j) = x[i][3n − i − j − k + 1]
b(i, j) = y[3n − i − j − k + 1][j]
v(i, j) = x[i][n]y[n][j] + x[i][n − 1]y[n − 1][j] + ...
+x[i][3n − i − j − k + 1]y[3n − i − j − k + 1][j]

Proof. Same as the proof of Lemma 5
Lemma 9. For all k ≥ 0 and for all 1 ≤ i, j ≤ n such that
we have the space/time invariants P (i, j, k) where:
P (i, j, k)

⇔

l(i, j)
t(i, j)
r(i, j)
b(i, j)
v(i, j)

=
=
=
=
=

n
2

+1 < i+j ≤

3n
2

(Region III),

x[i][k − i − j + 2]
y[k − i − j + 2][j]
x[i][3n − i − j − k + 1]
y[3n − i − j − k + 1][j]
x[i][1]y[1][j] + x[i][2]y[2][j] + ...
+x[i][k − i − j + 2]y[k − i − j + 2][j] + ...
+x[i][3n − i − j − k + 1]y[3n − i − j − k + 1][j] + ...
+x[i][n − 1]y[n − 1][j] + x[i][n]y[n][j] + ...

Proof. Proof is straightforward by combining the proofs of Lemma 7 and Lemma 8.
2238

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

Theorem 10. On a 2D square mesh array with n2 cells where each cell is limited to four connections to its neighbours ( Top, Bottom, Left and Right), the product of two n-by-n matrices
can be computed in exactly 1.5n − 1 steps.
Proof. We divide the mesh array into three regions, Region I, II and III. All cell(i, j) such that
i + j ≤ n2 + 1 belong to Region I. All cell(i, j) such that i + j ≥ 3n
2 + 1 belong to Region II. All
other cells belong to Region III.
• Region I: At k = 1.5n − 1, by Lemma 7, v(i, j) = x[i][1]y[1][j] + x[i][2]y[2][j] + ... + x[i][1.5n −
i − j + 1]y[1.5n − i − j + 1][j]. Since the maximum value of i + j is 0.5n, v(i, j) = zij for all
(i, j) in Region I.
• Region II: At k = 1.5n − 1, by Lemma 8, v(i, j) = x[i][n]y[n][j] + x[i][n − 1]y[n − 1][j] + ... +
x[i][1.5n−i−j +2]y[1.5n−i−j +2][j]. Since the minimum value of i+j is 1.5n+1, v(i, j) = zij
for all (i, j) in Region II.
• Region III: At k = 1.5n − 1, by Lemma 9, v(i, j) = x[i][1]y[1][j] + x[i][2]y[2][j] + ... + x[i][1.5n −
i − j + 1]y[1.5n − i − j + 1][j] + x[i][1.5n − i − j + 2]y[1.5n − i − j + 2][j] + ... + x[i][n − 1]y[n −
1][j] + x[i][n]y[n][j]. Thus v(i, j) = x[i][1]y[1][j] + x[i][2]y[2][j] + ... + x[i][n]y[n][j] = zij .

Note that for Algorithm 5, there is no need to load all n2 values from each matrix from
the four diﬀerent directions. Since the algorithm ﬁnishes after 1.5n − 1 steps, as illustrated in
Figure 4, we only load 87 n2 matrix elements from each direction.

6

Concluding remarks

We have shown that the product of two n-by-n matrices can be computed in 1.5n − 1 steps on
a simple 2D square mesh array of size n2 . We have thus halved the number of steps required by
Cannon’s algorithm at the expense of requiring a few more registers in each cell. It is important
to note that we have continued to restrict ourselves to a 2D mesh array where each cell has at
most four neighbours. Allowing more connectivity may result in a 3D mesh array structure that
may be more diﬃcult for practical implementation, such as translating the algorithm directly
onto an ASIC.
To provide additional clarity in our algorithms, we used rectangular loader arrays to store
skewed matrices for loading the matrix elements from the four directions. As already mentioned,
it is quite straightforward to implement the algorithms without using these loader arrays since
it is possible to determine when and where to load a matrix element based on the location of
the register and the number of steps. If there is connectivity to the mesh array such that we
can load from both Left and Right (and both Top and Bottom) from the same location, then
we do not need any additional memory to load the two matrices X and Y simultaneously from
all four directions.
If wraparound is possible, that is, if the cells on the left edge and the right edge of the mesh
array can communicate directly (and also for top and bottom of the mesh array), then our
achievement of 1.5n − 1 steps for matrix multiplication enables us to solve the APSP problem
in 3.5n − 2 steps. By performing the “min” operation instead of addition and performing
addition instead of multiplication, we can solve the APSP problem by cascade squaring the
given distance matrix three times in a pipeline fashion such that the ﬁrst two squaring takes
n steps and the last takes 1.5n − 2 steps. Ignoring the constant term, 3.5n steps for solving
the APSP problem is on a par with Takaoka and Umehara’s achievement [6] mentioned in the
2239

A Faster Parallel Algorithm for Matrix Multiplication on a Mesh Array

Bae, Shinn and Takaoka

Introduction, but both the cell deﬁnitions and the structure of the mesh array in this paper are
simpler.

References
[1] Lynn E Cannon. A cellular computer to implement the kalman ﬁlter algorithm. Technical report,
DTIC Document, 1969.
[2] Leonidas J Guibas, HT Kung, and Clark D Thompson. Direct vlsi implementation of combinatorial
algorithms. 1979.
[3] Subhash C Kak. A two-layered mesh array for matrix multiplication. Parallel computing, 6(3):383–
385, 1988.
[4] Gopal Lakhani and R Dorairaj. A vlsi implementation of all-pair shortest path problem. In ICPP,
pages 207–209, 1987.
[5] Volker Strassen. Gaussian elimination is not optimal. Numerische Mathematik, 13(4):354–356,
1969.
[6] Tadad Takaoka and Kiyomi Umehara. An eﬃcient vlsi algorithm for the all pairs shortest path
problem. Journal of Parallel and Distributed Computing, 16(3):265–270, 1992.
[7] Jeﬀrey D Ullman. Computational aspects of VLSI, volume 11. Computer Science Press Rockville,
MD, 1984.
[8] Kiyomi Umehara. The design and analysis of sequential and parallel algorithms for shortest path
problems. Technical report, Department of Computer Science, Ibaraki University, 1990.
[9] V Vassilevska Williams. Breaking the coppersmith-winograd barrier. Unpublished manuscript, Nov,
2011.

2240

