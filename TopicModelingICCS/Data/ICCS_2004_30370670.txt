Evolving TSP Heuristics Using
Multi Expression Programming
Mihai Oltean and D. Dumitrescu
Department of Computer Science,
Faculty of Mathematics and Computer Science,
Babe¸s-Bolyai University, Kog˘
alniceanu 1
Cluj-Napoca, 3400, Romania.
{moltean, ddumitr}@cs.ubbcluj.ro

Abstract. Multi Expression Programming (MEP) is used for evolving a
Traveling Salesman Problem (TSP) heuristic for graphs satisfying triangle inequality. Evolved MEP heuristic is compared with Nearest Neighbor
Heuristic (NN) and Minimum Spanning Tree Heuristic (MST) on some
diﬃcult problems in TSPLIB. The results emphasizes that evolved MEP
heuristic is better than the compared algorithm for the considered test
problems.

1

Introduction

Multi Expression Programming [4] is a Genetic Programming (GP) [3] that uses
a linear representation of the chromosomes. MEP representation is similar to the
way in which C and Pascal compilers translate mathematical expressions into
machine code.
MEP technique is used here for discovering Traveling Salesman Problem
(TSP) heuristics for graphs satisfying triangle inequality (TI graphs). This option was chosen due to the existence of a big number of real-world applications
implying TI graphs (e.g. plains, trains and vehicles routes). MEP technique is
used to learn a path function f that is used for evaluating the reachable nodes.
This function serves as a heuristic for detecting the optimum path.
Evolved function f is compared with some well known heuristics. Numerical
experiments emphasize that (for considered examples) MEP function outperforms dedicated heuristics.

2

MEP for TSP

TSP problem for TI graphs (i.e. satisfying triangle inequality) is stated as follows.
Consider a set C = {c0 , c1 ,. . . , cN –1 } of cities, and a distance d(ci , cj ) ∈
Z+ for each pair ci , cj ∈ C, d(ci , cj ) = d(cj , ci ), and for each three cities ci ,
cj , ck ∈ C, d(ci , cj ) ≤ d(ci , ck ) + d(ck , cj ). The tour <cπ(0) , cπ(1) , . . . ,
cπ(N –1) > of all cities in C having minimum length is needed [2]
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 670–673, 2004.
c Springer-Verlag Berlin Heidelberg 2004

Evolving TSP Heuristics Using Multi Expression Programming

671

TSP problem with triangle inequality is an NP-complete problem [2]. No
polynomial time algorithm for solving TSP problem is known. Several heuristics
for solving TSP problem have been proposed. The most important are Nearest
Neighbor and the Minimum Spanning Tree [1,2].
In this section we address the problem of discovering heuristics that can
solve TSP rather than solving a particular instance of the problem. MEP
technique is used for evolving a path function f that gives a way to choose
graph vertices in order to obtain a Hamiltonian cycle. The ﬁtness is assigned
to a function f in the current population by applying f on several randomly
chosen graphs (training set) and evaluating the results. Evolved path function
may be used for solving particular instances of TSP. For each problem the
graph nodes are evaluated using the path function f and are added one by one
to the already build path. The algorithm for TSP using evolved path function
f may be described as follows:
S1 .
S2 .
S3 .
S4 .
S5 .
S6 .
S7 .

Let cπ(0) = c0 {the path starts with the node c0 }
k = 1;
while k < N – 1 do
Using function f select cπ(k+1) – the next node of the path
Add cπ(k+1) to the already built path.
k = k + 1;
endwhile

S4 is the key step of this algorithm. The procedure that selects the next node
of the path in an optimal way uses the function f evolved by the MEP technique
as described in the next sections.
Path function f has to use (as input) some information about already build
path and some information about unvisited nodes. We consider a special terminal
set which is independent with respect to the number of graph nodes.
Let us denote by y1 the last visited node (current node). We have to select
the next node to be added to the path. In this respect all unvisited nodes are
considered. Let us denote by y2 the next node to be visited.
For evolving path function f we consider a set T of terminals involving the
following elements:
d y 1 y 2 – distance between the graph nodes y1 and y2 ,
min g y 1 (min g y 2 ) – the minimum distance from the nodes y1 (y2 ) to unvisited nodes,
sum g y 1 (sum g y 2 ) – the sum of all distances between nodes y1 (y2 ) and
unvisited nodes,
prod g y 1 (prod g y 2 ) – the product of all distances between nodes y1 (y2 )
and unvisited nodes,
max g y 1 (max g y 2 ) – the maximum distance from the nodes y1 (y2 ) to
unvisited nodes,
length – the length of the already built path.

672

M. Oltean and D. Dumitrescu

Table 1. The performance of evolved MEP heuristic, NN and MST on some problems
in TSPLIB. Length is the length of the TSP path obtained with one of the considered
heuristics. Each node of the graph has been considered as the ﬁrst node of the path
Problem MEP
Length
a280
2858.86
att48
37188.2
bier127
134945
d198
17780.7
d493
43071.3
d657
56965.6
ﬂ417
13933.8
gil262
2659.17
kroB100 24801
kroB200 33267.4
pcb442
56948.3
pr264
55827.1
rat575
7573.6
rat783
9982.96
rd400
16973.3
u574
43095.6
u724
46545.7

Error (%)
10.85
10.93
14.08
12.67
23.05
16.46
17.47
11.82
12.01
13.01
12.15
13.61
11.82
13.36
11.07
16.77
11.06

NN
Length
3084.22
39236.9
127954
17575.1
41167
60398.7
13828.2
2799.49
25883
35592.4
57856.3
54124.5
7914.2
10836.6
18303.3
44605.1
50731.4

Error (%)
19.58976
17.04227
8.177068
11.37579
17.61328
23.48442
16.58545
17.72456
16.90077
20.91042
13.9397
10.15468
16.84925
23.05928
19.77816
20.86465
21.04844

MST
Length
3475.23
43955.8
152747
17957.6
41846.6
63044.2
16113.2
3340.84
28803.5
40619.9
73580.1
65486.5
9423.4
11990.5
20962
50066
60098.9

Error (%)
34.75
31.11
29.13
13.79
19.55
28.89
35.85
40.48
30.09
37.98
44.9
33.27
39.13
36.16
37.17
35.66
43.39

Set T of terminals is chosen in such way to be independent of the number
of graph nodes. This choice confers ﬂexibility and robustness to the evolved
heuristic.
For evolving a MEP function for TSP problem we may consider the following
set of function symbols: F = {+, -, /, *, cos, sin, min, max }.
The node y2 that generates the lowest output of evolved function f is chosen
to be the next node of the path. Ties are solved arbitrarily. For instance we
may consider the node with the lowest index is selected.
Example
Consider the MEP linear structure:
1: d y1 y2
2: min g y 1
3: + 1, 2
4: sum g y 2
5: * 2, 4
This MEP individual encodes the path functions f1 , f2 , f3 , f4 , f5 given by:
f1 = d y1 y2 ,
f2 = min g y 1 ,
f3 = d y1 y2 + min g y 1 ,
f4 = sum g y 2 ,
f5 = min g y 1 * sum g y 2 .

Evolving TSP Heuristics Using Multi Expression Programming

673

The ﬁtness (quality) of a detected path function f is deﬁned as the sum of
the TSP path length of graphs in the training set. Thus the ﬁtness is to be
minimized.

3

Numerical Experiments

In this experiment we evolve a heuristic for solving TSP problem and we assess
its performance by applying it to some real-world instances taken from TSPLIB
[5].
Let us denote by Gk the set of class of TI graphs having maximum k nodes.
MEP algorithm considers the class G50 (i.e. graphs having 3 to 50 nodes)
for training and the class G100 for validation. MEP algorithm parameters are
Population Size = 300; Number of generations = 100; Chromosome length = 40.
A path function evolved by the MEP algorithm is:
f = (sum g(y2)) * (d y 1 y 2 - (max (d y 1 y 2 , max g(y1 ))) + d y 1 y 2 ).
Heuristic function f that is evolved by MEP technique is directly used for
building the optimal path. For assessing the performance of evolved MEP heuristic we use it for solving several diﬃcult problems in TSPLIB [5]. Other two wellknown heuristics are used in this comparison: Nearest Neighbor and Minimum
Spanning Tree heuristic [1,2]. Results are presented in Table 1.
Table 1 shows that evolved MEP heuristic performs better than NN and
MST on all considered problems.

References
1. Cormen, T.H., Leiserson, C.E., Rivest, R. R.: Introduction to Algorithms, MIT
Press, (1990)
2. Garey, M.R., Johnson, D.S.: Computers and Intractability: A Guide to NP–
Completeness, Freeman & Co, San Francisco, CA, (1979)
3. Koza, J. R.: Genetic Programming: On the Programming of Computers by Means
of Natural Selection, MIT Press, Cambridge, (1992)
4. Oltean, M.: Solving Even-Parity Problems using Multi Expression Programming, In:
Ken Chen et. al (eds.): Proceedings of the the 7th Joint Conference on Information
Sciences (2003) 315-318
5. Reinelt, G.: TSPLIB - A Traveling Salesman Problem Library, ORSA, Journal of
Computing, Vol. 3, no 4, (1991) 376-384

