Multi-resolution LOD Volume Rendering in Medicine

，

，

Kai Xiea,* Jie Yanga and Yue Min Zhub
a

Inst. of Image Processing & Pattern Recognition,
Shanghai Jiaotong Univ., 200030 Shanghai,China
b
CREATIS - CNRS research unit 5515 & INSERM unit 630,
69621 Villeurbanne, France
xie_kai2001@sjtu.edu.cn

Abstract. This paper presents a level of detail (LOD) selection algorithm for
multi-resolution volume rendering using 3D texture mapping. It uses an
adaptive scheme that renders the volume in a region-of-interest at a high
resolution and the volume away from this region at progressively lower
resolutions. The algorithm is based on several important criteria, rendering is
done adaptively by selecting high-resolution cells close to a center of attention
and low-resolution cells away from this area. In addition, our hierarchical levelof-detail representation guarantees consistent interpolation between different
resolution levels. Experiments have been applied to a number of large medical
data and produced high quality images at interactive frame rates using standard
PC hardware.

1 Introduction
Volume rendering of large data sets is a very common task in many areas in medicine.
To address the challenge, researchers have proposed various algorithms. Among the
existing techniques, hierarchical rendering algorithms can effectively control the
tradeoff between quality and speed, and thus show a great potential. In essence,
hierarchical methods first create a multi-resolution representation for the volume.
Data of different resolutions in different regions are chosen for rendering. The
effectiveness of hierarchical algorithms relies on their ability to adaptively simplify
rendering in regions where data are unimportant or uninteresting, so that both the
memory and computational cost can be reduced without significantly affecting the
rendering quality.
Hierarchical volume rendering algorithms [1][2][3] can accelerate the speed of
rendering. The selection of appropriate volume resolutions, or levels of detail (LOD),
is often done for the different applications. Although various LOD selection
algorithms for polygon rendering systems [5][6] are available, LOD selection
algorithms for volume rendering, however, are still scarce. Frequently used
approaches such as selecting the volume resolutions based on user specified error
tolerances [4], based on the volume block’s distance to the viewpoint and the angle to
the view vector [1][2] are difficult to guarantee the rendering quality and the
continuity at level boundaries while reducing the rendering time.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 925 – 933, 2005.
© Springer-Verlag Berlin Heidelberg 2005

926

，

，

K. Xie J. Yang and Y.M. Zhu

This paper presents a LOD selection algorithm for rendering hierarchical volumes
using 3D texture hardware. The main focus of our algorithm is adaptive LOD
selection based on several important criteria: Maximum opacity, Distance to the view
point, Projection area and Gaze distance. In addition, we reduce the run-time
performance of volume rendering and insure interpolation consistency between levels.
The rest of the paper is organized as follows. In section 2, we present our multiresolution rendering algorithm in detail. Experimental results are discussed in section
3. Conclusions are discussed in section 4.

2 Multi-resolution LOD Volume Rendering
We develop a multi-resolution hierarchy that allows consistent interpolation between
levels and give a solution to the rendering artifacts that still persist when rendering
two differing but adjacent levels. In addition, to make sure that regions of interest are
rendered at a higher quality, our algorithm allocates the different hierarchy to different
subvolumes based on several important criteria, which can be simple heuristics such
as the distance to the view point, the volume opacity, or other application-specific
criteria. In the following, we describe our algorithm in detail.
2.1 The Multi-resolution Texture Hierarchy
Prior to the rendering, the volume data set is subdivided into multiple subvolumes of
smaller size, which get assigned the chunk of texture that is necessary to render the
subvolume at the original resolution. Each subvolume builds its own local hierarchy by
constructing copies of the original texture at ever coarser resolution. These different
levels-of-detail are stored in additional texture maps as shown in Figure 1. On every
level the size of texture elements increases by a factor of two. Note that at subvolume
boundaries on the same level, texture elements have to be included in multiple
subvolumes in order to guarantee continuous texture interpolation (filled areas).
Level
0

Subvolume A

Subvolume B

1

2

3

Fig. 1. One-dimensional of a data set with four levels of detail

The original data set is represented by textures of level 0. The width of texture
elements on level k is twice the width of elements on level k- 1, whereas the texture

Multi-resolution LOD Volume Rendering in Medicine

927

size is reduced by a factor of two. Texture elements on different resolution levels are
aligned in such a way, that their centers on a certain level correspond to the center of
an even element on the next finer level. Since the geometry or shape of bricks will be
retained throughout the hierarchy, the domain of the underlying texture function,
necessary to compute appropriate texture coordinates, has to be adapted accordingly.
On the first level, the domain of texture coordinates ranges from the center of the
first element to the center of the last one. Due to the alignment of voxels on different
levels, borders of the texture function domain on coarser levels often fall between two
adjacent voxels. In this case additional voxels are needed in order to guarantee correct
interpolation. On the other hand, since the width of texture elements on each level is
known and because the shape of subvolumes is not going to be modified, offsets for
correct calculation of texture coordinates can always be determined.
We should note that it is always necessary to expand textures in order to cope with
the power-of-two restriction imposed by the OpenGL implementation. However, a
hierarchical technique will be outlined below that allows us to effectively avoid
unnecessary texture elements.
2.2 Continuous Level Transitions
If local texture hierarchies are constructed as described, interpolation artifacts at the
boundaries between adjacent bricks at the same level do not appear. This is because
boundary voxels are shared by adjacent subvolumes. However, this does not apply to
adjacent bricks rendered on different levels.
Therefore, it is necessary to slightly modify the treatment of level transitions to
meet the continuity requirements: in the level-of-detail representation the continuity at
level transitions can be established by letting the finer cells to the left and to the right
of the subvolume boundary interpolate the scalar field from the coarser level (Figure
2). For cells with even index in each dimension this is equivalent to a copy operation
as they correspond exactly to a cell on the next coarser level. This procedure only
adapts the subvolume textures on the finer level. Thus, with the combination of the
proposed multi-resolution representation together with appropriately re-sampled
values at level transitions we guarantee the continuity of the 3D scalar field.

Fig. 2. Adaption of adjacent subvolumes with different level-of-detail to ensure consistent
texture interpolation

928

，

，

K. Xie J. Yang and Y.M. Zhu

Note in particular, that we restrict transitions to differ by at most one level in order to
maintain the continuity between levels. However, this does not impose a real restriction
as higher transitions can be achieved by consecutive transitions of one level.
The number of voxels that has to be adapted depends on the position of the brick
boundary relative to the voxel coordinates. Either the boundary is located at the center
of one voxel, as is the case on level 0, or between two voxels, as is the case on other
levels. In the first case only one voxel needs to be adapted while both voxels have to
be modified in the latter case. Due to the overlap between bricks, adaption has to be
performed whenever a subvolume is adjacent to a coarser one.
2.3 Level-Wise Texture Merging
The enlargement of textures in order to guarantee continuous level transitions leads to
significant overhead in the texture memory that is used. Refer to the example shown
in Figure 2. If we want to render the information represented by the first 31 voxels on
level 0, we need two textures of size 16 for the finest level and two textures of size 16
on level 1 whereas only nine texture elements are necessary to store the information.
Effectively there is no saving of texture memory when switching from level 0 to level
1. Considering higher levels leads to similar results, as only half of the voxels of
every texture – plus one or two for overlap – contain non-redundant information.
This overhead can be minimized by merging the texture data of adjacent
subvolumes into a single texture as shown in Figure 3. This figure demonstrates the
one-dimensional analogue. For each level-of-detail the same texture size is used. In
level 0 each brick has a texture of its own. As in any direction only half the voxels of
a particular level are needed on the next coarser level, eight adjacent subvolumes can
be represented by the same texture map, with appropriate texture coordinates. On
higher levels, the number of subvolumes sharing the same texture map is multiplied
by a factor of 8, which finally results in an octree-like hierarchy of texture maps.

Fig. 3. The hierarchy of storing the textures of subvolumes

Merging textures works best when the starting number of subvolumes in every
direction matches a power of two. If more than 2l-1 bricks are created by the
subdivision of the initial data set, where l is the number of levels used for rendering,
additional subvolumes will be generated that build their own set of textures as

Multi-resolution LOD Volume Rendering in Medicine

929

described in subsection 3.1. If fewer subvolumes are generated, then the depth of the
texture hierarchy has to be reduced by storing textures on the coarsest level
individually. We utilize a texture manager object for administration of the texture
hierarchy. This object creates the desired texture maps and assigns appropriate subtextures to the subvolumes requesting texture memory.
2.4 Opacity Correction
When rendering subvolumes at different levels of hierarchy, the opacity properties of
the subvolumes are different. The classical rendering algorithms depend on using the
same sampling along rays for each pixel. But in the context of a multi-resolution
format, the volume is sampled in different ways, and at varying resolutions. To
preserve optical properties between tiles of different resolutions, we must modify the
transfer functions for those subvolumes generated by subsampling the original
texture.
A

A

B0

B1

B2

B0

B2

Fig. 4. Sampling a texture at two different resolutions

Figure 4 shows an example where we have sampled a texture at two different
resolutions – one is half the resolution of the other. Each sample Bi has an associated

ci and an opacity value α i . By considering only the first three samples, the
resulting colors A and A′ are given by

color

A = α 0 c0 + (1 − α 0 )α 1 c1 + (1 − α 0 )(1 − α 1 )C 2

(1)

A′ = α 0′ c0 + (1 − α 0′ )C 2′

(2)

，

C2 is the incoming color from samples B2 , B3 ! C 2′ is the color
calculated as a result of the samples B4 , B6 !
However, if we compute the total-accumulated opacities D and D ′ , we obtain

Where

D = α 0 + (1 − α 0 )α 1 + (1 − α 0 )(1 − α 1 ) D2

(3)

D ′ = α 0′ + (1 − α 0′ ) D2′

(4)

，

，

K. Xie J. Yang and Y.M. Zhu

930

Assuming that the accumulated opacities are equal at the even samples, it follows
that D2

= D2′ and D = D ′ , i.e.,

α 0 + (1 − α 0 )α 1 + (1 − α 0 )(1 − α 1 ) D2 = α 0′ + (1 − α 0′ ) D2′
Solving this equation for

α 0′
By assuming that

α 0′

(5)

, one obtains

1 − (1 − α 0 )(1 − α 1 )

=

α1 = α 0 + ε

(where

ε

(6)

is a very small number), we obtain the

equation

α 0′

=

1 − (1 − α 0 ) 2 + O (ε )

(7)

Therefore, we modify the transfer function of the parent (coarser) texture by

α ′ = 1 − (1 − α 0 ) 2

(8)

for all opacity values in the subsampled texture to minimize the artifacts between
subvolumes. This formula is used when applying the transfer function to a level of the
texture hierarchy.
2.5 Adaptive Level-of-Detail
The initial size of each subvolume has to be specified in advance before the multivolume representation is constructed. Multi-criteria are applied to LOD selection .
•
•

•
•

Maximum opacity: The maximum opacity of a subvolume is determined by the
highest opacity of all the voxels in the subvolume. The rationale behind is that
a more opaque region in the volume should be rendered in a higher accuracy.
Distance to the view point: Here the distance is calculated from the center of
the subvolume to the view point. For those subvolumes that are closer to the
view point, as they have high importance value, they will be rendered in a high
quality. For other subvolumes, as they are farther away and may be occluded,
will be rendered in a low quality.
Projection area: Projection area is calculated based on the bounding box of the
subvolume. For those subvolumes with high projection area, a higher quality
rendering should be assigned to them.
Gaze distance: This parameter is especially useful for gaze-directed rendering.
Gaze distance is the distance between the center of the gaze area and the center
of the projected area of a subvolume. For those regions that are closer to the
gaze area, we ensure a higher image quality. For those regions that are farther
away from the gaze area, the image becomes blur because lower resolution
data are used.

Furthermore, as long as no level transitions greater than one are specified, our
approach allows us to use arbitrary texture resolution for every subvolume.

Multi-resolution LOD Volume Rendering in Medicine

931

2.6 Temporal Coherence Consideration
The above LOD selection procedure will be executed at every frame, which could
cause the subvolume’s LOD to change frequently. However, frequent changes of the
volume LODs can cause flickering when the user changes views. To solve this
problem, we take special care to maintain the temporal coherence in consecutive
rendering frames. We realize temporal coherence by recording the importance value
of each subvolume from the last rendering. When a new frame is being rendered, if
the user changes the viewing direction or gaze area, the importance value of each
subvolume will be recalculated. For those subvolumes whose importance values do
not differ too much (we use a threshold of percentage to decide this), we do not
change its LOD in the new frame.

3 Results and Discussion
We have implemented our LOD volume rendering algorithm on a Windows 2000 PC
with a 1.7 GHz AMD processor and NVIDIA GeForceFx graphics accelerator with
128 MB of Video RAM. Three data sets were used for the experiments.
Table 1. Rendering speed for the various data sets
Model

Data Set Size

2

MRIBrain 256 x109

Foot

Texture
memory

Rendering Speed(fps)
our algorithm

ray casting

shear-warp

100%

17.8

6.4

21.5

54%

21.4

-

-

33%

24.2

-

-

100%

18.6

5.7

20.1

22.5

-

-

102x247x200 53%
27%

27.4

100%

14.3

5.2

18.4

57%

16.8

-

-

29%
19.1
Abbreviations: fps = frames per second.

-

-

Spine

2

256 x299

In Figure 5, results of the proposed level-of-detail rendering technique applied to
MRI-Brain of size 2562× 109 are shown. In the leftmost image, all subvolumes were
rendered with full resolution. In the middle image only 54% of the original texture
memory was used, while on the right, only 33% was used (Table 1). The number of
texture lookups was reduced, from 59% to 35%. This leads to improved rendering
performance. Whereas the frame rate is 17.8 frames/s with the full resolution data set,
the level-of-detail representation used for the rightmost image allows us to create a
frame rate is 24.2 frames/s (Table 1). The rendering speed of our algorithm is quick
compared to other volume rendering techniques, such as ray casting and shear-warp.

932

，

，

K. Xie J. Yang and Y.M. Zhu

In Figure 6, we use gaze-directed rendering to show the results when the gaze area
is placed at different parts of the viewport.

(a)

(b)

(c)

Fig. 5. On the left, the data set is displayed with full resolution.In the middle, two different
levels of detail are used with lower resolution in the back. This reduces texture memory
consumption to 54%. On the right, the adaptive representation using four levels of detail from
front-to-back requires only 33% of the original texture memory

(a)

(b)

(c)

Fig. 6. Gaze-directed rendering. (a)(b)(c) show the results when the gaze area is placed at
different parts of the viewport

4

Conclusions

In this work we have emphasized a multi-resolution approach for the rendering of
large-scale volume data via 3D textures. The major contribution here is that we
entirely avoid artifacts that occur due to incorrect texture interpolation and opacity
correction at subvolume boundaries. In this respect, we have developed two beneficial
extensions that guarantee continuous transitions between different levels of detail, and
yield correct pixel opacities.

Multi-resolution LOD Volume Rendering in Medicine

933

References
1. E. LaMar, B. Hamann, and K. Joy. Multiresolution techniques for interactive texture-based
volume visualization. In Proceedings of Visualization ’99, pages 355–361. IEEE Computer
Society Press, Los Alamitos, CA,1999.
2. M. Weiler, R. Westermann, C. Hansen, K. Zimmerman,and T. Ertl. Level-of-detail volume
rendering via 3d textures. In Proceedings of 2000 Symposium on Volume Visualization,
pages 7–13. ACM SIGGRAPH, 2000.
3. D. Ellsworth, L. Chiang, and H.-W. Shen. Accelerating time-varying hardware volume
rendering using tsp trees and color-based error metrics. In Proceedings of 2000 Symposium
on Volume Visualization. ACM SIGGRAPH,2000.
4. D. Laur and P. Hanrahan. Hierarchical splating: A progressive refinement algorithm for
volume rendering. In Proceedings of SIGGRAPH 91, pages 285–287. ACM SIGGRAPH,
1991.
5. T. Funkhouser and C. Sequin. Adaptive display algorithms for interactive frame rate during
visualization of virtual environment. In Proceedings of SIGGRAPH 93, pages 247–254.
ACM SIGGRAPH, 1993.
6. E. Gobbetti and E. Bouvier. Time-critical multiresolution scene rendering. In Proceedings
of 1999 Symposium on Volume Visualization, pages 123–130. ACM SIGGRAPH, 1999.

