Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
This space
reserved
for the
header, do not use it
ProcediaisComputer
Science
108CProcedia
(2017) 2220–2229
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Smart levee monitoring and flood decision support system:
Smart levee monitoring and flood decision support system:
reference
architecture
computing
management
Smart
levee
monitoringand
andurgent
flood decision
support
system:
reference
architecture
and
urgent
computing
management
1
2
1
2
Bartosz Balisarchitecture
, Tomasz Bartynski
, Marian Bubak1 , Daniel Harezlak
, Marek
reference
and
management
1
2 urgent computing
2
Bartosz Balis2 , Tomasz Bartynski
1 , Marian Bubak , 2Daniel Harezlak 2, Marek
Kasztelnik2 , Maciej Malawski1 , Piotr Nowakowski2 , Maciej Pawlik2 , and
,2Piotr
Nowakowski
Kasztelnik
2
1 , Maciej Pawlik2 , and
Bartosz
Wilk
Bartosz
Balis1,, Maciej
TomaszMalawski
Bartynski
, Marian
Bubak
, Daniel Harezlak , Marek
2
Bartosz
Wilk
2
1
2
,
Maciej
Malawski
,
Piotr
Nowakowski
, Maciej Pawlik2 , and
Kasztelnik
1
AGH University of Science and Technology, Department
of Computer Science, Krakow, Poland
2
1
Wilk
AGH2University
of Science
and Technology,
Department
Computer Science,
AGH University
of Science
andBartosz
Technology,
ACC of
CYFRONET,
Krakow,Krakow,
Poland Poland
1

2
AGH University of Science and Technology, ACC CYFRONET, Krakow, Poland
AGH University of Science and Technology, Department of Computer Science, Krakow, Poland
2
AGH University of Science and Technology, ACC CYFRONET, Krakow, Poland

Abstract
Abstract
Real-time disaster management and decision support systems rely on complex deadline-driven
Real-time
disaster
management
and
decision support
relythat
on complex
deadline-driven
simulations
and require
advanced
middleware
servicessystems
to ensure
the requested
deadlines
Abstract
simulations
and
require
advanced
middleware
services
to
ensure
that
the
requested
deadlines
are
met.
In
this
paper
we
propose
a
reference
architecture
of
an
integrated
smart
levee
moniReal-time
disaster
management
anda decision
support
systems
relyintegrated
on complex
deadline-driven
are
met.
In
this
paper
we
propose
reference
architecture
of
an
smart
levee
monitoring
and
flood
decision
support
system,
focusing
on
the
decision
support
workflow
and
urgent
simulations
and decision
require advanced
middleware
services
todecision
ensure that
the workflow
requestedand
deadlines
toring
and
flood
support
system,
focusing
on
the
support
urgent
computing
architecture
is implemented
in an
theintegrated
ISMOP project
wheremoniconare
met. Inmanagement.
this paper we The
propose
a reference
architecture of
smart levee
computing
management.
The
architecture
is implemented
inexperimental
the ISMOP smart
project
whereWhile
controlled
flooding
experiments
are
conducted
using
a
full-scale
levee.
toring
and
flood experiments
decision support
system, focusing
onfull-scale
the decision
support workflow
and urgent
trolled
flooding
are
conducted
using
a
experimental
smart
levee.
While
the
system management.
operating in the
ISMOP
project ismonitors
a test in
levee,
is designed
to where
be scalable
computing
The
architecture
implemented
the it
ISMOP
project
conthe
system operating
in the
ISMOP
project monitors
a test levee,
it
is designed
to be scalable
to
large-scale
flood
scenarios.
trolled
flooding
experiments
are
conducted
using
a
full-scale
experimental
smart
levee.
While
to large-scale flood scenarios.
the2017
system
operating
in
thebyISMOP
project
monitors
test levee,
it is designed
be scalable
Keywords:
Smart
levee
monitoring,
flood
decision
support,aurgent
computing,
referencetoarchitecture
©
The Authors.
Published
Elsevier
B.V.
Keywords:
Smart
levee
monitoring,
flood decision
urgent computing,
architecture
Peer-review
under
responsibility
of the scientific
committeesupport,
of the International
Conferencereference
on Computational
Science
to large-scale
flood
scenarios.
Keywords: Smart levee monitoring, flood decision support, urgent computing, reference architecture

1 Introduction
1 Introduction
Smart levees are increasingly considered as an important part of a future flood protection infras1
Introduction
Smart
levees
are increasingly
consideredofasflood
an important
part of
a future
flood protection
infrastructure
enabling
real-time monitoring
embankments
and
early warning
of approaching
tructure
enabling
real-time
of flood
embankments
and system
early warning
of
disasters
[11,are
13].increasingly
A flood monitoring
early
warning
and
decision part
support
needs
to approaching
rely on
adSmart
levees
considered
as an
important
of a future
flood
protection
infrasdisasters
[11,
13].
A
flood
early
warning
and
decision
support
system
needs
to
rely
on
advanced
middleware
services
that
provide
urgent
computing
capabilities
[1,
15],
so
that
results
of
tructure
enabling real-time
monitoring
ofurgent
flood embankments
and early [1,
warning
ofthat
approaching
vanced
middleware
services
that
provide
computing
capabilities
15],
so
results
of
resource-intensive
data
analyses
and
simulations,
required
for
decision-making
in
emergencies,
disasters
[11, 13]. data
A flood
earlyand
warning
and decision
support
system needs in
toemergencies,
rely on adresource-intensive
analyses
simulations,
required
for
decision-making
are
delivered
in a timely
fashion
[2].
vanced
middleware
services
that provide
urgent computing capabilities [1, 15], so that results of
are This
delivered
indescribes
a timely
fashion
[2]. architecture
paper
a
reference
of
an integrated
smart levee monitoring
and
resource-intensive
data
analyses
and
simulations,
required
for decision-making
in emergencies,
This
paper support
describessystem
a reference
architecture
of
an
integrated
smartand
levee
monitoring
and
flood
decision
focusing
on
decision
support
workflows
urgent
computing
are
delivered
insupport
a timelysystem
fashionfocusing
[2].
flood
decision
on
decision
support
workflows
and
urgent
computing
capabilities.
The
presented
research isarchitecture
performed in
of the
ISMOP
[4] which
This paper
describes
a reference
of the
an context
integrated
smart
leveeproject
monitoring
and
capabilities.
The
presented
research
is performed
in
the
context
of the
ISMOP
project
[4] which
operates
a
full-scale
experimental
smart
levee
located
in
the
Lesser
Poland
region.
flood
decision
support
system
focusing
on
decision
support
workflows
and
urgent
computing
operates
a full-scale
experimental
smart levee
located
in theinLesser
Poland of
region.
Related
research
on architectures
urgent
computing
the
context
disaster
managecapabilities.
The presented
research isfor
performed
in the context
of the
ISMOP
project [4]
which
Related
research
on
architectures
for
urgent
computing
in
the
context
of
disaster
management
exists.
In
[14],
a
three-layer
architecture
for
urgent
computing
is
proposed.
Urgent
comoperates
a
full-scale
experimental
smart
levee
located
in
the
Lesser
Poland
region.
ment
exists.
In [14], aare
three-layer
architecture
for urgent
computing
iswrap
proposed.
Urgent (data
computing
requirements
fulfilled
by
so-called
urgent
managers
which
core
services
Related
research on
architectures
for urgent
computing
in the
context
ofcore
disaster
manageputing
requirements
are
fulfilled
by
so-called
urgent
managers
which
wrap
services
(data
collection,
reliability,
etc.)architecture
without disrupting
them.
SIM-CITY
[5] is an Urgent
architecture
ment
exists.
In [14], asecurity,
three-layer
for urgent
computing
is proposed.
comcollection,
reliability,
security,
etc.) without disrupting
them.
SIM-CITY
[5] is an architecture
puting requirements are fulfilled by so-called urgent managers which wrap core services (data
1
collection, reliability, security, etc.) without disrupting them. SIM-CITY [5] is an architecture
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.192

1

	

Bartosz
Balis etsupport
al. / Procedia
Computer
Science 108C (2017) 2220–2229
Smart levee monitoring and flood
decision
system
...

Balis, et. al

for urban-assisted decision support geared towards simulation-based scenario exploration. An
architecture and urgent workflow for decision support in surge flood prevention is presented
in [12]. Requested execution time is guaranteed by the CLAVIRE platform [20]. Typical approaches to urgent computing management focus on scheduling and execution of computational
jobs in order to meet the required deadlines. The novelty of our architecture lies in a holistic
approach to urgent computing management which encompasses all layers of the system, not
just those dealing with computational jobs.
The paper is organized as follows. Section 2 contains an overview of the flood decision
support workflow and components of the reference architecture. In section 3, details of the
flood decision support workflow are explained. Section 4 presents the execution management
and urgent computing features of the proposed architecture. Section 5 presents the ISMOP
system from the user’s perspective. Finally, section 6 concludes the paper.

2

System overview

2.1

Flood decision support workflow

Fig. 1 presents an abstract overview of the flood decision support workflow. In general, three
main tiers of data analysis become iteratively activated as the flood threat level increases:

Sensor
data

Threat
estimation

Risk assessment

Anomaly
detection

Anomaly
detected?

High threat?

Data flow

Control flow

High impact?

Decision support system

Figure 1: Flood decision support workflow (abstract overview).
• The first tier is anomaly detection. It is triggered periodically with a certain time interval.
Anomaly detection provides the first indication of a potential threat in a given section of
a levee. Typical methods for detecting anomalies include statistical analysis of time series
[9] or machine learning [19], possibly combined with feature extraction [10].
• The second tier is threat estimation which involves further analysis of levee sections where
anomalies have been detected, in order to assess their health and failure probability. Such
analysis is required because anomaly detection alone is usually not sufficient – e.g. due
to low reliability of results generated by the detection algorithm [19]. A typical analysis
that can be performed in this tier is levee stability simulation [13]. The result of this step
is a levee health map that can be reviewed by decision makers who then decide whether
the alert level should be raised.
• The third tier is risk assessment. This is the most computationally intensive step. It is
initiated when the end user decides to raise the alert level and switch the workflow to
2

2221

2222	

Bartosz
Balis etsupport
al. / Procedia
Computer
Science 108C (2017) 2220–2229
Smart levee monitoring and flood
decision
system
...

Balis, et. al

the urgent mode. This stage of the workflow may involve various simulations for flood
scenario prediction and impact assessment, e.g. breach growth simulation [18], inundation
simulation [16] or crowd evacuation simulation [17].

2.2

System architecture

Fig. 2 presents a high-level overview of a smart levee monitoring and flood decision support
system. The system’s three main functions are reflected in the user interface layer: real-time
monitoring of the environment (water level, temperature and pore pressure inside the levee,
etc.), flood decision support, and management of controlled flooding experiments using the
experimental smart levee (specific to ISMOP). Here we focus on the decision support aspect
implemented in middle layers responsible for workflow (business logic) and execution management (execution middleware), also called the central system. The subsystems connected to the
central system system are as follows.
User interface
Levee
monitoring

Decision
support

Experiment
management

Data management
system

Central system
Workflow (business logic)
Anomaly
detection

Threat
estimation

Risk
assessment

GIS data

Execution middleware
Urgent
computing

Resource
management

Execution
services

Metadata

Data acquisition and transmission system

Sensor data
(time series)

Results

Computing infrastructure
Dedicated computing
infrastructure

Data flow

On-demand computing
infrastructure

Control flow

Figure 2: Overview of subsystems and components of a smart levee monitoring and flood
decision support system.
1. Data management system. This system is used for data storage and data exchange
between other systems, serving as an integration layer. However, since integration between
loosely coupled systems should not normally be performed directly via a database (i.e. using
3

	

Bartosz
Balis etsupport
al. / Procedia
Computer
Science 108C (2017) 2220–2229
Smart levee monitoring and flood
decision
system
...

Balis, et. al

direct calls to a DBMS), the data management system provides a set of REST interfaces for
retrieving and writing data.
2. User interface. The user interface interacts with the central system in two ways.
First, some actions invoked by the user control the workflow. Second, the results of computations coordinated by the central system are visualized in the user interface. In both these
cases the relevant data exchange is carried out through the data management system. System
implementation details are described in Section 3.
3. Computing infrastructure. This layer represents the computing resources used to run
both the core software components of the system, and the computational modules performing
data analyses in the decision support workflow. We distinguish two computing infrastructures:
the dedicated infrastructure where core system components and lightweight computations are
executed, and the cloud (on-demand) infrastructure used for urgent computing in high-risk
situations.
4. Data acquisition and transmission system. This is an external system responsible
for collection of data from sensors and transmission to the data management system [7]. As
far as data flow is concerned the central system is completely isolated from this system by the
data management layer. However, the central system needs to have certain limited capability
to control the data acquisition and transmission system. This requirement stems from the fact
that the entire system can operate in either normal or urgent mode. The transition to the
urgent mode is initiated by the end user in which case the central system needs to request
the data acquisition and transmission system to enter the urgent mode in order to increase
data sampling and transmission rates. Our architecture introduces the Holistic Computing
Controller [4, 6] which optimizes system parameters in the urgent mode while also serving as
an indirect integration component. Further details are provided in Section 3.

3

The flood decision support workflow: details and implementation

Fig. 3 presents the proposed implementation of the flood decision support workflow. The
workflow can run in multiple instances, each scoped to a certain area of interest, i.e. a floodendangered region protected by smart levees. Levees are logically partitioned into sections
which are the smallest units subject to real-time health assessment. It is worth noting that the
proposed workflow is generic and can be applied to other decision support systems involving
urgent computing in the context of disasters, both natural and manmade.
The workflow involves seven steps. Step 1 is triggered periodically and its purpose is to
initiate anomaly detection tasks for all levee sections in the area of interest. Consequently, step
1 initiates Step 2 which consists of multiple parallel tasks. Anomaly detection algorithms are
relatively inexpensive in computational terms and can be executed on a small-scale dedicated
computing infrastructure. The results of anomaly detection are saved in the data management
system.
Step 3 of the workflow performs threat estimation computations. While these computations are computationally more expensive than anomaly detection, they are limited in scope
to individual levee sections, so the resulting computational tasks may still be light enough to
be computed on a dedicated infrastructure. For each levee section where anomaly has been
detected, an individual threat estimation task is created.
Step 4 involves decision making by humans who review levee health maps and assess the
situation. If the estimated threat is high, users may decide to switch the area of interest into
4

2223

2224	

Bartosz
Balis etsupport
al. / Procedia
Computer
Science 108C (2017) 2220–2229
Smart levee monitoring and flood
decision
system
...

Balis, et. al

Area of interest R in scope of the workflow,
contains many levee sections (a, b, )

Area of
interest

Periodic
trigger

Legend
DSS workflow
step

2. Detect
anomalies
anomalies
(section a)

1. Generate
tasks

Info about levee sections
in the area of interest R

Latest sensor data from
sensors in section a

3. Estimate
Estimate threat
threat
(section b)
Anomaly
detected in
section b

Anomaly info
for section a

Threat level for
section b

Data flow

Latest sensor data
from sensors
in section b

Control flow
Sensor
data

Data management system

Visualizations

Results of
simulations

6. Perform
simulations

7. Decision
making
Decision support
system

On-demand computing
infrastructure

Urgent mode
detected for
Area R
Deploy

External
system
Event occurring
in extermal system

Set urgent mode
for Area of
interest R

5. Prepare urgent
computations
(Area c)

Data acquisition
and transmission
system
Reconfigure

Threat levels

Holistic
Computing
Controller

4. Decision
making
Decision support
system

Enter urgent
mode for
Area R

Figure 3: Implementation of the Flood Decision Support workflow.
the urgent mode in order to perform risk assessment.
This triggers Step 5 which prepares the urgent computations, i.e. deploys an execution
environment for simulations in a cloud infrastructure. Details of this process are described in
section 4. Urgent computing involves more than the computing infrastructure and execution
subsystem. For example, in the urgent mode the sampling and transmission rates in the sensor
network may be increased in order to enhance data analysis and simulation accuracy. Consequently, we introduce the concept of Holistic Computing Controller (HCC) which monitors
the state of all involved subsystems and is capable of controlling their configurations in order
to maintain the desired QoS (Quality of Service) parameters of all subsystems, depending on
the current mode of operation (urgent or normal). For example, in the urgent mode timeliness
of results is crucial, while in the normal mode low cost of operation has priority. When the
mode changes, the HCC performs multi-objective optimization in order to calculate and deploy
configurations optimal in the current context. Details of these algorithms are described in [4].
The urgent simulations are performed in Step 6. Their results are reviewed in Step 7
which may lead to further decisions including evacuation of the affected area.

4

Execution management and urgent computing

Fig. 4 shows the ISMOP execution management subsystem, comprised of components running
continuously on a dedicated computing infrastructure: (1) services initiating three tiers of data
analysis, and (2) resource management and urgent computing services; and (3) Execution platform components deployed on demand in the cloud along with domain computational modules.
In each case required input data is retrieved from the data management system, where results
of computations are also saved.
Tier 3 analysis is activated, as explained earlier, by the user’s decision to set the area of
5

Smart levee monitoring and flood
decision
system
...
Bartosz
Balis etsupport
al. / Procedia
Computer
Science 108C (2017) 2220–2229

Balis, et. al

Resource management and urgent computing services
User Interface
(Decision support
system)

Anomaly Detection Service
(Tier 1)
Anomaly
Anomaly
Detection
Detection

Execution
Planner

Provisioner

Autoscaler

Deployment

Execution Platform VM

Threat estimation service
(Tier 2)
Threat
assessment

Data Management
System

Workflow
engine

Scheduler

Message
Results queue
queue

Job queues

Monitoring

Simulation service (Tier 3)
Simulation
deployment
Dedicated computing infrastructure

Executor
Input
data files

App VMs

Holistic Computing Controller

	

App
executables

On-demand (cloud) computing infrastructure

Figure 4: ISMOP execution management subsystem architecture.
interest to the urgent mode. When this happens, the Execution planner orchestrates the deployment of the Execution platform in the cloud. First, it generates a graph of tasks (workflow) that
need to be performed. Subsequently, it analyzes the graph and calculates the initial number of
application VMs that need to be allocated in the cloud in order to meet the requested deadline
specified in the Decision Support System [2]. The outcome is a deployment plan passed to the
Provisioner component which spawns VM instances and launches the embedded components
of the Execution platform.
Workflow execution is coordinated by the HyperFlow workflow engine [3] along with the
Scheduler component which plans the allocation of workflow tasks to application VMs on which
the computational modules are deployed, taking into account load balancing and data locality.
The Executor component invokes the computational modules (App executables), taking care of
data transfer to/from the data management system and communication with the HyperFlow
engine.
Communication between components is performed through the following message queues:
• Job queue (one for each App VM). This queue is used by Executors to fetch task execution
requests from the Scheduler. Such requests should contain a unique task ID, a command
to be invoked in the OS shell, and the location of input data (typically file paths).
• Results queue (one for the entire Execution platform). This queue is used by the Executors
to send messages about completion of tasks. These messages contain the ID of the original
task, return code (success or error code) and (when successful) location of the output data
which can be a file path, a database entity ID, or a HTTP URI. In some cases the message
may directly contain the value of the output instead of its location.
• Monitoring queue (one for the entire Execution platform). In this queue both the Executors and the Workflow engine, publish execution monitoring events and performance
metrics, such as task start/completion times, CPU load on the App VMs, number of tasks
waiting in message queues, etc.
6

2225

2226	

Smart levee monitoring and flood
decision
system
...
Bartosz
Balis etsupport
al. / Procedia
Computer
Science 108C (2017) 2220–2229

Balis, et. al

The latter queue is used by the Autoscaler component which periodically evaluates whether
the requested deadline is on track to be net. Based on the outcome of this evaluation, Autoscaler
may decide to scale the infrastructure up (by adding more App VMs), or down (by removing
existing App VMs). In either case, these decisions are enacted by the Provisioner.
Finally, the role of the Holistic Computing Controller (HCC) is to set configuration policies
for relevant subsystems and their components, depending on the mode of operation (urgent or
normal). For example, some configuration parameters controlled by the HCC include a data
processing interval which dictates how often data analyses (e.g. levee health assessment) should
be repeated, along with a scheduling policy which specifies whether the execution of computational workflows should be optimized towards cost or turnaround time.

5

Case study: the ISMOP smart levee monitoring and
decision support system

The goal of the ISMOP project is to develop an integrated smart levee monitoring and flood
decision support system. To this end, a full-scale test smart levee has been constructed (Fig. 5)
and instrumented with about 2000 sensors measuring water levels, weather conditions, ground
temperature, pore pressure and other parameters. The levee serves as a laboratory for controlled
flooding experiments which assess the behavior of the levee itself, validate models, as well as
investigate other involved systems, including sensors and the IT infrastructure.

Figure 5: The ISMOP experimental smart levee.
The graphical user interface of the ISMOP system provides insight into the current and
past levee state in the form of custom charts showing distribution of levee parameters over time
(time series charts) or space (horizontal and vertical cross-sections, neighboring sensors chart).
In particular, the GUI supports real-time monitoring of current controlled flooding experiments
and exploration of past experiments. Fig. 6 shows an example Experiment view in the user
interface. Each experiments spans a specific interval (typically 3-7 days) during which a certain
flood wave shape is reproduced, comprising at least three periods: rising water phase, plateau
(of arbitrary length), and receding water phase. An automated pump control system ensures
7

	

Bartosz Balis et al. / Procedia Computer Science 108C (2017) 2220–2229
Smart levee monitoring and flood decision support system . . .

2227
Balis, et. al

that the actual flood wave matches the projected profile. Sometimes discrepancies may occur
due to extraordinary conditions (e.g. a leakage) in which case they are visible in the interface
and can be manually corrected (either by reprogramming the pump control system or adjusting
the drain valve).

Start date of the
experiment

Slider to select a point in
time (reflected on all charts)

Peaks occur due to heating
of the fibre sensor

End date of the
experiment

Flood wave shape
reproduced in the
experiment

Custom chart showing pore
pressure and temperature
in selected sensors, and
water level during the
entire experiment

Experimental
levee overview

Location of
temperature and
pore pressure
sensors shown in
the chart

Figure 6: ISMOP GUI – experiment overview.
During experiments, particular attention is devoted to potential leaks in the levee. Horizontal holes in the levee structure have been drilled to induce such leaks under certain conditions.
Data collected during such events is particularly valuable for research purposes, e.g. training
and validation of algorithms. Anomaly detection regularly performed by the central system
allows for detecting potential leaks and their location. As soon as this happens, persons supervising the experiment are notified via e-mail and a text message in order to visually confirm the
location of the leakage and – if necessary – abort the experiment by immediately commencing
the drain phase.
In addition to anomaly detection, a simple threat estimation is also performed. The algorithm is based on scenario identification [8], i.e. pre-computed scenarios simulating the levee
behavior for various initial and boundary conditions. The current levee state in a given section is
then compared with the scenario database in order to find the best match. If the best-matching
scenarios predict levee failure, the flood threat level for the given levee section is increased. The
results are shown on a levee health map, presented in Fig. 7.

6

Conclusion

We have presented a reference architecture for a smart levee monitoring and flood decision
support system, focusing on the decision support workflow and urgent computing management.
The presented architecture and workflow is generic, so that it can be adapted to other applications related to real-time environmental monitoring and disaster management. The unique
feature of the architecture is the holistic approach to urgent computing management which
encompasses all layers of the system, rather than focusing on execution and scheduling of com8

Bartosz Balis et al. / Procedia Computer Science 108C (2017) 2220–2229

2228	

Smart levee monitoring and flood decision support system . . .

Balis, et. al

Point in time for which the
health map is visualized.

Levee overview
with green, yellow
and red colors
indicating health
of sections.

Figure 7: ISMOP GUI – levee health map.
putational jobs. The architecture has been implemented in the ISMOP smart levee monitoring
and flood decision support system.
Future work involves further research and development of the infrastructure, including experimental study of advanced performance models for urgent computing, and investigation of
public cloud computing infrastructures for the same purpose.

Acknowledgments
This work is partially supported by the National Centre for Research and Development
(NCBiR), Poland, project PBS1/B9/18/2013; and by AGH University of Science and Technology, Faculty of Computer Science, Electronics and Telecommunications, statutory project
no. 11.11.230.124.

References
[1] B. Balis, M. Kasztelnik, M. Bubak, T. Bartynski, T. Gubala, P. Nowakowski, and J. Broekhuijsen.
The UrbanFlood Common Information Space for Early Warning Systems. Procedia Computer
Science, 4:96–105, 2011.
[2] B. Balis, M. Kasztelnik, M. Malawski, P. Nowakowski, B. Wilk, M. Pawlik, and M. Bubak. Execution management and efficient resource provisioning for flood decision support. Procedia Computer
Science, 51:2377–2386, 2015.
[3] Bartosz Balis. Hyperflow: A model of computation, programming approach and enactment engine
for complex distributed workflows. Future Generation Computer Systems, 55:147 – 162, 2016.

9

	

Smart levee monitoring and flood
decision
systemComputer
...
Bartosz
Balis support
et al. / Procedia
Science 108C (2017) 2220–2229

Balis, et. al

[4] Bartosz Balis, Robert Brzoza-Woch, Marian Bubak, Marek Kasztelnik, Bartosz Kwolek, Piotr
Nawrocki, Piotr Nowakowski, Tomasz Szydlo, and Krzysztof Zielinski. Holistic approach to management of IT infrastructure for environmental monitoring and decision support systems with
urgent computing capabilities. Future Generation Computer Systems, 2016. In press.
[5] Joris Borgdorff, Harsha Krishna, and Michael H Lees. Sim-city: An e-science framework for urban
assisted decision support. Procedia Computer Science, 51:2327–2336, 2015.
[6] R. Brzoza-Woch, M. Konieczny, B. Kwolek, P. Nawrocki, T. Szydlo, and K. Zielinski. Holistic approach to urgent computing for flood decision support. Procedia Computer Science, 2015.
Proceedings of the International Conference on Computational Science, ICCS 2015.
[7] Robert Brzoza-Woch, Marek Konieczny, Piotr Nawrocki, Tomasz Szydlo, and Krzysztof Zielinski.
Embedded systems in the application of fog computing – levee monitoring use case. In 11th IEEE
Symposium on Industrial Embedded Systems, SIES 2016, pages 238–243, 2016.
[8] M. Chuchro, M. Lupa, A. Pieta, A. Piórkowski, and A. Leśniak. A Concept of Time Windows
Length Selection in Stream Databases in the Context of Sensor Networks Monitoring. In New
Trends in Database and Information Systems II, volume 312, pages 173–183. Springer, 2015.
[9] M Chuchro, M Lupa, K Szostek, B Bukowska-Belniak, and A Leśniak. Detection of potential
anomalies in flood embankments. In Environmental Engineering, pages 33–42. CRC Press, 2016.
[10] Wendy D Fisher, Tracy K Camp, and Valeria V Krzhizhanovskaya. Anomaly detection in earth
dam and levee passive seismic data using support vector machines and automatic feature selection.
Journal of Computational Science, 2016.
[11] Victor Hopman, Pauline Kruiver, André Koelewijn, and Ton Peters. How to create a smart levee.
In Proc. 8th international symposium on field measurements in GeoMechanics, pages 12–16, 2011.
[12] Sergey V Ivanov, Sergey S Kosukhin, Anna V Kaluzhnaya, and Alexander V Boukhanovsky.
Simulation-based collaborative decision support for surge floods prevention in st. petersburg. Journal of Computational Science, 3(6):450–455, 2012.
[13] V.V. Krzhizhanovskaya, G.S. Shirshov, N.B. Melnikova, R.G. Belleman, F.I. Rusadi, B.J.
Broekhuijsen, B.P. Gouldby, J. Lhomme, B. Balis, M. Bubak, A.L. Pyayt, I.I. Mokhov, A.V.
Ozhigin, B. Lang, and R.J. Meijer. Flood early warning system: design, implementation and computational modules. Procedia Computer Science, 4:106–115, 2011. Proceedings of the International
Conference on Computational Science, ICCS 2011.
[14] Siew Hoon Leong and Dieter Kranzlmüller. A task-based ubiquitous approach to urgent computing for disaster management. In Information and Communication Technologies for Disaster
Management (ICT-DM), 2015 2nd International Conference on, pages 207–214. IEEE, 2015.
[15] Siew Hoon Leong and Dieter Kranzlmüller. Towards a general definition of urgent computing.
Procedia Computer Science, 51:2337–2346, 2015.
[16] Julien Lhomme, PB Sayers, BP Gouldby, PG Samuels, Martin Wills, and Jonatan Mulet-Marti.
Recent development and application of a rapid flood spreading method. In Flood Risk Management:
Research and Practice, page 15. CRC Press, 2008.
[17] AS Mordvintsev, VV Krzhizhanovskaya, MH Lees, and PMA Sloot. Simulation of city evacuation
coupled to flood dynamics. In Pedestrian and Evacuation Dynamics 2012, pages 485–499. Springer,
2014.
[18] MW Morris, MAAM Hassan, PG Samuels, and GS Ghataora. Development of the HR BREACH
model for predicting breach growth through flood embankments and embankment dams. In River
flow, volume 1, pages 679–688, 2008.
[19] Alexander L Pyayt, Ilya I Mokhov, Bernhard Lang, Valeria V Krzhizhanovskaya, Robert J Meijer,
et al. Machine learning methods for environmental monitoring and flood protection. World
Academy of Science, Engineering and Technology, 78:118–123, 2011.
[20] Konstantin V Knyazkov, Sergey V Kovalchuk, Timofey N Tchurov, Sergey V Maryin, and Alexander V Boukhanovsky. Clavire: e-science infrastructure for data-driven computing. Journal of
Computational Science, 3(6):504–510, 2012.

10

2229

