A Hierarchical Methodology to Specify and Simulate
Complex Computational Systems
César Andrés, Carlos Molinero, and Manuel Núñez
Dept. Sistemas Informáticos y Computación.
Universidad Complutense de Madrid, Spain
{c.andres,molinero}@fdi.ucm.es, mn@sip.ucm.es

Abstract. We introduce a novel methodology to formally specify complex multiagent systems. Our approach allows us to redefine computational problems in
terms of agents that perform certain tasks. In our view, a system is formed by the
combination of atomic and complex agents. Atomic agents are in charge of executing atomic tasks while complex agents reunite and summarize the properties
of their underlying atomic agents. Basically, our approach consists in specifying the smaller parts of the problem as atomic agents. Each atomic agent is in
charge of executing a small transformation of resources. Afterwards, the system
will recombine them to form complex agents that will embrace the knowledge
of several atomic agents. All agents are located on a superstructure of communication cellules created to record the hierarchy of the tasks. In order to provide a
useful framework, we have developed a tool that fully implements all the stages
of the methodology.

1 Introduction
Computational science embraces the concept of aiding the development of other studies
in different fields through the use of new computational means. Therefore it has to create
open systems that can be applied to a great extent of problems. In addition, it is relevant
to take into account that the people to which computational science is directed are not,
in general, computer scientists. Therefore, its easiness of use is a must. In this paper we
report on a formalism that allows to solve complex problems through the use of agents.
We propose a method to factorize the problem, being the first step to break down the
problem into the smaller parts possible and assign an agent to each of those tasks. Then,
the produced system allows to make petitions that will create other agents that, through
recombination, are able to condense the information of several agents, so that they can
solve a complex situation.
This paper extends and enhances our previous work presented in [1]. We have simplified some of the notations, so that the resulting formalism is much easier to use.
Although we have simplified our approach, the expressive power of the framework
remains the same, being able to solve the same problems that we confronted in [1].
Even though there are general purpose formalisms to formally describe complex
concurrent systems (such as Process Algebras and Petri Nets) they are not suitable to
Research supported by the Spanish MEC project WEST/FAST (TIN2006-15578-C02-01).
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 347–356, 2009.
c Springer-Verlag Berlin Heidelberg 2009

348

C. Andrés, C. Molinero, and M. Núñez

describe agents since these languages and notations do not provide specific operators
to deal with the inherent characteristics of agents. However, there has been already several studies to formally describe the use of intelligent electronic agents that are nested
into one another (see, for example, [2,3] for two approaches based on Petri Nets and
automata, [4,5] for approaches based on process algebras, and [6,7] for approaches
based on finite state machines). Most of these approaches have been created in favor
of comprehensibility. Therefore they facilitate to derive and apprehend new properties.
However, due to its complexity, these formalisms are not supported by suitable userfriendly tools. Thus, the specification of a system is a task that cannot be carried out by
somebody that is not a real specialist in formal methods.
Our approach is able to assimilate the systems that we are interested in to a common
places structure in which one is able to locate the rest of the structure from higher order
points. If we use the subway lines as a metaphor, we only need to know the location of
the different stations, but the exact location of that small fruit shop that we are trying
to reach is bounded to the location of the closest metro station. Once we arrive to that
particular metro station, we will check the neighborhood map so that we can find the
shop; we do not need to know in advance all the local maps associated with all the
stations of the network. This is how our systems will work: Once we have all the atomic
agents, each time that a new complex agent, embracing the knowledge of several atomic
agents, is created we will refer to this new agent when making subsequent calls to the
system. In this line, we are able to forget how atomic actions are performed because
we have a higher order element to which we can call upon. In any case, even with a
complex structure, atomic agents are still the ones that execute real tasks.
Using another metaphor we could say that our approach produces systems that are
similar to economic structures in which there exist intermediate agents that gives us the
result of the transformation of resources as a final product. These agents, in a hidden
way, contract the prime manufacturers that create these resource transformations. Another point in favor of our approach is that it allows us to have an unbounded growth
(equivalently, subdivisions as small as needed) either by adding agents in between existing ones or by assigning new atomic agents to the system that we had before. It is
important to note that the way our systems are subdivided, in so called communication
cellules, facilitates their deployment in a distributed system in which one can obtain a
perspective of variable magnitude of the global tasks. This holds as long as we keep the
hierarchical structure of the ensemble.
The rest of the paper is organized as follows. In Section 2 we introduce some auxiliary notation. Section 3 represents the bulk of the paper. There we define the syntax of
the proposed formalism, giving a running example of a system implemented with our
tool. In Section 4 we briefly describe the technical details of the architecture of the tool
developed to specify the systems. Finally in Section 5 we present our conclusions.

2 Preliminaries
In this section we introduce some notation that will be used throughout the rest of the
paper. First, since users have different preferences, in order to properly design agents the
first step consists in expressing these preferences. In order to extract preferences from

A Hierarchical Methodology to Specify and Simulate

349

users several mechanisms have been presented in the literature (see [8,9,10]). In this
paper, preferences in a given moment will be given by a utility function. These functions
associate a value (a utility measure) with each possible combination of resources a user
could own. Alternatively, other mechanisms such as preference relations could be used
(see e.g. [11] for conditions to transform one of the possibilities into the other).
In order to manage resources we will denote them as elements of a vector x
¯. We
consider a special resource to record the performance of the system. The time that it
takes to complete the tasks of the system will also be considered as another resource. A
vector of resources is a vector of real numbers in which each number denotes the total
amount of a specific resource. Along this paper we consider that n is the number of
resources of the system.
Definition 1. Let x
¯ ∈ IRn be a vector. We have that xi represents the i-th component
of x
¯. Let x
¯, y¯ ∈ IRn be two vectors. We write x
¯ + y¯ to denote the addition of x¯ and y¯.
We say that q¯ is the addition of x
¯ and y¯ if 1 ≤ i ≤ n we have qi = xi + yi .
We denote by ¯
0 ∈ IRn the vector having all the value components equal to zero. We
write x¯ ≤ y¯ if for all 1 ≤ i ≤ n we have xi ≤ yi .
A utility function is defined as any function f u : IRn → IR. We denote the set of all
utility functions by F .
Intuitively, given a utility function f u , We say that f u (¯
x) > f u (¯
y ) means that x¯ is
preferred to y¯. For instance, if we have x¯ = (x1 , x2 ) representing the first element of
the resource vector the number of apples and the second element the number of oranges, f u (¯
x) = 3 · x1 + 2 · x2 , means that, for example, the agent is equally happy
owning 6 apples or 9 oranges. Let us consider another agent whose utility function is
x) = 1 · x1 + 2 · x2 . Then, both agents can make a deal if the first one gives 3
f u (¯
oranges in exchange of 4 apples: After the exchange both are happier. Alternatively, if
x2 represents the amount of money instead of oranges then the first agent would be a
customer while the second one might be a vendor. Utility functions allow a great exx) = x1 ·x2 denotes that variety is preferred.
pressivity in preferences. For instance, f u (¯
A usual assumption is that no resource is a bad, that is, if the amount of a resource is increased, so does the value returned by the utility function. Using a derivative expression,
u
1 ,...,xn )
≥ 0 for all x1 , . . . , xn ∈ IR
this property can be formally expressed as Δf (xΔx
i
and 1 ≤ i ≤ n. This requirement does not constrain the expressive power of utility functions, as the existence of any undesirable resource can be always expressed by
considering a resource representing the absence of it.
Next we introduce a collection of identifiers to be able to univocally identify cellules, agents and paths in the system. In the next section, we will formally define these
concepts.
Definition 2. Let w be a system (see Definition 8). The set of all possible systems is
represented by W. We denote by IDC the set of cellule identifiers that are assigned
uniquely to each of the cellules. The function newIdCellule : W → IDC returns an
unused identifier for the world w. We use a special identifier nill ∈ IDC to denote an
empty cellule. We denote by IDA the set of agent identifiers that are assigned uniquely
to each of the agents belonging to the system. The function newIdAgent : W → IDA
returns an unused identifier for an agent. We denote by IDP the set of path identifiers,

350

C. Andrés, C. Molinero, and M. Núñez

that are assigned uniquely to each of the paths. The function newIdPath : W → IDP
returns a fresh identifier for a path.

3 Definition of the Formalism
In this section we present our formal language to specify complete systems as well as
all the agents taking part in them. The basic notion to define the behaviour of agents is a
transition, that is, a transformation of resources carried out by a specific agent. Atomic
and complex agents will both hold transitions as a way to accomplish tasks, but only
atomic agents will actually perform the transformation of resources. A transformation
of resources is represented by a tuple z¯ ∈ IRn . Intuitively, a positive component of
the tuple xi unit of the i-th resource while a negative component xj denotes that the
transition consumes xj units of the j-th resource.
Definition 3. A transition of the system is represented by the tuple (¯
z , idp ) where z¯ ∈
IRn is the transformation of resources and idp ∈ IDP identifies the path that is in charge
of executing the transition. The set of all transitions is denoted by TR.
A path is a sequence of transitions. It is conformed of transitions, in a specific order,
through concatenation. Paths allow to specify the situation where a complex agent has
to execute several consecutive tasks.
Definition 4. A path is a sequence of transitions. If tr1 , . . . , trm ∈ TR then p =<
tr1 , . . . , trm > represents the path conformed by them. We have that pi denotes the i-th
element of the path, that is the transition tri . The set of all paths is denoted by P. We
can inductively define paths as follows:
– <>∈ P.
– If tr ∈ TR and p ∈ P then tr · p ∈ P.
Thus, paths are either empty or are conformed by adding an element to a path.
Next we show how to represent agents. We can distinguish between complex and atomic
agents. Atomic agents assume the responsibility of actually implementing tasks, and
complex agents cluster and delegate in the ulterior ones to accomplish complex tasks
and summarize the properties of the agents that are implicity inside of them.
Definition 5. An agent is a tuple a = (id, ib, P ) where id ∈ IDA is a unique identifier
for this agent, ib ⊆ M is the input buffer where messages will be stored, and P ⊆
P × IDP is the set of paths defining the possible behaviours of this agent, being each
path labeled with an identifier. Intuitively, the meaning of this set of paths is that this
specific agent will achieve through any of this paths a similar global transformation of
resources. In other words, every path takes him from the same initial state towards a
similar final state, differing one from each other in the kind of transformations that they
perform.

A Hierarchical Methodology to Specify and Simulate

351

We denote by A the set of all agents. We define the function VTr : IDP → P as
β
α
follows. Let P = {(< tr1α , . . . , trm
>, α), (< tr1β , . . . , trm
>, β), . . .} be a set of paths.
α
We define VTr(α) =< tr1α , . . . , trm
>. We also define the function VA : IDP → IDA
that returns the agent that performs this path.
β
α
>, α), (< tr1β , . . . , trm
>
Let a = (id, ib, P ) be an agent and P = {(< tr1α , . . . , trm
n
P
, β), . . .} be the set of paths of agent a. We define the function VP : ID → IR using
the auxiliary function VPAux : P × IDA → IRn as VP(α) = VPAux(VTr(α), VA(α))
being defined as:

VPAux(<>, id) = ¯
0

VPAux(< tr1 , tr2 , . . . , trn >, id) = z¯ +

⎧
VPAux(< tr2 , . . . , trn >, id) if tr1 = (¯
z , idp )∧
⎪
⎪
⎪
⎪
id
=
VA(id
p)
⎪
⎨
VPAux(VTr(idp ), VA(idp ))+ if tr1 = (¯
z , idp )∧
⎪
⎪
⎪
⎪
id = VA(idp )
⎪
⎩ VPAux(< tr2 , . . . , trn >, id)

An agent is atomic if it has only one path, that path is conformed by a single transition, and the agent itself is in charge of executing the transition. Formally, a =
(id, ib, P ) is an atomic agent if | P | = 1 and there exists p =< tr1 , . . . , trm >∈ P
such that for all 1 ≤ i ≤ m if tri = (¯
zi , idp ) then VA(idp ) = id.
During the rest of the paper we consider that agents use messages to communicate
among them. The next definition introduces the different kinds of messages that can be
sent.
Definition 6. A message is given by a tuple (t, s, ob, r¯) such that t ∈ {BROADCAST,
REPLIES, START JOB, FINISHED JOB}, denotes the nature of the message, s ∈ IDP ∪
{null} the path origin of the message. In some cases this path can have the value null.
The next item ob ∈ IDP ∪ { } is the objective of the message, it can be a specific
path of an agent, or a broadcast message. The last component, r¯ ∈ IRn represents a
transformation of resources. In the rest of this paper, we denote by M the set of all
messages.
Example 1. Let id ∈ IDA be an agent identifier, p1 , p2 ∈ IDP be paths identifier, and r¯
be a vector of resources. A message m = (BROADCAST, null, , r¯) represents a broadcast message ( ) sent by a petition wanting to find an agent that accomplish the transformation induced by r¯. If we have a message m = (REPLIES, p1 , p2 , r¯); m denotes
the message from agent VA(p1 ) that offers the path p1 , that replies to agent VA(p2 ) to
the petition of performing a certain task of the path p2 , and specifies the transformation
of resources r¯.If we have a message m = (START JOB, p1 , p2 , −), m now represents
the message from agent VA(p1 ) which is performing the path p1 for asking to start the
job to the path p2 of the agent VA(p2 ). Finally, if m = (FINISHED JOB, p1 , p2 , −), then
m is the message from agent VA(p1 ) to agent VA(p2 ) to indicate that the path p1 , which
is a sub-path of p2 , has just finished.
Cellules are elements that serve as baskets of agents to reunite, organize, conglomerate
and handle petitions as well as calls to the agents.

352

C. Andrés, C. Molinero, and M. Núñez

Definition 7. A cellule is a tuple (A, id, Sons, Father, ib) where
– A ⊆ IDA is the set of agents that belong to the cellule.
– id ∈ IDC is a unique identifier for this cellule.
– Sons ⊆ IDC is the set of identifiers of the sons of this cellule. If Sons = ∅ then
we are in a node cellule.
– Father ∈ IDC is the identifier of the cellule that is father of this cellule. If Father=nill then we are in the initial cellule, from which all other cellules are defined.
– ib ⊆ M is the input buffer where messages will be stored.
We denote by C the set of all cellules.
Next, we define the whole system that contains in a tree like structure implicity defined
by the father-son relationship, the cellules that conform the whole system.
Definition 8. We say that our system (sometimes called world) is defined with a so
called origin cellule from where the tree of cellules hang and by the vector of resources
available in the system. Therefore, a system is a pair w = (c, x¯) where c ∈ IDC is the
origin cellule, and x¯ is the set of resources with which we deal in this world x¯ ∈ IRn .
We will use a running example to illustrate previously introduced concepts. In order
to ease the presentation, we have simplified the real system that we have represented in
our formalism.
Example 2. Let us consider that we have the world represented in Figure 1. As we
observe in the figure, we have six cellules, labeled from I to V I and eight agents distributed in them. For example, let us consider agent a3 = (id3 , ib3 , P3 ). P3 is the set
of paths that this agent can perform, ib3 represents the input buffer of this agent and
id3 is the identifier of this agent. The set of paths P3 contains a unique pair (pair, path
za , κ) >, κ)}. The path identifier is κ the first element of the pair
identifier) P3 = {(< (¯
represents the chain of transitions that compose this path. In this case the path is formed
by a unique transition. This transition, < (¯
za , κ) > represents that it is performed by
the path κ of the agent id3 = VA(κ) and the exchange of resources after performing
this transition is noted by z¯. This means that the resources of the world will change by
applying x
¯←x
¯ + z¯a , in other words, it will generate a formwork unit, by wasting 50
units of money, 40 units of wood, and 20 time units.
For example let us suppose that agent a1 = (id1 , ib1 , P1 ) has two different paths.
zg , μ) >, α) and (< (¯
zh , κ), (¯
0, ν) >, β). Next we explain one of these
(< (¯
zg , κ), (¯
paths. The path identified by α, has two transitions in it. The first transition, denoted by
(¯
zg , κ), represents that this agent has to call to the α-path of agent VA(κ) to perform it,
and the transformation of resources by applying this transition is x
¯ ← x¯+¯
zg . Then, after
performing this transition the resources of the world would change to x
¯←x
¯ + z¯a + z¯g .
Let us remember that the agent id3 = VA(κ) transformation function for the path κ is
z¯a . Let us note that the agent performing this transition earns money by calling another
agent.
All agents that are not atomic are complex, there are two ways to create agents one is to
insert an atomic agent during the creation of the system and the other is through petitions to the system, being the system in charge of recombining atomic and/or complex
agents already embedded in the system to create a new complex agent.

A Hierarchical Methodology to Specify and Simulate

Fig. 1. Representation of a world

353

354

C. Andrés, C. Molinero, and M. Núñez

Celli+1

Cell0

World
exists y¯ ?

Petition(¯
y)

World

new petition

exchange

create/call agent

exists y¯ ?

return agent

yes/no

start job agent

yes/no

(a) New Petition

Cell0

World

(b) Identification phase

job ﬁnished

(c) Job phase

Fig. 2. Schematic diagrams of world behaviour

Definition 9. We say that a petition is a tuple pet = (f u , y¯, o¯) where f u ∈ F is a
utility function, y¯ ∈ IRn is the vector of resources that is added to the resources already
existing in the world, and o¯ ∈ IRn is the objective of the transitions, that is, the vector
of resources that we expect to have after performing the petition.
Intuitively, if we have a petition pet = (f u , y¯, o¯) is a petition, and a = (id, ib, P ) is
the agent that has created the petition, if ∃ p ∈ TR such that exists (p, idp ) ∈ P :
VP(idp ) + x¯ + y¯ ≥ o¯.
We will explain the main messages by applying a petition (see a graphical representation in Figure 2). Let us consider a petition pet = (f u , y¯, o¯). The first component of
pet contains the initial resources, y¯ = [1000, 500, 500, 100, 0, 100, 0, 0, 500], the second one is a utility function (in this case f u = 10 · x1 + 5 · x9 ), and the third element
is the objective tuple of resources o¯ = [0, 0, 0, 0, 1, 0, 1, 0, 0].
The first diagram of Figure 2 denotes that pet = (f u , y¯, o¯) is inserted in the world
w = (I, x¯). When a new petition is inserted in the world, the resources of the petition
are added to the existing vector of resources. After this initial stage, the world “asks”
to its structure of cellules if there are any agent(s) which can achieve the objective
function o¯.

4 Implementation
In this section we present our tool that facilitates the task of representing the different
components of our framework. First, we are going to enumerate some of the technical
requirements of the tool. Next, we will comment on some relevant parts of the implementation, and we will show how the example can be represented.
The tool has been developed using J2EE Technology (Java, JDK 1.5, EJB) and the
Netbeans software. It makes usage of MVC architecture, to enable ease of maintenance,
and uses session facade and proxy design patterns. It also uses Java Swing components
in order to develop Graphical User Interfaces(GUI).
The tool offers four different ways to create systems. The first one is by using an input
XML-formatted file which contains all the description data of the system. Another way

A Hierarchical Methodology to Specify and Simulate

355

to introduce a model is by using Java Database Connectivity (JDBC). JDBC is an API
for the Java programming language that defines how a client may access a database. It
provides methods for querying and updating data in a database. The third way to input a
system is by using the editor included in the GUI. The user may customize the editor and
make sure the Editor Presentations command group is checked under the Commands
tab. The last way to create systems is by loading serializable models saved previously.
Serializability of a class is enabled by the class implementing the java.io.Serializable
interface. By using an MVC design, the system can easily make it. When a model is in
the tool, it can be also saved in the same ways, by using an XML formatted file, in a
database, and by serialization of the model.
For the representation of the world, cellules, and agents we have used threads. A
java.lang. Thread object maintains bookkeeping and control for this activity. In fact,
by representing each of the components by using threads we let the system represent a
more realistic world. For example agent a1 can be waiting until agent a3 has finished
its task, while the world continues receiving petitions, and the cellules continue sending messages between the agents. The tool also introduces priority among the threads.
Each Thread has a priority, ranging between 1 and 10. Priorities have no other impact
on semantics or correctness. In particular, priority manipulations cannot be used as a
substitute for locking. Priorities can be used only to express the relative importance or
urgency of different threads, being these priority indications useful to take into account
when there is heavy competition among threads waiting to be executed. For example
the initial cellule normally has bigger priority than other cellules; the reason is that
management of petitions and the data traffic flow is mainly done through this cellule.
Another important task in a concurrency scheme is the management of shared memory, being the buffers implemented as circular buffers using a single, fix size. Circular
buffers are also used for data transfer between processes. The tool uses monitors in theses buffers to synchronize accessing threads. Conceptually, a monitor is a class whose
data members are private and whose member functions are implicitly executed with
mutual exclusion. In addition, monitors may define waiting conditions that can be used
inside the monitor to synchronize the members functions.

5 Conclusions and Future Work
The work presented in this paper provides a useful framework for the developing of
complex computational systems. With the presentation of the tool we offer the possibility of use to specialists from different fields, not being constrained its applicability to
the field of computing technology and therefore being useful as a computational science
tool.
The work will be extended to allow testing and checking of conformance of the system implemented with it. Other future line of work will be to develop the structure of the
cellules in an AVL tree-like structure, so that the message flow will be re-equilibrated.
Another possible continuation of the work will be to specify and implement the subdivision of cellules when the number of agents that they withholds surpasses a limit,
this allows not to surcharge a specific computational resource in which the cellule may
be implemented, like a specific processor, and derive its work flow to another resource.

356

C. Andrés, C. Molinero, and M. Núñez

Finally, we are currently working on a complex application of our methodology to the
construction world.

References
1. Andrés, C., Molinero, C., Núñez, M.: A formal methodology to specify hierarchical agentbased systems. In: 4th Int. Conf. on Signal-Image Technology & Internet-based Systems,
SITIS 2008, pp. 169–176. IEEE Computer Society Press, Los Alamitos (2008)
2. Lomazova, I.: Communities of interacting automata for modelling distributed systems with
dynamic structure. Fundamenta Informaticae 60(1-4), 225–235 (2004)
3. Lomazova, I.A.: Nested Petri Nets for Adaptive Process Modeling. In: Avron, A., Dershowitz, N., Rabinovich, A. (eds.) Pillars of Computer Science. LNCS, vol. 4800, pp. 460–
474. Springer, Heidelberg (2008)
4. Núñez, M., Rodríguez, I.: PAMR: A process algebra for the management of resources in concurrent systems. In: 21st IFIP WG 6.1 Int. Conf. on Formal Techniques for Networked and
Distributed Systems, FORTE 2001, pp. 169–185. Kluwer Academic Publishers, Dordrecht
(2001)
5. Núñez, M., Rodríguez, I., Rubio, F.: Formal specification of multi-agent e-barter systems.
Science of Computer Programming 57(2), 187–216 (2005)
6. Núñez, M., Rodríguez, I., Rubio, F.: Specification and testing of autonomous agents in ecommerce systems. Software Testing, Verification and Reliability 15(4), 211–233 (2005)
7. Merayo, M., Núñez, M., Rodríguez, I.: Formal specification of multi-agent systems by using EUSMs. In: Arbab, F., Sirjani, M. (eds.) FSEN 2007. LNCS, vol. 4767, pp. 318–333.
Springer, Heidelberg (2007)
8. Dastani, M., Jacobs, N., Jonker, C., Treur, J.: Modelling user preferences and mediating
agents in electronic commerce. In: Sierra, C., Dignum, F.P.M. (eds.) AgentLink 2000. LNCS,
vol. 1991, pp. 163–193. Springer, Heidelberg (2001)
9. Geisler, B., Ha, V., Haddawy, P.: Modeling user preferences via theory refinement. In: 5th
Int. Conf. on Intelligent User Interfaces, IUI 2001, pp. 87–90. ACM Press, New York (2001)
10. Ha, V., Haddawy, P.: Similarity of personal preferences: Theoretical foundations and empirical analysis. Artificial Intelligence 146(2), 149–173 (2003)
11. Mas-Colell, A., Whinston, M., Green, J.: Microeconomic Theory. Oxford University Press,
Oxford (1995)

