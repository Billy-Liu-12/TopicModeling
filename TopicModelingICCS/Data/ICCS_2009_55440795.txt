A Domain Decomposition Based Parallel Inexact
Newton’s Method with Subspace Correction for
Incompressible Navier-Stokes Equations
Xiao-Chuan Cai1 and Xuefeng Li2
1

Department of Computer Science, University of Colorado at Boulder
Boulder, CO 80309
cai@cs.colorado.edu
2
Department of Mathematics,
Loyola University New Orleans, New Orleans, LA 70118
li@loyno.edu

Abstract. There are two major types of approaches for solving the incompressible Navier-Stokes equations. One of them is the so-called projection method, in which the velocity ﬁeld and the pressure ﬁeld are
solved separately. This method is very eﬃcient, but is diﬃcult to be
extended to another multi-physics problem when an appropriate splitting is not available. The other approach is the fully coupled method in
which the velocity and pressure ﬁelds stay together throughout the computation. The coupled approach can be easily extended to other multiphysics problems, but it requires the solution of some rather diﬃcult
linear and nonlinear algebraic systems of equations. The paper focuses
on a fully coupled domain decomposition based parallel inexact Newton’s method with subspace correction for incompressible Navier-Stokes
equations at high Reynolds numbers. The discussion is restricted to the
velocity-vorticity formulation of the Navier-Stokes equations, but the
idea can be generalized to other multi-physics problems.

1

Introduction

In this paper we develop inexact Newton type methods [6] that use local subdomain corrections for large nonlinear systems of algebraic equations, arising from
the discretization of nonlinear partial diﬀerential equations. All systems considered in the paper have a common feature – local high nonlinearities. In other
words, the nonlinear system may have many equations, but only a small percentage of them are highly nonlinear compared to the rest of the equations. These
local high nonlinearities often correspond to boundary or interior layers, or corner singularities [3,16]. Global inexact Newton’s methods may be used to solve
the system, but often computing time is wasted since all equations are treated
equally as if they were all highly nonlinear. We introduce local zeroth- and
The research was supported in part by DOE under DE-FC02-04ER25595, and in part
by NSF under grants ACI-0305666, CNS-0420873, CCF-0634894, and CNS-0722023.
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 795–803, 2009.
c Springer-Verlag Berlin Heidelberg 2009

796

X.-C. Cai and X. Li

ﬁrst-order Jacobi method to remove the local high nonlinearities and therefore
improve the eﬃciency and the eﬀectiveness of the outer global inexact Newton’s
method [7,15], which performs well on equations with roughly the same level of
nonlinearities.
We provide numerical results to demonstrate its eﬀectiveness as compared
to the classical inexact Newton’s method. As an example, we show numerically
that the method performs well for solving the two-dimensional nonlinear driven
cavity ﬂow problem [8]. Using the velocity-vorticity formulation, in terms of
velocity u, v, and vorticity ω, the driven cavity ﬂow problem on unit square
Ω = (0, 1) × (0, 1) is
⎧
⎪
⎪ −Δu − ∂ω
=0
⎪
⎪
∂y
⎪
⎨
∂ω
(1)
−Δv +
=0
⎪
∂x
⎪
⎪ 1
∂ω
∂ω
⎪
⎪
⎩ − Δω + u
+v
= 0.
Re
∂x
∂y
Here Re is Reynolds number. The boundary conditions are:
bottom, left and right: u = v = 0; top: u = 1, v = 0.
The boundary condition on ω is given by its deﬁnition:
ω(x, y) = −

∂u ∂v
+
.
∂y
∂x

(2)

We vary the Reynolds number in the experiments. Using the usual uniform
mesh ﬁnite diﬀerence approximation with the 5-point stencil (upwinding for the
convective terms and central diﬀerencing for the other terms) we obtain a system
of nonlinear equations in the form of
F (u) = 0,

(3)

where u = (u1 , · · · , uN )T , F = (f1 , · · · , fN )T and fi = fi (u1 , · · · , uN ). Here N is
the total number of unknowns. Classical Newton type algorithms, e.g. [6], do not
assume that nonlinearities in functions f1 , · · · , fN are too much diﬀerent. This
is often ﬁne when the number of functions is small, but is not acceptable when
N is suﬃciently large. Recent experiences show that, in many large scale multiphysics problems, the nonlinearities are far from balanced. In many situations,
only a small percentage of the components of F are highly nonlinear. To improve
the eﬃciency of Newton’s methods, in this paper, we develop a locally adaptive
version of Newton’s method which uses some special treatments for the highly
nonlinear components of F .
For solving large scale problems, parallel processing is a must, and we assume
here that domain decomposition [14] is used with a partition of the vector u, as
well as F , into subdomains
uΩ1 , · · · , uΩp , and FΩ1 , · · · , FΩp .

A Domain Decomposition Based Parallel Inexact Newton’s Method

With this partition, the nonlinear system takes a block form as follows.
⎧
F1 (uΩ1 , · · · , uΩp ) = 0
⎪
⎪
⎪
⎨ F2 (uΩ1 , · · · , uΩp ) = 0
..
⎪
.
⎪
⎪
⎩
Fp (uΩ1 , · · · , uΩp ) = 0
The classical Newton’s method goes like
⎛
⎞
⎛ n ⎞ ⎛ n−1 ⎞
n−1
n−1
F1 (un−1
uΩ1
uΩ1
Ω1 , · · · , uΩk , · · · , uΩp )
⎜.
⎟
⎜ ..
⎟ ⎜ ..
⎟
⎜ ..
⎟
⎜.
⎟ ⎜.
⎟
⎜
⎟
⎜ n ⎟ ⎜ n−1 ⎟
n−1
n−1
n−1 ⎟
⎜ uΩ ⎟ = ⎜ uΩ ⎟ + J −1 ⎜
(u
,
·
·
·
,
u
,
·
·
·
,
u
)
F
⎜
⎟.
k
Ω1
Ωk
Ωp
⎜ k⎟ ⎜ k ⎟
⎜.
⎟
⎜ ..
⎟ ⎜ ..
⎟
⎜
⎟
⎝.
⎠ ⎝.
⎠
⎝ ..
⎠
n−1
n−1
unΩp
un−1
Fp (un−1
,
·
·
·
,
u
,
·
·
·
,
u
)
Ωp
Ω1
Ωk
Ωp

797

(4)

(5)

As one can tell from (5), all functions Fi participate in all iterations no matter
where the high nonlinearities are.
On the other hand, there is another well-known method called nonlinear Jacobi method[12], and its block form can be presented as follows: Let unΩ1 , · · · , unΩp
be the current approximate solution on each subdomain, then the new iteration
on subdomain Ωi , un+1
Ωi , is computed by solving
n
Fi (unΩ1 , · · · , un+1
Ωi , · · · , uΩp ) = 0,

(6)

using Newton’s method on Ωi with unΩi as the initial guess. These subdomain
problems can be solved independently. This nonlinear Jacobi method has the
perfect parallelism, and is a local method in the sense that if the output of the
subdomain function on Ωk is more nonlinear than others, then more subdomain
Newton iterations are needed only on this particular subdomain. No other subdomain needs to participate in the lengthy iterations, as the global Newton’s
method does. However, the nonlinear Jacobi method is not being used much
in practice because of its slow convergence. The focus of this paper is to combine the non-proliferation properties of Jacobi and the fast convergence of global
Newton’s methods.
For simplicity, we assume that the high nonlinearity is mainly in the area
of Ωk , and as a result, the subdomain residual function FΩk 2 is larger than
residuals in other subdomains, i.e.,
FΩk

2

≥ FΩi

2,

i = k.

In other words, the subsolution in the k th subdomain unΩk is not as good as
subsolutions in other subdomains. To improve the situation in subdomain Ωk , or
say to balance the overall nonlinearity, we could stop the global Newton iteration
temporarily and focus on subdomain Ωk using the following subdomain Newton
iterations:
n,m−1
−1
− JΩ
FΩk (unΩ1 , · · · , un,m−1
, · · · , unΩp ),
un,m
Ωk = uΩk
Ωk
k

(7)

798

X.-C. Cai and X. Li

n
with the initial guess un,0
Ωk = uΩk . Suppose Algorithm (7) converges, then the
subdomain Newton iterations will result in
n
lim un,m
Ωk = vΩk ,

m→+∞

that is

−1
n
n
n
vΩ
= vΩ
− JΩ
FΩk (unΩ1 , · · · , vΩ
, · · · , unΩp ),
k
k
k
k

which implies that

n
FΩk (unΩ1 , · · · , vΩ
, · · · , unΩp ) = 0.
k

(8)

n
, · · · , unΩp )
Now the question is whether the locally updated solution (unΩ1 ,· · ·, vΩ
k
n
n
n
is better than the non-updated solution (uΩ1 , · · · , uΩk , · · · , uΩp ) according to the
overall residual function as deﬁned in (3).
This algorithm can be extended for other multi-physics problems, such as the
semiconductor device simulation problem in [11], the ﬂuid-structure interaction
problem in [2], and the magnetic reconnection problem in [13]. However, we’ll focus on the incompressible Navier-Stokes equations in this paper for now. And the
rest of the paper is organized as follows. In Section 2, we introduce two parallel
inexact Newton’s methods with subspace correction. These algorithms are applicable for general nonlinear problems with local high nonlinearities. In Section 3,
we provide some numerical results for solving the incompressible Navier-Stokes
equations.

2

Subdomain Jacobi–Newton Methods

Suppose u
˜n is the current approximate solution from the global Newton’s method.
For many PDE problems with local high nonlinearities, the surface plot of F (˜
un )
would show a peak, say in Ωk , which is way higher than its neighboring regions.
Many more Newton iterations are needed to remove this peak. During these Newton
iterations, the components of u
˜n on subdomains Ω1 , · · · , Ωk−1 , Ωk+1 , · · · , Ωp do
not change much at all. In other words, the calculation on these subdomains is just
a waste of time.
In order to isolate and to remove the peak, it seems to be a good idea not to
use the original system (4), but to use the following nonlinear system of equations
Gn (u) = Gn1 (u), · · · , Gnp (u)
deﬁned as:

⎧ n
⎨ Gk (u) = Fk (u)
⎩

T

=0

=0

un ) = 0, i = k.
Gni (u) = Fi (u) − Fi (˜

(9)

We can clearly see that Gn (u) = 0 amounts to smoothing the worst nonlinearity
in the k th subdomain while maintaining others. That is, this approach eliminates
the worst nonlinearity without over-correcting the rest of the components.

A Domain Decomposition Based Parallel Inexact Newton’s Method

799

The only issue is that the new nonlinear system (9) is as expensive to solve as
the original system (4). In the rest of the paper, we propose two approximations
to (9). Based on these approximate peak removing algorithms, we introduce the
so-called Subdomain Jacobi–Newton (SJN) methods.
Algorithm 1 (Subdomain Jacobi–Newton Framework). For n = 1, 2, · · · ,
1. Perform the classical Newton iteration and generate a tentative iterate u
˜n .
n
0
n
u ) ≤ a , a solution is
2. Convergence test. If F (˜
u ) ≤ r F (u ) or F (˜
found, or else go to next step. Here, r and a represent the relative and
absolute machine epsilons, respectively, for the computation.
3. Inner iteration.
un ) 2 ≥ Fi (˜
un ) 2 , ∀i = k and
(a) Peak-finding. Find k such that Fk (˜
n
n
Fk (˜
u ) 2 ≥ ρ F (˜
u ) 2 where 0 < ρ < 1. If such a k does not exist, set
un = u
˜n and go back to step (1).
(b) Peak-removing. Form a new system of equations; solve it by one of the
Jacobi methods using u
˜n as the initial guess; call the solution v n .
n
un ) 2 , un = v n . Or else un = u˜n . Go
(c) Substitution. If F (v ) 2 < F (˜
back to step (1).
One can adjust parameter ρ so that only truly unbalanced nonlinearity in the
context of the problem under consideration will be treated by this process. Next,
we’ll introduce two Jacobi methods to be used with the above algorithm.
2.1

A Zeroth-Order Jacobi Method

The standard nonlinear Jacobi method on one of the subdomains can be described using the global Newton’s method on the following system:
⎧ n
= 0,
⎨ Hk (u) = Fk (u)
(10)
⎩ n
˜nΩi = 0, i = k,
Hi (u) = uΩi − u
un ) = 0 for i = k, with
i.e., it approximates the equation Gni (u) = Fi (u) − Fi (˜
Hin (u) = uΩi − u
˜nΩi = 0.
That is, it uses piecewise constant to approximate the solution for i = k, where
k is the index of a subdomain where uΩk is considered ‘bad’, e.g., having the
largest residual Fk 2 .
An advantage of this approach is, except on Ωk , that all equations are trivial;
i.e., no calculation is necessary to obtain the solution.
2.2

A First-Order Jacobi Method

To remedy the crude approximation used in the zeroth-order Jacobi method, we
form a new system of equations,

800

X.-C. Cai and X. Li

⎧ n
H (u) = Fk (u)
⎪
⎨ k

= 0,

(11)
un )
⎪
n
n
n
⎩ H n (u) = ∂Fi (˜
(u
−
u
˜
)
=
J
(˜
u
)(u
−
u
˜
)
=
0,
i
=
k,
i
i
∂u
un ) = 0 for i = k, with
i.e., it approximates the equation Gni (u) = Fi (u) − Fi (˜
Hin (u) =

un )
∂Fi (˜
(u − u
˜n ) = Ji (˜
un )(u − u
˜n ) = 0.
∂u

˜n using its diﬀerential
In other words, it approximates the diﬀerence in Fi at u
n
at u˜ .
We remark here that the algorithms just proposed are similar in spirit to
the recently introduced nonlinear preconditioning algorithms [4,5,9], but the
nonlinear treatment here is more local.

3

Numerical Experiments

To demonstrate the eﬃciency and eﬀectiveness of the new algorithms, we present
some numerical results for solving the incompressible Navier-Stokes equations with

16x16=256 processors on 256x256 grids. *=Newton, o=1stJac.

0

10

−1

10

Re=104
−2

Re=5x103

10

Re=5x102
−3

10

3

Re=10

Residual

−4

10

3

−5

Re=10

10

4

Re=10
−6

10

Re=5x103
Re=5x102

−7

10

2

Re=10

−8

10

Re=102
−9

10

0

5

10

15
Step

20

25

30

Fig. 1. Nonlinear residual history with varying Reynolds numbers. The classical inexact
Newton is marked with ∗ and the new algorithm is marked with ◦.

A Domain Decomposition Based Parallel Inexact Newton’s Method

801

Residual of ω−component after 1 iteration before subdomain iteration. Re=103.

−3

x 10
4
3
2
1
0
−1
−2
−3
−4
40

30

35
30
25

20

20
15

10

10
0

5
0

Residual of ω−component after 1 iteration after subdomain iteration. Re=103.

−3

x 10
4
3
2
1
0
−1
−2
40

30

35
30
25

20

20
15

10

10
0

5
0

Fig. 2. The eﬀect of subdomain Jacobi iterations: before (top) and after (bottom). One
of the corner singularities is chosen to be eliminated by the inner Jacobi iterations.

802

X.-C. Cai and X. Li

diﬀerent Reynolds numbers. The implementation of the proposed algorithms is
done using PETSc [1], and the results are obtained on an IBM BG/L. Both the
zeroth order and the ﬁrst order algorithms are implemented, but the ﬁrst order algorithm is consistently better than the zeroth order algorithm, therefore, we will
only report some preliminary experimental results of the ﬁrst order algorithm.
The results are obtained for solving (1) on a 256 × 256 mesh with 256 processors. In all tests, the initial iterate is zero for u, v and ω. We stop the global
and local nonlinear iteration if
F (un ) ≤

r

F (u0 )

where r = 10−6 and 10−5 are used for the global Newton iterations and the
SJN iterations, respectively. The linear iteration for solving the global Jacobian
system is stopped if the relative tolerance
F (un ) − F (un )Mn−1 (Mn pn ) ≤ ηr F (un )
is satisﬁed with ηr = 10−4 . The absolute tolerances for all iterations are 10−10 .
Here Mn−1 is an additive Schwarz preconditioner [14] constructed using the Jacobian matrix F , and a partition of computational domain into 256 subdomains
in a checker board fashion. The overlapping size is set to 2, and the subdomain
linear systems are solved by LU factorization.
In Fig. 1, we show the history of the norm of the residual of several test runs
with diﬀerent Reynolds numbers using the classical inexact Newton’s method [3]
(marked with “∗”) and the new algorithm (marked with “◦”). As the Reynolds
number increases, the nonlinear system becomes more diﬃcult to solve. In fact,
the classical method with the standard line search fails to converge once the
Reynolds number exceeds 102 . We did not try to employ other techniques, such as
pseudo-time stepping [10] or parameter/mesh continuations [15,16], to improve
the convergence of the classical method. On the other hand, SJN converges for
a much larger range of Reynolds numbers as shown in Fig. 1 without employing
any of the special tricks. In Fig. 2, we show an example of the surface plots of
the residual function corresponding to the vorticity of the ﬂow. The top picture
is before a local high nonlinearity is removed, and the bottom picture shows the
plot after the local Jacobi solver is applied to partially remove the local high
nonlinearity.

References
1. Balay, S., Buschelman, K., Gropp, W., Kaushik, D., Knepley, M., McInnes, L.,
Smith, B., Zhang, H.: PETSc Users Manual, Argonne National Laboratory (2008)
2. Barker, A., Cai, X.-C.: NKS for fully coupled ﬂuid-structure interaction with application. Lecture Notes in Computational Science and Engineering. Springer, Heidelberg (2009)
3. Cai, X.-C., Gropp, W.D., Keyes, D.E., Melvin, R.G., Young, D.P.: Parallel Newton–
Krylov–Schwarz algorithms for the transonic full potential equation. SIAM J. Sci.
Comput. 19, 246–265 (1998)

A Domain Decomposition Based Parallel Inexact Newton’s Method

803

4. Cai, X.-C., Keyes, D.E.: Nonlinearly preconditioned inexact Newton algorithm.
SIAM J. Sci. Comput. 24, 183–200 (2002)
5. Cai, X.-C., Li, X.: Inexact Newton’s methods with nonlinear restricted additive
Schwarz preconditioning for problems with high local nonlinearities (in preparation)
6. Dennis Jr., J.E., Schnabel, R.B.: Numerical Methods for Unconstrained Optimization and Nonlinear Equations. SIAM, Philadelphia (1996)
7. Eisenstat, S.C., Walker, H.F.: Globally convergent inexact Newton methods. SIAM
J. Optimization 4, 393–422 (1994)
8. Hirsch, C.: Numerical Computation of Internal and External Flows. John Wiley &
Sons, New York (1990)
9. Hwang, F.-N., Cai, X.-C.: A parallel nonlinear additive Schwarz preconditioned
inexact Newton algorithm for incompressible Navier-Stokes equations. J. Comput.
Phys. 204, 666–691 (2005)
10. Kelley, C.T., Keyes, D.E.: Convergence analysis of pseudo-transient continuation.
SIAM J. Num. Anal. 35, 508–523 (1998)
11. Lanzkron, P.J., Rose, D.J., Wilkes, J.T.: An analysis of approximate nonlinear
elimination. SIAM J. Sci. Comput. 17, 538–559 (1996)
12. Ortega, J., Rheinboldt, W.: Iterative Solution of Nonlinear Equations in Several
Variables. SIAM, Philadelphia (2000)
13. Ovtchinnikov, S., Dobrian, F., Cai, X.-C., Keyes, D.: Additive Schwarz-based fully
coupled implicit methods for resistive Hall magnetohydrodynamic problems. J.
Comput. Phys. 225, 1919–1936 (2007)
14. Smith, B.F., Bjørstad, P.E., Gropp, W.D.: Domain Decomposition: Parallel Multilevel Methods for Elliptic Partial Diﬀerential Equations. Cambridge University
Press, Cambridge (1996)
15. Young, D.P., Melvin, R.G., Bieterman, M.B., Johnson, F.T., Samant, S.S.: Global
convergence of inexact Newton methods for transonic ﬂow. Int. J. Numer. Meths.
Fluids 11, 1075–1095 (1990)
16. Young, D.P., Mervin, R.G., Bieterman, M.B., Johnson, F.T., Samant, S.S., Bussoletti, J.E.: A locally reﬁned rectangular grid ﬁnite element method: Application
to computational ﬂuid dynamics and computational physics. J. Comput. Phys. 92,
1–66 (1991)

