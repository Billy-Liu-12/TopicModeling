Adaptive Fault Monitoring in Fault Tolerant CORBA*
Soo Myoung Lee1, Hee Yong Youn1, and We Duke Cho2
1

School of Information and Communications Engineering
SungKyunKwan University, 440-746, Suwon, Korea
{lifetime, youn}@ece.skku.ac.kr
2
CUCN, Suwon, Korea
chowd@ajou.ac.kr

Abstract. A number of different kinds of applications developed on CORBA
framework need fault tolerance in asynchronous distributed system or network
environment, and it is important to quickly detect the faults. There exist various
fault monitoring and detection algorithms that employ a timeout-based mechanism. However, they are occasionally inaccurate in unstable or overloaded system. The goal of the proposed algorithm is to enhance the accuracy of fault
monitoring. This is achieved by promptly adjusting the timeout interval using
the past elapsed time values accumulated. Additionally, we use asynchronous
invocation to call ‘is_alive()’ method of monitorable object with a sequence
number. Experiment on CORBA-compliant Orbix ORB confirms the effectiveness of the proposed scheme compared to the existing one.
Keywords: Adaptation, elapsed time, 1 fault monitoring and detection, faulttolerant CORBA, timeout.

1 Introduction
A number of different kinds of applications developed by the members of the OMG
and users of CORBA [1] need fault tolerance features. Fault-tolerant CORBA [2]
aims to provide robust support for the applications requiring high reliability. Here it is
very important to quickly detect a fault if it occurs. We call the mechanism detecting
any fault occurrence as fault monitoring and detection. The mechanism is primarily
based on timeout event occurring when a request message sent from a monitor to the
monitorable object does not return in time.
In asynchronous distributed systems it is hard to differentiate between real crash
and network overload. The design of fault detector must be careful because a timeout
value much smaller than the average transmission time will cause false alarm, while a
timeout value much greater than the average transmission time will delay the fault
detection when a crash occurs.
There are various fault detection models such as Crash-Recovery Model [3] and
the model of Chandra and Toueg [4]. They suggest a way that increases the timeout
* This research was supported by the Ubiquitous Autonomic Computing and Network Project,
21st Century Frontier R&D Program in Korea and the Brain Korea 21 Project in 2004. Corresponding author: Hee Yong Youn
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 576 – 584, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Adaptive Fault Monitoring in Fault Tolerant CORBA

577

value when a false fault or crash alarm occurred. However, this strategy allows a
scenario where the timeout value is increased several times due to overload in the
network. It can lead to an unnecessarily long timeout value even after the network
returns to normal workload condition. The ADAPTATION-Algorithm proposed by
Sotoma and Mauro Madeira [5] presents a fault detection mechanism that aims at
accurate failure detection in spite of network overloads by means of periodic increases and decreases of the timeout value. However, it may deduce incorrect timeout
values and monitoring intervals in unstable system or network environment because it
regulates timeout values only after timeout or response event occurs and initializes
several factors used for calculating the mean values.
We thus propose a solution that can solve the problem above. First of all, it employs an asynchronous invocation approach in which ‘is_alive()’ message is transmitted with a sequence number to the monitorable object and buffer is used that can reserve a number of measured time values for calculating several factors. Additionally,
it uses some equations in the algorithm for achieving better result. Experiment on an
actual client and server system reveals that the proposed algorithm allows more accurate prediction of monitoring interval than the ADAPTATION algorithm regardless of
load condition of the system.
The rest of the paper is organized as follows. Section 2 presents an overview of
Fault-tolerant CORBA and related work. Section 3 describes the proposed scheme.
Section 4 evaluates the performance of the proposed scheme and compares it with the
ADAPTATION algorithm. Finally, Section 5 concludes the paper.

2 Background
In fault-tolerant CORBA, fault management encompasses the following activities;
fault detection: detecting the presence of a fault in the system and generating a fault
report, fault notification: propagating fault reports to the entities registered for such
notifications, fault analysis/diagnosis: analyzing a (potentially large) number of
related fault reports and generating condensed or summary reports.
2.1 The Models for Fault Monitoring
Most implementations of fault detectors are based on timeout, and use either pull or
push-based monitoring. Because push-based monitoring depends on the characteristics of the application, it is not defined in Fault-tolerant CORBA specification.
− Pull model: The fault monitor periodically calls ‘is_alive()’ method of the monitorable object asking whether it is alive. If the monitorable object does not reply
within some time interval, then the fault monitor suspects it is faulty. The main advantage is that it allows a status check only when it is needed by the application.
− Push model: The monitorable object periodically calls ‘i_am_alive()’ method of
the fault monitor informing that it is still alive. If the monitorable object has not
called the ‘i_am_alive()’ method within some time interval, then the fault monitor
suspects it is faulty. The main advantage is fast detection of the failure of the monitorable object.

578

S.M. Lee, H.Y. Youn, and W.D. Cho

2.2 Related Works
The design and verification of fault-tolerant distributed applications are generally
viewed as complex endeavor. In recent years, several paradigms have been identified
which simplify the task. The model using the weakest failure detector [6] determines
what information about failures is necessary and sufficient to solve the Consensus
problem in asynchronous distributed systems subject to crash failures. In the model
any failure detector has to provide at least as much information as W. Thus, W is
indeed the weakest failure detector for solving the Consensus problem in asynchronous systems with a majority of correct processes.
The hybrid approach [7] presents a consensus algorithm that combines randomization and unreliable failure detection, two well-known techniques solving the Consensus problem. This hybrid algorithm combines the advantages of both the approaches;
it guarantees deterministic termination if the failure detector is accurate and probabilistic termination otherwise.
The model using the heartbeat failure detector [8] considers partitionable networks
with process crashes and lossy links, and focuses on the problems of reliable communication and consensus for such networks. The model solves the problem by using S
and the quiescent, i.e., algorithms that eventually stop sending messages.
In addition to the fault monitoring mechanisms, a framework called DOORS [9]
was proposed, which was developed prior to the FT-CORBA standard as an experimental Fault-tolerant CORBA middleware. It was implemented as a CORBA service to
provide end-to-end application-level fault tolerance.
2.3 Detection Problem
To accurately design a fault detection mechanism, we should avoid some situations.
Figure 1 shows two examples of inaccurate timeout.

average transmission time

average transmission time
8"

0"

timeout
4"
5"
(a) Incorrect timeout event

0"

5" timeout
(b) Delayed timeout event

Fig. 1. Examples of inaccurate fault monitoring

As shown in Figure 1(a), if timeout occurs in 4 seconds when the average transmission time from a monitor to the monitorable object is 5 seconds, the system assumes a
fault. On the other hand, as shown in Figure 1(b), if timeout occurs in 8 seconds, the
system has 3 second latency in detecting a fault and this may cause a lot of fatal problems. Thus, Chandra and Toueg suggest an increase on the timeout value after a false
crash alarm. However, this strategy may cause the timeout value to be increased several times due to overload in the network. It can lead to an unnecessarily long timeout
value too long even after the network returns to normal workload condition.

Adaptive Fault Monitoring in Fault Tolerant CORBA

② average of ratio
start
0"

next timeout
3"

4" 5"

① average of previous elapsed times

3" 4"

start
0"

579

5"

③ current timeout ④ timeout factor

(a) RESPONSE event

(b) TIMEOUT event

Fig. 2. The operational mechanism of the ADAPTATION algorithm

Figure 2 shows the solution of the ADAPTATION algorithm toward the problem
mentioned above. It regulates the timeout value using the RESPONSE and
TIMEOUT event. If the RESPONSE event occurs, the algorithm decreases the next
timeout value by the product of
and
(the average of the ratios of the two successive elapsed time pairs). On the other hand, with TIMEOUT event, the algorithm sets
and
(the timeout factor set by the user).
the next timeout value by the product of
This algorithm also shows slow reaction time and possibly incorrect timeout value
because it regulates timeout value only after a timeout event occurs or a few response
events occur. We next present the proposed scheme solving these problems.

① ②
③ ④

3 The Proposed Scheme
The proposed scheme employs some new features to solve the problems mentioned
above. First of all, it uses asynchronous invocation to transmit ‘is_alive()’ message
with a sequence number to the monitorable object. Figure 3 presents how to judge
normal or abnormal state such as loss or delay of the request message using the sequence number. Here successful and failed transmission/reception of a message are
marked as black and white dot, respectively.
1
A : (normal state)

elapsed time
is_alive(1)

2
is_alive(2)

B : (loss)
C : (delay or loss)
Fig. 3. Judging the state of a monitorable object

Here Case A is normal state because ‘is_alive(2)’ is transmitted after ‘is_alive(1)’
arrives. However, Case B presents loss of ‘is_alive(1)’ because ‘is_alive(2)’ arrives
before ‘is_alive(1)’ arrives. Hence there is a need to regulate the monitoring interval
and notify the state to the Notifier. At last, nobody can judge the state of the monitorable object for Case C because both ‘is_alive(1)’ and ‘is_alive(2)’ have not arrived.
This is due to delay or loss.
Another feature of the proposed scheme is to promptly adjust the timeout value using the past elapsed times. For example, assume that there is a system with capri-

580

S.M. Lee, H.Y. Youn, and W.D. Cho

ciously varying workload. To distinguish failed object from overly workload when an
abnormal state is identified, the proposed monitor keeps a number of sequence numbers, round-trip times (RTT), etc. in its buffer. Here the size of a buffer is 140bytes
and there exist 1000 of them. The asynchronous invocation and buffer allow the proposed scheme to outperform the existing schemes including the ADAPTATION
algorithm.
The following variables are used in the proposed algorithm. seqNum: the sequence
number attached to each packet; monInter: predicted monitoring interval time;
sTime: the time the message is sent; rTime: the time the response is received;
eTime: the elapsed time obtained by subtracting sTime from rTime; message: the
character type pointer variable with “SET” or “CHANGE” value; ratio: the ratio of
the current elapsed time to the previous elapsed time; pCount: the number of previous contiguously increasing or decreasing ratio values; weight: the weight of a ratio;
avg_ratio: the means of ratio values. The followings are the monitor and monitorable
object process.
process monitor object:
01 monInter[0] = the initial monitoring interval;
02 while(do monitoring){
03 check if all previous packets have returned;
04 seqNum = seqNum + 1;
05 sTime[seqNum] = timer;
06 if(call asynchronously an ‘is_alive(seqNum)’){
07
rTime[seqNum] = timer;
08
eTime[seqNum] = rTime[seqNum] – sTime[seqNum];
09
MonitoringInterval(seqNum, “SET or CHANGE”);
10 }else{
11
send a notification to Notifier;}
12 }}
process monitorable object:
is_alive():
01 if(received request message from monitor)
02 return true;
The monitor process measures the initial round trip time and saves it at monInter[0]
in the 1st line. The 3rd line is for checking the state of the monitorable object if it is in
state A, B, or C of Figure 3. In the 6th line, the monitor calls ‘is_alive()’ method asynchronously. If any response does not return, it sends a notification to its notifier. The
MonitoringInterval() function at the 9th line regulates the monitoring interval. Here
two messages are used, one for calculating the next packet’s monitoring interval and
another for recalculating it according to the status of returning message. The MonitoringInterval() function is as follows.
process MonitoringInterval(int seqNum, char* message):
01 if(message == “SET”){
02 set next monitoring interval;
03 }else if(message == “CHANGE”){
04 if(increase or decrease continually more twice){

Adaptive Fault Monitoring in Fault Tolerant CORBA

581

05
if(pCount/2 == 0) weight[n-1] = (1);
06
else weight[n-1] = (2);
07
total = 1;
08
for(int i = n-2; i >= 0; i--) {
09
total = total – weight[i+1];
10
if(i != 0) weight[i] = total * weight[i-1];
11
else weight[i] = total;}}
12 monInter[seqNum] = eTime[seqNum-1]*(3)
13 }else if(after once increased, once decreased or vice versa){
14
monInter[seqNum] = Regulating equation(4);
15
ratio[seqNum] = eTime[seqNum] – eTime[seqNum-1];}
The MonitoringInterval process has two parameters. The sequence number identifies the packet called the ‘is_alive()’ method, and the message parameter of a character type pointer variable indicates the condition whether it establishes next monitoring
interval or updates current monitoring interval. The message that has a “SET” value
sets next monitoring interval, while “CHANGE” value asynchronously reflects the
result calculated by the following equations to the current monitoring interval. This
process is to distinguish the case that the elapsed time increases or decreases continuously from the case that the elapsed time increases and then decreases next or
vice versa.
n+4
, ( n = 2n)
(1)
4n
n +1
, (n = 2n − 1)
(2)
2n
pCount −1

∑

avg_ratio =

i =0

eTimei × weighti
pCount

, (The pCount is an integer larger than 1.)

(3)

1

∑ eTime
Regulating = eTime0 +

i =0

i

(4)

2
Equation (1) and (2) are used when the last elapsed time increases and decreases
continuously more than twice, respectively. Equation (3) is used to get the average
ratio. Equation (4) is to regulate the monitoring interval in the case that the elapsed
time increases and then decreases next or vice versa.

4 Performance Evaluation
In this section the proposed scheme is evaluated by experiment and compared with
the ADAPTATION algorithm to display what factor allows better monitoring interval
according to the system workload changed per second. The client and server system
used for the experiment have Intel Pentium 4 processor and 1GB main memory. The
OS is Windows XP with established CORBA-compliant Orbix Enterprise Version 6.1
[11, 12] and Visual C++ 6.0. The monitor and monitorable object program reside in

582

S.M. Lee, H.Y. Youn, and W.D. Cho

different systems. We use two sets of delay values {0, 0.01, 0.1, 1} and {0, 0.01, 0.1,
1, 1.5, 2.5, 5, 10} that represent the response delay time for the request message
caused by changing the system workload for comparing the performances of the algorithms in stable and unstable condition, respectively. We assume that initial monitoring interval is 1.2 microsecond. Also, in order to cause changing elapsed time, the
workload is gradually increased in the first 4 second period and then decreased in the
next 4 second period repeatedly.
4

Elaps ed Time
ADAPTATION Algorithm
Propos ed Algorithm
Timeout Event

)c3
se
m(
la
rvte
in2
gin
ro
itn
oM1
0

1

2

3

4

5
6
Time (s ec )

7

8

9

10

Fig. 4. The monitoring intervals as time moves in stable condition

Figure 4 displays the changing monitoring intervals of the two algorithms as the
system workload changes in stable system. Notice that the line of elapsed time (the
dotted line) does not vary a lot in stable condition, while the monitoring interval regulated by the proposed algorithm (the line with triangular dots) chases the elapsed time
trajectory quite fast. However, the monitoring interval regulated by the
ADAPTATION algorithm(the line with lozenge dots) is not as prompt as the proposed algorithm. Particularly, it has incorrect monitoring interval when time is 4 (in
other words the interval is shorter than the elapsed time). In spite the monitoring interval should decrease if the elapsed time decreases, the monitoring interval regulated
by the ADAPTATION algorithm shows little change in contrast with the proposed
algorithm.
18
Elaps ed Time
Propos ed Algorithm
ADAPTATION Algorithm
Timeout Event

16

c)e14
s12
(ml
var 10
etn
i 8
ngri
toni 6
oM 4
2
0

1

2

3

4

5

6

7

8

9
10
Time (s ec )

11

12

13

14

15

16

17

Fig. 5. The monitoring intervals as time moves in unstable condition

18

Adaptive Fault Monitoring in Fault Tolerant CORBA

583

Figure 5 presents the changing monitoring intervals of the two algorithms as the
system workload changes in unstable system or network environment. The experiment results of the two algorithms are similar to Figure 4. Notice that, in spite of the
system workload increasing rapidly, the proposed algorithm chases the trajectory of
the elapsed time fast. The ADAPTATION algorithm is worse in the unstable
condition.

5 Conclusion
A number of different kinds of applications developed on CORBA framework in
asynchronous distributed system or network environment need fault tolerance. Particularly, in real-time distributed processing systems, it is important to quickly detect
the fault and properly adjust the monitoring interval in which the ‘is_alive()’ message
is predicted to return. This paper has presented a new fault monitoring algorithm that
uses elapsed time values to decide the monitoring interval. Also, it has an important
feature of asynchronous invocation with sequence number.
Experiment was performed on a client and server system presenting varied monitoring interval according to the changed system workload in stable and unstable condition, respectively. The proposed algorithm allows monitoring interval close to the
elapsed times while the ADAPTATION algorithm does not. Also, few timeout events
occurred with the proposed algorithm in unstable system or network situation unlike
the ADAPTATION algorithm. The monitoring interval must be larger than the
elapsed time and the proposed algorithm allows it. A more fine tuning of the proposed
approach will be carried out in the future.

References
1. Object Management Group, The Common Object Request Broker Architecture: Core
Specification Version 3.0.3-Editorial changes formal/04-03-12, 2004
2. Object Management Group, Fault Tolerant CORBA, OMG document: formal/04-03-12,
2004
3. M. K. Aguilera, W. Chen and S. Toueg. Failure Detection and Consensus in the CrashRecovery Model. Technical Report 98-1676, Department of Computer Science, Cornell
University, 1998.
4. T. D. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems.
Journal of the ACM, 43(2):225-267, 1996
5. Sotoma, I. and Mauro Madeira, E.R. ADAPTATION-Algorithms to ADAPTive FaulT
MonItOriNg and Their Implementation on CORBA. Distributed Objects and Applications,
2001.
6. T. D. Chandra, V. Hadzilacos and S. Toueg. The Weakest Failure Detector for Solving
Consensus. Journal of the ACM, 43(4):685-722, 1996
7. M. K. Aguilera and S. Toueg, Randomization and Failure Detection: A Hybrid Approach
to Solve Consensus. SIAM Journal on Computing, 28(3):890-903, 1999
8. M. K. Aguilera, W. Chen and S. Toueg. Using the Heartbeat Failure Detector for Quiescent Reliable Communication and Consensus in Partitionable Networks, Theoretical Computer Science, Volume 220(1): 3-30, 1999

584

S.M. Lee, H.Y. Youn, and W.D. Cho

9. B. Natarajan, A. Gokhale and D. C. Schmidt, DOORS: Towards High-performance FaultTolerant CORBA, Proceedings of the 2nd International Symposium on Distributed Objects
and Applications (DOA2000), 2000
10. D. Szentivanyi and S. Nadjm-Tehrani, Building and Evaluating a Fault-Tolerant CORBA
Infrastructure, in Proceedings of the Workshop on Dependable Middleware-Based Systems
(WDMS'02) - part of the International Conference on Dependable Systems and Networks
(DSN), 2002
11. IONA, Orbix ORB Enterprise Version 6.1 with Visual C++ Development Toolkits,
http://www.iona.com/downloads/, 2004
12. IONA, “Orbix CORBA Programmer’s Guide C++ Edition, Version 6.1”, 2003

