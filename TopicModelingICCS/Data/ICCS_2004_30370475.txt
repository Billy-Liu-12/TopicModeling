An Extended Coherence Protocol for Recoverable DSM
Systems with Causal Consistency*
Jerzy Brzeziński and Michał Szychowiak
Institute of Computing Science
Poznań University of Technology
Piotrowo 3a, 60-965 Poznań, POLAND
phone: +48 61 665 28 09, fax: +48 61 877 15 25
{jbrzezinski,mszychowiak}@cs.put.poznan.pl

Abstract. This paper presents a new checkpoint recovery protocol for Distributed Shared Memory (DSM) systems with read-write objects. It is based on independent checkpointing integrated with a coherence protocol for causal consistency model. That integration results in high availability of shared objects and
ensures fast restoration of consistent state of the DSM in spite of multiple node
failures, introducing little overhead. Moreover, in case of network partitioning,
the extended protocol ensures that all the processes in majority partition of the
DSM system can continuously access all the objects.

1 Introduction
One of the most important issues in designing modern Distributed Shared Memory
(DSM) systems is fault tolerance, namely recovery, aimed at guaranteeing continuous
availability of shared data even in case of failures of some DSM nodes. The recovery
techniques developed for general distributed systems suffer from significant overhead
when imposed on DSM systems (e.g. [3]). This motivates investigations for new recovery protocols dedicated for the DSM. Our research aims at constructing a new
solution for the DSM recovery problem which would tolerate concurrent failures of
multiple nodes or network partitioning. In [2] we have proposed the concept of a coherence protocol for causal consistency model [1] extended for low cost checkpointing which ensures fast recovery. To the best of our knowledge it is the first checkpoint-recovery protocol for this consistency model. In this paper we present a formal
description of the protocol as well as the proof of its correctness.
This paper is organized as follows. In section 1 we define the system model. Section 3 details a new coherence protocol extended with checkpointing in order to offer
high availability and fast recovery of shared data. The protocol is proven correct in
section 4. Concluding remarks are given in section 5.

*

This work has been partially supported by the State Committee for Scientific Research grant
no. 7T11C 036 21

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 475–482, 2004.
© Springer-Verlag Berlin Heidelberg 2004

476

2

J. Brzeziński and M. Szychowiak

Basic Definitions and Problem Formulation

2.1 System Model
The DSM system is a distributed system composed of a finite set P of sequential processes P1, P2, ..., Pn that can access a finite set O of shared objects. Each shared object
consists of its current state (object value) and object methods which read and modify
the object state. We distinguish two operations on shared objects: read access and
write access. The read access ri(x) to object x is issued when process Pi invokes a
read-only method of object x. The write access wi(x) to object x is issued when process Pi invokes any other method of x. Each write access results in a new object value of
x. By ri(x)v we denote that the read operation returns value v of x, and by wi(x)v that
the write operation stores value v to x.
The replication mechanism is used to increase the efficiency of the DSM object access, by allowing each process to locally access a replica of the object. However, concurrent access to different replicas of the same shared object requires consistency management. The coherence protocol synchronizes each access to replicas, accordingly to
the appropriate consistency model. This protocol performs all communication necessary for the interprocess synchronization via message-passing.
2.2 Causal Memory
Let local history Hi denote the set of all access operations issued by Pi, history H – the
set of all operations issued by the system and HW – the set of all write operations.
Definition 1. The causal-order relation in H, denoted by →, is the transitive closure
of the local order relation →i and a write-before relation that holds between a write
operation and a read operation returning the written value:
(i)

∀ (( ∃

o , o ∈H
1

(ii)

2

∀

i =1.. n

o1→i o2 ) ⇒ o1→ o2 ),

w(x)v → r(x)v ,

x ∈O

(iii)

∀ ( (o → o
1

∧ o→ o2) ⇒ o1→ o2 ).

o1 , o 2 , o ∈H

As Pi is sequential, it observes the operations on shared objects in a sequence
which determines a local serialization 6i of the set Hi ∪HW.
Definition 2. Execution of access operations is causally consistent if serialization 6i
satisfies the following condition:

∀

( o1→ o2 ⇒ o16i o2 ).

o , o ∈ H i ∪ HW
1

2

The causal consistency model guarantees that all processes accessing a set of
shared objects will perceive the same order of causally related operations on those
objects.

An Extended Coherence Protocol for Recoverable DSM Systems

477

3 The Integrated Coherence-Checkpointing Protocol
We describe now the integrated coherence-checkpointing protocol, CAUSp, which is
an extension of a basic coherence protocol originally proposed in [1]. The basic protocol ensures that all local reads reflect the causal order of object modifications, by
invalidating all potentially outdated replicas. If at any time, process Pi updates an
object x, it determines all locally stored replicas of objects that could have possibly
been modified before x, and invalidates them, preventing from reading inconsistent
values. Any access request issued to an invalid replica of x requires fetching the up-todate value from a master replica of x. The process holding a master replica of x is
called x’s owner. We assume the existence of reliable directory services which can
provide a process with the identity of the current owner of any required object.
3.1 The CAUSp Protocol
The CAUSp protocol distinguishes 3 ordinary states of an object replica: writable
(indicated by the WR status of the replica), read-only (RO status), and invalid (INV
status). Only the WR status enables to perform instantaneously any write access to the
replica. However, every process is allowed to instantaneously read the value of a local
replica in either RO or WR state. Meanwhile, the INV status indicates that the object
is not available locally for any access. Thus, the read or write access to the INV replica, and the write access to the RO replica require the coherence protocol to fetch the
value of the master replica of the accessed object.
The causal relationship of the memory accesses is reflected in the vector timestamps associated with each shared object. Each process Pi manages a vector clock
VTi. The value of i-th component of the VTi counts writes performed by Pi. More precisely, only intervals of write operations not interlaced with communication with other
processes are counted, as it is sufficient to track the causal dependency between operations issued by distinct processes.
There are three operations performed on VTi:
− inc(VTi) – increments a i-th component of the VTi; this operation is performed on
write-faults and read requests from other processes;
− update(VTi,VTj) – returns the component wise maximum of the two vectors; this
operation is performed on updating a local replica with some value received from
another process;
− VTi<VTj – true iff ∀k: VTi[k]-VTj[k] and ∃k: VTi[k]≠VTj[k]
The replica of object x stored at Pi has been assigned a vector timestamp VTix. The
local_invalidatei(VT) operation ensures the correctness of the protocol, by setting to
INV the status of all RO replicas x held by Pi, for which VTix<VT is true.
Checkpoints are stored in DSM as checkpoint replicas denoted C (checkpoint) and
ROC (read-only checkpoint). The identities of DSM nodes holding checkpoint replicas
are maintained in CCS (checkpoint copyset). CCS(x) is initiated at the creation of x,
then maintained by the object owner, but never includes the owner. The content of
CCS(x) can change accordingly to further access requests or failure pattern, or any
load balancing mechanisms, but the number of checkpoint replicas should always en-

478

J. Brzeziński and M. Szychowiak

sure the desired failure resilience [2]. Checkpoint replica is updated on checkpoint
operations and never becomes invalidated. Checkpoint operation ckpt(x)v consists in
atomically updating all checkpoint replicas held by processes included in CCS(x) with
value v, carried in CKPT(x,v,VTx) message, and setting their status to C. After that
moment, any C replica can be switched to ROC on the next local read access to x.
Until the next checkpoint, the ROC replica serves read accesses as RO replicas do (as
the checkpoint replica holds a prefetched value of x).
Actions of the extended protocol are presented in Fig. 1.
3.2 Delayed Checkpointing and Burst Checkpointing
The checkpointing is performed independently for each process. Moreover, several
modifications of objects can be performed without the need for taking checkpoints.
Indeed, when Pi issues several subsequent writes to x (which is generally a typical
behavior resulting from program locality), the checkpoint is not necessary as far as
this sequence is not interrupted by any read access from another process. However, it
is necessary to remark, that at the moment of checkpointing x, Pi can also own some
other object y, which has been modified before the last modification of x. Then, if Pi
fails after checkpointing x but before checkpointing y, the consistency of the memory
could be violated on recovery, since the formerly checkpointed value of y will be
inconsistent with the checkpointed value of x. Therefore, on each checkpoint of a dirty
object, Pi is required to atomically checkpoint all dirty replicas (burst checkpointing).
3.3 Recovery
Before any failure occurs there are at least nrmin+1 replicas of x, thus in case of a failure of f - nrmin processes (at most f processes crashes or become separated from the
majority partition) there will be at least one non-faulty replica of x available. If the
directory manager discovers the unavailability of x’s owner, it sequentially contacts
processes included in CCS(x) and elects the first available as new owner. In case of
the network partitioning, there is at least one such a process in the primary partition.
In order to protect the causal consistency of further access operations, the local invalidation operation must be processed on recovering an object from its checkpoint.
The elected owner will perform local_invalidatei(x.VT) for each x recovered from a C
state replica. This operation is presented in Fig. 2.

4 Correctness of the Protocol
Due to space limitation we will here provide the proof of the safety property only. The
safety property asserts that the CAUSp protocol correctly maintains the coherency of
shared data, accordingly to the causal consistency model, besides any allowable failures. For the sake of simplicity of the presentation, the recovery operation recoveri(x)v
is considered as a read access operation ri(x)v from the safety viewpoint.

An Extended Coherence Protocol for Recoverable DSM Systems

Fig. 1. Actions of the CAUSp protocol for process Pi

4.1 Proof of the Safety Property
First, let us introduce another vector clock comparison operation:
◦ VTi-VT – which is true iff ∀k: VTi[k]-VT[k]

479

480

J. Brzeziński and M. Szychowiak

Fig. 2. Recovery procedure performed by the new owner of x

Lemma 1. For any Pi, vector clock VTi is monotonically increasing.
Proof. There are only 2 possible modification operations performed by the protocol on
the vector clock:
1) inc(VTi) – incrementing the i-th position VTi[i] of the vector clock;
2) VTi := update(VTi,VT) – which performes VTi[k] := max(VTi[k],VT[k]) for each k-th
position of the vector clock. Therefore, the vector clock is never decremented and for
,
any two subsequent vector values VTi1 and VTi2; VTi1-VTi2 is true.
Lemma 2. For any operations wi(x)v, wi(x)u, such that wi(x)v→iwi(x)u holds, and
rj(x)v (i≠j), there is VT1-VT2, where VT1 is the value of x.VT when operation rj(x)v
ends and VT2 is the value of VTi when the second write operation wi(x)u ends.
Proof. First, note that value v of x has been made visible to Pj only if, after wi(x)v
(i=x.owner), Pi had received R_REQ sent by Pj on rj(x). The first action performed by
Pi on reception of that R_REQ was inc(VTi). Let VTu be the incremented value of VTi.
Then, update message UPD(x,VTu) was sent from Pi to Pj, making x.VT equal to VTu.
Now, from Lemma 1, VTu-VT2 must be true, so we get x.VT-VT2.
,
Lemma 3. For any operations wi(x)v and rj(x)v, i≠j, there is VT1<VT2, where VT1 is
the value of VTi at the moment when operation wi(x)v ends and VT2 is the timestamp
value received in UPD(x,VT2) message during operation rj(x)v.
Proof. Again, note that value v of x has been made visible to Pj if, after wi(x)v timestamped with value VT1, Pi had received R_REQ sent by Pj on rj(x). So, Pi has performed inc(VTi) on reception of that R_REQ. Then, UPD(x,VT2) message was sent with
,
the incremented value of VTi, which is VT2. Thus we have VT1<VT2.
Lemma 4. For any operations oi1 and oj2, such that i≠j and oi1→oj2 holds, there is
VT1<VT2, where VT1 is the value of VTi when operation oi1 ends and VT2 is the value of
VTj when operation oj2 ends.
Proof. The case oi1=wi(x)v, oj2=rj(x)v is subject of Lemma 3, thus it has been proven
r
already. In case of oi1=wi(x)v such that wi(x)v → rj(x)v →j oj2, let VT be the value of
r
x.VT when operation rj(x)v ends. From Lemma 3 VT1<VT and from Lemma 1
r
VT -VT2. Thus, VT1<VT2 is true.
For a general case: oi1→ wk(x)v → rj(x)v →j oj2, we apply the following induction:

An Extended Coherence Protocol for Recoverable DSM Systems

481

step 1)
if oi1 →i wi(x)v → rj(x)v →j oj2, let VTw be the value of VTi when operation
r
wi(x)v ends and VT be the value of x.VT when operation rj(x)v ends. From Lemma 1 we
w
r
w
r
have both VT1-VT and VT -VT2. On the other hand, from Lemma 3, VT <VT is true.
Thus, VT1<VT2 is also true.
step 2) if oi1 → wk(x)v → rj(x)v →j oj2, where k≠i, we can follow the induction re,
cursively assuming o2=wk(x)v, and apply step 1 or step 2 for oi1 → o2.
In the following analysis we shall consider a value returned by a read access performed by the protocol, as the causal consistency violation may result only from reading an inconsistent value (there is no notion of “causally inconsistent writing”).
Definition 3. Read operation r(x)v performed by the CAUSp protocol is legal iff value
v has not been overwritten by any causally preceding write operation, i.e.:

∃/

u ≠ v ∧ w(x)v → w(x)u ∧ w(x)u → r(x)v

w ( x ) u∈HW

The value that can be returned by a legal read is consistent in terms of Definition 2.
A value which is not consistent will hereafter be called outdated.
Now let us note that as long as Pi does not interact with other processes, all local
access operations are performed on consistent values. This is because the local order
preserves causal dependency. Value v of x held by Pi may actually become outdated
only if Pi receives an UPD(y,VT '') message from another process with some value
y.value=a that causally depends on w(x)u which, in turn, overwrites v with u, i.e.:
w(x)v → w(x)u ∧ w(x)u → w(y)a ∧ ri(y)a →i ri(x). However, this chain of dependency
will be reflected in value VT '' of the vector clock received with this UPD(y,VT '') message. This vector clock value is used in local invalidation which succeeds the reception
of the UPD message.
Lemma 5. All outdated values of locally available replicas are invalidated during
the local invalidation operation.
Proof. By contradiction, let us assume that Pi holds a replica of x with outdated value v
timestamped x.VT, thus ri(x)v is not legal, i.e.:
u ≠ v ∧ w(x)v → w(x)u ∧ w(x)u → ri(x)v

∃

w ( x ) u∈HW

The following relations are possible between w(x)v and w(x)u:
1) both operations w(x)v, w(x)u have been issued by the same process, say Pj,
i.e.: wj(x)v →j wj(x)u. The causal dependency wj(x)u → ri(x) is only due to some operation ri(y)a performed by Pi before ri(x). Let us assign value VT1 of VTj to wj(x)u, VT2 to
wj(y)a, VT ' to UPD(x,VT ') message sent by Pj after wj(x)v, and, finally, VT '' to
UPD(y,VT '') message sent after wj(y)a. In this case x.VT=VT ' holds for replica of x at
Pi and the following predicates are fulfilled: VT '-VT1 from Lemma 1, VT1-VT2 from
Lemma 1 and VT2<VT '' from Lemma 3. Provided the above, x.VT<VT '' is true, and it
makes x invalidated during local_in-validationi(VT '') performed on reception of the
second update message UPD(y,VT ''). The value returned then by subsequent ri(x) cannot be v anymore.
2) operations w(x)v, w(x)u have been issued by distinct processes, i.e.: wk(x)v →
wj(x)u. Let us assign value VT0 of VTk to operation wk(x)v and then values VT1, VT2,

482

J. Brzeziński and M. Szychowiak

VT ', VT '' to wj(x)u, wj(y)a, UPD(x,VT ') and UPD(y,VT ''), respectively, as in point 1 of
this proof. In this case, still x.VT=VT ' holds for replica of x at Pi, VT1-VT2 and
VT2<VT '' also hold as above and, moreover, VT'<VT1 is true from Lemma 4. Therefore,
x.VT<VT '' is also true in this case, and x will be invalidated during local_invalidationi(VT '') on reception of UPD(y,VT ''). Again, the value returned by sub,
sequent ri(x) cannot be v anymore.
Theorem 1. (safety) Every read access to object x performed by any process is legal.
Proof. Let us consider ri(x)v issued to the replica of x in one of the following states:
1) WR – this case is trivial as this state designates the master replica of x which is
never outdated since only the owner can modify x;
2) INV – also trivial as no access is ever possible to a replica in the INV state;
3) RO – no replica in that state can contain an outdated value v because any modification causally following the write of v can be made visible to Pi only after reception
of some UPD message which triggers local invalidation. From Lemma 5 all outdated
values have been invalidated then;
4) C – similar to INV, except that no update is necessary; only the local invalidation
is processed on the first read access issued to a C replica and the replica state is
switched into ROC before value v is read;
5) ROC – the local invalidation was performed before the replica state has been
switched to ROC, so all outdated values were invalidated (from Lemma 5).
,

5 Conclusions
The coherence-recovery protocol proposed in this paper uses a novel burst checkpointing approach. Checkpointing is performed independently for each process, thus
does not incur high interprocess synchronization overhead. The protocol enables fast
recovery on the assumption of the reliability of the directory services, i.e. directory
information for each object must be correctly provided to the requested processes at
any moment in the majority partition. Fortunately, this assumption can be fulfilled with
directory checkpointing and replication for each object, similarly to application data
objects.

References
1. Ahamad M., Hutto P.W. and John R.: Implementing and Programming Causal Distributed
Shared Memory. 11th Int.Conf. on Distributed Computing (1991) 274-281
2. Brzeziński J. and Szychowiak M.: An Extended Coherence Protocol for Recoverable DSM
Systems with Causal Consistency. Int. Conf. on Parallel and Distributed Processing
Techniques and Applications PDPTA'03, Las Vegas (2003)
3. Kongmunvattana A., Tanchatchawal S. and Tzeng N.-F.: Coherence-Based Coordinated
Checkpointing for Software Distributed Shared Memory Systems. 20th Conf. on Distributed
Computing Systems (2000) 556-563

