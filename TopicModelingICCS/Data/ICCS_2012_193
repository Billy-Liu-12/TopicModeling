Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1484 – 1493

International Conference on Computational Science, ICCS 2012

An Agent-particle Model for Taxis-based Aggregation; Emergence
and Detection of Structures
Jean Marie Dembelea,*, Christophe Cambierb
b

a
Université Gaston Berger, UFR SAT. Saint-Louis, BP 234, Sénégal.
UMI 209 UMMISCO – IRD / Université Pierre et Marie Curie/Paris 6.

Abstract
The aggregation phenomenon resulting from general taxis stimulus is studied here using an agent-based approach. Usually
described by a set of partial differential equations in a mathematical formalism, this phenomenon is studied in this paper with a
system of “agents-particle” derived from particle methods. This approach allows us to simulate the phenomenon in an individual
and discrete way and then to enrich the mathematical description in terms of interaction specifications and model explorations.
This paper thus establishes the basis of an agent-oriented model able to handle more specific multi-level issues in general taxis
processes and in the resulting aggregation phenomenon. Formally built around two basic dynamics – spatial diffusion due to
density gradient and attraction following a gathering signal – our model shows, in a first step, the emergence of lifelike
aggregates from a randomly distributed population. In a second step, it proceeds, using a Hopfield network, to the detection and
reification of those emerging structures in order to be able to deal with the resulting level of complexity.

Keywords: agent-based modeling, particle methods, aggregation, taxis stimulus, structure detection, Hopfield networks

1. Introduction
Aggregation, crucial in the understanding of ecological, biological and even social processes, can result from a
taxis: a phenomenon that induce organisms – which are sensitive to a chemical, physical, thermal… stimulus – to
move toward or away from this stimulus gradient. One of the most studied taxes in the literature is chemotaxis – the
chemical taxis – which is very relevant in some unicellular organisms interactions [1]. This great interest led
scientists to come up with an equation-based model of the phenomenon putting emphasis on two major processes in
the aggregation; the diffusion of the individuals and their advection following a gradient [2]. Keller-Segel [3] first
proposed a continuum description of the aggregation and since than it has been studied and adapted to understand
how aggregates can emerge and behave.

* Corresponding author. Tel.: +221 77 645 45 75; fax: +221 33 961 53 38.
E-mail address: jean-marie.dembele@ugb.edu.sn.

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.163

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

1485

The model we are developing here intends to follow a discrete and individual-based approach for the general
taxis phenomenon in order to provide tools to better understand the taxis-based aggregation at the individual level
and the dynamics at the emerging structures level; dynamics that could be found in many complex systems: i.e.
colonies of bacteria or larvae, insects… A specific example, with some unicellular organisms like Dictyostelium
discoideum and Myxococcus xanthus, is their aggregation and their resulting differentiation in which they change
their behaviors.
It is therefore of great interest to understand the basis of taxis in order to be able to represent more complex
behaviors overs taxes ones. The idea is then to build an organization of agents able to simulate aggregation, with
formal diffusion and advection, and also allowing us to begin to explore different phenomena (groups formation,
groups differentiation, groups roles in the system dynamics). Therefore, in this work, we won’t discuss equation
solving or analysis. Instead we will try to focus on practical and formal applications of agent-based modeling so we
can make progress in understanding aggregation complexity, which has otherwise been so “mathematicallydescribed”.
The following section gives a presentation of the equation-based description of aggregation. It will provide a
brief overview of the partial differential equations interpretations and their conceptual limitations. In section 3 we
will discuss our agent-based method; this is a continuation of our previous works on modeling systems usually
described by PDE [4]. The Smoothed Particle Hydrodynamics (SPH) basis of our agents-particle is also given and
their diffusion dynamics explained (Section 3.1).
Section 3.2 gathers all the necessary details for describing interactions between agents-particle themselves and
interactions with their environment. This is the core of the paper and contains all the formulae determining diffusion
and advection in the simulation. After the simulation and the emergence of lifelike structures in the model, we
present some clustering methods and proceed to the detection of our structures, elaborating a Hopfield network with
agents-particle as neurons. This network will allow us to automatically detect, localize and substantiate the
structures that bring a new level of complexity in the system.
2. The equation description of aggregation
Given a population of density u, diffusing in space and producing at a rate  a gathering signal s; the population
is sensitive to s and follows its gradient at a rate . The same signal diffuses in space and also evaporates at the rate
. In its continuous form, this problem can be generally described with the following set of partial differential
equations in which V is the velocity resulting from following the gathering signal s, Da the individuals diffusivity
and Ds the signal diffusivity.

u
+ .(Da u) + .(Vu) = 0
t
V = s
s
 Ds s +  u   s = 0
t

(1)

The first advection-diffusion equation of the system (1) gives the evolution in time of the population density u;
individuals disperse because of their own densities (diffusion phase) and they are attracted through the highest signal
s densities (advection with V). The third equation follows the signal evolution in time and space depending on its
own diffusion, its production by the individuals and its natural evaporation. Both equations are connected with the
second one, which establishes the velocity of the advection from the signal gradient.
One may notice that this model integrates two basic behaviors relying on two opposite forces: an attractive one,
generated by the signal following and a repulsive one, resulting in diffusion, due to density gradient. These two
forces have been shown [5], [6], to result in clustering into lifelike structures. The system (1) thus gives a good
mathematical description of the phenomenon with the possibility to explore multiple behaviors of the population by
acting on parameters ,  and .
However, when solving these equations, the interactions between individuals are only reflected within the general
behavior of the whole system; it is thus difficult to follow an individual behavior and to implement or insert into the

1486

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

equations some others realistic or even hypothetical interactions between individuals, interactions that could be
more complex than a simple repulsion and attraction. In addition, localizing and isolating emerging structures could
be very tedious in such a continuous formalization. Therefore, for our purposes it is better to use an individual-based
method integrating both forces (attraction by advection and repulsion by diffusion) and able to take into account
other details from the individuals like proximity perception, density similarity, historic evolution… rather than to
just follow an equation-based description that gives the evolving characteristics of the whole system.
3. Our agent-based approach for modeling aggregation
We thus propose to represent each individual by an agent-particle based on SPH (Smoothed Particle
Hydrodynamics) method [7] for functions approximations, and provided with some agent features (vicinity
perception, autonomy…). Indeed, SPH allows us to evaluate any kind of field f (density, pressure…) and its
derivatives (Fig. 1-c). The evaluation is done by quadrature of particles repartition in space Fig. 1-a & 1-b using
zones of influence and contributions.

Fig. 1. (a) The zone of influence of a particle and W a kernel function with a Gaussian allure; (b) A random repartition of 5000 agent-particles; (c)
Functions and derivatives approximations; (d) The corresponding density field of the 5000 agent-particles.

The zone of influence is an area defined in such a way to have, for each centered particle of the so-called zone,
enough neighbors to process an accurate evaluation. The contributions between particles in their zone of influence
are a function of their positions; the closer a particle is, stronger its contribution will be (depending to the kernel
function W, Fig. 1-a) in the function evaluation. The contribution between particles in different zones of influence is
null. With this approximation method, the density and other fields can be monitored through time (Fig. 1-d) and
their gradients computed to determine the system status. It remains then to implement the interactions between
agent-particles for the aggregation and structures detection.
3.1. The agent-particle diffusion velocity
The first step in our aggregation model should be to handle the interactions for the diffusion process (the
repulsive force); given that the attractive force can be computed by SPH formulae (see section 3.2). The principle is
therefore to determine the diffusion velocity [8] of each agent-particle in order to handle the Laplacian in a
deterministic way. Here we will not employ a random walk model, since it does not take any interaction into
account and could introduce errors, but will instead consider diffusion as an advection equation as follows:

u
+ .(Da u) = 0 
t

D uu
u
+ .( a
)=0 
u
t

u
u
+ .(Au) = 0 with A = Da
t
u

(2)

Term A, the advection velocity, provides the way in which agents-particle will diffuse. In fact, it is somehow
related to the density variations in the gradient directions. The agents-particle will reach the lowest density areas,
leaving the highest density ones. They receive, for that, a contribution or an influence, from all of their neighbors
located in their zone of influence. The diffusion thus becomes a distributed process computed by individuals
themselves (Fig. 2).

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

1487

Fig. 2. Plotting 1403 agents-particle of mass 2.10-4, in a two disks original repartition, and after 200 and 1000 diffusing steps. Diffusivity is 10-3.

3.2. The aggregation model specifications
In our agent-based model, conceptually different from equation-based resolution, every agent-particle has its
autonomy – as a process with methods – and its own perception. Therefore they can evaluate densities, velocities
and others characteristics of interest. In this way they are able to produce the gathering signal on space (patches),
follow the gradient of that signal and finally diffuse. The model is thus made up of agents-particle, which represent
individuals of the systems and patches, which discretize the space. For a first view into our model, the behavior of
an agent-particle in one time-step is as follows:
For each agent-particle i
• evaluate density ui from neighbors j with ui =  m j .W (xi  x j ,h)
j

• produce gathering signal on current patch i with the formula si =  ui
• (every patch diffuses its signal, Euler scheme)
• follow the signal gradient at Vi =  (s)i =  
s j .vol j .iW (xi  x j ,h)
patches j

• (every patch updates its signal due to evaporation)
D
(u)i
=  a  m j .i .W (xi  x j ,h)
• diffuse in space at Ai = Da
j
ui
ui
The patches also play an important role in the model. As noted in the model, the gathering signal is created by
agents-particle but is handled by patches, which cause it to diffuse (following an Euler scheme). This signal is
therefore found on patches and each patch updates its signal with the results from agents-particle production and
natural diffusion and evaporation. Let us now see the behavior of our aggregation model in simulation.
3.3. The emergence of lifelike structures
In order to show the effectiveness of our aggregation model, we drove an experiment of a general and theoretical
taxis with the following parameters; a population of 2500 agents-particle of mass 4*10-4 acting on a square domain
[-a, a] * [-a, a] with a = 0.5, each having a sensitivity  = 0.1 to the gathering signal, a signal diffusivity Ds = 0.2, a
production and evaporation rates  = 0.3,  = 0. 1, respectively, and a time step of 10-3, we obtain the emergence
depicted by the Fig. 3.
The system quickly evolves toward a set of groups of individuals more or less stable in time. For the upper
diffusivity of the agents, Da = 10-1 (Fig. 3-1, 3-2 & 3-3), one can notice the emergence of a smaller number of
groups comparing to the lower diffusivity of agents Da = 10-2 (Fig. 3-a, 3-b & 3-c). Indeed, when agents-particle
diffuse more quickly in space, they move away from emerging groups, thereby reducing the number of clusters.
In addition to the diffusivity effect, we can investigate the impact of perception (or for say characteristics length)
on structure formation (Fig. 3-d, 3-e, 3-f, 3-4, 3-5, 3-6). To do so, let us set a minimum zone of influence hmin for
every agent-particle; that means, even if the number of neighbors needed for a good field evaluation is achieved
below this minimum zone hmin, the agent-particle can still interact with all elements within this defined area. This
perception should make the agents-particle able to see and reach more distant groups (hmin>h).

1488

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

Fig. 3. Agents-particle diffusivity Da = 10-2 on the top (a, b, c, d, e & f) and Da = 10-1 on the bottom (1, 2, 3, 4, 5 et 6). On the left (a, b, c, 1, 2, 3):
screenshots at 100, 500 and 1000 time steps. On the right (d, e, f, 4, 5,6), hmin= 6*10-2 and screenshots at 50, 100 and 300 time steps.

This model, with the augmented perception, now shows more realistic structures (Fig. 3-f & 3-6) with a quasiconstant interior density and a high-density gradient at the edges, which are required to define a structure [9], [10].
We can surmise from this, that perception plays a crucial role in the aggregation phenomenon more than in the
simple diffusion one. Indeed, in a simple diffusion model, increasing the zone of influence doesn’t impact on
dynamics.
3.4. A new level of complexity induced by structures
With the emergence of structures, other strategies can be incorporated in the model to study complexity in some
social phenomena. For example, in addition to being sensitive to the gradient of the gathering signal, agents-particle
may also prefer to join closer groups, younger groups, less dense groups, or less populated ones; many potential
behaviors induced by the emergence of structures.
In fact, there is already a remarkable phenomenon in our model; the formation of lines of agents-particle joining
emerging groups (Fig. 3-d). Some “density-paths” of agents-particle are observed and could be retraced in the
model. Similarly, we could also follow and study transitory fluxes of individuals as “proximity-paths” – resulting in
joining closer groups – “fashion-paths” – resulting in joining younger groups – “economic-paths” – resulting in
joining less dense or less populated groups.
It is therefore pertinent to detect and represent “in media res” the emerging structures, since they can influence
the on-going behaviors that induced them in the first place. The next step in our model is thus to implement the
automatic spatial detection and creation of the structures.
4. The “in media res” detection of structures in the model
Data classification has provided many clustering algorithms and tools for pattern recognition, data analysis,
image processing, etc. We can briefly denote four main families of clustering algorithms:
• partition algorithms; group items of the system into clusters. Each element is attached to the cluster whose
centroid is closer to him. k-means [11] and the k-medoids, fuzzy k-means, x-means
• hierarchical algorithms; hierarchically decompose elements. For example, in an ascending clustering, they merge
elements to result into clusters more and more big [12]
• density algorithms; define clusters as set of neighbors points connected by density. The neighborhood and the
number of neighbors are given in such algorithms [13]
• neuronal algorithms; Kohonen maps [14] are a good example of such algorithms. They provide the link between
a set of I inputs (the data) and J outputs (the neurons) with I*J synaptic weights. These weights evolve to give to
neurons the same topological relations than the ones between the indexed data.

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

1489

These algorithms are not well-suited to our goal: detecting structures in the context of spatial and dynamical
particle systems. We notice, for those algorithms, some mismatches with our detection. Some of them use a fixed –
or an indicative – number of clusters or they set the size of neighborhood; unfortunately in our model, the number,
the size or the location of structures are unknown and incalculable from the original agents-particle spatial
repartition. Some others proceed to the clustering of the whole area; not all the agents-particles, in our model, will
belong to a structure. Structures can also appear and disappear during evolution.
Inspired by all above methods, we derive an unsupervised learning based on a Hopfield network in which we
treat agents-particle as neurons that can strengthen their connections (two agents-particle have a connection when
they are similar) and update their states (state corresponds to being member or not of a structure). In this model, the
detection is not hierarchical. Rather it uses a contextual strengthening of connections between density similar
agents-particle.
First, let us briefly recall the Hopfield network [15] principle. This recursive network is made up of neurons with
binary states Ei (t)  {1, 0}. All neurons are interconnected by weighted links Pij. The neurons states Ei (t) evolve in
time depending on their inputs Ii = j PijEj. If these inputs are superior to a threshold , neurons switch to state 1
otherwise they go to state 0. The neurons states are therefore updated through time and so are the links’ weights with
the learning algorithm. The states should evolve to the establishment of some stable conditions; system’s attractors,
or in our case, the structures to be detected. Hopfield networks will thus allows us to address both the spatial and
dynamic dimensions raised by the structure detection.
4.1. The unsupervised learning for the detection
Let now Pij be the link weight between two agents-particle i and j, and Ei (t) the state of an agent-particle i at time
t. Plus, we consider the binary membership state {1, 0} of an agent-particle, representing its membership to any
structure or aggregate in its influence zone. We can thus define the total input Ii of our agent-particle i by the
following expression:

I i =   Sij +   Pij E j
j

j

(3)

We define, by the new Sij term, the instantaneous similarity between agents-particle i and j. This similarity
depends on the structures’ nature. In our case, it is a density similarity given farther by expression (4). The second
term of the expression (3) then designates the temporal similarity between agents-particle. This term results from the
learning, throughout the evolution, of agents-particle which update the weight Pij of their connections. One can
notice that the differences here from the input Ii of a classical Hopfield network are the introduction of calibration
coefficients ( and ) and the use of the new value Sij. This is on purpose to distinguish both temporal and
instantaneous similarities in the detection. Acting of coefficients  and  one can put emphasis on the temporal
information between agents-particles rather than on the on-going condition (or vice versa).
Updating agents-particle states.
Once the agent-particle input Ii is calculated, it is subjected to a threshold – as in a Hopfield network – to
determine the future state Ei (belonging to a group or not if the input is enough or not). Depending on Hopfield
implementations, agents-particle states can be updated sequentially (one agent-particle at a time), randomly (one
chosen randomly), or synchronously (all agents-particle are updated). We opt for the synchronous mode which
seems to take into account, at each update, the overall state of the system with emerging structures.
Agents-particle learning.
Learning, which involves updating links’ weight, produces temporal similarity: the second term of expression (3).
It is here done by Hebb’s rule [16] (Pij = Pij + R, R is the learning rate). This rule suggests a strengthening of the link
weight when the two linked neurons are activated simultaneously. In our case, the simultaneous activity of two
agents-particle is equivalent to being member of the same neighborhood structure (their states are 1). Therefore, we
strengthen the connection between these two agents-particle and store, in this way, the similarity information.

1490

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

Similarities specifications.
Before giving the detection algorithms and data structures, let us first specify both instantaneous and temporal
similarities and their corresponding thresholds for our general taxis simulation. Defined by expression (4), the
instantaneous similarity of two agents-particle i and j, is high when agents-particle densities, ui and uj, are close to
the maximum density, and low otherwise. That should indicate the membership or not, of both agents-particle, in a
dense area.

Sij = average(ui ,u j ) / max k (uk ) ;

(4)

To propose a threshold for this similarity, let us see its possible values: Sij  [0, 1]    Sij  [0, ]
j

where  is the required number of neighbors in a zone of influence (cf. section 3). We can thus propose  as
the threshold, where the term  is chosen in [0, 1]. Indeed,  will give the tolerable ratio of active neighbors in the
zone of influence; an agent-particle is now meant to stay or to become active (state 1) if its instantaneous similarity
input is greater than . If it is less than  – there is either an insufficient number of active neighbors or an
insufficient instantaneous similarity – the agent-particle likely goes or stays to state 0. Let us now discuss the
temporal similarity Pij. To that end, we can rewrite it as follows:
n

Pij =   t Rijt , Rijt is the learning rate

(5)

t=1

Where n is the number of learning time steps, t equals to 1 or 0 depending whether or not at iteration t we had
increased the weight of the link between agents-particle i and j. In order to conveniently determine the
corresponding threshold of this temporal term, we give the learning rate the value of the instantaneous similarity Sij
at time t. The temporal similarity thus results from accumulations of instantaneous ones. For the threshold, let us
check the possible values of the temporal similarity:
n

Rijt  [0, n]   ijt Rijt  [0, n]    
t=1
j

(


 Rijt E j  =   Pij E j  [0, n]
j


n
t
t=1 ij

)

(

)

We can suggest now ’n as the threshold, where the term ’, as the previous term , is chosen in [0, 1]. It will
give the tolerable ratio of updated and maintained links during learning. Now we got thresholds for both similarities,
we can linearly compose the final one that will allow us to activate or not an agent-particle state. This threshold is
then  = +’n. However, the second term is far greater than the first one. It means that temporal similarity
may somehow dominate the instantaneous one. This is why we will prefer expression (6) in which  =1/n, gets to
normalize the temporal term.
 =  +’ = ( + ’)

(6)

4.2. Data structures and algorithms
The detection principles now explained, we can focus on data structures and algorithms. For data representation,
one can notice that the network evolution could be fully represented by a symmetric matrix of weights Pij and a
vector of states E(i). But this choice of data structures would not be appropriate. Indeed, the matrix of weights would
have been sparse; the agents-particle don't care about neighbors out of their zone of influence since they have no
density contribution, so they won’t have connections with them. Another limitation of this choice would have been
the difficulty to exhibit spatial structures from the vector of states E(i). In order to facilitate the structure detection,
we thus propose to create real connections between agents-particle as depicted by Fig. 4-a. Further, we decided to
maintain a connection only between two simultaneously activated agents-particle in the same zone of influence (Fig.
4-c).

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

1491

Fig. 4. (a) An agent-particle connected to all other agents-particle; (b) an agent-particle only connected to agents-particle in its zone of influence;
(c) an agent-particle only connected to activated agents-particle in its influence zone.

Let us now present the algorithms of our neural network.
Algorithm 1: calculating agent-particle i input Ii
Ii 0;
For each agent-particle j having (distance(i, j)  zone of influence) do
Begin
P 0; S 0;
if (there is a connection between i and j) then PPij;
S Sij;
Ii  Ii +  S + 	 P;
End
Algorithm 2: updating agent-particle i state Ei
if Ii > then Ei 1 else Ei  0;
Algorithm 3: agent-particle i learning
For each connected agent-particle j where (Ei*Ej = 0 or distance(i, j) > zone of influence) then remove the connection;
For each agent-particle j having (distance(i, j) zone of influence) do
if (there is a connection between i and j) then Pij  Pij + R/2 else if (Ei*Ej = 1) then create a connection and Pij  R/2;

•
•
•
•
•
•
•
•
•

Finally here is, for one time step, the complete description of our model:
For each agent-particle i
evaluate density ui from neighbors j
calculate input Ii (algorithm 1)
update state Ei (algorithm 2)
learn for the detection (algorithm 3)
produce gathering signal on current patch i
(every patch diffuses its signal, Euler scheme)
follow the signal gradient
(every patch updates its signal due to evaporation)
diffuse in space

4.3. Structures detection simulation
We conducted two experiments in order to test the learning algorithm. One with the learning process, involving
the temporal similarity and another one without learning taking only into account the instantaneous similarity in all
calculations ( =0). We noticed that, even if the model does not include temporal information from the agentsparticle dynamics, it still detects structures (Fig. 5-a, 5-b, 5-c, 5-d). However, when looking closer to links weights,
they all have approximately the same weight. This is why all the structures have the same shading (proportional to
their weight). The system does not show any information on structures chronological formation. Indeed, the agentsparticle have not "learned" from previous relationships between them and the detection reflects only the immediate

1492

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

state of the system. On the other hand (Fig.5-1, 5-2, 5-3, 5-4), the learning process when activated ( =1/n),
strengthens connections between agents-particle that were historically similar and holds information on the timing of
group formation (different shading) and on agent-particle membership in a group. We can clearly observe the
differences between structures in the emergence.

Fig. 5. (a, b, c, d) Detection without learning (=0), only the instantaneous similarity is taken into account. (1,2,3 et 4) Detection in which
learning occurs after 40 iterations (=1/n). =0.3, ’=0.1,  = 1. The darkness of structures is proportional to the link weight.

The instantaneous similarity, the core of the neural network model, is defined here in a simple way. For other
specific taxis models, this similarity can be combined with several other similarity measures, depending on the
structure to be detected. However, the modeler has to keep in mind that the similarity function will impact on the
whole network model. To make trivial the threshold choice, we normalized to 1 all parameters.
Here, we just wanted to build a general framework without addressing specific modeling cases. Indeed, the
purpose of this paper was to show how an agent-oriented model could handle a mathematically described problem
and change the perspectives on the following outcomes. This is why we didn't perform a sensitivity analysis of
structures detection with respect to the network parameters (,  for the similarities contribution in the inputs
calculations and , ’ in the choice of group nature or density). Once the real taxis case taken, one can easily conduct
a complete study of the detection routine.
The structures reification is also trivial in an agent-oriented platform. The artifacts in Fig. 5 are made up with
objects links and gives an impression of continuity. It is therefore possible to create from those benches of links,
new agents to describe for example the differentiation process in cells aggregation.
5. Conclusion
This paper presents a novel approach to simulate taxis-based aggregation and structure detection. From the partial
differential equation model, we derived the basis of our agent-based model. This one is thus provided with precise
routines to implement spatial advection and diffusion processes, representing attraction and repulsion in a signal
sensitive population. The simulations effectively show the emergence of stable lifelike structures as in real cell
aggregation cases. This work then provides a generic framework, setting the stage for further work focusing on
specific taxis phenomena by conducting specific appropriate simulations. Actually, cells aggregation and
differentiation is certainly the following study we could conduct with the proposed system of agents-particle.
One of the major drawbacks of our approach – based on particle methods – is that simulations can be very
demanding on computational resources, even more with the second routine of detection that we introduced up to the
natural advection and diffusion dynamics. The simulations conducted here were made with Netlogo [17] to show the
effectiveness of the model, further modeling may require low-level languages or parallelism for speed and
efficiency.

Jean Marie Dembele and Christophe Cambier / Procedia Computer Science 9 (2012) 1484 – 1493

1493

References
1.

J.T., Bonner, 1967, The cellulars lime molds. Princeton University Press, Princeton, NJ.

2.

J.D., Murray, Mathematical Biology - Tome 2 : Spatial Models and Biomedical Applications. Springer, 2003.

3.

E. F., Keller, and L. A., Segel, 1970, Initiation of slime mold aggregation viewed as an instability. J. Theor. Biol. 26 (1970), 399–415.

4.

J.M., Dembele, C., Cambier, 2009. Improving lagrangian methods. Toward an agent-particle based method. In proceedings of
Simutools’09. Rome, Italie.

5.

I., Prigogine, and I., Stengers. 1984. Order out of chaos: man’s new dialogue with nature. Bantam, New York.

6.

J.-L., Deneubourg, J.-C., Grégoire, and E. Le Fort. 1990. Kinetics of larval gregarious behavior in the bark beetle Dendroctonus micans
(Coleoptera: Scolytidae). Journal of Insect Behavior 3:169–182.

7.

R.A., Gingold, J.J., Monaghan, 1977. Smoothed particle hydrodynamics: theory and application to non-spherical stars, Mon. Not. R.
Astron. Soc. 181, 375-389.

8.

P., Degond, and F. J.,Mustieles, 1990. A deterministic approximation of diffusion equations using particles, SIAM J. Sci. Stat. Comput.
11(2), 293.

9.

D., Grunbaum, and A., Okubo. 1994. Modelling social animal aggregations. Pages 296–325 in S. Levin, ed. Frontiers in mathematical
biology. Springer, New York.

10.

A., Mogilner, and L., Edelstein-Keshet. 1999. A non-local model for a swarm. Journal of Mathematical Biology 38:534–570.

11.

J. B., MacQueen, 1967. Some Methods for classification and Analysis of Multivariate Observations. Proceedings of 5th Berkeley.

12.

T., Zhang, R., Ramakrishnan, M., Livny, 1996. BIRCH: An Efficient Data Clustering Method for Very Large Databases. In Proceedings
of the 1996 ACM SIGMOD International Conference on Management of Data, pp 103--114, Montreal, Canada.

13.

M., Ester, H.-P., Kriegel, J., Sander, X., Xu, 1996. A Density-Based Algorithm for Discovering Clusters in Large Spatial Database with
Noise. In Proc. 2nd Int. Conf. on Knowledge Discovery and Data Mining (KDD'96 ). AAAI Press, Menlo Park, CA, pp. 226-231.

14.

T., Kohonen, 1984. Self-organization and Associative Memory. Springer-Verlag, Berlin, Heidelberg.

15. J. J. Hopfield, "Neural networks and physical systems with emergent collective computational abilities", Proceedings of the National
Academy of Sciences of the USA, vol. 79 no. 8 pp. 2554–2558, April 1982.
16.

D.O., Hebb,1949. The organization of behavior, Wiley, New York.

17.

U., Wilensky, 1999. NetLogo. http://ccl.northwestern.edu/netlogo. Center for Connected Learning and Computer-Based Modeling.
Northwestern University, Evanston, IL

