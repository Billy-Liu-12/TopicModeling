Applying Workflow to Experiment Control
in Virtual Laboratory
Łukasz Czekierda and Krzysztof Zieliński
Distributed Systems Research Group
Department of Computer Science
AGH – University of Science and Technology
al. Mickiewicza 30, 30-059 Kraków, Poland
{luke, kz}@ics.agh.edu.pl

Abstract. Virtual Laboratory (VLab) has been developed as a distributed component system supporting a remote access to physical devices via the Internet.
Unlike in typical VLabs, much attention has been paid to designing a state-ofthe-art architecture which facilitates among others exposing the functionality of
the devices, composing them into complex experiment stands as well as supervising in an interactive or automated way. The paper describes an application of
workflow to experiment control in the VLab. Nevertheless, the presented concept consisting in wrapping a workflow engine by a component of a selected
platform component has much more general nature.

1 Motivation of the Work
Virtual laboratories become popular nowadays. WWW resources direct us usually to
simple simulation programs from various disciplines implemented using Java applets,
ActiveX controls, etc. There are also environments which offer users an access to real
devices; the paper concentrates on VLabs understood according to such a meaning.
Virtualization technique makes it possible to see the equipment of the laboratory
not as a collection of heterogeneous physical devices but as software entities that
wrap their functionality and provide with a well-defined interface for remote management and configuration. This technique is widely accepted and does not pose a
considerable problem (using such technologies as Web Services), thus access via
Internet to devices such as radio-telescopes is currently almost an everyday practice.
Current virtual laboratories are to a great degree static. Devices are often bound
with their graphical user interface and sometimes with each other. Users are not able
to change the administratively pre-set order of actions and customize the equipment to
their needs. Nevertheless, there are a few exceptions to this, e.g. [2, 3].
A next generation VLab should offer much more features. The most crucial requirement is a clear separation of representation of the device functionality (its instrumentation) from usage scenarios. Thanks to the separation, both a single device or
set of them consistently interconnected can be controlled in many various ways depending on goals of performed activities, user’s permissions etc.
Interface exposed by the instrumented devices is usually tied to GUI used to influence the experiment course. In some cases the same activities could be performed by an
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 940 – 943, 2006.
© Springer-Verlag Berlin Heidelberg 2006

Applying Workflow to Experiment Control in Virtual Laboratory

941

agent – the user representative. Some experiments can be realized in a mixed mode –
the routine parts are performed automatically and the user takes a decision in crucial
moments. Experiment logic may be programmed by the VLab administrator. However,
in most cases it is better to allow users to do it by themselves. Performing the task must
be feasible even for people with no much programming skills – thus they must be provided with a proper tool – user-friendly yet powerful. Amongst many techniques available, using workflow seems to be the best solution.

2 Component-Based Architecture of Virtual Laboratory

experiment stand

VLab as most of the contemporary distributed systems has a layered architecture.
The lowest layer of the VLab – physical devices layer – is composed of a collection of heterogeneous physical devices. The second layer – instrumentation layer –
provides devices’ representatives exposing a
presentation
generic management and configuration interexperiment
face. For representation of virtualized devices
CORBA Component Model (CCM) [1] components have been chosen, their interface is exinstrumentation
pressed using Interface Definition Language
(IDL). CCM object definition clearly states
which channels (interfaces) the object accepts,
physical
devices
which interfaces it uses and which events it
emits and consumes, what definitely much
Fig 1. Multilayer architecture of
better characterizes the object interface than the
Fig. Laboratory.
1. Multilayer architecture
Virtual
traditional object-oriented languages.
of Virtual Laboratory
Thanks to the well-known CCM channel interface it can be automatically determined whether particular devices can be linked
via given channels or not. When the interfaces are not fully compatible, an adapter
can be used. This conglomerate can be called the experiment stand and is presented in
Fig. 1.
Some channels are devoted to external control – they can be attached to the user
elements or to elements playing the role of the user’s agents. The user should be allowed to supervise the operation of the agent. Agents and user application constitute
two upper layers of the architecture of the Virtual Laboratory – experiment and presentation, respectively. They have been also implemented as CCM components.

3 Embedding Workflow Engine Inside a Component
The idea implemented in the VLab has a much more general nature consisting in
encapsulating a workflow engine by a component of a given component platform.
This concept is illustrated in Fig. 2. The benefits of such approach are following:
• transparency and uniform representation – the object can be seen and used as any
other component (including assembling, configuration and deployment).

942

Ł. Czekierda and K. Zieliński

• precisely defined interface – workflow environments are able to run any process
instance, so the workflow engine lacks a well-defined interface with the external
world. Embedding it in the component forces to specify the exact interface.
Achieving the goal is in general not a straightforward undertaking. To the most
important issues which need to be considered belong:
• transforming the interface and communication – the concept assumes linking two
distinct worlds – external one with RPC-based communication and internal one
with other or not specified mechanism. Usually, providing an intermediate layer
bridging the communication will be necessary.
• providing the management interface – besides the interface used for communication with external partners, the component ruled by
monitoring
workflow needs an additional channel – for introducCCM
channel
component
ing process definition, starting, stopping or repeating
it, etc.
workflow
engine
workflow
• monitoring the workflow – workflow engines can be
configuration
engine
channel
usually monitored what allows users to e.g. check
the progress of the workflow execution.
communication
• evaluating portability and efficiency – workflow
channels
engines may need many special libraries and artifacts
Fig
2.
Placement
of
2. Placement workflow
of workto run. Moreover, running them with only business Fig.
engine
inside CCM
component.
flow
engine
inside
CCM
process instance requires loading all of the anyway. component
Thus, lightweight engines are desired.
In the context of the VLab, the concept has many advantages. All components used
in the experiment are uniformly represented and can be assembled together as well as
easily scheduled and deployed. With the ability not only to connect required elements
but also to define their behavior, users can construct complete experiments.

4 Implementing the Concept in CCM Component Platform
From among a few workflow platforms investigated (BPEL, YAWL), Java Business
Process Management (jBPM) [5] has been chosen. It easily integrates with chosen
CCM platform implementation – java-based openCCM from ObjectWeb.
jBPM is implemented according to UML activity diagram and is declared to support most of workflow patterns specified by van der Aalst [4]. jBPM combines
declarative and procedural approach of process behavior definition – its core is
expressed in XML-like jPDL language and actions (handlers) assigned with some
events can be written in java. This increases expressiveness of the workflow.
Process definition in jBPM consists of many nodes connected via transitions.
Nodes are visited by a token passing from a start to an end node. There are several
types of nodes; from the point of view of this discussion two are the most important:
• state nodes – store the token (pointing an active node) until an external event
moves it to a next node. State node is then a stable state.
• ordinary nodes – there can be assigned a piece of work to be done (action) to them.
The token leaves the node immediately after executing the action.

Applying Workflow to Experiment Control in Virtual Laboratory

943

jBPM does not directly support remote communication (especially CORBA). In
case of outgoing invocations (to external CORBA objects) it is possible to implement
handlers assigned with the node which are able to perform any action – in particular
do remote CORBA invocations. Incoming communication is much more difficult. In
authors’ implementation incoming operation invocations are parsed, converted by a
special intermediate layer to so called signals and assigned with a proper token. As a
result of receiving the signal, the token leaves the current state node, passes through
several nodes executing defined actions and stops in the next state node.
It is worth to emphasize roles of the VLab administrator and users in this context.
Administrator specifies the component’s interface and implements the handlers. The
single handler should encapsulate a simple functionality so as to be able to build the
behavior of the component in a fine-grained way. Constructing the workflow using
existing elements can be done by the users provided with a proper (graphical) tool.

5 Applying the Concept in the Virtual Laboratory – Case Study
The presented architecture has been implemented. To the collection of virtualized
devices belong mobile robots, a localization system, a video streaming server, and a
pan-tilt camera. Several experiments have been designed and implemented using
these devices, most of them give full control over the experiment course to the users.
The benefits of using workflow in the VLab are evidently visible especially in case
of experiments supervising a technological or computational process where finishing
task. Nevertheless, even using the mentioned virtualized devices it is possible to successfully apply workflow to experiment control.
The experiment stand contains the mobile robot and the localization system which
observes it. The robot is expected to come from the starting to the end point via several destinations on the experiment area with some obstacles placed. The role of
workflow is to lead it so as to avoid obstacles. Nevertheless, hitting one of them triggers notification received by the workflow and forces to return to the previous destination successfully reached. The experiment layer CCM component is connected to:
(1) several input channels notifying about reaching a destination, (2) input channel
notifying about hitting an obstacle or entering a forbidden area, (3) output management channel of the robot driving its wheels, (4) input management channel coming
from the user supervising the experiment and able to start, pause and finish it.

References
1. Object Management Group. CORBA Components, June 2002, formal/02-06-65.
2. Fjeldly T A. Shur M. S., Lab on the Web, Running Real Electronics Experiments via the
Internet, Wiley&Sons, IEEE Press, 2003.
3. Lawenda M., Meyer N., Workflow with Dynamic Management Scenarios in the Virtual
Laboratory, 6th CARNet Users Conference, ISBN 953-6802-04-X, September 27-29, 2004.
4. van der Aalst W.M.P., ter Hofstede A.H., Kiepuszewski B., Barros A., Workflow Patterns.
5. Koenig J. JBoss jBPM, White Paper, November 2004.

