Procedia Computer
Science
Procedia Computer
Procedia
ComputerScience
Science001(2010)
(2012)1–10
2155–2164

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Automatic Parameter Assessment of LogP-based Communication
Models in MPI Environments
D.R. Mart´ıneza,∗, V. Blancob , J. C. Cabaleiroa , T. F. Penaa , F. F. Riveraa,∗∗
a Dept.

Electronic and Computer Science, University of Santiago de Compostela
b Dept. Statistics and Computer Science, La Laguna University

Abstract
Communications in modern interconnection networks become a complex issue to deliver the highest performance
to the user. In MPI environments, this complexity leads to diﬀerent communication protocols for diﬀerent message
sizes. The characterization of these diﬀerent behaviors is important and useful for software developers and network
designers. This paper presents an automatic method to obtain a characterization of the communication behavior of a
speciﬁc MPI environment using LogP-based models. This procedure automatically detects the message sizes where
the communication behavior changes due to the inﬂuence of diﬀerent architectural features and protocols. Thereby, the
range of message sizes is split in diﬀerent intervals, in a transparent way to the user. Then, using LogP-based models,
each interval is characterized by its own set of parameters. The procedure is based on the parameterized roundtrip-time low-overhead microbenchmark. The detection of diﬀerent communication behaviors and the assessment
of the parameters of the LogP-based models were implemented in an easy to use statistical environment. Real MPI
environments were characterized using our proposal.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Performance modeling, LogP family models, MPI
1. Introduction
Analytical communication performance models play an important role in the development and improvement of
parallel algorithms. These models are an invaluable help to develop eﬀective parallel algorithms and to estimate
their performance before actually running them on a real parallel system [1]. Analytical models simplify the parallel
architecture characterization to a small number of parameters. Among them, Hockney [2], BSP [3] and LogP [4]
are well known distributed memory oriented models that simplify the parallel architecture characterization by using a
reduced number of parameters. Analytical communication models for predicting the performance of parallel programs
are based on this feature [5, 6].
The LogP model describes a parallel architecture using four parameters: latency (L), overhead (o), gap (g), and
number of processors (P). The LogP-based family of models has been found to be the most accurate set of models
∗ Corresponding

author
corresponding author
Email addresses: diego.rodriguez@usc.es (D.R. Mart´ınez), Vicente.Blanco@ull.es (V. Blanco), jc.cabaleiro@usc.es (J. C.
Cabaleiro), tf.pena@usc.es (T. F. Pena), ff.rivera@usc.es (F. F. Rivera)
∗∗ Principal

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.241

2156

D.R.
Mart´ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

2

for many modern interconnection networks. Diﬀerent communication models have been proposed as improvements
of the LogP model. The parameterized LogP model [7] is a slight extension of LogP, based on the redeﬁnition
of the meaning of some parameters. The HLogGP model [8] extends the LogP model to deal with heterogeneous
parallel systems. The main lack of the original LogP model is that it ignores the inﬂuence of message sizes in the
communication performance, therefore several extensions were developed in this direction. The most popular one is
the LogGP model [9] that adds the so called gap per byte parameter (G) to take into account large message sizes.
Other generalizations of the LogP model were also proposed using functions of the message size instead of constants
for L, o and g [10, 11]. In particular, the LoOgGP model [12] is a generalization of the LogP model in which both the
overhead (o) and the gap (g) present linear dependencies with the size of the message.
This paper presents an automatic method to characterize the communication behavior using a number of LogPbased models. This characterization uses the parameterized round-trip-time (PRT T ) low-overhead microbenchmark
proposed by Hoeﬂer et al. [13] to assess LogGP parameters. In order to improve this approach, the proposed automatic method considers a more complex LogP-based model which allows a more accurate characterization of the
communication behavior. This new method detects diﬀerent behavioral intervals of a communication environment
and calculates the corresponding parameter set of several LogP-based models on each interval.
The remainder of the paper is structured as follows. The theoretical basis of the proposed method are described in
Section 2. The proposed automatic method to detect diﬀerent communication behaviors and to assess the parameters
of the LogP-based models for each of them are described in Section 3. Section 4 shows some results of the proposed
method for diﬀerent message sizes in diﬀerent real MPI environments, using a modeling framework. Finally, Section 5
concludes the paper.
2. Assessment of LogP-based Models
Diﬀerent approaches have been considered to measure the LogP and LogGP parameters of a particular parallel
system. Pjeˇsivac-Grbov´ıc et al. [1] assess the values of the parameters of LogP and LogGP models using the so
called PLogP values [7]. Bell et al. [14] directly assess the LogGP values by running three diﬀerent benchmarks.
Hoeﬂer et al. [13] have developed a low-overhead approach that directly computes all LogGP parameters from single
measurements and without inter-dependencies to other LogGP parameters, avoiding propagation of ﬁrst-order errors.
Moreover, they have also taken into account the fact that most modern communication systems use message-size
dependent protocols to optimize communication, so these protocol switches are automatically detected. Their method
uses a version of the ping-pong microbenchmark between two nodes known as Parameterized Round Trip Time,
PRT T (N, D, S ), that is the time to complete the sending of N messages of size S , with a delay D between each
sending, and receiving the replica of the last send.
Using several conﬁguration sets of (N, D, S ), the overhead and gap parameters of the LogGP model can be assessed [13] based on the following expressions:
T o (s) =

PRT T (n, d(s), s) − PRT T (1, 0, s)
− d(1)
n−1

(1)

PRT T (n, 0, s) − PRT T (1, 0, s)
(2)
n−1
where d(s) > 2 × PRT T (1, 0, s), s is the message size, and n (the number of messages) is large enough to avoid
communication establishment eﬀects. Equations (1) and (2) correspond to the time to prepare a message of size s
to be fully delivered (that is the overhead) and the time that the sender needs to send a message of size s over the
network (that is the gap), respectively. Therefore, the overhead and gap parameters of some LogP-based models can
be obtained using equations (1) and (2). As an example, let’s consider the LogGP model. According to Hoeﬂer et.
al. [13], its overhead and gap parameters (o, g and G) can be obtained according to:
T g (s) =

g + G × (s − 1) = T g (s)

(3)

o = T o (1)

(4)

D.R. Mart´
ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

2157
3

Let’s consider the LoOgGP, which is a model that uses more parameters. In this case, two linear regressions are
needed to obtain the overhead and gap parameters of the LoOgGP model (o, O, g and G) [12]:
g + G × (s − 1) = T g (s)

(5)

o + O × (s − 1) = T o (s)

(6)

L = 0.5 × PRT T (1, 0, 1)

(7)

The latency parameter is independent of the message size. Moreover, in modern networks, there is an overlap
between latency and overhead [14] that does not allow an useful measurement of latency as deﬁned by the LogGP
model. Therefore, considering the same approach as Hoeﬂer et al., half of the round trip time of small messages can
be taken as an accurate approach to the latency:

Therefore, the assessment of the parameters of some LogP-based models requires several PRT T measurements
for diﬀerent (N, D, S ) conﬁgurations. For example, these measurements can be used to assess the LoOgGP parameter
set according to equations (5), (6) and (7).
Experimental results on diﬀerent systems [12] show that a given message size range can be split into intervals
in which T o (s) and T g (s) simultaneously presents a linear dependency with the size of the message. The boundaries
of these intervals can be matched with architectural features such as buﬀer sizes, MTU size or the switch between
transport protocols.
3. Characterization of Communication Behaviors
The communication process in a modern interconnection network becomes a thorny problem. The operating system, the communication middleware, and the network itself can inﬂuence the communication behavior. Moreover,
current network APIs perform diﬀerent transport protocols as a function of the message size to deliver the highest
performance to users. The combination of all these facts yields a complex communication behavior. A good characterization of a communication environment must accurately reﬂect this complexity.
In this paper, an automatic method to detect signiﬁcant changes in the behavior of a communication environment
is proposed. We have focused on the LoOgGP model because this it is one of the most complex and precise for
characterizing the experimental behavioral alterations in T o (s) and T g (s). Using this model, the interval detection
process is more accurate since the interval boundaries can be detected by two complementary variables simultaneously.
This fact leads to a more sensible interval detection than other approaches that use only T g (s), as in [13]. In any case,
several LogP-based models can be considered as simpliﬁcations of the more complex LoOgGP model. For example,
The LogGP model can be obtained by setting the O parameter to zero. Similarly, the LogP model can be obtained
from the LoOgGP one by just setting both O and G parameters to zero in the behavioral interval that contains the
smallest message size.
The proposed automatic method performs a careful handling of the T o (s) and T g (s) variables. While the main behavioral intervals can be detected during the execution of the PRT T microbenchmarks [13], we propose a post-mortem
analysis, considering the overall information of PRT T measurements, that allow us to use data mining techniques.
The detection of behavioral changes is performed, once all PRT T values have been measured. Then, the diﬀerent
behavioral intervals are detected and the parameters of the LoOgGP model for each interval are assessed as described
in Section 2. Despite the fact that the proposed method internally uses the LoOgGP model, it actually performs the parameter assessment for the LogP and LogGP, as their parameters can be directly derived from the LoOgGP parameter
set.
The main advantage of the proposed characterization over a manual inspection of the results is that it provides an
automatic methodology that facilitates its integration into more general tasks, such as message scheduling or adaptable
changes of algorithms [13]. In this case, post-mortem means that the detection process waits for all experimental
measurements, and in any case the whole process can be automatically performed. Therefore no user intervention
is needed. Also, application developers can beneﬁt from this characterization as they can make decisions about
application parameters based on precise information of the real behavior of communications. Moreover, this precise
characterization can be easily added to simulation environments based on analytical communication models, such as
DIMEMAS [6].

2158

D.R.
Mart´ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

4

Figure 1: Flowchart of the detection behavioral intervals process.

3.1. Detection of behavioral intervals
The detection of the behavioral intervals in a speciﬁc message size range is performed by two complementary
tasks. Basically, this process aims to detect non-linear behaviors in both T o (s) and T g (s) functions. Figure 1 shows the
ﬂowchart of the whole process. The ﬁrst task, called fracture detection, searches for discontinuities on both T o (s) and
T g (s). The second task, called clustering, searches for discontinuities in the ﬁrst derivative of these functions. This
task calculates estimations of some parameters in the locality of each message size, using this information to perform
a classiﬁcation by means of clustering techniques. Clustering was chosen because it is a robust and powerful technique, and it is already implemented in the most well-known statistical environments. Both tasks produce candidate
message sizes to be behavioral interval borders. These two tasks are necessary to detect the most important behavioral
alterations. Finally, these points are joined and the resulting interval division is checked to ensure that there is no
overlap between detected intervals, as well as to remove small clusters, that are not relevant.
This detection process can be tuned according to user requirements by means of the neighborhood. The neighborhood of a point of a variable consists on those points with the closest time and message size values. The size of the
neighborhood can be set using a distance in the time-size space. In any case, this distance sets the size of the locality
in both tasks, so it establishes the smallest interval detected by the method. Therefore, lower neighborhood implies a
tighter detection, whereas higher values implies that only coarse behaviors are detected.
3.1.1. Fracture detection task
The aim of this task is the detection of those points that present an abrupt alteration of the linear behavior of
T o (s) and T g (s). As long as a linear behavior is considered, the expected guideline is that adjacent message sizes
must have adjacent time values, apart from those points that are near to a fracture. These fractures corresponds to
interval borders between diﬀerent behavioral intervals. Figure 2 shows an outline of the basis of this task. This simple
example shows 15 experimental points as well as the neighborhood of two points: P1=(S1,T1) and P2=(S2,T2). In
this case, the size of the neighborhood is deﬁned as an Euclidean distance (NeigDist). Therefore, the neighborhood
of P1, Neig(S1), contains ﬁve experimental points, while the neighborhood of P2, Neig(S2), only has three points.
Note that P2 has the maximum time of its own neighborhood since this point is in the border of a fracture.
Figure 3 shows the pseudo-code of this task, considering the message size range [S min , S max ]. For each message
size (s), a neighborhood to each experimental point is established (lines 5 and 6). In this case, NEIGH is the parameter
that establishes the size of the neighborhood. Assuming that the linear dependency always presents a positive slope
for T o (s) and T g (s), if a point has the maximum time of its neighborhood (line 7), then there is a fracture just at the
corresponding message size of this point. The result of this task is a set of message sizes (the fracture set), that are
considered as candidates to be interval boundaries.
3.1.2. Clustering task
The second task (Figure 4) uses clustering techniques to detect behavioral changes in both T o (s) and T g (s). First,
local linear ﬁts of T o (s) and T g (s) are performed in the neighborhood of each message size (lines 5 and 6), obtaining
four variables: the local origin and the local slope for both time variables (lines 7 to 10). Note that these four variables
are local estimations of the overhead and the gap parameters of the LoOgGP model. These four variables as well as

D.R. Mart´
ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

2159
5

Figure 2: Outline of the basis of fracture detection task
1

NEIGH

/* Neighborhood distance */

2
3
4
5
6
7
8
9
10

{fractures} = ∅ /* Set of candidate message sizes */
for ( s in Smin to Smax ) do
{Neio } = GetNeighborhood(To [s], NEIGH)
{Neig } = GetNeighborhood(Tg [s], NEIGH)
if ( To [s] == maxTime({Neio }) OR Tg [s] == maxTime({Neig }) )
{fractures} = {fractures} ∪ {s}
end if
end for

11
12

return {fractures}
Figure 3: Pseudo-code of fracture detection task.

T o (s) and T g (s) themselves, constitute the patterns (points in a six-dimensional space) used by the clustering technique.
In order to guarantee a well-balanced contribution of each term, this variables has to be normalized just before the
clustering technique (line 12). In this case, T o (s) and T g (s) are linearly normalized, and the local ﬁts are normalized
by the sigmoid function to guarantee that the normalized range is not dominated by values far from the mean. An
agglomerative hierarchical technique [15] is then performed (line 13). This clustering technique was selected because
it is appropriate when the number of clusters is not known a priori, as in this case. It starts considering each point
in its own one-point cluster, and iteratively merging similar clusters by pairs until getting one global cluster. The
resulting structure, a dendrogram, is a hierarchical tree of similarity. Figure 5 shows an example of a dendrogram
representation. The dendrogram can be broken at diﬀerent levels of similarity that yield diﬀerent clusterings of the
data, so the optimum number of clusters has to be calculated (lines 15 to 20). This process starts in the top level
of the dendrogram, in which all the points are in just one cluster, and the number of clusters is increased while the
distance in the pattern space between the centroids of nearest clusters is higher than a certain threshold (THRES).
This threshold sets the minimum distance, in the six-dimensional space, to consider that two clusters can be clearly
identiﬁed. This parameter can be tuned by the user to obtain ﬁne details (low thresholds) or coarse behaviors (high
thresholds). The dash line in Figure 5 indicates the similarity of the optimum number of clusters that, in this case, sets
three diﬀerent clusters. This task returns the candidate points (borders) corresponding to the borders of the resulting
cluster classiﬁcation.

2160
1
2

D.R.
Mart´ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

6

NEIGH /* Neighborhood distance */
THRES /* Maximum distance allowed between cluster centroids */

3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23

for ( s in Smin to Smax ) do
{Neio } = GetNeighborhood( To [s], NEIGH )
{Neig } = GetNeighborhood( Tg [s], NEIGH )
Slo [s] = GetLinearFitSlope( {Neio } )
Oro [s] = GetLinearFitOrigin( {Neio } )
Slg [s] = GetLinearFitSlope( {Neig } )
Org [s] = GetLinearFitOrigin( {Neig } )
end for
Normalization( To , Slo , Oro , Tg , Slg , Org )
{dendrogram} = AgglomerativeClustering(To , Slo , Oro , Tg , Slg , Org )
nclus = 0
repeat
nclus = nclus+1
{intervals} = GetIntervals( {dendrogram}, nclus+1 )
{distances} = GetCentroidsDistance( {intervals} )
until ( min( {distances} ) < THRES )
{borders} = GetBorders( {intervals} )
return {borders}
Figure 4: Pseudo-code of clustering task.

Table 1: MPI communication environments in the testbed cluster (* BTL communication device driver).

Authors reference
GB+OpenMPI
GB+MPICH
IB+OpenMPI
IB+MVAPICH

Network
Gigabit Ethernet
Gigabit Ethernet
InﬁniBand
InﬁniBand

MPI implementation
Open MPI – TCP*
MPICH
Open MPI – OpenIB*
MVAPICH

4. Experimental Results
Experimental results of the automatic characterization method of a MPI environment are shown in this section. The
testbed platform is an Intel Xeon 3.2 GHz cluster with Linux 2.6.16. This testbed provides the user with diﬀerent MPI
communication options because it has two diﬀerent network interfaces (Gigabit Ethernet and InﬁniBand) and three
MPI implementations (OpenMPI, MVAPICH and MPICH). All communication environments are shown in Table 1.
As the considered LogP-models characterize point-to-point communications without network contention, only two
nodes of the cluster were considered in the experiments. To clarify the presentation of the results, the characterization
for both large and small message sizes are shown separately.
The proposed characterization method described in Section 3 was implemented in the R statistical environment [16]. This implementation allows the user to tune diﬀerent parameters, such as the neighborhood size, the
method (single link, complete link, etc.) and the metric (Euclidean, Manhattan, etc.) of the clustering technique [15],
as well as the threshold of the process to obtain the optimum number of clusters. In any case, the tool provides default
values for all these parameters. In this implementation, the neighborhood size refers to the minimal number of points
that an interval can have. The overall time of the characterization process is strongly dependent of the size of the ex-

D.R. Mart´
ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

2161
7

Figure 5: Example of a dendrogram

perimental sample. For example, in the case of thousands of PRTT measurements, the whole characterization process
takes a few seconds in a desktop computer.
4.1. Large message sizes
Measurements of diﬀerent PRT T conﬁgurations were performed for diﬀerent messages sizes, from 1 byte to
200 Kbytes, using diﬀerent increments between consecutive message sizes (from 256 bytes in the smallest message
sizes to 2 Kbytes in the largest ones). For each message size, the measurements were executed 10 times. The T o (s) and
T g (s) values were calculated using these PRT T measurements. The interval detection method was applied using 10%
of the total number of experimental points as the neighborhood size, and the complete link method with Manhattan
metric in the clustering technique. The clustering threshold was ﬁxed to 10% of the maximum theoretical distance
of the dendrogram space. This choice of parameter settings is based on the author’s experience. Table 2 shows the
LoOgGP parameters for each interval on the environments listed on Table 1. In this case, the fracture detection task
detects just one interval border in each platform, that is 32 Kbytes in GB+MPICH, 64 Kbytes in GB+OpenMPI and
12 Kbytes in both InﬁniBand environments. The other interval borders, that were detected by the clustering task,
reﬂects diﬀerent behaviors due to the diﬀerent dispersion of the experimental points. As an example, Figure 6 shows
the experimental data and the detected intervals on the GB+OpenMPI environment. In this case, the switch between
eager and rendezvous protocols exactly matches the border between the detected intervals (65 Kbytes).
4.2. Small message sizes
In this case, messages sizes from 1 byte to 4 Kbytes were considered, using diﬀerent increments between consecutive message sizes: from 10 bytes increment for message sizes lower than 1 Kbyte, to 30 bytes for the rest.
Measurements for each message size were executed 10 times. As in the previous case, the detection method was
applied using 10% of the total number of experimental points as the neighborhood size, the complete link method
with Manhattan metric, and the same clustering threshold (10% of the maximum theoretical distance). Table 3 shows
the LoOgGP parameters for each interval on the considered environments. In this case, no candidates were detected
by the fracture detection task. Therefore, all interval borders were detected by the clustering task. As an example,
Figure 7 shows the experimental data and the detected intervals on the GB+OpenMPI environment. Note that the detected border is very close to the actual MTU of the network (1500 bytes). There is no discontinuities in T o nor T g
functions, so the fracture detection task does not detect any border and it is only detected by the clustering task.

2162

D.R.
Mart´ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

Figure 6: Automatic interval detection in a GB+OpenMPI environment (large message sizes).

Figure 7: Automatic interval detection in a GB+OpenMPI environment (small message sizes).

8

2163
9

D.R. Mart´
ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10
Table 2: Results of LoOgGP parameter characterization for large sizes.

Environment
GB+OpenMPI

GB+MPICH

IB+OpenMPI

IB+MVAPICH

L (μs)

o (μs)

3972.0
3972.0
2340.0
2340.0
2340.0
195.7
195.7
178.5
178.5
178.5
178.5

9.97
216.41
12.65
-314.38
-427.67
5.98
41.66
3.82
41.30
40.68
49.60

O (μs/KB)
1.30
1.47
1.39
14.25
14.77
1.75
2.01
2.90
17.85
17.93
17.46

g (μs)
1.86
208.80
10.09
-146.65
-427.99
8.72
43.28
6.17
44.23
48.84
46.10

G (μs/KB)

Interval (bytes)

8.49
8.68
12.34
14.84
16.74
1.96
2.03
1.44
1.79
1.72
1.78

1 → 63489
65537 → 202753
1 → 32769
34817 → 161793
163841 → 202753
1 → 11265
12289 → 202753
1 → 11265
12289 → 55297
57345 → 94209
96257 → 202753

Table 3: Results of LoOgGP parameter characterization for small sizes.

Environment
GB+OpenMPI
GB+MPICH
IB+OpenMPI
IB+MVAPICH

L (μs)

o (μs)

3969.5
3969.5
2267.0
2267.0
188.0
251.0
251.0

8.26
9.89
12.22
13.73
6.11
3.90
4.32

O (μs/KB)
1.04
1.29
0.85
1.21
1.62
0.42
0.19

g (μs)

G (μs/KB)

Interval (bytes)

11.24
3.91
20.08
3.39
9.06
7.05
6.38

1.10
7.44
0.57
13.43
1.73
0.96
1.44

1→
1331 →
1→
1301 →
1→
1→
1271 →

1301
4091
1271
4091
4091
1241
4091

4.3. Discussion of results
Some detected interval boundaries can be easily associated with architectural characteristics of the communication
platforms. In the case of large message sizes, the switch point between the eager protocol and the rendezvous protocol
is 12 KB in InﬁniBand environments. In GB+OpenMPI environment, this point is actually 64 KB. For GB+MPICH
environment, the socket buﬀer size is 32 KB and the switch point between protocols is 128 KB.
A similar analysis can be performed for small message sizes. In Gigabit Ethernet environments, the main change
in the communication pattern is near to 1.5 Kbytes. This point matches the actual MTU of the network interface,
that is 1500 bytes. In both OpenMPI and MPICH executions, the ﬁrst detected interval (messages smaller than 1 KB)
has small slopes, so the LoOgGP model presents the same accuracy as the original LogP model. In InﬁniBand
environments, there are no substantial behavioral alterations.
This methodology provides an empirical characterization of the behavior of the performance, however it does not
provide information about the architectural characteristics that are responsible for the observed performance of the
communications. This task corresponds to the analyst. Studying the causes of some detected interval boundaries
can be a tricky task since some real behaviors are ruled by mechanisms that can not be characterized by a linear
communication model. In any case, note that these boundaries are automatically detected by the proposed method
and they reﬂect a characterization of the real behavior. Negative values of o and g parameters in the GB+MPICH
environment for large messages intervals are not surprising, as they match up with high values of G and O. This
situation actually means a poor performance of the communication protocol. Anyway, the range is always positive in
the domain of each detected interval.

2164

D.R.
Mart´ınez et al. / Procedia Computer Science 1 (2012) 2155–2164
D.R. Mart´ınez et. al. / Procedia Computer Science 00 (2010) 1–10

10

5. Conclusions
This paper presents a methodology to automatically obtain a complete characterization of the communication behavior in MPI environments. This method automatically detects the message sizes where the communication behavior
changes. Thereby, the range of message size can be split in diﬀerent intervals. As the communication behavior inside each interval presents a linear dependency with the message size, each interval can be characterized by its own
LogP-based parameter set.
Both the parameter assessment and the detection of diﬀerent communication behaviors are obtained using PRT T
microbenchmark measurements. The detection process splits the message size range into continuous intervals with
diﬀerent behaviors of overhead and gap. The procedure ﬁnds signiﬁcant changes on both features, and groups PRT T
measurements based on the similarity of the parameters estimation using data mining techniques. The parameters of
some LogP-based models are assessed for each message size interval.
Some practical results in real systems show the accuracy of the method as it can automatically detect architectural
characteristics that inﬂuence the performance of the communications on MPI environments. In any case, the intervals
show diﬀerent behaviors in the communication times whatever the reason be, and this is a valuable result for software
and hardware developers.
Acknowledgement
This work was supported by the Spanish Ministry of Education and Science through the FPI programme and
through TIN2007-67537-C03-01 and TIN2008-06570-C04-03 projects. Moreover, it has been developed in the framework of the European network HiPEAC-2 and the Spanish network CAPAP-H.
References
[1] J. Pjˇesivac-Grbov´ıc, T. Angskun, G. Bosilca, G. Fagg, E. Gabriel, J. Dongarra, Performance analysis of MPI collective operations, in: Proc.
19th IEEE International Parallel and Distributed Processing Symposium, 2005.
[2] R. Hockney, The communication challenge for MPP: Intel Paragon and Meiko CS-2, Parallel Computing 20 (1994) 389–398.
[3] L. G. Valiant, A bridging model for parallel computation, Communications of the ACM 33(8) (1990) 103–111.
[4] D. E. Culler, R. M. Karp, D. A. Patterson, A. Sahay, K. E. Schauser, E. Santos, R. Subramonian, T. von Eicken, LogP: Towards a realistic
model of parallel computation, in: Principles Practice of Parallel Programming, 1993.
[5] D. Sundaram-Stukel, M. K. Vernon, Predictive analysis of a wavefront application using LogGP, in: Seventh ACM SIGPLAN Symposium
on Principles and Practice of Parallel Programming, 1999.
[6] R. M. Badia, G. Rodr´ıguez, J. Labarta, Deriving analytical models from a limited number of runs, in: Parallel Computing (ParCo), 2003.
[7] T. Kielmann, H. E. Bal, S. Gorlatch, Bandwidth-eﬃcient collective communication for clustered wide area systems, in: International Parallel
and Distributed Processing Symposium, IPDPS 2000, 2000.
[8] J. Bosque, L. Perez, HLogGP: a new parallel computational model for heterogeneous clusters, in: Proc. IEEE International Symposium on
Cluster Computing and the Grid CCGrid 2004, 2004, pp. 403–410.
[9] A. Alexandrov, M. F. Ionescu, K. E. Schauser, C. Scheiman, LogGP: Incorporating long messages into the LogP model for parallel computation, Journal of Parallel and Distributed Computing 44 (1997) 71–79.
[10] W. Amme, P. Braun, W. L¨owe, E. Zehendner, LogP modelling of list algorithms, in: 11th Symposium on Computer Architecture and High
Performance Computing, 1999.
[11] K. K. Keeton, T. E. Anderson, D. A. Patterson, LogP quantiﬁed: The case for low-overhead local area networks, in: Hot Interconnects III: A
Symposium on High Performance Interconnects, 1995.
[12] D. R. Mart´ınez, J. C. Cabaleiro, T. F. Pena, F. F. Rivera, V. Blanco, Accurate analytical performance model of communications in MPI applications, in: 8th International Workshop on Performance Modeling, Evaluation, and Optimization of Ubiquitous Computing and Networked
Systems (PMEO UCNS’09), 2009.
[13] T. Hoeﬂer, T. Schneider, A. Lumsdaine, LogGP in theory and practice - an in-depth analysis of modern interconnection networks and
benchmarking methods for collective operations, Simulation Modelling Practice and Theory 17 (9) (2009) 1511 – 1521, advances in System
Performance Modelling, Analysis and Enhancement.
[14] C. Bell, D. Bonachea, Y. Cote, J. Duell, P. Hargrove, P. Husbands, C. Iancu, M. Welcome, K. Yelick, An evaluation of current highperformance networks, in: Proc. International Parallel and Distributed Processing Symposium, 2003.
[15] A. K. Jain, M. Murty, P. J. Flynn, Data clustering: A review, ACM Computing Surveys 31 (3) (1999) 264–323.
[16] R Development Core Team, R: A Language and Environment for Statistical Computing, R Foundation for Statistical Computing, Vienna,
Austria, ISBN 3-900051-07-0 (2006).
URL http://www.R-project.org

