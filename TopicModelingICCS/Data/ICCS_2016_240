Procedia Computer Science
Volume 80, 2016, Pages 1232–1241
ICCS 2016. The International Conference on Computational
Science

A Heuristic Algorithm for Multi-Site Computation
Oﬄoading in Mobile Cloud Computing
Nur Idawati Md Enzai1∗and Maolin Tang2†
1

nuridawati.mdenzai@hdr.qut.edu.au
2
m.tang@qut.edu.au

Abstract
Due to limitation of mobile device in terms of battery life and processing power, Mobile Cloud
Computing (MCC) has become an attractive choice to leverage this shortcoming as the mobile
computation could be oﬄoaded to the cloud, which is so-called mobile computation oﬄoading.
Existing research on mobile computation oﬄoading considers oﬄoading a mobile computation
to a single cloud. However, in the real world a computation service could be provided by multiple
clouds and each computation service. Thus, a new and interesting research problem in mobile
computation oﬄoading is how to select a computation service for each of the computation tasks
of a mobile computation such that the computation time of the mobile computation, the energy
consumption of the mobile device and the cost of using the computation services are minimized.
This is so called multi-site computation oﬄoading in mobile cloud computing. In this paper we
formulate the multi-site computation oﬄoading problem, propose a heuristic algorithm for the
multi-site computation oﬄoading problem and evaluate the heuristic algorithm.
Keywords: Computation oﬄoading, mobile cloud computing, scheduling, heuristic algorithm

1

Introduction

Cloud computing provides services to clients in forms of processing and storage without the need
for clients to install hardware on their side. As the number of mobile users increases, the concept
of Mobile Cloud Computing (MCC) emerges. Dinh, Lee, Niyato, and Wang deﬁne MCC as the
cloud provisioning of data processing and storage services for mobile users [6]. High processing
speed and powerful memory capacity of mobile device are not essential because clouds can
process all the complicated computing modules. Therefore, mobile device can take advantage
of cloud services to perform large amounts of computation (instructions), which is so called
∗ N. I. Md Enzai is with School of Electrical Engineering and Computer Science, Queensland University of
Technology, 2 George Street, Brisbane, Australia and Faculty of Electrical Engineering, Universiti Teknologi
Mara (UiTM), 23000 Dungun Terengganu, Malaysia
† M. Tang is with School of Electrical Engineering and Computer Science, Queensland University of Technology, 2 George Street, Brisbane, Australia

1232

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.490

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

N. I. Md Enzai and M. Tang

Computation Oﬄoading. Kumar and Lu prove that computation oﬄoading is beneﬁcial with
computation-intensive tasks [10].
To cloud improve the performance of a mobile computation, the tasks of the computation
could be oﬄoaded to multiple clouds. A main motivation for multi-cloud is the ability to oﬀer
diﬀerent prices at diﬀerent performances such as computation time [11]. Moreover, application
designers may aim to achieve diﬀerent performance objectives (e.g. throughput, reliability,
cost). This can be achieved by utilizing the resources in cloud providers that have diﬀerent
performance capacities and charged prices. Multi-cloud resource allocation also beneﬁts from
the best combination of computation services from multi-cloud providers [14].
To our knowledge, most computation oﬄoading works only consider one single cloud provider
[4, 5, 8, 9]. Wu and Huang proposed mobile cloud service composition and Heo, Kim, and Suh
distribute task sharing to multiple clouds to reduce delay for online gaming, but both works do
not address scheduling problem [7, 15]. Meanwhile other multi-cloud resource allocation and
scheduling works do not consider mobile device in the problem [3, 2, 13, 14]. Our work also
takes into account multiple objectives instead of dealing with them separately.
Even though multi-site computation oﬄoading has been addressed, only one cloud provider
is considered. Even if multi-cloud is considered, only the assignment or mapping part is covered.
Whereas, in the case of computational tasks workﬂow, the tasks need to be scheduled as well.
Current multi-cloud oﬄoading works also do not address energy, computation time and price
simultaneously.
We aim to assign the workﬂow of computational tasks to services provided by clouds or
mobile device as well as schedule them while minimizing overall mobile user requirements namely
energy, completion time and price. From the computational point of view, computational tasks
workﬂow assignment and scheduling problem is a typical constrained combinatorial optimization
problem. Even though clouds are assumed to always be able to cater the execution of tasks due
to its multi-tenancy features, mobile device on the other hand is assumed to be able to handle
only a particular number of tasks at a time.
An example of MCC application scenario is when a mobile user travels to foreign country
and lost his or her way. As Global Positioning System (GPS) alone may not be enough, the
user may capture short video or images and send them to the cloud to be processed to obtain
information of the whereabouts. This involves high processing power to extract features and
match with large repository [16]. The processed data will give the user some information on
his or her location. The user may also want to make use of social media for example automatic
blogging as addressed in [12] and translation services as provided by [1]. However, a mobile
user is constrained in terms of mobile device battery life, timing and monetary budget. Instead
of relying to a single cloud provider, a mobile user may include more cloud providers with more
services and varying capacities to choose from.
Since this is our preliminary research on the problem, we propose a heuristic algorithm to
further improve the quality of solutions. Diﬀerent from the existing multi-site computation
oﬄoading algorithm, this new heuristic algorithm also schedules the computational tasks at
cloud providers and mobile device as well as addresses three criteria namely energy consumption
of mobile device, tasks completion time and charged price at the same time.
The remainder of the paper is organized as follows. First of all, we formulate the research
problem in Section 2. After that, we present our heuristic algorithm and evaluation results
in Section 3 and Section 4, respectively. This research is ﬁnally concluded and future work is
discussed in Section 5.
1233

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

2

N. I. Md Enzai and M. Tang

Problem Formulation

Our goal is to assign all the computation tasks in the workﬂow of a mobile computation to
either a cloud that provides the corresponding computation service or the mobile device and
to schedule the computation tasks assigned to the clouds and mobile device such that the
following three objectives are minimized simultaneously: the energy consumption of the mobile
device, the total computation time, and the cloud computing cost incurred by the computation
oﬄoading. Figure 2 is an instance of the workﬂow of a mobile computation which has 10
computation tasks and the control dependencies between them.

Figure 1: An instance of workﬂow

2.1

Inputs

1. A computation workﬂow is represented as a Directed Acyclic Graph (DAG): G = (V, E)
where V = {v1 , v2 , ..., vm } is a set of computation tasks, e =< vi , vj >∈ E if computation
task vi must have ﬁnished before computation task vj can start, where 1 ≤ i, j ≤ m.
A computation task vi is described as a 2-tuple, datai , insti where datai is the data
size to be processed by the computation task in megabytes and insti is the number of
instructions in the computation task in millions.
2. All available services for each of the computation tasks,
SV C = (svc11 , svc12 , ..., svc1k1 ), (svc21 , svc22 , ..., svc2k2 ), ..., (svcm1 , svcm2 , ..., svcmkm )
where svcij represents the j th service of computation task vi and ki is the total number
of services of computation task vi .
3. A set of computation service providers for each computation task: P = {p0 , p1 , ..., pj , ..., pn }
where p0 represents the mobile device and {p1 , ..., pj , ..., pn } represent the cloud providers.
4. All provided services by each provider
SV C = (svc01 , svc02 , ..., svc0k0 ), (svc11 , svc12 , ..., svc1k1 ), ..., (svcn1 , svcn2 , ..., svcnkn ), where
svcij represents the j th service of provider pi and ki is the total number of services of
provider pi .
5. Mobile device is connected to each cloud service provider through wireless link connection.
Mobile device also acts as a coordinator for communication between cloud services. A set
of links between mobile device and cloud services are represented as L = {l1 , ..., lj , ..., ln }
where 1 ≤ j ≤ n and n represents number of cloud services.
1234

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

2.2

N. I. Md Enzai and M. Tang

Output

An assignment and scheduling plan X of computation tasks V such that the objective function
Obj(X) is maximal. Let X denote an assignment and scheduling plan for computation tasks
V as shown in Eq. 1 below:
X

=

((M1 , S1 ), (M2 , S2 ), ..., (Mn , Sn ))

(1)

where Mi represents the selected service for computation task vi and Si represents the starting
time of Mi .
Equation 2 gives the deﬁnition of the objective function value for X.
3

Obj(X) =
k=1

Qmax
− Qk (X)
k
max
Qk − Qmin
k

∗ wk

(2)

where Qk (X) is the value of X for criterion k, Qmax
and Qmin
represent the possible
k
k
maximal and minimal values of criterion k respectively and wk is the weight for criterion k,
where 1 ≤ k ≤ 3 and w1 + w2 + w3 = 1.

2.3

Constraint

Workﬂow scheduling is subject to the control dependency constraint as in Equation 3 below:
F T (vi ) ≤ ST (vj )

(3)

where F T (vi ) is the ﬁnish time of computation task vi , ST (vj ) is the start time of computation
task vj , and < vi , vj >∈ V .

2.4

Criteria Values

There are two types of cost value for each criterion (energy, ﬁnishing time and price), namely
computation and communication. Computation corresponds to nodes in the workﬂow and
communication corresponds to edges in the workﬂow. Computation cost also includes oﬄoading
cost if a computation task is assigned to a cloud service.
1. Computation Cost for a computation task vi at a service svcxy .
Oﬄoading time OTixy is formulated as follows:
OTixy =

datai
bwsxy

(4)

where bwsxy is the bandwidth to send from mobile device to svcxy .
Therefore, computation time CTixy is formulated as follows:
CTixy =

insti
+ OTixy
speedxy

(5)

where speedxy is the processing speed of svcxy .
Oﬄoading energy OEixy is formulated as follows:
OEixy = OTixy ∗ powers

(6)
1235

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

N. I. Md Enzai and M. Tang

where powers represents power consumed by mobile device to send to cloud service
Therefore, computation energy CEixy is formulated as follows:
CEixy = powerxy ∗ CTixy + OEixy

(7)

where powerxy = 0, if 1 ≤ x ≤ n with n number of providers or powerj = 10, if x = 0
because we are concerned with power consumption of mobile device only. Processing
power of svcxy is represented by powerxy .
Oﬄoading price OPixy is charged by the receiving side of cloud service and is formulated
as follows:
datai
∗ pricexy
(8)
OPixy =
bwsxy
Computation Price CPixy is formulated as follows:
CPixy = CPixy ∗ pricexy + OPixy

(9)

if x = 0, pricexy = 0, therefore CPixy = 0
2. Communication cost is incurred when there exists an edge e between computation task vi
which is assigned to service svcx1 y and computation task vj which is assigned to service
svcx2 y where x1 = x2 which means that they are assigned to diﬀerent providers. The
computation task vi precedes computation task vj .
if x1 = 0 and 1 ≤ x2 ≤ n, Transmission Time T Tij is formulated as follows:
T Tij =

datai
bwsx2 y

(10)

Therefore, Transmission Energy T Eij is formulated as follows:
T Eij = T Tij ∗ powers

(11)

Meanwhile, Transmission Price T Pij is formulated as follows:
T Pij = T Tij ∗ pricex2

(12)

where pricexy is the price charged by svcxy
If x2 = 0 and 1 ≤ x1 ≤ n, Transmission Time T Tij is formulated as follows:
T Tij =

datai
bwrx1 y

(13)

Therefore, Transmission Energy T Eij is formulated as follows:
T Eij = T Tij ∗ powerr

(14)

Meanwhile, Transmission Price T Pij is formulated as follows: Meanwhile, Transmission
Price T Pij is formulated as follows:
T Pij = T Tij ∗ pricex1
1236

(15)

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

N. I. Md Enzai and M. Tang

If 1 ≤ x1 ≤ n and 1 ≤ x2 ≤ n, Transmission time T Tij is formulated as follows:
T Tij =

datai
datai
+
bwrx1 y
bwsx2 y

(16)

Therefore, Transmission Energy T Eij is formulated as follows:
T Eij = (

datai
datai
) ∗ powerr + (
) ∗ powers
bwrx1 y
bwsx2 y

(17)

Meanwhile, Transmission Price T Pij is formulated as follows:
T Pij = (

datai
datai
) ∗ pricex1 + (
) ∗ pricex2
bwrx1 y
bwsx2 y

(18)

3. Total Cost for an allocation or scheduling plan, X for n number of computational tasks of a
workﬂow G is derived from total cost for nodes (computation) and edges (communication):
Latest Finish Time, LF T (X) is formulated as follows:
LF T (X)

=

max (Fi )

(19)

i∈vexit

where vexit refers to exit computation tasks in the workﬂow G and Fi is the ﬁnishing time
of an exit task vi .
Energy consumed by mobile device, Energy(X) is formulated as follows:
Energy(X) =

CEixy +
vi ∈V,svcxy ∈SV C

T Eij

(20)

vi ∈V,vj ∈V

Price charged on the mobile device user, P rice(X) is formulated as follows:
P rice(X) =

CPixy +
vi ∈V,svcxy ∈SV C

3

T Pij

(21)

vi ∈V,vj ∈V

Algorithm Description

For the above formulated problem, a greedy hill climbing is developed, as presented in Algorithm 1. The algorithm is a hill-climbing one. It begins with an initial assignment of all
computational tasks in a workﬂow at mobile device shown in Steps 1-2. All the tasks are scheduled at mobile device using critical path analysis. The objective function value for the initial
1237

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

N. I. Md Enzai and M. Tang

solution is calculated as in Equation 2.
1 Initialize a solution X;
2 Assign G to mobile device, p0 ;
3 Schedule G;
4 Calculate ST s and F T s based on Equations 22, 23and 24;
5 Calculate LF T (X) based on Equation 19;
6 Calculate Energy(X) based on Equation 20;
7 Calculate P rice(X) based on Equation 21;
8 Calculate Obj(X) based on Equation 2;
9 forall the vi ∈ V do
10
Ni = N EIGHBOU R(vi );
11
Generate new assignment for vi from Ni ;
12
Reschedule G;
13
Recalculate ST s and F T s;
14
Recalculate LF T (X);
15
Recalculate Energy(X);
16
Recalculate P rice(X);
17
Recalculate Obj(X );
18
Select Ni such that Obj(X ) is maximum;
19 end
20 if Obj(X ) > Obj(X) then
21
Accept the solution changes;
22
X=X;
23
goto step 8
24 else
25
Stop search
26 end
Algorithm 1: Algorithm 1: Heuristic Algorithm
Formulation of start time, ST for computation task is as follows:
ST (ventry )
ST (vi )

=

=

max

vp ∈pred(vi )

0
(F T (vp ))

(22)
(23)

Formulation of ﬁnish time, F T for computation task is as follows:
F T (vi )

=

maxvc ∈succ(vi ) (T Tvi vc ) + ST (vi ) + CTixy

(24)

where CTixy is the computation time of vi at svcxy where pred(vi ) = parent of computation
task, vi and succ(vi ) = child of computation task vi .

4

Evaluation

This section evaluates the performance of the heuristic algorithm (HA). In order to evaluate
the quality of the solutions generated by the HA, we also developed and implemented another
algorithm using Exhaustive Search (ES). It was guaranteed that the ES always generated an optimal solution. However, the computation of the ES increased exponentially when the problem
size increased.
1238

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

4.1

N. I. Md Enzai and M. Tang

Experimental Environment

Both the HA and the ES were implemented using C++ programming language. All the experiments were conducted in a desktop computer with a 3.4 GHz Intel 4 Core(s) and an 8 GB
RAM.

4.2

Experimental Design

The computation time and quality of the results produced by the HA depend on the size of
the problem, which is dependent on two parameters. 1) The number of computational tasks
in the workﬂow. 2) The number of available services for each of the computational task. To
construct the test problem, a 10 tasks workﬂow was used (see Figure 2) as the building block.
10 workﬂows of 15 tasks were generated randomly. The values of attributes of workﬂow tasks
and cloud services are as shown in Table 1:
Attributes
Processing speed of cloud service
Bandwidth between mobile device
and cloud service
Output data size of computational task

Range
10,000 - 70,000 Million
Instructions Per Second (MIPS)
10 - 20 MBps
10 - 20 MB

Table 1: Range of values of attributes
For mobile device, no price is charged, the Wi-Fi transmission power is 2.3 W and the
processing speed is ﬁxed to 2000 MIPS.

4.3

Experimental Results

We randomly generated 10 test problems, each of which had 10 tasks and each of the computation tasks had 15 computation service providers. In order to test the quality of the solutions
generated by the HA, we also designed and implemented an optimal algorithm which uses
exhaustive search.
The HA and optimal algorithm were used to solve a number of randomly generated test
problems with 10 computational tasks. The computation times and the solutions are shown in
Table 2, where CT stands for Computation Time in seconds and LFT stands for Latest Finish
Time in seconds.
However, when we increase the number of services to 10 services, there are 1010 combinations
which could lead to very large computation time to generate all possible combinations and ﬁnd
the best solution from among them. Therefore, we limit the computation time to one hour
which is equal to 3600 seconds and ﬁnd the best solution within that amount of computation
time. The results are shown in Table 5. As can be seen from Table 5, Exhaustive Search
could ﬁnd similar or better solution than Heuristic Algorithm for four out of ten workﬂows.
Meanwhile Table 6 shows that Exhaustive Search method could ﬁnd better solution than HA
for one workﬂow only out of ten workﬂows. This may indicate that though Exhaustive Search
is capable to obtain better solution quality than our HA, but it takes very large computation
time especially when the problem size increases, in this case up to 15 services. On the other
hand, our HA could ﬁnd good results less than one second. If the problem size is increased
further, Exhaustive Search may not be able to obtain better quality solutions than our HA for
all 10 randomly generated workﬂows within one hour.
1239

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

Test
Index
1
2
3
4
5
6
7
8
9
10

CT
0.049
0.042
0.063
0.050
0.053
0.056
0.048
0.063
0.069
0.058

Heuristic Algorithm
Obj(X)
Price LFT
0.971586 1.3287
10
0.963549 1.7680
8
0.980348 1.0765
8
0.975632 1.3287
8
0.977055 1.0765
9
0.977747 1.0765
7
0.973391 1.0765
7
0.970706 2.0825
7
0.967394 2.0825
11
0.974327 1.0765
9

Energy
40.5879
55.4040
42.0900
40.9048
42.0900
41.8248
41.5079
38.5090
38.5090
42.0900

Obj(X)
0.881012
0.771434
0.767645
0.96318
0.764327
0.766674
0.763215
0.76881
0.761059
0.762212

N. I. Md Enzai and M. Tang

Exhaustive Search
Price LFT
Energy
1.8346
21
184.1550
0.8347
38
361.9988
0.8347
40
361.9988
0.9563
10
38.9690
0.8347
41
361.9988
0.8347
39
361.9988
0.8347
39
361.9988
0.8347
39
361.9988
0.8347
43
361.9988
0.8347
41
361.9988

Table 2: Comparison results and computation time of HA and Exhaustive Search of 10 tasks
and 15 services test problem

Figure 2: Eﬀect of number of services

5

Conclusion and Future Work

This paper has formulated a new mobile computation oﬄoading problem, namely, multi-site
computation oﬄoading in mobile cloud computing, and transformed the new computation ofﬂoading problem into a multi-objective combinatorial optimization problem. The combinatorial optimization problem has three objectives: (1) to minimize the energy consumption of the
mobile device; (2) to minimize the computation time; (3) to minimize the total cost of the
computation incurred by cloud computing. The multi-objective optimization problem has been
transformed into a weighted single-objective optimization problem and a heuristic algorithm
has been proposed for solving the weighted single-objective optimization problem. The proposed heuristic algorithm has been evaluated by experiments and the experimental results have
shown that the heuristic algorithm can produce good quality solutions in a reasonable time for
those test problems.
This is the ﬁrst attempt on the multi-size computation oﬄoading problem in mobile cloud
computing. In the future we shall study the scalability of the heuristic algorithm. We shall also
1240

A Heuristic Algorithm for Multi-Site Computation Oﬄoading · · ·

N. I. Md Enzai and M. Tang

design a genetic algorithm for the problem.

References
[1] One hour translation:
translation services.
[online], January 2016.
https://www.
onehourtranslation.com/.
[2] Luiz F Bittencourt, Edmundo RM Madeira, and Nelson LS Da Fonseca. Scheduling in hybrid
clouds. Communications Magazine, IEEE, 50(9):42–47, 2012.
[3] Luiz Fernando Bittencourt and Edmundo Roberto Mauro Madeira. Hcoc: a cost optimization
algorithm for workﬂow scheduling in hybrid clouds. Journal of Internet Services and Applications,
2(3):207–227, 2011.
[4] Byung-Gon Chun, Sunghwan Ihm, Petros Maniatis, Mayur Naik, and Ashwin Patti. Clonecloud:
elastic execution between mobile device and cloud. In Proceedings of the sixth conference on
Computer systems, pages 301–314. ACM, 2011.
[5] Eduardo Cuervo, Aruna Balasubramanian, Dae-ki Cho, Alec Wolman, Stefan Saroiu, Ranveer
Chandra, and Paramvir Bahl. Maui: making smartphones last longer with code oﬄoad. In
Proceedings of the 8th international conference on Mobile systems, applications, and services, pages
49–62. ACM, 2010.
[6] Hoang T Dinh, Chonho Lee, Dusit Niyato, and Ping Wang. A survey of mobile cloud computing: architecture, applications, and approaches. Wireless communications and mobile computing,
13(18):1587–1611, 2013.
[7] Yoonseok Heo, Taeseop Kim, and Doug Young Suh. Video streaming for multi-cloud game. In
Advances in Multimedia Information Processing–PCM 2015, pages 275–284. Springer, 2015.
[8] Roelof Kemp, Nicholas Palmer, Thilo Kielmann, and Henri Bal. Cuckoo: a computation oﬄoading framework for smartphones. In Mobile Computing, Applications, and Services, pages 59–79.
Springer, 2010.
[9] Sokol Kosta, Andrius Aucinas, Pan Hui, Richard Mortier, and Xinwen Zhang. Thinkair: Dynamic
resource allocation and parallel execution in the cloud for mobile code oﬄoading. In INFOCOM,
2012 Proceedings IEEE, pages 945–953. IEEE, 2012.
[10] Karthik Kumar and Yung-Hsiang Lu. Cloud computing for mobile users: Can oﬄoading computation save energy? Computer, (4):51–56, 2010.
[11] Ang Li, Xiaowei Yang, Srikanth Kandula, and Ming Zhang. Cloudcmp: comparing public cloud
providers. In Proceedings of the 10th ACM SIGCOMM conference on Internet measurement, pages
1–14. ACM, 2010.
[12] Hongzhi Li and Xian-Sheng Hua. Melog: mobile experience sharing through automatic multimedia
blogging. In Proceedings of the 2010 ACM multimedia workshop on Mobile cloud media computing,
pages 19–24. ACM, 2010.
[13] Ruben Van den Bossche, Kurt Vanmechelen, and Jan Broeckhove. Cost-eﬃcient scheduling heuristics for deadline constrained workloads on hybrid clouds. In Cloud Computing Technology and
Science (CloudCom), 2011 IEEE Third International Conference on, pages 320–327. IEEE, 2011.
[14] Simon S Woo and Jelena Mirkovic. Optimal application allocation on multiple public clouds.
Computer Networks, 68:138–148, 2014.
[15] Huijun Wu and Dijiang Huang. Mosec: Mobile-cloud service composition. In Mobile Cloud
Computing, Services, and Engineering (MobileCloud), 2015 3rd IEEE International Conference
on, pages 177–182. IEEE, 2015.
[16] Zhi Ye, Xin Chen, and Zhu Li. Video based mobile location search with large set of sift points in
cloud. In Proceedings of the 2010 ACM multimedia workshop on Mobile cloud media computing,
pages 25–30. ACM, 2010.

1241

