p2pCM: A Structured Peer-to-Peer
Grid Component Model
Carles Pairot1, Pedro García1, Rubén Mondéjar, and Antonio F. Gómez Skarmeta2
1

Department of Computer Science and Mathematics, Universitat Rovira i Virgili
Avinguda dels Països Catalans 26, 43007 Tarragona, Spain
{carles.pairot, pedro.garcia}@urv.net
2 Department of Computer Engineering, Universidad de Murcia
Apartado 4021, 30001 Murcia, Spain
skarmeta@fcu.um.es

Abstract. In this paper we present p2pCM, a new distributed componentoriented model aimed to structured peer-to-peer grid environments. Our model
offers innovative contributions like a lightweight distributed container model,
an adaptive component activation mechanism, which takes into account network proximity, and a decentralized component location and deployment service. We believe that all of the features our component-oriented model provides
can be very promising for the development of future wide-area distributed applications.

1 Introduction
Developers face an important problem when willing to build wide-area componentbased distributed applications. Practically there are no frameworks oriented to such
target market. In this paper we present p2pCM: a peer-to-peer component model for
building distributed component-based applications on top of a structured peer-topeer grid. Our model offers traditional and novel component services by means of an
underlying object middleware (Dermi [3]). To the best of our knowledge, this is the
first component model built on top of a structured P2P grid infrastructure.
The main contributions of this paper are the design of a new wide-area component
model that runs on top of a structured P2P grid infrastructure; the utilization of a decentralized component location and deployment facility; and the mplementation of a
resilient and autonomous lightweight container model, which provides component’s
life cycle services, and many others. Component instantiation is of special interest
because it takes into account network locality properties.
The rest of the paper is structured as follows, in Section 2 we give an overview of
p2pCM’s architecture and services, in Section 3 we analyze possible usage scenarios
for our component model, and in Section 4 we explore related work. We conclude in
Section 5 by providing an outline of future work.

2 p2pCM Architecture and Services
The decentralized component model we have designed (p2pCM) runs on top of a
structured peer-to-peer grid. We have implemented the majority of traditional compoV.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 246 – 249, 2005.
© Springer-Verlag Berlin Heidelberg 2005

p2pCM: A Structured Peer-to-Peer Grid Component Model

247

nent models services, and adapted them to the underlying topology. These include a
decentralized component location and deployment facility, and a decentralized
lightweight container model, which provides a component persistence and life cycle
service, as well as an adaptive activation policy.
2.1 Decentralized Component Location and Deployment
All components must be previously registered into the system so as they can be used
by any client. This deployment phase is found in all traditional component models, as
well as in ours. In our model, we use a decentralized naming service which stores all
component’s metadata (read in deployment time), as well as the component’s class
files. This is done to allow dynamic component class loading in clients that do not
have the necessary component classes. Our naming service benefits from the efficient
overlay network routing properties thus hashing the component’s identifier, and storing the values into the node whose key is closer to this hash. Fault tolerance is provided by he underlying Dermi [3] middleware in a transparent way to the developer.
2.2 Decentralized Container Model
In p2pCM we have tried to avoid heavy and monolithic containers used by traditional
component models (e.g. J2EE or CORBA), and opted for designing a decentralized
lightweight container model. In our case, all of the nodes that belong to the network
are containers, and as such, they can house components. The idea is that any component can be run in any node (unless restricted by security constraints), because each
node runs a lightweight container. Our containers are fault resilient and autonomous:
components are replicated all along the network using the underlying Dermi [3] middleware. If a container fails, surely other containers housing those components will
exist in the network. Now we are going to briefly describe the different services our
decentralized container model offers to components.
2.2.1
Component Life Cycle Service
The container is responsible for activation and passivation of components. When
creating a component’s instance, the following may happen:
• No other component instance is already active in the network. In this case,
the instance will be activated on our local container, and a local reference is
returned so as we can interact with it.
• Other component instances are already active in the network. In such case,
we will get a reference to the closest instance (basically, a Dermi anycall is
done). However, if this closest instance informs us that it cannot accept more
requests (it may be overwhelmed), a local copy is activated.
Component instances are passivated when they are not called during a certain
amount of time in order to save resources on the node.
2.2.2 Component Persistence
Stateful components need to be ensured state persistence. p2pCM allows this by providing a persistence mechanism in order to take care of total passivation of component instances. If all component instances are passivated, their shared state is lost, and

248

C. Pairot et al.

this situation is not desired. The persistence strategy is chosen by the component itself
by means of the persistence metadata tag in the deployment phase. Persistence itself
is managed by the decentralized object replication mechanisms of Dermi.
2.2. 3
Adaptive Component Activation
In wide-area environments, some component instances could become temporarily
overwhelmed with requests of nearby clients. To avoid such problem, we use an
adaptive component activation mechanism.
The idea is to know which immediate node is delivering most messages to the
overwhelmed node (via the getPreviousHopHandle() method), and start an algorithm
which keeps activating new component instances all along the overwhelming request
path, until stress is relieved.
We are currently working in this adaptive activation scheme in order to fine tune
several parameters, and as future work we will perform extensive simulations to validate our approach.

3 p2pCM Usage Scenario
One scenario where our model could be successfully applied would be in an application similar to a SETI@Home or United Devices Cancer Research Project model.
Such applications normally require a central server which distributes computing units
to home computers for analyzing. Our component model could be used to build an
application which would efficiently be fault tolerant and resilient to high request
peaks.
The idea would be that interested nodes would activate a Processing component on
their local containers. This component could thus be receptive to a DataFeed component’s calls. The Processing components would be aligned into a multicast group, so
as the data feeder requested data unit analysis by anycalling or multicalling [3] to the
Processing component group.
Once each Processing component finished its data unit analysis, instead of returning data back to the central DataFeed component (which would possibly create an
important bottleneck there), it would pass data to another Results component by
means of an event. This component would manage the results persistence by replicating itself and storing state information in the P2P grid infrastructure. Whenever the
DataFeed component wished to obtain the results (cyclically every x hours), it would
anycall to its closest Result component instance, which would provide it with the
latest gathered results.

4 Related Work
In the Grid world there exist solutions like Fractal/ProActive [1], which is a hierarchical and dynamic component model. Nevertheless, its approach is different form
p2pCM, in the sense that virtual node and virtual machine mapping is performed on
the component’s deployment descriptor, thus not allowing self adaptation to node
failures.

p2pCM: A Structured Peer-to-Peer Grid Component Model

249

P2PComp [2] is built on top of an unstructured P2P network, and it is mainly
aimed to address the development needs for mobile P2P applications. It features a
lightweight container model as well, and provides many services, including synchronous / asynchronous remote invocations, hot swapping, service fetching and ranking.
All these services are basically oriented for highly mobile and dynamic applications.

5 Conclusions and Future Work
In this paper we have presented p2pCM, a decentralized component model built on
top of a structured P2P Grid. Our approach manages to provide many interesting
services to component developers. Our main contributions include a decentralized
component location and deployment facility, and the adoption of a decentralized
lightweight and fault resilient container model. We have shown as well, possible
usage scenarios of our system. However, we still do not provide other services found
in commercial component-oriented models, like security or transactions, which need
to be further investigated.
A first prototype of p2pCM is available through http://ants.etse.urv.es/p2pcm. We
believe that the features p2pCM offers can be very promising for the development of
future wide-area distributed applications.
This work has been partially funded by the Spanish Ministry of Science and Technology through project TIC-2003-09288-C02-00.

References
1. Baude, F., Caromel, D., and Morel, M., “From Distributed Objects to Hierarchical Grid
Components”, Proc. DOA 2003, LNCS, pp. 1226-1242, Nov. 2003.
2. Ferscha, A., Hechinger, M., et al, “A Light-Weight Component Model for Peer-to-Peer Applications”, Proc. of ICDCS 2004, pp. 520-527.
3. Pairot, C., García, P., and Gómez Skarmeta, A. F., “Dermi: A New Distributed Hash Tablebased Middleware Framework”. IEEE Internet Computing. Vol 8, No. 3, 2004.

