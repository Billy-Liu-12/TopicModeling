A Factory Pattern in Fortran 95
Viktor K. Decyk1 and Henry J. Gardner2
1

2

Department of Physics and Astronomy, University of California
Los Angeles, CA, 90095-1547, USA
decyk@physics.ucla.edu
Computer Science, FEIT, CECS, Australian National University
Canberra, ACT 0200, Australia
Henry.Gardner@anu.edu.au

Abstract. This paper discusses the concept and application of software
design patterns in Fortran 95-based scientiﬁc programming. An example
of a factory pattern is given together with a context in Particle in Cell
plasma simulation.
Keywords: Fortran, design patterns, object oriented, Particle in Cell.

1

Introduction

Object-oriented (OO) design patterns are an aspect of modern software
engineering which is widely accepted as best practice in commercial software
development. The seminal work on this subject is the book by Gamma, Helm,
Johnson, and Vlissides[1], which identiﬁes 23 recurring design patterns together
with example contexts and a discussion of their strengths and disadvantages.
Although many other design patterns texts have appeared subsequently most
of these have had a focus on commercial applications and graphical user interfaces. In the scientiﬁc computing and parallel programming communities, there
has been some discussion of design patterns for scientiﬁc applications in C++
and Java 1 as well as the recent book by Mattson et al[2]. But, until now, the
treatment of Fortran seems to have been relegated to how legacy code might
be integrated into frameworks written in other languages rather than how patterns might be used in Fortran itself. A discussion of Fortran 95 as a serious
implementation language for design patterns has only just begun to appear[3,4].
Fortran 95 programs can be written in an “object-based” fashion using the
module construct to deﬁne the fundamental object-oriented concept of a class
[5,6,7,8,9,10]. But inheritance is not a feature of Fortran 95, so a fully OO
approach is not possible. Instead module “composition”, where one module has
an association, or link, to another with the keyword uses, is used to emulate
inheritance. According to Gamma et al.[1], one of the fundamental principles of
OO design patterns is to “favor composition over inheritance” so this motivates
1

For example, in conference series such as the International Symposium on ObjectOriented Computing in Parallel Environments (ISCOPE).

Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 583–590, 2007.
c Springer-Verlag Berlin Heidelberg 2007

584

V.K. Decyk and H.J. Gardner

an exploration of how the essential nature of design patterns might be captured
in programs written in Fortran 95.
In this paper, we describe one important pattern together with its computational science context: It has been used to build part of a large software
framework for Particle in Cell (PIC) plasma simulation written in Fortran. (For
comparison, the design and implementation of an object-oriented Particle in Cell
simulation in Java is given in [11].)

2

An Object-Based Electrostatic Particle Simulation

Particle in Cell plasma codes[12] integrate the self-consistent equations of motion of a large number (up to billions!) of charged particles in electromagnetic
ﬁelds. Their basic structure is to calculate the density of charge, and possibly
current, on a ﬁxed grid. Maxwell’s equations, or a subset thereof, are solved on
this grid and the forces on all particles are calculated using Newton’s Law and
the Lorentz force. Particle motion is advanced and new densities are calculated
at the next time step.
It is a common practice for scientists to build a set of PIC models to study
plasma phenomena at diﬀering levels of complexity. At the basic level, an electrostatic code models particles that respond to Coulomb forces only. This is then
extended to treat electromagnetic particles which correspond to both electric
and magnetic ﬁelds. As the details of the physics are reﬁned, the models can
incorporate relativistic eﬀects, diﬀering boundary conditions, diﬀering ﬁeld solutions, multispecies plasmas and so on. A framework for building PIC models
would allow all of these submodels to be generated and for common code to be
maintained and reused between them.
We start by creating a Fortran 95 class for electrostatic particles (which
respond to Coulomb forces only). This class uses the Fortran 95 module to
wrap up and reuse legacy subroutines written in Fortran 77. It has the
following structure: a type, followed by functions which operate on that type,
and, perhaps, shared data[6]. The type declaration describes properties of particles, but it does not actually contain the particle position and velocity data which
are stored elsewhere in normal Fortran arrays and are passed to the class in the
subroutine argument “part”. The type stores a particle’s charge, qm, charge to
mass ratio, qbm, and the number of particles of that type, npp:
module e s p a r t i c l e s c l a s s
type p a r t i c l e s
i n t e g e r : : npp
r e a l : : qm, qbm
end type
contains
s u b r o u t i n e n e w e s p a r t i c l e s ( t h i s , qm, qbm )
! ’ t h i s ’ i s of type ’ p a r t i c l e s ’
!
s e t t h i s%npp , t h i s%qm , t h i s%qbm
...
s u b r o u t i n e i n i t i a l i z e e s p a r t i c l e s ( t h i s , p a r t , i d i m p , npp )

A Factory Pattern in Fortran 95

585

! i n i t i a l i z e p a r t i c l e p o s i t i o n s and v e l o c i t i e s
...
subroutine c h a r g e d e p o s i t ( t h i s , part , q)
! d e p o s i t p a r t i c l e c h a r g e o n t o mesh
...
subroutine es push ( t h i s , part , fxyz , dt )
! a d v a n c e p a r t i c l e s i n t i m e from f o r c e s
...
subroutine particle manager ( this , part )
! h a n d le boundary c o n d i t i o n s
...
end module e s p a r t i c l e s c l a s s

Most of the subroutines provide a simple interface to some legacy code. For example, the initialization subroutine assigns initial positions and velocities to the
particle array, part:
s u b r o u t i n e i n i t i a l i z e e s p a r t i c l e s ( t h i s , p a r t , i d i m p , npp )
! i n i t i a l i z e p o s i t i o n s and v e l o c i t i e s
i m p l i c i t none
type ( p a r t i c l e s ) : : t h i s
real , dimension ( : , : ) , pointer : : p a r t
i n t e g e r : : i d i m p , npp
a l l o c a t e ( p a r t ( i d i m p , npp ) )
t h i s%npp = npp
! c a l l legacy i n i t i a l i z a t i o n subroutine for part
...

The iteration loop in the main program consists of a charge deposit, a ﬁeld
solver, a particle push subroutine, and a boundary condition check:
program e s m a i n
! main program f o r e l e c t r o s t a t i c p a r t i c l e s
us e e s p a r t i c l e s c l a s s
i m p l i c i t none
i n t e g e r : : i , i d i m p = 6 , npp = 3 2 7 6 8 , nx = 3 2 , ny = 3 2 , nz = 32
integer : : nloop = 1
r e a l : : qm = 1 . 0 , qbm = 1 . 0 , d t = 0 . 2
type ( p a r t i c l e s ) : : e l e c t r o n s
real , dimension ( : , : ) , pointer : : p a r t
real , dimension ( : , : , : ) , pointer : : c h a r g e d e n s i t y
real , dimension ( : , : , : , : ) , pointer : : e f i e l d
! initialization
c a l l n e w e s p a r t i c l e s ( e l e c t r o n s , qm , qbm )
c a l l i n i t i a l i z e e s p a r t i c l e s ( e l e c t r o n s , p a r t , i d i m p , npp )
a l l o c a t e ( c h a r g e d e n s i t y ( nx , ny , nz ) , e f i e l d ( 3 , nx , ny , nz ) )
! main l o o p o v e r number o f t i m e s t e p s
do i = 1 , n l o o p
c a l l c h a r g e d e p o s i t ( e l e c t r o n s , part , c h a r g e d e n s i t y )
! omitted : s o l v e f o r e l e c t r o s t a t i c f i e l d s
c a l l es push ( e l e c t r o n s , part , e f i e l d , dt )

586

V.K. Decyk and H.J. Gardner
c all particle manager ( electrons , part )
enddo

!
end program e s m a i n

3

Extension to Electromagnetic Particles

Now let us consider particles which respond to both electric and magnetic forces.
The push is diﬀerent, and there is a current deposit in addition to the charge
deposit. But the initialization, charge deposit, and particle manager are the
same as in the electrostatic class and they can be reused. An electromagnetic
particle class can be created by “using” the electrostatic class and adding the new
subroutines as follows. (This “using” is an example of using object composition
in a place where inheritance might be employed in an OO language.)
module e m p a r t i c l e s c l a s s
us e e s p a r t i c l e s c l a s s
contains
s u b r o u t i n e e m c u r r e n t d e p o s i t ( t h i s , p a r t , cu , d t )
! d e p o s i t p a r t i c l e c u r r e n t o n t o mesh
...
s u b r o u t i n e em push ( t h i s , p a r t , f x y z , bxyz , d t )
! a d v a n c e p a r t i c l e s i n t i m e from e l e c t r o m a g n e t i c f o r c e s
...
end module e m p a r t i c l e s c l a s s

A program where one could select which type of particles to use might ﬁrst
read a ﬂag, emforce, and then use this ﬂag to choose the appropriate routine to
execute:
program g e n e r i c m a i n
us e e s p a r t i c l e s c l a s s
us e e m p a r t i c l e s c l a s s
i n t e g e r , parameter : : ELECTROSTATIC = 0 , ELECTROMAGNETIC = 1
...
c a l l n e w e s p a r t i c l e s ( e l e c t r o n s , qm , qbm )
c a l l i n i t i a l i z e e s p a r t i c l e s ( e l e c t r o n s , p a r t , i d i m p , npp )
a l l o c a t e ( c h a r g e d e n s i t y ( nx , ny , nz ) , e f i e l d ( 3 , nx , ny , nz ) )
i f ( e m f o r c e==ELECTROMAGNETIC ) then
a l l o c a t e ( c u r r e n t ( 3 , nx , ny , nz ) , b f i e l d ( 3 , nx , ny , nz ) )
endif
do i = 1 , n l o o p ! l o o p o v e r number o f t i m e s t e p s
i f ( e m f o r c e==ELECTROMAGNETIC ) then
c a l l e m c u r r e n t d e p o s i t ( e l e c t r o n s , part , c u rre n t , dt )
endif
c a l l c h a r g e d e p o s i t ( e l e c t r o n s , part , c h a r g e d e n s i t y )
! omitted : s o l v e f o r e l e c t r o s t a t i c or e l e c t r o m a g n e t i c f i e l d s
s e l e c t case ( emforce )
c a s e (ELECTROSTATIC )
c a l l es push ( e l e c t r o n s , part , e f i e l d , dt )
c a s e (ELECTROMAGNETIC )

A Factory Pattern in Fortran 95

587

c a l l em push ( e l e c t r o n s , p a r t , e f i e l d , b f i e l d , d t )
end s e l e c t
c all particle manager ( electrons , part )
enddo
end program g e n e r i c m a i n

Main

ES
Legacy
Code
EM

Fig. 1. An electrostatic/electromagnetic particle simulation which reuses es particles
class (denoted by “ES”)

The design of this program is shown schematically in Fig. 1 where, with
exception of the legacy code, the boxes represent modules and the open arrows
represent “uses” associations between modules. This design is disciplined and
it reuses much of the previous, electrostatic, code, but the widespread use of
select case or if statements can make the main program diﬃcult to read and
also necessitates keeping track of all the diﬀerent choices if the code should be
extended further.

4

A Factory Pattern

The essential idea of a factory pattern is to encapsulate “creational” logic inside
a dedicated class, or collection of classes. We propose that a factory pattern can
be incorporated into the above example by creating a “generic particle” class
which will create storage for particles of the relevant type and will then ensure
that the correct type of push and current deposit subroutines are chosen for a
given particle type. This can be done by reusing almost all of the earlier version
of the software without modiﬁcation - save for the addition of the ﬂag, emforce,
into the particles type. The ﬁrst part of this new class would read:
module p a r t i c l e s c l a s s
us e e s p a r t i c l e s c l a s s
us e e m p a r t i c l e s c l a s s
contains
s u b r o u t i n e n e w p a r t i c l e s ( t h i s , e m f o r c e , qm , qbm )
i m p l i c i t none
type ( p a r t i c l e s ) : : t h i s
integer : : emforce
r e a l : : qm, qbm
c a l l n e w e s p a r t i c l e s ( t h i s , qm , qbm )
t h i s%e m f o r c e = e m f o r c e
end s u b r o u t i n e n e w p a r t i c l e s
...

588

V.K. Decyk and H.J. Gardner

Within particles class, the particle push routine looks like:
s u b r o u t i n e p u s h p a r t i c l e s ( t h i s , p a r t , f x y z , bxyz , d t )
! advance p a r t i c l e s i n time
i m p l i c i t none
type ( p a r t i c l e s ) : : t h i s
real , dimension ( : , : ) , pointer : : p a r t
r e al , dimension ( : , : , : , : ) , p o i n t e r : : fxyz , bxyz
r e a l : : dt
s e l e c t c a s e ( t h i s%e m f o r c e )
c a s e (ELECTROSTATIC )
c a l l es push ( t h i s , part , fxyz , dt )
c a s e (ELECTROMAGNETIC )
c a l l em push ( t h i s , p a r t , f x y z , bxyz , d t )
end s e l e c t
w r i t e ( ∗ , ∗ ) ’ done p u s h p a r t i c l e s ’
end s u b r o u t i n e p u s h p a r t i c l e s

Main

Particles

ES
Legacy
Code
EM

Fig. 2. Representation of the Fortran 95 factory pattern described in the text

The main loop of our refactored program now has the if and select case statements omitted and the decision making has been delegated to the particles class
module. The listing follows and the block diagram is shown in Fig. 2.
program main
! main program f o r v a r i o u s k i n d s o f p a r t i c l e s
us e p a r t i c l e s c l a s s
...
c a l l n e w p a r t i c l e s ( e l e c t r o n s , e m f o r c e , qm, qbm )
...
! l o o p o v e r number o f t i m e s t e p s
do i = 1 , n l o o p
c a l l c u r r e n t d e p o s i t ( e l e c t r o n s , part , c u rre n t , dt )
c a l l c h a r g e d e p o s i t ( e l e c t r o n s , part , c h a r g e d e n s i t y )
! omitted : s o l v e f o r e l e c t r o s t a t i c or e l e c t r o m a g n e t i c f i e l d s
c a l l p u s h p a r t i c l e s ( e l e c t r o n s , part , e f i e l d , b f i e l d , dt )
c all particle manager ( electrons , part )
enddo
end program

How much work would it be to add a third type of particle? For example,
suppose we wanted to create relativistic, electromagnetic particles. Relativistic

A Factory Pattern in Fortran 95

589

particles need a new component in the particles type, the speed of light, as well
as a diﬀerent push and current deposit subroutine. These two subroutines, as
well as a new emforce value, RELATIVISTIC, would be incorporated into a new,
rel particles class class. Two new lines would be added in the generic particles
class, to the push and current-deposit subroutines, to allow the selection of relativistic particles. In addition, the constructor would have a new optional argument, the speed of light. Except for the additional argument in the constructor,
the main loop would not change at all.

5

Discussion

Figure 3 shows a conventional, object-oriented factory pattern. A client has
an association with an instance of a factory class which is responsible for creating an object from an inheritance hierarchy of target objects. The factory
returns a handle on the desired object which, thereafter, calls methods directly on that object. The target object often implements an interface which
is deﬁned by the top of an inheritance hierarchy. The pattern shown in Fig. 2
diﬀers from the conventional OO factory pattern because of the lack of inheritance, and the lack of conventional, OO interfaces, in Fortran 95. In our
Fortran 95 pattern, the particles class is responsible for creating the object
of the desired type and also for funneling calls to the correct subroutines for
that particular type after it has been created. Still, the present pattern can be
recommended to Fortran 95 programmers because it encapsulates and reuses
signiﬁcant portions of code and it manages these away from the main program
logic.
In general, the rule for design patterns is to encapsulate what varies. We did
this ﬁrst by writing a general main program which had the if and select case
statements explicit. We then encapsulated these statements inside a special class,
particles. We have thus demonstrated a simple programming pattern together
how it might be used in a believable process of iterative software development.
In the complete framework, this process has been extended to model relativistic,
multispecies plasmas with varying boundary conditions as well as with varying
parallel-programming models.

Client

Factory

ES

EM

Fig. 3. Representation of a more conventional, object-oriented factory pattern

590

V.K. Decyk and H.J. Gardner

Acknowledgments
Viktor Decyk acknowledges the support of the US Department of Energy under the SCIDAC program. Henry Gardner acknowledges the support of the
Australian Partnership for Advanced Computing (APAC) National Facility and
the APAC Education, Outreach and Training program. Further details of this
pattern and other patterns in Fortran 95, as well as an introduction to objectbased programming in Fortran 95, will be available on the APAC-EOT website
(www.apac.edu.au).

References
1. Gamma, E., Helm, R., Johnson, R., Vlissides, J.: Design Patterns: Elements of
Reusable Object Oriented Software. Addison-Wesley (1995) ISBN 0201633612.
2. Mattson, T.G., Sanders, B.A., Massingill, B.L.: Patterns for Parallel Programming.
Addison-Wesley (2005) ISBN 0321228111.
3. Markus, A.: Design patterns and fortran 90/95. SIGPLAN Fortran Forum 25
(2006) 13–29
4. Gardner, H.J., Decyk, V.K.: Comments on the arjen markus article: Design patterns and fortran. SIGPLAN Fortran Forum 25 (2006) 8–11
5. Gray, M.G., Roberts, R.M.: Object-based programming in fortran 90. Computers
in Physics 11 (1997) 355–361
6. Decyk, V.K., Norton, C.D., Szymanski, B.K.: How to express c++ concepts in
fortran 90. Scientiﬁc Programming 6 (1997) 363–390
7. Decyk, V.K., Norton, C.D., Szymanski, B.K.: Expressing object-oriented concepts
in Fortran 90. ACM Fortran Forum 16 (1997) 13–18
8. Cary, J.R., Shasharina, S.G., Cummings, J.C., Reynders, J.V., Hinkler, P.J.: Comparison of c++ and fortran 90 for object-oriented scientiﬁc programming. Computer Physics Communications 105 (1997) 20–36
9. Machiels, L., Deville, M.O.: Fortran 90: An entry to object-oriented programming
for the solution of partial diﬀerential equations. ACM Transactions on Mathematical Software 23 (1997) 32–49
10. Decyk, V.K., Norton, C.D., Szymanski, B.K.: How to support inheritance and runtime polymorphism in fortran 90. Computer Physics Communications 115 (1998)
9–17
11. Markidis, S., Lapenta, G., VanderHeyden, W.: Parsek: Object oriented particle-incell implementation and performance issues. In: Proceedings of joint ACM-ISCOPE
conference on Java Grande, Seattle, Washington, USA, 3-5 November, 2002, ACM,
New York (2002) 141–147
12. Birdsall, C.K., Langdon, A.B.: Plasma Physics via Computer Simulation. Institute
of Physics Publishing (1991) ISBN 0750301171.

