Procedia
Computer
Science
1 (2012)
2559‚Äì2567
Procedia
Computer
Science
00 (2009)
000¬±000

Procedia
Computer
Science

www.elsevier.com/locate/procedia
www.elsevier.com/locate/procedia

TE
D

International Conference on Computational Science, ICCS 2010

A globally optimal approach for surveillance video cropping
Jin Liu, Xiaohu Shi, Yu Zhang*
a

College of Computer Science and Technology, Jilin University, Key Laboratory of Symbolic Computation and Knowledge Engineering of
Ministry of Education, 130012 Changchun, China

C

Abstract

A

In this paper, a novel approach for surveillance video cropping is presented. The basic idea is to obtain a trajectory that a small
sub-window can take through the video, selecting the most important regions of the video for display on a smaller monitor. In
this framework, the video content is firstly modeled by whether image frames change at each pixel. Then a shortest path
algorithm is used to find the globally optimal trajectory for a cropping window. After that a second shortest path formulation is
employed to find good cuts from one trajectory to another, improving the coverage of interesting events in the video content.
Finally, additional techniques are demonstrated to improve the quality and efficiency of the algorithm, and results are shown on
surveillance videos from PETS 2006.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
‚Éù

ET

1. Introduction

R

Keywords: Video cropping; shortest path algorithm; globally optimal trajectory

R

In current multimedia scenario, users can consume video content through a wide variety of devices and networks.
Many applications benefit from the adaptation technologies when the content they use can be adapted to different
terminals, both in terms of capabilities (e.g., resolution, modality) and condition (e.g., available memory). One of
such applications is video surveillance, where the content may not only be delivered to the central control room, but
also to mobile devices [1]. Automatic systems selecting the most relevant portions of the video will make it possible
to display only the important parts. To accomplish this, a system has been created in this paper that crops videos to
retain the regions of greatest interest, while also cutting from one part of the video to another, to provide coverage of
all interesting activities. The video cropping problem is defined to be the determination of a smooth path of a
FURSSLQJ ZLQGRZ WKDW FDSWXUHV ¬≥VDOLHQW¬¥ IRUHJURXQG WKURXJKRXW WKH YLGHR 7KH ZLQGRZ FDQ KDYH YDULDEOH VL]H
which introduces virtual zoom-in and zoom-out effects. Occasional jumps are allowed through the video, similar to
VFHQHFXWVLQILOPPDNLQJ0RWLRQHQHUJ\LVXVHGDVDPHDVXUHRIWKH¬≥VDOLHQF\¬¥RIDFURSSLQJZLQGRZWUDMHFWRU\
Unlike previous approaches, the saliency is optimized globally for the whole trajectory, rather than for individual
frames or shots.

* Corresponding author. Tel.: +86-431-85168752; fax: +86-431-85168752.
E-mail address: zy26@jlu.edu.cn.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ‚Éù
doi:10.1016/j.procs.2010.04.289

2560

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567
J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

The rest of this paper is organized as follows: Section 2 reviews related work. Then Section 3 introduces the
formal definition of the video cropping problem, before presenting the approach to solve the problem in Section 4.
After that, the experimental results are shown in Section 5 and conclusions can be found in Section 6, finally.
2. Related Work

C

TE
D

Many methods for cropping still images automatically have been published. For example, Suh et al. [2] use Itti√ø
s saliency model, along with face detection, to crop informative parts of images before reducing them to thumbnails.
The same model is also used by Chen et al. [3], with the addition of text detection, to find regions of interest in
images for adaptation to small displays. Xie et al. [4] study the statistics of users√ø interaction with images on small
displays to determine regions of maximum user interest.
In the area of video cropping, or detecting interesting spatio-temporal regions of a video, not much work has been
done so far. Fan et al. [5] determine areas of interest in individual frames then combine them smoothly. Wang et al.
[6] split surveillance video into interesting and non-interesting sequences using a threshold on their motion content.
Both of these methods are optimized locally and need not produce videos that are globally optimal, in terms of their
saliency content. After that, Kang et al. [7] used a space-time saliency measure to cut out informative portions of a
video and pack them into a video of smaller resolution and shorter duration. This approach models videos and
processes them as a whole, making them unsuitable for relatively longer videos, or for continuous surveillance video.
Liu et al. [8] use a fixed size cropping window to edit videos. Although this approach works well with
professionally captured films, it may not generalize well to unedited raw surveillance video, which generally have
wider fields of view, are not focused on a main subject, and consist of a single shot.
3. Problem Formulation

R

A

Given a video sequence, the goal is to determine a smooth trajectory for a variable size window through the video,
which maximizes the captured saliency over all such trajectories and window sizes. Occasional jumps are allowed to
include as much saliency as possible. More formally, the problem of optimizing a single trajectory is considered.
Assume the input video segment has T frames. Each frame t can be covered by a set of n variable size
overlapping windows. These windows are labeled W i,t , with i being the window number, selected from an index set
I ^1,2,¬ò ¬ò ¬ò ,n`. Define the cross product set »ç I u I u ¬ò ¬ò ¬ò u I I T . Then, we want to solve the problem:

arg max ¬¶ S (Wi ,t )
Q

t

(1)

ET

where S ¬ò is a saliency measure, Q ¬è : is the window sequence that maximizes the saliency, and i ¬è I . It is more
desirable to minimize functions, thus, the saliency function S ¬ò can be replaced by a cost function C¬ò that decays
ZLWK LQFUHDVLQJ VDOLHQF\ 0RGHO GRHVQ¬∂W HQIRUFH VSDWLDO VPRRWKQHVV 7R JXDUDQWHH D VPRRWK SDWK ZLQGRZV LQ
two consecutive frames are restricted to be close to one another and with little area variation. The problem is thus
formulated as:

arg min ¬¶ C (Wi ,t )
t

R

Q

such that:

d (Wi ',t 1 , Wi ,t )  d max

,

A(Wi ',t 1 )  A(Wi ,t )  Amax

where d (¬ò,¬ò) is a distance measure and A(W ) is the area of window W .

(2)

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567
J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

2561

4. Video Cropping Approach

R

A

C

TE
D

Using the following procedure, a dynamic programming approach is employed in this paper. First, motion energy
is extracted through frame differences. Then, a weighted directed graph is built, with the cropping windows as its
vertices, and edge weights measuring the motion energy. A shortest path algorithm through the graph selects the
first optimal trajectory, which minimizes equation (2). This trajectory is then smoothed, and the motion it contains is
¬≥ZLSHGRXW¬¥IURPWKHRULJLQDOIUDPHV7KLVSURFHGXUHLVUHSHDWHGWRFDSWXUHVRPHRIWKHUHPDLQLQJHQHUJ\$VHFRQG
graph is built out of the resulting trajectories with shortest path run once again to determine the optimal combination
of paths. In the final cropped video, one trajectory is followed at a time, with occasional jumps between these
trajectories. The whole process is summarized in Fig.1. In the remainder of this section, the above steps are
presented in more detail.

ET

Fig. 1. Overview of the video cropping approach

4.1. Extracting motion energy

R

In this implementation, motion energy is used as a measure of saliency. It is efficiently computed in real time,
and captures important activity in surveillance video. We compute frame differences and threshold them to detect
motion, then apply morphological operations to the resulting motion frames. The motion energy is computed to be
WKH QXPEHU RI ¬∂V LQ WKH UHVXOWLQJ ELQDU\ LPDJHV 7KH UHPDLQGHU RI WKH DOJRULWhm works on these preprocessed
difference frames.
4.2. Building the graph
The surveillance video is modeled as a weighted directed graph as follows. Let G (V , E) be the graph. Each
frame is sampled by n overlapping cropping windows of various sizes. Then, each window is represented by a
vertex v ¬èV . This makes the total number of vertices in the graph V nT for a video segment of T sample frames.
The restrictions in formulation (2) are implemented by allowing a window to move only to neighboring window
positions, or to grow or shrink by no more than one size step between two consecutive frames. This translates to
adding an edge to E only if it connects a pair of vertices that represents a pair of windows between which a step is
allowed. For a certain ordering of the vertices V , the adjacency matrix of G is banded. This is a sparse matrix that

2562

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567
J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

C

TE
D

can be efficiently stored using an adjacency list graph representation, to store just the bands. With b  nT
neighbors allowed per window, we maximize the captured saliency enforce spatial smoothness have a graph of
O (nT ) HGJHV$QDGGLWLRQDO¬≥VRXUFH¬¥QRGHDQGD¬≥WDUJHW¬¥QRGHDUHDGGHGWRWKHEHJLQQLQJDQGHQGRIWKHJUDSK$
model graph is shown in Fig.2.

A

Fig. 2. Surveillance video modeling

ET

R

To find a trajectory that maximizes the captured motion energy, we need to define a window energy measure.
Using the total energy enclosed in a window always favors larger windows, which makes the cropping useless. On
the other hand, using the energy density as a measure favors smaller windows, which can be more densely filled,
with little empty space. This results in cropping away smaller parts of objects, such as heads in humans. This is
definitely an undesirable result. To balance both effects, we use an energy density measure, penalized by the total
energy in a thin surrounding belt. It prevents the window from cropping away parts of objects, making it large
HQRXJK WR ILW D VLQJOH ¬≥FOXVWHU¬¥ RI REMHFWV ZKLOH OHDYLQJ GLVWDQW RQHV IRU VXEVHTXHQW WUDMHFWRULHV WR FDSWXUH 7KH
multi-scale energy function of a window W is defined as:
E (W )

Ein

Ain

1

K

Ebelt

(3)

R

where E in LVWKHPRWLRQHQHUJ\QXPEHURI¬∂VLQZLQGRZ W , Ain is the area of window W in pixels, E belt is the
motion energy in the surrounding belt, and K is an empirically chosen constant, that determines how much penalty
to assign to cropped away parts. The diagram in Fig.3 illustrates these parameters. Next, the energy measure (3) is
put in a form that can be minimized, to fit as a cost function C (¬ò) in equation (2). In addition, to suit the shortest
path algorithm used, the edge weights must be normalized to a non-negative integer range. We choose this range to
be from 0 to 100. If a transition is allowed from vertex i to vertex j , an edge is added to the graph with weight
w(i, j) computed as:

w(i, j )

Ej
¬´
¬ª
1
¬´100  100 max( A j  K Ebelt j ,0)  0.5¬ª
¬¨
¬º

(4)

where E j , A j and Ebelt j are all related to the window represented by vertex j . The function ¬¨x  0.5¬º rounds x
to the nearest integer. E j and Ebelt j DUH FRPSXWHG E\ VXPPLQJ WKH PRWLRQ SL[HOV ¬∂V IRU HDFK ZLQGRZ LQ HDFK
preprocessed difference frame.

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567

2563

TE
D

J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

Fig. 3. Cropping window configuration, with surrounding belt area

C

4.3. Shortest path

R

A

'LMNVWUD¬∂VDlgorithm [9] is used to compute the shortest path from the source node to the target node. Benefiting
from the special structure of this graph, modifications are introduced into the algorithm to improve performance.
Early termination can be achieved by halting the search prematurely when the first vertex (window) in the last video
IUDPHLVUHDFKHGUDWKHUWKDQZDLWLQJXQWLODOOWKH YHUWLFHVLQWKHJUDSKDUHODEHOHG7KHUXQQLQJWLPHRI'LMNVWUD¬∂V
algorithm has been reduced in this implementation in two ways. First, we note that the maximum number of nodes
in the list of temporary labeled nodes, over all iterations, is just around 1% of the total number of vertices in the
graph. Second, the order of magnitude can be reduced from quadratic to linear in the number of vertices, using
'LDO¬∂VLPSOHPHQWDWLRQ>10].
4.4. Smoothing

ET

The shortest path resulting from the previous stage has a noisy appearance, which can be best compared to a
jittery or shaking cameraman, from the point of view of the cropped video. Two levels of smoothing are applied to
the trajectory. First, a moving average smoother is applied to the trajectory. With y (t ) being the original data (raw
trajectory) at time t and ys (t ) the smoothed one, the difference equation is:

ys (t )

1

2N  1

( y(i  N )  y(i  N  1)    y(i  N )).

(5)

R

where N LVWKH¬≥UDGLXV¬¥RIWKHVSDQLQWHUYDO7KLVKDVWKHHIIHFWRIDORZ-pass filter, reducing the shaky appearance
of the trajectory. A second level of smoothing is done by interpolating a piecewise cubic Hermite polynomial to a
sub-sampled version of the data. This polynomial interpolates the data points and has a continuous first derivative.
However, unlike cubic splines, the second derivative need not be continuous. This property is more suitable for our
staircase data, since it avoids excessive oscillations. Fig.4. illustrates our situation where Hermite interpolation
produces more stable results.

2564

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567

C

TE
D

J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

Fig. 4. Piecewise cubic Hermite performs better than cubic spline

A

4.5. ¬≥:LSLQJRXW¬¥FDSWXUHGPRWLRQ

ET

R

A single moving cropping window might not capture all motion energy in the video. In situations where several
activities occur simultaneously in separated regions of the scene, panning back and forth between these regions
produces a blurry video that covers the mostly empty area between them. To solve this problem, several independent
window trajectories are computed, each covering a different activity in the same video. The window trajectories are
determined by repeating the above procedure of modeling the video using a graph, computing the shortest path and
smoothing. Between two consecutive computations of window trajectories, all captured objects that overlap with the
ILUVWDUHUHPRYHGIURPWKHPRWLRQIUDPHV7KLV¬≥ZLSLQJ¬¥SURFHGXUHJXDUDQWHHVWKDWDQHQVXLQJZLQGRZSDWKZLOOQRW
cover parts of previously captured objects, thus avoiding two similar trajectories.
4.6. Merging trajectories

R

Once enough window paths are computed, we merge them into a single one that captures as much motion as
possible, and covers as many regions of the original video as possible. Fig.5. illustrates an example solution to this
problem. To compute the final merged trajectory, a second optimization that uses a shortest path algorithm through
the trajectories is solved. A second graph G ' (V ' , E ' ) is built, with the list of vertices V ' formed by concatenating
nodes from all computed trajectories. This list of nodes is duplicated k times, with the i th copy of a node from path
p representing that this path has been followed for i steps. The number of frames after which a switch between
trajectories is allowed without penalty is k . This allows us to keep track of how long a single trajectory has been
followed. There always exists an edge e ¬è E' from every node to the next node in the same path, and edges to next
IUDPHQRGHVLQWKHRWKHUSDWKVLID¬≥FXW¬¥LVDOORZHGDWWKDWWLPH7KHZHLJKWIXQFWLRQ w' is the cost associated with
the representative window in the original graph G , computed as in (4), if the edge connects two nodes in the same
path. However, if a path switch occurs, a penalty function is added to that weight. Intuitively, a higher penalty is
DVVRFLDWHGZLWKVZLWFKHVWRFORVHUWUDMHFWRULHVWRIDYRUPRUHFRYHUDJHRIWKHRULJLQDOYLGHRDQGWRDYRLG¬≥MXPSV¬¥
Another penalty is added to the window cost, which decays with the time that has been spent following a certain

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567
J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

2565

TE
D

trajectory. This latter penalty inhibits frequent successive cuts, which might distract the operator. These penalties are
fractions of the window cost, to make them comparable to the window cost penalty (2) in the global optimization.
They are determined empirically, based on runs conducted on several videos.

Fig. 5. An example of merging three trajectories into one

5. Experimental Results

R

ET

R

A

C

The approach has been tested on several surveillance videos from PETS2006. In Fig.6, typical cropped frame
from a subway surveillance video (three-window) is shown for fixed size cropping. For now, the number of
cropping windows is manually selected for each video to cover all people who appear in the scene, occasionally
jumping between them. The figure illustrates single frames in which only one cropping window is displayed.
Variable-size single-path window is shown in Fig.7.

Fig. 6. Two typical frames from a subway surveillance video, with three trajectories and fixed window size. In each frame, the original frame,
showing the locations of the cropping windows, is to the left and the cropped frame is to the right, rHVL]HGWRWKHRULJLQDO¬∂VKHLJKW

2566

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567

C

TE
D

J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

Fig.7. Variable size single trajectory results. Compared to the fixed size results, less empty area is retained around small cropped subjects

ET

6. Conclusions

R

A

The performance of our system has been timed on the subway surveillance video. This is a high quality 720√ó576,
30 fps video. Experiments are done on a 1.66 GHz dual processor CPU with 2 GB of memory. Excluding
background subtraction and disk operations, which are done at independent stages, we were able to process a 66
second video segment (2000 frames) in about 400 seconds, for a fixed-size, single trajectory window. This is
equivalent to processing about 5 frames per second. Lower resolution videos (320√ó240) can be processed at almost
real-time rates. Using a variable size window with 6 size steps multiplies the size of the problem by a factor of 6,
thus dramatically reducing the processing speed to about 0.88 fps. Computing more trajectories reduces the
processing speed even further.

The problem of cropping surveillance videos is considered in this paper. This process chooses a trajectory that a
small sub-window can take through the video, selecting the most important parts of the video for display on a
smaller monitor. The result is a meaningful video with a lower resolution that can fit on smaller displays and save
bandwidth. The globally optimal trajectory for a cropping window is found by using a shortest path algorithm. The
method is applied on real surveillance videos.

R

Acknowledgements

This work was supported in part by the NSFC (10872077, 60703025), the National High-technology
Development Project of China (2009AA02Z307), and the Science-Technology Development Project from Jilin
Province of China (20080708, 20090152).

References

J. Liu et al. / Procedia Computer Science 1 (2012) 2559‚Äì2567
J. Liu et al. / Procedia Computer Science 00 (2010) 000¬±000

2.
3.
4.
5.
6.
7.

R

ET

R

A

C

8.
9.
10.

O. Steiger, T. Ebrahimi, and A. Cavallaro. Surveillance video for mobile devices. IEEE Conference on Video and Signal based
Surveillance, 2005, pp: 620-625.
B. Suh, H. Ling, B. B. Bederson, and D. W. Jacobs. Automatic thumbnail cropping and its effectiveness. ACM Symposium on User
Interface Software and Technology, 2003, pp: 95-104.
L. Q. Chen, X. Xie, X. Fan, W. Y. Ma, H. J. Zhang, and H. Q. Zhou. A visual attention model for adapting images on small displays.
Multimedia Systems, 2003, pp: 353-364.
X. Xie, H. Liu, S. Goumaz, and W. Y. Ma. Learning user interest for image browsing on small-form-factor devices. SIGCHI Conference
on Human Factors in Computing Systems, 2005, pp: 671-680.
X. Fan, X. Xie, H. Q. Zhou, and W. Y. Ma. Looking into video frames on small displays. ACM international conference on Multimedia,
2003, pp: 247-250.
J. Wang, M. J. Reinders, R. L. Lagendijk, J. Lindenberg, and M. S. Kankanhalli. Video content representation on tiny devices. IEEE
International Conference on Multimedia and Expo, 2004, pp: 1711-1714.
H. W. Kang, X. Q. Chen, Y. Matsushita, and X. Tang. Space-time video montage. IEEE Computer Society Conference on Computer
Vision and Pattern Recognition, 2006, pp: 1331-1338.
F. Liu and M. Gleicher. Video retargeting: automating pan and scan. ACM international conference on Multimedia, 2006, pp: 241-250.
E. W. Dijkstra. A note on two problems in connection with graphs. Numerische Mathematik, 1959, pp: 269-271.
R. B. Dial. Algorithm 360: Shortest-path forest with topological ordering. Commun. ACM, 1969, pp: 632-633.

TE
D

1.

2567

