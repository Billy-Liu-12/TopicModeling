Numerical Continuation of Fold Bifurcations of
Limit Cycles in MATCONT
Annick Dhooge1 , Willy Govaerts1 , and Yuri A. Kuznetsov2
1

Department of Applied Mathematics and Computer Science, Ghent University,
Krijgslaan 281-S9,B-9000 Gent, Belgium
{Annick.Dhooge,Willy.Govaerts}@rug.ac.be
2
Mathematisch Instituut, Universiteit Utrecht,
Boedapestlaan 6, 3584 CD Utrecht, The Netherlands
kuznetsov@math.uu.nl

Abstract. matcont is a Matlab continuation package with a GUI for
the interactive numerical study of a range of parameterized nonlinear
problems. In the case of ODEs it allows to compute curves of equilibria,
limit points, Hopf points, limit cycles, period doubling bifurcation points
of limit cycles and fold bifurcation points of limit cycles. It can use the
symbolic toolbox of Matlab to compute derivatives of order up to ﬁve of
the object function. We discuss some details on the implementation of
the limit cycles and the fold bifurcation of limit cycles in matcont.The
inherent sparsity of the discretized systems for the computation of limit
cycles and their bifurcation points is exploited by using the standard
Matlab sparse matrix methods.

1

Introduction

Numerical continuation is a well - understood subject, see e.g. [1], [2], [8], [10].
The idea is as follows. Consider a smooth function F : IRn+1 → IRn . We want
to compute a solution curve of the equation F (x) = 0. Numerical continuation
is a technique to compute a sequence of points which approximate the desired
branch.
In particular, we consider a dynamical system of the form
dx
= f (x, α)
dt

(1)

with x ∈ IRn , f (x, α) ∈ IRn , and α a vector of parameters where equilibria, limit
points, limit cycles etcetera can be computed.
The existing software packages such as auto [6], content [11] require the
user to rewrite his/her models in a speciﬁc format; this complicates the export
of results, graphical representation etcetera.
The aim of matcont is to provide a continuation toolbox which is compatible
with the standard Matlab ODE representation of diﬀerential equations. This
toolbox is developed with the following targets in mind:
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 701–710, 2003.
c Springer-Verlag Berlin Heidelberg 2003

702

–
–
–
–
–
–

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

detection of singularities via test functions
singularity-speciﬁc location code
processing of regular and singular points
support of adaptive meshes
support of symbolic derivatives
support for sparse matrices

Earlier versions of the toolbox are described in [15,13]. The current version
of the package is freely available for download at:
http://allserv.rug.ac.be/˜ajdhooge/research.html
It requires Matlab 6.* to be installed on your computer. In the present paper we
concentrate on the implementation in matcont of the continuation of the Fold
bifurcation of limit cycles, using a minimal extended system, i.e. we only append
a scalar equation to the deﬁnition of limit cycles [7]. The only existing software
to perform this continuation is auto97-00 [6] which uses a maximal extended
system, i.e. the number of state variables is approximately doubled. In the somewhat similar situation of the continuation of the period doubling bifurcations it
was shown in [7] that at least in the Matlab implementation minimal extended
systems are much more eﬃcient. Details on the general structure of matcont
are given in [5]. We show its use in a relatively simple situation where we continue an equilibrium, a limit point and a Hopf point of a diﬀerential equation
deﬁned in a standard Matlab ODE ﬁle. This ﬁle is built using the GUI of matcont (Fig. 1, left). We note that the standard Matlab odeget and odeset only
support Jacobian matrices w.r.t. phase variables coded in the ode-ﬁle. However,
we also need the derivatives with respect to the parameters. It is also useful to
have higher-order symbolic derivatives available. To overcome this problem, the
package contains new versions of odeget and odeset which support Jacobians
with respect to parameters (Jacobianp) and higher-order derivatives. The new
routines are compatible with the ones provided by Matlab. The GUI of matcont
makes it possible to choose the option to compute the derivatives symbolically
if the symbolic toolbox is installed (Fig. 1, left).
The following chemical model of a catalytic reaction of CO-oxidation was
studied in [3] and [9].

 x˙ = 2q1 z 2 − 2q5 x2 − q3 xy
y˙ = q2 z − q6 y − q3 xy

z˙ = −q4 z − kq4 s
where z = 1 − x − y − s. In this low-dimensional problem a curve of equilibrium
solutions was traced with q2 as free parameter, starting from the initial values
q1 = 2.5, q2 = 1.040992, q3 = 10, q4 = 0.0675, q5 = 1, q6 = 0.1, k = 0.4, x =
0.07792759, y = 0.2330654 and z = 0.4921479. This branch is represented in Fig.
1(left) as the curve that starts in the bottom right corner. On this equilibrium
branch two limit points (LP) and two Hopf points (H) were found.
The ﬁrst Hopf point is used to start a Hopf curve continuation with free
parameters q2 and k. We ﬁnd a closed curve that connects the two Hopf points.

Numerical Continuation of Fold Bifurcations of Limit Cycles in MATCONT

703

Fig. 1. The system window and a bifurcation diagram.

The symbol BT on Fig. 1(right) denotes a Bogdanov-Takens point. The two GH
points in Fig. 1(right) are generalized Hopf points, i.e., points where the ﬁrst
Lyapunov coeﬃcient changes sign. The ﬁrst limit point is used to start a forward
fold continuation with both q2 and k free. Both limit points on the equilibrium
curve are connected by this fold curve. This fold curve also contains a Cusp point
(CP) and intersects the Hopf curve in the BT points.

2

Limit Cycles and Fold Bifurcations of Limit Cycles

2.1

Limit Cycles

A limit cycle is an isolated periodic solution of (1) with period T , i.e. x(0) = x(T ).
Since T is not known in advance we use an equivalent system deﬁned on the
ﬁxed interval [0, 1] by rescaling time. Then the system reads
dx
dt

− T f (x, α) = 0
x(0) = x(1)

(2)

A phase shifted function φ(t) = x(t + s) is also a solution of (2) for any value
of s. To obtain a unique solution an extra constraint is needed. The following
integral constraint is often used [6],[11]
1
0

x(t), x˙ old (t) dt = 0

(3)

where x˙ old (t) is the tangent vector of a previously calculated limit cycle and is
therefore known, x, v is just a diﬀerent notation for xT v. This condition tries
to select the solution which has the smallest phase diﬀerence with respect to the
previous solution xold .
The complete boundary value problem (BVP) deﬁning a limit cycle consists
of (2) and (3).

704

2.2

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

Fold Bifurcation of Limit Cycles

A Fold bifurcation of limit cycles (Limit Point of Cycles, LPC) generically corresponds to a turning point of a curve of limit cycles (cf. the example in §5).
It can be characterized by adding an extra constraint G = 0 to (2), (3) where
G is the Fold test function. The complete BVP deﬁning a LPC point using the
minimal extended system is
 dx
=0

dt − T f (x, α)

 x(0)
− x(1)
=0
(4)
1

x(t), x˙ old (t) dt = 0

 0
G[x, T, α]
=0
where G is deﬁned by requiring

 
0
v

0

N1  S  = 
0.
G
1




Here v is a function, S and G are scalars and

− f (x(t), α)
D − T fx (x(t), α)

δ
−
δ
0
1
0
N1 = 

Intf (x(·),α)
0
Intv01
v02

(5)


w01
w02 

w03 
0

(6)

where the bordering functions v01 , w01 , vector w02 and scalars v02 and w03 are
chosen so that N 1 is nonsingular [7].

3

Continuation of Limit Cycles

For the numerical continuation of a limit cycle with respect to a parameter we
need to discretize the system consisting of (2) and (3). And to use a Newton-like
method the Jacobian matrix of the discretized system is also needed.
3.1

Discrete Representation of the Solution Function

The method used to discretize the BVP is called orthogonal collocation [4]. First
the interval [0 1] is subdivided in N smaller intervals.
0 = τ0 < τ1 < · · · < τN = 1.
On each of these intervals the solution x(τ ) is approximated by an order m vector
valued polynomial x(i) (τ ). This is done by deﬁning m + 1 equidistant points on
each interval
j
τi,j = τi + (τi+1 − τi ) (j = 0, 1, . . . , m)
m
and deﬁning the polynomials x(i) (τ ) as

Numerical Continuation of Fold Bifurcations of Limit Cycles in MATCONT

x(i) (τ ) =

m

705

xi,j li,j (τ ).

j=0

Here xi,j is the discretization of x(τ ) at τ = τi,j (we note that xN −1,m = xN,0 )
and the li,j (τ )’s are the Lagrange basis polynomials
m

li,j (τ ) =
k=0,k=j

τ − τi,k
.
τi,j − τi,k

On each interval [τi , τi+1 ] we require that the polynomials x(i) (τ ) satisfy the
BVP exactly in m collocation points ζi,j (j = 1, . . . , m) (which are not the same
as the τi,j ). It can be proved that the best choice for the collocation points are
the Gauss points [4]. These are the roots of the Legendre polynomial relative
to the interval [τi , τi+1 ]. With this choice of collocation points the error in the
approximation is extremely small
||x(τi,j ) − xi,j || = O(hm )
and for the mesh points τj it’s even better
||x(τi ) − xi,0 || = O(h2m ).
3.2

Numerical Integration

In (4) and (5) we need to compute integrals over [0 1] using the discretization
discussed in §3.1. For N = 3 test intervals and m = 2 collocation points the
following data are associated with the discretized interval [0 1]
τ0
◦
◦
τ0,0 τ0,1

τ1
τ2
τ3
•
◦
•
◦
◦
τ0,2
τ2,0
τ2,1 τ2,2
τ1,0
τ1,1
τ1,2
τ3,0
t1 w1 t1 w2 t1 w3 + t2 w1 t2 w2 t2 w3 + t3 w1 t3 w2 t3 w3
σ0,0 σ0,1
σ1,0
σ1,1
σ2,0
σ2,1 σ3,0
The total number of mesh points (tps) is N × m + 1, the total number of points
(ncoords) is tps × dim(x). Each mesh point τi,j in a test interval [τi , τi+1 ] has a
particular weight wj+1 , the Gauss-Lagrange quadrature coeﬃcient. Some mesh
points (the black bullets) belong to two test intervals. We set ti = τi − τi−1 (i =
1, . . . , N ). The integration weight σi,j of τi,j is given by wj+1 ti+1 for 0 ≤ i ≤ N −1
and 0 < j < m. For i = 0, . . . , N − 2 the integration weight of τi,m = τi+1,0 is
given by σi,m = wm+1 ti+1 + w1 ti+2 and the integration weights of τ0 and τN are
1
given by w1 t1 and wm+1 tN , respectively. The integral 0 f (t)dt is approximated
N −1
m−1
by i=0
j=0 f (τi,j )σi,j + f (1)σN,0 .

706

3.3

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

Discretization of the BVP

Using the discretization described in §3.1 we obtain the discretized BVP

m
m
i,j
i,j


j=0 x li,j (ζi,k ) − T f (
j=0 x li,j (ζi,k ), α) = 0
x0,0 − xN −1,m = 0


N −1
m−1
i,j
i,j
˙ old + σN,0 xN,0 , x˙ N,0
i=0
j=0 σi,j x , x
old = 0
The ﬁrst equation in fact consists of N m equations, one for each combination of
i = 0, 1, 2, ..., N − 1 and k = 1, 2, ..., m.
3.4

The Jacobian of the Discretized Equations

The Jacobian of the discretized system is sparse. In the Newton iterations during
the continuation process a system consisting of this Jacobian matrix and an extra
row (the tangent vector) is solved. For N = 3 test intervals, m = 2 collocation
points and dim(x) = 2 this matrix has the following sparsity structure (•’s are
non-zero’s).
 0,0

x
x0,1 x1,0 x1,1 x2,0 x2,1 x3,0 T α
 • • • • • •
• •


 • • • • • •
• •


 • • • • • •
• •


 • • • • • •
• •



• • • • • •
• •



• • • • • •
• •



• • • • • •
• •



• • • • • •
• •
(7)




•
•
•
•
•
•
•
•



• • • • • • • •



• • • • • • • •



• • • • • • • •


 • •

• •


 • •

• •


 • • • • • • • • • • • • • • • •
• • • • • • • • • • • • • • • •
The columns of (7) label the unknowns of the discretized problem. The ﬁrst
dim(x) rows correspond to the ﬁrst collocation point etc. In (2) and (3) there
are 3 unknowns: x, the period T and a parameter α. So the part of the Jacobian
corresponding with the ﬁrst equation of (2) has the following form:
[D − T fx (x, α)

− f (x, α)

− T fα (x, α)].

In (7) D − T fx (x, α) corresponds to N = 3 blocks with dimension 4 × 6 (=
(dim(x) ∗ m) × (dim(x) × (m + 1))). The part in (7) that deﬁnes the boundary
conditions for limit cycles has the form:
[Idim(x)

0dim(x)×(N m−1)dim(x)

− Idim(x)

0dim(x) ].

Numerical Continuation of Fold Bifurcations of Limit Cycles in MATCONT

707

These are in (7) the dim(x) = 2 rows following the 4 × 6 blocks. These rows
contain two nonzero parts corresponding with x0,0 and xN,0 (±2 × 2 identity
matrix). The last but one row in (7) is the derivative of the discretization of (3).
The last row is added by the continuation code.

4
4.1

Continuation of LPC Cycles
Discretization of the LPC Equations

Numerically we solve a discretized version of (5), say
 


0
vd
0
1

Md Sd  =  
.
0
Gd
1

(8)

where Md1 is the discretization of N 1 using orthogonal collocation. Here and
elsewhere the subscript d denotes discretization. The structure is similar to that
of (7); however the two last rows and colums have a diﬀerent meaning. The
last but one row corresponds with Int[f (x(·),α)]d and the last but one column
corresponds with [−f (x(t), α)]d .
4.2

The Jacobian of the Discretized LPC Equations

To continue the discretized equations of (4) the Jacobian matrix of the system
is needed which means that the derivatives of Gd with respect to the unknowns
of the system, i.e., with respect to xi,j , T, α, have to be calculated.
The derivative with respect to z (being a component of xi,j , T or α) is

 




([−T fx (x(t), α)]d )z ([−f (x(t), α)]d )z 0 
0
vdz
v
d

0

0
0
0
1




 Sd  =
Md Sdz  + 
0.
(Int[f (x(·),α)]d )z
0
0
Gdz
Gd
0
0
0
0
Simplifying gives





[T fx (x(t), α]dz vd + [f (x(t), α)]dz Sd
vdz


0
.
Md1  Sdz  = 


−Int[f (x(·),α)]dz vd
Gdz
0

Instead of solving this for every z we solve the transposed equations
(w1∗ , w2∗ , w3 , w4 )Md1 = (0, 0, 1)

(9)

where w1 is a dim(x) ∗ N ∗ m vector, w2 a dim(x) vector and w3 and w4 are
scalars. Combining (8) and (9) we ﬁnd
Gdz = w1∗ ([T fx (x(t), α]dz vd + [f (x(t), α)]dz Sd ) − w3 Int[f (x(·),α)]dz vd .

(10)

So in each iteration step we solve two systems with the structure of (7) or its
transpose. We note that the Jacobian is very sparse if N is large; we exploit this
by using the Matlab sparse matrix routines.

708

4.3

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

Multipliers

Multipliers can be computed in matcont as in auto[6] and content[11] by
making a special decomposition(condensation of parameters) in (7). In LPC
points two multipliers must be equal to 1. This can be used to check the correctness of the continuation.

5

An Example

We consider the following system
v˙ = y − 0.5(v + 0.5) − 2w(v + 0.7) − m∞ (v − 1)
w˙ = 1.15(w∞ − w)τ
where m∞ = (1 + tanh((v + 0.01)/0.15))/2, w∞ = (1 + tanh((v − z)/0.145))/2
and τ = cosh((v − 0.1)/0.29). Here v and w are the state variables and y and z

Fig. 2. Plot of equilibrium curve, limit cycles started from H and the LPC curve started
from LPC.

are the parameters. This is a modiﬁcation of the fast subsystem of the MorrisLecar equations studied in [16],[17]; the Morris-Lecar equations were introduced
in [14] as a model for the electrical activity in the barnacle giant muscle ﬁber. In
our model y corresponds to the slow variable in the fast Morris-Lecar equations;
z is the potential that corresponds to w∞ = 12 . By time integration (accessible
via the matcont GUI) we ﬁnd a stable equilibrium (EP) for y = 0.110472 and

Numerical Continuation of Fold Bifurcations of Limit Cycles in MATCONT

709

Fig. 3. LPC curve in phase space.

z = 0.1 at (0.04722, 0.32564). We continue this equilibrium with free parameter y
for decreasing values of y. We ﬁnd a Hopf (H) bifurcation point at y = 0.075659,
two limit points (LP) at y = −0.020727 and y = 0.083257 and a neutral saddle
(H) at y = 0.033207, see Fig. 2. There are stable equilibria before the ﬁrst H
point and after the second LP point and unstable equilibria between the ﬁrst
H point and the second LP point. The Lyapunov coeﬃcient in the ﬁrst Hopf
point l1 = 16.47803 is positive which means that the periodic orbits are born
unstable. This Hopf point is used to start a limit cycle continuation. We choose
N = 30 test intervals and m = 4 collocation points for the discretization. We
detect a limit point of cycles LPC at y = 0.084569. At this moment the stability
is gained. Afterwards the stability is preserved but the period tends to inﬁnity
and the periodic orbits end in a homoclinic orbit. We select the LPC on this
branch of limitcycles and free both y and z to continue the LPC curve through
this LPC point. This curve is seen in Fig. 2 as the curve on the right of the LPC
point and is also plotted in Fig. 3 in phase space. We note that it shrinks to a
single point.

References
1. Allgower, E.L.,Georg, K.: Numerical Continuation Methods: An introduction,
Springer-Verlag (1990)
2. Beyn, W.J., Champneys, A., Doedel, E., Govaerts, W., Kuznetsov, Yu.A., Sandstede, B.: Numerical continuation and computation of normal forms. In: B. Fiedler,
G. Iooss, and N. Kopell (eds.) “Handbook of Dynamical Systems : Vol 2, Elsevier
(2002) 149–219.

710

A. Dhooge, W. Govaerts, and Y.A. Kuznetsov

3. Bykov, V.I., Yablonski, G.S., Kim V.F.: On the simple model of kinetic selfoscillations in catalytic reaction of CO oxidation, Dokl. Akad. Nauk SSSR
242(3)(1978) 637–639
4. De Boor,C. and Swartz, B.: Collocation at Gaussian points, SIAM Journal on
Numerical Analysis 10(1973) 582–606.
5. Dhooge, A., Govaerts, W., Kuznetsov Yu.A.: matcont: A matlab package for
numerical bifurcation analysis of ODEs, to appear in TOMS (2003).
6. Doedel, E.J., Champneys, A.R., Fairgrieve, T.F., Kuznetsov, Yu.A., Sandstede, B.,
Wang, X.J., auto97-auto2000 : Continuation and Bifurcation Software for Ordinary Diﬀerential Equations (with HomCont), User’s Guide, Concordia University,
Montreal, Canada (1997–2000). (http://indy.cs.concordia.ca).
7. Doedel, E.J., Govaerts W., Kuznetsov, Yu.A.: Computation of Periodic Solution
Bifurcations in ODEs using Bordered Systems, to appear in SIAM Journal on
Numerical Analysis (2001).
8. Govaerts, W.: Numerical Methods for Bifurcations of Dynamical Equilibria, SIAM,
Philadelphia (2000).
9. Khibnik, A.I., Bykov, V.I., Yablonski, G.S.: 23 phase portraits of the simplest
catalytic oscillator, J. Fiz. Khim. 61(1987) 1388–1390
10. Kuznetsov, Yu.A.: Elements of Applied Bifurcation Theory, 2nd edition, SpringerVerlag, New York (1998)
11. Kuznetsov, Yu.A., Levitin, V.V., content: Integrated Environment for analysis
of dynamical systems. CWI, Amsterdam (1997): ftp://ftp.cwi.nl/pub/CONTENT
12. matlab, The Mathworks Inc., http://www.mathworks.com
13. Mestrom, W.: Continuation of limit cycles in matlab, Master Thesis, Mathematical Institute, Utrecht University, The Netherlands (2002).
14. Morris, C., Lecar,H.: Voltage oscillations in the barnacle giant muscle ﬁber,Biophys
J. 35 (1981) 193–213
15. Riet, A.: A Continuation Toolbox in matlab, Master Thesis, Mathematical Institute, Utrecht University, The Netherlands (2000).
16. Terman, D.: Chaotic spikes arising from a model of bursting in excitable membranes, Siam J. Appl. Math. 51 (1991) 1418–1450.
17. Terman, D.: The transition from bursting to continuous spiking in excitable membrane models, J. Nonlinear Sci. 2, (1992) 135–182.

