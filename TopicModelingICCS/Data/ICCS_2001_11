Performance and Stability Analysis
of a Message Oriented Reliable Multicast
for Distributed Virtual Environments in Java
Gunther Stuer, Jan Broeckhove, and Frans Arickx
Antwerp University
Department of Mathematics and Computer Sciences
Groenenborgerlaan 171, 2020 Antwerp, Belgium
gstuer@ruca.ua.ac.be

Abstract. The aim of this paper is to present the performance and stability
analysis of a reliable multicast system. It has been optimized for use in
distributed virtual environments and is implemented in Java. The paper will
describe the characteristics of our reliable multicast implementation, as
observed in our test environment. We will also compare with non-reliable
multicast protocols.

1 Introduction
This paper describes the performance analysis of a message oriented reliable multicast
protocol for distributed virtual environments.
In the construction of a Distributed Virtual Reality Environment (DVE), a reliable
and efficient multicast protocol on the Internet is necessary [1]. First, lets put this
paper in a broader perspective by describing its relevance in the development of a
highly dynamical distributed virtual environment.
One of the bottlenecks in virtual environments has always been the availability of
sufficient network bandwidth to allow the participating objects to communicate with
each other [2]. With the introduction of multicasting this problem was partly solved,
but most traditional multicast protocols have two drawbacks [3].
The first is that these protocols are based on best effort approaches, i.e. message
delivery is not guaranteed. In order to achieve this guarantee, reliable multicast
protocols were introduced [4]. Although there are already many such protocols, none
is optimized for distributed virtual environments [5]. Since almost all of the existing
reliable multicast protocols aim to send a relatively large data chunks (e.g. a file) from
one source site, they are not suitable for application in a DVE. A DVE typically has
many source sites, the size of the data is relatively small and there are a large number
of messages. Also, to our knowledge, an implementation of such a protocol in Java,
which might a priori have some performance and timing drawbacks, has not yet been
attempted.
The second problem is that multicast groups are statically allocated [6]. With
virtual environments one usually considers spatial criteria to divide the world in
partitions, where each partition transmits its data on one multicast group. However,
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 423-432, 2001.
© Springer-Verlag Berlin Heidelberg 2001

424

G. Stuer, J. Broeckhove, and F. Arickx

with dynamic environments this isn’t sufficient anymore. Participants have a tendency
to flock together and this leads to situations where some groups are very heavily used,
while others are completely idle. Allocating multicast groups in a dynamical way can
solve this problem [7]. Techniques that can be used for this include probing [8] and
fuzzy clustering [9]. With these methods one can determine at runtime which
participants should be put together in the same multicast groups at any given moment
in time.
In the classification of reliable multicast protocols [3,12] the approach that we use
is most closely related to the Transport Protocol for Reliable Multicast. When one
classifies protocols on the basis of data buffering mechanisms [13], ours is a receiverinitiated approach, i.e. no acknowledgements of receipt (ACKs) are used. Instead, the
receiver transmits a negative acknowledgement (NACK) if retransmission is needed,
because there was an error in the message, because a skip in sequence numbers
indicated a missing message or because a timeout has elapsed.
With this approach, two problems can arise: (1) a NACK implosion at the sender
due to the detection of a missing packet by many receivers, and (2) buffer size
limitations at the sender side. Indeed, in principle, the sender needs to keep all
messages available for retransmission because a NACK may arrive at any time. One
never knows whether all interested parties have successfully received the message.
This leads to the fact that buffers should in principle be infinite.
Waiting a pseudo-random time interval before sending a NACK solves the first
problem. Also, when a client is waiting to send a NACK and in the mean time it
receives a NACK-request from another client for the same missing packets, it can
drop his own request. The second problem is solved heuristically by assuming that
messages are of no further interest after a configurable amount of time as indicated
above. As indicated before, this is appropriate in VR applications.

2 Design and Implementation
We have implemented our reliable multicast protocol taking into account a number of
design features and goals:
1. The protocol will be used in distributed virtual reality systems. From previous
work [10] we know that this has some interesting implications.
� The typical message size used in virtual reality applications is rather small (<
1kB) because once the viewers know what an object looks like and where it is
positioned, one only needs to transmit the changes with respect to that
information.
� Because a frame rate of 30 Hz is considered acceptable, there is no point in
sending more than 30 update messages per second.
� When dead reckoning algorithms – i.e. determination of the current position on
the basis of previous positions – are applied, an update rate of once per second
will often suffice.
� When a message doesn’t arrive during the first few seconds after is has been
sent, it has completely lost its relevance to the virtual world.

Performance and Stability Analysis of a Message Oriented Reliable Multicast

425

Based on the average message size and the maximum number of message sent per
second, we can make a realistic prediction about buffer sizes and timeout windows
that are key parameters in implementing the reliability in the protocol. It can also
improve performance because we do not need to resize our buffers while in action.
Because we know the average and the maximum throughput, we can apply the
Usage Parameter Control (UPC) algorithm a.k.a. leaky bucket algorithm. This
algorithm can be used to control bandwidth usage. An example is its use in ATM
networks [11].
And most importantly, we can relax the reliability criteria. It is appropriate for our
problem to have the sender buffer messages, for possible retransmission, only for a
certain amount of time and then discard them. The amount of time may vary
depending on the type of message. This way we can assign each message an
importance factor. Important messages should be kept longer in the buffer.
2. The protocol has to be implemented in JAVA. The main motivation is that the
virtual reality system that is being designed will be implemented in Java. We chose
Java because it has features that we want to use, such as multithreading, loading
classes across the network and the write-once-run-everywhere strategy. However,
choosing Java as the implementation language adds an extra difficulty because it is
not the optimum choice for time sensitive applications.
3. In view of the need for easy maintainability and portability, we have put significant
effort into obtaining a good design. We were rigorous in defining interfaces with
ease of use in mind, and made extensive use of Design Patterns [14, 15].
4. The primary design goal for our VR system is that it has to be distributed. The
termination of a node, due to crash or transmission failure over an extended period,
should have minimal impact on the whole. As a consequence, the reliable multicast
architecture also needs to be completely distributed. This means that every
participating node should be able to operate independently of all others to ensure
the functioning of the protocol and in particular its reliability.
For more details on the implementation and the particular algorithms that were used,
we refer to [16].

3 Test Environment
The experiments were performed using 45 Pentium-III computers. Each has a 450
MHz processor, 64 MB memory and a 3Com 100 Mbit NIC. The network is a 100
Mbit Ethernet. The PCs are split in 5 groups, each group interconnected by a 100Mb
HUB. A 100Mb switch connects these 5 groups. All computers have Windows98 as
operating system and run Sun’s JDK 1.2.2
In a third paper we will compare the reliable multicast protocol between different
operating systems, different computers and different Java Virtual Machines.

426

G. Stuer, J. Broeckhove, and F. Arickx

4 Benchmarks for Java-Based Multicasting
In this paragraph we describe the artefacts we encountered while searching for the
boundaries of multicasting in Java using our test environment described above.
The first thing one should wonder about when researching multicast behaviour is
trying to find ways to determine how the Java API handles multicasting. The first
experiment we designed had as sole purpose to check whether the Java-send() method
is blocking or not. We checked this by sending a datagram every 10 milliseconds.
From figure 1 one can see that the gap between the actual amount of bytes sent and
the theoretical maximal amount increases with increasing datagram size. This gap
signifies the time needed to actually send the datagram. And as such we can conclude
that send() is a blocking method. If this would have been an asynchronous message,
throughput per second would be proportional to the datagramsize as 10 milliseconds
is more than time enough to send one datagram.

Fig. 1. The Java-send() operation is clearly a blocking operation. The larger the datagram sent,
the larger the gap between the actual throughput and the maximal throughput.

In a typical VR application you have many nodes sending data to each other at the
same time. In a second experiment we examined how, in our test environment, java
multicast behaves when multiple servers are active at the same time. We have chosen
to configure the servers as such that they each send a one-kilobyte packet every 33
milliseconds, the maximum values for VR applications. This way we can easily
compare the results with those from our reliable multicast system. From figure 2 one
can see that throughput is linear until we reach about 35 senders. After this, there are
too many collisions and the increase in throughput flattens.
It is important to know what the ideal datagram size is. To discover this we
designed the following experiment in which a server sends as many datagrams as
possible of varying size. It has to be noted that multicast is build upon UDP and the
maximum datagram size is 63 bytes. Figure 3 shows how throughput increases with
increasing datagram size. This increase in throughput is dramatic for datagram sizes
less than 8 kilobytes. After this, the increase is only average. From this graph one can

Performance and Stability Analysis of a Message Oriented Reliable Multicast

427

deduct three things. First, there isn’t much sense in using datagrams larger than 8
kilobytes, secondly, when the datagrams are very small, throughput drops
significantly.

Fig. 2. As the number of servers increase, throughput increases linearly until there is a
throughput of approximately 1.2 MB/s. This is due to the increasing amount of collisions and to
the fact that it takes about 0.9 ms to handle one datagram.

Since in VR application, the typical message size is less than 1 kilobyte, one can
see from this graph that in a configuration with one server, it is not possible to send
more than approximately 5.6 MB/s. When multiple servers are active, the effect of
collisions has to be taken into account (see figure 4).

Fig. 3. For datagram sizes smaller than 8 KB, small increases result in major throughput gains.
After this, throughput increases only moderately. Also note that there are about 10% missing
datagrams. This is mainly due to the NIC being unable to handle all the datagrams fast enough.

The third observation one can make is that there is a discrepancy between the amount
sent and the amount received. For normal multicast this isn’t a real problem, but for
reliable multicast systems, this can become a problem, as all datagrams have to be
received.

428

G. Stuer, J. Broeckhove, and F. Arickx

The next experiment is used to determine the effect of pausing between consecutive
sends. The server is configured to continuously send a 8KB packet and wait a
configurable amount of time.

Fig. 4. When multiple servers are active, there is danger of collisions; we see a performance
drop when datagrams become larger than 8 KB.

Figure 5 shows that without waiting, a maximum throughput of 7.5 MB/s can be
achieved. This leads us to the conclusion that sending a 8KB packet takes about 0.9
ms. There the smallest amount of time we can wait is 1 ms, the slightest pause
between sends, will halve the maximum throughput, as can be seen from figure 5.
Since our multicast system uses the leaky bucket algorithm [11] to control congestion,
we have to wait between consecutive sends. This implies that we won’t be able to
send more than about 520 messages a second. But for VR applications this is more
than enough.

5 Performance Analysis
Since in a typical VR environment one has many participants, each sending its
information, it’s very important to construct an experiment that measures performance
when many different servers are active. For this experiment we assumed the typical
VR settings: the messages sent are one packet in size and each packet is 1KB. These
messages are sent at a rate of 30 a second. Figure 6 shows how throughput evolves
when we active more and more senders each sending 30 KB/sec. From figure 5 one
can see that throughput increases until we reach 300 datagrams a second. This seems
to be the maximum amount of datagrams our multicast system can handle. After this,
throughput slowly degrades due to increasing datagram losses. When our VR
environment needs more participating servers, we must either lower throughput, for
example by using dead reckoning algorithms, or work with multiple multicast groups.
An important note that has to be made is that performance and scalability is very
dependant on the Operating System en Java Virtual Machine used. These
observations will be discussed in an upcoming paper. Unfortunately, network
conditions aren’t always optimal. As such, it is important to determine the stability of

Performance and Stability Analysis of a Message Oriented Reliable Multicast

429

our protocol under problematic situations. For this we created an artificial error rate
by dropping a certain percentage of all datagrams just before they are to be sent. For
this experiment we had 1 server sending at a rate of 30 messages a second. Each
message is 1 KB in size.

Fig. 5. When there is no pause between two consecutive sends, the application reaches its
maximal throughput. This is approximately 7.6 MB. Slight pausing periods will severely lower
total throughput.

From figure 7 we see that throughput remains very good, even under high error rates.
This can be explained because we continuously put new messages in the system
regardless whether the old ones were completely sent or not. A disadvantage of this is
that the load on the servers increases with degrading networks.

Fig. 6. Multiple servers, each sending at a rate of 30 datagrams a second, will initially increase
the total throughput. At approximately 300 KB/s there is a breakpoint, which indicates that this
is the maximal throughput the Reliable Multicast System can handle.

The third test was designed to see how different message sizes would influence
throughput. From figure 3 we know that an 8 KB message would be ideal, but a

430

G. Stuer, J. Broeckhove, and F. Arickx

typical VR-message is only 1 KB and as such we would have a tremendous overhead.
This is why we chose to fix the datagram size at 1 KB and test what the throughput
will be when we send large messages consisting of multiple datagrams.

Fig. 7. For small messages, the error rate doesn’t influence the total throughput because the
server on sending new messages at the same rate. For large messages however, the server has to
lower the injection of new messages because the maximal amount of sends per second is
reached.

Once again we had a server sending at a ratio of 30 messages as second. This time
however the message size varies from 1 till 80 packets, with each packet being 1 KB.
As one can see from figure 8, there is almost no influence at all. From this we can
conclude that handling large messages is as efficient as handling small ones. This test
demonstrates that the used data structures work as expected.

Fig. 8. Total throughput increases linearly with the message size. This indicates that the
fragmentation and assembly algorithms work as expected.

The fourth and last experiment was designed to check how well our reliable multicast
protocol would work when applied in other areas. For this we varied the amount of

Performance and Stability Analysis of a Message Oriented Reliable Multicast

431

messages sent per second. Each message is 1KB in size. As one can see from figure 9,
the protocol remains efficient for large send frequencies. The flattening at the end of
the curve indicates that our limit is at 400 sends a second. Which is very good when
you consider that the maximum for standard, non-reliable, multicast is about 520
messages a second.

Fig. 9. As the number of sends a second increase, the throughput increases with it. From a send
rate of approximately 400 messages a second there is stagnation in the throughput. This
indicates that this is the maximum send rate of the Reliable Multicast System.

6 Future Work
This reliable multicast protocol is an important element in a much bigger project: the
creation of a highly dynamical distributed virtual environment.
The next step will be minimizing the problems still remaining as stated above. The
design and implementation of the probe classes [16], which will strongly decrease the
total amount of messages sent when new objects enter the virtual world, will be
considered in the near future. This technique is based upon the idea of sending chunks
of code to the participants instead of data. This code will be able to negotiate whether
the two objects are interested in each other, or not. If they are, the multicast groups on
which they transmit their data will be exchanged.
As a next step, we will implement the fuzzy clustering algorithm [9] to dynamically
allocate a fixed set of multicast groups to all participating objects. The most
challenging task will be to define the criteria, which will determine which objects
should be grouped together at a certain moment in time. To make this mechanism as
flexible as possible, the criteria will be described in XML [17].

432

G. Stuer, J. Broeckhove, and F. Arickx

7 Conclusions
We think that we can safely conclude that the current version of the reliable multicast
protocol for distributed virtual environment written in Java meets its performance
targets inherent to the design goals. Due to the constantly improving performance and
growing feature set of Java, the construction of a full blown distributed virtual reality
system becomes more and more plausible. The protocols presented in this and future
papers can only help to make the communications scheme more reliable, dynamic,
performing and scalable.

References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.

Fumiaki Sato, Kunihiko Minamihata, Hisao Fukuoka, Tadanori Mizuno, “A Reliable
Multicast Framework for Distributed Virtual Reality Environments”, Proceedings of the
1999 International Workshop on Parallel Processing.
Michael J. Zyda, “Networking Large-Scale Virtual Environments”, Naval Postgraduate
School, Monterey, California, USA.
Katia Obraczka, “Multicast Transport Protocols: A survey and taxonomy”, IEEE
Communications Magazine, January 1998, pp. 94-102.
Kara Ann Hall, “The implementation and evaluation of reliable IP multicast”, University
of Tennessee, Knoxville, USA, 1994.
Kenneth P. Birman, “A Review of experiences with reliable multicast”, Software –
Practice and Experience 29(9), 741-774 (1999)
Chris Greenhalgh, “Dynamic, embodied multicast groups in MASSIVE-2”, Technical
Report NOTTCS-TR-96-8, University of Nottingham, UK, 1996.
Chris Greenhalgh, “Spatial Scope and Multicast in Large Virtual Environments”,
Technical Report NOTTCS-TR-96-7 University of Nottingham, UK, 1996
Gunther Stuer, Jan Broeckhove, Frans Arickx, “A message oriented reliable multicast
protocol for a distributed virtual environment”, ICSE’99 (CS-163)
C. Looney, “Fuzzy Clustering: A new algorithm”, ICSE’99 (CS-115)
Kris Demuynck, Jan Broeckhove, Frans Arickx, “The VEplatform system: a system for
distributed virtual reality”, Future Generation Computer Systems 14 (1998), pp. 193-198.
th
William Stallings, “Data & Computer Communications, 6 edition”, ISBN 0130843709,
pp 405
B. Sabata, M.J. Brown, B.A. Denny, “Transport Protocol for Reliable Multicast: TRM”,
Proc. IASTED International conference Networks, January 1996, pp. 143-145.
Brian Neil Levine, J.J. Garcia-Luna-Aceves, “A comparison of reliable multicast
protocols”, Multimedia Systems 6 (1998), pp. 334-348
Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, “Design Patterns”, AddisonWesley.
Gunther Stuer, Jan Broeckhove, Frans Arickx, “Design and Implementation of a Reliable
Multicast Protocol for Distributed Virtual Environments written in Java”, submitted to the
EuroMedia 2001 Conference.
Gunther Stuer, Frans Arickx, Jan Broeckhove, “A message oriented reliable multicast
protocol for J.I.V.E.”, Parco99, Parallel Computing – Fundamentals & Applications, pp.
681-688.
S. Laurent, “Building XML Applications”, Osborn McGraw-Hill.

