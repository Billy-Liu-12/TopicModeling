Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1380 – 1389

International Conference on Computational Science, ICCS 2012

Design and Evaluation of a High Performance Distributed Expert
System (HPDES) for Aerospace Ground Verification System
Yang Gao a, Ying Liua,b, Cheng Wangc, Xiaojun Lia, Guoyu Oua
a
Graduate University of Chinese Academy of Sciences
Fictitious Economy and Data Science Research Center, Chinese Academy of Sciences
Beijing, China 100190
c
Agilent Technologies Co. Ltd,, Beijing, China, 100102
{gaoyang0309,lixj09,ouguoyu10}@mails.gucas.ac.cn, {yingliu}@gucas.ac.cn, zheng_wang@agilent.com
b

Abstract
Ground verification system is significant in aerospace engineering because it can verify the correctness and robustness of the
entire system before spacecrafts are launched. Since expert system can detect errors or exceptions automatically , it is the core
component of a verification system. As the data throughput in aerospace engineering is huge, and verification processing is
complex, conventional serial expert system cannot satisfy the requirement in real-time processing. Therefore, in this paper, a
High performance Distributed Expert System (HPDES) is proposed. Firstly, HPDES proposes a novel language, called CASES,
for rule configuration, and then each rule is compiled into an intermediate code. This method allows rules to be added, deleted or
modified dynamically. Secondly, in order to improve the performance to meet the requirement of real-time processing, Virtual
Executable Environment (VEE) is proposed. VEE allows our expert system to run in parallel or distributed fashion. Thus, realtime processing capability is achieved by assigning different pattern detection tasks to different VEEs dynamically, which utilizes
the power of modern parallel and distributed computer systems efficiently. Experiments in a real ground verification system
shows that HPDES can detect errors and exceptions in the data stream from certain spacecraft efficiently.
Keywords: Expert System, Parellel Computing, Distributed Computing, Aerospace, Multicore

1. Introduction
Expert system is a computer system that emulates the decision-making intelligent of a human expert [1]. Expert
systems are designed to solve complex problems by reasoning on knowledge, just like a do main expert. Cu rrently,
expert systems have been applied widely in applicat ions in many domains, such as medicine, agriculture, power
supply, oil exp lorat ion, etc. where expert systems may contribute to data analysis, monitoring, interpretation,
diagnosis, fault isolation, design, planning, repairing, control, maintenance, etc.
Aerospace technology is a core high-tech in all the countries in the world and it is an indication of the scientific
and technological level of a country. In recent years, USA, Russia, Europe and Ch ina have launched a number of
spacecrafts, such as spaceships, rockets, space shuttles, satellites and space stations. Further more, each spacecraft
may need to dock with others. However, the cost of aerospace engineering is so high that any failure or mistake is

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.152

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

1381

not expected in any task, like launching or docking. Therefore, in order to guarantee the success, ground verificat ion
system which verifies the correctness and robustness of the entire system before launching is in real demand.
In ground verificat ion system, tremendous data with high throughput is required to be processed in real time.
Usually, in a mission, mult iple devices are involved, where each device may deliver tens of different types of data
and each type may contain tens or hundreds of packets per second. Obviously, such requirements have exceeded the
capability of any hu man being. Therefore, expert system, wh ich can automatically mon itor the health of the entire
aerospace system and detect errors or exceptions, is in demand. On the other hand, in aerospace ground verificat ion
system, timing is a c rit ical factor. Every packet must be analyzed and alarms have to be sent out before the next
data packet arrives whenever an exception or error is detected. However, due to the massive size and high data
throughput, traditional expert systems cannot satisfy the requirement in timing in aerospace applications.
Therefore, in order to meet the requirements of a ground verification system in an aerospace project, this paper
proposes a High Performance Distributed Expert System (referred as HPDES). HPDES has two contributions:
1) A rule configuration and compiling method: CASES, a language similar with Lisp, is proposed for applicat ion
expert to input his/her rules. Then, the ru le code will be co mpiled into an intermediate code, which will be
loaded into the runtime for execution. As each rule corresponds to one intermed iate code, rules can be
added/deleted/modified dynamically.
2) Virtual Executable Environment (VEE): Bu ilt on OS AL layer, a VEE consists of three co mponents: message
queue, executing thread and message router. A VEE is responsible for an expert analysis task. Each thread
executes a VEE and different VEEs may run on different threads. This feature of VEE allo ws HPDES to run in a
parallel fashion on a mu lt i-core system or a SMP, or run in a distributed fashion on a group of computers
connected through the network. Real-t ime processing capability is achieved by deploying and leveraging
mu ltip le VEEs on mult iple processors or cores. VEE s imp lementing body is an OS thread. OS can schedule
these threads to mult iple processors or cores properly. In addit ion, VEE makes HPDES co mpatible with most
existing computing platforms.
In our experiments, we applied HPDES in a real ground verification system for satellite navigation. The data are
dispatched to different VEEs which run on d ifferent cores and distributed servers. It successfully detected a nu mber
of errors and exceptions fro m mo re than 20 types of data packets from 2 spacecrafts. All the analysis results were
delivered to the display terminals in real-time. CPU usage is very low in the experiments on two multi-core servers.
The rest of this paper is organized as fo llo ws. Section 2 overviews some related work. Sect ion 3 presents the
principles of HPDES. In Sect ion 4, the parallel and distributed imp lementation of HPDES is present. Section 5
presents the experimental results. We summarize our work in Section 6.
2. Related Work
Researchers have proposed and developed some expert systems in many domains fro m 1970s. Those systems
could interpret mass spectrograms to indicate chemical constituents (DENDRA L) [16], diagnose disorders (M YCIN)
[17], analyse geological data (DIPM ETER) aiming at finding a bed of dead oil and minerals (P ROSPECTOR) and
automate co mputer systems configuration (XCON/R1) [1]. Most of them focused on the research of auto matic
reasoning and logic, or proposing new symbolic processing language, such as Lisp [13] and Pro log [14, 15], for user
to input/express his/her expert ru les and for rule deduction as well. Less effort has been spent in improving the
performance of expert system.
Research on expert system focused on automation of reasoning and logic engines [1]. Pro log, a French co mputer
language, designed in 1972, marks a real progress in expert systems, like M YCIN [1, 17]. It is a shell script, ready to
receive any expert system and run [12]. It integrates an engine, using First-Order logic, with ru les and facts. It is a
tool for mass production of expert systems and is the first operational declarative language. However, Pro log is not
particularly user friendly and is an order of logic away from human logic.
In mid-1980s, NASA proposed a powerful software, called CLIPS [1]. CLIPS proposed rule-based, objectoriented and procedural paradig ms to represent knowledge. Ru le -based paradigm allows knowledge to be
represented as heuristics. An object-oriented paradigm models a co mp lex system as a modular co mponent.
Procedural paradigm is similar to a general-purposed programming language like C, Pascal and ADA.
Nowadays, expert system has been fused with intelligent knowledge management [1]. Software o ften combines
expert system with database, data warehouse and data mining techniques. It has been applies in many business
applications, aiming at improving automatic and intelligent operations and management.

1382

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

3. Principles of HPDES
In this section, we p resent the principles of our proposed expert system. A h igh level language, referred as
CASES (for the rest of the paper) is proposed for users to configure expert rules. Each rule is translated into a
separate intermediate code by our compiler, which will be loaded to execution dynamically at runtime . Thus,
HPDES allows users to add, delete or modify rules at any time before system execution.
3.1 System Requirement
The input of HPDES is the messages from d ifferent types of devices. The size of each data packet is about
hundreds to thousands bytes and consists of tens of attributes. HPDES needs to analyse the data according to predefined rules in the expert system. Then, HPDES sends the analysis results to the display terminals in real time.
HPDES is required to guarantee that all the patterns matching with the rules in the input streams must be identified
and reported correctly. If any error or exception is detected, an alarm will be delivered to the display terminal
immed iately. In addition, all the input data and the analysis results are required to be stored in the database in real
time as well.
3.2 Rule Configuration
Rule configurat ion (or called expression/input) is a core co mponent of an expert system. It is not trivial for a
computer to understand the judgement of a hu man being on an object, especially when the rule is abstract and
complex. Although researchers have spent a lot of efforts in this aspect, it is still an open and challenging problem
[1]. In our HPDES, in order to make users feel free to add, delete or modify their rules dynamically, we propose a
high level language, referred as CASES, wh ich allo ws users to describe their judgement on the data stream. The
syntax of CASES is like Lisp, and the executing pattern is like C. Let s look at Fig.1 as an example. The rule code
on the right-top corner describes how to define a ru le fo r co mputing the average value of al l the data in an array. The
syntax of CASES adopts prefix exp ression and parenthesis [3, 5, 6]. For example, assignment statement avg = 0
can be written as (= avg 0) . This feature simplifies the subsequent syntax analysis.
3.3 Rule Compiling
In HPDES, rule compilation consists of two steps:
1) Build a syntax tree
2) Translate the syntax tree into intermediate code
In order to build the syntax tree, HPDES only needs to reco gnise the parenthesis nesting recursively, and find the
first token in a parenthesis pair. Then, the token is accepted as the parent node, while other tokens in the same
parenthesis pair are accepted as the children. The syntax tree in Fig. 2 not only describes the structure of the rule, but
also suggests a flow path for building the intermediate code [4]. When the syntax tree is built successfully, the
intermediate code generator traverses the syntax tree in depth -first order [2, 7, 8]. Code generator maintains a
variable name table. If a new name is created, a new record is created and appended to the table. Otherwise, find
and refer to the existing name. Fig.2 also shows the intermediate code of the examp le. In each line, the first token
indicates the operation, and the tokens prefixed with & are variables, while others are constant values.
In this examp le, &0 denotes variable avg in the rule code, &1 denotes count , &2 denotes i , &3 stores
the temporary result of < operator, and &4 stores the temporary result of load operator. Each operator or
keyword in rule code corresponds to one or more operators in the intermediate codes:
(= avg 0) and (= (int32 i) 0) correspond to MovFloat and MovInt operator;
1)
2) loop statement corresponds to Test and Goto operator and its condition statement (< i count) corresponds
to SmallerInt operator;
3) (+= avg (load i)) corresponds to Load and AddFloat operator;
(+= i 1) corresponds to AddInt operator;
4)
5) (/= avg count) corresponds to DivFloat operator.

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

6)
7)

1383

Test and Goto Operator are used to imp lement the loop. The second parameter in Test operation means the
number o f line it will ju mp to when &3 is true, otherwise, it will ju mp to the line numbered by the third
parameter.
Goto operator makes the execution return to code line #2 (SmallerInt &3 &2 &1).
Syntax tree
defun

avg

Rule code

float32
int32

count

=

avg

(defun avg float32 (int32 count)
((= avg 0)
(= (int32 i) 0)
(loop (< i count)
((+= avg (load i))
(+= i 1)))
(/= avg count)))

0
=

int32

i

0
loop

<

i
count

+

avg
load

=

avg
/

avg

Intermediate Code
MovFloat
MovInt
SmallerInt
Test
Load
AddFloat
AddInt
Goto
DivFloat

&0
&2
&3
&3
&4
&0
&2
2
&0

0
0
&2 &1
4 8
&2
&0 &4
&2 1
&0 &1

count

Fig.1 A rule is compiled to an intermediate code

In many existing expert systems, rules are predefined and built into a central rule set before execution.
HPDES does not have such as a rule set. This is one of the highlights of HPDES. Users can add new rules, delete old
rules or modify existing ones at any time before system execution. Rules are co mp iled into intermediate codes,
respectively, and then loaded into the runtime. Each VEE (see section 4.5 for details) can hold a runtime for some
type of data. Since the intermediate code is an assembly-language like code, it is easy to be interpreted and efficient
to be executed [2].
3.4 Pattern Detection Runtime
Pattern detection runtime is to map all the intermediate codes into executing environment. The procedure
consists of 5 components, shown in Fig.2.
1) Data Queue
Data queue saves the field data, whose size is pre-defined. Data is sorted in descending order of time. Once a
new packet of data arrives, it will be inserted to the head of the queue, and the element at the tail will be removed.
Then, trigger the runtime to run.
2) Variable Heap
Variable heap is used to save intermediate variables and results. It can be accessed fast by indexing.
3) Instruction Index
Instructions index provides the function pointers of all the built-in functional instructions.
4) Instruction Sequence
Instructions sequence stores all the intermed iate rule codes, and the runtime execute the codes in order. There are
two sequences, one for runtime environment initialization, and the other for call back for new data triggering [11].
5) Counter

1384

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

The counter indicates which instruction the runtime runs. And all the jump instructions, like Test and Goto, can
modify the counter to implement program jumping and branch.
In Fig.2 s examp le, counter points to the fourth call back instruction, Load. Firstly, the loading instruction is to
read the value stored in address 2 of the variab le heap, and then loads the data fro m data queue in address which the
value indicates, and store it to the position in address 4 of variable heap . After this, counter will move to the next
instruction, AddFloat, and continue the process.
Expert System Runtime
Load to

Variable Heap

Initial Instructions

Instruction index

Null

Float Variable
Int Variable

Add
Minus

Callback Instructions

Multiply

Int Variable
Bool Variable

MovFloat &0 0

Float Variable

MovInt

Divide
Remainder

&2 0

Power

SmallInt &3 &2 &1
Data Queue
New Data

Test

&3 4

Load

&4 &2

Data[0]

AddFloat &0 &0 &4

Data[1]

AddInt

&2 &2 1

Data[2]

Goto

2

Data[3]

Point to

Smaller
Retrival

DivFloat &0 &0 &1

Data[5]

And
Or
Not
Test

Data[4]

Old Data

Load
Equal

Transform
counter

Data[6]

Goto
Mov

Load from

Fig.2 Pattern detection runtime

4. Implementati on of High Performance Distributed Expert System (HPDES)
Due to the massive size and high throughput of the data stream, expert system running in serial on a single
processor is not able to meet the real-time response requirement in any aerospace project. Thus, in order to provide
real-time process and response, HPDES in multi-threading programming with a novel software middleware, called
virtual executable environment (VEE) is implemented. By the support of VEE, HPDES can run in parallel on a
multi-core system or SMPs or on distributed servers.

4.1 Software Architecture
In order to make our HPDES to be ab le to run on heterogeneous platforms, we bu ild several middle layers
between the operating systems (OS) and the user applications where each layer h ides the implementation details of
its underlying layer and provides unified APIs to its upper layer. As shown in Fig.3, the software arch itecture of our
HPDES consists of the following layers:
OS: Provide system calls and resource assignment.
OS Adaptive Level (OS A L): Provide unified system service by hid ing the implementation details of different OS.
TCP/ IP protocol and Message Queue: Support two commun ication schemes. Messages between different nodes
can be transferred though TCP/IP protocols, wh ile messages passed on the same node are stored and sent by
the Message Queue scheme.
Virtual Executable Environ ment (VEE): Provide unified and efficient distributed and mult ithreaded APIs to the

1385

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

application layer. (see Section 4.2 for details)
Application: Provide rule configuration for the users of the application.
APPLICATION

Analysis
Analysis

Visualization
Visualization

Storage
Storage

VEE

VEE

VEE

OS AL

+

TCP Connection

Message
Message Router
Router
OS

Fig.3 HPDES software architecture

4.2 Virtual Executable Environment (VEE)
In order to make HPDES to be able to run in a parallel or distributed fashion on heterogeneous platforms, a
software middleware, which is named as virtual executable environ ment (VEE), is proposed. It provides a set of
services while hiding the details of various underling OS AL layer [9, 10].
VEE is built on the OS AL layer, consisting of three components, as shown in Fig. 4:
VEE structure
Msg enqueue

n
io
ut
rib
st
i
d
sg
M
Msg distribution

Msg
Msg enqueue
Msg
Msg enqueue

Msg

Executing Thread

Msg

n
io
ut
rib
st
di
sg
M

Msg
Msg enqueue
Msg
Msg enqueue

Message
Message Router
Router

Fig.4 VEE structure

1) Message queue
A message queue is adopted to store messages from a front-end device or another VEE. Message queue works in
blocking mechanism, and supports asynchronous access. Each VEE may have multiple message queues.
2) Executing thread
The task of an executing thread is to process the message stored in the message queues . Different VEEs may run
on different threads. Mult iple threads are allo wed to work concurrently or in parallel, either on the same core or on
different cores in a multico re system. Task scheduling between multiple cores or processors is performed by the
underlying operating system (OS). OS achieves load balance by assigning an active VEE to an idle core.
3) Message router
The output of a VEE is a message which may be consumed by another VEE for further process. Thus, a message
router is adopted to distribute the output message to other VEEs. If the consuming VEE is running on a different
node (physical node), the message will be sent through a TCP connection.

1386

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

Due to the features of VEE, a VEE can perform various types of tasks, such as pattern detection for a certain rule,
packet processing, etc.
4.3 Parallel Expert System
HPDES can be executed in a parallel fashion by assigning different rule code (compiled) to threads on different
VEEs. Recall that our co mpiler co mp iles different rules into separate immediate codes. That is, task parallelis m is
adopted to achieve parallelis m, where each thread/process performs independent pattern detection for a certain ru le.
Inter-processor commun ication is achieved by message passing or by using global data structures in the shared
memory.
Fig. 5 illustrates the case that mu ltiple VEEs run on a single server. The VEEs can be classified into three types:
IP Adapter, a TCP server for receiv ing messages fro m other nodes; worker, an application module for performing a
task; IP Converter, a TCP client for sending messages to other nodes. These threads can be configured into any
network topology to adapt different requirements.
Single Node Structure
IP Adapter VEEs

Worker VEEs

IP Converter VEEs

ipAdapter1

Worker 1

Worker 2

Worker 3

ipConverter1

ipAdapter2

Worker 4

Worker 5

Worker 6

ipConverter2

ipAdatper3

Worker 7

Worker 8

Worker 9

ipConverter3

Fig.5 VEEs on a single node. Each gray box denotes a VEE.

4.4 Distributed Expert System
HPDES can be executed in a distributed fashion as well. In a distributed environment, the communicat ion
between VEEs on different nodes is achieved by TCP socket, wh ich is adopted due to its reliab ility and platfo rm
independence.
Fig.6 is an examp le d istributed environment. DAS (Data Acquisition System) nodes obtain data stream fro m
front-end devices, and then forward the data stream to processing nodes. Once the processing nodes receive the data,
mu ltip le threads (VEEs) are launched immediately to analyze the data in parallel, and send the results to databas e
nodes or visualization nodes. Database nodes store the data, and visualization nodes provide dynamic graphic
presentation on the monitors in real time.
Multiple Nodes with High Performance Network
DAS Nodes

Processing Nodes

Visualization Nodes

Database Nodes

Fig.6 VEEs in a distributed environment

1387

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

4.4 Flow of HPDES
Fig. 7 shows the entire flo w of HPDES processing pipeline. Each gray box denotes a VEE. Data acquisition
module gets data fro m the front-end devices through the networks. Data parser module parses the data into inner
data structure for fast indexing and retrieval. Data storage and visualization modules store and visualize the raw data.
A series of HPDES runtimes process the data in parallel. As each module runs in independent thread, they can be
run in a fashion of pipeline. Thus, the real-time processing requirement in aerospace ground verification system is
achieved by utilizing the power of parallel computing and distributed computing efficiently.
Data Storage

Data acquisition

Data parser

HPDES runtime 1

HPDES runtime 2

Runtime
Visualization

HPDES runtime n

Data
Visualization

Fig.7 Flow of HPDES

Each module is built on a VEE. These modules can be dynamically loaded into their VEEs accord ing to their
configuration files. VEEs on a single node communicate with others through message queue, and OS schedules the
VEEs dynamically. Once the load on a certain node is too heavy, HPDES will d istribute the VEEs to other nodes
connected by networks .
5. Experiment and Performance Evaluati on

5.1 Data
Four front-end devices are connected into our HPDES in the experiment. Each device produces more than 10
types of data packets. Each type contains tens of attributes, hundreds to thousands bytes in size. Each packet needs
to be processed by 4 to 6 modules in average.
5.2 System Platform
Hardware configuration for our experiment is listed in Table 1.
T able 1 Hardware configuration

Nodes

Settings

Two expert system servers

Two database servers

Three display terminals

Intel Xeon E7520×2(8 cores
16 threads)

Intel Xeon E7520×2(8 cores 16
threads)

Intel Core i3 550(2 cores 4
threads)

16GB RAM

16GB RAM

3GB RAM

1.5TB Disk

1.5TB Disk

500GB Disk

1000Mbps Ethernet


1000Mbps Ethernet


1000Mbps Ethernet
1920 × 1080 LCD

5.3 Patterns Detected
The HPDES has been used in the ground verification for satellite navigation.
A small portion of the errors or exceptions detected by HPDES in real time is listed below:

1388

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

Accuracy
HPDES co mpares the locations, velocities and accelerat ions of the spacecrafts with the pre-co mputed emulat ion
data. If the difference violates the rules, HPDES will deliver an alarm.
Variance
Co mpute the variance of some values in a most recent period. Monitor the variance and find out the potential
unusual conditions.
Distance
Deliver a warning when the distance between two spacecrafts violates the rules.
Time
Monitor the time variation, including device time and system time.
Number of available satellites
Monitor the number of available satellites.
More rules were configured into HPDES and more types of analysis were perfo rmed in the experiment. However,
due to the space limitation, we will not list all of the rules.
In the experiment, our expert system d id help the aerospace scientists and engineers find and locate a nu mber of
errors and exceptions in their aerospace systems. The analysis results of HPDES contributed to the success of the
satellite navigation mission.
5.4 Performance
Fig. 8(a) shows the CPU usage when the data arrival rate is fixed and the number of data types is increasing. Fig.
8(b) shows the CPU usage when the number of data types is fixed and the data arrival rate is increasing. In a real
verification system, there are 80 types of data, and 2 packets per type per second. Fro m Fig. 8, we can see that our
proposed HPDES satisfies the requirement of real-time processing easily.

Fig. 8(a) CPU usage when the number of data type is increasing with arrival rate set at 2;
Fig. 8(b) CPU usage when the data arrival rate is increasing with the number of data type set at 80.

6. Conclusions
In this paper, we propose a High Performance Distributed Expert System (HPDES). Firstly, a rule configuration
and compiling method is proposed. CASES, a language similar with Lisp, is propos ed for application expert to input
their ru les. Then, each ru le code will be co mp iled into an intermediate code, to be loaded into the runtime for
execution. As each rule corresponds to a separate intermediate code, rules can be added/deleted/modified
dynamically. Secondly, Virtual Executable Environ ment (VEE) is proposed. A VEE is responsible for a pattern
detection task. Each thread executes a VEE and different VEEs may run on different threads. VEE allo ws our expert
system to run in a parallel fashion on a mu lti-core system or a SM P or in a d istributed fashion on a group of
computers connected through the networks. High performance process ing capability is achieved by assigning
mu ltip le pattern detection tasks to different threads wh ich will sufficiently utilize the co mputing power of a parallel
computer or a d istributed system. In addition, VEE makes our HPDES co mpatible with most existing hardware

Yang Gao et al. / Procedia Computer Science 9 (2012) 1380 – 1389

1389

platforms and operating systems. In experiments in a real verificat ion system, HPDES not only detected a number of
errors and exceptions in real-time, but also performs well in CPU usage and robustness.
Acknowledgements
Project is supported by National Natural Science Foundation of China # 70921061, #90718042 and CAS/SAFEA
International Partnership Program for Creative Research Teams.

References
1. J.C.Giarratano, Expert System: Principles and Programming, 4th Edition, Course Technology.
2. Aho, A.V., R. Sethi, and J.D.Ullman. 1986. Compilers: Principles, Techniques and T ools, Addison-Wesley, Reading, MA.
3. Sebesta, R.W., Concepts of Programming Languages, 8th edition, Addison Wesley.
4. H.Abelson, G.J.Sussman, J.Sussman, Structure and Interpretation of Computer Programs, 2nd Edition, MIT Press.
5. Graham, Paul, The ANSI Common Lisp, Prentice Hall.
6. P. Seibel, Practical Common Lisp, Apress.
7. Andrew W.Appel, Modern Compiler Implementation in C, Cambridge University Press.
8. Steven S.Muchnick, Advanced Compiler Design and Implementation, Elsevier Science.
9. D.C.Schmidt, S.D.Huston, C++ Network Programming, Volume 1 Mastering Complexity with ACE and Patterns, Addison Wesley/Pearson.
10. D.C.Schmidt, S.D.Huston, C++ Networking Programming, Volume 2 Systematic Reuse with ACE and Frameworks, Pearson.
11. B.B.Brey, Intel Microprocessors, 8th Edition, Prentice Hall.
12. Buchanan, B.G.; Shortliffe, E.H. 1984. Rule Based Expert Systems: The MYCIN Experiments of the Stanford Heuristic Programming
Project. Reading, MA: Addison-Wesley.
13. J. McCarthy, P.W.Abrahams, D.J.Edwards, T.P.Hart, and M.Levin. 1965. LISP 1.5 Programmer s Manual, 2 e. MIT Press, Cambridge,
MA.
14. J.A.Robinson. 1965. A Machine-Oriented Logic Based on the Resolution Principle. Journal of the ACM, Vol.12,pp.23-41.
15. P.Roussel. 1975. PROLOG: Manual de Reference et D utillsation. Research Report. Artificial Intelligence Group, Univ. Of Aix-Marseille,
Luming, France.
16. Lindsay R.K., Buchannan B.G., Feigenbaum E.A., Lederberg J. 1993, DENDRAL: A Case Study of the First Expert System for Sc ientific
Hypothesis Formation. Artificial Intelligence, Volum 61, Issue 2, Elsevier Science Publishers, Essex 1993.
17. Hajek. P., Valdes J. J., 1994, An Analysis of MYCIN-like Expert Systems. Mathware and Soft Computing (1), Universidad de Grannada.

