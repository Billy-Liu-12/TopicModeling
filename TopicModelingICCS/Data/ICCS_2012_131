Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1753 – 1762

International Conference on Computational Science, ICCS 2012

Introducing Life Science Doctoral Students in Oz to the Wizardry of
Computational Modeling: Introducing Computational Thinking with
CellDesigner™
George W. Shiflet and Angela B. Shifleta*
Wofford College, 429 N. Church St., Spartanburg, SC 29303 USA

Abstract
A five-day, hands-on workshop was held at Monash University to introduce doctoral students in the life sciences to
computational applications for research. Although three software tools were employed (CellDesigner™, MATLAB™ including
the Parallel Computing Toolbox, and Nimrod), this paper reports on the use of CellDesigner in teaching computational thinking
and modeling, including system dynamics and regulatory networks. Each session included a series of brief orientations to the
tool, followed with illustrative, practical projects for participants to implement. From written evaluations and various forms of
anecdotal evidence (e.g., oral communications, participation, project/assignment performance), we conclude CellDesigner to be a
suitable tool for use in such a workshop.
Keywords: workshop; CellDesigner™; computational thinking; modeling, system dynamics; regulatory networks

1. Introduction
To understand the living world, biologists must analyze and interpret enormous amounts of data and extremely
complex systems. Modern biological research increasingly involves not only theory and experimentation, but also
computational modeling. Unfortunately, many life scientists are unfamiliar with such modeling and may be poorly
prepared to take advantage of its power. It is imperative that future researchers be trained to incorporate
computational thinking into their research, and with this in mind, the authors recently facilitated a five-day, handson workshop for doctoral students in the life sciences at Monash University, Melbourne Australia [1].
The authors consulted Dr. Jeff Krause of the Shodor Foundation [2]. Dr. Krause with others offers a National
Computational Science Institute (NCSI) workshop on Computational Biology for Biology Educators (CBBE) [3].
This workshop introduces "college faculty to various resources that can be used to prepare students to acquire
computational thinking, modeling and quantitative analysis skills that have become essential to the practice of
modern biology" [4]. Although the audience was different (college faculty as opposed to Ph.D. students) and the

* Corresponding author. Tel.: 1-864-597-4528; fax: 1-864-597-4549.
E-mail address: shifletab@wofford.edu.

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.193

1754

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

general intent was different (helping educators prepare their students acquire computational thinking as opposed to
helping graduate students use computational thinking in their research), the two workshops shared the goals of
promoting and using computational thinking in the life sciences. Dr. Krause suggested several approaches and
tools, including CellDesigner™, which we subsequently employed in the Monash workshop.
Computational Workshop for the Life Sciences: Bringing Computation to Life at Monash included numerous
types of models and applications and employed three pieces of software—CellDesigner™, MATLAB™ including
the Parallel Computing Toolbox, and Nimrod. Each session involved a series of relatively short presentations
regarding modeling with and the features of each software system, interspersed with illustrative, practical projects
which the participants developed in pairs [5]. For this paper, we shall focus on our experiences during the first two
days of the workshop with the use of CellDesigner to introduce computational modeling. CellDesigner is a tool that
is designed to visualize, model and simulate biochemical and gene-regulatory networks. Networks are drawn as
process diagrams, using graphical notation suggested by Kitano [6]. These networks are stored using SBML
(Systems Biology Markup Language), the standard for representing such models. The user can then add
mathematics (kinetic equations, initial values, parameters) to each reaction, making the model computational. The
software can be used on most platforms and is freely downloadable from the CellDesigner website [7].
2. Workshop Description
2.1 CellDesigner 101
After a general introduction to computational thinking and computational science, we presented a brief
orientation to CellDesigner. This introduction involved little more than orienting participants to the general layout
and identifying the key species and reaction types. As a class, we then built a simple model of the following firstorder reaction:
Five spaces or areas appear on the screen when using CellDesigner. The largest and the primary one is the Draw
area, where the model is diagramed and edited. (See the Quick Tutorial and Start Up Guide on the CellDesigner
website [7].) Each model consists of a group of species (molecules), which represent nodes. These species (nodes)
are connected by reactions (edges), governed by mathematical rules (differential equations). In Fig. 1, the Draw
area contains a simple reaction (re1), where one species (A) is converted to another species (B). The rate of the
reaction is governed by k1, and the equation is d[B]/dt = k1*[A].

Fig. 1. CellDesigner Draw area displaying simple model of first-order reaction.

Participants subsequently expanded the model to include the following first-order reaction:

2.2 Systems Dynamics Modeling
Systems dynamics modeling is often employed to better understand the behavior of complex systems.
CellDesigner was not designed as a general-purpose system dynamics modeling tool, but we were able to adapt it

1755

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

for that purpose. Doing this allowed us to concentrate on modeling without spending an exorbitant amount of time
covering the idiosyncrasies and syntax of two tools, one for general systems dynamics models and one for
specialized biological network models.
We began with a simple model for unconstrained growth—a population of squirrels (s) without predators and
with unlimited resources. Consequently, the rate of change of the number of squirrels in the population (ds/dt) was
proportional to the number of squirrels, that is, ds/dt = cs, where c is a positive constant. Parameters for
unconstrained population growth are initial squirrel population size, birth fraction and death fraction. Population
growth is equal to the initial population of squirrels added to the product of the squirrel population and the growth
rate (difference between births and deaths). In CellDesigner, the model might look like that in Fig. 2, and the
reaction equations would be birth fraction* squirrel population and death fraction* squirrel population.

Fig. 2. CellDesigner model for unconstrained growth.

Consequently, if we begin with 100 squirrels with a birth fraction of 0.4 per month and a death fraction of 0.3 per
month and allow the population to grow over two years, measuring the population every three months, we could
generate the following table of values (using Euler’s method of numerical integration).
Table 1. Squirrel population growth over two-year period.
Time
Squirrels

0.00
100

0.25
102.50

0.50
105.06

0.75
107.69

1.00
110.38

1.25
113.14

1.50
115.97

1.75
118.87

2.00
121.84

To reveal patterns in two unrelated systems, we followed up this part of the presentation by having the
participants model recovery from influenza (assuming a closed system). Here, the recovery is related to the average
number of days an infected person takes to recover from the flu.
Various ecological examples (e.g., competition, predator-prey) could be used to model interactions. By adding
predators (hawks) to the squirrel model, we can demonstrate the predator-prey interactions ala Lotka-Volterra. We
essentially model the population of hawks like that of squirrels in unconstrained growth, but we also include the
positive impact of the squirrels on hawk population and the negative impact of the hawks on the squirrel population.
Fig. 3 shows the resulting CellDesigner model diagram

Fig. 3. CellDesigner model of predator-prey,
where re1 and re3 represent births and re2 and
re4 represent deaths for prey and predator
populations, respectively.

Fig. 4. Graph generated by predator-prey model
simulation.

Systems dynamics modeling is often used to study another application involving interactions, disease
epidemiology. We began this phase of the workshop by having the participants refine their model for recovery from
influenza model to encompass a basic SIR (S= Susceptibles; I = Infecteds; R = Recovereds) model for the spread of
influenza in a boys private school (see Figs. 5 and 6).

1756

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

Fig. 5. CellDesigner SIR model

Fig. 6. Graph generated for SIR Model Simulation.
Susceptibles decrease (become infected) and Recovereds
(from infected) increase over time. Infecteds increase and
then decrease as they recover.

We paired participants to develop SIR-type models for various infectious diseases (e.g., avian influenza,
tuberculosis, malaria) using CellDesigner. Each pair was assigned a disease and provided with a suitable reference.
With only a short afternoon work session, they all completed models, although some of the parameter values needed
some adjustment. The next morning, each pair presented a brief oral report for the group. Below is a model for
dengue (Fig. 7), developed by a pair of workshop participants, along with a graph of their simulation results (Fig. 8).

Fig. 7. CellDesigner SIR-type model of dengue. Dengue is a
mosquito-borne viral infection that, according to the World
Health Organizations, affects  50 million people per year [8].

Fig. 8. Simulation results for dengue model.

2.3 CellDesigner 102
On the second day, building on the background of several classical systems dynamics models, we turned our
attention to biochemical and gene-regulatory networks. CellDesigner allows various types of molecular alterations,
including covalent modifications and molecular complex formation. After briefly demonstrating how to draw these,
we had the participants model Michaelis-Menten enzyme kinetics. Initial values were provided for substrate and
enzyme concentrations, in addition to reaction constants as parameters (see Figs. 9 and 10).

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

Fig. 9. CellDesigner model for enzyme-catalyzed
reaction.

1757

Fig. 10. Simulation results from enzyme kinetics model.

With CellDesigner software we can not only create and simulate our model, but we can also integrate it with
existing databases, like Biomodels -- “a repository of peer-reviewed, published, computational models"[9]. After a
brief discussion of accessing mechanics, participants were able to explore some of the models on these databases.
2.4 CellDesigner and Regulatory Networks
Next, we examined additional the capabilities of CellDesigner, such as rendering ion channels and membrane
transporters and forming signal receptors and transcription/translation.
CellDesigner was designed to model biochemical and gene regulatory networks. As an application, we drew
upon experience from our work with the Computational Biology Group (CBG), Oxford University [10]. There, we
worked on modeling the dynamics of the colonic crypt using MATLAB and CHaSTE (Cancer, Heart and SoftTissue Environment), an open source simulation package, developed and maintained at by CBG [11]. Crypts are
finger-shaped invaginations of the colonic epithelium. Cells lining the crypt are produced by stem cells at its base
[12]. From the crypt base the cells move and mature, becoming a transient part of the colon’s lining. Eventually,
they are sloughed off, much as an outer layer of skin. Aberrations in the structure and function of crypt cells are
crucial to the development of colon cancer, which WHO estimates kills more than 610,000 persons per year [13].
ChaSTE allows multi-scale modeling, so that in the crypt we can include intracellular signaling pathways, cell
cycles, and crypt mechanics (cell adhesion and migration). Modeling crypt behavior will give cancer researchers
new and important insight for prevention and treatment of this disease.
After introducing the structure and dynamics of a normal crypt, we focused on one of the important factors
controlling crypt cell proliferation and maturation—the WNT signaling pathway [14]. WNT is a chemical signal,
produced by niche cells at the base of the crypt. Not very diffusible, WNT concentration declines with increasing
distance from the crypt base. WNT has multiple effects, but we concentrated on the promotion of cell division, so
that we could construct a model within the time constraints. Essentially, with high concentrations of WNT, the
sequestration and degradation of another protein, -catenin, which at has multiple functions (e.g., promoting cellcell adhesion), decline. As cytoplasmic levels rise, excess -catenin enters the nucleus, combines with other protein
factors and acts as a transcription factor (TF). When this complex binds to the promoters of certain target genes, it
elevates synthesis of cell division promoting factors. With low WNT levels, surplus -catenin is degraded, and cell
proliferation is inhibited. Thus, the further away from the source of WNT signaling a cell gets, the slower it divides.
After this introduction, to help with their model development we provided the participants with two diagrams
showing the WNT signaling pathway and its effects on changes in cell proliferation rates under conditions of low
and high WNT levels, respectively (Fig. 11 & 12).

1758

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

WNT

FZL

AJ

WNT Receptor = FZL

FZL

Cell Membrane

B-cat

AJ

P

DSH

Cell Membrane

B-cat

DSH

B-cat
B-cat
B-cat

P
Processing
Complex

B-cat
B-cat

Axin

DSH

Axin

B-cat

B-cat
PP P
kinase

B-cat
kinase

B-cat

B-cat

B-cat
PP P

TCF

B-cat

Mitosis

B-cat
TCF

Mitosis

Nucleus

Nucleus

Fig. 11. Cell division activity with no or low levels of WNT
signal. Without WNT signal, excess -catenin is
phosphorylated by a protein complex, earmarking it for
degradation. Base-levels of -catenin help to form the
adherens junctions. -catenin does not function as a
transcription factor to promote cell division.

Fig. 12. Cell division activity under conditions of high levels
of WNT signal. When WNT binds to FZL (receptor), protein
complex is disrupted, -catenin is not degraded, and excess is
transported into the nucleus, forming a critical portion of a
cell division promoting transcription factor.

With the problem fresh on their minds, we reviewed models of unconstrained growth of P, dP/dt = kP, and
interaction of A and B to form C, d(C formation)/dt = kAB, necessary for modeling components of the WNT
pathway. We also developed an additional model useful in solving the WNT problem, where A inhibits the reaction
of B to C (Fig. 13). Without A, we supposed that dC/dt = kB. The class was asked, how would we make this rate
smaller as A becomes larger. An immediate response came, to divide by A, as in dC/dt = kB/A. But what problems
could occur with such division? Again, several people answered quickly, "division by zero." The facilitator
suggested that adding a small number, say 0.01, to the denominator, eliminates division by zero. However, we also
wish to avoid changing the rate when the compound corresponding to A is not present. Thus, starting with dC/dt =
kB, we multiply numerator and denominator by 0.01, dC/dt = 0.01kB/0.01, and then add A to this new denominator
obtaining the following for re1:
dC /dt =

0.01kB
A + 0.01

When A is zero, the rate is kB. However, as A becomes larger and larger, the rate approaches zero.

Fig. 13. A inhibits the reaction of B to C.

With this background, pairs developed pathway models using CellDesigner. Fig. 14 is one example of a
simplified WNT-signaling pathway model; and Tables 2-4 contain the corresponding substances with initial values,
parameters and their values, and reactions with their differential equations, respectively. Fig. 15 shows resulting
graphs from the simulation of this model.

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

Fig. 14. Simplified model of WNT signaling. WNT binds to FZL, promoting -catenin availability as a transcription factor.
Active transcription factor promotes production of cell division promoters.
Table 2. Substances for simplified WNT signaling model diagram (Fig. 14).
ID

Name

Initial
Quantity

s2

WNT

5.616

s6

TCF

10.000

s11

b-catenin

20.000

s13

FZL

10.000

s30

Active Receptor

0.000

s7

Target Genes

10.000

s8

b-catenin/TCF

6.000

s38

cell division promoters

20.000

s39

cell division inhibitors

20.000

b-catenin (t)

0.000

s43

. Parameters for simplified WNT signaling model (Fig. 14).

Table 4. Reactions for simplified WNT
signaling model diagram (Fig. 14).

Scope

ID

Name

Value

ID

Math

ocal:Reaction(re14)

wP

wP

0.00204

re14

wP * s2 * s13

re27

0.01 * s30 * s11

re28

TF * s6 * s43

re29

0.01 * s11

re30

TF1 * s8 * s7

re31

0.01 * TF2 * s7 / (s8 + 0.01)

ocal:Reaction(re27)

cA

catenin activator

0.24000

ocal:Reaction(re28)

TF

transcription factor

5.9E-4

ocal:Reaction(re29)

d

degradation

0.00200

ocal:Reaction(re30)

TF1

transcription
factor1

0.00500

ocal:Reaction(re31)

TF2

transcription
factor2

0.500

1759

1760

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

Fig. 15. Graph of WNT-signal simulation. With WNT signal, more -catenin becomes available for binding to target genes that
promote cell division.

2.5 MATLAB, Parallel MATLAB and Nimrod
For the last three days of the workshop, we emphasized MATLAB, which is excellent for performing
computationally intensive jobs more rapidly than traditional computer programming languages (e.g., C, C++,
Fortran). It is particularly adept at supporting vector and matrix operations, which are essential for scientific
research problems. MATLAB also can generate sophisticated graphics plots. Thus, we used this tool to model many
applications involving matrices, such as an age-structured model in which we classify an animal by discrete ages.
After a general introduction, we covered quantitative modeling involving user-defined functions, looping,
animations, decisions and empirical modeling (finding functions to fit datasets). In the final sessions, we introduced
students to high performance computing with MATLAB's Parallel Computing Toolbox, as well.
On the last morning of the workshop, Dr. Jeff Tan, Faculty of Information Technology at Monash University,
introduced students to the Nimrod tool, which "uses a simple declarative parametric modeling language to express a
parametric experiment and provides machinery that automates the task of formulating, running, monitoring, and
collating the results from the multiple individual experiments. Equally important, Nimrod incorporates a distributed
scheduling component that can manage the scheduling of individual experiments to idle computers in a local area
network. Together, these features mean that even complex parametric experiments can be defined and run with little
programmer effort. In many cases it is possible to establish a new experiment in minutes" [15]. Moreover, Nimrod
can interface with models developed in MATLAB and numerous other systems.
3 Evaluation
The workshop was attended by 17-25 participants (primarily doctoral students in the life sciences) daily for five
days. On the final day, we asked that they complete a written evaluation supplied to us by the School of Information
Technology at Monash. The evaluation included a series of rated responses and six free-response questions. For the
rated responses, participants used a scale from 1 to 4, where 1 = poor, 2 = adequate, 3 = good and 4 = excellent.
Workshop results were averaged for each category and are shown in Table 5. The feedback is, of course, for the
entire workshop, not just the two days spent on CellDesigner.
Table 5. Summary for rated responses.

Responses
In my view, the program overall was:
The extent to which the program met my expectations was:
The facilitators were:
The structure of the program was:
The amount of information provided was:
The clarity of the information provided was:
The pace of the program was:
The program materials were:
The opportunities provided for interaction & participation were:
The potential of the program to assist my future scholarly development is:

Mean
3.50
3.47
3.76
3.35
3.29
3.56
3.24
3.56
3.61
3.11

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

1761

Our perceptions of satisfaction were strongly reinforced by the free-response portion of the evaluation form.
Questions included:
•
•
•
•
•
•

What knowledge and/or skills did you gain from this program?
How will you apply what you have learnt in your research/studies?
What parts of the program did you find most useful?
How could the program be improved?
Would you recommend this program to others? Why or why not?
Are there any other comments you would like to make?

Responses to the first three questions were fairly consistent and predictable. Below are a few examples.
• “CellDesigner overall is very inspiring. MATLAB programming should be powerful for our computational
biology project.”
• “I can now exploit studies that have used CellDesigner, broadening the research resources available to me.”
• “I will use what I have learnt to generate models for my own research from the tools I have learnt and improve it
with experimental data over time.”
Although there were limited responses to the improvement question, there were several useful suggestions.
Below are some examples:
• “If time, designate each group separate molecular pathways to model (similar to the disease model). Or, allow
students to pick a model so that they might model something relevant to their research”
• “Split into beginners and advanced sections.”
• “Require basic theoretical knowledge”
To adequately introduce modeling concepts and three software packages, including parallel MATLAB, we did
not have time for students to work on individual project pertinent to their research. Future workshops might have a
follow-up period for participants to consult about such applications.
This workshop was devised by Professor David Abramson of the Information Technology faculty at Monash to
introduce graduate students and faculty to computational thinking and the utility/importance of computational tools.
Participants had varied background and experience, and though there were some students who lacked confidence,
we had no student who was under-qualified in the program. We were gratified by the fact that virtually all
participants would have recommended the workshop to others. In the future, however, more specialized workshops
could be offered. It would certainly be simpler for the facilitators if a certain level of experience could be assumed.
One of the collateral benefits of this workshop seems to have been to encourage and embolden students to work
quantitatively and computationally. As evidence, below are some comments from the written evaluations.
“I'd like to again say thank you to you and George for the workshop I found it extremely interesting, and as
someone who tends to avoid computers if possible i found the software well explained, and the examples led
very seamlessly into building up skills through the exercises. I also unfortunately have had no maths in my
university degree, but found that I could remember calculus and linear algebra enough from high school to
follow your examples, and this week was the first time I actually understood matrices!”
• “My fears of using computers is lessened and confidence in my own abilities much improved. Thank you,
George and Angela”
•

From written responses we found evidence that skills/experiences gained during the workshop may have had an
immediate impact on the participants’ research. Statements like “…my lab is interested in shifting focus from
individual genes to gene/protein pathways—CellDesigner will be useful for this” were typical.
4 Conclusions
From the written evaluations and some emails, we conclude that the workshop had an important, though variable
impact on the participants. We feel confident that it accomplished most of the established goals, and we would
definitely recommend that such programs be augmented/modified and continued. Further anecdotal evidence to
support our conclusions include: (1) very positive oral feedback from participants (2) consistent attendance (3)

1762

George W. Shiﬂet and Angela B. Shiﬂeta / Procedia Computer Science 9 (2012) 1753 – 1762

unfailing participation and engagement during presentations, discussions and exercises (4) well-conceived and wellconstructed models.
The various forms of evidence substantiate a positive conclusion about the entire workshop, and they are not
specifically directed towards the use of CellDesigner. However, there were no negative and many positive
comments about the use of this software. From our perspective, we found it a most suitable tool to introduce
computational concepts as applied to regulatory pathways and cellular networks. These concepts were important,
and according to feedback, were germane to the interests of the group. Furthermore, because Systems Dynamics
was not the sole focus,we found that we could modify it for the teaching of such modeling.
The authors conclude that the workshop served the needs of the participants and was therefore a success.
CellDesigner proved a very useful tool for introducing graduate students in the life sciences to computational
approaches and tools for use in their research.
Acknowledgements
Space constraints do not permit adequate expression of our appreciation for those who enabled and sustained this
workshop. We are truly grateful to Professor David Abramson, Monash University e-Science Research Center
Director, proposed and supported the workshop and hosted our sabbatical at Monash. Rob Gray, Monash e-Science
Administration Manager, very ably vetted the applicants and arranged workshop logistics. Drs. Robert Panoff and
Jeff Krause of the Shodor Education Foundation were and continue to be bounteous sources of ideas and inspiration.
References
[1] Monash University. http://www.monash.edu.au/ Accessed 3/25/11.
[2] Shodor Foundation, a national resource for computational science education. 2011. http://www.shodor.org/ Accessed
3/25/11
[3] Computational Biology for Biology Educators. National Computational Science Institute.
http://computationalscience.org/cbbe/. Accessed 3/25/11.
[4] Computational Biology for Biology Educators. 2010 Workshops. http://www.computationalscience.org/workshops2010.
Accessed 3/25/11.
[5] Monash eScience and Grid Engineering Laboratory (MeSsAGE Lab) at Monash University in Melbourne, Australia.
https://messagelab.monash.edu.au/ComputationalThinkingForLifeSciencesAccessed 3/25/11.
[6] Funahashi, A., et.al., CellDesigner: a process diagram editor for gene-regulatory and biochemical networks, BIOSILICO,
1:159-162, 2003
[7] CellDesigner software. www.CellDesigner.org. Accessed 3/25/11.
[8] Dengue and Dengue Haemorrhagic Fever,Fact Sheet, No.117, March, 2009. World Health Organization (WHO).
http://www.who.int/mediacentre/factsheets/fs117/en/index.html. Accessed 3/25/11.
[9] Biomodels Database. A Database of Annotated Published Models. http://www.ebi.ac.uk/biomodels-main/. Accessed 3/25/11.
[10] Computational Biology Group. Computing Laboratory, Oxford University. http://web.comlab.ox.ac.uk/activities/compbio/.
Accessed 3/25/11
[11] Chaste, Cancer, Heart and Soft Tissue Environment. 2010. http://web.comlab.ox.ac.uk/chaste/ Accessed 10/14/10.
[12] Johnston, Matthew D., et. al. (2007) Mathematical modeling of cell population dynamics in the colonic crypt and in
colorectal cancer. Proceedings of the National Academy Science, 104 (10). pp. 4008-4013.
[13] Cancer Fact Sheet, No. 297, February, 2011. World Health Organization (WHO).
http://www.who.int/mediacentre/factsheets/fs297/en/index.html. Accessed 3/27/2011.
[14] WNT signaling. http://www.stanford.edu/group/nusselab/cgi-bin/wnt/. Accessed 3/25/11.
[15] Nimrod Toolkit. 2011. https://messagelab.monash.edu.au/Nimrod. Accessed 3/26/11.

