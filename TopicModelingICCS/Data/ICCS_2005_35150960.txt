Improving the Sensitivity and Specificity of
Protein Homology Search by Incorporating
Predicted Secondary Structures
Bin Ma, Lieyu Wu, and Kaizhong Zhang
Department of Computer Science, University of Western Ontario,
London, ON N6A 5B7, Canada
{bma, lwu7, kzhang}@csd.uwo.ca

Abstract. In this paper, we improve the homology search performance
by the combination of the predicted protein secondary structures and
protein sequences. Previous research suggested that the straightforward
combination of predicted secondary structures did not improve the homology search performance, mostly because the errors in the structure
prediction. We solved this problem by taking into account the conﬁdence
scores output by the prediction programs.

1

Introduction

Proteins are essential to all living beings. They are involved in almost every cell
function as enzymes and act as structural material of cells. The primary structure
of a protein is a sequence of amino acids. The similarity at the sequence level of
two proteins is often used to detect protein homology in practice. Tremendous
amount of research has been done in the comparison of protein sequences.
For measuring the similarities between pairs of amino acids, amino acid score
matrices have been developed, the most popular ones being the BLOSUM matrices [10] and the PAM matrices [9]. Once a score matrix is chosen, the SmithWaterman algorithm [18] can be used to compute the the optimal sequence
alignment of the two protein sequences. The score of the alignment is equal to
the sum of the scores between pairs of amino acids at every position of the
alignment.
Usually, a protein sequence is compared with every protein sequence in a protein database to ﬁnd possible homologs. Protein databases are typically large. As
a result, it would take too much time to run the Smith-Waterman algorithm to
compare the query protein with every protein in the databases. To address this
speed issue, researchers have developed heuristic algorithms to quickly identify
the possible targets and run Smith-Waterman-like algorithm only on the possible targets. The most famous software program utilizing such a strategy is
BLAST [1, 2]. The other popular programs include FASTA [14] and PatternHunter [15, 13].
Besides the speed issue, there are two other important issues, the sensitivity
and the speciﬁcity, to evaluate the quality of a homology search method.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 960–967, 2005.
c Springer-Verlag Berlin Heidelberg 2005

Improving the Sensitivity and Speciﬁcity of Protein Homology Search

961

Sensitivity measures the ability of the programs to ﬁnd all of the real homologies. The loss of sensitivity comes from two reasons. The ﬁrst is that programs
like BLAST, FASTA and PatternHunter all use heuristic methods that sacriﬁce
the sensitivity to gain speed. The recent PatternHunter II paper uses multiple
spaced seeds to achieve close to Smith-Waterman sensitivity with much faster
speed [13]. Therefore, this reason of losing sensitivity has been mostly solved.
However, the second reason of losing sensitivity is that the score deﬁned
purely by protein sequence alignment may not be able to recognize the homologies at all. Researchers have noticed that when the sequence identity between
known protein and their homologs falls below a threshold of around 20%, sequence alignment are not reliable for ﬁnding the homologs [3]. This reason of
losing sensitivity cannot be solved by any methods that are purely based on
sequence comparison.
Speciﬁcity measures the ability of the programs of excluding the faked homologies. Because the score deﬁned by purely sequence comparisons is not a
very accurate measure of homology, if we set the score threshold low in order to
get more real homologs, we end up with picking up many faked homologs with
certain sequence similarities.
The secondary structures of proteins have been used to help the homology
ﬁnding [4, 21]. The theory is that protein structures are well known to be much
more conserved than the protein sequences during the evolution. However, because predicted secondary structures contain errors, the straightforward use of
the protein secondary structure did not give any improvement [21] on the performance. Hence, either further criteria were needed to determine the real homologs
after the initial selection using secondary structures [4], or the alignments need
to be done multiple times with diﬀerent settings of weights on the sequences and
structures [21], which reduces the running speed by multiple folds.
Many computational methods such as those in [8, 17, 12] have been developed
for predicting the secondary structure from the amino acid sequence of a protein.
Some of them, including PSIPRED [12], give a conﬁdence score to each position
of the prediction. In this paper we propose to utilize this conﬁdence score in
homology searches. We will show that this improves the homology search sensitivity and speciﬁcity signiﬁcantly by extensive test on some data, as well as
prove some nice mathematical properties of the proposed scoring methods.
The contributions of this paper include:
(1) New scoring methods that utilize the predicted secondary structures and
the prediction conﬁdence;
(2) Software that uses the new scoring method to do homology search.

2
2.1

A New Scoring Method for Homology Search
Protein Secondary Structure

The secondary structure of a protein speciﬁes the local spacial arrangements
of the protein sequences. Three general types of local arrangements (secondary

962

B. Ma, L. Wu, and K. Zhang

structure units) can be formed. They are the α helix (H), β sheet (E) and coil (C).
In the representation of a secondary structure, each amino acid of the protein
is labeled with one of the three letters, H, E and C, indicating the amino acid
is involved in a unit of the corresponding type. For example, the following is a
segment of a protein sequence with its secondary structure:
Amino Acid Sequence:
Secondary Structure:

...VLSATDKSNVKAAWGKVGG...
...CCCHHHHHHHHHHHHHHCC...

The amino acid and its corresponding secondary structure label is called an
aa/ss pair (amino acid/secondary structure pair) in the paper. Consequently,
the sequence and secondary structure together can be regarded as a sequence of
aa/ss pairs.
Given an amino acid sequence, a secondary structure prediction program can
be used to predict the secondary structure. Many prediction programs including
PSIPRED [12] gives a conﬁdence score to the prediction at each position. The
conﬁdence score of PSIPRED ranges from 0 to 9. For example, the following is
a segment of PSIPRED’s output when using a protein sequence as input:
...VLSATDKSNVKAAWGKVGG...
...CCCHHHHHHHHHHHHHHCC...
...9889999999999744301...
Although PSIPRED outputs a number between 0 to 9 as its conﬁdence score
at each position, for convenience, later on we divide this score by 10 to normalize
it to be a value between 0 and 1.
2.2

The Proposed Scoring Functions

In [21], the Smith-Waterman algorithm is utilized to align two sequences of
aa/ss pairs. And the optimal local alignment score is used as the similarity score
between two proteins. More speciﬁcally, the author ﬁrst computed a secondary
structure score matrix, M ss , by using a statistical method similar to [10]. The
M ss given in [21] is shown in Table 1.
Then an amino acid score matrix, denoted by M aa , is selected to measure
the similarity between amino acids. M aa can be set to be one of the BLOSUM
matrices or PAM matrices.
Let α and β be the weighted importance of the amino acid and secondary
structure in the alignment. Let a, s and a , s be two aa/ss pairs. The similarity score of the two pairs is deﬁned by
M ( a, s , a , s ) = α × M aa (a, a ) + β × M ss (s, s )
Table 1. The structure score matrix used by Wallqvist et. al. 2000

H
E
C

H
2
-15
-4

E
-15
4
-4

C
-4
-4
2

(1)

Improving the Sensitivity and Speciﬁcity of Protein Homology Search

963

Let go be the gap open penalty, and ge be the gap extension penalty. The similarity score of two proteins is deﬁned in [21] by the optimal local alignment score
of the two sequences of aa/ss pairs.
In [21], (α, β) is set to be (1, 0), (0.9, 0.1), . . ., (0, 1), respectively. The study
of [21] demonstrated that if the true secondary structures of the proteins are
used, then the performance is maximized for (α, β) = (0.5, 0.5), i.e., when putting
equal weight at the sequence and secondary structure. However, if the predicted
secondary structures are used, then the performance is the best for (α, β) =
(1, 0), i.e., when not using secondary structures at all.
This is somewhat discouraging for the use of predicted secondary structures.
The authors of [21] then proposed to do eleven diﬀerent alignments for the eleven
diﬀerent values of (α, β) in a row, and use the cumulative homology search
results. This indeed showed some degree of improvement when the predicted
secondary structures are used. However, this immediately increases the running
time by a factor of 10, which is usually not acceptable.
The results in [21] suggest that the true secondary structures can improve
the homology search performance. However, the errors in the predicted secondary structures make them not much useful. Therefore, we propose to use
the conﬁdence scores output by the secondary structure prediction programs to
distinguish the positions with more accurate predictions from the positions with
more errors; and put more weight to the more accurately predicted positions in
the score computation.
More formally, let a, s and a , s be two aa/ss pairs. Let p and q be the
conﬁdence scores of the predictions at the two pairs, respectively. 0 ≤ p, q ≤ 1.
Then the similarity score of the two pairs is deﬁned by
M ( a, s , a , s ) = M aa (a, a ) + p × q × M ss (s, s )

(2)

Once the scores between aa/ss pairs are deﬁned by (2), for any given gap open
and gap extension penalty, the standard optimal local alignment score of the
two aa/ss sequences is used to be the similarity score between two proteins.
We note that there are ways other than (2) to deﬁne the aa/ss score, as
follows
(3)
M ( a, s , a , s ) = M aa (a, a ) + min{p, q} × M ss (s, s )
and

M ( a, s , a , s ) = M aa (a, a ) + (min{p, q})2 × M ss (s, s )

(4)

The aa/ss score deﬁned in (2) is very intuitive. However, in the next section
we will show that the scores deﬁned by (3) and (4) have important properties
that (2) does not have.
2.3

The Strong Similarity Measure

In homology searches, similarity measures are usually used, where identical sequences have the maximized similarity score. The advantage of using similarity
measure is that the optimal local alignment can be nontrivially deﬁned. This is

964

B. Ma, L. Wu, and K. Zhang

not the case for edit distance because the edit distance [6] of two empty strings
give us the optimal value 0.
However, the disadvantage of similarity measure is that there is no Triangular
Inequality, which can be very useful for building eﬃcient database indexes such
as M-tree [7]. Fortunately, researchers observed that most BLOSUM matrices
satisfy the following two properties [20].
M (x, y) ≤ min{M (x, x), M (y, y)}

(5)

M (x, y) + M (y, z) ≤ M (x, z) + M (y, y)

(6)

The two properties can be regarded as the equivalence of Triangular Inequality in the similarity measure. Once these properties are satisﬁed, in this paper
we call the similarity measure a strong similarity measure.
The two properties of a strong similarity measure have been exploited to
index protein databases for faster homology searches in previous research such
as [20, 11, 19]. It is shown in [20, 11, 19] that if the score matrix is a strong
similarity measure, then the optimal local alignment score based on that score
matrix is also a strong similarity measure. Therefore, it is desirable to have the
score matrices deﬁned in Section 2.2 be strong similarity measures.
Lemma 1. Let M (·, ·) be a strong similarity measure. For any object x, 0 ≤
px ≤ be a real number. Then the measure M (x, y) = M (x, y) × min{px , py } is
also a strong similarity measure.
Proof. Proof will be provided in the full version of this extended abstract.
Lemma 2. Let M (·, ·) be a strong similarity measure. For any object x, 0 ≤
px ≤ be a real number. Then the measure M (x, y) = M (x, y) × (min{px , py })2
is also a strong similarity measure.
Proof. From Lemma 1, we know that M (x, y)×(min{px , py }) is a strong similarity measure. By using Lemma 1 again, we know that [M (x, y) × (min{px , py })] ×
(min{px , py }) is a strong similarity measure.
Lemma 3. If M1 and M2 are strong similarity measures, then M1 + M2 are
strong similarity measure.
Proof. Trivial.
Lemmas 1, 2 and 3 show that if the amino acid matrix, M aa , and the secondary structure matrix, M ss , are strong similarity measure, then the scores
deﬁned by (3) and (4) are also strong similarity measure. On the contrary, we
show in the following that the score deﬁned by (2) may be not.
For conﬂicting the property of (5), suppose that M (x, y) = 1, M (x, x) = 2,
px = 0.1, and py = 0.9. Then 0.09 = M (x, y)×px ×py > M (x, x)×px ×px = 0.02
For conﬂicting the property of (6), suppose that M (x, y) = −1, M (y, z) = −1,
M (x, z) = −1, M (y, y) = 1, px = 0.9, py = 0.1 and pz = 0.9. Then −0.18 =
M (x, y)×px ×py +M (y, z)×py ×pz > M (x, z)×px ×pz +M (y, y)×py ×py = −0.8.

Improving the Sensitivity and Speciﬁcity of Protein Homology Search

3

965

Experiments

We implemented the Smith-Waterman algorithm by using the score schemes
deﬁned by (2), (3), and (4), respectively. For comparison purpose, we also implemented the Smith-Waterman algorithm by using the score scheme deﬁned in
the following.
M ( a, s , a , s ) = M aa (a, a ) + M ss (s, s ).

(7)

In (7), the predicted secondary structure is used but the conﬁdence scores are
not. In all the implementations, the BLOSUM62 matrix is used as the amino acid
matrix M aa and the matrix in Table 1 is used as the secondary structure matrix
M ss . The gap open penalty go = −12 and the gap extension penalty ge = −2.
We used the PSIPRED [12] program to predict the secondary structures of all
proteins that we deal with. The version of PSIPRED we used is 2.3.
The database we used to search in is the release 39 (December 31, 1993) of
the PIR database [5], which was downloaded from http://pir.georgetown.edu/.
The reason we use this version of the database is to be consistent with [16]. Also,
we used the same 54 protein superfamilies as used in [16].
For each superfamily, a representative protein was given in [16]. We use that
representative protein as query to search the whole PIR database. Suppose the
superfamily has size K, and the top K sequences given by our search has K
sequences in the superfamily. Then K − K sequences are errors. And the ratio

0.5

A
B
C
D

0.4

E

0.3

0.2

0.1

0

0

5

10

15

20

25

30

35

40

45

50

Fig. 1. The EER curve of the ﬁve scoring functions on the 54 protein families. A)
sequence + weighted structure score as in(2); B) sequence + weighted structure score
as in(3); C) sequence + weighted structure score as in(4); D) sequence score only; E)
sequence + structure score as in (7)

966

B. Ma, L. Wu, and K. Zhang

K−K
K

is called the equal error rate (ERR) of the searching method at that
superfamily. We then sort the 54 ERR values and plot a ERR curve in Figure 1.
From Figure 1 one can conclude that simply adding the structure score based
on the predicted secondary structure will make the performance worse (curve
E). This is consistent with the observation in [21]. However, by accounting for
the conﬁdences predicted by the secondary structure prediction program, the
performance is much better (curves A, B and C).

4

Discussion

We proposed three new formulae, (2), (3), and (4) to combine the amino acid
score and secondary structure score in homology search. By using PSIPRED
software to predict the secondary structures of both the query protein sequence
and the database protein sequences, the combined score gave signiﬁcantly better sensitivity and speciﬁcity than the ordinary searching method which uses
only the amino acid sequences. Our research result is surprising because previous research [21] suggested that combining the predicted secondary structures
(instead of the true secondary structures) was not better than using sequences
only. The diﬀerence between our research and the previous ones is that we take
into account the conﬁdence scores output by the secondary structure prediction
programs.
When the amino acid matrix and the secondary structure matrix are both
strong similarity measures, some of the formulae we used ((3), and (4)) give us
strong similarity measures.
As future work, the gap open and gap extension penalties need to be tuned
for diﬀerent amino acid matrices and secondary structure matrices. The software
programs for the experiments will be made available at http://bif.csd.uwo.ca/.

Acknowledgment
This research was undertaken, in part, thanks to funding from NSERC, PREA,
and the Canada Research Chairs Program. We thank Dr. Dong Xu for his recommendation of the PSIPRED secondary structure prediction program.

References
1. S. F. Altschul, W. Gish, W. Miller, E. W. Myers, and D. J. Lipman. Basic local
alignment search tool. Journal of Molecular Biology, 215(3):403–410, 1990.
2. S. F. Altschul, T. L. Madden, A. A. Schaﬀer, J. Zhang, Z. Zhang, W. Miller, and
D. J. Lipman. Gapped BLAST and PSI-BLAST: a new generation of protein
database search programs. Nucleic Acids Research, 25(17):3389–3392, 1997.
3. T. K. Attwood and D. J. Parry-Smith. Introduction to Bioinformatics. Prentice
Hall, 1999.

Improving the Sensitivity and Speciﬁcity of Protein Homology Search

967

4. R. Auroroa and G. Rose. Seeking an ancient enzyme in methanococcus jannaschii
using orf, a program based on predicted secondary structure comparisons. Proc.
Natl. Acad. Sci. USA, 95:2818–2823, 1998.
5. G. D. Barker and W. L. Hunt. Pir-international protein sequence database. Methods Enzymol, 266:41–59, 1996.
6. D. Brown, M. Li, and B. Ma. The homology search methods. In L. Wong, editor,
The Practical Bioinformatician. World Scientiﬁc, 2004.
7. P. Ciaacia, M. Patella, and P. Zezula. M-tree: An eﬃcient access method for similarity search in metric spaces. In Proceedings of the 23rd International Conference
on Very Large Database, pages 15–26, 1997.
8. J. A. Cuﬀ and G. J. Barton. Evaluation and improvement of multiple sequence
methods for protein secondary structure prediction. PROTEINS: Structure, Function and Genetics, 34:508–519, 1999.
9. M. O. Dayhoﬀ, R. M. Schwartz, and B. C. Orcutt. A model of evolutionary change
in proteins. Atlas of Prot. Seq. and Struct., 5:345–352, 1978.
10. S. Henikoﬀ and J. G. Henikoﬀ. Amino acid substitution matrices from protein
blocks. Proc. Natl. Acad. Sci. USA, 89:10915–10919, 1992.
11. M. Itoh, S. Goto, T. Akutsu, and M. Kanehisa. Fast and accurate database homology search using upper bounds of local alignment. Bioinformatics, 2004. To
appear.
12. D. T. Jones. Protein secondary structure prediction based on position-speciﬁc
scoring matrices. Journal of Molecular Biology, 292:195–202, 1999.
13. M. Li, B. Ma, D. Kisman, and J. Tromp. PatternHunter II: Highly sensitive
and fast homology search. Journal of Bioinformatics and Computational Biology,
2(3):417–440, 2004.
14. D. Lipman and W. Pearson. Rapid and sensitive protein similarity searches. Science, 227, 1985.
15. B. Ma, J. Tromp, and M. Li. PatternHunter: faster and more sensitive homology
search. Bioinformatics, 18(3):440–445, March 2002.
16. W. R. Pearson. Comparison of methods for searching protein sequence databases.
Protein Science, 4:1145–1160, 1995.
17. B. Rost and C. Sander. Prediction of protein secondary structure at better than
70% accuracy. Journal of Molecular Biology, 232:584–599, 1993.
18. T. Smith and M. Waterman. Identiﬁcation of common molecular subsequences.
J.Mol.Biol, 147:195–197, 1981.
19. P. Spiro and N. Macura. A local alignment metric for accelerating biosequence
database search. Journal of Computational Biology, 11:61–82.
20. A. Stojmirovi´c and V. Pestov. Indexing schemes for similarity search in datasets
of short protein fragments. Technical report, 2003. ArXiv e-print DS/0309005.
21. A. Wallqvist, Y. Fukunishi, L. R. Murphy, A. Fadel, and R. M. Levy. Iterative
sequence/secondary structure search for protein homologs: comparison with amino
acid sequence alignments and application to fold recognition in genome databases.
Bioinformatics, 16(11):988–1002, 2000.

