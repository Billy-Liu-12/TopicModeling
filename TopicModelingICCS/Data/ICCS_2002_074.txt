Task-oriented Petri Net Models
for Discrete Event Simulation
Ewa Ochmanska
Warsaw Technical University, Department of Transport
00-662 Warsaw, Poland
och@it.pw.edu.pl

Abstract. The paper concerns a class of task-oriented simulation models for
discrete event systems. The models are considered, in which arriving tasks are
alternatively distributed throughout the system accordingly to the actual state of
particular resources. The models are based on Petri nets, with extensions
including informative aspects of modeled processes as well as timing and
decision-making rules. Such kind of models can be helpful in investigating
different types of systems executing tasks by means of distributed sets of
resources with dynamically changing availability. In particular they are suitable
for modeling reliability behavior of control systems, built of re-configurable
modules, responsible for executing predefined sets of tasks.

1 Introduction
A discrete event simulation model, presented in the paper, distributes arriving tasks
throughout the net structure of the modeled system, in a way dependent on actual state
of availability of resources. Such a model can be applied in investigating system
reliability or performance.
General assumptions for system structure and functions, leading to the task-oriented
principle of modeling, with dynamically changing states of resources needed for
alternative task executions, are formulated in section 2. The proposed model
represents processes of execution of specified tasks, each of them being executed in
one of several predefined alternate ways dependent on limited availability of
resources, corresponding to technical failures of elements of control system [3].
Timed nets with data structures, predicates and actions [2, 4], defined upon
place/transition Petri nets [1], were applied earlier and proved as effective tool for
event-oriented modeling and simulation of technological processes at railway stations
[4, 6] and processes of transport & distribution in logistic systems [5]. The difference
of models presented in this paper consists in task- versus event-oriented view of the
system rather than in net model description. The formalism of Petri net extension
adopted for this kind of models is shortly resumed in section 3.
In section 4, the composition and dynamics of net structures mapping elements of
simulation model are explained, as well as general structure and behavior of a model.
Section 5 contains final remarks concerning some problems, which need resolving,
and possible applications of the presented models.

2 Task-oriented View of a System
2.1 System Resources
We assume that a modeled system disposes some number n of disjoint and distributed
sets of resources:
={Ri, i=1,...n}

(1)

as a means to execute a stream of tasks, i.e. a sequence of tasks incoming to the
system at successive points of time. The total set of resources disposed by the system
during execution of tasks is equal to the union:
∪ Rn = {rf, f=1,...p}.
R= R1 ∪…∪

(2)

∈R may be in one of the following
At a given point of time, each individual resource r∈
states: 1° available: being ready to use; 2° occupied: participating in execution of a
task; 3° unable: malfunctioning; 4° inaccessible because of a malfunction of its
communication link (this case simultaneously concerns all resources from a set Ri
sharing a communication link).

System

Stream of tasks
Control part C

R
1

Ri
Resources R

R
n

Fig. 1. Task-oriented view of the modeled system

A control part C of the system checks actual states of particular resources and
distributes, through communication links, execution of incoming tasks to available
resources proper to specific kinds of tasks, according to the definitions formulated in
the next subsection.

2.2

Executive Configurations of Resources

For execution of a task some subset of resources is needed for some period of time.
Such subset of resources will be called executive configuration of a task. A family of
different executive configurations, applied for execution of all system tasks, is a
finished family of resource subsets:
= {Ek⊆R | k=1,...,m} ,

(3)

≠l ⇒ Ek≠El and m is the cardinality of .
where ∀k,l: k≠

2

We assume, that a task may be alternatively executed in more than one configuration
and that the modeled system executes tasks of different kinds, distinguished by sets of
possible executive configurations and their kind-specific time characteristics (duration
of execution and occupation of resources). All kinds of tasks executed by the system
are described by a set K of pairs:
K = {Kj =〈 j, Tj〉 | j=1,...,q} ,

(4)

where j ⊆ is a subfamily of executive configurations, and Tj is timing function,
assigning for each particular resource in each particular configuration in Kj a time
period of being occupied by executing a task of j-th kind. Accordingly to (4),
different executive configurations may be alternatively applied to a task of given kind.
On the other hand, the same executive configuration may be applicable to multiple
kinds of tasks, i.e. families of configurations proper to different kinds of tasks may
have common parts. However, timing functions are defined independently and the
same configuration of resources may be applied for different task kinds with different
time characteristics.
Let us assign priorities to executive configurations proper to a kind of tasks, and
appropriately enumerate elements of a subfamily j :
j

= {Edj∈ }d=1,..., | j| ,

(5)

where | j|≥1 is cardinality of the set j.
An executive configuration proper to multiple kinds of tasks may have different
priorities for each of those kinds.
2.3

An Algorithm for System Dynamics

An executive configuration, chosen by control part of the system for executing a task,
is called its active configuration. During the execution of a task of some kind, each
resource in its active configuration is occupied by a period of time determined by the
timing function defined for this kind of tasks. A resource may be used for execution
of one task at a time, i.e. it can belong to at most one active configuration.
The tasks arrive to the input of the modelled system in some distinguished points of
time. The control part of the system attempts to execute them in an executive
configurations of highest possible priority, while the states of resources change
dynamically and not all of them are available. Some of resources, belonging to active
configurations, are occupied. Some of them have failed or became inaccessible
because of damaged communication links.
We will distinguish five following cases with regard to possibility of executing task
of j-th kind, incoming at a given moment to the system, in an executive configuration
∈1,..., | j| proper to the kind of task:
Ek∈ as the configuration Ejd∈ j, d∈
(a) Ek=Ejd and all its resources are in the state of availability.
The task is executed in active configuration Ek. The resources belonging to that
configuration are occupied for a time given by the timing function Tj.

(b) Ek=Ejd, but it is not possible to activate this configuration, because some of its
resources are occupied, i.e. participating in an active configuration.
The task is waiting to be executed in the configuration Ek until releasing of the
occupied resources.
(c) Ek≠Ejd. Another configuration El∈ , l≠k and El=Ejd, should be considered.
(d) Ek=Ejd, but it is not possible to activate this configuration because of
malfunctions of some elements of the system – one or more resources belonging
to Ek are in states of inability or inaccessibility. Besides, d<| j|, i.e. in the
sequence of j there is an executive configuration Ej(d+1) with next priority value.
Then the control part of the system attempts to activate some configuration
El∈ , l≠k, as the next executive configuration Ej(d+1) proper to the kind of task.
(e) Ek=Ejd, but it is not possible to activate this configuration because one or more
resources belonging to Ek are in states of inability or inaccessibility, and d=| j|,
i.e. Ejd is last in the sequence of j.
The task can not be executed in a regular way. For such cases we may define
several treatments depending on specifics of modelled problem, e.g. refusing
execution, waiting for recovering of needed resources or suspending the system
normal activity for a period of time consumed by special procedures.

3.

Net Tools for Model Description

3.1

Extended Petri Nets

Our aim is to construct a task-oriented model of the system, with structure and
behavior described in the previous section. To achieve it we formulate an extension of
Petri nets described as follows. Place/transition Petri net is a quadruple:
Θ0) ,
PTN=(P,T,A,Θ

(6)

⊆P×
×T∪
∪T×
×P is a set of arrows,
where P is a set of places, T is a set of transitions, A⊆
→N is a state function, which assigns to each place p some nonnegative
and Θ:P→
number Θ(p) of tokens. A Petri net with an initial state Θ0 realizes a process by firing
transitions. A transition t is fireable in a state Θ (it is written as Θ[t〉〉), if each place of
∈P
〈p,t〉∈
∈A} contains a token:
its input I(t)={p∈
Θ[t〉〉 ⇔∀(p∈
∈I(t)) Θ(p)>0 .

(7)

The fired transition t consumes one token per input place and produces one token in
∈P
〈t,p〉∈
∈A}, moving the net into the new state Θ’:
each place of its output O(t)={p∈
Θ(p) – 1
Θ’(p) = Θ(p) + 1
Θ(p)

∈(I(p)\O(p)
for p∈
∈O(p)\(I(p)
for p∈
otherwise .

(8)

We introduce the following extensions to the above definition:
• Tokens are data structures (sets of named values) representing information
describing tasks executed in the system and resources used for execution of tasks.

4

• Predicate is logical function constraining fireability of transition t, which is
Θ(p)
p∈
∈I(t)} of its input.
defined on values of data structures {Θ
• Action transforms input data structures {θ
θ(p)∈
∈Θ(p)
p∈
∈I(t)} of fired transition t
θ(p)’∈
∈Θ’(p)
p∈
∈O(t)}. Information describing actual
to its output data structures {θ
state of realized process, transformed by actions and transported by tokens, is then
used by predicates for deciding about further way of process realisation.
• Timing is a mechanism placing modelled processes in the time by means of
timestamps inserted to data structures of tokens, time conditions joined to predicates
and time updates performed by actions. A state Θ(ττ) of the net assigns sets of data
structures describing current state of modelled system in a moment τ:
Θ(ττ)={Θ
Θ(p, τ)
p∈
∈P} .

(9)

≥ 0 for any p∈
∈P. More detailed description
The number of data structures Θ(p, τ)
of timing mechanism and other extensions, in somewhat different context of eventoriented models, can be found in [4].
3.2

Classes of Net Elements

Petri nets, extended by above definitions, will constitute dynamic discrete event
system models, realizing processes of concurrent execution of different kinds of tasks.
In order to represent their semantics, we distinguish classes of places and transitions
corresponding to the structure and dynamics of the task-oriented system view
described in section 2. Places will contain tokens with class-specific data structures.
Transitions with class-specific inputs and outputs will perform class-specific actions,
constrained by class-specific predicates. Semantic of net elements, comprising classspecific terms, is explained together with net model description in section 4.
Task-oriented net model is built of two hierarchical levels. The model consists of two
classes of places, representing tasks and resources, and of three classes of “highlevel” transitions, i.e. sub-nets (groups of low-level transitions) responsible for
generating tasks, executing tasks and providing resources. High-level class of task
executors consists of several classes of low-level transitions, realising particular cases
of the algorithm for system dynamics, described in subsection 2.3. Low-level net
structure of remaining two classes of high-level transitions, representing stochastic
generators for streams of tasks and states of resources, are not discussed here. Some
propositions can be found in [3].

4

Task-oriented Net Model

4.1. General Structure of the Model
The general structure of task-oriented net model, presented on Fig. 2, is quite regular
and has three layers of dynamic elements (high-level transitions) separated by two

layers of passive elements (places). Each layer is represented by different class of
model elements, characterised below in order as they appear on the figure.

TK2

TK1

...

...

TE1

...

e2

e1

TEk-1

TEk

...

r1

TKj

ek

TEk+1

TR1

...

TEm-1

em

TEm

...

rf

...

TKq

...

ek+1

...

r2

...

rp

...
TRj

TRn

Fig. 2. General structure of the task-oriented net model

Task Generators: a class of transitions responsible for generating streams of tasks,
corresponding to the set K. Their actions produce tokens with data structures
describing task kinds according to (4), completed by timestamp of their arrival to the
system and by current priority value set to 1. Transition TKj, j∈〈1,...,q〉〉 is connected
to the place ek with number k such, that Ek∈ equals E1j∈ j. In other words, tasks of
j-th kind attempt to be executed in the configuration E1j of the first priority (the best
for that kind of tasks). The connections showed on the figure are exemplary.
Tasks: a class of places serving as containers for tasks, waiting for execution in one
of the possible configurations of resources. The places e1,...,em , corresponding to m
executive configurations used by the system, serve as inputs to transitions responsible
for task execution. They hold tokens representing tasks, produced by task generators.
Task Executors: high-level transitions, which consume tasks and perform actions
depending on current states of needed resources, as described in subsection 2.3,
eventually changing those states to “occupied” and updating timestamps. The subsets
of connections {TEk}×Ek ∪ Ek×{TEk} between transitions TEk, k=1,…,m , and their
input/output places representing resources of particular executive configurations, are
depicted by thick grey arrows on Fig. 2. Sets Ek, k=1,...,m have in general nonempty
intersections: a resource place rf may be connected with several task executors.
The detailed structure and function of this transition class is described in the
subsection 4.2.

6

Resources: a class of places directly corresponding to the set R (2). These places
contain tokens representing particular resources, with data structures including
timestamps of last state changes, their planned durations and numbers from 1° to 4°,
as were enumerated in subsection 2.1.
Resource Providers: a class of transitions corresponding to the family =R1,…,Rn
of resource sets (1). They are responsible for current states of resources (except of the
second state: “occupied”, caused by task executors). Acting concurrently to
transitions of other classes, they consume and produce tokens representing resources
and temporarily limit their accessibility, possibly in a stochastic manner. An example
of detailed realisation of this class of high-level transitions, based on several
stochastic generators, can be found in [3]. The sets of I/O connections {TRi}×Ri ∪
Ri×{TRi} between transitions TRi, i=1,…,n and places representing resources of
particular subsets, are represented by thick white arrows. Sets Ri, i=1,...,n are disjoint:
each resource place rf is connected with one particular transition TRi.
Executive configuration for a task of j-th kind, represented by a token produced by a
transition TKj, is chosen by a rule similar to the “token ring” principle of
communication, applied in computer nets. If transition TEk can not activate executive
configuration for a task waiting for execution in the place ek (some of resources in set
Ek being occupied, unable or inaccessible), it passes the task to the next place el in the
loop shown on Fig. 2 (l=k+1 for k<m and l=1 for k=m). This mechanism is described
in the following subsection.
4.2

Task Executors

A high-level transition of the task executor class forms a subnet, consisting of four
parallel transitions of different classes with mutually exclusive predicates, as is shown
on Fig. 3.
.
..

ekz

el

k

.

(a)

TEk

ek

e1

..
TEk

(c)

(e)
(d)

. . ..
..

Ek ⊆ R

...

Fig. 3. The detailed structure of task executor

.. . .

R

Inputs connection from the place ek of tasks, waiting for execution in k-th
configuration, is branched to the group of four parallel low-level transitions with
mutually exclusive predicates, corresponding to the cases distinguished in the
algorithm described in subsection 2.3. As a consequence, they alternatively consume
tasks and perform actions proper to the cases (a), (c), (d) and (e) of the algorithm:
Transition (a) occurs, when all needed resources are available. It removes a task
from the input place and occupies resources by updating their timestamps for periods
given by timing function .
Transition (c) occurs, if the input task is awaiting for execution in a configuration of
the current priority, different from the executive configuration represented by the
high-level transition TEk. The task is moved to the input of transition TKl,
successive in the chain. This action is repeated until the proper executive
configuration is reached. Note that the transition (c) has no input resource places.
Transition (d) occurs, when some of needed resources are malfunctioning or
inaccessible, but the input task can be executed in another configuration. Current
priority value of the task is increased, so that another applicable configuration is
assigned to execute the task, before moving it to the next transition TKl.
Transition (e) occurs, if no executive configuration applicable for the input task can
be activated; the task is discarded.
The case (b) of the algorithm is static: waiting for releasing of occupied resources is
modelled by timing condition built into the predicate of transition (a).

5

Conclusions

The task-oriented approach for construction and dynamics of net simulation models
bases on a set of extended Petri net modeling tools. The modeling method, with its
mechanisms for timing, conditional execution and processing of data structures, has
been implemented as an object library of net components and proved its usefulness
for event-oriented simulation models of transport and logistic systems [4, 5, 6].
The new, task-oriented view of modeled system was inspired by the reliability
behavior of control systems in transport. Such a view permits to define compact
models of systems performing tasks by means of distributed resources with limited
and dynamically changing accessibility. These system characteristics may be valid for
various environments, e.g. for distributed computing and Web based simulation.
Using stochastic generators for streams of tasks and states of resources, this way of
simulation modeling, compared with analytical models based on stochastic Petri nets,
forms an alternative which is free of limitations on probability distributions.
The presented modeling rules give rise to further evolution in several topics, like
multi-directional net structure instead of circular one, stochastic rules of choosing
executive configurations in place of simple priorities, special treatment of "refused"
tasks etc., in order to increase their expressive power. Together with the easiness of
object implementation of net elements, the described type of models seems promising.

8

References
1. Desel J., Reisig W., Place/Transition Petri Nets. In: Lectures on Petri Nets I; Basic Models,
Vol. 1491 of LNCS, Springer-Verlag (1998)
2. Ghezzi C., Mandrioli D., Morasca S., Pezzè M.: A General Way to Put Time in Petri Nets.
Proceedings of the 5th International Workshop on Software Specification and Design, IEEECS Press, Pittsburg (1989)
3. Konopinski L., Ochmanska E., Wawrzynski W,: Simulation Model of Control System at
Railway Station. Archives of Transport. Vol. ... Polish Academy of Science, Committee of
Transport. Warsaw (2002) (to appear)
4. Ochmanska E.: System Simulating Technological Processes. ESM’97, Proceedings of the
11th European Simulation Multiconference, Istambul (1997)
5. Ochmanska E.: Object-oriented PN Models with Storage for Transport and Logistic
Processes. ESS’97, Proceedings of the 9th European Simulation Symposium „Simulation in
Industry”, Passau (1997)
6. Ochmanska E.: Simulation of Serving Trains at Railway Freight Stations. 13th European
Simulation Multiconference, Warszawa (1999)

