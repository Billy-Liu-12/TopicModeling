Reliable and Scalable State Management Using
Migration of State Information in Web Services*
Jongbae Moon, Hyungil Park, and Myungho Kim
#313, School of Computing, Soongsil University, Sangdo-5 Dong, Dongjak-Gu, Seoul,
156-743, Korea
{jbmoon, hgpark}@ss.ssu.ac.kr, kmh@ssu.ac.kr

Abstract. The WS-Resource framework (WSRF) was proposed as a reengineering and evolution of OGSI to be compatible with the current Web services
conventions and specifications. Although WSRF separates state management
from the stateless web service and provides a mechanism for state management,
it still has some limitations. The tight-coupling between web services and their
resource factories restricts the scalability. When the repository of stateful resources fails, stateful web services can not work. In this paper, we propose a
new state management framework which is called State Management Web Service Framework (SMWSF) and implemented on Microsoft .NET framework.
SMWSF provides reliability, flexibility, scalability, and security. SMWSF provides migration of state information and the service requestor can control the
location of the repository of stateful resource. We also implemented a prototype
system and conducted comparison experiments to evaluate performance.
Keywords: state management, web service, WSRF, migration.

1 Introduction
Web services are “software systems designed to support interoperable machine-tomachine interaction over a network” [1]. Though there has been some success of Web
Service in the industry, Web service has been regarded as stateless and non-transient
[2]. Recently, most of the web services, however, are stateful; state information is
kept and used during the execution of applications.
To manage sate information within Web services framework, the Open Grid Services
Infrastructure (OGSI) [3] and Web Service Resource Framework (WSRF) [4] were
proposed. Both OGSI and WSRF are concerned with how to manipulate stateful
resources. OGSI extends the power of Web services framework significantly by integrating support for transient, stateful service instances with existing Web services
technologies. The Globus Toolkit 3 (GT3) [5] is an implementation of the OGSI specification and has become a de facto standard for Grid middleware. GT3 uses Grid service
factory to create multiple instances of the Grid service, and the Grid service instances
are stateful. However, because GT3 uses the same container for grid services, the
*

This work was supported by the Soongsil University Research Fund.

Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 382 – 389, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Reliable and Scalable State Management Using Migration of State Information

383

service container, which is a Grid service factory, has to be restarted whenever a new
service joins. This will affect all existing services in the same container.
WSRF was introduced as a refactoring and evolution of OGSI, and provides a
generic, open framework for modeling and accessing stateful resources using Web
services. WSRF uses different container to manage stateful resources and Web services; WSRF separates state management from the stateless web services. Therefore,
there is no loss of state information and other service instances should continue to
work although the execution of a service instance fails. WSRF, however, still has some
limitations [2]. Each Web service accompanies a WS-Resource factory. The tight coupling between the web service and the resource factory leads to scalability problem.
Moreover, WSRF does not provide the flexibility of choosing the location of the state
repository. This may introduce security problems although the service itself is trusted
by the requestor; the requestor and provider may have different security policies.
Moreover, when the state repository fails, the stateful web service does not work.
In this paper, we propose a new state management framework, which is implemented on Microsoft .NET Web services, and implement a prototype system. The
prototype system makes Web services and their state management loosely-coupled
and Web services can use another state management service, which is in another service provider, to provide scalability. The state information can migrate to another
repository to enhance reliability, security, and scalability while Web services are
running. The migration of the state information also provides the flexibility of choosing the location of the state repository. To provide security for the state information,
the state management stores the state information with an encryption key which is
sent by the requestor. Moreover, whenever the state information migrates, it is transferred through a security channel.
The rest of this paper is organized as follows. Section 2 summarizes the existing
researches regarding the state management in Web services. Section 3 proposes a
system model. Section 4 describes how to implement a prototype system. Section 5
evaluates the performance of the proposed system by conducting comparison experiments, and Section 6 concludes the paper.

2 Related Works
Web services have a problem that it is difficult to maintain state because web services
are built on top of the stateless HTTP protocol. While Web service implementations
are typically stateless, their interfaces frequently provide a user with the ability to
access and manipulate state. In [6], three different models to keep and manage state
information are proposed. However, maintaining state information has restriction on
scalability. Moreover, to provide security for the state, extra works are required.
OGSI enables access to stateful resources with the maintenance and retrieval of
state information. OGSI introduces the resource factory to create multiple instances of
the Grid service. Because OGSI uses the same container for Grid services, the service
container has to be restarted whenever a new service joins.
WSRF provides standardized patterns and interfaces to manage state information.
WSRF introduces the WS-Resource factory to create the instance of stateful
resources. When a web service fails, WSRF can restore the state information by

384

J. Moon, H. Park, and M. Kim

separating state management from a web service. WSRF, however, has some limitation to manage the state. The tight coupling between Web services and their factories
leads to scalability problem.
In [2], a generic state management service, which separates state management from
Web services, is introduced to overcome WSRF’s limitations. Besides the reduction
of work for service developers, scalability is enhanced by the flexible deployment of
the state management service. However, once the state information is stored in a stateful resource, the requestor can not change the location of the repository. Therefore,
although the Web service and state management service are trusted by the requestor,
the repository may not guarantee security problems. Moreover, failure of the repository reduces the reliability and scalability.

3 Proposed State Management Model
In this section, we propose a new state management framework which overcomes the
WSRF’s limitation as mentioned above. The proposed framework is called the State
Management Web Service Framework (SMWSF). SMWSF provides scalability,
flexibility, security and reliability.
Fig. 1 shows the state management system model based on SMWSF. In this system
model, state management, which is a Web service for creating and managing the instance of a stateful resource, is separated from web services. The service requestor
can make web services use another state management service that exists in one of the
other service providers. The state management service implements common interfaces
to store the state information in some types of stateful resource. Therefore, service
authors can easily develop web services regardless of the implementation of state
management interfaces. Moreover, the state management service provides an interface
that a stateful resource can migrate to another repository, as well as in another type.
The state information is encrypted or decrypted before the state management service
stores or restores it. Moreover, communications between the state management service and the stateful resource is established through a security channel.
A stateful resource is referred to as a WS-Resource in WSRF, and each WSResource is described by an XML document. In SMWSF, a stateful resource is
implemented in some different types. The service requestor may want to change the
location of the stateful resource because of security problems or failure of the repository. The state information can migrate to another repository chosen by the requestor,
and the type of the stateful resource can be changed. In addition, migrating the stateful resource enhances reliability when the repository fails or does not work well.
During the migration process, to guarantee security for the state information, communication is established through a security protocol, such as IPSec (IP Security).
Fig. 1 a) shows the process of using the Web service in SMWSF, and the details are
described as follows. Fist of all, a service requestor sends a request including an encryption key to the service provider, choosing a type of the stateful resource and a
location where the stateful resource is stored in. Then, the Web service generates an
XML document including the state information, and sends a request with the generated
XML document to the state management web service. After the state management
service encrypts the state information with the requestor’s encryption key, the

Reliable and Scalable State Management Using Migration of State Information

385

encrypted state information is stored in a chosen place. Moreover as well as in a desired type. After that, the state management service returns the URI of the stateful
resource to the Web service, and then the Web service returns the URI to the requestor.
When the requestor requests the stateful resource to be moved, the Web service takes
in the type and URI of the stateful resource from the requestor, and sends a migration
request to the state management service. The state management service reads the corresponding resource, and then stores the state information in the specified location as
well as specified type. In addition, Fig. 1 b) shows the details that the Web service
changes the state management service with another one. The old state management
service sends the URI of the stateful resource to the new state. After the new state
management service gets in contact with the stateful resource, then the Web service
communicate with the new state management service through a security channel.

a) The state information can migrate from repository A to B.

b) The service requestor can choose the state management service.
Fig. 1. Proposed State Management System Model

386

J. Moon, H. Park, and M. Kim

4 Implementation
We implemented a prototype system to test SMWSF. We use ASP.NET in C# to
implement web service applications. Besides, we use Microsoft IIS (Internet Information Server) as a web application server. The prototype system is implemented on top
of the Microsoft .NET framework. SMWSF implements basic WSRF specifications,
such as WS-ResourceProperties [7] and WS-ResourceLifetime [8]. In the prototype
system, a system is divided into three parts which are web services, a state management service including the proposed framework, and stateful resources. The system
also provides libraries for implementing web services and lifetime management module for keeping track of the stateful resources created by the client requests.
In this system, every web service should be developed and implemented by importing libraries which is provided by SMWSF. Web services are ASP.NET web services.
Service authors annotate their web service codes with metadata via .NET attributes.
The port type attribute allows service authors to easily import the functionality that is
defined by web service library into their service.
The web service libraries include state management interfaces, an XML generator,
and a GUID generator. Web services use the state management interfaces, which are
just defined but not implemented, to communicate with the state management service.
The sate management web service is in charge of the implementation of the interfaces. Therefore, web services use another state management service which is provided by another service provider.
Web services generate service requestor’s GUID (Global Unique ID) by using the
GUID generator. The GUID, which is a 128bit integer number generated by using
hash function, is used to grant access to a stateful resource. Web services generate an
XML document to manipulate state information as a stateful resource by using the
XML generator. In a web service, class-level data members are declared as part of the
stateful resource via the [Resource] attribute to generate an XML document. The
values of the class-level data members are saved into an XML document. The generated XML document includes a GUID and an encryption key in the <Header>
element. The class-level data member’s name and value that are described in the [Resource] attribute in the web service are set in the <Resource> element. This XML
document is encrypted with the encryption key, and then stored in the repository.
The state management service manages web services’ state information. This
service implemented as a web service. Service authors can make web services communicate with another state management web service provided by another service
provider. The state management web service implements interfaces for state management, such as store, restore, deletion, and migration of stateful resources. To do this,
the port type attribute is also used to import functionality that is defined in SMWSF.
In the case of the migration, the state management web service generates an XML
document from the repository first by using one of the stateful resource repository
management modules. The XML document is stored in a desired place, as well as in a
desired type. When the service requestor wants web services to use another state
management service, the XML document is sent to the selected state management
service, and then stored in the repository.
A stateful resource must persist between service invocations until the end of its
lifetime, meaning that the state of a stateful resource after one invocation should be

Reliable and Scalable State Management Using Migration of State Information

387

the same as its state before the next. Persistence can be achieved by holding the resource in memory, writing it to disk, or storing it in a database. The memory model
provides the best response-time performance but least fault-tolerant. The file system
model provides slow performance than other models, but provides the ability to survive server failure at the cost of some performance. The database model is slower
than memory model, but provides scalability, fault-tolerance, and access to powerful
query/discover mechanisms that are not present in the file system model. Therefore,
in the proposed system the state resource repository management implements the
stateful resource in these three types.

5 Performance Evaluation
In this section, we conducted two experiments for comparison to evaluate performance of SMWSF; we compared the system based on SMWSF with other systems
implementing WSRF specification: GT4 and WSRF.NET. First, we implemented a
calculator web service, and estimated the response time for creating, deleting, storing,
restoring, and migrating state information of a web service. We performed each
operation 1000 times, and then measured the average of the response time. The calculator service is a web service providing computation functionalities. Second, we implemented an airline booking web service on each framework. Then, we compared the
service time, which is measured by the time in seconds for the client to receive the
full response, as the number of clients increase. The airline booking service is a web
service that retrieves airline schedules and then books seats. To perform this experiment automatically, we made the airline booking service book the first retrieved flight
and reserve a fixed seat on the plane.
We used four identically configured machines that have an Intel Pentium 4 3.0GHz
CPU with 1GB Ram and 80GB E-IDE 7200 RPM HDD. Two machines for SMWSF
and one for WSRF.NET ran Windows 2003 Server Standard Edition. One for GT4
ran Linux Fedora Core 4 (Linux kernel 2.6.11). In SMWSF, stateful resources were
implemented in three types, which were XML file, database, and memory; MySQL
was used as a database for this experiment. GT4 stores state information in system
memory. WSRF.NET implements WS-Resources using SQL Server 2000.
Table 1 shows the average response time for basic operations of the calculator service. All the numbers are in milliseconds. The Remote SMWSF is the case when the
calculator service uses a remote state management service provided by another service provider. In this case, the average response time was slower than SMWSF and
other systems because an additional communication cost between a web services and
its state management service is needed. As compared with GT4 implementing stateful
resource in memory model, SMWSF was faster in every test because GT4 is implemented in Java. As compared with WSRF.NET implementing stateful resource in
database model, SMWSF had similar performance although there were additional
overheads during encryption and decryption. Therefore, we could see SMWSF has as
good performance as WSRF.NET has.

388

J. Moon, H. Park, and M. Kim
Table 1. Average response time for basic operations

GT4-Java
WSRF.NET
File System
SMWSF
Memory
Database
File System
Remote
Memory
SMWSF
Database

Create
16.3 ms
14.7 ms
15.3 ms
13.1 ms
14.2 ms
21.5 ms
19.4 ms
20.8 ms

Delete
23.6 ms
21.4 ms
23.5 ms
20.1 ms
21.8 ms
34.4 ms
30.8 ms
32.9 ms

Restore
28.6 ms
38.2 ms
32.8 ms
27.9 ms
37.5 ms
44.1 ms
37.4 ms
47.4 ms

Store
24.9 ms
24.4 ms
22.3 ms
19.5 ms
24.0 ms
35.2 ms
30.4 ms
36.4 ms

Fig. 2 shows the service time of the airline booking web service as the number of
clients increase from 50 to 400. In this experiment, the Remote SMWSF is considered
only if memory model. As the number of clients increase, the service time of GT4
was the fastest, followed by SMWSF, Remote SMWSF, and WSRF.NET. As might
have been expected, the systems using memory model was faster than the systems
using database and file system model. Moreover, Remote SMWSF was slower than
SMWSF and GT4 because of additional communication cost and encryption overhead. GT4 had stable performance even though the number of clients increased because GT4 implements HTTP connection caching which reuses HTTP connection that
was previously created. In the first experiment, the response time of SMWSF and
WSRF.NET were comparable. In this experiment, as compared with WSRF.NET,
SMWSF was faster because of the overhead caused by web service extension;
WSRF.NET uses Microsoft Web Services Enhancement to provide SOAP message
exchange. In addition, there were more SOAP data than SMWSF.

Fig. 2. Service time for an airline booking service according to the number of clients

Reliable and Scalable State Management Using Migration of State Information

389

6 Conclusions and Future Works
In this paper, we proposed a new state management framework which provides scalability, flexibility, security, and reliability. This framework is called State Management Web Service Framework (SMWSF). We also implemented a prototype system
that is based on the Microsoft .NET framework. In the prototype system, the state
management is separated from web services. The loosely-coupled between the web
service and the state management provides scalability. The flexibility is provided by
making service requestors choose another state management service among the other
service providers. The state information can migrate to another repository, where the
type of stateful resource can be changed from one type to another. The migration of
the state information enhances reliability and security when the repository fails or
does not work well.
Many issues still remain to be addressed. Because of the loosely-coupled between
the web service and the state management, some communication overhead is occurred. Moreover, the communication between sate management service and the sateful resource is done through a security channel. We need to study for reducing this
additional communication overhead. We need to implement many other components
for the framework, especially WS-Notification specifications. In addition, more experiments must be conducted on fault-tolerance to evaluate performance the proposed
system.

References
1. David, Booth, Hugo, Haas, Francis, McCabe, Eric, Newcomer, Michael, Champion, Chris,
Ferris, David, Orchard: Web Services Architecture – W3C Working Draft 8 August 2003.
http://www.w3.org/TR/2003/WD-ws-arch-20030808/
2. Y., Xie, Y.M., Teo: State Management Issues and Grid Services. International Conference
on Grid and Cooperative Computing. LNCS, Vol. 3251 (2004) 17-25
3. S., Tuecke, K., Czajkowski, I., Foster, J., Frey, S., Graham, C., Kesselman, P., Vanderbilt:
Open Grid Service Infrastructure (OGSI). (2002)
4. Czajkowski, K., Ferguson, D., Foster, I., Frey, J., Graham, S., Sedukhin, I., Snelling, D.,
Tuecke, S., Vambenepe, W.: The WS-Resource Framework. http://www.globus.org/wsrf/
(2004)
5. Globus Toolkit version 3. http://www.globus.org/
6. Xiang, Song, Namgeun, Jeong, Phillip, W., Hutto, Umakishore, Ramachandran, James, M.,
Rehg: State Management in Web Services. IEEE International Workshop on FTDCS’04
(2004)
7. Graham, S., Czajkwski, K., Ferguson, D., Foster, I., Frey, J., Leymann, F., Maguire, T.,
Nagaratnam, N., Nally, M., Storey, T., Sedukhin, I., Snelling, D., Tuecke, S., Vambenepe,
W., Weerawarana, S.: WS-ResourceProperties. http://www-106.ibm.com/developerworks/
library/ws-resource/ws-resourceproperties.pdf (2004)
8. Frey, J., Graham, S., Czajkowski, C., Ferguson, D., Foster, I., Leymann, F., Maguire, T.,
Nagaratnam, N., Nally, M., Storey, T., Sedukhin, I., Snelling, D., Tuecke, S., Vambenepe,
W., Weerawarana, S.: WS-ResourceLifetime. http://www-106.ibm.com/developerworks/ library/ws-resource/ws-resourcelifetime.pdf (2004)

