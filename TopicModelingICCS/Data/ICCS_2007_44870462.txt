A Machine-Learning Based Load Prediction Approach
for Distributed Service-Oriented Applications
Jun Wang, Yi Ren, Di Zheng, and Quan-Yuan Wu
School of Computer Science,
National University of Defence Technology,
Changsha, Hunan, China 410073
junwang@nudt.edu.cn

Abstract. By using middleware, we can satisfy the urgent demands of
performance, scalability and availability in current distributed service-oriented
applications. However to the complex applications, the load peak may make the
system suffer extremely high load and the response time may be decreased for
this kind of fluctuate. Therefore, to utilize the services effectively especially
when the workloads fluctuate frequently, we should make the system react to
the load fluctuate gradually and predictably. Many existing load balancing
middleware use the dampening technology to make the load to be predicative.
However, distributed systems are inherently difficult to manage and the
dampening factor cannot be treated as static and fixed. The dampening factor
should be adjusted dynamically according to different load fluctuate. So we
have proposed a new technique based on machine learning for adaptive and
flexible load prediction mechanism based on our load balancing middleware.
Keywords: Service-Oriented
Learning, Middleware.

Applications,

Load Prediction,

Machine-

1 Introduction
To service many increasing online clients those transmit a large, often busty, number
of requests and provide dependable services with high quality constantly, we must
make the distributed computing systems more scalable and dependable. Effective load
balancing mechanisms must be made use of to distribute the client workload equitably
among back-end servers to improve overall responsiveness. Load balancing
mechanisms can be provided in any or all of the following layers:
• Network-based load balancing: This type of load balancing is provided by IP
routers and domain name servers (DNS). Web sites often use network-based
load balancing at the network layer (layer 3) and the transport layer (layer 4).
• OS-based load balancing: This type of load balancing is provided by
distributed operating systems via load sharing, and process migration [1]
mechanisms.
• Middleware-based load balancing: This type of load balancing is performed in
middleware, often on a per-session or a per-request basis. The key enterprise
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 462 – 465, 2007.
© Springer-Verlag Berlin Heidelberg 2007

A Machine-Learning Based Load Prediction Approach

463

applications of the moment such as astronavigation, telecommunication, and
finance all make use of the middleware based distributed software systems to
handle complex distributed applications.
There are different realizations of load balancing middleware. For example, stateless
distributed applications usually balance the workload with the help of naming service
[2]. But this scheme of load balancing just support static non-adaptive load balancing
and can’t meet the need of complex distributed applications. For more complex
applications, the adaptive load balancing schema [3, 4, 5] is needed to take into
account the load condition dynamically and avoid override in some node. Many
existing load balancing middleware use the dampening technology to make the load
to be predicative. However, distributed systems are inherently difficult to manage and
the dampening factor cannot be treated as static and fixed. So, in this paper we design
and implement an efficient load prediction method for service-based applications.
Clients can learn the best policy by employing reinforcement based learning
technique. Reinforcement based learning is an un-supervised learning, in which
agents learn through trial and error interactions with environment.

2 Load Prediction Method for Service-Oriented Applications
2.1 Model of the Load Balancing Middleware
Our middleware provides load balancing for the service-oriented applications,
prevents bottlenecks at the application tier, balances the workload among the different
services and enables replication of the service components in a scalable way. The core
components are as follows:

Fig. 1. Components of the Load Balancing Middleware

Service Replica Repository: Instances of services need to register with the Service
Group. All the references of the groups are stored in the Service Replica Repository.
A service group may include several replicas and we can add or remove replicas to
the groups. The main purpose of the service group is to provide a view containing
simple information about the references to the locations of all replicas registered with
group. The uses need not to know where the replica is located.

464

J. Wang et al.

Service Decision Maker: This component assigns the best replica in the group to
service the request based on the algorithms configured in our load balancing policy
[6]. The service decision maker acts as a proxy between the client and the dynamic
services. It enables transparency between them without letting the client knowing
about the multiple distributed service replicas.
Load Monitor: Load monitor collects load information from every load agent within
certain time interval. The load information should be refreshed at a suitable interval
so that the information provided is not expired.
Load Agent: The purpose of load agent is to provide load information of the hosts it
resides when requested by load monitor. As different services might have replicas in
the same host, it is hard to presume the percentage of resource is being used by which
service at particular moment. Therefore, a general metric is needed to indicate the
level of available resources at the machine during particular moment.
Resource Allocator: The purpose of this component is to dynamically adjust the
resource to achieve a balance load distribution among different services. In fact, we
control the resource allocation by managing the replicas of different services. For
example, this component makes decisions on some mechanisms such as service
replication, services coordination, dynamic adjustment and requests prediction.
2.2 Machine-Learning Based Load Prediction
As figure 2 shown, the host will suffer extreme loads at time T1 and T2, and if we
computing the load basing on the numbers sampling from these two points we will
make wrong load balancing decisions. A useful method is Using control theory
technology called dampening, where the system minimizes unpredictable behavior by
reacting slowly to changes and waiting for definite trends to minimize over-control
decisions. The load will be computed in this way:
n e w _ l o a d = m u l t i p l i e r * o l d _ l o a d + (1 − m u l t i p l i e r ) * n e w _ l o a d

(1)

The parameter multiplier is the dampening factor and the value of the multiplier is
between 0 and 1.The parameter old_load represents for the former load and the
new_load represents for the new sampling load. However, distributed systems are
inherently difficult to manage and the dampening factor cannot be treated as static and
fixed. The dampening factor should be adjusted dynamically according to different
load fluctuate. Therefore, we use the machine-learning based load prediction method
where the system minimizes unpredictable behavior by reacting slowly to changes
and waiting for definite trends to minimize over-control decisions. The simple

Load

T1

T2

Fig. 2. Affection of the Peak Load

A Machine-Learning Based Load Prediction Approach

465

exponential smoothing method is based on a weighted average of current and past
observations, with most weight to the current observation and declining weights to
past observations. The formula for exponential moving average is given by equation
(2): Where 0 ≤ θ ≤ 1 is know as dynamic dampening factor, L n is the most recent
load, ϕ n stores the past history and ϕ n +1 is the predicted value of load.

ϕ n + 1 = θ L n + (1 − θ )ϕ n

(2)

We maintained two exponentially weighted moving averages with different dynamic
dampening factors. A slow moving average ( θ → 0 ) is used to produce a smooth,
stable estimate. A fast moving average ( θ → 1 ) adapts quickly to changes in work
load. The maximum of these two values are used as an account for current load on the
service provider.

3 Conclusions
To utilize the services effectively especially when the workloads fluctuate frequently,
we should make the system react to the load fluctuate gradually and predictably.
Distributed systems are inherently difficult to manage and the dampening factor
cannot be treated as static and fixed. The dampening factor should be adjusted
dynamically according to different load fluctuate. So we have proposed and
implemented a new technique based on machine learning for adaptive and flexible
load prediction mechanism based on our load balancing middleware.

Acknowledgements
This work was funded by the National Grand Fundamental Research 973 Program of
China under Grant No.2005cb321804 and the National Natural Science Foundation of
China under Grant No.60603063.

References
1. Rajkumar, B.: High Performance Cluster Computing Architecture and Systems,
ISBN7.5053-6770-6.2001
2. IONA Technologies, “Orbix 2000.” www.iona-iportal.com/suite/orbix2000.htm.
3. Othman, O'Ryan, C., Schmidt, D. C.: The Design of an Adaptive CORBA Load Balancing
Service. IEEE Distributed Systems Online(2001)
4. Othman, O., Schmidt, D. C.: Issues in the design of adaptive middleware load balancing. In:
ACM SIGPLAN, ed. Proceedings of the ACM SIGPLAN workshop on Languages,
Compilers and Tools for Embedded Systems. New York: ACM Press(2001)205-213
5. Othman, O., O’Ryan, C., Schmidt, D.C.: Strategies for CORBA middleware-based load
balancing. IEEE Distributed Systems Online(2001) http://www.computer.org/dsonline
6. Gamma, E., Helm, R., Johnson, R., Vlissides, J.: Design Patterns: Elements of Reusable
Object-Oriented Software. Reading: Addison-Wesley(2002)223-325

