Procedia Computer Science
Volume 51, 2015, Pages 2198–2206

Completion of ICCS
a sparse
GLIDER database using multi2015 International Conference On Computational Science
iterative Self-Organizing Maps (ITCOMP SOM)
1

Anastase Alexandre Charantonis1,2, Pierre Testor2, Laurent Mortier3,
Fabrizio D'Ortenzio4 and Sylvie Thiria2

Centre d'études et de recherche en informatique, Conservatoire des Arts et Métiers, 292 Rue
Saint-Martin, 75003 Paris, France
2
Laboratoire d'Océanographie et du Climat: Expérimentations et Approches Numériques,4 Place
Jussieu, 75005, Paris, France
3
Ecole Nationale Supérieure de Techniques Avancées45, 29 rue d’Ulm,F-75230 Paris cedex 05,
France
4
Laboratoire d'Océanographie de Villefranche, B.P. 8, Quai de la Darse, Villefranche-sur-Mer,
CEDEX 06238, France
Anastase-alexandre.charantonis@locean-ipsl.upmc.fr

Abstract
We present a novel approach named ITCOMP SOM that uses iterative self-organizing maps (SOM) to
progressively reconstruct missing data in a highly correlated multidimensional dataset. This method
was applied for the completion of a complex oceanographic data-set containing glider data from the
EYE of the Levantine experiment of the EGO project. ITCOMP SOM provided reconstructed
temperature and salinity profiles that are consistent with the physics of the phenomenon they sampled.
A cross-validation test was performed and validated the approach, providing a root mean square error
of providing a root mean square error of 0,042°C for the reconstruction of the temperature profiles and
0,008 PSU for the simultaneous reconstruction of the salinity profiles.
Keywords: Self-Organizing Maps, data completion, iterative method, similarity function, multi-dimensional data,
gliders, eye of the Levantine, temperature profiles, salinity profiles

Introduction
Gliders are small autonomous underwater vehicles which were developed to carry out in-situ
observations of the upper 1km of the ocean filling the gaps left by the existing observing systems. The
EGO-network (Testor, 2010) deployed twelve gliders, during the years 2009 and 2010, in order to
perform a high frequency sampling of the temperature and salinity profiles near the coasts of Cyprus.
These deployments were part of the EYE of the Levantine experiment (Lekien, 2011), and had as
objective the study of variability of the Cyprus warm core Eddy. The gliders deployed were of three
types: the Seagliders and Deep-sea Slocum gliders, diving to depths of 1000m; and the shallow
Slocum going down to 200m (Testor P., 2012). The profiles retrieved by the latter are not enough on
their own to reconstitute the form of the eddy. In this paper we propose a version that would use the
information provided by the gliders that dive to a 1000m to reconstruct the vertical distribution of
temperature and salinity profiles of the gliders diving only to 200m.
The difficulty of the problem discussed comes from having missing not at random data. There
exist other methods that attempt to resolve such problems (Ilin, 2010). We present a novel approach
Selection
under self-organizing
responsibility of the
Scientiﬁc
Programme
Committee
ICCS 2015
ITCOMP
SOM and
thatpeer-review
uses iterative
maps
(SOM)
(Teuvo,
1990) toofprogressively
named2198
c The Authors. Published by Elsevier B.V.
reconstruct the missing data.
After a brief reminder of the SOM algorithms, we will be presenting the methodology of ITCOMP
SOM, followed by a more in-depth presentation of the data and the results obtained.
doi:10.1016/j.procs.2015.05.496

2 ITCOMP SOM:
Self-organizing topological maps (SOM) are clustering methods based on neural networks. They
setPierre
into
aTestor,
reduced
number
of subsets,
classes,
which
provide
aAnastase
clustering
a learning
data
Completion
of
- Alexander
aof
sparse
GLIDER
Charantonis,
database
using
multi-iterative
Laurent
Mortier,
Self-Organizing
Fabrizio called
D’Ortenzio
Maps (ITCOMP
and Sylvie
Thiriathat
share SOM)
some common statistical characteristics. The training method consists of an EM algorithm
resembles the K-means algorithm, but presents a significant advantage by incorporating a topological
order.
Each class ࢑ is represented by its referent vector ࢘ࢋࢌ࢑ which approaches the mean value of the
data belonging to it. The topological aspect of the maps can be justified by considering the map as an
undirected graph on a two-dimensional lattice whose vertices represent the ࢔ࢉ classes. This graph
structure permits the definition of a discrete distance ࢊࡿࡻࡹ ሺ‫܋‬ሺ࢑ሻǡ ࢉሺ࢒ሻሻ between two classes ‫܋‬ሺ࢑ሻ and
‫܋‬ሺ࢒ሻ, defined as the length of the shortest path between ‫܋‬ሺ࢑ሻ and ‫܋‬ሺ࢒ሻ on the map. The nature of the
SOM training algorithm forces a topological ordering upon the map and, therefore, any neighbouring
classes ‫܋‬ሺ࢑ሻ and ‫܋‬ሺ࢒ሻ on the map (ࢊࡿࡻࡹ ሺ‫܋‬ሺ࢑ሻǡ ࢉሺ࢒ሻሻ  ൌ ૚) have referent vectors ࢘ࢋࢌ࢑ and ࢘ࢋࢌ࢒ that are
close in the Euclidean sense in the data space.
Considering a vector ࢄ that has the same dimension and nature as the data used to generate the
topological map, the class to which it belongs is determined by: ࢏࢔ࢊࢄ ൌ ࢇ࢘ࢍ࢓࢏࢔࢑‫א‬ሾ૚ǡǥǡ࢔ࢉሿ ሺࢊࡱ ሺ࢘ࢋࢌ࢑ ǡ ࢄሻ),
therefore assigning it to the class whose referent is closest to it in the Euclidean sense (with ࢊࡱ being
the Euclidian distance) . ࢄ will be represented by its class index, ࢏࢔ࢊࢄ .
If the vector ࢄ contains missing data, the classification is usually performed by calculating the
Euclidean distance over the non-null components of the observation and the corresponding
components in the referents of the map. We will denote this distance ࢊࢀࡱ ሺ࢘ࢋࢌ࢑ ǡ ࢄሻ, for truncated
Euclidian distance and will define two subsets of indexes, denoted ࢌ࢛࢒࢒࢏ and ࢓࢏࢙࢙࢏࢔ࢍ࢏ , containing,
respectively, the indexes of the non-missing and missing components of the vector ࢄ. For a given data
vector ࢄ࢏ , they respectively are:
ࢌ࢛࢒࢒࢏
࢓࢏࢙࢙࢏࢔ࢍ࢏

2.1

ൌ  ൛࢐ȁࢄ࢏࢐ ് ‫׎‬ൟ the indexes of the non-missing values in ࢄ࢏
ൌ  ൛࢐ȁࢄ࢏࢐ ൌ ‫׎‬ൟ the indexes of the missing values in ࢄ࢏

Methodology:

We chose to present in two distinct parts our methodology (ITCOMP SOM) to complete a large
multidimensional database containing a large part of missing data:
x The first part is an iterative process that trains different SOMs using an evolving part of the
dataset, completes the missing values and reiterates.
x The second part makes use of a dedicated similarity function to attribute each individual to a
specific class based on the locally-estimated covariance matrices of the variables.
The symbols and abbreviations used in this paper can be found in Table 1.
n
d
DAT
ࢄ࢏
SOM_it
࢔ࢉ̴࢏࢚
‫܋‬ሺ࢑ሻ
࢘ࢋࢌ࢑
ࢊࡿࡻࡹ ሺࢉሺ࢑ሻǡ ࢉሺ࢒ሻሻ
ࢊࡱ ሺ࢘ࢋࢌ࢑ ǡ ࢄ࢏ ሻ
ࢊࢀࡱ ሺ࢘ࢋࢌ࢑ ǡ ࢄ࢏ ሻ
n_it
It
i_࢔ࢉ
f_࢔ࢉ
DAT_it
࢓࢏࢙࢙࢏࢔ࢍ࢏

number of data vectors (indexed by i)
dimensionality of the data vectors (indexed by j)
ൌ  ൛ࢄ࢏࢐ ൟ n×d data matrix
d-dimensional data vector (i-th row of DAT)
The Self-Organizing Map at the it iteration
number of classes (indexed by k) of the SOM_it topological map
the k-th class of the SOM
the d-dimensional referent vector of the k-th class of the SOM
the discrete distance between the classes ࢉሺ࢑ሻ and ࢉሺ࢒ሻ on the SOM
the Euclidean distance between ࢘ࢋࢌ࢑ and ࢄ࢏ in the data space ܴୢ
the truncated Euclidean distance between ࢘ࢋࢌ࢑ and ࢄ࢏
number of iterations for the iterative training
iteration counter
number of classes in the initial phase of the iterative training
number of classes in the final phase of the iterative training
2199
ൌ  ൛ࢄ࢏࢐ ൟ n×d data matrix that is completed during the it-1 iteration
ൌ  ൛࢐ȁࢄ࢏࢐ ൌ ‫׎‬ൟ the indexes of the missing values in ࢄ࢏

ൌ  ൛࢐ȁࢄ࢏࢐ ് ‫׎‬ൟ the indexes of the non-missing values in ࢄ࢏
the similarity function between ࢘ࢋࢌ࢑ and ࢄ࢏
the absolute value of the local covariance of the variables around the ࢘ࢋࢌ࢑
weighting
term
for Pierre
the using
class
‫܋‬ሺ࢑ሻ
and component
࢐ when
calculating
similarity
Completion
Anastase of
- Alexander
a sparse
GLIDER
Charantonis,
database
Testor,
multi-iterative
Laurent
Mortier,
Self-Organizing
Fabrizio
D’Ortenzio
Maps
(ITCOMP
andthe
Sylvie
࢝࢑ ሺ࢐ሻ
SOM)
Thiria
function
࢚ࢎ࢘࢑ ሺ࢓ǡ ࢐ሻ
threshold function modifying the weighting term ࢝࢑ ሺ࢐ሻ
̴࢚࢘࢜ࢇ࢒࢛ࢋ
threshold value over which a covariance is considered impactful
࢙࢖̴࢚ࢎ࢘
threshold value that defines neighbourhoods in ܴୢ
ࢌ࢛࢒࢒࢏
࢙࢏࢓ሺ࢘ࢋࢌ࢑ ǡ ࢄ࢏ ሻ
ࢇ࢈࢙ࢉ࢕࢜࢑

Table 1 : Symbols and abbreviations used in the paper

2.2

The Iterative Training

We name DAT the matrix containing the data under study. DAT is a n×d matrix, with the first
dimension representing the individuals and the second one corresponding to the dimensionality of the
vectors.
We sort DAT in ascending order according to the number of missing data in each vector and
normalize each of its variables according to its variance. We define an evolving dataset (DAT_it) that
is initialized with DAT (DAT_1 = DAT). Given that the method is iterative, it will perform n_it iterations,
and the iteration counter will be noted it.
At iteration it, the iterative training can be summarized as follows:
x
x
x

Selection of the training data according to the iteration. From one iteration to the next we
progressively increase the size of the training dataset, introducing part of the data completed
during the previous iteration (DAT_it).
Training a new SOM, denoted SOM_it, while increasing the number of classes nc_it. Doing
so allows us to progressively refine the quality of the completion.
Completion of the missing data of DAT, the completed initial dataset becomes the new
DAT_it+1.

A schematic representation of this method can be seen in figure 1.

Figure 1: A schematic representation of ITCOMP SOM
Depending on the dimensionality and the availability of our data, we need to select the number of
classes
the final SOM, noted f_࢔ࢉ, as well as the number of classes we will have in the first iteration,
2200
noted i_࢔ࢉ. The value of i_࢔ࢉ is selected by iteratively training maps of different sizes on the complete
data and selecting the map that has the best Davies–Bouldin index (Davies & Bouldin, 1979), while

the f_࢔ࢉ parameter is selected in order to maintain the same average number of elements in each
class while we add new vectors to the dataset.
In the following, we present the details of the implementation of the iterative process used for the
completion
of data
in
the EYE
of thedatabase
Levantine
experiment.
results
of thisD’Ortenzio
application
are
Completion
Anastase
of
- Alexander
a sparse
GLIDER
Charantonis,
Pierre
using
Testor,
multi-iterative
LaurentThe
Mortier,
Self-Organizing
Fabrizio
Maps
(ITCOMP
and
Sylvie
presented
in
section
4.
SOM)
Thiria

2.2.1 Selecting the training data for the iteration.
The number of iterations n_it being defined, at iteration it we select the first ‫݀݊ݑ݋ݎ‬ሺ࢔ ‫כ‬

࢏࢚

ሻ vectors

࢔̴࢏࢚

from DAT_it for the training of the new SOM.

2.2.2 Training a new SOM.
The minimum and final number of classes i_nc and f_࢔ࢉ respectively, being defined, we trained a
࢏࢚
new SOM_it with nc_it= ݉ܽ‫ݔ‬ሺሺࢌ̴࢔ࢉ ‫כ‬
ሻǡ ࢏̴࢔ࢉሻ classes. The selection of a minimum number of
࢔̴࢏࢚

classes assures that we will not be generating SOMs that classify too roughly in the early stages of the
iterative process.

2.2.3 Completing the missing data.
At each iteration, we proceed to a new completion of DAT. To do so, each data vector has to be
assigned to a particular class. This assignment is performed by using a similarity function ࢌ to
compare the referent vectors of each class with the data vectors. For a given vector ࢄ࢏ and a
topological map SOM_it with nc_it classes, we apply the “Best Matching Unit” process (attributing the
vector to the class whose referent most resembles the vector) and then complete the missing
components of ࢄ࢏ .
Determine the index of the class to which ࢄ࢏ is assigned:
࢏࢔ࢊࢋ࢞ࢄ࢏ ൌ ࢇ࢘ࢍ࢓࢏࢔࢑‫א‬ሾ૚ǡǥǡ࢔ࢉ̴࢏࢚ሿ ሺࢌሺ࢘ࢋࢌ࢑ ǡ ࢄ࢏ ሻ),
Create DAT_it+1 by completing DAT using:
ࢄ࢏࢓࢏࢙࢙࢏࢔ࢍ࢏ ൌ ࢘ࢋࢌ࢏࢔ࢊࢋ࢞ࢄ ሺ࢓࢏࢙࢙࢏࢔ࢍ࢏ ሻ
࢏
If the function ࢌ we use is the truncated Euclidian distance, it is possible, even probable, that the
iterative process on its own will not be enough to properly assign a vector ࢄ࢏ to its most representative
class if that vector contains many missing values. This happens because the more missing values the
vector contains, less accurate the projection we are using to situate it in the ܴୢ space is. In
meteorology for example, we could imagine the same humidity and atmospheric pressure being
attributed to different temperature and wind intensity values. The choice of the function ࢌ is thus an
important part of ITCOMP SOM.

2.3 The Similarity Function
ITCOMP SOM makes use of a similarity function f=࢙࢏࢓ሺ࢘ࢋࢌ࢑ ǡ ࢄ࢏ ሻ that is a weighted version of the
truncated Euclidian distance (ࢊࢀࡱ ). It takes into account any local covariance in DAT to improve the
choice of the classes to which a data vector ࢄ࢏ belongs.
The purpose of this similarity function is to increase the weight of each non-missing component of
ࢄ࢏ according to its link with the missing values. The weight attributed to the non-missing components
will depend on their local covariance with the missing components.
For each class ‫܋‬ሺ࢑ሻ, we consider the local absolute covariance matrix ࢇ࢈࢙ࢉ࢕࢜࢑ that is estimated
by taking a local neighbourhood of its referent vector ref_k. The neighbourhood takes into account all
the data vector ࢄ࢏ of DAT-it that comply to: ࢊࡱ ሺ࢘ࢋࢌ࢑ ǡ ࢄ࢏ ሻ ൏ ࢙࢖̴࢚ࢎ࢘.
The threshold value ࢙࢖̴࢚ࢎ࢘ needs to be sufficiently large in order to include enough data points for
2201
each class ‫܋‬ሺ࢑ሻ to generate a reliable covariance matrix. In the EYE of the Levantine experiment, we
chose to select a value equal to twice the average distance between two referent vectors:

࢙࢖̴࢚ࢎ࢘ ൌ

ͳ
෍ ࢊࡱ ሺ࢘ࢋࢌ࢑ ǡ ࢘ࢋࢌ࢒ ሻ
݊ܿ ଶ
௞ǡ௟

This however can change on other applications, depending on the fine-tuning of the selfCompletion
Anastase
of
- Alexander
a sparse GLIDER
Charantonis,
database
Pierre
using
multi-iterative
Laurent
Mortier,
Self-Organizing
Fabrizio
D’Ortenzio
Maps (ITCOMP
Sylvie
organizing
map. In
general
we
aimed
to have
atTestor,
least
30 individuals
when
computing
theand
covariance
SOM)
Thiria
matrix.
The computation of the similarity between a data vector ࢄ࢏ and a referent vector can summarized
as follows:
࢙࢏࢓ሺ࢘ࢋࢌ࢑ ǡ ࢄ࢏ ሻ ൌ ඨ ෍ ቀ൫࢘ࢋࢌ࢑ ሺ࢐ሻ െ ࢄ࢏࢐ ൯ ‫ ࢑࢝ כ‬ሺ࢐ሻቁ

૛

࢐‫ ࢏࢒࢒࢛ࢌא‬

With
࢝࢑ ሺ࢐ሻ ൌ ͳ ൅ 

෍

࢚ࢎ࢘࢑ ሺ࢓ǡ ࢐ሻ

࢓‫ ࢏ࢍ࢔࢏࢙࢙࢏࢓א‬

Where
ࢇ࢈࢙ࢉ࢕࢜࢑ ሺ‫ܕ‬ǡ ‫ܒ‬ሻ ൏ ̴࢚࢘࢜ࢇ࢒࢛ࢋ
ࢇ࢈࢙ࢉ࢕࢜࢑ ሺ‫ܕ‬ǡ ‫ܒ‬ሻǡ

The threshold values ̴࢚࢘࢜ࢇ࢒࢛ࢋ is also a sensitive parameter that has to be defined depending on
the nature of the problem investigated. It corresponds to the threshold value over which a covariance
is considered impactful. In the completion EYE of the Levantine data-set we selected the ̴࢚࢘࢜ࢇ࢒࢛ࢋ
such as:
̴࢚࢘࢜ࢇ࢒࢛ࢋ ൌ ૙ǡ ૢ ‫ ࢑࢞ࢇ࢓ כ‬ሺࢇ࢈࢙ࢉ࢕࢜࢑ ሺ࢓ǡ ࢑ሻ
The this parameter was selected by iteratively applying the algorithm with different threshold
values, keeping the one that gave us the best results over a validation set.
A simplified example of this, with a vector ࢄ࢏ of dimension five can be seen in figure 2.
Ͳǡ
࢚ࢎ࢘࢑ ሺ࢓ǡ ࢐ሻ ൌ  ൜

Figure 2: A representation of a vector ࢄ࢏ with five components, two of them missing, and the
corresponding formulations related to the similarity function.

3 The Eye of the Levantine glider dataset
The dataset used in this experiment was the output of the Eye of the Levantine (EYE) EGO glider
experiment off the large of Cyprus in 2009. The gliders deployed were of three types: the Seagliders
and deep-sea Slocum gliders, diving to depths of 1000m; and the shallow Slocum going down to
200m. The horizontal resolution of the shallow Slocim gliders is much higher, since in the time the two
other classes of gliders perform one dive they can perform five.
During this experiment there were six simultaneous gliders deployments in the zone of study
(Atalanta,
2202Bonpland, Eudoxus, Hannon, Pytheas and Trieste_1), as seen in table 2. The salinity and
temperature profiles retrieved have been interpolated between every meter between their topmost
value and their deepest value. The DAT matrix is therefore of dimension 3114 x 2000. By selecting the

points of intersection of the gliders during this period and comparing their values we calculated the
offsets between each glider and rescaled all data to be consistent with the data of the Atalanta glider.
Maximum
Number
Completion
Anastase of
- Alexander
aStart
sparseDate
GLIDER
Charantonis,
database
using
Testor,
multi-iterative
Laurent
Self-Organizing
Fabrizio
D’Ortenzio
Maps (ITCOMP
and
Sylvie of
Name
EndPierre
Date
TypeMortier,
Depth
Profiles
SOM)
Thiria
Atalanta
2009-11-23
2010-04-23
SG
1000m
1090
Bonpland
2009-11-12
2010-01-09
dSL
1000m
465
Eudoxus
2009-11-12
2010-01-09
dSL
1000m
455
Hannon
2009-11-12
2009-12-18
dSL
1000m
69
Pytheas
2009-11-12
2009-12-05
cSL
200m
130
Trieste_1
2009-11-12
2010-03-17
cSL
200m
905
Total number of profiles:
3114
Table 2: Properties of the glider deployments

Figure 3: Incomplete temperature profiles of the six gliders. The colorbar is in °C. The horizontal axis
corresponds to one individual immersion of a glider, while the vertical axis corresponds to the depth
(meters).

Figure 4: Completed temperature profiles of the six gliders. The colorbar is in °C. The horizontal axis
corresponds to one individual immersion of a glider, while the vertical axis corresponds to the depth
2203
(meters).
In figure 3 and figure 6, respectively, we can see the vertical temperature profiles of the six gliders,
with the missing values seen as deep blue. Roughly a third of the profiles (1035 out of 3114) only
contain data up to 200 meters.

The highly correlated nature of the data can be seen on the correlogram in figure 5. We can see
that very big swaths of temperature and salinity at specific depths are very highly correlated.
Completion
Anastase of
- Alexander
a sparse GLIDER
Charantonis,
database
Pierre
using
Testor,
multi-iterative
Laurent Mortier,
Self-Organizing
Fabrizio D’Ortenzio
Maps (ITCOMP
and Sylvie
SOM)
Thiria

Figure 5: Correlogram of the different parameters. The first 1000 elements correspond to the temperature
(°C) on the vertical column of water from the surface to the depth of 1000 meters, while the second
thousand corresponds to the salinity (PSU).

4 Completion of the Temperature and Salinity profiles
The results presented below were obtained by applying ITCOMP SOM on the EYE of the
Levantine experiment data. The maximum size of the SOM was f_࢔ࢉ =500, we performed n_it =20
iterations, with a minimum of i_nc =50 classes during the first iteration. The profiles of salinity and
temperature were complete simultaneously. The results of the completion can be seen in figures 4 and
7. ITCOMP SOM has completed the profiles in a way that respects the patterns observed in the
region, managing to discern the eye of the warm core Eddy throughout the changing seasons
whenever there were missing data presented.

2204
Figure 6: Incomplete salinity profiles of the six gliders. The colorbar is in PSU. The horizontal axis
corresponds to one individual immersion of a glider, while the vertical axis corresponds to the depth
(meters).

Completion
Anastase of
- Alexander
a sparse GLIDER
Charantonis,
database
Pierre
using
Testor,
multi-iterative
Laurent Mortier,
Self-Organizing
Fabrizio D’Ortenzio
Maps (ITCOMP
and Sylvie
SOM)
Thiria

Figure 7: Completed salinity profiles of the six gliders. The colorbar is in PSU. The horizontal axis
corresponds to one individual immersion of a glider, while the vertical axis corresponds to the depth
(meters).

5 Validation test
In order to estimate the errors we might have introduced by applying ITCOMP SOM on this
dataset, we performed a cross-validation test. This test consisted of repeatedly masking the deeper
800 meters of 10% of the profiles going down to 1000 meters, then applying ITCOMP SOM and
calculating the RMSE (root mean square error) of the reconstructions. The results can be seen in table
3.
Temperature
Salinity
RMSE
RMSE
RMSE
RMSE
Depth
Depth
Depth
Depth
(°C)
(°C)
(PSU)
(PSU)
200m600m200m600m0,046
0,027
0,009
0,006
240m
640m
240m
640m
240m640m240m640m0,065
0,021
0,012
0,005
280m
680m
280m
680m
280m680m280m680m0,083
0,017
0,015
0,004
320m
720m
320m
720m
320m720m320m720m0,093
0,014
0,017
0,003
360m
760m
360m
760m
360m760m360m760m0,097
0,012
0,018
0,003
400m
800m
400m
800m
400m800m400m800m0,095
0,010
0,018
0,003
440m
840m
440m
840m
440m840m440m840m0,083
0,009
0,016
0,002
480m
880m
480m
880m
480m880m480m880m0,068
0,008
0,013
0,002
520m
920m
520m
920m
520m920m520m920m0,051
0,007
0,011
0,002
560m
960m
560m
960m
560m960m560m960m0,036
0,006
0,008
0,002
600m
1000m
600m
1000m
Total RMSE (°C)
0,042
Total RMSE (PSU)
0,008
2205
Table 3: Root mean square error calculated over 40 meters sections of the vertical profiles
reconstructed during the validation test.

It is important to note that part of the error introduced is due to replacing dynamical values with the
fixed values of the referents obtained from the Self Organizing Maps. We notice that the error
introduced however is not significant and is comparable to the difference in values between different
gliders.
Completion
Anastase of
- Alexander
a sparse GLIDER
Charantonis,
database
Pierre
using
Testor,
multi-iterative
Laurent Mortier,
Self-Organizing
Fabrizio D’Ortenzio
Maps (ITCOMP
and Sylvie
SOM)

Thiria

6 Discussion and Conclusions
In this paper, we have introduced ITCOMP SOM, which is a completion method that makes use of
the local covariance between the different parameters of a multi-dimensional data-set. ITCOMP SOM
was applied to the completion of the EYE of the Levantine glider data set. This data-set contained a
total of 33% of glider profiles containing missing data, with a systematic omission of the last 800
meters of a 1000 meters profile. The reconstructed data-set is consistent with the physics of the
phenomenon sampled by the gliders (the warm-core Eddie in the large of Cyprus). A cross-validation
test was performed and validated the approach, providing a root mean square error of 0,042°C for the
reconstruction of the temperature profiles and 0,008 PSU for the simultaneous reconstruction of the
salinity profiles. ITCOMP SOM can therefore be applied in similar future experiments to increase the
information obtained while sampling a phenomenon while using samplers of different resolutions. It
has also been applied in another field of study to complete a less correlated data set (Parard, 2014.)
used to obtain the sea-surface pCO2 in the Baltic Sea.

Acknowledgments
The training of the SOMs discussed further in this manuscript was performed using the
som_toolbox for matlab (SOM toolbox). This toolbox is well documented and provides a variety of
useful functions.

References:
(s.d.). SOM toolbox: http://www.cis.hut.fi/somtoolbox/
Davies, D. L., & Bouldin, D. W. (1979). A Cluster Separation Measure. IEEE Transactions on
Pattern Analysis and Machine Intelligence. doi:10.1109/TPAMI.1979.4766909, (pp.
PAMI-1 (2): 224–227.).
Ilin, A. a. (2010). Practical approaches to principal component analysis in the presence of
missing values. The Journal of Machine Learning Research 11, 1957-2000.
Lekien, F. (2011). Automated cooperative control and adaptive navigation during the Eye of
Levantine EGO glider experiment. 5th EGO meeting. Gran Canaria Spain.
Parard, G. C. (2014.). Remote sensing algorithm for sea surface CO2 in the Baltic Sea.
Biogeosciences Discuss., 11, doi:10.5194/bgd-11-12255-2014, 12255-12294.
Testor P. (2012). What are underwater gliders? Récupéré sur EGO-network.org:
http://www.ego-network.org/dokuwiki/doku.php?id=public:whatisaglider
Testor, P. M. (2010). Gliders as a component of future observing systems. Proceedings of
OceanObs¿09: Sustained Ocean Observations and Information for Society (Vol. 2).
Venice, Italy: ESA Publication WPP-306.
2206

Teuvo, K. (1990). The self-organizing map. Proc. IEEE, 78(9).

