A-GWL: Abstract Grid Workﬂow Language
Thomas Fahringer1 , Sabri Pllana2 , and Alex Villazon1
1

Institute for Computer Science, University of Innsbruck
Technikerstraße 25/7, 6020 Innsbruck, Austria
{Thomas.Fahringer,Alex.Villazon}@uibk.ac.at
2
Institute for Software Science, University of Vienna
Liechtensteinstraße 22, 1090 Vienna, Austria
pllana@par.univie.ac.at

Abstract. Grid workﬂow applications are emerging as one of the most
interesting application classes for the Grid. In this paper we present AGWL, a novel Grid workﬂow language to describe the workﬂow of Grid
applications at a high level of abstraction. A-GWL has been designed to
allow the user to concentrate on describing scientiﬁc Grid applications.
The user is shielded from details of the underlying Grid infrastructure. AGWL is XML-based which deﬁnes a graph of activities that refers to computational tasks or user interactions. Activities are connected by controland data-ﬂow links. We have deﬁned A-GWL to support the user in orchestrating Grid workﬂow applications through a rich set of constructs
including sequence of activities, sub-activities, control-ﬂow mechanisms
(sequential ﬂow, exclusive choice, and sequential loops), data-ﬂow mechanisms (input/output ports), and data repositories. Moreover, our work
diﬀers from most existing Grid workﬂow languages by advanced workﬂow constructs such as parallel execution of activities with pre- and postconditions, parallel loops, event-based synchronization mechanisms, and
property-based selection of activities. In addition, the user can specify
high-level constraints and properties for activities and data-ﬂow links.

1

Introduction

In the past years extensive experience has been gained with single site applications and parameter studies for the Grid. For some time, Grid workﬂow applications are emerging as an important new alternative to develop truly distributed
applications for the Grid. Workﬂow Grid applications can be seen as a collection of activities (mostly computational tasks) that are processed in some order.
Usually both control- and data-ﬂow relationships are shown within a workﬂow.
Although workﬂow applications have been extensively studied in areas such as
business process modeling [12,5] and web services (BPEL4WS [2], XLANG [10],
WSFL [7], SWFL [4]), this programming model is relatively new in the Grid
computing area.
The work described in this paper is supported in part by the Austrian Science Fund
as part of Aurora Project under contract SFBF1104.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 42–49, 2004.
c Springer-Verlag Berlin Heidelberg 2004

A-GWL: Abstract Grid Workﬂow Language

43

Low-level XML-based workﬂow languages, like Grid Service Flow Language
(GSFL) [6] and Grid Workﬂow [3], have been proposed to describe Grid workﬂow
applications. However, these languages are missing some important control ﬂow
constructs such as branches, loops, split and join.
In the GridPhyN Project [1], Grid workﬂow applications are constructed by
using partial/full abstract descriptions of “components”, which are executable
programs that can be located on several resources. Their abstract workﬂow is limited to acyclic graphs. Moreover, a reduced data-ﬂow model (no customization is
allowed) is supported, and there is no advanced parallel execution of components.
In the GridLab Triana Project [11], workﬂows are experiment-based: Each
unit of work is executed for a speciﬁc experiment. A workﬂow (task graph) deﬁnes
the order in which experiments are executed. Simple control-ﬂow constructs
can be used to deﬁne parallel processing, conditional execution (if, switch) and
iterations (simple sequential loops and while).
In this paper we describe the Abstract Grid Workﬂow Language (A-GWL)
which allows the user to compose scientiﬁc workﬂow applications in an intuitive
way. A-GWL is an XML-based language for describing Grid workﬂow applications at a high level of abstraction without dealing with implementation details.
A-GWL does not consider the implementation of activities, how input data is
delivered to activities, how activities are invoked or terminated, etc. A-GWL
has been carefully crafted to include the most essential workﬂow constructs including activities, sequence of activities, sub-activities, control-ﬂow mechanisms,
data-ﬂow mechanisms, and data repositories. Moreover, we introduce advanced
workﬂow constructs such as parallel activities, parallel loops with pre- and postconditions, synchronization mechanism, and event based selection of activities.
We support advanced data-ﬂow constructs such as direct communication and
broadcast communication. In addition, the user can specify high-level constraints
on activities and on data-ﬂow in order to support the underlying workﬂow enactment machine to optimize the execution of workﬂow applications.
The paper is organized as follows. Section 2 depicts the workﬂow application
development process, from the abstract and concrete level to the execution of the
workﬂow application (composition, reiﬁcation and execution). Section 3 introduces the basic concepts of A-GWL as well as advanced constructs for controland data-ﬂow. Finally, Section 4 concludes the paper.

2

Overview

In this section we give an overview of our Grid workﬂow application development
process from abstract representation, to the actual execution on the Grid.
Figure 1.a depicts the complete process of developing a Grid workﬂow application. Figure 1.b shows the ﬂow of three fundamental activities Composition,
Reiﬁcation and Execution. The dashed lines indicate the iterative process of
workﬂow application development.
Composition. The user composes the Grid workﬂow by using the Uniﬁed
Modeling Language (UML) [8]. Alternatively, a High-level Textual Representa-

T. Fahringer, S. Pllana, and A. Villazon

UML

HTR

Composition

44

Grid
Concrete

(a)

Execution

C-GWL

Reification

A-GWL
Abstract

Composition

Reification

Execution

(b)

Fig. 1. The development of Grid workﬂow applications. Acronyms: UML - Uniﬁed
Modeling Language, HTR - High-level Textual Representation, A-GWL - Abstract
Grid Workﬂow Language, C-GWL - Concrete Grid Workﬂow Language.

tion (HTR) may be used for the workﬂow composition. Our tool Teuta [9] supports the UML based workﬂow composition, and the automatic conversion to Abstract Grid Workﬂow Language (A-GWL). A-GWL is an XML based language
for describing the Grid workﬂow at a high level of abstraction. At this level activities correspond mostly to computational entities and the speciﬁcation of its input
and output data. There is no notion of how input data is actually delivered to activities, or how activities are implemented, invoked and terminated. A-GWL contains all the information speciﬁed by the user during the workﬂow composition.
Reiﬁcation. The software infrastructure transforms A-GWL to the Concrete
Grid Workﬂow Language (C-GWL). C-GWL contains the information speciﬁed
by the user and the additional information provided by the software infrastructure (i.e. the actual mapping to Grid resources), which is needed for the execution of the workﬂow. It describes the realization of A-GWL by specifying how
activities are actually implemented (e.g. Grid services), how they are deployed,
invoked, and terminated. C-GWL also describes how data is transferred and in
what form. C-GWL is an XML based language as well. Currently, we are in the
process of the development of speciﬁcation for C-GWL.
Execution. C-GWL is interpreted by the underlying workﬂow enactment machine to construct and execute the full Grid workﬂow application.

3

A-GWL Constructs

In A-GWL, an activity is a generic unit of work. At this level, it is not seen how
the activity is implemented at the concrete level. An activity may be mapped to
Grid services, software components or web services under C-GWL. A workﬂow
instance is the mapping of an A-GWL workﬂow to a C-GWL workﬂow that is
actually executed on the Grid. Diﬀerent workﬂow instances can run concurrently.
The user can specify constraints that are used to tune the execution of the

A-GWL: Abstract Grid Workﬂow Language

45

workﬂow application. An activity can be a basic computation, a sequence of
activities, or a composed sub-activity.
The composition of the application is done by specifying both control-ﬂow
and data-ﬂow between activities. A-GWL supports basic control-ﬂow (sequential ﬂow, exclusive choice and sequential loops) and advanced control-ﬂow constructs such as parallel execution of activities, parallel loops with pre- and postsynchronizations and selection of activities.
Basic data-ﬂow is speciﬁed by connecting input and output ports between activities. The user can associate constraints with data-ﬂow, which will be mapped,
e.g., to concrete mechanisms that utilise secure communication or advanced QoS
for data-transfer. In addition to basic data-ﬂow between activities, A-GWL supports advanced data-ﬂow between activities and repositories. In the following,
we describe the most essential A-GWL elements in more detail.
3.1

Basic Elements

ACTIVITY: An activity in A-GWL is presented as a black-box with input/output ports, constraints, and properties. Input and output ports are used to specify
the data-ﬂow. Control-ﬂow is made through explicit links among activities and
by using diﬀerent control-ﬂow constructs (e.g. sequences, loops, etc).
The user speciﬁes data-ﬂow by connecting input and output ports among
activities which may not necessarily be directly connected with control ﬂow links.
Additional information about activities can be provided through constraints
and properties. Constraints provide additional information that should be honored by the underlying workﬂow enactment engine when executing the Grid
workﬂow application. Examples for constraints are as follows: execute activity
on Grid machines running under a speciﬁc operating system, with a minimum
amount of free dynamic memory, with more than some pre-deﬁned idle time
value, deployment requirements, etc. Properties describe information that can
be useful for the workﬂow enactment engine for instance to schedule applications. Performance information (estimated execution times or ﬂoating point operations) is frequently indicated via properties.
The XML representation1 for the ACTIVITY construct is given as follows,
<activity name=”name”>
<input name=”name”(repository=”name” query=expression)? />∗
<output name=”name” (repository=”name”)? /> ∗
(<constraints> constraints+ </constraints>)?
(<properties> properties+ </properties>)?
<control-in name=”name”/> ∗
<control-out name=”name”/> ∗
</activity>
Every activity, input, output, control-in and control-out have a unique name
in a workﬂow application. Input and output ports can be used to specify dataﬂow between activities and/or repositories (see Section 3.4 and 3.5).
1

We use the notation convention from [2] for the informal syntax of XML grammar.

46

T. Fahringer, S. Pllana, and A. Villazon

A-GWL supports the notion of hierarchical decomposition of activities. An
activity containing other activities (sub-workﬂow), is also an activity. In that
case, all the input ports of the incoming activities of the sub-workﬂow are
mapped to the input ports of the composed activity, and the output ports of all
the outgoing activities are mapped to the output ports of the composed activity.
Analogously (re)connections are handled for the control-ﬂow.
3.2

Basic Control-Flow

A-GWL supports basic control-ﬂow among activities as in conventional programming languages. The control-ﬂow constructs are: the standard sequential
ﬂow (SEQUENCE), exclusive choice (SWITCH, IF-THEN-ELSE), and sequential loops (FOR, WHILE and DO-UNTIL). A-GWL can be used to specify multiple exits from loops. The BREAK construct can be used to exit the execution of
a loop construct. We also support an EXIT construct to terminate the execution
of the entire workﬂow instance.
3.3

Advanced Control-Flow

In addition to basic control-ﬂow constructs that are commonly found in workﬂow
languages, A-GWL supports advanced control-ﬂow elements that are highly useful for scientiﬁc Grid workﬂow applications. These constructs provide the user
with enough abstraction to compose advanced and complex Grid workﬂow application and specify concurrency in a very natural way (parallel execution of
activities, parallel loops).
PARALLEL: The PARALLEL construct is used to execute activities concurrently. The XML representation of the PARALLEL construct is as follows,
<parallel syncCondition=Identif ierSet>
(<fork preCondition=expression > activity </fork>)+
(<default> activity </default>) ?
</parallel>
Before executing the activities speciﬁed in <fork>, the preCondition is evaluated for all the activities. Only those that evaluate to true, are executed concurrently. If no preCondition is speciﬁed, all the activities are executed in parallel.
The user can also specify a synchronizing post-condition (syncCondition) in order to wait for speciﬁc activities at the end of the PARALLEL construct, and
then continue the control-ﬂow, e.g. this feature can be used to select the fastest
activity. Other examples of post-conditions include ”wait for all activities to
ﬁnish”, ”wait for one”, and so on.
If no syncCondition is speciﬁed, the PARALLEL construct will wait for all
activities to be ﬁnished. By default, the same input is passed to each parallel
activity. However, diﬀerent input sources can also be speciﬁed, e.g. from other
activities or from repositories (see Section 3.5 for advanced data-ﬂow).
Finally, the optional <default> activity inside the PARALLEL construct
is used to specify an activity that is executed if all the pre-conditions of all
activities of a parallel construct evaluate to false.

A-GWL: Abstract Grid Workﬂow Language

47

PARALLEL-FOR: The PARALLEL-FOR construct can be used to specify
parallel for-loops. The XML representation for PARALLEL-FOR construct is,
<parallel-for index=”i..j”>
<body> activity </body>
<gathering> activity </gathering>
</parallel-for>
A PARALLEL-FOR consists of two parts: body and gathering. The body
describes the activities of a loop. A PARALLEL-FOR deﬁnes that each of its
iterations can be executed in parallel. It does not specify any parallelism within
a loop iteration. Parallelism within a loop iteration can be achieved through the
parallel construct. Each activity inside of a parallel-for loop will receive the
loop index as an implicit input value. If there is a need for other input values
they need to be explicitly deﬁned within the body for each activity. Once all
concurrent running activities have ﬁnished, the gathering part will be executed.
Gathering is a special activity provided by the user that utilises the output of
all the concurrent activities, and potentially produces some combined output.
The PARALLEL-FOR construct may be used to model parameter studies on
the Grid. The index can be used to access diﬀerent input data for all concurrent
running activities. In the gathering phase, all results can be e.g. visualised or
combined to create a ﬁnal result of the parameter study.
SELECT: A-GWL introduces the SELECT construct which selects one activity from a set of activities based on their properties and a speciﬁc criteria. Activity properties may deﬁne, for instance, information about performance
characteristics, quality of service parameters, etc. The selection criteria is an
expression deﬁned over properties to determine minimum, maximum, average,
threshold values, etc. The XML representation for the SELECT construct is:
<select property=”aP roperty” criteria=”aCriteria”>
activity+
</select>
The SELECT contruct is frequently used to determine an activity with the
longest or shortest predicted execution time.

3.4

Basic Data-Flow

As described in Section 3.1, the input and output ports of activities are used
to model basic data-ﬂow. If the activity refers by name to the output port
of another activity, a data-ﬂow link is established. Data-ﬂow can be expressed
among arbitrary activities not necessarily connected by any control ﬂow link at
all. For example, a data-ﬂow link between activities A and B is simply established
by deﬁning the output of A as <output name="oA">, and the input of B as
<input name="oA">. If more than one activity declares oA as a desired input,
then the output will be sent to all those that subscribed to it. This can be seen
as some kind of simple notiﬁcation or broadcasting mechanism.

48

3.5

T. Fahringer, S. Pllana, and A. Villazon

Advanced Data-Flow

REPOSITORY: In addition to the basic data-ﬂow among activities, A-GWL
supports data-ﬂow between activities and special entities called repositories,
which are abstractions for data containers. They are used to model, for instance,
saving intermediate results or querying data resources without bothering about
how a repository is actually implemented (ﬁle servers, databases, etc.).
A repository is not an activity. It has a unique name. The insertion and retrieval of information is made by using the repository name without specifying
any explicit input/output ports, i.e. data-ﬂow between activities and repositories is speciﬁed by using the input/output ports of activities and the name
of the repository. If an activity should store its output in a repository, then
it should specify the name of the repository and attribute of the <output>
tag (see Section 3.1). For instance, an activity A that wants to store its output (named oA) in a repository R, must simply deﬁne the following output:
<output name="oA" repository="R"/>.
Enhanced Data-Flow: In addition to basic data-ﬂow among activities, AGWL extends the basic data-ﬂow links with optional user-deﬁned constraints
and properties which can be used by the underlying workﬂow enactment engine
to tune the data-transfer mechanism and behavior. Constraints again imply requirements that should be fulﬁlled by the enactment machine whereas properties
is simply extra information. The user may have experience about the kind of output and input that is required by the activities. He thus may deﬁne constraints
such as “store locally”, “use high-speed network”, “use-cache”, “use-replica”,
“secure transfer”, etc. by specifying speciﬁc mnemonics. Input and output data
types, estimated data volumes, etc. can be described through properties.
The extension for the speciﬁcation of constraints and properties are associated with the input and output ports of activities (here we show only the
output port). The XML representation is,
<output name=”name” (repository=”name”) ? >
(<constraints> constraints+ </constraints>) ?
(<properties> properties+ </properties>) ?
</output>

3.6

Synchronization with Events

A-GWL supports synchronization of activities based on events. An illustrative
example is the A-GWL construct FIRST.
FIRST: This construct selects one activity from a set of activities based
on the occurence of a speciﬁc event. Every activity Ai in a set of activities
{A1 , .., AN } is associated with an event ei in a set of events {e1 , .., eN }. FIRST
construct waits for one of the events from the set of events to occure. The ﬁrst
event that occures determines which activity is selected for execution. The XML
representation for the FIRST construct is,

A-GWL: Abstract Grid Workﬂow Language

49

<first>
(<event id=”eventId”>
activity
</event>) +
</first>

4

Conclusions and Future Work

In this paper we have described the abstract Grid workﬂow language (A-GWL)
to simplify the speciﬁcation of Grid workﬂow applications at a high level of abstraction without being distracted by low level details (e.g. how to start and
stop tasks, how to transfer input and output data, what communication protocol to use, etc.). A-GWL is XML-based and has been carefully crafted to
cover the most essential workﬂow constructs including sequence of activities,
sub-activities, control-ﬂow/data-ﬂow/event mechanisms, and data repositories.
We have developed a UML interface to A-GWL called Teuta [9], in order
to graphically orchestrate Grid workﬂow applications. We are currently in the
process to develop a Grid workﬂow enactment engine to execute Grid workﬂow
applications based on A-GWL.

References
1. GriPhyN: Grid Physics Network Project. www.griphyn.org.
2. T. Andrews, F. Curbera, H. Dholakia, Y. Goland, J. Klein, F. Leymann, K. Liu,
D. Roller, D. Smith, S. Thatte, I. Trickovic, and S. Weerawarana. Business Process
Execution Language for Web Services. Version 1.1, BEA, IBM, Microsoft, SAP,
and Siebel, May 2003.
3. H. Bivens. Grid Workﬂow. Sandia National Laboratories,
http://vir.sandia.gov/∼hpbiven/, April 2001.
4. Y. Huang. SWFL: Service Workﬂow Language. Technical report, Welsh e-Science
Centre-Cadiﬀ University, 2003. http://www.wesc.ac.uk/projects/swﬂ/.
5. Business Process Management Initiative. Business Process Modelling Language.
www.bpmi.org/bmpi-downloads/BPML-SPEC-1.0.zip, June 2002.
6. S. Krishnan, P. Wagstrom, and G. Laszewski. GSFL : A Workﬂow Framework
for Grid Services. Preprint ANL/MCS-P980-0802, Argonne National Laboratory,
August 2002.
7. F. Leymann. Web Services Flow Language (WSFL 1.0). Technical report, IBM
Software Group, May 2001.
8. OMG. Uniﬁed Modeling Language Speciﬁcation.
http://www.omg.org, March 2003.
9. S. Pllana, T. Fahringer, J. Testori, S. Benkner, and I. Brandic. Towards an UML
Based Graphical Representation of Grid Workﬂow Applications. In The 2nd European Across Grids Conference, Nicosia, Cyprus, January 2004. Springer-Verlag.
10. S. Thatte. XLANG: Web services for Business Process Design. Technical report,
Microsoft Corporation, 2001.
11. Cadiﬀ University. The Triana Project. http://trianacode.org/triana/.
12. The Workﬂow Management Coalition. http://www.wfmc.org/.

