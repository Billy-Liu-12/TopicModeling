Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2066 – 2075

International Conference on Computational Science, ICCS 2013

Task and Time Aware Community Detection
in Dynamically Evolving Social Networks
Tobias Hecking*, Tilman Göhnert, Sam Zeini, Ulrich Hoppe
University of Duisburg-Essen, Lotharstr. 63/65, 47048 Duisburg, Germany

Abstract
The temporal analysis of the community structure in dynamically evolving networks requires that the nodes and
connections between them be sampled into a time series of successive networks by shifting capturing intervals of typically
equal width in time. The size of such time windows affects the outcome of community detection in certain ways possibly
depending also on the detection method. In this paper we propose a systematic approach to identify time window sizes so
that community detection methods produce meaningful results. For that purpose we investigate several simple indicators,
which can help to sample an evolving network depending on the analysis task and the community detection method.
© 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and
peerpeer-review
review under
responsibility
of the
of the
International
Conference
on Computational
and/or
under
responsibility
of organizers
the organizers
of 2013
the 2013
International
Conference
on Computational
Science
Science
Keywords: Social Network Analysis; Community Detection; Dynamic Networks; Complex Networks

1. Introduction
From an SNA perspective, the shift from classical network survey techniques to automated data capturing from
network sources and real time community analysis has opened new opportunities but has also raised new
methodological issues. One of these issues is the adequate and explicit handling of time. On the one hand,
communication data from net-worked communities come with time stamps as an explicit attribute. Indeed, we
find numerous studies of the dynamics of networks in the sense of evolution over time), yet the effect of the
time span of data aggregation and measurement is usually not explicitly analyzed.
We came across the problem of window sizes in the context of studying positional role models to identify
potential innovators in productive networked com-munities. While using the Clique Percolation Method (CPM)

* Corresponding author
Email addresses: {hecking, goehnert, zeini, hoppe}@collide.info

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.376

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

2067

[1] to identify overlapping members between clusters as potential (innovation) brokers it appeared that
selecting different sizes of time slices for the observations from mailing lists and software archive log files
would lead to considerably different clusters. For instance, selecting a time slice of one or two years for a very
active source code repository will lead to one big clique including practically all members of the network while
selecting time slices in the length of days in highly specialized developer mailing lists may only render very
sparse and arbitrary connections. From this point we developed first approaches to identify the optimal time
slice sizes [2].
characterize the dependency of structural detail from the time window size. Depending on the nature of the
respective community, its internal rhythm and interaction cycles, there are different inherent time scales. While
extending the approach to other methods (see section 3) we also observed the effect, that the community
inherent time based on the frequency of action also varies within communities in different phases. We assume
that this effect is strongly correlated with events like deadlines and milestones (e.g. version release of a
software product). In this paper we want to extend our approach to different methods (modularity based as well
as methods which allow overlaps) and also discuss ideas of how effects caused by events can be incorporated in
our approach, since such events can accelerate or slow down action frequency in communities.
2. Related Work
This work follows our initial work on the problem of finding adequate time widow sizes for subcommunity
detection in the dynamic interaction networks of open source software developer communities [2]. Furthermore
there is a considerable body of research regarding the dynamics of networks according to evolution and growth.
Subcommunities play an important role in this evolution [3] and consequently the formation of those subgroups
is also another line of research [4]. In her recent Ph.D. thesis, Falkowski [5] has developed and applied
clustering techniques to detect communities in social networks and to determine the evolution of these
structures over time and gives a good overview on the general literature on dynamic networks but does not take
the effect of variation of the size of time slices into account. Also the fact that the group structures as perceived
by the actors in a community and group structures inferred from network data may differ and therefore the size
of time slices has to be considered as an influence factor had already been mentioned once in the early 1980s
[6]. However, this problem has not been addressed by community researchers later. We assume that for
ore important to determine a time window size that is
appropriate for observing the group dynamics, especially if network data are compared to cognitive selfperceptions. On platforms like Facebook and LinkedIn it is not unusual for one individual member to have
declared friendship relations with more than 500 other members although this number renders the strength or
[7]).
significance of these single ties highly quest
Budka et. al. address the issue of finding out best fitting window lengths in order to increase the accuracy of
link prediction tasks [8]. The problem in also known in the field of network text analysis concerning the right
size for window lengths over text fragments to determine the co-occurrence between concepts [9]. Palla et al.
[10] formulate an extension on CPM by referring to size of communities and their age as heuristic. Finally
Greene et al. [11] develop a model for tracking communities in dynamic social networks based on events. The
survey paper by Fortunato [12] contains a good overview (p. 66ff) on the analysis of dynamic communities.
3. Community Detection Methods under Investigation
3.1. Clique Percolation Method
The clique percolation method (CPM) [1] identifies overlapping subcommunities based on the notion of a kclique. In [1] a k-clique is defined as a complete subgraph of a network of size k. A community in the sense of

2068

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

-cliques that can be reached from each other through a series of adjacent
. Two k-cliques are adjacent if they share kkthe k-clique construct that percolates through a graph over the adjacent k-cliques with only one node moving at
a time. This method produces rather small overlaps between the subcommunities. Consequently CPM can be
used to identify information brokers or mediators between overlapping groups [13],[14].
3.2. Edge Betweenness Communities
Another well-known community detection method proposed by Newman and Girvan [15] is based on
betweenness centrality of edges. Thus in this paper the method is referred as Edge Betweenness Communities
(EBC). This method aims at finding dense connected subcommunities that are maximal separated in the sense
that the more links occur between nodes of the same cluster than links between different clusters. The method
performs a top down hierarchical clustering of nodes. This is archived by the successive removal of edges with
the highest betweenness centrality. After several steps of edge betweenness removal and recalculation of the
edge betweenness centrality the network splits up in more and more components. The result can be derived by
choosing the particular clustering at the level where the modularity i.e. the separateness of the subcommunities
reaches its maximum.
3.3. Link Communities
Similar to CPM, the Link Communities (LC) method [16] also detects overlapping subgroups. The
difference is, however, in the interpretation of overlaps. The notion of a community is completely different
from other methods. Groups are defined as social dimensions or contexts (e.g. common interest, friendships,
definition as parts of networks
with more internal as external links. In contrast to the nodes a link is assumed to be related to a single social
context. To capture the hierarchical and massively overlapping organization of groups, the method performs a
and with a common incident
hierarchical clustering of links instead of nodes. The similarity of two edges
node (if one exists) is based on the similarity of their other incident nodes and . The similarity of nodes
itself is determined by the proportion of common neighbors.
4. Case Studies and Datasets
We chose the open source projects Asterisk, OpenSimulator, and DOJO Toolkit to test our assumptions and
evaluate and apply our approach. Each of the projects defined as case studies represent a different domain and
also a different type of community in respect to size and frequency of actions.
In general we have collected data from the developer mailing list, the community mailing list and also from
the logfiles of the source code version management system (svn) using our data-multiplexer-demultiplexer
approach and tool [17]. However in this study we only consider the data from the mailing lists because it is less
formally pre-regulated than repository access and more open for new developers so that cliques are more likely
to emerge and change over time. The opposite assumption that pre-regulated networks of maintaining
developers with write access rights will tend to build one large clique over time has been tested and confirmed
for all three cases with each of our approaches. For this reason we focus to describe and discuss our approach
only on the networks derived from the developer mailing lists.
Asterisk is a software based telephone private branch exchange (PBX) developed by Digium. It is released
under the GNU public license as well as under a proprietary license (dual license model). There is a big
community working on Asterisk. The software based telephone PBX is often used within call-centers and for
this purpose open source is a good choice. Asterisk represents a typical big and productive community with a

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

2069

more or less stable core of developers and users as well as a high fluctuation of occasional users. The data
covers the whole years 2006 and 2007. The developer mailing list contains 13542 messages in 4694 threads
discussed by 1324 developers.
OpenSimulator is a project developing an open source server for hosting 3D simulation worlds, comparable
to Secondlife®. It is released under the BSD License. The community is somehow similar to Asterisk, there are
maintainers, developers, hosters and end users. The data covers the time period of September 2007 to February
2009. The developer mailing list contains 5505 messages in 1185 threads discussed by 198 developers.
OpenSimulator represents a typical mid-size open source community with a relative stable core of developers
and regular users and some occasional users.
DOJO toolkit is an open source Javascript library developed by the Dojo Foundation. It started in 2004 and
the framework is targeting needs of client side web development. It is released under a modified BSD License
as well as under Academic Free License. The data for the mailing list covers the complete years 2006 and
2007. The mailing list contains 7207 messages in 1477 threads discussed by 114 developers. Dojo represented
at the time of observation a typical small-size open source project with a stable core of developers and users but
only few occasional users.
5. Analysis and Results
5.1. Indicator functions
We define different indicators that characterize the group structure of the networks. The values of these
indicators depend on the network in question, on the parameters that influence the group detection algorithm,
and on the time window size. Therefore they can be used to analyze the impact of time window sizes on the
identified subgroup structure over time by the proposed methods.
We choose five different measures to develop simple indicators. Those measures are the sizes, the number,
the coverage, the overlap coverage and the modularity. While the first two measures are quire intuitive the
others require some explanation. The methods do not necessarily assign each node to a cluster. So the coverage
is defined as the fraction of nodes that are member of at least one cluster.
(1)
W determines a network for a particular time window and C a clustering of this network produced by a
community detection method.
is the set of nodes of network W, which means all actors that are present in
the corresponding time slice. A related measure is the overlap coverage and is defined like follows.
(2)
So overlap coverage is the fraction of all nodes that are part of more than one cluster. Overlap coverage
cannot be applied to the Edge Betweenness Communities method, because this method assigns nodes to
clusters uniquely. Thus the modularity of a clustered network can be used to build indicators especially for
methods that partition a network into disjoint clusters. According to [15] the modularity of a clustered network
measures how separated the clusters are from each other in terms of intra and inter cluster links. Formally
modularity is defined as:
(3)

2070

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

That means the fraction of Edges that are within clusters minus the fraction of edges that link to outsiders for
each cluster.
Now we develop our indicators for a sequence of timeslices of the network for successive time windows as
can be seen in table 1. The cluster size is a local measure, so that the corresponding indicators rely on time
series of the maximum or average cluster sizes for the successive time windows, whereas the other measures
are global.
Number
clusters

of

Max cluster
size

Avg
size

cluster

Coverage

Overlap Coverage

Modularity

Maximum
(max)

max_num

max_maxsize

max_avgsize

max_coverage

max_ol_coverage

max_modulatiy

Average
(avg)

avg_num

avg_maxsize

avg_avgsize

avg_coverage

avg_ol_coverage

avg_modulatiy

Standard
deviation
(sd)

sd_num

sd_maxsize

sd_avgsize

sd_coverage

sd_ol_coverage

sd_modulatiy

Table 1: Matrix of indicators

5.2. First analysis
First we analyze the previously defined indicators graphically with different window sizes as an initial
attempt to figure out well fitted time windows, so that the subcommunity detection methods produce
meaningful results. The aim of longitudinal analysis of subsequent timeslices of an evolving network is to
understand the dynamic of certain features of the network. In this case it is the subcommunity structure.
Therefore it is quite natural to assume that a high variance in the indicator values for a certain time window size
indicates that the window size is appropriate to observe the dynamic of the subcommunities over the period of
observation.

Figure 1: Number of clusters according to different time window sizes. CPM (first row), EBC (second row), LC (third row). Asterisk (first
f
column), OpenSim (second column), DOJO (third column).

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

2071

The investigated methods are not only different in their subcommunity identification approaches; they differ
also in their restrictiveness to subcommunities. For example requires the Clique Percolation Method the
specification of a parameter k, which specifies the size of the initial cliques that are percolates through the
graph. This implies that the smallest possible cluster found by this method is a clique of size k. In our study the
k is fixed to 4. To make the methods more comparable clusters are restricted to a minimum size of 4. This
implies that even the clusterings produced by the Edge Betweenness Community method do not cover
necessarily the entire network. Figure 1 shows the number of identified clusters in relation to different window
sizes for each method and each network. In this paper only the results regarding the number of clusters and the
overlap coverage are presented, because we found that cluster size and coverage are not very useful to
determine a proper time window size which is in line with the foregoing experiments with the Clique
Percolation Method [2]. These indicators tend to simply increase with larger time window size and
consequently don not tell anything about the dynamics of the subcommunity structure.Conspicuous about these
first results is, that the Asterisk community seems to work differently as the other two communities. The
OpenSim network and the DOJO network are smaller and much denser than the Asterisk network in the sense
that more interaction occurs between less people. As explained in section 4 this networks belong to a different
kind of open source developer communities. This explains that the CPM and EBC methods are not able to
detect more than one giant cluster with timeslices larger than three month.
This shows clearly that the high density of networks bear resulting from too large time windows has a strong
effect on node based subcommunity detection methods. In contrast the link community method identifies more
clusters when time windows grow, because despite from the other methods this method initially clusters the
edges of a network instead of its nodes. That follows that the Link Community method can identifies more
different clusters in dense networks where many edges can be clustered. In our previous research we found that
a peek in the variance of the cluster sizes for particular time window sizes is a good indicator for reasonable
time windows using the Clique Percolation method [2]. In most cases this raise and decline of the standard
deviation can also be observed for other subcommunity detection methods but it is often not as obvious or
simply not the case. Hence other indicator values should be consulted for a decision about time window size.
The aim of the CPM and Link Community method is to find overlaps in the subcommunity structure of a
network. Therefore it is desirable to investigate the overlap coverage of the clusterings produced by this
method under different window sizes. Figure 2 depicts the results for overlap coverage in the Asterisk network
as an example how the overlap coverage indicators can help in combination with the deviation in the
number of clusters to figure out appropriate time window sizes. However, important to note is that the overlap
coverage is strongly related to the number of subcommunities, because as more subcommunities exists as more
overlapping can occur between them.

Figure 2: Overlap coverage for different time window sizes for the Asterisk network. (left CPM, right LC
method).

2072

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

Nevertheless the standard deviation and in case of EBC also the mean of the overlap coverage as additional
feature seems to be appropriate to find a proper time resolution in combination with the deviation of the
number of clusters. For the Asterisk network this suggests that time windows between 30 to 60 days are most
useful for both of the subcommunity detection methods to identify subcommunity in the Asterisk network.
Overlap coverage cannot be applied to if the Edge Betweenness Communities method is used, because this
method partitions the network into disjoint clusters. However, the attempt when applying this method is to find
well separated parts in a network e.g. independent developer teams in our case study. Thus a well suited
indicator is the average modularity of the produced network partitionings. Figure3 shows this indicator related
to different time window sizes for the EBC method and the Asterisk network.

Figure 3: Modularity indicators for the clustering of the
Asterisk netowork performed by EBC.

It turns out, also for the other case studies, that the modularity decreases with growing time window sizes and
thus the modularity cannot function as an indicator on its own. However this indicates that for Edge
Betweenness Communities it is more desirable to focus on smaller time slices as with the other two methods.
With shorter time slices the separated cores of the different subcommunities can identified more clearly. As a
consequence the average modularity indicator should be combined with the deviation of number of clusters in
order to find an adequate set of strongly separated clusters. In the case of Asterisk we suggest time window
sizes between 10 and 30 days when the Edge Betweenness Communities method is applied.
One first finding is that the different subcommunity detection methods do not necessarily produce the same
the indicator values for different time window sizes. In previous work [2] could also be
shown, that different values for k regarding the CPM yields different results for the time window size.
This is on the one hand due to the reason that each method and in case of CPM parameter setting produces
different communities even in static networks [16]. The communities differ in the size as well as in the number
of identified subcommunities and overlaps. The explanation for this is not that one method is better than others.
Moreover it is a matter of the specific analysis task which method is most appropriate. In section 3 different
example applications of the methods were pointed out.
Since the three methods are based on completely different approaches of subcommunity detection and rely
on totally different assumptions and models of subcommunities in a network, it is not surprising that the
identified optimal time window sizes for each method are not equal in any case. Hence the specific analysis
task determines the method and in consequence the method determines a corresponding optimal time window
size to retrieve valuable results.

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

2073

5.3. The impact o
of observation periods
Our initial assumption was that evolving networks bear an inherent time which reflects the changes in the
community structure. This inherent time might not be stable over the entire period of observation. Moreover
highly dynamic networks emerge through different phases [18]. In the email networks of open source
communities the communication between the members might rise e.g. in phases short before a release date.
To further examine the effect of the observation period on the choice of proper time window sizes we have
to have a closer look on the evolution of the particular networks. The upper two diagrams of figure 4 show the
evolution of the density and the number of nodes of the Asterisk network over a period of 720 days split up in
monthly time windows. It is easy to see that this network does not evolve uniformly. The network density
increases over the time period whereas the number of nodes decreases. This effect is not surprising because the
density of networks is inverse related to the number of nodes if the average degree of the nodes remain nearly
constant one can easily proof.
f More interesting are the irregularities like the sharp increase of participating
actors within the period between month 5 and month 9. Within this period the density decreases, which
indicates that the new actors were not immediately incorporated in the communication. After one and a half
year the density grows sharply with a nearly constant number of nodes. That means that the remaining actors in
the Asterisk network intensify their interactions in this phase. Hence the analysis of the dynamic subcommunity
evolution of the Asterisk network requires different time window sizes for three different phases.
The OpenSim network shows a growing behavior. After an initial phase in the first 5 month of observation
where the density decreases and the number of nodes increases, the density remains constantly between 0.4 and
0.5 and the number of nodes show a growing tendency.

Figure 4: Number of nodes and density over time (monthly timeslices) for the different networks.

2074

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

This indicates that this community was in a formation process in the first five month and then the average
degree of the nodes increases. The results in section 5.2 show the sensitivity of subcommunity detection for this
two different phases. The Link Community and Edge Betweenness Community methods both show a peak in
the standard deviation of the number of clusters found if the time window size is set to 120 days. This is
because the structure of the subcommunities is different in the first time window from the following time
windows.
In contrast the DOJO network, which is the smallest and densest network under investigation, seems to
evolve more uniformly than the other two. Therefore the complete period of observation can be split up into
time windows of equal length. This observations lead to the assumption that the size of time windows should
be adjusted to different phases of observation. Figure 5 shows an example of the impact of different
observation periods to the number of clusters indicators. It depicts the number of clusters that can be identified
with the Clique Percolation Method using different time window sizes in the OpenSim network. The diagram
on the left corresponds to the first 120 days of observation where the community grows rapidly and on the right
to the following 420 days. It appears that for the first period of observation shorter time window and for the
second period longer time windows yield a good resolution of the subcommunity structure. We could observe
similar effects with the other methods. As a consequence one can say that more dynamic phases of a network
require shorter time window sizes.

Figure 5: The number of nodes indicators for CPM in the OpenSim network for different observation periods.

6. Conclusion and Further Work
In this paper we presented a systematic approach to find proper time window sizes to sample an evolving
network into successive timeslices for community detection based on simple indicator values. These indicators
may help researchers to perform valuable analyses of the community structure in highly dynamic (social)
networks even if they are lacking an intuition of the pace in which the subcommunities of large networks
evolve. We could show that different methods ffor subcommunity detection sometimes require different sample
sizes of a dynamic network. So we can define a guideline to perform valuable task and time aware analyses of
the subcommunity structure of rapidly evolving networks. First an analyst should be very clear what she wants
to investigate of the subcommunity structure of the underlying network. Search for mediators for example
suggests the Clique Percolation method which produces only small overlaps between clusters, while for the
uncovering the overlapping social contexts of actors in a network the Link Community method is a better
choice.
The presented analyses in this paper provide only an initial attempt to find well suited sample sizes of nonstable networks. The vision is to automatize this approach, so that an analyst only has to provide information
about the analysis task and an algorithm suggests a method and adequate time window sizes for different
phases of the network. Apart from community detection the idea of inherent time of processes within networks
inspires further research. On a smaller level than the communities of a network one can identify small patterns

Tobias Hecking et al. / Procedia Computer Science 18 (2013) 2066 – 2075

2075

of connection between usually three or four nodes. Those patterns are referred as motifs [19]. It is assumed that
motifs that occur much more often in certain real world networks than in random networks can be meaningful
regarding the question how a network behaves at a low level. Studies e.g. in [20] show that the distribution of
such motifs underlie only small variations over time in an evolving network. However, the formation and
change of those building blocks of complex networks also takes some time. Hence the sizes of time windows
can also have an effect on the analysis of networks at this scale. One line of future research could be to examine
the temporal behavior in relation to the function of the network.
References
[1] G. Palla, I. Derenyi, I. Farkas and T. Vicsek.; Uncovering the overlapping community structure of complex networks in nature and
society; Nature, 2005, 435: 814-818.
[2] S. Zeini, Tilman Göhnert, Lothar Krempel and H. U. Hoppe; The impact of measurement time on subgroup detection in online
communities; In: The 2012 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining
(ASONAM 2012 ),Istanbu l, Turkey, 2012, pp. 389-394.
[3] J. Leskovec, J. Kleinberg and C. Faloutsos; Graphs over time: Densification laws, shrinking diameters and possible explanations; In:
Proceedings of the Eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining, Chicago, Illinois,
USA, 2005, pp. 177-187.
[4] L. Backstrom, D. Huttenlocher, J. Kleinberg and X. Lan; Group formation in large social networks: Membership, growth, and
evolution; In: Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Minining,
Philadelphia, PA, USA, 2006, pp. 44-54.
[5] T. Falkowski; Community Analysis in Dynamic Social Networks; PhD Thesis, Sierke, 2009.
[6] H. R. Bernard, P. D. Killworth and L. Sailer; Informant accuracy in social network data IV: A comparison of clique-level structure in
behavioral and cognitive network data; Social Networks,1980, 2:191-218,.
[7] R. I. M. Dunbar; Coevolution of neocortical size, group size and language in humans; Behavioral..and Brain Science,
1993, 16:681-693.
[8] M. Budka, K. Musial and K. Juszczyszyn; Predicting the evolution of social networks: Optimal time window size for increased
accuracy; In: 2012 ASE/IEEE International Conference on Social Computing (SocialCom 2012) Amsterdam, NE, 2012, pp. 21-30.
[9] J. Diesner and K. M. Carley; Revealing social structure from texts: meta-matrix text analysis as a novel method for network text
analysis; Causal Mapping for Information Systems and Technology Research: Approaches, Advances, and Illustrations,
pp. 81-108, 2005.
[10] G. Palla, A. L. Barabasi and T. Vicsek; Quantifying social group evolution; Nature, 2007, 466:664-667.
[11] D. Greene, D. Doyle and P. Cunningham; Tracking the evolution of communities in dynamic social networks; In: Advances in Social
Networks Analysis and Mining (ASONAM), Odense, Denmark, 2010, pp. 176-183.
[12] S. Fortunato; Community detection in graphs; Physics Reports, 2010, 486:75-174.
[13] S. Zeini and H. U. Hoppe; Identifikation von Innovationstreibern in Gemeinschaften von Open-Source-Entwicklern mittels
Netzwerkanalyse; Open Innovation Erfolgreich Umsetzen - Unternehmensstrategien Und Kompetenzmanagement, 2010, pp. 41-45,
(German).
[14] B. Vedres and D. Stark; Structural Folds: Generative Disruption in Overlapping Groups; American Journal of Sociology, 2010,
115:1150-1190.
[15] M. E. J. Newman and M. Girvan; Finding and evaluating community structure in networks; Phys Rev E. 2004, 69:026113,
Feb, 2004.
[16] Y. Ahn, J. P. Bagrow and S. Lehmann; Link communities reveal multiscale complexity in networks; Nature, 2010, 466:761-764.
[17] A. Harrer, S. Zeini and Sabrina Ziebarth; Visualisation of the dynamics for longitudinal analysis of computer-mediated social
networks-concept and exemplary cases; In: From Sociology to Computing in Social Networks. Theory, Foundations and
Application,, Springer, 2010, pp. 119-134.
[18] T. G. Leishman, D. G. Green and S. Driver; Self-organization in simulated social networks; In: Proceedings of the First International
Conference on Computer-Mediated Social Networking, Dunedin, New Zealand, 2009, pp. 150-156.
[19] R. Milo, S. Shen-Orr, S. Itzkovitz, N. Kashtan, D. Chklovskii and U. Alon; Network Motifs: Simple Building Blocks of Complex
Networks; Science, 2002, 298:824-827.
[20] K. Juszczyszyn, P. Kazienko, K. Musial and B. Gabrys; Temporal changes in connection patterns of an email-based social network;
In: IEEE/WIC/ACM International Conference On Web Intelligence and Intelligent Agent Technology, WI-IAT '08.,Sidney,
Australia 2008, pp. 9-12.

