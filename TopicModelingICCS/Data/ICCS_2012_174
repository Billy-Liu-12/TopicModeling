Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 469 – 478

International Conference on Computational Science, ICCS 2012

A high-level Petri net based approach for modeling and
composition of web services
Soﬁane Chemaa∗, Faycal Bachtarzi, Allaoua Chaoui
MISC Laboratory, Department of Computer Science, Faculty of Engineering, Unversity Mentouri Constantine, Algeria

Abstract
Web services are modular, self-describing, self-contained and loosely coupled applications, which intercommunicate via messages exchanging. The evolution of the internet and the emergence of new technologies like e-business
have inﬂuenced the use of these last ones, which have become popular. The composition of web services is a topic that
attracts the interest of researchers. It oﬀers complex problems process ability even with simple existing web services
while cooperating with each other. However, modeling tools and formal techniques for the completion of this task are
required.In this paper, we show how simple existing web services can be composed, in order to create a composite
service, which oﬀers new features. In this context, we propose an expressive object-oriented Petri net based algebra
that succeeds in the complex composition of Web services.
Keywords: web services, web services composition, algebra, e-business, object-oriented Petri net.

1. Introduction
The concept of web service basically refers to an application on internet. It is made available by a service provider
and utilized by customers via standard internet protocols such as Universal Description, Discovery, and Integration
(UDDI) [1], Web Service Description Language (WSDL) [2] and Simple Object Access Protocol (SOAP) [3]. The
web services composition is a natural evolution of this technology, it has a remarkable potential ability in enterprise
application integration and business to business reorganization. Although solutions for description, publication, discovery, and interoperability of web services are provided by the recent technologies based on WSDL, UDDI, and
SOAP, complex composition cannot be achieved. So many researches are devoted to the composition of web services,
the majority of these works provide diﬀerent models expressed in diﬀerent formalisms. The proposals of [4][5][6]
represent Petri net based models, web service models based on semantic annotations are presented in [7] [8], however
in [9] graph transformations are utilized by the authors in order to model and compose web services.
In this paper, the problem of web services composition is addressed using a Petri Net based framework called
G-NET [10]. Unlike the other approaches, eﬃcient and strong mechanisms for complex systems modeling, that even
∗ Corresponding

author
Email addresses: chemaa@misc-umc.org (Soﬁane Chemaa), bachtarzi@misc-umc.org (Faycal Bachtarzi), a_chaoui2001@yahoo.com
(Allaoua Chaoui)

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.050

470

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

high level Petri nets do not support, are provided by this concept. Therefore, our objective is the proposal of a Gnet based algebra in order to compose web services in solving complex composition, a web services structure and
behavior descriptive formalism; as well as an operators representative set presented by means of syntax, semantics,
and the resulting composite service; are oﬀered.
This paper is divided into ﬁve major sections. In addition to the introductory section, section 2 presents web
service modeling, using G-Nets, section 3 includes algebra for composing web services and its G-Net based formal
semantics. Next, a brief preview of some related work is mentioned in section 4. Finally, some prospects and work in
progress are discussed.
2. Web services as G-Nets
G-Net is a Petri Net based framework introduced by [10]. It is utilized in the modular design and speciﬁcation
of complex and distributed information systems. A formalism that adopts object oriented structuring into Petri Nets
broadly, is provided by this framework. Advantages from the formal treatment and the expressive comfort of Petrinets are intended to be taken, and beneﬁts from object oriented approach (reusable software, extensible components,
encapsulation, etc), are planned to be gained.
A system designed by the G-net framework is made up of a set of autonomous and loosely coupled modules called
G-Nets.The encapsulation property is satisﬁed by a G-net i.e. a module cannot be accessed by another module, but
through a G-net abstraction, which is a well-deﬁned mechanism, like an object in the object oriented programming
concept.
A G-net consists of two parts. The Generic Switch Place (GSP), which is a special place that represents the visible
part of a G-net i.e. the interface between a G-net and other ones. Besides, the Internal Structure (IS), the G-net
invisible part, which constitutes the internal realization of the designed system. Both, specifying notations of the IS
and the Petri net are very close [11]. For more details about the G-nets, the reader is referred to [10] [12].
Web services resemble distributed system, which is made up of a set of loosely coupled modules communicating
through exchanging messages as a G-net system. Therefore, we model web services using G-Net, easily. We model
each operation in the service by a method in the G-net and associate to each one a peace of Petri-Net in the IS of the
G-Net. Consequently, we model the state of the service by the position of the tokens in the G-Net.
Next, some formal deﬁnitions about G-Net service and Web service are given.
Deﬁnition 1. ( G-Net Service) A G-net service is a G-Net S (GS P, IS ) where:
• GS P(MS , AS ) is a special place that represents the abstraction of the service where:
– MS is a set of executable methods in the form of < MtdName >< description >= {[P1 : description, ...,
Pn : description](< InitPL >)(< GoalPls >)} where < MtdName > and < description > are the name
and the description of the method respectively. < P1 : description, ..., Pn : description > is a set of
arguments for the method, < InitPl > is the name of the initial place for the method and < GoalPls >
is(are) the name(s) of the goal place(s) for the method.
– AS is a set of attributes in the form of < attribute − name >= {< type >} where < attribute − name > is
the name of the attribute and < type > is the type of the attribute.
• IS (P, T, W, F, T rc, T ra, L) is the internal structure of the service, a modiﬁed predicate/transition net [13], where:
– P = NP ∪ IS P ∪ GP is a ﬁnite and non-empty set of places where NP is a set of normal places denoted
by circles, ISP is the set of instantiated switch places denoted by ellipses used to interconnect G-Nets, GP
is the set of goal places denoted by double circles used to represent ﬁnal state of method’s execution.
– T is a set of transitions.
– W is a set of directed arcs W ⊆ (P × T ) ∪ (T × P) (the ﬂow relation).
– F is an application that associates a description to certain elements of W.
– T rc is an application that associates a condition to certain transitions (called selectors of transition), this
condition is a logical formula constructed from variables which appeared in the inscriptions of adjacent
input-arcs.

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

471

Figure 1: Exemples of G-net Services

– T ra is an application that associates an action to certain transitions, this action is a sequence of aﬀectations
of values to variables.
– L : P → O ∪ {τ} is a labeling function where O is a set of operation names and τ is a silent operation.
The signiﬁcance of the using attributes:
V: indicates either the card is valid or not, C: indicates either the conﬁdential code is valid or not, B: indicates either
the card is blocked or not, A-exist: indicates either the sum to withdraw is available in the account or not, I: represents
the number of successive errors during the introduction of the conﬁdential code (at each incorrect attempt the machine
increment by 1 the number I, if the introduced code is accepted the machine aﬀect the value 0 to I) , N: represents the
conﬁdential code, A: represents the sum to withdraw, OP: represents the type of the operation (withdraw if OP==1 or
credit consultation if OP==2).
In ﬁgure 1, we propose an illustrative example of two services customer and automatic cash dispensers (ACD)
represented by G-Nets. The service customer reproduces the behavior of the client, who wants to use the ACD that
insures the credit consultation, and cash withdrawals operations. For this we must have a valid magnetic card and

472

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

a conﬁdential code. To accomplish each operation this card must be inserted into the machine which automatically
veriﬁes its validity. In the aﬃrmation the customer then is invited to introduce his conﬁdential code, which is composed of numbers, by using the machine keyboard. If the code is accepted the operations should be displayed on the
screen by the ACD, therefore the desired operation is selected by the customer pressing the suitable icon. Two cases
to consider:
• If it concerns an application for credit, the machine displays the account balance, whereupon it redisplays the
operations table.
• If it concerns funds withdrawal application, the machine displays a window related to this operation, which
allows the client to introduce the sum he wants to withdraw. After the validation, the validity of the sum is
automatically checked by the machine. If the sum is not suﬃcient; the machine would make an indication
on the screen, it redisplays the operations table. In the case of the availability of funds, it will distribute the
banknotes representing the inserted sum.
However, if the conﬁdential code is erroneous after three successive attempts, the magnetic card will be captured by
the ACD for security purposes, because it may be that the user of the card is not its owner. Its recuperation depends
on a special processing that is not tackled in this example.
It should be noted that the customer may change his opinion, and interrupt any operation at any time before the
validation.
The ISP notation serves as the primary mechanism for specifying the interconnection between diﬀerent G-Nets. In
the example of Figure 1, we integrate the ISP of ACD with its methods validity, code, display-op, oper and withdrawal
in the IS of Customer to specify a client-server relation.
Deﬁnition 2. (Web Service) A Web service is a tuple S = (NameS , Desc, Loc, URL, CS , S GN) where:
•
•
•
•
•

NameS is the name of the service used as its unique identiﬁer.
Desc is the description of the provided service. It summarizes what functionalities the service oﬀers.
Loc is the server in witch the service is located.
URL is the invocation of the Web service.
CS is a set of the component services of the Web service, if CS = {NameS } then S is a basic service, otherwise
S is a Composite service.
• S GN = (GS P, IS ) is the G-Net modeling the dynamic behavior of the service.

The concept of G-Net service and Web service being presented, we show in the next section how Web services
can be incrementally composed. We recall that we use G-Nets as a means to oﬀer a ﬂexible and powerful algebra.
3. Web Service Composition
The cooperation of two or more diﬀerent web services leads to a novel task achievement. Consequently, a new
value to the services collection is added, giving the example of the collaboration of a Hotel Booking Service and a
Web Mapping Service such as Google Maps API for the clients’ guidance. Hence, a complex Web service performing
the original tasks in addition to a new one is the result of the cooperation of these services.
[4][14][15] are devoted to discuss diﬀerent constructs for composing Web services. Based on these works, an
algebra combining diﬀerent Web services is proposed in this paper. Sequence, Parallel, Alternative, Iteration, and
Arbitrary Sequence as basic constructs will be taken. Moreover, four more developed constructs which are Discriminator, selection, reﬁnement and replace are deﬁned. After that, each operator formal semantics in terms of G-nets,
after its informal deﬁnition provision, is given.
3.1. Composition constructs
The BNF-like notation below describes a grammar deﬁning the set of services that can be generated using algebra’s
operators.
S ::= | X | S S | S
S |
S | S ⇔ S | S S | (S S ) S | [S ..|..S ] | Re f (S , a, A) | Rep(S , S , S ) where:
•

is the Zero Service (or empty service), i.e a service which performs no operation.

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

473

Figure 2: Services S1,S2,S3 (a); Empty service (b); Sequence service (c); Choice service (d)

• X is a constant service. It consists of a service performing operation that cannot be split into sub-operations.
this service is called Atomic.
• S 1 S 2 represents a composite service that performs one service immediately followed by another, i.e is a
sequence operator.
S 2 represents a composite service that can reproduce either the behavior of S 1 or S 2 , i.e
is an
• S1
alternative ( or a Mutual Exclusion) operator.
•
S represents a composite service where one service is successively executed multiple times, i.e
is an
iteration operator.
• S 1 ⇔ S 2 is a composite service that performs any arbitrary sequence of the services S 1 and S 2 , i.e ⇔ is an
unordered sequence operator.
• S 1 S 2 represents a composite service which performs the two services S 1 and S 2 at the same time and independently. The resulting service waits until the end of execution of S 1 and S 2 , i.e is a parallel operator.
• (S 1 S 2 ... S n−1 )
S n is a composite service that waits for the execution of one service (among the n-1
. is a discriminator operator. Note that the
services), before activating the subsequent service S n , i.e (. .)
n-1 ﬁrst services are performed in parallel and without communication.
• [S 1 |S 2 |...|S n ] represents a composite service that selects and executes another service among n services available
that perform the same task, i.e [..|..] is an operator of selection.
• Re f (S , a, A) represents a service which behaves as S except for the operation labeled by “a”, which is replaced
by “A”.This latter is a modiﬁed predicate/transition net, i.e Re f () is a reﬁnement operator.
• Rep(S , S 1 , S 2 ) represents a composite service similar to S except for the service component S 1 , which is replaced by S 2 not empty, i.e Rep() is a replace operator.
The proposed algebra veriﬁes the closure property. This latter ensures that the product of any operation on services
is itself a service to which we can apply algebra operators. We are thus able to built more complex services by
aggregating and reusing existing services through declarative expressions of service algebra.
3.2. Formal Semantics
In this section, we give a formal deﬁnition, in term of G-Nets, of the composition operators. Let S i = (NameS i , Desci ,
Loci , URLi , CS i , S GNi ) with S GNi = (Pi , T i , Wi , Fi , T rci , T rai , Li ) for i = 1, .., n be n Web Services such that
Pi ∩ P j = ∅ and T i ∩ T j = ∅ for i j.
Empty Service. The empty service is a service that performs no operation. It is used for technical and theoretical
reasons.
Deﬁnition 3. The Empty service is deﬁned as = (NameS , Desc, Loc, URL, CS , S GN) where:
• NameS = Empty.
• Desc = “Empty Web Service”.

• Loc = Null , stating that there is no server for the service.
• URL = Null, stating that there is no invocation for the service.

474

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

• CS = {Empty}.

• S GN = (GS P, IS ) where:

– GSP = (MS,AS) where MS = ∅ , AS = ∅
– IS = (p, ∅, ∅, ∅, ∅, ∅, ∅)
In Figure 2(b), we show the graphic representation of the empty service ( ) in terms of G-Net.
Sequence. The sequence operator allows the construction of a service composed of two services executed one
after the other. This construction is used when a service should wait the execution result of another one before starting
its execution. For example when subscribing to a forum, the service Registration is executed before the service
Conﬁrmation.
Deﬁnition 4. The service S 1 S 2 is deﬁned as S 1 S 2 = (NameS , Desc, Loc, URL, CS , S GN) where:
• NameS is the name of the new service.
• Desc is the description of the new service.
• CS = CS 1 ∪ CS 2 .

• Loc is the location of the new service.
• URL is the invocation of the new service.
• S GN = (GS P, IS ) where:

– GS P = (MS , AS ) where MS = Mtd.S eq{[...](p1 )(p3 )}, AS = [...].
– IS = (P, T, W, F, T rc, T ra, L) where P = {p1 , p2 , p3 }, T = {t1 , t2 }, W = {(p1 , t1 ), (t1 , p2 ), (p2 , t2 ), (t2 , p3 )},
F = {...}, T rc = {...}, T ra = {...}, L = {(p1 , I sp(S 1 )), (p2 , I sp(S 2 )), (p3 , goal)}.
Given the two services S 1 and S 2 shown in Figure 2(a), the composite service S 1
G-Net shown in Figure 2(c).

S 2 is represented by the

Alternative. Given two services S 1 and S 2 , the alternative operator reproduce either the behavior of S 1 or S 2 ,
but not both. For example the service Identiﬁcation is followed either by the service Allow-access or the service
Deny-access.
Deﬁnition 5. The service S 1
S 2 is deﬁned as S 1
S 2 = (NameS , Desc, Loc, URL, CS , S GN) where:
• NameS is the name of the new service.
• Desc is the description of the new service.
• CS = CS 1 ∪ CS 2 .

• Loc is the location of the new service.
• URL is the invocation of the new service.
• S GN = (GS P, IS ) where:

– GS P = (MS , AS ) where MS = Mtd.Alt{[...](p1 )(p4 )}, AS = [...].
– IS = (P, T, W, F, T rc, T ra, L) where P = {p1 , p2 , p3 , p4 }, T = {t1 , t2 , t3 , t4 }, W = {(p1 , t1 ), (t1 , p2 ), (p2 , t3 ),
(t3 , p4 ), (p1 , t2 ), (t2 , p3 ), (p3 , t4 ), (t4 , p4 )}, F = {...}, T rc = {...}, T ra = {...}, L = {(p1 , τ), (p2 , I sp(S 1 )),
(p3 , I sp(S 2 )), (p4 , goal)}.
Given the two services S 1 and S 2 shown in Figure 2(a), the composite service S 1
G-Net shown in Figure 2(d).

S 2 is represented by the

Iteration. The iteration operator allows the service S to be performed a certain number of times in a row. An
example of use of this construct is when a customer orders a good a certain number of times from a service.
Deﬁnition 6. The service S 1 is deﬁned as S 1 = (NameS , Desc, Loc, URL, CS , S GN) where:
• NameS is the name of the new service.
• Desc is the description of the new service.
• CS = CS 1 .

• Loc is the location of the new service.
• URL is the invocation of the new service.
• S GN = (GS P, IS ) where:

– GS P = (MS , AS ) where MS = Mtd.Iter{[...](p1 )(p2 )}, AS = [...].
– IS = (P, T, W, F, T rc, T ra, L) where P = {p1 , p2 }, T = {t1 , t2 }, W = {(p1 , t1 ), (t1 , p1 ), (p1 , t2 ), (t2 , p2 )},
F = {...}, T rc = {...}, T ra = {...}, L = {(p1 , I sp(S 1 )), (p2 , goal)}.
If we consider the service S 1 shown in Figure 2(a), the composite service
in Figure 3(a).

S 1 is represented by the G-Net shown

Arbitrary Sequence. The arbitrary sequence operator speciﬁes the execution of two services that must not be
executed concurrently. This construct is useful when there is no beneﬁts to execute services in parallel. For example
when there is no deadline to accomplish the global task and the parallelism generates additional costs.
Deﬁnition 7. The service S 1 ⇔ S 2 is deﬁned as S 1 ⇔ S 2 = (NameS , Desc, Loc, URL, CS , S GN) where:

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

475

Figure 3: Iteration service (a); Arbitrary Sequence service (b); Parallel Service (c); Discriminator Service (d); service Sm (e)

• NameS is the name of the new service.
• Desc is the description of the new service.
• CS = CS 1 ∪ CS 2 .

• Loc is the location of the new service.
• URL is the invocation of the new service.
• S GN = (GS P, IS ) where:

– GS P = (MS , AS ) where MS = Mtd.ar.seq{[...](p1 )(p9 )}, AS = [...].
– IS = (P, T, W, F, T rc, T ra, L) where P = {p1 , p2 , p3 , p4 , p5 , p6 , p7 , p8 , p9 }, T = {t1 , t2 , t3 , t4 , t5 , t6 },
W = {(p1 , t1 ), (t1 , p2 ), (t1 , p3 ), (t1 , p4 ), (p2 , t2 ), (t2 , p5 ), (p5 , t4 ), (t4 , p7 ), (t4 , p3 ), (p7 , t6 ), (t6 , p9 ), (p3 , t2 ),
(p3 , t3 ), (p3 , t6 ), (p4 , t3 ), (t3 , p6 ), (p6 , t5 ), (t5 , p3 ), (t5 , p8 ), (p8 , t6 )}, F = {...}, T rc = {...}, T ra = {...},
L = {(p1 , τ), (p2 , τ), (p3 , τ), (p4 , τ), (p7 , τ), (p8 , τ), (p5 , I sp(S 1 )), (p6 , I sp(S 2 )), (p9 , goal)}.
Given the two services S 1 and S 2 shown in Figure 2(a), The composite service S 1 ⇔ S 2 is represented by the
G-Net shown in Figure 3(b).
Parallel. Given two services S 1 and S 2 , the parallel operator builds a composite service performing the two
services (S 1 and S 2 ) in parallel and without interaction between them. The accomplishment of the resulting service
is achieved when the two services are completed. This construct is useful when a service executes multiple atomic
services completely independent.
Deﬁnition 8. The service S 1 S 2 is deﬁned as S 1 S 2 = (NameS , Desc, Loc, URL, CS , S GN) where:
• NameS is the name of the new service.
• Desc is the description of the new service.
• CS = CS 1 ∪ CS 2 .

• Loc is the location of the new service.
• URL is the invocation of the new service.
• S GN = (GS P, IS ) where:

– GS P = (MS , AS )where MS = Mtd.Par{[...](p1 )(p4 )}, AS = [...].
– IS = (P, T, W, F, T rc, T ra, L) where P = {p1 , p2 , p3 , p4 }, T = {t1 , t2 }, W = {(p1 , t1 ), (t1 , p2 ), (t1 , p3 ), (p2 , t2 ),
(p3 , t2 ), (t2 , p4 )}, F = {...}, T rc = {...}, T ra = {...}, L = {(p1 , τ), (p2 , I sp(S 1 )), (p3 , I sp(S 2 )), (p4 , goal)}.
Given the two services S 1 and S 2 shown in Figure 2(a), the composite service S 1 S 2 is represented by the G-Net
shown in Figure 3(c).
Discriminator. The main goal of the discriminator operator is to increase reliability and delays of the services
through the Web. For customers, best services are those which respond in optimal time and are constantly available.
The composite construct obtained by applying the Discriminator operator submits redundant orders to diﬀerent services performing the same task (S 1 , S 2 , ..., S n−1 for example). The ﬁrst service which responds to the request activates
the service S n . All other late responses will be ignored.
Deﬁnition 9. The service (S 1 S 2 ... S n−1 ) S n is deﬁned as (S 1 S 2 ... S n−1 ) S n = (NameS , Desc, Loc,
URL, CS , S GN) where:
• NameS is the name of the new service.
• Desc is the description of the new service.

• Loc is the location of the new service.
• URL is the invocation of the new service.

476

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

• CS =

n
i=1

CS i .

• S GN = (GS P, IS ) where:

– GS P = (MS , AS ) where MS = Mtd.disc{[...](p1 )(pn+3 )}, AS = [B : Boolean, ...].
– IS = (P, T, W, F, T rc, T ra, L) where P = {pi | 1 ≤ i ≤ n + 3}, T = {ti | 1 ≤ i ≤ n + 3},
W = {(pi , ti )|1 ≤ i ≤ n + 2} ∪ {(t1 , pi ), (ti , pn+1 )|2 ≤ i ≤ n} ∪ {(pn+1 , tn+3 ), (tn+1 , pn+2 ), (tn+2 , pn+3 ),
(tn+3 , pn+3 )}, F = { f (p1 , t1 ) = [B], f (pn+1 , tn+1 ) = [B], f (pn+1 , tn+3 ) = [B], .....}, T rc = {trc(tn+1 ) =
T ra = {tra(t1 ) = [B := T rue], tra(tn+1 ) = [B :=
[B == T rue], trc(tn+3 ) = [B == False], .....},
False], .....}, L = {(pi , I sp(S i−1 ))|2 ≤ i ≤ n} ∪ {(p1 , τ), (pn+1 , τ), (pn+2 , I sp(S n )), (pn+3 , goal)}.
Graphically, given S1,..., Sn, the composite service (S 1
shown in Figure 3(d).

S2

...

S n − 1)

S n is represented by the G-Net

Selection. let’s have “n” web services (S 1 ,....,S n ) provide diﬀerently the same service, these services are extended
by a speciﬁc method (req) which receives and answers to certain requests.(An example one of these services is
presented in ﬁgure 3(e)). S elect is an operator which permits, after treating the answers, to choose one service among
others which have respond to the same request, this operator oﬀers the possibility to beneﬁt of the best service.The
choice is related to several criteria, for example, the best services of sale those which represent seductive prices and
suitable delay of delivery.
Deﬁnition 10. The service [S 1 |S 2 |...|S n ] is deﬁned as [S 1 |S 2 |...|S n ] = (NameS , Desc, Loc, URL, CS , S GN) where:
• NameS is the name of the new service.
• Desc is the description of the new service.

• Loc is the location of the new service.
• URL is the invocation of the new service.

• CS =

• S GN = (GS P, IS ) where:

n

i=1

CS i .

– GS P = (MS , AS ) where MS = Mtd.select{[...](p1 )(p2n+3 )}, AS = [J : Integer, r : S tring, ...].
– IS = (P, T, W, F, T rc, T ra, L) where P = {pi | 1 ≤ i ≤ 2n + 3}, T = {ti | 1 ≤ i ≤ 2n + 2},
W = {(pi , t2 ), (pn+2 , ti+1 ), (pi+n+1 , ti+n+1 ), (t1 , pi ), (ti+1 , pi+n+1 ), (ti+n+1 , p2n+3 )|2 ≤ i ≤ n + 1} ∪ {(p1 , t1 ),
(t2 , pn+2 )}, F = { f (t1 , pi ) = [r], f (pi , t2 ) = [resp]|2 ≤ i ≤ n + 1} ∪ { f (pn+2 , ti ) = [J]|3 ≤ i ≤ n + 2} ∪
{ f (p1 , t1 ) = [r], f (t2 , pn+2 ) = [resp], ...}, T rc = {trc(ti ) = [J == i − 2]|3 ≤ i ≤ n + 2} ∪ {...}, T ra = {...},
L = {(pi , I sp(S i−1 .req), (pi+n+1 , I sp(S i−1 .mtd)|2 ≤ i ≤ n + 1} ∪ {(p1 , Create − request), (pn+2 , S elect −
S ervice), (p2n+3 , goal)}.
Graphically, given S1,..., Sn, the composite service [S 1 |S 2 |...|S n ] is represented by the G-Net shown in Figure 4(a).
Reﬁnement. : the reﬁnement permits to replace certain operations of the service by more detailed ones. Reﬁnement is the transformation of a design from a high level abstract form to a lower level more concrete form hence
allowing hierarchical modeling.
Deﬁnition 11. The service Re f (S 1 , a, A) is deﬁned as Re f (S 1 , a, A) = (NameS , Desc, Loc, URL, CS , S GN)
where:
•
•
•
•

NameS is the name of the reﬁned service.
• Loc is the location of the reﬁned service.
Desc is the description of the reﬁned service.
• URL is the invocation of the reﬁned service.
CS = {CS 1 ∪ CA if a ∈ L(S 1) (P(S 1) ), CS 1 otherwise.
S GN = (GS P, IS ) where:
– GS P = (MS , AS ) where MS = S .Mtd{[...](pa )(pq )} if L(S 1) (p1 ) = a (where p1 is the initial place of S 1
and pa is the initial place of A) , MS = S .Mtd{[...](p1 )(pq )} otherwise. AS = [...].
−1
P(S 1) otherwise.
– IS = (P, T, W, F, T rc, T ra, L) where P = P(S 1) \L(S
1) (a) ∪ PA i f a ∈ L(S 1) (P(S 1) ),
−1
W = {W(S 1) \{(x, y) | x ∈ L(S
T = T (S 1) ∪ T A i f a ∈ L(S 1) (P(S 1) ), T (S 1) otherwise.
1) (a) ∨ y ∈
−1
−1
L(S 1) (a)} ∪ {(ti , p j ) | ∃pk ∈ ti • ∧ pk ∈ L(S 1) (a) ∧ p j ∈ PA ∧ •p j = ∅} ∪ {(pi , t j ) | ∃pk ∈ •t j ∧ pk ∈
−1
W(S 1) otherwise.
L(S
1) (a) ∧ pi ∈ PA ∧ pi • = ∅} ∪ WA i f a ∈ L(S 1) (P(S 1) ),
−1
−1
(a)
∨
y
∈
L
(a)}
∪
{
f
(t
F = {F(S 1) \{ f(S 1) (x, y) | x ∈ L(S
i , p j ) = f(S 1) (ti , pk ) | pk ∈ t j • ∧ pk ∈
1)
(S 1)
−1
−1
L(S 1) (a) ∧ p j ∈ PA ∧ •p j = ∅} ∪ { f (pi , t j ) = f(S 1) (pk , t j ) | pk ∈ •t j ∧ pk ∈ L(S
1) (a) ∧ pi ∈ PA ∧ pi • =

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

Figure 4: Selection service (a); An example of Reﬁnement (b); Services S 1 and Rep(S 1 , S 2 , S 3 )(c)

∅} ∪ F A i f a ∈ L(S 1) (P(S 1) ), F(S 1) otherwise.
T rc = T rc(S 1) ∪ T rcA i f a ∈ L(S 1) (P(S 1) ), T rc(S 1)
otherwise. T ra = T ra(S 1) ∪ T raA i f a ∈ L(S 1) (P(S 1) ), T ra(S 1) otherwise. L = L(S 1) \{(pi , a) | pi ∈
P(S 1) } ∪ LA i f a ∈ L(S 1) (P(S 1) ), L(S 1) otherwise.
Figure 4(b) shows an example of a reﬁned service.
Replace. : the operator replace permits to replace a component service by another one inside a composite service.
This operation permits to solve the problem of the availability. i.e if a service is not available; it can be replaced by
another one, which insures the same functions.Here it is a question of behavior equivalence.
Deﬁnition 12. The service Rep(S 1 , S 2 , S 3 ) is deﬁned as Rep(S 1 , S 2 , S 3 ) = (NameS , Desc, Loc, URL, CS , S GN)
where:
•
•
•
•

NameS is the name of the new service.
• Loc is the location of the new service.
Desc is the description of the new service.
• URL is the invocation of the new service.
CS = CS 1 \CS 2 ∪ CS 3 i f CS 2 ⊂ CS 1 , CS 1 otherwise.
S GN = (GS P, IS ) where:
– GS P = (MS , AS ) where MS = S .Mtd{[...](p1 )(pS )}, AS = [...].
– IS = (P, T, W, F, T rc, T ra, L) where P = P(S 1) , T = T (S 1) , W = W(S 1) , F = F(S 1) , T rc = T rc(S 1) , T ra =
−1
T ra(S 1) , L = L(S 1) \{(pi , I sp(S 2 )) | pi ∈ P(S 1) } ∪ {(pi , I sp(S 3 )) | pi ∈ L(S
1) (I sp(S 2 ))} i f CS 2 ⊂ CS 1 ,
L(S 1) otherwise.

Given S 1 , S 2 and S 3 , Rep(S 1 , S 2 , S 3 ) is represented graphically by the G-Net shown in Figure4(c).

4. Related Work
Formerly, various methods related to Web service composition have been proposed in literature, and all of them
attempt to oﬀer languages, semantic models, and platforms for the proposal of eﬀective results for that issue.
A set of primitives oﬀered by composition languages like BPEL4WS [16] permits the interaction between services
being composed. These approaches identify the ﬂow of processes and bindings between services, previously.
Terms from pre-agreed ontologies are used by ontology-driven approaches for composing Web services such as
[7], SAWSDL [8] and [9], for declaring the preconditions and the eﬀects of the concerned services. In the two ﬁrst
works, concepts describe the inputs and the outputs. While, they are expressed in terms of instance-based graph
patterns in [9]. Unless the advantage of the clear understanding of the messages meaning is presented, their main
disadvantages remain the facility to ﬁnd the explicit services aim. This latter represents an essence when composing
by AI planners [17].

477

478

Soﬁane Chemaa et al. / Procedia Computer Science 9 (2012) 469 – 478

Like [4], our work concerns the Petri Net based framework for web services composition. A Petri Net Algebra
was proposed in [4].Despite the full expression of its model, data types cannot be distinguished, because of the use
of an elementary Petri net model. Instead of which we utilize high level Petri nets, called G-Nets.In this formalism,
we can label the edges by constants or variables denoting the parameters of the tokens. Similarly to edges, we can
associate conditions to transitions. The value of the parameters for which the transition is ﬁrable is precised by these
conditions. Thus, data types in this approach are distinguishable. This issue is also treated in [5] by modeling Web
services and their composition using colored Petri nets [18]. The foremost advantage of this wok, Compared to [5],
is that less eﬀort is needed when modeling complex services; moreover, more reduced models are produced. The
approach of [6] resembles this work; it focuses on modeling the process of Web service composition by a kind of
Object Oriented Petri Nets. While this approach has been identiﬁed formally, and based on a well-founded framework
called G-Nets.
5. Conclusion
In this paper, a simple eﬃcient approach for Web services composition has been proposed. Beneﬁting from
the formal, modular, and object-oriented aspects of G-Nets is the main advantage of this approach. Besides, the
speciﬁcation and prototyping of complex Web services are allowed by modeling by G-Nets. A G-Nets based algebra
is developed for Web service composition. The formal semantics of the composition operators are deﬁned, by means
of G-Nets, in this context. Using this underlying framework provides a rigorous approach for verifying properties and
detecting inconsistencies between Web services.
In the future, this approach is planned to be extended with advanced operators, which can support more complex
combination of Web services. In addition, we are aiming at the development of a Java Prototype tool implementing
the introduced operators.
References
[1] F. Curbera, M. Duftler, R. Khalaf, W. Nagy, N. Mukhi, S. Weerawarana, Unraveling the web services web an introduction to soap, wsdl, and
uddi, IEEE INTERNET COMPUTING (2002) 86–93.
[2] E. Christensen, F. Curbera, G. Meredith, S. Weerawarana, Web services description language (wsdl) 1.1, [Online]. Available:
http://www.w3.org/TR/wsdl (Mar 2001).
[3] D. Box, D. Ehnebuske, G. Kakivaya, A. Layman, N. Mendelsohn, , H. F. Nielsen, S. Thatte, D. Winer, Simple object access protocol (soap)
1.1, [Online]. Available: http://www.w3.org/TR/2000/NOTE-SOAP-20000508/ (May 2000).
[4] R. Hamadi, B. Benatallah, A petri net based-model for web service composition, in: proc. the 14th australasian database conference, adelaide.
Darlinghurst: Australian Computer Society, 2003, pp. 191–200.
[5] Z. Zhang, F. hong, H. xiao, A colored petri net-based model for web service composition, Journal of Shanghai University (English Edition)
12, Number 4 (2008) 323–329.
[6] X. Feng, Q. Liu, Z. Wang, A web service composition modeling and evaluation method used petri net, in: Proc. APWeb Workshops, 2006,
pp. 905–911.
[7] D. Martin, M. Burstein, J. Hobbs, al, Owl-s: Semantic markup for web services, [Online]. Available: http://www.w3.org/Submission/OWL-S/
(Nov 2004).
[8] R. Akkiraju, B. Sapkota, Semantic annotations for wsdl and xml schema usage guide, [Online]. Available: http://www.w3.org/TR/sawsdlguide/ ((2007)).
[9] Z. Liu, A. Ranganathan, A. Riabov, Modeling web services using semantic graph transformations to aid automatic composition, in: IEEE
International Conference on Web Services (ICWS 2007), Salt Lake City, Utah, 2007.
[10] Y. Deng, S. K. Chang, J. C. A. De Figueiredo, A. Psrkusich, Integrating software engineering methods and petri nets for the speciﬁcation and
prototyping of complex information systems, in: Proc. The 14th International Conference on Application and Theory of Petri Nets, Chicago,
1993, pp. 206–223.
[11] C. A. Petri, Kommunikation mit automaten (in german), Ph.D. thesis, University of Bonn, Germany (1962).
[12] A. Perkusich, J. C. A. De Figueiredo, G-nets: A petri net based approach for logical and timing analysis of complex software systems, Journal
of Systems and Software 39, Issue 1 (1997) 39–59.
[13] H. J. Genrich, K. Lautenbach, System modeling with high level petri nets, Theorical Computer Science 13 (1981) 109–136.
[14] S. Narayanan, S. McIlraith, Analysis and simulation of web services, Computer Networks 42, Number 5 (2003) 675–693.
[15] D. Zhovtobryukh, Context-aware web service composition, Ph.D. thesis, University of Jyvaskyla, Finland (2006).
[16] F. Curbera, Y. Goland, J. Klein, F. Leymann, D. Roller, S. Thatte, S. Weerawarana, . Business Process Execution Language for Web Service
(BPEL4WS) 1.0, Published on the World Wide Web by BEA Corp, IBM Corp and Microsoft Corp, 2002.
[17] B. Srivastava, J. Koehler, Web service composition - current solutions and open problems, in: ICAPS 2003 workshop on Planning for Web
Services, 2003.
[18] K. Jensen, Coloured petri nets- a high level language for system design and analysis, in: Lecture Notes in Computer Science 483. Advances
in Petri Nets 1990 Springer-verlag, 1990.

