The Javelin Integrated Flight Simulation
1

2

3

Charles Bates , Jeff Lucas , Joe Robinson
1

US Army AMCOM, AMSAM-RD-SS-SD, Redstone Arsenal, AL 35898-5000
Charlie.bates@rdec.redstone.army.mil
2
Computer Sciences Corporation, 4090 South Memorial Pkwy, Huntsville, AL 35815
Jeff.lucas@rdec.redstone.army.mil
3
CAS, Inc., 555 Sparkman Drive, Huntsville, AL 35814
Joe.robinson@rdec.redstone.army.mil

Abstract. The cornerstone of the all-digital simulation for the Javelin missile
system is its accurately rendered high fidelity 8-12�m infrared imagery of
targets, clutter, and countermeasure effects. The Javelin missile system is a
medium range, manportable, shoulder-launched, fire-and-forget, anti-armor
weapon system. Javelin has two major components: a reusable Command
Launch Unit (CLU) and a missile sealed in a disposable launch tube assembly.
The CLU incorporates an integrated day/night sight and provides target
engagement capability in adverse weather and countermeasure environments.
The Javelin missile incorporates an imaging infrared seeker with a fire-andforget tracker that allows the gunner to fire the missile and immediately take
cover. The on-board tracker guides the missile to the target until impact. The
tracker and its ability to maintain lock on the target throughout flight emerged
as the most critical aspect of the Javelin system. A cost-effective way to
develop and test new tracker algorithms became a necessity. Additionally, an
innovative way to determine system performance of a fire and forget imaging
infrared system was needed. From these requirements came the development of
the Javelin Integrated Flight Simulation (IFS). The Javelin IFS is a high fidelity
all-digital simulation whose primary functions are tracker algorithm
development, flight test predictions and reconstructions, and system
performance assessment. The IFS contains six models: environment model,
seeker model, tracker model, autopilot, six degrees-of-freedom (6-DOF) model,
and gunner model. The most critical aspect of the IFS is feeding the tracker
with as realistic imagery as possible. The seeker model working in conjunction
with the environment model gives the IFS highly realistic and fully verified,
validated, and accredited imagery of targets, terrain, and countermeasures.

1 Introduction
The Javelin Project Office undertook a comprehensive program for managing key
system, subsystem, and component-level models and simulations, related databases,
and test data. These models and simulations evolved from initial all-digital
simulations supporting requirements analysis, and they have continued to support the
program throughout its development life cycle. The primary simulation developed to

V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2074, pp. 507–514, 2001.
© Springer-Verlag Berlin Heidelberg 2001

508

C. Bates, J. Lucas, and J. Robinson

represent the Javelin system was the Javelin Integrated Flight Simulation (Javelin
IFS).
The Javelin IFS is a high-fidelity, all-digital simulation whose primary functions are
tracker algorithm development, flight test predictions and reconstructions, and
system-performance assessment. The Javelin IFS contains an environment model, a
seeker model, a tracker model, a guidance model, a six degrees-of-freedom (6-DOF)
model, and a gunner model. All of which are controlled by an executive and data from
each model is passed via shared memory segments. The term Integrated Flight
Simulation was coined to signify the use of Mission Critical Code Resources (i.e.
Flight Software) as part of the simulation. This integration has proven to be the
bedrock on which Javelin program successes have been built.
The Javelin’s prime contractor and the U.S. Army’s Aviation and Missile Research,
Development and Engineering Center (AMRDEC) developed the Javelin IFS jointly
during engineering and manufacturing development (EMD). Verification, validation,
and accreditation (VV&A) of the Javelin IFS was performed by AMRDEC, and
accreditation by the Army Materiel Systems Analysis Activity (AMSAA). The IFS
was then used to assess the performance of the system through many thousands of
monte-carlo simulation runs with various environmental and attack scenarios. The
data derived from this performance assessment was used to support the Low-Rate
Initial Production (LRIP) phase of the program.

2 The Javelin Integrated Flight Simulation
The IFS represents the first simulation from AMCOM AMRDEC of an imaging fireand-forget missile system that included large sections of the Mission Critical Code
Resource (MCCR) as a part of the simulation. The architecture of the IFS was unique
at its creation (early 90’s) in that it treated models or groups of models as independent
applications that communicated through message queues and shared memory
segments. This approach was driven primarily by the state of the art (at the time) of
compilers, operating systems, and hardware. Initially, the Javelin system was modeled
with software that was written in Fortran, ADA, C, and Pascal. Grouping each of
these models into a monolithic simulation and interfacing the disparate programming
languages became difficult in both implementation and maintenance.
A decision was made to create smaller components and interface them using interprocess communication features of the Unix operating system. Socket based
communication could have been chosen but the overhead compared to shared memory
access was significant enough to decide otherwise. This architecture, illustrated in
Figure 1, is working well for the Javelin project but it isn’t essential to simulating this
system. There are many solutions to this problem and all would be valid. The
important aspect of the IFS is the segmenting of the problem into smaller sets.
Maintenance of the simulation became more manageable.

The Javelin Integrated Flight Simulation

509

Image
Generator

6DOF/
Guidance

6DOF SHM

CLU/6DOF
SHM

Missile SHM

CLU/TRK SHM

Tracker SHM

Command
Launch Unit

Tracker

Seeker SHM

Seeker
Optics

Fig. 1. IFS Block Diagram.

The IFS consists of five applications to provide modeling and interfaces for the 6DOF
hardware simulation, guidance, tracking, seeker optics, environment, and
gunner/launch unit modeling. An executive application coordinates the creation and
removal of the message queues and shared memory segments, as well as the actual
execution of the simulation applications. Each simulation application signals the other
applications through message queues when another execution frame is needed.
As an imaging simulation, the IFS has struggled with the tradeoffs associated with
simulation of an infrared scene. These tradeoffs include providing enough fidelity to
adequately test the tracker software, the cost associated with collecting signatures that
represents various objects, backgrounds, and phenomenon under a variety of
conditions, and execution of enough simulation runs to provide valid statistical
datasets for evaluation. These tradeoffs have resulted in developing over 25 square
miles of terrain databases at 1 ft resolution with multiple signatures as well as over 50
target models with as many as 20000 polygons each and executing in excess of
200000 simulation runs.
2.1 The Environment Model
The Environment Model is in short the IFS scene generator. Its purpose is to create a
high-resolution image for a specified scenario from the viewpoint of the missile

510

C. Bates, J. Lucas, and J. Robinson

seeker and then transfer this image to the seeker optics model. The Javelin scene
generator provides the user the capability to create “environments” through a scenario
description file. This scenario description allows the user to specify the use of a
specific section of terrain elevation and signature, objects such as tanks, trees, bushes,
events such as moving or articulated parts of objects and various phenomenon such as
smoke and dust clouds or fires and flares. The user may also specify atmospheric
attenuation, ambient temperature, and sky temperature. At the point the missile
impacts the target, the environment model calculates the intersection point in target
coordinates for use in vulnerability assessments.

Fig. 2. Building a Scene.

From its inception, The environment model was developed for the Silicon Graphics
platform. Originally, SGI provided the best platform for the creation of this type of
imaging simulation as well as providing the cost/benefit ratio to afford to execute
thousands of runs that might take as long as an hour each. As time and technology has
progressed, the scene generator has been improved to take advantage of new features
but the pace of adoption has been slow due to configuration management issues.
Army acquisition rules require simulations to be accredited by an agency independent
of the developers. This insures a good product but also necessarily, limits changes to
the product to keep reaccredidation costs low. For this reason the Javelin target
models are still rendered using shaded polygons and the terrain while texture still
relies on a regularly gridded terrain skin. When the design for this software was
completed, the Reality Engine series of graphics board was the best available but
unfortunately 4 MBs of texture RAM was not enough for both target and terrain.
As the cost/benefit ratio becomes unbalanced due to technology shifts, the effort to
modify the scene generation becomes justified and that is the case now. New thrusts

The Javelin Integrated Flight Simulation

511

will include converting targets and terrains to textured models in a commercially
available format (i.e. OpenFlight®).
The targets and terrain databases used by the IFS are predominately characterized as
empirical datasets. Early in the program, a decision was made to not depend on
predictive signatures for either target or terrain but rather gather as much measured
data as possible. Initial studies of the Javelin missile system indicated that the hit
point of the missile on the target would be controlled overwhelmingly by the tracker.
Now that seems an obvious statement but to clarify, when all other error sources of
the missile are combined for Javelin, the system can still consistently hit a point on a
target smaller than its diameter. Therefore, the controlling factor is the tracker error.
Of course, the tracker error is controlled by the scene itself hence the use of measured
signatures.
The process by which these models were created was laborious at first but as time
passed and the process was refined, automated tools lowered the workload.
The process of building target models included:
1.
2.
3.
4.

Obtain accurate drawings or measurements of the target.
Obtain calibrated infrared signatures from the target.
Construct a polygonal model of the target using drawings and add additional
vertices to capture thermal detail as necessary.
Render an image of the resulting model and compare back to the measured
signature.

This process seems straightforward and it is but it does result in target models that can
exceed 20,000 facets.
Terrain modeling follows a similar process but on a larger scale.
1.
2.
3.
4.
5.

Gather topographic information in the form of elevation data and class
descriptions (i.e. vegetation types and location). This was obtained very
often through survey overflights.
Collect calibrated signature data from different class types.
Create a topographical description file for the elevation data.
Create a signature description from the class maps.
Render and compare the result with the original signature measurements.

This process required a great deal of infrastructure support but the Army has
capitalized on its investment by making the datasets available to other programs. This
community sharing has resulted in a variety of models that provide excellent
evaluation and development capabilities to the imaging tracker community.
Everyone would like to have the ability to predict signatures and it will happen at
some point in the near future. However, due to VV&A concerns at the time, the
method of collecting the exact imagery for that point in time emerged as the preferred
approach. No one could argue the validity of real target signatures and real terrain

512

C. Bates, J. Lucas, and J. Robinson

signatures. It is very likely that the datasets collected on this program will provide the
means to validate predictive techniques in the future when they are available.
2.2 The Seeker Model
The seeker model provides an optics and signal-processing model of the Javelin
system. The features include modeling for focus, focal plane array (FPA) nonlinearity, bad pixels, gain and level processing, and electronic noise. The seeker
application obtains a high-resolution scene image from the environment model and
creates a low-resolution image by first applying an optical blurring function. This
optical blurring function varies as a function of range to a surface and provides the
blurring that occurs as the missile approaches the target. The parameters of the
blurring function can be varied statistically to cover the manufacturing error of the
optics. After the optically processed low-resolution image is created then the effects
of FPA non-linearity, bad pixels and gain and level processing are added. This
resulting image represents the image that would be presented to the Javelin tracker in
the real hardware. The seeker application makes this image available through shared
memory to the tracker model.
2.3 Tracker Model
The tracker model is how the Integrated Flight Simulation got its name. The original
concept was to “integrate” the real tracker MCCR code (Ada) into the IFS. The same
source code base for the Javelin tracker is compiled for the missile and compiled to
run on SGI processors for the simulation. This means that the same program flow is
occurring on both processors. The only sections of the MCCR code not included in
the IFS are the built-in-test (BIT) and the array processor functions that run on
specialized chip sets in real-time language (RTL). Because the core of the tracker is
preserved in the IFS, it can be said that the tracker is not simulated.
Math operations, particularly floating point calculations in the array processor
sometimes differ slightly. A matching process is rigorously undertaken for each
tracker delivery to identify any of these types of differences and provide
compensation for them in a simulation specific portion of the tracker code. This
addresses such issues as rounding differences and truncation differences.
The tracker model receives seeker imagery from the seeker model through a shared
memory interface. The tracker then performs its tracking algorithms in order to
compute the desired aimpoint on the intended target. From the computed aimpoint,
the track errors are calculated and then sent to the autopilot where the guidance
electronics command the control actuator subsystem (CAS) to move the missile.
2.4 The Missile Hardware and Guidance Model
The 6DOF missile application models all the hardware of the missile. This hardware
includes the seeker gimbal dynamics, flight computer process timing, launch and

The Javelin Integrated Flight Simulation

513

flight rocket motors, the fin actuator dynamics, and the missile aerodynamics. This
application also models the earth, atmosphere, and wind. The user also has the
capability of simulating hardware failures to support testing of range safety
algorithms in the flight software. The guidance software is included in this application
rather than separating as the tracker in order to support legacy studies. The 6DOF
application can run in a standalone mode and provides monte-carlo simulation
capability particularly for cases where the tracker is not of concern. When used in the
IFS, this application provides the missile viewpoint to the environment model to
render a scene for the seeker model. It accepts the tracker error from the tracker
model to provide a closed loop simulation. At initialization, the 6DOF application
interfaces with the Gunner Model to position the missile and to respond to flight
software mode changes as directed by the gunner model.
2.5 The Gunner Model
The gunner model portion of the IFS simulates the interface between the gunner and
the missile hardware.
The Command Launch Unit (CLU) is the Javelin sight. It allows the gunner to find
the target on the battlefield, lock-on to the target, and fire the missile. The gunner
identifies and centers the target in the CLU sight then switches to the missile seeker to
size the track gates around the target. When the tracker has locked on, the gunner can
fire the missile.
In the IFS, the gunner/CLU model performs this same function. The scene generator
knows which pixels within the seeker image are target and which are background.
This target truth is available through a shared memory interface to the gunner model
via an image color-coded to identify target location. The gunner model uses this
image to center and size the track gates roughly around the target. Moving the target
within the image is accomplished by giving the scene generator a new pitch/yaw
orientation. This mimics the gunner moving the CLU/missile to position the target
near the center of the image. Sizing the track gates is accomplished by setting and
clearing bits in the CLU/tracker interface. Since the actual Javelin Tracker is running
within the IFS, these single bit commands are the same as those sent from an actual
CLU. Monte Carlo errors are applied to track gate size and position. These error
distributions are based on measurements of gunners in the field.

3 Next Generation IFS
As stated earlier, when the cost/benefit ratio is unbalanced enough then upgrading is
justified. The users of this simulation (Javelin PMO, AMCOM AMRDEC, and
Raytheon) have determined that case exist now. With the availability of stable objectoriented language compilers (i.e. C++) and new players in the high-end graphics
market as well as new computing platforms, there are a myriad of opportunities to
gain new efficiencies or attempt more complex problem sets.

514

C. Bates, J. Lucas, and J. Robinson

3.1 New Simulation Framework
The first item of improvement has been to adapt to a new simulation framework
developed and promoted by AMCOM AMRDEC and referred to as the Common
Simulation Framework (CSF). CSF was developed to aid AMRDEC in promoting a
common set of tools in its development and evaluation business. CSF is an objectoriented and shared object approach to building simulations. Users are encouraged to
develop models as classes with interfaces that are similar to the interfaces of the real
hardware. A shared object is created with this class definition and libraries of these
classes are gathered to construct a simulation. The simulation is constructed by
instantiating the classes and connecting through their open interfaces. The obvious
benefit is the promotion of software reuse. As different types of models are created,
eventually a library of missile parts will be developed. Software reuse, however, is
not the prime motivator. Missile systems are never just created and then statically
maintained for the lifetime of the missile. As new threats are realized, improvements
are necessary and to aid in this effort a simulation that allows itself to freely adapt
new models is desired. One example would be as countermeasures are created that
defeat the current tracker, tests could be perform on other vendors trackers to keep
abreast of new technologies.
The Javelin IFS has been transferred to this new framework and is being tested to
insure that all capabilities are maintained as well as maintaining a valid system
simulation of Javelin.
3.2 New Scene Generator
With the explosion of new 3D graphics capabilities, vendors are releasing new
products at a surprising rate. This certainly opens up the opportunity to increase
capability and lower costs at the same time. For this reason, a new scene generator is
being developed to take advantage of all the scene generation techniques available.
The new scene generator will use models and terrain databases retuned and converted
to use the OpenFlight® format and will be rendered using scene graphs. The
volumetric effects such as smoke and fire will be implemented using 3D texturing and
the increasing availability of texture RAM. When it is possible, some phenomenon
will be implemented using particle effects. All these techniques along with efficient
use of levels-of-detail will provide efficiencies necessary to implement increasingly
complex testing scenarios such as shadows and reflective processes.

4 Conclusion
The Javelin IFS is a fully verified, validated, and accredited model of the Javelin
missile system and its sub-systems. Because of the fidelity and validity of the IFS,
Javelin can with confidence use the IFS to determine system performance, execute
flight predictions and reconstructions, and perform tracker design and analysis. The
IFS is an example of a simulation that is an integral part of a current US Army missile
program and is being used on future missile programs as well.

