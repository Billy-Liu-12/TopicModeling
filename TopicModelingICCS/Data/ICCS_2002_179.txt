Tight Bounds on Capacity Misses for 3D Stencil Codes
Claudia Leopold
Friedrich-Schiller-UniversitaÌˆt Jena
Institut fuÌˆr Informatik
07740 Jena, Germany
claudia@informatik.uni-jena.de

Abstract. The performance of linear relaxation codes strongly depends on an
efficient usage of caches. This paper considers one time step of the Jacobi and
Gauss-Seidel methods on 3D arrays, and shows that tiling reduces the number of
capacity misses to almost optimum. In particular, we prove that
capacity misses are needed for array size
, cache size , and line size
. If cold misses are taken into account, tiling is off the lower bound by a factor
of about
. The exact value depends on tile size and data layout. We
outperform
show analytically that rectangular tiles of shape
square tiles, for row-major storage order.






  


	
 


 !"#
$

1 Introduction
Linear relaxation codes such as the Jacobi and Gauss-Seidel kernels are among the most
time-consuming routines in many scientific and engineering applications. The kernels
form the core of classic iterative solvers for partial differential equations, and are used
as building blocks in modern efficient schemes such as multigrid.
Linear relaxation kernels are frequently denoted as stencil codes because they update array elements according to some fixed pattern, called stencil. Stencil codes perform a sequence of sweeps through a large array, in each sweep updating all array
elements except the boundary. This paper considers the Gauss-Seidel and Jacobi kernels on a 3D array, as depicted in Fig. 1. Each update operation (*) accesses seven array
elements, and thus we speak of a 7-point stencil.
In Fig. 1b), the copy operation can alternatively be replaced by a second loop nest in
which the roles of arrays % and & are reversed. Throughout the paper, a single iteration
of the time loop is considered. Copy operation or second loop nest are not taken into
account.
incurs'"(3data
iterations
'(*)+	,.-	,*/Obviously,
0 , '(*,.-1)+2,3the
/0 , Gauss-Seidel
'(*,.-	,4/5)+$scheme
0 to iteration
,.-2,3/dependencies
0 , whereas the from
and
Jacobi scheme
does not incur data dependencies.
As has been observed by, for instance, Douglas et al. [1], the performance of stencil
codes lags far behind peak performance, chiefly because cache usage is poor. Nevertheless, stencil codes have a significant locality potential since successive accesses refer to
neighbored array elements. For 3D codes, five types of reuse can be distinguished:
(1) Assuming
row-major storage
order, the cache line that holds
+9:=>=>= is reused
/
in the -loop.

%76 (*,8-2,*/:9 , %76 (*,8-2,*/<;

a) for (t=0; t<time; t++)
/* or: while (!converged) */
for (i=1; i<N-1; i++)
for (j=1; j<N-1; j++)
for (k=1; k<N-1; k++)
A[i,j,k] += A[i-1,j,k] + A[i+1,j,k]
+ A[i,j-1,k] + A[i,j+1,k]
+ A[i,j,k-1] + A[i,j,k+1];
(*)
b) for (t=0; t<time; t++) {
/*
for (i=1; i<N-1; i++)
for (j=1; j<N-1; j++)
for (k=1; k<N-1; k++)
B[i,j,k] = A[i,j,k] +
+ A[i,j-1,k]
+ A[i,j,k-1]
Copy(B->A);
}

or: while (!converged) */

A[i-1,j,k] + A[i+1,j,k]
+ A[i,j+1,k]
+ A[i,j,k+1];
(*)

Fig. 1. a) Gauss-Seidel and b) Jacobi code for

(2)
(3)
(4)
(5)

%<6 (3(3,.,.-2-2,3,3/:/:99
%<6 (3,.-2,3/:9
%<6 (3,.-2,3/:9
%<6

/

    
(*,8-2,3/) +9

arrays

 
,

(3,.-2,3/:9

(3,.-2,3/2;+9

is reused in the - -loop when updating %<6 (*,8-:) +	,3/ 9 , %<6 (*,8-2,3/ 9 , %<6 (*,8- ;5+2,3/:9 .
is reused in the -loop when updating %76
%<6 (3,.-2,3/:9 , %<6 (;<+	,.-2,3/:9 .
(
(3)!+	,.-	,*/:9 ,, %<
is reused in the -loop when updating %76
, %<6
.
6
is reused in the time loop.

Reuse is exploited if data are kept in cache in-between successive accesses; exploited reuse is denoted as locality. Reuse type 1 corresponds to spatial locality as the
reuse refers to data from the same cache line; reuse types 2-5 correspond to temporal
locality as the reuse refers to identical data elements. Reuse types 1 and 2 are always
exploited by the input codes; whether reuse types 3-5 are exploited depends on array
size
and cache capacity . As explained by Rivera and Tseng [6], reuse type 3
is exploited for
. This condition often holds in practice, and thus many 2D
codes perform well without cache optimization. The exploitation of type 4 reuse requires
, which does not hold for typical cache and array sizes. Tiling transforms programs such that type 4 reuse is exploited, as well, and is considered in this
paper. Type 5 reuse is out of scope.
Tiling rearranges the updates such that successive type 4 reuses are moved closer
together. Fig. 2 depicts a tiled Gauss-Seidel code; tiled Jacobi code is analogous and
has been omitted for brevity. Tiling groups the updates into rectangular blocks that are
processed one after another. Note
and the third is not.
- that/ only two loops are blocked,
(
Why it is better to block the - and -loops instead of the -loop will be discussed in
Sect. 3.
Tiling speeds up 3D stencil codes, as has been shown experimentally by Rivera and
Tseng [6]. The present paper complements their work by analytically investigating the
question as to how close to optimum tiling gets in terms of cache misses. In line with
common notation, we distinguish cache misses into cold misses (the first access to an



 
	




for (t=0; t<time; t++)
for (jj=1; jj<N-1; jj+=sj)
for (kk=1; kk<N-1; kk+=sk)
for (i=1; i<N-1; i++)
for (j=jj; j<min(jj+sj,N-1; j++)
for (k=kk; k<min(kk+sk,N-1; k++)
A[i,j,k] += A[i-1,j,k] + A[i+1,j,k]
+ A[i,j-1,k] + A[i,j+1,k]
+ A[i,j,k-1] + A[i,j,k+1];

(*)

Fig. 2. Tiled Gauss-Seidel code

element), capacity misses (misses due to limited cache capacity), and conflict misses
(misses due to cache thrashing). Conflict misses can be eliminated through tile size
selection and array padding [6], and are not considered in this paper.
' '
0 0 capacThis paper makes three contributions. First, we prove that
ity misses are needed for any ordering of the update operations (*), where denotes
cache line size. Second,
estimate
constant factor
bound by 0.35 under the
+ we
+ theand
+ in .this
assumptions
,
Third, we analyze the tiled
codes for different data layouts and tile sizes. While Rivera and Tseng [6] use square
tiles, we argue that rectangular tiles are superior. For these, we prove that
+ ; the= number of.
cold and capacity misses is off the lower bound by a factor of at most
The paper is organized as follows. Section 2 proves the lower bound and analyzes
the constant factor. Section 3 analyzes the tiled codes. Section 4 surveys related work,
and Section 5 finishes with conclusions.


	   	 

   

	  

    

2 Lower Bound



 ) 

The number of cold misses is trivially equal to
since all elements of % , except
the corners, must be read. This number is independent on the order of updates, and is,
thus, valid for both the input and tiled codes. In the following, we consider capacity
misses only.
We do not rely on a particular cache replacement scheme. The lower bound refers to
user-controlled data placement, but, consequently, also holds for any common scheme
such as LRU. Similarly, we do not take data dependencies into account, which is correct because a lower bound to an unconstrained problem is always a lower bound to
a constrained problem, too. Accesses to & are ignored as they can only increase the
number of cache misses. Consequently, the lower bound holds for both the Jacobi and
Gauss-Seidel schemes.
An ordering of the updates is denoted as schedule. We ( allow
- / for redundancy, that
is, updates may be carried out repeatedly with same indices , , . Updates may not be
split into subcomputations, however, to guarantee bitwise-identical results as compared
to the input codes.
Theorem 1. Any schedule of the update operations (*) takes
misses.

'

  '



0 ) capacity



, ,>==>=



Proof: Let  be any schedule., We,>partition
Sched into subsequences 
	 

==>= 	 contain
of successive updates such that 	 
exactly
updates,
and


' ) 0 '
0 , where inequality
contains up to
updates. Note that  
indicates redundancy. The following definition captures array elements that are accessed
by multiple  .





 

	

 

   



+

Definition 1. An array element  is touched-only by   (
 ) if the number of
accesses to  in   is at least one, but less than the total number of accesses to  in
 .
The rest of this proof uses geometric argumentation.
We model
a big cuboid
(*,.-	,*/:9 . Hence,
(*,8-2,3% /:9 bycorresponds
7
%
6
<
%
6
that is composed of small
unit
cubes
for
the
to
+++ at position '(*,.-	,*/0 of the big cuboid.
a cube of side length
In the following, we consider any particular  . Let denote the geometric figure
(also called arrangement) that corresponds to  , that is, the figure that is composed
of those unit cubes whose array elements are updated in  . Furthermore, let ! be the
smallest axes-parallel
holds . Obviously, the dimensions "$# ,
( - cuboid / that completely
"% , and "'& of ! (in -, -, and -direction,
respectively)
fulfill "'#()"%*(")&
.
(
We define a unit cube to be -touched by if

	

 

(

â€“ the square belongs to , but its left or right neighbor in -direction
( does not, or
â€“ the square does not belong to , but its left or right neighbor in -direction does.

-

/

Analogously, we define -touched and -touched. We say that a cube is touched if it
is touched in at least one of the three directions. Since an array element has up to 6
neighbors, a cube can be touched up to sixfold.
The concepts of ( touched and touched-only are related. Consider, for instance, a
cube inside(*,8-2that
-touched by at the left boundary. Then
,*/:9 isis updated
(:) the
+	,8-2corresponding
,*/:9 is accessedarray
7
%
6
element %76
in(:)  +	, ,.but
the
left
neighbor
-	,*/:9 is either updated in another subsequence and
7
%
6
not updated.
Consequently,
.-0/ 
(2) +2,8-2,3/:9 is not updated at all. In the former case, both  and ,,++
<
%
6
with 1 (*,.-	, ,*or
/:9 , and thus %<6 (*,8-2,3/:9 is touched-only by  . In the latter case, %76 ()+2,8-2,3/ 9
access %76
belongs to the boundary of % . In general: If a cube that corresponds to array element 
is touched by , then at least one of the following conditions hold:
â€“  is touched-only by   , or
â€“  belongs to the boundary of % , or
â€“  has a neighbor that belongs to the boundary of % .





 

Lemma 1 below shows that for any arrangement of
cubes, at least
cubes are touched. Consequently, the whole schedule comprises at least

2

	34( '  ) 



 )

0

pairs (   ,  ) for which the cube that corresponds to  is touched by the figure that
corresponds to   . We distinguish these pairs into five types:
(1)  is touched-only by   , and one of the accesses to  in   is the first access to  in
Sched

(2)  is touched-only by   , and one of the accesses to  in   is the last access to  in
Sched
(3)  is touched-only by   , and none of the accesses to  in   is the first or last access
to  in Sched
(4)  is not touched-only by   , and  belongs to the boundary of %
(5)  is not touched-only by   , and a neighbor of  belongs to the boundary of %

   ; '  )  0  +  )    ;  
      

	     

1
Altogether,    comprises at most
2 #  2pairs
 ,
of types
4
and
5.
We
denote
the
total
number
of
type
1,
2,
and
3
pairs
by
,
)
;
2 # 	 
2 #  ; 2 ; 2 # 	  1 2 ) +
and
and
; 2 # 	  2 )
) + ; + .
2 #  1 2 , respectively.
2
 From
follows
 
data are kept in cache in-between successive  â€™s, summing up to
'  )At+$0 most
( elements in the whole schedule. Consequently, at least
2




 ;



2 # 	

	

)    0 )   ) +  ; +  )   ;
 )  	 ( '  
 ' ) 0 '  0 ' 
      (  )    0 )    ) +  ; +  ;




elements must be reloaded after having been replaced from cache. Since at most
elements are loaded per memory access, there are at least

'+

 0

(

' ) 0 '
   



0  ( '  )





1

'

  ' 





 0 )   ) +  
00





; + ; 
 



capacity misses, provided that is significantly larger than
.
In the following,
we
estimate
the
constant
factor
in
this
bound
under the assump+ ,
+
+
tions
and
. Imposing stronger assumptions
1
increases the constant, and imposing weaker assumptions decreases it. With 

 	    	    	  
'  )  0   '    0 , we get

 1   '  ) :0 ; +  )  '   0
	 +' +  5 )' +      ) ; 20 + ;  +    )   ) ' 20   '  0  
1
 =       

0

	
Consequently, 
	  ) + 	 ' +5) + 	 :0  . Let ! 1   ( '  )"   0 and
2 1 
  ; +  ) +  )  . Then,  )   	 1= $# implies


! 	 ' +) + 	  0 (  = # ( '  )  0    	 =  %     	& = %   =
2  = 
   follows 2   =   ! , and thus ! ) 2 	 1 =  #'! . Putting it all
From
together, the number of capacity misses is at least
' +   0 ( ' ! ) 2 0 	 '  =  #  0 ( 1 =    ( '      0 	  = %(    '    0=


The proof of Lemma 1 is still open:

 

Lemma 1. For any arrangement of
touched.



cubes, at least

 ) 



cubes are

 )

Proof: The proof is by contradiction. Let be an arrangement with less than (
touched cubes. Let column denote a set of cubes in that have the
- -coordinates,
/ same - and
and let plane denote a set of cubes in that have the same -coordinates.
Furthermore, let  denote the number of cubes in plane  . We distinguish four cases
and derive a contradiction in each- of them./
Case 1: At least two / planes  ,  with  1  exist such that/  	 and 
 + 	 :
The total number of -touched cubes in equals the sum of / -touched cubes in the individual columns (columns are independent
wrt. touches in -direction). In a column
/ -touched;
a column with two or more cubes, at
with one cube, at least
three
cubes
are
/ -touched. Hence, if  and  - inhave
least four cubes
are
common,
/
; 1' touched'  0 columns
)  0*; 1'in touched
'  - the
0 )  total
0
number of -touched cubes is at least 
, a contradiction.
 non-empty
Case 2: A plane  exists with/     : Since there  are' at least
2

0
1
columns, the total number of -touched cubes is at least (
, a contradiction.

Case 3: Exactly one plane  contains 
all other planes
    ( cubes;
- -touched
cubes:
Obviously,
the
total
number
of
/
cubes equals
contain less( than

the sum of( - / -touched cubes in the individual planes (planes are independent wrt.
touches
in / -direction). In [3], it is shown that any 2D arrangement( of
! unit squares
( /- -touches
- -touches
! squares. Thus,
!
at least
in
3D,
any
plane
of
cubes
/
(; '  0 cubes,at least
! cubes. Hence, altogether / -touches at least
with



	





	












	

   )  

	





1  . We assume 



 1 

 


 





	



, which can only underestimate



 ,
 ) +$0
'
the value of   is maximized if the  take extreme values, that is, if    

) + , one  takes value  )    '  ) +$0 ( '  ) +0 , and the
of the  take value 
(other  take value zero. Thus, the total number of / -touched cubes is at least
   ;  (    '  )+0 (   )+ 	         )    ,
the number of touched cubes. Lemma 2 below shows that for any fixed value of



which contradicts the assumption.
Case
4: All planes contain less than
( /- -touched
cubes can be estimated by





    '

)+$0 

(





)+



cubes: In analogy to Case 3, the number of

	   ) 



)+

   )  
,

which contradicts the assumption.
Lemma 2 completes the lower bound proof:

,

Lemma 2. For fixed values

 

!) &

&



 minimizes


$" #$%



if

, a finite set

 !

with


1
"$#$%'& 

and

( & 





â€“   $ elements of  have value
)    , $  () , and
â€“ one element of  has value 
â€“ all other elements of  have value zero.



Proof:
The proof
 is by contradiction. Let  be defined  as to the items above, and let
! 1 /  with  #  1  and (   ! )    minimize  #
	  for all finite sets with
/
,
,
these properties. Since ! 1  , elements    ! exist such that     -  .
Let  be the smallest and  be the largest element with this property. We define ! 1 
' !  ,  0   ) +2,  ; +  . Then,   - 1  and (  -  ! - )  -  . Since for
 + # +
' 0
 , the derivative  -8'  0 1 + '
 0 is monotonely decreasing, we
function   1
observe 








)+ 

 





) +  '



which yields


 + # +


 - 1

  0

)+ ;


Thus,




 #     




  ;



and



; + 

 



; + 



)+ ;


;

; +  '









  0 ,

=

 ; + 





 
#



,

in contradiction to the minimality of ! .

3 Upper Bound

' ) 0 ! % " & . Since
The( tiled codes in Fig. 2 partition the updates into blocks( of size
the -loop is not
( blocked,
/ we say that the tiles proceed- in -direction. Alternatively,
(
- tiling
can block the - and/ -loops so that tiles proceed in -direction, or the - and -loops so
that
proceed in -direction. In either case, # , % , & denote the tile size in directions
( , - , tiles
/ . Below,
we analyze the number of capacity misses assuming row-major storage
(
order.
For
column-major
storage order, the argumentation is analogous, except that /
and -directions are exchanged.
The following analysis applies to both the Jacobi and Gauss-Seidel codes since
tiling preserves the data dependencies of Gauss-Seidel, and since accesses to array &
in Jacobi do not incur cache misses if a write-through cache (cache-bypassing) is used.

 

/

Tiling in
/ -direction Updates are carried out subplane-by-subplane, for/ increasing values of . As in Sect. 2, a subplane is a set of array elements with same index that are
accessed in the present tile. Since an update refers to data from at most three subplanes,
only three subplanes must be kept in cache instead of the whole tile [6].
Nevertheless, since cache line direction equals tile direction, it is not
'# # ; possible
0'# % ; to0
keep exactly three planes in cache. Instead, the cache(*must
hold
up
to
,8-2,3/:9 and %<6 (*,8-2,3/ ) +9 belong to
data, with factor 2 reflecting the possibility that %<6







different cache lines. (Actually, this bound can be somewhat improved, but the given
formula keeps analysis simple.)
(*,8-2,*/:9 and %<6 (;
misses occur (3at,.-2tile
boundaries
only.
If the updates of %76
+	,8-2,*Capacity
/:9 (analogously
3
,
:
/
9
*
(
8
,
;
	
+
*
,
:
/
9
%<6
)(belong
different tiles, then both
(*,8of-2,3%</ 9 6 and theand
; +	,8-2,*/:to9 must
the cache line of %<6
cache line of %76
be loaded twice. Of
the four misses, two are capacity misses. Since data from the same cache line are reused
in successive planes, the two misses occur only once during the processing of planes,
so that the total number of capacity misses can be estimated by



 '  0 '
  0 ( total area of tile boundaries
 (    # ;    % 0=

'  0  )  , which implies about '   0 (
This bound is minimized for # 1 % 1    
'

0

(
=
'

0



  (  (    1 # (     capacity misses. Taking cold misses into

'

account, this value is off the lower bound by a factor of at most

) 

;"(= #     
  ) ; = %(      
( Tiling in - or -direction

+ ;
1

   
  )  ; = %(      
( = %(

(



+ ; ( =

-

 



=

We refer to -direction; tiling in -direction is analogous.
In both cases, cache lines are directed orthogonal to the tiles, and are thus cut by tile
boundaries.
Again, the cache must hold about three subplanes of % , although the exact value is
somewhat different. On one hand, it is sufficient
the cache holds
two sub(*,8-2,*that
/:9 , element
(	) +	,.about
-	,*/:9 can
planes instead of three since after
updating
be re7
%
6
<
%
6
(*,8-2,3/:9 , element %76 ( ; +2,8-2,3/:9 is not yet needed. On
moved, and before updating %<6
the
other hand, cache lines must be stored completely, even if they are cut by tile bound3 % & , for
aries and part of the elements is not accessed in the present tile. Hence,
some value  with    . Below we use  1
, which somewhat overestimates the
real cost.
Capacity misses occur at tile boundaries. We distinguish
three cases, which are de( . Referring
%
picted in Fig. 3. The figure shows - a plane
of
for
any
fixed
figure, we
+  (*,3/ ) ) as horizontal, andtotiletheboundaries
denote tile / boundaries
with
fixed
(
+  (*,8-  ) ) as vertical.
with fixed (
Cache lines along horizontal tile boundaries (such as lines and ) must be loaded
twice
the overall computation; after loading, they are used in iterations of the
/ -loop.during
Of the four misses, two are capacity
Thus, the total number of capacity
' 0 misses.
misses at horizontal tile boundaries is
(
%.
At vertical boundaries, cache lines that are cut (such as ) incur one capacity miss
since each line must be loaded twice. Cache lines that end at tile boundaries (such as 
and  ) incur one capacity miss each, since both lines must be loaded twice. Hence, the
case that cache lines are cut induces less misses than the case that cache lines end at
tile boundaries. We assume here that all cache lines are cut, which can be achieved by
padding the array. Then,
& capacity misses are taken at vertical tile boundaries.
Adding the values of horizontal and vertical boundaries, we get a total of

 



 

 



    



 

'

 0

(

 

%

;

 

&



j
a
b
c

Tile
d

e
k

Fig. 3. Cache misses at tile boundaries



  ' + ;   0 '      0
 

 

(
, this value equals
.
capacity misses. For % 1
&
While Rivera and Tseng restrict consideration
to
square
tiles
[6],
the
following
anal/
' & 0
ysis suggests that rectangular tiles ( % 1
& ) perform better. Substituting % 1
into the above formula yields
#' 0
'
0 ' 0;
 & 1 $ &
&

     

 

capacity misses. This function is minimized for

  0  '   0)    & 1  ,
'  0  ' $ 0 and % 1 '   0  '   0 . Here, & 1 '   0 ( % , that is,
that is, for & 1
'  )  0   '#  0 minimize the number of capacity misses.
rectangular tiles of
shape
'
   0 1=  ( '       0 capacity misses are needed,

For these tiles,  $0(   
/




-'

0

&

1

' $

which is slightly less than the number of capacity misses for tiling in -direction, and
less than
( the number of capacity misses for square tiles. Taking cold + misses
; = into ac-,
count, -direction tiling is off the lower bound by a factor of at most
which is very close to one.

  



4 Related Work
The compiler optimization community has conducted much research on tiling, e.g. [5,
9]. Nevertheless, Douglas et al. [1] observe that current production compilers are not
able to tile even elementary stencil codes. Part of the reason may be differences in the
way tiling works for stencil codes as opposed to dense linear algebra codes (the focus
of compiler research). There, the data of a tile are moved into cache together, and then
stay until the processing of the tile is complete. Tiled stencil codes, in contrast, keep
only a few columns in cache to be efficient.
Several papers deal with tiling specifically for stencil codes. Closest to ours is work
by Rivera and Tseng [6] who, like us, consider one iteration of the time loop for 3D
codes. Tiling is studied experimentally, including a discussion of tile size selection and
array padding to reduce
Rivera and Tseng observe that tiling speeds up
+ )conflict
+ + ,misses.
3D stencil codes by #
but they do not relate their result to a lower bound.



Other papers investigate tiling schemes for the time loop. These schemes exploit
type 5 reuse. Leiserson
et al. [2] describe the key idea: The array is covered with kernel

tiles
of
size
.
In
order
out time steps on a kernel tile, a larger tile of size
'#;  0  ' ;  0 is loaded tointocarry
fast memory. In recent work, the base scheme has been
improved and adapted to particular codes such as red-black Gauss-Seidel and multigrid
programs [1, 7, 8]. Leiserson et al. [2] show that cache misses can be asymptotically
reduced if updates are not considered a unit.
Part of the proof techniques in this paper have originally been developed for the
simpler case of 2D stencils with
in [3, 4]. These references also discuss
minor modifications of the tiling scheme, such as a snake-like order of tile evaluation,
and a sophisticated data layout scheme that eliminates the factor from the quotient
between upper and lower bounds. The modifications can be generalized to 3D, but have
little impact on running time.





  



5 Conclusions
This paper has analyzed the numbers of cold and capacity misses in one time step of
the Jacobi and Gauss-Seidel methods on 3D arrays. We have proven a lower bound,
and have shown that the well-known technique of tiling gets very close to this bound.
Moreover,
tiling schemes, and observed that tiles of shape
' ) 0  we have
' compared
0 performdifferent
best. In ongoing work, we are investigating this claim
experimentally, including padding. Moreover, we are extending our techniques to tiling
schemes for the time loop.

 

 

References
1. C. C. Douglas, U. RuÌˆde, J. Hu, and M. Bittencourt. A guide to designing cache aware multigrid algorithms. In Concepts of Numerical Software, Notes on Numerical Fluid Mechanics.
Vieweg-Verlag, 2001. To appear.
2. C. E. Leiserson, S. Rao, and S. Toledo. Efficient out-of-core algorithms for linear relaxation
using blocking covers. Journal of Computer and System Sciences, 54(2):332â€“344, Apr. 1997.
3. C. Leopold. On optimal locality of linear relaxation. To appear in Proc. IASTED Int. MultiConf. on Applied Informatics, 2002.
4. C. Leopold. On optimal temporal locality of stencil codes. To appear in Proc. ACM Symp.
on Applied Computing, 2002.
5. G. Rivera and C.-W. Tseng. A comparison of compiler tiling algorithms. In 8th Int. Conf. on
Compiler Construction, pages 168â€“182. LNCS 1575, 1999.
6. G. Rivera and C.-W. Tseng. Tiling optimizations for 3D scientific computations. In Proc.
Supercomputing. IEEE, 2000. Available at http://www.supercomp.org/sc2000/Proceedings/
start.htm.
7. S. Sellappa. Cache-efficient multigrid algorithms. Masterâ€™s thesis, University of North Carolina at Chapel Hill, Dept. of Computer Science, 2000.
8. Y. Song and Z. Li. New tiling techniques to improve cache temporal locality. In Proc. of the
ACM SIGPLAN Conf. on Programming Language Design and Implementation, pages 215â€“
228, 1999.
9. M. E. Wolf and M. S. Lam. A data locality optimizing algorithm. SIGPLAN Notices, 26(6):30â€“
44, 1991.

