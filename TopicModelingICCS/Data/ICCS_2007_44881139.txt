Usage-Centered Interface Design for Quality Improvement
Chang-Mog Lee1,*, Ok-Bae Chang1, and Samuel Sangkon Lee2,**
1

Division of Electronics and Information Engineering, Chonbuk National University,
664-14 1ga Duckjin-Dong Duckjin-Gu Jeonju, Jeonbuk, 561-756, South Korea
{cmlee, okjang}@chonbuk.ac.kr
2
Department of Computer Science and Engineering, Jeonju University, 1200 3ga,
Hyoja-Dong Wansan-Gu Jeonju, Jeonbuk, 560-759, South Korea
samuel@jj.ac.kr

Abstract. As application development environment changes rapidly, importance
of user interface design is increasing. Usually, most of designers are clustering
by subjective method of individual to define objects that have relativity in design
interface. But, interface which is designed without particular rules just adds inefficiency and complexity of business to user who use this system. We propose an
object oriented design model that allows for flexible development by formalizing
the user interface prototype in any GUI environment. The visual cohesion of the
user interface is a new set of criteria which has been studied in relation to the
user interface contents, and is founded on the basis of the cohesion of the interface as defined using basic software engineering concepts. The visual cohesion
includes the issue of how each unit is arranged and grouped, as well as the cohesion of the business events which appear in the programming unit.
Keywords: Usage-centered Interface, Visual Cohesion, Prototype, Interface
Design Model, Object Unit.

1 Introduction
The design of a User Interface (UI), which is fundamental to the convergence of the
different customers' requirements, and the communication required to support the
complicated interaction between human beings and computers, requires very comprehensive and varied knowledge and experience [1]. The design of such a UI requires a
graphics expert, requirement analyzer, system designer, programmer, technology
(description) expert, social behavior expert and other experts, depending on the particular application [2]. However, it is difficult to realistically engage experts in multiple fields in the design of a UI.
Therefore, it is necessary to research automatic designs for a UI which can meet
the professional requirements of various fields. The use of Visual Cohesion (hereafter
referred to as VC) in the design of a UI helps improve its quality by providing the
designer or developer with a visual prototype prior to the embodiment of the system.
Moreover, VC provides the standards needed to measure the appropriateness of the
*
**

This work was supported by the second stage of Brain Korea 21 Project.
This work was financially supported by the Jeonju University.

Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 1139–1146, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1140

C.-M. Lee, O.-B. Chang, and S.S. Lee

layout of the UI and its semantic contents. It is necessary to improve the comprehensibility of business tasks and the usability of the interface by clustering business
events in such a way that they are semantically related one another [3]. This paper
aims to look at the modeling techniques used to improve the VC. The purpose of the
VC in this study is to improve the comprehensibility and usability of a business system by clustering business events in such a way that they are related to one another
[4]. Therefore, this paper proposes 4 types of objects that can improve the VC of a UI
prototype and discusses the techniques used to produce an object oriented design that
performs the clustering of these objects, as well as discussing the method used to
measure the VC.

2 Related Works
GENIUS [5], JANUS [6], TRIDENT [7], GUIPS [8] are some examples of studies
related to the automatic creation of a user interface. Table 1 sums up the characteristics of recent studies into the automatic creation of a user interface.
Table 1. Comparison of studies into the automatic generation of a user interface

TRIDENT
Domain model - data and task analytical model
Method of
design

JANUS
- object model

- extraction of user interface by - extraction of user interface
the requirement analysis of task from object model
and function

Method of
- data and function requirement
specification specification
Characteristics - application analysis of the
interaction task and the decision
on the task attributes by the user
interface
- activity chain graph (interaction
of data and function)
- deals with the static features of
the user interface

- data structured specification
- Non-abstraction class transmits to the user interface
- Attributes and methods that
have nothing to do with the user
interface are disregarded in the
process.
- Dynamic features of the user
interface are not covered.

GUIPS
- object analysis model
founded on UML
- Extraction of user interface from scenario according to the requirement
analysis
- data specification of
transition object
- user-interaction interface
modeling from scenario
- object transition graph
(interaction with interface)
- prototype creation
interface of user interface

3 Interface Design Model Based on Classification
The object oriented model suggested in this paper is composed of 4 object models
which can improve the VC of the UI, as shown in Fig. 2: 1) business event object, 2)
task object, 3) transaction object, 4) form object model used to calculate the cohesion
of the suggested object model and validate the improvement of cohesion compared to
the existing design model. Therefore, the detailed objects of the UI are analyzed in
terms of their similarity, relevance and transference of the business events in the UI in
order to perform the clustering of the business events through the set of objects [9].
This is because the visualization of objects patterned by clustering can lead to an
improvement in the VC of the business events in the UI.

Usage-Centered Interface Design for Quality Improvement

1141

Fig. 1. Hierarchical structure of object oriented design model

3.1 Business Event Object
The design of the business event object is the stage in which the object which represents the User Interface Business Event Object (hereafter referred to as UIBEO) is
designed. The control pattern of the business event which comprises the transference
data of the business event is designed in the UI. In other words, the designing operation of the business event includes the design of the business event controls, such as
the radio buttons, combo boxes, check buttons, etc. The rules used to design the business event objects of the UIBEO are as follows.
<Rule 1> the business event which has the number of instant limited to one business
event is UIBEO.
<Rule 2> if the number of instance that can be fed to one business event is not regular, it is not the UIBEO.
<Rule 3> the item that can have the instance less than 7 at the maximum is the
UIBEO that can use the radio button.
<Rule 4> the business event that can have over 8 instances is the UIBEO that can
use the combo box.
<Rule 5> the item that can feed the instance of choice is the UIBEO that can use the
check button.
This improves the cohesion of the business event by effectively modeling the function of the business event in the UI, and also enhances the reusability of instant data
and functional cohesion within the UI.
3.2 Task Object
The clustering of task objects is the design stage in which the objects that represent
the User Interface Task Objects (hereafter referred to as UITO) are created. It is a

1142

C.-M. Lee, O.-B. Chang, and S.S. Lee

clustering stage that enables the user to distinguish the set of task objects by modeling
the block label composed of task units if there are more than 2 input or output business events which are transferred when the event occurs. The following is the rule
related to the clustering of the set of task objects of the business event that is transferred to a task.
<Rule 1> the business event which has the number of instant limited to one business event is UIBEO.
<Rule 2> the output UITO which has more than one record is the StringGrid bloc.
<Rule 3> the node which has more than one continual input business event is
UITO.
<Rule 4> the node which has more than one continuous output business event is
UITO.
The business events are clustered and labeled by set of task objects in order to improve the communication cohesion and VC of the business event in the UI.
3.3 Transaction Object
The design of the transaction object is the stage in which the object that represents the
User Interface tRransaction Object (hereafter referred to as UIRO) is created. In other
words, the UIRO is the clustering stage in which the group of business events composed of input-control-output events is grouped into the set of transaction objects. The
transaction object is created by turning the request (input) and response (output) of the
user into the block through one suite. The following is the rule used for clustering
the set of transaction objects.
<Rule 1> it is composed necessary of input task-button-output task, and the input
task can be omitted if overlapping with the previous transaction.
<Rule 2> it can have more than one input task and output task.
<Rule 3> the input task is the beginning of UIRO, while the output task is the end
of UIRO.
The design of the transaction object, which is the stage in which the users are provided with the set of transaction objects, is the method of clustering the transaction
objects that are grouped into 'task-control-output' tasks. This facilitates the understanding of the users by visualizing the transaction objects of the business events in
the UI. In other words, it makes it easier for the users to understand the set of transactions in the Interface, by clustering the 'input task-control-output' tasks into one object
unit for the sake of visualization.
3.4 Form Object
The design stage of the form object serves to create the object that represents the User
Interface Form Object (hereafter referred to as UIFO). This stage creates the form
object by dividing the business events into the form in which they are presented in the
UI. If the number of input/output business events exceeds 20 (criteria for human engineering) or the output form(or_state) is selected in more than one input and it is

Usage-Centered Interface Design for Quality Improvement

1143

necessary to make the user clearly understand as in the case of Interrupt, it divides the
objects into multiple forms. The following is the rule used for clustering the set of
form objects.
<Rule 1> the input/output objects exceed 20, and in case of different task, are divided into other form object.
<Rule 2> if the response to the demand is alternative, it is divided into different
form object.
<Rule 3> if the result of event is Interrupt, it is divided into new form object.
<Rule 4> if it is the abstract object with same task though it exceeds 20 items, it
cannot be divided into other form object.
<Rule 5> one task object can be divided into form object, and the transaction object gathers to become form object.
The efficient design of the form provides the support needed to facilitate the development of the program and its maintenance/repair, by making it easy to understand
the business process and reducing the complexity of the software.

4 Evaluation of Proposed Model
4.1 Features of Proposed Model
In this section, the existing common design, structured design and object oriented
design proposed in this paper will be explained, in order to compare these different
design models of the UI. Fig. 2 shows the structure of these evaluation models in
order to facilitate the understanding of the design models.
Common design

Control
design

Structured design

Relative
group

Objected Oriented design

Field
Task
Transaction

Fig. 2. Comparison of the structure of the referenced design model

Business events in the general design model are not subject to clustering, and the
designer arranges the business events (by him or herself). The designer determines
only the control of the business events, depending on his or her skill. The structured
design model of Constantine designs the control pattern of the business events like
general designers, and the designer groups the business events according to their relevance, so that the user can understand their relevance to the work involved.

1144

C.-M. Lee, O.-B. Chang, and S.S. Lee

Fig. 3. (a) Generalized design
model

Fig. 3. (b) Structured design
model

Fig. 3. (c) Object-oriented
design model

The object-oriented design model proposed in this paper applies the concept of the
object-oriented design by classifying the business events into objects (business events,
tasks, transactions, forms) in the UI. Fig. 3(a) shows the general design model which
designs only the control pattern of the business events. In other words, it designs only
the control patterns, such as the properties, product codes, product standards, etc. The
structured design model in Fig. 3(b) shows an example in which the control of the
business events is designed and their grouping is performed based on the user information, product information and order information according to the relevance of the
work involved. Fig. 3(c) is an example of the object-oriented design model visualized
by the multi-dimensional grouping of 4 objects to which the object oriented design
method is applied (business events, tasks, transactions, forms). The object-oriented
design model is a method that enables the user to recognize the object group and sequence of tasks which are transferred to the database in the UI, as shown in Fig. 2.
4.2 Criteria for VC
The VC of the UI is a new set of criteria which has been studied in relation to the UI
contents, and is founded on the basis of the cohesion of the interface as defined using
basic software engineering concepts. Constantine proposed an equation to estimate
the VC [10]. This VC is represented by the ratio of the number of pairs related to
visual business events to the number of business events. The summation of the VC in
the form and dialogue box is the summation of the VC in the group of all levels.
⎛
⎜
V C = 100 × ⎜
⎜
⎝

∑

∑
∀l

⎞
⎟ however,
⎟
N l ( N l − 1) / 2 ⎟
⎠
∀l

Gl

G

l

=

∑

R i, j

∀ i , j |i ≠ j

N l represents the number of business events in group l , Ri , j represents the semantic
relevance(however,

0 ≤ Ri , j ≤ 1 ) between the business events i and j in each

group. If business events i and

j are relevant, Ri , j . If no relevance exists, Ri , j = 0 .

The number of VCs increases if the grouping among relevant business events is good.
The equation used to calculate the VC is applied on the basis of the outcome of the
design in section 4.1, and the VCs of the designed models are compared and evaluated. The referenced design model used for the evaluation is designed in the form of a

Usage-Centered Interface Design for Quality Improvement

1145

visual prototype of a non-functional screen layout, and the basic visual properties and
business events were designed with the same number (of visual properties and business events) in order to ensure the objective measurement of the result of this experiment. Table 2 shows the outcome of the calculation of the relevance by pattern of this
referenced design.
Table 2. Outcome of the calculation of relevance by referenced design model
Generalized design
Structured design
Object oriented design

G1=1, G2=10, G3=10, G4=17
N1=2, N2=5, N3=5, N4=16
G1=1, G2=10, G3=10, G4=10, G5=3, G6=10, G7=0
N1=2, N2=5, N3=5, N4=5, N5=3, N6=5, N7=6
G1=1, G2=10, G3=10, G4=1, G5=3, G6=3, G7=10, G8=2, G9=2,G9=0
N1=2, N2=5, N3=5, N4=2, N5=3, N6=3, N7=5, N8=3, N9=3, N10=3

The number of instances of the product code and product standard were both assumed to be five.

The VC of the general design model was N=4, N1=2, N2=5, N3=5, N4=16, VC=27
was the lowest VC. The VC of the structured design model was N=7, and N1=2,
N2=5, N3=5, N4=5, N5=3, N6=5, N7=6, VC=74 was the intermediate level of VC. The
VC of the object oriented design model was N=10 and N1=2, N2=5, N3=5, N4=2,
N5=3, N6=3, N7=5, N8=3, N9=3, N10=3, VC=89 was the highest VC. Therefore, the
VC of the referenced design model can be compared as shown in table 3.
Table 3. Evaluation of VC of referenced design model

Name of referenced
design model

VC
Calculated value

General
design

Structured design

Object oriented
design

27

75

89

It was found that the cohesion of the object oriented design model proposed in this
paper was improved by approximately 14%. The VC provides the criteria for reviewing the quality of the visual prototype and graphic design for the UI. Moreover, the
VC provides the criteria for forecasting the user preference, the evaluation of the
easiness and comprehensibility, the degree of response, and the quality of the graphic
layout [10]. The automatic graphic layout of the objects ensures the most efficient
grouping and the highest cohesion according to the modeling rule, regardless of the
skill of the designer.

5 Conclusion
This paper studied the design rules and modeling technique of a UI that supports the
user based on the improved VC. The findings of this study are as follows: First, the
proposed method improves the VC by designing the objects of the UI on the basis of

1146

C.-M. Lee, O.-B. Chang, and S.S. Lee

objects which are functional, consecutive and communicative. Second, it improves the
user preference, easiness, comprehensibility, degree of response, and quality of the
graphic layout on the basis of the improvement of the object based VC. Third, it improves the communicative, consecutive, and procedural cohesion of business events
on the basis of the clustering of the UI objects. Fourth, it constitutes an object oriented
designing method that can improve the comprehensibility of the business process and
the usability of the UI on the basis of the visualization of the object pattern.

References
1. Garcia, E., Sicilia, M.A., Gonzalez, L., Hilera, J.R.:Dialogue-Based Design of Web Usability Questionnaires Using Ontologies. Computer-Aided Design of User Interfaces(2005) 131-144
2. Dix A.:Design of User Interface for Web. Proceedings, User Interface to Data Intensive
System(1999) 2-11
3. Constantine L.L., Biddle R., and Noble J.:Usage-centered Design Engineering: Models for
Integration. IFIP international conference on software engineering(2003) 106-113
4. Leszek A. Maciazek: Requirements Analysis and System Design. Addison Wesley(2001)
244-270
5. H. Balzert: From OOA to GUIs: The Janus System. IEEE Software, Vol. 8, No 9(1996)
43-47
6. F. Bodart, A.-M. Hennebert, J.-M. Leheureux, I. Provot, and J. Vanderdonckt: A Modelbased Approach to Presentation: A Continuum from Task Analysis to Prototype. Proceedings of the Eurographics Workshop on Design, Specification, Verification of Interactive
Systems, Carrara, Italy, Focus on Computer Graphics, Springer-Verlag, Berlin(1994)
77-94
7. M. Elkoutbi, I. Khriss, and R.K. Keller: Generating User Interface Prototypes from Scenarios. Proc. of the 4th IEEE International Symposium on Requirements Engineering(1999) 150-158
8. Nerurkar U.: Web User Interface Design, Forgotten Lessons. IEEE Software, Vol. 18, No.
6(2002) 69-71
9. Chidamber S. and Kemerer C.: A Metrics Suite for Objected-Oriented Design. IEEE
Transaction on Software Engineering, Vol. 20, No. 6(1994) 476-493
10. Constantine, L. L.:Visual Coherence and Usability: A Cohesion Metric for Assessing the
Quality of Dialogue and Screen Designs. Proceedings, Sixth Australian Conference on
Computer-Human Interaction, IEEE Computer Society Press(1996)

