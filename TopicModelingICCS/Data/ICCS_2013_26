Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2157 – 2166

International Conference on Computational Science, ICCS 2013

A Parallel CFD Model for Wind Farms
M. Avilaa,∗, A. Folcha , G. Houzeauxa , B. Eguzkitzaa , L. Prietob , D. Cabez´onc
a CASE-Environmental

Simulations, Barcelona Supercomputing Center, Nexus II Building, Jordi Girona 29, 08034-Barcelona, Spain
b Iberdrola Renovables, Spain,
c Centro Nacional de Energ´ıas Renovables (CENER), Spain,

Abstract
We present a Computational Fluid Dynamics (CFD) modeling strategy for onshore wind farms aimed at predicting and optimizing the production of farms using a CFD model that includes meteorological data assimilation, complex terrain and wind
turbine eﬀects. The model involves the solution of the Reynolds-Averaged Navier-Stokes (RANS) equations together with a
k-ε turbulence model specially designed for the Atmospheric Boundary Layer (ABL). The model involves automatic meshing
and generation of boundary conditions with atmospheric boundary layer shape for the entering wind ﬂow. As the integration of
the model up to the ground surface is still not viable for complex terrains, a speciﬁc law of the wall including roughness eﬀects
is implemented. The wake eﬀects and the aerodynamic behavior of the wind turbines are described using the actuator disk
model, upon which a volumetric force is included in the momentum equations. The placement of the wind turbines and a mesh
reﬁnement for the near wakes is done by means of a Chimera method. The model is implemented in Alya, a High Performance
Computing (HPC) multi physics parallel solver based on ﬁnite elements and developed at Barcelona Supercomputing Center.
Keywords: Computational Fluid Dynamics; Atmospheric boundary layer; k-epsilon; Wind modeling; Wind Energy

1. Introduction
Numerical modeling of wind farms is a crucial aspect in terms of both wind farm design and management.
Modeling of wind farms must consider all aspects aﬀecting surface layer atmospheric ﬂow such as topographic
variations, heterogeneities in the roughness of the terrain, or the downwind wake eﬀects of wind turbines. During the last years, the growth in computational capacity has allowed to implement modeling strategies based on
Computational Fluid Dynamics (CFD) involving the full resolution of the turbulent ﬂow equations within the
Atmospheric Boundary Layer (ABL) using both Reynolds-averaged Navier-Stokes (RANS) and Large Eddy Simulations (LES) approaches [for a recent review see e.g. 1].
Here we present the modeling strategy under development within the research Spanish national project ”Modelo
de viento basado en c´odigo abierto de CFD OpenFOAM y t´ecnicas de supercomputaci´on aplicadas” (Proyecto
INNPACTO IPT-2011-1693-920000, 2011-2014) involving three partners: Iberdrola Renovables S.A., the National Center for Renovable Energies (CENER) and the Barcelona Supercomputing Center-Centro Nacional de
Supercomputaci´on (BSC-CNS). The main goal of the project is to port the state-of-the-art of onshore wind farm
modeling to High Performance Computing (HPC) applied to industry.
The project working plan is divided in two stages. During a ﬁrst phase, already concluded, we have constrained
∗ Corresponding

author. Tel.: +34 646 841 547 .
E-mail address: matias.avila@bsc.es.

1877-0509 © 2013 The Authors. Published by Elsevier B.V.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.386

2158

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

to high resolution wind modeling in complex terrain by solving the RANS equations coupled with a k-ε lengthlimited turbulence model. During the second stage the eﬀect of wind turbines is added making use of diﬀerent disk
actuator models. The proposed modeling strategy, yet under development, involves: i) an automatic pre-process
with mesh generation and terrain data assimilation, ii) the numerical solution of the governing equations in the
context of HPC using Alya, a BSC-CNS home-made code based on Finite Elements and, iii) the post-process of
results using Google Earth overlays and an automatic evaluation of speed-ups of the wind turbines. This papers
describes the methodology, modeling strategy and preliminary results of this still on-going project.
2. Modeling Strategy
2.1. Pre-process
Mesh generation and terrain data assimilation is a necessary pre-process step in classical numerical simulation
algorithm. First of all we have written a structured mesh generator for hexahedral elements in complex terrain
that handles most industry standard formats for terrain elevation and surface roughness and exports the resulting
mesh to several standard formats. The code (WindMesh) is used to generate a ”background mesh” containing the
assimilated topography at high resolution (typical grid sizes range from few to tens of meters in the horizontal)
and has the following characteristics:
• At ground level there exist three diﬀerentiated zones named FARM, TRANSITION, and BUFFER (Fig. 1).
The external BUFFER zone is ﬂat and made up with regular elements, the TRANSITION zone has elements
of variable size and the innermost FARM zone contains ﬁner regular elements. The external BUFFER zone
can be rectangular or circular and is designed to accommodate the inﬂow conditions. The TRANSITION
and FARM zones contain topography and roughness surfaces.
• The vertical distribution of elements can be linear or follow a geometric progression in order to increase
resolution near the ground surface (Fig. 1f). In turn, in cases with high topographic gradients, the vertical
distribution of nodes can be modiﬁed using an elliptic smoothing in order to have ortogonality and prevent
elemental distortion.
• Terrain elevation and roughness contours can be read from MAP or STL format ﬁles, i.e. can be imported
from industry standard commercial codes like WAsP (Wind Atlas Analysis and Application Program). Both
types of contours are interpolated using a Delauney triangulation and the resulting topography and roughness surfaces can optionally be smoothed and rotated to align with the wind attack angle.
• WindMesh outputs results in several standard formats, including a kmz ﬁle to visualize the emplacement
and mesh properties using GoogleEarth (Fig. 1a).
• Preprocessing of tracking points representing the positions of the wind turbines. This facilitates the subsequent post-process of wind results at the turbine locations.
WindMesh generates a background structured mesh. Wind turbines and a downstream higher-resolution zone (to
capture wake eﬀects) are overimposed to the background mesh using a chimera method as explained in section 2.3.

2.2. ABL wind ﬁeld modeling
2.2.1. Governing equations
In this section, we brieﬂy discuss the governing equations for turbulent ﬂow in the Atmospheric Boundary
Layer (ABL). The equations of motion that need to be solved are the Averaged Reynolds Navier-Stokes coupled
with RANS turbulent model equations in a domain Ω ⊂ 3 . We have chosen to use the k − ε turbulent model,
reading as follows
∂u
+ u · ∇u − ∇ · ((ν + νt ) ∇ s u) + ∇p + 2ω × u = f
∂t
∇·u=0
νt
∂k
+ u · ∇k − ∇ · ν +
· ∇k + ε − Pk = 0
∂t
σk

(1)
(2)
(3)

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

2159

Fig. 1. Example of WindMesh output. (a) and (b) show the buﬀer
ﬀ (red), transition (blue), and farm (green) zones as seen in GoogleEarth. (c)
y (d) surface mesh at the diﬀerent
ﬀ
zones. Topography has been smoothed. (e) roughness contours interpolated from a map ﬁle. (f) detail of the
3D mesh.

∂ε
νt
ε2
ε
+ u · ∇ε − ∇ · ν +
· ∇ε + Cε2 − Cε1 Pk = 0
∂t
σε
k
k

(4)

νt = Cμ k2 /ε

(5)

Pk = 2νt ∇ u : ∇ u

(6)

s

s

where equations (1) and (2) are the momentum and mass conservation equations. Here u is the mean velocity
ﬁeld, p is the mean pressure, f is the vector of body forces, ν is the kinematic viscosity of the ﬂuid, and νt is
the eddy viscosity that needs to be modelled. The vector ω is the velocity of rotation of the frame of reference
(|ω| = 7.292 × 10−5 Rad/
d s in our particular case) and 2ω × u is the Coriolis force. The k-ε model is given by
equations (3) and (4) where the two turbulent quantities are the turbulent kinetic energy k and dissipation rate ε.
Here Pk is the production term of kinetic energy, given by expression (6), and the eddy viscosity is modeled in
terms of k and ε by expression (5). The k-ε model constants Cμ , Cε1 , Cε2 , σk and σε are set to its standard values
[2].
Detering [3] concluded that the standard k-ε model when applied to the atmospheric boundary layer under coriolis
force yields a very deep boundary layer, large mixing length (and hence eddy-viscosity) in the upper boundary
layer, and large friction velocity when compared with observations. These deﬁciencies can all be traced to inability
of the k − ε model in its standard form to recognize some ﬁnite upper limit to the mixing length. There exist
diﬀerent
ﬀ
mixing length limitations that can be imposed to the standard k − ε model consisting on increasing the
production term in the ε equation (4). In this work this is done by replacing coeﬃcient Cε1 by Cε1 as proposed by

2160

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

[4]:
Cε1 = Cε1 + (Cε2 − Cε1 )

lm

(7)

lmax
C 3/4 k3/2

where lm is the mixing length, given by lm = μ ε , and lmax is the maximum limited mixing length, which is a
model input to be given.
The boundary conditions for the Navier-Stokes problem (1) - (2) are:
u

= uin

n·σ

=

0

u·n

=

0,

on Γin
on Γout
n · σ · g1 = t1 ,

(8)
(9)
n · σ · g2 = t2

on

Γw

(10)

where σ is the Cauchy stress tensor and n is the unit exterior normal to ∂Ω. The boundary ∂Ω is split into three
sets of disjoint components Γin , Γout and Γw , being respectively the inﬂow part of the boundary (where u · n ≤ 0),
the outﬂow part of the boundary (where u · n > 0), and the surface terrain boundary. In this latter part we prescribe
mixed conditions: normal zero velocity and the tangent stresses, where the vectors g1 and g1 span the space
tangent to Γw . In the ABL a speciﬁc law of the wall including roughness eﬀects needs to be prescribed over Γw ,
where the components of the shear stress vectors t1 , t2 are expressed in terms of the velocity. The shear stress on
the boundary is given by:
t=−

ρu2∗
u
|u|

(11)

where ρ is the ﬂuid (air) density and u∗ is the friction velocity, determined by the following wall law for atmospheric boundary layers:
|u(z = δw )|

=

δw + z0
u∗
log
κ
z0

(12)

where z0 is the terrain roughness and δw is the distance from the wall at which the velocity is evaluated. The
constant κ is the Von Karman constant, taken as κ = 0.41.
Proper boundary conditions have to be added also to the k − ε system of equations (3) - (4). For the case in
which the velocity is prescribed (i.e. on Γin ), k and ε are also prescribed as the solution of an idealized horizontallyhomogeneous one-dimensional problem over a ﬂat plane, wherein the mean velocity uin = (u, v, 0) is function of
the vertical coordinate z alone. In this one-dimensional problem the same Coriolis force, ﬂuid properties, and
maximum mixing length of the 3D problem are considered. On the outﬂow boundary (i.e. on Γout ), where zero
traction is imposed, the boundary conditions for k − ε are:
∂ε
= 0,
∂n

∂k
= 0,
∂n

(13)

where ∂/∂n is the normal derivative on the boundary of Ω. Finally, on the terrain boundary (i.e. on Γw ) boundary
conditions for k and ε including roughness eﬀects are imposed at a distance δw from the wall as:
k(z = δw )

=

ε(z = δw )

=

u∗
Cμ
u3∗
κ(z0 + δw )

(14)
(15)

When a wall law is prescribed for the velocity, u∗ is determined from (12). However, when the non slip condition
u = 0 is imposed on Γw the wall distance is taken as δw = 0 in Eq. (15) and u∗ is determined from
u∗ =

|ν

∂u
|
∂n

(16)

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

2161

2.2.2. Numerical algorithm
The equations described previously are discretized in space using the ﬁnite element method. It is well-known
that Galerkin formulations can lack stability for the Navier-Stokes equations for three main reasons. The ﬁrst
reason is related to the compatibility of the ﬁnite element spaces for velocity and pressure, which have to satisfy the
so-called LBB condition. The second reason is attributed to the relative importance of the viscous and convective
eﬀects. Finally, the third one appears when the Coriolis force becomes important with respect to viscous eﬀects.
We circumvent these instabilities using a stabilized ﬁnite element formulation based on the variational multiscale
method (VMM) [5], using the same interpolation for pressure and velocity spaces. The Navier Stokes equations
are discretized using the algebraical subgrid scale model (ASGS), as described in [6].
Though mathematical results exist ensuring the well-posedness of the k-ε equations, the strong nonlinearities
may interact with discretization errors in such a way as to instabilize computations. A typical behavior of unstable
computations involves the loss of positivity of k or ε. This changes the sign of several terms in the equations,
with disastrous eﬀects. To avoid such loss of positivity we use a linearization scheme that preserves positivity in
the numerical schemme, described in [7]. The k-ε equations are discretized using ﬁnite element methods, with
stabilization based on the VMM, and adding shock capturing terms for crosswind dissipation.

Fig. 2. Left: Example to illustrate the Chimera concept in wind farm modeling. A patch mesh contains the actuator disc, represented by a
body-ﬁtted mesh, and eventually local reﬁnement dowstream. Note that the interior of the disk is also solved so that the mesh covers both the
exterior and interior parts of the rotor. Right: Example of the extension elements used to connect patch and background meshes. A brick patch
meshed with tetrahedral (pyramids) elements contains the actuator disk (shown in blue) and interfaces with a background structured mesh of
hexahedral elements. For clarity, the inset shows a simpler 2D example of extension elements.

2.3. The eﬀects of wind turbines
2.3.1. The actuator disk concept
The eﬀects of the rotor are modeled using the actuator disk concept [1]. In this approximation, the momentum needed to put in motion the wind turbine is extracted from the Navier-Stokes equations. The real rotor is
approximated by a permeable thin cylinder of equivalent area A inside which the total linear momentum sink is
distributed uniformly within a volume V. The rotor model used in this work is based on the 1-dimensional axial
momentum theory for a uniformly loaded rotor and non-rotating ﬂow in which the change of momentum is only
due to pressure diﬀerences across the actuator disc. The expression for the module of the force sink is:
1
2
[N].
(17)
ρACt U∞
2
where the force F is expressed in terms of the upstream velocity module U∞ [m/s] and the rotor thrust coeﬃcient
Ct . This coeﬃcient is rotor dependent and determined experimentally. In order to take into account the actuator
disc, the momentum equation (1) is modiﬁed as:
F=

∂u
+ u · ∇u − ∇ · ((ν + νt ) ∇ s u) + ∇p + 2ω × u = f + δV F/(ρV)n,
∂t

(18)

2162

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

where δV is the delta Dirac function with support in the cylinder V and n is the cylinder unit normal pointing
towards the incoming ﬂow.
When implementing the actuator disk in a ﬁnite element code one faces two diﬃculties. The ﬁrst one is the
geometrical representation of the rotor inside the mesh. The second one concerns the accuracy of the solution in the
wakes of the rotor. Regarding this last point, accurate calculations in the neighboring of the rotor are essential for
a proper estimation of the wind farm power. This requires mesh reﬁnement in the wake, which is computationally
tricky when treating with structured or Cartesian meshes. As far as the geometrical representation of the cylinder
is concerned, we have several options. On the one hand, the mesh can be locally adapted to represent the disk
in which the momentum is extracted. This technique requires to adapt the mesh for each conﬁguration and is
quite diﬃcult to implement for structured and Cartesian meshes. In fact, one direction should necessarily be
aligned with the cylinder. On the other hand, Chimera or overset techniques oﬀer a nice alternative to face the two
aforementioned diﬃculties.
2.3.2. Chimera method
The Chimera Method was originally developed in [8, 9, 10] to simplify the construction of computational
meshes about complex geometries. This is achieved by breaking the geometries into components and generating
independent meshes for each subdomain, which gives a great ﬂexibility on the choice of the type of element, their
orientation and local mesh reﬁnement. The components are further coupled by imposing transmission conditions
(typically done using domain decomposition methods, DDM) from one mesh to the other to obtain a global solution. The idea of the Chimera method in the present context is to create a structured background mesh of the order
of kilometers including the terrain, and place inside it mesh patches containing the rotors as illustrated in Figure
2.
The Chimera Method can be seen as a preprocess technique, named hole cutting, plus a domain decomposition
method to couple overlapping and non-conforming meshes. The hole cutting consists in removing the elements of
the background mesh located inside the patch mesh. It is essentially a pre-process step. Once the hole is created,
we are left with two unconnected slightly overlapping meshes, or subdomains, with apparent interfaces. The coupling between the subdomains is usually achieved via transmission conditions to impose both the continuities of
the unknown and it ﬂux across the subdomain interfaces. There are many possibilities to achieve these continuities using DDM. An extensive bibliography of DDM can be found in [11]. Traditionally, the coupling has been
mainly achieved in an iterative way, leading to a family of DDM referred to as iteration-by-subdomain methods.
To circumvent the inherent non-linearity of iteration-by-subdomain methods, we have developed an alternative
coupling strategy. It consists in connecting the two independent meshes by creating some new elements, called
extension elements. These extension elements connect the nodes of one subdomain with the nodes of the adjacent
subdomain. In Figure 2, we illustrate the process of constructing the extension elements from the patch to the
background. Extension elements are also necessary in the other way, that is to connect the background interface
to the patch.
The creation of extension elements consists in the following process:
• Identify the interface nodes.
• For each interface node, identify the surrounding nodes in the adjacent subdomain.
• From the interface node and using the surrounding nodes, create the best elements (using some quality
criterion).
The extension elements are created to connect the interface nodes to the nodes of the adjacent subdomain by
forming a global shape function with compact support for the interface nodes. In the element loop, only the
equation for the corresponding interface nodes should be assembled when dealing with the extension elements of
these nodes. In 3-dimensional cases, the process is not straighforward mainly due to the restriction for closing
the extension. Figure 2 shows an example of extension elements where two subdomains are coupled: the patch
mesh containing the rotor, composed of non-strucutured tetrahedra; the background mesh containing the terrain.
In this case, the extension elements for the patch interface are tetrahedra and for the background interface they are
pyramids.

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

2163

Fig. 3. Vertical proﬁles of wind velocity components (left) and eddy viscosity (right) using the standard k-ε model (ı.e. lmax → ∞) and the
ABL k-ε model modiﬁed by limiting the mixing length as explained in section 2.2.1 ( lmax = 36m in this case). Note how the second option
improves substantially the ﬁts to the experimental Leipzig proﬁle data, indicated by crosses.

2.4. Alya parallel solver
The equations have been implemented in the Alya parallel solver, a HPC code developed at Barcelona Supercomputing Center that is able to run with thousands of processors with an optimal scalability. The parallelization
in Alya is based on a sub-structuring technique, using a Master-Slave strategy. A ﬁrst step is carried out to partition the original mesh and distribute the corresponding geometrical and simulation data to the slaves. From the
Master’s and Slaves’ point of view, it consists of:
• Master: reads the mesh, creates the mesh partition, sends each sub-mesh and simulation data to the corresponding slaves.
• Slaves: receive their sub-mesh. The partition has been carried out element-wise so the slaves only share
interface nodes.
One important point of these preprocess steps is the scheduling of the communication strategy. All along the
simulation, neighboring slaves will have to exchange data on their interfaces. The order of the communications is
of real signiﬁcance to obtain a good scalability. At this point, the Master does no longer have any mesh dependent
variable, as they are distributed among the slaves. As a second step, the simulation can continue as follows:
• Master: is in charge only of output tasks like convergence, time steps, etc.
• Slaves:
– Assembly: they assemble their local matrices via an element loop.
– Algebraic solvers: the slaves perform their local matrix-vector products and dot products (basic operations of iterative solvers). The matrix-vector product is assembled on the interfaces between subdomains using the MPI function MPI SendRecv. The dot products are assembled using the MPI function
MPI AllReduce
A
.
Figure ?? illustrates in a simpliﬁed way the ﬂowchart of the parallel execution of Alya. The communications
are drawn with dotted lines to outline the two main kinds of communication present in the solver. For further
information on the parallelization of Alya, see [12].
3. Preliminary Results
Here we show some preliminary results of the project (ﬁrst year), in particular of wind modeling in complex
terrain. As explained, the eﬀect
ﬀ of wind turbines is still under implementation in the Alya code.

2164

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

Fig. 4. Vertical proﬁles of wind turning angle (α = 0o at z = 3000m) and mixing length proﬁles using the standard k-ε model (ı.e. lmax → ∞)
and the ABL k-ε model modiﬁed by limiting the mixing length as explained in section 2.2.1 ( lmax = 36m in this case). Experimental
measurements showed a surface wind turned by 26.1o from the geostrophic and a friction velocity of u∗ = 0.65 m
m/s. The standard k − ε
predicts too large friction velocity u∗ = 0.81 m/
m s whereas the limited length model predicts u∗ = 0.676 m/
m s. The surface wind is turned only
15o when using the standard k-ε model and 27o when using the mixing length correction, in excellent agreement with measurements.

3.1. Leipzig wind proﬁle
The implementation of the boundary conditions for wind model for the ABL has been tested using the problem
considered in [4]. In this problem an idealized horizontally-homogeneous, atmospheric boundary layer over a ﬂat
plane is considered, wherein the mean velocity U = (u, v, 0) is function of the vertical coordinate z alone. The aim
of the present example is to show the diﬀerence
ﬀ
of the obtained results when using the standard k-ε model and
when adding the limited mixing length correction (7). Comparisons between the obtained results and experimental
values is done.
The problem is deﬁned by a computational height of z ∈ [0, 3000] (in m), a wind velocity at the top prescribed to
u = 17.5 m/
m s and aligned with the geostrophic wind (α = 0o ), and a constant roughness length of z0 = 0.3 m. The
Coriolis force corresponds to that of a latitude 45 degrees N, and the maximum mixing length in the correction
model is taken as lmax = 36 m. Figures (3) and (4) compare the obtained velocities, eddy viscosity, angle of
turning of the wind and mixing length proﬁles, using the standard k − ε model and the modiﬁcations introduced
by [4]. The ABL model that better adjusts to experimental measurements is the limited length scale model. The
standard k −ε model predicts too large mixing length and therefore kinematic viscosity. The results obtained using
the mixing length correction are clearly observed to be much more accurate than if no using any correction.
3.2. Wind in complex terrain
We have modeled wind ﬁeld in several wind farms considering 16 characteristic inﬂow wind directions. Figure
5 shows results for a domain of 20 × 20km in the horizontal and 8km in the vertical meshed with 3M hexahedra.
Element resolutions range from 20m in the inner farm zone to 300m in the buﬀer
ﬀ zone. In the vertical start from
0.5m in the ﬁrst layer and follow a geometrical distribution.
4. Conclusions
A complete CFD modeling strategy for the simulation of wind farms is presented in this work.
The ﬁnite element discretizations of the Navier Stokes and k − ε equations is stable and gives accurate results
when comparing against experiments. To be able to solve these equations we have developed a mesher software
capable to interpolate the topography.
Chimera method is implemented in order to place the wind turbines and perform a mesh reﬁnement for the
near wakes, simplifying the construction of the computational mesh.

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

2165

Fig. 5. Results for ABL simulations of a wind farm in Spain. (a) wind speed at surface. (b) Wind velocity in a vertical cut along the inﬂow
wind direction. (c) pressure at surface. (d) turbulent kinetic energy at surface.

The model is implemented in Alya, a High Performance Computing multi physics parallel solver developed at
Barcelona Supercomputing Center. The obtained model is robust, stable and capable of solving wind farms with
complex topographies in a pair of hours.
Acknowledgements
The research of G. Houzeaux is being partly done under a I3 contract with the Spanish Ministerio de Ciencia
e Inovaci´on. The work of B. Eguzkitza is ﬁnanced by a scholarship from the Fundaci´on IBERDROLA supporting
the project ”Optimization of wind farms using computational ﬂuid dynamics”.
References
[1] B. Sanderse, S. van der Pijl, B. Koren, Review of computational ﬂuid dynamics for wind turbine wake aerodynamics, Wind Energ. 14
(2011) 799–819.
[2] B. Launder, B. Sharma, Application of the energy-dissipation model of turbulence to the calculation of ﬂow near a spinning disc, Lett.
Heat Mass Transf. 1 (1974) 131–138.
[3] H. Detering, D. Etling, Application of the e − turbulence model to the atmospheric boundary layer, boundary-Layer Meteorology. 33
(1985) 113–133.
[4] D. Apsley, I. Castro, A limited-length-scale k- model for the neutral and stably-stratiﬁed atmospheric boundary layer stationary incompressible ﬂows, Boundary-Layer Meteorology 83 (1997) 75–98.
[5] T. Hughes, Multiscale phenomena: Green’s function, the Dirichlet-to-Neumann formulation, subgrid scale models, bubbles and the
origins of stabilized formulations, Computer Methods in Applied Mechanics and Engineering 127 (1995) 387–401.
[6] R. Codina, A stabilized ﬁnite element method for generalized stationary incompressible ﬂows, Computer Methods in Applied Mechanics
and Engineering 190 (20–21) (2001) 2681–706.
[7] R. Codina, O. Soto, Finite element implementation of two-equation and algebraic stress turbulence models for steady incompressible
ﬂows, IJNMF 30 (1999) 309–334.
[8] J. Steger, F. Dougherty, J. Benek, A chimera grid scheme, Advances in Grid GEneration 5 (1983) 59–69.
[9] J. Benek, P. Buning, J. Steger, A 3-d chimera grid embedding technique. 1985, AIAA Paper (1985) 85–1523.
[10] J. Steger, J. Benek, On the use of composite grid schemes in computational aerodynamics, Comp. Meth. Appl. Mech. Eng. 64 (1987)
301–320.
[11] A. Quarteroni, A. Valli, Domain decomposition methods for partial diﬀerential
ﬀ
equations, Oxford University Press, USA, 1999.

2166

M. Avila et al. / Procedia Computer Science 18 (2013) 2157 – 2166

[12] G. Houzeaux, M. V´azquez, R. Aubry, J. Cela, A massively parallel fractional step solver for incompressible ﬂows, J. Comput. Phys.
228 (17) (2009) 6316–6332.

