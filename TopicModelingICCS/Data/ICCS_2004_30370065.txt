Solving Diﬀerential Equations in Developmental
Models of Multicellular Structures Expressed
Using L-systems
Pavol Federl and Przemyslaw Prusinkiewicz
University of Calgary, Alberta, Canada

Abstract. Mathematical modeling of growing multicellular structures
creates the problem of solving systems of equations in which not only the
values of variables, but the equations themselves, may change over time.
We consider this problem in the framework of Lindenmayer systems,
a standard formalism for modeling plants, and show how parametric
context-sensitive L-systems can be used to numerically solve growing
systems of coupled diﬀerential equations. We illustrate our technique
with a developmental model of the multicellular bacterium Anabaena.

1

Introduction

Recent advances in genetics have sparked substantial interest in the modeling
of multicellular organisms and their development. Modeling information transfer
through cell membranes is a vital aspect of these models. Diﬀusion of chemicals is
one example of a transfer mechanism, and can be mathematically expressed as a
system of ordinary diﬀerential equations (ODEs). Due to the developmental nature of the models, this system changes as the cells in the organism divide. Such
dynamically evolving systems of equations are not easily captured by standard
mathematical techniques [2].
The formalism of L-systems [6] lends itself well to modeling developmental processes in organisms. Prusinkiewicz et al. introduced diﬀerential L-systems
(dL-systems) [10] as a notation for expressing developmental models that include
growing systems of ODEs, but left open the problem of solving these equations.
From the viewpoint of software organization these equations can be solved either
using an external solver or within the L-system formalism itself. The ﬁrst technique induces substantial overhead due to repetitive transfers of large amounts
of data to and from the solver in each simulation step. As an alternative, we
present a mechanism where the system of ODEs is internally maintained, updated, and solved by an L-system. We adapt to this end an implicit (CrankNicholson) integration scheme, whereas previous approaches only used simpler,
explicit methods [2,7]. We illustrate our solution by revisiting the diﬀusion-based
developmental model of the blue-green alga Anabaena catenula [1,8,11], deﬁned
using a dL-system [10].
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 65–72, 2004.
c Springer-Verlag Berlin Heidelberg 2004

66

2

P. Federl and P. Prusinkiewicz

L-systems and the L+C Language

In the formalism of L-systems [6], growing biological structures are represented as
strings of modules [11]. The initial structure is the axiom. An L-system describes
the development of this structure in terms of rewriting rules or productions. Each
production replaces its the predecessor module by zero, one, or more successor
modules. For example, the production A → AB replaces module A by a structure consisting of a new module A and a new module B. In general, productions
can be context free, with productions matched only to the predecessor module,
or context-sensitive, with productions matched also to the predecessor’s neighbors. The context-sensitive productions make it possible to simulate information
transfer within developing structures.
The algorithms presented in this paper are speciﬁed in the L+C programming language [4,5], which combines the declarative programming style of Lsystems with C++ constructs. The L+C modules are declared by the keyword
module, e.g. module B(int, double). The initial string is preceded by the keyword axiom, e.g. axiom: B(1,7.0). The body of a production, delimited by
curly braces, may include any valid C++ statement. An example of a contextsensitive production is:
A(n) < B(i,j) > C() : { if (i < j) produce D(i+n,j-n); }
The body of this production is executed for every module B that has a module
A on its left and C on its right side. If the parameter i of module B is less than
its parameter j, the module B will be replaced by a module D with updated
parameters. This is denoted by the keyword produce inside the if statement.
Although L-systems have been deﬁned as a parallel rewriting mechanism,
they are commonly implemented by sequentially scanning the predecessor string
to obtain the successor string. In L+C we take advantage of this fact. The scanning direction is chosen at each derivation step by calling functions Forward()
or Backward(). As the successor string is being generated, the newly created
modules in the string can be used for context matching, using the symbols ‘<<’
for the new left context and ‘>>’ for the new right context. For example, consider
a string of modules A with integer parameters A(1)A(2)A(3)A(4)A(5) and a
production
A(nc) << A(n) : produce A(nc+n);
This string will be transformed into A(1)A(3)A(6)A(10)A(15) in a single derivation step.
Productions in L+C can be arranged into groups using the construct group
<n>: <productions>, where n is an integer identiﬁer. The active group of productions can be selected dynamically by calling the function UseGroup(n). The
L+C constructs Start and StartEach are used to denote blocks of C++ code
that are executed at the beginning of the simulation and at the beginning of each
derivation step. Both constructs are useful when the derivation of the string is
divided into separate phases.

Solving Diﬀerential Equations in Developmental Models

3

67

The Anabaena Model

Anabaena is a bacterium that forms non-branching multicellular ﬁlaments consisting of two classes of cells: vegetative cells and heterocysts [8]. A vegetative
cell may divide into two vegetative cells, or diﬀerentiate into a heterocyst. In
spite of the cell division, the spacing between heterocysts is relatively constant,
with approximately 10 vegetative cells separating the heterocysts on the average
Mathematical models of this phenomenon [1,7,11] postulate that the distribution
of heterocysts is regulated by a compound produced by the heterocysts, diﬀusing
from cell to cell along the ﬁlament, and decaying in the vegetative cells. If the
compound concentration in a vegetative cell falls below a threshold level, this
cell diﬀerentiates into a heterocyst.
A model operating in continuous time according to this description can be
captured by the following dL-system [10]:
axiom: Fh (smax , cmax )Fv (smax , cmax )Fh (smax , cmax )
F (sl , cl ) < Fv (s, c) > F (sr , cr ) :
if s < smax & c > cmin
solve dc/dt = D · (cl + cr − 2c) − µc and ds/dt = rs
if s = smax & c > cmin
produce Fv (ksmax , c)Fv ((1 − k)smax , c)
if c = cmin
produce Fh (s, c)
Fh (s, c):
solve ds/dt = rs (smax − s) and dc/dt = rc (cmax − c)
According to this model, a vegetative cell Fv or heterocyst Fh is characterized
by its length s and compound concentration c. If the vegetative cell length s is
below the maximum value smax and the compound concentration c is above the
threshold cmin , the concentration changes according to the equation dc/dt = D ·
(cl −2c+cr )−µc. This equation combines diﬀusion of the compound c according
to Fick’s law with the decay of c. The second diﬀerential equation characterizing
Fv describes exponential elongation of cells according to the equation: ds/dt =
rs.
In addition to these diﬀerential equations, two productions describe the behavior of a vegetative cell. If the cell reaches maximum length smax while the
concentration c is still above the threshold cmin , the cell will asymmetrically
divide into two vegetative cells of length ksmax and (1 − k)smax , with the compound concentration c inherited from their parent cell. Otherwise, if the concentration c drops down to the threshold cmin , the cell will diﬀerentiate into a
heterocyst. The last line of the dL-system speciﬁes the behavior of heterocysts.
Their length and compound concentration converge exponentially to the limit
values of smax and cmax , according to the equations: dc/dt = rc (cmax − c) and
ds/dt = rs (smax − s). The heterocysts do not undergo any further division.

68

P. Federl and P. Prusinkiewicz

4

Solving the dL-systems

A dL-system can be viewed as a formal statement of a problem that requires
a solution. The simplest technique for numerically solving the ODEs from the
previous section is the forward Euler method, where time derivatives are replaced with a forward ﬁnite diﬀerence approximation. This approach to solving
diﬀerential equations in the framework of L-systems was presented in [3]; for the
Anabaena dL-system it leads to the following system of equations:
(C i+1 − C i )/∆t = D · Cli − 2C i + Cri − µC i ,
i+1

i

i

(S
− S )/∆t = rS ,
i+1
(C
− C i )/∆t = rc (cmax − C i ) ,
(S i+1 − S i )/∆t = rs (smax − S i ) .

(1)
(2)
(3)
(4)

Here S i and C i denote the approximations of the cell length s and compound
concentration c at time step i; time intervals have size ∆t. Equations (1)-(4)
deﬁne explicitly how the new values S i+1 and C i+1 are calculated using the
previous values S i and C i . Subscripts l and r refer to the left and right neighbors
of a given cell.
Although explicit integration is simple and can be easily expressed in L+C as
a part of developmental models, it is inaccurate and prone to numerical instabilities. This is especially true for stiﬀ diﬀerential equations, such as Equation (1)
with a high diﬀusion constant D. Implicit schemes are much more appropriate for
stiﬀ equations. Discretizing the same ODEs using the implicit Crank-Nicholson
scheme [9] yields:
Cli − 2C i + Cri + Cli+1 − 2C i+1 + Cri+1
2
C i + C i+1
,
−µ
2
(S i+1 − S i )/∆t = r(S i + S i+1 )/2 ,
(C i+1 − C i )/∆t = rc cmax − (C i + C i+1 )/2 ,

(5)

(S i+1 − S i )/∆t = rs smax − (S i + S i+1 )/2

(8)

(C i+1 − C i )/∆t = D

.

(6)
(7)

The relationships between the new and old values are now deﬁned implicitly, by
a system of linear equations. The coeﬃcient matrix representing Equations (5)
is tridiagonal, which leads to an eﬃcient solution using a modiﬁed Gaussian
elimination. Below we show that this elimination can be eﬃciently implemented
using L-systems and L+C.
4.1

Solving Tridiagonal Systems of Linear Equations with L-systems

Let us consider a system of n linear equations with n unknowns described by a
tridiagonal coeﬃcient matrix. Such a system can be expressed as:
ai Xi−1 + bi Xi + ci Xi+1 = yi for 1 ≤ i ≤ n ,

(9)

Solving Diﬀerential Equations in Developmental Models

69

where ai , bi , ci and yi are the coeﬃcients of the equations, and Xi ’s denote the
unknowns. This system of LEs can also be written in matrix form as AX = Y ,
T
where X = [X1 , · · · , Xn ] is the column vector representing the unknowns,
T
Y = [y1 , · · · , yn ] represents the constant terms, and A is the coeﬃcient matrix:


b1
a2

0

A=.
 ..

0
0

c1
b2
a3
..
.

0
c2
b3
..
.

0
0
c3
..
.

···
···
···
..
.

0
0
0
..
.

0 0 0 · · · bn−1
0 0 0 · · · an

0
0
0
..
.










cn−1 
bn

(10)

We solve this system of LEs in linear time using Gaussian elimination optimized
to perform row subtractions only between non-zero coeﬃcients. This process
consists of two phases [9]. In the ﬁrst phase, the coeﬃcients below the diagonal are eliminated. Since the only coeﬃcients of A below the diagonal are the
coeﬃcients ai , this phase corresponds to calculating new values for coeﬃcients
ai , bi , ci and yi such that ai = 0. To this end, the coeﬃcients of each row are
recalculated using the following substitutions:
ai ← 0 , bi ← bi −

ai
ai
c
, ci ← ci and yi ← yi −
y
.
bi−1 i−1
bi−1 i−1

(11)

These substitutions are applied iteratively, for i increasing from 2 to n. In the
second phase the coeﬃcients above the diagonal ci are eliminated. This is accomplished by applying the following substitutions:
ai ← 0 , bi ← bi , ci ← 0 and yi ← yi −

ci
bi+1

yi+1 .

(12)

These substitutions are applied in reverse order, for i decreasing from n − 1 to
1. At the end of the second phase the coeﬃcient matrix has non-zero entries
strictly on the diagonal and the solution can be trivially found as Xi = yi /bi .
To implement this two-phase process using an L-system, we represent the
system of tridiagonal LEs by a string of modules C. Each module C has a single
parameter p of type struct CD that holds the non-zero entries of one row:
struct CD { double a, b, c, y; };
module C (struct CD);
The following L+C productions implement the two phases speciﬁed by Equations
(11) and (12):
group 1: C(pl) << C(p) : { p.y=p.y-pl.y*p.a/pl.b;
p.b=p.b-pl.c*p.a/pl.b; produce C(p); }
group 2: C(p) >> C(pr) : { p.y=p.y-pr.y*p.c/pr.b;
produce C(p); }

70

P. Federl and P. Prusinkiewicz

Each phase is performed in a single sequential derivation step. We use a global
variable phase to set the direction of processing at the beginning of each derivation step and to decide which group of productions will be applied during that
phase:
int phase;
Start: { phase=1; }
StartEach: {
if (phase == 1) { Forward (); UseGroup (1); phase=2; }
else { Backward (); UseGroup (2); phase=1; } }
4.2

Implementation

The complete developmental model of Anabaena based on Equations (5)-(8) is
obtained by complementing the solution to the diﬀusion Equation (5), presented
above, with the solution to Equations (6)-(8). To solve Equation (5) we transform
it to the form of Equation (9) using the substitutions:
a0 = c0 = an = cn = 0 , b0 = bn = 1 ,
2C i + 2smax rs ∆t − C i ∆trs
,
y0 = yn =
2 + rs ∆t
1
+ 2D + µ ,
ai = ci = −D , bi =
∆t
2C i
+ D · Cli − 2C i + Cri − µC i .
yi =
∆t

(13)
(14)
(15)
(16)

for 1 < i < n. The resulting system of LEs is solved using the method outlined
in Sec. 4.1. Since no information transfer is involved in Equations (6)-(8), they
can be expressed in closed form as:
2 + r∆t i
S ,
2 − r∆t
2C i + 2cmax rc ∆t − C i rc ∆t
=
,
2 + rc ∆t
2S i + 2smax rs ∆t − S i rs ∆t
=
.
2 + rs ∆t

i+1
Sveg
=

(17)

i+1
Chet

(18)

i+1
Shet

(19)

To implement the solution based on these formulas using an L-system, we represent the growing ﬁlament again as a string of modules C. The parameter of the
module C is of type struct CD, declared as:
struct CD { double s, con, a, b, c, y; bool h; };
The ﬁelds s and con denote the size of the cell and the concentration of the
diﬀusing compound, respectively. The ﬁelds a, b, c and y represent the coeﬃcients of the system of LEs described in Sec. 4.1. We use ﬁve logical phases to
update the state of this ﬁlament in a time step ∆t. In the ﬁrst phase the new
cell sizes are calculated using (17), and the system of LEs is initialized according
to Equations (13)-(16). This phase is implemented by two productions:

Solving Diﬀerential Equations in Developmental Models

71

Fig. 1. Simulation results obtained using the implementation based on the CrankNicholson integration scheme. The following simulation constants were used: smax = 1,
cmax = 255, cmin = 5, D = µ = 0.03, r = 0.01, k = 0.37, rs = 0.1, rc = 0.15,
∆t = 28.57. Each cell is represented by a rectangle whose width and height correspond
to the cell’s size and concentration of the compound, respectively. The tallest dark bars
represent the heterocysts, the lighter shaded bars represent vegetative cells.

group 1: C(pl) < C(p) > C(pr): {
if (p.h) {
p.y=(2*p.con+2*cmax*dt*rc-p.con*dt*rc)/(2+dt*rc);
p.s=(2*p.s+2*smax*dt*rs-p.s*dt*rs)/(2+dt*rs);
p.a=0; p.b=1; p.con=0; produce C(p); }
else {
p.a=-D; p.b=2/dt+2*D+mu; p.c=-D;
p.y=2*p.con/dt+D*(cl.con-2*p.con+cr.con) - mu*p.con;
p.s=(2+r*dt)/(2-r*dt)*p.s; produce C(p); } }
C(p) : { p.a=p.c=0; p.b=1; p.y=p.con; produce C(p); }
The ﬁrst production is applied to every module except the ﬁrst and last. The
second production is applied to the ﬁrst and last modules. The LEs are then
solved in the next two phases, using productions identical to those given in the
previous section. In the fourth phase the solution is extracted and the ﬁfth phase
implements division and diﬀerentiation of cells:
group 4: C(p): { p.con=p.y/p.b; produce C(p); }
group 5: C(pl) < C(p) > C(pr) : {
if (p.h) { produce C(p); }
else if (p.s >= smax && p.con > cmin) {
CD p1=p; p1.s=k*p.s; CD p2=p; p2.s=(1-k)*p.s;
produce C(p1) C(p2); }
else if (p.con < cmin) { p.h=true; produce C(p); }
}
The switching between the ﬁve phases is accomplished by extending the method
discussed in Sec. 4.1. The initial steps of a simulation obtained using the above
L-system are shown in Fig.1.

5

Conclusions

The modeling of developing organisms raises the problem of formulating mathematical models in which the set of variables that describes the system, and the

72

P. Federl and P. Prusinkiewicz

system of equations that relate these variables, dynamically change [2]. We presented a method for automatically modifying and solving these equations using
the formalism of L-systems. The underlying numerical integration method is the
Crank-Nicholson method [9]. We illustrated our approach using a model of a
ﬁlamentous bacterium Anabaena. This organism captures the essential elements
of the development of a multicellular structure: division and diﬀerentiation of
cells, and signaling between cells. Although we have only considered a very simple model for illustrative purposes, the use of the implicit method for solving the
ODEs is essential to extensions of this model. For example, the process of gradual
cell division, during which the diﬀusion constants between incompletely divided
cells are large, can easily be incorporated into the model. Other potential applications of the proposed method include biomechanical and functional-structural
models of plant architecture.
Acknowledgments. We thank Brendan Lane, Lynn Mercer and Colin Smith
for editorial help. The support from the Human Frontier Science Program and
the National Sciences and Engineering Research Council of Canada is gratefully
acknowledged.

References
1. C. G. de Koster and A. Lindenmayer. Discrete and continuous models for heterocyst diﬀerentiation in growing ﬁlaments of blue-green bacteria. Acta Biotheoretica,
36:249–273, 1987.
2. J.-L. Giavitto and O. Michel. Modeling the topological organization of cellular
processes. BioSystems 2003, 70:149-163.
3. M. Hammel and P. Prusinkiewicz. Visualization of developmental processes by
extrusion in space-time. Proceedings of Graphics Interface ’96, pp 246–258, 1996.
4. R. Karwowski. Improving the process of plant modeling: The L+C modeling language. PhD thesis, University of Calgary, 2002.
5. R. Karwowski and P. Prusinkiewicz. Design and implementation of the L+C modeling language. Electronic Notes in Theoretical Computer Science, 86.2, 2003.
6. A. Lindenmayer. Mathematical models for cellular interaction in development,
Parts I and II. Journal of Theoretical Biology, 18:280–315, 1968.
7. A. Lindenmayer. Adding continuous components to L-systems. In G. Rozenberg
and A. Salomaa, editors, L Systems, Lecture Notes in Computer Science 15, pages
53–68. Springer-Verlag, Berlin, 1974.
8. G. J. Mitchison and M. Wilcox. Rules governing cell division in Anabaena. Nature,
239:110–111, 1972.
9. W. H. Press, S. A. Teukolsky, and W. T. Wetterling. Numerical recipes in C: The
art of scientiﬁc computing. Second edition. Cambridge University Press, 1988.
10. P. Prusinkiewicz, M. Hammel, and E. Mjolsness. Animation of plant development.
Proceedings of SIGGRAPH 93 (Anaheim, California, August 1–6, 1993). ACM
SIGGRAPH, New York, 1993, pp. 351–360.
11. P. Prusinkiewicz and A. Lindenmayer. The algorithmic beauty of plants. SpringerVerlag, New York, 1990. With J. S. Hanan, F. D. Fracchia, D. R. Fowler, M. J.
M. de Boer, and L. Mercer.

