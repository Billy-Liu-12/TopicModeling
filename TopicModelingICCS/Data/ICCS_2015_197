Procedia Computer Science
Volume 51, 2015, Pages 1043–1051
ICCS 2015 International Conference On Computational Science

Conditional Synchronization in Multi-Agent Graph-based
Knowledge System
Leszek Kotulski1 , Adam S¸edziwy1 and Barbara Strug1,2
1

2

Department of Applied Computer Science,
AGH University of Science and Technology
Al. Mickiewicza 30, 30 059 Krakow, Poland
Department of Physics, Astronomy and Applied Computer Science,
´
Jagiellonian University, ul. Lojasiewicza
11 , Krakow, Poland
{kotulski,sedziwy,bstrug}@agh.edu.pl

Abstract
Graph transformations provide a well established method for the formal description of modiﬁcations of graph-based systems. On the other side such systems can be regarded as multi-agent
ones providing a feasible mean for maintaining and manipulating large scale data. This paper
deals with the problem of information exchange among agents maintaining diﬀerent graphbased systems. Graph formalism applied for representing a knowledge maintained by agents is
used at the same time to perform graph transformations modeling a knowledge exchange. The
consistency of knowledge represented by set of agents is ensured by execution of some graph
transformations rules by two agents in a parallel way. We sugest that complex operations
(sequences of graph transformations) should be introduced instead of the formalism basing on
simple unconditional operations. The approach presented in this paper is accompanied by examples concerning the problem of personal data distributed over diﬀerent places (and maintained
by diﬀerent agents) and transmitted in such an environment1 .
Keywords:

1

Introduction

Building knowledge bases is an important element of the general data collection trend. Many
diﬀerent institutions hold a lot of diﬀerent data that need to be transformed into accessible
information referred to as a knowledge. Together with the growth of the data volume its
complexity increases as well. As a result it becomes infeasible to keep and process all data in a
single database. Moreover, there may exist additional factors preventing storage and processing
of sensible data in some databases (e.g. legal and data protection requirements). The overview
1 Financial support for this study was provided from resources of National Center for Research and Development, the grant number NCBiR 0021/R/ID2/2011/01.

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.253

1043

Conditional Synchronization in Graph-based MAS

Kotulski, S¸edziwy and Strug

of the state of art shows that besides the mechanisms of translation between various data
formats (e.g., between diﬀerent database platforms), which is commonly known, there is no
formal, high level description of the information exchange in heterogeneous environments.
As distributed models of data and computing become more and more popular (especially in
the context of the rapid development of Internet and availability of distributed software development platforms) there is a need of the formal model enabling data representation, modiﬁcation
and exchanging in such distributed and complex systems.
It is likely that diﬀerent portions of a knowledge about some entity is held in diﬀerent
places so such a structure can be seen as a multi-agent system consisting of individual agents
responsible for maintaining data sets held in each particular institution/entity. A need for data
exchange arising within such a distributed environment triggers a cooperation among those
autonomous agents, which posses pieces of information. In the typical scenario, responding to
an external query requires gathering data originating from several agents.
Since a type of data/knowledge maintained by diﬀerent entities (and associated agents)
becomes more and more complex, and in many cases more and more structured, we require a
representation capable of capturing not only the inherent complexity of a knowledge, but also
its complex relations.
It is known that in many cases that graphs are the highly suitable representation for modeling
complex objects in diﬀerent domains of computer science [18]. They have the ability to represent
the structure of data as well as the diﬀerent types of relations among their elements what makes
them particularly useful as the mean of representing complex information. This trend can be
also observed in the emergence of graph databases, which are often proposed as better suited
for complex knowledge systems than traditional relational databases, especially in searching for
some special connections [17].
Thus each formal model of a knowledge base has to address three elements:
• representation of knowledge and its components,
• knowledge modiﬁcation (including structural updates),
• exchanging of data among diﬀerent systems which do not have to be based on the same
representational scheme.
In [14] the approach to the problem of information exchange in a heterogeneous system
was proposed. This approach was based on the concept of ”pairing” of graph transformations
belonging to diﬀerent transformation systems located on the opposite sides of a communication
channel, i.e. a one-to-one transformation triggering.
In this paper we extend this approach to enable more complex transformation synchronization. The proposed model relies on the distributed, possibly heterogeneous information,
represented in a graph form, and uses graph transformations as a basis for a knowledge transmission.
The approach is based on the earlier research in the domain of application of the theory of
formal languages in various domains such as computer aided design [6, 7, 13, 19] and distributed
model of computations [5, 18, 10, 11, 12]. In particular graph grammars [1, 6, 8, 15] and grammar
systems [2, 3, 4] were used as the inspiration for this research as well as graph cohesion and
cooperation.
1044

Conditional Synchronization in Graph-based MAS

2

Kotulski, S¸edziwy and Strug

Knowledge representation and modiﬁcation

In this paper the graph-based approach is considered so all pieces of knowledge are represented
by labeled graphs. There are several beneﬁts of using graphs as a representation of knowledge.
Mainly they are well deﬁned simple mathematical objects, which have graphical representations
allowing for an easy visualization. There is also a number of eﬃcient algorithms for processing
graphs. Graphs may be equipped with a logical semantics. Moreover, they are known to allow
for uniform formal description of a knowledge, its elements, relations among those elements as
well as any additional attributes. This feature allows us to combine both syntactic and semantic
information within the same structure. Thus, they form a good basis for formal description of
all aspects of knowledge processing.

2.1

Knowledge representation

Let a given graph database contains information about a number of objects, each having some
properties and being related to other objects. Let ΣV , ΣE be sets of node and edge labels
respectively, denoting the semantics of elements, let AV , AE be sets of node and label attributes
respectively, denoting particular features of elements, and Da be a set of possible values of an
attribute a ∈ A. A graph G is deﬁned over Σ = ΣE ∪ ΣV in the following way.
Deﬁnition 1. A labeled and attributed graph over Σ = ΣE ∪ΣV is a system G = (V, E, lab, att),
where:
• V is a ﬁnite set of nodes; E ⊆ V is a ﬁnite set of edges,
• lab = (labV , labE ) is a labeling function, where: labV : V → ΣV , labE : E → ΣE ;
• att = (attV , attE ) is an attributing function, where: attV : ΣV → P (AV ), attE : ΣE → P (AE )
and AV , AE are sets of node and edge attributes respectively;
The family of all labeled and attributed graphs is denoted by H .
In the sequel Gi will denote a graph representing a knowledge held by an agent Ai .
Let val = (valV , valE ) be a mapping assigning an attribute value, where:
valV : AV × V → Da , valE : AE × E → Da
assign a value to a given attribute a of a node/edge and Da is called a domain of a node/edge
attribute. The set of all val functions will be denoted as V AL.
Deﬁnition 2. An instance of a labeled and attributed graph over Σ = ΣE ∪ ΣV is a pair
ˆ will be denoted as Hˆ .
ˆ = (G, val) ∈ H ×V AL. The family of all instances G
G
The deﬁnition presented above introduces a very general notion of a graph representation
of knowledge and it does not put any strict constraints on a type of graph used in a given
graph database. In the case of RDF graphs, which become increasingly popular as a mean to
represent a semantic knowledge on the web, a set of nodes would consist of resources (objects)
represented in a given graph, with ΣV being a set of names of these objects, while ΣE would
consist of the names of RDF properties. In the case of RDF graphs a set of attributes A is
empty. It can also be used with diﬀerent types of, so called, linked data which may be obtained
from diﬀerent social networks.
An example of possible (generic) graph, representing personal information of employees in
a company, is presented in Fig. 1. An example with a graph database using a nonempty set
of attributes is presented in Fig. 2a and an instance of this graph with all attributes having
assigned values is depicted in Fig. 2b.
1045

Conditional Synchronization in Graph-based MAS

Nowakh nm
sec

Kotulski, S¸edziwy and Strug

....

...
emp

dept
Mktng

id

1
1234

Figure 1: An example of a part of graph database

emp

nm
id
sec

emp

nm = Nowak
id = 1234
sec= 1

name

Dept
a

name=Mktng

Dept
b

Figure 2: An example of a graph using nonempty set of attributes (a) and its instance (b).
ΣV = {Dept, emp, . . .}, ΣE = ∅, AV = {nm, id, sec, name, . . .}, AE = ∅

2.2

Knowledge modiﬁcation

Let Ai be an agent and Gi be a graph representing a knowledge kept by Ai . Let Q be a special
set of query symbols. As a knowledge is represented in the graph form the modiﬁcations of its
data can be carried out by a graph transformation system.
Deﬁnition 3. Let Hˆ be a family of instances of labeled, attributed graphs, then a grammar
production is a tuple of the form p = (l, r, π), where:
1. l is a left hand side of the production p, being a labeled graph over Σ,
2. r is a right hand side of the production p, being a labeled graph over Σ ∪ Q,
3. π : Hˆ → {T RU E, F ALSE}, is a predicate determining the production’s applicability.
A production p will be also denoted as p : l →π r or in the abbreviated form: p : l −→ r.
Application of the production p : l −→ r to a given graph G (for example to the graph
shown in Fig. 1) is accomplished in several steps steps:
• a subgraph L ⊆ G, isomorphic with the left side of a production, i.e., with l, is taken,
• L is removed from G and replaced by the right side of the production, i.e., by r,
• all edges connecting previously G − L with L have to be ﬁxed, i.e. either removed or
“reattached” to appropriate nodes in r.
1046

Conditional Synchronization in Graph-based MAS

A1

A3

Kotulski, S¸edziwy and Strug

Ai

A4
A2

Aj
A5

Figure 3: A set of agents and information channels between them
If the graph r is deﬁned over Σ only, i.e. it does not contain labels from the set of query
symbols then a production is local and its application can be controlled locally. In the case
of a graph r containing a node labeled by an element from Q, i.e. by a query symbol, the
cooperation process has to be triggered by a global control mechanism.

3

Knowledge exchange accomplished by graph transformations

While graphs can represent pieces of a knowledge, graph transformations provide a formal
and well deﬁned model for describing a process of modifying and updating data as described
above. As it was remarked earlier data are often either to big to be stored in a single place
or such a storage is not allowed due to legal issues (for example the way the personal data are
kept is controlled by the data protection laws). Thus the knowledge is often distributed and
diﬀerent pieces (although not necessary disjoint) are kept by diﬀerent agents. Yet, in many
situations some parts of data have to be obtained from another sources (authorities). In [14]
the simple transmission model augmenting graph transformations with a mechanism of a formal
description of a knowledge transmission was presented. In this paper this model is extended
by allowing more complex couplings of graph transformations among diﬀerent transformation
systems (agents).
Let us assume the existence of a multi agent system consisting of (i) a number of agents,
denoted by Ai , and (ii) communication channels depicted in Fig. 3. Let Ai , Aj be agents, where
Ai has a piece of information required by Aj . Let Gi , Gj be graphs maintained by these agents.
Let Q be a set of query symbols denoting type of exchanged information and allowing for the
cooperation among agents. Let M denotes a particular type of information exchanged over a
given transmission channel.
Let Tij be a channel through which a knowledge can be passed from agent Ai to agent Aj
(see Fig.4). Each channel is directed, and this direction (depicted as arrow in Fig. 3) indicates
the knowledge sender and receiver. It also implies that the request for some piece of knowledge
is sent in the opposite direction. If both agents can sent some piece of knowledge to each
other two channels have to be deﬁned. Moreover, if two agents can exchange diﬀerent types of
information then separate channels have to be established for each type.
We also assume that there are two graph transformation systems GTi and GTj , each of
1047

Conditional Synchronization in Graph-based MAS

SGTM
Ai
GTi

Gi

pi

H

Kotulski, S¸edziwy and Strug

RGTM
Gj
qj

Aj

GTj

Figure 4: Communication between agents over a transmission channel
them maintaining a current state of graph Gi and Gj , respectively, under the control of Ai
and Aj respectively, which contain a current knowledge of relevant systems. Depending on
modiﬁcations to this knowledge graph transformation systems act upon their graphs Gi and
Gj , respectively, modifying them with the use of graph transformations. In the following
considerations we assume that each system is maintained by a single agent (although in practice
we can deal with multi-agent systems based on complementary or slashed graphs [20]).
For each type M of information exchanged between GTi and GTj two additional graph
transformation systems are introduced, namely SGTM (sender graph transformation system)
and RGTM (receiver graph transformation system) which are responsible for:
• generating graph H containing the piece of information to be sent (in the case of SGTM ),
• checking if the graph H belongs to the language generated by RGTM , by generating a
sequence of productions in RGTM leading to H.
We also assume the existence of conjugation of graph transformations between GTi and
SGTM , and between GTj and RGTM .
In the proposed method the actual exchange of information is done according to the following
scheme:
• Generation of a graph H on the basis of the application of a sequence of conjugated
productions pi ∈ GTi and qj ∈ SGTM to the graph Gi ,
• exchanging a graph H between agents Ai maintaining the SGTM system and Aj , maintaining the RGTM system,
• establishing a sequence of productions qj in RGTM and application of productions conjugated with qj in GTj to the graph Gj .
The mechanism described above constitutes the transmission channel (denoted by
T CM (GTi , GTj )) between GTi and GTj for the information of the type M .
The practical use of the above mechanism requires solving two problems:
1. Deﬁning the way of parameter (attributes) transmission between systems within the conjugate productions,
2. Deﬁning a language of production coupling allowing conditional and complex way of
dynamic application of such productions (instead of one-to-one approach).
Let each Gi be deﬁned over Σi ∪ Q. In the simple case for productions P : lP → rP and
R : lR → rR we can assume that values of the attributes of the left side of the production P
can be used as a basis for the calculation/establishing of values of attributes of a graph on the
right hand of the production R coupled one-to-one with P . This transfer of values of attributes
1048

Conditional Synchronization in Graph-based MAS

Kotulski, S¸edziwy and Strug

is based on the assumptions that the left hand side graph of the production P (i.e., lP ) is
mapped to the isomorphic subgraph of Gi . Moreover the transactional model of the application
of productions P and R is assumed, i.e., either both are successfully completed or none of them
is applied and no trace of a failed attempt is left. Such a model of production application
ensures the consistency of both databases in case of a failure of any of the productions.
It has to be noted that the production P actually modiﬁes a graph Gi by introducing a
node labeled by the query symbol (from the set Q) and thus marking the fact of generating
a request, while the production Q actually generates the request in the form of appropriate
graph. In many practical situation the transfer of node attributes between sets V (lP ) (nodes
of lhs of the production P) and V (rR ) (nodes of rhs of the production R) is suﬃcient, but the
edge attributes can be passed in the same way.
The above approach, based on single productions, allows for a simple request transmission,
but for the more complex ones there is a need to deﬁne a way of coupling sequences of productions or in many practical cases the conditional selection of Couperin production(s). One of
the approaches used to solve his problems is based on so called control diagrams (see [21]), but
they constitute a low level solution, so we introduce the following notation.
If we assume that a production constitutes an elementary operation we can deﬁne the
complex operation as:
• sequential operation O1 ; O2 , where each Oi is an operation,
• selective operation π1 P1 , π2 P2 , . . . πn
πi is true, is performed as the ﬁrst,

Pn , in which the production Pi for which

• transactional operation Ai : O ↔ Aj : P , where O is an operation which may be
completed iﬀ two conditions are satisﬁed: (i) all sub-operations of O are successfully
completed by an agent Ai and (ii) the production P may be completed by an agent Aj .
The usage of complex operations in the above example allows for requesting diﬀerent types
of records dependently on a person’s position within the company. The example of such a
selective operation associated with coupled productions q1 , q2 , q3 can described be as follows:
pos = simple
Ai : p1 ↔ SGTM : q1 ,
Ai : p2 ; p3 ↔ SGTM : q2 ,
pos = med
pos = manage
Ai : p4 ; p5 ↔ SGTM : q3 ,
The above formalism deﬁnes the situation in which in the case of employee’s position being
simple the production p1 is applied to Gi and the production qi is applied to the corresponding
graph H, in the case of position medium or managerial another sequences of productions are
applied.

4

Conclusions and future research

This paper presents a new approach that can be applied to the transmission of knowledge among
diﬀerent entities where appropriate knowledge bases are maintained by agents. In this approach
a graph base representation for a knowledge held by agents is used. Such a representation is
becoming increasingly popular, especially with the appearance of many graph database management systems and the growing share of RDF and other so called linked data or structured
data in the web.
1049

Conditional Synchronization in Graph-based MAS

Kotulski, S¸edziwy and Strug

The approach presented in this paper presents a rigorous and formal description of both local
maintaining and processing of knowledge and a transmission between diﬀerent graph database
systems. Each agent within this system, associated with a given database maintains its own
graph transformation system allowing for local manipulation and, by associating productions
of the local transformation systems with global systems it also allows for a transmission of
knowledge.
Deﬁning communication channels provides a formal mechanism describing the transmission
of knowledge as the application of well deﬁned operations (either simple or complex) without
imposing any particular constraints on types of graph databases used on either side of the
channel and thus allowing for uniform treatment in heterogeneous systems. Such an approach
can be used on any type of graph data.
Introduction of complex operations opens the way for formal description of a knowledge
exchange beyond simple one-to-one unconditional synchronization. In this paper we introduced
sequential and selective operations as a way of coupling a production with a sequence of other
productions or with a production which is selected on the basis of dynamically tested predicates
(usually based on the current values of attributes).
Additionally, as the transmission of data is only allowed through established, predeﬁned
channels, separate for each type of information it can prevent from sending sensitive data to
an unauthorized agent. In the future we plan to extend further the type of complex operations
that can be used to include for example conditional and repeatable application of productions
by adding loops and case-based operations.

References
[1] Borkowski A., Grabska E., Nikodem P, and Strug B. Searching for Innovative Structural Layouts
by Means of Graph Grammars and Esvolutionary Optimization, Proc. 2nd Int. Structural Eng.
And Constr. Conf, Rome (2003).
[2] Csuhaj-Varj´
u E., Dassow J., Kelemen J. and Paun Gh. Grammar systems. A grammatical approach
to distribution and cooperation. Topics in Computer Mathematics 8. Gordon and Breach Science
Publishers, Yverdon, 1994.
[3] Csuhaj-Varj´
u E. Grammar systems: A short survey, Proceedings of Grammar Systems Week 2004,
141-157, Budapest, Hungary, July 5-9, 2004.
[4] Dassow J., Paun Gh., and Rozenberg G. Grammar systems. In A. Salomaa and G. Rozenberg,
editors, Handbook of Formal Languages, volume 2, chapter 4, pp. 155-213, Springer-Verlag, BerlinHeidelberg, 1997
[5] Ehrig H. and Taentzer G. Graphical represenation and graph transformation.em ACM Comput.
Surv., 31(3es):9, 1999.
[6] Grabska E. Theoretical Concepts of Graphical Modelling. Part one: Realization of CP-graphs.
Machine GRAPHICS and VISION, 2(1), pp. 3-38, 1993.
[7] Grabska E. Graphs and designing. Lecture Notes in Computer Science, 776 (1994).
[8] Grabska E., Nikodem P. and Strug B. Evolutionary Methods and Graph Grammars in Design and
Optimization of Skeletal Structures Weimar, 11th International Workshop on Intelligent Computing in Engineering, Weimar, 2004.
[9] Grabska E. and Strug B. Applying Cooperating Distributed Graph Grammars in Computer Aided
Design, Parallel Processing and Applied Mathematics PPAM 2005, LNCS 3911, pp. 567-574,
Springer 2005
[10] Kotulski L. Model wspomagania generacji oprogramowania w ´srodowisku rozproszonym za pomoc a
gramatyk grafowych, Rozprawy Habilitacyjne. Wydawnictwo Uniwersytetu Jagiello´
nskiego, ISBN
83-233-1391-1, Krakow, 2000

1050

Conditional Synchronization in Graph-based MAS

Kotulski, S¸edziwy and Strug

[11] Kotulski L, Supporting Software Agents by the Graph Transformation Systems. Proc. of International Conference on Computational Science , LNCS 3993, pp887-890, Springer 2006
[12] Kotulski L. and Strug B. Supporting communication and cooperation in distributed representation
for adaptive design. Advanced Engineering Informatics 27(2): 220-229 (2013)
[13] Kotulski L., S edziwy A. and Strug B. Heterogeneous graph grammars synchronization in CAD
systems supported by hypergraph representations of buildings. Expert Syst. Appl. 41(4): 990-998
(2014)
[14] Kotulski L., S edziwy A. and Strug, B. Translation of Graph-based Knowledge Representation in
Multi-agent System. Procedia Computer Science 29, pp. 1048-1056, Elsevier (2014)
[15] Nikodem P. and Strug B. Graph Transformations in Evolutionary Design, ICAISC 2004, Lecture
Notes in Computer Science,vol 3070, pp. 456-461, Springer, 2004.
[16] Paun Gh. and Salomaa A. (editors) Grammatical models of multi-agent systems. Gordon and
Breach, Amsterdam, 1999.
[17] Robinson I., Webber J. and Eifrem E. Graph databases, O’Reilly, 2013.
[18] Rozenberg G. Handbook of Graph Grammars and Computing by Graph. Transformations, vol.1
Fundations, World Scientiﬁc London (1997).
´
[19] Strug B. and Slusarczyk
G. Frequent Pattern Mining in a Design Supporting System, Key Engineering Materials Vol. 450, pp 1-4, 2011
[20] S¸edziwy, A.,Eﬀective Graph Representation for Agent-Based Distributed Computing. Agent and
Multi-Agent Systems. Technologies and Applications, Springer Berlin Heidelberg, LNCS vol. 7327,
pp.638-647, 2012
[21] Kotulski, L. and S¸edziwy, A., Derivation Control Environment as a Tool for an Eﬃcient Distributed
Graph Transformations Coordination, IEEE Computer Society, pp.171-178, 2008

1051

