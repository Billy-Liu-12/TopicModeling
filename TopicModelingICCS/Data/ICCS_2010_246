Procedia Computer
Science
Procedia Computer
001(2010)
1–8
Procedia
ComputerScience
Science
(2012)
289–296

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

The new golf neighborhood for the ﬂexible job shop problem✩
Wojciech Bo˙zejkoa , Mariusz Uchro´nskia , Mieczysław Wodeckib,1,∗
a Institute of Computer Engineering, Control and Robotics
Wrocław University of Technology, Janiszewskiego 11-17, 50-372 Wrocław, Poland
b Institute of Computer Science
University of Wrocław
Joliot-Curie 15, 50-383 Wrocław, Poland

Abstract
In this paper we propose a new neighborhood for the ﬂexible job shop problem. A main idea of the proposed
neighborhood is to execute a ’long shot’ of an operation from the current operation’s machine to another machine of
the same type, and then to the make a small move by using a local optimization algorithm without changing operationsto-machines assignment. We call this method ’the golf neighborhood’. Computational experiments executed on the
benchmark instances from the literature show the eﬃciency of this solution.
Keywords: scheduling, ﬂexible job shop, metaheuristics

c 201202.60.Pn,
⃝
Published by
Elsevier Ltd. Open access under CC BY-NC-ND license.
PACS:
02.70.-c

2000 MSC: 90B36, 90C35

1. Introduction
We consider here the ﬂexible job shop problem (FJSP). The FJSP is a generalization of the classic job shop
problem as well as belongs to the strongly NP-hard class. Exact algorithms based on a disjunctive graph representation
of the solution have been developed (see Pinedo [22]) but they are not eﬀective for instances with more than 20
jobs and 10 machines. However, many approximate algorithms, mainly metaheuristic, have been proposed. Hurink
[15] developed the tabu search method for this problem. Also Dauz`ere-P´er`es and Pauli [9] used the tabu search
approach extending the disjunctive graph representation for the classic job shop problem to take into consideration
assigning operations to machines. Mastrolilli and Gambardella [18] proposed a tabu search procedure with eﬀective
neighborhood functions for the FJSP. Many authors have proposed a method of assigning operations to machines and
then determined sequence of operations on each machines. Such an approach is followed by Brandimarte [7] and
Pauli [20]. These authors solved the assignment problem (i.e. using dispatching rules) and next used metaheuristics
to solve the job shop problem. Also genetic approaches have been adopted to solve the FJSP. Recent works are these
of Jia et al. [16], Ho and Tay [14], Kacem et al. [17] and Pezzella et al. [21]. Gao et al. [10] proposed the hybrid
genetic and variable neighborhood descent algorithm for this problem.
✩ The
∗

work was supported by MNiSW Poland, within the grant No. N N514 232237.

Email address: mwd@ii.uni.wroc.pl (Mieczysław Wodecki)
author

1 Corresponding

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.032

290

W. Bo˙zejko/ Procedia
et al. / Procedia
Computer
(2012) 289–296
Computer
Science 00Science
(2010) 1
1–8

2

2. Flexible job shop problem
The ﬂexible job shop problem (FJSP), also called the general job shop problem with parallel machines, can be
formulated as follows. Let J = {1, 2, . . . , n} be a set of jobs which have to be executed on machines from the set
M = {1, 2, . . . , m}. There exists a partition of the set of machines into types, i.e. subsets of machines with the same
functional properties. A job constitutes a sequence of some operations. Each operation has to be executed on an
adequate type of machine (nest) within a ﬁxed time. The problem consists in the jobs allocation to machines from the
adequate type and the schedule of jobs execution determination on each machine to minimize the total jobs ﬁnishing
time. The following constrains have to be fulﬁlled:
(i)
(ii)
(iii)
(iv)

each job has to be executed on only one machine of a determined type in each moment of time,
machines must not execute more than one job in each moment of time,
there are no idle times (i.e. the job execution must not be broken),
the technological order has to be obeyed.

Let O = {1, 2, . . . , o} be the set of all operations. This set can be partitioned into sequences which correspond to
jobs where the job j ∈ J is a sequence of o j operations which have to be executed in an order on dedicated machines
j
(i.e. in so-called technological order). Operations are indexed by numbers (l j−1 + 1, . . . , l j−1 + o j ) where l j = i=1
oi
n
is the number of operations of the ﬁrst j jobs, j = 1, 2, . . . , n, where l0 = 0 and o = i=1 oi .
The set of machines M = {1, 2, . . . , m} can be partitioned into q subsets of the same type (nests) where i-th
(i = 1, 2, . . . , q) type Mi includes mi machines which are indexed by numbers (ti−1 +1, . . . , ti−1 +mi ), where ti = ij=1 m j
is the number of machines in the ﬁrst i types, i = 1, 2, . . . , q, where t0 = 0 and m = qj=1 m j .
An operation v ∈ O has to be executed on the machines type μ(v), i.e. on one of the machines from the set (nest)
Mμ(v) in the time pv, j where j ∈ Mμ(v) .
Let
Ok = {v ∈ O : μ(v) = k}
be a set of operations executed in the k-th nest (k = 1, 2, . . . , q). A sequence of operations sets
Q = [Q1 , Q2 , . . . , Qm ],
such that for each k = 1, 2, . . . , q
Ok =

tk−1 +mk
i=tk−1 +1

Qi and Qi ∩ Q j = ∅, i

j, i, j = 1, 2, . . . , m,

we call an assignment of operations from the set O to machines from the set M (or shortly, operations to machines
assignment).
A sequence [Qtk−1 +1 , Qtk−1 +2 , . . . , Qtk−1 +mk ] is an assignment of operations to machines in the i-th nest (shortly,
assignment in the i-th nest). In a special case a machine can execute no operations and then a set of operations
assigned to be executed by this machine is an empty set.
If the assignment of operations to machines has been carried out, then the optimal schedule of operations execution
determination (including a sequence of operations execution on machines) simpliﬁes to solve the classic scheduling
problem, it means the job shop problem (Grabowski, Wodecki [12]).
i
Let K = [K1 , K2 , ..., Km ] be a sequence of sets where Ki ∈ 2O , i = 1, 2, ..., m (in particular case elements of this
sequence can constitute empty sets). By K we denote the set of all such sequences. The number of elements of the
1
2
m
set K is 2|O | · 2|O | · . . . · 2|O | .
If Q is an assignment of operations to machines then Q ∈ K (of course, the set K includes also sequences which
are not feasible; that is such sequences do not constitute assignments of operations to machines).
For any sequence of sets K = [K1 , K2 , ..., Km ] (K ∈ K) by Πi (K) we denote the set of all permutations of elements
from Ki . Thereafter, let
π(K) = (π1 (K), π2 (K), ..., πm (K))

W. Bo˙zejko et /al.
/ Procedia
Computer
Science
1 (2012)
Procedia
Computer
Science
00 (2010)
1–8 289–296

291
3

be a concatenation m sequences (permutations), where πi (K) ∈ Πi (K). Therefore
π(K) ∈ Π(K) = Π1 (K) × Π2 (K)×, ..., Πm (K).
It is easy to observe that if K = [K1 , K2 , ..., Km ] is an assignment of operations to machines then the set πi (K) (i =
1, 2, ..., m) includes all permutations (possible sequences of execution) of operations from the set Ki on the machine i.
Further, let
Φ = {(K, π(K)) : K ∈ K ∧ π(K) ∈ Π(K)}

be a set of pairs, where the ﬁrst element is a sequence set and the second – a concatenation of permutations of these
sets elements. Any feasible solution of the FJSP is a pair (Q, π(Q)) ∈ Φ where Q is an assignment of operations to
machines and π(Q) is a permutations concatenation determining the operations execution sequence which are assigned
the each machine fulﬁlling constrains (i-iv).
3. Solution method
There is an exponential number of possible jobs to machines assignments, due to the number of operations. Each
feasible assignment generates a NP-hard problem (job shop) whose solution consists in determining an optimal jobs
execution order on machines. One has to solve exponential number of NP-hard problems to solve the FJSP.
Therefore, we will apply an approximate algorithm based of the tabu search method. The main element of this
approach is a neighborhood – subsets of all the feasible solution set, generated from the current solution by transformations called moves.Searching a neighborhood we choose an element with the lowest cost function value, which we
take as a new current solution in the next iteration of the algorithm. From the ﬁxed solution it is possible to generate
another solution by executing a move which consists in:
• an operation moving (transferring) from a machine into another machine in the same nest (of the same type),or
• changing operations execution order on a machines.
In the further part of the paper we describe in details both these moves.
Let Θ = (Q, π(Q)) be a feasible solution for the FJSP, where Q = [Q1 , Q2 , . . . , Qm ] is an operations to machines
assignment, i is a number of operations executed on a machine Mi (i.e. i = |Qi |) and
π(Q) = (π1 (Q), π2 (Q), ..., πm (Q))
is a concatenation of m permutations. A permutation πi (Q) determines an order of operations from the set Qi which
have to be executed on the machine Mi (i = 1, 2, ..., m). By Cmax (Θ) we deﬁne the cost function value for a solution
Θ, i.e. the time of all the operations execution ﬁnishing time.
In the further part of this section we will omit operations assignment Q as permutations parameter in these places
where it does not follow to a contradiction. Therefore π(Q) = (π1 (Q), π2 (Q), ... , πm (Q)) will be written in the shorter
form of π = (π1 , π2 , . . . , πm ).
3.1. Transfer type moves
By tij (k, l) we deﬁne a transfer type moves (shortly t-move) which consists in moving an operation from the position
k in a permutation πi (i.e. operation πi (k)) into position l in a permutation π j (k) (together with moving operations from
position k, k + 1,... with a single position to the right – so called insert type move). Execution of the move tij (k, l)
generates from Θ = (Q, π) the new solution Θ = (Q , π ) such, that
πv = πv ,

v

i, j, v = 1, 2, ..., m

(1)

and
πi = (πi (1), πi (2), . . . , πi (k-1), πi (k+1), . . . , πi ( i − 1),

π j = (π j (1), πi (2), . . . , πi (l-1), πi (k), π j (l), . . . , πi (

j

+ 1).

(2)
(3)

292

W. Bo˙zejko/ Procedia
et al. / Procedia
Computer
(2012) 289–296
Computer
Science 00Science
(2010) 1
1–8

4

Execution of this move causes moving the operation πi (k) from the set Qi (i.e. from the machine Mi ) to the set Q j (i.e.
to the machines M j ). Therefore,
Q v = Qv , v i, j, v = 1, 2, ..., m

and

Q i = Qi \ {πi (k)}, Q j = Q j ∪ {πi (k)}.

A move tij (k, l) such that i = j and k = l we call a neutral t-move.
Computational complexity of the t-move execution is O(n). An execution of a t-move causes moving an operation
from a machine into another one, i.e. a new operations to machines assignment in a nest. Therefore, from any solution
(operations to machines assignment) by executing t-moves it is possible to obtain any other operations to machines
assignment, i.e. partition of operations sets in particular nests.
If τ is a t-move, then we deﬁne a solution generated from Θ by executing the τ move by τ(Θ). It is possible that
the solution τ(Θ) is not feasible.
Let Θ be a feasible solution. The set
T ji (Θ) = {tij (k, l) : k ∈ Qi and l ∈ Q j
includes all t-moves which transfer operations from a machine Mi into a machine M j and
m

T (Θ) =

i, j

T ji (Θ)

includes all t-moves for the solution Θ. The number of elements of this set has an upper bound O(qm2 o2 ).
3.2. Insert type moves
To simplify let us assume that a permutation π = (π(1), π(2), . . . , π(t)) determines an operations execution order
on a machine.
Insert type move ikl (INS) moves an elementπ(k) (from the position k in π) into the position l, generating a permutation ikl (π) = πkl . If l ≥ k therefore:
⎧
⎪
π(i),
if i < k ∨ i > l,
⎪
⎪
⎨
π(i + 1), if k ≤ i < l,
πkl (i) = ⎪
⎪
⎪
⎩ π(k),
if i = l.

A similar case appears when k > l.
This type of move we will call shortly an i-move. Its computational complexity is O(1). The number of all such moves
(for a determined machines) is t(t − 1).
For a ﬁxed feasible solution Θ, let Ik (Θ) be a set of all i-moves for the machine Mk ∈ M and let
m

I(Θ) =

k=1

Ik (Θ)

be a set of all i-moves on all machines. It is easy to notice that not all moves from this set generate a feasible solution.
3.3. Golf neighborhood
A transfer type move is like a long shot in golf: it moves an operation into another machines. In turn, an insert
type move makes only a little modiﬁcation of operation sequences on machines. The inspiration of this research was
a paper of Bo˙zejko and Wodecki [4] which considered multimoves.
Let Θ be a feasible solution and let T (Θ) be a set of all t-moves. We consider the move tij (k, l) ∈ T (Θ). It
transfers an operation from the position k-th on the machine Mi into a position l-th on the machine M j . This move
generates the solution Θ = tij (k, l)(Θ). The set I(Θ ) includes all i-moves connected with a solution Θ and I j (Θ )
– i-moves deﬁnes on operations executed on the machine M j . Let its ∈ I j (Θ ) be an i-move. Its execution generates
a new solution Θ = its (Θ ) from the Θ . The transformation which generates a solution Θ from the Θ we call an

293
5

W. Bo˙zejko et /al.
/ Procedia
Computer
Science
1 (2012)
Procedia
Computer
Science
00 (2010)
1–8 289–296

it-multimove. It constitutes a product of the t-move tij (k, l) and i-move its . We will denote this move shortly as its◦tij (k, l).
Therefore, Θ = its ◦tij (k, l)(Θ).
By I◦T (Θ) we denote a set of all it-multimoves determined for a solution Θ. The golf neighborhood Θ is the set
N(Θ) = {λ(Θ) : λ ∈ I◦T (Θ)}.

(4)

In the paper Bo˙zejko et al. [6] so-called elimination criterion was proved. It allows us to eliminate all i-moves and
t-moves which generate unfeasible solutions. Moreover multimoves generating solutions, for which the cost function
value is not less than Cmax (Θ), are also eliminated. Such determined golf neighborhood will be applied to the tabu
search algorithm.
If we consider neutral t-moves only then the golf neighborhood ((4) simpliﬁes to moves applied in the best approximate algorithm of the job shop problem solving (Nowicki and Smutnicki [19], Grabowski and Wodecki [12]). The
survey of tabu search method approach for the classic job shop problem can be found in [19]. A TSAB [19] algorithm
is used as a local optimization method.
4. Computational results
Proposed methods were tested on the Hewlett-Packard server with two Dual-Core AMD 1.0 GHz Opteron processors, 1 MB cache memory and 8 GB RAM working under 64-bit Linux Debian 5.0 operating system. Algorithms
were tested on the set of benchmark problem instances taken from Brandimarte [7].
problem
Mk01
Mk02
Mk03
Mk04
Mk05
Mk06
Mk07
Mk08
Mk09
Mk10
Average

n×m
10 × 6
10 × 6
15 × 8
15 × 8
15 × 4
10 × 15
20 × 5
20 × 10
20 × 10
20 × 15

TS1
17.50%
42.31%
7.35 %
35.00%
11.05%
53.45%
42.45%
15.11%
39.09%
62.44%
32.57%

TS2
30.00%
46.15%
21.57%
33.33%
8.14%
55.17%
26.62%
12.62%
30.29%
55.33%
31.92%

TS3
2.50%
15.38%
0.00 %
8.33 %
1.16 %
22.41%
6.47 %
5.35 %
33.55%
35.53%
13.07%

TS4
5.00 %
23.08%
19.12%
8.33 %
1.74 %
20.69%
11.51%
3.63 %
8.79 %
9.64%
11.15%

TST S AB
0.00 %
7.69 %
0.00 %
0.00 %
0.58 %
17.24%
10.07%
0.00 %
0.00 %
6.60 %
4.22 %

Table 1: The percentage relative deviation to the best known solution for Brandimarte [7] benchmark instances for a ﬁxed number of iterations.

problem
Mk01
Mk02
Mk03
Mk04
Mk05
Mk06
Mk07
Mk08
Mk09
Mk10
Average

n×m
10 × 6
10 × 6
15 × 8
15 × 8
15 × 4
10 × 15
20 × 5
20 × 10
20 × 10
20 × 15

TS1
17.50%
42.31%
7.35 %
35.00%
11.05%
53.45%
42.45%
14.91%
39.09%
62.44%
32.55%

TS2
30.00%
46.15%
24.01%
33.33%
8.14%
55.17%
20.86%
13.77%
34.53%
60.91%
32.69%

TS3
2.50%
15.38%
0.00 %
8.53 %
1.16 %
25.86%
6.48 %
5.35 %
33.55%
35.53%
13.42%

TS4
5.00 %
23.08%
19.11%
8.33 %
1.74 %
22.41%
8.63%
3.63 %
28.34 %
15.23%
13.55%

Table 2: The percentage relative deviation to the best known solution for Brandimarte [7] benchmark instances for ﬁxed computational time.

In the Table 1 and 2 particular columns mean:

294

W. Bo˙zejko/ Procedia
et al. / Procedia
Computer
(2012) 289–296
Computer
Science 00Science
(2010) 1
1–8

6

• TS1 - tabu search algorithm in which the full neighborhood with using t - movesis generated; the best solution
from this neighborhood is chosen and becomes the base solution in the next iteration,
• TS2 - in this algorithm the neighborhood is generated by the t - moves performed for operations from the critical
path; the best solution from this neighborhood is chosen and becomes the base solution in the next iteration,
• TS3 - the tabu search algorithm in which the full neighborhood using t - moves is generated; the best solution
from this neighborhood is chosen; for this solution the TSAB [19] algorithm is performed; the solution provided
by the TSAB algorithm becomes the base solution in the next iteration,
• TS4 - in this algorithm the neighborhood is generated by t - moves performed for operations from the critical
path; the best solution from this neighborhood is chosen; for this solution the TSAB algorithm is performed;
the solution provided by the TSAB algorithm becomes the base solution in the next iteration,
• TST S AB - two level tabu search algorithm for ﬂexible job shop problem.
Proposed algorithms were tested on 10 test instances taken from Brandimarte [7]. We compare our results with results
from Gao et al. [10]. The Table 1 presents results for a ﬁxed number of iteration (equals 1000) of the proposed algorithm. The Table 2 gives results for a ﬁxed computational time (240 seconds) of the proposed algorithm. Obtained
results show that for performing TSAB algorithm with the best solution in neighborhood as a starting solution an
average value of the cost function is more than two times smaller than without using TSAB algorithm. Making a comparison of results for algorithms which use operations from critical path (TS2 and TS4) with algorithms which don’t
use only these operations (TS1 and TS3) we can notice that for the smallest sizes of problem instances (Mk01,Mk02
or Mk03) the algorithm TS2 (TS4) provides with the worst results comparing to the algorithm TS1 (TS3). On the
other hand, for a bigger size of the problem instances (Mk07, Mk09, Mk09 or Mk10) the algorithm TS2 (TS4) gives
better results than the TS1 (TS3) algorithm.
We have also tested an algorithm based on the hybrid neighborhood (TShn). Proposed neighborhood is generated
by performing t - moves and moves used in TSAB algorithm (moves for classical job shop problem). Results fot TShn
algoritm are given in the Table 3. We have compared our results with the hGA algorithm [10] and the TS3 algorithm.
problem
Mk01
Mk02
Mk03
Mk04
Mk05
Mk06
Mk07
Mk08
Mk09
Mk10

Cmax
TS3
40
29
204
65
173
68
144
523
326
227

hGA
40
29
204
60
172
58
139
523
307
197
average

PRD [%]
TShn
41
31
204
69
173
77
144
587
347
265

TS3
0.00%
11.54%
0.00 %
8.33 %
0.58 %
17.24%
2.88 %
0.00 %
6.19%
15.23%
6.20%

TShn
2.50 %
19.23%
0.00 %
15.00 %
0.58 %
32.76%
3.60%
12.24 %
13.03 %
34.52%
13.35%

Table 3: The percentage relative deviation to the best known solution for Brandimarte [7] benchmark instances for ﬁxed computational time (600s)
of proposed algorithm.

For the ﬁxed execution time the TS3 algorithm provides better solutions than the TShn algorithm. The relative
error (i.e. the percentage relative deviation to the best known solutions taken from the literature) for the TS3 algorithm
is two times smaller than for the TShn algorithm. For a ﬁxed number of iterations (see Table 4) the TShn algorithm is
faster than TS3 algorithm but the quality of obtained solutions is worse.

295
7

W. Bo˙zejko et /al.
/ Procedia
Computer
Science
1 (2012)
Procedia
Computer
Science
00 (2010)
1–8 289–296

problem
Mk01
Mk02
Mk03
Mk04
Mk05
Mk06
Mk07
Mk08
Mk09
Mk10

hGA
40
29
204
60
172
58
139
523
307
197

Cmax
TS3
41
30
204
65
174
71
148
551
410
267

time [sec.]
TShn
44
31
204
73
173
82
148
587
358
272

TS3
47.87
36.12
330.1
115.22
106.12
2119.53
112.20
988.05
1286.91
1349.40

TShn
4.69
6.67
99.19
21.29
33.42
93.64
34.66
306.79
427.94
451.66

Table 4: Computational time for 1000 iterations.

5. Conclusions
We have proposed a new so-called golf neighborhood implemented inside a tabu search based algorithms for the
ﬂexible job shop problem. Our results shows that using only ’long’ moves (we call them t-moves – operations moves
between diﬀerent machines) there is no possibility to obtain results with hight quality (in meaning of the value of the
cost function). From the other hand, using ’long’ moves together with the local improvement method (’small’ moves)
allows us to improve the quality of obtained solutions. As a future work it is possible to adapt the proposed approach
for another ﬂexible scheduling problems.
References
[1] Adrabi´nski A, Wodecki M., An algorithm for solving the machine sequencing problem with parallel machines, Zastosowania Matematyki
XVI 3(1979), 513-541.
[2] Alba E., Parallel Metaheuristics. A New Class of Algorithms, Wiley & Sons Inc. (2005).
[3] Barnes J.W., Chambers J.B., Flexible job shop scheduling by tabu search, Graduate program in operations research snd industrial engineering, The University of Texas at Austin (1996), Technical Report Series: ORP96-09.
[4] Bo˙zejko W., Wodecki M., On the theoretical properties of swap multimoves, Operations Research Letters, Elsevier Science Ltd., Vol. 35
Issue 2 (2007), 227–231.
[5] Bo˙zejko W., Wodecki M., Solving Permutational Routing Problems by Population-Based Metaheuristics, Computers & Industrial Engineering 57 (2009), 269–276.
[6] Bo˙zejko W., Uchro´nski M., Wodecki M., Parallel hybrid metaheuristics for the ﬂexible job shop problem, submitted to Computers and
Industrial Engineering.
[7] Brandimarte P., Routing and scheduling in a ﬂexible job shop by tabu search, Annals of Operations Research 41 (1993), 157–183.
[8] Cormen T.H., Leiserson C.E., Rivest R. L., Introduction to Algorithms, 2nd Revised edition edition, MIT Press (2001).
[9] Dauz`ere-P´er`es S., Pauli J., An integrated approach for modeling and solving the general multiprocessor job shop scheduling problem using
tabu search, Annals of Operations Research 70(3) (1997), 281–306.
[10] Gao J., Sun L., Gen M., A hybrid genetic and variable neighborhood descent algorithm for ﬂexible job shop scheduling problems, Computers
& Operations Research 35 (2008), 2892–2907.
[11] Grabowski J., Generalized problems of operations sequencing in the discrete production systems, (in Polish), Monographs, 9, Scientiﬁc
Papers of the Institute of Technical Cybernetics of Wrocław Technical Univercity (1979).
[12] Grabowski J., Wodecki M., A very fast tabu search algorithm for the job shop problem. In: Rego C., Alideaee B. (eds.), Adaptive memory
and evolution; tabu search and scatter search, Dordrecht, Kluwer Academic Publishers (2005), 117–144.
[13] Grama A., Gupta A., Karypis G., Kumar V., Introduction to Parallel Computing, Second Edition, Pearson Addison Wesley (2003).
[14] Ho N.B., Tay J.C., GENACE: an eﬃcient cultural algorithm for solving the Flexible Job-Shop Problem, IEEE International Conference on
Robotics and Automation (2004), 1759–1766.
[15] Hurink E., Jurisch B., Thole M., Tabu search for the job shop scheduling problem with multi-purpose machine, Operations Research
Spektrum 15 (1994), 205–215.
[16] Jia H.Z., Nee A.Y.C., Fuh J.Y.H., Zhang Y.F., A modiﬁed genetic algorithm for distributed scheduling problems, International Journal of
Intelligent Manufacturing 14 (2003), 351–362.
[17] Kacem I., Hammadi S., Borne P., Approach by localization and multiobjective evolutionary optimization for ﬂexible job-shop scheduling
problems, IEEE Transactions on Systems, Man, and Cybernetics, Part C 32(1) (2002), 1–13.
[18] Mastrolilli M., Gambardella L.M., Eﬀective neighborhood functions for the ﬂexible job shop problem, Journal of Scheduling 3(1) (2000),
3–20.

296

W. Bo˙zejko/ Procedia
et al. / Procedia
Computer
(2012) 289–296
Computer
Science 00Science
(2010) 1
1–8

8

[19] Nowicki E., Smutnicki C., A fast tabu search algorithm for the permutation ﬂow-shop problem, European Journal of Operational Research
91 (1996), 160-175.
[20] Pauli J., A hierarchical approach for the FMS schduling problem, European Journal of Operational Research 86(1) (1995), 32–42.
[21] Pezzella F., Morganti G., Ciaschetti G., A genetic algorithm for the Flexible Job-schop Scheduling Problem, Computers & Operations
Research 35 (2008), 3202–3212.
[22] Pinedo M., Scheduling: theory, algorithms and systems, Englewood cliﬀs, NJ: Prentice-Hall (2002).

