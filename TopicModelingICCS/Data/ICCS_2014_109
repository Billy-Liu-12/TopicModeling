Procedia Computer Science
Volume 29, 2014, Pages 2127–2136
ICCS 2014. 14th International Conference on Computational Science

Cyclic hybrid ﬂow-shop scheduling problem with machine
setups
Wojciech Bo˙zejko1 , Lukasz Gniewkowski1 ,
Jaroslaw Pempera1 , and Mieczyslaw Wodecki2
1

Institute of Computer Engineering, Control and Robotics, Wroclaw University of Technology
Janiszewskiego 11-17, 50-372 Wroclaw, Poland
wojciech.bozejko@pwr.edu.pl
jaroslaw.pempera@pwr.edu.pl
lukasz.gniewkowski@pwr.edu.pl
2
Institute of Computer Science, University of Wroclaw
Joliot-Curie 15, 50-383 Wroclaw, Poland
mieczyslaw.wodecki@ii.uni.wroc.pl

Abstract
In this paper we consider an NP -hard hybrid ﬂow shop problem with machine setups and cycletime minimization. The above issue is an important generalization of a ﬂow-shop problem with
minimization of a cycle time, and it stays in a direct relationship with a ﬂexible job shop
problem. In the hybrid problem task operations are performed by machines arranged in slots,
i.e., a set of machines with the same functional properties. In this work we presented a graph
model, properties of the problem and methods of determining approximate value of the optimal
cycle duration. The above mentioned concepts have been used in the construction of tabu search
algorithm. Computational experiments were conducted on well-known in literature examples,
which conﬁrmed high eﬃciency of the algorithm.
Keywords: discrete optimization, metaheuristics, cyclic scheduling.

1

Introduction

For many years, one could observe an increasing market demand for diversity (multiassortment)
of production. This may be provided, among many other issues, by cyclic production. In
ﬁxed intervals of time (cycle time) there is produced a certain ’batch’ (a mix of kit, a set) of
assortments. Process optimization is typically reduced to minimization of cycle time. Proper
selection of mix and cycle time allows us not only to meet the demand, but also to improve the
eﬃcacy and eﬀectiveness of the machinery use. Thus, recently, one can observe a signiﬁcant
increase of interest in the problems of cyclic tasks scheduling theory. For they are usually
important and diﬃcult (mostly NP -hard ) problems from the standpoint of not only theory but
also practice.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2014.05.197

2127

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

A comprehensive overview of the state of knowledge concerning the cyclical task scheduling
problem can be found in the work of Levner et al. [12]; analyzing the issues of computational
complexity of algorithms for solving various types of cycle scheduling problem. The authors
consider in particular NP-diﬃcult problems of various cyclic types including a variety of criterion
functions and additional constraints (no wait, no buﬀer, etc.).
In the scientiﬁc work by Panwalkar et al. [14] on task scheduling it was found that 75%
of problems occurring in practice requires at least one setup dependent on the order of tasks
execution. However, in 15% of the problems a setup of all tasks should be taken into consideration. Nevertheless, in the vast majority of works in the ﬁeld of scheduling setups are not
taken into account at all. This applies both to single and and multi-machine problems and to
diﬀerent goal functions. This type of issues are important from both theoretical and practical
standpoint.
Continuous ﬂow production systems are among most commonly encountered in industry.
Everywhere where the production process consists of the following successive stages, we deal
with such systems. Each stage of production is realized in a separate slot supplied with specialized machinery. Every slot is equipped with one or more machines. If in at least one slot there
are two or more machines, then we deal with a ﬂow-shop system with parallel machines. In
the literature, there are also other names describing this problem such as: a hybrid ﬂow-shop
system or a ﬂexible production line. The hybrid ﬂow-shop problem with setups was considered,
among many others, in the works [5], [6],[11], [8], [10] and [15]. Also solutions for parallel
computing environments are proposed [3, 4].
The work is divided into four main parts. In the ﬁrst part the problem of cyclic scheduling in
a hybrid ﬂow-shop system was formulated and described. In the second part, a graph model and
a number of properties used in the eﬀective determining of the cycle time and cyclic scheduling
were proposed. In the third part there is proposed an algorithm based on tabu search method.
In addition, this chapter presents the elimination property and a property that allows in time
O(1) for designation of the cycle time for any solution from the neighborhood. The results of
experimental test of an algorithm are shown in the last part.

2

Problem description

The considered in this work hybrid ﬂow-shop problem with machine setups can be formulated
as follows:
PROBLEM: There is a given set of tasks J = {1, 2, . . . , n}, which should be performed
repeatedly on machines from the set M = {1, 2, . . . , m}. There is a break up of the set of
machines into types (slots) i.e. subsets of machines with the same functional properties. Each
task ”passes” through all the slots (technological line). The task is a sequence of operations,
from which each must be done in a ﬁxed time, on exactly one machine for each nest. The
problem consists in allocation of tasks to machines and the determination of the sequence of
their execution on machines to minimize the cycle time. There must be the following constraints
fulﬁlled:
(i )
(ii )
(iii )
(iv )
2128

each task can be performed simultaneously on one suitable type of machine,
no machine can perform more than one task at the same time,
task’s performance cannot be interrupted,
a technological line of tasks performance must be preserved,

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

(v ) between successively performed on the same machine, tasks there should be a setup taken
into consideration,
(vi ) each task is sequentially executed after cycle time is ﬁnished.
This problem will be denoted by CH in short.
The set of tasks in a single cycle is called MPS (minimal part set) in short. MPSs are
therefore performed cyclically one after another.
The set of machines M = {1, 2, . . . , m} can be broken up into m subsets of machines of the
same type (nests) C = {1, 2, . . . , c}, whereas the i -th (i = 1, 2, . . . , c) type includes mi machines,
i−1
which are indexed by the numbers ri + 1, . . . , ri + mi , where ri = s=1 ms , (r= 0). We denote
by μk ∈ C a slot, in a which there is a machine k ∈ M.
Any task must be performed on exactly one machine from each slot. By pjz we denote the
time of the task j ∈ J performance on any machine from the slot z ∈ C. The machine must
undergo a setup between successive performance of tasks. Let sijk be a setup time of a machine
from the slot k ∈ C between task i ∈ J , and immediately afterwards executed task j ∈ J . By
Jk we denote the set of tasks assigned to machine k ∈ M. A sequence of sets of tasks
D = [J1 , J2 , . . . , Jm ]
such that
rz +mz

J =

Jk and Jk ∩ Jl = ∅, k = l, k, l = rz + 1, . . . , rz + mz , z ∈ C,
k=rz +1

we call allocation of jobs to machines (in short – allocation). By Q we denote the set of all
such assignments.
For a ﬁxed allocation of D ∈ Q the order of tasks performance on k-th machine can be
represented by permutation πk = (πk (1), . . . , πk (nk )) tasks from the set Jk , where nk = |Jk |,
whereas the order of tasks performance on all machines π by concatenating these permutations,
i.e. π = (π1 , . . . , πm ). By Φ we denote the set of all such orders.
In the present problem the task set J should be performed periodically. Let π be an order
l
we denote the starting point for the task j ∈ J
of performing tasks on the machines. By Sj,z
from the l -th cycle (l = 1, 2, ...) on a machine from the slot z ∈ C These moments are the
solution of the CH problem, if the following constraints are fulﬁlled:
l
l
Sj,z
≥ Sj,z−1
+ pj,z−1

j = 1, . . . , n, z = 2, . . . , c, l = 1, . . . ,

Sπl k (s),μk ≥ Sπl k (s−1),μk + pπk (s−1),μk + sπk (s−1),πk (s),μk
≥ Sπl k (nk ),μk + pπk (nk ),μk + sπk (nk ),πk (1),μk
Sπl+1
k (1),μk
l−1
l
Sj,z
= Sj,z
+T

s = 2, . . . , nk ,
k = 1, . . . , m, l = 1, . . . .
k = 1, . . . , m, l = 1, . . . .

j = 1, . . . , n, z = 1, . . . , c, l = 2, . . . ,

(1)
(2)
(3)
(4)

where T is a cycle length.
Inequality (1) models technological limitations, what is more, it means that the starting
point of the task j in z-th slot can begin after the completion of this task in the z − 1. slot.
On the other hand, inequality (2) represents machine limitations and it means that the task
πk (j) executed as j-th on machine in the slot k can begin after completion of the previous task
on the machine, i.e. task πk (j − 1). It is important to take into account the machine setup
time sπk (s−1),πk (s),μk . For any cycle, inequality (3) establishes the relationship between the
2129

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

last task of the cycle and the ﬁrst of the next cycle. Last (4) inequality characteristic for the
cyclic production determines the relationship between the starting times of tasks on machines
in successive MPSs.
Optimization of the process (of the problemCH) boils down to designation of the assignment
of tasks to machines, and the tasks execution order on machines to minimize the cycle time.
For a ﬁxed allocation of tasks to machines, by T (π) we denote the shortest cycle time of the
order π ∈ Φ. It is important to designate an optimal order π ∗ ∈ Φ, such that
T (π ∗ ) = min{T (π) : π ∈ Φ}.

(5)

Figure 1 shows a cyclic schedule in the form of Gannt graph. This chart includes two more
performances of a set of tasks (two MPSs). Tasks execution schedule for the second set is
distinguished in color gray. The setup times are shown in bold line.

1

1

2

2

5

4

3

1

2

3

1

4

5

4
2

5

4

1

3
4

2

5

3

5

4

1

6

3
2

0

5

10

3
4

1

5

15

3
2

20

25

30

5

35

Figure 1: Gantt chart – two successive executions of the jobs set.

3

Properties of the problem

Without loss of generality, in this chapter, we limit ourselves to two ﬁrst MPSs. Therefore, we are considering a problem which consists in execution of 2n tasks from the set
J e = {1, . . . , n, n + 1, . . . , 2n}. Task n + j is a repetition of the task j ∈ J . For an order
π ∈ Φ of tasks execution from J we deﬁne the so called extended order π e of tasks performance
from the set J e . For a ﬁxed machine k ∈ M and order πk = (πk (1), . . . , πk (nk ), the extended
order of tasks execution is
πke = (πk (1), . . . , πk (nk ), n + πk (1), . . . , n + πk (nk )).
For an extended order of tasks execution on machines π e we deﬁne a directed graph with
burdened vertices and arcs G(π e ) = (N , W ∪ E(π e )). A set of vertices N = J e × C. Each vertex
2130

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

represents the operation of performing the task in the slot. A vertex (j, k) ∈ N represents the
task j ∈ J performed in the slot k ∈ C. This vertex has a weight pj,μk for j ≤ n and pj−n,μk
for j > n. A set of arcs W ∪ E(π e ) is a sum:
1. Arcs representing the technological limitations
2n

c

((j, z − 1), (j, z)).

W=
j=1 z=2

2. Arcs representing machine constraints
E(π e ) =

m 2nk

((πke (j − 1), μk ), (πke (j), μk )).

k=1 j=2

Arc ((i, k), (j, k)) ∈ E(π e ) has weight si,j,μk . Other arcs have weight 0.
The sequence of vertices of the graph G(π e ), from which every two adjacent ones form an
arc, is called a path. Let u((x, k), (y, l)) = ((x, k), . . . , (y, l)) be the path connecting vertices
(x, k) and (y, l). length of the path (the sum of weights of vertices and arcs) is denoted by
L((x, k), (y, l)).
To each vertex (x, k) ∈ N we assign number Sxk - the starting point of operation x ∈ J e
on a certain machine in a slot k ∈ C. It is easy to show that if in a graph G(π e ) there is a path
u((x, k), (y, l)),, then the moment
Syl ≥ Sxk + L((x, k), (y, l)) − pyk .

(6)

Theorem 1. The cycle time satisﬁes the condition
T (π) ≥ L((j, z), (n + j, z)) − pjz , j ∈ J , z ∈ C.

(7)

Proof. A pair of nodes (j, z)7 and (n + j, z), j ∈ J , z ∈ C represents a pair of corresponding
nodes in two consecutive MPSs. Using the inequality (6)
Sn+j,z ≥ Sj,z + L((j, z), (n + j, z)) − pjz , j ∈ J , z ∈ C,

(8)

T (π) ≥ Sn+j,z − Sj,z ≥ L((j, z), (n + j, z)) − pjz , j ∈ J , z ∈ C.

(9)

then

Theorem 2. For a ﬁxed order π ∈ Φ the cycle time
T (π) = max L((πke (1), μk ), (n + πke (1), μk )) − pπke (1),μk .
k∈M

(10)

Proof. It is enough to show that for any order π e there can be constructed a cyclic schedule
with a cycle length T (π).
˜ e ) be a graph constructed from G(π e ) by adding certain arcs to it. For each pair of
Let G(π
vertices (j, z) and (n + j, z), j ∈ J , z ∈ C we add two additional arcs:
• ((j, z), (n + j, z)) with weigh T (π) − pjz , and
• ((n + j, z), (j, z)) with weigh T (π) − pjz .
2131

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

Similarly, in the case of the graph G(π e ), to each vertex (j, z) we assign the starting point
Sjz of execution of task j ∈ J in the slot z ∈ C. The ﬁrst of arcs ((j, z), (n + j, z)) generates
the constraint
Sn+j,z ≥ Sjz + pjz + T (π) − pjz ,

j = 1, . . . , n, z = 1, . . . , c,

(11)

whereas the second arc ((n + j, z), (j, z)) generates the constraint
Sjz ≥ Sn+j,z + pjz − T (π) − pjz ,

j = 1, . . . , n, z = 1, . . . , c.

(12)

After simple transformations of (12) we obtain
Sjz + T (π) ≥ Sn+j,z

j = 1, . . . , n, z = 1, . . . , c,

(13)

Inequalities (11) and (13) are fulﬁlled when Sn+j,z = Sj,z + T (π), j = 1, . . . , n, z = 1, . . . , c. It
is equivalent to the fulﬁllment of a condition of cyclic schedule.
˜ e ) there are cycles of negative length. Therefore, to determine the longest
In the graph G(π
paths (Sjz ) there can be Bellman-Ford algorithm applied.
Machine k ∈ M for which there is an equality
T (π) = L((πke (1), μk ), (n + πke (1), μk )) − pπke (1),μk
will be called the critical machine.
The problem CH is at least NP-hard. Therefore, to come to its solution there will be
heuristic algorithms used. The eﬃciency of such algorithms, in particular based on methods
of local searches, is increased by elimination properties. They enable fast removal of worse
solutions. For many years, for this purpose, there were the so called block elimination properties
used with a huge success (Grabowski et al. [9], Bo˙zejko et al. [1], Wodecki [16]).
Let u((πke (1), μk ), (πke (nk + 1), μk )) be a path in a graph G(π e ) on a machine k ∈ M from
gniazda μk ∈ C. Subsequence ust = ((us , μk ), . . . , (ut , μk )), 1 ≤ s ≤ t ≤ nk + 1 of successive
elements of this path is called a block (in brief it will be denoted by Bst = (us , . . . , ut )), if
1. contains at least 4 elements,
2. for any permutation βke , resulting from πke by swapping the order of elements us+1 , . . . , ut−1
there is the following condition satisﬁed
Lβ ((βke (1), μk ), (βke (nk + 1), μk )) ≥ L((πke (1), μk ), (πke (nk + 1), μk )),

(14)

where Lβ is the length of a path in a graph G(β e ).
It is easy prove that Bst is the shortest Hamiltonian path from vertex (πke (s), μk ) to (πke (t), μk )
comprising a set of vertices from the set {(πke (s), μk ), . . . , (πke (t), μk )}.
Theorem 3. Let k ∈ M be the critical machine to the task performance order π ∈ Φ, a
{B1 , . . . , Bg }, Bi = Bsi ti = ((πke (si ), μk ), . . . , (πke (ti ), μk )), i = 1, . . . , g a sequence of blocks on
the machine. If there is an order β ∈ Φ such that T (π) > T (β) then:
• at least one task o ∈ Bi precedes the ﬁrst task from block(πke (si )), i ∈ {1, . . . , g}, or
• at least one task o ∈ Bi is performed after the last task (πke (ti )), i ∈ {1, . . . , g}, or
2132

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

• at least one task o ∈ Bi is performed on a diﬀerent from the slot μk ∈ C, or
• at least one task, performed on the machine k not belonging to the blocks, is executed on
a diﬀerent position on this machine or on another machine belonging to the slot μk ∈ C.
Proof. The proof is similar to the one stated in work [9].
In the graph G(π e ) on the critical machine k there exists nk paths of length equal to the
length of the critical path, i.e. u((πke (s), μk ), (πke (nk + s), μk )), s = 1, . . . , nk . For each of
these paths there can be blocks determined. The number of solutions which do not satisfy the
conditions of Theorem 3 increases with the number of elements in blocks. Thus, in order to
eliminate as many solutions as possible there should be blocks designated, on the critical path,
of the greatest number of tasks.

4

Algorithm of determining cycle time

To solve the given problem there was a known tabu search algorithm for classical hybrid ﬂowshop problem used (Nowicki and Smutnicki [13]). It is one of the fastest algorithms which uses
the block properties. In addition, it is susceptible to the parallelization at the level of vector
processing supported by modern processors machine instructions, see [6].
Tabu search is one of the most commonly used methods of constructing heuristic algorithms
based on searches of the solution space. The main idea comes down to systematic search of,
generated in subsequent iterations, neighborhoods. In the following part of this chapter we will
focus on the description of the most important elements of the algorithm.
Four v = (k, x, l, y) represents the move of insert type in π ∈ Φ such that the task πk (x) is
removed from the position x, 1 ≤ x ≤ nk in a permutation πk and then inserted on position y
in the permutationπl , k, l ∈ μk , 1 ≤ y ≤ nl + 1 dla l = k and 1 ≤ y ≤ nk , y = x dla l = k.
For each position x = 1, ..., nk in a permutation πk deﬁning the order of tasks operations
on the critical machine k ∈ C by Hk,x,l we denote the set of moves depicting the task πk (x) on
every position in the permutation deﬁning the tasks execution order on the machine l, μl = μk ,
μl ∈ C. On the other hand, by Nk,x,l we denote the subset of Hk,x,l satisfying the constraints
of Theorem 3. More speciﬁcally,
Hk,x,l =

nl +1
y=1 {(k, x, l, y)}

for l = k,

Hk,x,l =

nk
y=x, y=1 {(k, x, l, y)}

for l = k.

(15)

The number of moves in the set
nk

N =

Nk,x,l
x=1 μl =μk ,l∈M

is at the level O(nk n).
Theorem 4. Let π ∈ Φ be the order of tasks execution from a set J , and β ∈ Φ the order
obtained from π after the execution of a move v = (k, x, l, y) w π. Then

whereas

Lβ ((βie (1), μi ), (βie (ni + 1), μi )) = L((πie (1), μi ), (πke (ni + 1), μi )),
f or i = k, i = l, i ∈ M,

(16)

Lβ ((βie (1), μi ), (βie (ni + 1), μi )) dla i ∈ {k, l}

(17)

can be designated in time O(1).
2133

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

Proof. Move v = (k, x, l, y) changes the order of elements of the permutation πk and a permutation πl . Other permutations and hence the length of the respective paths are not changed.
Execution of the move v = (k, x, l, y) w π can be divided into two phases: removing an
element j = πke (x) from position x in πk and inserting this element in the position y w πl ,
obviously the machine l and k must belong to the same slot z ∈ C,, i.e. z = μk = μl .
As a result, from the path u((πke (1), z), (πke (nk + 1), z)) we remove a vertex (j, z), and two
arcs ((πke (x − 1), z), (j, z)) i ((j, z), (πke (x + 1), z)). In turn, the removed vertex is replaced
with an arc ((πke (x − 1), z), (πke (x + 1), z)). In turn, after insertion of task j on position y
in πl we get permutation βle , in which the arc ((βle (y − 1), z), (βle (y + 1), z)) existing in πl is
replaced by a sequence consisting of the arc ((βle (y − 1), z), (j, z)), vertex (j, z), and the arc
((j, z), (βle (y + 1), z)). Finally, we obtain
Lβ ((βle (1), z), (βle (nl + 1), z)) = L((πle (1), z), (πke (nk + 1), z)) − Δ1 + Δ2 for l = k,

(18)

Lβ ((βke (1), z), (βke (nk + 1), z)) = L((πie (1), z), (πke (nk + 1), z)) − Δ1
Lβ ((βle (1), z), (βle (nl + 1), z)) = L((πle (1), z), (πle (nl + 1), z)) + Δ2

for l = k,

(19)

where
Δ1 = sπke (x−1),j,z + pj,z + sj,πke (x+1),z − sπke (x−1),πke (x+1),z ,

(20)

Δ2 = sβle (y−1),j),z + pj,z + sj,βle (y+1),z − sβle (x−1),βle (x+1),z ,

(21)

The values in (20) and (21) can be determined in time O(1). With the known values
L((πke (1), z), (πke (nk + 1), z)) and L((πle (1), z), (πle (nl + 1), z)), time of designation of the length
of paths on machines k and l from the equation (18) or (19), for β is O(1).

5

Computational experiments

There were computational experiments whose aim was to assess the eﬀectiveness of the modiﬁed
tabu search algorithm from work [13]. The study was performed in two phases. In the ﬁrst
phase the eﬀect of block properties on the eﬃciency of the algorithm was tested, whereas in the
second - execution time of algorithm for practical applications.
The algorithm was implemented in C++ language in Visual Studio 2005 and was tested on
a Compaq 8510w Mobile Workstation PC computer with Intel Core 2 Duo 2.60 GHz operating
Microsoft VISTA system.
The calculations were performed on 960 examples for the hybrid ﬂow-shop problem included
in the work [15]. Gathered data was divided into 25 groups. Each consists of examples of the
same number of tasks and machines. Individual groups diﬀer from one another in the way of
generation and/or the number of machines or tasks. Start solutions were set with the use of a
simple construction algorithm based on the method of priority scheduling. As a measure of the
algorithm’s A eﬃciency there was a relative error of a goal function value assumed for the best
solution π A determined the algorithm in relation to the reference solution π ref . The error
P RD(π A ) = 100%(T (π A ) − T (π ref ))/T (π ref ).

(22)

The algorithm from work [13] was implemented in two versions: TSF – with a full neighborhood,
generated by the moves from the set H and TSB – with a reduced environment, generated
through the moves from N . There were calculations (of TSF and TSB algorithms) performed
for the length of the tabu lists from the set {11, 12, 13, 14} and 10,000 iterations. For each
example, as the reference solution there was the best found solution adopted. The obtained
comparative results are shown in Table 1.
2134

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

Table 1: PRD values for various length of tabu list.
L=11
Group
n=20,m=2.4
n=20,m=8
n=50,m=2
n=50,m=4
n=50,m=8
n=80,m=2
n=80,m=4.Var
n=80,m=4.Con
n=80,m=4.50%
n=80,m=4.100%
n=80,m=4.125%
n=80,m=8.25%
n=120.m=2.Var
n=120.m=2.Con
n=120.m=4.25%
n=120.m=4.50%
n=120.m=4.100%
n=120.m=4.125%
n=120.m=5.50%.Con
n=120.m=8.25%.Var
n=120.m=8.25%.Con
n=120.m=8.50%.Var
n=120.m=8.100%.Var
n=120.m=8.100%.Con
n=120.m=8.125%.Var
n=120.m=8.125%.Con
Average

TSB
0.83
0.81
0.39
0.57
0.42
0.52
0.43
0.51
0.24
0.50
0.47
0.11
0.25
0.28
0.11
0.16
2.25
0.29
0.12
0.04
0.10
0.10
0.12
0.30
0.20
0.45
0.41

TSF
0.84
0.66
0.44
0.69
0.47
0.49
0.62
0.81
0.28
0.44
0.59
0.17
0.91
0.53
0.41
0.53
2.56
0.87
0.69
0.05
0.73
0.12
0.17
0.50
0.41
0.53
0.60

L=12
TSB
0.72
0.64
0.54
0.48
0.53
0.46
0.41
0.74
0.23
0.40
0.45
0.11
0.27
0.21
0.08
0.13
0.41
0.37
0.13
0.03
0.10
0.13
0.17
0.37
0.25
0.59
0.34

TSF
0.81
0.57
0.34
0.57
0.55
0.56
0.36
0.33
0.21
0.51
0.48
0.12
0.96
0.43
0.40
0.58
0.71
0.75
0.17
0.02
0.37
0.14
0.18
0.46
0.23
0.97
0.45

L=13
TSB
0.80
0.51
0.54
0.58
0.46
0.50
0.64
1.03
0.19
0.45
0.50
0.10
0.26
0.23
0.08
0.14
0.40
0.32
0.10
0.02
0.10
0.05
0.07
0.20
0.10
0.39
0.34

TSF
0.79
0.59
0.58
0.56
0.52
0.53
0.22
0.23
0.30
0.37
0.77
0.14
0.82
0.30
0.37
0.56
0.68
0.82
0.38
0.03
0.42
0.11
0.16
0.28
0.26
0.59
0.44

L=14
TSB
0.74
0.58
0.54
0.54
0.50
0.45
0.51
0.80
0.24
0.32
0.46
0.13
0.33
0.21
0.10
0.16
0.49
0.42
0.13
0.02
0.09
0.07
0.11
0.42
0.19
0.51
0.35

TSF
0.69
0.70
0.61
0.64
0.57
0.52
0.61
1.03
0.26
0.45
0.66
0.13
0.83
0.32
0.27
0.16
0.81
0.42
0.13
0.02
0.45
0.13
0.19
0.38
0.19
0.47
0.45

The obtained results clearly show that the TSB algorithm is signiﬁcantly more eﬀective than
the TSF one. For each group of data and length of tabu lists, the average relative error of the
TSB algorithm is at least by 0.1 % less than of TSF algorithm. The best results of the two
algorithms were obtained for a list length L = 13. For this length the average error (for all
groups of data) of TSB algorithm is at the level of 0.34 %, whereas for TSF algorithm it equals
0.44 %. It is thus higher by about 30%. In addition, the error of the TSB algorithm decreases
with an increasing number of tasks. For groups with a number of tasks n = 20 it ranges within
0.45 − 1.03% (except for the group: n=80, m=4, 50% n=80, m=8, 25%). In groups of the
largest number of tasks it varies from 0.02 to 0.39 %.

6

Summary

The paper considered the cycle ﬂow-shop hybrid problem with machine setup and minimization
of the cycle length. The properties which were used in the construction of an algorithm based
on tabu search method proved to be successful. Computational experiments were carried out,
2135

Cyclic hybrid ﬂow-shop scheduling problem with machine setups

Bo˙zejko et al.

which conﬁrmed the high eﬃciency of the algorithm. The methodology is designed to solve a
class of cyclic scheduling problems, diﬃcult problem of discrete optimization. Proposed optimization techniques, as a part of computational science methodology, can be applied in any
real-world optimization problem with permutational representation of a solution.
Acknowledgements. The work was supported by the OPUS grant DEC-2012/05/B/ST7/
00102 of Polish National Centre of Science.

References
[1] Bo˙zejko W., Grabowski J., Wodecki M., Block approach-tabu search algorithm for single machine
total weighted tardiness problem, Computers & Industrial Engineering, Elsevier Science Ltd, Volue
50, Issue1/2 (2006), 1–14.
[2] Bo˙zejko W., Pempera J., Wodecki M., Cyclic hybrid ﬂow shop problem benchmark library,
http://staﬀ.iiar.pwr.wroc.pl/wojciech.bozejko/benchmarks.htm
[3] Bo˙zejko, On single-walk parallelization of the job shop problem solving algorithms, Computers &
Operations Research 39 (2012), 2258–2264.
[4] Bo˙zejko, Solving the ﬂow shop problem by parallel programming, Journal of Parallel and Distributed Computing 69 (2009), 470–481.
[5] Bo˙zejko W., Uchro´
nski, Wodecki M., Parallel hybrid metaheuristics for the ﬂexible job shop problem, Computers & Industrial Engineering, 59 (2010), 323–333.
[6] Bo˙zejko W., Pempera J., Smutnicki C., Parallel Tabu Search Algorithm for the Hybrid Flow Shop
Problem, Computers and Industrial Engineering, 65 (2013), 466–474.
[7] Bo˙zejko W., Wodecki M., Parallel genetic algorithm for minimizing total weighted completion
time, Lecture Notes in Computer Science No. 3070, 2004, 400–405.
[8] Brucker P., Kampmeyer T., Cyclic job shop scheduling problems with blocking. Annals of Operations Research, 159 (2008), 161–181.
[9] Grabowski J., Skubalska E., Smutnicki C., On Flow Shop Scheduling with Release and Due Dates
to Minimize Maximum Lateness, Journal of the Oper. Research Society, 34,7 (1983), 615–620.
[10] Kampmeyer T., Cyclic Scheduling Problems, Ph. D. Thesis, University Osnabr¨
uck, 2006.
[11] Kochhar S, Morris R, Wong W., The local search approach to ﬂexible ﬂow line scheduling, Engineering Costs and Production Economics, 14,1 (1988), 25–37.
[12] Levner E., Kats V, Lopez A.P., Cheng T.C.E., Complexity of cyclic scheduling problems: A
state-of-the-art survey, Computers and Industrial Engineering, 59 (2010), 352–361.
[13] Nowicki E., Smutnicki C., The ﬂow shop with parallel machines: A tabu search approach. European
Journal of Operational Research, 106 (1998), 226–253.
[14] Panwalkar S.S., Dudek R.A., Smith M.L., Sequencing research and the industrial scheduling problem, Symposium on the theory of scheduling and its applications (ed. Elmaghraby S.E.), SpringerVerlag, Berlin, 1973.
[15] Ruiz R., Serifoglu F.S., Urlings T., Modeling realistic hybrid ﬂexible ﬂowshop scheduling problems,
Computers and Operations Research, 35 (2008), 1151–1175.
[16] Wodecki M., A block approach to earliness-tardiness scheduling problems, International Journal
on Advanced Manufacturing Technology, 40 (2009), 797–807.

2136

