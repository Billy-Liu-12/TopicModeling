A Pollution Adaptive Mesh Generation Algorithm
in r-h Version of the Finite Element Method
Soo Bum Pyun and Hyeong Seon Yoo
Department of Computer Science, Inha University,
Inchon, 402-751, South Korea
hsyoo@inha.ac.kr

Abstract:

In this paper, we propose a simplified pollution adaptive mesh
generation algorithm, which concentrate on the boundary node based on the element
pollution error indicator. The automatic mesh generation method is followed by
either a node-relocation or a node-insertion method. The boundary node relocation
phase is introduced to reduce pollution error estimates without increasing the
boundary nodes. The node insertion phase greatly improves the error and the factor
with the cost of increasing the node numbers. It is shown that the suggested r-h
version algorithm converges more quickly than the conventional one.

1 Introduction
Most engineering problems are described in polygonal domains with geometric
singularities. These singularities make the solution diverge to infinity and cause the
conventional error estimators to severely underestimate the error in any patch outside
the neighborhood of the singular point. Since Babuskas works about error estimators
and pollution errors it is known that the pollution error estimates are much more than
the local error ones [1,2,3,4]. It was demonstrated that the conventional ZienkiewiczZhu error estimator [5,6,7,8] was insufficient and should include a pollution error
indicator [1,4]. The pollution-adaptive feedback algorithm employs both local error
indicators and pollution error indicators to refine the mesh outside a larger patch,
which includes a patch and one to two surrounding mesh layers [2,3]. The
conventional pollution adaptive algorithm bisects the element for every iteration and
needs a lot of iterations to converge.
We concentrate only on a problem boundary since the singularities exist on the
boundary and mesh sizes change gradually regardless of the mesh generation
algorithm. A mesh generation algorithm, which uses a node relocation method (rmethod) as well as h-method of the finite element method for boundary elements, is
proposed. The algorithm employs a boundary-node relocation at first and then does a
node insertion based on the pollution error indicator.

V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 928-936, 2001.
© Springer-Verlag Berlin Heidelberg 2001

A Pollution Adaptive Mesh Generation Algorithm

929

2 The Model Problem
Consider a typical L-shaped polygon, Ω ⊆ R 2 , with boundaries ∂Ω = Γ = ΓD ∪ ΓN ,

ΓD ∩ ΓN = {} where ΓD is the Dirichlet and Γ N is the Newmann boundary (Fig.1).
ΓD = CD and

ΓN = AB ∩ BC ∩ DE ∩ EF ∩ FA .(

θ

ΓD = CD
ΓN = AB ∩ BC ∩ DE ∩ EF ∩ FA
Fig. 1. The L-shaped domain for the model problem

We

will

consider

Laplacian

with

mixed

boundary

conditions.

Let

us

H Γ1D ≡ {u ∈ H 1 (Ω) | u = 0 on ΓD } . Then the variational formulation of this
model problem satisfies (1).
Find u h ∈ S ph , ΓD (Ω) := H 1ΓD ∩ S ph such that

BΩ (u h , v h ) =

∫ gv

h

∀v h ∈ S hp,ΓD

(1)

ΓN

A patch error was expressed only by a local error, but it was demonstrated that the
pollution error should include the patch error . The local error was improved by
considering a mesh patch ω h with a few surrounding mesh layers. The equilibrated
residual functional is the same for the local error and the pollution error. But the
pollution error was calculated by considering the outside of the larger patch, ω h .

eh

~

~

= V1ω h + V2ω h

ωh

V

where,

~

(2)

ω~h
~
; pollution error on ω

ω~h
1

; local error on

V2ω h
h
~
ω h ; ω h + a few mesh layers
Let us denote

v

S

= B S (v, v) energy norm over any domain S ⊆ Ω , then the

930

S.B. Pyun and H.S. Yoo

x ∈ ω h , [1,2,3].

equation (3) can be a pollution estimator with

V

ω~h
2

~

ωh

≅

ωh

2

~

⎞
⎞ ⎛ ∂V2ω h
⎛ ∂V2ω h
⎟
⎟ +⎜
⎜
(
)
x
⎟ ⎜ ∂x ( x )⎟
⎜ ∂x
2
1
⎠
⎠ ⎝
⎝

2

(3)

3 The Proposed Algorithm
3.1 The Basic Idea
For adaptive control of the pollution error in a patch of interest, the conventional
algorithm fixes meshes in the patch and refines meshes outside the patch especially
near singularities. The algorithm calculates an element pollution indicator and
regularly divides γ % of elements whose pollution indicators are high [2]. This
algorithm is as following Fig.2.
Let Th =

Th0

Compute

the

finite

element

solution

on

M ωh ;

Th , ε ω h and

While ( M ωh > t %ε ωh ) do
For(each element )do

~ ;
Compute µ τ , τ ∈ Th , τ ∉ ω
h
If ( µ τ ≥ γ max µ τ )

Subdivided τ regularly;

Endif
Endfor
Compute the finite element solution on Th and

ε ωh , M ωh ;

Endwhile
Fig. 2. Structure of the conventional algorithm

In Fig.2 we denote the element pollution error M ωh , the local error ε ωh and the
element pollution indicator µτ [2]. Since the conventional algorithm bisects the
element length, it could be accelerated if we have smaller boundary elements near the
singular points. Therefore it is natural to think about combining r and h method.
In our proposed algorithm, we concentrated only on boundary nodes and whole
interior area is triangulated automatically by the constrained Delaunay algorithm [9].
Our algorithm employs two ideas for the control of the boundary-nodes. The first is to
relocate a boundary node. It makes boundary nodes near a singular point close to the
point. The other is to insert a node between the boundary nodes of elements whose
pollution indicators are larger than the specified value. In the relocation phase, the

A Pollution Adaptive Mesh Generation Algorithm

931

new boundary element length is calculated by using the following relationship
between the pollution error estimator and the element size [1,11].
Let

~

V2ω h

ωh

≈ h 2λ +1

(4)

where λ ; the exponent for singular point.
From this expression, we can deduce old and new element length as following,
~
ω

V2 h

2 λ +1
= Ch old

ωh ,old

~
ω

V2 h

ωh , new

(4)

2 λ +1
= Ch new

(4")

Combining two equations, we obtain h new ,

hnew

~
= hold × ⎛⎜ V2ω h
⎝

ω h , old

⎞
⎟
ω h , new ⎠

ω~ h
2

/V

− 2 λ1+1

(5)

In order to get the pollution error smaller than the local error we use
~

~
ω

tε ω h ≈ t V1ω h

ωh

instead of V2 h

~
ω

and 1. And V2 h

ω h ,old

will be

ωh , new
~

µτ ≈ V2ω

.

t is a user-specified constant between 0

h

ωh

/ ω h since the

~ . Finally
pollution error consists of the element pollution error indicators outside ω
h
the new element size becomes,

h new = h old × (ζ τ )− 2 λ +1
1

where

ζτ ≡

µτ
tε ω

(6)

h

This new element size has an effect on the location of the boundary node, especially
the nodes on BC and CD in Fig 1. If the ratio of the element length (ζ τ )− 2 λ +1 is less
than 1, the algorithm moves the node to the singular point. But if it is greater than 1,
the new length is discarded and the location of the node remains fixed to have stable
solution. This relocation method is for reducing the number of iteration to get the
final mesh. The boundary node insertion phase takes part in a high quality of the error
estimator, this phase is the same as others [1,2,3].
3.2 The Proposed Algorithm
A binary number Flag is employed to alternate the boundary relocation and the node
insertion process. If the flag is 0, the relocation phase is performed. Figure 3 shows
the entire procedure.

932

S.B. Pyun and H.S. Yoo
Let Th =

Th0

and set Flag = 0

Compute the finite element solution on Th , ε ω and
h

While ( M ωh > t %ε ωh ) do

M ωh ;

Switch ( Flag )
Case

0 :

/* relocation phase*/

For ( each element on boundary) do
Calculate µ τ ;

Calculate ζ τ and h ( k +1) ;
If ( (ζ τ )

− 2 λ1+1

< 1.0 )

do

Relocate the node of the element on boundary;
Endif
Endfor
Set Flag = 1;
Break ;
Case

1:

/* node-insertion phase */

/* The same as Fig.2 */
Set Flag = 0;
Break ;
Endswitch
Generate mesh using nodes on boundary ;
Compute the finite element solution on Th and

ε ωh , M ωh ;

Endwhile
Fig. 3. Structure of the proposed algorithm

The algorithm starts with the initial mesh and set Flag 0. The boundary node
1
relocation is controlled by (ζ τ )− 2 λ +1 . If the value is below 1, the element shrinks to
singular point. In the node insertion phase, a new node is added on the middle of the
boundary element. This r-h method makes fewer nodes on the boundary than the hversion.
The interior mesh generation phase is following the control of nodes on boundaries.
This step is performed by the constrained Delaunay method. And the finite element
analysis and error estimations are following.

4 Numerical Results and Discussions
We considered the mixed boundary-valued problem for the Laplacian over a Lshaped domain and applied boundary conditions consistent with the exact solution

A Pollution Adaptive Mesh Generation Algorithm

933

1

u (r , θ) = r 3 sin( 13 θ) [1]. An interior patch element ω h far from the singular point as
in Fig.4 is chosen. The L-shaped domain is meshed by uniform quadratic triangles
(p=2) with h=0.125. In table.1, we show the numerical results for the model problem.
Though the local error estimate ( ε ω h ) is almost constant, the pollution error decreases
dramatically with iteration in the r-h version.

Fig. 4. The initial mesh for numerical example
ω h : patch, a shaded triangular element
ω h : large patch, elements enclosed by thick
hexagonal line
Table 1. Results of the model problem

934

S.B. Pyun and H.S. Yoo

After the second iterations in h version, the pollution error reduces about half of the
initial value. But the pollution error of r-h version is decreased to one of ninth. This
significant reduction makes the number of iteration less than that of the conventional
one. The pollution factor is defined by the ratio of a pollution error estimate and the
local error estimate, β τ = M ω h / ε ω h . In Fig.5 we can see that the pollution factor
decrease more rapidly for the proposed algorithm case. In case of the proposed
algorithm the pollution factor becomes less than 0.4 only after 4 iterations. From this
result, we note that the proposed algorithm controls the pollution error and is
effective. The total number of iteration is 4, which is much smaller than one of the
conventional algorithms. In Fig. 6 we show the final mesh, which is obtained by the
proposed algorithm.

10.0
9.0
8.0
7.0
6.0
5.0
4.0
3.0
2.0
1.0
0.0

10.0
9.0
8.0
7.0
6.0
5.0
4.0
3.0
2.0
1.0
0.0
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Fig. 5. The pollution factor,

βτ

versus iteration

Fig. 6. The final mesh after 4 iterations by the proposed algorithm (N=3493,E=1696)

A Pollution Adaptive Mesh Generation Algorithm

935

Table.2 shows the numerical results of two algorithms. From the table we knows
that the proposed algorithm needs about 21.03% less time than the conventional one.
It causes from more iteration of the conventional algorithm. Therefore the proposed
algorithm has more effective results than the conventional one.
Table 2. Results of the model problem

No. of iteration
No. of node
No. of element
Computation time

Conventional algorithm
15
2597
1242
5462 sec.

Proposed algorithm
4
3493
1696
4308 sec.

5 Conclusions
The pollution factor shows that the proposed algorithm converges after only 4
iterations comparing with 15 of the conventional one. The proposed r-h algorithm is
easy to handle since it considers only the boundary elements. The boundary noderelocation phase is very effective for this fast convergence.
The pollution error estimates is improved from 66.72 to 2.88. Though the number of
node is increased from 2597 to 3493, the total calculation time has been improved due
to the decrease of the number of iteration. It is proved that the well known Delaunay
method in this pollution adaptive algorithm is effective.

References
�

1. I. Babuska , T. Strouboulis, A. Mathur and C.S. Upadhyay, Pollution error in
2.
3.

4.
5.

the h-version of the finite element method and the local quality of a-posteriori
error estimates, Finite Elements Anal. Des.,17,273-321(1994)
�
I. Babuska , T. Strouboulis, C.S. Upadhyay and S.K. Gangaraj, A posteriori
estimation and adaptive control of the pollution error in the h-version of the finite
element method, Int. J. Numer. Method Engrg., 38, 4207-4235(1995)
�
I. Babuska , T. Strouboulis, S.K. Gangaraj, Practical aspects of a-posteriori
estimation and adaptive control of the pollution error for reliable finite element
analysis,
http://yoyodyne.tamu.edu/research/pollution/index.html(1996)
�
I. Babuska , T. Strouboulis, S.K. Gangaraj and C.S. Upadhyay, Pollution error
in the h-version of the finite element method and the local quality of the
recovered derivatives, Comput. Methods Appl. Mech. Engrg.,140,1-37(1997)
O.C. Zienkiewicz, and J.Z.Zhu, The Superconvergent Patch Recovery and a
posteriori estimators. Part1. The recovery techniques, Int. Numer. Methods
Engrg.,33,1331-1364(1992)

936

S.B. Pyun and H.S. Yoo

6. O.C. Zienkiewicz, and J.Z.Zhu, The Superconvergent Patch Recovery and a
7.
8.
9.
10.
11.

posteriori estimators. Part2. Error estimates and adaptivity, Int. J. Numer.
Methods Engrg.,33,1365-1382(1992)
O.C. Zienkiewicz, and J.Z.Zhu, The Superconvergent Patch Recovery(SPR) and
adaptive finite element refinement, Comput. Methods Appl. Mech.
Engrg.,101,207-224(1992)
O.C. Zienkiewicz, J.Z.Zhu and J. Wu, Superconvergent Patch Recovery
techniques  Some further tests, Comm. Numer. Methods Engrg., Vol. 9,251258(1993)
B. Kaan Karamete, User manual of 2D Constrained Mesh Generation Mesh2d.
http://scorec.rpi.edu/~kaan/mesh2d.tar
B.K. Karamete, T. Tokdemir and M. Ger, Unstructured grid generation and a
simple triangulation algorithm for arbitrary 2-D geometries using object oriented
programming, Int. J. Numer. Methods Engrg., 40,251-268(1997)
�
I. Babuska , T. Strouboulis, and S.K. Gangaraj, A posteriori estimation of the
error in the recovered derivatives of the finite element solution, Comput.
Methods Appl. Mech. Engrg.,150,369-396(1997)

