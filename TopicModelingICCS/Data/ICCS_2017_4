Available online at www.sciencedirect.com

ScienceDirect
Procedia Computer Science 108C (2017) 927–936

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

A case based reasoning based multi-agent system for
reactive
in seaport system
terminals
A
case
based
reasoning
based
for
Athe
case
based container
reasoningstacking
based multi-agent
multi-agent
system
for
the
container
stacking
seaport
terminals
1
2 in
3
the reactive
reactive
container
stacking
in Habib
seaport
terminals
Ines Rekik
, Sabeur Elkosantini
and
Chabchoub
LOGIQ Research Unit, University of Sfax, Tunisia

1

11
2
3
2
Ines
Rekik
,, Sabeur
Elkosantini
and
Habib
Chabchoub
Industrial
Engineering
Department,
King2Saud
University,
Saudi Arabia3
Ines
Rekik
Sabeur
Elkosantini
and
Habib
Chabchoub
1

Research Unit,
University
of Sfax,
Tunisia
3International
school
of Business,
Tunisia
1LOGIQ
LOGIQ Research Unit, University of Sfax, Tunisia

2
ines.rekik.86@gmail.com,
selkosantini@ksu.edu.sa,
Habib.chabchoub@gmail.com
Department,
University,
2Industrial Engineering
Industrial Engineering
Department, King
King Saud
Saud
University, Saudi
Saudi Arabia
Arabia

3International
3International school
school of
of Business,
Business, Tunisia
Tunisia

ines.rekik.86@gmail.com,
ines.rekik.86@gmail.com, selkosantini@ksu.edu.sa,
selkosantini@ksu.edu.sa, Habib.chabchoub@gmail.com
Habib.chabchoub@gmail.com

Abstract
With the continuous development of seaports, problems related to the storage of containers in terminals
have
emerged. Unfortunately, existing systems suffer limitations related to the distributed monitoring
Abstract
Abstract
With
of
problems
to
containers
in
and
control,
real-timedevelopment
stacking strategies
efficiency
and related
their ability
handleof
dangerous
In
With the
the continuous
continuous
development
of seaports,
seaports,
problems
related
to the
thetostorage
storage
of
containerscontainers.
in terminals
terminals
have
emerged.
Unfortunately,
existing
systems
suffer
limitations
related
to
the
distributed
monitoring
this
paper,
we
suggest
a
multi-agent
architecture
based
on
a
set
of
knowledge
models
and
learning
have emerged. Unfortunately, existing systems suffer limitations related to the distributed monitoring
mechanisms
for disturbance
and
reactive efficiency
decision making
management.
The suggested
is able
and
stacking
strategies
and
ability
dangerous
containers.
In
and control,
control, real-time
real-time
stacking
strategies
efficiency
and their
their
ability to
to handle
handle
dangeroussystem
containers.
In
to
and reuse
knowledgearchitecture
in order to detect
and select the
mostand
appropriate
this
paper,
we
aa multi-agent
based
on
models
learning
thiscapture,
paper, store
we suggest
suggest
multi-agent
architecture
based disturbances
on aa set
set of
of knowledge
knowledge
models
and
learning
mechanisms
for
reactive
making
The
suggested
system
is
container
location
by using aand
Case
Based decision
Reasoning
(CBR)management.
approach. The
proposed
system
takes
into
mechanisms
for disturbance
disturbance
and
reactive
decision
making
management.
The
suggested
system
is able
able
to
capture,
store
and
reuse
knowledge
in
order
to
detect
disturbances
and
select
the
most
appropriate
account
the
storage
of
dangerous
containers
and
combines
Multi-Agent
Systems
(MAS)
and
case
based
to capture, store and reuse knowledge in order to detect disturbances and select the most appropriate
container
using
Case
Based
Reasoning
reasoning
to handleby
containers.
container location
location
bydifferent
using aa types
Case of
Based
Reasoning (CBR)
(CBR) approach.
approach. The
The proposed
proposed system
system takes
takes into
into
account
the
storage
of
dangerous
containers
and
combines
Multi-Agent
Systems
(MAS)
and
case
based
account
theAuthors.
storage Published
of dangerous
containers
©
2017 The
by Elsevier
B.V. and combines Multi-Agent Systems (MAS) and case based
Keywords: Multi-agent
system, Case
Based
Reasoning, disturbances management, CSP, knowledge representation,
reasoning
to
handle
different
types
of
reasoning
to
handle
different
types
of containers.
containers.
Peer-review
under
responsibility
of
the scientific
committee of the International Conference on Computational Science
learning mechanism.
Keywords:
Keywords: Multi-agent
Multi-agent system,
system, Case
Case Based
Based Reasoning,
Reasoning, disturbances
disturbances management,
management, CSP,
CSP, knowledge
knowledge representation,
representation,
learning
mechanism.
learning mechanism.

1 Introduction
Container
Stacking Problems (CSP) consist in determining the exact location of containers in the
1
Introduction
1storage
Introduction
area (named the storage yard) of a terminal. A storage yard consists of a number of areas

Container
Stacking
(CSP)
consist
in
determining
exact
containers
in
the
perpendicular
parallelProblems
to the berth
called
blocks.
block is the
characterized
by a of
number
of bays
Container or
Stacking
Problems
(CSP)
consist
inEach
determining
the
exact location
location
of
containers
in and
the
storage
area
(named
the
storage
yard)
of
a
terminal.
A
storage
yard
consists
of
a
number
of
areas
each
bay
is
divided
into
several
number
rows
(called
stacks)
characterized
by
a
stack
height
(named
storage area (named the storage yard) of a terminal. A storage yard consists of a number of areas
perpendicular
or
parallel
tier) (see Figure
perpendicular
or 1).
parallel to
to the
the berth
berth called
called blocks.
blocks. Each
Each block
block is
is characterized
characterized by
by aa number
number of
of bays
bays and
and
it will
be discussed
in section
2, of
many
stacking
systems have
developed
in the
each
is
into
number
rows
(called
characterized
by
aa stack
height
eachAsbay
bay
is divided
divided
into several
several
number
of
rowscontainer
(called stacks)
stacks)
characterized
by been
stack
height (named
(named
literature
but they1).
suffer from limitations related to the disturbances management, the distributed control
tier)
tier) (see
(see Figure
Figure
1).
As
it
will
be
discussed
section
2,
container
systems
of containers
allocations
andin
real-time
aspect
(Rekik, stacking
et al., 2015).
As it will be discussed
inthe
section
2, many
many
container
stacking
systems have
have been
been developed
developed in
in the
the
literature
but
they
suffer
from
limitations
related
to
the
disturbances
management,
the
distributed
control
literature but they suffer from limitations related to the disturbances management, the distributed control
of
of containers
containers allocations
allocations and
and the
the real-time
real-time aspect
aspect (Rekik,
(Rekik, et
et al.,
al., 2015).
2015).

1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.078

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

928	

This paper presents an intelligent multi agent and reactive architecture for the distributed control of
the container stacking system in an uncertain and disturbed environment. The system integrates CBR in
a multi-agent system for the distributed control of the stacking process. To the best of authors’
knowledge, there is no previous work formalizing knowledge using CBR paradigm and integrating this
mechanism in a MAS for the reactive stacking of containers in seaport terminals. The system includes
five types of agents (interface agent, block agent, bay agent, stack agent and evaluation agent). Each
one is in charge of determining a part of the final decision. The proposed system is able to detect
disturbances such as those related to dangerous containers and select the most appropriate container
location. The system can also learn from past encountered experience and adjust automatically its
decisions.

Figure 1: A container terminal

The remainder of this paper is organized as follows: Section 2 gives a brief survey on existing studies
related to CSP. Section 3 presents the case representation and the learning mechanisms adopted in this
paper. Section 4 presents the global architecture of the proposed multi-agent approach. Section 5
describes the different agents constituting this system. Section 6 reports the experimental results of the
proposed system. Finally, a conclusion is drawn and future work is addressed.

2 Related works
To improve terminals performance, several staking rules (strategies) have been developed in the
literature. The efficiency of each rule varies from terminal to terminal (van Asperen, et al., 2013).
According to (Rekik, et al., 2015), stacking rules are categorized into three main families:
─ Block Stacking Rules (BlSR): deal with the selection of the “appropriate” block for incoming
containers (import or export containers). These rules include dedicated areas, Role Separation of
Blocks, Role Separation of Rows, Role Separation of Bays, No Restriction, the Different Priorities
on Blocks for Different Berths, and the Maximum Number of Internal Trucks and Road Trucks in a
Block.
─ Stacking (BSR)ǣare responsible for the selection of a bay from the pre-selected block.
Several bay stacking rules have been studied in the literature, such as Concentrated Location Principle
and Sequence rule.
─ Slot Stacking Rules (SSR): are related to the selection of the exact storage location in the assigned
bay of the assigned block. Several stack stacking rules have been studied in the literature including
Random rule, Levelling rule, Closest Position rule, Maximum Remaining Stack height rule.

	

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

929

Moreover, many container stacking systems have been developed in the literature. These systems
can be classified according to static or real-time perspectives. In static stacking systems, the exact
position in the storage area for each inbound container is determined before the vessel arrival. These
systems are widely used in the literature (Jin, et al., 2015) (Jovanovic & Voß, 2014) (Lin, et al., 2015)
(Zhang, et al., 2014). In real-time storage systems, the problem consists in deciding in real time, at the
arrival of an imported or exported container, its exact location in the storage area. Eventually, in a
storage yard, the assignment of specific storage positions for incoming containers can’t be pre-planned
due to the high uncertainties and the unexpected (disruptive) events that may occur. Few research works
have investigated Multi-Agent Systems (MAS) for the real-time container stacking (Gazdar, et al.,
2009)(Hamidou, et al., 2013) (Rekik, et al., 2016). For example, (Gazdar, et al., 2009) have developed
a MAS denoted COSAH (COntainer Stacking via multi-Agent approach and Heuristic method) that
allows simulating, solving and optimizing the amount of storage space for handling incoming and
outgoing containers within a fluvial or maritime port. (Hamidou, et al., 2013) have also developed a
fully heterarchical architecture to handle dangerous containers and minimize the safety distance between
two dangerous containers taking into account the dynamic arrival and departure of containers.
Containers agents have to negotiate to find the appropriate location of containers. Their suggested
architecture was limited to only one block of many rows.
In this paper, a Real-Time Container Stacking System, referred to as (RTCSS), integrating a CBR
into a multi-agent system has been developed. The proposed approach introduced three novel aspects
that have not been addressed in previous works. First, disturbances and decisions models for related
knowledge management have been presented. Secondly, a learning mechanism has been introduced to
allow the DSS to acquire new knowledge and learn from past encountered experience. Thirdly, a
distributed system has been conceived based on a three-steps methodology. It consists in determining
the allocation strategy of an incoming container, in a first step, and the exact allocation position in the
yard by applying the selected strategy, in a second step. These concepts have been integrated in a multiagent system for an autonomous control of the different disturbances that may occur at any time.

3 Case representation and learning mechanism
This section introduces the CBR systems and the learning mechanisms including case representation,
case bases and case retrieval.

3.1 Case representation
A case represents knowledge related to a situation of a container as well as the appropriate
assignment rule that can be adopted to determine the position of the associated container. In this article,
cases have the following structure:
𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶: < 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾, 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷 >

(1)

Where Knowledge is an attribute describing all characteristics related to a container to be stored and
Decision is the allocation decision of the incoming container. Knowledge represents all knowledge
related to the containers to be stored while the attribute Decision of the case representation (see equation
1) represents the stacking rule related to the assignment of a container. As it will be detailed in section
4, the value of the decision will vary according to the agent. This attribute can be:



A Block Stacking Rule (BlSR) representing the rule to be used to determine how a block
is selected for the storage of an incoming container.
Bay Stacking Rule (BSR) representing the rule to be used to determine how a bay is
selected for the storage of a container.

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

930	



Stack Stacking Rule (SSR) representing the rule to be used to determine how a stack is
selected for the storage of a container.

The different agents of the suggested system have different representations of both the knowledge and
the related decision attributes (as detailed in section 4).

3.2 Case base
The case-base includes a set of cases representing the most representative allocation situations and
their associated allocation decisions. The suggested system integrates a continuous learning mechanism
by the use of four types of case base:







𝐶𝐶𝐶𝐶𝐵𝐵𝐵𝐵𝐵𝐵 = {𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝑏𝑏𝑏𝑏𝑏𝑏 }, 𝑖𝑖 = 1. . 𝑛𝑛 : is a case base storing bad cases where n is the number of
bad cases. The decision attribute in each case of this case base is composed of the final
allocation decision constituted by the three partial decisions BlSR, BSR and SSR. This
case base will allow the system to avoid some decisions that have been tested in the past
and that have provided bad results. 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝑏𝑏𝑏𝑏𝑏𝑏 is a bad case which have not improved the
performance of the port in a previous experience.
𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺1 = {𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 }, 𝑖𝑖 = 1. . 𝑚𝑚𝐵𝐵𝐵𝐵𝐵𝐵𝐵𝐵 : represents a case base storing good cases,
where 𝑚𝑚𝐵𝐵𝐵𝐵𝐵𝐵𝐵𝐵 is the number of good cases. The decision attribute in each case consists of
the block stacking rule (BlSR) selected to allocate the incoming container. This case base
will allow the system to quickly select some decisions that have been tested in the past and
that have provided good results.
𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺2 = {𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 }, 𝑖𝑖 = 1. . 𝑚𝑚𝐵𝐵𝐵𝐵𝐵𝐵 : consists also of a case base storing good bay
stacking rule given the selected BlSR.
𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺3 = {𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺3 }, 𝑖𝑖 = 1. . 𝑚𝑚𝑆𝑆𝑆𝑆𝑆𝑆 : represents also a case base storing good SSR
considering the selected BlSR and BSR.

3.3 Case retrieval

When a new container requiring the determination of position is detected, the system needs to find
the three partial decisions BlSR, BSR and SSR. For each of these partial decisions, the system
determines the most similar case in order to find the best decision and avoid bad ones. This step is
performed by calculating the distance between a 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖 stored in a case base and a Sit where Sit is a
vector representing the knowledge of the container to be stacked (see equation 2). The Euclidian distance
is used for the similarity measure. An unweighted measure is used in this article. The case with the
lowest value of the distance is considered as the most similar.
𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷(𝑆𝑆𝑆𝑆𝑆𝑆, 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 ) =
− 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 . 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾. 𝑎𝑎𝑎𝑎𝑎𝑎𝑗𝑗 |

∑𝑝𝑝𝑗𝑗=1|𝑆𝑆𝑆𝑆𝑆𝑆. 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾. 𝑎𝑎𝑎𝑎𝑎𝑎𝑗𝑗

(2)

Where p is the number of attributes of the knowledge part of a case (see equation 1),
𝑆𝑆𝑆𝑆𝑆𝑆. 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾. 𝑎𝑎𝑎𝑎𝑎𝑎𝑗𝑗 is the jth attribute of the part Knowledge of the situation Sit and
𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 . 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾. 𝑎𝑎𝑎𝑎𝑎𝑎𝑗𝑗 is the jth attribute of the part Knowledge of the case 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 .
Another distance measure is introduced to calculate the similarities between a case and cases from
𝐶𝐶𝐶𝐶𝐵𝐵𝐵𝐵𝐵𝐵 (see equation 3)
𝑝𝑝
𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷(𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶, 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐵𝐵𝐵𝐵𝑑𝑑 ) = ∑𝑗𝑗=1|𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶. 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾. 𝑎𝑎𝑎𝑎𝑎𝑎𝑗𝑗 − 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐵𝐵𝐵𝐵𝐵𝐵 . 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾. 𝑎𝑎𝑎𝑎𝑎𝑎𝑗𝑗 | +
∑3𝑘𝑘=1|𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶. 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷. 𝑎𝑎𝑎𝑎𝑎𝑎𝑘𝑘 − 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐵𝐵𝐵𝐵𝐵𝐵 . 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷. 𝑎𝑎𝑎𝑎𝑎𝑎𝑘𝑘 |
(3)

	

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

Where 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶. 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝑖𝑖𝑖𝑖𝑖𝑖. 𝑎𝑎𝑎𝑎𝑎𝑎𝑘𝑘 is the id of the kth stacking rules (see section 3.1)

4 Multi agent architecture
The suggested MAS architecture relies on the three components of a storage yard: block, bay and
stack. Accordingly, we suggested a three-step methodology for determining the exact position of
containers: block allocation, bay allocation and stack allocation.
The proposed Multi- Agent architecture is composed of five agents:






Interface Agent (IA): detects and analyzes, in a real time way, the different requests of
containers allocation and also the unexpected events and disturbances from the common
environment.
Block Agent (BlA): determines the block where the container is allocated and monitors the
state of blocks.
Bay Agent (BA): determines the Bay where the container is allocated and monitors the
state of bays.
Stack Agent (SA): determines the Stack where the container is allocated and monitors the
state of stacks.
Evaluation Agent (EA): evaluates the efficiency of an allocation decision.

The different agents constituting the suggested system communicate with each other and with the
external environment in order to make an allocation/re-allocation decision. The re-allocation decision is
made face to the detection of a disturbance or an unexpected event.
First, the interface agent receives the signals from the external environment, analyzes these signals
and then sends an allocation or re-allocation order to the DSS (Decision Support System) depending on
the information (knowledge) provided from the common environment. The Block (BlA), Bay (BA) and
Stack (SA) agents cooperate to generate an allocation decision. Each of these agents consults its own
Case Base in order to determine the most appropriate allocation solution (the most appropriate block,
bay and stack respectively). Each partial decision is then sent to the Evaluation agent (EA) which
consults its 𝐶𝐶𝐶𝐶𝐵𝐵𝐵𝐵𝐵𝐵 to verify if this solution has been applied for this case and has given bad results. If
this situation exists in the 𝐶𝐶𝐶𝐶𝐵𝐵𝐵𝐵𝐵𝐵 , the (EA) sends a refuse message to the appropriate agent (respectively
block, bay and stack agent) in order to select the next appropriate allocation solution (respectively block,
bay and stack). Else it sends an acceptance message to the appropriate agent which sends this partial
solution to the next agent of the DSS in order to determine the complete decision. Finally the stack agent
sends an evaluation request to the EA to evaluate the proposed allocation solution with respect to a given
Performance Indicator (in our case the completion time of the loading operation). The EA sends a
request to the BlA to change the block if it is rejected by the EA. Otherwise, a message with the exact
position is sent to the IA to inform the decision makers or the other stakeholders about the allocation
decision (see Figure 2).

931

932	

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

Figure 2: Global architecture

The goals and the behaviors of each type of agent is explained in the following section.

5 Agents description
As shown in previous section, the suggested system includes many types of agents: Interface Agent
(IA), Block Agent (BlA), Bay Agent (BA), Stack Agent (SA) and Evaluation Agent (EA). In next subsections, we will present the goals and behaviors of the different agents of our proposed system.

5.1 Interface agent (IA)
The Interface agent plays in a first way the role of the HMI (Human Machine Interface) to inform
the managers about the final allocation decision. The main objective of this agent is to identify and
analyze the different events received from the common environment. Three types of events are
identified: Allocation and Re-allocation requests, Retrieval requests and Disturbances events. There are
three types of disturbances: resources disturbances (yard crane breakage), equipment disturbances
(blocks breakdown etc.) and containers disturbances (fault in container placing, container breakdown, a
change in a container’s date out etc.).
The agent captures in a first way all the knowledge related to the incoming container, the terminal
configuration, occurring or detected events and disturbances. It sends then an allocation or re-allocation
request to the Block Agent.

5.2 Block agent (BlA)
The block agent is a cognitive agent as it is able to reason before acting. The principle function of
this agent consists on selecting the block that is most favorable by using the Case Based Reasoning
mechanism. In this agent, cases are represented by the model of the equation 1. The knowledge attribute
includes knowledge about the container (attribute Container, see equation 5), terminal configuration
(attribute Terminal, see equation 6), and the type of the event activating the stacking process (detected
events or disturbance, the attribute Event, see equation 7 and disturbance, see equation 8). It is structured
as represented in the following vector:

	

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

𝐾𝐾𝐾𝐾𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜𝑜 = < 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶, 𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇, 𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸, [𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑] >

𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾:
< 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶 𝐼𝐼𝐼𝐼, 𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂, 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷, 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷 𝑖𝑖𝑖𝑖, 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷 𝑜𝑜𝑜𝑜𝑜𝑜, 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶 𝑇𝑇𝑦𝑦𝑦𝑦𝑦𝑦,
𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷 𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔 𝑐𝑐𝑐𝑐𝑐𝑐𝑐𝑐𝑐𝑐 >

933

(4)
(5)

𝑘𝑘
𝑘𝑘
𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾: < 𝑁𝑁𝑖𝑖,𝑗𝑗
, 𝑇𝑇𝑖𝑖,𝑗𝑗
>

(6)

𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾: < 𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸 𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇, 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶 >

(7)

𝑘𝑘
𝑘𝑘
represents the number of containers in the ith stack of the jth bay of the kth block and 𝑇𝑇𝑖𝑖,𝑗𝑗
Where 𝑁𝑁𝑖𝑖,𝑗𝑗
is its type.

The system should also collect data and knowledge related to disturbance if it is detected. A
disturbance is characterized by its type and degree of gravity (which should be indicated by the decision
maker). Thus, a disturbance is represented by the following vector:
𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷 𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝑙𝑙𝑙𝑙𝑙𝑙𝑙𝑙𝑙𝑙: < 𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷 𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇, 𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔𝑔 >

(8)

The attribute Decision (of the equation 1) represents the Block Stacking Rule (BlSR) to be used for the
selection of the appropriate block for the storage of a container.
The main objective of this agent consists on selecting the most appropriate block of the incoming
container by using the Case Based Reasoning mechanism. This agent uses the case base 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺1 to
quickly select the appropriate BlSR. Indeed, it calculates the most similar case to the actual situation Sit
using the distance measure of the equation 2. Then a request is sent to BA for the selection of the BSR
considering the knowledge related to the container and the selected BlSR. If an approval is received, the
BlA adds to the 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺1 the case formed by the knowledge of the container to be stacked and selected
container in order to be considered in similar situations. Otherwise, in case of disproval, the agent will
search for the next most similar case from the case base 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺1 .
The mechanism of the BlA is summarized in the following algorithm:
Repeat
From 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺1 , search the most similar case, 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 , to the actual situation Sit
Send the Knowledge and the BlSR to BA
Receive the answer from BA agent
Until (approval received)
Add to 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺1 the case constituted by Sit and decision of the case 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺

5.3 Bay agent (BA)

The Bay agent is also based on the Case Based Reasoning principle. The attribute Knowledge of the
case used by this agent is represented by the equation
𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾𝐾 = < 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶, 𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇, 𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸𝐸, [𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑𝑑], 𝐵𝐵𝐵𝐵𝐵𝐵𝐵𝐵 >
(9)
Where the attributes Container, Terminal, Event and disturbance are the same as in case 2 while
BlSR is the rule used to select the block. This agent should consider this strategy to select the appropriate
bay. The attribute Decision represents the BSR rule for the selection of the bay.
This agent presents the same reasoning mechanism as the BlA. It consults its case base 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺2 and
selects the most similar case 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝑆𝑆𝑆𝑆 . It sends then the Knowledge, the BlSR and the BSR to the

934	

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

SA. It repeats these operations until receiving an approval answer from the SA. In this case, it adds to
𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺2 the case constituted by Sit and the decision of the case 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝑆𝑆𝑆𝑆 .

5.4 Stack agent (SA)

Like the BlA and BA, the SA uses its case-base 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺3 for the selection of the stack (SSR) relying
on the most similar cases. The attribute Knowledge have the same representation as in equation 4 and
the decision of this agent is represented by the following vector:
𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷𝐷: < 𝐵𝐵𝐵𝐵𝐵𝐵𝐵𝐵, 𝐵𝐵𝐵𝐵𝐵𝐵, 𝑆𝑆𝑆𝑆𝑆𝑆 >

(10)

Where BlSR is the id of the block stacking rule representing the strategy to be adopted by the system to
determine candidate blocks, BSR is the id of the bay stacking rule representing the strategy to be adopted
by the system to determine bays, and SSR is the id of the stack stacking rule representing the strategy to
be adopted by the system to determine stacks.
The SA has the same steps of the BlA and BA to select the most appropriate stack. Indeed, after the
selection of the block, bay and stack stacking rule, SA checks in the 𝐶𝐶𝐶𝐶𝐵𝐵𝐵𝐵𝐵𝐵 if such combination of rules
are encountered in the past for the same type of knowledge. The distance measure of the equation 3 is
used. If a similar case is found, then the obtained final decision is considered as bad and a disapproval
is sent to the agent BA. Otherwise, the knowledge related to container and the obtained location are sent
to EA for evaluation. If a disapproval is received, the case constituted by the knowledge and the three
rules are added to 𝐶𝐶𝐶𝐶𝐵𝐵𝐵𝐵𝐵𝐵 in order to be avoided for future similar cases.
The mechanism of the SA is summarized in the following algorithm:
Repeat
From 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺3 , search the most similar case, 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺 , to the actual situation Sit
From 𝐶𝐶𝐶𝐶𝐵𝐵𝐵𝐵𝐵𝐵 , check if the obtained decision is bad.
If (the decision is bad) Then
Send a disapproval to BA to select another candidate Bay
Else
Send the Knowledge and the exact location to EA for evaluation
EndIf
Receive the answer from EA agent
Until (approval received)
Add to 𝐶𝐶𝐶𝐶𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺3 the case constituted by Sit and decision of the case 𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝐶𝑖𝑖𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺𝐺

5.5 Evaluation agent (EA)
The evaluation agent (EA) evaluates the stacking position sent by the CA considering the following
performance indicator:
𝑃𝑃(𝑑𝑑1 , 𝑞𝑞, 𝑑𝑑2 , ℎ) = 𝛼𝛼𝑑𝑑1 + 𝛽𝛽𝛽𝛽 + 𝛾𝛾𝑑𝑑2 + 𝛿𝛿ℎ

(1)

Where 𝑃𝑃(𝑑𝑑1 , 𝑞𝑞, 𝑑𝑑2 , ℎ) represents the weighted sum of four criteria: 𝑑𝑑1 which represents the distance
separating the given block from the gate; 𝑞𝑞 represents the waiting queue in front of the given block; 𝑑𝑑2
represents the distance separating the given stack from the gate; and ℎ represents the remaining stack
height. 𝛼𝛼, 𝛽𝛽, 𝛾𝛾 and 𝛿𝛿 represent the related weights. The weight related to each criterion varies according
to the type of the incoming container; three cases are considered in our paper:

	

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

935

 In case of open top container, the remaining stack height has the highest weight.
 In case of dangerous container the distance to gate has the highest weight.
 In case of regular or empty container, the waiting queue has the highest weight.
In other word, in order to optimize the yard space and retrieval time, open top containers require the
highest positions in a bay since we can’t place another container above them, but dangerous containers
require the closest positions since they do not generally stay too long in the yard. Finally, regular
containers do not have an influencing criterion which dominates regarding the other criterion.

6 Implementation and experimental results
The proposed system was implemented using the multi-agent platform JADE (Java Agent
DEvelopement framework). For the assessment of the proposed system, data are collected from the
certified ISO Tunisia Sfax seaport in Tunisia. The port has a capacity of 83 000 TEUs and a storage area
of 28 hectares. The port contains 30 non homogeneous blocks. Each block is made up of 5 bays and
each bay contains 4 stacks (the maximum stack height is 4). The container storage process in this seaport
is random and is based on the human controller experience. In this work, we simulated the arrival of
three types of containers: regular, dangerous (with different class of goods) and open top. We assumed
that only one container at a time enters the yard to be stored.
For the assessment of our system, we have defined three scenarios with different initial
configurations and different arrival and departure rates of containers: scenario 1 with an empty yard at
the beginning of the planning horizon; scenario 2 with a 50 % utilization rate of the yard capacity; and
scenario 3 with a 80 % utilization rate of the yard capacity. We have compared the performance of our
approach to the state-of-the-art method (noted combined strategy) in (Güven & Eliiyi, 2014) with
regards to the performance measure presented by the equation 11. We have also implemented the
random strategy which is adopted in the Sfax seaport. This strategy consists on choosing a random
allocation position without taking any attribute into consideration. The final experimental results are
shown in Table 1. As it can be noted in Table 1, the performance of the developed system is also better
for all types of containers and in all scenarios except in the first. Indeed, the performance of the
developed system and the combined strategy are similar for dangerous containers. In addition, the
proposed system presents better results than the strategy adopted by the seaport.
The conducted experiment shows that, the agent system combined with a case based reasoning
system can be efficient for the real time container storage compared to both the combined strategy and
the random strategy adopted in Sfax seaport, especially in presence of dangerous containers.
Empty yard
Combined
strategy
Random
strategy
The
developed
system

50% congestion

80% congestion

Regular

Open top

Dangerous

Regular

Open top

Dangerous

Regular

Open top

Dangerous

1004.320

1377.5

621.033

1534.125

1633.914

1337.3202

1833.066

1763.374

1336.6323

1973.842

2182.442

2145.592

2149.435

2280.426

2488.798

2104.107

625.762

1462.153

1515.558

803.996

1607.380

1689.880

899.148

2285.328 2312.89
1020.497

1152.362

Table 1: Experimental results

Ines Rekik et al. / Procedia Computer Science 108C (2017) 927–936

936	

7 Conclusion
In this paper, the architecture of the proposed MAS for the real time container stacking in seaport
terminals is presented. The allocation of an incoming container to its exact position in the yard requires
the determination of the block, bay and stack. The allocation structure in each of these three phases is
relied on Case Based Reasoning (CBR). The proposed approach allows also the control of the storage
system in a real time manner by including the different unexpected events and disturbances that may
occur during the allocation process. The next step of this work will be testing the system to other
systems.

References
Carlisle,
D.,
2010.
graphicx:
Enhanced
support
for
graphics..
[Online]
Available at: http://www.ctan.org/tex-archive/ help/Catalogue/entries/graphicx.html
Gazdar, M. K., Korbaa, O., Ghedira, K. & Yim, P., 2009. Container handling using multi-agent
architecture. International Journal of Information and Database Systems.
Güven, C. & Eliiyi, D., 2014. Trip allocation and stacking policies at a container terminal. s.l., s.n.,
pp. 565-573.
Hamidou, M., Fournier, D., Sanlaville, E. & Serin, F., 2013. Management of dangerous goods in
container terminal with MAS model. s.l., s.n.
Jin, B., Zhu, W. & Lim, A., 2015. Solving the container relocation problem by an improved greedy
look-ahead heuristic. European Journal of Operational Research, pp. 837-847.
Jovanovic, R. & Voß, S., 2014. A chain heuristic for the Blocks Relocation Problem. Computers &
Industrial Engineering, pp. 79-86.
Lin, D., Lee, Y. & Lee, Y., 2015. The container retrieval problem with respect to relocation.
Transportation Research Part C, pp. 132-143.
Rekik, I., Elkosantini, S. & Chabchoub, H., 2015. Container stacking problem: A literature review.
s.l., s.n.
Rekik, I., Elkosantini, S. & Chabchoub, H., 2016. Toward a Knowledge Based Multi-agent
Architecture for the Reactive Container Stacking in Seaport Terminals: Application to the Port of Sfax
in Tunisia. s.l., s.n.
van Asperen, E., Borgman, B. & Dekker, R., 2013. Evaluating impact of truck announcements on
container stacking efficiency. Flexible Services and Manufacturing Journal, 25(4), pp. 543-556.
Zhang, C. et al., 2014. Location assignment for outbound containers with adjusted weight proportion.
Computers & Operations Research, pp. 84-93.

