An Efficient Real-Time Frequent Pattern Mining
Technique Using Diff-Sets
Rajanish Dass and Ambuj Mahanti
Indian Institute of Management Calcutta
{rajanish, am}@iimcal.ac.in

Abstract. Frequent pattern mining in real-time is of increasing thrust in many
business applications such as e-commerce, recommender systems, and supplychain management and group decision support systems, to name a few. A
plethora of efficient algorithms have been proposed till date. However, with
dense datasets, the performances of these algorithms significantly degrade.
Moreover, these algorithms are not suited to respond to the real-time need. In
this paper, we describe BDFS(b)-diff-sets, an algorithm to perform real-time
frequent pattern mining using diff-sets. Empirical evaluations show that our
algorithm can make a fair estimation of the probable frequent patterns and
reaches some of the longest frequent patterns much faster than the existing algorithms.

1 Introduction
In recent years, business intelligence systems are playing pivotal roles in fine-tuning
business goals such as improving customer retention, market penetration, profitability
and efficiency. In most cases, these insights are driven by analyses of historic data.
Now the issue is, if the historic data can help us make better decisions, how real-time
data can improve the decision making process [1].
Frequent pattern mining for large databases of business data, such as transaction
records, is of great interest in data mining and knowledge discovery [2], since its inception in 1993, by Agrawal et al. Researchers have generally focused on the frequent
pattern mining, as it is complex and the search space needed for finding all frequent
itemsets is huge [2]. A number of efficient algorithms have been proposed in the last
few years to make this search fast and accurate. Among these, a number of effective
vertical mining algorithms have been recently proposed, that usually outperforms
horizontal approaches. Despite many advantages of the vertical format, the methods
tend to suffer, when the tid-list cardinality gets very large as in the case of dense datasets [3]. Again, these algorithms have limited themselves to either breadth first or
depth first search techniques. Hence, most of the algorithms stop only after finding
the exhaustive (optimal) set of frequent itemsets and do not promise to run under user
defined real-time constraints and produce some satisficing (interesting sub-optimal)
solutions due to their limiting characteristics[4, 5].
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 818 – 821, 2005.
© Springer-Verlag Berlin Heidelberg 2005

An Efficient Real-Time Frequent Pattern Mining Technique Using Diff-Sets

819

2 Business Issues of Real-Time Frequent Pattern Mining
Using up-to-date information, getting rid of delays, and using speed for competitive
advantage is what the real-time enterprise is about. There are numerous areas where
real-time decision making plays a crucial role. These include areas like real-time customer relationship management, ,real-time supply chain management systems realtime enterprise risk and vulnerability management, real-time stock management and
vendor inventory, real-time recommender systems, real-time operational management
with special applications in mission critical real-time information as is used in the airlines industry, real-time intrusion and real-time fraud detection, real-time negotiations
and other areas like real-time dynamic pricing and discount offering to customers in
real-time. More than that, real-time data mining will have tremendous importance in
areas where a real-time decision can make the difference between life and death –
mining patterns in medical systems.

3 BDFS(b)-Diff-Sets: An Efficient Technique of Frequent Pattern
Mining in Real-Time Using Diff-Sets
Algorithm BDFS(b)-diff-sets:
Initialize the allowable execution time τ.
Let the initial search frontier contain all 3-length candidate patterns. Let this search
frontier be stored as a global pool of candidate patterns. Initialize a set called Border
Set to null.
Order the candidate patterns of the global pool according to their decreasing length (resolve
ties arbitrarily). Take a group of most promising candidate patterns and put them in a block b of
predefined size.
!
Expand (b)
Expand (b: block of candidate patterns)
If not last_level
then
begin
Expand1(b)
end.
Expand1(b):
1. Count support for each candidate pattern in the block b by intersecting the diff-set list of the items
in the database.
2. When a pattern becomes frequent, remove it from the block b and put it in the list of frequent patterns along with its support value. If the pattern is present in the Border Set increase its subitemset counter. If the subitemset counter of the pattern in Border Set is equal to its length move it to
the global pool of candidate patterns.
3. Prune all patterns whose support values < given minimum support. Remove all supersets of these
patterns from Border Set.
4. Generate all patterns of next higher length from the newly obtained frequent patterns at step 3. If
all immediate subsets of the newly generated pattern are frequent then put the pattern in the
global pool of candidate patterns else put it in the Border Set if the pattern length is > 3.
5. Take a block of most promising b candidate patterns from the global pool.
6. If block b is empty and no more candidate patterns left, output frequent patterns and exit.
7. Call Expand (b) if enough time is left in τ to expand a new block of patterns, else output frequent
patterns and exit.
Fig. 1. Algorithm BDFS(b)-diff-sets

820

R. Dass and A. Mahanti

4 Empirical Evaluation
The following figures shows the empirical evaluation of BDFS(b)-diff-sets. We have
found that BDFS(b)-diff-sets compares well with the existing best performing algorithms in time of completion and scalability. Real-time performance of BDFS(b)-diffsets (in Fig. 9 and 10) show that it is always ahead of time while providing outputs.
We have made detailed performance evaluation based on empirical analysis using
commonly used synthetic and real-life dense datasets. Thus, we have demonstrated
that real-time frequent pattern mining can be done successfully using BDFS(b)-diffsets. We believe this study will encourage use of AI heuristic search techniques in
real-time frequent pattern mining.

FP_Growth

BDFS(b)-diffsets

dEclat

Eclat

Time(s)

6

Time(s)

5
4
3
2

%Support

1

45
40
35
30
25
20
15
10
5
0
0.33%

0
90

93

96

% Support

1.00%

3%

FP-Growth

99

Fig. 2. Time comparison of FP-Growth, Eclat
and dEclat with BDFS(b)-diffsets (b= 20880) on
PUMSB, N=2113, T=74, D=49046

5%

BDSF(b)-diffsets

Fig. 3. Time comparison of FP-Growth
with BDFS(b)-diffsets for T10I8D100K,
b=100K

4

Time(s)

BDFS(b)-diffsets

dEclat

Eclat

3
Time(s)

9
8
7
6
5
4
3
2
1
0

3.5
2.5
2
1.5
1
%Support

0.5
0

%Support

0%

1%

2%

4%

5%

50

8%

Fig. 4. Time comparison of Eclat and dEclat with
BDFS(b)-diffsets for T10I8D100K, b=100K

55

60

65

70

75

80

85

90

95

dEclat

Eclat

FP-Growth

BDFS(b)-diffsets

Fig. 5. Time comparison of FP-Growth,
Eclat and dEclat with BDFS(b)-diffsets
(b=2088K) for PUMSB*, N=2088 T=
50.5, D = 49046

An Efficient Real-Time Frequent Pattern Mining Technique Using Diff-Sets

6000

6

5000

No. of patterns

7

Time(s)

5
4
3
2
1

4000
3000
2000
1000

0
1000

10000

100000

No. of Transactions
BDFS(b)-diffsets

dEclat

%Support

0
90

Eclat

Fig. 6. Scalability evaluation of BDFS(b)-diffsets
with Eclat and dEclat supp=0.5%, b = 100K for
T10I8D1K,10K and 100K

821

93

96

BDFS(b)-diffset

99

Apriori

Fig. 7. Number of patterns checked by
Apriori and BDFS(b)-diffsets (b=208800)
for Pumsb, N=2113,T=74, D=49046,
with varying support
100

100
%Patterns

80

90
80
70

60
40
20

60

%Time

% T i me
0

50
5

20

29

50

64

76

94

2

19

36

54

72

100

Out put Pat t erns including F(1) & F(2)

Output Patterns including F(1) & F(2)

Ouput Pat t erns excluding F(1) & F(2)

Output Patterns excluding F(1) & F(2)

Fig. 8. Time-Patterns % of BDFS(b) for b=75K
and 65% supp for Chess (N=75, T=37, D=3196)

Fig. 9. Time-Patterns % for b=75K and
65% supp for T10I8D100K

References
1. Gonzales, M.L., Unearth BI in Real-time. 2004, Teradata.
2. Goethals, B., Memory Issues in Frequent Pattern Mining, in Proceedings of SAC'04. 2004,
ACM: Nicosia, Cyprus.
3. Zaki, M.J. and K. Gouda. Fast Vertical Mining Using Diffsets. in 9th International Conference on Knowledge Discovery and Data Mining. 2003. Washington, DC.
4. Dass, R. and A. Mahanti. Frequent Pattern Mining in Real-Time – First Results. in
TDM2004/ACM SIGKDD 2004. 2004. Seattle, Washington USA.
5. Dass, R. and A. Mahanti. An Efficient Technique for Frequent Pattern Mininig in Real-Time
Business Applications. in 38th IEEE Hawaii International Conference on System Sciences
(HICSS 38). 2005. Big Island: IEEE.
6. Lee, W., et al. Real time data mining-based intrusion detection. in DARPA Information Survivability Conference & Exposition II. 2001. Anaheim, CA , USA: IEEE Xplore.

