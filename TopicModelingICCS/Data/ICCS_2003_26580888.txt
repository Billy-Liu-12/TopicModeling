Sensitivities for a Single Drop Simulation
Christian H. Bischof, H. Martin B¨
ucker, Arno Rasch, and Emil Slusanschi
Institute for Scientiﬁc Computing, Aachen University, D–52056 Aachen, Germany
{bischof, buecker, rasch, slusanschi}@sc.rwth-aachen.de
http://www.sc.rwth-aachen.de

Abstract. In process engineering, a single drop is investigated to better understand its physical and chemical behavior. Laboratory experiments using the Nuclear Magnetic Resonance (NMR) technology are
prepared by numerical simulations aiming at ﬁnding a suitable geometry
of the measuring cell. In the underlying numerical optimization problem,
derivatives of the ﬂow ﬁeld around a single drop with respect to geometric parameters are needed. Rather than using numerical diﬀerentiation
based on divided diﬀerencing, a technique called automatic diﬀerentiation is used to compute truncation-error free derivative values. It is
shown that automatic diﬀerentiation is comparable to numerical diﬀerentiation in terms of CPU time but eliminates potential problems in
accuracy encountered when using numerical diﬀerentiation.

1

Introduction

In an interdisciplinary project, process engineers and computer scientists are
aiming at properly designing the geometry of the measuring cell by numerical
simulations. In the actual laboratory experiments, one is trying to ﬁx a single
drop at a certain position in a liquid in order to analyze ﬂuid-ﬂuid interactions
by using the Nuclear Magnetic Resonance (NMR) technology. The goal is to
avoid spatial movement of the single drop enabling appropriate NMR measurements. From a conceptual point of view the numerical simulation is minimizing a
suitable objective function representing the position of a single drop in the ﬂow
ﬁeld with respect to parameters characterizing the geometry of the underlying computational domain. A crucial ingredient of most numerical optimization
algorithms is the derivative of the objective function with respect to the free
variables. In the present situation, the objective function is given by a largescale computational ﬂuid dynamics code that, given the geometric parameters
of the computational domain, computes the ﬂow ﬁeld by solving the NavierStokes equations and some additional post-processing of the ﬂow ﬁeld which we
neglect throughout this note for the sake of simplicity.
One option to evaluate the derivatives of the ﬂow ﬁeld with respect to geometric parameters consists of a numerical approach based on divided diﬀerencing.
This research is partially supported by the Deutsche Forschungsgemeinschaft (DFG)
within SFB 540 “Model-based experimental analysis of kinetic phenomena in ﬂuid
multi-phase reactive systems,” Aachen University, Germany.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 888–896, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Sensitivities for a Single Drop Simulation

889

The advantage of divided diﬀerencing is its simplicity: approximations to derivatives of certain accuracy are available by evaluating the function whose derivatives are sought in a black box fashion at suitably perturbed input arguments.
However, there is always truncation error and, when the input arguments diﬀer
only slightly, the resulting cancellation error may also dramatically inﬂuence the
accuracy of the derivative approximations.
In this note, we apply a truncation error-free technique called automatic differentiation to obtain derivatives of the ﬂow ﬁeld with respect to geometric parameters. In automatic diﬀerentiation (AD), a given computer program to evaluate some function is transformed into another program capable of evaluating
the original function along with its derivatives. More precisely, we apply the AD
system ADIFOR [2] to a general purpose ﬁnite element package SEPRAN [14]
written in Fortran 77. In doing so, we extend previous work [3] where the ﬂow
solver module of SEPRAN was transformed by ADIFOR to evaluate derivatives
of the ﬂow ﬁeld with respect to ﬂow parameters such as the Reynolds number or
the angle of attack. Now, we additionally apply AD to SEPRAN’s grid generator
enabling derivatives with respect to geometric parameters. A similar approach
in the area of aerodynamics is studied in [6] where AD is applied to the WTCO
wing grid generator and the TLNS3D Navier–Stokes ﬂow solver, both Fortran 77
programs. Details on developing an AD-enhanced version of TLNS3D are given
in [10,9]. Another application of AD applied to a grid generator called CSCMDO
which is written in C is described in [4]. Aerodynamic sensitivities with respect
to geometric parameters are also reported in [8].
The structure of this note is as follows. In Sec. 2, the basic idea behind
automatic diﬀerentiation is brieﬂy summarized and issues of applying AD to
SEPRAN are sketched. The simulation of a single drop using SEPRAN and the
corresponding derivatives obtained from AD are given in Sec. 3.

2

Automatic Diﬀerentiation and the SEPRAN Package

When a function is given in the form of a computer code, AD may be used
to generate another computer program capable of evaluating the function and
its derivatives. The basic idea of AD is to treat a computer program as the
composition of a large sequence of elementary functions and intrinsics whose
derivatives are known. Then, these derivatives are accumulated using the chain
rule. When using an AD tool a user has to specify the output variables whose
derivatives are sought, called dependent variables, and the input variables with
respect to which one is diﬀerentiating, called independent variables. A variable is
called active if its value depends on the value of an independent variable and it
inﬂuences the value of a dependent variable. More details on AD are given in [11,
13,7,12,1]. The AD technology is not only applicable to small computer codes
but also scales to large programs of several hundred thousand lines of code.
In this note, we apply the AD tool ADIFOR [2] to the general purpose ﬁnite element package SEPRAN [14], developed at “Ingenieursbureau SEPRA”
and Delft University of Technology. The SEPRAN package solves the continuity
and Navier-Stokes equations. SEPRAN is employed in a wide variety of engineering applications [5,15,16,18,17,19,20] including laminar or turbulent ﬂow of

890

C.H. Bischof et al.

The SEPRAN package

Pre-processor
module
Grid Generator

Computational
module
CFD Solver

Post-processor
module
Visualization

Fig. 1. The structure of the ﬁnite element package SEPRAN

incompressible liquids. The SEPRAN package consists of about 800,000 lines
of Fortran 77 in several modules, such as the pre-processing (grid generation),
computational and post-processing modules schematically depicted in Fig. 1. In
a previous work [3], we successfully applied AD to the computational module
where approximately 400,000 lines were automatically transformed. In this note,
we not only apply AD to the CFD solver but also to the grid generation part
consisting of 130,000 additional lines of code in order to get derivatives for the
single drop problem to be described in Sec. 3.
In order to be able to use the ADIFOR tool to obtain the augmented version
of the code, SEPRAN.AD, a preprocessing step has to be taken. This comprises
of massaging the SEPRAN source code so that it adheres to the Fortran77 language standard. It is worth noticing that SEPRAN is generally a “clean” code,
which requires little changes by hand in the original code in order to be able to
apply ADIFOR to it. However, some problems, like type mismatches and calling
of some subroutines with diﬀerent number of arguments were encountered. Usually, normal compilers do not detect such problems because they are examining
only one Fortran ﬁle at a time, whereas ADIFOR does a global data ﬂow and
dependency analysis and therefore is able to detect these inconsistencies. More
details are given in [3]. A problem that was a bit harder to detect was encountered in the grid generation part of the SEPRAN code, and it has to do with
a certain way of referencing memory in Fortran through the use of “read” and
“write” instructions. When the ADIFOR tool encounters an active variable in
a statement that does a “read” or a “write”, it generates a warning message.
In this particular case, a value was written to memory using “write” and was
later used by calling a corresponding “read.” Therefore, any AD tool is unable
to recognize whether or not this value has changed. In order to maintain the
“logic link” between the dependent and independent variables, a common block
was inserted instead of the mentioned use of the “read/write” instructions. In
this way the augmented code SEPRAN.AD, consisting of the grid generation
and computational part totaling about 703,000 lines of code, produced correct
results as presented in the following section. Note that the code massaging part,
which requires some manual work is done only once in the developing cycle of
the augmented version of SEPRAN.

Sensitivities for a Single Drop Simulation

3

891

Sensitivities of a Single Drop

The study of kinetic phenomena in a single drop is the topic of an interdisciplinary project at Aachen University within the Collaborative Research Center
SFB 540. To this end a two-dimensional numerical simulation of a measuring cell
is implemented using SEPRAN. This simulation is stationary and rotationally
symmetrical under the assumption of Newtonian and incompressible ﬂuids with
a non-deformable drop. The goal of the project is to enable the measurements of
the velocity and material properties of a single drop using the NMR technology.
The design of the measuring cell has to be optimized so that the drop remains
stationary for a certain period of time during which the measurements are taking place. The idea is to maintain the drop stable using a counter current ﬂow.
The drop is initiated at the bottom of the measuring cell with a special pump
and it keeps on rising, until its velocity and that of the counter current ﬂow are
the same, and in this way the drop reaches its desired stable position and the
NMR measurements can then take place. After the measurements, the counter
current ﬂow is stopped and the drop rises until it reaches a collector where it is
absorbed. Given the velocity of the inﬂow v0 , the density ρ, and viscosity µ of the
two phases (drop and counter current), the SEPRAN package is able to compute
the velocity and pressure ﬁelds at any point in the measuring cell. The design of
this measuring cell depends on the following geometric parameters schematically
depicted in Fig. 2. The ﬁrst parameter, α, is the angle between the vertical axis
and the wall of the measuring equipment. The second parameter, r1 , denotes the
radius of the inlet and the third parameter, r2 , speciﬁes the smallest possible
radius of the measuring cell, representing the distance between the symmetric
axis and the wall.

0

r1

-0.001

r2

Y

-0.002

-0.003

drop
-0.004

-0.005

-0.006

α
0

0.0025

0.005

X

Fig. 2. Geometry of the measuring cell

892

C.H. Bischof et al.

0.05

v0

u-velocity
2.7943E-02
2.4165E-02
2.0388E-02
1.6610E-02
1.2832E-02
9.0546E-03
5.2769E-03
1.4992E-03
-2.2785E-03
-6.0562E-03
-9.8338E-03
-1.3612E-02
-1.7389E-02
-2.1167E-02
-2.4945E-02
-2.8722E-02
-3.2500E-02
-3.6278E-02
-4.0055E-02
-4.3833E-02

0.04
0

0.03

-0.002

Y

0.02
0.01

-0.004

0
-0.006

-0.01

0

0.002

0.004

0.006

0.008

Y

X

-0.02
-0.03
-0.04
-0.05
-0.06

uvelocity

-0.07
-0.08

0.05

0.1

X

Fig. 3. Original function: horizontal component u of the velocity

From an abstract point of view, the computer program implements a function
f (v0 , ρ, µ, α, r1 , r2 ) representing the ﬂow ﬁeld. For the sake of simplicity, we will
use f to denote the velocity of the ﬂuid. Note that the actual simulation also
computes the pressure ﬁeld for which a sensitivity analysis can be carried out
similar to the one for the velocity given in the following discussion. The velocity
ﬁeld computed by SEPRAN for the ﬂow parameters
v0 = −4.2 · 10−3 ,

ρ = 1.0 · 103 ,

µ = 1.0 · 10−3 ,

r1 = 5.0 · 10−4 ,

r2 = 5.5 · 10−3

and the geometric parameters
α = 3.6411,

(1)

is given in Fig. 3. More precisely, the ﬁgure shows the horizontal component, u,
of the velocity ﬁeld with a zoom in the region where the drop is kept stable. The
vectors of the ﬂow ﬁeld are also presented in this zoom.
In a numerical optimization algorithm, the derivatives of the velocity ﬁeld
with respect to the set of design parameters (1) are needed. We use automatic differentiation for the computation of these derivatives, ∂f /∂α, ∂f /∂r1 and ∂f /∂r2 .
As an illustrating example, the results presented in Fig. 4 show the derivatives of
the horizontal component of the velocity with respect to the angle α. The ﬁgure
demonstrates that the largest increase of this velocity component with respect
to changes in α occurs in the vicinity of the drop.

Sensitivities for a Single Drop Simulation

0.05

v0

0.04

0

0.03
0.02

Y

-0.01

0.01
-0.02

0
-0.01

Y

-0.03
0.01

-0.02

0.02

0.03

X

-0.03
-0.04
-0.05

uvelocity

-0.06

893

∂u-veloc/∂aplha
2.8678E-04
2.6303E-04
2.3929E-04
2.1554E-04
1.9180E-04
1.6805E-04
1.4431E-04
1.2056E-04
9.6817E-05
7.3072E-05
4.9328E-05
2.5583E-05
1.8382E-06
-2.1907E-05
-4.5651E-05
-6.9396E-05
-9.3141E-05
-1.1689E-04
-1.4063E-04
-1.6437E-04

-0.07
-0.08

0

0.02

0.04

0.06

0.08

0.1

0.12

0.14

X

Fig. 4. AD-generated derivative ∂u/∂α ﬁeld

To illustrate the advantage of the AD approach in terms of accuracy, we
present a comparison with the traditional numerical approach of computing
derivatives making use of divided diﬀerences. We will use DD as a shorthand
notation for ﬁrst-order forward divided diﬀerences, deﬁned by
∂f (v0 , ρ, µ, α, r1 , r2 )
f (v0 , ρ, µ, α + h, r1 , r2 ) − f (v0 , ρ, µ, α, r1 , r2 )
≈
,
∂α
h

(2)

where h is a suitable chosen step size for the approximation. Equation (2) can
also be written for the other geometric parameters, r1 and r2 . DD is easy to
implement in a black-box manner. On the other hand though, the accuracy of
the approximations provided depends very much on choosing a suitable step
size h. The problem with DD is that, in general, there is no a priori knowledge
of a suitable step size which may also be hard to determine. Furthermore, there
are cancellation and truncation errors that the user has to contend with, all
contributing to unavoidable errors on the end result. When employing automatic
diﬀerentiation, however, there is no truncation error to contend with, the results
are accurate up to machine precision and there is no need to experiment with a
step size.
For the derivative ∂u/∂α, it turns out that it is possible to ﬁnd a suitable
step size h = 10−3 where the inﬁnity norm of the diﬀerence between the DD and
AD-generated derivatives is 1.1 · 10−7 . However, when considering the derivative
∂u/∂r2 , it is no longer possible to ﬁnd an accurate DD-approximation. After

894

C.H. Bischof et al.
50
AD
−5
DD 10

40

30

20

10

∂u / ∂ r2
0

−10

−20

−30
3800

3900

4000

4100

4200

4300

4400

4500

4600

4700

Gridpoints

Fig. 5. AD-DD comparison of the derivative of the ∂u/∂r2

identifying a suitable step size of h = 10−5 , the corresponding inﬁnity norm is
38.94 representing a large diﬀerence between the values computed by AD and
DD. An explanation is given by Fig. 5 showing the derivative ∂u/∂r2 versus a
subset of selected grid points. The grid points shown in this ﬁgure are numbered
from 3800 to 4700 and are located in the inlet region near the drop. At certain
grid points, the divided diﬀerence approximations are not able to give us the
exact derivatives computed by AD. A similar analysis holds for the derivative
∂u/∂r1 where the inﬁnity norm of the diﬀerence between AD and DD is 39.32.
Therefore we conclude that using a numerical approach to calculating the
required sensitivities in order to optimize the geometry of the measuring cell is
not appropriate, as these approximations may be inaccurate. In contrast, automatic diﬀerentiation provides reliable derivative values. Moreover, considering
that an optimization must be conducted with respect to a series of geometry
parameters (α, r1 , r2 ) it is not advantageous to have diﬀerent suitable step sizes,
namely 10−3 and 10−5 , for diﬀerent derivatives.
When it comes to analyzing the performance of the AD augmented code
compared to the original simulation, we observe an increase in execution time
by a factor of 4.15 and an increase in memory usage by a factor of 3.41. The
simulations were carried out on a 1733 MHz Pentium 4 Linux machine with
2 GB of main memory. The number of independent variables in this simulation
is three, the angle α, and the two radii r1 and r2 . Therefore the expected increase
in memory requirement is within normal limits. Concerning the execution times,
the approximations obtained by forward divided diﬀerences for three partial
derivatives require at least four evaluations of the original function, provided
a “suitable” step size is already known. When employing AD, on the other
hand, the expected increase in execution time is proportional to the number

Sensitivities for a Single Drop Simulation

895

of independent variables speciﬁed. Therefore, the observed ratio of 4.15 in the
increase in execution time, can be considered very good, as the results are reliable
and precise up to machine precision.

4

Conclusions

Laboratory experiments for the analysis of ﬂuid-ﬂuid interactions are prepared
by numerical simulations. In particular, the geometry of the underlying measuring cell is designed in order to keep a constant position of a single drop in a
liquid. The SEPRAN package is used to simulate the ﬂow ﬁeld for given geometric parameters. The ADIFOR system is applied to obtain derivatives of the ﬂow
ﬁeld with respect to geometric parameters. This approach using automatic differentiation is compared to a numerical approach based on divided diﬀerencing.
The major advantage of automatic diﬀerentiation in this application is the availability of derivative values without truncation error. Moreover, time complexity
is comparable to that of a ﬁrst-order forward divided diﬀerencing approach.
Currently, we are trying to determine a suitable objective function for the
future optimization of the design of the measuring cell. However, from the point
of view of algorithmic ingredients, the major computational challenge is to efﬁciently and accurately evaluate the derivatives of the ﬂow ﬁeld with respect
to the geometric parameters as described in this work. An implementation of
the objective function will consist of only a few lines of code compared to the
complete SEPRAN package and its remaining diﬀerentiation will easily be accomplished by the application of an AD tool.
Acknowledgments. The authors would like to thank the collaborators at the
Institute of Thermal Unit Operations, Aachen University. In particular, Edwin
Groß-Hardt deserves special recognition for making available the grid and problem speciﬁcations of the underlying problem used in the SEPRAN simulation.
We would also like to thank Jakob Risch for his notable contribution during the
initial phase of applying ADIFOR to SEPRAN. This research is partially supported by the Deutsche Forschungsgemeinschaft (DFG) within SFB 540 “Modelbased experimental analysis of kinetic phenomena in ﬂuid multi-phase reactive
systems,” Aachen University, Germany.

References
[1] M. Berz, C. Bischof, G. Corliss, and A. Griewank. Computational Diﬀerentiation:
Techniques, Applications, and Tools. SIAM, Philadelphia, 1996.
[2] C. Bischof, A. Carle, P. Khademi, and A. Mauer. ADIFOR 2.0: Automatic diﬀerentiation of Fortran 77 programs. IEEE Computational Science & Engineering,
3(3):18–32, 1996.
[3] C. H. Bischof, H. M. B¨
ucker, B. Lang, A. Rasch, and J. W. Risch. On the
Use of a Diﬀerentiated Finite Element Package for Sensitivity Analysis. In V. N.
Alexandrov, J. J. Dongarra, B. A. Juliano, R. S. Renner, and C. J. K. Tan, editors,
Computational Science – ICCS 2001, Proceedings of the International Conference
on Computational Science, San Francisco, USA, May 28–30, 2001. Part I, volume
2073 of Lecture Notes in Computer Science, pages 795–801, Berlin, 2001. Springer.

896

C.H. Bischof et al.

[4] C. H. Bischof, A. Mauer, W. T. Jones, and J. Samareh. Experiences with automatic diﬀerentiation applied to a volume grid generation code. Journal of Aircraft,
35(4):569–573, 1998.
[5] E. G. T. Bosch and C. J. M. Lasance. High accuracy thermal interface resistance
measurement using a transient method. Electronics Cooling Magazine, 6(3), 2000.
[6] A. Carle, L. L. Green, C. H. Bischof, and P. A. Newman. Applications of automatic
diﬀerentiation in CFD. In Proceedings of the 25th AIAA Fluid Dynamics Conference, Colorado Springs, CO, USA, June 20–23, 1994, AIAA Paper 94–2197,
1994.
[7] G. Corliss, C. Faure, A. Griewank, L. Hasco¨et, and U. Naumann, editors. Automatic Diﬀerentiation of Algorithms: From Simulation to Optimization. Springer,
New York, 2002.
[8] S. A. Forth and T. P. Evans. Aerofoil optimisation via AD of a multigrid cellvertex Euler ﬂow solver. In Corliss et al. [7], chapter 17, pages 153–160.
[9] L. Green, P. Newman, and K. Haigler. Sensitivity derivatives for advanced CFD
algorithm and viscous modeling parameters via automatic diﬀerentiation. In Proceedings of the 11th AIAA Computational Fluid Dynamics Conference, Orlando,
FL, USA, July 6–9, 1993, AIAA Paper 93–3321, 1993.
[10] L. L. Green, P. A. Newman, and K. J. Haigler. Sensitivity derivatives for advanced
CFD algorithm and viscous modeling parameters via automatic diﬀerentiation.
Journal of Computational Physics, 125(2):313–324, 1996.
[11] A. Griewank. Evaluating Derivatives: Principles and Techniques of Algorithmic
Diﬀerentiation. SIAM, Philadelphia, 2000.
[12] A. Griewank and G. Corliss. Automatic Diﬀerentiation of Algorithms. SIAM,
Philadelphia, 1991.
[13] L. B. Rall. Automatic Diﬀerentiation: Techniques and Applications, volume 120
of Lecture Notes in Computer Science. Springer-Verlag, Berlin, 1981.
[14] G. Segal. SEPRAN Users Manual. Ingenieursbureau Sepra, Leidschendam, NL,
1993.
[15] G. Segal, C. Vuik, and F. Vermolen. A conserving discretization for the free boundary in a two-dimensional Stefan problem. Journal of Computational Physics,
141(1):1–21, 1998.
[16] A. P. van den Berg, P. E. van Keken, and D. A. Yuen. The eﬀects of a composite
non-Newtonian and Newtonian rheology on mantle convection. Geophys. J. Int.,
115:62–78, 1993.
[17] P. E. van Keken, C. J. Spiers, A. P. van den Berg, and E. J. Muyzert. The eﬀective viscosity of rocksalt: implementation of steady-state creep laws in numerical
models of salt diapirism. Tectonophysics, 225:457–476, 1993.
[18] P. E. van Keken, D. A. Yuen, and L. R. Petzold. DASPK: a new high order
and adaptive time-integration technique with applications to mantle convection
with strongly temperature- and pressure-dependent rheology. Geophysical & Astrophysical Fluid Dynamics, 80:57–74, 1995.
[19] N. J. Vlaar, P. E. van Keken, and A. P. van den Berg. Cooling of the Earth in the
Archaean: consequences of pressure-release melting in a hot mantle. Earth Plan.
Sci. Lett., 121:1–18, 1994.
[20] C. Vuik, A. Segal, and F. J. Vermolen. A conserving discretization for a Stefan
problem with an interface reaction at the free boundary. Computing and Visualization in Science, 3(1/2):109–114, 2000.

