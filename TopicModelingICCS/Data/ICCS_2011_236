Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 1808–1817

International Conference on Computational Science, ICCS 2011

Application of Hierarchical Chromosome Based Genetic Algorithm
to the problem of finding optimal initial three dimensional meshes
for the self adaptive hp-Finite Element Method
Anna PaszyĔskaa, Marcin StoĪeka
a

Faculty of Physics, Astronomy and Applied Computer Scinece, Jagiellonian University,
Reymonta 4, 30-059 Kraków, Poland

Abstract
The paper presents an algorithm for finding the optimal initial three dimensional mesh for the self-adaptive hp Finite Element
Method (hp-FEM) calculations. In our previous work we have proposed a method of selection of optimal initial two dimensional
mesh. The problem of finding the optimal mesh was solved by means of hierarchical chromosome based genetic algorithm
(HCBGA). In this paper the extension of the HCBGA to three dimensional problems is presented. The selection of the optimal
initial mesh will optimize the convergence rate of the numerical error of the solution over the sequence of meshes generated by
the self-adaptive hp-FEM. This is especially true in the case when material data are selected as result of some stochastic
algorithm and it is not possible to design optimal initial mesh by hand. The hierarchical genetic algorithm is tested on the
numerical simulations of three dimensional Step-and-Flash Imprint Lithography (SFIL). The SFIL is a modern patterning process
utilizing the photopolymerization to replicate the topology of the substrate onto the template. The SFIL is modeled as linear
elasticity with thermal expansion coefficient. It is shown that the convergence rate of the self-adaptive hp-FEM depends on the
quality of the initial mesh provided by the genetic algorithm.
Keywords: Finite element method, hp adaptivity, genetic algorithm, Step-and-Flash Imprint Lithography

1. Introduction
This paper presents the application of the Hierarchical Chromosome Based Genetic Algorithm (HCBGA) [6] to
the problem of finding optimal initial mesh for the three dimensional self-adaptive hp-Finite Element Method (hpFEM). The self-adaptive hp-FEM [5] is an iterative procedure. The algorithm starts with an mesh, and constructs a
sequence of meshes delivering exponential convergence of the numerical error with respect to the mesh size,
provided the initial mesh fits the geometry and material data of the domain. For example, if the finite element is too
large to detect the local singularity hidden within the element, the hp-FEM may not deliver the exponential
convergence. Moreover, the construction of the consequetive meshes from the sequence is computational expensive.
In other words, it is profitable to invest some initial time to find the optimal initial mesh for the iterative hp-FEM
procedure, to make sure that it will converge exponentially. In the FE community such the initial mesh optimization
is called r-refinement and it is a global optimization problem. In this paper we propose the application of the
HCBGA algorithm to detect the optimal initial mesh. The presented results are the extension of the work already
published in two dimensions [10]. The three dimensional case presented in this paper is actually more challenging,
and the significance of the results is of great importance. This is because the computational cost of the self-adaptive

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.196

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

1809

hp-FEM algorithm is much higher in the three dimensional case, and can we gain more if we start the adaptive
process from well selected optimal initial mesh.
We focus here on the challenging computational problem - the three dimensional simulations of the Step-andFlash Imprint Lithography process (SFIL) [15]. The presentation is concluded with numerical results discussing the
convergence of the genetic algorithms as well as its influence on the convergence of the self-adaptive hp-FEM.
2. Self-adaptive hp-Finite Element Method
In this chapter we introduce the self-adaptive hp Finite Element Method (hp-FEM) used to solve the exemplary
computational problem: simulation of the shrinkage of the feature observed during the Step-and-Flash Imprint
Lithography (SFIL) process.
Step-and-Flash Imprint Lithography. SFIL is a patterning process utilizing photopolymerization to replicate the
topography of a template onto a substrate [1, 4, 2]. The SFIL process can be described in the following six steps, as
it is illustrated on left panel in Figure 1.
1. Dispense. The SFIL process employs a template / substrate alignment scheme to bring a rigid template and
substrate into parallelism, trapping the etch barrier in the relief structure of the template,
2. Imprint. The gap is closed until the force that ensures a thin base layer is reached,
3. Exposure. The template is then illuminated through the backside to cure etch barrier,
4. Separate. The template is withdrawn, leaving low-aspect ratio, high resolution features in the etch barrier,
5. Breakthrough etch. The residual etch barrier (base layer) is etched away with a short halogen plasma etch,
6. Transfer etch. The pattern is transferred into the transfer layer with an anisotropic oxygen reactive ion etch,
creating high-aspect ratio, high resolution features in the organic transfer layer.

Fig. 1. Left panel: Main steps of the SFIL process. Right panel: The shrinkage of the feature measured after removing the
template (picture obtained from Prof. Grant C. Wilson from The University of Texas in Austin)

Photopolymerization of the polymer network following the UV exposure, is accompanied by densification.
Densification of the SFIL photopolymer (the etch barrier) may affect both the cross sectional shape of the feature
and the placement of relief patterns. The exemplary shrinkage of the feature measured after removing the template is
presented on right panel in Figure 1. The linear elasticity model with thermal expansion coefficient is used to verify
the material response of polymerized networks in cured etch-barrier layers that are formed following the exposure,
and after removal of the template. We focus on the simulation of the deformation of the feature after removal of the
template. It is assumed that the polymer network has been damaged during the removal of the template, the
interparticle forces are weaker in one part of the mesh, and it results in a slight lean of the feature. The problem has
been solved on the 3D cube shape domain.
Strong formulation. Following [8] the strong formulation for the linear elasticity problem with thermal expansion
coefficient are given as follows. Given g i : ΓDi ∋ x → g i (x ) = 0 ∈ R , θ and α kl find ui : Ω → R the displacement

vector field such that

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

1810

σ ij , j = 0 in Ω , ui = g i in ΓDi

(1)

where σ ij is the stress tensor, defined in terms of the generalized Hooke’s law

σ ij = cijkl (ε kl + θ α kl )

(2)

cijkl elastic coefficients (known for a given material), ε ij0 initial strain, θ temperature, α kl thermal expansion

coefficients, ε ij is the strain tensor, defined to be u(i , j ) , the symmetric part of the displacement gradients

ε ij = u(i , j ) =

ui , j + u j , i

(3)

2

where ui displacement vector, ui , j displacement gradients.
Weak formulation. The weak formulation is obtained by multiplying (1) by test functions wi ∈ Vi and integrating
by parts over Ω .

− ³ wi , jσ ij dΩ + ³ wiσ ij n j dΩ = 0
Ω

(4)

Γ

Since σ ij is symmetric tensor, then wi , jσ ij = w(i , j )σ ij (compare Hughes 2000), and wi = 0 on Γ ,

³ w(i , j )σ ij dΩ = 0

(5)

Ω

Finally, we substitute (2) into (5) and since ε ij = u(i , j ) we get

³w

( i , j ) cijkl u (k ,l ) dΩ

³

= −θ w( i , j ) cijkl α kl dΩ

Ω

(6)

Ω

Abstract index-free notation. For implementation issues, the most convenient is the following form: Find u ∈ V
such that

a(w, u ) = − ǹ(w ) for all w ∈ V

(7)

where
a(w, u ) = ³ İ(w )T Dİ(u ) dΩ
Ω

ǹ(w ) = θ ³ İ(w )T DĮ dΩ

(8)

Ω

with (Hughes 2000)
­ z1,1 ½
ν
ν
0
ª1 − ν
°
°
« ν
z
ν
ν
1
−
0
2
,
2
°
°
«
« ν
°° z3,3 °°
ν
1 −ν
0
«
1 − 2ν
İ(z ) = ®
¾,
E
0
0
0
° z 2,3 + z3,2 ° D = (1 + ν )(1 − 2ν ) ««
2
° z1,3 + z3,1 °
« 0
0
0
0
°
°
«
z
+
z
°
2 ,1 ¿
«
¯° 1, 2
«¬ 0

νE

0

0

0

0
0
0
0
1 − 2ν
2
0

º
»
»
0 »
»
0 »
»
0 »
»
1 − 2ν »
2 »¼
0
0

(9)

E
are Lame coefficients. Following (Colburn et al. 2001) the Young modulus
(1 +ν )(1 − 2ν )
2(1 +ν )
and Poisson ratio are assumed as E = 1 GPA and ν = 0.3 , θ = 1 and α = −0.06115 has been obtained by inverse
Here λ =

, μ=

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

1811

analysis (PaszyĔski et al. 2007). The material damage that is supposed to result in slight lean of the feature is
modeled by decreasing the value of the Young modulus to E = 0.001 GPA in the subdomain
Ω d = { x = (x, y, z ) : x ∈ [0,0.433], y ∈ [0,1], z ∈ [0.157,0.471]} ⊂ Ω

(10)

where the subdomain is prescribed in the relative Ω = [0,1] 3 local system of coordinates. It should be emphasized
that the value of the decreased Young modulus has been selected arbitrary, just to test the genetic algorithm, and the
future work should involve the investigation of the proper value of the Young modulus in the damaged area.
Self-Adaptive hp Finite Element Method Algorithm. The three dimensional hp-FEM algorithm [5] is an iterative
procedure generating a sequence of meshes delivering best possible convergence of the numerical error with respect
to the mesh size. The algorithm starts with three dimensional initial mesh, selected randomly. The initial mesh is
called the coarse mesh. It solves the variational problem (7-9) over the coarse mesh, and performs global
hp-refinement, where each finite element from the coarse mesh is broken into 8 son elements, and the polynomial
order of approximation is uniformly increased by one. The global hp-refinement generates the so-called reference
mesh. The problem (7-9) is solved again on the reference mesh. The solution over the reference mesh is utilized to
select the optimal refinements for the coarse mesh. This selection is a complicated and expensive computational
process, described in details in [5]. The selected optimal refinements are executed over the coarse mesh, in order to
obtain the so-called optimal mesh. This ends a single iteration of the hp-FEM algorithm. The optimal mesh selected
in such a way becomes the coarse mesh for the second iteration, and the algorithm continues until the solution over
the coarse mesh is good enough. The quality of the solution is measured in the relative error in the energy norm:

relative error =

u hp − U hp

³ (u

2
H (Ω )
1

U hp

hp

− U hp

)2 + (∇uhp − ∇U hp )2 dx

=Ω

2
H (Ω )
1

2
2
³ (U hp ) + (∇U hp ) dx

(11)

Ω

where uhp is the solution over the coarse mesh, and uHp is the solution over the reference mesh. The process is
summarized in Figure 2, with the randonly selected initial mesh. The corresponding solution is presented in
Figure 3. The hp-FEM algorithm supports h and p refinements, where h refinement refers to breaking of selected
elements into smaller son elements, and p refinement refers to modification of the polynomial orders of
approximation over selected finite elements. Notice that h refinement always breaks an element “by half”.
The algorithm delivers the exponential convergence, provided the initial mesh fits into the geometry and material
data. For example, if the finite element is too large to detect the local singularity hiden within the element,
the hp-FEM may not converge at all. In the example presented in Figure 3 the initial mesh with second order
elements has been selected randomly. The initial mesh does not fit to the local drop of the Young modulus over ȍd,
and the exponential convergence is not delivered, compare Table 1.
Table 1. Convergence of the self-adaptive hp-FEM corresponding to Fig.3

Iteration
1
2
3
4
5

Coarse mesh / reference mesh size
729 / 15625
869 / 19019
1166 / 25215
1322 / 28681
1573 / 35557

Relative error (11)
26.58
19.22
16.16
14.47
14.09

3. Application of hierarchical chromosome based genetic algorithm for initial mesh selection

We propose to use hierarchical chromosome based genetic algorithm to find the optimal initial three dimensional
mesh. This algorithm can be applied to solve several design and engineering problems [12]. Presented genetic
algorithm works on tree based structures (called hierarchical chromosomes). For such kinds of algorithms
sometimes “genetic programming” name [9] is also used, but we prefer to call it genetic algorithm [7], motivated by
facts already listed in [10]. Hierarchical chromosome based genetic algorithm can be described according to the

1812

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

scheme (μ , λ ) , where λ = μ [16]. The reproduction in the algorithm is performed by fitness proportional selection
and succession is done by elite selection, where # Elite = μ . It means that in each iteration of the algorithm λ
offspring are created from parents (by means of mutation and crossover). After the evaluation step, μ best
individuals (chosen from the set of parents and offspring) are selected to the next iteration. In the HCBGA the
hierarchical genetic operators: hierarchical mutation and hierarchical crossover are used, in spite of the traditional
genetic operators. The hierarchical genetic operators are described later in the section.

Fig. 2. The sequence of optimal meshes delivered by the self-adaptive hp-FEM starting from randomly selected initial mesh.
Different colors denote different polynomial orders of approximation utilized over finite element edges, faces and interiors.

Fig. 3. The solution to the SFIL problem: the x, y and z components of the displacement vector field.

The hierarchical chromosome, which represents an object in our genetic algorithm, codes the structure and the
meaning of an object, from the point of view of the designer. Figure 4 presents an exemplary mesh and the
hierarchical chromosome coding the mesh. Our exemplary mesh (denoted by S1 ) is described by tree components:
X, Y and Z. Component X consists of two subcomponents: PX 1 and PX 2 . Component Y consists of one
subcomponent: PY1 and component Z consists of three subcomponents: PZ1 , PZ 2 and PZ 3 . Each subcomponent is
described by two parameters: the begin and the end limit of the interval, denoted by xi, yi and zi, suitable. These
values are coded as the binary strings (xi = bx0 bx1 ...bxm), (yi = by0 by1...bym) and (zi = bz0 bz1...bzm).

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

1813

The whole process of finding of optimal initial mesh can be described as follows. At the beginning the initial
population is created. We assume that each mesh from the initial population has the same second level of the
hierarchy tree. It means, that the number of the subcomponents of type X, Y and Z and the suitable coordinates are
the same. But the overall size and shape of the hierarchical chromosomes coding initial meshes can be different. The
exemplary meshes from initial population and the hierarchical chromosomes coding them are presented in Figures 4,
5 and 6. After generation, the new initial population should be evaluated. For each individual - representing a single
initial mesh - the computational problem is solved, and global hp refinement is performed, the problem is solved
again, and the relative error estimator for the individual is computed. After that the new offspring are created (by
using the hierarchical crossover and the hierarchical mutation) and added to the population. Than, the whole process
of evaluation and generation of offspring is repeated. The algorithm stops, if an optimal initial mesh is found. The
hierarchical chromosome based genetic algorithm, thanks to the hierarchical representation of the objects and
hierarchical genetic operators, allows for generating offspring from parents of different size and shape. It allows also
for creating offspring with different number of components then their parents. To generate offspring from meshes
coded as hierarchical chromosomes, the hierarchical mutation and hierarchical crossover are used. Two kinds of
hierarchical mutation are used: the mutation of alleles and the mutation of group of alleles. The mutation of alleles
simply changes the value of randomly chosen allele from the third level of hierarchy tree. The new value for chosen
allele must be a value between the neighboring coordinates. The hierarchical mutation of group of alleles (coded
components) allows to add or to remove ”splitting” coordinates from the genotype. This genetic operator is
responsible for changing of the genotypes size. The algorithm for mutation of the group of alleles is the following:
• randomly choose the group of alleles (a component) in the hierarchical chromosome,
• randomly decide, if it should be split or if one of its splitting coordinates should be removed,
• if removing was chosen, then randomly chose the gene g on the third level of the hierarchy tree from this
component and remove it from the chromosome,

Fig. 4. An exemplary mesh and the hierarchical chromosome coding it.

• if splitting was chosen then:
– randomly choose the component C (from the second level of the hierarchy tree)to split (if X direction was
chosen, then chose one of PXi components),
o if the component was not splited yet, randomly chose a value v between begin coordinate and end
coordinate of the component C,
o add v to the component at the third hierarchy level.
o if the component was splited before, randomly chose the gene g from the third hierarchy level
from component C
o randomly chose a value v between g and the neighboring gene g’(g’will be the next gene after g in
C on the third hierarchy level or the end coordinate of C )
o add v to the component at the third hierarchy level between g and g’
Figure 7 a) presents a phenotype before mutation. Figure 7 b) presents the phenotype after removing the component.
Figure 7 c) presents the phenotype after splitting of the component. Figure 7 d) presents hierarchical chromosomes
corresponding to the mesh from Figure 7 c). To sum up, the two kinds of the hierarchical mutation can be described
as follows: removing of the component consist in removing of the suitable subtree from the hierarchical
chromosome, while splitting of the component consist in adding new subtrees to the corresponding node of the
hierarchical chromosome.

1814

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

Fig. 5. Exemplary meshes from the initial population and the hierarchical chromosome coding them.

Fig. 6. Exemplary meshes from the initial population and the hierarchical chromosome coding them.

Fig. 7. a) phenotype before mutation, b) phenotype after mutation - removing of the component, c) phenotype after
mutation - splitting of the component, d) hierarchical chromosomes corresponding to the mesh from panel c).
The next used genetic operator is the hierarchical crossover [12, 11]. The hierarchical crossover is the two stage
process, which consist in:

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

1815

• finding the suitable crossover point P in the parent individuals (in our case the number of the component from
the second level of the hierarchy tree),
• applying the crossover to the offspring generating.
The second step consists in copying all the components located left from P and their subtrees to the children
being generated - respectively, from the first parent to the first child, from the second parent to the second child.
After that the components of number P with their sub-trees and all primitives located right from P and their subtrees are copied to the children - from the first parent to the second child, from the second parent to the first child.
Thanks to such a definition of the crossover, the children being generated can have different size and shape then
their parents. Figure 8 presents hierarchical chromosomes of the parents, and their offspring, created by crossing at
crossover point P = PX1. Based on [17], according to the theorem proofed in [13], the Markov chain modeling the
algorithm is ergodic and the presented hierarchical chromosome based genetic algorithm has asymptotic guarantee
of the success in the probabilistic sense.

Fig. 8. Hierarchical chromosomes of the parents, an offspring created from the parents,
and the hierarchical chromosome coding it.

4. Numerical experiments

The HCBGA algorithm has been used to detect the optimal initial mesh for the damaged SFIL problem. The first
numerical experiment utilized initial population with randomly selected twenty initial meshes, the first ten of them
presented in Figure 9. The fitness has been defined as
fitness = 1 -

relative error
100

∈ [0,1]

(13)

where the relative error is given by (11). In other words, the smaller relative error, the better the mesh. The plot of
relative errors for all twenty individuals from five performed epochs is presented on left panel in Figure 10. From
the picture it follows that the entire population converged to the population having slightly different meshes, with
simillar relative error estimation. The first ten individuals from the final fifth population are presented in Figure 11.
The interpretation of this phenomenon is the following. What really matters in this problem is the nice fit of ȍd area.
The additional subdivisions of the initial mesh in other aread of ȍd do not influence the value of the relative error. In
order to further increase the accuracy, the self-adaptive hp-FEM algorithm must be executed. The optimal initial
mesh has been constructed automatically by taking the similar subdivisions from meshes from the final population,
and rejecting the subdivisions that appear only locally, in a single mesh from the final population. The self-adaptive
hp-FEM has been executed on such the constructed optimal initial mesh. The resulting exponential convergence is
presented in Figure 12 and Table 2. Notice that the first iteration delivers better accuracy than obtained after five

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

1816

iteration from the randomly selected initial mesh, compare Table 1. Moreover, the accuracy goes down to the
required accuracy of five percent relative error. In the following experiments we repeat the first simulation, with
different number of meshes in the first population. The simulations results in similar behavior, see right panel in
Figure 10 for population with 10 individuals. The smallest reasonable size of the population providing the optimal
initial mesh after five epochs contained ten individuals.

Fig. 9. Ten objects from the first population.

Fig. 10. Left panel: Relative error (11) for all objects from five consequtive populations with twenty objects.
Right panel: Relative error (11) for all objects from five consequtive populations with ten objects.

Fig. 11. Ten objects from the fifth population.
Table 2. Convergence of the self-adaptive hp-FEM corresponding to Figure 10

Iteration
1
2
3
4

Coarse mesh / reference mesh size
729 / 15625
932 / 19399
1306 / 24839
1817 / 38211

Relative error (11)
12.93
9.40
7.47
4.01

5. Conclusions

The paper presented an application of hierarchical chromosome based genetic algorithm for finding an optimal
initial mesh for the self-adaptive hp-FEM calculations. The application of the genetic algorithm for the initial mesh
optimization was motivated by the fact, that the convergence of the self-adaptive hp-FEM algorithm depends on the
fit of the initial mesh into the problem geometry and material data. The three dimensional computations are
expensive, and it is reasonable to invest some computational time for the initial mesh optimization, that will result in
the convergence of hp-FEM. The numerical experiments prooved well applicability of the HCBGA.

Acknowledgements

The work has been partially supported by the Polish MNiSW grant no. NN 519 405737 and NN 501 120 836.

Anna Paszy´nska and Marcin Sto˙zek / Procedia Computer Science 4 (2011) 1808–1817

1817

References
1. Bailey T.C., Colburn M. E. , Choi B. J. , Grot A., Ekerdt J. G., Sreenivasan J. G., Willson C. G. 2002: Step and Flash Imprint Lithography:
A Low-Pressure, Room Temperature Nanoimprint Patterning Process. Alternative Lithography. Unleashing the Potentials of Nanotechnology. C.
Sotomayor Torres, Editor, Elsevier.
2. Burns R. L., Johnson S. C., Schmid G. M. , Kim E. K., Dickey D. M. D. , Meiring J., Burns S. D. , Stacey N. A., Willson C. G. 2004:
Mesoscale modeling for SFIL simulating polymerization kinetics and densification. Proceeding of SPIE.
3. Colburn M. E. 2000: Step and Flash Imprint Lithograpy: A Low Pressure, Room Temperature Nonoimprint Lithography. PhD. Thesis, The
University of Texas in Austin,
4. Colburn M. E., Suez I., Choi B. J., Meissi M. , Bailey T., Sreenivasan S. V., Ekerdt J. E., Willson C. G. 2001: Characterization and modeling of volumetric and mechanical properties for SFIL photopolymers, Journal of Vacuum Science and Technology, B, 19, 6.
5. Demkowicz, L., Kurtz, J., Pardo, D., Paszy´nski M., Rachowicz W., Zdunek A. 2007: Computing with hp-Adaptive Finite Elements. Part
II. Frontiers: 3DElliptic and Maxwell Problem. Chapmann & Hall/Crc Applied Mathematics & Non-linear Science.
6. Goldberg D.E. 1989: Genetic Algorithms in Search, Optimization and Machine Learning, Reading, MA, Addison-Wesley.
7. Holland, J. 1992: Adaptation in Natural and Artificial Systems, MIT Press, Cambridge, Massachusetts.
8. Hughes, T.J.R. 2000: The Finite Element Method. Linear Statics and Dynamics Finite Element Method Analysis, Dover.
9. Koza, J.R. 1992: Genetic Programming: On the Programming of Computers by Natural Selection, MIT Press, Cambridge, MA, USA.
10. PaszyĔska, A., PaszyĔski M. 2009: Application of a hierarchical chromosome based genetic algorithm to the problem of finding optimal
initial meshes for the self-adaptive hp-FEM. Computing and Informatics, 28, 2, 209-223.
11. PaszyĔska, A. 2005: An Extension of Vose’s Markov Chain Model for Genetic Algorithms. Proceedings of Genetic and Evolutionary
Computation Conference, Washington, D.C., USA, 2005.
12. PaszyĔska, A., PaszyĔski, M. 2007: An application of hierarchical chromosome based genetic algorithm to the platforms optimal shape
problem. Proceedings of X Krajowa Konferencja Algorytmy Ewolucyjne i Optymalizacja Globalna, Bedlewo.

Fig. 12. The sequence of optimal meshes delivered by the self-adaptive hp-FEM starting from the mesh constructed by the
genetic algorithm. Different colors denote different polynomial orders of approximation.

