Checking the Four-Valued Boolean Algebra by
the Use PLANNER
Vitaly Eltekov
Moscow M.V.Lomonosov State University, Physics Department
119234 Moscow, Russia
eltekov@simula.phys.msu.su

Abstract. A package for testing the Boolean algebra relationships is
proposed. The language of implementation is Planner. The same language is used as input one. The output digital data are presented in
form of lists, and the Boolean relations issued in LaTeX notation. The
consideration is based on four-valued Boolean algebra. It connects to an
attempt to resolve Russell’s paradox taking into consideration such properties of logical assertion as properties to be ‘non-truth’ and ‘non-false’ or
‘truth’ and ‘false’ simultaneously, besides usual properties to be ‘truth’
or ‘false’. In thus obtained logic the number of possibilities to connect
couples of such variables is close to 4.5 billions instead of 16 in usual
two-valued logic. Some matrix representations of these connections and
algebraic relationships are introduced. Formerly the relationships, which
took place in single-valued and double-valued logics, were aﬃrmed. Then
the formulas of expanded four-valued logic were considered and set of
new tautologies were conﬁrmed. This logic allows to extend some relationships by introducing the alternative functions of logic, which do not
obey the Frege axioms, but are relative to corresponding functions of
expanded logic. In particular the reﬂexive law of implication and equivalence is invalid in such an extended logic. New form of the law of excluded
middle appears in this logic. Such a form gives a possible explanation of
Russell’s paradox. Many tautologies, which take place in expanded logic,
transform to extended ones. . . .

1

Introduction

An attempt to resolve the Russell’s paradox [1] (see also [2]) may be connected
with taking into consideration such properties of logical assertion as property
to be either ‘true’ and ‘false’ ones simultaneously, or ‘non-true’ and ‘non-false’
simultaneously as well. In the case of Boolean algebra these properties are vtrue’
and ‘false’. This leads to conclusion that propositional variables (see [3]) may
have 4 values. In such a way obtained algebra of logic the number of binary
2
relations between the pair of variables is large enough, 44 = 4, 294, 967, 296
2
instead of 22 = 16 in usual two-valued logic. Let us consider the main formulas
of mono-valued (positive) and two-valued logics.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 764–773, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Checking the Four-Valued Boolean Algebra by the Use PLANNER

2

765

Positive Logic

Let us deﬁne the positive logic as a system of rules connecting assertions which
have only property ‘true’. Among these rules one can extract the modus ponens
and one of syllogism modi named ‘barbara’ (see [4], for example). Let A, B, C
be some assertions. Modus ponens says that if A takes place and A implies B,
then B takes place as well. Modus ‘barbara’ says that if A implies B and B
implies C, then A implies C.
The PLANNER language [5] allows to solve some problems of logical deduction, which are based, in particular, on usage of these modi. The basic part of this
language is a development of well-known language LISP (see [6], for example).
Though PLANNER is a functional language, it allows to use such traditional
means for algorithm composing as programming with jumps, cycles, and compound operators. In addition to these opportunities there is a way for solving
the problems of logical inference deﬁning the special functions, theorems, which
contain in their head a pattern, besides the arguments. This pattern serves as
a label for theorem call, backtracking and pattern matching for data base [5]
being applied here as a rule.
Let us consider the next example. Lets data base contain the following assertions: (A1 implies A2), (A2 implies A3), ... (AN-1 implies AN). It is necessary
to prove that due to syllogism modus the consequence (A1 implies AN) takes
place. For this aim let us deﬁne the theorem:
[DEFINE chain (CONSEQ (x,y,z) (*x implies *z)
[SEARCH (.x implies *y)] [GOAL (.y implies .z)] )]
Here the words DEFINE and CONSEQ show that a theorem is deﬁned. Its
pattern (*x implies *z) contains re-deﬁned variables x and y, preﬁx * indicating
on it. The word ‘implies’ is ﬁxed one. Function SEARCH tries to ﬁnd assertion
(.x implies *y) in data base with ﬁxed value of x and undeﬁned value of y. Next
function GOAL, calling just deﬁned theorem, ﬁnds the similar assertion, but
with ﬁxed value of y. Suppose N to be 750, for example. Then the theorem is
proved using the function call
[GOAL (A1 implies A750)].
The proof requires less than 10 seconds if the computer has performance
as 400 MHz. Checking for another values of N showed that elapsed time is
proportional to N 2 .
The PLANNER-B package, which was applied to checking the formulas
many-valued logics (see below), is analogous to PLANNER-ANALYTIC package [7]. Its kernel is a set of functions for recursive pattern matching [8], which
allows to organize suﬃciently compact algorithm recording.

3

Two-Valued Logic

If considering assertions might be false, then they would be manipulated according to the rules of Boolean algebra (see [3], p.e.). Objects of this algebra are

766

V. Eltekov

the variables, which may take only one of two values, ‘true’ or ‘false’. The functions of such arguments take one of these values as well. The functions having
value ‘true’ for any values of arguments are named as tautologies. Hilbert and
Bernays [9] successively deﬁned the relationships between the objects of Boolean
algebra on the base of set of axioms. For these axioms were choken by use the
package PLANNER-B we list them in full.
I. Formulas for implication:
A → (B → A) ,

(1)

(A → (A → B)) → (A → B) ,

(2)

(A → B) → ((B → C) → (A → C)) .

(3)

II. Formulas for conjunction:
(A ∧ B) → A ,

(4)

(A ∧ B) → B ,

(5)

(A → B) → ((A → C) → (A → (B ∧ C))) .

(6)

III. Formulas for disjunction:
A → (A ∨ B) ,

(7)

B → (A ∨ B) ,

(8)

(A → C) → ((B → C) → ((A ∨ B) → C)) .

(9)

IV. Formulas for equivalence:
(A ≡ B) → (A → B) ,

(10)

(A ≡ B) → (B → A) ,

(11)

(A → B) → ((B → A) → (A ≡ B)) .

(12)

V. Formulas for negation:
(A → B) → (¬B → ¬A) ,

(13)

A → ¬¬A ,

(14)

¬¬A → A .

(15)

All these formulas must be tautologies.
As an example let us try to prove the reﬂexive law (Aristotle law), A → A,
using Frege axioms
P1 → (P2 → P1 ),
(16)
(P1 → (P2 → P3 )) → ((P1 → P2 ) → (P1 → P3 ))
as source for proof.

(17)

Checking the Four-Valued Boolean Algebra by the Use PLANNER

767

Let functions FA1 and FA2 write these formulas to data base:
[DEFINE FA1 (LAMBDA (a b) [ASSERT ( (.a → (.b → .a)))] )]
[DEFINE FA2 (LAMBDA (a b c)
[ASSERT ( ((.a → (.b → .c)) → ((.a → .b) → (.a → .c))))] )]
Lets the theorem, deﬁned below, allow achieve the goal corresponding to its
pattern:
[DEFINE Modus-Ponens (CONSEQ (a b) ( *b)
[SEARCH ( (*a → .b))] [SEARCH ( .a)] [ASSERT ( .b)] )].
To ﬁll data base it is necessary to call the program, which makes all possible
substitutions A and (A → A) instead of formal parameters:
[PROG (k1 k2 k3 k4 k5 (l (A (A → A))))
[LOOP k1 .l [LOOP k2 .l [FA1 .k1 .k2] ]]
[LOOP k3 .l [LOOP k4 .l [LOOP k5 .l [FA2 .k3 .k4 .k5] ]]] ]
Before invoking the Modus-Ponens theorem we should deﬁne and apply the
following theorem,
[DEFINE M-P-2 (CONSEQ (a b c) (modus ponens *c)
[SEARCH ( (*a → *b))] [SEARCH ( .a)]
[ASSERT ( .b)] [ACHIEVE ( .c)] )]
[ACHIEVE (modus ponens (A → A))],
which creates additive assertions, in particular,
((A → ((A → A) → A)) → ((A → (A → A)) → (A → A))).

(18)

This relation is a key to solution.
The solution is obtained when the former theorem is invoked,
[GOAL ( (A → A)) ].
In the case of two-valued logic the formulas I-V allow to obtain the value
matrices for corresponding functions. These matrices may also be obtained by
another way.
Let Boolean ‘true’ and ‘false’ correspond to numbers 1 and -1. Let x and y
take values either 1, or -1. The functions of x and y, which take values either 1,
or -1, are introduced:
β→ (x, y) = (xy − x + y + 1)/2 ,

(19)

β← (x, y) = (xy + x − y + 1)/2 ,

(20)

β∨ (x, y) = (−xy + x + y + 1)/2 ,

(21)

β∧ (x, y) = (xy + x + y − 1)/2 ,

(22)

β≡ (x, y) = xy ,

(23)

β¬ (x) = −x .

(24)

These functions correspond to the following logical relations: implication,
inverse implication, disjunction, conjunction, equivalence, and negation.
All regulations, which take place in the positive logic, are written as formulas
of the two-valued logic. In particular the next formulas will be tautologies:

768

V. Eltekov

Modus ponens:

(A ∧ (A → B)) → B .

(25)

((A → B) ∧ (B → C)) → (A → C) .

(26)

Syllogism modus:

In contrast to the case of the positive logic here the variables may have ‘true’
or ‘false’ values. Thus the truth of formula does not prove the truth of variables
participating in it.
The truth of the following formalas,
(A → (A → B)) → (A → B) ,

(27)

(A → (B → C)) → (B → (A → C)) ,

(28)

(A → (B → C)) → ((A → B) → (A → C)) ,

(29)

(A → B) → ((A → (B → C)) → (A → C)) ,

(30)

is hardly manifested by means of the positive logic possibilities, but in the frames
of two-valued logic it is simply tested by use the substitution.
The next laws take place:
The law of excluded third,

the reﬂexive laws,

¬(A ∧ ¬A) ,

(31)

A → A and A ≡ A ,

(32)

the distributive law for implication,
(A → (B → C)) → ((A → B) → (A → C)) ,

(33)

The ‘reductio ad absurdum’ law,
(¬A → B) → ((¬A → ¬B) → A) ,

(34)

(¬(A ∧ B)) ≡ ((¬A) ∨ (¬B)) ,

(35)

(¬(A ∨ B)) ≡ ((¬A) ∧ (¬B)) ,

(36)

((A ∨ B) ∧ C) ≡ ((A ∧ C) ∨ (B ∧ C)) ,

(37)

((A ∧ B) ∨ C) ≡ ((A ∨ C) ∧ (B ∨ C)) .

(38)

De Morgan laws,

the distributive laws,

All these relationships are well-known (see [10]). In the next section the tests
of above formulas as well as additive formulas in the frame of four-valued logic
are discribed.

Checking the Four-Valued Boolean Algebra by the Use PLANNER

4

769

Four-Valued Expanded Logic

The formulas for functions β(x, y) conserve their applicability, if the ‘real’ unity
e (e2 = 1), which is not a number, is introduced. Then 1, e, −e, −1 may be the
propositional values for variables and functions. These values may be related to
the numbers 1,2,3,4 on the other hand. The next matrices will be correspond to
the functions introduced above:
β→ (x, y)
1234
1133

β← (x, y)
1111
2121

β∨ (x, y)
1111
1212

β∧ (x, y)
1234
2244

β≡ (x, y)
1234
2143

1212
1111

3311
4321

1133
1234

3434
4444

3412
4321

In the case of four-valued logic the matrices for functions β(x, y) may be
obtained using the tautologies I-V of precedent section. In contrast to the case
of two-valued logic the tautologies of the group I give as a result 6351 variants
for values of matrix β→ (x, y). If one chooses the variant, which is deﬁned by the
table above, then another matrices will be simply obtained according to formulas
II-IV.
In this four-valued interpretation of Boolean algebra three negations appeared: β¬ (x) = −x ∼ (4, 3, 2, 1), β (x) = ex ∼ (2, 1, 4, 3),
β⊥ (x) = −ex ∼ (3, 4, 1, 2).
The following relationships take place:
¬¬A ≡

A ≡ ⊥⊥A ≡ A ,

¬ A ≡ ⊥A, ⊥A ≡ ¬A, ⊥¬A ≡

(39)
A.

(40)

The law of excluded middle has now two forms:
¬(A ∧ ¬A)

and ¬( A ∧ ⊥A) .

(41)

The following deﬁnitions are introduced:
(A ← B) ≡ ((¬A) → (¬B)) ,

(42)

(A ↑ B) ≡ (( A) → ( B)) ,

(43)

(A ↓ B) ≡ ((⊥A) → (⊥B)) .

(44)

Then ‘modus ponens’ formula is generalized as following:
(A ∧ (A → B)) → B,
( A ∧ (A ↑ B)) →

B,

(¬A ∧ (A ← B)) → ¬B ,
(⊥A ∧ (A ↓ B)) → ⊥B .

(45)
(46)

770

V. Eltekov

Syllogism modus takes the following four forms:
((A → B) ∧ (B → C)) → (A → C) ,

(47)

((A ← B) ∧ (B ← C)) → (A ← C) ,

(48)

((A ↑ B) ∧ (B ↑ C)) → (A ↑ C) ,

(49)

((A ↓ B) ∧ (B ↓ C)) → (A ↓ C) .

(50)

Also the reﬂexive law has four types:
A → A,

A ← A,

A ↑ A,

A↓A.

(51)

Next formulas will be tautologies:
((P → Q) ∧ (Q → P )) ≡ (P ≡ Q),
((P ↑ Q) ∧ (Q ↑ P )) ≡ (P ≡ Q),

5

((P ← Q) ∧ (Q ← P )) ≡ (P ≡ Q) , (52)
((P ↓ Q) ∧ (Q ↓ P )) ≡ (P ≡ Q) .

(53)

Four-Valued Extended Logic

The next type of connection of propositional variables values is based on a modiﬁcation of mentioned above algebraic formulas. The function (x, y) substitutes
unity in formulas for β :
(x, y) = (1 + x2 + y 2 − x2 y 2 )/2 .

(54)

Then the numbers 1, i, −i, −1 (i2 = −1) are taken as admitted values. They
may be allowed to correspond to numbers 1,2,3,4. The following matrices will
correspond to such introduced functions:
β→
˜ (x, y)
1234

β←
˜ (x, y)
1111

β∨˜ (x, y)
1111

β∧˜ (x, y)
1234

β≡
˜ (x, y)
1234

1433
1242
1111

2421
3341
4321

1242
1433
1234

2214
3134
4444

2413
3142
4321

In this alternative interpretation of Boolean algebra three negations do appear: β¬ (x) = −x ∼ (4, 3, 2, 1), β ˜ (x) = ix ∼ (2, 4, 1, 3),
β⊥
˜ (x) = −ix ∼ (3, 1, 4, 2).
In this interpretation the law of excluded middle takes place (but not excluded third):
˜
˜ ¬A∧
˜ ˜ A∧
˜ ⊥A)
¬(A∧
.
(55)
The designations are introduced:
(P ˜
↑Q) ≡ ( ˜ P →
˜ ˜ Q),

˜ →
˜
(P ˜↓Q) ≡ (⊥P
˜ ⊥Q)
.

(56)

Checking the Four-Valued Boolean Algebra by the Use PLANNER

771

The reﬂexive law transforms as followed:
˜ (A˜
(A→A)
˜ ∨
↑A),

˜ (A˜↓A),
(A→A)
˜ ∨

˜ (A˜↑A),
(A←A)
˜ ∨

˜ (A˜↓A) . (57)
(A←A)
˜ ∨

Modus ponens is generalized by the following way:
˜ (A→B))
˜ (( ˜ A∧
˜ (A˜↑B))→
((A∧
˜
→B)
˜ ∨
˜ ˜ B) ,

(58)

˜ (A←B))
˜ (( ˜ A∧
˜ (A˜↑B))→
((¬A∧
˜
→¬B)
˜
∨
˜ ˜ B) ,

(59)

˜ ∧
˜
˜ (A→B))
˜ ((⊥A
˜ (A˜↓B))→
((A∧
˜
→B)
˜ ∨
˜ ⊥B)
,

(60)

˜ ∧
˜
˜ (A←B))
˜ ((⊥A
˜ (A˜↓B))→
((¬A∧
˜
→¬B)
˜
∨
˜ ⊥B)
.

(61)

Syllogism modus takes four forms:
˜ (B →C))
˜ (((A˜↑B)∧
˜ (B ˜↑C)) → (A˜↑C)) ,
(((A→B)
˜ ∧
˜
→ (A→C))
˜
∨

(62)

˜ (B ←C))
˜ (((A˜↑B)∧
˜ (B ˜↑C)) → (A˜↑C)) ,
(((A←B)
˜ ∧
˜
→ (A←C))
˜
∨

(63)

˜ (B →C))
˜ (((A˜↓B)∧
˜ (B ˜↓C)) → (A˜↓C)) ,
(((A→B)
˜ ∧
˜
→ (A→C))
˜
∨

(64)

˜ (B ←C))
˜ (((A˜↓B)∧
˜ (B ˜↓C)) → (A˜↓C)) .
(((A←B)
˜ ∧
˜
→ (A←C))
˜
∨

(65)

The reﬂexive law has four forms as well:
˜ (A˜
(A→A)
˜ ∨
↑A),

˜ (A˜↑A),
(A←A)
˜ ∨

˜ (A˜↓A),
(A→A)
˜ ∨

˜ (A˜↓A) . (66)
(A←A)
˜ ∨

Next formulas will be tautologies:
˜ (Q→P
˜
((P →Q)
˜ ∧
˜ )) ≡ (P ≡Q),

˜ (Q←P
˜
((P ←Q)
˜ ∧
˜ )) ≡ (P ≡Q)
,

(67)

˜ (Q˜
˜
((P ˜
↑Q)∧
↑P )) ≡ ¬(P ≡Q),

˜ (Q˜↓P )) ≡ ¬(P ≡Q)
˜
((P ˜↓Q)∧
.

(68)

The formulas, which are analogous to formulas for implication (sec. 2), formulas ‘reductio ad absurdum’ are not tautologies in this system of relationships.
Nevertheless they may be represented in extended form (see sec.7).

6

An Example: Proof of Possibility of Russell’s Set
Existence

One of the aims of this work was attempt to resolve the paradox connected with
Russell’s set. The Russell’s set R [1] is deﬁned by formula:

Taking the axiom
into account, we have

R = {x|x ∈ x}.

(69)

z ∈ {y|φ(y)} ≡ φ(z)

(70)

u ∈ R ≡ u ∈ u.

(71)

772

V. Eltekov

Substitution R instead of u gives
R ∈ R ≡ R ∈ R.

(72)

On the other hand, the reﬂexive law says:
R ∈ R ≡ R ∈ R.

(73)

In the frame of two-valued logic the supposion
¬(x ∈ x) ≡ x ∈ x

(74)

R ∈ R ≡ ¬(R ∈ R),

(75)

¬(R ∈ R ≡ R ∈ R).

(76)

takes place. This gives
and then leads to
The relationships (75) and (76) contradict one another.
In the frame of four-valued logic the situation is changed extremely. We
suggest that relations R ∈ R and R ∈ R are objects of extended four-valued
logic. The equivalence, as logical relation, should be generalized by the following
way:
˜ (( ˜ A)≡(
˜ ∨
˜ ˜ B))
(A≡B)
(77)
This formula will be a tautology when A ∼ B and A ∼ ¬B. Thus formulas

and

˜ (( ˜ A)≡(
˜ ∨
˜ ˜ A))
(A≡A)

(78)

˜ (( ˜ A)≡(
˜
˜ ˜ (¬A)))
(A≡(¬A))
∨

(79)

are tautologies. Substituting R ∈ R instead of A we resolve the contradiction
above.

7

Some Analogies in Considered Types of Logic

Conﬁrmation of implication (Frege axiom):
A → (B → A), A ↑ (B ↑ A),
A → ¬(B ← A), A ↓ ⊥(B ↓ A),
˜ (A˜↑ ˜ (B ˜↑A)),
(A→
˜ (B →A))
˜
∨
˜ ˜↓A)),
˜ (A˜↓⊥(B
(A→
˜ (B →A))
˜
∨
˜
˜ (A↑ ˜ (B ˜↑A)),
(A←¬(B
˜
←A))
˜
∨
˜ ˜↓A)).
˜ (A˜↓⊥(B
(A←¬(B
˜
←A))
˜
∨

(80)

Checking the Four-Valued Boolean Algebra by the Use PLANNER

773

The modiﬁed ‘reductio ad absurdum’ law:
((A → B) ∧ (A → ¬B)) ≡ ¬A, ((A ↑ B) ∧ (A ↑ ¬B)) ≡ ⊥A,
((A ← B) ∧ (A ← ¬B)) ≡ A, ((A ↓ B) ∧ (A ↓ ¬B)) ≡ A,
˜
˜ (A→¬B))
˜ (((A˜↑B)∧
˜ (A˜↑¬B)) ≡ ⊥A),
(((A→B)
˜ ∧
˜
≡ ¬A) ∨
˜
˜
˜ (A→¬B))
˜ (((A↓B)∧
˜ (A↓¬B)) ≡ ˜ A),
(((A→B)
˜ ∧
˜
≡ ¬A) ∨
˜
˜ (A←¬B))
˜ (((A˜↑B)∧
˜ (A˜↑¬B)) ≡ ⊥A),
(((A←B)
˜ ∧
˜
≡ A) ∨
˜ (A←¬B))
˜ (((A˜↓B)∧
˜ (A˜↓¬B)) ≡ ˜ A).
(((A←B)
˜ ∧
˜
≡ A) ∨

8

(81)

Conclusion

The approbation of some formulas of four-valued logic was performed. Few types
of formulas of expanded and extended logics were designated. In the expanded
logic all relationships, which took place in two-valued algebra, were aﬃrmed. The
additive relationships, which appeared in this case, were choken as well. In the
extended logic only part of tautologies related to the expanded one took place.
In particular the reﬂexive law of implication and equivalence was invalid. In the
case of extended logic some tautologies, which were analogous to corresponding
tautologies of expanded logic, were composed. These tautologies allow to develop
the additive rules of logical deduction besides conventional ones. The approbation performed could be taken into account while developing the principles of
automated proving (see [11]).

References
1. Russell B.: The Principles of Mathematics (1903)
2. Lavrov, S.S.: On a relation between the bases of programming and mathematics.
Programming N 6 (2001) 3–12
3. Mendelson, E.: Introduction to Mathematical Logic. Princeton Toronto New York
London (1964)
4. Kolmogorov, A.N., Dragalin, A.G.: Introduction to Mathematical Logic. Moscow
Univ. Publ. (1982)
5. Pilschikov, V.N.: PLANNER language. Nauka, Moscow (1983)
6. Lavrov, S.S., Silagadze, G.S.: Automated data processing. LISP language and its
realization. Nauka, Moscow (1978)
7. Eltekov, V.A.: Program package PLANNER-ANALYTIC. In: Samarskii, A.A. (ed):
Applied Program Packages. Analytic Transformations. Nauka, Moscow (1988) 147–
151
8. Shaposhnikov, N.N., Eltekov, V.A.: On a method for computer realization of analytic transformations. Programmirovanie, N 5 (1986) 84–87
9. Hilbert, D., Bernays, P.: Grundlagen der Mathematik, Bd. I. Berlin (1934)
10. Church, A.: Introduction to Mathematical Logic. Vol. I. Princeton University Press
(1956)
11. Lauriere, J.-L.: Intelligence Artiﬁcielle. Eyrolles, Paris (1987)

