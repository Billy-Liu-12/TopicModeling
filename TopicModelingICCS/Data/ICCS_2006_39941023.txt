Transparent Resource Management with Java
RM API
Arkadiusz Janik and Krzysztof Zieli´
nski
Institute of Computer Science, AGH, al. Mickiewicza 30, 30-059 Krak´
ow, Poland

Abstract. The Multitasking Virtual Machine has been provided with
many useful features like Isolation API or Resource Consumption Management API. The latter one can be used to help in managing resources
in Java applications. However, using RM API does not guarantee separation between the resource management activity and the business activity. In this paper we present the concept of The Transparent Resource
Management (TRM) system. The system can be used to run Java applications with resource management policies added dynamically, as a
separate aspect. The policy for a given resource is dynamic which means
that it may change during the runtime, depending on the state of the
application, the state of the whole system, as well as the utilization of
diﬀerent resources in diﬀerent applications.

1

Introduction

The new Sun’s Java Multitasking Virtual Machine ([2], [5]) has been provided
with many interesting features like a resource consumption management ([3], [4],
[7]) and an isolation of Java applications ([1], [8], [6]). Although the Resource
Consumption Management API provides useful features for writing resourceaware applications in Java, the application’s developer using RM API has to
include parts of the code responsible for managing resources directly into the
application’s code. In other words, the RM API provides features which can be
used to build the highest-level of management policies. The main diﬀerence between the original RM API and the proposed extension is the transparency of
the resource management in our solution. The RM API weakest point is the fact
that much of the source code has to be written every time a new application
is prepared or policy is changed. The transparency of the proposed architecture means that the resource management activity of the application is separated from its business activity and speciﬁed on the abstract level. The resource
consumption management is invisible for the application. The proposed architecture makes management simple, understandable and transparent both from
the application’s and developer’s point of view. Diﬀerent management policies
can be saved for later use by diﬀerent developers and by diﬀerent applications.
The resource management functionality can be added to the target application
in diﬀerent cycles of the application’s life and in diﬀerent ways. When considering diﬀerent cycles, we can add functionality either during the deployment
process or during the runtime. When considering diﬀerent ways of adding the
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 1023–1030, 2006.
c Springer-Verlag Berlin Heidelberg 2006

1024

A. Janik and K. Zieli´
nski

RM, such possibilities as an aspect oriented programming ([9]) or wrappers seem
to be useful. The fostered approach can be used to implement speciﬁc resource
consumption management policy, to guarantee quality of service (QoS) and to
add self-adaptability to Java applications ([11], [10]). In this article we present
the overall, high-level architecture of The Transparent Resource Management
(TRM) system. The RM API has been originally provided with Multitasking
Virtual Machine; therefore presented approach bases on features of MVM.
The remainder of this paper is organized as follows. Section 2 introduces the
the Resource Consumption Management API. Section 3 presents the architecture
of Transparent Resource Management whereas diﬀerent ways of using the Aspect
Oriented Programming with the proposed architecture are discussed in Section
4. Conclusions and further research are summarized in Section 5.

2

Overview of RM API and Isolation API

The Resource Consumption Management API (RM API [7], [3], [4]) is provided
as an experimental part of MVM. It is a framework used to supplement Java
with the resource and consumption management as well as with control and
reservation features. Each resource in the RM API is described as a set of resource attributes. In the RM API resource policies are encapsulated in resource
domains. All isolates ([8]) that are bound to the same resource domain share the
same policy. The isolate can be bound to many domains as long as each domain
is responsible for a diﬀerent resource. The policy is implemented by consume
callbacks and triggers that specify when callbacks are called. Callbacks can act
either as constraints (when called before the resource consumption is done) or
as notiﬁcations (called after a consumption). An important element of the RM
API is a dispenser, the bridge between the resource abstraction and its implementation. The dispenser monitors the amount of resource available for resource
domains as well as it decides how much of the resource can be granted when
the consumption is done. In order to stress that there is only one dispenser per
resource system we should describe it as global.
The most important concept of The Application Isolation API ([8]) is an
isolate - the abstraction of a single Java task running in a Virtual Machine. In
the Sun’s MVM various Java applications may be started in isolates using the
same virtual machine.

3

Transparent Resource Management Architecture

The goal of the proposed system is to make resource management invisible from
the application’s point of view. The system is built on top of the RM API.
What diﬀers the TRM architecture from RM API is that in the TRM resource
management is hidden from the application, not included into the application’s
source code and applied to it during deployment. The resource management
policy is dynamic and the application’s developer may specify it as a concern of
the application. Dynamic means that the policy may change during the runtime,

Transparent Resource Management with Java RM API

1025

depending on the state of the application and the whole system. What is more,
in the TRM architecture various policies may be easily applied. In contrast with
the TRM architecture, the RM API can be used to build rather static policies,
which are separated from the policies of diﬀerent resources while in the TRM
architecture the policies of diﬀerent resources may be dependent. As a result,
the TRM can be used to build self-adaptable applications in Java.
3.1

High-Level Architecture

The high-level architecture of the Transparent RM is presented in Figure 1.
The architecture speciﬁes diﬀerent elements (rectangles) and diﬀerent phases
(arrows). The more detailed description of the elements of the system is presented
below.

Fig. 1. The architecture of The Transparent Resource Management system

Policy deﬁnition is a high-level, user-readable description of the desired
application’s behavior, resource management logic and quality of service etc.
This deﬁnition may limit the CPU usage or network bandwidth whereas another
deﬁnition may stress that the number of concurrently running threads should
not increase a given threshold. A policy deﬁnition depends on a type of the
application and/or speciﬁc requirements for its current deployment. The same
application running on diﬀerent hardware conﬁgurations may have completely
diﬀerent policy deﬁnitions.
Policy speciﬁcation is a formalized, more detailed presentation of the policy
deﬁnition. The specialized policy speciﬁcation language can be used to prepare
a speciﬁcation. The exemplary policy speciﬁcation requires that the application
should not use more than 10% of the CPU time nor to exceed 56kB of the network
bandwidth. The limitations of diﬀerent resources can be also composed to specify
more complex policies like not to exceed 56kb of the network bandwidth as long
as CPU load is less than 90%. If the CPU load increases, the higher network
bandwidth is allowed (because of the switching oﬀ the CPU consuming socket
compression module and sending raw data). The policies of diﬀerent applications
can be also merged as to treat previously seperate applications as a group. The
exemplary policy can specify an upper limit of a number of threads that can
be running concurrently in all started applications. The policy speciﬁcation can

1026

A. Janik and K. Zieli´
nski

be more or less detailed as if there was a conceptual line between the formal
high-level speciﬁcation and the informal low-level programming realization.
RM Unaware application is an input application which is not aware of
the resource consuming policies and resource management. The developer of
the application can focus on business logic. Moreover, isolating business logic
from the the RM logic makes reusability possible. Each time an application is
deployed/started diﬀerent resource policy and diﬀerent QoS can be applied.
Transformation engine is the central point of the proposed system. The
engine is responsible for transforming the RM unaware application into the aware
one. The transformation techniques are not presented here but will be discussed
later in this paper (see Section 3.3). The transformation engine has four inputs:
– RM unaware application - the input application to be transformed;
– policy speciﬁcation - policy to be applied to the application (presented
above);
– RM API App elements - the elements of the Resource Consumption
Management API to be added to the application; the transformation engine
uses these elements to add (to the input application) the entity responsible for the communication with the RM API; the entity knows RM API,
understands it and can use it as to enable the desired application’s behavior;
– Monitoring API App elements - the elements of the Monitoring API to
be added to the application; the transformation engine uses these elements
to add (to the input application) the entity responsible for the communication with monitoring part of the system; the entity uses Monitoring API to
provide information about the state of the whole system, as well as feedback
on the application’s behavior; the information from the Monitoring entity
can be used by the RM entity as to modify the application’s behavior and
to guarantee the RM policy or the QoS;
RM Aware application is the only output from the transformation engine.
The application has been modiﬁed in such a way that it can use the RM API
and the Monitoring API to apply a given RM policy. More detailed description
of the application after transformation is presented in Section 3.2.
3.2

Architecture of RM Aware Application

An abstract view on the RM aware application (which is the result of the transformation process) is presented in Figure 2. The RM aware application is built on
top of the input, the RM unaware application. Two entities have been added to
the original application. There exist three types of connections between elements
in the system:
– connection between entities and external environment - each entity can exchange information with the external parts of the system such as entities
belonging to other applications or specialized modules common for all of the
elements in the system. E.g. the monitoring entity can communicate with the
monitoring module which gathers and analyzes information about the state

Transparent Resource Management with Java RM API

1027

of the whole system (see Figure 3). Alternatively, the monitoring entity can
communicate directly with its opposite number in the diﬀerent application.
– connection between entities and the RM unaware application - the connection that can be used to get information about resource utilization and/or
the application’s state.
– connection between diﬀerent entities within the single application - this type
of a connection can be used for the eﬀective exchange of information about
diﬀerent aspects of the same application. As a result, the decisions made by
entities are more precise.

Fig. 2. The architecture of the RM aware application. The RM unaware application is
instrumented with entities to communicate or juxtapose application with RM Module
and Monitoring Module.

As for entities, there are a few ways of applying them. The Aspect Oriented
Programming can be used to make communication between entities and original
application possible.
Figure 3 illustrates four exemplary applications in the TRM system. Each
application has two entities built into. Each entity communicates with the proper
module (common for the whole system). The communication is bidirectional
which means that modules use entities to gather information and to perform
adequate actions (e.g. modify the application’s behavior, deﬁnitions of RM API
triggers and consume-actions etc.).
Entities of diﬀerent applications can communicate with each other. This type
of communication may be necessary when the strict cooperation between two
applications is needed.
3.3

Transformation Engine

Transformation engine is the central point of the TRM system, responsible for
transforming the RM unaware application into the RM aware one. The RM API
is just a framework which does not imply any resource management policies.
One can use it to write its own resources and resource management strategies.
The desired result can be achieved by deﬁning proper resources, resource domains and limitations (via consume-action callbacks and triggers). The obvious
solution of the transformation process is to implement diﬀerent resource policies by providing the specialized API (built on top of RM API) with a set of

1028

A. Janik and K. Zieli´
nski

Fig. 3. Management and monitoring modules in the TRM system

Fig. 4. The process of transforming the RM unaware isolate into the RM aware one.
Resource Domain D is created by the transformation engine to meet the conditions
speciﬁed in the policy speciﬁcation.

ready-to-use triggers and actions. The simplest way of connecting the RM unaware application to the RM API is to use the specialized manager (isolate or
program) to create and start the input application. The manager is responsible
for recognition (and optionally creation) of proper resource domains, binding
the original application to them and applying resource management policies (by
the creation of proper triggers, actions etc.). The application’s source code is
not modiﬁed. However, some of the resource management limitations may result
in improper behavior of the application. Let’s imagine the application bound to
the resource domain with limits on a number of started threads. If a maximum
number of threads is present and the application wants to start another thread,
resource exception is thrown and the application starts behaving in an incorrect
way. The conclusion is that some code modiﬁcations might need to be done. The
scheme of the transformation process is presented in Figure 4.
As it was mentioned before, the RM aware application has the resource management and monitoring entities built into. Entities can be added either by the

Transparent Resource Management with Java RM API

1029

use of threads ”injected” into the original application or started in separated isolates. Specialized monitoring/managing modules can be used to change resource
management policies dynamically (e.g. if network policy in the application A
depends on CPU usage policy in the application B).
The presence of entities in the running application means that each application provides a well deﬁned interface which can be used by other applications
or by the TRM system to collect information about the application’s behavior
and resource utilization. Collected information may then be analyzed to check
whether the conditions speciﬁed by resource policies of all applications are met.
Proper activities can then be performed to guarantee that resource policy constraints are not violated. In particular, triggers and consume-action callbacks can
be modiﬁed. Moreover, the architecture can be also extended to make changes
of the application’s behavior possible. E.g. if the CPU load increases, the application may change network traﬃc compression algorithm into the simplest one
(less CPU usage), some of the application’s features can be switched oﬀ, and
some rescue features can be enabled. It is a simple way to introduce reﬂection
and self-adaption to the RM aware applications.

4

RM API vs Aspect Oriented Programming

In Section 3.2 we have presented diﬀerent techniques which can be used to add
the resource management and monitoring modules into the RM unaware application. Aspect Oriented Programming methods can be used to support this
operation.
Most applications using RM API does not see dispensers directly [3]. Usually,
only JRE will create and register dispensers. In this term, the user’s application
is unaware of the resource management. However, the resource domain’s policy
has to be speciﬁed as a set of pre-consume and post-consume actions or included
into the trigger’s code. It means that the application’s developer is involved into
resource management problem and has to consider it during code development.
As it is presented before, the specialized manager can be used to start the
application’s isolate, and bind it to proper resource domains (either the exiting
or the new ones). The manager can also create and start resource managing and
monitoring entities and the code responsible for changing the currently active
state. The AOP can be used to let the RM unaware applications behave properly when resource exceptions are thrown. The AOP can also deﬁne jointpoints
between the application and entities. The AOP may also be used to enable the
self-adaptation of the running application via changing parts of the code whenever the application’s state is changed.

5

Conclusion and Future Work

In this paper we have presented the high-level architecture of the Transparent
Resource Management system. We have shown that the RM API can be used to
build an additional layer which helps to separate resource management logic from

1030

A. Janik and K. Zieli´
nski

business logic. In the proposed architecture the RM unaware application is being
transformed into the RM aware one, considering a given resource policy. Diﬀerent
policies can be deﬁned and stored for later use with diﬀerent applications. The
policies in the TRM system are dynamic, they use information about diﬀerent
resources in diﬀerent applications. We have presented the concept of the RM
and monitoring modules. The modules are used to collect the information about
the state of the whole system. The information is analyzed to check whether
the resource policies constraints are met. Specialized entities are used as the
bridge between the system and the application. We have shown that the Aspect
Oriented Programming can be used to support the process of transforming the
RM unaware application into the aware one. The next goal of our research is to
deﬁne the more detailed architecture of the system.

References
1. Czajkowski, G.: Application Isolation in the Java Virtual Machine. ACM OOPSLA
(2000), Minneapolis, MN.
2. Czajkowski, G., Daynes, L.: Multitasking without Compromise: A Virtual Machine
Evolution. ACM OOPSLA (2001), Tampa, FL.
3. Czajkowski, G., Hahn, S., Skinner, G. and Soper, P., Bryce C. A Resource Management Interface for the Java Plaftorm. Sun Microsystems Laboratories Technical
Raport, SMLI TR-2003-124, May 2003.
4. Czajkowski, G., Wegiel, M., Daynes, L., Palacz, K., Jordan, M., Skinner, G., Bryce,
C., Resource Management for Clusters of Virtual Machines.
5. Heiss, J.: The Multi-Tasking Virtual Machine: Building a Highly Scalable JVM.
Java developers forum. March 2005.
6. Czajkowski, G., Daynes, L., Wolczko, Mario., Automated and portable Native Code
Isolation. April 2001.
7. Java Community Process. JSR-284: Resource Consumption Management API,
http://www.jcp.org/en/jsr/detail?id=284
8. Java Community Process. JSR-121: The Application Isolation API Speciﬁcation,
Java Community Process, http://www.jcp.org/en/jsr/detail?id=121
9. JBoss Aspect-Oriented Programming home page. http://www.jboss.org/
products/aop
10. Sullivan, G., Aspect-Oriented Programming using Reﬂection and Metaobject Protocols. Ariﬁcal Intelligence Laboratory. Massachusetts Institute of Technology.
April, 2001.
11. Sadjadi, S., McKinley, P., Stirewalt, R., Cheng, B., TRAP: Transparent Reﬂective
Aspect Programming. Proceedings of the International Symposium on Distributed
Objects and Applications. 2004.

