Using Runtime Measurements and Historical Traces for
Acquiring Knowledge in Parallel Applications
Luciano Jos´e Senger1 , Marcos Jos´e Santana2 , and Regina Helena Carlucci Santana2
1

Universidade Estadual de Ponta Grossa, Departamento de Inform´atica
Av. Carlos Cavalcanti, 4748 Zip Code 84030-900 Ponta Grossa, PR, Brazil
2
Universidade de S˜ao Paulo, Instituto de Ciˆencias Matem´aticas e de Computa¸ca˜ o
Av. Trabalhador Saocarlense, 400 PO Box 668 Zip Code 13560-970 S˜ao Carlos, SP, Brazil
{ljsenger, mjs, rcs}@icmc.usp.br

Abstract. A new approach for acquiring knowledge of parallel applications
regarding resource usage and for searching similarity on workload traces is
presented. The main goal is to improve decision making in distributed system
software scheduling, towards a better usage of system resources. Resource usage
patterns are defined through runtime measurements and a self-organizing neural
network architecture, yielding an useful model for classifying parallel applications.
By means of an instance-based algorithm, it is produced another model which
searches for similarity in workload traces aiming at making predictions about
some attribute of a new submitted parallel application, such as run time or memory
usage. These models allow effortless knowledge updating at the occurrence
of new information. The paper describes these models as well as the results
obtained applying these models to acquiring knowledge in both synthetic and
real applications traces.

1

Introduction

One of the challenges in parallel and distributed is to develop scheduling algorithms
that assigns the tasks of parallel applications to the heterogeneous machines. Many researchers have demonstrated that using parallel application knowledge may improve the
scheduling decisions on multiprogrammed multiprocessor systems [1][2]. Nevertheless,
most of the work has assumed that such knowledge is available a priori and does not
provide effective indications to obtain it. There are commonly three main sources to
obtain knowledge: the description of applications requirements provided by the user (or
programmer) who submits the parallel application to the system; historical traces of all
applications executed in a specific system over a time period, and runtime measurements
from parallel applications.Among these knowledge sources, historical traces and runtime
measurements have demonstrated a great potential to provide information aiming at
classifying parallel applications and obtaining knowledge [3][4].
This paper presents two models for knowledge acquisition in parallel applications
aiming at improving software scheduling decisions. The first model aims for parallel
applications classifying, regarding behavior on resource usage. Compared to previous
work, these models have two novel aspects. First, they allow updating of acquired
knowledge at the occurrence of new information. Second, they can be used to improve
different scheduling policies, not aimed at particular scheduling strategies.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 661–665, 2004.
c Springer-Verlag Berlin Heidelberg 2004

662

2

L.J. Senger, M.J. Santana, and R.H. Carlucci Santana

Local Knowledge Acquisition

The main goal of the model described in this section is the knowledge acquisition from the
execution of tasks which compose parallel applications, classifying parallel applications
regarding its behavior on resource utilization by classes such as CPU Bound, I/O Bound
and Communication Intensive [5]. This model allows the utilization of knowledge
acquired in previous runs of the applications and the knowledge updating in presence
of new information. The model aiming at identifying the resource usage phases during
the parallel application execution using runtime measurements. Collected observations
are separated by intervals of time To . A sample is created for each No observations,
characterizing an Euclidean vector with dimension d. These samples samples are grouped
in clusters. An important aspect of the model is how to carry out the clustering of the
vectors. Since an on-line strategy is desired, it is adopted the utilization of the ART 2A
self-organizing neural architecture [6] as the solution. The ART 2A neural network
allows incremental clustering and classification of a pattern set composed of continuous
values [7]. A significance matrix SM [8], which is composed by a set of significance
values SVij , is employed to assign a label for each cluster. The significance values are
obtained directly from the ART 2A long term memory.
The model was evaluated using an input feature vector with dimension d = 7: CPU
user time; memory usage; read and write file operations and send and receive network
operations. The model was tested on the PSTSWM (Parallel Spectral Transform Shallow
Water Model) [9] application. The PSTSWM is a representative compact application
that solves the nonlinear shallow water equations on a rotating sphere using the spectral
transform method. The model parameters were To = 1000ms and No = 1 and the results
obtained are illustrated in Table 1. The majority of application phases (about 56%) were
classified as communication intensive (cluster k = 1). The other phases were classified
as communication intensive (k = 2 and k = 4) and CPU-Bound (cluster k = 3).

3

Global Knowledge Acquisition

The local knowledge acquisition model presented in the previous section aiming at
knowledge acquiring of a particular application resource usage. Scheduling algorithms
often need to know some application attribute in advance of its execution (e.g. run
time, memory usage and cpu time). The workload traces can be treated as a database of
previous experiences (experience base) about parallel applications and depending on the
scheduling algorithm requirements, some attribute, like run time or memory usage, can
be considered as the attribute to be predicted. The global knowledge acquisition model
described in this section is constructed using instance-based learning. Instance-based
learning (IBL) is an approach which find similar instances in an experience base aiming
at approximating real-valued or discrete-valued target functions [10]. IBL algorithms
compute the similarity between a new query instance and the experience base instances,
returning a set of related instances as output.
The output attribute considered to predict is the parallel application run time, although
any attribute can be used as output in our IBL algorithm implementation. Many authors
have demonstrated that parallel applications run time knowledge can be very useful

Using Runtime Measurements and Historical Traces for Acquiring Knowledge

663

to space-sharing scheduling algorithms [11]. Parallel application traces recorded in two
computing centers, namely SDSC (San Diego Supercomputer Center) and CTC (Cornell
Theory Center), are used to evaluate the IBL model. The most relevant input attributes,
selected according to [4], were used. The workload traces were organized through a
number of disjoint sets. Each of these sets was partitioned considering 2/3 as experience
base and 1/3 for testing, and a partial mean prediction error was computed for each set.
The main IBL algorithm parameters are the neighborhood size K, which defines the
number of relevant instances used for computing the estimate, and the σ 2 , which defines
the Gaussian function slope and the weighting values. The values experimented for K
were 5, 10, 25 and 50. For σ 2 , the values were 0.125, 0.250, 0.500, 1.000 and 2.000. The
IBL algorithm achieved mean prediction errors that are between 50 and 58 percent of
mean application run times (Table 2). For all workload traces, the best K value founded
was 5 and there was not statistical difference among the prediction errors obtained by
the experimented σ values. Nevertheless, it was observed a tendency for more higher
prediction errors as the σ 2 value increases. The Table 3 shows the best IBL model
prediction errors obtained compared to five previous approaches [12] [3] [4](the mean
absolute error is used in order to compare the results with previous work).

Table 1. PSTSWM parallel application results
ART-2A LTM centroid traces
Cluster(k)
Attribute
CPU time (user)
I/O (Bytes read)
I/O (Bytes write)
Network (TCP bytes read)
Network (TCP bytes write)
Network (UDP bytes read)
Network (UDP bytes write)
Frequency

1
0.003
0.00
0.00
1.00
0.00
0.00
0.00

2
0.12
0.00
0.00
0.00
0.99
0.00
0.00

3
1.00
0.00
0.00
0.00
0.00
0.00
0.00

Significance Matrix

4
1
2
3
0.09 0.30% 10.94% 100.00%
0.00 0.00% 0.00% 0.00%
0.00 0.00% 0.00% 0.00%
0.70 99.70% 0.00% 0.00%
0.70 0.00% 89.06% 0.00%
0.00 0.00% 0.00% 0.00%
0.00 0.00% 0.00% 0.00%

4
6.26%
0.00%
0.00%
46.87%
46.87%
0.00%
0.00%

56.07% 16.58% 14.79% 12.56%

Table 2. Experiments details
Workload Experience base size Test size Samples Percentage of Mean Runtime Error
SDSC95
716
369
70
57.46±1.06
SDSC96
421
210
60
55.40±1.18
SDSC2000
621
320
60
50.05±1.59
CTC
688
355
60
50.45±1.29

4

Conclusions

This paper presented two models for acquiring knowledge in parallel applications.
The aim of these models is to improve scheduling decisions, supporting the scheduler

664

L.J. Senger, M.J. Santana, and R.H. Carlucci Santana
Table 3. IBL algorithm results compared to previous work
Downey
Gibbons
Smith
Workload Median Average
Fixed
Greedy Genetic IBL
Lifetime Lifetime Templates Search Search
SDSC95
82.44
171.00
74.05
67.63 59.65 33.98
SDSC96 102.04 168.24
122.55
76.20 74.56 58.32
CTC
179.46 201.34
124.06 118.05 106.73 109.06

with knowledge about the resource usage patterns of parallel applications. Through
the experiments, the local knowledge acquisition model presented a good classification
performance. Another aspect observed is the robustness of this model at the different
computational loads and processing elements configurations [5]. The global knowledge
acquisition model presented a great potential to define similarity among parallel
applications, weighting the more relevant instances in an experience base to generate
an output attribute estimate. Our IBL approach achieved a good prediction performance
when compared to both static and adaptive templates prediction approaches.
Acknowledgments. This project is supported by CAPES/PICDT program. The authors
would like to thank Reagan Moore, Allen Downey, Victor Hazelwood (San Diego
Supercomputer Center) and the Cornell Theory Center for graciously providing the
workload traces used in this work. Particular thanks to Warren Smith, for providing his
prediction software.

References
1. Silva, F.A.B.D., Scherson, I.D.: Improving Parallel Job Scheduling Using Runtime
Measurements. In Feitelson, D.G., Rudolph, L., eds.: Job Scheduling Strategies for Parallel
Processing. Springer Verlag (2000) 18–38 Lect. Notes Comput. Sci. vol. 1911.
2. Naik, V.K., Setia, S.K., Squillante, M.S.: Processor Allocation in Multiprogrammed
Distributed-memory Parallel Computer Systems. Journal of Parallel and Distributed
Computing 47 (1997) 28–47
3. Gibbons, R.: A Historical Application Profiler for Use by Parallel Schedulers. In: Job
Scheduling Strategies for Parallel Processing. Springer Verlag (1997) 58–77
4. Smith, W., Foster, I.T., Taylor, V.E.: Predicting Application Run Times Using Historical
Information. In: JSSPP. (1998) 122–142
5. Senger, L.J., Santana, M.J., Santana, R.H.C.: A new approach fo acquiring knowledge of
resource usage in parallel applications. In: Proceedings of International Symposium on
Performance Evaluation of Computer and Telecommunication Systems (SPECTS’2003).
(2003) 607–614
6. Carpenter, G.A., Grossberg, S., Rosen, D.B.: ART 2-A: An Adaptive Resonance Algorithm
for Rapid Category Learning and Recognition. Neural Networks 4 (1991) 494–504
7. Whiteley, J.R., Davis, J.F.: Observations and problems applying ART2 for dynamic sensor
pattern interpretation. IEEE Transactions on Systems, Man and Cybernetics-Part A: Systems
and Humans 26 (1996) 423–437
8. Ultsch, A.: Self-organising neural networks for monitoring and knowledge acquisition of a
chemical process. In: Proceedings of ICANN-93. (1993) 864–867

Using Runtime Measurements and Historical Traces for Acquiring Knowledge

665

9. Foster, I.T., Worley, P.H.: Parallel algorithms for the spectral transform method. SIAM J. Sci.
Stat. Comput. 3 (1997) 806–837
10. Aha, D.W., Kibler, D., Albert, M.K.: Instance-based learning algorithms. Machine Learning
(1991) 37–66
11. Feitelson, D.G., Rudolph, L., Schwiegelshohn, U., Sevcik, K.C., Wong, P.: Theory and
Practice in Parallel Job Scheduling. In: Job Scheduling Strategies for Parallel Processing.
Volume 1291. Springer Verlag (1997) 1–34 Lect. Notes Comput. Sci. vol. 1291.
12. Downey, A.: Predicting queue times on space-sharing parallel computers. In: Proceedings of
International Parallel Processing Symposium. (1997)

