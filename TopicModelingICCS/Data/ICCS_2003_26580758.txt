Modelling of Complex Systems Given as a Mealy
Machine with Linear Decision Diagrams
P. Dziurzanski
Faculty of Computer Science and Information Systems, Technical University of Szczecin,
Zolnierska 49, 71-210 Szczecin, POLAND
pdziurzanski@wi.ps.pl

Abstract. We propose a novel approach to transform an arbitrary Mealy machine,
which is a kind of Finite State Machine (FSM) with outputs, into so-called Linear
Binary Moment Diagrams (LBMDs). We stress the attractive features of this approach, and demonstrate the results of experiments on benchmarks in comparison
with a state-of-the art Reduced Ordered Binary Decision Diagrams technique.

1

Introduction

Many practical problems in a field of sequential system optimization are described by
finite state system over a sequence of state transitions. As classical Finite State Machine
(FSM) offers only two outputs, namely ’accepted’ and ’unaccepted’, modifications of
FSM with allows multiple output values are often used instead. The most popular FSMs
of that type are Mealy and Moore machines. In this paper, we focus on Mealy machine,
but it does not restrict applications of the approach, as each Moore Machine can be
transformed into Mealy ones and vice-versa [6].
Although classic algorithms construct an explicit representation [3], these techniques
are practical only for small-size problems. In order to overcome the problem, symbolic
state graph methods were developed, in which the next state behavior is represented with
a Boolean function [2]. Then, a Reduced Ordered Binary Decision Diagram (ROBDD)
can be constructed [8]. It is beneficial if all the future operations are carried out only on
that diagram.
Although successful for many class of switching functions, the above mentioned
method has a number of drawbacks. Firstly, the number of nodes in ROBDD depends
on variable ordering. Moreover, for a majority of functions the number of nodes remains
exponential. As a result, a construction of ROBDD for characteristic functions is often
unsuccessful due to the ROBDD size explosion.
In this paper we deal with word-level Binary Moment Diagrams (BMDs), introduced
by Bryant et. al. in [1]. Since BMDs also depend on variable ordering in general, we take
advantage of the only class of Decision Diagrams which are insensitive to the variable
ordering, known as Linear Decision Diagrams (LDDs). Besides, as our experiments
proved, for popular benchmark sets we can build diagrams with lower number of nodes
than the typical ROBDD.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 758–765, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Modelling of Complex Systems Given as a Mealy Machine

2
2.1

759

Principles
Characteristic Functions of Mealy Machines

Mealy machine is a 6-tuple (S, I, O, δ, λ, s0 ), where S is the set of states, I is the set
of input values, O is the set of output values, δ : S × I → O is the next state function,
λ : S × I → S is the next state function, and s0 ∈ S is the initial function.
In order to synthesis of FSM, we need to assign binary codes to the states. This
process is called state assignment. After assigning, we can build a truth table, which
input set consists of primary inputs x and current states s, whereas an output set consists
+
of next states s and primary outputs y. After minimizing, truth table is often referred
as cube table.
As in mentioned above definition of Mealy machine there are two functions, from
which one determines the next state and the other output values, it is convenient to build
two characteristic functions for describing a behavior of the automata.
For more details about Mealy machines see, for example, [5,6].
The characteristic function χδ which describes the next state of Mealy machine is
the function f : S × I × S → B, f (x, i, y) = 1 iff y = δ(x, i), where i ∈ I, x, y ∈ S,
and B = {0, 1}.
The characteristic function χλ which describes outputs of Mealy machine is the
function f : S × I → B, f (x, i, z) = 1 iff z = λ(x, i), where i ∈ I, x ∈ S, z ∈ O, and
B = {0, 1}.
Example 1 Let us consider a State Transition Graph presented in Fig. 1a. After assigning st0 with ’0’ and st1 with ’1’, we obtain a cube table presented in Fig. 1b. A
+
characteristic function χδ has inputs x1 , x2 , s1 , s1 , whereas χλ has inputs x1 , x2 , s1 ,
y. Consequently, the characteristic functions in a SOP forms equal
+

+
+
+
χδ = x1 x2 s1 s+
1 ∨ x2 s1 s1 ∨ x1 x2 s1 s1 ∨ x1 s1 s1 ∨ x1 x2 s1 s1 ,
χλ = x1 x2 s1 y + ∨x2 s1 y ∨ x1 s1 y ∨ x1 x2 s1 y.

11/0
-0/0

0-/1

01/-

st0

st1
11/0

(a)

x1
1
0
0
1

x2
1
0
1
1

s1
0
0
0
1
1
(b)

+

s1
0
0
1
1
0

y
0
0
1
0

Fig. 1. An example of a State Transition Graph (a) and its cube table (b)

In our previous work, described in [4], we propose a usage of one characteristic
functions, which incorporated both of the next state and outputs ones. Our previous
approach makes the process of simulation, i.e. evaluating the outputs and next state
performance, much more complex and time-consuming, what makes it inefficient in
case of complex systems.

760

P. Dziurzanski

2.2

Linear Arithmetic Expressions

Having a cube table of both of characteristic functions as an input, we can derive a
minimal SOP. The SOP consisting of p products is a two-level representation. In the
first and the second level p ANDs and one OR functions are implemented, respectively.
Each of these functions can be extended to a multi-output function generating a Linear
Arithmetic Expressions (LAR) (1), and, therefore, by a Linear Binary Moment Diagram
(LBMD).
An arbitrary function can be described by a corresponding arithmetical expression
(AR), for example x = 1 − x, x1 ∨ x2 = x1 + x2 − x1 x2 . In particular cases only these
arithmetical expressions have a linear structure, including terms with no more than one
variable. LAR for the n-variable logic function can be generally described by
d0 + d1 x1 + . . . + dn xn ,

(1)

where di are arbitrary integers. Thus the term linearization means a transformation from
nonlinear AR into corresponding LAR.
Taking into account that in a case of a word-level expression the value of a given
Boolean function are on a specific bit, it is necessary to use a masking operator, which
allow us to select an arbitrary bit. The masking operator selecting the i-th bit from an
m-output function f is denoted by Ξ im {f }.
The method of describing an n-variable elementary function (such as AND and OR)
by a LAR is presented in [7]. Now we shortly recall this result.
Theorem 1 (re-formulated from [7]). The n-variable elementary functions can be represented as follows:
(i)

n-variable AND function AN D =

n
i=1

xσi i by the LAR

LARAN D = 2j−1 − n +

n

(σi + (−1)σi xi ),

(2)

i=1

generated by an m-output function, in which the function f is in the most left
position indicated by the masking operator Ξ m
m {LARAN D };
n
(ii) n-variable OR function OR = i=1 xσi i by the LAR
LAROR = 2j−1 − 1 +

n

(σi + (−1)σi xi )

(3)

i=1

generated by an m-output function, in which the function f is the most significant
bit, that is indicated by the masking operator Ξ m
m {LAROR }, where
j = log2 n + 1,

(4)

and
xσi i =

xi if σi = 0,
xi if σi = 1.

The proof of the Theorem is given in [7].

(5)

Modelling of Complex Systems Given as a Mealy Machine

2.3

761

Linear Decision Diagrams

Our goal is to represent a given sequential digital circuit by a set of two LBMDs. In
Decision Diagrams a function is expanded with respect to one splitting variable x. As a
result of this expansion there are two subfunctions. For a switching function f , fx and fx
denote the positive and negative cofactor of f with respect to variable x, correspondingly.
The subfunction fx is obtained by substituting a constant 1 to x, whereas fx is obtained
by substituting a constant 0 to x.
In our method, we use masking operators and decision diagrams with arithmetic
positive Davio (pDA ) decomposition f = fx + x(fx − fx ). The method of deriving this
equation is presented, for example, in [1].
If arithmetic positive Davio is applied for decomposition of an LAR, it splits the
function into two subfunctions fx and (fx − fx ). It is noticeable, that both of them does
not depend on the splitting variable x and the subfunction (fx − fx ) is always constant
and equal to the coefficient of the variable x in LAR.

3

Strategy

Lemma 2 An arbitrary characteristic function can be represented by a double LBMD.
The proof is based on the following two statements:
– Let us have a characteristic function given by a cube table. Each cube in the cube
αl
αi
1
table corresponding to t-th, t ∈ (1, . . . , p), product yt = xα
1 ∧ . . . ∧ xl , xi = xi
αi
when αi = 0 and xi = xi when α1 = 1, l ∈ (1, . . . , n), can be represented by
an l-node LBMD AX , and p products y1 , . . . , yp with no more than l literals each,
can be represented by the same LBMD,
– Any set of cubes in the cube table can be treated as a SOP f = y1 ∨ . . . ∨ yp of p
product terms can be represented by an LBMD B Y , and an r-output function with
no more than p products each can be represented by the same LBMD.
Let us consider a characteristic functions. Their outputs describe a SOP with p
products with no more than n literals. We extend each product yt (AND function) to an
nt -output function in order to generate LAR(yt ). The LARs for other products yt form
the weighed arithmetic sum:
AX = 2J1 LAR(y1 ) + . . . + 2Jp LAR(yp ),

(6)

and, substituting the LAR(yt ) (1) into the above equation yields the LAR
AX = T W0 + T W1 x1 + . . . + T Wn xn ,

(7)

where the coefficients T Wi , T W0 are formed as below
T Wi = ai,1 2J1 + . . . + ai,p 2Jp ,
T W0 = a0,1 2

J1

(8)

Jp

+ . . . + a0,p 2 ,

for ai,t ∈ {0, +1, −1} and positive integer numbers a0,t ;
J1 = j0 = 0,
Jt = j0 + . . . + jt−1 ,
and (equation (4))

(9)

762

P. Dziurzanski

jt = log2 nt + 1,
nt is the number of outputs in the function obtained by extending of yt . So, AND
functions of the first level of the SOP are described by the LAR (7), and, so, by an
LBMD AX .
Then, characteristic functions χδ and χλ form a SOP f = y1 ∨ . . . ∨ yp , i.e. a pinput OR function. The output f can be extended to a multi-output function, in order to
generate LAR(f ). They are combined to the LAR:
B Y = LAR(f ),
that is equal to
B Y = BW0 + BW1 y1 + . . . + BWp yp ,

(10)

where the coefficients JBj are formed using equations (9) and
BWt = bt,1 2JB1 + . . . + bt,r 2JBr

(11)

BW0 = b0,1 2JB1 + . . . + b0,p 2JBr .
So, all OR functions (the second level of the SOPs) are described by (10), and so we can
generate the LBMD B Y .
Example 2 (Continuation of Example 1) Since both of the characteristic functions χδ
and χλ of the function f include 9 products, there is a need to extend these products yt
to an nt -output function in order to generate LAR(yt ), where t = 1, . . . , 9.
As the t = 1st product y1 = x1 x2 s1 s+
1 includes n1 = 4 variables, parameter j1 = 3
(equation (4)). Accordingly to equations (9) and (6), J1 = 0 and thus weight of LAR(y1 )
equals 2J1 = 1. Taking into account equation (2), LAR(y1 ) = 2 + x1 + x2 − s1 − s+
1.
The remaining LARs of the AX tree and their masking operators are presented in
Table 1. As a result, LAR for all the cubes is equal to
+
3
AX = 20 (2 + x1 + x2 − s1 − s+
1 ) + 2 (4 − x2 − s1 − s1 )
+
6
9
+ 2 (2 − x1 + x2 − s1 + s1 ) + 2 (2 − x1 + s1 + s+
1)
+

+ 212 (x1 + x2 + s1 + s1 ) + 215 (2 + x1 + x2 − s1 − y)
+ 218 (4 − x2 − s1 − y) + 221 (2 − x1 + s1 + y)
+ 224 (1 + x1 + x2 + s1 − y).
In the first level, there are nine products yt . The characteristic functions χδ and
χλ include y1 to y5 and y6 to y9 , respectively. Consequently, in the second level the
characteristic function χδ can be described as χδ = y1 ∨ y2 ∨ . . . ∨ y5 and similarly
χλ as χλ = y6 ∨ y7 ∨ . . . ∨ y9 .
Since χδ includes n1 = 5 literals, j1 = 4 (equations (4) and (3)), the second LAR is
equal to
B Y = 20 (7 + y1 + y2 + y3 + y4 + y5 ) + 24 (7 + y6 + y7 + y8 + y9 ).

Modelling of Complex Systems Given as a Mealy Machine

763

Table 1. LARs and their parameters built from the cube table of the function f (Example 1)
t
1
2
3
4
5
6
7
8
9

yt
x1 x2 s1 s+
1
x2 s1 s+
1
x1 x2 s1 s+
1
x1 s1 s+
1
+
x1 x2 s1 s1
x1 x2 s1 y
x2 s1 y
x1 s1 y
x1 x2 s1 y

jt
3
3
3
3
3
3
3
3
3

Jt
0
3
6
9
12
15
18
21
24

LAR(yt )
Masking operator
2 + x1 + x2 − s1 − s+
Ξ 327 {AX }
1
+
4 − x2 − s1 − s1
Ξ 627 {AX }
+
2 − x1 + x2 − s1 + s1
Ξ 927 {AX }
X
2 − x1 + s1 + s+
Ξ 12
27 {A }
1
+
X
Ξ 15
x1 + x2 + s1 + s1
27 {A }
X
2 + x1 + x2 − s1 − y
Ξ 18
{A
}
27
X
4 − x2 − s1 − y
Ξ 21
{A
}
27
X
2 − x1 + s1 + y
Ξ 24
27 {A }
X
1 + x1 + x2 + s1 − y
Ξ 27
27 {A }

Finally, characteristics functions can be extracted with the masking operators χdelta =
Ξ 47 {B Y } and χlambda = Ξ 77 {B Y }.
So, both of LBMDs AX and B Y representing the function f include 14 non-terminal
nodes and 16 terminal nodes. These LBMDs are depicted in Fig. 2.

BY

AX

pDA

pDA

0
pDA

0

x2

pDA

0

s1

pDA

s1+

0
pDA

0

y

0

x1

20-26-29+212+215-221+224

0
0
y4

0
pDA

-20-23+26+29+212

0

y5

pDA

-215-218+221-224

0

y6

pDA

0

y7

pDA

0

y8

pDA

7.20+7.24

y9

y3

pDA

-20-23-26+29+212-215-218+221+224

0

y2

pDA

20-23+26+215-218+224

2.20+3.23+2.26+2.29+1.212
+2.215+4.218+2.221+1.224

y1

pDA

20

20

24

24

24

24

Fig. 2. Double LBMD of the function f (Example 2)

20

20

20

764

4

P. Dziurzanski

Experiments

The software implementation of the described above method were done in C++. In
order to test the approach with standard benchmark library, we use FSMs given in KISS
format from the LGSynth93 set. Using SIS [9], we performed a state assignment and
conversion into 2-level SOP format. Each SOP, treated as the cube table of characteristic
function, was then used for building a typical ROBDD using CUDD from VIS 1.3 [10]
and LBMD, as proposed in this paper. Since variable ordering influences on the size of
ROBDD, we used a well-known dynamic reordering method (sifting) to obtain ROBDDs
of a reasonable size.
In Table 2 we give the number of nodes to represent some benchmarks by ROBDDs
and LBMDs. The first two columns contain the FSM name and the number of primary
inputs/outputs (I/O) and states (S). Next two columns show the number of nodes for
ROBDD technique, and next columns contain the number of nodes for our LBMDs
accordingly to the method described in this paper. The last two columns also contain the
number of nodes for ROBBs and LBMDs, but these figures are taken from our previous
work [4], where the two characteristic functions χδ and χλ were united into one.
In this experiment we use JEDI from SIS to perform state assignment, which makes an
assignment in natural binary code. This assignment is useful in a case of implementation
into CPLD structures. From the table it follows, that the proposed approach reduces the
number of nodes by 96 per cent in comparison with traditional ROBDD technique: a
total number of nodes in ROBDD equals 38246, whereas in LBMDS it is equal to 1485.
Moreover, a separation of two characteristic functions χδ and χλ even slightly improved
the result which we obtained in our previous work. However, benefits of this separation
are mainly visible during the task of software simulation of a Mealy machine.
Table 2. Comparison of number of nodes of ROBDDs and LBMDs for LGSynth93 benchmarks

TEST
s1488
s1494
s208
s27
s298
s386
s1
s832
s820
s420
s510
Total:

Nodes in ([4])
Nodes in
I/O/S ROBDD LBMD ROBDD LBMD
8/19/ 48
4101
164
3902
189
8/19/ 48
3907
171
3704
184
11/2/ 18
603
49
551
55
4/1/ 6
135
26
113
25
3/6/ 218
11795
430
11713
417
7/7/ 13
678
61
545
57
18/19/ 20
3321
142
3181
107
18/19/ 25
3031
128
2895
152
18/19/ 25
5008
138
5260
152
19/2/ 18
640
55
587
61
19/7/ 47
5027
121
4855
104
38246
1485
37306
1503

Modelling of Complex Systems Given as a Mealy Machine

5

765

Conclusion

We showed that characteristic table of an arbitrary Mealy machine can be transformed
to a double Linear Binary Moment Diagrams. In comparison with popular method of
representing characteristic function by Reduced Ordered Decision Diagrams, we obtain
diagrams with much less nodes (in our experiments we obtained a reduction equal to
96%).
Acknowledgment. The author would like to thank Prof. V.P. Shmerko and Prof. S.N.
Yanushkevich for helping and making valuable comments.

References
1. R. Bryant, Y. Chen, Verification of Arithmetic Functions Using Binary Moment Diagrams,
Proc. Design Automation Conf., 1995, pp. 535–541
2. J.R. Burch, E.M. Clarke, K. McMillan, Symbolic Model Checking, Fifth Annual IEEE Symposium on Logic in Computer Science, 1990, pp. 428–439
3. E.M. Clarke, E.A. Emerson, A.P. Sistla, Automatic verification of finite-state concurrent
systems using temporal logic specifications, ACM Transactions on Programming Languages
8,2, 1986, pp. 244–263.
4. P. Dziurzanski , Representation of Finite State Machines with Linear Decision Diagrams, Int.
Conference on Signals and Electronic Systems (ICSES’2002), Swierardow Zdroj, Poland,
2002, pp. 161–168.
5. G.D. Hachtel, F. Somenzi, Ligic Synthesis and Verification Algorithms, Kluwer Academic
Publisher, 1996
6. J. E. Hopcroft, J. D. Ullman, Introduction to Automata Theory, Languages, and Computation,
Addison-Wesley Publishing Company, 1979
7. V. Malyugin, Realization of Boolean Function’s Corteges by Means of Linear Arithmetical
Polynomial, Automation and Remote Control (USA), vol.45, no. 2, Pt. 1, 1984, pp. 239-245
8. R. Bryant, Graph - based algorithm for Boolean function manipulation, IEEE Trans. on
Computers, 1986, vol. C-35, no. 8, pp. 667-691
9. SIS and Release 1.2, Logic synthesis benchmarks,
UC Berkeley Soft. Distr, http:/www.cbl.ncsu.edu/www/, 1994.
10. VIS: A system for Verification and Synthesis, Proceedings of the 8th Internationa conference
on Computer-Aided Verification, Springer Lecture Notes in Computer Science, # 1102, Edited
by R. Alur and T. Henziger, NJ, July 1996, pp. 428-432

