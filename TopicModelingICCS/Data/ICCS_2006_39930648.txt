Performance Analysis of the Cache
Conscious-Generalized Search Tree
Won-Sik Kim1 , Woong-Kee Loh2 , and Wook-Shin Han1,
1

Department of Computer Engineering
Kyungpook National University, Korea
wskim@www-db.knu.ac.kr, wshan@knu.ac.kr
2
Department of Computer Science &
Advanced Information Technology Research Center (AITrc)
Korea Advanced Institute of Science and Technology (KAIST), Korea
woong@mozart.kaist.ac.kr

Abstract. Recently, a main memory index structure called the cache
conscious-generalized search tree (CC-GiST) was proposed. The CCGiST is such a novel index structure that it can be used for implementing
all the existing cache conscious trees with the minimal eﬀorts. It incorporates the pointer compression and the key compression techniques,
which were adopted by the existing cache conscious trees to reduce the
cache misses, in a single framework. In this paper, we formally analyze
the performance of the CC-GiST. We compare the performance of the
CC-GiST with the existing cache conscious trees. The result shows that
the CC-GiST has the negligible overhead for supporting all the existing
cache conscious trees in a single framework, and the performance of the
tree is almost unaﬀected.
Keywords: cache conscious tree, generalized search tree, pointer compression, key compression.

1

Introduction

According to the advance of technologies, the speed gap between CPU and main
memory is getting larger every year [5, 10]. Due to the speed gap, it was perceived
important to make the most use of the cache residing between CPU and main
memory, and there have been a lot of research eﬀorts on this issue [1, 3, 4, 5, 6].
Among those is the research on cache conscious trees for reducing the cost for
accessing main memory indexes [2, 8, 10]. Cache conscious trees were designed to
cause as few cache misses as possible based on the characteristics of the cache.
The most widely known cache conscious trees are the CSB+ -tree [10], the pkBtree [2], and the CR-tree [8].
Recently, we proposed the cache conscious-generalized search tree (CC-GiST)
[9], which is an extension of the disk based GiST [7]. The CC-GiST can be used
for implementing all the existing cache conscious trees with the minimal eﬀorts.
Corresponding author.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 648–655, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Performance Analysis of the CC-GiST

649

It incorporates the pointer compression and the key compression techniques,
which were adopted by the existing cache conscious trees to reduce the cache
misses, in a single framework. In this paper, we provide the formal analysis on
the performance of the CC-GiST. We compare the performance of the CC-GiST
with the existing cache conscious trees. As the result, the CC-GiST has the
negligible overhead for supporting all the existing cache conscious trees in a
single framework, and the performance of the tree is almost unaﬀected.
The rest of this paper consists of the following. In Section 2, we brieﬂy explain
on the existing cache conscious trees and the CC-GiST. In Section 3, we analyze
the performance of the CC-GiST. Finally, we conclude this paper in Section 4.

2

Related Work

In this section, we analyze the existing cache conscious trees and derive the
pointer compression and the key compression techniques used by the trees. We
also brieﬂy explain the CC-GiST [9].
2.1

Cache Conscious Trees

The cache conscious trees use the techniques for reducing the memory size of the
indexes and for increasing the blocking factors of the nodes in the indexes. We call
the techniques as compressions in this paper. In general, when the blocking factor
gets larger, since it is more probable that the related data are contained in the
same cacheline, it can reduce the cache misses 1 . We can group the existing cache
conscious trees into two categories according to their compression techniques: (1)
those based on pointer compression and (2) those based on key compression. The
cache conscious trees based on pointer compression remove the subset of pointers
to child nodes and thus increase the blocking factors in the internal nodes. The
examples are the Cache Sensitive B+ -tree (CSB+ -tree) [10] and the Segmented
CSB+ -tree [10]. The cache conscious trees based on key compression store the
keys of shorter sizes and thus increase the blocking factors in the internal and
the leaf nodes. The examples are the Partial Key B-tree (pkB-tree) [2] and the
Cache Conscious R-tree (CR-tree) [8].
Figure 1 shows an example of the CSB+ -tree. All the child nodes of an internal
node are stored in a node group, which is represented by a dashed rectangle in
the ﬁgure, and the internal node manages only one pointer to the ﬁrst child node
in the node group, which is represented by a solid arrow in the ﬁgure. Since the
child nodes in a node group are stored physically consecutively in main memory,
the pointer to any child node in the node group can be easily found even by
managing only one pointer. In this manner, the performance of the tree can be
enhanced by reducing the number of pointers and thus increasing the blocking
factor.
1

The data in main memory are loaded into cache in the unit of cacheline. The usual
size a cacheline is 64 ∼ 128 bytes, and the size of a node in cache conscious trees is
the integer multiple of the size of cacheline.

650

W.-S. Kim, W.-K. Loh, and W.-S. Han

23

10

31

4

3

4

16

6

10

13

14

20

17

26

20

21

23

25

26

34

28

31

32

34

37

40

Fig. 1. An Example of the CSB+ -Tree

3

1

2

3

4

5

5

6

7

8

7

13

9

11

9

10

: base key

15

11

12

13

14

17

15

16

17

18

Fig. 2. An Example of the pkB-Tree

The CSB+ -tree has a problem of increased update cost. When there happens a
split or a merge of nodes while inserting or deleting data in the tree, to maintain
the child nodes in a node group stored physically consecutively even after the
split or the merge, all the nodes stored in the node group should be copied. The
Segmented CSB+ -tree is a variant of the CSB+ -tree to tackle the problem, and
stores the child nodes of an internal node in one or more segments rather than
only one node group to reduce the copy cost. Only the child nodes in the same
segment are stored physically consecutively, and the internal node manages only
the pointers to the ﬁrst nodes of the segments. The CSB+ -tree in Figure 1 can be
regarded as a Segmented CSB+ -tree that has only one segment in each internal
node.
The pkB-tree, which is based on key compression, manages only the diﬀerent
part between adjacent keys in a node [2]. The tree stores only the short part
of keys rather than the long whole keys, which results in the increasing of the
blocking factor of the node. Figure 2 shows an example of the pkB-tree. The
solid arrow represents the pointer to a child node, and the dashed arrow represents the base key that is used for key compression. The pkB-tree performs key
compression by managing only the diﬀerent part between the base key and the
key to be compressed.

Performance Analysis of the CC-GiST
R0

651

(7000,8000)
(6,15)
R1

(1,10)

(15,9)
R3
(7,6)
R2

(2,2)
(8,1)
(3000,4000)

Fig. 3. An Example of QRMBRs in the CR-Tree

The CR-tree, which is also based on key compression, manages the Quantized
Relative Representation of MBR (QRMBR) rather than the actual MBR [8].
The QRMBR is generated by quantizing the relative coordinates of the actual
MBR to the parent node’s MBR. Since the coordinates of the QRMBR have
smaller size than those of the actual MBR, the CR-tree stores more entries in
a node. Figure 3 shows an example of QRMBRs in the CR-tree. The outermost
rectangle R0 is the parent node’s MBR, and the inner rectangles R1, R2, and R3
are child nodes’ MBRs. The thick rectangles surrounding the child nodes’ MBRs
are their QRMBRs generated relatively to R0. Since the relative coordinates
are quantized in 16 units, which require only four bits, the space to store the
coordinates can be reduced.
2.2

Cache Conscious-Generalized Search Tree (CC-GiST)

The CC-GiST is a balanced search tree with the blocking factor between kM
2
≤ k ≤ 12 ), and M is the maximum
and M , where k is the minimum ﬁll factor ( M
blocking factor in the tree. An exception is the root node that has the blocking
factor between 2 and M .
Based on the pointer compression technique, child nodes are stored in segments, and parent nodes manage only the pointers to the segments in the CCGiST. A segment contains one or more adjacent child nodes stored physically
consecutively in main memory. The CC-GiST supports both the ﬁxed- and the
variable-size segments. Whether to use the ﬁxed- or the variable-size segment is
determined by the ﬂag IsFixedSizeSegment. The CC-GiST manages the variable
MaxNumOfNodesInSegment representing the maximum number of child nodes
contained in a segment.
An internal node in the CC-GiST manages ListOfSegmentPointers, a list of
pointers to the segments of the node. It also manages ListOfNumOfChildNodesInSegment, a list of the numbers of the child nodes in each segment of the node.

652

W.-S. Kim, W.-K. Loh, and W.-S. Han

A pointer to a child node of an internal node in the CC-GiST, which is represented as NodePointer = (SegmentPointer, NodeOrderInSegment), consists of a
pointer to the segment containing the child node and the order of the child node
in the segment (NodeOrderInSegment ≥ 0). The NodePointer is used to specify a
child node of an internal node, and is not actually stored in the CC-GiST.
Based on the key compression technique, the CC-GiST manages the ﬂag StoreBaseKeyInNode to indicate whether to contain the space to store the base key in
a node as in the CR-tree. If the ﬂag is set to TRUE, every node in the CC-GiST
contains the space for the base key. The CC-GiST provides an object AncestorKeyStack to store the base keys from the ancestor nodes on the search path
used when compressing and decompressing the keys. The AncestorKeyStack is
temporarily used while searching, insertion, and deletion, and is not actually
stored in the CC-GiST. A key in a node in the CC-GiST is represented by a
predicate as in the GiST. A key predicate has one or more free variables and
becomes TRUE when the variables are instantiated with the values of any tuple
reachable from the pointer associated with the predicate. A node in the CC-GiST
manages a list of key predicates.

3

Performance Analysis

In this section, we analyze the performance of the CC-GiST [9]. Given the node
size, the performance of the cache conscious trees is inversely proportional to
the average number of entries in a node. The less the number of entries is, the
more probably the cache misses are incurred, which causes the increase of main
memory accesses and thus the performance degradation of the cache conscious
tress. Therefore, the existing cache conscious trees tried to increase the number
of entries in a node using the pointer and the key compression techniques. In
this section, we compare the number of entries in an internal node in the cache
conscious trees implemented using the CC-GiST with those in the existing cache
conscious trees.
Figure 4 shows the structure of an internal node in the CC-GiST. The internal
node consists of a header, a base key, a key list, a list of the numbers of child nodes
in segments, and a list of segment pointers. The header contains the number of
keys (M ), the number of segments (N ), and a few ﬂags. The base key can be
excluded in the node according to the cache conscious tree implemented using
the CC-GiST. In the ﬁgure, the dashed arrows indicate the directions of inserting
new keys and segments.

Fig. 4. Structure of an Internal Node in the CC-GiST

Performance Analysis of the CC-GiST

653

The number of entries in an internal node in the CC-GiST should be computed
according to whether to perform the pointer compression or not. When the
pointer compression is performed (M > N ), the number of entries is as the
following:
NodeSize −(HeaderSize +BaseKeySize +SegNodesListSize +SegPtrListSize)
, (1)
KeySize
where SegNodesListSize is the size of the list of numbers of child nodes in segments, and SegPtrListSize is the size of the list of segment pointers. Without
pointer compression, since each of the keys is associated with a segment pointer
(M = N ), the number of entries is as the following:
NodeSize − (HeaderSize + BaseKeySize)
,
KeySize + SegNodesSize + SegPtrSize

(2)

where SegNodesSize is the size for storing the number of child nodes in a segment,
and SegPtrSize is the size of a segment pointer.
The Lemmas 1, 2, and 3 show the ratios computed by dividing the numbers of
entries in the internal nodes in the cache conscious trees implemented using the
CC-GiST by those in the existing cache conscious trees: each for the CSB+ -tree
[10], the pkB-tree [2], and the CR-tree [8]. In the Lemmas, it is assumed that the
header size HeaderSize is four bytes, the size of a segment pointer SegPtrSize
is four bytes, and the size for storing the number of child nodes in a segment
SegNodesSize is one byte. For the proofs for the Lemmas, please refer to [9].
Lemma 1. For any key size, the average ratio computed by dividing the number
of entries in an internal node in the existing CSB+ -tree by that in the CSB+ -tree
implemented using the CC-GiST is as follows:
1+

3
.
NodeSize − 9

(3)

Lemma 2. The average ratio computed by dividing the number of entries in
an internal node in the existing pkB-tree by that in the pkB-tree implemented
using the CC-GiST is as follows:
1−

2
NodeSize − 4

·

14
.
13

(4)

Lemma 3. The average ratio computed by dividing the number of entries in an
internal node in the existing CR-tree by that in the CR-tree implemented using
the CC-GiST is as follows:
1+

2
NodeSize − 20

·

7
.
6

(5)

654

W.-S. Kim, W.-K. Loh, and W.-S. Han

Figure 5 shows the ratios of the numbers of entries for each of the cache
conscious trees given in Lemmas 1, 2, and 3 as we vary the node size. The node
sizes in the ﬁgure are determined as the multiples of minimal cacheline size (64
bytes). As shown in the ﬁgure, the numbers of entries in the internal nodes in
the cache conscious trees implemented using the CC-GiST are not increased
much compared with those in the existing cache conscious trees. Especially, for
the CSB+ -tree and the pkB-tree implemented using the CC-GiST, the ratios are
increased no more than 7% for all the node sizes. The CR-tree implemented using
the CC-GiST has the relatively larger ratios than the other trees. However, if we
don’t manage the number of child nodes in a segment, whose size is SegNodesSize
in Eq. (2), the ratio will be dropped.

1.25

se 1.20
ir
ntE
fo
sr 1.15
eb
m
uN
fo 1.10
iot
aR
1.05

CSB+-tree
pkB-tree
CR-tree

1.00
64

128

256

512

1024

Node Size

Fig. 5. Ratios of Numbers of Entries

As the result, the CC-GiST has the negligible overhead for supporting all the
existing cache conscious trees in a single framework, and the performance of the
tree is almost unaﬀected. We analyzed the ratios of the numbers of entries only
for the internal nodes in this section; however, since the leaf nodes of the CCGiST have almost the same structures as those of the existing cache conscious
trees, we expect to have almost the same performance for the leaf nodes.

4

Conclusions

In this paper, we provided the formal analysis on the performance of the CCGiST. As the result, the CC-GiST has the negligible overhead for supporting all
the existing cache conscious trees in a single framework, and the performance
of the tree is almost unaﬀected. The CC-GiST can be used not only to easily
implement the existing cache conscious trees but also to develop a new tree
integrating all the advantages of the existing cache conscious trees.

Performance Analysis of the CC-GiST

655

Acknowledgement
This work was supported by Korea Research Foundation Grant (KRF-2003-003D00347).

References
1. A. Ailamaki, D. J. DeWitt, M. D. Hill, and D. A. Wood, “DBMS on a Modern
Processor: Where Does Time Go?,” In Proc. Int’l Conf. Very Large Databases, pp.
54-65, Edinburgh, Scotland, UK, Sept. 1999.
2. P. Bohannon, P. Mcilroy, and R. Rastogi, “Main-Memory Index Structures with
Fixed-Size Partial Keys,” In Proc. ACM SIGMOD/PODS Int’l Conf. Management
of Data, pp. 163-174, Santa Barbara, California, May 2001.
3. P. A. Boncz et al., “Database Architecture Optimized for the New Bottleneck:
Memory Access,” In Proc. Int’l Conf. Very Large Databases, pp. 54-65, Edinburgh,
Scotland, UK, Sept. 1999.
4. B. Calder, C. Krintz, S. John, and T. Austin, “Cache-Consious Data Placement,”
In Proc. 8th Conf. Architectural Support for Programming Languages and Operating
Systems (ASPLOS), pp. 139-149, Oct. 1998.
5. T. M. Chilimbi, J. R. Larus, and M. D. Hill, Improving Pointer Based Codes
through Cache-Conscious Data Placement, Technical Report, Computer Science
Department, University of Wisconsin-Madison, 1998.
6. T. M. Chilimbi, J. R. Larus, and M. D. Hill, “Making Pointer Based Data Structures Cache Conscious,” IEEE Computer , Vol. 33, No. 12, pp. 67-74, Dec. 2000.
7. J. M. Hellerstein, J. F. Naughton, and A. Pfeﬀer, “Generalized Search Trees for
Database Systems,” In Proc. Int’l Conf. Very Large Data Bases, pp. 562-573,
Zurich, Switzerland, Sept. 1995.
8. K. Kim, S. K. Cha, and K. Kwon, “Optimizing Multidimensional Index Trees for
Main Memory Access,” In Proc. ACM SIGMOD/PODS Int’l Conf. Management
of Data, pp. 139-150, Santa Barbara, California, May 2001.
9. W.-S. Kim, W.-K. Loh, and W.-S. Han, CC-GiST: Cache ConsciousGeneralized Search Tree, Technical Report, Department of Computer
Engineering, Kyungpook National University, 2006 (Also available at
http://www-db.knu.ac.kr/~wshan/cc-gist.pdf).
10. J. Rao and K. A. Ross, “Making B+ -Trees Cache Conscious in Main Memory,” In
Proc. ACM-SIGMOD Int’l Conf. Management of Data, pp. 475-486, Dallas, Texas,
May 2000.

