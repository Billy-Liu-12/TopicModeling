Procedia Computer Science
Volume 51, 2015, Pages 1423‚Äì1432
ICCS 2015 International Conference On Computational Science

An Empirical Evaluation of a Programming Model for
Context-Dependent Real-time Streaming Applications
Xuan Khanh Do1 , Stephane Louise1 , and Albert Cohen2
1

CEA, LIST, PC172, 91191 Gif-sur-Yvette Cedex, France
stephane.louise@cea.fr, XuanKhanh.do@cea.fr
2
Inria, Parkas Team, 24 rue d‚ÄôUlm, 75005 Paris, France
albert.cohen@inria.fr

Abstract
We present a Ô¨Årst evaluation of a Programming Model for real-time streaming applications on
high performance embedded multi- and many-core systems. Realistic streaming applications are
highly dependent on the execution context (usually of physical world), past learned strategies,
and often real-time constraints. The proposed Programming Model encompasses both realtime requirements, determinism of execution and context dependency. It is an extension of
the well-known Cyclo-Static DataÔ¨Çow (CSDF), for its desirable properties (determinism and
composability), with two new important data-Ô¨Çow Ô¨Ålters: Select-duplicate, and Transaction
which retain the main properties of CSDF graphs and also provide useful features to implement
real-time computational embedded applications. We evaluate the relevance of our programming
model thanks to several real-life case-studies and demonstrate that our approach overcomes a
range of limitations that use to be associated with CSDF models.
Keywords: Parallelism, Real-time, Model of Computation, Many-core, Data-Ô¨Çow, Redundancy, Safety

1

Introduction

The emergence of chip multiprocessor architectures integrating hundreds or thousands of processing units on a single chip pushes for profound changes in the expression of scalable parallelism up to millions of concurrent tasks and its automatic exploitation on complex, often
distributed memory hierarchies. It is generally accepted that such many-core processors cannot
be eÔ¨Éciently exploited without a careful selection of scalable algorithms and the introduction of
new programming models. But programmers currently lack a clear path to navigate the landscape of many-core programming models, and programming tools are unfortunately lagging
behind the fast paced architectural evolutions. Data-Ô¨Çow programming address some of these
issues, meeting the requirements in terms of scalable task parallelism, functional determinism,
and temporal and spatial data reuse in these systems. Unfortunately, these streaming languages
are often too static to meet the needs of emerging embedded applications, such as context- and
Selection and peer-review under responsibility of the ScientiÔ¨Åc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.332

1423

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

Do,Louise and Cohen

data-dependent dynamic adaptation. In addition, emergent applications in embedded systems
tend to combine computational parts with real-time constraints. Another tendency is the apparition of online services to complement the base functionalities. Future embedded systems
must combine more Ô¨Çexible and more open deÔ¨Ånitions of systems (including potentially cloud
computing), which means runtime adaptation of the system to a changing environment. One
challenge, in this context, is any loss of connectivity which can impact parts of its functionalities, but must sustain the core functioning. Another is an increasing requirement for safety and
security, even for mass market applications [8]. We must Ô¨Ånd a way to combine the parallelism
management of data-Ô¨Çow principles and the reliability of real-time systems, and a common base
to deÔ¨Åne such a Programming Model. In this paper, we are looking at the evaluation of a previously deÔ¨Åned Model of Computation (MoC) which extends the CSDF-based usual MoC with
2 important data-Ô¨Ålters: Select-duplicate and Transaction. CSDF graphs are directed graphs
where a set of nodes referred to as computation actors (i.e. Ô¨Ålters, agents in modern data-Ô¨Çow
languages) are connected by a set of edges which are communication FIFO channels. By combining the 2 new data-Ô¨Ålters with CSDF graphs, in valid combinations that are intuitively easy
to Ô¨Ågure out and that can be checked automatically by a compiler, we demonstrated that we
retain not only the good and desirable properties of CSDF graphs but also overcome a whole
set of limitations that came with CSDF models and provide useful features for usual real-time
and cyber-physical systems with computational requirements. To illustrate the impact of the
new Programming Model on new streaming applications, we present the following motivational
example.

Motivational example
Our example to study is the case of satellite positioning thanks to data-fusion. The concept of data-fusion

	

is to use several sources from diÔ¨Äerent inputs to infer
a value that matches all the relevant inputs. A strong


constraint we want to impose is resilience to a failure
	

of a part of the input sources but also to be able to use



them again easily when they become relevant again.












Potentially, relevant sources for satellite1 localiza"
tion, as can be seen in Figure 1, are the following: (1)
2 GPS units (base for localization, but may be not

	
	
	
	
	
	
	!

always available), (2) Captors (e.g. accelerometers,
pressure/temperature sensors) and data from satellite
(speed, angle of motors), with an interpolation of posi
tion (e.g. altitude from pressure) and redundancy, (3)
A local map regularly updated from an online-service,
Figure 1: Graph of the Satellite appli(4) Camera capture data processing (planet trajectory
cation with diÔ¨Äerent sources of localor kind of topography, evaluation with regards to local
ization. At the end of the deadline, the
map data) with higher compute time, and less accubest information is chosen, according to
racy, and obviously more power consumption. The
an order setup by the programmer.
process for data-fusion and localization of the satellite by using the 5 considered sources must take into
account the fact that most of the sources are sporadic and may not be available each time a
decision must be made. Such process is not available with usual CSDF derivatives. This use
1 This

1424

example is based on a real-life application of a low-cost ‚Äúsatellite‚Äù attached to a weather balloon.

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

Do,Louise and Cohen

case illustrates the needs of creating a MoC whith the interesting properties of CSDF (execution determinism, time boundedness and execution in bounded memory) without its limitation.
In this context, we have deÔ¨Åned a new MoC by extending the CSDF-based usual MoC with 2
important data-Ô¨Ålters: Select-duplicate, and Transaction to treat the case of uncertain arrival
of data. A more detailed description of these data-Ô¨Ålters can be found in section 3 and in [8].
The remainder of this paper is organized as follows: Section 2 gives an overview of the
related work, section 3 presents the extension of our Model of Computation, section 4 presents
real-life use cases before concluding in section 5.

2

Related work

The principal motivation for research into stream programming or data-Ô¨Çow models comes from
the limitations of the von-Neumann architecture to exploit massive amounts of Ô¨Åne grained
parallelism. Early data-Ô¨Çow architectures Ô¨Åght the von-Neumann bottlenecks by replacing the
program counter with a data-driven execution model (execution of instructions as soon as there
is enough data) [13] and its interesting properties (decidability, composability, predictability,
timing constraints compatible, and memory boundedness for well formed applications). That is
important reasons why we built our Programming Model on CSDF. More recent data-Ô¨Çow architectures rely on the same principles but execute sequences of instructions, or data-Ô¨Çow threads
in parallel, instead of single instructions. While many data-Ô¨Çow programming languages (e.g.
StreamIt [11] and Œ£C [6]) have been proposed [7] to match the needs of such architectures,
none of these models provides enough information for real-times constraints and their enforcement. This makes classical data-Ô¨Çow languages not well suited for embedded applications, and
of course for real-time and cyber-physical ones.
The case of real-time constraints on many-core systems was discussed in several models.
We can cite particularly Scenario-Aware Data-Ô¨Çow models whose aims are close to ours. In
the approach discussed in [5], scenario-aware dataÔ¨Çows relies on a scenario driven model of the
application where several runtime scenario are projected to build a model of an application
which can guarantee time constraints. This is an engineering approach which should work
well when the number of possible scenarios are limited and manageable by a human. Our
approach is more generic as it provides a uniÔ¨Åed view of many-core systems, which is entirely
composable. It can provide several scenarios in parallel, whose composition is transparent for
the programmer (i.e.they can be checked and validated independently from one another, as the
composition does not change their execution). In [1], Arumi and Amatriam proposed Time
Triggered Synchronous Data Flow (TTSDF) which associates Time-Triggered (TT) periodic
schedule to the input nodes and output nodes of a Synchronous Data-Ô¨Çow (SDF) and derives
a periodic schedule for all the actors in the SDF graph. This approach partially solves the
problem of mixing real-time and high-performance computing, but it does not provide eÔ¨Écient
mechanisms to cope with failure in real-time systems contrary to our model.

3

Programming Model

In this section, we give an overview of the Model of Computation deÔ¨Åned in [8].
1425

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

3.1

Do,Louise and Cohen

Timed CSDF

The timed graph is a more accurate representation of the CSDF graph, that associates to each
sub-task of an actor a computation time and a communication overhead [4]. We consider the
Timed graph G = A, E, œâ, œï , where A is a set of actors, E ‚äÜ A √ó A is a set of communication
channels, œâ gives the worst-case computation time of each actor and œï is its communication
time according to a scheduling policy. The set of actors is denoted by A = {a1 , a2 , ..., an },
where each actor represents one function that transforms the input data streams into output
data streams. The communication channels carry streams of data and work as a FIFO queue
with unbounded capacity. An atomic piece of data carried out by a channel is called a token.
Each actor aj ‚àà A has an execution sequence of length œÑj , [fj (0), ¬∑ ¬∑ ¬∑ , fj (œÑj ‚àí 1)] which can be
understood as follows: The nth time that actor aj is Ô¨Åred, it executes the code of function fj (n
mod œÑj ) and each function is viewed as a sub-task of actor aj . As a consequence, production
and consumption are also sequences of length œÑj .
In a Timed graph, if an actor ai must be Ô¨Åred after date Ti and another aj at date Tj , then
it constraints the execution scheme of all the nodes between the two constrained nodes. The
constraints on the CSDF functions can be modeled by using the Timed Constrained Automata
(TCA) constraints, as explained in [8].

3.2

System agents for data management

Modern data-Ô¨Çow languages, based on SDF or CSDF (e.g. StreamIt [11] and Œ£C [6]) provides
an advanced compiler for streaming applications by performing stream-speciÔ¨Åc optimization,
which ensures programmability and eÔ¨Éciency on many-core processors. For example, the Œ£C
programming model builds networks of connected agents (Ô¨Ålters for StreamIt or actors in a
Timed CSDF). An agent is an autonomous entity, with its own address space and thread of
control. It has an interface describing a set of ports, their direction and the type of data
accepted; and a behavior speciÔ¨Åcation describing the behavior of the agent as a cyclic sequence
of transitions with consumption and production of speciÔ¨Åed amounts of data on the ports
listed in the transition. An application is deÔ¨Åned as a subgraph, which is a composition of
interconnected agents and it has also an interface and a behavior speciÔ¨Åcation. The contents
of the subgraph are entirely hidden and all connections and communications are done with its
interface. The directional connection of two ports creates a communication link, through which
data is exchanged in a FIFO order with non-blocking write and blocking read operations (the
link buÔ¨Äer is considered large enough).
These data-Ô¨Çow MoCs support also special Ô¨Ålters for data management only (system agents
in Œ£C). Such Ô¨Ålters do not modify the values they receive, but only route them or organize
them. This particular feature is very useful for optimization of process networks. Usual data
redistribution Ô¨Ålters include splitters (or split Ô¨Ålters), joiners (or join Ô¨Ålters) and duplicate
Ô¨Ålters [3], which are usually combined as split/join constructs or duplicate/join constructs.
Nonetheless, these data-Ô¨Ålters cannot resolve the case when no guarantee is provided on the
availability of a given dataset as input, or no guarantee can be given on the availability of a
computing resource for the process to be Ô¨Åred. An example of such a case is when a computation
(or a database query) is done on a remote location (e.g. the cloud) and the transmission of data
is dependent on the quality of the connection (no interference or loss of network connectivity,
bandwidth, latency, etc.), on the availability of a server to execute the request, and so on. . . In
such a case, one can not bound the time for a given data token to be available, and then,
cannot guarantee real-time constraints. Other studies cases and more detailed examples could
be found in [8].
1426

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

3.3

Do,Louise and Cohen

New data distribution Ô¨Ålters

Select-duplicate Ô¨Ålters As an ordinary duplicate Ô¨Ålter, the select-duplicate Ô¨Ålter has one
entry and n outputs (n is a maximum number which can be speciÔ¨Åed to enable automatic
sizing). At a given time any combination of the n outputs can be enabled. Nonetheless, if there
is a timing constraint on this Ô¨Ålter (either directly, or indirectly), then at least one output must
be enabled at any given time, and the enabled path will bear the timing constraints. Otherwise,
any select output will be treated as a sporadic path. In the latter case, the path connected
to the select output must be consistent with the other paths and present as interface a single
input channel and a single output channel, to connect on a transaction Ô¨Ålter. A parallel Ô¨Ålter
is required to enable the selected channels as required. A graphical representation is shown in
Figure 2.
1
2
3
4
5
6
7

8
9

agent SelectDuplicate<elt_type>(int N, int
k, clock C, time_interval reset)
{
interface
{
in<elt_type> input;
out<elt_type> output[N];
spec{ {input[k]; output[0][k];
output[1][k]; ... ;
output[N-1][k]} };
}
}

	








			

		

Figure 2: A Duplicate-Select box with an optional output for timer. SpeciÔ¨Åc keywords of the
Œ£C language are underlined.
Transaction Ô¨Ålters The transaction Ô¨Ålter implements an important action not available in
usual data-Ô¨Çow MoC, which can be useful in a wide set of use-cases: Speculation, Redundancy
with vote, Best-of at a given deadline, Select an active data-path among several, and so on.
Let us suppose we have several algorithms and several characteristics for data-paths. Only one
data-path is required to Ô¨Ånish before the deadline. The others can be much loosely deÔ¨Åned:
algorithms can be highly reÔ¨Åning, with uncertain execution times, and execution delays. When
the deadline comes, the transaction box choose the best result available at that time. An
example of ‚Äùbest-of at a given deadline‚Äù transaction could be seen in section 4.1, on the case
of edge-detections. Another way the same duplicate-transaction construct can be useful, is to
manage redundancy, a usual way to implement fault-tolerance. An example of redundancy
could be seen in the Satellite example in Figure 1.
By construction a transaction box has n inputs and one output with an optional time-out
input to trigger the transaction at a given deadline (or other time constraints). It can read on
the output channels of all data-paths without consuming the data tokens on the channels. This
behavior is required because the transaction box must take a decision only based on the values
of the data in the channels, or on the availability of the said values. Once the transaction is
done, only the chosen data token is written on the unique output channel and all the input
channels are atomically emptied. A graphic view is shown in Figure 3.

3.4

Implementation in Œ£C

We use Œ£C [6] to implement these new data distribution Ô¨Ålters as an extension of this language,
as can be seen in Figure 2 and 3. Select-duplicate and transaction Ô¨Ålter is implemented as
1427

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

1
2

3
4
5
6
7
8
9
10

/* Filter with n input and 1 outputs */
agent TransactionBox<elt_type>(int N,
transaction_type T, clock C,
time_interval deadline)
{
interface
{
in<elt_type> input[N];
out<elt_type> output;
spec{ {input[N]; output} };
}
}

Do,Louise and Cohen



	
	


	


Figure 3: Transaction box with an optional timer. Only one output is voted to pass after a
certain duration after acquisition. SpeciÔ¨Åc keywords of the Œ£C language are underlined.
system agents (e.g. Split, Join and Duplicate Ô¨Ålters). An important part of the programming
model is that the agent model is dealing with timing concepts: clocks, intervals, deadline, etc.
First, clocks are considered as complex structures with many parameters which may be set or
not, or used to constrain the acceptable physical clocks for a component. Time units (s, ms,
Œºs) can be used for numerical constants, they make writing clocks as simple as possible:
clock C = {.super= Ci, .period = 10ms, .phase=50ms}

Deadline of a transaction Ô¨Ålter is implemented as interval between the beginning of its corresponding select-duplicate and the Ô¨Åring of this transaction box. This interval is measured by
the number of ticks occurring periodically at each period of the clock.

4

Case studies

In this section, we study 2 applications from image processing as they convey both computation and time-constraint requirements, using the programming model deÔ¨Åned in section refsec:programming so that to test its interest.

4.1

Case-study on edge detection

Edge detection is one of the most signiÔ¨Åcant tasks in image processing systems. For the last few
decades a lot of researches has been done in this Ô¨Åeld. Various edge detection techniques are
proposed: Quick Mask, Sobel, Prewitt, Kirsch [9], Canny [2] or Canny with loop [10]. Gradient
based edge detectors like Prewitt and Sobel are relatively simple and easy to implement, but
are very sensitive to noise. The Canny algorithm is an optimal solution to problem of edge
detection which gives better detection specially in presence of noise, but it is time consuming
and require a lot of parameter setting. As can be seen in Figure 4, the execution time of Quick
Mask is the shorter and Canny is the longest (tested on a standard Intel Core i3@2.53GHz).
In an ideal world, a programmer would use the best algorithm and be done with it, but possible real-time constraints can mitigate this idyllic view. When dealing with timing constraint,
an average quality result at the right time is far better than an excellent result, later. The
Canny Ô¨Ålter may be the best algorithm for edge detections, but the execution time depends on
the input image. In contrast, Quick Mask or Sobel have image-independent execution time (i.e.
depending only on the size of the input image, not on its contents). So, we can use a transaction
box of type ‚Äùbest-of several data-paths, with deadline‚Äù, on the case of edge-detections. If a
1428

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

Do,Louise and Cohen

deadline arrive soon Quick Mask will be chosen. In the other cases, the best current result with
Canny will be delivered. This kind of time-dependent decision is not available in usual CSDF.
By contrast, our model Ô¨Åts well the case by using a transaction Ô¨Ålter. The exercise is now to
Ô¨Ånd how our new proposal could satisfy the real-time constraints of this type of application. A
Œ£C implementation of this method to use the transaction Ô¨Ålter could be seen in Figure 4. The
Read Image actor reads images from source and duplicates this image to be tested by diÔ¨Äerent
Edge Detection methods: Quick Mask, Sobel, Prewitt, Canny,. . . and its output is connected
directly to the transaction actor. This box will select the best results in accordance with the
deadline. As can be seen in Figure 5, Quick Mask gives an acceptable result, Sobel and Prewitt
is a little better while Canny give the best result with an execution time which is about 400%
higher than Quick Mask.

	


	
	



	



"$

	

	$#


"		
#
%





&


'


(


)

Time(ms)

Quick Mask

Sobel

Prewitt

Canny

200

473

522

1040

		
!

*
	


Figure 4: CSDF graph of the Edge Detection application. Execution time of diÔ¨Äerent Edge
Detection methods (measured on Intel core i3@2.53GHz). Canny with loop is an incremental
evaluation. At the end of the deadline, the best result will be chosen, according to the order:
Canny with loop > Canny > Sobel > Quick Mask.
A more elaborate case could want to improve the quality of result by using incremental
feedback loop. For example, the curvature scale space (CSS), which detects corners using the
intuitive notion of locating when the contour of an object makes a sharp turn in the image, is a
state-of-the-art corner detector. However, the success of the CSS is strongly dependent on the
quality of the input boundary segmented image, which is obtained by Canny edge detection [10].
With a too high threshold used as default edge detection parameters, the segmentation of a low
contrast image of a ship corner, taken in welding preparation phase, is poor, as shown in Figure
6(a). However, a too low threshold yields an over-segmented image, as shown in Figure 6(b).
Neither an under- nor an over-segmented image is a good input to the CSS corner detector.
The Ô¨Årst one allows detection of only few corners, while the latter one results in detection of too
many false positives. It is therefore decisive that a threshold value that will yield reasonable
and eÔ¨Écient segmentation, as shown in Figure 6(c), is deÔ¨Åned [10]. The suggested feedback loop
structure, shown in Figure 4, aims to do this automatically before the segmentation results are
passed to higher level of the CSS system. The control objective of the closed-loop is to provide
a binary segmented image which is free of noise. It is accomplished by changing the threshold
of the Canny edge detector, so that the measured variable, two-dimensional entropy S of edge
segmented pixels, is minimized. We may not know how many loops can be done before the
1429

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

(a)

(b)

(c)

(d)

(e)

(f)

Do,Louise and Cohen

Figure 5: Results of diÔ¨Äerent Edge Detection methods: (a) The image source (b) Quick Mask
(c) Sobel (d) Prewitt (e) Kirsch (f) Canny.

(a)

(b)

(c)

Figure 6: Original object image overlaid with the edge-contours detected using too high (a),
too low (b) and optimal (c) threshold (Source: [10])
deadline occurs. As can be seen in Figure 4, if the incremental path is still running when the
deadline occurs, the latest available corner detected (with a two-dimensional entropy minimized)
is chosen. Again, usual CSDF cannot express this kind of time- and context-dependent decision.

4.2

Case-study on Viola & Jones

The Viola & Jones object detection framework is the Ô¨Årst object detection framework to provide competitive object, face or person detection rates in real-time proposed by Paul Viola and
Michael Jones [12]. There are three components in the framework. The Ô¨Årst is the introduction
of a representation called the Integral Image which allows the features used by the detector
to be computed very quickly. The second is a learning algorithm, based on AdaBoost, which
selects a small number of critical visual features from a larger set and yields extremely eÔ¨Écient
classiÔ¨Åers. The third is a method for combining increasingly more complex classiÔ¨Åers in a Cascade which allows background regions of the image to be quickly discarded while spending more
computation on promising object-like regions. The cascade can be viewed as an object speciÔ¨Åc
focus-of-attention mechanism which unlike previous approaches provides statistical guarantees
1430

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

Do,Louise and Cohen

that discarded regions are unlikely to contain the object of interest.
However, in most applications of person or object detection (e.g. in avionics, military and
video surveillance), a high level of accuracy is not suÔ¨Écient, as real-time constraints are equally
critical. For example, with a Ô¨Åghter, all persons or objects detected must be synthesized after
a Ô¨Årm deadline. The exercise is now to Ô¨Ånd how our new data distribution Ô¨Ålters could satisfy
the real-time constraints of this application. A CSDF implementation of this method to use the
transaction Ô¨Ålter could be seen in Figure 7. An image will be analysed and tested in diÔ¨Äerent
scales and only persons, objects or interest point detected before a deadline will be selected
by a transaction box. As can see in Figure 8, the transaction Ô¨Ålter selects only results from
GoodPoint which arrive before the deadline and the number of persons detected on the image
will also change. In the Ô¨Årst case with a longer deadline, 2 persons and 1 object-like person are
detected. In the second case, only 2 persons are detected and in the third case with a deadline
which arrives too soon, no person or object is detected. This kind of time-dependent decision
is not available with usual programming models based on SDF or CSDF MoCs, contrary to our
model which is more dynamic and context-dependent by integrating transaction Ô¨Ålter as a new
data distribution Ô¨Ålter.
	



	




	

	

	

	
	





	

	

Figure 7: CSDF graph of the Viola & Jones application. The Scales is to calculate scales on
which the image will be tested, Integral Img: calculate the integral of the image, GoodPoint:
search positions where there may be a person or an object, TransactionBox : a transaction Ô¨Ålter
of type ‚Äùbest-of several data-paths, with deadline‚Äù, Handling: clear positions that are too close
and draw rectangles in these positions.

5

Conclusion

We extended the CSDF-based usual MoC with time constraints and two important data-Ô¨Ålter:
Select-duplicate, and Transaction. By combining the two new data Ô¨Ålters with CSDF graphs, in
valid combinations that are intuitively easy to Ô¨Ågure out and that can be checked automatically
by a compiler, we the main properties of CSDF graphs are preserved, while overcoming a range
of limitations that use to be associated with CSDF models. Thanks to several real-life casestudies, we show the importance of these Ô¨Ålters to deÔ¨Åne a new set of applications for embedded
computing, which can be encompassed in the coming years. Future work intend to resolve the
problem of scheduling and translating this model more into a formal language to have a more
coherent view of many-cores.
1431

An Empirical Evaluation of a Programming Model for Context-Dependent. . .

(a)

(b)

Do,Louise and Cohen

(c)

Figure 8: Person detection with the Viola Jones algorithm according to the arrival of the
deadline (measured on Intel core i3@2.53GHz): (a) 2 persons and 1 object-like person are
detected (b) 2 persons (c) nothing is detected with a deadline of 200, 100 and 50ms, respectively.

References
[1] Pau Arum and Xavier Amatriain. Time-triggered static schedulable dataÔ¨Çows for multimedia
systems, 2009.
[2] John Canny. A computational approach to edge detection. Pattern Analysis and Machine Intelligence, IEEE Transactions on, PAMI-8(6):679‚Äì698, Nov 1986.
[3] P. de Oliveira Castro, S. Louise, and D. Barthou. Reducing memory requirements of stream
programs by graph transformations. In High Performance Computing and Simulation (HPCS),
2010 International Conference on, pages 171‚Äì180, June 2010.
[4] A. Dkhil, X. Do, S. Louise, and C. Rochange. Self-timed periodic scheduling for cyclo-static
dataÔ¨Çow model. In ICCS, volume to be published of Procedia Computer Science, 2014.
[5] M. Geilen, S. Stuijk, and T. Basten. Predictable dynamic embedded data processing. In Embedded
Computer Systems (SAMOS), 2012 International Conference on, pages 320‚Äì327, July 2012.
[6] T. Goubier, R. Sirdey, S. Louise, and V. David. Œ£C: A programming model and language for
embedded manycores. In Proceedings of the 11th International Conference on Algorithms and
Architectures for Parallel Processing, ICA3PP‚Äô11, pages 385‚Äì394, 2011.
[7] W. M. Johnston, J. R. P. Hanna, and R. J. Millar. Advances in dataÔ¨Çow programming languages.
ACM Comput. Surv., 36(1):1‚Äì34, March 2004.
[8] S. Louise, P. Dubrulle, and T. Goubier. A model of computation for real-time applications on
embedded manycores. In Embedded Multicore/Manycore SoCs (MCSoc), 2014 IEEE 8th International Symposium on, pages 333‚Äì340, Sept 2014.
[9] Dwayne Phillips. Image processing in C, Part 5: Basic edge detection. pages 47‚Äì56, 1994.
[10] Danijela Risti-Durrant and Axel Grser. Closed-loop control of segmented image quality for improvement of digital image processing. Automatic Control and Robotics, 7(1):27‚Äì34, 2004.
[11] W. Thies, M.I. Gordon, M. Karczmarek, J. Lin, D. Maze, R.M. Rabbah, and S. Amarasinghe.
Language and compiler design for streaming applications. In Parallel and Distributed Processing
Symposium, 2004. Proceedings. 18th International, pages 201‚Äì, April 2004.
[12] P. Viola and M. Jones. Rapid object detection using a boosted cascade of simple features. In
Computer Vision and Pattern Recognition, 2001. CVPR 2001. Proceedings of the 2001 IEEE
Computer Society Conference on, volume 1, pages I‚Äì511‚ÄìI‚Äì518 vol.1, 2001.
[13] I. Watson and J. Gurd. A practical data Ô¨Çow computer. Computer, 15(2):51‚Äì57, 1982.

1432

