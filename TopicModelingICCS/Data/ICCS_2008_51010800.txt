Interactive Learning of Data Structures and
Algorithmic Schemes
Clara Segura, Isabel Pita, Rafael del Vado V´ırseda,
Ana Isabel Saiz, and Pablo Soler
Departamento de Sistemas Inform´
aticos y Computaci´
on
Universidad Complutense de Madrid, Spain
{csegura,ipandreu,rdelvado}@sip.ucm.es,
{anussita,ileras}@gmail.com

Abstract. We present an interactive environment called Vedya for the
visualization of data structures and algorithmic schemes which can be
used as a very useful educational tool in Computer Science. The integration of Vedya and the Virtual Campus of the Complutense University of Madrid has allowed us to manage the whole administration of
the individual students’ homework, including generating exercises, tests,
grading delivered homework, and storing the achieved results. The part
of the system concerning data structures has been evaluated during the
last academic course 2006/07. By means of the Vedya tool, the students
beneﬁted from complementary and interactive material, facilitating the
intuitive comprehension of most typical operations of classical data structures without any restriction of time or material.

1

Introduction

We present an interactive environment tool called Vedya for the visualization
of data structures and algorithmic schemes. The pedagogical aim of Vedya is to
facilitate the student’s grasp of the target procedures of education in Computer
Science by means of interactive learning, in order to facilitate teamwork and
communication between teachers and students.
For this purpose, we have integrated Vedya in a motivating environment such
as the Virtual Campus of the Complutense University of Madrid (https://www.
ucm.es/info/uatd/CVUCM/index.php) facilitating the accessibility, understanding
and visualization of the main data structures and algorithmic schemes. The combination of the Vedya tool and the Virtual Campus has allowed us to control the
whole administration of the individual students’ homework including generating
exercises, tests, grading delivered homework, and storing the achieved results.
By means of the Vedya tool, the students have beneﬁted from complementary
and interactive material, facilitating the intuitive comprehension of most typical
operations of classical data structures without restrictions of time or material.
The authors have been partially supported by the Spanish National Projects MERITFORMS (TIN2005-09027-C03-03) and PROMESAS-CAM (S-0505/TIC/0407).
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 800–809, 2008.
c Springer-Verlag Berlin Heidelberg 2008

Interactive Learning of Data Structures and Algorithmic Schemes

801

Moreover, the continuous utilization of the tool during the theoretical classes
of the second four-month period has allowed us to reach one of the most useful
educational aims in Computer Science in order to settle some of the academic
deﬁciencies of this kind of subjects: to support the continuous, personal and
interactive work across a virtual classroom.
During the academic course 2006/07, Vedya has been freely accessible across
the Virtual Campus. In this time, and within the framework of an Educational
Innovation Project in Computer Science, we have evaluated the part of the tool
dedicated to the study of the main data structures that provides interactive
learning support to guide our students in their comprehension of a modern (imperative or declarative) programming language. At this moment, the tool has
been widely used to illustrate in a graphical, visual and intuitive way the following well-known data structures [1]: linear data structures (stacks and queues),
tree-like data structures (binary search trees, AVL trees, and heaps) and functional data structures (ordered and hash tables). Additionally, the ﬂash animations incorporated in the tool have been used to illustrate other data structures
like red-black trees, 2-3-4 trees and graphs; and to show how data structures are
used to solve problems. Thanks to this eﬀort, our students have assimilated, inside a motivating framework, one of the fundamental concepts of the subject, the
diﬀerence between the formal description of the behavior of the data structures
provided by the algebraic speciﬁcation [2,3], and their implementation using a
concrete programming language.
The outline of the paper is the following. In Section 2 we describe Vedya from
the point of view of the tool’s user. In Section 3 the implementation is explained.
Section 4 provides the results obtained from the application of the tool in the
last academic course. Finally, in Section 5 we conclude and outline future work.

2

The Vedya Tool: Description

Vedya is an interactive environment for learning data structures and algorithms.
It covers the most common data structures: stacks, queues, binary search trees,
AVL trees, priority queues, and sorted and hash tables. Moreover, it also provides other diﬀerent types of data structures, like one for an implementation of
a doctor’s oﬃce. Concerning the algorithmic schemes, it covers the most common resolution methods [4]: greedy, divide and conquer, dynamic programming,
backtracking, and branch and bound.
Lots of work has already been done on data structures and algorithm visualization. However, usually, tools are not complete, have a lack of common
Graphical User Interface or can only be executed over some operating systems.
In [5] Chen and Sobh present a tool for data structure visualization and userdeﬁned algorithm animation. The data structures available are arrays, stacks,
queues, binary search trees, heaps and graphs. The most relevant improvement
of this tool is the possibility of executing user-deﬁned algorithms and visualize
the state of the data structures used by the algorithms.

802

C. Segura et al.

Fig. 1. Main window for the data structures part of the Vedya tool

Nevertheless, Vedya is something more than a data structure execution tool.
The main features that diﬀerentiate it from other interactive tools are:
(1) First of all, Vedya is created to supply the students with a tool that facilitates
the study of both data structures and algorithms. Therefore, all the data structures and algorithmic methods taught in our courses are integrated in the
same environment. The environment provides a lot of facilities to make executions more user-friendly: Vedya can be executed using Sun’s j2re 1.4.2.xx.
It allows the execution of several data structures/algorithms and several sequences of operations on the same structure at the same time making use
of a multi-windows and multi-frame system. It also allows saving sequences
of operations in order to continue the execution later on. Operations in a
sequence can be deleted and added.
(2) Vedya oﬀers several learning possibilities. The main one is the interactive
execution of data structures and algorithms, but it is also possible to create
simulations that execute automatically, visualize tutorials, and solve tests
within the same environment. It also integrates a set of animations that
show how data structures are used to solve some problems.
(3) Concerning the data structures part, Vedya oﬀers diﬀerent views for the
data structure behavior and the data structure implementations. Moreover,
in most of the data structures both a static and a dynamic implementation
are shown. Operations may be executed in any view, and the user can move
from one view to another to see the changes in any moment.
(4) The following algorithms are implemented:
• divide and conquer: binary search and quicksort,
• dynamic programming: knapsack problem,

Interactive Learning of Data Structures and Algorithmic Schemes

803

• greedy method: non-fractional knapsack problem, Dijkstra’s algorithm,
• branch and bound: knapsack problem.
The students can visualize how diﬀerent algorithmic schemes are applied to
solve the same problem and under which conditions they can be used.
(5) The environment integrates documentation related to the algebraic speciﬁcation, the implementation code and the operation cost of each data structure/algorithm.
Currently there exist two versions of the tool. The old version contains all the
data structures and algorithmic schemes mentioned above while the new one
oﬀers a subset of them in a more attractive visual environment. Figures in this
paper correspond to the new version, which can be found at http://www.fdi.ucm.
es/profesor/csegura/.
2.1

Tool Usage

When the application is started the user selects one area: data structures or
algorithmic schemes, and chooses a particular one. Then, the main window for
the selected data structure or algorithmic scheme is opened. For all cases this
window looks similar. The central panel is used to represent the data structure,
on the left there is a list of the actions that can be executed. The allowed actions
are highlighted while the non–allowed ones are disabled. The panel on the right
shows the actions that have already been executed on the data structure.
On Fig. 1, we show an example of the main window for binary search trees.
The selected key type is string, but the system also allows char and string types.
On this tree, the user may continue executing actions using the left hand operations panel, or he can use the simulation facilities of the menu to go up on
the sequence of actions to see previous states or restart the sequence from the
beginning. The central panel oﬀers some tree drawing facilities that allows the
user to expand and contract the tree, as well as to move over the screen to see
the hidden parts. Notice also that just above the central panel the result of the
last action is shown.
On the top of the screen there is a menu that facilitates managing the system.
We can create a new data structure; open an existing one; or save the state of
the editing one. We can change the view, from behavior, that is the one by
default, to implementation, either static or dynamic. On Fig. 2 we can see ﬁrst
the behavior view of a queue. When we insert an item, a truck throws it on the
top of the maze. Then, the item falls down until it ﬁnds the end of the maze or a
previous one. When we extract an item, the end of the maze opens and the ﬁrst
item falls down. The use of the maze illustrates that items cannot jump over the
previous ones and the fact that in a queue items are extracted in the order that
they come in. Below the behavior view we have the representation of the static
implementation based on a circular array and a dynamic implementation based
on pointers. On the static implementation, the array is represented by a circle
where items are inserted and extracted counterclockwise. This representation
stresses the fact that there is not a ﬁnal element of the array and also that we

804

C. Segura et al.

Fig. 2. Behavior and implementations views of queues

Interactive Learning of Data Structures and Algorithmic Schemes

805

can always insert an item unless the array is completely full. On the dynamic
implementation we use short arrows to represent the pointers between the items.
Two long arrows point to the ﬁrst item (written as primero in the ﬁgure) and to
the last one (written as ultimo). The sequence of modiﬁcations are shown step
by step so that students notice its relevance in order not to lose any pointer.
Using the menu we can also execute the operations on the data structure, use
the simulation facilities and change the execution speed. In the documentation
part the user can consult some documentation about the data structure, like the
algebraic speciﬁcation, the implementation code and the cost of each implementation, and ﬁnally it can change to the associate Vedya-test tool, where the user
can do some proposed test about the selected data structure.
The main window for the execution of algorithmic schemes looks similar.
There are panels for drawing the execution of the algorithm, for introducing the
input data and for showing the actions being executed. The simulation facilities
are also available.
2.2

Data Types Animations

Vedya is complemented with a set of tutorials on data types and a set of algorithm animations showing the usage of a particular data type to solve a given
problem. This set of tutorials and algorithm animations are developed in Flash,
and can be accessed independently from Vedya’s initial menu. We have tutorials
for stacks, queues, binary search trees, red-black trees and priority queues. We
have a tutorial about the heap-sort algorithm, an animation of the insertion in
a 2-3-4 tree, and examples of:
– The use of stacks to evaluate an expression in postﬁx form, or to transform
an inﬁx expression to a postﬁx one.
– The use of queues to obtain the breath-ﬁrst tree traversal.
– The use of stacks, queues and double queues to check palindromes.
Finally, we have some animations on graphs: to obtain the minimum spanning
tree using the Prim and Kruskal algorithms and to compute minimum paths
using the Dijsktra algorithm [6].
2.3

The Vedya-test Tool

As we have said Vedya also oﬀers facilities to solve tests about the data structures
and algorithms that are being studied. The Vedya-test tool can be invoked from
the Vedya tool, or it can be executed independently. The tool oﬀers facilities to
teachers that allow them to create/modify/delete questions in a database, and
to create tests from the database of questions. The student visualizes the tests,
solves them and obtains the solutions. Questions are grouped by subject on the
database, but it is possible to mix questions about diﬀerent data structures in
the same test.

806

C. Segura et al.

Fig. 3. Tool design

3

The Vedya Tool: Implementation

One of the main objectives when Vedya was implemented was that its extension
with new data structures or algorithmic schemes should be as easy as possible.
The main feature of the implementation is that both the data structures and
the algorithms being represented are actually implemented in the tool separately
from their graphical representations. The design, shown in Fig. 3, is modularly
divided into four blocks: interface, graphics, threads and implementations of
the data structures and algorithms. This means that whenever we desire to
change a graphical representation we do not need to change the data structure
or the algorithm itself. The windows and frame act as communication channel
between implementation and the graphics. The threads only communicate with
the graphics. Inheritance is exploited in order to reuse as much code as possible.
The diﬀerent blocks are communicated by means of “actions”:
• When the user executes an operation in the interface over a data structure
or executes an algorithm, the frame sends it to the implementation of the
data structure/algorithm to be executed.
• As a result of such execution, a vector of atomic actions to be graphically
represented in an animated way is returned to the frame. For example, when
inserting an element in a binary search tree, information about the path
followed by the element being inserted is returned.
• The frame sends the vector of actions to the graphical module, which paints
the necessary elements and sends to the threads block each action to be
animated, depending on the kind of selected visualization (user, static implementation or dynamic implementation).

Interactive Learning of Data Structures and Algorithmic Schemes

807

Fig. 4. Stack tracks design

Java threads are used in order to animate operations on data structures. Each
operation divides into actions and the animation sequence of each action is divided into tracks where diﬀerent kinds of movements are applied: circular, radial,
horizontal, vertical or point to point. In Fig. 4 we show the circular tracks for
the stack user representation, which consists of a dead-end pipe.

4

Interactive Learning

In order to obtain a detailed evaluation of the usage of Vedya, we have proposed
several tests related to the behavior, implementation and application of the
main data structures oﬀered by the tool. We also collect students’ opinion using
Vedya in the Data Structures course at the second year, and in the Programming
Methodology and Technology course at the third year, respectively.
The vast majority of our engineering and computer science students have
taken an introductory programming course in the ﬁrst academic year, typically in
Pascal. Although the learning of the main algorithmic schemes and programming
techniques is not a prerequisite to the subject of Data Structures, many students
elect to take it either prior to, or concurrent with, Programming Methodology
and Technology. As a result, although a pseudocode programming language for
Data Structures is the assumed language for Data Structures, many students
have enough knowledge about C++ or Java programming languages through
the integrated programming laboratories of parallel courses and subjects.
Taking into account this proﬁle, skills and background of our students, we
have proposed 8 tests in the Virtual Campus of the Complutense University of
Madrid. The number of engineering students registered in the Virtual Campus
was just over 320 distributed in three groups (130 in group A, 59 in group B,
and 131 in group C). Table 1 shows the number of the students who answered
each of the tests in the corresponding group.

808

C. Segura et al.
Table 1. Students answering the tests

Group A (130)
Group B (59)
Group C (131)
Total

Stacks 1 Stacks 2 Queues Sequences BST AVL RB Heaps
61
50
45
32
37
34 41
38
26
23
23
19
18
17 17
18
59
44
37
24
36
45 32
28
147
118
105
75
91
96 90
76

We observe that, from the second test on, the number of students becomes
stable in a number lightly low to the number of students who access regularly to
the Virtual Campus. These numbers, though seemingly high, are only between
23 % (75 students of 320) and 37 % (118 of 320) of registered students, which
shows the high rate of students giving up in this topic from the beginning.
Table 2. Percentage of correct answers

Group A
Group B
Group C

Stacks 1 Stacks 2
76.4%
82.5%
78.9%
83.6%
76.2%
79.8%

Queues Sequences BST AVL RB
77.8%
65.6%
82.2% 84.9% –
85.0%
63.6%
86.2% 87.7% 90.9%
73.5%
69.0%
83.5% – 68.9%

Heaps
86.3%
90.2%
86.8%

Table 2 shows the percentage of correct answers in the three groups: In general,
it is high, which demonstrates the interest of the students who have taken part.
In group B, the percentage is slightly higher than groups A and C; since 85 % of
the students who have decided to complete the tests across the Virtual Campus
of group B are not “new” students of this subject.
Table 3. Comparison of academic results with previous courses

Not attended
Passed
Failed

2002/03 2003/04 2004/05 2005/06 2006/07
57.6%
45.3%
42.3%
64.7%
50.8%
15.3%
22.2%
20.2%
18.2%
30.1%
27.1%
32.5%
37.5%
17.1%
18.9%

Table 3 shows the percentage of students that did not attend the ﬁnal exam,
those who passed, and those who failed during the last ﬁve years. We observe that
in the last course, in which we have applied the Vedya tool, we have reduced
by 14% the percentage of students giving up the course with respect to the
previous course, and at the same time, we have increased by 12% the percentage
of students that passed the exam. The percentage of students that failed the
exam increased by 2% due to the rise of students attending the exam. Comparing
with previous courses (2003 to 2004) the percentage of students that passed
has increased between 8% (with respect to the course 2003/04) and 15% (with
respect to the course 2002/03).

Interactive Learning of Data Structures and Algorithmic Schemes

5

809

Conclusions and Future Work

In this paper, we have presented a novel interactive tool called Vedya for the
visualization of data structures and algorithmic schemes which can be used as a
very useful educational tool to aid ﬁrst-year engineering and computer science
students learn Data Structures and Algorithms. The main beneﬁt of this kind of
software is to facilitate the student’s grasp of the target procedures of education,
to facilitate teamwork and communication between teachers and students. In this
sense, the novel integration of the Vedya tool in the virtual classroom has allowed
us to motivate the participation of the students, and to obtain one of the most
powerful goals from the educational viewpoint. Furthermore, the personalization
and automatization of the learning process has avoided the lack of motivation for
the abstract subjects in Computer Science because students ﬁnd them ‘useful’.
The fact that interface language is Spanish is for our students one additional
reason to ﬁnd the environment more friendly. Finally, it is frequent that a tool
is useful not only to the original purpose it was created for, but also for other
subsidiary (though not less important) uses. In this sense, we believe that the
development of this tool can help educators to use the Vedya tool directly or to
create other similar tools.
As future work, we plan to develop alternative ways to integrate the Vedya tool
in a Virtual Campus based on WebCT. We are interested in the application of
the tool and the interactive learning methodology presented in this paper inside
of diﬀerent models of virtualization and e-learning in Computational Science: the
development of digital repositories of Learning Objects about data structures and
algorithmic schemes in the Vedya tool using IMS DRI and Moodle, the integration
of the Vedya tool in an Intelligent Tutorial System, or the application of typical
tools of the Web 2.0 philosophy.

References
1. Weiss, M.: Data Structures and Problem Solving Using Java. Addison-Wesley, Reading (1998)
2. Mart´ı, N., Ortega, Y., Verdejo, A.: Estructuras de datos y m´etodos algor´ıtmicos:
ejercicios resueltos. Prentice-Hall, Englewood Cliﬀs (2003)
3. Pe˜
na Mar´ı, R.: Dise˜
no de programas. Formalismo y abstracci´
on, 3rd edn. PrenticeHall, Englewood Cliﬀs (2005)
4. Cormen, T.H., Leiserson, C.E., Rivest, R.L.: Introduction to Algorithms. The MIT
Press/McGraw-Hill (2001)
5. Chen, T., Sobh, T.: A tool for data structure visualization and user-deﬁned algorithm animation. In: Frontiers in Education Conference (2001)
6. Pita, I., Segura, C.: A tool for interactive learning of data structures and algorithms.
In: 8th International Symposium on Computers in Education, SIIE 2006, vol. 1, pp.
141–148 (2006)

