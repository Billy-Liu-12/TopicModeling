A Regressive Problem Solver That Uses Knowledgelet
Kuodi Jian
Department of Information and Computer Science
Metropolitan State University
Saint Paul, Minnesota 55106-5000
Kuodi.jian@metrostate.edu

Abstract. This paper presents a new idea of how to reduce search space by a
general problem solver. The general problem solver, Regressive Total Order
Planner with Knowledgelet (RTOPKLT), can be used in intelligent systems or
in software agent architectures. Problem solving involves finding a sequence of
available actions (operators) that can transfer an initial state to a goal state.
Here, a problem is defined in terms of a set of logical assertions that define an
initial state and a goal state. With too little information, reasoning and learning
systems cannot perform in most cases. On the other hand, too much information
can cause the performance of a problem solver to degrade, in both accuracy and
efficiency. Therefore, it is important to determine what information is relevant
and to organize this information in an easy to retrieve manner.
Keywords: Software Agent, Artificial Intelligence, Planning.

1 Introduction
In recent years, as the computing power increases steadily, computers are used in a
wide variety of areas that need some intelligence. All of these intelligent systems need
a problem solver. The problems that require a problem solver include: (1) generating
a plan of action for a robot, (2) interpreting an utterance by reasoning about the goals
a speaker is trying to achieve, (3) allocating the use of resources, and (4)
automatically writing a program to solve a problem. The heart of a problem solver is a
planner. There are many kinds of planners [1]. In this paper, we present a regressive
planner that uses knowledgelet. A planner is complete if it is able to find every
solution given that solutions exist and that the planner runs to its completion. There is
a trade-offs between the response time and the completeness. We can improve the
response time of a planner by using some criteria to prune the search space. But that
will cause the loss of solutions to the problem. On the other hand, if a planner
searches every possible space, then, the search space grows exponentially with the
number of operators; the response time will deteriorate to the point of intolerable for
many problems of decent size. This paper offers a solution that gives us both the
quick response time and the completeness of solutions. The planner presented in this
paper has the following characteristics:
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 855–863, 2007.
© Springer-Verlag Berlin Heidelberg 2007

856

K. Jian

•
•
•
•

It has fast response time since the planner searches only relevant
operators,
It can use existing relational database to store pieces of
knowledge, called knowledgelet,
It is built on proven regressive idea and is conceptually simple
and complete,
It is general, which means that it can be used in different areas
with little or no changes.

The rest of the paper is organized as the following: section 2 gives the description
of knowledgelet; section 3 presents the regressive general problem solver,
RTOPKLT, and its application to a planning problem; and section 4 is the summary.

2 Knowledgelet
A knowledgelet is an object that describes the relevant knowledge of solving a
particular problem. By using knowledgelets, the search time by a problem solver can
be greatly reduced. A knowledgelet consists of slots of data structure and can be
stored in most existing databases (object databases will be the best fit).
2.1 Structure of Knowledgelet
Knowledgelet constrains the world states by giving only subsets of operators (actions)
that are relevant to the problem at hand. The search space can be an open world space
or a Local Closed World (LCW) space [2]. In a LCW space, we assume that we know

Slot1: Name of the knowledgelet
Slot2: Domain name : context description
Slot3:
Goal1: statement
Initial condition1: partial solution.
Initial condition2: partial solution.
…….
Goal2: statement
Initial condition1: partial solution.
Initial condition2: partial solution.
…….
…….

Slot4:
Language building blocks : LCW or open
world
Operator set -

Fig. 1. The structure of a knowledgelet

A Regressive Problem Solver That Uses Knowledgelet

857

everything. If something is not positively stated, we conclude it is false. The benefit
of using LCW is that we needn’t to record all the world states. Figure 1 is the diagram
of a knowledgelet.
From the diagram, we see that a knowledgelet has a name. This name can be used
by a database as a key to store it. A knowledgelet is like a blob of knowledge with a
domain name (also can be used as a key) and a context that describes the domain
name. We all know the fact that the same words carry different meanings in different
contexts. The domain name and its context will solve this ambiguity.
In slot3, there are goals that can be searched. Under each goal, there is a set of
partial solutions to the goal. Each partial solution is associated with an initial state.
This means that the same goal can be achieved from different starting points. For
example, in a block world, the goal of block C on top of block B that is in turn on top
of block A can be achieved either from the initial state of (on A B) ∧ (on C Table) or
from the initial sate of (on A Table) ∧ (on B Table) ∧ (on C Table). A partial solution
is a partial plan (contains an ordered sequence of operators) that will change the world
from an initial state to the goal state. To the regressive planner, this partial plan can be
viewed as one big operator [3].
In slot4, there is a field that contains the language type and a field that contains
available operator set. There are two language types: open world assumption and the
Local Closed World (LCW) assumption. The LCW language building block is a LCW
lingo in that particular domain; the open world language building block is an open
world lingo in that particular domain. The language building blocks include
sentences, axioms, rules, and constraints. One example of the constraints is the
domain rules. Domain rules are the guiding principles that operate in a particular
domain. They may specify a particular sequence of operators (for example, one
operator must proceed another, etc.). If there is no existing partial plan in slot3 to
match a goal, the planner will construct a plan from the available operators in slot4
with the help of the language lingo in the language type field.
The search starts from slot1, slot2, slot3, and slot4. By searching the partial
solution first, we improve the response time since we do not have to construct
everything from scratch.

3 Regressive General Total Order Planner, RTOP
In artificial intelligence, problem solving involves finding a sequence of actions
(operators) that result in a goal state. A lot of real world problems can be cast into
planning problems in terms of an initial state, a set of goal state conditions, and a set
of relevant legal operators; each legal operator is defined in terms of preconditions
and effects. Preconditions of an operator must be satisfied before the operator can be
applied. All the reachable states comprise world space. A world state in a world space
can be represented by state variables and can only be changed by legal operators.
There are basically two ways to search through a world space. One is called
“progression” and the other is called “regression.” A progressive planner searches

858

K. Jian

forward from the initial world state until it finds the goal state. A regressive planner
searches backward from the goal state until it finds the initial state. As the search
progresses, both the forward search algorithm and the backward search algorithm
need to choose non-deterministically the next operator to consider. The planner
discussed in this paper belongs to the regressive type. Since the answer returned by
our planner is a total-ordered (represented by “<<”) sequence of operators, our
planner is called Regressive Total Order Planner with Knowledgelet (RTOPKLT).
In this planner, a returned plan is represented by two-tuple: <A, TOLO>. TOLO is
the total order of the operators that is selected by the planner. Internally, a plan is
represented by a three-tuple: <A, O, L>. A is a set of operators drawn from available
operator pool ϑ, O is a set of partial-ordering (represented by “<”) constraints over A,
and L is a set of causal links. For example, if A = {A1, A2, A3} then O might be the
set {A1 < A3, A2 < A3}. A good way of ensuring that the different operators
introduced for different goals won’t interfere with each other is to record the
dependencies among operators explicitly within a partial plan. To record these
dependencies, we use a data structure called causal link [4]. A causal link is a data
structure with three fields: the first two fields contain pointers to plan operators (the
link’s producer, Ap, and its consumer, Ac); the third field is a proposition or conjunct
of propositions, Q, which is both an effect of Ap and a precondition of Ac. We can
write such a causal link as Ap →(Q) Ac and store a plan’s links in the set L. Figure 2
is the algorithm for the regressive planner.
==========================================================
Algorithm: RTOPKLT
<A, TOLO>RTOPKLT_Algorithm (InitialState, Goal, KnowledgeletName, DomainName)
(a) Use either KnowledgeletName or DomainName to search existing knowledgelets.
If there is a applicable knowledgelet in the system and the partial plan exist
for the given InitialState and Goal
Return the plan directly
Else if there is a applicable knowledgelet in the system and the partial plan does
not exist for the given IntialState and Goal
1. Construct A0, A, initial A, O, L, agenda, and get - from
knowledgelet. All the added operator Ai satisfies the
following ordering:
A0 < Ai < A
2. Goto step (b), pass it a null plan, initial agenda, and the operator pool -.
Else if there is no applicable knowledgelet in the system
Return no answer.
(b) Call subroutine RTOP(<A, O, L>, agenda, -).
(c) Total order: TOLO = total ordering O’.
(d) Termination: return <A, TOLO>.
RTOP(<A, O, L>, agenda, -)

A Regressive Problem Solver That Uses Knowledgelet

859

(1) Termination: if agenda is empty, return <A, TOLO>.
(2) Goal selection: let <Q, A need> be a pair on the agenda (by definition A need A and Q is a
precondition of A need).
(3) Operator selection: Let A add be the action of choosing an operator that has Q as its one
postcondition (an operator can be chosen from -, or an operator already in A that can be consistently
ordered prior to A need). The choice of an operator can be implemented in such as way that the chosen
operator will achieve maximum number of goals in agenda.
Let L’ = L  {Aadd o(Q) Aneed}, and Let O’ = O  {Aadd < Aneed}.
If Aadd is newly instantiated, then
A’ = A  {Aadd}
(otherwise let A’ = A).
If no such operator exists, then return failure. For each condition, keep all other choices as backtrack
points.
(4) Update goal set: Let agenda’ = agenda – {<Q, A need>}. If A add is newly instantiated, then for each
conjunct, Qi, of its precondition add <Qi, A add > to agenda’.
(5) Causal link protection: For every operator A add that might threaten a causal link Ap o(S) Ac  L’
choose a consistent ordering constraint, either
Demotion: add Aadd < Ap to O’, or
x
x
Promotion: add Ac < Aadd to O’.
If neither constraint is consistent, then return failure.
(6) Recursive invocation: RTOP(<A’, O’, L’>, agenda’, -).

==========================================================
Fig. 2. Regressive generic total order planner, RTOPKLT

In the above algorithm, there are four parameters. The InitialState is the starting
place where the planner begins to work. The Goal is the final state. The parameters
KnowledgeletName and DomainName are used by the planner to search the existing
knowledgelets. RTOPKLT starts with a search of knowledgelet based on the
knowledgelet name or the domain name. Based on the search result, it either returns a
plan immediately or invokes the subroutine RTOP. The return type is a two-tuple data
structure. “A” is a set of operators included in the executable plan and TOLO is the
total order constraint on “A”. The total ordering constraints, TOLO, is guaranteed to
be an action sequence that solves the planning problem [5].
The first parameter to subroutine RTOP is a three-tuple data structure: A is the
chosen operator for the partial plan, O is the set of ordering constraints, and L is the
set of causal link constraints. The second parameter is an agenda of goals that need to
be supported by links. Each item on the agenda is represented as a pair <Q, Ai> where
Q is a precondition or a conjunct of the precondition of Ai. The third parameter is ϑ,
which is the pool of operators selected by a knowledgelet. To achieve simplicity, we
introduce two dummy operators: A0 and A∞. A0, the start operator, has no
precondition and has the initial state as its effect; A∞, the end operator, has no effect
and has the goal as its precondition. Subroutine RTOP always starts with a null plan:
A = {A0, A∞}, ordering constraint O = {A0 < A∞}, and causal link L = {}. Then,

860

K. Jian

RTOP makes non-deterministic choices of operators until all the conjuncts of every
operator’s precondition have been supported by causal links and all the threatened
links have been protected from possible interferences. In the rest of the paper, we use
“~” to mean a condition is not true.
3.1 Example of Applying the RTOPKLT
Let’s use an example to illustrate how the RTOPKLT planner works. We use the
following simple but illustrative planning problem. The following is the problem
statement:
Example 1 (block world)
This problem involves a robot operating in a closed room. There are three blocks of
equal size labeled as A, B, and C. There is a table that supports blocks. The robot may
be commanded to move blocks one at a time, placing them on the table or on top of
other blocks. Blocks may only be stacked one atop the other and the robot can easily
reach all of the blocks. Suppose the exact position of the blocks on the table are not
important and that there is enough room for all the blocks to be resting on the table at
the same time. The initial state is A and B are on the table; C is on top of A. The goal
state is A on top of B; B is on top of C; and C is on table.

Start
(on c a)
(clear b)
(clear c)
(on a table)
(on b table)
3.a. the null plan

(on a b)
(on b c)
(clear a)
(on c table)
End

A
C
A

B
B

C

3.b. the initial state and the goal state

Fig. 3. The null plan, initial state, and goal state for block world example

Figure 3.b is the visual representation of the initial state and the goal state. The
RTOPKLT starts by constructing a null plan as shown in figure 3.a.
3.2 Solution to the Problem When There Is a Partial Plan
If there is a solution existing in the applicable knowledgelet, then the RTOPKLT
will return a solution immediately. The line (a) will return a plan of two-tuple <
A, TOLO>. One possible answer is: the operator set A contains {move-C-from-A-toTable, move-B-from-Table-to-C, move-A-from-Table-to-B}, and TOLO contains
{move-C-from-A-to-Table << move-B-from-Table-to-C << move-A-from-Tableto-B}.

A Regressive Problem Solver That Uses Knowledgelet

861

3.3 Solution to the Problem When There Is No Partial Plan
If there is no solution existing in the applicable knowledgelet, then the RTOPKLT
will build a plan from scratch by calling the subroutine RTOP. When making the
initial call, RTOPKLT passes in a null plan (shown in the iteration 1 of Table 1) as
parameters. The parameters are: <A, O, L>, agenda, ϑ. The values of each variable in
a null plan will be the following: A = {A0, A∞}, O = {A0 < A∞}, L = {}, agenda =
{<(on A B), A∞>, <(on B C), A∞>, <(on C Table), A∞>}, and the operator pool ϑ that
contains the relevant set shown in the first part of Table 1. Rest of Table 1 shows the
computation results for each iteration of applying RTOPKLT to the example 1.
Table 1. The values of variables for each iteration
Operator
pool ϑ

<pre: none>A0<post: (on C A), (clear B), (clear C), (on A Table), (on B Table)>,
<pre: none>A0<post: (on C A), (clear B), (clear C), (on A Table), (on B Table)>,
<pre: (clear A), (on A B), (on B C), (on C Table)>A∞<post: none>,
A1 <pre: (clear C), (on C A)>move-C-from-A-to-Table<post: ~(on C A), (clear A), (on C
Table)>,
A2 <pre: (clear B), (clear C), (on B Table)>move-B-from-Table-to-C<post: (on B C),
~(clear C), ~(on B Table)>,
A3 <pre: (clear A), (clear B), (on A Table)>move-A-from-Table-to-B<post: (on A B),
~(clear B), ~(on A Table)>,
A4 <pre: (clear A), (on A C)>move-A-from-C-to-Table<post: (on A Table), (clear C), ~(on
A C)>,
A5 <pre: (clear C), (clear B), (on C Table)>move-C-from-Table-to-B<post: (on C B),
~(clear B), ~(on C Table)>,
A6 <pre: (clear B), (clear A), (on B Table)>move-B-from-Table-to-A<post: (on B A),
~(clear A), ~(on B Table)>.
Note: for every operator Ai, we have A0 < Ai < A∞.
A
O
L
Agenda
A0, A∞
A0 < A∞
none
<(clear A), A∞>, <(on A
B), A∞>, <(on B C), A∞>,
<(on C Table), A∞>
A2 →(on B C) A∞
<(clear A), A∞>, <(on A
A0, A∞,
A0 < A∞
B), A∞>, <(on C Table),
A2
A0 < A2
A0 →(clear B) A2
A∞>
A2 < A∞
A0 →(clear C) A2
A0 →(on B Table) A2
A0, A∞,
A2 →(on B C) A∞
<(clear A), A∞>, <(on C
A0 < A∞
Table), A∞>,
A2, A3
A0 < A2
A0 →(clear B) A2
<(clear A), A3>, <(clear
A2 < A∞
A0 →(clear C) A2
A0 < A3
A0 →(on B Table) A2 B), A3>, <(on A Table),
A3>
A3 < A∞, A2 < A3 A3 →(on A B) A∞
A0, A∞,
<(clear A), A∞>, <(on C
A0 < A∞
A2 →(on B C) A∞
Table), A∞>,
A2, A3
A0 < A2
A0 →(clear B) A2
<(clear A), A3>
A2 < A∞
A0 →(clear C) A2
A0 < A3
A0 →(on B Table) A2
A3 < A∞
A3 →(on A B) A∞
A2 < A3
A0 →(clear B) A3
A0 →(on A Table)A3

．
．
．
．
．
．

Iteration
1

2

3

4

862

K. Jian
Table 1. (Continued)

5

A0, A∞,
A2, A3,
A1

A0 < A∞
A0 < A2
A2 < A∞
A0 < A3
A3 < A∞
A2 < A3
A0 < A1
A1 < A∞
A1 < A2

6

A0, A∞, A2, A3,
A1

A0 << A1 << A2
<< A3 << A∞

A2 →(on B C) A∞
A0 →(clear B) A2
A0 →(clear C) A2
A0 →(on B Table) A2
A3 →(on A B) A∞
A0 →(clear B) A3
A0 →(on A Table) A3
A0 →(clear C) A1
A0 →(on C A) A1
A1 →(clear A) A∞
A1 →(clear A) A3
A1 →(on C Table) A∞

Initially, the planner contains only null plan as shown in iteration 1 of the above
table. At this point, the agenda is: <(clear A), A∞>, <(on A B), A∞>, <(on B C), A∞>,
<(on C Table), A∞>. There are four choices for the immediate goal. As far as
completeness is concerned, it doesn’t matter which one is chosen first. If the first
conditions take from agenda is (on B C) and the operator to support this condition,
Aadd, is move-B-from-Table-to-C, then all the values of parameters will be updated to
the values as shown in iteration 2. Aadd has three preconditions, they can either be
supported by conditions in the initial state or be put into agenda. In this instance, all
the preconditions are supported by the initial condition. We record this fact by adding
three causal links to L.
For iteration 3, suppose the planner selects the goal (on A B) from the agenda
and decides to instantiate a new operator 3, move-A-from-Table-to-B, as Aadd. If
operator 3 is put before operator 2, we will get a threat situation. We resolve threat by
promotion to order the threat after link’s consumer. In iteration 6, the planner returns
a totally ordered plan with two-tuples: <A={A0, A1, A2, A3, A∞}, TOLO=
{A0<<A1<<A2<<A3<< A∞}>. The total order uses notation “<<” to indicate the
absolute order among chosen operators. In this iteration, the agenda is empty and the
algorithm terminates.

References
1. McDermott, D.: The 1998 AI planning systems competition, AI Magazine 21 (2) (2000)
35-55.
2. Bertino, E., Provetti, A., and Salvetti, F.: "Local Closed-World Assumptions for Reasoning
about Semantic Web Data", In Proceedings of the APPIA-GULP-PRODE Conference on
Declarative Programming (AGP ’03), pages 314-323, 2003.

A Regressive Problem Solver That Uses Knowledgelet

863

3. Gordon, A.: "The Representation of Planning Strategies", Artificial Intelligence 153 (1-2)
(2004) 287-305.
4. Akman, V., Erdogan, S., Lee, J., Lifschitz, V., Turner, H.: "Representing the Zoo World and
the Traffic World in the Language of the Causal Calculator", Artificial Intelligence 153
(1-2) (2004) 105-140.
5. Wilkins, D.: Practical Planning Extending the Classical AI Planning Paradigm, Morgan
Kaufmann, San Mateo, California, 1988.
6. Gray, R.: “Agent Tcl: A flexible and secure mobile-agent system,” In Mark Diekhans and
Mark Roseman, editors, Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL Ô96),
Monterey, California, July 1996.

