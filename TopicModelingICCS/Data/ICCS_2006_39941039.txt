JIMS Extensions for Resource Monitoring and
Management of Solaris 10
Krzysztof Zieliński, Marcin Jarząb, Damian Wieczorek, and Kazimierz Balos
Institute of Computer Science, University of Science and Technology,
Al. Mickiewicza 30, 30-059 Krakow, Poland
{kz, mj, dwieczor, kbalos}@agh.edu.pl
http://www.ics.agh.edu.pl

Abstract. This paper describes extensions of the JIMS system with selected
mechanisms of Solaris 10 resources monitoring and management. The proposed
extensions together with JIMS functionality create a foundation for the adaptive
layer implementation of large distributed computer systems. The proposed
solution addresses a heterogeneous self-configuring execution environment
typical of Grids system. The paper presents not only the innovative concept of
the proposed extensions but their existing implementation.

1 Introduction
Resource monitoring and management is one of most sought-after aspects of
functionality of large computer systems, supporting their adaptability to changing
workload and end-user requirements. Modern operating systems, like Solaris10,
offer very rich and complex mechanisms of resource control. Being a part of large
heterogeneous distributed systems, i.e. Grids, the computers running Solaris10
should expose their resource management mechanisms regarding projects and zones
[10, 11] in a uniform way so as to be accessible from the integrated management
platform.
This paper describes an extension of the JIMS [1, 2] platform with the concepts of
Solaris10 projects and zones monitoring and management. The proposed extension
has been implemented using JMX [3, 4] and expands the rich functionality of JIMS
from Linux and Solaris 8, 9 to the most advanced features of Solaris10. The proposed
extensions make these features accessible to applications written in Java and open a
wide space for adaptive policy-driven software layer implementation. These
extensions, integrated with JIMS, create a very advanced and powerful tool, beyond
the capabilities of comparable existing solutions.
The structure of the paper is as follows. In Section 2 a very brief description of
JIMS is presented. Next, in Section 3, the Solaris10 resource management
mechanisms exploited in this work are summarized. The idea of JIMS extensions and
exposition of requested mechanisms is specified in Section 4. The implementation of
this extension as JIMS MBeans is presented in Section 5. The paper finishes with
conclusions.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 1039 – 1046, 2006.
© Springer-Verlag Berlin Heidelberg 2006

1040

K. Zieliński et al.

2 JIMS Overview
JIMS – the JMX-based Infrastructure Monitoring System assumes that monitored
resources are represented as MBeans (Managed Beans), the simple Java objects
installed in MBean Servers, key components of JMX (Java Management Extensions).
The main purpose of the JIMS is to provide an integrated infrastructure
(computational nodes, memory usage, network utilization) and application (Grid
engines, J2EE application servers) monitoring management platform. Its features,
such as adaptation to operating systems, kernels, and IP protocols, auto-configuration
facility (cluster level auto-configuration, Grid level auto-configuration), and dynamic
deployment of proper monitoring sensors from one common modules repository,
makes it well suited for Grid environments. The JIMS communication model depicted
in Fig. 1 can be split into a four-layer architecture:
• The Instrumentation Layer provides infrastructure and Java application monitoring
information using specially-designed sensor modules installed in the JIMS
Monitoring Agent (JIMS MA).
• The Interoperability Layer provides a common point of communication with
computational nodes (also called Worker Nodes or WNs) in clusters through
dedicated access nodes (Access Node -AN).
• The Integration Layer enables discovery of all accessible clusters and provides an
overall view of the Grid. This layer consists of Global Discovery modules installed
in chosen JIMS agents running on Access Nodes.
• The Client Application Layer consists of applications connected to the JIMS
system, which are consumers of the information produced by the system.
The extensions proposed in this paper cover the instrumentation layer. The layer is
equipped with Mbeans for Solaris 10 projects and zones monitoring and management.
JIMS has been deployed as a monitoring infrastructure at many Grid installations,
including the EU IST CrossGrid project [1], the Polish national project Clusterix, and
Client
Applications
Layer

JIMS Client, JMXClients (JConsole, MC4J)
Visualization, Monitoring, Management

Integration Layer
Global Discovery

Interoperability
Layer

JIMS Gateway

JIMS Gateway
Access Node

Access Node

Instrumentation Layer
JIMS MA
CPU,Mem, Network,
Processes, GE
Zones, Projects, Tasks
Computational Node 1 (Solaris 10)
Cluster A

JIMS MA
CPU,Mem, Network
Processes
Zones, Projects, Tasks
Computational Node N (Solaris 10)

JIMS MA
JVM 5.0
Computational
Node 1(Linux)

JIMS MA
J2EE AS
Computational
Node 2 (Linux)

Cluster B

Fig. 1. Layered architecture of communication between JIMS modules

JIMS Extensions for Resource Monitoring and Management of Solaris 10

1041

the internal installation of the N1 Sun Fire 1600 Blade System at the Department of
Computer Science AGH/UST in Kraków. These JIMS applications show that features
such as hierarchical information representation, fast response time (~200[ms]),
scalable architecture, open source code (AXIS, JMX, SNMP, MX4J), WS interface
and JSR003, 160, 255 compatibility, allow for constructing services which are easy to
administer and maintain, and which allow easy integration with other components of
the Grid. This is why JIMS was selected for proposed extensions regarding Solaris 10
resource monitoring and management.

3 Resource Monitoring and Management of Solaris 10 Resources
Solaris 10 [7, 8, 9, 10, 11] provides control resource usage based on workloads. A
workload is an aggregation of all processes of an application, or group of applications,
which makes sense from a business perspective. The Solaris OS provides a facility
called projects to identify workloads. The project serves as an administrative tag used
for group-related work in a manner deemed useful by the system administrator.
Once workloads are identified and labeled using projects, the next step in
managing resource usage involves measuring workload resource consumption.
Current consumption can be measured using the prstat command to obtain real-time
snapshot of resource usage. This command reads data stored in /proc VFS (Virtual
File System), where each process in the zone has its own subdirectory (in the global
zone there are also entries for processes from local zones). The most important
information is contained in psinfo, usage and status files. By summarizing
information about resource usage of processes it’s possible to calculate resource usage
of projects and zones. The capability to look at historical data is provided by the
Extended Accounting facility which allows collection of statistics at the process level,
task level or both. A task is a group of related processes executing in the same project.
Resource controls are configured through the project database. The last field of the
project entry is used to set resource controls. The resource controls can be
administered by two commands: prctl (get or set resource controls on a running
process, task or project) and rctladm (display or modify the global state of system
resource controls). This state is stored in the /etc/project file whose changes can be
monitored directly. Resource controls can define actions which should be performed
when resource usage is crosses some predetermined upper bound. These actions can
be observed through messages in the /var/admin/messages log file or catching sent
signals to those processes.
Solaris Zones provide a means to create one or more virtual environments on a
single operating system instance, shielding applications from details of the underlying
hardware. Applications in a single zone run in isolation from applications in other
zones. They cannot see, monitor or affect processes running in another zone. The
exception is the global zone which encompasses the entire system and is comparable
to a normal Solaris OS instance. It has access to the physical hardware and can see
and control all processes. The administrator of the global zone can control the system
as a whole. The global zone always exists, even when no other zones are configured.
Inside the global zone are local zones. These zones are isolated from the physical
hardware characteristics of the machine by the virtual platform layer. This layer

1042

K. Zieliński et al.

provides zones with a virtual network interface, one or more file systems and a virtual
console. The virtual console can be accessed from the global zone using the zlogin
command.
Zone administration tasks can be divided into two parts, global zone administration
tasks such as creating a zone, and local zone administration tasks such as performing
configuration within a zone. The four primary global zone administration tasks are:
configuration, installation, virtual platform management, zone login. The
configuration task defines zone resource controls which are enabled when the zone is
booted.
Regular resource management facilities such as resource controls, projects, and
more are available inside zones. Because projects are also virtualized inside a zone,
each zone has its own project database. This allows a local zone administrator to
configure projects and resource controls local to that zone. Furthermore, the Extended
Accounting framework has been extended for zones. Each zone has its own extended
accounting files for task-and process-based accounting that contain accounting
records exclusively for that zone.

4 JIMS Extension Concept
The presented advanced resource management techniques provided by the Solaris 10
introduce a number of logical elements that must be effectively managed and
configured. Such a system must be able to collect and publish various kinds of
information about configured elements on many hardware virtualized nodes. The
main assignments to be performed by the proposed JIMS extensions are:
• Collecting and publishing monitoring information about zones, projects and tasks;
the system must be able to expose real-time information about the current resource
usage e.g. CPU, memory, resource controls. Because Solaris 10 also introduces
Extended Accounting facilities, such information might be stored in a database
installed on the JIMS Access Node responsible for the management of Grid
Computational Nodes. This will enable e.g. billing the customers for consumed
resources or even calculating long-time resource usage trends. Since the system
administrator may perform some operations using native system tools, the
Monitoring Agent must also reflect these changes.
• Management of zones; adding or removing a given zone, lifecycle-related
operations (shutdown, halt, boot, ready), modifying zone values (devices, file
systems, attributes, resource controls).
• Management of projects; adding or removing projects, also modifying existing
projects’ attributes (name, comment, assigned users and groups, resource controls).
Non-functional requirements include ease of use and security. The first
requirement implies that running various system components should be relatively
simple (minimal need for human interaction) and also installation and configuration
of JIMS on many Computing Nodes should be automatic. This may be performed by
using N1 Service Provisioning Systems (N1 SPS) [5] which can install JIMS on many
nodes. Automatic installation of modules containing MBeans for monitoring and
management is performed by JIMS using the JMX Mlet-Service.

JIMS Extensions for Resource Monitoring and Management of Solaris 10

1043

The security aspect must take into account many things related to a broad variety of
managed resources which means that some operations such as creating zones,
modifying the projects database etc. may be allowed only for restricted groups of
users. The privileged position of operations performed in the global zone should be
very carefully analyzed. It is necessary to take into account situations when a security
domain consists only of local zones distributed over different global zones (physical
computers). An example of such a case is represented by Cluster B in Fig. 2.
Solaris10 OS Instance (Global Zone)

Solaris 10 OS Instance (Global Zone)

JIMS MA

JIMS MA
Zone 1

JIMS MA

JIMS MA

JIMS MA

Cluster A

Zone 2

Zone 1

JIMS MA
Zone 3

JIMS MA

Cluster B

Zone 3

Fig. 2. Intersected clusters which consist of zones installed on different Solaris 10 instances

This is why two deployment scenarios: Global Access and Restricted Access, have to
be considered. Clients in the Global Access scenario (see Fig. 3a) connect only to
JIMS MA installed in the global zone which has permission to perform operations on
all local zones in the current Solaris 10 OS instance. In the Restricted Access scenario
(see Fig. 3b) MAs are installed in Global and local zones. The MA installed in a local
zone is able to perform only operations on the given zone depending on the assigned
privileges. The JIMS client – e.g. Client2 in Fig. 3b -has to connect to specific JIMS
MAs to perform monitoring and management activities.
JIMS Client 1

JIMS Client 1

JIMS MA

JIMS MA

Zone 1

JIMS MA
Zone 1

Zone N

sc-enario

“Global Access” deployment
with

only

one

installed in the global zone

JIMS MA
Zone N
Solaris 10 OS
Instance

Solaris 10 OS
Instance

Fig. 3a.

JIMS Client 2

JIMS

MA

Fig. 3b.

“Restricted

Access”

scen-ario

with

MA

JIMS

deployment

installed

in

the

global and local zones

The functionality for the monitoring and management of Solaris 10 resources will be
exposed via an appropriate API which may be used by some external components. Because
JIMS is based on JMX architecture, the MBeans which implement the required functionality

1044

K. Zieliński et al.

suit this end perfectly.

5 JIMS Extension JMX-Based Implementation
The JIMS extension is a set of MBeans that expose an interface for Solaris 10
resource monitoring and management. These MBeans are divided into three groups:
monitoring, management and accounting. Inside each group there are MBeans for
zones and projects.
Resource monitoring (Fig. 4) MBeans contain read-only attributes with basic
information about zones or projects and their resource usage (CPU, memory, threads
etc.) This information is periodically retrieved from /proc VFS with the help of a
native library accessed through JNI (files in /proc VFS have platform-dependent
binary format and can’t be read directly from the Java application).

Fig. 4. Solaris 10 resource monitoring MBeans presented in JConsole

Solaris 10 management (Fig. 5) MBeans enable reading and changing properties of
zones and projects (i.e. resource controls, member users etc.) and also operations that
change zone state. They also allow creating or removing zones and projects. MBean

JIMS Extensions for Resource Monitoring and Management of Solaris 10

1045

interfaces depend on the zone in which the JIMS MA is running (different for global
and local zones), i.e. local zone management MBeans expose the boot operation only
in the global zone. Management MBeans use various methods to interact with the OS:
to collect information about zones and projects, MBeans read configuration files or
use JNI. Changes in configuration are applied by executing shell scripts and system
commands (with Runtime.exec() invocation). MBeans are able also to emit
JMX notifications to inform interested parties about changes in the system (i.e.
concerning added projects or changed resource usage).

Fig. 5. Solaris 10 management MBeans accessible via JConsole

The accounting group of MBeans exposes long-time historical resource usage
information. This information is collected periodically from extended accounting log
files and stored in a database. We have decided to use a Java-based DBMS and
integrate it within our application (to limit performance overhead). Log files are
switched periodically to avoid unnecessary duplicate processing of the same
information. Logs can be read only with the use of the libexacct API, available only
for C and Perl (not Java), therefore MBeans access it through a native library and JNI.

6 Conclusions
The proposed extension of the JIMS monitoring system with selected Solaris 10
resource monitoring and management mechanisms creates a very coherent and easy to
use environment. The provided functionality can be automatically discovered by the

1046

K. Zieliński et al.

JIMS self-configuration protocol, following which it may be accessed via a standard
web browser using http adapter support, by Web Services (with the JIMS SOAP
gateway implementation) or directly by any application written in Java using the
standard RMI protocol. The diversity of potential access channels makes the proposed
extensions easy to integrate with adaptation layers implemented in any technology.
The proposed concept of JMX-based OS mechanism exposition is rather general
and can be applied to any operating system. Therefore the proposed solution can be
used for adaptable reflective middleware construction, requiring access to underlying
OS functionality. It is also useful for any resource-aware applications or services.
An important feature of the proposed extension is the ability to use various
mechanisms for collecting operational data from the operating system. The
constructed MBeans exploit polling as well as notification mechanisms, which can
reduce operational overhead. The proposed solution can be also easily customized or
modified, even at runtime, due to dynamic MBean technology usage.
Acknowledgment. This research has been partially supported by Polish Ministry of
Education and Science grant no.1583/T11/2005/29.

References
1. K. Balos: JIMS -the JMX Infrastructure Monitoring System, http://www.eucrossgrid.org/Seminars-INP/JIMS_monitoring_system.zip
2. K. Balos, D. Radziszowski, P. Rzepa, K. Zielinski, S. Zielinski, ”Monitoring GRID
Resources – JMX in Action”, TASK Quarterly, pp. 487-501, 2004
3. Sun Microsystems: Java Management Extension Reference Implementation (JMX),
http://java.sun.com/products/JavaManagement/
4. Sun Microsystems: JMX Remote API Specification (JMX Remote API),
http://developer.java.sun.com/developer/earlyAccess/jmx/
5. N1 Provisioning System, http://wwws.sun.com/software/products/service_provisioning/
index.html
6. Autonomic Computing, http://www.research.ibm.com/autonomic/
7. Daniel Price, Andrew Tucker “Solaris Zones: Operating System Support for Consolidating
Commercial Workloads” (http://www.sun.com/bigadmin/content/zones/zones_lisa.pdf)
8. Amy Rich “Spotlight on Solaris Zones Feature“ (http://www.sun.com/bigadmin/features/
articles/solaris_zones.html)
9. Menno Lageman “Solaris Containers – What They Are and How to Use Them”
10. “System Administration Guide: Solaris Containers-Resource Management and Solaris
Zones” (http://docs.sun.com/app/docs/doc/817-1592)
11. OpenSolaris project website (http://opensolaris.org)

