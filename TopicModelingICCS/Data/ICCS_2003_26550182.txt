A Graphical Environment for GLADE
Ernestina Martel, Francisco Guerra, Javier Miranda, and Luis Hern´
andez
IUMA, Institute for Applied Microelectronics
and Departamento de Ingenier´ıa Telem´
atica
University of Las Palmas de Gran Canaria
Canary Islands, Spain
{emartel,fguerra,jmiranda,lhdez}@iuma.ulpgc.es

Abstract. This paper presents a graphical environment for programming distributed applications by means of GLADE. This environment
facilitates the conﬁguration and execution of Ada distributed applications. The environment frees the user from learning the GLADE
conﬁguration language, and keeps the state and the conﬁguration of
the system in a database for reconﬁguration purposes. In order to
provide fault tolerance the database can be replicated; the failure is
then automatically masked by the graphical environment.
Keywords: Distributed Conﬁguration, Ada, GLADE, Group IO

1

Introduction

The Distributed System Annex (DSA) of Ada95 [1] provides a model to program distributed applications. The implementation of such annex is found in
ADEPT [2] and GLADE [3]. In this paper we focus on GLADE, the GNAT implementation of the Ada95 DSA, because ADEPT has not evolved with recent
GNAT releases. GLADE’s users must program the Ada units and then write a
conﬁguration ﬁle.
Conﬁguration languages have been widely used for the construction of distributed applications in Conic [4], Durra [5], Regis [6], Olan [7] and Jaden [8].
Moreover, the design and development of Regis distributed programs are also
provided by means of a visual programming environment named Software Architect’s Assistant [9]. Furthermore, Piranha [10], a CORBA tool for high availability, includes some features to graphically manage the conﬁguration and execution
of CORBA applications.
One of our goals is to free the user from learning the GLADE conﬁguration language by means of an user friendly graphical interface. In our approach,
the user only needs to set the properties of the GLADE components, and program them according to the Ada 95 distributed model. Besides, some long-lived
applications need to keep their conﬁguration state to ease reconﬁguration.
This work has been partially funded by the Spanish Research Council (CICYT),
contract number TIC2001–1586–C03–03
J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 182–195, 2003.
c Springer-Verlag Berlin Heidelberg 2003

A Graphical Environment for GLADE

183

In a previous paper [11], we presented a tailorable Environment for Programming Distributed Applications (EPDA) which provides an environment for conﬁguration and execution of distributed applications. The environment is based
on the component-based model which has been highly exploited in Durra, Darwin, Olan and LuaSpace [12]. According to this model, distributed applications
are composed by components (with their properties) and the relationships between components. Components refer to software entities which must be located
on nodes, whereas properties deal with component description. Relationships
represent dependency between components. Therefore, distributed applications
can be viewed as a hierarchy of single and composite components. The tailorable
EPDA is customizable to diﬀerent distributed platforms by means of the EPDAModeler tool. In this paper we present an instantiation of the tailorable EPDA
for GLADE named GLADE EPDA, and therefore we focus on the conﬁguration
and execution of GLADE applications. In order to easily incorporate future features of GLADE to GLADE EPDA, GLADE EPDA does not modify GLADE
sources.
This paper is structured as follows. In Sect. 2 some details of the GLADE
EPDA are presented. Section 3 shows an example of both conﬁguration and
execution in the GLADE EPDA. Finally, we conclude and present the current
work.

2

GLADE EPDA Introduction

GLADE EPDA follows the client/server model. On the client side (Fig. 1a),
GLADE EPDA provides a GUI which enables the user to instantiate the allowed
GLADE components, their properties and relationships. This GUI is structured
in two sections: one for hardware components (node section) and another for
software components (application section). Every component instantiation is sent
to the GLADE EPDA server. The GUI has been developed by means of both
GtkAda and Glade (the user interface builder for Gtk+); the communication
between GLADE EPDA client-group of GLADE EPDA replicas and group of
GLADE EPDA replicas-GLADE EPDA proxy is provided by the communication
library Group IO [13].
The GLADE EPDA server (see Fig. 1b) keeps the conﬁguration of the system
and the instantiated components in a database. Besides, the GLADE EPDA
server processes the commands sent by the user through the GLADE EPDA
GUI. This means that the GLADE EPDA server must issue requests to the
physical nodes to know their current state and availability, or to execute/kill a
component. Therefore each physical node must have a proxy (see Fig. 1c) which
executes the requests issued by the group of GLADE EPDA replicas. In order
to guarantee data availability in presence of node failures the GLADE EPDA
server can be replicated [14]. In this case the proxy must also ﬁlter the duplicated
requests issued by the replicas of the GLADE EPDA server. In order to provide
a higher level of fault tolerance on the server side, the group of GLADE EPDA
replicas is dynamic; that is, in case of replica failures, new replicas can be entered

184

E. Martel et al.

database
management

GLADE EPDA
replica code

GUI
database
management

(a) GLADE EPDA client

(c) GLADE EPDA proxy
GLADE EPDA
replica code

(b) group of GLADE EPDA replicas

Fig. 1. GLADE EPDA architecture

the group to keep the replication degree: the incoming replicas receive the state
from the live replicas, and only then they start working as another member of
the group [13].
In the following subsections, we centered on some details of the GLADE
EPDA functionality: the conﬁguration and execution of GLADE applications.
2.1

GLADE EPDA Conﬁguration

The GLADE EPDA conﬁguration has two main parts: the hardware and software conﬁguration. The former allows us to deﬁne the nodes of the distributed
system, whereas the latter focuses on the instantiation of the GLADE components (applications, partitions, channels and Ada units).
In the hardware conﬁguration, GLADE EPDA distinguishes two node types:
abstract and physical nodes. Ada partitions run on abstract nodes and abstract
nodes must be assigned to physical nodes. This indirection level lets the user reconﬁgure Ada applications without changing the application conﬁguration but
only the association between abstract and physical nodes in the node conﬁguration. GLADE EPDA prevents the user from assigning one abstract node to
more than one physical node. The binding of application’s abstract nodes can
be modiﬁed at any time, but always before its execution. The tool avoids the
execution of applications with abstract nodes which are not assigned to physical
nodes.
In the software conﬁguration GLADE EPDA allows us to instantiate the
GLADE components: applications, partitions, channels and Ada units. Applications are formed by partitions and optionally channels: a partition is a collection
of Ada units and the main distribution unit, whereas a channel describes the
bidirectional communication between partitions. Two kinds of partitions are
considered: active and passive partitions. The GLADE EPDA GUI represents
the hierarchy of components by means of a graphical tree where applications
are allowed in its ﬁrst level, partitions and channels must be in the second level

A Graphical Environment for GLADE

185

Table 1. Properties of GLADE components in GLADE EPDA GUI
GLADE COMPONENTS
PROPERTIES
Application Partition Channel Ada Unit
Application name
X
Partition name
X
Channel name
X
Ada unit name
X
Application’s main procedure
X
Application’s main procedure partition
X
Partition’s main procedure
X
Starter
X
Boot location
X
Self location
X
Passive
X
Data location
X
Task pool
X
Version control
X
Target host name
X
X
Target host function
X
X
Register ﬁlter
X
Storage directory
X
X
Reconnection policy
X
Termination policy
X
Filters
X
X
X
Command line
X
First Partition
X
Second Partition
X
Source Host
X
X
X
Source Directory
X
X
X

and Ada units in the third level. In this hierarchy, the GLADE components in
a level constitutes the container of the components in the following immediate
level. For each component instantiation, its properties and the relationship with
other components must be introduced. The features of the GLADE conﬁguration language (described in GLADE User’s Guide [15]) are the properties of the
GLADE components in our GUI (see Table 1). Some of the properties are associated exclusively to a speciﬁc GLADE component, whereas some properties
are common to diﬀerent components. When a property is common to diﬀerent
component instances in the same hierarchy, the property of the component in
the lower level overrides the property of the component in the higher level. For
instance, let us suppose the user deﬁnes the storage directory “temp” for a new
GLADE application, which means that all the partitions will have the same value
for the storage property. If the user redeﬁnes the storage property for one of the
partitions of the application, every partition of the application will use “temp”
as storage directory, except for the one whose property has been redeﬁned.
Apart from the above mentioned properties, we add the source location property (showed in italics in Table 1) for applications, partitions and Ada units to
specify the source host and directory where the source code is provided. Moreover, some of the properties are compulsory (e.g. the component names, the
application target host, etc.), whereas others are optional. Furthermore, every
property which involves a host must be fulﬁlled with an abstract node name
(this abstract node is automatically added to the abstract node area in the node
section of the GLADE EPDA GUI). The user does not have to fulﬁll all the con-

186

E. Martel et al.

ﬁguration values because most of them are set to their default values. Besides,
some properties are formed by a set of parameters which only are shown when
the property is marked. For example, the source location property is formed by
two parameters: the source host and the source directory. These parameters are
shown when the user selects the source location property; otherwise they are not
visible.
2.2

GLADE EPDA Execution

Once the conﬁguration is completed, the hierarchy of components and their
properties are kept in the GLADE EPDA server’s database and the application
is ready for execution or reconﬁguration (any conﬁguration change before the
application execution). When the user executes an existing application by means
of the menu bar option (in the GLADE EPDA GUI), the GLADE EPDA server
carries out the following steps: (1) to generate the GLADE conﬁguration ﬁle
(.cfg) and install the source code; (2) to process the conﬁguration ﬁle; (3) ﬁnally,
to launch the application. GLADE EPDA also allows this execution step by step.
Every GLADE EPDA replica generates the GLADE conﬁguration ﬁle for
each application (from the conﬁguration data in the GLADE EPDA replica’s
database) and installs the source code in its local disk. Some checks are made
before the generation of the .cfg ﬁle: (1) all the abstract nodes must be assigned
to one of the available physical nodes, that is, the physical nodes which have been
added to the GLADE EPDA; (2) as the main procedure for a GLADE application
must be speciﬁed along with a partition (the partition where it will be located),
the GLADE EPDA checks whether this partition has been instantiated before
the generation of the conﬁguration ﬁle; (3) channels must be formed exactly
by two partitions1 . Moreover, for the generation of the conﬁguration ﬁle, every
abstract node which is used in the conﬁguration of the application is replaced by
the corresponding physical nodes. The generation of the conﬁguration ﬁle only
involves those attributes which have been considered in the GLADE release (the
source location property is not considered in the conﬁguration ﬁle but in the
application installation).
The application installation implies installing the source code of all the components of the application in the target nodes. Every GLADE EPDA replica
knows the allocation of this code and it is copied to its local disk. The source
code, like the conﬁguration ﬁle, is kept in the local disk of every replica in order
to guarantee its availability in presence of node failures.
Both the conﬁguration ﬁle and the source code are needed to generate the
binaries by means of the GLADE gnatdist tool. These steps take place in the target host of the application (compulsory property for applications in the GLADE
EPDA). In consequence, the GLADE EPDA replica must send both the conﬁguration ﬁle and the Ada source code to the GLADE EPDA proxy on the target
host.
1

Although two partitions are deﬁned during the instantiation of the channel, the user
may have deleted one of them through the GUI utilities.

A Graphical Environment for GLADE

187

Finally, the application is launched. However, in GLADE there are diﬀerent
ways to start an application which are decided at conﬁguration time: (1) if the
user speciﬁes the Starter property as None, the startup must be done manually;
(2) if the Starter property is set to Ada, the startup is made from an Ada
program; (3) if the Starter is set to Shell, the application is launched from a
shell script. In the ﬁrst case, at conﬁguration time the user must indicate the
startup order of the partitions (e.g. the partition server must be launched before
the partition client) and the GLADE EPDA launches the application according
to the order speciﬁed by the user. In the remaining cases, the GLADE EPDA
proxy launches the application from the speciﬁed starter: an Ada binary or a
shell script.

3

GLADE EPDA Usage Example

This section presents the conﬁguration and execution of an Ada95 distributed
application through the GLADE EPDA. It is structured as follows. Section 3.1
brieﬂy summarizes the Bank example which is provided in the GLADE release.
Section 3.2 introduces some speciﬁc features of the GLADE EPDA to the conﬁguration of the Bank example. Section+3.3 describes the user actions to conﬁgure and execute the Bank example throughout the GLADE EPDA (client and
server).
3.1

GLADE’s Bank Example

The Bank example provided with the GLADE release is a client/server application. The server manages a simple database with the client accounts (the name,
password and balance of the customers). The clients are provided with the following utilities: to present their balance, to withdraw or deposit money into their
account and to transfer money from their account to the account of someone else.
Several Ada units are developed for the Bank example: Bank, Alarm, etc. However, the main Ada units for this application are the following: the Server (the
only RCI package), the Manager and the Client. The user must specify the partitions of the application at conﬁguration time, and GLADE builds them from
the provided Ada units.
The Bank application, named Simcity in the GLADE release, has the following properties: the starter method (None) indicates a manual startup of the
application; there is no version control (Version is set to false); the boot server
location is described by means of the protocol (tcp), host (localhost) and port
(5557); the main procedure of the Simcity application (Manager) will be located
into the Bank Server partition. The Simcity application has two partitions: the
Bank Server partition, which contains the Server Ada unit, and the Bank Client
partition, with the Client main procedure, and a Local policy of termination.

188

3.2

E. Martel et al.

Additional Properties for the Bank Example in the GLADE
EPDA

Although the basic properties for the Simcity application have been presented,
some additional properties must be provided to the GLADE EPDA. First, the
location of the source code (source location) and the site where the components
will be launched (target location) must be set. As we stated in Sect. 2.1, these
locations are composed by an abstract node and a directory (in the form abstract node:/directory). Thus, the Simcity’s source location is set to node1:/src,
whereas its target location is set to node2:/bin. Although the location nodes are
speciﬁed in terms of abstract nodes, they must be bound to physical nodes before
the execution of the Simcity application. Due to this fact, physical nodes of the
distributed system must be setup (for example, pcemartel, pcfguerra and pcjmiranda), and then the user associates each abstract node to one of the available
physical nodes. For example, we have bound node1 to pcemartel and node2 to
pcfguerra for a distributed execution; for a centralized execution, all the abstract
nodes can be bound to only one physical node, i.e. localhost.
3.3

User Actions in GLADE EPDA

The user actions are given in two stages: component conﬁguration stage and
application execution stage. Component conﬁguration implies fulﬁlling its properties and its relationship with other components. This information is sent to
the GLADE EPDA server to be stored in its database. The user actions to conﬁgure and execute applications are the following: (1) to create the application;
(2) to create the partitions and channels which are contained into the application; (3) to create the partition’s Ada unit; (4) to create the abstract nodes and
the binding between the abstract nodes and the available physical nodes of the
distributed system; (5) to execute the application. In the following, we describe
the user actions for the Bank example throughout GLADE EPDA.
Step 1: Application Creation. For the Bank example, the user must create
the Simcity application through the application section of GLADE EPDA GUI.
At ﬁrst, there is no component in the application section and the application
creation is the only allowed option in the menu bar (see Fig. 2a). When the
user selects this option, a property form is presented in the right area of the
application section (see Fig. 2b). Simcity properties are fulﬁlled and sent to the
GLADE EPDA server when the conﬁrmation button of the form is clicked. After
the application registration on the server side, Simcity is added to the application
tree of the GLADE EPDA GUI (see Fig. 2c); otherwise, a warning message is
presented to the user.
Step 2: Partition and Channel Creation. After the application creation, the
user deﬁnes its partitions and channels. This implies registering its properties
and its container application in the server’s database. For the partitions two
choices are presented: active and passive partitions.

A Graphical Environment for GLADE

189

(a) Select the application
creation option in the
menu bar
(b) Fulfill the application’s properties

(c) Show the new application in the application tree

Fig. 2. An example of application creation

For the Simcity application, the Bank Client and Bank Server partitions
must be created (in this example, no channels are deﬁned). For this, the user
selects the container application (Simcity) in the application tree of the GLADE
EPDA GUI, and accesses to the option in the menu bar which allows partition
creation. Figure 3a shows the selection of the Simcity application in the left area.
Because the Simcity application is selected, two choices are available in the menu
bar: to add either a partition or a channel. If the operation to add a partition is
selected, a property form is presented in the right area of the application section
(see the right area of Fig. 3a). This form is used to introduce the properties of
the Bank Client partition. After a click in the conﬁrmation button of the form,
the properties and the relationship between the Bank Client partition and its
container (Simcity) are sent to the GLADE EPDA server. After the registration
of these data in the server’s database, the Bank Client is added to the Simcity’s
tree in the GLADE EPDA GUI (see Fig. 3b).
The creation of the Bank Server partition is similar to the creation of the
Bank Client partition, except for its speciﬁc properties and the creation of its
Ada unit (Server). Due to the fact the Server Ada unit is created in the following
step, the user only has to introduce the name of the Bank Server partition. Ada
units are created in the following step because they are only allowed in the third
level of the application hierarchy in the GLADE EPDA GUI.

190

E. Martel et al.

(a) Selection of Simcity (left area) and property form (right area)
(b) The resultant hierarchy after the Bank_Client creation

Fig. 3. An example of partition creation

Step 3: Ada Unit Creation. This step allows us to deﬁne the Ada units of
partitions. For the Bank example, Server is the only RCI Ada unit contained
in the Bank Server partition. For the creation of this Ada unit, the user selects
the container partition (Bank Server) and accesses to the menu bar option to
create an Ada unit. After this, a property form is presented in the right area
of the application section. The only property for the Server Ada unit is its
name, which is sent to the GLADE EPDA server along with the container name
(Bank Server). As always, the Server Ada unit is added to the application tree
when the registration on the server side is completed. The resultant application
hierarchy is showed in Fig. 4.

Step 4: Physical and Abstract Node Creation and Binding. Whenever
a GLADE EPDA proxy is installed on a physical node of the distributed system,
a message is sent to the group of GLADE EPDA replicas in order to register
the physical node properties: name, IP address, CPU, operating system and
the identity of its proxy. After the registration of the physical node, an icon
is automatically added to the physical node section of the GUI. Therefore, the
available physical nodes in GLADE EPDA are those which have been registered
to the group of GLADE EPDA replicas. The system formed by these physical
nodes is heterogeneous as each proxy will compile the partition for the target.
Abstract nodes are referenced during the creation of application components
(for instance, node1 and node2 are used as properties of Simcity). GLADE EPDA
adds automatically the abstract nodes which have been referenced in the component creation to the abstract node area in the GLADE EPDA GUI’s node
section (see node1 and node2 in Fig. 5). Any abstract node which is added to the
GLADE EPDA GUI is sent to the GLADE EPDA server’s database. GLADE

A Graphical Environment for GLADE

191

Fig. 4. Simcity hierarchy

EPDA also allows to create abstract nodes directly through the menu bar in the
node section.
Every abstract node must be assigned to one of the available physical nodes
in the node section of the GLADE EPDA GUI before the application execution.
The abstract nodes which are referenced by the Simcity application (node1,
node2) must be bound to the available physical nodes in the GLADE EPDA
(pcemartel, pcfguerra, pcjmiranda): the user selects the set of abstract nodes
to bind, the menu bar option for binding and the target physical node for the
bind operation. In Fig. 5a the user has selected only one abstract node (node1)
and also the menu bar option for binding. After this, the user is asked for the
selection of the target physical node and pcemartel is selected (see Fig. 5b).
Finally, node1 is bound to pcemartel and added to the physical node tree in the
node section. Figure 5c shows the binding between node1 and pcemartel, and
node2 and pcfguerra.
Step 5: Application Execution. After the application conﬁguration, the application is ready to be executed. The application execution depends on how the
Starter property of the application has been conﬁgured. When this property is
set to None the user will be asked for the execution order of the partitions.
For the Bank example, the user executes the Simcity application through
the menu bar of GLADE EPDA GUI’s application section. Because the Starter
property is set to None, the user is asked for the execution order of the partitions:
the server partition (Bank Server) must be executed before the client partition
(Bank Client). This information along with the execution command is sent to the
GLADE EPDA server (see Fig. 6-1). When the execution command is received

192

E. Martel et al.

(a) Select abstract nodes
and access to the option
of the menu bar
(b) Select the target
physical node

(c) The resultant node tree

Fig. 5. An example of binding between the abstract and physical nodes

on the server side, the GLADE EPDA replicas do the following actions according
to the conﬁguration data in the GLADE EPDA replica’s database:
– To generate the conﬁguration ﬁle (simcity.cfg) and install the code from the
source location to its local disk2 (see Fig. 6-2). For the Bank example, this
location is node1:/src, and because node1 is bound to pcemartel, the GLADE
EPDA replicas copy the source code from pcemartel to its local disk.
– To send the execution request to the proxy in the target location: node2:/bin
(see Fig. 6-3). Because applications run on physical nodes, the GLADE
EPDA replicas get the corresponding physical node for node2 (pcfguerra
because node2 is bound to it). Therefore, the execution request is sent to the
proxy in pcfguerra along with the conﬁguration ﬁle, the source code and the
execution order of the partitions.
Finally, the GLADE EPDA proxy processes the simcity.cfg by means of the
gnatdist simcity (see Fig. 6-4) and launches the application according to the
execution order: ﬁrst, the Bank Server partition, and then the Bank Client partition. Both partitions are launched in the application’s target host (pcfguerra)
because no target host was speciﬁed for these partitions.

2

The source code and the conﬁguration ﬁle are stored in the local disk of every replica
in order to guarantee their availability in presence of node failures.

A Graphical Environment for GLADE

193

GLADE EPDA

P1

(2)

Run simcity

pcemartel

GUI

(1)

P3

(2)
(2)

(3)

P2

(4)

pcjmiranda

pcfguerra

group of replicas
CLIENT

proxies

SERVER

(1) GUI run command
(2) Genenerate the configuration file (simcity.cfg), install the source code from
pcemartel (node1) to its local disk and get the proxy for pcfguerra (node2)
(3) Installs the source code and send the configuration file (simcity.cfg) to
pcfguerra
(4) Execute ’gnatdist simcity’ and start the application

Fig. 6. Execution of the Simcity application

4

Conclusions and Current Work

This paper has presented an environment to conﬁgure and execute GLADE
distributed applications. It is assumed that the user writes the code according to
the distributed model of Ada95 and knows the component properties of GLADE.
The GUI facilitates the GLADE conﬁguration as the user does not have to get
used to the GLADE conﬁguration language. The environment keeps the state and
data conﬁguration to provide a basic level of static reconﬁguration. Furthermore,
GLADE EPDA’s functionality is provided without altering the GLADE release,
which facilitates the addition of future GLADE features to the current GLADE
EPDA. Therefore, each feature provided by GLADE is provided by GLADE
EPDA as long as the related conﬁguration property is included in the GLADE
EPDA’s GUI.
Nowadays, the main limitation of the GLADE EPDA is located on the client
side because software clients must be generated for diﬀerent operating systems
(Windows, Linux, Solaris, etc.) and installed in every client node. In order to
gain ﬂexibility, we are now moving to an environment where the conﬁguration
and execution is made from a Web navigator. In this approach there is no need
to install speciﬁc software on client-side in order to provide conﬁguration and
execution of distributed applications. We are working on that direction through
AWS (Ada Web Server) [16].
On the other hand, the interaction between the GLADE EPDA replica and
its database has been implemented by means of a binding to postgresql, without
support for odbc. We plan to use GNADE (GNAT Ada Database Development
Environment) [17] for this purpose.

194

E. Martel et al.

The reconﬁguration provided by the GLADE EPDA must take place before
the execution of the involved application. In future research work, we are interested in some dynamic reconﬁguration issues: migration, load balancing, etc.
Moreover, we plan to add graphical support for monitoring the state of distributed applications during their execution, that is, to view the load of the
nodes, the components in execution, etc.
Ackowledgments. The authors would like to thank David Shea of the Faculty
of Translation and Interpretation (University of Las Palmas de Gran Canaria)
for editorial assistance.

References
1. Intermetrics. Ada 95 Language Reference Manual. International Standard
ANSI/ISO/IEC-8652: 1995, January 1995.
2. Gargaro, Kermarrec, Nana, Pautet, Smith, Tardieu, Theriault, Volz, and Waldrop.
Adept (Ada 95 Distributed Execution and Partitioning Toolset). Technical Report,
April 1997.
3. L. Pautet, T. Quinot, and S. Tardieu. Building Modern Distributed Systems.
In 2001 Ada-Europe International Conference on Reliable Software Technologies,
pages 122–135, Belgium, May 2001. Springer-Verlag.
4. G. Etzkorn. Change Programming in Distributed Systems. In Proceedings of
the International Workshop on Conﬁgurable Distributed Systems, pages 140–151,
United Kingdom, March 1992.
5. M. Barbacci, C. Weinstock, D. Doubleday, M. Gardner, and R. Lichota. Durra: a
Structure Description Language for Developing Distributed Applications. Software
Engineering Journal, 8(2):83–94, March 1993.
6. J. Magee, N. Dulay, S. Eisenbach, and J. Kramer. Specifying Distributed Software
Architectures. In W. Schafer and P. Botella, editors, Proc. 5th European Software
Engineering Conf. (ESEC 95), volume 989, pages 137–153, Sitges, Spain, 1995.
Springer-Verlag, Berlin.
7. R. Balter, F. Bellisard, Boyer, M. Riveill, and J.-Y. Vion-Dury. Architecturing
ans Conﬁguring Distributed Application with Olan. In Proceedings IFIP International Conference on Distributed System Platforms and Open Distributed Processing (Middleware’98), pages 15–18, The Lake District, September 1998.
8. J. Bishop and L. Botha. Conﬁguring Distributed Systems in a Java-based
Environment.
In IEEE Proceedings of Software Engineering, pages 65–74,
http://citeseer.nj.nec.com/botha00conﬁguring.html, April 2001. IEEE Computer
Society.
9. K. Ng, J. Kramer, J. Magee, and N. Dulay. A Visual Approach to Distributed
Programming. In Tools and Environments for Parallel and Distributed Systems,
pages 7–31. Kluwer Academic Publishers, February 1996.
10. S. Maﬀeis. Piranha:A CORBA Tool for High Availability. IEEE Computer, pages
59–66, April 1997.
11. E. Martel, F. Guerra, and J. Miranda. A Tailorable Distributed Programming
Environment. In 2002 Ada-Europe International Conference on Reliable Software
Technologies, pages 269–281, Vienna, June 2002. Springer-Verlag.

A Graphical Environment for GLADE

195

12. Tha´ıs Batista and Noemi Rodriguez. Dynamic Reconﬁguration of Componentbased Applications. In IEEE, editor, Proceedings of the International Symposium
on Software Engineering for Parallel and Distributed Systems (PDSE 2000), volume 989, pages 32–39, Limmerick, Ireland, 2000.
13. F. Guerra, J. Miranda, J. Santos, E. Martel, L. Hern´
andez, and E. Pulido. Programming Systems with Group IO. In Proceedings of the Tenth Euromicro Workshop on Parallel, Distributed and Network-based Processing, pages 188–195, Canary
Islands, Spain, January 2002. IEEE Computer Society Press.
14. F. Guerra, J. Miranda, J. Santos, and J. Calero. Building Robust Applications by
Reusing Non-Robust Legacy Software. In 2001 Ada-Europe International Conference on Reliable Software Technologies, pages 148–159, Belgium, May 2001.
Springer-Verlag.
15. L. Pautet and S. Tardieu. GLADE User’s Guide. Version 3.14p. GNAT, May
2001.
16. D. Anisimkov and P. Obry. AWS User’s Guide. Version 1.2. ACT, Ada Core
Technologies, October 2001.
17. M. Erdman. Gnat Ada Database Development Environment. In 2002 Ada-Europe
International Conference on Reliable Software Technologies, pages 334–343, Vienna, June 2002. Springer-Verlag.

