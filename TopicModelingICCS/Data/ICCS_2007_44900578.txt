Encoding-Based Tamper-Resistant Algorithm for Mobile
Device Security
Seok Min Yoon, Seung Wook Lee, Hong Moon Wang, and Jong Tae Kim
School of Information and Communication Engineering,
Sungkyunkwan University, Korea
jtkim@skku.ac.kr

Abstract. Due to the advance in development technology for mobile systems,
the attacks on the embedded systems become sophiscated. Especially,
tampering with the infomation of mobile devices by software or hardware
attack may lead to a serious problem like leaking personal information. In order
to protect the tampering attack, encryption technique for embedded information
is proposed. However, when the specification of encryption algorithm is known,
the system is easily tampered. In this paper, we propose a novel tamperresistant algorithm by encoding program instructions, which can detect the
tampering attack. In this algorithm, when a malicious attacker try to tamper
with a part of the system, the logical interdepency of program instrutions make
it impossible unless he gets the access authorization of whole system.
Keywords: Tamper-resistant, Security, Mobile Device.

1 Introduction
While technological advances that have improved the development of embedded
systems bring the conveniences in human life, it can lead to serious problems: leaking
out personal information which stored in a handheld mobile embedded system such as
PDAs and smart phones or operating unattempted actions by malicious attacker[1].
The attacks on the embedded systems can be classified in two categories: software
attack which exploits implementation flaws by attacking vulnerability of software and
hardware attack which exploit the internal information by physical modification or
external devices[1]. The hardware attacks which are frequently used on the embedded
system are bus tapping and data alteration between processor and external devices.
The bus tapping and data alteration, mixed with software vulnerability, may give
more ways of breaking a system to a malcious attacker[2][3]. Since the information
which saved in a system can be exposed directly by the bus tapping, encryption of
internal information techniques are proposed to protect the system[4]. However,
Huang proved that the security techniques are neutralized by data which is acquired
by tapping system bus exposed externally with simple hardware attachment in case
the secret key used in encryption process is known by attacker[5].
In this paper, we propose a tamper-resistant algorithm based on the encoding process of program instructions. The mobile device with the encoding algorithm achieves
high security, because it detects both software and hardware attacks effectively by
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 578–581, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Encoding-Based Tamper-Resistant Algorithm for Mobile Device Security

579

checking the interdependencies of instructions[6]. Especially, it can prevent abnormal
changes of control routine and execution of malicious program code.

2 Tampering Detection Algorithm
A properly working program means that it works as the way intended by developers,
that is, the program which does not work as the way intended by developers is not
working properly. It means that every program have an execution sequence of instructions which is intended by developers. An instruction executing currently by a processor has interdependencies with a previously executed instruction, and also with a next
instruction. If there are abnormal instructions which are not intended by developers in
the sequence of execution, interdependencies of instructions are broken. We can,
therefore, detect the software and hardware attacks on our system effectively if it is
possible to check the integrity of current instruction by examining interdependencies
among previous instruction, current instruction and next instruction.
We derive the interdependencies of the instructions by encode current instruction
with previous instruction and next encoded code as shown in figure 1. The encoding
and decoding operation of current instruction are defined as below.
Ct = Ek(It xor It-1 xor Ct+1)

(1)

It = Dk(Ct) xor It-1 xor Ct+1
(2)
E is an encoding function and D is a decoding function which use cryptography algorithm(ex. DES, AES) with secret key k. The previous instruction and next encoded
code are necessary in decoding process, so a processor needs two registers for them.
Instruction

Encoded Code

#

#

ldr

r6,

str

r6,

mov

r6,

=0x10

I(t-1)

I(t)

add

r5,

E

C(t-1)

E

C(t)

E

C(t+1)

E

C(t+2)

[r0, r2]

r6,
I(t+1)

LSL#1

r5,
I(t+2)

#1

#

#

Fig. 1. Encoding process of instructions

3 Handling of Broken Interdependency
Basic concept of our algorithm is continuous checking process with the interdependencies of instructions. However, we cannot conclude that every point of broken
interdependency is not a point having security problems. In ordinary program, the

580

S.M. Yoon et al.

interdependency can be broken by the nature of program itself. The interdependency
with a previous instruction cannot be assured at the starting point of a program and
the interdependency with a next instruction cannot be assured at the end point of a
program. We solve this problem by using magic numbers. Figure 2 shows a simplified program containing m number of instructions. By setting M1 as a magic number
that only the developers of security process know, the encoding process can be
started at the starting point of the program. Similarly, by setting M2 as a parity of
whole program, encoding process can be done at the end point.
Instruction

Encoded Code

M1
I1

C1=Ek(I1 xor M1 xor C2)

I2

C2=Ek(I2 xor I1 xor C3)

I3

C3=Ek(I3 xor I2 xor C4)

I4

C4=Ek(I4 xor I3 xor C5)

…

…

Im

Cm=Ek(Im xor Im-1 xor M2)

M2

Fig. 2. Simplified program

0x2000000

mov

r5,

#0

0x2000004

ldr

r6,

=0x10

0x2000008

nop

0x200000c

led_loop:

0x200000c

str

r6,

[r0, r2]

0x2000010

mov

r6,

r6,

LSL#1

0x2000014

add

r5,

r5,

#1

0x2000018

cmp

r5,

#loopnum

0x200001c

bne

led_loop

0x2000020

ldr

r0,

=0x001f

Fig. 3. Insertion of NOP operation

Branch instruction can make a broken interdependency. To prevent this problem,
we insert a NOP(No OPeration) instruction at the branch address shown in figure 3.
Whenever a branch instruction is executed, NOP instruction is executed. In general,
as the NOP instruction does not have operands, we can save parity as operands for
additional comparison process.

4 Security Analysis
The encoding and decoding functions use cryptography algorithms. Generally, the
key length is very important, because the safety of cryptography algorithms relies on
the length of secret key. We assume that the system has 32 bits instruction length, and
encoding and decoding operation use 32 bits secret key and the length of encoded
code is 32 bits. The 32 bits secret key is fragile on safety because of small key space
of 232. In order to make up for the weak point, we rearrange the bit composition of
encoding input. This has the same effect as increasing the number of cases. Then, the
attacker should know the encoding algorithm, the secret key and the bit composition
of data used during encoding process. If the attacker know the encoding algorithm,
the probability, which the attacker successes on decode, is 3×32!×232≈2151 because the
attacker should know the secret key, 232, and the bit composition of each input,
32!×32!×32!. In other words, the encoding algorithm has the same effect as using 151
bits secret key.
The basis of our algorithm is logical clearance of the interdependency, not the
computational complexity of encoding algorithm. In order to execute current instruction, the integrity of previous instruction, and next instruction should be assured, and

Encoding-Based Tamper-Resistant Algorithm for Mobile Device Security

581

the interdependency should be guaranteed logically. As we can see in figure 1 and 2,
the encoded code I(t) has the interdependencies with previous and next instruction
until the end of the program. This means that the interdependencies of whole program
are affected by each instruction. In other words, if one instruction has a problem, this
problem destroys the interdependencies of whole program.

5 Conclusion
In this paper, we proposed an encoding-based tamper-resistant algorithm by checking
the interdependency of program instructions as a countermeasure against the malicious attacks on embedded system. The proposed algorithm prevents the system from
executing abnormal instructions, when the system is tampered by software or hardware attacks. The encoding algorithm of instruction has the same effect as an cryptography algorithm using 151 bits length of secret key on the system having 32 bits
length of instruction. In addition, the logical clearance of interdependency of program
instructions makes the attacker impossible to tamper the system unless the attacker
gets the access authorization of whole system.
Acknowledgments. This work was supported by the Korea Research Foundation
Grant funded by the Korean Government (MOEHRD, Basic Research Promotion
Fund) (KRF-2006-521-D00376).

References
1. S. Ravi, A. Raghunathan, P. Kocher and S. Hattangady, “Security in Embedded Systems:
Design Challenges”, ACM Transactions on Embedded Computing Systems: Special Issue
on Embedded Systems and Security (Guest Editors: D. Serpanos and H.Lekatsas), 2004.
2. X. Zhuang, T. Zhang, and S. Pande. Hide “An infrastructure for efficiently protecting information leakage on the address bus”, In Proceedings of the ASPLOS-XI, Oct. 2004.
3. G.E. Suh, D. Clarke, B. Gassend, M.v. Dijk, S. Devadas, “aegis: Architecture for TamperEvident and Tamper-Resistant Processing”, In Proceedings of the 17th Int. Conference on
Supercomputing, Jun. 2003.
4. G.E. Suh, D. Clarke, B. Gassend, M.v. Dijk, S. Devadas, “Efficient Memory Integrity Verification and Encryption for Secure Processors”, Proc. Annual IEEE/ACM Int. Symposium
on Microarchitecture (MICRO), pp. 339-350, Dec. 2003.
5. Andrew Huang, “Keeping Secrets in Hardware: The Microsoft XboxTM Case Study”, pp.
213 - 227, May, 2002.
6. S. W. Lee and J. T Kim, “Tampering Detection Technique in Instruction Level using Error
Detection Code”, Lecture Series on Computer and Computational Sciences, Nov. 2005..

