SPURport: Grid Portal for Earthquake
Engineering Simulations
Tomasz Haupt, Anand Kalyanasundaram, Nisreen Ammari, Krishnendu Chandra,
Kamakhya Das, and Shravan Durvasula
Mississippi State University, Center for Advanced Vehicular Systems,
Box 5405, Mississippi State, MS 39762, USA
{haupt, anand, ammari, krish, das, sharvan}@cavs.msstate.edu
http://www.cavs.msstate.edu

Abstract. This paper presents a successful implementation of the SPURport, a
prototype Grid Portal for the earthquake engineering community. The portal
eliminates the need for installing and maintaining simulation software by the
end user. However, the portal infrastructure is application-neutral and can be
used as a blueprint for developing portals for other communities. It provides
seamless access to remote resources and supports the incorporation of legacy
applications. It uses XML-based metadata extensively, which enables the introduction of high-level middle-tier services that aggregate and coordinate lowerlevel services provided by the Globus toolkit. For example, the high level Job
Submission Service orchestrates resolution of logical entities, file transfers, and
data streaming prior to actual job submission, hiding these activities from the
end user.

1 Introduction
This paper describes a successful implementation of the SPURport - a prototype Grid
Portal for the earthquake engineering community. The portal builds on and extends
the current functionality of the NEESgrid [1], the cyberinfrastructure for the Network
of Earthquake Engineering Simulations (NEES) [2]. The NEESgrid, in turn, is an
application of OGSI/Globus Toolkit 3.0 [3]. The grid portal consists of three major
components: a Web Portal providing the remote access to the SPURport functionality,
the Grid Portal middleware that implements the portal specific services, and the backend comprising the computational resources as well as data and metadata repositories.
The Web Portal is implemented using the CHEF[4] portal toolkit that adds collaborative features to the JetSpeed[5] portlet framework hosted by the Apache-Tomcat
server. Since the portal front end is implemented as a portlet, it can be implemented
using other portlet containers. Indeed, we have an alternative implementation using
JSR-169 compliant GridSphere[6] toolkit. The use of CHEF is dictated by the integration with the NEESgrid. The portlet technology is widely used to implement Web
Portals and it is recommended by the Open Grid Computing Environments consortium [7]. The portal toolkits, such as CHEF or GridSphere, provide a set of build-in
portlets such as secure login (including access to myProxy server), user management
and templates for the portal pages layout. They also provide a support for accessing
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 493 – 500, 2005.
© Springer-Verlag Berlin Heidelberg 2005

494

T. Haupt et al.

remote services through Globus infrastructure (Java Cog [8]). However, access to the
low level Globus functionality is not sufficient for implementing complex Grid
Portals such as SPURport.
The actual functionality of SPURport is implemented by the SPURport middleware
that creates a bridge between the required portal functionality and low level Globus
services. Particular important is support for the incorporation of the legacy applications and orchestrating Globus services to perform complex tasks. Although driven by
the specific requirements of earthquake engineering, the middleware is applicationneutral, and can be reused for other application domains.
The rest of this paper is organized as follows: Section 2 briefly summarizes the
goals of the SPUR project. Section 3 describes the requested functionality of the portal, and Section 4 explains the portal implementation. Due to space limitations, only
selected portal features and the middle-tier implementation to support these features
are discussed. Summary and conclusions are given in Section 5.

2 Large-Scale Seismic Performance of Urban Regions
The SPUR (Seismic Performance of Urban Regions) project is using the NEESgrid
technology to link high-end simulations of earthquake ground motion, advanced models for building performance, large-scale databases, and visualizations to develop new
knowledge about the spatial distribution of structural damage in a region and the effectiveness of building codes on controlling damage in a region. In this collaborative
effort (between Mississippi State University, Carnegie Mellon University and Universities of California, Berkeley and Irvine) new visualization methods have been developed for understanding the dynamic processes in a large region, and new methods for
communicating this information to scientists and engineers, as well as for conveying
the effects of earthquakes to non-technical decision-makers. This is achieved through
the use of the SPURport: a Grid-services-based middleware that provide access to
computational resources, the databases for the regional models and simulations, as
well as selecting scenarios and regional inventories for analysis.

3 Functionality of SPURport
The fundamental requirement for the SPURport is performing real time simulations of
structural responses to ground motion caused by an earthquake. The implementation
must provide an integrated simulation environment accessible anywhere through a
Web Browser. Specifically, the portal must eliminate the need for explicit logging-in
to remote systems (to retrieve, pre-process, transfer and post-process the data or submit jobs for execution); installation of any software; and the need for computerrelated knowledge of the end user. For example, the user might be not familiar with
the operating system of the remote computer, the user might not know how to query
metadata servers to find the data or interpret the XML-encoded response of the server,
the user might not know how to transfer data from one remote location (data repository) to another (compute servers), the user might not know or understand the data
format which is needed to extract and format input data for the simulations, the user
might be not familiar with OpenSees framework and consequently might not know

SPURport: Grid Portal for Earthquake Engineering Simulations

495

how to prepare and run the simulations, the user might not know how to verify the
consistency of the results., i.e., making sure that the right data are fed to the correctly
prepared OpenSees script, etc.
The SPURport is required to be an integrated simulation environment; to provide
an easy access to all services needed to specify, configure and perform simulation, as
well as access the simulation results without the need of leaving the Web Browser.
Furthermore, the portal should provide access to other NEESgrid services such as data
and metadata repositories thus enabling collaborations between the users, data sharing
and data dissemination to interested parities. The portal must be fault tolerant in the
sense that work done by the end user cannot be lost as a result of interruption of connectivity (voluntary or not). At any time, the user should be able to reconnect to the
servers and resume the broken session. Finally, the user should be able to reconstruct
all circumstances that led to any particular simulation performed through the portal.
The context for a simulation is determined by three elements: (1) the earthquake
model, (2) the structure model and (3) the inventory of structures. The earthquake
model (or fault type) defines the ground motion. The simulations of earthquakes have
been performed by our collaborators at Carnegie Mellon University [9]. The SPURport provides access to a repository of the results of these simulations. The structure
models, as well as the OpenSees-based structure simulation framework, have been
provided by our partners at University of California Berkeley [10]. An inventory of
structures is defined as a collection of structures of a given types (for example, buildings of different sizes constructed using different materials according to specific
building codes) distributed according to a selected pattern over the region of the simulated earthquake. The result of simulations of the seismic performance of the inventory is a distribution of potential damages in the region caused by an earthquake. At
this stage of this project, the statistical analysis of the inventory performance has been
done off-line because it is computationally very expensive and thus cannot be done
interactively. Instead, the SPURport provides access to the repository of the results.
We anticipate a parallel version of OpenSees running on high performance platforms
to be developed by UC Berkeley outside this project. Once it is available, the simulations of the inventories will be incorporated into the SPURport.
Currently, a typical use of the SPURport is as follows. The user, guided by the
metadata viewer and interactive visualizations, selects an earthquake model. Similarly, the user selects a structure type and sets its parameters, creating an instance of
the structure to be simulated interactively. Next, the user chooses an inventory type
and gets access to pre-computed results of the inventory simulation for the selected
earthquake model. Finally, the user places the previously defined structure instance at
a desired location on the distribution plot and runs the real-time simulation. The value
of this scenario is that the user may try different what-if cases by placing different
kinds of structures at locations known from the inventory simulations to be high- or
low-risk locations.

4 SPURport Implementation
The Front End of SPURport is a CHEF teamlet, and thus it is seamlessly integrated
with the rest of the NEESgrid user interface. This integration makes it possible to
directly use NEESgrid/Chef user authentication mechanisms. The SPURport user
interface is implemented as a single applet.

496

T. Haupt et al.

Figure 1 shows the layout of the SPURport GUI. The four text fields in the upper
part of the SPURport applet display all currents selections that the user has made:
Earthquake model, Structure Model, Inventory and Simulation (here, apparently at the
beginning of a user session, only the Earthquake Model is selected). The rest of the
applet frame is taken by the Swing Tabbed Pane: each tab corresponds to a particular
function. The tabs are described in the following sections.
Access to Ground Motion Data Repository. Access to shared data repositories is a
common use pattern for portals. SPURport provide support for this functionality
through a combination of three web services: file repository service, metadata service
and replica locator service. These three services are coordinated by a high-level data
service provider, referred to as the data service façade. Each data set is uniquely identified by a logical Uniform Resource Identificator (URI), or a logical name, and is
associated with its descriptor – a metadata record. The Replica Locator service resolves the URI into the physical location of the file – its Uniform Resource Locator
(URL). Note that in general there is a one-to-many relationship between the data set
URI and URL allowing for the creation file replicas to optimize access to it. This
design follows a pattern employed by many other Grid-related efforts, and the implementation of the Replica Locator service is a part of the Globus distribution.
The typical use scenario is that user queries the metadata service to identify the
data set, and the SPURport front end provides a graphical interface for making these
queries and examining their results, as shown in Fig. 1). Once the file is selected, its

Fig. 1. SPURport GUI: Earthquake Model selection. The left panel shows a list of available
datasets, the middle panel shows the metadata for the selected data set, and the right panel
displays the contents of the retrieved file

SPURport: Grid Portal for Earthquake Engineering Simulations

497

URI is resolved by the replica locator and the resulting URL of the data set is used to
actually retrieve the data. To simplify the front-end implementation and to reduce
communication overhead, the interactions between the services are orchestrated by
the façade. Thus, once the URI of the file is known, it is just a single request made by
the applet to initiate the file transfer to the selected location, or streaming it to the
applet for visualization. The applet call is converted by a JSP to an invocation of a
corresponding façade’s method that in turn makes all necessary calls to the services,
as needed. The façade accesses the services through adapters, making it unaware and
thus independent from the actual implementation of the back-end services. The current SPURport uses NEESgrid’s OGSI/GT3-compliant NMDS [11] as metadata service and flat file system accessible through GridFTP as a file repository.
Incorporation of a Legacy Application. The SPURport simulation capabilities are
based on the OpenSees framework, a Grid-unaware, legacy application. It has been
brought to the portal using a similar approach as used in our previous portals, Gateway and Distributed Marine Environment Forecast System [12]. The key concept here
is the employment of a metadata that describes the application. This metadata is referred to as “application descriptor”. The application descriptor is an XML document
comprised of three parts: application signature (name, credits, support, and the like),
description of the application parameters including i/o specification, and instructions
on how to run it (e.g., location of the executables, values of environmental variables,
etc) that is automatically translated by the SPURport Job Submission Service into the
Globus Resource Specification Language (RSL) at the submission time. This is the
SPURport mechanism of hiding the complexity of the running applications in the
Grid environment. Incorporating OpenSees, and other legacy applications, into the
portal is accomplished by creating the XML application descriptor by filling out a
web form. This is a task for the application expert who understands the application
requirements (hardware, environment, input data, application parameters, etc) and
thus not the end user. The support for the application metadata is provided by the
SPURport Metadata Service.
Job Configuration – Structure Models. OpenSees applications, as many other
applications, are controlled by input files. In the case of OpenSees, the controlling
input file is written in the OpenSees script (an extension to the Tcl scripting language). In particular, the geometry and properties of the structures to be modeled are
defined using the OpenSees scripts. The SPURport provides a library of such scripts,
maintained by the data repository (in addition to files representing ground motion).
Consequently, the user can browse the metadata to select and upload the script that
represents the structure of interest. Furthermore, OpenSees scripting support parameters, and therefore the properties of a particular structure type can be adjusted. These
parameters are captured in the corresponding script’s metadata. The SPURport user
selects thus a structure type (OpenSees script), and the portal seamlessly downloads
the script’s metadata and generates in-the-fly a graphical user interface revealing all
adjustable parameters for the selected type of structure. The user sets the values of
these parameters (or leaves the default values) and saves them as an instance of the
structure. These values are used by the Job Submission Service.

498

T. Haupt et al.

Job Submission. The Globus toolkit provides all necessary services for submitting
jobs on remote systems and the Java COG provides Java interfaces to these services
making the invocation of the Globus services easy in the portal environment. However, the complete process of the job submission is a multistep process requiring coordination of several services. Therefore SPURport introduces its own, high-level Job
Submission service that acts as a façade for the low-level Globus services and interacts with other SPURport services.

Fig. 2. To select the structure location the user displays the ground motion data or looks at a
statistical distribution of previously run simulations. Here, the panel shows the distribution of
Umax (maximum displacement of the top most floors) for the selected period of structure oscillations and ductility. The white rectangle in the central part of the plot shows the location of the
fault, and the white dot inside the rectangle shows the epicenter of the simulated earthquake.
The user selects the location by clicking on the panel (c.f. the second white dot on top of a dark
region corresponding to high Umax values, left of the fault, which resulted by placing the cursor
in that spot and clicking the left mouse button)

To submit a job, a user environment for running the job is created. This involves
creating a working directory on the target system. Then input files are staged to the
working directory. The OpenSees simulations require two input files. One is the driving OpenSees script that must be retrieved from the data repository and modified
as specified by the user (changes of the structure parameters). The other is the acceleration time-history of the ground motion at the location where the simulated structure is located (see Fig. 2). To get this file, the data corresponding to the selected
earthquake model in the data repository are fed to a filtering routine that extract data
points needed for the simulation. That pruned data set is transferred to the target machine. Next, the job submission request is created as the Globus RSL document by
combining the information stored in the application descriptor, parameters set by the
user as well as information about the user environment. At this moment the job is
ready for submission, and the history metadata is created, so that a record on how the

SPURport: Grid Portal for Earthquake Engineering Simulations

499

simulation was run is preserved for a future reference. Then the job is submitted
through Globus GRAM and the Job Service registers itself as a target for GRAM
notifications. All changes in the job status reported by GRAM are forwarded to the
SPURport monitoring services. Once the job is completed, its output files (including
stdout and stderr) are staged out to the location specified by the user.
Monitoring Job Status and Access to the Results . All users jobs submitted through
the SPURport are accessible through the Job Table interface (Fig. 3), until explicitly
deleted by the user. The table displays where and when the job was submitted and its
current status (PENDING, RUNNING, DONE). Once the job is completed the user
can query its properties (e.g., input files, values of parameters, and history) and access
– view or download - its results, including standard output, standard error and output
data files.

Fig. 3. SPURport Job Table interface allows monitoring the status of submitted jobs and provide access to their results. The jobs can be searched using metadata queries

5 Conclusions
This paper presents a successful implementation of a prototype Grid Portal for the
earthquake engineering community. However, only the front-end has been customized
for the particular domain. The portal infrastructure is application neutral and can be
used as a blueprint for developing portals for other communities. It provides seamless
access to remote resources (CPU and data) through OGSI/Globus 3.0 and provides
support for easy incorporation of legacy applications. It extensively uses XML-based
metadata for describing both data and applications. The metadata are used for automatic generation of the GUI, supporting the user with selection of applications and
data. Furthermore, describing the application by metadata opens the opportunity to
introduce the high-level middle-tier services that aggregate and coordinate lower-level
services provided by the Globus toolkit.. Consequently, all the complexity of the
heterogeneous, distributed Grid environment is hidden from the user. The applications
and data are installed, maintained and upgraded by application experts. Therefore, the
end user – the domain expert – can again concentrate on his or her research rather
than acquiring computer wizardry.

500

T. Haupt et al.

Acknowledgements
This work presented in this paper is a part of the NSF-sponsored project Large-Scale
Seismic Performance for Urban Region (grant EEC0121989). We would like to thank
our collaborators, in particular Gregory Fenves and Jaesung Park of UC Berkeley, and
Jacobo Bielak of Carnegie Mellon University for invaluable discussions and help with
designing the functionality of the SPURport, as well as providing us with the ground
motion data and structural models. Last but not least, we would like to thank the
SPUR project Principal Investigator, Roger King of Mississippi State University for
coordinating this successful collaborative effort.

References
1.
2.
3.
4.
5.
6.
7.
8.
9.

NEESgrid, http://www.gridnees.org
NEES, http://www.nees.org
Globus Project, http://www.globus.org
Chef, http://chefproject.org
JetSpeed, http://portals.apache.org/
GridSphere, http://www.gridsphere.org
Open Grid Computing Environments, http://www.collab-ogce.org/nmi/index.jsp
Java CoG, http://www.globus.org/cog
J. Bielak et al, “Visualizations of Large-Scale Earthquake Simulations”, in the Proceedings of Supercomputing ‘03
10. OpenSees, http://opensees.berkeley.edu
11. NEESgrid Metadata Services, http://neesgrid.org/documents/TR_2004_38.pdf
12. T. Haupt, M. Pierce, “Distributed object-based grid computing environments”, book
chapter in “Grid Computing: Making the Global Infrastructure a Reality”, Fran Berman,
Geoffrey Fox and Tony Hey eds, John Wiley and Sons, 2003.

