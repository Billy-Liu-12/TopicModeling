Procedia Computer Science
Volume 29, 2014, Pages 692–702
ICCS 2014. 14th International Conference on Computational Science

Modulight : A Framework for Eﬃcient Dynamic Interactive
Scientiﬁc Visualization
S´ebastien Limet1 , Millian Poquet1 , and Sophie Robert1
Univ. Orl´eans, INSA Centre Val de Loire, LIFO EA 4022, F-45067 Orl´eans, France∗

Abstract
The interactive scientiﬁc visualization applications are based on heterogeneous codes to implement simulation or data processing, visualization and interaction parts. These diﬀerent
parts need to be precisely assembled to construct an eﬃcient application running in interactive time. Component-based approach is a good paradigm to express this kind of applications.
The interactive scientiﬁc visualization domain is now classically extended with visual analysis
applications. In this case, some parts of the application need to be added or removed dynamically during its execution. In this paper, we describe a component-based approach dedicated
to dynamic interactive scientiﬁc visualization applications. We propose a framework called
Modulight which implements our approach using the MPI2 library and the optimized socket
library ØMQ. The performance of this framework is also analyzed from a real-life application
of molecular dynamics.
Keywords: Component-based framework, dynamic reconﬁguration, interactive visualization

1

Introduction

In many areas of science, studying phenomena often involves exploring data from acquisitions
or numerical simulations and observing their changes over time for example. Thus interactive scientiﬁc visualization became an important tool for scientists in biology, biochemistry or
geosciences for example to help the studied phenomenon understanding. In this context interactions can simply facilitate navigation in the data rendering or inﬂuence the course of the
simulation to enhance the observation of a particular phenomenon.
Building an application of interactive scientiﬁc visualization is a diﬃcult task. Such applications involve modules of simulation, visualization and interaction whose frequencies can
be very diﬀerent. A simulation may be very slow, whereas an interaction module linked to a
device (Phantom, 3D mouse, ...) may generate events at a very high frequency. Therefore, we
must build applications composed of heterogeneous codes which collaborate together. In this
context, the paradigm of component-based approaches [1, 11] is particularly suitable due to the
separation of concerns and the re-usability of codes these approaches promote.
∗ This

692

work was supported by the French Agency for Research (Grant ”ExaViz”, ANR-11-MONU-003).

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.062

Modulight

S. Limet, M. Poquet and S. Robert

These applications have a strong need of high performance. Indeed to navigate properly in
the data visualization an eﬃcient frame rate is essential and the interactivity implies that an
action result should be quickly visible. In this context the simulation or visualization modules
are often parallelized and the complete application is often deployed on distributed memory
architectures. Once again a component-based approach can help to resolve these performance
constraints thanks to exogenous coordination [4, 8]. In this case, some connectors, which express
very speciﬁc communication policies, taking into account modules of very diﬀerent frequencies
for example, are used to coordinate the components when assembling them in an application.
Furthermore, the interactive scientiﬁc visualization domain is now classically extended with
visual analysis applications [7] which implies to be able to launch new computation or visualization modules on the ﬂy. These additional modules enrich the classical visualization with new
data analysis to help scientists understand the studied phenomenon. Such features require the
application to be reconﬁgured during its execution.
In the domain of scientiﬁc computing and scientiﬁc visualization, many component-based
approaches exist. However, these approaches are speciﬁc to a class of applications [6, 14], or do
not provide the means to interact with the application [12] or do not allow dynamic reconﬁgurations [2]. In particular, the systems which deal with dynamic reconﬁguration are usually based
on Fractal [5] and deal with self-adaptive reconﬁgurations [13]. Steering systems [16] allow to
reconﬁgure running applications. This reconﬁguration mainly consists in modifying application
parameters using code instrumentations but do not allow to add new functionalities
This paper proposes a new framework that tends to meet the needs of visual analysis applications deployed on dedicated platforms. Among the previous approaches, FlowVR [2, 3]
has been designed to construct high performance interactive applications running on parallel
machines or distributed resources. The relevance of this framework has been demonstrated
through several applications in scientiﬁc visualization [9] or Virtual Reality [15]. However the
dynamic reconﬁguration of a FlowVR application (launching or stopping some modules during
the application execution) is not available. We were interested in exploring new solutions to
design a framework that respects the features of scientiﬁc visualization applications including
visual analysis applications and to compare its performance with those of FlowVR.
In this paper we describe our component model close to FlowVR’s. We detail its implementation using the MPI21 standard which allows dynamic processes and ØMQ2 a recent library for
high-performance asynchronous message passing evaluated with the best score in [10]. Finally
the results are compared to those of FlowVR.
The rest of the paper is organized as follows. Section 2 introduces our component model and
its objectives. Section 3 presents the architecture and the implementation of our framework
called Modulight. From a real-life example in dynamics molecular, the benchmarks are analyzed
in Section 4 before the conclusion in Section 5.

1 http://www.mpi-forum.org/
2 http://zeromq.org/

693

Modulight

2

S. Limet, M. Poquet and S. Robert

Component model

Our component-based approach contains components and connections between them. The
components take care of the diﬀerent tasks whereas the connections allow data to be transferred
from a component to another. These last ones constitute an exogenous coordination which
allows to specialize our approach to the targeted applications. To achieve the good performance
required for interactive scientiﬁc applications we must be able to ensure that all data are sent
and consumed on some connections between two components and also to allow data loss on
others connections in order to avoid buﬀer overﬂow when a consumer is slower than an emitter.
Thereafter these two modes of connections will be detailed.

2.1

Components

A component can be seen as a black box which contains input ports and output ports. These
ports are a gateway between the component and its environment, which is composed of other
components. Data exchanged by components are embedded in messages.
Deﬁnition 1. A component is a quadruple C = Id, Input, Output, RI where Id is its unique
identiﬁer, Input is the set of its input ports to receive messages produced by other components
and Output is the set of its output ports to deliver messages to the outside. RI is a set of
incidence relations that describes the behavior of the component.
For example a component Ex, {i1 , i2 , i3 }, {o1 , o2 }, RI where RI = {i1 i2 → o1 , i2 i3 → o2 }
has three input ports (i1 , i2 and i3 ) and two output ports (o1 and o2 ). This component has
two behaviors. The ﬁrst one i1 i2 → o1 tells that it produces a new message on the output port
o1 when input ports i1 and i2 have some data. The second one tells that if there are some data
in i2 and i3 then the component produces a new message on o2 . Components have an iterative
behavior which consists in toggling between these two states:
• the waiting state, in which the component waits that some input ports are supplied with
new messages to work,
• the working state, in which the component consumes exactly one message on each of the
input ports of the veriﬁed incidence relations, does some work and supplies results to its
output ports.
A component leaves its waiting state when all the input ports of one on its incidence relation
contain new messages. This can be expressed by means of a logical expression where literals
are input port names. Such a literal is true iﬀ the corresponding input ports contain at least
one message. More precisely, these expressions are simpliﬁed disjunctive normal forms, where
literals cannot be negative and must correspond to an input port of the component. For
example, the expression corresponding to the component Ex is (i1 ∧ i2 ) ∨ (i2 ∧ i3 ). It can
be noticed that if several incidence relations are triggerable they are all ﬁred. During the
lifecycle of the component, it is also possible to change the incidence relations to reconﬁgure
the behaviors of the component at run time. This can be useful for example if the user modiﬁes
the application on the ﬂy and wants to stop or start a behavior.

2.2

Connections

Assembling components in order to build an application consists in deﬁning a communication
layout which allows data exchanges on the component interfaces: their input and output ports.
In this model, this assembly is done by connecting directly an output port to an input port.
694

Modulight

S. Limet, M. Poquet and S. Robert

Deﬁnition 2. A connection is a quadruple C = Id, Src, Dest, L where Id is its unique
identiﬁer, Src is its source port (a component output port), Dest is its destination port (a
component input port) L is a boolean that indicates whether the connection is lossy or not.
A lossless connection is simply a FIFO connection that ensures every message emitted
on the output port Src is sent to the input port Dest. Furthermore, the message order is
preserved on such a connection. On the other hand, a lossy connection works on destination’s
demand. As soon as Dest queries new data, Src replies the most up-to-date message that
has been emitted on it and that was not sent to Dest yet. Furthermore, data duplication is
not allowed on a connection. A fake message is sent if Dest already got the most up-to-date
message of Src to solve an implementation issue about ØMQ which forces every request to be
replied. Lossless connections can cause buﬀer overﬂows when the component of the source port
runs faster than the component of the destination port whereas lossy connections avoid such
overﬂows by discarding messages that cannot be processed. The choice between lossless and
lossy connections depends on the application features. Other communication policies can be
implemented from this two types of connections using speciﬁc intermediary components.

2.3

The application graph

Finally, an application is described by a graph whose vertices are components and edges are
connections.
Deﬁnition 3. An application is deﬁned by the graph: A = Comp, Conn where Comp is the
set of components of the application and Conn is the set of connections.
An example is given Figure 1. It illustrates a real-life application in molecular dynamics
which has been used to experiment our framework and to realize the benchmarks Section 4.
This application is a trajectory player already developed in the FlowVR framework.

status

Interface
order

order

settings

begin

TrajectoryReader
positions

status

settings

positions

Visualization
positions

end

Spectrum

(a) The application graph

(b) A screenshot of the application

Figure 1: The trajectory viewer application

695

Modulight

S. Limet, M. Poquet and S. Robert

The application graph includes 5 components. The TrajectoryReader component is in charge
of reading a ﬁle which contains the atom positions recorded during a molecular simulation. It
has two behaviors and the incidence relations are begin → status, positions and order, begin →
status, positions. So it proceeds to a new iteration each time it receives data on its begin
input port. It sends positions to a Visualization component, in charge of three-dimensionally
displaying them. Visualization has only an incidence relation {∅ → end} and is able to proceed
to a new iteration regardless of data on its input ports. This behavior ensures an eﬃcient
navigation in the data rendering. An Interface component, which looks like a video player,
allows the user to interact with trajectory reader parameters (current frame, framerate, playback
direction...) and visualization settings. Furthermore, the Spectrum component displays the
distance of atoms compared to their initial position. Finally, the MoleculeLoader component
(not represented for the sake of readability) is in charge of reading the molecule description ﬁle.
In order to guarantee that every TrajectoryReader-generated frame is shown by the Visualization, a strong synchronization is set between these two components thanks to the begin and
end ports. By doing so, the lossless connection between the positions ports cannot generate
buﬀer overﬂows. Furthermore, user-provided actions cannot be lost, which means outgoing
connections of the Interface are lossless. Thus, the lossless communication between the Interface output port order and the TrajectoryReader input port order and the incidence relation
order, begin → status, positions of TrajectoryReader ensure that all the user actions are proceeded by TrajectoryReader. The Spectrum component displays secondary information and
thus does not need all TrajectoryReader-generated frames, which means the connection between them is lossy. Finally, MoleculeLoader messages are only sent in the beginning of the
application and when components that need information on the molecule structure are dynamically spawned, which is rare and implies lossless connections around this component.

2.4

FlowVR

In order to test the Modulight eﬃciency, we compare it to the framework FlowVR [2]. In
this section we describe the FlowVR component model and we point out the diﬀerences with
Modulight.
FlowVR model includes port-based iterative components. These components can be modules
or ﬁlters. The output ports can be connected to input ports in a way similar to the lossless
communication in Modulight. The ﬁlter input ports can be connected to several output ports
which is not the case of module input ports. In addition, a ﬁlter accesses all messages on the
queue of its input port whereas a module accesses only to the next available message. Thus,
the lossy communication of FlowVR is implemented by ﬁlters which let through messages and
discard the others, whereas it is direct in Modulight. The module behavior also consists in
toggling between a waiting state and a working state. But the condition to leave the waiting
state is static and is a unique conjunction of input ports.
The FlowVR communication architecture is diﬀerent because a daemon has to be run on
each computer of the parallel machine. These daemons contain shared memory buﬀers which
are used for local communications (when the two endpoints are on the same node). All intercomponent messages pass by daemons. Remote messages are transmitted from one daemon
to another using TCP/IP sockets. The policy on each communication channel is implemented
by daemon plugins that can directly modify and discard messages. Complex communication
schemes can be implemented this way. In Modulight, speciﬁc intermediary modules have to
perform this work. Finally, FlowVR does not provide any dynamic reconﬁguration features
whereas this feature is available in Modulight.

696

Modulight

3

S. Limet, M. Poquet and S. Robert

Modulight implementation

As explained before, the aims of this work were to test both dynamic reconﬁguration of interactive visualization applications and ØMQ as a communication layer for our component-based
model. Moreover, we wanted to avoid heavy dependencies, to provide a simple programming
interface and to allow occasional dynamic alterations of applications. The dynamic reconﬁguration is managed through MPI2 features to launch dynamic processes. MPI is a widely used
library available on almost any parallel computer which makes this dependency not a strong
one. Moreover many legacy codes that could be integrated in a Modulight application are already MPI programs. Modulight is written in C++ and its programming API, used to develop
components, is also a C++ interface.

3.1

Architecture

Modulight is a middleware library that allows programmers to create components as well as to
create applications. Both are compiled as executable programs.
A central process is in charge of the application. Its role is at ﬁrst to launch the initial
application and then to manage the application lifecycle. Launching the initial application
consists in spawning the diﬀerent components and then establishing the communication channels between their ports. Dynamic alterations of the application are the additions or deletions
of components and connections. These alterations can be requested by some authorized component to the central process. The user can choose which component are allowed to alter the
application. All communications between the central process and components are done via MPI
messages. Inter-component communications are done via ØMQ, which provides many ways of
transmitting messages inside a multiprocess application. This architecture has been chosen to
simplify dynamic alterations.

3.2

Dynamism

Within an application, authorized components can request modiﬁcations of the application.
These requests are received and executed by the central process. This process is not a component and is aware of the application graph. Spawning a new component is directly managed by
the central process and does not need any communication with components. However, when
adding or removing connections, the central process orders involved components to connect
together and to update their environment data structures. This allows any component to know
whether its ports are connected or not at run time. A synchronization between the two endpoints of a connection is done when it is removed, in order to avoid the destination input port
to receive messages from an output port which is no longer connected to it. Furthermore,
when a component stops (on its own initiative or by any other component request), all remaining connections are closed and environment data structures of involved components are
updated. Before requesting an application modiﬁcation, any authorized component can request
an application graph description to the central process.

697

Modulight

3.3

S. Limet, M. Poquet and S. Robert

Communication channels

ØMQ is a networking library which can be seen as a concurrency framework. It provides sockets
which allow to set up optimized N-to-N communication patterns. These patterns include clientserver, one-way data distribution and task distribution. ØMQ handles I/O asynchronously,
which improves its user-friendliness. The two kinds of communications of Modulight are implemented through two of these patterns.
Lossless communication
Lossless communication is done with the ØMQ Publisher-Subscriber communication pattern. It
manages the message delivery between a set of publisher sockets and a set of subscriber sockets.
The publishers can only send messages whereas the subscribers can only read them.
Every message emitted by a publisher is directly broadcasted to all subscribers connected
to it. In order to meet lossless communication speciﬁcations, every output port is associated
with a publisher socket and every input port is associated with a subscriber socket.
Lossy communication
The lossy communication is done with another ØMQ communication pattern called RequestReply. This pattern allows to create client-server communications. The socket pair is in lockstep, which means the client must send a request then wait the corresponding reply in a loop,
while the server waits a request then replies it. This pattern prevents request saturation since
a client cannot send two requests in a row without reading its reply.
When a client is connected to many servers, requests are round-robined among them. Moreover, when a server is connected to many clients, their requests are fair-queued. In order to
meet lossy communication speciﬁcations, every input port is associated with a client socket and
every output port is associated with a server socket.
When the user emits a message on a lossy-connected port, the message is not directly sent
but buﬀered instead. This buﬀer contains the most up-to-date message for each lossy-connected
output port. During the waiting phase, each components carries the distributed Algorithm 1
out in order to manage lossy communication.
Algorithm 1: Lossy communication managing
Input: I, the set of input ports of a given component
O, the set of output ports of a given component
foreach i ∈ I do
if i.isLossyConnected() then
i.req.sendRequest(i.id);
foreach o ∈ O do
if o.rep.messageAvailable() then
src id ← o.rep.readM essage();
if src id ∈ o.alreadySentT o then
o.rep.reply(o.fakeMessage);
else
o.rep.reply(o.buﬀeredMessage);
o.alreadySentTo.append(src id);

698

Modulight

S. Limet, M. Poquet and S. Robert

The ﬁrst loop of the algorithm consists in sending requests on each lossy-connected input
port. These requests contain the sending port identiﬁer (i.id ) in order to avoid message duplication. Please note that this loop does not cause a request saturation because ØMQ prevents
it internally.
The second loop consists in replying to requests sent in the ﬁrst loop. If the request source
port src id already disposes of the most up-to-date message of o, a fake message is replied.
Otherwise, the most up-to-date message is replied. o.alreadySentT o is cleared whenever a new
message is emitted on the output port o.

4

Experiments

The application of molecular dynamics visualization described Section 2.3 has been implemented
in Modulight to perform some benchmarks of the framework. This application comes from the
ExaViz project in which an equivalent implementation using the FlowVR framework [2] was
available. This allowed us to compare the two frameworks on several criteria.
The experiments we made aimed at validating Modulight’s eﬃciency by comparing it to the
FlowVR framework. We have tested several versions of the application described Section 2.3
and several deployment of each version. The eﬃciency of the application is measured by the
iteration frequency of the visualization since our aim is to obtain an interactive frame rate. The
four versions are the following:
• {M oleculeLoader, V isualization, T rajectoryReader} ∈ A1 ,
• {M oleculeLoader, V isualization, T rajectoryReader, Interf ace} ∈ A2 ,
• {M oleculeLoader, V isualization, T rajectoryReader, Spectrum} ∈ A3 ,
• {M oleculeLoader, V isualization, T rajectoryReader, Interf ace, Spectrum} ∈ A4 .
Each version includes all the connections between the participating components. They have
been deployed in two ways. In the local one, all components run on the same computing node.
In the distributed one, each component runs on a diﬀerent computing node.
The results presented ﬁgure 2 and table 1 have been obtained by running every static application for 10 minutes, measuring the visualization frequency every second. The applications
have been run on 5 machines whose CPU is an AMD Opteron 2676 running at 2.3 GHz and
have 16 Gio of RAM each. The latest stable version of FlowVR has been chosen, which is
FlowVR 2.1.
Table 1: Statistical measures of the visualization frequency in A4 (Hz)
Mean
Median
Std. Deviation

Modulight (local)
2951.62
2988.01
104.37

FlowVR (local)
3274.05
3254.75
260.50

Modulight (dist.)
2622.16
2620.38
25.83

FlowVR (dist.)
1765.68
1810.19
104.79

These results show that Modulight is slower than FlowVR in local deployment. This can be
explained by the FlowVR architecture, which takes advantage of the shared memory thanks to
its daemon. However, when the application is entirely distributed, we can see that Modulight is
faster than FlowVR. We can also notice that Modulight’s results are more stable than FlowVR’s
in both local and distributed deployments.
699

Modulight

S. Limet, M. Poquet and S. Robert

Figure 2: Visualization frequency arithmetical mean (the higher the better)
Modulight (local)
FlowVR (local)
Modulight (distributed)
FlowVR (distributed)

Frequency (Hz)

3,500
3,000
2,500
2,000
1,500
A1

A2

A3

A4

Furthermore, some experiments have been done to test dynamic alterations of the application and their impact on the visualization frequency. Alterations were either to transform A2
into A4 or to remove the Spectrum component, which transforms the application back to A2 .
Transforming the application from A2 to A4 is done in one request, which ﬁrst spawns the Spectrum component then connects it to the other components. The Interface component, which is
the source of the dynamic request, is blocked during the alteration. This is done to allow the
Interface to know whether the request had been successfully treated or not. These dynamic
tests showed that occasionally adding components and connections does not impact the visualization frame rate. However, removing Spectrum and its connections blocks the visualization
for around half a second. This blocking is due to synchronizations between Spectrum and all its
neighbors. Synchronizations are done to avoid coherence errors, e.g. receiving messages from
components which are no longer alive.
In case of more complex reconﬁguration schemes altering the component coordination, it is
necessary to properly pause the application in order to ensure it correctly runs during and after
the reconﬁguration. Modulight oﬀers the means to realize this pause. However the reconﬁguration process needs some additional tools that analyze the data dependencies in the Modulight
application and identify the components to be paused.
Finally, in order to test Modulight performance on bigger applications using more computing
and network resources on a cluster, secondary computation components have been added to the
application A2 . These components are distributed to match each core of our computing nodes
which leads to an application with 24 components. The new components are lossy-connected
to the TrajectoryReader input port positions. Figure 2 shows the results of this experiment.
Modulight is more eﬃcient than FlowVR on this application where all cores of the computers
are used while FlowVR can take advantage of its shared-memory communication.

700

Modulight

S. Limet, M. Poquet and S. Robert

Table 2: Statistical measures of the secondary computation components (Hz)
Mean
Median
Std. Deviation

Modulight
593.94
595.60
33.08

FlowVR
410.69
417.08
86.5

These ﬁrst experiments show that Modulight can eﬃciently deal with dynamic reconﬁguration of an interactive visualization. They also show the eﬃciency of the Modulight communication layer that relies on ØMQ. However comparison with the FlowVR framework on local
applications shows the need of a shared memory communication for processes located on the
same computer.

5

Conclusion

In this paper, we presented Modulight a component-based framework for interactive scientiﬁc
visualization as well as its model. Some details on its implementation have been given and
practical results including a comparison with the FlowVR framework have also been presented.
The current version of Modulight is a ﬁrst prototype of the framework which needs to be
enriched with additional features for symplifying the application design. For example, some
components able to automatically manage complex communication schemes will be available
soon.
However, the ﬁrst experiments made with Modulight are promising and shows its good
behavior on distributed memory architectures as well as its ability to manage dynamic reconﬁguration. The experiments showed that Modulight must improve the communication between
components running on the same computer. One solution to solve this problem could be to use
the ØMQ local inter-process communications.

References
[1] B. A. Allan, R. Armstrong, D. E. Bernholdt, F. Bertrand, K. Chiu, T. L. Dahlgren, K. Damevski,
W. R. Elwasif, T. G. W. Epperly, M. Govindaraju, D. S. Katz, J. A. Kohl, M. Krishnan, G. Kumfert, J. W. Larson, S. Lefantzi, M. J. Lewis, A. D. Malony, L. C. Mclnnes, J. Nieplocha, B. Norris,
S. G. Parker, J. Ray, S. Shende, T. L. Windus, and S. Zhou. A Component Architecture for
High-Performance Scientiﬁc Computing. J. High Perform. Comput. Appl., 20(2):163–202, 2006.
[2] J. Allard, V. Gouranton, L. Lecointre, S. Limet, E. Melin, B. Raﬃn, and S. Robert. Flowvr: a
middleware for large scale virtual reality applications. In Proceedings of Euro-par 2004, volume
3149 of LNCS, pages 497–505. Springer, 2004.
[3] J. Allard, J.D. Lesage, and B. Raﬃn. Modularity for Large Virtual Reality Applications. Presence:
Teleoperators and Virtual Environments, 19(2):142–162, April 2010.
[4] F. Arbab. Reo: a channel-based coordination model for component composition. Mathematical
Structures in Computer Science, 14(3):329–366, 2004.
[5] G. Blair, T. Coupaye, and J. Stefani. Component-based architecture: the fractal initiative. annals
of telecommunications - annales des t´el´ecommunications, 64(1-2):1–4, 2009.
[6] J. Borgdorﬀ, M. Mamonski, B. Bosak, D. Groen, M. Ben Belgacem, K. Kurowski, and A. G.
Hoekstra. Multiscale computing with the multiscale modeling library and runtime environment.
Procedia Computer Science, 18(0):1097 – 1105, 2013.

701

Modulight

S. Limet, M. Poquet and S. Robert

[7] H. Childs, E. Brugger, B. Whitlock, J. Meredith, S. Ahern, K. Bonnell, M. Miller, G. H. Weber,
C. Harrison, D. Pugmire, T. Fogal, C. Garth, A. Sanderson, E. W. Bethel, M. Durant, D. Camp,
J. M. Favre, O. R¨
ubel, P. Navr´
atil, M. Wheeler, P. Selby, and F. Vivodtzev. VisIt: An End-User
Tool For Visualizing and Analyzing Very Large Data. In Proceedings of SciDAC 2011, 2011.
[8] D. Clarke, J. Proen¸ca, A. Lazovik, and F. Arbab. Channel-based coordination via constraint
satisfaction. Science of Computer Programming, 76(8):681–710, 2011.
[9] M. Dreher, M. Piuzzi, A. Turki, M. Chavent, M. Baaden, N. F´erey, S. Limet, B. Raﬃn, and
S. Robert. Interactive Molecular Dynamics: Scaling up to Large Systems. In ICCS, volume 18 of
Procedia Computer Science, pages 20–29. Elsevier, 2013.
[10] A. Dworak, P. Charrue, F. Ehm, W. Sliwinski, and M. Sobczak. Middleware trends and market
leaders 2011. In 13th International Conference on Accelerator and Large Experimental Physics
Control Systems, pages 1334–1338, 2011.
[11] W. Emmerich and N. Kaveh. Component technologies: Java beans, COM, CORBA, RMI, EJB
and the CORBA component model. In ICSE ’02: Proceedings of the 24th International Conference
on Software Engineering, pages 691–692, New York, 2002. ACM Press.
[12] T. Goodale, G. Allen, G. Lanfermann, J. Mass´
o, T. Radke, E. Seidel, and J. Shalf. The cactus
framework and toolkit: design and applications. In Proc. 5th intern. conf. on High performance
computing for computational science, VECPAR’02, pages 197–227. LNCS, Springer, 2003.
[13] M. L´eger, T. Ledoux, and T. Coupaye. Reliable dynamic reconﬁgurations in a reﬂective component
model. In Lars Grunske, Ralf Reussner, and Frantisek Plasil, editors, Component-Based Software
Engineering, volume 6092 of LNCS, pages 74–92. Springer, 2010.
[14] B. Ludascher, I. Altintas, C. Berkley, D. Higgins, E. Jaeger, M. Jones, E.A. Lee, J. Tao, and
Y. Zhao. Scientiﬁc workﬂow management and the Kepler system. Concurrency and Computation:
Practice and Experience, 18(10):1039–1065, 2006.
[15] B. Petit, T. Dupeux, B. Bossavit, J. Legaux, B. Raﬃn, E. Melin, J.S. Franco, I. Assenmacher, and
E. Boyer. A 3d data intensive tele-immersive grid. In Proceedings of the International Conference
on Multimedia, MM ’10, pages 1315–1318, New York, NY, USA, 2010. ACM.
[16] Nicolas Richart, Aur´elien Esnard, and Olivier Coulaud. Toward a computational steering environment for legacy coupled simulations. In ISPDC, pages 319–326. IEEE Computer Society,
2007.

702

