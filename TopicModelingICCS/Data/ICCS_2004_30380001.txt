High-Performance Parallel and Distributed
Scientiﬁc Computing with the Common
Component Architecture
David E. Bernholdt
Oak Ridge National Laboratory
Oak Ridge, TN 37831-6016 USA
bernholdtde@ornl.gov

Abstract. 1 In the scientiﬁc computing community, parallel and, increasingly, distributed computing are both important paradigms for the
development of large-scale simulation software. The ability to bridge
seamlessly between these two paradigms is a valuable characteristic for
programming models in this general domain. The Common Component
Architecture (CCA)2 is a software component model specially designed
for the needs of the scientiﬁc community, including support for both
high-performance parallel and distributed computing.
The Common Component Architecture (CCA) provides a means for
software developers to manage the complexity of large-scale scientiﬁc
simulations and to move toward a plug-and-play environment for highperformance computing. In the scientiﬁc computing context, component
models also promote collaboration using independently developed software, thereby allowing particular individuals or groups to focus on the
aspects of greatest interest to them. The CCA is being applied within an
increasing range of disciplines, including combustion research, mesoscale
storm prediction, global climate simulation, and computational chemistry, as well as connecting to instruments and sensors.
In this talk, I will introduce the basic concepts behind component-based
software engineering in general, and the common component architecture in particular. I will emphasize the mechanisms by which the CCA
provides for both high-performance parallel computing and distributed
computing, and how it integrates with several popular distributed computing environments. Finally, I will oﬀer examples of several applications
using the CCA in parallel and distributed contexts.

1
2

Research supported by the Oﬃce of Mathematical, Information and Computational
Sciences (MICS) of the U.S. Dept. of Energy, Scientiﬁc Discovery through Advanced
Computing (SciDAC) program.
Oak Ridge National Laboratory is managed by UT-Battelle, LLC for the US Dept.
of Energy under contract DE-AC-05-00OR22725.
This is the abstract of an invited talk for the Programming Grids and Metasystems
Workshop.
For more information, please see http://www.cca-forum.org

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, p. 1, 2004.
c Springer-Verlag Berlin Heidelberg 2004

