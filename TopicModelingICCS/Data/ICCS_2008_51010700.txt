Parallel Quantum Computer Simulation on the
CUDA Architecture
Eladio Gutierrez, Sergio Romero, Maria A. Trenas, and Emilio L. Zapata
Department of Computer Architecture, University of Malaga,
29071 Malaga, Spain
{eladio,sromero,maria,ezapata}@ac.uma.es

Abstract. Due to their increasing computational power, modern graphics processing architectures are becoming more and more popular for
general purpose applications with high performance demands. This is
the case of quantum computer simulation, a problem with high computational requirements both in memory and processing power. When
dealing with such simulations, multiprocessor architectures are an almost
obliged tool. In this paper we explore the use of the new graphics processor architecture NVIDIA CUDA in the simulation of some basic quantum computing operations. This new architecture is oriented towards a
more general exploitation of the graphics platform, allowing to use it as
a parallel SIMD multiprocessor. In this direction, some implementation
strategies are proposed, showing that the eﬀectiveness of the codes is
subject to a right exploitation of the underlying memory hierarchy.

1

Introduction

Contrary to classical computers, quantum computers are devices that process
information on the basis of the laws of quantum physics. Due to this fact, they
could provide an eﬃcient implementation of diﬀerent algorithms as refers both
to computing time and storage requirements. This way, they would be able to
solve some problems of non-polynomial complexity in a much smaller time [10].
Although this approach is quite promising, at the present time it is still necessary to face certain limitations. On the one hand, existing technology allows
only to construct quantum computers of very reduced dimensions [7], and on the
other hand, only a small number of eﬀective algorithms [5,8,13] are known. Nevertheless, the analysis of this computational model constitutes a topic of great
interest for physicists, computer scientists and engineers. Actually, a quantum
computer can be considered as a hardware accelerator of the classical processor,
from which it receives the orders for the resolution of a concrete problem [7],
as shown in Fig. 1. As it is not possible to know the inner state of a quantum
computer, according to the laws that govern it, outputs must be obtained by
means of a measurement, issuing a result with a certain probability.
The quantum parallelism is one of the sources of the power of quantum computers as it allows to perform simultaneous operations on an exponential set of
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 700–709, 2008.
c Springer-Verlag Berlin Heidelberg 2008

Parallel Quantum Computer Simulation on the CUDA Architecture

701

superposed states. This causes quantum computer simulation to demand high
computational power. This way, parallelism is a suitable tool for mitigating such
requirements [7,11]. The simulation of quantum computers not only requires a
high computational eﬀort but they present data access patterns with low locality characteristics. Several interests arise for this kind of simulation giving
raise to the development of diﬀerent simulators, both in software [2,3,7,11] as in
hardware [6,9,14].
In this paper we prove that modern architectures based on Graphic Processor Units (GPU) are suitable to accomplish an eﬃcient simulation of quantum
computers. GPUs are devices specialized in graphics algorithms involving very
intensive and highly parallel computations that due to their high computational
power are nowadays being used also for general purpose applications. With this
purpose, we have implemented several parallel approaches to the simulation of
the basic operators of an ideal quantum computer, using the new compute uniﬁed device architecture (CUDA) [12], lately released by the GPU manufacturer
NVIDIA. Diﬀerent strategies are explored, looking for the exploitation of the
data reference locality in this sort of architecture.

2

Quantum Computing

The ideal quantum computer to be simulated follows the model presented in [4],
consisting on the successive application of a network of quantum gates to a
quantum register with a classical initial state. The quantum bit (qubit) can be
imagined as the linear superposition of two homologous classical states we will
note as |0 , |1 , in Dirac notation. The state of a qubit can be represented using
a complex two-dimensional vector, where the basis for these two states are |0
and |1 . Thus, the state of a qubit can be written as Ψ = α0 |0 +α1 |1 , where the
coeﬃcients, or amplitudes, verify |α0 |2 +|α1 |2 = 1. |α0 |2 and |α1 |2 are interpreted
1
as the probability of measuring |0 or |1 . In vector notation, we write Ψ = α
α0 ,
0
1
|0 = 1 and |1 = 0 .
A quantum register generalizes the qubit deﬁnition. The state of a n-qubit
quantum register is determined by the linear superposition of the 2n possible
classical states provided by n bits. After this, the state of a quantum reg2n −1
2n −1
2
ister can be written as Ψ =
= 1,
i=0 αi |i with αi ∈ C,
i=0 |αi |
2
since |αi | is interpreted as the probability of obtaining |i when the register is measured. Thus, Ψ belongs to a 2n -dimensional complex vector space,
where |i constitutes a basis, with 0 ≤ i ≤ 2n −1. For example, for n = 3, we
T
will write |6 = |110 = (0 0 0 0 0 0 1 0 ) . By applying the Kronecker’s tensor
product, it is possible to represent the elements of the state space basis for
the register as a function of the individual states of the qubits. For example
|6 = |110 = |1 ⊗ |1 ⊗ |0 .
The state of a quantum register will evolve according to a transformation,
which can be interpreted as an operator U applied to the register state. Quantum physics laws settle that operator U must be a linear and unitary one. It
follows that for a n-qubit register, an order 2n ×2n matrix can be found verifying

E. Gutierrez et al.
HW accelerator

CPU

Quantum Computer
QC

classical initial state
commands
(quantum operators)
results
(meassurement)

CPU

2

q1

Quantum
Computer
Simulation

H
2

H

input
state

U0

U1

q1

q2

q2

.... ....

.... ....

qi
qn

input
state

output
state

(b)

.... ....

q0

q1

qn

H

q0

Fig. 2. A QFT implementation

q0

qi

2
U3

q1
q2

4

U2

q0

U

q1

8

q3

Graphics Processor
GPU

q3
q2

4

q2

Fig. 1. A quantum computer model

(a)

output
state

H

q0

input
state

U

qi
qn

output
state

(c)

I
I

input
state

I
U
I

.... ....

Interface
classical initial state
commands
(quantum operators)
results
(meassurement)

.... ....

Classical Computer

.... ....

702

output
state

Fig. 3. Representation of quantum transformations as quantum gate networks

U U ∗ = I, where U ∗ is matrix U both conjugated and transposed, and I is the
unitary matrix. Usually, this kind of transformations are represented in the manner of Fig. 3(a). As a particular instance, let us consider the application of a
transformation over one particular bit, as shown in Fig. 3(b). In this case, the
global transformation will be the tensor product of all the 1-qubit transformations simultaneously applied to each individual qubit. This means that the global
resulting transformation Ug will be equivalent to the application of the identity
transformation to the residuary bits. If the 1-qubit operator U is applied to the
k−th qubit then:
Ug = I ⊗

(n−k−1 times)
...

⊗I ⊗ U ⊗ I ⊗

(k times)
...

⊗I = I ⊗n−k−1 ⊗ U ⊗ I ⊗k (1)

The transformation applied to one single qubit can be interpreted like a unitary quantum gate of order 2 × 2. Table 1 presents several well-known transformations. As an example, Pauli transformation X = |0 1| + |1 0|, does project
component |0 over the |1 one, and vice versa, following that its quantum application to a classic state 0 or 1 is equivalent to the logic operator NOT. The
generalization to gates with more than one qubit is straightforward, resulting in
an associated matrix of order 2n × 2n , for n qubits.
A quantum computer can be thought to be a quantum device on which a
sequence (or network) of transformations can be applied successively to the state
of a quantum register [4]. Diﬀerent minimal universal sets of gates have been
proposed, in such a way that any n-qubit transformation can be expressed as a
network of these gates. It is proven that a complete set can be built from gates
Φ(δ), Rz (α), Ry (θ) and CNOT (2 qubits), as stated in [1].
A remarkable transformation is the Quantum Fourier Transform (QFT).
The QFT [10] is a key element of some quantum algorithms like the integer

Parallel Quantum Computer Simulation on the CUDA Architecture

703

Table 1. Inventory of quantum computer gates

Identity

1-qubit transformations
I = |0 0| + |1 1|

I

Pauli X

X = |0 1| + |1 0|

X

Pauli Y

Y = j|1 0| − j|0 1|

Y

Pauli Z

Z = |0 0| − |1 1|

Z

H =

Hadamard
y-axis rotation
z-axis rotation

1
√
2

(X + Z)

H

Ry (θ) = cos( θ2 )I + sin( θ2 )Y

R y(θ)

Rz (α) = ejα/2 |0 0| + e−jα/2 |1 1|

R z(α)

2-qubit transformation
Controlled NOT

CNOT=|0 0|+|1 1|+|2 3|+|3 2|

Controlled Phase Shift CPh(K)=|0 0|+|1 1|+|2 2|+ej

2π
K

|3 3|
K

factorization proposed by Shor [13], of great interest in cryptography. An implementation of the QFT is depicted in Fig. 2 in terms of 1-qubit Hadamard gates
and 2-qubit controlled-phase gates. QFT is deﬁned analogously to the classical
transform but a normalization coeﬃcient √12n makes it unitary:
|Ψ

3

out

1
=√
2n

2n −1

2n −1

αin
k
k=0

e

2πck
2n i

|c

(2)

c=0

Elementary Quantum Gate Simulation

Simulation of a quantum computer will consist on determining the state of a
n-qubit register, after the application of a unitary linear transformation. This
n
means that we have to compute the register’s state vector |Ψ out = 2i=0−1 αout
i |i ,
n
2 −1
out
from initial state |Ψ in = i=0 αin
|i
,
that
is,
to
determine
coeﬃcients
α
for
i
i
the ﬁnal state as a function of coeﬃcients αin
for
the
initial
state
and
the
unitary
i
matrix U deﬁning the transformation. In general, the application of this unitary
transformation will require computations with a complexity order O(22n ) as matrix U is of order 2n ×2n , since 2n is the dimension of the associated vector space.
By decomposing this transformation into a set of successive transformations with
a lower number of qubits (quantum gates or stages), the eﬀective complexity of
the simulation can be reduced. As case of study, the simulation of three basic
quatum computing operations is analyzed: a generic gate U over one qubit, the
operator U ⊗n applied to an n-qubit register, and the QFT.
Simulation of 1-qubit Gate U. The application of a 1-qubit quantum gate
performs the operation |Ψ out = Ug |Ψ in , where Ug comes from expression (1) as
a function of the 1-qubit transformation U . If we consider the initial state is a
2n −1
superposition of states Ψ in = i=0 αin
i |i , the eﬀect of the transformation over
the coeﬃcients αin
can
be
determined.
i

704

E. Gutierrez et al.

Consider that the 1-qubit transformation U = u00 |0 0|+u01|0 1|+u10 |1 0|+
u11 |1 1| is applied to the q-th qubit of a n-qubit register. If the initial state is
a classical one Ψ in = |i = |bn−1 bn−2 ...b1 b0 , that is, an element in the basis of
the state space, where bk represent the bits on the binary expression of natural
i. Transformation U over the q-th bit bq will result in:
Ψ out=|bn−1 ⊗...U |bq ⊗...⊗|b0 =

u00 |bn−1 ...0...b1 b0 +u10 |bn−1 ...1...b0 if bq = 0
u01 |bn−1 ...0...b1 b0 +u11 |bn−1 ...1...b0 if bq = 1
(3)

By means of the bitwise exclusive or (⊕), this can be expressed as:
= αout
αout
i
bn−1 bn−2 ...bq ...b1 b0 =
=

in
u00 αin
bn−1 ...0...b1 b0 +u01 αbn−1 ...1...b1 b0 if bq = 0
in
u10 αbn−1 ...0...b1 b0 +u11 αin
bn−1 ...1...b1 b0 if bq = 1

+u01 αin
u00 αin
i
i⊕2q if bq = 0
in
u10 αi⊕2q +u11 αin
if bq = 1
i

(4)

This means we can compute the output coeﬃcients from the input ones. But
this requires traversing each one of the coeﬃcients, with a O(2n ) complexity.
Actually, coeﬃcients associated to both bq = 0 and bq = 1 can be computed
simultaneously. This reduces the complexity of the simulation loop to O(2n−1 ),
making in each iteration an eﬀort equivalent to the matrix-vector product of
order 2 × 2 (computation in place).
Simulation of a Factorizable r-qubit Gate. Let us consider the case of
simulating a r-qubit gate to an n-qubit register, being this gate factorizable in
terms of the Kronecker’s product of 1-qubit gates. Its simulation follows from
the simulation of the single qubit gate. Basically it consists of applying the gate
U to one qubit after another resulting in r consecutive steps.
With the purpose of analyzing the eﬀect of the transformation over the coefﬁcient space, let us study the application of an 1-qubit transformation U over
r consecutive qubits, from the q-th to the (q + r − 1)-th qubit. Following the
argument of equations (3) and (4) we can infer that, for this case, the number of
input coeﬃcients that contribute to the calculation of a given output coeﬃcient
αout
is 2r . Furthermore, this set of coeﬃcients is given by
k
2r −1

Gq,r
k

{αk⊕2q ·m }

=

(5)

m=0

Observe that such groups, just deﬁned, act like closed groups because it is possible to determine, for all αin ∈ Gk , its corresponding output coeﬃcient αout without need of information outside of Gk . For example, when transforming the 4th
in
in
in
in
and 5th qubits, we will have q = 4, r = 2 and G4,2
k = αk , αk⊕24 , αk⊕2·24 , αk⊕3·24 .
out
out
out
,
α
,
α
and
α
can
be
computed
from
Thus, the coeﬃcients αout
k
k⊕24
k⊕2·24
k⊕3·24
4,2
those only included in Gk .
The number of disjoint groups existing in the coeﬃcient space is 2n−r . Therefore the computation complexity will be equivalent to apply 2n−r times the

Parallel Quantum Computer Simulation on the CUDA Architecture

705

1-qubit gate U to an r-qubit register. In order to simulate a given gate U ⊗n
applied to an n-qubit register, computations can be organized by splitting the
register into subregister of r qubits. This way we can work over closed groups
of a desired size. Note that the partition of the coeﬃcient space into groups is
diﬀerent for the diﬀerent subregisters.
Simulation of the QFT. The n-qubit Quantum Fourier Transform [10,3] can
be implemented as shown in Fig. 2. A straightforward simulation, gate by gate,
steps which is very ineﬃcient. Nevertheless, a more eﬃcient
will involve n(n−1)
2
implementation can be performed by grouping the gates into n stages, one for
each k-th qubit, denoted as Uk in Fig. 2: QF T = Un−1 · · · U1 · U0 .
It is remarkable that each one of these stages Uk operates only on one of the
qubits through controlled phase transformations and Hadamard gates. Therefore, the computational workload of simulating each stage Uk is the same to the
simulation a 1-qubit gate. This way, the resulting sequence of stages follows a
similar scheme than the previously described simulation of U ⊗n .

4

Implementation

In this section we proceed to map our simulation schemes onto the CUDA architecture for the three cases under study: 1-qubit gate, U ⊗n transformation
and QFT. As forementioned, our simulation model (Fig. 1) involves a classical
computation (code running on the host), and a quantum computation which is
just simulated on the GPU (kernel code running in parallel on the device).
The main challenge when designing the kernel code is to handle the limitations coming from the CUDA features. The ﬁrst limitation arises from the
device’s memory system organization. On the one hand, the vector of coeﬃcients describing the state of the quantum register uses to be very large, and
only the device’s global memory is able to store the whole of it. Although shared
memory is two orders of magnitude faster (as it acts like a parallel data cache
for each multiprocessor), it has a reduced size and it will not be able to store but
a reduced portion of the coeﬃcients. Subsets of coeﬃcients can be transferred
from global to shared memory (copy in) when they are frequently reused and
therefore a substantial increment of performance is granted. Notice that results
will have to be transferred back to the global memory (copy out). On the other
hand, an eﬃcient transference among global and shared memory is restricted to
contiguous words (coalescing).
Another important limitation comes from the synchronization mechanism
inherent to CUDA. This is just a short range synchronism, as it only allows
synchronizing threads belonging to the same block. Synchronization of threads
pertaining to diﬀerent blocks must be solved at the host side.
Simulation of 1-qubit Gate U. The simulation of a 1-qubit gate U is derived
from the parallel SIMD execution of (4), where U is applied to the q-th qubit of
a n-qubit register. According to this expression, the computation of a coeﬃcient

706

E. Gutierrez et al.

in
in
αout
k requires accessing to the coeﬃcient αk itself and the coeﬃcient αk⊕2q . Even
out
more, once these two coeﬃcients are accessed, also αk⊕2q can be calculated.
Consequently, the kernel code must determine in parallel every pair of the
form {αk , αk⊕2q }. In total, as there exists 2n−1 pairs, the same number of threads
will be required. Each thread is in charge of computing the transformation U for
each pair. As a given coeﬃcient belongs to one and only one pair, it is necessary
only one read and one write operations in global memory, assuming that each
coeﬃcient αk is located in the k-th position of the state vector in global memory.
Thus, when simulating a gate separately, the use of shared memory will not
improve the performance because there is no reusing of data transferred from
global to shared memory.
Due to the disjointness of diﬀerent pairs, the coeﬃcients computed after a
transformation can be directly overwritten (in-place computation). This way,
a higher number of qubits can be simulated. Note that synchronization points
become mandatory when consecutive 1-qubit gates are going to be simulated in
order to guarantee the correctness of the computation.

Simulation of a Factorizable n-qubit Gate. Let us consider the simulation
of a multiple-qubit gate factorizable in terms of the Kronecker’s product of 1qubit gates and/or controlled gates. Without loss of generality, the same 1-qubit
gate U is applied to every qubit of the register, that is, the transformation to be
analyzed is U ⊗n .
A ﬁrst approach follows from the simulation of the single qubit gate. It consists of applying the gate U to one qubit after another, resulting in n consecutive stages. Due to the lack of inter-block synchronization in the GPU side,
synchronization in the host side is necessary. This fact involves a diﬀerent kernel
invocation for each qubit, i.e., for each stage. This solution entails two main disadvantages: the overhead in time due to host synchronization and the ineﬃciency
of not being able to use the fast shared memory.
In contrast to this solution, a more eﬃcient proposal is introduced hereafter.
The key idea consists of copying-in a subset of coeﬃcients from global to shared
memory, performing all possible computations and then copying-out the results
from shared to global memory. These coeﬃcients allocated in shared memory
can be reused several times, resulting in more accesses to fast shared memory
and less accesses to global memory.
Basically, we consider quantum subregisters of consecutive qubits in such a
way that the corresponding groups Gk of expression (5) ﬁt the multiprocessor
shared memory. That is, resulting groups must fullﬁl the condition Card(Gk ) =
S, being S the number of coeﬃcients ﬁtting the shared memory. Thus, the number of qubits in the subregister to be transformed is log2 (S). This approach is
expressed in Fig. 5 which corresponds with the scheme of Fig. 4(a) for q = 0,
r = 4 and S = 2r , where the gates are applied to the log2 (S) less signiﬁcant
qubits. Note that in this case, q = 0, coeﬃcients in a group Gk are allocated
in consecutive memory positions. This fact involves that copy-in/out operations
beneﬁt from the coalescing condition.

Parallel Quantum Computer Simulation on the CUDA Architecture

q3

U
U

(a)

q0

q1

q1

q2
q4

q5

q5

q6

q6
output
state

Synch. on host copy−out

q2

q3

q4

q7

copy−in

copy−out copy−in

U

input
state

copy−out

q0

U

q7

(b)

input
state

q3

SynchThreads

U

q4

U
U

output
state

q5

U

SynchThreads

U

q6
q7

(c)

SynchThreads

U

input
state

MSB qubits

q2

copy−in

LSB qubits

q1

SynchThreads copy−out

U

MSB qubits

copy−in
q0

707

U
output
state

Fig. 4. Using the shared memory allows to reduce the number of GPU/CPU synchronizations (a), but for the most signiﬁcant qubits (b) the lack of coalescing may degrade
the performance. However contiguous memory locations can be used by deﬁning coalesced groups of coeﬃcients (c).
r

2 −1
= m=0
{αk⊕m }
Let G = Gr,q=0
k
/ Card(G) = 2r = S

r−m,q
Let H = Gr−m,q
∪ Gr−m,q
k
k+1 ... ∪ Gk+M
/ m = log2 (M ), q > log2 (S)
S
) = 2r−m = M
,
/ Card(Gr−m,q
k
Card(H) = S

Copy in(G)
Apply U ⊗r to α ∈ G
Copy out(G)

Copy in(H )
Apply U ⊗r−m ⊗ I ⊗m to α ∈ H
Copy out(H)

Fig. 5. Kernel for LSB qubits of U ⊗n

Fig. 6. Kernel for MSB qubits of U ⊗n

When proceeding with the remaining n − log2 (S) qubits (q > log2 (S)), a ﬁrst
attempt may consist of building new groups Gq,r
k with cardinality S, as described
above. This situation is shown in Fig. 4(b). Observe that, according to equation (5), the coeﬃcients of these groups are located far apart in global memory
when q > log2 (S). This means that global memory accesses are not coalesced,
inﬂuencing adversely the performance.
With the purpose of overcoming this lack of coalescing, a superset of coeﬃcient groups can be copied-in/out by selecting them appropriately. Being M the
S
) qubits can be now transformed because
number of these new groups, log2 ( M
the maximum number of coeﬃcients in shared memory is S. These M groups are
selected in such a way that the coeﬃcients altogether constitute S/M series of M
consecutive coeﬃcients. This idea is illustrated in Fig. 6, where H is referred to
the superset of groups. In contrast to the approach followed for the LSB qubits,
where log2 (S) gates are simulated, this one reduces the number of qubits to be
S
), but locality is severely improved. This results in more
processed to log2 ( M
kernel invocations as depicted in Fig. 4(c), where q = 4, S = 16 and M = 4.
Nevertheless, extra copy-in/out operations, including host side synchronizations,
are worthwhile because memory accesses are coalesced.
Simulation of the QFT. As discussed in section 3 the QFT can be carried out
in n stages, denoted Uk , one for each k-th qubit, as shown in Fig. 2. This way,
the resulting chain of stages is analogous to the simulation of U ⊗n previously

708

E. Gutierrez et al.

described, but the transformation to be considered for each stage (qubit) depends
on each qubit. We have considered two implementations. The ﬁrst one proceeds
stage by stage, working on the state vector coeﬃcients stored in the device global
memory. This requires n diﬀerent kernel code invocations, one for each stage Uk .
A better performance can be achieved by using the shared memory to allocate a portion of the coeﬃcient space and transferring data between global and
shared memory according to the coalescing criterion. But in this case the computational scheme becomes more complex for two reasons. On the one hand each
transformation Uk implies controlled (conditional) updates of the state vector
coeﬃcients. This makes each coeﬃcient to be transformed in a diﬀerent way, as
contrasted with U ⊗n , where the same matrix is applied to all qubits. On the
other hand, transformations Uk must be translated properly when working on
the local space of coeﬃcients copied to the share memory, since coalesced consecutive coeﬃcients in the shared memory do not necessarily correspond with
consecutive coeﬃcients in the global space.

5

Experimental Results

Simulations of a multiple-qubit gate U ⊗n and the QFT for n qubits have been implemented and tested. The target GPU platform has been an NVIDIA
GeForce 8800GTX with the following features: 16 multiprocessors of 8 processors at 1.35GHz, a device global memory of 768MB with a latency up to 600
clock cycles, and 8KB parallel data cache (shared memory) per multiprocessor
with a latency of 4 cycles. CUDA 1.1 SDK and toolkit was used. The goal was to
evaluate the two main strategies previously introduced: gate-by-gate (stage-bystage for the QFT) and coalescing-improved implementations. In the case of U ⊗n ,
we select U = H (Hadamard gate) giving rise to the so-called Walsh gate [10].
Table 2 shows the execution time in milliseconds for the stage-by-stage and
coalescing-improved strategies on the GPU platform for diﬀerent sizes of the
quantum register. It is also shown, with the purpose of setting a time reference,
a sequential simulation on a Intel Core2 6300 based platform at 1.86GHz with
linux OS using libquantum [2], one of most popular quantum simulation software.
The upper register size limit is 26 qubits, which is imposed by the memory size
of the device. Notice that each state vector coeﬃcient is a complex number made
of two simple-precision ﬂoating point numbers (32 bits). Other two signiﬁcant
parameters, for the coalescing-improved version, are the number of coeﬃcients
ﬁtting the shared memory (S) and the optimal number of consecutive coeﬃcients
to be transferred (M ). These values are platform-dependent, being S = 1024 and
M = 32 for our device. Also, the number of threads is set to a half of the number
of coeﬃcients.
Some facts can be highlighted concerning these results. Firstly, a good scalability with respect to the number of coeﬃcients can be observed for both parallel
versions. Secondly, note that the coalescing-improved version exhibits a better
performance for all the range. In other words, a high performance requires a
good exploitation of the device memory hierarchy. On the one hand, data to
be reused must be allocated in the shared memory, whenever possible. On the

Parallel Quantum Computer Simulation on the CUDA Architecture

709

Table 2. Execution time (msec) for the Walsh gate and the QFT simulations
Number of qubits of the quantum register
Implementation
CPU sequential: libquantum
H⊗n GPU stage-by-stage
GPU coalescing-improved

15

16

17

18

19

20

-

-

-

31

78

156 328 688 1453 3031 6281 13062

-

-

-

1.8 3.2 6.1 12.0 24.3 49.9

-

-

-

1.1 2.0 4.1

30

80

CPU sequential: libquantum 10
QFT GPU stage-by-stage
GPU coalescing-improved

21

22

23

24

25

26

102

212

439

8.8 18.1 37.1 76.2

158

342

150 350 730 1560 3260 6710 13910 28160 56890

2.38 4.58 9.09 18.6 39.5 85.2 185 402 874 1897 4100 8847
0.20 0.43 0.81 1.83 3.78 7.84 16.9 35.1 72.9

150

313

667

other hand, it is crucial to coalesce the accesses to the global memory. Finally,
the coalescing-improved GPU version can reach a speedup up to 85 relative to
the CPU implementation, for the fastest execution.

References
1. Barenco, A., Bennett, C.H., Cleve, R., DiVicenzo, D.P., Margolus, N., Shor, P.,
Sleator, T., Smolin, J.A., Weinfurter, H.: Elementary Gates for Quantum Computation. Phys. Rev. A 52, 3457–3467 (1995)
2. Butscher, B., Weimer, H.: The libquantum Library,
http://www.enyo.de/libquantum/
3. De Raedt, K., Michielsen, K., De Raedt, H., Trieu, B., Arnold, G., Richter, M., Lippert, T., Watanabe, H., Ito, N.: Massively Parallel Quantum Computer Simulator.
Computer Physics Communications 176, 121–136 (2007)
4. Deutsch, D.: Quantum Computational Networks. Proceedings of Royal Society of
London, Series A 425, 73–90 (1989)
5. Deutsch, D., Jozsa, R.: Rapid Solution of Problems by Quantum Computation.
Proceedings of Royal Society of London, Series A 439, 553–558 (1992)
6. Fujishima, M.: FPGA-Based High-Speed Emulator of Quantum Computing. In:
IEEE Int’l Conference on Computer Design (2004)
¨
7. Glendinning, I., Omer,
B.: Parallelization of the QC-Lib Quantum Computer Simulator Library. In: Wyrzykowski, R., Dongarra, J., Paprzycki, M., Wa´sniewski, J.
(eds.) PPAM 2004. LNCS, vol. 3019, pp. 461–468. Springer, Heidelberg (2004)
8. Grover, L.K.: A Fast Quantum Mechanical Algorithm For Database Search. In:
Annual ACM Symposium on the Theory of Computation, pp. 212–219 (1996)
9. Khalid, A.U., Zilic, Z., Radecka, K.: FPGA Emulation of Quantum Circuits. In:
IEEE Int’l Conference on Field-Programming Technology (2003)
10. Nielsen, M., Chuang, I.: Quantum Computation and Quantum Information. Cambridge University Press, Cambridge (2004)
11. Niwa, J., Matsumoto, K., Imai, H.: General-Purpose Parallel Simulator for Quantum Computing. In: Calude, C.S., Dinneen, M.J., Peper, F. (eds.) UMC 2002.
LNCS, vol. 2509, pp. 230–251. Springer, Heidelberg (2002)
12. NVIDIA CUDA Programming Guide, SDK and Toolkit,
http://developer.nvidia.com/object/cuda.html
13. Shor, P.W.: Algorithms for Quantum Computation: Discrete Logarithm and Factoring. In: 35th Symposium on Foundations of Computer Science, pp. 124–134 (1995)
14. Udrescu, M., Prodan, L., Vladutiu, M.: Using HDLs for Describing Quantum Circuits: A Framework for Eﬃcient Quantum Algorithm Simulation. In: Computing
Frontiers Conference (2004)

