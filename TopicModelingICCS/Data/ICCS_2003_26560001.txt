Cryptanalysis of the EMD Mode of Operation
Antoine Joux
DCSSI Crypto Lab
51, Bd de Latour-Maubourg
75700 PARIS 07 SP
FRANCE
antoine.joux@m4x.org

Abstract. In this paper, we study the security of the Encrypt-MaskDecrypt mode of operation, also called EMD, which was recently proposed for applications such as disk-sector encryption. The EMD mode
transforms an ordinary block cipher operating on n–bit blocks into a
tweakable block cipher operating on large blocks of size nm bits. We
ﬁrst show that EMD is not a secure tweakable block cipher and then describe eﬃcient attacks in the context of disk-sector encryption. We note
that the parallelizable variant of EMD, called EME that was proposed
at the same time is also subject to these attacks.
In the course of developing one of the attacks, we revisit Wagner’s generalized birthday algorithm and show that in some special cases it performs
much more eﬃciently than in the general case. Due to the large scope
of applicability of this algorithm, even when restricted to these special
cases, we believe that this result is of independent interest.

1

Introduction

Very recently, Rogaway proposed in [5] two new modes of operation that are
speciﬁcally tailored for applications such as disk-sector encryption. The ﬁrst
mode called EMD (Encrypt-Mask-Decrypt) mostly consists in two consecutive
passes of CBC encryption/decryption. Thus it is a sequential mode. The second
mode called EME is a parallelizable version of EMD. In an updated version of [5],
written with Halevi, the EMD algorithm is presented under the new name CMC.
In particular, during the First IEEE International Security in Storage Workshop,
held Dec. 11th, 2002 in Greenbelt, Maryland, the algorithm was presented under
this new name.
In order to encrypt disk-sectors, several important properties are often required. First, when encrypting a single sector, a change in any single plaintext bit
should impact the complete ciphertext sector. Since disk sectors are much larger
than the block-size of usual block ciphers and since ordinary modes of operation such a CBC encryption do not ensure this property, this requirement calls
for a speciﬁc construction. Second, for eﬃciency reasons, each sector should be
encrypted independently of other sectors. As a consequence, an electronic code
book at the sector level is expected. However, to avoid attacks based on sectors
E. Biham (Ed.): EUROCRYPT 2003, LNCS 2656, pp. 1–16, 2003.
c International Association for Cryptologic Research 2003

2

A. Joux

switching, it is highly desirable to use a (slightly) diﬀerent encryption for each
sector. This idea can be rigorously realized by using the notion of tweakable
block ciphers which was recently proposed by Liskov, Rivest and Wagner in [4].
Informally, a tweakable block cipher is a block cipher which possesses an extra input called the tweak. It should resist distinguishing attacks mounted by
powerful adversaries which are allowed access to encryption and decryption oracles and can choose both the plaintext or ciphertext messages and the tweak
parameters.
In order to meet these speciﬁcations, Rogaway proposed the modes of operation EMD and EME in order to build a tweakable block cipher with a large
blocksize of nm bits from an ordinary block cipher with a blocksize of n bits. In
these constructions, m represents the number of blocks that can be ﬁtted into a
single disk sector. In [5], he also stated a security theorem for the EMD mode
In this paper, we show that neither the EMD nor the EME modes of operation are secure tweakable block cipher. We proceed in several steps, ﬁrst in
section 2 we brieﬂy recall the constructions from [5], then in section 3 we describe distinguishing attacks against the two modes, ﬁnally in section 4 we show
practical attacks in the context of disk-sector encryption. In one of the practical
attacks we make use of Wagner’s algorithm for solving the generalized birthday
problem, which he introduced at Crypto’2002 in [6]. In order to improve the
attack, we need to use the algorithm in a special case which was not considered
by Wagner. It turns out that in this special case, the algorithm still works and
moreover it becomes much more eﬃcient than in the general case. An heuristic analysis of Wagner’s algorithm restricted to these special cases is given in
appendix.

2

Description of EMD and EME

In this section, we give brief descriptions of the EMD and EME modes of operation as proposed in [5]. We only describe the forward direction (encryption).
For complete speciﬁcations, the reader should refer to the original paper [5].
2.1

The EMD Mode

The EMD (Encrypt-Mask-Decrypt) mode of operation is based on CBC encryption. In order to simplify the description of this mode, we use two subroutines
CBCEncrypt and CBCDecrypt that respectively perform CBC encryption and
CBC decryption. These routines take as input a keyed block cipher EK and a
m-uple of input blocks X1 , . . . , Xm and output a m-uple Y1 , Y2 , . . . , Ym . There
is a simple but important diﬀerence between ordinary CBC decryption and the
CBC decryption as used in EMD. More precisely, in the latter case, individual
blocks are encrypted (by the block cipher EK ) instead of being decrypted (by
−1
its inverse EK
). The two routines CBCEncrypt and CBCDecrypt are respectively
described in tables 1 and 2.

Cryptanalysis of the EMD Mode of Operation

3

Table 1. The CBCEncrypt subroutine
Input: EK , X1 , X2 , . . . , Xm
Y0 ← 0n
For i from 1 to m do
Yi ← EK (Xi ⊕ Yi−1 )
Output: Y1 , Y2 , . . . , Ym

Table 2. The CBCDecrypt subroutine
Input: EK , X1 , X2 , . . . , Xm
X0 ← 0n
For i from 1 to m do
Yi ← EK (Xi ) ⊕ Xi−1
Output: Y1 , Y2 , . . . , Ym

Given these two subroutines, the description of the EMD works as follow.
Starting for a plaintext sector P1 , P2 , . . . , Pm , ﬁrst apply CBCEncrypt, then
perform the exclusive-or of the intermediate values with a mask which is computed as a function of the tweak parameter T and the ﬁrst and last intermediate
values. Afterward, reverse the block order and apply CBCDecrypt. This is summarized in table 3.
Note that the mask computation makes use of a function multx which represents multiplication by x in the ﬁnite ﬁeld F2n . Furthermore, in order to perform decryption, it should be noted that the mask value can also be computed
as a function of CCC1 and CCCm . Indeed, CCC1 ⊕ CCCm is always equal to
P P P1 ⊕ P P Pm .
Table 3. The EMD mode of operation
Input: EK , T , P1 , P2 , . . . , Pm
(P P P1 , P P P2 , · · · , P P Pm ) ← CBCEncrypt(EK , P1 , P2 , · · · , Pm )
M ask ← multx(P P P1 ⊕ P P Pm ) ⊕ T
←
(P P Pm ⊕ M ask, P P Pm−1
(CCC1 , CCC2 , · · · , CCCm )
M ask, · · · , P P P1 ⊕ M ask)
(C1 , C2 , · · · , Cm ) ← CBCDecrypt(EK , CCC1 , CCC2 , · · · , CCCm )
Output: C1 , C2 , . . . , Cm

⊕

4

2.2

A. Joux

The EME Mode

The EME mode is a parallelizable variant of EMD, it makes use of various
techniques that were introduced for parallelizable modes of operations in papers
such as [3,2,1]. In order to simplify the description of this mode, we introduce
two subroutines ParaEncrypt and ParaDecrypt. These routines take as input a
keyed block cipher EK and a m-uple of input blocks X1 , . . . , Xm and output
a m-uple Y1 , Y2 , . . . , Ym . They are described in tables 4 and 5. In the two
subroutines, the notation iL represents the multiplication in F2n of the element
L by the element having the same binary representation as the integer i.
Table 4. The ParaEncrypt subroutine
Input: EK , X1 , X2 , . . . , Xm
L ← EK (0n )
For i from 1 to m do
Yi ← EK (Xi ⊕ iL)
Output: Y1 , Y2 , . . . , Ym

Table 5. The ParaDecrypt subroutine
Input: EK , X1 , X2 , . . . , Xm
L ← EK (0n )
For i from 1 to m do
Yi ← EK (Xi ) ⊕ iL
Output: Y1 , Y2 , . . . , Ym

Given these two subroutines, the description of the EME works as follow.
Starting for a plaintext sector P1 , P2 , . . . , Pm , ﬁrst apply ParaEncrypt, then
perform the exclusive-or of the intermediate values with a mask which is computed as a function of the tweak parameter T and the exclusive-or of all intermediate blocks. Afterward, apply ParaDecrypt and obtain the ciphertext. This
is summarized in table 6. In this table, the equation CCC ← P P P ⊕ M ask is
a shorthand notation that means that the exclusive-or with the mask value is
performed, in parallel, on each block of P P P .

3

Distinguishers against EMD and EME

In order to show that the EMD and EME are not secure as tweakable block
ciphers, we propose simple attacks that distinguish these constructions from

Cryptanalysis of the EMD Mode of Operation

5

Table 6. The EME mode of operation
Input: EK , T , P1 , P2 , . . . , Pm
(P P P1 , P P P2 , · · · , P P Pm ) ← ParaEncrypt(EK , P1 , P2 , · · · , Pm )
M ask ← multx(P P P1 ⊕ · · · ⊕ P P Pm ) ⊕ T
CCC ← P P P ⊕ M ask,
(C1 , C2 , · · · , Cm ) ← ParaDecrypt(EK , CCC1 , CCC2 , · · · , CCCm )
Output: C1 , C2 , . . . , Cm

random tweakable permutations. These distinguishing attacks are extremely efﬁcient, since they require only 3 calls to the encryption/decryption oracle and
succeed with overwhelming probability.
We brieﬂy recall the usual framework for distinguishing attacks. Assume that
we are given access to a black-box oracle that contains either an implementation of EMD (or EME) or a truly random tweakable permutation (i.e., a family
of truly random permutations indexed by the tweak value). We are allowed to
perform both encryption and decryption queries with the oracle and we fully
control the plaintext/ciphertext values and the tweak values in these queries.
After some queries, we should guess whether the black-box is an implementation
of EMD (resp. EME) or a truly random tweakable permutation. We are considered successful if our probability of producing a correct guess is signiﬁcatively
better than 1/2.
3.1

The Case of EMD

In order to attack EMD we proceed as follows. First, choose a random plaintext
(1)
(1)
(1)
P (1) = (P1 , P2 , · · · , Pm ), a random tweak value T and obtain the corre(1)
(1)
(1)
sponding ciphertext C (1) = (C1 , C2 , · · · , Cm ). Then, ask for the decryption
of the ciphertext C (1) with tweak T ⊕ 1. Denote by P (2) the corresponding
plaintext.
Finally, form the plaintext P (3) as follows:
–
–
–
–

(3)

(1)

P1 = P1 ,
(3)
(2)
P2 = P2 ⊕ 1,
(3)
(1)
P3 = P3 ⊕ 1,
(3)
(1)
For i in {4, · · · , m} let Pi = Pi .

Then we ask for the encryption C (3) of P (3) with tweak T and check whether
the following conditions hold.
(3)

(1)

– Check that Cm = Cm ⊕ 1,
(3)
– No condition to check on Cm−1 .
(3)
(1)
– For i in {1, · · · , m − 2} verify that Ci = Ci .

6

A. Joux

If the conditions hold, we guess that the black-box oracle contains an implementation of EMD, otherwise, we guess that it is a truly random tweakable
permutation. Clearly, with a truly random tweakable permutation, the conditions
hold with negligible probability 2−(m−1)n . However, with an implementation of
EMD it is easy to check that they always hold. In order to verify this claim,
assume that the intermediate values P P P and CCC in the above computations
are respectively denoted by P P P (1) , CCC (1) , P P P (2) , CCC (2) and P P P (3) ,
CCC (3) .
Then, remark that CCC (2) = CCC (1) , and furthermore that P P P (2) =
P P P (1) ⊕ 1, where the exclusive-or is performed on every block in P P P (1) . For
(1)
(3)
(1)
(3)
the third call to EMD, we have P P P1 = P P P1 , since P1 = P1 , and
(3)

P P P2

(3)

⊕ P P P1 )

(3)

⊕ P P P1 )

(2)

⊕ 1 ⊕ P P P1 )

(2)

⊕ P P P1 )

= EK (P2
= EK (P2
= EK (P2
= EK (P2

(2)

= P P P2

(3)
(1)

(1)

(2)

(1)

= P P P2

⊕ 1.

Furthermore
(3)

P P P3

(3)

⊕ P P P2 )

(3)

⊕ P P P2 )

(1)

⊕ 1 ⊕ P P P2

= EK (P3
= EK (P3
= EK (P3
=
=

(1)
EK (P3
(1)
P P P3 .

(3)
(2)

(1)

⊕

⊕ 1)

(1)
P P P2 )

(3)

(1)

We can also check that for all i from 4 to m, we have P P Pi = P P Pi .
As a consequence, CCC (3) and CCC (1) are equal on all blocks except one.
The single block that diﬀers is block number m − 1, which satisfy the relation
(3)
(1)
CCCm−1 = CCCm−1 ⊕ 1. The relations between ciphertexts C (1) and C (3)
immediately follows.
As a consequence, the attacker we just proposed always outputs the correct answer when the black box contains an implementation of EMD. Moreover,
when the black box contains a truly random tweakable permutation the answer
is correct with probability 1 − 2−(m−1)n . Thus the attacker succeeds with overwhelming probability and the EMD mode of operation does not realize a secure
tweakable block cipher.
3.2

The Case of EME

With EME, a variant of the above attack can be derived. As before, choose
(1)
(1)
(1)
a random plaintext P1 , P2 , . . . , Pm , a random tweak value T and obtain

Cryptanalysis of the EMD Mode of Operation
(1)

(1)

7

(1)

the corresponding ciphertext C1 , C2 , . . . , Cm . Then, ask for the decryption
(2)
(2)
(2)
of the ciphertext C (1) with tweak T ⊕ 1. Denote by P1 , P2 , . . . , Pm the
(3)
as follows:
corresponding plaintext. Form the plaintext P
(3)

(2)

– P1 = P1 ,
(3)
(2)
– P2 = P2 ,
(3)
(1)
– For i in {3, · · · , m} let Pi = Pi .
Then, ask for the encryption C (3) of P (3) with tweak T and check whether the
following conditions hold.
(3)

(3)

– No condition to check on C1 and C2 .
(3)
(1)
– For i in {3, · · · , m} verify that Ci = Ci .
It is easy to verify that the mask values in the ﬁrst and third encryption
are equal. As a consequence, the above conditions always hold. Therefore, as for
EMD, we obtain an eﬃcient attacker that distinguishes between the EME mode
and a truly random tweakable permutation.

4

Practical Attacks in the Disk-Sector Encryption
Context

In this section, we revisit the attacks on EMD and EME to turn them into
practical attacks that can decrypt any ciphertext present on a disk sector. We
study the security of the modes in the context of disk-sector encryption for multiuser operating system. We assume that the disk encryption key is ﬁxed, known
to the operating system but protected from malicious users. We also assume that
malicious users can read and write any ciphertext sectors at the hardware level.
However, the operating system ensures that users can read or write plaintext
sectors only when the sector is part of a ﬁle which belongs to the user. Note
that the operating system cannot prevent a malicious user to access the disk
at hardware level in all cases. Indeed, with physical access to the machine, it is
possible to reboot using a diﬀerent system or even to remove the hard disk from
the computer and access it with separate harware. We consider two diﬀerent
kinds of implementations. In basic implementations, we assume that the tweak
value of a sector is the sector number. Moreover, we assume that a malicious user
can choose the numbers of the sectors that are allocated to his ﬁles. In cautious
implementations, we assume that the tweak values are obtained by hashing the
sector numbers to full-size tweaks and that no user can choose his sectors. As a
consequence, the tweak values are known but cannot be controled by malicious
users.
In the system, at least two users are present, the target of the attack Alice
and the attacker Eve. Alice has written sensitive information, say P1 , . . . , Pm ,
in a disk sector with tweak value T . Eve has obtained the associated ciphertext
C1 , . . . , Cm by accessing the disk hardware. Her goal is by playing around with
other sectors which she legitimately accesses to fool the operating system and
force it to reveal P .

8

4.1

A. Joux

Attack of Basic Implementations

With basic implementations, Eve chooses two convenient values δ1 and δ2 . She
asks the operating system to give her ownership of the three sectors numbered
T ⊕ δ1 , T ⊕ δ2 and T ⊕ δ1 ⊕ δ2 . If the operating system cannot comply, she simply
chooses diﬀerent values of δ1 and δ2 and she restarts.
Once Eve holds the three sectors, she copies Alice’s ciphertext C in sector
T ⊕ δ1 and reads some plaintext P (1) in the sector. Then she writes P (1) in
sector T ⊕ δ2 and recovers some ciphertext C (2) . Finally, she moves C (2) in
sector T ⊕ δ1 ⊕ δ2 and reads a plaintext P (3) . We claim that P (3) is in fact
Alice’s plaintext P .
In order to prove our claim, we denote by P P P , CCC, P P P (1) , CCC (1) ,
P P P (2) , CCC (2) , P P P (3) and CCC (3) the intermediate values in the encryption/decryption calls. Then we check that the following relations hold:
1.
2.
3.
4.
5.
6.

CCC (1)
P P P (1)
P P P (2)
CCC (2)
CCC (3)
P P P (3)

= CCC,
= P P P ⊕ δ1 ,
= P P P (1) ,
= CCC ⊕ δ1 ⊕ δ2 ,
= CCC (2) = CCC ⊕ δ1 ⊕ δ2 ,
= P P P.

The ﬁnal equality implies that P (3) = P and concludes the proof of the claim.
As a consequence, Eve has attained her goal and obtained the decryption of
Alice’s sensitive information. We note that the very same attack also applies to
the parallelizable mode EME.
4.2

Attack of Cautious Implementations

With cautious implementations, Eve can no longer obtain ownership of sectors
whose tweaks satisfy the correct relation. As a consequence, the attack becomes
harder. However, by creating ﬁles with many disk-sectors, Eve can obtain a large
set T of random looking tweaks. If she could ﬁnd a subset (of odd size) T1 , T2 ,
. . . T2k+1 of elements in T satisfying the relation:
T = T1 ⊕ T2 ⊕ · · · ⊕ T2k+1 ,
she could apply a generalization of the attack presented in subsection 4.1. Indeed,
when decrypting a ciphertext with tweak value T2i+1 and re-encrypting with
tweak value T2i+2 , we simply oﬀset the intermediate value by an exclusive-or
with T2i+1 ⊕ T2i+2 . Thus, by alternatively decrypting and encrypting with T1 ,
T2 , . . . , T2k , we oﬀset the original value of CCC by T1 ⊕T2 ⊕· · · T2k = T ⊕T2k+1 .
As a consequence, the ﬁnal decryption with tweak T2k+1 reveals Alice’s plaintext.
In order to evaluate the eﬃciency of the proposed attack, we need to explain
how to ﬁnd a good subset in T . Of course, as soon as T has more that n + 1
elements (where n is the tweak size in bits), we expect to ﬁnd a solution with
high probability. Indeed, in a set T with n + 1 elements, there are 2n+1 possible

Cryptanalysis of the EMD Mode of Operation

9

subsets among which 2n have odd size. Since T is a n–bit value, we expect
that the exclusive-or of at least one of the subsets of odd size will be equal
to T , with constant probability1 . However, to compute such a subset, simple
algorithms such as exhaustive search (with runtime 2n ) or basic time-memory
tradeoﬀs (with runtime 2n/2 ) are too slow to be eﬀective in our case. Indeed, if
the adversary is able to perform computation of the order of 2n (or even 2n/2 ),
he can try exhaustive search attacks against the key of the elementary block
cipher.
Yet, at Crypto’2002, Wagner presented in [6] an eﬃcient algorithm that addresses this problem. Given 2t independent lists of elements, L1 , L2 , . . . , L2t ,
his algorithm outputs 2t elements x1 , x2 , . . . , x2t (one from each list) such that:
x1 ⊕ x2 ⊕ · · · ⊕ x2t = 0.
This algorithm runs in time O(2t · 2n/(1+t) ) and requires lists of size O(2n/(1+t) ).
Wagner’s algorithm can be ﬁtted to our need, by ﬁrst choosing one arbitrary
element T in T , then by constructing the lists in the following way. Divide the
rest of T in 2t lists of equal length, L1 , L2 , . . . , L2t . Then, modify one of the
lists by xoring it with T ⊕ T . Clearly, any solution given by the algorithm of
Wagner can be translated into a equation of the form:
T1 ⊕ T2 ⊕ · · · ⊕ T2t = T ⊕ T ,
which can be used by Eve to perform our attack.
The next question is to determine the optimal value of t and see how eﬃcient
is the attack derive from this algorithm. A similar problem was already addressed
by Wagner in [6] in order
√ to attack the blind signature scheme of Schnorr. The
optimal choice
is
t
=
n which leads to a sub-exponential attack with a running
√
time O(22 n ). With a typical block cipher size, i.e. n = 128 the optimal choice is
t = 11 and it leads to a very practical attack, where Eve needs to allocate about
222 sectors2 and to perform a computation of the order of 222 operations. As a
result, Eve obtains a relation with 2048 terms and can recover Alice’s plaintext
after 2049 encryption/decryption steps.
In fact, by slightly modifying Wagner’s algorithm, it is possible to obtain
much better performance. The modiﬁcation is straightforward, however, in order
to verify that it works, it should be analyzed carefully. We perform this analysis
in appendix. The idea of the modiﬁcation, is to considerer lists L1 , L2 , . . . , L2t
which are no longer independent. In that case, we can still apply the algorithm
of Wagner and hope that it will work. Of course, since the lists are no longer
independent, we need fewer elements, moreover, by removing multiple copies of
some computations, we greatly speed up the algorithm. In fact, if some care
is taken, this really works and we obtain an even better version of Wagner’s
algorithm. Details are given in the appendix, and for the sake of simplicity, we
only give the raw results in the present section.
1
2

More precisely, the expected probability tends to 1−e−1 ≈ 0.63 as n tends to inﬁnity.
2 Gbytes with 512 bytes sectors.

10

A. Joux

Once the independence condition is removed, we can build the lists as follows.
The ﬁrst list L1 is simply T minus the element T , all lists from L2 to L2t −1
are copies of L1 . Finally, the last list L2t is a copy of L1 where each element is
xored with T ⊕ T . As before, any solution can be translated into a equation of
the form:
T 1 ⊕ T2 ⊕ · · · ⊕ T2t = T ⊕ T ,
and can be used by Eve to perform the attack. Due to the improved performance,
several diﬀerent tradeoﬀs are now possible. To choose between these tradeoﬀs,
Eve needs to take into account two parameters, the size of the temporary ﬁles she
can create to mount the attack and the number of encryption/decryption she can
perform. Note, that in certain contexts, reading and writing the encrypted disks
sector can be easily done in software, while in other contexts low-level access
to the hardware need to be performed. In the second case, Eve might want to
limit the number of accesses. At one extreme, Eve can choose t = 11, create lists
of 4096 sectors3 and perform at most 2049 encryption/decryption steps. At the
other, Eve can choose t = 5, create lists of 8 388 608 sectors4 and perform at
most 33 encryption/decryption steps. We have implemented the algorithm, set
ourselves a typical challenge (which is precisely described in the appendix) and
run the algorithm for all values of t in the range from 5 to 11. The tradeoﬀs we
used, the number of solutions found and the runtimes on a 1.5Ghz Pentium 4
are presented in table 7. One particular solution for t = 5 in given in table 8 at
the end of the appendix. Since the runtimes range from a few seconds to a few
minutes, we conclude that even careful implementations of disk-sector encryption
using the EMD (or EME) mode of operation are utterly insecure.
Table 7. Possible trade-oﬀs for n = 128 with dependent lists.
t List size
11
4096
10
8192
9 16384
8 65536
7 131072
6 1048576
5 8388608

3
4

File size
Number of Runtime Number of
(512 bytes sectors) En/Decryption
solutions found
2 Mbytes
2049
0.3 s
93
4 Mbytes
1025
0.5 s
101
8 Mbytes
513
1.1 s
18
32 Mbytes
257
4.2 s
631
64 Mbytes
129
7.7 s
2
512 Mbytes
65
60.5 s
5
4 Gbytes
33 480.6 s
67

2 Mbytes with 512 bytes sectors.
4 Gbytes with 512 bytes sectors.

Cryptanalysis of the EMD Mode of Operation

5

11

Conclusion

In this paper, we have shown that the modes of operation EMD and EME
proposed by Rogaway in [5] for application such as disk-sector encryption are
not secure. A question of practical interest is to correct these modes of operations
or to ﬁnd secure alternatives. Indeed, there is a real need for tweakable block
ciphers with large blocksize in practical applications.
As a side bonus, we remarked that Wagner’s algorithm as described in [6]
can also be applied to lists which are not independent. This special case of the
algorithm could be used for many application and when applicable, it performs
even better that the general case.

References
1. J. Black and P. Rogaway. A block-cipher mode of operation for parallelizable
message authentication. In L. Knudsen, editor, Advances in Cryptology – Eurocrypt’2002, volume 2332 of Lectures Notes in Computer Science, pages 384–397.
Springer, 2002.
2. S. Halevi. An Observation regarding Jutla’s modes of operation. Crytology ePrint
archive, Report 2001/015, available at http://eprint.iacr.org.
3. C. Jutla. Encryption modes with almost free message integrity. In B. Pﬁtzmann,
editor, Advances in Cryptology – Eurocrypt’01, volume 2045 of Lectures Notes in
Computer Science. Springer-Verlag, 2001.
4. M. Liskov, R. Rivest, and D. Wagner. Tweakable block ciphers. In M. Yung, editor,
Advances in Cryptology – Crypto’2002, volume 2442 of Lectures Notes in Computer
Science, pages 31–46. Springer, 2002.
5. P. Rogaway. The EMD mode of operation (a tweaked, wide-blocksize, strong PRP),
September 26th, 2002. Crytology ePrint archive, Report 2002/148, available at
http://eprint.iacr.org.
6. D. Wagner. A generalized birthday problem. In M. Yung, editor, Advances in
Cryptology – Crypto’2002, volume 2442 of Lectures Notes in Computer Science,
pages 288–303. Springer, 2002.

A

Revisiting Wagner’s Generalized Birthday Algorithm

At Crypto’2002, Wagner presented in [6] a generalized birthday problem which
occurs in many subﬁelds of cryptography. This problem is, given 2t lists of n–
bits numbers L1 , L2 , . . . , L2t to ﬁnd x1 , x2 , . . . , x2t , each drawn from the
corresponding list such that:
x1 ⊕ x2 ⊕ · · · ⊕ x2t = 0.
Wagner also proposed an algorithm to solve this problem, together with some
variants where the ⊕ operation is replaced by addition modulo 2n or modulo q.
However, he only considered the case where the lists Li are built independently
at random. We claim that his algorithm still works when the lists L1 up to L2t
are all copies of a small number of basic lists, or even when all the lists are
identical.

12

A. Joux

Fig. 1. The EMD mode of operation with 4 blocks

A.1

Overview of Wagner’s Algorithm

The main idea of Wagner’s algorithm is to search for solutions that satisfy extra
conditions. Of course, this means that many solutions of the initial problem are
lost, but on the other hand, the remaining ones can be found quickly. This is
done by dividing n into t + 1 slices each containing (approximately) the same
number of bits. Then, the algorithm follows a tree of successive reductions. At
(1)
the ﬁrst level of the tree, lists L2k and L2k+1 are joined into a new list Lk that
contains all numbers of the form x2k ⊕ x2k+1 which evaluate to zero on the ﬁrst
slice of bits. This basic operation is called a join operation and denoted by ✶
in [6]. When we want to specify the slice of bits on which the join operation
is performed, we add a subscript. With this notation, the ﬁrst level consists in
operations of the form:

Cryptanalysis of the EMD Mode of Operation

13

Table 8. A solution to our self assigned challenge for t = 5
Sector number Hash value (SHA-1 truncated to 128 bits)
-1 7984B0A0E139CABADB5AFC7756D473FB
0 B6589FC6AB0DC82CF12099D1C2D40AB9
513133 C3953CC09E9A27881177A493460A9D48
545527 2B1DA5A51E2C3A59021F03E4DF3FC186
680726 4D24927467F93AB9D9E9C396C9579544
733840 336B7B518C8B5AACF9874F5F3FDA91DD
736225 CAF64CA5F17DEE1B0D2167E4DBB7DCC0
741657 972861966AD02300242C190D04D96F3A
894941 CBCD0CC6D0B1C32DEAEBFB9DD6C39534
1181280 9728620BB15229A230F0A6A2DF51312E
1322461 347F38B15A6BA92A4952CA3663CB4D2A
1523176 CBCD0E313BEC474FF993BB6EDC396FF3
2658089 FCEAAD0DCAAC6C78059C95DCEC7F7357
2761557 95E4AED645DB35E6FA97F4798E95AC49
3146286 F99617106239ACFF5D7FDD47C4B1107B
3200283 C3953C3615A5BA6F418A1A678D5D7563
3279188 95E4AC21AE84467D82479DD8DC739DB2
3356233 3C46230D14A977CABE345A06119BD354
3364940 CF3AE98EBFDCBFCFE7BF30F941B6390B
3370180 3C46239BD89E4767E6A9DBD15A1A0299
3416711 4D24929BFE4697F0B6899DC6386EB8E0
3622423 FCEAADFB419BCC66BF027686EA0A1411
4332954 67CF00C1B868FA617DE515DE2F80077B
5181376 336B78CC57077035818035A602E754F3
5248208 B67DF5187B3243A42C42039A8CECFB85
5330409 71B0B404746F3090B6BA5989950E20D5
5593763 67CF00577457F735D5E6B01BB9D134F8
6119129 E4C18A2CCDA5627F2E79AC30EB1ACDA6
6601576 F99616B15999B12D0364F4FB700CA182
6643369 71B0B5A54FCC432F2145A4F997A46624
6701136 B67DF530350B470B47AB8B3326A17968
6853675 CAF64C8DBF4784D9B5D1423DFF1BC842
7472044 347F3931E17D76AE0DBFA9D5D7D31754
7631272 CF3AE80E04C44070CD5D2B3C321F67F1

(1)

Lk ← L2k ✶1 L2k+1 .
Similarly, the i-th level of Wagner’s algorithm consists in operations of the
form:
(i+1)
(i)
(i)
Lk
← L2k ✶i L2k+1 .
At the last level (level number t) the join operation is formed simultaneously
of the two slices of bits numbered t and t + 1. By abuse of notation, we will
denote this last join operation by ✶t , thus implicitely expanding slice number t
to include slice number t + 1.

14

A. Joux

Clearly, since all lists in the same level are mutually independent, when the
numbers of bits in each slice are equal to the logarithm (in base 2) of the size
of the initial lists, all join operations except the last one roughly preserve the
sizes of the lists. Moreover, the last join operation outputs a small list of ﬁnal
solutions.
At explained in [6], the join operation can be very eﬃciently performed by
sorting the two lists and by reading the partial collisions from the sorted lists.
A.2

The Case of a Single List

When the lists are no longer independent, the analysis of the algorithm’s behavior
is much more intricate. To start this analysis, let us consider the case where all
lists are equal to L(0) . Of course, in that case, there are many trivial solutions
obtained by xoring any expression of the form x1 ⊕· · ·⊕x2t−1 with itself. However,
we would like the algorithm to output a non-trivial solution. The ﬁrst step of
the analysis is to determine whether such a non-trivial solution do exist. To
get an expected lower bound on the number of non-trivial solutions, we give an
heuristic evaluation of the number of solutions that do not contain any duplicate
xi . Clearly, no such solution may exist when the size S0 of L(0) is smaller than
2t , thus, in the sequel we assume that S0 > 2t . In that case, the number of
non-ordered subsets of 2t chosen from L(0) , can be computed as the binomial
of S0 and 2t . However, the probability that such a subset survives all the join
operations is not easy to compute. Indeed, we need to consider all the possible
orders of the subset and see if one of those do survive. Therefore, we need to
consider many events, which are not independent. As a consequence, exactly
computing the number of expected solutions is not straightforward, and we will
only perform an heuristic analysis.
In order to perform this heuristic analysis, we remove the simplest dependences and then assume that the remaining objects are independent. Simple
dependence between diﬀerent orders for the same subset clearly arise when joining a list with itself. Indeed, x⊕x is always 0 and moreover x⊕x is always equal
to x ⊕ x. To remove these dependences, we can make a simple change to the
join operation and ensure that we never create x ⊕ x and that we create x ⊕ x
t
only once. With this change, every non-ordered subset can occur in (2t )!/22 −1
diﬀerent orders. Moreover, the probability of survival of each order can be estit
n
mated as 2−2 · t+1 . Simplifying the product of these two numbers, we estimate
the probability of success of a single non-ordered subset by:
(2e)2t

1
.
· 2(n/t−t)2t

On the other hand, we also know that the probability of success cannot be better
than the probability of satisfying the xor condition we want to obtain, i.e., 2−n .
An heuristic analysis of these probabilities shows that S0 should be at least 2
or 3 times 2t and should be of the order of 21+n/t . As a consequence, the size of
the list is about twice the size of one of the lists in the general case of Wagner’s

Cryptanalysis of the EMD Mode of Operation

15

algorithm with similar parameters n and t. Moreover, as in the general case, the
optimal tradeoﬀ is roughly for t = n1/2 and t should not be greater than n1/2 .
Concerning the performance of the algorithm, note that since all the lists
are equal, all the join operation in a single level are identical. Thus, instead of
performing 2t join operations, we only need to perform t join operations, one per
level of the tree. As a consequence, the algorithm becomes much faster. Indeed,
the runtime is O(t·2n/t ) instead of O(2t+n/t ). With the optimal choice, t = n1/2 ,
we have a runtime of O(t · 2t ) instead of O(22t ).
A.3

The Case of Two Lists

When all the lists are either L or L , Wagner’s algorithm is also very fast. In
the general case, with an arbitrary repartition between copies of L, 3 join paths
of length t are required. For the sake of simplicity, we only address two of these
cases, where the repartition is either 2t−1 copies of L and 2t−1 copies of L or
2t − 1 copies of L and a single copy of L . In these two cases, 2 join paths will
suﬃce.
The ﬁrst repartition is the simplest to deal with, it suﬃces to apply the join
tree for 2t−1 copies of a single list twice, on L and on L independently and
ﬁnally to join the two resulting lists at the last level.
With the second repartition, let L(0) = L and L (0) = L , then at each level
but the last, we perform two join operations as follow:
L(i+1) ← L(i) ✶i L(i) ,
L (i+1) ← L(i) ✶i L (i) .
At the last level, we terminate by computing the join of L(t−1) and L (t−1) .
Of course, this fast evaluation of Wagner’s trees can be generalized to any
small number m of diﬀerent lists. Then, the maximal number of join paths is
bounded by 2m − 1. Thus, in all these cases, we get a complexity of O(t · 2t )
elementary operations instead of O(22t ) for the original algorithm.
A.4

Implementation, Practical Challenge

In order to verify that our rough heuristic analysis is indeed correct, we implemented the algorithm and we did set up a practical challenge for ourselves.
This challenge is in the spirit of cautious implementations of disk-sector encryption as described in section 4.2. We arbitrarily decided that the tweak values
for sector number i would be generated by truncating to 128 bits the result of
SHA-1 applied on the character string containing the decimal representation of
i. Moreover, we decided to choose to special values of i for the tweak values T
and T associated to Alice’s sector and to the ﬁnal decryption in the attack from
section 4.2. Namely, for T we choose i = −1 and for T we choose i = 0. The rest
of the values range from 1 to the total number of needed sectors. We computed
this total number for various values of the parameter t (see table 7) and ran the

16

A. Joux

algorithm. For t = 5, the solutions we found (in 8 minutes) are compact enough
to include in this paper, one of them is given in table 8. The hash values in the
table are written in hexadecimal.
Note: In the implementation, we took care to remove any non-trivial duplicates
appearing during the computation. While very few such duplicates do appear,
this step is important. Indeed, non-trivial duplicates lead to trivial solutions at
the next level. Moreover, a small number of trivial solutions quickly undergoes
an exponential growth, ﬁll the available memory and cause the algorithm to fail.

