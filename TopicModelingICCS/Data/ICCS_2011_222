Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 2049–2057

International Conference on Computational Science, ICCS 2011

An Intuitive Framework for Accessing Computing Clouds
Jie Tao, Holger Marten
Steinbuch Center for Computing, Karlsruhe Institute of Technology, Germany

David Kramer, Wolfgang Karl
Institut f¨ur Technische Informatik, Karlsruhe Institute of Technology, Germany

Abstract
Cloud computing introduces a novel computing paradigm that provisions on-demand computational capacity as
a service. Increasing numbers of users are migrating their applications to the computing Clouds to remove or reduce
the costs on resource investment and management. However, individual Cloud platforms, either private or public,
provide their own interfaces for customers to interact with the underlying infrastructures. This situation undoubtedly
burdens the users who compute on diﬀerent Clouds. In this work, we developed a generic interface that allows the
user to access the diverse Clouds in a uniﬁed way. It provides utilities for requesting and invoking the services. It
oﬀers graphical views to show the Cloud information that is visible to the users. The interface also combines diﬀerent
Clouds into a single platform enabling inter-Cloud communications.
Keywords: Cloud Computing, Graphical User Interface, Grid Computing, Interoperability

1. Introduction
Cloud computing is emerging as a novel computing paradigm. A speciﬁc feature of this new model is that computation and storage resources are provided as services. In this way, applications/software can be executed or maintained
on the Cloud without the necessity of operating an own local infrastructure. Such a computing model signiﬁcantly
reduces the cost for resource and software management, which is clearly an attractive beneﬁt for small business and
research groups. In addition to cost-eﬃciency, Cloud computing shows other advantages such as on-demand resource
provision, supporting legacy codes, service reliability, easy management, and so on. Therefore, more and more Cloud
infrastructures are established and increasing numbers of users are joining the Cloud world.
Nevertheless, Cloud computing is a novel technology that has not yet been well established. One problem we
observed is the user interface which varies from Cloud to Cloud. With the increasing number of existing Cloud
platforms, users will interact with diﬀerent Clouds due to the services and their price each Cloud requires. This
indicates that Cloud users have to install various client software and learn how to use the commands or interfaces to
request the services.

Email address: {jie.tao, holger.marten}@kit.edu (Jie Tao, Holger Marten)

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.224

2050

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

Actually, Cloud computing is not a completely new concept. It has similar features as Grid computing that
has been investigated for more than a dozen of years. A detailed comparison between these two paradigms can be
found in [1]. Grid computing has ever faced a problem: diﬀerent middleware stacks oﬀer their own user interfaces
for accessing the infrastructure. This problem was solved by building an abstraction layer to hide the middlewarespeciﬁc implementation [2, 3, 4]. We follow this approach to mitigate the observed problem in Cloud computing.
The solution is an integrated, intuitive framework that can be extended to access any Cloud in a uniﬁed manner. The
framework contains generic, standard interfaces and views for Cloud authentication, service requests, and information
presentation. Users see an identical view, no matter which Cloud is accessed. In addition, the interface can be used to
transfer information across the Clouds integrated in the platform, and is hence not only a tool for accessing the Clouds
but also an interface enabling inter-Cloud communications.
The remainder of the paper is organized as follows: Section 2 gives an overview of the state-of-the-art and the
challenges in Cloud computing. This is followed by the design issues of the developed user interface in Section 3.
Section 4 shows the graphical views of the generic interface and describes the implementation details. The paper
concludes in Section 5 with a short summary and several future directions.
2. Cloud Computing: Status and the Challenge
Cloud computing is attracting more and more users. In addition to the common customers from industry, researchers out of the scientiﬁc ﬁelds are also joining the Cloud world. The reason for the success of Cloud computing
lies in its easy-to-use computing model and the beneﬁts it brings to the users. We see the following features from
Cloud computing:
• Elasticity. Cloud computing provides users with the ﬂexibility in the amount of requested resources, e.g. size
of the storage and number of the processors/machines. This feature is rather helpful for scenarios like “Web
service operators need to add or remove servers depending on the number of users”.
• Economy. In Cloud computing, customers pay only what they used. For small companies or research groups,
the cost for using Cloud resources can be much cheaper than investing and maintaining an own local system.
• Reliability. Cloud systems are fault tolerant and the services on them are highly available.
• On-demand. Cloud computing provides users with customized environments that are tailed to individual requirement. This feature is more user friendly than Grid computing where the application has usually to be
adapted to the target architecture.
Over the last years, a number of Cloud infrastructures have been built. Well-known examples include commercial
products like Amazon EC2 [5], Google App Engine [6], Microsoft Azure [7], salesforce.com [8], OpSource [9],
Zimory [10], as well as research systems such as Nymbus[11], Cumlus [12], Eucalyptus [13] , and OpenNybula [14].
These Clouds provides diﬀerent services. Based on the common deﬁnition for Cloud and its services, existing Clouds
can be categorized into three classes: Infrastructure as a Service (IaaS), Software as a Service (SaaS), and Platform
as a Service (PaaS). IaaS-Clouds provide the users with on-demand hardware, normally virtual machines, for them to
run their applications. SaaS-Clouds present users’ software as Web services so that the software can be shared and
the user is released from the task of maintaining a local copy. PaaS-Clouds provide both SaaS and the hardware to
run the web services. Independent of the individual service, existing Cloud infrastructures are generally gaining more
and more users.
However, the Cloud technology is currently still in the development phase. Many issues, like data security and
monitoring, are still not considered or have to be improved. The presented work is performed in relation to one of
such issues – the user interface. We observed that the interfaces Cloud infrastructures provide to the users, either in
the form of Web service or command-line, are diﬀerent without standard. To access a Cloud, a user has to install
the client software and learn how to use it. With increasing Cloud platforms and services, it is sure that a Cloud
user will interact with diﬀerent Clouds and expects a single interface. We developed such a generic interface with
standardized and intuitive graphical views. In the following, the design issues of the user interface are described ﬁrst.
The implementation is then detailed and the graphical views are illustrated.

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

2051

Figure 1: Software architecture of the generic Cloud user interface.

3. Design of the Generic User Interface
For a generic interface that allows the user to access any Cloud in a uniﬁed way, we designed a software architecture. As shown in Fig. 1, the infrastructure contains an abstraction layer and an implementation layer. The abstraction
layer is the core of the interface and contains all functionalities that are common to all Clouds. Individual requirements
of diﬀerent Clouds are handled by the implementation layer and integrated into the core using extension points. This
means that a speciﬁc implementation is required for each single Cloud. We have designed and developed the core as
a standard component that can be easily extended for individual Cloud infrastructures.
The core component provides functionalities commonly required for accessing a computing Cloud. After an
investigation of existing Cloud infrastructures, we designed the following functions in the core of the generic interface:
• Cloud authentication. A Cloud infrastructure only allows authorized users to access its resources. Therefore,
an authentication process is conducted by all Clouds before any service is available to the users. We designed
common interfaces and standard views for users to submit their access keys.
• Service request, invocation, and termination. In the Cloud world, everything is supplied as a service. Users
can request a service, run the service, and terminate the service. The abstraction layer of our Cloud interface
contains implementations for the basic service related operations, like request composition and action items for
service execution.
• Information presentation. Each Cloud has certain information visible to the users. We have designed an
identical graphical view to present such information.
• Interactive terminal. Users may expect to be interactive with the Cloud when running their applications. We
provide consoles to support the users.
Altogether, the abstraction layer aims at establishing a basic infrastructure that covers the common feature of different Cloud interfaces. It also provides means to extend the infrastructure for handling the requirement of individual
Clouds. Currently, we have implemented the core functionality, together with the extensions for EC2 and Eucalyptus.
4. Implementation and the Graphical Views
The Cloud interface is developed on top of the g-Eclipse framework. g-Eclipse [2, 15] is a project for Grid
computing. The goal of g-Eclipse is to provide a generic framework that allows users to access the existing Grid
infrastructures via a standardized, customizable interface. This framework is designed for all Grid users, operators,

2052

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

Figure 2: Connecting the Amazon S3 with g-Eclipse.

and application developers. Grid users can interact with the Grid resources in a simple, graphical way without having
to know the technical details. Resource providers can use the intuitive tools to operate and maintain the Grid sites,
manage the virtual organizations, and perform benchmarking. Application developers reduce the development cycle
with the g-Eclipse support of remote building and deployment tools.
We use g-Eclipse as the base for developing the Cloud user interface due to its following features:
• g-Eclipse is built on top of the well-known, widely-applied Eclipse framework and follows the programming
standard of Eclipse.
• g-Eclipse uses a layered infrastructure with middleware-independent interfaces and middleware speciﬁc functionalities. This architecture can be directly adopted to implement the abstraction layer and the Cloud speciﬁc
implementation layer of this work.
• g-Eclipse has developed interfaces and views for handling Grid authentication, which can be used for the same
issues in the Cloud.
• g-Eclipse provides SSH terminals for Grid users to log into a working node. We need this functionality to
enable the interactive operations with the computing Clouds.
• g-Eclipse implemented several schemes for connecting local or Grid storage systems. This can be extended
to connect storage Cloud and allows the user to transfer data between local machines and the Cloud or across
diﬀerent Cloud platforms. Fig. 2 is an example of transferring ﬁles between the local machine and the Amazon
storage Cloud S3. The ﬁgure shows a screenshot from the g-Eclipse runtime, where users built two connections
with one connection for accessing the Amazon S3 and the other for the local ﬁle system. The ﬁles can be copied
from one storage to the other simply using drag&drop. Similarly, users can move ﬁles among diﬀerent Cloud
storages by simply creating a connection to each storage element.
Overall, g-Eclipse oﬀers several functionalities we require to establish the Cloud user interface. Therefore, we
reuse the corresponding plug-ins developed within the g-Eclipse project and implemented several other plug-ins.
Together, these software packages provide the basic core functionalities and the accesses to EC2 and Eucalyptus.

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

2053

Figure 3: Screenshot of creating an AWS VO (left) and an authentication token (right).

4.1. Cloud Authentication
To access a computing Cloud, users usually have to provide credentials to prove that they are authorized. For
example, to use the Amazon Web Services (AWS), a user needs an Access ID and its associated Secrete ID. With our
uniﬁed interface the users do not interact directly with the underlying Cloud infrastructures. Hence, the authentication
issue is one of the tasks of our interface.
g-Eclipse provides two wizards for users authentication issues. One is the VO wizard which creates an object to
represent the user’s Virtual Organization (VO) and an Authentication Token wizard that holds the users certiﬁcation
keys. In the Grid world, any user must be a member of a VO and the VO must be speciﬁed for any access to the Grid.
Cloud computing does not apply the VO concept. However, we maintain the VO view in the Cloud user interface and
apply it to specify the access endpoints of the underlying cloud infrastructure.
A screenshot of the wizard for creating an AWS VO is shown in the left side of Fig. 3. As shown in the ﬁgure, the
VO wizard allows users to deﬁne a VO object. The user has to give the name of the VO, his access ID, and the access
points of the underlying Cloud.
The Authentication Token wizard of g-Eclipse is applied to hold the authentication information of a Cloud user,
for example, the Access ID and Secrete ID in the case of AWS. The right side of Fig. 3 shows a screenshot of the
wizard for creating the AWS authentication token. As can be seen, users provide their AWS credentials using this
wizard. g-Eclipse then uses these credentials to create tokens and relies on the tokens to interact with the Cloud
infrastructures.
Authentication tokens have usually a limited lifetime. g-Eclipse provides a simple approach for users to control
the tokens during their lifecycle. All tokens of a user are managed by an internal manager of g-Eclipse. These tokens
are shown to the user in a token view, where users can activate, deactivate, create, or delete an authentication token.
When the user accesses a Cloud infrastructure, one correct token is automatically selected and the access information
contained in the token is sent to the Cloud for user authentication.
4.2. Service Editor
A service request is often associated with some input from the users, such as requirement to the resources and
ﬁles to be uploaded to the Cloud. Diﬀerent services have also individual format of the parameters. For example, CPU
frequency and memory size are typical speciﬁcations for requesting a hardware infrastructure, while version number
and ﬁle size are parameters to describe a software package. For supporting the users to compose service requests we
developed a multi-layer editor which can hold an individual editor page for one service class.
Figure 4 depicts a sample editor page which can be used to create an IaaS request. This page is commonly
designed for diﬀerent Cloud providers and can be easily extended for potential requirement of future computing

2054

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

Figure 4: The IaaS page of the Service Editor.

Clouds. Currently, the IaaS page allows the user to give the demands on the target architecture, the operating system,
and the property of some concrete resources.
Based on the user-given requirement on a Cloud service, a service description ﬁle is created and stored in the folder
Cloud Service Descriptions of the user deﬁned project. A context menu is combined with the service description ﬁle,
allowing the user to submit the service request to a Cloud platform. This folder can be seen in the left frame of Fig. 4.
4.3. Service Execution/Termination
The proposed Cloud access platform provides means for users to compose service requests. It is also the task
of the platform to interact with the underlying Cloud to execute the service request. This task is Cloud speciﬁc and
requires an individual implementation for each Cloud. In the case of AWS, for example, our system takes care of
uploading of the user’s Amazon Machine Image (AMI) 1 to S3, the registration of the image, and the launching of the
AMI instance. All of these functionalities are supported with information windows that can be used by the users to
provide information like the location of the AMI and the parameters for launching the AMI.
Figure 5 shows the launch dialog that allows the user to specify the conﬁguration parameters such as the type and
the number of instances to be launched. Furthermore it is possible to specify a payload ﬁle that is uploaded and made
accessible to the running instances. This ﬁle is usually used to parameterize these instances.
4.4. Information View
Each Cloud has certain information which is visible to the users. IaaS Clouds, for instance, usually tell the users
which machine images exist and which are accessible to them. The developed platform provides a graphical view to
show such information.
Figure 6 is a sample view with the Eucalyptus Cloud. This view contains several folders, including the Computing
folder and the services folder. The former shows the computing resources, which are actually the image instances
1 An AMI is an encrypted machine image that contains all information necessary to boot an instance of an Operating System and the user’s
speciﬁc software. For example, an AMI might contain Linux, Apache, and a web package or it might contain Linux, Hadoop [16], and a custom
application.

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

Figure 5: Screenshot of the conﬁguration dialog for launching an AWS machine image.

Figure 6: Screenshot of the information view with Eucalyptus.

2055

2056

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

Figure 7: Screenshot of the SSH login wizard (left) and the created console (right).

running on the Cloud. The Services folder shows all images. These AMIs are listed in separate folders for distinguishing those owned by the user and those accessible to the user. Each item in the folders is combined with a context
menu, allowing the users to invoke an action. For example, the running instances in the Computing folder has a menu
item “terminate” that can be used to stop the execution and the AMI in the Services folder is combined with an item
“launch” for users to launch the image.
4.5. Interactive Terminal
The developed platform oﬀers the possibility for users to access the virtual machine via an SSH shell, in case that
an instance is launched. In order to use this connection method, the security group used to launch the AMI has to open
the port 22 (ssh default port). Because the ssh connection method uses the Eclipse connection infrastructure, the ssh
private key has to be inserted into the list of available keys. The running instances can be connected using an action
in the context menu. This action opens the SSH login data dialog with the correct external DNS name inserted. The
only parameter to be provided is the login name which is ”root”. There is no need for a password, since it is contained
within the ssh private key. Figure 7 shows a sample dialog (left side). With the SSH dialog, a console is created,
where the user can work on it like operating a local terminal.
5. Conclusions
This paper describes a generic framework implemented for Cloud users to access the various Cloud infrastructures
in a uniﬁed fashion. The framework provides a graphical interface where service requests can be described and
submitted, and services can be executed or terminated. The framework also enables the interconnection of diﬀerent
Cloud platforms.
Currently, we have developed a core architecture with basic, Cloud independent interfaces and views. This architecture can be easily extended to connect any Cloud infrastructure. As a prototypical implementation, we have
extended the core to access the Amazon EC2 and Eucalyptus. In the next step, more functionalities will be added to
the core. For example, we will provide templates and tools for supporting program development on the Cloud. In
addition, other Clouds will be integrated into the framework.
References
[1] I. T. Foster, Y. Zhao, I. Raicu, S. Lu, Cloud Computing and Grid Computing 360-Degree Compared, in: Grid Computing Environments
Workshop, 2008, pp. 1–10.

Jie Tao et al. / Procedia Computer Science 4 (2011) 2049–2057

2057

[2] H. Kornmayer et al., gEclipse- An Integrated, Grid Enabled Workbench Tool for Grid Application Users, Grid Developers and Grid Operators based on the Eclipse Platform, in: Proceedings of the 2nd Austrian Grid Symposium, Innsbruck, Austria, 2006, project web:
http://www.geclipse.eu/.
[3] M. Malawski1, T. Bartynski, M. Bubak, A Tool for Building Collaborative Applications by Invocation of Grid Operations, in: Computational
Science - ICCS 2008, Vol. 5103 of LNCS, 2008, pp. 243–252.
[4] OMII-Europe, The OMII-Europe Project, http://www.omii-europe.com/index.html.
[5] Amazon Web Services, Amazon Elastic Compute Cloud (Amazon EC2), http://aws.amazon.com/ec2/.
[6] Google, Google App Engine, http://code.google.com/intl/de-DE/appengine/.
[7] Microsoft, Windows Azure Platform, http://www.zimory.com/.
[8] Salesforce, Salesforce Software, http://www.salesforce.com/.
[9] OpSource Inc., OpSource Cloud, https://www.opsourcecloud.net/.
[10] Zimory, Zimory Public Cloud, http://www.microsoft.com/windowsazure/.
[11] K. Keahey et. al., Science Clouds: Early Experiences in Cloud Computing for Scientiﬁc Applications, in: Proceedings of CCA-08, 2008.
[12] L. Wang, J. Tao, M. Kunze, Scientiﬁc Cloud Computing: Early Deﬁnition and Experience, in: Proceedings of the 2008 International Conference on High Performance Computing and Communications (HPCC 2008), 2008, pp. 825–830.
[13] D. Nurmi et. al., The Eucalyptus Open-source Cloud Computing System, in: Proceedings of CCA-08, 2008.
[14] B. Sotomayor et. al., Capacity Leasing in Cloud Systems using the OpenNebula Engine, in: Proceedings of CCA-08, 2008.
[15] P. Wolniewicz et al., Accessing Grid computing resources with g-Eclipse platform, Computational Methods in Science and Technologie 13 (2)
(2007) 131–141.
[16] Hadoop, Apache Hadoop MapReduce, http://hadoop.apache.org/.

