Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2553 – 2556

International Conference on Computational Science, ICCS 2013

Numerical parallel approach to counting Hamiltonian cycles with
Proth primes
Koichi Kubotaa
a Chuo

University, Tokyo, Japan

Abstract
Counting the number of Hamiltonian cycles of a given graph can be formulated with higher order derivatives. Thus its value
can be computed as the residue with complex ﬂoating numbers. But there are inevitable rounding errors in the conventional
computation of the residue whereas the mathematical result is an integer value. In this paper, by use of the Proth primes that are
represented by k · 2n + 1 for odd number k, algorithms of the residue with modular arithmetics are proposed in order to compute
the exact integer result. It is shown that they are naturally executed on parallel processors by partitioning the summation of the
residue, so that, with q (≤ 2n ) processors, the time complexity is O(n3 2n /q) for each machine and O(log q) for summing up all
the q partial sums.
Keywords: modular arithmetic; higher derivatives; discrete Fourier transform; graph;

1. Introduction
Computational diﬀerentiation [1] is one of the important fundamental tools in numerical computation. Some
of combinatorial graph problems that are apparently considered as non-numerical computations could be formulated by numerical algorithms via diﬀerentiation. Counting the number of Hamiltonian cycles of a given directed
graph G that is one of such the typical combinatorial computations can be formulated by the higher order differentiation of a polynomial, and it is also formulated with numerical integration on complex numbers [2]. The
value of the number of Hamiltonian cycles, denoted by c(G), can be computed by an ordinary sequential algorithm
using dynamic programming technique in time O(n2 2n ), however, its computational time is exponential since the
computation of c(G) belongs NP-hard. Thus it is important that the modiﬁcation of algorithms for use of parallel
machines, e.g. parallel branch-and-bound.
Since the numerical approaches based on the residue can be naturally executed by SIMD (single instruction
multiple data) architectures, an algorithm derived from them may be naturally one of practical algorithms on
parallel machines. In this paper we modify the algorithms that are based on the residue computation proposed
with complex ﬂoating-point numbers [2, 4], and we propose an algorithm with modular arithmetic for prime
numbers, so-called Proth primes or Proth numbers, in order to avoid rounding errors with complex ﬂoating-point
numbers. Moreover, since the algorithms are free from rounding errors, they can be executed on the parallel
machines by means of partitioning the range of summation (or integration). Some numerical experiments [4] with
100 linux machines are brieﬂy introduced, where the computational speed is almost proportional to the number of
machines.
E-mail address: kubota@ise.chuo-u.ac.jp.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.439

2554

Koichi Kubota / Procedia Computer Science 18 (2013) 2553 – 2556

2. Preliminaries
Several kinds of algorithms based on higher derivatives for counting the number of Hamiltonian cycles of
a directed (or undirected) graph with n vertices are given in [2], which can be regarded as variations of the
computation of matrix permanent [3]. They are formulated as a computation of the n-th order higher derivatives
of a multivariate polynomial or the (2n − 1)-th order (or a speciﬁed order) higher derivatives of a univariate
polynomial.
2.1. Counting Hamiltonian cycles[2]
Given a simple directed graph G = (V, E), where V is the set of n vertices and E is the set of arcs. Let n × n
square matrix A = (ai j ) with 0-1 elements be the adjacent matrix of G, i.e., ai j is equal to 1 if there is an arc from
vertex i to vertex j, otherwise 0.
Let us consider an n × n multivariate polynomial matrix H(x1 , · · · , xn ) and an n × n univariate polynomial
matrix H(x) that are deﬁned by
H(x1 , · · · , xn ) ≡ (X(x1 , x2 , · · · , xn )A)n

H(x) ≡ (X(x)A)n ,

and
0

(1)

n−1

1

where X(x1 , · · · , xn ) ≡ diag(x1 , x2 , · · · , xn ), X(x) ≡ diag(x2 , x2 , · · · , x2 ), and diag(d1 , · · · , dn ) is an n × n
diagonal matrix with dk as its (k, k)-element.
Deﬁnition 1. For a graph G = (V, E), c(G) indicates the number of Hamiltonian cycles in G.
Proposition 1. (See [2]) The value of c(G) is equal to the n-th order cross derivative of each diagonal element
Hk,k (x1 , · · · , xn ) and is equal to the T th (T = 2n − 1) derivative of each diagonal element Hk,k (x):
c(G) =

∂
Hk,k (x1 , · · · , xn )
∂x1 · · · ∂xn

and

c(G) =

1 ∂T
Hk,k (x)
T ! ∂xT

(k = 1, · · · , n),

(2)

where Hi, j (x1 , · · · , xn ) are the (i, j)-element of H(x1 , · · · , xn ), and Hi, j (x) are the (i, j)-element of H(x). (They are
equal to eti H(x1 , · · · , xn )e j and eti H(x)e j , respectively, where ek is the k th unit vector.)
2.2. Complex residue computation
Given a polynomial g(x) with degree m
g(x) = a0 + a1 x + a2 x2 + · · · + am−1 xm−1 + am xm ,

(3)
2π

g(z)
1
1
dz = 2π
g(eiθ )e−ikθ dθ, (k =
the coeﬃcient of k-th monomial xk of g(x) are computed as the residue: ak = 2πi
zk+1
0
2π
2π
N−1
1
0, · · · , m). The value of ak can be computed with numerical integration for N > m: ak = N j=0 g(ei N j )e−i j N k .
For the univariate polynomial matrix H(x) in eq.(1), their coeﬃcients can be computed as the residues. Thus,
k
n
denoting the target degree by T (= n−1
k=0 2 = 2 − 1), the number of Hamiltonian cycles c(G) is computed as

c(G) = aT =

1
N

N−1

H1,1 (ei N k )e−iT N k .
2π

2π

(4)

k=0

Note that, N can be chosen to be equal to 2n where n is the number of vertices in the graph G = (V, E)
since there are no collisions on a2n −1 with discrete Fourier transform with degree N = 2n whereas the degree of
polynomials Hk,k (x) is greater than 2n (see [2]). The summation in eq.(4) is arbitrarily partitioned and computed
in parallel however the value as the result may be contaminated with rounding errors.
3. Modular arithmetic
Since the above polynomials have integer coeﬃcients, the residues are computed with modular arithmetic [5]
in order to avoid rounding errors with complex ﬂoating-point numbers. The purpose of the computation is to
extract the coeﬃcient of the monomial with the speciﬁed degree from the expansion of the polynomial (X(x)A)n
in eq.(1). Hereafter, arithmetic operations may be executed implicitly with modulo M for simplicity.

Koichi Kubota / Procedia Computer Science 18 (2013) 2553 – 2556

2555

3.1. Residue computation with modular arithmetic
Deﬁnition 2. For a prime M, α(M) indicates the primitive root of M.
Deﬁnition 3. For a prime M, ω(M, N) indicates the N-th root of 1 mod M, where N is a product of factors of
M − 1. (It is obvious that ω(M, N) is equal to α(M)(M−1)/N mod M.)
Lemma 1. For the polynomial g with order m in eq.(3), and a prime M > m, the value of each coeﬃcient of g
j
− jk
mod M, k = 0, · · · , m, where ω = ω(M, N),
(mod M) can be computed by ak mod M = N1 N−1
j=0 g(ω )ω
−1
N ≥ m, and ω is the inverse of ω mod M.
For a graph G = (V, E) with n vertices, eq.(4) is computed with modular arithmetic. g(x) is replaced with
H1,1 (x) in lemma 1. The degree of H1,1 (x) is equal to n2n−1 .
Lemma 2. Let M be a prime greater than n2n−1 + 1, N be M − 1, α be one of the primitive root of M, and T be
j
2n − 1(= n−1
j=0 2 ), the value of c(G) is given by
1
N

N−1

H1,1 (α j )α− jT

mod M.

(5)

j=0

3.2. Modular arithmetic with order 2n
As mentioned above [2], N in Lemma 2 can be reduced to 2n for the computation of c(G), whereas the degree
of H1,1 (x) is greater than 2n . It requires the 2n -th root of 1 mod M, i.e. ω with order 2n for modulo M.
A pair of M and ω = ω(M, 2n ) is convenient for the computation of c(G) as well as computation of DFT with
order 2n under modular arithmetic. Since the primitive root of a prime M has order M − 1, primes M = 2n + 1 has
the primitive root that has order 2n . There are only ﬁve known such primes, called Fermat primes, 3, 5, 17, 257,
and 65537.
There are other primes p that is represented by k · 2n + 1 thus the value of p − 1 is factored as k · 2n , where k is
odd. Such primes are called Proth primes or Proth numbers. When M = k · 2n + 1 and M is prime, then there are
ω’s whose order is equal to 2m (m ≤ n) modulo M.
Lemma 3. Let a Proth prime M be k · 2n + 1, be an integer less than or equal to n, and α be one of its primitive
n−
roots (mod M). The order of ω ≡ αk is equal to 2n , and that of ω ≡ ω2 is equal to 2 .
Thus, the DFT with size 2n can be computed with a Proth prime. When the resulting value is larger than M, the
true value should be computed with Chinese Reminder Theory after the similar computation with several diﬀerent
primes as M. Eq.(5) can be computed with N = 2n and a prime M = k · 2n+ + 1 for odd k. For example, when
we assume that n is less than 25 in our numerical experiments, we can choose M1 = 167772161 = 5 · 225 + 1,
M2 = 469762049 = 7 · 226 + 1 etc. as the prime M [4]. The reason of the above choice is that all the computation
can be executed with 64-bit integers.
3.3. Parallel algorithm with modular arithmetic
The summation of eq.(5) is partitioned into arbitrary intervals, which are computed by diﬀerent machines.For
an increasing sequence of integers x0 < x1 < · · · < xq where x0 = 0 and xq = 2n , the summation is partitioned into
q sub-summations since we can compute
q−1

c(G) =

c(G, i),
i=0

where

1
c(G, i) = n
2

xi+1 −1

h(ω j )ω− jT ,

i = 0, 1, · · · , q − 1.

(6)

j=xi

Algorithm 1 (Parallel algorithm with modular arithmetic). Input: graph G. Output: c(G).
m−n

n

(1) Let M = k · 2m + 1 (m ≥ n) be a Proth prime, α be its primitive root. ω = αk·2 , i.e. ω2 = 1.
(2) Prepare a program for computing h(x) ≡ H(x)1,1 (= et1 H(x)e1 ) as n times matrix-vector products
in O(n3 ) operations, that is (1, 1)-element polynomial of H(x) = (X(x)A)n in eq.(1).

2556

Koichi Kubota / Procedia Computer Science 18 (2013) 2553 – 2556

(3) T = 2n −1 is the target degree of the monomial whose coeﬃcient is equal to c(G), i.e. ω− jT = ω j .
n
(4) Compute the summation c(G) = 21n 2j=0−1 h(ω j )ω− jT as the sum of the following q sub-summations
for x0 (= 0) < x1 < · · · < xq (= 2n ):
(4-1) Let q be the number of machines. Assuming that performances of all the machines are
almost same, let xi be i · 2n /q , (i = 0, · · · , q − 1) and xq = 2n .
(4-2) Compute c(G, i) in O(n3 2n /q) operations with i-th machine, i = 0, · · · , q − 1.
(4-3) Sum up all the c(G, i) and get c(G) = q−1
i=0 c(G, i) in O(log q) time.
4. Numerical experiments
Here, we brieﬂy show results of numerical experiments in [4] with 100 linux machines named HP4720s/CT.
We use three types of graphs with aligned n vertices (18 ≤ n ≤ 24): (1) G1 = (V, E1 ), where each arc of E1
connects two vertices with distance 1, 2 and 3; (2) G2 = (V, E1 ∪ E2 ), where each arc of E2 connects two vertices
with distance 7; (3) G3 = (V, E3 ), the complete graph, where each arc of E3 connects all the two diﬀerent vertices.
Their adjacent matrices of the above graphs are denoted by A1 , A2 and A3 , respectively: (A1 )i j = 1 iﬀ |i − j| = d
where d = 1, 2, 3; (A2 )i j = 1 iﬀ |i − j| = d where d = 1, 2, 3, 7; (A3 )i j = 1 iﬀ i j.
We prepare three programs Pmod (q), Pord and Pcmp , that are a program for algorithm 1 with q machines,
a program for ordinary dynamic programming, and a program for the complex residue, respectively. All the
computed values by Pmod (q) and Pord are exact. They are modulo M1 and M2 for Pmod (q), and modulo 264 for
Pord . Those by Pcmp that uses complex ﬂoating-point computation are contaminated with rounding errors. The
computational time of Pmod (q) is almost equal to qq of that of Pmod (q ), e.g. computational time of Pmod (10) is 374
seconds and that of Pmod (100) is 40 seconds for G2 (n = 24).
5. Concluding remarks
(1) The computational time of the algorithm 1 is theoretically and practically O(n3 2n /q+log q) with q machines,
each of which has O(n2 ) storages. The second term O(log q) is required for sharing the graph data and
summing up all the results. When q = 2n , then we get c(G) in O(n3 ) time. The result is correct integer
value modulo M. When the result is bigger than M, we could get the exact value with Chinese Reminder
Theory. (Note that c(G) might be computed with complex ﬂoating point numbers by the similar way with
multi-precision complex ﬂoating point computation.)
(2) Ordinary algorithm with dynamic programming could be executed in parallel, but our algorithm with modular arithmetic is easily and straightforwardly executed in parallel.
(3) The algorithms can be implemented with GPGPU naturally in order to reduce the computational time.
(4) The number of Hamiltonian cycles c(G) may be applied to ﬁnd a speciﬁed degree of cliques K of a given
graph with discrete Fourier transform. DFT or FFT with modular arithmetic may be implemented with
Proth primes. Quantum computation may be considered to compute the residue.
Acknowledgements
This research is partly supported by Chuo University Personal Research Grant and Grant for Special Research.
References
[1] C. H. Bischof, H. M. B¨ucker, P. D. Hovland, U. Naumann, J. Utke (Eds.), Advances in Automatic Diﬀerentiation, Vol. 64 of Lecture
Notes in Computational Science and Engineering, Springer, Berlin, 2008.
[2] K. Kubota, Combinatorial computation with automatic diﬀerentiation, in: Bischof et al. [1], pp. 315–325. doi:10.1007/978-3-540-689423 28.
[3] K. Kubota, Computation of matrix permanent with automatic diﬀerentiation, in: H. M. B¨ucker, G. Corliss, P. Hovland, U. Naumann,
B. Norris (Eds.), Automatic Diﬀerentiation: Applications, Theory, and Implementations, Vol. 50 of Lecture Notes in Computational
Science and Engineering, Springer, New York, NY, 2005, pp. 67–76. doi:10.1007/3-540-28438-9 6.
[4] K. Kubota, Modular arithmetic approach to counting Hamiltonian cycles for parallel computation, Technical Report TRISE 11-03, Department of Information and System Engineering, Faculty of Science and Engineering, Chuo University, 2011.
[5] D. E. Knuth, The art of computer programming, 3rd ed., Vol. 2, Addison-Wesley, Reading, Massachusetts, London, 1998.

