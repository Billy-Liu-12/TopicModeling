Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header,
This space is reserved for the Procedia header,
This Procedia
space isComputer
reserved
for 108C
the Procedia
header,
Science
(2017) 1394–1403
This space is reserved for the Procedia header,
This space is reserved for the Procedia header,

do
do
do
do
do

not
not
not
not
not

use
use
use
use
use

it
it
it
it
it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Job-flow
Anticipation Scheduling
in Grid
Job-flow
Job-flow Anticipation
Anticipation Scheduling
Scheduling in
in Grid
Grid
Job-flow
Anticipation
Scheduling
in
Grid
VictorJob-flow
Toporkov, Dmitry
Yemelyanov,
and Alexander
Bobchenkov
Anticipation
Scheduling
in
Grid
Victor
Toporkov,
Dmitry
Yemelyanov,
and
Alexander
Bobchenkov
Victor Toporkov, Dmitry Yemelyanov, and Alexander Bobchenkov
Victor Toporkov, Dmitry
Yemelyanov,
and“MPEI”
Alexander Bobchenkov
National Research
University
National Research
University
Victor Toporkov,
Dmitry
Yemelyanov,
and“MPEI”
Alexander
ul. Krasnokazarmennaya,
14,
Moscow,
111250,
RussiaBobchenkov
National Research
University
“MPEI”
ul. Krasnokazarmennaya,
Moscow,“MPEI”
111250, Russia
National
Research 14,
University
{ToporkovVV,
YemelyanovDM,
BobchenkovAV}@mpei.ru
ul. Krasnokazarmennaya,
14,
Moscow,
111250, Russia
{ToporkovVV,
YemelyanovDM,
BobchenkovAV}@mpei.ru
National
Research
University
“MPEI”
ul.
Krasnokazarmennaya,
14,
Moscow,
111250, Russia
{ToporkovVV, YemelyanovDM, BobchenkovAV}@mpei.ru
ul. Krasnokazarmennaya,
14, Moscow,
111250, Russia
{ToporkovVV,
YemelyanovDM,
BobchenkovAV}@mpei.ru
{ToporkovVV, YemelyanovDM, BobchenkovAV}@mpei.ru

Abstract
Abstract
Abstract
In this paper, a heuristic user job-flow scheduling approach for Grid virtual organizations with
In
this paper, a heuristic user job-flow scheduling approach for Grid virtual organizations with
Abstract
In
this paper, aresources
heuristicisuser
job-flowUsers’
scheduling
approach
for Gridpreferences,
virtual organizations
with
non-dedicated
discussed.
and resource
providers’
virtual organiAbstract
non-dedicated
isuser
discussed.
Users’
and resource
providers’
preferences,
virtual organiIn
this paper,
aresources
heuristic
job-flow
scheduling
approach
for
Grid
virtual
with
non-dedicated
resources
discussed.
Users’
and distribution
resource
providers’
preferences,
virtual
organization’s
internal
policies,isresources
geographical
along
with
localorganizations
private
utilization
In
this paper,
aresources
heuristic
user
job-flow
scheduling
approach
for
Grid
virtual
with
zation’s
internal
policies,isresources
geographical
distribution
along
with
localorganizations
private
utilization
non-dedicated
discussed.
Users’
and
resource
providers’
preferences,
virtual
organization’s
internalrequirements
policies, resources
geographical
distribution
with local
private
utilization
impose specific
for efficient
scheduling
accordingalong
to different,
usually
contradictive,
non-dedicated
resources
isresources
discussed.
Users’
and distribution
resource
providers’
preferences,
virtual
organiimpose
specific
requirements
for efficient
scheduling
according
to different,
usually
contradictive,
zation’s
internal
policies,
geographical
along
with
local
private
utilization
impose
requirements
for efficient
scheduling
to different,
criteria.specific
With increasing
resources
utilization
level according
the available
resourcesusually
set andcontradictive,
correspondzation’s
internal
policies, resources
geographical
distribution
along
with local
utilization
criteria.
With increasing
resources
utilization
level
the available
resources
setprivate
andcontradictive,
correspondimpose
specific
requirements
for efficient
scheduling
according
different,
usually
criteria.
Withspace
increasing
resources
utilization
level
the available
resources
set and
corresponding decision
are reduced.
This
further
complicates
thetotask
of efficient
scheduling.
In
impose
specific
requirements
for efficient
scheduling
according
different,
usually
contradictive,
ing
decision
space
are reduced.
This
further
complicates
thetotask
of efficient
scheduling.
In
criteria.
With
increasing
resources
utilization
level
the
available
resources
set
and
corresponding
decision
spaceoverall
are reduced.
Thisefficiency
further complicates
task of efficient
scheduling.
In
order
to improve
scheduling
we propose the
a heuristic
anticipation
scheduling
criteria.
increasing
resources
utilization
level
the available
resources
set and
correspondorder
to With
improve
overall
scheduling
efficiency
we propose
a heuristic
anticipation
scheduling
ing
decision
space
are
reduced.
This
further
complicates
the
task
of
efficient
scheduling.
In
order
to improve
scheduling
we propose
heuristic anticipation
scheduling
approach.
Initiallyoverall
it generates
a nearefficiency
optimal but
infeasiblea scheduling
solution which
is then
ing
decision
spaceoverall
are
reduced.
further
the
task of efficient
In
approach.
Initially
it generates
a This
nearefficiency
optimal complicates
but
infeasible
scheduling
solutionscheduling.
which
is then
order
to
improve
scheduling
we
propose
a
heuristic
anticipation
scheduling
approach.
Initially it
a near optimal
but infeasible scheduling solution which is then
used as a reference
forgenerates
efficient resources
allocation.
order
overall
scheduling
efficiency
we propose
a scheduling
heuristic anticipation
scheduling
used
astoa improve
reference
forgenerates
efficient
resources
allocation.
approach.
Initially
it
a
near
optimal
but
infeasible
solution
which
is
then
used as a reference for efficient resources allocation.
Keywords:
scheduling,
resources,
utilization,
heuristic,
job batch,
virtualsolution
organization,
approach.
InitiallyPublished
it
generates
a near
optimal
but
infeasible
scheduling
whichanticipais then
©
2017asThe
Authors.
by
Elsevier
B.V.
used
a reference
forGrid,
efficient
resources
allocation.
Keywords:
scheduling,
Grid,
resources,
utilization,
heuristic, job batch, virtual organization, anticipaKeywords:
scheduling,
utilization,
heuristic,
job batch,
virtual on
organization,
anticipaPeer-review
responsibility
ofresources,
the scientific
committee
of the International
Conference
Computational
Science
tion
used as a under
reference
forGrid,
efficient
resources
allocation.
tion
Keywords: scheduling, Grid, resources, utilization, heuristic, job batch, virtual organization, anticipation
Keywords:
scheduling, Grid, resources, utilization, heuristic, job batch, virtual organization, anticipation
tion

1
Introduction and
Related Works
1
1 Introduction
Introduction and
and Related
Related Works
Works
1
Introduction
and
In distributed environments with Related
non-dedicatedWorks
resources such as utility Grids the computaIn
distributed
environmentsand
with Related
non-dedicatedWorks
resources such as utility Grids the computa1
Introduction
In
distributed
non-dedicated
resources such
utilityfrom
Grids
the computational
nodes areenvironments
usually partlywith
utilized
by local high-priority
jobs as
coming
resource
owners.

tional
nodes areenvironments
usually partlywith
utilized
by local high-priority
jobs as
coming
from
resource
owners.
In
distributed
non-dedicated
resources
utility
Grids
the computational
nodes
are usually
partlyfor
utilized
byrepresented
local high-priority
jobs
resource
owners.
Thus,
the resources
available
use
are
with asuch
set ofcoming
slots
- from
time
intervals
during
In
distributed
environments
with
non-dedicated
resources
such
as
utility
Grids
the
computaThus,
the
resources
available
for
use
are
represented
with
a
set
of
slots
time
intervals
during
tional
are usually
partlyfor
utilized
byrepresented
local
jobs
resource
Thus,
the resources
available
use nodes
are
with
set ofcoming
slots
time
intervalsowners.
during
which nodes
individual
computational
are high-priority
capable
to aexecute
parts- from
of
independent
users’
tional
nodes
are
usually
partly
utilized
by
local
high-priority
jobs
coming
from
resource
owners.
which
the
individual
computational
nodes
are
capable
to
execute
parts
of
independent
users’
Thus,
resources
for use nodes
are represented
with
aexecute
setfinish
of slots
- of
time
intervals
during
which the
the
individual
computational
are capable
toand
parts
independent
users’
parallel
jobs.
Theseavailable
slots generally
have
different
start
times
and
a performance
Thus,
the
resources
available
for
use
are
represented
with
a
set
of
slots
time
intervals
during
parallel
jobs.
These
slots
generally
have
different
start
and
finish
times
and
a
performance
which
the
individual
computational
nodes
are capable
toand
execute
parts
of and
independent
users’
parallel
jobs.
slotsofgenerally
have impedes
different
start
finish
times
a performance
difference.
TheThese
presence
a set of slots
the
problem
of coordinated
selection
of
the
which
the
individual
computational
nodes
are capable
toand
execute
parts
of and
independent
users’
difference.
TheThese
presence
ofgenerally
a set of slots
impedes
the
problem
of coordinated
selection
of
the
parallel
jobs.
slots
have
different
start
finish
times
a
performance
difference.
The
presence
of
a
set
of
slots
impedes
the
problem
of
coordinated
selection
of
the
resources necessary to execute the job flow from computational environment users. Resource
parallel
jobs.
These
slots
generally
have
different
start
and
finish
times
and
a
performance
resources
necessary
to
execute
the
job
flow
from
computational
environment
users.
Resource
difference.
The
presence
of
a
set
of
slots
impedes
the
problem
of
coordinated
selection
of
the
resources
necessary
to
execute
the
job
flow
from
computational
environment
users.
Resource
fragmentation also results in a decrease of the total computing environment utilization level
difference.
Thealso
presence
ofina aset
ofjob
slots
impedes
thecomputing
problem ofenvironment
coordinated users.
selection
oflevel
the
fragmentation
results
decrease
of
the
total
environment
utilization
resources
necessary
to
execute
the
flow
from
computational
Resource
fragmentation
also
results
in
a
decrease
of
the
total
computing
environment
utilization
level
[4, 15].
resources
necessary
to
execute
the
job
flow
from
computational
environment
users.
Resource
[4,
15].
fragmentation
also results
in a be
decrease
the total
computing
environment
utilization
level
[4,
15].
Two established
trends may
outlinedofamong
diverse
approaches
to distributed
computing.
fragmentation
also results
in a be
decrease
the total
computing
environment
utilization
level
Two established
trends may
outlinedofamong
diverse
approaches
to distributed
computing.
[4,
15].
Two
established
trends
may
be
outlined
among
diverse
approaches
to
distributed
computing.
The first one is based on the available resources utilization and application level scheduling [2].
[4, 15].
The
first
one
is
based
on
the
available
resources
utilization
and
application
level
scheduling
[2].
trends
may
be
outlined
among
diverse approaches
to distributed
computing.
The
first
one
based
ondoes
the
available
resources
utilization
and application
levelpolicy.
scheduling
[2].
As aTwo
rule,established
thisisapproach
not
imply
any global
resource
sharing
or allocation
Another
Two
established
trends
may
be
outlined
among
diverse
approaches
to
distributed
computing.
As
a
rule,
this
approach
does
not
imply
any
global
resource
sharing
or
allocation
policy.
Another
The
first
one
is
based
on
the
available
resources
utilization
and
application
level
scheduling
[2].
As
a
rule,
this
approach
does
not
imply
any
global
resource
sharing
or
allocation
policy.
Another
trend is related to the formation of user’s virtual organizations (VO) and job flow scheduling
The
first
one
isapproach
based
the not
available
resources
utilization
and application
scheduling
[2].
trend
is related
to theon
formation
of user’s
virtual
organizations
(VO)
and level
job policy.
flow
scheduling
As
a
rule,
this
does
imply
any
global
resource
sharing
or
allocation
Another
trend
is
related
to
the
formation
of
user’s
virtual
organizations
(VO)
and
job
flow
scheduling
[8, 10]. In this case a metascheduler is an intermediate chain between the users and local
As
a
rule,
this
approach
does
not
imply
any
global
resource
sharing
or
allocation
policy.
Another
[8,
10].
In
this
case
a
metascheduler
is
an
intermediate
chain
between
the
users
and
local
trend
theaand
formation
of user’s
virtual
organizations
and the
job users
flow scheduling
[8,
10].is related
In this to
case
metascheduler
is an
intermediate
chain (VO)
between
and local
resource
management
job batch
processing
systems.
trend
theaand
formation
of user’s
virtual
organizations (VO) and job flow scheduling
resource
management
job batch
processing
systems.
[8, 10].is related
In this to
case
metascheduler
is an
intermediate
resource
management
and
job batch processing
systems. chain between the users and local
[8,
10]. management
In this case aand
metascheduler
is an intermediate
resource
job batch processing
systems. chain between the users and local
1
resource management and job batch processing systems.
1
1
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
1
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.011

	

Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov
VictorinToporkov
108C (2017)
1394–1403

Uniform rules of resource sharing and consumption, in particular based on economic models,
make it possible to improve the job-flow level scheduling and resource distribution efficiency.
VO policy may offer optimized scheduling to satisfy both users’ and VO common preferences.
The VO scheduling problems may be formulated as follows: to optimize users’ criteria or utility
function for selected jobs [5, 11], to keep resource overall load balance [18], to have job run in
strict order or maintain job priorities [9], to optimize overall scheduling performance by some
custom criteria [1, 13], etc.
VO formation and performance largely depends on mutually beneficial collaboration between
all the related stakeholders. However, users’ preferences and VO common preferences (owners’
and administrators’ combined) may conflict with each other. Users are likely to be interested in
the fastest possible running time for their jobs with least possible costs whereas VO preferences
are usually directed to available resources load balancing or node owners’ profit boosting. Thus,
VO policies in general should respect all members and the most important aspect of rules
suggested by VO is their fairness.
A number of works understand fairness as it is defined in the theory of cooperative games,
such as fair quotas [3, 7], fair user jobs prioritization [9], non-monetary distribution [12]. The
cyclic scheduling scheme (CSS) [17] implements a fair scheduling optimization mechanism which
ensures stakeholders interests to some predefined extent.
The downside of a majority centralized metascheduling approaches is that they loose their
efficiency and optimization features in distributed environments with a limited resources supply.
For example, in [15] a traditional backfilling algorithm provides better scheduling outcome when
compared to different optimization approaches in resource domain with a minimal performance
configuration. The general root cause is that in fact the same scarce set of resources (being
efficient or not) have to be used for a job flow execution or otherwise some jobs might hang
in the queue. And under such conditions user jobs priority and ordering greatly influence the
scheduling results. At the same time application-level brokers are still able to ensure user
preferences and optimize the job’s performance under free-market mechanisms.
A main contribution of this paper is a heuristic CSS-based job-flow scheduling approach
which retains optimization features and efficiency even in distributed computing environments
with limited resources. The rest of the paper is organized as follows. Section 2 presents a general
CSS fair scheduling concept. The proposed heuristic-based scheduling technique is presented
in Section 3. Section 4 contains simulation experiment setup and results for the proposed
scheduling approach. Finally, Section 5 summarizes the paper.

2

Cyclic Alternative-Based Fair Scheduling Model and
Limited Resources

Scheduling of a job flow using CSS is performed in time cycles known as scheduling intervals,
by job batches [17]. The actual scheduling procedure consists of two main steps. The first
step involves a search for alternative scenarios of each job execution or simply alternatives [14].
During the second step the dynamic programming methods [17] are used to choose an optimal
alternatives’ combination (one alternative is selected for each job) with respect to the given
VO and user criteria. This combination represents the final schedule based on current data on
resources load and possible alternative executions.
An example for a user scheduling criterion stated problem may be a minimization of overall
job running time, a minimization of overall running cost, etc. This criterion describes user’s
preferences for that specific job execution and expresses a type of an additional optimization to
2

1395

1396	

Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov
VictorinToporkov
108C (2017)
1394–1403

Table 1: User utility examples for a job with execution cost minimization
Job Execution Alternatives
Execution Cost Utility
First Alternative
5
0%
Second Alternative
7
20%
Third Alternative
11
60%
Fourth Alternative
15
100%

perform when searching for alternatives. Alongside with time (T ) and cost (C) properties each
job execution alternative has a user utility (U ) value: user evaluation against the scheduling
criterion.
We consider the following relative approach to represent a user utility U . A job alternative
with the minimum (best) user-defined criterion value Zmin corresponds to the left interval
boundary (U = 0%) of all possible job scheduling outcomes. An alternative with the worst
possible criterion value Zmax corresponds to the right interval boundary (U = 100%). In the
general case for each alternative with value Z of user criterion, U is set depending on its position
in [Zmin ; Zmax ] interval using the following formula:
U=

Z − Zmin
∗ 100%.
Zmax − Zmin

(1)

Thus, each alternative gets its utility in relation to the “best” and the “worst” optimization
criterion values user could expect according to the job’s priority. And the more some alternative
corresponds to user’s preferences the smaller is the value of U . Examples of user utility functions
for a job with four alternatives and a cost minimization criterion are presented in Table 1.
A common VO optimization problem may be stated as either minimization or maximization
of one of the total job-flow integral properties, having other fixed or limited, or involve Paretooptimal strategy search involving both kinds of properties [8, 6, 17]. For a fair scheduling model
the second step VO optimization problem could be in form of: C → max, lim U (maximize
total job flow execution cost, while respecting user’s preferences to some extent); U → min, lim
T (meet user’s best interests, while ensuring some acceptable job flow execution time) and so
on.
The launch of any job requires a co-allocation of a specified number of slots, as well as in
the classic backfilling variation. A single slot is a time span that can be assigned to run a part
of a multiprocessor job. The target is to scan a list of Ns available slots and to select a window
of m parallel slots with a length of the required resource reservation time (Fig.1). The user
job requirements are arranged into a resource request containing a resource reservation time,
characteristics of computational nodes (clock speed, RAM volume, disk space, operating system
etc.), limitation on the selected window maximum cost. ALP, AMP and AEP window search
algorithms were discussed in [14].
The job batch scheduling requires allocation of a multiple nonintersecting in terms of slots
alternatives for each job. Otherwise irresolvable collisions for resources may occur if different
jobs will share the same time-slots. Sequential alternatives search and resources reservation
procedures help to prevent such scenario. However in an extreme case when resources are
limited or overutilized only at most one alternative execution could be reserved for each job. In
this case alternatives-based scheduling result will be no different from FIFO resources allocation
procedure without any optimizations [15].
3

	

Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov
VictorinToporkov
108C (2017)
1394–1403

Figure 1: An example of a window allocation procedure

3

Heuristic Anticipation Scheduling

3.1

General Anticipation Scheduling Scheme

In order to improve scheduling efficiency for job batch the following heuristic is proposed. It
consists of three main steps.
1. First, a set of all possible execution alternatives is found for each job not considering
time slots intersections and without any resources reservation. The resulting intersecting
alternatives found for each job reflect a full range of different job execution possibilities
user may expect on the current scheduling interval. It may be noticed that this set is
guaranteed to include the best and the worst alternatives according to any scheduling
criterion including user and VO criteria.
2. Second, CSS scheduling procedure is performed to select alternatives combination (one
alternative for each job of the batch) optimal according to VO policy. The resulting
alternatives combination most likely corresponds to an infeasible scheduling solution as
possible time slots intersection will cause collisions on resources allocation stage.
The main idea of this step is that obtained infeasible solution will provide some heuristic
insights on how each job should be handled during the scheduling. For example, if timebiased or cost-biased execution is preferred, how it should correspond to user criterion
and VO administration policy and so on.
3. Third, a feasible resources allocation is performed by replicating alternatives selected
in step 2. The base for this replication step is an Algorithm searching for Extreme
Performance (AEP) described in details in [14]. In the current step AEP helps to find and
reserve feasible execution alternatives most similar to those selected in the near-optimal
infeasible solution.
After these three steps are performed the resulting solution is both feasible and efficient as
it reflects scheduling pattern obtained from a near-optimal reference solution from step 2.
The following subsections will discuss these scheduling steps in more details.

3.2

Finding a Near Optimal Infeasible Scheduling Solution

CSS scheduling results strongly depend on diversity of alternatives sets obtained for batch jobs.
The task of finding all possible execution alternatives for each job of the batch may become
4

1397

1398	

Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov
VictorinToporkov
108C (2017)
1394–1403

impractical as number of all different resource allocations may reach combination of p things m
at a time, where p is a total number of different available resource types and m is a number of
resources requested by user. Moreover if we will consider non-dedicated resources this task will
be additionally complicated by a local resources utilization. In this case not every resources
combination may be available during the scheduling cycle.
However, as we need to find alternatives for an apriori infeasible reference solution a reasonable diverse set of possible execution alternatives will do. One important feature of this set
is that it should contain extreme execution alternatives according to different criteria, i.e. the
most expensive, the least time-consuming alternative and so on.
Further this set of possible alternatives may be used to evaluate actual user job execution
against the job execution possibilities according to equation (1). We assume that such a set
may represent a fair uniform basis for a user utility expectations. This uniform user utility UU
may be used to compare different scheduling algorithms from user’s point of view.
We used AEP algorithm modification to allocate a diverse set of execution alternatives
for each job. Originally AEP is able to find only one alternative execution satisfying user
resource request and optimal according to user custom criterion. The main idea of the current
modification is to save all intermediate AEP search results to a dedicated list as shown in the
following algorithm description:
Data: slotList - a list of available slots; job - a job for which the search is performed
Result: alternativesSet - a set of possible alternatives
slotList = orderSystemSlotsByStartTime();
for each slot in slotList do
if not(properHardwareAndSoftware(slot.node)) then
continue;
end
windowSlotList.add(slot);
windowStartTime = slot.startTime;
for each wSlot in windowSlotList do
minLength = wSlot.node.getWorkingTimeEstimate();
if (wSlot.endTime - windowStartTime) < minLength then
windowSlotList.remove(wSlot);
end
end
if windowSlotList.size() ≥ job.nodesNeed then
minCostWindow = getMinCostWindow(windowSlotList);
maxCostWindow = getMacCostWindow(windowSlotList);
minRuntimeWindow = getMinRuntimeWindow(windowSlotList);
alternativesSet.add(minCostWindow);
alternativesSet.add(maxCostWindow);
alternativesSet.add(minRuntimeWindow);
end
end
Algorithm 1: AEP modification to allocate a set of possible job execution alternatives
In this algorithm an expanded window windowSlotList of size M moves through a list of
all available slots slotList sorted by their start time in ascending order. At each step any
combination of m slots inside windowSlotList (in the case, when m ≤ M ) can form a window
5

	

Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov
VictorinToporkov
108C (2017)
1394–1403

that meets all the requirements to run the job. The main difference from the original AEP
algorithm is indicated in bold. Instead of searching for a single window with a maximum
criterion value, we allocate several windows with extreme criteria values from every instance of
windowSlotList and save to alternativesSet. By the end of slotList alternativesSet will contain
a diverse set of possible job execution alternatives. And as every possible windowSlotList
instance is processed by the AEP, alternativesSet is guaranteed to contain alternatives with
extreme criteria values (maxCost/minCost/minTime), as well as a variety of alternatives with
some intermediate criteria values.
After sets of possible intersecting execution alternatives are allocated for each job a CSS
scheduling optimization procedure selects an optimal alternatives combination according to VO
and users criteria [17].

3.3

Replication Scheduling and Resources Allocation

The resulting near-optimal scheduling solution in most cases is infeasible as selected alternatives
may share the same time slots and thus cause resource collisions. However we propose to use
it as a reference solution and replicate into a feasible resources allocation.
For the replication purpose a new Execution Similarity criterion is introduced. It helps
AEP to find a window with minimum distance to a reference alternative. Generally we define a
distance between two different alternatives (windows) as a relative difference or error between
their significant criteria values. For example if reference alternative has Cref total cost, and
some candidate alternative cost is Ccan , then the relative cost error EC is calculated as EC =
|Cref −Ccan |
. If one need to consider several criteria the distance D between two alternatives may
Cref
be calculated as a linear sum of criteria
 errors: Dm = EC + ET + .. + EU , or as a geometric
2 + E 2 + ... + E 2 .
distance in a parameters space: Dg = EC
T
U
For a feasible job batch resources allocation AEP consequentially allocates for each job
a single execution window with a minimum distance to a reference alternative. Time slots
allocated for the i-th job are reserved and excluded from the slot list when AEP search algorithm
is performed for the following jobs i+1, i+2, ...N . Thus, this procedure prevents any conflicts for
resources and provides scheduling solution which in some sense reflects near-optimal reference
solution.

4
4.1

Simulation Study
Simulation Environment Setup

An experiment was prepared using a custom distributed environment simulator [16].
Virtual organization and computing environment properties are the following. The resource
pool includes 80 heterogeneous computational nodes. A specific cost of a node is an exponential
function of its performance value (base cost) with an added variable margin distributed normally
as + − 0.6 of a base cost. The scheduling interval length is 600 time quanta. The initial 5% to
10% resource load with owner jobs is distributed hyper-geometrically over the whole scheduling
interval.
The job batch properties are specified as follows. Jobs number in a batch is 125. Nodes
quantity needed for a job is an integer number distributed evenly on [2; 6]. Node reservation
time is an integer number distributed evenly on [100; 500]. Job budget varies in the way that
some of jobs can pay as much as 160% of base cost whereas some may require a discount.
6

1399

1400	

Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov
VictorinToporkov
108C (2017)
1394–1403

Figure 2: Average job execution time in T → min, lim U problem
Every request contains a specification of a custom criterion which is one of the following: job
execution runtime, finish time and overall execution cost.
During each experiment a VO resource domain and a job batch were generated and the
following scheduling schemes were simulated and studied. First, a general CSS solved the optimization problems T → min, lim U with different limits Ua ∈ {0%, 1%, 4%, 10%, 16%, 32%, 100%}.
Ua stands for average user utility for one job, i.e. lim Ua = 10% means that at average
resulting deviation from the best possible outcome for each user did not exceed 10%.
Second, a near-optimal but infeasible reference solution REF (see section 3.2) was obtained
for the same problems. Third, for the heuristic anticipation scheduling solution AN T a replication procedure was performed based on REF solution.
Finally two independent job batch scheduling procedures were performed to find scheduling
solutions most suitable for VO users (U SERopt ) and VO administrators (V Oopt ). U SERopt
was obtained by using only user criteria to allocate resources for jobs without taking into
account VO preferences. V Oopt was obtained by using one VO optimization criterion (runtime
minimization T → min in our example) for each job scheduling without taking into account
user preferences.

4.2

Simulation Results

1000 single scheduling experiments were simulated. Average number of alternatives found for
a job in CSS was 2.6. This result shows that while for relatively small jobs usually a few
alternative executions have been found, large jobs usually had at most one possible execution
option (let us remember that according to the simulation settings the difference between jobs
execution time could be up to 15 times). At the same time REF algorithm at average considered
more than 100 alternative executions for each job.
CSS failed to find any alternative executions for at least for one job of the batch in 209
experiments; AN T - in 155 experiments. These results show that simulation settings indeed
provided a limited set of resources not allowing to execute all the jobs during every experiment.
Figure 2 shows average job execution time (VO criterion) in a T → min, lim U optimization
problem. Different limits Ua ∈ {0%, 1%, 4%, 10%, 16%, 32%, 100%} specify to what extent user
7

	

VictorinToporkov
108C (2017)
1394–1403
Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov

Figure 3: Average job execution cost in C → max, lim U problem
preferences were taken into account. Two horizontal lines U SERopt and V Oopt represent
practical T values when only user or VO administration criteria are optimized correspondingly.
First thing that catches the eye in Fig. 2 is that REF for Ua > 10% provides job execution
time value better (smaller) than those of V Oopt . However such behaviour is expected as REF
generates an infeasible solution and may use time-slots from more suitable (according to VO
preferences) resources several times for different jobs.
Otherwise, AN T provided better VO criterion value than CSS for all U > 0%. The relative
advantage reaches 20% when U > 20% is considered.
Note, AN T algorithm graph gradually changes from U SERopt value at U = 0% to almost
V Oopt value at U = 100% just with changing average user utility limit. Thereby AN T represents a general scheduling approach allowing to balance between VO stakeholders criteria
according to specified scenario, including VO or user criteria optimization.
A similar pattern can be observed in Fig.3 where C → max, lim U scheduling problem is
presented. However in this scenario AN T advantage over CSS amounts to 10% against VO
criterion.
The general advantage of AN T over CSS can be explained by a scarce set of alternatives
found for user jobs by the latter algorithm. To compare AN T and CSS scheduling results
against user criteria we used UU uniform user utility metric (see Section 3.2). Figure 4 shows
average uniform user utility UU for AN T and CSS recalculated based on reference alternatives
from REF using equation (1). As it can be seen from Fig. 4, AN T provides higher uniform
user utility in each experiment when compared with CSS. More than that, AN T generally
operates in a wider range of possible user utilities: from 17% when U = 0% (only user criteria
are optimized) to 35% when U = 100% (only VO criterion is optimized). At the same time
CSS is able to change uniform user utility in (16%;26%) interval. Wider UU interval represents
greater decision space for AN T which implies optimization advantage.
It may seem that both algorithms operate in a rather small uniform user utilities interval
and aren’t efficient enough. However uniform user utilities are based on an infeasible set of
alternatives and can’t be entirely replicated in a feasible solution. In Fig. 4 V Oopt and U SERopt
8

1401

1402	

VictorinToporkov
108C (2017)
1394–1403
Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov

Figure 4: Uniform user utility value in T → min, lim U problem
horizontal lines roughly represent a feasible interval for uniform user utility values. In this case
AN T covers more than half of this feasible UU interval.

5

Conclusions and Future Work

In this paper we study the problem of a fair job batch scheduling with a relatively limited
resources supply. The main problem arise is a scarce set of job execution alternatives which
eliminates scheduling optimization efficiency. We propose an algorithm to obtain a diverse set
of possible execution alternatives for each job. This set may be used as a uniform basis for
a fair uniform user utility calculation to rate a scheduling solution. We introduce a heuristic
scheduling scheme which generates a near-optimal but infeasible reference solution and then
replicates it to allocate a feasible accessible solution.
Computer simulation was performed to study these algorithms and to evaluate their efficiency. The obtained results show that the new heuristic approach provides flexible and efficient
solutions for a different fair scheduling scenarios. The advantage over general CSS against VO
preferences (for example when minimizing total job batch execution time) reaches 25%.
Future work will be focused on replication algorithm study and it’s possible application to
fulfill complex user preferences expressed in a resource request.

Acknowledgments
This work was partially supported by the Council on Grants of the President of the Russian
Federation for State Support of Young Scientists and Leading Scientific Schools (grants YPhD2297.2017.9 and SS-6577.2016.9), RFBR (grants 15-07-02259 and 15-07-03401) and by the Ministry on Education and Science of the Russian Federation (project no. 2.9606.2017/BCh).

References
[1] H. Blanco, F. Guirado, J.L. Lrida, and V.M. Albornoz. MIP model scheduling for multi-clusters.
In Euro-Par 2012, pages 196–206, Heidelberg, 2012. Springer.

9

	

Job-flow Anticipation Scheduling
Grid et al. / Procedia Computer Science
Toporkov,
Yemelyanov
and Bobchenkov
VictorinToporkov
108C (2017)
1394–1403

[2] R. Buyya, D. Abramson, and J. Giddy. Economic models for resource management and scheduling
in Grid computing. J. Concurrency and Computation, 14(5):1507–1542, 2002.
[3] T. Carroll and D. Grosu. Divisible load scheduling: An approach using coalitional games. In
Proceedings of the Sixth International Symposium on Parallel and Distributed Computing, ISPDC
07, page 36, 2007.
[4] S.K. Dimitriadou and H.D. Karatza. Job scheduling in a distributed system using backfilling with
inaccurate runtime computations. In 2010 International Conference on Complex, Intelligent and
Software Intensive Systems, pages 329–336, 2010.
[5] C. Ernemann, V. Hamscher, and R. Yahyapour. Economic scheduling in Grid computing. In
D. Feitelson, L. Rudolph, and U. Schwiegelshohn, editors, JSSPP, volume 18, pages 128–152.
Springer, Heidelberg, 2002.
[6] M.H. Farahabady, Y.C. Lee, and A.Y. Zomaya. Pareto-optimal cloud bursting. In IEEE Transactions on Parallel and Distributed Systems, volume 25, pages 2670–2682, 2014.
[7] K. Kim and R. Buyya. Fair resource sharing in hierarchical virtual organizations for global Grids.
In Proceedings of the 8th IEEE/ACM International Conference on Grid Computing, pages 50–57,
Austin, USA, 2007. IEEE Computer Society.
[8] K. Kurowski, J. Nabrzyski, A. Oleksiak, and J. Weglarz. Multicriteria aspects of Grid resource
management. In J. Nabrzyski, Schopf J.M., and J. Weglarz, editors, Grid resource management.
State of the Art and Future Trends, pages 271–293. Kluwer Acad. Publ., 2003.
[9] A. Mutz, R. Wolski, and J. Brevik. Eliciting honest value information in a batch-queue environment. In 8th IEEE/ACM International Conference on Grid Computing, pages 291–297, New York,
USA, 2007. ACM.
[10] I. Rodero, D. Villegas, N. Bobroff, Y. Liu, L. Fong, and S.M. Sadjadi. Enabling interoperability
among Grid meta-schedulers. J. Grid Computing, 11(2):311–336, 2013.
[11] K. Rzadca, D. Trystram, and A. Wierzbicki. Fair game-theoretic resource management in dedicated
Grids. In IEEE International Symposium on Cluster Computing and the Grid (CCGRID 2007),
pages 343–350, Rio De Janeiro, Brazil, 2007. IEEE Computer Society.
[12] P. Skowron and K. Rzadca. Non-monetary fair scheduling cooperative game theory approach. In
Proceeding of SPAA ’13 Proceedings of the twenty-fifth annual ACM symposium on Parallelism in
algorithms and architectures, pages 288–297, New York, NY, USA, 2013. ACM.
[13] A. Takefusa, H. Nakada, T. Kudoh, and Y. Tanaka. An advance reservation-based co-allocation
algorithm for distributed computers and network bandwidth on QoS-guaranteed Grids. In
Schwiegelshohn U. Frachtenberg E., editor, JSSPP 2010, volume 6253, pages 16–34. Springer,
Heidelberg, 2010.
[14] V. Toporkov, A. Toporkova, A. Tselishchev, and D. Yemelyanov. Slot selection algorithms in
distributed computing. Journal of Supercomputing, 69(1):53–60, 2014.
[15] V. Toporkov, A. Toporkova, A. Tselishchev, D. Yemelyanov, and P. Potekhin. Heuristic strategies for preference-based scheduling in virtual organizations of utility Grids. Journal of Ambient
Intelligence and Humanized Computing, 6:733–740, 2015.
[16] V. Toporkov, A. Tselishchev, D. Yemelyanov, and A. Bobchenkov. Composite scheduling strategies
in distributed computing with non-dedicated resources. Procedia Computer Science, 9:176–185,
2012.
[17] V. Toporkov, D. Yemelyanov, A. Bobchenkov, and Tselishchev A. Scheduling in Grid based on VO
stakeholders preferences and criteria. In Advances in Intelligent Systems and Computing, volume
470, pages 505–515, 2016.
[18] M. Vasile, F. Pop, R. Tutueanu, V. Cristea, and J. Kolodziej. Resource-aware hybrid scheduling algorithm in heterogeneous distributed computing. J. Future Generation Computer Systems,
51:61–71, 2015.

10

1403

