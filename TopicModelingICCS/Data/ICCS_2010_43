Procedia Computer
Science

Procedia Computer Science 1 (2012) 2579–2587
Procedia Computer Science 00 (2010) 1–9

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

A distributed memory implementation of the False Nearest
Neighbors method based on kd-tree applied to
electrocardiography✩
a
´
J.J. Aguila
, E. Ariasb , M.M. Artigaoc , J.J. Mirallesc
a Dpto. Ingenier´ıa en Computaci´
on,
Universidad de Magallanes, Avda. Bulnes 01855, Casilla 113-D, Punta Arenas, Chile
b Computing Systems Dept.
c Applied Physics Dept.
University of Castilla-La Mancha, Spain Avenue,
Albacete 02071, Spain

Abstract
In diﬀerent ﬁelds of science and engineering (medicine, economy, oceanographic, biologic systems, etc) the False
Nearest Neighbors (FNN) method has a special relevance. In some of these applications, it is important to provide
the results in a reasonable time, thus the execution time of the FNN method has to be reduced. This paper describes
a parallel implementation of the FNN method for distributed memory architectures based on kd-tree. A “SingleProgram, Multiple Data” (SPMD) paradigm is employed using a tree decomposition approach where each processor
runs the same program but computes a diﬀerent sub-tree called local tree. As far as the authors know, there is not any
parallel implementation of the FNN method based on kd-tree, consisting this implementation the main contribution
of the paper. The accuracy and performance of the parallel approach are then assessed and compared to the best
sequential kd-tree based implementation of the FNN method, executing from 2 up to 64 processors and running a
Lorenz time series and an electrocardiogram signal as case studies. Results are discussed in terms on execution time,
speed-up, and eﬃciency. In terms of speed, our approach was 3 ∼ 20 times faster than sequential algorithm.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Parallel Computing, Message Passing Interface, Physics, Nonlinear Time Series Analysis, False Nearest
Neighbors method, kd-tree

1. Introduction
The main goals of the project A/6983/06 [1] sponsored by the Spanish Agency for Latinamerica Collaboration
were to study and predict the electrocardiogram (ECG) signals of people which suﬀer from post-traumatic stress
motivated by tortures during Pinochet dictatorship. The results obtained from this study could be extrapolated to other
✩ This

work has been partially supported by the Spanish CICYT projects CGL2004-06099-C03-03/CLI and CGL2007-66440-C04-03.
´
Email addresses: julio.aguila@umag.cl (J.J. Aguila),
enrique.arias@uclm.es (E. Arias), mariamar.artigao@uclm.es
(M.M. Artigao), juan.miralles@uclm.es (J.J. Miralles)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.291

2580

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587
´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9

2

population such sectors as battered women, children who suﬀer abuses of pedophile, soldiers returning from conﬂict
zones, etc. All of them suﬀer from the so-called post-traumatric stress (PSTD) [2]. In fact, the project also considered
electroencephalogram (EEG) signals. The purpose of the study carried out during this project was to analyze ECG
and EEG from theoretically healthy people, and people which suﬀer from PSTD. From the measured data, one aim
was to predict ECG signal data in order to take some prevention actions.
In many ﬁelds of science and engineering (medicine, economy, oceanography, biologic systems, etc) the use of
Nonlinear Time Series Analysis (NTSA) has become of great interest . In some of this applications (e.g.: medicine
as our case), it is important to provide the results in a reasonable time, thus the execution time of the programs used
in the analysis has to be reduced. This is the main issue of this paper where parallel computing [3] is applied to the
NTSA [4], in order to provide a set of tools to give a response in real time.
Besides the simulations carried out in a laboratory, some authors such as Perc [5] have shown that the NTSA methods have applications in the study of human electrocardiograms. However, this kind of applications can be associated
with applications that require a real time response. This requirement, by itself, motivates us to seek solutions that can
run faster than the sequential versions of the methods.
The ﬁrst stage to make a study of time series using NTSA, consists on computing the minimal embedding dimension, for instance by means of the calculation of False Nearest Neighbors (FNN). It is possible to ﬁnd in the literature
several methods to obtain it. These methods are based on the box-assisted algorithm [6] and the kd-tree structure [7].
In this work, the kd-tree method has been considered as the starting point. As far as the authors know, there is not
any parallel implementation of the FNN method based on kd-tree, being this the main contribution of this paper. The
solution proposed in this paper is directed toward distributed memory architectures using the paradigm of “SingleProgram, Multiple Data” (SPMD) [3]. A coarse-grained decomposition for the implementation of a small number
of tasks in parallel with a large amount of calculations has been considered. The Message Passing Interface (MPI)
communication package has been chosen to implement the code for our approach.
The accuracy and performance of the parallel approach are then assessed and compared to the best known sequential kd-tree based implementation of the FNN method [8], using from 2 up to 64 processors and running an artiﬁcial
time series generated by the Lorenz system [9] and a electrocardiogram signal generated by a dynamical model [10].In
terms of speed, our approach was 3 ∼ 20 times faster than the sequential algorithm.
The paper is organized as follows. After this introduction, Section 2 presents a discussion of the sequential kd-tree
algorithm considered as a starting point. A description of the implementation carried out in this paper is described in
Section 3 following an algorithmic notation. The experimental results are presented at Section 4. Finally, the results
are discussed in Section 5 in terms on execution time, speed-up and eﬃciency [3].
2. The False Nearest Neighbors Method
In the analysis of observed time series such as an ECG signal, the NTSA methods have oﬀered an alternate
explanation to the irregular behaviour of the system, appart from the linear methods. In particular, the FNN method
[8] determines the minimal embedding dimension m0 for a given time series and this value is crucial to the success of
the subsequent analysis (Lyapunov exponents, prediction, etc).
Given a time series represented by a set of scalar quantities X = {x(i) : 0 ≤ i < l} the method constructs a set of
points according to Eq. (1):
y(i) = [x(i), x(i + τ), . . . , x(i + (d − 1)τ)]

(1)

where each coordinate is a delayed version of the scalar quantities. Now, each vector is a point at delay coordinates in
a d-dimensional space called embedding space. For a large enough embedding dimension d ≥ m0 , the delay vectors
provide a one-to-one image of the original system, according to the Takens embedding theorem [11]. To obtain the
proper embedding delay τ, we use the mutual information method [12]. To obtain the proper minimal embedding
dimension m0 , the method identiﬁes how many points {y(i) : i = 0, 1, . . . , n − 1}, where n = l − (d − 1)τ, have false
nearest neighbors.
The criterion for determining when a point y(i) has a false nearest neighbor is as follows: given a point y(i) in a
d-dimensional space, one ﬁrst has to ﬁnd a neighbor y( j), so that ||y(i) − y( j)|| < , where || . . . || is the square norm

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587

2581

´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9

-9

y(7)

y(2)

y(9)

y(16)

y(17)

y(20)y(11)

-8

-7

-6

-5

-4

-3

y(10)

-2

3

y(3)

y(0) y(4) y(8)

y(14)y(15) y(5) y(12)

y(1) y(6) y(21)y(13)y(19)y(18)

-1

0

1

2

3

4

5

6

7

8

9

x
Figure 1: Sample data of scalar quantities in a 1-dimensional embedding space. In this projection, the nearest neighbor of y(1) = [4] is y(6) = [5]
(see the text for further explanations).

of a vector and is a small constant, usually no larger than the standard deviation RA of X. We then calculate the
normalized distance Rn between the (d + 1)-th embedding coordinate of points y(i) and y( j) according to the Eq. (2):
Rn =

|x(i + dτ) − x( j + dτ)|
> Rtr .
||y(i) − y( j)||

(2)

If Rn is larger than a given threshold Rtr , then y(i) is marked as having a false nearest neighbor. Eq. (2) has
to be calculated for the whole time series and for several d = 1, 2, . . . , m until the fraction of points for which
Rn > Rtr is zero, or at least suﬃciently small (less than 1%). The basis of the FNN method is the supposition that in
a d-dimensional space with d < m0 there are points belonging to neighborhoods of other points, but which would not
belong to them in higher dimensions. These points are called false neighbors.
For example, consider the following data X = {7, 4, −6, 2, 8, 1, 5, −8, 9, −3, −1, −3, 2, 7, −1, 0, −8, −6, 9, 8, −4, 6}
(values taken of [13]). Applying Eq. (1), delay vectors in a 1-dimensional embedding space are: y(0) = [7], y(1) =
[4], y(2) = [−6], . . . , y(21) = [6]. Delay vectors using an arbitrary τ = 11 in a 2-dimensional embedding space are:
y(0) = [7, −3], y(1) = [4, 2], y(2) = [−6, 7], . . . , y(10) = [−1, 6]. In Figure 1, the nearest neighbor of y(1) is y(6), but
in Figure 2 the distance between points y(1) and y(6) has increased when going from dimension d = 1 to dimension
d + 1 = 2. Thus, if we select a threshold lower than the normalized distance between y(1) and y(6), the point y(1) is
marked as having a false nearest neighbor.
2.1. Algorithmic Notation for a Sequential Implementation
In practice, the implementation of the FNN method can be carried out in diﬀerent ways [14]. One of these
ways, considered in this paper, is based on the kd-tree structure. A kd-tree is a k-dimensional binary search tree
that represents a set of points in k-dimensional space [15]. The variant described in Friedman et al. [16] distinguish
between two kinds of nodes: internal nodes partition the space by a cut plane deﬁned by a value in one of the k
dimensions (the one containing a maximum spread), and external nodes (or buckets) store the points in the resulting
hyperrectangles of the partition. To try to make the tree as balanced as possible, the hyperplane is chosen so that it lies
in the median of the values of discriminant coordinate. The analysis and explanation of the functions of the kd-tree
are described in more detail in [16]. Figure 3 depicts the kd-tree created using these prescriptions in 2 dimensions
for the data set showed in Figure 2. At each node, the cut dimension and the cut value are stored and the bucket size
has been chosen to be two (each bucket has at most 2 points). The corresponding partitioning of the plane is given in
Figure 2. The algorithm to compute the FNN by using kd-tree structure is shown in Algorithm 1.
3. A Distributed Memory Implementation of the False Nearest Neighbors Method Based on kd-tree
As it was previously introduced, the main contribution of this paper consists in a distributed memory implementation of the False Nearest Neighbors method based on the kd-tree structure. Thus, a parallel implementation directed
towards distributed memory architectures using the paradigm of “Single-Program, Multiple Data” (SPMD) is presented. More precisely, a coarse-grained decomposition for the implementation of a small number of tasks in parallel
with a large amount of calculation has been considered.
Parallel algorithms based on the kd-tree data structure have been widely used in a variety of graphic applications
using Nearest Neighbor method (NN) [17, 18, 19]. However, NN method searchs k-neighbors in one dimension for
a set of data, but in this paper a method to search in m-dimensions is needed in order to obtain some paremeters that
allow to reconstruct the phase space, as the minimal embedding dimension. In this context, the FNN method is the
preferred method for computing this minimal embedding dimension because of its ﬂexibility [20].

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587

2582

´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9
y(7) (x, −5)

(x, −0.4)

4

y
9

y(8)
8

y(2)
7

y(10)
6
5
4
3

y(1)
2

(y, 0.91)
1

y(4)
x
-9

-8

-7

-6

-5

-4

-3

-2

-1

1

2

3

4

5

6

7

8

9

-1

y(3)
-2

y(0)
-3

(y, −4.33)

(y, −3)

y(9)
-4
-5

y(6)
-6
-7

y(5)
-8
-9

(x, 3.33)

Figure 2: Considering the sample data of Figure 1 we use the delay method for d = 2 and τ = 11. Now, the distance between points y(1) = [4, 2] and
y(6) = [5, −6] has increased due to the new projection: thus, y(1) is marked as having a false nearest neighbor (see the text for further explanations).
Additionally, the dashed lines depict the sample data as partitioned using the kd-tree method.
Algorithm 1: Compute the false nearest neighbors method using a kd-tree structure

Program FNN(timeseries, l, m, τ, Rtr )
Input:
timeseries = a set of scalar quantities
l = number of scalar quantities
m = maximum dimension of embedding
τ = embedding delay of the vectors
Rtr = criterion threshold according to Eq. (2)
Output:
For each embedding dimension the output is the number of false nearest neighbors founded.
1 begin
2
for
3
4
5
6
7
8
9
10
11
12
13
14
15 end

d = 1 to m do
Make n = l − (d − 1)τ points with the timeseries using the delay method;
Build a kd-tree with the n points in d dimensions;
for i = 0 to n − 1 do
Find the nearest neighbor y( j) of y(i);
Calculate the normalized distance Rn ;
if Rn > Rtr then
Increment the number of false nearest neighbors for d;
end
end
Show result per d;

end

Free the dynamic memory occupied by the points and the kd-tree;

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587

2583

´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9

5

(y, 0.91)
(x, −0.4)

(x, 3.33)
(y, −4.33)
{y(5)}

(y, −3.0)

{y(3), y(9)}

{y(0), y(6)}

{y(4)}

(x, −5)
{y(7), y(2)}

{y(1), y(8)}

{y(10)}

Figure 3: The kd-tree built using the sample data showed in Figure 2.

Related to the FNN method, there is one recent paper [21] where the box-assisted algorithm has been used in order
to obtain the minimal embedding dimension. However, this implementation is based on a shared memory architecture.
Algorithm 2: Parallel implementation of the FNN method based on kd-tree

Program FNNP(timeseries, l, m, τ, Rtr )
Input:
timeseries = a set of scalar quantities
l = number of scalar quantities
m = maximum dimension of embedding
τ = embedding delay of the vectors
Rtr = criterion threshold according to Eq. (2)
Output:
For each embedding dimension the output is the number of false nearest neighbors founded.
1 begin
2
Set p as the number of processors;
3
Set pq as the local identiﬁer of the processor;
4
5
6
7
8
9
10
11
12
13
14
15
16
17

if n < p2 then Halt program;
for d = 1 to m do
Make n = l − (d − 1)τ points with the timeseries using the delay method;
Build the ﬁrst logp levels of the global kd-tree with n points in d dimensions;
Build the local kd-tree with nq points and destroy the global tree;
for i = 0 to nq − 1 do
Find the nearest neighbor y( j) of y(i);
Calculate the normalized distance Rn ;
if Rn > Rtr then
Increment the number of false nearest neighbors for d;
end
end
Save result per dimension d;

18
19
20

end

Free the dynamic memory occupied by the points and the local kd-tree;
All processors reduce the result in the Master processor;
if pq = Master then Show result per each d;

21 end

3.1. Decomposition Tasks
From Algorithm 1, two tasks were identiﬁed as the most time consuming parts: building a kd-tree (line 4) and
ﬁnding all nearest neighbors (line 6). From the point of view of computational theory, the number of operations
required to build a kd-tree with n points in k dimensions is proportional to O(kn log n). The expected value to ﬁnd a
nearest neighbor is O(log n), and the number of operations required to ﬁnd all neighbors is proportional to O(n log n).
We considered the construction of the tree in two steps. This idea appears in [22], and is adapted to our algorithm.
In the ﬁrst step, the ﬁrst log p levels of the tree were built, where p is the number of processors. In the second part,
the local trees are built, where the expected value of items contained in each tree is approximately n/p. This solution
allows us to distribute both identiﬁed tasks between processors. Algorithm 2 is an algorithmic notation for a program

2584

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587
´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9

6

that compute the FNN method in parallel using the paradigm SPMD: thus, the code is unique and run in diﬀerent
processors using a diﬀerent sample of data.
3.1.1. First log p Levels Building
In order to ensure that at least the ﬁrst log p levels of the tree correspond to nonterminal nodes, the input restriction
n ≥ p2 was added in the code (line 4 in Algorithm 2: n is the number of points and p is the number of processors). For
convenience and simplicity we assume that p is a power of two. We build this global tree by levels using a queue to
store the information that corresponds to each node. This step stops when all nodes of the level logp are in the queue,
ordered from left to right, where the leftmost nonterminal node is the ﬁrst element in the queue (e.g.: if we use the
kd-tree of Figure 3 with p = 2 the queue has the elements {(x, 3.33), (x, −0.4)}).
3.1.2. Local Tree Building
Once the information has been obtained for the level log p, the next step is to build the local tree. Each processor
has an identiﬁer pq (line 3 in Algorithm 2) and the queue built in the previous step has p elements. Therefore, each
processor pq identiﬁes its node (pq = q) and builds its local tree using the information contained in the queue node as
the root of its tree (e.g.: if we use the kd-tree of Figure 3 with p = 2 assuming q = 0 . . . (p − 1) then the processor p0
has root with cut coordinate x and cutoﬀ value 3.33 and processor p1 has root with cut coordinate x and cutoﬀ value
−0.4). The expected value of points in each local tree is approximately nq = n/p.
Finally the queue is destroyed and the ﬁrst log p levels of the tree are not maintained. From a theoretical point of
view it is possible that the nearest neighbor of a point is in the adjacent tree. In practice, we found that the variation in
reporting false nearest neighbors is negligible compared to the sample size (less than 0.09%) and therefore we decided
not to save the information on adjacent trees.
3.2. Task Interactions
A partial solution is obtained by the diﬀerent processors. When each one of them ﬁnishes the computation of all
the dimensions, it sends its results for each dimension to the master processor, which combines the messages received
and reports the results in the output (lines 19 and 20 of the Algorithm 2). With the proposed scheme the processors
only need to communicate with the master once they have completed the entire process, thus the connections between
processors is minimal. This implementation is directed towards distributed memory architectures and can be applied
into the more general case of shared-nothing architectures.
4. Experimental Results
In order to make an analysis of the goodness of the parallel implementation, two case studies have been taken into
account in this work: a time series generated by the Lorenz system [9] and a time series generated by a dynamical
model for synthetic electrocardiogram signals [10, 23].
The execution time of the implementation has been measured for diﬀerent number of processors p = {2i : i =
0 . . . 6} where p = 1 represents the sequential implementation of the program. The number of scalar quantities used is
l = {i × 106 : i = 2, 4, 6, 8, 10} in the Lorenz case study and l = {2i : i = 19 . . . 23} in the ECG case study. We use the
mutual information method to obtain the proper embedding delay τ in each case.
The parallel platform used consists in a cluster of 64 Intel Xeon E5450 3.0 GHz dual-processor machines (64 bits,
32 GB RAM) running RedHat Enterprise version 5 and using an Inﬁniband interconnection network. Each processor
has 4 cores with 6144 KB of cache memory (GALGO machine at I3A Computing Center [24]). In our case, we
intentionally use a core by node, to test how the distributed memory implementation works, due to the fact that if
some shared memory resources were used, then the communication overhead would not appear, and the results would
probably be better, but on the other hand the distributed algorithm would not be really tested.
The performances are presented in terms of execution time, speed-up and eﬃciency [3]. The speed-up S = T/T p
is deﬁned as the ratio of the time T taken to solve a problem on a processor to the time T p required to solve the same
problem on a parallel computer with p processors. The eﬃciency E = S /p is deﬁned as a measure of the fraction of
time for which a processor is used (or the ratio between the speed-up S and the number of processors p).

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587

2585

´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9

l
2 × 106
4 × 106
6 × 106
8 × 106
10 × 106

1
189.0899
410.8411
673.2327
1008.6205
1170.6912

2
40.4880
89.6691
142.8460
188.7682
259.3564

4
27.1596
59.9833
90.0432
128.1108
165.4032

8
18.5547
40.9089
64.0729
94.1119
123.1387

16
15.8423
36.8383
53.9892
78.6373
101.5388

7

32
14.1743
34.4470
51.6497
70.0060
94.1843

64
17.4642
39.0766
57.4386
76.4036
92.9112

Table 1: Execution time (T p ) in seconds for Lorenz case study. The column l is the number of scalar quantities used in each test.

l
219
220
221
222
223

1
117.3787
317.5365
817.1017
1747.5117
4536.0592

2
32.3028
76.5803
187.2669
424.2946
899.1440

4
21.5361
51.2239
124.7682
271.7197
666.5859

8
14.6445
33.7914
81.7340
189.6351
407.4719

16
10.4127
24.5390
61.6790
139.9694
272.1600

32
7.2997
17.3577
38.7170
86.4001
171.4024

64
5.7985
11.5937
25.5050
57.6881
173.1600

Table 2: Execution time (T p ) in seconds for ECG case study. The column l is the number of scalar quantities used in each test.

Tables 1 and 2 show the execution time T p for each one: each value is a median obtained with 10 tests computing 8
dimensions in the ﬁrst case of study and 12 dimensions in the second case of study, considering from p = 1 processor
to p = 64 processors.
Figure 4 depicts the speed-up and eﬃciency for both case studies. In general terms, the best performance has
been obtained for p ≤ 8 processors. However, when the number of processors is p > 8 both metrics show that this
implementation has a lack of scalability.
The behaviour of the Lorenz case study and the ECG case study is quite similar in terms of eﬃciency. Notice
that, according to Figures 4.b and 4.d, it is possible to appreciate a super-linear speed-up when p ≤ 8 and these
performance decreases when p > 8. The super-linear speed-up is explained due to the fact that the cache memory is
better exploited and that when the tree is splitted less searches have to be done at each subtree. With respect to the lost
of performance, this situation is produced due to diﬀerent causes. The ﬁrst one is that, evidently, the overhead due to
communications increases. Also, the most importat cause is that the sequential part of our implementation becomes
every time more relevant with respect to the parallel one.
Firstly, and thanks to the proﬁle of the execution, we thought that the lack scalability was due to the fact that the
construction of the kd-tree was unbalanced, and then the task of ﬁnding the false nearest neighbors consumed a lot
of time. A balanced implementation was carried out. As a result, the task of ﬁnding the false nearest neighbors was
improved but the construction of the kd-tree was injured. In global terms, the execution time increased.
From the unbalanced parallel implementation, the lack of scalability is due to the fact that building the ﬁrst log p
levels of the tree was not parallelized (see section 3.1.1) because the time consumption of this task is very small with
respect to the other tasks. However, as the number of processors increase, and consequently the execution time of the
other tasks decreases, the inﬂuence of this ﬁxed and small time becomes more and more important.
This problem could be addressed if the global tree building was parallelized, but in this case it would not be possible to apply this implementation to a shared-nothing architectures. Other solution maintaining the tasks interaction
at minimal is to build the path between the root of the global tree and the correspondent nonterminal node of the local
tree. Both solutions are raised as future works.
5. Conclusions and Future Work
In this work, a parallel implementation of the FNN method based on the kd-tree structure for obtaining the minimal
embedding dimension has been presented. In terms of speed, our approach was 3 ∼ 20 times faster than the best known
sequential algorithm.
The performance obtained, in terms of execution time, speed-up, and eﬃciency, support the idea of this work, that
is, to reduce the execution time in order to deal with real-time applications. To show that, two case studies have been

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587

2586

´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9
(a) Speed-up for Lorenz Case Study
40

20

10

0

6

l=2×106
l=4×10
l=6×106
l=8×106
6
l=10×10

3

l=10×10

E=S/p

S = Ts / Tp

(b) Efficiency for Lorenz Case Study
4

6
l=2×106
l=4×10
l=6×106
l=8×106
6

30

2

1

1

2

4

8

16

32

0

64

1

2

p (Number of processors)

16

32

64

(d) Efficiency for ECG Case Study
19

l=220
l=2
21
l=222
l=223
l=2

3

l=2

E=S/p

S = Ts / Tp

8

4

19
l=2
l=220
21
l=222
l=223

30

4

p (Number of processors)

(c) Speed-up for ECG Case Study
40

20

10

0

8

2

1

1

2

4

8

16

p (Number of processors)

32

64

0

1

2

4

8

16

32

64

p (Number of processors)

Figure 4: Speed-up and eﬃciency for Lorenz case study ((a) and (b)) and for ECG case study ((c) and (d)).

considered. The ﬁrst is one of the most known and popular in the ﬁeld of nonlinear dynamic systems called the Lorenz
attractor. The second one consists on a real application, that is, the study of an electrocardiogram. In both cases, the
execution time reduction has been achieved, sometimes employing resources that from an academic point of view are
misused (not so good speed-ups and eﬃciency). However, they provide a very important reduction on execution time.
If the last point is the key factor of our application, the used of resources makes sense.
This work represents the ﬁrst step of Nonlinear Time Series Analysis, that becomes meaningful when considering
ulterior stages on the analysis as prediction, when for some applications the time represents a crucial factor. Thus, the
results presented here encourage us to continue research in this topic.
Apart from the future work pointed out above related to solve the lack of scalability of our implementation, we are
going to continue making parallel implementations of other important algorithms in Nonlinear Time Series Analysis,
such as the algorithm to compute the Lyapunov coeﬃcients, prediction, etc.
[1] Web page project a/6983/06., http://www.dsi.uclm.es/aecichile,[19 Nov 2009] (2006).
[2] A. A. Alonzo, Acute Myocardial Infarction and Post Traumatic Stress Disorder: the consequences of Cumulative Adversity, Ph.D. thesis
(1999).
[3] A. Grama, G. A., K. G., K. V., Introduction to Parallel Computing, Addison-Wesley New York, 2003.
[4] H. Kantz, T. Schreiber, Nonlinear Time Series Analysis, Cambridge University Press, 2004.
[5] M. Perc, Nonlinear time series analysis of the human electrocardiogram, European Journal of Physics 26 (5) (2005) 757–768.
[6] R. Hegger, H. Kantz, T. Schreiber, Tisean: Nonlinear time series analysis., http://www.mpipks-dresden.mpg.de/~tisean,[27 Aug
2009] (2007).
[7] M. Kennel, Download page of fnn program., ftp://lyapunov.ucsd.edu/pub/nonlinear/fns.tgz,[24 May 2007] (1993).
[8] M. Kennel, R. Brown, H. Abarbanel, Determining Embedding Dimension for Phase Space Reconstruction Using the Method of False Nearest
Neighbors, Physics Review A 45 (6) (1992) 3403–3411.
[9] E. Lorenz, Deterministic Nonperiodic Flow, Journal of the Atmospheric Sciences 20 (2) (1963) 130–141.
[10] P. McSharry, G. Cliﬀord, L. Tarassenko, L. Smith, A dynamical model for generating synthetic electrocardiogram signals, IEEE Transactions
on Biomedical Engineering 50 (3) (2003) 289–294.
[11] F. Takens, et al., Dynamical Systems and Turbulence, Lecture Notes in Mathematics 898 (9) (1981) 366.
[12] A. Fraser, H. Swinney, Independent coordinates for strange attractors from mutual information, Physical Review A 33 (2) (1986) 1134–1140.
[13] J. Reiss, The analysis of chaotic time series, Ph.D. thesis, Georgia Institute of Technology (2001).
[14] T. Schreiber, Eﬃcient neighbor searching in nonlinear time series analysis, Int. J. Bifurcation and Chaos 5 (1995) 349.
[15] J. Bentley, Multidimensional binary search trees used for associative searching, Communications of the ACM 18 (9) (1975) 509–517.

´
J.J. Aguila
et al. / Procedia Computer Science 1 (2012) 2579–2587
´
J.J Aguila
et al. / Procedia Computer Science 00 (2010) 1–9

2587
9

[16] J. Friedman, J. Bentley, R. Finkel, An algorithm for ﬁnding best matches in logarithmic expected time, ACM Transactions on Mathematical
Software (TOMS) 3 (3) (1977) 209–226.
[17] K. Ma, J. Painter, C. Hansen, M. Krogh, A data distributed, parallel algorithm for ray-traced volume rendering, in: Proceedings of the 1993
symposium on Parallel rendering, ACM New York, NY, USA, 1993, pp. 15–22.
[18] M. Shevtsov, A. Soupikov, A. Kapustin, Highly parallel fast kd-tree construction for interactive ray tracing of dynamic scenes, in: Computer
Graphics Forum, Vol. 26, Citeseer, 2007, pp. 395–404.
[19] K. Zhou, Q. Hou, R. Wang, B. Guo, Real-time kd-tree construction on graphics hardware, in: ACM SIGGRAPH Asia 2008 papers, ACM,
2008, p. 126.
[20] K. Koc¸ak, L. S¸aylan, J. Eitzinger, Nonlinear prediction of near-surface temperature via univariate and multivariate time series embedding,
Ecological Modelling 173 (1) (2004) 1–7.
[21] I. Carri´on, E. Ant´unez, M. Castillo, J. Guerrero, J. Canals, Thread-based implementations of the false nearest neighbors method, Parallel
Computing 35 (2009) 523–534.
[22] I. Al-furaih, S. Aluru, S. Goil, S. Ranka, Parallel Construction of Multidimensional Binary Search Trees, IEEE Transactions on Parallel and
Distributed Systems (2000) 136–148.
[23] Ecgsyn: A realistic ecg waveform generator., http://www.physionet.org/physiotools/ecgsyn,[30 Apr 2009] (2003).
[24] Albacete Research Institute of Informatics, http://www.i3a.uclm.es.

