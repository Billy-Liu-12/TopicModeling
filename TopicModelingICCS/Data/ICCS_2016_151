Procedia Computer Science
Volume 80, 2016, Pages 673–679
ICCS 2016. The International Conference on Computational
Science

Kepler WebView: A Lightweight, Portable Framework for
Constructing Real-time Web Interfaces of Scientiﬁc
Workﬂows
Daniel Crawl∗, Alok Singh, and Ilkay Altintas
San Diego Supercomputer Center, University of California, San Diego
crawl@sdsc.edu, a1singh@ucsd.edu, altintas@sdsc.edu

Abstract
Modern web technologies facilitate the creation of high-quality data visualizations, and rich,
interactive components across a wide variety of devices. Scientiﬁc workﬂow systems can greatly
beneﬁt from these technologies by giving scientists a better understanding of their data or model
leading to new insights. While several projects have enabled web access to scientiﬁc workﬂow
systems, they are primarily organized as a large portal server encapsulating the workﬂow engine.
In this vision paper, we propose the design for Kepler WebView, a lightweight framework that
integrates web technologies with the Kepler Scientiﬁc Workﬂow System. By embedding a web
server in the Kepler process, Kepler WebView enables a wide variety of usage scenarios that
would be diﬃcult or impossible using the portal model.
Keywords: Scientiﬁc Workﬂows, Web Access, Data-driven Visualizations

1

Introduction

Modern web technologies oﬀer a wide variety of advanced graphics and interactive capabilities.
WebGL, for example, uses GPUs to accelerate 3D rendering within the browser. Many opensource projects build on these technologies to create high quality visualizations, e.g., vis.js1
and Flot2 produce dynamic charts and graphs, Leaﬂet3 and Cesium4 construct two and threedimensional maps, and Cytoscape.js5 assembles large network graphs. These projects are often
∗ Correspondence should be sent to: crawl@sdsc.edu. This work was primarily supported by NSF-1331615
under CI, Information Technology Research and SEES Hazards programs, and by NIH-P41-GM103426 under
the National Institute of General Medical Sciences.
1 vis.js: http://visjs.org
2 Flot: http://www.ﬂotcharts.org
3 Leaﬂet: http://leaﬂetjs.com
4 Cesium: https://cesiumjs.org
5 Cytoscape.js: http://js.cytoscape.org

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.361

673

Kepler WebView

Crawl, Singh, and Altintas

optimized to run on a wide range of devices with diﬀerent hardware resources and display sizes
including smartphones, tablets, and wall-mounted displays.
Scientiﬁc workﬂow systems can greatly beneﬁt from these web technologies since high quality
visualizations can give scientists a better understanding of the results leading to new insights
about their data or model. Workﬂows often manage long-running simulations, and data-driven
visualizations can display the results either at the completion of the job or in real-time while
the workﬂow is executing. Further, interactive components provide a convenient mechanism
to inspect or query information from an executing workﬂow or from the provenance system.
Enabling web access increases the number and types of interfaces possible for the scientiﬁc
workﬂow system; diﬀerent interfaces may be assembled for diﬀerent devices, display sizes, and
usage scenarios.
While there have been several projects that enable web access to scientiﬁc workﬂows systems
such as [5, 3, 4], they are comprised of a portal server encapsulating the workﬂow system. The
portal usually consists of several resource-heavy software components making it diﬃcult or
impractical to deploy in certain environments such as a laptop. Additionally, many of these
systems apply a ﬁxed set of HTML components and adding new ones may not be easily done
by end-users.
This paper describes our vision for Kepler WebView, a portable, lightweight framework
that integrates web technologies with the Kepler Scientiﬁc Workﬂow System [2]. Kepler actors
in a workﬂow may be annotated with one or more WebView attributes that specify arbitrary
HTML components. A lightweight web server runs inside the Kepler process and provides
real-time communication between the WebView attributes and HTML components executing
on web clients. The WebView attribute monitors the behavior of its actor, e.g., data read on
ports, actor executions, etc., and reports these events to the corresponding HTML component
executing in the web client(s).
This approach enables a wide variety of usage scenarios such as: (i) embedding rich visualizations in an interactive computational notebook such as iPython6 ; (ii) enabling interactive
access to Kepler while running on an HPC cluster behind a ﬁrewall; and (iii) facilitating the
implementation of a Kepler as a Service execution model.
The rest of the paper is organized as follows: in the next section, we describe our approach
for Kepler WebView. Section 3 outlines several usage scenarios enabled by this approach, and
Section 4 discusses related work.

2

Approach

Our approach in Kepler WebView, shown in Figure 1, is comprised of three parts: actors with
WebView attributes that specify HTML components, a lightweight web server embedded in the
Kepler process, and a web client displaying one or more of the HTML components. In this
diagram, Actors 1 and 4 contain WebView attributes that reference HTML ﬁles stored in the
local ﬁle system. The contents of these ﬁles can be any valid HTML from static text or images,
to rich, interactive graphics using HTML5 and JavaScript. When a web client connects to the
web server, it requests one or more of the HTML components for a workﬂow. The web server
sends these components to the client, and the client then renders the HTML and executes any
JavaScript. In Figure 1, the WebView attribute in Actor 1 is called Data Form and references
form.html. The web client is displaying a dashboard in a browser, and one of the dashboard’s
components is the window named Data Form, which renders the HTML in form.html.
6 IPython:

674

http://ipython.org

Kepler WebView

Crawl, Singh, and Altintas

Web Browser
Dashboard
Control Panel

Kepler
Workflow

Data Form

Actor 2

A

Actor 1
Progress

Tree

Data Form
form.html

Actor 4
Line Graph
linegraph.html

Actor 3

B

Tree
tree.html

Line Graph

Web Server

Provenance

Figure 1: Kepler WebView approach is comprised of three parts: actors with WebView attributes specifying HTML components, a lightweight web server embedded in the Kepler process, and web client(s) displaying one or more of these HTML components.

The WebView attribute monitors the behavior of its actor and reports these events to any
connected web clients. This includes watching all data read and written by the actor (i.e., tokens
read from input ports and written to output ports), and receiving actor execution events when
the workﬂow is running. The WebView attribute communicates these events to the HTML in
the web client via a WebSocket, a full-duplex communication protocol. An HTML component
can react to these events by implementing an API in JavaScript. When the web client receives
data from the WebSocket, the API is invoked for the destination component, which can then
update the rendered HTML. For example, when Actor 4 reads a new input token, the value of
the token is sent via a WebSocket to the linegraph.html and tree.html components executing in
the web client. Similarly, an interactive HTML component that receives input from a user can
send this input in real-time to the corresponding WebView attribute in the workﬂow via the
WebSocket. There are many types of events that the WebView attribute monitors in the actor,
e.g., read input port, parameter value changed, etc., and an HTML component only needs to
implement the subset of the API for the events of which it is interested.
A WebView attribute may be placed inside any actor in the workﬂow. This provides great
ﬂexibility since it allows any part of the workﬂow to be represented by an HTML component
and it is not necessary to add new actors to the workﬂow or modify the source code of actors.
Existing workﬂows can be updated with HTML components simply by adding WebView attributes to important actors. Additionally, more than one WebView attribute may be placed
inside the same actor. This allows multiple HTML components to utilize the same actor to
display diﬀerent information. For example, Actor 4 in Figure 1 has two WebView attributes
referencing linegraph.html and tree.html. The former displays a line graph of data read by
input port A, while the latter shows a tree graph of data read by input port B.
The web server can query the Kepler Provenance Framework [1] to access provenance data
captured during current and previous workﬂow executions. When a new web client connects to
an executing workﬂow, we would like to update the HTML components with the data produced
during that execution. For example, while the workﬂow in Figure 1 is running, a new client
that displays linegraph.html should receive all the data values read by Actor 4 since the start
of execution in order to render the complete graph. For long-running workﬂows, it may not be
feasible to buﬀer all the data in memory, so the web server can retrieve it from the provenance
system.
675

Kepler WebView

3

Crawl, Singh, and Altintas

Usage Scenarios

The approach illustrated in Figure 1 depicts a single client displaying all of the workﬂow’s
HTML components within a dashboard. This section describes several other types of usage
scenarios that are possible with Kepler WebView.

3.1

Notebook Computational Environments

Notebook frameworks, such as IPython/Jupyter7 , Beaker8 , and Zeppelin9 provide a browserbased, multi-language, interactive computational environment. A single notebook may mix text,
code, and data visualizations, including HTML and JavaScript components. By integrating
Kepler with such a notebook environment, we can enable scientists to leverage the strengths of
Kepler using reproducible dynamic execution platforms.
Web Browser
Notebook
[1] start_wf(…)
[2] …
[3] show(…)

Server
JupyterHub

Kepler
WS

Line Graph

Figure 2: Integrating Kepler with JupyterHub: users can make calls to a Kepler API in the
notebook to, e.g., execute workﬂows, inspects actors, or display HTML components.
Figure 2 shows one possible integration of Kepler and JupyterHub. Users can make calls to
a Kepler API in the notebook that executes the workﬂow, inspects actors, views provenance,
or displays results. These API calls are sent to the JupyterHub server, which in turn forwards
them to the web server in the Kepler process. The API includes functions to see what HTML
components are provided by the workﬂow, i.e., the list of WebView attributes, and the ability
to display those attributes within the notebook.

3.2

Interacting with Kepler on a Computational Cluster

Figure 3 shows a scenario often employed when running Kepler on a large HPC resource such
as XSEDE10 . Users connect to a login node and submit jobs to a scheduler such as PBS or LSF.
When a job begins, the scheduler allocates one or more compute nodes in the cluster to the
user’s application. Kepler runs on one of these compute nodes and manages the other compute
nodes. In this example, the remaining compute nodes are executing Spark11 .
Since workﬂows executed on HPC resources often run for long periods of time, it is not
practical to run Kepler on the user’s desktop or laptop computer. Instead, Kepler runs in
headless mode on one of the compute nodes, and it is diﬃcult to control the workﬂow or know
its progress.
7 Jupyter:

https://jupyter.org
http://beakernotebook.com
9 Zeppelin: http://zeppelin-project.org
10 XSEDE: https://www.xsede.org
11 Spark: http://spark.apache.org
8 Beaker:

676

Kepler WebView

Crawl, Singh, and Altintas

Login

Compute 1 Compute 2 Compute n
ssh

Kepler

Web Client

Spark

WS

Firewall

Figure 3: Interacting with Kepler running on a cluster.

The Kepler WebView framework allows the user to interact with the workﬂow running on
a compute node. An ssh tunnel can be used to connect the user’s web client with the web
server running in Kepler. Upon connecting, the web client can instantly provide the user with
the workﬂow status. Depending on the HTML components used by the workﬂow’s WebView
attributes, the web client can display, e.g., plots of data showing the results of calculations
running on the compute node, or interactive components to steer the workﬂow execution. The
connection between the web client and web server is temporary and the workﬂow can continue
execution after it is closed.
In this scenario it would be diﬃcult to setup a portal environment for executing Kepler.
Login nodes have strict memory and CPU limits for user applications since many users are
often connected simultaneously. A portal environment could be launched on the same compute
node where Kepler executes, but the portal would consume resources from that compute node
that could otherwise be used by the job.

3.3

Kepler as a Service

Figure 4 shows one approach for Kepler as a Service. Web clients connect to a front-end load
balancer, which forwards the connections to a Kepler process running in a Docker container
or virtual machine. Each client is assigned to a diﬀerent Kepler and the Kepler processes are
isolated from each other. As demand changes, the load balancer can adjust the number of
Kepler processes.
Docker

Docker

Docker

Docker

Docker

Kepler

Kepler

Kepler

Kepler

Kepler

WS

WS

WS

WS

WS

Load
Balancer

Web
Client 1

Web
Client 2

Web
Client 3

Figure 4: Kepler as a Service: clients connect to Kepler through a load balancer, which can
adjust the number of Kepler nodes as demand changes.

677

Kepler WebView

4

Crawl, Singh, and Altintas

Related Work

The work of enhancing scientist-workﬂow interaction and increasing scientiﬁc community collaboration through improved accessibility, shareability and reproducibility has been an active
area of research. In recent years, there have been several projects that have taken leaps in this
direction and expanded the availability of various workﬂow platforms to the community.
WorkWays [5] introduces a client-server architecture to enable data transfer between the
workﬂow execution platform and the web client. The data source and sink interfaces use a
layer called IOLibrary, which provides a decoupling of communication protocols. The IOLibrary
uses a publish-subscribe mechanism for data transfer between the data source and sink. Each
data source that wants to publish to a client needs to be declared as a diﬀerent actor called
IOActor. Once declared, each IOActor is a unique broadcasting station to which multiple sinks
can connect. In contrast, our architecture enables tagging of any actor with WebView attributes
without the need to create specialized actors.
CAMERA [3] portal provides users a web portal where users can upload Kepler workﬂows,
share them with the community, customize each execution instance, save their output in a semantic database, and record their provenance. The CAMERA portal enhances collaboration
among the community and improves reusability of tools. GPFlow [7] enables users to interact with workﬂow through a web interface built using ASP.NET. It deploys Human Workﬂow
Services (HWS) from BizTalk 200612 , a Microsoft integration server. GPFlow creates an abstraction layer above the BizTalk server. Scientists can create and execute workﬂows through
a web service from a client machine. Workﬂows in GPFlow are a collection of components
connected to form a pipeline. The workﬂow execution occurs asynchronously to the web services viewing the workﬂow. GPFlow’s execution capability is limited by strict enforcement of
sequentiality on its unit of execution, a component. In contrast, Kepler does not enforce such
sequentiality on its actors.
Ergatis [6] is a domain-speciﬁc workﬂow that provides a web interface to build a bioinformatics workﬂow by using components in series or parallel. A component in Ergatis is restricted
to be a serialized execution of scripts and binary executables. Our approach towards universal
access to Kepler will make it a full-ﬂedged web accessible platform that runs arbitrarily nested
workﬂows as a service.
Galaxy [4] is an exclusively web accessible workﬂow engine specializing in genome analysis.
Users can have a local deployment of the Galaxy server and access their personal servers using a
web browser. Galaxy is similar in many ways to Kepler: both are designed to hide computational
complexity and enable scientists to perform reproducible scientiﬁc experiments using simple
interface. Our approach will facilitate Kepler to distinguish itself as both a desktop application
and a web-enabled collaborative scientiﬁc experimentation platform.
Taverna [8] workﬂow suite provides both local and distributed execution environment. Using
the Taverna workbench, users can locally deploy the engine. Taverna Server and Taverna Lite
provide web interface through a client-server format. However, users have to use Taverna Player,
a particular client software and cannot alter workﬂows through the web interface.

5

Conclusion

Our approach aims to enhance the Kepler ecosystem by enabling universal accessibility to alter
and execute workﬂows from any client that supports HTML5 and WebSockets. We take the
12 BizTalk:

678

https://www.microsoft.com/en-us/server-cloud/products/biztalk/

Kepler WebView

Crawl, Singh, and Altintas

approach of embedding a lightweight web server inside Kepler in contrast with having a portal
server encapsulating the engine. Using speciﬁc attributes, users can monitor any subset of
actors in a workﬂow. WebView attributes enable multiple HTML components to be bound to
a single actor, giving the ﬂexibility of building workﬂow views that highlight the most critical
aspects of a process. Full-duplex communication gives users the ability to control each execution
instance by enabling them to change actor conﬁgurations on the ﬂy.

References
[1] I. Altintas, O. Barney, and E. Jaeger-Frank. Provenance collection support in the Kepler scientiﬁc workﬂow system. In Proceedings of the 2006 International Conference on Provenance and
Annotation of Data, IPAW’06, pages 118–132, Berlin, Heidelberg, 2006. Springer-Verlag.
[2] I. Altintas, C. Berkley, E. Jaeger, M. Jones, B. Ludascher, and S. Mock. Kepler: an extensible system for design and execution of scientiﬁc workﬂows. In 16th International Conference on Scientiﬁc
and Statistical Database Management, pages 423–424, June 2004.
[3] I. Altintas, A.W. Lin, J. Chen, C. Churas, M. Gujral, S. Sun, W. Li, R. Manansala, M. Sedova, J.S.
Grethe, and M. Ellisman. CAMERA 2.0: A data-centric metagenomics community infrastructure
driven by scientiﬁc workﬂows. In 6th World Congress on Services (SERVICES-1), pages 352–359,
2010.
[4] D. Blankenberg, G. V. Kuster, N. Coraor, G. Ananda, R. Lazarus, M. Mangan, A. Nekrutenko,
and J. Taylor. Galaxy: A Web-Based genome analysis tool for experimentalists. Current protocols
in molecular biology, Chapter 19, January 2001.
[5] H. A. Nguyen, D. Abramson, T. Kipouros, A. Janke, and G. Galloway. Workways: interacting with
scientiﬁc workﬂows. Concurrency and Computation: Practice and Experience, 27(16):4377–4397,
2015.
[6] J. Orvis, J. Crabtree, K. Galens, A. Gussman, J. M. Inman, E. Lee, S. Nampally, D. R. Riley,
J. P. Sundaram, V. Felix, B. Whitty, A. Mahurkar, J. R. Wortman, O. White, and S. V. Angiuoli.
Ergatis: a web interface and scalable software system for bioinformatics workﬂows. Bioinformatics,
26(12):1488–1492, 2010.
[7] A. Rygg, P. Roe, and On Wong. GPFlow: An intuitive environment for web based scientiﬁc
workﬂow. In Fifth International Conference on Grid and Cooperative Computing Workshops, pages
204–211, October 2006.
[8] K. Wolstencroft, R. Haines, D. Fellows, A. Williams, D. Withers, S. Owen, S. Soiland-Reyes,
I. Dunlop, A. Nenadic, P. Fisher, J. Bhagat, K. Belhajjame, F. Bacall, A. Hardisty, A. Nieva de la
Hidalga, M.P. Balcazar Vargas, S. Suﬁ, and C. Goble. The Taverna workﬂow suite: designing and
executing workﬂows of web services on the desktop, web or in the cloud. Nucleic Acids Research,
41(W1):W557–W561, May 2013.

679

