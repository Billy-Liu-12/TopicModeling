Fault-Tolerant and Scalable Protocols for
Replicated Services in Mobile Agent Systems
JinHo Ahn1 and Sung-Gi Min2,
1

2

Dept. of Computer Science, Kyonggi University, Republic of Korea,
jhahn@kyonggi.ac.kr
Dept. of Computer Science & Engineering, Korea University, Republic of Korea,
sgmin@korea.ac.kr

Abstract. To enhance scalability of replicated services a large number
of mobile agents attempt to access in mobile agent systems, we present a
new strategy to apply an appropriate passive replication protocol to each
replicated service according to its execution behavior because deterministic
services require weaker constraints to ensure their consistency than nondeterministic ones. For this goal, two passive replication protocols are
introduced for non-deterministic services and for deterministic services
respectively. They both allow visiting mobile agents to be forwarded to and
execute on any node performing a service agent, not necessarily the primary
agent. Especially, in case of the protocol for deterministic services, after a
backup service agent has received a mobile agent request and obtained the
delivery sequence number of the request from the primary service agent,
the backup agent, not the primary one, is responsible for processing the
request and coordinating with the other replica service agents.

1

Introduction

Mobile agent paradigm is considered as a promising vehicle for developing distributed computing systems such as grid computing, e-commerce, active networks and embedded systems because it provides a number of advantages such
as reduction of network traﬃc and asynchronous interaction and so on unlike the
traditional client server paradigm [1, 5, 7]. As the mobile agent system is gaining popularity and the number of mobile agent’s users rapidly increases, a large
number of mobile agents may concurrently be transferred to a node supporting
a particular service. In this case, the service agent on the node can be a performance bottleneck and if the agent fails, the execution of all the transferred
mobile agents be blocked. In order to solve these problems, the service agent
function should be replicated at multiple nodes. This approach may balance the
load caused by the mobile agents and even if some service agents crash, continuously allow the other service agents to provide the mobile agents with the
This work was supported by Korea Research Foundation Grant.(KRF-2002-003D00248).
Corresponding author. Tel.:+82-2-3290-3201; fax:+82-2-953-0771.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 679–686, 2005.
c Springer-Verlag Berlin Heidelberg 2005

680

J. Ahn and S.-G. Min

service. There are two approaches used in distributed systems to potentially be
applied for satisfying the goal: active and passive replication [8]. Among the two
approaches, the passive replication approach [3, 4] has three desirable features
we focus on. First, the approach enables its consistency to be guaranteed even
if replicated service agents are performed in a non-deterministic manner. Thus,
it can be applied to every replicated service regardless of the execution behavior
of the service. Second, it needs lower processing power during failure-free execution than the active replication one. Third, mobile agents has only to use a
unicast primitive, not a multicast one because they send service requests only to
the primary service agent. But, the traditional passive replication approach may
result in some scalability and performance problems when being applied to the
mobile agent system as a fault-tolerant technique for replicated services. In other
words, to the best of our knowledge, previous works [3, 4] uniformly applied the
traditional passive replication approach to each replicated service regardless of
whether it is deterministic or non-deterministic. But, in this approach, every
mobile agent request should be sent only to the primary service agent, which
processes the request and coordinates with the other live replicas and then returns a response of the request to the mobile agent. This special role of the
primary is necessarily required to ensure the consistency for non-deterministic
services. Moreover, the traditional passive replication approach forces all visiting mobile agents to be transferred to and execute their works in order only
on the node running the primary service agent of each domain. These inherent
features may cause the extreme load condition to occur on the primary service
agent when a large number of mobile agents are forwarded to the service domain and access its resources. Thus, this previous strategy may not achieve high
scalability and performance. This paper presents a scalable strategy to apply an
appropriate passive replication protocol to each service according to its execution behavior because deterministic services require weaker constraints to ensure
their consistency than non-deterministic ones. For this goal, two passive replication protocols are designed in this paper. The ﬁrst protocol for non-deterministic
services is named P RP N S and the second protocol for deterministic services,
P RP DS. They both allow visiting mobile agents to be forwarded to and execute on any node performing a service agent, not necessarily the primary agent.
Especially, in case of the second protocol P RP DS, after a backup service agent
has received a mobile agent request and obtained the delivery sequence number
of the request from the primary service agent, the backup agent, not the primary
one, is responsible for processing the request and coordinating with the other
replica service agents. Due to this feature, P RP DS is more lightweight than
P RP N S tolerating non-deterministic servers such as multi-threaded servers.

2

The Proposed Passive Replication Protocols

In here, we attempt to improve scalability of mobile agent systems by using
the appropriate passive replication protocol for each replicated service domain

Fault-Tolerant and Scalable Protocols

681

according to whether the service is deterministic or non-deterministic. For this
purpose, two passive replication protocols P RP N S and P RP DS are introduced.
When mobile agents are concurrently transferred to a non-deterministic replicated service, the consistency is ensured by applying the traditional passive
replication protocol. When mobile agent aj attempts to use the service of a
non-deterministic replicated service domain ui , aj should be transferred from its
, executes.
current node to the node where the primary service agent of ui , uprim
i
Then, the following phases are performed:
receives a request message from mobile agent aj , uprim
(Phase 1). When uprim
i
i
processes the message. After the execution, it generates (response, psn, next
state), where response is the response of the message, psn identiﬁes the proupdated by processcessed request message and next state is the state of uprim
i
ing the request.
(Phase 2). uprim
sends all backup service agents the update message (response,
i
psn, next state, j, reqid) using View Synchronous Multicast(V SCAST ) [8]
respectively, where j identiﬁes aj and reqid is the send sequence number of the
request message. In here, V SCAST is the multicast communication primitive
used to ensure correctness of the passive replication approach. When each backup
service agent receives the update message, it updates its state using next state,
maintains (response, j, reqid) in its buﬀer and then sends an acknowledgement
. In this case, (response, j, reqid) is needed to ensure the exactly
message to uprim
i
once semantics despite uprim
’s failure.
i
(Phase 3). After receiving an acknowledgement message from every live backup
service agent, uprim
sends response to aj .
i
Therefore, this protocol forces all visiting mobile agents to be transferred to
and execute their works in order only on the node running the primary service
agent of each domain. This behavior may cause the extreme load condition to
occur when a large number of mobile agents are forwarded to the service domain
to use the non-deterministic service. For example, in ﬁgure 1, three mobile agents
n
2
alt , am
s and ar are concurrently transferred to the node nodei where the primary
2
service agent of ui , ui , is running. The mobile agents perform the service of ui
in order via only u2i using the above mentioned protocol respectively. Thus, we
introduce a passive replication protocol for non-deterministic service, P RP N S,
to solve the problem by allowing mobile agents to be forwarded to and execute on
each a node performing a service agent, not necessarily the primary agent. The
protocol forces each service agent p to forward every request received from mobile
agents to the primary service agent. Afterwards, the primary agent performs the
phases 1 through 2 previously mentioned to satisfy the consistency condition
for non-deterministic service. After receiving an acknowledgement from every
normal backup service agent, the primary agent sends the response of the request
to the service agent p, which forwards it to the corresponding mobile agent.

682

J. Ahn and S.-G. Min
ui
wq i0

nodei0

ui0
wq i1

nodei1
ack

wq i2
arn

ack

ui1

VSCAST

execute
nodei2
request

asm

atl

ui2
response

1
2
3

Fig. 1. an execution of three mobile agents accessing a replicated service ui in the
traditional passive replication protocol
ui
wq i0
arn
wq i1

nodei0

execute

ui0
ack
nodei1

execute
request

asm

ui1

VSCAST

response

wq i2
atl

request
execute

ack
response
nodei2

ui2

Fig. 2. an execution of three mobile agents accessing a replicated service ui in the
protocol P RP N S

Figure 2 illustrates how the protocol P RP N S executes. In this ﬁgure, mon
2
bile agents alt , am
s and ar are transferred to and execute on the nodes nodei ,
1
0
nodei and nodei for accessing service ui . Then, the mobile agents perform their
tasks via u2i , u1i and u0i respectively. For example, if u1i receives a request from
2
2
am
s , it forwards the request to the primary service agent ui . Afterwards, ui
1
processes the request and coordinates with the other service agents ui and u0i
using V SCAST . When receiving acknowledgements from the two backup service
agents, it sends the response of the request to u1i , which forwards the response to
am
s . From this example, we can see that P RP N S improves scalability of replicated services in case a large number of mobile agents attempt to use a particular
service simultaneously. If a mobile agent accesses a service via a backup service
agent in this protocol, two more messages are required per request compared

Fault-Tolerant and Scalable Protocols

683

with the traditional protocol. However, the additional message cost is not significant because each service domain is generally conﬁgured on a local area network
like Ethernet.
A deterministic replicated service requires weaker constraints to ensure the
consistency than a non-deterministic one. In other words, after the primary service agent has determined the processing order of every request from mobile
agents, it is not necessary that only the primary agent handles all requests, and
coordinates with the other replica service agents like in the protocol P RP N S.
With this observation, we attempt to use a lightweight passive replication protocol, P RP DS, for each deterministic service domain. The proposed protocol
has the following features.
• Each mobile agent can use a service via the primary service agent or a backup
one.
• Only the primary service agent determines the processing order of every request
from mobile agents.
• After a backup service agent has received a mobile agent request and obtained
the order of the request from the primary service agent, the backup agent, not
the primary one, processes the request and coordinates with the other replica
service agents including the primary agent.
Due to these desirable features, this protocol enables each visiting mobile agent
to be forwarded to and execute on a node running any among replicated service
agents in the service domain. If mobile agent aj is transferred to the node where
a backup service agent ubackup
executes, P RP DS executes the following phases.
i
Otherwise, the three phases of P RP N S are performed.
(Phase 1). When ubackup
receives a request message from aj , ubackup
asks the
i
i
the
psn
of
the
request
message.
In
this
case,
afprimary service agent uprim
i
backup
ter uprim
determines
the
psn
of
the
message,
it
notiﬁes
u
of
the
psn.
i
i
Then, uprim
processes the request message and saves (response, psn, next state,
i
j, reqid) of the message in its buﬀer. When receiving the psn, ubackup
processes
i
the corresponding request and generates (response, psn, next state) of the request.
(Phase 2). ubackup
sends the other service agents the update message (response,
i
psn, next state, j, reqid) using V SCAST respectively. When each service agent
receives the update message, it updates its state using next state,
except for uprim
i
maintains (response, j, reqid) in its buﬀer and then sends an acknowledgement
message to ubackup
. If uprim
receives the update message from ubackup
, it just
i
i
i
removes the element (response, psn, next state, j, reqid) for the message from
its buﬀer, saves (response, j, reqid) in the buﬀer and sends an acknowledgement
message to ubackup
.
i
receives an acknowledgement message from every other
(Phase 3). Once ubackup
i
live service agent, it sends response to aj .
n
Figure 3 shows an execution of three mobile agents alt , am
s and ar attempting
to use service ui via u2i , u1i and u0i in the protocol P RP DS. In this ﬁgure, only the

684

J. Ahn and S.-G. Min
ui
wq i0
arn
wq i1

nodei0

execute

ui0
nodei1
ack

execute
request

asm

ui1
response

wq i2
atl

VSCAST
ack

nodei2

execute

ui2

Fig. 3. an execution of three mobile agents accessing a replicated service ui in the
protocol P RP DS

1
procedure is pictured to execute in P RP DS when am
s sends a request to ui . In this
1
2
2
case, ui asks the primary agent ui the psn of the request. ui determines the psn and
sends it to u1i . Then, u2i processes the request and saves (response, psn, next state,
j + 1, reqid) of the request in its buﬀer. Meanwhile, after obtaining the psn of the
request from the primary agent, u1i processes the request and coordinates with the
other service agents u2i and u0i using V SCAST to satisfy the consistency condition
for deterministic service. When u1i receives an acknowledgement from every live
agent, it sends the response to am
s . From this ﬁgure, we can see that the protocol
P RP DS may signiﬁcantly improve scalability of replicated services by enabling
each visiting mobile agent to use a particular service via any among replicated service agents on the service domain and the request processing and coordination load
to be distributed between a set of service agents.

2.1

Recovery

If service agents fail on a service domain, the proposed two protocols, P RP N S
and P RP DS, should perform their recovery procedures to satisfy each consistency condition for nondeterministic service or deterministic service despite the
failures respectively. Firstly, in case of the crash of the primary service agent
, the two protocols execute both each appropriate recovery procedure in
uprim
i
the following cases.
fails before ﬁnishing the phase 1.
(Case 1). The primary service agent uprim
i
is elected among all backup
In this case, a new primary service agent uprim
i
service ones. Since no response of each request can be received from uprim
, the
i
prim
, which has only to perform the phases 1 through 3.
request will be resent to ui
fails after completing the phase 1,
(Case 2). The primary service agent uprim
i
but before sending the response to the corresponding mobile agent.

Fault-Tolerant and Scalable Protocols

685

Like in case 1, a new primary agent uprim
is selected. To ensure linearizability
i
in this case, either all the backup service agents receive the update message, or
none of them receive it. V SCAST is used to satisfy the atomicity condition of
linearizability in case of an asynchronous mobile agent system with an unreliable
failure detector. If no backup service agent receives the update message, this
case is similar to case 1. Otherwise, (response, j, reqid) in the phase 2 is used
to ensure the exactly-once semantics. In other words, when the request from the
again,
corresponding mobile agent is sent to the new primary service agent uprim
i
the latter immediately sends the response of the request to the ﬁrst without
handling the request.
fails after ﬁnishing the phase 3.
(Case 3). The primary service agent uprim
i
is selected and identiﬁed.
Like in case 1, a new primary service agent uprim
i
crashes, P RP N S and P RP DS
Secondly, when a backup service agent ubackup
i
perform their recovery procedures as follows. In P RP N S, ubackup
is just removed
i
from its service group. On the other hand, P RP DS executes a corresponding
recovery procedure in each following case.
(Case 1). Backup service agent ubackup
fails before asking the primary service
i
prim
agent ui
the psn of each request in the phase 1.
In this case, ubackup
is just removed from its group. Afterwards, ubackup
’s
i
i
failure is detected because of no response of the request from it.
(Case 2). Backup service agent ubackup
fails before ﬁnishing the phase 1.
i
prim
(Case 2.1). The primary ui
fails.
,
The other backup service agents select a new primary service agent, uprim
i
among them.
(Case 2.2). The primary uprim
is alive.
i
prim
Detecting ubackup
’s
crash,
u
retrieves every update information, which is
i
i
form of (response, psn, next state, j, reqid), from its buﬀer and sends it to the
other live backup service agents respectively. In this case, V SCAST is used to
ensure linearizability.
fails after sending the update message
(Case 3). Backup service agent ubackup
i
to the other service agents in the phase 2, but before sending the response to
the corresponding mobile agent.
sent the update message to the other service agents by using
As ubackup
i
V SCAST , the entire consistency is ensured. Therefore, the service group of
has only to remove ubackup
.
ubackup
i
i
fails after completing the phase 3.
(Case 4). Backup service agent ubackup
i
ubackup
is
removed
from
its
group
and
mobile
agents can detect that ubackup
fails.
i
i

686

3

J. Ahn and S.-G. Min

Conclusion

This paper proposed a new strategy to improve scalability of mobile agent systems by applying an appropriate passive replication protocol to each replicated
service according to its execution behavior, deterministic or non-deterministic.
For this purpose, we presented the two passive replication protocols, P RP N S
and P RP DS, for non-deterministic and deterministic services respectively. While
ensuring linearizability [6], they both allow visiting mobile agents to be forwarded
to and execute their tasks on any node performing a service agent, not necessarily the primary agent. Especially, the more lightweight protocol P RP DS allows
any service agent to process each mobile agent request and coordinate with the
other replica service agents after receiving the request and obtaining its delivery
sequence number from the primary agent. Thus, if P RP DS is well-combined
with existing load balancing schemes [2], the request processing and coordination load can be evenly distributed among a set of deterministic and replicated
service agents based on the workload of each service agent.

References
1. P. Bellavista, A. Corradi and C. Stefanelli. The Ubiquitous Provisioning of Internet
Services to Portable Devices. IEEE Pervasive Computing, Vol. 1, No. 3, pp. 81-87,
2002.
2. H. Bryhni, E. Klovning and O. Kure. A Comparison of Load Balancing Techniques
for Scalable Web Servers. IEEE Network, 14:58-64, 2000.
3. N. Budhiraja, K. Marzullo, F. B. Schneider and S. Toueg. The primary-backup
approach. Distributed Systems(S. Mullender ed., ch. 8, 199-216, Addison-Wesley,
second ed., 1993.
4. X. Defago, A. Schiper and N. Sergent. Semi-Passive Replication. In Proc. of the
17th IEEE Symposium on Reliable Distributed Systems, pp. 43-50, 1998.
5. M. Fukuda, Y. Tanaka, N. Suzuki, L.F. Bic and S. Kobayashi. A Mobile-AgentBased PC Grid. In Proc. of the Fifth Annual International Workshop on Active
Middleware Services, pp. 142-150, 2003.
6. M. Herlihy and J. Wing. Linearizability: a correctness condition for concurrent
objects. ACM Transactions on Progr. Languages and Syst., 12(3):463-492, 1990.
7. K. Rothermel and M. Schwehm.
Mobile Agents.
In A.Kent and
J.G.Williams(Eds.):Encyclopedia for Computer Science and Technology, 40(25):155176, 1999.
8. M. Wiesmann, F. Pedone, A. Schiper, B. Kemme and G. Alonso. Understanding
Replication in Databases and Distributed Systems. In Proc. of the 21st International
Conference on Distributed Computing Systems, pp. 464-474, 2000.

