An Integrated Approach for QoS-Aware
Multicast Tree Maintenance
Wu-Hong Tsai1 and Yuan-Sun Chu2
1

Transworld Institute of Technology, Yunlin, 640 Taiwan
edward@tit.edu.tw
2
Chung Cheng University, Chiayi, 621 Taiwan
chu@ee.ccu.edu.tw

Abstract. To maintain the quality of multicast tree in supporting dynamic membership is critical important for the tree receivers. We propose
an integrated approach that combines core migration with local search to
aﬀord the receivers a consistent quality service. The main ideas behind
the thought are always migrate the core to the tree topological center
within limited overhead and provide multiple routes via local search for
a new receiver to meet its quality requirements. Our algorithm aims to
meet a predeﬁned upper bound delay along path to individual receiver
and satisfy the constraint of inter-destination delay variation among all
receivers. Simulation results show that our proposed algorithm performs
well in terms of constrains indicated above.
Keywords: integrated approach; core migration; receiver; multicast tree.

1

Introduction

Multicast communication sends same messages to multiple destinations using
shared links and eﬃciently uses resources such as bandwidth or buﬀer space. A
multi-point connection adopted by multicast communication is a virtual topology
which is usually a tree, called multicast tree. To construct a multicast tree in effectively supporting multimedia application such as video-conference or distancelearning has been widely researched. In particular, the research question of how
to build a multicast tree to minimize the total cost of multi-type data transmitting over network is critical important. The total cost is the aggregated cost of
all edges in the multicast tree that regards to tree performance. Multicast tree
are not expected to only provide eﬃcient usage of network resource, but also
support quality requirements, in terms of real-time delay bound and a bound
on the variation among the delays. For example, the participants in the videoconference want that all video frames are received smoothly (delay jitter) and
simultaneously (inter-destination delay variation).
The tree shape is an important factor for delivering quality service and is
aﬀected by the category of receiver groups. Based on the nature of group membership, multicast receiver groups are classiﬁed into two categories: static group
and dynamic group. With static group, the tree can be constructed in advance
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 673–680, 2007.
c Springer-Verlag Berlin Heidelberg 2007

674

W.-H. Tsai and Y.-S. Chu

to fulﬁll quality requirements for the group. Yet, the overall information about
network topology and the group size is required prior to tree construction. For
dynamic group, the tree is dynamically constructed as members join/leave the
group. Due to member’s movement, the service qualities are often degraded, even
though the tree is suitable for the group at ﬁrst.
Two types of multicast trees, named source-based tree and core-based tree,
have been considered to accommodate to quality requirements. In source-based
tree, as a member requests for receiving a speciﬁc source’s messages, it has to
graft a shortest path onto the multicast tree that rooted at the speciﬁc source.
And as a member joins multiple sources the multiple trees with shortest path
are grafted as well. The more the resource of nodes is consumed the more the
routing table of nodes is complicated. Instead of grafting onto multiple trees, a
core node and a single shared tree, deﬁned to be the union of the member-tocore shortest paths, is utilized in core-based tree (CBT) [1]. In CBT, messages
destined for the group are ﬁrst delivered to the core node, from which they
are distributed along tree branches to group members. The shared tree in CBT
reduces usage of resource and complications of routing table. Unfortunately, in
CBT, the core location/selection problem becomes another issue which aﬀects
the tree shape and service quality requirements. Our research aims to provide a
heuristic solution in resolving this important issue.
The rest of this paper is organized as follows. In Section 2, several related
researches are reviewed. In section 3, we deﬁne our research and propose a core
selection/migration method that minimizes inter-destination delay variation of
multicast tree. Simulation results are presented in Section 4 and some concluding
remarks are given in Section 5.

2

Background

The main issues associated with shared tree construction are core selection, paths
setup for new members, and tree maintenance for core migration and member
dynamics. The core location of a shared tree inﬂuences the performances of the
tree in terms of total tree cost and delays experienced by individual receivers.
The optimal core selection is an NP-complete problem and numbers of heuristics
have been proposed in previous researches. Whereas most of these proposed
heuristics require a completed topology and detailed membership exacted prior
to core selection, and without taking the quality of services (QoS) requirements
into account [2].
Ideally, while a new member requests to join a multicast group, multicast
routing protocols should have the ability to ﬁnd a feasible branch that connect
the new member to the available multicast tree if it exists. CBT [1] grafts a new
member to the multicast tree along the unicast routing path from core to the new
member. It is suitable for best-eﬀort traﬃc; however, in addition to consider QoS
requirements, such shortest-path tree would not be acceptable. A few QoS-aware
multicast routing protocols that use multiple branches searching method have
been proposed in Carlberg’s and Crowcroft’s research [3]. In their study, they
mainly propose multiple candidate paths for new member to join the existed

An Integrated Approach for QoS-Aware Multicast Tree Maintenance

675

tree; and use GREEDY [4] approach in handling the leaving member. Where
GREEDY [4] is, if the node being removed is a leaf node, then the branch of the
tree supporting only that node is pruned; and for the case of non-leaf nodes, no
action is taken.
However, in dynamic multicasting, continuous grafting and pruning degrades
the performance of multicast tree over the time [2]. And the problem of updating
a multicast tree to accommodate addition or deletion of nodes for the multicast
group can be modeled as the on-line Steiner Problem. The on-line Steiner Problem in network is ﬁrst presented by [4] and is an NP-complete problem as well.
In the extreme case, the problem can be solved as a sequence of static multicast
problem by rebuilding the tree at each stage using a static Steiner heuristic.
However, this approach is too expensive in the cost and is unsuitable for ongoing real-time multicast sessions which cannot tolerate the disturbance caused by
excessive change in the multicast tree after each addition or deletion.
Rouskas and Baldine [5] propose a source-based tree to meet the end-to-end
delay constraints and inter-destination delay variation constraints by extension
of path lengths. Wang et al. [6], based on shared tree, proposed an distributed
algorithm that core does not need global knowledge of network topology. Instead, core only maintains the information about agents (sub-tree’s root) and
the information of all the members is distributed among local agents.

3

Proposed Algorithm

The network is modeled as a simple, undirected, and connected graph G =
(V, E), where V is the set of nodes and E is the set of edges (or links). The nodes
represent the designated routers and the edges represent the network communication links connecting the routers. An edge e ∈ E connecting two adjacent
nodes u and v will be denoted by (u, v). Each edge e has two non-negative
metrics associated with it: a cost function C(e) = C(u, v) represents the utilization of the link, and a delay function D(e) = D(u, v) represents the delay that
the packet experiences through passing that link including switching, queuing,
transmission and propagation delays. A path P (v0 , vn ) = (v0 , v1 , · · · , vn ) in the
n−1
network, has two associated characteristics: C(P (v0 , vn )) =
i=0 C(vi , vi+1 )
n−1
and D(P (v0 , vn )) = i=0 D(vi , vi+1 ).
We denote VT ⊂ V as a set of routers to which hosts that belong to a multicast
group are attached. For simplicity, we call the set VT a multicast group with each
router v ∈ VT as a group member.1 A multicast tree T = (VT , ET ), which is a
subgraph of G that spans all the nodes in VT and has no cycles, has an associated
cost deﬁned as C(T ) = e∈ ETC(e).
Given a tree T and two nodes u and v belonging to this tree, we will let
PT (u, v) denote the path between u and v in this tree. Then, the delay and cost
of this path are respectively denoted as D(PT (u, v)) and C(PT (u, v)). Let nodes
vi and vj are the farthest and the nearest node away u, respectively, where u,
1

Actually the multicast group should be the set of hosts that are directly attached to
routers in VT .

676

W.-H. Tsai and Y.-S. Chu

vi , and vj are all in VT . We denoted by δ(u) = D(PT (u, vi )) − D(PT (u, vj )) the
inter-destination delay variation of the node u.
Let R = {r1 , r2 , . . . , rk } be a sequence of requests, where ri is either adding
or removing a destination node to or from the multicast group. Let VTi be the
set of nodes in the multicast group after request ri has been completely made.
In response to ri , we also let Ti and ui ∈ VTi be the multicast tree spanning VTi
and the core of the tree Ti , respectively.
There are two parameters are deﬁned to characterize the quality of the tree as
perceived by application performing the multicast. These parameters relate the
end-to-end delays along individual core-destination paths to the desired level of
QoS.
– Delay tolerance, Δ: Parameter Δ represents an upper bound on the acceptable end-to-end delay along any path from the core to a destination node.
This parameter reﬂects the fact that the information carried by multicast
packets become stale Δ time units after its transmission at the core.
– Inter-destination delay variation tolerance, δ(u): This is the maximum allowed diﬀerence in end-to-end delay between the paths from the node u
(core) to its farthest and nearest nodes which are in the set VT . In essence,
this parameter is used to insure that no one is left behind and that none is
far ahead in receiving the same data among the various receivers.
Problem 1. Given a network G = (V, E), a delay tolerance Δ, a shared tree
T0 , rooted at u0 , which is a subgraph of G, and a request sequence R =
{r1 , r2 , . . . , rk }. With respect to request ri been made, the sequence of multicast tree {T1 , T2 , . . . , Tk } is constructed, in which Ti spans VTi . After tree Ti
constructed, ﬁnd a node ui ∈ VTi satisﬁes the following conditions:
1. Tree Ti has minimum inter-destination delay variation. Formally,
ui ∈ VTi δ(ui ) = minvj ∈VTi δ(vj ) .
2. The delay of path PTi (ui , v) fulﬁlls the delay tolerance Δ. That is,
D(PTi (ui , v)) ≤ Δ, ∀ v ∈ VTi .
3. After the above two conditions have been satisﬁed, the tree Ti has minimum
cost.
This problem is known to be NP-Complete since it reduces to the standard
Steiner tree problem [5,7].
Please refer to Appendix A for detailed description of our approach and we
brieﬂy describe it in the rest of this section. We assume that a shared tree
T , rooted at node u (core), has been constructed at the beginning. The nodes
that those are already on-tree nodes maintain their own table T D.The ﬁelds
of T D are Branch indicated the branch connecting to neighboring node and
AccumulatedDelay indicated the accumulated delay of the farthest leaf node
along Branch. We also assume that each node in network knows the delays that
messages pass through adjacent branches to neighboring nodes. While GRAFT
message is sent to an on-tree node vj , it calculates the accumulated delay along
the joining path, and decides whether to send an UPDATE message to upstream
node of itself or not.

An Integrated Approach for QoS-Aware Multicast Tree Maintenance

677

The PRUNE message is only sent by leaf nodes, and is terminated at a node
which has the other branch in T D or is a member, too. When node vj receives
a PRUNE message, it determines its own table T D to verify whether maximum
delay is replaced, then an UPDATE message is consequently sent to its upstream
node. On the other hand, a PRUNE message is sent to upstream node of vj , if
there is no any record in T D.
According to the new arrival UPDATE message, a node vj may update its
corresponding recode in T D. If the maximal AccumulatedDelay is changed and
vj is not the core, then an UPDATE message is sent to upstream node, again. The
above process is continued until the core u receiving an UPDATE message. The
core calculates the diﬀerence between ﬁrst and second maximal accumulated
delay in T D, and it decides whether migration process is proceed or not. If
migration is necessary for best quality requirements, the core u sends MIGRATE
message along the branch toward the farthest node. However, each node which
receives MIGRATE message is just a candidate of core. The candidate also
calculates the next node along maximal delay path until no more better results.
Consequently, the candidate core becomes the new core and sends a NOTIFY
message to all the source nodes of multicast tree T .

4

Simulation Model and Results

In generating random graphs, we adopt the method used by Waxman [4], where
vertices are placed randomly in a rectangular coordinate grid by generating uniformly distributed values for their x and y coordinates. The probability function
−d(u, v)
P (u, v) = βe 2αn and a random number 0 ≤ r < 1 are used to decide that
whether an edge exists between node u and v or not. Where d(u, v) is denoted as
their Euclidean distance, α and β are tunable parameters, and n is the number
of nodes in the graph. Increasing α increases the number of connections between
far oﬀ nodes and increasing β increases the degree of each node.
To generate addition or deletion requests for our simulation, we have used the
probabilistic model employed in [4]. In a network of size N , let k represent the
number of nodes in the multicast tree. Then, the probability of an add-request
γ(N −k)
, where γ is a constant
is given by the expression P rob(add) = γ(N −k)+(1−γ)k
in the range (0, 1]. The value of γ determines the equilibrium point at which
k
, the
the probability of an add or delete request is equally likely. When γ = N
above expression takes a value of 0.5. The probability that a request will be a
delete-request is given by P rob(del) = 1 − P rob(add).
Our simulation studies were conducted on a set of 100 random networks. Values of α = 0.2 and β = 0.2 were used to generate networks with average degree
ranging between 3 and 4. Each random network received a total of 30 update
requests. These requests were generated based on the probabilistic model using a
value of γ = 0.3. Two performance measures, namely maximum inter-destination
variation and cost of multicast tree, are used to evaluate the performance of the
algorithms. The performance of the algorithms are also evaluated over two parameters, which are: number of network nodes and multicast group size.

W.-H. Tsai and Y.-S. Chu
1

1.1

0.95

1.05

0.9

1

0.85

0.95

0.8

Ratio

Ratio

678

0.75

0.9
0.85

0.7

0.8

0.65

0.75

0.6

0.7

Ratio of Total Cost of Tree
Ratio of Delay Variation

0.55

Ratio of Total Cost of Tree
Ratio of Delay Variation

0.65
20

40
60
80
100
Nodes (Number of members is 30% nodes)

(a) Diﬀerent number of nodes
(group size 30%)

120

5

10

15
20
Group Size % (100 nodes)

25

30

(b) Diﬀerent number of group size
(nodes 100)

Fig. 1. Performance comparisons for inter-destination delay variation

Fig. 1(a) shows the results for diﬀerent number of network nodes, which ranges
from 20 to 120 in steps 10 while group size are kept constant at 30% of network
nodes. Fig. 1(b) shows the results for diﬀerent number of group size, ranging
from 5 to 30 in steps 5 while network size are kept constant at 100. It is easy to
see that our algorithm is able to generate solutions with smaller inter-destination
delay variation than SPT’s algorithm.

5

Conclusions

In this paper, we provide the solution to multicast trees construction with the
guarantees that the end-to-end delays from the core to the destination modes
and the variation among these delays are within a given bound constrain. And
our resolution is able to minimize total tree costs as well. The problem of constructing such trees is NP-complete. In comparing with SPT’s algorithm, our
heuristic exhibits good average case behavior, eases of implement, and does not
need global network information during tree construction. Our heuristic does
not take end-to-end delay bounds into account since satisfaction of the interdestination delay variation is the most important consideration in our strategy.
However, our heuristic is ﬂexible in modiﬁcation to cope with the end-to-end delay bound requirement in many ways such as the method proposed in Rouskas’s
and Baldine’s research [5]. The analysis of data losing rate during the core migration process should be explored more in the future research.

References
1. Ballardie, T., Francis, P., Crowcroft, J.: Core-based trees (CBT): An architecture
for scalable inter-domain multicast routing. ACM SIGCOMM Computer Communication Review 23 (1993) 85–95
2. Donahoo, M.J., Zegura, E.W.: Core migration for dynamic multicast routing. In:
Proceedings of the Fifth International Conference on Computer Communications
and Networks (ICCCN ’96). (1996) 92–98

An Integrated Approach for QoS-Aware Multicast Tree Maintenance

679

3. Carlberg, K., Crowsroft, J.: Building shared trees using a one-to-many joining
mechanism. ACM SIGCOMM Computer Communication Review 27 (1997) 5–11
4. Waxman, B.M.: Routing of multipoint connections. IEEE Journal of Selected Areas
in Communications 6 (1988) 1617–1622
5. Rouskas, G.N., Baldine, I.: Multicast routing with end-to-end delay and delay
variation constraints. IEEE Journal of Selected Areas in Communications 15 (1997)
346–356
6. Wang, T.Y., Wuu, L.C., Huang, S.T.: A scable core migration protocol for dynamic
multicast tree. Journal of Information Science and Engineering 19 (2003) 479–501
7. Kompella, V., Pasquale, J., Polyzos, G.: Multicasting for Multimedia Applications.
In: Proc. IEEE INFOCOM ’92, Florence, Italy (1992) 2078–2085

Appendix A
main()
waiting for a control message r
switch r.type
case GRAFT; join()
case PRUNE; leave()
case UPDATE; update()
case MIGRATE; migrate()
end r.type
end main
join()
N ewAccumulatedDelay ⇐ r.AccumulatedDelay + DownstreamDelay
if N ewAccumulatedDelay > max (T D.AccumulatedDelay) then
r.type ⇐ UPDATE
r.AccumulatedDelay ⇐ N ewAccumulatedDelay
send(upstream(self ), r)
end if
T D.Branch ⇐ T D.Branch ∪ r.Branch
T D.Branch(r).AccumulatedDelay ⇐ N ewAccumulatedDelay
end join
leave()
N ewAccumulatedDelay ⇐ r.AccumulatedDelay + DownstreamDelay
if N ewAccumulatedDelay == max (T D.AccumulatedDelay) then
T D.Branch ⇐ T D.Branch − r.Branch
if T D.Branch = ∅ then
r.type ⇐ UPDATE
r.AccumulatedDelay ⇐ max (T D.AccumulatedDelay)
send(upstream(self ), r)
else
r.type ⇐ PRUNE
r.AccumulatedDelay ⇐ N ewAccumulatedDelay
send(upstream(self ), r)
end if

680

W.-H. Tsai and Y.-S. Chu

end if
end leave
update()
N ewAccumulatedDelay ⇐ r.AccumulatedDelay + DownstreamDelay
OldM axDelay ⇐ max (T D.AccumulatedDelay)
if N ewAccumulatedDelay > T D.Branch(r).AccumulatedDelay then
T D.Branch(r).AccumulatedDelay ⇐ N ewAccumulatedDelay
end if
if OldM axDelay < max (T D.AccumulatedDelay) then
if self = core then
r.type ⇐ UPDATE
r.AccumulatedDelay ⇐ max (T D.AccumulatedDelay)
send(upstream(self ), r)
else
M axDelay ⇐ max (T D.AccumulatedDelay)
SecM axDelay ⇐ secondly maximum in T D.AccumulatedDelay
BranchDelay ⇐ the delay of branch toward farthest member
if (M axDelay − SecM axDelay)/ 2 > BranchDelay then
r.type ⇐ MIGRATE
r.AccumulatedDelay ⇐ SecM axDelay
send(maxdownstream(self ), r)
end if
end if
end if
end update
migrate()
N ewAccumulatedDelay ⇐ r.AccumulatedDelay + U pstreamDelay
T D.Branch(r).AccumulatedDelay ⇐ N ewAccumulatedDelay
M axDelay ⇐ max (T D.AccumulatedDelay)
SecM axDelay ⇐ secondly maximum in T D.AccumulatedDelay
BranchDelay ⇐ the delay of branch toward farthest member
if (M axDelay − SecM axDelay)/ 2 > BranchDelay then
r.type ⇐ MIGRATE
r.AccumulatedDelay ⇐ SecM axDelay
send(maxdownstream(self ), r)
else
r.type ⇐ NOTIFY
send(source(T ), r)
end if
end migrate

