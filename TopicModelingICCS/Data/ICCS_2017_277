Available online at www.sciencedirect.com

ScienceDirect
This Procedia
space is reserved
for 108C
the Procedia
header,
Science
(2017) 2121–2130
This space isComputer
reserved
for the Procedia
header,
This space is reserved for the Procedia header,
This space is reserved for the Procedia header,

do
do
do
do

not
not
not
not

use
use
use
use

it
it
it
it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Using
Using Cognitive
Cognitive Computing
Computing for
for Learning
Learning Parallel
Parallel
Using
Cognitive
Computing
for
Learning
Parallel
Programming:
An
Solution
Using
Cognitive Computing
for Learning
Parallel
Programming:
An IBM
IBM Watson
Watson
Solution
Programming:
An
IBM
Watson
Solution
Adrián Calvo Chozas,
Suejb
Memeti,
and Sabri
Pllana
Programming:
An
IBM
Watson
Solution
Adrián Calvo Chozas, Suejb Memeti, and Sabri Pllana
Linnaeus
University,
Växjö
351 95,and
Sweden
Adrián Calvo
Chozas,
Suejb
Memeti,
Sabri Pllana
Linnaeus
University,
Växjö
351 95,and
Sweden
Adrián Calvo
Chozas,
Suejb
Memeti,
Sabri Pllana
ac222ne@student.lnu.se
Linnaeusac222ne@student.lnu.se
University,
Växjö 351 95, Sweden
suejb.memeti@lnu.se
Linnaeusac222ne@student.lnu.se
University,
Växjö 351 95, Sweden
suejb.memeti@lnu.se
sabri.pllana@lnu.se
ac222ne@student.lnu.se
sabri.pllana@lnu.se
suejb.memeti@lnu.se
suejb.memeti@lnu.se
sabri.pllana@lnu.se
sabri.pllana@lnu.se

Abstract
Abstract
While modern parallel computing systems provide high performance resources, utilizing them
While
modernextent
parallel
computing
systems
provide high
performance
resources,
Abstract
to
the highest
requires
advanced
programming
expertise.
Programming
forutilizing
parallel them
comAbstract
to
the
highest
extent
requires
advanced
programming
expertise.
Programming
for
parallel
comWhile modern
systems
high performance
resources,
utilizing
them
puting
systemsparallel
is muchcomputing
more difficult
thanprovide
programming
for sequential
systems.
OpenMP
is
While
modern
parallel
computing
systems
provide
high
performance
resources,
utilizing
them
puting
systems
is
much
more
difficult
than
programming
for
sequential
systems.
OpenMP
is
to the
highestofextent
advanced
programming
expertise.
Programming
parallel
coman
extension
C++ requires
programming
language
that enables
to express
parallelismforusing
compiler
to
the
highest
extent
requires
advanced
programming
expertise.
Programming
for
parallel
coman
extension
of
C++
programming
language
that
enables
to
express
parallelism
using
compiler
puting systems
is OpenMP
much more
difficultparallel
than programming
systems.
is
directives.
While
alleviates
programmingforbysequential
reducing the
lines ofOpenMP
code that
puting
systems
is OpenMP
much more
difficult
than programming
forby
sequential
systems.
is
directives.
While
alleviates
parallel
programming
reducing
the
lines
ofOpenMP
code
an extension
of C++
language
to
express
using
compiler
the
programmer
needsprogramming
to write,
deciding
howthat
andenables
when to
use
theseparallelism
compiler
directives
isthat
up
an
extension
of
C++
programming
language
that
enables
to
express
parallelism
using
compiler
the
programmer
needs
to
write,
deciding
how
and
when
to
use
these
compiler
directives
is
up
directives.
While OpenMP
parallel
by reducing
lines
of code that
to
the programmer.
Novicealleviates
programmers
mayprogramming
make mistakes
that maythe
lead
to performance
directives.
Whileneeds
OpenMP
alleviates
parallel
by reducing
the
lines
of code isthat
to
programmer.
Novice
programmers
mayprogramming
make
mistakes
that
lead
to
performance
thethe
programmer
to write,
deciding
how
and
when
to
use
thesemay
compiler
directives
up
degradation
or unexpected
program
behavior.
Cognitive
computing
has
shown
impressive
rethe
programmer
needs
to
write,
deciding
how
and
when
to
use
these
compiler
directives
is up
degradation
or
unexpected
program
behavior.
Cognitive
computing
has
shown
impressive
to theinprogrammer.
Novice
programmers
make mistakes
may
to performance
sults
various domains,
such
as health ormay
marketing.
In this that
paper,
welead
describe
the use reof
to
theinprogrammer.
Novice
programmers
make mistakes
that
may
lead
to performance
sults
various
domains,
such
aseducation
health
ormay
Incomputing
this
paper,
describe
the
use reof
degradation
or
unexpected
program
behavior.
Cognitive
hasweshown
IBM
Watson
cognitive
system
for
ofmarketing.
novice
parallel
programmers.
Usingimpressive
the
dialogue
degradation
or
unexpected
program
behavior.
Cognitive
computing
has
shown
impressive
reIBM
Watson
cognitive
system
for
education
of
novice
parallel
programmers.
Using
the
dialogue
sults inofvarious
domains,
as health
or marketing.
this
paper,
describe the
use of
service
the IBM
Watsonsuch
we have
developed
a solution In
that
assists
thewe
programmer
in avoidsults
inofvarious
domains,
such
aseducation
health or ofmarketing.
In
this
paper,
describe
the
use of
service
theOpenMP
IBM
Watson
we for
have
a solution
that
assists
thewe
programmer
in
avoidIBMcommon
Watson
cognitive
system
novice
parallel
Using
the
dialogue
ing
mistakes.
To developed
evaluate our
approach
weprogrammers.
have conducted
a survey
with
a
IBM
Watson
cognitive
system
for
education
of
novice
parallel
programmers.
Using
the
dialogue
ing
common
OpenMP
mistakes.
To
evaluate
our
approach
we
have
conducted
a
survey
with
service ofofthe
IBMparallel
Watsonprogrammers
we have developed
solution University,
that assists and
the programmer
in avoid-a
number
novice
at the aLinnaeus
obtained encouraging
service
ofofthe
IBMparallel
Watson
we have
developed
aLinnaeus
solution
that
the programmer
in with
avoid-a
number
novice
programmers
at
theour
University,
and
obtained
encouraging
ing common
OpenMP
To
evaluate
approach
weassists
have conducted
a survey
results
with
respect
to mistakes.
usefulness
of our
approach.
ing
common
OpenMP
mistakes.
To
evaluate
our
approach
we
have
conducted
a
survey
with
a
results
with
respect
to
usefulness
of
our
approach.
number of novice parallel programmers at the Linnaeus University, and obtained encouraging
Keywords:
Cognitive
Computing,
Parallel
Programming
Education,
IBM
Watson,
OpenMP
number
of
novice
parallel
programmers
at
the
Linnaeus
University,
and
obtained
encouraging
©
2017
The
Authors.
Published
by
Elsevier
B.V.
results
with
respect Computing,
to usefulness
of ourProgramming
approach. Education, IBM Watson, OpenMP
Keywords:
Cognitive
Parallel
Peer-review
under
responsibility
of the scientific
of the International Conference on Computational Science
results with
respect
to usefulness
of ourcommittee
approach.
Keywords: Cognitive Computing, Parallel Programming Education, IBM Watson, OpenMP
Keywords: Cognitive Computing, Parallel Programming Education, IBM Watson, OpenMP

1 Introduction
1 Introduction
1
Introduction
The modern
parallel computing systems provide capabilities to solve complex computational
1
Introduction
The
modern
parallel
computing
systems
provide capabilities
to solve complex
and engineering
problems
[23] faster.
Programming
for parallel computing
systemscomputational
is much more

and
engineering
problems
[23]for
faster.
Programming
for[22,
parallel
computing
systemscomputational
is much more
The
modern
computing
systems
provide
capabilities
to solve it
complex
complex
thanparallel
programming
sequential
processors
16], because
requires
knowledge
of
The
modern
parallel
computing
systems
provide
capabilities
to solve it
complex
computational
complex
than
programming
for
sequential
processors
[22,
16],
because
requires
knowledge
of
and
engineering
problems
[23]
faster.
Programming
for
parallel
computing
systems
muchdevice
more
the underlying parallel architecture and the programming models libraries (that areisoften
and
engineering
problems
[23]for
faster.
Programming
for[22,
parallel
computing
systems
isoften
muchdevice
more
the
underlying
parallel
architecture
and
the
programming
models
libraries
(that
are
complex
than
programming
sequential
processors
16],
because
it
requires
knowledge
of
specific), and consideration of large amount of device specific configuration parameters (such
complex
than
programming
forlarge
sequential
processors
[22,
16], because
it requires
knowledge
of
specific),
and
consideration
of
amount
of
device
specific
configuration
parameters
(such
the
underlying
parallel
architecture
and
the
programming
models
libraries
(that
are
often
device
as, numbers of cores, core speed, memory hierarchy level, cache, run-time system, etc) [21].
the
underlying
parallel
architecture
and
the
programming
models
libraries
(that
are
often
device
as,
numbers
cores,
core speed,
memory
hierarchy
level,
cache,configuration
run-time
system,
specific),
andofconsideration
of large
amount
ofofdevice
specific
parameters
(such
To
alleviate
the programmability
challenges
parallel
computing
systems
[12,
2,etc)
25], [21].
various
specific),
andofconsideration
of large
amount
ofofdevice
specific
configuration
parameters
(such
To
alleviate
the
programmability
challenges
parallel
computing
systems
[12,
2,
25],
various
as,
numbers
cores,
core
speed,
memory
hierarchy
level,
cache,
run-time
system,
etc)
[21].
parallel programming models and languages [5] are proposed, including OpenMP, OpenACC,
as,
numbers
of
cores,
core
speed,
memory
hierarchy
level,
cache,
run-time
system,
etc)
[21].
parallel
programming
models and languages
proposed,
including
OpenMP,
OpenACC,
To alleviate
the programmability
challenges[5]ofare
parallel
computing
systems
[12, 2, 25],
various
To alleviate
the programmability
challenges[5]ofare
parallel
computing
systems
[12, 2, 25],
various
parallel
programming
models and languages
proposed,
including
OpenMP,
OpenACC,
1
parallel programming models and languages [5] are proposed, including OpenMP, OpenACC,
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
1
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
1
10.1016/j.procs.2017.05.187

2122	

Using Cognitive Computing
for Learning
Parallel
A. C.108C
Chazos,
Adrián
Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)S.Memeti,
2121–2130and S. Pllana

MPI, Pthreads, OpenCL, Cuda, and Intel TBB. While these approaches have helped to significantly reduce the programming effort, writing more complex code requires more effort, advanced
knowledge of parallel algorithms and underlying architecture and is more prone to mistakes that
may lead to incorrect program behavior or performance degradation [8]. To efficiently utilize the
available resources on the modern parallel computing systems, programmers require adequate
education [3].
OpenMP (Open Multi-Processing) is an Application Program Interface (API) that comprises a set of compiler directives, variables and library functions to program parallel computing systems. OpenMP is implemented as language extension of C, C++ and Fortran [4]
for shared-memory parallel computing systems, and recent versions of OpenMP support also
the heterogeneous computing systems. The main goal of OpenMP is to reduce the difficulty
of writing parallel applications. It does that by using compiler directives, known as pragmas.
However, it is up to the programmer to decide how and when to use these directives. Even
though, the available documentation suggests that using OpenMP is simple and easy, Gonçalves
et al. [8] show that using OpenMP is not as easy as it appears, and such suggestions may lead
to code that provides incorrect results or poor performance [17, 18]. Furthermore, Kolosov et
al. [13] and Süß et al. [24] has identified a number of commonly made OpenMP mistakes, and
they have categorized them in logical and performance related errors.
Cognitive systems [15] are on the verge of becoming a milestone due to their ability to process
natural language processing (NLP). This enables a whole new level of interaction between
humans and computing systems, which may help people make better decisions. IBM Watson
[6] is a cognitive system that uses the natural language to receive and answer questions. It
is able to handle unstructured data, which composes 80% of the data available on the Web.
IBM Watson learns a new subject by storing all the documents related to the topic on its own
database, in which it later searches for the most suitable answer. Recently various solutions
based on the IBM Watson have demonstrated impressive results [14]. For example, in 2011
the Watson Dialog service won at Jeopardy against two human former winners. Then, in 2012
Watson helped oncologists to extract valuable information to treat patients. Standard Bank is
using Watson to solve customers’ queries. The American Cancer Society is using Watson to
provide better answers to patients.
In this paper, we describe the use of cognitive computing to aid novice programmers learn
parallel programming. We have developed an application based on the IBM Watson services
that enables a dialog-based interaction with programmers during program development. Our
solution is focused on helping novice programmers to avoid commonly made mistakes when they
use OpenMP. We have implemented our solution to support interaction with the programmer
in English and Spanish. Furthermore, we have conducted a survey to evaluate the usability of
our solution. The results of the survey indicate that the developed application offers valuable
answers that would be helpful for novice parallel programmers.
The key contributions of this paper are:
• A multi-language IBM Watson application that aids novice programmers to learn parallel
programming with OpenMP,
• Evaluation of usability of our IBM Watson application.
The rest of the paper is organized as follows. In Section 2 we discuss the related work.
Section 3 describes the methodology and implementation details. In Section 4 we first describe
the context of the conducted survey, thereafter we discuss the results of the survey. We conclude
our paper and provide future research directions in Section 5.
2

	

Using Cognitive ComputingAdrián
for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,
and S. Pllana
Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130

2

Related Work

Goel et al. [7] used different Watson services to develop six diverse applications that aim at
understanding the functionality and capabilities of Watson and enhancing the human-computer
co-creativity. By developing these diverse applications the authors argue that Watson has
potential to be used in different domains, and has large range of opportunities to be used as an
educational tool.
Witte et al. [26] uses natural language processing to bring new levels of support to software developers. A plug-in that is integrated in the Eclipse IDE is developed, which provides
quality analysis of the comment found in source code and version control commits. The aim
of this project is to help software developers reduce the effort required to analyze their code
by extracting useful information that might be valuable to understand the functionality of the
application that is not always obvious by looking at the source code only.
An interactive tool for parallelization of OpenMP sequential programs is proposed by Ishihara et al. [11]. This tool provide four types of assistance to the developers, including analysis of
the parallelism, identification of candidate parallel sections, enhancing the parallelism through
code restructuring, and analysis of the execution time.
Harms [9] proposes an approach that is able to monitor and understand the programming
skill level of the developer and adaptively suggest code examples that may help to learn new
programming concepts found within the suggested examples. The author argues that this
approach avoid overwhelming the memory of novice programmers by considering the previous
knowledge of the programmer and carefully suggesting examples that contain new information.
Sah and Vaidya [20] review, discuss characteristics and classify existing parallelization tools
based on: (1) the time the tools were developed (before or after the multicore era); (2) their
contribution during the parallelization process, and (3) the ability to provide assistance for
parallel programming. Furthermore, they propose their parallel programming tool that assist
developers during the software development time.
In contrast to the related work, we use cognitive computing to assist programmers in avoiding
common logical and performance mistakes. Our solution is based on the IBM Watson dialogue
service and focuses on OpenMP.

3

Our methodology

In this section first we will describe the design of our approach thereafter we will provide some
implementation details.

3.1

Design

Our application is based on the IBM Watson Dialog service to provide communication means
between the user and the system through natural language processing with the aim to avoid
common OpenMP mistakes. The architecture overview of our application is depicted in Figure
1. The users interact with our application using an interface, which allows them to write
questions in text form. The user that will presumably be a parallel programmer will use
the interface to ask a question related to parallel programming. Please note that as is usual in
natural language, the question can be formulated in several ways. For accessibility, the interface
may be enhanced with voice recognition or connected to some kind of integrated development
environment.
3

2123

Back-end System

Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130and S. Pllana
Using Cognitive ComputingAdrián
for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,

Dialog Service

Users

Interface

2124	

Application

Other Services

Figure 1: Architecture overview
Prepare
Data

Design
dialog
flows

Push live
to users

Iterate,
optimize,
add content

Figure 2: An overview of the Watson Dialog Service
The interface sends the user input to our application, which is connected to the Watson
Dialog Service. The dialog service analyzes the questions and gathers information that it needs
to provide the most suitable answer for the user. To extend the functionality of our application,
one can connect the application to additional services such as speech-to-text services.
The application is connected to a back-end system that is responsible to display the answer
of the question to the user. At this point, the application has the answer for the user. There are
two scenarios, (1) the question has been understood and application provides a proper answer
to the user, and (2) the question has not been understood and a default message saying “I am
sorry, I did not understand your question. Please try another question.”is provided to the user.
The overview of the IBM Watson dialog service is illustrated in Figure 2. The dialog service
provides means for communication between computers and the users in a question-and-answer
fashion through natural language. To use this service, first the training data should be gathered
and prepared by an expert. As our aim is to provide a tool that aids novice parallel programmers
write parallel code using OpenMP, we considered to use as training data the common OpenMP
mistakes identified by Kolosov et al. [13] and Süß et al. [24]. By the time of writing this paper,
there are 32 commonly identified mistakes 1 , however due to space limitations we have listed
only some of them in Table 1.
The gathered data should be translated into dialog models that is part of the dialog flow
design process. For instance, the common OpenMP mistake where programmers redefine the
number of threads within a parallel loop, will be translated in a dialog fashion where the input
would be like: Can I change a variable inside a pragma omp loop?. Figure 3 depicts the
interaction with the programmer in English and Spanish.
The push live to users enables the connection of the dialog service with the user interface,
and monitoring the conversations. The last component enables dynamic learning from real
interactions by adjusting the existing content and adding new one based on the user activity.

3.2

Implementation Details

In order to build an application that uses IBM Watson Dialog service the developer needs to
specify the mandatory settings for the service as shown in the Listing 1. For example, the
1 The list of all 32 identified OpenMP mistakes can be found in: https://software.intel.com/en-us/articles/32openmp-traps-for-c-developers

4

	

Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130and S. Pllana
Using Cognitive ComputingAdrián
for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,

Table 1: Common OpenMP mistakes identified by Kolosov et al. [13] and Süß et al. [24].
Performance errors

Reason

Unnecessary flush

If flush directive is used without parameters, it can reduce the performance of the program.
The atomic directive is faster than critical. When atomic cannot be
used, the compiler will not allow the programmer to use it.
Local thread variables should not be protected from concurrent writing
It is known that critical regions reduce the performance of the program
so using critical is generally not recommended.

Using critical instead of atomic
Unnecessary protection from concurrent memory write
Overwork in a critical region
Logical errors

Reason

Missing /openmp

If OpenMP is not enabled in the compiler settings, the OpenMP directives will be ignored
If the programmer forgets to put the parallel keyword, the code will
run sequentially
If omp keyword is forgotten the entire pragma will be ignored
If the programmer want to divide a loop into n threads and for is
forgotten, the program will not split up the work into those n threads
If the programmer puts the parallel keyword inside a parallel section,
the loop will be run n times
If the ordered directive is not correctly indicated, the compiler will
decide to order randomly
Attempts to change the number of threads within a parallel region
will result with run-time errors.
According to the specification, to lock a variable it first needs to be
initialized
Locks set from one thread will cause unpredictable run-time behavior
if unset from another thread
If the result depends on previous iterations, order clause is compulsory
in order for it not to have unexpected behaviour.
When several threads are modifying a variable the result is unpredictable.

Missing parallel
Missing omp
Missing for
Unnecessary parallelization
Incorrect usage of ordered
Redefining the number of threads in a
parallel section
Lock a variable without initializing it
Unsetting locks from another thread
Parallel array without order
Access to a share memory without protection

(a) English

(b) Spanish

Figure 3: Example of interaction with the programmer in English and Spanish
AUTOLEARN (see line 4) setting allows the dialog to suggest another node when the input
does not match. The LANGUAGE (see line 3) setting allows the user to determine the account
language. Please note that we show only an excerpt of all possible settings, for the full list of
available setting we refer the reader to the Watson Dialog Service documentation [10].
Listing 1: An example of settings configuration of the Dialog Service
<s e t t i n g s >
< s e t t i n g name=”DISPLAYNAME” t y p e=”USER”> t e s t </ s e t t i n g >
< s e t t i n g name=”LANGUAGE” t y p e=”USER”>EN</ s e t t i n g >
< s e t t i n g name=”AUTOLEARN” t y p e ”USER”> f a l s e </ s e t t i n g >
...
</ s e t t i n g s >

1
2
3
4
5
6

5

2125

2126	

Using Cognitive ComputingAdrián
for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,
Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130and S. Pllana

The main characteristic of the Dialog service is the dialog tag, which has a mandatory child
named flow that is responsible for the content of the dialog because it includes the main libraries
(see Listing 2). The flow tag may have a child named folder that is used to allocate, organize
and maintain the information in the dialog. There are four types of folders, Main, Library,
Global, and Concepts.
Listing 2: An example of the dialog tags
<d i a l o g . . . x s i : noNamespaceSchemaLocation=”WatsonDialogDocument 1 . 0 . xsd”>
<f l o w >
< f o l d e r l a b e l =”Main”>
...

1
2
3
4

The Main folder stores the welcome messages, whereas the Library folder stores the core
of the dialog such as, the input (an example of the input node is shown in Listing 3), output,
structures, and other valuable information. Each question is represented as an input node of
the dialog service, where each node has a child grammar node, and the grammar node must
have at least one child item node (see Listing 3). As the dialog service is based on natural
language, each question may have multiple variations. We can configure these variations by
adding multiple items inside the grammar. The first item represents the primary variation of
the question. We can have multiple variations by using the wildcards $ (dollar sign) and ∗
(asterisk). When the dollar sign is used the question becomes more open as the user can type
down the question in multiple ways, however the question must be followed by the first verb
after the dollar sign (see Line 4 Listing 3). The questions could be: “Is it possible to change a
variable inside a loop? ”, or “May I to change a variable inside a loop? ”. When the asterisk is
in use it means that the place corresponding to the asterisk can be changed for another suitable
word (see Line 5 Listing 3), for example: “Can I change the number of threads ...? ”, or “Is
it possible to change all of the threads ...? ”.
Listing 3: An example of the input node of the IBM Watson Dialog Service
<i n p u t >
<grammar>
<item>Can I change a v a r i a b l e i n s i d e a pragma omp l o o p ?</item>
<item >\$ Change a v a r i a b l e i n s i d e a l o o p ?</item>
<item>change ∗ v a r i a b l e ∗ l o o p </item>
</grammar>
</i n p u t >

1
2
3
4
5
6
7

The output tag is a child of the input and is used to store the answers of the corresponding
question.For example, the corresponding answer to the question variations represented in the
input node in Listing 3 would be “It is explicitly forbidden to change the variable from inside
the loop.”, and the corresponding xml node is shown in Listing 4
Listing 4: An example of the output tags
<output>
<prompt s e l e c t i o n T y p e=”RANDOM”>
<item>I t i s e x p l i c i t l y f o r b i d d e n t o change t h e l o o p v a r i a b l e . . . < / item>
</prompt>
</output>

1
2
3
4
5

If the system does not understand the question or it does not have a proper answer, the
system will display a default message that could be customized using the default node (see
Listing 5).
6

	

Using Cognitive ComputingAdrián
for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,
Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130and S. Pllana

Listing 5: An example of the system’s default answer when no suitable response is found
<default>
<output>
<prompt s e l e c t i o n T y p e=”RANDOM”>
<item>I d i d not u n d e r s t a n d t h e q u e s t i o n . P l e a s e t r y a g a i n . </ item>
</prompt>
</output>
</default>

1
2
3
4
5
6
7

Please note that from September 2016 IBM has retired the Dialog service, which disallows
creation of new instances of this service. However, existing instances will continue to work until
August 2017. An equivalent service, so called Conversation service has been introduced, and
developers are encouraged to migrate their Dialog service based applications to the Conversation
service.

4

Evaluation

To evaluate the usefulness of our approach we have conducted an anonymous survey within the
Linnaeus University campus. The target group that we have surveyed includes bachelor students
from the department of computer science that have little knowledge in parallel programming.
In total, eight novice parallel programmers have accepted to take part on the survey. The
process of selection of candidates, data collection and analysis, and reporting is adapted from
the guidelines presented by Runeson and Höst [19].
The aim of this survey is to investigate whether such interactive tools would help novice
programmers solve parallel programming problems as well as identify ways to improve our
tool. To keep the survey simple, and to avoid survey fatigue of our respondents, which usually
happens because surveys are too long and include non-relevant questions, we have defined a
survey with only four questions. Table 2 lists the questions of our survey.
To measure the performance quality of our tool we have used the Likert [1] scale system
to allow respondents to rank the quality of our tool, where participants could choose answers
between one and 5 stars, where One star stands for Strongly disagree, Two stars stands for
Somewhat disagree, Three stars means Neither agree nor disagree, Four stars means Somewhat
agree, and Five stars stands for Strongly agree.
The results of the survey are depicted in Figure 4. The x-axis indicates the stars, whereas
the y-axis indicates the collected points such that if question 4 received 3 points for 5 stars it
means that 3 participants strongly agreed that it would be useful to enhance our tool with the
ability to retrieve papers as an answer. We may observe that most of the questions received
more than three stars. For instance, when asked whether our tool is more helpful than using
search engines or paper-based resources, 3 participants neither agreed nor disagreed, three other
participants agreed to some extent, and four of them strongly agreed. When asked whether
the answers retrieved from our tool were accurate, one of the participants disagreed to some
extent, two participant were neutral, two participants agreed to some extent, and three of them
strongly agreed. Six of the participants strongly agreed, one agreed to some extent and another
one disagreed to some extent that our tool is useful because it can respond to questions asked in
different languages. Two participants disagreed to some extent and two others agreed to some
extent, another one was neutral, and three others strongly agreed that enhancing our tool with
the ability to retrieve paper as an answer would be useful.
Table 3 shows a matrix based representation of the percentage of each question related to
the respondents’ answers. The results show that the application would be successful among
7

2127

Using Cognitive ComputingAdrián
for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,
Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130and S. Pllana

Table 2: The questions of the conducted survey
#

Question

1

Do you think that such interactive assistance application can help you in parallel programming, more than search engines or paper-based resources?
Do you think that the answers you have received from our tool were accurate?
Do you find it useful that the application is multilingual?
Would you find it useful if the application could retrieve papers as an answer?

2
3
4

7
6

Question 1
Question 2
Question 3
Question 4

5
Points

2128	

4
3
2
1
0

1

2

3

Stars

4

5

Figure 4: The results of the survey. The x-axis indicates the stars, whereas the y-axis indicates
the number of participants that rated a question with a specific number of stars.

students as they would like to have an application that can help them in parallel programming
by using natural language. In the first question 87.5% of the total score corresponds to 4 stars
or more, which means that the respondents highly agree with the usefulness of the application.
In the second question 62.5% of the total score corresponds to 4 stars or more, which means
that the respondents highly agree with the usefulness of the application. In the third question
87.5% of the total participants appreciated having multi-language support in this application.
In the last question, 62.5% of the users think that enhancing our tool with the ability to retrieve
papers as answers is useful.

Table 3: matrix based representation of the survey results that shows the percentage of each
question related to the answers of the participants

Question
Question
Question
Question
8

1
2
3
4

1-star

2-stars

3-stars

4-stars

5-stars

0%
0%
0%
0%

0%
12.5%
12.5%
25%

12.5%
25%
0%
12.5%

37.5%
25%
12.5%
25%

50%
37.5%
75%
37.5%

	

Using Cognitive ComputingAdrián
for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,
Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130and S. Pllana

5

Conclusion and Future Work

Cognitive systems, like IBM Watson, are able to learn trough user’s input and be taught by
experts. An application that uses this technology can become a milestone in the field in which
it is being used due to the fact that a community can be created to improve applications, share
new ideas and discover features that no one has thought of before. The usefulness of such
systems has been demonstrated in various fields, such as in health care, where doctors can treat
their patients better owing to previous experiences with common diseases.
In this paper we have investigated the use of cognitive computing to help programmers learn
parallel programming. We have used the IBM Watson dialog service to enable the interaction
between the user and the system in a dialog-fashion way using natural language. Our application
is trained to respond to questions related to common mistakes that novice programmers do when
using OpenMP, which helps them avoid such mistakes, write code that produces the correct
result and runs faster. Furthermore, such systems may reduce the time investment required
to learn parallel programming. Since Watson can learn from the users collected input, the
application can be improved as it is used. The proposed tool can answer questions that a user
may ask, but it will neither generate code nor find code errors.
To evaluate the usefulness of our application, we conducted a survey with a number of novice
parallel programmers. The results of the survey show that novice parallel programmers are
willing to use such interactive application while writing their parallel programs and would find
it useful to improve their knowledge of the subject. Furthermore, the results show that retrieving
papers as answers will significantly attract users to use our application. We believe that our
tool can be used as an educational resource in a beginners course in parallel programming.
Future research will address the extension of our solution with additional IBM Watson
services that enable automatic input of data from existing sources of parallel programming
knowledge.

References
[1] I. E. Allen and C. A. Seaman. Likert scales and data analyses. Quality progress, 40(7):64, 2007.
[2] S. Benkner, S. Pllana, J. L. Traff, P. Tsigas, U. Dolinsky, C. Augonnet, B. Bachmayer, C. Kessler,
D. Moloney, and V. Osipov. PEPPHER: Efficient and Productive Usage of Hybrid Computing
Systems. Micro, IEEE, 31(5):28–41, Sept 2011.
[3] P. Czarnul. Teaching high performance computing using beesycluster and relevant usage statistics.
Procedia Computer Science, 29:1458 – 1467, 2014. 2014 International Conference on Computational
Science.
[4] L. Dagum and R. Menon. Openmp: an industry standard api for shared-memory programming.
IEEE computational science and engineering, 5(1):46–55, 1998.
[5] J. Diaz, C. Munoz-Caro, and A. Nino. A survey of parallel programming models and tools in the
multi and many-core era. IEEE Transactions on Parallel and Distributed Systems, 23(8):1369–
1386, Aug 2012.
[6] D. A. Ferrucci. Introduction to “This is Watson”. IBM Journal of Research and Development,
56(3.4):1:1–1:15, May 2012.
[7] A. Goel, B. Creeden, M. Kumble, S. Salunke, A. Shetty, and B. Wiltgen. Using watson for
enhancing human-computer co-creativity. In 2015 AAAI Fall Symposium Series, 2015.
[8] R. Gonçalves, M. Amaris, T. Okada, P. Bruel, and A. Goldman. Openmp is not as easy as it
appears. 2016 49th Hawaii International Conference on System Sciences (HICSS), 00:5742–5751,
2016.

9

2129

for Learning
Parallel
A. C.108C
Chazos,
S.Memeti,
2130	 Using Cognitive ComputingAdrián
Calvo Chozas
et al.Programming
/ Procedia Computer Science
(2017)
2121–2130and S. Pllana

[9] K. J. Harms. Towards a programming environment that adaptively suggests examples and corresponding puzzles based on programmer skill. In 2014 IEEE Symposium on Visual Languages and
Human-Centric Computing (VL/HCC), pages 185–186, July 2014.
[10] IBM Inc. Watson Documentation. https://www.ibm.com/watson/developercloud/doc/dialog/
reference_elements.shtml#reference_setting, 2017. Online; accessed 9 February 2017.
[11] M. Ishihara, H. Honda, T. Yuba, and M. Sato. Interactive parallelizing assistance tool for OpenMP:
iPat/OMP. In Proc. Fifth European Workshop on OpenMP (EWOMP 03), pages 21–29, 2003.
[12] C. W. Kessler, U. Dastgeer, S. Thibault, R. Namyst, A. Richards, U. Dolinsky, S. Benkner,
J. L. Traff, and S. Pllana. Programmability and performance portability aspects of heterogeneous
multi-/manycore systems. pages 1403–1408. IEEE, 2012.
[13] A. Kolosov, E. Ryzhkov, and A. Karpov. 32 OpenMP traps for C++ developers. Intel Developer
Zone, 2008.
[14] C. Mercer. 16 innovative businesses using IBM Watson: Which companies are using Watson’s
big data and analytics to power their business? http://www.computerworlduk.com/galleries/
it-vendors/16-innovative-ways-companies-are-using-ibm-watson-3585847/, 2017. Online;
accessed 9 February 2017.
[15] D. S. Modha, R. Ananthanarayanan, S. K. Esser, A. Ndirango, A. J. Sherbondy, and R. Singh.
Cognitive computing. Commun. ACM, 54(8):62–71, Aug. 2011.
[16] S. Pllana, S. Benkner, E. Mehofer, L. Natvig, and F. Xhafa. Towards an Intelligent Environment
for Programming Multi-core Computing Systems. In Euro-Par Workshops, volume 5415 of Lecture
Notes in Computer Science, pages 141–151. Springer, 2008.
[17] S. Pllana, S. Benkner, F. Xhafa, and L. Barolli. Hybrid performance modeling and prediction
of large-scale computing systems. In 2008 International Conference on Complex, Intelligent and
Software Intensive Systems, pages 132–138, March 2008.
[18] S. Pllana and T. Fahringer. Performance prophet: a performance modeling and prediction tool
for parallel and distributed programs. In 2005 International Conference on Parallel Processing
Workshops (ICPPW’05), pages 509–516, June 2005.
[19] P. Runeson and M. Höst. Guidelines for conducting and reporting case study research in software
engineering. Empirical software engineering, 14(2):131, 2009.
[20] S. Sah and V. G. Vaidya. A review of parallelization tools and introduction to easypar. International Journal of Computer Applications, 56(12), 2012.
[21] M. Sandrieser, S. Benkner, and S. Pllana. Using Explicit Platform Descriptions to Support Programming of Heterogeneous Many-Core Systems. Parallel Computing, 38(1-2):52–56, 01 2012.
[22] V. Sarkar. Programming Challenges for Petascale and Multicore Parallel Systems, pages 1–1.
Springer Berlin Heidelberg, Berlin, Heidelberg, 2007.
[23] A. B. Shiflet and G. W. Shiflet. Introduction to Computational Science: Modeling and Simulation
for the Sciences. Princeton University Press, 2011.
[24] M. Süß and C. Leopold. Common Mistakes in OpenMP and How to Avoid Them, pages 312–323.
Springer Berlin Heidelberg, Berlin, Heidelberg, 2008.
[25] A. Viebke, S. Memeti, S. Pllana, and A. Abraham. Chaos: a parallelization scheme for training convolutional neural networks on intel xeon phi. The Journal of Supercomputing, doi:10.1007/s11227017-1994-x, pages 1–31, 2017.
[26] R. Witte, B. Sateli, N. Khamis, and J. Rilling. Intelligent Software Development Environments:
Integrating Natural Language Processing with the Eclipse Platform, pages 408–419. Springer Berlin
Heidelberg, Berlin, Heidelberg, 2011.

10

