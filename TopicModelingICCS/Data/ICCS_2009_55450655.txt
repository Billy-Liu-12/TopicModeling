Preface for the Joint Workshop on Tools for
Program Development and Analysis in
Computational Science and Software
Engineering for Large-Scale Computing
Andreas Kn¨
upfer1 , Arndt Bode2 , Dieter Kranzlm¨
uller3 , Daniel Rodr`ıguez4,
5
6
7
Roberto Ruiz , Jie Tao , Roland Wism¨
uller , and Jens Volkert8
1

Center for Information Services and High Performance Computing
Technische Universit¨
at Dresden, Germany
2
Lehrstuhl f¨
ur Rechnertechnik und Rechnerorganisation
Technische Universit¨
at M¨
unchen, Germany
3
Ludwig-Maximilians-Universit¨
at M¨
unchen (LMU) &
Leibniz Supercomputing Centre (LRZ), Munich, Germany
4
University of Alcal´
a, Spain
5
Pablo de Olavide University of Seville, Spain
6
Steinbuch Center for Computing
Karlsruhe Institute of Technology, Germany
7
Operating Systems and Distributed Systems
University of Siegen, Germany
8
Institute of Graphics and Parallel Processing
Johannes Kepler University Linz, Austria

Today, computers and computational methods are increasingly important and
powerful tools for science and engineering. Yet, using them eﬀectively and efﬁciently requires both, expert knowledge of the respective application domain
as well as solid experience applying the technologies. Only the combination allows new and faster advancement in the area of application. The same is true
for establishing new computational concepts as regular methods in the ﬁeld of
application. This applies to either quantitative improvement (e.g. by parallel
scalability) or by qualitative progress (e.g. by better algorithms).
Of course, scientists and engineers are most interested in solving the actual
task. At the same time, computational tools require some knowledge about their
usage and its implications. Yet, the tools must not demand intimate skills using
the tool nor specialized computer science knowledge. Otherwise, the costs of tool
usage and training will outweigh the beneﬁts and it will not attract a broad user
community.
The same applies in the area software engineering. The research about software engineering is being inﬂuenced by computational applications and vice
versa. In one direction, software engineering methods, processes, metrics, management, etc. need to consider the way these types of applications are developed
and executed. In the other direction, computational techniques can help to improve the accuracy and control of all types of projects.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 655–656, 2009.
c Springer-Verlag Berlin Heidelberg 2009

656

A. Kn¨
upfer et al.

Our workshop addresses tools and methods provided by computer scientists
for scientists and engineers from their respective application domains. This includes the following:
–
–
–
–
–
–
–
–
–
–
–

Software development tools
Testing and debugging tools
Program analysis and visualization tools
Performance analysis and tuning tools
Management of large amounts of data and data mining
Software development processes
Computational intelligence techniques applied to software engineering
Data mining software engineering repositories
Resource management, load balancing, job queuing and accounting
Problem solving environments for speciﬁc application domains
Use cases and practical experiences with real-world applications

Furthermore, it covers reports about use cases and success stories using the
computational tools for science and engineering by either the users or by the
computer scientists or by collaboration of both.
The primary intention of this workshop is to bring together developers of
tools for scientiﬁc computing and their potential users. Since its beginning at
the ﬁrst ICCS in 2001, the workshop has encouraged tool developers and users
from the scientiﬁc and engineering community to exchange their experiences.
Tool developers present to users how their tools support scientists and engineers
during program development and analysis. Tool users report their experiences
employing such tools, especially highlighting the beneﬁts as well as the desired
improvements.

