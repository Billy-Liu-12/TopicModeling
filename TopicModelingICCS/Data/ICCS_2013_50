Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 481 – 490

International Conference on Computational Science, ICCS 2013

Iterative method for edge length equalization
J. P. Pec¸anhaa , J. L. Souza Filhoa , M. B. Vieiraa,∗, M. Loboscoa , S. O. Dantasa
a Universidade

Federal de Juiz de Fora, Departamento de Ciˆencia da Computa¸ca˜ o, 36036-900, Juiz de Fora-MG, Brazil

Abstract
This paper presents a method for triangular surface remeshing to obtain new faces whose edge lengths are as close as possible
to a target value m. The process uses as input a 2-manifold mesh with arbitrary geometry and topology. The proposed
algorithm runs iteratively, automatically adjusting the necessary amount of vertices, and applies a global relaxation process
using a variation of Laplace-Beltrami discrete operator. We introduce geometry constraints in order to preserve salient features
of the original model. The method results on a grid with edge lengths near to m with low standard deviation, i.e. the vertices
are uniformly distributed over the original surface. The dual space of the ﬁnal triangular surface results in a trivalent, mostly
hexagonal mesh, suitable for several applications.
Keywords: Mesh Optimization; Computational Geometry; Hierarchy and Geometric Transformations

1. Introduction
Improvement of digital representations of real objects is a major research area in computer graphics. Samples
acquired with 3D scanners, for example, represent the surface of objects as point clouds. Depending on the
application, these clouds should be manipulated in several ways. The distribution of the acquired points can be an
issue for several applications. In physics, chemistry and numerical analysis, for example, some models must meet
certain requirements in terms of geometric constraints, valid intervals for valencies and distances, overall vertex
distribution, polygon area restrictions, etc., in order to perform stable simulations. Meshes with some degree
of regularity are often the goal of most works about remeshing. Even with computer-aided design (CAD), one
can generate poorly sampled, oversampled, redundant or distorted triangles. Modeling and triangulation methods
generally aim the ﬁdelity of the ﬁnal surfaces rather than regularity or isotropy of the resulting meshes.
In this work, we propose a method to iteratively transform an existing arbitrary mesh into a version having
regular edges with controlled length. It means that the user can state the desired average size for ﬁnal edges.
As a consequence, it tends to obtain equilateral triangles in regions with low curvature. Depending on the ﬁnal
edge length desired, the mesh is simpliﬁed or reﬁned using stellar operations. A modiﬁed version of the LaplaceBeltrami discrete operator is then applied to relax the mesh in each iteration. Since some points are pushed
outside the original surface by this operation, a projection step is performed in order to keep as much as possible
the original shape. Thus, our method equalizes the distance between neighbour vertices trying to preserve the
original topology and geometry.
∗ Corresponding

author. Tel.: +55-32-2102-3311.
E-mail address: marcelo.bernardes@ice.ufjf.br.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.212

482

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

As our results show, the equalized meshes fairly represent the original surface, even if the target edge length
is far from the original average. The ﬁnal result can be useful for some engineering and physics applications,
such as nano structure simulation, for example, which has originally motivated this research. With a primal mesh
with equalized edge lengths we can easily obtain a trivalent mesh by computing its dual. This kind of mesh has
received some attention recently, generally by direct hexagonal faces generation through global parametrization
[1]. From an application point of view, we argue that the problem of obtaining a trivalent mesh, reducible to the
edge equalization problem, is more general. It allows the ﬁnal mesh to have pentagons or heptagons wherever the
original geometry requires. After the edge equalization, hexagons will naturally appear in smooth surface regions.
The main contribution of our work is a straightforward method for edge equalization, reasonably fast for
modeling purposes, that admits target edge lengths in a wide interval around the original average. The ﬁnal result
tends to have low standard-deviation of edge lengths. We propose a new formulation for mesh relaxation based on
the Laplacian transformation, which includes constraints to preserve original geometry. We also propose stellar
transformations based on a priority list to avoid local geometric inconsistencies.
1.1. Related Work
Surface remeshing is commonly used to prepare a mesh for a given application, adapting it to ﬁll speciﬁc
requirements. The number of elements a surface has can be changed, i.e. to reduce the number of faces and
vertices [2]. The change could also be done to the shape of the polygons [3, 4], number of regular vertices [5, 6],
alignment of the polygons with areas of higher curvature [7, 8, 1] and the amount of elements in these areas [5, 3].
In a uniform distribution, the vertices are equally sampled through the whole model. The means to achieve this
distribution are divided into two groups: explicit remeshing and global parametrization. With explicit remeshing,
the model is globally and/or locally modiﬁed until a predeﬁned objective is reached. Surazhsky & Gotsman [5]
developed a simple way to generate uniform meshes. The mesh has the area of its triangles optimized. Local
operations for vertex regularization are applied until a global minimum is found. There were no shown studies
that focused on the length of the edges. The edges average of the result is the same of the model. Their work also
introduced the concept of local parametrization that was further formalized by Ray et. al [9].
In [10], a method for explicit uniform remeshing, based on local modiﬁcations and followed by global relaxations is presented. Edges with length out of a chosen threshold are treated using stellar operations, as in the
present work. Although eﬃcient, there is no freedom on choosing this threshold. The authors say that the method
guarantees its functionality only when the desired edge length is very close to the average of the initial model.
This fact can be refuted considering the proposed method of the presented paper. There were no informations
about the number of irregular vertices, standard deviation or ﬁnal averages of the tested meshes.
Uniform remeshing by global parametrization is computationally slow, so it is common to restrict the object
topology to models homeomorphic to the disc and sphere [11]. For arbitrary surfaces, a graph cut is calculated and
then the model is opened in a plane [7]. From a global parametrization it is possible to uniformly redistribute the
vertices according to a distance [12, 8]. It is also possible to resample the vertices so the new surface is formed by
non-triangular polygons such as squares [7] or hexagons [1]. However, these approachs are very sensitive to the
original meshes quality since the parametrization involves global optimization based upon geometric constraints,
such as feature lines and extremalities, that must be very well detected. Tuning ﬁnal edge lengths might also
be diﬃcult. In a modeling perspective, the possibility of non-convergence due to bad detection of some mesh’s
attribute might be a serious limitation.
2. Proposed Method
The input for the algorithm that uniforms the edges is a tuple (M, m, k, n), where M is the triangular mesh, m
is the distance between the vertices (called here as desired or target edge length), k the number of rings used at the
Laplacian optimization step and n the number of iterations.
The method works as shown in Algorithm 1. Each step is separately explained ahead.

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

M = Copy(M)
for i = 1 to n do
mi = MIN(2 · CalculateEdgesAverage(M ), m)
L p = CreatePriorityList(M , mi )
StellarOperations(M , L p )
CorrectValency(M )
GlobalRelaxation(M , k)
Projection(M, M )
end
return M

Algorithm 1: UniformRemeshing(M, m, k, n)

2.1. Stellar Transformations with Priority List
The target edge length m is arbitrary and the number of elements present in the mesh must change according
to it. The higher m is, the less faces and vertices are needed to represent the model. For the opposite, a lower
m results in more faces and vertices. So the current edge’s length is the criterion to decide if vertices are added
or removed. An arbitrary mesh, however, can have regions which should be reﬁned and others that should be
simpliﬁed.
This step is based on the modiﬁcation of long or short edges a j which are classiﬁed as:
long, if a j > mi + σ
,
short, if a j < mi − σ
where mi is an intermediate target value for the i-th iteration, deﬁned in such a way that the transition between the
current average edge length of the model on steps i and i + 1 is smooth.
Edges with length within the closed interval [mi − σ, mi + σ] remain unchanged during this step. Long and
short edges are then candidates to be collapsed or splited, respectively. Despite the σ value can be a parameter
of the method, our experiments show that σ = 0.2 · mi generally gives good results. For completude reasons,
however, some results with diﬀerent σ values are presented. For an edge al ∈ A ⊂ M considered long, a new
vertex is inserted at its middle position dividing it into two edges of length |al | /2 by the stellar operation of edge
split. Edges considered too small in respect to mi are removed from the model using edge collapse.
priorityList

foreach ai ∈ A ⊂ M do
if |ai | > mi + σ then
priorityList.Add(ai )

else if |ai | < mi − σ then
priorityList.Add(ai )

end
end
SortDescent(priorityList)
return priorityList

Algorithm 2: CreatePriorityList(M , mi , σ)
When m is much greater than the current edges average, a strong mesh simpliﬁcation is required. In a extreme
example with high m, all edges will be candidates to be collapsed. Thus, the iteration’s target mi is set to be the
minimum between the global target average m and two times the current edges average of Mi (Algorithm 1).
In that way, the diﬀerence between the averages of Mi and Mi+1 changes smoothly and is unlikely to generate
invalid triangles or change the topology of the mesh, due to the collapse of near long edges. The upper bound
of two times the current average per iteration for mi comes from the fact that the edges progressively tend to be
equalized, and doubling the edges length of a star does not promote a severe local modiﬁcation.

483

484

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

The order of application of stellar operations is important. We propose to process the longest and smallest
edges ﬁrst. A priority list L p is created where the edges a j , with higher deviation d j = a j − mi , are the most
important. The list L p is the set of edges {a1 , ..., at } ⊂ A ⊂ M, with d1 ≥ d2 , ..., dt−1 ≥ dt , where a j ∈ {a1 , · · · , at }
if a j [mi − σ, mi + σ] ∈ R (Algorithm 2).
The stellar operations are performed after the set up of the list. The algorithm traverses the list verifying the
type of each edge and applies the appropriate operation (edge split or edge collapse). All the vertices adjacent to
an edge that was changed are marked as visited and removed from L p . This avoids that a single vertex has more
than one modiﬁed edge, which gives a better distribution of modiﬁed edges per iteration (Algorithm 3).
foreach ai ∈ L p do
if VertexVisited(ai ) then
continue
else if |ai | > mi + σ then
EdgeSplit(ai )
VisitEdgeVertices(ai )
end
else if |ai | < mi − σ then
EdgeCollapse(ai )
VisitEdgeVertices(ai )
end
end

Algorithm 3: StellarOperations(M , L p )
2.2. Post Processing
After the edge adjustments by stellar operations, the valency of the vertices naturally tends to 6, which is
mandatory to obtain uniform distribution in smooth regions. However, some vertices might have arbitrary valencies. A simple scheme to correct the vertex valencies based on edge ﬂip operations is then applied [13, 5, 10].
Consider the two triangles of Figure 1. For each edge of the mesh, the algorithm performs an edge ﬂip
operation and, if the valencies of the involved vertices become near 6, the rotated edge is accepted, otherwise the
operation is undone. An overview of the process is shown on Algorithm 4. The evolution of the vertices valencies
over the iterations are presented in Section 3.

Fig. 1. Vertices v1 , v2 , v3 e v4 forming two triangles f1 = (v1 , v2 , v3 ) e f2 = (v1 , v3 , v4 ). The adjacent vertices to the edge ai = v1 v3 are v1 and
v3 , and the opposite vertices to ai are v2 and v4 . The set of vertices of the adjacent triangles to ai is {v1 , v2 , v3 , v4 }.

2.3. Global Optimization with k-neighbourhood
After the elimination of the short and long edges and the connectivity correction of the vertices, they must
be globally redistributed. The relocation of the elements should approximate as much as possible the original
geometry.

485

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

foreach ai ∈ A ⊂ M do
vn = SearchAdjacentVertices(ai )
preDeviation = |valency(v1 ) − 6| + |valency(v2 ) − 6| + |valency(v3 ) − 6| + |valency(v4 ) − 6|

EdgeFlip(ai )
postDeviation = |valency(v1 ) − 6| + |valency(v2 ) − 6| + |valency(v3 ) − 6| + |valency(v4 ) − 6|

if preDeviation ≤ postDeviation then
EdgeFlip(ai )
end
end

Algorithm 4: CorrectValency(M )
The uniform Laplacian operator, which uses only the 1-star of the vertex, requires more iterations to obtain
equalized meshes. We propose to use more than one vertex ring to improve the convergence rate. Instead of using
only the nearest neighbours, the contribution of all vertices until the k-th neighbour are considered. Therefore,
the vertex vi tends more quickly to the central position of the set of the surrounding vertices. It also leads to a
smoother result. The closer a neighbour is, higher is its inﬂuence to displace vi . Thus, the weight of the inﬂuence
of a vertex v j over vi is given by wi j = S1j , where S j is the star number of v j related to vi or, in other words, the
number of hops from vi to reach v j .
The energy formulation for each vertex is then:
Ei =

2

wi j vi + ti − v j − t j

,

(1)

j∈stark (vi )

where ti and t j are, respectively, the unknown displacements for vi and v j , and wi j . This is quadratic in each vertex,
so its partial derivatives are linear expressions. The minimum is unique and can be found when the derivative with
respect to the vertices are zero, resulting in a sparse linear system. The vertices’ positions are known and the
unknown quantities are the tangent vectors to each point, leading to the system
AX = b

→

∂E
X = 0.
∂v

(2)

The energy Ei (Eq. 1) can be written as
Ei =

wi j vi + ti − v j − t j

2

j∈stark (vi )

=
=

1
< vi + ti − v j − t j >< vi + ti − v j − t j >
Sj

1
(< vi , vi > + < v j , v j > + < ti , ti > + < t j , t j > +
Sj

2 < vi , ti > + < v j , t j > − < vi , v j > − < vi , t j > − < v j , ti > ),
and the derivative with respect to vi :
1
∂Ei
= L (vi ) = 2
(vi + ti − v j − t j ) ⇒
∂vi
S
j∈star (v ) j
k

i

1
(vi + ti − v j − t j ) = 0.
S
j∈star (v ) j
k

(3)

i

We impose restrictions Ti on the system in order to force ti to preferably preserve the original geometry of the
mesh. Given a vertex vi , we include the restriction < ti , nvi >= 0, where nvi is the normal of the tangent planes (in
respect the original surface) estimated over vi , respectively. Feature lines and corners could be treated diﬀerently
to preserve even more the geometry.

486

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

Let V ⊂ M , |V| = r. The linear system with the geometric restrictions above can be written as a matrix:
AX = b

→

L
T

X=

0
0

,

(4)

where L is the modiﬁed Laplacian matrix of dimension r × r, using the k-neighbourhood, and T is a p × r matrix
composed by the restrictions. The dimension p ≥ 3 depends on the number of corners and feature lines of the
model. Note that the restrictions can work in an unique solution or in a least-squares sense. Thus, the resulting
displacements ti can be hardly constrained or not by the geometric restrictions.
2.4. Projection onto the original mesh
To ensure that every position found is over the input mesh, a step that projects the vertices of Mi of each
iteration over the original model M was included. The subproblem of ﬁnding the nearest points [13] between two
sets is a high complexity computational problem. After the global relaxation, there is a set of vertices {v1 , ..., vn } ⊂
Mi whose original counterparts v1 , ..., vn ⊂ M must be found. The representation M describes a continuous
surface and, as a result, there are inﬁnite solutions to be tested in order to obtain min( vi − vi ) for all i. We use a
simple approach that ﬁnds a vi candidate, not necessarily optimal, for each vi .
The algorithm projects the vertices over the components (vertices, edges and faces) of M closest to vi , generating a set of points over the surface. The element that shows the shortest distance to vi will be the ﬁnal vertex vi .
Note that the projection does not represent, necessarily, the exact solution of the problem. However, the results of
this procedure have shown satisfactory results, regardless of its simplicity.
Of course, there are several situations that may result in an invalid mesh. For example, the combination of a
high edge target m can give wrong results in regions with high negative curvature. However, by setting a small
number of iterations and m increasing softly, challenging meshes can be successfully equalized.
3. Results
In this section the results and the applications of the proposed method are shown for diﬀerent scenarios. It
is also discussed interpretations for the presented data. The algorithm was implemented using the programming
language C++ on Linux (Ubuntu v11.04). The tests were run on an Intel Core i5 (2410M) computer, with 6GB of
RAM and a GTM540M video card.
The ﬁrst study was the state of the processed models in distinct time steps. In Figure 2, the mesh progression over each iteration is shown. One may easily notice the improvement in the distribution and regularity of
vertices. After thirty iterations, the ﬁnal processed mesh presents a more uniform vertex distribution, as depicted
numerically in Table 1, where x¯ is the average and s the standard deviation.
Iteration
ni = 0
ni = 5
ni = 10
ni = 20
ni = 30

x¯
0.6019
0.5008
0.5076
0.5108
0.5124

s
0.2468
0.0546
0.0454
0.0397
0.0380

Num. Vert.
9002
10404
9924
9578
9394

Reg. Vert.(%)
36.6%
77.8%
82.4%
86.1%
86.8%

Table 1. State of the grid in diﬀerent iterations with parameters m = 0.5 and k = 2.

The bunny approximation reveals that the vertices distribution is gradually corrected and connectivity regularized as the number of iterations increases (Figure 2). The histograms at the lower left corners represent the amount
of vertices with valency 4, 5, 6, 7 and 8 for i-th iteration. It is possible to notice that this number tends to 6 as the
algorithms advances, as mentioned in Section 2.
The parameter k plays an interesting role in the algorithm. The use of k > 1 was eﬀective in most tests,
generating better results than the most recurrent formulation found in the literature (k = 1, uniform Laplacian).
It was found that the use of k = 2 is suﬃcient to obtain satisfactory results in most cases. However, in some
scenarios, a higher k is necessary to improve the edge length equalization, as shown in Table 2.

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

487

Fig. 2. Bunny head highlight. The graphics on the lower left corner show the regularity distribution for each ni .

Fig. 3. Egea model after remeshing (bottom chart): parameters m = 0.8, n = 20 and k = 4.

Table 2 presents the ﬁnal data from experiments with Egea model (Figure 3). It is possible to verify that, when
k > 1, the standard deviation reaches lower values. After several experiments, we realized that σ with values
between 20% and 25% of the target average m give the best results. We also observed that as σ increases, it is
important that k also increase to obtain better results.
Figure 4 presents the surface rockerarm processed with diﬀerent edge targets. The details of the model (regions
of high curvature) are lost as m increases. This is expected when a strong reduction of the number of vertices
is desired. Uniform meshes are not ideal for representation of salient areas, since the edge length constraint
causes signiﬁcant loss of information. The iterative nature of the proposed algorithm contributes negatively to this
behavior because the relaxation process, which is a low pass ﬁlter, is consecutively applied.
In a oversampling process, the number of elements of a mesh may be substantially increased, depending on m.
If the input m is lower then the original model edge length average, the presented method will naturally increment
the amount of faces, vertices and edges (Fig. 5). One may notice in this ﬁgure a fairly conservation of the original
surface geometry, in adition to the vertices uniform distribution.
3.1. Applications
One of the main applications for uniform meshes are computational simulations. The generation of hexagonal
uniform meshes used as input for physics simulations of carbon nano-structures is one of the motivations of this

488

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490
(m, σ, n, k)
Model
(0.8, 0.1, 20, 1)
(0.8, 0.1, 20, 2)
(0.8, 0.1, 20, 3)
(0.8, 0.1, 20, 4)
(0.8, 0.2, 20, 1)
(0.8, 0.2, 20, 2)
(0.8, 0.2, 20, 3)
(0.8, 0.2, 20, 4)
(0.8, 0.35, 20, 1)
(0.8, 0.35, 20, 2)
(0.8, 0.35, 20, 3)
(0.8, 0.35, 20, 4)
(0.8, 0.41, 20, 1)
(0.8, 0.41, 20, 2)
(0.8, 0.41, 20, 3)
(0.8, 0.41, 20, 4)

x¯
0.599984
0.775103
0.785205
0.793493
0.799652
0.792564
0.801297
0.814370
0.825473
0.772455
0.781785
0.789769
0.796638
0.769633
0.781499
0.791372
0.794345

s
0.341534
0.135009
0.126693
0.129107
0.130791
0.076465
0.073887
0.071990
0.073180
0.128458
0.127766
0.127981
0.127747
0.152831
0.156026
0.156487
0.156241

Num. Vert.
10044
10648
10531
10450
10380
10447
10282
9921
9617
10906
10836
10789
10690
10910
10827
10799
10850

Reg. Vert. (%)
37.9%
68.2%
67.7%
66.6%
66.2%
80.1%
81.7%
84.0%
84.8%
76.6%
73.1%
71.6%
72.5%
74.2%
70.0%
69.0%
69.1%

Table 2. Remeshing values for Egea with diﬀerent k and σ conﬁgurations. (Fig. 3).

Fig. 4. Rockerarm model processed for diﬀerent edge lenghts. Each picture corresponds to an mesh generated with speciﬁc m (shown in
ﬁgure). Parameters: σ = 0.2 · m, n = 30 e k = 2.

Fig. 5. Oversampling of the Rockerarm surface.

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

489

work. Those structures can be generated from arbitrary triangular meshes, as in Nieser et al. [1] or from parametric
spaces. The dual space approach of the input triangular mesh is used in this paper to create hexagonal objects.
Note that each vertex in the dual version D of the ﬁnal mesh M will have exactly three incident edges, which
characterizes the generated mesh as regular and trivalent. The centroid of the polygons at the opposite space is
nearly each primal vertex. One may also observe that, if the primal mesh is not regular, D will be composed by
several non hexagonal polygons.
The mesh edge length in primal and dual spaces of 2-manifolds are strongly related in terms of distribution.
Triangles over a smooth surface tend to have equal areas if their edges are uniform. The distance between the
centroids of neighbor triangles also tend to be uniform. Thus, the edge length for the trivalent mesh also tend to
be uniform. Therefore, the problem of generating uniform trivalent meshes can be reduced to the equalization
of triangular meshes. Given an uniform triangular mesh, the polygons and vertices in its dual domain tend to be
uniformly distributed (Fig. 6 and 7).
For modeling carbon nano structures, for example, there is a tendency for the atoms to keep a mutual constant
distance. A primal triangular object must have uniform edge lengths to have its dual directly used as input in this
kind of simulation problem.

Fig. 6. Dual mesh of the bunny model after the uniform remeshing with m = 0.5, n = 20 e k = 2.

The dual triangular mesh of the bunny model is shown on Figure 6. The equalized version was generated
with parameters (m, k, n) = (0.5, 2, 20) followed by the calculation of the correspondent trivalent mesh. A fairly
uniform distribution of the vertices can be observed.
To calculate the interaction between atoms, there are simple formulations as the Lennard-Jones potential [14]
and more complex methods as used in the REBO potential [15, 16]. The energy distribution over the trivalent
mesh calculated from the dual of the bunny model before and after the uniform remeshing can be seen in Figure
7. The colours vary from blue to red as the energy goes from low to high, respectively. It is possible to infer that
the generated surfaces are more stable to use in molecular dynamics simulation than their original models.
4. Conclusion
This work presents an iterative remeshing method for obtaining models having edges with a target average m
and low standard-deviation. The main contribution is an eﬀective method for edge equalization. It is reasonably
fast for modeling purposes and admits target edge lengths which are far from the original average. We propose a
new formulation for mesh relaxation based on the Laplacian transformation with k-neighbourhood, which includes
constraints to preserve the original geometry. We also propose stellar transformations based on a priority list to
avoid local geometric inconsistencies.

490

J.P. Peçanha et al. / Procedia Computer Science 18 (2013) 481 – 490

Fig. 7. Energy distribution of the atoms in a molecular system with the dual mesh of the bunny model before (right) and after (left) remeshing.

The number of iterations n, target length m and the number of neighbours k form the critical parameters that
are intuitive and easy to deﬁne, even for equalizing challenging input models. Higher n is, more likely the resulting
edges will have average m by the end of the process. But if n is too high, the geometry is more likely to be softned
by the relaxation step. Higher the k is, the sequence will converge faster to the average m, but with a higher
smoothing eﬀect. Our method also admits the adjustment of the deviation σ, mainly used in the stellar operations
step. Experimental results show that σ around 20% and 25% of the target m works well for all models used.
As our results show, the equalized meshes fairly represent the original surface, even if the target edge length
is far from the initial average. The ﬁnal result can be useful for some engineering and physics applications, such
as nano structure simulation.
The mesh projection step is the least robust step in the overall processing. However, by setting properly the
number of iterations and varying softly m, even challenging models with high curvature regions and arbitrary
topology can be succesfully equalized. As a future work, a new approach to avoid that the iterated meshes are
distorted with respect to the original model could be proposed.
Acknowledgements
Authors thank to Fundac¸a˜ o de Amparo a` Pesquisa do Estado de Minas Gerais and CAPES for ﬁnancial support.
References
[1] M. Nieser, J. Palacios, K. Polthier, E. Zhang, Hexagonal global parameterization of arbitrary surfaces, in: ACM SIGGRAPH ASIA 2010
Sketches, SA ’10, ACM, New York, NY, USA, 2010, pp. 5:1–5:2.
[2] H. Hoppe, T. DeRose, T. Duchamp, J. McDonald, W. Stuetzle, Mesh optimization, in: Proceedings of the 20th annual conference on
Computer graphics and interactive techniques, SIGGRAPH ’93, ACM, New York, NY, USA, 1993, pp. 19–26.
[3] P. Alliez, E. C. d. Verdi`ere, O. Devillers, M. Isenburg, Isotropic surface remeshing, in: Proceedings of the Shape Modeling International
2003, SMI ’03, IEEE Computer Society, Washington, DC, USA, 2003, pp. 49–.
[4] D. ming Yan, B. L´evy, Y. Liu, F. Sun, W. ping Wang, Isotropic remeshing with fast and exact computation of restricted vor onoi diagram,
in: ACM/EG Symposium on Geometry Processing / Computer Graphics Forum, 2009.
[5] V. Surazhsky, C. Gotsman, Explicit surface remeshing, in: Proceedings of Eurographics Symposium on Geometry Processing, Aachen,
Germany, 2003, pp. 17–28.
[6] Y. Li, E. Zhang, Y. Kobayashi, P. Wonka, Editing operations for irregular vertices in triangle meshes, in: ACM SIGGRAPH Asia 2010
papers, SIGGRAPH ASIA ’10, ACM, New York, NY, USA, 2010, pp. 153:1–153:12.
[7] D. Bommes, H. Zimmer, L. Kobbelt, Mixed-integer quadrangulation, ACM Trans. Graph. 28 (3) (2009) 77:1–77:10.
[8] P. Alliez, M. Meyer, M. Desbrun, Interactive geometry remeshing, ACM Trans. Graph. 21 (3) (2002) 347–354.
[9] N. Ray, W. C. Li, B. L´evy, A. Sheﬀer, P. Alliez, Periodic global parameterization, ACM Trans. Graph. 25 (4) (2006) 1460–1485.
[10] M. Botsch, L. Kobbelt, A remeshing approach to multiresolution modeling, in: Proceedings of the 2004 Eurographics/ACM SIGGRAPH
symposium on Geometry processing, SGP ’04, ACM, New York, NY, USA, 2004, pp. 185–192.
[11] B. L´evy, Constrained Texture Mapping, in: SIGGRAPH 2001, ACM, Addison Wesley, Los Angeles, USA, 2001, p. 8 p., colloque avec
actes et comit´e de lecture. internationale. A01-R-028 —— levy01a A01-R-028 —— levy01a.
[12] N. Pietroni, M. Tarini, P. Cignoni, Almost isometric mesh parameterization through abstract domains, IEEE Transaction on Visualization
and Computer Graphics 16 (4) (2010) 621–635.
[13] M. Botsch, L. Kobbelt, M. Pauly, P. Alliez, B. uno Levy, Polygon Mesh Processing, AK Peters, 2010.
[14] J. E. Lennard-Jones, Cohesion, Proceedings of the Physical Society 43 (5) (1931) 461–482.
[15] D. W. Brenner, O. A. Shenderova, J. A. Harrison, S. J. Stuart, B. Ni, S. B. Sinnott, A second-generation reactive empirical bond order
(REBO) potential energy expression for hydrocarbons, Journal of Physics: Condensed Matter 14 (4) (2002) 783.
[16] Z. Wang, Reactive empirical bond-order (REBO) potential (01 2006).

