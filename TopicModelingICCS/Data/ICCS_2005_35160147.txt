GIVS: Integrity Validation for Grid Security
Giuliano Casale and Stefano Zanero
Dipartimento di Elettronica e Informazione,
Politecnico di Milano - via Ponzio 34/5 - 20133 Milano Italy
{casale, zanero}@elet.polimi.it

Abstract. In this paper we address the problem of granting the correctness of Grid computations. We introduce a Grid Integrity Validation
Scheme (GIVS) that may reveal the presence of malicious hosts by statistical sampling of computations results. Performance overheads of GIVS
strategies are evaluated using statistical models and simulation.

1

Introduction

Computational grids are touted as the next paradigm of computation [1]. Since
they provide access to the resources needed for computational intensive applications, a Grid enviroment usually spans a heterogeneous set of machines.
When a Grid extends beyond the systems of a single administrative authority
it suddenly becomes a network of potentially untrusted nodes, on which a remote
user submits a potentially harmful piece of code together with sensitive data,
as already happens in generic peer-to-peer systems [2]. The ensuing problems of
security and privacy have not been fully explored in literature yet.
We identify at least four diﬀerent problems that arise when extending Grid
computing beyond a trusted network:
1. Defending each participant from the eﬀects of potentially malicious code
executed on the Grid [3, 4].
2. Avoiding unfair parties which tap computational resources without sharing
their own [5, 6].
3. The privacy of data submitted for computation should be adequately protected, depending on their sensitivity.
4. The eﬀect of the presence of one or more peers that are interested in making
the overall computation fail.
Our paper will deal in particular with the last problem. We propose a general
scheme, named Grid Integrity Validation Scheme (GIVS), based on problem
replication and submission of test problems to the Grid hosts.We evaluate the
eﬀectiveness and the overhead of the proposed solution both analitically and
through simulation.
This work has been partially supported by the Italian FIRB-Perf project.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 147–154, 2005.
c Springer-Verlag Berlin Heidelberg 2005

148

G. Casale and S. Zanero

The paper is organized as follows: in Section 2 we analyze the problem and
we introduce our integrity scheme. Section 3 describes a statistical model for
evaluating the security level and performance trade-oﬀs of alternative validation
scheme within GIVS. Finally, in Section 4 we draw conclusions.

2

The Grid Integrity Validation Scheme

The problem of detecting when remote untrusted machine is running a particular
piece of mobile code is diﬃcult to solve in the general case. Checksums and digital
signatures can be used to verify the identity of a piece of code we have received,
but cannot be used to prove to a remote party that we are actually executing
it. Cryptographic protocols would require that the mobile code is endowed with
a secret that cannot be accessed by someone controlling the host on which it is
running, a constraint that looks impossible to achieve.
A possible solution would be to design the code in such a way that tampering
with results in a non-detectable way would require a much longer time than
calculating the real solution. Nevertheless, this would require a correct estimate
of the real computation times, and thus would implicitly rely on the fact that the
malicious user will correctly declare the computational power he has available.
Unless the particular problem we are dealing with has some sort of checksum
property, which allows to check the correctness of the results without having to
rerun the program, the only feasible approach is to check the correctness of the
results by sampling. Speciﬁcally, we propose to use some test problems to check
the correctness of the results. The idea resembles a blind signature protocol [7],
in which the submitter prepares N similar documents, the signer opens (N − 1)
documents checking they are correct, and then blindly signs the last document,
with a probability p = 1/N to be cheated. In our case, documents are replaced
by computational tasks. We also require to perform our controls by harnessing
the computational power of the Grid as much as possible. This is the key idea
of our Scheme for Integrity Validation of Grid computation, or GIVS.
In order to generate the test problems required for the integrity validation, we
propose a bootstrap phase. During the bootstrap, one or more trusted machines
compute correct solutions to a subset of test problems, chosen among the available ones according to some criteria (e.g. diﬃculty, sensitivity to errors, . . . ).
These problems are then used during normal Grid activity to perform security
controls, since when a test problem is scheduled to a user, the computated solution is compared to the correct solution to detect whether the user is malicious.
Hence, users trying to corrupt the solution of a test problem would be easily
identiﬁed.
While test problems seem a simple solution to the Grid integrity validation problem, some drawbacks can be identiﬁed. First, test problems require a
bootstrap phase that slows down the computation startup and waste part of
resources. Moreover, increasing the number of test problems could turn into a
continuous performance overhead that may become unacceptable.

GIVS: Integrity Validation for Grid Security

149

An alternative solution, consists in replicating a set of problems of unknown
solution throughout the Grid, that we call replicated problems or just replicas.
The integrity validation is performed in this case by comparing the diﬀerent
results provided by the untrusted hosts to the same replicated problem. If a
conﬂict is detected, a trusted machine is asked to compute the correct result,
so that the malicious hosts can be identiﬁed. Compared to the test problems
approach, we are now accepting a trade-oﬀ between the performance overheads
imposed by the integrity validation and the degree to which we can rely on our
own security controls.
Notice that if a subset of M machines are cooperating to cheat, if they receive
any test problem o replica in common, they can detect it and cheat. Moreover,
if any of the results previously computed by any of the M machines is given to
another machine as a test problem, it can be detected. The risk connected to
this situation are evaluated in the next sections.

3

Performance-Security Trade-Oﬀs

3.1

Notation and Basic Definitions

Let us begin to model a Grid composed of H hosts, with M ≤ H malicious nodes
that are cooperatively trying to disrupt the computation. In normal conditions
we expect M << H.
Let T be a period of activity of the Grid after the bootstrap phase. We disTk = T . In each period Tk , every
cretize T in the K intervals T1 , . . . , TK , thus
host h receives a collection Pkh = (pk1 , . . . , pkP ) of Ph problems1 . We assume the
solution of each problem pi takes the same computational eﬀort on all machines
of the Grid. We can classify the problems pm ∈ Ph in several classes: we denote
test problems with qm , replicas with rm , and generic problems, which don’t have
any role in security controls, are denoted with gm . Thus, for instance, the set
Ph = (c1 , . . . , cCh , r1 , . . . , rRh , g1 , . . . , gGh ) is composed of Ch test problems, Rh
replicas and Gh generic problems with Ph = Ch + Rh + Gh .
In the rest of this section we explore the two diﬀerent strategies for GIVS
described in Section 2: in the ﬁrst one we use only test problems, while in the
second all test problems are replaced with replicas. Our aim is to study, for each
strategy, the performance overhead OH introduced by the security controls, and
the probability pCF of accepting a corrupted ﬁnal value as a correct result.
3.2

First Strategy: Test Problems

We now consider that each host receives a constant number of problems Ph ,
among which Gh are generic problems, while Ch = Ph − Gh are test problems.
Then, no problem replicas are present in the sets Ph (Rh = 0). We denote with
1

For clarity, we will omit in the rest of the paper the indices k when we do not need
to refer to diﬀerent time slices.

150

G. Casale and S. Zanero

qh the subset of test problems of Ph and with Ch the cardinality of qh . All test
problems qm ∈ qh are distinct and extracted randomly from a set of C elements.
Under these assumptions, the performance overhead OH of this scheme is
given by OH = H · Ch since the solution of the test problems does not give any
useful result for the applications running on the Grid.
We observe that the probability that two machines share the same control set
is negligible. In fact, given that the probability of receiving a particular control
set is the inverse of the number of possible distinct sets qh , we have
p(qhk ) =

C
Ch

−1

=

Ch ! (C − Ch )!
.
Ch !

Now, observing that two random extractions q1 and q2 of the control sets are
independent, the probability of two hosts h1 and h2 of receiving the same control
set qhk is
2
Ch ! (C − Ch )!
p(qh1 ≡ qh2 ) = p(qhk )2 =
.
C!
In non-trivial cases this probability is extremely low. As an example, with C = 5
and Ch = 3, it narrows down to a modest 0.25%. As C grows, this probability
tends quickly to zero.
We now consider the probability p(qm ∈ qh ) that a particular problem qm
belongs to a control set qh . This probability is modeled using an hypergeometric
distribution2 , since it reduces to the probability of extracting a winning ball from
a set of C, in Ch extractions without replacement. Then we have
p(qm ∈ qh ) = hypergeom(C, 1, Ch , 1) =

Ch
(C − 1)! Ch !(C − Ch )!
=
C! (Ch − 1)!(C − Ch )!
C

It is interesting to note that such probability is the same as if we would have
dropped the no-replacement condition in the extraction, and so it suggest that,
from a statistical point of view, the condition of uniqueness of the test problems
in the same qh can be dropped.
We now turn our attention to pCF . In order to quantify such probability, we
ﬁrst need to estimate the mean number s¯ of test problems that each user shares
with the other malicious hosts. We can try to model such quantity as the probability PM (k) that each host of a group of M has exactly k overlaps with the others. For the case M = 2, host i has probability P2 (k) = hypergeom(C, Ch , Ch , k),
since the winning problems are exactly the Ch that belong to the control set qj of
host j. Unfortunately, if we try to extend this idea to the case with three or more
hosts, we ﬁnd that we cannot simply add together the pairwise probabilities, because we must account for the overlap between all three sets. This extension is
quite diﬃcult to derive analitically with a closed form, and due to its combinatorial nature, it raises some concerns about the computational complexity of
2

We denote with hypergeom(n + m, n, N, i) the probability of having i successful
selections from a hypergeometric distribution with n winning balls out of n + m and
after N extractions.

GIVS: Integrity Validation for Grid Security

151

_

_

s

s

300

300

250

250

200

200

150

150

100

100

50

50

0
5

0
5
4
3

log2(M)

2
1
0

0

1

2

3

4

5

6

log2(C)

7

8

9

4
3

log2(M)

2
1
0

0

1

2

3

4

5

6

7

8

9

log2(C)

Fig. 1. Expected number of overlappings for diﬀerent ratios of Ch versus C. In the left
ﬁgure, Ch /C = 1/2. On the right, Ch /C = 1/4

a possible iterative description. Moreover, what we actually need is the mean
number of overlaps s¯, rather than the complete probability distribution, and so
a simulation can provide accurate estimates of s¯ at a reasonable computational
cost and with limited modelling eﬀorts.
In Figure 1 are shown the estimated s¯, as a function of the number of
malicious hosts M and of the total number of test problems C for the cases
Ch /C = 1/2 and Ch /C = 1/4. All the experiments have been conducted using
an Independent Replications Estimate of the mean s¯ values with 50 replication
of a total of over 1500 diﬀerent samples. Conﬁdence intervals have been computed for a 95% conﬁdence level; however, since such intervals have resulted to
be extremely tight to the estimated s¯, we have omitted them from all ﬁgures.
Assuming now to know the value of s¯, we can model the success probability
pCF of a malicious user using an hypergeometric distribution. We consider a
malicious user h who gives b wrong answers to the problems of Ph and answers
correctly to the s¯ test problems that he has in common with other malicious
users. In this case its probability of success pCF is the probability of never
giving a wrong answer a test problem, i.e.
(Ph − Ch )!(Ph − s¯+ − b)!
pCF ∼
= hypergeom(Ph − s¯+ , Ch − s¯+ , b, 0) =
(P − Ch − b)!(Ph − s¯+ )!
s) is used instead of s¯ since the formulas require integer values.
where s¯+ = ceil(¯
Please note that if s¯ is integer the previous formula holds with the equality. The
previous formula is deﬁned only for b < Ch − s¯+ , otherwise we have trivially
that the user always corrupts a test problems and so pCF = 0.
The qualitative behavior of pCF is shown in Figure 2, where the probability
is plotted against the ratio of undetected test problems (Ch − s¯+ ) to the number
of problems Ph . The ﬁgure is plotted with s¯ = 0, since this term simply shifts
the origin of the x-axis of a corresponding quantity (e.g. with s¯ = 10 pCF is 1
for x = Ch /Ph = 10 ). Several observations can be drawn from the shape of the
pCF . First, as intuitive, if a host tries to cheat on a single problem, its probability

152

G. Casale and S. Zanero

of success decreases linearly with the number of test problems. This has a very
important consequence on every integrity validation schema: if the correctness of
the global computation requires all subtasks to be computed correctly, a severe
performance overhead is required to grant to grant the correctness of the results.
Then, according to the model, a Grid provider would require a strong additional
cost to grant the security of such applications. However, in many cases of interest
a malicious user would need to aﬀect a large number of tasks in to aﬀect the
global solution. For example, aﬀecting a multiobjective optimization of a set
of functions over a numerical domain would probably require the simultaneous
corruption of the results on many diﬀerent subdomains for each of the objective
functions. In the case of multiple corruptions (b >> 1), the probability pCF
drops quickly as the number of test problems grows. This suggests, if possible,
to split the functional domain in the highest possible number of regions, although
a trade-oﬀ with the involved communication overhead should be also taken into
account [8]. However, even in this case, a large waste of computational resources
is required to grant low values of pCF . Therefore, using replicas could be a
suitable way to handle these problems.
3.3

Second Strategy: Validation Using Replicated Problems

We are now going to extend the model developed for the ﬁrst strategy to the
case where replicated problems replace test problems. Problem sets have now the
general form Ph = (r1 , . . . , rRh , g1 , . . . , gGh ) = rh ∪ gh , and the replicas rm ∈ rh
are drawn from a set of U problems of unknown solution, in such a way that
ρ replicas of each problem are scheduled on the Grid. As explained before, the
main advantage here is that, as a side eﬀect of the security controls, the solution
of U problems is computed, and so less computational resources are wasted for
security purposes. In fact, the minimum performance overhead when ρ replicas of
each of the U problems are sent on the Grid is OH − = (ρ−1)U that accounts for
the fact that replicas also yield the solution of the unknown problems. However,
we must handle the case where m problems have been recognized as potentially
corrupted, and so the performance overhead becomes OH = (ρ − 1)U + 2m
since we lack m solutions and these must be recomputed by trusted machines.
However, in normal conditions we expect OH ∼
= OH − .
As observed for the ﬁrst strategy, ﬁnding an analytical expression for the
average number of overlappings s¯ is quite diﬃcult. Furthermore, the model of
the second strategy should include additional constraints and problems that are
diﬃcult to be handled by means of a statistical model. In fact, if we want to
ensure that exactly ρ replicas of each of the U problems are computed on the
H hosts, during the assignment of the replicas we must satisfy the constraint
Ch H = ρU .
Moreover, we observe that the constraint excludes the possibility of using
a completely random assignment of the replicas: let us consider, for example,
Table 1, where is shown a possible random assignment of U = 10 problems with
a replication factor ρ = 2 (i.e. ρU = 20). In this case we still need to assign two
replicated problems to host h5 , but only the replicas of problems 2 and 9 are

GIVS: Integrity Validation for Grid Security

153

1

0.9

pcf − Probability of Successful Corruption

0.8

0.7

0.6

b=1
0.5

b=2
0.4

b=4
0.3

b=8
0.2

b=16
0.1

0

0

10

20

30

40

50

60

70

80

90

100

Percentage of control problems

Fig. 2. Probability pCF of accepting a
corrupted result as function of Ch /Ph
(here is s¯+ = 0) and of the number of
simultaneous wrong answers b

Host
Replicated problems
h1 1 5 7
10
10
h2 3 7 8
8
h3 3 4 6
6
h4 1 4 5
?
h5 2 9 ?
Unassigned replicated problems
Avail 2 9
Table 1. An example of bad random assignment: any further assignment would
alert h5 that he is subject to a security
control

still unassigned. But this assignment is unacceptable, because it would break the
condition that a host must receive distinct test problems. In this case, a random
strategy would lock searching for an impossible assignment of the replicas.
A simple assignment scheme that avoids locking is the following: we assign
randomly, until possible, the replicas. When a lock condition is detected, we
change some of the previous assignment in order to solve correctly the assignment. For instance, in Table 1 we could easily avoid locking assigning replicas 2
and 9 to h4 and moving 5 and 6 to h5 . It is clear that such heuristics is quite
complex to be modeled analitically, while using simulation we can easily estimate the involved overlappings s¯. In Figure 3 we show in logarithmic scale some
numerical results from a simulation with H = 48 and ρ = 2: we can identify an
exponential growth of the overlapping as the number of malicious users M and
the unknown problems U grow. This turns to be a linear growth in linear scale,
and so we conjecture an approximation s¯ ∼
= f (M, U ), where f (·, ·) is a linear
function.
Given that s¯ are known, the analysis of the probability pCF for the second
strategy results in the same formula derived for the ﬁrst strategy, where the
quantities Ch and C are replaced respectively by Rh and U . We also observe that,
in most cases, the average overlappings s¯ for the second strategy are generally
lower that those of the ﬁrst one, but this is aﬀected by the presence of H − M
non-malicious hosts. The simulation of such users is a requirement for modeling
the second strategy, since otherwise we would have trivially that s¯ = Rh . Such
hosts, instead, are not considered in the simulations of the ﬁrst strategy.
It is also interesting to note that U is in general bigger than C even with
the optimal replication factor ρ = 2. This observation suggests that choosing
between the two strategies should be done after a critical comparison of both
the performance overheads OH and the pCF for the two presented schemes,
according to the speciﬁc characteristics of the Grid and its workload.

154

G. Casale and S. Zanero

_
s
70
60
50
40
30
20
10
0
6
5
4
3
log (M)
2

2
1
0

4

5

6

9

8

7

10

11

12

log (U=R *H/ρ)
2

h

Fig. 3. Expected number of overlaps for the second strategy, with H = 48 and ρ = 2

4

Conclusions and Future Works

In this paper we have introduced GIVS, a Grid Integrity Validation Scheme,
based on the idea of using test problems in order to detect the presence of malicious users. We have deﬁned two diﬀerent strategies for generating and distributing these problems, studying performance overhead and success probabilities of
each using statistical models and simulation. We have shown that the cost for
ensuring integrity is far from negligible. Thus, future extensions of our work include optimization techniques such as the introduction of trust and reputation
mechanisms.

References
1. Foster, I., Kesselman, C.: The grid: blueprint for a new computing infrastructure.
Morgan Kaufmann Publishers Inc. (1999)
2. Oram, A., ed.: Peer-to-Peer: Harnessing the Power of Disruptive Technologies.
O’Reilly & Associates, Inc. (2001)
3. Wahbe, R., Lucco, S., Anderson, T.E., Graham, S.L.: Eﬃcient software-based fault
isolation. In: Proc. of the 14th ACM Symp. on O.S. princ., ACM Press (1993)
203–216
4. Necula, G.C.: Proof-carrying code. In: Proc. of the 24th ACM SIGPLAN-SIGACT
Symp. on Principles of programming languages, ACM Press (1997) 106–119
5. Damiani, E., di Vimercati, D.C., Paraboschi, S., Samarati, P., Violante, F.: A
reputation-based approach for choosing reliable resources in peer-to-peer networks.
In: Proc. of the 9th ACM CCS, ACM Press (2002) 207–216
6. Aberer, K., Despotovic, Z.: Managing trust in a peer-2-peer information system.
In: Proc. of the 10th Int’l Conf. on Inf. and Knowledge Manag., ACM Press (2001)
310–317
7. Chaum, D.: Blind signatures for untraceable payments. In: Advances in Cryptology
- Crypto ’82, Springer-Verlag (1983) 199–203
8. Muttoni, L., Casale, G., Granata, F., Zanero, S.: Optimal number of nodes for
computations in a grid environment. In: 12th EuroMicro Conf. PDP04. (2004)

