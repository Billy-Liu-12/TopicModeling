Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
681–689

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

A coupling environment for partitioned multiphysics simulations
applied to ﬂuid-structure interaction scenarios
Bernhard Gatzhammera,∗, Miriam Mehla , Tobias Neckela
a Department

of Computer Science, Technische Universit¨at M¨unchen, Boltzmannstr. 3, 85748 Garching

Abstract
An eﬃcient way to simulate multi-physics scenarios is given by the partitioned coupling approach. It allows
to take up established simulation codes for single ﬁelds and combine them to one multi-physics simulation tool.
The challenges appearing there range from purely technical, such as data communication, via numerical, such as
data mapping and transient coupling algorithms, to software engineering challenges, in order to pertain the inherent
modularity of the partitioned approach. We present the coupling environment preCICE, which provides black box
solutions for surface coupling to the tasks mentioned before and serves as basis for the development of new coupling
features. As application example we show ﬂuid-structure interaction scenarios simulated with ﬁxed-grid ﬂuid solvers.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: partitioned coupling, coupling algorithms, ﬂuid-structure interaction, coupling tool, octree

1. Introduction
The increasing demand for more realism and accuracy in computer simulations has lead to a whole set of “multiparadigms” (multi-scale, multi-level, multi-core, . . . ), where multi-physics is one popular representative. Typically
the domain knowledge necessary to compute a scenario using several ﬁelds is much higher than that required for a
single ﬁeld only. In addition, new types of solvers have to be investigated to ensure acccurate, stable, and eﬃcient
simulation codes. Overall, multi-physics simulations are a current challenge of increasing relevance.
When trying to solve a multi-physics problem by the monolithic simulation approach, one has to think about a
mathematical model covering all the physics involved, ﬁnd a suitable discretization for that model, and to setup a
new code eventually. This has the advantage of implicitly treating the coupling within the model. However, the
complexity of all the involved steps, from modeling to the solution of the overall system, may have a signiﬁcantly
higher complexity than that of a single ﬁeld. The implementation and maintainance of an additional source code
can be a barrier, if manpower for programming is limited. Thus, the partitioned coupling approach can be a viable
alternative. It allows to reuse existing simulation codes dedicated to simulate single physical ﬁelds, and couple them
to one multi-physics simulation tool. The advantages are obvious: no new simulation code has to be developed,
optimized solution strategies for every subﬁeld can be applied, and diﬀerent models can be compared by switching
solvers of a subﬁeld. The price of this strategy is that the coupling has to be taken care of externally. The need
∗ Corresponding

author
Email address: gatzhamm@in.tum.de (Bernhard Gatzhammer)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.073

682

B.B.
Gatzhammer
ComputerScience
Science
(2012)1–9
681–689
Gatzhammeretetal.
al. // Procedia
Procedia Computer
001(2010)

2

for communication between and synchronization of the involved solvers arises. Diﬀerent discretization grids in the
solvers make data mapping necessary.
In this paper, we show ways to implement functionalities required for the partitioned coupling of solver codes
in a reusable way, i.e. solver-independent. We present our coupling environment preCICE (precise code interaction
coupling environment), which provides black box coupling features for surface coupling of solver codes and proves
the concepts explained.
In order to validate the functionalities of our coupling environment with an application scenario, we present the
results of ﬂuid-structure interaction (FSI) scenarios as a relevant representative for two-ﬁeld multi-physics scenarios.
In Sect. 2 we describe the coupling approach of preCICE, data mapping strategies for non-matching solver grids
and acceleration techniques by spacetrees, transient coupling schemes, and data communication means. We show
numerical results and application scenarios in Sect. 3 and conclude the paper in Sect. 4.
2. Partitioned Coupling with preCICE
Goals and coupling approach. preCICE ﬁrst aims at speeding up the development of tools for the partitioned simulation of multi-physics scenarios, and second serves as a basis for developing and testing new coupling algorithms and
functionalities. In order to support the ﬁrst goal, it implements coupling functionalities in a reusable way, requires
only minimal invasions into solver codes, and keeps the solver codes decoupled from each other. To support the
second goal, the functionality of preCICE is divided into distinct modules with deﬁned internal interfaces that allow
extensions with minimal programming eﬀorts.
The idea of preCICE is not completely new, but has been inspired by many other coupling tools. The biggest
inﬂuence is coming from its predecessor, FSI❄ce (Fluid-Structure Interaction Coupling Environment), which has been
developed in [1, 2] for coupling of ﬂuid and structure solvers. A very successful commercial library for code coupling
is MPCCI (Multi-Physics Code Coupling Interface) [3], which provides an extensive set of coupling functionalities
and good support for many important commercial simulation tools. However, implicit coupling schemes are supported
only on a basic level. A whole bunch of component based tools for scientists has been developed in [4, 5, 6] (without a
claim for completeness). They support code reuse by wrapping solver codes into components with deﬁned interfaces.
An agent-based approach especially suitable for the coupling of more than two solvers is investigated with JADE [7],
which treats solvers as complex automata interacting with each other. A similar approach is taken with MUSE [8],
tailored to astrophysical applications. As to our knowledge, the above mentioned tools do not provide a complete
set of black box ready-to-use coupling functionality for general surface-based partitioned coupling as intended by
preCICE.
Figure 1 shows the peer-to-peer concept for coupling solver codes with preCICE. The solvers are directly linked
together via preCICE. The solver codes have to use the application programming interface (API) of preCICE, which is
necessary on the one hand to allow preCICE to steer the solvers, and on the other hand to make coupling functionalities
such as data mapping available to the solvers. A solver code sees only the API of preCICE but no internals of the
other coupled solver(s), which makes an independent exchange of solvers possible without any adaptions of the other
solvers. preCICE uses a triangulated surface mesh in 3D and a polygon in 2D to explicitly represent the coupling
surface. This simpliﬁes geometrical computations such as data mapping and allows to use preCICE as geometry
interface for solvers.
Data mapping. Data mapping becomes necessary when solvers with non-matching grids are coupled together. A
mapping simply exchanges data at selected grid-nodes computed by solvers A and B, respectively.
Important properties of a mapping are global conservation of energy at the interface, global conservation of loads
over the interface, accuracy, conservation of the orders of the coupled solvers, and computational eﬃciency (cf. [9]).
In general, a linear mapping can be expressed by matrix notation as
uA = HBA uB ,

(1)

with uA , uB being interface unknowns of solver A, B respectively, and HBA the matrix deﬁning the mapping. The
mapping is called conservative, i.e. the sum of all coupling values is conserved, if the column sum of the entries of

B. Gatzhammer
et al.et/ Procedia
Computer
Science
(2012)
681–689
B. Gatzhammer
al. / Procedia
Computer
Science1 00
(2010)
1–9

683
3

Figure 1: Coupling concept of preCICE applied to fully couple three solvers.

HBA equals 1
(HBA )i j = 1
i

∀ j,

(2)

∀i.

(3)

and consistent if the row sum of the entries of HBA equals 1
(HBA )i j = 1
j

Consistency means the recovery of mean values, as an example the motion of a rigid body is exactly transferred when
applying a consistent mapping. Quantities that are mapped with a conservative mapping are typically integral values
such as forces or currents. Consistent mappings are applied to values such as ﬂuxes or densities, that are scaled by
areas.
In preCICE we have currently implemented a surface-based mapping of discrete coupling interface values based
on orthogonal projection and linear interpolation. Since preCICE employs an explicit representation of the coupling
surface by a triangulation in 3D and polygon in 2D, the mapping always takes place between the surface data nodes
of a solver and the coupling mesh of preCICE. Thus, a solver does not have to provide any information besides the
coordinates of the grid nodes carrying the data values to map. The mapping of data d(x) from the solver node located
at x to the coupling mesh can be written as
e

e

αk d(x) =

d(x) =
k=0

dk ,

(4)

k=0

and the mapping from the coupling mesh to a solver node as
e

d(x) =

αk dk ,

(5)

k=0

where the dk are data on the coupling mesh nodes, and e depends on the element on the coupling mesh found for a
projection of x, i.e. either a vertex evertex = 1, an edge eedge = 2, or a triangle etriangle = 3. In order to make the
mapping conservative or consistent, we additionally ensure that
e

αk = 1.
k=0

(6)

684

B.B.
Gatzhammer
ComputerScience
Science
(2012)1–9
681–689
Gatzhammeretetal.
al. // Procedia
Procedia Computer
001(2010)

4

This condition is fulﬁlled by using the parametric coordinates of the projection point of x, which corresponds to
barycentric coordinates in case of a triangle. Figure 2 illustrates the conservative mapping from a Cartesian solver
grid to the preCICE coupling mesh in 2D.

Figure 2: Conservative mapping of data from three surface nodes of a Cartesian grid to a preCICE coupling mesh in 2D. First, closest projection
points have to be found on the coupling mesh (1). Then, the data is interpolated linearly to the corresonding coupling mesh nodes (2).

Spacetree acceleration. In general, every data mapping involves the search for geometrically neighboring points. The
data mapping described in the previous paragraphs requires the search for closest projection points on the coupling
mesh of preCICE. If N solver nodes at the coupling interface are given and the coupling mesh consists of M elements
(triangles, edges, and vertices), the overall task has a complexity of O(N M), if for every solver node x all coupling
mesh elements are checked. We have developed and implemented quadtrees and kd-trees with diﬀerent splitting rules
into preCICE and employ them to speed up the data mapping and other geometrical queries. In an optimal case, the
complexity of the data mapping can be reduced to O(N log M) when employing spacetrees.
For a quadtree in 2D, the algorithm to speed up ﬁnding projection points on the coupling mesh is as follows.
Initially, the quadtree consists of the root cell only, covering the whole domain of interest. When a query for ﬁnding
a closest projection point is issued, the algorithm starts from the root cell of the quadtree and recursively reﬁnes the
quadtree according to several parameters, which results in a subpartitioning of the coupling mesh elements into parts
contained in smaller and smaller cells. Finally, only the coupling mesh elements in the ﬁnest cell have to be taken
into account for ﬁnding a projection point. A necessary condition for reﬁning a cell is that both the query point and
elements of the coupling mesh are contained in one of the reﬁned quadtree cells (see Fig. 3(a)). Thus, the distance
of query points to the coupling mesh is crucial for the overall acceleration factor achieved with the quadtree. This
distance decreases with increasing reﬁnement of both the solver and coupling mesh when both meshes converge to
the exact coupling surface. We show results for achieved acceleration factors in Sect. 3.
Figure 3(b) shows a special case that is caused by the partitioning of space into rectangular cells. It is possible
that a projection point found to coupling mesh elements within a cell is actually not the closest when considering also
coupling mesh elements outside the cell. In order to circumvent this situation, a test has to be performed whenever
a projection point is found. The test consists of comparing the distance from the query point to the projection point
to that from the query point to the sides of the considered spacetree cell, which corresponds to drawing an imaginary
circle around the query point with radius equal to the distance to the projection point. If the circle intersects with the
sides of the cell, it cannot be guaranteed that the projection point found is the closest one. As a remedy, the projection
point search has to be redone and also neighboring cells need to be taken into account this time. This can lead to
an uprising cascade in the spacetree and decrease the acceleration factor. However, when using a suitable spacetree
reﬁnement limit such cases causing a complete uprise are rare which makes the eﬀect negligible in general.

B. Gatzhammer
et al.et/ Procedia
Computer
Science
(2012)
681–689
B. Gatzhammer
al. / Procedia
Computer
Science1 00
(2010)
1–9

(a)

685
5

(b)

Figure 3: (a) The last reﬁnement of the spacetree cell has lead to a faulty situation here. The query point (empty circle) is isolated in a cell without
any coupling mesh elements and the projection indicated by the dashed arrow cannot be determined. (b) Special case where the closest projection
point found in the spacetree cell is actually not the closest on the coupling mesh. The dashed circle indicates the distance to the projection point.

Coupling schemes. A partitioned solver combines all n systems of equations, which correspond to the physical ﬁelds
and potentially depend on unknowns di of other ﬁelds
S 1 (d2 , d3 , . . . , dn ) = d1
S 2 (d1 , d3 , . . . , dn ) = d2
..
.
S n (d1 , d2 , . . . , dn−1 ) = dn ,

(7)

where the S i represent the actions of the solver for ﬁeld i. The goal of coupling schemes is to build up the solution of
the coupled system M(d) = M(d1 , d2 , . . . , dn ) = 0, by solving the subsystems S i only.
The coupling schemes applied to achieve this goal can be categorized into explicit and implicit types. Explicit
schemes solve each subsystem only once per discrete timestep of the simulation. This solution can by synchronous or
staggered, i.e. in a certain order, and can involve the computation of predictors for the unknowns di by extrapolation,
e.g. While these schemes are favorable in terms of computational costs, their accuracy is limited depending on the
timestep length and, moreover, the stability of the overall solution can degrade when strong interactions are involved.
Both issues can be solved by implicit coupling schemes. Here, the solution sequence of subsystems is interpreted as
nested ﬁxed-point iteration function
S (di ) := S n ◦ S n−1 ◦ . . . ◦ S 1 (d2i , d3i , . . . , dni ) = dni+1 ,

(8)

i+1
d˜n = (1 − ω)dni + ωdni+1 .

(9)

where i is the iteration index of the ﬁxed-point iteration. The iteration stops when the residual is smaller than a given
convergence limit dni+1 − dni < . On convergence, the solution of the original system M(d) is obtained. While this
solves the accuracy problems of the explicit schemes, it does not yet cure from instabilities. In order to stabilize the
iterations a simple solution is to apply an underrelaxation by factor ω:

Another solution which can be applied as an underrelaxation is the Aitken-acceleration technique for vector sequences
[10, 11]. Further more sophisticated techniques apply Newton-like iteration techniques to solve the ﬁxed-point iteration [12, 13]. The important property of all these schemes is that they are problem-independent, i.e. they do work on
the di only, and can hence be applied to a variety of problems without modiﬁcations.
preCICE has implementations of a staggered explicit and implicit coupling scheme with underrelaxation and
Aitken-acceleration. It allows arbitrary subcycling of solvers for all those schemes, i.e. a solver can always perform
a smaller timestep than required, which enables to use diﬀerent time scales in the coupled solvers. However, a
synchronization to a global timestep is enforced by prescribing a dynamic maximum timestep length to ensure data
exchange with matching timestamps. The schemes can be conﬁgured to speciﬁc scenarios via XML-ﬁles.

686

B.B.
Gatzhammer
ComputerScience
Science
(2012)1–9
681–689
Gatzhammeretetal.
al. // Procedia
Procedia Computer
001(2010)

6

Data communication. A purely technical task in coupling together simulation codes is the communication of coupling data and control information. Typical communication means are based on ﬁles, employ an implementation of
communication standards such as the Message Passing Interface (MPI), or socket-based communication.
preCICE abstracts from the concrete communication means used by introducing an independent communication
layer, which allows for simple adding of new communication means. Currently, MPI is used to set up a communication
between the solvers and oﬀers three ways to establish the communication. The ﬁrst possibility is to start both solvers
separately. This approach utilizes MPI 2.0 functionlity to setup a connection between the two programs after they
have been started. This approach is simple and causes no problems when the solvers themselves run with several
MPI processes. However, it requires MPI 2.0 functionalities which are not commonly available at supercomputers
currently. The second possibility to establish a communication uses only MPI 1.0 functionalities and avoids these
problems. In this approach, the solvers need to be started at once by MPI. This approach might run into problems
when a solver runs with several MPI processes that communicate in the global communication space of MPI. This
disturbs the communication of preCICE and that of other solvers parallelized with MPI and leads to erroneous states.
A remedy is to modify the solver, which typically does not require too much work, but might be problematic when
no knowledge or access to the code is available. A third possibility to establish a communication between solvers can
be applied when diﬀerent source codes are compiled to one executable program. This program can be started with
several MPI processes, at least one per contained solver, which are assigned to the corresponding solvers initially. The
kind of communication to be used is hidden from a solver code and can be conﬁgured via XML-ﬁles.
3. Numerical Results and Application Scenarios
Data mapping acceleration by spacetrees. We have investigated the spacetree acceleration for ﬁnding closest projection points described in Sect. 2. For that, we chose the quadtree type spacetree in a 2D scenario. The scenario consists
of a coupling mesh polygon (composed by edges and vertices) that approximates a circle of radius r = 1.0 and query
points located equidistant on a concentric circle with larger radius rquery = r + d. The quadtree is covering both circles
and has a sidelength of l = 2.0. For diﬀerent measurements we changed the quadtree’s maximal reﬁnement limit hquad ,
the discretization width (length of edges) of the coupling mesh polygon hgeo , and the distance of the query points to
the circle of the coupling mesh polygon d. As a constraint, we set hgeo = d, which imitates a simulation scenario
where the coupling mesh and the solver mesh are reﬁned simultaneously in a convergence study. We ﬁrst compared
diﬀerent hquad in Fig. 4(a), and found two limiting eﬀects on the runtime that depend on d = hgeo . If hquad is chosen too
large, the coupling mesh elements are no longer partitioned ﬁne enough, such that the quadratic complexity O(MN)
becomes dominant. When hquad is chosen to be too small, the special case described in Sect. 2 becomes dominant.
An optimal value seems to be in the range hquad ≈ 100hgeo . Using this information, we performed a comparsion of
using a quadtree versus using no spacetree acceleration for the same scenario. The results in Fig. 4(b) are close to the
derived theoretical complexities.
Fluid-structure interaction scenarios. To validate the concepts of the coupling environment preCICE, we have computed several ﬂuid-structure interaction scenarios. We used the in-house ﬂuid solvers F3F and Peano, which are both
solvers for the incompressible Navier-Stokes equations based on ﬁxed Cartesian grids. While F3F uses uniformly
reﬁned grids in 3D, Peano allows for dynamically reﬁned adaptive grids in 2D and 3D. As structure solvers we used
AdhoC [14], and the commercial tool COMSOL Multiphysics [15], in order to evaluate the capabilities of coupling
with a commercial code.
Figure 5 shows two snapshots from the 2D FSI benchmark scenario FSI2 developed in [16]. The benchmark
consists of a channel with an obstacle inserted slightly away from the channels horizontal centerline. The obstacle consists of a cylinder with attached cantilever, where the cylinder is ﬁxed while the cantilever is free to move.
Three scenarios are derived from this geometrical setup (FSI1 – FSI3), with Reynolds-numbers Re = 20, 100, 200,
respectively. Scenario FSI1 leads to a minimal and stationary displacement of the cantilever, while FSI2 and FSI3
result in stationary oscillations involing large displacements of the cantilever. We computed the scenarios with Peano
and COMSOL Multiphysics, where the latter is coupled to preCICE by a scripting interface. Quantitative results for
comparison with the benchmark results are in preparation.
We used F3F and AdhoC to compute 3D channel ﬂow scenarios with inserted tower obstacle as shown in Fig. 6(a).
The tower is ﬁxed at the ground and bends due to the forces excerted by the ﬂuid. Clearly visible is the Cartesian

687
7

B. Gatzhammer
et al.et/ Procedia
Computer
Science
(2012)
681–689
B. Gatzhammer
al. / Procedia
Computer
Science1 00
(2010)
1–9
70

1000

d = 7.813e-4
d = 3.906e-4
d = 1.953e-4
d = 9.766e-5
d = 4.883e-5

60

100
runtime t [sec]

50
runtime t [sec]

no tree
quadtree

40
30
20

10

1

10
0
0.0001

0.001

0.01
spacetree h
(a)

0.1

1

0.1
1e-05

0.0001

0.001
sphere h

0.01

0.1

(b)

Figure 4: (a) Runtimes t over diﬀerent quadtree reﬁnements hquad . The diﬀerent curves correspond to diﬀerent values of d, which is set to equal
hgeo . Optimal runtimes are achieved for hquad ≈ 100 hgeo . (b) Comparison of the runtime of a quadtree with optimally chosen hquad to a projection
point computation without using a spacetree.

(a)

(b)

Figure 5: (a) Snapshot of FSI2 benchmark Peano ﬂuidsolver grid with velocity magnitudes. (b) Snapshot of FSI2 benchmark preCICE coupling
mesh and channel geometry used to set up Peano ﬂuidsolver grid. Velocity vectors show the movement of the cantilever.

structure of the (coarse) representation of the tower in the ﬂuid mesh, which is deﬁned according to the marker-andcell scheme (SMAC) described in [17]. The coupling mesh triangulation is constructed from the Gaussian integration
points of the structure solver and wraps the tower obstacle.
Figure 6(b) shows another application scenario where we used preCICE as geometry interface to assist Peano with
constructing its Cartesian grid. This scenario shows a drift ratchet, which is a micropump based on periodic pressure
oscillations (cf. [18] for more results).
4. Conclusions and Outlook
In this paper we have shown a coupling environment that facilitates the realisation of partitioned multi-physics
simulations with surface coupling. We have pointed out the advantages and possibilities coming with the partitioned

688

B.B.
Gatzhammer
ComputerScience
Science
(2012)1–9
681–689
Gatzhammeretetal.
al. // Procedia
Procedia Computer
001(2010)

(a)

8

(b)

Figure 6: (a) 3D coupled simulation with F3F and AdhoC. (b) Simulation of a drift ratchet with Peano and COMSOL Multiphysics.

approach and described the theory and implementation aspects of relevant coupling functionlities (data mapping,
coupling schemes, data communication). All functionalities discussed are implemented in a problem-independent
way, which makes them applicable to a wide range of partitioned multi-physics simulations.
As an important representative of multi-physics problems, we have shown ﬂuid-structure interaction scenarios that
were computed by diﬀerent ﬂuid-structure solver combinations coupled via preCICE. There, the use of a ﬁxed grid
approach in our ﬂuid solvers allows for large displacements of geometries involving even topology changes, which
lead to local changes of the ﬂuid solver mesh only.
For future work we are aiming to extend preCICE by more sophisticated implicit coupling schemes to form a
viable and ready-to-use solver library. Particularly, we are looking at hierarchical coupling schemes such as multigrid.
Furthermore, we want to compute more realistic FSI scenarios, which will be very large ﬂoating structures (VLFS)
involving free surfaces. Extending the application to other physical ﬁelds is another goal, here we want to look at
the coupling of molecular dynamics simulations with a lattice Boltzmann ﬂuid solver to achieve more realistic wall
boundary conditions [19, 20], e.g. Another interesting topic is the optimization of geometries in FSI scenarios, where
preCICE could provide the necessary coupling interface to an omptimization component.
5. References
[1] M. Brenk, H.-J. Bungartz, M. Mehl, R.-P. Mundani, A. D¨uster, D. Scholz, Eﬃcient interface treatment for ﬂuid-structure interaction on
cartesian grids, in: ECCOMAS COUPLED PROBLEMS 2005, Proc. of the Thematic Conf. on Computational Methods for Coupled Problems
in Science and Engineering, International Center for Numerical Methods in Engineering (CIMNE), 2005.
[2] M. Brenk, H.-J. Bungartz, M. Mehl, T. Neckel, Fluid-structure interaction on cartesian grids: Flow simulation and coupling environment, in:
H.-J. Bungartz, M. Sch¨afer (Eds.), Fluid-Structure Interaction, no. 53 in Lecture Notes in Computational Science and Engineering, Springer,
2006, pp. 233–269.
[3] R. Ahrem, P. Post, B. Steckel, K. Wolf, MpCCI: A tool for coupling CFD with other disciplines, in: Proceedings of the 5th World Conference
in Applied Fluid Dynamics, CFD - Eﬃciency and the Economic Beneﬁt in Manufacturing, 2001.
[4] J. Larson, R. Jacob, E. Ong, The model coupling toolkit: A new fortran90 toolkit for building multiphysics parallel coupled models, Int. J.
High Perf. Comp. App. 19 (3) (2005) 277–292.
[5] S. G. Parker, J. G. und T. Harman, A component-based parallel infrastructure for the simulation of ﬂuid-structure interaction, Engineering
with Computers 22 (3–4) (2006) 277–292.
[6] R. Niekamp, Component template library (ctl).
URL http://www.wire.tu-bs.de/forschung/projekte/ctl/ec tl.html
[7] J. Hegewald, M. Krafczyk, J. T
olke, A. Hoekstra, B. Chopard, An agent-based coupling platform for complex automata, in: M. B. et al. (Ed.), Computational Science –
ICCS 2008, Vol. 5102 of Lecture Notes in Computer Science, Springer, 2008, pp. 227–233.
´ Nuall´ain, D. Heggie, J. Lombardi, P. Hut, S. Banerjee, H. Belkus, T. Fragos, J. Fregeau, M. Fuji, E. Gaburov,
[8] S. P. Zwart, S. McMillan, B. O.
E. Glebbeek, D. Groen, S. Harfst, R. Izzard, M. Juri´c, S. Justham, P. Teuben, J. van Bever, O. Yaron, M. Zemp, A multiphysics and multiscale
software environment for modeling astrophysical systems, in: M. B. et al. (Ed.), Computational Science – ICCS 2008, Vol. 5102 of Lecture
Notes in Computer Science, Springer, 2008, pp. 207–216.
[9] A. de Boer, A. H. van Zuijlen, H. Bijl, Review of coupling methods for non-matching meshes, Comput. Methods Appl. Mech. Engrg. 196 (8)
(2007) 1515–1525.

B. Gatzhammer
et al.et/ Procedia
Computer
Science
(2012)
681–689
B. Gatzhammer
al. / Procedia
Computer
Science1 00
(2010)
1–9

689
9

[10] B. M. Irons, R. C. Tuck, A version of the aitken accelerator for computer iteration, International Journal of Numerical Methods in Engineering
1 (1969) 275–277.
[11] W. A. W. D. P. Mok, E. Ramm, Accelerated iterative substructuring schemes for instationary ﬂuid-structure interaction, Computational Fluid
and Solid Mechanics (2001) 1325–1328.
[12] J. Vierendeels, Implicit coupling of partitioned ﬂuid-structure interaction solvers using reduced-order models, in: H.-J. Bungartz, M. Sch¨afer
(Eds.), Fluid-Structure Interaction, no. 53 in Lecture Notes in Computational Science and Engineering, Springer-Verlag, 2006, pp. 1–18.
[13] C. Michler, E. H. van Brummelen, R. de Borst, An interface newton-krylov solver for ﬂuid-structure interaction, Int. J. Num. Meth. Fluids
(2005) 1189–1195.
[14] A. D¨uster, H. Br¨oker, H. Heidkamp, U. Heißerer, S. Kollmannsberger, R. Krause, A.Muthler, A. Niggl, V. N¨ubel, M. R¨ucker, D. Scholz,
AdhoC4 – User’s Guide, Lehrstuhl f¨ur Bauinformatik, Technische Universit¨at M¨unchen (2004).
[15] D. Pepper, X. Wang, Benchmarking comsol multiphysics 3.4 (2007).
URL http://www.comsol.de/papers/2442/
[16] J. Hron, S. Turek, Proposal for numerical benchmarking of ﬂuid-structure interaction between elastic object and laminar incompressible
ﬂow, in: H.-J. Bungartz, M. Sch¨afer (Eds.), Fluid-Structure Interaction, no. 53 in Lecture Notes in Computational Science and Engineering,
Springer-Verlag, 2006, pp. 371–385.
[17] F. H. Harlow, J. E. Welch, Numerical calculation of time-dependent viscous incompressible ﬂow of ﬂuid with a free surface, Physics of Fluids
8 (12) (1965) 2182–2189.
[18] M. Brenk, H.-J. Bungartz, M. Mehl, I. L. Muntean, T. Neckel, T. Weinzierl, Numerical simulation of particle transport in a drift ratchet, SIAM
Journal of Scientiﬁc Computing 30 (6) (2008) 2777–2798.
URL http://dx.doi.org/10.1137/070692212
[19] A. Dupuis, E. M. Kotsalis, P. Koumoutsakos, Coupling lattice boltzmann and molecular dynamics models for dense ﬂuids, Phys. Rev. E 75 (4)
(2007) 046704.
[20] M. G. Fyta, S. Melchionna, E. Kaxiras, S. Succi, Multiscale coupling of molecular dynamics and hydrodynamics: Application to dna
translocation through a nanopore, Multiscale Modeling Simulation 5 (4) (2006) 1156–1173.

