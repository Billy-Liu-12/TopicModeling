Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
This Procedia
space isComputer
reserved
for 108C
the Procedia
header, do not use it
Science
(2017) 1662–1671
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland
From Extraction to Generation
of Design Information -

From Extraction
to Generation
of Evolutionary
Design Information
Paradigm
Shift in Data
Mining via
Learning
From Extraction
to Generation
of Design Information
Paradigm Shift in Data
Mining
via
Evolutionary
Learning
Classifier
Paradigm Shift in Data
MiningSystem
via Evolutionary Learning
Classifier
System
Kazuhisa
Chiba1 andSystem
Masaya Nakata2
Classifier
1
1
1

Kazuhisa Chiba1 and Masaya Nakata2

The University of Electro-Communications,
Tokyo, Japan
1
Kazuhisa Chiba
and Masaya Nakata2
kazchiba@uec.ac.jp
The
University of Electro-Communications, Tokyo, Japan
2
Yokohama National University, Yokohama, Japan
The University ofkazchiba@uec.ac.jp
Electro-Communications, Tokyo, Japan
nakata-masaya-tb@ynu.ac.jp
2
Yokohama
National
University, Yokohama, Japan
kazchiba@uec.ac.jp
2
nakata-masaya-tb@ynu.ac.jp
Yokohama
National University, Yokohama, Japan
nakata-masaya-tb@ynu.ac.jp

Abstract
This paper aims at generating as well as extracting design strategies for a real world problem
Abstract
using
an evolutionary
learning as
classiﬁer
Data
mining
for a design
optimization
result
This
paper
aims at generating
well assystem.
extracting
design
strategies
for a real
world problem
Abstract
as
a
virtual
database
speciﬁes
design
information
and
discovers
latent
design
knowledge.
It is
using
an
evolutionary
learning
classiﬁer
system.
Data
mining
for
a
design
optimization
result
This paper aims at generating as well as extracting design strategies for a real world problem
essential
for
decision
making
in
real
world
problems.
Although
we
employed
several
methods
as
a
virtual
database
speciﬁes
design
information
and
discovers
latent
design
knowledge.
It is
using an evolutionary learning classiﬁer system. Data mining for a design optimization result
from
classic
statistics
to
artiﬁcial
intelligence
to
obtain
design
information
from
optimization
essential
for
decision
making
in
real
world
problems.
Although
we
employed
several
methods
as a virtual database speciﬁes design information and discovers latent design knowledge. It is
results,
weformay
not cognize
anything
beyond
a prepared
database.
In employed
this study,
we optimization
havemethods
applied
from
classic
statistics
to artiﬁcial
intelligence
to obtain
design information
from
essential
decision
making
in real
world problems.
Although
we
several
an
evolutionary
learning
classiﬁer
system
as
a
data
mining
technique
to
a
real
world
engineering
results,
we
may
not
cognize
anything
beyond
a
prepared
database.
In
this
study,
we
have
applied
from classic statistics to artiﬁcial intelligence to obtain design information from optimization
problem.
Consequently,
not
only
it
extracted
known
design
information
but
also
it
successfully
an
evolutionary
learning
classiﬁer
system
as
a
data
mining
technique
to
a
real
world
engineering
results, we may not cognize anything beyond a prepared database. In this study, we have applied
generated
designlearning
strategies
not
to itsystem
extract
from
the database.
The generated
do not
problem.
Consequently,
not
only
extracted
known
designtechnique
information
also
it rules
successfully
an evolutionary
classiﬁer
as
a data
mining
to abut
realdesign
world
engineering
physically
become
innovative
knowledge
because
the
prepared
dataset
include
Pareto
solutions
generated
design
strategies
not
to
extract
from
the
database.
The
generated
design
rules
do not
problem. Consequently, not only it extracted known design information but also it successfully
owing
to
complete
exploration
to
the
edge
of
the
feasible
region
in
the
optimization.
However,
physically
become
innovative
knowledge
because
the
prepared
dataset
include
Pareto
solutions
generated design strategies not to extract from the database. The generated design rules do not
this
problem
is independent
ofknowledge
the
method,
our
evolutionary
learning
classiﬁer
system
a useful
owing
to complete
exploration
to the
edge
of the
feasible
region
in the
optimization.
physically
become
innovative
because
the
prepared
dataset
include
ParetoisHowever,
solutions
method
for
incomplete
datasets.
this
problem
is
independent
of
the
method,
our
evolutionary
learning
classiﬁer
system
is
a useful
owing to complete exploration to the edge of the feasible region in the optimization. However,
method
forAuthors.
incomplete
datasets.
this
problem
is independent
the method,
our evolutionary
classiﬁer
is asystem,
useful
Keywords:
design
information
generation,
machinelearning
learning,
learningsystem
classifier
©
2017
The
Published
byofElsevier
B.V. evolutionary
Peer-review
under
responsibility
of the scientific
committee
of the International Conference on Computational Science
method
for
incomplete
datasets.
data
mining,
knowledge
discovery,
real-world
application
Keywords: design information generation, evolutionary machine learning, learning classifier system,
data
mining,design
knowledge
discovery,
real-worldevolutionary
application machine learning, learning classifier system,
Keywords:
information
generation,
data mining, knowledge discovery, real-world application

1 Introduction
1 Introduction
Design Informatics (DI) was proposed as a novel manner to eﬃciently design real-world engi1
Introduction
neering problems [3]. This approach is constructed three points of view: problem deﬁnition,
Design Informatics (DI) was proposed as a novel manner to eﬃciently design real-world engioptimization,
and [3].
data
mining.
We have
applied
large-scale
andofpractical
engineering
design
neering
problems
This
isasconstructed
three to
points
view:
problem
deﬁnition,
Design Informatics
(DI)
wasapproach
proposed
a noveltomanner
eﬃciently
design
real-world
engiproblems.
Results
realized
that
we
physically
construed
ﬁnal
design
information
obtained
by DI
optimization,
and [3].
dataThis
mining.
We have
applied to large-scale
andofpractical
engineering
design
neering problems
approach
is constructed
three points
view: problem
deﬁnition,
and
we could
return
beneﬁcial
to design
also constitute
a database
of its design
problems.
Results
realized
thatknowledge
we
construed
ﬁnal
design
information
obtained
by DI
optimization,
and data
mining.
Wephysically
have applied
to and
large-scale
and practical
engineering
design
knowledge.
In
addition,
it
was
revealed
that
design
information
acquired
by
DI
was
and
we could
return
beneﬁcial
to design
and ﬁnal
also constitute
a database
of itsroughly
design
problems.
Results
realized
thatknowledge
we physically
construed
design information
obtained
by DI
knowledge.
addition,
it wasknowledge
revealed that
designand
information
acquired
by DI was
and we couldInreturn
beneﬁcial
to design
also constitute
a database
of itsroughly
design
1
knowledge. In addition, it was revealed that design information acquired by DI was roughly
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.233

1
1

	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

classiﬁed into two groups: global and local design information. Global design information,
which applies to entire design space, is obtained by artiﬁcial neural networks, self-organizing
maps, statistical analyses, parallel coordinate plots, etc. On the contrary, local design information, which merely applies to local design space, is typically acquired by methods to discretize
design space: decision tree, rough set theory, and so on.
Global design information is close to design information based on experience and intuition which designers accumulate at designing sites. Therefore, its physical interpretation is
comparatively easy, however, it is diﬃcult to extract a hypothesis to bring innovation due to
already-known information. In contrast, since local design information is machine-learninglikely generated by discretizing design space, it is a possibility to include a hypothesis to lead
innovation though it is diﬃcult to explain physical implications. Hence, it is eﬀective to eﬃciently obtain local design information.
Hybrid rocket engines (HREs) have been expected as an innovative technology for advanced
rocket design. As part of the ISAS/JAXA’s sounding hybrid rocket project [9], our challenge is,
with artiﬁcial intelligence techniques such as evolutionary computation and machine learning,
to clarify the advantage of hybrid rocket and to extract design knowledge of the hybrid rocket.
In this study, we introduce an evolutionary learning classiﬁer system. We apply the optimization result of a hybrid rocket for generating as well as extracting design strategies. For
our purpose, we take the following steps. Firstly, we deﬁne the design optimization problem of
the hybrid rocket which aims at optimizing the eﬃciency of extinction-reignition, and next we
apply an evolutionary multi-objective optimization method to its problem [5]. Consequently, we
have derived design candidates which each is a solution optimized on its optimization problem.
While each candidate can be a speciﬁc example of the design, it still remains unclear that, how
design variables aﬀect extinction-reignition depending on other variables, and thus, how the
design variable should be set to. Hence, the next further step is to extract design information
indicating general or unique design strategies, to feed back the hybrid rocket design.
Accordingly, this paper investigates those design candidates to reveal design strategies to
eﬃciently perform extinction-reignition. Here, we introduce an evolutionary rule-based mining
system as a kind of Learning Classiﬁer Systems (LCSs) [7]. Since LCSs are capable to evolve a
minimal rule set resulting in a human-readable solution [11], LCSs are actively applied to a wide
range of data mining task [8]. Diﬀerent from the typical use of LCSs as a mining system, we
here deal with design candidates forming a set of Pareto optimal solutions with three objective
functions (see Section 2). Hence, our LCS is customized for evolving rules considered for those
objective functions. In brief, since there could be a trade-oﬀ between objective functions, that
is, there may not be rules having good values for all three objective functions, our system
evolves rules considered for a diﬀerent number of objective functions. However, it still attempts
to evolve rules having good values for as many objective functions as possible. In next section,
we explain our previous works. We describe the design optimization problem of the hybrid
rocket and show design candidates derived from its problem. Section 3 introduces our LCS for
analyzing the Pareto optimal solutions. Section 4 shows acquired rules and we interpret the
rules to understand design strategies. Finally, our conclusion is given in Section 5.

2

Sounding Hybrid Rocket Problem & Design Candidates

We will brieﬂy explain the dataset background to construe mining results. The detail is summarized in [2].
2

1663

1664	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

2.1

Sounding Hybrid Rocket Problem

We consider a conceptual design for a single-stage sounding hybrid rocket, simply composed of a
payload chamber, an oxidizer tank, a combustion chamber, and a nozzle [9]. A launch vehicle for
aurora scientiﬁc observation will be focused because more eﬃcient sounding rockets are desired
due to successful obtaining new scientiﬁc knowledge on the aurora observation by ISAS/JAXA
in 2009. In addition, a single-stage hybrid rocket problem ﬁts for resolving fundamental physics
regarding HREs because of its simplicity.
2.1.1

Objective Functions

Three objective functions are deﬁned. First objective is maximizing the downrange in the
lower thermosphere (altitude from 90 to 150 [km]) Rd [km] (OBJ1 ). Second is maximizing the
duration in the lower thermosphere Td [sec] (OBJ2 ). It recently turns out that atmosphere
has furious and intricate motion in the lower thermosphere due to energy injection, from which
derives aurora, from high altitude. The view of these objective functions is to secure the
horizontal distance and time for competently observing atmospheric temperature and the wind
so that the thermal energy balance is elucidated on atmospheric dynamics. Third objective is
minimizing the initial gross weight of launch vehicle Mtot (0) [kg] (OBJ3 ), which is generally
the primary proposition for space transportation. Current missions of scientiﬁc observations
are merely implemented on ballistic trajectories. If major expansion of Rd or Td can be fulﬁlled
due to eﬃcient extinction-reignition operations, we obtain a distinct paradigm shift of scientiﬁc
observation missions.
2.1.2

Design Variables
(1st)

We use 10 design variables: oxidizer ﬂux on 1st combustion ṁox [kg/sec] (dv1 ), oxidizer
(2nd)
ﬂux on 2nd combustion ṁox
[kg/sec] (dv2 ), fuel length Lfuel [m] (dv3 ), initial radius of port
(total)
(1st)
rport (0) [m] (dv4 ), total combustion time tburn [sec] (dv5 ), ﬁrst combustion time tburn [sec]
(dv6 ), extinction time from the end of ﬁrst combustion to the beginning of second combustion
text [sec] (dv7 ), initial pressure in combustion chamber Pcc (0) [MPa] (dv8 ), aperture ratio of
nozzle ϵ [-] (dv9 ), and elevation at launch time ϕ(0) [deg] (dv10 ). Since second-time combustion
is signiﬁcant factor to understand extinction-reignition behavior, we include it in dataset for
data mining be named “dv ∗ ”. Note that there is no constraint except upper/lower limits of each
design variable. These upper/lower values are exhaustively covering the region of the design
space which is physically admitted.

2.2

Design Candidate Derivation

We used a hybrid evolutionary computation (EC) between the diﬀerential evolution and the
genetic algorithm to eﬃciently generate a hypothetical dataset using exact solutions. The detail
of this result is summarized in [2]. The population size is set to be 18 in one generation. The
hybrid EC is performed until 4500 generations. The generation number is decided by evolution
convergence. The hybrid EC consequently generates two discontinuous connecting and convex
nondominated surfaces except several isolated individuals. A dataset consists of 1000 Pareto
optimal solutions derived from a multi-objective optimization technique on the hybrid rocket
design problem. Fig. 1-b) conﬁrms that the pareto optimal solutions in the dataset have a
tradeoﬀ between three object values. As shown in Fig. 1-a), each solution is composed of
∗
∗
11 optimized values of design variables dv1 , dv2 , · · · , dv10 , dv(11)
(only dv(11)
is implicitly
3

	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671



input


 

dv1
0.57
0.41
0.40
0.78

dv2
0.09
0.10
0.99
0.23

···
···
···
···
···
..
.

∗
dv(11)
0.55
0.68
0.73
0.43

obj1
0.31
0.24
0.20
0.89

0.33

0.42

···

0.10

1.00

output


a) Example of dataset



obj2
0.80
0.81
0.82
0.78
..
.

obj3
0.38
0.35
0.34
0.20

0.32

0.29
b) Dataset plotted into objective space

Figure 1: The dataset consisting of pareto optimal solutions.
optimized) and 3 objective values obj1 -obj3 ; the design variable values and objective values are
converted to be normalized values.

3

Evolutionary Rule-Based Data Mining System

Our system is inspired from Learning Classiﬁer System called LCS [7] which is an approach of
evolutionary rule-based machine learning. We introduce an LCS as a mining tool for Pareto
optimal solutions, called LCS-POS. The rest of section describes a brief concept of LCS-POS
diﬀerent from existing LCSs and then a speciﬁc mechanism.

3.1
3.1.1

Concept
Learning Accurate and Optimized Rules

We use a condition-prediction rule to represent a design strategy. The condition part indicates
a combination of design variable values dvi , and the prediction part indicates expected objective
values objj when the rule is applied. Here, we want to acquire rules which accurately predict
the objective values. While many modern LCSs are designed to learn such accurate rules, e.g.,
XCS [12], we further want to learn rules optimized for the objective functions. Speciﬁcally,
since we aim to extract design strategies which optimize objective functions, the accurate rules
should also have as max- imum or minimum objective values as possible. Technically, in the
system, the accurate and optimized rules are deﬁned with two threshold parameters which both
deﬁnes accurate rules and optimized rules respectively (see Section 3.2).
3.1.2

Rule Exploration on Multiobjective Functions

Ideally, we want to acquire accurate rules optimized for all three objective functions if those
rules exist. However, since the design candidates are a set of Pareto optimal solutions, there
could be a trade-oﬀ between the objective functions. Hence, we permit to have rules optimized
with a diﬀerent number of objective functions, and then we can consider the optimized rules for
one objective function, for two of three objective functions, or for all three objective functions.
4

1665

1666	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

While LCS-POS is designed to acquire those diﬀerently optimized rules, it attempts to evolve
rules optimized for as many object functions as possible. In other words, LCS-POS evolutionary
detects how many objective functions can be optimized together. For knowledge discovery, this
can be an advantage of LCS-POS, because LCS-POS would ex- tract various design strategies
for diﬀerent combinations of objective functions.

3.2

Rule Format

A rule consists of a condition and the following ﬁve parameters: a prediction pj , a prediction
error ϵj , a niche size ns, a ﬁtness F and a number of optimized objective functions nobj .
The condition C speciﬁes inputs (or design candidates in the dataset) which its rule can be
applied. The condition is a set of sub-conditions, denoted by C = {c0 , c1 , · · · , c11 }, where ci
is a sub-condition applied for a design variable dvi . Each ci consists of a lower value li and
an upper value ui such that 0 ≤ li ≤ ui ≤ 1, both specifying a numerical range of design
variable. Accordingly, when li and ui are set close to 0 and 1 respectively, its sub-condition
represents a general numerical range of design variable, resulting in a generalized rule. The
prediction p = {p1 , p2 , p3 } and the prediction error ϵ = {ϵ1 , ϵ2 , ϵ3 } are used for calculating F .
Each prediction pj and each prediction error ϵj indicate an average of objective value objj and
its error respectively. F is used for identifying an accurate and optimized rule. ns indicates a
number of overlapping rules. Finally, nobj indicates that how many objective functions its rule
has been optimized for.
To deﬁne the accurate and optimized rules, we introduce the following two threshold parameters. The maximum permitted error ϵθ and the maximum permitted prediction pθ . We deﬁne
that accurate rules for the objective function OBJj have ϵj less than ϵθ . Similarly, we deﬁne
that the optimized rules for OBJj have pj less than pθ . Note that, while OBJ1 , OBJ2 are
maximizing functions, LCS-POS internally considers them as minimizing functions to simplify
the mechanism. The objective values obj1 and obj2 are simply converted to 1−obj1 and 1−obj2
when identifying the optimized rules.

3.3

Mechanism

As shown in Fig. 2, our system consists of following four components: rule-initialization
which generates an initial rule set; rule-evaluation which calculates rules’ parameters; rulesubsumption which subsumes rules to more general rules; ﬁnally, rule-evolution which recombines rules with genetic operators. The rule-initialization is called once at the start, and then,
other three components are repeated to evolve rules maximizing the rules’ ﬁtness.

3.3.1

Rule Initialization

To build the initial rule set, a covering operator takes place [1]. For each input (i.e., a design
candidate) in the dataset, the system generates a rule which can be applied to its input. Specifically, the condition of generated rule for a input is determined as; for the design variable value
dvi of the input, li and ui of each sub-condition ci are set to a random value but should be
satisﬁed with li ≤ dvi ≤ ui . Note that, if the rule set has already included rules applicable to
a input, that is, all design variable values are matched to the corresponding sub-conditions of
existing rule (i.e., li ≤ dvi ≤ ui ), the covering operator does not take place.
5

	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

Figure 2: The overview of proposed mechanism.
3.3.2

Rule Evaluation

After the rule initialization or the rule evolution is executed, the parameters of each rule r
are updated with the following order: pj , ϵj , ns, nobj , and F . pj for objj , as in Eq. (1a), is
simply calculated as the average of objective values of inputs which its rule can be applied.
Note that, in Eq. (1a), s ∈ sr indicates an input s belonging to a subset of inputs sr which
the rule r can be applied; objjs is the j-th objective value of s and |sr | is a number of input
in the subset sr . We call |sr | as a correspondent number, which indicates a generality of rule.
Then, the prediction error is calculated as an absolute error of pj against the objective value
(see Eq. (1b)).
pj =

∑ objjs
,
|sr |
s∈s

(1a)

r

∑ |pj − objjs |
ϵj =
.
|sr |
s∈s

(1b)

r

To calculate F , we firstly calculate a rule’s validity η = {η1 , η2 , η3 } which is used for identifying
the accurate and optimized rule. ηj for OBJj is calculated from an accuracy Ej and an
optimality Pj .

1
if ϵj < ϵθ
E j = ϵθ
,
(2a)
otherwise

ϵj

1
if p′j < pθ
p
θ
.
(2b)
Pj =
 ′ otherwise
pj

Ej identifies an accurate rule, and as in Eq. (2a), Ej is set to the maximum value 1 when ϵj
is less than ϵθ , indicating an accurate rule. Otherwise, a value less than 1 depending on ϵj .
Similar to Ej , Pj is maximally set to 1 when p′j is less than pθ . Otherwise a value less than 1
(See Eq. (2b)). Note that, to consider the minimizing functions, p′j is set to 1 − p1 and 1 − p2
for j = 1, 2; for j = 3, p′j is set to p3 . Then, each ηj is calculated as in Eq. (3). Hence, we
can identify a rule with ηj = 1 as an accurate and optimized rule for the j-th object function
6

1667

1668	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

OBJj . ns of rule is set to a number of overlapping rules which can be applied to the same
inputs matched with its rule as in [1]. As a result, nobj is set to a count value of ηj = 1 in η.
ηj = Ej · Pj .

(3)

Finally, F is calculated from η. If nobj is equal to or larger than 1, that is, the rule has been
identiﬁed as the accurate and optimized rule for at least one objective function, its ﬁtness is
set to 1. Otherwise, F is calculated from the maximum validity as a potential descending slope
controlled with a parameter ν:
{
1
if nobj ≥ 1
F =
.
(4)
max ηj ν otherwise
j

3.3.3

Rule Subsumption

The rule-subsumption performs to promote the generalization of rule [1]. A rule is subsumed to
a more general rule. Speciﬁcally, for two rules rk with F =1 and rl with any value of F , when
all lower values lik and upper values uki of rk are smaller and larger than that of rl respectively
(i.e., lik < lil , uki > uli , ), rk is deﬁned as having a more general condition than rl . Then, the
system decides whether the rule rl can be deleted as; if the rl is not accurate or optimized rule
with F < 1, rl is deleted to remove redundant rules. In addition, if the rl has been identiﬁed
as accurate and optimized rule (having F = 1) for the same objective functions of the rk , rl is
also deleted.
3.3.4

Rule Evolution

Finally, the system evolves rules with the genetic algorithm [6]; the system replaces 50% of
the existing rules with generated oﬀspring. It selects two rules from the rule set with the
roulette wheel selection based on the rule’s ﬁtness [1]; it copies them and performs crossover
and mutation on the copies’ conditions with the probability χ and µ respectively. The resulting
oﬀspring are inserted into the rule set and the existing rules are deleted if the number of rule
in the rule set is larger than a maximum rule set size Nrule to keep the rule set size constant.
The deleted rules are selected with a probability Pdel which is calculated as follows:
( ns )−nobj
.
(5)
Pdel =
F
Hence, the rules with a low ﬁtness value and a large niche size would be deleted. In addition,
the accurate and optimized rules for a smaller number of objective functions are also selected
for deletion.

4

Results and Discussion

Nondominated solutions to construct dataset uniformly exist in design space; search bias on
the hybrid EC may aﬀect correspondent number. However, since the convergence of the hybrid
EC was conﬁrmed by hypervolume, nondominated solutions are thoroughly distributed in the
feasible region of objective space shown in Fig. 1-b).
The advantages to generate rules using EC are summarized as follows:
• Automatically intelligent discretization of design-variable space (in this study, 11 dimensional space) can be performed.
7

	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

• The values of all objective functions can be used as an indicator to extract signiﬁcant
rules from enormous those, i.e., important design-variable space can be extracted via
objective-function space.
• The diﬀerence of its important design strategy can be intuitively compared with other
design strategies due to heatmap visualization.
The rough set theory [10] is a representative rule mining method; correspondent number is
employed as a rule selection indicator [4]. However, since an evolutionary rule-based data mining
system can avoid using rough indicator, it is considerable to be an advanced and beneﬁcial tool
for rule mining.
Since all objective functions should be approximately optimized, we set to be ϵθ of 0.05 and
nmax
obj of 3. The optimization for all objective functions may recognize sweet spots existence
and generate the rule to be in sweet spots. It is natural for the equality among objective
functions that LCS-POS does not have the arbitrariness and it generates the rules to optimize
all of them. However, if target range pθ for optimizing objective functions is too small, there
may be no correspondent individual; no rule is generated. Figure 3 shows the parameter study
result regarding pθ . When pθ = 0.25, no rule is generated. If pθ = 0.30, just two rules are
consequently generated. If pθ ≥ 0.35, we can obtain suﬃcient number of rules.
Figure 4 shows the heatmap using the exact values of the nondominated solutions. Since
detailed design information of the optimization result was summarized in [2], we will omit
this design information. We will ﬁnd novel design information generated by our system and
physically construe it.
The predicted rules are visualized in Fig. 5, which is generated under the conditions of
ϵθ = 0.05, pθ = 0.35, and nobj = 3. Roughly 40% of individuals shown in Fig. 4 have rules
with moderation. In contrast, Fig. 5 shows that almost all generated rules are optimized for an
objective function at least. Figure 5 reveals that there are two clusters for variables: obji and
dvi ; one cluster includes p1 and p2 , another includes p3 . The former cluster contains dv1 , dv5 ,
dv∗, and dv3 upper value; the latter cluster contains dv2 , dv4 , dv6 , dv8 , dv10 , and dv3 lower
value.
• Swelling of dv1 lower limit gives an eﬀect on extending p1 .

a) pθ =0.25

b) pθ =0.30

c) pθ =0.35

Figure 3: Number of the accurate and optimized rules for one objective function nobj = 1, for
two objective functions nobj = 2, and for all functions nobj = 3.
8

1669

1670	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

Figure 4: Heatmap visualization of rules: di- Figure 5: Heatmap visualization of rules: map
rect map of dataset
under the condition of ϵθ = 0.05, pθ = 0.35,
and nmax
obj = 3.
(1st)

High ṁox (dv1 ) is a requisite for maximize p1 . Namely, powerful combustion is required
for 1st burn; it fulﬁlls to barely reach the bottom region of the lower thermosphere.
• Increasing dv4 upper limit eﬀects on prolonging p2 .
Maximizing rport (0) brings the reduction of propellant mass. A body may be under a high
aspect ratio to keep suﬃcient propellant mass; it has low CD and stability. Thereupon,
duration may be indirectly prolonged.
• Growing dv7 lower/upper limit prolonging p2 .
If we will swell Td , we should reignite near the altitude of 90 [km] with free fall after
passing the summit of ﬂight path near the altitude of 150 [km]. A rocket should be rereach the altitude of near 150 [km]. Extinction should be a long time to achieve this
behavior.
LCS-POS is expected to be beneﬁcial algorithm because it evolutionary generates local design
information as well as we intuitively identify anomalous design strategies.
Note that it depends on datasets that LCS-POS generates design strategies to break unexplored feasible region in design space. If prepared dataset have dense individuals (i.e., an
evolutionary computation is enough converged to reach Pareto surface), LCS-POS cannot generate any design strategies beyond a prepared dataset. On the contrary, when a sparse dataset
is used, LSC-POS can generate beneﬁcial design strategies to ﬁll the vacancy of design space.
However, since the accuracy of machine learning is inadequate owing to dataset sparseness,
LCS-POS may not generate functional design strategies. LCS-POS is expected to be useful for
datasets to be not sparse but incomplete.

5

Conclusions

We have proposed an evolutionary rule-based mining system be named evolutionary learning
classiﬁer system for not only extracting but generating design strategies from optimization
results and we have applied it to a real world engineering problem regarding a sounding hybrid
rocket. The algorithm is independent of discretization of design space and is designed to evolve
9

	

From Extraction to Generation
of Design
Chiba and Nakata
Kazuhisa
ChibaInformation
et al. / Procedia Computer Science 108C (2017) 1662–1671

flexible rules considered for those objective functions. Consequently, not only it extracted
known design information but also it successfully generated design strategies which we cannot
construe from the optimization result. Our evolutionary learning classifier system is a useful
method for incomplete datasets. We will systematically confirm datasets’ dependencies on the
system as a future work.

Acknoledgments
Part of this study was supported by Grant-in-Aid for Scientific Research (C) 16K00295, Japan
Society for the Promotion of Science as well as the contract research JX-PSPC-44192 from
Japan Aerospace Exploration Agency.

References
[1] Martin. V. Butz and Stewart. W. Wilson. An algorithmic description of XCS. Soft Computing,
6(3–4):144–153, 2002.
[2] K. Chiba, M. Kanazaki, and T. Shimada. Eﬀective operations of extinction-reignition with simple
control of oxidizer ﬂux on a single-stage sounding hybrid rocket. In AIAA Paper 2017-0588 on
the 55th AIAA Aerospace Science Meeting. AIAA, 2017.
[3] K. Chiba, Y. Makino, and T. Takatoya. Design-informatics approach for intimate conﬁguration
of silent supersonic technology demonstrator. Journal of Aircraft, 49(5):1200–1211, 2012.
[4] K. Chiba and S. Obayashi. Knowledge discovery in aerodynamic design space for ﬂyback-booster
wing using data mining. Journal of Spacecraft and Rockets, 45(5):975–987, 2008.
[5] K. Chiba, H. Yoda, M. Kanazaki, and T. Shimada. Extinction-reignition superiority in a singlestage sounding hybrid rocket. Aerospace Science and Technology, 58:437–444, 2016.
[6] David E. Goldberg. Genetic Algorithms in Search, Optimization, and Machine Learning. Addison
Wesley, 1989.
[7] John H. Holland. Escaping Brittleness: The Possibilities of General Purpose Learning Algorithms
Applied to Parallel Rule-based system. Machine learning: An artificial intelligence approach,
2:593–623, 1986.
[8] John H. Holmes, Pier Luca Lanzi, Wolfgang Stolzmann, and Stewart W. Wilson. Learning classiﬁer
systems: New models, successful applications. Information Processing Letters, 82(1):23 – 30, 2002.
Evolutionary Computation.
[9] Y. Kosugi, A. Oyama, K. Fujii, and M. Kanazaki. Multidisciplinary and multi-objective design
exploration methodology for conceptual design of a hybrid rocket. In AIAA Paper 2011-1634,
pages 1–13. AIAA, 2011.
[10] A. Kusiak. Rough set theory: A data mining tool for semiconductor manufacturing. IEEE
Transactions on Electronics Packaging Manufacturing, 24(1):44–50, 2001.
[11] Pier Luca Lanzi. Learning classiﬁer systems: Then and now. Evolutionary Intelligence, 1:63–82,
2008.
[12] Stewart. W. Wilson. Classiﬁer Fitness Based on Accuracy. Evolutionary Computation, 3(2):149–
175, June 1995.

10

1671

