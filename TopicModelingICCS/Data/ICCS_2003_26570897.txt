A New Diﬀerential Approach for
Parametric-Implicit Surface Intersection
J. Puig-Pey, A. G´
alvez, and A. Iglesias
Department of Applied Mathematics and Computational Sciences, University of
Cantabria, Avda. de los Castros, s/n, E-39005, Santander, Spain
{puigpeyj,galveza,iglesias}@unican.es

Abstract. In this paper, we focus on the parametric-implicit surface
intersection problem. In our approach, this problem is formulated in
terms of an initial value problem of ﬁrst-order ordinary diﬀerential equations (ODEs). To this end, we take advantage of the orthogonality at
any point on the intersection curve between the tangent vector to that
curve and the normal vector to the implicit surface. This yields an initial
value system of ODEs that is numerically integrated through an adaptive Runge-Kutta method. In order to determine the initial value for this
system, a simple procedure based on the scalar and vector ﬁelds associated with the function deﬁning the implicit surface and its gradient is
described. Such a procedure yields a starting point on the nearest branch
of the intersection curve. The performance of the presented method is
analyzed by means of some illustrative examples.

1

Introduction

The intersection of surfaces is one of the most outstanding problems in many
ﬁelds, such as computational geometry, solid modeling, geometric processing,
visualization, analysis, and manufacturing of 3D entities. It appears in the countouring of surfaces [10] (intersection with series of parallel planes, cylinders,
cones, etc), in numerical-controlled machining [6] (intersection of oﬀset surfaces
with series of parallel planes), in the boundary (B-rep) representation for Constructive Solid Geometry models of the objects, in manufacturing [4] (slicing
operations for rapid prototyping, determination of collisions), etc.
During the last few years, a number of diﬀerent methods to compute the intersection of surfaces have been described in the literature1 . Basically, they can be
classiﬁed into analytical and numerical methods. Analytical methods seek exact
solutions by ﬁnding some function describing the intersection curves. Although
unaﬀected by robustness and eﬃciency limitations, they require many diﬀerent algorithms designed ad hoc for each kind of surface involved. Furthermore,
they cannot deal with non-algebraic surfaces and hence numerical methods are
1

See, for example, the excellent reviews on this topic in [11] (Chapter 12) or [16]
(Chapter 5) and the references therein. We also recommend the survey in [19]. Additional references can be found in [7].

P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 897–906, 2003.
c Springer-Verlag Berlin Heidelberg 2003

898

J. Puig-Pey, A. G´
alvez, and A. Iglesias

usually applied instead. At their turn, numerical methods can be classiﬁed into
four main categories: lattice evaluation, recursive subdivision, marching schemes
and continuation methods [19]. Another alternative classiﬁcation of the surface
intersection methods is given by the kind of surfaces involved. For instance,
Patrikalakis and Maekawa [16] distinguish four diﬀerent kinds of surfaces for intersection: rational polynomial parametric (RPP), procedural parametric (PP),
implicit algebraic (IA) and implicit procedural (IP) (see Chapter 5 of [16]).
In this paper, we address the parametric-implicit surface intersection problem, that is, the problem of computing the intersection of a parametric surface2
S(u, v) and an implicit surface f (x, y, z) = 0 (this obviously includes the case of
the RPP-IA surface intersection in Patrikalakis-Maekawa’s terminology). This
problem has a great interest for numerically controlled machining (milling) to
create machining paths for the cutting tools. In this task, we must assure that
the tool does not collide with the surface being milled at some undesired point.
As pointed out by several authors [6,11], while the surfaces to be milled are frequently free-form rational parametric surfaces, namely NURBS, the most commonly used cutting tools have cylindrical (ﬂat-endmill), spherical (ball-endmill)
or toroidal (round-endmill) shapes, which can be faithfully represented by implicit surfaces.
A number of diﬀerent solutions for this problem have been suggested. Most
of them [11,16] are based on the idea of inserting the equations of the parametric surface into the equation of the implicit one to get such intersection
curve. For low degree implicit surfaces it is possible often to obtain an implicit
curve in the parametric domain (u, v) [15,19] but it still remains a problem
for high degree surfaces. Other proposals include a combination of algebraic
and analytical methods [8], hybrid algorithms combining subdivision (based on
the divide-and-conquer methodologies), tracing and numerical methods (mainly
Newton’s method) [13], etc. Unfortunately, they exhibit a substantial loss of
accuracy making them unsuitable for practical applications. Finally, there is a
family of methods known as marching methods based on generating a sequence
of points of an intersection curve branch by stepping from a point on such a
curve in a direction determined by some local diﬀerential geometry analysis [2,
3,14]. These methods are globally incomplete since they require starting points
for every branch of the solution. Motivated by this, great eﬀort has been devoted
to the determination of such starting points by using hodographs [20], elimination methods [5] or by two local methods, namely iterative optimization and
Moore-Penrose pseudo-inverse method [1].
Another approach that is gaining interest during the last few years is the
diﬀerential scheme such as the second order boundary algebraic-diﬀerential approach in [9,10]. The method presented in this paper belongs to this last family
of methods. In our approach, the parametric-implicit surface intersection problem is formulated in terms of an initial value problem of ﬁrst-order ordinary
diﬀerential equations (ODEs). For doing so, we take advantage of the orthogonality at any point on the intersection curve between the tangent vector to
2

In this paper vectors will be denoted in bold.

A New Diﬀerential Approach for Parametric-Implicit Surface Intersection

899

that curve and the normal vector to the implicit surface. The resulting initial
value system of ODEs is then numerically integrated through an adaptive fourthorder Runge-Kutta method [18]. From this point of view, the present method
can also be classiﬁed as a marching method. As remarked above, one of the
main shortcomings of the marching methods is the need of a starting point on
the intersection curve. In this paper, a procedure to overcome this limitation is
proposed. Starting at an arbitrary point on the parametric surface, we trace a
path on that surface by following the direction indicated by the gradient of the
implicit surface. As we will show later, this simple procedure yields a starting
point on the nearest branch of the intersection curve. The performance of this
procedure will be shown by means of some illustrative examples.
The structure of this paper is as follows. In Section 2 we introduce some
basic concepts and and the terminology to be used throughout the paper. Then
a new method for computing the intersection between two surfaces given in
parametric and implicit forms is presented in Section 3. The determination of
a starting point for the marching method of this paper is discussed in Section
4 while Section 5 gives some brief comments about the numerical procedures.
In Section 6 some illustrative examples to show the good performance of the
proposed method are presented. Finally, the conclusions and future work are
discussed in Section 7.

2

Basic Concepts and Terminology

In this paper we restrict ourselves to both parametric and implicit surfaces.
In addition, it is assumed that they are also diﬀerentiable at any point. The
parametric surfaces are described by a vector-valued function of two variables:
S(u, v) = (x(u, v), y(u, v), z(u, v)),

u, v ∈ Ω ⊂ IR 2

(1)

where u and v are the surface parameters. Expression (1) is called a parameterization of the surface S. At regular points, the partial derivatives Su (u, v) and
Sv (u, v) do not vanish simultaneously. These partial derivatives deﬁne the unit
normal vector N to the surface at S(u0 , v0 ) as:
Su × Sv
(2)
|Su × Sv |
where “×” denotes the cross product.
A curve in the domain Ω can be described by means of its parametric representation {u = u(t), v = v(t)}. This expression deﬁnes a three-dimensional curve
C(t) on the surface S given by C(t) = S(u(t), v(t)). Applying the chain rule, the
tangent vector C (t) of this curve at a point C(t) becomes:
N=

C (t) = Su u (t) + Sv v (t)

(3)

In this work the curve C will usually be parameterized by the arc-length s on
the surface. Its geometric interpretation is that a constant step s traces a constant distance along an arc-length parameterized curve. Since some industrial

900

J. Puig-Pey, A. G´
alvez, and A. Iglesias

operations require an uniform parameterization, this property has several practical applications. For example, in computer controlled milling operations, the
curve path followed by the milling machine must be parameterized such that
the cutter neither speeds up nor slows down along the path. Consequently, the
optimal path is that parameterized by the arc-length. In this case:
E

du
ds

2

+2 F

du dv
+G
ds ds

dv
ds

2

=1

(4)

where E, F and G are the coeﬃcients of the First Fundamental Form of the
surface given by:
E = Su .Su ,

F = Su .Sv ,

G = Sv .Sv

(5)

and “.” indicates the dot product (see [21] for details). For the sake of clarity, in
this paper the parameter s will be strictly used to refer to a curve parameterized
by the arc-length on the surface.
Another useful tool we will use in Section 4 is given by those curves which are
tangent to the projection on a surface of a given vector ﬁeld D(x, y, z) deﬁned in
IR 3 . For example, for the constant vector D = (0, 0, 1) the curves generated by
this procedure on a surface representing a terrain are actually the trajectories
followed by the water droplets on such a terrain under the eﬀect of gravity.
As shown in [12], these curves can easily be described through a system of
ODEs. Suppose that we are given an arbitrary point P = (x, y, z) on the surface
S(u, v), the normal vector N to the surface at P and the vector value D at P of
a known vector ﬁeld D(x, y, z). We look for the curve C(s) on S which is tangent
to the orthogonal projection of D onto the tangent plane to S at P.
It is obvious that C (s) is on the tangent plane to S at P. The diﬀerential
equation for the curve is obtained from the orthogonality of the tangent vector
C (s) and the vector D × N, i.e., C (s).(D × N) = 0. From (3) we get:
du
dv
+ Sv .(D × N)
=0
(6)
ds
ds
Combining (4) and (6), the following ﬁrst-order explicit autonomous system
dv
du
and
is obtained:
of ODEs for
ds
ds

Sv .(D × N)
du


=±

2

ds

E (Sv .(D × N)) −2F (Su .(D × N))(Sv .(D × N))+G (Su .(D × N))2
Su .(D × N)



dv


 ds = ∓

Su .(D × N)
2

E (Sv .(D × N)) −2F (Su .(D × N))(Sv .(D × N))+G (Su .(D × N))2
(7)

with the initial conditions
u(0) = u0
v(0) = v0
which correspond to an initial point P0 = (x0 , y0 , z0 ) on the curve C.

(8)

A New Diﬀerential Approach for Parametric-Implicit Surface Intersection

901

On the other hand, an implicit surface is given by f (x, y, z) = 0 where f
is a diﬀerentiable scalar function. In this case, the unit normal vector N to the
(fx , fy , fz )
evaluated
surface at a non-singular point P0 = (x0 , y0 , z0 ) is N =
||(fx , fy , fz )||2
at P0 .

3

The Parametric-Implicit Surface Intersection Method

Let us consider two surfaces S1 and S2 given in parametric form S(u, v) and
in implicit form f (x, y, z) = 0, respectively. Let N2 = (fx , fy , fz ) be the unit
normal vector to S2 at a point on the intersection curve C(s) between S1 and
S2 , with s the arc-length on S1 . Following (3), the unit tangent vector T1 (s) to
the curve C(s) considered as belonging to S1 is given by:
T1 (s) =

du
dv
dC(s)
= Su
+ Sv
ds
ds
ds

Because T1 and N2 are orthogonal
T1 (s).N2 = 0 =⇒ (Su .N2 )

du
dv
+ (Sv .N2 )
=0
ds
ds

(9)

du
dv
Solving (4) and (9) for
and
, we obtain:
ds
ds

du
Sv .N2


 ds = ±

2
E(Sv .N2 ) − 2F (Sv .N2 )(Su .N2 ) + G(Su .N2 )2



dv


=∓

ds

(10)
Su .N2
E(Sv .N2 )2 − 2F (Sv .N2 )(Su .N2 ) + G(Su .N2 )2

which together with an initial point of the intersection curve:
u(0) = u0
v(0) = v0

(11)

constitutes an initial value problem for this system of explicit ﬁrst-order ordinary
diﬀerential equations. The signs ± and ∓ in (10) mean that there are two arcs
of curve starting at (u0 , v0 ) associated with the two possible opposite directions
of the tangent vector T1 (s). Note also that the vector N2 can be evaluated in
the expressions above because coordinates (x, y, z) are calculated through the
equations of S1 , S(u, v).

4

Starting Point of Intersection Curve between Two
Surfaces

In the previous section an initial value system of ODEs associated with an intersection curve between a parametric surface and an implicit one has been

902

J. Puig-Pey, A. G´
alvez, and A. Iglesias
Table 1. Algorithm for the determination of the starting point

Input:

a parametric surface S1 given by S(u, v)
an implicit surface S2 given by f (x, y, z) = 0
an arbitrary point P0 on S1

Output:

a starting point P∗ on the intersection curve between S1 and S2

Procedure:

if f (P0 ) > 0, then set k = −1 else set k = 1
Integrate system (7)-(8) with D = k.∇f (Pi ) until we reach a point
P∗ at which f (P∗ ) = 0

determined. For such a system to be unambiguously deﬁned, we must provide
a starting point on that intersection curve. As remarked in Section 1, several
methods have been described to solve this problem. In this section a new approach to determine such a starting point is discussed. The basic idea behind
this method is to take advantage of the scalar and vector ﬁelds associated with
the function of the implicit surface f (x, y, z) = 0 and its gradient.
On one hand, the function f (x, y, z) deﬁning the implicit surface can be seen
as a scalar ﬁeld splitting up IR 3 into two disjoint regions, namely f (x, y, z) > 0
and f (x, y, z) < 0, respectively. Any continuous path from one region to the another one must necessarily pass through the implicit surface. The corresponding
path-surface intersection point can easily be obtained by simply checking for a
change of the sign of the scalar value f (x, y, z). This could be considered as a
“curved ray tracing” method for point location on the implicit surface. On the
other hand, the gradient of f (x, y, z), given by ∇(f ) = (fx , fy , fz ), can be considered as a vector ﬁeld in IR 3 as follows: for any three-dimensional point P =
(x, y, z), its corresponding vector value D is given by D(x, y, z) = ∇(f (x, y, z)).
These scalar and vector ﬁelds can be successfully applied to the determination of a starting point on the intersection curve between the parametric and
the implicit surfaces. The basic idea can be summarized as follows: ﬁrstly we
consider an arbitrary point on the parametric surface. Then, we move on that
surface from this initial point following one of the directions of the gradient
vector ﬁeld ±∇f = ±(fx , fy , fz ) where f is the function deﬁning the implicit
surface. The corresponding trajectory is obtained by numerical integration of the
system (7)-(8) (see Section 2). This numerical integration is accomplished until
we reach a point on the implicit surface (i.e., a point at which f (x, y, z) = 0).
The corresponding algorithm is shown in Table 1.

5

Numerical Integration of the ODEs

The calculation of the analytical expression for u and v from (10) is not possible
in general. Fortunately, the systems (7)-(8) and (10)-(11) only involve ﬁrst-order

A New Diﬀerential Approach for Parametric-Implicit Surface Intersection

903

explicit ODEs and hence many standard numerical techniques can be applied
instead. In particular, all the numerical work has been performed by using an
adaptive 4-5-order Runge-Kutta algorithm [18] with control of absolute and relative error tolerance. In all our examples, the absolute tolerance error (a threshold
below which the value of the ith solution component is unimportant) was 10−7
while the relative tolerance error (a measure of the error relative to the size of
each solution component) was 10−4 .
In general, the method works well for any couple of parametric-implicit surfaces. It should be noticed, however, that some situations require a careful analysis: for example, when the piece consists of several parametric surfaces some
kind of continuity conditions must be imposed to assure that the diﬀerential
model is still valid in the neighbourhood of each surface boundary. On the other
hand, the domain of the involved surfaces should be taken into account during
the integration process. For example, the integration of (7)-(8) to ﬁnd a point
on the intersection curve will stop if:
– the trajectory reaches a singular point (for example, if either N or D in (7)
vanishes),
– N and D are parallel, corresponding to a maximum, minimum or saddle
point on the surface with respect to the direction of vector ﬁeld D,
– the trajectory reaches the limits of the domain of the parametric surface or
– the trajectory reaches a zero value for f (x, y, z), meaning that such a point
on the intersection curve has been obtained.
Note that such an integration yields a starting point on the nearest branch
of the intersection curve. Therefore, in the case of working with surfaces with
several branches or with trimmed surfaces (to quote just two examples), additional tests for self-intersection and searching of additional branches must be
performed. Once a starting point is obtained, the system (10)-(11) to obtain the
intersection curve between the two surfaces is integrated with the starting point
as initial value.

6

Some Illustrative Examples

In general, we can choose any parametric surface to be interesected with an
implicit one. However, because of their advantages in industrial environments,
their ﬂexibility and the fact that they can represent well a wide variety of shapes,
in this paper we will focus on NURBS surfaces. In this case, the corresponding
derivatives needed in (7) and (10) have been obtained as described in [17].
As a ﬁrst example, Fig. 1(left) shows the intersection between a (4, 4)-order
NURBS surface deﬁned by a grid of 4 × 4 control points and nonperiodic knot
vectors for both u and v and the “quartic cylinder” surface, an implicit surface
2
1
given by (x2 + y 2 )z 2 +
(x2 + y 2 − 1) = 0. In this picture, an star indicates
2
the arbitrary point on the NURBS surface at which the algorithm described
in Table 1 is applied. As described in Section 4, this algorithm yields a path

904

J. Puig-Pey, A. G´
alvez, and A. Iglesias

Fig. 1. (left) Intersection of a (4, 4)-order nonperiodic NURBS surface and the implicit
1 2 2
surface (x2 + y 2 )z 2 +
(x + y 2 − 1) = 0 ; (right) intersection curve
2

Fig. 2. (left) Intersection of a (3, 3)-order nonperiodic NURBS surface and the implicit
surface x2 + y 3 + z 5 − 1 = 0; (right) intersection curve

on the parametric surface from this arbitrary point to a starting point on the
intersection curve between both surfaces. As shown in this ﬁgure, this algorithm
exhibits a very good performance. This is not surprising since we impose the path
to follow the direction determined by the projection of the gradient of f (x, y, z)
on the parametric surface. This curve is displayed as a continuous line in both
Figs. 1(left) and (right).
Figure 2 shows the intersection between a (3, 3)-order nonperiodic NURBS
surface deﬁned by a grid of 4 × 4 control points and the implicit surface given
by x2 + y 3 + z 5 − 1 = 0 (left) as well as the obtained intersection curve (right).

A New Diﬀerential Approach for Parametric-Implicit Surface Intersection

905

Fig. 3. (left) Intersection of a (3, 3)-order nonuniform NURBS surface and the implicit
x 3
y 3 z
−
− = 0; (right) intersection curve
surface
2
2
2

Note that the parametric surface consists of two patches in both the u and
v directions. Finally, Figure 3 displays the intersection between a (3, 3)-order
nonuniform NURBS surface deﬁned by a grid of 9 × 5 control points with knot
1 1 2 2 3 3
1 2
vectors U = 0, 0, 0, , , 1, 1, 1 and V = 0, 0, 0, , , , , , , 1, 1, 1 for
3 3
4 4 4 4 4 4
the u and v directions respectively and the “cubic saddle” surface, an implicit
x 3
y 3 z
surface given by
−
− = 0.
2
2
2

7

Conclusions and Future Work

In this paper, a new method for solving the parametric-implicit surface intersection problem is proposed. In our approach, this problem is formulated in
terms of an initial value problem of ﬁrst-order ordinary diﬀerential equations
(ODEs), which is numerically integrated through an adaptive 4-5-order RungeKutta method. In order to determine the initial value for this system, a simple
procedure based on the scalar and vector ﬁelds associated with the function deﬁning the implicit surface and its gradient is described. Such a procedure yields
a starting point on the nearest branch of the intersection curve. The method is
very general and it can be applied to any couple of implicit-parametric surfaces.
Although the method has shown a very good performance in the examples
described in this paper, there is still a long way to walk. Future improvements
include the cases of self-intersecting surfaces and the analysis of the stability of
this method for singular points. On the other hand, the determination of diﬀerent
branches for the intersection curves is still an open problem that requires further
research. These and other open questions are currently under analysis and the
future results will be reported elsewhere.

906

J. Puig-Pey, A. G´
alvez, and A. Iglesias

Acknowledgments. The authors are grateful to the CICYT of the Spanish
Ministry of Science and Technology (project DPI2001-1288) and the University
of Cantabria for partial support of this work.

References
1. Abdel-Malek, K. Yeh, H.-J.: On the determination of starting points for parametric
surface intersections, Computer-Aided Design 28(1) (1997) 21–35
2. Bajaj, C., Hoﬀmann, C. M., Hopcroft, J. E. H., Lynch, R. E.: Tracing surface
intersections, Computer Aided Geometric Design 5 (1988) 285–307
3. Barnhill, R.E., Kersey, S.N.: A marching method for parametric surface/surface
intersection, Computer Aided Geometric Design 7 (1990) 257–280
4. Barnhill, R.E. (Ed.): Geometry Procesing for Design and Manufacturing, SIAM,
Philadelphia (1992)
5. Chandru, V., Dutta, D, Hoﬀmann, C.M.: On the geometry of Dupin cyclides, The
Visual Computer 5 (1989) 277–290
6. Choi, B.K., Jerard, R.B: Sculptured Surface Machining. Theory and Applications.
Kluwer Academic Publishers, Dordrecht/Boston/London (1998)
7. Farin, G.: An SSI Bibliography. In: Barnhill, R. (ed.) Geometry Processing for
Design and Manufacturing, SIAM (1992) 205–207
8. Farouki, R.T.: Direct surface section evaluation. In: Farin, G. (ed.), Geometric
Modeling. Algorithms and New Trends, SIAM (1987) 319–334
9. Grandine, T.A., Klein, F.W.: A new approach to the surface intersection problem,
CAGD 14 (1997) 111–134
10. Grandine, T.A.: Applications of contouring, SIAM Review 42 (2000) 297–316
11. Hoschek, J., Lasser, D.: Computer-Aided Geometric Design, A.K. Peters, Wellesley,
MA (1993)
12. Iglesias, A., G´
alvez, A., Puig-Pey, J.: Generating drop trajectories on parametric
surfaces. In: Peng, Q., Li, W., Yu, J. (Eds.): Proceedings of the Seventh CAD/
Graphics’2001, International Academic Publishers/World Publishing Corporation,
Beijing (2001) 350-357
13. Kriezis, G.A., Prakash, P.V., Patrikalakis, N.M.: Method for intersecting algebraic
surfaces with rational polynomial patches, Computer-Aided Design 22(10) (1990)
645–654
14. Kriezis, G.A., Patrikalakis, N.M., Wolters, F.-E.: Topological and diﬀerentialequation methods for surface reconstructions, Computer-Aided Design 24(1)
(1992) 41–55
15. Krishnan, S, Manocha, D.: Eﬃcient surface intersection algorithm based on lowerdimensional formulation, ACM Transaction on Graphics 16(1) (1997) 74–106
16. Patrikalakis, N.M., Maekawa, T.: Shape Interrogation for Computer Aided Design
and Manufacturing. Springer-Verlag New York Berlin Heidelberg (2002)
17. Piegl, L., Tiller, W.: The NURBS Book, Springer Verlag, Berlin Heidelberg (1997)
18. Press, W.H., Teukolsky, S.A., Vetterling, W.T., Flannery, B.P.: Numerical Recipes
(2nd edition), Cambridge University Press, Cambridge (1992)
19. Pratt, M.J., Geisow, A.D.: Surface-surface intersection problems. In: Gregory, J.A.
(ed.) The Mathematics of Surfaces, Clarendon Press, Oxford (1986) 117–142
20. Sederberg, T.W., Meyers, R.J.: Loop detection in surface patch intersections, Computer Aided Geometric Design 5 (1988) 161–171
21. Struik, D.J.: Lectures on Classical Diﬀerential Geometry, 2nd ed., Dover Publications, New York (1988)

