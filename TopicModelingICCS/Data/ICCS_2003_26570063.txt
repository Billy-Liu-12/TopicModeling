Monte Carlo Method for Calculating the
Electrostatic Energy of a Molecule
Michael Mascagni1,2 and Nikolai A. Simonov2
1

2

Department of Computer Science,
Florida State University, Tallahassee, FL, 32306, USA,
mascagni@cs.fsu.edu
CSIT, Florida State University, Tallahassee, FL, 32306, USA,
simonov@csit.fsu.edu

Abstract. The problem of computing the electrostatic energy of a large
molecule is considered. It is reduced to solving the Poisson equation inside and the linear Poisson-Boltzmann equation in the exterior, coupled
by boundary conditions. A Monte Carlo estimate for the potential point
values, their derivatives, and the energy is constructed. The estimate is
based on the walk on spheres and Green’s function ﬁrst passage algorithms; the walk in subdomains technique; and ﬁnite-diﬀerence approximations of the boundary condition. Results of some illustrative calculations are presented.

1

Introduction

Electrostatics plays a fundamental role in intermolecular interactions and to
a large extent determines molecular properties [2,13]. There are diﬀerent approaches to the description of the electrostatic ﬁeld on the molecular level. One
of the possible and widely used models is a continuum model. For a given charge
distribution ρ(x), the electrostatic potential is determined as a solution to Poisson’s equation
− ∇ ∇u(x) = ρ(x) , x ∈ R3 ,
(1)
where is a position-dependent permittivity. In bio-molecular applications, the
geometry of a problem is taken into account by thinking of a molecule as a
cavity with point charges and constant inside. The exterior is modelled as
a dielectric medium with diﬀerent permittivity and some charge distribution.
Clearly, certain boundary conditions on the surface of a molecule have to be
added.
The common approach to solving these kinds of problems is the ﬁnitediﬀerence technique; boundary element and ﬁnite element methods are successfully used as well.
Permanent address: ICM&MG, Lavrentjeva 6, Novosibirsk 630090, Russia,
nas@osmf.sscc.ru
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 63–72, 2003.
c Springer-Verlag Berlin Heidelberg 2003

64

M. Mascagni and N. Simonov

Another possible way of treating computationally these problems comes from
the probabilistic representation of solutions to elliptic and parabolic partial differential equations as functionals of diﬀusion process trajectories [10]. Direct
computational simulation of physical diﬀusion in this case coincides with the
approximation of a Brownian motion as the solution to a stochastic diﬀerential
equation via a ﬁrst-order Euler scheme (see e.g. [11]). This approach was applied
[4] to simulation studies of diﬀusion-limited reactions. Though computationally
far from being optimal, it allows one to include diﬀerent physical phenomena
(hydrodynamic, electrostatic, etc.) into the computational scheme, and, what is
essential, it is eﬃcient enough to be competitive with deterministic methods.
It is worth noting that probabilistic representations strongly depend on
boundary conditions. In particular, taking into account reﬂective surfaces incorporates the local time spent by the diﬀusion process on the boundary [6]. Up
to now, there has been no eﬀective way to construct a computational algorithm
based on this representation. So, the only conceivable method to incorporate
the reﬂective conditions into the computational algorithm is to simulate them
directly.
There are a large number of mathematical articles and books describing
Monte Carlo methods for solving boundary value problems for the heat, Laplace
and other diﬀusion equations [3,5,14,15]. In general, these methods are based on
the recasting of a problem in the form of an integral equation and application of
the Monte Carlo technique for constructing estimates for their solution [1]. The
walk on spheres (WOS) method (described in [12]) is based on such an approach.
The Green’s function ﬁrst passage Monte Carlo method is the natural extension
of WOS. The simulation-tabulation technique [9], and last passage variants of
the algorithm [7], further extended the capabilities of stochastic computational
methods when applied to solving electrostatics problems.
This paper presents the application of diﬀerent ideas that come from computational mathematics to the construction of Monte Carlo algorithms for solving
boundary value problems that are of interest for physical biochemistry.
The rest of the paper is organized as follows. The next section is devoted to
the mathematical statement of the problem. Next we describe the algorithm for
the simplest case, and in Section 4 we present the description of the algorithm we
use for computing the internal electrostatic energy of a molecule immersed in a
dielectric media. The problem of coupling diﬀerent equations through continuity
boundary conditions was never solved via the Monte Carlo method before.
In the last part of the article results of some numerical experiments are
presented and, ﬁnally, some conclusions and possible further directions are discussed.

2

Mathematical Statement of the Problem

In this section, we consider the problem of calculating the internal energy of a
molecule. To be more exact, we will calculate the electrostatic energy – the internal energy for non-bonded electrostatic interactions between atoms constituting
a large molecule.

Monte Carlo Method for Calculating the Electrostatic Energy of a Molecule

65

Assume that the molecule in question can be described as a compact set
G ∈ R3 constructed of a large number of intersecting balls (atoms):
M

G=


M



where B(xm , rm )

B(xm , rm ) ,
m=1



B(xn , rn ) = ∅, m = 1, . . . , M .

n=m

Every spherical atom has its electrical charge, qm , which is positioned at
its center, xm , and rm is the radius of this atom (ball). Hence, the electrostatic
potential, u(x), satisﬁes Poisson’s equation (1) inside G for the particular charge
M

qm δ(x − xm ). Here, the dielectric permittivity,

density ρ(x) =

=

i,

is

m=1

constant.
The potential can be represented as the sum of two functions:
u(x) = u(0) (x) + g(x) ,

(2)

M

where g(x) =

qm
1
.
4π i |x − xm |
m=1

From (2) and (1) it follows that ∆u(0) (x) = 0 in G, and the boundary values
of u(0) are equal to u(x) − g(x).
First suppose that the molecule is grounded. Physically, this means that G is
surrounded by an ideally conducting material, and the problem of computing the
potential reduces to the interior Dirichlet boundary value problem for Poisson’s
equation (1):
u(y) = 0 , or u(0) (y) = −g(y) , y ∈ ∂G .
(3)
In the general case, the molecule is thought of as being immersed in some
dielectric (e.g. water). The classical approach is to treat the surrounding medium
as continuous with some constant permittivity, e . The distribution of dissolved
ions determines the charge density, ρ, outside G. From this it follows that the
electrostatic potential in the exterior of the molecule also satisﬁes Poisson’s equation. From statistical mechanical considerations, ions should be distributed in
accordance with the Boltzmann law. With some assumptions [2],
qjion en0j (x) sinh(qjion e u(x)/kb T ) , x ∈ G1 ,

ρ(x) = −
j

qjion e

where
is the charge of j-th type of ion (e is the unit electrical charge),
n0j (x) is the bulk number density of these ions, kb is Boltzmann’s constant, and
T is the absolute temperature (see e.g. [13]).
With this right hand side, equation (1) becomes a non-linear PoissonBoltzmann equation for the potential, u, in the domain G1 ≡ R3 \ G. For small
potential values, it may be linearized, thus leading to the equation
∆u(x) − k 2 u(x) = 0 , x ∈ G1 ,

(4)

66

M. Mascagni and N. Simonov

where k is a positive constant (its square, k 2 , is known as the Debye-H¨
uckel
screening parameter).
Equations (1) and (4) must be coupled by the continuity conditions on the
boundary of the molecule:
ui (y) = ue (y) ,

i

∂ui
=
∂n(y)

e

∂ue
, y ∈ ∂G .
∂n(y)

(5)

For convenience, we denote ui as the solution to (1) in the interior of G, and
ue as the solution of (4) in the exterior of the molecule. We suppose also that
ue (x) → 0 as |x| goes to inﬁnity.
It is a common knowledge (see e.g. [13]) that the expression for electrostatic
energy depends on the thermodynamic process that led to the resulting charge
distribution. In the case when all response functions are linear, the electrostatic
free energy of the molecule is given by
M

E=

1
um qm ,
2 m=1

(6)

where um is the non-singular part of the electrostatic potential at the center of
the m-th atom. This means that in the calculation of E we exclude the inﬁnite
self-energy of the point charges, and take um = u(0) (xm ).

3

Monte Carlo Algorithm: Grounded Molecule

To ﬁnd the energy, E, we construct a Monte Carlo algorithm based on the
properties of Brownian motion. Denote by ξ[E] a Monte Carlo estimate for E.
We represent it as a weighted sum of estimators for point values of the potential:
M

ξ[E] =

1
ξ[um ] qm .
2 m=1

Construction of every ξ[um ] = ξ[u](xm ) is based on the simulation of a Markov
(0)
(j)
chain {xm , j = 0, 1, . . . , Nm } with initial point xm = xm , m = 1, . . . , M and
random length Nm .
Here, we shall make use of the strong Markov property of Brownian motion
[8]. This makes it possible to avoid the simulation of the whole path, and to
jump from an interior point of a domain directly to its boundary. To do this,
we have to know the exact distribution of the exit point, or, which is equivalent,
the boundary Green’s function for this domain. It is clear; however, that there
is no chance of using this approach for all of G. Even the walk on spheres
approximation cannot be directly applied in this case, since when ﬁnding the
distance from a point to the boundary of the domain we have to take into account
all intricate curves formed by the intersections of the bounding surfaces.
The most eﬃcient way to simulate exit points on ∂G is to use the natural
representation of G as a union of intersecting spherical subdomains. The exit

Monte Carlo Method for Calculating the Electrostatic Energy of a Molecule

67

point from every subdomain can be modelled eﬃciently, either by the walk on
spheres method or directly. It was proved [16] that this provides a Monte Carlo
estimate that has the same properties as an estimate based on direct simulation
of the exit point.
Every subdomain of G can be thought of as a ball in this particular case. By
Poisson’s formula for a function, u, that satisﬁes the Laplace equation, at every
point x ∈ B(xc , r) we have
u(x) =
S(xc ,r)

pp (x → y) u(y)dσ(y) ,

(7)

1 r2 − |x − xc |2
(0)
is the Poisson kernel. If we put xm = xm
4πr
|x − y|3
(1)
and choose xm randomly on the spherical surface S(xm , rm ) in accordance with
(0)
(1)
the density pp (xm → xm ), which in this particular case corresponds to the
(0)
(1)
isotropic distribution since xm lies at the center of the sphere. By deﬁnition, xm
(1)
either hits the boundary or there exists a number j1 that xm ∈ S(xj1 , rj1 ). In
the latter case we simulate the next point of the Markov chain in accordance with
the Poisson kernel density on the surface S(xj1 , rj1 ). Finally, with probability
one, the path of the Markov chain terminates at the boundary after a ﬁnite
number of steps, Nm .
(i)
Consider the sequence {u(0) (xm ), i = 0, 1, . . . , Nm }. It forms a martingale,
(i+1)
(i)
since it is constructed by randomization of (7). Hence, IE(u(0) (xm )|xm ) =
(i)
u(0) (xm ), and we have
where pp (x → y) =

m)
u(0) (xm ) = IEu(0) (x(N
).
m

(8)

(0)

In the simplest case of Dirichet boundary values (3), u on the boundary surface
(N )
can be calculated exactly. Hence, we can set ξ[um ] = −g(xm m ), which gives us
M

ξ[E] = −

1
m)
g(x(N
) qm .
m
2 m=1

(9)

Proposition 1. Let G be a compact set constructed from a ﬁnite number of
intersecting balls. Suppose that the function u(0) is a solution to the Dirichlet
problem inside this domain with ﬁnite boundary values, and E is a weighted sum
of its point values (6).
Then (9) is an unbiased Monte Carlo estimator for E with ﬁnite variance.
Computation of Derivatives
Poisson’s formula (7) makes it possible to calculate not only the solution of the
Laplace equation but also its derivatives (see ([3])). Let x = xc ≡ (x(1) , x(2) , x(3) ).
Then
3(y(i) − x(i) )
∂u
(x) =
pp (x → y) u(y)dσ(y) , i = 1, 2, 3 .
(10)
∂x(i)
r2
S(x,r)
From the above and (8) it follows that

68

M. Mascagni and N. Simonov
(1)

3(xm,(i) − xm,(i) )
∂u(0)
m)
(xm ) = −IE
g(x(N
).
m
2
∂x(i)
rm

4

(11)

Monte Carlo Algorithm: General Case

Now consider u(0) to be a solution of the Laplace equation with the boundary
values u(x)−g(x). Point values of u(0) inside G can be evaluated through relation
(8), where, due to the double randomization principle (see e.g. [3]), the unknown
(N )
numbers u(0) (xm m ) can be substituted by their independent estimates.
By deﬁnition
ξ[u(0) ](y) = ξ[ψ](y) − g(y) , y ∈ ∂G ,
(12)
where by ψ(y) we mean the unknown boundary value of u(y). To construct a
Monte Carlo estimate for ψ, we make use of the boundary condition (5). Let
n(y) be the external normal vector at the point y ≡ y0 on the domain boundary.
Then, through a ﬁnite diﬀerence approximation we have
ψ(y) = pu(y − hn) + (1 − p)u(y + hn) + O(h2 ) ,

(13)

where u equals ui at points inside G, and is equal to ue in G1 . The coeﬃcient
i
p=
may be thought of as the probability of jumping back inside (y1 =
+
i
e
y − hn), whereas with the complementary probability that of the next point
being chosen as y + hn (outside). Hence,
ψ(y0 ) = IE(u(y1 )|y0 ) + O(h2 ) .

(14)

For internal points we have
u(y1 ) = IE(u(0) (y2 ) + g(y1 )|y1 ) ,

(15)

where y2 ∈ ∂G is the last point of the Markov chain of the walk in subdomains
constructed in accordance with the algorithm of the previous section.
To construct a Monte Carlo estimator in the case when y1 ∈ G1 , we can
use the walk on spheres algorithm [3]. Set y1,0 = y1 . Next, on every step of
the algorithm we ﬁnd the distance from the point, y1,i , to the boundary: di =
dist(y1,i , ∂G). Then the next point is chosen isotropically on S(y1,i , di ), and so
on, until either the distance becomes less than a prescribed number, ε, or the
chain is terminated in G1 .
We have [3]
u(y1,i ) = IE(pi u(y1,i+1 )|y1,i ) , i = 0, 1, . . . , N − 1 ,
where pi = kdi / sinh(kdi ) < 1 can be thought of as a survival probability. Hence,
u(y1,i ) = IE(Qi u(y1,i+1 )|y1,i ) ,

(16)

Monte Carlo Method for Calculating the Electrostatic Energy of a Molecule

69

where Qi = 1 with probability pi and Qi = 0 with the complementary probability. If dN < ε and QN = 1 we can set y2 ∈ ∂G to be the nearest to y1,N . Thus,
we have
u(y1 ) = IE(QN (ψ(y2 )|y1 ) + O(ε))) .
(17)
If QN = 0 we return to relations (12), (14), and therefore, simulate a jump from
the boundary in accordance with (13).
So, we see that the probability of termination of the constructed Markov
chain depends only on kdi . This means that the larger the Debye-H¨
uckel parameter, k 2 , the shorter the chain and the smaller the computational cost of the
algorithm. The mean number of steps can be exactly evaluated in the simplest
cases. For a sphere or other convex G, the probability of going to inﬁnity is O(h).
So, the mean number of points on the boundary that come from outside Ne will
be O(h−1 ) if the inﬂuence of k is not taken into account. The length of every
walk on spheres that returns to the boundary is O(log(ε)) (see [3]). Hence, the
overall number of points in the Markov chain is O(h−1 log(ε)f (k)) where f (k)
is a decreasing function of the Debye-H¨
uckel parameter.
The resulting bias in the estimator comes from the boundary condition (5)
and (17). Therefore, we have to take ε = h2 to provide an O(h) bias.
From this it follows
Proposition 2. Let G be a compact set constructed from a ﬁnite number of
intersecting balls in such a way that every part of the boundary is reachable for a
Brownian motion starting at inﬁnity, with probability proportional to its surface
area.
Suppose that the function u(0) is deﬁned by (2), where u is a solution to the
boundary value problem (1) , (4), (5), and g is bounded on ∂G.
Then the linear recurrence (12), (14), (15), (17) deﬁnes a δ-biased Monte
Carlo estimator for the weighted sum of the potential u(0) point values (6); and
the variance of this estimator is ﬁnite.
Here δ = O((Ne + Ni )h2 + Ne ε) or O(h) for ε = h2 (Ni is the number of
reﬂections inside G).

5

Results of Computational Experiments

To test the proposed algorithms we applied the constructed Monte Carlo estimators to solving several simple model problems. For some of them analytical
solutions are available. All calculations were carried out on an ordinary desktop
computer: a Dell PC with 1.3 GHz P4 processor running Windows 2000.
5.1. We consider ﬁrst the simplest case, a spherical (one-atom) molecule.
q2
The analytical solution scaled by
is
4π i R
E=

i
e (1 + kR)

−1 .

For the chosen parameters i = 4.0, e = 78.5, k = 0.104 one obtains the exact
value, −0.9538. Our calculations provided the result −0.9536 in 418 seconds. For

70

M. Mascagni and N. Simonov

the calculation parameters ε = h2 = 10−6 and N = 10000, both the bias and the
statistical error are equal to 9.6 × 10−4 (i.e. 0.1%). (We consider the statistical
error to be equal to two standard errors, σ). Note that the computation ensuring
one per cent error (ε = 10−4 , N = 120) takes only 0.4 seconds.
It is clear that the eﬃciency of the algorithm depends on the parameters
of the problem. Table 1 shows the dependence of the computational time on
the Debye-H¨
uckel parameter for an accuracy of 0.1%. The ratio of dielectric
Table 1. Normalized energy for diﬀerent values of k.
k

exact estimate

N

h

time

0.104 -0.9538 -0.9536 1.0 × 104 1.0 × 10−3 418
1.04 -0.9750 -0.9753 2.8 × 103 1.9 × 10−3 30
10.4 -0.9954 -0.9948 4.0 × 102 1.0 × 10−2 0.2

permittivities is also of great importance. Compare the fact that 0.4 seconds
were needed for computing the solution to 1% accuracy when e = 78.5 while
272 seconds were required for e = 7.85.
5.2. Further, we consider a model molecule constructed of two equal unit
spheres with unit charges of opposite signs. The distance between the centers
is set to be 1.5. In the case of a grounded molecule there is no bias and 106
trajectories ensure the statistical error of 0.1% for the energy. Its value (normalized by 1/4π i ), −0.3649, was obtained in 39 seconds. The same statistics
provide estimates for the potential and the electrostatic ﬁeld point values as
well. We have u0 (x1 ) = 0.3645, u0 (x2 ) = −0.3652 with σ = 0.0002. The estimates for the only non-zero component of the ﬁeld at points X1 and x2 give
∂u(0) /∂x(1) (x1 ) = −0.3548, ∂u(0) /∂x(1) (x2 ) = −0.3561 with σ = 0.0007.
With a ﬁnite permittivity in the exterior we obtained the result −0.3430 with
1% accuracy in 488 seconds.
After testing the algorithm on simple model conﬁgurations, we applied it
to calculating the energy of real molecules (proteins) constructed from several
hundreds of atoms. These computational experiments were conducted in collaboration with biophysicists, and their results will be presented elsewhere.

6

Discussion and Further Directions

The computational results presented in the previous section show that the constructed Monte Carlo algorithms can be eﬃciently applied for calculating the
internal energy, point values of the electrostatic potential and its derivatives,
when 1% accuracy in the result is suﬃcient.
It is essential to note, however, that it is much simpler for the random walk
methods than for conventional deterministic algorithms to take into account the

Monte Carlo Method for Calculating the Electrostatic Energy of a Molecule

71

real complicated geometrical properties of this computational domain. The implementation of the presented stochastic methods is natural and straightforward.
Considering the problem of free energy calculation, we discovered that our
method works very well for a grounded molecule and, more generally, in the case
when the Debye-H¨
uckel parameter is greater than 1. Clearly, the applicability
of the linearized Poisson-Boltzmann equation becomes questionable for large
values of k. So, the next step in our investigations will be the extension of our
algorithms to the non-linear case.
Also, it would be interesting to eliminate the time-consuming random walks
in the exterior of the molecule when k is less than 1. We have some ideas along
these lines and are currently working on their development.
Acknowledgements. The second author (N. A. Simonov) acknowledges the
kind hospitality of the School of Computational Science and Information Technology of the Florida State University (FSU), and the support of the FSU College of Arts and Sciences and FSU’s Oﬃce of Research. Both authors also thank
Dr. H.-X. Zhou for his collaboration and useful discussions.

References
1. Curtiss, J.H.: Monte Carlo methods for the iteration of the linear operators. J.
Math. Phys. 32 (1954) 209–232
2. Davis, M.E. and McCammon, J.A.: Electrostatics in biomolecular structure and
dynamics. Chem. Rev. 90 (1990) 509–521
3. Elepov, B.S., Kronberg, A.A., Mikhailov, G.A. and Sabelfeld, K.K.: Solution of
boundary value problems by Monte Carlo method. Nauka, Novosibirsk (1980) (in
Russian)
4. Ermak, D.L. and McCammon, J.A.: Brownian dynamics with hydrodynamic interactions. J. Chem. Phys. 69 (1978) 1352–1360
5. Ermakov, S.M., Nekrutkin, V.V. and Sipin, A.S.: Random processes for classical
equations of mathematical physics. Kluwer Academic Publishers, Dordrecht (1989)
6. Freidlin, M.: Functional integration and partial diﬀerential equations. Princeton
University Press, Princeton (1985)
7. Given, J.A., Mascagni, M. and Hwang, C.-O.: Continuous path Brownian trajectories for diﬀusion Monte Carlo via ﬁrst- and last-passage distributions. In:
Margenov, S., Wasniewski, J., Yalamov, P. (eds.). Lecture Notes in Computer Science, Vol. 2179. Springer-Verlag, Berlin Heidelberg New York (2001) 46–57
8. Hida, T.: Brownian motion. Springer-Verlag, Berlin Heidelberg New York (1979)
9. Hwang, C.-O., Given, J.A. and Mascagni, M.: The simulation-tabulation method
for classical diﬀusion Monte Carlo. J. Comput. Phys. 174 (2001) 925–946
10. Kac, M.H.: On some connections between probability theory and diﬀerential and
integral equations. In: Proc. 2nd Berkeley Symp. on Math. Statist. and Probability.
Univ. of California Press, Berkeley (1951) 189–215
11. Kloeden, P.E. and Platen, E.: Numerical solution of stochastic diﬀerential equations. Springer-Verlag, Berlin Heidelberg New York (1992)
12. Muller, M.E.: Some continuous Monte Carlo methods for the Dirichlet problem.
Ann. Math. Statist. 27 (1956) 569–589

72

M. Mascagni and N. Simonov

13. Naray-Szabo, G. and Warshel, A. (eds.): Computational Approaches to Biochemical Reactivity. Series: Understanding Chemical Reactivity, Vol. 19. Kluwer Academic Publishers, New York (2002)
14. Sabelfeld, K.K.: Monte Carlo Methods in Boundary Value Problems. SpringerVerlag, Berlin Heidelberg New York (1991)
15. Sabelfeld, K.K. and Simonov, N.A.: Random Walks on Boundary for solving PDEs.
VSP, Utrecht (1994)
16. Simonov, N.A.: A random walk algorithm for the solution of boundary value problems with partition into subdomains. In: Methods and algorithms for statistical
modelling. Akad. Nauk SSSR Sibirsk. Otdel., Vychisl. Tsentr, Novosibirsk (1983)
48–58 (in Russian)

