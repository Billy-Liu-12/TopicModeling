Procedia Computer Science
Volume 29, 2014, Pages 1039‚Äì1047
ICCS 2014. 14th International Conference on Computational Science

Agent-based Evolutionary Computing
for DiÔ¨Écult Discrete Problems
Michal Kowol, Aleksander Byrski, and Marek Kisiel-Dorohinicki
AGH University of Science and Technology,
Al. Mickiewicza 30, 30-059 Krak¬¥
ow, Poland
michal.kowol@gmail.com, olekb@agh.edu.pl, doroh@agh.edu.pl

Abstract
Hybridizing agent-based paradigm with evolutionary computation can enhance the Ô¨Åeld of metaheuristics in a signiÔ¨Åcant way, giving to usually passive individuals autonomy and capabilities of
perception and interaction with other ones, treating them as agents. In the paper as a follow-up
to the previous research, an evolutionary multi-agent system (EMAS) is examined in diÔ¨Écult
discrete benchmark problems. As a means for comparison, classical evolutionary algorithm
(constructed along with Michalewicz model) implemented in island-model is used. The results
encourage for further research regarding application of EMAS in discrete problem domain.
Keywords:

1

Introduction

In the paper, as a follow-up of the research presented in [20], a hybrid evolutionary-agent [19]
approach to solving continuous optimisation problems is further researches. Generally in the
state-of-the-art (see e.g., [25] or [11]) an evolutionary algorithm is used by an agent to aid
realisation of some of its tasks, often connected with learning or reasoning, or to support coordination of some group (team) activity. Other approaches use the notion of an agent for
constituting a management infrastructure for a distributed realisation of an evolutionary algorithm [26]. However, in order to utilize in full the features of evolutionary processes, that
are decentralised by nature and indeed one may imagine the incorporation of evolutionary processes into a multi-agent system at a population level [18], making the agents not only managing
entities for the solutions, but closely integrating them with these. So, besides interaction capabilities, agents may follow such actions as reproduction or removal from the system (death),
based on predeÔ¨Åned utility functions or resources they share, exchange and gather. In this way
constructed evolutionary multi-agent system (EMAS) and its numerous variants have been successfully applied to diÔ¨Äerent optimisation problems (e.g., single-criteria, multi-criteria, discrete,
continuous) [9].
Selection and peer-review under responsibility of the ScientiÔ¨Åc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.093

1039

Agent-based Evolutionary Computing . . .

Kowol, Byrski and Kisiel-Dorohinicki

This paper is devoted to a closer examination of the eÔ¨Éciency of EMAS in the problem
of optimisation of diÔ¨Écult discrete problems, namely Ô¨Ånding Low Autocorrelation Binary Sequences [17] and generation of Golomb Ruler [2]. Therefore, after recalling the basics of EMAS
and highlighting the most important aspects of the problems tackled, the experimental setting
of the examined systems are given and the outcomes of the experiments are described and
discussed. The paper is Ô¨Ånished with a concluding section.

2

Evolutionary agent-based optimization

Over the years evolutionary algorithms proved to be an eÔ¨Äective universal technique for solving
optimisation problems [4]. Instead of directly solving the given problem, subsequent populations
of potential solutions are constructed, modelling phenomena of natural evolution. This process
consists of two components: selection performed based on the solutions evaluation (Ô¨Åtness
function), and generation of new solutions with the use of variation operators (such as crossover
and mutation). The process continues until some stopping condition is reached (e.g., number
of generations, lack of changes in the best solution found so far).
In contrast, the main components of evolutionary processes‚Äîinheritance and selection‚Äîare
modelled in EMAS via agent actions of death and reproduction (see Fig. 1). Reproduction
consists in the production of a new individual in cooperation with one of its neighbours that
is chosen randomly, with the solution inherited from its parent(s) with the use of variation
operators (mutation and recombination). Assuming no global knowledge available and the
autonomy of agents, selection is based on the non-renewable resources [10].
In the simplest possible model of EMAS there is one type of agents and one resource deÔ¨Åned
(called life energy). Energy is exchanged by agents in the process of evaluation. The agent
increases its energy when it Ô¨Ånds out that one (e.g., randomly chosen) of its neighbours has
lower Ô¨Åtness. In this case, the agent takes part of its neighbour‚Äôs energy, otherwise, it passes
part of its own energy to the evaluated neighbour. The level of life energy triggers agents‚Äô
actions [18]:
‚Ä¢ Reproduction ‚Äì performed when the agent‚Äôs energy raises above a certain level, a part of
energy (usually half of its initial value) is passed to a new agent from each of its parents.
‚Ä¢ Death ‚Äì agent is removed from the system when its energy falls below a certain level, the
remaining energy is distributed among its neighbours.
‚Ä¢ Migration ‚Äì agent (with some probability) may migrate, then it is removed from one
evolutionary island and moved to another (random) according to predeÔ¨Åned topology.
Each action is attempted randomly with certain probability, and it is performed only when their
basic preconditions are met (e.g., an agent may attempt to perform the action of reproduction
only if it meets an appropriate neighbour).
The topology of an island, deÔ¨Åning the structure of inter-agent relations may be random
(full graph of connections between the agents), but in order to enhance diversity of the population, an additional level of population decomposition (beside the evolutionary islands) may be
introduced. Thus, a two-dimensional square lattice may be considered. In such lattice, diÔ¨Äerent neighbourhoods (e.g., Moore‚Äôs) and boundary conditions (e.g., periodic, reÔ¨Çexive and Ô¨Åxed)
may be utilised. In such an island, the agents may interact between themselves only providing
they are in the zone of each other‚Äôs neighborhood.
1040

Agent-based Evolutionary Computing . . .

Kowol, Byrski and Kisiel-Dorohinicki

	
	

	


	


		







	








	
	


	






	



	
	





	
	




	






(a) Parallel evolutionary algorithm (PEA)
	
	

	


	






	








	










			


	


	


	




	




	









	


	

	
	





	
	




	






(b) Evolutionary multi-agent system (EMAS)

Figure 1: Schematic presentation of the algorithms discussed in the paper

3

Selected diÔ¨Écult discrete problems

In this section two problems (namely for LABS and Golomb Ruler) are described. These
problems are diÔ¨Écult to solve, but quite easy to encompass in evolutionary environment, giving
opportunity to explore in-depth search capabilities of the presented systems.

3.1

LABS

Low Autocorrelation Binary Sequence (LABS) is an NP-hard combinatorial problem with
simple formulation. It has been under intensive study since 1960s by Physics and ArtiÔ¨Åcial
Intelligence communities. In consists in Ô¨Ånding a binary sequence S = {s0 , s1 , . . . , sL‚àí1 } with
1041

Agent-based Evolutionary Computing . . .

Kowol, Byrski and Kisiel-Dorohinicki

length L where si ‚àà {‚àí1, 1} which minimizes energy function E(S):
L‚àí1

L‚àík‚àí1

Ck (S) =

si si+k
i=0

E(S) =

Ck2 (S).

k=1

LABS has many applications in telecommunication (synchronization, pulse compression,
satellite and space applications [15], digital signal processing, high-precision interplanetary
radar measurements [31]), meteorology (calibration of surface proÔ¨Åle meteorology tools [5]),
physics (ising spin glasses, conÔ¨Åguration state analysis, statistical mechanics [6]) and chemistry
[30, 29, 6, 28, 12].
The search space for the problem with length L has size 2L and energy of sequence can be
computed in time O(L2 ). LABS problem has no constrains, so S can be represented naturally
as an array of binary values [17]. In this problem all elements are correlated ‚Äì there are no
blocks of good solutions.
One of the reason of high complexity of problem is that in LABS all elements are correlated.
One change that improves some Ci (S), has also an impact on many other Cj (S) and can lead
to big changes of solution‚Äôs energy.
The second problem is that, LABS has only few global optima for most values of L [14].
The search space is dominated by local optima. In [16] Halim compares search space to a ‚Äúgolf
Ô¨Åeld‚Äù, where GO are deep, isolated and are spreader just like ‚Äúgolf holes‚Äù.

3.2

Golomb Ruler

A correct n-marks Golomb Ruler is an ordered, distinct, nonnegative, increasing sequence of
i < j
n are
integers (g1 , g2 , . . . , gn ) such that gi < gi+1 and all distances gj ‚àí gi for 1
unique. By convention the Ô¨Årst element of the sequence g1 equals 0 and the last element an is
the length of the ruler.
Golomb Ruler was formulated by professor Solomon Wolf Golomb in 1977 [7]. It has various
applications in radio communication (signal interference), coding theory, X-ray crystallography
and radio astronomy [1, 7, 21, 22, 13, 24].
Finding the shortest n-marks Golomb ruler is challenging NP-hard combinator problem.
The search space is tremendous and it grows exponentially with number of marks [27]. This is
the main obstacle to discovering new rulers because (n + 1)‚Äìmarks problem is much larger then
n‚Äìmarks problem.

4

Experiments

The results presented in this section were obtained using distributed, extensible, component
computing environment AgE 2.7.01 . This platform is being developed as open-source project
by the Intelligent Information Systems Group at AGH-UST. It allows to execute distributed
agent-based simulation and computational tasks [8, 23]. A core of the platform was written in
Java, and several components in Scala2 were recently added.
It is quite diÔ¨Écult to Ô¨Ånd a proper competitor for EMAS (as it is a one-of-kind system,
directly hybridizing notions of agency with evolutionary computing), as The EA used for comparison followed Michalewicz model [3] and was selected as a relatively similar, general-purpose
1 http://age.iisg.agh.edu.pl

2 http://www.scala-lang.org

1042

Agent-based Evolutionary Computing . . .
1

Kowol, Byrski and Kisiel-Dorohinicki
1

EMAS
EA

Fitness

Fitness

EMAS
EA

1

10

100

1

10

Time [s]

(a) EMAS and EA Ô¨Åtness for simple instance of
LABS problem (L = 48)

(b) EMAS and EA Ô¨Åtness for diÔ¨Écult instance of
LABS problem (L = 201)
1e+09

EMAS
EA

1e+08

1e+08

1e+07

1e+07
Fitness Count

Fitness Count

1e+09

1e+06
100000

1e+06

10000

1000

1000

0

100

200

300

400

500

600

700

800

900

Time [s]

(c) EMAS and EA Ô¨Åtness count for LABS (L =
48)

EMAS
EA

100000

10000

100

100
Time [s]

100

0

100

200

300

400

500

600

700

800

900

Time [s]

(d) EMAS and EA Ô¨Åtness count for LABS (L =
201)

Figure 2: EMAS and EA comparison for simple and diÔ¨Écult instance of LABS problems

optimisation algorithm, not utilising any agent-oriented features. The parameters of both systems were made as similar, as it was possible (e.g. tournament selection was used for EA as
it is very similar to meeting mechanism present in EMAS). In the cases of variation operators
(crossover and mutation) the were of course retained completely the same for both systems.
The eÔ¨Éciency was measured with regard to time, instead of system steps (as it is usually
diÔ¨Écult to compare EMAS and PEA in this way, because one system step means something
completely diÔ¨Äerent in these two systems: in EA one step processes the whole generation, while
in EMAS‚Äîone agent).
In EA and EMAS, tournament selection with tourney size of 2 was used. For LABS problem, uniform recombination was used, since it provides a new promising starting point for the
algorithm. In Golomb Ruler problem, one point crossover was applied. In EA population size,
chance to mutation and recombination probability are 50, 0.75, 0.5 for LABS and 100, 0.2, 0.8
for Golomb, respectively. In EMAS agents‚Äôs count at the beginning, energy of reproduction,
death and transfer are 50, 45, 0, 5 for both problems. Each experiment was repeated 30 times
with the same parameters and standard deviation was presented in the graphs in addition to
the actual results. Total execution time is 900 seconds for LABS and 300 seconds for Golomb,
and in fact the time was marked on X-axis (see Figs. 2,3). In Ô¨Ågures and tables mean values of
Ô¨Åtness with standard deviations of the best-so-far solution are given. The Ô¨Åtness results were
scaled with respect to the instances of the problems tackled, and 0 means the best know optima
(minimisation assumed).
1043

Agent-based Evolutionary Computing . . .

Kowol, Byrski and Kisiel-Dorohinicki

It took about 20 hours of computations on a workstation with Intel Core 2 Quad Q8300
2.5 Ghz (4 cores), 8 GB of DDR3 RAM, Windows 7 x64 to get results for LABS and Golomb
Ruler problems presented in this paper.
For simple instance of LABS problem presented in 2a EMAS turned out to be signiÔ¨Åcantly
worse at the beginning and close (though a little bit worse) at the end of computation. On
the other hand, for signiÔ¨Åcantly harder problem 2b EMAS is worse only at the beginning of
computation. After some time EMAS evidently prevails over EA, it seems that the latter
becomes stuck in a local extremum, while EMAS is still capable of exploring the search space
(see Ô¨Ånal results presented in Tab. 1).
Note that EMAS calls Ô¨Åtness function signiÔ¨Åcantly rarer than EA (see Figs. 2c, 2d, where
aggregated counts of Ô¨Åtness function calls were presented). Based on the Ô¨Ånal results shown
in Tab. 1, it is easy to compute, that computing with EMAS requires 324 times less Ô¨Åtness
function computation (for L = 48) and 22 times less (L = 201).
The results of experiments tackling Golomb Ruler problem show for both selected instances
that EMAS becomes signiÔ¨Åcant better that EA (see Figs. 3a, 3b for comparing the actual
solutions obtained in the course of computation). EMAS still retains signiÔ¨Åcantly lower cost
of computing (in the means of Ô¨Åtness function count, see Figs. 3c, 3d). Again, Ô¨Ånal values
obtained for both systems were shown in Tab. 1.
Note that regardless of the number of Ô¨Åtness function calls, in three of the four conducted
experiments, EMAS obtained signiÔ¨Åcantly better results faster than EA (as it may be seen in
the graps showing Ô¨Åtness value in relation to time of computation).

5

Conclusion

In this paper, following already obtained preliminary results in the Ô¨Åeld of discrete optimisation,
using agent-based methods, new and more in-depth results were shown. The authors wanted to
compare EMAS with as similar as possible not-agent base algorithm. It was quite hard to Ô¨Ånd
proper competitor for EMAS, since it is unique, one-of-a-kind system. We considered several
algorithms and we found PEA the most suitable for our need. We conÔ¨Ågured as much as possible
parameters to maximize similarity between two systems. Current implementation of systems is
sequential, but the work to parallelize platform are nearly Ô¨Ånished and we are planning to carry
out new experiments. EMAS turned out to be signiÔ¨Åcantly better in the means of obtained
Ô¨Ånal Ô¨Åtness in most of the conducted tests than EA. The additional important feature of EMAS
was signiÔ¨Åcantly lower computing cost, measured both using time counted from the beginning
of computation, and number of Ô¨Åtness function calls. The advantages of the former feature is
self-evident, while for the latter, it will be much more visible, when complex Ô¨Åtness functions
are employed. Some of preliminary results applied to reverse problems were actually obtained
(see [32]), however in the near future, continuation of this topic is envisaged.
Agent-based computing paradigm has already been studied, and supported by a number
of scientiÔ¨Åc projects. One of such notable examples is ParaPhrase3 , focusing on supplying
hybrid CPU/GPU computing infrastructure via dedicated virtualisation tools. The computing
experiments presented in this paper may be treated as preliminary results, planned to be
adapted and ported to ParaPhrase infrastructure.

3 http://paraphrase-ict.eu

1044

Agent-based Evolutionary Computing . . .

Kowol, Byrski and Kisiel-Dorohinicki

EMAS
EA

Fitness

Fitness

EMAS
EA

1

10

1

100

10

100

Time [s]

Time [s]

(a) EMAS and EA Ô¨Åtness for simple instance of
Golomb problem (10‚Äìmarks)
1e+09

(b) EMAS and EA Ô¨Åtness for diÔ¨Écult instance of
Golomb problem (14‚Äìmarks)
1e+09

EMAS
EA

1e+08

1e+07
Fitness Count

Fitness Count

1e+07
1e+06
100000

1e+06
100000

10000

10000

1000

1000

100

EMAS
EA

1e+08

0

50

100

150

200

250

100

300

0

50

Time [s]

100

150

200

250

300

Time [s]

(c) EMAS and EA Ô¨Åtness count for 10‚Äìmarks
Golomb ruler

(d) EMAS and EA Ô¨Åtness count for 14‚Äìmarks
Golomb ruler

Figure 3: EMAS and EA comparison for simple and diÔ¨Écult instance of Golomb Ruler problems
Table 1: Final result

Ô¨Åtness
Ô¨Åtness count

EA
0.43 ¬± 0.03
4.2 √ó 107 ¬± 1.77 √ó 107

EMAS
0.44 ¬± 0.04
1.3 √ó 105 ¬± 4.4 √ó 103

(a) LABS L = 48

Ô¨Åtness
Ô¨Åtness count

EA
0.64 ¬± 0.01
2.72 √ó 106 ¬± 1.21 √ó 106

EMAS
0.45 ¬± 0.02
1.2 √ó 105 ¬± 2.93 √ó 103

(b) LABS L = 201

Ô¨Åtness
Ô¨Åtness count

EA
0.35 ¬± 0.10
8.47 √ó 107 ¬± 1.77 √ó 107

EMAS
0.20 ¬± 0.05
8.7 √ó 104 ¬± 3.58 √ó 103

(c) 10‚Äìmarks Golomb Ruler

Ô¨Åtness
Ô¨Åtness count

EA
0.80 ¬± 0.15
6.79 √ó 107 ¬± 8.25 √ó 105

EMAS
0.53 ¬± 0.05
9.03 √ó 104 ¬± 1.28 √ó 103

(d) 14‚Äìmarks Golomb Ruler

1045

Agent-based Evolutionary Computing . . .

Kowol, Byrski and Kisiel-Dorohinicki

Acknowledgment
The research presented in the paper was partially supported by the European Commission
FP7 through the project ParaPhrase: Parallel Patterns for Adaptive Heterogeneous Multicore
Systems, under contract no.: 288570 (http://paraphrase-ict.eu). The research presented in
this paper received partial Ô¨Ånancial support from AGH University of Science and Technology
statutory project.

References
[1] Wallace C Babcock. Intermodulation interference in radio systems. Bell Systems Technical Journal,
32:63‚Äì73, 1953.
[2] W.C. Babcock. Intermodulation interference in radio systems/frequency of occurrence and control
by channel selection. Bell System Technical Journal, 31:63‚Äì73, 1953.
[3] T. B¬®
ack, D. Fogel, and Z. Michalewicz. Vol. 1, Evolutionary Computation: Basic Algorithms
and Operators, Vol. 2, Evolutionary Computation: Basic Algorithms and Operators Advanced
Algorithms and Operators. Institute of Physics Publishing, Bristol and Philadelphia, 2000.
[4] T. Back, U. Hammel, and H.-P. Schwefel. Evolutionary computation: Comments on the history
and current state. IEEE Trans. on Evolutionary Computation, 1(1), 1997.
[5] Samuel K Barber, Paul Soldate, Erik H Anderson, Rossana Cambie, Wayne R McKinney, Peter Z
Takacs, Dmytro L Voronov, and Valeriy V Yashchuk. Development of pseudorandom binary
arrays for calibration of surface proÔ¨Åle metrology tools. Journal of Vacuum Science & Technology
B: Microelectronics and Nanometer Structures, 27(6):3213‚Äì3219, 2009.
[6] J Bernasconi. Low autocorrelation binary sequences: statistical mechanics and conÔ¨Åguration space
analysis. Journal de Physique, 48(4):559‚Äì567, 1987.
[7] Gary S Bloom and Solomon W Golomb. Applications of numbered undirected graphs. Proceedings
of the IEEE, 65(4):562‚Äì570, 1977.
[8] A. Byrski and M. Kisiel-Dorohinicki. Agent-based model and computing environment facilitating
the development of distributed computational intelligence systems. In Computational Science ICCS 2009, Proc. of 9th International Conference, volume 5545 of LNCS. Springer-Verlag, 2009.
[9] Aleksander Byrski, Rafal DreÀôzewski, Leszek Siwik, and Marek Kisiel-Dorohinicki. Evolutionary
multi-agent systems. The Knowledge Engineering Review, Accepted for publication, 2012.
[10] K. Cetnarowicz, M. Kisiel-Dorohinicki, and E. Nawarecki. The application of evolution process in
multi-agent world (MAW) to the prediction system. In M. Tokoro, editor, Proc. of the 2nd Int.
Conf. on Multi-Agent Systems (ICMAS‚Äô96). AAAI Press, 1996.
[11] Shu-Heng Chen, Yasushi Kambayashi, and Hiroshi Sato. Multi-Agent Applications with Evolutionary Computation and Biologically Inspired Technologies. IGI Global, 2011.
[12] Viviane M de Oliveira, Jos¬¥e F Fontanari, and Peter F Stadler. Metastable states in short-ranged
p-spin glasses. Journal of Physics A: Mathematical and General, 32(50):8793, 1999.
[13] R Gagliardi, J Robbins, and Herbert Taylor. Acquisition sequences in ppm communications
(corresp.). Information Theory, IEEE Transactions on, 33(5):738‚Äì744, 1987.
[14] Jos¬¥e E Gallardo, Carlos Cotta, and Antonio J Fern¬¥
andez. Finding low autocorrelation binary
sequences with memetic algorithms. Applied Soft Computing, 9(4):1252‚Äì1262, 2009.
[15] R. Garello, N. Boujnah, and Y. Jia. Design of binary sequences and matrices for space applications.
In Satellite and Space Communications, 2009. IWSSC 2009. International Workshop on, pages
88‚Äì91, 2009.
[16] Steven Halim, Roland HC Yap, and Felix Halim. Engineering stochastic local search for the low
autocorrelation binary sequence problem. In Principles and Practice of Constraint Programming,
pages 640‚Äì645. Springer, 2008.

1046

Agent-based Evolutionary Computing . . .

Kowol, Byrski and Kisiel-Dorohinicki

[17] Antonio J. Fernndez Jos E. Gallardo, Carlos Cotta. Finding low autocorrelation binary sequences
with memetic algorithms. Applied Soft Computing, 9, 2009.
[18] Marek Kisiel-Dorohinicki. Agent-oriented model of simulated evolution. In William I. Grosky and
Frantisek Plasil, editors, SofSem 2002: Theory and Practice of Informatics, volume 2540 of LNCS.
Springer, 2002.
[19] Marek Kisiel-Dorohinicki, Grzegorz Dobrowolski, and Edward Nawarecki. Agent populations as
computational intelligence. In Leszek Rutkowski and Janusz Kacprzyk, editors, Neural Networks
and Soft Computing, Advances in Soft Computing. Physica-Verlag, 2003.
[20] M. Kolybacz, M. Kowol, L. Le¬¥sniak, A. Byrski, and M. Kisiel-Dorohinicki. EÔ¨Éciency of memetic
and evolutionary computing in combinatorial optimisation. In In. Proc. of 27th European Conference on Modelling and Simulation ECMS 2013 : May 27thMay 30th, 2013, √∏Alesund, Norway.
2013.
[21] GD Martin. Optimal convolutional self-orthogonal codes with an application to digital radio. In
ICC‚Äô85; International Conference on Communications, volume 1, pages 1249‚Äì1253, 1985.
[22] Alan MoÔ¨Äet. Minimum-redundancy linear arrays. Antennas and Propagation, IEEE Transactions
on, 16(2):172‚Äì175, 1968.
[23] K. Pietak, A. Wo¬¥s, A. Byrski, and M. Kisiel-Dorohinicki. Functional integrity of multi-agent
computational system supported by component-based implementation. In Proc. of the 4th International Conference on Industrial Applications of Holonic and Multi-agent Systems, volume 5696
of LNAI. Springer-Verlag, 2009.
[24] J Robinson and A Bernstein. A class of binary recurrent codes with limited error propagation.
Information Theory, IEEE Transactions on, 13(1):106‚Äì113, 1967.
[25] Ruhul Sarker and Tapabrata Ray. Agent-Based Evolutionary Search. Springer, 2010.
[26] Robert Schaefer and Joanna Kolodziej. Genetic search reinforced by the population hierarchy.
Foundations of Genetic Algorithms, 7, 2003.
[27] James B Shearer. Some new optimum golomb rulers. Information Theory, IEEE Transactions on,
36(1):183‚Äì184, 1990.
[28] Peter F Stadler. Landscapes and their correlation functions. Journal of Mathematical chemistry,
20(1):1‚Äì45, 1996.
[29] R Turyn. Sequences with small correlation. Error correcting codes, pages 195‚Äì228, 1968.
[30] R Turyn and J Storer. On binary sequences. Proceedings of the American Mathematical Society,
12(3):394‚Äì399, 1961.
[31] Abhisek Ukil. Low autocorrelation binary sequences: Number theory-based analysis for minimum
energy level, barker codes. Digital Signal Processing, 20(2):483‚Äì495, 2010.
[32] Krzysztof Wr¬¥
obel, Pawe Torba, Maciej Paszy¬¥
nski, and Aleksander Byrski. Evolutionary multiagent computing in inverse problems. Computer Science, 14(3), 2013.

1047

