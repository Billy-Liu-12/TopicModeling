Procedia Computer Science
Volume 29, 2014, Pages 198–209
ICCS 2014. 14th International Conference on Computational Science

Deploying a Large Petascale System:
the Blue Waters Experience
Celso L. Mendes, Brett Bode, Gregory H. Bauer, Jeremy Enos, Cristina Beldica,
and William T. Kramer
National Center for Supercomputing Applications
University of Illinois
Urbana, IL 61801 - U.S.A.
{cmendes,brett,gbauer,jenos,beldica,wtkramer}@illinois.edu

Abstract
Deployment of a large parallel system is typically a very complex process, involving several steps
of preparation, delivery, installation, testing and acceptance. Despite the availability of various
petascale machines currently, the steps and lessons from their deployment are rarely described
in the literature. This paper presents the experiences observed during the deployment of Blue
Waters, the largest supercomputer ever built by Cray and one of the most powerful machines
currently available for open science. The presentation is focused on the ﬁnal deployment steps,
where the system was intensively tested and accepted by NCSA. After a brief introduction of
the Blue Waters architecture, a detailed description of the set of acceptance tests employed is
provided, including many of the obtained results. This is followed by the major lessons learned
during the process. Those experiences and lessons should be useful to guide similarly complex
deployments in the future.
Keywords: large system deployment, acceptance testing, petascale performance

1

Introduction

Blue Waters is one of the most powerful supercomputers currently available for the openscience community. Sponsored by the US National Science Foundation (NSF) and installed at
the National Center for Supercomputing Applications (NCSA) in Illinois, Blue Waters is also
the largest machine ever built by Cray. In addition, it has tremendous amounts of memory and
persistent storage. Various application groups are achieving the sustained petascale capability
of the system, and there is a huge potential for scientiﬁc discoveries in the coming years.
This paper contains two contributions that are not easy to ﬁnd in the literature. First, it
reveals several details from the machine deployment process, including information on methods
and procedures that were followed for system assessment and acceptance. Second, it provides
ﬁrst-hand lessons that we learned from that deployment, based on the obstacles that we faced
198

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.018

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

Figure 1: Blue Waters system architecture
and the solutions adopted. These experiences should become useful to guide similarly complex
deployments in the future. In addition, the paper serves as an early evaluation of Blue Waters:
the presented performance results can be used as a reference by the application groups, as they
continue to tune their codes to the Blue Waters architecture.
The remainder of this paper is organized as follows. §2 brieﬂy describes the Blue Waters
architecture, and §3 presents the timeline of its deployment. §4 shows the infrastructure created
by NCSA to support the deployment. The acceptance tests and many of their results are
presented in §5. Major lessons from the deployment are highlighted in §6. Finally, §7 concludes
our presentation.

2

Blue Waters Architecture

Blue Waters has an architecture as depicted in Figure 1. Its computational component is
heterogeneous and contains both XE and XK compute nodes; an XE node contains two 2.3 GHz
AMD-Interlagos x86 processors with 16 integer cores per processor, whereas an XK node has
one AMD-Interlagos processor and one NVIDIA-Kepler K20X GPU. The XE nodes have 64 GB
of memory, while the XK nodes have 32 GB for the CPU and 6 GB for the GPU. Besides the
compute nodes, the system also has a number of service nodes, which provide functions such as
I/O, external access, boot, and others. The total number of nodes is 27,648, hosted in 12 rows
of 24 cabinets. All these nodes are interconnected by a single Gemini-based network, with a 3D
torus topology of dimensions 24×24×24. Each Gemini router connects two nodes to the torus.
There are various external servers in Blue Waters, for services like remote login by users,
import/export of data, or transfer of data between storage devices. In particular, there are four
login servers with the same processors as in the compute nodes; these login servers are aimed
at hosting users’ editing, compilation, job submission, etc. External connectivity is provided
by WAN links with total speed beyond 100 Gbps.
Storage in Blue Waters is available in the form of disk and tape. The disk storage is composed of more than 17,000 hard-disk drives forming three Lustre ﬁle systems (/home, /projects
and /scratch, with useable capacities of 2 PB, 2 PB and 22 PB, respectively). The aggregate
transfer rate to/from the disk storage is more than 1 TBytes/second. Meanwhile, the near199

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

line storage component has four robotic tape libraries with 61 drives per library. The total
number of tape slots is beyond 63,000. While the disk storage was supplied by Cray, the tape
libraries were provided by SpectraLogic and IBM. These tape libraries comprise the largest
High-Performance Storage System (HPSS) installation in the world. The HPSS component
also includes 50 servers acting as data movers, and 1.2 PB of disk storage serving as cache to
the tapes. More information on the system can be found at the Blue Waters portal1 .
The site hosting Blue Waters is an advanced datacenter that NCSA built specially for this
purpose. It has several environmental-friendly features, including a Gold LEED certiﬁcation.
Free-cooling can be provided by three cooling towers adjacent to the building; due to the cold
weather in Illinois during a good portion of the year, those towers have provided nearly all
required cooling for several months. For available energy, the building currently has a capacity
of 24 MWatts; actual consumption by Blue Waters has typically been around 10 MWatts.

3

Deployment Timeline

The Blue Waters project started in 2006, in response to the NSF solicitation [9] fostering a
sustained petascale system. NCSA was declared the winner of that competition in August 2007.
In the following years, NCSA worked with vendors and with various application groups, selected
by NSF, to prepare their applications to run at petascale level. As part of the contract signed
with Cray, a Statement-Of-Work (SOW) was crafted, containing a sequence of steps for the
delivery by Cray of the computational part of Blue Waters. The ﬁrst of those steps was
installation of a Test and Development System (TDS), consisting of one cabinet populated
with XE and XK nodes. This machine was installed in December 2011.
Early in 2012, Cray delivered the ﬁrst 48 cabinets of the ﬁnal machine, with XE compute
nodes. This subset was named the Early Science System (ESS). In the Summer of 2012, Cray
delivered additional cabinets and integrated them to the ESS parts to form a complete 276cabinet system. At the end of that Summer, Cray also delivered most of the disk storage
component and the recently-produced NVIDIA-Kepler GPUs.
Acceptance tests by NCSA staﬀ started at the end of September 2012, and were the exclusive work on the machine in the following month. During an NSF review in December 2012,
where NCSA submitted to NSF an acceptance report comprising ﬁfteen technical documents
describing details of all tests, the Cray system was formally recommended for acceptance. Early
in 2013, the other (non-Cray) parts of the system were completed, including the HPSS nearline
storage and the full WAN connectivity. Simultaneously, all users approved by NSF were granted
access to the system. Blue Waters was oﬃcially launched in a ceremony on March 28, 2013,
and production usage started a few days later. In the Summer of 2013, 12 additional cabinets
with XK nodes were integrated to the system, expanding its torus conﬁguration to 24×24×24.

4

Infrastructure Created for Acceptance

In preparation for acceptance of Blue Waters, NCSA staﬀ designed hundreds of tests covering
both functionality and performance for all system areas. Those tests encompassed all SOW
items and also additional features that NCSA considered important for productive system
operation. To organize the phase of test preparation, we created a web-based tool that interfaced
to a database storing all test deﬁnitions. That planning tool, which we named the Test Matrix,
had a GUI that greatly simpliﬁed accessing and changing speciﬁc attributes of any given test.
1 https://bluewaters.ncsa.illinois.edu

200

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

Figure 2: Example of NCSA Wiki page used for tracking of test progress
In the database, each test corresponded to a record, which contained several ﬁelds related to
diﬀerent aspects of the test, such as its description, acceptance criteria, area of the test, etc.
Complementing the support provided by the Test Matrix, we created a structure in the
NCSA Wiki where the preparatory work for every test was tracked. To manage the complex
test execution scenario, we extended that Wiki structure by adding ﬁelds that reﬂected status
and attributes of each test. For each section in the Cray-SOW, a speciﬁc Wiki table contained
all tests related to that section. As an example, Figure 2 shows the top portion of the table
with tests for the Job/Resource-Manager section. The “NCSA Test” column contained the
number of the test, as recorded in the Test Matrix. This test number entry had a hyper-link
that allowed jumping to another Wiki page, which stored results from execution of the test.
Quality assurance of the acceptance testing process was achieved by organizing that process
into a series of well-designed steps, with multiple levels of coordination and control. The ﬂow of
work for a given test was as follows. Once the test owner ﬁnished execution of the test, he/she
completed the corresponding test page in the Wiki, including a report of the observed results
and any additional documents comprising evidence of those results, plus a recommendation for
that test (Pass/Fail). Given such recommendation, the NCSA test coordinator checked the test
page for completeness and marked the “Acceptance Testing Status” column for that test in the
table of Figure 2, turning the underlying test page formally ready for review.
If the recommendation for the test was a Pass, the full test procedure and results were
reviewed by an NCSA specialist in the area, who provided a “certiﬁcation” in the last column
of the Wiki table of Figure 2. If the test result was a Fail, a bug was opened (see below).
Subsequently, after the bug was ﬁxed and the test executed successfully, the Status column
was updated and the test proceeded to certiﬁcation. The certiﬁer also had authority to reject
a “Pass” from the test owner; in that case, the test was marked as a “Fail”, and followed the
same treatment already described. As defects were found by the tests, they were initially ﬁled
in an internal ticketing system maintained by NCSA, based on JIRA [1]. When the defect was
considered to be a Cray problem, a case was opened as a bug in Cray’s customer site CrayPort2 ;
its resolution was tracked in daily teleconferences and weekly bug reviews by NCSA and Cray.
2 http://crayport.cray.com

201

Deploying a Large Petascale System

Test Color
White
Gray
Blue
Orange

Mendes, Bode, Bauer, Enos, Beldica and Kramer

Type of Test
Directly related to Cray SOW
In Appendix of Cray SOW
Requiring a job execution
Procedural or non-computational

Number of Tests
201
18
47
37

Table 1: Composition of acceptance tests for Blue Waters

5

Acceptance Tests Conducted

Beyond the tests with the Cray system, our acceptance tests covered the near-line storage (tape
libraries), the external network connectivity, and a variety of procedures for user support. To
better handle the various tests, we created an attribute called the test color. This attribute
served as a coarse classiﬁcation of the type of test, according to Table 1.
Speciﬁcally for acceptance of the components delivered by Cray, we designed the tests listed
in Table 2. As execution of the tests progressed, we kept updating the Wiki pages like those
in Figure 2. We also devised a way to assess the “value” of those results in terms of their contribution to the system deployment as a whole. Because each test had well-deﬁned acceptance
criteria (recorded in the Test Matrix), we deﬁned a rating scale to classify each executed test,
as indicated in Table 3. This rating scheme provided a much more accurate evaluation than
simply assigning a Pass/Fail tag to each test.

5.1

Results for General System Tests

Using the ratings described in Table 3, the vast majority of tests associated to the Cray SOW
met, exceeded or signiﬁcantly exceeded their speciﬁcations. In some cases, a test would not
reach its target in the ﬁrst execution; however, after some additional work by Cray (to ﬁx
occasional bugs), most tests eventually completed with success.
Section of Cray SOW
Early-Science System Perf./Availability
GPU Performance
Acceptance Entry Criteria
Power Consumption
System Monitoring and Control
File System
External Networking
Job/Resource Manager
Programming Environments
HPCC Benchmarks
Application Performance
Sustained Petascale Performance
Job Consistency
System Availability

Number of Tests
8
5
10
1
27
50
16
17
37
1
6
19
2
2

Table 2: Distribution of tests related to the Cray-SOW
202

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

Test Result
More than 35% better than contract speciﬁcations
10%-35% better than contract speciﬁcations
0%-10% better than contract speciﬁcations
1%-10% worse than contract speciﬁcations
More than 10% worse than contract speciﬁcations

Rating
Signiﬁcantly Exceeds Speciﬁcations
Exceeds Speciﬁcations
Meets Speciﬁcations
Meets Speciﬁcations with Limitations
Does Not Meet Speciﬁcations

Table 3: Scale used to rate acceptance test results
NCSA conducted a rigorous analysis of the few tests that were not reaching their full speciﬁcations. For each test in that situation, we considered possible mitigation actions, and made a
realistic assessment of the impact that the observed limitations would cause on overall system
usability and performance. These limitations continue to be actively addressed by Cray and
closely tracked by NCSA staﬀ, under “Urgent” bugs. Many of them have already been ﬁxed in
new software versions deployed recently, and none causes noticeable impact on users.
Despite the limitations above, a much larger number of tests presented results that surpassed
our expectations. Here we highlight some of them, from diﬀerent system areas:
• GPU Performance: The performance of a GPU-enabled version of HPL on 256 XK
nodes was 2.4 times better than the requirement;
• System Monitoring and Control: A warm boot of the OS on all compute nodes
completed in nearly one third of the allowed time;
• File System: Executions of the IOR benchmark on 22,560 compute nodes achieved an
average I/O write rate of 1.117 TB/sec, which is 31% better than the requirement;
• Interconnection Network: By executing the Netgauge benchmark [5] on 22,000 nodes,
an eﬀective bisection-bandwidth of 4.2 TB/sec was measured, conﬁrming the speciﬁcations
of the Gemini 3D-torus interconnect;
• External Networking: A network test between a compute node and an external Illinois
host showed speeds 55% higher than speciﬁed;
• Job/Resource Scheduler: A sequence of thirty trivial jobs, each running on 1,000
compute nodes, was successfully launched and ﬁnished with a total time 22% shorter
than allowed;
• Programming Environments: The MPI-IO collective buﬀer optimization enabled an
execution of the IOR benchmark on 1,000 cores to complete 16 times faster than the
non-optimized version of that benchmark;
• HPCC Benchmarks: An HPL execution across the entire system completed successfully, within speciﬁcation, and gave us a good indication of system’s reliability;
• Nearline Storage: The largest HPSS workload tests achieved NCSA’s projection for
end of year-4, writing nearly 400 TB across 10 million ﬁles, and ingesting over 400 TB in
a period of 24 hours;
• WAN Connectivity: Error-free connectivity with the Internet2 was established for a
period of seven days, using a steady load of 20 Gbps, and a burst of 80 Gbps for six
additional hours.

5.2

Examples of Tests with Problems Observed

While the majority of the tests presented successful results, some tests initially failed to reach an
acceptable outcome. For such tests, Cray worked aggressively on a solution or on a reasonable
workaround that could provide the same functionality of the original tested feature. Some
examples of these problems, with their corresponding solutions, were as follows:
203

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

• Connectivity between nodes and external network: The observed connection speed
between the compute nodes and the external network was lower than speciﬁed. After intensive debugging, Cray found that the routing algorithm in the nodes was not appropriate
for a machine with the size of Blue Waters, as the routing tables became too large and
their handling was consuming an excessively long time. Cray changed that algorithm to
reduce the table’s size. With such correction, the test fully passed its requirements.
• Interconnection network congestion: After all cabinets were installed, initial tests
revealed that network congestion was occurring for some communication patterns. Cray
formed an internal team to work on the issue, and this team created a solution based
on a mechanism called Balanced Injection: when congestion is imminent, the nodes automatically reduce their injection rate into the network, such that the congestion can be
avoided. This mechanism ensures that network health is always preserved, while maintaining transmission rates for user applications at their highest level in the general case.
• MPI compliance: Initial tests detected failures for some MPI calls used in an MPI
testsuite from Argonne National Lab. Further investigation revealed that the testsuite
was using new MPI features not yet supported by the installed MPI library. After Cray
released an updated version of the MPI library, those problems were no longer observed.
• OpenMP compliance: By using an alpha version of the OpenMP-3.1 testsuite from
Barbara Chapman’s group at University of Houston, one of our tests revealed a problem
for codes containing some instance of shared variables. This problem was due to automatic
optimizations performed by the Cray compiler that made the generated code unsafe in
such a scenario. After this was found, Cray informed that the compiler has a speciﬁc ﬂag
to control this behavior. Using that ﬂag, the produced code becomes safe, at the cost of
some performance loss for the particular fragment where those shared variables are used.
• Varying I/O rates: Preliminary I/O tests run on compute nodes showed varying results,
with some of them lower than the requirements. Such tests had been run while there was
concurrent I/O activity from users in the login nodes, sharing access to the ﬁle systems.
Those tests were repeated with no users logged in, and their results were successful.
• Non-dedicated job consistency: While repeated job executions on a dedicated system
produced very consistent results, some applications presented non-negligible variations
when running concurrently with other jobs. NCSA and Cray have been working on a
solution to this problem by improving allocation of nodes for a job in a topology-aware
manner that minimizes cross-job interference.

5.3

Tests with NSF Petascale Benchmarks

In its original solicitation from 2006 [9], NSF speciﬁed three petascale benchmarks, in the areas
of turbulence, quantum chromodynamics, and molecular dynamics. Those speciﬁcations were
such that a sustained petaﬂop capability was needed to solve each problem. The turbulence
problem was speciﬁed just in terms of generic requirements, and any appropriate program
could be employed. NCSA and Cray opted to use the PSDNS code [3] for the solution of this
problem. Meanwhile, the solicitation determined that the other two problems should be solved
with speciﬁc programs (MILC [8] and NAMD [10], for the second and third areas, respectively).
Table 4 lists the Blue Waters conﬁgurations used for the executions of the three NSF benchmarks.3 All three benchmarks were executed in dedicated-system mode, and the measured
times were actual wall-clock times taken by each benchmark, i.e. they included all overheads
3 The

PSDNS code actually executed on 12,288 XE nodes, chosen randomly from the total set of 22,500
allocated nodes. This was done to optimize the job’s bisection bandwidth on Blue Waters.

204

Deploying a Large Petascale System

Science Area
Turbulence
Quantum Chromodynamics
Molecular Dynamics

Mendes, Bode, Bauer, Enos, Beldica and Kramer

Code
PSDNS
MILC
NAMD

Number/Type of Nodes
22,500 XE
20,520 XE + 1,919 XK
25,650 (XE and XK)

Table 4: Blue Waters conﬁgurations for NSF-petascale benchmarks
from the real executions, such as I/O, checkpointing and even recovery from errors – some of
these executions took several days to complete. For executions with participation of XK nodes,
only the AMD-Interlagos CPUs in those nodes were employed. The Blue Waters executions
exceeded the speciﬁcations deﬁned for all three benchmarks.

5.4

Results for SPP Applications

Early in the deployment of Blue Waters, a decision was made by NCSA such that the result of an
HPL execution would not be released to the public. The reason for this decision was the strong
belief, shared by others in the community, that HPL results do not adequately characterize the
capabilities of a given system to handle workloads with a mix of scientiﬁc applications [4]. Thus,
although HPL was run on Blue Waters and achieved the speciﬁed requirements as described
in §5.1, a more appropriate quantiﬁcation of the machine’s capabilities was pursued.
In addition to successfully running the NSF petascale benchmarks listed in §5.3, the Blue
Waters acceptance was also based on the Sustained Petascale Performance (SPP) metric [2].
SPP is an instance of the Sustained System Performance (SSP) method of evaluating systems [6],
which consists of a process to evaluate performance for a range of applications. The SSP method
is formally deﬁned such that it can be generalized to cover any scale, any workload and any
architecture; speciﬁc factors are determined by the implementation of the method for a certain
system, workload, etc. Thus, SPP is the Blue Waters implementation of the SSP method.
In the case of Blue Waters, the SPP metric is a geometric mean of per-node performance
rates for a suite of applications, each running in dedicated mode on a portion (typically one
ﬁfth to one half) of the full number of compute nodes in the system, multiplied by the total
number of compute nodes available. Each set of nodes of a given type (XE or XK) has the SPP
contribution calculated independently, and those sustained measures are summed to obtain
the full-system SPP values. In summary, SPP is a time-to-solution metric that represents
end-to-end runs, including I/O, pre and post-processing, etc.
The following mix of application codes, corresponding to a signiﬁcant representation of the
NSF workload expected for Blue Waters, was selected for our SPP acceptance tests:
• NAMD - molecular dynamics
• MILC, CHROMA - quantum chromodynamics
• VPIC, SPECFEM3D - geophysical science
• WRF - atmospheric science
• PPM - astrophysics
• NWCHEM, GAMESS - quantum chemistry
• QMCPACK: materials science
Four of those applications (NAMD, CHROMA, QMCPACK, and GAMESS) had versions to
run either on the x86 CPUs (AMD-Interlagos processors) or on the GPUs. The remaining six
applications were not yet GPU-enabled, and ran exclusively on the x86 CPUs.
205

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

x86 SPP Contribution
GPU SPP Contribution
System SPP

SPP Value
1.10
0.21
1.31

Table 5: Composite SPP results for Blue Waters
Our decision to compute the SPP values using a portion of Blue Waters was based on the
observation that not all applications above are yet prepared to run on the full system. Thus,
rather than discarding such applications and computing SPP based on a reduced set of codes,
we prefer to include as many codes as possible, to obtain an SPP measure that truly represents
the expected system workload. Furthermore, several of those applications did run on nearly
the full system, as we show later in this section.
The overall results for the SPP values are listed in Table 5. This table shows that, according
to the SPP metric, Blue Waters delivers more than one petaﬂop/s of sustained performance for
a sample of the NSF workload. In comparison, it is estimated that Titan, the second system
in the current Top500 list, would achieve an SPP value of just 0.64 for the same workload [7].
Four of the SPP codes, when executed on x86 CPUs comprising large portions of Blue
Waters, presented performance beyond one petaﬂop/s. The conﬁgurations and results from
those executions are listed in Table 64 . Jointly with the NSF benchmarks, these results further
conﬁrm Blue Waters’ enormous computational capability on a broad range of science areas.
Other tests that we ran veriﬁed the beneﬁts of Blue Waters’ GPUs for scientiﬁc applications.
These tests compared the performance obtained with GPU-enabled versions of SPP applications
on XK nodes with the performance from the regular applications running on the same amount
of XK nodes, but using only the x86 CPUs. Table 7 shows the obtained results from these tests.
The last column in this table is the factor representing the acceleration gain from the GPUbased execution over the corresponding CPU-based code. Because the usage accounting scheme
adopted in Blue Waters charges the same amount for XE or XK nodes, these results indicate
that GPU-based executions provide a much more favorable cost/beneﬁt ratio for GPU-enabled
applications. Thus, there is a concrete incentive for users to port their codes to GPUs. Despite
the slightly higher cost of ownership of XK nodes, this uniform node-based charging scheme
is aligned with Blue Waters’ mission as a platform that allows users to explore migration to
GPU-based execution without incurring additional costs.
Code
VPIC
PPM
SPECFEM3D
QMCPACK

BW Nodes
22,528 XE
21,417 XE
21,675 XE
22,500 XE

Petaﬂops/sec
1.25
1.23
1.18
1.04

Table 6: Blue Waters executions of SPP benchmarks on x86 CPUs

4 After the acceptance period, the PPM developers conducted a multiple-day run on 21,962 Blue Waters
nodes, and improved PPM’s performance further, to 1.5 Petaﬂops/sec.

206

Deploying a Large Petascale System

Code
NAMD
QMCPACK
CHROMA
GAMESS

Mendes, Bode, Bauer, Enos, Beldica and Kramer

BW Nodes
768 XK
700 XK
768 XK
1,536 XK

GPU Gain
3.4
4.9
3.9
3.1

Table 7: Beneﬁts of Blue Waters’ GPUs on SPP benchmarks

6

Major Lessons Learned

In this section, we discuss some of the problems that we faced during the deployment process,
how those problems were handled, and highlight major lessons that we learned from that
process. We start with a chronological perspective, from when installation started.
In early 2012, our vision indicated three major risks for the Blue Waters project: (a) system
scale, as Blue Waters had the greatest number of cabinets and the largest network ever built by
Cray; (b) new disk controllers, which were expected to double the I/O bandwidth of the system;
and (c) new NVIDIA Kepler GPUs, which were not yet in regular production. NCSA managed
these and many other secondary risks through an internal risk register tool, shared with Cray.
Throughout the entire deployment, NCSA closely monitored the risk register, and took action
whenever a certain factor would trigger some of the planned mitigation alternatives.
During the intensive testing period of October/November 2012, we faced many challenges,
starting by the diﬃculties in scheduling machine usage for execution of the 200+ planned tests.
To complicate matters further, most of the application performance tests required multiple
executions, for performance debugging and tuning. Many of these performance tests were done
in dedicated-system mode, to provide more accurate results. Special job queues were created by
Cray to enable dedicated executions. For the majority of this period, the regular job scheduler
in Blue Waters was paused, and the queues were manually controlled such that high-priority
tests could be done quickly. Access to the machine in each of the 24 hours of every day in that
period had to be very carefully planned. Without this ﬁne-grained control of test scheduling,
the acceptance process would have certainly extended over a much longer period.
Because system access was in high demand throughout the deployment, we relied heavily
on the local Test and Development System (TDS) to adjust and tune our test procedures, so
that their eventual executions on Blue Waters would have a high probability of success. The
availability of TDS, with identical hardware and the same software as in Blue Waters, helped
tremendously in test preparation and tuning.
Previous results in the literature for some of the SPP applications proved to be unreliable:
in some cases, they did not consider all phases of the application; in others, questionable simpliﬁcations in the problem conﬁguration led to results that do not reﬂect the regular, production
usage of the underlying codes. In our experience, claims of projected performance or code porting/optimization to new architectures must always be viewed with a large amount of caution.
Meanwhile, our own eﬀorts with tuning performance of those codes on Blue Waters faced a
tradeoﬀ between the limited time available for testing and the large number of alternatives
for code structure or optimizing compiler ﬂags. Carefully balancing run times with optimal
performance is very important when tuning applications on a new system.
NCSA was able to implement an excellent infrastructure to accommodate the needs of the
complex Blue Waters acceptance process. The password-protected, easily-accessible document
repository hosted in the NCSA Wiki, together with the home-grown Test Matrix and risk
207

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

register, proved to be fully capable of serving well our needs. More importantly, the Blue Waters
team had specialized staﬀ who were able to respond quickly and adapt those tools whenever
requirements changed. Having the proper tools for collaborative work, and skilled personnel to
adjust those tools when necessary, were major factors for the successful Blue Waters deployment.
A major challenge across the entire deployment was the coordination of work for the large
NCSA and Cray teams, in particular considering that many Cray members participated remotely. The repository infrastructure mentioned above and the coordination and control process
described in §4 became essential mechanisms for the project to overcome that challenge, despite
the aggressive deployment schedule. Having dedicated staﬀ at NCSA and Cray to coordinate
and manage the acceptance testing was crucial for reaching the original project goals.

7

Conclusion

Many application groups are advancing their research via the enormous computational capabilities of Blue Waters. As an example, recent NAMD simulations enabled determination of the
precise chemical structure of the HIV capsid [11], a protein shell that protects the virus’ genetic
material and has become an attractive target for the development of new antiretroviral drugs.
In this paper, we described the Blue Waters deployment process, presented results from
its acceptance tests, and highlighted major lessons learned from that deployment. With the
system now under regular production operation, we are using some of the acceptance tests to
continuously assess system health. Meanwhile, application groups keep improving performance
of their codes through both optimizations to their existing algorithms and exploration of new
numerical methods more suitable to the system architecture. As these developments mature, we
expect Blue Waters usage to have an increasing impact on science and engineering discoveries.

7.1

Acknowledgments

We thank the entire Blue Waters team for participation in the deployment process and for
valuable help in the numerous activities required by that deployment. We also thank many
Cray employees who worked intensively on tasks related to this deployment, in particular Kevin
Stelljes, Joe Glenski, Pat Duﬀy, Luiz DeRose and Peg Williams.
This work is part of the Blue Waters sustained-petascale computing project, which is supported by the US National Science Foundation (award number ACI 1238993) and the state of
Illinois. Blue Waters is a joint eﬀort of the University of Illinois at Urbana-Champaign and its
National Center for Supercomputing Applications.

References
[1] Atlassian Pty. Ltd. JIRA documentation.
[2] Gregory H. Bauer, Torsten Hoeﬂer, William T. Kramer, and Robert A. Fiedler. Analyses and
modeling of applications used to demonstrate sustained petascale performance on Blue Waters.
In Proceedings of the Annual Meeting of the Cray Users Group, Stuttgart, Germany, May 2012.
[3] D.A.Donzis, P.K.Yeung, and D.Pekurovsky. Turbulence simulations on O(104 ) processors. In
Proceedings of the 3rd Annual TeraGrid Conference – TeraGrid’08, Las Vegas, NV, June 2008.
[4] Michael A. Heroux and Jack Dongarra. Toward a new metric for ranking high performance
computing systems. Technical Report SAND2013-4744, Sandia Nat. Lab., June 2013.

208

Deploying a Large Petascale System

Mendes, Bode, Bauer, Enos, Beldica and Kramer

[5] T. Hoeﬂer, T. Mehlan, A. Lumsdaine, and W. Rehm. Netgauge: A Network Performance Measurement Framework. In Proceedings of High Performance Computing and Communications,
HPCC’07, volume 4782, pages 659–671. Springer, Sep. 2007.
[6] William Kramer. PERCU: A Holistic Method for Evaluating High Performance Computing Systems. PhD thesis, University of California, Berkeley, October 2008.
[7] William Kramer. Blue waters update. The Ninth Workshop of the INRIA-Illinois Joint Laboratory
on Petascale Computing, Lyon, France, June 2013.
[8] MILC-Collaboration. MIMD Lattice Computation (MILC) Collaboration home-page. Information
available at http://physics.indiana.edu/˜sg/milc.html.
[9] NSF. Leadership-class system acquisition - creating a petascale computing environment for science
and engineering. Program Solicitation NSF 06-573, 2006.
[10] James C. Phillips, Rosemary Braun, Wei Wang, James Gumbart, Emad Tajkhorshid, Elizabeth
Villa, Christophe Chipot, Robert D. Skeel, Laxmikant Kal´e, and Klaus Schulten. Scalable molecular dynamics with NAMD. Journal of Computational Chemistry, 26(16):1781–1802, 2005.
[11] Gongpu Zhao et al. Mature HIV-1 capsid structure by cryo-electron microscopy and all-atom
molecular dynamics. Nature, 497:643–646, 2013.

209

