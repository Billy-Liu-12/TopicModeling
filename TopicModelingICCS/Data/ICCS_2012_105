Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 994 – 1003

International Conference on Computational Science, ICCS 2012

Integrating a scalable and eﬃcient semi-Lagrangian multi-tracer
transport scheme in HOMME
Christoph Eratha,b,∗, Peter H. Lauritzenc , Jose H. Garciab , Henry M. Tufoa,b
a The

Computational & Information Systems Laboratory, National Center for Atmospheric Research, P.O. Box 3000, Boulder, CO 80307, USA
b Department of Computer Science, University of Colorado at Boulder, Engineering Center, 430 UCB, Boulder, CO 80309, USA
c Climate and Global Dynamics Division, National Center for Atmospheric Research, P.O. Box 3000, Boulder, CO 80307, USA

Abstract
With the inclusion of a scalable spectral-element-based version of the High-Order Method Modeling Environment
(HOMME) in NCAR’s Community Atmosphere Model (CAM) and the need for on the order of 100 prognostic tracers
in next generation climate modeling eﬀorts, there is an urgent need for a scalable, monotonic, and conservative multitracer advection scheme in HOMME. To address this, we integrate a Conservative Semi-LAgrangian Multi-tracer
transport scheme (CSLAM) into HOMME. The algorithm is speciﬁcally re-designed for multiple processors and the
cubed-sphere grid with the element-wise domain decomposition as employed by HOMME. Based on these spectral
elements, we create a ﬁnite volume mesh and add a halo zone of cells since a higher-order CSLAM needs a patch
of tracer values for a reconstruction that extend the element. Therefore, we extend HOMME to also be capable of
communicating cell center data. Our data structures and design allow us to provide a numerical scheme that still
conserves mass locally to machine precision and is also monotone on multiple processor systems, but reduces the
communication of tracer values by one for each time step. This is based on the idea that we calculate the reconstruction
coeﬃcients redundantly, in a cell of an element and in the corresponding cell in the halo zone. Our algorithm of
CSLAM in HOMME is the ﬁrst one for multiple processor systems and multi-tracers that is highly scalable and
eﬃcient.
Keywords: transport scheme, spherical geometry, cubed-sphere grid, semi-Lagrangian, parallel scalability,
performance

1. Introduction
In atmospheric numerical modeling transport processes are a basic building block. HOMME is the High-Order
Method Modeling Environment [2] with a continuous Galerkin spectral element dynamical core [9] and was recently integrated into the Community Atmosphere Model (CAM) framework – CAM-SE (Spectral Elements) [3].
The domain decomposition (horizontal) follows along the cubed-sphere grid resulting from a gnomonic equal-angle
projection of the sphere and is tested to be scalable up to 170000 processors [3].
∗ Corresponding

author. Tel.: +1 303 497 2445; fax: +1 303 497 1286.
Email address: erath@ucar.edu (Christoph Erath)
URL: http://www.csc.cs.colorado.edu/~ce/ (Christoph Erath)

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.106

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

995

The transport of a growing number of tracers in today’s atmospheric modeling applications makes a dominated
factor of computational costs, e.g., more than 100 tracers are used in the chemistry version of CAM. The implemented
tracer advection time step in CAM-SE uses a three-stage, second-order Runge-Kutta (SSP) method [3]. Since adding
a new tracer almost doubles the cost, development of eﬃcient algorithms for the tracer transport are of extreme
importance when the number of traces is large. In this paper we adapt a Conservative Semi-LAgrangian Multitracer transport scheme (CSLAM) [6] for use in HOMME. The main advantage of CSLAM is that the upstream cell
(trajectories) information and computation of weights of integrals can be reused for each additional tracer. In addition,
CSLAM also allows for longer time-step size as compared to the current CAM-SE advection scheme. The algorithm
considered here is speciﬁcally re-designed for multiple processor systems and for the cubed-sphere grid in HOMME.
HOMME is running on an element ansatz on the six cube faces and is specially designed for a Galerkin system.
The nature of such methods diﬀers signiﬁcantly from ﬁnite volume schemes and especially Lagrangian schemes.
Therefore, we create inside these elements an Eulerian ﬁnite volume grid of gnomic equal-angle type that represents
the arrival grid in the scheme. But CSLAM relies on backward trajectories that requires a departure grid, see Figure 1.
One implementation complexity is that the departure and arrival grids aren’t necessarily on the same element and
possibly not even on the same cubed face. Also the reconstruction for higher order modeling requires a patch of tracer
values that extend the element. Therefore, we extend HOMME to also be capable of communicating the cell center
data of the Eulerian grid (the tracers) , which do not necessarily have to be aligned with an element edge. The size
of this halo depends on the Courant number (CFL condition) and the communication has to be performed only once
per time step. This allows us to treat an element and its halo as one task with all of the data associated with this
“extended” element residing on one processor. Care must be taken when treating elements that share a cube edge due
to projection and orientation issues. We stress that the reconstruction coeﬃcients for cells that share an element edge
are calculated redundantly, in the cell of the element and in the halo zone of another element which represents the
same cell. This strategy is important because these cells can be on diﬀerent processors and allows us to reduce the
communication only for the tracer values (not for the reconstruction coeﬃcients, which are diﬀerent for each tracers).
This can be done to machine precision ﬁnally ensures that the scheme locally conserves mass to machine precision
as well. In this paper, we only consider CFL< 1 and a two-dimensional polynomial reconstruction of degree two.
This approach needs a a halo size of at least four in the depth which would be even larger for greater CFL numbers
and higher reconstruction polynomials. Diﬀerent CFL numbers and polynomial degrees are tested in [6] on a single
processor algorithm with one tracer. We also remark that our algorithm is optimized in the sense that we use the a
priori information of a structured grid that is basically the same on each face of the cube.
The inherent advantages of CSLAM together with the limited inter-processor communication makes it a promising
approach for providing eﬃcient and accurate transport in HOMME and preliminary scalability and performance tests
conﬁrm this. We note that our implementation of CSLAM in HOMME is the ﬁrst one that has been shown to work
on multiple processors and tracers.
The remainder of the paper is organized as follows. In section 2 we give a brief overview of CSLAM. The
integration of CSLAM in HOMME, which is the main contribution of this paper, is explained in detail in section 3.
Preliminary results of our approach on NCAR/CU Blue Gene/L System are given in section 4 followed by conclusions
and future work.
2. The transport scheme CSLAM
In this section we brieﬂy describe the CSLAM scheme [6]. The equation of motion for a passive and inert tracer
is the continuity equation without any source/sink terms. CSLAM is based on the Lagrangian cell-integrated form of
the continuity equation
d
dt

ψ dx dy = 0,

(1)

A(t)

where ψ is the tracer density (typically air density multiplied by the mixing ratio for the tracer in question), t the time,
and A(t) the Lagrangian area which by deﬁnition moves with the ﬂow with no ﬂux of mass through its boundaries.
CSLAM is based on the upstream semi-Lagrangian method so parcels that end up at the regular Eulerian grid are
considered. The kth deformed upstream cell is referred to as the departure cell Dk and the regular grid cell at which

996

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

Ak

Ak
Dk

Al
Dkl

(b) Overlap area Dkl = Dk ∩ Al .

(a) Departure Dk and arrival cell Ak .

Figure 1: The departure cell Dk moves in one time step to the (Eulerian) arrival cell Ak in (a). We approximate the departure cell by connecting the
departure points with straight lines. The overlap areas as in (b) are used to calculate the integral over the departure cell Dk .

Dk ends up after one time-step is referred to as the arrival cell Ak , see Figure 1(a). Using this methodology equation (1)
can be written as
ψk

n+1

|Ak | =
Dk

ψnrec dx dy,

where the bar refers to the average value over Ak , where |Ak | is the area of cell Ak , n is the time-level index, and
ψnrec the function representing the tracer in space at time-level n. Piecewise two-dimensional polynomials of degree
two, fl (x, y), are reconstructed in each cell l to form ψnrec . This requires estimates of gradient and curvature in each
coordinate direction as well as the cross derivative in each cell l
j)
=
c(i,
l

∂i+ j fl (x, y)
,
∂i x ∂ j y l

(i, j) ∈ (1, 0), (0, 1), (2, 0), (0, 2), (1, 1).

(2)

These are computed using ﬁnite diﬀerences based on the known cell average values at time-level n
n

ψh ,

h ∈ H,

where H is the set of indices that deﬁne the computational stencil. The constant term in the reconstruction c(0,0) is
chosen such that the integral of the reconstruction function over Al equals the mass in that cell
n

fl (x, y) dx dy = ψl |Al |.

(3)

Al

The reconstruction function ψnrec then becomes
ψnrec =

IAl fl (x, y),
l

where IAl is the indicator function

⎧
⎪
⎪
⎨1, (x, y) ∈ Al ,
I Al = ⎪
⎪
⎩0, (x, y) Al .

Shape-preservation is enforced by using a reconstruction function ﬁlter [1] that scales fl (x, y) so that extreme values lie
within the adjacent cell-average values. For more details on the reconstruction method on the cubed-sphere see [10, 6].
Since the reconstruction functions aren’t necessarily continuous across Eulerian cell edges, the upstream integral
over Dk must be split into the sum of integrals over overlap areas between Dk and regular Eulerian grid cells
Lk
Dk

ψnk,rec

dx dy =

fl (x, y) dx dy
l=1

Dkl

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

=

π/

4

y=1
(λ, θ)

β

R

997

β=0

(λ, θ = 0)

y=0
β
=
/4

−π

y = −1

(a) Projection to the cube face.

(b) The cube in the sphere.

Figure 2: In (a) we see the projection of the (λ, θ) coordinates on the sphere to the gnomonic Cartesian coordinate system (x, y) on a cube face. For
simplicity only the y and β coordinates of the gnomonic projection are shown for one cube face. To get an almost equidistant grid on the sphere
we use a gnomonic equal-angle projection from the (α, β) coordinates to get the (x, y) coordinates. Subﬁgure (b) shows the control-volumes on the
surface of the sphere and the cube.

where Dkl = Dk ∩Al is the overlap area between regular grid cell Al and the deformed departure cell Dk , see Figure 1(b).
The number of non-empty overlap areas is Lk for the kth upstream area (Lk is time-step and ﬂow dependent). The
area integration of fl (x, y) over Dkl can conveniently be converted into line-integrals using the divergence theorem in
cubed-sphere gnomonic coordinates [10]. The forecast equation can then be written as
ψk

n+1

Lk

Lk

|Ak | =

j) (i, j)
c(i,
l ωkl ,

fl (x, y) dx dy =
l=1

Dkl

l=1

(4)

i+ j≤2

j)
(i, j)
where the weights ω(i,
kl are functions of the coordinates of the vertices of Dkl . The weights ωkl only have to computed
once per time-step and can be re-used for each additional tracer. This constitutes ‘multi-tracer’ eﬃciency. We note that
mass is conserved by constraint (3), the fact that the departure areas Dk span the domain without cracks or overlaps
ensures, and that the line-integrals along coordinate lines are computed exactly, see [6] for more details.
CSLAM is stable as long as the upstream cells Dk are simply connected. For atmospheric ﬂows that usually entails
that the scheme is stable for long time steps (CFL> 1). The scheme has been extensively tested with various standard
benchmark test cases, such as solid-body rotation and deformational ﬂow on the sphere [6], as well as with a recently
proposed test case suite [5] on a single processor algorithm. To test scalability and performance of our algorithm we
will take one of these test (see below). There also exists a ﬂux version of CSLAM [4] that permits long time-steps
and, if CFL< 1/2, a simpliﬁed version of the ﬂux-form CSLAM scheme can be used where the search for overlap
areas is eliminated [7].

3. A new algorithm of CSLAM in HOMME
In this section we present a new implementation of CSLAM in HOMME. First we give a brief introduction of the
gnomonic cubed-sphere projection followed by the deﬁnition of a ﬁnite-volume grid. Then we introduce an extended
element to apply the existing structure of HOMME followed by practical implementation details.
3.1. Gnomonic cubed-sphere grid
HOMME’s discretization mesh is based on the cubed-sphere, Figure 2, where an inscribed cube is projected on
the surface of the sphere. To get an almost equidistant mesh on the sphere a gnomonic equal-angle projection from
(α, β) coordinates to Cartesian coordinates (x, y) on the cube face is employed:
x = r tan α

and y = r tan β

α, β ∈ − π/4, π/4

√
with r = R/ 3 and R is the radius of the earth (see also [6]). The cubed-sphere has several advantages. It avoids
the polar singularities associated with the latitude/longitude coordinate system and straight lines on the gnomonic

998

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

Face 6

Face 4

Face 1

northwest
Face 5

Face 3

Face 2

north

west
southwest

northeast
east

south

southeast

Figure 3: We use a cubed-sphere projection and divide each of the 6 faces into elements, dashed lines. The domain decomposition (horizontal)
in HOMME follows along the elements. For CSLAM we generate additional cells in each element, thin lines. Due to the gnomonic equal-angle
projection these cells are not equidistantly spaced as it is shown here for the sake of simplicity. The stencil for the two-dimensional polynomial
reconstruction of degree two for the black square is indicated by the grey squares. To calculate the reconstruction for the black square on face 1 we
use two values on each side and one on the diagonal. Note that we also need values from other elements, which means that these values need to be
communicated assuming that they are on diﬀerent processors. Otherwise it’s just a memory copy. These values can also be on diﬀerent faces (here
on 4 and 6) and are therefore on a diﬀerent projection of the sphere. We use an interpolation to ensure that these values are aligned. The dashed
square on the lower right corner shows the possible location of an element on the cube, that means if the edge lies on a cube edge or not.

projection are equal to a great-circle arc on the sphere. Therefore, the search algorithm for ﬁnding the overlap areas
(see Figure 1(b)) is done on the cube face in Cartesian coordinates. However, the reconstruction is done in the
gnomonic equal-angle (α, β) coordinate system.
3.2. Face, elements, and cells
The six cube faces in Figure 3 are further subdivided to form a quadrilateral grid of the desired resolution, the
elements (dashed lines). The spectral element approximation is then built on the Gaussian-Lobatto-Legendre points
of these elements to get a higher order ﬁnite element scheme. A semi-Lagrangian scheme works on so called control
volumes, where the unknowns (here the tracers) are located on the cell centers and represent the integral mean.
Therefore, we divide these elements further into cells, which yields the mesh for the underlying ﬁnite-volume method.
3.3. Extended element
As mentioned above, the reconstruction coeﬃcients (2) are calculated by a ﬁnite diﬀerence approximation based
on the known cell averages. For the two dimensional polynomial of degree two a stencil of ﬁve is required. Figure 3
shows an example for a stencil where we need one value from the outside of the west and north element boundary.
Therefore, the depth of the halo zone required is at least two in order to calculate all possible reconstruction coeﬃcients
of cells inside an element. Note that if we need values from the halo zone that resides on another face we ﬁrst
have to interpolate to guarantee that they are aligned. Here we use a one-dimensional non-conservative fourth-order
interpolation from the neighboring cell average values to obtain the aligned values in the halo zone. If we need
cross-term values from a cube corner, we do an extrapolation.

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

999

We have to do the
reconstruction in
this halo zone as well.

E.g. if the element is on
the south-east corner of
the cube, these values are
Not A Number

Figure 4: One element (bold square) with its cells and cells in the halo zone (grey cells) of depth four build the extended element. This is needed
on one processor. The small ﬁlled circles and squares represent the cell-center. Since the departure cell can be outside the element (here CFL< 1),
we also calculate the reconstruction in the halo zone (dashed cells) to avoid additional communication of the reconstruction coeﬃcients.

Figure 1 and (4) indicate that we need the reconstruction fl (x, y) also in the (upstream) cell Dk , in particular in
the overlapping Eulerian cell Al . This leads to some diﬃculties in the case that Dk crosses an edge of the element.
Therefore, the concept of an extended element for one processor (interior cell plus the cells in the halo zone) is
introduced in Figure 4. We diﬀerentiate between two halo zones, the halo zone where the cell moves, which depends
on the CFL, and the halo zone that is needed for the reconstruction. If we calculate the weights wkl we have to
diﬀerentiate between two cases: (1) if Dk moves to an element that lies on the same face of the cube we simply
consider the element plus its halo zone as an extended element and (2) if Dk moves to an element that lies on an other
face we do two separate searches for the overlap, one in the corresponding halo zone and one in the interior element.
We remark that each cell in the halo zone is a duplicate of a cell of an element. To ensure mass conservation, we
therefore have to calculate the weights and the coeﬃcient for the reconstruction polynomial in the halo zone exactly
as it is done for the corresponding cell on the other element. We note that these quantities are calculated twice, once
in the halo cell and once in the cell of the corresponding element. This can be done up to machine precision which
is important to ensure mass conservation. Again we use the concept of the extended element, see Figure 4, and we
only have to ensure that no Eulerian cell in an element comes from an upstream cell outside this halo zone. If we
restrict ourself to use cases where CFL< 1, the departure cell Dk will move at most one cell. Note that it is much more
complicated to derive the reconstruction in the halo zone, in particular for elements that lie on a cube edge. Then one
has to interpolate the cell averages of the interior cells to be aligned with the values in the halo zone. Figure 4 shows
that the depth of the halo zone has to be at least three to calculate the reconstruction when CFL< 1. One diﬃculty is
to handle the special cases of elements that share a west, south, east, or north edge or southwest, southeast, northeast,
or northwest corner with the cube, or on which cube face the element is. Figure 3 shows why one has to be careful
because of orientation reasons. Since we use a gnomonic equal-angle grid it is easy to calculate the mesh on a
neighboring element without any communication. To get a better understanding of these problems we discuss the
calculation of the reconstruction on the element in Figure 5 for the ﬁlled cell. In Figure 5(a) we see the stencil for
a cell that lies in the southwest corner of the cube. Since we use a fourth-order interpolation we need four values.
The missing value in the diagonal is obtained by extrapolation. The values marked by squares in 5(a) are needed
for the interpolation and projection to get values that are aligned with the values in the circle. Figure 5(b) shows the
reconstruction for exactly the same cell but in the halo zone of the neighbor element. To ensure mass conservation the
reconstruction (including the interpolation) has to be done in the same way as above. Note that the values on the left
side of the stencil can be found in the left halo zone of the element. To ensure a fourth order interpolation, we need a
halo depth four. Again, all values marked by squares in Figure 5(b) are used for the interpolation and projection this

1000

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

(a) Cell in the element.

(b) Cell in the halo zone of the element.

Figure 5: In (a) we see the stencil for the reconstruction in a cell that lies on the southwest corner of the cube. The square cell-center values have
to be interpolated and projected to the face of the element to be aligned. The missing value in the diagonal is obtained by extrapolation. And (b)
shows exactly the same reconstruction for the corresponding cell in the halo zone. This cell is in the halo zone of the south neighbor of the element
in (a). The values for the stencil on the left can also be found in the halo zone.

time to the face where the cell in the halo zone belongs. Note that the orientation of the values on other faces can be
diﬀerent.
3.4. Practical implementation
Figure 6 shows the principle of CSLAM in HOMME. The initialization uses several properties of the gnomonic
equal-angle grid. Since the mesh is static we calculate in advance and save the aligned interpolation points on the other
face for the reconstruction as well. The element data structure has an indicator if the element has no, west, south, east,
north, southwest, southeast, northeast, or northwest cube edges and on which cube face it is. This allows to quickly
diﬀerentiate between the various (special) cases for performance and implementation issues. We stress that, from a
computational point of view, elements on the cube corner are the most expensive followed by elements with only one
edge on the cube. The search algorithm has to be done once per time step. Note that we have to ﬁnd all intersections
of Dk with the Eulerian grid. Especially for small winds this is challenging since the movement of Dk is correspondingly small. The loop over the tracers calculates the reconstruction and applies the limiter described above. We stress
that the limiter only needs the cell-averaged values from its neighbor cells and limits then the reconstruction coeﬃcients. Therefore, the limiter block is not so sensitive and complicated to implement with respect to mass conservation.
The reconstruction coeﬃcients depend on the tracer value, but only one nearest neighbor communication for each
time step (array of multiple tracer values) is needed. The spectral element advection time step in CAM-SE needs
three communications (runge kutta). In addition, CSLAM in HOMME conserves mass to machine precision.
4. Results
In this section we test the parallel scalability and performance of our algorithm on a four rack Blue Gene/L system
(8192 cores) using a standard benchmark test on the sphere and discuss our algorithm approach.
4.1. Frost - The NCAR/CU Blue Gene/L System
The system selected for our experimentation is an IBM Blue Gene/L (BG/L), which is an ideal architecture for
testing scalability. To this end, BG/L combines a total of 1024 computing nodes into a single rack. This type of
conﬁguration is possible because each computing node draws just 10 − 15 watts, so the total number of joules per unit
of volume translate into low density energy, hence power supply and cooling are manageable.
In each computing node BG/L combines two low power processors, the 700 MHz PowerPC 440. Each computing
node can run in two possible modes; co-processor mode, where one processor handles communication and the other
computation; and virtual mode, where both processors handle simultaneously communication and computation.

1001

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

Initialization: parallelization, cubedsphere grid, CSLAM grid with halo zone

Only one communication:
exchange tracer values

Loop over tracers

Compute weights

next time step

Reconstruction
Limiters

Output

end

Stop

Figure 6: Algorithm of CSLAM in HOMME. We compute the weights only once per time step. For every tracer at each time step we have to do
the reconstruction and apply the limiters. Our approach allows us to reduce the communication for once per time step.

Given such a modest processors, BG/L relies on having a large number of processors to deliver a high total
computing capacity. This conﬁguration pushes the total parallelism of applications because scalability is based on
distributing the computational load more, rather than expecting each processor to be assigned a heavier load and
compute faster. Clearly with more processing elements involved, the demand on communication is much higher.
To satisfy this added constraint, BG/L relies on three parallel communication networks, a 3D toroidal network for
peer-to-peer communications, a dedicated network for collective operations such as a broadcast and a global interrupt
network to facilitate barriers. Our speciﬁc system, named Frost, combines 4 racks for a total of 4096 compute nodes.
Each node consists of two processors sharing a 512 MB of RAM, giving the machine 8192 processors for a sustaining
a peak performance of 22.936 TFLOPs. However, given such a low memory available per node, and the goal of
separating the accounting of time of computation versus communication, we ran our experiments in co-processor
mode giving us a maximum of 4096 processors available.
4.2. Test Example
For our performance studies we employ the ﬂow ﬁeld from [8], in which the initial distributions (in this case
slotted-cylinders) are deformed into thin ﬁlaments. This ‘collapse’ in scale is typical for atmospheric ﬂows and
usually challenging for transport operators to represent accurately. The ﬂow has a time-reversing component so that
at the end of the simulation the initial distributions should be recovered. This is convenient for the computation of
standard error norms since the analytical solution is not known throughout the simulation. To avoid the potential
cancellation of errors when the ﬂow reverses, the deformational part of the ﬂow is overlaid on constant back-ground
ﬂow. This makes the test even more challenging since the thin ﬁlaments are transported Eastward by the back-ground
ﬂow as they deform. The combination of this wind ﬁeld and a non-smooth scalar distribution, that challenges shapepreservation, makes the test much more challenging than commonly used idealized transport test cases on the sphere
such as solid-body advection. We also remark that the velocity ﬁelds are analytical and we use a very accurate
trajectory computation to determine the departure cell.
4.3. Scalability and performance
Using the system described in Subsection 4.1, and the velocity and initial ﬁeld of Subsection 4.2, we start our
experiments with 26 ∗ 26 ∗ 6 = 4056 elements (each face is divided into 26 ∗ 26 elements, which corresponds to ne= 26
in the namelist of HOMME). This allows us to test our algorithm with only one element for each processor. To ensure

1002

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

60

time in seconds

1
3

10

102

101

Number of tracers:
1
10
200
400
50
100
800

−1

−1

time / time for one tracer

104

1

Number of processors:
32
64
1
128
40
1/14
256
507
30
1014
2028
20
4056
1/23
10
1
50

0

103
102
number of processors

100 200 300 400 500 600 700 800
number of tracers

(a) Scalability.

(b) Eﬃciency.

Figure 7: Subﬁgure (a) shows the scalability of our algorithm for a variety of tracer counts. We note that the right most marker on each line is for
4056 processors, which corresponds to one spectral element per processor. The scalability for 1 − 10 tracers is good, even in the case where there
is only one element per processor. Scalability in the other tracer counts begins to degrade as we approach one spectral-element per processor. We
note that the value for 800 tracers on 32 processors is missing because it did not ﬁt in memory. In (b) we see the additional costs for adding one
tracer compared to one tracer. That means we need 1/23 of the time of the ﬁrst tracer, to add a second tracer. This ratio increase the fewer elements
we have on a processor.

200
180
160
140
120

102

101

100

time / time for one tracer

time in seconds

103

100

Number of tracers:
1
10
200
400
50
100
800
102
103
number of processors
(a) Communication time.

80
60

Number of processors:
64
128
256
507
1014
2028
4056

40
20
0

100 200 300 400 500 600 700 800
number of tracers
(b) Communication time compared to one tracer.

Figure 8: Subﬁgure (a) shows communication times by number of tracers. We note that communication is dominant for large numbers of tracers
and few spectral elements per processor. In (b) we show communication cost normalized by the communication cost for one tracer, which increases
as the number of spectral elements per processor approach one.

Christoph Erath et al. / Procedia Computer Science 9 (2012) 994 – 1003

1003

CFL< 1 we choose a time step of 600 seconds and run the scheme 12 days. For all tests we disable I/O. Figure 7(a)
shows the scalability for 1 − 800 tracers versus the number of processors. The scalability for up to 1014 processors,
that means 4 elements for each processor, is perfect, i.e. double number of processors half the execution time. We see
a slight decrease of the scalability for the number of tracers > 200 starting at 2028 processors and, for > 50 tracers,
starting at 4056 processors. For a small number of tracers, the algorithm in HOMME seems to be scalable up to one
spectral element per processor (the minimum). We remark that for 800 tracers on 32 processor we run out of memory
on Frost. The scalability behavior can also be seen in Figure 7(b). The plot shows the performance with respect to the
time for one tracer for a variety of tracer counts. The slope describes how much additional time, relative to the time for
one tracer, is needed to add one tracer. Or in other words for 1 − 800 tracers and up to 1014 processors, we only need
twice the time to transport 23 tracers as to transport one. This slope degrades to (1/14) for more processors and more
tracers and corresponds the scalability plot of 7(a). The above observations result from the increasing communication
load, which can be seen in Figure 8. Figure 8(a) indicates that communication times dominate for many processors
and tracers. Figure 8 (a) and 8(b) correlate to Figure 7(a) with Figure 7(b), respectively.
5. Conclusions and future work
We showed that our proposed algorithm for a semi-Lagrangian multi-tracer transport scheme is highly scalable and
eﬃcient at least for four elements per processors. The scalability and eﬃciency decreases slightly for a higher number
of processors and tracers. In our approach we use explicit the gnomonic equal-angle projection, which allows us to
pre calculate several quantities a priori. Departure and arrival cells are always on the same processor by introducing
the so called extended element. The ﬂow and the order of the scheme deﬁne the depth of the halo zone, which can
be large, e.g., for CFL< 1 we need a halo zone with depth 4. Nevertheless, the new implemented communication
strategy together with the existing HOMME technology can handle this large data exchange between the processors
with moderate extra costs.
To date we are in the process to couple this CSLAM algorithm with the spectral-element version of HOMME,
which is distributed via CAM as CAM-SE. In particular, we replace the spectral element passive tracer transport by
CSLAM. This will increase the performance of future climate modeling for quasi-equidistant grids since CSLAM
allows a larger time step and is more eﬃcient for more tracers.
Acknowledgements
The authors C. Erath, P. H. Lauritzen, and H. M. Tufo were partially supported by the DOE BER Program DESC0001658. The National Center for Atmospheric Research is sponsored by the National Science Foundation.
References
[1] T.Barth, D. Jespersen, The design and application of upwind schemes on unstructured meshes, Proc. AIAA 27th Aerospace Sciences Meeting,
Reno (1989)
[2] J. M. Dennis, A. Fournier, W. F. Spotz, A. St-Cyr, M. A. Taylor, S. J. Thomas, H. M. Tufo, High resolution mesh convergence properties and
parallel eﬃciency of a spectral element atmospheric dynamical core, Int. J. High Perf. Comput. Appl. 19 (2005), 225-235
[3] J. M. Dennis, J. Edwards, K. J. Evans, O. Guba, P. H. Lauritzen, A. A. Mirin, A. St-Cyr, M. A. Taylor, P. H. Worley, CAM-SE: A scalable spectral element dynamical core for the Community Atmosphere Model, Int. J. High Perf. Comput. Appl. (2012) 26, 74-89, doi:
10.1177/1094342011428142.
[4] L. M. Harris, P. H. Lauritzen, R. Mittal, A ﬂux-form version of the conservative semi-Lagrangian multi-tracer transport scheme (CSLAM) on
the cubed sphere grid, J. Comput. Phys. 230 (4) (2010) 1215–1237.
[5] P. H. Lauritzen, W. C. Skamarock, M. J. Prather and M. A. Taylor, A standard test case suite for two-dimensional linear transport on the
sphere. Geosci. Model Dev. Discuss. 5 (2012), 189–228.
[6] P. H. Lauritzen, R. D. Nair, P. A. Ullrich, A conservative semi-Lagrangian multi-tracer transport scheme (CSLAM) on the cubed-sphere grid,
J. Comput. Phys. 229 (2010), 1401–1424.
[7] P. H. Lauritzen, C. Erath, R. Mittal, On simplifying ‘incremental remap’- type transport schemes. J. Comput. Phys. 230 (2011), 7957–7963.
[8] R. D. Nair, P. H. Lauritzen, A class of deformational ﬂow test cases for linear transport problems on the sphere, J. Comput. Phys. 229 (2010)
8868–8887.
[9] M. A. Taylor, J. Edwards, S. Thomas, and R. D. Nair, A mass and energy conserving spectral element atmospheric dynamical core on the
cubed-sphere grid, J. Phys. Conf. Ser 78: (2007) 012074, doi:10.1088/1742-6596/78/1/012074.
[10] P. A. Ullrich, P. H. Lauritzen, C. Jablonowski, Geometrically Exact Conservative Remapping (GECoRe): Regular latitude-longitude and
cubed-sphere grids, Mon. Wea. Rev. 137 (2009), 1721–1741

