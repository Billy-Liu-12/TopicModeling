Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 392–401

International Conference on Computational Science, ICCS 2011

A Web API Framework for Developing Grid Portals
Valerio De Lucaa , Italo Epicocoa,∗, Daniele Lezzia , Giovanni Aloisioa
a Dep.

Engineering for Innovation, University of Salento, via per Monteroni, 73100 Lecce, Italy

Abstract
In this paper we describe a grid problem solving environment we developed for ﬁnancial applications. We based
its development on a portlet framework we have speciﬁcally developed and on a set of Web APIs that encapsulate
all grid control and computation logic. Even though nowadays grid portals are characterized by various and diﬀerent
features and are implemented in very diﬀering programming languages and technologies, we thought that they have
many structural aspects in common. For this reason we decided to design and implement a set of Grid speciﬁc Web
APIs, that we called GRB WAPI. Through them, a portal developer will not have to deal with grid technical details
and will be able to manage a high level design. A portal developer will be able to concentrate on some other aspects
that concern presentation, such as portal usability and functionality. We discarded the idea of developing a traditional
library in order to free portal developers from a particular implementation technology. Thanks to this choice the portal
presentation logic can be implemented in any web technology and can be on a diﬀerent server
Keywords: Grid Problem Solving Environment, Web API, REST, Grid Portals, Portlet

1. Introduction
A Grid portal is a Web-based gateway that provides seamless access to a variety of backend resources. In general,
a Grid portal provides end users with a customized view of software and hardware resources speciﬁc to their particular problem domain. It also provides a single point of access to Grid-based resources that they are authorized to use.
This allows scientists or engineers to focus on their problem area by making the Grid a transparent extension of their
desktop computing environment. Web services can be considered as a major technology for developing automated
interactions between distributed and heterogeneous applications. Various standards, such as WSDL (Web Services
Description Language), UDDI and SOAP, support the deﬁnition of Web services and their advertisement to the potential user community. However lighter-weight approaches to service are more and more requested, especially for Web
applications. Web APIs technology was born just to satisfy this necessity.
In this paper we describe the design of a portal framework for developing grid problem-solving environments based
∗ Corresponding

author. Tel +39 0832 297235; fax: +39 0832 297235
Email addresses: valeriodl@gmail.com (Valerio De Luca), italo.epicoco@unisalento.it (Italo Epicoco),
daniele.lezzi@gmail.com (Daniele Lezzi), giovanni.aloisio@unisalento.it (Giovanni Aloisio)

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.041

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

393

on a set of portlets that communicate with Web APIs that encapsulate all grid control and computation logic; we
called GRB WAPI these Grid speciﬁc Web APIs. By Using them a portal developer has not to deal with grid technical
details concentrating on some other aspects concerning presentation, such as portal usability and functionality. We
discarded the idea to develop a traditional library in order to free portal developers from a particular implementation
technology. Thanks to this choice the portal presentation logic can be implemented in any web technology and can be
on a diﬀerent server.
We adopted a REST[26] architectural style in our Web APIs design because it is a light-weight one in comparison with
Web services for developing automated interactions between distributed and heterogeneous applications. In RESTstyle architectures web requests and responses are built around the transfer of representations of resources. A resource
can be essentially any coherent and meaningful concept that may be addressed. A representation of a resource is typically a document that captures the current or intended state of a resource. RESTful applications maximize the use
of the pre-existing, well-deﬁned interface and other built-in capabilities provided by the chosen network protocol and
minimize the addition of new application-speciﬁc features on top of it. The paper is organized as follows: a brief
description of the state of the art is presented in section 2 to contextualize our work; the WebAPI and portal server
architecture are discussed in section 3 and 4; section 5 describes the design of the portlet based grid portal framework,
sections 6 presents a use case of a grid ﬁnance portal and section 7 concludes the paper.
2. State of the art
Grid portal development can be broadly classiﬁed into two generations. First generation Grid portals are tightly
coupled with Grid middleware such as Globus. These portals generally provide grid services such as authentication,
job management, data transfer and information services. Some ﬁrst generation representative Grid portal toolkits are
GRB[1][2][3][4], GridPort 2.0[6], the Ninf Portal[7] and GridSpeed[8]. A major limitation of the ﬁrst generation
portals is the lack of customization because the knowledge and expertise required for the use of the portal toolkits
is beyond the capability of most Grid end users. Moreover ﬁrst generation Grid portals often deliver only restricted
portal services. Moreover, ﬁrst generation portals can only provide static Grid services in that they lack a facility to
easily expose newly created Grid services to users.
The second generation of Grid portals relies on technologies such as portlets to provide more customizable solutions.
Some representative and popular portal frameworks are Jetspeed, WebSpheres Portal and GridSphere[5]. Running
inside a portlet container, portlets can be added into or removed from a portal, thus providing users with the ability
to customize Grid services at a portal level. Grid Portlets are independent components that are based on existing
Grid services. A Grid portal built from Grid Portlets can enable users to integrate services provided by diﬀerent Grid
middlewares. Second-generation Grid portals with portlets have the following beneﬁts compared with ﬁrst generation
Grid portals:
• Portal customization: users can build their personalized portals out of the available portlets to meet their speciﬁc
needs without the help of a Grid system developer.
• Extensible Grid services: portals built from portlets are loosely coupled with Grid middleware technologies
since Grid services can be exposed as standard portlets; a portal constructed from portlets provides users with
the ability to integrate services from diﬀerent Grid service providers.
• Dynamic Grid services: a Grid portal should be able to provide users with the ability to access dynamic Grid
services in a Grid environment; to this end, a mechanism can be provided to expose Grid services as individual
portlets that can be published and accessed via a portal.
Many portlet based grid portals have been developed using GridSphere portal framework. The ﬁrst one was called the
P-GRADE Grid portal[9]. Other portlet based grid portals are BeSTGRID[10], CCDB Portal[11] and University of
Sydney Portal[12].
Grid portals can also be grouped into two categories: user portals and application portals. A user portal provides a set
of basic services for portal users, which includes single sign-on, job submission and tracking, resource selection and
data management. An application portal provides application-related services for users, e.g. to construct a domain
application for the Grid.

394

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

Another related concept, the so called mashup, has emerged recently; it indicates a way to create new Web applications
by combining existing Web resources using data and Web APIs. These tools oﬀer considerable opportunities as the
availability of data as service that, coupled with collaborative application deployment, can help realize the vision of
the open programmable Web. One of the most common example of Web APIs are the Google Data APIs[13], which
allow programmers to create applications that read and write data from Google services. Currently, these include
APIs for Google Apps, Google Analytics, Blogger, Google Base, Google Book Search, Google Calendar, Google
Code Search, Google Earth, Google Spreadsheets, Google Notebook, and Picasa Web Albums. The Google services
use a REST Data Protocol to read, write and modify information on the web. Many services at Google provide
external access to data and functionality through APIs that utilize the Google Data Protocol. The protocol currently
supports two primary modes of access:
• AtomPub[24]: Information is sent as a collection of Atom items, using the standard Atom syndication format to
represent data and HTTP to handle communication. The Google Data Protocol extends AtomPub for processing
queries, authentication, and batch requests.
• JSON (JavaScript Object Notation)[25]: Information is sent as JSON objects that mirror the Atom representation.
The Google Data client libraries provide tools and an abstraction layer so that the user doesn’t have to deal with
HTTP requests or parse raw XML. Libraries are available for Java, JavaScript, .NET, PHP, and Python. REST technology is diﬀerent from RPC protocols like SOAP, where HTTP is only an envelope for RPC data and most information
is contained inside the XML payload. The GridRPC API[14] is an attempt to standardize and implement a portable
and simple RPC based API set for Grid Computing. An important RPC based web framework for grid applications is
WAGA[15]: it provides WAGA-designer, a GUI implemented with mashup technology and AJAX that uses a set of
WAGA APIs wrapped with Java reﬂection and RPC technology. The NERSC Web Toolkit (NEWT)[16] is a collection
of REST APIs speciﬁcally designed for developing grid applications. NEWT APIs use JSON as their data interchange
format: since every JSON object is automatically parsed as a native JavaScript object by the client browser, NEWT
interface can be programmed by anyone who knows HTML and JavaScript.
In our Web API design we chose XML instead of JSON to encode output data, in order to allow XSLT transformations. In particular we chose to exempt clients from parsing data: for this reason we decided to use server-side
XSLT transformations to build HTML fragments from XML output data. Moreover, we dont want to force portal
developers to use only JavaScript: thanks to some Web APIs wrappers or binding libraries we implemented in various
programming languages, we let a portal developer to choose a programming language.
3. GRB WAPI architecture
The design and implementation of the GRB WAPI is based on the GRB Libraries developed at the University
of Salento, Italy. The GRB Libraries implement the basic functionalities required to access several grid middleware
services. The GRB grid portal, based on the GRB libraries, was developed using CGI technologies. The aim of the
GRB WAPI is to allow an evolution of the GRB based portals decoupling the Web interface from the middleware
services. GRB WAPI is compliant to the deﬁnition of Web APIs, so that they can be invoked through HTTP protocol through an HTTP server. The GRB WAPI functions take input parameters as POST request and/or ﬁles with
a multipart/form-data request and write its output in XML format into related HTTP response. Aiming at granting
a good security level, we enable SSL/TLS protocol and HTTPS variant on our GRB WAPI Web Server, in order to
cipher the communications between clients and the Web... GRB WAPI output, contained in HTTP response, has the
following XML structure:
<output>
<result></result>
<error id=></error>
</output>

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

395

The output element, which is the XML document root, includes a result element, which contains processing results, and an error element, which in case of error contains a message and its related code stored in id attribute (when
processing ends without errors the error element contains an empty string and its id attribute has the 0 value). The ﬁrst
GRB WAPI that has to be invoked is grb wapi login, which authenticates a user who wants to access GRB WAPIs services: it takes username and password as input parameters and returns a session handle, which represents the user authentication with the system and has to be passed as an input parameter to all next GRB WAPI calls. The GRB WAPI
provide various services such as user credential management, Virtual Organization deﬁnition, computational resources
deﬁnition, job submission, resource monitoring and job status tracking. For example the grb wapi job submit can be
used for job submission: it takes as input parameters the session handle and a JSDL ﬁle describing the job to be
submitted according to the JSDL standard. After the job has been submitted, grb wapi check job could be invoked to
track the status of the job. The grb wapi check job requires the session handle id and the job id as input parameters.
4. Portal architecture
As we have said, our portal architecture is based on an important separation between the control and computation
logic and the presentation logic. As a consequence the architecture contains two entities: a Portal Server and a
Web Server to host the GRB WAPI. The Portal Server is responsible for the presentation logic and handles the user
interfaces. The GRB WAPI Web Server is responsible for the processing and control logic on which the portal relies
exposing these services through the GRB WAPI. The designed system is based on a three-tier architecture:
• the ﬁrst tier is represented by the user accessing the portal through a web browser;
• the second tier consists of a portal server hosting the portlets and responsible for dynamically building web
pages that containing portal contents;
• the third tier is represented by the Web Server where the GRB WAPI logic is deployed; this server includes also
a MySQL server which contains a relational database accessed by GRB WAPIs.
The UML deployment diagram in ﬁgure 1a shows the architecture we have just described. The GRB WAPIs
provide the portal with high level of ﬂexibility. The presentation layer could be developed in any web programming
language and technology using an apposite binding library written in the chosen programming language to invoke
GRB WAPI remote calls.
Our portal is characterized by clarity of design, eﬃcient modularity, multiple views, ease of growth and maintenance
and powerful user interfaces: we adopted Java portlets technology to reach these goals. Portlets technology, as deﬁned
in JSR-168 speciﬁcation[17] , allows the development of reusable web components in order to create accessible and
highly customizable user interfaces. A portlet is a Java-based Web component that processes requests from a portlet
container and generates dynamic content, which is the so-called fragment. A fragment can be aggregated with other
fragments to form a complete document, called the portal page. JSR-286[18] deﬁnes portlet 2.0 speciﬁcation. We
based our portal development on this second speciﬁcation, because it is compliant with Web 2.0 technologies and, in
particular, because it allows handling asynchronous HTTP requests. The portlet container we chose is Liferay[19],
an open source framework that provides the users with customizable pages. However we designed our portal to be
container independent.
The UML sequence diagram in ﬁgure 1b shows all the interactions among the architecture components. When a
client requests a page, each portlet of that page carries out the following operations in iterative manner to get some
HTML fragments which have to be assembled to make up the page content:
• it invokes a GRB WAPI remote call on the WEB API Server, which sends back an XML fragment containing
elaboration result;
• it applies an XSL stylesheet to the XML fragment to execute an XSLT transformation and obtain an HTML
fragment.
These two operations are in the most internal loop of the sequence diagram. The external loop contains the
operations carried out to make up the portlet content. Outside this loop, the Portlet Server collects the portlet to make
up the portal page that has to be sent to the client.

396

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

Figure 1: (a) Portal architecture; (b) Interactions among the architecture components

5. Portal framework design
We based portlet development on the design of a framework that allows invoking methods of Java binding library
and transforming XML output into portlet contents. This framework can be divided into four layers. The lowest layer
is responsible for invoking binding library API, whose methods are wrappers of GRB WAPI calls. The outputs of
this level are XML fragments, which are sometimes agglomerated to make up new XML fragments. A higher layer
applies some XSLT transformations to XML fragments to get some HTML fragments. In the highest layer HTML
components are agglomerated into a HTML content, which can be the entire content shown in EDIT or VIEW portlet
mode or can be agglomerated with other contents to make up a multiple content. In the following subsections we
will ﬁrst describe the Java binding library we developed and used to invoke GRB WAPIs in our portal and then some
implementation details of our framework.
5.1. Java binding library
The Java binding library we are going to describe acts as an abstraction layer that makes a portal development easier: by using them we dont need to directly invoke GRB WAPIs, write HTTP requests and read the related responses.
The Java binding library we developed has a three layers structure:
• the highest layer consists of methods the developer will invoke to build the portal;
• the middle layer is a wrapper that is used by the ﬁrst layer methods to invoke GRB WAPIs;
• the lowest layer is used by the middle layer to build HTTP requests that contact GRB WAPIs, passing them the
appropriate parameters.
Portal developers only need to use the highest layer methods, as the other layers only oﬀer services to this one.
The four classes, depicted in the UML diagram in ﬁgure 2a, implement the architecture described above: in particular
GRBWapiServer, GRBWapi and MultipartFormOutputStream class implement the services oﬀered by the three layers,
while GRBException class represents all raised exceptions. GRBWapiServer class is the one directly used by a portal
developer and is an abstraction of the Web Server where GRB WAPIs have been installed: so the class constructor
takes as an input parameter the Web Server URL, while almost all the class methods are wrappers used to correspond
GRB WAPIs invocations. After the GRBWapiServer object has been created, it is necessary to invoke an openConnection method to connect to the GRB WAPI server and authenticate the user: this method takes username and password
as input parameters and passes them to grb wapi login. If the authentication is successful, a session handle is created:

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

397

Figure 2: (a) UML class diagram for Java binding library; (b) UML class diagram for framework main section

this handle will be taken as an input parameter by GRB WAPIs invoked by all the other class methods.
Once the connection has been established, the developer has to invoke the getUsername method to retrieve the
users username, the getSessionId method to retrieve the session handle that has been created and isHandleValid to
check if the session handle is valid. All the other methods that can be invoked by a developer provide various grid
services. Each of them performs the following operations:
• creation of a GRBWapi object for the GRB WAPI to be invoked;
• passing of input parameters to the GRBWapi object; input parameters are passed with the addInputParameter
method and/or XML input ﬁles are passed with addInputFile method;
• invocation of the actual GRB WAPI represented by the GRBWapi object through the execute method, in the
case that no outputs are returned, or the getResultXMLDocument
method when the remote invocation returns outputs. In the latter case the outputs are returned in a XML document
represented by a Document object. If a remote error is produced the error tag of the XML output document is set and
the execute or the getResultXMLDocument methods of the GRBWapi class throw a GRBException.
As many GRB WAPI take also some ﬁles besides simple parameters as input data we needed to allow also ﬁle
uploading in HTTP requests, so we chose to use POST method and multipart request. As described in RFC 1521[20]in
multipart request the Content-Type ﬁeld of the header contains the multipart/form-data value and the request body is
made up of more parts, delimited by an apposite boundary string that has to be speciﬁed in the Content-Type ﬁeld of
the main header. The MultipartFormOutputStream class is used by the GRBWapi class to write the HTTP request: its
constructor takes as parameters the output stream where the request has to be written and a boundary string.
5.2. Framework classes
The UML class diagram in the ﬁgure 2b illustrates the main section of our portal framework. GenericPortlet abstract class implements Portlet interface and oﬀers a template that can be used to develop any portlet. In our framework
this class was further specialized into GRBPortlet abstract class, which in turn was used as a template to build the use
case portals portlets. Our portlets can deﬁne their VIEW and EDIT speciﬁc contents by implementing GRBViewInit
and GRBEditInit methods respectively: viewContent and editContent parameters are instances of GRBPortletContent
class and are used to collect all content fragments the portlet has to show in VIEW and EDIT mode. The processGRBAction method deﬁnes the operations the portlet has to perform when a new HTTP request has been generated by a
form submission. The isAjaxPortlet method is used by a portlet for asynchronous HTTP requests using Ajax technology; this allows a portlet to retrieve data from the server asynchronously in the background without interfering with
the display and the behaviour of the rest of the page where the portlet content lies; so, for example, a form submission
in the portlet will not cause a refresh of the entire page.
In all this cases, in GRBPortlet class we applied a template method design pattern, which suggests to deﬁne the general structure of an algorithm in an abstract class allowing concrete subclasses to deﬁne some details of it. The only
portlet that doesn’t extend GRBPortlet class is the Login portlet, which is a direct subclass of the GenericPortlet abstract class: this is the portlet the user has to use to authenticate himself. After the user has provided his username

398

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

Figure 3: (a) UML class diagram for portlet components handling; (b) UML class diagram for charts building

and password, processAction method builds a GRBSession object, which contains a GRBWapiServer instance; the
openConnection method is invoked on this object to authenticate the user with the GRB WAPI server. GRBSession
object is stored in portal session as an attribute with application scope, so it can be accessed by any portlet of the web
application. As we have seen before, the content that the portlet will show in VIEW and EDIT mode can be deﬁned
as the composition of more components, which are HTML fragments generated by XSLT transformations applied to
XML markups that represent GRB WAPIs outputs. The UML class diagram in ﬁgure 3a illustrates the section of our
framework that deals with these components, their composition and their visualization.
AbstractComponent abstract class represents a generic component that can be rendered in portlet VIEW or EDIT
mode: it deﬁnes the toHTML abstract method, which is responsible for building an HTML fragment and writing it in
the portlet content; this method has to be implemented by concrete subclasses, GRBPortletComponent, GRBPortletContent and GRBPortletMultiContent. A strategy design pattern is applied: each component is created by instantiating
one of the three subclasses, but then it is considered as an AbtractComponent object; however, when toHTML method
is invoked to write portlet contents, what is actually executed is an implementation speciﬁc for the subclass instantiated by the object.
GRBPortletContent subclass represents an entire content that can be rendered in portlet VIEW or EDIT mode. Content is made up of one or more components, each of them in turn represented by GRBPortletComponent class. So, in
addition to the strategy design pattern, a composite design pattern is applied, which suggests to combine more objects
within another object which has the same behaviour of its component parts; so, this design pattern allows to handle
single objects and compositions in a uniform way. In the case we have just described AbstractComponent class is a
common abstraction for both primitive and composite objects: it is actually extended by both GRBPortletComponent
class, which represents a primitive object, and GRBPortletContent class, which represents a composite object. The
toHTML method of GRBPortletContent class invokes the toHTML method of each object that is part of the content in
order to obtain the HTML fragments that have to be assembled in order to make up the entire HTML content.
The GRBPortletMultiContent subclass represents multiple content, given by the composition of more simple contents,
which are instances of GRBPortletContent class. Here composite design pattern is used also for the GRBPortletContent and GRBPortletMultiContent classes; in this case, GRBPortletContent represents the primitive object, while GRBPortletMultiContent represents the composite object. The toHTML method of GRBPortletMultiContent class invokes
the toHTML method of each object that is a part of the multiple content in order to build the related HTML fragments;
then this method assembles the single content fragments in order to build the entire HTML multiple content.
All AbstractComponent subclasses use the PortletHTMLWriter class object that is passed as an input to their toHTML
method, in order to write the HTML fragment of the component they represent. The GRBPortletComponent class
invokes a concrete implementation of transform method of a subclass of the DocumentTransformer abstract class to
execute XSLT transformations that generate HTML fragments from XML documents; this is another application of
the strategy design pattern.
The UML class diagram in ﬁgure 3b illustrates the classes responsible for building charts. The GRBChartBuilder
abstract class is a subclass of the DocumentTransformer class and provides an implementation of transform method
that builds a chart with the data in the XML markup it takes as an input. This method in particular invokes the build-

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

399

ChartFromXML abstract method for building the chart that is then encapsulated into a HTML markup. The reported
diagram is a tree of various abstract subclasses and the template method design pattern is applied to each level, because the buildChartFromXML method is decomposed into more elementary operations, and each of them is further
decomposed within the subclasses. The leaf nodes of this tree are concrete classes GriﬁnRichiestaPieChartBuilder,
GriﬁnRisultatiPieChartBuilder and JobStatusChartBuilder: the ﬁrst two classes have been developed for building the
pie charts in the use case described in the next section; the third class instead is used to build the horizontal bar chart
that describes the entire status history of a job in Job Status Details portlet. The various implementations of the buildChartFromXML method use JOFC2 Library[21] for building the Chart object that is returned to the invoking class.
This library is a wrapper for Open Flash Chart 2[22], which is an open source ﬂash library used to build animated
charts.
6. Case study
The case study to demonstrate the eﬃciency and the potentiality of the GRB WAPI is based on the Grid for Finance
project (Griﬁn)[23] funded by the Italian Ministry for Research and University (MIUR). The GriFin project was
focused on the development of a grid problem-solving environment for ﬁnancial applications. Financial applications
are one of the most interesting areas for the scientiﬁc community. The development of eﬃcient and eﬀective decisional
support tools in this area is strategically important for ﬁnancial institutes since they could provide great opportunities in
terms of enhancement of existing applications and development of new services with a higher level of customization.
The ﬁnancial application gave us a realistic and complex use case for developing a grid problem-solving environment
based on the GRB WAPI technology described in the previous sections.
After the deﬁnition of requirements and speciﬁc constraints, through the grid portal, ﬁnancial operators can obtain
suggestions about portfolio composition along the investment planning horizon, according to the risk aversion attitude
of the investor. Solutions are plotted as charts depicting:
• The eﬃcient frontier representing solutions in terms of risk measure and ﬁnal wealth as function of the risk
aversion attitude.
• The portfolio evolution along each scenario.
Before accessing the portal services the user has to authenticate himself through the login portlet. User authentication is based on Shibboleth, a software tool for web single sign-on. It allows retrieving information about
user identity and making informed authorization decisions for individual access of protected online resources in a
privacy-preserving manner. A Shibboleth Service Provider, installed on the portal server, is responsible for redirecting the user’s request to the external URL of a Discovery Service, which in turn enables the user to select an Identity
Provider. After the user provides his username and password, the Identity Provider retrieves some user data (userid,
email, name, surname, etc.) and then redirects back to the portal site. From then on the user is authenticated and the
web application is able to retrieve his data from apposite request header. Griﬁn portlet is the portlet the user has to use
to submit a job of the Griﬁn application. Three tabs compose the portlet user interface: instruments, parameters and
resume. In the Instruments tab the user can select instruments, specifying also an invested value, a lower bound and an
upper bound. In the Parameters tab the user can set the initial cash, an eventual minimum return and a time period in
months; he can also specify as a constraint the maximum risk for counterparts, categories and countries. The Resume
tab sums up for the user the data he has inserted in the previous tabs, so he can check them before submitting the job.
We used the GRBPortletMultiContent class we described above to implement the three-tabs content of this portlet.
Through the Job Status portlet the user can monitor the jobs he has submitted. For each job the user can get the list
of its subjobs (if existing), the submission timestamp, the status associated with a timestamp representing the time it
entered that status. Through this portlet the user can also cancel a job execution. The results portlet shows the results
of the Griﬁn application job execution selecting a value for lambda and a scenario; the portlet shows the execution
results for each level of the selected scenario for the selected lambda value. Result data are shown both through tables
and through pie charts.
The Job Status Details portlet allows the user to check some status details about his jobs and becomes active
when the user clicks on the output, the view log or the status column of the job. So, through this portlet the user

400

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

Figure 4: (a) Job Status portlet; (b) Results portlet; (c) Job Status Details portlet

can download the output ﬁles of a submitted job whose execution has ended, view the job log and, above all, he can
visualize a horizontal bar chart that shows the entire status history of the job.
7. Conclusions and future work
In this paper we have described the design of a new grid portal based on a multi level architecture: in particular we
used a very versatile back-end layer, characterized by GRB WAPI remote methods set, which allows using various
programming languages and technologies in the front-end layer. While Java portlet technology has been used to
develop a grid ﬁnance use case, more binding libraries are being developed for several programming languages (Ruby,
PHP, etc.) in order to integrate the GRB WAPI technology into existing frameworks.
The development of a grid portal based on GRB WAPIs calls is also a partial step towards cloud technologies. Typical
cloud computing providers deliver common business applications online that are accessed from another Web service
or software like a Web browser, while the software and data are stored on servers. GRB WAPI can be extended to
build interfaces for accessing SaaS (Software as a Service) applications in cloud environments.
Further steps in a cloud direction include improvements to make the system more autonomous and transparent for
users: as a ﬁnal result hardware, software and data should be automatically handled and reconﬁgured within a single
platform that could be presented to users.

Valerio De Luca et al. / Procedia Computer Science 4 (2011) 392–401

401

References
[1] M. Cafaro, I. Epicoco, M. Mirto, D. Lezzi, G. Aloisio, ”The Grid Resource Broker Workﬂow Engine”, Concurrency and Computation: Practice
and Experience, Special Issue: 2nd International Workshop on Workﬂow Management and Applications in Grid Environments (WaGe2007),
Volume 20, Issue 15, pp. 1725 - 1739
[2] G. Aloisio, M. Cafaro, G. Carteni, I. Epicoco, S. Fiore, D. Lezzi, M. Mirto, S. Mocavero, ”The Grid Resource Broker Portal”, Concurrency
and Computation: Practice and Experience, Special Issue on Grid Computing Environments, Volume 19, Issue 12 (2007), pp. 1663-1670
[3] G. Aloisio, M. Cafaro, ”Web-based access to the grid using the Grid Resource Broker Portal”, Concurrency and Computation: Practice and
Experience, Volume 14 Issue 13-15 (2002), pp. 1145-1160, Special Issue on Grid Computing Environments
[4] G. Aloisio, M. Cafaro, E. Blasi, I. Epicoco, ”The Grid Resource Broker, a Ubiquitous Grid Computing Framework”, Journal of Scientiﬁc
Programming, Volume 10, Number 2 (2002), pp. 113-119, Special Issue on Grid Computing, IOS Press, Amsterdam
[5] J. Novotny, M. Russell, O. Wehrens, Gridsphere: An advanced portal framework, in: EUROMICRO, IEEE Computer Society, 2004, pp.
412419.
[6] GridPort project page, http://gridport.sourceforge.net/
[7] T. Suzumura, H. Nakada, M. Saito, S. Matsuoka, Y. Tanaka, and S. Sekiguchi. 2002. The ninf portal: an automatic generation tool for grid
portals. In Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande (JGI ’02). ACM, New York, NY, USA, 1-7.
[8] T. Suzumura, S. Matsuoka, H. Nakada, H. Casanova, ”GridSpeed: A Web-based Grid Portal Generation Server,” hpcasia, pp.26-33, High
Performance Computing and Grid in Asia Paciﬁc Region, Seventh International Conference on (HPCAsia’04), 2004
[9] P. Kacsuk and G. Sipos: Multi-Grid, Multi-User Workﬂows in the P-GRADE Portal, Journal of Grid Computing, Vol. 3, No. 3-4, Springer
Publishers, pp. 221-238, 2005
[10] BeSTGRID, https://www.bestgrid.org/
[11] CCDB Portal, http://ccdb-portal.crbs.ucsd.edu/
[12] University of Sydney Portal, http://cima.chem.usyd.edu.au:8095/gridsphere/gridsphere
[13] Google Data APIs, http://code.google.com/intl/it-IT/apis/gdata/
[14] K. Seymour, H. Nakada, S. Matsuoka, J. Dongarra, C. Lee, H. Casanova, An Overview of GridRPC: A Remote Procedure Call API for Grid
Computing
[15] Xuanhua Shi, Zhao Chen, Hai Jin, Song Wu, Ke Fan, WAGA: A Flexible Web-Based Framework for Grid Applications, Huazhong University
of Science and Technology, Wuhan, China
[16] S. Cholia, D. Skinner, J. Boverhof, NEWT: A RESTful service for building High Performance Computing web applications, Berkeley National
Laboratory, Berkeley, CA, USA
[17] Portlet speciﬁcation http://jcp.org/aboutJava/communityprocess/ﬁnal/jsr168/index.html
[18] Potlet Speciﬁcation 2.0, http://jcp.org/en/jsr/detail?id=286
[19] http://www.liferay.com/documentation/social-oﬃce/1.5/user-guide
[20] RFC 1521, http://tools.ietf.org/html/rfc1521
[21] JOFC2, http://code.google.com/p/jofc2/
[22] Open Flash Chart 2, http://teethgrinder.co.uk/open-ﬂash-chart-2/
[23] Griﬁn project portal, http://www.griﬁn.eu
[24] The Atom Publishing Protocol, http://bitworking.org/projects/atom/rfc5023.html
[25] JSON interchange format, http://www.json.org/
[26] R. Fielding, REST: architectural styles and the design of network-based software architectures, Doctoral dissertation, University of California,
Irvine, 2000, http://www.ics.uci.edu/ ﬁelding/pubs/dissertation/top.htm

