Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 208 – 217

International Conference on Computational Science, ICCS 2013

Algorithmic Diﬀerentiation of a Complex C++ Code with
Underlying Libraries
Max Sagebauma,∗, Nicolas R. Gaugera , Uwe Naumannb , Johannes Lotzb , Klaus
Leppkesb
a Computational

Mathematics Group, Department of Mathematics and Center for Computational Engineering Science (CCES), RWTH
Aachen University Schinkelstr. 2, 52062 Aachen, Germany
b Software and Tools for Computational Engineering (STCE), RWTH Aachen University Süsterfeldstr. 65, 52072 Aachen, Germany

Abstract
Algorithmic diﬀerentiation (AD) is a mathematical concept which evolved over the last decades to a very robust and well
understood tool for computation of derivatives. It can be applied to mathematical algorithms, codes for numerical simulation,
and whenever derivatives are needed. In this paper we report on the algorithmic diﬀerentiation of the discontinuous Galerkin
solver padge, a large and complex code written in C++ with underlying external libraries. The reports on successful application
of AD to large scale codes are rare in literature and up to now this is not state of the art. Most of the codes, which are
diﬀerentiated nowadays, are written in C or Fortran. The padge code was diﬀerentiated with the operator overloading tool
dco/c++ in forward as well as reverse mode. The diﬀerentiated code is validated and runs in the expected time margins of AD.
Keywords: Automatic diﬀerentiation; Algorithmic diﬀerentiation; AD; dco; deal.II; Sacado; PETSc; external functions

1. Introduction
In this paper we report on the algorithmic diﬀerentiation of the discontinuous Galerkin solver padge from
German Aerospace Center (DLR), an extensive code written in C++ with underlying external libraries. The
padge code solves the compressible Reynolds-averaged Navier-Stokes equations (RANS). The code relies on
seven diﬀerent libraries, including the ﬁnite element package deal.II, PETSc, a library for solving linear and
nonlinear problems, MPI for parallel computation, and the AD library Sacado.
We undertake the algorithmic diﬀerentiation (also known as automatic diﬀerentiation) of padge due to the need
of derivatives for optimization strategies like one-shot [1]. The derivatives with respect to the state (e.g. the ﬂow
ﬁeld) and the design parameters (e.g the wing shape) can be calculated with the algorithmic diﬀerentiated version
of padge. The diﬀerentiated version of padge is created in a black box manner. The operator overloading tool
dco/c++ is used to activate all the variables of padge and the underlying libraries for the algorithmic diﬀerentiation.
Then the activated variables can be used to calculate the derivatives with padge.
It turned out that it makes no sense to diﬀerentiate all the underlying libraries. For instance the Newton
solves, performed with PETSc, need not to be diﬀerentiated in a black box manner. As the discrete adjoint of the
∗ Corresponding

author. Tel.: +49 241 80 98674 ; fax: +49 241 80 92 600 .
E-mail address: sagebaum@mathcces.rwth-aachen.de.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.184

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217

Newton solver turns out to be infeasible in terms of memory usage, we decided to embed a continuous adjoint
implementation in the algorithmic diﬀerentiation process. The continuous adjoint is included such that the normal
padge code is not aﬀected. Also the libraries for input and output operations such as NetCDF and OpenCascade
and the libraries for mesh operations like METIS do not need to be diﬀerentiated as they are not involved in the
computation of the solution.
The paper is organized as follows: First we give a short introduction to AD, which contains the forward as
well as the reverse mode. Then, the AD tool dco is introduced. In a next chapter we describe how padge has been
diﬀerentiated by dco. Furthermore, we discuss the special treatments in the diﬀerentiation process of the libraries,
included in padge. In a last chapter we present the validation of the diﬀerentiated code and give numbers for its
performance.
2. Algorithmic Diﬀerentiation
Algorithmic diﬀerentiation bases on the theory for the diﬀerentiation of a call sequence. A good foundation
of algorithmic diﬀerentiation (AD) is given by the books of Naumann et al. [2] and Griewank et al. [3]. The
eﬀorts to extend the theory is ongoing, see e.g. [4], [5], [6]. There are two classes of AD tools, namely source
transformation and operator overloading.
With source transformation the source code is parsed and a new code is generated, which is extended to calculate the derivatives alongside the calculations of the original code. This process can be applied to the whole
program or to a single function. The functions in the generated code have the same layout as the corresponding
functions in the original code. The diﬀerence is that for each input and output variable a new input or output
variable is added. The new variables contain the information about the derivatives. An example for source transformation tools is Tapenade [7]. Tapenade was at ﬁrst written as an AD tool for Fortran and recently extended to
handle C code [8].
Examples for operator overloading tools are ADOL-C [9] and dco [10]. With operator overloading the calculation type in the application or in a function is exchanged to an active type, which is provided by the AD tool. The
type overloads the arithmetic operators and the basic mathematical functions. Through the overloaded functions
the AD tool now knows what kind of operations are performed during the execution of the program. The program
code where the type of the AD tool is used is therefore called “active” or “activated”. For the activated code
the AD tool stores information about the operations or computes directly the derivative information during the
program execution. To apply AD on a code fragment each AD tool has its own set of functions and strategies.
For brevity we will just state the deﬁnitions for the Forward and Reverse Mode of AD. For a more detailed
introduction see the book of Naumann et al.[2].
Deﬁnition 1. Forward AD Mode: For the function y = F(x), given by the call sequence F(x) = ( fN ◦ fN−1 ◦ ... ◦
f1 ◦ f0 )(x), the tangent-linear projection
dF
y˙ =
x˙
dx
is computed by evaluating in a forward loop for i = 0, . . . , (N − 1)
vi+1 = fi (vi )

and

v˙ i+1 =

d fi
(vi )˙vi
dvi

simultaneously, with fi : Rni → Rni+1 , vi → vi+1 . Furthermore, we identify x ≡ v0 , x˙ ≡ v˙ 0 for the input variables
and y ≡ vN+1 , y˙ ≡ v˙ N+1 for the output variables.
We want to emphasize that the Jacobian vector product dF
˙ in Deﬁnition 1 is not computed by building the
dx x
dF
Jacobian dx and then multiplying it with x˙. The computation is matrix free and calculated alongside the normal
evaluation.

209

210

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217
Table 1. Forward and Reverse AD Mode for some elemental operations

Operation
Forward AD Mode
Reverse AD Mode

u=w+v
u˙ = w˙ + v˙
v¯ += u¯
w¯ += u¯
u¯ = 0

u=w∗v
u˙ = v ∗ w˙ + w ∗ v˙
v¯ += w ∗ u¯
w¯ += v ∗ u¯
u¯ = 0

u = sin(v)
u˙ = cos(v) ∗ v˙
v¯ += cos(v) ∗ u¯
u¯ = 0

u = W −1 v
˙
u˙ = W −1 (˙v − Wu)
−1 T
s = W u¯
¯ += −u · sT
W
v¯ += s
u¯ = 0

Deﬁnition 2. Reverse AD Mode: For the function y = F(x) given by the call sequence F(x) = ( fN ◦ fN−1 ◦ ... ◦
f1 ◦ f0 )(x), the adjoint projection
dF T
y¯
x¯ =
dx
is computed by evaluating
vi+1 = fi (vi )
v¯ i =

d fi
(vi )
dvi

in a forward loop from i = 0, . . . , (N − 1) and then evaluating
T

v¯ i+1

in a reverse loop from i = (N − 1), . . . , 0 ,

with fi : Rni → Rni+1 , vi → vi+1 . Furthermore, we identify x ≡ v0 , y¯ ≡ v¯ N+1 for the input variables and y ≡ vN ,
x¯ ≡ v¯ 0 the output variables.
We want to emphasize again that the Jacobian vector product in Deﬁnition 2 is not computed by building the
Jacobian dF
¯ . The product is calculated in a matrix free way
dx , transpose the Jacobian and then multiplying it with y
during the reverse sweep of the reverse AD mode.
The fi in the Deﬁnitions 1 and 2 are normally identiﬁed with the elemental functions +, −, ∗, /, pow, sqrt,
sin, cos, . . . but fi can also be a more complex function like linear or nonlinear solver. The identiﬁcation is done
in such a way that each fi performs one elemental operation and sets the result to one intermediate variable. The
other intermediate variables are unchanged. An AD tool for operator overloading will overload operators like +
and ∗ and functions like sin and pow to implement the results from Deﬁnitions 1 and 2. This enables the program
to calculate the derivatives.
In Table 1 a few selected elemental functions are shown. The ﬁrst three functions are not very diﬃcult to
derive but they illustrate the basic concept of AD very well. The fourth function describes the solution of a linear
system. It turns out that the solver for the original system can be used to calculate the forward and reverse results.
3. The AD tool dco
dco/c++ (derivative code by overloading in c++) [10] is developed from the STCE (Software and Tools for
Computational Engineering) group at RWTH Aachen. dco/c++ makes use of template expressions and other c++
features mainly to generate eﬃcient derivative code, e.g. by statement-level pre accumulation.
Another very helpful feature is the possibility to integrate external functions easily. An external function is a
code block, which is not to be diﬀerentiated by dco. The derivative of the external function is provided by the user
himself via an interface, next to the code parts diﬀerentiated by dco. This interface can be used to diﬀerentiate
a routine or library, for which dco should not be applied (e.g. linear system or iterative solvers), but where a
derivative function is available or the derivative could be easily implemented by hand.
In the reminder of the paper we will give examples on how dco is used in the diﬀerentiation progress. The
derivative types programmed with dco are the dco::t1s::type for the tangent projection of the Forward AD Mode
and the dco::a1s::type for the adjoint projection of the Reverse AD Mode. For the evaluation of second order
derivatives the type dco::t2s_a1s::type is available. The second order derivatives are computed by a tangent linear
projection on the adjoint projection.

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217

211

4. The diﬀerentiation of padge
The padge code [11], developed by DLR Braunschweig, is a discontinuous Galerkin solver, which solves the
compressible Reynolds-averaged Navier-Stokes equations (RANS). The code is written in C++ with underlying
external libraries. It solves on structured grids, which can be hp-reﬁned. The solvers for the ﬂow solution are
multigrid or Newton type. The internal structure of padge separates diﬀerent areas of the solution process into
diﬀerent packages, which are then combined to form the solution process. Some of the packages depend on special
external libraries, other external libraries are used throughout the padge code. There are seven diﬀerent libraries:
• NetCDF (Network Common Data Form) [12] is a library for loading and storing data. The data is stored in
a machine independent format, which is stored such that each ﬁle describes its own structure.
• METIS [13] provides functions and algorithms for the decomposition of graphs and ﬁnite element meshes.
• OpenCascade is a software package, which provides methods for the handling of CAD ﬁles.
• Sacado [14] is a part of the Trilinos project. Sacado is another AD tool for the algorithmic diﬀerentiation
of C++ codes. The forward mode of Sacado is only used at three locations inside padge.
• deal.II (Diﬀerential Equations Analysis Library) [15] is a library for the implementation of ﬁnite element
methods.
• PETSc (Portable, Extensible Toolkit for Scientiﬁc Computation) [16] is a extensive library for solving linear
and nonlinear problems. It deﬁnes its own structures and solver routines.
• MPI (Message Parsing Interface) [17] is a standard for the parallelisation of programs for multiple machines.
MPI takes care of the communication of the diﬀerent processes and the distribution of the tasks.
4.1. Concept of Diﬀerentiation
With respect to AD the libraries, which are used by padge, can be classiﬁed into two categories. The ﬁrst
category contains with NetCDF, METIS and OpenCascade all packages, which are used for data handling and IO
operations. In Figure 1 these packages are placed on the left hand side. All libraries in this category can be seen
as non dependent with respect to AD. The consequence is that the libraries don’t need to be diﬀerentiated with
AD. Only at the interface to padge a data conversion to the active type is needed.
On the right hand side in Figure 1, the second category is placed. The libraries Sacado, deal.II, PETSc
and MPI contribute all to the calculation of the solution. padge uses deal.II as the core for the computation.
Therefore, deal.II has to be diﬀerentiated. Furthermore, Sacado needs also to be diﬀerentiated by dco, which
yields consequently second order derivatives. Finally, PETSc is handled by the external function interface of dco.
We decided to disable MPI for the diﬀerentiation of padge to reduce initial workload.
Consequently, the grey box in Figure 1 contains all parts of code and libraries to be diﬀerentiated by AD.
The strategy for the diﬀerentiation is to implement a black box diﬀerentiation of deal.II, sacado and padge ﬁrst.
During this black box diﬀerentiation critical parts of code are identiﬁed for the application of more advanced AD
techniques and special treatments. The diﬀerentiated code of each library is to be veriﬁed after each black box
diﬀerentiation. This ensures that dependent libraries are not aﬀected by errors during further diﬀerentiation.
4.2. Diﬀerentiation of deal.II and padge
The ﬁrst challenge to diﬀerentiate deal.II and padge is the absence of deﬁnitions for a general calculation type.
Large parts of code in deal.II and padge are not templated and typedefs aren’t used. Consequently, we introduce
the typedef BASE_TYPE as calculation type. Each ’double’ is replaced by the type BASE_TYPE. BASE_TYPE
is now used to switch between the previous calculation type ’double’ and the active types from dco. The current
code for switching between the diﬀerent types is displayed in Figure 2. Within deal.II there is the possibility to
call the linear algebra package with mixed precision types. In the following example the matrix is stored in double
precision and multiplied by a ﬂoat vector:
t e m p l a t e v o i d F u l l M a t r i x <double > : : vmult < f l o a t >( V e c t o r < f l o a t >&, c o n s t V e c t o r < f l o a t >&, b o o l )
const ;

212

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217

MPI

disabled

PETSc

special treatment

NetCDF

METIS

padge
deal.II
dco (AD)

OpenCascade
Sacado

Fig. 1. Dependencies for padge and AD approach overview.

Inside these methods a conversion between the diﬀerent precisions would be needed. Therefore, the active types
for the diﬀerent precisions should be provided by AD, but this is usually not available for none of the tools. The
solution was to disabled the methods for the mixed precisions and remove the usage of this feature in padge.
deal.II and padge were developed with no templates in mind, and with the assumption that the template type
would always be a machine type like ﬂoat or double. Therefore, the programming rules for template code were
not applied. This leads to compiler errors for code lines with implicit conversion, and hardcoded double or ﬂoat
values. The example illustrated in Figure 3 reports the error "ambiguous overload for ’operator=’". The compiler
has the options to use the operator with the argument BASE_TYPE or IdentityMatrix. The solution is to use a
proper template coding convention, which is the cast to template type.
4.3. Sacado
In sacado the calculation type for the derivatives is a template. The implementation of sacado is done in a way
that additional information about the template type is needed. Consequently, we have to provide this information
for the dco type. This is done through an adapted macro from sacado. The new macro creates the information
sacado needs to know about the dco types. With some other minor changes to sacado, all complier errors could
be prevented. The result is the diﬀerentiation of an AD tool with another AD tool.
4.4. PETSc
4.4.1. Matrix and Vector classes
The parallelisation in padge is implemented through the vector and matrix classes of PETSc. Therefore, these
classes are used throughout the whole padge code, next to some MPI calls to start the parallelisation. As we
choose to disable MPI in the current project, the challenge is that the matrix and vector classes of PETSc are
not usable with a custom calculation type. The solution is the exchange of the PETSc vectors and matrices with
wrapper classes, which provide the same functionality as the PETSc classes and are usable with a custom type.
The wrapper classes are derived from the standard deal.II vector and matrix. During the diﬀerentiation of
deal.II these two classes were prepared for the usage with the dco types and thus meet the requirement that the
wrapper should work with custom types. The interface of the standard deal.II classes and the PETSc classes,
which are used in padge, are nearly the same.
4.4.2. Linear system solver
The next challenge in padge is the diﬀerentiation of the linear and nonlinear system solvers. As they are
implemented with the functionality provided by PETSc, which is not easily diﬀerentiable with AD tools. Therefore
the linear and nonlinear system solvers have to be treated separately. The ﬁrst step for the derivation of these

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217

/ / # d e f i n e BT_DOUBLE
/ / # d e f i n e BT_DCO_T1S
/ / # d e f i n e BT_DCO_A1S
# d e f i n e BT_DCO_T2S_A1S

/ / normal c a l c u l a t i o n t y p e
/ / f o r w a r d mode o f dco
/ / r e v e r s e mode o f dco
/ / s e c o n d o r d e r d e r i v a t i v e mode o f dco

# i f d e f i n e d (BT_DOUBLE)
/ / nothing here
# e l i f d e f i n e d ( BT_DCO_T1S ) | | d e f i n e d ( BT_DCO_A1S ) | |
# d e f i n e BT_DCO
#else
# e r r o r D e f i n e one b a s e t y p e w i t h BT_∗
# endif

d e f i n e d ( BT_DCO_T2S_A1S )

/ / i n c l u d e dco h e a d e r i f n e e d e d
# i f d e f BT_DCO
# i n c l u d e " . . / . . / . . / dco / i n c l u d e / dco . hpp "
# endif
# i f d e f i n e d (BT_DOUBLE)
t y p e d e f d o u b l e BASE_TYPE ;
# e l i f d e f i n e d ( BT_DCO_T1S )
t y p e d e f dco : : t 1 s : : t y p e BASE_TYPE ;
# e l i f d e f i n e d ( BT_DCO_A1S )
t y p e d e f dco : : a 1 s : : t y p e BASE_TYPE ;
# e l i f d e f i n e d ( BT_DCO_T2S_A1S )
t y p e d e f dco : : t 2 s _ a 1 s : : t y p e BASE_TYPE ;
#else
# e r r o r M i s s i n g t y p e d e f f o r a BT_∗
# endif

Fig. 2. The structure for switching between the diﬀerent base types.
S p a r s e M a t r i x <BASE_TYPE> s y s t e m _ m a t r i x ;
...
system_matrix = 0.0;
/ / error
s y s t e m _ m a t r i x = BASE_TYPE ( 0 . 0 ) ;
/ / no e r r o r

Fig. 3. Example for hardcoded values that lead to compiler errors. For this example: ambiguous overload for ’operator=’.

routines was a refactoring of these classes, to provide a more convenient way to use the external function interface
of dco. The solution of a linear system is now done in the method solve_system. It is used by the refactored
nonlinear solver. For the diﬀerentiation of the linear system solver, only solve_system has to be overloaded and
diﬀerentiated by hand.
The hand diﬀerentiated version of a linear system solver is presented in Table 1. The fourth column of the
table contains the procedures for the forward and reverse mode of the linear system solve for the system Wu = v.
For the forward dco type dco::t1s::type the implementation can be summarized into three steps: Extract the
normal and derivative value from the rhs vector and the matrix, solve the linear systems for the calculation and
combine the results to the output vector. In Figure 4 the whole implementation of the method for the forward type
is shown. The lines 3 to 6 perform the initialization of the PETSc matrices and vectors. They also initialize the
PETSc structure with the values from padge. The normal linear system Wu = v is solved with the call in line 10.
˙ is performed in the lines 12 to 14. The third step is done
The calculation for the forward AD mode W u˙ = (˙v − Wu)
in line 16, which writes the results to the output vector.
The implementation of the reverse mode has to be split into two methods, one for the normal evaluation and
one for the reverse evaluation. petsc_solve for the reverse type of dco is shown in Figure 5. The middle part of
the method solves the normal linear system. In the lines 2 to 3 and 19 the information for the reverse evaluation

213

214

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217

s t a t i c i n l i n e v o i d p e t s c _ s o l v e ( KSP ksp , dco : : D c o P e t s c M a t r i x &W, dco : : D c o P e t s c V e c t o r &v ,
dco : : D c o P e t s c V e c t o r &u ) {
PETScWrappers : : MPI : : Sp ar s eM at ri x _S EQ BA I J W_values , W_dot ; / / i n i t p e t s c m a t r i x
PETScWrappers : : MPI : : V e c t o r v _ v a l u e s , v _ d o t , u _ v a l u e s , u_ d o t , temp ;
/ / i n i t petsc vectors
d c o M a t r i x T o P e t s c M a t r i x (W, W_values , W_dot ) ;
dcoVectorToPetscVector ( v , v_values , v_dot ) ;
/ / s e t and s o l v e t h e s y s t e m
K S P S e t O p e r a t o r s ( ksp , W_values , W_values , SAME_NONZERO_PATTERN) ;
KSPSolve ( ksp , v _ v a l u e s , u _ v a l u e s ) ; / / s o l v e Wu=v
MatMult ( W_dot , u _ v a l u e s , temp ) ; / / temp = W_dot ∗ u
VecAXPY ( v _ d o t , − 1 . 0 , temp ) ; / / v _ d o t = v _ d o t − temp ;
KSPSolve ( ksp , v _ d o t , u _ d o t ) ; / / s o l v e Wu_dot= v _ d o t − W_dot ∗ u
petscVectorToDCOVector ( u_values , u_dot , u ) ;

//

create the solution vector

}

Fig. 4. Hand diﬀerentiation for the solution to a linear system for the dco forward mode.

is generated. Line 20 registers the function petsc_solve_adjoint_a1s for the reverse call on the dco tape. The
implementation of petsc_solve_adjoint_a1s is presented in Figure 6. In the method the values for the reverse
evaluation are read and then the linear system W T s = u¯ for the reverse mode is evaluated. The updates for the
matrix W and the right hand side vector v conclude the adjoint method.
5. Validation, Performance & Statistics
The validation of the gradients, which are calculated with the diﬀerentiated version of padge, is done against
ﬁnite diﬀerences. It is known by theory [3], that the gradients obtained by AD are of machine accuracy. With
ﬁnite diﬀerences of ﬁrst order, the approximation is just of order O(h) accurate, but the step size cannot be chosen
arbitrarily small due to cancellation errors. On the other hand, if h is chosen too large, the truncation error grows.
Consequently, the validation plots should show reductions in the approximation error for decrease in step size,
until cancelation occurs and the error increases again. This leads to a typical V-shaped curve.
The problem setup for the validation is a NACA 0012 airfoil with the following settings:
Ma = 0.5 α = 2◦ Re = 5000 DOF y = 25600 (1600 Cells) DOF u = 40
The discretized Navier Stokes Equations is solved with a Newton Solver or Backward Euler Solver
yk+1 = yk − J(yk , u)−1 R(yk , u),
Cd (y∗, u) with
•
•
•
•
•

yk ∈ Rn is the state vector of the k-th iterate
y∗ converged solution from the update yk
u ∈ Rm vector for the design parameters
R(y, u) residual of the discretized Navier-Stokes equations
J(y, u) ≈ ∂R(y,u)
∂y approximation of the Jacobian of the residual, as it is coded in padge as Newton or Backward
Euler
• Cd (y, u) its the cost functional: drag coeﬃcient of the airfoil

The symbol ∇dco (·) is used for the gradients produced by dco, and ∇FD (·) for the gradients calculated by ﬁnite
diﬀerences.
Figure 7 illustrates the diﬀerences between gradients obtained by AD (in forward as well as reverse mode) and
ﬁnite diﬀerences, for the residuals and Jacobians, diﬀerentiated with respect to design as well as state variables (see

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21

s t a t i c i n l i n e v o i d p e t s c _ s o l v e ( KSP ksp , dco : : D c o P e t s c M a t r i x &W, dco : : D c o P e t s c V e c t o r &v ,
dco : : D c o P e t s c V e c t o r &u ) {
dco : : a 1 s : : e x t e r n a l _ f u n c t i o n _ d a t a _ h e l p e r ∗ cp=new dco : : a 1 s : : e x t e r n a l _ f u n c t i o n _ d a t a _ h e l p e r ( ) ;
cp −> w r i t e _ t o _ c h e c k p o i n t (W) ; cp −> w r i t e _ t o _ c h e c k p o i n t ( v ) ;
cp −> w r i t e _ t o _ c h e c k p o i n t ( k s p ) ;
PETScWrappers : : MPI : : S p a r s eM at ri x _S EQ B A I J W_values ; / / i n i t p e t s c m a t r i x
PETScWrappers : : MPI : : V e c t o r v _ v a l u e s , u _ v a l u e s ; / / i n i t p e t s c v e c t o r s
d c o M a t r i x T o P e t s c M a t r i x (W, W_values ) ;
dcoVectorToPetscVector (v , v_values ) ;
/ / s e t and s o l v e t h e s y s t e m
K S P S e t O p e r a t o r s ( ksp , W_values , W_values , SAME_NONZERO_PATTERN) ;
KSPSolve ( ksp , v _ v a l u e s , u _ v a l u e s ) ; / / s o l v e Wu=v
/ / c r e a t e t h e s o l u t i o n v e c t o r and s e t u p e v e r y t h i n g f o r t h e r e v e r s e sweep
petscVectorToDCOVector ( u_values , u ) ;
makeActive ( u ) ;
cp −> w r i t e _ t o _ c h e c k p o i n t ( u ) ;
dco : : a 1 s : : g l o b a l _ t a p e −> r e g i s t e r _ e x t e r n a l _ f u n c t i o n (& p e t s c _ s o l v e _ a d j o i n t _ a 1 s , cp ) ;
}

Fig. 5. Hand diﬀerentiation for the solution of a linear system for the dco reverse mode. Function for the evaluation.

1

2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26

v o i d p e t s c _ s o l v e _ a d j o i n t _ a 1 s ( dco : : a 1 s : : t a p e &t a p e , c o n s t
dco : : a 1 s : : t a p e : : i n t e r p r e t a t i o n _ s e t t i n g s & s e t t i n g s DCO_UNUSED,
dco : : a 1 s : : t a p e : : e x t e r n a l _ f u n c t i o n _ d a t a ∗ u s e r d a t a )
{
dco : : a 1 s : : e x t e r n a l _ f u n c t i o n _ d a t a _ h e l p e r
∗ cp= s t a t i c _ c a s t <dco : : a 1 s : : e x t e r n a l _ f u n c t i o n _ d a t a _ h e l p e r ∗ >( u s e r d a t a ) ;
dco : : D c o P e t s c M a t r i x W;
dco : : D c o P e t s c V e c t o r v , u ;
KSP

ksp ;

cp −> r e a d _ f r o m _ c h e c k p o i n t (W) ;
cp −> r e a d _ f r o m _ c h e c k p o i n t ( u ) ;

/∗ linear solver context ∗/
cp −> r e a d _ f r o m _ c h e c k p o i n t ( k s p ) ;
cp −> r e a d _ f r o m _ c h e c k p o i n t ( v ) ;

PETScWrappers : : MPI : : S p a r s eM at ri x _S EQ B A I J W_values ; / / i n i t p e t s c m a t r i x
PETScWrappers : : MPI : : V e c t o r s , u _ b a r ; / / i n i t p e t s c v e c t o r
d c o M a t r i x T o P e t s c M a t r i x T r a n s p o s e (W, W_values ) ;
dcoVectorToPetscVector_ ( u , u_bar ) ;

/ / W_values c o n t a i n s t h e t r a n s p o s e d m a t r i x

/ / solve the adjoint system
K S P S e t O p e r a t o r s ( ksp , W_values , W_values , SAME_NONZERO_PATTERN) ;
KSPSolve ( ksp , u _ b a r , s ) ;
/ / s o l v e W^ T x=b
updateAdjointDcoVector (v , s ) ;
u p d a t e A d j o i n t D c o M a t r i x (W, u , s ) ;
}

Fig. 6. Hand diﬀerentiation for the solution of a linear system for the dco reverse mode. Function for the reverse sweep.

215

216

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217
∇ f1 :=

∂ R(y,u)
∂u

2

, ∇ f2 :=

∂ R(y,u)
∂y

2

, ∇ f3 :=

∂ J(y,u)
∂u

2

, ∇ f4 :=

1e+06

∂ J(y,u)
∂y

2

, ∇ f5 :=

dCd (y∗ (u),u)
du

||∇dco f1 − ∇FD f1 ||
||∇dco f2 − ∇FD f2 ||
||∇dco f3 − ∇FD f3 ||
||∇dco f4 − ∇FD f4 ||
||∇dco f5 − ∇FD f5 ||

10000
100
1
0.01
0.0001
1e-06
1e-08
1e-16

1e-14

1e-12

1e-10

1e-08

1e-06

0.0001

0.01

FD step size

Fig. 7. Validation of dco gradients against ﬁnite diﬀerences approximation of the gradient.

Table 2. Runtimes(ms(factor)) for normal padge and diﬀerentiated padge

Conﬁguration
normal
dco forward (one component)
dco reverse (full gradient)

∂ R 22
∂u
12.7(1.00)
23.7(1.87)
44.7(3.50)

∂ R 22
∂y
12.7(1.00)
23.7(1.87)
118.0(9.29)

∂ J 2F
∂u
248.4(1.00)
493.7(1.99)
823.0(3.31)

∂ J 2F
∂y
248.4(1.00)
493.7(1.99)
1869.6(7.53)

∗

Def. of ∇ f1 , ∇ f2 , ∇ f3 and ∇ f4 in Figure 7). ∇ f5 := dCd (ydu(u),u) deﬁnes the diﬀerentiation of the drag cost functional
Cd (y, u) with respect to the vector of design variables u. The function Cd depends directly and indirectly on the
design u. The indirect dependency on u is introduced by the converged ﬂow solution y∗ , which depends on the
design u. The derivative of Cd with respect to u is
∂Cd ∗
∂y∗
dCd (y∗ (u), u) ∂Cd ∗
=
(y (u), u)
(u) +
(y (u), u)
du
∂y
∂u
∂u

.

The ﬂow solution y∗ is attained by the Newton
solver in padge. Through the diﬀerentiation of padge the
∗
(u)
can
thus be calculated with the diﬀerentiated Newton solver.
Newton solver is also diﬀerentiated. The term ∂y
∂u
through the Newton solver and
The evaluation of ∇ f5 is therefore done in two step. First the solution y∗ is obtained
∗
then the function Cd (y∗ , u) is evaluated. Through AD the the derivative dCd (ydu(u),u) is calculated in the background.
For each of the gradients, Figure 7 shows the expected V-shaped curves.
The runtime measurements, shown in Table 2, are performed for R(y, u) and J(y, u), with degrees of freedom
n = 14400 for the state vector y, and m = 40 for the design vector u. The runtime factors with respect to the
ﬁrst line are represented in brackets. The factors are very close to the optimal theoretical values: 2 to 2.5 for the
forward mode, and 3 to 4 for the reverse mode [3]. But this is only true for the diﬀerentiation with respect to the
design u. The higher dimension of the state vector y introduces an additional factor of 2, which can be explained
by the larger set of variables. The state y is used in more calculations than the design u and such more information
is stored on the tape.
The statistics for the changed code lines are counted for padge as well as deal.II. The counting is done with
the tool cloc, which is conﬁgured to ignore spaces and empty lines, but to include comment lines. The results

Max Sagebaum et al. / Procedia Computer Science 18 (2013) 208 – 217

217

Table 3. Changed code lines for padge and deal.II.

deal.II
Overall
Modiﬁed

Code lines + comments
219235
8719 (4,0%)

padge
Overall
Modiﬁed

Code lines + comments
132586
8874 (6,7%)

from cloc are displayed in Table 3. The changes are relatively large because, we had to introduce the typedef for
the basic calculation type.
6. Conclusion & Outlook
The successful diﬀerentiation of a complex C++ code with underlying libraries, supported by dco, has been
demonstrated. The key AD techniques have been the introduction of typedefs and the use of external functions
after refactoring the code.
As future projects we address the incorporation of MPI [18] as well as the diﬀerentiation of matrix and vector
classes from PETSc. This will enable us to revert to the original vectors in padge and to remove our own wrapper
classes.
References
[1] N. Gauger, A. Griewank, A. Hamdi, C. Kratzenstein, E. Özkaya, T. Slawig, Automated extension of ﬁxed point pde solvers for optimal
design with bounded retardation, International Series of Numerical Mathematics 160 (2012) 99–122.
[2] U. Naumann, The Art of Diﬀerentiating Computer Programs. An Introduction to Algorithmic Diﬀerentiation., Software, Environments,
and Tools, SIAM, Philadelphia, PA, 2012.
[3] A. Griewank, A. Walther, Evaluating Derivatives, second edition, SIAM, 2008.
[4] A. Lyons, I. Safro, J. Utke, Randomized heuristics for exploiting jacobian scarcity, Optimization Methods and Software 27 (2) (2012)
311–322. doi:10.1080/10556788.2011.577774.
[5] V. Mosenkis, U. Naumann, On optimality preserving eliminations for the minimum edge count and optimal jacobian accumulation
problems in linearized dags, Optimization Methods and Software 27 (2012) 337–358.
[6] M. Wagner, B.-J. Schaefer, A. Walther, On the eﬃcient computation of high-order derivatives for implicitly deﬁned functions, Computer
Physics Communications 181 (2010) 756–764.
[7] L. Hascoët, V. Pascual, Tapenade 2.1 user’s guide, Technical Report 0300, INRIA (2004).
URL http://www.inria.fr/rrrt/rt-0300.html
[8] V. Pascual, L. Hascoët, TAPENADE for C, in: Advances in Automatic Diﬀerentiation, Lecture Notes in Computational Science and
Engineering, Springer, 2008, pp. 199–210, selected papers from AD2008 Bonn, August 2008.
[9] A. Walther, Computing sparse hessians with automatic diﬀerentiation, ACM Trans. Math. Softw. 34 (1) (2008) 3:1–3:15.
doi:10.1145/1322436.1322439.
[10] J. Lotz, K. Leppkes, U. Naumann, dco/c++ – eﬃcient derivative code by overloading in c++, Tech. Rep. AIB-2011-05, RWTH Aachen
(2011).
URL http://aib.informatik.rwth-aachen.de/2011/2011-05.pdf
[11] R. Hartmann, J. Held, T. Leicht, F. Prill, Discontinuous Galerkin methods for computational aerodynamics – 3D adaptive ﬂow simulation
with the DLR PADGE code, Aerospace Science and Technology 14 (2010) 512–519. doi:10.1016/j.ast.2010.04.002.
[12] R. K. Rew, G. P. Davis, S. Emmerson, H. Davies, NetCDF User’s Guide for C, An Interface for Data Access, version 3 Edition (April
1997).
[13] G. Karypis, V. Kumar, A fast and high quality multilevel scheme for partitioning irregular graphs., SIAM Journal on Scientiﬁc Computing
20 (1) (1999) 359 – 392.
[14] E. T. Phipps, R. A. Bartlett, D. M. Gay, R. J. Hoekstra, Large-scale transient sensitivity analysis of a radiation-damaged bipolar junction
transistor via automatic diﬀerentiation, in: Advances in Automatic Diﬀerentiation, Springer, 2008, pp. 351–362.
[15] W. Bangerth, R. Hartmann, G. Kanschat, deal.II – a general purpose object oriented ﬁnite element library, ACM Trans. Math. Softw.
33 (4) (2007) 24/1–24/27.
[16] S. Balay, W. D. Gropp, L. C. McInnes, B. F. Smith, Eﬃcient management of parallelism in object oriented numerical software libraries,
in: E. Arge, A. M. Bruaset, H. P. Langtangen (Eds.), Modern Software Tools in Scientiﬁc Computing, Birkhäuser Press, 1997, pp.
163–202.
[17] MPI Forum, MPI: A Message-Passing Interface Standard. Version 2.2, available at: http://www.mpi-forum.org (Dec. 2009)
(September 4th 2009).
[18] U. Naumann, L. Hascoët, C. Hill, P. Hovland, J. Riehme, J. Utke, A framework for proving correctness of adjoint message-passing
programs, in: Proceedings of the 15th European PVM/MPI Users’ Group Meeting on Recent Advances in Parallel Virtual Machine and
Message Passing Interface, Springer-Verlag, Berlin, Heidelberg, 2008, pp. 316–321. doi:10.1007/978-3-540-87475-1_44.

