Procedia Computer Science
Volume 51, 2015, Pages 1917–1926
ICCS 2015 International Conference On Computational Science

Interactively Exploring the Connection between
Bidirectional Compression and Star Bicoloring
M. Ali Rostami1 and H. Martin B¨
ucker1
Friedrich Schiller University Jena, Institute for Computer Science, Jena, Germany

Abstract
The connection between scientiﬁc computing and graph theory is detailed for a problem called
bidirectional compression. This problem consists of ﬁnding a pair of seed matrices in automatic
diﬀerentiation. In terms of graph theory, the problem is nothing but ﬁnding a star bicoloring.
An interactive educational module is designed and implemented to illustrate the connection
between bidirectional compression and star bicoloring. The web-based module is intended to
be used in the classroom to illustrate the intricate nature of this combinatorial problem.
Keywords: Graph coloring, sparse Jacobian, automatic diﬀerentiation, EXPLAIN, interactive learning,
combinatorial scientiﬁc computing

1

Graphs in Scientiﬁc Computing

Concepts from graph theory are widely used in many technical and scientiﬁc disciplines including
computational science. Graph models capture various aspects of entities and their relations
among each other. They often provide a wider perspective on a given problem. In the ﬁeld of
scientiﬁc computing, graph theory enters the picture, most notably, when the resulting matrix
problems are sparse. A matrix is called “sparse” if it is possible to take advantage of the
number or the position of its nonzero elements. The nonzero pattern of a sparse matrix is
commonly represented by a graph. This is the main reason why graphs and graph algorithms
are ubiquitous in sparse linear algebra; see the textbooks [9, 11] for more details.
Undoubtedly, there is an intimate connection between scientiﬁc computing and graph theory. In actual problems from scientiﬁc computing, these connections are often hidden or diﬃcult
to recognize. Yet, the beneﬁts from exploiting graph-theoretical ideas in scientiﬁc computing
are often crucial so that one cannot aﬀord to neglect them. Conversely, graph theory can also
beneﬁt from the rich set of techniques available in scientiﬁc computing; see the collections of
papers in [19]. It is therefore important to clarify the relationship between these two diﬀerent
scientiﬁc ﬁelds. In particular, there is an urgent need to teach this connection in the classroom. Our experiences from teaching topics of scientiﬁc computing in beginning, intermediate,
and advanced-level courses for mathematicians, computer scientists, or engineers tell us that,
typically, students are proﬁcient in either scientiﬁc computing or graph theory, but not in both.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.456

1917

Connection between Bidirectional Compression and Star Bicoloring

Rostami and B¨
ucker

In this paper, we introduce a novel interactive educational module intended to be used in
the classroom to bridge this gap for a particular problem in scientiﬁc computing. This module
is part of a larger collection of similar modules for diﬀerent problems. This extensible collection
is called EXPLoring Algorithms INteractively (EXPLAIN) and was started with [20]. In this
software, the visualization of a matrix problem and its corresponding graph problem is provided
in an interactive environment. Moreover, an algorithm for the solution of a given problem is
illustrated in terms of its step-by-step changes made on both, the graph and the matrix.
Up to now, various software tools have been developed to cover numerous educational aspects
of graph theory. However, their aims are quite diﬀerent from those of EXPLAIN. For instance,
the tools CABRI-Graph [5] and Gato/CATBox [23] are implemented mainly for the purpose of
visualization and animation of graph algorithms. They provide the students with an interactive
environment to select a graph and an algorithm to follow the intermediate steps when the
algorithm is executed on that graph instance. The visualization and analysis of graphs is also
investigated in other tools including Tulip [2]. While the aforementioned tools are designed
independent of some application domain, there are others with an emphasis on a particular
domain. For instance, JFLAP [22] is an interactive visualization and teaching tool for formal
languages. Also, there are interactive Java applets to be used together with the scientiﬁc
computing textbook [14]. Some of these applets consider matrix problems. However, there is
no support whatsoever to illustrate the connection between the matrix and its corresponding
graph problem. To the best of our knowledge, EXPLAIN is the only teaching software that is
speciﬁcally designed for scientiﬁc computing problems and their relation to graphs.
In this paper, we extend EXPLAIN with a new educational module addressing the problem of
ﬁnding seed matrices in automatic diﬀerentiation that satisfy certain properties. This scientiﬁc
computing problem referred to as bidirectional compression is described in Sect. 2. We explain
the equivalent graph-theoretical problem called star bicoloring in Sect. 3. The new educational
module and its implementation details are discussed in Sect. 4 and Sect. 5, respectively.

2

Finding a Pair of Seed Matrices

Given a program to evaluate some function f (x) : Rn → Rm , techniques of automatic diﬀerentiation (AD) [12, 21] generate computer programs capable of evaluating the m × n Jacobian
matrix J. In the forward mode (FM) of AD, the automatically-generated program computes
the product JV ; in the reverse mode, it computes the product W J. In these matrix-matrix
products, the two binary input matrices V ∈ {0, 1}n×c and W ∈ {0, 1}r×m are called seed matrices. The products JV and W J are computed without assembling the Jacobian J. Compared
to the time needed to evaluate f (x), the computational cost of computing JV in the forward
mode is larger by a factor of c, the number of columns of V . The corresponding factor for the
reverse mode to compute W J is given by r, the number of rows of W .
In general, the Jacobian J is computed choosing either c = n and V as the identity of order n
in the forward mode or r = m and W as the identity of order m in the reverse mode. However,
if J is sparse and its sparsity pattern is known the number of columns of V in the forward mode
or the number of rows of W in the reverse mode can be reduced to c < n or r < m such that all
nonzero entries of J still appear in the product JV or W J. This way, the computational cost is
decreased using either the forward mode with a suitable linear combination of the columns of J
or the reverse mode with a suitable linear combination of the rows of J; see the survey [10].
The key idea behind this unidirectional compression is now illustrated for the forward mode.
Let J = [c1 , c2 , . . . , cn ] denote the Jacobian matrix whose ith column is represented by the
vector ci ∈ Rm . Two columns ci and cj are called structurally orthogonal if they do not have any
1918

Connection between Bidirectional Compression and Star Bicoloring

Rostami and B¨
ucker

nonzero element in a same row. Two columns are called structurally non-orthogonal if there is at
least one row in which both columns, ci and cj , have a nonzero element. The number of columns
of the seed matrix is then reduced by forming linear combinations of structurally orthogonal
columns. More precisely, a set S of structurally orthogonal columns can be represented by a
single column of the product JV because the sum of these columns contains all the nonzero
entries of all the columns in S. Analogously, two rows are structurally orthogonal if they do not
have any nonzero element in a same column. A set of structurally orthogonal rows is represented
by a single row in the product W J. The computational cost then scales with the number of
groups of structurally orthogonal columns or rows in the forward or reverse mode, respectively.
To illustrate this, we consider the following three 6 × 6 Jacobian matrices:
⎡

1
⎢2
⎢
⎢3
A=⎢
⎢4
⎢
⎣5
6

0
7
0
0
0
0

⎤
⎡
1 2 3 4
0 0
0
⎢0 7 0 0
0⎥
0 0
⎥
⎢
⎢
0 0
0⎥
⎥ , B = ⎢0 0 8 0
⎥
⎢0 0 0 9
9 0
0⎥
⎢
⎣0 0 0 0
0 10 0 ⎦
0 0 11
0 0 0 0

0
0
8
0
0
0

5
0
0
0
10
0

⎤
⎡
6
1 7
⎢2 12
0⎥
⎥
⎢
⎢
0⎥
⎥ , C = ⎢3 0
⎥
⎢4 0
0⎥
⎢
⎣5 0
0⎦
11
6 0

8
0
13
0
0
0

9
0
0
14
0
0

⎤
10 11
0
0⎥
⎥
0
0⎥
⎥.
0
0⎥
⎥
15 0 ⎦
0 16

Since all elements of column 1 of A are nonzero, this column is not structurally orthogonal to
any of the other columns. Similarly, row 1 of B is not structurally orthogonal to any of the
other rows. However, the columns 2, 3, 4, 5, and 6 of the matrix A are structurally orthogonal
and so are rows 2, 3, 4, 5, and 6 of B. Therefore, we build two groups, {1} and {2, 3, 4, 5, 6}, of
structurally orthogonal columns of A as well as two groups, {1} and {2, 3, 4, 5, 6}, of structurally
orthogonal rows of B. This grouping of structurally orthogonal columns and rows is represented
by the two seed matrices and their resulting matrix-matrix products:
⎡

1
⎢0
⎢
⎢0
V =⎢
⎢0
⎢
⎣0
0

⎤
⎤
⎡
0
1 0
⎢2 7 ⎥
1⎥
⎥
⎥
⎢
⎥
⎢3 8 ⎥
1⎥
⎥
⎢
,
AV
=
⎢4 9 ⎥
1⎥
⎥
⎥
⎢
⎣5 10⎦
1⎦
6 11
1

W =

1
0

0
1

0
1

0
1

0
1

WB =

1
0

2
7

3
8

4
9

5
10

0
,
1

and
6
.
11

Each group of structurally orthogonal columns of A corresponds to a column in the seed matrix V . Similarly, each group of structurally orthogonal rows of B corresponds to a row in the
seed matrix W . All nonzero elements of A also appear in AV and all nonzero elements of B
also appear in W B. The computational cost using either the forward mode or the reverse mode
is decreased from taking identity seed matrices of order n = m = 6 to seed matrices V and W
with c = r = 2, representing two groups of structurally orthogonal columns/rows.
Next, consider the matrix C that has neither structurally orthogonal columns nor structurally orthogonal rows. Therefore, there is no unidirectional compression of the matrix C,
neither by c columns nor by r rows, that reduce c or r below n = m = 6. However, a linear
combination of both, columns and rows, can be used to reduce the computational cost to a value
below six. Here, the columns and rows of a corresponding group are not necessarily structurally
orthogonal. This technique in which the forward and reverse mode are used in a combined way
is called bidirectional compression. There are various ways to carry out this compression. One
1919

Connection between Bidirectional Compression and Star Bicoloring

option for this example is to choose
⎡
⎤
⎡
1 0
1
⎢0 1⎥
⎢2
⎢
⎥
⎢
⎢0 1⎥
⎢3
⎢
⎥
⎢
V =⎢
⎥ , CV = ⎢4
0
1
⎢
⎥
⎢
⎣0 1⎦
⎣5
6
0 1

⎤
45
12⎥
⎥
13⎥
⎥
14⎥
⎥
15⎦
16

Rostami and B¨
ucker

W = 1

0

0

0

0

WC = 1

7

8

9

10

0 ,

and

(1)
11 .

All nonzero elements of C also appear in the pair CV and W C. Notice that the nonzero
element 1 is contained in both products and that the product CV contains the value 45 which
is irrelevant to compute all nonzero elements of C. The computational cost of a bidirectional
compression is dominated by the sum of the costs of the forward and reverse mode which is
c + r = 3 in this example. By counting the occurrences of ones in the seed matrices in (1), we
see that 6 columns, but only a single row of C are used to form the groups of columns/rows.
In general, it is suﬃcient to form these groups by choosing subsets of the columns and rows of
a given sparse matrix.
The above example is intentionally kept simple. However, for general sparsity patterns,
it is not always easy to ﬁgure out how to linearly combine columns and rows such that the
computational cost is minimized. Hence, we introduce the following combinatorial optimization
problem that addresses this question. In practice, the solution of this problem will substantially
reduce the computational cost for computing all nonzero elements of a large and sparse Jacobian.
Problem 1 (MinimumBidirectionalCompression). Let J be a sparse m × n Jacobian matrix with known sparsity pattern. Find a pair of binary seed matrices V of dimension n × c
and W of dimension r × m whose number of columns of V and number of rows of W sum
up to a minimal value, c + r, such that all nonzero elements of J also appear in the pair of
matrix-matrix products JV and W J.
An equivalent graph-theoretical formulation of this problem is discussed in the next section.

3

Finding a Star Bicoloring

For unidirectional compression where either columns or rows are linearly combined, Coleman
and Mor´e [6] introduced an undirected graph model. If columns are linearly combined, each
vertex in this model represents a column of the Jacobian and two vertices are connected if
and only if the columns represented by these vertices are structurally non-orthogonal. The
combinatorial problem to ﬁnd a binary seed matrix V with a minimal number of columns such
that all nonzero elements of the Jacobian matrix J also appear in the product JV consists
of coloring this undirected graph with a minimal number of colors. An educational module
illustrating unidirectional compression with respect to columns is introduced in [4].
This undirected graph model is easily adapted to unidirectional compression with respect to
rows. Here, a vertex represents a row and an edge represents structural non-orthogonality of two
rows. However, the undirected graph model is not suﬃcient to capture the properties involved
in bidirectional compression. An obvious reason is that, for a rectangular Jacobian matrix,
a bidirectional compression requires to model columns and rows separately. It is therefore
common to consider a bipartite graph model [7, 8, 15]. In this model, the vertex set V = Vc ∪ Vr
is decomposed into a set of vertices Vc representing columns of J and another set of vertices Vr
representing rows. The set of edges E is used to represent the nonzero elements and it is deﬁned
1920

Connection between Bidirectional Compression and Star Bicoloring

Rostami and B¨
ucker

as follows. An edge (ci , rj ) ∈ E connects a column vertex ci ∈ Vc and a row vertex rj ∈ Vr if
there is a nonzero element in J at the position represented by ci and rj . The graph is bipartite
indicating that all edges connect vertices from one set Vc to the other set Vr . That is, there
is no edge connecting vertices within the set Vc or within Vr . Moreover, two vertices that are
connected by a path of length two, are called distance-2 neighbors.
The overall idea behind transforming Problem 1, MinimumBidirectionalCompression,
into an equivalent problem using the bipartite graph model is as follows. The grouping of the
columns and rows is expressed by representing each group by a color. Vertices that belong to
the same group of columns/rows are assigned the same color. Formally, this is represented by
a coloring of a bipartite graph. Such a coloring is mapping
Φ : Vc ∪ Vr → {0, 1, . . . , p}
that assigns to each vertex a color represented by an integer. Recall from the previous section
that, in general, there can be columns or rows that are not chosen in the grouping at all.
Therefore, the coloring Φ also involves a “neutral” color representing this “don’t color” situation.
A vertex v ∈ Vc ∪ Vr that is not used in the grouping of columns/rows is assigned the neutral
color Φ(v) = 0. More precisely, if Φ(v) = 0 for a column vertex v then every nonzero represented
by an incident edge of v is determined by a linear combination of rows. Similarly, a nonzero
entry represented by an edge that is incident to a neutrally-colored row vertex is determined
by a linear combination of columns.
To represent the process of ﬁnding seed matrices using the bipartite graph model, it is
necessary to consider the underlying properties, which are as follows:
1. The computational cost roughly consists of the number of groups of columns and rows.
Since the overall cost is the sum of the costs associated to the forward mode and to the
reverse mode, the (non-neutral) colors for the forward mode and the (non-neutral) colors
for the reverse mode need to be diﬀerent.
2. Recall from our example with the products CV and W C that some nonzero elements
may be computed twice, by the forward mode in JV and by the reverse mode in W J.
Therefore, an edge representing such a nonzero element connects two vertices with two
diﬀerent non-neutral colors. In general, since problem MinimumBidirectionalCompression asks for computing all nonzero elements, at least one vertex of every edge has
to be colored with a non-neutral color.
3. Recall from the example that structural orthogonality is no longer required for grouping
the rows and columns. However, there is still the following restriction. Suppose two
columns are structurally non-orthogonal and have a nonzero element in a same row. If
this row is not handled by the reverse mode, these two columns need to be in diﬀerent
column groups. The same argument holds for corresponding situations with row groups.
4. Consider three nonzero elements in matrix positions (i, k), (i, ), and (j, k). Suppose that
the nonzero at (i, k) is computed by the reverse mode assigning some (non-neutral) color
to the row vertex ri . Then, if (j, k) is also computed via the reverse mode, a second
(non-neutral) color is needed for rj . Now, if (i, ) is already determined by the reverse
mode for row i the column vertex c is assigned the neutral color. However, if (i, ) is
computed by the forward mode, a third (non-neutral) color is needed for c . A similar
argument holds if (i, k) is computed by the forward mode.
Based on these considerations, the following deﬁnition captures these properties.
1921

Connection between Bidirectional Compression and Star Bicoloring

Rostami and B¨
ucker

Deﬁnition 1 (Star Bicoloring). Given a bipartite graph G = (Vc ∪ Vr , E), then a mapping
Φ : Vc ∪ Vr → {0, 1, . . . , p} is a star bicoloring of G if the following conditions are satisﬁed:
1. Vertices in Vc and Vr receive disjoint colors, except for the neutral color 0. That is, for every
ci ∈ Vc and rj ∈ Vr , either Φ(ci ) = Φ(rj ) or Φ(ci ) = Φ(rj ) = 0.
2. At least one vertex of every edge receives a non-neutral color. That is, for every (ci , rj ) ∈ E,
the conditions Φ(ci ) = 0 or Φ(rj ) = 0 hold.
3. For every path (u, v, w) with Φ(v) = 0, the condition Φ(u) = Φ(w) is satisﬁed.
4. Every path of length three with four vertices uses at least three colors (possibly including the
neutral color).
Using the bipartite graph model and the deﬁnition of a star bicoloring, the problem MinimumBidirectionalCompression is equivalent to the following graph problem.
Problem 2 (MinimumStarBicoloring). Given the bipartite graph G = (Vr ∪ Vc , E) associated to a sparse Jacobian matrix J, ﬁnd a star bicoloring of G with a minimal number of
non-neutral colors.
A unidirectional compression is a special case of a bidirectional compression. More precisely,
a unidirectional compression with respect to columns corresponds to a star bicoloring in which
all the vertices in Vc are colored with a non-neutral color and all row vertices are colored with
the neutral color. This way, the coloring constraint of a star bicoloring reduces to coloring
distance-2 neighbors in the bipartite graph using diﬀerent (non-neutral) colors. This distance-2
coloring in the bipartite graph model is then equivalent to a coloring in the undirected graph
model in which all neighbors are colored diﬀerently. Finally, a discussion of the computational
complexity of Problem 2 including recent new results is given in [18].
To illustrate the tricky transformation from MinimumBidirectionalCompression to
MinimumStarBicoloring, we design a new educational module.

4

The Novel Bidirectional Compression Module

The web-based software EXPLAIN consists of an extensible set of interactive educational modules. These modules are speciﬁcally designed to teach problems from scientiﬁc computing and
their connection to graph theory. The focus is on assisting the teacher to illustrate these connections in the classroom. EXPLAIN also oﬀers to students a high level of interactivity allowing
them to solve problem instances by themselves. Moreover, it is capable of visualizing intermediate steps of an algorithm and returning to a previous step of an algorithm. Thus, the aim is to
more deeply involve the student in the learning process, giving him or her the option to explore
an algorithm interactively. In the current version of EXPLAIN, there are modules on unidirectional compression [4], sparse Cholesky factorization [20], and nested dissection ordering [3].
We plan to make EXPLAIN available via the internet rather than as a local installation.
The new contribution of this paper is to design and implement an interactive module to teach
bidirectional compression and its connection to star bicoloring. Figure 1 shows an overview of
the layout of the new module whose top and bottom part are shown in (a) and (b), respectively.
In the top part, a graph and a matrix are visualized next to each other. Here, a matrix with
a sparsity pattern in the form of an arrow is taken as an example. The nonzero pattern of the
matrix is shown right and the corresponding bipartite graph is depicted left. A vertex ri , which
is placed on the left part of the graph, represents the ith row of the matrix. Likewise, a vertex
1922

Connection between Bidirectional Compression and Star Bicoloring

(a)

Rostami and B¨
ucker

(b)

Figure 1: The general layout of the bidirectional compression module. (a) The top part contains
the visualization of the graph and its corresponding matrix. (b) The bottom part contains the
intermediate steps, the input, and the history of selections.
on the right part of the graph labeled ci corresponds to the ith column of the matrix. Diﬀerent
matrices can be selected from a predeﬁned list or can be uploaded to the server using the menu
depicted in Fig. 1 (b). We stress that EXPLAIN is designed for small problem instances.
Using any web browser, the student can interactively solve MinimumStarBicoloring by
clicking on vertices of the bipartite graph. The selection of a vertex by a click refers to choosing
this vertex to be colored next. This coloring is visualized simultaneously in the graph as well as
in the matrix where the neutral color is the color white. By clicking on a row vertex, the vertex
itself and the corresponding row is colored. This color should obey the rules speciﬁed in the
deﬁnition of a star bicoloring. By clicking on a column vertex, this vertex and the corresponding
column are colored. Recall that a nonzero element may be in both a colored column as well
as in a colored row. In this case, we divide the square surrounding this element into a triangle
and the remaining part. The triangle part is colored with the row color and the remaining part
of the rectangle with the column color.
We now take the problem with the arrow-shaped nonzero pattern from Fig. 1 as an example.
Here and in the following, we zoom into the graph and matrix view of the layout. The student
interactively selects a sequence of row and column vertices to solve MinimumStarBicoloring.
Figure 2 (a) shows the situation after the student selected the vertices r2 and c1 .
The interactive selection then goes back and forth until a correct star bicoloring is found.

(a)

(b)

Figure 2: The graph and the nonzero pattern (a) taken from Fig. 1 after the student interactively
selected the vertices r2 and c1 . A star bicoloring (b) of that example after trying to solve
MinimumStarBicoloring interactively. This star bicoloring uses 11 colors.
1923

Connection between Bidirectional Compression and Star Bicoloring

(a)

Rostami and B¨
ucker

(b)

Figure 3: A star bicoloring (a) of the problem instance from Fig. 1 also considered in Fig. 2.
This star bicoloring uses 3 colors and is an exact solution of MinimumStarBicoloring. A
star bicoloring (b) of a diﬀerent problem instance using 4 colors which is also an exact solution
of MinimumStarBicoloring
In EXPLAIN, the process of computing a solution of MinimumStarBicoloring is called a
round. The current round number is displayed at the top of the web page; see Fig. 1 (a). When
a coloring is found at round number x, the page shows the message “Round x is completed!”
Selecting vertices in diﬀerent orders will typically result in diﬀerent star bicolorings. A star
bicoloring which is interactively chosen will not always have a minimal number of colors. For
example, the order of vertex selection visualized in Fig. 2 (b) leads to a star bicoloring using
11 colors, which is obviously not the minimal number of colors. Here, all columns and rows
are colored diﬀerently. In contrast, Fig. 3 (a) illustrates an exact solution of MinimumStarBicoloring for this problem instance using the minimal number of 3 colors.
After completing a round, the student can solve the same problem instance once more.
In this case, the round number will be incremented, the colors will be removed, and another
round is started using the initial situation depicted in Fig. 1 (a). The history of the number of
non-neutral colors used in previous rounds is displayed below the matrix in a score diagram as
shown in Fig 1 (b). The idea behind this score diagram is to use elements of game design to
motivate and increase the student’s activity in the learning process. This way, the student can
see how successful he or she was in reducing the number of non-neutral colors.
The subtle issues in understanding the connection between bidirectional compression and
star bicoloring are more lucid when considering more irregularly-structured nonzero patterns.
Another problem instance with a diﬀerent nonzero pattern is shown in Fig. 3 (b). Here, it is
more diﬃcult to ﬁnd out that this star bicoloring with 4 colors is indeed an exact solution to
MinimumStarBicoloring.

5

Implementation Details

As described in [4], the implementation of EXPLAIN makes use of the following libraries: NetworkX [13] for the graph data structure, matplotlib [16] for the visualization aspects, Scipy [17]
for the sparse matrix computation, and Mod python [1] for the web based version. We now
brieﬂy explain how the new bidirectional compression module and the underlying algorithm to
ﬁnd a star bicoloring are integrated into EXPLAIN.
The implementation checks the four conditions of a star bicoloring according to Def. 1.
For each selected vertex, the corresponding algorithm ﬁrst determines a valid color and then
1924

Connection between Bidirectional Compression and Star Bicoloring

Rostami and B¨
ucker

checks if a correct star bicoloring of the graph is found. The condition 1 is fulﬁlled by assigning
diﬀerent colors to the row and column vertices.
The conditions 2 and 3 are satisﬁed as follows. Suppose the vertex node is selected. We
then loop over all its neighbors and assure that none of them has already a non-neutral color.
In this case, we know that node needs a non-neutral color. However, the exact color becomes
clear only when the condition 3 is checked. For the condition 3, we check all direct neighbors
as well as all 2-distance neighbors of node and specify which colors should not be assigned to
the vertex node. This is shown in the following pseudocode:
for v in G.neighbors(node):
for w in G.neighbors(v):
if w != node and color[w] > 0 and color[v] == 0:
color[node] needs to be different from color[w]

To color a selected vertex, the condition 4 can not be considered because there may be
vertices that still need to be colored by the student. Since the conditions 1, 2 and 3 are satisﬁed
during the color assignment, the condition 4 is checked after assigning a color to the selected
vertex. The implementation then checks all paths of length three in the graph and counts the
number of (neutral and non-neutral) colors on each path. If this number is at least three for all
paths, the condition 4 is satisﬁed, a star bicoloring is found, and the current round is completed.
If not, either the interactive vertex selection proceeds or the current assignment of colors will
never lead to a star bicoloring.

6

Conclusions

Exploiting sparsity in derivative computations is crucial for the performance of the code that
is mechanically generated by automatic diﬀerentiation. This topic of scientiﬁc computing is
diﬃcult to teach to students. Furthermore, there is an intimate connection to graph theory
which is important to understand when trying to ﬁnd seed matrices in automatic diﬀerentiation,
in particular for large Jacobian matrices. The combinatorial problem underlying this particular topic of automatic diﬀerentiation is known as bidirectional compression. The equivalent
formulation in terms of graph theory is a star bicoloring of a suitably deﬁned bipartite graph
associated with a given sparsity pattern of the Jacobian matrix. To illustrate the connection
between bidirectional compression and star bicoloring, we develop a new educational module
to be used in the classroom. This module tries to involve the student into the learning process
by a mixture of visualization, interactivity, and gamiﬁcation.

Acknowledgments
Michael L¨
ulfesmann codesigned previous versions of EXPLAIN. This work is partially supported
by the German Federal Ministry for the Environment, Nature Conservation, Building and
Nuclear Safety (BMUB) within the project MeProRisk II, contract number 0325389F.

References
[1] Apache Software Foundation. Mod python module, 2013. http://www.modpython.org.
[2] D. Auber et al. The Tulip 3 framework: A scalable software library for information visualization
applications based on relational data. Research Report RR–7860, Research Centre Bordeaux–SudOuest, INRIA, January 2012.

1925

Connection between Bidirectional Compression and Star Bicoloring

Rostami and B¨
ucker

[3] H. M. B¨
ucker and M. A. Rostami. Interactively exploring the connection between nested dissection
orderings for parallel Cholesky factorization and vertex separators. In IEEE 28th International
Parallel and Distributed Processing Symposium, IPDPS 2014 Workshops, Phoenix, Arizona, USA,
May 19–23, 2014, pages 1122–1129, Los Alamitos, CA, USA, 2014. IEEE Computer Society.
[4] H. M. B¨
ucker, M. A. Rostami, and M. L¨
ulfesmann. An Interactive Educational Module Illustrating
Sparse Matrix Compression via Graph Coloring. In Proc. 16th Int. Conference on Interactive
Collaborative Learning, Kazan, Russia, September 25–27, 2013, pages 330–335. IEEE, 2013.
[5] Y. Carbonneaux, J.-M. Laborde, and R. M. Madani. CABRI-Graph: A tool for research and
teaching in graph theory. In F. J. Brandenburg, editor, Graph Drawing: Proceedings of the Symposium on Graph Drawing, GD ’95, Passau, Germany, September 20–22, 1995, volume 1027 of
LNCS, pages 123–126, Berlin, 1996. Springer.
[6] T. F. Coleman and J. J. Mor´e. Estimation of sparse Jacobian matrices and graph coloring problems.
SIAM Journal on Numerical Analysis, 20(1):187–209, 1983.
[7] T. F. Coleman and A. Verma. Structure and eﬃcient Jacobian calculation. In M. Berz, C. Bischof,
G. Corliss, and A. Griewank, editors, Computational Diﬀerentiation: Techniques, Applications,
and Tools, pages 149–159. SIAM, Philadelphia, PA, 1996.
[8] T. F. Coleman and A. Verma. The eﬃcient computation of sparse Jacobian matrices using automatic diﬀerentiation. SIAM Journal on Scientiﬁc Computing, 19(4):1210–1233, 1998.
[9] I. S. Duﬀ, A. M. Erisman, and J. K. Reid. Direct Methods for Sparse Matrices. Clarendon Press,
Oxford, 1986.
[10] A. H. Gebremedhin, F. Manne, and A. Pothen. What color is your Jacobian? Graph coloring for
computing derivatives. SIAM Review, 47:629–705, 2005.
[11] A. George and J. W. H. Liu. Computer Solution of Large Sparse Positive Deﬁnite Systems.
Prentice-Hall, Englewood Cliﬀs, NJ, USA, 1981.
[12] A. Griewank and A. Walther. Evaluating Derivatives: Principles and Techniques of Algorithmic
Diﬀerentiation. SIAM, Philadelphia, PA, 2nd edition, 2008.
[13] A. A. Hagberg, D. A. Schult, and P. J. Swart. Exploring network structure, dynamics, and function
using NetworkX. In G. Varoquaux, T. Vaught, and J. Millman, editors, Proceedings of the 7th
Python in Science Conference, pages 11–15, Pasadena, CA USA, 2008.
[14] M. T. Heath. Scientiﬁc Computing: An Introductory Survey. McGraw-Hill, 2 edition, 2002.
[15] A. S. Hossain and T. Steihaug. Computing a sparse Jacobian matrix by rows and columns.
Optimization Methods & Software, 10:33–48, 1998.
[16] J. D. Hunter. Matplotlib: A 2D graphics environment. Computing in Science Engineering, 9(3):90–
95, 2007.
[17] E. Jones et al. SciPy: Open source scientiﬁc tools for Python, 2014. http://www.scipy.org.
[18] D. Juedes and J. Jones. Coloring Jacobians revisited: a new algorithm for star and acyclic
bicoloring. Optimization Methods & Software, 27(2):295–309, 2012.
[19] J. Kepner and J. Gilbert, editors. Graph Algorithms in the Language of Linear Algebra. SIAM,
Philadelphia, 2011.
[20] M. L¨
ulfesmann, S. R. Leßenich, and H. M. B¨
ucker. Interactively exploring elimination orderings
in symbolic sparse Cholesky factorization. In International Conference on Computational Science,
ICCS 2010, volume 1(1) of Procedia Computer Science, pages 867–874. Elsevier, 2010.
[21] L. B. Rall. Automatic Diﬀerentiation: Techniques and Applications, volume 120 of LNCS. Springer,
Berlin, 1981.
[22] S. H. Rodger and T. W. Finley. JFLAP: An Interactive Formal Languages and Automata Package.
Jones & Bartlett Publishers, Sudbury, MA, 2006.
[23] A. Schliep and W. Hochst¨
attler. Developing Gato and CATBox with Python: Teaching graph algorithms through visualization and experimentation. Multimedia Tools for Communicating Mathematics, pages 291–310, 2002.

1926

