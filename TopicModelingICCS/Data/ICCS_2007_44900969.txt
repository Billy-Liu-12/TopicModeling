An EDF Interrupt Handling Scheme for Real-Time
Kernel: Design and Task Simulation
Peng Liu1, Ming Cai1, Tingting Fu2, and Jinxiang Dong1
1

Institute of Artificial Intelligence, Zhejiang University, Hangzhou, PRC, 310027
{perryliu,cm,djx}@zju.edu.cn
2
Institute of Graphics and Image, Hangzhou Dianzi University, Hangzhou, PRC, 310018

Abstract. Traditional model of interrupt managemnent has been used for
several decades. But it is often incapacity to incorporate reliability and temporal
predictability demanded on real-time systems. Many solutions have been proposed to improve efficiency of interrupt handling such as In-line Interrupt Handling and Predictable Interrupt Management In this paper we propose a model
that schedules interrupts in terms of their deadlines. Hard priorities of IRQs are
still left to hardware. We only manager interrupts that can enter the kernel space
so that hard real-time can be assured. Each interrupt will be scheduled only before its first execution according to their arrival time and deadlines so that the
scheme is very simple and easy to be implemented. The scheme tries to make as
many as possible ISRs finish their work within the time limit. Finally we do
some experiments, which prove there is a big decrease of nested overtime interrupts, by means of task simulation on VxWorks.
Keywords: Real-time system, Interrupt scheduling, Task simulation, Similar
Earliest-Deadline-First.

1 Introduction
Most embedded systems include a lot of external devices. The interrupt mechanism is
a very important interface between the kernel and peripherals, which communicate
the system with its external environment. Too many interrupt sources will cause the
number of expired ISRs getting too high. It will also cause potential system instability
or inconsistency. For example, as seen in fig. 1(left chart), I1, I2, I3 are three interrupt
routines which priorities meet PI1 < PI2 < PI3. Their trigger time and endurance time
can be seen in table 1. According to traditional scheme of interrupt management I1 is
preempted by I2 even if it is about to finish its work. And I2 is preempted by I3 twice
in succession. So I1 completes its work at moment 15. Because its endurance time is 3
its work has been made no sense. I2 has been overtime as well.
A number of research works propose alternatives to avoid the difficulties of the
traditional interrupt model for real-time applications. Some have adopted radical solutions where most external interrupts are disabled and treat all peripherals by polling
[1]. Other strategies have been proposed to obtain some degree of integration among
the different types of asynchronous activities [2]. In [3], interrupts are treated as
threads. In [4], a schedulability analysis integrating static scheduling techniques and
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 969–972, 2007.
© Springer-Verlag Berlin Heidelberg 2007

970

P. Liu et al.

response time computation is proposed. In [5] an integrated scheme of tasks and interrupts to provide predictable execution times to real-time systems is presented. In this
paper, we propose a novel strategy that manages interrupts using EDF scheduling. It
is supposed to avoid many drawbacks of above schemes.
Table 1. Four ISRs (Tasks) invoked in the system

IRQ Number
I1 (K1)
I2 (K2)
I3 (K3)
I3 (K3)

Arrival T
1
3
8
11

Service T
3
7
2
2

Max. alive T
3
10
4
4

Priority
PI1 (PK1)
PI2 (PK2)
PI3 (PK3)
PI3 (PK3)

Fig. 1. Results of two interrupt management schemes

2 Model and Mechanism
Earliest-Deadline-First algorithm is a dynamic scheduling scheme. Priorities of tasks
are dynamic according to their start-time and deadline. Those whose deadline is nearest to the current time have higher priorities. Priorities should be calculated again
after the end of a task. The last step of scheduling is to choose a ready task that has
highest priority.
Our scheme is a Similar EDF algorithm which sorts interrupt service routines according to three factors: hard priority, arrival time and deadline. Only when higher
ISRs have spare time to allow lower ISRs to finish their work the scheduling will
happen. Otherwise higher ISRs will preempt lower ones even though they may be
overtime. Furthermore every ISR will be scheduled at most once for the sake of simplicity. Just like a stack, once an ISR is scheduled to run as if it is put into “stack”.
Others may preempt it as put into “stack” above it. Only when it is the top item of the
“stack” can it be performed again. In our scheme following properties are considered:
Processor availability A(i); Maximum alive time (deadline) Tb(i); Arrival time Ta(i);
Service time Ts(i); Execution time Te(i); Nested time Tn(i); Hard Priority PI(i)
Maximum alive time means how long the ISR could stay in the system to finish his
work before the deadline. Arrival time denotes when the interrupt is triggered. Service
time means how long it would take for an ISR to complete a mission. Execution time
indicates how long the ISR has taken to do its work. Nested time represent the period
that the ISR is preempted by others. So we have:

An EDF Interrupt Handling Scheme for Real-Time Kernel

971

U(t) = Min((U(t-1) – Ts(i)), (Tb(i) – Ts(i)))

(1)

Te(i) <= Ts(i)

(2)

An interrupt j can be scheduled only and only if:
Tb(j) – Ts(j) >= Ts(i) – Te(i)

(3)

We encapsulate the scheduling codes and user ISR into a code segment called realIntISR and use it to replace user ISR. It includes entering scheduling logic and exiting scheduling and is transparent to users.

3 Task Simulation and Performance
Here we have three tasks to simulate three interrupts I1, I2 and I3 respectively on
VxWorks. Their parameters are set as shown in table 1. We first create three tasks
synchronously. Then put them into sleep until their pre-set trigger time is matched.
Tasks just print message “intX is executing” onto the screen every second. We augment time scale to second to see the result clearly. After testing of the task simulation,
the original system brings a result like what is shown in fig. 1(left chart). As expected,
I1 (simulated by K1) is preempted by I2, then by I3 and I4. In improved system, EOI
will be sent after scheduling immediately for not to prevent the same level interrupt
from entering. As shown in fig. 1(right chart), the total time consumed by three simulated task is not changed, but all three interrupts finished their work in time while two
of them failed in original system.
The performance of the algorithm is tested also using task simulation. In each ISR,
execution timer is recorded. If it is overtime a global count will be increased. We set
five tasks which can be seen in table 2.
Table 2. Parameters of five tasks

IRQ Number
Service time
Lifecycle(Deadline)
Interrupt Frequency

1
990ms
4800ms
12/60s

2
150ms
600ms
60/60s

3
1.9ms
6ms
3000/60s

4
1.8ms
6ms
3000/60s

5
1ms
4.2ms
4200/60s

We keep those tasks running for a fixed period on the original and improved systems respectively. The result can be seen in fig. 2. The left chart shows new algorithm
can do more interrupts than traditional algorithm in an equal period. The right chart
shows new algorithm has less overtime interrupts than traditional algorithm. In conclusion, our scheme can improve the performance about 30% in situation that there
are a good many interrupts and most of them have limited execution time while some
of them could wait for execution for some time. Due to additional code introduced by
the scheme, the performance of the system maybe decreases when a lot of interrupts
have very short service time and restricted maximum alive time.

972

P. Liu et al.

350

5000

VxWorks
Our scheme

4000
3500

VxWorks
Our scheme

300

Overtime Times

Execution Times

4500

3000
2500
2000
1500

250
200
150
100

1000
50

500
0

0
1

2

3

4

5

1

IRQ No.

2

3

4

5

IRQ No.

Fig. 2. Performance contrast

4 Conclusion
Most embedded systems have many interrupt sources and these interrupts will occur
asynchronously. When there are too many nested interrupts those in low level are
likely to run out of time, which leads to failure of their work. In this paper we presented a Similar Earliest-Deadline-First handling scheme to provide schedulability to
interrupt management of real-time systems. Its algorithm and architecture were discussed. A simulation using tasks was presented. Result of performance test, which
was carried out based on that simulation, was given. It was proved that using Similar
EDF scheduling could greatly reduce interrupt failure caused by nested interrupts and
enhance robustness of the real-time system.

References
1. Hermann, K., et-al.: Distributed Fault-Tolerant Real-Time Systems: the MARS Approach.
IEEE Micro, Vol. 9, Issue 1. (1989) 25-40
2. Tullio, F., et-al.: Non-Preemptive Interrupt Scheduling for Safe Reuse of Legacy Drivers in
Real-time systems. In: Proceedings of the 17th EuroMicro Conference on Real-Time Systems. (2005) 98-105
3. Steve, K., Joe, E.: Interrupts as Threads. ACM SIGOPS Operating Systems Review, Vol.
29, Issue 2, (1995) 21-26
4. K, Sanstrom., C, Erikssn., G, Fohler.: Handling Interrupts with Static Scheduling in an
Automotive Vehicle Control Systems. In: Proceedings of 5 International Conference on
Real-Time computing Systems and Applications. (1998) 158-165
5. Luis E, L-d-F., Pedro, M-A., Dionisio de, N.: Predictable Interrupt Management for Real
Time Kernels over Conventional PC Hardware. In: Proceedings of IEEE Real-Time and
Applications Symposium. (2006) 14-23
6. Aamer, J., Bruce, J.: In-Line Interrupt Handling and Lock-Up Free Translation Lookaside
Buffers (TLBs). IEEE Transaction on Computers, Vol. 55. (2006) 559-574

