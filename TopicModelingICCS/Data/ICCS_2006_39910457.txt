Simulation of Time-Multiplexing Cellular Neural
Networks with Numerical Integration Algorithms
V. Murugesh and K. Murugesan
Department of Computer Science and Engineering,
National Institute of Technology, Tiruchirappalli – 620 015, Tamil Nadu, India
{murugesh, murugu}@nitt.edu

Abstract. A novel approach to simulate Cellular Neural Networks (CNN)
is presented in this paper. The approach, time-multiplexing simulation, is
prompted by the need to simulate hardware models and test hardware implementations of CNN. For practical applications, due to hardware limitations, it is
impossible to have a one-to-one mapping between the CNN hardware processors and all the pixels of the image. This simulator provides a solution by
processing the input image block by block, with the number of pixels in a block
being the same as the number of CNN processors in the hardware. The algorithm for implementing this simulator is presented along with popular numerical integration algorithms. Some simulation results and comparisons are also
presented.

1 Introduction
Cellular Neural Networks (CNNs) are analog, time-continuous, nonlinear dynamical
systems and formally belong to the class of recurrent neural networks. Since their
introduction in 1988 (by Chua and Yang [2-3]), it has been the subject of intense
research. Initial applications include image processing, signal processing, pattern
recognition and solving partial differential equations etc.
Lee and Pineda de Gyvez [4] introduced Euler, Improved Euler and Fourth-Order
Runge-Kutta algorithms in time-multiplexing CNN simulation. In this article, we
consider the same problem (discussed by Chi-Chien Lee and Jose Pineda de Gyvez
[4]) but presenting a different approach using the algorithms such as Euler, RK-Gill
and RK-Butcher with more accuracy.

2 Cellular Neural Networks
The basic circuit unit of CNN is called a cell. It contains linear and nonlinear
circuit elements. Any cell, C (i, j ) , is connected only to its neighbouring cells i.e.
adjacent cells interact directly with each other. This intuitive concept is called
neighbourhood and is denoted as N (i, j) . Cells not in the immediate neighbourhood have indirect effect because of the propagation effects of the dynamics of
the network. Each cell has a state x, input u, and output y. The state of each cell is
bounded for all time t > 0 and, after the transient has settled down, a cellular
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 457 – 464, 2006.
© Springer-Verlag Berlin Heidelberg 2006

458

V. Murugesh and K. Murugesan

neural network always approaches one of its stable equilibrium points. This fact
is relevant because it implies that the circuit will not oscillate. The dynamics of
a CNN has both output feedback (A) and input control (B) mechanisms. The first
order nonlinear differential equation defining the dynamics of a cellular neural
network cell can be written as follows
C

dxij
dt

1
= − xij (t ) + ∑ A(i, j; k, l )ykj (t ) + ∑ B(i, j; k , l )ukl + I
R
C ( k ,l )∈N (i , j )
C ( k ,l )∈N (i , j )

y ij (t ) =
where

(

1
x ij (t ) + 1 − x ij (t ) − 1
2

(1)

)

xij is the state of cell C (i , j ) , xij (0) is the initial condition of the cell, C is a

linear capacitor, R is a linear resistor, I is an independent current source,
A(i, j; k, l ) ykl and B(i, j; k , l ) u kl are voltage controlled current sources for all cells

C(k, l) in the neighbourhood N (i, j) of cell C (i, j) , and yij represents the output

equation.
It is to be noted from the summation operators that each cell is affected by its
neighbour cells. A(.) acts on the output of neighbouring cells and is referred to as the
feedback operator. B(.) in turn affects the input control and is referred to as the control
operator. Specific entry values of matrices A(.) and B(.), are application dependent,
are space invariant and are called cloning templates. A current bias I and the cloning
templates determine the transient behavior of the cellular nonlinear network.
For software simulation purposes, equation (1) is solved within each cell, in a
discretized form, to simulate its state dynamics. One common way of processing a
large complex image is using a raster CNN approach discussed by Murugesh and
Murugesan [7]. This approach implies that each pixel of the image is mapped onto a
CNN processor. That is, we have an image processing function in the spatial domain
that can be expressed as:

g (x, y) = T ( f (x, y))

(2)

where f(.) is the input image, g(.) the processed image, and T is an operator on f(.)
defined over the neighbourhood of ( x, y ) . From the hardware implementation’s
point of view, this is a very exhaustive approach. For practical applications, in the
order of 2,50,000 pixels, the hardware would require an enormous amount of processors which would make its implementation unfeasible. An alternative to this scenario
is time-multiplexing simulation.

3 Time-Multiplexing Simulation
Image sizes may be in the order of thousands of pixels which mean a large CNN
array is required. This is because the mapping between the image and CNN is
one-to-one and each pixel in the image has a corresponding cell in the CNN array.
Practically this is unfeasible. Multiplexing the image processing operator is a
suitable method to overcome this problem. In this approach, the image is

Simulation of Time-Multiplexing CNNs with Numerical Integration Algorithms

459

processed block by block and the block size is equal to the used CNN array
dimension. This approach leads to two errors in the calculation of border pixels of
any block since they are calculated without the effect of their neighbours. The
following two equations state these errors using a neighbourhood radius equal to
one:
i =3

ε ijB = ∑ bij +1 sign (u ij +1 )

(3)

ε ijA = ∑ aij +1 y ij +1 (t )

(4)

i =1
i =3
i =1

Equation (4) represents the error ε ij caused in the calculation of a border cell C ij in
A

the current block due to loosing the feedback effect of neighbouring cells and
neglecting the feed-forward effect. Equation (3) represents the error
calculation of a border cell

ε ijB caused in the

C ij due to loosing the feed-forward effect of its

neighbouring cells and neglecting the feedback effect. Both the equations (3) and (4)
are written for two horizontally adjacent blocks.
3.1 Overlap and Belt Approaches
To calculate the border cells more accurately, the following two approaches are used:
(i) To eliminate the error ε ij , a belt of width equal to the neighbourhood radius
B

of CNN from the original image is used around the block, as shown in the
Fig. 1(a).
(ii) An overlap between every two adjacent blocks block i and block i +1 is used to
minimize the error ε ij , as shown in Fig. 1(b). This overlap is proportional to
A

twice the neighbourhood radius of the CNN. The result of simulating

block i

is stored except the outer row or column in the overlap area between the two
blocks that belongs to block i +1 is set to the final state of block i .

(a)

(b)

Fig. 1. (a) Belt of inputs (b) Overlapped pixels

460

V. Murugesh and K. Murugesan

For the purpose of understanding the overall idea of this simulation approach
better, the simplified algorithm is presented below:
Algorithm: (Time-Multiplexing CNN simulation)

B = (C ij \ i = 1,..., block _ x ^ j = 1,..., block _ y )

P ⊂ B = set of border cells (lower left corner)
overlap = number of cell overlaps
belt = width of input cells
M = number of rows of the image
N = number of columns of the image
for (i=0; i<M; I+=block_x - overlap)
for(j=0;j<N;j+=block_y - overlap)
{
/* load initial conditions for the cells in the block
except for those in the borders */
for ( p=-belt,q<block_x+belt;p++)
for(q=-belt;q<block_y+belt;q++) {

⎧u ij
⎪
x i + p , j + j (t n ) = ⎨1∀ C i + p , j + j ∈ B
⎪
⎩− 1
} /*end for */
/* if the block is all white or black
don’t Process it*/
if xi+ p, j +q = −1∨ xi+ p, j +q =1∀ci+ p, j +q ∈B

(

)

{
Obtain the final states from
memory
continue;
}
do { /*normal raster simulation*/
for (p=0; p<block_x; p++) {
for (q=0; q<block_y; q++)
{/* calculation of the next state
excluding the belt of inputs */
t n+1

xi + p, j +q (tn+1) = xi + p, j +q (tn ) + ∫ f (xi + p, j +q (tn ))dt
tn

∀ci + p , j + q ∈ B
/* convergence criteria */
if

⎛ dxi+ p, j+q(tn) ⎞
⎜⎜
= 0⎟⎟ and
dt
⎝
⎠

Simulation of Time-Multiplexing CNNs with Numerical Integration Algorithms

461

y kl = ±1

∀C(k,l) ∈Nr (i + p, j +q) {
converged_cells++;
} /* end for */
/* update the state values */

xi + p , j + q (t n ) = xi + p , j + q (t n + 1)∀ci + p , j + q ∈ B ;
}while(converged_cells<(block_x*blovk_y));
/* store new state values excluding the ones
corresponding to the border cells*/

A ← xij ∀C ij ∈ B \ P
} /*end for */

4 Numerical Integration Algorithms
The CNN is described by a system of nonlinear differential equations. Therefore, it is
necessary to discretize the differential equation for performing simulations. For computational purpose, a normalized time differential equations describing CNN is used
by Nossek et al. [10].

f ' (x(πτ )) :=
+

dxij (πτ )
dt

= − xij (πτ ) +

∑ B (i , j ; k , l )u

C ( k , l )∈ N r (i , j )

yij (πτ ) =

kl

(

∑ A(i, j; k , l ) y (πτ )

C ( k ,l )∈N r (i , j )

kl

+I

1
xij (πτ ) + 1 − xij (πτ ) − 1
2

)

(5)

Where τ is the normalized time. For the purpose of solving the initial-value problem, well established numerical integration techniques are used. These methods can
be derived using the definition of the definite integral
xij ((n + 1)τ ) − xij (πτ ) =

τ n +1

∫ f ′(x(πτ ))d (πτ )

(6)

τn

Three of the most widely used Numerical Integration Algorithms are used in
Time-Multiplexing Simulation described here. They are the Euler’s Algorithm;
RK-Gill Algorithm discussed by Oliveira [9] and the RK-Butcher Algorithm discussed by Murugesan et al. [5], [6] and Murugesh and Murugesan [7], [8].

5 Simulation Results and Comparisons
All the simulation reported here are performed using a SUN BLADE 1500 workstation, and the simulation time used for comparisons is the actual CPU time used.

462

V. Murugesh and K. Murugesan

The input image format is the bitmap format (xbm), which is commonly available and
easily convertible from popular image formats like GIF or JPEG.
Using actual numbers can easily show how much improvement is achieved. The
size of Fig. 2(a) is 355 × 400 (1,42,000 pixels), and an Averaging template is used for
simulation comparisons. First, using the raster CNN simulator discussed by Murugesh
and Murugesan [7], the simulation took 200.42 seconds. Next, with the regular timemultiplexing simulator (with overlapping and input belt) the simulation took 342.28
seconds. Finally, the time-multiplexing with the time-saving scheme performed the
same simulation in 240.20 seconds, almost a 33% improvement from the regular
time-multiplexing. The size of two dimensional window of 10 × 10, with two column
overlapping is used. It may be noted that this algorithm maintains all the edges of the
original one.

(a)

(b)

Fig. 2. (a) Original image (b) After Averaging Template using Time-Multiplexing simulation

Since speed is one of the main concerns in the simulation, finding the maximum
step size that still yields convergence for a template can be of helpful in speeding
up the system. The speed-up can be achieved by selecting an appropriate step size
Δt for that particular template. Even though the maximum step size may slightly
vary from one image to another, the values in the Fig. 3 serve as a good reference
for step size comparison. These results were obtained by trial and error over more
than 100 simulations on a diamond figure. If the step size is chosen too small, the
simulation might take much iteration; hence, it will take longer time to achieve
convergence.
On the other hand, if the step size is taken too large, it might not converge at all or
it would converge to erroneous steady state values (beyond step size 5); the latter
remark can be observed for the Euler and RK-Gill algorithm which is plotted in
Fig. 4. Hence, the speed of convergence of RK-Butcher algorithm for large step size
is much faster than Euler and RK-Gill algorithms.

Simulation of Time-Multiplexing CNNs with Numerical Integration Algorithms

463

Fig. 3. Maximum step size for three different templates
1600
Euler

Simulation Time (sec)

1400
1200
1000

RK-Gill

800
600
RK-Butcher

400
200
0
1

2

3

4

5

6

7

Stepsize

Fig. 4. Simulation time comparison using Edge Detection template

The results of Fig. 4 were obtained by simulating a small image of size 16 × 16
(256 pixels) using Edge Detection template on a diamond figure.

Simulation time (log sec)

2000

1500

1000

500

0
50

100

150

200

250

300

350

Number of pixels X 1000

Fig. 5. CPU performance (SUN BLADE 1500 work station) for distinct sizes in number of
pixels

Simulation time computations are shown in Fig. 5 using an Averaging template for
images of sizes about 2,50,000 pixels and it is observed from Fig. 5, the simulation
time will increase if the number of pixels chosen is too large in a log linear fashion.

464

V. Murugesh and K. Murugesan

6 Conclusion
Versatile algorithms have been developed using numerical integration algorithms for
simulating CNN with Time-Multiplexing scheme. This Time Multiplexing algorithm
is a very simple one and a powerful method for developing image processors using
CNN. In fact, among all the three numerical integration algorithms, the one developed
using RK-Butcher algorithm is performing very efficiently for solving this problem.
The notable observation is Time Multiplexing CNN with Numerical Integration always converges for a larger step size, which in turn results in lowest simulation time
for any given image size. For a given step size, the convergence time of this algorithm
is log linear for all larger size images and this is an additional attractive feature as we
deal with high resolution/ large images. This algorithm always preserves the edges as
given in the original in addition and it enhances the picture quality.

References
1. Butcher, J. C.: The Numerical Methods of Ordinary Differential Equations, John Wiley &
Sons, U.K. (2003).
2. Chua, L. O., and Yang, L.: Cellular Neural Networks: Theory, IEEE Transactions on Circuits and Systems, 35 (1988) 1257 – 1272.
3. Chua, L. O., and Yang, L.: Cellular Neural Networks: Applications, IEEE Transactions on
Circuits and Systems, 35 (1988) 1273 – 1290.
4. Chi-Chien Lee and Jose Pineda de Gyvez: Time-Multiplexing CNN Simulator, IEEE International Symposium on Circuits and Systems, 6 (1999) 407-410.
5. Murugesan, K., Sekar, S., Murugesh, V. and Park, J. Y.: Numerical Solution of an Industrial Robot Arm Control Problem using the RK-Butcher algorithm, International Journal
of Computer Applications in Technology, 19 (2004) 132-138.
6. Murugesan, K., Gopalan, N. P., and Devarajan Gopal.: Error free Butcher algorithms for
linear Electrical Circuits, ETRI Journal, 27 (2005) 195-205.
7. Murugesh, V., and Murugesan, K.: Comparison of Numerical Integration Algorithms in
Raster CNN Simulation, Lecture Notes in Computer Science, Vol. 3285, Springer-Verlag,
Berlin Heidelberg New York (2004), pp. 115-122.
8. Murugesh,V. and Murugesan, K.: Simulation of Cellular Neural Networks using the RKButcher algorithm, International Journal of Management and Systems, 21(2005)65-78.
9. Oliveira, S. C.: Evaluation of effectiveness factor of immobilized enzymes using RungeKutta-Gill method: how to solve mathematical undetermination at particle center point?”,
Bio Process Engineering, 20 (1999) 185-187.
10. Nossek, J. A., Seiler, G., Roska. T., and Chua. L. O.: Cellular Neural Networks: Theory
and Circuit Design, International Journal of Circuit Theory and Applications, 20 (1992)
533-553.

