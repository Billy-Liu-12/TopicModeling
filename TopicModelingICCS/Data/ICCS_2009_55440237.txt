Dynamic Software Updates for
Accelerating Scientific Discovery
Dong Kwan Kim, Myoungkyu Song, Eli Tilevich, Calvin J. Ribbens,
and Shawn A. Bohner
Center for High-End Computing Systems (CHECS)
Dept. of Computer Science, Virginia Tech
Blacksburg, VA 24061, USA
{ikek70,mksong,tilevich,ribbens,sbohner}@cs.vt.edu

Abstract. Distributed parallel applications often run for hours or even
days before arriving to a result. In the case of such long-running programs, the initial requirements could change after the program has
started executing. To shorten the time it takes to arrive to a result
when running a distributed computationally-intensive application, this
paper proposes leveraging the power and ﬂexibility of dynamic software
updates. In particular, to enable ﬂexible dynamic software updates, we
introduce a novel binary rewriting approach that is more eﬃcient than
the existing techniques. While ensuring greater ﬂexibility in enhancing a
running program for new requirements, our binary rewriting technique
incurs only negligible performance overhead. We validate our approach
via a case study of dynamically changing a parallel scientiﬁc simulation.
Keywords:
Dynamic
Software
Updates,
Time-to-Discovery,
Computationally-Intensive Applications, JVM HotSwap, Bytecode Enhancement.

1

Introduction

Scientiﬁc computing is an interdisciplinary research area that uses computer
technologies to analyze mathematical models for computationally demanding
problems, including forecasting the weather, predicting earthquakes, and simulating molecular dynamics. Despite the ever increasing computing power, scientiﬁc computing applications are often long-running, taking hours or even days
to arrive to a result, due to the tremendous amounts of involved computations.
An eﬀective approach to reducing the computing time in scientiﬁc programs
is parallel processing, particularly using compute clusters and computational
grids.
In a long-running application, the initial scientiﬁc requirements could change
while the execution is in progress. To realize the changed requirements, a standard approach requires stopping the running application, changing the code, and
restarting the application. However, this maintenance approach does not utilize
the computing resources most eﬀectively, as it leads to repeating some of the
computation.
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 237–247, 2009.
c Springer-Verlag Berlin Heidelberg 2009

238

D.K. Kim et al.

This work is concerned with perfective maintenance required to address
changes in requirements rather than corrective maintenance required to address
defects. We assume that the running program is correct, but needs to change to
meet some newly-discovered requirements. We are not considering the problem
of detecting and correcting program defects, which is addressed elsewhere in the
research literature [1].
This work targets distributed computationally-intensive applications that use
the JavaTMtechnology as a means to operate in heterogeneous environments.
Successful applications of the Java technology to the domain of distributed parallel computation include heterogeneous, Java-based, computational grids [2].
The Java Virtual Machine (JVM) provides an advanced virtual execution environment on multiple platforms. The adaptive optimization capabilities of JustIn-Time (JIT) compilers make the JVM suitable for executing programs written
in scientiﬁc computing languages, including X10 [3], and possibly other emerging
languages such as Fortress [4].
Although the JVM features the HotSwap API [5], which replaces loaded
classes in a running application, the signature of a replaced class must remain
the same, allowing only method body changes. This, in turn, constrains the programmer modifying the swapped classes. This paper shows how these HotSwap
constraints can be overcome to allow the programmer to update classes without
restrictions. To that end, this paper presents a novel bytecode rewriting and code
generation approach, enabling the use of the standard HotSwap to replace the
changed code in a running JVM. The approach leverages Binary Refactoring,
a technique we introduced [6] that applies semantics-preserving transformations
to the binary representation of a program. The ﬂexible and eﬃcient dynamic
updates enable the programmer to perfect a running application at will. The resulting incremental perfective maintenance model can reduce time-to-discovery
when ﬁne-tuning a distributed computationally-intensive application.
This paper presents a solution to the problem of updating computationally intensive applications dynamically and contributes a novel dynamic update
method that can perfect long-running, distributed, JVM-based applications for
new requirements, thereby shortening their time-to-discovery; and a new binary
rewriting technique that enables the enhancement of performance-sensitive applications, with minuscule performance overhead.
The rest of this paper is structured as follows. Section 2 details our approach
to updating computationally-intensive software dynamically. Section 3 evaluates
the ﬂexibility and eﬃciency of our approach. Section 4 compares our approach
with the existing state of the art. Section 5 discusses future work directions and
presents concluding remarks.

2

Updating Computationally Intensive Applications
Dynamically

Next we describe our ﬂexible and eﬃcient dynamic software updating system for
computationally intensive applications.

Dynamic Software Updates for Accelerating Scientiﬁc Discovery

239

Replacement at runtime
C1

C1

C2

C3

Ϯ͛

Ϯ͛

C3

HotSwap

C4

JVM

JVM

C4

J

J

J

JVM

Fig. 1. JVM HotSwap facility

2.1

Enhancing JVM HotSwap Using Bytecode Rewriting

Fig. 1 shows how the JVM HotSwap reloads class C2’ on the ﬂy. The replaced
application with four classes and the HotSwap program with a newer version
C2’ execute on two diﬀerent JVMs; the JVM running the target application
needs to start with the appropriate debugging options and the HotSwap module
connects the JVM with its hostname and port number. The rightmost part of
Fig. 1 shows the application has the new version C2’.
Although the HotSwap API can replace loaded classes in a running application, the signature of a replaced class must remain the same, and only method
bodies could change. Thus, adding new methods, ﬁelds, or constructors, or even
changing the signatures of existing methods or ﬁelds will render a class invalid
for HotSwap, thus hindering the programmer from updating programs at runtime. To remove these constraints, our dynamic updating approach leverages the
ability of the JVM to load classes at runtime and uses bytecode rewriting and
code generation.
Fig. 2 shows our binary rewriting which introduces an indirection to a target
class using the Proxy Pattern. This rewrite leverages advanced optimization
capabilities of modern JVMs to inline the indirected functionality, making the
rewrite applicable for performance-sensitive applications [7]. The original class
A is translated into the proxy A and its superclass Super A. While the class
name and the method signatures of the original and proxy classes remain the
same, the method bodies are diﬀerent; the overloading methods of the proxy
class invoke the overloaded methods of the superclass. The code snippet in the

Super_A
void foo();

A
void foo();

A
void foo();

class Super_A {
public void foo(){
System.out. println ("I'm foo.");
}
}
class A extends Super _A {
public void foo() {
super.foo() ;
}
}

Fig. 2. Our binary rewriting to introduce indirections

240

D.K. Kim et al.

Version 2

Version 1
Original
Bytecode

A

A

int i;
void foo(){}

void foo(){}

Bytecode
Rewriting

Enhanced
Bytecode

void bar(int i){}

Super_A

Super_A

void foo(){}
Object getMethodHelper(){}
Object getFieldHelper(){}

void foo(){}
Object getMethodHelper(){}
Object getFieldHelper(){}

A

A

void foo(){super.foo();}
Object invoke(
String name,
Class[] argTypes,
Object[] args){}

void foo(){super.foo();}
Object invoke(
String name,
Class[] argTypes,
Object[] args){}

MethodHelper
void bar(int i){}

FieldHelper
int i;

Fig. 3. Adding new members to the class A using the special helper classes

right shows that the proxy class A inherits methods from the superclass Super A
and the call to the method foo() is delegated to the superclass.
Our approach ﬁrst rewrites an original program for updatability and then
changes it for new requirements dynamically. In order to make a program updatable, our bytecode enhancer transforms the bytecode using the techniques
described above. This approach supports a wide-range of changes to the reloaded
classes, without violating the constraints imposed by the JVM HotSwap API.1
Fig. 3 describes an example of our approach. Suppose that class A needs to be
updated with another version. Since the second version of A is structurally different from the ﬁrst version, the current JVM HotSwap implementation cannot
reload the second version of A. Our approach makes new classes for added ﬁelds
and methods to provide the ﬂexibility. We called them helper classes. There
are two helper classes in Fig. 3; MethodHelper is for the new method bar(int
i) and FieldHelper is for the new ﬁeld int i. To make intended changes to the
running application, we can reload the proxy A and its superclass Super A using HotSwap. It is obvious that JVM loads two helper classes when it reloads
Super A.
2.2

Updating Scientific Applications on the Fly

Once a program is made updatable at the bytecode level, the JVM HotSwap can
replace at runtime the program’s classes with their newer versions containing
structural diﬀerences. Furher, the HotSwap facilities are used in exactly the
same way as shown in Fig. 1. Fig. 4 illustrates the modules and control ﬂow of
our dynamic updating system. This system consists of the class diﬀerencing and
bytecode rewriting modules.
1

Our approach does not support the dynamic updates that change the inheritance
hierarchy–these changes are too substantial to be supported by rewriting bytecode.

Dynamic Software Updates for Accelerating Scientiﬁc Discovery

C1
m();
m();
m1();

241

Class Structure Differencer
Field
Differencer

Method
Differencer

Constructor
Differencer

Structural
Changes
New
requirements

ϭ͛
m();
m();
m1();
m2();

Bytecode Rewriter
Proxy
Rewriter

WƌŽǆǇͺϭ͛
m();
m();
m1();

Superclass
Rewriter

^ƵƉĞƌĐůĂƐƐͺϭ͛
m();
m();
m1();

Helper Class
Rewriter

HelperClass
m();
m();
m2();

Fig. 4. Our dynamic software update system-subsystems and control ﬂow

To generate the helper classes, our approach identiﬁes the structural changes
between the two versions of a class. The class diﬀerencing algorithm shown in
Fig. 5 takes two versions of the same program as input and returns a collection of diﬀerences in ﬁelds, constructors, and methods. This algorithm simply
compares the ﬁelds, methods, and constructors of the classes by using the Java
Reﬂection API. To ﬁnd out ﬁeld diﬀerences, the diﬀerencing algorithm compares
the modiﬁer, type, and name of a ﬁeld. The method diﬀerences are identiﬁed by
examining the modiﬁer, return type, name, and parameter types of a method
and constructors are distinguished by their modiﬁer and parameter types.
Next we provide a more formal treatment of our binary rewriting techniques
using superclasses and proxies. The double vertical bar ( ) speciﬁes pre- and
post-conditions. In X
Y , X denotes the class hierarchy of the original class before
the enhancement, while Y denotes its new hierarchy after the enhancement has
been performed. In Fig. 6, c is an original class, transformed into a proxy and
with the added superclass. The new superclass cvs is inserted between the proxy
cproxy and the initial superclass s of the original class c. Fig. 7 depicts how the
indirection works for methods and constructors. Fig. 8 details how our approach
introduces an indirection when accessing non-private ﬁelds. private <v V denotes the visibility V which is stronger than private visibility.

3

Case Study: Updating a Molecular Dynamics
Simulation System Dynamically

To demonstrate the eﬃciency of our approach, we compared the total execution
time of a Successive Over-Relaxation (SOR) [8] program with that of its rewritten version. The measurements were conducted on a compute cluster, with each
node running a dual processor AMD Opteron 240 (1.4Ghz), 1GB RAM, CentOS
version 4.2, JDK version 1.5.0, connected by Myrinet (4Gbit). Fig. 9 shows the
total overhead of the rewritten version never exceeds 2%.

242

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30

D.K. Kim et al.
INPUT: A set C = {(c1v1 , c1v2 ), (c2v1 , c2v2 ), . . . , (cpv1 , cpv2 )} of class pairs to be compared.
OUTPUT: A collection of diﬀerences of ﬁelds, constructors, and methods
while (a set C is not empty) do
//Compare fields of classes
f ieldsOf OldClass ←− civ1 .allFields(), f ieldsOf N ewClass ←− civ2 .allFields()
for (f ieldsOf N ewClass is not empty) do
eachF ieldOf N ewClass ←− f ieldsOf N ewClass.nextItem()
for (f ieldsOf OldClass is not empty) do
eachF ieldOf OldClass ←− f ieldsOf OldClass.nextItem()
if ( sig . of eachF ieldOf OldClass == sig. of eachF ieldOf N ewClass) then
isSameField = true; break;
end if
end for
if (NOT isSameField) then
dif f erentM embers.addElement(eachF ieldOf N ewClass)
end if
end for
//Compare constructors and methods of classes
methodsOf OldClass ←− civ1 .allMethods(), methodsOf N ewClass ←− civ2 .allMethods()
for (methodsOf N ewClass is not empty) do
eachM ethodOf N ewClass ←− methodsOf N ewClass.nextItem()
for (methodsOf OldClass is not empty) do
eachM ethodOf OldClass ←− methodsOf OldClass.nextItem()
if ( sig . of eachM ethodOf OldClass == sig. of eachM ethodOf N ewClass) then
isSameMethod = true; break;
end if
end for
if (NOT isSameMethod) then
dif f erentM embers.addElement(eachM ethodOf N ewClass)
end if
end for
end while

Fig. 5. The ClassDif f erencing algorithm

A set of interfaces, I = {i1 , i2 , . . . , ii }
V Super(c cproxy , cvs ) : Class c is transformed into cproxy and cvs .
c: refactored class, cproxy : proxy class of c, cvs : new superclass of c
V Super(c cproxy , cvs ) =

c extends s implements I
cproxy extends cvs , cvs extends s implements I

Fig. 6. Indirection using superclasses

To assess the applicability of our approach to more realistic programs, we
used a parallel Molecular Dynamics Simulation (MDS) program [9,10] which
was deployed on Ibis [2], a Java-based grid programming environment. Among
other services, Ibis provides a Java API for MPI-like message passing among
cluster nodes.

Dynamic Software Updates for Accelerating Scientiﬁc Discovery

243

Pvs ... denotes the rewriting by our approach.
//T he transf ormation of constructors
Pvs public k(T1 , . . . , Tn ) throws C1 , . . . , Ci =
public k(T1 , . . . , Tn ) throws C1 , . . . , Ci { super(T1 , . . . , Tn ); }
//T he transf ormation of methods
Pvs public T m(T1 , . . . , Tn ) throws C1 , . . . , Ci =
public T m(T1 , . . . , Tn ) throws C1 , . . . , Ci {
if ( the return type of m is void ) super.m(T1 , . . . , Tn );
else return super.m(T1 , . . . , Tn );
}
Fig. 7. Indirecting constructors and methods
//Access the superclass s non − private f ields
Gvs ... represents the generation of getters and setters for ﬁelds.
Gvs private <v V T x =
private <v V T getX() { return x; }
private <v V void setX(T x) { this.x = x; }
//Access non − private f ields via a proxy
Pvs private <v V T x =
private <v V T getX() { return super.getX(); }
private <v V void setX(T x) { super.setX(x); }
Fig. 8. Indirecting the superclass’s non-private ﬁelds

Execution time (sec)
180
1.2 %

160
140
0.7 %

120
100

Original Version of SOR

1.0 %

80

Enhanced Version of SOR
Transformed

60
40
20

1.7 %

0
1000

3000

5000

7000

Problem size

Fig. 9. Refactoring overhead on Successive Over-Relaxation. – x-axis: the problem size;
y-axis: the total execution time of both the original and the enhanced versions.

We updated the MDS program dynamically twice, updating the thermostat
algorithm and the number of molecules. The thermostat algorithm maintains
or rescales the temperature constant of a molecular system by increasing or
decreasing the velocity of the molecules. Therefore, the selection of an appropriate thermostat method depends on the molecular system in use. Also the initial

244

D.K. Kim et al.

Initialize positions
and velocities of
all molecules

Apply Lennard
Jones Potential

Update positions
and velocities of
all molecules

Rescale velocities
by applying
thermostats

Dynamic Updates

Rescale velocities by
applying thermostats
(New module)

Molecular Dynamics Simulation

Fig. 10. Updating the rescaling module of a molecular dynamics simulation
Table 1. Changes to the Molecular Dynamics Simulation

Updates Requirements
Thermostat Rescale velocities of molecules
algorithm by replacing the thermostat
algorithm
The number Increase/decrease the number
of molecules of molecules to be simulated

Implementations
Adding a new method
rescale(mol[] m, int size)
and ﬁelds
Adding a new method
updateNumOfMols(int size)

number of the molecules may need to change during the simulation. Fig. 10 depicts the main modules of an MDS program and the thermostat module that are
updated dynamically. Table 1 summarizes the aforementioned scenarios, which
motivate dynamic changes.
While the changes above may seem simple, without dynamic updating facilities, they would require stopping the parallel execution and losing valuable
computing resources. Furthermore, these updates could not be accomplished by
using HotSwap alone. In fact, trying to use HotSwap for these updates would
throw an exception terminating the program’s execution. Finally, these changes
are a natural consequence of delivering solutions under tight deadlines. It is not
always possible to put enough care into designing a distributed parallel application, so that it always satisﬁes the requirements of diﬀerent users.

4

Related Work

A signiﬁcant amount research has been conducted in dynamic software updating
via program transformation [11,12], custom virtual machines or runtime libraries
[13,14], and new language constructs [15,16] such as Aspect-Oriented Programming (AOP) [17].

Dynamic Software Updates for Accelerating Scientiﬁc Discovery

245

Table 2. Comparison to related work on dynamic updating for Java software(supported:+, unsupported:-, and partially supported:+/-)
Criteria
Use of Standard
-Standard virtual machine
-HotSwap
-No coding constraints
-No runtime library required
Flexibility
-Adding ﬁelds/methods
-Update of ﬁelds/methods
-No source modiﬁcation
Eﬃcient code

Orso[11] Bialek[12] Mal.[14] Lee[21] Pre.[18] Ours
+
+
+

+
+
+

+
-

+
-

+
-

+
+
+
+

+
-

+
+
+
-

+
+
+
+

+
+
+
+/-

+
+
+
-

+
+
+
+

Orso et al.’s technique [11] and Bialek et al.’s system [12] transform the code
to enable its dynamic updates. Unlike our approach facilitates JVM HotSwap,
both approaches do not use HotSwap and consider an eﬃcient implementation of
the proxy pattern for performance-sensitive applications. Furthermore, although
custom virtual machines might be more powerful in dynamic software updates,
they could lead to a severe interoperability issue in a heterogeneous computing
environment. Like Warth et al.’s Expanders [15] and Bierman et al.’s UpgradeJ
[16], dynamic updates can be provided as new language features or a service of
middleware systems. While they can express explicitly changes at the code level,
the programmer is required to learn new language constructs or tools. Similar to
program transformation, AOP-based approaches need to insert dynamic update
modules, usually aspects, into a target application before the application is executed [18,19,20]. Table 2 compares the proposed approach with closely related
work. While these approaches to dynamic updates are powerful and eﬀective,
none of them is applied and tested for computationally intensive applications
such as scientiﬁc and bioinformatics programs.

5

Future Work and Conclusions

The ﬂexibility and eﬃciency of our approach open a slew of future work directions, including the application of our approach to large scale grid applications,
self-adapting systems, and autonomic computing.
We have presented a new binary rewriting approach for supporting ﬂexible and
eﬃcient dynamic updates of JVM-based, distributed, computationally-intensive
applications. Our approach to dynamic updating works with standard JVMs and
their built-in HotSwap facility to reload classes at runtime. The performance and
ﬂexibility advantages of our approach make it promising for reducing the timeto-discovery in long-running scientiﬁc applications.

246

D.K. Kim et al.

References
1. Qin, F., Tucek, J., Sundaresan, J., Zhou, Y.: Rx: treating bugs as allergies—a safe
method to survive software failures. In: SOSP 2005: Proceedings of the twentieth
ACM symposium on Operating Systems Principles, pp. 235–248. ACM, New York
(2005)
2. van Nieuwpoort, R.V., Maassen, J., Wrzesinska, G., Hofman, R., Jacobs, C., Kielmann, T., Bal, H.E.: Ibis: a ﬂexible and eﬃcient Java based grid programming
environment. Concurrency and Computation: Practice and Experience 17(7-8),
1079–1107 (2005)
3. Charles, P., Grothoﬀ, C., Saraswat, V., Donawa, C., Kielstra, A., Ebcioglu, K., von
Praun, C., Sarkar, V.: X10: an object-oriented approach to non-uniform cluster
computing. SIGPLAN Not. 40(10), 519–538 (2005)
4. Allen, E., Chase, D., Hallett, J., Luchangco, V., Maessen, J.W., Ryu, S., Steele Jr.,
G.L., Tobin-Hochstadt, S.: The Fortress language speciﬁcation. Sun Microsystems,
lnc. (March 2007)
5. Sun Microsystems, Inc.: Java HotSwap,
http://java.sun.com/j2se/1.4.2/docs/guide/jpda/enhancements.html
6. Tilevich, E., Smaragdakis, Y.: Binary refactoring: Improving code behind the
scenes. In: Inverardi, P., Jazayeri, M. (eds.) ICSE 2005. LNCS, vol. 4309, pp. 264–
273. Springer, Heidelberg (2006)
7. Kim, D.K., Tilevich, E.: Overcoming JVM HotSwap constraints via binary rewriting. In: First ACM Workshop on Hot Topics in Software Upgrades. ACM, New
York (2008)
8. Ortega, J.M.: Introduction to Parallel Vector Solution of Linear Systems. Plenum
Press, New York (1988)
9. Rapaport, D.C.: The Art of Molecular Dynamics Simulation. Cambridge University
Press, New York (1996)
10. Kumar, A.: Molecular Dynamics Simulations, http://www.personal.psu.edu/
auk183/MolDynamics/Molecularimulations.html
11. Orso, A., Rao, A., Harrold, M.J.: A technique for dynamic updating of Java software. In: Proceedings of the International Conference on Software Maintenance
(ICSM 2002) (October 2002)
12. Bialek, R.P.: Dynamic updates of existing Java applications. In: Ph.D. Thesis, the
University of Copenhagen, 1–216 (2006)
13. Gharaibeh, B., Dig, D., Nguyen, T.N., Chang, J.M.: dReAM: Dynamic refactoringaware automated migration of Java online applications. Technical Report, Iowa
State University (August 2007)
14. Malabarba, S., Pandey, R., Gragg, J., Barr, E., Barnes, J.F.: Runtime support for
type-safe dynamic java classes. In: Bertino, E. (ed.) ECOOP 2000. LNCS, vol. 1850,
pp. 337–361. Springer, Heidelberg (2000)
15. Warth, A., Stanojevi´c, M., Millstein, T.: Statically scoped object adaptation with
Expanders. In: OOPSLA 2006, pp. 37–56 (2006)
16. Bierman, G., Parkinson, M., Noble, J.: UpgradeJ: Incremental typechecking for
class upgrades. In: Vitek, J. (ed.) ECOOP 2008. LNCS, vol. 5142, pp. 235–259.
Springer, Heidelberg (2008)
17. Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C.V., Loingtier, J.M., Irwin, J.: Aspect-oriented programming. In: Aksit, M., Matsuoka, S. (eds.)
ECOOP 1997. LNCS, vol. 1241, pp. 220–242. Springer, Heidelberg (1997)

Dynamic Software Updates for Accelerating Scientiﬁc Discovery

247

18. Previtali, S.C., Gross, T.R.: Dynamic updating of software systems based on aspects. In: Proceedings of the 22nd IEEE International Conference on Software
Maintenance, pp. 83–92 (September 2006)
19. Gustavsson, J., Staijen, T., Assmann, U.: Runtime evolution as an aspect. In:
First International Workshop on Foundations of Unanticipated Software Evolution
(2004)
20. Yang, Z., Cheng, B.H.C., Stirewalt, R.E.K., Sowell, J., Sadjadi, S.M., McKinley,
P.K.: An aspect-oriented approach to dynamic adaptation. In: WOSS 2002: Proceedings of the ﬁrst workshop on Self-healing systems, pp. 85–92. ACM, New York
(2002)
21. Lee, Y.F., Chang, R.C.: Java-based component framework for dynamic reconﬁguration. IEE Proceedings - Software 152(3), 110–118 (2005)

