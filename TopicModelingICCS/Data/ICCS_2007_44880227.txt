Computing Locus Equations for Standard
Dynamic Geometry Environments
Francisco Botana, Miguel A. Ab´
anades, and Jes´
us Escribano
Departamento de Matem´
atica Aplicada I, Universidad de Vigo, Campus A
Xunqueira, 36005 Pontevedra, Spain
fbotana@uvigo.es
Ingenier´ıa T´ecnica en Inform´
atica de Sistemas, CES Felipe II (UCM), 28300
Aranjuez, Spain
mabanades@cesfelipesegundo.com
Departamento de Sistemas Inform´
aticos y Computaci´
on, Universidad Complutense de
Madrid, 28040 Madrid, Spain
escribano@sip.ucm.es

Abstract. GLI (Geometric Locus Identiﬁer ), an open web-based tool
to determine equations of geometric loci speciﬁed using Cabri Geometry
and The Geometer’s Sketchpad, is described. A geometric construction of
a locus is uploaded to a Java Servlet server, where two computer algebra
systems, CoCoA and Mathematica, following the Groebner basis method,
compute the locus equation and its graph. Moreover, an OpenMath description of the geometric construction is given. GLI can be eﬃciently
used in mathematics education, as a supplement of the locus functions
of the standard dynamic geometry systems. The system is located at
http://nash.sip.ucm.es/GLI/GLI.html.
Keywords: Interactive
OpenMath.

1

geometry, Automated

deduction, Locus,

Introduction

Dynamic geometry programs are probably the most used computers tools in
mathematics education today, from elementary to pregraduate level. At the same
time, computer algebra systems are widely employed in the learning of scientiﬁc
disciplines, generally starting from high school. Nevertheless, the top ranked
programs in both ﬁelds have evolved separately: although almost all of the computer algebra systems oﬀer some specialized library for the study of geometry (cf.
Mathematica, Maple, Derive, ...), none of them use the dynamic paradigm, that
is, in their geometric constructions free elements cannot be graphically dragged
making dependent elements behave accordingly. On the other side, standard
dynamic geometry environments, such as Cabri Geometry [11] and The Geometer’s Sketchpad [10], are self–contained: whenever, albeit rarely, they need some
symbolic computation, they use their own resources.
Some attempts connecting both types of systems have been reported, mainly
coming from academia. Besides the above mentioned geometric libraries, specialized packages for geometry using the symbolic capabilities of computer algebra
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 227–234, 2007.
c Springer-Verlag Berlin Heidelberg 2007

228

F. Botana, M.A. Ab´
anades, and J. Escribano

systems exist (see, for instance, [1]). Nevertheless, they lack the dynamic approach, being more an environment for exact drawing than a tool for interactive
experiments. We can also cite [12] as an interesting work, where a dynamic geometric system is developed inside Mathematica through an exhaustive use of
MathLink.
The approach of using computer algebra algorithms in dynamic geometry has
been more fruitful. Two ways have been devised for dealing with this cooperation.
Some systems incorporate their own code for coping with algebraic techniques
in geometry ([14,8,9],...), while other systems emphasize on reusing software
([2,15,17],...). Both strategies have been partially successful on solving some of
the three main points in dynamic geometry, that is, the continuity–determinism
dilemma, the proof and discovery abilities, and the complete determination of
loci (see [6] for an extensive study of the subject).
This paper describes a web–based resource allowing the remote discovery of
equations of algebraic loci speciﬁed through the well–known Cabri and The
Geometer’s Sketchpad environments. Moreover, OpenMath has been chosen as
the communicating language allowing other OpenMath compliant systems to
make use of the tool.

2

Numerical vs. Symbolic Loci

An astonishing feature of dynamic geometry systems is their ability to draw the
path of an object dependent on another one while this last element is dragged
along a predetermined path. The trajectory of the ﬁrst object is called its locus.
Since their earliest versions, both Cabri and The Geometer‘s Sketchpad oﬀered
graphical loci generation through their trace mode. Roughly speaking, the strategy consists of sampling the path of the dragged object and constructing, for
each sample, the position of the point generating the locus. An interpolation of
these support points returns the locus as a graphical continuous object in the
screen. The heuristics used for the interpolation produce anomalous loci in some
border cases, and this strategy is not well suited to produce the equation of the
obtained loci. Reacting against this drawback, the newest version of Cabri incorporates a tool for computing approximate algebraic expressions of loci. Although
this new feature is not documented, as usual in the market considerations of the
Cabrilog company, the algorithm is sketched in [16] as follows: 1) random selection of about one hundred locus supporting points, and 2) calculation of the
(n + 1)(n + 2)/2 coeﬃcients of the bivariate locus equation of degree n, from
n = 1 onwards and using a system of equations derived from the support points,
until they approximately satisfy the locus equation.
There is no doubt about the interest of functions returning equations of loci, as
Cabri does although in an approximate way. Nevertheless, no comment is made
on the exactness of the equation (hence inducing an unexpert user to take it as
an accurate one). Furthermore, some loci are described by equations of diﬀerent
degree if the user exploits the dynamic character of the environment. We have
shown in [3] the superior performance of symbolic approaches for dealing with

Computing Locus Equations for Standard Dynamic Geometry Environments

229

loci: our proposal also obtains the equations of algebraic loci and bans out some
anomalous results in standard systems. The equations are sound (since the used
Groebner bases method is), and the method is fast enough to be integrated in a
dynamic environment, as tested with GDI (see [4] where the detailed algorithm
is described).

3

User Interface and Architecture

Although conceived with the spirit of a plug-in for Cabri and The Geometer’s
Sketchpad, simplicity and convenience of use were the guiding lines in the design
of GLI. Consequently, its interface (http://nash.sip.ucm.es/GLI/GLI.html) has
been designed to look like a simple web page (see Figure 1). The user makes use
of an applet to create a text ﬁle that is uploaded to the server. The equation
and graph of the locus are then displayed in a new browser window.

Fig. 1. User interface

The Cabri or The Geometer’s Sketchpad ﬁle with the original speciﬁcation of
the locus undergoes a double translating process. First the original ﬁle is processed as a text ﬁle producing an XML codiﬁcation of an OpenMath element.
OpenMath is an extensible standard for representing the semantics of mathematical objects (see [13]). This OpenMath description is then translated into
webDiscovery code, which is the description that the ﬁnal application is designed

230

F. Botana, M.A. Ab´
anades, and J. Escribano

to interpret. webDiscovery is a web application developed by Botana (see [5])
capable of performing a wide variety of discovery tasks whose kernel has been
appropriately modiﬁed to be integrated in GLI as the ﬁnal computational tool.
Unlike the ﬁles generated by Cabri, the ﬁles directly generated by The Geometer’s Sketchpad are coded. A JavaSketchpad .htm ﬁle has to be used instead.
The decision of making the whole translating process available to the user
was thought, on one hand, as a testimonial statement to the computational
community where lack of transparency stands in the way of attempts to use the
available tools. On the other hand, the OpenMath description of the geometric
locus is made available to other OpenMath compliant geometric systems.
GLI is based on webMathematica [18], a Java servlet technology allowing
remote access to the symbolic capabilities of Mathematica. Once the user has
created and uploaded the appropriate text ﬁle, a Mathematica Server Page is
launched, reading the ﬁle and initializing variables. An initialization ﬁle for CoCoA [7] containing the ideal generated by the appropriate deﬁning polynomials
is also written out, and CoCoA, launched by Mathematica, computes a Groebner basis for this ideal. The returned factors are classiﬁed as points, lines, conics
or general curves. Although Mathematica provides an implementation of the
Groebner basis algorithm, CoCoA has been chosen mainly due to the experience of better performance in several appropriate examples. Additionally, the
Mathematica graphing abilities are used to plot the locus.

4
4.1

Examples
An Ellipse

The old exercise of drawing an ellipse using a pencil, two pins, and a piece
of string is frequently proposed as the ﬁrst one when young students begin
practising loci computation.

Fig. 2. The ellipse as a locus

Computing Locus Equations for Standard Dynamic Geometry Environments

231

It is well known that both environments, Cabri and The Geometer’s Sketchpad, return a surprising answer when simulating the construction, giving just
half of the ellipse. Figure 2 shows the construction made in The Geometer’s
Sketchpad (inside the square) and the answer returned by GLI. The plot range
in the graph produced by GLI depends on ad-hoc computations of the graph size
made by Mathematica. Despite being an independent process, the computations
of an optimum plot range can be directed by a line of code in the webDiscovery
description of the task. A default but modiﬁable value has been included in all
webDiscovery descriptions.
4.2

Lima¸
con of Pascal

Given a ﬁxed point P3 and a variable one P6 on a circle, the lima¸con of Pascal
is the locus of points P14 such that P3 , P6 and P14 are collinear and the distance
from P6 to P14 is a constant, speciﬁed in Figure 4 by the segment P8 P9 (see
http://www-groups.dcs.st-and.ac.uk/~history for a historical reference).

Fig. 3. The lima¸con of Pascal in Cabri

As in the case of the preceding subsection, computing the locus of P14 gives
just a part of it (Figure 3, left). It is necessary to compute the locus of the other
intersection, P14 , in order to get the whole locus (Figure 3, right). It seems that
Cabri is making some extra assumptions, for instance, the point P14 is inside
the circle, whereas the imposed constraints subsume both points in just one.
Regarding the locus equation, Cabri returns two equations (instead of one!)
0.04x2 y + 0.04y 3 + 0.22x2 + 0.19xy + 0.82y 2 + 0.87x + 5.07y + 10 = 0
0.04x2 y + 0.04y 3 + 0.17x2 + 0.20xy + 0.95y 2 + 0.77x + 5.62y + 10 = 0.
Plotting these equations with Mathematica we get the curves in Figure 4, left,
while the curve returned by our system GLI is shown at the right. The equation
of the lima¸con, a quartic, is included as a factor of the solution (see Figure 5).
The extraneous factor of the circle is due to a degenerated condition: note that,

232

F. Botana, M.A. Ab´
anades, and J. Escribano

Fig. 4. Plots of the lima¸con

since P6 is a variable point on the circle, it can coincide with P3 , so reducing
the locus to a circle centered at P3 and with radius P8 P9 . The generation of this
factor could be avoided in GLI by adding the condition NotEqual(P3,P6).

Fig. 5. A fragment of the equation returned for the lima¸con

4.3

A Simple Locus, Diﬀerent Answers

We will use a very simple example to illustrate the diﬀerent behavior of standard
systems and the one proposed here. Let us consider a line P1 P2 with a variable
point on it, P4 , taken as the center of a circle with radius P5 P6 . Compute the
locus of a point P9 bound to the circle when P4 moves along the line. The locus found by The Geometer’s Sketchpad is, as expected, a line parallel to P1 P2
(Figure 6). Nevertheless, GLI answers that The locus is (or is contained in) the
whole plane. This is due to the diﬀerent treatment of point P9 : in standard systems its deﬁnition is taken not just as a point on the circle, but other constraints
not explicitly given are assumed. However, from an strictly algebraic point of
view, P9 is any point on the circle. So, when the circle moves, the locus is a non
linear part of the plane, and our non semialgebraic approach detects this fact
answering as stated.
Note that if Cabri is used and the ﬁrst line is deﬁned through a point and
a graphically speciﬁed slope, the translation of the construction will fail since
the current version of GLI does not support this Cabri primitive. When working
with a non allowed locus ﬁle an error message will appear in the corresponding
text area in the applet. The user is then instructed to inspect the JAVA console

Computing Locus Equations for Standard Dynamic Geometry Environments

233

Fig. 6. A simple locus

to see a sequential description of the translation process, with which one can
determine the primitive not admitted by the current version of GLI that has
been used.
4.4

Extending the Scope of Loci Computations

Cabri and The Geometer’s Sketchpad can only ﬁnd loci of points that have been
eﬀectively constructed in their systems, that is, points who parametrically depend on another one. Hence, points which are implicitly deﬁned by simultaneous
multiple conditions cannot be used for generating loci. A classical result such
as the theorem of Wallace–Steiner (stating that the locus of points X such that
their orthogonal projections to a given triangle are collinear is the triangle’s circumcircle) cannot be discovered unless the user previously knows the result! The
symbolic kernel of GLI has been designed to be easily modiﬁed to support this
type of implicit loci. Further versions of GLI are under development to support
an extended class of computable loci.

5

Conclusion

The work presented here, although of a small magnitude, shows the possibilities of the interconnection between dynamic geometry and computer algebra
systems. Moreover, we think that the generalization of broad band internet connections will make remote access to applications the main general trend, of which
GLI is a perfect example. The decision of making OpenMath the communication
language between the systems involved could be seen as secondary from a computational point of view. However, the use of standard semantic representation
of mathematical objects is, as we see it, the main challenge in the computational community. GLI wants to be an example of that too. Moreover, the use
of OpenMath as intercommunicating language opens the door to further connections with diﬀerent geometry related systems. As future work, a two–folded
ongoing research is being conducted to extend GLI’s domain, to other Dynamic
Geometry Systems on one hand, and to nonpolynomial equations and inequalities on the other. This latter extension of GLI will allow a considerable increase
in the set of possible relations between the diﬀerent geometric elements and
hence of its applications.

234

F. Botana, M.A. Ab´
anades, and J. Escribano

Acknowledgments. This work has been partially supported by UCM research
group ACEIA and research grants MTM2004-03175 (Botana) and MTM200502865 (Ab´
anades, Escribano) from the Spanish MEC.

References
1. Autin, B.: Pure and applied geometry with Geometrica. Proc. 8th Int. Conf. on
Applications of Computer Algebra (ACA 2002), 109–110 (2002)
2. Botana, F., Valcarce, J.L.: A dynamic-symbolic interface for geometric theorem
discovery. Computers and Education, 38(1–3), 21–35 (2002)
3. Botana, F.: Interactive versus symbolic approaches to plane loci generation in
dynamic geometry environments. Proc. I Int. Workshop on Computer Graphics
and Geometric Modeling (CGGM 2002), LNCS, 2330, 211-218 (2002)
4. Botana, F., Valcarce, J.L.: A software tool for the investigation of plane loci. Mathematics and Computers in Simulation, 61(2), 141–154 (2003)
5. Botana, F.: A Web–based intelligent system for geometric discovery. Proc. I Int.
Workshop on Computer Algebra Systems and Applications (CASA 2003), LNCS,
2657, 801-810 (2003)
6. Botana, F., Recio, T.: Towards solving the dynamic geometry bottleneck via a
symbolic approach. Proc. V Int. Workshop on Automated Deduction in Geometry
(ADG 2004), LNAI, 3763, 92–110 (2006)
7. Capani, A., Niesi, G., Robbiano, L.: CoCoA, a system for doing Computations in
Commutative Algebra. Available via anonymous ftp from: cocoa.dima.unige.it
8. Gao, X.S., Zhang, J.Z., Chou, S.C.: Geometry Expert. Nine Chapters, Taiwan
(1998)
9. http://www.geogebra.at
10. Jackiw, N.: The Geometer’s Sketchpad v 4.0. Key Curriculum Press, Berkeley
(2002)
11. Laborde, J. M., Bellemain, F.: Cabri Geometry II. Texas Instruments, Dallas (1998)
12. Miyaji, C., Kimura, H.: Writing a graphical user interface for Mathematica using
Mathematica and Mathlink. Proc. 2nd Int. Mathematica Symposium (IMS’97),
345–352 (1997)
13. http://www.openmath.org/
14. Richter–Gebert, J., Kortenkamp, U.: The Interactive Geometry Software Cinderella. Springer, Berlin (1999)
15. Roanes–Lozano, E., Roanes–Mac´ıas, E., Villar, M.: A bridge between dynamic
geometry and computer algebra. Mathematical and Computer Modelling, 37(9–10),
1005-1028 (2003)
16. Schumann, H.: A dynamic approach to simple algebraic curves. Zentralblatt f¨
ur
Didaktik der Mathematik, 35(6), 301–316 (2003)
17. Wang, D.: GEOTHER: A geometry theorem prover. Proc. 13th International Conference on Automated Deduction (CADE 1996), LNCS, 1104, 166–170 (1996)
18. http://www.wolfram.com/products/webmathematica/index.html

