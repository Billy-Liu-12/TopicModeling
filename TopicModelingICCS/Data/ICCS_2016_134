Procedia Computer Science
Volume 80, 2016, Pages 131–142
ICCS 2016. The International Conference on Computational
Science

Adaptive Multi-level Blocking Optimization
for Sparse Matrix Vector Multiplication on GPU
Yusuke Nagasaka1 , Akira Nukada1 , and and Satoshi Matsuoka1
Tokyo Institute of Technology, Tokyo, Japan

Abstract
Sparse matrix vector multiplication (SpMV) is the dominant kernel in scientiﬁc simulations.
Many-core processors such as GPUs accelerate SpMV computations with high parallelism and
memory bandwidth compared to CPUs; however, even for many-core processors the performance of SpMV is still strongly limited by memory bandwidth and lower locality of memory
access to input vector causes further performance degradation. We propose a new sparse matrix
format called the Adaptive Multi-level Blocking (AMB) format, which aggressively reduces the
memory traﬃc in SpMV computation to improve performance. By several optimization techniques such as division and blocking of the given matrix, the column indices are compressed and
the reusability of input vector element in the cache is highly improved. An auto-tuning mechanism determines the best set of parameters for each matrix data by estimating the memory
traﬃc and predicting the performance of a given SpMV computation. For 32 matrix datasets
taken from the Sparse Matrix Collection collected by the University of Florida, AMB format
achieves speedups of up to x2.92 compared to NVIDIA’s cuSparse library and up to x1.40 compared to yaSpMV, which was recently proposed and has been the best known library to date
for fast SpMV computation.
Keywords: Sparse matrix format, GPU, SpMV

1

Introduction

Many-core processors such as GPU have numerous computing cores and high-bandwidth memory to increase computational capability. A vast number of codes and algorithms have been
ported to many-core processors and successfully accelerated. Especially in case of GPUs, many
threads are executed concurrently in order to hide the latency of accessing the device memory. Although this works eﬃciently for contiguous memory access, random or indirect memory
access degrades the performance. Sparse matrix vector multiplication (SpMV) is a memory intensive kernel that is dominant in various numerical algorithms such as conjugate gradient (CG)
method and page ranks [26]. SpMV typically requires random memory access to input vector
element and, thus, exhibits poor performance. Although there has been many existing work to
improve the performance of SpMV computation on GPU or other many-core processors, their
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.304

131

Adaptive Multi-level Blocking Optimization . . .

Nagasaka, Nukada and Matsuoka

improvements are limited to memory bandwidth and they do not exploit the computational
capability of many-core processors.
We propose a state-of-the-art sparse format that reduces memory traﬃc to dramatically
accelerate SpMV computation on GPU. Our new format is called the Adaptive Multi-level
Blocking (AMB) format and employs multiple levels of division and blocking. The AMB format
improves the reusability of input vector elements in GPU cache by column-wise segmentation
of the matrix and compresses the column index of each non-zero element. The AMB format
requires very little memory traﬃc in total, and this is crucial for memory bound kernels. We
evaluate the performance of our AMB format for 32 matrix datasets taken from the Sparse
Matrix Collection at University of Florida [5], and AMB achieves a maximum speedup of x2.92
and an average of x1.74 over NVIDIA’s cuSparse [23]. AMB also reports x1.40 and x1.13 for
peak and average speedups, respectively, over yaSpMV [14]—the recently proposed and most
notably fast SpMV computation library. To utilize our sparse format in practical situation, we
also propose fast auto-tuning mechanism that searches the best set of parameters of AMB for
each matrix dataset by estimating the memory traﬃc and predicting the performance of SpMV
computation.

2

Sparse Matrix Formats

Sparse matrices in various scientiﬁc and engineering applications are generated by using a kind
of discretization such as FEM and FDM. Matrix sizes are very large, however, most of the
elements are actually zeros. For these matrices, sparse matrix formats are designed to reduce
memory usage as well as amount of computations. Coordinated (COO) and Compressed Sparse
Row (CSR) are widely-used sparse formats. More recently, numerous sparse formats have been
proposed for speciﬁc processor architectures or matrices in order to achieve better performance
of SpMV computation [12, 13, 10, 15]. In particular, many researchers have been optimizing
SpMV computation for many-core processors such as GPUs [22, 1, 4]. While CSR format has
been extended for GPU [2, 19, 7, 3, 20], many sparse matrix formats that store the matrix
data in column major ordering have been developed since they have favorable properties for
vector processors and many-core processors. JDS (Jagged Diagonal Storage) format [27], which
was designed for vector processors, has also been optimized for GPU [8, 9], and ELLPACK
[25] based sparse formats have been proposed. Existing sparse formats focused on the issues
speciﬁc to many-core processors. Some sparse formats alleviate the load imbalance caused by
concurrent execution of many threads [17, 6], while other sparse formats improved the locality
of memory access to input vector [18, 24].
The ELLPACK format compresses the non-zero elements along each row, and the numbers
of elements are made to be same with zero-ﬁlling in order to store the matrix data in column
major ordering. ELLPACK is suitable if the rows have similar numbers of non-zero elements
like a banded matrix. In contrast, it is ineﬃcient if the numbers are not balanced because the
number of zero-ﬁlling is much larger. There have been several sparse formats extended from
ELLPACK to alleviate this problem.
Bell et al. proposed the Hybrid format, which combines the ELLPACK and COO formats
[2]. The matrix data is basically covered by ELLPACK and remaining part is represented in
COO format in order to reduce the number of zero-ﬁllings. Hybrid format is implemented in
the cuSparse library provided by NVIDIA as well as the CSR format optimized for NVIDIA’s
GPU.
Kreutzer et al. proposed the SELL-C-σ format [11], which sorts every σ rows by the number
of non-zero elements per row and converts every C rows to the ELLPACK format. By sorting
132

Adaptive Multi-level Blocking Optimization . . .

Nagasaka, Nukada and Matsuoka

and conversion, SELL-C-σ format eﬀectively reduces the number of zero-ﬁllings. The sorting
scope ’σ’ is usually smaller than the matrix size to keep memory access locality in the original
ordering. The parameter ’C’ is the chunk size, which should be set to an architectural property
such as vector register length, warp size or wavefront size.
Segmented formats are our previously proposed formats, which focus on the locality of
memory access to input vector in SpMV computation [18]. Segmented formats divide a matrix
along the column uniformly and each sub-matrix is converted to JDS or SELL-C-σ format,
which has favorable properties for many-core processors. Although our Segmented formats
are able to improve the reusability of the input vector elements in caches, they proportionally
increase the number of additional memory access as the number of the segmentations and
total memory traﬃc in SpMV computation becomes larger. To alleviate this problem, we also
proposed Non-Uniformly Segmented (NUS) formats, which reorder a matrix by the number
of non-zero elements per row and segments the matrix with a variety of segmentation widths.
NUS formats can reduce the number of segmentations with keeping high reusability of the
input vector elements in caches. For large size matrices, however, the additional memory access
strongly aﬀects the performance down because of its sparsity. Therefore, NUS formats can
improve the performance of SpMV only for speciﬁc small size matrices.

3

Proposal

Our previous proposals, Segmented and NUS formats, successfully improved the locality of
memory access to input vector in SpMV computation on GPU. However, total memory traﬃc
became huge and the performance of SpMV computation did not improve for large size matrices. The performance of SpMV computation is strongly limited by the memory bandwidth.
Therefore, the reduction of the memory traﬃc is important to alleviate the memory bound. We
propose AMB format, which largely reduces memory traﬃc not only to matrix data but also to
input vector. First, we explain how AMB format reduces memory traﬃc. Next, we explain the
kernel of SpMV computation and estimation of memory traﬃc. Finally, we explain the scheme
of format conversion with auto-parameter tuning.

3.1

AMB Format

AMB format aims to reduce the memory traﬃc in SpMV computation by being constructed
in three levels of division and blocking; ﬁrst level is column-wise segmentation, second level
is row-wise slicing and third level is blocking of column indices. We call column-wise division
segmentation and row-wise division slicing. Figure 1 shows the state of each level of AMB
format.
First level is column-wise segmentation. AMB format sets one segmentation width and
divides a matrix along the column uniformly. By executing SpMV computation for each submatrix, the locality of memory access to input vector is improved and the memory traﬃc
can be reduced. Although Segmented formats set the segmentation width to match the cache
size, AMB format limits the segmentation width to 65,536 (= 216 ) columns, which is not an
architecture speciﬁc value, for the compression of column index in the second level division.
Second level is row-wise slicing. Each sub-matrix generated by segmentation in ﬁrst level
is converted into extended SELL-C-σ format. In the same way as SELL-C-σ, AMB format
also sorts each σ rows by the number of non-zero elements per row and converts each C rows
into ELLPACK in order to reduce zero-ﬁlling. AMB format stores the starting oﬀset and the
length of each chunk and the original row index of non-zero elements per row represented in
133

Adaptive Multi-level Blocking Optimization . . .

0

1

2

0

2

3

0

2

3

0
0

Nagasaka, Nukada and Matsuoka

3

0

0

2

2

0

2

3

0

2

1

1

0

1

2

0

0

3

3

1

0

0

4

0

0
2
0

0

2

0
3
1
2

Origina
l matrix
3
16

0

2

0

1

1

16

0

1

1
3

1
0

1

0

1

1

2

1

3

2

3
24

Va
l ue

Co
lu
m n ni dex

CS

1

C
L

4

0

0

0

2

1

3

1

2

1
0

1

24

P e
rm utatio
n
rm utatio
n
offset P e

CS : C
h u
nk sta
rn
ti g offset
C
L I
: n dex offset (uppe
r bits) / C
h u
nk l e
n gt
h l( owe
r bits)

L eve
l 1 : Co
l umn-wise segmentation

1

1

Va
l ue

1

2

1
2

3

Co
lu
m n ni dex

3
CS

C
L

P e
rm utatio
n
rm utatio
n
offset P e

L eve
l 3I
: ndex bl oc
k ing l
a ong each row

L eve
l 2R
: ow-wise l
s icing and index compression

Figure 1: AMB format

’CS’, ’CL’ and a pair of ’Permutation oﬀset’ and ’Permutation’ arrays in Figure 1 respectively.
There are three extensions from original the SELL-C-σ format. One is the elimination of the
empty chunk which has no non-zero elements. Second is the compression of column index by
representing 16-bit integer. The AMB format stores the remainder when the original index is
divided by segmentation width as column index. The quotient is stored to upper 16-bit of the
’CL’ array, while the chunk length can be represented in lower 16-bit integer since segmentation
width is not greater than 216 and the chunks, whose length is equal to zero, are removed. Third
is the compression of permutation array. The AMB format sets sorting scope as 32,768 (= 215 )
since the zero-ﬁlling is enough reduced without setting larger σ. The AMB format stores the
remainder when the original row index is divided by σ as permutation oﬀset and the quotient
is stored to ’Permutation’. This extended SELL-C-σ extremely reduces the memory usage and
the memory traﬃc in SpMV computation from original SELL-C-σ format.
Third level is blocking of column indices along row. Since AMB sorts the rows in second
level, blocking is limited in a row. One block size is set for each matrix data and AMB
compresses the contiguous column indices. Although the compression rate of column index can
be improved when block size is larger, the number of zero-ﬁlling in value array may increase in
some circumstances. Therefore, the block size should be carefully chosen for each matrix.

3.2

SpMV Kernel in CUDA and Estimation of Memory Traﬃc

The SpMV kernel of each format aﬀects the performance of SpMV computation and should
be carefully implemented to match the architecture and programming language. We propose
the SpMV kernel for AMB format in CUDA environment. SpMV computation of AMB is
constructed in two CUDA kernels. The ﬁrst kernel initializes the output vector with zero,
and the second kernel executes matrix vector multiplication. In the second kernel, one thread
is assigned to each row, and the result of each row is accumulated in the output vector by
atomic operation since column-wise segmentation causes conﬂicting memory accesses to the
same output vector elements. If the block size set in the third level is larger, the chunk length
of the column index becomes shorter and the number of iteration during the matrix vector
multiplication of each row is reduced. This has the same advantage as loop unrolling.
Since SpMV computation is a memory intensive kernel, the performance of SpMV can be
predicted by appropriately estimating the memory traﬃc. We estimate the memory traﬃc of
SpMV computation for the AMB format. The size of matrix is assumed as M × N . We set the
134

Adaptive Multi-level Blocking Optimization . . .

Nagasaka, Nukada and Matsuoka

Algorithm 1 Format conversion scheme with parameter auto-tuning
Input: Matrix data in CSR
Output: Matrix data in AMB with Best Set of Parameters
1: Column-wise segmentation (segment width = 216 )
2: Convert each segment to SELL-C-σ (C = 32, σ = 215 )
3: Eliminate empty chunks and compress column index and permutation to 16bit
4: block size ← 1
5: while block size ≤ 10 do
6:
Blocking with block size
7:
Estimate the memory access and update best block size
8:
block size ← block size + 1
9: end while
10: Blocking with best block size
11: thread block size ← 64
12: while thread block size ≤ 512 do
13:
Execute SpMV and update best thread block size
14:
thread block size ← thread block size ∗ 2
15: end while

variants after format conversion as follows; v is a sizeof ﬂoating point number, nzzf is a number
of value elements with zero-ﬁlling, b is a block size in third level, C is a chunk size in second
level and nC is a number of the chunk. The estimated memory traﬃc for the matrix data is a
sum of ’value’, ’column index’, ’CS’, ’CL’, ’Permutation oﬀset’ and ’Permutation’ since they are
read only once. Because of column-wise segmentation in the ﬁrst level, accessed input vector
elements will be in the cache and the number of global memory access to each input vector
element is expected to be one. For the output vector, in addition to initialization in ﬁrst kernel
of SpMV computation, atomicAdd, which requires one read and one write memory accesses, is
executed for each row. In the result, the estimated memory traﬃc in SpMV computation for
AMB format is: nzzf ∗ (v + 2/b) + nC ∗ (2 ∗ v ∗ C + 2 ∗ C + 10) + (M + N ) ∗ v.

3.3

Format Conversion for GPU with Parameter Auto-Tuning

For AMB format, the set of parameters such as block size aﬀects the performance of SpMV
computation. However, searching all combination of the parameters with executions of SpMV
requires expensive preprocessing and it is ineﬃcient in case of real applications. We propose the
conversion scheme for the AMB format to minimize the cost of searching the parameter space.
We devise a fast format conversion using GPU and auto-tuning mechanism, which searches the
best set of parameters of AMB format by estimating the memory traﬃc and the performance
of the SpMV computation. Algorithm 1 shows the auto-tuning mechanism for AMB format. In
this scheme, the matrix data in CSR format is stored on GPU as input data and is converted
into AMB format. The conversion is done from ﬁrst level segmentation to third level blocking.
In third level, this scheme searches the best block size for each matrix. The scheme converts
the matrix data into the AMB format with setting the block size from 1 to 10 and estimates
the memory traﬃc. When the mechanism searches the best block size in the third level, it
does not require redundant conversion of ﬁrst level segmentation and second level slicing. The
block size with minimum estimated memory traﬃc is regarded as best block size. After the
mechanism ﬁnds out the best block size, it starts searching for best thread block size, which
135

Adaptive Multi-level Blocking Optimization . . .

Nagasaka, Nukada and Matsuoka

Table 1: Matrix Data

Matrix
af 0 k101
af shell3
apache2
audikw 1
BenElechi1
bmw7st 1
bmwcra 1
bone010
boneS10
Dubcova3
ecology2
Emilia 923
Fault 639
Flan 1565
G2 circuit
G3 circuit

Row size
503,625
504,855
715,176
943,695
245,874
141,347
148,770
986,703
914,898
146,689
999,999
923,136
638,802
1,564,794
150,102
1,585,478

Non-zeroes
17,550,675
17,588,875
4,817,870
77,651,847
13,150,496
7,339,667
10,644,002
71,666,325
55,468,422
3,636,649
4,995,991
41,005,206
28,614,564
117,406,044
726,674
7,660,826

nz/row
34.85
34.84
6.74
82.28
53.48
51.93
71.55
72.63
60.63
24.79
5.00
44.42
44.79
75.03
4.84
4.83

Matrix
Geo 1438
hood
Hook 1498
inline 1
ldoor
msdoor
oﬀshore
parabolic fem
pwtk
Serena
shipsec1
shipsec5
StocF-1465
thermal2
thermomech dM
tmt sym

Row size
1,437,960
220,542
1,498,023
503,712
952,203
415,863
259,789
525,825
217,918
1,391,349
140,874
179,860
1,465,137
1,228,045
204,316
726,713

Non-zeroes
63,156,690
10,768,436
60,917,445
36,816,342
46,522,475
20,240,935
4,242,673
3,674,625
11,634,424
64,531,701
7,813,404
10,113,096
21,005,389
8,580,313
1,423,116
5,080,961

nz/row
43.92
48.83
40.67
73.09
48.86
48.67
16.33
6.99
53.39
46.38
55.46
56.23
14.34
6.99
6.97
6.99

aﬀects the performance of GPU executions. The mechanism evaluates the performance of the
SpMV computation by setting the thread block size as 64, 128, 256 or 512 and executing the
kernel.

4

Performance Evaluation

We compare the performance of our AMB format and major existing sparse formats, and
evaluate the cost of conversion to AMB format. For our performance evaluations, we utilize the
matrices from the Sparse Matrix Collection at University of Florida [5]. The name and size of
the matrices are summarized in Table 1. We selected 32 positive deﬁnite symmetric matrices
whose row size is larger than 131,072 (= 217 ) from the collection.
We evaluate the performance of SpMV on NVIDIA Tesla K20X GPU installed on TSUBAMEKFC. The GPU has 6 GBytes of device memory, being suﬃcient for storing all the matrices
used in this performance evaluations. The bandwidth of device memory is up to 250 GB/sec
and ECC is disabled. The Kepler-generation GPU has 1.5 MByte L2 cache memory shared
by 14 SMX, and each SMX has 48 KByte read-only cache. Input vector elements and arrays
representing the starting oﬀset and size of each chunk in SELL-C-σ and AMB format (CL and
CS arrays in Fig. 1) and ’Permutation oﬀset’ in AMB format are assigned to read-only cache.
Memory accesses to the other arrays bypass the read-only cache. GPU codes are implemented
in CUDA 7.0 and are executed on CentOS Linux 6.4 OS 64bit.

4.1

Performance of SpMV

For the performance evaluation of SpMV computation, we utilize two sparse matrix libraries,
cuSparse and yaSpMV [14], and also we prepare SELL-C-σ, Segmented-SELL-C-σ and NUSSELL-C-σ formats. We select CSR, Hybrid and BSR (Block CSR) from cuSparse library, and
the best result of three formats is represented as the performance of cuSparse. The block size of
BSR’s parameter is set to from 1 to 4. BCCOO format and its conversion scheme are provided in
yaSpMV library by Yan et al. We add yaSpMV library for the performance evaluation because
136

Adaptive Multi-level Blocking Optimization . . .



#,

  1

Nagasaka, Nukada and Matsuoka

     1

/")!












 

"+*&. '0 *(- (*$%*

 

Figure 2: Performance of SpMV computation in single precision

&

  *

    *










 

%$!( ") $#' #$ $

 

Figure 3: Performance of SpMV computation in double precision

it achieved large performance gain compared to existing SpMV library including cuSparse. In
the evaluation, yaSpMV library searches the best parameters for each matrix data, and the
result of SpMV using those best parameters is used as the performance of yaSpMV. The kernel
in double precision is not provided by yaSpMV. We evaluated the performance of SELL-Cσ with various sorting scopes and select best one for each matrix. For AMB format, SpMV
is executed for all set of parameters and the best result is regarded as AMB’s performance;
segmentation width in ﬁrst level is 65536 (= 216 ), block size in third level is set from 1 to 10,
and thread block size is set as 64, 128, 256 or 512.
Figure 2 shows the performance of SpMV computations in single precision. Matrices are
listed in ascending order of the average number of non-zero elements per row (= nz/row). If
nz/row is larger than 24, the performance of SpMV computation is high, and especially the
speedup of AMB format is superior to other formats. Our AMB format achieves speedups of
x2.92 on maximum and x1.74 on average compared to cuSparse library, and x1.40 on maximum
and x1.13 on average compared to yaSpMV library. Figure 3 shows the result of double precision. As well as single precision, our AMB format achieves high speedups compared to existing
formats. However, since the memory traﬃc of value data is larger and the compression rate
becomes lower, the speedups of AMB format are relatively small.
Figure 4 shows the speedups of each level compared to SELL-C-σ format in single precision.
For Seg-SELL-C-σ, the segmentation width is set to 216 . Seg-SELL-C-σ employs only ﬁrst
level segmentation and second level slicing. For the large size matrices utilized in this paper,
137

Adaptive Multi-level Blocking Optimization . . .



  -

Nagasaka, Nukada and Matsuoka

!"   -

 !)!$












 

('#+ %, '&* &' !'

 

Figure 4: Speedup of each level compared to SELL-C-σ format in single precision

  *

(#



 "$( $ %"
" #$ %" 









 

%$' !) $"& "$$

 

Figure 5: Memory Access Ratio in single precision

Seg-SELL-C-σ does not outperform SELL-C-σ because the additional memory traﬃc, which
Seg-SELL-C-σ format requires, is larger than the reduced memory traﬃc for input vector by
column-wise segmentation. AMB (Level 1, 2) sets the block size in third level to 1. For
most of matrices, AMB (Level 1, 2) achieves speedups compared to SELL-C-σ format. We
ﬁnd the elimination of needless chunks and compression of the column index to 16-bit integer
contribute the speedups of the performance of SpMV. AMB selects best block size in third
level, and shows further speedups. The result also shows the blocking optimization in third
level does not improve the performance when nz/row is small. This is because there are not
enough non-zero elements which have contiguous column indices in each row.
Figure 5 shows the ratio of the memory traﬃc compared to CSR format for each matrix
data. We evaluate the memory traﬃc of SELL-C-σ, BCCOO from yaSpMV and AMB format.
The result shows AMB format eﬀectively reduces the memory traﬃc if nz/row is larger. That is
why AMB format shows superior performance to other formats. On the other hand, in smaller
nz/row, the memory traﬃc of AMB format is not minimum in compared formats, and SELL-Cσ is most eﬃcient format in terms of memory traﬃc. For these matrices, AMB format requires
atomicAdd operations for output vector, which occupy large percentage in total memory traﬃc.
For most of matrix data, the format with minimum memory traﬃc shows best performance of
SpMV computation compared to other sparse formats.
138

Nagasaka, Nukada and Matsuoka


    

#!     "  
  

Adaptive Multi-level Blocking Optimization . . .

   $  

    

Figure 6: Measured and Estimated Memory Traﬃc

4.2

Figure 7: Memory Traﬃc and Execution Time

Evaluation of Format Conversion

Figure 6 shows the measured and estimated memory traﬃc of AMB format with best set of
parameters. As the correlation coeﬃcient between the measured and estimated memory traﬃc
is 0.999, which is enormously high score, the estimation of the memory traﬃc is correct.
We evaluate whether the estimation of memory traﬃc predicts the performance of SpMV.
Figure 7 shows the estimation of the memory traﬃc and execution time of SpMV computation
for AMB format with best set of parameters. The performance of SpMV computation depends
on the memory traﬃc and we are able to predict the performance of SpMV computation by
estimating the memory traﬃc. For several matrices, the execution time of SpMV computation
is longer than predicted. We ﬁnd load imbalance degrades the performance of SpMV computation for these matrices. In addition, we evaluate the estimation of memory traﬃc and the
performance of SpMV computation by changing the block size in third level. The block size
which requires smaller memory traﬃc basically shows better performance of SpMV computation. Therefore, we are able to predict the best block size in third level by estimating the
memory traﬃc. However, if the diﬀerence between the estimation of memory traﬃc is small,
the prediction of best block size in third level may fail.
We evaluate the performance of SpMV computation with auto-tuning mechanism for 32
matrix data. In the result, the mechanism selects best set of parameters for 29 matrix data in
single precision and 28 in double precision. The performance down is up to 8.01% in case that
the best block size for matrix data is not precisely selected. We conclude that our auto-tuning
mechanism selects enough appropriate parameters. The average cost of format conversion into
AMB format is 304 times execution of SpMV computation for AMB format, which can be
negligible in iterative method such as CG method.

5

Related work

There have been several past work focusing on reducing memory traﬃc on GPUs in SpMV
computation.
Maggioni et al. proposed Compressed Adaptive ELL (CoAdELL) format, where column
index is represented in 16-bit or 8bit integer [21]. CoAdELL format is based on delta encoding
technique to utilize the column distances between contiguous non-zero elements in each row.
If the diﬀerence of column indices between non-zero elements is small, the distances can be
139

Adaptive Multi-level Blocking Optimization . . .

Nagasaka, Nukada and Matsuoka

represented in 16-bit or 8-bit integer and the memory footprint is reduced. Since CoAdELL
cannot compress the column index when the non-zero elements is scattered, the compression
rate of CoAdELL is not high. AMB format ensures the compression to 16-bit integer for any
matrices.
Tang et al. proposed Bit-Representation-Optimized (BRO) compression schemes for GPU
[16]. BRO format is also based on delta encoding and the diﬀerence of column indices is
represented in more precise number of bits. Although these bit representation techniques have
been proposed for CPU, they do not work eﬃciently on GPU because the schemes sequentially
execute. BRO format is optimized for GPU by removing these processing. Although BRO
format successfully reduces the memory footprint, the performance of SpMV computation is
not improved so much since it requires additional decompression schemes.
Yan et al. proposed BCCOO format, which focuses on both reduction of memory traﬃc
for matrix data and improving load balance [14]. BCCOO stores the matrix data in extended
COO format with blocking the matrix to reduce the memory usage of the column and row
index. Row index is represented in a bit-ﬂag being diﬀerent from original COO format. When
the computation result of each block is accumulated in SpMV computation, local memory such
as shared memory on GPU is eﬀectively utilized to avoid the access to global memory. Since
BCCOO format requires the precise setting of many parameters such as block size and strategy
in SpMV computation, yaSpMV library provides the auto-tuning mechanism. However, the cost
of preprocessing of parameter tuning is extremely huge since the parameter space of BCCOO
format is large. Our performance evaluation shows AMB format reduces the memory traﬃc and
achieve better performance in SpMV computation compared to BCCOO format since BCCOO
format itself is based on COO format, which requires high memory bandwidth.

6

Conclusion

Accelerating SpMV computation, which is a dominant kernel in many scientiﬁc calculations, is
one of the critical issues for scientiﬁc and engineering applications. We propose a sparse matrix
format, called AMB, that overcomes the two major bottlenecks of SpMV computation: memory
intensive kernel and high cache miss rates caused by random memory accesses to input vector
elements. AMB employs multiple levels of division and blocking optimization techniques to
compress column indices and improve input vector access locality. This results in lower cache
miss rates and signiﬁcantly reduced memory traﬃc. AMB achieves superior performance to
competing formats on NVIDIA Kepler GPU, demonstrating up to x2.92 speedup over NVIDIA’s
cuSparse and up to x1.40 over the notable yaSpMV. We also ﬁnd out the performance of SpMV
computation strongly depends on the memory traﬃc, and we devise the auto-tuning mechanism
for AMB format with best set of parameters by estimating memory traﬃc precisely.
For future work, we plan to investigate the eﬀectiveness of our AMB format on other manycore processors such as AMD GPUs and Xeon Phi.

Acknowledgment
This work was supported by JSPS KAKENHI Grant Number 23220003, JST-CREST (Research
Area: Advanced Core Technologies for Big Data Integration), and NVIDIA GPU Center of
Excellence.
140

Adaptive Multi-level Blocking Optimization . . .

Nagasaka, Nukada and Matsuoka

References
[1] M. . Baskaran and R. Bordawekar. Optimizing Sparse Matrix-Vector Multiplication on GPUs using
Compile-time and Run-time Strategies. IBM Reserach Report, RC24704 (W0812-047), 2008.
[2] N. Bell and M. Garland. Implementing Sparse Matrix-vector Multiplication on Throughputoriented Processors. In Proceedings of the Conference on High Performance Computing Networking, Storage and Analysis, pages 18:1–18:11. ACM, 2009.
[3] M. Daga and J. L. Greathouse. Structural agnostic spmv: Adapting csr-adaptive for irregular
matrices. In 2015 IEEE 22nd International Conference on High Performance Computing (HiPC),
pages 64–74, Dec 2015.
[4] Hoang-Vu Dang and Bertil Schmidt. CUDA-enabled Sparse Matrix–Vector Multiplication on
GPUs using atomic operations. Parallel Computing, 39(11):737 – 750, 2013.
[5] T. Davis. The University of Florida Sparse Matrix Collection.
[6] A. Ashari et al. An Eﬃcient Two-dimensional Blocking Strategy for Sparse Matrix-vector Multiplication on GPUs. In Proceedings of the 28th ACM International Conference on Supercomputing,
ICS ’14, pages 273–282, New York, NY, USA, 2014. ACM.
[7] A. Ashari et al. Fast Sparse Matrix-Vector Multiplication on GPUs for Graph Applications.
In SC14: International Conference for High Performance Computing, Networking, Storage and
Analysis, pages 781–792, Nov 2014.
[8] Ali Cevahir et al. Fast Conjugate Gradients with Multiple GPUs. In Computational Science–ICCS
2009, pages 893–903. Springer, 2009.
[9] Ali Cevahir et al. High performance conjugate gradient solver on multi-GPU clusters using hypergraph partitioning. Computer Science-Research and Development, 25(1-2):83–91, 2010.
[10] B. C Lee et al. Performance Models for Evaluation and Automatic Tuning of Symmetric Sparse
Matrix-Vector Multiply. In ICPP 2004: International Conference on Parallel Processing 2004,
pages 169–176. IEEE, 2004.
[11] M. Kreutzer et al. A Uniﬁed Sparse Matrix Data Format for Eﬃcient General Sparse MatrixVector Multiplication on Modern Processors with Wide SIMD Units. SIAM Journal on Scientiﬁc
Computing, 36(5):C401–C423, 2014.
[12] R. Nishtala et al. When cache blocking of sparse matrix vector multiply works and why. Applicable
Algebra in Engineering, Communication and Computing, 18(3):297–311, 2007.
[13] S. Williams et al. Optimization of sparse matrix-vector multiplication on emerging multicore
platforms. Parallel Computing, 35(3):178–194, 2009.
[14] S. Yan et al. yaSpMV: Yet Another SpMV Framework on GPUs. In Proceedings of the 19th ACM
SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPoPP ’14, 2014.
[15] V. Karakasis et al. Perfomance models for blocked sparse matrix-vector multiplication kernels. In
ICPP’09: International Conference on Parallel Processing 2009., pages 356–364. IEEE, 2009.
[16] W. Teng Tang et al. Accelerating Sparse Matrix-Vector Multiplication on GPUs using BitRepresentation-Optimized Schemes. In Proceedings of SC13: International Conference for High
Performance Computing, Networking, Storage and Analysis, page 26. ACM, 2013.
[17] X. Liu et al. Eﬃcient Sparse Matrix-Vector Multiplication on x86-Based Many-Core Processors.
In Proceedings of the 27th international conference on supercomputing, pages 273–282. ACM, 2013.
[18] Y. Nagasaka et al. Cache-aware Sparse Matrix Formats for Kepler GPU. In 20th IEEE International Conference on Parallel and Distributed Systems (ICPADS), pages 281–288, Dec 2014.
[19] J.L. Greathouse and M. Daga. Eﬃcient Sparse Matrix-Vector Multiplication on GPUs Using
the CSR Storage Format. In SC14: International Conference for High Performance Computing,
Networking, Storage and Analysis, pages 769–780, Nov 2014.
[20] Y. Liu and B. Schmidt. Lightspmv: Faster csr-based sparse matrix-vector multiplication on cudaenabled gpus. In Application-speciﬁc Systems, Architectures and Processors (ASAP), 2015 IEEE

141

Adaptive Multi-level Blocking Optimization . . .

Nagasaka, Nukada and Matsuoka

26th International Conference on, pages 82–89, July 2015.
[21] M. Maggioni and T. Berger-Wolf. CoAdELL: Adaptivity and Compression for Improving Sparse
Matrix-Vector Multiplication on GPUs. In 2014 IEEE International Parallel and Distributed
Processing Symposium Workshops (IPDPSW), pages 933–940. IEEE, 2014.
[22] A. Monakov and A. Avetisyan. Implementing Blocked Sparse Matrix-Vector Multiplication on
NVIDIA GPUs. In Embedded Computer Systems: Architectures, Modeling, and Simulation, pages
289–297. Springer, 2009.
[23] NVIDIA Corporation. cuSPARSE Library.
[24] P. Nguyen Quang Anh et al. Reducing Vector I/O for Faster GPU Sparse Matrix-Vector Multiplication. In 2015 IEEE International Parallel and Distributed Processing Symposium (IPDPS),
pages 1043–1052, May 2015.
[25] John R. Rice and Ronald F. Boisvert. Solving Elliptic Problems Using ELLPACK. Springer-Verlag
New York, Inc., 1984.
[26] A. Rungsawang and B. Manaskasemsak. Fast Pagerank Computation on a GPU Cluster. In 20th
Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP
2012), pages 450–456, 2012.
[27] Youcef Saad. SPARSKIT: a basic tool kit for sparse matrix computations - Version 2, 1994.

142

