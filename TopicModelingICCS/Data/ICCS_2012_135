Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1647 – 1656

International Conference on Computational Science, ICCS 2012

Solving Optimization Problems in Nimrod/OK
using a Genetic Algorithm
Yu Hua Lim, Jefferson Tana and David Abramsonb
Monash University, Clayton, 3800, Victoria, Australia

Abstract
A scientific workflow can be viewed as formal model of the flow of data between processing components. It often involves a
combination of data integration, computation, analysis, and visualization steps. An emerging use case involves determining some
input parameters that minimize (or maximize) the output of a computation. Kepler is a good framework for specifying such
optimizations because arbitrary computations can be composed into a pipeline, which is then repeated until an optimal set of
inputs is found. Genetic Algorithms are generic optimization algorithms based on the principles of genetics and natural selection,
and are well suited for models with discontinuous objective functions. This paper discusses an implementation of a Genetic
Algorithm in Kepler, building on the Nimrod/OK framework. The resulting tool is generic and flexible enough to support a
variety of experimental domains. The paper reports a number of experiments that demonstrate the performance with a set of
benchmarking functions.
Keywords: Scientific Worklows, Kepler, Genetic Algorithms Optimization.

1. Introduction
Researchers commonly use scripting techniques, such as batch files, shell scripts and customised programs, for
specifying computational experiments [19]. Scripts typically combine sequences of applications for processing,
managing and manipulating data or visualisation of results. Using these methods requires a reasonable level of
programming skills. Scientific workflow engines, on the other hand, often require less programming skill, and are
focussed on the connection of existing services and applications. Workflows often operate on large, complex and
heterogeneous data sources that need to be integrated before computations can occur [7].
An enormous number of workflow engines have been built, each with different characteristics and features [22].
In this paper we focus on Kepler [16], which uses the collection-oriented modelling and design technique
(COMAD), and assists users with keyword-based actor searches, encapsulation of sub-workflows, as well as the
detection of invalid workflows. There are several advantages of Kepler over scripting-based approaches, such as
improved reusability and maintenance of actors, automated provenance management, on-the-fly updateable
parameters and support for fault-tolerance. Importantly, Kepler is built on Ptolemy, which supports a variety of
switchable execution mechanisms, and these have been exploited to support transparent and flexible parallel

a
b

E-mail: jefferson.tan@monash.edu
Corresponding author, e-mail: david.abramson@monash.edu

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.182

1648

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

processing.
Nimrod is a family of tools that supports parametric experiments [3]. It automates several repeated procedures,
such as formulation, execution, monitoring and result gathering. It greatly reduces the programming effort required,
and it supports grid and cloud execution using the Nimrod/G tool [3]. Nimrod/O is a non-linear optimization tool
that allows users to select parameters that minimize (or maximize) the output of a computation [4]. Currently
Nimrod/O supports four built-in algorithms, namely Broyden Fletcher Goldfarb Shanno (BFGS) gradient descent,
Hooke and Jeeves Simplex, Divide and Conquer and Simulated Annealing. Nimrod/K integrates the Nimrod/G and
Nimrod/O functionality into Kepler, supporting parallel execution of workflows on a variety of platforms, together
with automatic optimization of function parameters [2].
A common use of computational models in scientific workflows is the determination of a system that is in an
optimal state [1]. Optimization often arises in two slightly different forms. First, a user might want to minimize or
maximize a model output, e.g., maximizing the performance or durability of a product, or minimizing the cost or
risk of some service. Second, a user might want to compute the inputs that cause a model to fit experimental data.
Both types of problems have been successfully solved using Nimrod/K.
In this paper we discuss a new optimization feature for Nimrod/K using a Genetic Algorithm [14]. The
implementation is flexible and generic enough to support a variety of experimental domains, and supports the three
basic data types: integer, string and floatingparallel, we are able to evaluate the fitness function in parallel. The paper begins with a discussion of the Nimrod
family of tools, and Kepler. We then describe how the various Nimrod tools have been implemented in Kepler. The
paper proceeds with a discussion of Genetic Algorithms, and the implementation details in Nimrod/OK, which
combines the capabilities of Nimrod/O and Nimrod/K. We then illustrate the effectiveness of the solution on
standard problems.

2. Kepler and the Nimrod/K framework
2.1. Kepler
Scientific workflows can be data-intensive, compute-intensive, analysis-intensive or visualisation intensive [16].
The aim of Kepler is to support different levels of workflows from low-level workflows for grid engineers, to
higher-level knowledge discovery workflows for less-technical users [17]. Kepler provides domain scientists with an
easy-to-use, yet powerful, system for capturing the workflows they engage with on a daily basis. It streamlines the
workflow construction and execution process so that scientists can focus on analyses with minimal effort [6]. One of
-of-Computation (MoC). It also modularises an activity
oriented programming environment that promotes reusability [7]. Kepler provides an intuitive graphical user
interface for easy composition of complex workflows. It attempts to streamline the workflow creation and execution
process with minimal effort and requires no software programming knowledge from users.
-oriented modelling is inherited from the Ptolemy II system. Ptolemy II provides module-oriented
programming with an emphasis on multiple component interaction semantics. The key principle is to use welldefined Models-of-Computation that govern interactions between components, or actors.
Actors operate like functions in traditional programming languages. Unlike Ptolemy II, Kepler focuses on the
design and execution of scientific workflows. Therefore the composition of independent actors forms the scientific
workflow. Kepler adds many new actors and capabilities to Ptolemy II, for example filters, distributors, flow
controllers, multiplexors and data transformers [19]. Communications between actors are achieved through
interfaces known as ports. There are both input and output ports, which are connected through channels or links.
Messages through channels are encapsulated as tokens. Actors have parameters that enable configuration and
customisation of their behaviour. Hierarchical modelling with composite actors supports sub-workflows, and these
can be nested arbitrarily.
workflow. The actors are relieved of the details of interactions and simply adapt to the model of computation
defined by directors. This is called behavioural polymorphism, and further increases actor reusability. Concurrent
actors concurrently and defines buffering capabilities for each actor. This model of computation is similar to UNIX
command pipelining. A Director can also be nested to allow different execution models for sub-workflows.
The principle behind actor-oriented scientific workflows is to apply the concepts of actor orientation and

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

1649

hierarchical modelling from Ptolemy II. That, and the design of a separate management of execution model, forms
ling scientific workflows.
Kepler is unique in that it combines high-level workflow design with execution and runtime interactions,
allowing access to both local and remote data and services with specific Web service and Grid extensions. The Web
Services Description Language (WSDL) defines inputs and outputs that are directed and instantiated from the
-based data access such as
GridFTP. Workflows can be easily exchanged, archived, versioned and executed. Kepler has features to support
different mechanisms of database access and querying, as well as supporting other execution environments by using
wrappers. Kepler has a repository of common reusable actors. The new Genetic Algorithm actor developed in this
work interfaces and communicates with other existing actors, including those that support Grids.

2.2. Nimrod Toolkit
Nimrod is a specialised parametric modelling system that enables users to conduct parametric experiments to study
behaviours of complex systems [1][2][3][4]. It supports repeated execution of the same experiments with different
input parameters, and automates several repeated procedures such as formulation, execution, monitoring and result
gathering from multiple experiments. It greatly reduces the programming effort required for experiments. Nimrod
has a distributed scheduling component that manages the scheduling within a local area network.
Nimrod/G, on the other hand, allows experiments to be executed seamlessly in the Grid. It has a dynamic and
iterative process of resource discovery, acquisition and monitoring to support dynamic scheduling. Nimrod/G uses
the Globus Toolkit (all versions), which supports the development of applications for high-performance Grids. It
unrelated tasks to meet user-supplied deadlines at runtime. It is also responsible for discovering and allocating
resources based on these user supplied constraints in addition to system constraints. Nimrod/G provides this
transparent access to resources and user level scheduling through a high level interface for users.
Nimrod/G allows users to explore many different scenarios by selecting those that optimise the end results, but it
generates an exhaustive search. Usually, in order to achieve automatic optimization of results, optimization code is
typically integrated into the computational model itself. The main disadvantage of this approach is that it needs to be
added to each new application, and it is difficult to switch between algorithms. Nimrod/O's main goal is to combine
rapid application development, distributed computing and optimization into a single tool. It uses non-linear
optimization techniques to search the outputs of arbitrary computational models. It does this by leveraging the
Nimrod/G infrastructure, and this optimization is incorporated into the overall framework outside any given
application. Nimrod/O currently has four built-in optimization algorithms: BFGS , Simplex, Divide and Conquer
and Simulated Annealing, but is built as a framework, thus it is possible to incorporate other techniques.

2.3. Nimrod/K
Nimrod/K provides similar functionality to Nimrod/G, but
. Thus, it is possible to
create arbitrarily complex pipelines, or workflows, of computations, but stream different parameter values through
the workflow. By combining it with Nimrod/G, it is able to run computations on the Grid. Likewise, leveraging
roach makes it possible to search for optimal outputs from a workflow, rather than a
tors (SDF and PN), adding a new one
single standfor the Tagged Dataflow Architecture (TDA) [2].
The TDA Director supports concurrent threads of execution in the workflow itself [8]. Data tokens contain both a
data field and a special tag field that denotes the thread identity. Thus, parallelism is achieved through the creation
of tokens with different tag values.
ability to separate the
The main reason Kepler was chosen as the engine for Nimrod/K was
execution mechanism from the workflow logic. In Kepler, it is possible to change the orchestration semantics simply
by changing the Director; the business logic of the workflow is unaltered. This makes it relatively easy to
incorporate a new orchestration mechanism, such as the Tagged Dataflow Architecture. The new TDA Director
extends the exis
changes need to be made to the actors, so Nimrod/K workflows can run most existing Kepler actors in parallel.
Currently there are two ways to use the tagging mechanism. The first is by using a tagging actor, which modifies the
tag of incoming tokens. The other way is to use the API for in-actor tagging, allowing actors to modify tokens they

1650

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

manipulate. The first mechanism is meant for workflow creators and the second approach targets developers of
actors.
Optimization algorithms may themselves be viewed as workflows, usually involving repetitive looping so that
results are passed from one iteration to the next. When the features of Nimrod/K and Nimrod/O are combined,
optimisation operations are possible this tool variant is called Nimrod/OK. Nimrod/OK exposes the tasks of an
optimization loop and allows the user to assemble novel arrangements of those components. Optimisation
algorithsm are added as new actors in Kepler, and thus the functional previously available in Nimrod/O are
integrated into Nimrod/OK by building new actors. Figure 1 shows a simple example of an optimization workflow
under Nimrod/OK.
Tokens that are passed between the optimization actor and the computation contain both the coordinate values in
the search space and solution values. The Simplex actor in Figure 1 sends tokens to the computational model (in this
case, a Matlab model) as a batch of jobs for execution. These tokens are tagged to allow for parallel execution of the
computational model. The resulting values are then fed back to the Hooke and Jeeves actor, and the optimization
iterates until some convergence conditions are met. One of the actor
each execution. Another port outputs the statistical summary at the end of the optimization .

3. Genetic Algorithms
Genetic Algorithms (GA) are search algorithms inspired by the theory of natural selection, a process in which
stronger individuals are likely to be winners in a competing environment [18]. GAs find good solutions by
manipulating candidate solutions, so that they evolve into a desirable state [9]. Through the process, the algorithm
generates new solutions within the search space. If candidate solutions are represented as strings, these strings can
be viewed as chromosomes, the alphabets can represent genes and the value of the genes are alleles.
A GA relies on a population of candidate solutions and uses the population in the search process. The userspecified population size affects the scalability and performance of Genetic Algorithms. A small population size
leads to premature convergence, and a large population size leads to long computational times. In this work, we only
discuss the canonical/simple GA, which encodes chromosomes as bit strings in order to illustrate the principles and
model of a GA, although more complex structures have been created over the years [12].
The process of a Genetic Algorithm is as follows [5]:
1. Production of initial population (candidate solutions).
2. Evaluate the fitness of each individual in the population.
a. Select individuals to mate
b. Crossover their genomes
c. Mutate genome of the new solution
d. Add new solution to the population
3. Repeat step 2 until termination criterion is met.
Genetic algorithms have many advantages. They are not dependent on the analytical knowledge of the problem,
they are generally robust and can be applied to complex multi-criteria problems. GAs can handle any kind of
objective function, and any kind of constraints, regardless of search space, hence making them versatile in
application for different domains. GAs are typically less likely to be caught in locally optimal solutions as opposed
to neighbourhood-based search techniques. Since this technique is independent of the error surface, it can be used to
solve multimodal, non-differentiable, non-continuous or even NP-Complete problems. Other benefits of GAs are
that they can provide a number of equally optimal solutions, and can deal with large numbers of variables [14].
There are several limitations of GAs. First, they are typically expensive. The effect of genetic drift, or loss in
diversity, happens when the population contains relatively similar chromosomes, and can cause premature
convergence. There are GA-deceptive fitness functions that can have bad chromosomes, even by combining good
situations and real-time problems. Last, it is often difficult to find a suitable encoding for a problem as not all
problems can be represented in the same manner.
Each solution has a fitness value, which reflects the degree of how good the chromosome is for solving the
problem. The main operators will use this fitness value to determine actions to be taken. Therefore defining the

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

1651

fittest individual has almost the same fitness value as the average fitness value of the entire problem. This happens
due to lack of genetic diversity, and can potentially lead to premature convergence [13]. Therefore it is necessary to
rescale the fitness values of the population from time to time. When the objective is minimisation (rather than
maximization), the fitness values needs to be transformed using fitness scaling [21]. There are several methods to
perform fitness scaling, including linear scaling, power law scaling and sigma truncation.

4. Implementing a GA within Nimrod/K
As discussed in Section 2.3, Nimrod
functions. It does this by adding a small set of new actors that support the optimization functions, and a workflow
loop is used to iterate around the solution space. In this work we have added an additional optimization actor, called
GAOptim that embodies the algorithms discussed in Section 3. We have modified supporting actors,
DefineSearchSpace and SelectPoints to better suite population-based algorithms such as GA, but otherwise, their
functionality is similar to when used on the existing optimization actors.
GAOptim searches a defined space, but unlike the other algorithms, it maintains a population of solutions rather
than a single solution. This is handled in a similar way as single solutions by using the same data representation for
solution tokens namely they effective point to an object that contains the solution, rather than carrying the solution
around the workflow. Thus, population based methods behave in a very similar way as standard methods from the
workflow perspective.
Figure 2 shows a typical GA-based optimization workflow.

Figure 1 A simple Nimrod/OK Simplex workflow

Figure 2 A Nimrod/OK workflow incorporating the GAOptim actor

4.1. Encoding Schemes
Because Nimrod/OK supports a range of parameter types, the genetic algorithm code must handle integer, strings
and floating-point values. It is easy for floating-point values as no conversion has to be performed. Integer and string
data types must be converted to bitwise strings to perform bitwise crossover and mutation. For character strings,
each character in the string represents a single bit in the bitwise string, therefore no implicit conversion is required.
For integer data types, the integer has to be converted into its respective binary representation string of 1s and 0s.
Since the genetic algorithm code has been developed in Java, we use short, int and long as primitive data types to
represent integers of different magnitudes. These primitive data types are also represented using signed two's
complement. Therefore sign

4.2. Fitness Function Evaluation
As with the other Nimrod/OK optimization algorithms, the fitness function is external to the GAOptim actor. Thus,
the Actor emits points that require evaluation and these are sent to the fitness function workflow components. The
results are then returned to the GAOptim Actor, which executes the core genetic algorithm operations.

1652

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

execution mechanism [2]. Multiple instances of the fitness function, or computational model, can be created to
calculate fitness concurrently for the entire population. This effectively reduces the computational time, especially
for very large populations and time consuming models. The tagging and un-tagging operators are hidden from
workflow designers, and this is handled using API calls mentioned in Section 2.3.

4.3. Population Generation
Before any optimization can begin using the Genetic Algorithm, the population, containing a collection of candidate
solution within the search space, needs to be generated. For the existing Nimrod/OK optimization actors, this first
set of inputs is provided from the SelectPoints actor, shown in Figure 2. The domain for the search is specified in the
DefineSearchSpace actor. It specifies the boundaries of the search space. The search space specification is then
passed to the SelectPoints actor, which
points generated can be controlled by special parameters.

4.4. Selection Scheme
GAOptim provides two different schemes to select parents for crossover, namely Rank Roulette Selection and
Deterministic Tournament Selection.
In Rank Roulette Selection, individuals in the population are given a rank value based on their fitness value, and
a selection probability is linearly assigned to each individual based on its rank value. The rank approach helps to
reduce the chance of individuals dominating with extremely high fitness, compared to individuals with very low
fitness. This also increases the selection pressure on stagnant populations where individuals have relatively similar
finesses.
In Deterministic Tournament Selection, a pre-defined number of individuals are randomly selected from the
population to form the tournament group. This scheme is deterministic because the fittest individuals within this
group are selected. Selection pressure can be adjusted by adjusting the tournament size, and increasing tournament
size reduces chances of weaker individuals to be selected.

4.5. Crossover
Crossover operations are performed on pairs of selected parents to produce a pair of offspring. The crossover
operations produce offspring with genetic properties from both parents. GAOptim currently supports two types of
crossover: binary crossover and floating-point crossover. Since an individual may have a combination of variables
with different types, GAOptim uses specific crossover operations for each variable base on their data type.

4.6. Mutation
Mutation creates diversity in the population and promotes undirected jumps to different areas within the search
space. We currently support two different mutation operators one for strings and integers and another for floats.
In string mutation, users can specify a fixed number of bits, or characters, to mutate within the binary string or
character string. For binary representation of integers, randomly selected bits are flipped. For strings, randomly
selected characters are replaced with a random printable character in the ASCII table. For floating-points, nonuniform mutation is used. In this scheme, a random number, drawn from a normal distribution with a mean of 0 and
a maximum standard deviation of 1, is added to the floating-point. By using a normal distribution, there is
approximately a 70% chance that the random number will fall in the range of -1 to 1 if the standard deviation is 1.
Users can specify the standard deviation between 0 to 1. This restriction is to prevent major changes that might
result in excessive mutation causing offspring to be invalid.

4.7. Replacement
To enhance the average fitness of the population, old individuals have to be removed and replaced by new ones.
During the replacement phase the GA also performs steps to ensure that individuals are within the search space. This

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

1653

auto-constraint mechanism can be switched on or off by the user. New individuals that are not within the defined
search space ranges are discarded. We support two replacement schemes, random and steady-state.
In random replacement, individuals are selected randomly from the population to be replaced regardless of their
fitness. This selection prevents elitism, because it does not always replace the weakest individuals. This results in a
better diversity in the population. In the steady-state replacement scheme, we use a scheme similar to tournament
selection to determine weaker individuals. Selection pressure can also be set by the user by specifying the
tournament size. In this scheme, random individuals are picked for the tournament, and those with the lowest fitness
in the tournament are replaced. If users want to always remove weakest individuals in each generation, the
tournament size can be set to be equivalent to the population size, and this results in elitism.

4.8. Termination
Nimrod/OK already consists of a convergence mechanism that determines when the search has converged and
controls when the optimization terminates. Using a similar approach for the GAOptim actor, users can specify a
tolerance setting that causes the optimization to stop when the range of costs for the current population is small [23].

5. Case Studies
In this section we provide a brief evaluation of the new code against a couple of standard test functions. A more
rigorous set of evaluations is available in [24], however, there is insufficient space in this paper to report them all.
We have evaluated the GA on two functions from the literature, namely: the Sphere model [11] and the Rosenbrock
function [10]. In both cases, the test functions can be written as algebraic expressions, so it is not necessary to
invoke external programs. Accordingly, these expressions are entered using the standard Kepler expression operator,
as shown in Figure 2. We have not included any data on the parallel performance of these experiments and have
only shown the behaviour of the genetic algorithm.

5.1. The Sphere Model
The sphere model is a unimodal function with only one optimum, and is defined as:

Sphere is two-dimensional, strongly convex and symmetric, and provides an easily analysable test for an adaptive
plan [11].
Figure 4 shows that the GA was able to obtain near 0 fitness value effectively even at population size 50.
Increasing population also increased the performance of the GA significantly. The algorithm in [11] obtained a near
Optim appears to have performed better with slightly higher mutation
probabilities, as shown in Figure 3. The difference in crossover mechanism, and percentage of individuals replaced
in steady-state replacement scheme, could have caused this outcome. Table 1 shows that generational replacement
provides better performance than steady-state replacement. Table 2 shows the effect of crossover probability on the
average fitness values however no distinctive pattern can be drawn.

1654

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656
Figure 3

Effect of Mutation Probability on Fitness

Figure 4

Effect of Population Size on Fitness

Table 1 Effect of Replacement Model

Fitness Value
Best
Worst

Generational Replacement
(100% of population)
0.00000
0.02574

Steady-state Replacement
(40% of population)
0.00004
0.06556

Average

0.00300

0.00993

Table 2 Effect of Crossover Probability

Crossover Probability
Average Fitness Value

0.60
0.012

0.65
0.009

0.70
0.010

0.75
0.007

0.80
0.008

0.85
0.010

0.90
0.011

0.95
0.014

5.2. Rosenbrock
Rosenbrock is a unimodal two-dimensional function. It is a continuous, non-convex quartic function with a
minimum of zero at point (1,1) [10], and is defined as:

Rosenbrock is considered a difficult minimisation function because of a very narrow ridge that runs around a
parabola. Algorithms that underperform in this function do not discover good directions for their search [11].
Figure 6 illustrates that the GA was able to obtain a near 0 fitness value even at population 50. It also performed
very well for population 150 to 400, and obtaining near 0 fitness value on average. The generational replacement
model for the GA also performed better than steady-state replacement as shown in Table 3. Again, no significant
pattern can be drawn from Table 4 to show how changing the crossover probability can affect the performance.
Figure 5 shows the effect of mutation probability on the. Higher mutation probability tends to reduce the
performance of the GA. Both the effects of population size and mutation probability are close to the results obtained
in a previous study [11].

Figure 5

Effect of Mutation Probability on Fitness

Figure 6

Effect of Population Size on Fitness

Table 3 Effect of Replacement Model

Fitness
Value
Best
Worst

Generational
Replacement
(100% of population)
0.00001
0.01406

Steady-state
Replacement
(40% of population)
0.00012
0.01775

1655

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

Average

0.00200

0.00617

Table 4 Effect of Crossover Probability

Crossover Probability
Average Fitness Value

0.60
0.009

0.65
0.015

0.70
0.010

0.75
0.010

0.80
0.012

0.85
0.008

0.90
0.013

0.95
0.009

6. Conclusions
In this paper, we briefly described how we have incorporated a genetic algorithm in Kepler through Nimrod/OK.
Whilst the existing optimization algorithms in Nimrod/OK have been used successfully on a wide range of
problems, Genetic Algorithms have advantages for a number of problems that prove intractable on other well-known
algorithms. We have discussed the design of the GA, and shown how it has been incorporated in the existing Kepler
templates.
Several extensions have been identified. First, in order to support a wider range of experimental models, more
flexible implementations of the GA need to be developed. These include different crossover mechanisms, mutation
schemes, selection schemes and replacement schemes. We also need to support more data types. Second, the current
implementation does not handle work on a wider set of the test functions. Conditions such as fitness function noise,
populations with low diversity, and multimodal search spaces need to be addressed. An adaptive mechanism could
also be added to allow the search parameters to be changed during run time.

Acknowledgements
This project is supported by the Australian Research Council under the Discovery grant scheme We acknowledge
our colleagues in the MeSsAGE Lab at Monash University; special thanks to Colin Enticott and Tom Peachey for
their assistance with Nimrod/K and Nimrod/OK. Lim performed this work in fulfillment of his final year Bachelor
of Software Engineering Honours project.

References
[1] ABRAMSON, D., BETHWAITE, B., ENTICOTT, C., GARIC, S., PEACHEY, T., MICHAILOVA, A. & AMIRRIAZI, S. 2010.
Embedding optimization in computational science workflows. Journal of Computational Science, 1, 41-47.
[2] ABRAMSON, D., ENTICOTT, C. & ALTINAS, I. 2008. Nimrod/K: towards massively parallel dynamic grid workflows. Proceedings of
the 2008 ACM/IEEE conference on Supercomputing. Austin, Texas: IEEE Press.
[3] ABRAMSON, D., GIDDY, J. & KOTLER, L. High performance parametric modeling with Nimrod/G: killer application for the global grid?
Parallel and Distributed Processing Symposium, 2000. IPDPS 2000. Proceedings. 14th International, 2000 2000a. 520-528.
[4] ABRAMSON, D., LEWIS, A. & PEACHEY, T. 2000b. Nimrod/O: A Tool for Automatic Design Optimization. The 4Th International
Conference On Algorithms & Architectures For Parallel Processing (Ica3Pp 2000). Hong Kong.
[5] AFFENZELLER, M., WINKLER, S., WAGNER, S. & BEHAM, A. 2009. Genetic algorithms and genetic programming. Modern concepts
and practical applications., Numerical Insights 6. Boca Raton, FL: CRC Press. xxvii, 361 p. .
[6] ALTINTAS, I., BERKLEY, C., JAEGER, E., JONES, M., LUDASCHER, B. & MOCK, S. Kepler: an extensible system for design and
execution of scientific workflows. Scientific and Statistical Database Management, 2004. Proceedings. 16th International Conference on
Scientific and Statistical Database Management, 21-23 June 2004 2004a. 423-424.
[7] ALTINTAS, I., BERKLEY, C., JAEGER, E., JONES, M., LUDÄSCHER, B. & MOCK, S. Kepler: Towards a Grid-Enabled System for
Scientific Workflows. The Workflow in Grid Systems Workshop in GGF10 - The Tenth Global Grid Forum, 2004b Berlin, Germany.
[8] ARVIND, K. & NIKHIL, R. S. 1990. Executing a Program on the MIT Tagged-Token Dataflow Architecture. IEEE Trans. Comput., 39,
300-318.
[9] CANTÚ-PAZ, E. 2000. Efficient and Accurate Parallel Genetic Algorithms, Boston, Kluwer Academic.
[10] DE JONG, K. A. 1975. Analysis of the behavior of a class of genetic adaptive systems.
[11] DIGALAKIS, J. & MARGARITIS, K. 2001. On benchmarking functions for genetic algorithms. International journal of computer
mathematics, 77, 481-506.
[12] GHANEA-HERCOCK, R. 2003. Applied Evolutionary Algorithms in Java, New York, Springer-Verlag.

1656

Yu Hua Lim et al. / Procedia Computer Science 9 (2012) 1647 – 1656

[13] GOLDBERG, D. 1989. Genetic Algorithms in Search, Optimization, and Machine Learning, Addison-Wesley Professional.
[14] HAUPT, R. L. & HAUPT, S. E. 2004. Practical Genetic Algorithms, New Jersey, John Wiley & Sons, Inc.
[15] HERRERA, F., LOZANO, M. & VERDEGAY, J. L. 1998. Tackling Real-Coded Genetic Algorithms: Operators and Tools for Behavioural
Analysis. Artificial Intelligence Review, 12, 265-319-319.
[16] KEPLER. 2011. The Kepler Project [Online]. Available: http://kepler-project.org/ [Accessed 4/11/2011.
[17] LUDÄSCHER, B., ALTINTAS, I., BERKLEY, C., HIGGINS, D., JAEGER, E., JONES, M., LEE, E. A., TAO, J. & ZHAO, Y. 2006.
Scientific workflow management and the Kepler system. Concurrency and Computation: Practice and Experience, 18, 1039-1065.
[18] MAN, K. F., TANG, K. S. & KWONG, S. 1996. Genetic algorithms: concepts and applications [in engineering design]. Industrial
Electronics, IEEE Transactions on, 43, 519-534.
[19] MCPHILLIPS, T., BOWERS, S., ZINN, D. & LUDÄSCHER, B. 2009. Scientific workflow design for mere mortals. Future Generation
Computer Systems, 25, 541-551.
[20] NELDER, J. A. & MEAD, R. 1965. A simplex method for function minimization. The computer journal, 7, 308.
[21] REEVES, C. R. & ROWE, J. E. 2003. Genetic Algorithms - Principles and Perspectives, Dordrecht, Kluwer.
[22] YU, J. & BUYYA, R. 2005. A Taxonomy of Workflow Management Systems for Grid Computing. Journal of Grid Computing, 3, 171-200200.
[23] PEACHEY, T. C. 2005. Nimrod/O Users' Guide for Version 2.6.x [Online]. Available:
http://messagelab.monash.edu.au/NimrodO/Documentation?action=download&upname=NimrodOUserManual_2.6.pdf [Accessed
3/11/2011.
[24]
Engineering Honours Thesis, 2011.

