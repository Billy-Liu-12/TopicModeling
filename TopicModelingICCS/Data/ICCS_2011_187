Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 2196–2205

International Conference on Computational Science (ICCS 2011)

A New Method for Scheduling Divisible Data on a Heterogeneous
Two-Levels Hierarchical System
Amin Shokripour ∗, Mohamed Othman ∗,1 , Hamidah Ibrahim, Shamala Subramaniam
Department of Communication Technology and Network,
Universiti Putra Malaysia, 43400 UPM Serdang, Selangor, Malaysia

Abstract
During the last decade, the use of parallel and distributed systems has become more common. In these systems, a
huge chunk of data or computation is distributed among many systems in order to obtain better performance. Dividing
data is one of the challenges in this type of systems. Divisible Load Theory (DLT) is proposed method for scheduling
data distribution in parallel or distributed systems. In many researches carried out in this field, it was assumed that
the used network topology is linear or one-level tree but that is not always true in real systems. In the large scale
networks, hierarchical topology is usually used. In this article, we propose a new method which includes a closedform formula to schedule jobs in a heterogeneous distributed computing system in which its network topology is
two-levels hierarchical system. The experiments show the calculated size for each processor is the best.
Key words: Divisible Load Theory, Scheduling, Unreliable Systems, Heterogeneous, Dedicated Systems

1. Introduction
In recent years, there has been considerable specific attention given to solving large computation problems by
using distributed computing systems. The researches focused on the use of clusters of workstations, network of
workstations and grid environments as candidate systems to do this type of computation. One of the challenges in
this field is to find a closed-form formula for distributing data among processors so that the response time (time from
admitting job to completing it) is minimum. Methodologies, such as Markovian Queuing Theory, Circuit Theory and
Divisible Load Theory (DLT), have been presented for distributing data among processors in parallel and distributed
systems so that the response time (time from admitting job to completing it) is minimum.
DLT is based on a specific type of data known as Divisible Load Data. Arbitrarily divisible data are a large amount
of data which can be arbitrarily divided into desirable independent parts as each part can be processed separately
from the others. Many scientific and engineering applications have this characteristic. Some of these applications
∗ Corresponding

Author
Email addresses: shokripour@gmail.com (Amin Shokripour), mothman@fsktm.upm.edu.my (Mohamed Othman)
1 The author is also an associate researcher at the Lab of Computational Science and Informatics, Institute of Mathematical Research (INSPEM),
Universiti Putra Malaysia.

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.240

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

2197

are massive experimental data processing, image processing, video processing, mathematical applications, network
scheduling, and biological applications [1].
Diﬀerent models were investigated in DLT researches [2, 1], each of which is made by some assumptions. One installment system with blocking and non-blocking mode communication [3], multi-installment system by non-blocking
communication modes [4], system with diﬀerent processor available time (SDPAT) [5], non-dedicated systems [6],
and others are some examples of the investigated models. One of the common network topologies in large scale networks (such as Internet) is the tree network topology. To use this type of network in parallel and distributed computing
systems, we should have a method for scheduling jobs.
In this research, we present a scheduling method to schedule jobs in a heterogeneous multi-installment system
with the tree network topology. The proposed method consider four necessary steps for scheduling multi-installment
systems. It attempts to find the proper number of processors, the proper number of installments, the size of the
assigned task for internal installments, and the size of the assigned task for last installment. Finally, we show that the
proposed formula is true.
The remainder of this paper is organized as detailed below. Section 2 presents related works. Our model and
notations are introduced in the third section. In section 4 the proposed method for two-level hierarchical systems,
which includes a formula for calculating the proper size of task for each branch and processors ordering algorithm,
is presented. The results of experiments and their analysis appear in section 5. In the last section, conclusion is
obtainable.
2. Related Works
Hierarchical network topology is one of the commonly used topologies in large scale networks. It was investigated
from the first years of DLT [7]. One of the applications of tree topology is wireless networks. These types of networks
were investigated by Katsaros and Polyzos [8].
Some restrictions were defined on this topology and were converted it to some other customized topologies and
each of the new topologies was separately investigated for scheduling by using DLT. The simplest resulted topology
from the assumptions is the one-level tree. A one-level tree includes a root and some leaves, each of which is directly
connected to the root. This topology is one of the commonly investigated topologies in researches about using DLT
for scheduling parallel and distributed systems [3].
Another investigated hierarchical topology is the spanning tree. A spanning tree is produced by defining a condition on a complex network topology. As defined in graph theory, it is a network in which each of the clients is only
connected to one other worker and the connection is made by using the middle nodes. The first attempt in this field
was presented by Yao et al. [9]. Yao et al. tried to do job scheduling in an arbitrary network. For this reason, they
made a spanning tree from the network and scheduled the jobs in the spanning tree network. After Yao’s research,
England et al. presented another study about spanning trees [10]. In the newer research, two diﬀerent spanning trees
(Traditional Spanning Tree and Robust Spanning Tree) were investigated by England et al. and two diﬀerent algorithms (Centralized and Distributed) were proposed to schedule these types of trees. They compared their method
with Yao’s method and showed the response time for their method is better than Yao’s method. The last research
about job scheduling using spanning trees was published by Viswanathan et al [11]. Resource-aware optimal load distribution strategy based on optimal sequencing (RAOLD-OS), which has been shown to provide optimal processing
time solutions for a given spanning tree network [9], was applied to some diﬀerent spanning tree routing strategies
such as Minimum Spanning Tree (MST), Shortest Path spanning Tree (SPT), Fewest Hops spanning Tree (FHT), and
Robust Spanning Tree (RST). It was shown that the SPT routing strategy has the better trade-oﬀ between complexity
and performance while each of the other strategies has better trade-oﬀ between other parameters.
Tree network topology is one of the complex network topologies. Job scheduling in this topology is so diﬃcult
because of its complexity and scheduling complexity. One of the ten reasons for using Divisible Load Theory is
named Equivalent Networks [2]. This means that we can replace a branch of a tree with an equivalent node so that it
works the same as all the member of branch. It was based on some researches. Suresh et al. presented a method which
used this characteristic of DLT [12]. Jia et al. investigated a multi-level tree in which resources were unknown [13].
They defined two types of parameters for the network: static and dynamic. An equivalent tree was made to show the
available resources and the scheduling method was applied on this tree.

2198

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

Table 1: Notations

Notation
W
Wi
Vi
ni
mi
l
αij
j

βi

j

wi
zij

sij
oij
T (Wi )

Description
Total size of data
Total size of data for the P is
Size of each installment for the P is
Number of installments for the P is
Number of processors for the P is
Number of branches
It is the size of allocated fraction to processor P i in each
internal installment in the group j.
It is the size of allocated fraction to processor P i in the last
installment in the group j.
Ratio of the time taken by processor P i in the group j, to
compute a given load, to the time taken by a standard
processor, to compute the same load
Ratio of the time taken by P i in the group j, to communicate a
given load, to the time taken by a standard link, to
communicate the same load
Computation overhead for processor P i in the group j
Communication overhead for processor P i in the group j
This is the response time for a task with size W i .

3. Preliminaries
3.1. Notations
In this paper, several notations and their definitions are described in Table 1.
3.2. Model
In this research, the two-level tree network topology is investigated. For the two-level tree network topology, we
use a model the same as Fig. 1.
The used system is a communication based heterogeneous multi-installment which includes communication and
computation overheads and the communication mode is blocking.
3.3. A Review on the Formulation of Multi-Installment Systems
In one of the our previous research, we reached a closed-form formula for scheduling jobs in a heterogeneous
system which includes over heads and communication mode is blocking [14]. In this section we will review them
because in the next sections we need them.
For scheduling internal installments these formula can be used:
⎧
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎩

z1 +w1
zi +wi
o1 +s1 −oi −si
zi +wi
1− 1 m Φ
α1 = 1+V mi=2Δi i
i=2
αi = α1 Δi + V1 Φi

Δi =
Φi =

(1)

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

2199

Figure 1: Two-Level Hierarchical Network Topology

Last installment can be scheduled by using these formulas:
⎧
i+1 +oi+1 )
⎪
δi+1 = si −(s
⎪
⎪
wi+1 +zi+1
⎪
⎪
⎪
⎪
εi+1 = wi+1w+zi i+1
⎪
⎪
⎪
⎪
i
⎪
⎪
⎨ Ei = j=2 ε j
i
⎪
⎪
Γi = j=2 (δ j ik= j+1 εk )
⎪
⎪
⎪
⎪
⎪
⎪
βi = Ei β1 + V1 Γi , i = 2, . . . , m
⎪
⎪
⎪
m
1
⎪
⎪
⎩ β1 = 1− V mi=2 Γi
1+
Ei

(2)

i=2

In the above formulas, m is the proper number of processors. We use this formula for calculating its value.
W≥(

(1 +

m
i=2

Δi )(
(w1 −

m
j=2 (Φ j z j +
m
j=2 Δ j z j )

(z1 + w1 )(
(1 +

m−1
i=2

Ei )[(z1 + w1 )

o j ) − s1 )

m−1
m
i=2 Ei − i=2
m
i=2 Φi − (1 +

m

+

Φi )2 .
i=2

(3)

Δi )
m
i=2

Δi )(o1 + s1 )]

We started from m = 1 and calculate non-equation. If for the m = M the non-equation is not true, we found that M − 1
is the proper number of the processors.
The proper number of installment is another important parameter for jobs scheduling in a multi-installment system.
The used formula for calculating this parameter is the same as below
W(z1 + w1 )(
(1 +

m−1
i=2

Ei )[(z1 + w1 )

m−1
m
i=2 Ei − i=2 Δi )
m
m
i=2 Φi − (1 + i=2 Δi )(o1

+ s1 )]

= (n + 1)2

(4)

3.4. Response Time Function for a One-Level Tree Topology
DLT is based on this concept that for the best response time all the processors should finish their tasks at the
same instant time. Hence, we need to know the response time in one-level tree topology. The response time for the
multi-installment systems includes required time for internal installments and last installment. By using Eq.(1) and

2200

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

Eq.(2), we can write the function of response time for a multi-installment system with one-level tree network topology
same as Eq.(5).
⎛m
⎞
⎜⎜⎜ 1
⎟⎟⎟
1
1
1
1
1
1
⎜
T (W1 ) =n1 ⎜⎜⎝ (α j V1 z j + o j ) + α1 V1 z1 + o1 ⎟⎟⎟⎠ +
j=2
(5)
⎛
1⎞
1
V
⎜⎜⎜ 1 − m
⎟
i=2 Γi ⎟
1
1
1
1
⎟⎟ (z + w1 ) + (o1 + s1 )
⎜⎝
1
1 ⎠ 1
1+ m
i=2 Ei
Because one of the unknown variables in this research is the size of assigned data to each group, we change this
formula to a formula based on W 1 . We define a new variable the same as below
1

τ1 =

(1 +

m1
i=2

Ei )

.

(1 +

m1
i=2
m1
1
i=2 Δi )(

(1 +

Δi )(z1 + w1 ) − (1 +
m1
1 1
j=2 (Φ j z j )

+

m1
j=1

m1
i=2

m1
j=1 (Δ j z j )
m1
1 m1
1 1
i=2 Φi
j=1 (Δ j z j )

Ei )

o1j ) −

(6)

From Eq.(6) and Eq.(4), we find that
n+1=

W1 τ1

(7)

After rewriting Eq.(5), we have
m1
1 1
j=1 (Δ j z j )
W1
+ W1 2τ1
1
1
(1 + m
i=2 Δi )
⎛
m
m1
(Φ1j z1j ) +
⎜⎜⎜ (1 + i=21 Δ1i )( j=2

⎜⎜⎝

−
−

1+

(1 +

m1
i=2

Δ1i )(

m1
1 1
j=2 (Φ j z j )

+

1+
1
1
+ w11 ) m
i=2 Γi
1
1+ m
i=2 Ei

(z11

m1
1
j=1 o j ) −
m1
1
i=2 Δi
m1
1
j=1 o j ) −
m1
1
i=2 Δi

m1
i=2

Φ1i

m1
i=2

Φ1i

m1
1 1 ⎞
⎟⎟
j=1 (Δ j z j ) ⎟

⎟⎟⎠

m1
1 1
j=1 (Δ j z j )

+ (o11 + s11 ) = T (W1 )

Three new symbols are defined to make Eq.(8) simpler.
⎧
m1
m1
1
1 1
1
1
⎪
(1 + m
⎪
i=2 Δi )( j=2 (Φ j z j ) +
j=1 o j )
⎪
⎪
⎪
=
−
F
1
⎪
1
1
⎪
⎪
1+ m
⎪
i=2 Δi
⎪
⎪
⎪
m1
⎪
1 m1
1 1
1
1
⎪
⎪
(z11 + w11 ) m
⎪
i=2 Φi
j=1 (Δ j z j )
i=2 Γi
⎪
⎨
+
−
+ (o11 + s11 )
m1
m
1
1
⎪
⎪
1
+
Δ
1
+
E
⎪
i=2 mi
i=2 m i
⎪
m
m1 1
m
⎪
1
1
⎪
(1+ i=21 Δ1i )( j=2
(Φ1j z1j )+ j=1
o j )− i=21 Φ1i j=1
(Δ1j z1j )
⎪
⎪
⎪
G
=
2τ
m
⎪
1
1
1 Δ1
⎪
1+
⎪
i=2 i
⎪
m1
⎪
⎪
(Δ1 z1 )
⎪
⎪
⎩ H1 = j=1 m1 j j1
1+
Δ
i=2

(8)

(9)

i

We can rewrite Eq.(8) the same as below
H1 W1 +

W1 G1 + F1 = T (W1 )

(10)

4. The New Scheduling Method for Hierarchical Systems
4.1. A New Method for Scheduling Two-Level Hierarchical Systems
For scheduling a multi-installment system, we should calculate four parameters; the proper number of installments,
the proper number of processors, the size of the assigned task to each processor for internal installments and the size
of the assigned task to each processor in last installment.

2201

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

Before finding these variables, we should sort the processors because it has direct aﬀect on the response time of
the systems. Mingsheng showed ordering processor by increasing z i is the best method for job scheduling in one
installment system [3]. Therefore, we sort the processors of each branch by increasing z i . To find the first parameter,
we use the proposed closed-form formula in [14] to calculate the proper number of installments; Eq.(4) for the first
branch and select it as the proper number of installments. We use also Eq.(3) for the first branch to answer the second
question. In this section, we present a method to answer the third and fourth questions.
As mentioned, in DLT researches, all the processors are forced to finish their tasks at the same instant in time.
Therefore, in this research, we attempted to find the size of the assigned data to each branch so that all the branches
finish their tasks simultaneously. Response time of each branch can be found by using Eq.(10). The time of participation by each branch in the task is equal to its response time plus the time of communication between the root of the
branch and the main root as shown in Eq.(11).
√
√
⎧
⎪
H1 W1 + G1 √W1 + F1 = H2 W2 + G2 √W2 + F2 + W2 z22 + o22
⎪
⎪
⎪
⎪
⎪
⎨ H2 W2 + G2 W2 + F2 = H3 W3 + G3 W3 + F3 + W3 z33 + o33
(11)
⎪
⎪
⎪
...
⎪
⎪
√
√
⎪
⎩ Hl−1 Wl−1 + Gl−1 Wl−1 + Fl−1 = Hl Wl + Gl Wl + Fl + Wl zl + ol
l

l

By using these equations, we can calculate W i based on W1 .
Wi = Zi W1 , i = 2, 3, . . . , l − 1

(12)

We know that
l

W1 + W2 + W3 + . . . + Wl =

Wi = W

(13)

i=1

hence,
l

W2 = W − (1 +

(14)

Zi )W1
i=3

To make the formulas simple, we define Ψ = (1 +

l
i=3

Zi ).

H1 W1 + G1 W1 + F1 =
H2 (W − ΨW1 ) + G2 W − ΨW1 + F2
+

z22 (W

− ΨW1 ) +

W − ΨW1 +

(15)

o22

We solve this equation to find the value of W 1 .
[H1 + (Hl + z22 )Ψ]W1 + G1 W1 + [F 1 − (Hl + z22 )W − F l − o22 ]
− Gl W − ΨW1 = 0

(16)

We define two new symbols and rewrite Eq.(16).
H = H1 + (Hl + z22 )Ψ
F = F 1 − (Hl + z22 )W − F l − o22

(17)

HW1 + G1 W1 + F − Gl W − ΨW1 = 0

(18)

(HW1 + F)2 = (Gl W − ΨW1 − G1 W1 )2

(19)

2202

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

− (HW1 )2 + (WG2l − F 2 )
+ (G21 − 2FH − ΨG 2l )W1 = 2G lG1

WW1 − ΨW12

Three new symbols are necessary to make the Eq.(20) simpler.
⎧
⎪
P = WG2l − F 2
⎪
⎪
⎨
T = G2 − 2FH − ΨG 2l
⎪
⎪
⎪
⎩ X = GlG
l

(20)

(21)

1

Eq.(20) can be written as below:
[P − (HW1 )2 + T W1 ]2 = (2X

WW1 − ΨW12 )2

H 4 W14 + (T 2 − 2PH 2 + 4X 2 Ψ)W12
− 2H 2 T W13 + (2PT − 4X 2 W)W1 + P2 = 0

(22)

(23)

After defining five new symbols, we have a simple quartic equation, Eq.(25).
⎧
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎩

A = H4
B = −2H 2 T
C = T 2 − 2PH 2 + 4X 2 Ψ
D = 2PT − 4X 2 W
E = P2

(24)

AW14 + BW13 + CW12 + DW1 + E = 0

(25)

Eq.(25) is a quartic equation that we can use to find its roots using Ferrari’s method. The root of this equation,
which is larger than zero and if Eq.(13) holds true, is acceptable. By using the root of Eq.(25) in Eq.(12), we can find
the value of W i , i = 2, 3, . . . , l. This means that we have the size of data for each group, and by using Eq.(1) and Eq.(2)
, the job can be scheduled. This method is called the the Quartic Method because quartic equation is used.
5. Results and Discussion
For the experiments, we used a simulator implemented by C++ which runs with Linux-based operating system,
Suse 11.1. A set of 50 processors with attributes which were produced randomly, was used as input for simulator. A
set of jobs was used as the second input. Value of w is ten times as large as z value for all processors. This means that
communication speed is much faster than computation speed. We did all the experiments in a two-level hierarchical
system. Members of each branch and the roots were randomly selected from the pool of workers.
We attempted to show the Quartic Method works correctly and has a response time that is the shortest. As
mentioned, in scheduling multi-installment systems four questions should be answered. In this section therefore, we
checked whether the Quartic Method oﬀers the best value for each of the parameters, the proper number of processors,
the proper number of installments, and the proper size of task for the internal and last installment. We did three sets
of experiments to show the method gives us the best value for each parameter.
As can be seen in Fig. 2, the calculated value for the size of task for each of the branches while used the Quartic
Method (zero point in the graphs) is much better than the other points. In this experiment, we manually changed
the size of the assigned task to each branch and the response times for the changed size of tasks were calculated and
shown in the graphs. We reduced 5%, 10% and 15% of the assigned task to the first branch and added them to the
second branch. We also added these percentages of the size of the assigned tasks to the first branch and reduced the
percentages in the second branch.

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

2203

Figure 2: Response Time vs Diﬀerences with the Calculated Size of the Assigned Task using the Quartic Method for Diﬀerent Sizes of Jobs

By using an experiment similar to the above experiment, we can evaluate the Quartic Method’s eﬃciency in
calculating the proper number of installments. Fig. 3 shows that due to the same reason as was mentioned for the
calculated size of task for each processor, it is clear that the Quartic Method presents the best proper number of
installments for a heterogeneous multi-installment system with a two-level hierarchical network topology.
The Quartic Method can be evaluated for its ability to find the proper number of processors with the similar
experiment. The results of this experiment can be seen in Fig. 4. As shown in the graphs, we manually added one,
two, three and four processors to the calculated proper number of processors and also reduced the same number of
processors. The zero points show the response times for the proper numbers of processors calculated using the Quartic
Method.
6. Conclusion
One of the used topologies in mobile systems is hierarchical. Job scheduling in this topology (in which the system
includes overhead, communication mode is blocking, and root uses multi-installment method to send the tasks) was
not studied before this. In this study, we presented a new methods for job scheduling in two-level tree network
topology. The presented method uses a quartic close-form formula to find the proper size of task for each branch.
Then by using Eq.(1) and Eq.(2), each branch is independently scheduled. Our experiments showed that the proposed
method present the best scheduling.

2204

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

Figure 3: Response Time vs Diﬀerences with the Calculated Proper Number of Installments using the Quartic Method for Diﬀerent Sizes of Jobs

Acknowledgment
The research was supported by the Malaysian Ministry of Higher Education, Fundamental Research Grant (FRGS)
01-11-09-734FR
References
[1] A. Shokripour, M. Othman, Categorizing DLT researches and its applications, European Journal of Scientific Research 37 (3) (2009) 496–515.
[2] T. Robertazzi, Ten reasons to use divisible load theory, COMPUTER 36 (5) (2003) 63–68.
[3] S. Mingsheng, Optimal algorithm for scheduling large divisible workload on heterogeneous system, APPL MATH MODEL 32 (2008) 1682–
1695.
[4] S. Mingsheng, S. Shixin, Optimal multi-installments algorithm for divisible load scheduling, in: Eighth International Conference on HighPerformance Computing in Asia-Pacific Region, 2005, pp. 45–54.
[5] A. Shokripour, M. Othman, H. Ibrahim, A new algorithm for divisible load scheduling with diﬀerent processor available times, in: Lecture
Notes in Computer Science, Vol. 5990, Springer, Berlin / Heidelberg, 2010, pp. 221–230.
[6] A. Shokripour, M. Othman, H. Ibrahim, S. Subramaniam, A new method for job scheduling in a non-dedicated heterogeneous system, in:
Procedia Computer Science, Vol. 3, Elsevier B.V., 2011, pp. 271–275.
[7] S. Bataineh, T. Hsiung, T. Robertazzi, Closed form solutions for bus and tree networks of processors load sharing a divisible job, IEEE Trans.
Computers. 43 (10) (1994) 120–131.
[8] K. Katsaros, G. C. Polyzos, Optimizing operation of a hierarchical campus-wide mobile grid, in: 18th Annual IEEE International Symposium
on Personal, Indoor and Mobile Radio Communications, Greece, 2007.
[9] J. Yao, B. Veeravalli, Design and performance analysis of divisible load scheduling strategies on arbitrary graphs, CLUSTER COMPUT 7 (2)
(2004) 191–207.
[10] D. England, V. Bharadwaj, J. B. Weissman, A robust spanning tree topology for data collection and dissemination in distributed environments,
IEEE T PARALL DISTR 18 (5) (2007) 608–620.

Amin Shokripour et al. / Procedia Computer Science 4 (2011) 2196–2205

2205

Figure 4: Response Time vs Diﬀerences with the Calculated Proper Number of Processors using the Quartic Method for Diﬀerent Sizes of Jobs

[11] S. Viswanathan, B. Veeravalli, J. Jingxi, Spanning tree routing strategies for divisible load scheduling on arbitrary graphs, a
comparative performance analysis, in: International Conference on High Performance Computing (HiPC), 2009, pp. 50 –58.
doi:10.1109/HIPC.2009.5433225.
[12] S. Suresh, V. Mani, S. N. Omkar, H. J. Kim, An equivalent network for divisible load scheduling in nonblocking mode of communication,
Computers and Mathematics With Applications 49 (10) (2005) 1421–1431.
[13] J. Jia, B. Veeravalli, D. Ghose, Adaptive load distribution strategies for divisible load processing on resource unaware multilevel tree networks,
IEEE T COMPUT 56 (7) (2007) 999–1005.
[14] A. Shokripour, M. Othman, H. Ibrahim, S. Subramaniam, A method for scheduling heterogeneous multi-installment systems, in: Lecture
Notes In Artificial Intelligence (LNAI), Vol. 6592, Springer, Berlin / Heidelberg, 2011, pp. 31–41.

