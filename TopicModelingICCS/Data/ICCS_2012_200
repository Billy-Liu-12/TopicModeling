Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 2004 – 2007

International Conference on Computational Science, ICCS 2012

Two-Stage Least Squares algorithms with QR decomposition for
Simultaneous Equations Models on heterogeneous multicore and
multi-GPU systems
Carla Ramiroa,1 , Jose J. L´opez-Esp´ınb , Domingo Gim´enezc , Antonio M. Vidala
a Departamento

de Sistemas Inform´aticos y Computaci´on, Universidad Polit´ecnica de Valencia, 46022 Valencia, Spain
de Investigaci´on Operativa, Universidad Miguel Hern´andez, 03202 Elche, Spain
c Departamento de Inform´
atica y Sistemas, Universidad de Murcia, 30071 Murcia, Spain

b Centro

Abstract
This paper analyzes the use of a multicore+multiGPU system for solving Simultaneous Equations Models by the
Two-Stage Least Squares method with QR decomposition. The combination of CPU and GPU allows us to reduce
the execution time in the solution of large SEM. When working on a heterogeneous system it is necessary to design
dynamic and hybrid algorithms to exploit the full potential of the machine but the heterogeneity makes it diﬃcult.
To obtain optimum performance, problems should be suitable and programming must be performed carefully. Our
contribution shows that we can eﬃciently exploit the resources of the machine even for dense linear algebra problems
of double data type where GPUs do not oﬀer good performance, as occurs in some highly optimized libraries that use
the hybrid programming CPU with GPU, such as CULA or MAGMA, where the speedup achieved is far from the
theoretical.
Keywords: Simultaneous Equations Models, Two-Stage Least Squares, QR decomposition, Parallel Computing,
Heterogeneous systems, GPU

1. Introduction
Simultaneous Equations Models (SEM) are a statistical technique which has traditionally been used in economics
[1] although nowadays it is widely used in an increasing number of ﬁelds [2, 3] and often in large scale problems. In
that case, the use of parallel computation and heterogeneous systems formed by multicores and GPUs is indispensable
due to the large amount of runtime required. SEM can be solved through a variety of methods such as Indirect Least
Squares (ILS), Two-Stage Least Squares (2SLS), Three-Stage Least Squares (3SLS), etc. 2SLS is one of the most used
methods because it can be used in all identiﬁed equations (ILS can be used only in a particular case of equations) and is
computationally less expensive than 3SLS [4]. The wide diﬀusion of multicore and Graphics Processing Units (GPU)
Email addresses: cramiro@dsic.upv.es (Carla Ramiro), jlopez@umh.es (Jose J. L´opez-Esp´ın), domingo@um.es (Domingo Gim´enez),
avidal@dsic.upv.es (Antonio M. Vidal)
1 Corresponding author

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.223

Carla Ramiro et al. / Procedia Computer Science 9 (2012) 2004 – 2007

2005

systems allows eﬃcient heterogeneous multicore+multiGPU algorithms of the 2SLsS method with QR decomposition
to be developed, so reducing the execution time of previous parallel implementations [4].
The rest of the paper is organized as follows. In section 2 the 2SLS method with QR decompositon is summarized.
Section 3 describes the model of the computational system considered. In section 4 the algorithms developed are
analyzed, and section 5 gives the experimental results. Finally, section 6 shows the conclusions of the paper.
2. Algorithms for SEM
Consider N interdependent endogenous variables which depend on K independent exogenous variables. Suppose that each endogenous variable can be expressed as a linear combination of the other endogenous variables, the
exogenous variables, and white noise that represents stochastic interference. The relation between the exogenous
and endogenous variables can be expressed through the following matrix equation, Y = YBT + XΓT + u, where
Y ∈ Rd×N , X ∈ Rd×K and u ∈ Rd×N are matrices, d is the sample size, and elements Bii = 0.
Solving a SEM is equivalent to obtaining B and Γ, from a representative sample of the model (a set of values of the
data variables X and Y) in order to explicitly ascertain a matrix equation which represents the relationship between
both sets of variables. This problem can be solved through 2SLS and the procedure is summarized in Algorithm 1
which shows a scheme for the 2SLS method with the QR decomposition (see [5] for a detailed description).
Algorithm 1 2S LS QR algorithm
Input: X ∈ Rd×K , Y ∈ Rd×N and zero pattern of B and Γ
Output: B ∈ RN×N and Γ ∈ RN×K
˜ such that X = QR (QR decomposition of X) and Y
˜ = QT Y
1: Obtain Q, R and Y
2: for i=1...N do
˜ i,1 ] ← Select columns from [R1 |Y
˜ 1]
3:
[Ri,1 |Y
˜
˜ iR
˜ T y˜ i,1
˜
˜
˜
˜ i,1 and y˜˜ i,1 = Q
4:
Obtain Qi , Ri,1 and y˜ i,1 such that [Ri,1 |Yi,1 ] = Q
i
˜ i,1 ηˆ i = y˜˜ i,1
5:
Solve R
6: end for

3. Heterogeneous computational models
One of the most decisive concepts for successfully programming a computer that uses GPU and multicore processors is the underlying model of the parallel computer. A realistic performance model should consider the host system
and graphic card as a whole, and the host computer as another parallel computer at the same level as the GPU. This
leads us to the heterogeneous parallel computer model. A similar model is used in [6], where the machine is a set of
computing elements with varying characteristics connected via independent links to a shared global memory. Performance and programming of this model depend on the type of parallel computer (MIMD for the CPU; SIMD for the
GPU), the diﬀerent clock speeds, the access time and the amount of memory in each memory class. A simultaneous
use of the GPU and CPU should be allowed (and even encouraged), and the performance obtained should be compared
when they act together and when eliminating the use of the GPU to solve a concrete problem. This approach is much
more realistic and is used, for example, in numerical linear algebra libraries.
4. Parallel Algorithms for 2SLS
Considering that most of the computational cost of Algorithm 1 relies on the calculation of one QR decomposition
for each equation, we analyze two diﬀerent possibilities of parallelization in a heterogeneous parallel computer.
4.1. Parallelism by equations
To solve the SEM problem we need to solve N independent equations, so we can parallelize their computation.
By using OpenMP API, we can create several threads. Some of these threads (depending on the number of GPUs
the platform has) can work in the GPUs and are responsible for transferring data to the GPU global memory and
processing the data back, while the other threads work on the CPU cores in parallel.

2006

Carla Ramiro et al. / Procedia Computer Science 9 (2012) 2004 – 2007

4.2. Parallel QR decomposition on GPU
To calculate the QR decomposition on the GPU, we have not used the available libraries, e.g. MAGMA [7] or
CULA [8], because these do not take into account the structure of the matrix. Therefore we have implemented a
parallel algorithm in CUDA, based on the triangularization of a matrix in NS sequential steps by using a parallel
scheme proposed in [9], which simultaneously nulliﬁes elements placed in several main diagonals. To calculate and
apply a number of Givens rotations simultaneously the rows involved must be disjoint. We can use Algorithm 2 with
˜ i,1 ], W ← y˜ i,1 to compute step 1 or step 4 of 2S LS QR algorithm.
Z ← X, W ← Y or Z ← [Ri,1 |Y
Algorithm 2 QR-SPAN computes the QR decomposition of a matrix Z and applies implicitly QT on another matrix W
Input: [Z | W]
Output: R, W
1: for s = 1, . . . , NS do
2:
Compute index rotations, row i and column j, needed for triangulation matrix Z for stage s in CPU.
3:
Copy index rotations from CPU main memory to constant memory in GPU and [Z | W] to GPU global memory.
4:
The threads of the GPU calculate in parallel the rotations for stage s and store them compactly [10, chap.5] at the bottom of
the matrix to minimize the memory requirements.
5:
The threads of the GPU apply in parallel the rotations calculated in the previous step to [Z | W]. One thread per row
reconstructs the compact rotation in shared memory for faster access. The rest of the threads apply this rotation in the row.
6: end for
7: Copy [R | W] from GPU global memory to CPU main memory

4.3. Implemented algorithms
Following the two schemes seen, we have implemented several algorithms. Let us suppose that the platform has
p CPU cores and n GPU installed. Then, the N equations can be distributed among p + n heterogeneous cores. In
the pCPU s version, each core always computes a QR decomposition with a sequential algorithm. However, in the
nGPU versions we can parallelize the computation of a group of QR decomposition in two ways: in nGPU(S ) each
GPU thread calculates a complete decomposition and in nGPU(P) all threads of GPU collaborate to compute a QR
decomposition by applying the QR-SPAN algorithm.
5. Experimental Results
The computer used in our experiments has two Intel Xeon X5680 hexacore processors at 3.33 GHz. It contains
two Nvidia Tesla C2070 GPU with 14 stream multiprocessors and each one includes 32 cores. The double precision
data used for evaluation have been randomly generated.
As it can be seen in Table 1 the results with 12CPUs are good, and programming is very simple, yet they are far
from the theoretical speedup. But, if we apply the same parallelization scheme (12CPUs+2GPU(S)) without taking
into account the speciﬁcities of the GPU, we get negative eﬀects on performance. The algorithm performs an excessive
number of memory accesses because there are many uncooperative threads that work simultaneously. Furthermore, a
higher CPU speed with regard to GPU also represents a problem if we try to compare performances of the algorithms
in CPU and GPU.
The use of the GPU as a standalone tool (nGPU(P)) provides beneﬁts but does not even reach the performance
obtained when using parallelism in the CPU. The use of two GPUs does not imply a ﬁfty per cent reduction in the
execution time, this is because the transferences to two GPUs do not overlap.
The best results are obtained when using the system as a single heterogeneous computer (pCPUs+nGPU(P)),
particularly for the case 10CPUs+2GPU(P). In this case, it was necessary to adapt the programming scheme to each
type of element in the computer, using a scheme similar to the 12CPUs algorithm for the CPU and a scheme similar
to the nGPU(P) algorithm for the GPU. For small sizes, better performances are obtained with a single graphic card.
Note that the use of the 12CPUs in 12CPUs+2GPU(P) and 12CPUs+2GPU(S) versions does not achieve better
speedups except for some small sizes. This is because two of these cores are busy sending and receiving data to and
from the GPU, and therefore remain occupied for some time.

2007

Carla Ramiro et al. / Procedia Computer Science 9 (2012) 2004 – 2007

Table 1: Execution time of 1CPUs, 12CPUs, 12CPUs+2GPU(S), 10CPUs+2GPU(S), 1GPU(P), 2GPU(P),
12CPUs+2GPU(P), 11CPUs+1GPU(P) and 10CPUs+2GPU(P). N, K and d variable.
N
K
d
1CPU s
12CPU s
12CPU s + 2GPU(S )
10CPU s + 2GPU(S )
1GPU(P)
2GPU(P)
12CPU s + 2GPU(P)
11CPU s + 1GPU(P)
10CPU s + 2GPU(P)

400
400
1000
6.08
0.76
0.99
0.93
5.70
3.74
0.90
0.69
0.74

400
400
1500
6.20
0.82
1.29
1.43
5.72
3.82
1.17
1.21
1.30

400
600
1000
13.56
1.44
2.23
2.13
10.96
8.36
1.72
1.54
1.60

400
600
1500
13.59
1.93
2.24
2.46
10.94
8.39
1.93
2.21
1.96

800
800
2000
87.77
10.19
12.47
12.60
47.54
32.42
9.25
11.01
9.04

800
800
2500
89.84
10.22
12.49
12.66
47.91
33.93
9.22
10.95
9.32

800
1000
2000
132.78
17.36
20.89
20.85
70.67
48.86
14.24
17.54
13.66

800
1000
2500
135.25
17.58
21.23
21.36
71.00
49.53
14.98
17.14
13.81

1000
1200
2500
213.40
28.61
41.38
33.84
100.97
68.30
29.23
25.30
20.84

1000
1200
3000
300.59
48.56
57.72
56.90
142.66
96.21
35.56
40.57
31.91

1200
1200
2500
483.29
75.43
90.98
87.62
189.77
130.53
50.47
61.60
47.43

1200
1200
3000
443.79
76.01
90.91
88.85
187.77
124.70
55.58
60.17
47.01

6. Conclusions
Eﬃcient algorithms for solving Simultaneous Equations Models have been developed. Computers with multicore+multiGPU architecture are useful when working with big models built from a set of lower dimension models.
For example, SEM for the economic variables in Europe can be obtained from the models of the diﬀerent countries
by adding some linking equations. So, the total model has a large number of variables. The world model (managed
by the LINK project [11]) includes the Spanish model and a set of equations to connect the Spanish variables with the
global ones.
We have shown that when we are working on a heterogeneous system it is necessary to design dynamic and
hybrid algorithms to exploit the full potential of the machine but the heterogeneity makes it diﬃcult. To obtain
optimum performance, problems should be suitable and programming must be performed carefully. For example, in
the problem studied, the QR-SPAN algorithm consumes a lot of time and the algorithmic structure does not allow
optimal parallelization, due to the lock-step that occurs in each stage. Even so, our contribution shows that we can
eﬃciently exploit the resources of the machine even for dense linear algebra problems of double data type where GPU
do not oﬀer good performance, as occurs in some highly optimized libraries that use the hybrid programming CPU
with GPU, like CULA or MAGMA, where the speedup achieved is far from the theoretical.
Acknowledgements
Supported by: Spanish Ministerio de Ciencia e Innovaci´on (Projects TIN2008-06570-C04-02, TEC2009-13741
and CAPAP-H3 TIN2010-12011-E), Universidad Polit´ecnica de Valencia (PAID-05-10), Fundaci´on S´eneca from
C.A.Regi´on de Murcia (08763/PI/08) and Generalitat Valenciana (project PROMETEO/2009/013).
References
[1] W. Greene, Econometric Analysis, 3rd Edition, Prentice Hall, 1998.
[2] R. Henry, I. Lu, L. Beightol, D. Eckberg, Interactions between CO2 Chemoreﬂexes and Arterial Baroreﬂexes, Am. Journal of Physiology
274 (43) (1998) H2177–H2187.
[3] W. Ressler, M. Waters, Female earnings and the divorce rate: a simultaneous equation model, Applied Economics 32 (2000) 1889–1898.
[4] J. J. L´opez-Esp´ın, A. M. Vidal, D. Gim´enez, Two-stage least squares and indirect least squares algorithms for simultaneous equations models,
Journal of Computational and Applied Mathematics (0) (2011) –. doi:10.1016/j.cam.2011.07.005.
[5] C. Ramiro, J. L´opez-Esp´ın, D. Gim´enez, A. Vidal, Parallel Two-Stage Least Squares algorithms for Simultaneous Equations Models on GPU,
Tech. rep. (2012).
URL http://hdl.handle.net/10251/14961
[6] G. Ballard, J. Demmel, A. Gearhart, Communication bounds for heterogeneous architectures., Tech. Rep. 239, LAPACK W.N (2011).
[7] S.Tomov, R.Nath, P.Du, J.Dongarra, http://icl.cs.utk.edu/magma.
[8] C. tools, www.culatools.com.
[9] A. Sameh, D. Kuck, On stable parallel linear system solvers, Journal of the ACM 25 (1) (1978) 81–91.
[10] G. Golub, C. V. Loan, Matrix Computations, The John Hopkins University Press, 1996.
[11] Project LINK Research Centre, www.chass.utoronto.ca/link.

