Advanced Bounded Shortest Multicast
Algorithm for Delay Constrained Minimum Cost
Moonseong Kim1 , Gunu Jho2 , and Hyunseung Choo1,
1

School of Information and Communication Engineering
Sungkyunkwan University, Korea
{moonseong, choo}@ece.skku.ac.kr
2
Telecommunication Network Business
Samsung Electronics, Korea
jhogunu@daum.net

Abstract. The Bounded Shortest Multicast Algorithm (BSMA) is a
very well-known one of delay-constrained minimum-cost multicast routing algorithms. Although the algorithm shows excellent performance in
terms of generated tree cost, it suﬀers from high time complexity. For
this reason, there is much literature relating to the BSMA. In this paper,
the BSMA is analyzed. The algorithms and shortcomings are corrected,
and an improved scheme is proposed without changing the main idea of
the BSMA.
Keywords: Multicast Routing Algorithm, Delay-Bounded Minimum
Steiner Tree (DBMST) Problem, and Bounded Shortest Multicast Algorithm (BSMA).

1

Introduction

Depending on the optimization goals, which include cost, delay, bandwidth,
delay-variation, reliability, and so on, the multicast routing problem exists at
varying levels of complexity. A Delay-Bounded Minimum Steiner Tree (DBMST)
problem deals with the minimum-cost multicast tree, satisfying the delay-bounds
from source to destinations. The Bounded Shortest Multicast Algorithm (BSMA)
is a routing algorithm which solves the DBMST problem for networks with asymmetric link characteristics [1,2]. The BSMA starts by obtaining a minimum delay
tree, calculated by using Dijkstra’s shortest path algorithm. It then iteratively
improves the cost, by performing, the delay-bounded path switching. The evaluation performed by the Salama et al. [3] demonstrates that the BSMA is one
of the most eﬃcient algorithms for the DBMST problem, in terms of the generated tree cost. However, the high time complexity presents a major drawback of
BSMA, because a k-shortest path algorithm is used iteratively for path switching. There are also several approaches to improve the time complexity of BSMA
[4,5]. However, among them, none can peer with the BSMA in terms of cost.
Corresponding author.
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 668–675, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Advanced BSMA for Delay Constrained Minimum Cost

669

The subsequent sections of this paper are organized as follows. In Section 2,
the BSMA is described. In Section 3, then the problems with the BSMA are
described and the fact that the BSMA can perform ineﬃcient patch switching
in terms of delays from source to destinations without reducing the tree cost,
are presented. A new algorithm is proposed, furthermore, to substitute for the
k-shortest path algorithm, considering the properties of the paths used for the
path switching. Finally, this paper is concluded in Section 4.

2

Bounded Shortest Multicast Algorithm

BSMA constructs a DBMST by performing the following steps:
1) Initial step: Construct an initial tree with minimum delays from the source
to all destinations.
2) Improvement step: Iteratively minimize the cost of the tree while always
satisfying the delay bounds.
The initial tree is minimum-delay tree, which is constructed using Dijkstra’s
shortest path algorithm. If the initial tree could not satisfy the given delay
bounds, some negotiation would be required to relax the delay bounds of DDF
(Destination Delay-bound Function). Otherwise, tree construction cannot succeed in satisfying the DDF .
BSMA’s improvement step iteratively transforms the tree topology to decrease
its cost monotonically, while satisfying the delay bounds. The transformation
performed by BSMA at each iteration of the improvement step consists of a
delay-bounded path switching. The path switching replaces a path in tree Tj by
a new path with smaller cost, resulting in a new tree topology Tj+1 . It involves
the following:
1) Choosing the path to be taken out of Tj and obtaining two disjoint subtrees
Tj1 and Tj2
2) Finding a new path to connect Tj1 and Tj2 , resulting in the new tree topology
Tj+1 with smaller cost, while the delay bounds are satisﬁed.
A candidate paths in Tj for path switching is called a superedge. Removing a
superedge from a multicast tree corresponds to removing all of the the tree edges
and internal nodes in the superedge. From the deﬁnition of a superedge [1,2], a
destination node or a source node cannot be an internal node of a superedge.
This prevents the removal of destination nodes or the source node from the tree
as a result of a path switching.
At the beginning of the improvement step, BSMA sets all superedges unmarked and selects the superedge ph with the highest cost among all unmarked
superedges. Removing the ph in Tj breaks Tj into two disjoint subtrees Tj1 and
Tj2 , where Tj = ph ∪ Tj1 ∪ Tj2 . A delay-bounded minimum-cost path ps between
Tj1 and Tj2 is used to reconnect Tj1 and Tj2 to obtain the new tree topology Tj+1 ,
where Tj+1 = ps ∪ Tj1 ∪ Tj2 . The cost of ps is not higher than that of ph .

670

M. Kim, G. Jho, and H. Choo

The search for the ps starts with the minimum-cost path between the two
trees. If the minimum-cost path results in a violation of delay bounds, BSMA
uses an incremental k-shortest path algorithm [6] to ﬁnd ps . The k-shortest
path problem consists of ﬁnding kth shortest simple path connecting a given
source-destination pair in a graph. k-shortest path in BSMA is k-minimum-cost
path between two trees and is equivalent to ﬁnding the k-shortest path between
the two nodes. Because BSMA uses a k-shortest path algorithm for the path
switching, its high time complexity is the major drawback. For this reason, the
improvement algorithms are proposed in [4,5]. While these reduce the execution
time, the performance loss in terms of tree cost is also happened.

3
3.1

Diﬃculties in BSMA
Undirected Graph Model for BSMA

It is not mentioned clearly in [1] whether the network model for BSMA is a
directed or an undirected graph. Although the ﬁgures in [1] implicate that it is
undirected, later version describing the BSMA [2] and other literatures [3,4,5]
related to the BSMA simulation state that the network is modeled as a directed
graph. But, we argue that it should be an undirected graph.

Fig. 1. A case that is able to happen at the step for delay-bounded path switching

The following case in Fig. 1 can be happened during the delay-bounded path
switching of BSMA and shows that there could be a problem. Fig. 1(a) shows
a tree Tj before the path switching, of which the highest cost superedge ph is a
path from s to r1 , as shown. There are two disjoint subtree Tj1 and Tj2 in Fig.
1(b) which are calculated by removing the highest cost superedge ph in Tj . At
this step of the path switching, a delay-bounded shortest path ps is searched.
By reconnecting the ps (Fig. 1(c)), Tj+1 is obtained.
As shown in the Fig. 1(c), Tj+1 is a wrong tree, because the source s cannot
send anything to destinations d1 and d2 using Tj+1 . To convert Tj+1 in Fig. 1(c)
to Tc in Fig. 1(d), that is what the algorithm wants, it must be guaranteed that
both path-delays and path-costs of the paths from r1 to r2 and from r2 to r3
are the same as those of paths from r2 to r1 and from r3 to r2 , respectively. If
the algorithm must guarantee this, it becomes overhead to check all the links
in a subtree without source s that is Tj1 or Tj2 at every step it performs the

Advanced BSMA for Delay Constrained Minimum Cost

671

path switching. Simultaneously it can severely reduce the possible cases that
can make the path switching as many as there are asymmetric links in the tree.
Of course, there is no routine to handle this case in BSMA. To avoid this and
to contribute to the main idea of the BSMA, the network model should be
assumed as the undirected graph. From now on, we use the undirected links, so
that (u, v) = (v, u) ∈ E with the same link-delay and link-cost values.
3.2

Meaning of ‘Unmark’ the Superedge

The issue of this subsection is about the superedge. There are ﬁve superedges
in Fig. 1(a), those are p(s, r1 ), p(r1 , d1 ), p(r1 , r2 ), p(r2 , d2 ), and p(r2 , d3 ). After
the path switching, there are diﬀerent superedges in Fig. 1(d), those are p(s, r3 ),
p(r3 , d3 ), p(r3 , r2 ), p(r2 , d2 ), and p(r2 , d1 ). You can see that the superedges change,
as the tree changes. The simple paths in Fig. 2(a), which redraws the Fig. 1(d), are
all superedges. The tree in Fig. 2(b) is the result by another path switching. And
the tree in Fig. 2(c) shows the same tree where the simple paths are all superedges.
s

r2

d1

simple path
source node
destination node
relay node

s

d2
(a)

ph

r3

d3

r2

d1

d2
(b)

ps

r3

s

d3

d1

d2

d3

(c)

Fig. 2. Changes of superedges as the tree changes

BSMA marks the highest-cost unmarked superedge ph when the superedge is
on path switching. If the ph is switched to a delay-bounded minimum-cost path
ps , BSMA unmarks all marked superedges [1,2]. If the ﬂag value of a superedge
is marked, it means there is no path to substitute for the superedge to reduce
the current tree Tj . When ph is switched to ps , the tree is changed from Tj to
Tj+1 . Of course, BSMA must recalculate the superedges in the new tree Tj+1
with initializing them as unmarked.
3.3

The Delay-Bounded Minimum-Cost Path ps and the Function
to Get the ps Between Tj1 and Tj2

According to [1,2], one of two cases must happen when the delay-bounded
minimum-cost path ps is obtained:
1. path ps is the same as the path ph ; or
2. path ps is diﬀerent from the path ph .
If the ﬁrst case occurs, the ph has been examined without improvement of the
tree cost. If the second case occurs, the tree Tj+1 would be more cost-eﬀective

672

M. Kim, G. Jho, and H. Choo

tree than Tj . But it is possible in the second case to generate the tree Tj+1 whose
cost is the same as that of Tj and end-to-end delay between a source and each
destination is worse than that of Tj . The former cost-eﬀective tree Tj+1 is what
the algorithm wants. But the latter tree is not. This is because a path with the
same cost as that of ph could be searched as ps .
s

s

ps

ph 3

r1
2

d1

2

r2
2

d2

3

r3
4

d3

(a) T0 : minimum-delay tree

r1
2

d1

2

r2
2

d2

3

8

r3
4

d3

(b) T1

Fig. 3. Ineﬀective path switching in terms of end-to-end delay without any improvement of tree cost

Fig. 3 shows the example for that. The values on the simple paths in the Fig. 3
are path-delays. The tree T0 in Fig. 3(a) is a minimum-delay tree generated by
using Dijkstra’s algorithm. So, it is sure that the end-to-end delays between the
source s and each destination d1 , d2 , and d3 are the minimum values. The tree
T1 in Fig. 3 (b) is a tree after the path switching. The ps is a simple path whose
path-delay is 8 and path-cost is the same as that of ph . As a result of the path
switching, BSMA generates the ineﬀective tree T1 in terms of end-to-end delay
without any improvement of tree cost.
If BSMA considers only whether the ps is equal to ph or not, this ineﬀective
path switching is always possible as long as there could be a path whose cost is
the same as that of ph while satisfying the delay-bounds. So BSMA must select
a path with smaller cost than that of ph , as the ps . (We must note here that the
ineﬀective path switching does not happen in BSMA based on greedy heuristic,
since it performs the path switching when the gain is larger than zero.)
Additionally, we need to think about the procedure to determine whether a
path is delay-bounded or not. Whenever BSMA ﬁnds the ps , it has to determine
whether a path is delay-bounded or not. That is to say, BSMA has to perform
one of the followings:
1. construction of a tree from Tj1 , Tj2 and a candidate path for ps , for every
candidate until ﬁnding the ps ; or
2. pre-calculation of end-to-end delays between a source and each destination
for all cases that the ps would connect Tj1 with Tj2 .
The total cost of a tree can be calculated without considering how the nodes
in the tree are connected by the links. Because it is the sum of link-costs in
the tree, we only need information about which links are in the tree and how

Advanced BSMA for Delay Constrained Minimum Cost
1

s

Connection
points

d4

w

r2
2

4
3

d1

d2

d3

(a) Tj1 and Tj2

(b) Candidate path for ps

673

Delay from source

d1

d2

d3

d4

s

r2

2+w

3+w

4+w

1

s

d1

w

5+w

6+w

1

s

d2

5+w

w

7+w

1

s

d3

6+w

7+w

w

1

d4

r2

3+w

4+w

5+w

1

d4

d1

1+w

6+w

7+w

1

d4

d2

6+w

1+w

8+w

1

d4

d3

7+w

8+w

1+w

1

(c) Pre-calculation

Fig. 4. Calculation of end-to-end delays in tree

much their costs are. But end-to-end delay between two tree nodes, such as a
source and a destination, is only able to be calculated after considering the tree
structure.
Fig. 4(a) shows subtrees on BSMA’s path switching and (b) is a candidate
path for ps . If the values on the simple paths in Fig. 4(a) and (b) are the pathcosts, the total cost of a tree Tj+1 (= Tj1 ∪ Tj2 ∪ ps ) would be determined when
the path-cost w of the candidate is determined (that is 1 + 2 + 3 + 4 +w), without
considering how the candidate connects Tj1 with Tj2 . But if the values indicate
the path-delays, it is impossible to determine the end-to-end delays between the
source s and each destination d1 , d2 , or d3 without considering the tree structures
of Tj1 and Tj2 .
Obviously there are two ways to determine whether the candidate is delaybounded or not; one is to construct the tree by connecting Tj1 and Tj2 with the
candidate; the other is to perform a pre-calculation such like Fig. 4(c). Of course,
both must consider the structures of two subtrees.
3.4

Ineﬃcient Use of k-Shortest Path Algorithm

As the literatures [4,5] mentioned, the k-shortest path algorithm [6] used for
ﬁnding the ps is the major drawback of BSMA. The time complexity of the
k-shortest path algorithm is O(kn3 ). The k value can be set to a ﬁxed value to
reduce execution time of BSMA. However this also reduces the performance of
BSMA in terms of generated tree cost. In this subsection we propose another
algorithm to substitute the k-shortest path algorithm. The proposed algorithm
ﬁnds candidate paths for ps within some path-cost range and does not deterorate
the performance of BSMA.
According to what we described in subsection 3.3, BSMA do not need the
paths whose costs are equal to or larger than that of ph while ﬁnding ps . And
obviously we cannot ﬁnd any path with smaller cost than that of minimum-cost
path calculated by Dijkstra’s algorithm. Consequently, candidate paths for ps
are the paths with the cost range that is equal to or larger than that of the
minimum-cost path and smaller than that of ph . The following is the pseudo
code of the proposed algorithm.

674

M. Kim, G. Jho, and H. Choo

Description for internal variables and functions
p[0..(|V | − 1)], q[0..(|V | − 1)]: an array containing the node sequence for a path
indexp : the index for p
costp : the path-cost of p
P : the set of searched paths
Q: queue containing paths on searching
PUSH(Q, p): insert p to Q
POP(Q): take a path out of Q
PROCEDURE PathSearch SameCostRange(Tj1 , Tj2 , minCost,maxCost,
G)
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21.
22.

P ← ∅, Q ← ∅;
for each node i ∈ Tj1 {
p[0] ← i, indexp ← 0, costp ← 0;
PUSH(Q, p);
}
while Q = ∅ {
p ← POP(Q);
for each neighbor node n of p[indexp ] {
if (n is in the array p) then continue;
\\ Because we are looking for simple paths
if (n ∈ Tj1 ) then continue;
\\ Because we are looking for paths between Tj1 and Tj2
if (costp + link-cost of (p[indexp ], n) ≥ maxCost) then continue;
q ← p, costq ← costp , indexq ← indexp ; \\ Copy p to q
q[indexq + 1] ← n;
costq ← costq + link-cost of (q[indexq ], n);
indexq ← indexq + 1;
if (n ∈ Tj2 AND costq ≥ minCost) then P ← P ∪ {q};
if (n ∈
/ Tj2 ) then PUSH(Q, q);
}
}
return P ;

Although a number of candidates for ps are searched, BSMA use only the
one satisfying the delay-bounds with smallest cost, that is ps . So BSMA do not
need to ﬁnd all the candidates at once. Therefore the arguments minCost and
maxCost are not minimum path-cost between Tj1 and Tj2 , and path-cost of ph ,
respectively. The half closed interval [minimum path-cost between Tj1 and Tj2 ,
path-cost of ph ) is divide into several intervals to be the minCost and maxCost.
BSMA iteratively increases the minCost and maxCost until either ﬁnding ps or
recognizing there is no path to substitute ph .
When the network size is large with many links, the memory required to
calculate the candidates is also heavy as well as the high time complexity. So, this
is quite practical and dose not provide any limitation to BSMA’s performance.
The diﬀerence between minCost and maxCost can be adjusted according to

Advanced BSMA for Delay Constrained Minimum Cost

675

characteristic of modeled link-cost. (i.e. If the link-costs is modeled as integer
values, minCost and maxCost can be the integer value x and x + 1, where x is
some starting point of divided interval and 1 stands for the characteristic.) In
the next section, the characteristic is notated as the sys.

4

Conclusion

BSMA is very well-known one of delay-constrained minimum-cost multicast routing algorithms. Although, its performance is excellent in terms of generated tree
cost, the time complexity is very high. There are many literatures related to
BSMA for this reason. We have shown that BSMA has fallacies and ambiguities
then, modiﬁed it. We start on the describing BSMA [2]. Then, we show that the
BSMA has fallacies, and that the BSMA can perform ineﬃcient patch switching
in terms of delays from source to destinations without reducing the tree cost.
Hence, we propose an algorithm to substitute for the k-shortest path algorithm
considering the properties of the paths which are used for the path switching.

Acknowledgment
This research was supported by the MIC(Ministry of Information and Communication), Korea, under the ITRC(Information Technology Research Center)
support program supervised by the IITA(Institute of Information Technology
Assessment), IITA-2006-(C1090-0603-0046).

References
1. Zhu, Q., Parsa, M., Garcia-Luna-Aceves, J. J.: A Source-Based Algorithm for DelayConstrained Minimal-Cost Multicasting. Proceeding of INFOCOM. IEEE (1995)
377-385
2. Parsa, M., Zhu, Q., Garcia-Luna-Aceves, J. J.: An Iterative Algorithm for DelayConstrained Minimum-Cost Multicasting. IEEE/ACM Transactions Networking,
Vol. 6, Issue 4. IEEE/ACM (1998) 461-474
3. Salama, H. F., Reeves, D. S., Viniotis, Y.: Evaluation of Multicast Routing Algorithms for Real-Time Communication on High-Speed Networks. Journal of Selected
Areas in Communications, Vol. 15, No. 3. IEEE (1997) 332-345
4. Gang, F., Kia, M., Pissinoul, N.: Eﬃcient Implementations of Bounded Shortest
Multicast Algorithm. Proceeding of ICCCN. IEEE (2002) 312-317
5. Gang, F.: An Eﬃcient Delay Sensitive Multicast Routing Algorithm. Proceeding
of the International Conference on Communications in Computing. CSREA (2004)
340-348
6. Lawler, E.: Combinatorial Optimization: Networks and Matroids. Holt, Rinehart
and Winston (1976)

