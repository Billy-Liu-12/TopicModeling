An Abstract Model for Service Compositions
Based on Agents
Jinkui Xie and Linpeng Huang
Dept. of Computer Science and Engineering, Shanghai Jiao Tong University,
Shanghai 200030, P.R. China
{jkxie, huang-lp}@cs.sjtu.edu.cn
Abstract. This paper presents an abstract model for service compositions based on agents. The model is based on distributed Abstract
State Machine and tallies with Universal Plug and Play (UPnP) architecture standard. In the abstract model, the composition of services can
be viewed as a union of agents. This model can be used to depict a number of Web Service applications, and as an instance, the paper presents
a BPEL Abstract Machine.

1

Introduction

This paper presents an abstract model for service compositions. The abstract
model constructs the whole service compositions system as a collection of communicating agent subsystems. Each subsystem’s communication structure is
analogous in the essence. The model is open and has a Universal Plug and
Play (UPnP) architecture [7]. We set up the model with distributed Abstract
State Machine, and give some descriptions to BPEL (Business Process Execution
Language for Web Services) [6].

2

Abstract State Machines

We ﬁrst deﬁne the notion of Abstract State Machines. For more details, we refer
to the Lipari-Guide [4] and the ASM 1997 Guide [5]. An Abstract State M achine
(ASM) is a tuple (Σ, ΦInit , T rans) where Σ is a signature, ΦInit is a set of Σformulas (the initial conditions), and T rans is a ﬁnite set of transition rules.
The set of states is the set Alg(Σ) of Σ-algebras; [[·]]q denotes the interpretation
function of symbols of Σ in Σ-algebra q. A state q is initial iﬀ q is a model of
ΦInit in the sense of logic, denoted as q |= ΦInit . In this article, we use ordersorted partial Σ-algebras.
For the service compositions’ purpose, we introduce A distributed ASM
(DASM) involves a collection of agents [3]. Agents are represented in global
states as well. They are elements of a dynamically universe Agent that may

This work is supported by ”SEC E-institute: Shanghai High Institutions Grid”
project 200308.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 1032–1035, 2005.
c Springer-Verlag Berlin Heidelberg 2005

An Abstract Model for Service Compositions Based on Agents

1033

grow and shrink. Intuitively, a run can be seen as the common part of histories
of the same computation recorded by various observers.

3

Service Compositions Based on Agents

Research in the Web Service model is a hot area. In our abstract model, Web
Service infrastructure can be divided into three layers: the Service Requestor
Layer, the Middle Agent Layer, and the Service Layer [1]. Moreover, in this system, the Agent category has three subcategories: the Service Requestor Agent
(SRA), the Service P rovide Agent (SPA), and the Coordination Agent (COA).
Among these subcategories, the agents are ﬂexible and can transform their roles
in the Web Service context, so the whole composition system is a Universal Plug
and Play (UPnP) architecture [7].

SRA

Service Requestor Layer

Middle Agent Layer

COA

SPA

Service

SPA

…

Service

Service Layer

Fig. 1. Agent-based service compositions framework

The agent-based service compositions framework is presented on Fig. 1. In
the model, there are three basic operations: (1) agent1 ◦ agent2 : it represents
a composite service that performs the service agent1 followed by the service
agent2 , i.e., ◦ is an operator of sequence. (2) agent1 + agent2 : it represents a
composite service that behaves as either service agent1 or service agent2 . Once
one of them executes its operation the other service is discarded, i.e., + is an
operator of choice. (3) agent1 agent2 : it represents a composite service that
performs the services agent1 and agent2 independently, i.e., is an operator of
concurrence.

4

Service Compositions Abstract Machine

Based on DASM, we can present a BPEL Abstract Machine. The BPEL (Business Process Execution Language for Web Services) builds on top of WSDL (and
indirectly also on SOAP) eﬀectively introducing a stateful interaction model that
allows to exchange sequences of messages between business partners (i.e. Web

1034

J. Xie and L. Huang
Inbox
Manager

Web Service
(BPEL)

Outbox
Manager

Fig. 2. High-level structure of the BPEL model

services) [6]. A BPEL document abstractly deﬁnes a Web service consisting of
a collection of business process instances. A process instance maintains a continuous interaction with the external world (i.e., the communication network)
through two interface components, called inbox manager and outbox manager
[2], as shown in Fig. 2.
domain AGENT ≡ INBOX MANAGER ∪ OUTBOX MANAGER ∪ PROCESS
∪ ACTIVITY AGENT ∪ HANDLER AGENT
In the initial DASM state, there are only three DASM agents: the inbox
manager, the outbox manager and a dummy process.
domain MESSAGE
inboxSpace: INBOX MANAGER → MESSAGE-set
InboxManagerProgram ≡
if inboxSpace(self) = φ then
choose p ∈ PROCESS, m ∈ inboxSpace(self)
with match(p, m) and waiting(p)
Assign Message(p, m)
if p = dummyProcess then
new newdummy : PROCESS
dummyProcess = newdummy
In general, a BPEL program combines two diﬀerent types of activities: basic
activities and structured activities.
RUNNING AGENT ≡ PROCESS ∪ ACTIVITY AGENT
startedExecution: PROCESS → BOOLEAN
suspended: RUNNING AGENT → BOOLEAN
ProcessProgram ≡
if ¬suspended(self) then
if ¬startedExecution(self) then
startedExecution(self) := true
suspended(self) := true
else
stop self
else
Execute Activity(activity(self))
ReceiveMode: RUNNING AGENT → BOOLEAN
waitingForMessage: PROCESS → RUNNING AGENT, ACTIVITY -set
Execute Receive(activity: RECEIVE) ≡
let inputDescriptor = self, activity
if ¬receiveMode(self) then

An Abstract Model for Service Compositions Based on Agents

1035

receiveMode(self) := true
add inputDescriptor to waitingSet
else
if inputDescriptor ∈
/ waitingSet then
receiveMode(self) := false
suspended(self) := false
where waitingSet = waitingForMessage(rootProcess(self))
A basic agent executes a single activity. Thus, its program is very similar to
a process agent.
BasicAgentPROGRAM ≡
if ¬suspended(self) and ¬startedExecution(self) then
startedExecution(self) := true
suspended(self) := true
if suspended(self) then
Execute Activity(baseActivity(self))
if ¬suspended(self) and startedExecution(self) then
remove self from compositionAgentSet(parentAgent(self))
stop self

5

Conclusions

In this paper, we introduce a distributed ASM (DASM) involves a collection of
agents, then provide an abstract service architecture based on agents, which is
open and universal. As an application, the paper presents a BPEL Abstract Machine. The proposed hierarchical abstract framework enhances the intelligibility
and integrality of the business process. The future work of the model will focus
on the complicated business interactions in the service.

References
1. V. Ermolayev, N. Keberle. Towards a Framework for Agent-Enabled Semantic Web
Service Composition, International Journal of Web Service Research, Volume X,
No. X, 2004.
2. R. Farahbod, U. Gl¨
asser and M. Vajihollahi. Speciﬁcation and Validation of the
Business Process Execution Language for Web Services, ASM 2004, LNCS 3052.
3. U. Gl¨
asser, Y. Gurevich and M. Veanes. An Abstract Communication Model, Microsoft Research Technical Report MSR-TR-2002-55, May 2002.
4. Y. Gurevich. Evolving algebras 1993: Lipari guide. In E. B¨
orger, editor, Speciﬁcation
and Validation Methods, pages 9-36. Oxford University Press, 1995.
5. Y. Gurevich. May 1997 draft of the ASM guide. Technical Report CSE-TR-336-97,
Univer-sity of Michigan EECS Department, 1997.
6. Speciﬁcation: Business Process Execution Language for Web Services, Version 1.1,
2003. http://www-106.ibm.com/developerworks/library/ws-bpel/
7. UPnP Device Architecture V1.0. Microsoft Universal Plug and Play Summit, Seattle
2000, Microsoft Corporation, Jan. 2000.

