Procedia Computer
Science
Procedia
Computer
(2012)1–9
1845–1853
Procedia
Computer Science
Science 001 (2010)
www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

ADIC2: Development of a component source transformation
system for diﬀerentiating C and C++
Sri Hari Krishna Narayanan, Boyana Norris
Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, IL, USA

Beata Winnicka
Bloomington, IN, USA

Abstract
We present a new tool, ADIC2, for automatic diﬀerentiation (AD) of C and C++ code through source-to-source
transformation. ADIC2 is the successor of the ADIC diﬀerentiation tool, which supports forward mode AD of C
and a small subset of C++. ADIC2 was completely redesigned and reimplemented as part of the OpenAD software
framework, resulting in a robust, ﬂexible, and extensible tool for diﬀerentiating C and some features of C++, with
plans for full support of C++ in the near future. We discuss some of the challenges in creating AD tools for C and
C++ in general and describe the component approach employed in the design and implementation of ADIC2.
Keywords: automatic diﬀerentiation, source transformation, ADIC2
c 201202.60.Cb,
⃝
Published02.70.Wz
by Elsevier Ltd. Open access under CC BY-NC-ND license.
PACS:
2010 MSC: 68N99

1. Introduction
Automatic diﬀerentiation (AD) [1] is a process for producing derivative computations from computer programs.
The resulting derivatives are accurate to machine precision with respect to the original computation and can be used
in many contexts, including uncertainty quantiﬁcation, numerical optimization, nonlinear partial diﬀerential equation
solvers, or the solution of inverse problems using least squares. Many tools provide AD for diﬀerent languages,
including Fortran, C, Matlab, and C++ (e.g., [1, 2, 3, 4]). AD tools generally adopt one of two implementation
approaches: operator overloading (in languages that support it) or source transformation. Operator overloadingbased tools are generally easier to implement, but because they rely on runtime evaluation of partial derivatives, the
ways in which the chain rule associativity can be exploited to attain better performing derivative code are limited.
Source transformation approaches can exploit static analysis over an entire program and thus can potentially produce
better performing derivative code. Source transformation-based AD has the same limitations as traditional compilers,
however, the diﬃculty of implementing parsing and analysis infrastructures for complex languages, as well as reliance
Email addresses: snarayan@mcs.anl.gov (Sri Hari Krishna Narayanan), norris@mcs.anl.gov (Boyana Norris)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.206

1846

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853
Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

2

on necessarily conservative static analysis (e.g., alias analysis in C or C++), which may lead to the generation of
suboptimal derivative code. In this paper we introduce ADIC2 [5], an AD tool that takes the source transformation
approach to provide diﬀerentiation capabilities for C and C++. ADIC2 is part of the OpenAD [6] project, which
includes the independently developed XAIFBooster [7] and OpenAnalysis [8] components.
The ﬁrst implementation of ADIC [3] generates derivatives for C code by using the forward mode of AD, with support for reverse mode at the statement level. In cases when the number of dependent variables is much smaller than the
number of independent variables, the reverse mode of diﬀerentiation can result in better-performing derivative code or
enable the solution of problems for which forward-mode AD derivatives are infeasible because of excessive memory
requirements or computational cost. Implementing reverse-mode diﬀerentiation is signiﬁcantly more involved, however, and was thus not completed in the ﬁrst version of ADIC. Furthermore, C++ support was very limited because of
the reliance on the Sage++ research compiler infrastructure, which did not provide robust support for C++.
ADIC2 builds on the successful design ideas of ADIC (e.g., the use of a language-independent intermediate
program representation and multiple independent diﬀerentiation modules) and addresses the challenges of parsing C
and C++ by leveraging the compiler infrastructure developed by the ROSE project [9, 10] at Lawrence Livermore
National Laboratory. ROSE adopted and signiﬁcantly extended the Sage++ research compiler infrastructure (used
in the ﬁrst version of ADIC) to create Sage III, a high-level abstract syntax tree (AST) representation that provides
extensive support for traversals and transformations. ROSE relies on the commercial C and C++ parsers developed
by the Edison Design Group (EDG) [11], which also underlie a number of commercial C++ compilers. EDG is the
only closed source ADIC2 prerequisite; however, ROSE includes a free binary distribution of EDG C/C++ parsers for
a number of platforms, ensuring continuous and robust parsing support for these languages. While some of the design
ideas are similar to those in ADIC, ADIC2 was completely reimplemented to use ROSE and interface to OpenAnalysis
program analysis algorithms and OpenAD diﬀerentiation modules. Before we discuss the implementation in more
detail, we present an example of derivative code produced with ADIC2.
Figure 1(a) shows an example input code that employs a pointer type, basic arithmetic, and a function call to
an intrinsic function. Any valid C and certain C++ features are also supported by ADIC2. Figure 1(b) shows the
forward-mode derivative code generated by ADIC2 (using the BasicBlockPreaccumulation XAIFBooster algorithm).
A driver program (not shown) contains initializations including setting up the independent variable (in this case, x)
and produces results shown in Fig. 1(c) comparing derivatives computed analytically, through divided diﬀerences with
a δh value of 0.001, and by using the ADIC2-generated code in Fig. 1(b).
Analogously, Fig. 2 shows the reverse mode derivative code generated by ADIC2 (using the BasicBlockPreaccumulationReverse XAIFBooster algorithm). The driver for the reverse mode diﬀers slightly from the one used for the
results in Fig. 1 in that the user must specify the dependent variable and extract the result from the gradient portion of
the independent variable. ADIC2 supports both scalar and vector diﬀerentiation modes.
2. Design and Implementation
ADIC2 is part of the OpenAD [6] project, which encompasses multiple, independently developed software components, including XAIFBooster [7], OpenAnalysis [8], and parsing and code generation support for Fortran, C, and
C++. Figure 3 illustrates the portions of the OpenAD infrastructure that are integrated in ADIC2. In the remainder of
this section we describe the ADIC2 implementation in order of the steps in a typical diﬀerentiation workﬂow.
2.1. Compiler Frontend: Parser and Analysis
As indicated in the ﬁrst step in Fig. 3, ADIC2 relies on the ROSE compiler framework to parse the input source
code and generate an abstract syntax tree (AST) consisting of Sage III nodes [9, 10]. ROSE provides access to
AST nodes through hierarchical traversals including TopDown, BottomUp, and TopDownBottomUp. Modiﬁcations to
existing nodes and addition of new nodes are possible during traversals. Nodes can be decorated with attributes that
persist between visits in a single traversal or multiple separate traversals. ADIC2 ﬁrst identiﬁes nodes of interest and
sets relevant attributes for them during a TopDownBottomUp traversal. For example, ADIC2 is concerned only with
nodes representing ﬂoating-point values. Therefore, it identiﬁes such nodes and sets an attribute to designate them as
diﬀerentiable. As another example, each scope statement (code contained within curly braces in C/C++) is assigned
a unique number to be used for identiﬁcation in later steps. One of the development challenges faced by ADIC2 is the

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853
Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

1847
3

(a) Original code:
# i n c l u d e <math . h>
v o i d f o o ( d o u b l e ∗y , d o u b l e x )
{
∗y = x + s i n ( x ∗ x ) ;
}

(b) Generated forward-mode AD code:
# include ” ad types . h”
# i n c l u d e <math . h>
v o i d a d f o o ( DERIV TYPE ∗y , DERIV TYPE ∗ x )
{
DERIV TYPE a d T e m p V a r p r o p 0 ;
double ad TempVaracc 0 ;
double ad TempVarlin 2 ;
double ad TempVarlin 1 ;
double ad TempVarlin 0 ;
d o u b l e ad TempVarSymbol 0 ;
d o u b l e ad TempVartmp 0 ;
ad TempVartmp 0 = DERIV val ( ∗ x ) ∗ DERIV val ( ∗ x ) ;
ad TempVarSymbol 0 = DERIV val ( ∗ x ) + s i n ( ad TempVartmp 0 ) ;
a d T e m p V a r l i n 0 = DERIV val ( ∗ x ) ;
a d T e m p V a r l i n 1 = DERIV val ( ∗ x ) ;
a d T e m p V a r l i n 2 = c o s ( ad TempVartmp 0 ) ;
DERIV val ( ∗ y ) = ad TempVarSymbol 0 ;
ad TempVaracc 0 = 1 + ( ad TempVarlin 0 + ad TempVarlin 1 )
∗ ad TempVarlin 2 ;
A D I C S e t D e r i v ( DERIV TYPE ref ( ∗ x ) , DERIV TYPE ref ( a d T e m p V a r p r o p 0 ) ) ;
ADIC Sax ( ad TempVaracc 0 , DERIV TYPE ref ( a d T e m p V a r p r o p 0 ) ,
DERIV TYPE ref ( ∗ y ) ) ;
}

(c) Results:

Analytic result is: [1.968912]
DD result is: [1.968997] error {-8.45e-05}
AD result is: [1.968912] error {0.00e+00}
Figure 1: (a) Example input code; (b) generated forward-mode diﬀerentiated code; (c) results obtained through diﬀerent diﬀerentiation approaches.

close coupling with the ROSE interfaces and implementation. Changes in ROSE can result in failures in ADIC2 that
can only be ﬁxed by pervasive updates. As ROSE matures, we expect that such updates will become easier and less
frequent.
ADIC2 also reads one or more conﬁguration ﬁles, in which users can specify various settings such as diﬀerentiation module parameters, inactive symbols (e.g., types, variables, or functions that do not lie on the computational
path between independent and dependent variables), and other parameters that are used to ﬁne-tune the diﬀerentiation
process. For example, users can supplement the analysis capabilities in ADIC2 (see Sec. 2.3) by explicitly indicating
that certain functions or types are inactive and thus improving the performance of the diﬀerentiated code.
2.2. Canonicalization
The principal function of the second phase (see arrow labeled with 2 in Fig. 3) of the ADIC2 workﬂow is to
modify diﬀerentiable variable declarations and references such that the Sage III AST can be interfaced eﬃciently with
other components of ADIC2. In addition, complex control ﬂow constructs are simpliﬁed for later stages through the

1848

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853
Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

4

(a) Generated adjoint code:
# include ” ad types . h”
# i n c l u d e <math . h>
v o i d a d f o o ( DERIV TYPE ∗y , DERIV TYPE ∗ x )
{
i f ( ( o u r r e v m o d e . p l a i n ) == 1 ) {
DERIV val ( ∗ y ) = DERIV val ( ∗ x ) + s i n ( DERIV val ( ∗ x )
∗ DERIV val ( ∗ x ) ) ;
}
i f ( ( o u r r e v m o d e . t a p e ) == 1 ) {
d o u b l e ad TempVartmp 0 ;
d o u b l e ad TempVarSymbol 0 ;
double ad TempVarlin 0 ;
double ad TempVarlin 1 ;
double ad TempVarlin 2 ;
double ad TempVaracc 0 ;
ad TempVartmp 0 = DERIV val ( ∗ x ) ∗ DERIV val ( ∗ x ) ;
ad TempVarSymbol 0 = DERIV val ( ∗ x ) + s i n ( ad TempVartmp 0 ) ;
a d T e m p V a r l i n 0 = DERIV val ( ∗ x ) ;
a d T e m p V a r l i n 1 = DERIV val ( ∗ x ) ;
a d T e m p V a r l i n 2 = c o s ( ad TempVartmp 0 ) ;
DERIV val ( ∗ y ) = ad TempVarSymbol 0 ;
ad TempVaracc 0 = 1 + ( ad TempVarlin 0 + ad TempVarlin 1 )
∗ ad TempVarlin 2 ;
ADIC push ( a d T e m p V a r a c c 0 ) ;
}
i f ( ( o u r r e v m o d e . a d j o i n t ) == 1 ) {
d o u b l e ad TempVarSymbol 1 ;
DERIV TYPE a d T e m p V a r p r o p 0 ;
ADIC ZeroDeriv ( DERIV TYPE ref ( a d T e m p V a r p r o p 0 ) ) ;
ADIC pop ( ad TempVarSymbol 1 ) ;
ADIC Saxpy ( ad TempVarSymbol 1 , DERIV TYPE ref ( ∗ y ) ,
DERIV TYPE ref ( a d T e m p V a r p r o p 0 ) ) ;
ADIC ZeroDeriv ( DERIV TYPE ref ( ∗ y ) ) ;
A D I C I n c D e r i v ( DERIV TYPE ref ( a d T e m p V a r p r o p 0 ) , DERIV TYPE ref ( ∗ x ) ) ;
ADIC ZeroDeriv ( DERIV TYPE ref ( a d T e m p V a r p r o p 0 ) ) ;
}
}

(b) Results:

Analytic result is: [1.968912]
DD result is: [1.968997] error {-8.45e-05}
AD result is: [1.968912] error {0.00e+00}
Figure 2: Generated reverse-mode diﬀerentiated code (a) and comparison with the analytic derivative and divided diﬀerences (b).

traversal of all the statements present in the top-level SgProject AST node that represents the entire source code. The
following list outlines the actions taken for a subset of the nodes of interest.
• Variable declaration. The type of all diﬀerentiable (i.e., ﬂoating-point) variables is converted to a new type,
DERIV TYPE, which is deﬁned in a header ﬁle automatically included in the diﬀerentiated code. For example,
one commonly used type is a struct containing a scalar ﬁeld for the original value and an array to hold the computed partial derivative values. For forward mode, the size of the array depends on the number of independent
variables in the code. The names of diﬀerentiable variables are preﬁxed with a user-deﬁned preﬁx that is usually
ad but can be customized by the user. Challenges in canonicalizing declarations include proper handling of

1849

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853

5

Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

Compiler Frontend:
C/C++ Parser
Application
Code

generates

ROSE/EDG

1
2

Canonicalization

updates

ADIC

ADIC
Driver

3
uses

Analysis

ROSE
(Sage III)

OA/UseOAROSE

Configuration
File

4

Analysis
Results

7

uses

uses

OA

5

6

AST

XAIF Generation
updates
ADIC

Compiler
Backend

XAIF
(XML file)

ROSE

Transformation
Algorithms

Derivative
Code

XAIFBooster
AD XAIF
(XML file)

Merge Differentiated
Code into AST
ADIC

Figure 3: Overview of the ADIC2 diﬀerentiation process. The sequence of steps is indicated by numbers embedded in arrows connected to the
corresponding components implementing them.

typedef statements and traversing type hierarchies, correctly identifying those that are relevant to diﬀerentiation.
• Function deﬁnition. Because C does not support struct return types, if a function returns a value of a diﬀerentiable type, a special variable ad var ret of type DERIV TYPE * is added to the function’s argument list, and
all return statements in the function deﬁnition are converted to assignments to *ad var ret.
• Function call. If the return value of a function is diﬀerentiable and assigned to a variable x, then &x is
added to the argument list of the function call to accommodate the change in the function declaration return
value described earlier. Scalar arguments of diﬀerentiable types are converted to references to pointers of

1850

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853
Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

6

DERIV TYPE.
• For loop. In order to simplify further phases, a dummy basic block is added immediately after the for loop
statement for use in later steps.
• If statement. The conditional expression is hoisted out of the statement and is assigned to a new Boolean
variable. In order to simplify further phases, a dummy basic block is added immediately after the conditional
statement.
2.3. Analysis
In the next step (see arrow labeled with 3 in Fig. 3) the canonicalized AST serves as input to OpenAnalysis, a
representation-independent program analysis toolkit [8, 12]. ADIC2 uses OpenAnalysis through the interface UseOAROSE [13], which provides program information to analysis algorithms without exposing them to the particulars of the
Sage III data structures. The analysis results are used to reduce the amount of code that is passed to the diﬀerentiation
algorithms later and to ensure the accuracy of diﬀerentiated code. Prior to diﬀerentiation, ADIC2 currently applies the
following analyses from OpenAnalysis: call graph and control ﬂow graph (CFG) construction, side eﬀects, def-use
and use-def chains, def-overwrite chains, and alias analysis. Activity analysis will be also integrated in the near future.
UseOA-ROSE connects ROSE and OpenAnalysis, and thus its implementation must track changes in both packages. Until recently, OpenAnalysis had been evolving rapidly in several development branches. To enable support for
reverse mode diﬀerentiation in ADIC2, we successfully merged some of these branches and continue to participate
in OpenAnalysis development, with the eventual goal of having the same OpenAnalysis algorithm implementations
used in the diﬀerent parts of the OpenAD framework.
2.4. XAIF Generation
In the next phase (see arrow labeled with 4 in Fig. 3), the OpenAnalysis results and AST information are merged
and expressed in the XML Abstract Interface Form (XAIF) [14, 15]. XAIF provides a language-independent representation of constructs common in imperative languages, such as C, C++, and Fortran. It also allows the embedding of
annotations or pointers back to the corresponding language-dependent AST node from which they were created. Constructs that are not used for the diﬀerentiation (transformation) can be included and designated as marked statements,
which are subsequently ignored (and preserved) by the transformation algorithms. These statements are also used to
delimit sequences of statements that must be transformed. Special constructs exist in XAIF to express OpenAnalysis
results.
The merging process involves iterating through OpenAnalysis data results and converting the associated Sage
III SgNodes into XAIF nodes. Special treatment of iterative and conditional statements is required because Sage
III, OpenAnalysis, and XAIF have diﬀerent representations for these structures. Expression statements in particular
require a traversal through the Sage III subtree rooted at the expression statement. The XAIF ﬁle is not generated
directly during the traversals; instead, a graph-based representation is ﬁrst created in memory and later traversed to
produce the XAIF ﬁles that serve as input to transformation algorithms.
2.5. Transformation Algorithms
ADIC2 next invokes XAIFBooster (or potentially any other transformation module that supports XAIF) to produce
a diﬀerentiated XAIF ﬁle (see arrow labeled with 5 in Fig. 3). Both forward and reverse modes of diﬀerentiation are
supported.
2.6. Merging of Diﬀerentiated Code into AST
The XAIF output generated by the transformation algorithms is parsed, and a corresponding graph-based representation is created by using an event-based (SAX2) XML parser (see arrow labeled with 6 in Fig. 3). The graph is
traversed once in a depth-ﬁrst manner; and at each node or edge, visitor methods are used to integrate the transformed
XAIF nodes into the Sage III AST. For example, in ADIC2, we use two visitors: one that converts the XAIF to Sage
III node and another to output the nodes for debugging purposes.
In forward-mode diﬀerentiation, the output of the transformation algorithms contains transformed expression
statements and marker statements that point to where the expression statements should be inserted into the ROSE AST.

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853
Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

1851
7

Often the transformed expression statements require the creation of new Sage III nodes that do not exist in the original
AST. In reverse-mode diﬀerentiation, marker statements are not available in the reversed computation generated by the
transformation algorithm. Therefore, ADIC2 has to create complete control ﬂow structures, including basic blocks, if
statements, and loop statements. One of the challenges is that the CFG elements in the XAIF schema do not directly
correspond to the data structures in the Sage III AST. Speciﬁcally, the XAIF does not have a concept of loop body,
conditional statement body or scope statement. Therefore, ADIC2 has to create and maintain additional information
and use logic outside that provided by the XAIF to create these structures correctly.
2.7. Compiler Backend
ADIC2 uses ROSE unparsing functionality to create the output code from the modiﬁed AST (see arrow labeled
with 7 in Fig. 3). ADIC2 provides runtime libraries and header ﬁles required for compiling the transformed code.
3. Related Work
As mentioned in Sec. 1, AD tools for C/C++ can be classiﬁed according to their implementation approach. One
method is to use C++ operator overloading, an approach adopted by a number of tools, including ADOL-C [16],
CppAD [17], FAD [18], FADBAD/TADIFF [19], FFADLib [20], and Rapsodia [21].
The diﬀerentiation approach used in ADIC2 is source-to-source transformation. In other words, the input source
code is transformed into a new code augmented with derivative computations. TAPENADE [22] is another source
transformation-based AD tool that diﬀerentiates C and Fortran programs by using a tool-speciﬁc language-independent
internal representation. Handling object-oriented input is stated as one of the eventual goals. It performs its parsing
and source analysis internally. TAC++ [23] is a source-to-source translator that supports both forward- and reversemode diﬀerentiation and is proposed as the C++ language counterpart of TAF. It can currently handle a number of C
features (e.g., variables of the type as scalar int and scalar double, arrays, typedef types, and pointer types). It also
supports basic arithmetic operations, intrinsic functions, control ﬂow statements, and function calls. It is not clear to
us at the time of this writing what C++ features are handled by TAC++.
ADIC2 diﬀers from other C/C++ source transformation-based AD tools in several ways.
• ADIC2 consists of a number of loosely coupled components, some of which are also used by OpenAD/F for
support of Fortran. The component design enables independent development of AD algorithms, languagespeciﬁc support, and program analyses.
• ADIC2 uses the XAIF language-independent intermediate representation, which is not tool-speciﬁc and thus
can be used to leverage any diﬀerentiation approach that can process XAIF as input and produce XAIF output.
• ADIC2 is based on robust compiler infrastructure, including the commercial EDG C/C++ frontend, which
ensures that all language features are parsed correctly.
While ADIC2’s support for C++ is not complete at present, it is under active development, with a focus on C++speciﬁc canonicalization and correct handling of templates.
4. Conclusions and Future Work
We have described the design and implementation of the ADIC2 system for diﬀerentiating C and C++ codes. As
part of the OpenAD project, we have developed an open-source C/C++ AD tool that shares a number of components
with its independently developed Fortran counterpart, OpenAD/F, including the OpenAnalysis language-independent
program analysis infrastructure. The modular design of the OpenAD infrastructure allows the reuse of program
analysis and diﬀerentiation modules. This enables access to new analysis and diﬀerentiation methods from diﬀerent languages without having to reimplement them. Furthermore, relying on robust external compiler infrastructure
ensures that few if any manual code modiﬁcations are required before a code can be diﬀerentiated.
ADIC2 has been successfully applied to several input codes. In one instance ADIC2 generated a diﬀerentiated ﬁle
that was around 15,000 lines long for an input ﬁle that was about 300 lines long. Similar to other source transformation
AD tools, the size of the code is not an important determining factor in whether it can be successfully diﬀerentiated

1852

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853
Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

8

or not, although very large source codes can present analysis challenges and thus lead to potentially less eﬃcient
derivative code. Harder to address challenges arise from the use of certain language features or the presence of
complex control ﬂow. ADIC2 can currently handle complex control ﬂows such as nested if and nested for statements,
function calls, and function pointers.
ADIC2 currently handles one input ﬁle at a time, but we plan to enable simultaneous diﬀerentiation of projects
containing multiple source code ﬁles as input. This capability would enable us to perform interprocedural analysis,
which would result in potentially more eﬃcient derivative code. At the same time, care must be taken to eﬃciently
handle much larger internal shared data structures and recognize the portions of the project relevant to ADIC2 based
on minimal user input. ADIC2 is also continuously being extended to handle more complex features of C++ (e.g.,
user-deﬁned templates and everything in the standard template library). By continuously expanding the number of
test codes and increasing the robustness of the implementation, we expect to be able to handle arbitrary C codes, and
many C++ features in the ﬁrst stable release planned for the summer of 2010. In the long term we also plan to explore
hybrid source transformation/operator overloading strategies for supporting C++ templated codes for which it may
not be possible to determine active types statically.
We are working on integrating activity analysis results into the XAIF input provided to transformation modules.
We will continue to explore diﬀerent analyses that can help generate more eﬃcient derivative code. For example, we
plan to integrate more accurate array section analysis (currently OpenAnalysis does not take array reference indices
into account in data ﬂow analyses).
In the next few months, we will apply ADIC2 to applications and compare the performance of the generated code
to that produced by other AD tools when possible. We are integrating ADIC2 into libraries such as PETSc [24], which
currently uses the ﬁrst version of ADIC to automatically provide Jacobians for applications involving the nonlinear
solution of partial diﬀerential equations [25].
Acknowledgments
This work was supported by the Oﬃce of Advanced Scientiﬁc Computing Research, Oﬃce of Science, U.S. Dept.
of Energy, under Contract DE-AC02-06CH11357. We thank Jean Utke of the University of Chicago for his invaluable
suggestions and help.
References
[1] M. Berz, C. Bischof, G. Corliss, A. Griewank (Eds.), Computational Diﬀerentiation: Techniques, Applications, and Tools, SIAM, Philadelphia, PA, 1996.
[2] J. Utke, OpenAD: Algorithm implementation user guide, Technical Memorandum ANL/MCS–TM–274, Mathematics and Computer Science
Division, Argonne National Laboratory, Argonne, IL (2004).
[3] C. H. Bischof, L. Roh, A. Mauer, ADIC — An extensible automatic diﬀerentiation tool for ANSI-C, Software–Practice and Experience
27 (12) (1997) 1427–1456.
[4] A. Griewank, On automatic diﬀerentiation, in: M. Iri, K. Tanabe (Eds.), Mathematical Programming: Recent Developments and Applications,
Kluwer Academic Publishers, Dordrecht, 1989, pp. 83–108.
[5] ADIC2 Web Page, http://trac.mcs.anl.gov/projects/ADIC/.
[6] OpenAD Web Page, http://www.mcs.anl.gov/OpenAD/.
[7] J. Utke, U. Naumann, M. Fagan, N. Tallent, M. Strout, P. Heimbach, C. Hill, C. Wunsch, OpenAD/F: A modular open-source tool for automatic diﬀerentiation of Fortran codes, ACM Trans. Math. Softw. 34 (4) (2008) 1–36.
doi:http://doi.acm.org/10.1145/1377596.1377598.
[8] M. M. Strout, J. Mellor-Crummey, P. Hovland, Representation-independent program analysis, SIGSOFT Softw. Eng. Notes 31 (1) (2006)
67–74. doi:http://doi.acm.org/10.1145/1108768.1108810.
[9] D. Quinlan, ROSE Web Page, http://rosecompiler.org.
[10] M. Schordan, D. Quinlan, A source-to-source architecture for user-deﬁned optimizations, in: JMLC’03: Joint Modular Languages Conference, Vol. 2789 of Lecture Notes in Computer Science, Springer Verlag, 2003, pp. 214–223.
[11] EDG C++ Front End, http://www.edg.com/index.php?location=c frontend.
[12] M. Strout, OpenAnalysis Web Page, http://openanalysis.berlios.de/.
[13] UseOA-ROSE Web Page, http://developer.berlios.de/projects/useoa-rose/.
[14] P. D. Hovland, U. Naumann, B. Norris, An XML-based platform for semantic transformation of numerical programs, in: M. Hamza (Ed.),
Software Engineering and Applications, ACTA Press, Anaheim, CA, 2002, pp. 530–538.
[15] XAIF Web Page, http://www-unix.mcs.anl.gov/xaif/.

S.H.K. Narayanan et al. / Procedia Computer Science 1 (2012) 1845–1853
Narayanan et al. / Procedia Computer Science 00 (2010) 1–9

1853
9

[16] A. Griewank, D. Juedes, H. Mitev, J. Utke, O. Vogel, A. Walther, ADOL-C: A package for the automatic diﬀerentiation of algorithms written
in C/C++, Technical Report, Technical University of Dresden, Institute of Scientiﬁc Computing and Institute of Geometry, Updated version
of the paper originally published in ACM Trans. Math. Software 22, 1996, 131–167 (1999).
[17] B. M. Bell, cppAD Web Page, http://www.coin-or.org/CppAD/.
[18] P. Aubert, N. Di C´esar´e, Expression templates and forward mode automatic diﬀerentiation, in: G. Corliss, C. Faure, A. Griewank, L. Hasco¨et,
U. Naumann (Eds.), Automatic Diﬀerentiation of Algorithms: From Simulation to Optimization, Computer and Information Science,
Springer, New York, 2001, Ch. 37, pp. 311–315.
[19] C. Bendtsen, O. Stauning, FADBAD, a ﬂexible C++ package for automatic diﬀerentiation, Technical Report IMM–REP–1996–17, Department of Mathematical Modelling, Technical University of Denmark, Lyngby, Denmark (Aug. 1996).
[20] I. Tsukanov, M. Hall, Fast forward automatic diﬀerentiation library (FFADLib): A user manual, Technical Report 2000-4, Spatial Automation
Laboratory, University of Wisconsin-Madison, http://sal-cnc.me.wisc.edu/publications/auto diff.html (December 2000).
[21] I. Charpentier, J. Utke, Fast higher-order derivative tensors with Rapsodia, Optimization Methods Software 24 (1) (2009) 1–14.
doi:http://dx.doi.org/10.1080/10556780802413769.
[22] V. Pascual, L. Hasco¨et, TAPENADE for C, in: Advances in Automatic Diﬀerentiation, Lecture Notes in Computational Science and Engineering, Springer, 2008, pp. 199–210, selected papers from AD2008 Bonn, August 2008.
[23] M. Voßbeck, R. Giering, T. Kaminski, Development and ﬁrst applications of TAC++, in: C. H. Bischof, H. M. B¨ucker, P. D. Hovland,
U. Naumann, J. Utke (Eds.), Advances in Automatic Diﬀerentiation, Springer, 2008, pp. 187–197. doi:10.1007/978-3-540-68942-3 17.
[24] S. Balay, K. Buschelman, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, B. F. Smith, H. Zhang, PETSc Web Page,
http://www.mcs.anl.gov/petsc (2009).
[25] P. Hovland, B. Norris, B. Smith, Making automatic diﬀerentiation truly automatic: Coupling PETSc with ADIC, in: P. M. A. Sloot, C. J. K.
Tan, J. J. Dongarra, A. G. Hoekstra (Eds.), Computational Science – ICCS 2002, Proceedings of the International Conference on Computational Science, Amsterdam, The Netherlands, April 21–24, 2002. Part II, Vol. 2330 of Lecture Notes in Computer Science, Springer, Berlin,
2002, pp. 1087–1096.

