Procedia Computer Science
Volume 29, 2014, Pages 2472–2482
ICCS 2014. 14th International Conference on Computational Science

Design Virtual Learning Labs for Courses in
Computational Science with use of Cloud Computing
Technologies
Alexey Dukhanov1, Maria Karpova1, Klavdiya Bochenina1
1

ITMO University, Saint-Petersburg, Russia
dukhanov@niuitmo.ru, 91ms91@gmail.com, k.bochenina@gmail.com

Abstract
This paper describes the approach to the design and imp lementation of a v irtual learning laboratory
(VLL) with the use of cloud co mputing technologies within the model of AaaS (Applicat ion as a
Service). The formal model of co mposite application and a set of learning models using cloud-based
VLL are proposed. The relation to learn ing objectives in accordance with the revised Bloo m's
taxono my was identified for each model. The software tool to auto mate the creation and configuration
VLL, based on the cloud computing platform CLA VIRE are presented. The paper ends with the
description of case study implementation with the use of the offered approach.
Keywords: Virtual learning lab, the AaaS model, cloud computing, workflow, learning models, learning
objectives

1 Introduction
The rise of eLearning technologies requires new forms and approaches to the design and creation
of digital educational resources (DER), including virtual learn ing labs (VLL), which allow carrying
out scientific experiments with the use of one or mo re p ieces of expensive elaborate equip ment and
software in the remote access mode. Put otherwise, the VLL can be considered as a supporting remote
access distributed hard-software co mplex which can simu late any objects and processes. Usually these
products contain application software and packages for nu merical simu lation of various processes,
data sources, results interpretation and visualizat ion means, unique and expensive equipment, and
other instruments for solving tasks usually in mult i- and trans-disciplinary scientific areas. The cloud
computing technologies can be considered as a perspective approach [1] for preparing DER. For DER
design automation the following models of cloud computing may be considered.
1.

2472

IaaS (Infrastructure as a Service). A un iversity’s computational infrastructure is
virtualized and shared for the purpose of solving internal tasks, includ ing special

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.231

Virtual Learning Labs in Computational Science Courses

2.
3.
4.
5.

A. Dukhanov, M. Karpova, K. Bochenina

software installation. This infrastructure may be used as a base for the creation and
deployment of VLL.
PaaS (Platform as a Serv ice). Virtualized resources with installed required packages are
shared, but DER applications are absent.
SaaS (Software as a Serv ice). The most common model of VLL representation is as a
web-service. The successful examples can be found in [2] and [3].
DaaS (Data as a Service). It is an additional model for provid ing data sources as a cloud
services.
HaaS (Hardware as a Service). Th is model is used for sharing unique equipment, e.g.
near-field scanning optical microscopes [4] through an appropriate interface.

The amount of interd isciplinary research areas and associated educational programs [5] is rising.
The design an inter(mult i)- or trans-disciplinary course (module) requires application software and
hardware in different scientific areas, wh ich are in d istributed heterogeneous computational
environment. The VLL should be presented to the end user (e.g. student) as a joint-free application
instead of the set of software and hardware. The most eligib le model of cloud computing for the
considered reasons is the model of AaaS (Application as a Service) [6]. Th is model allows us to create
and use composite applications (CA), which consists of interacting cloud services for solving co mplex
tasks: data source access, computer simu lation, results processing and analysis. The most popular
technique of CA representation is workflow formalism [7], which allows us to describe the
corresponding distributed process in terms of the directed graph. This paper offers the set models of
cloud VLL application with the use of the AaaS model [8].

2 Related works
The design and development of VLL for provid ing simple access to unique approaches and
technologies is presented in many works. Most of them deal with v irtual machines with installed
required applicat ion software and emu lators of special devices and equipment. The acc ess to these
mach ines is provided with the use of software like a remote desktop. For examp le, the virtual learning
laboratory for a Co mputer Forensics course is considered [9]. More than ten special applicat ions and
six devices were required for the design of this course. The authors of this wo rk were ab le to use a
virtual mach ine (server) running on a Windows 2003 Server, hard ware emu lators, and equivalents or
trial versions of software. Students are proposed to perform several labs outside of the virtual
considered environment. The authors of the paper [10] offer to apply WMware application for
virtualizing computer networks in the framework of Computer Networking Laboratories design.
Other works offer to use standard cloud decisions like GoogleDocs, iGoogle Gadgets, and original
instruments for the creation of personal v irtual learning environ ments (VLE) [11]. It is a very popular
approach because it does not require expensive resources and uses well-known cloud instruments.
An original approach is presented in [12], where the authors developed the architecture for the
integration of external tools in VLE. This architecture provides a creation VLE within well-known
learning management systems (LMS) with the use of external tools with a special p rogram interface
and tools adapters. It allo ws the user to integrate LMS in very popular instruments , such as Google
Documents [13], Dabbleboard [14], and Facebook Live Stream [15] thanks to separately developed
tools adapters. As a result, this architecture allo ws a user to apply any software, including unique
application packages, if the corresponding tools adapter exists. The presented demonstration [16]
shows that the creation of learning resources within Mood le with the use of “GLUE!” can take five
times less time than if it was done without “GLUE!”
As can be seen, the above mentioned works use some type of cloud technology. For examp le,
Co mputer Forensics Labs were developed with the use of IaaS, PaaS, and “GLUE!” – SaaS and HaaS

2473

Virtual Learning Labs in Computational Science Courses

A. Dukhanov, M. Karpova, K. Bochenina

(in the case of sharing hardware through an adapter) models. For training which requires the use of
unique and expensive equipment (or application software) it is necessary to create a virtual machine
and install hardware emulators (trial versions of application software) or to develop corresponding
tools adapters.

3 Features of the organization of Virtual Learning Labs with
the use of the AaaS model
Based on the AaaS model, VLL is presented as software, which operates in a distributed
computing environment. It can provide the following features:
1.
2.

3.
4.

5.

6.

CA Design and Execution support in a cloud co mputing environ ment. The CA is formed
with the use of different proven application packages ; therefore, the AaaS model is useful
for interdisciplinary researches.
The user does not have to install a special local client. An internet browser is enough for
working with VLL. A variety of packages is used for solving interdisciplinary problems.
Setup and maintenance of these software programs can be very d ifficult for a user. The
software developed in accordance with the model of AaaS solved this problem.
Intelligent users support. Self-study of the application package may be d ifficu lt,
therefore, the user often needs support while perfo rming a lab and durin g the whole
learning process.
Ensuring informat ion security within an open-circuit system (the features and location of
the prospective user are not defined). Protection against legit imate users , which have
authorized access to VLL resources but who may have the ability of unauthorized usage
of one or more application packages , is important.
The efficiency of the combined use of supercomputer’s resources and the resources of
grid and cloud computing environments. This feature enables a user to apply applica tion
packages which require unique computational resources and special software. The user
must be isolated from the layer of co mputational resources, and as a consequence
resource selection for solving particular tasks must be implemented automatically (fo r
e.g. minimizing cost or time of computing).
“Hot plug” of packages and computational resources. This “hot plug” does not require
hard efforts of users, such as package/resource developers and/or owners. This feature
makes VLL open, portable and scalable. When the package becomes a part of the VLL it
is not considered as a competitor and is annotated by the overall system of intelligent
support. The method of unified annotation of packages and resources is described in
section 6

The AaaS model attracts particular attention in the context of the development of interdisciplinary
researches. This model enables the user to design and use “Co mposite applications” (CA) – a co mplex
of interconnected cloud services which are oriented together to solve a whole prob lem. The workflowformalis m is the most well-known approach of CA-representation. This formalism describes
connections between particular operations in the distributed computational environment using the
notations of a directed acyclic graph. The co mplicated CA is created by means of existing software
and is executed in distributed resources of the cloud environment.

2474

Virtual Learning Labs in Computational Science Courses

A. Dukhanov, M. Karpova, K. Bochenina

4 The Formal model of the composite application
CA is represented by the WF model of the directed acyclic graph (DA G) whose nodes are data
processing units with the input and output parameters and arcs are the relat ionships between the nodes.
For examp le, a node may be the launch of the package, procedu re, node to vary parameters,
conditional branching, and cycle. Each node of co mposite applicat ion represents a tuple
Nl
Ins, P, Outs, F , where l 1..k , k - quantity of the WF nodes, Ins {Ii : i 0..nl  1, Ii  Id } –
the set of identifiers of input parameters of the unit, Outs {Oi : i 0..ml  1, Oi  Id } – the set of
identifiers of output parameters of the unit, P : Type( I 0 ) u ...u Type( I n ) o {true, false} – a set of all
identifiers of parameters), – the predicated defining entering of the given set of input values in the
feasible reg ion for a package (i.e. validating a correctness), Type : Id o B – the operator which
defines identifier type, F – the function translating transmitted input values into output values.
F : x : x  TypeI 0 u ...u Type I nl 1  P( x) o y  TypeO0 u ...u Type Oml 1 .

^ 





` ^ 



`

(1)

Relationships of two types between nodes can be set of data relations and control relations. Data
relation connects the output parameter of one unit to the input of another, and as a result the order of
execution of units is also set. Control of relationships explicitly sets an order of execution of units, and
this relationship is used as a base for build ing controlling constructions , such as condition, cycle, or
units of a variation of parameters. In general, the CA is a tuple Ins wf , Outs wf , N , D, C , where
Ins wf
Outs

^Ii | i

wf

0..n, Ii  Id `

^O j | j

–

0..m, O j  Id

`

a
–

set
a

set

of
of

identifiers
identifiers

of
of

input

the

output

WF
WF

parameters,
parameters,

^Nl | Nl : Node, l 0..k` – a set of the WF nodes (here Node – the WF node), D – a set of data
dependencies, C – a set of dependencies on control. In the proposed model the control relat ion is a
N

twain Child C , Parent C , Child C  N – a dependent node, and Parent C  N – a node on which
depends, thus Child C z Parent C . Data dependency is the trip le Child D , Parents D , Fconv , where
Child D 

 Ins N

i

 Outs wf – a dependent node, Parents D 

N i N

 Outs N

i

 Ins wf – a set of nodes on

N i N

D

which Child depends, Fconv – data conversion function. Data relation is set between each (one)
input parameter and several outputs:
Fconv : Type Parent 0D u ...u Type Parent zD o Type Child D , z













Parents D .

(2)

For whole WF or for each of its unit interpretations the Interpretation function can be introduced.
This function allows the user to transform a set of input data to a set of output data:
(3)
Interpretation(WF) : TypeI1 u ...u TypeI n  o TypeO1 u ...u TypeOm 

4.1 The model’s interpretation for VLLs
Exp ressions (1)–(3) can be used in both direct and reverse forms for the description of the
informat ion processes occurring while the trainee does the VLL. In particu lar, the direct form
reproduces user actions in the case of selecting and configuring the individual application -oriented
packages (1), co mbin ing them in CA (2), and can also start and perform the whole CA in a distributed
environment (3). One can notice that the function (2) makes the CA as a joint -free applicat ion for the
trainee. Inverse relationships can be interpreted as criteria for checking trainee act ions and their
success in the passing stages of VLL.

2475

Virtual
Learning Labs
in Computational
Science Courses
Virtual
Virtual Learning
Learning Labs
Labs in
in Computational
Computational Science
Science Courses
Courses

A.
Dukhanov, M.
Karpova, K.
Bochenina
A.
A. Dukhanov,
Dukhanov, M.
M. Karpova,
Karpova, K.
K. Bochenina
Bochenina

4.2
4.2 The model’s
model’s example
example
Let
us consider
the example
in terms
of the
model mentioned
above. Imagine
that we
have access
Let
Let us
us consider
consider the
the example
example in
in terms
terms of
of the
the model
model mentioned
mentioned above.
above. Imagine
Imagine that
that we
we have
have access
access
to
the
following
packages
for
(Error!
Reference
source
not
found.):
to
the
following
packages
for
(Error!
Reference
source
not
found.):
to the following packages for (Error! Reference source not found.):
1.
making of
a satellite image
and record
ing it
in the
spatial storage
in the
RAW fo
rmat ––
1.
1. making
making of
of aa satellite
satellite image
image and
and record
record ing
ing it
it in
in the
the spatial
spatial storage
storage in
in the
the RAW
RAW fo
fo rmat
rmat –
;
N
N11 ;;
N
1
2.
converting the
satellite image
in selected
standard format
(e.g. “png”-format)
– N
2.
N 22 ;;;
2. converting
converting the
the satellite
satellite image
image in
in selected
selected standard
standard format
format (e.g.
(e.g. “png”-format)
“png”-format) –– N
2
3.
processing
satellite
image
in
required
standard
graphics
format
(e.g.
identification
of
3.
3. processing
processing satellite
satellite image
image in
in required
required standard
standard graphics
graphics format
format (e.g.
(e.g. identification
identification of
of
;
cyclones)
–
atmospheric
N3 ;
atmospheric
cyclones) –– N
atmospheric cyclones)
N 33 ;
4.
visualization of
the results
of processing
(e.g. drawing
isobars) –– N
.
4.
4. visualization
visualization of
of the
the results
results of
of processing
processing (e.g.
(e.g. drawing
drawing isobars)
isobars) – N
N 44 ..
4

Figure
1: The
example of
workflow in
the terms
of formal
model
Figure
Figure 1:
1: The
The example
example of
of workflow
workflow in
in the
the terms
terms of
of formal
formal model
model

“knows”, where the
satellite image
is in
a RAW-fo rmat,
Suppose,
that the
second package
N 2 “knows”,
Suppose,
where the
the satellite
satellite image
image is
is in
in aa RAW-fo
RAW-fo rmat,
rmat,
Suppose, that
that the
the second
second package
package N
N 22 “knows”, where
recorded
by
the
first
package,
and
may
access
it
itself
and
convert
it.
Then
it
can
be
started
after
the
recorded
by
the
first
package,
and
may
access
it
itself
and
convert
it.
Then
it
can
be
started
after
recorded by the first package, and may access it itself and convert it. Then it can be started after the
the
complet
ion
of
the
first
package
(dependence
on
control).
The
third
package
uses
the
output
of
complet ion
ion of
of the
the first
first package
package (dependence
(dependence on
on control).
control). The
The third
third package
package uses
uses the
the output
output of
of the
the
complet
the
second
(data
second package,
package, and
and the
the fourth
fourth ––– the
the output
output of
of the
the third
third
(data dependencies).
dependencies). The
The process
process of
of solving
solving
second
package,
and
the
fourth
the
output
of
the
third (data
dependencies).
The
process
of
solving
the
problem of
of at
at mospheric
mospheric cyclones
cyclones identification
identification fro
fro m
m satellite
satellite images
images can
can be
be represented
represented as
as aaa WF,
WF,
the problem
problem
of
at
mospheric
cyclones
identification
fro
m
satellite
images
can
be
represented
as
WF,
the
I
,...,I
(including
shown
in
the
Figure
1.
This
WF
determines
four
identifiers
for
input
parameters
,...,I 44 (including
(including
shown in
in the
the Figure
Figure 1.
1. This
This WF
WF determines
determines four
four identifiers
identifiers for
for input
input parameters
parameters II11,...,I
shown
1
4
configuration
options for
packages; coordinates
of area,
that to
be photographed,
for the
first package,
configuration
configuration options
options for
for packages;
packages; coordinates
coordinates of
of area,
area, that
that to
to be
be photographed,
photographed, for
for the
the first
first package,
package,
- the visualized
visualized results of
of processing, O
- the image
image in
two identifiers
identifiers for output
output parameters (( O
two
O111 -- the
O222 -- the
the visualized results
results of processing,
processing, O
the image in
in
two identifiers for
for output parameters
parameters ( O
C
standard
format).
The
identifier
means
the
dependence
on
control
between
the
first
and
the
second
1
C
standard
format).
The
identifier
means
the
dependence
on
control
between
the
first
and
the
second
standard format). The identifier C11 means the dependence on control between the first and the second
packages
(the dotted
line in
the Figure
1). The
identifiers D
, D2 mean
the data
dependences between
packages
D111 ,, D
D22 mean
packages (the
(the dotted
dotted line
line in
in the
the Figure
Figure 1).
1). The
The identifiers
identifiers D
mean the
the data
data dependences
dependences between
between
N
N
packages
,, N
and
,, N
respectively.
2
3
3
4
N
N
N
N
packages
and
respectively.
packages N 22 , N 33 and N 33 , N 44 respectively.
D
1
D
If
D11 for
N 33 supports
If the
the node
node N
supports the
the same
same image
image format,
format, which
which the
the second
second package
package returns,
returns, then
then F
for
Fconv
N
If
the
node
3 supports the same image format, which the second package returns, then Fconv
conv for
D
N
(2)
is
the
identify
function.
Let
the
third
package
return
some
matrix,
and
package
requires
the
1
4
D1 (2)
N 4 requires
(2) is
is the
the identify
identify function.
function. Let
Let the
the third
third package
package return
return some
some matrix,
matrix, and
and package
package N
requires the
the
D
1
4
D
D22
MTrans
D
transposed
matrix.
Then
joint-free
relation
requires
the
function
,
where
F
MTrans
D
2
transposed
MTrans , where MTrans
conv
D 222 requires
transposed matrix.
matrix. Then
Then joint-free
joint-free relation
relation D
requires the
the function
function F
Fconv
conv MTrans , where MTrans
-- operator
of
transposition
of
matrices.
The
functions
(1)
and
(3)
are
described
in the
next section.
operator
of
transposition
of
matrices.
The
functions
(1)
and
(3)
are
described
- operator of transposition of matrices. The functions (1) and (3) are described in
in the
the next
next section.
section.

55 Learning
Learning models
models
Based
on formal
model (1)
- (3), there
are three
models of
learning, which
reflect approaches
to the
Based
Based on
on formal
formal model
model (1)
(1) -- (3),
(3), there
there are
are three
three models
models of
of learning,
learning, which
which reflect
reflect approaches
approaches to
to the
the
use
of
interdisciplinary
VLL.
use
of
interdisciplinary
VLL.
use of interdisciplinary VLL.

2476
2476
2476

Virtual Learning Labs in Computational Science Courses

A. Dukhanov, M. Karpova, K. Bochenina

1) Model "A": interpretation function (3) is applied to the WF as a whole ( Figure 2, a), and it is
assumed that the CA in the form of WF was previously created and debugged. The student receives
immed iate access to it without the ability to view and change internal structures in the implementation
VLL. This approach, with use of the integrated VLL with access to remotely executing application oriented packages, is used for training specialists. An advantage of the approach is the possibility of
the "seamless" comb ining of packages as a part of the CA wh ich allo ws a user to expand the range of
tasks and composition of operations of the virtual laboratory b ased on the same application-oriented
packages and computational resources.
2) Model " B": function of interpretation (3) is applied to WF in units, but the user cannot change
the WF structure. Figure 2, b shows the process of access to the internal structure of WF for the trainee
without the possibility of edit ing. Obv iously the output parameters of the given unit, denoted by the
symbol O, are the input parameters (marked with the symbol I) of the dependent unit. For instance, the
output parameter O1N1 of the unit N1 is also the input parameter I1N 3 of the unit N 3 . In such a mode
the step by step interpretation of the operation of WF and the monitoring of the intermediate
parameters is possible. In this model, except for functions (3) and (2) the function of the intermediate
interpretation of WF (4) on a node are implemented.

 

 

 

Debug Nl WF  : TypeI1 u ...u Type I n o Type O1Nl u ...u Type OmNl

where O Njl

,

(4)

j 1..m - the output parameter of a node (unit) N l .

Figure 2: Non-Editable Closed (a) and Opened (b) Workflow

This is the same situation when only the (1) function of interpretation, which is independent for
each of the informat ive units of WF, is under consideration. This approach is oriented on training in

2477

Virtual Learning Labs in Computational Science Courses

A. Dukhanov, M. Karpova, K. Bochenina

the application of indiv idual application-oriented packages, including preparat ion of input data, start
on execution, and the visualizat ion and interpretation of the results of computation (Figure 2, a). The
goal of this model is not so much the study of the interdisciplinary phenomena but the addition of
competences of the trainee by skills of using application-oriented packages, which are specific to a
particular subject area.
3) Model "C": (1)-(3) functions are applied sequentially to the separate units WF – applicationoriented packages, from the beginning to the end. In this case the trainee has an opportunity to
research the processes occurring in the interdisciplinary system step by step, analyze the output data of
each of the packages, and interpret their impact on the results of the subsequent computation. There
are additional actions over WF (adding addit ional units, variable researches, etc.), for obtaining
necessary data for research (Figure 3, a). Th is operation mode is preferable for VLL because it allo ws
the user to reproduce the "tangible" relationship between objects of research and their components.
Variable research on node N 3 returns as the results of operation parameters not with single values
and with sets of the values, the size of which is equal to the quantity of elements of a variation. In fig.



N

N

N



2a three elements of a variation are presented: O1N3 O1 3,1 , O1 3, 2 , O1 3,3 . This is the reason for
changing the description of the N 4 and N 5 nodes: in them the variable search is also defined by the
results of the N 3 node execution or is selected as one value fro m the received sets. The additional node
AN1 should also select one value from the received set or accept all values and do a variable search
afterwards. In the second case, the output parameter AO1AN1 is a set of three values.

Figure 3: Editable Workflow (a), Checking Workflow (b)

Automations of quality assessment of the performed VLL can be created/modified by trained WF
or can be implied with the special checking WF ( Figure 3, b). The trainee’s results of working with
VLL are gathered in archive I1 . Check parameters I 2 can be used if necessary. Node N1

2478

Virtual Learning Labs in Computational Science Courses

A. Dukhanov, M. Karpova, K. Bochenina

decompresses the archive and transfers to a checking node N 2 group of files. After the checking,
results are transferred to WF ( O1 ) and to a node of creation of a graphical representation of check
results.
For the analysis the consistency of models «А» - «C» we need to define measure of co mpetence,
developing with corresponding VLL (each type of VLL develop different range s of learning
objectives). The type of grade scales for competences depends on the chosen educational standards or
accepted learning theories. For instance, we have used revised Bloom’s taxonomy of learning
objectives [17] grading to find correspondences between them and learning models.
In our work, a co mpetence is represented by a set of learning outcomes correlated with VLL, that
can be grouped into modules (parts of educational course) correlated with learning objective s.
The model “A” helps to answer for the question “What will happen if…” in relat ion with
considered process with use of one package or closed workflow (retrieving, recognizing, in ferring,
comparing – Table 1). The model “B” includes properties of the model “A” and also allows to analy ze
the structure of process by preparing and execution related workflow (learning o bject ives “Apply” and
“Analyse”). The model "C" has the greatest range of the of the objectives descriptions, also including
checking intermediate results and reorganizing elements in the new structure WF (learning objectives
“Evaluate” and “Create”).
Learning
objectives
Remember
Understand

Apply
Analyze

Evaluate
Create

Objective Description
Retrieving, recognizing, and recalling
relevant knowledge from long-term
memory
Constructing meaning from oral, written,
and graphic messages through interpreting,
exemplifying, classifying, summarizing,
inferring, comparing, and explaining
Carrying out or using a procedure through
executing, or implementing
Breaking material into constituent parts,
determining how the parts relate to one
another and to an overall structure or
purpose through differentiating,
organizing, and attributing
Making judgments based on criteria and
standards through checking and critiquing.
Putting elements together to form a
coherent or functional whole; reorganizing
elements into a new pattern or structure
through generating, planning, or producing

Model A

Model B

Model C

+

+

+

+

+

+

+

+

+

+

+
+

Table 1: Learning objectives in relation to VLP learning models

Chosen model of the work with WF shows some student’s qualities like responsibility (e.g.
stimulat ion of in itiat ive responsibility by involvement of the trainee in the process of construction or
modification of WF), motivation and organizing skills.
The competences are interconnected and can be classified, thus , we can present it by DAG. For
each learning course in the co mpetence-oriented education (that is frequently used) a set of developing
competences, is defined. Thus , we can present educational process like a WF that consists of courses
and represents relations between competences. The course we can also present as WF, where part of
the educational WF is the learning objective oriented node module, and they are connected by a

2479

Virtual Learning Labs in Computational Science Courses

A. Dukhanov, M. Karpova, K. Bochenina

logical structure of the course by the teacher or expert. Each module contains VLL (or a set of them
organized in WF and connected by output and input data) – learning outcomes oriented unit.

6 Tool for automation of Virtual Learning Labs design
Implementation of VLP realizing learning models "A" – "C" is rather time-consuming as it
includes not only the creation of co mposite appendices, but also, first of all – deploy ment in the cloud
environment of required application packages. For the CLA VIRE p latform this process includes two
steps: installation of applicat ion packages on the computational resourc es in a cloud and their
registration in a database of the packages, including the description of different scenarios of use as a
part of the VLL. Fo r the description of scenarios we used the domain -specific language (DSL)
EasyPackage [8] based on the Ruby language. With this approach the same application package may
be represented in a "cloud" differently depending on the target audience. A package’s owner has the
ability to restrict usage’s options (e.g. for protection fro m unau thorized users, representation of demo
version of the package).
The intellectual editor is developed for the auto mation of the process of embedding packages in
CLA VIRE and the elimination of the need in the manual description of scenarios for their use in the
formal language – the CLA VIRE/PackageManager tool. It provides the interface of the designer,
which displays the packet description in the form of a set of fields, each of which describes the
corresponding attribute. This tool also provides editing of information about the attributes describing
the input and output data of the package and requires lexical and syntax parsing of the file with the
packet description. At the user's request for the creation of a new package’s description the complete
set of fields and attributes for filling is provided to the user and they are automat ically assigned access
rights to create a package. To debug and verify the working of the added package in CLA VIRE the
task-focused interface (TFI) technology is used.
Intelligent editor CLA VIRE/PackageManager is implemented in JavaScript and HTM L languages.
It can be used as a Web applicat ion via a standard Internet browser. For data transfer and requests the
JSON data interchange format is used.

7 Case study implementation
Using the considered approach we designed several case studies for the following e -learning
systems in Computational Science:
1.
2.
3.

E-learning complex “Computer simulation in nanotechnologies”;
E-Science center “Sociodynamics” ;
Case-study “Public Ground Transport Scheduling”

For the purpose of providing the above mentioned educational services to the users the web -portal
[18] was implemented, wh ich supports different kinds of learning materials , such as theoretical
informat ion, laboratory assignments, and video tutors and allows the students to construct and execute
the composite applications with the help of CLA VIRE tools. Note that all workflows’ execution
capabilit ies are fu lly availab le through a web interface (workflo ws – CA can be prepared as a script on
the EasyFlow DSL [8] with use of the CLAVIRE/ Ginger component - Figure 4).

2480

Virtual Learning Labs in Computational Science Courses

A. Dukhanov, M. Karpova, K. Bochenina

Figure 4: Workflow preparation (Case-study “Public Ground Transport Scheduling”)

Each learning system provides the user with abilities to run a separate package (e.g. for finding of
optimal route in some city or calcu lation of the mo lecular bonds’ energy), and to obtain the skills of
solving monodisciplinary tasks. Also, they allow the user to consider the existing CA or build his own
CA (e.g. the comp lex network modelling and information spread simulation and flash mobs
predictions) fro m packages fo r d ifferent scientific areas and obtain the advanced skills of solving
interdisciplinary problems.

8 Conclusions and future work
In this paper we proposed an approach for the design and implementation of virtual learn ing labs
for solving interdisciplinary problems with the use of co mputational resources and application
packages which are in the cloud of distributed computational environ ments. This approach does not
require additional efforts to obtain unique computational resources and the installation of special
software. The ability of the options’ restriction provides an opportunity for protection from an
authorized user (in the case of a legal user who attempts to apply the package not for its intended
purpose). Teachers, students, and experts do not have to install anything on theirs personal co mputers.
The web-browser is enough for working with VLL. Th is paper shows that with the use of VLL, which
is imp lemented in the framework of the mentioned approach, a teacher (expert) may evaluate the level
of a student's skills and knowledge.
In the future we are p lanning to develop a method for the design of educational courses with the
use of VLL. The method will be based on the above mentioned abilities of knowledge’ and skills’
evaluation.

9 Acknowledgement
This work was financially supported by the Government of the Rus sian Federation, Grant 074U01.

References
[1] C. Machielse, "Benefits of Using Cloud Computing to Prepare Your Lectures," LectureTools, 02
06 2011. [Online]. Availab le: http://info.lecturetools.com/blog/bid/33629/ 5-Benefits-of-Using-

2481

Virtual Learning Labs in Computational Science Courses

[2]

[3]
[4]

[5]

A. Dukhanov, M. Karpova, K. Bochenina

Cloud-Computing-to-Prepare-Your-Lectures. [Accessed 20 01 14].
J. A. Racoma, " Rocket Labs targets enterprise with virtual labs SaaS training p latform," e27, 29
04 2013. [Online]. Available: http://e27.co/rocket labs -targets-enterprise-with-virtual-labs-saastraining-platform/. [Accessed 29 01 2014].
"Virtual Labs," The Ministry of Human Resource Development (India), 2014. [Online].
Available: http://www.vlab.co.in/index.php. [Accessed 29 01 2014].
S.-Y. Yim, J. S. Kim, Y. H. Kim, C. C. Byeon, O. -H. Cha and M. S. Jeong, " Low-temperature
Near-field Scanning Optical M icroscope for UV-visib le Spectroscopy of Nanostructures,"
Journal of the Korean Physical Society, vol. 56, no. 3, pp. 717-720, 2010.
"Advisory Co mmittee: Ensuring A merica’s Co mpetit iveness," President’s Informat ion
Technology Advisory Committee, Washington, D.C., 2005.

[6] A. V. Boukhanovsky, V. N. Vasiliev, V. N. Vinogradov, D. Y. Smirnov, S. A. Sukhorukov and
T. G. Yapparov, "CLA VIRE: Perspective Technology for Second Generation Cloud Co mputing,"
Izvestiya VUZov. Priborostroenie, vol. 54, no. 10, pp. 7-13 (in Russian), 2011.
[7] F. P. Terpstra and P. Adriaans, "New directions in Workflo w formalisms," in Proceedings of the
UK e-Science 2007, Nottingham, England, 2007.
[8] K. V. Knyazkov, S. V. Kovalchuk, T. N. Tchurov and S. V. Maryin., "CLA VIRE: e -Science
infrastructure for data-driven computing," Journal of Computational Science, no. 3, pp. 504 510, 2012.
[9] W. Yao, C.-H. Chu, B. L. Li and Z. Li, "Designing a virtual lab fo r co mputer forensics," in
Proceedings of the 14th Colloquium for Information Systems Security Education , Maryland,
2010.
[10] W. Huisinga, R. Telg mann and M. Wulkow, "The virtual laboratory approach to
pharmacokinetics: design principles and concepts," Drug Discovery Today, vol. 11, no. 17/ 18,
pp. 800 - 805, 2006.
[11] M. Al-Zoube, "E-Learning on the Cloud," International Arab Journal of e-Technology, vol. 1, no.
2, pp. 58 - 64, 2009.
[12] C. A lario-Hoyos, M. L. Bote-Loren zo, E. Gó mez-Sánchez and J. I. Asensio-Pérez, " GLUE!: An
architecture for the integration of external tools in Virtual Learning," Computers & Education,
vol. 60, pp. 122 - 137, 2013.
[13] J. Strickland, "How Google Docs Works," Howsuffworks, 2008. [On line]. Available:
http://computer.howstuffworks.com/internet/basics/google-docs.htm. [Accessed 29 01 2014].
[14] AppAppeal, "Dabbleboard: Online Whiteboard Collaboration Tool," AppAppeal, 18 03 2010.
[Online]. Available: http://dabbleboard.appappeal.com/. [Accessed 29 01 2014].
[15] D. Reisinger, "Facebook launches live-streaming channel," CNet, 13 08 2010. [Online].
Available: http://news.cnet.com/8301-13506_ 3-20013636-17.ht ml. [Accessed 209 01 14].
[16] C. Alario -Hoyos, M. L. Bote-Lorenzo, E. Gó mez-Sánchez, J. I. Asensio-Pérez, G. Vega-Gorgojo
and A. Ruiz-Calleja, "Integration of External Tools in VLEs with the GLUE! Architecture: A
Case Study," in 21st Century Learning for 21st Century Skills Lecture Notes in Computer
Science, Saarbrücken, Germany, 2012.
[17] C. Munzen maier and N. Rubin, "Perspectives Bloo m’s Taxono my: What’s Old Is New Again,"
The eLearning Guild, Santa Rosa, CA, USA, 2013.
[18] "CLA VIRE - Cloud Solutiuons," 2013. [On line]. Available: http://clavire.ru/content/25/.
[Accessed 31 01 2014].

2482

