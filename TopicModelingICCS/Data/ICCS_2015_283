Procedia Computer Science
Volume 51, 2015, Pages 895–904
ICCS 2015 International Conference On Computational Science

Agent-Based Simulation for Creating
Robust Plans and Schedules
Peter Jankoviˇc1∗
ˇ
ˇ
Faculty of Management Science and Informatics, University of Zilina,
Zilina,
Slovakia
peter.jankovic@fri.uniza.sk

Abstract
The paper describes methods for constructing the robust schedules using agent-based simulation. The measure of robustness represents the resistance of the schedule to random phenomena
and we present the method for calculating robustness of the schedule. The procedure for creating the robust schedule combines standard solutions for planning and scheduling with computer
simulation. It is described in detail and allows creation an executable robust schedule. Three
diﬀerent procedures for increasing the robustness (by changing the order of allocation of resources, by changing a plan and increasing time reserves) are short explained. The presented
techniques were tested using real detailed simulation model of an existing container terminal.
Keywords: Simulation, robustness, schedules

1

Introduction

This paper follows-up previously published paper [4]. In last two years we have made many
changes in simulation program. Some solutions we have speed up and reconﬁgured (process for
creating a robust schedule), some evaluations are now more ﬂexible. In this paper we present
an agent-based architecture of the simulation model and the complete process for creating a
robust schedule. In this section we need to deﬁne some verbalises.
Exist many approaches for solving the problem of ﬁnding the optimal plan and the subsequent localization of resources for its provision. Standard approaches mainly focus on the
mathematical description of the problem. However, thus obtained plan has large limitations
because of stochastic character of many phenomena of the real world and its execution carries
the risk of failure.
In addition to the various speciﬁc requirements for plans and schedules, the requirement
on the robustness of the plan or schedule is important. Today, a large attention is given to
the problem of determination of robustness of a plan and its increasing. These schedules are
needed especially for rail and air transport, but also in manufacturing processes with the aim
to reduce downtime of machines in disorders.
∗ Corresponding

author

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.221

895

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

Figure 1: Agents used in the simulation model
Planning is in generally the process of creating a plan. The plan is a sequence of activities.
These activities must be applied so that the planning system is getting from the initial (default)
state to the terminal state (destination). In the real conditions, there are the mostly required
resources for the fulﬁlment of activities, without which it is impossible to carry out. Just
allocation of resources plays a key role in the practical application of the plan. This issue is
solved by scheduling.
In the case that there is already a plan, such as a sequence of activities, it is appropriate
to specify in what time will be diﬀerent activities performed. Scheduling means the assigning
of resources to activities in time. Activity is the basic technological operation, which is not
divided in partial technological operations. The resource is a device which is able to perform
one or several operations. In general, it is available a set of types of resources, while the number
of resources of a type is deﬁned for each type. Then, for each activity is deﬁned a set of needed
types of resources and their count. For example, for the start of the activity it is necessary to
have four staﬀ workers of type A, one crane and one car.

2

Agent-Based Simulation

The core of created application uses a hierarchical agent-based architecture. The architecture
is based on reactive agents. The agents allow us modelling the system so that its inner implementation approaches the real system. The behaviour of individual agents is described by
Petri nets. The ﬁgure 1 shows the whole structure of the agents which we have used for
creating microscopic simulation of container terminal. For creating a robust schedule, agents
”Planning and scheduling” and ”Collecting data for scheduling” are necessary. The ﬁrst one
896

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

provides preparing the simulation run, updating the schedule during the simulation and dividing the schedule into partially goals. Whole process described in section 4, is programmed in
this agent. This agent also changes time reserves for activities (described in section 5).
Agent ”Collecting data for scheduling” takes all data during the simulation run and creates
many statistics. These statistics are used for calculating the robustness (described in section
3) and also for checking if the simulated schedule is correct and satisﬁes all conditions.
On the scheme we can see also agents providing operations on the railway (”Rail operations”
with sub agents) and on the road (”Road operations”). Agent ”Resources” assigns all resources
for activities. Here are implemented strategies for changing the robustness of the schedule by
changing the order of allocation of resources which is shortly described in section 6.

3

Measurement and evaluation of robustness

We need to deﬁne a measure of robustness as a property of the schedule. This deﬁnition can be
found in our paper [4]. ”We need to compare two plans from the point of view of their resistance
to the ever changing realistic conditions. We will use short expression ”robustness” instead of
measure of robustness. An important part is the determination of the degree of robustness of
a schedule. Robust schedule is such a schedule, whose quality is not reduced during execution
(keeping in advance of known uncertainties). This property is expressed as the probability of
which the schedule will work without problems (for example delays of activities).
Robust schedule is the schedule, which has the required measure of robustness. The number
in the range will express the robustness of the schedule (0, 1 , and the smaller value will mean
smaller robustness of the schedule. Value zero is not used, because the schedule with zero
robustness would have to be unenforceable. The probability of failure of the schedule increases
with the decreasing robustness of the schedule. It does not mean, that the probability of
failure of the schedule with the robustness of 0.3 is 0.7. We created more complex solution
for measuring the robustness, which measure also delays of simple activities and prolonging
required duration of schedule. If we allow using zero as a minimum value of robustness, the
probability of failure schedule would have to be equal to one and thus the schedule would be
in one hundred percent non-executable. Perfectly robust schedule might not exist, but it may
be. Whether the schedule may have the robustness of equal to one depends on the character of
uncertainties of real environment. In the case that all parameters of the model are deterministic
and the schedule is correct, the measure of robustness is always equal to one.”

3.1

Calculation of robustness

It is impossible to calculate the robustness only on the basis of a single realisation of the
schedule. We need a large quantity of its execution in the random conditions to determine
the robustness. This is one of the reasons for which, the computer simulation is used in the
conditions with uncertainties. We use the agent-based simulation. If we can create a precise
agent-based computer model to simulate the schedule, we can obtain the necessary data using
experimental simulation runs. Now it is suitable to use the simulation technique of ”Monte
Carlo”. The idea is very simple. On the basis of many replications of the simulation run, we
can describe in detail the simulated system.
If we used for calculating robustness event-based simulation the possibility of changing the
plan is very diﬃcult. For the simulation is very suitable used agent-based simulation, which
allow create some agents only for collecting data for this calculation. The random environment
can cause, that the activity will not be able to start or to end in time. Let we know for each
897

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

activity the time of the latest necessary start and the end of working. In the case that one of
these times is not hold on, the activity will fail.
For each activity we can determine a probability of its failure. It is not only important that
a critical time has been exceeded, but especially how long it has been delayed. The weight of
failure must therefore be an extension of the execution. We have to deﬁne the variables that
will be used in calculating the robustness.
This presented evaluation now also incorporates a duration of the schedule and prolongations
of activities. It is necessary for calculation robustness in some cases. For example when we
create a schedule for one week for working container terminal, the duration of this schedule
can’t be more than one week.
R - robustness,
M D - the maximum required duration of the schedule,
M DC - the critical value of maximum required duration of the schedule,
Sj - start time of replication j,
Ej - end time of replication j, time of completion of the last activity,
Dj - duration time of replication j,
LSi - the time of the required latest necessary start of execution of activity Ai ,
wsi - the importance of compliance with the LSi for the activity of Ai ,
LEi - the time of the required latest necessary end of the activity Ai ,
wei - the importance of compliance with the LEi for the activity of Ai ,
SRij - the time of the real start of the execution of the activity Ai in replication j, if in
replication j the activity has started to carry out, otherwise it is equal to Ej ,
ERij - the time of the real end of the execution of the activity Ai in replication j, if in
replication j the activity has completed, otherwise it is equal to Ej ,
DSRij - the delay of the latest necessary start of activity Ai in the replication j,
DERij - the delay of the latest necessary end of activity Ai in the replication j,
P M DRj - the prolongation of the maximum duration of the schedule in the replication j,
DSRi - the average delay of the latest necessary start of activity Ai ,
DERi - the average delay of the latest necessary end of activity Ai ,
P M DR - the average prolongation of the maximum duration of the schedule.
For every replication we evaluate the duration and the prolongation of the maximum duration of the schedule.
Dj = Ej − Sj

(1)

P M DRj = max{0, Dj − M D}

(2)

Now we can evaluate what would be the average delay of the activity in the replication. If
some activity Ai starts before LSi the delay will be naturally equal to zero.
DSRij = max{0, SRij − LSi }

(3)

DERij = max{0, ERij − LEi }

(4)

On the basis of the average values of delay for a particular replication we will determine the
average delay of the activity.
1
DSRi =
m
898

m

DSRij ,
j=1

(5)

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

where m is the number of replications.
DERi =

1
m

m

DERij ,

(6)

P M DRj ,

(7)

j=1

where m is the number of replications.
P M DR =

1
m

m
j=1

where m is the number of replications.
Let us say the status of completion of replication j in the form of RCj , which is equal to one if
the replication is whole completed and equal to zero, if replication failed. For every replication
we deﬁne RCDj (prolongation of the maximum duration of the schedule after critical value
M DC in replication j), which is equal to zero, if P M DRj ≥ M DC otherwise is set to one. We
deﬁne M DCA, which is equal to zero, if P M DR ≥ M DC otherwise is set to one.
Let WD expresses the proportional weight to delay activities,WMDC for the weight of
the prolongation of the maximum duration after critical value, WMDCA for the weight of the
average prolongation of the maximum duration after critical value and WE for the weight of the
non-execution of the schedule. The value WD must be of the range (0, 1 , the values WMDC,
WMDCA and WE of the range 0, 1 . It must apply W D + W M DC + W M DCA + W E = 1.
Using the constants WMDC and WMDCA can be taken into account also requirements for
duration of the whole schedule.
The determination of robustness has been deﬁned after a careful consideration by the following formula:
⎛
⎜
R = WD × ⎜
⎝1 −

+ W M DC ×

n
i=1

2×
m
j=1

RCDj

m
+ W M DCA × M DCA,
+ WE ×

m
j=1

⎞
DERi × wei
⎟
n
⎟
m
⎠
j=1 Ej − Sj
n
i=1

DSRi × wsi
+
n

,

m
(8)

RCj

,
m
where n is the number of activities, m is the number of replications and wsi , wei are the weight
(importance) of the activity Ai expressed by the real number of range 0, 1 .
Using settings of importance for each individual activity and the constants of WD, WMDC,
WMDCA, WE it is possible to create parameters for calculating the robustness of whatever
schedule. This is very ﬂexible solution, that allows to optimize robustness of schedules in many
cases.

4

The methodology for the establishment of a robust
schedule

If we increase the measure of robustness of a schedule we will also increase the costs. In some
cases it is very diﬃcult to set the balanced value between costs and robustness. In a real
899

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

problem the robustness is the main attribute of the schedule and it is very important. Small
robustness can increase costs for penalties and these costs can be higher than costs for small
utilisation of resources. In this section we presented a complete solution how to increase the
robustness using computer simulation.

4.1

Create a robust schedule by using agent-based simulation

To get the initial plan it is possible to use much methods for planning, which do not calculate
with the possibility of random extension of the duration of activities. Duration of the activities,
however, it is necessary to appropriately set.
For changing the plan (order of activities) it is possible to use the standard planning methods. In practical use, however, it is not always possible. For example, the order in which the
activities have to be carried out is exactly given.
In the ﬁrst phase (ﬁgure 2) we need to check if the plan is executable. We change the plan
many times and we can select executable partly ﬂexible plan. From the quantity of replications
of simulation run will be but also the amount of information obtained, about the utilization
of resources and the behaviour of the entire system. After creating many replications, the
current (best) plan will exposure to thorough analysis again. This procedure is repeated until
the required criteria are not completed.
For checking the plan and calculating robustness we need precise results. Now it is very
suitable to create the agent-based simulation. Some agents can also be specialized for planning
and scheduling. During the simulation data can be analysed and when the problem is detected
the plan or schedule can be changed during the simulation. For example we can automatically
prolong time reserves for some activities, or release some resources when the deadlock is detected. Also the agent automatically changes order of resource allocation. Main advantage of
using agent-based simulation is the possibility to create a very precise microscopic simulation
model.
After the end of the ﬁrst phase of creation the robust schedule we are getting probably an
enforceable partly ﬂexible plan. In the next phase we create the schedule. We need to allocate
resources for all activities and to set their times. Now we can use standard scheduling methods
but it is better to use informations from the simulation and to create a new schedule with them.
The next step is very important if we optimise a large problem. Whole scheduling problem
is divided into a large number of smaller partial goals. For each of the obtained schedules are
then deployed the procedures, how to change its robustness. After changes and optimization
of a goal schedule is the entire schedule using the execution (simulation) authenticated and a
new goal is set. The main advantage of using this technique is to save memory and to speed
up the calculation. For simple schedules we can step this phase over and to work only with
whole schedule. We can also test the other requirement for the schedule. In this phase we also
calculate the robustness and we change it.
The robustness of the schedule may be modiﬁed:
• by changing the plan (the order of execution of activities),
• by changing the time reserves of activities,
• by changing the order of allocation of resources to activities.
After this we have probably executable robust schedule. Now we have to test in a real
condition. We can also use simulation but in this process it has to be the microscopic simulation.
We use the microscopic agent-based simulation model. If we detect a non-executable schedule,
900

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

Figure 2: The procedure of creating robust schedule using agent-based simulation

we start the whole process from beginning and we create the new plan. If the schedule is
executable, but some of required criteria do not satisfy, we only return to the phase before
division the whole problem and we can try it with some changes.
901

Agent-Based Simulation for Creating Robust Plans and Schedules

5

Peter Jankoviˇc

Changing the robustness of schedule by changing time
reserves

This section describes solution for increasing robustness by changing time reserves. From our
previous work we have to make some corrections. In this process it is very suitable to use
also priorities of activities. Increasing the time reserves of activities will the robustness of the
schedule increase. If the latest necessary start of execution of activity is missed (DSRi ) it
is possible to move this start to a later time. This is very simple solution, but it cause the
movement of the latest necessary end of the execution of next activities. If the latest necessary
end of activity is missed (DERi ), it is possible to move the end on a later time.
With the shift of times (increasing time reserves) it is possible to apply four basic procedures:
• prolonging the times of activities gradually from the beginning of the schedule,
• prolonging the times of activities for many selected activities at the same time,
• prolonging the times of activities in cooperation with users,
• prolonging the times of randomly selected activities.
To speed up procedure for prolonging time reserves, it is very suitable to change time reserves
for many activities at the same time. It is necessary to determine which activities we will move.
The times for average delay of action will be set (value DSRi and DERi ) and in one step we
will change time reserves for all activities with the delay. The new schedule will be tested. If
it does not meet the required measure of robustness, the whole process will be repeated with
smaller allowed average delay.
We can change the time reserves also for many random selected activities, but if we set same
probability for every activity, we will wait for solution a very long time. It is better to deﬁne
the probability of selection which depends on simulations results. For all activities, that this
delay exceed some critical value, we set the probability of selection. If user deﬁnes a priority for
activities (wsi and wei ) we can take it into account, otherwise we set them to one. Then the
probability Pi that any activity Ai will be chosen, can be determined according to the formula:
Pi =

DSRi × wsi + DERi × wei
.
n
i=1 (DSRi × wsi + DERi × wei )

(9)

where n is the number of activities, of which the average delay exceeds the set limit.

6

Changing the robustness of schedule by changing the
order of allocation of resources

If you change the order in which the resource is assigned to activities and the schedule is
changed, so will be also probably changed its robustness. Optimising the resource allocation
for the schedule can increase the robustness. It is necessary to change the order of allocation
in the smallest steps. In this way, we create a new schedule. Newly developed schedule will
be tested. After creating many replications and calculating the robustness we can say if this
change was useful. In this process we use the genetic algorithm.
For this phase we use a new way of incorporation the required resources for the activities in
the plan written by the net digraph. We do not present this solution in this paper [4].
902

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

Figure 3: The process of creating the robust schedule

7

Testing of presented methods

All the presented methods were tested on detailed microscopic agent-based simulation model
of existed container terminal, which we had created. All tests were made on the real data.
In the simulation model all processes were incorporated. In this section we will present only
procedures that can be practically used in the simulation model of container terminal. We
optimized allocation of locomotive and tracks for loading and unloading the trains. At the
beginning the software was ﬁlled with data according to requires of individual exporters, that
caused, it was not possible to complete a simulation run, due to deadlocks. For the user it
is extremely diﬃcult to establish how to change a departure time of trains, to larger time
reserve, to change the order of resource allocation, for creating a robust model. Here we used
the presented method. Constants W D and W E we set to 0.5. We do not use constants
W M DC and W M DCA (we set its to zero). After testing the initial schedule the robustness
0.499794244 was detected. It means that none replication was completed. The goals were:
to remove the least trains, to decrease the count of trains with delay more than ten minutes.
We want to maximize the robustness with the highest count of served trains in one week in
container terminal. The table 1 shows some of selected experiments. The experiment No. 1
shows the schedule optimization using prolonging starting times for many activities at once.
We do not change the plan, but with this procedure it is impossible to create an executable
plan (the robustness is only 0.4999961265). In experiments No. 2, 3, 4 we allow changing the
plan by removing some trains and we use the genetic algorithm for ﬁnding solution. We found
out that the gradually prolonging of time reserves from the beginning of the schedule is not
very useful. In the experiment No. 5, we did not allow changing the plan with removing some
trains, but we used designed algorithm for changing the order of resource allocation and the
genetic algorithm. It seemed to be a very good way how to create a robust plan. The presented
903

Agent-Based Simulation for Creating Robust Plans and Schedules

Peter Jankoviˇc

results conﬁrmed repeated experiments with other initial plans. The ﬁgure 3 shows the process
of experiment No. 4.
Results
No.

Removed
trains

Trains with
delay longer
than 10 min.

1
2
3
4
5

0
16
13
11
0

21
5
4
10
7

Robustness
0,4999961265
0,9997931874
0,9997997800
0,9998744644
0,9999510303

Prolonging the times of activities
On the
Mass
From
randomly
on the
the beginning
selected
selected
of the schedule
activities activities
No
No
Yes
No
Yes
No
No
No
Yes
Yes
No
No
No
No
No

Changing
the plan

Changing
the order
of allocation
of resources

No
Yes
Yes
Yes
No

No
No
No
No
Yes

Table 1: Results of selected experiments

8

Conclusions

The paper presents the complete solution for creating a robust schedule using agent-based simulation. The calculation of robustness is described in section 3. This method is fully parametrised
and with many parameters can be successfully used in wide spectrum of problems. How we
have showed in section 7 presented process is suﬃciently ﬂexible. All presented calculations
and methods we tested on microscopic simulation of container terminal.
In testing how to increase the robustness in container terminal we have found, that very good
method is changing only the resource allocation. If this method is not enough for obtaining the
schedule with required robustness, we can combine it with changing the plan (removing trains)
and prolonging time reserves of some activities.

8.1

Acknowledgments

This work was supported by the research grants VEGA 1/0518/15 ’Resilient rescue systems
with uncertain accessibility of service’ and VEGA 1/0339/13 ’Advanced microscopic modelling
and complex data sources for designing spatially large public service systems’.

References
ˇ Sadloˇ
[1] N. Adamko and L.
n. Aplik´
acia sieˇtov´
ych grafov v simulaˇcn´
ych modeloch ˇzelezniˇcn´
ych
uzlov. 2003.
[2] J. Bidot. A general framework integrating techniques for scheduling under uncertainty.
2005.
[3] M. P. J. Fromherz. Constraint-based scheduling.
[4] P. Jankoviˇc. Support for creating robust plans and schedules. Slovak University of Technology Press, 2012.
[5] K. Musselman, J. O. Reilly, and S. Duket. The role of simulation in advanced planning and
scheduling. Winter Simulation Conference, 2002.
[6] L. Peeters. Cyclic railway timetable optimization. 2003.
[7] P. Xuan. Techniques for robust planning in degradable multiagent systems.

904

