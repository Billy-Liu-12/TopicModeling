Procedia Computer Science
Volume 80, 2016, Pages 2147–2157
ICCS 2016. The International Conference on Computational
Science

A Riemannian Limited-Memory BFGS Algorithm for
Computing the Matrix Geometric Mean
Xinru Yuan1 , Wen Huang2 , P.-A. Absil2 , and K. A. Gallivan1
1

2

Department of Mathematics, Florida State University, FL, U.S.A.
ICTEAM Institute, Universit´e catholique de Louvain, Louvain-la-Neuve, Belgium.

Abstract
Various optimization algorithms have been proposed to compute the Karcher mean (namely the
Riemannian center of mass in the sense of the aﬃne-invariant metric) of a collection of symmetric
positive-deﬁnite matrices. Here we propose to handle this computational task with a recently
developed limited-memory Riemannian BFGS method using an implementation tailored to the
symmetric positive-deﬁnite Karcher mean problem. We also demonstrate empirically that the
method is best suited for large-scale problems in terms of computation time and robustness
when comparing to the existing state-of-the-art algorithms.
Keywords: Karcher mean, geometric mean, symmetric positive-deﬁnite matrices, Riemannian optimization, Limited-memory Riemannian BFGS method

1

Introduction

Symmetric positive-deﬁnite (SPD) matrices have become fundamental computational objects in
many areas. For example, they appear as diﬀusion tensors in medical imaging [8, 9, 23], as data
covariance matrices in radar signal processing [5, 19], and as elasticity tensors in elasticity [21]. In
these and similar applications, it is often of interest to average SPD matrices. Averaging is
required, e.g., to aggregate several noisy measurements of the same object. It also appears as
a subtask in interpolation methods, see for example [1].
n
n
Let S++
be the manifold of n×n SPD matrices. Since S++
is an open submanifold of the vecn
tor space of n × n symmetric matrices, its tangent space at point X—denoted by TX S++
—can
n
becomes a Riemannian
be identiﬁed as the set of n × n symmetric matrices. The manifold S++
manifold when endowed with the aﬃne-invariant metric, see [22], given by
gX (ξX , ηX ) = trace(ξX X −1 ηX X −1 ).

(1)

n
Given a collection of points {A1 , . . . , AK } on the Riemannian manifold S++
, their Riemannian center of mass—also termed Karcher mean in view of [18]—is the minimizer of the sum of

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.534

2147

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

Xinru Yuan et al.

squared distance
μ = arg min F (X), with F : Pn+ → R, X →
n
X∈S++

1
2K

K

δ 2 (X, Ai ),

(2)

i=1

where δ(p, q) = log(p−1/2 qp−1/2 ) F is the geodesic distance associated with Riemannian metric
n
(1). In [18] it is proved that function F has a unique minimizer. Hence a point μ ∈ S++
is
a Karcher mean if it is a stationary point of F , i.e., grad F (μ) = 0, where grad F denotes the
Riemannian gradient of F under metric (1).
n
in the
The Karcher mean has been recognized as one of the most suitable means on S++
sense that it satisﬁes all of the geometric properties given in the ALM list [4], which are known
to be important in practical applications, e.g. [6, 20, 21]. However, a closed-form solution for
problem (2) is unknown in general, and for this reason, the Karcher mean is usually computed
by iterative methods. A Richardson-like iteration is derived and evaluated empirically in [7],
and is available in the Matrix Means Toolbox.1 In fact, solving problem (2) can be considered
in the framework of Riemannian optimization (see, e.g., [2]), since it requires optimizing a
function on a manifold. This approach gave rise to several algorithms for the Karcher mean
computation. A constant stepsize steepest descent method with local convergence is proposed
in [3]. An adaptive stepsize selection rule based on the explicit expression of the Hessian of cost
function F and a Newton’s method are studied in [25]. Most recently, [17] presents a survey of
several optimization algorithms, including Riemannian versions of steepest descent, conjugate
gradient, BFGS, and trust-region Newton’s method. It is empirically demonstrated that the
steepest descent and conjugate gradient methods are the preferred choices for problem (2) in
terms of time eﬃciency. The beneﬁt of fast convergence of Newton’s method and BFGS is
nulliﬁed by the high computational costs of their iterations, which is especially as the size
of the matrices increases. There are however recently-developed general-purpose Riemannian
optimization methods that have not yet been exploited in the context of SPD Karcher mean
computation; this is the case for the limited-memory BFGS that is known to be particularly
eﬃcient in various contexts [15, 26].
In this paper, we exploit a limited-memory Riemannian BFGS (LRBFGS) method developed in [14] to compute the SPD Karcher mean. An abstract formulation of this method is
provided in [14, Section 5]. Its practical implementation, however, requires more work than
one might anticipate. This paper contributes a performance-driven development that turns
the abstract LRBFGS into a concrete and eﬃcient numerical algorithm for the SPD Karcher
mean computation. More speciﬁcally, the LRBFGS method involves manipulation of diﬀerential geometric objects on manifolds, such as tangent spaces, Riemannian metric, retraction,
vector transport, etc. We present an approach to produce eﬃcient numerical representations of
n
those objects on the manifold S++
. The techniques are also applied to our implementation of
Riemannian steepest descent and conjugate gradient methods. It is shown empiricially that the
LRBFGS method is best suited for computing the SPD Karcher mean when the size or number
of matrices increases.
This paper is organized as follows. Section 2 presents a brief analysis on the conditioning
of the problem. The LRBFGS method is stated in Section 3. Section 4 presents the implemenn
tation techniques for S++
. Numerical experiments are reported in Section 5.

1 http://bezout.dm.unipi.it/software/mmtoolbox/

2148

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

2

Xinru Yuan et al.

Conditioning of the sum of squared distances function

Methods such as BFGS that gather second-order information are expected to dramatically
outperform steepest descent methods when the Hessian of the objective function is very illconditioned at the minimizer. Indeed, steepest descent methods are notoriously slow in such
a situation due to the hemstitching phenomenon. In this section, we show that the condition
number of the Hessian of cost function F in (2) admits an upper bound that behaves like the
logarithm of the largest condition number of the data points. Hence a large condition number
cannot be achieved in practice for the Hessian of F . This result sheds new light on the ﬁnding
in [17] that BFGS and Newton’s method do not outperform the steepest descent approach.
Nevertheless, we will show numerically in Section 5 that LRBFGS tends to outperform steepest
descent and conjugate gradient methods in various situations.
Rentmeesters et al. [25] derived bounds on the eigenvalues of the Hessian of the squared
distance function fA (X) = 21 δ 2 (X, A). Notice that the Riemannian metric (1) is invariant
under the isometry y → L−1 yL−T where X = LLT , as is fA (X). As a result, without loss of
generality we can assume X = I. The bounds for the Hessian of fA (X) at X = I are given by,
see [25],
Hess fA (X)[ΔX, ΔX]
log κ
log κ
coth
,
(3)
1≤
≤
ΔX 2
2
2
where κ is the condition number of A and log stands for the natural logarithm.
We are interested in the conditioning of problem (2) at the minimizer, i.e., the Karcher
mean—denoted by μ—of data points {A1 , . . . , AK }. Again without loss of generally, we can
assume μ = I. Otherwise, we can “translate” the problem to identity using an isometry. It is
straightforward to generalize the bounds for the Hessian of our cost function F from inequality
K
1
(3) since F (X) = 2K
i=1 fAi (X). At the Karcher mean μ, we have, using the fact that
x coth(x) is strictly increasing and bounded by 1 + x on [0, ∞],
1≤

Hess F (μ)[Δμ, Δμ]
1
≤
2
Δμ
K

K
i=1

≤ max
i

log κi
coth
2

log κi
2

log κi
coth
2

log κi
2

≤1+

log(maxi κi )
,
2

(4)

where κi is the condition number of Ai . For example, assume that there is at least one very illconditioned point in set {A1 , . . . , AK }, with condition number 1010 . From (4) the upper bound
on the condition number of the Hessian at the minimizer is given by 1 + log(1010 )/2 ≈ 12.51.
Based on the discussion above, we conclude that we cannot expect a very ill-conditioned Hessian
at the minimizer in practice.

3

Brief description of limited-memory Riemannian BFGS

We start the description of the LRBFGS method—which we adapt to problem (2) in the next
section—by recalling its foundation, the RBFGS method. More details can be found in [14].
The methods proposed in [14] are retraction-based line-search methods, namely, the iterate xk
on the manifold M is updated by
xk+1 = Rxk (αk ηk ),

(5)

where R is a retraction on M, ηk ∈ Txk M is the search direction and αk ∈ R denotes the
stepsize. A deﬁnition of retraction appears in [2, Deﬁnition 4.1.1]. The search direction in (5)
2149

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

Xinru Yuan et al.

is ηk = −Bk−1 grad f (xk ), where Bk is a linear operator that approximates the action of the
Hessian on Txk M. More speciﬁcally, Bk requires a rank-two update at each iteration, see [14,
Algorithm 1] for the update formula. In addition, the RBFGS method requires the Riemannian
manifold M to be equipped with a vector transport T . A vector transport T : T M ⊕ T M →
T M, (ηx , ξx ) → Tηx ξx with associated retraction R is a smooth mapping such that, for all
(x, ηx ) in the domain of R and all ξx , ζx ∈ Tx M, it holds that (i) Tηx ξx ∈ TR(ηx ) M, (ii)
T0x ξx = ξx , (iii) Tηx is a linear map. Additionally, the RBFGS method in [14, Algorithm 1]
requires the vector transport, denoted by TS , to be isometric, i.e., gR(ηx ) (TSηx ξx , TSηx ζx ) =
gx (ξx , ζx ). Throughout the paper, we use the notation TS for isometric vector transport.
However, for large-scale problems, the RBFGS method may require excessive computation
time and storage space, since it stores and transports the linear operator Bk−1 as a dense matrix.
A well-known way to remedy this drawback is the limited-memory version of BFGS, which stores
only the m most recent rank-two updates of B. A Riemannian version of the limited-memory
BFGS was proposed in [14, Algorithm 2]. Our implementation depends on this algorithm. For
the SPD Karcher mean problem, we modify this version to use an alternate update from [13]
that allows the line search using the Riemannian Wolfe conditions to be replaced by the Armijo
line search used in [2, Algorithm 1]. For the readers’ convenience, the algorithm is given in
Algorithm 1.

4

Implementation

This section presents the implementation details of the required objects for LRBFGS on the
SPD Karcher mean computation problem, including a tangent vector, Riemannian metric,
vector transport, retraction, and Riemannian gradient of the objective function.

4.1

Representations of a tangent vector and the Riemannian metric

n
n
The tangent space to S++
at X can be identiﬁed as the set of symmetric matrices. Thus, S++
is a d-dimensional submanifold of an n2 -dimensional Euclidean space E, where d = n(n + 1)/2.
n
can be represented either by an n2 -dimensional vector in E, or
A tangent vector in TX S++
n
. The n2 -dimensional
a d-dimensional vector of coordinates in a given basis BX of TX S++
representation is called the extrinsic approach, and the d-dimensional one is called the intrinsic
approach. The computational beneﬁts of using intrinsic representation are addressed in [11, 12]:
(i) The Riemannian metric is reduced to the Euclidean metric. (ii) There exists an isometric
vector transport, called vector transport by parallelization, whose intrinsic implementation
is simply the identity. (iii) Working in d-dimensions reduces the computational complexity
of linear operations on the tangent space. However, the intrinsic representation requires a
basis of the tangent space, and in order to obtain the computational beneﬁts, it must be
orthonormal. Hence, if a manifold admits a smooth ﬁeld of orthonormal tangent space bases
with acceptable computationally complexity, the intrinsic representation often leads to a very
n
eﬃcient implementation. This property holds for manifold S++
as shown next.
n
The orthonormal basis of TX S++ that we select is given by BX = {Lei eTi LT : i = 1, . . . , n}∪
{ √12 L(ei eTj + ej eTi )LT , i < j, i = 1, . . . , n, j = 1, . . . , n}, where X = LLT is the Cholesky
decomposition, and {ei , . . . , en } is the standard basis of n-dimensional Euclidean space. It is
easy to verify the orthonormality of BX under Riemannian metric (1), i.e., BX BX = Id×d for
all X. (The notation a denotes the function a : TX M → R : v → gX (a, v), where g stands
for the aﬃne-invariant metric (1).) We assume throughout the paper that BX stands for our
n
n
selected orthonormal basis of TX S++
. Given ξX , ηX ∈ TX S++
, their intrinsic representations

2150

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

Xinru Yuan et al.

n
Algorithm 1: LRBFGS method on S++

1
2
3
4
5
6
7
8
9
10
11
12
13
14

n
; a Riemannian metric g; a retraction R; an
Input: K data points A1 , . . . , AK ∈ S++
n
; an integer m > 0, a
isometric vector transport T ; initial iterate x0 ∈ S++
required precision
k = 0, 0 < c1 < 1, 0 < β < 1, γ0 = 1, l = 0
Hk0 = γk id
q ← grad f (xk )
for i = k − 1, k − 2, . . . , l do
(k)
ξ ← ρi g(si , q)
(k)

q ← q − ξ i yk
end
r ← Hk0 q
for i = l, l + 1, . . . , k − 1 do
(k)
ω ← ρi g(yi , r)
(k)

r ← r + si (ξi − ω)
end
set ηk = −r
ﬁnd the smallest integer A ≥ 0 such that
f (xk+1 ) ≤ f (xk ) + c1 β A g(grad f (xk ), ηk ),
Set xk+1 = Rxk (c1 β A ηk ). If

grad f (xk+1 ) < , then break.

(k+1)

(k+1)

= grad f (xk+1 ) − Tαk ηk grad f (xk ),
(k+1) (k+1)
(k+1) 2
γk+1 = g(sk
, yk
)/ yk
ρk =
(k+1)
(k+1)
, yk
and ρk into storage and if k > m, then
16 Let l = max{k − m, 0}. Add sk
(k+1) (k+1)
discard vector pair {sl−1 , yl−1 } and scalar ρl−1 from storage; Transport
(k) (k)
(k)
(k) (k)
(k)
sl , sl+1 , . . . , sk−1 and yl , yl+1 , . . . , yk−1 from Txk Pn+ to Txk+1 Pn+ by T , then get
(k+1) (k+1)
(k+1)
(k+1) (k+1)
(k+1)
, sl+1 , . . . , sk−1 and yl
, yl+1 , . . . , yk−1
sl
17 k = k + 1, go to 2.
15

Deﬁne ρk = 1/g(sk , yk ), sk
(k+1) (k+1)
1/g(sk
, yk
),

= Tα k η k α k η k , y k

are uX = BX ξX and vX = BX ηX respectively. In practice, the d-dimensional representation of
n
is obtained by taking the diagonal elements of L−1 ξX L−T , and its
tangent vector ξX ∈ TX S++
√
upper triangular elements row-wise and multiplied by 2. The intrinsic representation of the
Riemannian metric (1) is then given by g˜(uX , vX ) := gX (BX uX , BX vX ) = uTX vX . A detailed
proof can be found in [11, Section 9.2.1].

4.2

Retraction and vector transport

The choice of retraction and vector transport is a key step in the design of eﬃcient Riemannian
optimization algorithms. The exponential mapping is a natural choice for retraction. When
n
is endowed with the aﬃne-invariant Riemannian metric (1), the exponential mapping is
S++
given by, see [10],
ExpX (ξX ) = X 1/2 exp(X −1/2 ξX X −1/2 )X 1/2 ,

(6)
2151

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

Xinru Yuan et al.

n
n
. In practice, the exponential mapping (6) is expensive to
for all X ∈ S++
and ξX ∈ TX S++
compute. More importantly, when computing the matrix exponential exp(B), eigenvalues of
matrix B with large magnitude can lead to numerical diﬃculties, such as overﬂow. Jeuris et
al. [17] proposed a retraction

1
RX (ξX ) = X + ξX + ξX X −1 ξX ,
2

(7)

which is a second order approximation to (6). Retraction (7) is cheaper to compute and tends
to avoid numerical overﬂow. Additionally, RX (ξX ) remains symmetric positive-deﬁnite for all
n
n
X ∈ S++
and ξX ∈ TX S++
.
Parallel translation is a particular instance of vector transport. The parallel translation on
n
is given by, see [10],
S++
TpηX (ξX ) = X 1/2 exp(

X −1/2 ηX X −1/2 1/2
X −1/2 ηX X −1/2 −1/2
)X
)X .
ξX X −1/2 exp(
2
2

(8)

Unfortunately, the implementation of parallel translation (4.2) is computationally expensive.
We will thus resort to another vector transport.
Recently, Huang et al. [12] proposed a novel way to construct an isometric vector transport,
n
n
and ξX , ηX ∈ TX S++
, the vector
called vector transport by parallelization. For all X ∈ S++
transport by parallelization is given by
T S η X ξ X = BY B X ξ X ,

(9)

where Y = RX (ηX ). In fact, the intrinsic representation of this vector transport is simply the
identity, i.e.,
(10)
TSd uX = uX ,
where TSd denotes the intrinsic approach of TS and uX is the intrinsic representation of ξX . The
derivation of (10) can be found in [11, Section 9.5.2]. Another possible choice for the vector
transport is the identity: TidηX (ξX ) = ξX . However, vector transport Tid is not applicable to the
LRBFGS method since it is not isometric under Riemannian metric (1). Our implementation of
LRBFGS for the SPD Karcher mean computation uses retraction (7) and the intrinsic approach
of vector transport (10).

4.3

Riemannian gradient of the sum of squared distances function

The Riemannian gradient of cost function F in (2) is given by, see [18],
grad F (X) = −

1
K

K

Exp−1
X (Ai ),

(11)

i=1

n
where Exp−1
x (y) is the log-mapping, i.e., the inverse exponential mapping. On S++ , the logmapping is computed as
1/2
Exp−1
log(X −1/2 Y X −1/2 )X 1/2 = log(Y X −1 )X.
X (Y ) = X

(12)

Note that the computational complexity of the Riemannian gradient is less than that conveyed in formula (12) since the most expensive logarithm computation is already available
from the evaluation of the cost function at X. Speciﬁcally, each term in (11) is computed as
1/2
−1/2
−1/2
−1/2
−1
− Exp−1
)X = log(XA−1
log(Ai
XAi
)Ai
X, and the
i )X = Ai
X (Ai ) = − log(Ai X
−1/2
−1/2
XAi
) is available from the evaluation of the cost function F (X).
term log(Ai
2152

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

5

Xinru Yuan et al.

Experiments

We compare the performance of the LRBFGS method described earlier and existing state-of-theart methods, including the Riemannian steepest descent (RSD) [2, Page 62], the Riemannian
conjugate gradient (RCG) [2, Algorithm 13], and the Richardson-like iteration (RL) [7]. In
particular, we use the implementation of the RL iteration in Bini et al.’s Matrix Means Toolbox.1
In our practical implementation, the stepsizes in LRBFGS and RSD are selected with a
line search method that satisﬁes the Armijo condition [2, Algorithm 1], with Armijo parameter
c1 = 10−4 , backtracking reduction factor γ = 0.25, and initial stepsize α = 2/(1 + L) as used
in [24] where L is the upper bound at the initial iterate deﬁned in inequality (4). The line
search procedure in RCG enforces the strong Wolfe condition [27, Algorithm 3.5] with constant
c1 = 10−4 and c2 = 0.999. In LRBFGS, we set the memory size m to 2. The d-dimensional
intrinsic representation is used for tangent vectors. Retraction (7) and the vector transport
by parallelization (10) are used. When the iterate is close enough to the minimizer (in our
experiments, when the norm of the Riemannian gradient is less than 10−4 ), in order to achieve
suﬃcient accuracy, we switch the line search procedure to another stepsize selection strategy.
For RSD and RCG, the choice of stepsize follows the rule introduced in [24, Section 3.6]. For
LRBFGS, the stepsize is set to 1. Our choice of the initial iterate is the Arithmetic-Harmonic
mean [16] of data points. We run the algorithms until they reach their highest accuracy.
For simplicity of notation, throughout this section we denote the number, dimension, and
condition number of the matrices by K, n, and κ respectively. For each choice of (K, n) and
the range of conditioning desired, a single experiment comprises generating 5 sets of K random
n × n matrices with appropriate condition numbers, and running all 4 algorithms on each set
with the initial iterate described earlier. The result of the experiment is the distance to the
true Karcher mean averaged over the 5 sets as a function of iteration and time. All experiments
were performed using MATLAB R2014b in standard double precision arithmetic on a MAC OS
X platform with a 1.8 GHz CPU.

5.1

Experiment design

When deﬁning each set of experiments, we choose a desired (true) Karcher mean μ, and conK
struct data matrices Ai ’s such that their Karcher mean is exactly μ, i.e., i=1 Exp−1
μ (Ai ) = 0
holds. The beneﬁts of this scheme are: (i) We can control the conditioning of μ and Ai ’s, and
observe the inﬂuence of the conditioning on the performance of algorithms. (ii) Since the true
Karcher mean μ is known, we can monitor the distance δ between μ and the iterates produced
by various algorithms, thereby removing the need to consider the eﬀects of termination criteria.
Given a Karcher mean μ, the Ai ’s are constructed as follows: (i) Generate Wi in Matlab,
with n the size of matrix, f the order of magnitude of the condition number, and p some number
less than n,
[O , ~] = qr ( randn ( n ) ) ;
D = diag ([ rand (1 , p ) +1 , ( rand (1 ,n - p ) +1) *10^( - f ) ]) ;
W = O * D * O ’; W = W / norm (W ,2) ;
(ii) Compute ηi = Exp−1
μ (Wi ). (iii) Enforce the condition
i=1 ηi = 0 on ηi ’s. Speciﬁcally,
we test on data sets with K = 3, 30, 100. In the case of K = 3, we enforce η3 = −η1 − η2 .
When K = 30 or K = 100, let ki = 5(k − 1) + i for 1 ≤ k ≤ K/5 and 1 ≤ i ≤ 5. We
5
enforce ηk4 = −ηk1 − 0.5ηk3 and ηk5 = −ηk2 − 0.5ηk3 , which gives i=1 ηki = 0, and thus
K/5
5
i=1 ηki = 0. (iv) Compute Ai = Expμ (ηi ).
k=1
K

2153

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

Xinru Yuan et al.

Note that instead of producing ηi directly, we produce Wi ﬁrst and obtain ηi from the logmapping, since this procedure gives us greater control over the conditioning of data points. As
discussed in Section 2, we can take the Karcher mean μ as the identity matrix in numerical
experiments, so we “translate” the data set {μ, A1 , . . . , AK } to {I, L−1 A1 L−T , . . . , L−1 AK L−T }
using an isometry, where μ = LLT as the ﬁnal step.

5.2

Numerical results

We now compare the performances of all 4 algorithms on various data sets by examining performance results from representative experiments for various choices of (K, n) and conditioning.
The Matlab code used to the ﬁgures is available from http://www.math.fsu.edu/~whuang2/
papers/ARLBACMGM.htm.
Figure 1 displays the performance results of diﬀerent algorithms running on well-conditioned
data set with small K and n. Speciﬁcally, we take K = 3, n = 3, and 1 ≤ κ(Ai ) ≤ 10. It is
seen that LRBFGS converges the fastest in terms of number of iterations, but is outperformed
by RL in terms of computation time. Note that our LRBFGS Matlab library is designed to
be user friendly, hence for small-scale problems, the Matlab library machinery dominates the
computation time. Thus the ﬁndings on small-scale problems may be quite diﬀerent if Matlab
is replaced by a compiled language such as C++. This is no longer the case for the large-scale
problems considered next, as it is then the BLAS calls that dominate the computation time.
Figure 2 and Figure 3 report the results of tests conducted on data sets with large
K (K = 100, n = 3) and large n (K = 30, n = 100) respectively. Note that when n = 100,
n
is d = n(n + 1)/2 = 5050. In each case, both well-conditioned
the dimension of manifold S++
and ill-conditioned data sets are tested. From Figure 2 and Figure 3, we observe that LRBFGS
outperforms the state-of-the-art algorithms in term of computation time and number of iterations per unit of accuracy required. On a well-conditioned data set, RSD, RCG and RL require
similar numbers of iterations to achieve the same accuracy, while on an ill-conditioned data set,
RL requires signiﬁcantly more iterations due to its automatic selection of small stepsizes.
We therefore conclude that the proposed LRBFGS method appears to be the method of
choice for computing the SPD Karcher mean when the data matrices increase in size or number.
10 2

10 2
RSD
RCG
LRBFGS
RL Iteration

10 0
10 -2

10 -2

-4

10 -4

dist(μ, Xk )

dist(μ, Xt )

10

RSD
RCG
LRBFGS
RL Iteration

10 0

10 -6
10 -8
10 -10

10 -6
10 -8
10 -10

10 -12

10 -12

10 -14
10 -14
10 -16
0

0.01

0.02

0.03

0.04

0.05

time (s)

0.06

0.07

0.08

0.09

0.1

10 -16

0

5

10

15

20

25

iterations

30

35

40

45

Figure 1: Evolution of averaged distance between current iterate and the exact Karcher mean
with respect to time and iterations with K = 3, n = 3, and 1 ≤ κ(Ai ) ≤ 20.

2154

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

10 2

10 2
RSD
RCG
LRBFGS
RL Iteration

10 0
10 -2

10 -2

10

-8

10 -4

dist(μ, Xk )

dist(μ, Xt )

10

10 -8
10 -10

-12

10 -12

10 -14

10 -14

10

-16

0

0.1

0.2

0.3

0.4

time (s)

0.5

0.6

0.7

10 -16

0.8

10 2

10 -4

10 -4

dist(μ, Xk )

10 -2

10 -6
10 -8

20

30

40

50

iterations

60

70

10 -8
10 -10

10 -12

10 -12

0

0.2

0.4

0.6

time (s)

0.8

1

RSD
RCG
LRBFGS
RL Iteration

10 -6

-10

10 -14

10

10 0

10 -2

10

0

10 2
RSD
RCG
LRBFGS
RL Iteration

10 0

dist(μ, Xt )

10 -6

10 -10
10

RSD
RCG
LRBFGS
RL Iteration

10 0

10 -4
-6

Xinru Yuan et al.

1.2

10 -14

20

40

60

80

iterations

100

120

140

Figure 2: Evolution of averaged distance between current iterate and the exact Karcher mean
with respect to time and iterations with K = 100 and n = 3; Top: 1 ≤ κ(Ai ) ≤ 200; Bottom:
103 ≤ κ(Ai ) ≤ 2 · 106

6

Acknowledgments

This paper presents research results of the Belgian Network DYSCO (Dynamical Systems, Control, and Optimization), funded by the Interuniversity Attraction Poles Programme initiated
by the Belgian Science Policy Oﬃce. This work was also supported by the National Science
Foundation under grant NSF-1262476 and by FNRS under grant PDR T.0173.13.

References
[1] P.-A. Absil and P.-Y. Gousenbourger. Diﬀerentiable piecewise-Bezier surfaces on Riemannian
manifolds. Technical report, ICTEAM Institute, Universite catholiqu´e de Louvain, Louvain-LaNeuve, Belgium, 2015.
[2] P.-A. Absil, R. Mahony, and R. Sepulchre. Optimization algorithms on matrix manifolds. Princeton
University Press, 2008.
[3] B. Afsari, R. Tron, and R. Vidal. On the convergence of gradient descent for ﬁnding the Riemannian
center of mass. SIAM Journal on Control and Optimization, 51(3):2230–2260, 2013.

2155

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

10 2

10 2
RSD
RCG
LRBFGS
RL Iteration

10 0
10 -2

10 -2

10

-8

10 -4

dist(μ, Xk )

dist(μ, Xt )

10

10 -8
10 -10

-12

10 -12

10 -14

10 -14

10

-16

0

1

2

3

time (s)

4

5

10 -16

6

10 2

5

10

15

20

25

iterations

30

35

40

45

50

RSD
RCG
LRBFGS
RL Iteration

10 0

10 -2

dist(μ, Xk )

10 -2
10 -4

10 -6

10 -4

10 -6

10 -8

10 -8

10 -10

10 -10

10 -12

0

10 2
RSD
RCG
LRBFGS
RL Iteration

10 0

dist(μ, Xt )

10 -6

10 -10
10

RSD
RCG
LRBFGS
RL Iteration

10 0

10 -4
-6

Xinru Yuan et al.

0

2

4

6

time (s)

8

10

12

10 -12

0

50

iterations

100

150

Figure 3: Evolution of averaged distance between current iterate and the exact Karcher mean
with respect to time and iterations with K = 30 and n = 100; Top: 1 ≤ κ(Ai ) ≤ 20; Bottom:
104 ≤ κ(Ai ) ≤ 2 · 106
[4] T. Ando and R. Li, C.-K.and Mathias. Geometric means. Linear Algebra and its Applications,
385:305–334, 2004.
[5] F. Barbaresco. Innovative tools for radar signal processing based on Cartan’s geometry of SPD
matrices and information geometry. In IEEE Radar Conference, pages 1–6, May 2008.
[6] R. Bhatia and R. L. Karandikar. Monotonicity of the matrix geometric mean. Mathematische
Annalen, 353(4):1453–1467, 2012.
[7] D. A. Bini and B. Iannazzo. Computing the Karcher mean of symmetric positive deﬁnite matrices.
Linear Algebra and its Applications, 438(4):1700–1710, 2013.
[8] G. Cheng, H. Salehian, and B. C. Vemuri. Eﬃcient recursive algorithms for computing the mean
diﬀusion tensor and applications to DTI segmentation. In A. Fitzgibbon, S. Lazebnik, P. Perona,
Y. Sato, and C. Schmid, editors, Computer Vision – ECCV 2012: 12th European Conference
on Computer Vision, Florence, Italy, October 7-13, 2012, Proceedings, Part VII, pages 390–401.
Springer Berlin Heidelberg, Berlin, Heidelberg, 2012.
[9] P. T. Fletcher and S. Joshi. Riemannian geometry for the statistical analysis of diﬀusion tensor
data. Signal Processing, 87(2):250–262, 2007.
[10] P. T. Fletcher, C. Lu, S. M. Pizer, and S. Joshi. Principal geodesic analysis on symmetric spaces:
statistics of diﬀusion tensors. Computer Vision and Mathematical Methods in Medical and Biomedical Image Analysis, 3117:87–98, 2004.

2156

A Riemannian LBFGS Algorithm for Computing the Matrix Geometric Mean

Xinru Yuan et al.

[11] W. Huang. Optimization algorithms on Riemannian manifolds with applications. PhD thesis,
Department of Mathematics, Florida State University, 2012.
[12] W. Huang, P.-A. Absil, and K. A. Gallivan. A Riemannian symmetric rank-one trust-region
method. Mathematical Programming, 2014.
[13] W. Huang, P.-A. Absil, and K. A. Gallivan. A Riemannian BFGS method for nonconvex optimization problems. Lecture Notes in Computational Science and Engineering, to appear, 2016.
[14] W. Huang, K. A. Gallivan, and P.-A. Absil. A Broyden class of quasi-Newton methods for Riemannian optimization. SIAM Journal on Optimization, 25(3):1660–1685, 2015.
[15] W. Huang, K. A. Gallivan, A. Srivastava, and P.-A. Absil. Riemannian optimization for elastic
shape analysis. Journal of Mathematical Imaging and Vision, 54(3):320–343, 2016.
[16] B. Jeuris and R. Vandebril. Geometric mean algorithms based on harmonic and arithmetic iterations. In F. Nielsen and F. Barbaresco, editors, Geometric Science of Information: First International Conference, GSI 2013, Paris, France, August 28-30, 2013. Proceedings, pages 785–793.
Springer Berlin Heidelberg, Berlin, Heidelberg, 2013.
[17] B. Jeuris, R. Vandebril, and B. Vandereycken. A survey and comparison of contemporary algorithms for computing the matrix geometric mean. Electronic Transactions on Numerical Analysis,
39:379–402, 2012.
[18] H. Karcher. Riemannian center of mass and molliﬁer smoothing. Communications on Pure and
Applied Mathematics, 1977.
[19] J. Lapuyade-Lahorgue and F. Barbaresco. Radar detection using Siegel distance between autoregressive processes, application to HF and X-band radar. In IEEE Radar Conference, pages 1–6,
May 2008.
[20] J. Lawson and Y. Lim. Monotonic properties of the least squares mean. Mathematische Annalen,
351(2):267–279, 2011.
[21] M. Moakher. On the averaging of symmetric positive-deﬁnite tensors. Journal of Elasticity,
82(3):273–296, 2006.
[22] X. Pennec, P. Fillard, and N. Ayache. A Riemannian framework for tensor computing. International Journal of Computer Vision, 66(1):41–66, 2006.
[23] Y. Rathi, A. Tannenbaum, and O. Michailovich. Segmenting images on the tensor manifold. In
IEEE Conference on Computer Vision and Pattern Recognition, pages 1–8, June 2007.
[24] Q. Rentmeesters. Algorithms for data ﬁtting on some common homogeneous spaces. PhD thesis,
Universite catholiqu´e de Louvain, 2013.
[25] Q. Rentmeesters and P.-A. Absil. Algorithm comparison for Karcher mean computation of rotation
matrices and diﬀusion tensors. In 19th European Signal Processing Conference, pages 2229–2233,
Aug 2011.
[26] V. H. Schulz, M. Siebenborn, and K. Welker. Structured inverse modeling in parabolic diﬀusion
problems. SIAM Journal on Control and Optimization, 53(6):3319–3338, 2015.
[27] S. J. Wright and J. Nocedal. Numerical optimization. Springer New York, 2 edition, 2006.

2157

