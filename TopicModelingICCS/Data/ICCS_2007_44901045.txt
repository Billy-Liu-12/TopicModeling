The Study on a New Immune Optimization
Routing Model
Jun Qin, Jiang-qing Wang, and Zi-mao Li
College of ComputerScience, South-central University for
Nationalities,Wuhan,430074,China
dr.qinj@gmail.com, wjqing2000@yahoo.com.cn, lizm@sdu.edu.cn

Abstract. The integrated network (mixed with ﬁxed network, cellular
wireless network and ad hoc network etc.) would have diﬀerent dynamic
properties to the single-technique-based network, such as the movement
of nodes and the change of delay of links. In this paper, we propose a
new dynamic multicast routing model with a mechanism called local rearrangement to handle the changes in integrated network. Furthermore,
D-IOA, an immune algorithm based on clone process, which employs
gene library to improve the eﬀectiveness of D-IOA to meet the real-time
requirement in online multicast routing ﬁelds, is given to optimize the
multicast sub-tree within the range of local rearrangement. The simulation results indicate that our algorithm balances three metrics better
compared with other two famous dynamic multicast routing algorithms.
Keywords: Integrated Network, Dynamic Multicast Routing, Immune
Algorithm, Gene Library.

1

Introduction

With the proliferation of wireless communication and individual communication,
more and more various connecting techniques appear. It can be seen that future
network will be an integration of various network techniques such as ﬁxed network, cellular wireless network and Ad-hoc network, which is called “integrated
network” in this paper. In order to guarantee the end-to-end Service of Quality (QoS), the seamless communication between users in the integrated network
becomes a very challenging issue. Especially, with the importance of routing
techniques for multicast connections being emphasized, how to conduct multicast routing in this kind of integrated network environment should be a key
research issue.
Multicast now has been viewed as a very important facility in communicating
networks with the popularity of multimedia applications such as radio, TV, ondemand video and teleconferences[1]. For dynamic multicast routing, there have
been a few of research to do it such as DGA (Dynamic greedy algorithm), SP
(Source rooted shortest path), DP(Dynamic Prim), LRA (Lagrangian-Relaxation
Algorithm) and DCMTCD, etc [2] which are good inexpensive heuristics for the
dynamic multicast routing.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 1045–1052, 2007.
c Springer-Verlag Berlin Heidelberg 2007

1046

J. Qin, J.-q. Wang, and Z.-m. Li

However, considering that there exist many connecting techniques in the integrated network as we mentioned before, there could be many diﬀerent possible
dynamics such as the node’s move, the change of state of link etc. All those
changes, sometimes even much, aﬀect the multicast tree. However, current dynamic multicasting routing models are not considering these kinds of updates
but only the membership change. Accordingly, those models aren’t able to match
the dynamics of the integrated network very well.
The rest of this paper is organized as follows. In section 2, we will give a
new dynamic multicast routing model suitable for the integrated network. In
section 3, “local rearrangement” mechanism is introduced. In section 4, an immune algorithm is proposed to optimize the multicast sub-trees within the range
of the local rearrangement and in Section 5 and the last section, some simulations
and summaries are given.

2

A New Dynamic Multicast Routing Model

In order to simulate the dynamics of integrated network better, in this paper,
besides membership updates, we will take another two dynamics: node movement
and the delay of link changes into consideration. That is to say, we will focus on a
new dynamic multicast routing model speciﬁc to integrated network. It is obvious
that it is much more challenging than static multicast model. As the ﬁrst step
of our research plan about dynamic routing research in integrated network, we
will simplify properly the situation discussed above. We will ignore the network
topology change (the link appear and/or disappear) due to the movement of
nodes.
Deﬁnition 1 (Multiple Dynamic Constrained Multicast Routing problem (MDCMR)). Given a undirected graph G (V, E); a source node s, a set
of initial destination nodes M0 , the initial delay of any link e Delay0 (e), a
series of link delay variation U={u0, u1 . . . ui , ..}, where ui is a two-tuple (ei ,
Delayi ), ei ∈E, Delayi is updated delay of ei ; a series of connection request
R={r0 , r1 ,. . . ri . . . }, where ri is a two-tuple (yi , oi ), yi ∈v, oi ∈{join, leave}, a
series of movement of node H={h0 , h1 ,. . . ,hg }, where hi is a two-tuple (Oldi ,
Newi ), Oldi and Newi are old and new location of the moving node i .
As we can see, these three two-tuple series stand for link state change, multicast
membership change and node movement, respectively. Supposing Mi is the destination node set after suﬀering ui , hi or ri , The aim of MDCMR is to ﬁnd a
sequence of tree {T0 , T1 , . . . T P } where each of them covers S ∪ M i and satisﬁes:
Cost (Ti )=Min

cos t(e)

e∈ETi

Delay (Path(s, d)) < Δ, ∀d ∈ Mi
The dynamics of MDCMR has three possibilities: the link change, the membership change and the movement of node. It is simple logically to analyse under
which conditions the current multicast tree Ti−1 , possibly need to be reconstructed .

The Study on a New Immune Optimization Routing Model

3

1047

Local Rearrangement Mechanism

Before we discuss the routing strategy based on our new dynamic multicast
routing model, there are two main principles should be considered carefully:
(1) Track the optimal or near-optimal multicast routing during the whole
multicast session, which is described as the optimization model deﬁned in this
section.
(2) Reduce the extension and frequency of adaptation to current multicast
tree. This is because if we adapt the current multicast tree dramatically and
frequently, the current multicast session must be interrupted often, and hence it
is very hard to guarantee the QoS.
In some sense, although we can consider MDCMR as a series of static multicast
trees optimization problem, optimizing a multicast tree from scratch will be
too costly time-consumed to satisfy the real- time update. Moreover, the QoS
requirement of multicast sessions cannot tolerate frequent dramatic changes.
Thus, to achieve this balance between cost, time and extension of changes of the
tree, we will adopt an idea [3] of accumulating the impact to a tree and triggering
a rearrangement based on a threshold represented by QF which is deﬁned in
literature [3] to measure the extension of changes to a multicast tree. Further,
even when it’s time to rearrange a multicast tree, we don’t need to optimize the
whole multicast tree from the scratch. Just the part of a tree aﬀected directly
by the changes is chosen to rearrange.
The details of how to decide the range of sub-tree and the related changes’
handling are the similar to the process used in Ref [3].

4

Optimization of Multicast Sub-tree

As soon as the rearrangement of the sub-Tree is needed, an algorithm called
D-IOA is used to reconstruct the sub-Tree and the newly generated sub-tree will
be later combined with the left part of original multicast tree to form a complete
multicast tree without loops.
Up to now, the problem in front of us has become a kind of static multicast
tree construction problem within part of original multicast tree (in the range of
sub-Tree). Here, we will utilize immune algorithm frame based on population
search to solve the typical optimization problem. Based on our previous successful research in static multicast routing domain [4], still, the main component of
D-IOA is clone process, a famous immune process in AIS, which is composed of
two phrases: clone (same meaning as copy) and mutation.
But it is noticeable that our task is to compute online the multicast route
and hence the real-time requirement is highlight considered by the optimization
algorithms. Hence we have to give the revised version of IOA called dynamic
IOA (D-IOA) to match the real-time feature. To achieve this, “gene library” will
be introduced into our algorithm.
The details of D-IOA are given in Fig. 1.

1048

J. Qin, J.-q. Wang, and Z.-m. Li

Input: A given network G = (V, E), the state of network, a revised multicast
session request (s , M , Δ )
Output: An optimized multicast sub-trees (s , M )
1. Use the Dijkstra K-th shortest algorithm to construct the gene library,
and delete the paths violating the delay constraints.
2. Initialize the population P0 , where d0 % · |P0 | individuals produced from
gene library and the remaining individuals by random construction. Those
individuals violating the delay constraint should be deleted and re-produced
again. T=0.
3. Delete the ring paths existed in individuals.
4. Compute the cost of each individual as the ﬁtness fi of it.
5. Order the individuals based on fi of individuals in non-decreasing order.
Suppose the rank of each individual is Ranki , 1 ≤ i ≤ |P (t)|.
1/
f
6. For each individual Ti , compute pi = |P (t)| i , and then clone (copy)
1/
fj
j=1
δ · |P (t)| · pi individuals to produce clone population Qi .
7. Conduct mutation operator for each clone population Qi and then select
the best multicast tree into P (t + 1)
8. If the size of population ¿P opSize, delete|P (t)| − P opSizeindividuals with
biggest fi value.
9. t = t + 1.
10. If not satisfy the termination condition, goto 4; else goto 11.
11. return the best multicast tree in population
Fig. 1. The pseudocode of D-IOA

In D-IOA, An individual means a multicast sub-tree. There are three important parameters: population size P opSize, the size of gene library k, the rate of
initial individuals produced from gene library d0 %.
Gene library is composed of good genes. A new antibody produced from gene
library has good quality with much higher possibility than produced randomly.
In gene library, there is more than one path from source node to destination
nodes. Which are limited within the range of sub-tree. Dijsktra K-th shortest
path algorithm is used to construct gene library. The details are that for each
pair of source node and destination node, Dijkstra K-th shortest path algorithm
is used to ﬁnd K least-delay paths satisfying the delay constraint. The paths set
for all pair nodes forms gene library and the size of it should be K* |M |.

5

Experimental Results

In this section, we present the results of the simulation experiments that were
conducted to analyze the performance of our algorithm. We compared our algorithm with two other famous algorithms. We will ﬁrst deﬁne the performance
metrics, then describe the simulation model, and ﬁnally present and discuss the
results.

The Study on a New Immune Optimization Routing Model

5.1

1049

Performance Metrics

To analyze the performance of our algorithm, we used the following metrics:
(1) Cost Ratio (CR) and Average Cost Ratio (ACR). Those two metrics is
a measure of how well a given algorithm performs (as regards cost of tree) in
relation to the optimal algorithm. Since the online multicast problem is NPcomplete, it will be impractical to use the optimal algorithms as a basis for
comparison. Hence, we use the BSMA heuristic proposed by Zhu [5] as our
benchmark. Suppose that Ti , 1 ≤ i ≤ n and Ti , 1 ≤ i ≤ n are the sequences
of trees respectively constructed by our algorithm and BSMA algorithm after
undergoing n changes in network. Then, the CR is given by the expression:CRi =
n

C(Ti )
,
C(Ti )

CRi

where C(T ) is the cost of tree T . the ACR is deﬁned as:ACR =

i=1

n

.

(2) Tree Change (TC ) and Average Tree Change (ATC ): we deﬁne TC as follow: for a sequence of n update requests, let an algorithm produce the sequence of
Ti , 1 ≤ i ≤ n, then TC is given by T Ci = |(E(Ti ) − E(Ti+1 ))∪ (E(Ti+1 ) − E(Ti ))|;
n−1

T Ci

and ATC is deﬁned as:AT C = i=1
n−1 , where E(T ) denotes the set of edges in
tree T and |•| denotes the size of the set. A lower value of TC or ATC indicates that tested algorithm is better able to accommodate changes in the group
without excessively modifying the tree.
(3) CPU Time (CT ) and Average CPU Time (ACT ). For our simulation
purpose, CTi , 1 ≤ i ≤ n (or ACT ) is deﬁned as the (average) time taken by a
single (or by sequential) update of network for the algorithm.
5.2

Simulation Model

To generate four kinds of possible changes in the network discussed above for our
simulation, we have used the probabilistic model similar to the model employed
in [3]. In a network of size N , letk represents the number of member nodes in the
multicast tree. Supposing the probabilities of an add-request, a remove-request,
the movement of a multicast node and a delay change of a link are deﬁned as
the way in [3].
5.3

Simulation Parameters and Simulation Results

Our simulation studies were conducted on a set of 100 random networks. A
random graph model proposed by Waxman [6] was used to produce the network.
This ensures that the simulation results are independent of the characteristics
of any particular network topology.
The size of gene library k=10. The dynamic change of those four types are
chosen randomly with the probability expression above. The threshold parameter to trigger a rearrangement algorithm is ρ = 0.6. In order to verify the
performance of D-IOA, we compare our algorithm with DCMTCD [7] and LRA
[8] algorithms. The main parameters used in D-IOA is P0 =20, d0 %=80%, θ=0.4.
Every simulation result is the average of 50 running for tested algorithms. The

1050

J. Qin, J.-q. Wang, and Z.-m. Li

1.15
D−IOA
LRA
DCMTCD

Cost Ratio (CR)

1.1

1.05

1

0

10

20
30
Update Time

40

50

Fig. 2. the dynamic curve of CR

11
D−IOA
DCMTCD
LRA

10
9

Tree Changen(TC)

8
7
6
5
4
3
2
1

0

10

20
30
Update Time

40

50

Fig. 3. the dynamic curve of TC

initial multicast group size is 20. Each simulation will be suﬀered 50 changes
with only single change considered each time. All algorithms are implemented
on a P4 2.4GHz machine with 256Mb memory. Fig.2, Fig.3 and Fig.4 shows
respectively the CR, T C, CT curves along with the 50 dynamic changes for the
three algorithms. Table 1 shows the values of ACR, AT C, ACT .
As we can see from Fig. 2 and Table 1, the multicast tree found by D-IOA
does not suﬀer an obvious cost increase along with the dynamic change of network while the DCMTCD and LRA do. The key diﬀerent Between D-IOA and
the latter two algorithms is that the latter two algorithms do not have the rearrangement mechanism, which means that rearrangement mechanism used in
D-IOA indeed help a lot to improve the quality of multicast trees. From the Fig.3
and Table1, we can see that the average tree change (ATC) got by D-IOA is still
lower than both the DCMTCD and LRA, although TC value become higher at

The Study on a New Immune Optimization Routing Model

1051

0.7
D−IOA
LRA
DCMTCD

0.6

CPU Time (CT)

0.5

0.4

0.3

0.2

0.1

0

0

10

20
30
Update Time

40

50

Fig. 4. The dynamic curve of CT

Table 1. The average performance of the three algorithms

D-IOA
LRA
DCMTCD

ACR
1.013
1.084
1.049

ATC
3.7
5.8
4.9

ACT
0.087
0.153
0.142

the right time rearrangement triggered. Similarly, from Fig.4 and Table 1, we
can see that the CT used by D-IOA is shorter than DCMTCD and LRA. Even
though our algorithm introduces the rearrangement mechanism, we still have
acceptable computation overhead because we limit the rearrangement to a local
range rather than a whole multicast tree. Taking all the three aspects discussed
here to be considered, our algorithm improves the performance of the dynamic
multicast routing problem obviously.

6

Summary

In this paper, we proposed a new dynamic multicast routing model and a new
algorithm to solve it. In this new model, we ﬁrstly considered another two dynamics ignored before in integrated network: the movement of node and the
delay change of links. Both of them happen often in integrated network. In order to meet two important and contradicting goals: tracking the least-cost after
each update and minimizing the frequent large changes to the multicast tree, we
designed a local rearrangement mechanism and related algorithm to optimize
the multicast sub-tree within local rearrangement range. The simulation results
revealed that our algorithm balanced the two contradicting goals very well due
to the introduction of local rearrangement mechanism in our algorithm. Also, the
use of gene library further improves the eﬀectiveness of rearrangement algorithm
in that it makes best use of priori knowledge.

1052

J. Qin, J.-q. Wang, and Z.-m. Li

Our further research will include: the sensitivity analysis of parameters in our
algorithm; the convergence analysis of our algorithm; extensive version of our algorithm with multiple constraints such as delay jitter, bandwidth, packet loss, etc.
Acknowledgement. This study was supported by China NSF grant
(No.60603008 ) and Hubei province PSF grant (No.2004ABA029 ).

References
1. Ravikumar, C.P., Bajpai, R.: Source-based delay-bounded multicasting in multimedia networks. Computer Communications 21 (1998) 126–132
2. Cobb, J.A.: Dynamic multicast trees. In: Networks, 1999. (ICON ’99) Proceedings.
IEEE International Conference on. (1999) 29–36
3. Raghavan, S., Manimaran, G., Siva Ram Murthy, C.: A rearrangeable algorithm
for the construction of delay-constrained dynamic multicast trees. Networking,
IEEE/ACM Transactions on 7(4) (1999) 514–529
4. Qin, J., Dong, W.Y., Chen, Y.P., Kang, L.S.: An immune-balance model and
its preliminary application in apl problems. In Lishan, K., Zhihua, C., Xuesong,
Y., eds.: Progress in Intelligence Computation & Applications. (2005) 586–593
5. Hac, A., Zhou, K.L.: A new heuristic algorithm for ﬁnding minimum-cost multicast
trees with bounded path delay. International Journal of Network Management 9(3)
(1999) 265–278
6. Waxman, B.M.: Routing of multipoint connections. Selected Areas in Communications, IEEE Journal on 6(9) (1988) 1617–1622
7. Lin, H.C., Lai, S.C.: Vtdm-a dynamic multicast routing algorithm. Volume 3. (1998)
1426–1432 vol.3
8. Hong, S.P., Lee, H., Park, B.H.: An eﬃcient multicast routing algorithm for delaysensitive applications with dynamic membership. In: INFOCOM ’98. Seventeenth
Annual Joint Conference of the IEEE Computer and Communications Societies.
Proceedings. IEEE. Volume 3. (1998) 1433–1440

