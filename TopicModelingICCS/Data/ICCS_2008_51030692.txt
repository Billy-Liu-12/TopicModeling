Traﬃc Prediction for Agent Route Planning
Jan D. Gehrke1 and Janusz Wojtusiak2
1
Center for Computing Technologies (TZI)
University of Bremen, 28359 Bremen, Germany
jgehrke@tzi.de
2
Machine Learning and Inference Laboratory
George Mason University, Fairfax, VA 22030, USA
jwojt@mli.gmu.edu

Abstract. This paper describes a methodology and initial results of
predicting traﬃc by autonomous agents within a vehicle route planning system. The traﬃc predictions are made using AQ21, a natural
induction system that learns and applies attributional rules. The presented methodology is implemented and experimentally evaluated within
a multiagent-based simulation system. Initial results obtained by simulation indicate advantage of agents using AQ21 predictions when compared to na¨ıve agents that make no predictions and agents that use only
weather-related information.
Keywords:Traﬃc Prediction, Intelligent Agents, Natural Induction.

1

Introduction

The importance of information technology (IT) in logistics has increased remarkably. IT systems support or take responsibility for logistics planning of a
forwarder’s whole motor pool or single vehicles. The just-in-time paradigm demands for high robustness to situation changes and real-time coordination abilities of all participants in the logistics network. These requirements are facilitated
by pervasive mobile communication networks and devices as well as intelligent
systems processing incoming information [1]. Due to the ﬁerce competition in
the logistics service market, companies are searching for new technologies that
advance quality of service (e.g., promptitude and robustness to disturbances)
and cost of carriage. Thus, even seemingly small diﬀerences may bring about a
considerable competitive advantage and high economic impact.
The agent-based approach to intelligent logistics systems delegates the planning and decision making from central planning systems to single logistic entities,
such as trucks and containers, that decide autonomously and locally. With reduced complexity for (re-)planning, this decentralized approach aims at increased
robustness to changes such as new transport orders or vehicle breakdown. Approaches for agent-based transport planning and scheduling have been proposed
by, e.g., Dorer and Callisti [2] and B¨
urckert et al. [3].
The ability of autonomous systems to react to situation changes calls for
situation awareness provided by sensors, other agents, or external sources such as
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 692–701, 2008.
c Springer-Verlag Berlin Heidelberg 2008

Traﬃc Prediction for Agent Route Planning

693

databases. To make use of this information the agent needs to know its relevance,
i.e., how information will inﬂuence its cost or utility function during planning of
actions. Furthermore, the agent has to consider the spatio-temporal scope where
some information is valuable. Because the scope of agent planning is the near
future, agents also need prediction abilities.
In this paper we examine the inﬂuence of environmental knowledge in vehicle
route planning in simulation experiments. In particular, we examine how road
traﬃc predictions used in route planning aﬀect vehicles’ performance measured
as the time needed to reach their destination. In order to do this, we compare
performance of ignorant agents, with agents that are provided with weather
information and agents that use rules induced from historical traﬃc data for
predictions. The rules used in the latter approach are learned using the natural
induction system AQ21.

2

Situation-Aware Vehicle Route Planning

The performance of an intelligent planning systems depends on a proper analysis
of the current situation and prediction of the future. Depending on the domain,
the planning scope may cover a few hours for regional transports or some days for
international or overseas routes. Thus, an important requirement for intelligent
planning systems is situation awareness [4] as well as situation prediction.
In order to investigate the impact of such abilities in logistics and to understand the spatial and temporal constraints we reduce the problem to a simpliﬁed
single vehicle transportation scenario. An agent represents a truck that aims at
ﬁnding the fastest route in a graph-based highway grid. This becomes a complex problem because there are highly dynamic environmental conditions that
may enforce or reduce the speed at which the vehicle may travel. The examined
conditions include traﬃc density and weather that vary in space and time.
In this study, the vehicle route planning applies an A* search algorithm with
cost function (1) for reaching destination d when using (partial) route r at departure time tdep :
f (r, d, tdep ) = g(r, tdep ) + h(endr , d)

(1)

with g as the estimated driving time for r and h as the estimated driving time
from r’s endpoint endr to d. Heuristics h is calculated as driving time at straight
line distance from endr to d at maximum vehicle speed. The route r consists of
n consecutive edges (i.e., roads) ei ∈ r with 0 ≤ i < n. The route segment of
ﬁrst k edges is denoted by rk−1 . The driving time g on route r is calculated by:
n−1

g(r, tdep ) =
i=0

length(ei )
vest (ei , tdep,ei )

(2)

with vest as the estimated vehicle speed on an edge which depends on the vehicle
agent implementation (Sect. 3). Edge departure time for i > 0 is deﬁned by
tdep,ei = g(ri−1 , tdep )

(3)

694

J.D. Gehrke and J. Wojtusiak

Because this setting ensures the criteria for the A* algorithm (non-negative
costs and optimistic heuristics) it guarantees the optimal solution. However,
the found route is optimal only provided that knowledge about the environment
used in the cost function is complete and correct. But assumptions on future road
conditions are possibly wrong because the environment continuously changes in
a way that cannot be precisely predicted.

3

Simulation Model

In order to evaluate the impact of environmental knowledge and driving time
prediction abilities we set up experiments with the multiagent-based simulation
system PlaSMA1 . The system applies discrete event, distributed simulation using
software agents as logical simulation processes. Thus, PlaSMA provides a natural
way to evaluate software agents behavior and interactions.
For the purpose of vehicle route planning, the simulation model includes two
world agents and multiple vehicle agents. The world agents simulate weather and
traﬃc within the simulation environment. The vehicle agents can be categorized
in three classes: the ignorant agent, the weather-aware agent, and the predictive
agent. While all vehicle agents use A* search with time cost function for routing,
they use diﬀerent knowledge in planning and thereby provide a comparative
measure to evaluate the impact of their knowledge.
3.1

Weather and Traﬃc

For the logistics scenario we set up a road network as a 6 × 6 grid graph with
a set E of directed edges (i.e., unidirectional roads) of 100 km length each. This
idealized grid structure ensures that results are not biased by a special network
structure that may have no implications for the general problem. Nevertheless,
experiments can be conducted with other network structures as well. The two
world agents generate simulation events that aﬀect this graph with respect to
traﬃc density dens(e, t) and maximum safe speed vsafe (e, t) for each edge e ∈ E
at simulation time t. dens(e, t) is a linear traﬃc quality value that is normalized
to 1 and indicates the ability of a vehicle to drive at a reference speed vref , i. e.,
maximum speed is
(4)
vmax (e, t) = vref · dens(e, t)
For our experiments we use vref = 130 km/h for all roads. This value corresponds
to the recommended speed on German Autobahn roads for passenger cars.
Speed vsafe depends on the current weather on each road. Diﬀerent roads may
have diﬀerent weather but the weather within the area of each road is homogeneous. The simulation model is designed for a set of qualitative weather types
W = {V eryBad, Bad, M oderate, Good}. weather(e, t) describes the weather at
an edge e at time t. Each weather type w ∈ W corresponds to a truck-oriented
maximum safe speed vsafe (w) when facing that weather:
vsafe (V eryBad) = 35 km/h, vsafe (Bad) = 65 km/h
vsafe (M oderate) = 80 km/h, vsafe (Good) = 100 km/h
1

Available from http://plasma.informatik.uni-bremen.de/

Traﬃc Prediction for Agent Route Planning

695

Then, the maximum safe speed for each edge e ∈ E at time t is deﬁned by
vsafe (e, t) = vsafe (weather(e, t))

(5)

The minimum of vmax (e, t) and vsafe (e,t) determines the maximum possible average speed vavg (e, t) of a vehicle on edge e.
Weather Generation. The weather agent updates weather in the interval ΔtW
separately for each edge. The new weather type w ∈ W on each edge e depends
on the previous weather at e and the basic probability distribution P(W) for
weather which is assumed to be location-independent.
The next weather is determined by the weather w randomly drawn from
W according to P(W) but changes may be constrained depending on current
weather to avoid sudden changes as determined by transition probability model
P(Wt+ΔtW |Wt ). The actual distributions for weather and length of ΔtW are
subject of the experimental setup (Sect. 6).
Traﬃc Generation. Similarly to the weather agent, the traﬃc simulation agent
updates traﬃc density on each edge in interval ΔtT . Though the generated traﬃc
density is a real number, the traﬃc generator is based on a qualitative traﬃc
model with a set of traﬃc classes T covering disjoint intervals of traﬃc density.
Similarly to levels of service A to F in US Highway Capacity Manual [5], the
model distinguishes six traﬃc classes T = {V eryLow, Low, M edium, High,
V eryHigh, Jam} and the following traﬃc density intervals:
V eryLow = [0.0, 0.1), Low = [0.1, 0.25), M edium = [0.25, 0.4)
High = [0.4, 0.6), V eryHigh = [0.6, 0.85), and Jam = [0.85, 1.0]
Tμ denotes the mean value of a traﬃc class. The traﬃc density on an edge is
determined by an edge-speciﬁc density matrix for time of day and day of week.
For this purpose, we analyzed traﬃc volume data from German (BASt) and
Austrian (ASFINAG) agencies that count traﬃc on national highways. According to the combined days and hours in aggregated agency models we set up the
basic model matrix depicted in Table 1 that determines the basic mean traﬃc
density value Tμ (t). The basic model is used for all edges but each edge e has an
additional and time-independent traﬃc bias function Δdens(e) that shifts the
basic model to higher or lower traﬃc densities.
The actual values for the density bias function Δdens depend on the experimental setup (see Sect. 6). The traﬃc generation world agent calculates the
density dens(e, t) with Gaussian distribution N (μ, σ):
dens(e, t) ∼ N (Tμ (t) + Δdens(e), σ)
3.2

(6)

Vehicle Agents

There are three kinds of vehicle agents. The ignorant agent is not aware of any
environmental information and has no predictive abilities. Like all other vehicle

696

J.D. Gehrke and J. Wojtusiak
Table 1. Basic traﬃc density matrix
Mo
Tu-Th
Fr
Sa
Su
Morning, 6am-10am High Medium Medium VeryLow VeryLow
Noon, 10am-3pm Low
Low
High
Low
Low
Afternoon, 3pm-7pm Medium Medium High Medium Medium
Evening, 7pm-10pm Low
Low Medium Low
Low
Night, 10pm-6am VeryLow VeryLow Low VeryLow Low

agents it uses the algorithm described in Sect. 2. Because this agent assumes that
all roads allow equal speed its dominant planning criterion is distance. Within
the road grid the ignorant agent chooses a route that most closely matches the
straight line, disregarding possible bad weather or traﬃc conditions.
The weather-aware agent is a vehicle agent that acquires status information
on weather for relevant locations. The agent uses this information to determine
speed vest (e, tdep,e ) for route planning (Sect. 2). It does not attempt to predict
any traﬃc or changes of weather but na¨ıvely assumes that there is no (relevant)
traﬃc or change of weather w.r.t current time tcur , i. e.
vest (e, tdep,e ) = vsafe (e, tcur ) = vsafe (weather(e, tcur ))

(7)

The status information is provided by the weather agent. Which locations are
considered interesting depends on the current vehicle location, its destination,
and a lookahead parameter λ. λ speciﬁes the spatial range and the area for which
the agent acquires environmental status information. The actual lookahead distance used in this study is λ · 100 km. Because the agent assumes the weather
to be static when planning the fastest route, it may turn out to be wrong when
reaching edges that are far ahead. However, vehicle agents may reconsider their
route at each junction, i.e., wrong decisions can be corrected if there are new,
better alternatives.
The predictive agent is an extension of the weather-aware agent. It also assumes that weather at edge e will not change until arrival at e. But it also
predicts traﬃc at e for tdep,e to determine vest (e, tdep,e ) (Sect. 2). The predictions rely on previous experiences that are used as data to learn situation- and
edge-speciﬁc rules for expected speed (Sect. 5). Besides time of day and day
of week these predictions may depend on weather and thus on λ, too. Edges
that are not within λ distance are assumed to have the most likely weather, e.g.
Moderate.

4

Natural Induction

In contrast to most methods known in the literature, including diﬀerent forms
of statistical learning, the approach used in this study puts an equal importance
to accuracy and interpretability of learned models. While the importance of the
former does not require any justiﬁcation, the latter may not be clear, especially

Traﬃc Prediction for Agent Route Planning

697

in the area in which learned knowledge is used by autonomous agents. Models
learned by many methods can be regarded as a “black box” which may give
very good predictions, but it is hard to understand and often impossible to
validate or reﬁne by human experts. Models described in a language that is
easy to understand, for example, natural language or easy to interpret rules,
can be modiﬁed by experts to reﬂect their background knowledge and improve
predictions. In this study we use natural induction [6] that is an approach to
inductive learning whose goal is to achieve high understandability of derived
knowledge. It uses a highly expressive language attributional calculus (AC) that
combines predicate, propositional and multi-valued logics. Because all forms of
knowledge used in AC corresponds to diﬀerent constructs in natural language,
its expressions are easy to understand.
4.1

Knowledge Representation

The main form of knowledge in AC is an attributional rule. Attributional rules,
which follow the general if . . . then . . . schema, are more general than those
learned by most learning programs. This is because attributional rules use more
expressive language which allows creating simpler descriptions than normal rules.
A basic form of attributional rules is (8).
CONSEQUENT ⇐ PREMISE

(8)

Here, CONSEQUENT and PREMISE are conjunctions of attributional conditions. In this study we used attributional conditions in the form [L rel R] where
L is an attribute; R is a value, a disjunction of values, or a conjunction of values if L is a compound attribute; and rel is a relation that applies to L and
R. Other forms of attributional conditions may involve count attributes, simple
arithmetical expressions, conjunctions and disjunctions of attributes, comparison
or attributes, etc. [7].
4.2

The AQ21 Machine Learning System

A simple form of natural induction is implemented in the currently developed
AQ21 system [7]. Given input data, problem deﬁnition, and optional background
knowledge, AQ21 induces rules in the form (8), or in more advanced forms,
describing one or more class in the data. A set of rules constituting a description
of a given class is called a ruleset. By repeating learning for all classes deﬁned
by values of an output attribute, AQ21 generates a classiﬁer.
In order to learn rules for a given class AQ21 starts with one example, called
a seed, belonging to the class. It generates a star, which is a set of maximally
general rules that cover the seed and do not cover any examples from other
classes. This is done by repeating an extension-against operation that generalizes
the seed against examples not belonging to the concept being learned. Results
of applying the extension-against are intersected and the best rules are selected
according to user-deﬁned criteria. If selected rules do not cover all examples
belonging to the class, another seed is selected (from the not covered examples)

698

J.D. Gehrke and J. Wojtusiak

and additional rules are learned. The process is repeated until all examples of the
class are covered by the learned rules. AQ21 implements several modiﬁcations
to the above basic algorithm as described, for example, in [7].

5

Learning and Applying Traﬃc Models

In the presented study traﬃc models were learned using simulated data collected
over 15 years of simulation time. The training data consisted of 131,488 examples
for each type of edge. To learn traﬃc models we used the AQ21 system (Sect. 4.2).
It was executed with diﬀerent settings of parameters, from which we selected
the best according to predictive accuracy on testing data and simulation results.
We applied the program in two modes, theory formation (TF) and approximate
theory formation (ATF). The TF mode learns complete and consistent rulesets
w. r. t. the training data, while the ATF mode allows partial inconsistence and
incompleteness (e.g. in the presence of noise) by optimizing the Q(w) quality
measure [8]. In this study the weight, w, of completeness against consistency
gain was 0.1.
Many training examples are ambiguous, meaning that for identical values of
Day, Time, and Weather, diﬀerent values of Speed are assigned. Among several
methods for solving ambiguity available in AQ21 we investigated two. The ﬁrst
method, here called majority, assigned the most frequent class to all ambiguous
examples, and the second method, here called pos, always treats ambiguous
examples as positive examples. Details of the methods are in [9].
Application of learned models to classify new examples is done by executing
AQ21’s testing module. The program is provided with input ﬁles consisting of a
testing problem description, learned models and one or more testing examples.
In the presented experiments we tested two methods of evaluating rules, namely
strict in which an example either matches a rule or not, and ﬂexible in which the
program calculates the degree to which examples match rules. In the latter case
the degree of match equals the number of matching conditions in the rule to the
total number of conditions in the rule. Detailed description of the parameters
and other rule matching schemas are in [6,9]. Two methods of resolving imprecise
classiﬁcations are tested here. The ﬁrst method is pessimistic, namely it assumes
the worst of the given answers (the lowest predicted speed). The second method
is based on frequency of classes. For instance, if an example matches two classes
“slow” and “very slow,” and the former is more frequent in the training data, it
is reasonable to assume that the prediction should be “slow.”
Average predictive accuracies and precisions [9] of models learned and applied
with diﬀerent AQ21 parameters on testing data with variances 0.001 and 0.01
for dens(e, t) ranged from 91% to 100% and 71% to 100%, respectively. The best
results were obtained by AQ21 in the theory formation mode, with ambiguities
treated as majority and ﬂexible rule interpretation. There were 95% predictive
accuracy, and 100% precision. All presented values are averaged for all types
of roads in the simulation model. As an example, the following rule has been
learned using the TF mode. It predicts that expected maximum speed for a

Traﬃc Prediction for Agent Route Planning

699

given road is 60 kmph on Monday mornings provided moderate to good weather
conditions.
[Speed=SPEED_60]
<= [Day=Mo] & [Time=morning] & [Weather=moderate..good]

6

Experimental Evaluation

For evaluation we conducted experiments using the simulation system PlaSMA.
Each experiment is speciﬁed by a simulation model parameter setting and 9 participating vehicle agents. There is one ignorant (named “IA”), one weather-aware
(“WA”), and seven traﬃc-predicting agents (“AQ”). The latter are diﬀering in
the applied prediction rulesets for each edge (Sect. 5) as indicated by their index.
The agent named AQM is a traﬃc-predicting agent whose rules have been
created manually knowing the actual traﬃc simulation model. Thus, this agent
should provide results close to the achievable optimum for the applied algorithm.
All agents try to optimize the driving time of a 1000 km trip in the road network.
Simulation results are provided as an average driving time and its standard deviation for each vehicle agent and parameter setting. For statistical signiﬁcance
experiments were repeated between 4200 and 4800 times with each run corresponding to one trip. With signiﬁcance level α = 0.05 stated average values do
not diﬀer more than 0.02 hours from the actual value.
Most of the model parameters have been examined in prior studies [10]. For all
experiments presented in this paper we set parameters to ΔtT = 1h, ΔtW = 3h,
and λ = 2. Weather probabilities are set to
P(W) = {P (W = V eryBad) = 0.05, P (W = Bad) = 0.2,
P (W = M oderate) = 0.55, P (W = Good) = 0.2}
The edge-speciﬁc density bias Δdens(e) was examined in a setting that is
characterized by a fairly well-shuﬄed distribution of slower and faster edges
(see Fig. 1). As an exception, the grid also includes three edges (dashed line)
that form a fast partial route. These edges are not part of routes that most
closely match the theoretical straight line route. Hence, ignorant vehicles that
are dominated by the straight line heuristics and always choose such centered
routes will not be aﬀected. Weather-aware agents should not beneﬁt as much as
traﬃc predicting agents because only the latter will actually realize the traﬃc
properties and consider them in planning.
Table 2 shows the simulation results for traﬃc density setting depicted in
Fig. 1. With variance σT2 = 0.001, the ignorant agent needs 13.31±0.87 hours
driving time on average. The weather-aware agent needs 12.61±0.78 h, hence,
it is 0.7 h or 5.3% faster than the ignorant agent. The prediction ruleset AQ3
(AQ21 mode: TF, majority, strict) performs best with 12.47±0.60 h (0.84 h,
6.3% faster). The standard deviation is signiﬁcantly lower than that of IA and
WA, too. AQ3 and AQ4 even come close to the reference ruleset AQM . With

700

J.D. Gehrke and J. Wojtusiak

Fig. 1. Road grid annotated with Δdens(e) · 10

σT2 = 0.01, AQ3 needs 0.16 hours longer due to more wrong predictions and all
agents using TF mode perform equally good. The changes are rather small and
all situation-aware agents still clearly outperform the ignorant agent. Thus, these
agents can be considered suﬃciently robust to less predictable environments.
Table 2. Average vehicle driving time in hours
AQ1 AQ2
σT2

IA

WA AQM

TF

TF

AQ3
TF

AQ4 AQ5 AQ6
TF

ATF

ATF

AQ7

AQ8

ATF

ATF

pos,str pos,ﬂx maj,str maj,ﬂx pos,str pos,ﬂx maj,str maj,ﬂx

0.001 13.31
±0.87
0.01 13.44
±0.92

7

12.61
±0.78
12.74
±0.86

12.49
±0.60
12.64
±0.68

12.51
±0.64
12.63
±0.68

12.56
±0.63
12.63
±0.68

12.47
±0.60
12.63
±0.66

12.50
±0.61
12.63
±0.66

12.62
±0.60
12.75
±0.67

12.63
±0.64
12.74
±0.64

12.54
±0.64
12.64
±0.66

12.57
±0.65
12.69
±0.71

Conclusions

This paper presented an approach to the problem of predicting traﬃc for vehicle routing. Autonomous agents make predictions based on rules induced by
the AQ21 system from historic data. By inducing attributional rules AQ21 realizes natural induction, that is an inductive learning process whose results are
both accurate and easy to understand by people. Experiments performed within
the PlaSMA multiagent-based simulation system indicated advantage of agents
that use AQ21 predictions over na¨ıve agents that consider only distance to the
destination and agents that use only weather-related information.
Future research includes the comparison with diﬀerent learning methods, investigation of the eﬀect of the amount of historic data on the learning results

Traﬃc Prediction for Agent Route Planning

701

and predictions, and investigation of the eﬀects of changes of the environment
on the predictions. Other important research directions include learning individualized models for each agent, based on the agent’s experience and preferences,
and application of the system in a real, not simulated, environment.
Acknowledgments. The authors thank Abdur Chowdhury for his contributions to experiment design and Jarek Pietrzykowski for his comments that helped
to improve this paper. This research was partially funded by the German Research Foundation (DFG) within Collaborative Research Centre 637 (SFB 637).
Development of the AQ21 system was partially funded by the National Science
Foundation Grants IIS 9906858 and IIS 0097476.

References
1. Scholz-Reiter, B., Windt, K., Freitag, M.: Autonomous logistic processes: New
demands and ﬁrst approaches. In: Monostri, L. (ed.) Proceedings of the 37th CIRP
International Seminar on Manufacturing Systems, pp. 357–362 (2004)
2. Dorer, K., Calisti, M.: An adaptive solution to dynamic transport optimization.
In: Proceedings of AAMAS 2005, pp. 45–51 (2005)
3. B¨
urckert, H., Fischer, K., Vierke, G.: Holonic transport scheduling with teletruck.
Journal of Applied Artiﬁcial Intelligence 14, 697–725 (2000)
4. Endsley, M.R.: Theoretical Underpinnings of Situation Awareness: A Critical Review. In: Endsley, M.R., Garland, D.J. (eds.) Situation Awareness, Analysis and
Measurement, Lawrence Erlbaum Assoc., Mahwah (2000)
5. Transportation Research Board: Highway Capacity Manual (HCM) (2000)
6. Michalski, R.S.: Attributional Calculus: A Logic and Representation Language for
Natural Induction. Tech. Report MLI 04-2, MLI, George Mason University (2004)
7. Wojtusiak, J., Michalski, R.S., Kaufman, K., Pietrzykowski, J.: The AQ21 Natural
Induction program for pattern discovery: Initial version and its novel features. In:
Proceedings of the 18th IEEE International Conference on Tools with Artiﬁcial
Intelligence, Washington, DC (2006)
8. Kaufman, K., Michalski, R.S.: An Adjustable Rule Learner for Pattern Discovery
Using the AQ Methodology. Journal of Intelligent Information Systems 14, 199–216
(2000)
9. Wojtusiak, J.: AQ21 User’s Guide. Tech. Report MLI 04-3, MLI, George Mason
University (2004) (updated, September 2005)
10. Gehrke, J.D., Wojtusiak, J.: A natural induction approach to traﬃc prediction
for autonomous agent-based vehicle route planning. Tech. Report MLI 08-1, MLI,
George Mason University (2008)

