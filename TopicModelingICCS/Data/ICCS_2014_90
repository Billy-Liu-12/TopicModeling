Procedia Computer Science
Volume 29, 2014, Pages 2483–2495
ICCS 2014. 14th International Conference on Computational Science

The Framework for Problem Solving Environments in
Urban Science
Aleksandr Zagarskikh*, Andrey Karsakov and Timofey Tchurov
ITMO University, Saint Petersburg, Russia
alazar.az@gmail.com, kapc3d@gmail.com, tchurovtim@gmail.com

Abstract
This paper presents a framework for the rapid development of problem solving environments in the
field of Urban Science. This framework focuses on the use of shared cloud computing technologies for
data processing and resource-intensive modeling, GIS-technologies for visualization of incoming data
and computational results, and tools for the creation of a control graphical user interface and humancomputer interaction.
Keywords: urban science, problem solving environment, GIS, cloud computing, CLAVIRE

1 Introduction
Problem Solving Environment (PSE) provides an integrated set of high-level facilities that support
users engaged in solving problems from a prescribed domain (Gallopoulos, Houstis, & Rice, 1994). In
world practice it is customary to use a PSE to solve various complex tasks. However, an environment
for solving tasks in such a complicated field as Urban Science (Haila, 2008) should be quite elaborate,
and possess the following features: it should work with Geographic Information Systems (GIS),
should provide a wide range of opportunities for the aggregation and processing of a large amount of
different data, and finally it should be able to compute resource-intensive and complex tasks and
provide good tools for visualization of the results obtained. There are many problems at the forefront
of Urban Science such as traffic simulations (McKenney & White, 2013), flood simulations
(Krzhizhanovskaya, Shirshova, Melnikova, Belleman, & Rusadi, 2011), social dynamics (Crooks,
Castle, & Batty, 2008) & (Helbing, Simulation of Pedestrian Crowds in Normal and Evacuation
Situations, 2002), decision support systems (Zhi-xiang, Wen-li, Xiao-fang, & De-zhi , 2013), the
spread of diseases (Balcan, Goncalves, & Hu, 2010), city planning (Batty, 2013) and so on. All these
studies need favorable instruments for intensive and effective research.
Very often researchers go through the procedure of providing an environment for concrete
applications on the basis of existing GIS solutions (e.g. ArcGIS, GRASS, Supermap and etc.) (Jiang,
*

Corresponding author. Tel.: +7-921-888-68-25

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.232

2483

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

Wang, & Lung, 2012) & (Kucuksari, 2014). But nethertheless researches are developing new specific
frameworks for needs of their investigations in addition to used GIS. Moreover some researchers
creates theirs own GIS systems because existing ones didn’t have enough functionality to solve their
problems (Yu, 2012). Although, GIS is an essential part of any problem solving environments, PSE is
a tool for the complex integrated experiments very often located at the confluence of a set of different
fields of study and usually represented as a composition of computational models (Jackson, 2013). So
we could summarise that the creation of the universal PSE framework which could naturally include
GIS as well as a computational environment is a current challenge especially in the field of Urban
Science.
Usually, the modeling of certain aspects of the city uses data from different databases. However,
the rapidly growing role of social media has provided an opportunity for the collection, study and
usage of additional data about city life ( Kaplan & Haenlein, 2010). The widespread use of geo-tags in
social networks (e. g. Foursquare, Instagram, Twitter) allows the use of data about social activity in a
wide range of simulations, like social dynamics. The aggregation, processing and analysis of such a
large amount of data must be implemented by the approach of BigData (Manyika, 2011) &
(Bettencourt, 2013). Simulation scenarios on the basis of mathematical models typically require
supercomputer technologies, which limits the use of most traditional GIS solutions and development
tools.
In particular, ( Houstis, Catlin, Rice, & Tsompanopoulou, 2000) describe the structure and features
of multidisciplinary PSE targeted on the use of legacy code within computational workflows.
Framework PSE generation on the basis of geo-information services with facilities for collaborative
work through the internet, as described by (Junga, Suna, & Yuan, 2013) and (Ludescher, Feilhauer, &
Brezany, 2013), refers to the approach of using distributed cloud services for the execution of existing
widespread PSEs.

2 Aspects of PSE for Urban Science Development
Researchers working in the field of Urban Science are faced with the problems posed by a wide
spread of geospatial data, as well as with the usual problems inherent in the creation of a PSE. A list of
generic and specific issues that should be addressed by a PSE for Urban Science application is
presented below.
Multidisciplinary support. One of the main points of Urban Science is that it deals with tasks
which can be solved only by the application of techniques from a range of disciplines.
Cloud computing. Complex tasks are very computation-intensive and in most cases the power of
one computer would not be sufficient to carry out these tasks within a reasonable time frame.
Additionally, complex simulations may require specific software running on specific hardware or
operating systems. Therefore, a cloud computing environment is required.
Accessibility to legacy code. There are specific calculations that can be done only by certain
legacy applications or on specific hardware. It is hard to share these applications with other
researchers. Adding these applications to comprehensive computational workflows is also challenging
enough because of necessity for creating additional wrappers.
Accessibility of social media data. Social media could be used as one of the data sources for
research, so quick and flexible access in order to collect and aggregate such information is necessary.
Experiment management. Due to the complexity and continuance of experiments, PSE should
have tools for on-line experiment management.
Collaboration support. A collaborative decision making system could be important for solving
some types of problems, such as an evacuation management from a city district. It could use modern
tools for human-computer interaction such as multitouch tables and other.

2484

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

Visualization. The quality of visualization is also very important, due to the geospatial nature of
most domain problems. Usually there is demand for visualization with maps, heat maps, simulation
results and so on.
Seamless integration. Seamless integration of model, data sources and visualization without
tedious debugging and verification procedures is highly desirable.

3 General Architecture
The general architecture of the framework proposed in this article, as presented in Figure 1,
consists of three global functional elements: Workspace, Data Sources and Processing Manager.
Workspace: this element consists of two functional subsystems, namely the Layers Subsystem
(GIS) and the Input/Output Subsystem.
All layers have a base generic interface that makes it easier to work with layers for the whole
system. The base layers perform a graphical representation of raster maps, roads, buildings and other

Figure 1: Architecture of PSE framework

2485

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

common geo-informational data. User-Defined Layers, meanwhile, is the main tool for creating,
managing and monitoring the experiment. These are formed by PSE developers and can interact with
basic layers and each other.
The Input/Output Subsystem consists of three components: input interpretation, visualization and
audio output. The input interpretation component can handle input signals from standard input devices
(keyboard, mouse) as well as from specialized devices such as touch screens, interactive tables (van
der Laan, Kellet, & Girling, 2013) and motion capture systems. The visualization component allows
the display of a graphical representation of all layers and the graphical user interface. Finally, the
audio output component provides the ability to add sounds to different situations in the course of
working with PSE.
The second functional element within the framework is the Processing Manager. This element
connects the framework and distributed cloud platform CLAVIRE (CLoud Applications VIRtual
Environment) (Knyazkov, Kovalchuk, & Tchurov, 2012), which supports the seamless integration of
separate software modules and their execution in the cloud environment. It also allows for the
interactive management of running computational packages using the technology of the IWF
(Interactive Workflow (Knyazkov, Nasonov, Tchurov, & Boukhanovsky, 2013)).
The third global functional element of the PSE framework is Data Sources. This element contains
the geo-data required for the operation of the basic layers, the user data required for the user's layers
and data aggregated from social media. All necessary basic data is derived from external sources, such
as widespread map services and internet databases with geo information. A set of user data is
determined by the PSE developers and contains necessary information for solving the problem.
CLAVIRE’s Storage service could also be used to store user data.
The proposed architecture provides the ability to develop PSEs that would allow users to perform
all of the main tasks, namely: to define and manage experiments, use high-performance distributed
resources to execute the experiments, get access to legacy code, manage the computational strategy,
visualize and analyze results of the experiment and so on. At the same time the architecture is quite
scalable, because the modular structure makes it easy to add whatever new components are available
for the developer.

3.1 Workspace: Composing the PSE Structure
Workspace is a common environment for the developer. It consists of two common subsystems:
Layer Subsystem and Input/Output Subsystem. C# is used as the main programming language for
development.
The Layers Subsystem is based on the concept of special layers, which are divided into two types:
Base Layers and User-Defined Layers. The first class allows a developer to implement GIS
technology in PSE; in other words, Basic Layers are maps and geo-data. Any geo-information service
that provides maps in the form of tiles can be used as map sources for these layers. Such a map service
could also provide additional spatial-coordinate data, such as building type, direction and size of
roads, and even sea routes. The developer could use this information for visualization and as input
data for subsequent calculations.
The second class of layers, User-Defined Layers, offers the opportunity to create an additional
arbitrary number of layers without rigid binding to geo-information resources. These layers are used
for defining all the main aspects of the PSE being constructed: what mathematical models will be used
to carry out calculations for the experiment (defining models in the Computing component), what kind
of data, in what form and from which sources will be sent for calculation (defining links between the
Data Sources and Computing components), what actions will be taken with the resulting data (defining
data links between the Computing component and the Main Workspace), what tools will organize
visualization and human-computer interaction (defining links between the Layer subsystem and the
Input/Output subsystem) and so on.

2486

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

In addition, a user-defined layer can be used for an incorporation of the existing solutions and
applications into the workflow. There are two different ways to get it done. First way based on
description of the seamless access to the application directly from the layer (particular case of such
way of integration proposed in real application described in section 5). And in the second one, the
Processing Manager tools for access and execution to existing solution are can be used. Also each
layer can be used for solving multidisciplinary problems as well as for specific applied singledisciplinary tasks.
The one of the main features of this framework is the possibility of creating an unlimited number
of user-defined layers, coupled with the ability to set their interaction among themselves. This
provides the opportunity to create PSEs for very complicated multidisciplinary tasks.
The Input/Output Subsystem within Workspace consist of three components. The first component
is a Visualization System that is used for layer visualization and creating the graphical user interface.
This Visualization System is implemented on DirectX 11 and deferred context technology. A deferred
context allows for downloading and preparing the data for visualization in parallel threads. This
speeds up the rendering process of the entire scene, and is especially important for thread-independent
layers rendering. All user-defined layers are rendered on top of the base map layer. However, the
representation of layers could be not only two-dimensional maps for GIS, but also in another desired
form, from simple 2D images and charts to full 3D scenes. Through the use of DirectX 11 to
accelerate and parallelize some calculations, the user can take advantage of DirectCompute to transfer
their computation on GPU.
The Input System component allows for a variety of devices to be used in human-computer
interaction. Such a set of components for creating a user interface, including Sound System, can make
the system user-friendly and sufficiently simple for researchers. Using this interface, a researcher can
control all aspects of the system, even during the experiment (support of the interactive computational
steering).

3.2 Data Sources
One of the main objectives of the framework is to provide for the widest possible available range
of data sources. The permanently increasing number of new open sources useful for Urban Science, as
well as the rapid growth of technologies for the collection and aggregation of data, makes it necessary
to have flexible tools for data source integration within a single PSE.
Various types of geo-data are extremely important for solving tasks in Urban Science. These can
be regular raster maps supplied in tile form or different public services, such as Google Maps, Yahoo
Maps, OpenStreetMaps, Bing Maps, Ovi Maps, Yandex Maps and so on. These services could also
provide additional geospatial data, such as information about roads, buildings and points of interest.
The framework supports some of the available set of popular services that provide maps and other
geo-data by default. However, geo-data can be obtained not only from known mapping services, but
also from restricted state and statistical databases and services. This problem can be solved by the
ability to include new sources as new classes, which describe the logic of interaction with sources,
inherited from the base class. In addition, it is important to note that the developer always has the
opportunity to use their own individual data sources directly from a user-defined layer.
The close intertwining of human life and online social media provides the opportunity to aggregate
and analyze data from these sources. This data can contribute to the progress of the study in various
fields of science, because online society could reflect real society with some exceptions. In the
presented framework, the use of a crawler is proposed (Yakushev, Boukhanovsky, & Sloot, 2013) for
the data collection of social media. The crawler enables data collection from a wide range of social
media, including the most popular such as Vkontakte (vk.com), Twitter (twitter.com), Foursquare
(Foursquare.com) and Instagram (Instagram.com), as well as Livejournal (Livejournal.com).
The algorithm of crawler work can be described as follows. At each iteration, the crawler gets one
or a set of URLs out of a queue, downloads data from the URL or set, and extracts links leading to

2487

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

other pages. Downloaded data is saved in the database and links are added to the download queue
according to their priority. This ends the current iteration of the crawler and the next iteration begins.
The crawler starts with a given set of initial URLs and quits when it meets certain criteria, such as
achieving a particular database size. Despite the simple algorithm, there are a lot of requirements
complicating the crawler’s architecture and implementation, as well as often requiring the use of
sophisticated mathematical methods.
The crawler has some properties that are necessary for solving the task of collection and
processing data about large urbanized areas: courtesy, distribution, scalability, expandability, stability,
performance and quality. These provisions are typical for crawlers of arbitrary data sources on the
Internet. However, the specifics of Social Media are such that they have a complex topological
structure and protective means for information spreading.

3.3 Processing Manager: Integration with Distributed Cloud Computing
Environment
The processing manager is a special integration part of the PSE framework that connects
CLAVIRE with other parts of the framework and hides much of the complexity of its functions. It has
a number of programming functions and classes which make requests to CLAVIRE’s application
programming interface (API) through the Internet.
CLAVIRE plays the role of the background worker in a PSE framework that executes concrete
computations in the cloud. CLAVIRE is the e-Science infrastructure platform that supports the highlevel abstract description of computational processes in terms of workflows, using a set of domain
specific software and data sources available within the service-oriented distributed computational
environment. By default, a user could create and execute workflows (that usually look like a directed
graph) through the methods of this platform to solve problems in his domain. Moreover CLAVIRE
provides additional services, such as a catalog of already constructed workflows, API for simplified
straight programming access and the generation of simple graphical user interfaces for existing
workflows (Problem-Oriented Interface, POI). The special interface provides users with the ability to
plug-in their own personal resources and software, and uses them as a common service in cloud
infrastructure. Usually CLAVIRE frees users from the hand management of resources, but has
facilities for advanced users to set up specific resources to execute. The reason why CLAVIRE had
been chosen as execution environment was its feature to add easily and execute computational
packages even on user own resources. More detailed information is available in (Knyazkov,
Kovalchuk, & Tchurov, 2012).
A PSE developer has two ways to construct new complex models. First of all he could
programmatically obtain data from one domain package and move to another, making the necessary
changes, but this is quite a coarse variant. A more appropriate method is coupling packages in one
workflow on the EasyFlow domain specific language. This demands additional effort for integrating
new packages and connectors to CLAVIRE, but allows the reuse of transitory results in future directly
in the platform.
CLAVIRE’s connecting user resources feature is a convenient way to organize the modeling
process with custom models that are located only in the user computer (Personal Cloud). It could be
useful when a developer wants to leave the possibility for an end user to change some of the models'
behavior. Likewise, visualization on a personal computer may be implemented as a special CLAVIRE
package installed with proper settings in workflow. CLAVIRE data storage services could also be
used as a possible data source; this provides methods for information processing.
Moreover there is a special implementation of the social media crawler (but with some restriction
in set management commands) as a single package, plugged in to CLAVIRE. The greatest advantage
of this kind of architecture is the seamless connection between crawler and CLAVIRE Storage, so data
picked up from social media could be saved simply, instantly and safely.

2488

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

Interactive workflows allow users to implement hard business logic unaffected on EasyFlow and
produce comprehensive applications with long running execution and dynamically changing logic
which are open for online reconfiguration. Interactive workflows are based on special kind of
packages which are working permanently and could start execution of other branches of computation.
Interactive workflows are widely used in realization of Decision Support Systems (Knyazkov,
Nasonov, Tchurov, & Boukhanovsky, 2013). This feature opens new horizons for the permanent
service of short-time forecasts and makes it possible to search for new trends in social media for, in
some cases, needed action from stakeholders.

4 Organization of Computing and Data Management in the
Cloud Environment
This section deals with what exactly the process of PSE construction looks like, and therefore the
user possibilities provided by the framework.
First of all, the developer should choose exactly what models he wants to use, and their relations
between each other. In other words, he must describe a scenery of computational experiment or
modeling, either with the help of EasyFlow or programmatically. This action could comprise the
specific steps of attaching new models to the CLAVIRE package pool, describing it and installing
resources; some models the developer could insert directly into PSE as a programming code.
There is another method, related to the special service of CLAVIRE, where a PSE developer may
add his own resources, with a legacy program, into the pool of CLAVIRE resources and set up a
description of this package on EasyPackage language. This method of integration of the legacy code in
computation workflow is more easy and flexible than the classic implementation method through
programming the additional wrappers. Adding description about resource and exact legacy code to the

Figure 2: Organization of computing and data management in the cloud environment

2489

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

resource list of CLAVIRE is quite enough to have the possibility to include this package in modeling
part of the PSE under general conditions (shown on Figure 2 as a dashed line).
The second very important action is binding data sources to chosen models. The user could find
this in a predefined range of available open data sources, or add their own databases or files to the
experiment scenery. Using the same technique as in the previous paragraph permits the user to keep
data on their local computer and not copy it to public servers. Another way of data binding lies in the
adjustment of crawling social media and including it in computational scenery. The crawler could also
be implemented in two different ways: directly or from CLAVIRE. An independent crawler is more
flexible for setup, but demands special hosting and further data transmission. An embedded crawler,
on the other hand, has a limited set of commands but doesn’t need a special host and can keep data in
the more flexible CLAVIRE Storage. After this step the experiment could begin, but if visualization
and output are not set up, its execution would be quite useless.
The last step for PSE development, then, is the construction of a graphical user interface and
management system. The main components are represented as layers, which could be chosen from a
predefined pool or created especially for the problem at hand. Additionally, the user interface could be
improved by the implementation of some visualization and audio tools. As usual, CLAVIRE provides
an alternative way to create an interactive system, by including some specific user resources in its
infrastructure. It makes possible the use of unusual presentational tools, such as an interactive
multitouch table or a 3D projector. Furthermore, software embedded in this way could have interactive
parts that may be used for online modeling process management.

5 Applications
The above presented framework has already been used to develop a few PSEs to solve the
following emblematic problems: the density of population in the city created by open data from
Instagram and modeling of transport networks in the Saint Petersburg area.
Social moulds. The purpose of the investigation was to find ways to use the data from social
media as input parameters, to simulate of population dynamics in large urban areas. The model of an
artificial society was used; it has the characteristics of a real one and is received by agent-based
modeling. In this case agents are people who have real behavioral characteristics. Each agent belongs
to one of several socioeconomic classes (e. g. 'student', 'pensioner', 'immigrant'), with their own
behavioral patterns, such as going to school or work, shopping and taking part in leisure activities, or
simply residing in place. These classes were developed on the basis of one main factor (in this case,
income level), and several additional factors. All the actions of agents are deployed in an environment
that is a structure-grid. Analysis of the aforementioned factors can predict the movement of the agent
on the grid during the day during certain time intervals. Using the developed rules for each agent
(representative of a particular class), its daily activity scenarios were devised, which may vary based
on the probability of choice of action embodied in the model.
A description of the city’s infrastructure, as well as the sociological characteristics of its
population, is required as static input data for the model. Descriptions of infrastructure and lists of
required building types (schools, shops, businesses, etc.) were provided the by Wikimapia resource
(wikimapia.org), while the sociological characteristics of the population were obtained from
collaborative work with sociology science group. This social model was developed separately, before
the framework. During the development of the framework, it was decided to integrate this model for
visualization of the results and further integration with other models. With the help of the framework
was created a user-defined layer, which at the beginning of work runs the application that implements
this model. Layer transmits information about the buildings and roads derived from the base layer, as
well as information of the posts with geotags from Instagram obtained using crawler (launched in

2490

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

CLAVIRE environment). Further layer polls the application and receives information about the
current status of all agents, visualizes them and builds a map of population density.
Figure 3 shows a screenshot of the modeling results for the Vasileostrovsky district of St.
Petersburg. White dots show the Instagram data placed on map for one month, and the distribution of
the population density is displayed by color gradient map from red (higher density) to blue (lower
density). Picture in the box is a photo from one of the users of Instagram. It shown to demonstrate an
additional abilities of this application for analysis of obtained data from social media.
The original population density at the zero point of time (midnight) is set according to the Federal
Migration Service data (residence registration). To evaluate the compliance of the model distribution
of population density with the real data during the day, Instagram data was used (posting pictures). In
addition, comparing this two different types of data is very useful for obtaining an additional
information about social behavior.
Transport. The development of transport infrastructure for large cities requires integrated systems
of a new generation, which allow for determining the optimal regimes of public traffic, taking into
account the variability of the road situation. The traffic situation is received by operational forecasting
with the use of mathematical models with the specification set to the level of individual vehicles

Figure 3: Distribution of the population density (model) in comparison with Instagram data

2491

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

(Helbing D. , 2001). This type of modeling and optimization of traffic flows in a city is very resource
intensive.
The problem of determining the characteristics of the environment is solved with the help of
interrelated models of virtual society, traffic and passengers. The model of a virtual society is based on
statistical data on the population of the city's territory, with regard to the places of residence of the
owners of private vehicles, locations of companies, fleets, public transport depots, etc. The model then
builds a network of correspondence, linking the individual objects in the city. The characteristics of
the network depend on the time of day, week and year, and describe a poly-periodically-correlated
random process. Model parameters are calibrated on the basis of data on the current measurements of
the intensity of transport flows in the defining points of the city, which determines the forecasting
potential of the model. Figure 4 shows the traffic simulation for the Vasileostrovsky district of St.
Petersburg.
For the reconstruction of the movement of transport agents on a graph of the road network on the
basis of routes defined in model correspondences, a multi-agent model of traffic and passengers was
used. The model takes into account the characteristics of the agent, the class of vehicle (car, truck, bus,
etc.), the effect of traffic light and road signs, as well as the different driving styles within one class of

Figure 4: Simulation process with transport agents and the traffic jams

2492

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

vehicles. The movements of passengers are taken into account indirectly, through the number of
people who use public transport. The basis of such models comes from sets of rules that describe the
motion of agents in different situation; in particular, the model of motion in the traffic stream, changes
in the traffic line and the passage of controlled and uncontrolled intersections (Casas, Ferrer, & Garcia,
2010).
For development of this PSE user-defined layer was created. As distinct from previous application,
traffic simulation model was created within this layer from scratch. Input data for this model like
spatial position of the roads, traffic lights, traffic directions obtaining online from OpenStreetMaps.

6 Discussion
There are some open topics for discussion, such as the limitations on the scale of problems that
could be solved with this framework, and what kinds of research group would consider such
framework useful.
The first open question is: for what scale of problem would the framework be most convenient? Is
it possible to use it in small, low-detail applications, created purely for quick sampling? Possibly, but
this scenery is more appropriate for a single researcher and programmer, because such problems are
not worth the long discussions, construction of an all-out user interface and complete absence of errors
found in the framework. On the other hand, large multidisciplinary problems need interconnection
between researchers and programmers ( Houstis, Catlin, Rice, & Tsompanopoulou, 2000), attentive
development of business logic and good user interfaces.
The next question is, how convenient could the framework be for related research groups (Helbing,
2002) working on one large multidisciplinary problem? It seems obvious that each group has to work
with a staff of developers, architects and researchers who could have better spent time learning the
framework and working on the interconnection. Perhaps the proposed approach could be helpful for
large projects such as Global System Science (Jaeger, Jansson, & van der Leeuw, 2013) as one tool for
collaborating participants from different countries.

7 Conclusion
The framework presented in this paper provides a tool base for the rapid development of PSE in
the field of Urban Science. Such PSEs are oriented towards collaborative work, using distributed
computing technologies, computational-intensive modeling and GIS-technologies. Proposed
framework’s architecture offers flexible approach in PSE development, that allows each of creating
own and integrating existing solutions.
Few real examples of PSEs developed using proposed framework were presented. Current
implementation of the framework allows to create such PSEs in a shorter time with less labor effort.
Nonetheless, there is an opportunity here for such component frameworks and distributed
computational environments to play an important role in advancing the state of the art in
comprehensive computational science as Global System Science.

8 Acknowledgements
This work was financially supported by the Government of the Russian Federation, Grant 074U01.

2493

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

References
Houstis, E. N., Catlin, A. C., Rice, J. R., & Tsompanopoulou, P. (2000). An Agent-Based
Netcentric Framework for Multidisciplinary Problem Solving Environments. Computer Science
Technical Reports, Purdue University.
Kaplan, A. M., & Haenlein, M. (2010). Users of the world, unite! The challenges and opportunities
of social media. Business Horizons 53, 59-68.
Balcan, D., Goncalves, B., & Hu, H. (2010). Modeling the spatial spread of infectious diseases:
The GLobal Epidemic and Mobility computational model. Journal of Computational Science 1, 132145.
Batty, M. (2013). Big data, smart cities and city planning. Dialogues in Human Geography 3(3),
274-279.
Bettencourt, L. M. (2013). The Uses of Big Data in Cities. Santa Fe Institute Working Paper, 20.
Casas, J., Ferrer, J. L., & Garcia, D. (2010). Traffic simulation with aimsun. Fundamentals of
Traffic Simulation, 173-232.
Crooks, A., Castle, C., & Batty, M. (2008). Key challenges in agent-based modelling for geospatial simulation. Computers, Environment and Urban Systems 32, 417-430.
Gallopoulos, E., Houstis, E., & Rice, J. (1994). Computer as thinker/doer: problem-solving
environments for computational science. Computational Science & Engineering, IEEE (Volume:1 ,
Issue: 2 ), 11-23.
Haila, A. (2008). Urban Science. Report on a workshop series. Strasbourg: European Science
Foundation.
Helbing, D. (2001). Traffic and related self-driven many-particle systems. Reviews of modern
physics, Volume 73, 1068-1141.
Helbing, D. e. (2002). Simulation of Pedestrian Crowds in Normal and Evacuation Situations.
Pedestrian and Evacuation Dynamics, 21-58.
Jackson, B. (2013). Polyscape: A GIS mapping framework providing efficient and spatially
explicit landscape-scale valuation of multiple ecosystem services. Landscape and Urban Planning,
Volume 112, 74-88.
Jaeger, C. C., Jansson, P., & van der Leeuw, S. (n.d.). Global Systems Science. Orientation paper.
2013, p. 240. Retrieved from http://blog.global-systems-science.eu/wp-content/uploads/2013/06/GSS06-06-2013-F1.pdf
Jiang, J., Wang, P., & Lung, W. (2012). A GIS-based generic real-time risk assessment framework
and decision tools for chemical spills in the river basin. Journal of Hazardous Materials, Volumes
227–228, 280-291.
Junga, C., Suna, C., & Yuan, M. (2013). An ontology-enabled framework for a geospatial
problem-solving environment. Computers, Environment and Urban Systems 38, 45-57.
Knyazkov, K. V., Kovalchuk, S. V., & Tchurov, T. N. (2012). CLAVIRE: e-Science infrastructure
for data-driven computing. Journal of Computational Science. Volume 3, Issue 6, 504-510.
Knyazkov, K. V., Nasonov, D. A., Tchurov , T. N., & Boukhanovsky, A. V. (2013). Interactive
Workflow-based Infrastructure for Urgent Computing. Procedia Computer Science, Volume 18, 22232232.
Krzhizhanovskaya, V., Shirshova, G., Melnikova, N., Belleman, R., & Rusadi, F. (2011). Flood
early warning system: design, implementation and computational modules. Procedia Computer
Science, 106-115.
Kucuksari, S. (2014). An Integrated GIS, optimization and simulation framework for optimal PV
size and location in campus area environments. Applied Energy, Volume 113, 1601-1613.
Ludescher, T., Feilhauer, T., & Brezany, P. (2013). Cloud-Based Code Execution Framework for
scientific problem solving environments. Journal of Cloud Computing: Advances, Systems and
Applications, 2-11.

2494

The Framework for Problem Solving Environments in Urban Science

Zagarskikh et al.

Manyika, J. (2011). Big data: The next frontier for innovation, competition, and productivity.
McKinsey Global Institute, 156.
McKenney, D., & White, T. (2013, Volume 26 Issue 1). Distributed and adaptive traffic signal
control within a realistic traffic simulation. Engineering Applications of Artificial Intelligence, pp.
574-583.
van der Laan, M., Kellet, R., & Girling, C. (2013). A Collaborative Multi-Touch, Multi-Display,
Urban Futures Tool. Proceedings of the Symposium on Simulation for Architecture & Urban Design,
Article No. 10.
Yakushev, A. V., Boukhanovsky, A. V., & Sloot, P. M. (2013). Topic crawler for social networks
monitoring. Proceedings of the 4th Conference on Knowledge Engineering and Semantic Web,
Volume 394, 214-227.
Yu, J. J. (2012). A GIS-based management and publication framework for data handling of
numerical model results. Advances in Engineering Software, Volume 45, №1, 360-369.
Zhi-xiang, X., Wen-li, G., Xiao-fang, Z., & De-zhi , Z. (2013). Design and Implementation of City
Fire Rescue Decision Support System. Procedia Engineering 52, 483-488.

2495

