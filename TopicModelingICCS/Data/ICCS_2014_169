Procedia Computer Science
Volume 29, 2014, Pages 1203–1215
ICCS 2014. 14th International Conference on Computational Science

A Dynamic Data Driven Application System for
Vehicle Tracking
Richard Fujimoto1, Angshuman Guin2, Michael Hunter2, Haesun Park1,
Gaurav Kanitkar1, Ramakrishnan Kannan1, Michael Milholen1, SaBra Neal1,
and Philip Pecher3
Georgia Institute of Technology, Atlanta, Georgia 30332, USA
1
School of Computational Science and Engineering
2
School of Civil and Environmental Engineering
3
School of Industrial and Systems Engineering

Abstract
Tracking the movement of vehicles in urban environments using fixed position sensors, mobile
sensors, and crowd-sourced data is a challenging but important problem in applications such as law
enforcement and defense. A dynamic data driven application system (DDDAS) is described to track a
vehicle’s movements by repeatedly identifying the vehicle under investigation from live image and
video data, predicting probable future locations, and repositioning sensors or retargeting requests for
information in order to reacquire the vehicle. An overview of the envisioned system is described that
includes image processing algorithms to detect and recapture the vehicle from live image data, a
computational framework to predict probable vehicle locations at future points in time, and a power
aware data distribution management system to disseminate data and requests for information over ad
hoc wireless communication networks. A testbed under development in the midtown area of Atlanta,
Georgia in the United States is briefly described.
Keywords: Dynamic data driven application system, vehicle tracking, data distribution management

1 Introduction
Tracking the movement of vehicles in complex urban environments using mobile sensors is a
challenging, but important problem. Complex urban environments include multiple modes of
transportation such as foot, bicycle, vehicle, and mass transit, among others. Individuals may utilize
different modes during a single excursion. Accurately tracking and predicting the location of an
individual presents many technical challenges in areas such as image analysis, identification,
recognition, scene analysis, and trajectory detection and prediction.
Dynamic data-driven application systems (DDDAS) [1] provide an adaptive approach to addressing
this problem. DDDAS approaches have been widely studied and applied to various science and
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2014.05.108

1203

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

engineering disciplines for a myriad of purposes. Typical applications concern system monitoring such
as assessing structural and material health [2, 3], tracking wildfires [4, 5] and hurricanes [6]. Another
important class of applications concerns system optimization. For example, in an emergency situation,
alternate evacuation scenarios may be modeled and evaluated in order to minimize evacuation time.
The evacuation plan may need to adapt as the evacuation evolves when unforeseen events arise [7].
Additional examples include path planning for unmanned aerial vehicles [8, 9], parameter tuning for
computer networks [10], management of semiconductor manufacturing systems [11], managing
natural disasters [12-14], and optimizing surface transportation systems to mitigate congestion and
reduce travel delays [15, 16]. Online simulations are also used to gain insights into the physical
systems that are difficult or impossible to observe, e.g., identifying an accident using cell phone data
[17, 18] and determining the boundary conditions of fluid-thermal systems [19].
Here, the DDDAS processing cycle is examined with respect to vehicle tracking. This cycle is
depicted in Figure 1. It includes a continuously repeating procedure consisting of three phases:
1. Sense. Fixed position and mobile sensors and crowd-sourced data are used to identify and
re-identify the current location of the vehicle of interest. Sensors may include fixed
position cameras or mobile sensors mounted in unmanned aerial vehicles or carried by
individuals. Identifying and re-identifying the vehicle given known characteristics (type,
color, make and model, etc.) using cameras of unknown or changing orientation and
location present significant challenges in image processing.
2. Predict. Based on information concerning the last known position of the vehicle and
additional information such as likely travel patterns, historical travel data and dynamic
information such as road congestion, a computational framework predicts future
locations of the vehicle using a combination of analytic methods and distributed
simulations. The computational framework constructs a probability map that indicates the
likelihood the vehicle will reside at specific locations at future points in time.
3. Adapt. The sensor network is adapted to maximize the probability of re-identifying the
vehicle. This may imply moving UAVs and other mobile sensors to new locations, or redirecting queries and investigations in crowd-sourced data to have greater focus on
different geographic locations.

1204

Figure 1. DDDAS processing loop for vehicle tracking.

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

The remainder of this paper outlines the computational framework for the envisioned system. An
overview of the software architecture is first described, as well as a testbed being implemented in the
midtown area of Atlanta, Georgia in the United States. The predictive computational framework is
then discussed. This is followed by a discussion of on-going work concerning the development of
power-efficient data distribution mechanisms in mobile ad hoc communication networks.

2 System Architecture and Testbed
Online data-driven distributed simulation systems rely upon a collection of sensors, simulation
clients, servers, and communication infrastructure to collaboratively model an area (see Figure 2). The
envisioned system architecture includes data collected from a variety of sensors with some local data
processing capability (e.g., image recognition software) and results made available to clients (e.g.,
mobile simulators) and servers. In many cases the data are aggregated locally to reduce
communication requirements. Video and other traffic sensors produce data such as flow rates and
average vehicle speed along links in the road network. Crowd-sourced data and other traffic
information must be integrated to establish the current state of the system. Composite values of key
parameters are stored and time stamped in a data structure known as space-time memory (STM). The
STM resides at the server and collects estimated values of state variables (e.g., traffic flow rates for
individual links of the road network) and the time values for which these estimates are valid. It acts as
an intermediary and integrator for communication and data requirements. Sensors provide readings
directly to the STM. In addition, simulation clients may request values from the STM or other sources.
Software executing data analysis algorithms and predictive simulations are used to compute a
probability map that estimates the likelihood the monitored vehicle will reside in particular locations
at some time in the future. These computations may be performed at the server, or in some cases
through a distributed computation executing in the clients. In the latter case a methodology called ad
hoc distributed simulations has been developed where clients cooperate to collectively create a
simulation to estimate the future state of the system [15].
Communication is handled through Run-Time Infrastructure software termed the TRTI motivated
by the modeling and simulation High Level Architecture (HLA). Clients may poll for information
concerning specific types of data for geographic regions in order to receive all sensor and simulation
messages published for that region. This also allows for mobile nodes because simulators may
successively subscribe and unsubscribe to regions. Here, the Data Distribution Management (DDM)
services defined in the HLA are used to provide these communication services. Because the DDM
services utilize mobile clients, power consumption is an important consideration in defining suitable
algorithms to implement the DDM services.
Space-Time Memory
(STM)

TRTI

Sensor

Sensor

Client Simulator

Client Simulator

Figure 2: Overall system architecture. All communication is routed through the TRTI.

A testbed including cameras and communication infrastructure to monitor a portion of the
midtown Atlanta region adjacent to the Georgia Tech campus is under development to create a
physical realization of this architecture. The testbed includes nine fixed location cameras that provide

1205

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

live video streams of vehicle and pedestrian traffic along road segments covering a four block region
near the intersection of 5th and Spring street, a busy intersection surrounded by businesses and office
complexes (see Figure 3). This testbed is being augmented with mobile cameras as well as the use of
LPR (License Plate Recognition) technology to assist in vehicle identification. The testbed includes
wireless LAN communication throughout the testbed area.

Figure 3: Locations of cameras and viewed areas within the testbed.

This testbed provides an infrastructure for real-world experimentation with data-driven
simulations. The current implementation supports individual simulation clients reading and writing
values to the STM while simulating the testbed area. In addition to client simulators, sensors and “the
crowd” provide instrumented data to drive the simulations.

3 System Architecture and Testbed
We present a framework to track a mobile target in a road network (without access to perfect
information) by intermittent mobilization of sensors. The objective is to quickly predict future
locations of the target while minimizing the number of required sensor observations. This framework
dynamically selects an appropriate prediction model at runtime based upon what data is currently
available.
Consider a directed graph for the road network G(V, E) with nodes representing intersections and
links representing road segments. A target entity ET, has been observed at vertex n0 at time t0. ET
travels through G on directed edges and through vertices. We assume ET can neither be globally
observed nor tracked in real time. It is assumed that ET behaves in a non-evasive fashion. If ET is on an
edge, it is assumed, for simplicity, that ET is also mapped to the vertex to which the edge points.
n=[n0, n1, n2, ..., nf] and a=[a0, a1, a2, ..., af] are used to denote the node-vector and the arc-vector of
ET's true, realized path. n(t) and a(t) return the nearest vertex that is being approached by ET and ET's
current edge for a given time t, respectively. s(t) returns a scalar between 0 and 1 denoting ET's
position at t on a(t).
As soon as possible after ET comes to a stop (at t=tf), we wish to find ET's exact location (i.e., a(tF)
and s(tF)). In order to accomplish this final goal, sensor entities E1, E2, E3, ..., ES are intermittently
mobilized within the network, and each may test whether any one point in G contains ET at timestamps
t1, t2, t3, ..., tk.
The lag (in time units) between two consecutive rediscovery attempts is determined by ensuring
that the likelihood of losing ET at the next test timestamp does not exceed a user set tolerance

1206

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

probability ploss. At the same time, we wish to maximize the lag within a test cycle, ti, in order to
minimize the likelihood that ET becomes aware it is being tracked, and assume this likelihood
increases monotonically as the candidate test interval decreases.
For a fixed ploss, the critical lag ti* is determined so that the sensors may attempt to observe ET
after the sum of ti* and the previous test timestamp. This is accomplished by enumerating all paths
that could potentially be reached by ET after ti* time units. This is implemented with a microscopic,
and data-driven traffic simulation that is called by a tree construction algorithm called FIND-OFFSET
that is described below.
If at any test timestamp, none of the S sensors observes ET, either ET is lost or ET stopped in the
maximal hull that connects all vertices that can be reached after ti* time units from the time of ET's
last observed vertex. The search can occur in structured fashion, from the last observed point to the
edge of the hull with S search paths that occur in parallel (along points that have the highest
probability mass). In this final mode, each sensor has a fixed speed of testing a segment on an edge
(length per time unit).
Once S and ploss are determined, the S mobile sensors are placed at the S locations most likely to
contain ET at each rediscovery attempt, the third phase of the DDDAS loop described earlier.
Therefore, the key is to construct an accurate conditional probability map of ET's location in G at time
ti+1 given the last known positions of ET at time ti, ti-1, ..., t0. Several methods are presented to estimate
(a(ti+1), s(ti+1)).
To summarize, the high-level tracking framework algorithm follows:
1 Fix S and ploss
2 While( ET was detected in the last test )
3
Determine the critical lag, ti* (FIND-OFFSET)
4
Determine the probability map @ti+ti* (PROBABILITY-MAP)
5
Place the E1, E2, E3, ..., ES at the S most likely locations
6
Test at ti+ ti*
7 Find ET's stopping point within the reachable hull

3.1 FIND-OFFSET: Determining the critical lag
The objective of FIND-OFFSET is to find the critical lag to the next test, the maximum time that
ET can go unobserved, while still satisfying ploss. This is done with a tree construction algorithm,
where the vertices represent intersections and arcs represent roads between those intersections. The
algorithm first starts in a global search (roughly, level-by-level) and then proceeds to engage in a local
search with an S-element window (node-by-node) until the critical lag is identified. If ploss is 0, the
algorithm can be sped up substantially by simply checking for cardinality and side-stepping the call to
the evaluation function PROBABILITY-MAP (which is not redundant if p loss is 0 because the final test
mode also invokes it).

3.2 PROBABILITY-MAP: Path speculation
In order to properly assess the likelihood of different locations, all relevant and available data must
be considered. In accord with the DDDAS paradigm, the system will automatically switch prediction
modes, or 'tiers,' based on the data that becomes available during runtime (crowd-sourced or collected
from other sources). There are three prediction tiers that this approach uses, with higher tiers utilizing
more specific data, but with more promising accuracy.
•

Tier 1: No or Static Data. If no historical data is available, or only general information
(popularity or population density of different zones), inferences can still be made from

1207

A Dynamic Data Driven Application System for Vehicle Tracking

•

•

Fujimoto et.al

ET‘s trajectory that has been observed thus far. One particular clue to consider is
efficiency. Krumm developed a static prediction model [24] that assigns higher
likelihoods to areas that are consistent with the path taken thus far. Thus, inefficient
potential trajectories are given less weight. For use in the overall procedure, one
additional factor can be conditioned against – time. Since we know when the next test will
occur, all cells except the ones that could be reached after the critical lag can be excluded.
Tier 2: Past Trajectories of the Population. If ET is currently in an area where trajectories
have been observed in the past, population path similarity information can be used. One
way to store this information is via decision trees holding relative frequencies at each
branching point (see Section 3.3 below).
Tier 3: Past Trajectories of ET. The ideal situation is to have historical data available from
the vehicle being tracked. Laasonen [25] developed a model where similar routes of an
individual are clustered. If an observed path is similar to an existing composite path, the
composite path is merged with the observed path. Merging, in this case, refers to finding
an alignment between two routes (via the dynamic programming procedure to the edit
distance problem) and updating the position of intermediate locations with a new average.
A similarity index is used for inserting into the appropriate cluster when a new path is
observed and when the future path is to be predicted from a current location. Instead of
using a quadratic time edit distance algorithm, Laasonen suggests using a heuristic,
inclusion similarity:
I(r, t) = T/|t|

where r refers to the composite path, t refers to the path whose similarity is being computed, and T
refers to the number of elements in t that appear in r in the same order. Laasonen further makes use of
factors such as the time of day, the particular weekday, relative frequency, and the previously
observed base (a base refers to a place that is deemed important to a person and is crystallized when
the person spends a significant amount of time at such a place).

3.3 Past and Future Trees
This section introduces a structure to store and retrieve traffic flow information in a road network.
Conceptually, construct a past tree for every decision point (e.g., the road in the western side on a
particular intersection) and a future tree for each node in a past tree. In a particular implementation the
future tree may be encoded as an array (with indices corresponding to breadth-first traversal order of
all future decisions, with the arbitrary preference order of East->North->East->South, and actual
elements storing the frequency of those decisions) or another backing data structure. Each recorded
path up to the point that the past tree represents is recorded on the given past tree. After that point, the
remaining path is inserted in the future tree. Instead of storing redundant trajectory data on multiple
past trees (for any one given path), modifications can be added to reduce the storage requirement (this
depends on the data structure used). It is possible to limit storage requirements to some number of the
observed trajectories; this number is determined by attacking the sampling size determination
problem. If decision node ids are encoded with a binary representation that is not in the range of the
memory address space, the trajectories can be hashed along with a reference to the ordering of the
decision nodes. Thus, the trees can be constructed, on-demand, in average time O(T × l), where l is the
mean trajectory length and T is the number of trajectories. Multiple past trees can be constructed for a
given decision point to account for different predictive factors. Further, exponential smoothing can be
applied to give more weight to more recent observations.
A computational experiment was performed to sample the degree of accuracy provided by past and
future trees. It should be noted that the input (i.e., the trajectories of the drivers) is generated

1208

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

synthetically. The model is based on a 20-cell-by-20-cell cellular automaton that approximates a twodimensional metric space; this Euclidian plane serves as a conceptual model of a real-world region
with pervasive road network coverage. 200 trajectories are sampled as follows: the origin and
destination are first sampled by the pseudo-random selection of two distinguished cells. In this
selection, some cells are more likely to be realized than others because cell popularity is assigned - at
the beginning of the simulation - from a probability distribution that mimics the population
distribution of US cities. Further, positive correlation is forced upon the cell popularities. Thus, less
(more) popular cells are more likely to be near less (more) popular cells. After the origin and
destination are determined, the cells in between them are generated. At each intermediate cell, the
vehicle will transition to a cell that is in accord with the most efficient route with probability 0.625,
and to one that is not with probability 0.375; we call this behavior the desire for efficiency. In a second
simulation scenario, each cell has a 10% chance of leading into a predetermined tunnel of neighboring
cells, a preferred path. A cell that leads into a preferred path is privileged to temporarily override the
desire for efficiency until the vehicle exits the preferred path. Preferred paths (and their entry points)
are randomly generated at the beginning of the simulation experiment and don't change during the
execution. In the second scenario, preferred paths have a mean length of five cells; in the first
scenario, preferred paths are not used at all. Of the 200 simulated trajectories, 80% are first used to
populate the trees; the remaining 20% are used to predict destinations and compute errors.
Figure 4 shows the mean accuracy as a function of the fraction of the trip completed (ensemble
averages across the 0.2*200=40 trajectories). At each transition of any trajectory, the error model
queries the past and future trees of the current cell for all potential destinations of the vehicle and
computes the difference against the actual destination (in rectilinear distance). This error is weighted
with the corresponding probability estimate that is stored in the future tree. As expected, the accuracy
improves as the vehicle approaches its destination. Figure 4 also shows the results of an experiment
where the preferred paths are used. Each cell has a 10% chance of being the entry point to a
predetermined preferred path with the length being geometrically distributed with mean 5 cells. Past
and future trees show their predictive strength when there are unexplained trends within the
population.







	


	
	
	




	






	


          



Figure 4: Error plots of mean rectilinear distance between actual and predicted destination.

4 Power Aware Data Distribution Management
The growing use of mobile devices has made the issue of power consumption a vital concern. Our
particular concern here is the power consumed to disseminate information among mobile devices in

1209

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

the DDDAS system, both for communication and computation. This part of the project is examining
the question of power consumption in mobile devices (termed federates) such as those carried by
pedestrians moving in an urban environment communicating through a mobile ad-hoc network that
uses Data Distribution Management services for data dissemination. Here, we examine power
consumption in grid and region based implementation approaches for DDM in order to determine the
relative power consumption properties of each approach.
Data Distribution Management is an approach defined in the High Level Architecture to reduce
traffic flow over a network. HLA DDM services are based on concepts known as the routing space and
regions defined within the routing space. Here, a routing space may be viewed as the two-dimensional
(the concept is easily extend to three dimensions) geographical area being considered, and a region
may be viewed as an identified rectangular area within this geographic area. DDM services depend on
the specifications defined by each federate indicating which data they with to publish and receive.
Federates define their own publication and subscription regions that define the areas where the data is
relevant (publication regions) or where the federate has interests (subscription regions). For example, a
federate may publish congestion data for a region corresponding to its current location, and subscribe
to receive information of areas in its planned future trajectory. The DDM matching process consists of
determining overlapping publication and subscription regions to determine who receives what
published information. Specifically, if a federate’s subscription region overlaps with the publication
region associated with a specific piece of information, the federate shall receive a message including
the published information.
Two approaches to implementing DDM services are known as the grid-based and region-based
methods [26]. The focus of this research is to evaluate the power efficiency of these implementation
approaches. Each of these approaches is described next. It is assumed that the underlying
communication infrastructure provides a multicast communication service. The implementation of the
DDM mechanisms is largely concerned with defining the meaning of the multicast groups and
determining their membership.

4.1 Fixed Grid Approach
The Fixed Grid DDM method divides the routing space into fixed sized grid cells, and a multicast
group is associated with each cell (see Figure 5). When a message is generated, it is associated with a
specific publication region, e.g., P1 in that figure. The message is sent to each multicast group
corresponding to a grid cell that overlaps with the publication region. Thus, messages sent with
publication region P1 will be sent to multicast groups 10, 11, 15, 16, 20, and 21 in this figure. If a
federate is subscribed to a subscription region (S1 in Figure 5), it will join the multicast groups that
correspond to grid cells that overlap with that subscription region (6, 7, 11, 12,16, and 17).

Figure 5: Grid Based DDM

1210

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

This approach ensures that each federate will receive all messages for information to which it has
subscribed. It also has the advantage that determination of those groups to which a message should be
sent as well as those groups to which a federate must subscribe can be easily determined locally,
minimizing the power required to manage the subscriptions. On the other hand, it has the disadvantage
that this approach may result in federates receiving duplicate messages (the same message sent to
different multicast groups) or extra messages (messages where the publication and subscription region
share common grid cells, but the regions do not overlap). Such duplicate and unnecessary messages
clearly waste power.
The size of the grid cells impacts the cost of sending and receiving irrelevant data. Van Hook and
Rak explored the effect of grid space sizes and the effect it has on multicast group assignment and
communication cost [28]. They concluded that communication cost becomes increasingly greater as
the size of the grid cell increases because it increases the number of irrelevant and duplicated
messages. This issue has been explored by Tan et al. who have proposed an alternate approach called
agent-based DDM to decrease the amount of irrelevant data sent across the network [29].

4.2 Region-Based Approach
The region based DDM approach directly compares overlapping publication and subscription
regions in order to determine the composition of multicast groups. Each publication region is assigned
to a unique multicast group. Federates subscribe to a multicast group if one or more of their
subscription regions overlaps with the publication region associated with the group. For example, for
the regions shown in Figure 6, two multicast groups will be created, one for P1 and one for P2.
Federates subscribed to region S1 will join the multicast group associated with P1, but not that for P2.

Figure 6:Region Based DDM
This approach eliminates the duplicated or unnecessary message problems seen in the grid-based
implementation, thereby reducing power consumption. However, the reconfiguration of the group
memberships when regions change is more complex, and requires a computation to compare
publication and subscription regions and as well as to reconfigure the group. This DDM computation
has a complexity of O(n2) where n is the number of publication/subscription regions. Further,
additional communications will be required to determine how to reconfigure the groups, requiring an
expenditure of power not required in the grid based approach. Because it directly compares regions for
overlap, this approach is sometimes referred to as a “brute force” approach to DDM.

1211

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

The region based DDM approach has been implemented on the MAK high performance RTI by
Wood [29]. Although region base is more efficient its computation time is high due to the complexity
of having to compare all regions during the matching process.

4.3 Preliminary Results
An initial evaluation comparing the grid and region-based approaches in terms of computation and
communication power consumption was completed. These results are based on an implementation of
the local computation on a Google Nexus 4, using PowerTutor to measure power consumption for the
android device. Power Tutor is a smartphone application that measures the power consumption of
CPU, Wi-Fi, 3G, and applications running on Google based android devices [31]. We first focus on
the power consumed by the CPU, followed by consideration of power consumed for communications.
The DDM grid algorithm implementation reported here compares regions relevant to a particular
federate with the overall grid structure and constructs a data structure indicating the multicast groups
to which the device will subscribe and send messages. The algorithm is implemented in Java. For this
experiment, the routing space is assumed to be a 20 x 20 unit space. This space was divided into 400
grids of 20x20 units each. The number of federates was varied from 100 to 1000 incrementing by 100
for each experiment. The publication and subscription regions of every federate were randomly placed
in the routing space. The DDM region implementation compares the publication region relevant to a
particular federate with regions of federates whose subscription regions overlap that particular
federate’s publication region. The number of federates were varied from 100 to 1000. The publication
region for each federate were placed 0.5 miles from the federate’s current location and each federate’s
subscription region was placed one mile from the federate’s current location.
Power measurements for varying numbers of federates are shown in Figure 7. It is seen that the
region based approach consumes much more power as the number of federates increases. This reflects
the O(N2) computation required to determine overlaps between subscription and publication regions.
The grid based DDM computation requires the federate to only determine the grid cells to which its
regions overlap which increases linearly with the number of federates.

Figure7: Computation Power Consumption Results of DDM: Grid vs. Region.

1212

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

The evaluation of power consumption during communication of the grid and region based DDM
methods were evaluated through simulation. The network simulator NS-3 with its wifi-radio energy
model were used in order to estimate power consumption [27]. The grid based implementation
consisted of implementing a grid of 20X20 units. Our simulation area covered the Georgia Institute of
Technology’s campus which is approximately 1280 by 1280 meters. The number of federates used in
our set of experiments ranged from 10 to 90; excessively long execution times for NS-3 precluded
experimenting with a larger number of federates. As before, each federate’s publication region was
placed within half a mile of its current location and its subscription region placed within a mile. The
region based experiments consisted of a particular federate sending a message to those federates
whose subscription regions overlapped with the sending federate’s publication region. The results are
shown in Figure 8. Our results show that when comparing power consumed during communication
the region based DDM approach consumes less power. This is because region based DDM requires
fewer communications than grid based DDM by avoiding duplicate and irrelevant messages.

Figure 8: Power Consumption for communication in DDM grid and region based implementations.

5 Future Work
Tracking vehicles in complex urban environments is a difficult problem of great importance for
applications such as law enforcement and security. This paper gives an overview of a project
examining the use of DDDAS to attack this problem. Specific research is focusing on the system
design and implementation using a testbed in the midtown Atlanta area, the computational framework
for predicting future vehicle locations, and power aware data dissemination in the network. Current,
on-going research is focusing on developing and evaluating algorithms for location prediction and
comparing alternate approaches. Approaches in the three-tier framework described earlier are being
explored. Data distribution management research is focused on a comprehensive assessment of power
consumption including both communications and computation to assess the power tradeoffs between
grid based and region based approaches.

1213

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

Acknowledgement
Funding for this project was provided by AFOSR Grant FA9550-13-1-0100.

References
Voronkov, A. 1. F. Darema, "Dynamic Data Driven Applications Systems: A New Paradigm for Application
Simulations and Measurements," in International Conference on Computational Science, 2004, pp. 662-669.
2. J. Cortial, C. Farhat, L. J. Guibas, and M. Rajashekhar, "Compressed Sensing and Time-Parallel Reduced-Order
Modeling for Structural Health Monitoring Using a DDDAS," in Computational Science – ICCS 2007, Y. Shi, G. D. v.
Albada, J. Dongarra, and P. M. A. Sloot, Eds., ed Berlin: Springer, 2007, pp. 1171–1179.
3. C. Farhat, J. G. Michopoulos, F. K. Chang, L. J. Guibas, and A. J. Lew, "Towards a Dynamic Data Driven System for
Structural and Material Health Monitoring," in Computational Science – ICCS 2006, V. N. Alexandrov, G. D. v. Albada, P.
M. A. Sloot, and J. Dongarra, Eds., ed Berlin: Springer Berlin Heidelberg, 2006, pp. 456–464.
4. C. C. Douglas, R. A. Lodder, J. D. Beezley, J. Mandel, R. E. Ewing, Y. Efendiev, et al., "DDDAS Approaches to
Wildland Fire Modeling and Contaminant Tracking," in Proceedings of the 2006 Winter Simulation Conference, 2006, pp.
2117–2124.
5. J. Mandel, L. S. Bennethum, M. Chen, J. L. Coen, C. C. Douglas, L. P. Franca, et al., "Towards a Dynamic Data Driven
Application System for Wildfire Simulation," in Computational Science – ICCS 2005, V. S. Sunderam, G. D. v. Albada, P.
M. A. Sloot, and J. J. Dongarra, Eds., ed Berlin: Springer Berlin Heidelberg, 2005, pp. 632–639.
6. G. Allen, "Building a Dynamic Data Driven Application System for Hurricane Forecasting," in Computational Science –
ICCS 2007, Y. Shi, G. D. v. Albada, J. Dongarra, and P. M. A. Sloot, Eds., ed Berlin: Springer Berlin Heidelberg, 2007, pp.
1034–1041.
7. A. Chaturvedi, A. Mellema, S. Filatyev, and J. Gore, "DDDAS for Fire and Agent Evacuation Modeling of the Rhode
Island Nightclub Fire," in Computational Science – ICCS 2006, V. N. Alexandrov, G. D. v. Albada, P. M. A. Sloot, and J.
Dongarra, Eds., ed Berlin: Springer Berlin Heidelberg, 2006, pp. 433–439.
8. F. Kamrani and R. Ayani, "Using On-Line Simulation for Adaptive Path Planning of UAVs," in Proceedings of the 11th
IEEE International Symposium on Distributed Simulation and Real-Time Applications, 2007, pp. 167-174.
9. G. R. Madey, M. B. Blake, C. Poellabauer, H. Lu, R. R. McCune, and Y. Wei, "Applying DDDAS Principles to
Command, Control and Mission Planning for UAV Swarms," in Proceedings of the International Conference on
Compuational Science, 2012.
10. T. Ye, H. Kaur, S. Kalyanaraman, and M. Yuksel, "Large-scale Network Parameter Configuration using an On-line
Simulation Framework," IEEE/ACM Transactions on Networking, vol. 16, pp. 777–790, 2008.
11. M. Y. H. Low, K. W. Lye, P. Lendermann, S. J. Turner, R. T. W. Chim, and S. H. Leo, "An Agent-based Approach for
Managing Symbiotic Simulation of Semiconductor Assembly and Test Operation," in Proceedings of the 14th International
Joint Conference on Autonomous Agents and Multiagent Systems, ed New York: Association for Computing Machinery,
Inc., 2005, pp. 85–92.
12. A. K. Patra, M. Bursik, J. Dehn, M. Jones, M. Pavolonis, E. B. Pitman, et al., "A DDDAS Framework for Volcanic Ash
Propagation and Hazard Analysis," in Proceedings of the International Conference on Compuational Science, 2012.
13. J. Mandel, J. D. Beezley, A. K. Kochanski, V. Y. Kondratenko, and M. Kim, "Assimilation of Perimeter Data and
Coupling with Fuel Moisture in a Wildland Fire – Atmosphere DDDAS," in Proceedings of the International Conference on
Compuational Science, 2012.
14. C. Brun, T. Artés, T. Margalef, and A. Cortés, "Coupling wind dynamics into a DDDAS forest fire propagation
prediction system," in Proceedings of the International Conference on Compuational Science, 2012.
15. R. M. Fujimoto, M. Hunter, J. Sirichoke, M. Palekar, H.-K. Kim, and W. Suh, "Ad Hoc Distributed Simulations," in
Principles of Advanced and Distributed Simulation, 2007.
16. W. Suh, M. Hunter, and R. M. Fujimoto, "Ad Hoc Distributed Simulation for Transportation System Monitoring and

1214

A Dynamic Data Driven Application System for Vehicle Tracking

Fujimoto et.al

Near-Term Prediction," Simulation Modeling Practice and Theory, vol. 41, pp. 1-14, 2014.
17. G. R. Madey, G. Szabo, and A.-L. Barabási, "WIPER: The Integrated Wireless Phone Based Emergency Response
System," in Proceedings of the 2006 International Conference on Computational Science, 2006, pp. 417–424.
18. G. R. Madey, A.-L. Barabási, N. V. Chawla, M. Gonzalez, D. Hachen, B. Lantz, et al., "Enhanced Situational
Awareness: Application of DDDAS Concepts to Emergency and Disaster Management," in Proceedings of the 2007
International Conference on Computational Science, 2007, pp. 1090–1097.
19. D. Knight, Q. Ma, T. Rossman, and Y. Jaluria, "Evaluation of Fluid-thermal Systems by Dynamic Data Driven
Application Systems – Part II," in Proceedings of the 2007 International Conference on Computational Science, 2007, pp.
1189–1196.
20. P. Viola and M. J. Jones, "Robust real-time face detection," International journal of computer vision, vol. 57, pp. 137154, 2004.
21. S. Sivaraman and M. M. Trivedi, "A General Active-Learning Framework for On-Road Vehicle Recognition and
Tracking," IEEE Transactions on Intelligent Transportation Systems, vol. 11, pp. 267-276, 2010.
22. Y.-M. Chan, S.-S. Huang, L.-C. Fu, and P.-Y. Hsiao, "Vehicle Detection Under Various Lighting Conditions by
Incorporating Particle Filter," in Intelligent Transportation Systems Conference, 2007, pp. 534-539.
23. IEEE Std 1516.1-2010, "IEEE Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) -Interface Specification," ed. New York, NY: Institute of Electrical and Electronics Engineers, Inc., 2010.
24. J. Krumm, "Real Time Destination Prediction Based On Efficient Routes," in SAE International, 2006.
25. K. Laasonen, "Route Prediction from Cellular Data," in Workshop on Context-Awareness for Proactive Systems, 2005.
26. R. M. Fujimoto, Parallel and Distributed Simulation Systems: Wiley Interscience, 2000.
27. Riley, G. F. and T. R. Henderson (2010). The ns-3 network simulator. Modeling and Tools for Network Simulation,
Springer: 15-34.
28. S. J. Rak and D. J. Van Hook, "Evaluation of grid-based relevance filtering for multicast group assignment," in Proc. of
14th DIS workshop, 1996, pp. 739-747.
29. G. Tan, L. Xu, F. Moradi, and S. Taylor, "An Agent-based DDM for High Level Architecture," in Proceedings of the
15th Workshop on Parallel and Distributed Simulation, ed, 2001, pp. 75-82.
30. D. D. Wood, "Implementation of DDM in the MAK High Performance RTI," in Proceedings of the Simulation
Interoperability Workshop, 2002.
31. L. Zhang, B. Tiwana, R. Dick, Z. Qian, Z. M. Mao, Z. Wang, et al., "Accurate Online Power Estimation and Automatic
Battery Behavior Based Power Model Generation for Smartphones," in Proceedings of the IEEE/ACM/IFIP International
Conference on Hardware/Software Codesign and System Synthesis, 2010, pp. 105-114. (2004). EasyChair

conference system. Retrieved from easychair.org

1215

