Java-Based Grid Service Spread and Implementation in
Remote Sensing Applications
Yanguang Wang1, Yong Xue1,2,*, Jianqin Wang1, Chaolin Wu1, Yincui Hu1,
Ying Luo1, Shaobo Zhong1, Jiakui Tang1, and Guoyin Cai1
1
State Key Laboratory of Remote Sensing Science, Jointly Sponsored by the Institute of
Remote Sensing Applications of Chinese Academy of Sciences and Beijing Normal University,
Institute of Remote Sensing Applications, Chinese Academy of Sciences, P.O. Box 9718,
Beijing 100101, China
2
Department of Computing, London Metropolitan University, 166-220 Holloway Road,
London N7 8DB, UK
{wyg_nju@hotmail.com, y.xue@londonmet.ac.uk}

Abstract. Remote sensing applications often concern very large volumes of
spatio-temporal data, the emerging Grid computing technologies bring an
effective solution to this problem. The Open Grid Services Architecture
(OGSA) treats Grid as the aggregate of Grid service, which is extension of Web
Service. It defines standard mechanisms for creating, naming, and discovering
transient Grid service instances; provides location transparency and multiple
protocol bindings for service instances; and supports integration with
underlying native platform facilities. It is not effective used in data-intensive
computing such as remote sensing applications because its foundation, Web
Service, is not efficient in scientific computing. How to increase the efficiency
of the grid services for a scientific computing? This paper proposes a
mechanism Grid service spread (GSS), which dynamically replant a Grid
service from a Grid node to the others. We have more computers to provide the
same function, so less time can be spent completing a problem than original
Grid system. This paper also provides the solution how to adept the service
duplicate for the destination node’s Grid environment; how each service
duplicate communicates with each other; how to manage the lifecycle of
services spread etc. The efficiency of this solution through a remote sensing
application of NDVI computing is demonstrated. It shows that this method is
more efficient for processing huge amount of remotely sensed data.

1 Introduction
With the development of modern space remote sensing technology, the sensors have
got a great increment in spatio-resolution and spectrum-resolution, and have made
huge volumes of data for our remote sensing applications. While today’s PC is faster
than the Cray supercomputer of 10 years ago, it is still often inadequate to provide a
*

Corresponding author.

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 496 – 503, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Java-Based Grid Service Spread and Implementation in Remote Sensing Applications

497

satisfying computing power, and at the same time the resources of supercomputers are
very precious and expensive. Grid computing can give a good solution (Foster and
Kesselman 1999). Grid computing technology is being developed to solve two kinds
of problems. First, there is much resource wasting in the Internet. Such resources
include processing cycles, disk space, data and network. Second, the integration of
different systems deployed in a large company tends to be difficult. We need standard
technology and platform to support such integration.
To solve this problem, Grid computing considers all the available resource in the
network as a “super computer”. User can transparently use and manage all these
resources. Grid computing also provides a series of standard to integrate
heterogeneous systems.
Since 2002, Open Grid Service Architecture (OGSA) which integrates the Globus
has stood with the Web Service standard, and is going to be the unified standard for
the Grid computing. The basic concept of OGSA is essentially a Web service with
improved functionalities and behaviors. Web service is selected because it is a more
suitable candidate for Internet scale application compared to other distributed
computing technologies, such as CORBA, RMI and EJB (Ceram 2002). First, web
service is based on a collection of open standards, such as XML, SOAP, WSDL and
UDDI. It is platform independent and programming language independent because it
uses standard XML language. Second, web service uses HTTP as the communication
protocol. That is a big advantage because most of the Internet’s proxies and firewalls
will not mess with HTTP traffic. However, Web service is not powerful to build
complex applications. It lacks some functionality, such as lifecycle management,
notification and persistency. And web service is stateless which means it can’t
remember what has been done from one invocation to another.
Grid service provides more versatile functionality than web service. We will cover
these functionalities in Section 2. Although Grid services get many advantages from
Web Services, at the same time they also inherit the low efficiency in scientific
computing of Web Service. This paper will propose a mechanism – Grid Services
Spread (GSS). It allows the Grid services on a Grid node to extend dynamically to the
others in order to increase the number of the nodes serving for the same task. We will
focus on this mechanism in details in Section 3. At present, the implementation is
based on Java. In Section 4, we will apply this mechanism for a remote sensing
application to demonstrate how it works and what it can give us.

2 Background About Grid Service and Globus Toolkit 3
A computational Grid is a hardware and software infrastructure that provides
dependable, consistent, pervasive, and inexpensive access to high-end computational
capabilities. And the latest development of Grid technology gives some progress, that
Grid computing is concerned with coordinated resource sharing and problem solving
in dynamic, multi-institutional virtual organizations, to the definition.
Comparing Web Services, Grid services has been created with the advatanges
including transient service which make the life of the serive can be managed by users
and service data which indicates the characters of the service, lifecycly management

498

Y. Wang et al.

and notification. These adtantages are the tools which we use for building the Grid
services spread.
The Globus Toolkit (http://www.globus.org) developed by Argon National
Laboratory, University of Chicago and University of Southern California, has become
the industrial standard Grid middleware. The famous projects, which used and are
using Globus Toolkit, include SF-Express, NASA OVERFLOW-D2, X-ray CMT,
Cactus, MM5, National Technology Grid, The European DataGrid, NASA
Information Power Grid, ASCI Distributed Resource Management (DRM) Testbed,
etc. Globus Toolkit 3 (GT3) is the integrate of the original Globus Toolkit and Web
Services, and it implements The Open Grid Services Infrastructure (OGSI)
specification, which is the technical specification of Grid services, as an extension to
Apache Axis (an implementation of SOAP).
GT3 core implements OGSI, it is a very important part in GT3. GT3 Base Services
layer maily include Globus Resource Allocating Mangagement (GRAM in short),
Index Service and Reliable File Transfer Service (RFT) which are very important to
Globus Toolkit and GSS. GT3 Data Service layer includes Replica Management,
which is very useful in applications that have to deal with very big sets of data. When
working with large amount of data, we're usually not interested in downloading the
whole thing, we just want to work with a small part of all that data. Replica
Management keeps track of those subsets of data we will be working with. GRAM
handles job submission and management. Index Services are used in discovering
services like UDDI in Web Services. RFT allows us to perform large file transfer
between the client and the Grid Service. In GT3 core, user does not subscribe to the
service instance, but to each service data element. This fine-grained notification may
reduce network traffic and improve the system performance.
Grid Service has plenty of contents, but the purpose of this paper is not describing
Grid Service in details. More knowleges about Grid Service can be obtained in the
The Globus Toolkit 3 Programmer's Tutorial (Sotomayor 2004).
Other Grid Service layer is maintained for the services made by user, for example
remote sensing application. These services are built on the Core, Base Service and the
Data Service in general. Security is an important factor in Grid-based applications,but
this paper doesn’t concern the security subject at this stage of study.

3 Problems and Solution
The biggest problem of Grid service solving data-intensive computing is that the
overhead of remote procedure call is very high. The main reason is that Web Services
are based on those standard interoperation technologies,such as XML, SOAP, UDDI
which use XML text datastreams.They need plenty of serialization and
unserialization. Web Services are necessary to Grid service for the privilege of
platform independent, programming language independent and going through Internet
proxies and firewalls.This paper will propose a method — Grid Services Spread,
which allow a Grid service extend to the other Grid nodes so that more PCs provide
their computing resource to the same client request.The request naturally will be
completed in shorter time,especially for the application using vast volumes of data.

Java-Based Grid Service Spread and Implementation in Remote Sensing Applications

499

3.1 Design
The main purpose of GSS is that let more Grid nodes dynamically join to serving for
one application. The GSS consists of, in fact, two Grid services source GSS (SGSS)
and destination GSS (DGSS). SGSS is in charge of packing all binary code of the
service spread, and then sending it to DGSS on the other Grid nodes. DGSS unpacks
the bundle from the SGSS and deploys all binary codes to correct paths as the
information provided by SGSS. RS Grid Service (Remote Sensing Grid Service) on
Node A is called Source Grid Service in GSS, and RS Grid Service Duplicate is
called Service Duplicate. Service Duplicate is, in fact, a grid service which have the
same functionalities with its Source Grid Service and more characters, such as
transience that its lifecycle depends on requests from clients.
More computing resource can been used dynamically with GSS. In Figure 1, Node
A only use NDVI services on Node B without GSS, while with GSS Node A can ask
SGSS on Node B to copy NDVI Grid service to the other nodes, such as Node C,
Node D, and then the NDVI Grid Service Client on Node A can send NDVI Service
request to the NDVI Service duplicates on Node C and D by the spread information
from SGSS on Node B. Three services will be working for the client at a same time,
at last the client will integrate the result from each service.
3.2 Challenges and Solutions
A Grid service need user to write the following three parts, Service interface which
are GWSDL file, Service implementation which are based on Java in this paper, and
the Deployment Description (WSDD). With help of them and ANT, which is a java
build tool, WSDD and the final java classes are encapsulated to a GAR file (Grid
Archive). ANT deploys this GAR file to the Grid services container. So, how to
realize GSS? We meet the following challenges.
Which files should be packed by SGSS?
Before copying a Grid service to the other node, the necessary files about this
service should be collected. Which files should be selected? This problem involves
two conditions. One is the original GAR file for the service exists. In this case, it is
only required to send this GAR file to DGSS as the pack. This situation is very
realistic and important. The other is the GAR file does not exist or we do not know
where the GAR file is. We find there are some information about the service in
undeploy directory. For a simple application, it is possible to make out GAR file
because we can find where the class files and the WSDL files are, but for a complex
one, it may not be so. The best method is maintaining GAR file in a specific
position and using a file to keep the mapping between the GSH of a Grid service
and where its GAR file is.
What kind are those services duplicate on the other nodes? Persistent or Transient?
A Grid service duplicate should be destroyed when the application it serves for is
finished, or there are more and more Grid service duplicates running on the node and
holding plenty of resources. Therefore those service duplicates should be transient.
Who decide the lifecycles of the service duplicates? The service duplicates can be
destroyed only when the service client receives satisfactory result.

500

Y. Wang et al.

Fig. 1. The contrast of NDVI service without and with GSS

How to deploy and undeploy the service duplicates dynamically without restarting the
container?
We find that GT3 does not support dynamic service deployment at present through
our experiments. A new Grid service deployment is always available only by
restarting the container. Our experiments indicate that it’s mainly an Axis (a SOAP
engine) problem. We can realize dynamic Grid service deployment in GT3 if Axis
notices the new services and makes them available to the Grid. Each WAR (Web
Archive) contains a fresh copy of the axis/ogsa web-app and the new services are
made available when this web-app starts up. We can stop and start this web-app to
make our services reinitialize and re-read their configuration files.

4 Using GSS in an Application of Remote Sensing – NDVI
Our goal is to test the efficiency of using GSS for Earth surface geophysical
parameters determination form remote sensing data. Vegetation indices (VIs) are
spectral transformations of two or more bands designed to enhance the contribution of
vegetation properties and allow reliable spatial and temporal inter-comparisons of
terrestrial photosynthetic activity and canopy structural variations. As a simple
transformation of spectral bands, they are computed directly without any bias or
assumptions regarding plant physiognomy, land cover class, soil type, or climatic
conditions. They allow us to monitor seasonal, inter-annual, and long term variations
of vegetation structural, phenological, and biophysical parameters and are important
parameter to various kinds of local, regional, and global scale models, including
general circulation and biogeochemical models. Numerous studies have shown the
utility of the Vegetation Indices (VIs) from climate studies to famine early warning

Java-Based Grid Service Spread and Implementation in Remote Sensing Applications

501

detection, epidemiology and renewable natural resources management. The NDVI has
also been shown to be highly correlated with net primary production (NPP).
The Normalized Difference Vegetation Index (NDVI) (Tucker 1979, Jackson et al.
1983), which is related to the proportion of photo synthetically absorbed radiation, is
calculated from atmospherically corrected reflectance from the visible and near
infrared remote sensing sensor channels as:
(CH2 - CH1) / (CH2 + CH1)
Where the reflectance values are the surface bidirectional reflectance factors for
MODIS bands 1 (620 - 670 nm) (CH1) and 2 (841 - 876 nm) (CH2). The NDVI is
successful as a vegetation measure in that it is sufficiently stable to permit meaningful
comparisons of seasonal and inter-annual changes in vegetation growth and activity.
4.1 Experiment
In this experiment, we used 1000 MODIS images (1000x1200 pixels), and each
image is about 1.1M. We calculate the NDVI as batches using these MODIS images
through different approaches: single PC without NDVI grid service, NDVI grid
service on only one node and NDVI grid service spreading to 5 PCs with GSS.
Our test bed consists of 1 PC running Linux9.0 and 5 PCs running Windows 2000
operating system. It makes a good advantage of the individual PCs, especially in a
work group, to constitute a Grid system based on GT3 core and GT3 Gars, which
include RFT, MMJFS, GRAM and MDS etc. Table 1 gives the configuration
information of our test bed on GT 3.
NDVI Service Client program on Tgp2.tgp requests the SGSS Service on wang.tgp
to spread the NDVI Service. Then the SGSS returns GSHs of the NDVI Service
duplicates that has been spread to Cai.tgp, Ly.tgp, Zhong.tgp and Hu.tgp. When
getting the information, Client program divides remotely sensed data (MODIS data in
the experiment) in geometric parallelism and send request to all the NDVI Services
including original one and duplicates.
4.2 Result and Analysis
This experiment involved three cases:
1) We calculate NDVI with single PC without Globus Toolkit, using varying amount
of data from 11 MB to 1100MB (form 10 images to 1000 images).
2) We do that with Grid Service, but without Grid Service Spread mechanism. NDVI
Grid Service only runs on one PC. The amount of data still is varied from 11MB
to 1100MB.
3) We use Grid Service Spread. The situation of utilizing data still is so.
This experiment was done for 10 times successively and we give the average value
in Table 2, which is the statistics of the results of the three cases. We define the
efficiency of GSS is the ratio of these two execution times:
Efficiency = Execution of case 1 / Execution of case 3

502

Y. Wang et al.
Table 1. The configurations of GT 3 test bed

Host
name
Tgp2.tgp

IP address

CPU

OS

192.168.0.200

1.7GHz

Win
2000

Wang.tgp

192.168.0.1
159.226.117.121

2.0GHz

Linux9.0

Hu.tgp

192.168.0.119

2.6GHz

Win2000

Ly.tgp

192.168.0.120

2.0GHz

Win2000

Cai.tgp

192.168.0.110

2.6GHz

Win
2000

Zhong.tgp

192.168.0.19

2.6GHz

Win
2000

Globus
Toolkit
GT
3
core and
Gars
GT
3
core and
Gars
GT3
core and
Gars
GT3
core and
Gars
GT
3
core and
Gars
GT
3
core and
Gars

Description
Service Client
NDVI Service
SGSS
Service
Duplicate
DGSS
Service
Duplicate
DGSS
Service
Duplicate
DGSS
Service
Duplicate
DGSS

Table 2. The results of the three cases

Amount of Data
Without Grid Service (1 PC)

3.5 s

100
Images
(110MB)
42.9 s

1 PC providing Grid Service
without GSS
NDVI Grid Service spreading
to 5 PCs with GSS

8.4 s

49.2 s

342.4 s

1128.4 s

15.6 s

24.8 s

84.3 s

253.7 s

Cases

10 Images
(11MB)

500
Images
(550MB)
321.8 s

1000 Images
(1100MB)
1093.8 s

Case 2 is little slower than case 1 because of the serialization and unserialization of
Grid service, but the difference varies little with the increase of the amount of data. In
case 3, GSS even use more time to calculate NDVI when the amount is 11M for it is
also a Grid service in fact. And the advantage of GSS is not huge when 100 images
are used, but it is very surprising effective when it comes to 550 M (efficiency = 3.7)
and 1100 M (efficiency = 4.3). We are convinced that we will have a better efficiency
if the service can be spread to a bigger range. For a specific range of GSS, the
efficiency will be better if the amount of data processed is larger.

Java-Based Grid Service Spread and Implementation in Remote Sensing Applications

503

5 Conclusion
Grid Service, the combination of Grid Technologies and Web Service, is a trend
because it can really change the whole Internet into a huge real Grid system. But its
performance is not satisfying in scientific computing, especially in data-intensive.
Grid Service Spread mechanism can help us use more computing resource to service
for our applications dynamically. With the help of GSS, we will have more powerful
computing abilities and Throughput. It shows that this method is more efficient for
processing huge amount of remotely sensed data.

Acknowledgements
This publication is an output from the research projects "CAS Hundred Talents
Program" and “Monitoring of Beijing Olympic Environment” (2002BA904B07-2)
and “Remote Sensing Information Processing and Service Node” funded by the
MOST, China and "Aerosol fast monitoring modeling using MODIS data and
middlewares development" (40471091) funded by NSFC, China.

References
Ceram, E., 2002, Web Services Essentials, (Sebastopol: O’Reilly & Associates, Inc),
pp, 7-24.
Foster, I., Kesselman, C. 1999, The Grid: Blueprint for a New Computing Infrastructure (San
Francisco: Morgan Kaufmann), pp, 16-50
Foster, I., Kesselman, C. and Tuecke, S., 2001, The Anatomy of the Grid: Enable Scalable
Virtual
Organizations.
Available
online
at
http://www.globus.org/reserch/
papers.html (accessed 10 Month 2004)
Foster, I., Kesselman, C., Nick, J., Tuecke, S., 2002, The Physiology of the Grid. Available
online at http://www.Gridforum.org/ogsi-wg/drafts/ogsa_draft2.9_2002-06-22.pdf (accessed
10 Month 2004)
Jackson, R.D., P.N. Slater, and P.J. Pinter, 1983, Discrimination of growth and water stress in
wheat by various vegetation indices through clear and turbid atmospheres. Remote Sensing
of the Environment, 15, 187-208.
Sotomayor, B., 2004, The Globus Toolkit 3 Programmer's Tutorial, Available online at
http://www.casa-sot\ omayor.net/gt3-tutorial (accessed 10Month 2004)
Tucker, C. J., 1979, Red and photographic infrared linear combinations for monitoring
vegetation. Remote Sensing of the Environment, 8, pp, 127-150.
Tuecke, S., Czajkowski, K., Foster, I., Frey, J., Graham, S., and C. Kesselman, C., 2002, Grid
Service Specification. Available online at http://www.Gridforum.org/ogsi-wg/drafts/
GS_Spec_draft03_2002\-07-17.pdf (accessed 10 Month 2004)

