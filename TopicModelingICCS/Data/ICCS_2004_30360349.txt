Performance Analysis of Active Queue
Management Schemes for IP Network
Jahwan Koo1 , Seongjin Ahn2 , and Jinwook Chung1
1

School of Information and Communications Engineering, Sungkyunkwan Univ.
Chunchun-dong 300, Jangan-gu, Suwon, Kyounggi-do, Korea
{jhkoo,jwchung}@songgang.skku.ac.kr
2
Department of Computer Education, Sungkyunkwan Univ.
Myeongnyun-dong 3-ga 53, Jongno-gu, Seoul, Korea
sjahn@comedu.skku.ac.kr

Abstract. Active Queue Management schemes have evolved over time
and continue to do so. In this paper, we present a comprehensive survey
of AQM schemes for IP network. Its purpose is to identify the basic
approaches that have been proposed and classify them according to the
design goals and performance issues of AQM schemes. The results from
several performance evaluation such as the link utilization, the average
delay, and the loss rates have been provided. In particular, simulationbased comparisons of AQM schemes help to understand how they diﬀer
from in terms of fairness, global synchronization, performance guarantee,
complexity and scalability.

1

Introduction

A QoS-enabled network is composed of various functions for providing diﬀerent
types of service to diﬀerent packets such as rate controller, classiﬁer, scheduler,
and admission control. The scheduler function of them determines the order
in which packets are processed at a node and/or transmitted over a link. The
order in which the packets are to be processed is determined by the congestion
avoidance and packet drop policy (also called Active Queue Management) at the
node. Although there are many papers related the AQM algorithms, there were
few discussed together in a single paper.
In the next two sections, we present a comprehensive survey of all possible
AQM schemes. Its purpose is to identify the basic approaches that have been
proposed and classify them according to the design goals and performance issues
of AQM schemes. Next, we provide a description of the basic algorithms for IP
network, including drop tail, random early detection (RED) [1], BLUE [2], Random Exponential Marking (REM) [3], Proportional Integral (PI) [4], and Joint
Buﬀer management and Scheduling (JoBS) [5]. Section 4 discuses the performance evaluation of the AQM schemes via simulation. The ﬁnal section oﬀers
some concluding remarks.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 349–356, 2004.
c Springer-Verlag Berlin Heidelberg 2004

350

2
2.1

J. Koo, S. Ahn, and J. Chung

Basic Algorithms
Drop Tail

The drop tail algorithm maintains exactly simple FIFO queues. There is no
methods, conﬁguration parameter, or state variables that are speciﬁc to drop
tail queues. Although simple and easy to implement, drop tail has two wellknown drawbacks, the lock-out and full queue phenomena.
2.2

RED

The RED algorithm [1] was presented with the objective to minimize packet
loss and queueing delay, avoid global synchronization of sources, maintain high
link utilization, and remove biases against bursty sources. To achieve these
goals, RED utilizes two thresholds, minth and maxth , and a exponentiallyweighted moving average (EWMA) formula to estimate the average queue length,
Qavg = (1 − Wq ) ∗ Qavg + Wq ∗ Q, where Q is the current queue length and Wq
is a weight parameter, 0 ≤ Wq ≤ 1. The two thresholds are used to establish
three zones. If the average queue length is below the lower threshold (minth ),
the algorithm is in the normal operation zone and all packets are accepted. On
the other hand, if it is above the higher threshold (maxth ), RED is in the congestion control region and all incoming packets are dropped. If the average queue
length is between both thresholds, RED is in the congestion avoidance region
and the packets are discarded with a certain probability Pa . This probability
is increased by two factors. A counter is incremented every time a packet arrives at the router and is queued, and reset whenever a packet is dropped. As
the counter increases, the dropping probability also increases. In addition, the
dropping probability also increases as the average queue length approaches the
higher threshold. In implementing this, the algorithm computes an intermediate
probability Pb , whose maximal value given by Pmax is reached when the average
queue length is equal to Thigh . For a constant average queue length, all incoming packets have the same probability to get dropped. As a result, RED drops
packets in proportion to the connections’ share of the bandwidth.
2.3

BLUE

The BLUE algorithm [2] uses diﬀerent metrics to characterize the probability of
dropping an arrival. This algorithm uses the current loss ratio and link utilization
as input parameters. It maintains a single probability, Pm , which it uses to
mark (or drop) packets when they are enqueued. If the queue is continually
dropping packets due to queue overﬂow, BLUE increments Pm , thus increasing
the rate at which it sends back congestion notiﬁcation. Conversely, if the queue
becomes empty or if the link is idle, BLUE decreases its marking probability.
This eﬀectively allows BLUE to ”learn” the correct rate it needs to send back
congestion notiﬁcation. Besides the marking probability, BLUE uses two other
parameters which control how quickly the marking probability changes over time.

Performance Analysis of Active Queue Management Schemes for IP Network

351

The ﬁrst is freeze time. This parameter determines the minimum time interval
between two successive updates of Pm . This allows the changes in the marking
probability to take eﬀect before the value is updated again. The other parameters
used, (d1 and d2 ), determine the amount by which Pm is incremented when the
queue overﬂows or is decremented when the link is idle.
2.4

REM

The REM algorithm [3] is an AQM scheme that measures congestion not by a
performance measure such as loss or delay, but by a quantity we call price. It
treats the problem of marking (or dropping) arrivals as an optimization problem.
The objective is to maximize a utility function subject to the constraint that
the output link has a ﬁnite capacity. REM algorithm marks packets with a
probability exponentially dependent on the cost of a link. The cost is directly
proportional to the queue occupancy.
2.5

PI

The PI algorithm [4] uses a feedback-based model for TCP arrival rates to let
the queue occupancy converge to a target value, but assumes a priori knowledge
of the round-trip times and of the number of ﬂows traversing the router. A
feedback-based model consists of: 1) a plant which represents a combination of
subsystems such as TCP sources, routers and TCP receivers, 2) the queue length
at a router as a plant variable denoted by Q, 3) a desired queue length at a router
(i.e., a reference input) denoted by Qref , 4) a feedback signal which is a sampled
queue length used to obtain the error term, Qref − Q, 5) an AQM controller
which controls the packet arrival rate to the router by generating a packet drop
probability as a control signal. In [4], a simpliﬁed TCP ﬂow dynamics model
was developed. There, the open-loop transfer function (OLTF) of the plant was
given by
P (s) = PT CP (s) · PQU EU E (s) =

s

R0 C 2
2N 2
+ R2N
2
0C

·

N
R0

s+

1
R0

(1)

where N is a load factor (i.e., number of TCP connections), R0 is the roundtrip time, and C is the link capacity. Two main functions are used in the PI
algorithm: one is the congestion indicator (to detect congestion) and the other
is the congestion control function (to avoid and control congestion). The PIcontroller has been designed based on (1) not only to improve responsiveness of
the TCP ﬂow dynamics but also to stabilize the router queue length around Qref .
The latter can be achieved by means of integral (I)-control, while the former can
be achieved by means of proportional (P)-control using the instantaneous queue
length rather than using the EWMA queue length.

352

2.6

J. Koo, S. Ahn, and J. Chung

JoBS

The JoBS algorithm [5]) is capable of supporting a wide range of relative, as well
as absolute, per-class guarantees for loss and delay, without assuming admission
control or traﬃc policing.

Bu ffer Size

traffic

Projected
Arrivals

Projected Arrival
(after packet marking)

Arrivals

Transmissions

t

t'

time

Fig. 1. The concepts of JoBS algorithm

The main idea of the JoBS algorithm is the following: At time t of a packet
arrival, the router estimates the congestion window size and the round-trip time
of the TCP ﬂow. With these estimates, future traﬃc arrivals are projected, and
impending buﬀer overﬂows are inferred, as illustrated in Figure 1. If a packet loss
is projected, the algorithm reduces the congestion window size of the TCP source
by marking packets with Explicit Congestion Notiﬁcation (ECN). By reducing
the congestion window size, the sending rate of the TCP source is reduced,
and impending packet losses can be avoided. At any time t, the backlog at the
router is equal to Rin (t) − Rout (t). Hence, the JoBS makes an eﬀort to meet the
following requirement:
∀t : Rin (t) − Rout (t) ≤ Blim .

(2)

where Blim is the size of the router’s buﬀer, Rin (t) is the total amount of traﬃc
that has entered the router until time t, and Rout (t) is the total amount of traﬃc
that has left the router until time t. A unique feature of JoBS is that it considers
scheduling and queue management (dropping) together in a single step.

Performance Analysis of Active Queue Management Schemes for IP Network

3

353

Classiﬁcation

AQM schemes can be classiﬁed in diﬀerent ways. In [6], these were classiﬁed
based on two dimensions : one is when decision on discarding packets is made
and the other is what information is used to make packet discard decisions.
In [7], a detailed classiﬁcation of the various schemes has been proposed. It
was based on the networking environment (ATM or IP networks), the type of
congestion management mechanism implemented (congestion avoidance or congestion control and recovery), the number of thresholds used (none, global, or
per-connection), decision information (global or per-connection), and the queue
behavior (static or dynamic). In this paper, a wide variety of AQM schemes with
Table 1. Classiﬁcation of AQM Schemes
Criteria
Congestion
Thresholds
State-Info
Schemes Control Avoidance None Global Per-Conn Global Per-Conn
•
•
DT
•
•
•
•
RED [1]
BLUE [2]
•
•
•
REM [3]
•
•
•
PI [4]
•
•
•
JoBS [5]
•
•
•

many diﬀerent characteristics for IP network are considered, and hence a more
extensive classiﬁcation is proposed in Table 1. We refer to a survey article [7] for
an exhaustive review of all possible AQM schemes. In summary, various kinds of
AQM Schemes described section 2 have mainly focused on seven issues: 1) avoid
congestion, 2) reduce the packet transfer delay, keeping the queue lengths at
low levels, 3) avoid the TCP global synchronization problem, 4) achieve fairness
among diﬀerent traﬃc types, 5) deliver service guarantee (guaranteed or differentiated), 6) reduce the program complexity, and 7) increase the scalability.
These issues are all inter-related.
Initial proposals for AQM for IP network [1], [2], and [3] were motivated by
the need to improve TCP performance, without considering service diﬀerentiation. More recent research eﬀorts [4] and [5] enhance these initial proposals in
order to provide service diﬀerentiation.

4

Performance Analysis

We present an evaluation of our surveyed AQM schemes via simulation, using
the ns-2 network simulator [8].

354

4.1

J. Koo, S. Ahn, and J. Chung

Simulation Setup

We consider a bottleneck link with 45 Mbps bandwidth, 10 ms propagation
delay, and 100,000 bytes queue size. The rest of the links (edge links) are all
100 Mbps with 200 packet queues. Their propagation delay is randomly in the
range 5-20 ms. Each source is connected to the corresponding sink at the other
side of the network, i.e., source Si is connected to sink Ri . There are 3 TCP
source/sinks and one UDP source/sink connected to each edge node. Each TCP
source is an FTP application on top of NewReno TCP. The FTP packet size
is 1,000 bytes. Each UDP source is an Exponential On-Oﬀ source with peak
rate 1 Mbps, average rate 200 Kbps, average Oﬀ duration 80 ms, and packet
size 100 bytes. The experiment lasts for 20 seconds of simulated time, and ECN
is available in the entire network. We compare the performance of six diﬀerent
algorithms at the core router governing the bottleneck link.
• Drop-Tail. We use Drop-Tail to have an estimate of the loss rates encountered without AQM. With Drop-Tail, incoming packets are discarded only
when the queue is full.
• RED. We use RED with a minimum threshold minth = 20,000 bytes, and
a maximum threshold maxth = 80,000 bytes. The parameter maxp is set to
1, and the weight used in the computation of the average queue size is set
to Wq = 0.002.
• BLUE. We use the minimum time interval freeze time = 100ms. Other
parameters d1 and d2 are set to 0.02 and 0.002, respectively.
• REM. The parameter values of REM are set to φ = 1.001, α = 0.1, γ =
0.001, and b∗ = 20. Their behavior according to the probability determined
by the link algorithm is described in Section 2.
• PI. We conﬁgure the PI algorithm with approximate RTTs and a tight upper
bound on the round-trip times R+ = 180 ms, with a sampling frequency of
160 Hz, and get a = 1.643e - 4 and b = 1.628e - 4. The target queue length
Qref is set to 70,000 bytes.
• JoBS. We use parameter settings of K = 10 and α = 0.9 which are proper
values in [5].
4.2

Simulation Results

For each algorithm, we monitor the link utilization, the average delay, and the
loss rates at the core router, and present our results in Figure 2 (a), (b), and
(c), respectively. Not surprisingly, the Drop-Tail is almost always full, which
explains the relatively high loss rates. One of the biggest problems with TCP’s
congestion control algorithm over drop-tail queues is that the sources reduce
their transmission rates only after detecting packet loss due to queue overﬂow.
Figure 2 (c) tells us that, without AQM, one can expect loss rates in the order of
12%. RED manages to stabilize the queue length around maxth = 80,000 bytes.
However, it is unable to detect incipient congestion caused by short-term traﬃc
load changes. As a result, AQM parameter conﬁguration has been a main design

Performance Analysis of Active Queue Management Schemes for IP Network

355

1.2

Link Utilization

1

0.8

0.6
dt
0.4

red
rem
blue

0.2

pi
jobs
0
0

4

8

12

16

20

Simulation Times (s)

(a) Link Utilization
80
dt

Average Delay (ms)

70

red
rem

60

blue
pi

50

jobs

40
30

20
10

0
0

4

8

12

16

20

Simulation Times (s)

(b) Average Delay
0.6
dt
red
0.5
rem

Loss Rates

blue
0.4

pi
jobs

0.3

0.2

0.1

0
0

4

8

12

Simulation Times (s)

(c) Loss Rates

Fig. 2. Simulation Results

16

20

356

J. Koo, S. Ahn, and J. Chung

issue. For these experiment, this is the ideal setting of maxp since it minimizes
both the queueing delay and packet loss rates for RED. While minth and maxth
are chosen so that traﬃc is dropped with a probability of one only if the queue is
full, other parameters are the default RED parameters in ns-2, and are therefore
expected to cover a large range of operating conditions. RED is instructed to
use ECN when needed. For the BLUE experiments, d1 is set signiﬁcantly larger
than d2. This is because link utilization can occur when congestion management
is either too conservative or to aggressive, but packet loss occurs only when
congestion management is too conservative. Also, Figure 2 (b) shows that a
crudely conﬁgured PI algorithm drops almost as much traﬃc as Drop-Tail and
is very sensitive to the parameter selection. Note that such a crude parameter
tuning is to account for the uncertainty on estimates of the RTTs at router
conﬁguration time. Conversely, the JoBS algorithm completely avoids packet
losses and lowers the queue size at all times. However, its utilization is relatively
low in our simulation.

5

Conclusions

In this paper, the issues for IP networking environment have been discussed and
a detailed classiﬁcation of all possible AQM schemes has been provided. In addition to describing the schemes themselves, the results from several performance
evaluation such as the link utilization, the average delay, and the loss rates have
been presented. The evaluation has two objectives. First, we compare the performance of our surveyed AQM schemes in a range of traﬃc conditions. Second, we
compare each algorithm’s design goals such as the link utilization, the average
delay, and the loss rates.

References
1. S. Floyd and V. Jacobson. ”Random early detection for congestion avoidance,”
IEEE/ACM Transactions on Networking, 1(4):397-413, July 1993.
2. W. Feng, D. Kandlur, D. Saha, and K. Shin. ”Blue: A new class of active queue
management algorithms,” Technical Report CSE-TR-387-99, University of Michigan, April 1999.
3. S. Athuraliya, V.H. Li, S.H. Low and Q. Yin. ”REM: Active queue management,”
IEEE Network, Vol. 15, Issue. 3, pp 48-53, May 2001.
4. C.V. Hollot, V. Misra, D. Towsley and W. Gong. ”On designing improved controllers
for AQM routers supporting TCP ﬂows,” In proceedings of IEEE INFOCOM 2001,
volume 3, pp 1726-1734, Anchorage, AK, April 2001.
5. J. Liebeherr and N. Christin. ”Buﬀer management and scheduling for enhanced
diﬀerentiated services,” Technical Report CS-2000-24, University of Virginia, 2000.
6. R. Guerin and V. Peris. ”Quality-of-service in packet networks: basic mechanisms
and directions,” Computer Networks, 31:169-189, 1999.
7. M. Labrador and S. Banerjee. ”Packet dropping policies for ATM and IP networks,”
IEEE Communications Surveys, Vol. 2, No. 3, pp. 2-14, Third Quarter 1999.
8. ns-2 network simulator. http://www.isi.edu/nsnam/ns/.

