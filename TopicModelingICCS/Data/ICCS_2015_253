Procedia Computer Science
Volume 51, 2015, Pages 1208–1218
ICCS 2015 International Conference On Computational Science

A compact numerical implementation for solving
Stokes equations using matrix-vector operations
1

Tao Zhang1,2, Amgad Salama1, Shuyu Sun1, Hua Zhong1*

Computational Transport Phenomena Laboratory (CTPL), King Abdullah University of Science
and Technology (KAUST), Thuwal 23955-6900, KSA
2
National Engineering Laboratory for Pipeline Safety, Beijing Key Laboratory of Urban Oil and
Gas Distribution Technology, China University of Petroleum, Beijing, 102249, China
*Email: Hua.Zhong@kaust.edu.sa

Abstract
In this work, a numerical scheme is implemented to solve Stokes equations based on cell-centered
finite difference over staggered grid. In this scheme, all the difference operations have been vectorized
thereby eliminating loops. This is particularly important when using programming languages that
require interpretations, e.g., MATLAB and Python. Using this scheme, the execution time becomes
significantly smaller compared with non-vectorized operations and also become comparable with
those languages that require no repeated interpretations like FORTRAN, C, etc. This technique has
also been applied to Navier-Stokes equations under laminar flow conditions.
Keywords: Stokes flow; Cell-centered finite difference; Vectorized differential operators; MATLAB

1 Introduction
Every aspect of life around us involves fluids that are either static or dynamic. No wonder,
therefore, they attract our attention to capture the roles that control their dynamics. Since the
establishment of the well-known Navier-Stokes equations around the mid of the eighteenth century,
significant amount of research work have been conducted and still to solve these equations under
different assumptions and boundary conditions. One of the simplifications that have been recognized
are those related to a class of flow that is very slow (creeping flow) where the Reynolds number is
much smaller than one. Under such conditions George Stokes (1819-1903) assumed that the advective
term, which accounts for fluid inertia, may be neglected and the equations reduce to what is called
Stokes flow. This assumption significantly simplifies the solution by dropping the troublesome
nonlinear advection. Stokes flow can occur in many engineering applications, including flow in porous
media. As such a great deal of interest has been devoted to the development of solution strategies that

1208

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.297

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

are fast and accurate. Although there has been success in finding analytical solution in simple
geometries and boundary conditions, in general cases the solution will be thought of numerically.
Recently, there have been a number of computer languages gained popularity for their ease of
handling and coding, e.g., MATLAB, Python and the like. The drawback of these languages, however,
is that they require interpretations during code execution, which consumes valuable CPU time. In
order to utilize these languages to their full potential, vectorizing the different operations may be
essential when possible. Matrix operations have been implemented in these languages at lower level
and are therefore fast. In this work, we introduce a full vectorizing algorithm to solving Stokes
equations. We show that the execution time using this algorithm compares very well with codes
written in other non-interpreting languages (e.g., FORTRAN, C). Using the compact notation of these
languages (e.g., MATLAB), the number of lines of codes can reduce significantly. We show that the
results obtained by this algorithm are as accurate and efficient as those computed using different
methods, including MAC, Simple, LBM (D2Q9) in Fortran language. We also compare the execution
time with that required when using traditional techniques in MATLAB in which the time consuming
loops are used. Sun et al. [1] and Salama et al. [2, 3] have introduced the concept of shifting matrices
to vectorize the different operations pertinent to the partial differential equations governing flow of
single and two-phase system in porous media. In this work, we generalize this concept to Stokes flow
in pure fluid systems with periodic boundary conditions. We also introduce exclusion matrices to
account for in-domain solid regions and to generalize to other solid boundaries.

2 Numerical algorithm
To begin with, Stokes flow, also named creeping flow or creeping motion, Kim and Karrila [4] is a
type of fluid flow where advective inertial forces are small compared with viscous forces, Kirby [5]. In
another word, the Reynolds number, Re, is quite small, i.e. Re<<1. The equations of motion for Stokes
flow, called the Stokes Equations, are a simplification of Navier-Stokes equations. According to the
concept of Stokes flow, the inertial forces are assumed to be negligible compared with the viscous
forces. Thus, in the common case of incompressible Newtonian fluids, the momentum balance in the
Stokes Equations can be written as:
ߤ‫׏‬ଶ ‫ ܝ‬െ ‫ ݌׏‬൅ ܎ ൌ Ͳǡ

(1)

where u is the velocity of the fluid, ‫ ݌׏‬is the gradient of the pressure, ߤ is the dynamic viscosity, and f
is an applied body force. The governing conservation equations also include an equation for the
conservation of mass, commonly written in the form:
‫∙׏‬u=0.

(2)

There are a number of algorithms available to solve the above system of equations numerically. In
this work we will solve the two equations in one large system involving the unknown pressure and
velocity fields. In matrix form (for 2D problems) this can be written as
‫ݔݔܣ‬
ቌ Ͳ
‫்ܣ‬௫

Ͳ
‫ݕݕܣ‬
‫்ܣ‬௬

‫ݔܣ‬
࢛௫
࢈௫
‫ݕܣ‬ቍ ൭࢛௬ ൱ ൌ ൭࢈௬ ൱Ǥ
࢖
Ͳ
૙

(3)

The first row of the above matrix comes from the discretization of the x-momentum equation, the
second row is for the y-momentum equation and the third row accounts for the continuity equation.

1209

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

2.1 Discretization
For a steady-state Stokes flow with periodic boundary conditions, the momentum and continuity
equations in Cartesian coordinates can be written in component form as:
డ మ ௨೔

ߤ

ൌ

డ௫ೕ డ௫ೕ

డ௨೔
డ௫೔

డ௣
డ௫೔

െ ߩ݃௜ ǡ

(4)

ൌ Ͳǡ

(5)

in ȳ ൌ ሺͲǡ ‫ܮ‬௫ ሻ ൈ ൫Ͳǡ ‫ܮ‬௬ ൯ and i=1, 2, 3 in 3D. The periodic boundary conditions can be formulated as:
‫ݑ‬௜ ሺͲǡ ‫ݕ‬ሻ ൌ ‫ݑ‬௜ ሺ‫ܮ‬௫ ǡ ‫ݕ‬ሻǡͲ ൏ ‫ ݕ‬൏ ‫ܮ‬௬ ǡ

(6)

‫ݑ‬௜ ሺ‫ݔ‬ǡ Ͳሻ ൌ ‫ݑ‬௜ ൫‫ݔ‬ǡ ‫ܮ‬௬ ൯ǡͲ ൏ ‫ ݔ‬൏ ‫ܮ‬௫ ǡ

(7)

‫݌‬ሺͲǡ ‫ݕ‬ሻ ൌ ‫݌‬ሺ‫ܮ‬௫ ǡ ‫ݕ‬ሻǡͲ ൏ ‫ ݕ‬൏ ‫ܮ‬௬ ǡ

(8)

‫݌‬ሺ‫ݔ‬ǡ Ͳሻ ൌ ‫݌‬൫‫ݔ‬ǡ ‫ܮ‬௬ ൯ǡͲ ൏ ‫ ݔ‬൏ ‫ܮ‬௫ .

(9)

For the sake of simplicity without loss of generality, we use uniform mesh as that shown in Fig. 1
below. In staggered grid, the pressure is defined in the centre of the cells and the velocity at the face
௫ ି௫
௬ ି௬
centre. The size of each grid could be defined as ݄௫ ൌ ೘ బ Ǣ݄௬ ൌ ೙ బ.
௠

௡

For the unknown pressure, we define
‫݌‬భ௛ǡభ
మమ

‫݌‬భ௛ǡయ

‫ڮ‬

‫݌‬భ௛ǡ௡ିభ

‫݌‬య௛ǡయ

ǥ

‫ڭ‬

‫ڭ‬
ǥ

‫݌‬య௛ǡ௡ିభ ‫ۊ‬
௛
௛
భ ൰ ‫ ؝‬ሺ‫ ݌‬ሻ
మ
మ ‫ ۋ‬ൌ ൬‫ ݌‬భ
௜ି ǡ௝ି
‫ۋ‬
మ
మ
‫ڭ‬

మమ

‫݌ ۇ‬௛
యభ
‫ ۈ‬మ ǡమ
‫ڭ ۈ‬
‫݌‬௛ భ భ
‫ ۉ‬௠ିమǡమ

మ

మమ

௛
‫݌‬௠ି
భయ
ǡ
మమ

మ

௛
‫݌‬௠ି
భ
భ
ǡ௡ି
మ

మ

(10)

‫ی‬

with ݅ ൌ ͳǡ ‫݉ ڮ‬ǡ݆ ൌ ͳǡ ‫݊ ڮ‬. Likewise the unknown velocity can be written as
‫ ݑ‬௫ǡ௛
భ

‫ ݑ‬௫ǡ௛
య

మ

మ

ଵǡ

In x-direction:

‫ ۇ‬௫ǡ௛
‫ݑ‬
‫ ۈ‬ଶǡభమ
‫ڭ ۈ‬
‫ ݑ‬௫ǡ௛భ
‫ ۉ‬௠ǡమ

ଵǡ

‫ ݑ‬௫ǡ௛
య
ଶǡ

‫ڭ‬

మ

‫ ݑ‬௫ǡ௛య
௠ǡ

‫ڮ‬

‫ ݑ‬௫ǡ௛

ǥ

‫ ݑ‬௫ǡ௛

‫ڭ‬
ǥ

‫ڭ‬

ଵǡ௡ି

భ
మ

ଶǡ௡ି

‫ ݑ‬௫ǡ௛

భ
మ

‫ۊ‬
‫ ۋ‬ൌ ൬‫ ݑ‬௫ǡ௛ భ ൰ ‫ ؝‬ሾ‫ ݑ‬௫ǡ௛ ሿǤ
௜ǡ௝ି
‫ۋ‬
మ

భ
మ

‫ی‬

௠ǡ௡ି

మ

(11)

Similarly, the velocity in y-direction could be written as
൬‫ݑ‬

௬ǡ௛
భ ൰
௜ି ǡ௝

‫ ؝‬ሺ‫ ݑ‬௬ǡ௛ ሻǤ

(12)

మ

Now discretizing the momentum equation, for that consider the momentum equation in the xdirection
ߤቀ

డ మ ௨ೣ
డ௫ మ

൅

డ మ ௨ೣ
డ௬ మ

ቁൌ

డ௣
డ௫

െ ߩ݃௫ Ǥ

In staggered grid system, this equation is discretized at edges, such that

1210

(13)

A compact numerical implementation

ߤቂ

డ

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

డ

డ

ቀ ቁ൅

డ௫ డ௫

డ

ቀ ቁቃ ሾ‫ ݑ‬௫ǡ௛ ሿ ൌ

డ௬ డ௬

డ
డ௫

௛
൤‫݌‬௜ǡ௝ି
భ ൨ െ ߩ݃௫ Ǥ

(14)

మ

The above expression indicates that the derivative of the pressure is required at locations where it
is not defined. Similarly, the momentum equation in the y-direction can be written as
ߤቂ

డ

డ

ቀ ቁ൅

డ௫ డ௫

డ

డ

ቀ ቁቃ ሾ‫ ݑ‬௬ǡ௛ ሿ ൌ

డ௬ డ௬

డ
డ௫

௛
൤‫݌‬௜ି
భ ൨ െ ߩ݃௬ Ǥ
ǡ௝

(15)

మ

Furthermore, the continuity equation can be written as
డ
డ௫

൤‫ ݑ‬௫ǡ௛భ

భ
మ

௜ି ǡ௝ି
మ

൨൅

డ

൤‫ݑ‬

డ௬

௬ǡ௛

భ
మ

భ
మ

௜ି ǡ௝ି

൨ ൌ ͲǤ

(16)

Again, the derivatives of velocity components are evaluated at locations where the velocity is not
defined.

2.2 The matrix-vector notation
                  
ǡǣ
൬ܵభ௫ ൰ ‫ ݑ‬௫ǡ௛భ
మ

௜ି ǡ௝ି
మ

భ
మ

՜ ‫ ݑ‬௫ǡ௛ భ ǡ ൬ܵି௫భ ൰ ‫ ݑ‬௫ǡ௛భ
௜ǡ௝ି

భ
మ

௜ି ǡ௝ି

మ

మ

మ

՜ ‫ ݑ‬௫ǡ௛

భ
మ

௜ିଵǡ௝ି

௬

௬ǡ௛
భ
భ
௜ି ǡ௝ି

ǡ ൬ܵభ ൰ ‫ݑ‬
మ

మ

௬
௬ǡ௛
௬ǡ௛
భ ǡ ൬ܵ భ ൰ ‫ ݑ‬భ
భ
௜ି ǡ௝
ି
௜ି ǡ௝ି

՜‫ݑ‬

మ

మ

మ

మ

௬ǡ௛
.
భ
௜ି ǡ௝ିଵ

՜‫ݑ‬

మ

మ

Such shifting operators have the properties that: ܵభ ܵభ ൌ ܵଵ ǡ ܵିభ ܵିభ ൌ ܵିଵ ǡ and ܵିభ ܵభ ൌ ܵభ ܵିభ ൌ ǡ
మ మ

మ

మ

మ మ

where I is the identity matrix. The gradient at the x-edges could, therefore, be written as


డ

ൌ

డ௫೔

ௌభೣ ିௌ ೣభ
ష
మ

మ

௛ ೣ೔

ǡ

మ

మ

(17)

with which, the momentum equation can transfer to (in x direction):
ߤ ൥൭

ௌభೣ ିௌ ೣభ
షమ

మ

௛ೣ

൱൭

ௌభೣ ିௌ ೣభ
షమ

మ

௛ೣ

೤

൱൅൭

೤

ௌభ ିௌ భ
ష
మ

మ

௛೤

೤

൱൭

೤

ௌభ ିௌ భ
ష
మ

మ

௛೤

൱൩

ሾ‫ ݑ‬௫ǡ௛ ሿ

ൌ ൭

ௌభೣ ିௌ ೣభ
షమ

మ

௛ೣ

൱ ܵభ௫ ሾ‫݌‬௛ ሿ െ ߩ݃௫ Ǥ

(18)

మ

To simplify the computations, we can add an operator ܵି௫భ ܵభ௫ to the first part of left hand side and
௬
ି

మ మ

௬

an operator ܵ భ ܵభ to the second part of left hand side. Then we can get
మ మ

ߤ ൤ቀ

ೣ
ூିௌషభ

௛ೣ

ቁቀ

ௌభೣ ିூ
௛ೣ

ቁ൅൬

೤

ூିௌషభ
௛ೣ

൰൬

೤

ௌభ ିூ
௛ೣ

൰൨ ሾ‫ ݑ‬௫ǡ௛ ሿ ൌ ቀ

ௌభೣ ିூ
௛ೣ

ቁ ሾ‫݌‬௛ ሿ െ ߩ݃௫ Ǥ

(19)

Next, we define matrix as follows,
‫ܦ‬௖௫ ‫؝‬
‫ܦ‬௫௖ ‫؝‬

ೣ
ூିௌషభ

ௌభೣ ିூ
௛ೣ

௛ೣ

ǡ

்
ൌ െ‫ܦ‬௖௫
Ǥ

(20)
(21)

These operators can be constructed in MATLAB in just a simple line, thus for a Cartesian grid of

1211

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

size mxn the following line constructs the Dcx:
Dcx = (speye(m*n) - kron(speye(n), circshift(eye(m), [1,0]))) / hx;
For the sake of illustration, we show what the operator, Dcx, look like for a 3x3 grid and what it
does to the x-component velocity field with periodicity shown in Fig. 1 below.
u7

u8

u9

u7

u4

u5

u6

u4

u1

u2

u3

u1

Fig. 1 X-component velocity field in a 3x3 grid
ͳ
‫ ۍ‬െͳ
‫Ͳێ‬
‫ێ‬
‫Ͳێ‬
‫ܦ‬௖௫ ‫ ܝ‬ൌ ‫Ͳێ‬
‫Ͳێ‬
‫Ͳێ‬
‫Ͳێ‬
‫Ͳۏ‬

Ͳ
ͳ
െͳ
Ͳ
Ͳ
Ͳ
Ͳ
Ͳ
Ͳ

െͳ
Ͳ
ͳ
Ͳ
Ͳ
Ͳ
Ͳ
Ͳ
Ͳ

Ͳ
Ͳ
Ͳ
ͳ
െͳ
Ͳ
Ͳ
Ͳ
Ͳ

Ͳ
Ͳ
Ͳ
Ͳ
ͳ
െͳ
Ͳ
Ͳ
Ͳ

Ͳ
Ͳ
Ͳ
െͳ
Ͳ
ͳ
Ͳ
Ͳ
Ͳ

Ͳ
Ͳ
Ͳ
Ͳ
Ͳ
Ͳ
ͳ
െͳ
Ͳ

Ͳ
Ͳ
Ͳ
Ͳ
Ͳ
Ͳ
Ͳ
ͳ
െͳ

‫ݑ‬ଵ െ ‫ݑ‬ଷ
Ͳ ‫ݑ‬ଵ
Ͳ‫ݑۍ ې‬ଶ ‫ݑۍ ې‬ଶ െ ‫ݑ‬ଵ ‫ې‬
Ͳ‫ݑێ ۑ‬ଷ ‫ݑێ ۑ‬ଷ െ ‫ݑ‬ଶ ‫ۑ‬
‫ێ ۑ ێۑ‬
‫ۑ‬
Ͳ‫ݑێ ۑ‬ସ ‫ݑێ ۑ‬ସ െ ‫ۑ ଺ݑ‬
Ͳ‫ݑێ ۑ‬ହ ‫ ۑ‬ൌ ‫ݑێ‬ହ െ ‫ݑ‬ସ ‫ۑ‬Ǥ
Ͳ‫ ଺ݑێ ۑ ଺ݑێ ۑ‬െ ‫ݑ‬ହ ‫ۑ‬
െͳ ‫ ଻ݑێ ۑ ଻ݑێ ۑ‬െ ‫ݑ‬ଽ ‫ۑ‬
Ͳ‫ ଼ݑێ ۑ ଼ݑێ ۑ‬െ ‫ۑ ଻ݑ‬
ͳ‫ݑۏ ے‬ଽ ‫ݑۏ ے‬ଽ െ ‫ے ଼ݑ‬

(22)

Likewise, the operator ‫ܦ‬௫௖ when operating on the pressure field of the same 3x3 system, shown in
Fig. 2 below yields the difference

p7

p8

p9

p7

p4

p5

p6

p4

p1

p2

p3

p1

Fig. 2 Pressure field over a 3x3 grid with periodic boundary conditions
்
் ሾ‫݌‬
்
‫ ܘ‬ൌ െ‫ܦ‬௖௫
െ‫ܦ‬௖௫
ଵ ‫݌‬ଶ ‫݌‬ଷ ‫݌‬ସ ‫݌‬ହ ‫݌ ଼݌ ଻݌ ଺݌‬ଽ ሿ 

ൌ ሾ‫݌‬ଶ െ ‫݌‬ଵ ‫݌‬ଷ െ ‫݌‬ଶ ‫݌‬ଵ െ ‫݌‬ଷ ‫݌‬ହ െ ‫݌‬ସ ‫ ଺݌‬െ ‫݌‬ହ ‫݌‬ସ െ ‫ ଼݌ ଺݌‬െ ‫݌ ଻݌‬ଽ െ ‫ ଻݌ ଼݌‬െ ‫݌‬ଽ ሿ் ǡ (23)
்
்
൅ ‫ܦ‬௖௬ ‫ܦ‬௖௬
Ǥ
‫ܦ‬௦௤ ൌ ‫ܦ‬௖௫ ‫ܦ‬௖௫

Therefore, the discretized momentum equation in the x-direction can be written as

1212

(24)

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

் ሾ‫݌‬௛ ሿ
‫ܦ‬௦௤ ሾ‫ ݑ‬௫ǡ௛ ሿ െ ‫ܦ‬௖௫
ൌ ߩ݃௫ Ǥ

(25)

Similarly, we can get the momentum equation in the y-direction
் ሾ‫݌‬௛ ሿ
ൌ ߩ݃௬ Ǥ
‫ܦ‬௦௤ ሾ‫ ݑ‬௬ǡ௛ ሿ െ ‫ܦ‬௖௬

(26)

‫ܦ‬௖௫ ሾ‫ ݑ‬௫ǡ௛ ሿ ൅ ‫ܦ‬௖௬ ሾ‫ ݑ‬௬ǡ௛ ሿ ൌ ͲǤ

(27)

And the continuity equation is

And the whole system can be collected in one global matrix as:
‫ܦ‬௦௤
቎ Ͳ
‫ܦ‬௖௫

Ͳ
‫ܦ‬௦௤
‫ܦ‬௖௬

்
െ‫ܦ‬௖௫
‫ݑ‬௫
ߩ݃௫
்
െ‫ܦ‬௖௬ ቏ ൥‫ݑ‬௬ ൩ ൌ ൥ߩ݃௬ ൩Ǥ
‫݌‬
Ͳ
Ͳ

(28)

2.3 The solid boundary
As explained earlier this technique has been designed mainly for gravity-driven systems with
boundary conditions that are periodic. This implies that, no specific values of boundary conditions
need to be imposed. For other systems, which are more popular (e.g., pressure-driven systems), the
boundaries are assigned particular velocity or pressure values. In this case, special treatments need to
be devised. There are two issues here; the first is the need to assign particular cells certain predefined
value of pressure or velocity; and the second is to extend the domain boundaries such that, in the
extended system, the boundaries are periodic. That is to encompass the computational domain of
interest within a larger region that is periodic. If the domain contains inactive cells, i.e., cells that are
either assigned predefined velocity or pressure conditions or solid region inside the computational
domain, one can eliminate them form the set of unknowns by using an exclusion operator. To use our
scheme, the domain is extended along the right and left boundaries and therefore the boundary cells
are now inside the computational domain. Such cells are excluded from the matrix of coefficients and
are moved to the right hand side using exclusion operators.
As an example, for the solid boundary where the velocity is known, both the velocity and the
pressure in these cells need to be removed. The solid can be written in a Boolean matrix as all the
elements are zero other than the occupied cells. In matrix operation, we can have a coefficient matrix
which can remove the velocity and pressure in certain cells. The restriction matrix for solid phase R
should be added to remove the solid from fluid, then we can have
‫ܦ‬௦௤
‫ ܣ‬ൌ ܴ቎ Ͳ
‫ܦ‬௖௫

Ͳ
‫ܦ‬௦௤
‫ܦ‬௖௬

்
െ‫ܦ‬௖௫
்
െ‫ܦ‬௖௬ ቏ ்ܴ Ǥ
Ͳ

(29)


‫ݑ‬ோ௫ǡ௛

‫ ܣ‬൦‫ݑ‬ோ௬ǡ௛ ൪
‫݌‬ோ௛

ߩ݃௫
ߩ݃
ൌ ܴ ൥ ௬ ൩Ǥ
Ͳ

(30)

1213

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

3 Coding in MATLAB
In MATLAB, we can easily construct the discretized difference operators corresponding to the
continuous operators given in equations 4 and 5 using the functions “circshift” and “kron”. Assuming
a grid mesh of size mxn, the difference operators defined earlier can be constructed as:
Dcx = (speye(m*n) - kron(speye(n), circshift(eye(m),[1,0]))) / hx;
Dcy = (speye(m*n) - kron(circshift(eye(n),[1,0]),speye(m))) / hy;
Dsq = mu*(Dcx*Dcx'+Dcy*Dcy');



To treat boundary conditions (taking channel flow as an example), we first define the boundary
values using the following Boolean operators: “isPreBdry” for pressure boundary, “isUx0Bdry” for
velocity boundary in x-direction and “isUy0Bdry” for velocity boundary in y-direction. They are
defined (for the case of channel flow) in the following manner:
isPreBdry = false(m,n); isPreBdry(1,:) = 1; isPreBdry(end,:) = 1; isUx0Bdry = false(m,n);
isUx0Bdry (:,1)=1; isUx0Bdry(:,end) = 1; isUy0Bdry = false(m,n); isUy0Bdry(1,:) = 1;
isUy0Bdry (end,:) = 1; isUy0Bdry(:,1) = 1; isUy0Bdry (:,end) = 1;
To construct the reduced matrix for the pressure, we use:
Rp = speye(m*n); Rp(isPreBdry(:),:) = [];
Likewise, for the velocity, we define the reduced matrix as:
isUx0 = isUx0Bdry | circshift(isUx0Bdry,[-1 0]); isUy0 = isUy0Bdry | circshift(isUy0Bdry,[0 -1]);
Rx = speye(m*n); Rx(isUx0(:),:) = []; Ry = speye(m*n); Ry(isUy0(:),:) = [];
And, therefore, the whole R could be represented by R = blkdiag (Rx,Ry,Rp);
Now, to import the boundary condition to our Matrix Equation, or to make the right hand side nonzero, we could add a matrix E to the coefficient matrix as:
E = sparse(m*n,m*n); E(isPreBdry(:),isPreBdry(:))=1;
A=[Dsq,OO,-Dcx'+E;OO,Dsq,-Dcy'+E;-Dcx,-Dcy,E]; A=R*A*R'
where OO is the zero matrix. Thus, for the right-hand-side, we need to add
p=p(:); uxx=(-Dcx’+E)*p; uyy=(-Dcx’+E)*p; pp=E*p; Rhsb=[uxx;uyy;pp];
where p is the initial pressure we set( including the boundary) and Rhsb is a vector that should be
add to the right hand side:
bf=ones(m*n,1);b=rho*[gx*bf;gy*bf;0*bf]; b=b+Rhsb; b=R*b;

4 Implementation and comparisons
We apply this method to two typical steady-state benchmark problems. These include the lid driven
cavity problem and the channel flow and compare the simulation results with the benchmark.

1214

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

In lid driven cavity, we set the velocity of the lid to unity, the density and viscosity are 1 and there
is no gravity. The simulation results show patterns as expected. The velocity of the lid drives the fluid
to circulate within the computational domain as depicted in Fig. 3. We further compare the results at
the centerline with those computed using traditional MAC ([6], [7], [8], [9], [10]) method and
generally good agreement is achieved as shown in Fig. 4. We also check the simulation of standard
channel flow as shown in Fig. 5, which shows the velocity profile and contours similar to typical
channel flow.





(a) Quiver of velocity victors

(b) Contours of velocity

Fig. 3 Result of the shifting matrix algorithm for lid driven cavity


2XU0HWKRG
0$&H


















\

(a) x-component velocity at the vertical
centerline

\FRPSRQHQW
YHORFLW\

[FRPSRQHQW
YHORFLW\



2XU0HWKRG
0$&H












[

(b) y-component velocity at the horizontal
centerline

Fig. 4 Comparison of velocity components at the vertical and horizontal centerlines using our
technique and MAC

(a) quiver of velocity

(b) contour of velocity

Fig. 5 Result of our method for channel flow

1215

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

5 Expanding to Navier-Stokes equations
Also, this method could be extended to solve the Navier-Stokes equations. We need to add the
nonlinear term and the unsteady term to the momentum equations. As an example, the discretized
momentum equation in x direction using our matrix-vector notation should be like
೙శభ

ߩ

ൣ௨ೣǡ೓ ൧

೙

ିൣ௨ೣǡ೓ ൧

ο௧

௡
௬
భ ൨ Ǥ‫כ‬
௜ǡ௝ି

൅ ሾ‫ ݑ‬௫ǡ௛ ሿ௡ Ǥ‫ܦ כ‬௖௫ ሾ‫ ݑ‬௫ǡ௛ ሿ௡ାଵ ൅ ൤‫ݑ‬

మ

் ሾ‫ ݌‬௛ ሿ௡ାଵ
‫ܦ‬௖௬ ሾ‫ ݑ‬௫ǡ௛ ሿ௡ାଵ െ ‫ܦ‬௦௤ ሾ‫ ݑ‬௫ǡ௛ ሿ௡ାଵ െ ‫ܦ‬௖௫
ൌ ߩ݃௫

. (31)

For example, for lid driven cavity, withο‫ ݐ‬ൌ ͲǤͲͳ and number of time steps of 100, we get the
result shown in Fig. 6.

6 CPU time comparisons
To show the efficiency of our method with respect to CPU time, we compare with other methods
according to the following rules:
1. All the methods compared here are coded by one person, which is to avoid the effect of
differences in the coding custom.
2. To acquire the CPU time more accurately, the code calls respective functions in the languages
used. For example, i ǡ   ǲǳ    ǲǳ Ǥ
	ǡ   ǲ ሺሻǳ     ǲ ሺሻǳ   Ǥ 
ǲǦǳǤ

(a) Quiver of velocity

(b) Contour of velocity

Fig. 6 Result of our method for lid driven cavity under Navier-Stokes equations
͵Ǥǡ
ǲǳǤ
We use three methods in Fortran: MAC is a finite-difference method, Simple is a finite-volume
method and D2Q9 is a Lattice-Boltzmann method. Also, we draft a MATLAB code, with traditional
“for” loops to calculate the coefficients of the partial difference equations one by one. For each
method, we simulate the lid driven cavity problem, with mesh sizes of 10x10 to 100x100, and get the
time used to get the steady state individually. The result is as follows,

1216

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

&38WLPHV


0$&IRUWUDQ



6LPSOHIRUWUDQ
'4IRUWUDQ



6KLIW0DWUL[


















PHVKVL]H
Fig. 7 Comparisons of the time used to get the steady state solution with different mesh size
Figure 7 shows that our approach (the shifting matrix algorithm), is very efficient and compares
very well with many of the standard techniques utilizing non-interpreting languages.

7 Conclusion
Employing the MATLAB language’s own functions, we can get a compact implementation of
Stokes Equations. It’s obvious that this will reduce greatly the lines of our code. With several
numerical simulations of different typical cases, we proved that our method with matrix-vector
notation can treat both the Stokes Equations and Navier-Stokes Equations well. Especially, for the
Stokes equation, we can get the steady state solution quickly. Moreover, we can apply this method to
treat more kinds of partial difference equations, such as Cahn-Hilliard equation. We can draft this
method as our own function, and call it to solve other equations when needed.

References
S. Sun, A. Salama, M.F. El Amin, Matrix-oriented implementation for the numerical solution of
the partial differential equations governing flows and transport in porous media, Computers & Fluids,
68, (2012) 38–46
A. Salama, S. Sun, and M.F. El-Amin, A Novel Numerical Approach for the Solution of the
Problem of Two-Phase, Immiscible Flow in Porous Media: Application to LNAPL and DNAPL, 4th
International Conference on Porous Media and its Applications in Science, Engineering and Industry,
June 17-22, 2012, Potsdam, Germany, AIP Conference Proceedings, Vol. 1453, Issue 1, Pages 135-,
140
A. Salama, A., S. Sun, M.F. El-Amin, An Efficient Implicit-Pressure Explicit-Saturation Based
Shifting-Matrix Algorithm To Simulate Two-Phase, Immiscible Flow in Porous Media With
Application to CO2 Sequestration in the Subsurface, SPE Journal, 13, 6, (2013) 1092-1101

1217

A compact numerical implementation

Tao Zhang, Amgad Salama, Shuyu Sun and Hua Zhong

S. Kim, S.J. Karrila, Microhydrodynamics: Principles and Selected Applications, Dover. (2005)
ISBN 0-486-44219-5
B. J. Kirby, Micro- and Nanoscale Fluid Mechanics: Transport in Microfluidic Devices,
Cambridge University Press. (2010) ISBN 978-0-521-11903-0
J. P. Wang, A. G. L. Borthwick, R.E.,Taylor, Finite-volume-type VOF method on dynamically
adaptive quadtree grids, Int J Numer Methods Fluids, 45, (2004), 485–508
S. McKee , M.F. Tome, The MAC method. Computers & Fluids 37 (2008) 907–930
R. B., Bird, R.C. Armstrong, O. Hassager, Dynamics of polymeric liquids. Fluid mechanics, 2nd
ed., vol. I. New York: John Wiley & Sons; 1967
J. M. Boulton-Stone, J. R. Blake, Gas bubbles bursting at a free surface, J Fluid Mech, 254, (1993)
437–466
J. U. Brackbill, H. M. Ruppel, FLIP: a method for adaptively zoned, particle-in-cell calculations
of fluid flows in two dimensions, J Comput Phys;65, (1986), 314–43
J. U. Brackbill, The ringing instability in particle-in-cell calculations of low-speed flow, J Comput
Phys, 75, (1988) 469–492
J. U. Brackbill, FLIP MHD: a particle-in-cell method for magnetohydrodynamics, J Comput Phys,
96, (1991) 163–92

Appendix
%%% for Lid Driven Cavity
clear all; close all;
tic;
Lx=1.0; Ly=1.0; gx=0; gy=0; rho=1; mu=1; m=100;n=100; hx=Lx/m;hy=Ly/n;
isSolid=false(m,n);isSolid(m:m,1:n)=1;isSolid(1:m,1:1)=1;isSolid(1:1,1:n)=1;isSolid(1:m,n:n)=1;
Dcx=(speye(m*n)-kron(speye(n),circshift(eye(m),[1,0])))/hx;
Dcy=(speye(m*n)-kron(circshift(eye(n),[1,0]),speye(m)))/hy;
Dsq=mu*(Dcx*Dcx'+Dcy*Dcy'); OO=sparse(m*n,m*n);
A=[Dsq,OO,-Dcx';OO,Dsq,-Dcy';-Dcx,-Dcy,OO]; A(end,end)=A(end,end)+max(abs(A(:,end)));
bf=ones(m*n,1);b=rho*[gx*bf;gy*bf;0*bf]; ux=sparse(m,n);uy=sparse(m,n);p=sparse(m,n);
for i=1:n
ux(i,m)=1;
end
isUx0=isSolid|circshift(isSolid,[-1 0]); isUy0=isSolid|circshift(isSolid,[0 -1]);
Rp=speye(m*n); Rp(isSolid(:),:)=[]; Rx=speye(m*n); Rx(isUx0(:),:)=[];
Ry=speye(m*n); Ry(isUy0(:),:)=[]; R=blkdiag(Rx,Ry,Rp);
ux=ux(:); uy=uy(:); p=p(:); uxb=-Dsq*ux; uyb=-OO*ux; OG=[uxb;uyb;p]; x=R'*((R*A*R')\(R*(b+OG)));
ux=reshape(x(1:m*n),[m,n]); uy=reshape(x(m*n+1:2*m*n),[m,n]); p=reshape(x(2*m*n+1:3*m*n),[m,n]);
for i=1:n
ux(i,m)=1;
end
toc

1218

