Revisiting Some Control Schemes for Chaotic
Synchronization with Mathematica
Andr´es Iglesias1,2, and Akemi Galvez2

2

1
Department of Computer Science, University of Tsukuba,
Laboratory of Advanced Research, Building B, Room # 1025,
Kaede Dori, 305-8573, Tsukuba, Japan
Department of Applied Mathematics and Computational Sciences,
University of Cantabria, Avda. de los Castros, s/n
E-39005, Santander, Spain
iglesias@unican.es
uc8031@alumnos.unican.es
http://personales.unican.es/iglesias

Abstract. An interesting topic in dynamical systems is chaotic synchronization, that is, the possibility to synchronize the behavoir of several
chaotic systems. Among the variety of available schemes, those dealing
with some sort of control mechanisms have received increasing attention
in recent years. In this work, we applied the program Mathematica to
study the control strategies of chaotic synchronization. In our opinion,
the powerful symbolic, numeric and graphic capabilities of Mathematica
make this software an ideal tool to analyze the problem on hand.

1

Introduction

A very interesting issue in dynamical systems is the so-called chaotic synchronization, that is, the possibility to synchronize the behavior of several chaotic
systems. Among the diﬀerent schemes for chaotic synchronization, those based
on the application of some kind of control have received increasing attention during the last few years. This paper analyzes some control strategies for chaotic
synchronization by using the program Mathematica [16], one of the most popular and widely used computer algebra systems. One of the most remarkable
Mathematica features is the integration of very powerful symbolic, numerical
and graphical capabilities within a uniform framework. This feature is especially
useful here because the equations describing the dynamics of the chaotic systems
are nonlinear, and hence, an adequate combination of numerical and symbolic
procedures is usually required in order to analyze their behavior. The reader is
referred to [8, 11, 12] for previous works about the application of Mathematica
to the analysis of chaotic systems.
Corresponding author.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 651–658, 2005.
c Springer-Verlag Berlin Heidelberg 2005

652

A. Iglesias and A. Galvez

The structure of the paper is as follows: in Section 2 we describe some control
schemes for chaotic synchronization. They have been organized for clarity into
two subsections, devoted to those methods based on designing a controller and
those based on the stabilization of the error dynamics. Finally, the paper closes
with the conclusions and some further remarks.

2

Control Schemes for Chaotic Synchronization

Recently, it has been shown that chaotic systems can be synchronized by applying some kind of control [1, 2, 3, 4, 5, 7]. For example, [2] presents the synchronization of a couple of Lorenz systems by using active control, while in [3]
and [4] controllers for the Duﬃng and logistic systems respectively have been
described. In particular, in [3] the authors tried to answer the following question: given a chaotic system and an arbitrary reference signal, is it possible to
design a controller based on this reference signal so that the output of the chaotic
system follows this signal asymptotically? As remarked by the authors, the synchronization of chaotic systems belongs to this class of problems: it is enough to
consider the output of one of the chaotic systems as the reference signal. In fact,
the approach in [3] is more general, since the reference signal could be not only
the output of a chaotic system but also any other (linear or nonlinear) signal.
2.1

Designing a Controller for Chaotic Synchronization

The basic idea of this method is to consider a chaotic system in the form:
x (t) = y(t)
y (t) = f (x(t), y(t), t) + u(t)

(1)

where f (x(t), y(t), t) is a nonlinear function of x, y and t and u(t) is the controller
to be designed. If z(t) is the reference signal to be followed by the system, the
proposed control function u(t) takes the form [3]:
u(t) = −f (x(t), y(t), t) − α1 x(t) − α2 y(t) + [z (t) + α2 z (t) + α1 z(t)]

(2)

It can proved (see [3] for details) that the error between the output of the
chaotic system and the reference signal converges to zero as long as the constants
α1 and α2 are both greater than zero for any initial condition. It is important to
remark that this control function u(t) does not contain any information about
the system structure which generates the signal z(t). As a consequence, this
scheme can be applied to a very wide variety of situations, such as, for instance,
inhomogeneous driving.
To illustrate this method, let us consider the Duﬃng system given by the
couple of ordinary diﬀerential equations:
In[1]:= duf1={x’[t]==y[t],y’[t]==1.8 x[t]-0.1 y[t]x[t]^ 3+1.1 Cos[0.4 t],x[0]==0,y[0]==2}

Control Schemes for Chaotic Synchronization with Mathematica

653

2
1
0
-1
-2
0

50

100

150

200

Fig. 1. Synchronization of a Duﬃng system to a driving signal given by z(t) =
sin(0.2 t). The ﬁgure shows the temporal series of the x variable of such a system
before and after the application of the synchronization procedure (indicated by the
vertical dashed line)

The chaotic behavior of this system in the interval (0,100) is depicted in
Figure 1 (to the left of the dashed line):
In[2]:= NDSolve[duf1,{x,y},{t,0,100},MaxSteps->20000]//Flatten
In[3]:= x1[t ]=x[t] /. %;
Now, we would like to force the system to follow the sinusoidal signal z(t) =
sin(0.2 t). To accomplish this, we apply the control function, u(t), as follows:
In[4]:= z[t ]:=Sin[0.2 t];
In[5]:= u[t ]=-1.8 x[t]+0.1 y[t]+x[t]^ 3-1.1 Cos[0.4 t]-x[t]-y[t]+
z’’[t]+z’[t]+z[t];
According to (1), for this particular choice of the reference signal, we consider
the system:
In[6]:= duf2={x’[t]==y[t],y’[t]==1.8 x[t]-0.1 y[t]-x[t]^ 3+
1.1 Cos[0.4 t]+u[t],x[100]==0.044674,y[100]==-0.61367}
where the initial conditions were obtained from the previous integration of the
system duf1. Now, we integrate duf2 and display the resulting temporal series
for the x variable:
In[7]:= NDSolve[duf2,{x,y},{t,100,200},MaxSteps->20000]//Flatten;
In[8]:= sx[t ]:=If[0≤t≤100,x1[t],x[t] /. %];
In[9]:= Show[{Plot[sx[t],{t,0,200},PlotStyle->RGBColor[0,0,1],
PlotRange->{-2.7, 2.7},Frame->True],
Graphics[{RGBColor[1,0,0],Dashing[{0.01}],
Line[{{100,-2.7},{100,2.7}}]}]}]
Out[9] := See F igure 1
Figure 1 shows the evolution of the variable x of the Duﬃng system before
and after the application of the control function (indicated by the vertical dashed
line). From this ﬁgure, the good performance of this synchronization method
between the chaotic system and the driving signal becomes clear.

654

A. Iglesias and A. Galvez
4

3

2

1

0

-1

-2

-3

0

50

100

150

200

250

300

0

50

100

150

200

250

300

0

50

100

150

200

250

300

0

50

100

150

200

250

300

4

3

2

1

0

-1

-2

-3

4

3

2

1

0

-1

-2

-3

4

3

2

1

0

-1

-2

-3

Fig. 2. Synchronization of two Duﬃng systems using active control in which the signal
of the drive acts as the driving signal for the response: temporal series of the drive and
response systems for the variables x (top) and y (bottom) respectively

As remarked above, this method is useful to achieve chaos synchronization
by simply considering the output of a system (the drive) as the reference signal

Control Schemes for Chaotic Synchronization with Mathematica

655

z(t) to be injected into the response. In the next example we consider two nonidentical (since they are given by diﬀerent parameter values) chaotic Duﬃng
systems:
In[10]:= duf3={x3’[t]==y3[t],y3’[t]==1.8 x3[t]-0.1 y3[t]x3[t]^ 3+1.1 Cos[t],x3[0]==0,y3[0]==2};
In[11]:= duf4={x4’[t]==y4[t],y4’[t]==1.8 x4[t]-0.1 y4[t]x4[t]^ 3+1.1 Cos[0.4 t],x4[0]==-3,y4[0]==-1};
Integrating these equations in the interval (0,100), we can observe a chaotic
behavior for both variable x and y as shown in Figure 2 (to the left of the dashed
line):
In[12]:= rul1=NDSolve[Union[duf3,duf4],{x3,y3,x4,y4},{t,0,100},
MaxSteps->20000]//Flatten;
Now, we force the system to follow the output of the drive system z(t) = x3 (t).
Hence, after t = 100 the method is applied with u(t) given by:
In[13]:= u[t ]=-1.8 x4[t]+0.1 y4[t]+x4[t]^ 3-1.1 Cos[0.4 t]x4[t]-y4[t]+x3’’[t]+x3’[t]+x3[t];
so that the second system becomes:
In[14]:= duf4={x4’[t]==y4[t],y4’[t]==1.8 x4[t]-0.1 y4[t]-x4[t]^ 3+
1.1 Cos[0.4 t]+u[t],x4[100]==-0.429856,y4[100]==-1.73792};
Finally, we integrate the resulting system and display the temporal series for
the variables x and y of the drive and response systems, as shown in Figure 2.
In[15]:= rul2=NDSolve[Union[duf3,duf4],{x3,y3,x4,y4},{t,100,300},
MaxSteps->30000]//Flatten;
In[16]:= {sx3[t ],sx4[t ],sy3[t ],sy4[t ]}=If[0≤t≤100,
# /. rul1,# /. rul2]& /@ {x3[t],x4[t],y3[t],y4[t]};
In[17]:= Show[Plot[#,{t,0,300},PlotStyle->RGBColor[1,0,0],
PlotRange->{-4,4},Frame->True],
Graphics[{RGBColor[1,0,0],Dashing[{0.02}],
Line[{{100,-4},{100,4}}]}]}]& /@
{sx3[t],sx4[t],sy3[t],sy4[t]}
Out[17] := See F igure 2
2.2

Chaotic Synchronization via Stabilization of the Error
Dynamics

In [9] a method that allows synchronizing drive-response connections that do not
synchronize in the Pecora-Carroll [15] sense (that is, connections with positive
conditional Lyapunov exponents) was presented. The key idea of the method is
considering a convex combination of the drive and the response subsystems as
the new driving signal. In this combination, the component associated with the

656

A. Iglesias and A. Galvez

response system acts as a chaos suppression method stabilizing the dynamics of
this system. Then, the component associated with the drive imposes the behavior
of the drive into the stabilized response synchronizing both systems.
Also in [7] a strategy to synchronize two strictly diﬀerent chaotic oscillators
(a Duﬃng and a Van der Pol oscillators as the drive and the response systems, respectively) was designed by following the next steps: ﬁrstly, the problem
of chaos synchronization was seen as a stabilization one, where the goal is to
stabilize the dynamical system of the synchronization error. Then, the chaos
suppression problem was solved through a robust asymptotic controller, which
is based on geometrical control theory. To estimate the diﬀerences between the
models, they used a nonlinear function, which can be interpreted as a state
variable in a equivalent extended system. Thus, the controller allows the energy
“excess” from the slave system to be absorbed and that the oscillators behave
in a synchronous way.
A similar idea was proposed in [1] for a couple of Rossler systems and in [5]
to synchronize two nonlinear chaotic electronic circuits. For example, in [1] the
authors considered an active control to be applied to the second system of a
couple drive-response in order to get synchronization. The aim of this feedback
control is to achieve the asympotic stability of the zero solution of the error system (i.e., the diﬀerences between the drive and the response). The performance
of this method can be illustrated by considering the Rossler model, described by
a set of three diﬀerential equations. The drive system is given by:
In[18]:= ros1={x1’[t]==-y1[t]-z1[t],y1’[t]==x1[t]+0.2 y1[t],
z1’[t]==0.2+z1[t](x1[t]-5.7),x1[0]==0.5,y1[0]==1,z1[0]==1.5};
For the second system we introduce three control functions u1 (t), u2 (t) and
u3 (t) as:
In[19]:= ros2={x2’[t]==-y2[t]-z2[t]+u1[t],y2’[t]==x2[t]+0.2 y2[t]+
u2[t],z2’[t]==0.2+z2[t](x2[t]-5.7)+u3[t],
x1[0]==2.5,y1[0]==2,z1[0]==2.5};
To determine those functions, the authors considered the error system as the
diﬀerence between both Rossler systems and deﬁned the control functions as:
In[20]:={u1[t],u2[t],u3[t]}={V1[t],V2[t],x1[t]z1[t]-x2[t]z2[t]+V3[t]};

There are many possible choices for these control functions V1 (t), V2 (t) and
can choose: ⎞ ⎛
V3 (t). For example,
⎛
⎞we ⎛
⎞
V1[t]
−1 1 1
x2[t] − x1[t]
In[21]:= ⎝ V2[t] ⎠ = ⎝ −1 −1.2 0 ⎠ ⎝ y2[t] − y1[t] ⎠;
V3[t]
0 0 4.7
z2[t] − z1[t]
For this choice, the diﬀerence system becomes:
In[22]:= rhs[Equal[a ,b ]]:=b;
In[23]:= {sys2,sys1}=rhs/@ #& /@ (Take[#,3]& /@{ros2,ros1});

Control Schemes for Chaotic Synchronization with Mathematica

657

In[24]:= sys2-sys1 //Simplify
⎛
⎞
x2[t] − x1[t]
Out[24] := − ⎝ y2[t] − y1[t] ⎠
z2[t] − z1[t]
whose characteristic matrix is −I, where I is the diagonal matrix. Therefore,
the diﬀerence system has all its eigenvalues negative implying that the error
converges to zero as time t goes to inﬁnity and hence the synchronization of the
two Rossler systems is achieved (see [1] for details).

3

Conclusions and Further Remarks

These previous proposals can be better understood as particular cases of a more
general theory, for which controlled synchronization is seen as the procedure
to ﬁnd, given both the transmitter (or drive) and the receiver (or response) as
well as the corresponding output function, a suitable mechanism to control the
response system such that the drive and response will asymptotically synchronize
[14]. In general, this problem can be describe as follows: given a transmitter
x = f (x) with output y = g(x) and a receiver x = h(x, u) systems, where
we assume that both x and x are n-dimensional vectors, and u is the unknown
control function, the goal is to obtain this control function such that x and x
asymptotically synchronize.
Of course, there are many diﬀerent ways to solve this problem, mostly based
on the use of a feedback control of the form u = θ(x, y) where θ is a smooth
function depending on the receiver x and the output of the transmitter y. However, it must be said that this problem of ﬁnding a suitable output feedback
controller achieving synchronization between the transmitter and the receiver is,
in general, a very diﬃcult (or even impossible) task and only particular examples
(as those shown above) have been described in the literature. Other interesting
references on controlled synchronization can be found in [6, 10, 17].
All the commands have been implemented in Mathematica version 4 [16]. The
symbolic capabilities and the powerful Mathematica functional programming
[13] have been extensively used to make the programs shorter and more eﬃcient.
In our opinion Mathematica is a very useful tool to analyze the interesting
problem of chaotic synchronization through control schemes in a user-friendly
and easy way.

References
1. Agiza, H.N., Yassen, M.T.: Synchronization of Rossler and Chen chaotic dynamical
systems using active control, Phys. Lett. A 278 (2001) 191-197
2. Bai, E.W., Lonngren, K.E.: Synchronization of two Lorenz systems using active
control, Chaos, Solitons and Fractals 8 (1997) 51-58
3. Bai, E.W., Lonngren, K.E.: Synchronization and control of chaotic systems, Chaos,
Solitons and Fractals 10 (1999) 1571-1575

658

A. Iglesias and A. Galvez

4. Bai, E.W., Lonngren, K.E.: A controller for the logistic equations, Chaos, Solitons
and Fractals 12 (2001) 609-611
5. Bai, E.W., Lonngren, K.E., Sprott, J.C.: On the synchronization of a class of
electronic circuits that exhibit chaos, Chaos, Solitons and Fractals 13 (1999) 15151521
6. Blekhman, I.I., Fradkov, A.L., Nijmeijer, H., Yu, A.: On self-synchronization and
controlled synchronization, Syst. Contr. Lett. 31 (1997) 299-305
7. Femat, R., Solis, G.: On the chaos synchronization phenomena, Phys. Lett. A 262
(1999) 50-60
8. Guti´errez, J.M., Iglesias, A.: A Mathematica package for the analysis and control
of chaos in nonlinear systems, Computers in Physics 12(6) (1998) 608-619
9. Guti´errez, J.M., Iglesias, A.: Synchronizing chaotic systems with positive conditional Lyapunov exponents by using convex combinations of the drive and response
systems, Phys. Lett. A 239(3) (1998) 174-180
10. Huijberts, H.J.C., Nijmeijer, H., Willems, R.: Regulation and controlled synchronization for complex dynamical systems, Int. J. Robust Nonlinear Contr. 10 (2000)
363-377
11. Iglesias, A., Guti´errez, J.M., Ans´
otegui, D., Carnicero, M.A.: Transmission of digital signals by chaotic synchronization. Application to secure communications, In:
Keranen, V., Mitic, P., Hietamaki, A. (Eds.) Innovation in Mathematics. Proceedings of the Second International Mathematica Symposium-IMS’97, Computational
Mechanics Publications, Southampton, England (1997) 239-246
12. Iglesias, A., G´
alvez, A.: Analyzing the synchronization of chaotic dynamical systems with Mathematica: Parts I-II. Computational Science and its ApplicationsICCSA’2005. Lecture Notes in Computer Science (2005) (in press)
13. Maeder, R.: Programming in Mathematica, Second Edition, Addison-Wesley, Redwood City, CA (1991)
14. Nijmeijer, H.: A dynamical control view on synchronization, Physica D 154 (2001)
219-228
15. Pecora, L.M., Carroll, T.L.: Synchronization in chaotic systems, Phys. Rev. Lett.
64 (1990) 821-823
16. Wolfram, S.: The Mathematica Book, Fourth Edition, Wolfram Media, Champaign,
IL & Cambridge University Press, Cambridge (1999)
17. Yu, A., Pogromsky, Nijmeijer, H.: Observer based robust synchronization of dynamical systems, Int. J. of Bifurc. and Chaos 8 (1998) 2243-2254

