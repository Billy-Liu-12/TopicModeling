Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1687 ‚Äì 1693

International Conference on Computational Science, ICCS 2012

Implementations of Urgent Computing on Production HPC Systems
K.K. Yoshimotoa,1 , D.J. Choia , R.L. Moorea , A. Majumdara , E. Hocksa
a San Diego Supercomputer Center
University of California San Diego, 9500 Gilman Drive, La Jolla,
CA 92093-0505
USA

Abstract
The requirements of urgent computing applications distinguish those applications from other jobs running within
a production batch system. To accomodate urgent computing, speciÔ¨Åc strategies may be used to allow fast job start
time, while mitigating adverse eÔ¨Äects on the other parts of the workload. San Diego Supercomputer Center (SDSC)
has provided high-performance computing resources in a production-oriented environment to urgent computing applications using several techniques. Processing of data, triggered by real-world disaster events has been accomplished.
An on-demand reservation capability to support urgent computing applications has been developed and is currently
available on the SDSC Trestles machine.
Keywords: urgent computing, batch system, scheduler, reservations, preemption, zombie apocalypse

1. Introduction
In order to eÔ¨Éciently share compute resources (cores, memory I/O bandwidth, storage within a compute cluster),
most high-performance computing (HPC) machines use a batch system to start and stop application code [1, 2]. While
designed to eÔ¨Éciently schedule the workload and optimize system utilization, this mode of operation means that
start times for applications are not guaranteed to be immediate. In contrast, Urgent Computing tasks require fastest
possible turnaround [3]. This tension between eÔ¨Éciently running a non-realtime, batch workload versus providing
near-immediate job start to time-critical tasks make production management of HPC resources a challenge.
Examples of applications that require Urgent Computing infrastructure include the Southern California Earthquake
Center (SCEC) earthquake simulation [4] and other other time-critical applications [5]. SpeciÔ¨Åc packages covered
in the 07 Urgent Computing Workshop [6] include EpiSims & Simfrastructure for Modeling Pandemics, LEAD and
Severe Weather Modleing, WildÔ¨Åre Modeling, SURA Coastal Ocean Observing and Prediction (SCOOP), Earthquake
and Geophysics, and NASA Space Shuttle Modeling.
DiÔ¨Äerent ways to implement urgent computing infrastructure have been suggested [3]. These include: elevatedpriority, next-to-run, job suspend/resume, job checkpoint/restart, and job kill. These strategies attempt to reach an
adequate compromise between running normal batch jobs and starting urgent computing jobs.
The elevated-priority strategy is least intrusive to the batch workload. In this mode, a normal workload is started
on the supercomputer. If an urgent computing job enters the queue, it would receive a higher priority. This has
URL: mailto:kenneth@sdsc.edu (K.K. Yoshimoto)

1877-0509 ¬© 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.186

1688

K.K. Yoshimoto / Procedia Computer Science 9 (2012) 1687 ‚Äì 1693

relatively low impact, as the running workload would continue. Existing high-priority jobs in the queue would also
be allowed to run as normal, depending on the relative priority between the normal high-priority job and the urgent
computing job.
The next-to-run strategy is slightly more disruptive. While running jobs are still allowed to continue, the urgent
computing job is guaranteed to receive the highest priority in the queue. This potentially blocks normal high-priority
jobs that would otherwise have expected to run soon.
Job suspend/resume interferes with the running workload by suspending execution of processes. This delays
completion of the job, but, if the job is resumed at a later time, no work is lost. This assumes that the job is contained
entirely on the local cluster and no external dependencies expire while the job is suspended (such as authentication
tickets, licenses, storage allocations). Suspended jobs have the potential to occupy resources on compute nodes.
Job checkpoint/restart allows the job to be saved and removed entirely from the compute nodes. This would
require system-initiated, parallel checkpoint/restart. Some restrictions may apply to jobs that are to be checkpointed.
There is a delay from the time required to write the job to storage that may delay start of the critical job.
The most disruptive method is job kill, in which running jobs are deleted, if necessary.
This report will describe how SDSC has attempted to achieve a successful batch-versus-urgent compromise in past
and current production machines. The current urgent computing system on Trestles was implemented with relatively
straightforward scheduler modiÔ¨Åcations and works well for a single cluster but does not have the multi-site, multi-user,
multi-application token abstraction infrastructure of SPRUCE.
2. Background
TeraGrid [7, 8] was a grid collaborative infrastructure project that made a number of supercomputers available for
computing. Within TeraGrid, the SPRUCE project integrated a number of machines [9] into a set of urgent computing
resources. Approximately ten such machines were available at one point. Hardware architecture included, Myrinet
or InÔ¨ÅniBand clusters with IA-32, x86 64, or IA-64 processors, Dell PowerEdge 1950 cluster, IBM Power SMP
clusters, and IBM BlueGene machines. Batch systems included Torque/Moab, LoadLeveler/Catalina, Sun GridEngine
(SGE), Load Sharing Facility (LSF), Cobalt and LoadLeveler. This is an incredible diversity of batch systems. Not
surprisingly the diversity of batch systems and diÔ¨Äering site policies resulted in a variety of urgent computing methods.
Two machines, the UC/ANL IA64 and the SDSC OnDemand cluster, provided for job kill by urgent computing jobs.
Users willing to run killable jobs on the IA64 were given a 10% discount. All other machines provided next-to-run
and/or elevated-priority service to urgent computing jobs.
SDSC partnered with California Institute of Technology to deliver automated, fast-turnaround simulations of
earthquake events [4, 10]. The earthquake modeling application required 36 nodes (144 cores). The OnDemand
cluster, with job kill preemption was used. 64 dual-socket nodes with Intel Woodcrest dual-core, 2.3 GHz processors
were available in this machine. The simulation required 23 minutes to complete.
Earthquake events are available through https://sslearthquake.usgs.gov/ens/. Caltech implemented monitoring of
this source. When a signiÔ¨Åcant earthquake (magnitude 3.5 or higher) was detected, 1KB of seismic data was sent to the
SDSC OnDemand system and a batch job was submitted to the SGE immediate queue. This seismic data was also sent
to a Caltech compute cluster for redundant processing. Submission to the ‚Äôimmediate‚Äô queue resulted in preemption
of jobs to make cores available. The job was then started on available cores. Processing took approximately 23
minutes. After job completion, output data (1GB of frame data) was sent back to Caltech. After post-processing, the
results were published on Caltech‚Äôs public web site (http://shakemovie.caltech.edu). From event detection to delivery
of simulation results to Caltech, all steps were done without need for human intervention, with the total pipeline from
event discovery to publication on the Caltech web site occurring in under 45 minutes.
Two notable events were processed in this fashion:
Date
Location
Magnitude URL
July 29, 2008
Chino Hills 5.4
http://shakemovie.caltech.edu/event?evid=14383980
April 11, 2010 Calexico
4.4
http://shakemovie.caltech.edu/event?evid=10602453

1689

K.K. Yoshimoto / Procedia Computer Science 9 (2012) 1687 ‚Äì 1693



	

	


	
	
!"	
 !


	


'





	
#$$%&&$

Figure 1: Earthquake simulation workÔ¨Çow. USGS event notiÔ¨Åcation is available at https://sslearthquake.usgs.gov/ens/. Caltech provides input data,
post-processes simulation output and publishes Ô¨Ånal simulation results. SDSC provides on-demand compute resources.

3. Current Implementation
The Trestles machine at SDSC was speciÔ¨Åcally designed, through innovative allocation policies and scheduling
strategies, to deliver good job turnaround time while maintaining acceptable utilization. Users are allocated approximately 70% of possible computing time. This allows for Ô¨Çexibility in scheduling workload. Using the headroom
created by the more conservative allocations policy, scheduling is set up to emphasize good turnaround for jobs as
Ô¨Årst priority, with utilization being second priority.
Trestles hardware consists of 324 nodes, each with four 8-core AMD Magny-Cours processors and 64 GB of
memory. There is also 120GB of Ô¨Çash storage on each node. InÔ¨ÅniBand is used as the high-performance network.
Trestles provides urgent computing capability through job kill preemption. Instead of an immediate queue run
through SGE, as done earlier with the OnDemand cluster, Trestles allows creation of a system reservation for preselected urgent computing applications. Once an urgent computing standing reservation is approved, the nodes are
reserved on an on-going basis. This ensures availability if an event occurs.
Using the same earthquake application as for the OnDemand machine, a Trestles reservation was created. The
reservation restricted access to Ô¨Åve Trestles nodes to earthquake jobs. These jobs were labeled with a Catalina Scheduler [11] directive for QOS 4. The job submit Ô¨Ålter restricted QOS 4 job submit to the earthquake users.
The Torque job script needs only an environment variable directive of QOS=4 to indicate the job is urgent. The
Catalina Scheduler has been conÔ¨Ågured to give the appropriate handling to QOS 4 jobs.
To mitigate loss of utilization between rare urgent events, jobs are also allowed to run within the reservation,
explicitly labeled as run at risk, indicating that these jobs may be killed, if necessary [3]. Users are provided the

1690

K.K. Yoshimoto / Procedia Computer Science 9 (2012) 1687 ‚Äì 1693

	











!"#$%%"&'("

)*"+
,
-."/(01
,2342/
0
,23425
%6

$&$

Figure 2: Job script for urgent job.

incentive of discounted costs to choose run at risk. Guidelines are provided to users regarding this option, including
a preference for shorter or checkpointed jobs. Another Torque environment variable directive is used to indicated a
run at risk job: Catalina run at risk=1.

	











!"#$%%"#&'"(#$

)*+"(
,
-*".'/0
,1231.
/
,12314
%5

$

Figure 3: Job script for run at risk job.

Under normal circumstances, run at risk jobs may use the reserved nodes. On a heavily-loaded machine, this
gives an advantage to those jobs willing to risk being displaced by a rare urgent event.
If a critical event occurs, a job tagged as an authorized urgent computing job is submitted. The job submit Ô¨Ålter
screens the job submission. Once the urgent job enters the queue, the scheduler creates a reservation for that job. If
necessary, run at risk jobs are killed to create space for the urgent job.
To test this capability, a 5-node (expandable if there is greater demand) reservation was created for the earthquake
simulation application. A number of run at risk jobs were submitted to the queue to run within the reservation. Once
these jobs were running, an urgent earthquake job was submitted. This resulted in killing of the run at risk jobs and
successful start and run of the urgent job.
Job start performance was good for jobs running in this mode. Timing from job submission to job start was in
the range of 1 minute, similar to normal batch jobs. This was relatively minor compared to the run time of the job of
approximately 25 minutes.
This implementation reserves only compute nodes and lacks any provision for storage space that might be required
by data-intensive jobs. For some classes of jobs, more extensive reservation capabilities may be required.
Another capability of Trestles is user-settable reservations. This allows users to create reservations for themselves,
under policy control. This may prove useful to users wishing to plan fast-turnaround development sessions, to instructors wishing to have exclusive access to a number of nodes during a classroom session, or to gateways with speciÔ¨Åc
timed workÔ¨Çow requirements. The key distinction from urgent access is the ability of users to predict when they need
guaranteed access. An example might be an approaching hurricane, for which computing sessions are known over a
several day period, versus an earthquake, for which computing session start times are unknown until the event occurs.
User-settable reservations are created and managed through a command-line interface. Commands are summarized in Commands table.

K.K. Yoshimoto / Procedia Computer Science 9 (2012) 1687 ‚Äì 1693

create

bind job to res
unbind job from res
bind res to job
bind res to job
unbind res from job
cancel

1691

Commands
user set res ‚Äìaccount=<account> ‚Äìnodes=<node count> ‚Äìduration=<seconds>
‚Äìearliest start=HH:MM mm/dd/YYYY ‚Äìlatest end=HH:MM mm/dd/YYYY
‚Äìemail=<email address>
user bind job <job id> <reservation id>
user unbind job <job id> <reservation id>
user bind res <reservation id> <job id>
user bind res <reservation id> <job id>
user unbind res <reservation id> <job id>
user cancel res <reservation id>

The reservation id is returned with successful completion of the user set res command.

	


			
		

!"#!"$%&!'(%"$)*+
,
-./'0 .0&.+
./'0 .0&.+
	
	
1
23	
4	-,56
2
"
556
2
4	-,5	6
2
"
55	6
2
5	'7+
	81	49	
'7::3
1+
,'21+81	

'+81	
'+
"	5	68
2
"	568
2

Figure 4: Example user set res session

If a job is submitted to the system, followed by a command to bind the job to a speciÔ¨Åc reservation, there may
be a race between the binding command the the scheduler start routines. To avoid this, there exists a mechanism
for specifying binding of a job to a reservation at job submit time. This is a Catalina res bind directive in the list of
environment variables for the job, as in Figure 5 .



	











!"#$%%"#&'" $# $

()!"*#+,*--+
.
/)"0'12
.34530
1
.34536
%+ 

Figure 5: Bound Job Example

1692

K.K. Yoshimoto / Procedia Computer Science 9 (2012) 1687 ‚Äì 1693

4. Discussion
The desire to balance eÔ¨Écient use of resources by all users with varying needs guides the policies for access to the
urgent computing reservation and user-settable reservations. Users must request access and be approved in advance
to use the urgent computing reservation. Current policy for Trestles restricts on-demand access to applications that
need urgent access in response to unpredictable natural or man-made events with societal impact (e.g. earthquakes, oil
spills, tsunamis, severe storms, infectious disease outbreaks). There are also a limited number of nodes (currently 5
nodes/160 cores), that are dedicated to urgent computing applications. For run at risk jobs, the willingness to accept
a job kill results in a decreased charge for running the job. The tradeoÔ¨Ä between discount and risk would need to
be monitored and adjusted to prevent all jobs from being submitted as run at risk or no jobs being submitted in that
mode. Clearly, the ‚Äùrisk‚Äù of run at risk depends on the frequency of urgent applications pre-empting access. What
happens if more than one critical application enters the queue during the same time period? At this point, Ô¨Årst critical
job will start to run while the remaining critical jobs will wait. It is possible to assign one job the highest priority and
the ability to pre-empt other critical jobs. In the case of multiple critical events, the one highest priority job would take
precedence over the others. It may be the case that critical events are rare enough that there will never be a conÔ¨Çict.
As long as all critical application users are aware of the possibility of conÔ¨Çict, user expectations will match reality.
On the other hand, it may better to restrict the number of critical applications allowed into the reservation to the single
most important or have a pre-arranged priority list for approved urgent applications.
User-settable reservations are constrained by a number of policies. There is a global limit on the number of
node-seconds of user-settable reservations during a sliding 7-day window. This prevents users from blocking an
unacceptably large portion of the machine. There is also a per allocations account limit on the number of reservations
and the node count and time limit of each reservation. For example, allocations account ‚Äôabc123‚Äô may be limited to
two reservations in the system, with each reservation holding no more than 32 nodes and no more than 24 hours. We
have previously shown that, depending on workload, policy control of user-settable reservations does not necessarily
result in unacceptable impact to the overall job schedule [12]. The charge to a user for creating a reservation is
the same as an equivalent size and time job. If the reservation is canceled with less than 24 hours notice, the user
is charged. The user is also charged for any jobs that run within the reservation. This means that jobs run with a
user-settable reservation are essentially twice the cost of jobs run at the discretion of the scheduler.
When deciding on the resource allocation strategy for critical applications, there are alternatives to gaining immediate access to shared compute cluster resources. One alternative is dedicating hardware solely to the critical
application. While this may seem wasteful for rare events, the increasing cost of power and other fungible charges
compared to the decreasing cost of initial hardware purchase will make it less beneÔ¨Åcial to amortize that initial hardware cost among constant shared usage. It may make more sense to install and leave quiescent dedicated compute
hardware until an event justiÔ¨Åes energy expenditure to run that hardware. It may be the case that hardware depreciation
costs make dedicated allocation of hardware untenable.
Commodity cloud infrastructures provide the capability for immediate access compute hardware. An applicationdependent issue is that of the oÔ¨Ä-node resources available: high-performance I/O and interconnect. If critical applications require HPC-level I/O and communication, they may suÔ¨Äer on cloud platforms. The additional robustness
from redundant systems may make clouds attractive as an additional pool for use with traditional HPC datacenter
resourcdes.
Perhaps a holistic approach that extends beyond software infrastructure is the best way to solve the urgent computing problem. In the event of a true catastrophe that requires immediate use of compute resources, a process for
allowing that to happen may be better than just implementation of a software infrastructure. For example, during a
global zombie outbreak, emergency management groups may require compute resources for immediate simulations
or response planning. If this event is not in the set of foreseen emergencies, it may be necessary to call up a data center
and request manual intervention to allow immediate start of the novel simulation. A valid urgent computing strategy
may involve all steps of the emergency invocation process, beyond use of the software layer, extending to humanto-human communication protocols and decision-making. Under what circumstances does the data center operations
staÔ¨Äer who answers the phone at 2am kill all jobs on the system and allow the caller (who may not even have an
account) to run a critical application on the system? Advance design of an urgent computing process may allow such
events to be handled gracefully. For sustained emergencies, this mode of access will happen and allocation beyond
the reserved nodes will be possible.

K.K. Yoshimoto / Procedia Computer Science 9 (2012) 1687 ‚Äì 1693

1693

5. Future Work
Less destructive strategies for urgent computing would be either suspend/resume or checkpoint/restart for displaced jobs, rather than job kill. Resource managers such as Torque [13] or SLURM [14] provide facilities for
suspend/resume of jobs directly or integration with checkpointing packages such as Berkeley Lab Checkpoint/Restart
(BLCR) [15]. One requirement for robust performance with either of these modes is to restrict process starting to
the native resource manager task manager, rather than allowing users to start tasks via ssh. This allows the resource
manager to track all processes associated with a job and suspend or checkpoint those processes.
Virtualization of compute resources may prove to be another avenue for eÔ¨Äectively displacing normal jobs [16].
This mode would allow users to ssh to virtual machines while running.
Users with critical applications with societal impact should contact SDSC for advance approval to the urgent
computing reservation.
References
[1] M. Papakhian, Comparing job-management systems: the user‚Äôs perspective, Computational Science Engineering, IEEE 5 (2) (1998) 4 ‚Äì9.
doi:10.1109/99.683732.
[2] J. Skovira, W. Chan, H. Zhou, D. Lifka, The easy loadleveler api project, in: D. Feitelson, L. Rudolph (Eds.), Job Scheduling Strategies for
Parallel Processing, Vol. 1162 of Lecture Notes in Computer Science, Springer Berlin / Heidelberg, 1996, pp. 41‚Äì47, 10.1007/BFb0022286.
URL http://dx.doi.org/10.1007/BFb0022286
[3] P. Beckman, S. Nadella, N. Trebon, I. Beschastnikh, Spruce: A system for supporting urgent high-performance computing, in: P. GaÔ¨Äney,
J. Pool (Eds.), Grid-Based Problem Solving Environments, Vol. 239 of IFIP International Federation for Information Processing, Springer
Boston, 2007, pp. 295‚Äì311, 10.1007/978-0-387-73659-4 16.
URL http://dx.doi.org/10.1007/978-0-387-73659-4 16
[4] H. Magistrale, S. Day, R. W. Clayton, R. Graves, The scec southern california reference three-dimensional seismic velocity model version 2, Bulletin of the Seismological Society of America 90 (6B) (2000) S65‚ÄìS76.
arXiv:http://www.bssaonline.org/content/90/6B/S65.full.pdf+html, doi:10.1785/0120000510.
URL http://www.bssaonline.org/content/90/6B/S65.abstract
[5] J. Cope, H. Tufo, Supporting storage resources in urgent computing environments, in: Cluster Computing, 2008 IEEE International Conference on, 2008, pp. 348 ‚Äì353. doi:10.1109/CLUSTR.2008.4663794.
[6] 07 urgent computing workshop [online] (2007). http://spruce.teragrid.org/workshop/urgent07.php.
[7] N. Wilkins-Diehr, D. Gannon, G. Klimeck, S. Oster, S. Pamidighantam, Teragrid science gateways and their impact on science, Computer
41 (11) (2008) 32 ‚Äì41. doi:10.1109/MC.2008.470.
[8] C. Catlett, The philosophy of teragrid: Building an open, extensible, distributed terascale facility, in: Cluster Computing and the Grid, 2002.
2nd IEEE/ACM International Symposium on, 2002, p. 8. doi:10.1109/CCGRID.2002.1017101.
[9] Teragrid spruce status page [online]. http://spruce.teragrid.org/status.php.
[10] P. Maechling, E. Deelman, L. Zhao, R. Graves, G. Mehta, N. Gupta, J. Mehringer, C. Kesselman, S. Callaghan, D. Okaya, H. Francoeur,
V. Gupta, Y. Cui, K. Vahi, T. Jordan, E. Field, Scec cybershake workÔ¨Çowsautomating probabilistic seismic hazard analysis calculations, in:
I. J. Taylor, E. Deelman, D. B. Gannon, M. Shields (Eds.), WorkÔ¨Çows for e-Science, Springer London, 2007, pp. 143‚Äì163, 10.1007/978-184628-757-2 10.
URL http://dx.doi.org/10.1007/978-1-84628-757-2 10
[11] K. Yoshimoto, P. Kovatch, P. Andrews, Co-scheduling with user-settable reservations, in: D. Feitelson, E. Frachtenberg, L. Rudolph,
U. Schwiegelshohn (Eds.), Job Scheduling Strategies for Parallel Processing, Vol. 3834 of Lecture Notes in Computer Science, Springer
Berlin / Heidelberg, 2005, pp. 146‚Äì156, 10.1007/11605300 7.
URL http://dx.doi.org/10.1007/11605300 7
[12] M. Margo, K. Yoshimoto, P. Kovatch, P. Andrews, Impact of reservations on production job scheduling, in: E. Frachtenberg,
U. Schwiegelshohn (Eds.), Job Scheduling Strategies for Parallel Processing, Vol. 4942 of Lecture Notes in Computer Science, Springer
Berlin / Heidelberg, 2008, pp. 116‚Äì131, 10.1007/978-3-540-78699-3 7.
URL http://dx.doi.org/10.1007/978-3-540-78699-3 7
[13] G. Staples, Torque resource manager, in: Proceedings of the 2006 ACM/IEEE conference on Supercomputing, SC ‚Äô06, ACM, New York, NY,
USA, 2006. doi:http://doi.acm.org/10.1145/1188455.1188464.
URL http://doi.acm.org/10.1145/1188455.1188464
[14] A. Yoo, M. Jette, M. Grondona, Slurm: Simple linux utility for resource management, in: D. Feitelson, L. Rudolph, U. Schwiegelshohn
(Eds.), Job Scheduling Strategies for Parallel Processing, Vol. 2862 of Lecture Notes in Computer Science, Springer Berlin / Heidelberg,
2003, pp. 44‚Äì60, 10.1007/10968987 3.
URL http://dx.doi.org/10.1007/10968987 3
[15] P. H. Hargrove, J. C. Duell, Berkeley lab checkpoint/restart (BLCR) for linux clusters, Journal of Physics: Conference Series 46 (1) (2006)
494‚Äì499. doi:10.1088/1742-6596/46/1/067.
URL http://dx.doi.org/10.1088/1742-6596/46/1/067
[16] M. Stillwell, D. Schanzenbach, F. Vivien, H. Casanova, Resource allocation using virtual clusters, in: Cluster Computing and the Grid, 2009.
CCGRID ‚Äô09. 9th IEEE/ACM International Symposium on, 2009, pp. 260 ‚Äì267. doi:10.1109/CCGRID.2009.23.

