A New Approach for Solving Evolution
Problems in Time-Parallel Way
Nabil R. Nassif1 , Noha Makhoul Karam2, and Yeran Soukiassian3
1

Mathematics Department,
American University of Beirut, Beirut Lebanon
2
IRISA, Campus Beaulieu,
Universit´e de Rennes I, Rennes, France
3
Computer Science Department,
American University of Beirut, Beirut Lebanon

Abstract. With the advent of massively parallel computers with thousands of processors, a large amount of work has been done during the
last decades in order to enable a more eﬀective use of a higher number
of processors, by superposing parallelism in time-domain, even though it
is known that time-integration is inherently sequential, to parallelism in
the space-domain[8]. Consequently, many families of predictor-corrector
methods have been proposed, allowing computing on several time-steps
concurrently[5], [6]. The aim of our present work is to develop a new
parallel-in-time algorithm for solving evolution problems, based on particularities of a rescaling method that has been developed for solving
diﬀerent types of partial and ordinary diﬀerential equations whose solutions have a ﬁnite existence time[9]. Such method leads to a sliced-time
computing technique used to solve independently rescaled models of the
diﬀerential equation. The determining factor for convergence of the iterative process are the predicted values at the start of each time slice.
These are obtained using “ratio-based” formulae. In this paper we extend successfully this method to reaction diﬀusion problems of the form
ut = Δum +aup , with their solutions having a global existence time when
p ≤ m ≤ 1. The resulting algorithm RaPTI provides perfect parallelism,
with convergence being reached after few iterations.

1

Introduction

Modelling complex phenomena in nature and sciences can often lead to solve
time-dependent partial diﬀerential equations. In that context, and as the timeintegration is inherently sequential, a lot of parallel algorithms have been ﬁrst
developed for the spatial discretization. However, with the advent of massively
parallel computers with thousands of processors, the critical mesh resolution
often remains far from the high capabilities of these supercomputers as detailed
by Farhat and al in [8]. And one possible approach, in order to enable a more
eﬀective use of a higher number of processors, is to superpose parallelism in timedomain to the parallelism in the space-domain. One of the ﬁrst (or maybe the
ﬁrst) has been suggested by Nievergelt [1] and led to multiple shooting methods.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 148–155, 2006.
c Springer-Verlag Berlin Heidelberg 2006

A New Approach for Solving Evolution Problems in Time-Parallel Way

149

Variants of this method were then developed by several authors, in particular
by Chartier and Philippe in [2]. The basic underlining ideas in such algorithms
are as follows:
1. Decompose the time integration interval into subintervals (time slices) and
predict the initial values of the solution at the beginning of each slice.
2. Solve an initial value problem in each slice, and in a parallel way,
3. Force continuity of the solution branches, at the end points of successive
slices, by means of an iterative (for example Newton-like) procedure.
The success of such parallel-time integration would necessarly depend on the
number of iterations that should obviously be much less then the number of
slices.
More recently, in 2001, Lions, Maday and Turinici proposed in [5] the “parareal
algorithm” to solve evolution problems in a time-parallel way. This allows obtaining, in real time and using several processors, solutions that cannot be computed
using one processor only. Algorithms has been implemented on linear and nonlinear parabolic problems and approximates successfully the solution later in
time before having fully accurate approximations from earlier times. The main
features of the method are the following:
1. Choice of a coarse grid that deﬁnes “large time-slices”.
2. Prediction of the initial values of the solution on each time-slice, using for
example a Euler-implicit scheme.
3. Iteration until convergence of the following process:
– Solving independent evolution problems on each time-slice, using any
method on a ﬁne grid, leading to discontinuity “jump ” between the
end value of one slice and the predicted initial value on the next one.
– Correction of the slices initial values by propagation of the jumps,
This scheme is inherently a multi-grid procedure. It combines coarse anf ﬁne
resolution in time, in the same spirit as what is done in space for domain decomposition methods, the coarse grid allowing us to propagate very quickly, on the
whole interval, information reached on the ﬁne grid up to any desired acuracy.
Such algorithm has also received wide attention over the last few years: Maday
and Bal proposed in [6] an improved version of the Parareal Algorithm (PA)
which gives better answers for nonlinear problems and more importantly allows
to tackle non-diﬀerentiable problems (whereas the former implementation was
based on the linearization of the PDE). Farhat and Chandesris presented in [8]
an original mathematical justiﬁcation to the framework by using the theory of
distribution. Many contributions, based on the former works, have been made
during the 15th and 16th Domain Decomposition Conferences (Berlin 2003 and
New York 2005). We cite mainly the following:
– In [13], Tromeur-Dervout and Guibert introduced adaptativity in the deﬁnition of the reﬁnement of the time grid and the time domain splitting (in
order to tackle stiﬀ problems), and then proposed an adaptative parallel
extrapolation algorithm (for very stiﬀ problems).

150

N.R. Nassif, N.M. Karam, and Y. Soukiassian

– In [14] Farhat and al proposed a radical change of strategy in order to improve the performance of the parareal algorithm for second-order hyperbolic
systems.
In this paper we present a new approach for parallel time integration. Our
method is based on a rescaling procedure introduced by Nassif et al in [9] for
problems that have ﬁnite existence time.
In section 2, we show that such procedure leads to a perfectly parallel-intime alorithm in the case of a scalar ordinary diﬀerential equation of the form
y´ = f (y), whereby coarse-grid time-slices can be explicitely found with exact
initial predictions at the start of each slice.
In section 3, we generalize this rescaling approach to systems of diﬀerential
equations that semi-discretize evolution problems of the form:
∂u
= Δum + aup .
∂t
This allows predictions of time-slices and simultaneously accurate initial values.
We implement this method for linear PDE (m = p = 1) getting convergence (on
the basis of a fast correcting procedure) in one or two iterations.

2

Perfect Time-Parallelism for a Scalar ODE

We consider the case of an elementary diﬀerential equation y´ = f (y) having
explosive solution in ﬁnite time. One seeks {y; Tb }, Tb < ∞, y:[0; Tb [ → IR
such that:
dy
= f (y) for 0 < t < Tb , with :
(1)
dt
y(0) = y0 > 0, and limt→Tb |y(t)| = ∞.
The function f is such that:
f (y), f (y) ≥ 0, f (y0 ) = 0,

∞
y0

dy
< ∞.
f (y)

(2)

The Re-scaling method consists in simultaneously introducing change of variables for the time t and the solution y(t) in order to generate a sequence of slices
of time intervals. On each of these subintervals, the computation of the solution
is controlled by a preset threshold (or cut-oﬀ) value S. The change of variables
is given by:
(3)
t = Tn−1 + βn s, y(t) = yn−1 + αn z(s)
where yn = y(Tn ), and {αn } and {βn } are sequences of normalizing parameters
characteristic to the re-scaling method. The resolution of the initial problem (1)
is then equivalent to that of rescaled models on each of time-slice, [Tn−1 , Tn ],
whereby we seek the pair {z, {sn}} where z: [0; sn ] → IR, such that:
βn
dz
= gn (z) =
f (yn−1 + αn z), 0 < s < sn ,
ds
αn

(4)

A New Approach for Solving Evolution Problems in Time-Parallel Way

151

z(0) = 0, z(sn ) = S.
The criterion for limiting z not to out-grow pre-set threshold value S is only due
to the nature of the solution which in this case is explosive. This condition must
be adapted to other cases where the solution has a global existence time taking
into account its behavior: bounded, unbounded, oscillatory, etc. Thus, in this
particular case where the behavior is explosive, the choice of the sequence {αn }
is determined by limn→∞ yn = ∞ and limn→∞ Tn = Tb , implying the consequent
pertinent choices for {αn }, speciﬁcally: αn = yn−1 when f (y) = O(y p ) and
αn = 1 when f (y) = O(ey ). The underlying theory behind these choices is
well detailed in [9] and [10]. The sequence {βn } is determined in order that
the rescaled models (4) verify a self-similarity concept, formal or numerical.
This leads into imposing gn (0) = g1 (0), ∀n > 1, implying for {βn }, the choices:
n
βn = f (yαn−1
).
Perfect time-parallelism. Use of the re-scaling method for the purpose of
parallel-time integration is based on the following principles:
1. The starting values of the solution on each time-slice are exactly determined
by:
∀n, yn = yn−1 + αn S, αn = yn−1 , or 1.
(5)
2. The size of the nth time slice [Tn−1 , Tn ], is given by: Tn − Tn−1 = βn sn , with
n
the values of βn also pre-determined by βn = f (yαn−1
) and each sn , computed
independently of any other, given that the stopping criteria on each slice is
the same one and in this scalar case is a function of S only.
Implementation of this method, with analysis of acceleration factors can be
found in [15].

3

Extension to Partial Diﬀerential Equations

We ﬁrst start by extending the re-scaling method to partial diﬀerential equations.
This is illustrated on the case of ﬁnding u :[0, T ] × Ω → IR, Ω ⊂ IRd , d = 1 or
2, such that:
(6)
ut − Δum = aup
for m ≤ p ≤ 1, homogeneous Dirichlet boundary conditions (u(x, t) = 0, x ∈
∂Ω, t > 0) and initial conditions (u(x, 0) = u0 (x) > 0) allowing the solution to
have various behaviors with respect to time ([7]). A ﬁrst step consists in changing
the variable u. Letting v = um and q = 1/m, one has:
∂v
1
a
= q−1 Δv + v pq−q+1 , x ∈ Ω ⊂ IRd , t > 0
∂t
qv
q

(7)

with v verifying the same homogeneous Dirichlet boundary condition of u on ∂Ω
and v(x, 0) = v0 = um
0 . Re-scaling necessitates ﬁrst semi-discretizing (7). In case

152

N.R. Nassif, N.M. Karam, and Y. Soukiassian

we use Finite-Diﬀerences on the operator Δ, this leads to the following system
of ordinary diﬀerential equations: Find V : [0, T ] → IRk such that:
dV
1
= − DW AV + F (V ),
dt
q

(8)

where V (0) = V0 and V (t) = (Vi (t))i=1,2,...,k ≈ (v(xi , t)i=1,2,...,k ,
F (V ) =

a
q

f (Vi (t)pq−q+1

i=1,2,...,k
k×k

, W (t) =

1
[Vi (t)]q−1

,
i=1,2,...,k

and A is a sparse symmetric positive matrix that
DW = diag(W ) ∈ IR
discretizes the −Δ operator. Using the change of variables:
V (t) = Vn−1 + Dαn Z(s), and t = Tn−1 + βn s,

(9)

where Vn−1 = V (Tn−1 ). Solving then the initial value problem (8) is equivalent
to solving on each of the intervals [Tn−1 , Tn ] to the rescaled models:
dZ
1
= βn D α1 [− DW AV + F (V )], 0 < s < sn , Z(0) = 0,
n
ds
q

(10)

with the end of the slice sn being determined by a condition depending on the
behavior of the solution. For example, in case of explosive (unbounded) behavior,
we use ||Z(sn )||∞ = S. Otherwise, if Z(s) cannot reach a threshold value S, we
limit sn to a maximum s, ∀n. Thus, extending the choices used for αn and βn in
the scalar case, it has been shown in [7] and [10] that suitable choices are given
by αn = Vn−1 ∈ IRk and (for the explosive case)
βn =

1
pq−q
||Vn−1
||∞

∈ IR

(11)

Parallel-in-time implementation of the re-scaling method. Parallel-time
algorithms require being able to determine: (i) the time slices (coarse-grid) and
(ii) good predictions for the starting values of the solution at each of the timeslices. In the above scalar case, as the predicted values were the exact ones,
parallelism was perfect. At present, the predicted values are only approximate,
therefore requiring a correcting procedure that must be iteratively convergent.
The basic idea of our predictions is inspired from the scalar case when f (y) =
O(y p ) and the sequence {yn } veriﬁes yn = y0 (1 + S)n = yn−1 (1 + S), r = 1 + S
being a transition ratio between two successive initial slice-values. This has been
generalized in [7] and [10] to the vector case using the corresponding relation
derived from the re-scaling method:
Vn = Vn−1 + diag(αn )Z(sn ) where αn = Vn−1 , i.e.

(12)

Vn = diag(Vn−1 )(e + Z(sn )) = diag(e + Z(sn ))Vn−1 ,

(13)

where e ∈ IR is the vector with all of its components equal to 1. By Deﬁning
the “transition” ratio vector:
k

rn = (e + Z(sn )).

(14)

A New Approach for Solving Evolution Problems in Time-Parallel Way

153

the relation (13) becomes:
Vn = diag(rn )Vn−1 .

(15)

It follows from Z(sn ) ∞ = S that rn ∞ = 1 + S, which is invariant with respect to n and on the other hand is consistent with the scalar case (k = 1, d = 1).
Thus, it appears that predicting starting values of the solution at each time-slice
would result from a-priori information on rn . For that purpose, we propose the
following new approach to obtain time-parallelism through appropriate predictions of the transition ratio vectors rn .
Parallel Algorithm: Ratio-Based Parallel Time Integration (RaPTI)
1. We run our method sequentially on ns slices by computing the successive
exact values of rn , referred to as rne , with a local slice computational tolerance
l
tol .
2. On following slices, n > ns , statistical estimates techniques based on exact
values rne (n ≤ ns ), allow us to predict values of rn , denoted by rnp .
3. The previous step leads to compute predicted initial values, Vnp = diag(rnp )
p
p
e
for n > ns . Note that for n = ns + 1, Vn−1
= Vn−1
.
Vn−1
4. At this point, parallel computations of the solution can be executed on each
nth slice, n > ns , with a local computational tolerance ltol , with starting
p
leading to an end value Vnc . Knowing that the initial value of the
value Vn−1
th
(ns + 1) slice is exact, Vnc is exact for n = ns + 1.
5. For n > ns , we deﬁne the sequence Gn of gaps at the end of the nth slice, as
Gn = Vnc − Vnp .
6. For a given global computational tolerance gtol > ltol , we determine
nconv > ns such that for each nth slice, ns < n ≤ nconv , ||Gn ||∞ ≤ gtol ,
i.e. convergence is reached up to the nth
conv slice.
7. We update ns by nconv and repeat steps 2 to 6 until the maximum time T ,
deﬁning the interval [0, T ] of the evolution problem is reached.
Unlike the Parareal algorithm [5], our RaPTI procedure, exludes any sequential computation for n > ns . Furthermore, since this new method is
based on rescaling the variables, it generates dynamically the slices which may
vary in size depending on the behavior of the solution. Obviously, the success
of this method depends on the number of iterations (that repeat steps 2 to 6).
This number should be much less than the number of slices needed to reach T .
In fact, our tests have revealed cases of perfect parallelism where convergence
has been reached in one or two iterations, particularly when the solution
of the diﬀusion-reaction problem has a global time existence, i.e. p ≤ 1. When
p > 1, the solution blows up in a ﬁnite time and the RaPTI algorithm fails
to give fast convergence unless we impose a gross global computational tolerance. A rule of thumb we have used in such situation consists in changing step
7 (correction step) of the algorithm to become:
7’. Repeat steps 2 to 6 using “Lions parareal algorithm”
This accelerates convergence at the expense of imposing sequential computations
for predicting the new corrected values at begining of the slices.

154

N.R. Nassif, N.M. Karam, and Y. Soukiassian

Tests and Numerical results. Our experiments were run on the following
problem:
⎧ ∂u
⎨ ∂t − Δu = 3up for x ∈ Ω =] − 1; 1[ and t ≥ 0
u(x, t) = 0
for x ∈ ∂Ω and t ≥ 0
⎩
u(x, 0) = (1 − x2 ) for x ∈ Ω
We have used a threshold S = 2 to determine the sizes of the slices, a discretization space step of h = 1/8, a global tolerance gtol ≥ ltol = 5 × 10−8 where
l
tol is the local tolerance used in computing the solution on every slice using a
4th order explicit Runge-Kutta method. Our results are summarized in the following tables where ﬁrst column indicates the number of slices used for starting
sequentially the computations:
1. p = 1;

g
tol

=

10−7
2 .

ns Number of Slices Iterations
2
16
2
32
2
64
2
128
2. p = 0.8;

g
tol

=

with RaPTI
1
1
1
1

10−7
2 .

ns Number of
8
16
8
32
8
64
8
128

Number of Iterations
Slices RaPTI RaPTI with Parareal for correction (7’)
1
1
1
1
2
3
2
3

3. p = 1.05; Results using RaPTI.

ns Number of Slices
2
8
2
16
2
32

g
10−4
tol =
2

5
13
29

Iterations
g
10−3
tol =
2
1
6
22

g
10−2
tol =
2

1
1
2

4. p = 1.05; Results with ratio-based predictions and corrections via
Lions Parareal scheme.
ns Number of Slices
2
8
2
16
2
32

Number of Iterations
g
10−3 g
10−2
tol =
tol =
2
2
3
1
1
3
3
1
5
4
3

g
10−4
tol =
2

A New Approach for Solving Evolution Problems in Time-Parallel Way

4

155

Perspectives

We are presently testing the method for non-linear problems (∀m, p), with the
RaPTI algorithm yielding the same super-convergence process when p ≤ m ≤ 1.
We are also seeking a new prediction process to handle hyperbolic problems in
which the solution exhibits quasi-periodic behavior.

References
1. J.Nievergelt. Parallel methods for integration ordinary diﬀerential equations.
Comm. ACM, 7:731-733, 1964
2. P.Chartier, B.Philippe. A parallel shooting technique for solving dissipative
ODE’s. Computing, vol.51, n3-4, 1993, p.209-236.
3. J. Erhel, S. Rault. Algorithme parall`ele pour le calcul d’orbites. SpringerVerlag, (1989).
4. Fayad D., Nassif N., Cortas M. Rescaling technique for the Numerical computation of blowing-up solutions for semi-linear parabolic equations. 2000,Manuscript.
5. J.L. Lions, Y.Maday, G.Turinici. R´esolution d’EDP par un sch´ema en temps
“parar´eel”. C.R.Acad.Sci.Paris, t.332, Srie 1, p.661-668. 2001.
6. Y. Maday, G. Bal. A parareal time discretization for non-linear pde’s with application to the pricing of an American put. Recent developments in Domain
Decomposition Methods (Zurich 2002), Lecture Notes in computational
Science and Engineering, 23:189-202, Springer 2002.
7. Makhoul-Karam N. R´esolution num´
erique d’´equations paraboliques semilin´eaires a
` caract`ere d’explosion ou d’extinction par des m´
ethodes de redimensionnement. M´
emoire de DEA en MSI, 2002-2003.
8. Ch. Farhat, M.Chandesris. Time-decomposed parallel time-integrators. Int.
J. Numer. Meth. Engng 2003. 58: 1397-1434.
9. N.R.Nassif, D.Fayad, M.Cortas. Slice-Time Computations with Re-scaling for
Blowing-Up Solutions to Initial Value Diﬀerential Equations. V.S. Sunderam.
et al. (Eds): ICCS 2005, LNCS 3514, pp. 58-65. Springer-Verlag 2005.
10. Cortas M. M´ethode de re-dimensionnement (Rescaling technique) pour des
´equations aux d´
eriv´ees ordinaires du 1er ordre a
` caract`ere explosif. Th`
ese, Universit´
e Bordeaux 1. Janvier 2005.
11. S.Vanderwalle. PARAREAL in a historical perspective (a review of space-time
parallel algorithms). In the 16th International Conference on Domain Decomposition Methods, NYU 2005. Proceedings.
12. M.Gander, S.Vanderwalle. On the superlinear and linear convergence of the
parareal algorithm. In the 16th International Conference on Domain Decomposition Methods, NYU 2005. Proceedings.
13. D.Guibert, D.Tromeur-Dervout. Adaptative Parareal for systems of ODEs.
In the 16th International Conference on Domain Decomposition Methods, NYU 2005. Proceedings.
14. C.Farhat, J.Cortial, H.Bavestello, C.Dastillung. A time-decomposed timeparallel implicit algorithm for accelerating the solution of second-order hyperbolic
problems. Berkley-Stanford computational fest, 7 mai 2005.
15. H.Arnaout, H.Mneimneh, Y.Soukiassian Parallel Algorithm for Sliced-Time
Computation with Re-scaling for Blowing-up Solutions to Initial Value Problems.
Master’s Project. American University of Beirut. June 2005.

