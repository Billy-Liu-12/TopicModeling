Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 878–887

International Conference on Computational Science, ICCS 2011

GRAPE-MP: An SIMD Accelerator Board for Multi-precision
Arithmetic
Hiroshi Daisakaa,1 , Naohito Nakasatob , Junichiro Makinoc , Fukuko Yuasad , Tadashi Ishikawad
a Hitotsubashi

University
of Aizu
c National Astronomical Observatory of Japan
d High Energy Accelerator Research Organization
b University

Abstract
We describe the design and performance of the GRAPE-MP board, an SIMD accelerator board for quadrupleprecision arithmetic operations. A GRAPE-MP board houses one GRAPE-MP processor chip and an FPGA chip
which handles the communication with the host computer. A GRAPE-MP chip has 6 processing elements (PE) and
operates with 100MHz clock cycle. Each PE can perform one addition and one multiplication in every clock cycle.
The architecture of the GRAPE-MP is similar to that of the GRAPE-DR. It is implemented using the structured ASIC
chip from eASIC corp. A GRAPE-MP processor board has the theoretical peak quadruple-precision performance of
1.2 Gflops. As a preliminary result, we present the performance of the GRAPE-MP board for two target applications.
The performance of the numerical integration of Feynman loop is 0.53 Gflops. The performance of a N-body simulation with the second order leapfrog schema is 0.505 Gflops for N = 1984, which is more than 10 times faster than the
performance of the host computer.
Keywords: SIMD, Quadruple-precision, GRAPE

1. Introduction
Most of numerical simulations are currently done using double-precision operations. The reason is that almost all
present-day CPUs have double-precision floating-point operation units, and their accuracy is suﬃcient in most cases.
However, there are a lot of problems which can not be solved with double-precision operations.
An example of such problems is the evaluation of the Feynman loop integrals. One of such integrals is a one-loop
integral expressed as
I

1

=
0

1 Corresponding

1−x

dx

1−x−y

dy
0
−2

dzF(x, y, z),
0

F(x, y, z)

=

D(x, y, z)

= −xys − tz(1 − x − y − z) + (x + y)λ2

D(x, y, z)

author

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.093

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

879

+(1 − x − y − z)(1 − x − y)m2e
+z(1 − x − y)m2f .

(1)

Here, s and t are kinematic parameters, me and m f are physical constants, And λ is a fictitious photon mass. We need
to evaluate this ingegral for the limit of λ → 0. The accurate numerical evaluation of this integral is a hard problem
due to its divergent nature [1]. Yuasa et al. [1] reported that the numerical evaluation is numerically unstable with
double-precision operations. A solution to this diﬃculty is to compute the integral in higher precision. Furthermore,
Yuasa et al. [1] reported that the use of an extrapolation scheme for λ [2] was necessary.
If we adopt quadruple-precision operations with emulation schemes proposed in [3] and [4], one quadrupleprecision variable is expressed by a pair of two double-precision variables. With the scheme in [4], one quadrupleprecision addition and one multiplication require 20 and 23 double-precision operations, respectively. Thus, a quadrupleprecision operation is at least 20 times slower than a double-precision operation.
To overcome this diﬃculty, Nakasato [5] has implemented the quadruple-precision emulation scheme on manycore accelerators and reported that GPU and GRAPE-DR [6] were eﬀective in accelerating the numerical evaluation of
the Feynman loop integral. However, the performance of quadruple-precision operations on a many-core accelerators
is more than 20 times slower than the performance of double-precision operations on the same processors.
In this paper, we describe an alternative approach to improve the performance of quadruple-precision operations.
We have designed a special floating-point unit for quadruple-precision operations and implemented it in a structured
ASCI chip. Our project, called GRAPE-MP, is a pilot study to investigate the feasibility of a hardware implementaion
of a quadruple-precision floating-point unit.
In the following, we describe the design and implementation of the GRAPE-MP system and present performance
numbers on selected target applications.
2. GRAPE-MP
In this section, we overview the architecture of GRAPE-MP. The GRAPE-MP is similar to that of GRAPE-DR
[6] and its internal structure is simple: (1) GRAPE-MP has programmable processing elements (PE) and memory
components. (2) PEs form a Single-Instruction-Multiple-Data (SIMD) processor. (3) Instructions for PEs are supplied
from a separate control processor. (4) the control processor, also sends data to GRAPE-MP, receives data from
GRAPE-MP, and handles the communication with a host computer.
The GRAPE-MP processor board (Figure 4) consists of one GRAPE-MP chip and one FPGA chip which implementes the contorol processor. This separation of functionalities between GRAPE-MP and FPGA is a key design. In
this way, we can maximize the quadruple-precision operation units on a chip. In addition, we can simplify the design
of the custom chip, since complex control logic units such as PCIe interface are all in the FPGA chip. In the following,
we describe each component of the GRAPE-MP board.
2.1. Numerical Format
First, we describe our numerical representation for a quadruple-precision value. Hereafter, we call our representation eXtended-Double format: XD format. We use 128 bit to express a value in XD format with 1 bit for sign, 11
bits for exponents and 116 bits for mantissa. The size of the exponent in the XD format is the same as the size of the
exponent in the double-precision format (IEEE 754) and is smaller than the exponent defined in the binary128 format
(11 vs. 15 bits). However, the size of the mantissa in the XD format is larger (116 vs. 112 bits). A drawback of the XD
format is that we have no compatibility with the binary128 format. In the current software library for GRAPE-MP,
we have implemented conversion functions between the XD format and Double-Double (DD) and Quad-Double (QD)
formats proposed in [7].
2.2. Processor Element
Figure 1 shows the block diagram of a PE. Each PE consists of a floating-point multiply unit, an add unit, a special
functional unit (RSQ unit), two general purpose register files (GRF1 and GRF2) and an auxiliary register (Treg). The
multiply and add units can operate independently and handle quadruple-precision values with the throughput of one
operation per clock cycle. The RSQ unit is designed to compute an approximation of the inverse of square root in

880

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

Figure 1: Block diagram of the PE.

Figure 2: Block diagram of the chip.

roughly 24 bit. We use the output of the RSQ unit as an initial guess for the iterative improvement by the NewtonRaphson method. We can use the RSQ unit for the calculation of not only the reciprocal square root in quadrupleprecision but also the division with two additional multiply operations and the square root with one additional multiply
operation. The latency of these units is 4 clock cycles. In order to hide the latency, we implement virtual 4-element
vector processing in a PE which behaves like 4 “logical” pipelines.
All registers (GRF1, GRF2 and Treg) are 128-bit wide to store quadruple-precision values. GRF1 and GRF2 are
general purpose registers which store input/output values and intermediate results. They have one read and one write
ports, and each register has 128 words. Treg also has one read and one write ports, and has 4 words. We use Treg to
store the result that is used in the next operation. The PE has input and output ports for the communication and an
input port for instructions (inst). These I/O ports are only connected to GRF1 so that we use it for the communication
with the control processor. The control processor writes instructions through the input ports for instruction.
2.3. GRAPE-MP chip
Figure 2 shows the block diagram of the GRAPE-MP chip. It has six PEs and two memory components called
broadcast memories. One broadcast memory is used to transfer data from the control processor (BMin), and the other
is used to transfer the data to the control processor (BMout). Both memories are 128-bit wide and can store 128 words.

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

881

control processor
GRAPE-MP

config unit
PCIeIF
Dual port ram
for data
host

control unit

wr

adr

Dual port ram
for inst

inst

FIFO

rd

wr

adr

inst
rd

125MHz 100MHz

Figure 3: Block diagram of the control processor.

The control processor writes data to GRAPE-MP through the write port with 64 bit. We need two clocks to write one
quadruple-precision value. We also need two clocks to read out one quadruple-precision value from BMout.
The control processor writes instructions through the inst port. Instructions are broadcasted to all PEs so that all
PEs execute the same instruction. The instruction consists of two parts: (1) a control code for floating-point units in
PE and (2) a control code for BMin and BMout. To write quadruple-precision values to a given PE, we first write the
values to BMin, and then we instruct PEs to load the values from BMin with the mask code that specifies the given
PE. To read quadruple-precision values from a given PE, we need a similar procedure such as following. First we
instruct PEs to write the values to BMout with the mask code and then we read the values from BMout.
The GRAPE-MP chip is implemented on a Nextreme eASIC NX2500 chip with 90nm design rule. I/O ports on
the chip are SSTL-II 100MHz. The operation frequency of the GRAPE-MP chip is also 100 MHz. Thus, the peak
performance of GRAPE-MP is 2(operations) × 6(PEs) × 100(MHz) = 1.2 × 109 floating-point operations per second.
Note that it is not always possible to issue two operations (i.e., multiply and add) simultaneously.
2.4. Control processor
Figure 3 shows the block diagram of the control processor. It consists of the PCIe interface unit, the configuration
unit, two dual port ram (DPRAM) blocks to store the data and the instructions from the host computer, FIFO to store
data from GRAPE-MP, and the control logic for these units. Main functions of the control processor are to supply
instructions and data, to receive data from GRAPE-MP, and to communicate with the host computer.
The control processor is implemented in an FPGA chip (EP1AGX60EF1152) made by Altera corporation. The
logic units in the PCIe side and the GRAPE-MP chip side operate on diﬀerent clocks (125MHz for the PCIe side and
100MHz for the GRAPE-MP side, the same as the clock in the GRAPE-MP chip). Thus, the transfer speed between
the control processor and GRAPE-MP is 800MB/s.
Data from the host computer is first stored in DPRAM and then transferred to BM in the GRAPE-MP chip through
the wr-port with the address. When data is set into a resister of a PE from BM, the corresponding instruction once
stored in DPRAM is also sent to the GRAPE-MP chip. Also, DPRAMs are also used to store instructions and data
required in a program execution.
For the PCIe interface logic unit, we use the GPCIe IP core from KFCR[8]. We use PCIe x4 (theoretical peak
speed is 1GB/s) though x8 is also available. The transfer speed of PIO write (with write combining), DMA read and
DMA write measured by the GRAPE-MP board is listed in Table 1. It achieves more than 700MB/s for PIO write and
DMA write, which is more than 70% of the theoretical speed. Since PIO write is faster than DMA read in all data
size, we use PIO write and DMA write in the current implementation.

882

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

data size (byte)
1024
2048
4096
8192
16384
32768

PIO write (MB/s)
711.6
711.7
711.7
711.7
711.7
711.6

DMA read (MB/s)
266.6
389.8
505.3
544.8
575.9
591.0

DMA write (MB/s)
364.0
499.0
605.1
674.7
715.0
736.5

Table 1: The transfer speed measured by the GRAPE-MP board with PCIe x4 link.
config
unit

DCDC

FPGA

GRAEP-MP chip

PCIe x8(x4)

Figure 4: Block diagram of the GRAPE-MP board.

2.5. Processor board
Figure 4 shows the block diagram of the GRAPE-MP board. It is a standard PCI short card onto which a GRAPEMP chip, a control processor, the configuration unit, and DCDC units (1.2V for FPGA core, 1.3V for the GRAPE-chip
core, 1.8V for IO) are integrated. The interface between the control processor and the host computer is PCI Express x
8 link. At the current implementation, we use PCIe x4 link. Figure 5 shows the picture of the GRAPE-MP board.
3. Programming the GRAPE-MP System
To program the GRAPE-MP, we extend our domain specific language (DSL) compiler developed for many-core
accelerators [9]. From a program written in this DSL, our compiler generates instructions (hereafter a kernel) for
GRAPE-MP. For example, with the double exponential integral scheme [10], the integral in Eq. (1) is reduced to a

Figure 5: Picture of the GRAPE-MP board.

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

883

LMEM x, y, cnt4;
BMEM x30_1, gw30;
RMEM res;
CONST tt, ramda, fme, fmf, s, one;
z = x30_1*cnt4;
d = -x*y*s-tt*zz*(one-x-y-z)+(x+y)*ramda**2 +
(one-x-y-z)*(one-x-y)*fme**2+z*(one-x-y)*fmf**2;
res += gw30/d**2;

Figure 6: DSL program for our compiler system to compute the integral in (1).

following summation:
I=
i

j

k

G(zk )
,
D(xi , y j , zk )2

(2)

where G(zk ) is the double-exponential kernel variable.
In our DSL, we only define the inner-most loop for Eq. (2) as presented in Figure 6. First four lines define
input/output variables and constants in the integral. For instance, res is a partial sum for the integral and gw30
represents an input variable allocated in the broadcast memory. See Nakasato [9] for detailed descriptions of our
DSL.
4. Performance of the GRAPE-MP System
In this section, we present the measured performance of GRAPE-MP for two applications. First one is the numerical evaluation of the integral given by Eq. (1). A second problem is the N-body simulation that requires computation
of forces between N particles. See Figure 6 in [9] for the actual code for our DSL compiler system.
4.1. Integration of Feynman loop on the GRAPE-MP
The source code to compute Eq.(1) is written in 9 lines. The code includes definitions of variables that is denoted
as LMEM, BMEM and, RMEM (Figure 6). It contains 24 add/multiply operations and 1 division operation. With the
GRAPE-MP, we need 16 instructions to compute a division using a combination of the RSQ unit and the NewtonRaphson iteration. Accordingly, we need about 40 instructions to execute the code given in Figure 6. Our compiler
generates the kernel with 41 instructions where we require one additional instruction to resolve a read conflict.
The integral in Eq.(1) is computed as a triple nested loop. We use the GRAPE-MP to perform the inner-most
summation for z given by x and y. The GRAPE-MP can calculate 4 × 6 = 24 combinations of x and y in parallel.
We repeat the execution of the kernel for necessary times and we do the outer summations for x and y on the host
computer using the DD emulation.
In Table 2, we present the elapsed time to evaluate the integral in Eq.(1) with diﬀerent values of N for GRAPE-MP
running at 100 MHz. The measured calculation speeds are 0.314, 0.425, 0.491, and 0.532 Gflops for N = 96, 192,
384 and 768, respectively. Here, we assume the total number of QP operations is 41N 3 (one division is equivalent to
16 operations). For comparison, on Core2Duo E8400 running at 3.0 GHz, the calculation with N = 384, it took 14.7
and 85.9 sec with the optimize option “-O2” and “-O0”, respectively. Note that this is a result with using a single core
of E8400. The computing speed of the GRAPE-MP is roughly 3 times faster than the DD emulation on the CPU.
Nakasato [5] implemented the DD emulation scheme on GPU and GRAPE-DR and obtained about 15 Gflops on
ATI Radeon HD 5870. Even though the eﬀciencty for the DD emulation on GPUs is still not high, the performance
of the GPU is better than the GRAPE-MP board. However, the performance per watt of the GRAPE-MP board is not
so bad compaired to GPUs since the power consumpsion of the GPU is ∼ 180 watt.

884

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

integral point(N)
elapsed time(sec)
speed (Gflops)

96
0.115
0.314

192
0.683
0.425

384
4.723
0.491

768
34.9
0.532

Table 2: The measured elapsed time and speed to compute the integral in Eq.(1) with diﬀerent integration points.

4.2. N-body simulation on the GRAPE-MP
N-body simulation is widely used to study a self-gravitating particle system in astrophysical objects such as galaxy
formation, globular cluster dynamics, planetary formation, and planetary ring dynamics. In the N-body simulation,
the equation of motion of a particle i in a system with N gravitating particles is described as
d 2 xi
=
dt2

N
j=1; j i

Gm j (xi − x j )
(ri2j +

2 )3/2

(3)

where xi is the position of particle i, ri j is the distance between particles i and j, m j is the mass of particle j, and G
is the gravitational constant, and is the artificial potential softening used to suppress the divergence of the force at
ri j → 0. These equations are integrated with an appropriate integration scheme.
The most time consuming part of the N-body simulation is the part of force calculation which is the term on the
right-hand side of Eq.(3), since the calculation cost is O(N 2 ). Therefore, the traditional GRAPE systems have been
designed to calculate the force calculation between the particles, whereas other calculations like the time integration
are done by the host computer. Following the conventional way of the implementation of N-body simulation on the
GRAPE system, our implementation on the GRAPE-MP is as follows.
1. Set up the GRAPE-MP board. The instructions used for the force calculation are sent from the host and are
stored in the memory on the FPGA.
2. The data (mass, position, etc) of field particles which exert gravitational forces on a particle (so-called jparticles) are sent from the host and is stored in the memory on the FPGA.
3. The data of particles which recieve the forces (so-called i-particles) are sent from the host to the registers of the
PE in the GRAPE-MP chip.
4. The registers in the PEs used for accumulation of forces are cleared by sending constant (zero) data and the
instruction from the host.
5. Calculate the force for i-particles. The start signal from the host is sent. Data of a j-particle and the instructions
are subsequently sent from the FPGA to the GRAPE-MP chip until all j-particles stored in the memory are sent,
so that the forces of the i-particles exerted from all j-particles are calculated. The data of a j-particle are put on
the BM memory, and are broadcasted to all PEs.
6. The host gets back the calculation results from the PEs.
7. (3)-(6) are repeated until the forces on all i-particles are calculated.
8. Back to (2).
With the current implementation, the GRAPE-MP board has 24 logical pipelines (6 PEs × 4 logical pipelines in a
PE), and the maximum number of particles stored in the memory in the FPGA is 1984 particles.
We present the measured performance of the GRAPE-MP system for the 2nd order leapfrog scheme with constant
timestep. We integrated the Plummer model with equal-mass particles, and used the standard unit [11] in which
M = G = −4E = 1. Here, M and E are the total mass and energy of the system. The softening parameter is constant
= 0.03125. We changed number of particles from 16 to 1984. We integrated the system for more than one time unit
and measured the CPU time on the host, excluding the time of the initial setup (making the initial data of particles,
etc). We also measured the elapsed time for key functions in order to analyze the performance. On the host calculation,
variables with DD precision were used with the QD/DD emulation scheme [12]. For the host computer, we used a PC
with Intel Core2 quad Q6600 CPU, nVidia nForce 780i chipset, and 8GB of DDR2-800 memory.

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

885

Figure 7: The measured performance of the GRAPE-MP system in Gflops.

total (sec)
38.61

send j particles
2.223

send zero
0.3422

send i particles
2.4983

calculate and receive data
33.47

Table 3: Elapsed time. All communication functions include the conversion of the format used in the GRAPE-MP. “send zero” is to clear the
registers of PEs used for the accumulation of the forces. Total particle-step is 524288.

Figure 7 shows the calculation speed in Gflops for the runs. The measured peak speed is 0.505 Gflops for N =
1984 when we use 33 operations for one particle interaction. This is about 42 % eﬃciency of the theoretical peak
performance of 1.2 Gflops. The reason for the loss of the eﬃciency is that the current instructions for the force
calculation allow only one operation per clock, although two operations can be executed at the same time. The
performance can be improved if we use the appropriate instructions.
The operations used here (33 operations) are the actual operation counts executed on the GRAPE-MP, which are
smaller than that usually used operation counts (38 operations [13]). The reason is that the RSQ unit in the GRAPEMP can reduce the operations needed for the force calculation. This is more eﬀective in GPUs which reduce down
to 20 operations ([5], [14]). As for a reference, if we use these operation counts, we have the peak speeds of 0.581
Gflops (38 operations) and 0.305 Gflops (20 operations), respectively. In either case, the measured performance of
the GRAPE-MP is more than 10 times faster than that of the host of which the performance with the DD emulation
library is 0.021 Glops.
Table 3 lists elapsed time of each step when we integrate the system with N = 1024 for one time unit. This table
shows that about 10% of the total elapsed time is used for the communication between the host and the GRAPE-MP.
Note that it includes the time to convert the DD format from the XD format, and the XD to the DD format. This
conversion seems to consume significant time, because the time for “send zero”, which shows the pure transfer time,
is about 1/10 of the time of other types of the communication.
We also construct a simple performance model of this N-body simulation on the GRAPE-MP. Following previous
studies (e.g., [15], [16]), the calculation time per one particle-step can be given as
T = thost + Nt f orce /NPE + tcomm ,
where thost , t f orce , and tcomm are the time on the host computer, the time to calculate the force between one pair on

886

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

Figure 8: The measured calculation time per one particle-step and the performance model. The solid line is the performance model with the
measured time of t j , ti , t f , and the dotted line is that of the ideal case.

the GRAPE-MP, and the time of the communication between the host and the GRAPE-MP, and NPE = 6 is the number
of PE in the GRAPE-MP chip. Since the GRAPE-MP chip operates 100MHz clock and the number of operation is
33, we can estimate t f orce = 3.3 × 10−7 (sec). This yields the time spent on the force calculation on the GRAPE-MP
as tcalc = 29.5(sec), and the time required to receive data from the GRAPE-MP to the host can be estimated as about
4 (sec).
tcomm is given as
tcomm = t j + ti + tzero + t f ,
where the first, second, third, and forth terms are estimated from the time spent on (2), (3), (4), and (6) in the
procedure described before. Note that these terms include the time for data conversion. From table 3 and the time
receiving data estimated above, we can set t j = 4.25 × 10−6 , ti = 4.75 × 10−6 , tzero = 0.65 × 10−6 , and t f = 7.6 × 10−6 .
Also, we estimate thost = 4.5 × 10−8 , which is negligible compared to the other terms.
This performance model is plotted in Fig. 8 with the measured calculation time per one particle-step. We can
see that they are in good agreement. This figure also shows that the calculation speed is limited by the speed of
communication (mainly, data conversion) for small N (N < 100). We also plot the ideal case in which the time for
data conversion is negligible (i.e., t j ∼ ti ∼ t f ∼ tzero ). This becomes possible if data conversion is done in the FPGA,
and it improves the performance for small N.
We also measure the power consumption of the GRAPE-MP board. To do so, we used the PCI express extender
made by KFCR [17], which enables us to measure the power consumption of the board separated from that of the
host. The total watt of the GRAPE-MP board is 9.64 Watt at idle, and 12.64 Watt at the calculation, which is much
lower compared to GPUs.
5. Summary
Since there are a number of numerical calculations cannot be done in double-precision operations, the need for
higher precision arithmetic operations is growing. We described the design and performance of the GRAPE-MP
system which is an SIMD accelerator board for quadruple-precision operations. The GRAPE-MP system is a pilot
study to investigate the feasibility of a hardware implementation of a quadruple-precision floating-point unit. With our

Hiroshi Daisaka et al. / Procedia Computer Science 4 (2011) 878–887

887

two target applications (the numerical evaluation of a Feynman loop integral and N-body simulation), the achieved
performance of the GRAPE-MP is roughly 50 % of the theoritical peak performance. We show that the GRAPE-MP
system is eﬀective to speed-up the numerical evaluation of the Feynman loop integral and other problems for the first
time. In future, we will extend the GRAPE-MP system in two directions: (1) implementing multi-chip or multi-board
system and (2) implementing more number of PEs on one chip. Furthermore, if we implement the reduction network
unit and external memory which are implemented in the GRAPE-DR board, the GRAPE-MP system will be suitable
for wider range of applications such as large matrix computation. In either ways, we believe that the GRAPE-MP
system will be used for a lot of problems.
[1] F. Yuasa, E. de Doncker, J. Fujimoto, N. Hamaguchi, T. Ishikawa, Y. Simizu, Precise Numerical Evaluation of the Scalar One-Loop Integrals
with the Infrared Divergence, in: Proceedings of the ACAT workshop, 2007, pp. 446–449.
[2] P. Wynn, On the convergence and stability of the epsilon algorithm, SIAM Journal of Mathematical Physics 3 (1966) 91–122.
[3] D. Knuth, The Art of Computer Programming vol.2 Seminumerical Algorithms, 1st Edition, Addison Wesley, Reading, Massachusetts, 1998.
[4] T. Dekker, A Floating-Point Technique for Extending the Available Precision, Numerische Mathematik 18 (1971) 224–242.
[5] N. Nakasato, Application of many-core accelerators for problems in astronomy and physics, in: 13th International Workshop on Advanced
Computing Analysis Techniques in Physics Research, 2010.
[6] J. Makino, Specialized Hardware for Supercomputing, SciDAC Review (2009) 54–65.
[7] Y. Hida, X. Li, D. Bailey, Algorithms for Quad-Double Precision Floating Point Arithmetic, in: Proceedings of the 15th Symposium on
Computer Arithmetic, 2001, pp. 155–162.
[8] K & F Computing Research Co., PCI Express IP core GPCIe, http://www.kfcr.jp/gpcie.html.
[9] N. Nakasato, J. Makino, A Compiler for High Performance Computing With Many-Core Accelerators, in: IEEE International Conference on
Cluster Computing and Workshops, 2009, pp. 1–9.
[10] M. Mori, Discovery of the Double Exponentioal Transformation and Its Developments, Publications of the Research Institute for Mathematical
Sciences 41(4) (2005) 897–935.
[11] D. Heggie, R. D. Mathieu, Standardised units and time scales, in: The Use of Supercomputers in Steller Dynamics, 1986, pp. 233–235.
[12] Y. Hida, X. S. Li, D. H. Bailey, Library for Double-Double and Quad-Double Arithmetic.
[13] M. S. Warren, J. K. Salmon, D. J. Becker, M. P. Goda, T. Sterling, G. S. Winckelmans, Pentium pro inside: I. a treecode at 430 gigaflops on
asci red ii. price/performance of $50/mflops on loki and hyglac, in: Supercomputing ’97, 1997.
[14] T. Hamada, K. Nitadori, 190 tflops astrophysical n-body simulation on cluster of gpus, in: Supercomputing ’10, 2010.
[15] J. Makino, T. Fukushige, M. Koga, K. Namura, GRAPE-6: Massively-Parallel Special-Purpose Computer for Astrophysical Particle Simulations, Publ. Astron. Soc. Japan 55 (2003) 1163–1187.
[16] T. Fukushige, J. Makino, A. Kawai, GRAPE-6A: A Single-Card GRAPE-6 for Parallel PC-GRAPE Cluster Systems, Publ. Astron. Soc. Japan
57 (2005) 1009–1021.
[17] K & F Computing Research Co., PCI Express Externder, http://www.kfcr.jp/grapedr.html.

