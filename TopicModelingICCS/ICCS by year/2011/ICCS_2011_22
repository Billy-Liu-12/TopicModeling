Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 442–451

International Conference on Computational Science, ICCS 2011

Node-to-set disjoint-path routing in perfect hierarchical hypercubes
Antoine Bossarda,1,∗, Keiichi Kanekoa , Shietung Pengb
a Tokyo

University of Agriculture and Technology
b Hosei University

Abstract
The perfect hierarchical hypercube structure was proposed in the literature as a topology for interconnection
networks of massively parallel systems. It has the useful ability that it can connect many nodes while retaining a
low degree as well as a small diameter. In this paper, we introduce an algorithm solving the node-to-set disjoint-path
routing problem in a perfect hierarchical hypercube. Inside a (2m + m)-perfect hierarchical hypercube, given one
source node and a set of k (≤ m + 1) destination nodes, this algorithm ﬁnds k disjoint paths between the source node
and all destination nodes of lengths at most m2m + 2m + 2m + 4 in O(km2m ) time complexity.
Keywords: cube-connected cubes, parallel processing, routing algorithm, interconnection network, disjoint paths

1. Introduction
Parallel processing is nowadays a critical topic, and a large amount of research has been conducted in this ﬁeld.
Massively parallel systems have been attracting more and more attention and are studied with enthusiasm. Interconnection networks are introduced when dealing with the connection of a signiﬁcant number of processors in such
massively parallel systems. Simple topologies, like hypercubes, meshes and tori, were ﬁrst introduced for interconnection networks. Today, more complicated but of high performance topologies have been introduced for these massively
parallel systems to replace the more conventional simple topologies cited previously [1, 2, 3, 4].
Perfect hierarchical hypercubes (HHC) have been proposed by Malluhi and Bayoumi [5]. They have the useful
ability that they can connect a signiﬁcant number of nodes while retaining a low degree and a small diameter. Because
of these advantages, Wu and Sun proposed independently an identical topology known as cube-connected cubes [6].
Subsequently Wu et al. [7] introduced a routing algorithm that solves the node-to-node disjoint-path routing problem
in HHC. In this paper we describe a routing algorithm to ﬁnd node-disjoint paths from one common source node to
a set of destination nodes. This problem is known as node-to-set disjoint-path routing. As the number of nodes in
the network increases, faulty nodes are likely to appear. Hence ﬁnding disjoint paths is a critical issue to establish
communication routes under a faulty environment. A similar routing problem has been solved in star graphs by Gu
and Peng [8] and in dual-cubes by Kaneko and Peng [9].
∗ Tel.

+81 (0)42-388-7489 Fax. +81 (0)42-385-9747
Email address: 50008834706@st.tuat.ac.jp (Antoine Bossard)
1 Corresponding author

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.046

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

443

The rest of this paper is structured as follows. Section 2 reviews important deﬁnitions and lemmas. In Section 3, an
algorithm HHC-N2S solving the node-to-set disjoint-path routing problem in HHC is proposed. The correctness and
complexities of HHC-N2S are then studied in Section 4, followed by an example. An empirical evaluation through a
computer experiment is given in Section 5. Finally, Section 6 concludes this paper.
2. Preliminaries
We introduce in this section several deﬁnitions, notations and lemmas.
Deﬁnition 1. An m-dimensional hypercube, Qm , consists of 2m nodes, and each node has an m-bit unique address.
There is an edge between a pair of nodes a and b if and only if the Hamming distance between their addresses H(a, b)
is equal to 1.
Deﬁnition 2. A (2m + m)-perfect hierarchical hypercube, HHC 2m +m , consists of 22 +m nodes, and each node has a
unique address of a pair of 2m -bit and m-bit sequences, in this order. For two nodes a = (σa , πa ) and b = (σb , πb ),
there is an edge (a, b) between them if and only if either one of the following two conditions holds:
m

• σa = σb and H(πa , πb ) = 1
• σa = σb ⊕ 2πa and πa = πb
where ⊕ represents the bitwise exclusive-or operation and the edge (a, b) is denoted by a → b.
Edges induced by the ﬁrst and the second conditions are called internal and external edges, respectively. In
addition, for any node a = (σa , πa ) in an HHC, we say that σa and πa denote the subcube ID and the processor ID of
a, respectively. Also, nodes with the same subcube ID σ induce an m-dimensional hypercube; we denote this m-cube
by subcube Qm (σ). Figure 1 shows a 6-perfect hierarchical hypercube, HHC 6 .
Q2 (0000)
01
00

11
10

Figure 1: HHC 6 (m = 2).

An HHC 2m +m is symmetric, and the number of nodes, the number of edges, the degree, and the connectivity are
m
, (m + 1)22 +m−1 , m + 1, and m + 1, respectively.
Let N(a) represent the set of neighbour nodes of a. A path P is an alternate sequence of nodes and edges
a1 , (a1 , a2 ), a2 , . . . , al−1 , (al−1 , al ), al . The length of a path P is the number of edges included in P; it is denoted by
L(P). We use the notation a1 → a2 → . . . → al or simply a1 ❀ al to represent the path P.
We assume that a node address in an n-dimensional hypercube Qn can be stored in a ﬁxed number of machine
words. Therefore, for two nodes a and b in a Qn , the comparison of a and b, the calculation of their Hamming distance
H(a, b), and the detection of the most signiﬁcant bit position can be performed in constant time complexity.
The HHC routing algorithm we introduce in this paper strongly relies on hypercube node-to-set disjoint-path
routing. We describe in Algorithm 1 an algorithm Cube-N2S solving the node-to-set disjoint-path routing in a Qn .
22

m

+m

444

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

The main idea of Cube-N2S is to follow a divide-and-conquer strategy using the recursive property of a Qn : for any
dimension δ, 0 ≤ δ ≤ n − 1, a Qn consists of two subcubes Q0n−1 and Q1n−1 induced by the set of nodes of Qn whose
δ-th bit is set to 0 and 1, respectively. Let SPR(a, b) denote a shortest-path routing (SPR) between any two nodes
a, b ∈ Qn .
Lemma 1. For s ∈ Qn , D = {d1 , d2 , . . . , dk } ⊂ Qn and M ⊂ N(s) with |M| ≤ n − k, k ≤ n, we can ﬁnd k disjoint paths
s ❀ di , 1 ≤ i ≤ k of lengths at most n + 1, including neither an edge s → M nor a node in M \ D in O(kn) time
complexity.
Proof: Paths disjointness is trivial. Let D0 = D ∩ Q0n−1 and D1 = D ∩ Q1n−1 . Let L(k, n) be the maximum length
of a path generated by Cube-N2S in a Qn with |D| = k. We have L(1, n) = n + 1 and L(k, n) = max{L(|D0 |, n −
1), L(|D1 |, n − 1) + 1}. Similarly let T (k, n) be the time complexity of Cube-N2S. We have T (1, n) = O(n) and
T (k, n) = T (|D0 |, n − 1) + T (|D1 |, n − 1) + O(n) with 1 ≤ |D0 |, |D1 | ≤ k − 1 and |D0 | + |D1 | = k. Consequently
L(k, n) = n + 1 and T (k, n) = O(kn).
✷
Algorithm 1 Cube-N2S(Qn , s, D, M)
Input: A Qn , s ∈ Qn , D = {d1 , d2 , . . . , dk } ⊂ Qn and M ⊂ N(s) where |M| ≤ n − k, k ≤ n.
Output: k disjoint paths s ❀ di , 1 ≤ i ≤ k including neither an edge s → M nor a node in M \ D.
if s ∈ D then C := {s}; D := D \ {s} else C := ∅ end if
C := C ∪ {s → si | si ∈ D ∩ N(s) \ M};
M := M ∪ (D ∩ N(s)); D := D \ (N(s) \ M);
if D = ∅ then return C end if
if |D| = 1 then
Divide Qn along δ, 0 ≤ δ ≤ n − 1 such that s ⊕ 2δ M; /* Assume s ∈ Q0n−1 */
if d ∈ Q1n−1 then C := C ∪ {s → SPR(s ⊕ 2δ , d) } else C := C ∪ {s → SPR(s ⊕ 2δ , d ⊕ 2δ ) → d} end if
else
Divide Qn along δ, 0 ≤ δ ≤ n − 1 such that D ∩ Q0n−1 ∅ and D ∩ Q1n−1 ∅; /* Assume s ∈ Q0n−1 */
s := s ⊕ 2δ ; /* Let si ∈ Q1n−1 be the neighbour of si ∈ Q0n−1 */
M1 := {si ⊕ 2δ | si ∈ M ∩ Q0n−1 };
if s ∈ D ∩ M then
Find sw such that sw ∈ N(s ) \ (D ∪ M1 ∪ {s});
D := D ∩ Q1n−1 \ {s } ∪ {sw }
else
D := D ∩ Q1n−1
end if
C1 := Cube-N2S(Q1n−1 , s , D , M1 );
if s ∈ D ∩ M then C1 := (C1 \ {s → sw }) ∪ {s → sw → s } end if
if s M then
Select P ∈ C1 arbitrarily;
C1 := {s → P} ∪ {s → si j → si j ❀ d j | s → si j ❀ d j ∈ C1 \ {P}}
else
C1 := {s → si j → si j ❀ d j | s → si j ❀ d j ∈ C1 }
end if
M0 := (M ∩ Q0n−1 ) ∪ {si j | (s → si j → si j ❀ d j ) ∈ C1 };
C0 := Cube-N2S(Q0n−1 , s, D ∩ Q0n−1 , M0 );
C := C ∪ C0 ∪ C1
end if
return C

Finally Lemma 2 shows that inside an HHC 2m +m we can connect m + 1 destination nodes to distinct subcubes using
disjoint paths of lengths at most two. This process is referred to as destination node distribution.
Lemma 2. Given a set of m + 1 nodes D = {d1 , d2 , . . . , dm+1 } in an HHC 2m +m , we can ﬁnd m + 1 disjoint paths
di ❀ di , 1 ≤ i ≤ m + 1 of lengths at most two in O(m3 ) time complexity such that the subcube of di does not include

445

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

di
di
dj

dj

destination node
distributed destination node
unavailable for distribution

Figure 2: Distributing destination nodes into distinct subcubes (a subcube is represented by a dashed circle).

any node in D ∪ (D \ {di }) where D = {d1 , d2 , . . . , dm+1 }.
(i)
Proof: For any di = (σ, pi ) ∈ D, there are m + 1 disjoint paths P(i)
1 , . . . , Pm+1 of length at most two connecting
di to m + 1 distinct subcubes:

di = (σ, pi )→ (σ ⊕ 2 pi , pi ) ∈ Qm (σ ⊕ 2 pi )
h
h
di = (σ, pi )→ (σ, pi ⊕ 2h ) → (σ ⊕ 2 pi ⊕2 , pi ⊕ 2h ) ∈ Qm (σ ⊕ 2 pi ⊕2 )
These paths are represented in Figure 2.
We show that for any d j , 1 ≤ j ≤ m + 1, i

(0 ≤ h ≤ m − 1)

j, the path P(wj)j : d j → d j → d j , 1 ≤ w j ≤ m + 1 can block at most

(i)
one of the m + 1 paths P(i)
1 , . . . , Pm+1 .
(i)
Consider two paths P(i)
v.
u : di → u1 → u2 ∈ Qm (σu ) and Pv : di → v1 → v2 ∈ Qm (σv ) with 1 ≤ u, v ≤ m + 1, u
As u1 and v1 are two distinct neighbours of the same node di , then H(u1 , v1 ) = 2.
Assume that d j ∈ Qm (σ). Then d j ∈ Qm (σ) and d j Qm (σ) hold. As H(u1 , v1 ) = 2, then u1 and v1 cannot be

both on P(wj)j . Also, if d j = u1 then d j

Qm (σv ) holds since there is only one external edge v1 → v2 between Qm (σ)

(i)
and Qm (σv ) and since d j v1 . Hence P(wj)j cannot block both P(i)
u and Pv if d j ∈ Qm (σ) holds.
Assume that d j Qm (σ) and d j ∈ Qm (σu ). We recall H(σ, σu ) = H(σ, σv ) = 1 holds. Then, as u1
v1 , we
have H(σu , σv ) = 2. Thus there is no external edge between Qm (σu ) and Qm (σv ), and d j Qm (σv ) holds because P(wj)j
(i)
includes only one external edge. Hence P(wj)j cannot block both P(i)
u and Pv if d j ∈ Qm (σu ) holds.
(i)
As a result, we deduce each path P(wj)j , 1 ≤ w j ≤ m + 1 can block at most one of the m + 1 paths P(i)
1 , . . . , Pm+1 .
(i)
2
Then at least (m + 1) − m = 1 path P(i)
wi , 1 ≤ wi ≤ m + 1 remains to connect di to a node di . Pwi can be found in O(m )
(i)
(i)
time complexity by checking the m + 1 paths P1 , . . . , Pm+1 of lengths at most two for di . Therefore we can connect
all di ∈ D to nodes di using disjoint paths of lengths at most two in O(m3 ) time complexity.
✷

3. Node-to-set disjoint-path routing algorithm in an HHC
We propose in this section an algorithm HHC-N2S which ﬁnds k (≤ m + 1) disjoint paths from a source node
s = (s0 , p0 ) to k destination nodes di = (si , pi ), 1 ≤ i ≤ k in an HHC 2m +m . The main idea of the algorithm is to reduce
the node-to-set disjoint-path routing problem in an HHC to the node-to-set disjoint-path routing problem in a hypercube via a 2m -to-1 mapping of an HHC 2m +m onto a 2m -cube. Concretely, for each node (σ, π) of the HHC, we map its
subcube Qm (σ) to the single node σ of a 2m -cube. From there, we distinguish two types of nodes: HHC-level nodes
are nodes of the HHC 2m +m , and cube-level nodes are nodes of the 2m -cube Q2m obtained after the mapping operation.
An HHC-level path is a path made of HHC-level nodes, and similarly a cube-level path is a path made of cube-level
nodes. A ﬁrst case handles the situation at least k − 1 destination nodes are inside Qm (s0 ), and otherwise, a second case

446

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

Qm (s0 ⊕ 2 p0 )

Qm (s0 ⊕ 2 p0 ⊕ 2 pk )

(s0 ⊕ 2 p0 , p0 )

d1
s
Qm (s0 )

d2
dk−1

dk

Qm (s0 ⊕ 2 pk )

Figure 3: Disjoint paths constructed if D ⊂ Qm (s0 ), k = m + 1. A dashed circle represents a subcube.

proceeds as follows. In Step 1 destination nodes are distributed into distinct subcubes. These subcubes are treated as
destination nodes when applying Cube-N2S onto Q2m in Step 2. In Step 3 unnecessary cube-level paths returned by
Step 2 are discarded. Finally, in Step 4 the cube-level paths not discarded are converted back to HHC-level paths by
performing routing inside each subcube corresponding to one node of the cube-level paths. It is important to note that
if k = m + 1 one path must use the edge s → (s0 ⊕ 2 p0 , p0 ) so that we can disjointly connect inside Qm (s0 ) the other m
paths to s.
Case I. |D ∩ Qm (s0 )| ≥ k − 1
If there are at least k − 1 destination nodes inside Qm (s0 ), we solve the node-to-set disjoint-path routing problem in
an HHC as follows. We connect s to at most m of these destination nodes by applying Cube-N2S inside Qm (s0 ). If
either of |D ∩ Qm (s0 )| = m + 1 or |D ∩ Qm (s0 )| = k − 1 holds, there must be one destination node, say dk , that has
not been connected to s. If dk ∈ Qm (s0 ) then we connect s to dk with the path s → (s0 ⊕ 2 p0 , p0 ) ❀ (s0 ⊕ 2 p0 , pk ) →
(sk ⊕ 2 p0 ⊕ 2 pk , pk ) ❀ (sk ⊕ 2 p0 ⊕ 2 pk , p0 ) → (sk ⊕ 2 pk , p0 ) ❀ (s0 ⊕ 2 pk , pk ) → (s0 , pk ) = dk where ❀ represents
here a SPR in a Qm . Note that if dk is included on one of the paths returned by Cube-N2S, say s ❀ d j , we discard
the subpath from dk to d j and exchange the indices of the nodes d j and dk . Otherwise, that is dk Qm (s0 ), then dk is
connected to s by the path s = (s0 , p0 ) → (s0 ⊕ 2 p0 , p0 ) ❀ (sk , pk ) = dk such that this path does not include a node
of Qm (s0 ) except s. All the paths are found, the algorithm is thus terminated. Figure 3 shows the m + 1 disjoint paths
constructed in the case D ⊂ Qm (s0 ), k = m + 1.
Case II. |D ∩ Qm (s0 )| ≤ k − 2
Step 1 - Preprocessing Assume without loss of generality that Qm (s0 ) ∩ D = {d1 , . . . , dr }, r < k − 1. Let Z1 be
the set of subcube IDs such that corresponding subcubes contain at least two destination nodes (s0 is excluded from
Z1 ), formally Z1 = {σ | |Qm (σ) ∩ D| ≥ 2} \ {s0 }. Let Z2 be the set of subcube IDs not in Z1 such that each of
corresponding subcubes is linked to Qm (s0 ) with an external edge whose end node in Qm (s0 ) is a destination node,
formally Z2 = {s0 ⊕ 2 p1 , . . . , s0 ⊕ 2 pr } \ Z1 . We connect with at most two edges each destination node di = (si , pi )
with si ∈ Z1 ∪ Z2 to a node di = (si , pi ) (we call it distributed destination node for di ) by calling Algorithm 2 with
distrib(s0 , D, Z1 ∪ Z2 ).
Concretely, for each di with |Qm (si ) ∩ D| = 1 and si Z2 , we do not distribute di . For each di ∈ Qm (s0 ), we
consider as if di is distributed to (s0 ⊕ 2 pi , pi ) so as to forbid distribution into subcubes whose corresponding subcube
IDs are in Z2 . Then we distribute any destination node in Z1 ∪ Z2 according to the proof of Lemma 2. Formally,
∀di , 1 ≤ i ≤ k with si ∈ Z1 ∪ Z2 , three statements hold with respect to its distribution path di → di → di : si Z2 ,
Qm (si ) ∩ (D ∪ D \ {di }) = ∅ and di D, where D = {d j | s j ∈ Z1 ∪ Z2 }. Note that if Qm (s0 ) ∩ D = ∅, one destination
node can be distributed to a node in Qm (s0 ).

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

447

Qm (s0 )

Z1
Z2
Z3
Z4

destination node
distributed destination node

Figure 4: Four disjoint sets of subcube IDs.

Step 2 - Hypercube routing We apply in this step Cube-N2S in Q2m . The source node for Cube-N2S is s0 where
(s0 , p0 ) = s. The set of destination nodes for Cube-N2S is built as follows. We create fake destination nodes so that the
cube-level paths returned by Cube-N2S are disjoint and they can be converted to HHC-level paths. For this purpose
we introduce four disjoint sets of subcube IDs.
Z1 and Z2 have already been deﬁned in Step 1. Z3 is deﬁned as the set of subcube IDs whose corresponding
subcubes contain either one distributed destination node or, for subcubes whose corresponding subcube ID is not in
Z2 , only one destination node. Formally Z3 = {si | si ∈ Z1 ∪ Z2 } ∪ {si | si Z1 ∪ Z2 , r + 1 ≤ i ≤ k}. Z4 is deﬁned as
a set of subcube IDs neighbours of s0 such that Z4 ⊂ N(s0 ) \ (Z1 ∪ Z2 ∪ Z3 ), |Z4 | = 2m − |Z1 | − |Z2 | − |Z3 \ {s0 }| and
Z4 should not include s0 ⊕ 2 p0 if possible. Note that Z4 is not always unique. The aim of Z4 is to force one cube-level
path connecting s0 to a node of Z1 ∪ (Z3 \ {s0 }) to go through the node s0 ⊕ 2 p0 . See Figure 4 for an illustration of these
four sets.
We apply the node-to-set disjoint-path routing algorithm of Lemma 1 in Q2m by calling Cube-N2S(Q2m , s0 , Z1 ∪
(Z3 \ {s0 }), Z2 ∪ Z4 ). If s0 ∈ Z3 , the cube-level path of length zero s0 is added to the set of paths returned by Cube-N2S.
Let us introduce an additional treatment for the case Z4 inevitably includes s0 ⊕ 2 p0 . If Z1 ∪ Z2 ∪ (Z3 \ {s0 }) N(s0 ),
then |N(s0 ) \ (Z1 ∪ Z2 ∪ Z3 )| > 2m − |Z1 | − |Z2 | − |Z3 \ {s0 }| = |Z4 |, that is Z4 can be constructed so as not to include
s0 ⊕ 2 p0 . It is a contradiction, then Z1 ∪ Z2 ∪ (Z3 \ {s0 }) ⊂ N(s0 ) holds. Now assuming Z1 ∩ N(s0 ) ∅, then at least
one of the corresponding nodes of Z3 cannot be in N(s0 ) ∪ {s0 }. Hence Z3 \ {s0 } N(s0 ). It is a contradiction, then
Z1 ∩ N(s0 ) = ∅. As a result from Z1 ⊂ N(s0 ) and Z1 ∩ N(s0 ) = ∅, Z1 = ∅ holds. Therefore, because by deﬁnition
of Z3 we have s0 ∈ Z3 only if Qm (s0 ) contains a distributed destination node, s0 Z3 . Hence Z1 ∪ Z2 ∪ Z3 ⊂ N(s0 ).
If Z3 ∩ N(s0 ) = ∅ then |D ∩ Qm (s0 )| = k ≥ k − 1, case handled in Step 0. Hence Z3 ∩ N(s0 ) ∅. We ﬁrst select an
arbitrary subcube ID si = s0 ⊕ 2q ∈ Z3 ∩ N(s0 ). We then create the path s0 → s0 ⊕ 2 p0 → s0 ⊕ 2 p0 ⊕ 2q → s0 ⊕ 2q = si
of length three and discard the path s0 → si of length one returned by Cube-N2S.
Step 3 - Path discarding We can now remove all the unnecessary paths created in Step 2. A path P : s0 ❀ σ
is discarded if σ ∈ Z1 and s0 ⊕ 2 p0
P hold. There may exist a path P : s0 → s0 ⊕ 2 p0 ❀ ς → σ ∈ Z1 . In
this case, considering the HHC-level node set E = {di | di ∈ Qm (σ)} ∪ {di | di → di → di , di , di ∈ Qm (σ)}, let
e(= d j or d j ) ∈ E be the closest node of E to the node (σ, log2 (ς ⊕ σ)). P will be used to connect s to e in Step 4.
Thus we discard the cube-level path generated in Step 2 connecting s0 to s j where (s j , p j ) = d j .
Step 4 - Subcube routing After Step 3 there remain k − r disjoint cube-level paths. At least k − r − 1 of them
connect s0 to subcube IDs of Z3 . At most one of them connects s0 to a subcube ID of Z1 . For each cube-level path
s0 ❀ si , we extend it with an edge si → si . Now we convert the k − r cube-level paths back to HHC-level paths.
Concretely we perform a subcube routing inside each subcube corresponding to a subcube ID (ie. cube-level node)
included in these k − r paths Pi : s0 ❀ si , r + 1 ≤ i ≤ k as below. We assume without loss of generality that the path

448

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

dr+1
dr+2
dr+2

dr+2
dr+3

s
Qm (s0 )

dr+3

dk

Figure 5: Disjoint paths generated by HHC-N2S.

Algorithm 2 distrib(s0 , D = {d1 , d2 , . . . , dk }, Z)

Algorithm 3 convert(P = σ0→ σ1→ . . . → σn , πbeg , πend )

Input: A subcube ID s0 , a set D of k (≤ m + 1) destination
nodes and a set Z of subcube IDs.
Output: A set of HHC-level distributing disjoint paths di =
(si , pi ) ❀ di , si ∈ Z.
H := ∅; D := ∅;
D˜ := {(s0 ⊕ 2 pi , pi ) | di = (si , pi ) ∈ Qm (s0 )};
for all di = (si , pi ) with si ∈ Z do
(i)
Generate m + 1 paths P(i)
1 , . . . , Pm+1 according to Lem. 2;
(i)
Find a path Pwi such that
•
P(i)
wi ∩ (D \ {di }) = ∅
•
Qm (si ) ∩ ((D ∪ D ∪ D˜ ) \ {di }) = ∅
( j)
( j)
•
P(i)
wi ∩ Pw j = ∅ (∀Pw j ∈ H)
hold;
H := H ∪ {P(i)
wi };
D := D ∪ {di | P(i)
wi = di ❀ di }
end for
return H

Input: A cube-level path P = σ0 ❀ σn and two processors
IDs to specify HHC nodes (σ0 , πbeg ) and (σn , πend ).
Output: The HHC-level path corresponding to P.
if L(P) = 0 then
π0 (= πbeg ) → π1 → . . . → πλ (= πend ) := SPR(πbeg , πend );
return (σ0 , π0 ) → (σ0 , π1 ) → . . . → (σ0 , πλ )
else
πnext := log2 (σ0 ⊕ σ1 );
π0 (= πbeg ) → π1 → . . . → πλ (= πnext ) := SPR(πbeg , πnext );
P := convert(σ1 ❀ σn , πnext , πend );
return (σ0 , π0 ) → (σ0 , π1 ) → . . . → (σ0 , πλ ) → P
end if

starting with the edge s0 → s0 ⊕ 2 p0 is Pr+1 .
First we need to handle routing inside Qm (s0 ) particularly. We apply Cube-N2S to connect s to the k − 1 ≤ m
nodes of the set (Qm (s0 ) ∩ D) ∪ {a = (s0 , πa ) | s0 ⊕ 2πa ∈ Pi , r + 2 ≤ i ≤ k}.
Now inside the other subcubes, we proceed as follows. For each cube-level path Pi , r + 1 ≤ i ≤ k : si,0 (= s0 ) →
si,1 → · · · → si,λi −1 → si,λi (= si ), let pi, j be an m-bit sequence that satisﬁes si, j−1 ⊕ 2 pi, j = si, j . For each path Pi we
construct an HHC-level path (si,0 , pi,1 ) → (si,1 , pi,1 ) = (si,0 ⊕2 pi,1 , pi,1 ) ❀ (si,1 , pi,2 ) → · · · → (si,λi −1 , pi,λi −1 ) ❀ (si,λi −1 ,
pi,λi ) → (si,λi , pi,λi ) = (si , pi,λi ) ❀ (si , pi ) = di , using a SPR inside each subcube to connect each node (si, j , pi, j ) to
(si, j , pi, j+1 ). Algorithm 3 describes this operation. Figure 5 shows the disjoint paths generated by this step.
If Pr+1 connects an element of Z1 (ie. sr+1 ∈ Z1 ), we connect (sr+1 , pr+1,λr+1 ) and e (= dr+1 or dr+1 , see Step 3) with
a SPR instead of connecting (sr+1 , pr+1,λr+1 ) and dr+1 . If e dr+1 then e = dr+1 holds, hence we connect e to dr+1 in
one edge.
4. Correctness and complexities
In this section we prove the correctness of the algorithm HHC-N2S and estimate its time complexity as well as
the maximum path length.
Case I applies Cube-N2S to connect by disjoint paths s and at most m destination nodes in Qm (s0 ). By Lemma 1,
these paths are generated in O(m2 ) time complexity, and their lengths are at most m + 1. In the case there is a path
going outside Qm (s0 ), the length of that additional path is at most (2m + 1) + m(2m − 1) = m2m + 2m − m + 1 since it

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

449

consists of at most 2m + 1 external edges and at most 2m − 1 subcube routings. The path can be constructed in O(m2m )
time complexity. Moreover, all the nodes on this path other than its end nodes s and dk are outside Qm (s0 ). Hence,
this path is disjoint from the other paths. If dk ∈ Qm (s0 ), checking if dk is included on a path generated inside Qm (s0 )
takes O(m2 ) time complexity since there are at most m paths of lengths at most m + 1.
Now in Step 1 of Case II, the sets Z1 and Z2 can be created in O(k2 ) and O(k) time complexity, respectively. Step 1
then distributes every destination node included in a subcube whose corresponding subcube ID is in Z1 ∪Z2 to a distinct
subcube by disjoint paths of length at most two, requiring O(m3 ) time complexity (Lemma 2). Lemma 2 ensures
distribution feasibility of all destination nodes, but for HHC-N2S only those inside subcubes whose corresponding
subcube IDs are in Z1 ∪ Z2 need to be distributed.
Let us prove that the construction of Z4 in Step 2 is possible, that is that |Z4 | ≥ 0 holds. Because we have
|Z4 | = 2m − |Z1 | − |Z2 | − |Z3 \ {s0 }|, we need that |Z1 | + |Z2 | + |Z3 \ {s0 }| ≤ 2m holds. Let us count how many elements
each set Z1 , Z2 and Z3 \ {s0 } contains. We can assume that Qm (s0 ) ∩ D = {d1 , . . . , dr }, r < k − 1. Hence we have
|Z2 | ≤ r (equality does not always hold because a subcube neighbour of s0 can be an element of Z1 , thus excluded
from Z2 ). Since k − r destination nodes are outside Qm (s0 ), |Z1 | ≤ (k − r)/2 . Also we trivially have |Z3 | = k − r and
|Z3 \ {s0 }| ≤ k − r. We solve the following inequality (|Z1 | + |Z2 | + |Z3 \ {s0 }| is maximised for r = 0 and k = m + 1)
|Z1 | + |Z2 | + |Z3 \ {s0 }| ≤
≤
≤

k−r
k−r
+ r + (k − r) =
+k
2
2
m+1
+ (m + 1)
2
2m ⇔ m ≥ 2

Therefore |Z4 | ≥ 0 holds for m ≥ 2. Since |Z1 | + |Z2 | + |Z3 \ {s0 }| + |Z4 | = 2m , we can apply Cube-N2S to solve the
node-to-set disjoint-path routing problem in Q2m . If m = 1, the corresponding HHC is a cycle and it is then trivial to
disjointly route to at most m + 1 = 2 destination nodes. The sets Z3 and Z4 can be created in O(k) and O(2m ) time
complexity, respectively. By Lemma 1, the paths generated in Step 2 are disjoint, have a maximum length of 2m + 1
and require O(k2m ) time complexity since |Z1 | and |Z3 \ {s0 }| are O(k), which is the dominant time complexity for Step
2.
Step 3 discards paths by testing each of the cube-level paths returned by Step 2 (at most |Z1 | + |Z3 | paths are
returned). |Z1 | and |Z3 | are of order O(k), hence we can check for each path if it should be discarded or not in O(k)
time complexity. In total, the time complexity of Step 3 is O(k2 ).
Step 4 ﬁrst performs routing inside Qm (s0 ) with Cube-N2S. The generated paths are proved to be disjoint by
Lemma 1. Then Step 4 performs a subcube routing inside each subcube whose corresponding subcube ID is included
on the k − r cube-level disjoint paths not discarded by Step 3. Hence the HHC-level paths produced by Algorithm 3
are disjoint. An HHC-level path generated by Cube-N2S inside Qm (s0 ) and an HHC-level path generated based on
Cube-N2S and Algorithm 3 outside Qm (s0 ) are disjoint since they do not share any node except for a common end
node. Because the cube-level paths returned by Step 2 have a length of order O(2m ), it means that O(2m ) subcubes of
the HHC will be traversed. In each intermediate subcube, a routing of O(m) time complexity is required. Hence the
time complexity of Step 4 for each path is O(m2m ). Therefore the total time complexity of Step 4 is O(km2m ), which
is the dominant time complexity of HHC-N2S.
Let us analyze the maximum length of the paths generated by HHC-N2S. First, in the special case |D ∩ Qm (s0 )| ≥
k − 1, the paths inside Qm (s0 ) have a length of at most m + 1 by Lemma 1. Assume that {d1 , . . . , dk−1 } ⊂ Qm (s0 ).
If dk ∈ Qm (s0 ), the length of the path s ❀ dk is at most 3m + 4. If dk Qm (s0 ), the length of the corresponding
cube-level path s0 ❀ sk is at most 2m + 1. We have to perform a subcube routing in each subcube excepted the ﬁrst
one Qm (s0 ) and the last one Qm (sk ). Hence the length of this path is at most ((2m + 1) − 1)(m + 1) + 1.
The lengths of the paths generated in Step 2 are at most 2m + 1. Some of the paths may be extended by one edge at
the beginning of Step 4. Hence the maximum path length of the cube-level paths Pr+1 , . . . , Pk is 2m + 2. For a path of
length 2m + 2, Cube-N2S generates a path of length at most m + 1 in Qm (s0 ). Inside the 2m + 1 intermediate subcubes,
subcube routings generate paths of length at most m. In the last subcube, a path of one edge is generated. See Figure
6. In total, the maximum length of the paths generated by HHC-N2S is:
(m + 2) + (m + 1)(2m + 1) + 1 = m2m + 2m + 2m + 4

450

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

Qm (s0 )

Qm (si )

s

di



di

di

m+1

1

m

1

m

1

...

1

m

1

1

Figure 6: Counting the maximum number of edges.

Q8 path
HHC 11 path
00000000 (00000000, 000) s
00000001 (00000001, 000)
(00000001, 001)
(00000001, 101)
00100001 (00100001, 101)
(00100001, 001)
00100011 (00100011, 001)
(00100011, 011)
00101011 (00101011, 011)
(00101011, 001)
(00101011, 101)
00001011 (00001011, 101)
(00001011, 100)
(00001011, 000) d1
00001010 (00001010, 000) d1

P1

Table 1: Routing example inside an HHC 11
Q8 path
HHC 11 path
Q8 path
HHC 11 path
00000000 (00000000, 000) s
00000000 (00000000, 000) s
(00000000, 010)
(00000000, 100)
(00000000, 011)
(00000000, 110)
00001000 (00001000, 011)
01000000 (01000000, 110)
(00001000, 001) d2
(01000000, 111)
00001010 (00001010, 001) d2
(01000000, 011)
01001000 (01001000, 011)
(01001000, 010)
(01001000, 000)
(01001000, 100)
01011000 (01011000, 100)
(01011000, 101)
01111000 (01111000, 101)
(01111000, 100)
(01111000, 110)
00111000 (00111000, 110)
(00111000, 100) d3
P2
P3

Q8 path
HHC 11 path
00000000 (00000000, 000) s
(00000000, 001)
(00000000, 101)
(00000000, 111)
10000000 (10000000, 111)
(10000000, 101)
(10000000, 001)
10000010 (10000010, 001)
(10000010, 000)
(10000010, 010) d4

P4

We can now recapitulate the above discussion to state the following theorem.
Theorem 1. In an HHC 2m +m , given a node s and a set of k (≤ m + 1) nodes D = {d1 , . . . , dk }, we can ﬁnd k disjoint
paths s ❀ di , 1 ≤ i ≤ k of lengths at most m2m + 2m + 2m + 4 in O(km2m ) time complexity.
As an example we solve using HHC-N2S a node-to-set disjoint-path routing problem inside an HHC 11 (m =
3). To increase clarity, we write all numbers in binary format. Let the source node be s = (00000000, 000) and
the set of destination nodes be D = {d1 = (00001010, 000), d2 = (00001010, 001), d3 = (00111000, 100), d4 =
(10000010, 010)}. We note that d1 and d2 are inside the same subcube Qm (00001010) and will thus need to be
distributed to d1 and d2 , respectively. The disjoint paths returned by HHC-N2S are given in Table 1.
5. Computer experiment
In this section we empirically measure HHC-N2S to inspect its practical behaviour. HHC-N2S has been implemented using the Scheme functional programming language under the development environment DrScheme [10]. We
ﬁrst evaluated the execution time of this algorithm for diﬀerent values of m = 2 to 9. We then, for each value of m,
measured the average and the maximum of all the maximal path lengths, each maximal length collected when solving
one routing problem for this value of m.
Practically, we solved 10,000 routing problems with HHC-N2S for each value of m. We bounded m by 2 ≤ m ≤ 9,
that is using natural integers of up to 29 = 512 bits and routing inside perfect hierarchical hypercubes as large as
an HHC 521 . Such big integers are natively handled by Scheme as the integer datatype. The source node and the
destination nodes were generated randomly; moreover they are distinct. We imposed that the number of destination
nodes k always be equal to m + 1.
Figure 7 illustrates the average time in milliseconds required to solve a node-to-set disjoint-path routing problem
for each value of m. We see the measured average time converges to O(m2 2m ) time complexity. Figure 8 illustrates
the average and maximum maximal path length for each value of m. The theoretical maximum path length of the

451

Antoine Bossard et al. / Procedia Computer Science 4 (2011) 442–451

Maximum path length

Average time (ms)
10000

10000

1000

1000

100

100

m2m + 2m + 2m + 4

10

10

0.008 × m 2

2 m

average
maximum
1

1
1

2

3

m

4

5

6

7

8

9

Figure 7: Average time for each value of m, in milliseconds (logarithmic scale).

1

2

3

m

4

5

6

7

8

9

Figure 8: Average and maximum of the maximal path lengths collected for each value of m (logarithmic scale).

algorithm m2m + 2m + 2m + 4 is also drawn for comparison. As m increases, the probability to generate a path of
maximum length decreases, which explains the divergence between the results and the theoretical maximum path
length.
6. Conclusion
We have introduced in this paper a routing algorithm solving the node-to-set disjoint-path problem in perfect
hierarchical hypercubes. Inside an HHC 2m +m , for a common source node and a set of k (≤ m + 1) destination nodes,
the algorithm ﬁnds k disjoint paths between the source node and the destination nodes, whose lengths are at most
m2m + 2m + 2m + 4 in O(km2m ) time complexity. Future works include solving other disjoint-path routing problems
in perfect hierarchical hypercubes, such as set-to-set or k-pairwise disjoint-path routing algorithms. Topics related to
simple fault-tolerant and cluster fault-tolerant routing algorithms are also to be considered.
Acknowledgments
This study is partly supported by the Fund for Promoting Research on Symbiotic Information Technology of Ministry of Education, Culture, Sports, Science and Technology (MEXT) Japan. It is also partly supported by a Grant-inAid for Scientiﬁc Research (C) of the Japan Society for the Promotion of Science (JSPS) under Grant No. 22500041.
References
[1] Q.-P. Gu, S. Peng, Node-to-node cluster fault tolerant routing in star graphs, Information Processing Letters 56 (1) (1995) 29–35.
[2] L. Gargano, U. Vaccaro, A. Vozella, Fault tolerant routing in the star and pancake interconnection networks, Information Processing Letters
45 (6) (1993) 315–320.
[3] K. Kaneko, An algorithm for node-to-set disjoint paths problem in burnt pancake graphs, IEICE Transactions on Information and Systems
E86-D (12) (2003) 2588–2594.
[4] J.-W. Mao, C.-B. Yang, Shortest path routing and fault-tolerant routing on de bruijn networks, Networks 35 (3) (2000) 207–215.
[5] Q. M. Malluhi, M. A. Bayoumi, The hierarchical hypercube: A new interconnection topology for massively parallel systems, IEEE Transactions on Parallel and Distributed Systems 5 (1) (1994) 17–30.
[6] J. Wu, X.-H. Sun, Optimal cube-connected cube multicomputers, Journal of Microcomputer Applications 17 (2) (1994) 135–146.
[7] R.-Y. Wu, G.-H. Chen, Y.-L. Kuo, G. J. Chang, Node-disjoint paths in hierarchical hypercube networks, Information Sciences 177 (19) (2007)
4200–4207.
[8] Q.-P. Gu, S. Peng, Node-to-set disjoint paths with optimal length in star graphs, IEICE Transactions on Information and Systems E80-D (4)
(1997) 425–433.
[9] K. Kaneko, S. Peng, Node-to-set disjoint paths routing in dual-cube, in: Proceedings of the 9th International Symposium on Parallel Architectures, Algorithms, and Networks (ISPAN), 2008, pp. 77–82.
[10] R. B. Findler, J. Clements, C. Flanagan, M. Flatt, S. Krishnamurthi, P. Steckler, M. Felleisen, Drscheme: a programming environment for
scheme, Journal of Functional Programming 12 (2) (2002) 159–182.

