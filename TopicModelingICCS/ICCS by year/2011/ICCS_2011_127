Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 1901–1906

International Conference on Computational Science, ICCS 2011

Making connections: Modeling epidemiological networks in
mathematical modeling and HPC courses
Angela B. Shiflet* and George W. Shiflet
Wofford College, 429 N. Church St., Spartanburg SC 29303, USA

Abstract
Significant applications that demonstrate fundamental concepts and techniques are vital in computational science education. In
this paper, we discuss development of simulations involving social networks and individual-based epidemiology that are
appropriate for modeling and simulation, mathematical modeling, and high performance computing courses. Consideration of
the computational graph theory concepts in this context can empower students to develop similar models for other applications.
Moreover, execution of the model with massive amounts of data can illustrate and motivate the need for high performance
computing in computational science. The module, “Getting the 'Edge' on the Next Flu Pandemic: We Should'a 'Node' Better,”
which was developed by the authors as an Undergraduate Petascale Education Program (UPEP) Curriculum Module, used for
instruction in two course and evaluated by class participants, is available at http://computationalscience.org/upep/curriculum. The
module provides the biological background necessary to understand the application, the mathematical background needed to
develop models, example solutions in Mathematica to help with implementation, quick review questions with answers to provide
immediate feedback, and projects for further exploration.

Keywords: computational science; education; modeling; simulation; high performance computing; social networks; Blue Waters

1. Introduction
The Blue Waters Undergraduate Petascale Education Program [1] with National Science Foundation funding is
helping to prepare students and teachers to utilize high performance computing (HPC), particularly petascale
computing, in computational science and engineering (CSE). UPEP supports three initiatives:
• Professional Development Workshops for undergraduate faculty
• Research Experiences for undergraduates
• Materials Development by undergraduate faculty for undergraduates
The Materials Development initiative has the goal "to support undergraduate faculty in preparing a diverse
community of students for petascale computing."
For this program, the authors developed and class tested the computational science module, "Getting the 'Edge'
on the Next Flu Pandemic: We Should'a 'Node' Better," which is available on the UPEP Curriculum Modules site

* Corresponding author. Tel.: +01-864-597-4528; fax: +01-864-597-4549.
E-mail address: shifletab@wofford.edu.

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.207

1902

Angela B. Shiflet et al. / Procedia Computer Science 4 (2011) 1901–1906

[2]. The module provides the biological background necessary to understand the application, the mathematical
background needed to develop models, example solutions in Mathematica to help with implementation, quick
review questions with answers to provide immediate feedback, and projects for further exploration. This paper
describes and discusses the module and our experiences using the material in the courses High Performance
Computing and Mathematical Modeling courses at Wofford College [3] during the 2009-2010 academic year and in
support of Wofford's Emphasis in Computational Science.
Bachelor of Science students at Wofford may obtain an Emphasis in Computational Science (ECS) by taking
Calculus I, Introduction to Programming and Problem Solving (in Python), Data Structures (in Python and C++),
Modeling and Simulation, and Data and Visualization and completing a summer internship involving computation
in the sciences [4]. Meaningful applications that illustrate fundamental concepts and techniques, such as in the above
module, are crucial in their computational science education and are significant for the education of mathematics
and computer science majors as well.
2. Scientific Question
The module, "Getting the 'Edge' on the Next Flu Pandemic: We Should'a 'Node' Better," deals with social
networks and individual-based epidemiology simulations. Individual-based (or network-based) epidemiology
simulations that track the simulated behavior of individuals in a community are more specific and easier to verify
than cellular automaton simulations.
The module discusses the following important metrics for social networks:
• a minimum dominating set, or a smallest set of locations that a given proportion of the population visits. This
metric can be helpful in determining sites for fever sensors or in closing of particular public buildings during an
epidemic.
• the degree distribution, or the distribution of the number of contacts people have with other people. Such a
distribution can facilitate targeted vaccination of individuals who have many contacts [5].
• the clustering coefficient, or the probability that two contacts of a randomly chosen person have contact with one
another. This coefficient is an indication of how fast a disease can spread through a community [6].
• the mean shortest path length, or the average smallest number of contacts for a disease to spread from one
arbitrary individual to another. This metric also indicates the rapidity with which a disease can spread.
3. Computational Models
A solution of this scientific problem employs the data structure of a graph, or a set of nodes with undirected or
directed edges connecting some of the points. For a social network or a contact network, nodes represent people or
groups of people, such as members of a household that can become infected, and places, where the disease can
spread from an infected person to a susceptible individual. Each edge represents an association that can lead to
disease transmission. Thus, the module covers some of the fundamental concepts in graph theory, such as adjacent
nodes, degree, complete graph, and paths, as well as the necessary background in biology. Moreover, students
explore some of the characteristics of such social networks and of biological networks in general, such as the
following
• Social networks are scale-free, or most nodes have relatively low degree but a few nodes, called hubs, have high
degrees. Thus, such networks are particularly vulnerable to attack and failure [5].
• Biological networks exhibit the small world property, or the average length of a path between nodes is small in
comparison to the size of the graph. Therefore, these graphs are efficient communicators of information or
disease.
3.1. Modeling Scale-Free Networks
The focus of much work on the structural properties of biological networks has been on distribution of degrees.
The degree distribution is P(k) = nk/n, where n is the number of nodes in a network and nk is the number of nodes of
degree k, k = 0, 1, 2, …. For example, in the Figure 1 numbers in the nodes indicate the households, while School,
Hospital, Work, Shop, and Cloister are congregation places. Edges represent associations that can lead to

Angela B. Shiflet et al. / Procedia Computer Science 4 (2011) 1901–1906

1903

transmission of the disease. The graph indicates that at least one person from Household 7 goes to a shop, where
such an individual can contract or spread the disease. Thus, with n = 12, Node 7 has degree 1, so P(0) = P(1) = 1/12.
Nodes 1, 2, 3, 4, and 5 have degree 2, so P(2) = 5/12.

4

2
Work

School
6

1

5

Shop

e
Hospital
3

7

Cloister

Fig. 1. Contact network of households and places

Many biological networks, such as metabolic and protein interaction networks for various organisms, have
degree distributions that appear to follow power laws, P(k) = ck-r for 2 < r < 3 and some constant c. As the graph of
P(k) = k-2.5 in Figure 2 illustrates, a degree distribution following this power law implies that nodes with small
degree are extremely common, while nodes with large degree (hubs) are quite rare.

1
e2.5
100

80

60

40

20

0

0

1

Fig. 2. Graph of P(k) = k-2.5

2

3

4

5

k

1904

Angela B. Shiflet et al. / Procedia Computer Science 4 (2011) 1901–1906

Scale-free networks are ones that follow the power law P(k) ∝ k-r with r > 1. The World Wide Web and many
genetic, protein, and social networks are examples of scale-free networks. In a scale-free social network, a hub
location with numerous visitors each day is a prime site for the spread of disease.
3.2. Modeling Small World Property
The average length of a path between nodes of a biological network is small in comparison to the size of the
graph. The mean shortest path length of such a graph exhibiting the small world property is on the order of
magnitude less than or equal to log n, where n is the number of graph nodes. One of the projects in the module
considers an algorithm for calculating a network's mean path length. Such a metric can be useful to scientists and
policy makers in gauging how rapidly a disease might spread.
4. Algorithms
To implement the graph data structure, the module employs a vector to store nodal values, adjacency matrices to
represent edge connections and associate values, and connection matrices for existence of associations only. For
example, using data of people's activities we construct a people-location graph, or a connection matrix indicating
where each person goes during a day.
4.1. Algorithm to Estimate a Minimum Dominating Set
The module covers the FastGreedy Algorithm, which employs this people-location graph, to obtain an
approximation of a minimum dominating set, or a smallest set of locations that a given proportion of the population
visits. This set can be helpful to policy makers in determining sites for epidemic intervention, such as where to
place fever sensors or which facilities to close. The FastGreedy Algorithm first arranges the locations in nondecreasing order of degrees in the corresponding matrix. Then, we keep selecting locations from largest degree
down until a given population percentage has visited the set of selected locations [5]. The algorithm yields a good,
but not necessarily best, approximation. One project involves computation of a minimum dominating set, while
another considers situations in which the algorithm yields better results.
4.2. Algorithm for Degree Distribution
For the distribution of the number of contacts people have with other people (degree distribution), the module
first covers an algorithm for generating a connection matrix for a people-people graph associated with a social
network. Ignoring timing, for simplicity we assume two people are adjacent if they visited the same location in a
day. We define a function, degPersonPPG, to calculate the degree of a node in the person-person graph by
computing the number of ones in the corresponding row of the graph's connection matrix. The module then shows
how to generate the appropriate degree distribution using this function and the formula for P(k). P(k) and
demographic data can help policy makers make informed decisions about categories of people to vaccinate with
limited supplies or time.

Angela B. Shiflet et al. / Procedia Computer Science 4 (2011) 1901–1906

1905

4.3. Algorithm for Clustering Coefficient
To determine the clustering coefficient of a node (the probability that two nodes adjacent to the node are
themselves adjacent) with a given index in a connection matrix, we start by defining a function to return a list of
indices of its adjacent nodes. Another function returns the number of edges in a subgraph with a given collection of
vertex indices. To accomplish this task, we count the number of ones in the connection matrix with row and column
indices in this set. Because each edge is counted twice, we divide the result by two. With these functions and
degPersonPPG to return the degree of a node, we define a function, clusteringCoeff, to return the clustering
coefficient of a vertex. Then, using clusteringCoeff, we determine that the mean clustering coefficient, a metric
which can help policy makers and scientists predict how rapidly disease might spread.
5. Implementation
As an example, the module considers a synthetic data set (activities-portland-1-v1.dat) of 1,615,860 people and
8,922,359 activities for the population of Portland, Oregon, that the Network Dynamics and Science Simulation
Laboratory at Virginia Technical University generated from real data [6]. For calculations on a sequential machine,
we select 1000 people at random, using all their 5511 activities involving 3458 locations.
Execution of the FastGreedy algorithm yields a dominating set with 3455 locations to cover one hundred percent
of the people and a set with 594 locations for fifty percent of the population. The mean clustering coefficient for this
group of 1000 individuals is 0.118524 = 11.8524%, which is slightly more than that of people on the World Wide
Web, another social network [5]. A plot of the degree distribution in the data set's people-to-people graph with
fitted function f(k) = -0.0219242 + 0.259918k-1.2 supports that the network is scale-free (see Figure 3).
Pk
1.

0.75

Out[96]=

0.5

0.25

1

2

3

4

5

6

7

8

Degree k

Fig. 3. Degree distribution with fitted function f(k) = -0.0219242 + 0.259918k-1.2

The Mathematica files that accompany the module and implement the algorithms can process a subset of 1000
data items on a portable computer, but high performance computing (HPC) is necessary for the synthetic data set
involving 1,615,860 people and 8,922,359 activities and for more sophisticated computations, such as studying the
nature of epidemics and the impacts of policy decisions on controlling epidemics in urban environments. Thus, this
social networks application provides excellent motivation for the need of HPC in implementing involved models
with large datasets.

1906

Angela B. Shiflet et al. / Procedia Computer Science 4 (2011) 1901–1906

6. Class Testing
During the 2009-2010 academic year at Wofford College, the module was class tested in two classes,
Mathematical Modeling, which only considered the sequential implementations of the models, and High
Performance Computing.
6.1. Class Testing in Mathematical Modeling
The Mathematical Modeling course used the module for eight class periods and implemented projects with
Mathematica. Evaluating the experience, the professor wrote she "thought that the assignments (both the Quick
Review problems and the projects at the end of the module) were excellent;" and she "strongly agreed" that she
understood the science applications, mathematics, and algorithms in the module. Additionally, a student in the class
stated, "I liked the application of social network theory and graph theory to a disease modeling scenario."
6.2. Class Testing in High Performance Computing
The High Performance Computing class implemented some of the social networks algorithms using C and MPI
on Teragrid computers and used the module to study important graph theory applications and techniques in HPC.
One student evaluation reiterated, "If detailed enough information was provided and the data set was realistically
large, HPC would be invaluable in modeling social networks." Another wrote, "I liked being able to see the relation
to science in this module." A third student stated, "I particularly liked the use of a two-dimensional array as a
connection graph. We had not really used matrixes in such a way before." Another student, who had had a summer
internship at Oak Ridge National Laboratory, was delighted to relate the application to her own research involving
the electrical grid.
7. Conclusion
Because limited class sizes, we were not able to perform a statistical analysis of the evaluations for the module
"Getting the 'Edge' on the Next Flu Pandemic: We Should'a 'Node' Better." However, we are encouraged by the very
positive responses from students and professors and have found that social networks provide what participants think
are interesting computational science applications involving graph theory and high performance computing.
Moreover, incorporation of their suggestions has served to improve the module, which Blue Waters Undergraduate
Petascale Education Program (UPEP) funded. By facilitating HPC computational science module development,
internships, conference participation, teaching, and learning, UPEP is advancing education personally, locally,
nationally, and internationally.

References
1. National Computational Science Institute Undergraduate Petascale Education Program (UPEP), http://computationalscience.org/upep.
2. National Computational Science Institute Undergraduate Petascale Education Program (UPEP) Curriculum Modules, UPEP Curriculum
Modules site, http://computationalscience.org/upep/curriculum.
3. Wofford College, http://www.wofford.edu.
4. Computational Science, http://www.wofford.edu/ecs/.
5. S. Eubank, V.S. Anil Kumar, M. Marathe, A. Srinivasan and N. Wang, “Structural and Algorithmic Aspects of Large Social Networks.”
Proc. 15th ACM-SIAM Symposium on Discrete Algorithms (SODA) (2004) 711-720.
6. NDSSL (Network Dynamics and Simulation Science Laboratory, Virginia Polytechnic Institute and State University), "NDSSL ProtoEntities" http://ndssl.vbi.vt.edu/opendata/ (2009) Accessed 8/27/9.

