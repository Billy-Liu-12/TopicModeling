Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 958–966

International Conference on Computational Science, ICCS 2011

Algorithm for Time-dependent Shortest Safe Path on
Transportation Networks
Wu Jiganga,1 , Song Jinb , Haikun Jib , Thambipillai Srikanthanc
a School

of Computer Science and Software, Tianjin Polytechnic University, China
of Software and Microelectronics, Peking University, China
of Computer Engineering, Nanyang Technological University, Singapore

b School
c School

Abstract
The shortest path problem in network has been studied widely and intensively over years. Many speed-up techniques for Dijkstra’s algorithm have been developed. However, only few of those techniques work in time-dependent
networks. This paper studies how to answer the shortest safe path between a pair of nodes over a large time-dependent
transportation network, for typical applications, such as a heavy truck carrying inﬂammable materials, poison gas or
explosive cargo, and traveling in a city. In this type of applications, a path is safe if the danger factor on each edge
of the path is no more than a given upper bound. An eﬃcient algorithm is proposed for ﬁnding the shortest safe
path from source node to destination node when the starting time (departure time from the source) can be selected in
a user-given starting-time interval. The proposed algorithm can provide optimal solution and the best starting time
when a safe path exists in the given network. Also, it can ﬁnd an approximate solution when the safe path does not
exist. Moveover, our algorithm can handle both undirected and directed time-dependent network.
Keywords: Shortest path, time dependent, dynamic network, transportation system, algorithm.

1. Introduction
Shortest path problems have signiﬁcant practical implications in such areas as computer science, operations research and transportation engineering, etc. Classical shortest path problems with ﬁxed arc lengths have been studied
intensively, resulting in the development of a number of eﬃcient algorithms, e.g, [1, 2, 3, 4]. Due to the increasing interest in the advanced transportation systems, we need to obtain the information about the shortest path over a
large dynamic network in real-time, and thus the time-dependent shortest path (TDSP) problem has received a lot of
attention. Whereas, unlike the static case, there was no signiﬁcant advancement in solving the TDSP problem more
eﬃciently in a real-time traﬃc environment, during the past near 40 years. A challenging issue is to develop eﬃcient
and less computationally intensive algorithms for TDSP problem in dynamic networks.
In earlier work, besides Dijkstra’s algorithm (DA) [1] and Dreyfus’s algorithm [2], more related issues and the
variations of single-source TDSP problem have been intensively studied in the areas of transportation and networks
∗ Email

addresses: asjgwu@gmail.com
author

1 Corresponding

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.101

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

959

[5, 6, 7]. For example, Bellman-ford based algorithm [8] considers a general class of edge-weight functions from a
theoretical view, it can be used on graphs with negative edge weights, as long as the graph contains no negative cycle
reachable from the source node. A* algorithm is a generalization of DA that cuts down on the size of the subgraph
that must be explored, if additional information is available that provides a lower bound on the ‘distance’ to the target.
The extended A* algorithm [9] focuses on piecewise linear functions with the consideration of the cost to manipulate
such functions, it maintains a priority queue for all paths to be expanded.
In order to deal with a large network, divide-and-conquer strategy was introduced to partition the graph into small
fragments and materialize the shortest-paths between border nodes in diﬀerent fragments. Diﬀerent graph partitioning
methods for the TDSP problem were studied, such as disjoint edge-set partition [10, 11] and disjoint node-set partition
[12]. An eﬃcient hierarchical routing algorithm was proposed in [13], in which a given road network was organized
as a multiple-layer hierarchy, employing a heuristic layer-switching technique [14]. Recently, Bolin et. al [15] present
an algorithm, denoted as Tdsp08 in this paper, to ﬁnd a shortest path with a best departure time, it focuses on piecewise
linear functions regarding implementations and performance studies.
For some real applications, such as a heavy truck carrying inﬂammable materials, poison gas or explosive cargo,
and traveling in a city, it is more important to choose a safe path than a shortest path on a network with time-dependent
edge-length. This paper focuses on ﬁnding a path on a given transportation network, in which both arrival time and
travel safety are taken into account, in order to cater for the increasing interest in the advanced safe transportation
systems. In this paper we propose a novel algorithm to ﬁnd a shortest path from a source node to a destination node
under a given safety constraint. The proposed algorithm is able to ﬁnd optimal solution and the best starting time
when a safe path exists in the given network. Also, it can provide an approximate solution when the safe path does not
exist. Following the algorithm Tdsp08, our algorithm also can handle both undirected and directed time-dependent
network. Extensive experimental results on a real-world environments (road-map in the Maryland State in US, cited
from [15]) show that the proposed algorithm is able to ﬁnd the shortest safe path.
We start our work on the deﬁnition of TDSP problem with safety constraint in section II. Then we present our
algorithm after a short review for Tdsp08 in section III. We provide simulation results on real transportation network
utilized in [15] to show the performance of our algorithm in section IV. Finally, we conclude our work in section V.
2. Problem Description and Deﬁnition
A time-dependent graph GT = (V, E, W, D) is a graph that has an edge-delay function wi, j (t) and a danger-factor
function di, j (t), associated with the edge (vi , v j ). Here, V = {vi }, E = {(vi , v j )}, W = {wi, j (t)} and D = {di, j (t)}, for
1 ≤ i, j ≤ n. wi, j (t) and di, j (t) specify how much time and how much danger it takes to travel from the node vi to the
node v j , respectively, if one departs from vi at time t.
Deﬁnition 1: A path in GT is called a shortest path if the path is of the minimum travel time. TDSP problem is
deﬁned as ﬁnding the shortest path in GT .
Deﬁnition 2: Given a positive real number Ω, a path in GT is safe if di, j (t) ≤ Ω for each edge (vi , v j ) in the path.
In this paper, we concentrate on ﬁnding the shortest safe path (SSP) from source node v s to destination node
ve when the starting time t (departure time from the source), can be selected in a user-given starting-time interval
T = [t s , te ]. Such a query is called an SSP query, denoted as SSP(v s , ve , T, Ω).
Deﬁnition 3: An edge (vi , v j ) has First-In First-Out (FIFO) property, if and only if wi, j (t0 ) ≤ wi, j (t0 + tδ ) for tδ ≥ 0,
or t1 + wi, j (t1 ) ≤ t2 + wi, j (t2 ) for t1 ≤ t2 .
In other words, FIFO property of the edge (vi , v j ) implies that if departing earlier from vi , one arrives earlier at v j .
Time-dependent network GT is a FIFO graph, if and only if all edges have FIFO property. It has been shown that the
TDSP problem in FIFO networks is polynomially solvable [16], while it is NP-hard in non-FIFO networks [17]. This
concludes that ﬁnding the shortest safe path in FIFO networks is still polynomially solvable.
It is worthwhile to point out that the time-dependent network GT constructed from transportation network is an
FIFO network [15] if the waiting is not allowed. We henceforth assume that GT is a FIFO network.
In this paper, a path from v s to ve is denoted as v s -ve path. The travel time from v s to ve is denoted as v s -ve travel
time. We try to give an answer for the user-speciﬁed query SSP(v s , ve , T, Ω), that is to ask a shortest safe path from the
source node v s to the destination node ve on a time-dependent graph GT , with the best departure time to be selected
from a time interval T . If there is no safe path from v s to ve for the given Ω, we provide an unsafe but shortest path
for the query SSP.

960

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

3. Algorithms
We start by reviewing the algorithm Tdsp08, which is more related to the proposed approach in this paper. Tdsp08
focuses on ﬁnding optimal answers for the TDSP problem using a continuous-time approach. Initially, it computes the
earliest arrival-time function gi (t) for each node vi . Then it checks whether there exists a v s -ve path by calculating the
best starting time t∗ . After that, it generates a path P∗ corresponding to the arrival time ge (t∗ ) for the best starting time
t∗ . Finally, it returns the path P∗ together with the best starting time. Tdsp08 is able to deal with FIFO time-dependent
graphs, as well as the general time-dependent graphs, with arbitrary edge-delay functions. For more details, see [15].
3.1. Proposed Algorithm
We initially outline the proposed algorithm, named Tdssp in this paper. Then we explain a sub-algorithm named
Arrival-Time, that is to calculate the earliest arrival-time functions for Tdssp.
Let R be the set of the arrived edges with danger factor larger than the given upper bound Ω. The algorithm Tdssp
searches for the shortest safe path P∗ from v s to ve on the graph GT utilizing the set R and the earliest arrival-time
function gi (t) for all is, that are generated in the ﬁrst step by the sub-algorithm Arrival-Time (to be described later).
Then, it determines the predecessor of a node on P∗ utilizing the backward manner from ve to v s based on gi (t) and
the best starting t∗ . Tdssp works on the following three cases.
• Case 1: both safe path with relatively long travel-time and unsafe path with relatively short travel-time exist
concurrently. In this case it returns the safe path.
• Case 2: all v s -ve paths are safe. In this case it returns the shortest one.
• Case 3: no safe path exists for the given Ω. In this case It returns an unsafe but shortest path.
Input: a time-dependent graph GT , source v s , destination ve , and starting-time interval T = [t s , te ];
Output: a shortest safe path P∗ from v s to ve for starting time t∗ ;
Algorithm Tdssp(GT , v s , ve , T, Ω);
/* return(x) means outputting x and terminating the algorithm. */
begin
1 call Arrival-Time(GT , v s , ve , T, Ω) to generate gi (t)s and R;
2 if R is not empty then
2.1 Let T = {t1 , t2 , · · · tr }, that is the set of the inﬂection
points of ge (t);
2.2 Sort T in ascending order according to ge (ti ) − ti ,
where 1 ≤ i ≤ r;
2.3 for each ti ∈ T do
Generate a v s -ve path Pi with starting time ti ;
if all edges in Pi are safe then return Pi ;
end of if;
3 t∗ := argmint∈T {ge (t) − t}; /* select a shortest path */
4 Generate a v s -ve path P∗ with starting time t∗ ;
5 return P∗ ;
end.
In the ﬁrst case, let T be the set of the inﬂection points of ge (t) as described in step 2.1. We sort T in ascending
order according to the travel time calculated by ge (ti ) − ti in step 2.2. Then we select ti from T iteratively and calculate
the path Pi . If the path is safe, algorithm terminates in step 2.3.
In the second case, R is empty. The best starting time t∗ with the minimal v s -ve travel time satisﬁes that ge (t∗ )−t∗ =
min{ge (t) − t}. It can be identiﬁed according to the earliest arrival-time functions calculated by algorithm Tdssp in
t
step 3. We initialize v j to destination ve , and the optimal path P∗ is set to empty in step 4. Assume that there is

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

961

no waiting time at each edge and the predecessor of v j is vi . If there exists an edge (vi , v j ) in E, such that g j (t∗ ) =
gi (t∗ ) + wi, j (gi (t∗ )), i.e., the arrival time at v j , g j (t∗ ), is the arrival time at vi , gi (t∗ ), plus the edge delay from vi to v j ,
then we iteratively ﬁnd a predecessor vi of v j and add (vi , v j ) into the path P∗ till the path reaches the source node v s
(for more details, see Tdsp08 in [15]).
The third case corresponds to that, R is not empty and no safe path is returned in the step 2.3. In this case, similar
calculations are performed as in the second case. But, the algorithm returns an unsafe but shortest path calculated by
steps 3 and 4, as no safe path exists in this case.
Now we introduce how to calculate the earliest arrival-time function gi (t) for the node vi . We propose the algorithm
Arrival-Time for time reﬁnement on FIFO graphs. It consists of two sections: reﬁnement for starting-time interval
and reﬁnement for arrival-time function. The former reﬁnes the starting-time subinterval Ii = [t s , τi ] for each node
vi ∈ GT and the latter reﬁnes gi (t), i.e., gi (t) speciﬁes the earliest v s -vi arrival time for any starting time t in subinterval
[t s , τi ]. It is highlighted that the algorithm Arrival-Time can handle the time-dependent edge-delay graph by reﬁning
the arrival time for each node with the increase of the time interval.
From the formal description, it takes ﬁve parameters as the input: time-dependent graph GT with danger factors,
source node v s , destination node ve , starting time interval T = [t s , te ], and the given upper bound Ω of danger factors
for the shortest safe path.
Input: a time-dependent graph GT , a query S S P(v s , ve , T ) with source v s and destination ve , and starting-time interval
T = [t s , te ]; danger factor function set {di, j (t)} on edge (vi , v j ), and a given upper bound Ω of the danger factor for the
shortest path.
Output: {gi (t)|vi ∈ V} – all earliest arrival-time functions.
Algorithm Arrival-Time(GT , v s , ve , T, Ω)
/*D = {di, j (t)}*/
begin
1 g s (t) := t; τ s := t s ; /* for t ∈ T */
2 for each vi v s do gi (t) := ∞ for t ∈ T , and τi := t s ;
3 Let Q be a priority queue initially containing pairs (τi , gi (t)) for all nodes vi ∈ V, ordered by gi (τi ) in ascending
order;
4 while |Q| ≥ 2 do
4.1 (τi , gi (t)) := dequeue(Q) and (τk , gk (t)) := head(Q);
4.2 Δ := min{w f,i (gk (τk ))|(v f , vi ) ∈ E};
4.3 τi := max{t|gi (t) ≤ gk (τk ) + Δ};
4.4 for each (vi , v j ) ∈ E do
if di, j (τi ) ≤ Ω then begin
g j (t) := gi (t) + wi, j (gi (t)) for t ∈ [τi , τi ];
g j (t) := min{gi (t), gi (t)} for t ∈ [τi , τi ];
update(Q, (τ j , g j (t)));
end of if and for;
4.5 if di, j (τi ) > Ω for all (vi , v j ) then /*i is ﬁxed now*/
begin
Let di, j∗ be min{di, j (gi (τi ))};
j

g j∗ (t) := gi (t) + wi, j∗ (gi (t)) for t ∈ [τi , τi ];
g j∗ (t) := min{g j∗ (t), g j∗ (t)} for t ∈ [τi , τi ];
update(Q, (τ j∗ , g j∗ (t)));
add (vi , v j ), gi (τi ) into R;
end of if;
4.6 τi := τi ;
4.7 if τi ≥ te then
if vi = ve then return {gi (t)|vi ∈ V};
else enqueue(Q, (τi , gi (t)));

962

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

end of while;
5 return {gi (t)|vi ∈ V};
end.
Firstly, g s (t) and τ s are initialized for source node v s : g s (t) := t and τ s := t s (see step 1). This is corresponding to
a trivial case: departing from the source node v s to itself at any time t0 , resulting in the travel time of value g s (t0 ) − t0 ,
i.e., 0. For all other nodes, the earliest arrival-time function gi (t) is initialized as gi (t) := ∞, which implies that these
nodes are undetermined yet, and τi is initialized as τi := t s for each i (see step 2).
In step 3, Q is a priority queue containing pairs (τi , gi (t)) for each node vi ∈ GT , and these pairs are in the
ascending order according to gi (τi ). Initially, the top pair in Q is (τ s , g s (t)) (see step 3). The while loop in step 4
conducts time-reﬁnement consisting of the reﬁnement of starting-time interval (steps 4.1-4.3 and step 4.6) and the
reﬁnement of arrival-time function (steps 4.4 and 4.5). In each iteration, the earliest arrival-time function gi (t) is
ensured to be well-reﬁned in the starting-time subinterval Ii = [t s , τi ] for the node vi . The algorithm terminates in two
cases. The ﬁrst one is that Q contains no more than one pair (see step 5), and the other is that the arrival-time function
ge (t) of the destination node is well-reﬁned in the entire interval T (see step 4.7).
On the reﬁnement of starting-time interval, the algorithm dequeues the top pair, denoted as (τi , gi (t)), in Q in each
iteration (see step 4.1). Then the current top pair, namely (τk , gk (t)), is regarded as the basis of the reﬁnement of
starting time interval. Note that the operation head(Q) retrieves the current top pair but does not dequeue it from Q.
Due to the order of pairs in Q, we obtain that gi (τi ) is the earliest arrival time and gk (τk ) is the second earliest arrival
time from source node v s .
According to the property of FIFO graph GT , it is impossible to arrive at the node v f (except vi ) before gk (τk ) if we
start from v s at time taken in [τ f , te ] . Now, we ﬁx the node vi and consider an edge (v f , vi ) ∈ E at time gk (τk ). Assume
that the arrival time to the node v f is gk (τk ). Thus, the minimum travel time from v f to vi is Δ, that is calculated by
min{w f,i (gk (τk ))|(v f , vi ) ∈ E} (see step 4.2). Therefore, the next earliest arrival time from v s to vi via any edge (v f , vi )
is gk (τk ) + Δ, if starting time t is not less than τ f .
Suppose t is the latest starting time which satisﬁes gi (t) ≤ gk (τk ) + Δ, then we set it to τi (see step 4.3). From
gi (t) ≤ gk (τk ) + Δ for t ∈ [τi , τi ], we conclude that the function gi (t) is well-reﬁned in [t s , τi ]. gi (t) is the earliest arrival
time from v s to vi for starting time t ∈ [t s , τi ]. Therefore, gi (t) is well-reﬁned in Ii = [t s , τi ], where Ii ⊂ Ii . In the end,
we set τi and Ii to τi and Ii (see step 4.6), respectively, to reﬁne the starting time interval.
Now we describe the reﬁnement of the arrival-time function. Noting that gi (t) is well-reﬁned in the enlarged
subinterval, we can reﬁne g j (t) for all v j , where (vi , v j ) ∈ E, in starting-time subinterval [τi , τi ] (see step 4.4). It is
noteworthy that we only need to reﬁne g j (t) on [τi , τi ], because g j (t) has been already reﬁned on [t s , τi ]. And then we
update Q with the latest reﬁned g j (t).
If the danger factor of edge (vi , v j ) at time τi , di, j (τi ), is larger than the given danger boundary Ω for all (vi , v j ) ∈ E,
our algorithm then selects an edge (vi , v j∗ ), with the minimal danger factor at time gi (τi ) to calculate the function g j∗ (t).
Firstly, it computes the arrival time g j∗ (t) at v j∗ via edge (vi , v j∗ ) for starting time t ∈ [τi , τi ] . Then, it updates g j∗ (t) to
min{g j∗ (t), g j∗ (t)} in the interval [τi , τi ] (see step 4.5 ). After that, it updates the priority queue Q, and records the time
gi (τi ) and the selected edge (vi , v j∗ ) by inserting them into R.
3.2. A Running Example
We now provide an example, as shown in Figure 1, to help understanding our proposed algorithm. In this example,
the subgraph (a) is the given time-dependent graph. The subﬁgures (b), (c), (d), (e) and (f) are the given edge-delay
functions. As mentioned before, the danger factor on each edge varies with time. The subﬁgures (g), (h), (i), (j) and
(k) are the customized edge-danger functions.
The subﬁgures (l), (m), (n), (o), (p), (q) show the running results on three cases for query SSP(v0 , v3 , [0, 60], Ω).
The ﬁrst case is for Ω with value 0.05, shown in the subﬁgures (l) and (m). The second case is for Ω with value 0.15,
shown in the subﬁgures (n) and (o). And the third case is for Ω with value 0.95, shown in the subﬁgures (p) and (q).
Fig. 1(l) shows the calculated earliest arrival time function g3 (t) for the destination node v3 , and Fig. 1(m) shows
the corresponding travel-time function, i.e., g3 (t) − t. Note that no waiting time is required on the selected path P∗ .
We obtain the best starting time t∗ of value 15 from g3 (t∗ ) − t∗ = 35, that is the minimum travel time on the path P∗ .
The proposed algorithm Tdssp is able to select the shortest path: P∗ = (v0 , v2 )(v2 , v3 ), in this example, although this

963

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

ǀϯ

ǀϬ

ĚĞƐƚŝŶĂƚŝŽŶ

30
20
10
0
0

ǀϮ

40

60

20

40

60

20
10
20

0.6
0.4
0.2

60

20

40

1

1
0.8

20

40

60

0.6
0.4
0.2
0
0

20

Time

40

20
40
Departure Time

20
0
0

60

(l) g3 (t), Ω = 0.05

Arrival Time

travel Time

20

20

20
40
Departure Time

60

(k) d2,3 (t)
60

40
20
0
0

60

20
40
Departure Time

60

(n) g3 (t), Ω = 0.15

40
20
0
0

20
40
Departure Time

60

(o) g3 (t) − t, Ω = 0.15

60
travel Time

60
40
20
0
0

40
Time

(m) g3 (t) − t, Ω = 0.05

Arrival Time

0
0

60

40

60

0.2

(j) d1,3 (t)

60

40

60

40

0.4

Time

(i) d1,2 (t)
60

20

0.6

travel Time

0
0

0
0

60

(h) d0,2 (t)

0.8

0.2

0.2

(g) d0,1 (t)

1

0.4

0.4

Time

0.8
0.6

60

0.6

Time

(f) w2,3 (t)

Edge Danger

Edge Danger

40

1
0.8

0
0

40

(d) w1,2 (t)

1

Time

(e) w1,3 (t)

20
Time

0.8

Edge Danger

20

10

(c) w0,2 (t)

30

0
0

20

0
0

60

Edge Danger

10

40

30

Time

Edge Danger

Edge Delay

20

Time

Arrival Time

10
0
0

40

30

0
0

20

(b) w0,1 (t)

40
Edge Delay

20

40

30

Time

(a) GT

0
0

40
Edge Delay

ƐŽƵƌĐĞ

Edge Delay

40

Edge Delay

ǀϭ

20
40
Departure Time

(p) g3 (t), Ω = 0.95

60

40
20
0
0

20
40
Departure Time

60

(q) g3 (t) − t, Ω = 0.95

Figure 1: Running example on a time-dependent graph with 4 nodes and 5 edges.

path does not satisfy the limit of the given upper bound Ω. This is because there is no path on which all edges satisfy
the limit of Ω.
Unlike the ﬁrst case, the proposed algorithm can generate the shortest path that satisﬁes the limit of the given
upper bound Ω in the cases 2 and 3. g3 (t∗ ) − t∗ = 35, resulting in t∗ = 15 and P∗ = (v0 , v2 )(v2 , v3 ) for the second case
with Ω of value 0.15. Also, g3 (t∗ ) − t∗ = 30, resulting in t∗ = 20 and P∗ = (v0 , v1 )(v1 , v2 )(v2 , v3) for the third case with
Ω of value 0.95.
Without loss of generality, we now utilize the second case to describe the running process of our algorithm.
Initially, g0 (t) = t (see Fig. 2(a)). It implies departing from v0 at time t0 , then arriving at v0 at the same time t0 . In

964

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

40
20
0
0

20
40
Departure Time

(a) g0 (t)

60

60
Arrival Time

60
Arrival Time

Arrival Time

60

40
20
0
0

20
40
Departure Time

(b) g2 (t)

60

40
20
0
0

20
40
Departure Time

60

(c) g3 (t)

Figure 2: Calculating process for gi (t) on the case that Ω = 0.15.

this case, the travel time is g0 (t0 ) − t0 , i.e., 0, for any t0 ∈ T . The starting-time subinterval I0 for v0 is [0, τ0 ], where
τ0 = 0. For the node vi , i 0, we obtain that gi (t) = ∞ and Ii = [0, τi ], where τi = 0. It implies that gi (t) has not been
reﬁned yet.
In the ﬁrst iteration, the top pair (τ0 , g0 (τ0 )) dequeued from the priority queue Q is (0, 0). In other words, g0 (t)
speciﬁes the earliest arrival time in the starting time subinterval [0, τ0 ], that is [0, 0]. It picks (τ1 , g1 (t)) and assigns
it to (τk , gk (t)), where τ1 = 0 and g(τ1 ) = ∞. Then, the starting-time subinterval for v0 is updated to [0, 60]. In this
iteration, the algorithm updates the arrival-time functions for nodes v2 based on v0 , because there is no outgoing edge
from v0 with danger factor satisfying the bound Ω at time g0 (τ0 ) and the danger factor of (v0 , v2 ) is smaller at that
time. The resultant arrival-time functions g2 (t) for v2 is shown in the ﬁgure 2(b).
In the second iteration, the top pair (τ2 , g2 (τ2 )) dequeued from the priority queue Q is (0, 5). It picks (τ1 , g1 (t))
and assigns it to (τk , gk (t)), where τ1 = 0 and g(τ1 ) = ∞. Because the starting-time subinterval for v2 is [0, ∞), v2
can be removed from the queue Q. In this iteration, it updates the arrival-time functions for node v3 based on v2 . The
resultant arrival-time functions g3 (t) for v3 is shown in the ﬁgure 2(c).
Similarly, in the third iteration, the top pair (τ3 , g3 (τ3 )) dequeued from the priority queue Q is (0, 41.25). It picks
(τ1 , g1 (t)) and assigns it to (τk , gk (t)), where τ1 = 0 and g(τ1 ) = ∞. Because v3 is the destination node and the updated
τ3 is larger than the time window bound 60, the algorithm Arrival-Time terminates.
4. Experimental Results
We now conducted extensive experimental studies to compare our algorithm Tdssp with Tdsp08, the most eﬃcient discrete-time algorithm [15]. The two algorithm are implemented using C++, on a 3.0GHz CPU/1G memory
PC running XP. We test the two algorithm on a real data set with 16326 nodes and 26528 edges, representing the
road-map in the Maryland State in US. As described in [15], the data set is extracted from the US Census Bureau
2005 TIGER/Line4. The nodes represent the starts, ends, and intersections of roads, while the edges represent road
segments. Following the experimental setup in [15], we also represent the real database as a directed time dependent
graph GT . We generate subgraphs that are corresponding to a subarea of GT for our experiments.
The continuous piecewise-linear danger-factor functions {di, j (t)} are generated randomly in the following manner.
¯ the range of the danger factor (denoted
We set four parameters: the average value of the danger factors (denoted as d),
ˆ the length of the domain (denoted as LT ), and the number of the segments NT . In the domain T = [0, LT ], T is
as d),
randomly divided into NT sub-intervals. In each sub-interval, di, j (t) is set to a linear function. The value of di, j (t) at the
¯ d,
ˆ d+
¯ d]
ˆ uniformly, where d¯ is the average value
start/end of each subinterval is randomly generated as a number in [d−
of danger factor on the edge. The continuous piecewise-linear edge-delay functions {wi, j (t)} are generated randomly
in the same manner as in [15].
Note that, Tdssp generates the same solution as Tdsp08 when Ω = 1.0.
We collect data on a sub-graph of the road-map. The running time and memory dissipation of the algorithms are
shown in ﬁgures 3 and 4, respectively, for diﬀerent upper bounds of danger factor that vary from 0.15 to 1.00.
In ﬁgure 3, the running time of Tdsp08 is 2.06 seconds, as Tdsp08 is independent of the danger factor. The
algorithm Tdssp, however, is not. Tdssp is superior for the case of the danger factor less than 0.5. For example, the
running time of Tdssp is about 3 seconds for Ω = 0.25, that is very close to the running time of Tdsp08. The running
time gradually increases to 20 seconds when Ω increases to 0.5. From that, Tdssp becomes relatively slow with the

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

965

200
TDSSP
TDSP08

180
160

runtime(s)

140
120
100
80
60
40
20
0
0.1

0.2

0.3

0.4
0.5
0.6
0.7
danger factor upper bounds

0.8

0.9

1

Figure 3: Running time of algorithms Tdssp and Tdsp08 for diﬀerent danger factors, on a graph with 33 nodes and 100 edges.

Table 1: Tdssp runtime (s) for instances with diﬀerent upper bounds of danger factor and diﬀerent distance between source node and destination
node, on a graph with 33 nodes and 100 edges.
distance

Ω = 0.2

Ω = 0.5

Ω = 0.8

4

1.9

8.8

41.9

Ω = 1.0
79.7

8

2.0

13.9

60.8

109.8

12

2.3

19.6

89.6

176.8

16

6.8

27.8

146.9

218.9

20

10.2

37.9

188.9

274.6

24

14.8

42.8

246.1

300.9

increasing boundary of danger factor. This is because, there are more edges becoming safe in the graph, with the
increasing of the boundary of danger factor. In this case, the algorithm Tdssp has to take more processing time to
calculate the earliest arrival time functions for all nodes to select the shortest safe path.
On the other hand, the running time of Tdssp increases with the increasing distance between the source node and
the destination node. It is not diﬃcult to understand that, the far between the source node and the destination node,
the more calculations are required. But this increase in running time is valuable as we can ﬁnd a path that is both
shortest and safe. In addition, these increase in running time is acceptable for relatively smaller distance values and
smaller upper bounds of danger factor, in comparison to the running time of Tdsp08 shown in ﬁgure 3, that is about 2
seconds.
We also collect the memory dissipations for both algorithms on the graph with diﬀerent sizes, for diﬀerent upper
bounds of the danger factor. Figure 4 shows the simulation results on a relatively large sub-graph, that consists of 205
nodes and 1000 edges. From ﬁgure 4, we conclude that the corresponding memory dissipation has the similar changes
as the running time. We conﬁrm that similar results are also true for other subgraphs with diﬀerent sizes, according to
our extra experimental results.
5. Conclusions
We have proposed an algorithm to search for the shortest safe path on the network with time-dependent edgelength and time-dependent danger factor. The proposed algorithm successfully extends the latest work in [15] for the
safety sensitive applications on larger transportation network. Simulation results on real-world graph of Maryland
State in US show that, the running time and memory dissipation are acceptable on relatively small network, and also

966

Wu Jigang et al. / Procedia Computer Science 4 (2011) 958–966

5

4

x 10

memory
3.5

memory used

3
2.5
2
1.5
1
0.5
0
0.1

0.2

0.3

0.4
0.5
0.6
0.7
danger factor upper bounds

0.8

0.9

1

Figure 4: Memory dissipations of Tdssp for diﬀerent danger factors, on a sub-graph with 205 nodes and 1000 edges.

on enquiry of safe path between a pair of nodes with relatively short distance. Investigation to reﬁne the proposed
algorithm on real applications is in the future work.
Acknowledgement The main part of this paper was performed in Center for High Performance Embedded
Systems, Nanyang Technological University, Singapore. This work was supported by the National Science Foundation
of China under Grant No. 60970016.
References
[1] E. Dijkstra. A note two problems in connection with graphs. Numerical Math., 1959, vol. 1, pp. 269-271
[2] S. E. Dreyfus. An appraisal of some shortest-path algorithms. Operations Research, 1969, 17(3), pp. 395-412
[3] R. K. Ahuja, K. Mehlhorn, J. B. Orlin, and R. E. Tarjan, Faster algorithms for the shortest path problem, Journal of the ACM, 1990, 37(2), pp.
213-223.
[4] M. Thorup, Undirected single-source shortest paths with positive integer weights in linear time, Journal of the ACM, 1999, 46(3), pp. 362-394.
[5] P. Narv¢ez, K.-Y. Siu, and H.-Y. Tzeng, New dynamic algorithms for shortest path tree computation, IEEE/ACM Trans. Netw., 2000, 8(6), pp.
734-746.
[6] P. Narv¢ez, K.-Y. Siu, and H.-Y. Tzeng, New dynamic SPT algorithm based on a ball-and-string model, IEEE/ACM Trans. Netw., 2001, 9(6),
pp. 706-718.
[7] K. Sung, M. G. Bell, M. Seong, and S. Park, Shortest paths in a network with time-dependent ﬂow speeds, European Journal of Operational
Research, 2000, 121(12), pp. 32-39.
[8] A. Orda and R. Rom, Shortest-path and minimum-delay algorithms in networks with time-dependent edge-length, Journal of the ACM, 1990,
37(3), pp. 607-625.
[9] E. Kanoulas, Y. Du, T. Xia, and D. Zhang, Finding fastest paths on a road network with speed patterns. In Proc. of the 22nd International
Conference on Data Engineering, 2006, pp. 10-19.
[10] N. Jing, Y.-W. Huang, and E. A. Rundensteiner, Hierarchical optimization of optimal path ﬁnding for transportation applications, In Proc. Of
ACM Conference on Information and Knowledge Management, 1996, pp. 261-268.
[11] N. Jing, Y.-W. Huang, and E. A. Rundensteiner, Hierarchical encoded path views for path query processing: An optimal model and its
performance evaluation, IEEE Trans. Knowl. Data Eng., 1998, 10(3), pp. 409-432.
[12] S. Jung and S. Pramanik, Hiti graph model of topographical roadmaps in navigation systems, In Proc. of the 12th International Conference
on Data Engineering 1996, pp. 76-84.
[13] G. R. Jagadeesh, T. Srikanthan, Route Computation in Large Road Networks: A Hierarchical Approach, IET Intelligent Transport Systems,
2008, 2(3), pp.219-227.
[14] G. R. Jagadeesh, T. Srikanthan and K. H. Quek, Heuristic techniques for accelerating hierarchical routing on road networks, IEEE Transactions on Intelligent Transportation Systems,2002, 3(4), pp. 301-309.
[15] D. Bolin and Y. J. Xu and Q. Lu, Finding time-dependent shortest paths over large graphs, in Proceedings of the 11th international conference
on Extending database technology, France, March 2008, pp. 205-216.
[16] D. E. Kaufman, R. L. Smith, Fastest Paths in Time-Dependent Networks for Intelligent Vehicle-Highway Systems Application, Journal of
Intelligent Transportation Systems, 1993, 1(1), pp. 1-11.
[17] A. Orda, R. Rom, Shortest-Path and Minimum Delay Algorithms in Networks with Time-Dependent Edge-Length, Journal of the ACM,
1990, 37(3), pp. 607-625.

