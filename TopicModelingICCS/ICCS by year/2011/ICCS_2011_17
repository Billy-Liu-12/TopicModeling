Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 2236–2245

International Conference on Computational Science, ICCS 2011

Parallel estimation of the cost function for the ﬂexible
scheduling problem✩
Wojciech Bo˙zejkoa , Mariusz Uchro´nskia , Mieczysław Wodeckib,1,∗
a Institute of Computer Engineering, Control and Robotics
Wrocław University of Technology, Janiszewskiego 11-17, 50-372 Wrocław, Poland
b Institute of Computer Science
University of Wrocław
Joliot-Curie 15, 50-383 Wrocław, Poland

Abstract
The aim of this paper is to show how to determine the neighborhood of the complex discrete optimization problem
and how to search it in the parallel environment, this being illustrated by an example of the hybrid scheduling, more
precisely a ﬂexible job shop problem. We present a parallel single-walk approach in this respect. A theoretical analysis
based on PRAM model of parallel computing has been made. We propose a cost-optimal method of neighborhood
generation parallelization.
Keywords: parallel algorithm, scheduling, ﬂexible job shop, metaheuristics

1. Introduction
Flexible job shop problems constitute a generalization (hybridization) of the classic job shop problem. In this
section, we discuss a ﬂexible job shop problem in which operations have to be executed on one machine from a set
of dedicated machines. Then, as a job shop problem it also belongs to the strongly NP-hard class. Although exact
algorithms based on a disjunctive graph representation of the solution have been developed (see Pinedo [12]), they are
not eﬀective for instances with more than 20 jobs and 10 machines.
Many approximate algorithms, chieﬂy metaheuristic, have been proposed. Nowicki and Smutnicki [10] proposed
a tabu search approach using block properties for the special case of the problem considered (ﬂow shop problem with
parallel machines). Hurink [8] developed the tabu search method for this problem. Also Dauz`ere-P´er`es and Pauli [5]
used the tabu search approach extending the disjunctive graph representation for the classic job shop problem taking
into consideration the assignment of operations to machines. Mastrolilli and Gambardella [9] proposed a tabu search
procedure with eﬀective neighborhood functions for the ﬂexible job shop problem.
✩ The
∗

work was supported by MNiSW Poland, within the grant No. N N514 232237.

Email address: mwd@ii.uni.wroc.pl (Mieczysław Wodecki)
author

1 Corresponding

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.244

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

2237

Many authors have proposed a method of assigning operations to machines and then determining sequence of
operations on each machine. This approach was followed by Brandimarte [4] and Pauli [11]. These authors solved
the assignment problem (i.e., using dispatching rules) and next applied metaheuristics to solve the job shop problem.
Genetic approaches have been adopted to solve the ﬂexible job shop problem, too. Recent works are those of Ho
and Tay [7] and Bo˙zejko et al. [3]. Gao et al. [6] proposed the hybrid genetic and variable neighborhood descent
algorithm for this problem.
This paper constitutes a continuation of researches presented in the paper Bo˙zejko et al. [2].
2. Problem formulation
The ﬂexible job shop problem (FJSP), also called the general job shop problem with parallel machines, can be
formulated as follows. Let J = {1, 2, . . . , n} be a set of jobs which have to be executed on machines from the set
M = {1, 2, . . . , m}. There exists a partition of the set of machines into types, i.e., subsets of machines with the
same functional properties. A job constitutes a sequence of some operations. Each operation has to be executed on
a dedicated type of machine (from the nest) within a ﬁxed time. The problem consists in the allocation of jobs to
machines of dedicated type and in determining the schedule of jobs execution on each machine to minimize the total
jobs ﬁnishing time. The following constraints have to be fulﬁlled:
(i)
(ii)
(iii)
(iv)

each job has to be executed on only one machine of a determined type at a time,
machines cannot execute more than one job at a time,
there are no idle times (i.e., the job execution must not be broken),
the technological order has to be obeyed.

Each operation is assigned to one nest only. It is necessary to make a partition of operations assigned to machines
in each nest. The method of partitioning has an inﬂuence on all jobs completion time, that is the value of the job shop
problem solution. Generally, we are looking for such a partition whose cost function value (of the corresponding job
shop problem) is minimal.
Let Θ = (Q, π(Q)) ∈ Φ◦ be a feasible solution of FJSP where Q = (Q1 , Q2 , . . . , Qm ) is the machine workload, i is
the number of operations executed on machine Mi (i.e., i = |Qi |) and
π(Q) = (π1 (Q), π2 (Q), . . . , πm (Q))

(1)

is a concatenation of m permutations. A permutation πi (Q) determines a sequence of operations from the set Qi which
have to be processed on machine Mi (i = 1, 2, . . . , m).
In the further part of this section, in the case in which it does not evoke ambiguity, we omit the assignment of
operations Q which occurs as a permutation parameter. Thus, the concatenation π(Q) = (π1 (Q), π2 (Q), . . . , πm (Q))
will be presented as π = (π1 , π2 , . . . , πm ).
By tij (k, l) we denote a transfer type move (a t-move, for short) which consists in moving an operation from the
position k in the permutation πi (i.e., the operation πi (k)) to the position l in the permutation π j (moving operations
from positions l, l + 1, . . . one position to the right). The execution of the move tij (k, l) generates from Θ = (Q, π) ∈ Φ◦
(by Φ◦ we denote a set of feasible solutions of the FJSP, see Bo˙zejko et al. [2]), a new solution Θ = (Q , π ) such that
πv = πv ,

v

i, j, v = 1, 2, . . . , m

(2)

πi = (πi (1), πi (2), . . . , πi (k − 1), πi (k + 1), . . . , πi ( i − 1),
π j = (π j (1), π j (2), . . . , π j (l − 1), πi (k), π j (l), . . . , π j (

j

+ 1).

(3)
(4)

The execution of this move causes a movement of the operation πi (k) from the set Qi (i.e., from machine Mi ) to the
set Q j (i.e., to machine M j ). Therefore
Q v = Qv ,

v

i, j, v = 1, 2, . . . , m and Q i = Qi \ {πi (k)}, Q j = Q j ∪ {πi (k)}.

The graph G(Θ ) generated by a t-move can have a cycle and then the solution Θ = (Q , π ) is not feasible.

(5)

2238

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

Remark 1. An upper bound of the number of t-moves is O(qm2 o2 ).
The execution of t-move causes an operation to transfer from one machine to another, i.e., a new machine workload
in the nest. Therefore, it is possible to obtain any machine workload from any solution (machine workload) by
executing t-moves. If τ is a t-move, we denote by τ(Θ) a solution generated from Θ by executing a move τ (see
(2)–(5)). For a ﬁxed feasible solution Θ, let T (Θ) be a set of all t-moves. A neighborhood Θ is a set
N(Θ) = {τ(Θ) ∈ Φ◦ : τ ∈ T },

(6)

where Φ◦ is a set of feasible solutions. The feasibility τ(Θ) corresponds to the acyclicity of the graph G(τ(Θ)).
It was mentioned at the beginning of this section that the solution of the FJSP consists of two steps. The ﬁrst,
determination of machine workload and the second, determination of processing order of operations, i.e., a job shop
problem solving. Let Θ = (Q, π) be a feasible solution of the FJSP. The new machine workload Q will be generated
from the workload Q as follows:
• determine a neighborhood N(Θ),
• select from the neighborhood a solution Θ = (Q , π ) with the lowest goal function value – the new machine
workload Q .
The number of all t-moves can be huge, so we omit some of them and consider only those which can oﬀer an
improvement of the goal function value. Moreover, we do not determine an exact goal function value of solutions
generated by t-moves, but approximate them only. As computational experiments proved, this causes a signiﬁcant
algorithm work acceleration with little results aggravation. In the further part, we precisely describe methods of
eliminating superﬂuous moves from the neighborhood (6) as well as methods of estimating a goal function value.
Neighborhood determination. Execution of a t-move can lead to a non-feasible solution, i.e., a graph connected
with this solution can have a cycle. Therefore, checking feasibility equals checking if a graph has a cycle. The
corresponding algorithm has a computational complexity O(o) where o is the number of all operations. Further on
we prove theorems which make it possible to check feasibility of solutions (i.e., acyclicity of corresponding graphs)
generated by t-moves in constant time.
Let Θ = (Q, π) be a feasible solution where Q = (Q1 , Q2 , . . . , Qm ) is the machine workload and π = (π1 , π2 , . . . , πm )
is a concatenation of m permutations. A permutation πi determines a processing order of operations from the set Qi
on the machine Mi (i = 1, 2, . . . , m).
We consider two machines Mi and M j from the same nest. A permutation πi determines a processing order of
operations from the set Qi on the machine Mi and π j – a processing order of operations from the set Q j on the machine
M j . For an operation πi (k) ∈ Qi we deﬁne two parameters connected with paths in the graph G(Θ).
The ﬁrst parameter is
⎧
⎪
1, if there is no path C(π j (v), πi (k)) ∀ v = 1, 2, . . . , j ,
⎪
⎪
⎨
(7)
η j (k) =⎪
⎪
⎪
⎩1 + max {there is a path C(π j (v), πi (k))}, otherwise.
1≤v≤

j

Thus, there does not exist any path to the operation (vertex) πi (k) from any of the operations placed in the permutation
π j in positions η j (k), η j (k) + 1, . . . , j (where j = |Q j |) in the graph G(Θ).
The second parameter is
⎧
⎪
1 + j , if there is no path C(π j (v), πi (k)) ∀ v = 1, 2, . . . , j ,
⎪
⎪
⎨
(8)
ρ j (k) =⎪
⎪
⎪
⎩1 + min {there is a path C(πi (k), π j (v))}, otherwise.
η j (k)≤v≤

j

From the deﬁnition formulated above it follows that in the graph there is no path from a vertex πi (k) to any operation
placed in positions η j (k), η j (k)+1, . . . , ρ j (k) in the permutation π j . Now we prove two theorems characterizing a t-move
whose execution generates an unfeasible solution. These theorems constitute a constructional base for very eﬃcient
neighborhoods. The structure of assumptions allows an easy implementation in the parallel computing environment,
such as GPUs.

2239

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

Now we show a theorem which constitutes a base for eliminating some t-moves during the process of neighborhood generation. Let us assume that for an assignment Q the concatenation π is the optimal operations schedule on
machines, G(Θ) is a graph connected with solution Θ = (Q, π) and Cmax (Θ) is a cost function value, i.e., the critical
path length in the graph G(Θ).
Theorem 1 ([1]). Let Θ = (Q, π) be a feasible solution for the FJSP and let B = (B1 , B2 , . . . , Br ) be a sequence of
critical path blocks in the graph G(Θ). If Θ = (Q , π ) is a feasible solution which was generated from Θ by machine
workload changing in a nest and Cmax (Θ ) < Cmax (Θ) therefore in the Θ at least one operation from some block was
moved to a diﬀerent machine (in the same nest).
Let Θ be a feasible solution, B – a sequence of critical path blocks in the graph G(Θ) and T – a set of t-moves
deﬁned for the Θ. We denote by T out (Θ) a set of those moves from T (Θ) which consider operations not belonging
to any block. Directly from Theorem 1 there follows a property which constitutes a base for eliminating superﬂuous
moves.
Property 1. If a feasible solution Θ is generated from Θ by executing a t-move belonging to the set T out (Θ) then
Cmax (Θ ) ≥ Cmax (Θ).

(9)

If B = (B1 , B2 , . . . , Br ) is a block from the critical path sequence in the graph G(Θ) then the set T acc (Θ) includes
moves which transfer the ﬁrst (or the last) operation of each block from the machine Mi to another machine (from
the same nest). If π(v) is the ﬁrst (or the last) operation of a block and M j is the machine from the same nest then
the set T acc (Θ) includes moves which transfer π(v) to the following positions: η j (v), η j (v + 1), . . . , ρ j (v). Such a
neighborhood has a big size, so we have limited moves which transfer the ﬁrst (or the last) operation π(v) of a block
only in the position η j (v) or ρ j (v). So, ultimately
T subm (Θ) = {tij (v, w) ∈ T acc : v ∈ {ak , bk },

w ∈ {η j (v), ρ j (v)}, k = 1, 2, . . . , r.

(10)

The neighborhood Θ constitutes the set of feasible solutions
N(Θ) = {τ(Θ) : τ ∈ T subm (Θ)}.

(11)

This neighborhood has the size O(r · m), where r is the number of the critical path blocks.
In practice, we should select the best element of the neighborhood (e.g. inside a metaheuristic). Making use of
parallel computing environment we can follow one of the approaches below.
• We get as many processors as there are blocks r. Next, in the loop, each processor checks the cost of the
operation insertion to another machine of the same type, concurrently calculating the minimal value of such an
insertion.
• We get as many processors as there are pairs of machines of the same type. We calculate the minimal value in
logarithmic time using a tree scheme of parallel calculations.
The ﬁrst approach leads to the cost-optimal method. However, the second approach, using much greater number of
processors, leads us to obtaining shorter computing time.
Methods of the cost function value estimation. Each solution Θ = (Q, π) is a pair whose ﬁrst element is a set sequence
– machine workloads. A new assignment will be determined by choosing an element with the lowest cost function
value from the neighborhood (11). This requires a critical path to be determined for each element of the neighborhood.
To speed this procedure up, we will compute the lower bounds of the cost function value as a choosing criterion. In
this section, we will present methods of determining lower bounds.
Let Θ = (Q, π) be a feasible solution where Q = (Q1 , Q2 , . . . , Qm ) constitutes machine workload and π =
(π1 , π2 , . . . , πm ) is a concatenation of m permutations. Further, let B = (B1 , B2 , . . . , Br ) be a sequence of critical
path blocks in the graph G(Θ). We consider two machines Mi and M j belonging to the same nest. On machine Mi

2240

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

there are executed operations from the set Qi in the order πi = (πi (1), πi (2), . . . , πi ( i )) and on machine M j operations
from the set Q j in the order π j = (π j (1), π j (2), . . . , π j ( j )). Let us assume that the block
Bk = (πi (ak ), πi (ak + 1), . . . , πi (bk − 1), πi (bk )),

(12)

includes operations executed on machine Mi . For simplicity, we omit index k which denotes the block number.
Therefore, πi (a) is the ﬁrst and πi (b) is the last operation of the block Bk .
According to the strategy of searching neighborhood N(Θ) we are looking for such a move τ ∈ T subm (Θ) which
generates a graph G(τ(Θ)) – a feasible solution with possibly the lowest estimation of the critical path length (i.e., cost
function value). For moves from T subm (Θ) which transfer the ﬁrst operation πi (ak ) of the block Bk to position η j (ak )
or ρ j (ak ) in the permutation π j we introduce the notions
k

k

k

k

k

Δax(ak ) = max{L1x(a ) , L2x(a ) , L3x(a ) , L4x(a ) }, x(ak ) ∈ {η j (ak ), ρ j (ak )},

(13)

where
k

L1x(a ) = L(s, πi (ak − 1)) − L(s, πi (ak )),

(14)

k

L2x(a ) = L(s, πi (ak + 1)) − L(s, πi (ak )) − pπi (ak +1) ,

(15)

j −1
k

L3x(a ) = L(s, π j (1)) +

bk −1

pπi (h) + pπi (ak ) + L(π j ( j ), c) + L(s, πi (ak )) −

pπi (h) − L(πi (bk ), c),
h=ak +1

h=2
j −1

bk −1

k

L4x(a ) =

pπ j (h) + L(π j ( j ), c) +

pπi (h) − L(πi (bk ), c).
h=ak +1

h=x(ak )+1

Similarly, for moves from T subm (Θ) which move the last operation πi (bk ) of the block Bk to position η j (ak ) or
ρ j (ak ) in the permutation π j we introduce the notions
y(bk )

k

Δby(bk ) = max{L1

y(bk )

, L2

y(bk )

, L3

y(bk )

, L4

}, y(bk ) ∈ {η j (bk ),

j (b

k

)},

(16)

where
y(bk )

L1

= L(πi (bk − 1), c) − pπ(bk −1) − L(πi (bk ), c),

y(bk )
L2

= L(πi (b + 1), c) − L(πi (b ), c),

y(bk )

L3

k

(17)

k

(18)

j −1

= L(s, π j (1)) +

b −1
k

pπ j (h) + pπi (bk ) + L(π j ( j ), c) + L(s, πi (ak )) −
h=ak +1

h=2
y(bk )

L4

y(bk )−1

= L(s, β(1)) +

bk −1

pπ j (h) − L(s, πi (ak )) −
h=2

pπi (h) − L(πi (bk ), c),

pπi (h) .
h=ak +1

Now, we will prove theorems which allow us to estimate a cost function value for a solution generated from Θ by
shifting the ﬁrst operation πi (a) from the block Bk (executing a t-move) to position η j (a) or ρ j (a) on machine M j .
Theorem 2. If the solution Θ = (Q , π ) is generated from the Θ = (Q, π) by executing the move tij (ak , x(ak )) ∈
T subm (Θ), x(ak ) ∈ {η j (ak ), ρ j (ak )} then
k
(19)
L (s, c) ≥ L(s, c) + Δax(ak ) .
Proof. Let πi = (πi (1), πi (2), . . . , πi ( i )) and π j = (π j (1), π j (2), . . . , π j ( j )) be permutation of operations executing on
machines Mi and M j , respectively. The operations sequence Bk = (πi (ak ), πi (ak + 1), . . . , πi (bk )) (1 ≤ ak ≤ bk ≤ i ) is
a block on the machine Mi , i.e., Bk is a subsequence πi .
For the notion simpliﬁcation we assume that a = ak , b = bk and α = πi = (α(1), . . . , α(a), . . . , α(b), . . . , α(u)),
β = π j = (β(1), . . . , β(w)) where u = i , w = j .

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

2241

The graph G(Θ) is acyclic, so there exists a critical path C(s, c) with the length L(s, c). For each vertex v ∈ O there
is
C(s, c) = (C(s, v), C(v, c))

(20)

L(s, c) = L(s, v) + C(v, c) − pv .

(21)

and

Vertices of the critical path can be partitioned into subsequences
C(s, c) = (C(s, α(a)), C(α(a), α(b)), C(α(b), c)))

(22)

We consider the following paths: d1 (s, c), d2 (s, c), d3 (s, c) and d4 (s, c) from the vertex s to c in the graph G(Θ ).
d1 (s, c) = (C (s, α(a − 1)), C (α(a − 1), α(b)), C (α(b), c)),
d2 (s, c) = (C (s, α(a + 1)), C (α(a + 1), α(b)), C (α(b), c)),
d3 (s, c) = (C (s, β(1), C (β(1), β(w)), C (β(w), c)),
d4 (s, c) = (C (s, α(a)), C (α(a) = β(x(a)), β(w)), C (β(w), c).

(23)
(24)
(25)
(26)

Taking advantage of the fact that
C (s, α(a − 1)) = C(s, α(a − 1)) and C (α(b), c)) = C(α(b), c))

(27)

d1 (s, c) = (C(s, α(a − 1)), C (α(a − 1), α(b)), C(α(b), c))

(28)

d2 (s, c) = (C(s, α(a + 1)), C (α(a + 1), α(b)), C(α(b), c)),
d3 (s, c) = (C(s, β(1), C (β(1), β(w)), C(β(w), c)),
d4 (s, c) = (C(s, α(a)), C (α(a) = β(x(a)), β(w)), C(β(w), c).

(29)

we obtain

and similarly

(30)
(31)

Therefore the length of these paths (in the graph G(Θ )) can be deﬁned by length of some paths in the graph G(Θ).
These are as follows
b−1

l1 (s, c) = L(s, α(a − 1)) +

pα(h) + L(α(b), c),

(32)

pα(h) + L(α(b), c),

(33)

h=a+1
b−1

l2 (s, c) = L(s, α(a + 1)) +
h=a+2
w−1

l (s, c) = L(s, β(1)) +

pβ(h) + pα(a) + L(β(w), c),

3

(34)

h=2
w−1

l4 (s, c) = L(s, α(a) +

pβ(h) + L(β(w), c).

(35)

h=x(a)+1

As the graph G(Θ ) is acyclic, there exists a critical path C (s, c) whose length must not be shorter than the length of
any other paths from vertex s to c in G(Θ ). Therefore
L (s, c) ≥ l1 (s, c),

(36)

L (s, c) ≥ l (s, c),
L (s, c) ≥ l3 (s, c),
L (s, c) ≥ l4 (s, c).

(37)
(38)

2

(39)

2242

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

From this and using (22) we obtain
L (s, c) ≥ max{l1 (s, c), l2 (s, c), l3 (s, c), l4 (s, c)} = max{L(s, α(a − 1))
b−1

+

b−1

pα(h) + L(α(b), c), L(s, α(a + 1)) +
h=a+1

pα(h)
h=a+2

w−1

+ L(α(b), c)), L(s, β(1)) +

pα(h) + pα(a) + L(β(w), c),
h=2

w−1

pα(h) + L(β(w), c)}

L(s, α(a) +
h=x(a)

= max{L(s, c) + L(s, α(a − 1)) − L(s, α(a)), L(s, c) + L(s, α(a + 1)) +
w−1

− L(s, α(a)) − pα(a+1) , L(s, c) + L(s, β(1)) +

pβ(h) + pα(a) +
h=2

bk −1

+ L(β(w), c) − L(s, πi (a )) −

pπi (h) − L(πi (bk ), c),

k

h=ak +1
w−1

b−1

L(s, c) +

pβ(h) + L(β(w), c) −
h=x(a)+1

pα(h) − L(α(b), c)}
h=a+1

k

k

k

k

= L(s, c) + max{L1x(a ) , L2x(a ) , L3x(a ) , L4x(a ) } = L(s, c) + Δax(a) ,
which completes the proof of the theorem.
The next theorem is related with moving the last operation π(bk ) from the block Bk to machine M j .
Theorem 3. If the solution Θ = (Q , π ) is generated from the Θ = (Q, π) by executing the move tij (bk , y(bk )) ∈ T subm ,
y(bk ) ∈ {η j (bk ), ρ j (bk )} then
k

L (s, c) ≥ L(s, c) + Δby(bk ) .

(40)

The proof is similar to that of the previous theorem.
Remark 2. Values lk , k = 1, 2, 3, 4, can be determined sequentially in time O(n) = O(o). These calculations can be
done in parallel in time O(log n) = O(log o) using O logn n = O logo o -processor CREW PRAM.
Moving the operation π(ak ) to the position η j (ak ) or ρ j (ak ) the graph is generated in which the lower bound of the
k
k
length of the critical path from vertex s to c is the value of the expression L(s, c) + Δaη (ak ) (or L(s, c) + Δaρ (ak ) ). That is
j

j

k

why the expression Δax(ak ) , x(ak ) ∈ {η j (ak ), ρ j (ak )} can be used to determine the operation (i.e., an element from the
neighborhood) that will be moved.
k
k
Similarly, L(s, c) + Δbη (bk ) (or L(s, c) + Δbρ (bk ) ) is a lower bound of the critical path length in the graph generated
j

j

k

by moving an operation π(bk ) to positions η j (bk ) or ρ j (bk ) and the expression Δby(bk ) , y(bk ) ∈ {η j (bk ), ρ j (bk )} can be
employed to select an element from the neighborhood.
We choose the operation π(v) ∈ O such that
Δvχ(v) = min min{Δzμ(z) : z ∈ {ak , bk }, μ(z) ∈ {η j (z), ρ j (z)}}
1≤k≤r

(41)

The minimal value Δvχ(v) is connected with the best t-move which consists in moving the ﬁrst or the last operation
from some block to another machine. From Theorems 2 and 3 it follows that if Δvχ(v) > 0, then the critical path length
L (s, c) > L(s, c) in the generated graph G(Θ ).

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

2243

Summing up, for the solution Θ = (Q, π) (ﬁxed machine workload Q) we propose the following method of the
new assignment Q determination. In the graph G(Θ) we determine the critical path C(s, c) (if there are more than one,
we choose any of them) and we calculate its length L(s, c) = Cmax (Θ). Next, we determine the partition of the path
into blocks B = (B1 , B2 , . . . , Br ) and in accordance with (10) the set of moves T subm (Θ). Using (41) we determine
Δvχ(v) and choose the best t-move tij (v, χ(v)). This move generates a solution (the new machine workload) from the
neighborhood N(Θ) with the lowest value of the lower bound of the cost function.
Machine workload rearrangement. The algorithm proposed here searches the neighborhood generated by t-moves
transferring the ﬁrst and the last operations of each block from the critical path to another machine. The computational
complexity of the NewPar algorithm is O(o3 ) because of the complexity of creating a t-move neighborhood (Step 3).
Determination of the longest paths (Step 1) can be done using Floyd’s algorithm in time O(o3 ), or applying the
recursive method based on topological sorting in time O(o), maintaining the complexity O(o3 ) of the whole sequential
algorithm.
Parallel determination of the workload. Now, we will show a parallel version of the NewPar algorithm designed to
be executed on O(o2 )-processor CREW PRAM in time O(o). An outline of the algorithm is presented in Figure 1.
Step 1 consists in: (1) sequential determination of the graph G(Θ) = (V, R ∪ E(Θ)) connected with the solution
Θ and (2) parallel determination of the longest paths for all pairs of vertices in this graph, which can be done using
parallel Floyd’s algorithm. Because the graph has at most o vertices, parallel all-pairs the longest paths determination
algorithm works in time Θ(o) using o2 -processor CREW PRAM. It is possible to determine the longest paths faster
(using a greater number of processors), but in this case this is useless because Step 3 (neighborhood determination)
has linear computational complexity O(o).
Step 2 (block determination) can be executed in constant time O(o) using as many processors as there are vertices
on the longest path – at most o. Let us assign each processor to one vertex v lying on the critical path. It is enough
to check by each processor if the machine number assigned to its vertex λ(v) is the same as the machine number λ(u)
assigned to the next vertex u lying on the critical path. If it is not the same it means that the next block begins in u.
Such a comparison can be made in time O(1) using O(o)-processor CREW PRAM.
Step 3 (neighborhood determination) consists of two loops: external and internal one, which can be executed
independently in parallel. Inside them each processor needs to determine feasible positions η j (ak ), ρ j (ak ), η j (bk )
k
k
k
k
and ρ j (bk ), which can be done in linear time O(o). Afterwards, values Δaη (ak ) , Δaρ (ak ) , Δbη (bk ) and Δbρ (bk ) have to be
j
j
j
j
calculated, which also needs time O(o) (the sum of at most o elements has to be determined; see Theorem 3). The
entire Step 3 requires O(o2 ) processors (to execute two loops in parallel) to be made in time O(o).
Step 4 (the best t-move move determination) consists in choosing one move from O(4r · mmax ) moves, where
mmax = max1≤i≤q mi is the maximal number of machines in a nest. Because O(4r · mmax ) = O(rm) = O(o2 ) therefore
we need to use O(o2 ) processors to determine the minimal element of O(o2 ) elements in time O(log o2 ) = O(2 log o) =
o2
2
O(log o). In fact, it is enough to use less processors, namely O( 2 log
o ) instead of O(o ) to maintain the same computational complexity O(log o); though it is not necessary because the other elements of the whole algorithm have linear
complexity O(o).
Step 5 consisting in executing the t-move selected in the previous step can be made by the single (master) processor
in constant time O(1). Thus computational complexity of the whole parallel algorithm is O(o). The algorithm needs
to be executed on O(o2 )-processor CREW PRAM and it is cost-optimal with the cost O(o3 ).
3. Computational results
Proposed method of cost function value estimation was applied to the tabu search algorithm for ﬂexible job shop
problem [2]. Algorithms were tested on the set of benchmark problem instances taken from Hurink [8] and ran on
the HP xw4600 server with Intel Core 2 Duo 3.16GHz processor with nVidia GeForce GTX480 GPU working under
Linux Fedora 12 operating system. In the Table 1 particular columns mean:
• Flex. – average number of equivalent machines per operation,
• TS1 – tabu search algorithm in which exact value of cost function is calculated,
• TS2 – tabu search algorithm in which value of cost function is estimated,

2244

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

t [ms]
problem
abz5
abz6
abz7
abz8
abz9
average

n×m
10 × 10
10 × 10
20 × 15
20 × 15
20 × 15

Flex.
2
2
2
2
2
2

TS1
0.1125
0.1581
0.4001
0.3221
0.3743
0.2734

Cmax
TS2
0.0139
0.0198
0.0201
0.0158
0.0169
0.0173

TS1
1146
933
637
635
647

TS2
1181
952
641
640
656

Av. dev. [%]
3.05
2.04
0.63
0.79
1.39
1.58

Table 1: Experimental results of the proposed approach for Hurink [8] instances.

• t – time of cost function calculation (estimation) for all solutions from neighborhood generated with t-moves,
• Cmax – value of cost function (makespan),
• Av. dev. – average percentage relative deviations of TS2 results to TS1 results.
Obtained results show that using method of cost function value estimation results in shorter calculation time. There
is no diﬀerence in time of estimate cost function value for diﬀerent problem size. Computational complexity of cost
function value estimation for ﬂexible job shop problem is equal O(1). TS2 algorithm is 15.8 times faster than TS1
algorithm, the quality of obtained solutions is only slightly worse (1.58% for all tested instances). Computational
experiments shows that proposed approach is more useful for problems with largest number of machines and larger
value of average number of equivalent machines per operation.
4. Remarks and conclusions
A single-walk parallel approach to the ﬂexible job shop scheduling has been presented in this paper. We show the
new integrated approach to the neighborhood structure design and to its searching methodology from the point of view
of the eﬃcient multi-thread computing environment usage. A theoretical analysis based on PRAM model of parallel
computing was also made. We proposed a cost-optimal method of the neighborhood generation parallelization for the
CREW PRAM parallel computing model. The workload parallel determination algorithm decreases the computations
time from O(o3 ) (of the sequential approach) to O(o) time, using O(o2 ) processors. Applying PRAM computing
model makes it possible to convert the proposed methods to GPU environment easily.
References
[1] Bo˙zejko W., A new class of parallel scheduling algorithms, Wrocław Univeristy of Technology Publishing House (2010), 1–280.
[2] Bo˙zejko W., Uchro´nski M., Wodecki M., The new golf neighborhood for the ﬂexible job shop problem, Proceedings of the ICCS 2010,
Procedia Computer Science 1 (2010), Elsevier, 289–296.
[3] Bo˙zejko W., Uchro´nski M., Wodecki M., Parallel Meta2 2heuristics for the Flexible Job Shop Problem, in: L. Rutkowski et al. (Eds.),
Proceedings of the ICAISC 2010, Lecture Notes in Artiﬁcial Intellignece No. 6114 (2010), Springer, 395–402.
[4] Brandimarte P., Routing and scheduling in a ﬂexible job shop by tabu search, Annals of Operations Research 41 (1993), 157–183.
[5] Dauz`ere-P´er`es S., Pauli J., An integrated approach for modeling and solving the general multiprocessor job shop scheduling problem using
tabu search, Annals of Operations Research 70(3), (1997), 281–306.
[6] Gao J., Sun L., Gen M., A hybrid genetic and variable neighborhood descent algorithm for ﬂexible job shop scheduling problems, Computers
& Operations Research 35 (2008), 2892–2907.
[7] Ho N.B., Tay J.C., GENACE: an eﬃcient cultural algorithm for solving the Flexible Job-Shop Problem, IEEE International Conference on
Robotics and Automation (2004), 1759–1766.
[8] Hurink E., Jurisch B., Thole M., Tabu search for the job shop scheduling problem with multi-purpose machine, OR Spektrum 15 (1994),
205–215.
[9] Mastrolilli M., Gambardella L.M., Eﬀective neighborhood functions for the ﬂexible job shop problem, Journal of Scheduling 3(1), (2000),
3–20.
[10] Nowicki E., Smutnicki C., The ﬂow shop with parallel machines: A tabu search approach, European Journal of Operational Research 106
(1998), 226–253.
[11] Pauli J., A hierarchical approach for the FMS schduling problem, European Journal of Operational Research 86(1), (1995), 32–42.
[12] Pinedo M., Scheduling: theory, algorithms and systems, Englewood Cliﬀs, NJ: Prentice-Hall (2002).

Wojciech Boz˙ ejkoa, et al. / Procedia Computer Science 4 (2011) 2236–2245

Algorithm 1. ParallelNewPar
Input: Θ = (Q, π) - a feasible solution of the FJSP;
Output: Θ = (Q , π ) - a feasible solution generated by the t-move;
Step 1: {Graph creation}
if proc id = 1 then
Determine a graph with weighted vertices
G(Θ) = (V, R ∪ E(Θ))
connected with the solution Θ;
parfor proc id = 1..o2 do
Parallel determine the longest paths lengths between vertices
of the graph G(Θ);
end parfor;
Step 2: {Blocks determination}
if proc id = 1 then
Determine the critical path in G(Θ)
(i.e., vertices sequence C(s, c));
parfor proc id = 1..o do
Parallel determine blocks sequence B = (B1 , B2 , . . . , Br )
of the critical path C(s, c));
end parfor;
Step 3: {Neighborhood determination}
parfor k:=1 to r do
{consecutive blocks consideration}
if (block operations Bk = (π(ak ), π(ak + 1), . . . , π(bk ))
are executed on the machine Mv from the nest Mu )
then
{machines of the nest Mu }
parfor i := tu−1 + 1 to tu−1 + mu do
if i v then
begin
determine feasible positions η j (ak ) and ρ j (ak )
for the operation ak on the machine Mi and
k
k
calculate expressions value Δaη (ak ) and Δaρ (ak ) ;
j
j
determine feasible positions η j (bk ) and ρ j (bk )
for the operation bk on the machine Mi and
k
k
calculate expressions value Δbη (bk ) and Δbρ (bk ) ;
j
j
end;
Step 4: {The best move determination}
parfor proc id = 1..o2 do
Parallel Determine the minimal value
Δvχ(v) = min1≤k≤r min{Δzμ(z) : z ∈ {ak , bk },
μ(z) ∈ {η j (z), ρ j (z)}}
v
consisting in
connected with the best t-move tχ(v)
moving the ﬁrst or the last operation, respectively,
from some block to another machine from the same nest;
Step 5: {The new assignment determination}
if proc id = 1 then
Determine the new machine workload Q
v
connected with the solution Θ generated by the t-move tχ(v)
end.
Figure 1: Outline of the ParallelNewPar algorithm.

2245

