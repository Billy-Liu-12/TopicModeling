Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 1082–1091

International Conference on Computational Science, ICCS 2011

Bio Search Computing: Bioinformatics web service integration for
data-driven answering of complex Life Science questions
Marco Masserolia *, Giorgio Ghisalbertia, Stefano Ceria
a

Dipartimento di Elettronica e Informazione, Politecnico di Milano,
Piazza Leonardo da Vinci 32, 20133 Milano, Italy

Abstract
An increasing number of bioinformatics web services are available that provide answer to specific data extraction and analysis
needs. Yet, biomedical questions are often complex and regard many different aspects of an organism and its biomolecular
entities. Their answer hence requires searching multiple heterogeneous data that frequently are inherently ordered, or are
associated with ranked confidence values. Search Computing has been proposed to support the integration of web services, in
particular but not only search services, in order to answer complex questions by combining data extracted from distinct sources,
ordered based on local rankings, into result combinations, with an associated global ranking, which represents the solution of the
complex query. This paper presents how bioinformatics web service can be described in the search computing framework and
integrated analyses over such services can be carried out. A set of bioinformatics services has been described and registered in
the search computing framework and a bioinformatics search computing (Bio-SeCo) application using these services has been
created. This current prototype application, the available services which it uses, the queries which are supported, the kind of
interaction which is therefore made available to the users, and the future scenarios are here described and discussed.

Keywords: data integration; distributed biomedical applications; search; ranked data; bioinformatics

1. Introduction
In the biomedical field and in bioinformatics in particular, numerous web services are increasingly available; e.g.
BioCatalog (http://www.biocatalogue.org/) currently lists 1749 services from 144 providers [1]. They provide
programmatic access to data sources and/or algorithmic implementations to analyze biomedical data, in case
extracted from available data sources, offering both generic and domain-specific search services, i.e. bioinformatics
services that provide results (often ranked) of user defined searches within data repositories. Such web services, as
the web applications that often are made available to provide them with an easy-to-use web interface, can efficiently
answer specific data extraction and analysis needs. However, biomedical questions are often complex and
simultaneously regard several different functional and structural aspects of an organism and its biomolecular entities

* Corresponding author. Tel.: +39-02-2399-3553; fax: +39-02-2399-3411.
E-mail address: marco.masseroli@polimi.it.

1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2011.04.115

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

1083

(e.g. the genes expressed in certain conditions, their mutations and their involvement in pathological phenotypes or
diseases, the proteins with their protein domains and 3D structure, their participation in different biochemical
pathways and biological processes, etc.). Thus, such questions cannot be directly answered by a single available web
service and require to integrate different services and build an, often complex, distributed application to compute
their answer. Problems such as “Which genes encode proteins in different organisms with high sequence similarity
to a given protein and are significantly expressed in the same given tissue or condition?” can be addressed only by
exploring, comprehensively searching and globally evaluating the numerous available data and their relationships,
which are heterogeneous and often inherently ordered or associated with ranked confidence values. They require
combining multiple vertical search services to create multi-domain searches, where the different domain searches
either refine or augment previous results. For example, if the user is interested in knowing which genes both encode
proteins with high sequence similarity to a given protein and are significantly expressed in the same given biological
condition or tissue, current practice typically involves the integration of results from three different searches (for
similar proteins, protein encoding genes and gene expressions), where the individual search results are themselves
likely to be ranked by some criteria [2]. Such an integration task, taking account of the rankings, is termed a multidomain search, and may be carried out manually or by a custom program, but has not typically been supported
directly by data integration platforms or workflow systems.
This paper illustrates and discusses the relevance of the recently proposed Search Computing approach to
integrate heterogeneous web services in order to answer complex multi-domain questions, such as those of the Life
Science domain, by describing a demonstrative prototypical application implemented in a search computing
framework. The remainder of the paper is as follows. Section 2 illustrates Search Computing, its approach and the
technological framework created to implement it. Section 3 characterizes both the description of bioinformatics web
services that makes them usable for search computing and the definition of requests that span multiple search
services. Section 4 illustrates the type of bioinformatics web services currently described and registered in the search
computing framework, where they are available to be used for search computing applications. Section 5 describes a
prototype bioinformatics search computing (Bio-SeCo) application able to answer an example biomedical question,
which requires integrating biological sequence and gene expression service results; we created such Bio-SeCo
application as a demonstrator of the capabilities of search computing technology to answer complex multi-domain
biomedical questions. Section 6 discusses future scenarios in the development of the prototypical Bio-SeCo
application and in the use of source computing in the Life Sciences. Some conclusions, in particular on this last
aspect, are presented in Section 7.

2. Search Computing
Search computing (http://www.search-computing.eu/) [3] [13] [5] is a new multi-disciplinary approach that
builds upon a wealth of related past research challenges; they include service/mediator based data integration, query
generation and several variations of ranking in heterogeneous datasets [6] [7]. Search computing provides the
abstractions, methods, algorithms, tools and technologies required to express multi-domain queries and to build their
answers [5]. It proposes a new paradigm for solving complex queries based on combining data extraction from
distinct sources and data integration by means of specialized integration engines. Data extraction retrieves data from
different sources, ordered based on local rankings, and data integration merges such results into result combinations,
with an associated global ranking based on “top-k optimality” [8], such that combinations with the highest ranking
are produced as fast as possible; a result combination represents the solution of a complex search problem. Thus,
search computing has the ambitious goal of lowering the technological barrier required for building complex multidomain search applications. For example, the following question can be answered using a multi-domain query:
“Which drugs threat diseases that are likely to be associated with a given genetic mutation?” The multi-domain
query can be decomposed into sub-queries (in this case: “Which drugs threat which diseases?”; “Which diseases are
likely to be associated with a given genetic mutation?”); each sub-query can be mapped to a domain-expert server
registered in the system (in this cases, calls to servers named “Drug4Disease”, “GeneticMutation2Disease”); next it
can be analyzed and translated into an internal format, which is then optimized, thereby yielding an efficient plan for
query execution; plan execution is supported by an execution engine, which submits service calls to services through

1084

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

a service invocation framework, builds the query results by combining the outputs produced by service calls,
computes the global rankings of query results, and outputs query results in an order that reflects their global ranking.
These transformation steps are shown in the bottom-left side of Fig. 1; they are performed by the query mapper,
query analyzer, query planner and execution engine modules, under the responsibility of a query orchestrator that
starts query execution and collects query results. Suitable caching of results is performed to avoid multiple service
calls when the same service results are used multiple times in a service composition. The four modules can directly
accept user-provided inputs through suitable interfaces, each from a specific user type detailed on the top of Fig. 1.
Search computing users broadly belong to two categories: end users can only launch predefined applications and
submit input to them through forms; expert users (i.e. SeCo developers, Service designers, Application developers)
may also compose queries in the context of a service repository, by using the developed framework modules through
an internal API. The upper part of Fig. 1 shows that end-user applications and interfaces are accessible via an
external API and therefore callable from any client environment.
SECO
developer

Query
Management
Tool

Service
designer

Service
Registration
Tool

Application
developer

Query
Interaction
DesignerTool

Enduser

Liquid Queries
UI

Client
application

Queries&results

Read&
write

External API(REST)

Queries&results

Application
Repository

Internal API

Query Mapper

Usermgmt.

Cache

Highlevelqueries

Querymgmt.

Query Orchestrator

Servicemgmt.

ByͲpassing

Orchestration

Cache

User Framework
Cache

Dataretrieval

Logicqueries

Query Analyser
Cache

Lowlevelqueries

Query Planner

Query Framework

ServiceMart Framework
Cache

Query
results

Execution Engine
Cache

Servicecalls

Servicecallresults

Controldependencies(uses)

Read&
write

Cache

Cache

Executionplans

Read&
write

ServiceInvocation
Framework
.
Cache

Read&
write

User data
repository

Query
Repository

Service
Repository

Services

Maindataflows(queries,results)

Fig. 1. Overview of the search computing framework

3. Web service representation for Search Computing
Search computing depends on the ability of registering new sources as search services and making them available
for solving complex problems. Services are made available to search computing through a standard format, called
service mart [5]. This is a conceptual abstraction that masks the different implementation styles of services and is
tailored to the specific need to expose search services – i.e. services whose primary purpose is to produce ranked
lists of results, in which the ranking can depend on the values of one or more result attributes, or on the result
reliability, which can be an attribute of the results itself. These results are produced by interacting with concrete data
sources, which are made available through service interfaces, wrappers, or direct access to extensional data
collections (databases, excel files, and so on). To be usable for search computing, such sources must be registered as
services in the search computing framework; this is done by defining the binding between the service mart that
describes that type of resource and the operation to be invoked on the service that provides access to the resource,
with its input and output parameters (thus also solving the issue of automatic ingestion of web service parameters
and calling of web service methods).

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

1085

A service mart models a specific type of service by describing it and its properties; a service mart definition
includes a name (the service type name) and a collection of attributes (the typical input and output attributes exposed
by the services of that type). Each service mart is associated with one or more specific access patterns, which
abstract and logically describe the way in which data access can be effectively performed. An access pattern is a
signature of the service mart in which each attribute or sub-attribute is characterized as either input (I) or output (O),
depending on the role that the attribute plays in the service call. Moreover, an output attribute is designated as
ranked (R) if the service can produce its results in an order that depends on the value of the attribute. Each service
mart is associated with one or more service interfaces; each of them maps an access pattern to a specific
implementation and is represented as a triple including a name, a given access pattern and a service. Pair-wise
coupling of service marts is defined through connection patterns, which completely specify the connection
semantics. Every pattern has a conceptual name and a logical specification, consisting of a sequence of simple
comparison predicates between pairs of attributes or sub-attributes of the two connected services; such predicates
are interpreted as a conjunctive Boolean expression, and can therefore be implemented by joining the results
returned by the calling service implementations.
Through service marts, access patterns and connection patterns (which can be graphically generated by means of
easy-to-use web tools specifically created), existing resources can hence be represented in a standard format; this
enables to register, use and combine existing bioinformatics resources in the search computing framework to
perform multi-domain searches that provide results globally ordered according to the ranking of the retrieved single
domain results.
4. Bioinformatics web services registered in the Search Computing framework
By using the above described standard formats for representing resources for search computing, an initial set of
bioinformatics search services has been described and registered in the search computing framework. Three of the
most common types of search services in bioinformatics, i.e. for biomolecular sequence alignment and search (in a
databank of nucleotide or amino acid sequences), for protein ID look up (in a gene or protein databank) and for gene
expression result search (in a databank of experimental gene expression results) have been considered. Their service
marts and some of their access patterns have been defined as follow, together with some service interfaces for a few
specific bioinformatics services of such types.
4.1 Services for biomolecular sequence alignment and search
The far most used algorithms for biomolecular sequence alignment and search in a repository of biomolecular
sequences are BLAST (Basic Local Alignment and Search Tool) [9] and FASTA (FAST All) [10]. Numerous
implementations of each of these algorithms, in some cases optimized for specific purposes, exist and are publicly
available as search services. They usually have many input and output attributes: the most important can be
described by the following sequenceAlignmentSearch service mart:
sequenceAlignmentSearch(sequenceAlignmentProgram, searchedDatabase,
querySequence, querySequenceID, querySequenceIDName,
foundSequenceSymbol, foundSequenceID, foundSequenceIDName,
foundSequenceDescription, foundSequenceOrganism, alignments(score,
expectation, probability, matchQuerySequence, matchFoundSequence,
matchPattern))
A couple of different access patterns have been defined to logically describe the ways to access these
biomolecular sequence alignment and search services and the data they provide (a superscript indicates the role of
an attribute as input (I), output (O), or ranked output (R)). They are sequenceAlignmentSearch_bySequence and
sequenceAlignmentSearch_byID, that describe the two possible ways of expressing the input biomolecular sequence,
which is used as query sequence for searching for similar sequences: by its nucleotide or amino acid sequence, or by
its ID in the searched databank (specified by the two input attributes querySequenceIDI, and
querySequenceIDNameI).

1086

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

sequenceAlignmentSearch_bySequence(sequenceAlignmentProgramI,
searchedDatabaseI, querySequenceI, foundSequenceSymbolO,
foundSequenceIDO, foundSequenceIDNameO, foundSequenceDescriptionO,
foundSequenceOrganismO, alignments.scoreR, alignments.expectationR,
alignments.probabilityR, alignments.matchQuerySequenceO,
alignments.matchFoundSequenceO, alignments.matchPatternO)
sequenceAlignmentSearch_byID(sequenceAlignmentProgramI, searchedDatabaseI,
querySequenceIDI, querySequenceIDNameI, foundSequenceSymbolO,
foundSequenceIDO, foundSequenceIDNameO, foundSequenceDescriptionO,
foundSequenceOrganismO, alignments.scoreR, alignments.expectationR,
alignments.probabilityR, alignments.matchQuerySequenceO,
alignments.matchFoundSequenceO, alignments.matchPatternO)
The sequenceAlignmentProgram is the input attribute used to specify the sequence alignment program (e.g.
BLASTN, BLASTP) to use in order to search, in the searchedDatabase database (e.g. UniProtKB), for the sequences
similar to a specific query sequence; the retrieved sequences are described through the foundSequenceSymbol,
foundSequenceID, foundSequenceIDName, foundSequenceDescription and foundSequenceOrganism output
attributes. In the first access pattern, the query sequence is specified by providing as input its actual sequence
(through the querySequence input attribute); in the second access pattern, the query sequence is specified by
providing as input its ID (through the two querySequenceID and querySequenceIDName input attributes) in the
database in which the search is performed (specified through the searchedDatabase input attribute). In all cases,
alignments.score, alignments.expectation and alignments.probability are the output attributes that can be used for
providing three different rankings of the retrieved sequences and their local alignments with the query sequence
(alignments.matchQuerySequence, alignments.matchFoundSequence, alignments.matchPattern), according to their
similarity with the query sequence.
Service interfaces for the BLAST implementations of the Washington University (WU BLAST)
(http://www.ebi.ac.uk/Tools/blast2/) and the US National Center for Biotechnology Information (NCBI BLAST)
(http://blast.ncbi.nlm.nih.gov/) have been created as follow:
WU_BLAST_bySequence(“Washington University BLAST”,
sequenceAlignmentSearch_bySequence,
http://www.ebi.ac.uk/Tools/webservices/wsdl/WSWUBlast.wsdl)
NCBI_BLAST_bySequence(“National Center for Biotechnology Information
BLAST”, sequenceAlignmentSearch_bySequence,
http://www.ncbi.nlm.nih.gov/blast/Blast.cgi?CMD=Put&QUERY=
<querySequence>&DATABASE=<searchedDatabase>&PROGRAM=<sequenceAlignmentProgram>)
4.2 Services for protein ID look up
Several bioinformatics web services are available to retrieve a variety of protein information from different
databanks; in particular some of them provide the ID and symbol of the genes a given protein is associated with,
either since the protein interacts with the gene, or because the gene encodes for the protein. The access to this type
of information can be described for search computing by the following protein2gene service mart and the
protein2gene_byID access pattern (in which a superscript indicates the role of an attribute as input (I), output (O), or
ranked output (R)), which represents a way of defining the input protein whose associated genes are looked for: by
its ID, or by its symbol and organism.
protein2gene(proteinID, proteinIDName, geneID, geneIDName, geneSymbol, organism, associationType(type),
associationProvenance(database))
protein2gene_byID(proteinIDI, proteinIDNameI, geneIDO, geneIDNameO, geneSymbolO, organismO,
taxonomyIDO, associationType.typeO, associationProvenance.databaseO)

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

1087

A few service interfaces to access our Genome Function INtegrated Discoverer (GFINDer)
(http://www.bioinformatics.polimi.it/GFINDer/) integrative Genomic and Proteomic Data Warehouse (GPDW) [11]
have been created; an example is as follow.
GPDW_byID(“Genomic and Proteomic Data Warehouse”,
protein2gene_byID, http://www.bioinformatics.polimi.it/GFINDer/)
4.3 Services for gene expression result search
A few repositories of gene expression experimental data exist, some of which are publicly accessible through
web interfaces and services. Array Express Gene Expression Atlas (http://www.ebi.ac.uk/gxa/) [12] and Gene
Expression Omnibus (http://www.ncbi.nlm.nih.gov/geo/) [13] are the most important of such repositories; their data
access can be described for search computing with the following geneExpressionSearch service mart and
geneExpressionSearch_byGeneID access pattern (in which a superscript indicates the role of an attribute as input (I),
output (O), or ranked output (R)), which represents the inputs used to describe the gene and its expression data that
are looked for in the repository.
geneExpressionSearch(queryProperty, queryPropertyValue, queryOrganism, queryRegulation,
queryFactorTerm, queryFactorValue, foundGeneSymbol, foundEnsemblGeneID,
foundGeneSynonyms(geneSymbol), expressionFactorTerm, expressionFactorValue,
expressionFactorOntologyID, expressionRegulation, experimentNumber, bestExperimentPvalue,
bestExperimentID)
geneExpressionSearch_byGeneProperty(queryPropertyI, queryPropertyValueI,
queryOrganismI, queryRegulationI, queryFactorTermI, queryFactorValueI, foundGeneSymbolO,
foundEnsemblGeneIDO, foundGeneSynonyms.geneSymbolO, expressionFactorTermO, expressionFactorValueO,
expressionFactorOntologyIDO, expressionRegulationO, experimentNumberR, bestExperimentPvalueR,
bestExperimentIDO)
Some service interfaces to access the Array Express repository have been created; an example is:
Array_Express_byGeneID(“Array Express Gene Expression Atlas”, geneExpressionSearch_byGeneID,
http://www.ebi.ac.uk/gxa/api?geneIs=<queryEnsemblGeneID>&format=xml&indent)
5. A Bioinformatics Search Computing (Bio-SeCo) application
To demonstrate the effectiveness of Search Computing in addressing complex biomedical questions and
searching for their globally ranked answers, we considered the multi-domain case study question mentioned above
(“Which genes encode proteins in different organisms with high sequence similarity to a given protein and are
significantly expressed in the same given tissue or condition?”). We created a bioinformatics search computing
(Bio-SeCo) application that enables users to run online such multi-domain biomedical query for different user
selected proteins, gene expression regulation types and biological tissues or conditions, and obtain globally ranked
ordered results.
The case study question can be decomposed into the following three single domain sub-queries: “Which proteins
in different organisms have high sequence similarity to a given protein?”; “Which genes encode which proteins?”;
and “Which genes are significantly expressed in the same given tissue or condition?”. Each of these sub-queries can
be mapped to an available specific search service, i.e. a sequence similarity search program such as BLAST, in one
of its many implementations (e.g. WU BLAST), a query service in a database of genomic and proteomic data such
as our GFINDer GPDW, and a search engine over a repository of gene expression data such as Array Express Gene
Expression Atlas, respectively. As above described, these bioinformatics services have been registered and are now
available in the search computing framework; thus, in the search computing framework they can be composed to
automatically perform the multi-domain searches required to answer the considered example question. As described
in [6], the composition of the bioinformatics services useful for computing the answer to the considered question can
be done by defining, between the service marts that model those services, the following two pair-wise coupling
connection patterns:

1088

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

existsCodingGene_byProteinID(sequenceAlignmentSearch, protein2gene):
[(sequenceAlignmentSearch.foundSequenceID = protein2gene.proteinID
AND sequenceAlignmentSearch.foundSequenceIDName =
protein2gene.proteinIDName)]
existsExpressedGene_byGeneSymbol(protein2gene, geneExpressionSearch):
[(“Gene” = geneExpressionSearch.queryProperty
AND protein2gene.geneSymbol = geneExpressionSearch.queryPropertyValue
AND protein2gene.taxonomyID = geneExpressionSearch.queryOrganism)]
5.1 Query submission
The example query can hence be expressed in the search computing framework and executed using a user
interface. To achieve this aim, in the search computing platform we specified the three single domain sub-queries, in
which the example query can be decomposed, as follow and created an execution plan implementing the two
connection patterns above.
similarProteins(queryProteinIDName, queryProteinID, list_of(A, B, C, D))
codingGene(A, B, E, F)
expressedGene(“Gene”, E, F, queryExpressionRegulation, queryFactorValue, G, H)
with A: similarProteinID, B: similarProteinIDName, C: similarProteinSymbol, D: similarityExpectation,
E: codingGeneSymbol, F: organism, G: experimentNumber, H: p-value.
Furthermore, we defined a suitable ranking composition function to aggregate the ranked results from the single
domain searches produced by the composed services and generate a unique global ranking. As ranking attributes of
the two composed services that provide ranked results (i.e. the sequenceAlignmentSearch and geneExpressionSearch
services), we respectively considered the attributes bestAlignmentExpectation and bestExperimentPvalue. Given the
dimensionless nature of the values in such attributes, we decided to define the ranking composition function as the
product of these ranking attributes. In addition, since in a single search a geneExpressionSearch service can provide
results for different values of the expressionFactorValue attribute (e.g. for different types of a given biological tissue
or condition), we decided to generate such ranking composition for each value retrieved for the
expressionFactorValue attribute and order the obtained global ranking in decreasing order of relevance. Finally, we
created a web user interface to enter search constraints as query parameter values, submit the query execution (Fig.
2) and present the global-ranked multi-domain search results obtained (Fig. 3). Through such interface freely
available on line (http://www.search-computing.it/UIDemoBio/) the user can interact with the prototypical BioSeCo application created. He/she can both submit searches for his/her chosen search constrains and browse the
retrieved results, with the possibility to hide/show retrieved attributes and/or change the result visualization order
according to any set of retrieved attributes.

Fig. 2. Bio-SeCo application user interface to enter search constraints as query parameter values, choose the result visualization type and submit
the query execution

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

1089

5.2 Query results
In Fig. 2 an example set of search constraints is shown: Protein ID name (sequenceAlignmentSearch
querySequenceIDName) = “uniprot”, Protein ID (sequenceAlignmentSearch querySequenceID) = “O14543”, Gene
expression regulation (geneExpressionSearch queryRegulation) = “updown” and Biological tissue or condition
(geneExpressionSearch queryFactorValue) = “brain”. In Fig. 3 an excerpt of the global ranked results obtained for
the user specified search constraints in Fig. 2 is depicted. The resulting genes (Socs3 in mouse, human and rat, Socs2
in human and rat, and socs8 in zebrafish) represent the ordered list of genes that encode proteins with high sequence
similarity to the input O14543 protein (human Suppressor of cytokine signaling 3) and are significantly
differentially over or under expressed (up regulated or down regulated) in the brain. Hence, according to the partial
ranked results provided on January 15th, 2011 by the WU BLAST, GPDW and Array Express services registered in
the search computing framework, they constitute the global ranked answer to the considered example question, with
the search constraints specified in Fig. 2. The search computing framework automatically builds such results by
integrating the partial ranked results provided by each considered service, as shown in [6]. As expected, the resulting
genes include the gene that encodes the input protein.

Fig. 3. Global ranked (Rank) results provided by the search computing to the example question for the user input Protein ID = “O14543”, Protein
ID name = “uniprot”, Gene expression regulation = “updown” and Biological tissue = “brain”. Expectation: similarity expectation value of the
best BLAST alignment of the input protein sequence with the sequence of the protein with the Protein ID, Protein Name and Protein Symbol
shown; P-value: most statistical significance p-value of the differential expression (Regulation) of the gene with the indicated Gene Symbol in the
Organism and biological tissue (Factor) shown, according to the experiments (Experiment Number) considered

As it can be seen by using our on line demo, the described results are efficiently provided. The computation
overhead added by the search computing platform is very limited; the time the user has to wait for the results is far
mostly due to the waiting time of each integrated web service. Since the output results from each considered web
service are automatically used (i.e. piped as input to subsequent services, or combined to other service results) to
obtain the final global result, the user waiting time is much less than the time the user should spend to manually
perform the same operations required to get the global result.

1090

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

6. Future scenarios
The created Bio-SeCo application fully enables the user to run the example multi-domain biomedical query and
demonstrates the capabilities of the search computing technologies to be effectively applied to efficiently search for
globally ranked answers to complex biomedical questions. Yet, the described application is just a first prototype that
can and will be improved in the near future. Among others, in accordance with planned developments of the search
computing technology, future improvements will concern ranking composition function, query expansion and web
user interface. Different types of ranking composition function will be defined, which will include weight
coefficients for each composed service. Values for such coefficients will be definable and interactively modifiable
by the user at query time, in order to allow customizing global ranking calculation also in accordance with the
retrieved results by each specific individual search. According to the information exploration paradigm based on
semantic resource framework, expansion of global search results will be made possible in order to both refine search
results and explore additional search domains, not included in the initial search but related according to the semantic
resource network of domain services registered in the search computing framework. For instance, for the considered
example query, interesting expansions could regard the search for similarity among the promoters of the genes
found significantly expressed in the same given biological tissue or condition, or the search for co-occurrence in the
same biomolecular pathways of the proteins found with amino acid sequence similar to that of a given protein. A
more advanced result visualization interface will allow interactively browsing and expanding individual search
results, highlighting global combinations of results with particular relevance. Finally, the increasing number of
bioinformatics services that will be registered in the search computing framework will enable more possible
combinations of service compositions, with the consequent increasing capability of answering more and even more
complex biomedical questions.
7. Conclusions
This chapter has shown that mainstream bioinformatics resources can be described and composed using search
computing constructs in order to automatically answer complex multi-domain biomedical queries, where global
ranking of the integrated retrieved results is automatically computed by the search computing platform based on the
rankings of the individual searches. This aspect is a peculiar functionality of the search computing approach, which
is not present in available workflow services or data integration platforms. Notable examples of workflow systems
already exist in bioinformatics [14]; they include Taverna, Wings/Pegasus, Galaxy, Triana, and Kepler, amongst
many others. Taverna [15] is the best known for applications to the life sciences, where it has been used to support
experimental investigation into a variety of research areas. It is a language and computational model designed to
support the automation of complex, service-based and data-intensive scientific processes. Yet, Taverna and the other
available workflow services and data integration platforms are not able to consider the ranking, provided by single
integrated services, in the service or data integration process. Thus, when global ranking of the heterogeneous
results from the integrated services is required, implementations through workflows of services are not enough and
must be done using the search computing paradigm, or extending workflow systems with search computing
functionalities.
The shown example and implemented application only take into account three bioinformatics services and just
one composition of them. When more services are registered in the search computing platform, they can be
composed in different ways to answer a broader variety of complex biomedical queries and refine or augment query
results. In so doing, search computing can support exploratory search and curiosity driven browsing of life science
data that are difficult to be performed otherwise, thus enabling ambitious data driven biological knowledge
discovery and verification. Further work, required to enable more than a single mechanism for aggregating ordered
data sets, will allow the use of multiple global ranking mechanisms. This will enable users to customize the global
rankings, to reflect individual preferences on a search-by-search basis, and allow meeting the variety of
requirements of biomedical users.

Marco Masseroli et al. / Procedia Computer Science 4 (2011) 1082–1091

1091

Acknowledgements
This research is part of the "Search Computing" (SeCo) project, funded by European Research Council, under
2008 Call for "IDEAS Advanced Grants".

References
1. J. Bhagat, F. Tanoh, E. Nzuobontane, T. Laurent, J. Orlowski, M. Roos, K. Wolstencroft, S. Aleksejevs, R. Stevens, S. Pettifer, R. Lopez,
C.A. Goble. BioCatalogue: a universal catalogue of web services for the life sciences. Nucleic Acids Res. 38(Web Server issue), W689W694 (2010)
2. M. Masseroli, N.W. Paton, I. Spasic. Chapter 15: Search Computing and the Life Sciences. In: S. Ceri and M. Brambilla (eds.), Search
Computing - Challenges and Directions. LNCS, vol. 5950, pp. 291-306. Springer, Heidelberg, D (2010)
3. D. Braga, S. Ceri, F. Daniel, D. Martinenghi. Mashing up search services. IEEE Internet Comput. 12(5), 16-23 (2008)
4. S. Ceri, A. Abid, M. Abu Helou, A. Bozzon, D. Braga, M. Brambilla, A. Campi, F. Corcoglioniti, E. Della Valle, D. Eynard, P.
Fraternali, M. Grossniklaus, D. Martinenghi, S. Ronchi, M. Tagliasacchi, S. Vadacca. Search Computing: an approach for managing
complex search queries. IEEE Internet Comput. 14(6), 14-22 (2010)
5. S. Ceri and M. Brambilla (eds.). Search Computing - Challenges and Directions. LNCS, vol. 5950. Springer, Heidelberg, D (2010)
6. E. Cadag, B. Louie, P.J. Myler, P. Tarczy-Hornoch. Biomediator data integration and inference for functional annotation of anonymous
sequences. Pac Symp Biocomput. 343-354 (2007)
7. V. Pihur, S. Datta, S. Datta. Weighted rank aggregation of cluster validation measures: a Monte Carlo cross-entropy approach.
Bioinformatics 23(13), 1607-1615 (2007)
8. R. Fagin, R. Kumar, D. Sivakumar. Comparing top k lists. SIAM J. Discrete Math. 17(1), 134-160 (2003)
9. S.F. Altschul, W. Gish, W. Miller, E.W. Myers, D.J. Lipman. Basic Local Alignment Search Tool. J. Mol. Biol. 215(3), 403-410 (1990)
10. W.R. Pearson. Using the FASTA program to search protein and DNA sequence databases. Methods Mol. Biol. 24, 307-331 (1994)
11. M. Masseroli, S. Ceri, A. Campi. Integration and mining of genomic annotations: Experiences and perspectives in GFINDer data
warehousing. In: N.W. Paton, P. Missier, C. Hedeler (eds.) Data Integration in the Life Sciences. 6th International Workshop, DILS
2009. LNCS (LNBI), vol. 5647, pp. 88-95. Springer, Heidelberg, D (2009)
12. H. Parkinson, U. Sarkans, M. Shojatalab, N. Abeygunawardena, S. Contrino, R. Coulson, A. Farne, G.G. Lara, E. Holloway, M.
Kapushesky, P. Lilja, G. Mukherjee, A. Oezcimen, T. Rayner, P. Rocca-Serra, A. Sharma, S. Sansone, A. Brazma. ArrayExpress - a
public repository for microarray gene expression data at the EBI. Nucleic Acids Res. 33(Database issue), D553-D555 (2005)
13. T. Barrett, D.B. Troup, S.E. Wilhite, P. Ledoux, D. Rudnev, C. Evangelista, I.F. Kim, A. Soboleva, M. Tomashevsky, K.A. Marshall,
K.H. Phillippy, P.M. Sherman, R.N. Muertter, R. Edgar. NCBI GEO: archive for high-throughput functional genomic data. Nucleic Acids
Res. 37(Database issue), D885-D890 (2009)
14. E. Deelman, D. Gannon, M. Shields, I. Taylor. Workflows and e-Science: An overview of workflow system features and capabilities.
Future Generation Computer Systems 25(5), 528-540 (2009)
15. D. Hull, K. Wolstencroft, R. Stevens, C. Goble, M. Pocock, P. Li, T. Oinn. Taverna: a tool for building and running workflows of
services. Nucleic Acids Res. 34(Web Server issue), 729-732 (2006)

