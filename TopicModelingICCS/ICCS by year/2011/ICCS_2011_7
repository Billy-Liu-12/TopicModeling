Available online at www.sciencedirect.com

Procedia Computer Science 4 (2011) 322–331

International Conference on Computational Science, ICCS 2011

Can models of scientiﬁc software-hardware interactions be
predictive?
Michael Frasca, Anirban Chatterjee, Padma Raghavan
Department of Computer Science and Engineering
The Pennsylvania State University
E-mail: {mrf218, achatter, raghavan}@cse.psu.edu

Abstract
Sparse scientiﬁc codes face grave performance challenges as memory bandwidth limitations grow on multi-core
architectures. We investigate the memory behavior of a key sparse scientiﬁc kernel and study model-driven performance evaluation in this scope. We propose the Coupled Reuse-Cache Model (CRC Model), to enable multilevel
cache performance analysis of parallel sparse codes. Our approach builds separate probabilistic application and hardware models, which are coupled to discover unprecedented insight into software-hardware interactions in the cache
hierarchy. We evaluate our model’s predictive performance with the pervasive sparse matrix-vector product kernel,
using 1 to 16 cores and multiple cache conﬁgurations. For multi-core setups, average L1 and L2 prediction errors are
within 3% and 6% respectively.
Keywords: Reuse distance, Multi-core, Cache model, Sparse Matrix Vector Multiply

1. Introduction
Sparse scientiﬁc applications face mounting performance challenges as memory bandwidth fails to scale with
multi-core architectures. In this application context, avoiding the memory wall [1] proves diﬃcult as sparse application behavior signiﬁcantly depends on program input, and mult-core cache hierarchies introduce performance analysis
complexities. We hope to solve these issues by explicitly modeling software-hardware interactions, which will generate a new level of understanding and can enable new automated approaches to application and system tuning.
In this work, we develop the Coupled Reuse-Cache Model (CRC Model) to quantify and predict application
performance on multi-cores. We apply this methodology to build concise, yet representative application reuse models,
as well as a computationally simple cache model. We then discover the feedback characteristics between these two
models and design a framework that predicts performance for arbitrary multilevel caches.
We represent sparse applications with the sparse matrix-vector multiplication kernel (SpMV), which is a fundamental building block of many iterative linear solvers [2]. Similar to other sparse codes, cache use is entirely input
dependent, and its high memory bandwidth demands limit overall application performance. We use this kernel to
motivate and evaluate the CRC model, and with the help of a sizable input set, we statistical verify our model for
multi-core and multilevel cache hierarchies. The rest of the paper is organized as follows. Section 2 presents the
development of our two-fold model and the coupling methodology. Section 3 builds the framework to predict single
and multilevel cache performance. Section 4 deﬁnes our benchmark suite and test setup, and results are presented in
Section 5. Section 6 discusses related work, and Section 7 presents our conclusions and plans for future work.
1877–0509 © 2011 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and/or peer-review under responsibility of Prof. Mitsuhisa Sato and Prof. Satoshi Matsuoka
doi:10.1016/j.procs.2011.04.034

323

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

2. Developing the Coupled Reuse-Cache Model
In this section, we build our Coupled Reuse-Cache Model (CRC Model) from two distinct components: (i) the
Statistical Reuse Model (SRM), and (ii) the Statistical Cache Model (SCM). SRM builds a probabilistic model of an
application’s cache reuse, and SCM predicts miss probabilities as a function of reuse distance. We ﬁnd that although
the two models are independent, there exists a relationship between SRM and SCM parameters. By quantifying this
coupling, we form the CRC Model.
Reuse Distance. We formally deﬁne reuse distance, R, as the number of memory references between two successive accesses to the same memory block, where a block is determined by the cache line size. Many studies measure
reuse as a stack distance [3] (the number of unique references), but we regress to the simpler metric because of its
computational simplicity. We aim to build a valid statistical model and choose not to increase complexity without warrant. Additionally, we require computational eﬃciency to facilitate integration with future auto-tuning frameworks.
In the literature, our distance measure is also called reference distance [4] and time distance [5].
2.1. Statistical Reuse Model (SRM)
Existing reuse distance models [6, 7] rely heavily on reuse distance histograms to understand cache reuse behavior.
In order to build a statistical model from these reuse data, we attempt to reduce these histograms into a minimal
feature set. We observed reuse distances for a large suite of applications and provide two examples in Figure 1. We
hypothesize that probability distributions can capture this variability, yet also classify applications based on global
characteristics. Such a model is succinct and simple to form.
SpMV: Pajek/FA

SpMV: Oberwolfach/flowmeter0

0.008
0.006
0.004
0.002
0
0

20

40

60

80

100

Reuse Distance

Miss Rate Curve: Alemdar/Alemdar

0.1

1

0.08

0.8

Miss Probability

Normalized Frequency

Normalized Frequency

0.01

0.06
0.04
0.02
0
0

0.6
0.4
0.2
Observed
SCM

20

40

60

80

0
0

100

Reuse Distance

20

40

60

80

100

120

140

Reuse Distance

Figure 1: Example reuse distance distributions. Both were produced by SpMV (Section 4.1) with two matrices that diﬀer in structure.

Figure 2: Observed cache miss probability vs.
reuse distance. SCM is determined via logistic regression.

We employ probability distributions as a basis for SRM, where the appropriate probability density function (pdf)
indicates the expected reuse behavior. We formally deﬁne an application class as the set of applications that are best
modeled by a particular probability distribution. The associated pdf parameters serve as a signature for a chosen
application in that class.
SRM uses maximal likelihood [8] to classify applications. This technique comparatively determines the best
probability distribution, and we test a distribution set that supports the same semi-inﬁnite range as the reuse distance
metric, [0, ∞). We present results in Section 5.1, where we determined that the log-normal distribution best models
our current benchmark. Therefore, this distribution deﬁnes the application class in our study. SRM is completely
ﬂexible in this choice, and the pdf that best ﬁts a given application can be used without altering our methodology.
A log-normal distribution is deﬁned by the mean (μ) and standard deviation (σ) for the log of the data. These
metrics describe the center and spread of reuse data and are determined by Equations 1 and 2. We ignore cold misses
in this measure, and n is the number of references that result in reuse.

μ=

1
n

n

ln(Ri )
i=1

(1)

σ=

1
n

n

(ln(Ri ) − μ)2
i=1

(2)

324

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

2.2. Statistical Cache Model (SCM)
We independently seek a model that explains cache performance and create the Statistical Cache Model as a
function of reuse distance. Figure 2 illustrates how cache miss probability depends on reuse distance for a typical
scenario. The blue curve represents the underlying trend, which we will determine in this section. We expect this curve
to change with respect to the current cache and workload, and develop a parametric model that maps reuse distance
as an explanatory variable onto cache miss probability. Based on our observations, we choose logistic regression.
Equation 3 represents a general form of the logistic curve. P transitions from 0 to 1 as λ increases from −∞ to ∞.
To use the logistic model, we deﬁne λ as a function of reuse distance R. We use a linear relationship for simplicity
(e.g. λ = β0 + β1 ∗ x), but also map R ∈ [0, ∞) onto the domain of λ ∈ (−∞, ∞) using the transformation in Equation 4.
Without this mapping, the observed model ﬁts are signiﬁcantly worse.
P=

1
1 + e−λ

(3)

λ = β0 + β1 ∗ ln(R)

(4)

We can simulate an application trace against a chosen cache and ﬁt values of β. These regression coeﬃcients
describe how a given cache responds to a workload, but we redeﬁne them in Equation 5 to increase intuition regarding
the curve’s properties.
C1 = e−β0 /β1 , C2 = β1

(5)

Pmiss (R) =

1
1+

C1 C2
R

(6)

This form has a convenient interpretation. C1 determines the reuse distance at which the miss probability is 50%,
and C2 determines the model’s slope in this region. Equation 6 indicates the probability that a reference with reuse
distance R misses in cache. Again, Figure 2 illustrates an example of the SCM miss rate curve, where the parameters
(C1, C2) were determined via maximum likelihood.
2.3. Coupling SRM and SCM
At this point, we have developed an application model, SRM, that is deﬁned by two parameters (μ, σ). We have
also developed a cache model, SCM, that is deﬁned by two parameters (C1, C2). Although we deﬁned SRM and
SCM independently, a cache prediction framework will result if we can couple them. More speciﬁcally, we require a
method to estimate SCM parameters from the SRM application signature. This link will explain applications-cache
interactions, which we quantify through our coupling model.
This task requires an appropriate training set that is both large enough to provide conﬁdence and application
independent. We therefore instrument a set of traces that model the application class in our study, i.e., log-normally
distributed reuse distances. This training set contains one thousand traces, with one million references per trace. Each
trace was generated stochastically for varying reuse values of (μ,σ) and simulated on our cache conﬁgurations.
We present one set of training data in Figures 3 (a) and (b), which provides unprecedented insight into the interaction of applications and cache memories. As previously stated, the miss probability is 50% at C1, and C2 determines
the slope of SCM. For low μ and σ values, an application exhibits many small reuse distances and likely a low cache
eviction rate. Consequently, the reuse distance at which cache hits can occur increases, leading to a higher C1 value.
C2 behavior is less intuitive, but through our approach we learn that greater σ values lead to a steeper miss curve.
We quantify this interaction with a regression model (Equations 7 and 8), which is selected to match the apparent
exponential dependence of C1 and C2 on (μ, σ). We introduce suﬃcient ﬂexibility in these coupling equations by
deﬁning f to be quadratic in μ and σ. This enables modeling for an extremely wide range of cache conﬁgurations.
The parameters to f are obtained via nonlinear least squares regression, and the surfaces in Figure 3 are example ﬁts.
ˆ = α + e f (μ,σ)
C1

(7)

ˆ = β − e f (μ,σ)
C2

(8)

325

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331
C1 vs μ, σ

C2 vs μ, σ

200
3.5
150

C2

C1

3
100

2.5

50

2

0
6

1.5
6
4

4

10
2

σ

10
2

5
0

0

σ

μ

(a)

5
0

0

μ

(b)

Figure 3: SCM parameters vs. μ, σ. Blue points are observed data. Surfaces depict coupling equations. 1KB cache, 4-way, 32b line.

3. Predicting Multi-Level Cache Performance with the CRC Model
Given a proper coupling, we now apply the CRC model for performance prediction. We ﬁrst discuss the simple
case of a private L1 cache and then examine arbitrary multilevel cache conﬁgurations. Application behavior changes
with time, which induces changes in the SCM model. We divide a trace into a set of phases, which discretely models
these changes, and presently choose a constant phase size (10,000 references) for simplicity. We aim to apply phase
partitioning techniques for future work. For each phase, SRM measures (μ, σ) values, and then SCM parameters
ˆ C2)
ˆ are predicted with the coupling equations. We combine the estimated SCM miss rate curve (Equation 6)
(C1,
with the observed reuse distances to compute expected misses in Equation 9.
ˆ num
L1

misses

=

PL1

miss (Ri )

(9)

i

3.1. L2 Cache Miss Estimation
Predicting L2 cache behavior is more complex, as the reuse distances computed reﬂect accesses to the ﬁrst cache
level. We must also support cache sharing by multiple cores. Currently, we are not aware of any method to predict
L2 cache performance from an application’s reuse distances, private or shared. Instead, related work uses directly
observed L2 traces to predict shared second level cache performance [9, 10], which is unavailable without costly
simulation. We therefore deﬁne and approximate L2 reuse distance towards modeling shared L2 cache performance.
As stated in Section 2, L1 reuse distance is the number of accesses between two references to the same cache
block. We similarly model L2 cache behavior by counting intermediate L2 accesses for an L2 cache block, and restate
this as the number of intermediate L1 misses. Generalizing to an arbitrary cache level, Li , reuse distance is equivalent
to the number of misses across all preceding Li−1 caches.
We begin our approximation by temporally ordering parallel L1 memory references by the expected access time,
which leverages our L1 cache predictions. Within a core, p, we denote the ith L1 reuse distance as RL1 p [i]. The simple
throughput oriented model in Equation 10 recursively predicts access time for each access, t p . One could adopt
more complex procedures for added accuracy [11]. We ﬁnd this approach to be adequate, given the computational
homogeneity among threads in scientiﬁc kernels.
t p [i + 1] = t p [i] + L1hit

time

+ PL1

miss p (RL1 p [i])

× L1 penalty

(10)

Next, we merge all L1 traces into a single trace, T . This is completed in O(n) operations with the Merge algorithm
from MergeSort, where time values, t p , are the keys to order by. L2 reuse distance will measure the reuse in trace T
with respect to the number of L1 misses. In addition, L2 reuse distance is a core independent quantity, i.e., distances
for shared data do not depend on which core made the initial access. The following technique computes this eﬃciently.
The cumulative number of expected L1 misses before each reference is computed and stored in an array M (Equation 11), where the relevant per-core L1 miss model is used. L2 Reuse distances are then computed on T by measuring
the diﬀerence in cumulative L1 misses for each reuse. This is computed in Equation 12 for all references i and j where
reuse is found. All operations are computed in time linear in the length of T .

326

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

M[i + 1] = M[i] + PL1

miss (RL1 [i])

RL2 [i] = M[i] − M[ j]

(11)

(12)

ˆ 2 and C2
ˆ 2 are then
SRM parameters are ﬁt to L2 reuse distances, weighted by their L1 miss probability. C1
generated from the corresponding coupling model. To predict L2 misses (Equation 13), we also include the probability
that a reference misses in the previous cache level.
ˆ num
L2

misses

=

(PL1

miss (RL1 [i])

× PL2

miss (RL2 [i]))

(13)

i

4. Experimental Setup and Evaluation
Our setup is a trace driven cache simulator we built using MATLAB. The simulator supports variable sizes and
levels of associativity and is used for the evaluation of multilevel caches and multi-core scenarios. Table 1 lists a
large variety of cache setups. Conﬁgurations A* evaluate variable associativity (e.g. A1 is direct mapped, and A2 is a
two-way associativity cache). S* examines cache size, and P* evaluates the behavior of multiple cores sharing an L2
cache. All caches have a 32-byte line size and utilize an LRU replacement policy. For P* conﬁgurations, private L1
caches are 1KB, 4-way set associative and L2 is 16-way.
Conﬁg
A*
S*
P*

Description
L1 1KB
L1 16-way
L2 64KB, Shared

Variable
Assoc.
Size (KB)
Cores

Values
1 - Full
1 - 32
1 - 16

Table 1: Cache conﬁgurations used for single and multi-core tests.

We note that these cache sizes are small compared to modern processor designs. They were chosen to show the
model’s validity against all levels of memory pressure, and we experience the full range of miss rates under these
conditions. In our multi-core experiments, L1 cache sizes larger than 1KB result in very few L1 misses. The L2 traces
are incredibly sparse under such conditions and consequently, L2 predictions have very little statistical meaning.
4.1. Sparse Matrix Vector Multiply
The Sparse Matrix Vector Multiplication (SpMV) kernel [2] evaluates b ← Ax, where A is a sparse matrix and
x is a dense vector. The SpMV routine is an important component to many scientiﬁc applications that utilize sparse
linear systems, e.g., CG [12], k-means clustering [13], and many others. Furthermore, it is often repeated many times,
and its cache use can dominate application performance. An important aspect of SpMV is that the memory access
pattern is completely determined by the nonzero structure of A. We only trace references to x, as there is no reuse to
A. This setup models a hybrid cache design, where A is in Compressed Sparse Row form (CSR) [14] and streamed
to the processor via scratchpad memory [15]. Multi-core SpMV simulations split the matrix row-wise based on the
number of nonzeros, which evenly divides the work and creates shared reuse between cores.
We statistically verify our model with a large and diverse set of 500 sparse matrices from the University of
Florida (UFL) Sparse Matrix Collection [16]. These matrices are derived from real applications and widely used
for performance evaluation. We selected matrices that are real, square, have between 5,000 and 400,000 rows, and
between 2,800 and 2,700,000 nonzeros. The diverse sparsity structure leads to 500 unique reuse patterns that we aim
to model with SRM. Matrices are grouped in the UFL collection, and we present a partial list in Table 2. We present
the ﬁve most represented groups for each nonzero range. The entire benchmark set contains 88 unique groups.
5. Results and Discussion
We examine model performance and discuss the impacts of our simpliﬁcations on model accuracy. For evaluation
purposes, we consider cache prediction as a binary classiﬁcation problem, the two classes being {hits, miss}. Errors
are reported as a miss-classiﬁcation rate. Since we predict the probability that a reference is in each class (e.g. miss
with 30% and hit with 70%), we look at the expected counts in either set and measure the miss-classiﬁcation rate

327

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

NNZ Range
[28980, 160723]
[160723, 335552]
[335972, 565761]
[565996, 1206265]
[1211231, 2741935]

Group (number of matrices)
Schenk IBMNA(18), Hollinger(16), Pothen(7), GHS indef(6), SNAP(4)
Hollinger(15), Schenk IBMNA(8), Cylshell(7), Oberwolfach(6), Mallya(6)
Nemeth(14), GHS indef(12), Hollinger(10), Schenk IBMNA(10), SNAP(8)
GHS indef(11), Nemeth(7), Boeing(6), TSOPF(6), IBM EDA(5)
Schenk ISEI(14), GHS indef(8), Boeing(7), Simon(7), VanVelzen(5)

Table 2: Matrix groups with the highest representation in our benchmark set. Matrices are binned by nonzero count.

relative to all classiﬁed items (i.e. trace length). Formally, we deﬁne this as follows. When summarizing errors, we
weight predictions by the number of observed cache accesses.
Error =

(Predicted Misses) − (Observed Misses) (Observed Hits) − (Predicted Hits)
=
T otal Re f erences
T otal Re f erences

5.1. Determining Application Class
The ﬁrst step in applying the CRC model is to classify an application based on its reuse distance distribution.
We deﬁne the set of possible probability distributions based on two constraints: (i) the range should match that of
our reuse distance metric, [0, ∞), and (ii) each distribution should have the same degrees of freedom. As such, we
select the following two-parameter, right-tailed distributions: log-normal, gamma, Weibull, and negative binomial.
Reuse distances are collected for each benchmark matrix and we evaluate the likelihood for SRM distribution ﬁts.
Likelihood for a distribution p is computed as follows:
L(p|R) ∝

P(r|p)
r∈R

Number of Matrices

Application Class Ranking by Likelihood
log−normal

gamma

Weibull

negative binomial

500

250

0

1

2

3

4

Relative Rank for Class Likelihood

Figure 4: SRM classiﬁcation data for SpMV. Likelihood rankings
show log-normal distribution best classiﬁes 460 input matrices.
Weibull distribution ranks second with 32 matrices.

Number of Matrices

For a given matrix, relative likelihood rankings indicate the best distribution. Figure 4 shows the frequency at
which each distribution is ranked. The log-normal distribution best characterizes 460 input matrices, and we therefore
use it to classify SpMV. Most outliers are best modeled by a Weibull distribution. Further study reveals that these
matrices have highly random structures, and the SRM classiﬁcation identiﬁed this important diﬀerence. We include
these matrices with the larger log-normal set for our experiments, as the (μ, σ) metrics still reasonably capture the
reuse behavior. Future work can measure the sensitivity to this choice. Figure 5 presents the distribution of observed
SRM metrics.
Log−Normal SRM: Observed Parameter Values

150

150

100

100

50

50

0
0

5

μ

10

0
0

2

σ

4

Figure 5: Observed log-normal SRM metrics (μ, σ) for all 500
matrices. The wide range of SRM values indicate signiﬁcant diversity among SpMV inputs.

5.2. In Depth Case Study.
We initially present one example to illustrate the CRC Model’s capability. Figure 6 (a) depicts the structure for the
matrix Pajek/HEP-th. This matrix represents a citation graph of high-energy physics literature. A data mining algorithms on this structure can take many iterations, and any SpMV optimizations will greatly beneﬁt overall application
performance. We measure reuse behavior with SRM in Figure 6 (b), where the model summarizes the trend over the
entire dataset. Through model coupling, we predict the SCM curve in Figure 6 (c) and use the model in Equation 9 to
create a miss rate prediction for a 16KB cache. Observed hit rate is 39.0%, while the CRC model predicts 41.0%.

328

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

Observed
SRM

10

−3

10

0

(a) Structure for natural ordering

100 200 300 400
Reuse Distance

Cache Behavior: Natural Order
1
Miss Probability

Normalized Frequency

Reuse Distribution: Natural Order
−2

0.5

0
0

500

(b) SRM characterization

−3

10

(d) Structure for RCM ordering

100 200 300 400
Reuse Distance

(e) SRM characterization

2000

500

Cache Behavior: RCM Order
1
Miss Probability

Normalized Frequency

Observed
SRM

0

1000
Reuse Distance

(c) SCM Prediction

Reuse Distribution: RCM Order
−2

10

Observed
Predicted SCM

0.5

0
0

Observed
Predicted SCM
1000
Reuse Distance

2000

(f) SCM Prediction

Figure 6: CRC Model and SCM prediction for matrix Pajek/HEP-th. Natural ordering (a-c), RCM ordering (d-f). Miss rate prediction error is 1.0%
for the original ordering, and 0.5% for the RCM ordering. 16KB 16-way L1 cache.

We repeat this experiment after applying the Reverse Cuthill-McKee ordering [17] and show results in Figures 6 (d-f). This permutation is known to decrease matrix bandwidth, which can signiﬁcantly reduce reuse distances.
The predicted SCM model changes to reﬂect the new reuse distribution, and we see a greater likelihood for cache hits
at large reuse distances. The observed hit rate is 67.7%, while the CRC model predicts 67.2%. In this case, our model
proves valuable in predicting performance and can be the basis for model-driven optimizations.
5.3. Single Core Results
We now verify the CRC Model running a serial version of SpMV on all 500 UFL matrices. For each matrix input,
the memory references to the vector x were traced and reuse distances were calculated. Repeating the methodology
above, we predict cache misses per phase and measure errors against the observed application miss rates. Figure 7 (a)
depicts prediction accuracy for the 16KB L1 cache, and we verify consistent accuracy across the entire range of
observed hit rates. In Figures 7 (b) and (c), we present average error with respect to our conﬁgurations A* and S*.
Error-bars indicate 95% conﬁdence intervals (CI) for mean error, which is near zero across all conﬁgurations. These
results are summarized in Table 3. We report mean error, mean absolute error, and standard deviation.
In Section 2, we described our choice for using reuse distance over the more complex stack distance metric. Extra
complexity is not warranted if reuse distance measurements provide comparable prediction accuracy. Consequently,
we conduct a direct comparison to conﬁrm this fact. The standard Stack Distance Histogram model (SDH), assumes
that any reference with a stack distance less than the number of cache lines will hit in cache [3], and conﬂict misses
lead to prediction errors. Through our model coupling, we capture nominal conﬂict behavior and its dependence on
reuse proﬁles. We see in Figure 7 (b) and (c) that CRC approach is competitive, if not better, in all scenarios.
5.4. Multi-Core Study
After observing the high quality predictions for the single core scenario, we evaluate multi-core and multi-level
cache conﬁgurations, P*. Detailed results for 2 cores and 8 cores are shown in Figure 8, where we plot predicted
versus observed miss rate of all 500 UFL matrices. We further split observations by each core. Grey levels indicate
the length of the trace, with black being the longest traces (highest weight). L1 predictions are accurate across the

329

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

Mean Prediction Error

Predicted L1 Hit Rate

80
60
40
20
0
0

20

40

60

80

100

4
2
0
−2
−4
−6
1

2

4

8

16

32

Associativity

Observed L1 Hit Rate

(a) Predictions for all 500 inputs.

L1 Errors: CRC vs. SDH

CRC
SDH

6

Mean Prediction Error

L1 Errors: CRC vs. SDH

L1 Errors: 16KB cache, 16−way
100

CRC
SDH

6
4
2
0
−2
−4
−6
1

2

4

8

16

32

Cache Size (KB)

(b) Mean prediction error, L1 1KB.

(c) Mean prediction error, L1 16-way.

Figure 7: Prediction accuracy for single core SpMV. (a) individual observations for all matrices on a 16KB L1 cache. (b) & (c) Mean prediction
errors (with 95% conﬁdence intervals) for the CRC and SDH models over all 500 UFL matrices. (a) Conﬁgurations A*, (b) Conﬁgurations S*.
(a) L1 Errors: Sensitivity to Associativity

SpMV
A1
A2
A4
A8
A16
AF

L1 Prediction Error (%)
Avg |Avg|
S td
1.35 3.44
5.50
-0.19 3.22
6.02
-0.05 2.21
3.65
-0.79 1.96
4.03
-0.98 1.92
4.49
-0.81 1.71
3.58

(b) L1 Errors: Sensitivity to Cache Size

SpMV
S1
S2
S4
S8
S16
S32

L1 Prediction Error (%)
Avg |Avg|
S td
-0.98 1.92
4.49
-0.15 1.63
3.88
0.34 1.43
3.25
0.71 1.06
1.39
0.70 0.92
1.09
0.53 0.78
1.11

Table 3: L1 prediction errors, 500 UFL matrices. (a) 1KB, with variable associativity, (b) 16-way, cache sizes range from 1 to 32KB.

entire range of hit rates despite the high trace variability. We observe several outliers in which the predicted hit rate
is signiﬁcantly higher than observed values. These cases have a large percentage of conﬂict misses. The CRC Model
does not explicitly predict conﬂict misses, but instead accounts for an average expected behavior in the shape of the
coupling model. More complex set speciﬁc trace analysis can be used to remove this limitation. We note that the SDH
model has the same limitation, but assumes no conﬂict misses. Our approach is more accurate in the average case.
Table 4 summarizes for multilevel and multi-core results. L1 cache miss rates are predicted with the highest
accuracy. This is expected, as errors in L1 predictions naturally magnify L2 prediction errors. For multi-core conﬁgurations, we see no degradation in the L1 prediction accuracy since predictions for each private L1 cache is essentially
the same problem as the single core case. L2 prediction errors have a greater variance. However, traces with greater
length (weight) show the highest accuracy. Again, this is due to the fact that matrices with high L1 hit rates have
sparse L2 traces, and therefore diﬃcult to predict L2 behavior.
L2 prediction accuracy decreases at larger core counts but, standard deviation less than 9% for a cache shared by
16 cores is encouraging. There exists a bias at 16 cores (-2.48%), which under-predicts misses. We believe this is
a direct result of our methodology in Section 3.1. When individual traces are merged together, we determine reuse
distance by ﬁnding the most immediate reuse. However, the preceding reference only reaches the L2 cache with some
probability, and we therefore compute a lower bound to L2 reuse distance. There is a chance that the actual L2 reuse
is to a reference earlier in time, and this bias is most signiﬁcant when L1 hit rates are high. We plan further work on
L2 reuse distance approximations to remove this bias.
6. Related Work
Our work is motivated by several studies that aim to summarize application characteristics and use this information for performance prediction. The StatCache model by Berg et al. [18], has several similarities. Most notably,
they model cache miss probabilities based on reuse distance and compute an overall application miss rate. These
predictions rely on histograms of reuse data. We share the perspective that this data clearly predicts cache behavior,

330

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

L1 Errors: SpMV 2 Cores

L2 Errors: SpMV 2 Cores
100

L2 Hit Rate Prediction

L1 Hit Rate Prediction

100

80

60

40

20

0
0

20

40

60

80

80

60

40

20

0
0

100

20

L1 Hit Rate
(a)

L1 Errors: SpMV 8 Cores

80

100

L2 Errors: SpMV 8 Cores
100

L2 Hit Rate Prediction

L1 Hit Rate Prediction

60

(b)

100

80

60

40

20

0
0

40

L2 Hit Rate

20

40

60

80

100

L1 Hit Rate

80

60

40

20

0
0

20

40

60

80

100

L2 Hit Rate

(c)

(d)

Figure 8: SpMV predicted hit rates vs observed hit rates. L1 1KB 4-way, L2 64KB 16-way. (a) & (b) 2 Cores, (c) & (d) 8 Cores.

SpMV
P1
P2
P4
P8
P16

L1 Error (%)
Avg |Avg| S td
-0.02 2.21 3.48
-0.14 2.19 3.55
-0.27 2.22 3.79
-0.40 2.26 3.93
-0.55 2.31 4.10

L2 Error (%)
Avg |Avg| S td
-1.28 3.00 5.51
-0.93 2.99 5.11
-0.84 3.51 5.96
-1.36 4.32 7.11
-2.48 5.40 8.23

Table 4: Multi-core prediction errors for SpMV. L1 is private 1KB 4-way, L2 is shared 64KB 16-way.

but instead classify and summarize the reuse behavior with our two-parameter SRM model. Almeida et al. show that
probabilistic models of data reuse are eﬀective for web requests [19]. They use a log-normal distribution to model
stack distance data, whereas we introduce rigorous likelihood analysis in SRM to justify distribution ﬁt.
Snavely et al. use architecture agnostic data to predict execution times in their PMaC Prediction Framework [20,
21]. Their goal is similar, but the approach is signiﬁcantly diﬀerent. Their work does not create hit rate predictions, but
uses a tool, MetaSim, to obtain cache hit rates through simulation. Cache hit rates are then coupled with machine data
to predict performance. Our model can increase the eﬃciency of such predictions by replacing the cache simulator.
To reduce computation time, they study the attainable accuracy with various sampling techniques [22]. In turn, our
methodology could beneﬁt from similar ideas and we plan to explore this with future work.
Stack distance based multi-core cache models have also been studied, but with greater simplicity. Chandra et
al. [9] model L2 cache contention for co-scheduled threads that do not share address space. Song et al. [10] studied
a similar problem, but assume threads share and access data in a homogeneous way. Both models rely on L2 address
traces for their prediction computations. The prediction problem we have posed is more complex for two signiﬁcant
reasons: (i) our application trace is L1 references, which are used for predictions at all cache levels, and (ii) we do
not make assumptions regarding access patterns. The CRC Model supports multi-threaded applications and is not
constrained by each thread’s sharing pattern or the cache conﬁguration at any level.

Michael Frasca et al. / Procedia Computer Science 4 (2011) 322–331

331

7. Conclusion
Our work provides a unique model of application behavior and new insights into shared cache utilization. The
main contributions of this work are the Statistical Reuse Model (SRM) and the Statistical Cache Model (SCM).
We observe that probability distributions can summarize application behavior with little information loss, and the
interaction between application reuse and cache performance is easily quantiﬁable. To our knowledge, we have also
provided the ﬁrst approximation of L2 reuse distance and cache performance from multi-core L1 data. Improvements
to this approximation is the major focus of ongoing work. The largest cost of our framework is the training phase,
which involves measuring synthetic trace behavior on target architectures. However, this occurs once and yields a
robust ﬁt across the entire reuse domain.
In summary, this work demonstrates the power of a simple, two parameter cache model that is predicted by an
application’s reuse distance distribution. We examine the sparse matrix-vector multiplication kernel, and evaluate the
CRC model’s predictive performance across cache size, associativity, and the number of cores sharing an L2 cache.
For multi-core setups, average L1 and L2 prediction errors are within 3% and 6% respectively.
Acknowledgment
We thank The National Science Foundation (NSF) and Department of Computer Science and Engineering at The
Pennsylvania State University for providing us the resources for our research. This project was funded by NSF grant
CSR-SMA 0720749.
References
[1] W. A. Wulf, S. A. McKee, Hitting the memory wall: implications of the obvious, SIGARCH Comput. Archit. News 23 (1995) 20–24.
[2] Y. Saad, Iterative methods for sparse linear systems, Society for Industrial Mathematics, 2003.
[3] K. Beyls, E. D’Hollander, Reuse distance as a metric for cache behavior, in: Proceedings of the IASTED Conference on Parallel and
Distributed Computing and systems, Vol. 14, 2001, pp. 350–360.
[4] C. Pyo, K. Lee, H. Han, G. Lee, Reference distance as a metric for data locality, in: High Performance Computing on the Information
Superhighway, 1997. HPC Asia’97, IEEE, 2002, pp. 151–156.
[5] X. Shen, J. Shaw, B. Meeker, C. Ding, Locality approximation using time, in: Proceedings of the 2007 POPL Conference, ACM New York,
NY, USA, 2007, pp. 55–61.
[6] C. Ding, Y. Zhong, Predicting whole-program locality through reuse distance analysis, in: Proceedings of the ACM SIGPLAN 2003 conference on Programming language design and implementation, ACM, 2003, pp. 245–257.
[7] X. Shen, Y. Zhong, C. Ding, Regression-based multi-model prediction of data reuse signature, in: Proceedings of the 4th Annual Symposium
of the Las Alamos Computer Science Institute, 2003.
[8] D. Collett, Modelling binary data, CRC Press, 2003.
[9] D. Chandra, F. Guo, S. Kim, Y. Solihin, Predicting inter-thread cache contention on a chip multi-processor architecture, in: High-Performance
Computer Architecture, 2005. HPCA-11. 11th International Symposium on, 2005, pp. 340–351.
[10] F. Song, S. Moore, J. Dongarra, L2 Cache Modeling for Scientiﬁc Applications on Chip Multi-Processors, in: Parallel Processing, 2007.
ICPP 2007. International Conference on, 2007, pp. 51–51.
[11] X. Chen, T. Aamodt, A ﬁrst-order ﬁne-grained multithreaded throughput model, in: IEEE 15th International Symposium on High Performance
Computer Architecture, 2009. HPCA 2009, 2009, pp. 329–340.
[12] J. R. Shewchuk, An introduction to the conjugate gradient method without the agonizing pain, Tech. rep. (1994).
[13] J. MacQueen, Some methods for classiﬁcation and analysis of multivariate observations, Proceedings of 5-th Berkeley Symposium on Mathematical Statistics and Probability (1967) 1:281–297.
[14] Y. Saad, SPARSKIT: a basic tool kit for sparse matrix computations.
[15] A. Yanamandra, B. Cover, P. Raghavan, M. Irwin, M. Kandemir, Evaluating the role of scratchpad memories in chip multiprocessors for
sparse matrix computations, in: Parallel and Distributed Processing, 2008. IPDPS 2008. IEEE International Symposium on, 2008, pp. 1 –10.
[16] T. Davis, University of ﬂorida sparse matrix collection, http://www.cise.uﬂ.edu/research/sparse/matrices/.
[17] W. Liu, A. Sherman, Comparative Analysis of the Cuthill–McKee and the Reverse Cuthill–McKee Ordering Algorithms for Sparse Matrices,
SIAM Journal on Numerical Analysis 13 (1976) 198.
[18] E. Berg, E. Hagersten, StatCache: a probabilistic approach to eﬃcient and accurate data locality analysis, in: Proceedings of the 2004 IEEE
International Symposium on Performance Analysis of Systems and Software, IEEE Computer Society, 2004, p. 27.
[19] V. Almeida, A. Bestavros, M. Crovella, A. De Oliveira, Characterizing reference locality in the WWW, in: Parallel and Distributed Information Systems, 1996., Fourth International Conference on, IEEE, 2002, pp. 92–103.
[20] L. Carrington, A. Snavely, N. Wolter, A performance prediction framework for scientiﬁc applications, Future Gener. Comput. Syst. 22.
[21] A. Snavely, N. Wolter, L. Carrington, Modeling application performance by convolving machine signatures with application proﬁles, in: 2001
IEEE International Workshop on Workload Characterization, 2001. WWC-4, 2001, pp. 149–156.
[22] M. Tikir, M. Laurenzano, L. Carrington, A. Snavely, The pmac binary instrumentation library for powerpc, in: Workshop on Binary Instrumentation and Applications, 2006.

