Procedia Computer
Science
Procedia Computer
001(2010)
Procedia
ComputerScience
Science
(2012)1–9
193–201

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Ridge regression ensemble for toxicity prediction
Marcin Budka1,∗, Bogdan Gabrys∗∗
Computational Intelligence Research Group, Smart Technology Research Centre, School of DEC, Bournemouth University
Poole House, Talbot Campus, Fern Barrow, Poole BH12 5BB, United Kingdom

Abstract
Traditional methods of assessing chemical toxicity of various compounds require tests on animals, which raises
ethical concerns and is expensive. Current legislation may lead to a further increase of demand for laboratory animals
in the next years. As a result, automatically generated predictions using Quantitative Structure–Activity Relationship
(QSAR) modelling approaches appear as an attractive alternative. Due to sparsity of the chemical space, making this
kind of predictions is however a diﬃcult task.
In this paper we propose a purely data–driven, rigorous and universal methodology of QSAR modelling, based on
ensemble of relatively simple ridge regressors trained in various subspaces of the chemical space, selected using an
iterative optimization procedure. The model described has been developed without using any domain knowledge and
has been evaluated within the Environmental Toxicity Prediction Challenge CADASTER 2009, which has attracted
over 100 participants from 25 countries. The presented approach was chosen as one of the First–Pass Winners, with
predictive power non–significantly diﬀerent to the highest ranked method, developed by the experts in the area of
QSAR modelling and toxicology.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

gression
Keywords: QSAR modelling, Toxicity prediction, Ensemble models, Data–driven re

1. Introduction
Chemical toxicity is a degree of inorganic substances being poisonous and is thus related to various negative
biological eﬀects, like gene damage or carcinogenicity. With thousands of new industrial chemicals being synthesized
every year and many of them being produced in high volume, the importance of toxicity assessment is evident [1].
Traditional ‘in vivo’ methods of assessing chemical toxicity of various compounds require tests on animals, which
not only raises ethical concerns but is also expensive. According to recent estimates, current legislation may lead to a
demand for as many as 45 millions laboratory animals in the next 10 years [2]. Computational (‘in silico’) predictions,
obtained from a set of automatically generated descriptors using nothing more than structures of molecules as an input,
thus appear as a viable and cost eﬀective alternative. For this reason, Quantitative Structure–Activity Relationship
modelling has become an active research area in the recent years [3, 4, 5].
∗ mbudka@bournemouth.ac.uk

∗∗ bgabrys@bournemouth.ac.uk
1 Corresponding

author

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.022

194

M.M.
Budka,
ComputerScience
Science
(2012)1–9
193–201
Budka,B.B.Gabrys
Gabrys// Procedia
Procedia Computer
001(2010)

2

The main issue the researchers are struggling with is that the chemical space has a very high dimensionality. The
necessity to deal with even thousands of attributes, the number of which often exceeds the number of objects in the
dataset by an order of magnitude or more, is nothing uncommon in QSAR modelling. As a result, since any feasible
to obtain amount of training data covers only a fraction of the whole input space, in general one shouldn’t expect the
test and training data to be generated by the same distribution [1]. This in turn often leads to low, varying and diﬃcult
to estimate external predictive power of the models [6]. The problems resulting from working in a high dimensional,
sparse spaces are well known in the machine learning community and are collectively referred to as the ‘curse of
dimensionality’ [7, 8]. Some of the standard techniques addressing those problems will be discussed in later sections.
This paper describes a purely data–driven approach to QSAR modelling. No domain knowledge in the area of
toxicity or QSAR has been used, yet the predictive power of the resultant model is not significantly diﬀerent from
the performance of the best models developed by the experts in these areas. This has been achieved by compensating
the lack of expert knowledge with additional computations. The success of our method also demonstrates that the
computational power of modern, easily accessible computers coupled with a rigorous data–driven predictive model
development methodology, can be suﬃcient to develop good solutions without the need for domain expertise, resulting
in a more cost eﬀective and faster model development process.
1.1. The challenge
This paper is a result of the experiences we have gathered by taking part in the Environmental Toxicity Prediction
Challenge CADASTER 2009, organized by ICANN’09: International Conference on Artificial Neural Networks2 ,
European Neural Network Society (ENNS)3 and CADASTER project4 . Since toxicity prediction against animals is a
very complex issue, the challenge has focused on prediction of chemical toxicity against T. pyriformis – a commonly
accepted toxicity–screening tool [9, 10] – using previously unpublished dataset. Evaluation of all submitted models
have been conducted using the following criteria5 :
1. Methods with Root Mean Squared Error (RMSE) non–significantly diﬀerent from the method with lowest
RMSE were identified as the First–Pass Winners.
2. Methods providing the best likelihood criteria between estimated and observed confidences for the blind test set
were identified amid the First–Pass Winners.
1.2. The data
The data provided in the challenge came in the form of 5 datasets, each consisting of diﬀerent attributes (descriptors) and generated directly from the structures of molecules using various approaches and software. Additionally,
each dataset came divided into 3, non–overlapping parts: training data, known–test data and blind–test data. The
measured toxicity values have been given for the two former parts only, and the task was to produce prediction
for blind–test data. The details of the data can be found in Table 1, and the datasets can be downloaded from the
CADASTER webpage6 . For the development of our models we have decided to concatenate all 5 datasets, which has
resulted in a single set with 2251 attributes. After removing the attributes with constant values in the training data,
their number dropped to 2048.
2. Predictive model development methodology
A standard predictive model development methodology, which can be found in many machine learning textbooks
(e.g. [8]) consists of a number of clearly separated steps, typically including repeated model selection, data preprocessing, training, testing and postprocessing (e.g. combining). In practice however, it is not straightforward to identify
those steps clearly, as all stages are interwound. For example, data preprocessing is often a procedure optimized towards a specific classification or regression method rather than being carried out in separation.
2 http://www.kios.org.cy/ICANN09
3 http://www.e-nns.org/
4 http://www.cadaster.eu/node/4
5 http://www.cadaster.eu/node/65
6 http://www.cadaster.eu/node/67

M. Budka,
B. Gabrys
/ Procedia
Computer
Science
1 00
(2012)
193–201
M. Budka,
B. Gabrys
/ Procedia
Computer
Science
(2010)
1–9

195
3

Table 1: Details of descriptors and training/test datasets

descriptors
E–state indicesa
DRAGONb
SimulationsPlusc
QuantumChemistryd
MOEe
CONCATENATED

# attributes
60
1664
221
23
283
2251

# train
644
644
644
644
644
644

# known–test
449
449
449
449
449
449

# blind–test
120
120
120
120
120
120

a E–state

indices have been calculated at Virtual Computational Chemistry Laboratory site, http://www.vcclab.org/lab/indexhlp/etstate.html
descriptors have been calculated at Virtual Computational Chemistry Laboratory site using optimized structures,
http://www.vcclab.org/lab/edragon
c SimulationsPlus
descriptors
have
been
calculated
using
ADMET
Predictor,
http://www.simulations-plus.com/,
http://www.cadaster.eu/sites/default/files/challenge/Descriptors 400.pdf
d Quantum Chemistry descriptors have been calculated using AM1 MOPAC 7.1 and optimized structures, http://www.vcclab.org/lab/alogps
e MOE
(Molecular
Operating
Environment)
descriptors
have
been
calculated
using
optimized
structures,
http://www.cadaster.eu/sites/default/files/challenge/descr.htm
b DRAGON

A diagram of methodology used to develop the model described in this paper is given in Figure 1. The main
factors of success are (1) wide choice of base models, preprocessing and postprocessing methods, (2) computational
power suﬃcient to test many combinations of the above, and (3) experience allowing to take correct decisions or
at least informed guesses at each step, in the absence of full information, as it is rarely feasible to test all possible
combinations and scenarios.
3. Base model selection and data preprocessing
The problem of low external predictive power of QSAR models can have diﬀerent causes. The previously mentioned divergence between distributions underlying the training and testing data is one of them. Unfortunately, there is
not much that can be done about it, maybe except from making some assumptions about the unknown–test data distribution, which may or may not be correct. The second possible cause is closely related to model generalization ability
and the problem of overfitting, that is modelling noise instead of useful information [7, 8]. The methods addressing
the overfitting problem, do so by trying to control the complexity of the final model.
In general complexity of a solution can be controlled by the number of explicit parameters (degrees of freedom)
of a model, the number of meaningful attributes the model works with (input dimensionality) or both. By meaningful
attributes we understand the attributes which carry some information (e.g. ones which are not constant). An interesting
example of models susceptible to both these approaches are Artificial Neural Networks [7]. In ANNs the complexity
can be controlled either by the number of hidden units/layers or by the dimensionality of the input space, as each
additional input increases the number of input weights. There are however also methods for which the complexity can
be controlled in only one way. For example, in linear regression the number of degrees of freedom depends only on
the input dimensionality.
Due to the large number of attributes present in the dataset described in the previous section, the second complexity
control mechanism mentioned above has been used. The choice of a relatively simple and fast to train base model
built using a possibly large number of attributes has been inspired mainly by the theory behind the Support Vector
Machines [11, 12]. SVMs are learning systems that use a hypothesis space of linear functions in a high or even infinite
dimensional feature spaces [11]. In such spaces any feasible to obtain amount of data is usually not enough to train a
model with many parameters but at the same time even a simple model has enough degrees of freedom to adapt well
to the data. This choice is also supported by the Minimum Description Length principle [13] based on Kolmogorov’s
theory of complexity [14].
As for the problem of assessing the generalization ability of the model (the ‘Error estimator pool’ in Figure 1),
there are two commonly used protocols: bootstrap and cross–validation [15, 16]. The bootstrap method is based on
uniform sampling of the training data with replacement. The resulting dataset is used for building a model, which is
validated using the instances not selected during the sampling procedure. If the above operation is repeated multiple

196

M.M.
Budka,
ComputerScience
Science
(2012)1–9
193–201
Budka,B.B.Gabrys
Gabrys// Procedia
Procedia Computer
001(2010)

4

Figure 1: Predictive model development methodology

times, the mean error on the validation data converges to the true generalization error, assuming that the previously
unseen data has been generated from the same distribution as the training data.
In k–fold cross–validation the dataset is randomly split into k mutually exclusive subsets. Each of them plays the
role of validation data for a model trained on the remaining k − 1 folds in turn . A full k–fold cross–validation run
thus requires building exactly k models. The estimate of the generalization error is calculated as a mean error of all
models on their respective validation sets. For more accurate error estimation, the whole procedure is usually repeated
multiple times.
3.1. Ridge regression
Linear regression is perhaps the best known, most studied and one of the simplest techniques in regression analysis.
Its extension into the multiple variable case, the so called ‘Multiple Linear Regression’, is still being extensively and
successfully used in various forms, e.g. in the Partial Least Squares or Support Vector Regression methods [12, 17].
A frequent issue in multiple linear regression analysis is the collinearity or near–collinearity of the input variables,
leading to ill–posed problems, for which no unique least squares solution exist. In order to circumvent this issue,
various techniques have been developed, one of which is the Ridge Regression also known as Tikhonov regularization
[18]. The idea is to introduce an extra regularization term into the error function. Instead of minimizing the usual
Ax − b 2 (linear least squares), where · denotes the Euclidean norm, the objective function becomes Ax − b 2
+ Γx 2 , where Γ is the regularization or Tikhonov matrix, usually chosen to be a multiple of the identity matrix.
Ridge regression thus introduces a new parameter, which decides how much the solution departs from the ordinary
least squares regression and improves the conditioning of the problem. An important feature of ridge regression is that
a closed–form solution exists, which makes the regressor fast to train unlike more advanced methods, which require
gradient based and often suboptimal optimization procedure.
For the reasons given above, we have decided to choose ridge regression as a base model in the experiments, from
the pool of available models in Figure 1 . The actual implementation used came as a part of the PRTools toolbox [19].
For the sake of simplicity, the Tikhonov matrix has been set to be equal to the identity matrix.

197
5

M. Budka,
B. Gabrys
/ Procedia
Computer
Science
1 00
(2012)
193–201
M. Budka,
B. Gabrys
/ Procedia
Computer
Science
(2010)
1–9

3.2. Principal Component Analysis (PCA)
Principal Component Analysis is a standard and commonly used statistical dimensionality reduction technique,
often constituting one of the major data preprocessing steps (‘Preprocessor pool’ in Figure 1). It is a procedure for
linear transformation of a number of possibly correlated variables into a smaller number of uncorrelated variables
called principal components. The first principal component accounts for as much of the variability in the data as
possible, and each consecutive component accounts for as much of the remaining variability as possible [8].
The plot of 10–fold cross–validation mean squared error (MSE) vs. the number of principal components using
ridge regression is given in Figure 2. The cross–validation error is an estimate of performance on new, not yet seen
data (known–test set in this case). As it can be seen, the estimate is overoptimistic between approximately 30 and
100 principal components, that is where the actual minimum of the CV error is located, and for more then about
500 components. Moreover the CV and test errors diverge in the most interesting range 150 ÷ 450, where the actual
minimum of test set error almost coincides with a maximum of the cross–validation error, with the diﬀerence of the
MSE reaching up to 100%.
The results obtained are in fact comparable to the ones reported in the literature, both for individual models and
their combination (Table 2). The minimal known–test error is just 0.16% above the performance of the best individual
model reported in [6, 20], while the known–test error at the minimum of the CV error (for 74 principal components)
is about 16% lower then the mean performance of all individual methods described in the papers referred to above.
Selecting the final model on the basis of the CV error would thus result in known–test data MSE of 0.2359, ranking
the solution in a 3rd place when compared to 11 individual models from [6, 20].
We have however failed to improve the results discussed above considerably by using more advanced regression
models. For example a cross–trained ensemble of over 100 ANNs with two hidden layers each, developed using 74
principal components has produced MSE equal to 0.2055. While it is better then the performance of ridge regression,
the ensemble took incomparably more time to train and yet failed to outperform the best models reported in the
literature [6, 20].

1
CV error
Test error

0.9

10-fold CV error (MSE)

0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0

50

100

150

200

250 300 350 400
Principal component count

450

500

550

Figure 2: Regression error (MSE) on PCA transformed dataset v. the number of principal components

600

198

M.M.
Budka,
ComputerScience
Science
(2012)1–9
193–201
Budka,B.B.Gabrys
Gabrys// Procedia
Procedia Computer
001(2010)

6

Table 2: Regression error on PCA transformed dataset / errors reported in the literature

error
minimal CV (cross–validation)
known–test at minimum of CV
minimal known–test
combined model (literature)
best individual model (literature)
mean of all individual models (literature)
worst individual model (literature)

MSE
0.2150
0.2359
0.1985
0.1845
0.1932
0.2745
0.3603

RMSE
0.4637
0.4857
0.4455
0.4300
0.4400
0.5210
0.6000

3.3. Greedy attribute selection
While PCA is a feature transformation method, there are also attribute selection techniques, which focus on
choosing a single or multiple attribute subsets, most suitable according to some evaluation criterion. Intuitively,
the only attribute selection method which guarantees finding the global optimum of the evaluation criterion is the
exhaustive search. Unfortunately, this approach is only feasible for small datasets, as the size of the search space grows
exponentially with the number of attributes. For this reason, many approximate search methods have been developed,
including the genetic algorithms [21], simulated annealing [22] or greedy approaches [23]. Our preprocessor pool in
Figure 1 was thus augmented by a number of feature selection techniques.
Since the first two methods mentioned above are also computationally expensive (in our case it could possibly
take weeks to find a good attribute subset), we have focused on the greedy approaches, and specifically on the ‘plus–
L–takeaway–R’ method [23]. The idea behind greedy methods is to make a locally optimal decision at each step of
the optimization process. For feature selection this can for example mean starting with an empty subset and iteratively
adding a single best attribute at each step (forward selection) or starting with the full attribute set and iteratively
removing a single worst attribute (backward selection). The ‘plus–L–takeaway–R’ method is a combination of both
forward and backward selection, taking L forward steps followed by R backward steps and repeating the whole
procedure until some termination criterion is met.
The following attribute selection procedure has been thus devised. The data has been randomly divided into
training (2/3) and hold–out set (1/3) – the hold–out method [15] is yet another technique from the error estimator pool
in Figure 1. The L and R parameters have been set to 4 and 3 respectively, which was a compromise between search
space coverage and algorithm running time. Then, at each step of the feature selection procedure a ridge regressor has
been trained using the training set and tested using concatenated training and hold–out sets. If the test error decreased,
the new attribute was accepted. The above procedure was repeated 10 times for various random divisions of the data,
resulting in 10 feature subsets consisting of 267 distinctive attributes in total. The steps described above constitute
Stage 1 of the methodology depicted in Figure 1, resulting in a set of models trained using various attribute subsets.
4. Model selection for combination
Due to the success of ensemble methods [8, 24, 25], a decision to design a combined model was made. Although
there is still no universal notion of diversity, it is clear that the models to be combined should be diﬀerent in some way,
in order to complement each other. There are various ways to encourage diversity [26] and using diﬀerent subsets
of attributes to train the individual models is one of them. It is also the most natural approach in our case, since the
feature selection procedure has already produced 10 diﬀerent, although partly overlapping feature subsets.
Before constructing the final ensemble, yet another step was taken in order to increase the weights of good attributes in the combination. For all subsets of features from each step of each iteration of feature selection, 100 times
repeated 10–fold cross–validation was run and all models with error within one standard deviation of the best model’s
error have been chosen. This has resulted in a total of 29 ridge regressors trained on various subsets of attributes,
which were finally combined by averaging, as our postprocessor pool in Figure 1 consisted of mean and median combiners. The selection of the combiner and trained models to be combined forms Stage 2 of the methodology depicted
in Figure 1, resulting in the final ensemble model.

M. Budka,
B. Gabrys
/ Procedia
Computer
Science
1 00
(2012)
193–201
M. Budka,
B. Gabrys
/ Procedia
Computer
Science
(2010)
1–9

199
7

5. Experiments
The results presented in this section form the submission of the model predictions to the Environmental Toxicity
Prediction Challenge CADASTER 2009. The challenge has attracted over 100 participants from 25 countries. Since
the contestants were supposed to submit predictions for both known–test and blind–test data, and according to the
proposed model development workflow7 , two diﬀerent models have been developed:
1. Intermediate model, utilizing 644 instances from the original training set and used to make predictions for the
449 instances from the known–test dataset. Although the known–test instances have not been used to train the
intermediate models, the best one in terms of known–test data error out of multiple runs of the algorithm has
been chosen for submission.
2. Final model, developed utilizing 644 + 449 instances from the concatenated training and known–test sets and
used to make predictions for the 120 instances from the blind–test dataset. The numbers given in previous
section (29 regressors and 267 distinctive attributes) apply to the final model.
The challenge results have been given in Table 3 and can also be found at the CADASTER webpage8 . 10 First–
Pass Winners have been chosen with RMSE for the blind–test data non–significantly diﬀerent from the best model
according to the bootstrap test with p < 0.05. Our method was ranked as 6th . Note, that the diﬀerence for the blind
RMSE between the best and worst method is only 0.054, while the same diﬀerence for known RMSE reaches 0.177.
Table 3: First–Pass Winners ranking

rank
1
2
3
4
5
6
7
8
9
10

RMSE (blind)
0.741
0.742
0.756
0.760
0.765
0.778
0.789
0.794
0.794
0.795

RMSE (known)
0.353
0.367
0.410
0.292
0.395
0.288
0.424
0.416
0.400
0.247

RMSE (both)
0.463
0.472
0.503
0.435
0.497
0.439
0.523
0.519
0.509
0.426

The diagrams with predicted v. target values for the blind–test dataset for the 6 highest ranked methods, including
the method described in this paper have been given in Figure 3. Notice, that all methods tend to make highest errors
on the same, apparently diﬃcult to predict instances, which in fact determines their accuracy.
6. Conclusions
QSAR modelling is an attractive alternative to traditional methods of assessing chemical toxicity as it’s inexpensive, fast and does not raise ethical concerns. In the light of growing demand for toxicity evaluation, the role of QSAR
approaches is becoming increasingly important.
The main problem in generating computational toxicity predictions is the enormous dimensionality of the chemical
space, which is the source of other issues known as the ‘curse of dimensionality’. The method described in this paper
has been designed to addresses some of those issues in a purely data–driven way. This was achieved by following a
rigorous step by step methodology facilitated and supported by numerical optimization and comparative evaluations,
which was made possible by availability of computational power and advanced data processing algorithms. This in
7 http://www.cadaster.eu/node/71
8 http://www.cadaster.eu/final

results.html

200

M.M.
Budka,
ComputerScience
Science
(2012)1–9
193–201
Budka,B.B.Gabrys
Gabrys// Procedia
Procedia Computer
001(2010)

(a) Rank 1 model (final winner)

(b) Rank 2 model

(c) Rank 3 model (final winner)

(d) Rank 4 model

(e) Rank 5 model

(f) Rank 6 model (our method)

Figure 3: Predicted v. target values for the blind–test data

8

M. Budka,
B. Gabrys
/ Procedia
Computer
Science
1 00
(2012)
193–201
M. Budka,
B. Gabrys
/ Procedia
Computer
Science
(2010)
1–9

201
9

turn has allowed to oﬀset the lack of expert knowledge in the area of toxicity and QSAR modelling by additional
computations, with great success.
Good performance of the proposed model evaluated within the Environmental Toxicity Prediction Challenge 2009,
confirms the potential of data–driven approaches for various applications, including but not limited to QSAR modelling. A similar data–driven technique has been successfully applied by the authors to address the issue of robust
predictive modelling of water pollution using biomarker data [27] (accepted for publication). This is an important
outcome, as obtaining and integration of expert knowledge into the model is usually expensive, time–consuming and
not always possible, while computational resources regularly become cheaper and more accessible.
An additional outcome of the challenge is the ongoing work on a joint paper summarizing the results of the
competition and designating new research directions, co-authored by all 10 First–Pass winners and the organizers,
which hopefully will be a start of closer future collaboration.
References
[1] I. Tetko, G. Poda, C. Ostermann, R. Mannhold, Accurate In Silico log P Predictions: One Can’t Embrace the Unembraceable, QSAR &
Combinatorial Science 28 (8) (2009) 845–849.
[2] T. H¨ofer, I. Gerner, U. Gundert-Remy, M. Liebsch, A. Schulte, H. Spielmann, R. Vogel, K. Wettig, Animal testing and alternative approaches
for the human health risk assessment under the proposed new European chemicals regulation, Archives of toxicology 78 (10) (2004) 549–564.
[3] A. Richard, R. Benigni, AI and SAR approaches for predicting chemical carcinogenicity: survey and status report, SAR and QSAR in
Environmental Research 13 (1) (2002) 1–19.
[4] G. Klopman, H. Zhu, M. Fuller, R. Saiakhov, Searching for an enhanced predictive tool for mutagenicity, SAR and QSAR in Environmental
Research 15 (4) (2004) 251–263.
[5] A. Richard, Future of toxicology–predictive toxicology: An expanded view of chemical toxicity, Chem. Res. Toxicol 19 (10) (2006) 1257–
1262.
[6] H. Zhu, A. Tropsha, D. Fourches, A. Varnek, E. Papa, P. Gramatica, T. Oberg, P. Dao, A. Cherkasov, I. Tetko, Combinatorial QSAR modeling
of chemical toxicants tested against Tetrahymena pyriformis, Journal of Chemical Information and Modeling 48 (4) (2008) 766–784.
[7] C. Bishop, Neural Networks for Pattern Recognition, Oxford University Press, USA, 1995.
[8] R. Duda, P. Hart, D. Stork, Pattern Classification 2nd ed., Wiley–Interscience, 2000.
[9] T. Schultz, T. Netzeva, Development and evaluation of QSARs for ecotoxic endpoints: The benzene response-surface model for Tetrahymena
toxicity, Predicting Chemical Toxicity and Fate (2004) 265–284.
[10] T. Netzeva, T. Schultz, QSARs for the aquatic toxicity of aromatic aldehydes from Tetrahymena data, Chemosphere 61 (11) (2005) 1632–
1643.
[11] N. Cristianini, J. Shawe-Taylor, An introduction to support Vector Machines: and other kernel-based learning methods, Cambridge Univ Pr,
2000.
[12] V. Vapnik, Statistical learning theory, Wiley, New York, 1998.
[13] P. Gr¨unwald, I. Myung, M. Pitt, Advances in minimum description length, MIT Press, 2005.
[14] M. Li, P. Vitanyi, An introduction to Kolmogorov complexity and its applications, Springer Verlag, 1997.
[15] S. Weiss, C. Kulikowski, Computer systems that learn: classification and prediction methods from statistics, neural nets, machine learning,
and expert systems, Morgan Kaufmann Publishers Inc. San Francisco, CA, USA, 1991.
[16] R. Kohavi, A study of cross-validation and bootstrap for accuracy estimation and model selection, in: IJCAI, 1995, pp. 1137–1145.
[17] P. Geladi, B. Kowalski, Partial least-squares regression: a tutorial, Analytica Chimica Acta 185 (1986) 1–17.
[18] A. Tikhonov, V. Arsenin, F. John, Solutions of ill-posed problems, VH Winston Washington, DC, 1977.
[19] R. Duin, P. Juszczak, P. Paclik, E. Pekalska, D. de Ridder, D. Tax, S. Verzakov, Pr-tools 4.1, a matlab toolbox for pattern recognition,
http://prtools.org (2007).
[20] I. Tetko, I. Sushko, A. Pandey, H. Zhu, A. Tropsha, E. Papa, T. Oberg, R. Todeschini, D. Fourches, A. Varnek, Critical assessment of QSAR
models of environmental toxicity against tetrahymena pyriformis: focusing on applicability domain and overfitting by variable selection,
Journal of Chemical Information and Modeling 48 (9) (2008) 1733–1746.
[21] J. Holland, Adaptation in natural and artificial systems, MIT press Cambridge, MA, 1992.
[22] E. Aarts, J. Korst, Simulated annealing and Boltzmann machines, John Wiley & Sons New York, 1989.
[23] F. Van der Heijden, R. Duin, D. De Ridder, D. Tax, Classification, parameter estimation, and state estimation: an engineering approach using
MATLAB, John Wiley & Sons Inc, 2004.
[24] D. Ruta, B. Gabrys, An overview of classifier fusion methods, Computing and Information Systems 7 (1) (2000) 1–10.
[25] D. Ruta, B. Gabrys, Neural Network Ensembles for Time Series Prediction, in: International Joint Conference on Neural Networks, IEEE
Computer Society, 2007, pp. 1204–1209.
[26] L. Kuncheva, C. Whitaker, Measures of diversity in classifier ensembles and their relationship with the ensemble accuracy, Machine Learning
51 (2) (2003) 181–207.
[27] M. Budka, B. Gabrys, E. Ravagnan, Robust predictive modelling of water pollution using biomarker data, Water Research (In press).

