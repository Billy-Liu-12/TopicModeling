Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–8
1487–1494

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Investigating test selection techniques for scientiﬁc software using
Hook’s mutation sensitivity testing
Rob Gray, Diane Kelly
Royal Military College of Canada, Kingston Ontario, K7K 7B4, Canada

Abstract
Recent research by Hook and Kelly into Mutation Sensitivity Testing provided a test analysis technique suitable for
the challenges associated with testing scientiﬁc software. Speciﬁcally, Hook and Kelly’s work focused on overcoming
two challenges associated with scientiﬁc software — the frequent lack of an oracle and dealing with the often present
culmination of model reﬁnements and calculations of the science associated with the software. Their research was
speciﬁc to the detection of silent faults within scientiﬁc software made even more diﬃcult to detect given the aforementioned two challenges. The Mutation Sensitivity Testing technique is built upon the mutation testing foundation
laid by De Millo et al in their 1978 paper.
To demonstrate how Mutation Sensitivity Testing could be used to improve both tests and testing practices Hook
conducted a series of several small experiments in which eight functions were mutated and executed using 1155 test
cases to perform a cursory evaluation into the eﬀectiveness and eﬃciency of the test cases. As a follow-on to their
work, Hook and Kelly’s initial results are analyzed in detail to extract any noticeable patterns in regards to the test
eﬃciency of the tests. This initial research by Hook and Kelly suggested that only a few individual tests are needed
to detect most of the code faults.
The statistical analysis of their work suggests that for four of the eight functions, randomly selected inputs detected
a higher number of mutants than test cases developed with “hand-picked” inputs. The statistical analysis supporting
this claim are contained within this paper.Armed with this knowledge, the authors pressing forward with the analysis
of random tests for an additional set of functions to investigate those testing techniques that would allow software
testers to better select successful tests for scientiﬁc software.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Scientiﬁc Software, Software Testing, Mutation Sensitivity Testing, Random Tests, Code Faults, Oracle
Problem, Tolerance Problem, Silent Faults, Mutation Testing

1. Introduction
While there has been a signiﬁcant amount of research done into testing, mutation testing and scientiﬁc software
on their own, only Hook’s Masters Thesis at [1] and the follow-on published work by Hook and Kelly at [2] discuss
all three together through their development of the Mutation Sensitivity Testing technique. To fully leverage the
Email addresses: robgray@rmc.ca (Rob Gray), kelly-d@rmc.ca (Diane Kelly)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.165

1488

R. Gray, D. Kelly / Procedia Computer Science 1 (2012) 1487–1494
Rob Gray, Diane Kelly / Procedia Computer Science 00 (2010) 1–8

2

potential of Mutation Sensitivity Testing more research is still needed — this paper identiﬁes a portion of ongoing
research which leverages that potential. As the recent research by Hook and Kelly focused on the development of
their Mutation Sensitivity Technique for scientiﬁc software and its theoretical underpinnings, a detailed analysis of
the eﬀectiveness and eﬃciency of the tests they used on scientiﬁc software was not carried out. This initial research
by Hook and Kelly suggests that only a few individual tests are needed to detect most of the code faults — the existing
challenge is to determine if these tests can be determined a priori.
The aim of the ongoing research is to expand upon the existing research and data collected by Hook and Kelly
to investigate those testing techniques that would allow software testers to better select successful tests for scientiﬁc
software. It is expected the ongoing research will form a “useful plank to drop into the scientiﬁc software development
bridge” to help span the apparent professional separation between the software engineering community and the scientiﬁc community described by Kelly as a “chasm” [3]. This “useful plank” is expected to supply scientiﬁc software
testers with guidelines and / or principles to allow them to achieve a sense of trustworthiness in their software’s code
by means of a few successful tests as opposed to many less eﬀective tests. The ultimate end product of the research
is to develop a set of test selection techniques that maximize the detection of mutants — thus highlighting the best
means of detecting silent faults within scientiﬁc software.
The research captured within this paper is a stepping stone towards the ultimate goal of developing guidelines
which identify test selection techniques for scientiﬁc software testers. This paper provides a summary of Hook
and Kelly’s Mutation Sensitivity Testing technique, discusses the statistical analysis conducted on their work and
concludes with an initial assessment of the ongoing research into the eﬀectiveness of random tests (Pseudo-random
tests) versus purposefully selected tests (Popperian tests) for detecting silent faults within scientiﬁc software.
2. Background
The main contribution of Hook and Kelly’s work was the development and initial application of their Mutation
Sensitivity Testing which focuses on assessing the mutation sensitivity of a test set — as opposed to the mutant
“killing” ability of traditional mutation testing ﬁrst discussed by De Millo et al at [4]. Their Mutation Sensitivity
Testing technique was developed to overcome the unique characteristics associated with scientiﬁc software including
lack of oracle data to permit a tester to conclusively access their software and the accumulation of the approximations
and errors associated with the scientiﬁc model being modeled [5] [6] [7] — referred to by Hook and Kelly as the
oracle problem and the tolerance problem respectively.
Hook and Kelly’s work focused on the detection of silent faults which are a particular concern within scientiﬁc
software as silent faults often go undiscovered as they are not accompanied by an error message, a system crash, or a
wildly improbable result [1]. The oracle problem, i.e., the frequent lack of an oracle with scientiﬁc software, makes
silent failures even more diﬃcult to detect as testers do not accurately know the expected output for their test cases.
Adding to the diﬃculty of detecting silent faults is the fact that much scientiﬁc code is the culmination of model
reﬁnements and calculations, all of which contribute to the error embedded in the output (i.e., tolerance problem)
making it diﬃcult for testers to determine the actual source of the output inaccuracies let alone determining what an
appropriate tolerance would be for a test.
To investigate the oracle problem and tolerance problem associated with scientiﬁc software, Hook developed
Mutation Sensitivity Testing (MST). Circumventing the oracle problem by using P0 as a pseudo-oracle and measuring
the mutation sensitivity of each test, Hook calculates the relative error observed in the output of a given Pm for a given
t:
|Pm (t) − P0 (t)|
(1)
γ(Pm , t) =
|P0 (t)|

to alter traditional mutation testing into a tool for the study of scientiﬁc software testing, namely Mutation Sensitivity
Testing.
The tolerance problem for MST is examined through the assignment of a detection boundary (γd ). In MST,
detected mutants are those that exhibit an error larger or equal to a detection boundary (γd ) — detected mutants are
the MST equivalent of the traditional mutation testing’s killed mutants.
To demonstrate how Mutation Sensitivity Testing could be used to improve both tests and testing practices Hook
conducted a series of several small experiments using eight MATLAB functions taken from an introductory scientiﬁc

R. Gray, D. Kelly / Procedia Computer Science 1 (2012) 1487–1494
Rob Gray, Diane Kelly / Procedia Computer Science 00 (2010) 1–8

1489
3

computing course library. These eight functions were each individually mutated through the application of a set of
mutation operators developed from [8] — resulting in a total of 1492 mutants. The total number of mutants tested
was reduced to 1194 once the functionally equivalent 1 and non-viable2 mutants were removed. For each of the eight
functions test cases were developed in an attempt to maximize the number of detected mutants.
In development of the test cases, Hook used two testing techniques to generate the inputs for each function:
• Popperian testing: his invented testing technique, which involved Hook’s “hand picking” of inputs based on
boundary value testing and equivalence class partitioning, and
• Pseudo-Random testing: randomly generated inputs which were both legal (e.g., no alphabetic inputs when
numerical expected) and valid (e.g., inputed angles between 0◦ and 360◦ )
In total, Hook used 105 Popperian tests (T pop ) and 1050 Pseudo-random tests (T rnd ) for a combined total (T cmb ) of
1155 tests for the eight functions. To demonstrate test eﬃciency the detection scores of these set of tests are plotted
as a function of the number of applied best tests3 . The results can be seen in Figure 1 as plotted against four diﬀerent
values for the detection boundary (γd ). It should be noted that a detection boundary (γd ) of Inf (∞) will detect those
mutants which terminally failed for at least one but not all of the tests — if the mutant had a relative error of ∞ for all
tests it would have been deemed a non-viable mutant.
An interesting observation to be drawn from Figure 1 is that the overall eﬃciency of the test sets is strongly aﬀected
by the value of the detection boundary (γd ). It also illustrates that test eﬃciency starts to plateau at approximately ten
tests suggesting that only a few “best tests” are needed to detect most of the code faults.
It is this last observation of Figure 1 that has spawned the authors’ ongoing research into test selection guidelines
for scientiﬁc software testers — the challenge and focus of the current research is to determine if these “best tests”
can be determined a priori.
3. Statistical Analysis of Hook and Kelly’s Work
This section will outline the completed work into analyzing the initial research conducted by Hook at [1] and
published at [2]. As this work focused on the development of and the theory behind his Mutation Sensitivity Testing
technique for Scientiﬁc Software, the detailed analysis of the eﬀectiveness and eﬃciency of the testing techniques
were not thoroughly investigated. The steps taken and the results of extracting previously “unharvested” data from
their work are discussed in detail in the next sections.
The initial work of Hook at [1] was analyzed in detail to extract any noticeable patterns in regards to the test
eﬃciency of both the Popperian and the Pseudo-Random tests. The statistical analysis of Hook’s work suggests that
for four of the eight functions the randomly selected inputs contained within the Pseudo-Random tests detected, on
average, a higher number of mutants than the associated “hand-picked” Popperian tests. Further statistical analysis
suggests that when using the “best” Pseudo-Random tests ( i.e., those individual tests that detected the most number of
mutants), for ﬁve of the eight functions the n Pseudo-Random tests, on average, detected a higher number of mutants
than the associated n Popperian tests.
For the sake of brevity and clarity only one of the eight functions initially used by Hook will be discussed within
this paper.
The function examined is Hook’s binSearch function which conducts a binary search for a numerical value in a
vector. This function receives as inputs:
• A vector (X) of real numbers, and
• A real value (r) to be located within the vector.
The function outputs the index i in the vector such that:
1 a mutant is considered to be functionally equivalent if it always produces the same output as the original (i.e., unmutated) function on every
input
2 a mutant that produces a nonsensical output or terminates prematurely on every test [1]
3 the best tests are a set of n tests that detect the most mutants

1490

R. Gray, D. Kelly / Procedia Computer Science 1 (2012) 1487–1494
4

Rob Gray, Diane Kelly / Procedia Computer Science 00 (2010) 1–8
Results for 1194 Mutants

100

γd = 0.1
90
γd = 1

Detection Score (%)

80
γd = 10

70

60

50
γd = ∞
40

30
TPop
20

5

10
15
Number of Applied Best Tests

Trnd

Tcmb

20

25

Figure 1: Best test detection scores for four values of γd from [1]

• X(i) ≤ r ≤ X(i + 1)
The binSearch function contains 18 lines-of-code and has a McCabe’s Cyclomatic Complexity of ﬁve (5). The
function was mutated to create a total of 82 mutants which was reduced to 60 mutants after removal of the non-viable
and functionally equivalent mutants. Hook executed 11 Popperian tests and 110 Pseudo-random tests on the function
during his research.
3.1. Test Eﬃciency — Locating the “Best Tests”
Hook’s cursory investigation into his results produced Figure 1 suggesting that only a few tests are needed to
detect most of the code faults — these few good tests were termed “best tests”. A detailed investigation into the tests,
t, that were considered to be “best tests” was conducted in an attempt to gain initial insight into common features of
the “best tests” for each function. In the case of the binSearch function, Hook’s analysis highlighted four tests as
the “best tests” as can be seen in Table 1 — for each selected value of γd , the test which detected the most mutants (of
the 60 viable mutants for binSearch) and the associated mutant count are identiﬁed.
γd
0.1
1
10
Inf

Mutants
Detected
48
41
40
36

Test
trnd2
trnd82
trnd82
trnd82

Mutants
Detected
10
9
8
8

Test
t pop10
t pop10
t pop10
t pop10

Mutants
Detected
1
2
2
2

Test
trand3
t pop2
t pop2
t pop2

Table 1: - Hook’s “best tests” on 60 binSearch mutants

Detected
Detected
0
1
1
1

Test
N/A
trnd42
trnd42
trnd42

R. Gray, D. Kelly / Procedia Computer Science 1 (2012) 1487–1494
Rob Gray, Diane Kelly / Procedia Computer Science 00 (2010) 1–8

1491
5

In the process of selecting the “best tests”, Hook’s approach was to select the test which detected the most mutants
for the detection boundary (γd ) being used and remove the detected mutants from the pool of mutants. As a result of
this approach, tests that detected as many mutants (albeit the same ones as other tests) were no longer considered. In
order to characterize any test that is eﬀective in detecting mutants, these other “best tests” needed to be added back
in. This made the search for common features of the “best tests” very diﬃcult as the pool of “best tests” expanded
signiﬁcantly from the 10 - 15 initially anticipated from Figure 1.
In the case of the binSearch function, although the second Pseudo-random test used (trnd2 ) detected 48 mutants
when the detection boundary, γd , was set to 0.1, there was another 24 of the 110 Pseudo-random tests which also
detected 48 mutants with γd set to 0.1. Additionally, six (6) of the 11 Popperian tests detected 46 mutants and 86 of
the 110 Pseudo-random tests detected 46 or more mutants with γd set to a value of 0.1. This increased the number
of “best tests” to over 92 individual tests — making the task of identifying the common features a very daunting task
given the increasing list size of “best test” candidates.
As a means of reducing the size of “best test” candidates, the overall statistics of each function at each predeﬁned
detection boundary was investigated in an attempt to provide additional focus by investigating the eﬃciency of the
Popperian tests against the eﬃciency of the Pseudo-Random tests.
3.2. Overall Statistics for binSearch Function
Using the raw results from Hook, the overall statistics associated with mutant detection for each of the eight
functions at each of the four detection boundaries (γd ) was conducted. The results of this activity, capturing the
average number of detected mutants and the associated standard deviation, for the binSearch function are contained
within three tables, as follows:
◦ Table 2: average mutant detection statistics for the combined detection ability of the Popperian tests and the
Pseudo-Random tests T cmb for a total of 121 tests,
◦ Table 3: average mutant detection statistics for the 11 Popperian tests, T pop , and
◦ Table 4: average mutant detection statistics for the 110 Pseudo-Random tests, T rnd .
γd
0.1
1
10
Inf

Mean
43.7
34.8
33.1
32.8

Std Dev
7.5
5.3
4.9
4.9

Table 2: binSearch Combined Tests - 121 tests on 60 mutants

γd
0.1
1
10
Inf

Mean
35.1
28.4
27.5
26.4

Std Dev
13.6
8.8
9.7
10.1

Table 3: binSearch Popperian Tests - 11 tests on 60 mutants

The overall statistics of the binSearch indicates that a Pseudo-Random test detected, on average, more mutants
than a Popperian test — seemingly suggesting the Pseudo-Random tests were better at detecting mutants than the
Popperian tests. In regards to the other seven functions used by Hook, ﬁve of the seven indicated a similar trend to the
binSearch in that they also suggested that Pseudo-Random tests were better, on average, at detecting mutants than
the Popperian tests.

1492

R. Gray, D. Kelly / Procedia Computer Science 1 (2012) 1487–1494
Rob Gray, Diane Kelly / Procedia Computer Science 00 (2010) 1–8

γd
0.1
1
10
Inf

Mean
44.6
35.4
33.7
33.4

6

Std Dev
6.1
4.4
3.8
3.6

Table 4: binSearch Pseudo-Random Tests - 110 tests on 60 mutants

3.3. Eﬀectiveness of Popperian versus all Pseudo-Random Tests
Although the overall statistics of the binSearch seem to suggest the Pseudo-Random tests were better at detecting
mutants than the Popperian tests, this result could be due to the fact that there are ten times more Pseudo-Random
tests executed on each function than Popperian tests. As a result, t-tests were performed on the two (2) test sets to
determine if the observed diﬀerence between the means are statistically signiﬁcant. The procedures for the hypothesis
testing followed those identiﬁed at [9] and [10] for conducting t-tests on Two-Samples with the assumption of unequal
variances. The following parameters were used for the t-test conducted on each of Hook’s eight functions:
• Null Hypothesis (H0 ): the mean of the all Pseudo-Random tests is equal to the mean of the Popperian tests
(T pop )
• Alternate Hypothesis (Ha ): the Mean of the all Random tests (T rnd )is not equal to the mean of the Popperian
tests (T pop )
• Signiﬁcance Level (α) = 0.05
• Unequal variances were assumed for each test, and
• A 2-tailed test was conducted in each case.
• Abbreviations within the Tables are as follows:
◦ df: degrees of freedom
◦ t-Stat: Test Statistic
◦ p-Value: p-Value

• if p-Value ≤ α then reject H0
• if p-Value > α then do not reject H0

◦ ci: Conﬁdence Interval

The t-tests were conducted within MATLAB using the ttest2(x,y) command and the results were validated by
performing the equivalent test within Microsoft Excel.
γd
0.1
1
10
Inf

df
10.4
10.5
10.3
10.3

t-Stat
2.3
2.6
2.1
2.3

p-Value
0.04
0.02
0.06
0.04

ci
0.3
1.1
-0.3
0.23

ci
18.6
12.9
12.7
13.8

Table 5: binSearch t-test for All Pseudo-Random to Popperian

The results of the t-test on the binSearch function are found at Table 5 and suggest that for γd values of 0.1,
1 and Inf there is a statistically signiﬁcant diﬀerence between the mean of all Pseudo-Random tests and the mean
of the Popperian tests. Additionally, these results suggest there is a 95% probability that the diﬀerence between the
two means falls between the two Conﬁdence Interval (ci) values associated with the detection boundary (γd ). These
results combined with the information contained at Tables 3 and 4 suggest that the Pseudo-Random tests were better

R. Gray, D. Kelly / Procedia Computer Science 1 (2012) 1487–1494
Rob Gray, Diane Kelly / Procedia Computer Science 00 (2010) 1–8

1493
7

at detecting binSearch function mutants than Popperian tests for detection boundary (γd ) values of 0.1, 1 and Inf.
With a detection boundary (γd ) of 10, the t-test failed to reject the null hypothesis with a signiﬁcance level of 0.05 —
although it was very close to being rejected with a p-Value of 0.0592.
In regards to the other seven functions used by Hook, three other functions similarly showed a statistically significant diﬀerence between the mean of the Pseudo-Random tests and those of Popperian tests for some values of γd —
again suggesting the Pseudo-Random tests were better at detecting mutants than Popperian tests for those functions.
3.4. Eﬀectiveness of n Popperian versus n Best Pseudo-Random Tests
As a means of reducing the number of Pseudo-Random tests to investigate for common traits or features, the best
n Pseudo-Random tests were selected for each function for comparison against n Popperian to see if there is some
identiﬁable pattern in the “best tests”, where n is the number of Popperian tests for that particular function (11 in the
case of binSearch). Again it is important to stress that the term “best” is used to indicate the test which detects the
most mutants. The detection statistics for the 11 best Pseudo-Random tests on 60 mutants are contained within Table
6 and should be compared to the detection statistics for the 11 Popperian tests at Table 3.
γd
0.1
1
10
Inf

Mean
48
40.1
37.8
35.3

Std Dev
0
0.70
2.3
0.47

Table 6: binSearch “Best” Pseudo-Random Tests - 11 tests on 60 mutants

Following the same process and procedures discussed within Section 3.3 additional t-tests were conducted using
the the “Best” n Pseudo-Random tests — where n is the number of Popperian tests associated with each function. In
these t-tests, the null hypothesis, (H0 ), is that the mean of the “Best” n Pseudo-random tests is equal to the mean of
the Popperian tests. The results of this t-test are found in Table 7
γd
0.1
1
10
Inf

df
10
10.1
11.1
10.0

t-Stat
3.2
4.4
3.5
2.9

p-Value
0.01
0.001
0.005
0.015

ci
3.8
5.8
3.8
2.1

ci
22.0
17.6
16.9
15.7

Table 7: binSearch t-test for “Best” Pseudo-Random to Popperian

The results of this t-test on the binSearch function suggests that for all four selected values of γd there is a
statistically signiﬁcant diﬀerence between the mean of the “Best” 11 Pseudo-random tests and the mean of the 11
Popperian tests. Additionally, these results suggest there is a 95% probability that the diﬀerence between the two
means falls between the two Conﬁdence Interval (ci) values associated with the detection boundary (γd ). These
results combined with the information contained at Tables 3 and 6 suggest that the “Best” 11 Pseudo-Random tests
were signiﬁcantly better at detecting binSearch function mutants than Popperian tests for the four selected values
of γd . In regards to the other seven functions used by Hook, ﬁve other functions similarly showed a statistically
signiﬁcant diﬀerence between the mean of the Pseudo-Random tests and those of Popperian tests for some values of
γd .
Although the the comparison of the n best Pseudo-random tests against the n Popperian tests may seem unfair
it does suggest the use of random testing alone is as strong or stronger than carefully selected tests as long as there
are “enough” of them. In the case of the research conducted by Hook and Kelly, “enough” seems to be ten times the
number of “hand-picked” Popperian tests. Generating the Pseudo-random tests for each function are quick compared
to designing Popperian tests and for the ongoing research the quickly developed tests are a better route to permit the
research to focus on the common patterns and features found within the “best tests”.

1494

R. Gray, D. Kelly / Procedia Computer Science 1 (2012) 1487–1494
Rob Gray, Diane Kelly / Procedia Computer Science 00 (2010) 1–8

8

4. Conclusion
The statistical analysis of Hook and Kelly’s research has suggested that their Pseudo-random tests which consisted
of randomly selected valid and legal inputs for functions were more eﬀective at detecting mutants than their test cases
developed through “hand-picking” inputs based on boundary value testing and equivalence class partitioning.
The research towards identifying the common traits or features of tests that can be considered “best tests” is
ongoing and builds upon Hook’s work that shows a very small number of tests have the capability of detecting a
large number of mutants in scientiﬁc software. What is interesting is that we may be able to identify those tests by
analyzing a reasonable number of random tests. Armed with the knowledge that, in many cases, Pseudo-random
tests can be more eﬀective at detecting mutants in functions that are largely computational in nature, the authors are
pressing forward with the development of new functions and their associated Pseudo-random tests with the intent of
iteratively developing a set of test selection techniques that maximize the detection of mutants — thus highlighting
the best means of detecting silent faults within scientiﬁc software.
Once completed, it is hoped this research will form a “useful plank to drop into the scientiﬁc software development
bridge” to help span the apparent professional separation between the software engineering community and the scientiﬁc community described by Kelly [3] as a “chasm” . This “useful plank” is expected to supply scientiﬁc software
testers with guidelines and / or principles to allow them to achieve a sense of trustworthiness in their software’s code
by means of a few successful tests as opposed to many less eﬀective tests.
5. References
[1] D. Hook, Using code mutation to study code faults in scientiﬁc software, Masters’ thesis, Queen’s University (Apr. 2009).
[2] D. Hook, D. Kelly, Mutation sensitivity testing, Computing in Science and Engineering 11 (2009) 40–47.
doi:http://doi.ieeecomputersociety.org/10.1109/MCSE.2009.200.
[3] D. Kelly, A software chasm: Software engineering and scientiﬁc computing, Software, IEEE 24 (6) (2007) 120–119.
doi:10.1109/MS.2007.155.
[4] R. A. DeMillo, R. J. Lipton, F. G. Sayward, Hints on test data selection: Help for the practicing programmer, Computer 11 (4) (1978) 34–41.
URL http://portal.acm.org/citation.cfm?id=1300736.1301357
[5] R. Sanders, D. Kelly, Dealing with risk in scientiﬁc software development, Software, IEEE 25 (4) (2008) 21–28. doi:10.1109/MS.2008.84.
[6] R. Sanders, D. Kelly, The challenge of testing scientiﬁc software, in: CAST ’08: Proceedings of the 3rd Annual Conference of the Association
for Software Testing, Association for Software Testing, Toronto ON, 2008, pp. 30–36.
[7] R. Sanders, The development and use of scientiﬁc software, Masters thesis, Queen’s University (Apr. 2008).
[8] J. H. Andrews, L. C. Briand, Y. Labiche, Is mutation an appropriate tool for testing experiments?, in: Proceedings of the 27th international
conference on Software engineering, ACM, St. Louis, MO, USA, 2005, pp. 402–411. doi:10.1145/1062455.1062530.
URL http://portal.acm.org/citation.cfm?id=1062455.1062530
[9] D. Montgomery, G. Runger, Applied statistics and probability for engineers, 3rd Edition, John Wiley & Sons, New York, 2003.
[10] R. Walpole, R. Myers, S. Myers, Probability and Statistics for Engineers and Scientists, 2nd Edition, Prentice Hall, New Jersey, 1998.

