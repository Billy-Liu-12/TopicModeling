Procedia Computer
Science
Procedia Computer
001(2010)
1–8
Procedia
ComputerScience
Science
(2012)
867–874

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Interactively exploring elimination orderings in symbolic sparse
Cholesky factorization
Michael L¨ulfesmanna,∗, Simon R. Leßenicha , H. Martin B¨uckera
a Institute

for Scientiﬁc Computing, Center for Computational Engineering Science, RWTH Aachen University, D–52056 Aachen, Germany

Abstract
When large sparse symmetric systems of linear equations are solved by the Cholesky factorization, nonzero elements can be generated at positions where the original matrix contains zero elements. This phenomenon is called
ﬁll-in and it is often crucial in large-scale problems. The symbolic Cholesky factorization solely takes into account
the nonzero structure of a sparse matrix to determine the nonzero structure of its Cholesky factor. Sequences of
elimination graphs are typically used to model this combinatorial problem. We propose an interactive educational
module to visualize and explore the symbolic Cholesky factorization in terms of both elimination graphs and matrix
representation. We describe the design and implementation of this interactive module that is intended to be used in a
face-to-face learning environment.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Combinatorial scientiﬁc computing, symbolic sparse Cholesky factorization, exploration and
visualization of elimination graphs and matrix representation, interactive educational module, face-to-face learning
environment
PACS: 01.50.-i, 02.10.Ox, 02.60.Dc
2000 MSC: 97U70, 05C50, 68R10, 68W05, 15A23, 65F05, 65F50

1. Introduction
The solution of large sparse systems of linear equations is among the fundamental building blocks in computational
science and engineering. A prominent source of such problems stems from the discretization of partial diﬀerential
equations. If the coeﬃcient matrix of a linear system is symmetric positive deﬁnite, the Cholesky factorization is
typically applied. During the course of this matrix factorization, a nonzero element can be generated at a position
where the original matrix contains a zero element. This phenomenon is called ﬁll-in. Excessive amount of ﬁll-in is
often computationally prohibitive for large-scale problems from real-world applications. Since reordering of the rows
and columns has an eﬀect on the amount of ﬁll-in produced by the factorization, it is important to understand how
ﬁll-in occurs and how it can be reduced. This is the purpose of the symbolic part of a sparse Cholesky factorization
whose focus is on the nonzero structure of the matrix rather than on the numerical values of the nonzero elements.
∗ Corresponding

author
Email addresses: luelfesmann@sc.rwth-aachen.de (Michael L¨ulfesmann), lessenich@sc.rwth-aachen.de (Simon R. Leßenich),
buecker@sc.rwth-aachen.de (H. Martin B¨ucker)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.095

868

M. L¨ulfesmann,
R. Leßenich,
M. B¨uckerComputer
/ Procedia Science
Computer1 Science
00 (2010) 1–8
M. L¨uS.
lfesmann
et al.H./ Procedia
(2012) 867–874

2

The symbolic Cholesky factorization is carried out prior to the numerical factorization determining the actual values
of the nonzero elements.
Since the early 1960s, the phenomenon of ﬁll-in has been thoroughly investigated using graph-theoretical formulations to model the underlying combinatorial problems [1–5]. In essence, the symbolic Cholesky factorization
is modeled by a sequence of graphs obtained from eliminating vertices one after another obeying certain rules that
also eﬀect the edges. In the traditional classroom paradigm, these graph transformations are taught by referring extensively to mathematical formulæ and plotting (a subset of) the resulting graphs. However, we strongly belief that
adding an interactive resource for exploring these graph transformations into a traditional lecture course will increase
the students’ understanding of the ﬁll-in phenomenon. We stress that it is not our aim to replace the rich dynamic
of spontaneous verbal communication in a face-to-face learning environment by a comprehensive e-learning environment [6]. We rather intend to progress into the direction of a blended learning environment in which diﬀerent learning
methods including computer-mediated educational tools are combined with classroom-delivered content.
To begin with a ﬁrst step into this direction, we introduce a new educational module designed to explore interactively the combinatorial nature of the symbolic Cholesky factorization. It is important in this context to visualize the
sequence of graphs and to combine the transformations of the graph with the corresponding transformations of the
underlying matrix. Dynamic user interaction is possible by selecting a vertex for the next step using the computer
mouse.
There are some teaching resources dealing with matrix factorizations. The textbook by Heath [7] comes with a
set of interactive educational modules including Cholesky and LU factorization. Moler implements an illustration
of LU factorization within the collection of MATLAB ﬁles used in the textbook [8]. Both these resources illustrate
algorithms for the numerical factorization of dense matrices and solely employ the matrix representation. Symbolic
factorization for sparse matrices and the underlying graph models are not covered. For teaching graph algorithms,
there are more general tools including [9, 10]. These two tools are designed to demonstrate networks ﬂows or graph
search algorithms rather than focusing on graphs from computational science and engineering. In particular, these
tools do not support the combination of graph and matrix representation which is important to understand the Cholesky
factorization. Furthermore, in these tools, vertices and edges cannot be removed from a graph during the execution of
an algorithm which is necessary for the Cholesky factorization. Also, the layout of a given graph needs to be speciﬁed
by the user. In contrast, our approach makes use of software for drawing graphs automatically.
The structure of this article is as follows. In Section 2, we describe the Cholesky factorization and the corresponding graph model to analyze ﬁll-in. In Section 3, the new interactive educational module to visualize and explore the
graph elimination process is presented. The implementation based on the scripting language Python is outlined in
Section 4. In Section 5, preliminary experiences with the module in classroom are reported.
2. Sparse Cholesky factorization
For the solution of systems of linear equations with symmetric positive deﬁnite coeﬃcient matrices, the Cholesky
factorization is an eﬃcient and robust technique [11]. Here, an n × n matrix A is uniquely decomposed into the
factorization
A = L · LT ,

where L is an n × n lower triangular matrix. Algorithmically, the Cholesky factorization computes the factor L column
by column, starting from 0 to n − 1. The algorithm constructs the kth column of L by ﬁrst computing the diagonal
entry by
L(k, k) ←

A(k, k) − L(k, 0 : k − 1) · L(k, 0 : k − 1)T

and then its remaining entries in row i = k + 1, k + 2, . . . , n − 1 by
L(i, k) ← A(i, k) − L(i, 0 : k − 1) · L(k, 0 : k − 1)T /L(k, k).
If A is sparse, there may be more nonzero elements in L + LT than in A. This phenomenon is called ﬁll-in. In
practice, it is crucial to understand where ﬁll-in occurs, i.e., at which matrix position a zero element A(i, k) turns into

M. L¨uM.
lfesmann,
S. R. Leßenich,
H. M. B¨uComputer
cker / Procedia
Computer
Science
00 (2010) 1–8
L¨ulfesmann
et al. / Procedia
Science
1 (2012)
867–874

3
869

a nonzero element L(i, k) when the factorization is carried out in-place, overriding the matrix A by its factor L. To this
end, consider column k of L. From the above algorithm, a nonzero element L(i, k) with k ≤ i ≤ n − 1 is generated in
two cases. In the ﬁrst case, there already is a nonzero element A(i, k), showing that the sparsity pattern of the lower
triangular part of A carries over to L. However, ﬁll-in occurs in the second case where A(i, k) = 0 and there is a
column j with 0 ≤ j ≤ k − 1 such that
L(i, j) 0 and L(k, j) 0.
(1)
To analyze the combinatorial nature of the Cholesky factorization, the following graph-theoretical formulation is
widely used [4, 5]. To the n × n coeﬃcient matrix A, an ordered graph Gα = (V, E, α) is associated as follows. The
set of vertices V is ordered. This ordering of |V| = n vertices is described by a bijection α : {0, 1, . . . , n − 1} → V. A
vertex α(i) ∈ V represents row i of the matrix A. There is an edge (α(i), α( j)) ∈ E if and only if A(i, j) 0 and i > j.
So, the ordered graph Gα corresponds to the matrix A specifying a particular ordering of the rows and columns. Any
reordering of the rows and columns can be described by the class of symmetric permutations QAQT of the matrix A,
where Q is a permutation matrix. The unordered graph G = (V, E) associated to this equivalence class does not involve
any information on a particular ordering of the rows and columns. The graphs G and Gα have the same structure. We
will always assume that the matrix A is irreducible so that the graphs G and Gα are connected.
We are now interested in determining the nonzero structure of the Cholesky factor L in terms of the graph model.
Suppose that the ﬁrst k columns of L are already computed in the order 0, 1, 2, . . . , k − 1. The situation where ﬁll-in
occurs in a matrix position A(i, k) = 0 is transferred to the graph G as follows. In G, there is no edge between the
vertices representing row i and row k. According to (1), if there is a vertex representing a row j that is adjacent in G
to the two vertices representing row i and row k, a new edge between these two vertices is generated in a modiﬁed
graph where the vertex representing row j is removed. Since this process is carried out for all neighbors of the vertex
representing row j we arrive at the following vertex elimination rule: Given a vertex v in a graph G, generate a
graph Gv from G by (i) adding edges so that all vertices adjacent to the vertex v are pairwise adjacent, and (ii) deleting
v and all its incident edges. This graph
Gv = (V\{v}, E(V\{v}) ∪ D(v))
is called the v-elimination graph of G. Here, the deﬁciency D(v) of a vertex v in a graph G = (V, E) is the set of edges
deﬁned by
D(v) = {(x, y) | (x, v), (y, v) ∈ E, (x, y) E, x y}.
For an ordered graph Gα = (V, E, α), the elimination process

P(Gα ) = [G0 , G1 , . . . , Gn−1 ]
is the sequence of elimination graphs deﬁned recursively by G0 = G and Gi+1 = Giα(i) for i = 0, 1, . . . , n − 2. The ﬁll-in
of an elimination process P(Gα ) is given by
n−1

F(Gα ) =

Di (α(i)),
i=0

where Di (α(i)) is the deﬁciency of the vertex α(i) in the graph Gi . After eliminating all vertices from G = (V, E) in
the order α(0), α(1), . . . , α(n − 1) , the resulting graph involving all edges corresponding to ﬁll-in during the entire
elimination process is given by
G+α = (V, E ∪ F(Gα )).

Assuming no cancelation of nonzero elements, the edges Di (α(i)) correspond exactly to the ﬁll-in generated during
the ith step of the elimination process. More precisely, let the ﬁrst i vertices be eliminated from the graph in the order
α(0), α(1), . . . , α(i − 1) . This choice of the ordering induces a particular permutation matrix Q that is set up during
the elimination process step by step. In the matrix representation, carrying out all n steps corresponds to the Cholesky
factorization
(2)
QAQT = L · LT .

870

M. L¨ulfesmann,
R. Leßenich,
M. B¨uckerComputer
/ Procedia Science
Computer1 Science
00 (2010) 1–8
M. L¨uS.
lfesmann
et al.H./ Procedia
(2012) 867–874

4

Then, the edges Di (α(i)) represent the ﬁll-in produced by handling the ith column of L where this ﬁll-in occurs in
some columns whose index is larger than i.
The Cholesky factorization (2) leads to diﬀerent nonzero patterns of the factor L when using diﬀerent orderings
represented by Q in the elimination process. From a computational point of view, we would like to ﬁnd an ordering α
involving no more ﬁll-in edges than necessary. Ideally, we would like to ﬁnd an ordering that minimizes |F(Gα )|
over all orderings α. Unfortunately, Yannakakis [12] showed that this minimum ﬁll-in problem is NP-complete.
Practical implementations of sparse Cholesky factorization therefore rely on heuristics to compute some ordering
with an acceptable number of ﬁll-in. Examples of such heuristic approaches include minimum degree [13] and nested
dissection [14].
3. Visualizing and exploring the symbolic Cholesky factorization
In the previous section, the graph-theoretical formulation of the elimination process is summarized using standard
mathematical notations. For teaching symbolic Cholesky factorization in the classroom, we introduce an educational
resource that helps to illustrate these standard notations. By exploring the graph transformations interactively, the
students will be in the position to deepen their understanding of the elimination process.
This section will give the reader an impression of the new educational module by carrying out a particular elimination process for a given matrix. The nonzero structure of this sample matrix with n = 6 is depicted in Fig. 1. The
user interface of the module consists of two panels. There is a graph panel on the left side of the window and a matrix
panel on the right. In addition, there are four buttons in the top left corner of the window to navigate through the
elimination process. There is a button to choose, at step i, the “natural” ordering α(i + 1), α(i + 2), . . . , α(n − 1) for
the remaining vertices. However, the intended use of this interface is that the student chooses an elimination ordering
by interactively clicking on the vertices of the graph. The remaining three buttons can then be used to go forward and
backward in the sequence of steps for a user-speciﬁed elimination ordering. After choosing a vertex v interactively,
the vertex v and its incident edges are removed and the neighbors of v are connected to a clique by adding additional
ﬁll-in edges. Thereafter, both the next elimination graph and the resulting matrix are drawn. In addition, the bottom
left corner shows the number of ﬁll-in edges that would result from interactively choosing the vertex α(i) as the next
vertex to be eliminated. That is, the value of |Di (α(i))| is given when the computer mouse points to the vertex α(i)
without selecting this vertex.
In Fig. 1, we show the initial problem set up consisting of the sparsity pattern of a matrix A and its corresponding
elimination graph G0 . Now, we interactively choose the ﬁrst vertex α(0) = 2 of the elimination ordering α. After that
mouse click, the window is redrawn with the resulting elimination graph G1 given in Fig. 2. Once the ﬁrst vertex is
eliminated, the matrix panel switches from the matrix A to its Cholesky factor L for the entire remaining elimination
process. In the matrix representation, we also take into account the permutation matrix that is implicitly built up
during the elimination process. In each step of the elimination process, we reorder the rows and columns according
to the vertex that is currently eliminated. For instance, row 2 and column 2 are moved to the ﬁrst position when

Figure 1: Graph G0 and nonzero pattern of matrix A before
performing the Cholesky factorization.

Figure 2: Elimination graph G1 and the corresponding factor L after eliminating vertex α(0) = 2.

M. L¨uM.
lfesmann,
S. R. Leßenich,
H. M. B¨uComputer
cker / Procedia
Computer
Science
00 (2010) 1–8
L¨ulfesmann
et al. / Procedia
Science
1 (2012)
867–874

Figure 3: Graph G2 after eliminating two vertices in the
order 2, 3 .

5
871

Figure 4: Graph Gn−1 after eliminating ﬁve vertices leading
to α = 2, 3, 0, 1, 4, 5 .

comparing Fig. 1 and Fig. 2. The ﬁll-in edge D0 (α(0)) = (4, 1) is added and depicted as a red thick edge. The new
nonzero element corresponding to that ﬁll-in is added to the factor as a red bullet.
We continue with picking the next vertex α(1) = 3. The resulting graph G2 and its factor L are given in Fig. 3. We
repeat this step until there is only one vertex left in the elimination graph Gn−1 . Now, the elimination ordering α and
its corresponding permutation matrix Q are completely determined and the resulting factor L of QAQT is displayed in
the matrix panel of Fig. 4. The axes of the matrix contain the elimination ordering α = 2, 3, 0, 1, 4, 5 . Furthermore,
all nonzero elements of L corresponding to the ﬁll-in F(Gα ) are given by red bullets. The value of |F(Gα )| is displayed
below the elimination graph Gn−1 .
4. Implementation details of the educational module
In this section, we give an overview about the implementation details of our module for visualizing the symbolic
Cholesky factorization. The module is written in Python (version 2). We choose this scripting language for two
reasons. Python oﬀers a rich set of high-level programming constructs allowing simple implementations of algorithms
with minimal human eﬀort. It is also powerful because of the availability of various packages implementing features
needed in the ﬁeld of computational science. More precisely, we use the following packages:
• NetworkX [15] for providing graph data structures,
• matplotlib [16] for visualizing graphs and matrices,
• SciPy [17] for supporting appropriate data structures for sparse matrices and handling the matrix ﬁle input,
• wxWidgets for drawing the window containing the graph and the matrix panel, and
• wxPython providing Python bindings for wxWidgets.
The interplay of these packages is as follows. The input instance for our module is a symmetric matrix given in
the matrix market format [18]. The SciPy package includes a method to read input ﬁles in this format and convert
it to an internal matrix data structure. The NetworkX package takes matrices in a SciPy representation and converts
them to its internal graph data structure. The NetworkX package makes its drawing functionality available by using
the matplotlib package. In contrast to other educational tools where the user is responsible for the layout of a graph,
NetworkX computes the layout automatically.
Recall from the previous section that the interactive vertex selection is an important feature. It is implemented using event handlers. An event handler triggers some pre-deﬁned method after the occurrence of an event. There are two
diﬀerent events: motion notify event which is used to predict the expected ﬁll-in edges choosing a speciﬁc vertex and
button press event which handles mouse clicks. An excerpt of the event handler for the event button press is shown in
Fig. 5. It is necessary for the interactive choice of vertices. If the mouse button is pressed, the method cholesky step

872

2

4

6

8

10

12

M. L¨ulfesmann,
R. Leßenich,
M. B¨uckerComputer
/ Procedia Science
Computer1 Science
00 (2010) 1–8
M. L¨uS.
lfesmann
et al.H./ Procedia
(2012) 867–874

6

# C o n n e c t b u t t o n p r e s s e v e n t t o method b u t t o n p r e s s
m p l c o n n e c t ( ’button_press_event ’ , b u t t o n p r e s s )
...
def b u t t o n p r e s s ( event ) :
# S e l e c t v e r t e x and t r i g g e r method c h o l e s k y s t e p
# event : Information about the button press event
# I s t h e mouse p o i n t e r i n s i d e t h e g r a p h p l o t ?
i f event . inAxes :
# O b t a i n v e r t e x v i f t h e mouse i s p r e s s e d o v e r a v e r t e x
v = g e t V e r t e x F r o m C o o r d (G, e v e n t )
i f v != None :
# Code t o t r i g g e r method c h o l e s k y s t e p w i t h v e r t e x v
Figure 5: Excerpt of the event handler for the event button press.

is triggered with the vertex v when the mouse pointer is above v. In line 2 the method button press is connected to
the event button press. That is, for every mouse click, the method button press is called with the parameter event
which contains the coordinates of the mouse pointer while the mouse button is pressed.
The implementation of the symbolic Cholesky factorization is given in Fig. 6. These statements eliminate the
vertex v from the current elimination graph G. Firstly, the occurrence of ﬁll-in edges are computed by iterating over
the neighbors of vertex v in lines 2–5. Secondly, the vertex v and the incident edges are removed in lines 8–10. In
line 13 the new elimination graph with ﬁll-in edges is constructed. At the end, this graph and its corresponding matrix
are drawn. This ﬁgure gives an impression of the ease-of-use and ﬂexibility of the graph data structures provided by
NetworkX and the Python programming language.

2

4

# Compute f i l l − i n e d g e s
for u in G. neighbors ( v ) :
for w in G. neighbors ( v ) :
i f u < w and ( u , w) n o t i n G . e d g e s ( ) :
f i l l i n e d g e s . a p p e n d ( ( w, u ) )

6

8

10

12

# Remove v e r t e x v and c o n n e c t n e i g h b o r s t o c l i q u e
for u in G. neighbors ( v ) :
G. d e l e t e e d g e ( v , u )
G. d e l e t e n o d e ( v )
# Add f i l l − i n e d g e s t o g r a p h
G. add edges from ( f i l l i n e d g e s )

14

16

18

# U p d a t e g r a p h G and m a t r i x M
G . draw ( ax=G r a p h P a n e l )
G . d r a w e d g e s ( f i l l i n e d g e s , ax=G r a p h P a n e l )
MatrixPanel . update ( alpha , f i l l i n e d g e s )
Figure 6: Excerpt of the symbolic Cholesky factorization eliminating the vertex v from the current elimination graph G.

M. L¨uM.
lfesmann,
S. R. Leßenich,
H. M. B¨uComputer
cker / Procedia
Computer
Science
00 (2010) 1–8
L¨ulfesmann
et al. / Procedia
Science
1 (2012)
867–874

7
873

5. Preliminary classroom experiences
The interactive module was used in a course on high-performance computing at RWTH Aachen University addressing the following topics: blocking strategies to exploit deep memory hierarchies, parallel computing, direct
solution of large sparse systems of linear equations, and graph partitioning. The majority of students were enrolled in
the bachelor program of Computational Engineering Science. The second largest group consisted of students enrolled
in the bachelor program of Computer Science. We stress that we did not carry out an extensive and profound evaluation of the interactive module. The following discussion summarizes our experiences when using the module for the
ﬁrst time.
The students immediately like the visualization of the ﬁll-in phenomenon according to the saying “a picture is
worth a 1000 words.” Also, the interactivity is appreciated. In particular, the students tend to explore the sequence of
elimination graphs by canceling the choice of a vertex to be eliminated in step i of the elimination process. That is,
they go back from the elimination graph Gi to the previous graph Gi−1 to consider a diﬀerent vertex to be eliminated.
Another advantage mentioned by our students is the availability of the matrix and graph notation at the same time.
This addresses the fact that some students prefer the matrix notation while others feel more comfortable with the graph
notation. The students help to improve the module by suggesting to include the permutation matrix that is implicitly
built up during the elimination process. By visualizing the reordering of the columns and rows in the matrix notation,
we adopted this suggestion compared to a previous version of the module which is not described here. We are also
considering the implementation of further extensions to the module. For instance, one student suggested to highlight
the vertex that would be eliminated by the minimum degree heuristic at the current step as an alternative for the vertex
chosen interactively by the user.
6. Concluding remarks
We propose an interactive educational module to illustrate the symbolic sparse Cholesky factorization. The main
idea behind this computer-mediated teaching tool is to interactively explore not only the sequence of underlying elimination graphs but also to visually relate these graph transformations with the corresponding matrix transformations.
Though primarily designed for a face-to-face learning environment, the module can be used on a student’s laptop
as well. Such an individual learning environment can provide a higher level of independence and increased control
which is essential to developing critical thinking. First experiences in classroom show that students are interested
in this Python-based module. In the near future, we plan to assess and evaluate its eﬀectiveness in more detail. We
are also discussing the re-design of the module into a more general educational software tool for exploring diﬀerent
matrix-based algorithms encountering graph-based combinatorial problems.
References
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]

A. Davis, Direct Methods for Sparse Linear Systems, no. 2 in Fundamentals of Algorithms, SIAM, Philadelphia, PA, USA, 2006.
I. S. Duﬀ, A. M. Erisman, J. K. Reid, Direct Methods for Sparse Matrices, Clarendon Press, Oxford, 1986.
A. George, J. W. H. Liu, Computer Solution of Large Sparse Positive Deﬁnite Systems, Prentice-Hall, Englewood Cliﬀs, NJ, USA, 1981.
S. Parter, The use of linear graphs in Gauss elimination, SIAM Review 3 (2) (1961) 119–130.
D. J. Rose, A graph-theoretic study of the numerical solution of sparse positive deﬁnite systems of linear equations, in: R. C. Read (Ed.),
Graph Theory and Computing, Academic Press, New York, 1972, pp. 183–217.
T. Anderson, D. Garrison, E-Learning in the 21st Century: A Framework for Research and Practice, Routledge/Falmer, London, 2002.
M. T. Heath, Scientiﬁc Computing: An Introductory Survey, 2nd Edition, McGraw-Hill, 2002, interactive educational modules via
http://www.cse.illinois.edu/iem/.
C. B. Moler, Numerical Computing with MATLAB, SIAM, Philadelphia, PA, USA, 2004, NCM software via
http://www.mathworks.com/moler/ncmfilelist.html.
A. Schliep, W. Hochst¨attler, Developing Gato and CATBox with Python: Teaching graph algorithms through visualization and experimentation, in: J. Borwein, M. Morales, K. Polthier, J. Rodrigues (Eds.), Multimedia Tools for Communicating Mathematics, Mathematics and
Visualization, Springer, Heidelberg, 2002, pp. 291–310.
M. Wu, Teaching graph algorithms using online Java package IAPPGA, SIGCSE Bull. 37 (4) (2005) 64–68.
G. H. Golub, C. F. V. Loan, Matrix Computations, 3rd Edition, The Johns Hopkins University Press, Baltimore, 1996.
M. Yannakakis, Computing the Minimum Fill-In is NP-Complete, SIAM Journal on Algebraic and Discrete Methods 2 (1) (1981) 77–79.
A. George, W. H. Liu, The evolution of the minimum degree ordering algorithm, SIAM Review 31 (1) (1989) 1–19.
A. George, Nested dissection of a regular ﬁnite element mesh, SIAM Journal on Numerical Analysis 10 (2) (1973) 345–363.

874

M. L¨ulfesmann,
R. Leßenich,
M. B¨uckerComputer
/ Procedia Science
Computer1 Science
00 (2010) 1–8
M. L¨uS.
lfesmann
et al.H./ Procedia
(2012) 867–874

8

[15] A. A. Hagberg, D. A. Schult, P. J. Swart, Exploring network structure, dynamics, and function using NetworkX, in: Proceedings of the 7th
Python in Science Conference (SciPy2008), Pasadena, CA, USA, 2008, pp. 11–15.
[16] J. D. Hunter, Matplotlib: A 2D graphics environment, Computing in Science & Engineering 9 (3) (2007) 90–95.
[17] E. Jones, T. Oliphant, P. Peterson, et al., SciPy: Open source scientiﬁc tools for Python, webportal at http://www.scipy.org/ (2001).
[18] R. F. Boisvert, R. Pozo, K. Remington, The Matrix Market exchange formats: Initial design, Tech. Rep. NISTIR 5935, National Institute of
Standards and Technology, Gaithersburg, MD, USA (Dec. 1996).

