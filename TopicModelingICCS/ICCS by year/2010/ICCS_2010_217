Procedia Computer
Science
Procedia
Science
00 (2010)
1–10
ProcediaComputer
Computer
Science
1 (2012)
219–228

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Star-shaped polyhedron point location
with orthogonal walk algorithm
Roman Soukala , Ivana Kolingerov´aa
a Faculty

of Applied Sciences, University of West Bohemia, Univerzitni 8, Plzen 306 14, Czech Republic

Abstract
The point location problem is one of the most frequent tasks in computational geometry. The walking algorithms
are one of the most popular solutions for ﬁnding an element in a mesh which contains a query point. Despite their
suboptimal complexity, the walking algorithms are very popular because they do not require any additional memory
and their implementation is simple. This paper describes the modiﬁcations of two walking algorithms for point
location on a surface of a star-shaped polyhedron, a generalization of the Remembering Stochastic walk algorithm
for a star-shaped polyhedron and a modiﬁcation of the planar Orthogonal walk algorithm. The latter uses spherical
coordinates to transfer the spatial point location problem to the planar point location problem. This way, the problem
can be solved by the traditional planar algorithms. Along with the modiﬁcations, the paper proposes new methods for
ﬁnding a proper starting triangle for the walking process with or without preprocessing.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: walking algorithms, spherical point location, star-shaped polyhedron, orthogonal walk, spherical
coordinate system

1. Introduction
Finding which polygon in a mesh contains a query point is a frequent task in computational geometry. For a query
point q and a given triangulation T of n vertices in the plane the planar point location problem usually means how to
ﬁnd a triangle ω from T which contains q.
The algorithms solving this problem can be divided into two groups: algorithms using sophisticated data structures
and so called walking algorithms. The former concentrates on achieving the lowest complexity possible, in this case
O(log n) per point query which is achieved by using sophisticated data structures such as DAG [1, 2], skip list [3],
quad tree, buckets [4], uniform grid [5, 6] and data structures based on random sampling [7, 8]. Despite their low
complexity, these algorithms have some disadvantages. First, the data structures listed above consume generally
O(n) amount of memory which may be a problem for huge datasets. Second, the implementation eﬀort for most of
these structures is nontrivial (especially for modiﬁcations of these structures). Finally, most of these structures are
hierarchical and the top level of the hierarchy may become a bottleneck in case of parallelization.
Walking algorithms do not need any extra memory, their implementation is rather simple and their usability for
parallelization is good, thus often they are a better choice than the optimal time complexity solutions. The name of
Email address: soukal@kiv.zcu.cz (Roman Soukal)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.025

220

R.R.Soukal,
ProcediaComputer
Computer
Science
(2012)
219–228
Soukal,I.I.Kolingerov´
Kolingerov´aa //Procedia
Science
00 1
(2010)
1–10

2

these algorithms has arisen from the way of locating the triangle ω which contains q. From a starting triangle α chosen
as one of the triangles of T and the query point q the walking strategy makes use of connectivity of the triangle mesh
to go through triangles between α and ω.
In a higher dimension, the deﬁnition of a general spatial point location problem is not so straightforward. We
concentrated on the point location on a star-shaped polyhedron surface. For a star-shaped polyhedron P, its surface
triangulation T of n vertices and a center point c, the spatial point location problem of a query point q usually means
how to ﬁnd a triangle ω from T which is intersected by the ray cq. Note that the center point c of P with surface
triangulation T is such a point inside P that each vertex of T is directly visible from c. In the following text, we
assume c is the part of input.
The star-shaped polyhedron point location is often used for a spherical point location but it is not limited to this
use. Its main application is in spherical remeshing methods [9, 10, 11]. Here, the surface triangulation T is an original
irregular mesh parametrized onto the unit sphere using a spherical parametrization [12, 13, 14, 15] and T is a regular
spherical mesh. During the sampling process, for each vertex q of T , it is necessary to ﬁnd the triangle ω from T
which contains q. Apparently, it is a star-shaped polyhedron point location problem.
In this paper we present two walking algorithms for point location on the surface of star-shaped polyhedron. The
former is a simple modiﬁcation of the planar Remembering Stochastic walk algorithm [16]. The latter is a modiﬁcation of the Orthogonal walk algorithm [16]. This modiﬁcation uses planar point location using the simpliﬁcation of
spherical coordinate system.
The paper is organized as follows. Section 2 presents the existing planar walking algorithms and the only published
walking algorithm (as far as we know) for point location on a spherical surface. Section 3 describes our Remembering
Stochastic walk algorithm for point location on the surface of a star-shaped polyhedron. Section 4 presents our idea of
using the spherical coordinate system to enable the point location with the existing planar walking techniques. Planar
point location in spherical coordinates brings some diﬃculties which are discussed in this section. In Section 5, a
modiﬁcation of the planar Orthogonal walk algorithm for point location in spherical coordinates is presented. The
possible preprocessing methods for the algorithm in Section 5 are proposed in Section 6. The empirical results of all
our modiﬁcations are presented in Section 7.
2. Walking algorithms
There are three main types of the walking strategies. The visibility walk makes use of point-inside-triangle tests to
determine which triangle is the next [17, 18, 19, 20]. The straight walk passes all such triangles in the mesh between α
and ω that are intersected by a line pq where p is a point inside α [21, 16]. The orthogonal walk passes all the triangles
in the mesh between√α and ω in √
the directions of coordinate axes [16]. The complexity of the walking algorithms is
suboptimal from O( 3 n) up to O( n) [16]. The starting triangle α may be chosen randomly, by the use of hierarchical
structures or as the closest triangle to q from a set A of randomly chosen triangles from T , A
T [18]. A proper
choice rapidly improves the speed of the algorithm.
Wu at al.[22] proposed a spherical modiﬁcation of a planar location algorithm by Sundareswara at al.[19] which
uses barycentric coordinates to ﬁnd the triangle ω. The main idea of this variant of visibility walk algorithm is to
compute the barycentric coordinates of q in the current triangle τ to determine which neighbor triangle is closer to q
and will be the next to visit. Wu at al. also proposed the choice of the ﬁrst triangle using the subdivision of the regular
octahedron. The disadvantage of Wu’s algorithm is its limitation to a spherical surface.
3. Star-shaped Polyhedron Point Location Using Remembering Stochastic Walk
Lawson’s Oriented walk [17] is a very popular planar visibility walk algorithm which uses planar orientation
edge test (Equation 1) to determine which triangle is the next in its walk. Simple Lawson’s Oriented walk algorithm
uses edges of τ for tests in a given order, but this method may loop for a non-Delaunay triangulation [23, 24]. For
such a triangulation it is necessary to choose the tested edges of τ in a random order. This modiﬁcation is called
Stochastic[16]. Furthermore, it is not necessary to test the edge incident with the previous triangle in the walk. This
improvement is called Remembering[16] and it may save up to one orientation test for each triangle. Therefore, one
or two orientation tests are needed for each triangle (except α).

R. Soukal,
I. Kolingerov´
a / Procedia
Computer
(2012)
R. Soukal,
I. Kolingerov´
a / Procedia
ComputerScience
Science100
(2010)219–228
1–10

orientation2D(t, u, v) = sgn

ux − tx
uy − ty

⎛
⎜⎜⎜ u x − t x
⎜
orientation3D(t, u, v, w) = sgn ⎜⎜⎜⎜ uy − ty
⎝
uz − tz

vx − tx
vy − ty

vx − tx
vy − ty
vz − tz

⎞
w x − t x ⎟⎟⎟
⎟
wy − ty ⎟⎟⎟⎟
⎠
wz − tz

221
3

(1)

(2)

We propose a modiﬁcation of planar Remembering Stochastic walk algorithm as another possibility for point location on a star-shaped polyhedron. Our modiﬁcation uses the center point c of the polyhedron. Instead of the classical
edge test (Equation 1) which is used in the planar point location, we use spatial orientation facet test (Equation 2)
which is used for walking in tetrahedral meshes. The decision whether or not the edge rl of the current triangle τ
should be crossed to continue the walk into the next triangle depends on the result after substitution q, c, r, l to the
Equation 2 where q is the query point, c is the center point and r, l are vertices of τ. Assuming that the vertices of the
triangle are in the CCW order in left-handed coordinate system, the walk continues to the next triangle over the edge
rl if the orientation3D(q, c, r, l) = 1. If the orientation3D(q, c, v, w) ≤ 0 for all edges of τ, the triangle τ contains the
query point q. In the proposed algorithm, we use simple idea which allows walking on the triangulated surface of a
general star-shaped polyhedron, in contrast to Wu’s barycentric walk algorithm [22] which allows walking only on a
spherical surface. In the following text, we use the term spatial algorithms for this algorithm and Wu’s barycentric
walk algorithm for spherical location [22].
4. Point Location in Spherical Coordinates
In this section, we present a technique which uses spherical parametrization and allows planar point location on
the surface of a star-shaped polyhedron. This technique is faster then spatial algorithms but brings some diﬃculties,
where planar algorithm does not return correct output, so it cannot be used separately. However, it serves well to ﬁnd
a triangle close to the correct triangle. The search is then ﬁnished by one of spatial algorithms.
The star-shaped polyhedron triangulation mesh T consists of an array of vertices V and an array of faces (triangles)
F. Each element f = {vi , v j , vk } ∈ F contains indexes of its three vertices vi , v j , vk ∈ V and of its neighbor triangles
fm , fn , fo ∈ F where v j vk is the edge shared with (its neighbor) triangle fm , vk vi is the edge shared with fn and vi v j
is the edge shared with fo . Each vertex vi of V can be denoted as a pair vi = (pi , hi ), where pi = {xi , yi , zi } is a triple
of Cartesian coordinates and hi = {ϕi , θi } is a pair of spherical radian coordinates. The spherical coordinates {ϕi , θi }
of vi are computed from Cartesian coordinates using Equation 3. Note that c = {xc , yc , zc } is the center point of a
star-shaped polyhedron and the range of arctg2 function is deﬁned as (−π, π .
zi −zc
ϕi = arctg2(yi − yc , xi − xc ), θi = arccos √(xi −xc )2 +(yi −yc )2 +(zi −zc )2

(3)

The query point q is given by either Cartesian or spherical coordinates. Assuming that the spherical coordinates
{ϕ, θ} are planar coordinates of points and vertices, we can use normal planar walking algorithms. Note that in the
following text, the third spherical coordinate r (radius) is ignored and we use the term planar walk for walking in
spherical coordinates, where we use ϕ instead of x and θ instead of y part of planar coordinates. However, to make
use of standard planar algorithms possible, we represented the edges of the model in spherical coordinates as line
segments, projecting only their endpoints. This way we obtain a standard planar triangulation, usable for planar
walking algorithms without any need of changes. This simpliﬁcation brings some diﬃculties as follows.
The problem lies in the fact that spherical coordinate system is a curvilinear coordinate system [25] and the line
segment between two points in Cartesian coordinates is an arc in spherical coordinates. It contradicts to our simpliﬁcation where we represented the edges in spherical coordinates as line segments, projecting only their endpoints.
Figure 1 shows three examples, where the orientation test in spherical coordinates produced incorrect results regarding
the original position in Cartesian coordinates. This problem is shown on three levels of subdivision of an icosahedron. Figure 1a shows the original icosahedron in spherical coordinates, Figures 1b, 1c its ﬁrst and second level of
subdivision. A point d lies originally on an edge e (Figure 1b) of the icosahedron, but in spherical coordinates, it may
lie outside the edge (Figure 1a). The edge e and its subdivisions are bold and colored red. In Cartesian coordinates, a

222

R.R.Soukal,
ProcediaComputer
Computer
Science
(2012)
219–228
Soukal,I.I.Kolingerov´
Kolingerov´aa //Procedia
Science
00 1
(2010)
1–10

d

d

q

q

q

e

a)

4

b)

c)

Figure 1: Problem of the planar orientation edge test in our simpliﬁcation of spherical coordinates (the icosahedron (a) and its ﬁrst (b) and second
(c) level of subdivision, red color represents the surface subdivisions of the edge e)

point q is located in a triangle which is colored yellow in Figures 1a, b, c, but in spherical coordinates it may lie on an
edge (Figure 1b) or even in a diﬀerent triangle (Figure 1a).
Hence our simpliﬁcation is not geometrically correct and the planar orientation edge test (Equation 1) in the
spherical coordinates occasionally returns incorrect results. The probability of incorrect results goes down with higher
density of mesh, but not to zero. However, the triangle returned from the planar point location is always very close to
the correct one, thus planar walking algorithms in spherical coordinates are a good choice for fast location of a proper
starting triangle for slower, but precise spatial algorithms. In most cases the ﬁnal location with a spatial algorithm will
be very short (see Section 7).
For better readability, the border triangles (triangles whose vertices lie on the opposite sides in our simpliﬁcation
of spherical coordinates) are not displayed in all planar ﬁgures, except Figure 2 (see Figure 2a where these triangles
are colored red and one chosen border triangle is highlighted by green). All types of the planar walking strategies
sometimes fail on such triangles and may loop. For bigger datasets, cases where the walk goes over these border
triangles are very rare and they appear only if α is chosen as one of the border triangles or one such triangle contains
q (see Figure 2b) or q is near to it. Hence if the planar walk detects that the current triangle τ is border, the planar
location ends and ω is located by one of spatial algorithms.
Border triangles are recognized and ﬂagged during the computing of spherical coordinates. The detection is rather
simple. We substitute the spherical coordinates hi , h j , hk of the vertices vi , v j , vk of the triangle τ = vi , v j , vk to the
planar orientation test from Equation 1. The result of the orientation2D(hi , h j , hk ) is opposite for the border triangle
than for the other triangles. Assuming that the vertices of the triangle are in CCW order on the surface of a polyhedron
in left-handed coordinate system, the triangle τ is the border triangle if the orientation2D(hi , h j , hk ) = 1. Note that we
use ϕ coordinate instead of x and θ instead of y in test from Equation 1.

q
α

a)

b)

Figure 2: Planar triangulation of the icosahedron with shown border triangles colored by red (a) and with location of point in the border triangle (b)

223
5

R. Soukal,
I. Kolingerov´
a / Procedia
Computer
(2012)
R. Soukal,
I. Kolingerov´
a / Procedia
ComputerScience
Science100
(2010)219–228
1–10

5. Orthogonal Walk Algorithm in Spherical Coordinates
In this section, we present a modiﬁcation of an orthogonal walk algorithm for our simpliﬁcation of spherical
coordinates. The planar Orthogonal walk was proposed by Devillers at al. [16] with an idea of cheaper tests. The
algorithm goes ﬁrst in the direction of one coordinate axis and then in the other coordinate axis. Planar orientation
tests (Equation 1) were substituted by comparisons of coordinate values. An orthogonal walk is usually longer than
other walks (see Figure 3a) but the cost of its tests is signiﬁcantly lower which results in a faster location.
Devillers’s Orthogonal walk reliably ﬁnds a proper location of q but from Section 4 we know that we need the
orthogonal walk to ﬁnd only the approximate location of q, thus we can optimize the algorithm for time. If the returned
triangle is close to the proper triangle ω which contains q, it is enough. The original Orthogonal walk [16] uses three
comparisons for each visited triangle, computes few planar orientation tests (Equation 1) and contains quite a diﬃcult
initialization step. Our modiﬁcation (see Algorithm 1) simpliﬁes the initialization step, uses only two comparisons
for each visited triangle and does not use the planar orientation tests.
Now let us explain our modiﬁcation. The orthogonal walk algorithm starts in a triangle α (the proper choice is
explained in Section 6). First, the algorithm must choose a starting point a = {aϕ , aθ } anywhere inside α. Let us
assume q = {qϕ , qθ } is above and to the right of a (qθ > aθ , qϕ > aϕ ), other three possibilities would be analogous. In
the initialization step we choose s = {sϕ , sθ } as a vertex of α with the maximal horizontal (ϕ) value. The vertices s, r, l
of α are in CCW order.
Now the walk in ϕ direction may start. For each triangle τ in the orthogonal walk (except α) the edge e of τ is the
edge used to cross to τ and s is the vertex of τ facing e = rl. The walk leaves τ over the edge f which is found by
comparing sθ with aθ . If sθ is lower than aθ , the walk continues over the edge f = rs, τ is the neighbor over f and
l = s, else the walk continues over the edge f = ls, τ is neighbor over f and r = s. The new s is chosen from the
vertices of τ, r, l s. If sϕ > qϕ or τ is border, the walk in ϕ direction ends, else it continues for the current τ.
Now we choose s as a vertex of τ with the maximal vertical (θ) value and the walk in θ direction may start. The
edge f which is used to go to the next triangle is found by comparing sϕ with qϕ . If sϕ is lower than qϕ , the walk
continues over the edge f = rs, τ is the neighbor over f and l = s, else the walk continues over the edge f = ls, τ is
the neighbor over f and r = s. The new s is chosen from the vertices of τ, r, l s. If sθ > qθ or τ is a border triangle,
the orthogonal walk ends. Now τ is close to the triangle ω which contains the query point q and the ﬁnal location is
made by the Remembering Stochastic walk from Section 3.
Figure 3 shows an example of our orthogonal walk on the surface of a icosahedron in the ﬁrst level of subdivision.
The triangle β is a triangle where the horizontal walk stops and vertical walk begins. The triangle γ is the ﬁnal triangle
of our orthogonal walk and the ﬁrst triangle of the ﬁnal spatial location. Figure 3a shows the walk in our simpliﬁcation
of spherical coordinates and Figure 3b shows the walk in the Cartesian coordinates.

q sγ
ωγ
p

α

α
β

β sβ

sα
a)

b)

Figure 3: Our orthogonal walk algorithm in the spherical (a) and the Cartesian (b) coordinates

ω
γq

224

R.R.Soukal,
ProcediaComputer
Computer
Science
(2012)
219–228
Soukal,I.I.Kolingerov´
Kolingerov´aa //Procedia
Science
00 1
(2010)
1–10

6

6. Preprocessing
A very important part of a walking algorithm is the choice of the starting triangle which may improve the speed
of the algorithm. The easiest way is to choose the starting triangle α randomly or as the triangle of a planar mesh
which contains a point in the middle of this mesh. M¨ucke et al. proposes the way how to choose a good starting
triangle without preprocessing[18] where α is chosen as the closest triangle to q from a set A of√randomly chosen
triangles from the mesh T , A
T . For the best performance, M¨ucke recommends A = 2 4 n and our results
conﬁrmed that. But if we choose the starting triangle α as the triangle containing the point b which is in the middle of
the spherical domain (bϕ = 0, bθ = 0.5π), the performance is very similar to [18].
Input:
• the query point q
• the chosen starting triangle α, α ∈ T
Output:

• the triangle ω which contains the query point q

a = a point generated anywhere inside α;
// we describe the case where q is above and to the right of a (qθ > aθ , qφ > aφ ), other cases are analogous
τ = α = srl where s is the vertex with maximal ϕ coordinate;
// note that the vertices of τ (s, r, l) are always in CCW order
// traverses the triangulation T in the direction of the horizontal axis of ϕ
while sϕ < qϕ and notBorder(τ) do
if sθ < aθ then
τ = neighbor of τ over rs;
l = s;
else
τ = neighbor of τ over ls;
r = s;
end
s = vertex of τ where s r, s l;
end
τ = srl where s is the vertex with maximal θ coordinate;
// traverses the triangulation T in the direction of the vertical axis of θ
while sθ < qθ and notBorder(τ) do
if sϕ < qϕ then
τ = neighbor of τ over rs;
l = s;
else
τ = neighbor of τ over ls;
r = s;
end
s = vertex of τ where s r, s l;
end
// the ﬁnal location is done by another walking algorithm (e. g. Remembering Stochastic walk in Section 3)
ω = SpatialRememberingStochasticWalk(q, τ);
return ω;
Algorithm 1: Our modiﬁcation of the Orthogonal walk

At the cost of additional memory, we can improve performance of our algorithm in the following way. The
advantage of spherical coordinates is the known range of ϕ and θ values and it can be used to ﬁnd a suitable starting
triangle for our orthogonal walk algorithm using a grid. For each cell gi j of the grid, the suitable starting triangle αi j
is triangle which contains the center point qi j of gi j . For the polyhedron whose triangles are very similar, each cell gi j
of the uniform grid (see Figure 4a) contains a diﬀerent number of these similar triangles, especially near poles, the
triangles are very wide and the number of triangles in these cells is much lower.

R. Soukal,
I. Kolingerov´
a / Procedia
Computer
(2012)
R. Soukal,
I. Kolingerov´
a / Procedia
ComputerScience
Science100
(2010)219–228
1–10

225
7

b)

a)

Figure 4: The uniform and the nonuniform grid of 32 cells for ﬁnding a suitable starting triangle (the starting triangle for each cell of grid is yellow
colored)

This consideration leads us to use of a nonuniform grid preserving the character of the spherical projection. The
grid is nonuniformly subdivided only in the ϕ direction (the planar triangulation is divided uniformly to k longitudinal
strips and each strip Gi is divided vertically to li cells - see Figure 4b). Each cell gi j contains such triangles of T
that their area of these triangles on the spherical surface is similar for all gi j . Assuming that the surface of a unit
sphere (r = 1) can be approximated by the function sin(θ) in the plane, the spherical surface S i equivalent to a planar
longitudinal strip Gi for θ ∈ a, b in the spherical coordinates can be computed as the area of the planar strip bounded
by the functions f (ϕ) = 2πsin(θ), θ ∈ a, b (see Equation 4 and Figure 5 - the equations are derived from the deﬁnition
of determinant of Jacobian matrix for spherical coordinate parametrization and from the range of ϕ coordinate). The
surface S of the unit sphere can be computed as S = 2π (cos(0) − cos(π)) = 4π. Given m is a number of cells of
the nonuniform grid, k is the number of longitudinal strips and li is the number of cells in each longitudinal strip
Gi , Equations 5, 6 describe the computation of k and li . Figure 4 shows grid structures for the choice of the ﬁrst
triangle where the ﬁrst triangle for each cell of the grid is colored yellow. Figure 4a shows a uniform grid of 32 cells
and Figure 4b shows the nonuniform grid with the same number of cells. The matching cell gi j of a query point
q = {ϕq , θq } is computed identically (see Equations 7) for uniform and nonuniform grid (in the uniform grid, li is the
same for all i). Note that if θq = π then i = k − 1 or if ϕq = π then j = li − 1.
b

S i = 2π

b

f (θ)dθ = 2π
a

a

sin(θ)dθ = 2π [−cos(θ)]ba = 2π (cos(a) − cos(b))
πm
+ 0.5
4

k=
⎢⎢⎢
⎢⎢⎢ 1
mS i
li =
+ 0.5 = ⎢⎢⎢⎣ m
S
2

i= k

(i+1)π
k
iπ
k

⎥⎥⎥
⎥⎥⎥
sin(θ)dθ + 0.5⎥⎥⎦⎥ , i = 0, 1, ..., k − 1

ϕq + π
θq
, j = li
π
2π

(4)
(5)
(6)
(7)

7. Experimental Results
We tested the following algorithms: Remembering Stochastic walk presented in Section 3 (RSW), Wu’s Barycentric walk [22] (WBW) and our orthogonal walk (OW). Tests were performed on sixteen diﬀerent datasets (a real
parametrized models, subdivisions of regular polyhedra (tetrahedron, octahedron, icosahedron), a randomly generated star-shape polyhedra). The results correspond to the sizes of datasets and do not diﬀer too much for diﬀerent
datasets of the same size, therefore the results will be illustrated on the following datasets: Headus Skull, Stanford
Bunny, an icosahedron in the 7th level of subdivision and a randomly generated star-shape polyhedra with 105 vertices.
106 randomly generated points were located by each algorithm on each dataset.

226

R.R.Soukal,
ProcediaComputer
Computer
Science
(2012)
219–228
Soukal,I.I.Kolingerov´
Kolingerov´aa //Procedia
Science
00 1
(2010)
1–10
π

0

a
b

a)

π

8

0

a

Si

b

π

½Si
0

b)

c)

Figure 5: An illustrative example to computing an area of the strip (by red) in our simpliﬁcation of spherical coordinates (a), its real surface area
on the unit sphere (b) adjusted for easier computation (c)

Selected results are in Table 1 (without preprocessing) and Table 2 (with preprocessing - see Section 6). The
following properties were examined for each algorithm: the average length of the walk (#Δ), the average number of
the tests (#test) and the average time (t[μs]) per one location (tested on Intel Q6600 2,40GHz). The properties #test
and #Δ for OW consists of two values, the former value concerns the orthogonal walk and the latter one concerns the
ﬁnal location by RSW. In Table 2, we tested RSW with the uniform and the nonuniform grid and WBW, where we
choose a starting triangle using n levels of subdivision of a regular octahedron [22]. The properties #test and #Δ for
WBW consist of two values, where the former value concerns the choice of a starting triangle and the latter concerns
the ﬁnal location. In Table 2, we compare such algorithms that have the same number of elements (i. e., for WBW,
the number of triangles in the lowest level of subdivision of octahedron is the same as the number of grid cells used
by RSW). The algorithms were coded in Java with double precision ﬂoating point arithmetic.
#Δ

Algorithm
WBW
RSW
OW
WBW
RSW
OW

#test
t[μs]
φ per located point
Headus Skull (40000 Δ, 20002 vertices)
117.5
352.6
20.46
135.2
233.1
26.49
159.1+2.1
318.1+5.1
11.23
Icosahedron (7th level, 327680 Δ, 163842 vertices)
361.2
1083.5
79.11
392.3
680.7
110.48
515.1+1.93 1030.2+4.8
44.87

#Δ

#test
t[μs]
φ per located point
Stanford Bunny (71882 Δ, 35943 vertices)
167.0
501.1
34.11
188.1
323.4
43.40
240.9+2.1
481.8+5.2
21.04
Star-shaped polyhedron (199996 Δ, 105 vertices)
N/A
N/A
N/A
324.4
559.3
97.22
409.0+2.64
818.0+6.0
42.66

Table 1: Comparison of algorithms without preprocessing

To sum up the results without preprocessing (Table 1), the RSW is about 30% slower than WBW, but it can be
used for a general star-shaped polyhedron, therefore we use it for the ﬁnal location in OW. The OW is almost twice
as fast as WBW and the time of the ﬁnal location by RSW is not signiﬁcant because its walk is usually very short in
average (see Table 1). To sum up the results with preprocessing, for the same number of elements (see above), the OW
is evidently faster than WBW and the grid is more memory-economical than the octahedron hierarchy used in [22].
The nonuniform grid is faster than the uniform grid but the diﬀerence is not great.
8. Conclusion and Future work
We presented two new walking algorithms for the point location on triangulated surface of general star-shaped
polyhedron. The best performance is achieved by using both these algorithms together and the proposed solution is
faster than other walking solutions. We also presented how to ﬁnd a suitable starting triangle by using a uniform
and a nonuniform grid in O(1) time. This choice further improves the performance of our algorithms at the cost of
additional memory.

R. Soukal,
I. Kolingerov´
a / Procedia
Computer
(2012)
R. Soukal,
I. Kolingerov´
a / Procedia
ComputerScience
Science100
(2010)219–228
1–10

#Δ

Algorithm
128 elements
WBW (2nd level)
OW (uniform grid)
OW (nonuniform grid)
512 elements
WBW (3rd level)
OW (uniform grid)
OW (nonuniform grid)
2048 elements
WBW (4th level)
OW (uniform grid)
OW (nonuniform grid)

#test
t[μs]
φ per located point
Stanford Bunny (71882 Δ, 35943 vertices)
6.2+14.3
18.7+43.0
4.58
17.5+1.8
35.0+4.5
3.55
14.9+1.7
29.8+4.4
3.02
Stanford Bunny (71882 Δ, 35943 vertices)
8.0+7.8
23.9+23.3
3.50
8.2+1.7
16.5+4.4
2.28
7.1+1.6
14.3+4.3
2.10
Stanford Bunny (71882 Δ, 35943 vertices)
9.7+4.4
29.2+13.2
2.97
3.8+1.7
7.7+4.5
1.63
3.3+1.7
6.6+4.3
1.49

227
9

#Δ

#test
t[μs]
φ per located point
Icosahedron (7th level, 327680 Δ, 163842 vertices)
6.2+31.6
18.7+94.9
10.47
39.8+1.85
79.7+4.65
8.86
35.6+1.6
71.2+4.2
7.81
Icosahedron (7th level, 327680 Δ, 163842 vertices)
8.0+16.4
23.9+49.1
6.49
19.4+1.6
38.8+4.1
4.96
17.4+1.6
34.8+4.1
4.61
Icosahedron (7th level, 327680 Δ, 163842 vertices)
9.7+8.7
29.2+26.2
4.60
9.3+1.6
18.6+4.1
3.05
8.2+1.7
16.5+4.4
2.90

Table 2: Comparison of algorithms with preprocessing

As a future work, we would like to focus on point location in tetrahedral meshes, where we expect a practical
application in dynamic proteins research.
Acknowledgments
We would like to thank Miss M´alkov´a, Mr. V´asˇa and Mr. Hlav´acˇ ek for their feedback and inspiring discussions.
This work is supported by the Grant Agency of the Czech Republic - the project 201/09/0097.
References
[1] M. de Berg, M. van Kreveld, M. Overmars, O. Schwarzkopf, Computational Geometry, Algorithms and Applications, Berlin Heidelberg:
Springer, 1997.
ˇ
[2] I. Kolingerov´a, B. Zalik,
Improvements to randomized incremental Delaunay insertion, Computers & Graphics 26 (2002) 477–490.
ˇ
[3] M. Zadravec, B. Zalik,
An almost distribution independent incremental Delaunay triangulation algorithm, The Visual Computer 21 (6) (2005)
384–396.
[4] P. Su, R. L. S. Drysdale, A comparison of sequential Delaunay triangulation algorithms, in: Proceedings of the 11th Annual Symposium on
Computational Geometry, 1995, pp. 61–70.
[5] S. W. Sloan, A fast algorithm for constructing Delaunay triangulations in the plane, Advanced Engineering Software 9 (1) (1987) 34–55.
ˇ
[6] B. Zalik,
I. Kolingerov´a, An incremental construction algorithm for Delaunay triangulation using the nearest-point paradigm, International
Journal of Geographical Information Science 17 (2) (2003) 119–138.
[7] K. Mulmuley, Randomized multidimensional search trees: Dynamic sampling, in: Proceedings of the 7th Annual Symposium on Computational Geometry, 1991, pp. 121–131.
[8] O. Devillers, Improved incremental randomized Delaunay triangulation, in: Proceedings of the 14th Annual Symposium on Computational
Geometry, 1998, pp. 106–115.
[9] L. Kobbelt, J. Vorsatz, U. Labsik, H. P. Seidel, A shrink wrapping approach to remeshing polygonal surfaces, Computer Graphics Forum,
Eurographics ’99 (18) (1999) 119–130.
[10] Hormann, U. Labsik, G. Greiner, Remeshing triangulated surfaces with optimal parameterizations, Computer-Aided Design 33 (11) (2001)
779–788.
[11] E. Praun, H. Hoppe, Spherical parametrization and remeshing, in: Proceedings of the 30th Annual Conference on Computer Graphics and
Interactive Techniques, ACM SIGGRAPH, 2003, pp. 340–349.
[12] A. Certain, J. Popovic, T. DeRose, D. S. T. Duchamp, W. Stuetzle, Interactive multiresolution surface viewing, in: Proceedings of the 23rd
Annual Conference on Computer Graphics and Interactive Techniques, ACM SIGGRAPH, 1996, pp. 91–98.
[13] U. Labsik, L. Kobbelt, R. Schneider, H. P. Seidel, Progressive transmission of subdivision surfaces, Computational Geometry 15 (2000)
25–39.
[14] S. Saba, I. Yavneh, C. Gotsman, A. Sheﬀer, Practical spherical embedding of manifold triangle meshes, in: International Conference on
Shape Modeling and Applications, 2005, pp. 340–349.
[15] K. Hormann, B. L´evy, A. Sheﬀer, Mesh parameterization: Theory and practice, in: ACM SIGGRAPH Course Notes, 2007.
[16] O. Devillers, S. Pion, M. Teillaud, Walking in a triangulation, in: Proceedings of the 17th Annual Symposium on Computational Geometry,
2001, pp. 106–114.
[17] C. L. Lawson, Mathematical Software III; Software for C1 Surface Interpolation, Academic Press, New York, 1977, pp. 161–194.

228

R.R.Soukal,
ProcediaComputer
Computer
Science
1 (2012)
219–228
Soukal, I.
I. Kolingerov´
Kolingerov´aa/ /Procedia
Science
00 (2010)
1–10

10

[18] E. P. M¨ucke, I. Saias, B. Zhu, Fast randomized point location without preprocessing in two- and three-dimensional Delaunay triangulations,
in: Proceedings of the 12th Annual Symposium on Computational Geometry, Vol. 26, 1996, pp. 274–283.
[19] R. Sundareswara, P. Schrater, Extensible point location algorithm, in: International Conference on Geometric Modeling and Graphics, 2003,
pp. 84–89.
[20] I. Kolingerov´a, A small improvement in the walking algorithm for point location in a triangulation, in: Proceedings of the 22nd European
Workshop on Computational Geometry, 2006, pp. 221–224.
[21] K. Mehlhorn, S. N¨aher, Leda: A platform for combinatorial and geometric computing, Communications of the ACM 38 (1) (1995) 96–102.
[22] Y. Wu, Y. He, H. Tian, A spherical point location algorithm based on barycentric coordinates, in: Proceedings of the 5th Computational
Science and Its Applications, 2005, pp. 1099–1108.
[23] L. D. Floriani, B. Falcidieno, G. Nagy, C. Pienovi, On sorting triangles in a Delaunay tesselation, Algorithmica 6 (1991) 522–532.
[24] F. Weller, On the total correctness of Lawson’s oriented walk, in: Proceedings of the 10th International Canadian Conference on Computational Geometry, 1998.
[25] P. Moon, D. E. Spencer, Field Theory Handbook, Springer-Verlag, 1988.

