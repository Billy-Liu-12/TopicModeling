Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–2
2053–2054

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Practical Aspects of High-Level Parallel Programming
PAPP 2010
Anne Benoita,∗, Fr´ed´eric Gavab
a Laboratoire

de l’Informatique du Parall´elisme UMR 5668 CNRS – ENS Lyon – INRIA – UCBL
Ecole Normale Sup´erieure de Lyon; 46, all´ee d’Italie, 69364 Lyon cedex 07 – France
b Laboratory of Algorithms, Complexity and Logic, University of Paris-East
61 avenue du G´en´eral de Gaulle, 94010 Cr´eteil cedex – France

Computational science applications are more and more complex to develop and require more and more computing
power. The trend is towards the increase of cores in processors, the number of processors and the need for scalable
computing everywhere. Major companies in the computing industry now recognises the urgency of reorienting an entire industry towards massively parallel computing. However, parallel and distributed programming is still dominated
by low-level techniques such as send/receive message passing. Thus high-level approaches should play a key role in
the shift to scalable computing in every computer.
The seventh international workshop on Practical Aspects of High-Level Parallel Programming (PAPP), aﬃliated
to the International Conference on Computational Science (ICCS), presents recent work of researchers in these ﬁelds.
The PAPP workshop is aimed both at researchers involved in the development of high-level approaches for parallel
and grid computing and computational science researchers who are potential users of these languages and tools.
The topics of the PAPP workshop include high-level models (BSP, LogP, etc.) and tools for parallel and grid
computing; high-level parallel language design, implementation and optimisation; functional, logic, constraint programming for parallel, distributed and grid computing systems; algorithmic skeletons, patterns and high-level parallel
libraries; generative (e.g. template-based) programming with algorithmic skeletons, patterns and high-level parallel libraries; applications in all ﬁelds of high-performance computing (using high-level tools); industrial uses of a
high-level parallel language; and benchmarks and experiments using such languages and tools.
The papers of the PAPP 2010 workshop are classiﬁed depending on the size of the parallel machine host: from
Grid to CPGPU, passing by clusters and multi-cores.
The Java programming language increases the productivity of programmers for example by taking care of memory
management, by providing a wide collection of data structures (safer with the recent introduction of genericity in the
language), and many other features. Thus Java is an interesting choice as a basis for high-level parallelism. The
ﬁrst paper Map, Reduce and MapReduce, the skeleton way focuses on implementation and experimentation of two
skeletons, the now well known map, reduce (which are massively used by Google) in a Java/Grid environment called
ProActive/GCM. This prototype called MareMare provides better performances than the implementation of these
skeletons provided by the ProActive framework.
∗ Corresponding

author
Email addresses: Anne.Benoit@ens-lyon.fr (Anne Benoit), frederic.gava@univ-paris-est.fr (Fr´ed´eric Gava)
URL: http://graal.ens-lyon.fr/~abenoit/ (Anne Benoit), http://lacl.fr/gava/ (Fr´ed´eric Gava)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.229

2054

A.A.Benoit,
F. Gavab / Procedia Computer Science 1 (2012) 2053–2054
Benoit and F. Gava / Procedia Computer Science 00 (2010) 1–2

2

Ubiquitous multicore architectures require that many levels of parallelism have to be found in codes. Dependence
and data-ﬂow analysis are the main approaches in compilers for the detection of parallelism. Adapting these analyses
to ubiquitous architectures is the problematic of the second paper, FADAlib: an Open Source C++ Library for Fuzzy
Array Dataﬂow Analysis. Authors provide new technics called Fussy Array Dataﬂow, implemented in a C++ library
called FADAlib, that analyse codes to detect parallelism. Some comparisons with regular and non regular codes are
also provided.
Benchmarks and experiments are the main subject of the third paper of the workshop: Boosting the Performance
of Computational Fluid Dynamics Codes for Interactive Supercomputing. The authors focus on an experimental study
of a problem on ﬂuid dynamics. By developing visualisation utilities, they restructure a program transformation that
makes the numerical code run well on multicore CPUs.
Multi-cores are also at the core of the fourth paper. But the adding of stream-processing makes the need of language of coordination for the interactions between asynchronous computations. This paper, Parallel Signal Processing
with S-Net, describes the design of a high-level framework called S-Net, which provides higher-level abstraction of
the coordination and reuse facility of its components. Application of this framework is provided by implementing a
real radar-data processing application.
To ﬁnish the workshop, we consider low-level architectures such as graphic processors (GPUs). These GPUs
are programmed with one of the most high-level language, the pure functional and well-known Haskell. This last
paper, GPGPU Kernel Implementation and Reﬁnement using Obsidian, describes how working with a domain speciﬁc
language for data-parallel programming on GPUs, called Obsidian, and which is based on Haskell. This language
provides high-level descriptions of required functions and able reﬁning them for ﬁne-control of the computation on the
GPUs. New coordination patterns are introduced to able multi-kernel computations. Experiments and comparisons
with another higher-level embedded language for GPU programming in Haskell are discussed.
We would like to thank all the people who made the PAPP workshop possible: the organisers of the ICCS
conference, the other members of the programme committee: Marco Aldinucci (University of Torino, Italy), Umit
V. Catalyurek (The Ohio State University, USA), Emmanuel Chailloux (University of Paris 6, France), Fr´ed´eric
Dabrowski (University of Orl´eans, France), Alexandros Gerbessiotis (NJIT, USA), Clemens Grelck (University of
Amsterdam, Netherlands), Hideya Iwasaki (The University of Electro-communications, Japan), Christoph Kessler
(Linkopings Universitet, Sweden), Rita Loogen (University of Marburg, Germany), Kiminori Matsuzaki (Kochi University of Technology, Japan), Samuel Midkiﬀ (Purdue University, USA), Susanna Pelagatti (University of Pisa, Italy),
Bruno Raﬃn (INRIA, France), and Casiano Rodriguez-Leon (University La Laguna, Spain). We also thank the referees external to the PC for their eﬃcient help. Finally we thank all authors who submitted papers for their interest in
the workshop, the quality and variety of the research topics they proposed.

