Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–7
1511–1517

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Is Scrum and XP suitable for CSE Development?
Martin Blom
Dept. of Computer Science, Karlstad University, Karlstad, Sweden

Abstract
This article discusses the question if Scrum and XP is well suited for development of Computational Science and
Engineering (CSE) software. The reason for choosing Scrum and XP is based on two facts. Firstly, CSE developers are
not used to formal processes for software development and Scrum and XP are informal in nature, hence easier to adopt.
Secondly CSE projects are often once-oﬀ and aimed at producing scientiﬁc results rather than commercial software,
so the overhead of a process or methodology needs to be kept at a minimum. Scrum and XP are focused on producing
software, thus keeping everything else, i.e. the overhead to a minimum, a fact that beneﬁts CSE development. In this
article, the characteristics of Scrum and XP in particular and agile development in general are evaluated against the
needs of CSE developers. The results show that almost all the key points in both methodologies are well suited for
CSE development and that agile development in general is a good match with CSE.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Scrum, XP, Computational Science and Engineering

1. Introduction
Software Development methods are often geared toward large-scale projects and in particular business oriented
large-scale projects. These systems often have a long expected life time and often need maintenance and further
development during their life time. Since these standard systems are also typically large, they are developed by a
group of people or even many groups. Typical CSE systems are on the other hand often written for a particular
purpose and have a much shorter expected life time and a smaller potential user base [1]. It is worth noting, however,
that many CSE systems have long life spans and hence share more characteristics with non-CSE systems. CSE
systems are further often developed by a single researcher or a small group of researchers. These diﬀerences alone are
indications enough that the methods needed in CSE development might have to diﬀer from traditional development
methods.
Furthermore, developers of standard non-CSE systems are experienced using development methods and can hence
absorb and adapt these to suit their particular needs. CSE systems developers on the other hand have less experience
using these methods and therefore risk getting entangled in details and overhead, which further stresses the point that
something diﬀerent than traditional methods is needed.
In non-CSE software engineering, the old methods with a strong focus on processes and documentation have been
challenged in the last decade by agile methods that puts the development of code back in focus [2]. The perhaps most
Email address: Martin.Blom@kau.se (Martin Blom)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.168

1512

M. Blom / Procedia Computer Science 1 (2012) 1511–1517
M. Blom / Procedia Computer Science 00 (2010) 1–7

2

prominent agile method that has emerged in this process is Scrum [3] and the article focuses on Scrum combined with
eXtreme Programming (XP) [4]. Scrum handles the process and the team, whereas XP handles the more technical
aspects.
A very interesting report on what technologies and tools in the SE area that can be used in CSE development
was given in Heroux and Willenbring’s article [1]. This article can be seen as a complement to their article but with
some overlap concerning TDD and pair programming. This article focuses more on processes and methods, whereas
Heroux’ focuses more on technologies and tools.
The remainder of this article is structured as follows: Section 2 describes the main points of Scrum and how
these apply to CSE development, Sect. 3 outlines XP and its potential in CSE development and Sect. 4 matches the
statements in the agile manifesto to the CSE domain. Finally Sect. 5 presents some conclusions and Sect. 6 outlines
some future work using empirical evaluations to verify how Scrum and XP would support CSE.
2. Scrum
Scrum [5], [3], [6] is an agile development method and perhaps one of the most used ones too. It is argued that
Scrum works best for teams of 5-7 people, but most of the techniques can be used for single developers as well. The
list below contains the techniques, methodologies and tools that comprises Scrum, followed by a grade of relevance
on how these support CSE development. This is done on an ordinal scale (less relevant, relevant and extra relevant)
as compared to non-CSE development. Lastly, each section concludes with reﬂections from the author’s experience of
supervising Scrum projects in university courses. This is presented in italics. All projects supervised and referenced
to here are technical in nature, but most are not typical CSE projects in that they are not primarily focused on heavy
computation. Most of the projects had an external customer so the products were real, even though the developers
were students in a university setting.
2.1. Sprints
Working in sprints, i.e. in iterations where a small part of the system is ﬁnished in each sprint, would suit a CSE
developer well since the exact speciﬁcation of the system might not be available at ﬁrst. The more uncertainty there
is, the more diﬃcult it is to specify a complete requirements list directly. Extra relevant. Working in sprints is, in
my experience safer concerning producing the right software than working according to the waterfall model. Students
report that it keeps them focused on delivering value to the customer and also evens out the workload.
2.2. Team
Working in teams require more than one person per deﬁnition. For lone researchers this would hence be less
relevant than for typical SE projects that are normally done in groups, but for larger CSE projects, teams would be
as relevant as for non-CSE projects. Most teams work smoothly, but group dynamics is an issue to watch out for.
Dominant persons tend to take over the teams and in self-organizing teams without a designated manager this can
become a rather large problem. Working as a team, but spread out geographically, has also shown to be diﬃcult so
physically having the team close is good. Communication and handovers are key factors in making the team work and
a team working closely together is more likely to communicate better and have less problems with handovers.
2.3. Product Owner
In Scrum, it is emphasized that the customer should provide a single point of interaction with the development
team. One person should be the product owner that serves as the mediator between the customer organization and
the Scrum team. In CSE there might not be an external customer at all and this is hence deemed as less relevant.
In projects without an external product owner, the team itself needs to act as the product owner, for instance when
prioritizing features or testing the software. This requires a change of viewpoint from developer to customer, which
has been diﬃcult in some cases.

M. Blom / Procedia Computer Science 1 (2012) 1511–1517
M. Blom / Procedia Computer Science 00 (2010) 1–7

1513
3

2.4. Backlogs
Backlogs are prioritized lists of features that remain to be done for a system. Usually there are two types of
backlogs; the product backlog, representing the entire system and a backlog for each sprint. The product backlog is
updated after each completed sprint, reﬂecting the current view of priorities for the remaining features. The product
backlog is a “live” document that will change over time. For CSE, using backlogs would be relevant as there are no
obvious diﬀerences between requirements handling between SE and CSE. Working with backlogs has worked well,
the main problem being external customers having diﬃculties prioritizing.
2.5. Burndown Chart
A burndown chart plots the progress of the team versus an ideal progress line so that the team can monitor how
the sprint is coming along. Deviations from the ideal progress line might indicate problems or the need for more
work, depending on the sign of the deviation. Any team that works with sprints would beneﬁt from using a burndown
chart and this is hence deemed relevant for CSE teams as well. Burndown charts have worked well, but with some
problems with infrequent updates of the chart and poor breakdown of features that makes plotting the progress more
diﬃcult.
2.6. Sprint Planning Meeting
Before each sprint starts, the team and the product owner meets to discuss what should be done during the sprint.
Even if no explicit or external product owner exists, the team can still make good use of a planning meeting so this
point is relevant. Sprint planning meetings worked well, with the main problem being customers who were unavailable
at sprint planning time. It also seems to require some training to be able to perform a successful planning meeting
where all important issues are discussed.
2.7. Sprint Review
At the end of the sprint, the team reﬂects on how they can improve to make the next sprint better. This is sometimes
referred to as the sprint retrospective, a perhaps more informative name. Performing sprint reviews is naturally only
relevant if sprints (or iterations of any kind) is used, but given that, this point is relevant for CSE development. Sprint
reviews have worked well for technical and methodological issues, but somewhat less for group dynamics, probably
due to social factors. An external mediator might be necessary to resolve personal conﬂicts within the team.
2.8. ScrumMaster
A scrum master is an enabler for the team. Someone who makes sure that things run smoothly and that the team
has all the resources needed to work properly. Any team running Scrum would need a scrum master and CSE teams
would be no diﬀerent. This is hence relevant. The main diﬃculties are to choose the right person as the scrummaster
and for the scrummaster to understand the role, especially the diﬀerences of a scrummaster and a project manager.
2.9. Scrum Summary
All points are judged as relevant, except product owner that is less relevant since external customers might not
exist, and sprints that is extra relevant due to the uncertain nature of developing research software. If one lets the two
outliers cancel each other out, Scrum is “on average” relevant and would work well for CSE development.
3. XP
Extreme programming is a methodology that emerged as a counter-reaction to the ever increasing focus on processes, methods and documents that the older prominent methodologies developed. It almost seemed in some of
these older waterfall-based methodologies as if software development was everything but developing software. XP
brought back the programmer into the leading role and software development as the main focus. As in the previous
section (2) the diﬀerent parts that make up XP are presented below along with a grade of relevance in relation to CSE
development, followed by reﬂections on how these parts have worked in student projects.

1514

M. Blom / Procedia Computer Science 1 (2012) 1511–1517
M. Blom / Procedia Computer Science 00 (2010) 1–7

4

3.1. Pair Programming
Pair programming is two developers working on the same computer, one at the keyboard (driver) and one observer
(co-driver). The co-driver can give almost instant feedback to user errors, deviations from coding standards or other
potential problems to the driver. The roles of driver and co-driver are often changed between the developers to increase
the potential of ﬁnding problems and developers should rotate among tasks to expand the team members’ knowledge
of the entire system. Since pair programming needs two persons, it is less relevant for a single CSE developer, but for
teams of CSE developers it is relevant. Students report that they believe it works, but the main diﬃculty is to convince
developers to actually pair up, since a rather large percentage seem to prefer working alone. Some of the diﬃculties
of pair programming have been reported in [7].
3.2. TDD
TDD stands for Test-Driven Development, but might as well be denominated “Example-Driven Development” or
“Exploratory Development” since the tests are not normal tests written to test an existing system but rather samples
of usage of a potential system. In TDD the developer starts by writing a test for a piece of code that does not yet exist.
The tests should be simple and test a single piece of functionality each. The developer then writes the code needed to
make the test pass, i.e. writes the piece of functionality that the test implied. Finally, the developer cleans up the code
and the tests to meet coding standards and good practice. One might say that working with TDD is somewhat like
working with an induction proof in mathematics. First, a basic test is made to prove that the system works for simple
cases, the base case. Then, one or several further tests are made to prove that the system works for the induction
steps. In general, you have to write rather few test for a piece of functionality to ensure proper function, much like
the induction proof. It is worth mentioning that TDD is not induction proof per se, but that it shares some of its
characteristics. Using TDD is relevant for CSE development. TDD was seen as diﬃcult to apply by students and it
was hence never adopted fully. It requires a “backward thinking” as reported by some students, a paradigm shift in
other terms.
3.3. Incremental Design
Incremental design means organic growth of the system being developed. Rather than following a waterfall process
[8] where each step in the process is visited only once, all steps are iterated through until the system is deemed
complete. “Things” change along the way. Requirements emerge or get changed, the goal of the system might
change, a potential customer might change his/her mind and so forth. As witnessed in case studies like [9] and [10],
CSE developers tend to work incrementally and it is arguably a natural way of working. Incremental design is hence
considered extra relevant. Incremental design seem to work very well and students report it as superior to working
in one single iteration. The main advantage reported is the increased agility of the team in relation to the customer’s
needs.
3.4. Continuous Integration
Continuous integration means having the entire system integrated as often as possible. For multi-team projects,
each team checks in their newly constructed part of the system as soon as possible and the entire system is rebuilt
as to accommodate the new part. Continuous integration reveals problems with the entire system as soon as they
arise, rather than at the end of the project where a traditionally developed system might detect it at ﬁrst. For CSE
development, this would be as relevant as for non-CSE systems. Continuous integration has not been evaluated.
3.5. Collective Code Ownership
Everyone in the team owns the code, not just the developer who happened to write it. Collective ownership of
the code makes the team more robust and less dependent on a single developer, who might be sick or simply quit.
Relevant. Collective code ownership has been more diﬃcult to adapt to than expected beforehand. The developers
in the projects often spoke of “my code” and seemed reluctant to share it with the other team members. Continuous
integration hence seems to require positive enforcements to be fully adopted.

M. Blom / Procedia Computer Science 1 (2012) 1511–1517
M. Blom / Procedia Computer Science 00 (2010) 1–7

1515
5

3.6. Informative Workspace
A key point in XP (and Scrum) is information dispersion and one important item to support this is to have an
informative workspace. This is usually done by having a large board per team that reﬂects the current status of the
project at every given time. This board usually has a graph that tracks the progress of the team, as well as a feature
tracking system where each feature can be in a state of not done, checked out (being worked on) and done. The board
can further have interaction graphs reﬂecting the group work dynamics within the team. All of this is very relevant
for teams, but naturally less relevant for single developers. Informative workspaces have worked well in most projects,
especially the feature tracking system.
3.7. Coding Standard
Following coding standards is generally good since it removes problems with programmer “dialects” that might
make it more diﬃcult to read code written by other developers. As relevant for CSE development as for non-CSE
development. Coding standards have not been strongly enforced in the projects, but most modern development environments provide support for coding standards and it should hence not be a problem.
3.8. Sustainable Pace
Working at a pace that can be sustained over time is good and probably produces better code since humans tend
to do better when well-rested than when stressed or tired. CSE developers are most likely no diﬀerent in that sense
compared to non-CSE developers and this point is hence relevant. Requiring full working days was perhaps not
appreciated, but forbidding overtime was.
3.9. XP summary
All key points of XP are relevant, except Incremental Development that was graded as extra relevant. XP would
in other words suit CSE development well.
4. Agile Development
This section presents the principles in the agile manifesto [2] that underlies Scrum and other agile methods and
how these support CSE development.
Customer Satisfaction - “Our highest priority is to satisfy the customer through early and continuous delivery of
valuable software.” In a CSE setting the focus is to deliver value to the “customer” i.e. the researcher him/herself
and doing this early and continuously is also important, since the results is what counts. Relevant
Embrace Change - “Welcome changing requirements, even late in development. Agile processes harness change for
the customer’s competitive advantage.” CSE development is more exploratory than most non-CSE development
and being prepared to change the software to cope with changing requirements is hence extra relevant.
Frequent Deliveries - “Deliver working software frequently, from a couple of weeks to a couple of months, with a
preference to the shorter timescale.” Even though there might not be an external customer to deliver to, it would
still be important to a CSE developer who wants progress and results as soon as possible. Relevant
Work Together - “Business people and developers must work together daily throughout the project.” This principle
is normally fulﬁlled immediately since the “business people” and developer are the same person(s). Relevant
Motivated Individuals - “Build projects around motivated individuals. Give them the environment and support they
need, and trust them to get the job done.” Again, not a problem since the motivation is generally in place to
start with since the CSE developers are producing software for their own use. Extra relevant
Face-to-face Conversation - “The most eﬃcient and eﬀective method of conveying information to and within a development team is face-to-face conversation.” In the case of a lone CSE developer, who has no one else but
him/herself to converse with, this point is less relevant, but for larger-scale systems with more than one CSE
developer it is relevant.

1516

M. Blom / Procedia Computer Science 1 (2012) 1511–1517
M. Blom / Procedia Computer Science 00 (2010) 1–7

6

Working Software - “Working software is the primary measure of progress.” Always trying to have the software
working is perhaps extra relevant for CSE developers where might not have the help infrastructure that experienced developers have.
Sustainable Development - “Agile processes promote sustainable development. The sponsors, developers, and users
should be able to maintain a constant pace indeﬁnitely.” Working at a sustainable pace is good, per deﬁnition
since the opposite is “non-sustainable”, i.e. terminating. relevant
Technical Excellence - “Continuous attention to technical excellence and good design enhances agility.” Keeping
the system technically sound is important, and perhaps even more so in a CSE context where complex algorithms are common. Relevant.
Simplicity - “Simplicity–the art of maximizing the amount of work not done–is essential.” No diﬀerence to non-CSE
development. Relevant.
Self-organizing Teams - “The best architectures, requirements, and designs emerge from self-organizing teams.” No
diﬀerence. Relevant.
Self-reﬂection - “At regular intervals, the team reﬂects on how to become more eﬀective, then tunes and adjusts its
behavior accordingly.” No diﬀerence to non-CSE development. Relevant.
All points are judged as relevant or extra relevant. Working according to an agile method should hence be beneﬁcial for CSE development.
5. Conclusions
In this article we have tried to evaluate how Scrum and XP in particular and agile development in general ﬁts within
a CSE development situation. Almost every key point in Scrum and XP was judged as relevant or extra relevant and
can be used directly in CSE development. If for some reason, neither Scrum nor XP would be appropriate for a given
CSE project, any agile method that conforms to the Agile manifesto would also work.
I does not perhaps come as a surprise that CSE with its explorative nature would go well together with an agile
approach, but it is still interesting to see that agile development seems almost designed to work well with CSE.
6. Future Work
There are a number of diﬀerent approaches how to continue working with the evaluation of Scrum, XP and other
agile methods.
6.1. Case Studies
An interesting follow-up would be to study CSE developers working as usual, measuring time, work satisfaction
and quality of the resulting system and to compare this with CSE developers working according to Scrum, XP or other
agile methods.
Possible results from case studies like this are indications on what beneﬁts and drawbacks agile methods bring to
CSE as well as subjective opinions from developers on how they perceive working with these methods.
The beneﬁt of case studies is the high level of reality that provides high external validity and the drawback is the
low level of control resulting in low internal and conclusion validity.
A number of interesting case studies have already been conducted as reported in [9], [11], [12], [13] and [10], but
more good case studies are always needed.

M. Blom / Procedia Computer Science 1 (2012) 1511–1517
M. Blom / Procedia Computer Science 00 (2010) 1–7

1517
7

6.2. Experiments
It would also be possible to construct a controlled experiment using CSE people, but using smaller toy projects to
avoid the noise that normally comes from the real world. A factorial experiment using method, task and test subjects
as independent variables and time and quality as dependent variables would be an interesting and eﬃcient setup.
The beneﬁt of a controlled experiment is that it is easier to obtain statistically signiﬁcant results and that it is
possible to replicate the study, hence providing high internal validity and high conclusion validity. The drawback is
of course the lack of reality or, if you will, the artiﬁciality of the situation that makes the external validity lower.
References
[1] M. A. Heroux, J. M. Willenbring, Barely suﬃcient software engineering: 10 practices to improve your cse software, in: SECSE ’09: Proceedings of the 2009 ICSE Workshop on Software Engineering for Computational Science and Engineering, IEEE Computer Society, Washington,
DC, USA, 2009, pp. 15–21. doi:http://dx.doi.org/10.1109/SECSE.2009.5069157.
[2] K. Beck, et. al., Agile manifesto, http://agilemanifesto.org/ (January 2010).
[3] K. Schwaber, Scrum, http://www.scrum.org (january 2010).
[4] K. Beck, Extreme Programming Explained: Embrace Change, Addison-Wesley, 2000.
[5] K. Schwaber, Scrum development process, in: Proceedings of the OOPSLA’95 Workshop on Business Object Design and Implementation,
Austin, Texas, United States, 1995.
[6] H. Kniberg, Scrum and XP from the Trenches, C4Media, 2007.
[7] M. M. M¨uller, W. F. Tichy, Case study: extreme programming in a university environment, in: ICSE ’01: Proceedings of the 23rd International
Conference on Software Engineering, IEEE Computer Society, Washington, DC, USA, 2001, pp. 537–544.
[8] W. W. Royce, Managing the development of large software systems, in: Proceedings of IEEE WESCON, 1970.
[9] J. Segal, Models of scientiﬁc software development, in: Proceedings 2008 Workshop Software Engineering in Computational Science and
Engineering (SECSE), Leipzig, Germany, 2008.
[10] R. A. Bartlett, Integration strategies for computational science & engineering software, in: SECSE ’09: Proceedings of the 2009 ICSE
Workshop on Software Engineering for Computational Science and Engineering, IEEE Computer Society, Washington, DC, USA, 2009, pp.
35–42. doi:http://dx.doi.org/10.1109/SECSE.2009.5069160.
[11] D. Kane, M. Hohman, E. Cerami, M. McCormick, K. Kuhlmman, J. Byrd, Agile methods in biomedical software development: a multi-site
experience report, BMC Bioinformatics 7 (1) (2006) 273.
[12] W. A. Wood,
W. L. Kleb,
Exploring xp for scientiﬁc research,
IEEE Softw. 20 (3) (2003) 30–36.
doi:http://dx.doi.org/10.1109/MS.2003.1196317.
[13] J. Pitt-Francis, M. O. Bernabeu, J. Cooper, A. Garny, L. Momtahan, J. Osborne, P. Pathmanathan, B. Rodriguez, J. P. Whiteley, D. J.
Gavaghan, Chaste: using agile programming techniques to develop computational biology software, Philosophical Transactions of the Royal
Society A: Mathematical, Physical and Engineering Sciences 366 (1878) (2008) 3111–3136.
URL http://dx.doi.org/10.1098/rsta.2008.0096

