Procedia Computer
Science
Procedia
Science
00 (2010)
1–10
ProcediaComputer
Computer
Science
1 (2012)
447–456

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

High Performance Individual-Oriented Simulation Using Complex
Models ✩
Roberto Solara , Remo Suppia , Emilio Luquea
a Computer

Architecture and Operating Systems Department (CAOS)
University Autonoma of Barcelona
Barcelona, Spain

Abstract
Computational simulation has been used as a powerful tool to represent the dynamical behavior of systems based
on complex analytic models. These types of models have two main drawbacks: a) limitations due to the degree of
abstraction needed to simulate them, b) high computing power to simulate a heavily simpliﬁed models. The computing
power available today can overcome these limitations to perform quicker simulations of complex models that are closer
to reality. In this paper, the experiments and performance analysis of a distributed simulation for a complex individual
oriented model (ﬁsh schools) are presented. The development of the ﬁsh school simulator includes the possibility of
working with large models that include large numbers of ﬁsh (> 106 of individuals), predators and obstacles in the
simulated world.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: high performance simulation, individual-oriented models, ﬁsh school, complex models.

1. Introduction
During the last few years, computational simulation has been used as a support tool to understand the behavior of
some complex systems. This tool has proved to have a high predictive capability as well as short response times.
Collective behavior of groups of animals are a common phenomenon existing at diﬀerent scales and complexity
levels. These global patterns emerge without hierarchical structure or centralized control [1]. Basically, members of
a group of individuals generally act on the basis of some limited information and interaction with their neighbors and
the information ﬂows through the system producing collective patterns [2]. Fish schooling is an example of these
collective emerging behavior (self-organization).
An individual-oriented model consists of a ﬁxed number of individuals and an environment in which interactions
occur. It is very diﬃcult to solve this type of model analytically but it is possible to use simulation techniques to
obtain a dynamic behavior of the system.
The main disadvantages involved in this type of model are: the limitations imposed by the complexity and the
workload imposed on the computing system even for a small number of individuals. Currently, there is low cost
✩ This

research has been supported by the MEC-MICINN Spain under contract TIN2007-64974
Email addresses: roberto.solar@caos.uab.es (Roberto Solar), remo.suppi@uab.es (Remo Suppi), emilio.luque@uab.es (Emilio
Luque)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.048

448

R.R.Solar
et al. / Procedia Computer Science 1 (2012) 447–456
Solar et al. / Procedia Computer Science 00 (2010) 1–10

2

computing power available in distributed architectures and thus the simulation of complex models with large numbers
of individuals is possible [3]. This type of model simulation (with a reduced abstraction level) allows results to be
obtained closer to reality, allowing scientists to reach conclusions and gain knowledge about the system under study.
Moreover, the use of distributed computing systems allows us to work with a high number of individuals because the
scalability of the available computing power may be increased according to the needs of the simulated model.
In related works [4] [5] [6], high performance individual-oriented simulation has been used to obtain collective
emerging behaviors of huge number of ﬁsh known as Fish School. Fish schools are an example of many individuals
interacting with a common goal: coordinated and polarized group motion. Due the spatially-explicit nature of this
type of model, it is possible the individuals’ geometrical distribution through the computing distributed architecture
achieving a signiﬁcantly simulation response times decreasing. In [7] we can appreciate the use of parallel/distributed
simulation to explore the emerging behavior of cooperative autonomous UAVs (Unmanned Aerial Vehicles) swarms
based on the ﬂocking model [8] and used to simulate wartime missions. Another case study is shown in [9] in which
a parallel/distributed simulation is used to decrease the response times of a pedestrian movement simulator based on
the social forces model [10]. As can be seen, it exists many research about high performance individual-oriented
simulation covering multiples scales and complexity levels.
Our main interest to overcome the limitations imposed by models’ complexity proposing to achieve following
goals: ﬁrst, to give computational support to the biologists through simulation results closest to reality and secondly,
to solve complex computational problems justifying the use of distributed and parallel architectures.
In this paper we present results of a distributed individual-oriented ﬁsh school simulator based on Huth & Wissel
rule model [11] redesigned to simulate large numbers of individuals. This development has been realized to eﬃciently
simulate complex three-dimensional models on more realistic scenarios. These scenarios are considered in order to
reduce the system’s abstraction level including active and passive individuals. Active individuals are represented as
predators: searching, pursuing, attacking, capturing and handling ﬁsh belonging to ﬁsh school. Passive individuals
represent irregular terrain, rocks, submarine vegetation, the surface and the seaﬂoor (cylindrical obstacles and world
bounds), i.e. every static element belonging to environment.
2. Individual-Oriented Models
Ecologist have used discrete models to understand, using simulation, how global patterns emerge from individual
interactions in ecosystems. These models (according to the system and objective) are called individual-oriented
models (IoM), individual-based models (IbM) or agent-based models (AbM) and are developed in order to understand
the dynamic behavior of a system and to solve the disadvantages imposed by population models based on diﬀerential
equations. These models consists of a ﬁxed number of autonomous individuals, interaction rules, individual attributes
which are maintained through time and a environment where interactions occur. Some individual-oriented models
are also spatially-explicit, i.e. the individuals are associated with a location in geometrical space. Moreover, some
spatially-explicit individual-oriented models also can show motion patterns, i.e. the individuals can change its relative
position in geometrical space.
There are considerable literature and studies of spatially-explicit individual-oriented simulation in the biological
area, such as: bird ﬂocks [8] [12], insect swarms [13] [14], mammal herds [15] and ﬁsh schools [11] [16] [17] [18]
[19].
2.1. Fish School Model
Fish Schools are one of the most frequent social groups in the animal world [11]. This social aggregation shows
complex emergent properties such as coordinated and polarized behavior, leaderless group navigation or hierarchical
structure and absence of external inﬂuences.
In order to describe the ﬁsh behavior we consider that each ﬁsh changes its position and orientation in discrete step
of time (associated to a simulation step) and the new position and orientation depend on the position and orientation
of a ﬁxed number of neighbors. The neighbors’ inﬂuence on a single ﬁsh depends on their space-time position
and to select appropriately the neighbor’s inﬂuence we identify three vision areas: attraction, repulsion and parallel
orientation (Figure 1).

R. Solar
et al. / Procedia Computer Science 1 (2012) 447–456
R. Solar et al. / Procedia Computer Science 00 (2010) 1–10

449
3

non visible area
attraction area
parallel orientation area

repulsion area
Figure 1: Neighbor inﬂuences areas.

Depending on spatial-temporal neighbor’s position, the ﬁsh chooses between three behavior patterns: repulsion
- collision avoidance between ﬁsh of the same group (turning the ﬁsh’s orientation minimum-angle rotation so the
ﬁsh’s orientation and that of its neighbor are perpendicular, Figure 2(a)), parallel orientation - the group moves in the
same direction (matching the ﬁsh’s orientation with that of its neighbor, Figure 2(b)) and attraction - to maintain the
cohesion of the group to avoid predators (steering the ﬁsh’s orientation towards its neighbor’s position, Figure 2(c)).

(a) Repulsion behavior pattern.

(b) Parallel orientation behavior pattern.

(c) Attraction behavior pattern.

Figure 2: Fish school behavior patterns.

Furthermore, the model should include a small random behavior in the searching phase for the selection of an
individual in relation to a set of them that meet the same conditions.
2.2. Prey-Predator Interaction
One of the main motivations of a ﬁsh is to keep close to the group as a protective mechanism to avoid becoming
prey for a predator. When a ﬁsh detects a threat, if it is part of the group it can increase the chances of survival, and
there are diﬀerent behaviors: dilution eﬀect - the prey change direction in order to confuse the predator and making
the prey selection diﬃcult, confusion eﬀect - the predator will have diﬃculty in selecting a prey in front of a large
number of them [20], and many eyes hypothesis - the group size increases in order to have more eyes analyzing the
environment detecting potential threats.
As basis for prey-predator interaction we adapt two ”steering behavior” routines [8] described below: pursuit
- to guide the individual towards a predicted target’s future position and evade - to guide the individual in opposite
direction of predicted target’s future position.
Moreover, we use a set of behavior patterns to eﬀective collective predator evasion [21] which consists of three
components: schooling, cooperative escape and selﬁsh escape and will be described below.

450

R.R.Solar
et al. / Procedia Computer Science 1 (2012) 447–456
Solar et al. / Procedia Computer Science 00 (2010) 1–10

4

2.2.1. Choosing a Rule
As the situation changes continuously around the ﬁsh, each ﬁsh needs to select an appropriate pattern to eﬃciently
avoid the predator. For this, the prey identiﬁes ﬁve interaction areas with its predator (Figure 3).

non visible area
visible area
caution area
urgency area
capture area
Figure 3: Prey-predator interaction areas.

For the non visible area ﬁsh will only consider the behavior in relation to its neighbors and this activity is called
schooling (the ﬁsh only takes into account its neighbors’ inﬂuence). If there is a threat in visible area, the ﬁsh
performs schooling maintaining its speed in average speed (Table 1) It there is a predator in the caution area, the
ﬁsh performs cooperative escape, (the ﬁsh considers its neighbors’ inﬂuence and uses evade to avoid the predator
without abandoning the group’s formation) and increases its speed to caution speed (Table 1). If there is a predator
in the urgency area, the ﬁsh performs selﬁsh escape, (uses evade to avoid the predator’s trajectory, abandoning group
formation) maximizing its speed to maximum speed (Table 1). If there is a threat in capture area, the ﬁsh is captured.
2.3. Avoiding Collisions
The movement detection sensors of the ﬁsh are mainly the eyes and/or the body lateral lines that enable it to detect
objects in the environment that are relevant to its survival [22]. Using the information provided by these sensors, the
ﬁsh can obtain every object’s absolute position in the environment: neighbors’ proximity, potential collisions, predator
presence, etc. and the information provided by these sensors are limited by the maximum vision area (biological
characteristics and degree of illumination in the environment).
Collision avoidance is the ﬁrst behavior that should be implement and consist of three basic steps: obtain the
object visibility, detect the potential collision and avoid the potential collision. To determine the object visibility, it is
necessary to evaluate if the object is inside of the ﬁsh’s visibility area, and if this is true it is necessary to evaluate if
the object is in the ﬁsh path. Finally, if the object is in the ﬁsh path, it is necessary to eﬃciently avoid the potential
collision.
2.3.1. Cylindrical Obstacles
On the basis that complex structures can be achieved from the union of simple geometric ﬁgures, we consider
individuals’ interaction with cylindrical obstacles. Cylindrical obstacles are deﬁned by the equation of a cylinder of
radius r with axis parallel to Z axis in the point (a, b, 0) (Equation (1)).
(x − a)2 + (y − b)2 = r2
Given a ﬁsh position (x0 , y0 , z0 ) and orientation (v x , vy , vz ), parametric equation can be obtained:
⎧
⎪
x = x0 + tΔv x
⎪
⎪
⎨
y = y0 + tΔvy
⎪
⎪
⎪
⎩ z = z + tΔv
0

(1)

(2)

z

From intersection of equations (1) and (2), a collision point is represented. With this point we can calculate the
force needed to alter the trajectory of the individual using the repulsion behavior (same situation as neighbor repulsion)
and avoid the possible collision.

R. Solar
et al. / Procedia Computer Science 1 (2012) 447–456
R. Solar et al. / Procedia Computer Science 00 (2010) 1–10

451
5

2.3.2. World Boundaries
In a real environment, we can consider that there are some forces that are constantly inﬂuencing the ﬁsh’s trajectory
in order change the direction to avoid collisions. These forces can be associated with many objects that interacts with
a ﬁsh, such as: other ﬁsh that are not a predator (moving obstacles), the ground (vegetation, rocks, etc), environment
borders (big obstacles, world limits, ...), etc. So we can represent each environment’s object as a set of description
points P(xi , yi , zi ) and corresponding forces F( fix , fiy , fiz ), i ∈ N0 .

Figure 4: World wall semi-elliptical shaped border example.

To compute this approach, it is necessary to evaluate the distance from ﬁsh’s position to the nearest description
points in order to ﬁnd the most representative force. Next, for each force, its inﬂuence on the ﬁsh (using repulsion) is
calculated and adding all these vector inﬂuences, the new ﬁsh’s trajectory is obtained (Figure 4). The main advantage
of this approach is that a very high level of detail can be achieved and it is possible to represent of any static or mobile
object.
We consider f position and forientation the position and orientation of a single ﬁsh; P and F the set of description points
and forces associated; Rmax the maximum vision range; α the rotating angle; and forientation the vector that collects the
inﬂuences of the nearest potential collision points. The algorithm is: for each ﬁsh, the distance from ﬁsh’s position to
Algorithm 1 New Orientation’s Calculation
for i ← 0 to P.size() do
if distance( f position ,Pi ) ≤ Rmax then
α ← min(∠( forientation , Fi ) ± π)
forientation ← forientation + rotate( forientation , α)
end if
end for
each description points is calculated, if the description point intercepts the vision range then its inﬂuence is calculated
and stored in an auxiliary vector. Finally, the stored accumulated inﬂuence is computed in the new ﬁsh’s orientation.
3. Distributed Time-Driven Simulation
An important issue in discrete simulation is the mechanism in which the state variables changes as simulation time
advance. We can distinguish two time-advance approaches: time-driven and event-driven. In a time-driven approach,
the simulation time is subdivided into a sequence of equal-sized steps, and the simulation advances from one time step
to the next [23]. In the event driven mechanism the simulation time is computed when a event is processed adding the
event time to the execution time. Moreover, is necessary to consider the time management protocol because this will
ensuring that the execution of the distributed simulation is properly synchronized. Time management algorithms can
be classiﬁed as conservative or optimistic [24]. In conservative algorithms, the process is blocked until all execution
conditions are satisﬁed. In optimistic algorithms, the process will continues even if some execution condition is not
fulﬁlled but this algorithm includes mechanisms in order recover from causality issues.

452

R.R.Solar
et al. / Procedia Computer Science 1 (2012) 447–456
Solar et al. / Procedia Computer Science 00 (2010) 1–10

6

We have developed a distributed ﬁsh school simulator using C++, STL standard template library and MPI message
passing library that implements a time-driven time-advance method and a conservative algorithm as the synchronizing
method.
3.1. Model Distribution
One of the most important problems in this model is the individuals’ distribution in relation to the distributed
computing architecture elements.
Individual-oriented systems can be implemented in a distributed fashion making each node responsible for a
ﬁxed portion of the problem domain where these ﬁxed portions can be assigned using either the Lagrangian method
or Euclidean method [25]. In the Lagrangian method, each node is responsible for a ﬁxed set of individuals. In
the euclidean method, each node is responsible for a ﬁxed portion of the simulated space, together with the set of
individuals currently residing in that area.

	


	


	

  

  

	

  

Figure 5: Domain strip partitioning.

In this work, we use euclidean partitioning to decompose the simulation space (Figure 5). Given N processing
nodes, the simulation space is divided evenly into n strips. Each strip is called a logical process (LP) and is assigned
to a processing node where each node independently execute the simulation with local data, making data exchange
through two types of messages between adjacent slices (LPs): migration and neighbors request or ghost cell exchange
[26]. On one hand, migration is used when the new position is outside of the local LP borders (change its residence
from one LP to other). On the other hand, a neighbors request is used when an individual needs to evaluate the
individuals’ inﬂuence inside adjacent LPs (interaction of near individuals at the maximum ﬁsh range of vision but in
adjacent LP’s).
4. Experimental Results
In this paper we present comparative results of two versions of a distributed individual-oriented ﬁsh school simulator. On one hand, the ﬁrst version is implemented by using only internal behavioral patterns to the group formation
which we refer as basic model. On the other hand, the second version adds into the basic model a prey-predator
interaction, cylindrical obstacle avoidance, and an interactive representation of world boundaries which we refer as
enhanced model.
Every experiment was executed with two set of inputs described in Table 2 using simulation parameters described
in Table 1. Active and passive individuals were distributed uniformly through the simulation space in order to achieve
similar workload in every computing elements. Every experiment was executed on an IBM cluster described in detail
in Table 3. For each data set, the simulation was carried out with a diﬀerent number of processors: 1, 8, 16, 32 and
64.

453
7

R. Solar
et al. / Procedia Computer Science 1 (2012) 447–456
R. Solar et al. / Procedia Computer Science 00 (2010) 1–10

Parameter
Body length (BL)
Attraction radius
Parallel orientation radius
Repulsion radius
Average speed
caution speed
Maximum speed
Vision radius
Caution radius
Urgency radius
Capture radius
Neighbor number
Dead area

Value
1.0
5.3BL
2.3BL
0.8BL
0.1BL
2.4BL
3.0BL
5.6BL
3.3BL
1.1BL
0.6BL
4

Fish
Predators
Obstacles
Description Points

Set of Input 1
80 000
800
250
639 552

Set of Input 2
320 000
3 200
1 000
2 473 020

Table 2: Simulation inputs sets.

π
3

Table 1: Model parameters for simulation experiments.

Node
Processor
Memory
Storage
Network Interface

Front-End Node
1 x IBM x3650
Dual-Core Intel(R) Xeon(R) CPU 5150
@2.66GHz 4MB L2 (2x2)
8 GB Fully Buﬀered DIMM 667 MHz
RAID 5 1.8 TB hot-swap SAS
Integrated dual Gigabit Ethernet

Compute Nodes
32 x IBM x3550
2 x Dual-Core Intel(R) Xeon(R) CPU 5160
@3.00GHz 4MB L2 (2x2)
12 GB Fully Buﬀered DIMM 667 MHz
Hot-swap SAS Controller 160GB SATA Disk
Integrated dual Gigabit Ethernet

Table 3: Hardware architecture characteristics.

Figure 6 shows the total execution, computing and communication times for Set 1. In this ﬁgure, we see that
the increasing model’s complexity is closely linked with the increase in simulation time. This happens because the
increasing of the model’s complexity is reﬂected as a system’s detail level increase which implies more compute
operations per simulation step. Moreover, we can observe that as the number of processors increases, the diﬀerence
between implementations’ response times decreases.
Processors vs Total Time/Computation Time/Communication Time (80000 Fish)
100000

Computation Time (basic model)
Communication Time (basic model)
Computation Time (enhanced model)
Communication Time (enhanced model)

Total Time

10000

1000

100

10

1

1

8

16
Processors

32

64

Figure 6: 80 000 Fish Simulation Times.

Figure 7 shows the total execution, computing and communication times for Set 2. We can see the same tendency

454

R.R.Solar
et al. / Procedia Computer Science 1 (2012) 447–456
Solar et al. / Procedia Computer Science 00 (2010) 1–10

8

shown using Set 1, but contrary to our previous results as the number of processors is increased, the diﬀerence between
response times are longer.
Processors vs Total Time/Computation Time/Communication Time (320000 Fish)
1e+06

Computation Time (basic model)
Communication Time (basic model)
Computation Time (enhanced model)
Communication Time (enhanced model)

100000

Total Time

10000

1000

100

10

1

¡

1

8

16

32

64

Processors

Figure 7: 320 000 Fish Simulation Times.

Figure 8 and Figure 9 show simulation results having a super-linear speedup. As the number of processors is
increased, the LP’s assigned workload decreases, so the sub domain problem complexity is reduced. In general terms,
if we have N individuals to simulate on a serial environment, every individual needs to evaluate the spatial-temporal
position of N − 1 individuals. In the other case, if we simulate N individuals using P processors, each LP simulates
a NP average of individuals, evaluating only the relative position of NP − 1 individuals. However, Figure 8 shows the
enhanced model scaling better than the basic model. This shows that increasing the model’s complexity can help
obtaining a scalability closest to the ideal and more realistic simulation results.
Speedup (80000 Fish)
4096

enhanced model
basic model
ideal speedup

Speedup

1024

256

64

1

8

16
Processors

32

64

Figure 8: 80 000 Fish Simulation Speedup.

Figure 9 shows that the enhanced model speedup is close to the ideal speedup, but not as much as the basic model.
However, the enhanced model’s results are excellent taking into account the advantage achieved by increasing the
model’s complexity (more realistic results). In other words, although the system’s scalability was decremented the
simulation results are in agreement with our expectations.

455
9

R. Solar
et al. / Procedia Computer Science 1 (2012) 447–456
R. Solar et al. / Procedia Computer Science 00 (2010) 1–10
Speedup (320000 Fish)
4096

enhanced model speedup
basic model speedup
ideal speedup

Speedup

1024

256

64

1

8

16

32

64

Processors

Figure 9: 320 000 Fish Simulation Speedup.

5. Conclusions
Ecologists have been using discrete models to study global patterns that emerge through local interaction by computational simulation. For many years, these ecological simulations have been technologically limited by the models’
complexity and the workload assigned to a single computational element. Currently, due to increasing computational
power and the parallel/distributed computing emergence, these limitations are not a drawback anymore. Further, it is
possible to create more complex models to achieve simulation results closest to reality and to increase the workload
by means of including diﬀerent species to achieve a similar interaction level such as the real environment.
We have developed a distributed ﬁsh school simulator based on a complex model in order to understand behavioral
patterns that are based on simple models which cannot be explained. Moreover, we executed simulation experiments
using two sets of data input in order to compare the performance between the simulator based on a basic model and
our simulator version. The main conclusions that can be extracted from our work are the following:
• Enhanced model scalability is excellent, achieving good performance close to ideal speedup and achieving our
objectives (good scalability and more realistic results).
• Complex simulation models development implies a system’s abstraction level reduction which allows results
close to reality. These results are important when trying to understand the behavior of species under speciﬁc
circumstances, such as the behavior of a ﬁsh school during predator attacks.
• Increasing the processors number using the enhanced model assures system scalability. Figure 8 and 9 show
the enhanced model has achieved better results than the basic model and closest to the ideal.
• Experimental results shown in Figure 8 and 9 demonstrate that increasing the model’s complexity and the
workload is a great help when trying to maintain the system scalability as the number of processors is also
increased.
Future Work
• Develop strategies for eﬃcient load balancing. Exploring dynamic load balancing strategies based on both space
division and individuals clustering. This is primary to obtain a better use of the distributed/parallel architecture.
• Exploit the use of both hybrid architectures currently available, i.e. to promote the use both thread and message
level parallelism, in order to reduce simulation times.
• Decreasing the abstraction’s level of the system as much as possible in order to improve the application scalability.

456

R.
Solar et al. / Procedia Computer Science 1 (2012) 447–456
R. Solar et al. / Procedia Computer Science 00 (2010) 1–10

10

References
[1] A. Huth, C. Wissel, The simulation of ﬁsh schools in comparison with experimental data, Ecological Modeling 75 (1994) 135–145+.
[2] I. Giardina, Collective behavior in animal groups: theoretical models and empirical studies, HFSP Journal 2 (4) (2008) 205–219.
[3] L. Chwif, M. R. P. Barretto, R. J. Paul, On simulation model complexity, in: WSC ’00: Proceedings of the 32nd conference on Winter
simulation, Society for Computer Simulation International, San Diego, CA, USA, 2000, pp. 449–455.
[4] R. Suppi, P. Munt, E. Luque, Using pdes to simulate individual-oriented models in ecology: A case study, in: ICCS ’02: Proceedings of the
International Conference on Computational Science-Part I, Springer-Verlag, London, UK, 2002, pp. 107–116.
[5] D. Mostaccio, C. Dalforno, R. Suppi, E. Luque, Distributed simulation of large-scale individual oriented models, Journal of Computer Science
& Technology 6 (2) (2006) 59–65.
[6] C. Dalforno, D. Mostaccio, R. Suppi, E. Luque, Increasing the scalability and the speedup of a ﬁsh school simulator, in: ICCSA ’08:
Proceedings of the international conference on Computational Science and Its Applications, Part II, Berlin, Heidelberg, 2008, pp. 936–949.
[7] J. J. Corner, G. B. Lamont, Parallel simulation of uav swarm scenarios, in: WSC ’04: Proceedings of the 36th conference on Winter
simulation, Winter Simulation Conference, 2004, pp. 355–363.
[8] C. W. Reynolds, Flocks, herds, and schools: A distributed behavioral model, Computer Graphics 21 (4) (1987) 25–34.
[9] M. J. Quinn, R. A. Metoyer, K. Hunter-zaworski, Parallel implementation of the social forces model, in: in Proceedings of the Second
International Conference in Pedestrian and Evacuation Dynamics, 2003, pp. 63–74.
[10] D. Helbing, P. Moln´ar, Social force model for pedestrian dynamics, Phys. Rev. E 51 (5) (1995) 4282–4286.
[11] A. Huth, C. Wissel, The simulation of the movement of ﬁsh schools, Journal of Theoretical Biology 156 (3) (1992) 365–385.
[12] R. O. Saber, R. M. Murray, Flocking with obstacle avoidance: cooperation with limited communication in mobile networks, in: Decision and
Control, 2003. Proceedings. 42nd IEEE Conference on, Vol. 2, 2003, pp. 2022–2028 Vol.2.
[13] E. Bonabeau, M. Dorigo, G. Theraulaz, Swarm intelligence: from natural to artiﬁcial systems, Oxford University Press, Inc., New York, NY,
USA, 1999.
[14] J. Kennedy, R. C. Eberhart, Swarm intelligence, Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 2001.
[15] S. Gueron, S. Levin, D. Rubenstein, The dynamics of herds: From individuals to aggregations, Journal of Theoretical Biology 182 (1996)
85–98(14).
[16] I. Aoki, A simulation study on the schooling mechanism in ﬁsh, Bulletin of the Japanese Society of Scientiﬁc Fisheries 48 (8) (1982) 1081–
1088.
[17] R. Vabø, G. Skaret, Emerging school structures and collective dynamics in spawning herring: A simulation study, Ecological Modelling
214 (2-4) (2008) 125–140.
[18] J. K. Parrish, S. V. Viscido, D. Grnbaum, Self-organized ﬁsh schools: An examination of emergent properties, Biol. Bull 202 (2002) 296–305.
[19] J. C. Gonzlez, C. Dalforno, R. Suppi, E. Luque, A fuzzy logic ﬁsh school model., in: ICCS, Vol. 5544 of Lecture Notes in Computer Science,
2009, pp. 13–22.
[20] B. Partridge, The structure and function of ﬁsh schools, Scientiﬁc American (1982) 114–123.
[21] M. Zheng, Y. Kashimori, O. Hoshino, K. Fujita, T. Kambara, Behavior pattern (innate action) of individuals in ﬁsh schools generating eﬃcient
collective evasion from predation, Journal of Theoretical Biology 235 (2) (2005) 153 – 167. doi:DOI: 10.1016/j.jtbi.2004.12.025.
[22] X. Tu, Artiﬁcial Animals for Computer Animation: Biomechanics, Locomotion, Perception, and Behavior, Springer-Verlag New York, Inc.,
Secaucus, NJ, USA, 2000.
[23] R. M. Fujimoto, Parallel and Distribution Simulation Systems, John Wiley & Sons, Inc., New York, NY, USA, 1999.
[24] R. M. Fujimoto, Parallel simulation: parallel and distributed simulation systems, in: WSC ’01: Proceedings of the 33nd conference on Winter
simulation, IEEE Computer Society, Washington, DC, USA, 2001, pp. 147–157.
[25] F. Merchant, L. F. Bic., M. B. Dillencourt, Load balancing in individual-based spatial applications, in: PACT ’98: Proceedings of the 1998
International Conference on Parallel Architectures and Compilation Techniques, IEEE Computer Society, Washington, DC, USA, 1998, p.
350.
[26] C. Ding, Y. He, A ghost cell expansion method for reducing communications in solving pde problems, in: Supercomputing ’01: Proceedings
of the 2001 ACM/IEEE conference on Supercomputing (CDROM), ACM, 2001, pp. 50–50.

