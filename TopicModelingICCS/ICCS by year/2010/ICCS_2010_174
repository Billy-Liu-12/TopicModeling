Available online at www.sciencedirect.com

Procedia Computer Science 1 (2012) 2763–2768
Procedia Computer Science 00 (2009) 000–000

Procedia
Computer
Science
www.elsevier.com/locate/procedia
www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

On Investigation of Parallelization Effectiveness with the Help of
Multi-core Processors
Nikita Rabaa, Elena Stankovaa *, Natalya Ampilovaa
a

Saint-Petersburg State University, Universitetskaya emb. 7-9, Saint-Petersburg, 199034, Russia

Abstract
The article is concerned with the relevant problem of effective mapping of existing applications on multi-core processor
computers. Numerical model of convective cloud is used as an application to be parallelized. The choice of the application is
stipulated by the necessity of real-time forecast of the dangerous atmospheric phenomena such as thunderstorms, hails and rain
storms by means of rather cheap desktop computers. Space parallelization in conjunction with the multi-thread technology has
been used. Test numerical experiments have been provided on the multi-core processor computers of different types.
Effectiveness of parallelizing has been investigated in relation to core and thread number.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝
Keywords: optimization; parallel computing; threads; multi-core processor, numerical model; convective cloud

1. Introduction
Nowadays effective mapping of existing applications on multi-core processor computers is one of the most
challenging problems. It is more or less evident that the solution of the problem is on the way of adequate
application of high-performance computing methods to the calculations on multi-core processors. Space
parallelization or domain decomposition is one of the most natural and frequently used methods [1-4].
We try to prove the idea with the help of the software which realizes 1.5-D numerical model of a natural
convective cloud. The choice of the application is stipulated by the necessity of real-time forecast of dangerous
convective phenomena such as thunderstorms, hails and rain storms. Contrary to climate and weather forecast these
phenomena are predicted in small local weather centers and airports which do not possess high-performance
computational facilities and need effective software to provide quick calculations on ordinary desktops. To use
ordinary desktop means now to use multi-core desktop. That is why the software for forecast should be properly
mapped on multi-core desktop or parallelized in order to be effectively used.
Numerical model of convective cloud represents computer realization of a system of partial differential equations
of hydro and thermo dynamics (dynamical block) in conjunction with the stochastic equations for distribution
functions of condensed phase particles (microphysical block). Dynamical block program realization needs proper

*Elena Stankova. Tel.:+7-812-; fax: +7-812-428-43-64.
E-mail address: lena@csa.ru.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.310

2764

N. Raba Ampilova
et al. / Procedia
Computer
Science
1 (2012)
2763–2768
Raba, Stankova,
/ Procedia
Computer
Science
00 (2010)
000–000

computational algorithm for space parallelizing, as numerical schemes used for PDE calculation need data from
several neighboring mesh nodes and that is why it is difficult to decompose computational domain.
Microphysical block calculations though being provided in one mesh node are extremely time consuming and
besides, condensation takes place in special parts of computation domain. So microphysical calculations are
extremely space inhomogeneous that resulted in load balancing problems in the exercise space parallelization.
To avoid the above mentioned problems special procedures have been developed. Space parallelization has been
performed in conjunction with the multi-thread technology. Parallel version of the application has been launched on
multi-core processors desktops of different types and with different core number. We investigate effectiveness of
parallelizing in relation to core and thread number. Test experiments have shown that parallelization on multi-core
processors is an effective tool. Maximum speed up value is obtained when the number of cores is equal to the
number of threads.
2. Model Description
The detailed description of model is given in [5, 6]. Below we present only a short description of it together with
some illustrations of the results of the model performance. The model simulates convective flow by means of two
concentric cylinders. The inner cylinder represents updraft flow region, where condensation and further formation of
cloud particles take place, and the outer cylinder represents a surrounding downdraft region. Though being rather
sophisticated such a two-cylinder structure provides a simulation of a real convective cloud evolution including
three stages of convective cloud life cycle (development, mature stage and dissipation).
The model is time-dependent, 1.5-dimensional with the detailed description of the warm microphysical
processes. The term 1.5 dimensional states that though all cloud variables are represented with mean values averaged
over the horizontal cross section of the each cylinder, fluxes in and out of the inner cylinder borders are taken into
account. The term “warm” means that no microphysical processes responsible for ice production are taken into
account.
Dynamical block of the model is the set of partial differential equations describing evolution of vertical
component of wind velocity, temperature, mixing ratios of water vapor and cloud droplets in time and height under
the influence of buoyancy force, gravity, turbulence and heat generation/consumption resulted from the phase
transitions during the processes of condensation/evaporation.
Microphysical block is represented by the stochastic equation describing the variation of the mass distribution
function of cloud droplets under the influence of the processes of nucleation (water droplet formation on aerosol
surface), condensation and evaporation both in time and height. The knowledge of distribution function enables to
calculate both spectra of droplets and liquid water content of a cloud.
Vertical distributions of environmental temperature and relative humidity together with initial impulses of
temperature and velocity have been taken as initial conditions. All variables with the exception of temperature and
mixing ration of water vapor are equal to zero at the top and at the bottom boundaries of the cylinders.
Equations are numerically integrated using a finite difference method. Forward-upstream scheme is used.
Vertical velocity is averaged over two grid points (point below is taken if w0 or point above if w<0). Modified
Kovetz-Olund method [7] has been used for microphysical block equation integration.
Time-splitting method is used for sequential calculations of dynamical and microphysical process. Dynamical
processes were calculated at the first stage, microphysical processes at the second one.
The results of numerical simulation show that the model is capable to describe warm rain processes in convective
clouds under various vertical distributions of temperature and relative humidity of outer atmosphere. The model
reproduces evolution of vertical velocity (Fig.1a), mixing ration of cloud droplets (Fig.1b) and cloud droplet
spectrum (Fig.3) in time and space. It can predict maximum and minimum values of the above mentioned dynamical
and microphysical characteristics and besides the values of the height of a cloud base and upper boundary,
precipitation rate and total quantity of the rainfall. All that characteristics are of major value for prediction of
dangerous convective cloud phenomena such as thunderstorms, hails and rain storms.
It is worth to be mentioned that relative simplicity (low dimension) is the important advantage of the model. Of
course 2-D and 3-D models are able to reproduce specific features of a cloud evolution more precisely [8], but they
demand great computational resources. So such models can be realized and successfully applied only in large
meteorological centres obtaining powerful high-performance clusters or supercomputers and only for the aims of

N. Raba
et al.Ampilova
/ Procedia/ Procedia
ComputerComputer
Science 1 Science
(2012) 2763–2768
Raba,
Stankova,
00 (2010) 000–000

2765

scientific research.

Fig. 1. Example of evolution of (a) vertical velocity (in m/sec, maximum value is 12 m/sec) and (b) mixing ration of cloud droplets (in kg/kg,
maximum value is 0.01 kg/kg)

Fig. 2. Example of cloud droplet spectrum evolution

Real-time forecast providing in the airports and local weather centres need models which can simulate the evolution
of a dangerous event nearly instantly (in the course of several minutes ). Even 1.5-D model becomes unacceptably
time consuming if we add a distribution function not only for cloud droplets but for different forms of ice crystals,
hail and graupel. In this case the necessity of using parallelization becomes quite evident.
Though it takes several minutes to calculate evolution of a “warm” cloud with the help of 1.5-D model, we
decide to develop the parallelization method using simpler model variant.
3. Method of Parallelizing
Dynamical and microphysical blocks can be parallelized separately. Though dynamical and microphysical
processes are calculated sequentially in each node, calculations in several nodes can be provided in parallel.
Numerical scheme for the dynamical part of the model is an explicit one. So we can easily calculate all
dynamical characteristics of the cloud at a time step “n+1” if we know them in each node of the mesh at a time step

2766

N. Raba Ampilova
et al. / Procedia
Computer
Science
1 (2012)
2763–2768
Raba, Stankova,
/ Procedia
Computer
Science
00 (2010)
000–000

“n”. And though to calculate dynamical characteristic in a mesh node “i” we should know corresponding
characteristic in a neighbor mesh node “i–1”, or “i+1” we can easily do this as all necessary values have been
already calculated at the previous time step. To perform space parallelization we decompose computational domain
of the model into several subdomains. Each subdomain represents a cylinder of the height ǻh and includes parts of
inner and outer cylinders as well as a part of the environment at rest.
Multi-thread technology was used to realize parallelization methodology. Threads are created, and the data
calculated on the previous time step are passed to the threads. It is essential that multi-core processors are in fact of
SMP architecture type. So all threads can access to shared memory where all the parameters calculated at the
previous step are stored.
Each thread implements calculation within definite mesh nodes. The transfer to the next time step is implemented
when all threads fulfill their calculations.
As at each time step processor should wait for the completion of implementation of all threads, the problem of
load balancing appears to be challenging. It is not easy to find the solution because the calculation of the cloud
characteristics in different subsections demands quite different time due to the fact that it is not necessary to obtain
microphysical characteristics in the mesh subsections where cloud droplets are absent and relative humidity is less
than 100%.
Special procedure of mesh subsection redistribution was used to obtain equal time of thread implementation. If
“n” threads are launched and the certain thread has number “k”, the latter will be responsible for calculation of
microphysical and dynamical processes in the mesh nodes with the numbers (k – 1) + i · n, (i = 0, 1, …). The
procedure results in calculation of neighboring subdomains in different threads and provides acceptable level of load
balancing.
As each launch of the thread demands definite time, the number of threads should be diminished in order to
decrease computational overheads. It should be noted that some parts of the model program, such as creation and
launch of the thread, calculation of boundary characteristics are calculated in single-thread regime.
4. Test Results
Four multi-core desktops have been used for model calculations: Comp1 (Core 2 Duo 6400, 2.13 GHz, 2.5 GB, 2
cores), Comp2 (Core 2 Duo E8200, 2.66 GHz, 4.0 GB, 2 cores), Comp3 (Core 2 Quad Q8200, 2.33 GHz, 2.5 GB, 4
cores), Comp4 (Core 2 Quad Q6600, 2.4 GHz, 2.0 GB, 4 cores). So we consider two computers which have two
cores and two computers which have 4 cores.
It has been established that computational time and effectiveness of parallelizing depend essentially upon the
time and space steps of the numerical schemes and upon the complexity of microphysical model simulation. The
latter is dependent upon the number of droplet size bins. So the results presented below in tables 1–4 are given with
reference to these three parameters. Number of bins varies from 50 up to 250, time step is equal to 4 sec, and space
step is equal to 200 m.
Table 1. Calculation time (seconds) of 30 min model cloud evolution obtained with the help of different types of processors (Comp1, Comp2,
Comp3, Comp4). 4 threads are used for parallelizing both microphysical and dynamical processes. N1 is the number of bins
N1

50

70

100

150

250

Comp1

2.61

3.39

4.67

7.08

12.80

Comp2

2.06

2.59

3.56

5.78

9.34

Comp3

1.95

2.24

2.78

3.78

6.33

Comp4

1.83

2.17

2.67

3.71

6.41

The results presented in table 1 show that parallelization with the help of 4 cores processors is more efficient
than with the help of 2 cores processor. Efficiency increases with increasing of the number of bins that is with the
increase of computational work necessary to be implemented. Difference in computation time in the simplest variant
appears to be quite insufficient and increases up to nearly 50% in case of maximum bin number.

2767

N. Raba
et al.Ampilova
/ Procedia/ Procedia
ComputerComputer
Science 1 Science
(2012) 2763–2768
Raba,
Stankova,
00 (2010) 000–000

Table 2. Calculation time (seconds) of 60 min model cloud evolution. Different number of threads is used for parallelizing dynamical (ThD) and
microphysical (ThM) processes. Only Comp1 (2 cores) is used. N1 = 250
ThM = 1

ThM = 2

ThM = 3

ThD = 1

70.52

38.45

46.06

ThM = 4
38.72

ThD = 2

63.03

36.39

44.34

36.51

ThD = 3

69.97

37.11

44.97

38.33

ThD = 4

68.56

36.44

44.94

36.55

Table 3. Calculation time (seconds) of 60 min model cloud evolution. Different number of threads is used for parallelizing dynamical (ThD) and
microphysical (ThM) processes. Only Comp3 (4 cores) is used. N1 = 250
ThM = 1

ThM = 2

ThM = 3

ThM = 4

ThM = 8

ThD = 1

50.37

29.81

22.30

17.89

18.25

ThD = 2

49.89

28.28

20.30

16.59

16.77

ThD = 3

49.19

27.70

20.11

16.12

16.44

ThD = 4

48.22

27.58

19.34

16.03

16.42

ThD=8

49.56

28.25

20.20

16.70

16.97

The results presented in tables 2 and 3 show that the best results (the smallest calculation time) is obtained when
the same number of threads is used for parallelizing microphysical and dynamical processes, and this number is
equal to the number of processor cores. It can be seen also that parallelization of a dynamical process is not so
important for the decreasing calculation time. In case when the number of threads for dynamical process
parallelization is optimal and the number for microphysical processes is not optimal the calculation time exceeds
calculation time in case of optimal number of threads for microphysical processes and not optimal number of
threads for dynamical processes. So it can be concluded that the most time consuming part of the model is
microphysical block which should be parallelized first of all.
Table 4. Calculation time (seconds) of 60 min model cloud evolution obtained with the help of different number of threads (ThD = ThM = ThN)
and sequential calculations (SC). Comp1 (2 cores processor) is used. N1 is the number of bins
N1

50

70

100

150

250

SC

10.08

14.03

20.12

32.33

66.53

ThN=1

11.26

15.40

21.67

34.61

70.52

ThN=2

6.11

8.20

11.70

18.72

36.39

ThN=4

6.72

8.94

12.44

19.37

36.55

Table 4 show that calculation time in case of sequential task is nearly the same as the time of one thread
calculation. In the second case it should be of major value because an additional time is required for thread creation.
Speed-up is maximum possible and achieves the value of 1.83 in case when the number of threads is equal to the
number of cores. It should be noted that this maximum is obtained only with the maximum number of bins. So the
effectiveness of parallelizing increases with the increasing the computational work.
Table 5 Calculation time (seconds) of 60 min model cloud evolution obtained with the help of 4 thread parallelization and sequential calculations
(SC). Comp3 (4 cores processor) is used. N1 – is the number of bins
N1

50

70

100

150

250

SC

7.66

10.94

15.22

24.34

46.97

ThN=4

4.59

5.31

6.59

9.36

16.03

Speed-up

1.67x

2.06x

2.31x

2.60x

2.93x

2768

N. Raba Ampilova
et al. / Procedia
Computer
Science
1 (2012)
2763–2768
Raba, Stankova,
/ Procedia
Computer
Science
00 (2010)
000–000

The results presented in the table 5 show that for 4 cores computer maximum speed-up is also achieved in case
of maximum bin number.
Table 6 Calculation time (seconds) of 30 min model cloud evolution obtained with the help of different thread number (ThN). Comp3 (4 cores
processor) is used. N1 = 250
ThN
Calculation time
Speed-up

1

2

3

4

8

16

32

26.03

13.53

9.39

7.42

7.83

8.36

9.33

1x

1.92x

2.77x

3.51x

3.32x

3.11x

2.79x

The results presented in table 6 show that speed up increases rather steeply with the increasing the thread number
up to the moment when the number of threads becomes equal to the number of cores and afterwards it decreases
slowly because of the growth of overheads for thread creation.
5. Conclusions
Effectiveness of parallelizing with the help of multi-core processor computers was investigated. 1.5-D numerical
model of a natural convective cloud is used as an object of the procedure. Multi-thread technology is used for
realization of a parallel algorithm. Numerical investigations with the different type of processors and different
number of threads have been conducted. The results of the test experiments show that maximum speed up value is
obtained when the number of cores is equal to the number of threads. Further increase of threads resultes in gradual
speed-up value decreasing because of the growth of overheads for thread creation. Effect of parallelization increases
when input parameters of the application stipulate the implementation of maximum amount of calculation work. We
expect that practical output of the conducted investigations will result in successful usage of elaborated numerical
models for real-time forecast of dangerous atmospheric phenomena via effective application of multi-core processor
desktops.

References
1. V.V. Voevodin. Russ. J. of Num. An. and Math. Modelling, V.10, N. 3, 279-286 (1995)
2. V.V. Voevodin. W. Sci. Pub. Co., Ser. Comp. Sci. V. 33, 343 (1992)
3. A.V. Bogdanov et al. Architectures and topologies of multiprocessor computational systems, 176 (2004) (in Russian)
4. R.G. Babb. (eds) Programming Parallel Processors. Addison-Wesly Publishing Company (1988)
5. T. Asai, A. Kasahara.. J. of the Atmos. Sci., V. 24, 487-497 (1967)
6. N.O. Raba, E.N. Stankova. Proceedings of MGO, V. 559, 192-209 (2009) (in Russian)
7. E.N. Stankova, M.A. Zatevakhin. Proc. 12th Int.l Conf. on Clouds and Precipitation, Zurih, 921-923 (1996)
8. A. Khain, A. Pokrovsky, M. Pinsky.. J. Atmos. Sci., V. 61, 2963-2982 (2004)

