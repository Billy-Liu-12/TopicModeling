Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
107–115

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

On the use of discrete adjoints in goal error estimation for shallow
water equations
Florian Rausera , Jan Riehmeb , Klaus Leppkesc , Peter Korna , Uwe Naumannc
a Max-Planck-Institut f¨
ur Meteorologie
Bundesstr. 53, 20146 Hamburg, Germany
b Department of Computer Science, University of Hertfordshire
Hatﬁeld AL10 9AB, UK
c LuFG Informatik 12: Software Tools for Computational Engineering, RWTH Aachen University
52056 Aachen, Germany

Abstract
Goal oriented dual weight error estimation has been used in context of computational ﬂuid dynamics for several
years. The adaptation of this method to geophysical models is the subject of this paper. A diﬀerentiation-enabled
prototype of the NAG Fortran compiler is used to generate a discrete adjoint version of such a geophysical model and
allows to compute the required goal sensitivities. Numerical results are presented for a shallow water conﬁguration
of the Icosahedral Non-hydrostatic General Circulation Model (ICON). A special treatment of the underlying linear
solver is discussed yielding improved scalability of this approach and a signiﬁcant reduction in memory consumption
and runtime.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: goal error estimation, discrete adjoint, derivative code compiler
1. Introduction
During the past decades the needs of society, policy makers and industry have led to the increasing usage of
Earth system models (ESM) for forecasting tasks [1]. This change from predominantly analytic usage to predictive
usage has substantially increased the demands on the modeling community to supply not only physically meaningful
answers but also uncertainty estimates for these answers. ESMs incorporate a huge number of diﬀerent possible error
sources. The identiﬁcation and reduction of these error sources is one of the major challenges on the way to reliable
climate predictions / projections. One classical example for the eﬀorts to reduce model error is data assimilation for
atmospheric and oceanic models ([2, 3]). Data assimilation minimizes the distance between model trajectories and
any given set of measurements but it remains unclear how to identify and quantify diﬀerent sources of uncertainty.
The total error of numerical models can be separated into two components [4]: the “modelling error” as the
diﬀerence between model description and physical process, and the “approximation error” as the diﬀerence between
the true model solution and the computational approximation. The problem can be simpliﬁed because compared to the
underlying large number of discrete prognostic variables usually only a limited number of output variables is useful.
These outputs are called goals. We therefore need only to estimate the error of these goals and not the error of all the
prognostic ﬁelds. This a posteriori error estimation of model goals is a method well known from computational ﬂuid
dynamics (CFD) and is called goal oriented dual weight error estimation [5, 6, 7, 8]. In this paper we estimate goal
errors for a geophysical ﬂuid dynamics numerical model.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.013

108

F.F.Rauser
ComputerScience
Science001(2010)
(2012)1–9
107–115
Rauseretetal.
al.//Procedia
Procedia Computer

2

2. Goal oriented dual weight error analysis
We look at a system deﬁned by a nonlinear evolution equation for a state vector q, an initial condition q0 and a
goal J that is evaluated always at terminal time tend on a periodic domain Ω
N(q(x, t)) = 0,

q(x, t0 ) = q0 ,

J = J(q(x, tend ))

.

(1)

We deﬁne the error between the true model goal value J and a numerical approximated goal JΔ as
= J(q) − JΔ (qΔ ),

(2)

with qΔ the numerical approximation of q. The fundamental principle of this approach is to solve for a given output
goal of interest J an adjoint system that yields the sensitivities q∗ of the goal J(q) towards changes of the prognostic
variables q. These sensitivities are then integrated over the space time domain as weights for a function that indicates
the error produced by our model. Literature derivations (e.g. [5]) show that Equation (2) can be approximated as
≈ q∗Δ T Nˆ Δ (qΔ ),

(3)

with q∗Δ the discrete solution of the continuous adjoint problem to Equation (1) and Nˆ Δ (qΔ ) a residual estimator that
is a function of the approximated ﬂow state qΔ . This estimator is strongly problem dependent. Classical approaches
to construct Nˆ Δ (qΔ ) are discretization dependent.
Equation (3) is the scalar product of two components. Therefore, two steps are necessary to adapt this method to
geophysical problems: ﬁrst, we want to obtain an approximation of q∗Δ automatically. Second, we want to construct an
estimator that is cheap to compute and easy to implement for arbitrary discretizations. We focus in this contribution on
an eﬃcient way to obtain the approximation of q∗Δ with automatic diﬀerentiation tools, especially the use of discrete
adjoints.
3. The Primal Problem
As a prototype application for our error estimation method we choose the shallow water equations (SWE) on a
sphere. The SWE share signiﬁcant properties of the global atmospheric and oceanic ﬂuid system with more complex
descriptions and are able to simulate large scale ﬂows. The following equations are the vector invariant form of the
shallow water equations on the sphere
1
∂u
= (ξ + f )k × u − ∇(gh + |u|2 )
∂t
2
∂h
+ ∇ · (hu) = 0.
∂t

(4)

Here u is the horizontal velocity, ξ the vorticity, f the rotational parameter, g the gravitational constant and h the
height surface elevation. The state vector q = (h, u) consists of the prognostic ﬁelds height and velocity.
An important physical quantity in a ﬂow is the potential energy density gh2 with h the solution of Equation (4). We
are interested in the behavior of the potential energy in generic subdomains Ω0 of the computational domain Ω, the
sphere. The goal is deﬁned as regional potential energy averaged over this subdomain Ω0 at the end of a integration
time tend
1
J(q) =
gh2 (x, tend )dx
(5)
|Ω0 | Ω0
where |Ω0 | denotes the area of Ω0 .
The shallow water equations can simulate a variety of ﬂow regimes. For testing purpose we start with a simple
wave like setting. We use the unsteady solid body rotation proposed in example 3 in [9]. Atmospheric values for
velocities are used that are comparable with Williamson’s test cases [10]. The initial condition can be seen in Figure 1.
The analytical solution consists of a propagation of a global wave structure westwards, with a periodicity of 24 hours.
This periodic ﬂow ﬁeld implies also a periodic behavior of our goal J(q) from Equation (5).

109
3

F. Rauser
et al.et/ Procedia
Computer
Science
1 (2012)
107–115
F. Rauser
al. / Procedia
Computer
Science
00 (2010)
1–9

Level

Cells

Edges

1
2
3
4
5

320
1280
5120
20480
81920

480
1920
7680
30720
122880

Average
length [km]
1115.3
556.4
278.0
139.0
69.5

Figure 1: Left: Table of ICON grid properties. “Level” equals the number of reﬁnement steps. Right: Initial surface height ﬁeld [m].

The numerical framework is ICON-SW, a recently developed shallow-water model on a triangular grid with Ctype staggering on the sphere [11]. ICON-SW uses a hybrid ﬁnite volume / ﬁnite diﬀerence method with a two-level
timestepping to approximate the SWE (4). For further details see [12, 13]. ICON-SW calculates the discrete state
vector qΔ = (hΔ , uΔ ) with discrete height ﬁeld hΔ in the cell centers of the triangular grid and normal velocities uΔ at
the middle points of the triangular edges.
The horizontal grid is derived from the regular icosahedron. The projection of the regular icosahedron on the
unit sphere provides a regular grid on the sphere with 20 equilateral spherical triangles, 30 great circle edges, and
12 vertices. Its dual grid is the projection of the regular dodecahedron on the sphere. The Delaunay triangulation
then allows to reﬁne each triangle into γ2 smaller triangles by dividing each edge into γ sections. For our purposes
we use γ = 2. This procedure may be then repeated ν times, resulting in 20 × 4ν triangular cells. The lowest ICON
resolution is equivalent to 320 grid cells or two reﬁnements. To test the quality of the error estimators we mainly use
approximated forward and adjoint solutions on the lowest resolution (grid level 1, Figure 1) because for this resolution
the true error is naturally the largest. To test the resolution dependency of our error estimation method we also perform
experiments on the next two reﬁnement levels. Higher resolutions are not necessary for our smooth test case and will
become relevant when applying the method to more turbulent scenarios. It is important to note that the regularity
of the spherical triangles of the base grid is lost in the reﬁnement process, though the diﬀerences in areas between
triangles or lengths between edges remains small. This break in symmetry is obvious in the dual grid that consists of
pentagons and hexagons.
4. The Algorithm
The semi-implicit two level discretization of the shallow-water equations on the
spherical icosahedral grid is described in detail in [11]. A summary of the whole
error estimation algorithm is the following:

h0Δ

u0Δ

(1) Do for μ time steps ( j = 1, . . . , μ):
(a) Calculate new surface height hΔj by solving linear free surface equation
(implicit step)
A j−1 (hΔj−1 , uΔj−1 ) · hΔj = b j−1 (hΔj−1 , uΔj−1 )
(explicit step)
(b) Update velocity uΔj = uΔj (hΔj , uΔj−1 )
(2) Evaluate discrete goal JΔ (qΔ ) = JΔ (hμΔ ), with hμΔ = hμΔ (h0Δ , u0Δ ).
(3) Perform error estimation using discrete adjoint of JΔ .

hΔj−1

uΔj−1

The corresponding computational graph is shown in Figure 2.
5. The Adjoint Problem
As an alternative to the derivation of the adjoint system followed by its approximate numerical solution to get q∗Δ we apply the adjoint (or reverse) mode of
algorithmic diﬀerentiation (AD) [14] to the given numerical solution scheme for
the primal problem deﬁned in Equation (4). Adjoint mode AD yields the gradient

A j−1

b j−1

hΔj

uΔj

hμΔ

uμΔ

JΔ
Figure 2: Computational Graph.

110

F.F.Rauser
ComputerScience
Science001(2010)
(2012)1–9
107–115
Rauseretetal.
al.//Procedia
Procedia Computer

4

∇JΔ of the discrete goal JΔ at a typically small constant factor of the computational cost Cost(JΔ ) of a single evaluation of JΔ . Forward sensitivities computed by the tangent-linear (or forward) mode of AD or approximations thereof
based on ﬁnite diﬀerence quotients yield an often infeasible computational cost of O(n) · Cost(JΔ ).
Let N(q(x, t)) be solved by an iterative algorithm F (e.g. the semi-implicit scheme sketched in Section 4) for a
given start vector q0Δ and let qμΔ = F(q0Δ ) denote the state vector after μ time steps. Conceptionally, adjoint mode AD
runs the primal code
qμΔ = F(q0Δ )
JΔ (qΔ ) = JΔ (qμΔ )
in order to memorize intermediate quantities required for the evaluation of products of the transposed Jacobian ∇F T =
∇F(q0Δ )T with a vector in IRn followed by the adjoint code
q¯ μΔ = ∇JΔ (qμΔ )T · J¯Δ
q¯ 0Δ = ∇F(q0Δ )T · q¯ μΔ

.

Initializing J¯Δ = 1 yields the required gradient q¯ 0Δ = ∇JΔ (q0Δ ). The general relationship between the discrete adjoints q¯ 0Δ and the discrete solution q∗Δ of the continuous adjoint problem for Equation (1) is the subject of ongoing
investigations.
We are in the process of developing a prototype of the NAG Fortran compiler to enable the mostly automatic
semantical transformation of numerical input code into adjoint code [15]. The derivative code compiler has been
applied successfully to ICON-SW in order to provide the required discrete adjoints. For a given implementation (in
Fortran) of
F : IRn → IRn , qμΔ = F(q0Δ ),
the compiler produces code for the evaluation of q¯ 0Δ = ∇F(q0Δ )T · q¯ μΔ .

While a detailed discussion of adjoint code generation is beyond the scope of this paper we still need to take a
closer look at some of the underlying principles. The given implementation of F is assumed to decompose into a
single assignment code (SAC) at every point of interest as follows:
for j = n + 1, . . . , n + p + m
v j = ϕ j (vi )i≺ j ,

(6)

where i ≺ j denotes a direct dependence of v j on vi . The result of each elemental function ϕ j is assigned to a
unique auxiliary variable v j . The n independent inputs xi = vi , for i = 1, . . . , n, are mapped onto m dependent
outputs y j = vn+p+ j , for j = 1, . . . , m, and involve the computation of the values of p intermediate variables vk , for
k = n + 1, . . . , n + p.
For given adjoints of the dependent and independent variables, reverse mode AD propagates adjoints backward
through the SAC as follows.
for j =n + p + m, . . . , n + 1 and i ≺ j
∂ϕ j
v¯ i = v¯ i + v¯ j ·
(vi )i≺ j .
∂vi
The variables v¯ j are assumed to be initialized to y¯ j for j = n + p + 1, . . . , n + p + m
and to zero for j = 1, . . . , n + p. A forward evaluation of the SAC is performed to compute
all intermediate variables whose values are required for the adjoint propagation in reverse
order. The elemental functions in the SAC are processed in reverse order in the second
part of Equation (7). See Figure 3 for the simple example y = F(x1 , x2 ) = cos(x1 ∗ x2 )
with v1 = x1 , v2 = x2 , and y = v4 . The two entries of the gradient are computed by setting
v¯ 4 = 1. The correctness of this approach follows immediately from the associativity of the
chain rule of diﬀerential calculus.

(7)

v3
v4
v¯ 3
v¯ 2
v¯ 1

= v1 · v2
= cos (v3 )
= − sin (v3 ) · v¯ 4
= v1 · v¯ 3
= v2 · v¯ 3

Figure 3: Adjoint code.

F. Rauser
et al.et/ Procedia
Computer
Science
1 (2012)
107–115
F. Rauser
al. / Procedia
Computer
Science
00 (2010)
1–9

i
1
2
3
4

Tape (forward evaluation)
opc a1 a2
val
IDP
0
0
v1 = x%val
IDP
0
0
v2 = y%val
MUL
1
2
v3 = v1 ∗ v2
COS
3
0
v4 = cos(v3 )

Variables (forward)
x
y
{v1 , 1}
{v2 , 0}
{v1 , 1}
{v2 , 2}
{v1 , 1}
{v2 , 2}
{v1 , 1}
{v4 , 4}

111
5

Tape (reverse)
adj
− sin(v3 ) ∗ v2
− sin(v3 ) ∗ v1
− sin(v3 )
1

Table 1: Tape generated for code in Figures 4 and 5.

5.1. The Diﬀerentiation-Enabled NAG Fortran Compiler
The diﬀerentiation-enabled NAG Fortran compiler (from now on referred to as “the compiler”) combines a two
stage semantical transformation with a set of runtime support libraries in a hybrid approach to AD that blends source
transformation capabilities and overloading techniques. The robustness of the runtime solution based on overloading
is supported by potential performance gains to be expected from a source code transformation algorithm.
Every support library (compad module) deﬁnes an active datatype (compad type) with corresponding overloaded
arithmetic operators and intrinsic functions (for example, forward and reverse mode AD, second order derivatives by
forward over reverse). After selecting a speciﬁc compad module, the ﬁrst stage of AD-related semantical transformation changes the datatype of all ﬂoating-point variables into compad type. Any operation with arguments of
compad type are resolved by the compiler to operators from the selected compad module. In the optional second
stage of semantical transformation the compiler modiﬁes the internal representation by inserting code that works directly on the components of compad type. Thereby the overhead of calling overloaded operators and intrinsics from
the compad module can be avoided.
Without loss of generality, we present the discrete adjoint in the light of overloading rather than pure source transformation. Our current research prototype compiler cannot handle the full ICON-SW code in source transformation
mode. Nevertheless we are able to achieve very good runtime results that are shown in Section 6.
Discrete adjoints for ICON-SW are obtained using a support library
SUBROUTINE F( x, y )
! 1
that records every arithmetic operation on a tape during the augmented
DOUBLE PRECISION :: x, y ! 2
forward evaluation of F. Adjoints are propagated during a subsequent
y = cos( x * y )
! 3
interpretative reverse evaluation of the tape.
END SUBROUTINE
Each tape entry represent one unique auxiliary variable v j in EquaFigure 4: Source for SAC in Figure 3.
tion (6). A tape entry (see 2-5 columns in Table 1) contains an operation
code (opc), tape index(es) of the argument(s), the value of the corresponding auxiliary variable v j , and its adjoints
(see last column in Table 1, initially set to 0). The data type compad type consists of the value and the index of the
corresponding auxiliary variable / tape entry (see 6–7 columns in Table 1).
We apply the compiler to the simple Fortran source code in Figure 4,
PROGRAM TEST_TAPE
that corresponds to the SAC in Figure 3, for illustration. Figure 5 shows
USE compad_module
! 1
the hand-written driver program required to compute sensitivities by the
TYPE(COMPAD_TYPE) :: x, y
! 2
tape based discrete adjoint code generated by the compiler.
DOUBLE PRECISION
:: grad(2) ! 3
INTEGER(TAPE_IKND) :: idy
! 4
The driver (Figure 5) includes compad module (line 1), and declares
x = 1.3D0; y = 0.4D0
! 5
independent and dependent variables as compad type (line 2). MemCALL TAPE_INIT( 100 )
! 6
ory for storing the sensitivities is allocated in line 3. After initializing
CALL TAPE_TURN_ON
! 7
the tape environment (line 6) the beginning of the computation to be
CALL INDEPENDENT( x )
! 8
CALL INDEPENDENT( y, idy )
! 9
recorded on the tape is marked (line 7). Both independent variables are
CALL F( x, y )
!10
recorded (lines 8–9). The tape indexes are stored in the corresponding
CALL TAPE_TURN_OFF
!11
compad type data structures (see rows 1 – 2 in Table 1). All adjoint
CALL SEED( y, 1.D0 )
!12
values are initialized to 0. The tape index of y as an independent input
CALL TAPE_INTERPRETER
!13
grad(1) = DERIV(x)
!14
needs to be stored explicitly (see declaration and use of idy in lines 4
grad(2) = DERIV_INDEX(idy)
!15
and 9, respectively) as y is overwritten by calling the adjoined version of
END PROGRAM TEST_TAPE
F (line 3, Figure 4). The value of idy is used to access the correct tape
Figure 5: Driver program for code in Figure 4.
entry when retrieving the corresponding gradient entry in line 15.
The augmented forward evaluation of the code in Figure 4 is performed in line 10 of the driver. Two new tape
entries (v3 = x ∗ y, v4 = cos(v3 )) (see rows 3 and 4 in Table 1) are created. The overloaded assignment of the result

112

F.F.Rauser
ComputerScience
Science001(2010)
(2012)1–9
107–115
Rauseretetal.
al.//Procedia
Procedia Computer

6

(v4 ) to y stores the tape index 4 in the compad type data structure associated with y (row 4, column 7 in Table 1).
The end of the augmented forward evaluation is marked in line 11 of the driver.
Following the initialization of the adjoint of the dependent variable y in line 13 (commonly referred to as seeding;
see also row 4, last column in Table 1), the reverse evaluation (interpretation of the tape) is started in line 14. Three
steps are performed yielding the third, second, and ﬁrst entries in the last row of Table 1. Finally, the gradient is
harvested from the accumulated adjoints of the independent variables (lines 15 and 16) utilizing the tape index idy
stored for the overwritten instance of y.
5.2. The Adjoint Linear Solver
Figure 6 shows the adjoint computational graph computing h¯ 0Δ and u¯ 0Δ for given
u0Δ , h0Δ , J¯Δ and u¯ μΔ based on information stored during the augmented forward evaluation of JΔ (hμΔ (h0Δ , u0Δ )) (in our case, the tape).
The semi implicit method involves the solution of the linear system A j−1 · hΔj =
j−1
b for j = 1, . . . , μ. Both the adjoints A¯ j−1 of A j−1 and b¯ j−1 of b j−1 are functions of
the adjoint h¯ Δj of hΔj . A black-box diﬀerentiation by the compiler would record all
operations performed by the linear solver on the tape followed by an interpretative
reverse propagation as outlined in Section 5.1.

h¯ 0Δ

u¯ 0Δ

u¯ Δj−1

u¯ Δj−1

A¯ j−1 b¯ j−1

Alternatively, the following algebraic manipulations of the linear equation
(8)

h¯ Δj

u¯ Δj

yield the adjoints A¯ j−1 (h¯ Δj ) and b¯ j−1 (h¯ Δj ) at a signiﬁcantly lower computational cost.
Partial diﬀerentiation of Equation (8) with respect to A j−1 yields

h¯ μΔ

u¯ μΔ

A j−1 · hΔj = b j−1

A j−1 ·

∂hΔj
∂hΔj
∂A j−1 j
∂b j−1
j
j−1
+
·
h
=
A
·
+
h
=
=0
Δ
∂A j−1 ∂A j−1 Δ
∂A j−1
∂A j−1

J¯Δ

and hence

∂hΔj
= −hΔj
∂A j−1
The corresponding discrete adjoint becomes

Figure 6: Adjoint Computational
Graph.

A j−1 ·

(h¯ Δj )T ·

∂hΔj
= − (h¯ Δj )T · (A j−1 )−1 · hΔj
∂A j−1

.

Similarly, partial diﬀerentiation of Equation (8) with respect to b j−1 leads to
A j−1 ·

∂hΔj
∂b j−1
=
j−1
∂b
∂b j−1

and hence

(h¯ Δj )T ·

∂hΔj
= (h¯ Δj )T · (A j−1 )−1
∂b j−1

.

The solution hΔj of the linear system in Equation (8) is computed passively during the augmented forward execution
by a direct solver. The resulting LU or QR decomposition of A j−1 is reused during the reverse execution yielding
a computational cost of O(n2 ) for the adjoint as opposed to O(n3 ) if taking the black-box approach. With α :=
(h¯ Δj )T ·(A j−1 )−1 we get A¯ j−1 (k1 , k2 ) = −α(k1 )·hΔj (k2 ) for each (nonzero) entry A(k1 , k2 ) of A. Similarly, b¯ j−1 (k1 ) = α(k1 ).
A graphical illustration is shown in Figure 7.
6. Results
We have shown in the previous sections how to eﬃciently obtain an approximation to the goal sensitivities needed
for Equation (3). To estimate the error of the goal deﬁned in Equation (5) we introduce now simple empirical residual
error estimators into Equation (3). They depend only on ﬂow ﬁeld information and not on explicit information about
the used discretization. The information about the model discretization comes into play via the solution of the adjoint

113
7

F. Rauser
et al.et/ Procedia
Computer
Science
1 (2012)
107–115
F. Rauser
al. / Procedia
Computer
Science
00 (2010)
1–9

1
j−

/∂

q¯ Δj−1 ∂
b

1
j−
qΔ

/∂

∂A

/∂

∂A

q

Δ

b¯ j−1
j

”

b¯ j−1

α

j−
1

j

j−

1

j

A

/∂
b

/∂

Δ

Δ

Δ

”−
h

∂h

A¯ j−1 ∂
h

j−
1

j−
1

Δ

1

/∂

A¯ j−1

−1

q

(A j−1 )−1

1
j−

q¯ Δj−1 ∂
bj

1
j−
qΔ

j−
1

h¯ Δj

h¯ Δj

(a)

(b)

Figure 7: Adjoint Linear Solver: All arithmetic operations performed by the linear solver are recorded on the tape during the augmented forward
evaluation to be used by the subsequent reverse propagation of the adjoints in (a). Dashed lines in (b) mark the tapeless computation of the adjoints
A¯ j−1 and b¯ j−1 based on a passively derived decomposition of A j−1 .

model. We perform diﬀerent robustness tests with respect to region and functional with a ﬁxed integration time of 6h.
To avoid a possible inﬂuence of the topography we choose a set of grid cells that are part of a zonal band parallel to
the equator.
In the left panel of Figure 8 it can be seen that our residual estimator works suﬃciently well to estimate the goal
errors for the lowest resolution of our model. The estimate is higher than 50% of the true error for most regions. This
quality of the error estimates allows us to use them as an error correction term to the original goal approximation,
following again [5]. The right panel of Figure 8 highlights that corrected low resolution goals can be of similar quality
as goals derived from higher resolution runs. For the lowest resolution we correct at least half of the error, for higher
resolution we approach 100%. The method is also extremely robust versus modiﬁcations of the goal functional as can
be seen in Figure 9. The left plot shows that the numerical values of the output goal vary from order 106 to 1024 for
diﬀerent powers of the potential energy density. At the same time, the error estimates scale well: the ratio between
estimated error and true error stays close to one as can be seen in the right plot of Figure 9. These results show that
Robustness in space

Error correction for different resolutions

10

8

6

4

2

Error in potential energy [10x6]

Error in potential energy [10x6]

8
True Error
Estimated Error

Uncorrected
Corrected
No error
6

4

2

0

-2
0

2

4

6

Different Regions

8

10

1

2

3

Number of ICON grid refinements

Figure 8: Left: On the x-axis diﬀerent regions are plotted, sorted by the longitude of their cell center. On the y-axis the error in regional potential
energy is plotted. The thick dotted line represents the true error. The thick solid line represents the estimated error. All estimates that lie between the
two thin dotted lines represent an improvement of the goal estimate by at least 50 percent. Right: On the x-axis the number of ICON grid reﬁnements
is plotted (higher number = higher resolution). On the y-axis the errors in regional potential energy are plotted. The best approximation of the truth
is the dashed line (no error). The solid lines show calculated goals. The dotted lines show corrected goals.

114

F.F.Rauser
ComputerScience
Science001(2010)
(2012)1–9
107–115
Rauseretetal.
al.//Procedia
Procedia Computer

Error evolution for different goals

Robustness in goal formulation
1.3

Various regions
Truth

1.2
1e+20
Error ratio

Error in potential energy

1e+25

1e+15

8

1e+10

1.1
1
0.9
0.8

Various regions

100000
2

3

4

5

0.7
6

2

Power of height field

3

4

5

6

Power of height field

Figure 9: Left: On the x-axis diﬀerent powers of the goal ﬁeld are plotted. On the log-scale y-axis the error in regional potential energy is plotted
for three random regions. Right: On the x-axis diﬀerent powers of the goal ﬁeld are plotted. On the y-axis the ratio between the estimated error
and the true error is plotted for the same three regions. The dashed line indicates a perfect match between estimate and true error.

our empirical error estimator is working. A detailed discussion of the empirical error estimators is beyond the scope
of this contribution (see [16] for details).
For the special treatment of the linear solver outlined in Section 5.2 we replaced the originally used custom iterative sparse solver by the direct sparse linear solver UMFPACK Version 5.4 [17] running without taping as the
factorization of A j−1 is reused in the adjoint propagation. Preliminary tests on grid level 5 (with n = 122.800 independent variables) have shown impressive improvements of the adjoint computation for the linear solver both in terms of
memory requirement and runtime.
Time for solving linear system (in sec.)
Memory for tape and factorization (in GB)
Time for computing A¯ j−1 (h¯ Δj ) and b¯ j−1 (h¯ Δj ) (in sec.)

Black-Box
2.4
1.2
2.08

Adjoint Direct Solver
1.1
0.077
0.01

We observe a local speedup of 4 in runtime and savings in memory of 94% for adjoining the linear problem, and
for the overall process a 50% memory reduction and 27% reduced runtime. The ratio of the runtime of the discrete
adjoint to compute h¯ 0Δ and u¯ 0Δ with respect to the runtime of a single evaluation of JΔ is roughly 10 – a very good value
for a solution that is based purely on overloading and tape interpretation rather than source transformation. We are
working on a further reduction of this factor by generating parts of the discrete adjoint through source transformation
and by exploiting parallelism during the augmented forward evaluation.
Acknowledgments
Florian Rauser was funded by the International Max Planck Research School on Earth System Modelling. Jan
Riehme is supported by EPSRC under grant nr. EP/F069383. We thank the DKRZ (www.dkrz.de) for computing time
and technical support.
References
[1] G. Meehl, T. Stocker, W. Collins, P. Friedlingstein, A. Gaye, J. Gregory, A. Kitoh, R. Knutti, J. Murphy, A. Noda, S. Raper, I. Watterson,
A. Weaver, Z.-C. Zhao, Global Climate Projections in Climate Change 2007: The Physical Science Basis. Contribution of Working Group I
to the Fourth Assessment Report of the Intergovernmental Panel on Climate Change, Cambridge University Press, Cambridge, UK, 2007.
[2] C. Wunsch, P. Heimbach, R. Ponte, I. Fukumori, The global general circulation of the ocean estimated by the ecco-consortium., Oceanography
22 (2009) 88 – 103.
[3] E. Kalnay, Atmospheric modeling, data assimilation, and predictability, Cambridge University Press, 2003.
[4] J. T. Oden, S. Prudhomme, Estimation of modeling error in computational mechanics, Journal of Computational Physics 182 (2002) 496–515.

F. Rauser
et al.et/ Procedia
Computer
Science
1 (2012)
107–115
F. Rauser
al. / Procedia
Computer
Science
00 (2010)
1–9

115
9

[5] M. B. Giles, N. Pierce, E.Sueli, Progress in adjoint error correction for integral functionals, Computing and Visualization in Science 6 (2004)
113–121.
[6] R. Becker, R. Rannacher, An optimal control approach to a posteriori error estimation in ﬁnite element methods, Acta Numerica 10 (2002)
1–102.
[7] I. Babuska, W. Rheinboldt, A-posteriori error estimates for the ﬁnite element method, International Journal for Numerical Methods in Engineering 12 (10) (1978) 1597 – 1615.
[8] C. Johnson, R. Rannacher, M. Boman, Numerics and hydrodynamic stability: Toward error control in computational ﬂuid dynamics, SIAM
Journal on Numerical Analysis 32 (4) (1995) 1058–1079.
[9] K. D. M. Laeuter, D. Handorf, Unsteady analytical solutions of the spherical shallow water equations, Journal of Computational Physics 210
(2005) 535–553.
[10] D. Williamson, J. Hack, R. Jakob, P. Swarztrauber, J. Drake, A standard test set for numerical approximations to the shallow water equations
in spherical geometry, Tech. rep., Oak Ridge National Lab., TN (United States) (1991).
[11] L. Bonaventura, T. Ringler, Analysis of discrete shallow-water models on geodesic Delaunay grids with C-type staggering, Monthly Weather
Reviews 133 (2005) 2351–2373.
[12] M. Giorgetta, T. Hundertmark, P. Korn, S. Reich, M. Restelli, Conservative space and time regularizations for the icon model, Berichte zur
Erdsystemforschung 67.
[13] P. Ripodas, A. Gassmann, J. Foerstner, D. Majewski, M. Giorgetta, P. Korn, L. Kornblueh, H. Wan, G. Zaengl, L. Bonaventura, T. Heinze,
Icosahedral shallow water model (icoswm): Results of shallow water test cases and sensitivity to model parameters, Geoscientiﬁc Model
Development Discussions.
[14] A. Griewank, A. Walther, Evaluating Derivatives. Principles and Techniques of Algorithmic Diﬀerentiation (Second Edition), SIAM, 2009.
[15] U. Naumann, J. Riehme, A diﬀerentiation-enabled Fortran 95 compiler, ACM Transactions on Mathematical Software 31 (4) (2005) 458–474.
[16] F. Rauser, P. Korn, J. Marotzke, Error estimation for time-dependent goals with empirical error indicators, To be submitted.
[17] T. A. Davis, Algorithm 832: UMFPACK V4.3 – An unsymmetric-pattern multifrontal method, ACM Transactions on Mathematical Software
30 (2) (2004) 196–199.

