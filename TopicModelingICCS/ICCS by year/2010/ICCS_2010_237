Procedia Computer
Science

,
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–9
2753–2761

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Computational Biomedicine: The Role of Workﬂow Tools
S. J. Zasadaa,b , P. V. Coveneya,b,∗
a Centre

for Computational Science, Chemistry Department, University College of London, 20 Gordon Street, London WC1H 0AJ, United Kingdom
b Department of Computer Science, University College London, Malet Place, London WC1E 6BT, United Kingdom

Abstract
Distributed and high performance computing are increasingly ﬁnding a role in medical research and ultimately
simulation using high performance and distributed computing is likely to be used to support routine clinical decision
making. To be useable by life and medical scientists, and eventually by clinicians, suitable tools must be constructed
which hide much of the complexity of the simulation chain, from data acquisition to simulation to analysis. Many
such tools, which automate a workﬂow of simulation steps, have been extensively developed in recent years. In this
paper we analyse the needs of computational biomedicine projects to uncover the key, generic requirements they have
from a workﬂow system. We also look at several of the most popular workﬂow systems to see whether they meet the
general requirements. We conclude by describing the workﬂow and simulation environment that we have deployed
for use of Virtual Physiological Human Initiative researchers, as part of the VPH Toolkit.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords:
Medical Computing, VPH, Workﬂow, Distributed Computing

1. Introduction
Distributed and high performance computing are increasingly ﬁnding a role in medical research; ultimately they
are likely to be used to support routine clinical decision making [19]. Indeed the Virtual Physical Human Initiative [1],
explicitly seeks to bring modelling and simulation in to clinical practice. Many of these simulations are intrinsically
computationally intensive and the VPH Initiative is currently the recipient of an annual award of 2 million CPU hours
on the DEISA high performance compute infrastructure [2].
A common feature of computational biomedical simulation scenarios is the need to perform many tasks to achieve
a desired result. Typically a scenario will involve data acquisition, preprocessing using low end computational resources such as workstations, simulation using high performance computational resources, and post processing using
high- or low-end resources. Such steps can present stumbling blocks for even experienced computational scientists; if
these techniques are to by taken up by clinical researchers, and ultimately clinicians, then they need to be automated
and accessed through an interface that presents a suitable level of abstraction.
Developments in e-Science have seen the emergence of workﬂow toolkits, designed to connect together discrete
processing steps using distributed resources, and provide a trivial interface from which to create and launch the
∗ Corresponding

author: p.v.coveney@ucl.ac.uk

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.309

2754

S.J.
Zasada,
Coveney
/ Procedia
Science00
1 (2012)
2753–2761
S.J.
Zasada P.V.
& P.V.
Coveney
/ ProcediaComputer
Computer Science
(2010) 1–9

2

workﬂow. Workﬂows are essential to the VPH-I eﬀort, as they are to many other medical computing scenarios outside
the scope of the VPH; a major goal of VPH research is to integrate simulations at diﬀerent levels, which is essentially
a workﬂow scenario.
Much research has been carried out into the design and implementation [3] of workﬂow management systems designed to automate common time consuming tasks that the scientist carries out when performing in silico experiments.
These can range from the mundane (such as transferring a job’s input ﬁles to a grid resource and then executing a job),
to the more complicated (such as executing a series of interdependent tasks represented by a directed acyclic graph).
User interaction with workﬂow management systems ranges from command line clients using textual descriptions
of the workﬂow to graphical web portals [4] to rich desktop clients, or Problem Solving Environments (PSEs). The
advantage of the latter examples is that they allow workﬂows to be composed visually, using drag and drop interfaces.
In this paper we look at three medical computing scenarios, one of which is funded by the VPH Initiative. We will
examine their workﬂow requirements, and then go on to assess the suitability of several of the most popular workﬂow
environments to have emerged over the last few years. Finally we will describe the workﬂow and computational
environment that we have deployed to support all three medical computing scenarios, and show how the components
chosen best meet the needs to those projects.
2. Case Studies
In order to develop a detailed picture of the requirements a workﬂow system must satisfy if it is to form the
basic ‘glue’ to support generic medical computing scenarios, it is useful to consider exemplar use cases. Here we
consider three diﬀerent use cases: a distributed application designed to calculate the eﬃcacy of a range of drugs for the
treatment of HIV, a distributed bloodﬂow simulation tool developed to assist in the surgical planning of neurosurgical
procedures, and ﬁnally a cancer/drug modelling scenario.
2.1. Calculating Drug Binding Aﬃnities
A major problem in the treatment of AIDS is the development of drug resistance by the human immuno-deﬁciency
virus (HIV). HIV-1 protease is the enzyme which is crucial to the role of the maturation of the virus, and is therefore
an attractive target for HIV/AIDS therapy. Although several eﬀective treatment regimes have been devised which
involve inhibitors that target several viral proteins [5], the emergence of drug resistant mutations in these proteins
is a contributing factor to the eventual failure of treatment. Doctors have limited ways of matching a drug to the
unique proﬁle of the HIV virus as it mutates in each patient. A drug treatment regimen is prescribed using several
knowledge-based clinical decision support applications, which attempts to determine optimal inhibitors using existing
clinical records of treatment response to various mutational strains. The patient’s immune response is used as a gauge
of the drug’s eﬀectiveness and is periodically monitored so that ineﬀective treatment can be minimised through an
appropriate change in the regimen. Where these diﬀernet applications disagree in their advice, simulation is required
to augment the decision making process.
At the molecular level it is the biochemical binding aﬃnity (free energy) with which an inhibitor binds to a protein
target that determines its eﬃcacy. Experimental methods for determining biomolecular binding aﬃnities are well
established and have been implemented to study the in-vitro resistance conferred by particular mutations. These in
turn add invaluable information to any decision support system, but are limited as studies are performed usually on
key characteristic mutations and not with respect to the unique viral sequence of a patient. An exhaustive experimental
determination of drug binding aﬃnities in a patient-speciﬁc approach is far too costly and time-consuming to perform
in any clinically relevant way.
Computational methods also exist for determining biomolecular binding aﬃnities. In a recent study [6], the eﬀectiveness of the drug saquinavir was tested against the wildtype HIV-1 protease, along with three drug-resistant strains
using free energy methods in molecular dynamics (MD) simulations. The protocol implemented by the study gave accurate correlations to similar experimentally determined binding aﬃnities. Furthermore, the study made use of a tool,
the Binding Aﬃnity Calculator (BAC) [7], for the rapid and automated construction, deployment, implementation and
post processing stages of the molecular simulations across multiple supercomputing grid-based resources.
BAC automates binding aﬃnity calculations for all nine drugs currently available to inhibit HIV-1 protease and
for an arbitrary number of mutations away from a given wildtype sequence. Although the applicability of the method

S.J. Zasada,
P.V. Coveney
/ Procedia
Computer
Science
1 (2012)
2753–2761
S.J. Zasada
& P.V. Coveney
/ Procedia
Computer
Science
00 (2010)
1–9

2755
3

in the saquinavir-based study still needs to be established for all other inhibitors, the scope of BAC is enormous as it
oﬀers an automated in-silico method for assessing the drug resistance for any given viral strain.
The BAC constitutes a complex grid workﬂow that depends on a range of computational resources at diﬀerent
scales and a number of computational codes. For a particular drug/mutation combination, BAC initially runs a set of
job setup scripts on a local cluster to create the necessary input ﬁles for set of simulations by taking a default model
and customising with the mutations and drugs under consideration. Next this model data is staged to a petascale
supercomputer class resource typically on the US TeraGrid [8], and the NAMD molecular dynamics code [9] is used
to run a number of equilibration steps to prepare the model, followed by a number of nano seconds of simulation,
which in reality take several hours of wall-clock time using between 32 and 64 processors per simulation. To increase
the sampling eﬀectiveness, often several such simulations are run in parallel. The grid resource used is typically
chosen by the researcher based on precursory glance at the queue lengths on several large TeraGrid resources where
the NAMD application is deployed, Once the simulation chain is complete, the output data (measured in terabytes) is
staged to a smaller scale grid cluster for post processing, using the Amber molecular dynamics package to calculate
a drug binding aﬃnity. Typically this workﬂow needs to be run in its entirety nine times (once for each of the nine
FDA approved HIV-1 protease inhibitors) in order to generate a ranking of the drugs for an individual patients set of
mutations. To make it readily usable, this workﬂow must be automated as much as possible, freeing the clinical user
from dealing with any of the aspects of using a grid resource.
2.2. Computational Investigations of Cranial Haemodynamics
Cardiovascular disease is the cause of a large number of deaths in the developed world [10]. Cerebral blood ﬂow
behaviour plays a crucial role in the understanding, diagnosis and treatment of the disease; problems are often due
to anomalous blood ﬂow behaviour in the neighbourhood of bifurcations and aneurysms within the brain, leading to
strokes for example, although the details are not well understood. Experimental studies are often impractical owing
to the diﬃculty of measuring behaviour in humans; however, computer tomography (CT) and three-dimensional
rotational angiography (3DRA) enable static and dynamical data acquisition [12].
Notwithstanding these advances in measurement methods, modelling and simulation have a crucial role to play in
hemodynamics. There are evident limitations to the experimental methods which can be complemented by simulation.
The GENIUS project [13] is concerned with performing entire brain neurovasculature blood ﬂow simulations in
support of clinical neurosurgery. Simulation oﬀers the clinician the possibility of performing non-invasive, patient
speciﬁc, virtual experiments to plan and study the eﬀects of certain courses of surgical treatment with no danger to
the patient, including support for diagnosis, therapy and planning of vascular treatment [14]. Simulation techniques
also oﬀer the prospect of modelling the poorly understood ﬂow patterns in the normal brain and in neurovascular
pathologies such as aneurysms and arterio-venous malformations (AVMs).
Simulation input data is provided by CT 3DRA scans, from which a patient speciﬁc models of the vascular
structure of the brain is built. Conventional continuum solvers, based on ﬁnite diﬀerence, ﬁnite volume and ﬁnite
element codes, are beset with problems in three spatial dimensions due to the computational costs of mesh generation,
the need to solve the auxiliary Poisson equation for the pressure ﬁeld, and various approximations associated with the
calculation of the shear stress from the ﬂow velocity ﬁeld [15]. For large systems, such as those the GENIUS project
is concerned with in addressing cerebral blood ﬂow, it is essential to develop and utilize scalable, high performance
parallel codes, which further complicates the use of continuum models. To overcome these limitations the project
uses a highly optimised ﬂow model based on the lattice-Boltzmann (LB) method, called HemeLB [16]. The HemeLB
application is the basis of an eﬃcient brain blood ﬂow simulator that can act in an advisory capacity to the surgeon
before (and eventually also during) surgery. HemeLB is ideally suited to studying ﬂow in sparse complex geometries
such as the neurovasculature.
The sequence of operations that constitute the GENIUS workﬂow is shown in ﬁgure 1. Firstly, an MRI or CT brain
scan takes place in a hospital, the scan is used to create a computational model, which is uploaded to a data repository.
A clinical technician then uses the GENIUS toolkit to pull the model from the repository and use it to initiate a
bloodﬂow simulation using a pre-reserved supercomputer class resource. Finally, a clinician uses the GENIUS toolkit
interface to visualise and steer the simulation in preparation for a clinical procedure which is about to be conducted,
altering parameters in the simulation as it is run, and visualising the results.

2756

S.J.
Zasada,
Coveney
/ Procedia
Science00
1 (2012)
2753–2761
S.J.
Zasada P.V.
& P.V.
Coveney
/ ProcediaComputer
Computer Science
(2010) 1–9

4

MRI, CT X-ray data
aquisition
Planning experiments,
Advanced reservations
and job scheduling

Definition
of new boundaries
Creation of 3D
model, specification
of boundaries,
pressures and velocities

Interactive
visualisation

Figure 1: The GENIUS simulation workﬂow. Computational steering, coupled with interactive visualisation, allows parameters to be altered in a
running simulation.

2.3. Computational Simulation of Cancer
The ContraCancrum [17] VPH project seeks to develop a multilevel platform to simulate malignant tumor development, and the response of tumor and normal tissue to diﬀerent treatment regimes. The project aims to aid
understanding of the phenomena of cancer, and optimize the treatment of the disease. ContraCancrum deploys two
im- portant clinical studies for validating the models, one on lung cancer and one on gliomas.
The ContraCancrum ‘virtual laboratory’ consists of a number of diﬀerent simulation techniques that can be usefully employed by the clinical oncologist. All of these simulation paradigms have one thing in common: they are all
driven by the use of clinical data sets supplied by the clinical partners in the project. These simulation components
must automatically be connected together and access data sets from the ContraCancrum data environment. The logical
way to do this is through a workﬂow tool, that allows multiple computational components to the linked together and
then accessed as if they were a single application.
The ContraCancrum project plans to develop three exemplar workﬂows upon which future work will be built. The
ﬁrst workﬂow simply downloads a set of images for a given patient reference ID and then uploads them to a mesh
generation web service deployed in the technical environment. The resulting data is downloaded by the workﬂow for
further processing. The second exemplar workﬂow is used to run statistical analysis on clinical datasets, retrieving
data from the ContraCancrum data environment and using the R package to run analysis to ﬁnd covariant variables.
The third workﬂow implements the a series of molecular dynamics simulations (similar to those described in
section 2.1) to rank cancer drug eﬃcacy. This workﬂow consists of three distinct stages. The ﬁrst is a preparation
stage which generates a patient speciﬁc model for simulation, using a departmental cluster at University College
London (UCL). The second simulation stage is performed using the NAMD molecular dynamics code on a distributed
computational resource, typically the Ranger machine on the TeraGrid, using 32-64 processors per simulation. The
ﬁnal analysis stage is again performed on departmental cluster at UCL. For a single patient study this whole process
needs to be repeated for each drug being simulations. Additionally, each run of the workﬂow may involve multiple
concurrent simulation steps to improve sampling eﬃciency. The eventual adoption of this workﬂow in clinical practice

S.J. Zasada,
P.V. Coveney
/ Procedia
Computer
Science
1 (2012)
2753–2761
S.J. Zasada
& P.V. Coveney
/ Procedia
Computer
Science
00 (2010)
1–9

2757
5

is hampered by the fact that routing genotyping from which to derive the molecular model is not performed for cancer
patients.
All of these component workﬂows are designed to be integrated into a larger, ﬁnal, integrated scenario involving
many other research components of the ContraCancrum project.
2.4. Distilling the Requirements
The projects considered above all have broad requirements from a workﬂow system. All of the projects feature
multiple users of their infrastructure, operating at diﬀerent levels (clinicians, normal users and expert users for example). Each of these groups of users has diﬀerent requirements form the workﬂow system: expert users may want
to develop workﬂows programatically, whereas clinicians look for a simple interface that allows them to launch the
workﬂow and view the results, without having to concern themselves with the underlying details of how the workﬂow
operated. In addition, groups of users need to be able to access and customise the same workﬂow, either by changing the operations performed, or simply by plugging in their own parameters to launch the workﬂow. Broadly, the
requirements are thus:
1. the workﬂow system should allow expert users to construct workﬂows programatically; a drag and drop workﬂow interface is not suﬃciently powerful.
2. the workﬂow system should be easy to extend, so that new components can integrated in to workﬂows with the
minimum of eﬀort.
3. the workﬂow system should support multiple interfaces, to allow end users to execute workﬂows as high level
applications, without having to delve in to the programmatic interface.
4. the workﬂow system should provide a repository facility, to allow workﬂows to be shared between users.
5. the workﬂow system should be able to execute applications on batch computing systems.
6. the workﬂow system should support a high level of security.
The requirements of the projects considered above are paradigmatic, and are found across many VPH style medical
computing scenarios. It follows therefore that a system the satisﬁes these requirements will likely be of use generically,
in many VPH style projects. It is worth noting that in addition to the workﬂow requirements previously discussed,
these projects have place a number of other requirements on the computational infrastructures that sustain them,
beyond the traditional batch model [18]. Simulations, used to support clinical procedures, often require large numbers
of processor cores, and have to be run when required by the clinician. Surgical procedures cannot be postponed until
a simulation reaches the top of a batch queue; emergency medical simulations must either pre-empt all other jobs
running on a machine, or be able to be scheduled into the clinical workﬂow.
Clinical users are not concerned with where simulations are running, nor the details of reservations; thus features
such as advanced reservations and emergency computing capabilities, managed application launching and data marshalling are all done behind the scenes. These requirements lead to a demand on resource providers to implement
policies and tools that allow computational access to be gained as and when required, so that such methodologies
can be incorporated into a clinician’s day to day clinical activities, or a researcher’s normal activities, rather than just
providing such facilities on an ad hoc basis [18].
3. Scientiﬁc Workﬂow Tools
Many workﬂow environments have emerged over the last few years, and reached a level of maturity and uptake
that means they are now key components of the computational scientist’s toolkit. There follows a brief summary of
the key features of a selection of workﬂow management systems, followed by a discussion of which best meets the
requirements discussed in section 2.4.
3.1. GridWorm
GridWorm [22] is a workﬂow orchestration system that is part of the UGanDA project. It is targeted at enterprise
level workﬂows, rather than high performance computing users. It represents workﬂows using a language called
GWLang which is based on Business Process Execution Language (BPEL) and Grid Service Flow Language (GSFL),
and allows the orchestration of both standalone applications and Web services. It can submit jobs to the UGanDA
MAGI system, and to Condor middleware.

2758

S.J.
Zasada,
Coveney
/ Procedia
Science00
1 (2012)
2753–2761
S.J.
Zasada P.V.
& P.V.
Coveney
/ ProcediaComputer
Computer Science
(2010) 1–9

6

3.2. Taverna
Taverna [23] was designed to orchestrate workﬂows in bioinfomatics applications, and was created to meet the
speciﬁc workﬂow requirements of the myGrid project before any open source Web service workﬂow tools existed.
Taverna uses the bespoke Simple Conceptual Uniﬁed Flow (SCUFL) language, an XML based notation for describing
workﬂows using conceptual atomic tasks. Taverna also features the SCUFL workbench to compose workﬂows graphically. Taverna uses the Freeﬂuo Web service orchestration tool, which is based on Web Services Flow Language
(WSFL), a predecessor of BPEL.
3.3. BPEL
BPEL [24] is an OASIS standard for Web service orchestration within industry. Although originally designed to
meet the needs of business, several scientiﬁc projects have successfully used BPEL to orchestrate workﬂows [25].
BPEL workﬂows are described in XML ﬁles. Since BPEL is a speciﬁcation rather than a single tool, there are a
number of graphical tools available to create these documents, or they can be created by hand. The OMII-BPEL [26]
project uses the open source ActiveBPEL engine from ActiveEndpoints. In common with other BPEL engines it both
interacts with other Web services and is itself interacted with as a Web service. It is hosted in a Tomcat container,
which has the advantage over some of the systems discussed above that the user does not need to keep their client
running until the workﬂow has ﬁnished. They simply start the engine running and can come back to monitor it at any
point.
3.4. GSEngine
GSEngine [27] was initially developed within the EU FP6 ViroLab project [28], to speciﬁcally address the needs
of clinical decision support, that of HIV drug treatment decision making. GSEngine provides facilites to develop
workﬂows using the Ruby scripting langage, and then execute them through a remote runtime engine. This is coupled
with a workﬂow repository system. This means that workﬂows can be developed and used following a community
model; workﬂows are ﬁrst developed by the ‘expert’ users or developers in a community and placed in the workﬂow
repository. End users can then access and execute the workﬂows in the repository by specifying a few required
parameters, without worrying about the mechanics of how the workﬂow is constructed. Diﬀerent interfaces exist for
workﬂow development and execution, meaning that the end users are shielded from the internals of how the workﬂow
works. The workﬂow execution engine runs on a separate server machine, which a workﬂow from the repository are
uploaded to, and which is used to execute the workﬂow. The GSEngine system used Shibboleth to perform federated
authentication to the diﬀerent components of the system.
3.5. Analysing the Workﬂow Environments
Many of the workﬂow environments listed above feature graphical environments which allow users to compose
workﬂows using a drag and drop interface. While the graphical workﬂow composition paradigm makes the process
of developing workﬂows trivial, this one size ﬁts all approach does not meet out requirements. Our requirements state
that the needs of multiple diﬀerent user groups must be addressed; some users will develop workﬂows, other users
will simply execute them, as if they were a single application. This requires the workﬂow environment to have a
repository feature that allows workﬂows to be shared between users. In addition, it should be possible to compose
workﬂows programmatically, but a graphical composition system is less important to our users.
While some of the workﬂow systems discussed above meet many of these requirements, the workﬂow system that
best meets the needs of our medical simulation scenarios is GSEngine. The multiple interfaces (with programatic
interfaces for expert users and web portals for end users) and its workﬂow repository feature, closely meet the needs
of these multi-disciplinary projects, since a few researchers within the community technically deﬁne the experiment
workﬂows, and these are then executed by clinicians and other researchers for given patients.

S.J. Zasada,
P.V. Coveney
/ Procedia
Computer
Science
1 (2012)
2753–2761
S.J. Zasada
& P.V. Coveney
/ Procedia
Computer
Science
00 (2010)
1–9

2759
7

4. Deploying an Infrastructure to Support Computational Biomedicine
To support the three medical computing scenarios outlined in section 2 we have deployed the GSEngine workﬂow
environment and associated repository and security services. The GSEngine server manages the execution of workﬂows, with expert users using the rich client platform to develop workﬂows, and end researchers and clinical users
using the web portal interface to launch workﬂows. The GSEngine workﬂow repository system has been deployed to
facilite the sharing of workﬂows. Access to the workﬂow system is secured using Shibboleth, meaning a Shibboleth
Identity Provider service has had to be deployed to support this.
The GSEngine system forms the basis of our workﬂow environment, and connects to multiple other data and compute services. The Application Hosting Environment [29, 30], provides simple desktop and command line interfaces,
to run applications on resources provided by national and international computational resources, in addition to local
departmental and institutional clusters, while hiding from the user the details of the underlying middleware in use
by the computational resource. In addition, a mobile interface for Windows Mobile based PDAs is available, and an
iPhone interface is in development. The AHE is able to run applications on resources running both the UNICORE
and Globus middlewares, meaning that a user can use a single AHE installation to access resources from the UK NGS
and DEISA for example. Development of an EGEE connector for AHE is currently underway.
The AHE is designed to allow scientists to quickly and easily run unmodiﬁed, legacy applications on computational resources, manage the transfer of ﬁles to and from the resource and monitor the status of the application. The
philosophy of the AHE is based on the fact that very often a group of researchers will all want to access the same
application, but not all of them will possess the skill or inclination to install the application on remote resources. In
the AHE, an expert user installs the application and conﬁgures the AHE server, so that all participating users can
share the same application. This community model draws a parallel with the modus operandi of numerous scientiﬁc
application communities.
The AHE is used as an interface to compute resources, including those on the US TeraGrid and EU DEISA
infrastructure. It is coupled with the workﬂow engine GSEngine in order to automate the launching and coupling
of data driven simulations. GSEngine is connected to the AHE server in order to launch computational simulations
across a range of computational infrastructures, and with the data environment in order to access the clinical and
imaging data on which the simulations are based. GSEngine also interfaces with several diﬀerent data sources; both
the GENIUS and ContraCancrum projects make extensive use of clinical data stored in DICOM format, and hence
many workﬂows require data to be obtained from a DICOM server before pre-processing. In addition, clinical data
stored in regular relational databases is accessed by the workﬂow environment, and used to store results.
5. Summary
Projects such as the large-scale EU funded Virtual Physiological Human Initiative exemplify the role that computational simulation will increasingly play in biomedicine in the future. To be ultimately useable by clinicians and other
medical professionals, suitable interfaces must be constructed which hide much of the complexity of the simulation
chain, from data acquisition to simulation to analysis. This, coupled with the inherently multiscale nature of much
VPH research, means that workﬂow environments that automate the simulation chain will be essential.
Medical computing research and clinical use are inherently multi-disciplinary, and workﬂow tools are required
that can address the needs of the diﬀerent user groups within such projects. In this paper we have looked at three
exemplar case studies, and used them to derive requirements from potential workﬂow environments. We have also
looked at the features of available workﬂow systems, and found that the one that best meets the requirements of VPH
style research projects is GSEngine. We have deployed this system successfully to support the three research projects
considered in this paper. The success of this system has meant that we have also included GSEngine as part of the
ToolKit being assembled by the VPH Network of Excellence project, and we are planning to make our deployed
workﬂow environment available to VPH researchers.
6. Acknowledgements
The development of AHE has been funded by the EPSRC projects RealityGrid (GR/R67699), Rapid Prototyping
of Usable Grid Middleware (GR/T27488/01) and User-Friendly Authentication and Authorisation for Grid Environments (EP/D051754/1), and also by OMII under the Managed Programme RAHWL project. Current development

2760

S.J.
Zasada,
Coveney
/ Procedia
Science00
1 (2012)
2753–2761
S.J.
Zasada P.V.
& P.V.
Coveney
/ ProcediaComputer
Computer Science
(2010) 1–9

8

is being funded by EU FP7 VPH-NoE (223920) and ContraCancrum (223979) projects. We would like to thank the
developers of GSEngine at Cyfronet, especially Tomasz Bartynski and Maciej Malawski for their help and support.
The development of GSEngine was funded by the EU FP6 Virolab project (027446). Finally, we would like to thank
our many colleagues at the Centre for Computational Science at UCL.
References
[1] STEP Consortium. Seeding the Europhysiome: A roadmap to the Virtual Physiological Human. published on-line 5 july 2007.
http://www.biomedtown.org/biomed town/STEP/Reception/step presentations/RoadMap/vph roadmap printed 3.pdf?action=download
[2] Distributed European Infrastructure for Supercomputing Applications. http://www.deisa.org/.
[3] Jia Yu and Rajkumar Buyya. A taxonomy of scientiﬁc workﬂow systems for grid computing. SIGMOD Record, 34(3):44–49, 2005.
[4] G. Sipos and P. Kacsuk. Classiﬁcation and Implementations of Workﬂow-Oriented Grid Portals. Lecture notes in computer science, 3726:684–
693, 2005.
[5] M. Alfano and G. Poli. The HIV life cycle: multiple targets for antiretroviral agents. Drug Design Reviews-Online, 1(1):83–92, 2004.
[6] I. Stoica, S. K. Sadiq, and P. V. Coveney. Rapid and accurate prediction of binding free energies for saquinavir-bound HIV-1 proteases.
Journal of the American Chemical Society, 130(8):2639–2648, 2008.
[7] S. K. Sadiq, D. Wright, S. J. Watson, S. J. Zasada, I. Stoica, and P. V. Coveney. Automated molecular simulation based binding aﬃnity
calculator for ligand-bound hiv-1 proteases. J. Chem. Inf. Model, 48(9):1909–1919, 2008.
[8] US TeraGrid. http://www.teragrid.org.
[9] L Kale, R Skeel, M Bhandarkar, R Brunner, A Gursoy, N Krawetz, J Phillips, A Shinozaki, K Varadarajan, and K Schulte. NAMD2: Greater
scalability for parallel molecular dynamics. J. Comp. Phys., pages 283–312, 1999.
[10] JJ Guilbert. The world health report 2002-reducing risks, promoting healthy life. Educ Health (Abingdon), 16(2):230, 2003.
[11] MJ Thubrikar and F Robicsek. Pressure-induced arterial wall stress and atherosclerosis. The Annals of Thoracic Surgery, 59(6):1594–1603,
1995.
[12] M Goyen, G Laub, ME Ladd, JF Debatin, J Barkhausen, KH Truemmler, S Bosk, and SG Ruehm. Dynamic 3 d mr angiography of the
pulmonary arteries in under four seconds. Journal of Magnetic Resonance Imaging, 13(3):372–377, 2001.
[13] S Manos, S Zasada, MD Mazzeo, R Haines, G Doctors, S Brew, R Pinning, J Brooke, and PV Coveney. Patient speciﬁc whole cerebral blood
ﬂow simulation: A future role in surgical treatment for neurovascular pathologies. In Proceedings of the 3rd TeraGrid Conference, 2008.
[14] A C Taylor, M T Draney, J P Ku, D Parker, B N Steele, K Wang, and C K Zarins. Predictive medicine: Computational techniques in
therapeutic decision-making. Computer Aided Surgery, 4(5):231–247, 1999.
[15] D R Noble, J G Georgiadis, and R O Buchius. Comparison of accuracy and performance for lattice boltzmann and ﬁnite diﬀerence simulations
of steady viscous ﬂow. Int. J. Num. Meth. Fluids, 23(1), 1996.
[16] M D Mazzeo and P V Coveney. Hemelb: a high performance parallel lattice-boltzmann code for large scale ﬂuid ﬂow in complex geometries.
Computer Physics Communications, 178:894–914, 2008.
[17] K. Marias, V. Sakkalis, A. Roniotis, C. Farmaki, G. Stamatakos, D. Dionysiou, S. Giatili, N. Uzunoglou, N. Graf, R. Bohle, E. Messe, P. V.
Coveney, S. Manos, S. Wan, A. Folarin, S. Nagl, P. B¨uchler, T. Bardyn, M. Reyes, G. Clapworthy, N. Mcfarlane, E. Liu, T. Bily, M. Balek,
M. Karasek, V. Bednar, J. Sabczynski, R. Opfer, S. Renisch, and I. C. Carlsen. Clinically oriented translational cancer multilevel modeling:
The ContraCancrum project. World Congress on Medical Physics and Biomedical Engineering, September 7 - 12, 2009, Munich, Germany,
pages 2124–2127, 2009.
[18] S Manos, S. J. Zasada, and P. V. Coveney. Life or death decision-making: The medical case for large-scale, on-demand grid computing.
CTWatch Quarterly Journal, 4(2):35–45, 2008.
[19] S. K. Sadiq, M. D. Mazzeo, S. J. Zasada, S. Manos, I. Stoica, C. V. Gale, S. J. Watson, P. Kellam, S. Brew, and P. V. Coveney. Patientspeciﬁc simulation as a basis for clinical decision-making. Philosophical Transactions of the Royal Society A: Mathematical, Physical and
Engineering Sciences, 366(1878):3199–3219, 2008.
[20] J. MacLaren, M.M. Keown, and S. Pickles. Co-allocation, fault tolerance and grid computing. In Proceedings of the UK e-Science All Hands
Meeting, pages 155–162, 2006.
[21] P Beckman, S Nadella, N Trebon, and I Beschastnikh. Spruce: A system for supporting urgent high-performance computing. 2007.
[22] K. Gor, D. Ra, S. Ali, L. Alves, N. Arurkar, I. Gupta, A. Chakrabarti, A. Sharma, and S. Sengupta. Scalable enterprise level workﬂow and
infrastructure management in a grid computing environment. In IEEE International Symposium on Cluster Computing and the Grid, 2005.
CCGrid 2005, volume 2, pages 661–667, 2005.
[23] Thomas M Oinn, Matthew Addis, Justin Ferris, Darren Marvin, Martin Senger, R Mark Greenwood, Tim Carver, Kevin Glover, Matthew R
Pocock, Anil Wipat, and Peter Li. Taverna: a tool for the composition and enactment of bioinformatics workﬂows. Bioinformatics,
20(17):3045–3054, 2004.
[24] Business process execution language for web services, 2005. ftp://www6.software.ibm.com/software/
developer/library/ws-bpel.pdf.
[25] Aleksander Slomiski. On using bpel extensibility to implement ogsi and wsrf grid workﬂows. Concurrency Computat.: Pract. Exper.,
18(10):1229–1241, 2006.
[26] Wolfgang Emmerich, Ben Butchart, Liang Chen, Bruno Wassermann, and Sarah L Price. Grid service orchestration using the business process
execution language (bpel). J. Grid Comput, 3(3-4):283–304, 2005.
[27] M. Bubak, T. Gubala, M. Kasztelnik, M. Malawski, P. Nowakowski, and P. Sloot. Collaborative virtual laboratory for e-Health. In Expanding
the Knowledge Economy: Issues, Applications, Case Studies, eChallenges e-2007 Conference Proceedings, pages 537–544. Citeseer.
[28] The EU FP6 ViroLab Project. http://www.virolab.org.
[29] S.J. Zasada and P.V. Coveney. Virtualizing access to scientiﬁc applications with the application hosting environment. Computer Physics
Communications, In Press, Corrected Proof, 2009.

S.J. Zasada,
P.V. Coveney
/ Procedia
Computer
Science
1 (2012)
2753–2761
S.J. Zasada
& P.V. Coveney
/ Procedia
Computer
Science
00 (2010)
1–9

2761
9

[30] P V Coveney, R S Saksena, S J Zasada, M McKeown, and S Pickles. The application hosting environment: Lightweight middleware for
grid-based computational science. Computer Physics Communications, 176(6):406–418, 2007.

