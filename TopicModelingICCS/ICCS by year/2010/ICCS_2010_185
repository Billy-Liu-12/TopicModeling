Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
229–237

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Eﬃcient design of exponential-Krylov integrators for large scale
computing
M. Tokmana,∗, J. Loﬀelda
a School

of Natural Sciences, University of California, 5200 N. Lake Road, Merced, CA 95343

Abstract
As a result of recent resurgence of interest in exponential integrators a number of such methods have been introduced in the literature. However, questions of what constitutes an eﬃcient exponential method and how these techniques compare with commonly used schemes remain to be fully investigated. In this paper we consider exponentialKrylov integrators in the context of large scale applications and discuss what design principles need to be considered
in construction of an eﬃcient method of this type. Since the Krylov projections constitute the primary computational
cost of an exponential integrator we demonstrate how an exponential-Krylov method can be structured to minimize
the total number of Krylov projections per time step and the number of Krylov vectors each of the projections requires.
We present numerical experiments that validate and illustrate these arguments. In addition, we compare exponential
methods with commonly used implicit schemes to demonstrate their competitiveness.
Keywords: exponential integrators, Krylov projections, stiﬀ systems, large scale computing

c 201202.60.Cb,
⃝
Published by
Elsevier Ltd. Open access under CC BY-NC-ND license.
PACS:
02.60.Dc

2000 MSC: 65F10, 65F60, 65L04, 65L05, 65M22

1. Introduction
While the ﬁrst exponential time integrators were introduced back in the 1960’s [1, 2, 3] their popularity among
numerical analysts and practitioners has been limited. Initially the main reason for such underutilization was the high
computational cost of these schemes. Solving systems of ODEs with an exponential method requires evaluation of a
product of an exponential or exponential-type functions of a large matrix with a vector. Even for moderately-sized
systems this operation becomes prohibitively expensive if standard techniques such as Taylor or Pade approximations
are employed [4]. However, a proposal to use a Krylov projection algorithm for this task signiﬁcantly reduced computational cost. This idea ﬁrst appeared in a paper by Nauts and Wyatt [5] where they used Krylov projection to compute
exponentials of symmetric matrices that represented discrete Hamiltonian operators, and was later used by Park and
Light [6] to exponentially propagate the Schr¨odinger equation. Van der Vorst extended this idea and proposed to apply
Krylov projection to approximate general functions of matrices [7]. A resurgence of interest in exponential methods
followed these ideas and a number of such methods have been proposed in the last decade [8, 9, 10, 11, 12].
∗ Corresponding

author
Email address: mtokman@ucmerced.edu (M. Tokman)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.026

230

M. Tokman, J.
Loffeld /Computer
ProcediaScience
Computer
Science
/ Procedia
00 (2010)
1–91 (2012) 229–237

2

Coupling exponential methods with the Krylov projection algorithm makes these time integrators much more appealing for large scale computing. Still many questions remain to be answered to enable wide application of these
methods to scientiﬁc problems. In particular, thorough performance comparisons with state-of-art explicit and implicit
integrators are needed and it remains to be demonstrated how details of the design of an exponential integrator aﬀect
its performance. This paper presents some results pertaining to the former question and focuses on the latter issue.
We consider exponential integrators as methods that can allow for signiﬁcant computational savings in integrating
large stiﬀ systems of ODEs and from that perspective discuss what constitutes an optimal design of an exponential
integrator. The paper is organized as follows. Section 2 provides an overview of exponential methods for general
nonlinear systems of ODEs and outlines the main features that inﬂuence performance of an exponential-Krylov integrator. A suite of test problems is presented in Section 3 and the ideas of previous sections are illustrated with
numerical examples. Finally, conclusions and directions for future study are presented in Section 4.
2. Structure of exponential integrators
2.1. General derivation and important construction considerations for exponential integrators
In order to illustrate what choices have to be made in the design of an exponential integrator we begin by presenting
the general derivation of such schemes. Consider the initial value problem for an autonomous nonlinear system of
ODEs
(1)
y = f (y), y(t0 ) = y0 ,
where y ∈ RN . There is no loss of generality in considering an autonomous system since a non-autonomous one can
always be converted to the autonomous form by adding the equation t = 1. If the ﬁrst-order Taylor expansion of f (y)
around y0 exists we can re-write Eq. (1) as
y = f (y0 ) + f (y0 )(y − y0 ) + r(y)

(2)

with the nonlinear remainder of the ﬁrst-order Taylor expansion denoted as r(y) = f (y) − f (y0 ) − f (y0 )(y − y0 ) and
the Jacobian matrix f (y0 ) ∈ RN×N . Using the integrating factor e− f (y0 )t we can ﬁnd the integral form of the solution
to this system at time t0 + h as
y(t0 + h) = y0 +

e f (y0 )h − I
h f (y0 ) +
h f (y0 )

t0 +h

ef

(y0 )(t−t0 )

r(y(t))dt.

(3)

t0

After setting A0 = f (y0 ) and changing the integration variable to s = (t − t0 )/h in Eq. (3) we obtain
y(t0 + h) = y0 +

ehA0 − I
h f (y0 ) +
hA0

1

ehAs hr(y(s))ds.

(4)

0

Equation (4) serves as a starting point in derivation of an exponential method. Alternative derivations are also available, particularly when the nonlinearity is decomposed into the linear and nonlinear terms as f (y) = Ly + N(y) (see
[13] for a brief history of exponential methods for such semi-linear problems). However for the general nonlinear
systems of type (1) which are the focus of this paper, equation (4) is a convenient starting point for deriving existing
exponential methods by interpreting t0 as the latest time where an approximate solution is available, considering h as
an integration step size and approximating the solution y(t0 + h).
Constructing an exponential integrator using (4) requires accomplishing two tasks: (I) developing an approxi1
mation to the nonlinear integral 0 ehAs hr(y(s))ds and (II) building an algorithm to evaluate products of functions of
matrices and vectors arising from the second term of the right-hand-side of (4) and possibly from the approximation
chosen for the integral in (I). For example, task (I) can be accomplished by approximating the nonlinear integral
using the Runge-Kutta approach. With a two-stage Runge-Kutta-type approximation we can construct the two-stage
exponential Runge-Kutta schemes [11]:
r1 = y0 + a11 ϕ1 (γ11 hA)h f (y0 ),
y1 = y0 + a21 ϕ1 (γ21 hA)h f (y0 ) + a22 ϕ2 (γ22 hA)r(r1 ),

(5)
(6)

231
3

M. Tokman, J. Loffeld
/ Procedia
Computer
Science
(2012) 229–237
/ Procedia
Computer
Science 00
(2010)11–9
z

z

where y1 is an approximation to the solution y(t0 + h), ϕ1 (z) = e z−1 , and ϕ2 (z) = e −1−z
. Choosing a11 = a21 = γ21 =
z2
γ22 = 1, γ11 = 1/2 and a22 = 2/3 yields the third-order exponential Runge-Kutta method EPIRK3 proposed in [11].
In general, a polynomial approximation to the nonlinear remainder function r(y) in (4) will result in an exponential
scheme which approximates the solution as a linear combination of the products of type ϕk (γhA)vk with v ∈ RN and
functions ϕk (z) deﬁned as
1
sk−1
ds,
k = 0, 1, 2, ....
(7)
ez(1−s)
ϕk (z) =
(k − 1)!
0
Obviously either Runge-Kutta or multistep approaches can be used in the derivation as well as any other construct that
yields an approximation to the integral in (4). Once a certain ansatz for the approximation to the solution as a linear
combinations of terms alk ϕk (γlk hA)vlk is assumed, the order conditions for the coeﬃcients alk , γlk can be derived and
solved to obtain exponential integrators of the desired order.
After constructing an exponential integrator one needs to address task (II) and to choose an algorithm to approximate the products of functions ϕk (γhA) and vectors vlk . For small systems a number of techniques such as Taylor
or Pade expansions can be used [4]. If the system size N is large, Krylov projection algorithm becomes the method
of choice [14]. Thus a product of a function of a matrix g(A) and a vector v is approximated using projection of the
matrix and the vector onto the Krylov subspace Km (A, v) = span{v, Av, ..., Am−1 v} as follows. The orthonormal basis
{v1 , v2 , ..., vm } of Km (A, v) is constructed using the modiﬁed Arnoldi iteration [15, 14] which can be written in matrix
form as
(8)
AVm = Vm Hm + hm+1,m vm+1 eTm
where em = (0, . . . , 0, 1, 0, . . . , 0)T is the unit vector with 1 as the mth coordinate, {v1 , v2 , ..., vm , vm+1 } is an orthonormal
basis of Km (A, b), Vm = [v1 v2 ... vm ] ∈ RN×m , and
Hm = VmT AVm

is an upper Hessenberg matrix calculated as a side product of the iteration. Matrix P =
Km (A, v), thus g(A)v is approximated as a projection
g(A)b ≈ Vm VmT g(A)Vm VmT b.
Recalling Eq. (9) and observing that v1 = v/ v

2

(9)
Vm VmT

is a projector onto
(10)

we make the ﬁnal approximation

g(A)v ≈ v 2 Vm g(Hm )e1 .

(11)

This algorithm can be used to approximate any of the matrix-function vector products g(A)v with g(z) = ϕk (z). It is
important to note that the Arnoldi iteration is scale invariant, i.e. once Hm and Vm are calculated for a particular matrix
A and vector v, in order to calculate corresponding matrices for γA and v we simply need to scale Hm and Vm by
the factor γ, the orthonormal basis does not have to be recalculated from scratch. If γ > 1 additional Krylov vectors
might have to be added to achieve the desired accuracy, if γ < 1 the approximation with m Krylov vectors will be
suﬃcient. The key to eﬃciency of the Krylov projection algorithm is keeping the size of the Krylov basis m small so
that calculating g(Hm ) is cheap and can be done using Pade or any other approximation eﬀective for small matrices.
The Krylov basis size m is determined during the course of the iteration using appropriate residuals [16, 9]. Note that
m will depend on the eigenvalues of the matrix A, the magnitude of the vector v and the type of function g(z). It has
been demonstrated analytically for matrices with a speciﬁc spectrum [17] and numerically for some matrices [11] that
as k is increased the number of Krylov vectors m required to approximate the product ϕk (A)v decreases.
It is clear that approximation of the products φk (hγkl A0 )vlk will constitute the main cost of an exponential scheme
since the rest of the required operations is limited to several vector additions and scalar-vector multiplications. Considering eﬃciency of the complete exponential-Krylov integrator from the perspective of tasks (I) and (II) it is clear
that the computational cost of applying an exponential scheme to integration of a large system (1) depends on two
main features of the chosen method: (i) the total number of products φk (hγkl A0 )vlk that have to be computed and (ii)
the number of Krylov vectors that each of these products will require to achieve prescribed accuracy. Thus if we want
to construct an exponential integrator of a certain order it is prudent to derive a scheme which minimizes both of these
parameters, i.e. requires the minimum possible number of Krylov projections and chooses appropriate functions g(z)
and small vectors v so that these projections are fast. Below we consider existing exponential integrators from this
point of view and demonstrate how design aﬀects their performance.

232

M. Tokman, J.
Loffeld /Computer
ProcediaScience
Computer
Science
/ Procedia
00 (2010)
1–91 (2012) 229–237

4

2.2. Comparing designs of exponential integrators
To illustrate how design aﬀects performance of an exponential-Krylov integrator we consider several existing
methods proposed for the solution of general large nonlinear systems (1). While the conclusions hold for methods of
any order we choose to compare exponential integrators of order four. The ﬁrst method, Exp4, has been developed by
Hochbruck et al. [9] and is arguably the most widely known exponential integrator:
k1 = ϕ1 ( 13 hA0 ) f (y0 ),
7
k1 +
w4 = − 300

97
150 k2

k2 = ϕ1 ( 23 hA0 ) f (y0 ),

k3 = ϕ1 (hA0 ) f (y0 ),

37
u4 = y0 + hw4 , r4 = f (u4 ) −
300 k3 ,
1
2
k4 = ϕ1 ( 3 hA0 )r4 , k5 = ϕ1 ( 3 hA0 )r4 , k6 = ϕ1 (hA0 )r4 ,
59
7
2
w7 = 300
k1 − 75
k2 + 269
u7 = y0 + hw7 ,
300 k3 + 3 (k4 + k5 + k6 ),
1
k7 = ϕ1 ( 3 hA0 )r7 ,

−

f (y0 ) − hA0 w4 ,
r7 = f (u7 ) − f (y0 ) − hA0 w7 ,

y1 = y0 + h(k3 + k4 − 43 k5 + k6 + 16 k7 ).

(12)

Note that due to the invariance of the Arnoldi iteration discussed above, only three Krylov projections are needed - one
to approximate k1 , k2 and k3 , another to estimate k4 , k5 , k6 and the third one to compute k7 . Each of these projections
approximates a product of type φ1 (γhA)v. Note that the function g(z) = ϕ1 (z) does not change, however we can
expect that the vector v will decrease in magnitude from one Krylov projection to another if vectors ui are better
approximations to the solution as i increases.
The second method is an exponential propagation iterative Runge-Kutta (EpiRK) scheme proposed in [11]:
u1 = y0 + a11 hϕ1 ( 13 hA0 ) f (y0 ),
u2 = y0 + a21 hϕ1 ( 23 hA0 ) f (y0 ) + a22 hϕ2 ( 23 hA0 )r(u1 ),
y1 = y0 + hϕ1 (hA0 ) f (y0 ) + b1 hϕ2 (hA0 )r(u1 ) + b2 h[6ϕ3 (hA0 ) − ϕ2 (hA0 )](−2r(u1 ) + r(u2 )).

(13)

Several methods of third- and forth-order have been derived in [11], in particular, a fourth-order scheme EpiRK4 with
a11 = 3/4, a21 = 3/4, a22 = 0, b1 = 160/81, b2 = 64/81. The EpiRK methods are designed so that the following
two principles hold. First, the number of Krylov projections required per time step is minimized by reusing the same
vector v in the matrix-function-vector product at each new stage ui , i.e. here only three Krylov projections must be
executed with vectors v in the matrix-function-vector products being f (y0 ), r(u1 ) and (−2r(u1 ) + r(u2 )). Second, the
number of Krylov vectors each of these projections requires is minimized by having higher order ϕk (z) functions that
have to be approximated with each new Krylov projection, i.e. ϕ1 (z) for the ﬁrst projection, ϕ2 (z) for second and
ψ4 (z) = 6ϕ3 (z) − ϕ2 (z) for the last Krylov projection.
The last scheme considered here is an exponential Rosenbruck-type scheme ERow4-1 [18]
s1

= ϕ0 ( 12 hA0 )y0 + 12 hϕ1 ( 12 A0 )g(y0 ),

s2
y1

= ϕ0 ( 12 hA0 )y0 + hϕ1 (hA0 )gn (s1 ),
= ϕ0 (hA0 )y0 + h[ϕ1 (hA0 ) − 14ϕ3 (hA0 ) + 36ϕ4 (hA0 )]g(y0 )
+ h[16ϕ3 (hA0 ) − 48ϕ4 (hA0 )]g(s1 ) + h[−2ϕ3 (hA0 ) + 12ϕ4 (hA0 )]g(s2 ),

(14)

with g(y) = f (y) − A0 y. In this formulation it appears that ERow4-1 requires four Krylov projections since terms
ϕ0 (γhA0 )y0 must be computed in addition to terms with vectors g(y0 ), g(s1 ) and g(s2 ). However, if we re-write this
method in terms of r(y) using the relation r(y) = g(y) + f (y0 ) − A0 y0 we obtain a diﬀerent formulation of the method
we call ERow4-2:
1
1
(15)
u1 = y0 + hϕ1 ( hA0 ) f (y0 ),
2
2
u2 = y0 + hϕ1 (hA0 ) f (y0 ) + hϕ1 (hA0 )r(u1 ),
y1 = y0 + hϕ1 (hA0 ) f (y0 ) + h[16ϕ3 (hA0 ) − 48ϕ4 (hA0 )]r(u1 ) + h[−2ϕ3 (hA0 ) + 12ϕ4 (hA0 )]r(u2 )
In this form the method is similar to EpiRK4 and requires only three Krylov projections per time step. Just as
EpiRK4, ERow4-2 uses higher order exponential functions, which we expect to result in faster Krylov convergence
for subsequent projections.

M. Tokman, J. Loffeld
/ Procedia
Computer
Science
(2012) 229–237
/ Procedia
Computer
Science 00
(2010)11–9

233
5

3. Numerical experiments
In this section we demonstrate how the design of the exponential integrators impacts their performance. We
compare constant time step implementations of the three exponential integrators in MATLAB. To illustrate competitiveness of these methods compared to commonly used integrators we include the BDF4 scheme based on the
backwards-diﬀerentiation formula of order four and the popular stiﬀ integrator RADAU5 [19]. For fair comparison
both of these methods are implemented using the Krylov projection based algorithm GMRES to solve the linear
systems within Newton iterations arising due to implicitness [20].
We have studied the performance of the methods using a suite of test problems (Allen-Cahn [21, 22], Burgers,
Brusselator [23, 19], Gray-Scott [24], a semilinear parabolic equation [18], and a nonlinear diﬀusion equation NILIDI
[25]), however for the sake of brevity we choose two representative systems to discuss here. The two-dimensional
Allen-Cahn equation and the one-dimensional Burgers equation represent the two end points in the spectrum of
problems we studied in terms of how quickly the Krylov projection iteration converges, i.e. to achieve prescribed
accuracy the number of Krylov vectors needed per projection is on the order of tens for the Allen-Cahn equation
while for the Burgers equation given the same tolerance this number is of the order of a hundred. For convenience
we call the former problem ”Krylov-easy” and the latter ”Krylov-diﬃcult”. This terminology directly corresponds to
a problem being less or more stiﬀ. Note that all the tests were ran with the same prescribed tolerance for the Krylov
projection residuals which was set to 10−12 , a value that is smaller then the accuracy requirement for the smallest time
step size. Surely this means that the accuracy achieved for some of the Krylov iterations is excessive compared to
practical tolerances for given step sizes but such an approach ensures consistent comparison across integrators and
helps illustrate the general trends in their performance. Below we describe the two test problems and the parameter
values used in the calculations.
Example 3.1: The two-dimensional Allen-Cahn equation
ut = u − u3 + α∇2 u,

x, y ∈ [0, 1]

(16)

x ∈ [0, 1]

(17)

with α = 0.1 is complemented with the initial and Neumann boundary conditions given by u = 0.4 + 0.1(x + y) +
0.1 sin(10x) sin(20y). The diﬀusive term is discretized with standard second-order ﬁnite diﬀerences and the problem
is integrated over the time interval t ∈ [0, 0.1].
Example 3.2: The one-dimensional Burgers equation
ut = −uu x + νu xx ,

with ν = 0.03 and initial and Dirichlet boundary conditions prescribed using u = (sin(3πx))3 (1 − x)3/2 . The diﬀusive
term was discretized using the second-order centered ﬁnite-diﬀerences, the uu x term was approximated as uu x ≈
(u2i+1 − u2i−1 )/(4Δx), i = 1, ..., N and the problem was integrated over the time interval t ∈ [0, 1].
Table 1 demonstrates how the number of Krylov vectors depends on the structure of an exponential integrator
and the eﬀect it has on the overall computational eﬃciency of the method. As anticipated since both EpiRK4 and
ERow4-2 use the minimum number of three Krylov projections with the higher order ϕk (z) functions for each, the
number of Krylov vectors required per projection for these methods is smaller compared to Exp4 and ERow4-1. This
is reﬂected by the total CPU time spent by each of the methods to integrate the equations over the whole time interval
(Tables 1). The importance of the reduction in Krylov iterations was particularly pronounced for the more demanding
Burgers problem. As can be seen from Table 1(b) EpiRK4 and ERow4-2 required well less than half the CPU time
of Exp4 at coarse step sizes. Even at the ﬁnest step sizes, the savings oﬀered by these two methods were still quite
evident. The importance of using the higher order ϕk (z) functions can be further illustrated by comparing performance
of ERow4-1 and Exp4. Despite the fact that ERow4-1 has to compute one extra Krylov projection compared to other
methods, it still manages to signiﬁcantly outperform Exp4 at coarse and medium step sizes. Since adding a vector to
the Krylov basis requires orthonormalizing the new vector against every previously computed vector in the basis, the
computational cost per vector goes up linearly with the basis size. Therefore the total cost of computing the Krylov
basis increases quadratically with the basis size. Thus even modest reduction in the total number of the Krylov vectors
per projection can result in signiﬁcant CPU savings for large basis sizes. As can be seen by comparing with EpiRK4
and ERow4-2, the savings are even greater when both the number of projections is reduced and the falloﬀ of the
number of Krylov vectors per projection happens more rapidly.
While the analysis above illustrates the eﬀect of Krylov projections on the computational cost, in order to assess

234

M. Tokman, J.
Loffeld /Computer
ProcediaScience
Computer
Science
/ Procedia
00 (2010)
1–91 (2012) 229–237

6

the overall eﬃciency of a method the accuracy of the ﬁnal approximation to the solution has to be taken into account.
Precision diagrams displayed in Figure 1 show the relative performance of the integrators in terms of both accuracy
and CPU time required. The problems were each run with several levels of resolution to show how the performance
of a method scales with problem size. Figure 1 leads to the following conclusions about comparative performance of
the methods. First, the eﬀect of the Krylov iterations on eﬃciency becomes apparent particularly when a problem’s
stiﬀness is increased and it becomes more ”Krylov-diﬃcult”, e.g. as the problem size grows for Allen-Cahn equation
from N = 502 to N = 1502 EpiRK4 and ERow4-2 become increasingly more eﬃcient compared to other methods
particularly for large step sizes h. Similar behavior can be read oﬀ the precision diagrams for the Burgers equation.
For example, for step size h = 0.1 solution approximations for Burgers equation obtained by Exp4 and ERow4
have comparable accuracy, but relative CPU time of ERow4-2 compared to Exp4 improves from 60% to 40% as the
problem size is increased from N = 500 to N = 1500. Second, we can see that as the stiﬀness of a problems is
increased the bend in the precision curves particularly for large step sizes indicates that the problem becomes more
”Krylov-diﬃcult” and the relative computational cost of the methods becomes more pronounced (note the change in
scale of separation between the curves). Note that the bend in the curves illustrates the importance of adaptivity in
choosing the dimension of a Krylov subspace. The eﬃciency of the method is optimal if the tolerance for the residual
of a Krylov iteration is calculated depending on the time step size. Our results on development of eﬃcient adaptive
algorithms are outside the scope of this paper and will be reported elsewhere. Finally, the ﬁgures make it apparent
that the exponential methods compete very well with the standard implicit integrators. Note that some of the ﬁgures
do not include RADAU5. The reason for that is the poor performance of this method for these values of h and N which
puts it way oﬀ scale compared to the other schemes, i.e. the performance curve is so far to the right of the graph that
we chose not to include it in the ﬁgures in order to preserve clarity in terms of relative performance for the rest of
the schemes. In addition to overall computational savings that the exponential methods oﬀer compared to BDF4 and
RADAU5 we can also observe that the diﬃculty in Krylov convergence aﬀects the implicit methods more severely
compared to the exponential integrators. For example with the Allen-Cahn equation at step step h = 0.01, the CPU
cost for ERow4-2 compared to BDF4 is about 74% for the smallest problem size. This gap increases to 51% for the
largest problem size. The eﬀect is similar but more pronounced for the Krylov-diﬃcult Burgers equation. At h = 0.01,
the CPU time ratio for ERow4-2 compared to BDF4 changes from 12% for the smallest problem size to about 5% for
the largest problem size.
4. Conclusions and future work
In this paper we showed how the design of an exponential-Krylov integrator aﬀects its performance. Speciﬁcally,
we demonstrated that an integrator will be more eﬃcient if it is designed to minimize the total number of Krylov
projections per time step and the number of Krylov vectors that each of these projections requires. In addition,
our studies reveal exponential-Krylov integrators as very competitive alternatives to more commonly used implicit
schemes. More detailed studies of the comparative performance of the exponential and implicit schemes both with
constant and adaptive time stepping will be presented elsewhere. In addition, we plan to explore the design principles
outlined above to construct more optimized exponential-Krylov integrators and study their performance on large-scale
scientiﬁc applications.
Acknowledgements
This work was supported in part by the NSF/DOE Partnership in Plasma Science grant #DMS-0317511 and a
grant from the U.S. Department of Energy, Oﬃce of Science, Oﬃces of Advanced Scientiﬁc Computing Research,
and Biological & Environmental Research through the U.C. Merced Center for Computational Biology #DE-FG0204ER25625.

M. Tokman, J. Loffeld
/ Procedia
Computer
Science
(2012) 229–237
/ Procedia
Computer
Science 00
(2010)11–9

(a) Allen-Cahn with N = 502

(d) Burgers with N = 500

(b) Allen-Cahn with N = 1002

(e) Burgers with N = 1000

(c) Allen-Cahn with N = 1502

(f) Burgers with N = 1500

Figure 1: Precision diagrams for the Allen-Cahn (a-c) and Burgers (d-f) equations for
h = 0.01, 0.005, 0.0025, 0.00125, 0.000625. Note that the axes scale changes from graph to graph.

235
7

236

M. Tokman, J.
Loffeld /Computer
ProcediaScience
Computer
Science
/ Procedia
00 (2010)
1–91 (2012) 229–237

Table 1: Average Krylov vectors counts and total CPU time.
(a) 2D Allen-Cahn with N = 1502
h = 0.01
Exp4
EpiRK4
ERow4-1
ERow4-2
h = 0.005
Exp4
EpiRK4
ERow4-1
ERow4-2
h = 0.0025
Exp4
EpiRK4
ERow4-1
ERow4-2

Average number of Krylov vectors
Projection 1
Proj. 2
Proj. 3
Proj. 4
32.0
25.8
26.7
n/a
27.9
17.4
13.4
n/a
28.8
23.7
23.5
17.1
27.5
19.2
13.7
n/a

Total # of Krylov
vectors
84.5
58.7
93.1
60.4

Total
CPU time
2.48
1.96
2.80
1.97

20.6
17.4
18.5
17.2

16.2
9.5
14.1
10.4

17.1
6.4
14.1
5.8

n/a
n/a
9.7
n/a

53.8
33.2
56.4
33.4

3.65
3.07
4.30
3.06

14.1
11.4
12.5
11.4

10.8
4.6
8.7
5.5

11.3
3.3
8.7
3.3

n/a
n/a
5.7
n/a

36.2
19.4
35.4
20.2

6.54
5.49
7.58
5.44

Total # of Krylov
vectors
363.7
223.4
408.8
221.5

Total
CPU time
178.70
73.05
143.09
71.78

(b) 1D Burgers with N = 15000
h = 0.01
Exp4
EpiRK4
ERow4-1
ERow4-2
h = 0.005
Exp4
EpiRK4
ERow4-1
ERow4-2
h = 0.0025
Exp4
EpiRK4
ERow4-1
ERow4-2

Average number of Krylov vectors
Projection 1
Proj. 2 Proj. 3
Proj. 4
133.1
113.2
117.4
n/a
116.7
64.2
42.5
n/a
120.7
107.4
107.4
73.3
114.8
73.3
33.4
n/a
86.4
74.0
76.8
72.9

70.3
32.6
64.3
36.7

72.7
19.7
64.3
14.7

n/a
n/a
40.8
n/a

229.3
126.2
246.2
124.2

84.94
34.71
67.96
33.98

57.7
47.0
49.8
46.6

44.1
15.5
37.5
17.0

46.2
10.8
37.5
6.9

n/a
n/a
23.7
n/a

147.9
73.3
148.5
70.4

58.12
26.61
47.82
26.11

8

M. Tokman, J. Loffeld
/ Procedia
Computer
Science
(2012) 229–237
/ Procedia
Computer
Science 00
(2010)11–9

237
9

References
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
[23]
[24]
[25]

J. Certaine, The solution of ordinary diﬀerential equations with large time constants, Wiley, 1967.
D. A. Pope, An exponential method of numerical integration of ordinary diﬀerential equations, Comm. ACM 6 (1963) 491–493.
J. Lawson, Generalized Runge-Kutta processes for stable systems with large Lipschitz constants, SIAM J. Numer. Anal. 4 (1967) 372–380.
C. Moler, C. V. Loan, Nineteen dubious ways to compute the exponential of a matrix, twenty-ﬁve years later, SIAM Rev. 45 (1) (2003) 3–49.
A. Nauts, R. E. Wyatt, New approach to many-state quantum dynamics: the recursive-residue-generation method, Phys. Rev. Lett. 51 (1983)
2238–2241.
T. J. Park, J. C. Light, Unitary quantum time evolution by iterative Lanczos reduction, J. Chem. Phys. 85 (1986) 5870–5876.
H. A. V. der Vorst, An iterative solution method for solving f(a)x = b using Krylov subspace information obtained for the symmetric positive
deﬁnite matrix a, J. Comput. Appl. Math. 18 (1987) 249–263.
R. A. Friesner, L. S. Tuckerman, B. C. Dornblaser, T. V. Russo, A method for exponential propagation of large systems of stiﬀ nonlinear
diﬀerential equations, J. Sci. Comput. 4 (1989) 327–354.
M. Hochbruck, C. Lubich, H. Selhofer, Exponential integrators for large systems of diﬀerential equations, SIAM J. Sci. Comput. 19 (1998)
1552–1574.
M. Hochbruck, A. Ostermann, Exponential integrators of rosenbrock-type, Oberwolfach Reports 3 (2006) 1107–1110.
M. Tokman, Eﬃcient integration of large stiﬀ systems of ODEs with exponential propagation iterative (EPI) methods, J. Comp. Phys. 213
(2006) 748–776.
A. Ostermann, M. Thalhammer, W. M. Wright, A class of explicit exponential general linear methods, BIT Num. Math. 46 (2) (2006)
409–431.
B. Minchev, W. M. Wright, A review of exponential integrators for ﬁrst order semi-linear problems, Technical Report (2005) 1–44.
Y. Saad, Iterative methods for sparse linear systems, PWS Publishing Company, 1996.
W. Arnoldi, The principle of minimized iteration in the solution of the matrix eigenvalue problem, Quart. Appl. Math. 9 (1951) 17–29.
Y. Saad, Analysis of some Krylov subspace approximations to the matrix exponential operator, SIAM J. Numer. Anal. 29 (1992) 209–228.
M. Hochbruck, C. Lubich, On Krylov subspace approximations to the matrix exponential operator, SIAM J. Numer. Anal. 34 (1997) 1911–
1925.
M. Hochbruck, A. Ostermann, J. Schweitzer, Exponential Rosenbrock-type methods, SIAM J. Numer. Anal. 47 (2009) 786–803.
E. Hairer, G. Wanner, Solving Ordinary Diﬀerential Equations II: Stiﬀ and Diﬀerential Algebraic Problems, 2nd Edition, Springer, 2004.
D. Knoll, D. Keyes, Jacobian-free NewtonKrylov methods: a survey of approaches and applications, J. Comp. Phys. 193 (2004) 357397.
A. Kassam, L. Trefethen, Fourth-order time stepping for stiﬀ PDEs., SIAM J. Sci. Comput. 26 (4) (2005) 1214–1233.
S. Krogstad, Generalized integrating factor methods for stiﬀ PDEs, J. Comp. Phys. 203 (2005) 72–88.
R. Lefever, G. Nicolis, Chemical instabilities and sustained oscillations., J. Theor. Biol. 3 (1971) 267–284.
P. Gray, S. K. Scott, Autocatalytic reactions in the isothermal continuous stirred tank reactor., Chem. Engng. Sci. 39 (1984) 1087–1097.
B. Schmitt, R. Weiner, Matrix-free w-methods using a multiple arnoldi iteration., Appl. Numer. Math. 18 (1995) 307–320.

