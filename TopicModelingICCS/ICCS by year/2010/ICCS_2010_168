Procedia Computer
Science
Procedia Computer Science 00 (2010) 1–9

Procedia Computer Science 1 (2012) 2539–2547
www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Multi-feature query language for image classiﬁcation
Raoul Pascal Pein, Joan Lu
Department of Informatics
School of Computing and Engineering
University of Huddersﬁeld
Huddersﬁeld, United Kingdom

Abstract
Despite the major eﬀort put into the creation of Content-Based Image Retrieval (CBIR) systems during the last
decade, the solutions available are still not satisfying for generic purposes. The most severe issue seems to be the
so-called “semantic gap”. It is feasible to deﬁne and use domain speciﬁc feature vectors on a low level and use this
information for a similarity based retrieval. Yet, mapping these to higher level semantics remains diﬃcult. This
research investigates a domain-independent way of automatized image categorization. A CBIR query language is
constructed to build query-like descriptors for each category to be learned. The proposed learning algorithm is based
on decision-trees. The resulting descriptors are aimed to be understandable and modiﬁable by expert users. A casestudy is presented to support these claims.
⃝
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.

Keywords: content-based image retrieval, categorization, query language, decision tree
1. Introduction
Automatic image classiﬁcation always involves some kind of machine learning. Common techniques are Artiﬁcial
Neuronal Networks (ANN) [1], Support Vector Machines (SVM) [2, 3, 4] and Self Organizing Feature Maps (SOFM)
[5] or Decision Trees (DT) [6].
All these techniques are used to optimize certain model parameters in order to satisfy a training set with respect to
certain classes as good as possible. Based on the resulting descriptors, it is assumed, that newly introduced samples
can be classiﬁed correctly. Objective of this research is the attempt to build up descriptors on the basis of a multifeature query language automatically.
2. Background
In order to learn concepts in machine learning it is essential to provide a base of true statements. That information
can either be prepared for this purpose or has to be derived from the context. Only that way, essential information is
fed into the learning algorithm to optimize the descriptors [7].
Email address: r.p.pein@hud.ac.uk, j.lu@hud.ac.uk (Raoul Pascal Pein, Joan Lu)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.287

2540

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547
R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9

2

In the ﬁeld of image recognition, several case speciﬁc problems arise. A major problem is to ﬁnd suitable samples representing a certain object. For optimal learning, the object should be totally isolated from the background.
Otherwise, the algorithm will learn to recognize irrelevant noise instead of the relevant object [8].
Further, most images do contain more than one object. It is important to distinguish them and inform the learning
algorithm which region represents which object. Overlaps, irregular shapes and high-contrast patterns increase the
diﬃculty of automatically clustering images.
It is also important to keep in mind that multiple samples of a single concept could diﬀer signiﬁcantly from each
other. Using low-level descriptors and simply calculating just one average or centroid value is not suﬃcient in many
cases. Then a “divide-and-conquer” approach for detailed modeling is required. Wu and Nevatia [9] proposed an
iterative algorithm to subsequently add speciﬁc classiﬁers to a classiﬁcation tree. If the category to be learned cannot
be matched by a simple classiﬁer the training samples are being split into smaller clusters that are more speciﬁc.
According to Schapire [7], classiﬁcation tasks can be successful when using multiple “weak learning” algorithms.
An important requirement for each algorithm is the ability of having at least a small classiﬁcation advantage over
random guessing. A machine learning algorithm must assume that high-level semantics can be described by a set of
low-level features in order to bridge the “sematic gap” [10, 11].
One existing learning approach is the Cluster Boosted Tree by Wu and Nevatia [9], which is based on the AdaBoost
algorithm by Freund and Schapire [12]. In their algorithm, the training set is clustered according to the features before
extracting the most suitable features for each sub cluster. A drawback of their approach is, that complex features may
not be directly suitable for clustering, as the similarity measure is not necessarily identical to a multi-dimensional
distance.
Samples of a semantic set are very likely to have diﬀerent low-level features. But according to the theory of feature
vector based retrieval, series of samples are expected to be organized in clusters. These clusters are bounded by the
features used. Often, a speciﬁc feature can be further optimized by removing irrelevant information [13], making it
more expressive. A high level descriptor could merge multiple features into a single semantic concept. According
to Zhang and Izquierdo [14], this usually cannot be done by simply merging low-level descriptors directly, because
many low-level features show a non-linear behaviour. Recent work in the area of multiple kernel learning indicated
that it can indeed lead to very promising results [15, 16, 17].
3. Methods Employed
The key methods used in this paper are extracted feature vectors to describe similarities, decision trees to split a
given image repository into relevant and irrelevant documents and a query language to describe both within a single
descriptor.
It should not be the task of a single low-level feature to capture all possible samples and merge them into a single
“all-knowing” descriptor. Thus, the learned query itself would be a set of (boolean) combined low-level characteristics
extracted from a training set. The algorithm suggested below exploits the results of Content-Based Image Retrieval
(CBIR) queries to build a classiﬁer.
The learning algorithm requires at least a training and an optional evaluation set. For each image of a concept, the
suitability as a representative query term or “centroid” is checked. This is determined by the ability of containing many
other related images in the query result set. In other words, precision and recall should be as high as possible. One
possible metric to capture both precision π and recall ρ is the F-Measure or the eﬀectivity measure by van Rijsbergen
[18].
The best describing retrieval terms can then be further optimized by calculating a suitable similarity threshold.
These optimized terms are then combined in a single query by the boolean “OR”. If the low-level features applied are
suitable to capture the relevant characteristics for the learned concept, the resulting query should be able to return a
set of concept related images with only a few errors.
In some cases, a set of unrelated images may ﬁnd its way into the results. This eﬀect could be reduced by adding
representative “AND” or “NOT” terms to a query. Such a term should not be closely related to an existing feature in
the positive query part. Otherwise it might cover too many true positives.
The ﬁnal classiﬁcation query then needs to be tested against the evaluation set. The target is to ﬁnd the optimal
balance between maximum query length and retrieval accuracy. The amount of terms has inﬂuence on the retrieval

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547
R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9

2541
3

speed and the risk of overﬁtting. The query can then be used to calculate the similarity of any unknown input image
to the query-related class, which can also be interpreted as the probability of belonging to a particular class.
3.1. Deﬁnitions
The proposed learning algorithm uses several sets of images. A repository contains a set of images I. In order to
start a training session, the repository is split twice. The concept to be learned is represented by the set of relevant
images R. The remaining images N are considered to be non-relevant. For later evaluation, R can again be split into
two disjunctive sets: the training set T and the evaluation set E. The describing features are contained in the feature
set F. The following conditions apply to these sets: T ∪ E = R; T ∩ E = {}; R ∪ N = I; R ∩ N = {}.
3.2. Interpretation as Decision Tree
Building a classiﬁcation query can be interpreted as the process of constructing a decision tree. Each binary tree
represents the likelihood that an image belongs to the learned concept.
Nodes. Each node ν in the tree contains a set of retrieved images ι ⊆ I, which are either a representative of the
concept or not. During training, the precision π(ν) and recall ρ(ν) of each node can be calculated, as the relevant
training images T are known.
π(ν) =
ρ(ν) =

|T ∩ ι|
|ι|

|T ∩ ι|
|T |

(1)
(2)

π(ν) is a measure for the usefulness of a single node. If π(ν) = 1 it follows ι(ν) ⊆ R and if π(ν) = 1 it follows
ι(ν) ⊆ I. These nodes can be labelled as positive ν+ or negative ν− example. In reality, the precision is likely to
be somewhere between these two extremes, which indicates a classiﬁcation uncertainty ν? . The recall ρ(ν) is less
important for each single node, as other nodes may contain other relevant images.
Node Splitting. Each node which cannot deﬁnitely be classiﬁed as positive or negative example should be examined
in more detail. A split criterion can be deﬁned by a CBIR-query q over the still unclassiﬁed ι(ν parent ) images. The
query generates a result set r(q) and the remaining data r(q)−1 = (ι(νparent)) \ r(q). These two sets are representing
the content of the two child nodes. The aim is to push the precision of each node either towards 1 or 0 . The “left”
nodes should move towards 1 and the “right” ones towards 0. The splitting can be recursevely performed until one of
the following situations occurs:
1. The node contains no more images
2. The precision π of the node either reached the upper or lower boundary
3. Generating new splitting queries is not possible
These situations are “hard boundaries”, where further splitting is no more possible or required. For practical use,
these boundaries may be unrealistic and cause an extremely long or even inﬁnite processing time. Thus, a set of
arbitrary thresholds should be deﬁned, e.g.:
1.
2.
3.
4.
5.
6.

Maximum query size
Maximum tree depth
Minimum information gain on a split
Upper threshold of π to ﬂag a node as positive: ν+
Lower threshold of π to ﬂag a node as negative: ν−
Lower threshold of similarity s to create split query q

After termination, the tree should have all uncertainties resolved in the leaf nodes. The “left” leaves are considered
to contain positive examples and the “right” leaves negative examples for the learned concept.

2542

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547
R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9

4

Root Node. The root node νroot contains all images used in the learning process, both relevant T and irrelevant N
ones. For this node, precision is π(νroot ) = |T|I|∩I| and recall is ρ(νroot ) = |T|T∩I|
| = 1.
Null Query. The learning algorithm starts with an empty query qnull . By deﬁnition, this query is undeﬁned and always
returns an empty result set r(qnull ) = {}. Splitting by qnull generates an empty child node νqnull and another node ν¬qnull
containing the same images as its parent. It follows ν = νqnull . The root node can be interpreted as the “right” child of
a parent node. The null query is also an example for an inﬁnite recursion that can occur during learning.
3.3. Learning Algorithm
Algorithm 1 f indClassi f icationQuery(T, N)
1: all A ← T
2: result ← {}
3: repeat
4:
query q, quality, T ruePositives T P, FalsePositives FP ← f indBestQuery(T, N)
5:
if q = {} or size(T P) < minT ruePositives then
6:
return result
7:
end if
8:
q, quality, T P, FP ← addMustClauses(q, quality, T P)
9:
q, quality, T P, FP ← addMustNotClauses(q, quality, A, FP)
10:
result ← result ∪ q
11:
T ← T \ TP
12: until (size(T ) < minT ermS ize)OR(size(result) > maxQueryS ize)
13: return result
The suggested learning algorithm 1 tries to ﬁnd a good, but not necessarily optimal query for a given concept. A
concept is fed to the algorithm by providing a representative training set T and the negative set N. The resulting query
should return a result set with a very high precision and recall for the target concept.
The training set T is copied to the local set of all relevant images A. Based on the provided data, the algorithm
repeatedly tries to determine the best query for T and N. If the sub algorithm 2 is returning a query q and the true
positives T P size is above the threshold minT ruePositives, it is attempted to reﬁne it further. The corresponding
quality quality and the true and false positives T P and FP are used to search for MUST and MUST NOT clauses that
may extend q. The resulting q is then added as a SHOULD clause to the ﬁnal result and the successfully retrieved
T P is removed from T . This loop ends if the size of T reaches minT ermS ize or the result exceeds a previously set
maxQueryS ize. The conditions introduced in this algorithm are necessary to avoid overﬁtting.
The algorithm 2 attempts to ﬁnd the best atomic query q for the given T and N. This is done by generating all
possible stub queries q for each training image t ∈ T and each feature vector f ∈ F. The sorted retrieval results S
are then analyzed to ﬁnd the best similarity threshold. Starting with a size of 2 and ending with min(size(T ), size(S ))
(precision is expected to drop at bigger sizes), the result set size with the highest quality (e.g. F-Measure) is determined. The corresponding similarity value s for the lowest rank is then set as the threshold of the optimized query q.
Finally, the best query is returned.
3.4. Complexity
The proposed algorithm contains 2 main loops and at least one time consuming retrieval process. The execution
of the repeat-until loop can be controlled by many factors. In essence, every iteration adds a clause to the query and
further reﬁnes the result quality. For practical purposes, the amount of clauses should be limited to counter overﬁtting.
From a complexity point of view, this loop is independent from the size of the image repository I. Thus, the runtime
of this loop is considered to be constant (O(1)).
The crucial runtime is within the for loop. It iterates through all permutations of training images and features,
raising the complexity with both the amount of training images nT and features nF involved. In the worst case, the
complexity of this loop is O(nT ∗ nF ). Realistically, the amount of features used is limited and the training set should

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547
R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9

2543
5

Algorithm 2 f indBestQuery(T, N)
1: qresult ← {}, qualityresult ← 0.0, T Presult ← {}, FPresult ← {}
2: for all t ∈ T , f ∈ F do
3:
q ← f (t)
4:
S ← getResults(q, T ∪ N)
5:
s, quality, T P, FP ← calculateT hreshold(S , T, N)
6:
q.threshold = s
7:
if quality > qualityresult then
8:
qresult , qualityresult , T Presult , FPresult ← q, quality, T P, FP
9:
end if
10: end for
11: return qresult , qualityresult , T Presult , FPresult
be small. The most crucial factor in the training algorithm is the getResults() function, which performs the CBIR
queries. If this function does not use an index, the execution time is linear, as every single image in the repository
needs to be compared to the query. The index-less complexity would be O(nI ), but in some cases, the index could
guarantee a complexity of O(1).
The optimization functions addMustClauses() and addMustNotClauses() both contain a restricted version of the
learning algorithm. They are only called for already found base clauses. Thus, in the worst case, their complexity is
the same, but usually a small subset of images needs to be checked. By adding sophisticated caching mechanisms and
reuse of previous result sets, the execution time could be reduced signiﬁcantly.
4. Case Study
In order to evaluate the theory above, the suggested algorithm has been implemented. The software is based on
the existing tools developed earlier [19, 20].
4.1. Preparation & Implementation
The image collection used is the ETH-80 collection from the ETH CogVis project [21, 22]. It contains in total 3280
images of 8 diﬀerent annotated object categories. Each category contains 10 diﬀerent objects and have an equal size
of 410 images. Each object is available from several angles and is located in front of a blue background. Additional
data about the object boundaries are also available from black and white mapping ﬁles. This collection is suﬃcient
to test the already available feature vector modules without the additional need of segmentation algorithms. Further
advantages of using this image set are:
1. Each image represents a single object/concept
2. The object/concept to be learned ﬁlls most of the image area, is centered and completely visible
3. The ETH-80 collection provides additional mask ﬁles which deﬁne the relevant segment
In this case study, a set of relatively simple feature vectors is used, which are described in [20]. Both the RGBMean (RGB) and the Histogram (H) module are also extended and only use the relevant pixels deﬁned by yhe provided
map ﬁles. An additional module is only analyzing the central quarter of the original image to extract the histogram,
the Centre Histogram (CH). Both Spatial Histogram (SH) and Wavelet (W) remain unchanged. They are expected
to be suﬃcient for evaluating the learning algorithm, as they usually return better results than random guessing (see.
[7]). More advanced feature vectors are currently not available for testing, but could easily be added to the system in
the future, as this learning approach allows for modular extensions.
Prior to running the learning algorithm, all images were imported into the CBIR repository. At that stage, the time
consuming feature extraction takes part once. The remaining computation then relies on these stored feature vectors.
To eliminate the inﬂuence of non-optimal indexing structures, a full scan over all existing feature vectors is performed
for each single retrieval step. For each of the eight categories, the given 410 images are used as training set. The
algorithm is limited to a maximum of 20 SHOULD clauses and at most 3 additional MUST/MUST NOT clauses.

2544

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547
6

R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9




 




 








 


 





 
 

 






 
 








Figure 1: Decision Tree for concept ”cow” (most relevant clauses)

For each node split, the decision query term is speciﬁed.
4.2. Results
Some categories, such as “tomato”, “pear” and “apple” can successfully be categorized with a short query, constisting of 3 to 10 clauses. Adding more clauses would not have had any noteworthy eﬀect on the results, e.g. only
adding a single image. The most complex queries were generated for the animals “cow”, “horse” and “dog”.
Figure 1 shows the decision tree for the ﬁrst half of the query for the learned concept “cow”. The full generated
descriptor for the concept “cow”, deﬁned in the query language, is:
(W:1750@0.823 -CH:2908@0.988)
SH:1665@0.857 W:2143@0.804
(W:1989@0.824 -CH:4859@0.991)
RGB:2399@0.999 W:1811@0.824
SH:1816@0.886 W:1662@0.817
W:1980@0.857
W:2151@0.799

(SH:2150@0.863 -CH:1560@0.970)
(W:2084@0.743 -RGB:2738@0.912)
SH:2302@0.773
W:1839@0.834
SH:1670@0.926
W:1985@0.799
SH:1922@0.866
W:1827@0.844
RGB:2055@0.999 SH:1657@0.920

In comparison, the descriptor for the concept “tomato” only requires 3 clauses:
CH:5793@0.988527 CH:6031@0.999211 SH:6377@0.952435
The detailed Precision/Recall and F-Score values for four “cow” related queries are shown in ﬁg. 2. The x-axis
of the diagrams are normalized to the size of each category, i.e. 410 images. Lines ending earlier indicate result sets
smaller than the expected 410 images. Figure 2(a) represents the results for the single best clause, ﬁg. 2(b) consists
of all SHOULD clauses and ﬁg. 2(c) is based on the retrieved query. Figure 2(d) is based on an attempt to manually
improve the calculated descriptor. The similarity thresholds for the ﬁrst two clauses have been lowered by 10% in
order to increase the result size and implicitly the recall rate.
4.3. Analysis & Discussion
The extracted descriptors for each category show diﬀerent characteristics (table 1). The categories “tomato”,
“pear” and “apple” can be described with short queries. The “apple” and “tomato” queries have an emphasis on

2545

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547

7

























R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9
























































	



	





(a) Single Clause

	



















	


(b) 20 SHOULD Clauses



























	

	










































	



	























	

	


(c) 20 SHOULD Clauses with MUST NOT



	



	


(d) Most Relevant Clauses with Tolerance

Figure 2: Precision, Recall and Quality (F-Score) for “cow” related queries

2546

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547
8

R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9
Table 1: Query Composition

Category
apple
car
cow
cup
dog
horse
pear
tomato

SHOULD
clauses
10
20
20
15
20
20
8
3

MUST NOT
clauses
1
0
4
3
3
4
0
0

RGB

CH

SH

W

8
0
3
1
0
2
0
0

2
0
3
5
6
9
0
2

1
15
7
4
11
2
3
1

0
5
11
8
6
11
5
0

Table 2: Query Quality Parameters

ﬁg. 2(a)
ﬁg. 2(b)
ﬁg. 2(c)
ﬁg. 2(d)

Precision
0.341463
0.843137
0.875000
0.739024

Recall
0.341463
0.734146
0.682927
0.739024

F-Score
0.341463
0.838350
0.865636
0.739024

simple colour based features. The samples in the ETH-80 collection have relatively uniform colours (i.e. red and
green), distinct from the other categories. The “pear” has similar colours, but it’s unique shape seems to be even more
distinctive, whereas the descriptor is composed of the spatially aware features. Similarly, the “cup” descriptor takes
advantage of the unique handle shape, but also the distincive plain white and brown colours can be used. The “car”
seems to be much more challenging, as the colours are diﬀerent for each sample, but the relatively uniform shape
and size clearly favourizes the spatially aware features. The most complex shapes involved are the animals. It varies
depending on the point of view, and even the colours change for each single sample. Further, the shapes of diﬀerent
animals are very similar from the same angle, making it even more diﬃcult to ﬁnd a suitable feature.
Being one of the most diﬃcult categories in the collection (24 clauses in total table 1), the “cow” queries are
examined in more detail (table 2). The precision for the best single clause (ﬁg. 2(a)) is almost constantly dropping
towards 0.35 for a result set of the size 410. This can be explained by the high diversity of relevant samples and a large
number of similar images from other categories. Using 20 diﬀerent clauses for retrieval (ﬁg. 2(b)) results in a very
high precision in the beginning. This eﬀect is caused by the query images that usually achieve the highest possible
similarity of 1.0 for at least one sub query. The precision then drops to 0.9, but the recall keeps climbing until the
threshold is cutting oﬀ the less relevant images at a recall of 0.734146. A similar eﬀect can be seen after introducing
MUST NOT clauses (ﬁg. 2(c)), where the ﬁnal precision is higher, but the achieved recall is lower.
To overcome the limited result set size, the thresholds for the most expressive clauses are lowered by 10%. The
ﬁnal recall is the highest of all tests and can still increase with larger result sets. The last query appears to be the
most appropriate for CBIR applications, where several results can be displayed and quickly manually scanned. In this
scenario, a relatively constantly increasing recall rate is considered more important than having an extremely high
precision for only the few highest ranks.
The learning algorithm is based on decision trees to ﬁnd a suitable set of query terms, describing a concept as
good as possible. As with most learning algorithms, the problems of over-ﬁtting and unpredictable run times have to
be addressed. Thus, suitable heuristics for this learning scenario need to be developed.
5. Conclusion and Future Work
The proposed learning algorithm is independent from use-case speciﬁc features. These can be either generic
or arbitrarily complex feature vectors, speciﬁcally ﬁtting a task. This ﬂexibility also allows for choosing the most
suitable similarity measures. Further, the system is capable of learning multiple disjunctive representations of the same
concept. Each one can be covered by an independent cluster. All these clusters are logically joined in the semantic

R.P. Pein, J. Lu / Procedia Computer Science 1 (2012) 2539–2547
R. P. Pein, J. Lu / Procedia Computer Science 00 (2010) 1–9

2547
9

concept. The prototype implementation for evaluation shows ﬁrst promising results for CBIR centric classiﬁcation
tasks.
Based on these results, suitable learning parameters can be found and heuristics for signiﬁcant speed improvements
can be developed. The use of more query language parameters will be required in order to achieve better recall rates
and to decrease the risk overﬁttig. A boosting parameter depending on the expressiveness of each clause will be used
in future investigations. Further, other feature vectors and types of media, such as video and audio, are considered for
categorization.
6. Acknowledgements
We would like to thank Wolfgang Renz from the Hamburg University of Applied Sciences, Germany for helpful
discussions and valuable input.
References
[1] N. Doulamis, A. Doulamis, S. Kollias, A neural network approach to interactive content-based retrieval of video databases, Image Processing,
1999. ICIP 99. Proceedings. 1999 International Conference on 2 (1999) 116–120. doi:10.1109/ICIP.1999.822866.
[2] J. Weston, S. Mukherjee, O. Chapelle, M. Pontil, T. Poggio, V. Vapnik, Feature Selection for SVMs, in: NIPS, 2000, pp. 668–674.
URL citeseer.ist.psu.edu/article/weston01feature.html
[3] X. S. Zhou, T. S. Huang, Comparing discriminating transformations and SVM for learning during multimedia retrieval, in: MULTIMEDIA ’01: Proceedings of the ninth ACM international conference on Multimedia, ACM, New York, NY, USA, 2001, pp. 137–146.
doi:http://doi.acm.org/10.1145/500141.500163.
[4] C.-H. Hoi, M. Lyu, Group-based relevance feedback with support vector machine ensembles, Pattern Recognition, 2004. ICPR 2004. Proceedings of the 17th International Conference on 3 (2004) 874–877. doi:10.1109/ICPR.2004.1334667.
[5] K. Chandramouli, E. Izquierdo, Image Classiﬁcation Using Self Organizing Feature Maps and Particle Swarm Optimization, in: 7th International Workshop on Image Analysis for Multimedia Interactive Services (WIAMIS ’06), 2006, pp. 313–316.
[6] R. E. Schapire, Y. Singer, Improved boosting algorithms using conﬁdence-rated predictions, Machine Learning 37 (3) (1999) 297–336.
[7] R. E. Schapire, The Strength of Weak Learnability, Machine Learning 5 (1990) 197–227.
[8] J. Quinonero-Candela, I. Dagan, B. Magnini, F. d’Alch Buc (Eds.), Machine Learning Challenges. Evaluating Predictive Uncertainty, Visual
Object Classiﬁcation, and Recognising Textual Entailment, Vol. 3944/2006 of Lecture Notes in Computer Science, Springer-Verlag, 2006,
Ch. The 2005 PASCAL Visual Object Classes Challenge, pp. 117–176. doi:10.1007/11736790.
URL http://eprints.pascal-network.org/archive/00001212/01/voc11.uk.pdf
[9] B. Wu, R. Nevatia, Cluster boosted tree classiﬁer for multi-view, multi-pose object detection, in: IEEE 11th International Conference on
Computer Vision (ICCV), 2007, pp. 1–8.
[10] A. W. Smeulders, M. Worring, S. Santini, A. Gupta, R. Jain, Content-Based Image Retrieval at the End of the Early Years, IEEE Transactions
on Pattern Analysis and Machine Intelligence 22 (12) (2000) 1349–1380. doi:http://doi.ieeecomputersociety.org/10.1109/34.895972.
[11] Y. Jin, L. Khan, L. Wang, M. Awad, Image annotations by combining multiple evidence & wordNet, in: MULTIMEDIA ’05:
Proceedings of the 13th annual ACM international conference on Multimedia, ACM, New York, NY, USA, 2005, pp. 706–715.
doi:http://doi.acm.org/10.1145/1101149.1101305.
[12] Y. Freund, R. E. Schapire, A decision-theoretic generalization of on-line learning and an application to boosting, Journal of Computer and
System Sciences 55 (1997) 119–139.
[13] P. Praks, E. Izquierdo, R. Kucera, The sparse image representation for automated image retrieval, in: IEEE International Conference on Image
Processing, 2008, pp. 25–28.
[14] Q. Zhang, E. Izquierdo, A new approach to image retrieval in a multi-feature space, in: International Workshop on Image Analysis for
Multimedia Interactive Services, 2006.
[15] A. Vedaldi, V. Gulshan, M. Varma, A. Zisserman, Multiple kernels for object detection, in: International Conference on Computer Vision,
2009.
[16] P. Schnitzspan, M. Fritz, S. Roth, B. Schiele, Discriminative Structure Learning of Hierarchical Representations for Object Detection, Computer Vision and Pattern Recognition, IEEE Computer Society Conference on 0 (2009) 2238–2245.
doi:http://doi.ieeecomputersociety.org/10.1109/CVPRW.2009.5206544.
[17] U. Blanke, B. Schiele, M. Kreil, P. Lukowicz, B. Sick, T. Gruber, All for one or one for all? – combining heterogeneous features for activity
spotting, in: 7th IEEE PerCom Workshop on Context Modeling and Reasoning (CoMoRea), Mannheim, Germany, 2010.
[18] C. van Rijsbergen, C. van Rijsbergen, Butterworths, London, 1979.
[19] R. P. Pein, Z. Lu, A Flexible Image Retrieval Framework, in: Y. Shi, G. D. van Albada, J. Dongarra, P. M. A. Sloot (Eds.), International
Conference on Computational Science (3), Vol. 4489 of Lecture Notes in Computer Science, Springer, 2007, pp. 754–761. doi:10.1007/9783-540-72588-6 124.
[20] R. P. Pein, J. Lu, W. Renz, An Extensible Query Language for Content Based Image Retrieval, The Open Information Science Journal of
Computer Assisted Learning (2008) 179–184Bentham Open, Accepted for publication. doi:10.1109/CIT.2008.4594670.
[21] B. Leibe, B. Schiele, Analyzing Appearance and Contour Based Methods for Object Categorization, in: International Conference on Computer Vision and Pattern Recognition (CVPR’03), 2003, pp. 409–415.
[22] B. Leibe, A. Leonardis, B. Schiele, Combined object categorization and segmentation with an implicit shape model, in: Proceedings of the
Workshop on Statistical Learning in Computer Vision, Prague, Czech Republic, 2004, pp. 17–32.

