Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–8
1027–1034

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Using the reconﬁgurable massively parallel architecture
COPACOBANA 5000 for applications in bioinformatics
Lars Wienbrandta,1 , Stefan Baumgartb , Jost Bisselb , Carol May Yen Yeoa , Manfred Schimmlera
a Department

of Computer Science, Christian-Albrechts-University of Kiel, Hermann-Rodewald-Str. 3, 24118 Kiel, Germany
b SciEngines GmbH, Fraunhoferstr. 13, 24118 Kiel, Germany

Abstract
Currently several computational problems require high processing power to handle huge amounts of data, although underlying core algorithms appear to be rather simple. Especially in the area of bioinformatics, algorithms
implemented in PCs do not utilize all hardware functionalities provided by standard CPUs. As the demand for eﬃcient
utilization and speed up increases, this leads to a boost in the trend of implementing dedicated hardware. Hardware
implementations can be done very fast and are cost eﬀective on reconﬁgurable devices such as FPGAs. With 128 lowcost FPGAs residing on the COPACOBANA 5000 and in combination with a high-throughput systolic bus system, this
machine therefore provides a dynamic solution for massively parallel computations with reconﬁgurable capabilities.
This paper describes the advantages of this architecture based on the implementation of eﬃcient solutions designed
for two well-known algorithmic problems in bioinformatics: Smith-Waterman Alignment and DNA Motif Finding.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords:
Parallel Processing, FPGA, Reconﬁgurable Hardware, Energy Eﬃciency, High Throughput, DNA Motif Search,
Smith-Waterman Alignment

1. Introduction
Algorithms in bioinformatics most of the time appear to be rather simple in their structure, such as the famous
Smith-Waterman alignment [1] which forms the basis for heuristic algorithms. An example of such heuristic algorithms is BLAST [2], whereby the matrix entries of integer values are calculated without much complexity. Other
algorithms, e.g. in terms of DNA motif ﬁnding, such as Gibb’s Sampling [3], PROJECTION [4] or the widely accepted MEME [5], use probability values, which are often represented as ﬂoating points. These values are not as easy
to handle as integer values, but in general, all mentioned algorithms acting on pure DNA data have another advantage:
Since DNA strings only consist of characters of the alphabet L = {A, C, G, T}, the input data can be encoded in portions
of two bits.
Email addresses: lwi@informatik.uni-kiel.de (Lars Wienbrandt), stefanbaumgart@sciengines.com (Stefan Baumgart),
jostbissel@sciengines.com (Jost Bissel), cmy@informatik.uni-kiel.de (Carol May Yen Yeo), masch@informatik.uni-kiel.de
(Manfred Schimmler)
1 Corresponding author

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.114

1028

L. Wienbrandt
et al. / Procedia Computer Science 1 (2012) 1027–1034
L. Wienbrandt et al. / Procedia Computer Science 00 (2010) 1–8

2

Figure 1: COPACOBANA 5000 (also known as RIVYERA)

In general, most of such algorithms are highly computationally intensive by nature because they possess at least
quadratic complexity while handling huge amounts of data from several mega- up to giga- or even terabytes. Since
Moore’s Law cannot cope with increasing requirements of data handling in the area of bioinformatics, the only solution is to harness massive parallelization. The easiest way of realizing a massively parallel application is the implementation on a PC cluster. However, this solution has deﬁnite disadvantages. Firstly, hardware resources of the
processing units (such as CPUs) cannot be fully utilized due to ﬁxed instruction sets. Even successful accelerating
implementations of the previously mentioned MEME-algorithm using e.g. graphics hardware (GPUs) [6] have this
disadvantage. Secondly, the costs to acquire a large number of PCs can be immense. Moreover, additional costs for
room to allocate the cluster, connections, maintenance and possible installation of a temperature control unit have to
be evaluated. Even energy costs have to be considered nowadays.
With the emergence of the new architecture COPACOBANA 5000, these problems were reduced [7]. This paper
aims to describe the capabilities of this machine that can cater to the needs of parallel applications. The latter, which
can be described as a hardware problem, e.g. with the help of a hardware description language like VHDL, are generally suitable to implement on COPACOBANA 5000. This is because hardware implementations are more ﬂexible as
compared to CPUs as they posses ﬁxed instruction sets. In other words, the hardware is designed to speciﬁcally cater
for the algorithm to fully utilize the existing resources. COPACOBANA 5000 provides 128 reconﬁgurable Xilinx
Spartan-3 5000 FPGAs, connected in a high throughput systolic bus system. Each FPGA is supplemented with additional 32MB of SDRAM and the entire machine is controlled by an internal PC with a quad-core CPU, 4GB DDR-II
RAM and up to 8TB of hard disk space. This provides ample resources to handle most problems in bioinformatics.
Due to the ability of reconﬁguration, the design process is made easier.
In the following, section 2 describes the structure of the COPACOBANA 5000. Section 3 illustrates examples of
the implementation of bioinformatics applications on this architecture, whereby a solution for the Smith-Waterman
algorithm and the initial implemented BMA algorithm [8, 9], speciﬁcally developed for a hardware implementation,
adapted to this architecture is described.
2. COPACOBANA 5000
2.1. History of COPACOBANA
Initially introduced in 2006, the Cost Optimzed PArallel COdeBreaker and ANAlyzer, COPACOBANA, has
evolved to a family of parallel FPGA-based high performance computers. It was originally developed for applications in cryptanalysis. One very successful example is the breaking of DES ciphers in less than one week [10], but
also A5/1 [11] and other cryptographic techniques such as AES or RSA were attacked [12]. The ﬁrst COPACOBANA
machine contains 120 Xilinx Spartan-3 1000 FPGAs, which are connected in a single-master-multiple-slave bus system. This system is designed for moderate data throughput since cryptanalytical applications generally do not require
high performance bus systems. The adaption of applications in the area of bioinformatics proved to be promising in
the beginning – simple algorithms, such as BMA for DNA motif ﬁnding, were easily implementable in hardware. The
speedup gained was magniﬁcent. However, after further analyzation of the problem, it turns out that the total runtime
is still not very applicable. Since most algorithms in bioinformatics have a high dependency on huge amounts of
genome data, the bus speed of the original COPACOBANA is no longer suﬃcient. Additionally, the need for memory
increases, e.g. in the area of DNA fragment assembly raw data in amounts of several hundred gigabytes. Therefore, a

L. Wienbrandt
et al. / Procedia Computer Science 1 (2012) 1027–1034
L. Wienbrandt et al. / Procedia Computer Science 00 (2010) 1–8

slot 1

PCIe

FPGA

eth0
Controller-Card

slot 2
b
a
c
k
p
l
a
n
e
slot 17

FPGA
1

FPGA
8
FPGA-Card

FPGA
1

1029
3

FPGA
8

PCIe

PCIe

eth1

Standard PC Mainboard

CPU 1

CPU n

SATA
HD 1

SATA
HD n

FPGA-Card

slot 18

UPLINK

FPGA
Controller-Card
UPLINK offers full backplane bandwidth to another machine

Figure 2: COPACOBANA 5000 machine schema

redesign of the original COPACOBANA was required in order to cater for broader applications besides bioinformatics
and cryptanalysis. The redesign, introduced as COPACOBANA 5000 [7], is commercially available as RIVYERA
(ReconfIgure Versatilely Your Eﬃcient Raw Architecture, ﬁg. 1).
2.2. COPACOBANA 5000 Architecture
The COPACOBANA 5000 architecture consists of a backplane with 18 slots, FPGA cards, enclosure with power
supply and an internal PC. Every slot is identical and a typical setup is equipped with 16 FPGA cards. The FPGA
machine can be connected via multiple full bandwidth PCI-Express controllers to an integrated oﬀ-the-shelf standard
PC. Using a standard PC main board, various features can be easily attached to the FPGA machine, such as ethernet
ports, ﬁrewire or ﬁbre channel. Each of the FPGA cards carries eight high performance FPGAs interconnected in a
one dimensional array, also known as a systolic chain. Additional components are provided to support the mentioned
functional units such as a 1.5kW main power supply unit, three high-performance fans and a 19-inch rack of three
height units (3HE) for the housing. Figure 2 shows the general machine architecture.
2.2.1. General Improvements
COPACOBANA 5000 increases the amount of provided logical elements for the user by a factor of 4.5 times as
compared to the original COPACOBANA 1000. Xilinx Spartan-3 5000 FPGAs oﬀer more block RAM as well as
more logical resources. The FPGA interconnection and the design of the boards have been generalized. Figure 3
shows the basic architecture of a single FPGA of the system. A mixture of FPGA cards with diﬀerent vendors is
possible. This allows to combine the beneﬁts of certain FPGAs equipped with DSPs with those providing primarily
logical resources. The setup and sequence of FPGA cards can be selected by the user to allow the best match with the
application needs.
2.2.2. Memory
In order to avoid bottlenecks during data access, each FPGA oﬀers directly attached 32MB of DRAM. A set of
memory controllers with diﬀerent size and features is available through the API. An additional memory expansion
slot allows access up to 32GB of FLASH memory on a single SDHC memory card. For future expansion, the interface
provided is compatible to the upcoming SDXC standard. A small I/O Expansion port enables additional data transfer
providing bi-directional independent diﬀerential lanes.

1030

L. Wienbrandt
et al. / Procedia Computer Science 1 (2012) 1027–1034
L. Wienbrandt et al. / Procedia Computer Science 00 (2010) 1–8

4



	

   #

$"  $  #!


 

	






 !



## #

Figure 3: Single FPGA and Connection Schema

2.2.3. The Standard PC
The internal standard PC allows storage extensive algorithms to rely on up to 8TB of SATA connected hard disk
drives. The storage can be accessed with controller cards interfacing the PC via PCI-Express. Nevertheless, the
integrated PC can be utilized to provide processing power to parts of the algorithm which are not likely to be speeded
up using FPGAs. Furthermore, it allows users to incorporate the beneﬁts of FPGAs with the opportunities of GPU
based processing by combining FPGA processing power with GPUs and CPUs. Using PCI-Express as standard
interface Direct Memory Access (DMA) allows data ﬂow between GPU and FPGAs without additional coordination
of the CPU and vice versa.
2.2.4. The Systolic Bus System
COPACOBANA 5000 oﬀers a high-performance bus system. The interconnection between the individual FPGAs
and between the FPGA-cards is organized as a one dimensional array or systolic chain. The general idea of a systolic
chain is to provide fast point-to-point connections between every two neighbours. The speed of a bus system depends
on several directly dependent factors which have to be balanced carefully in a cost optimized system e.g. the length
and number of wires and the achievable clock speed and data throughput. On the one hand, a systolic like architecture
typically results in shorter wires achieving higher frequencies and therefore higher data throughput. On the other hand,
one of the typical problems is the latency of large chains and the usability. These problems have been eliminated by
using a bus architecture and routing scheme implemented in an API which has already been introduced in an earlier
paper [7] and are omitted here. The point-to-point interconnections consist of eight pairs of wires in each direction.
Each pair is driven by low voltage diﬀerential signalling (LVDS) with a speed of 250MHz, thus achieving a data-rate
of 2Gbit/s.
3. COPACOBANA 5000 in Bioinformatics
3.1. Smith-Waterman Alignment
Dealing with genomic sequences is one of the key topics in the area of bioinformatics. Due to the vast amount of
raw sequence data faced by scientists, it is indispensable for them to have computer-based assistence in selecting the
most interesting sequence candidates.
The alignment of nucleotide sequences deals with the problem of ﬁnding the best ﬁtting alignment of two nucleotide sequences against each other. Algorithms used to handle this problem may be classiﬁed as either heuristic
or non-heuristic. The heuristic alignment algorithms such as BLAST [2] have become common tools to search for
alignments since they are much faster than non-heuristic types. Although they produce a large amount of false results
and may not succeed in ﬁnding all the correct solutions, they outperform non-heuristic algorithms by far, in terms of
computing time and have therefore gained broad acceptance within the group of molecular biologists.

L. Wienbrandt
et al. / Procedia Computer Science 1 (2012) 1027–1034
L. Wienbrandt et al. / Procedia Computer Science 00 (2010) 1–8

     




























1031
5

     




































Figure 4: Example of Diagonal Evaluation of a Scoring Matrix

In recent years FPGA systems are used to accelerate all kinds of alignment algorithms and now it is able to cater
for non-heuristic types, such as Smith-Waterman [1]. In this section, it is demonstrated how COPACOBANA 5000
can be used for this purpose.
3.1.1. Smith-Waterman Algorithm
The Smith-Waterman [1] algorithm is capable to ﬁnd the best alignment of a sequence to another in a non-heuristic
manner. For convenience, the sequence that is searched for is called query sequence while the one that is searched in
is called database sequence. In order to ﬁnd the best of every possible alignment, a score is generated. These scores
are calculated by the simple scoring function:
⎧
⎪
0
⎪
⎪
⎪
⎪
⎪
H(i − 1, j) + GapPenalty
⎨
H(i, j) = max ⎪
⎪
⎪
H(i, j − 1) + GapPenalty
⎪
⎪
⎪
⎩ H(i − 1, j − 1) + Match/Mismatch

H is a matrix and the values for GapPenalty, Match and Mismatch can be user deﬁned. H is the so-called scoring
matrix. In a software system, the algorithm evaluates the entire scoring matrix and outputs the maximum of all
H(i, j). This mechanism is memory intensive since memory consumption raises quadratically – the matrix contains
n · m cells while n and m are the lengths of the query and database sequence respectively. Additionally, standard
processors encounter the problem that the four DNA bases A,C,G and T can be encoded using only two bits, which is
very ineﬃcient for 32- or even 64-bit architectures.
3.1.2. Implementation
For handling the memory limitations mentioned above, it is essential to know that in a biologist’s workﬂow, it is
very likely to align thousands of query sequences at a time based on the examination of the maximal scores of the
alignments. These scores are analyzed and the actual alignment of a very small selection of query sequences with the
highest scores may easily be computed again on a standard PC. Hence, it is not important to store the whole matrix,
but only the maximum and the values needed for computation. The output is simply the maximum cell value.
In terms of parallelization, the algorithm can easily be handled. Considering the scoring matrix, the top-down
axis can be viewed as the processing elements, the left-right axis as time intervals. Thus, every processing element
(PE) calculates one line, i.e it is responsible for exactly one character of the query sequence. Therefore, referencing
the value of the left neighbour is simply accessing its own value of the previous clock cycle. In this way, referencing
the value from the top or top-left neighbour means referencing the value of the preceding PE one or two clock cycles
before respectively. Additionally, the maximum value that has occurred so far is updated. With this parallelization
scheme, the algorithm processes the matrix diagonally with the database sequence streaming through the chain of
processing elements. Figure 4 shows two consecutive steps evaluating a scoring matrix.
3.1.3. Performance Results
Common FPGA implementations of the Smith-Waterman algorithm only use a single or a few FPGAs [13, 14].
Hence, they are either limited in the length of the query sequence or needed to reinitialize their chain of processing
elements. Implementing the Smith-Waterman algorithm on COPACOBANA 5000 oﬀers new ways for scaling opportunities. Now, there are 128 instead of one FPGA available. Additionally, in contrast to the restricted inter-process
communication ability of the original COPACOBANA, all FPGAs can communicate in a systolic manner. Thus, it is

1032

L. Wienbrandt
et al. / Procedia Computer Science 1 (2012) 1027–1034
L. Wienbrandt et al. / Procedia Computer Science 00 (2010) 1–8

6

Table 1: Smith-Waterman Performance on COPACOBANA 5000

COPACOBANA 5000

Cray XD-1

AMD Opteron (2.2GHz)

Runtime

0.1h

7.39h

75h

Speedup (vs. PC)

750

10.15

1

0.06kWh

2.7kWh

22.5kWh

Energy consumption

possible to simply align 128 small query sequences at the same time, or to align a query sequence that is 128 times the
former possible size before COPACOBANA 5000 was available. It is even able to mix diﬀerent query lengths while
processing them altogether in parallel.
Table 1 demonstrates the performance by the alignment of 3, 685 20-mers against the human genome, comparing
COPACOBANA 5000 to a standard PC (AMD Opteron at 2.2GHz) and a Cray XD1 using one FPGA [14].
3.2. DNA Motif Finding
DNA sequence motifs are often related to transcription factor binding sites (TFBS) which are needed by the
biological protein synthesis machinery to start the transcription of genes. Genes can be reduced to a sequence of base
characters from the alphabet L = {A, C, G, T}, hidden randomly in the entire sequence of the DNA strand. Proteins
binding on sites several bases before the genes have inﬂuence on their transcription. They can either emphasize or
suppress a transcription, and hence they are referred to as transcription factors.
TFBS are sites of short lengths whereby their sequences are unknown and unpredictable in advance. Since many
genes are transcribed in similar conditions, the only assumption made on such motifs is, that there are several similar
instances distributed over the entire genome sequence. Thus, the motif ﬁnding problem can be deﬁned as searching
for sequence patterns of short lengths occurring in several instances which appear similar, but not necessarily equal.
3.2.1. BMA Algorithm
The BMA algorithm [8] was originally developed to ﬁnd motif instances of ﬁxed short length (e.g. 12) while motif
instances are described as motif kernels. The design of BMA was speciﬁcally focussed on a hardware implementation.
Hence, these motif kernels are internally represented as Boolean matrices and its main operation is pattern matching.
BMA sets stricter restrictions to its motif instances as compared to other algorithms. Motif instances have either
preserved positions, i.e. exactly one character is allowed here, or semi-preserved positions, i.e. two diﬀerent characters
are allowed here. Figure 5 shows an example of a Boolean matrix with only one semi-preserved position – which
implies a motif kernel size of k = 2. The intention of BMA is to ﬁnd the potential motif instances by increasing the
motif kernel size k, i.e. creating semi-preserved from initially preserved positions, by analyzing the structure of the
input sequence.
To give an overview a short summary of the algorithm structure is stated as follows:
1. Let l be the desired motif size, k the desired motif kernel size (number of semi-preserved positions in motif
instances).
2. For every possible sequence of length l initialize a Boolean matrix.
3. Match every subsequences of length l of the input sequences against every Boolean matrix.
4. Count the exact matches which will be the score of the matrix. Also for every entry in the matrix, count those
subsequences which have exactly one mismatch in this particular position.
5. After analysing the whole input sequence, switch the matrix entry with the highest count from 0 to 1 (weaken
the matrix – let a preserved position become semi-preserved).
6. Repeat steps 2 to 5 for k times.
This algorithm has already been implemented for the COPACOBANA 1000 [9], hence the next sections give an
overview of the implementation and describe the steps which were needed for the adaption to the new architecture
COPACOBANA 5000.

1033
7

L. Wienbrandt
et al. / Procedia Computer Science 1 (2012) 1027–1034
L. Wienbrandt et al. / Procedia Computer Science 00 (2010) 1–8

A
C
G
T

0
0
1
0

1
1
0
0

1
0
0
0

0
0
1
0

0
1
0
0

0
0
0
1

=⇒ Motif kernel size k = 2, motif size l = 6:
Strings GAAGCT and GCAGCT are derived.

Figure 5: A Boolean matrix with one semi-preserved position.

3.2.2. Implementation and Optimization
The original solution for solving this problem on the original COPACOBANA is apparent. There are hardware
entities called search entities, designed for storing a Boolean matrix of ﬁxed size and the capability to perform pattern
matching of a two-bit encoded genetic string of the same length against this matrix. A perfect match triggers a counter
for the matrix score while the counters for the mismatching positions – the scoring matrix – are stored in the block
RAM of the FPGA. An additional control unit implements the interface to the COPACOBANA 1000 bus system. Its
tasks are to process commands for initialization, matrix update or result retrieval. Basically, this control unit receives
sections of the input sequence and routes them in substrings of the correct length to the search entities. The results are
pre-compared between the entities such that upon result retrieval, the best results are fetched ﬁrst.
Based on the current algorithm implemented on COPACOBANA 1000, there exists the capacity available for
further optimization of the original implementation with the incorporation of COPACOBANA 5000 hardware. Firstly,
the number of the search entities that can be accomodated in each FPGA is increased to a factor of four times more.
This is obvious due to the migration of the Spartan-3 5000 FPGA, which provides about four times more system logic
as compared to the previous FPGA. Secondly, the major factor that contributes to a huge reduction in computation
time lies in the revamp of the initialization procedure. In the previous design, each search entity is initialized to search
for one of the combination of all possible motif instances (i.e. 4l ). However, according to the original description of
the algorithm in [8], it is suﬃcient to take only the substrings of the input sequence for initialization. Given a small
genome ﬁle (e.g. 230, 000bp for Cowpox virus), this procedure saves over 98% of runtime on the original architecture
(ignoring the additional time needed for the new initialization routine).
With this optimized modiﬁcation and the incorporation of the faster data rate of the COPACOBANA 5000, huge
speedup factors are attainable. The following section portrays the performance results achievable in terms of price,
speedup and energy consumption in more details.
3.2.3. Performance Results
After the extrapolation of the results obtained in reference to [9] and recalculation of the optimized version of the
algorithm, Table 2 tabulates the computation times needed for two diﬀerent genome ﬁles tested on various hardware
platforms. The software implementation has been written in C++ and optimized for PC usage. As seen from the table,
for a small ﬁle, such as the Cowpox virus, the computation time is expedited by more than a factor of 10, 000 fold,
compared to a PC. For larger ﬁles, such as Bacillus subtilis, the speedup is even greater than 34, 000.

Table 2: Computation Time and Speedup of BMA Motif Search Algorithm (optimized version)

Target
Architecture
COPACOBANA
5000
COPACOBANA
1000
Xeon 5150
2.6GHz dual core
Pentium IV
2.8GHz

Cowpox virus (230kbp)
Speedup
Energy
Runtime
(vs. PC) consumption

Bacillus subtilis (5, 9Mbp)
Speedup
Energy
Runtime
(vs. PC) consumption

1.66s

10, 554

< 0.001kWh

17m

34, 380

0.425kWh

3m

97

0.03kWh

12h17m

793

7.37kWh

2h

2.43

0.3kWh

2.47

592.65kWh

4h52m

1

0.73kWh

1

1, 461.15kWh

3, 951h
(165 days)
9741h
(1.1 years)

1034

L. Wienbrandt
et al. / Procedia Computer Science 1 (2012) 1027–1034
L. Wienbrandt et al. / Procedia Computer Science 00 (2010) 1–8

8

Since the cost of energy has continually been on the rise, one important factor to consider is energy consumption.
Table 2 also illustrates the energy consumption using diﬀerent hardware platforms, calculated by measuring the power
consumption while running the algorithm, multiplied with the runtime. In other words, based on the table projection,
the COPACOBANA 5000 is able to search for more motifs present in a large genome ﬁle within a signiﬁcantly reduced
time and energy consumption.
4. Summary and Outlook
This paper has demonstrated that the concept of COPACOBANA 5000 has been successfully realized. Applications in the main topics of bioinformatics were implemented, each outperforming PC clusters by order of magnitudes
– in terms of runtime, and in terms of energy reduction. Moreover, these are just minute examples to indicate the
potential of the machine. Plenty of algorithms, including other areas besides bioinformatics, are capable to be implemented on COPACOBANA 5000, with each one obtaining a promising high speedup and reduced energy costs.
Further research will be done in optimizing the capabilities of the machine, e.g. ﬁne-tuning the protocol for the bus
system to gain even higher data throughput. In terms of applications for COPACOBANA 5000 the subsequent step is
to investigate another main problem in bioinformatics – DNA assembly. Assembly algorithms generally require large
processing power and the capability to handle huge amounts of raw data. Hence, COPACOBANA 5000 seems to be
adequate to face this task.
At the same time, the DNA motif search application is being optimized by developing a new algorithm that
improves runtime and the quality of results. In cryptanalysis, due to four times more logical gates available in the
Spartan-3 5000 FPGAs, the expected runtime for DES breaking can be reduced to about two days while breaking
A5/1 in realtime poses no further problems (referring to the stated runtimes in [10] and [11]).
Altogether, the reconﬁgurable COPACOBANA 5000 (s. ﬁg. 1) is capable to speedup processes in many areas,
such as up to 750-fold in terms of Smith-Waterman alignment or 34, 000-fold in terms of BMA motif search, while
at the same time reducing energy consumption. Hence, COPACOBANA 5000 has demonstrated its ability to cater to
the needs of massively parallelized algorithms in bioinformatics.
References
[1] T. F. Smith, M. S. Waterman, Identiﬁcation of common molecular subsequences, Journal of Molecular Biology 147 (1981) 195–197.
[2] S. F. Altschul, W. Gish, W. Miller, E. W. Myers, D. J. Lipman, Basic Local Alignment Search Tool, Journal of Molecular Biology 215 (3)
(1990) 403–410.
[3] C. E. Lawrence, S. F. Altschul, M. S. Boguski, J. S. Liu, A. F. Neuwald, J. C. Wootton, Detecting Subtle Sequence Signals: A Gibbs Sampling
Strategy for Multiple Alignment, Science, New Series 262 (5131) (1993) 208–214.
[4] J. Buhler, M. Tompa, Finding Motifs Using Random Projections, Journal of Computational Biology 9 (2) (2002) 225–242.
[5] T. L. Bailey, C. Elkan, Unsupervised Learning of Multiple Motifs in Biopolymers Using Expectation Maximization, in: Machine Learning,
1993, pp. 51–80.
[6] Y. Liu, B. Schmidt, W. Liu, D. L. Maskell, CUDA–MEME: Accelerating motif discovery in biological sequences using CUDA-enabled
graphics processing units, Pattern Recognition Letters in press. doi:10.1016/j.patrec.2009.10.009.
[7] G. Pfeiﬀer, S. Baumgart, J. Schr¨oder, M. Schimmler, A Massively Parallel Architecture for Bioinformatics, in: ICCS2009, Lecture Notes in
Computer Science, Vol. 5544, Springer, 2009, pp. 994–1003.
[8] J. Schr¨oder, M. Schimmler, K. Tischer, H. Schr¨oder, BMA - Boolean Matrices as Model for Motif Kernels, in: BCBGC2008, Orlando,
Florida, USA, 2008.
[9] J. Schr¨oder, L. Wienbrandt, G. Pfeiﬀer, M. Schimmler, Massively Parallelized DNA Motif Search on the Reconﬁgurable Hardware Platform
COPACOBANA, in: PRIB2008, Lecture Notes in Bioinformatics, Vol. 5265, 2008, pp. 436–447.
[10] S. Kumar, C. Paar, J. Pelzl, G. Pfeiﬀer, A. Rupp, M. Schimmler, How to Break DES for e8,980, in: SHARCS2006, Cologne, Germany, 2006.
[11] T. Gendrullis, M. Novotn´y, A. Rupp, A Real-World Attack Breaking A5/1 within Hours, Lecture Notes In Computer Science 5154 (2008)
266–282.
[12] T. G¨uneysu, T. Kasper, M. Novotn´y, C. Paar, A. Rupp, Cryptanalysis with COPACOBANA, IEEE Transactions on Computers 57 (11) (2008)
1498–1513.
[13] J. Allred, J. Coyne, et al., Smith-Waterman Implementation on a FSB-FPGA Module using the Intel Accelerator Abstraction Layer, in: IEEE
Parallel and Distributed Processing Symposium, 2009.
[14] O. Storaasli, W. Yu, D. Strenski, J. Maltby, Performance Evaluation of FPGA-Based Biological Applications, in: Proc Cray Users Group,
Seattle, Washington, USA, 2007.

