Procedia Computer
Science
ProcediaComputer
Computer Science
Procedia
Science001 (2010)
(2012)1–9
1397–1405

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Computationally eﬃcient solution algorithm for a large scale
stochastic dynamic program
Nasreddine Saadouli1,∗
College of Business Administration, Gulf University for Science and Technology, Kuwait

Abstract
Stochastic dynamic programs suﬀer from the so called curse of dimensionality whereby the number of evaluations
grows exponentially as the number of stages increases. This curse is further magniﬁed when the stochastic variable
is discretized as this adds another dimension to the number of evaluations required. As a result, it is computationally
infeasible (in some cases outright impractical) to try solving these problems using an exhaustive search over all
the parameters. Computational algorithms that combine decomposition techniques and simulation with reasonable
assumptions on the stochastic variables can render very eﬃcient solutions with a high degree of accuracy. This paper
develops and tests such an algorithm to solve a large scale stochastic dynamic program. The algorithm’s performance
is tested through a simulation study of a system with the prescribed parameters determined by the algorithm. The
results analyzed show that the algorithm generates very good solutions as validated by the performance indicators
of the system. The solutions provide the managers of the system with insights into the complex relationships that
characterize the system.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: computational algorithm, stochastic program, mathematical modeling, simulation, reservoir operation,
complex systems

1. Introduction and Literature Review
The tremendous developments in algorithm design and the exponential growth in computational capacity have not
able to keep pace with the increasing complexity of real life problems. In order to maintain the life-like nature of models, the stochastic characteristics of the problem must be formally integrated into the model. The resulting stochastic
models tend to become too large to be economically feasible to solve to optimality. This has enticed researchers and
practitioners alike to keep searching for more eﬃcient and less computationally costly solution techniques. A particular solution procedure that can be used to solve mathematical programs is the dynamic programming approach. Since
deterministic models have important limitations that [1] state, modeling uncertainty becomes essential. The authors
contrast the control policies developed using deterministic optimization with policies using stochastic optimization of
probabilistic inﬂows and conclude that the stochastic approach is more accurate. Integrating the stochastic variables
∗

Email address: saadouli1971@yahoo.fr (Nasreddine Saadouli)
author

1 Corresponding

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.155

1398

Saadouli/ Procedia
/ ProcediaComputer
Computer Science
N.N.
Saadouli
Science001 (2010)
(2012)1–9
1397–1405

2

in these programs gives rise to stochastic dynamic programs (SDP). These models solve the underlying mathematical
program by evaluating a suitably deﬁned recursive function on a predetermined number of stages. Consequently, the
number of evaluations needed increases exponentially as the number of stages increases. The stochastic variables
are discretized for the purposes of evaluation and thus add another search dimension leading to an even larger and
more computationally costly problem. The resulting SDP is, typically, extremely diﬃcult to solve using traditional
techniques. Only an intricate combination of decomposition techniques and custom-developed algorithms can provide
realistic solutions to such problems. [2] highlights the diﬃculty presented by the fact that variables are stochastic. He
decomposes the original problem into two subproblems that are solved with a set of scenarios.
In [3], the authors present a chance-constrained (stochastic) model to take into account the uncertainty in meeting
system planning requirements. The model is solved by using a goal programming approach where the ﬁrst phase of
the solution procedure searches the planning horizon for feasible solutions that satisfy a target-priority constraint. In
the second phase, the system parameters are optimized within the pre-determined feasible solutions space. [4] developed stochastic dynamic programming (SDP) models where in this type of models, the decisions in the consequent
periods are represented by loss functions of not meeting some operational characteristics. Considering uncertainty
was considered in mathematical programming as early as the mid 50s. For instance, in 1955 [5] suggested an LP
model which includes random variables. In his model, the activity levels are determined in the ﬁrst stage, then a
corrective action is followed in the second stage. This approach gave rise to what has become known as stochastic
programming with recourse.
[6] develop a methodology using both optimization and simulation techniques to evaluate the ability of hydropower
plants to meet weather-related winter peak power requirements. A linear programming procedure is used to determine the hourly generation schedule for the Lower Colorado River Authority of Texas. The simulation/optimization
modeling of water resources has also been extensively studied towards the end of the previous century, as in [7]. The
integrative approach is quite eﬃcient for solving large complex problems. In this case, the authors integrate linear
decision rules with detailed simulations of stream/aquifer system ﬂows. The simulation-optimization approach proved
to be extremely useful especially with the advances in computing speed, storage and cost. For complex systems, [8]
compare real-time reservoir operation techniques and conﬁrm the value of simple optimization methods and the applicability of scenarios methods in real-time reservoir operation. This provides further support for the scenario approach
adopted in this paper.
Other approaches that are not LP based have been developed in the literature. For instance, fuzzy multi-stage
stochastic programs such as in [9], fuzzy-state stochastic dynamic programming such as in [10], and neural networks
such as in [11]. Many real life systems do not necessarily exhibit linear behavior and no reasonable linearizations
can be applied, in which case the mathematical program is formulated as a nonlinear program. There are no universal global solution procedures for nonlinear programs. Consequently, specialized algorithms and heuristic solution
methods are usually pursued. For instance, [12] consider the short-term scheduling of large hydro-power systems for
energy maximization. They formulate the problem as a nonlinear program with linear constraints and solve it using a
direct search procedure.
In this paper, I develop a stochastic dynamic programming model for a reservoir problem involving multiple
periods representing 12 months of operation. The main source of randomness in the reservoir is the monthly water
inﬂow to the reservoir. The downstream demand for irrigation water is prescribed a priori and thus it is not random,
see [3] for a more detailed background of the problem. During any month, the randomness of inﬂow will be modeled
by a sample of discrete outcomes, generated randomly subject to the history of inﬂows up until that month. In the
sequel, I will develop a scenario tree of potential future inﬂow patterns. With fairly dense scenario trees, such models
tend to become exponentially large as the number of stages and periods increase, and thus the computational cost to
solve them also increases exponentially. Therefore, it would be imperative to either use approximation techniques
such as [13], and/or exploit the structure of the problem and devise decomposition techniques that render eﬃcient
solution of the multiperiod reservoir model with scenario trees.
In section 2, the stochastic dynamic programming model is developed. In section 3, the solution procedure for
stochastic dynamic program is presented, and a special solution algorithm that exploits the problem structure is presented. In section 4, the results are analyzed and managerial insights are reported. Summary and future research
remarks in section 5 conclude this exposition.

N. Saadouli
/ Procedia
Computer
Science
00 (2010)
1–9
N. Saadouli
/ Procedia
Computer
Science
1 (2012)
1397–1405

3
1399

2. Problem Setting
In this paper, I develop a stochastic dynamic programming model for a water reservoir problem involving multiple
periods representing 12 months of operation. Water reservoirs are extremely complex systems due to the intricate
inter-relationships that characterize the many variables aﬀecting the reservoir’s performance. Furthermore, reservoirs
represent a vital component of many economies as they signiﬁcantly impact the lives and livelihoods of large portions
of the population. This includes hydropower needed for residential and industrial use, water needs for irrigation and
recreation purposes, as well as mitigating ﬂood hazards. The planning and operation of reservoirs is plagued with
signiﬁcant uncertainties, the most critical of which is the water inﬂow to the reservoir. This includes rain water and
the water ﬂowing in from various water streams. The devastating eﬀects of low reservoir levels leading to power
shortages, or high reservoir levels leading to catastrophic ﬂoods has left reservoir authorities no alternative but to
consider the inﬂow randomness explicitly in the reservoir planning and operation problem. As discussed above, the
main source of randomness is the monthly water inﬂow to the reservoir. In this paper, the downstream demand for
irrigation water is prescribed a priori and thus it is not considered random, see [3] for a more detailed description of the
problem. During any period, the randomness of inﬂow will be modeled by a sample of discrete outcomes, generated
randomly subject to the history of inﬂows up until that month. In the sequel, I will describe how such samples are
generated to develop a scenario tree of potential future inﬂow patterns. With fairly dense scenario trees such models
tend to become exponentially large as the number of stages and periods increase, and thus the computational cost
to solve them also increases exponentially. Therefore, it would be imperative to either use approximation techniques
such as [14], [13] and [15]. However, by exploiting the structure of the problem, decomposition techniques that render
eﬃcient solution of the problem are devised.
2.1. System Constraints
For a more detailed description of the problem at hand, th reader is referred to [16]. The degree of violation of
a constraint is considered explicitly and is controlled. First, the storage level at the beginning of month (t + 1), S t ,
must be at least S D, the dead storage level. The dead storage is usually the highest among: the level imposed for
sediment impounding in the reservoir, the level imposed by the minimum operating head of the turbines used for
power generation or the level imposed for recreational development. Therefore the deviation from S D, denoted by
δS D , is modeled by the following equation:
(1)
S t − S D = δSt D .
Note that δSt D is a random variable and δSt D ≥ 0 indicates the satisfaction of the dead storage constraint in month t.
The reservoir is also used to mitigate ﬂood hazards during high inﬂow seasons. A ﬂood reserve part of the reservoir
should remain empty to absorb the extra volumes of water in the event of a ﬂood. Although this does not represent
direct beneﬁts to the energy authority governing the reservoir, it is critical to ensure the safety of the population
downstream. The deviation from maintaining a speciﬁed ﬂood reserve, Vt in month t, is given by the equation:
S t − (K − Vt ) = δtF .

(2)

In order to ensure continued operation of the reservoir in subsequent years provided that the inﬂow distribution remains
unchanged, we require that the terminal storage, S T , be close in value to the initial storage, S 0 . This is not simply a
modeling convenience, it is required for the long-term eﬀective generation of hydropower. The deviation of S T from
the initial storage level S 0 is given by the equation:
S T − S 0 = δST 0 .

(3)

Releases are not constrained to be deterministic, i.e. releases conform to a non anticipative policy. However, the
water targets speciﬁed by the irrigation and recreation needs downstream should be considered carefully. Therefore,
the deviation of meeting water targets are given by:
Rt − T t = δtD .

(4)

Note that ﬂood reserve constraint violations correspond to δtF > 0, and water target constraint violations corre0. Since the operation
spond to δtD < 0. However, violation of the over year storage requirement indicates δST 0

1400

Saadouli/ Procedia
/ ProcediaComputer
Computer Science
N.N.
Saadouli
Science001 (2010)
(2012)1–9
1397–1405

4

of a water reservoir is a continuous process in time, the ending storage and the beginning storage are related by the
continuity equation,
(5)
S t = S t−1 + It − Rt ,

where Rt is the amount released in period t. I am also assuming that no other loss of water is possible due to evaporation
for instance.
The reservoir is used to generate hydropower. This is the main revenue stream for the reservoir authority. One
measure of the reservoir’s energy generation capacity is the so-called ﬁrm energy. Firm energy is the minimum amount
of energy generated in the planning horizon. To ensure a given ﬁrm energy level, say ν, any deviation from ν, which
we shall represent by δEG , is penalized. This is a critical constraint since the main return to the reservoir authority will
come from selling energy. Therefore, the energy generation constraint violation can be written as follows:
ν − EGt = δtEG .

(6)

where EGt is the energy generated in period t.
The constraints presented here are typically the most fundamental in reservoir operation problems. This formulation of the constraints is eﬀective due to the fact that it gives the decision maker signiﬁcant ﬂexibility in customizing
the model to ﬁt his/her needs. Namely, the period can be deﬁned to be any time frame ranging from months to days
or even hours of operation. Additionally, the reliabilities of deviating from the desired operating characteristics can
be modiﬁed to reﬂect the priority rules deﬁned by the decision maker. For instance, if meeting water targets has a
priority, then the water target satisfaction reliability is set higher than the other reliabilities. This ﬂexibility makes the
model quite practical.
2.2. Stochastic Dynamic Programming Model
By inspecting equations (1),(2),(3),(4), and (5), it is evident that all constraints depend on S t−1 and Rt . In other
words, given the beginning storage and the release at period t, one can compute the deviations from the various
operating characteristics and the value of the objective function explicitly. This simpliﬁes the model to an evaluation
problem. One can, therefore, consider a grid of discretized S t−1 and Rt and compute all other values, including the
energy generated, and ﬁnd which combination optimizes the objective function. Obviously, the quality of the solution
will depend on the ﬁneness of grid. Finer grids will provide better solutions albeit at a higher computational cost.
Deﬁne the state space as being the pair (Ht−1 , S t−1 ). The state of the system is completely deﬁned by this state
space deﬁnition. The history of inﬂows Ht−1 provides the information on what scenario of inﬂows has realized up
until period t. The model is to select the release Rt that would minimize the expected penalty cost, less energy beneﬁts,
relative to the inﬂows. The value function, denoted by φt (.), at the node Ht−1 of uncertainty resolution is then deﬁned
by the following, for a given value of S t−1 :
φt (Ht−1 , S t−1 ) = min
Rt

E It |Ht−1 F (Ht−1 , S t−1 , It , Rt ) + φt+1 (Ht , S t )

s.t.
S t + Rt = S t−1 + It
S t − S D = δSt D
Rt − T t = δtD

S t − (k − V) =

ν − EGt = δtEG

S T − S 0 = δS 0 ,
Rt ≥ 0.

(7)
δtF
if t = T

Where,
F (Ht−1 , S t−1 , It , Rt ) is the net cost function due to the penalties δSt D , δtD , δtF , δtEG , and δST 0 and beneﬁt due to the ﬁrm
energy ν. Also, E It |Ht−1 [.] denotes the conditional expectation with respect to the random inﬂow It given Ht−1 .

N. Saadouli
/ Procedia
Computer
Science
00 (2010)
1–9
N. Saadouli
/ Procedia
Computer
Science
1 (2012)
1397–1405

5
1401

3. Solution Procedure and Algorithm
To solve the model in its full dependent inﬂows formulation would be a formidable task. Essentially one would
need to solve a potentially nonlinear program (depending on the energy function EGt ) for every grid point. There are
several alternatives to reduce the problem size, the one I choose here is aggregation. The method of aggregation is a
general decomposition method that has been used to reduce the problem size. The general idea of aggregation within
mathematical programming has been studied extensively in the literature. The typical approach involves aggregating
rows and/or columns to yield an approximate mathematical program that is easier to solve, see [17] and [18]. In
the context of stochastic mathematical programs, [19] and [20] developed approximations by aggregating constraints
according to the underlying probability distributions. For a state of the art survey on aggregation in optimization, see
[21]. Aggregation can be applied at several levels. Some methods aggregate the search space by reducing it using
some limiting assumptions. Other more commonly used methods of aggregation reduce the scenario space whereby
several scenarios of the original problem are grouped together as one scenario, see [22]. The solution obtained would
not be optimal to the original problem. It would, however, be feasible and would present a bound on the original
solution. In a world punctuated by uncertainty, this limitation could be tolerated to achieve an implementable solution
that can be obtained faster.
In our problem, the monthly inﬂows are highly uncertain random variables, i.e. they have high variance. For
that matter, we use the aggregation principle to provide a good solution, although it might not be optimal. One way
of aggregating the scenarios is to combine months or periods as stages and solve a smaller stochastic program. For
example, if we divide the 12 periods into 4 stages where each stage has 3 periods, with 10 outcomes in each period,
i
we solve 4i=1 (10i ) problems instead of 12
i=1 (10 ). Although the size of each subproblem may increase, the overall
size of the DP model reduces to a more manageable size.
3.1. Model Description
Suppose we divide the number of periods, T , in the planning horizon into Π number of stages. This yields
periods in each stage assuming ΠT is integral. Let Hπ−1 be deﬁned as the history of inﬂows up to stage π, i.e.,

T
Π

Hπ−1 = Iˆ1 , . . . , Iˆπ−1
where Iˆπ is the vector of inﬂows in stage π. Note here that the history of the inﬂows is a series of vectors of size
T
Π . Deﬁne the state of the system to be (Hπ−1 , Sπ−1 ), where Sπ−1 is the storage level of the reservoir at the beginning
of stage π. Also deﬁne Rˆ π to be the vector of releases in stage π. Note that in the following, we use the notation Iˆπi
to denote the inﬂow in period i of stage π, and the same holds for the releases. Hence, we write the DP recursion
formulas as the following:
φπ (Hπ−1 , Sπ−1 ) = min
Rˆ π

E Iˆπ |Hπ−1 F (Hπ−1 , S π−1 , Iˆπ , Rˆ π ) + φ(Hπ , Sπ )

s.t.
S1π + Rˆ 1π = Sπ−1 + Iˆπ1 ; S2π + Rˆ 2π = S1π + Iˆπ2 ; . . . ; Sπp + Rˆ πp = Sπp−1 + Iˆπp
Rˆ 1π − T π1 = δπD,1 ; Rˆ 2π − T π2 = δπD,2 ; . . . ; Rˆ πp − T πp = δπD,p

S1π − (k − V) = δπF,1 ; S2π − (k − V) = δπF,2 ; . . . ; Sπp − (k − V) = δπF,p
ν − EG1π = δπEG,1 ; ν − EG2π = δπEG,2 ; . . . ; ν − EGπp = δπEG,p
SΠp − S0 = δS0 ,
Rˆ π ≥ 0.

Where p is the index of the last period in each stage π.

(8)

1402

Saadouli/ Procedia
/ ProcediaComputer
Computer Science
N.N.
Saadouli
Science001 (2010)
(2012)1–9
1397–1405

6

3.2. Proposed Algorithm
At each node in the scenario tree, we compute the value function deﬁned in (8). Note that each node in stage π
is completely deﬁned by the history of inﬂows, Hπ−1 . Consider a set of discretized beginning storage levels Snπ−1 ,
n = 1, . . . , N, and a set of discretized releases Rˆ πj , j = 1, . . . , J. The following algorithm evaluates the value function
at each node of each stage for a pre speciﬁed set of discretized beginning storage levels and releases. Note, however,
that releases in this model are vectors, in which case we would have a p-dimensional search on the releases.
Step 0:Initialization
1. Set reservoir size and maximum ﬁrm energy level
2. Obtain inﬂow data (mean, standard deviation, and number of outcomes per period; determine probabilities of
outcomes)
3. Set π= Π − 1, where Π= number of stages to be considered in the model
4. The number of periods per stage is p = ΠT
Step 1: DO WHILE n≤N:
1. Set Sπ−1 = Snπ−1 , Let φ∗π (Hπ−1 , Sπ−1 ) = M, M denotes a large number.

Step 2: DO WHILE j≤J:

1. evaluate φπ (Hπ−1 , Sπ−1 , Rˆ πj ) as described in (8)
2. if φ∗π (Hπ−1 , Sπ−1 ) < φπ (Hπ−1 , St−1 , Rˆ πj )
Set φ∗π (Hπ−1 , Sπ−1 ) = φπ (Hπ−1 , Sπ−1 , Rˆ πj )
and Rˆ ∗π (Hπ−1 , Sπ−1 ) = Rˆ πj

END DO
END DO
Step 3:

1. Set π = π − 1.
2. if π < 0, STOP,
else go to Step 1
4. Results Analysis and Managerial Insights
The aggregated DP model is an attempt to retain some of the dependence structure among the monthly inﬂows,
and by using an aggregation technique, the overall problem size is reduced. There is a potentially large number of
experiments that could be run on the model to see the eﬀect of changing the number of stages for a 12 monthly periods
model. As expected, the computational cost increases with the addition of stages. Memory requirements also increase
exponentially making it almost impossible to solve the model for a reasonable number of outcomes (> 20 per stage).
This restricted the scope of our experiments to the case where we either use a small number of stages, say 3, or use
a small number of outcomes, say 10. Despite this drawback, the model’s results seemed quite accurate. The model’s
solution in this case is a release policy for each stage. The release policy is a vector of releases for the number of
periods in a particular stage. The release policy depends explicitly on which inﬂows have been realized. Say we are at
stage 0, and we generate a random vector of inﬂows for the number of periods in that stage, the release policy for the
next stage is dependent on which inﬂow vector has realized. Recall that in generating the scenario tree, each branch
corresponds to a vector of inﬂows, say IˆG . In the simulation, we generate a vector of equal size IˆR , and that decides
which of the nodes of the coming stage will be the node of reference, i.e. which release policy to use for the next
stage. Basically, the branch of the scenario tree that most closely resembles the randomly generated vector of inﬂows
is the scenario we follow to get the release policy. There are potentially several methods of measuring the distance
between vectors. The most common being the Euclidean distance, ED, computed as follows:
ED = [

t+p G
i=t (Ii

1

− IiR )2 ] 2 .

N. Saadouli
/ Procedia
Computer
Science
00 (2010)
1–9
N. Saadouli
/ Procedia
Computer
Science
1 (2012)
1397–1405

7
1403

where p is the number of periods in each stage. The scenario branch that minimizes the Euclidean distance is chosen
as the scenario that is being manifested.
The simulation is designed to not only validate the solution given by the model, but also to provide further insight
into the problem. We feed into the simulation model the reservoir size, the ﬁrm energy level, and the release policy
tree. The release policy is now a tree since it depends on which scenario manifested. In other words, the release
policy that is a function of the beginning storage is diﬀerent for each node in a period, and between periods. Since
the energy generation is of primal concern to the energy authority, we also validate the solution by observing the
simulated ﬁrm energy level and reliability. The simulated target satisfaction reliability, θ s remains very high. In 10
of the 12 periods, θ s = 1, indicating that the target priority operation is emphasized by the model. We see a slight
drop in the target satisfaction reliability in months 9 and 10, which corresponds to the two months with the highest
demand. Even in such circumstances, the target satisfaction reliability does not fall below 0.975. Another important
aspect of the reservoir operation is the dead storage reliability α. The simulated α s level is consistently higher than
0.9. To control ﬂood hazards, the model provides a release policy that yields a high ﬂood reserve reliability β s . The
slight drop in β s towards the later months may be explained by the fact that towards the end of the planning horizon,
the overyear storage reliability becomes a concern. In order to satisfy the condition that S T ≥ S 0 , larger volumes of
water are stored in the reservoir in the later periods.
Two important remarks on the performance of the model. The ﬁrst is that the actual energy generation reliability
remains consistently higher than 0.9. This indicates that the model’s release policy is maximizing the energy generation. The second remark is that the levels and the behavior of the potential energy and actual energy generation
reliabilities are close. This leads us to the conclusion that the release policy is in eﬀect releasing as much water as
possible without dropping the water level below the dead storage level, given that all other reservoir reliabilities are
not degraded. Figure 1 shows the simulated reliabilities for an instance of such a run.

Figure 1: Simulated System Reliabilities

I have shown through the results analysis and the simulation study that the model generated accurate results.
Being a planning model, it succeeded in meeting the multiple and conﬂicting objectives of the reservoir operation and
management. The optimal solution and especially the ﬁrm energy level and reliability, are signiﬁcantly aﬀected by
the beginning storage level S 0 and the over year storage reliability.

1404

Saadouli/ Procedia
/ ProcediaComputer
Computer Science
N.N.
Saadouli
Science001 (2010)
(2012)1–9
1397–1405

8

The computational eﬃciency of the proposed algorithm depends on the number of random inﬂow outcomes considered in each period, and on the ﬁneness of the discretization of beginning storage and beginning cumulative inﬂow
vectors. This is understandable since these two parameters increase the search space exponentially. Furthermore, the
computational time of the aggregated dependent inﬂows model depends not only on the above dimensions but also
on the number of aggregations. For example, the case with 4 stages, i.e. 3 periods per stage in a 12 month planning
horizon, and 30 outcomes per stage takes approximately 30 minutes.
5. Concluding Remarks
The paper presented a stochastic dynamic program for the operation of a water reservoir. The randomness in the
water inﬂow to the reservoir is explicitly considered using a scenario tree approach, whereby the random variable is
discretized and dynamic program is formulated for each scenario. Since the reservoir problem is quite complex, and
with fairly dense scenario trees, the resulting model becomes extremely computationally costly. It would be quite
infeasible to try solving the problem to optimality using traditional linear or nonlinear programming techniques. An
eﬃcient heuristic algorithm that combines a stage aggregation procedure with an exploitation of the problem structure
delivers a good solution as evidenced by the simulation study. The system reliabilities remain consistently higher than
90% which is quite impressive given the signiﬁcant stochasticity in the inﬂow variable. The model is ﬂexible enough
to deﬁne any number of periods; however, to be operational, the model should take into account the unveiling of the
random events as periods unfold. The solutions at each period is reﬁned using the newly available outcomes of the
random variales. Such a recourse model would make the model even more operational. This venue and others are
some of the key directions for future research that I am considering.
References
[1] R. C. P. Jr, P. K. Kitandis, Limitation of deterministic optimization applied to reservoir operations, Journal of Water Resources Planning and
Management (125) (1999) 135–142.
[2] A. Turgeon, Daily operation of reservoir subject to yearly probabilistic constraints, Journal of Water Resources Planning and Management (131) (2005) 342–350.
[3] N. C. P. Edirisinghe, I. Patterson, N. Saadouli, Capacity planning model for a multi-purpose water reservoir with target-priority operation,
Annals of Operations Research 100 (1) (1999) 273–303.
[4] A. Turgeon, Optimal short-term hydro scheduling from the principle of progressive optimality, Water Resources Research 17 (3) (1981)
481–486.
[5] G. B. Dantzig, Linear programming under uncertainty, Management Science 1 (3) (1955) 197–206.
[6] Q. W. Martin, Optimal reservoir control for hydropower on colorado river, texas, Journal of Water Resources Planning and Management (121)
(1995) 438–447.
[7] G. Belaineh, R. C. Peralta, Simulation/optimization modeling for water resources management, Journal of Water Resources Planning and
Management (125) (1999) 154–162.
[8] X. Yang, E. Parent, C. Michel, P. Roche, Comparison of real-time reservoir operation techniques, Journal of Water Resources Planning and
Management (121) (1995) 345–351.
[9] I. Maqsood, G. H. Huang, J. S. Yeomans, An interval-parameter fuzzy two-stage stochastic program for water resources management under
uncertainty, European Journal of Operational Research (167) (2005) 208–225.
[10] S. J. Mousavi, M. Karamouz, M. B. Menhadj, Fuzzy-state stochastic dynamic programming for reservoir operation, Journal of Water Resources Planning and Management (130) (2004) 460–470.
[11] V. Chandramouli, H. Raman, Multireservoir modeling with dynamic programming and neural networks, Journal of Water Resources Planning
and Management (127) (2001) 89–98.
[12] J. Wang, X. Yuan, Y. Zhang, Short-term scheduling of large-scale hydropower systems for energy maximization, Journal of Water Resources
Planning and Management (130) (2004) 198–205.
[13] N. C. P. Edirisinghe, Bound-based approximation in multi stage stochastic programming, Annals of Operations Research (85) (1999) 103–
127.
[14] N. C. P. Edirisinghe, W. T. Ziemba, Implementing bound-based approximation in convex-concave two-stage stochastic programming, Mathematical Programming (75) (1996) 293–325.
[15] N. C. P. Edirisinghe, G. M. You, Second order approximation and reﬁnement in optimization under uncertainty, Annals of Operations Research (64) (1996) 143–178.
[16] N. Saadouli, N. C. P. Edirisinghe, Multistage and dynamic stochastic models for the operation of a multipurpose water reservoir, WSEAS
Transactions on Business and Economics 1 (3) (2006) 1–8.
[17] P. H. Zipkin, Bounds on the eﬀect of aggregating variables in linear programs, Operations Research (28) (1980) 403–418.
[18] P. H. Zipkin, Bounds for row aggregation in linear programming, Operations Research (28) (1980) 903–916.
[19] J. R. Birge, Aggregation bounds in stochastic linear programming, Mathematical Programming (31) (1985) 25–42.
[20] N. C. P. Edirisinghe, W. T. Ziemba, Tight bounds for stochastic convex programs, Operations Research (40) (1992) 660–677.

N. Saadouli
/ Procedia
Computer
Science
00 (2010)
1–9
N. Saadouli
/ Procedia
Computer
Science
1 (2012)
1397–1405

9
1405

[21] D. F. Roger, R. D. Plante, R. T. Wong, J. R. Evans, Aggregation techniques and methodology in optimization, Operations Research (39)
(1991) 553–582.
[22] R. T. Rockafeller, R. J.-B. Wets, Scenario and policy aggregation in optimization under uncertainty, Mathematics of Operations Research
16 (1) (1991) 119–147.

