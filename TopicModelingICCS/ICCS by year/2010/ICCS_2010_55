Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
357–366

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Towards High-Quality, Untangled Meshes via a Force-Directed
Graph Embedding Approach
Sanjukta Bhowmicka , Suzanne M. Shontzb,∗
a Department

b Department

of Computer Science, University of Nebraska at Omaha, Omaha, NE 68182
of Computer Science and Engineering, The Pennsylvania State University, University Park, PA 16802

Abstract
High quality meshes are crucial for the solution of partial diﬀerential equations (PDEs) via the ﬁnite element
method (or other PDE solvers). The accuracy of the PDE solution, and the stability and conditioning of the stiﬀness
matrix depend upon the mesh quality. In addition, the mesh must be untangled in order for the ﬁnite element method to
generate physically valid solutions. Tangled meshes, i.e., those with inverted mesh elements, are sometimes generated
via large mesh deformations or in the mesh generation process. Traditional techniques for untangling such meshes
are based on geometry and/or optimization. Optimization-based mesh untangling techniques ﬁrst untangle the mesh
and then smoothe the resulting untangled mesh in order to obtain high quality meshes; such techniques require the
solution of two optimization problems.
In this paper, we study how to modify a physical, force-directed method based upon the Fruchterman-Reingold
(FR) graph layout algorithm so that it can be used for untangling. The objectives of aesthetic graph layout, such as
minimization of edge intersections and near equalization of edge lengths, follow the goals of mesh untangling and
generating good quality elements, respectively. Therefore, by using the force-directed method, we can achieve both
steps of mesh untangling and mesh smoothing in one operation.
We compare the eﬀectiveness of our method with that of the optimization-based mesh untangling method in [1] and
implemented in Mesquite by untangling a suite of unstructured triangular, quadrilateral, and tetrahedral ﬁnite element
volume meshes. The results show that the force-directed method is substantially faster than the Mesquite mesh
untangling method without sacriﬁcing much in terms of mesh quality for the majority of the test cases we consider in
this paper. The force-directed mesh untangling method demonstrates the most promise on convex geometric domains.
Further modiﬁcations will be made to the method to improve its ability to untangle meshes on non-convex domains.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: mesh untangling, force-directed approach, graph embedding, mesh quality

1. Introduction
Numerical solution of partial diﬀerential equations (PDEs) requires discretization of the governing equations as
well as the geometric domain on which the equations are to be solved. The discretized domain, composed of various
∗ Corresponding

author
Email addresses: sbhowmick@mail.unomaha.edu (Sanjukta Bhowmick), shontz@cse.psu.edu (Suzanne M. Shontz)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.039

358

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

2

types of geometric shapes (e.g., triangles, quadrilaterals, tetrahedra, or hexahedra) is called a mesh. Various solvers
have requirements that must be satisﬁed by the meshes when used in the numerical solution of the PDEs. For example,
when the ﬁnite element method is employed, it is desirable for the meshes to be of good quality (as measured according
to various mesh quality metrics involving the shape, size, and/or the orientation of the mesh elements [2, 3]), since the
discretization error in the ﬁnite element solution increases as the element dihedral angles become too large [4], and
the condition number of the ﬁnite element stiﬀness matrix increases as the angles become too small [5]. In addition,
ﬁnite element meshes cannot be tangled; otherwise the solver will generate physically invalid solutions [6].
A mesh is said to be tangled if it has inverted mesh elements, i.e., elements with a negative orientation. Tangled
meshes can be created via the mesh generation process [7] or can result from vertex moment in large deformation
problems, e.g., traumatic brain injuries, heart arrhthymias, foam-rubber rollers, and metal forming; or in ﬂuid ﬂow
problems. Because tangled meshes generate physically invalid solutions, it is imperative that such meshes are untangled before use with the ﬁnite element method.
Existing mesh untangling methods employ geometric- and/or optimization-based approaches in order to untangle
the mesh. The usual optimization-based approach is to ﬁrst solve an optimization problem in order to untangle the
mesh (e.g., [1, 7, 8, 9, 10, 11]) and to then solve a second optimization problem in order to smooth the mesh to
improve the mesh quality (e.g., [12, 13, 14]). Mesh smoothing is the process of repositioning the mesh vertices, while
maintaining mesh connectivity, and is performed in order to improve the quality of the elements. Usually, the boundary
of the mesh is kept ﬁxed, and only the interior vertices of the mesh are allowed to move during mesh smoothing. The
main diﬀerence between mesh untangling and mesh smoothing methods is that the former are designed to dramatically
alter meshes, through large deformations, in order to untangle them, whereas the latter are designed to make smaller
adjustments to the meshes (normally assuming the initial meshes are valid) in order to improve their overall quality.
We now survey relevant mesh untangling methods in more detail. In [8, 10, 15], Freitag and Plassmann and Li and
Freitag formulate the mesh untangling problem as a series of local linear programming problems seeking to maximize
the minimum element volume in the local submesh. Kovalev et al. [11] developed a local mesh untangling technique
for hexahedral meshes which repositions vertices connected to invalid elements into their feasible sets. In contrast,
Knupp developed a global optimization method for tetrahedral and hexahedral mesh untangling in [1, 7] based on
minimizing the diﬀerence between the absolute and signed element volumes. Vachal et al. [9] recently developed an
untangling procedure for meshes in arbitrary Lagrangian-Eulerian (ALE) simulations which combines direct vertex
placement based on a geometric computation of the feasible set and vertex repositioning and numerical optimization.
More recently, Escobar et al. [16] developed an optimization-based approach for the simultaneous untangling and
smoothing of tetrahedral meshes; which reduced the number of smoothing iterations required.
Besides optimization-based approaches to mesh untangling and smoothing, there have also been physics-based
approaches to mesh smoothing. For example, mesh smoothing methods have been developed based on torsion-spring
system [17, 18] and electrical system [19] models. In addition, Djidjev [20] developed a force-based mesh smoothing
method based on a variation of the graph drawing algorithm in [21]. Despite there being physics-based approaches
for mesh smoothing, no such methods for mesh untangling have been developed.
In this paper, we present a physics-based, force-directed method for obtaining high-quality, untangled meshes for
use in ﬁnite element simulations. Our method is based upon the Fruchterman-Reingold (FR) [21] graph embedding
algorithm which aims to lay out an aesthetically-pleasing graph on a two- (or three-)dimensional plane (or volume)
and calculates forces on the vertices based on models of n-body problems. Our method diﬀers from the one described
in [20] in that it alters meshes through large deformations in order to untangle them, whereas the method in [20]
makes only ﬁne adjustments to the mesh vertices and assumes a valid, i.e., untangled, initial mesh. We compare the
eﬀectiveness of our method with that of the optimization-based mesh untangling approach present in Mesquite [22],
the Mesh Quality Improvement Toolkit, based on the methods’ abilities to untangle several unstructured ﬁnite element
meshes. The results show that the force-directed method is substantially faster than the Mesquite mesh untangling
method without sacriﬁcing much in terms of mesh quality for the majority of the test cases considered.
The rest of the paper is organized as follows. In Section 2, we deﬁne element validity. In Section 3, we describe
our force-directed graph embedding approach for untangling ﬁnite element meshes. In Section 4, we describe the
Mesquite mesh untangling method with which we will compare our method in Section 5. In Section 5, we present the
results of applying our method to untangle several triangular, quadrilateral, and tetrahedral ﬁnite element meshes and
compare the results of our method to those obtained from the mesh untangling method in Mesquite. Finally, we give
some conclusions and describe our future research plans in Section 6 and give some acknowledgements in Section 7.

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

359
3

2. Deﬁnition of Element Validity
A ﬁnite element mesh is said to be valid if it is not tangled, i.e., if it does not contain any inverted elements. An
inverted element is one for which (1) two edges intersect at a point which is not a vertex of the element or (2) its vertex
ordering does not satisfy a right-handed rule (i.e., its vertices have not been ordered in a counter-clockwise manner).
Assuming the vertices have been ordered according to a right-handed rule, inverted elements are those which have
negative volume. For triangular and tetrahedral elements, a negative volume (and hence an inverted element) can be
detected by a negative Jacobian matrix determinant.
For tetrahedral meshes, the Jacobian matrix is deﬁned as follows [23]. Jacobian matrices for triangular meshes are
deﬁned similarly. Let T be a tetrahedral element with vertices vn , n = 0, 1, 2, 3 with coordinates xn ∈ R3 . Deﬁne three
edge vectors ek,n = xk − xn with k n and k = 0, 1, 2, 3. Then the three edge vectors emanating from vertex vn are
given by en+1,n , en+2,n , and en+3,n where indices are taken modulo four. Deﬁne the Jacobian matrix at vertex n (denoted
by An ) as follows:
An = (−1)n en+1,n , en+2,n , en+3,n .
Let αn be the determinant of An . Because a right-handed rule has been assumed for the vertex ordering, elements with
a negative volume satisfy αn < 0, as the tetrahedron’s volume is given by 16 αn .
In the case of quadrilateral meshes, researchers have used various deﬁnitions in order to deﬁne validity. In this
paper, we use the deﬁnition of validity prescribed by Li and Freitag in [10] which is as follows: “A quadrilateral
element is valid if and only if there is at most one negative Jacobian among (its) four vertices.”
Thus, one can compute the determinant of the Jacobian at each mesh vertex and can then use the determinant
information to test for inverted triangular, tetrahedral, or quadrilateral elements.
3. Force-Directed Approach to Mesh Untangling
In this section, we describe how we modify a force-directed graph layout method for mesh untangling. Graph
layout methods, such as the Fruchterman and Reingold (FR) algorithm [21], are used to place the vertices and edges
of the graph on a two- (or three-) dimensional space, in order to (i) minimize the number of edges crossing each other
and (ii) reduce the standard deviation of the edge lengths, thereby achieving an aesthetically pleasing layout.
The FR method considers a graph as a collection of objects (vertices) connected by springs (edges), with two kinds
of forces acting on the vertices: (i) attraction due to the springs (only between connected vertices) and (ii) repulsion
due to mutually charged objects (between all vertices).
Let duv denote the Euclidean distance between two vertices v and u. Then the attractive force, F AFR , and the
repulsive force, FRFR , are calculated as follows:
2
F AFR (u, v) = −k2 /duv ; FRFR (u, v) = duv
/k,

where k is a constant proportional to the square root of the ratio of the area where the graph is laid out to the number
of vertices. The FR algorithm is applied for several iterations. During each FR iteration, the vertices are moved in
proportion to the calculated attractive or repulsive forces until the desired layout is obtained. Many implementations
of FR use a “temperature” component that limits the maximum displacement of a vertex. As the iterations progress,
the “temperature” becomes lower, in eﬀect allowing ﬁner adjustments to the positions of the vertices.
3.1. Force Directed Mesh Untangling
It may be possible for a given 2D (or 3D) mesh to be drawn in a plane (or a volume) without any edge crossings,
i.e., in an untangled mesh form. Indeed, achieving such a graph layout is the objective of the FR algorithm. Additionally, FR attempts to equalize the edge lengths, leading to good quality of the mesh elements (in the isotropic case).
Therefore force-directed graph layout is an ideal algorithm that can both untangle and smoothe ﬁnite element meshes
simultaneously.
However, there are certain requirements of mesh untangling that FR in its original form cannot satisfy. We discuss
these aspects below and describe how we modiﬁed FR to satisfy these requirements.
1. Placement of Boundary Vertices: Since meshes are generated for use in the numerical solution of PDEs on a
particular domain, an essential condition for the mesh is that the coordinates of the boundary vertices remain ﬁxed.

360

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

4

However, for force-directed methods which target visually pleasing graph layouts, we can only constrain the elements
to be conﬁned within a speciﬁed rectangle (for 2D meshes) or cube (for 3D meshes). In fact, constraining the boundary
vertices can lead to lower quality meshes or even to failure of mesh untangling.
To satisfy the boundary constraint, we apply a two-step procedure. We ﬁrst untangle the mesh using force-directed
methods, with the dimensions of the constraining rectangle to be slightly larger than the boundary of the mesh. Then,
we move the boundary vertices (and other vertices if needed) to conform to the domain boundary. Note that, unlike
local mesh smoothing, this is not an individual step-by-step process for each vertex. Rather we determine how far the
vertices are away from the boundary and use geometric transformations like translation and rotation to move all the
required vertices through one operation.
2. Preserving the Shape of the Geometric Domain: An important constraint in mesh untangling is that the ﬁnal
shape of the mesh should coincide with the shape of the geometric domain that is being discretized. Since forcedirected methods attempt to equalize edge length, the ﬁnal graph layout may take the form of a regular polygon,
generally a rectangle or cube.
To preserve the shape of the geometric domain, we apply two modiﬁcations to FR. First, to incorporate curvatures
in the shape, we multiply the attractive force component by edge weights. A larger weight brings the vertices closer,
corresponding to a smaller radius of curvature; a lower edge weight separates the vertices further, resulting in a larger
radius of curvature.
Second, we identify portions of the mesh that correspond approximately to regular-shaped polygons (i.e., polygons
with equal angles) and apply FR individually on each of these subdivisions. In our current version, these polygons are
identiﬁed manually by the user. In the future, we plan to automate the identiﬁcation of these regular-shaped regions
of the mesh. We then combine the resulting submeshes to generate the ﬁnal result.
3.2. An Example of Force-Directed Mesh Untangling of a Horseshoe Mesh
Figure 1(a) is an example of a tangled mesh on a horseshoe-shaped domain taken from [9]. Application of the
original force-directed method does not preserve either the shape of the domain or the mesh boundaries (Figure 1(b)).
Therefore, we ﬁrst identify each layer of the horseshoe as a regular polygon (in this case a rectangle) and then
apply FR on each of these layers one at a time. Note that even though each layer is like a rectangle, the shape of the
domain is curved. We therefore add appropriate weights to the edges on the longer side of the rectangle to obtain
the curvature. Since the ﬁrst six (out of ten) layers are already untangled, FR is applied on the remaining four layers
as shown in Figures 1(c)-(f). After untangling the ﬁnal layer, the boundary vertices (and some of their neighbors)
of the resultant mesh are moved to conform to the original boundary. Figure 1(g) shows the ﬁnal untangled mesh.
Figure 1(h) shows the mesh as untangled by Mesquite for comparison.
3.3. Time Complexity of the Force-Directed Mesh Untangling Method
The time complexity for computing the attractive forces over the vertices is θ(E), and the complexity for computing
the repulsive forces is θ(V 2 ) for a graph with V vertices and E edges. Therefore, the time complexity of the FR
algorithm over It iterations is θ(It ∗ (E + V 2 )). In practice, such as in the algorithmic implementation used in this
paper, not all vertices are considered for computing the repulsive force; instead a grid variant algorithm is used.
The embedding area is divided into grids, and the repulsive forces across only vertices within a certain distance are
considered. When the vertex distribution is uniform, the complexity of the repulsive force becomes (V) [21].
4. Mesh Untangling Using Mesquite
In this section, we describe the optimization-based mesh untangling method implemented in Mesquite (code
version 1.99 Alpha) [22] which is a modiﬁcation of the method described by Knupp in [1], as we will compare the FR
method against this state-of-the-art method in Section 5.

361
5

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

Figure 1: The force-directed mesh untangling procedure on the horseshoe mesh: (a) tangled mesh [9]; (b) untangled
mesh obtained from applying original, force-directed untangling method; (c)-(f) untangled meshes obtained from
applying the force-directed untangling method to layers one through four, (g) ﬁnal untangled horseshoe mesh; (h)
untangled Mesquite horseshoe mesh.

362

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

6

4.1. Knupp’s Optimization-based Mesh Untangling Method
The optimization-based mesh untangling method proposed by Knupp in [1] seeks to minimize the diﬀerence between the absolute and signed element volumes and to increase the quality of mesh elements through the introduction
of a parameter β > 0. The global objective function employed in Mesquite is
f =
m

(|αm − β| − (αm − β))2 ,

where αm is the determinant of the Jacobian matrix for element m. Note that a larger value of β means a larger
minimum acceptable mesh element volume. The user may increase the value of β in an attempt to improve the quality
of the mesh elements; however, if β is too large, it may not be possible to solve the resulting optimization problem.
The version of the mesh untangling method we employed in Mesquite is a local implementation of Knupp’s
mesh untangling method described above. The method proceeds by solving several small optimization problems (i.e.,
one problem for each interior vertex) to locally untangle each patch of the mesh. The objective function for each
optimization problem is a local version (i.e., restricted to a single patch of the mesh) of the above global objective
function. For the purposes of this paper, a patch is deﬁned to be an interior vertex, its surrounding elements, and the
corresponding vertices. A nonlinear Polak-Ribi´ere method is used to solve the optimization problems in Mesquite.
Typically, several passes through the mesh are necessary in order to untangle the mesh.
4.2. Time Complexity of Mesquite
The time complexity of the Mesquite mesh untangling method is diﬃcult to prescribe. Hence, we describe the
variables which inﬂuence the complexity of this method so that comparisons can be made with that of the FR algorithm. As described above, one optimization problem is solved per interior vertex in the mesh in order to untangle
each patch of the mesh; one pass over the mesh corresponds to one iteration. In order to solve a single optimization
problem, the nonlinear conjugate gradient method [24] ﬁrst obtains the function value and gradient at the starting
point. It initializes the search direction to the steepest descent direction. Successive steps and search directions are
computed until the norm of the objective function’s gradient becomes small enough. In particular, a linesearch is
performed to determine an appropriate steplength for the next step. The complexity of the linesearch comes from
performing several function evaluations; the exact number depends on the initial mesh, the objective function, and the
type of linesearch. The steplength is then used to compute a new placement for the interior vertex. After this step, the
gradient is updated and is used to update the search direction as a weighted combination (which depends on the updated gradient) of the previous search direction and the steepest descent direction. The weight is computed via simple
calculations involving vector subtraction, a vector norm, and a dot product of two vectors. The norm of the updated
gradient is then computed to decide upon termination. The length of the vectors involved in these calculations is either
two (in 2D) or three (in 3D). Furthermore, evaluating the local objective function on a local patch is fairly fast. Thus,
each optimization problem is typically solved rather quickly. Hence, the time complexity of the algorithm comes
from the need to perform several passes over the mesh, each time solving numerous small optimization problems until
convergence with the global objective function is obtained.
We observe that at each iteration both Mesquite and the grid variant version of FR perform operations over a set
of vertices. esquite operates only on the interior vertices, Vi , whereas FR operates on both the interior and boundary
vertices, V. However, for most meshes Vi ≈ V. In addition, the operations performed by FR on each vertex (i.e.,
ﬁnding the Euclidean distance and computing the forces) are simpler than the optimization steps required by Mesquite.
5. Numerical Experiments
We test our mesh untangling method on six tangled, unstructured ﬁnite element volume meshes and compare the
results obtained from FR-based methods and Mesquite. Table 1 gives the qualities (as measured according to element
volume) of the initial tangled meshes and the ﬁnal meshes obtained from the graph embedding and Mesquite mesh
untangling methods for the six test meshes. In the triangular and tetrahedral mesh cases, the volume is positive for
a valid mesh element, zero for a degenerate mesh element, and negative for an inverted mesh element. In order to
determine whether a particular mesh has homogeoneous or heterogeneous elements in terms of size, the minimum

363
7

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

Table 1: Untangling mesh quality results based on the element volume quality metric. The second and third columns
represent the Mesquite and graph embedding results, respectively. An X denotes failure to untangle the mesh.

Mesh
tri1
tri2
hshoe
rt5
coarse
ﬁne

Initial Mesh Quality

Final Mesh Quality
Mesquite

Final Mesh Quality
Graph Embedding

Min
-3.31
-1.01
-0.03
1.98e-05
-0.20
-0.21

Min
0.07
X
0.02
8.50e-07
0.41
0.18

Min
1.09
0.83
1.52e-03
7.60e-06
6.71e-03
2.91e-04

Max
6.64
0.99
0.14
2.09e-05
2.14
1.28

Max
7.36
X
0.04
4.30e-05
1.56
0.84

Max
2.62
0.88
0.04
4.55e-05
1.56
1.26

Table 2: Parameter values and number of iterations for the graph embedding mesh untangling method and for
Mesquite. Note the fourth column gives the dimensions of the enclosing area (for 2D graphs) or volume (for 3D
graphs) over which the mesh had been embedded. An X denotes failure to untangle the mesh. A † denotes a mesh
which was untangled over several layers. The iterations reported in the table represent the total of all iterations over
all the layers. A * denotes a mesh where each element had to be untangled individually; the total number of iterations
is equal to the number of elements which was seven in this case.
Mesh
tri1
tri2
hshoe
rt5
coarse
ﬁne

Mesquite (β)
0.1
X
0.05
0
4
6

Mesquite Iters
2
X
1000
3
1000
1000

FR (area(2D) or volume (3D))
100 by 100
100 by 100
2 by 2
*
12 by 12 by 12
14 by 14 by 14

FR iters
50
50
12†
7
2
6

and maximum quality values for a particular mesh can be compared. A small diﬀerence between these two values
indicates a mesh with elements that are more homogeneous, whereas a large diﬀerence indicates a mesh with elements
that are more heterogeneous. For PDE applications with isotropic physics, homogeneous elements (in terms of size
and shape) are preferred. However, this is not the case for PDE applications with anisotropic physics. In the quadrilateral mesh case, the element was assigned the average of the four relevant triangle volumes. Thus, a positive or a
negative minimum element volume does not indicate whether or not a quadrilateral mesh is untangled. The four Jacobians of each element must be individually investigated as described in Section 2. The homogeneity/heterogeneity
of quadrilateral elements can be determined in a manner similar to that described above. Table 2 shows the parameter
values and number of iterations for the Mesquite and graph embedding mesh untangling methods, respectively.
Our ﬁrst and second test cases are two small triangular meshes (tri1 and tri2) taken from the Mesquite test set [22].
The tangled meshes and the meshes as untangled via graph embedding and Mesquite are shown in Figure 2. Note that
after the original application of FR, the tri1 mesh is untangled but does not conform to the boundary. In this case, we
only had to move the boundary elements to their required positions, as obtained from the tangled version.
In the case of the tri2 mesh, the tangling was such that even the boundary itself was tangled. Thus Mesquite was
not able to untangle this mesh, as it considers the boundary to be ﬁxed. However our FR algorithm could successfully
untangle tri2, but only by moving the domain boundary.
The third example is a structured, quadrilateral mesh named “horseshoe”, which was taken from [9]. The untangling process for this mesh was described in Section 3 and is shown in Figure 1.
The fourth example is an unstructured, quadrilateral mesh named “rt5” and is shown in Figure 3. This mesh was
taken from [9] and was tangled in a Rayleigh-Taylor simulation. This mesh was in fact the most diﬃcult one for the

364

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9
5

50

5

5

4

40

4

4

3

30

3

3

2

20

2

2

1

10

1

1

0

0

0

0

1

10

1

1

2

20

2

2

3

30

3

3

4

40

4

5
6

4

2

0

2

4

50
50

6

40

30

(a)

20

10

0

10

20

30

40

50

8

4

5
5

4

3

(b)

2

1

0

1

2

3

4

5

5
5

4

3

2

(c)

2.4

2

2.2

1.5

1

0

1

2

3

4

5

(d)

2

1
1.8

0.5
1.6

0

1.4

1.2

0.5

1

1
0.8

1.5

0.6

0.4

0

0.5

1

1.5

(e)

2

2.5

3

2
2

1.5

1

0.5

0

0.5

1

1.5

2

(f)

Figure 2: Top row: tri1 meshes. (a) tangled mesh; (b) untangled mesh using FR; (c) untangled mesh using FR with
conformed boundary (d) untangled mesh using Mesquite. Bottom row: tri2 meshes. (e) tangled mesh; (f) untangled
mesh using FR. Note that Mesquite was not able to untangle the tri2 mesh. FR was only able to untangle the mesh by
altering the domain boundary.
FR method to untangle. Each of the tangled elements (quadrilaterals) were aligned diﬀerently and therefore had to be
untangled individually.
The ﬁfth example is a coarse, unstructured, tetrahedral mesh named “coarse” and is shown in Figure 4. This mesh
was created by applying random perturbations to a mesh created using CUBIT [25]. The sixth example is a ﬁne,
unstructured, tetrahedral mesh named “ﬁne”. This mesh is not shown, as it was generated in the same way as the
“coarse” mesh described above and hence is rather similar in nature. As shown in Table 2, the FR algorithm untangled
these meshes with many fewer iterations than did Mesquite and produced elements of comparable quality.
In order to conform with the boundaries of the ﬁfth and sixth examples, we moved the boundary elements to
their respective positions. This process resulted in two discrepancies in boundary vertex position which were required
to keep the mesh untangled. In particular, for the coarse mesh, the x-coordinate of boundary vertex 215 was set to
.3716 instead of to its original value of 0.0866, and the y-coordinate of boundary vertex 221 was set to 3.668 instead
of to its original value of 3.4962. Similarly, for the ﬁne mesh, the x-coordinate of boundary vertex 342 was set to
-2.8088 instead of to its original value of -2.9458, and the y-coordinate of boundary vertex 801 was set to -3.7441
instead of its original value of -3.8361. We anticipate that by further moving the interior vertices, we can overcome
these deﬁciencies in boundary vertex positioning. One of our goals is to formulate translations for boundary vertex
positioning in 3D meshes analogous to those for 2D meshes as demonstrated in the horseshoe mesh case.
6. Conclusions and Future Work
In conclusion, we have presented a physics-based approach for untangling ﬁnite element meshes based upon the
Fruchterman-Reingold (FR) graph embedding algorithm [21]. The objectives of the FR algorithm, i.e., minimizing
the number of edge crossings and generating edges of equal length, map naturally to those of mesh untangling. Our
method works by ﬁrst applying attractive and repulsive forces between vertex pairs until the desired layout is obtained,
i.e., the mesh is untangled, and then by repositioning the boundary vertices to their original positions. This second
step is done in order to preserve the boundary vertex coordinates and the shape of the geometric domain. We have
successfully applied our method to untangle various triangle, quadrilateral, and tetrahedral ﬁnite element meshes. In

365
9

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

(a)

(b)

(c)

0.53

0.53

0.53

0.52

0.52

0.52

0.51

0.51

0.51

0.5

0.5

0.5

0.49

0.49

0.49

0.48

0.48

0.48

0.47

0.47

0.47

0.46

0.46

0.46

0.45

0.45

0.45

0.44

0.44

0.44

0.43
0.1

0.43
0.1

0.105

0.11

0.115

0.12

0.125

(d)

0.13

0.135

0.14

0.105

0.11

0.115

0.12

0.125

0.13

0.135

0.14

0.43
0.1

0.105

0.11

(e)

0.115

0.12

0.125

0.13

0.135

0.14

(f)

Figure 3: The rt5 mesh. Top row: (a) mesh tangled via Rayleigh-Taylor simulation [9]; (b) mesh untangled by FR
method; (c) mesh untangled by Mesquite. Bottom row: Zoomed-in versions of the above meshes.

(a)

(b)

Figure 4: The coarse mesh: (a) tangled mesh; (b) mesh untangled by FR method. The inverted elements have been
shaded in (a).

366

S. Bhowmick,
S.M. Shontz / Procedia Computer Science 1 (2012) 357–366
Bhowmick and Shontz / Procedia Computer Science 00 (2010) 1–9

10

comparison with the mesh untangling method [1] implemented in [22], our method is substantially faster without
sacriﬁcing much in terms of mesh quality for the majority of the test cases considered in this paper.
One drawback of FR is its natural inclination to convert the mesh boundary into a regular polygonal shape. Therefore, the current version of the method can be applied successfully to meshes which conform to this regularity. The
method encounters several challenges when applied to elements with heterogeneous angles and/or heterogeneous
alignment of elements. For future research, we will investigate how force-directed methods can be modiﬁed to preserve the domain shape and the mesh element shape and alignment while generating untangled elements of good
quality. We will also implement algorithms that automate the recognition of regions of regularly-shaped polygons.
Finally, we will extend our mesh untangling method to handle hexahedral and hybrid meshes which occur more
frequently in engineering practice and are often more diﬃcult to untangle.
7. Acknowledgements
The work of the ﬁrst author was funded by the College of Information Science and Technology, University of
Nebraska, Omaha. The work of the second author was funded in part by NSF grant CNS 0720749 and an Institute for
CyberScience grant from The Pennsylvania State University.
References
[1] P. Knupp, Hexahedral mesh untangling and algebraic mesh quality metrics, in: Proc. of the Ninth International Meshing Roundtable, Sandia
National Laboratories, 2000, pp. 173–183.
[2] P. Phillippe, T. Baker, A comparison of triangle quality measures, in: Proc. of the Tenth International Meshing Roundtable, Sandia National
Laboratories, 2001, pp. 327–340.
[3] P. Knupp, Algebraic mesh quality metrics, SIAM J. Sci. Comput. 23 (2001) 193–218.
[4] I. Babuska, A. Aziz, On the angle condition in the ﬁnite element method, SIAM J. Numer. Anal. 13 (1976) 214–226.
[5] I. Fried, Condition of ﬁnite element matrices generated from nonuniform meshes, AIAA Journal 10 (1972) 219–221.
[6] S. C. Brenner, L. R. Scott, The Mathematical Theory of Finite Element Methods, 3rd Edition, Vol. 15 of Texts in Applied Mathematics,
Springer, 2008.
[7] P. Knupp, Hexahedral and tetrahedral mesh untangling, Eng. Comput. 17 (2001) 261–268.
[8] L. Freitag, P. Plassmann, Local optimization-based simplicial mesh untangling and improvement, Int. J. Num. Meth. Eng. 49 (2000) 109–125.
[9] P. Vachal, R. Garimella, M. Shashkov, Untangling of 2D meshes in ALE simulations, J. Comput. Phys. 196 (2004) 627–644.
[10] X.-Y. Li, L. Freitag, Optimization-based quadrilateral and hexahedral mesh untangling and smoothing techniques, Tech. rep., Argonne National Laboratory (1999).
[11] K. Kovalev, M. Delanaye, C. Hirsch, Untangling and optimization of unstructured hexahedral meshes, Comp. Math. Math. Phys. 43 (2003)
807–814.
[12] S. Canann, M. Stephenson, T. Blacker, Optismoothing: An optimization-driven approach to mesh smoothing, Finite Elem. Anal. Des. 13
(1993) 185–190.
[13] V. Parthasarathy, S. Kodiyalam, A constrained optimization approach to ﬁnite element mesh smoothing, Finite Elem. Anal. Des. 9 (1991)
309–320.
[14] R. Bank, R. Smith, Mesh smoothing using a posteriori error estimates, SIAM J. Numer. Anal. 34 (1997) 979–997.
[15] L. Freitag, P. Plassmann, Local optimization-based untangling algorithms for quadrilateral meshes, in: Proc. of the Tenth International
Meshing Roundtable, Sandia National Laboratories, 2001, pp. 397–406.
[16] J. Escobar, E. Rodr´ıguez, R. Montenegro, G. Montero, J. Gonz´alez-Yuste, Simultaneous untangling and smoothing of tetrahedral meshes,
Comput. Method. Appl. M. 192 (2003) 2775–2787.
[17] H. Xu, T. Newman, An angle-based optimization approach for 2D ﬁnite element mesh smoothing, Finite Elem. Anal. Des. 42 (2006) 1150–
1164.
[18] T. Zhou, K. Shimada, An angle-based approach to two-dimensional mesh smoothing, in: Proc. of the Ninth International Meshing Roundtable,
Sandia National Laboratories, 2000, pp. 373–384.
[19] A. Mezentsev, A generalized graph-theoretic mesh optimization model, in: Proc. of the Thirteenth International Meshing Roundtable, Sandia
National Laboratories, 2004, pp. 255–264.
[20] H. Djidjev, Force-directed methods for smoothing unstructured triangular and tetrahedral meshes, in: Proc. of the Ninth International Meshing
Roundtable, Sandia National Laboratories, 2000, pp. 395–406.
[21] T. Fruchterman, E. Reingold, Graph drawing by force-directed placement, Software Pract. Exper. 21 (1991) 1129–1164.
[22] M. Brewer, L. Freitag Diachin, P. Knupp, T. Leurent, D. Melander, The Mesquite Mesh Quality Improvement Toolkit, in: Proc. of the Twelfth
International Meshing Roundtable, Sandia National Laboratories, 2003, pp. 239–250.
[23] L. Freitag, P. Knupp, Tetrahedral element shape optimization via the Jacobian determinant and condition number, in: Proc. of the Eighth
International Meshing Roundtable, 1999, pp. 247–258.
[24] J. Nocedal, S. J. Wright, Numerical Optimization, 2nd Edition, Springer, 2006.
[25] Sandia National Laboratories, CUBIT: Geometry and Mesh Generation Toolkit, see http://www.cubit.sandia.gov.

