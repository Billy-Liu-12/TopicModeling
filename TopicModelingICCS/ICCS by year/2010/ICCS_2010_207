Procedia Computer
Science
Procedia
Computer
Science
00 (2010)
1–1047–56
Procedia
Computer
Science
1 (2012)

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Generative topographic mapping by deterministic annealing
Jong Youl Choia,b , Judy Qiua , Marlon Piercea , Geoﬀrey Foxa,b
a Pervasive

b School

Technology Institute, Indiana University, Bloomington IN, USA
of Informatics and Computing, Indiana University, Bloomington IN, USA

Abstract
Generative Topographic Mapping (GTM) is an important technique for dimension reduction which has been successfully applied to many ﬁelds. However the usual Expectation-Maximization (EM) approach to GTM can easily get
stuck in local minima and so we introduce a Deterministic Annealing (DA) approach to GTM which is more robust
and less sensitive to initial conditions so we do not need to use many initial values to ﬁnd good solutions. DA has been
very successful in clustering, hidden Markov Models and Multidimensional Scaling but typically uses a ﬁxed cooling
schemes to control the temperature of the system. We propose a new cooling scheme which can adaptively adjust the
choice of temperature in the middle of process to ﬁnd better solutions. Our experimental measurements suggest that
deterministic annealing improves the quality of GTM solutions.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: deterministic annealing, Generative Topographic Mapping, nonlinear optimization
2010 MSC: 65K10, 65J15

1. Introduction
Visualization of high-dimensional data in a low-dimension space is the core of exploratory data analysis in which
users seek the most meaningful information hidden under the intrinsic complexity of data mostly due to high dimensionality. Among many tools available thanks to the recent advances in machine learning techniques and statistical
analysis, Generative Topographic Mapping (GTM) has been extensively studied and successfully used in many application areas: biology [1, 2], medicine [3, 4], feature selection [5], to name a few.
Generative Topographic Mapping (GTM) [6, 7] is an unsupervised learning method developed for modeling the
probability density of data and ﬁnding a non-linear mapping of high-dimensional data onto a low-dimensional space.
Similar algorithms known for dimension reduction are Principle Component Analysis (PCA), Multidimensional Scaling (MDS) [8], and Self-Organizing Map (SOM) [9]. In contrast to the Self-Organizing Map (SOM) which does not
have any density model [7], GTM deﬁnes an explicit probability density model based on Gaussian distribution. For
this reason, GTM is also known as a principled alternative to SOM.
The problem challenged by the GTM is to ﬁnd the best set of parameters associated with Gaussian mixtures
by using an optimization method, notably the Expectation-Maximization (EM) algorithm [6, 7]. Although the EM
algorithm [10] has been widely used in many optimization problems, it has been shown a severe limitation, known
Email addresses: jychoi@cs.indiana.edu (Jong Youl Choi), xqiu@indiana.edu (Judy Qiu), mpierce@cs.indiana.edu (Marlon
Pierce), gcf@cs.indiana.edu (Geoﬀrey Fox)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.007

48

J.Y. Choi/ Procedia
et al. / Procedia
1 (2012) 47–56
ComputerComputer
Science 00Science
(2010) 1–10

2

xn
f

zk

/DWHQW 6SDFH / GLPHQVLRQ

yk

'DWD 6SDFH ' GLPHQVLRQ

Figure 1: Non-linear embedding by GTM

as a local optima problem [11], in which the EM method can be easily trapped in local optima failing to return
global optimum and so the outputs are very sensitive to initial conditions. To overcome such problem occurred in the
original GTM [6, 7], we have applied a robust optimization method known as Deterministic Annealing (DA) [12] to
seek global solutions, not local optima. Up to our best knowledge, this is the ﬁrst work to use DA algorithm to solve
the GTM problem in the literature.
The DA algorithm [12, 13, 14, 15] has been successfully applied to solve many optimization problems in various
machine learning algorithms and applied in many problems, such as clustering [16, 12, 17], visualization [18], protein
alignment [19], and so on. The core of the DA algorithm is to seek an global optimal solution in a deterministic
way [12], which contrasts to stochastic methods used in the simulated annealing [20], by controlling the level of
randomness. This process, adapted from a physical process, is known as annealing in that an optimal solution is
gradually revealing as lowering temperature which controls randomness. At each level of temperature , the DA
algorithm chooses an optimal solution by using the principle of maximum entropy [21], a rational approach to choose
the most unbiased and non-committal answers for given conditions.
Regarding the cooling process, which aﬀects the speed of convergency, in general it should be slow enough to
get the optimal solutions. Two types of ﬁxed cooling schemes, exponential cooling schemes in which temperature
T is reduced exponentially such that T = αT with a coeﬃcient α < 1 and linear scheme like T = T − δ for δ > 0,
are commonly used. Choosing the best cooling coeﬃcient α or δ is very problem dependent and no common rules
have been reported. Beside of those conventional schemes, in this paper we also present a new cooling scheme,
named adaptive cooling schedule, which can improve the performance of DA by dynamically computing the next
temperatures during the annealing process with no use of ﬁxed and predeﬁned ones.
The main contributions of our paper are as follow:
i. Developing the DA-GTM algorithm which uses the DA algorithm to solve GTM problem. Our DA-GTM algorithm can give more robust answers than the original EM-based GTM algorithm, not suﬀering from the local
optima problem (Section 3).
ii. Deriving closed-form equations to predict phase transitions which is a characteristic behavior of DA [14]. Our
phase transition formula can give a guide to set the initial temperature of the DA-GTM algorithm (Section 4).
iii. Developing an adaptive cooling schedule scheme, in which the DA-GTM algorithm can automatically adjust the
cooling schedule of DA in an on-line manner. With this scheme, users are not required to set parameters related
with cooling schedule in DA (Section 5).
Our experiment results showing the performance of DA-GTM algorithm in real-life application will be shown in
Section 6 followed by our conclusion in Section 7.

J.Y. Choi et/ Procedia
al. / Procedia
Computer
1 (2012)
Computer
ScienceScience
00 (2010)
1–10 47–56

49
3

2. Overview of GTM
We start by brieﬂy reviewing the original GTM algorithm [6, 7]. The GTM algorithm is to ﬁnd a non-linear
manifold embedding of K latent variables zk in low L-dimension space or latent space, such that zk ∈ RL (k = 1, ..., K),
which can optimally represent the given N data points xn ∈ RD (n = 1, ..., N) in the higher D-dimension space or data
space (usually L
D) (Figure 1). This is achieved by two steps: First, mapping the latent variables in the latent space
to the data space with respect to a non-linear mapping f : RL → RD . Let us denote the mapped points in the data
space as yk . Secondly, estimating probability density between the mapped points yk and the data points xn by using
the Gaussian noise model in which the distribution is deﬁned as an isotropic Gaussian centered on yk having variance
β−1 (β is known as precision). More speciﬁcally, the probability density p(xn |yk ) is deﬁned by the following Gaussian
distribution:
N(xn |yk , β)

β
2π

=

D/2

exp −

β
xn − yk
2

2

.

(1)

The choice of the non-linear mapping f : RL → RD can be made from any parametric, non-linear model. In
the original GTM algorithm [6, 7], a generalized linear regression model has been used, in which the map is a linear
combination of a set of ﬁxed M basis functions, such that,
yk = φTr
k W,

(2)

where a column vector φk = (φk1 , ..., φkM ) is a mapping of zk by the M basis function φm : RL → R for m = 1, ..., M,
such that φkm = φm (zk ) and W is a M × D matrix containing weight parameters. ATr represents a transpose of matrix
A.
With this model setting, the objective of GTM algorithm corresponds to a Gaussian mixture problem to ﬁnd an
optimal set of yk ’s which maximizes the following log-likelihood:
⎧
⎫
N
K
⎪
⎪
⎪
⎪
⎨1
⎬
L(W, β) = argmax
ln ⎪
p(xn |yk )⎪
(3)
⎪
⎪
⎩
⎭
K
W,β
n=1

k=1

It is the problem that ﬁnding K centers for N data points, known as K-clustering problem. Since K-clustering
problem is NP-hard [22], the GTM algorithm uses the EM method which starts with initial random weight matrix W
and iteratively reﬁnes it to maximize Eq. (3), which can be easily trapped in local optima. More details can be found
in the original GTM paper [6, 7].
3. GTM with Deterministic Annealing (DA-GTM)

Since the use of EM, the original GTM algorithm suﬀers from the local optima problem in which the GTM map
can vary depending on the initial parameters. Instead of using the EM, we have applied the DA approach to ﬁnd a
global optimum solution. With the help of DA algorithm, we can have more robust GTM maps against the random
initial value problem.
In fact, the GTM algorithm’s objective function (3) is exactly the same problem, so called K-clustering, discussed
by K. Rose in [12]. The problem is to seek optimal clusters for a given distance or distortion measurement by using
the deterministic annealing approach. Thus, we can use the same approach used in the Rose’s DA method. However,
in Rose’s paper, squared Euclidean distance has been used in distortion measurement but in the GTM algorithm,
distances are measured by the Gaussian probability as in Eq. (1). Thus, we need to redeﬁne distortion between two
points as d(xn , yk ) = − log p(xn |yk )/T , which leads us to the so-called partitioning function as follows:
K

Zn

exp

=
k=1

−d(xn , yk )
.
T

(4)

In the DA algorithm, we have a new objective function, known as a free energy, which we want to minimize
through iterations. Now, by using the same deﬁnition of free energy, used in Rose’s paper in [12], we can drive a free

50

J.Y. Choi/ Procedia
et al. / Procedia
1 (2012) 47–56
ComputerComputer
Science 00Science
(2010) 1–10

4

energy function, for the DA-GTM algorithm as follows:
N

F(W, β, T ) =

ln Zn

argmin −T
W,β,T

(5)

n=1

⎧
⎪
⎪
⎨ 1
= argmin −T
ln ⎪
⎪
⎩ K
W,β,T
n=1

1
T

N

K
k=1

⎫
⎪
⎪
⎬
p(xn |yk ) ⎪
⎪
⎭
1
T

(6)

which we want to minimize as lowering temperature such that T → 1.
Notice that the GTM algorithm’s objective function (3) diﬀers only the use of temperature T with our function
F(W, σ, T ). Especially, at T = 1, L(W, β) = −F(W, β, T ) and so the original GTM algorithm’s target function can be
considered as a special case of the DA-GTM algorithm’s.
To minimize (6), we need to make the following two partial derivatives be zero:
N

∂F
∂yk

= β

∂F
∂β

=

n=1

ρkn (xn − yk )

K

N

(7)

D 1
− xn − yk
2β 2

ρkn
n=1 k=1

2

(8)

where ρkn is a property, known as responsibility, such that,
1

ρkn

p(xn |yk ) T

=

K
k =1

(9)

1

p(xn |yk ) T

By using the same matrix notations used in the GTM paper [6, 7], the DA-GTM algorithm can be written as a
process to seek an optimal weights W and precision β at each temperature T .
W

=

β =

(ΦTr G Φ)−1 ΦTr R X
1
ND

N
n

(10)

K
k

ρkn xn − yk

2

where X is a N ×D data matrix, Φ is a K×M basis matrix, G is a K×K diagonal matrix with elements gkk =

(11)
1
N
T
n (ρkn )

.

4. Phase Transitions of DA-GTM
As a characteristic behavior of the DA algorithm explained by Rose in [12], it undergoes phase transitions as
lowering the temperatures. At some temperature, we can not obtain all solutions but, instead, we can only obtain
eﬀective number of solutions. All solutions will gradually pop out while the annealing process proceeds as with
lowering the temperature.
In the DA-GTM algorithm, we can observe the same behavior. As an extreme example, at very high temperature,
the DA-GTM algorithm gives only one eﬀective latent point in which all yk ’s are converged into the same point x¯
N
xn /N. As lowering the temperature under a certain point, yk ’s
which is the center of data points, such that x¯ = n=1
settled in the same position start to “explode”. We call this temperature as the ﬁrst critical temperature, denoted by
T c . As we further lowering temperature, we can observe subsequent phase transitions and so existence of multiple
critical temperatures. Computing the ﬁrst phase transition is an important task since we should start our annealing
process with the initial temperature larger than T c .
In DA, we can deﬁne such phase transitions as a moment of loosing stability of the objective function, the free
energy F, and turning to be unstable. Mathematically, that moment corresponds to the point in which the Hessian of
the object function looses its positive deﬁniteness.

51
5

J.Y. Choi et/ Procedia
al. / Procedia
Computer
1 (2012)
Computer
ScienceScience
00 (2010)
1–10 47–56

For our DA-GTM algorithm, we can write the following Hessian matrix as a block matrix:
⎡
⎤
⎢⎢⎢ H11 · · · H1K ⎥⎥⎥
⎢⎢⎢ .
.. ⎥⎥⎥⎥ ,
H = ⎢⎢⎢ ..
. ⎥⎥⎥
⎢⎣
⎦
HK1 · · · HKK

(12)

where a sub matrix Hi j is a second derivative of the free energy F as shown in Eq. (6). More speciﬁcally, Hi j can be
written as follows:
Hkk
Hkk

=
=

∂2 F
=−
∂yk ∂yTr
k
∂2 F
=
∂yk ∂yTr
k

N
n

N

β2
ρkn (1 − ρkn )(xn − yk )Tr (xn − yk ) − βρkn I D , or
T
β2
ρkn ρk n (xn − yk )Tr (xn − yk ) (k
T

n

k ),

(13)
(14)

where k, k = 1, . . . , K, and I D is an identity matrix of size D. Note that Hkk and Hkk are D × D matrices and thus,
H ∈ RKD×KD .
With the Hessian matrix above, we can compute the ﬁrst phase transition point occurred at T c . Assuming that the
system hasn’t undergone the ﬁrst phase transition and the current temperature is high enough, then we will have all
N
xn /N, and equal responsibilities as follows:
yk ’s settled in the center of the data point, denoted by y0 = x¯ = n=1
yk = y0 and ρkn = 1/K

(15)

for all k = 1, ..., K. Then, the second derivatives can be rewritten by
Hkk

=

Hkk

=

β2 N
TK
ID
(K − 1)S x|y0 −
β
T K2
β2 N
S x|y0
T K2

(16)

−

(17)

where S x|y0 represents a covariance matrix of centered data set such that,
S x|y0

=

1
N

N
n=1

and the Hessian matrix also can be rewritten by
⎧⎡
⎪
⎪
⎢ (K − 1)S x|y0
⎪
2
⎪⎢⎢⎢⎢
−β N ⎪
⎨
..
⎢⎢⎢
H =
⎪
.
⎢⎢⎣
⎪
T K2 ⎪
⎪
⎪
⎩
−S x|y0

(xn − y0 )Tr (xn − y0 )

···
..
.
···

−S x|y0
..
.
(K − 1)S x|y0

(18)

⎫
⎤
⎪
⎪
⎥⎥⎥
⎪
⎪
⎪
⎥⎥⎥ T K
⎬
⎥⎥⎥ −
I KD ⎪
⎪
⎪
⎥⎦
β
⎪
⎪
⎭

(19)

The ﬁrst phase transition occurs when the system is getting unstable so that the above Hessian matrix is loosing
its positive deﬁniteness. I.e., the ﬁrst phase transition is the moment when the Hessian matrix becomes singular and
so its determinant equals 0(zero), such that det(H) = 0 at T = T c , which holds the following:
⎛⎡
⎤⎞
−S x|y0
⎜⎜⎜⎢⎢⎢ (K − 1)S x|y0 · · ·
⎥⎥⎥⎟⎟⎟
⎜⎜⎜⎢⎢⎢
⎥⎥⎥⎟⎟⎟ T c K
..
..
..
⎥⎥⎥⎟⎟⎟ =
eig ⎜⎜⎜⎢⎢⎢
(20)
.
.
.
⎜⎝⎢⎣
⎥⎦⎟⎠
β
· · · (K − 1)S x|y0
−S x|y0

where eig( A) is an eigenvalue of A.
We can further simplify the above equation by using the Kronecker product:
⎞
⎛⎡
⎛⎡
⎤
−1 ⎥⎥
−1
⎟⎟⎟
⎜⎜⎜⎢⎢⎢ K − 1 · · ·
⎜⎜⎜⎢⎢⎢ K − 1 · · ·
⎥
⎟⎟⎟⎟
⎜⎜⎢⎢
⎜⎜⎜⎜⎢⎢⎢⎢
⎥⎥⎥⎥
..
..
..
..
..
..
eig ⎜⎜⎜⎜⎢⎢⎢⎢
=
eig
⊗
S
⎜⎜⎜⎢⎢⎢
⎥⎥⎥
x|y0 ⎟
.
.
.
.
.
.
⎟⎠⎟
⎝⎜⎣⎢
⎝⎣
⎦
−1
··· K − 1
−1
··· K − 1

⎤⎞
⎥⎥⎥⎟⎟⎟
⎥⎥⎥⎥⎟⎟⎟⎟
⎥⎥⎥⎟⎟⎟ ⊗ eig S x|y0
⎦⎠

(21)

52

J.Y. Choi/ Procedia
et al. / Procedia
1 (2012) 47–56
ComputerComputer
Science 00Science
(2010) 1–10

6

Since the ﬁrst critical temperature is the most largest one, we can use only the maximum eigenvalue among
multiple of them. Thus, the ﬁrst critical temperature can be obtained by the following equation:
Tc

=

(22)

βλmax

where λmax is the largest value of eig(S x|y0 ). Computing the subsequent critical temperature will be discuss in the next.
5. Adaptive cooling schedule
The DA algorithm has been applied in many areas and proved its success in ﬁnding a global optimal solution
avoiding local minima. However, up to our knowledge, no literature has been found about the cooling schedule of
DA algorithm. Commonly used cooling schedule is exponential, such as T = αT , or linear, such as T = T − δ for
some ﬁxed coeﬃcient α and δ. Those scheduling schemes are ﬁxed in that cooling temperatures are pre-deﬁned and
the coeﬃcient α or δ will not be changed during the process, regardless of the complexity of a given problem.
However, as we discussed previously, the DA algorithm undergoes the phase transitions in which the solution
space can change dramatically. To avoid such drastic changes and make the transitions smoother, one may try to
use very small α or δ coeﬃcient. However, the procedure can go too long to be used in practice but still there is no
guarantee to produce global optimal solutions (You will see an example in our experiment result in the next).
To overcome such problem, we propose an adaptive cooling schedule in which next cooling temperatures are
determined dynamically during the annealing process. More speciﬁcally, at every iteration of DA algorithm, we
predict the next phase transition temperature and move to the point as quickly as possible.
General approach to ﬁnd next critical temperatures T c at any given temperature T is the same as the previous
one in that we need to ﬁnd T c to make det(H) = 0. However, in contrast to the method used in computing the ﬁrst
critical points, for this problem we can’t have any simpliﬁed closed-form equations in general. Instead, we can try to
divide the problem into pieces to derive closed-form equations and choose the best solution from multiple candidate
answers. This method could not provide an exact solution, compared to the method to solve the problem in a whole
set, but rather give us an approximation. However, our experiment has showed that such approximation can be a good
solution. Also, another advantage we can expect in using our adaptive cooling schedule is that users has no need to
set any coeﬃcient for cooling schedule. Cooling process is automatically adjusted to the problem.
At a given state in GTM algorithm, we ﬁnd K soft clusters in which each group is represented by yk . Instead of
ﬁnding a global critical temperature from K clusters at once, we can ﬁnd each critical temperature at each group and
choose one among K candidates which is the most largest yet lower than current temperature so that it can be used as
a next temperature.
The sketch of the algorithm is as follows: i) For each k cluster (k = 1, . . . , K), ﬁnd a candidate of next critical
temperature T c,k which should satisfy det(Hkk ) = 0 as deﬁned in (13). ii) Choose the most largest yet lower than the
current T among {T c,k }.
To ﬁnd det(Hkk ) = 0, we need to rewrite Eq. (13) as follows:
Hkk

=

T gkk
−β2
ID
U x|yk − V x|yk −
T
β

(23)

with the following deﬁnition:
N

U x|yk

=
n=1

ρkn (xn − yk )Tr (xn − yk )

(24)

(ρkn )2 (xn − yk )Tr (xn − yk )

(25)

N

V x|yk

=
n=1

N
ρkn . Then, the condition det(Hkk ) = 0 at T = T c,k will hold eig U x|yk − V x|yk =
and gkk = n=1
next critical temperature T c,k for the cluster k can computed by

T c,k

=

β
λmax,k
gkk

gkk
β T c,k

and thus the

(26)

J.Y. Choi et/ Procedia
al. / Procedia
Computer
1 (2012)
Computer
ScienceScience
00 (2010)
1–10 47–56

Algorithm 1 GTM with Deterministic Annealing
DA-GTM
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:

Set T > T c by using Eq. (22)
Choose randomly M basis function φm (m = 1, ..., M)
Compute Φ whose element φkm = φm (zk )
Initialize randomly W
Compute β by Eq. (11)
while T ≥ 1 do
Update W by Eq. (10)
Update β by Eq. (11)
T ← NextCriticalTemp
end while
return Φ, W, β

53
7

Algorithm 2 Find the next critical temperature
NextCriticalTemp
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:

for k = 1 to K do
Λk ← {∅}
for each λ ∈ eig U x|yk − V x|yk do
if λ < T gkk /β then
Λk ← Λ k ∪ λ
end if
end for
λmax,k ← max(Λk )
T c,k ← βλmax,k /gkk
end for
return T c ← max({T c,k })

where λmax,k is the largest but lower than T gkk /β eigenvalue of the matrix U x|yk − V x|yk . The overall pseudo code is
shown in Algorithm 1 and Algorithm 2.
6. Experiment Results
To compare the performances of our DA-GTM algorithm with the original EM-based GTM (EM-GTM hereafter
for short), we have performed a set of experiments by using two datasets: i) the oil ﬂow data used in the original GTM
paper [6, 7] obtained from the GTM website1 , which has 1,000 points having 12 dimensions for 3-phase clusters
and ii) chemical compound dataset obtained from PubChem database2 , which is a NIH-funded repository for over 60
million chemical molecules and provides their chemical structure ﬁngerprints and biological activities, for the purpose
of chemical information mining and exploration. In this paper we have randomly selected 1,000 element subset having
166 dimensions.
First we have compared for the oil-ﬂow data maximum log-likelihood produced by EM-GTM, DA-GTM with
exponential cooling scheme, and DA-GTM with adaptive cooling scheme and their GTM plots, known as “posteriormean projection” plot [6, 7], in the latent space. For each algorithm, we have executed 10 runs with random setup,
chosen a median result, and drawn a GTM plot as shown in Figure 2. As a result, DA-GTM with adaptive cooling
scheme (c) has produced the largest maximum log-likelihood (best performance), while EM-GTM (a) produced the
smallest maximum log-likelihood (worst performance). Also, as seen in the ﬁgures, a plot with larger maximum
log-likelihood shows better separation of the clusters.
In the next, we have compared the performance of EM-GTM and DA-GTM with 3 cooling schedule schemes:
i) Adaptive, which we have prosed in this paper, ii) Exponential with cooling coeﬃcients α = 0.95 (denoted Exp-A
hereafter), and iii) Exponential with cooling coeﬃcients α = 0.99 (denoted Exp-B hereafter). For each DA-GTM
setting, we have also applied 3 diﬀerent starting temperature 5, 6, and 7, which are all larger than the 1st critical
temperature which is about 4.64 computed by Eq. (22). Figure 3 shows the summary of our experiment results in
which numbers are estimated by the average of 50 executions with random initialization.
As a result shown in Figure 3, DA-GTM algorithm shows strong robustness against local minima since the mean of
log-likelihood from DA-GTM’s outperforms EM-GTM’s by about 11.15% even with smaller deviations. Interestingly,
at the starting temperature 7 and 9, the performance of Exp-B, which used more ﬁner-grain cooling schedule (α =
0.99) than Exp-A (α = 0.95), is lower than Exp-A and even under EM-GTM. This shows that ﬁne-grained cooling
schedule can not guarantee the best solution than corse-grained one in using DA. However, our adaptive cooling
scheme mostly outperforms among other cooling schemes. Figure 4 shows an example of execution of DA-GTM
algorithm with adaptive cooling schedule.
1 GTM

homepage, http://www.ncrg.aston.ac.uk/GTM/
project, http://pubchem.ncbi.nlm.nih.gov/

2 PubChem

54

J.Y. Choi/ Procedia
et al. / Procedia
1 (2012) 47–56
ComputerComputer
Science 00Science
(2010) 1–10

Maximum Log−Likelihood = 1532.555

Maximum Log−Likelihood = 1636.235

1.0

1.0

●● ●
●
● ● ●
●

Dim2

●
● ●

●

0.5
●●●●
●
●
●

●

●

●●

●

●

●
●

0.0

●
●●●

●● ●●

●

●
● ● ●●

●

Dim2

0.5

8

●

●
●

0.0

●

●
●
●
●
● ●●

●

●

−0.5

●

●
●
●
●●● ●●
●

●
● ●
● ●
●

−0.5

●

−1.0

−1.0
−1.0

−0.5

0.0

0.5

1.0

−1.0

−0.5

Dim1

0.0

0.5

1.0

Dim1

(a) EM-GTM

(b) DA-GTM with exp. scheme

Maximum Log−Likelihood = 1721.554
1.0

●
●
●

●
●

●

0.5
●

●

●

Dim2

●
● ●
● ●
●
●
●
●●
●●

●

●
●

0.0
●
●

●

●
●
●
● ●
●
●

−0.5

/DEHOV
$
%
−1.0

&
−1.0

−0.5

0.0

0.5

1.0

Dim1

(c) DA-GTM with adaptive scheme
Figure 2: Comparison of (a) EM-GTM, (b) DA-GTM with exponential, and (c) DA-GTM with adaptive cooling scheme for the oil-ﬂow data having
3-phase clusters(A=Homogeneous, B=Annular, and C=Stratiﬁed conﬁguration). Plots are drawn by a median result among 10 random-initialized
executions for each scheme. As a result, DA-GTM (c) with adaptive cooling scheme has produced the largest maximum log-likelihood and the plot
shows better separation of the clusters, while EM-GTM (a) has output the smallest maximum log-likelihood and the plot shows many overlaps.

We have also compared EM-GTM and DA-GTM with exponential cooling scheme for the 1,000 element PubChem
dataset which has 166 dimensions. As shown in Figure 5, DA-GTM’s output is better than EM-GTM’s since DAGTM’s average maximum log-likelihood (-36,608) is larger than EM-GTM’s (-36,666).

55
9

/RJï/LNHOLKRRG OOK

J.Y. Choi et/ Procedia
al. / Procedia
Computer
1 (2012)
Computer
ScienceScience
00 (2010)
1–10 47–56

7\SH
(0
$GDSWLYH
([Sï$
([Sï%

1$

6WDUWLQJ 7HPSHUDWXUH

Figure 3: Comparison of EM-GTM with DA-GTM in various settings. Average of 50 random initialized runs are measured for EM-GTM, DA-GTM
with 3 cooling schemes (adaptive, exponential with α = 0.95 (Exp-A) and α = 0.99 (Exp-B).

●

7\SH



6WDUWLQJ 7HPSHUDWXUH

7HPS

(YHUDJH /RJ /LNHOLKRRG
RI (0 *70



ï

7HPSHUDWXUH

/RJï/LNHOLKRRG YDOXH

●

ï

●

VW &ULWLFDO 7HPSHUDWXUH
●

ï
7\SH
/LNHOLKRRG
ï







,WHUDWLRQ

(a) Progress of log-likelihood



,WHUDWLRQ

(b) Adaptive changes in cooling schedule

Figure 4: A progress of DA-GTM with adaptive cooling schedule. This example show how DA-GTM with adaptive cooling schedule progresses
through iterations

7. Conclusion
We have solved the GTM problem, originally using the EM method, by using the deterministic annealing (DA) algorithm which is more resilient against the local optima problem and less sensitive to initial conditions, from which the
original EM method was suﬀered. We have also developed a new cooling scheme, called adaptive cooling schedule.
In contrast to the conventional cooling schemes such as linear and exponential ones, all of them are pre-deﬁned and
ﬁxed, our adaptive cooling scheme can adjust granularity of cooling speed in an on-line manner. In our experiment,
our adaptive cooling scheme can outperform other conventional methods.

56

J.Y. Choi
et al. / Procedia
1 (2012) 47–56
/ Procedia
ComputerComputer
Science 00Science
(2010) 1–10

Maximum Log−Likelihood = −36584.455

Maximum Log−Likelihood = −36456.181

1.0

1.0

●

●

●

●

●

0.5

0.5

0.0
●

●
●
●

−0.5

●

●

●
●

● ●
●
●
●

●

●

●

0.0
●

● ●● ●●

●

● ●● ●
●

●

●

Dim2

●
●
●
● ●● ● ●
●●
●
●●

●
● ●

Dim2

10

●

●
●
●
●
●
●

●
●

●

−0.5

●

●
●

●

●

●

●

−1.0

−1.0
−1.0

−0.5

0.0

Dim1

(a) EM-GTM

0.5

1.0

−1.0

−0.5

0.0

0.5

1.0

Dim1

(b) DA-GTM with exp. scheme

Figure 5: Comparison of (a) EM-GTM and (b) DA-GTM with exponential scheme for 1,000 element PubChem dataset having 166 dimensions.
Plots are drawn as a median result of 10 randomly initialized executions of EM-GTM and DA-GTM. The average maximum log-likelihood from
DA-GTM algorithm (-36,608) is larger than one from EM-GTM (-36,666).

References
[1] A. Staiano, L. De Vinco, A. Ciaramella, G. Raiconi, R. Tagliaferri, G. Longo, G. Miele, R. Amato, C. Del Mondo, C. Donalek, et al., Probabilistic principal surfaces for yeast gene microarray data-mining, in: Data Mining (ICDM 2004). Proceedings of Fourth IEEE International
Conference, 2004, pp. 202–208.
[2] D. D’Alimonte, D. Lowe, I. Nabney, V. Mersinias, C. Smith, MILVA: An interactive tool for the exploration of multidimensional microarray
data (2005).
[3] A. Vellido, P. Lisboa, Handling outliers in brain tumour MRS data analysis through robust topographic mapping, Computers in Biology and
Medicine 36 (10) (2006) 1049–1063.
[4] D. Maniyar, I. Nabney, Visual data mining using principled projection algorithms and information visualization techniques, in: Proceedings
of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining, ACM, 2006, p. 648.
[5] A. Vellido, Assessment of an Unsupervised Feature Selection Method for Generative Topographic Mapping, Lecture Notes in Computer
Science 4132 (2006) 361.
[6] C. Bishop, M. Svens´en, C. Williams, GTM: The generative topographic mapping, Neural computation 10 (1) (1998) 215–234.
[7] C. Bishop, M. Svens´en, C. Williams, GTM: A principled alternative to the self-organizing map, Advances in neural information processing
systems (1997) 354–360.
[8] J. Kruskal, Multidimensional scaling by optimizing goodness of ﬁt to a nonmetric hypothesis, Psychometrika 29 (1) (1964) 1–27.
[9] T. Kohonen, The self-organizing map, Neurocomputing 21 (1-3) (1998) 1–6.
[10] A. Dempster, N. Laird, D. Rubin, Maximum likelihood from incomplete data via the EM algorithm, Journal of the Royal Statistical Society.
Series B (Methodological) 39 (1) (1977) 1–38.
[11] N. Ueda, R. Nakano, Deterministic annealing EM algorithm, Neural Networks 11 (2) (1998) 271–282.
[12] K. Rose, Deterministic annealing for clustering, compression, classiﬁcation, regression, and related optimization problems, Proceedings of
the IEEE 86 (11) (1998) 2210–2239.
[13] K. Rose, E. Gurewitz, G. Fox, A deterministic annealing approach to clustering, Pattern Recognition Letters 11 (9) (1990) 589–594.
[14] K. Rose, E. Gurewitz, G. Fox, Statistical mechanics and phase transitions in clustering, Physical Review Letters 65 (8) (1990) 945–948.
[15] K. Rose, E. Gurewitz, G. Fox, Vector quantization by deterministic annealing, IEEE Transactions on Information Theory 38 (4) (1992)
1249–1257.
[16] T. Hofmann, J. Buhmann, Pairwise data clustering by deterministic annealing, IEEE Transactions on Pattern Analysis and Machine Intelligence 19 (1) (1997) 1–14.
[17] X. Yang, Q. Song, Y. Wu, A robust deterministic annealing algorithm for data clustering, Data & Knowledge Engineering 62 (1) (2007)
84–100.
[18] H. Klock, J. Buhmann, Multidimensional scaling by deterministic annealing, Lecture Notes in Computer Science 1223 (1997) 245–260.
[19] L. Chen, T. Zhou, Y. Tang, Protein structure alignment by deterministic annealing, Bioinformatics 21 (1) (2005) 51–62.
[20] S. Kirkpatric, C. Gelatt, M. Vecchi, Optimization by simulated annealing, Science 220 (4598) (1983) 671–680.
[21] E. Jaynes, On the rationale of maximum-entropy methods, Proceedings of the IEEE 70 (9) (1982) 939–952.
[22] D. Aloise, A. Deshpande, P. Hansen, P. Popat, NP-hardness of Euclidean sum-of-squares clustering, Machine Learning 75 (2) (2009) 245–
248.

