Procedia Computer
Science
Procedia Computer
Procedia
ComputerScience
Science001(2010)
(2012)1–10
1407–1416

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Stochastic programming with binary second stage variables
Takayuki Shiina1,∗
Chiba Institute of Technology, 2-17-1 Tsudanuma, Narashino, Chiba 275-0016, JAPAN

Abstract
We consider a class of stochastic programming with binary recourse variables in which a ﬁxed cost is imposed if
the value of the continuous recourse variable is strictly positive. The algorithm of a branch-and-cut method to solve
the problem is developed by using the property of the expected recourse function. The problem is applied to a power
generating system. The numerical experiments show that the proposed algorithm is quite eﬃcient. The mathematical
programming model deﬁned in this paper is quite useful for a variety of design and operational problems.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: stochastic programming with recourse, branch-and-cut, integer programming

1. Introduction
Stochastic programming (Birge [3], Birge and Louveaux [4], Kall and Wallace [7]) deals with optimization under
uncertainty. A stochastic programming problem with recourse is referred to as a two-stage stochastic problem. In the
ﬁrst stage, a decision has to be made without complete information on random factors. After the value of random
variables are known, recourse action can be taken in the second stage. For the continuous stochastic programming
problem with recourse, an L-shaped method (Van Slyke and Wets [20]) is well-known. The L-shaped method was
used to solve stochastic programs having discrete decisions in the ﬁrst stage (Laporte and Louveaux[13]). This method
was applied to solve a stochastic concentrator location problem (Shiina [17, 18]).
If integer variables are involved in a second stage problem, optimality cuts based on the Benders [2] decomposition
do not provide facets of the epigraph of recourse function. It is diﬃcult to approximate the recourse function which is
in general nonconvex and discontinuous, since the function is deﬁned as the value function of the second stage integer
programming problem. Carøe and Tind [5] generalized the L-shaped method for a mixed integer ﬁrst and second stage
variable. But from a practical standpoint, the method for this implementation is not known because it is necessary
to add nonlinear and discontinuous cuts to the master problem. Louveaux and van der Vlerk [14] investigated the
property of the stochastic programs with simple integer recourse. Klein Haneveld, Stougie, and van der Vlerk [11, 12]
proposed an algorithm to construct a convex envelope of the recourse function. Ahmed, Tawarmalani, and Sahinidis[1]
developed a ﬁnite algorithm based on the branching of the ﬁrst stage integer variables.
However, variables involved in the stochastic program with simple integer recourse are restricted to having a
nonnegative integer value. Such restriction of variables to pure integers makes application of the problem diﬃcult.
∗

Email address: shiina.takayuki@it-chiba.ac.jp (Takayuki Shiina)
author

1 Corresponding

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.156

1408

T.T.Shiina
Science001 (2010)
(2012)1–10
1407–1416
Shiina/ /Procedia
Procedia Computer
Computer Science

2

Therefore, we consider a practical stochastic programming model which is applicable to various real problems. In
this paper, we deﬁne the stochastic program with binary recourse variables in which a ﬁxed cost is imposed if the
value of the continuous recourse variable is strictly positive. This mathematical programming model is quite useful
for a variety of design and operational problems which arise in diverse contexts, such as investment planning, capacity
expansion, network design and facility location.
In Section 2, we deﬁne the problem, which is a natural extension of the continuous simple recourse. In Section 3,
we investigate the property of the recourse function. The algorithm of a branch-and-cut method to solve the problem
is shown in Section 4. The electric power industry is undergoing restructuring and deregulation, and it is necessary
for electric power utilities or power generators to incorporate uncertainty into power generation planning. Hence, the
development of an eﬀective algorithm to solve the stochastic programming problem is required. Shiina and Birge [19]
developed an algorithm which solves the short-term scheduling of power plants. In Section 5, we present numerical
results for a power generating system obtained from our solution approach.
2. Stochastic Programming with Fixed Charge Recourse
In this section, we deﬁne the stochastic program with binary recourse variables as (SP), in which a positive ﬁxed
cost is imposed if the value of the continuous recourse variable is strictly positive. The problem (SP) requires a ﬁxed
charge to be incurred, as compared to the problem with simple continuous recourse.
(SP): min c x + Q(x)
subject to Ax = b
x≥0
S

where

Q(x) =

p s Q(x, ξ s )
s=1

Q(x, ξ s ) = min{q y(ξ s ) + f z(ξ s ) |

y(ξ s ) ≥ ξ s − T x,
0 ≤ y(ξ s ) ≤ Mz(ξ s ),
z(ξ s ) ∈ {0, 1}n2 }, s = 1, . . . , S

In the formulation of (SP), c is a known n1 -vector, b a known m1 -vector, q(> 0) a known n2 -vector, f (> 0) a known
n2 -vector, and A, T , known matrices of size m1 × n1 and n2 × n2 , respectively. The problem (SP) can be viewed as
a natural extension of the problem (DEP) with m2 = n2 , W = I. The ﬁrst stage decisions are represented by the
n1 -vector x. The second stage decisions are n2 (= m2 )-vector y(ξ) ≥ 0 and z(ξ), where z(ξ) is restricted to n2 -binary
vector. If the value of the i-th recourse variable yi (ξ s ) is positive, the value of zi (ξ s ) must be one. Hence a ﬁxed cost fi
is imposed on the recourse cost when yi (ξ s ) > 0.
Let ξ˜i and Ξi be the i-th component of the random vector ξ˜ and the support of ξ˜i , respectively. We make the
following assumptions.
Assumption 2.1. The random variables ξ˜i , i = 1, . . . , n2 are independent and follow a discrete distribution. A probability pis is associated with each outcome ξis , s = 1, . . . , |Ξi | of ξ˜i . The random variable ξ˜i takes only positive values
and is bounded as 0 < ξis < ∞, s = 1, . . . , |Ξi |, i = 1, . . . , n2 .
Assumption 2.2. The ﬁrst stage feasible set {x|Ax = b, x ≥ 0} is non-empty and compact.
Then, the support of ξ˜ is described as Ξ = Ξ1 × · · · × Ξn2 . And the positive constant M can be taken so as to satisfy
M ≥ max{ξis , s = 1, . . . , |Ξi |, i = 1, . . . , n2 }. From Assumptions 1 and 2, the feasible solutions y(ξ s ) and z(ξ s ) exist for
all ﬁrst stage feasible solution x and scenario ξ s . So (SP) has a relatively complete recourse.
Then we deﬁne the new variables χ = T x, where χ is called a tender to be bid against random outcomes. The
problem (SP) can be transformed into (SPT) as follows.

T. Shiina
/ Procedia
Computer
Science
1 (2012)
1407–1416
T. Shiina
/ Procedia
Computer
Science
00 (2010)
1–10

1409
3

(SPT): min c x + Ψ(χ)
subject to Ax = b
x≥0
χ = Tx
S

where

p s ψ(χ, ξ s )

Ψ(χ) =
s=1

ψ(χ, ξ s ) = min{q y(ξ s ) + f z(ξ s ) |

y(ξ s ) ≥ ξ s − χ,
0 ≤ y(ξ s ) ≤ Mz(ξ s ),
z(ξ s ) ∈ {0, 1}n2 }, s = 1, . . . , S

The new recourse function ψ(χ, ξ) of χ = (χ1 , . . . , χn2 ) is separable in χi , i = 1, . . . , n2 .
n2

ψi (χi , ξi )

ψ(χ, ξ) =

(1)

i=1

ψi (χi , ξi ) = min{qi yi (ξi ) + fi zi (ξi )

|

yi (ξi ) ≥ ξi − χi ,
0 ≤ yi (ξi ) ≤ Mzi (ξi ),

zi (ξi ) ∈ {0, 1}}

(2)

It is shown that the expected recourse function Ψ(χ) is also separable in χi , i = 1, . . . , n2 as (3), where Ψi (χi ) =
|Ξi | s
s
s=1 pi ψi (χi , ξi ) denotes the expectation of the i-th recourse function (2).
S

p s ψ(χ, ξ s ) =

Ψ(χ) =
s=1

s1 =1

n2

(

=

|Ξ1 |

|Ξ1 |

i=1 s1 =1

···

|Ξn2 |

pisi

sn2 =1

···

n2

|Ξn2 |
sn2 =1

sn

p1s1 · · · pn22

s

p j j )ψi (χi , ξisi ) =

n2

ψi (χi , ξisi )

i=1
n2

|Ξi |

pisi ψi (χi , ξisi )

i=1 si =1

j=1
j i

n2

Ψi (χi )

=

(3)

i=1

Example 1 Let x = (x1 , x2 ) , ξ˜ = (ξ˜1 , ξ˜2 ) , and set the parameters as
qi = 2, fi = 4, i = 1, 2 and T =

1.2
0.5

0.4
1.0

.

Suppose ξ˜1 , ξ˜2 follow the discrete uniform distribution with Ξi = {1, 2, 3, 4}, i = 1, 2 and pis = 1/4,
i = 1, 2, s = 1, . . . , 4. Two distinct expected recourse functions Q(x) and Ψ(χ) are illustrated in Figure 1. The
separability of Ψ(χ) in tender variables χi , i = 1, 2 is easily seen.

3. Property of the Recourse Function
(4).

The optimal solution (y∗i (ξi ), z∗i (ξi )) of the problem (2) to deﬁne the i-th recourse function ψi (χi , ξi ) is described as
(y∗i (ξi ), z∗i (ξi )) =

(ξi − χi , 1)
(0, 0)

if ξi > χi
otherwise

(4)

|Ξi | s
s
s
∗ s
∗ s
i|
Therefore, Ψi (χi ) is calculated as Ψi (χi ) = |Ξ
s=1 pi ψi (χ, ξ ) =
s=1 pi (qi yi (ξi ) + fi zi (ξi )). Without loss of generality,
it is assumed that the possible realization of random variable ξi is monotonically ordered so that ξi1 ≥ ξi2 ≥ · · · ≥ ξi|Ξi | .
The expected i-th recourse function Ψi (χi ) is calculated as follows.

1410

T.T.Shiina
Science001 (2010)
(2012)1–10
1407–1416
Shiina/ /Procedia
Procedia Computer
Computer Science

18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
00

Q(x)

1

2
x2

3

4

5

5

4

3

2

1
x1

0

18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
00

4

Ψ(χ)

1

2
χ2

3

4

5

5

4

3

2

1
χ1

0

Figure 1: Expected recourse function Q(x) and Ψ(χ)

⎧
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨
Ψi (χi ) = ⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎩

0,
p1i qi (ξi1 − χi ) + fi ,
p2i qi (ξi2 − χi ) + fi + p1i qi (ξi1 − χi ) + fi ,
..
.
j−1
k=1

if ξi1 ≤ χi
if ξi2 ≤ χi < ξi1
if ξi3 ≤ χi < ξi2

pki qi (ξik − χi ) + fi ,

if ξij ≤ χi < ξij−1

pki qi (ξik χi ) + fi ,

if 0 ≤ χi < ξi|Ξi |

(5)

..
.

|Ξi |
k=1

Proposition 3.1. The expected i-th recourse function Ψi (χi ) is discontinuous at the points χi = ξis , s = 1, . . . , |Ξi |, and
Ψi (χi ) is lower semicontinuous (l.s.c.).
From Proposition 3.1, it is evident that the objective function of (SPT) is lower semicontinuous. Therefore,
problem (SPT) has an optimal solution since the ﬁrst stage feasible set is compact and nonempty from Assumption
2.2.
Then we consider the lower bound of the expected recourse function, taking the convex envelope of the function
Ψi (χi ). To obtain the lower bound, we exploit the algorithm to compute the convex hull of a given set of n points
in a plane. Computing the convex hull is one of the most important research problems in computational geometry
(Preparata-Shamos [16]). Graham [6] proposed a method of computing the convex hull with O(n log n) time.

1411
5

T. Shiina
/ Procedia
Computer
Science
1 (2012)
1407–1416
T. Shiina
/ Procedia
Computer
Science
00 (2010)
1–10

Example 2 The recourse function Ψ1 (χ1 ) of Example 1 and its lower bound are illustrated in Figure 2. The function
is discontinuous at χ1 = 1, 2, 3, 4.

9
8
7
Expected Recourse Function Ψ1(χ1)
Lower Bound of Ψ1(χ1)

Ψ1(χ1)

6
5
4
3
2
1
0
0

1

2

3

4

5

χ1
Figure 2: Expected recourse function and its lower bound

4. Branch-and-Cut Method
In this section, we develop a branch-and-cut method to solve (SPT). The algorithm to obtain the lower bound for
the expected recourse function Ψi (χi ) is provided in the previous section. Let cli ( j), j = 1, . . . , l(i) be the indices for
the scenarios involved in the set of extreme points of the convex envelope of Ψi (χi ). The number of extreme points
involved in the set is denoted as l(i). We deﬁne the smallest upper bound for Ψi (χi ) as θi . The following (l(i) − 1) valid
inequalities of (6) provide the lower bound for Ψi (χ).
θi ≥

Ψi (ξicli ( j+1) ) − Ψi (ξicli ( j) )
ξicli ( j+1)

−

ξicli ( j)

(χi − ξicli ( j) ) + Ψi (ξicli ( j) ), j = 1, . . . , l(i) − 1

(6)

The validity of (6) is evident because the inequality (6) passes two points ξicli ( j) , Ψi (ξicli ( j) ) and ξicli ( j+1) , Ψi (ξicli ( j+1) ) .
First, we solve the following problem (M0 ) in which all inequalities of (6) are added.
n2

(M0 ):min c x +
subject to

θi
i=1

Ax = b
Tx = χ
x≥0
θi ≥ 0, i = 1, . . . , n2
θi ≥

cli ( j+1)

cl ( j)
)−Ψi (ξi i ))
cli ( j+1)
cli ( j)
ξi
−ξi

Ψi (ξi

(χi − ξicli ( j) ) + Ψi (ξicli ( j) ), j = 1, . . . , l(i) − 1, i = 1, . . . , n2

After solving the problem (M0 ), the optimal solution (x∗ , χ∗ , θ1∗ , . . . , θn∗2 ) is obtained. If the relation θi∗1 < Ψi1 (χ∗i1 ) and
ξij11 +1 ≤ χi1 < ξij11 hold for some random variable i1 and scenario j1 , the problem (M0 ) is split into the following two

1412

T.T.Shiina
Science001 (2010)
(2012)1–10
1407–1416
Shiina/ /Procedia
Procedia Computer
Computer Science

6

9
8
7

Ψ(χ)

6
5
4

Problem M1

Problem M2

3
2
1
0
0

1

2

3

4

5

χ
Figure 3: Branching into two subproblems (M1 ) and (M2 )

problems (M1 ) and (M2 ).
n2

(M1 ):min c x +
subject to

θi
i=1

Ax = b
Tx = χ
x≥0
θi ≥ 0, i = 1, . . . , n2
cl ( j+1)

θi ≥

θ i1 ≥
χi1 ≤

(M2 ):min c x +
subject to

cl ( j)

i
)−Ψi (ξi i )
(χi − ξicli ( j) ) + Ψi (ξicli ( j) ), j = 1, . . . , l(i)
cl ( j+1)
cl ( j)
ξi i
−ξi i
j1 +1
j1
j
Ψi1 (ξi )−{Ψi1 (ξi )+pi 1 fi1 }
1
1
1
(χi1 − ξij11 ) + Ψi1 (ξij11 ) + pij11 fi1
j1 +1
j1
ξi −ξi
1
1
ξij11
n2

Ψi (ξi

− 1, i = 1, . . . , n2

θi
i=1

Ax = b
Tx = χ
x≥0
θi ≥ 0, i = 1, . . . , n2
θi ≥

cli ( j+1)

Ψi (ξi

χi1 ≥ ξij11

cli ( j)

)−Ψi (ξi

cli ( j+1)

ξi

cli ( j)

−ξi

)

(χi − ξicli ( j) ) + Ψi (ξicli ( j) ), j = 1, . . . , l(i) − 1, i = 1, . . . , n2

The linear constraints χi1 ≤ ξij1 and ξij1 ≤ χi1 are added to create subproblems (M1 ) and (M2 ), respectively. These
constraints represent branching. At the same time, the optimality cut (7) is added to subproblem (M1 ).
θi1 ≥

Ψi1 (ξij11 +1 ) − {Ψi1 (ξij11 ) + pij11 fi1 }
ξij11 +1 − ξij11

(χi1 − ξij11 ) + Ψi1 (ξij11 ) + pij11 fi1

(7)

Figure 3 shows a decomposition of problem (M0 ) into subproblems (M1 ) and (M2 ). The optimality cut (7) provides
the maximal lower bound for Ψi (χi ) if χi1 ∈ [ξij11 +1 , ξij11 ), because the right-hand side of (7) equals Ψi1 (χi1 ).

T. Shiina
/ Procedia
Computer
Science
1 (2012)
1407–1416
T. Shiina
/ Procedia
Computer
Science
00 (2010)
1–10

1413
7

Branch-and-Cut method to solve (SPT)
Step 0 Set N = 0, w∗ = ∞ and P = {M0 }.
Step 1 If P = φ, then stop.
Step 2 Choose a problem Mk ∈ P. Set P = P \ Mk .
Step 3 Solve Mk . If Mk is infeasible, go to Step 1. If Mk has an optimal solution,
let (xk , χk , θ1k , . . . , θnk2 ) be the optimal solution. Calculate the lower bound wk =
2
θik . If wk ≥ w∗ , go to Step 1. Otherwise, if wk < w∗ , go to Step 4.
c xk + ni=1
k
Step 4 If θi ≥ Ψi (χki ), i = 1, . . . , n2 , reﬁne the temporary solution as (x∗ , χ∗ , θ1∗ , . . . , θn∗2 ) =
(xk , χk , θ1k , . . . , θnk2 ). Go to Step 1.
Step 5 If θi∗1 < Ψi1 (χ∗i1 ) and ξij11 +1 ≤ χi1 < ξij1 for some scenario j1 of random variable i1 ,
Divide problem Mk into MN+1 and MN+2 . Let MN+1 and MN+2 be the problem which
is obtained by adding optimality cut (7) plus χi1 ≤ ξij1 to Mk and the problem which is
obtained by adding the constraint χi1 ≥ ξij1 to Mk . P = P ∪ {MN+1 , MN+2 }, N = N + 2
and go to Step 1.
In the algorithm of branch-and-cut, the number of the interval in which the optimality cut (7) yields the correct
value of the expected recourse function, increases by at least one after branching. Finite convergence comes from the
assumption that each element of random vector ξ˜ follows a discrete distribution with ﬁnite support.
5. Application to Power Generation Problem
We consider the application of the problem (SPT) to the electric power generation problem. The basic objective
of the problem is to determine an investment of new technology and to operate power plants to ensure an economic
and reliable supply to electricity demand. The load patterns are modeled by load duration curves. For long-range
planning, block approximations of load duration curves are used. A load duration curve represents the number of
hours in which the load equals or exceeds the given load value. Since the long-term planning problems involve
uncertain data, mathematical programming models which can deal with stochastic factors have been developed. In
Murphy, Sen, and Soyster [15], the uncertainty in demand is incorporated into a mathematical programming model.
In this paper, we consider a stochastic programming model in which the demand in each load level is uncertain.
We assume that there are n1 generators and the demand is given by the load duration curve with n2 load levels.
Suppose the demand of load level j is deﬁned as a random variable ξ˜ j , and t j , the duration of load level j, is ﬁxed.
Let ξ1 , . . . , ξn2 be the realizations of random variables ξ˜1 , . . . , ξ˜n2 , and Ξ1 , . . . , Ξn2 be their supports. These random
variables are integrated as a random vector ξ˜ = (ξ˜1 , . . . , ξ˜n2 ) , and the support Ξ of ξ˜ is described as Ξ = Ξ1 × · · · × Ξn2 .
The ﬁrst stage decision variable is the available capacity of an existent generator i for the load level j denoted by
xi j , i = 1, . . . , n1 , j = 1, . . . , n2 . Let ai j and ri be the fuel consumption rate of generator i at load level j and the fuel
price for generator i. Here, the ﬁrst stage cost of power generation is described as ci j = ai j t j ri . For the ﬁrst stage
constraints, let bi be the upper bound for the amount of fuel consumption of generator i.
Given a ﬁrst stage decision x, the realization of random demand ξ of ξ˜ becomes known. After observing the
realization ξ, the second stage decisions y j (ξ j ) and z j (ξ j ) are taken to meet the electricity demand. The amount of
unserved electricity demand has to be supplied by a new plant constructed in the second stage. The recourse variables
y j (ξ j ) and z j (ξ j ) denote the power supplied for load level j and the binary decision which represents whether a new
generator is constructed or not for load level j. The recourse costs q j and f j are the operating cost and the construction
cost. The formulation of the problem is described as (PGP). The ﬁrst constraint of the second stage problem to deﬁne
ψ j (χ j , ξ j ) says the demand must be satisﬁed, whereas the second constraint for the recourse problem expresses that
power is not supplied from the new plant if it is not constructed.

1414

T.T.Shiina
Science001 (2010)
(2012)1–10
1407–1416
Shiina/ /Procedia
Procedia Computer
Computer Science

8

n2

n1

(PGP): min

ci j xi j + Ψ(χ)
i=1 j=1
n2

subject to
j=1

ai j xi j ≤ bi , i = 1, . . . , n1

xi j ≥ 0, i = 1, . . . , n1 , j = 1, . . . , n2
n1

xi j , j = 1, . . . , n2

χj =
i=1

S

p s ψ(χ, ξ s )

where Ψ(χ) =
s=1

n2

s

ψ(χ, ξ ) =
j=1

ψ j (χi , ξ sj ), s = 1, . . . , S

⎧
y j (ξ sj ) + χ j ≥ ξ sj
⎪
⎪
⎨
s
s
= min ⎪
q y (ξ ) + f j z j (ξ j ) 0 ≤ y j (ξ sj ) ≤ Mz j (ξ sj )
⎪
⎩ j j j
z j (ξ sj ) ∈ {0, 1}n2
s = 1, . . . , |Ξ j |, j = 1, . . . , n2

ψ j (χ j , ξ sj )

⎫
⎪
⎪
⎬
,
⎪
⎪
⎭

The branch-and-cut method for the electric power generation problem was implemented using ILOG OPL Development Studio on DELL DIMENSION 8300 (CPU: Intel Pentium(R)4, 3.20GHz). The simplex optimizer of CPLEX
9.0 was used to solve the subproblem. We compare the branch-and-cut method with the traditional branch-and-bound
method. For the branch-and-bound method, the mixed integer optimizer of CPLEX 9.0 was used to solve the deterministic equivalent problem of (PGP). In both the branch-and-bound and branch-and-cut algorithms, depth-ﬁrst search
plus backtracking was exploited for node selection.
The problems considered in this section consist of 10, 15 and 20 load levels and 10 generators. Each load has 10,
15 and 20 scenarios. The results of the numerical experiments appear in Table 1, where LB, U B and OPT denote
the optimal objective value of the linear programming problem M0 , the best objective obtained by the dynamic slope
scaling procedure (DSSP) developed by Kim and Pardalos [8, 9, 10] and the optimal objective value obtained by the
branch-and-cut(BC) method or the branch-and-bound(BB) method, respectively. The gap described as (U B − LB)/LB
seems to be relatively large, while the relative errors of DSSP described as (U B − OPT )/OPT are all within 2 %. It
is observed that in all cases the CPU time of DSSP is less than that of BC and BB. The heuristic approach DSSP is
eﬃcient in solution time.
In order to see the eﬃciency of the exact algorithm, we compare BC with BB. It is noticed that BC requires
less branchings than BB, and the same objective value is obtained. The results show that the branch-and-cut method
performs reasonably well on relatively large problems. The computing time of BB tends to rise as the size of the
problem increases. Especially in the cases with 20 load levels and 20 scenarios, the traditional branch-and-bound
method did not terminate within 10,000 seconds. The results indicate that problems become more diﬃcult when the
number of scenarios in each load level becomes larger. This can be explained as follows. The upper bound for the
n2
number of subproblems generated in BB is O(2 j=1 |Ξ j | ) since the number of binary variables involved in (PGP) is
n2
n2
j=1 |Ξ j |. Similarly, the upper bound for the number of subproblems generated in BC is O(Π j=1 |Ξ j |) since the domain
of tender variable χ j is divided into at most |Ξ j | intervals in the branch-and-cut procedure. Thus, there are at the
maximum 210×10 ≈ 100010 subproblems to compare for traditional BB, whereas there are 1010 subproblems for BC
with n j = 10 and |Ξ j | = 10.
6. Concluding Remarks
In this paper, we have introduced a class of stochastic programming problem with binary recourse variables in
which a ﬁxed cost is imposed if the value of the continuous recourse variable is strictly positive. The algorithm of
a branch-and-cut method to solve the problem is developed and numerical results for a power generating system are
presented. In order to see the eﬃciency of the exact algorithm, we compared the branch-and-cut with the traditional

T. Shiina
/ Procedia
Computer
Science
1 (2012)
1407–1416
T. Shiina
/ Procedia
Computer
Science
00 (2010)
1–10

1415
9

Table 1: Computational results

Number Number Fixed
Gap
Relative
CPU
of load
of
cost
(%)
Error(%)
time
(sec)
levels
scenarios
rate U B−LB
U B−OPT
LB ×100
OPT ×100
n2
|Ξ j |
f j /q j
DSSP
BC
BB
10
10
500
5.42
1.11
0.32
2.43
1.56
10
10
1000
7.65
1.46
0.32
1.59
1.81
10
10
1500
9.59
1.73
0.32
2.31
3.28
10
15
500
3.95
1.76
0.50
4.36
15.10
10
15
1000
6.60
1.77
0.50
3.36
24.01
10
15
1500
8.05
1.68
0.52
4.72
16.22
10
20
500
3.78
1.46
0.20
3.63
75.45
10
20
1000
6.39
1.13
0.73
6.99
82.42
10
20
1500
7.83
1.44
0.75
8.52
205.82
15
10
500
3.48
0.58
0.45
8.12
31.62
15
10
1000
4.38
0.72
0.46
5.67
73.07
15
10
1500
5.01
1.25
0.48
7.86
52.53
15
15
500
3.14
0.30
0.28
21.74 1182.05
15
15
1000
3.11
0.55
0.73
14.60
718.30
15
15
1500
5.60
0.84
0.25
10.95 1084.13
15
20
500
1.67
0.45
0.31
13.39 3878.72
15
20
1000
3.18
0.63
0.32
9.16 2901.50
15
20
1500
5.37
0.76
0.28
8.90 3191.11
20
10
500
2.71
0.37
0.35
10.80
223.78
20
10
1000
4.21
0.95
0.32
20.36
36.22
20
10
1500
5.63
0.87
0.31
9.77
56.40
20
15
500
2.09
0.34
0.37
27.04 4279.36
20
15
1000
3.74
0.69
0.39
17.61 1328.03
20
15
1500
5.07
1.00
0.37
40.70 1427.94
20
20
500
1.67
0.29
0.38 204.46
–
20
20
1000
3.80
0.68
0.37 135.27
–
20
20
1500
4.73
0.80
0.38
49.03
–
The symbol (−) means that branch-and-bound did not terminate within 10,000 seconds.

Number
of
subproblems
BC
BB
338
1454
219
1442
328
3348
449
12003
395
17054
560
11402
474
26927
705
36550
870
98307
811
26687
578
44444
793
35499
789
492685
1245
281900
1009
377704
1117 1019114
756
657882
742
709039
836
158993
1583
21119
745
32604
1952 1313029
1256
423012
2784
345240
13005
–
8771
–
3232
–

branch-and-bound. It is noticed that BC requires less branchings than BB. The results show that the branch-and-cut
method performs reasonably well on relatively large problems.
References
[1] S. Ahmed, M. Tawarmalani, and N. V. Sahinidis, A ﬁnite branch-and-bound algorithm for two-stage stochastic integer programs. Mathematical Programming, 100(2005) 355-377.
[2] J. F. Benders, Partitioning procedures for solving mixed variables programming problems. Numerische Mathematik, 4(1962), 238-252.
[3] J. R. Birge, Stochastic programming computation and applications. INFORMS Journal on Computing, 9(1997) 111–133.
[4] J. R. Birge and F. Louveaux, Introduction to Stochastic Programming (Springer-Verlag, 1997).
[5] C. C. Carøe and J. Tind, L-shaped decomposition of two-stage stochastic programs with integer recourse. Mathematical Programming,
83(1998) 451-464.
[6] R. L. Graham, An eﬃcient algorithm for determining the convex hull of a ﬁnite planar set. Information Processing Letters, 1(1972) 132-133.
[7] P. Kall and S. W. Wallace, Stochastic Programming (John Wiley & Sons, 1994).
[8] D. Kim and P. M. Pardalos, A solution approach to the ﬁxed charge network ﬂow problem using a dynamic slope scaling procedure. Operations Research Letters, 24 (1999) 195-203.

1416

T.T.Shiina
ComputerScience
Science
(2012)1–10
1407–1416
Shiina // Procedia
Procedia Computer
001(2010)

10

[9] D. Kim and P. M. Pardalos, Dynamic slope scaling and trust interval techniques for solving concave piecewise linear network ﬂow problems.
Networks, 35(2000) 216-222.
[10] D. Kim and P. M. Pardalos, A dynamic domain contraction algorithm for nonconvex piecewise linear network ﬂow problems. Journal of
Global Optimization, 17(2000) 225-234.
[11] W. K. Klein Haneveld, L. Stougie, and M. H. van der Vlerk, On the convex hull of the simple integer recourse objective function, Annals of
Operations Research, 56(1995) 209–224.
[12] W. K. Klein Haneveld, L. Stougie, and M. H. van der Vlerk, An algorithm for the construction of convex hulls in simple integer recourse
programming. Annals of Operations Research, 64(1996) 67–81.
[13] G. Laporte and F. V. Louveaux, The integer L-shaped method for stochastic integer programs with complete recourse. Operations Research
Letters, 13(1993) 133–142.
[14] F. V. Louveaux and M. H. van der Vlerk, Stochastic programming with simple integer recourse. Mathematical Programming, 61(1993)
301–325.
[15] F. H. Murphy, S. Sen, and A. L. Soyster, Electric utility capacity expansion planning with uncertain load forecasts. IIE Transactions, 14(1982)
52–59.
[16] F. P. Preparata and M. I. Shamos, Computational Geometry: An Introduction (Springer-Verlag, 1985).
[17] T. Shiina, L-shaped decomposition method for multi-stage stochastic concentrator location problem. Journal of the Operations Research
Society of Japan, 43(2000) 317–332.
[18] T. Shiina, Stochastic programming model for the design of computer network (in Japanese). Transactions of the Japan Society for Industrial
and Applied Mathematics, 10(2000) 37–50.
[19] T. Shiina and J. R. Birge, Stochastic unit commitment problem. International Transactions in Operational Research, 11(2004) 19-32.
[20] R. Van Slyke and R. J.-B. Wets, L-shaped linear programs with applications to optimal control and stochastic linear programs. SIAM Journal
on Applied Mathematics, 17(1969) 638-663.

