Procedia Computer Science 1 (2012) 1465–1474
Procedia Computer Science 00 (2009) 000±000

Procedia
Computer
www.elsevier.com/locate/procedia
Science
www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

A semi-formal specification for a generic model of artificial stock
markets
Sadek Benhammadaa,*, Salim Chikhib
a,b

MISC Laboratory, route de Aïn El Bey, Computer Science Department, Mentouri University, Constantine 25017, Algeria

Abstract
Artificial stock markets are models design to capture essential properties of real stock markets in order to reproduce, analy ze
or understand market dynamics with computational experiments. Since there is a large variety of real stock markets and trading
strategies, a large number of different artificial sock markets have been proposed. The researchers need constantly to test new
structures of markets and new strategies of investment. In this paper we use Gaia methodology to provide a semi-formal
specification of a generic model for artificial stock markets. The model is flexible in the sense that it can be used to develop
several market structures and trading strategies, it can also adapted to support additional aspects.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝
Keywords:Artificial stock market; multi-agents simulation; Agent-based computaional economic; agent oriented methodology; GAIA; AUML.

1. Introduction
Despite the large amount of research in finance and economics, the behavior of financial markets is still poorly
understood, and there is much controversy about the market mechanisms that lead to the observed price
developments of the assets. Why would someone like to understand market dynamics? Investors and financial
analysts, would like to understand them in order to make valuable investments. Market regulators need to
understand them in order to improve market quality while scientists aim to test and state financial hypotheses [1].
Artificial stock markets are models of real stock markets, designed with the aim to study market dynamics. In
agent-based artificial stock markets software agents are used to represent traders on a market. The idea to use
intelligent software agents for studying market dynamics originates from the agent-based computational economics
approach, the computational study of economies modeled as evolving systems of autonomous interacting agents [2].
Since there is a large variety of real stock markets and trading strategies, a large number of different artificial
sock markets have been proposed. Consequently, a number of researchers have proposed frameworks which can be
configured to support multiple artificial stock markets (see [3,4,5]). However, the researchers need constantly to test
new structures of markets and new strategies of investment which are not taken into account by these frameworks.
In this paper we use Gaia methodology to provide a semi-formal specification of a generic model for artificial
stock markets. We specify a basic structure of market and a generic behavior of agents, and we give choice for
developer to realize any implementation deemed appropriate. Through proper configuration, multiple market

* Corresponding author. Tel.: +213-794-417-196 ; fax: +213-31-818-817.
E-mail address: benhammada@umc.edu.dz

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.162

1466

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474
Author name / Procedia Computer Science 00 (2010) 000±000

structures and infinite range of trading strategies can be supported.
This paper is organized as follows: section 2 is a quick review of artificial stock markets, section 3 is devoted to a
double auction market, section 4 is a brief review of Gaia methodology which used to analyze and design, section 5
addresses the model analysis and design using Gaia. Finally, Section 5 concludes and outlines open research
directions.
2. Artificial stock market
Artificial stock markets are models design to capture essential properties of real stock markets in order to
reproduce, analyze or understand market dynamics with computational experiments [3]. Individuals are
represented by (software) agents interacting in an artificial environment. By using agents in studying market
dynamics, heterogeneous, boundedly-rational, and adaptive behavior of individuals can be represented and its
impact on market dynamics assessed [4]. Since the first artificial stock market was developed in the early nineties at
the Santa-Fe Institute [6]. Many market models have been developed. Though almost all of them aim to understand
market dynamics with the same multi-agents simulation methods, they all exhibit different properties: some are
synchronous, while others are asynchronous. Some of them require agents to emit realistic orders
(direction/price/quantity) while others only require a direction (buy/sell) to compute the new stock price [3]. A good
and recent overview of ASMs can be found in [5].
3. The continuous double auction
We choose to propose a model of a double auction market because it is the most widely used method of price
formation in modern financial markets [7], it is the dominant institution for the real-world trading of equities,
energy, derivatives, etc. And the importance to study them is recognized by more and more studies (see [3,8,9,10]).
A double auction market in the context of stocks can be defined as a market in which limit orders and market
orders are present and get executed against each other at matching prices. The limit orders taken together form an
order book, in which the buy orders are arranged in decreasing order of price, while the sell orders are arranged in
increasing order of price(and eventually time and volume). Orders that match are immediately executed, so the
highest buy order remaining must have a lower price than the lowest ask order remaining. Market orders, when they
arrive, are executed against the best limit order on the opposite side. So, for example, a market buy order would get
executed against the best limit sell order currently on the order book [11].
The order book of a specific stock, at a specific instant in time t, can be described as follows:
ȕn « ȕ3ȕ2ȕ1Į1Į2 Į3«Įm
where the ȕi represent buy limit orders (bids) and the Įi sell limit orders (offers or asks); those limit orders are
characterized by a limit price, a volume and a time of arrival in the book, and are all waiting in a queue to be
(potentially) executed. The highest bid ȕ1, also called best bid, and the lowest offer Į1, or best offer, define the
spread Į1-ȕ1. Orders queued in the book are usually sorted by price, time of arrival and volume. ȕ1 will be executed
only if the book receives a market sell order or a limit sell order with an offering price lower than ȕ1. In this case, a
trade is generated and the new market price becomes ȕ1 [9].
4. GAIA methodology
Several methodologies proposed for developing agent-based software, such as CommonKADS [12], GAIA [13],
TROPOS [14], MASe [15] etc. We chose Gaia because it is a general methodology [13], well-documented (see [13,
16]), and several examples for applying this methodology was available (see [17, 18]).
Gaia is a methodology for agent-oriented software analysis and design. The Gaia methodology is both general, in
that it is applicable to a wide range of multi-agent systems, and comprehensive, in that it deals with both the macrolevel (societal) and the micro-level (agent) aspects of systems [13]. Gaia is intended to allow an analyst to go
systematically from a statement of requirements to a design that is sufficiently detailed that it can be implemented

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474

1467

Author name / Procedia Computer Science 00 (2010) 000±000

directly. Analysis and design can be thought of as a process of developing increasingly detailed models of the
system to be constructed.
The analysis stage of Gaia can be summarized:
1. Identify the roles in the system. Roles in a system will typically correspond to (individuals and department within
an organization or organizations themselves)
2. For each role, identify and document the associated protocols. Protocols are the patterns of interaction that occur
in the system between the various roles (interaction model).
3. Using the interaction model as a basis, elaborate the roles model.
4. Iterate stages (1)±(3).
The Gaia design stage can be summarized:
1. Create an agent model:
x Aggregate roles into agent types, and refine to form an agent type hierarchy;
x Document the instances of each agent type using instance annotations.
2. Develop a services model, by examining activities, protocols, and safety and liveness properties of roles.
3. Develop an acquaintance model from the interaction model and agent model.
The idea of roles and its junction into agent types can be very useful for the design of the agents which compose
the simulation model [19]. However, the notation of the Gaia methodology is probably less powerful, than others
methodology like AUML [20]. We can overcome this difficulty by application of the AUML notation into the Gaia
methodology [21].
5. A model
The model has six main components: the market which allows buyers and sellers of shares to interact in order to
facilitate an exchange, the traders who trade through this market, the company who pay cash dividends to his
stockholder, the bank who pay an interest rate per period and the external world who generate information used by
trader to take decision.
Each trader has some number of shares and units of cash which compose his wealth. To taking a decision, trader
is able to ask the market some information about its current state. He can have access to different levels of
information, Myopic traders will use only the current market price, while more evolved strategies can use the history
of past prices and volumes, the best bids and offers [9]. It is easy to deduce those informations from the current or
the history of past orderbooks. He can also ask external world about its current state if their decision making process
requires exogenous information [3] such as, economic indicators, past dividends, rumors, news, and the like [22].
Trader then uses the state of the market and exogenous information to form their expectations of the next periods
price and dividend. Once trader has sufficient informations to take decision, he can emit a desire to the market by
means of trade instructions called orders. Orders are described by a stock name, size, and quoted price.
Additionally, each order has a time-stamp attached to it that indicates the time at which it was placed [5]. Trader can
also cancel his order at any time [9].
When a new limit order submitted by one trader reaches the market, it is placed in the order book, if submitted
limit order finds a matching order of the opposite side in the book a trade is generated. The Market orders, when
they arrive, a trade is generated against the best limit order on the opposite side. When a trade is generated, the
market deletes satisfied orders from the order book (Orders can be satisfied completely or partially, so an unsatisfied
part of order satisfied partially is placed in the book), calculates a amount of trade, and notifies buyer and seller.
When notified, the buyer instruct his bank to make payment (updates his cash), the buyer bank request seller bank to
receive payment and inform buyer who update his wealth. The seller bank receive payment (updates a cash of seller)
and inform seller who update his wealth.
When notified, the seller instruct the company to deliver a shares to buyer, the company deliver shares (updates
a number of buyer and seller shares) and inform buyer and seller which update their wealths.
When traders instruct cancellation of a submitted order or a period of his validity is finished, the market deletes it
from the order book and notify concerned trader.
Each company may pay cash dividends per period to his stockholders on the payment day (Only those
shareholders who bought the stock before the ex-dividend date receive the dividend on the date of payment), the
bank receive cash dividend and inform a stockholder which update his wealth.

1468

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474
Author name / Procedia Computer Science 00 (2010) 000±000

Each bank pay a fixed interest per period to each costumer, and inform a costumer which update his wealth.
5.1. The Analysis phase
5.1.1. Role Model
Role Model introduces all necessary roles existing in the system. Each is expressed in a role schema where its
individual properties such as protocols and activities are presented. Protocols are actions that contain interactions
with other roles, and activities, indicated by the underline, are actions where no interaction with other roles is
involved. The permissions of a role identify the informations that are available to that role in order to realize its
responsibilities. In ASM, information required by agents are heterogeneous, for example: some trader models only
require the last transaction price, while others require other traders desires (orderbook). Hence, to be able to develop
any market model, we define the maximum set of informations needed by agents models.
The analysis phase led to the identification of five roles: Trader (Fig 1), Market (Fig 2), Company (Fig 3),
ExternalWorld (Fig 4) and Bank (Fig 5).
Role Schema: Trader
Description: Trader role is responsible to receive information from the market and external world, and generate or cancel orders. He sends
these orders for execution to market.
Protocols and Activities:
GetMarketState, GetExternalWorldInfo, FormExpectations, TakeDecision, ProduceOrder, SubmitOrder, GetCancellation,
NotifyForOrderFulfillment, MakePayment, DeliverShares, InformNewCash, InformNewNOSH, CalculateWealth
Permissions:
// the last transaction price
reads Price
OrderBook
// the record of unexecuted limit orders to buy or sell
MarketState
// some informations make state of the market
ExternalWorldInfo
//the external information used the trader to take decision
DPS
// the dividend per share charged by company to their shareholders.
Dividend
//the dividend charged by company to shareholder
Interest
// the amount paid by the bank to the trader as a percentage of the cash deposited
TransactionAmount
// a transaction amount
NOSHT
// the number of shares traded
Transaction
// an agreement between a buyer and a seller for the exchange of shares
NOSH
// the number of shares of company held by trader
Cash
// cash possessed by trader
// the wealth of trader
changes wealth
Order
//the order generated by trader
//the expected price of the share of company
generates ExpectedPrice
ExpectedDPS
//the expected dividend per share of company
Responsibilities
Livness:
GENERATEDECISION
= ((GetMarketState.GetExternalWorldInfo. FormExpectations.TakeDecision)|
(GetMarketState.GetExternalWorldInfo.FormExpectations.TakeDecision.GENERATEORDER)|

Ȧ

GENERATEORDER
RECEIVENOTIFICATION
UPDATEWEALTH
Safety:
x

=
=
=

(GetMarketState.GetExternalWorldInfo. FormExpectations. TakeDecision.GetCancellation))
ProduceOrder.SubmitOrder
(NotifyForOrderFulfillment.MakePayment)|(NotifyForOrderFulfillment.DeliverShares).
((InformNewCash)|(InformNewNOSH)).CalculateWealth

((Cash  price)  (NOSH = 0)  Order

Fig. 1. Schema for role Trader

nil

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474
Author name / Procedia Computer Science 00 (2010) 000±000

Role Schema: Market
Description: Market role is responsible to generate information to be used by the trader in making decision, receive orders, and execute
transactions.
Protocols and Activities:
MarketStateRequest, ProduceMarketState, GiveMarketState, SubmitOrder, PlaceInOrderBook, DeleteFromOrderBook,
CalculateTransactionAmount, NotifyForOrderFulfillment
CheckOrderValidity, RequestCancellation, NotifyCancellation
Permissions:
//the last transaction price
reads Price
//the order generated by trader
changes Order
OrderBook
// the record of unexecuted limit orders to buy or sell
//some informations make state of the market
generates MarketState
OrderIsValid
// the order is valid
Transaction
// a transaction amount
TransactionAmount
// an agreement between a buyer and a seller for the exchange of shares
NOSHT
// the number of shares traded
Responsibilities
Livness:
GETMARKETSTATE
= MarketStateRequest.ProduceMarketState.GiveMarketState
RECEIVEORDER = SubmitOrder.(PlaceInOrderBook|GenerateTransaction)
GENERATETRANSACTION
= DeleteFromOrderBook.[PlaceInOrderBook].CalculateTransactionAmount.
NotifyForOrderFulfillment
CANCELORDER = (CheckOrderValidity|RequestCancellation). DeleteFromOrderBook.NotifyCancellation
Safety:
x
OrderIsValid = false  Order

nil

Fig. 2. Schema for role Market
Role Schema: Company
Description: Company role is responsible to pay dividends to their stockholder.
Protocols and Activities:
InstructDeliverShares, UpdateNOSH, InformNOSH, CalculDPS.CalculDividend, PayDividend
Permissions:
reads NOSH
// the number of shares
NOSHT
// the number of shares traded
Transaction
// an agreement between a buyer and a seller for the exchange of shares
generates DPS
// the dividend per share charged by company
Dividend
// the dividend charged by company to shareholders
Responsibilities
Livness:
DeliverShares = InstructDeliverShares.UpdateNOSH.InformNOSH
GenerateDividend = CalculDPS.CalculDividend.PayDividend
Safety:
x true
Fig. 3. Schema for role Company
Role Schema: ExternalWorld
Description: the role of the External world is to provide exogenous information to be used by the trader in making decision.
Protocols and Activities:
ExternalWorldInfoRequest, ProduceInfo, GiveExternalWorldInfo
Permissions:
generates

ExternalWorldInfo

Responsibilities
Livness:
GetExternalWorldInfo
Safety:
x true
Fig. 4. Schema for role ExternalWorld

// The exernal information at time t used by the trader to take decision

=

ExternalWorldInfoRequest.ProduceInfo. GiveExternalWorldInfo

1469

1470

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474
Author name / Procedia Computer Science 00 (2010) 000±000

Role Schema: Bank
Description: Bank is responsible to pay an interest rate per period for the use of trader cash.
Protocols and Activities:
InstructMakePayment, UpdateCash, RequestReceivePayment, InformNewCash, RequestReceiveDividend, CalculInterest
Permissions:
// a transaction amount
reads TransactionAmount
// cash possessed by trader
changes Cash
InterestRate
// annual percentage rate of interest
// the amount charged by the bank for the use of cash of trader
generates Interest
Responsibilities
Livness:
MakePayment = InstructMakePayment.UpdateCash.RequestReceivePayment.InformNewCash
ReceivePayment = RequestReceivePayment.UpdateCash.InformNewCash
ReceiveDividend= RequestReceiveDividend |UpdateCash.InformNewCash
PayInterest= CalculInterest.UpdateCash.InformNewCash
Safety:
x true
Fig. 5. Schema for role Bank

5.1.1. Interaction Model
The Gaia interaction model denotes which action returns from a request along with the roles that can initiate a
request and the corresponding responders [17]. However, we considered that the Gaia interaction model ZDVQ¶W
appropriate to represent protocols. We overcame this difficulty by creating scenarios using AUML Agents
Interaction Protocols (AIP) [18]. We identify nine protocols: GetMarketState, GetExternalWorldInfo, SubmitOrder,
CancelOrder (see Fig 6,a), NotifyForOrderFulfilment, MakePayment, DeliverShares (see Fig 6,b), PayInterest and
PayDividend(see Fig 7).

a

b

Fig. 6. (a) The AIP for Protocols GetMarketState, GetExternalWorldInfo, SubmitOrder and CancelOrder; (b) The AIP of Protocols
NotifyForOrderFulgilment, MakePayment and DeliverShares

1471

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474
Author name / Procedia Computer Science 00 (2010) 000±000

Fig. 7. The AIP of Protocols PayInterest (a) and PayDividend (b)

Fig. 8. Agent models

5.2. The Design phase
5.2.1. Agent Model
The first model of the design phase is the agent model. The agent model amounts to identifying which agent
classes are to be defined to play specific roles and how many instances of each class have to be instantiated in the
actual system [17].
In our case we must have at least two agent types: TraderAgent which assume a roles: Trader, Company, Bank
and ExternalWorld and MarketAgent which assume a Market role (see Fig 8,a). However, if we will study in detail a
behavior of each role and its impact on market dynamics, it is more efficient to deliver a single role in each agent
(see Fig 8,b). So we obtain the agent types: MarketAgent, TraderAgent, CompanyAgent, BankAgent and
ExternalWorldAgent. The elements bank, company and external world was often presents implicitly in the existing
artificial stock markets, but, there are no artificial stock markets to our knowledge that represent them by agents,
however their behavior affects market dynamics.
5.2.2. Services model
The second model is the services model. The service model lists all the functions an agent type engages, which
come mostly from the protocols and activities and liveness of the roles this agent carries but not limited to them.
Tables 1,2,3,4 and 5 show respectively the service models of CompanyAgent, TraderAgent , MarketAgent,
BankAgent and ExternalWorldAgent.
Table 1. Service model for CompanyAgent
Services

Inputs

Outputs

Preconditions

Postconditions

Deliver Shares

NOSH, NOSHT

NOSH

NOS+7QLO

126+QLO

CalculDPS
Generate Dividend

DPS,NOSH

DPS

true

true

Dividend

126+QLO

'LYLGHQGQLO

1472

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474
Author name / Procedia Computer Science 00 (2010) 000±000

Table 2. Service model for TraderAgent
Services

Inputs

Outputs

Preconditions

Postconditions

produce
expectations

Price,
MarketState,
ExternalWorldInfo,
OrderBook

ExpectedPrice,
ExpectedDPS

0DUNHW6WDWHQLO and
([WHUQDO:RUOG,QIRQLO

([SHFWHG3ULFHQLO
and ([SHFWHG'36QLO

take decision

ExpectedPrice,
ExpectedDPS,
NOSH, cash

Decision

([SHFWHG3ULFHQLO and
([SHFWHG'36QLO

'HFLVLRQQLO

generate order

MarketState,
ExternalWorldInfo,
ExpectedPrice,
ExpectedDPS ,
NOSH, cash

Order

true

2UGHUQLO

obtain
cancellation

MarketState,
ExternalWorldInfo,
ExpectedPrice, ExpectedDPS ,
NOSH,
cash

Order=nil

2UGHUQLODQG'HFLVLRQQLO

Order=nil

instruct make
payment

TransactionAmount, seller,cash

Cash

7UDQVDFWLRQ$PRXQWQLODQGFDVKQLO

true

instruct deliver
shares
update wealth

NOSHT, buyer, NOSH

NOSH

126+QLODQG126+7QLO

true

NOSH, Cash,price

Wealth

true

true

Table 3. Service model for MarketAgent
Services

Inputs

generate
market state
receive order

Outputs

Preconditions

Postconditions

Price, OrderBook

MarketState

true

0DUNHW6WDWHQLO

Order, OrderBook

OrderBook

true

generate
transaction
check order
validity
produce
cancellation

true

OrderBook,
price,NOSHT

OrderBook, Transaction,
TransactionAmount

HighestBid LowestOffer

7UDQVDFWLRQQLO

Order

OrderValidity

2UGHU%RRNQLO

OrderIsValid  (true, false)

OrderBook

(OrderIsValid=false) or
cancellationReceived

true

Order, OrderBook

Table 4. Service model for BankAgent
Services

Inputs

Outputs

Preconditions

Postconditions

Make Payment

Cash, TransactionAmount,Trader

Cash

&DVKQLODQG7UDQVDFWLRQ$PRXQWQLO

true

ReceivePayment

TransactionAmount,cash

Cash

7UDQVDFWLRQ$PRXQWQLO

&DVKQLO

ReceiveDividend

Dividend,cash

Cash

'LYLGHQGQLO

&DVKQLO

PayInterest

Interest,cash

Cash

,QWHUHVWQLO

&DVKQLO

Table 5. Service model for ExternalWorldAgent
Services

Inputs

Outputs

Preconditions

Postconditions

Produce external world info

company

ExternalWorldInfo

true

ExternalWorld,QIRQLO

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474

1473

Author name / Procedia Computer Science 00 (2010) 000±000

5.2.3. Acquaintance Model
The acquaintance model simply defines the communication links that exist between agent types. They do not
define what messages are sent or when messages are sent, they simply indicate that communication pathways exist,
the purpose of an acquaintance model is to identify any potential communication bottlenecks, which may cause
problems at runtime [17].
Fig 9,a, show the Acquaintance model when we regroup a number of role in TraderAgent, while Fig 10,b show
the Acquaintance model when we deliver a single role in each agent.

Fig. 9. Acquaintance models

6. Discussion and conclusion
In this paper, we have used Gaia methodology to analysis and design a generic and flexible model of artificial
stock market. The outcome of the Gaia is agent models, services models and acquaintance models. The agent model
serves to identify the various agent types, and the agent instances that will realise these agents. We have provided
two agent models, the first have two agent types MarketAgent and TraderAgent, this agent model is appropriate if
we interest only to studding a behavior of traders, the second have five agent types: MarketAgent, TraderAgent,
CompanyAgent, BankAgent and ExternalWorldAgent, this model is appropriate if we will study in detail a behavior
of each element and its impact on market dynamics. The services model identifies the main services that are
UHTXLUHGWRUHDOLVHWKHDJHQW¶VEHKDYLRU:HKDYHSURYLGHGILYHVHUYLFHVPRGHOVDQG identified the inputs, outputs,
pre-conditions, and postconditions of each service. To be able to compose any agents behavior, we have defined the
maximum set of informations needed by services. The developer is free to realize the services in any
implementation framework deemed appropriate, for example, to LPSOHPHQW D VHUYLFHV ³take decision´ RI
TraderAgent, we can choose to use intelligent or random agent. The acquaintance model defines the communication
links between agent types, the purpose is to identify any potential communication bottlenecks, which may cause
problems at runtime. We have provide two acquaintance model, the first when we choose to use two agent types,
and the second when we choose to use five agent types.
The primary aim of this work is to provide a generic model with view to facilitate the development of artificial
stock markets. The model can be used to develop multiple market structures and trading strategies. We cannot claim
of course that the model can support modeling of every artificial stock market. However, it can be adapted to
support additional aspects. As future work, we intend to develop an artificial stock market for support the work
presented here.
References
1. Boer, K., de Bruin, A. and Kaymak, U. On the design of artificial stock markets, ERIM Report Series Research in Management (ERS-20052.
3.

001-LIS) (2005).
Leigh Tesfatsion. Introduction to the special issue on agent-based computational economics. Journal of Economic Dynamics and Control,
25:281±293, (2001).
Derveeuw, J. Beaufils, B. Brandouy, O. and Mathieu, P.,Testing double auction as a component within a generic market model architecture,
In Artificial Economics (AE07). Springer (2007).

1474

S. Benhammada, S. Chikhi / Procedia Computer Science 1 (2012) 1465–1474
Author name / Procedia Computer Science 00 (2010) 000±000

4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21.
22.

Boer, K., Polman, M., de Bruin, A. and Kaymak, U. An agent-based framework for artificial stock markets, in R. Verbrugge and N. T. and.
/6FKRPDNHUHGVµ3URFHHGLQJVRIWKHWK%HOJLDQ-Dutch Conference on Artificial Intelligence (BNAIC04) (2004).
Boer, K. Agent-Based Simulation of Financial Markets A Modular, Continuous-Time Approach. PhD thesis, Erasmus University
Rotterdam,UK (2008).
Palmer, r., w. Arthur, j. Holland, b. Lebaron, and p. Tayler, Artificial Economic Life: A Simple Model of a Stockmarket Physica D, 75,
264±274 (1994).
Ilija I. Zovko, Topics in Market Microstructure, , Book Amsterdam University Press (2008).
Raberto, M. and Cincotti, S., Modeling and simulation of a double auction artificial financial market, Physica A: Statistical Mechanics and
its Applications 355(1), 34±45 (2005).
Daniel, G., Asynchronous Simulations of a Limit Order Book. PhD thesis, University of Manchester, UK (2006).
0XFKQLN/DQG6RORPRQ60DUNRYQHWVDQGWKHQDWODESODWIRUPDSSOLFDWLRQWRFRQWLQXRXVGRXEOHDXFWLRQLQµ1HZ(FRQRPLF Windows,
Springer (2005).
Das Sanmay, Intelligent market-making in artificial financial markets, Technical. Report 2003-005, MIT Artificial Intelligence Laboratory
(2003).
Schreiber, A. et al., Engineering of Knowledge and Management: The COMMONKADS Methodology, MIT Press (2000).
Wooldridge, M. Jennings, N.R. and Kinny, D. The Gaia methodology for agent-oriented analysis and design, Journal of Autonomous
Agents and Multi-Agent Systems. 3(3).285±312 (2000).
Bresciani, P. Giorgini, P. Giunchiglia, F. Mylopoulos, J. and Perini, A, TROPOS: An Agent-Oriented Software Development Methodology,
Journal of Autonomous agents and Multiagent Systems (JAAMAS), Kluwer, 203±236 (2004).
Wood, M. F, Multiagent Systems Engineering: A Methodology for Analysis and Design of Multiagent Systems, Air Force Institute of
Technology ± AFIT. Master thesis (2000).
Zambonelli, F. Jennings, N. and Woolddridge, M., Developing Multiagent Systems: the Gaia Methodology, ACM Transactions on Software
Engineering and Methodology, 12(3). 417±470 (2003).
Zhao, Q. Zhou, Y. Perry, M., Agent Design of SmArt License Management System Using Gaia Methodology, Third International
Conference on Autonomic and Autonomous Systems. ICAS07, 9±9 (2007).
Moraitis, P. and Spanoudakis, N., Combining Gaia and JADE for Multi-Agent Systems Development, Fourth International Symposium
From Agent Theory to Agent Implementation (AT2AI04). Vienna, Austria (2004).
CAMPOS, A.M.C. et al. 2004. MASim: a Methodology for the Development of Agent-based Simulations, In 16th European Simulation
Symposium, 2004, Budapste. SCS Proceedings of European Simulation Symposium (2004).
Odell, J. Parunak, H. v. D. and Bauer, B., Extending UML for Agents. Proceedings of Workshop on Agent Oriented Information Systems
(AOIS) (2000).
Cernuzzi, L. and Zambonelli F., Experiencing AUML in the GAIA methodology, Proceedings of the 6th International Conference on
Enterprise Information Systems (ICEIS). Porto, Portugal, 283±28 (2004).
J.H. Holland, B. LeBaron, R. Palmer, and P. Tayler, Asset Pricing Under Endogenous Expectations in an Artificial Stock Market, SFI Paper
96-12-093, Economic Notes. Reprinted in The Economy as an Evolving Complex System II. Edited (with S. Durlauf and D. Lane),
Addison-Wesley, (1997).

