Procedia
1 (2012)
ProcediaComputer
Computer Science
Science 00
(2009) 699–707
000–000

Procedia
Computer
Science
www.elsevier.com/locate/procedia
www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Parallel Newton-Krylov solvers for modeling of a navigation lock
filling system
Hung V. Nguyen1*, Jing-Ru C. Cheng1 , E. Allen Hammack2, and Robert S. Maier1
1
2

U.S. Army Engineer Research and Development Center (ERDC) Information Technology Laboratory (ITL), Vicksburg, MS, 39180
U.S. Army Engineer Research and Development Center (ERDC) Coastal and Hydraulics Laboratory (CHL), Vicksburg, MS, 39180

Abstract
The Galerkin least-squares finite element method for solving the Reynolds-averaged incompressible turbulent 3-D Navier-Stokes
equations is employed to simulate a navigation lock filling system in the numerical code Adaptive Hydraulics (ADH). The linear
system is solved at each nonlinear iteration within every time-step using biconjugate gradient stabilized (BiCGstab) in
combination with block-Jacobi (bjacobi) preconditioners, as it failed to solve the linear system because of dramatic changes in
flow velocity and pressure early in the simulation. To overcome this problem, we used the Portable Extensible Toolkit for
Scientific Computation (PETSc), a numerical library that provides multiple types of linear solvers. PETSc has been incorporated
into the ADH code. The ADH-PETSc interface helps to systematically investigate the best linear solver for an ADH simulation.
We found that a variant, known as enhanced BiCGstab(l) in combination with the additive Schwarz method (ASM), made it
possible to simulate the John Day lock filling system. The BiCGstab(l) solver improved the rate of convergence because of a
more reliable update strategy for the residuals. In addition, the simulation was run with various numbers of processors. The result
shows good scaling of solution time as the number of processors increases

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝
Keywords: Navigation lock, iterative solvers, ADH, PETSc, and turbulent flow.

1. Introduction
A numerical model capable of simulating free-surface flow in complex, 3-D structures is vital for detailed
evaluation of navigation locks and lock components [12]. The Adaptive Hydraulics (ADH) code is a model that can
simulate saturated and unsaturated groundwater, overland flow, 2-D and 3-D shallow-water problems, and the 3-D
Navier-Stokes problems such as 3-D flow in navigation locks. ADH employs the Galerkin least-squares finite
element method for solving the Reynolds-averaged incompressible turbulent 3-D Navier-Stokes equations.
Turbulence is modeled with an adverse pressure gradient eddy viscosity technique. ADH uses the Newton algorithm
to solve the nonlinear problem, and the resulting linear system is nonsymmetric. A significant part of ADH
computation time is spent solving the linear system. Therefore, the performance of linear solvers is of great interest.

* Corresponding author. Tel.: +01-601-634-3607; fax: +01-601-634-2324.
E-mail address: Hung.V.Nguyen@usace.army.mil.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.075

700

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707
Author name / Procedia Computer Science 00 (2010) 000–000

Currently, ADH employs the BiCGstab method [15] as the iterative solver. Users can select Jacobi, block-Jacobi,
or ASM as a preconditioner on their applications. ADH often has difficulty in solving the linear system when
simulating lock filling because of dramatic changes in flow velocity and pressure early in the simulation. The code
is often forced to decrease the time-step down to 10-8 seconds prior to failure, and it can take more than 100 hours of
wall-clock time to run 10 seconds of simulation time using 32 processors on the Cray XT4 system. Sleijpen and
Fokkema [10] have shown the weakness of BiCGstab when solving the nonsymmetric matrices with the complex
spectrum, which is incurred in the simulation of the lock filling system.
The performance of an iterative method for solving a system of linear equations depends on the structure of the
system to be solved and on the choice of iterative solvers in combination with preconditioners [2,3,6,13]. Therefore,
we investigate the best combination of an iterative solver and preconditioner for solving a navigation lock filling
system. We focus on iterative Krylov subspace solvers including enhanced BiCGstab(l) developed by Sleijpen et al.
[10,11] and a variant of the Generalized Minimal Residual (GMRES(k)) developed by Saad [8,9], coupled with
parallel preconditioners, such as block-Jacobi, ASM, and algebraic multigrid methods (AMG). In addition, the
scalability of the enhanced BiCGstab(l) is investigated on the Cray XT4 system. The code was compiled and run on
a Cray XT4 containing 2,154 compute nodes; each node has 2.1GHz AMD Opteron 64-bit quad-core processors and
8 GBytes of dedicated memory. To allow for choosing solvers and preconditioners dynamically, we developed an
interface to access the Portable Extensible Toolkit for Scientific Computation (PETSc) [7] and High Performance
Preconditioners (Hypre) [5] libraries, which have a rich collection of state-of-the-art parallel linear solvers and
preconditioners.
1.1. Governing Equation
The governing equations for the turbulent incompressible flow are the Reynolds-average Navier-Stokes (RANS)
equations for the conservation of mass and momentum as presented in the following forms:


ui = 0
xi

( ) (

(1)

)

  u j ui
  ui
p

+
=
+
t
x j
xi x j

 u i

' '
μ
	
 x   u i u j 	
i



(2)

In Equations (1) and (2),  is density, p is mean (time-averaged) pressure, μ is the molecular viscosity,  is mean
' '
(time-averaged) velocity, and u’ is the fluctuating component.   u i u j is the Reynolds stresses. To correctly
account for turbulence, Reynolds stresses are modeled in order to achieve closure of Equation (2) by the Eddy
viscosity model. These equations are discretized using the Galerkin least-squares finite element algorithms on
tetrahedral elements with first-order accuracy.

1.2. Computational Domain, Mesh, and Boundary Conditions
The John Day Lock is located on the Columbia River. Fig. 1 (a) shows the flow domain. A section of culvert
extends downstream of the lock intake 30 hydraulic diameters (137 m total) downstream with a roof transition. At
the inflow boundary, the culvert is 3.7 m x 9.1 m and curves downward 17.1 m over 36.6 m. The culvert is 3.7 m
wide and 4.3 m tall. The tainter valve has a radius of 5.8 m, and the valve well is 3.7 m x 6.2 m. Two 4.3 m x 0.7 m
bulkhead slots, one upstream and one downstream of the valve, are included. The water surface in the valve is a free
surface as well as the upstream bulkhead, while the downstream bulkhead is capped.
Hydrostatic pressures correspond to the desired upper pool (81.7m) and lower pool (47.2m). Two flux boundaries

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707

701

Author name / Procedia Computer Science 00 (2010) 000–000

are included in the inflow and outflow. Free surface boundary conditions were applied to the valve well and in the
upstream bulkhead. ADH calculates the water-surface location using a moving mesh method during simulation.
The 3-D mesh contains 213,391 nodes, each with four degrees of freedom and 1,095,587 tetrahedral elements. The
elements have sides ranging from 13 mm (on valve surface) to about 0.76 m (far from valve) as shown in Fig. 1(b).

Fig.1 (a) Flow domain; (b) Unstructured mesh with fine mesh size near valve

2. Numerical Results

2.1. Numerical Results for Lock Filling System
The ADH uses its own Newton solver routine; currently we only write the interface for ADH to use the PETSc
KSP linear solver and PC preconditioner to solve the linear system at each Newton step. The ADH matrices were
converted into a BlockAIJ (BAIJ) format because of four degrees of freedom (pressure p, u, v, and w velocities) at
each node.
The numerical model for the John Day lock filling system simulates a 100-second physical time. The time-steps
are 0.1 and 1.0 second for periods of 0 to 10 seconds and 10 to 100 seconds, respectively. The time-steps were
chosen above because of a dramatic change of pressure and velocity at the early state of the simulation. However,
ADH employs an adaptive time-step, based upon a local error estimator. This error estimator helps to increase
model efficiency while maintaining a given accuracy. The simulation was run with 32 processors on the Cray XT4
system, using BiCGstab(l) in combination with an additive Schawarz (ASM) preconditioner. The stopping criteria
are based on the l2-norm of the preconditioned residual or maximum number of iterations (maxits). Convergence is
detected at k iterations if || rk||2 <  ||b||2, where r denotes the residual, b the right-hand side vector, = 5.0x10-5 the
relative tolerance, and maxits = 5,000.
Fig. 2 (a) shows the BiCGstab(l) algorithm while Fig. 2 (b) shows the convergence rate for BiCGstab and
BiCGstab(l) with l = 2, 4, and 8 at simulation time t = 0.475 second. For l = 1, this algorithm coincides with
BiCGstab. If  l (l = 1) is close to zero, then stagnation or even break down might occur. The BiCGstab convergence
rate depicts that the true residual norm suddenly increases after 300 iterations and the BiCGstab divergences after
400 iterations. This explains why the BiCGstab fails to simulate the lock filling system. The convergence rates of
BiCGstab(l) with l = 2, 4, and 8 are followed by the same pattern, and suddenly the rates abruptly increase and
quickly satisfy the convergence criteria. In general, the average computation cost per iteration is higher with respect
to the number of inner product and vector updates when l is larger. However, as can be seen from Fig. 2 (b), the
larger values of l give a smaller number of iterations and greater performance since the solver times are 432.187,
354.394, and 287.45 seconds for l = 2, 4, and 8, respectively. The BiCGstab(l) is the efficient linear solver because
the auxiliary polynomial can be used to gain efficiency and to improve residual reduction. In addition, Sleijpen and
van der Vorst [11] show that occasionally replacing the preconditioned residual norm with the true residual norm

702

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707
Author name / Procedia Computer Science 00 (2010) 000–000

(step * in BiCGstab(l) algorithm) can reduce the effects of erratic convergence. The update occurs only when ||r|| >
10-2 ||b|| because a process of updating is more costly (additional matrix and vector multiplication) and may disturb
the convergence.
Using BiCGstab(l), the total wall-clock times are 1.636 and 1.523 hours to run 100 seconds of simulation time
with l = 2 and 4, respectively, while it took more than 100 hours of wall-clock time to run 10 seconds of simulation
time using BiCGstab. The BiCGstab(l) with l = 8 fails to simulate the John Day lock filling system; when l is large,
the BiCGstab(l) may be more unstable [10].
Choose x0 and r0
x = x0, r = b – Ax
u=[0],

l =  = 1

while r  > tol do
  -l 

for j = 1 to l do
  (rj, r0),   /
u  r - u, u [u,Au]
  (uj+1, r 0),   /
x  x + u1
r  r - [u2, …,uj+1], r  [r,Ar j] (*)
end do
R := [r 2,…,rl +1]

r
r
 from (R R)  = R r
u  u - (  1 u +...+  l u )
x  x + (  1 r +...+  l r )
r  r - (  1 r +...+  l r )
T

Solve

1

1

T

2

1

l+1

1

l

2

l+1

end while

Fig. 2 (a) The BiCGstab(l) algorithm

(b) Convergence plot at t = 0.475 sec simulation time

Fig. 3 Velocity magnitude contours with various valve openings

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707

703

Author name / Procedia Computer Science 00 (2010) 000–000

Fig. 3 shows the x-component of the flow velocity distribution near the valves with various valve openings. The
velocities range from 30 m/s (directed downstream) at the invert to 10 m/s (directed upstream) at the culvert roof.
The highest velocity is 31 m/s with a valve opening at 0.65 (b/B=0.65). As expected, the maximum velocities occur
immediately downstream of the valve lip, and the velocity decreases slightly further downstream.

Fig. 4 (a) Number of iterations for l = 2 vs. simulation time; (b) Matrix condition number vs. simulation time
Fig. 4 (a) and (b) depict the number of iterations and matrix condition number vs. simulation time. In Fig. 4 (a)
and (b), the number of iterations changing dramatically during the early state of the simulation is related to a change
of the matrix condition number. However, the condition number changes slightly or not at all during the later
simulation time (10 – 60 seconds), while the number of iterations does change during this period. Therefore, the
correlation coefficient between the number of iterations and the condition number is 0.600 (n = 199 samples data).
2.2. Matrix Feature Extraction
The structural and numerical features of the matrix will greatly influence the performance of the preconditioned
solvers. We have used an Analysis Modules (AnaMod) library developed by Eijkhout and Fuentes [1] to compute
various properties of a matrix. The AnaMod code uses the PETSc library. We used AnaMod to track changes in the
estimated matrix spectrum and condition number during the simulation of the lock filling system. Fig. 5 (a) shows
the estimated eigenvalue distributions of linear systems over open interval (0, 2) at 0.000, 0.475, 2.175, and 48.165
seconds, respectively. Fig. 4 (a) shows the eigenvalues are complex. This may explain why the BiCGstab does not
converge well in this type of application, as indicated by Sleijpen and Fokkema [10].
Fig. 5 (b) depicts the estimated condition number of the matrix vs. the simulation time. As we expected, the
condition number of the matrix decreases with time as the flow approaches a steady state. In general, the condition
number of the matrix is related to the spread of the eigenvalue distribution. The convergence of Krylov methods
often depends to a large extent on the distribution of eigenvalues for solving the linear system. For fast convergence,
the eigenvalues need to be clustered away from the origin. In many cases, a few eigenvalues can be close to zero and
can significantly degrade the convergence. For example, using BiCGstab(l) with the ASM preconditioner, the
numbers of iterations for solving the linear systems in Fig. 5 (a) are 5000, 1522, 902, and 380, respectively. While
using FGMRES with the ASM preconditioner, the numbers of iterations are 5000, 1015, 1326, and 52, respectively.
The well-conditioned system should have eigenvalues clustered around one. Fig. 5 (a) and (b) show that the
distribution of eigenvalues is clearly clustered around one at time=48.165 seconds, while at other times is more
clustered to zero. Furthermore, when the distribution of eigenvalues is clustered close to one, then the condition

704

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707
Author name / Procedia Computer Science 00 (2010) 000–000

number of the matrix is slightly smaller. In contrast, the condition number of the matrix is slightly larger when the
distribution of eigenvalues is clustered around zero.

Fig. 5 (a) Eigenvalues distribution; (b) Matrix condition number

2.3. Krylov Solver and Preconditioners
The simulation of the navigation of the lock filling system is transient. To simplify the investigation, we select
the matrix and the right-hand side vector at the peak of the condition numbers, i.e., at simulation time = 2.175
seconds. Four solvers are selected: BiCGstab(l), FGMRES, LGMRES, and GMRES. Three preconditioners are
selected: ASM, bjacobi, and BoomerAMG. With GMRES and its variant, three numbers of Krylov directions to
orthogonalize against (gmres-restart) are set at 10, 20, and 30. With ASM, two levels of overlap are set at 0 and 1.
This leads to 19 scenarios in this study. Again, the stopping criteria are set up as described above. When using the
BoomerAMG preconditioner (Hypre) via PETSc, the matrix is convert into a AIJ format, for which we are able to
use different types of preconditioners for each field of a variable such as BoomerAMG for pressure and Euclid for
velocity. However, in this study, we were limited to using the same type of preconditioner for all variables.
Table 1 compares the convergence and performance of different Krylov solvers combined with various types of
preconditioners. Only certain solver-preconditioner combinations converged within 5,000 iterations: BiCGstab(l) –
ASM asm_overlap0, BiCGstab(l) – ASM asm_overlap1, BiCGstab(l) – bjacobi, FGMRES – ASM –gmresrestart10, FGMRES – ASM –gmres-restart20, and FGMRES – ASM –gmres-restart30. BoomerAMG does not
converge even though it worked well on subsurface flow problems reported by Cheng et al. [2] and other types of
applications [4,14]. As expected, using the ASM preconditioner with an overlap of zero is equivalent to the block
Jacobi preconditioner. The FGMRES-ASM-restar30 is the most efficient in terms of solver time, followed by
FGMRES-ASM-restart20, BiCGstab(l) – bjacobi, BiCGstab(l) – ASM asm_overlap0, BiCGstab(l) – ASM
asm_overlap1, and FGMRES-ASM-restar10. In general, large overlaps caused more communication time between
processors; therefore, the solve time per iteration of BiCGstab(l) – ASM asm_overlap1 is larger than BiCGstab(l) –
ASM asm_overlap0. In addition, it seems that the larger values of restart coefficients give greater performance.

705

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707
Author name / Procedia Computer Science 00 (2010) 000–000

Table 1: Solver time, number of iterations, true and preconditioned residual norm
Solver – preconditioner – options

True Residual
Norm

Preconditioned
Residual Norm

4.067 10-8
5.816 10-6
BiCGstab(l) – ASM asm_overlap0
6.119 10-8
1.136 10-5
BiCGstab(l) – ASM asm_overlap1
-8
4.067 10
5.816 10-6
BiCGstab(l) – bjacobi
-5
9.344 10
1.535 10-2
BiCGstab(l) – boomerAMG
-6
4.999 10
4.999 10-6
FGMRES – ASM –gmres-restart10
-6
4.945 10
4.945 10-6
FGMRES – ASM –gmres-restart20
-6
4.998
10
4.998 10-6
FGMRES – ASM –gmres-restart30
-6
6.236
10
6.236 10-6
FGMRES – bjacobi
5.905 10-5
5.905 10-5
FGMRES – boomerAMG
-6
1.011 10
2.841 10-2
LGMRES – ASM –gmres-restart10
-5
1.174 10
1.642 10-2
LGMRES – ASM –gmres-restart20
-5
1.401 10
2.224 10-2
LGMRES – ASM –gmres-restart30
-3
2.925
10
4.931 10-1
LGMRES – bjacobi
5.059 10-5
1.416 10-2
LGMRES – boomerAMG
-6
9.165 10
2.013 10-3
GMRES – ASM –gmres-restart10
-6
8.609 10
1.928 10-3
GMRES – ASM –gmres-restart20
-6
1.530 10
2.567 10-3
GMRES – ASM –gmres-restart30
-4
1.030 10
2.849 10-3
GMRES – bjacobi
-5
5.368
10
1.591 10-2
GMRES – boomerAMG
Note: the symbol ‘*’ means no convergence after 5000 iterations.

Iteration

Time (sec)

2794
900
2796
5000 *
3571
1296
898
5000 *
5000 *
5000 *
5000 *
5000 *
5000 *
5000 *
5000 *
5000 *
5000 *
5000 *
5000 *

334.214
391.464
326.492
9083.813
872.502
323.163
229.132
456.238
4737.823
1120.915
1189.741
1231.744
411.921
4593.540
1318.212
1290.295
1294.856
452.147
4879.111

Fig.6 (a) Number of iterations vs. residual norm; (b) Solver time vs. residual norm for BiCGstab(l) and FGMRES

Fig. 6 (a) and (b) show the convergence behavior of the linear system for BiCGstab(l) and FGMRES. For
BiCGstab(l), the convergence rate appears to decrease exponentially with significant fluctuations in residual norm.
After a period of slow convergence, the rate abruptly increases and quickly satisfies the convergence criteria. For
FGMRES, the convergence rate has a similar trend as BiCGstab(l) but does not exhibit the fluctuations in residual

706

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707
Author name / Procedia Computer Science 00 (2010) 000–000

norm, or the sudden change in behavior. In addition, the error is reduced at the different rates for BiCGstab(l) (4.067
– 6.119)10-8 and FGMRES (4.945 - 4.998)10-6. The reason for the difference is that PETSc is using a preconditioned
residual norm for checking stopping criteria as mentioned above. To get the same accuracy as BiCGstab(l), we have
run FGMRES - ASM –gmres-restart30 with the setting tolerance at 5.e-8. The solver time was 1212.247 seconds,
while its true residual norm is 4.99310-8. Therefore, the BiCGstab(l) might be a better choice for simulation of the
lock filling system.

2.4. Parallel Performance
Table 2 shows the scaling of the total wall-clock time with the number of processors using BiCGstab(l) with l =4
in combination with the ASM preconditioner. The application was run with 16, 32, 64, 128, 256, and 512 processors
on the Cray XT4 system. The application cannot run with less than 16 processors because of the memory limit on
the processors. The performance scales linearly up to about 256 processors and then flattens out, indicating that
fewer than 13,000 degrees of freedom per processor results in lower parallel efficiency. Based on a profiling for the
PETSc solver, the FLOPS per second per processor are (3.38, 3.31, 2.98, 2.50, 1.87, and 1.04)10+8, while the MPI
messages per processors are (3.03, 3.10, 3.50, 3.62, 3.95, and 4.61)10+6 for 16, 32, 64, 128, 256, and 512 processors,
respectively. Therefore, the reason may be due to too much communication time while having too little time for
computation. The parallel efficiency coefficient is computed based on wall-clock time at 16 processors. Therefore,
its value, which is over 100 percent at 32 processors, might be due to on-chip memory contention when running
with 16 processors.
Table 2: Total wall-clock time, parallel efficiency coefficient, and number of degrees of freedom per processor

Number of Processors

16
32
64
128
256
512

Total Wall Clock
Time (secs)
8,068.714
3,907.818
2,236.801
1,407.351
996.903
1,247.316

Parallel Efficiency
(%)
100.00
103.24
90.18
76.97
50.59
20.22

Number of dof per
processor
213,390
106,695
53,347
26,673
13,336
6,668

3. Conclusions and Future Work
In summary, we have developed a PETSc interface to aid in using the BiCGstab(l) solver for efficient simulation
of the John Day lock filling system. The BiCGstab(l) solver improved the rate of convergence because of a more
reliable update strategy for the residuals. Occasional replacement of the preconditioner residual by the true residual
may lead to more accurate solution while maintaining the speed of convergence. AnaMod tracks the changes of the
matrix spectrum and condition number during simulation of the lock filling system. Using the distribution of
eigenvalues can explain why the BiCGstab fails to simulate the lock filling system.
We are planning to use adaptive solvers in the ADH-PETSc code. Our approach combines more robust and costly
solvers when needed in particularly challenging applications (such as early simulation time in the application of the
lock filling system) and cheaper solvers in the easy phase.
Acknowledgments. This study was supported by the U.S. Army Corps of Engineers, Engineer Research and
Development Center, Civil Works basic research program. It was also supported in part by an allocation of
computer time from the DoD High Performance Computing Modernization Program.

H.V. Nguyen et al. / Procedia Computer Science 1 (2012) 699–707

707

Author name / Procedia Computer Science 00 (2010) 000–000

References
1. Eijkhout V. and Erika Fuentes, A Standard and Software for Numerical Metadata. ACM Transactions on
Mathematical Software, volume 35, number 4, pages 25:1—25:20, Feb. 2009.
2. Cheng, C. Jing-Ru, Nguyen, Hung, and Robert, S. Maier, Experiment with PETSc in Modeling Coupled
Watershed Flow. Proceedings of the 2009 DoD High Performance Computing, Users Group Conference, San Diego,
CA June 15 -18, 2009.
3. Demmel, J. W. Applied Numerical Linear Algebra. SIAM, Philadelphia, 1997.
4. Falgout, R.D., Henson, V.E., Jones, J.E., Yang, U.M. "BoomerAMG: A Parallel Implementation of Algebraic
Multigrid." Presented at the 9th SIAM Conference on Parallel Processing, San Antonio, TX, March 22, 1999.
5. Falgout, R. D. and Yang, U. M.: Hypre, a library of high performance preconditioners. In Sloot, P., Tan., C.,
Dongarra, J., and Hoekstra, A., editors, Computational Science - ICCS 2002 Part III, volume 2331 of Lecture Notes
in Computer Science, pages 632-641. Springer-Verlag, (2002). Also available as LLNL Technical Report UCRLJC-146175.
6. Nguyen V. H., Jing-Ru C. Cheng, and Robert S. Maier, Study of Parallel Linear Solvers for ThreeDimensional Subsurface Flow Problems. The International Conference on Computational Science (ICCS2009)
Paper no. 479, May 25-27, 2009 Baton Rouge, Louisiana, U.S.A.
7. PETSc, http://www..mcs.anl.gov/petsc. Satish Balay and Kris Buschelman and William D. Gropp and Dinesh
Kaushik and Matthew G. Knepley and Lois Curfman McInnes and Barry F. Smith and Hong Zhang, 2008.
8. Saad Y. A flexible inner-outer preconditioned GMRES. SIAM Journal on Scientific Computing. 1993;14:461–
46.
9. Saad,Y. and M. Schultz, GMRES: A generalized minimal residual algorithm for solving nonsymmetric linear
systems, SIAM Journal on Scientific and Statistical Computing,V ol. 7, 856–869,1986.
10. Sleijpen L.G. G and Dierderik R. Fokkema, BiCGstab(l) for Linear Equations Involving Unsymmetric
Matrices With Complex Spectrum. Electronic Transaction on Numerical Analysis, volume 1, pages 11-32, Sept.
1993.
11. Sleijpen L.G. G and Henk A. van der Vorst, Reliable updated residuals in hybrid Bi-CG methods, Preprint
886, Department of Mathematics, University Utrecht (November, 1994), Computing 56 (1996), pp. 141-163.
12. Stockstill, R. L., Computational model of a lock filling system. Coastal and Hydraulics Engineering Technical
Note, http://chl.erdc.usace.army.mil/chetn, ERDC/CHL CHETN-IX-18. Vicksburg , MS : U.S. Army Engineer
Research and Development Center, 2009.
13. Tracy, T. F., Oppe, C. Thomas, and Gavali, Sharad, Testing Parallel Linear Iterative Solvers for Finite
Element Groundwater Flow Problems. NAS Technical Report; NAS-07-007, September 2007.
14. Van Emden Henson and Ulrike Meier Yang. BoomerAMG: A parallel algebraic multigrid solver and
preconditioner. Applied Numerical Mathematics: Transactions of IMACS, 41(1):155–177, 2002
15. Vorst van der H, BiCGstab, a fast and smoothly converging variant of BiCG for the solution of nonsymmetric
systems, SIAM J. Sci. Stat. Comput., volume 13, pages 631-644, 1992.

