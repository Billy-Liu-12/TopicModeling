Procedia Computer
Science

Procedia Computer Science 1 (2012) 2569–2577
Procedia Computer Science 00 (2010) 1–9

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010
A Family of BDF Algorithms for Solving Diﬀerential Matrix Riccati Equations
Using Adaptive Techniques
Jes´us Peinado1a , Javier Iba˜neza , Vicente Hern´andeza , Enrique Ariasb
a ITACA,

Instituto de Telecomunicaciones y Aplicaciones Multimedia, Universidad Polit´ecnica de Valencia, Camino de Vera s/n, 46022-Valencia
(Spain)
b Departamento Sistemas Inform´
aticos, Universidad de Castilla-La Mancha, Avenida Espa˜na, s/n, 02071-Albacete (Spain)

Abstract
Diﬀerential Matrix Riccati Equations play a fundamental role in control theory, for example, in optimal control,
ﬁltering and estimation, decoupling and order reduction, etc. One of the most popular codes to solve stiﬀ Diﬀerential
Matrix Riccati Equations (DMREs) is based on Backward Diﬀerentiation Formula (BDF). In previous papers the
authors of this paper showed two algorithms for solving DMREs based on an iterative Generalized Minimum RESidual
(GMRES) approach and on a Fixed-Point approach.
In this paper we present two contributions to improve the above algorithms. Firstly six variants of previous
algorithms are carried out by using one of above algorithms in the ﬁrst step and another algorithm to carry out the
other steps until reaching convergence. Numerous tests on four case studies have been done comparing both precision
and computational costs of MATLAB implementations of the above algorithms. Experimental results show that in
some cases these algorithms improve on the speed and convergence of the original algorithms. Secondly, using the
previous experimental results and since all algorithms have a similar structure and there is no best algorithm to solve all
problems, two general-purpose adaptive algorithms have been designed for selecting the most appropriate algorithm,
which can be chosen using a parameter that indicates the stiﬀness of the DMRE to be solved.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Diﬀerential Matrix Riccati Equation (DMRE), BDF methods, GMRES methods, Algebraic Matrix
Riccati Equation (AMRE), Algebraic Matrix Sylvester Equation (AMSE), Fixed-Point method.

1. Introduction
In this paper we consider DMREs of the form
˙ = A21 (t) + A22 (t)X(t) − X(t)A11 (t) − X(t)A12 (t)X(t),
X(t)
t0 ≤ t ≤ t f ,
X(t0 ) = X0 ∈ Rm×n ,

(1)

Email addresses: jpeinado@dsic.upv.es (Jes´us Peinado), jjibanez@dsic.upv.es (Javier Iba˜nez), vhernand@dsic.upv.es (Vicente
Hern´andez), earias@dsi.uclm.es (Enrique Arias)
1 Corresponding author

c 2012 Published by Elsevier Ltd.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.290

Open access under CC BY-NC-ND license.

2570

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
2

J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9
Table 1: Parameters of BDF method (order r=1, 2, 3, 4 and 5)

r
1
2
3
4
5

β
1
2/3
6/11
12/25
60/137

α1
1
4/3
18/11
48/25
300/137

α2

α3

α4

α5

-1/3
-9/11
-36/25
-300/137

2/11
16/25
200/137

-3/25
-75/137

12/137

where A11 (t) ∈ Rn×n , A12 (t) ∈ Rn×m , A21 (t) ∈ Rm×n , A22 (t) ∈ Rm×m .
DMREs arises in several applications, in particular in Control Theory, for example the Time-Invariant Linear
Quadratic Optimal Control Problem. Another application of (1) consists of solving a two point boundary value problem by decoupling this problem in two initial value problems [1]. Since the mid seventies, many diﬀerent methods
have been proposed, being the BFD methods the most popular codes to solve stiﬀ Diﬀerential Matrix Riccati equations.
This paper is organized as follows. First, Section 2 describes a family of BDF methods for solving DMREs based
on three approaches: matrix Sylvester equations [1, 2], GMRES method [3] and Fixed-Point iteration [4]. Section
3 explains all developed algorithms. In Section 4, four case studies and the results obtained are presented. From
experimental results, an adaptive algorithm is explained in Section 4. Finally, the conclusions and future work are
outlined in Section 5.
2. A family of BDF methods
In this section we will describe a family of BDF methods for solving DMREs. In a BDF scheme, the integration
interval [t0 , t f ] is divided so that the approximate solution at tk , Xk , is obtained by solving an AMRE. Several methods
have been implemented for solving AMREs, however, in the context of stiﬀ DMREs, one of the better choices for
solving the associated AMRE is to apply implicit schemes based on Newton’s or quasi-Newton methods. Let F(t, X)
be the right hand side of (1),
F(t, X) = A21 (t) + A22 (t)X(t) − X(t)A11 (t) − X(t)A12 (t)X(t).
If we consider a mesh t0 ≤ t1 ≤ t2 . . . ≤ t f of interval [t0 , t f ] and we apply a BDF scheme, then the approximate
solution Xk at tk is obtained by means of solving the following matrix equation
r

−Xk +

α j Xk− j + Δtk−1 βF(tk , Xk ) = 0,

(2)

j=1

where Δtk−1 = tk − tk−1 , and α j ( j = 1, 2, . . . , r) and β are values that appear in Table 1, being r the order of BDF
method. Equation (2) can be expressed as the AMRE
A¯ 21 + A¯ 22 Xk + Xk A¯ 11 + Xk A¯ 12 Xk = 0,
where
A¯ 21 = −βΔtk−1 A21 (tk ) −

r

α j Xk− j ,
j=1

A¯ 22 = −βΔtk−1 A22 (tk ) + Im ,
A¯ 11 = βΔtk−1 A11 (tk ),
A¯ 12 = βΔtk−1 A12 (tk ).

(3)

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9

2571
3

2.1. A Sylvester method
This approach was used by Dieci in [1] and by Choi and Laub in [2]. Equation (3) can be solved by the Newton’s
iteration
Gˆ (l) (Xkl − Xkl−1 ) = −G(Xkl−1 ), l ≥ 1,
Xk0

(4)

= Xk−1 ,

where Gˆ (l) is the Fr´echet derivative [5, p. 310] of
G(X) = A¯ 21 + A¯ 22 X + X A¯ 11 + X A¯ 12 X.
For a ﬁxed l the following AMSE is obtained:
l−1
l−1
l−1
C22
ΔXkl−1 + ΔXkl−1C11
= C21
,

(5)

where
l−1
C22
= A¯ 22 + Xkl−1 A¯ 12 ,
l−1
= A¯ 11 + A¯ 12 Xkl−1 ,
C11
l−1
l−1
= −A¯ 21 − A¯ 22 Xkl−1 − Xkl−1C11
C21

and ΔXkl−1 = Xkl − Xkl−1 .
Therefore Xkl can be obtained by solving (5) for ΔXkl−1 and computing
Xkl = ΔXkl−1 + Xkl−1 .
The standard solution process for (5) is the Bartels-Stewart method [6].
2.2. A Fixed-Point method
This method has been developed in [4]. From (3) we obtain
A¯ 21 + Xk A¯ 11 + (A¯ 22 + Xk A¯ 12 )Xk = 0,
(A¯ 22 + Xk A¯ 12 )Xk = −(A¯ 21 + Xk A¯ 11 ),

which allows to deﬁne the following Fixed-Point iteration

(A¯ 22 + Xkl−1 A¯ 12 )Xkl = −(A¯ 21 + Xkl−1 A¯ 11 ), l
Xk0

1,

(6)

1,

(7)

= Xk−1 .

Similarly, from (3) we obtain the Fixed-Point iteration
Xkl (A¯ 11 + A¯ 12 Xkl−1 ) = −(A¯ 21 + A¯ 22 Xkl−1 ), l
Xk0 = Xk−1 .

2.3. A GMRES method
This method was developed in [3] by the authors of this article. If we apply the vec operator [7, pp. 20] to (5),
then
l−1
l−1 T
l−1
+ (C11
) ⊗ Im Δxkl−1 = vec(C21
).
In ⊗ C22
l−1
l−1 T
+ (C11
) ⊗ Im by the
This linear system can be solved eﬃciently without explicitly building the matrix In ⊗ C22
GMRES method, and then
Xkl = Xkl−1 + mat(Δxkl−1 , m, n).

2572

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9

4

3. A family of BDF algorithms for solving DMREs
The authors of this paper developed three basic algorithms for solving AMREs: algorithm dgearesyl based on
a Sylvester method (Algorithm 1 of [4]), algorithm dgearefpo based on a Fixed-Point method (Algorithm 2 of [4])
and algorithm dgearegmr based on a GMRES method (Algorithm 3 of [3]). In this paper we have modiﬁed these
algorithms to improve speed and convergence. The idea consists of combining two BDF algorithms applying a ﬁrst
step using a method, and then, applying several steps using a second method making the necessary iterations (steps)
to reach convergence. The six algorithm developed are (see Figure 1):
1.
2.
3.
4.
5.
6.

Apply a Sylvester iteration and the Fixed-Point method (dgearesfp).
Apply a GMRES iteration and the Fixed-Point method (dgearegfp).
Apply a Fixed-Point iteration and the Sylvester method (dgearefsy).
Apply a Fixed-Point iteration and the GMRES method (dgearefgm).
Apply a GMRES iteration and the Sylvester method (dgearegsy).
Apply a Sylvester iteration and the GMRES method (dgearesgm).

Another contribution of this paper is the development of a general algorithm which allows to choose ”the best
algorithm” for each DMRE problem depending on the stiﬀness of problem. With this scheme up to nine diﬀerent
BDF algorithms can be applied.
Therefore there is a driver algorithm for the time-invariant case dgeidrbdf (not shown) and another for the timevarying case (Algorithm 1) dgevdrbdf. This algorithm solves a time-varying DMRE by calling other algorithms to
solve AMREs. The computational algorithms solve AMREs by the nine algorithms developed.
Algorithm 1 Solves DMREs by means of a BDF algorithm
p
Function {Xk }k=1
= dgevdrbdf(alg, data, t0 , X0 , t f , Δt, tol, maxiter)
Inputs: alg is the algorithm used to solve the AMRE associated to DMRE (Figure 1); data(t) is the function that
computes the coeﬃcient matrices of (1) at instant t; initial time t0 ∈ R; starting guess matrix X0 ∈ Rm×n ; ﬁnal time
t f ∈ R; step size Δt ∈ R; order of BDF method r ∈ {1, 2, 3, 4, 5}; tol ∈ R+ is the tolerance used in BDF method;
maxiter ∈ N is the maximum number of Newton iterations in BDF method
Outputs: Matrices Xk ∈ Rm×n , k = 1, 2, . . .
1: Initialize α and β with the values given in Table 1
2: t = t0
3: while t < t f do
4:
if Xk − Xk−1 ∞ < ε1 Xk ∞ then
5:
Δt = δΔt
6:
else if Xk − Xk−1 ∞ > ε2 Xk ∞ then
7:
Δt = max(Δt/δ, ε3 )
8:
end if
9:
s = min(r, k)
10:
[A11 , A12 , A21 , A22 ] = data(t)
11:
A¯ 21 = −β s ΔtA21 − sj=1 α s j Xk− j
12:
A¯ 22 = −β s ΔtA22 + Im
13:
A¯ 11 = β s ΔtA11
14:
A¯ 12 = β s ΔtA12
15:
[Xk , e]= alg(A¯ 11 , A¯ 12 , A¯ 21 , A¯ 22 , Xk−1 , tol, maxiter)
16:
t = t + Δt
17: end while
18: if e == −1 then
19:
error (‘there is no convergence’)
20: end if
It is possible to design an eﬃcient and adaptive algorithm that solves DMREs depending on the stiﬀness of problem
(Algorithm 1). The selection of step size is based on variable-coeﬃcient strategies [8] by using an interpolating

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9

Figure 1: Implemented algorithms and their inter-dependencies

2573
5

2574

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9

6

polynomial Pk which interpolates the points (tk , Xk−r ), (tk+1 , Xk−r+1 ), . . . , (tk , Xk ) and then the implicit equation
P˙ k (tk ) = A21 (t) + A22 (tk )Xk − Xk A11 (tk ) − Xk A12 (t)Xk
is solved for Xk by using one of the algorithms of Figure 1. For selecting the step size in the k step we consider the
parameters ε1 , ε2 and s such as 0 < ε1 Ek ε2 , where
Ek =

Xk − Xk−1
Xk ∞

∞

.

The step size is selected in steps 4-8 of Algorithm 1, where ε3 (0 < ε3 < ε1 ) is a necessary parameter to avoid that the
step size becomes very small.
4. Experimental Results
The main objective of this section is to compare the developed algorithms. The implementations have been tested
on an Apple Macintosh iMac 2.16 Ghz Core 2 Duo processor with 2 Gb of RAM, MacOsX(Unix) OS and MATLAB
version 7.7.
As test battery, four stiﬀ problems were used: two time-invariant DMREs and two time-varying DMREs. An
exhaustive study of all tests of this paper can be found in [9].
Case study 1. The ﬁrst case study [1, 10] consists of the following time-invariant DMRE
˙ = A21 + A22 X(t) − X(t)A11 − X(t)A12 X(t), 0 ≤ t ≤ t f ,
X(t)
where A11 = 0n , A12 = A21 = αIn , (α > 0 controls the stiﬀness of the problem), A22 = 0n , and X(0) = X0 ∈ Rn×n .
The exact solution is given by
X(t) = (α(X0 + In )eαt − α(X0 − In )e−αt )−1 (α(X0 + In )eαt + α(X0 − In )e−αt ),
which allows the approaches presented in this document to be compared in terms of accuracy.
Case study 2. This case study [2] consists of the following time-invariant DMRE
˙ = X(t)T 2k + T 2k X(t) − X(t)T 2k X(t) + α2 T 2k , t ≥ 0,
X(t)
X(0) = I2k ,
k

k

where k ∈ N and X(t), T 2k ∈ R2 ×2 . Matrices T 2k are generated as follows:
T2 =
T 2k =

−1
α2

−T 2k−1
α2 T 2k−1

1
1
T 2k−1
T 2k−1

,
, k ≥ 2,

where α controls the stiﬀness of the problem. The solution of this DMRE is given by
X(t) = I2k +

α2 + 1
tanh ωtT 2k ,
ω

k+1

where ω = (α2 + 1) 2 .
Case study 3. This stiﬀ time-varying DMRE is a widely used test problem, known as the ”knee problem” [11, 1]
deﬁned as
ε x˙(t) = ε − tx(t) + x2 (t), t ≥ −1, x(−1) = −1, 0 < ε << 1,
associated to coeﬃcient matrix

A(t) =

a11 (t)
a21 (t)

a12 (t)
a22 (t)

=

t/ε −1/ε
1/2
0

, n = m = 1.

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9

2575
7

The reduced solution x = t is stable before 0 and x
0 is stable past it. Parameter controls the stiﬀness of the
problem.
Case study 4. This stiﬀ time-varying DMRE ([1, 12]) comes from a stiﬀ two-point boundary value problem. This
DMRE is deﬁned as
−t/2ε 0
1/ε 0
, A12 (t) =
,
A11 (t) =
0
0
0 1/ε
A21 (t) =

1/2
0

1
1

0 t/2ε
0
0

, A22 (t) =

,

where t ≥ −1, 0 < ε << 1. The initial condition is
X(−1) =

0
0

0
0

.

The solution has an initial layer and then it approaches
X(t) =

−ε/t
0

√
√
2( ε + t)/2(1
√ − t ε)
ε

.

For t away from 0, there is a smooth transition around the origin and then
√
t/2 √ε
.
X(t)
ε
0
All algorithms explained before have been tested, but only the ones with the best results are shown:
1.
2.
3.
4.
5.

Sylvester algorithm (dgearesyl).
GMRES algorithm (dgearegmr).
Fixed-Point algorithm (dgearefpo).
Sylvester algorithm with an initial Fixed-Point iteration (dgearesfp).
GMRES algorithm with an initial Fixed-Point iteration(dgearegfp).

The driver algorithms developed are:
• dgeidrbdf (not shown) solves time-invariant DMREs by means of a BDF method.
• dgevdrbdf (Algorithm 1) solves time-varying DMREs by means of a BDF method.
For both algorithms the following parameters have been used:
These parameters have been adjusted in each case study to get the best execution time (T e) and the least relative
error (using the analytic solution and the obtained solution). Then, for each test we show results for execution time
and relative error. The relative error is computed as
Er =

X − X∗
X ∞

∞

,

where X ∗ is the computed solution and X is the analytic solution.
We used the following values for our tests: ε1 = Δt0 · 10−2 , ε2 = Δt0 · 10−1 , ε3 = Δt0 · 10−3 , δ = 1 + ε3 , where Δt0
is a initial step size provided by the user.
The user indicates the stiﬀness by a parameter s that indicates if the problem is non stiﬀ or low stiﬀ (s = 0) or stiﬀ
(s 0):
• s=0 (non stiﬀ or low stiﬀ): The DMRE is solved by the Fixed-Point algorithm.
• s=1 (stiﬀ): The DMRE is solved by the combined BDF-Sylvester/Fixed-Point algorithm.
• s=2 (stiﬀ): The DMRE is solved by the combined BDF-GMRES/Fixed-Point algorithm.

2576

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9

8

Table 2: Relative errors for adaptive algorithm r=2, tol= 1e-5, maxiter=100

Er
s=1
s=2
s=3
s=4

Case Study 1
0
0
0
0

Case Study 2
3.29e-20
3.81e-16
1.64e-20
3.81e-16

Case Study 3
4.999e-7
4.999e-7
4.999e-7
4.999e-7

Case Study 4
5.92e-15
6.00e-15
1.56e-15
1.56e-15

Table 3: Execution times for adaptive algorithm r=2, tol = 10−5 , maxiter=100

Te
s=1
s=2
s=3
s=4

Case Study 1
1.30
0.11
1.33
0.11

Case Study 2
1.06
0.13
1.11
0.13

Case Study 3
2.76
2.67
2.61
2.46

Case Study 4
4.71
3.41
6.4
5.0

• s=3 (stiﬀ): The DMRE is solved by the Sylvester algorithm.
• s=4 (stiﬀ): The DMRE is solved by the GMRES algorithm.
Tables 2 and 3 contain relative errors and execution times of Case studies when s ∈ {1, 2, 3, 4}. The parameters of
problems and algorithms were:
• Case study 1: n = 16, α = 1000, t f = 3, r = 2, tol = 10−5 , Δt0 = 0.1, maxiter = 100.
• Case study 2: n = 16, α = 100, t f = 1, r = 2, tol = 10−5 , Δt0 = 0.1, maxiter = 100.
• Case study 3: n = 1, = 10−4 , t f = 100, r = 2, tol = 10−5 , Δt0 = 0.01, maxiter = 100.
• Case study 4: n = 2, = 10−4 , t f = 50, r = 2, tol = 10−5 , Δt0 = 0.01, maxiter = 100.
Table 2 shows that the combined algorithms (s = 1, 2) have the same relative errors as the single algorithms
(s = 3, 4) in two of the four case studies and lower relative errors than the single algorithms in the other case studies.
Table 3 shows that combined algorithms have lower or equal execution times than single algorithms in three of the
four case studies.
5. Conclusions and Future Work
We developed a family of algorithms for solving DMREs using adaptive techniques. Because there is no best
algorithm to solve all problems, two general purpose adaptive algorithms which select the most adequate adaptive
algorithm depending on the DMRE has been designed. The algorithms can be chosen by using a parameter that indicates the stiﬀness of the problem. MATLAB implementations of these algorithms have been also done. The source
codes can be downloaded from the following http address:
http://www.grycap.upv.es/dmretoolbox/DMRE BDF.htm
There are three items for future work:
• Use other BDF methods for solving AMREs as Adams-Moulton methods [13, pp. 127].

J. Peinado et al. / Procedia Computer Science 1 (2012) 2569–2577
J. Peinado et al. / Procedia Computer Science 00 (2010) 1–9

2577
9

• Parallel implementation of the algorithms presented in this work will be carried out in a distributed memory
platform, using the message passing paradigm, MPI [14] and BLACS [15] for communications, and PBLAS
[16] and ScaLAPACK [17] for computations.
• Use GPU computing. It is possible to use some kind of GPUS as a way to speed up several computations in a
computer. Using the CUDA (Compute Uniﬁed Device Architecture) [18] environment from the NVIDIA maker.
This environment has tools as CUBLAS [19] (a CUDA BLAS), and very recently appeared CUDA/CUBLAS
based implementations of some LAPACK routines: MAGMA [20], CULAPACK [21] and CULATOOLS [22].
6. References
[1] L. Dieci, Numerical integration of the diﬀerential Riccati equation and some related issues, SIAM Journal on Numerical Analysis. 29 (3)
(1992) 781–815.
[2] C. H. Choi, A. J. Laub, Eﬃcient matrix-valued algorithms for solving stiﬀ Riccati diﬀerential equations, IEEE Trans. on Automatic Control
35 (7) (1990) 770–776.
[3] V. Hern´andez, J. Ib´an˜ ez, E. Arias, J. Peinado, A GMRES-based BDF method for solving diﬀerential Riccati equations, Applied Mathematics
and Computation 196 (2) (2008) 613–626.
[4] E. Arias, V. Hern´andez, J. Ib´an˜ ez, J. Peinado, A ﬁxed point-based BDF method for solving Riccati equations, Applied Mathematics and
Computation 188 (2) (2007) 1319–1333.
[5] D. H. Griﬀel, Applied Functional Analysis, Mathematics and its Applications, Ellis Hordwood, New York, 1981.
[6] R. H. Bartels, G. W. Stewart, Solution of the matrix equation AX + XB = C: Algorithm 432, Communications of the ACM 15 (9) (1972)
820–826.
[7] R. A. Horn, C. R. Johnson, Topics in Matrix Analysis, Cambridge University Press, London, 1991.
[8] U. M. Ascher, L. R. Petzold, Computer Methods for Ordinary Diﬀerential Equations and Diﬀerential-Algebraic Equations, SIAM, 1998.
[9] J. Ib´an˜ ez, J. Peinado, V. Hern´andez, E. Arias, A family of BDF methods for solving diﬀerential matrix Riccati equations using adaptative
techniques, Tech. Rep. DSIC-II/08/09, Departamento de Sistemas Inform´aticos y Computaci´on, Universidad Polit´ecnica de Valencia (Spain)
(2009).
[10] G. H. Meyer, Initial Value Methods for Boundary Value Problems, Academic Press, New York, 1973.
[11] G. Dahlquist, L. Edsberg, G. Skllermo, G. Sderlind, Are the Numerical Methods and Software Satisfactory for Chemical Kinetics?, in Numerical Integration of DE and Large Linear Systems, Vol. 968/1992 of Lecture Notes in Computer Mathematics, Springer Berlin / Heidelberg,
1982, pp. 149–164.
[12] D. L. Brown, J. Lorenz, A high-order method for stiﬀ boundary value problems with turning points, SIAM Journal on Scientiﬁc and Statistical
Computing 8 (1987) 790–805.
[13] U. Ascher, L. Petzold, Computer Methods for Ordinary Diﬀerential Equations, SIAM, Philadelphia, 1998.
[14] W. Gropp, E. Lusk, A. Skjellum, Using MPI: Portable Parallel Programming with the Message-Passing Interface, MIT Press, 1994.
[15] J. Dongarra, R. C. Whaley, A user’s guide to the BLACS v1.1, Tech. Rep. UT-CS-95-281, Department of Computer Science, University of
Tennessee (1995).
[16] J. Choi, J. Dongarra, S. Ostrouchov, A. Petitet, D. Walker, A proposal for a set of parallel basic linear algebra subprogram, Tech. Rep.
UT-CS-95-292, Department of Computer Science, University of Tennessee (1995).
[17] L. S. Blackford, J. Choi, A. Cleary, E. D’Azevedo, J. Demmel, I. Dhillon, ScaLAPACK Users’ Guide, SIAM, 1997.
[18] NVIDA, Nvidia CUDA compute uniﬁed device architecture (2009).
[19] NVIDIA, CUDA. CUBLAS library (2009).
[20] Enhancing the performance of dense linear algebra solvers on GPUs (in MAGMA project), Supercomputing ’08 Poster.
[21] S. Barrachina, M. Castillo, F. Igual, R. Mayo, E. Quintana, G. Quintana, Exploiting the capabilities of modern gpus for dense matrix,
Concurrency and Computation: Practice & Experience 21 (2009) 2457–2477.
[22] Culatools, http://www.culatools.com.

