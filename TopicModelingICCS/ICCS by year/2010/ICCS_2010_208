Procedia Computer
Science
Procedia
Computer
(2012)1–9
1873–1881
Procedia
Computer Science
Science 001 (2010)
www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS2010

Understanding Memory Eﬀects in the Automated Generation of
Optimized Matrix Algebra Kernels
Elizabeth R. Jessup, Ian Karlin, Erik Silkensen
Department of Computer Science, University of Colorado, 430 UCB, Boulder, CO 80309

Geoﬀrey Belter, Jeremy Siek
Department of Electrical, Computer, and Energy Engineering, University of Colorado, 425 UCB, Boulder, CO 80309

Abstract
Eﬃcient implementation of matrix algebra is important to the performance of many large and complex physical
models. Among important tuning techniques is loop fusion which can reduce the amount of data moved between
memory and the processor. We have developed the Build to Order (BTO) compiler to automate loop fusion for matrix
algebra kernels. In this paper, we present BTO’s analytic memory model which substantially reduces the number of
loop fusion options considered by the compiler. We introduce an example that motivates the inclusion of registers
in the model. We demonstrate how the model’s modular design facilitates the addition of register allocation to the
model’s set of memory components, improving its accuracy.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝
Keywords: matrix algebra, memory eﬃciency, automatic tuning

1. Introduction
Matrix algebra plays a role in evaluating physical models from such diverse areas as acoustic scattering, aerodynamics, combustion, global circulation, radiation transport, and structural analysis [1, 2, 3, 4]. The programs used
to solve these problems are often large and complex, meaning that methods for implementing them eﬃciently are of
broad importance. A variety of methods have been employed for the tuning of matrix algebra software, e.g, [5, 6, 7,
8, 9, 10, 11, 12]. Among them is loop fusion, a technique for reducing the amount of data moved from memory to the
processor during program execution. Loop fusion has been the subject of much recent study [13, 14, 15, 16], and the
new standard for the Basic Linear Algebra Subprograms (BLAS) [17] recognizes four commonly used routines that
beneﬁt from its application.
Email addresses: jessup@cs.colorado.edu (Elizabeth R. Jessup), Ian.Karlin@colorado.edu (Ian Karlin),
Erik.Silkensen@colorado.edu (Erik Silkensen), Geoffrey.Belter@colorado.edu (Geoﬀrey Belter), Jeremy.Siek@colorado.edu
(Jeremy Siek)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.209

1874

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881
Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

2

for j = 1:n

A(:, j) ← A(:, j)+u1 v1 ( j)

for j = 1:n

for j = 1:n

A(:, j) ← A(:, j)+u2 v2 ( j)
for j = 1:n
x( j) ← βAT ( j, :)y+z( j)
for j = 1:n
w ← w+αA(:, j)x( j)

⇒

A(:, j) ← A(:, j)+u1 v1 ( j)
A(:, j) ← A(:, j)+u2 v2 ( j)
x( j) ← βAT ( j, :)y+z( j)
w ← w+αA(:, j)x( j)

Figure 1: Loop fusion applied to the GEMVER kernel of the updated BLAS.

Matrix algebra software is often constructed as sequences of BLAS calls, and adjoining calls oﬀer opportunities
for fusion. However, there are two signiﬁcant issues in such tuning. First, it can be diﬃcult to know when it will be
advantageous. Loop fusion can substantially reduce data access and thereby lead to signiﬁcant speedups. Yet, in some
circumstances, it can be detrimental to performance. Figure 1 shows loop fusion applied to the GEMVER kernel of
the updated BLAS [17]. When a column of matrix A remains in cache throughout an iteration of the loop, the fused
implementation reads that column only once from main memory during that iteration. When just two vectors ﬁt in
cache, though, fusing the ﬁrst two scaled vector additions forces the column of A to be evicted meaning that it must
be reread when accessed again. This example demonstrates that creating an eﬃcient fused routine requires careful
consideration of both algorithm and memory subsystem.
A second issue is the eﬀort required to implement loop fusion. While rewriting codes to join loops is not generally
a complex programming task, repeating it many times in search of the optimal arrangement is time consuming. At the
same time, it is not possible to anticipate which BLAS will appear together, and, therefore, it is not practical to create
a library of all possible fused BLAS combinations. To enable the optimization of arbitrary linear algebra kernels,
we created the Build to Order (BTO) compiler [18] which automates loop fusion for sequences of matrix algebra
operations. BTO takes in matrix and vector arithmetic statements expressed in annotated MATLAB and produces
a tuned implementation of those statements in C. At its most basic, the compiler explores the search space of all
possible combinations of two variants of loop fusion, determining the most eﬃcient organization via empirical search.
To improve on this approach, we introduced an analytic memory model that quickly estimates the costs of the routines
generated by the compiler and, from those costs, identiﬁes the best performing subset of them. The very fastest routine
is then distinguished via empirical search. Paring down the number of routines by means of the model greatly reduces
the cost of the search.
The ﬁrst version of the analytic model based its predictions on cache and TLB misses. In this paper, we describe
that model and explain how we discovered that register allocation should also be included. We show how we added
register eﬀects and demonstrate how the model’s predictive power improved as a result. The paper is organized as
follows. In Section 2, we review related work. In Section 3, we describe how the model works within the BTO
compiler at a high level and present typical predictions produced by the model. In Section 4, we present a code where
the best version produced by the compiler is not the one the original model without registers chooses. In studying this
discrepancy, we leverage the compiler’s ability to generate all possible routines in order to stress that model and reveal
a need for it to account for registers. In Section 5, we show how we add in a new feature that predicts the register
allocations of native compilers, e.g., gcc and icc. The resulting improvement in prediction of routines performance by
the model is then presented.
2. Related Work
Techniques for identifying the best of a collection of routines include empirical search, analytic models and hybrid
approaches using both methods. Successes have been reported for all three approaches. For example, both PHiPAC
[12] and ATLAS [19, 20] use empirical search to determine the optimal combination of optimizations for matrixmatrix multiplication. Yotov et al. [21] show that analytic models can deliver similar performance in less time than
empirical search for matrix-matrix multiplication. A follow up study [22] shows that models can be used to narrow
the parameters and ranges for which empirical search is used while still producing high performance codes. Other

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881
Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

Processor
AMD Opteron

Speed
2.6 GHz

Mem
3 GB

L1
64 KB

L2
1 MB

1875
3

TLB
40/512

Table 1: Speciﬁcations of the test machine. For TLB, we list the number of entries.

applications of empirical analysis include loop fusion decisions [23], optimizations and prefetching [24], and loop
nesting [25]. Analytic models have been used to determine capacity misses for perfectly nested loops [26], for array
padding [27], and for register allocation [28]. A similar approach to our model is the equations described in [29]
which provide high accuracy cache miss predictions at large expense by means of reuse distances. Recent methods
using both analytic modeling and empirical search have shown promise for obtaining good results in reasonable time.
In [30], Chen et al. use an analytic model to identify, empirically test, and tune candidate implementations of matrix
computations. To ﬁnd the optimal tile size for matrix multiplication, Epshteyn et al. [31] adapt their analytic model
based on empirical results using explanation-based learning. These hybrid methods take advantage of analytic models
to guide them in the right directions and empirical search to more fully explore the areas identiﬁed by the model.
3. Analytic Model Overview, Purpose and Place in Compiler
To eﬃciently estimate the runtimes of the code variants produced by our compiler, we use an analytic model.
In this section, we give a high level description of how the model works and its function within the BTO compiler.
Results showing typical model behavior are presented along with explanation. A more detailed description of the
model and analysis of its predictive ability can be found in [18].
In its ﬁrst step, the model calculates reuse distances for each data structure at all loops. The reuse distance of a
data structure is the number of unique data accesses between two accesses to an element of the data structure. The
reuse distances are then used to determine the memory structure from which the data are read. Next, the total amount
of data read from each memory structure for each loop is calculated along with the cost of moving that data to the
processor. The memory structure with the largest cost in each loop is the one limiting performance of that loop. The
overall routine cost for a loop that contains other loop(s) is assigned to be the maximum of its own cost and the cost
of its components.
Runtime predictions are then passed to the compiler where they are ordered. The compiler keeps all routines with
predicted times within a user-speciﬁed percentage of the best predicted time and empirically tests them to identify the
fastest one which is output as a C kernel. In order to limit the number of routines that must be empirically tested, the
model must be able to distinguish between routines with large diﬀerences in memory traﬃc cost but does not need to
predict performance exactly.
Measured (actual) and predicted megaﬂops ratings are presented for two versions of the calculation y = AAT x
produced by the BTO compiler are shown in Figure 2. The tests were run on an AMD Opteron with the speciﬁcations
shown in Table 1. The ﬁgure shows that the model properly ranks the two versions across all matrix sizes. We have
tested the model more thoroughly across a much broader range of problems and have conﬁrmed that this ﬁgure’s
results are typical. In a tradeoﬀ between precision and speed, the model assumes that caches are fully associative,
leading to stairsteps in the predicted curves. The measured curves are typically smooth.
4. Improving the Analytic Model
We now present an analysis of memory bound matrix-vector multiplies that suggests ways to improve the analytic
model. In particular, this analysis aids the development of the compiler’s memory model, enabling improvements that
reduce the number of loop fusion options considered. This cutting is important because the number of possible routines
grows rapidly with kernel complexity, making exhaustive testing expensive. We also present hardware performance
counter data that show that we need to consider register allocation in the memory model.
We consider a sequence of matrix-vector multiplies. For example, we deﬁne a routine DGEMV2 which multiplies
vectors u0 and u1 in turn by a matrix A as shown in Figure 3. The annotated MATLAB provided in this ﬁgure serves
as input to the compiler which generates all possible loop fusion combinations for the pair of matrix-vector multiplies.

1876

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881
Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

4

Figure 2: Cost prediction for y = AAT x on an AMD Opteron

Figure 4 shows three of these possibilities: no loop fusion, only outer loops fused, and all loops fused. These three
choices range from the least complex (no fusion) to the most complex (fully fused) with one intermediate selection
(outer loops).
DGEMV2
in
u0 : vector, u1 : vector,
A : row matrix
out
v0 : vector, v1 : vector
{
v0 = A * u0
v1 = A * u1
}
Figure 3: DGEMV2

In order to evaluate the analytic model, we ran a series of experiments on sequences of one to eight successive
matrix-vector multiplications for the fully fused and all outer loops fused combinations. The number of repetitions of
matrix-vector multiplication in a test is denoted nvecs. For example, nvecs = 2 for DGEMV2. All of the tests were
run using the Intel icc compiler on the AMD Opteron described earlier.
As shown in Figure 5, the fully fused variant outperforms the outer loops one for nvecs < 5. For nvecs ≥ 5, fusing
outer loops is the more eﬃcient choice. To explain this crossover, we instrumented the code to track memory traﬃc.
Figure 6 compares L1 cache misses per ﬂop measured for the two routines over the range of nvecs values 1–8. The
fully fused routine suﬀers fewer L1 cache misses per ﬂop than does the outer loops routine for all values of nvecs.
Both routines have nearly identical numbers of L2 cache misses and TLB misses per ﬂop for all values of nvecs:
on plots of L2 and TLB misses versus nvecs, the lines for the two routines are indistinguishable. Thus, the relative
performance diﬀerences between the two cannot be explained by these three memory eﬀects.
The cause of the crossover is found even higher in the memory hierarchy. An examination of the assembly code
reveals that the crossover results from register spilling. Register spilling occurs whenever there are more variables in

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881

1877

Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

5

for (i = 0; i < n; i++)
for (j = 0; j < n; j++)
for (i = 0; i < n; i++)
v0[i] += A[i][j] * u0[j]
for (j = 0; j < n; j++)
for (i = 0; i < n; i++)
for (i = 0; i < n; i++)
v0[i] += A[i][j] * u0[j]
for (j = 0; j < n; j++)
for (j = 0; j < n; j++)
for (j = 0; j < n; j++)
v0[i] += A[i][j] * u0[j]
v1[i] += A[i][j] * u1[j]
v1[i] += A[i][j] * u1[j]
v1[i] += A[i][j] * u1[j]

(a) No Fusion

(b) All Outer Loops Fused

(c) All Loops Fused

Figure 4: Three possible loop fusion options

Figure 5: The measured performances of the fully fused and outer loops fused routines compared with the predicted performance of the fully fused
routine.

play than there are registers. In this case, the register allocator must save and restore spilled values to and from the
L1 cache, incurring additional memory access costs. The assembly for an inner loop of the fused outer loops variant
presented in Figure 7 is the same for all values of nvecs. In contrast, Figure 8 shows that the assembly for the fully
fused version adds move instructions as nvecs increases from four to ﬁve to six. These increased instructions account
for the degradation in performance of the fully fused version.
5. Accounting for Registers
To be able to account for register usage in the model, the number of registers was determined, the bandwidth
between the level 1 cache and processor calculated, and the model code modiﬁed to account for how the native
compiler allocates registers. The following section ﬁrst describes how to incorporate registers into the model and then
shows how adding them improves performance prediction.
5.1. The Changes Needed to Add in Registers
The ﬁrst step in including registers to the model is to represent the registers as a memory structure. To do so on the
Opteron system described in Section 3, we ﬁrst determined that there are eight general purpose registers. However,
because one is reserved for the stack pointer and another for the base pointer, only six registers can be used for general
purpose computation. Then we determined the bandwidth between the level 1 cache and the processor by means of
the DAXPY benchmark in STREAM2 [32] and stored it as the cost of register misses.
The next step involved modifying the code to account for the fact that registers are not allocated in a least recently
used fashion. Instead, the native compilers attempt to allocate registers in a manner that reduces the number of reads
into registers. To ﬁgure out which variables remain in registers, the following heuristics are used in the model to

1878

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881
Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

6

Figure 6: L1 misses per ﬂop for the fused outer loops and fully fused versions of multiple matrix-vector multiplies. nvecs is number of multiplies.

L0: fldl
fmull
faddp
fstl
add
cmp
jl

(%eax,%edi,8)
(%esi,%edi,8)
%st,%st(1)
(%ebx,%edx,8)
$0x1,%edi
%ecx,%edi
L0
Figure 7: Outer Loops Assembly

mimic the native compiler’s allocation. The iterate of an inner loop is stored in a register. A variable that is accessed
within an inner loop more than once is stored in a register if one is available. Finally, when a register is available, it is
allocated by the model to the ﬁrst instance of a variable that accesses data that never change in subsequent interactions
of the current loop.
5.2. The Eﬀect of Registers on Predictions
The result of adding registers into the model is shown in Figure 9 for fully fused routines. The graph shows that
the model with registers predicts a decrease in performance beginning at nvecs = 5, which matches the behavior of
the measured performance, while the model without registers, as noted in Section 4, predicts increased performance.
At nvecs = 5, not all vectors in the inner loop of the fully fused calculation shown in Figure 4 remain in a register.
The resulting growth in L1 cache misses causes performance to be bound on traﬃc from the L1 cache. Additionally,

(a) nvecs = 4

(b) nvecs = 5
Figure 8: Fully Fused Assembly

(c) nvecs = 6

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881
Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

1879
7

each increase of nvecs beyond 5 raises the ratio of L1 reads to computation and so reduces the performance predicted
by the model.

Figure 9: The measured performances of the fully fused routine compared with the performance of the fully fused routine predicted via the old
(without registers) and new (with registers) models.

We also compared both models’ predictions for the best routine for values nvecs = 1 to 6 to the results of exhaustively testing all routines for those values of nvecs. Complete tests for nvecs = 7 and 8 were not attempted due
to their long runtimes: we estimate that accurately testing the more than 150,000 versions the compiler produces for
nvecs = 8 could take ten or more days. Instead, we only ran tests for fused outer loops and fully fused versions
for those two values of nvec. In all cases, the model with registers predicts that fusing all outer loops provides the
best version. Also, inner loops should be fused together in groups of three or four when possible. Actual tests up to
nvecs = 6 demonstrate that fusing inner loops in groups of three produces the best performance. The model predicts
and experimental evidence from tests run shows that extra inner loops should be allocated in a way that keeps the
number of groups of inner loops at a minimum and groups of 3 or 4 at a maximum.
For nvecs = 1 to 3, both versions of the model predict the best routine. When nvecs = 4, both models’ best
predicted routine was the second best performing routine found by exhaustive search. In that case, the best predicted
routine was less than 5% slower than the optimal routine found by exhaustive search. The latter optimal routine had
all outer loops fused. It also had three inner loops fused together and one left alone. For nvecs = 5 to 6, the model
with registers predicts the optimal routine and best predicted routine to be similarly performing. Empirical testing by
the compiler ﬁnds the best routine in these cases. Using the version of the model without registers, the BTO compiler
cannot ﬁnd the optimal routine without empirically testing hundreds of routines. With registers included in the model,
the accuracy of the model’s predictions and the performance of the routine chosen by the compiler improved.
6. Future Work
To further the improvement of our system we plan to introduce memory of past decisions. Since many linear
algebra kernels have similar operations, having the compiler remember what decision it made in the past will allow it
to trim branches from its decision tree. Past decisions could come from routines run by a user or from routines run at
install time to proﬁle the system’s response to various fusion combinations. Trimming away full search branches will
become especially important as we explore how to create parallel routines and add other optimizations such as cache
blocking to our compiler. In addition, we are improving the model to algebraically determine when a data structure no
longer ﬁts within a cache. The new model will not have to be run on every problem size of interest but rather once for
all problem sizes. This improvement will allow us to quickly reason about blocking decisions and create problem size
dependent kernels. Finally, the predicted performance of our tested routines is not the same as measured. Currently,

1880

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881
Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

8

we use a single benchmark to predict the performance of all routines. The benchmark was chosen for its overall good
performance across a suite of test examples. Using diﬀerent benchmarks based on the properties of the routines being
analyzed could improve predictions.
7. Acknowledgments
The work of E. Jessup, I. Karlin, and E. Silkensen was supported by NSF grant CCF-0830458. The work of J.
Siek and G. Belter was supported by NSF CAREER Award 0846121 and by a gift from LogicBlox, Inc.
[1] W. K. Anderson, W. D. Gropp, D. K. Kaushik, D. E. Keyes, B. F. Smith, Achieving high sustained performance in an unstructured mesh
CFD application, in: Proceedings of the ACM/IEEE SC99 Conference on High Performance Networking and Computing, IEEE Computer
Society, 1999, article No. 69.
[2] C. Farhat, A. Macedo, M. Lesoinne, A two-level domain decomposition method for the iterative solution of high frequency exterior Helmholtz
problems, Numerische Mathematik 85 (2000) 283–308.
[3] M. Field, Optimizing a parallel conjugate gradient solver, SIAM J. Sci. Stat. Comput. 19 (1998) 27–37.
[4] B. Spencer Jr., T. Finholt, I. Foster, C. Kesselman, C. Beldica, J. Futrelle, S. Gullapalli, P. Hubbard, L. Liming, D. Marcusiu, L. Pearlman,
C. Severance, G. Yang, NEESgrid: A distributed collaboratory for advanced earthquake engineering experiment and simulation, in: 13th
World Conference on Earthquake Engineering, Vancouver, B.C, Canada, 2004, paper No. 1674.
[5] R. C. Whaley, A. Petitet, J. J. Dongarra, Automated empirical optimizations of software and the ATLAS project, Parallel Computing 27 (1–2)
(2001) 3–35.
[6] J. M. Dennis, E. R. Jessup, Applying automated memory analysis to improve iterative algorithms, SIAM Journal on Scientiﬁc Computing
29 (5) (2007) 2210–2223.
[7] P. Bientinesi, Mechanical derivation and systematic analysis of correct linear algebra algorithms, Ph.D. thesis, University of Texas at Austin
(August 2006).
[8] R. Vuduc, J. W. Demmel, K. A. Yelick, OSKI: A library of automatically tuned sparse matrix kernels, Journal of Physics: Conference Series
16 (1) (2005) 521–530.
[9] J. J. Dongarra, J. D. Croz, S. Hammarling, I. S. Duﬀ, A set of level 3 basic linear algebra subprograms, ACM Trans. Math. Softw. 16 (1)
(1990) 1–17.
[10] K. Goto, R. van de Geijn, High-performance implementation of the level-3 BLAS, Tech. Rep. TR-2006-23, The University of Texas at Austin,
Department of Computer Sciences (2006).
[11] J. W. Demmel, S. C. Eisenstat, J. R. Gilbert, X. S. Li, J. W. H. Liu, A supernodal approach to sparse partial pivoting, SIAM J. Matrix Anal.
Appl. 20 (3) (1999) 720–755.
[12] J. Bilmes, K. Asanovic, C.-W. Chin, J. Demmel, Optimizing matrix multiply using PHiPAC: a portable, high-performance, ANSI C coding
methodology, in: ICS ’97: Proceedings of the 11th International Conference on Supercomputing, ACM Press, New York, NY, USA, 1997,
pp. 340–347.
[13] G. W. Howell, J. W. Demmel, C. T. Fulton, S. Hammarling, K. Marmol, Cache eﬃcient bidiagonalization using BLAS 2.5 operators, ACM
Transactions on Mathematical Software 34 (3) (2008) 14:1–14:33.
[14] A. H. Baker, J. M. Dennis, E. R. Jessup, An eﬃcient block variant of GMRES, SIAM J. Sci. Comput. 27 (5) (2006) 1608–1626.
[15] R. Vuduc, A. Gyulassy, J. W. Demmel, K. A. Yelick, Memory hierarchy optimizations and performance bounds for sparse AT Ax, Tech. Rep.
UCB/CSD-03-1232, EECS Department, University of California, Berkeley (2003).
[16] A. Qasem, Automatic tuning of scientiﬁc applications, Ph.D. thesis, Rice University (July 2007).
[17] L. S. Blackford, J. Demmel, J. Dongarra, I. Duﬀ, S. Hammarling, G. Henry, M. Heroux, L. Kaufman, A. Lumsdaine, A. Petitet, R. Pozo,
K. Remington, R. C. Whaley, An updated set of basic linear algebra subprograms (BLAS), ACM Trans. Math. Softw. 28 (2) (2002) 135–151.
[18] G. Belter, E. Jessup, I. Karlin, J. G. Siek, Automating the generation of composed linear algebra kernels, in: Proceedings of the Conference
for High Performance Computing, Networking, Storage, and Analysis (SC09), ACM, 2009, article number 59.
[19] R. C. Whaley, J. J. Dongarra, Automatically tuned linear algebra software, in: Supercomputing ’98: Proceedings of the 1998 ACM/IEEE
conference on Supercomputing (CDROM), IEEE Computer Society, Washington, DC, USA, 1998, pp. 1–27.
[20] D. B. Whalley, Tuning high performance kernels through empirical compilation, in: ICPP ’05: Proceedings of the 2005 International Conference on Parallel Processing, IEEE Computer Society, Washington, DC, USA, 2005, pp. 89–98.
[21] K. Yotov, X. Li, G. Ren, M. Garzaran, D. Padua, K. Pingali, P. Stodghill, Is search really necessary to generate high-performance BLAS?,
Proceedings of the IEEE 93 (2) (2005) 358–386.
[22] K. Yotov, K. Pingali, P. Stodghill, Think globally, search locally, in: ICS ’05: Proceedings of the 19th Annual International Conference on
Supercomputing, ACM, New York, NY, USA, 2005, pp. 141–150.
[23] Y. Zhao, Q. Yi, K. Kennedy, D. Quinlan, R. Vuduc, Parameterizing loop fusion for automated empirical tuning, Tech. Rep. UCRL-TR-217808,
Center for Applied Scientiﬁc Computing, Lawrence Livermore National Laboratory (December 2005).
[24] Q. Yi, A. Qasem, Exploring the optimization space of dense linear algebra kernels, in: Languages and Compilers for Parallel Computing:
21th International Workshop, LCPC 2008, Edmonton, Canada, July 31 - August 2, 2008, Revised Selected Papers, Vol. 5335 of Lecture Notes
in Computer Science, Springer-Verlag, Berlin, Heidelberg, 2008, pp. 343–355.
[25] L.-N. Pouchet, C. Bastoul, A. Cohen, J. Cavazos, Iterative optimization in the polyhedral model: Part II, multidimensional time, in: PLDI
’08: Proceedings of the 2008 ACM SIGPLAN Conference on Programming Language Design and Implementation, ACM, New York, NY,
USA, 2008, pp. 90–100.
[26] J. Ferrante, V. Sarkar, W. Thrash, On estimating and enhancing cache eﬀectiveness, in: Proceedings of the Fourth International Workshop on
Languages and Compilers for Parallel Computing, Lecture Notes in Computer Science, Springer-Verlag, London, UK, 1992, pp. 328–343.

E.R. Jessup et al. / Procedia Computer Science 1 (2012) 1873–1881
Jessup, Karlin, Silkensen, Belter and Siek / Procedia Computer Science 00 (2010) 1–9

1881
9

[27] G. Rivera, C.-W. Tseng, Tiling optimizations for 3D scientiﬁc computations, in: Supercomputing ’00: Proceedings of the 2000 ACM/IEEE
Conference on Supercomputing (CDROM), IEEE Computer Society, Washington, DC, USA, 2000, p. 32.
[28] F. Agakov, E. Bonilla, J. Cavazos, B. Franke, G. Fursin, M. F. P. O’Boyle, J. Thomson, M. Toussaint, C. K. I. Williams, Using machine
learning to focus iterative optimization, in: CGO ’06: Proceedings of the International Symposium on Code Generation and Optimization,
IEEE Computer Society, Washington, DC, USA, 2006, pp. 295–305.
[29] S. Ghosh, M. Martonosi, S. Malik, Cache miss equations: A compiler framework for analyzing and tuning memory behavior, ACM Transactions on Programming Languages and Systems 21 (1999) 703–746.
[30] C. Chen, J. Chame, M. Hall, Combining models and guided empirical search to optimize for multiple levels of the memory hierarchy, in:
CGO ’05: Proceedings of the International Symposium on Code Generation and Optimization, IEEE Computer Society, Washington, DC,
USA, 2005, pp. 111–122.
[31] A. Epshteyn, M. Garzaran, G. DeJong, D. Padua, G. Ren, X. Li, K. Yotov, K. Pingali, Analytical models and empirical search: A hybrid
approach to code optimization, in: 18th International Workshop on Languages and Compilers for Parallel Computing (LCPC), Vol. 4339 of
Lecture Notes in Computer Science, 2005, pp. 259–273.
[32] J. McCalpin, STREAM2 Home Page, http://www.cs.virgina.edu/stream/stream2 (2010).

