Procedia Computer
Science
Procedia
Computer
(2012)1–7
1855–1861
Procedia
Computer Science
Science 001 (2010)
www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Using the Loci Framework for Automated Program and
Component Generation
Yang Zhanga,∗, Edward A. Lukeb
a Center

b Department

for Advanced Vehicular Systems, Mississippi State University, Box 9627, Mississippi State, MS 39762, USA
of Computer Science and Engineering, Mississippi State University, Box 9637, Mississippi State, MS 39762, USA

Abstract
In this paper we discuss the Loci framework and its ability for automated program and component generation for
computational simulation code development. Speciﬁcally we examine the use of the Loci framework for program
structure synthesis, memory and cache management, and parallel communication module generation from simple
high-level descriptions. In the end, we also discuss several on-going research eﬀorts that expand the capability and
eﬃciency of the Loci framework.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝
Keywords:
parallel programming, automatic software synthesis, resource management, numerical simulation

1. Introduction
The Loci programming framework was designed to address several software engineering concerns in developing
high-performance code for continuum mechanics simulations. The Loci framework uses a rule based programming
style and a tuple based data model. It automatically generates certain program components from a high-level user
speciﬁcation. Unlike conventional automated software generation and component based programming systems where
software components are generated and assembled as black boxes, the Loci framework employs an internal deduction engine that also ﬁnds the applicable computation domain for each of the components. Such a programming
style aﬀords ample opportunities in eﬃcient automatic program generation, thus leads to an ultimate improvement of
productivity. The detailed design and implementation of the Loci framework can be found in several recent publications [1, 2]. In this paper, we brieﬂy introduce the Loci framework and then focus our discussion on how the programming paradigm of the Loci framework facilitates correct and eﬃcient generation of various critical components
and structures in areas such as program ﬂow and structure, memory and cache systems, and parallel communications.
The fundamental building block in the Loci framework is rules, which are ﬁne-grained composable code segments
that map input parameters to output ones. Unless annotated otherwise, Loci rules have a single assignment semantic
regarding their I/O parameters. Deﬁning rules is the main method used to register data access patterns and computations with the Loci framework. The actual computation can be developed using traditional imperative programming
∗ Corresponding

author
Email addresses: fz15@cavs.msstate.edu (Yang Zhang), luke@cse.msstate.edu (Edward A. Luke)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.207

1856

Y. Zhang, E.A. Luke / Procedia Computer Science 1 (2012) 1855–1861
Y. Zhang and E.A. Luke / Procedia Computer Science 00 (2010) 1–7

2

paradigms and is usually provided directly as C++ code. A specialized Loci preprocessor provides a source-to-source
translator that automates the translation of high-level rule descriptions into a C++ code that interfaces to the Loci
framework Applications Programming Interface (API).
In combination with the rule deﬁnitions, Loci also provides containers that subscribe to the Loci data model. This
data model consists of containers that can be represented as a list of ordered pairs that associate either computational
entities with values or computational entities with other entities. Containers that associate entities with values are
called Store containers while containers that associate entities with other entities are called Map containers. Rules
use annotations to indicate how Map containers are used to access values when performing the given computation.
Through the identiﬁcation of these container types, a rule documents the data dependencies of a computation including
those that invoke indirect accesses to other computational sites. In this regard, the programming model is similar to
the make compilation utility [3] except that logic-relational approach similar to Datalog [4] is utilized to aggregate
computations, derive computational loop bounds, schedule parallel communication and memory allocation.
$rule pointwise(target<-neighbor->source) {
int sz = $neighbor.size() ;
double sum = 0 ;
for(int i=0;i<sz;++i)
sum += $neighbor[i]->$source ;
$target = sum/sz ;
}
Figure 1: Example Loci rule

Figure 1 shows a simple rule that describes a computation using the Loci preprocessor. The Loci syntax extends
standard C++ with annotations using the ’$’ symbol. In this example, the ﬁrst line registers a point-by-point computation with data dependence information (the output store target depends on the input store source and map
neighbor) and a data access pattern (the access to the store source is through the map neighbor) to the Loci framework. The contents within the braces deﬁne the actual computation (as C++ code with access to Loci syntax). The
example here shows a computation where the target is the average of the neighbor sources. The neighbor map
may consist of the cells neighboring a cell in an unstructured mesh computation, for example. In this rule, the speciﬁc
entities for which the computation will be performed is not described, but instead is automatically derived from the
existence of the source information at all neighboring entities, and that the values were requested by other rules.
It should be noted that Loci provides a ﬁne-grained computation model. That is, users specify computations
for individual computational sites such as the integration for a single element in a ﬁnite-element mesh, or the area
computation of a given triangular face in a ﬁnite-volume solver. Loci provides the infrastructure to reason about the
aggregation of these computations. Thus, in a Loci program, the computational categories such as mesh elements,
faces, and nodes are not explicitly identiﬁed, but rather are emergent properties from the fact that only nodes have position, only faces have area, and etc. Such a capability in the Loci framework is one of the most important foundations
for its ability to automatically generate various critical software components. For conciseness, a detailed description
of the Loci programming syntax is not presented here. Readers are referred to the Loci tutorial that is included with
the source distribution of the Loci framework [5].
2. Automatic Generation of Control Flow and Structure
Although the Loci rule system is similar to the make rules, it is more sophisticated. The Loci rule system also supports the notion of inductive iteration and recursion. Figure 2 illustrates a partial implementation of a time dependent
heat equation solver implemented using Loci rules. First notice that the rule deﬁnition is much like the actual mathematical notation. By appending “{}” to denote the variable superscripts, Loci is able to derive the iterative algorithm
inductively. But perhaps the more important beneﬁt of such rule system is that it makes use of iteration dependency
reasoning that is similar to those used in the common descriptions of numerical algorithms. Notice in Figure 2 that the

Y. Zhang, E.A. Luke / Procedia Computer Science 1 (2012) 1855–1861
Y. Zhang and E.A. Luke / Procedia Computer Science 00 (2010) 1–7

1857
3

forward Euler time step requests the residual, R, from time step n, and since the variable u is dependent on time step n,
the evaluation of the last rule in Figure 2 will be computed at each iteration with u{n} as an input to the div(grad(u))
operator. This mimics how numerical algorithms are commonly described where the relationships between variables
without superscripts are assumed to be invariant to iteration. Such a programming reasoning and rule system enables
Loci to automatically “pull” necessary computations to conﬁgure the entire program control ﬂow. In a typical numerical application, most of the computations are indeed invariant to iteration, just as the last rule shown in Figure 2. In
the Loci framework, the coupling of iteration invariant computations with the various time stepping algorithms are
automatically determined by the Loci framework. In fact the Loci framework can couple an entire time independent
iteration deﬁnition with any time dependent rules.

// Numerically solve the partial differential equation:
// Using Forward Euler time integration

∂u
∂t

= ν ∇ · ∇u

// Set Initial Value: un=0 = uinitial
$rule pointwise(u{n=0}<-u initial) { $u{n=0} = $u initial ; }
// Forward Euler time-step: un+1 = un + ΔtRn
$rule pointwise(u{n+1}<-u{n},R{n},dt) { $u{n+1} = $u{n}+$dt*$R{n} ; }
// Define residual (diffusion operator): R = ν div(grad(u))
$rule pointwise(R<-nu,div(grad(u))) { $R = $nu*$div(grad(u)) ; }
Figure 2: Iterative deﬁnition in Loci

The divergence and gradient operators provided in the last rule of Figure 2 is using a basic parametric rule facility
that is provided by Loci. This facility utilizes a functional paradigm with recursive renaming and basic pattern matching. Using this parametric rule facility, we have been able to describe common operators within the context of a given
discretization method. An example of this is the deﬁnition of divergence and gradient operators for the ﬁnite-volume
method that allows for a residual deﬁnition such as described in Figure 2. These operators are deﬁned as part of a
library of rules that supports building ﬁnite-volume applications. For example, a second order divergence operator
may be deﬁned by the rule given in Figure 3. In this code, the variable X is a free variable that will be substituted based
on the arguments provided by other rule requests (e.g., the rule residual computation in Figure 2). These substitutions
can be recursively applied allowing for the composition of operators such as composing divergence and gradient to
construct a Laplacian as in div(grad(u)).
To support building complex applications, Loci supports the grouping of multiple rules into modules that encapsulate certain speciﬁc functionality. For example, the operators used to compute the residual in Figure 2 is provided
by a ﬁnite-volume module implemented in Loci. Modules are designed to be loaded dynamically at runtime, while
the module interactions are managed by the Loci framework, which automatically determines the interleaving of rules
across modules. This facilitates a clean software structure and encourages code reuse.
$rule pointwise(div(X)<-faces->(area,n,X)) {
double sum = 0 ;
for(int i=0;i<$faces.size();++i)
sum += $faces[i]->$area*dot($faces[i]->$n,$faces[i]->$X) ;
$div(X) = sum ;
}
Figure 3: Parametric deﬁnition of a divergence operator

1858

Y. Zhang, E.A. Luke / Procedia Computer Science 1 (2012) 1855–1861
4

Y. Zhang and E.A. Luke / Procedia Computer Science 00 (2010) 1–7

Another useful feature in the Loci framework is the automatic regulation of rule computation on the same variable
by deﬁning rule priority. Figure 4 gives an example deﬁnition of a series of rule priorities. In a rule deﬁnition, if the
target variable is preﬁxed with any string by a “::” operator, then that rule has priority over the rules whose targets
have fewer levels of “::” preﬁxes. For example, in Figure 4, the last rule has a higher priority than the middle rule,
and the middle rule in turn has higher priority than the ﬁrst rule. A variable name with a “::” sign does not indicate
a new name, but rather it is a notation of computation precedence. For example, all rules in Figure 4 generate the
same target variable. The notation bnd::target here indicates that computation of the target variable on the
boundary takes precedence over the variable in the other regions. Likewise, coflow::bnd::target denotes that the
target variable on the boundary with a co-ﬂow condition has the highest priority. In some regards, priorities act
similar to class specialization in an object-oriented context where typically a generic rule is provided (base class),
while other rules provide overriding computations describe the behavior of specialized classes of entities. In Loci,
however, membership of this class is automatically deduced by the information encoded in the rule deﬁnition.
$rule pointwise(target<-source) {...}
$rule pointwise(bnd::target<-other source) {...}
$rule pointwise(coflow::bnd::target<another source) {...}
Figure 4: Priority rule for computation arbitration

Figure 5 gives an illustration of the priority regulation in the Loci framework. The colored table entries in the ﬁgure
represent the computation domains that have been deduced for the target variable (recall that Loci containers are list
of tuples) in the ﬁrst two rules in Figure 4. At this point, Loci is aware that the domains overlap in the ﬁrst and the last
entries. However because of the priority speciﬁcation, the second rule will be used to produce values for these entries
and that the overlapped computations in the ﬁrst rule will be discarded. Notice that the rule priority speciﬁcation (as
in Figure 4) is not coupled with the computation domain, it merely provides a priority relationship among various
possible computations. The resolution of the actual computation on domains is automatically performed by Loci at
runtime. Such a feature gives the software designers the ability to dynamically alter the existing program behavior by
adding their own priorities without aﬀecting the existing software codebase.
3. Automatic Optimization in the Loci framework
In addition to providing a high-level interface for developing mesh based computations, the Loci framework facilitates high-performance implementations through the use of a variety of automatic code generation and optimization
techniques that are described brieﬂy in this section.

target

L

priority

bnd::target
U

target

U

L

L

L

L

L
L

L
U

Figure 5: Rule priority illustration (override)

U

Y. Zhang, E.A. Luke / Procedia Computer Science 1 (2012) 1855–1861
Y. Zhang and E.A. Luke / Procedia Computer Science 00 (2010) 1–7

1859
5

3.1. Automatic Memory and Cache Optimization
Automatic dynamic memory management can also be achieved on top of the Loci framework’s rule system. The
execution of rules are modeled as directed graphs in Loci. Typically graph nodes represent the various computations
deﬁned in rules, however, dynamic memory allocation and recycling can also be viewed as graph components. In this
way, the proper placement of the memory operations in the original graph corresponds to a computation with proper
memory allocation and recycling.

ALLOCATE: D

B
ALLOCATE: E

D
E ← B, D

D ← A, B

A

ALLOCATE: F

F ← A, B, D

F

E

ALLOCATE: C

C ← B, D, F
DELETE: D

C

DELETE: F

Figure 6: Automatic memory allocation as graph decoration

Figure 6 shows an example of such automated memory management scheme in the Loci framework. As long
as the graph is scheduled according to the dependency constraints, the program behavior with memory allocation is
always correct. In reality, due to iterative rule speciﬁcations, the entire graph is broken into multiple levels with only
DAGs in each level. Several global analysis passes are needed for the correct placement of memory operations in the
multi-level graph. Notice that such a memory allocation scheme only manages the variables registered to the Loci
framework (the containers documented through a Loci rule). The computations deﬁned inside a rule (e.g., the contents
inside the braces in Figure 1) are typically done with an imperative programming style in C++. Since these codes are
outside of the framework, their memory usage is not managed by Loci. In the most common rule implementations, the
memory needed by a rule computation is allocated as automatic variables and needs no special memory management.
With the knowledge of computation domain for each of the rules in a program, we are also able to perform cache
optimization. Each rule deﬁnition can be viewed as a computation kernel. Together with its computation domain, a
rule is essentially a loop that repeatedly calls the kernel. With the knowledge of the loop bounds, commonly used
techniques such as strip mining can be easily applied to optimize data cache performance. Since Loci assembles the
program control ﬂow graph, we use a heuristic search algorithm to discover sub-graphs that include all the rules that
can receive the cache optimization treatment. Once all the domains as computational loop bounds are deduced, the
domains are partitioned into segments. Memory is only allocated for a segment and is reused when computing the
next available segment. When allocating these segments, the size of the data cache is usually considered to try to ﬁt
all these segments. Such a cache optimization scheme also further optimizes the memory usage since for all the rules
receiving the cache optimization, only small amount of memory (for a segment) is allocated instead of an allocation
for the entire containers. In reality, we found that such beneﬁt provides signiﬁcant savings for memory usage [6].
3.2. Generation of Distributed Parallel Communication
Perhaps the most signiﬁcant beneﬁt the Loci framework provides is its automatic parallelism. As can be seen
from all the previous examples, the rule deﬁnitions do not contain any reference to parallel implementation. However
these rules can be automatically scheduled in a data parallel fashion when running on distributed memory machines.
This is also made possible by the ﬁne-grained computation model in Loci. Since each rule with its computation
domain can be viewed as a loop of computation kernel, a data parallel execution will naturally result by distributing

1860

Y. Zhang, E.A. Luke / Procedia Computer Science 1 (2012) 1855–1861
Y. Zhang and E.A. Luke / Procedia Computer Science 00 (2010) 1–7

6

segments of loops onto parallel processes. In the Loci framework, given a correct initial set of data on each parallel
process, the ﬁne-grained computation model naturally discovers the correct parallel domain distribution for each
rule. The most notable complication comes from when variables made references to data that are distributed on
other processes (e.g., the neighbor->source composition in the rule in Figure 1). In this case, these data may
need to be communicated among processes to provide a “clone” version locally to the requesting process. This is
solved by an analysis of the entire data reference patterns documented in all the rules participating computations.
Communication schedules are then inserted into the rule schedules. Detailed implementation considerations can
be found in [1]. This approach often produces a parallel execution schedule with performance comparable to or
sometimes better than ad hoc hand parallelized programs due to the systematic and consistent algorithms used to
parallelize computation domains. Parallel performance measurements and comparisons can be found in several of our
recent publications [1, 2].
3.3. Work Replication as a Communication Optimization
We have also taken advantage of the single assignment semantic of Loci rules to perform communication optimizations that trade computational work for communication overhead. In a typical Loci parallel schedule, there
may be many communication synchronizations. Many of these synchronizations can be eliminated if a computation
is replicated on several processors. That is, we have a choice of communicating a value or recomputing it locally.
The semantics of Loci allows for the framework to automatically make this optimization. The basic methodology
is described in a recent paper [7]. In this optimization we utilized heuristics and a basic performance model to determine which computations were productive for replication. Studies showed the optimization resulted in improved
application scalability on high latency networks such as commodity clusters utilizing Ethernet interconnect.
4. On-going Developments
4.1. Preprocessor Optimization
Currently most of the substrates and infrastructures in the Loci framework are implemented in the C++ language.
Usually a source-to-source translator is utilized to automate the translation of rule deﬁnitions into the deﬁnition of
C++ classes that inherit from Loci base classes. The original purpose of this preprocessor was to simplify the syntax
and to add error checking at compile time. However, we are also looking into adding optimization capabilities to the
preprocessor whereby it could provide alternative implementations of the same computation where the runtime system
could choose the optimal implementation based on runtime knowledge. One example of this that shows promise is for
the preprocessor to provide a basic implementation along with an alias free implementation that utilizes restrict
keyword annotations. Since the runtime system can easily deduce if aliasing is present, it can correctly select which
implementation to execute. Preliminary study of this optimization shows that it can have a signiﬁcant impact depending on the speciﬁcs of the compiler and type of computation described. In addition to these optimizations, we are
investigating hints that users can give along with the rule speciﬁcation that would allow the Loci scheduler to make
more targeted optimizations. For example, to indicate if the dynamic load balancing loop scheduling optimization
should be applied to a given computation.
4.2. Dynamic Applications
Many of the software generation capabilities of the Loci framework we have described in this paper are made
possible under the assumption that the application being described is static. In a ﬁnite-element mesh based application,
being static usually means that the mesh topology is ﬁxed during the execution of the application. Such stasis made it
possible for Loci to reuse its deduced computation domain for the entire application allowing expensive optimizations
to be amortized over the savings generated over a long computation time. On the other hand, there are important
applications that are dynamic including simulation models utilizing particle-in-mesh techniques or dynamic adaptive
mesh reﬁnement. In these applications, mesh structure and the geometric topology are constantly changing during the
runtime. Thus some of the deduced computation domain (and the associated code generated) will be invalidated, and
require regeneration. We have recently started to address these applications in the Loci framework by developing new
constructs to describe such dynamism [8]. With this new foundation we have been able to implement a Lagrangian
particle-in-mesh simulation capability with promising results. We are currently implementing a complete version of
this new model that will be able to support scheduling dynamically adaptive mesh computations.

Y. Zhang, E.A. Luke / Procedia Computer Science 1 (2012) 1855–1861
Y. Zhang and E.A. Luke / Procedia Computer Science 00 (2010) 1–7

1861
7

5. Conclusions
In this paper we have discussed a novel framework for the automatic assembly of numerical simulation models. This framework introduces a multi-paradigm strategy for automating important aspects of generating highperformance simulation software. This multi-paradigm strategy includes ﬁve key components:
1. A simple relational data model to represent the role of containers in the communication of information between
ﬁne-grained computational descriptions.
2. A logic-relational model that describes the composition and aggregation of ﬁne-grained computational elements.
3. An inductive description of the temporal evolution of values that closely matches the typical notation used in
numerical algorithm descriptions. This description also allows one to describe computational relationships that
remain invariant to iteration allowing the system to determine automatically when a computation should occur
based on data dependencies.
4. A parametric description of computational rules that provides a mechanism to describe abstract concepts such as
mathematical operators. By supporting recursive substitutions and basic pattern matching, this facility supports
straight-forward operator composition.
5. A sophisticated deduction engine that is able to utilize these models to automatically compose computations as
well as direct optimizations that preserve model semantics.
The multi-paradigm approach employed allows for both high-level and low-level descriptions of computations to
co-exist. The approach is able to describe high-level operators in the context of speciﬁc discretization strategies using
rule libraries, but does not make any speciﬁc assumptions that ties the approach to a speciﬁc discretization strategy.
We have implemented solvers for ﬁnite-volume, ﬁnite-element, and discontinuous-Galerkin discretization strategies,
and have even performed simulations that coupled various discretization strategies into a single uniﬁed application.
Although the description of the computations is ﬁne-grained, the resulting performance has been competitive with
more traditional approaches. For example, we have found that the performance of a Loci ﬂuid solver application
was superior to that of an equivalent OpenMP version [2]. This ability to have a high-level description and highperformance is enabled through the use of automatic optimization techniques such as those that have been outlined in
this paper.
Finally, the Loci framework has been under development for the past ten years and is becoming a mature software
system. It has a demonstrated capability in the development of production simulation software such as the Loci/CHEM
solver [9] that are presently used extensively by NASA and the Air Force as well as industry on parallel clusters ranging from tens to thousands of processors. Diverse models ranging from multi-disciplinary simulation [10] to radiation
transport [11] have been implemented within the framework demonstrating the practical utility of the approach.
[1] E. A. Luke, T. George, Loci: A rule-based framework for parallel multi-disciplinary simulation synthesis, Journal of Functional Programming,
Special Issue on Functional Approaches to High-Performance Parallel Programming 15 (03) (2005) 477–502.
[2] Y. Zhang, E. A. Luke, Concurrent composition using Loci, IEEE/AIP Computing in Science and Engineering 11 (3) (2009) 27–35.
[3] R. M. Stallman, R. McGrath, GNU Make: A Program for Directed Compilation, Free Software Foundation, 2002.
[4] J. D. Ullman, Principles of Database and Knowledge-base Systems, Volume I: Classical Database Systems, Computer Science Press, 1988.
[5] E. A. Luke, The Loci framework source code distribution, http://www.cse.msstate.edu/~luke/loci.
[6] Y. Zhang, E. A. Luke, Dynamic memory management in the Loci framework, Scalable Computing: Practice and Experience 7 (3) (2006)
27–38.
[7] K. Soni, N. Cain, E. A. Luke, Work replication: A communication optimization in Loci, in: Proceedings of the ISCA 21nd International
Conference on Parallel and Distributed Computing and Communication Systems, New Orleans, LA, 2008, pp. 50–55.
[8] Y. Zhang, E. A. Luke, Design and implement dynamic irregular parallel computation using the key-value-reference model, in: Proceedings
of the ISCA 22nd International Conference on Parallel and Distributed Computing and Communication Systems, Louisville, KY, 2009, pp.
115–120.
[9] E. A. Luke, P. Cinnella, Numerical simulations of mixtures of ﬂuids using upwind algorithms, Computers and Fluids 36 (2007) 1547–1566.
[10] Q. Liu, E. Luke, P. Cinnella, Coupling heat transfer and ﬂuid ﬂow solvers for multi-disciplinary simulations, AIAA Journal of Thermophysics
and Heat Transfer 19 (4) (2005) 417–427.
[11] S. Rani, E. Luke, Advanced non-gray radiation module in the Loci framework for combustion CFD, in: Proceedings of the 44th
AIAA/ASME/SAE/ASEE Joint Propulsion Conference and Exhibit, AIAA, 2008, #AIAA-2008-5253.

