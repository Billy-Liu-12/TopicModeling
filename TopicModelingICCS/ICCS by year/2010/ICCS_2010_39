Procedia Computer
Science
Procedia Computer
001(2010)
1–9
Procedia
ComputerScience
Science
(2012)
317–325

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Car-driving assistance using organization measurement of reactive
multi-agent system
Franck Gechter, Jean-Michel Contet, Pablo Gruer, Abderraﬁaa Koukam
University of Technology of Belfort-Montbeliard (UTBM),
Systems and Transportation Laboratory (SET), Belfort, France
http://set.utbm.fr/

Abstract
This work presents an approach to the obstacle avoidance problem, applicable in the frame of driver assistance.
A decision, expressed as a proposed acceleration vector for the vehicle, is elaborated from the evaluation of a set of
indicators characterizing the global state of a system of reactive agents (RMAS). Those agents evolve in a virtual
environment produced on the base of vehicle’s perceptions of the material environment around it. Agent-to-agent and
agent-to-environment interactions are deﬁned in order to produce a distribution of agents over the virtual environment.
This distribution, taken as the global state of the system, is analyzed by applying a set of indicators inspired from
statistical physics, to calculate a new vehicle’s acceleration vector. This work presents the details of the RMAS
model and its interaction laws, together with the global state evaluation functions. The approach has been applied to
experimentation with a laboratory vehicle. Some experimental results are presented here.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: Reactive Multi-Agent Systems, Obstacle Avoidance, Car-Driving Assistance
1. Introduction
Obstacle avoidance helps the driver to prevent accidents by detecting vehicles or other obstacles on the road
ahead and by avoiding collision. Currently, cars with Adaptive Cruise Control, integrate obstacle avoidance function,
with very basic functionalities: based on information obtained from radar sensors, those systems produce visual and
acoustic warnings. Recent approaches tend to integrate obstacle avoidance with motion planning and path following,
a couple of well formulated and closely tied problems, directed to the objective of autonomous navigation. They are
classically solved by computing a trajectory avoiding known obstacles [4]. However, standard methods for motion
planning can not be applied to dynamical and uncertain environment. Therefore, reactive navigation seems to be a
suitable approach. Proposals found in literature can be classiﬁed into three categories:
• Physics inspired methods: in this kind of methods physics inspired model are applied to sensor information and
are transformed into motion command law. Among these methods can be cited the potential ﬁeld methods such
as VFH (Vector Field Histogram) and VFF (Virtual Force Field) [5], the perfume and the ﬂuid analogy [6].
• Motion Command selection methods: These approach compute a set of suitable motion commands to select one
command based on navigation strategies [7]. The selection strategy can then be based on classical algorithms
such as subsumption architecture or HTN (Hierarchical Task Networks).
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.035

318

F. Gechter/ Procedia
et al. / Procedia
Computer
Science
(2012) 317–325
Computer
Science 00
(2010) 11–9

2

• High Level methods: these methods compute some form of high-level information description from the sensory
information to obtain a motion command. For instance, the nearness diagram navigation [8] belongs to this
group of approaches.
Multi-agent systems are an eﬃcient approach for problem solving and decision making applied to a wide range of
applications. Among the classical models, the reactive approach is one of the most interesting thanks to their intrinsic
properties and features such as simplicity, ﬂexibility, reliability, self-organization/emergent phenomena, low cost agent
design and adaptation skills,... It has been shown that Reactive Multi-Agent System (RMAS) approach is eﬃcient for
tackling complex problems such as pedestrian multi-level simulation [2], cooperation of situated agents/robots, data
fusion and problem/game-solving.
This work aims to contribute to the obstacle avoidance problem within an autonomous navigation framework,
but the proposed approach can also be integrated to driver assistance systems. The goal of this paper is to propose
a decision making approach to obstacle avoidance, in which decision consists on a new acceleration vector for the
vehicle to avoid the obstacle. In this approach, decision is a result of the evaluation of emergent organization patterns
in a system of reactive agents. In this model interaction and environment have a preponderant role. As a matter of fact,
the agents are immaterial and evolve in an environment which is an abstraction of material environment, constructed
from vehicle’s perceptions. As already stated, the decision is built by evaluating emergent dynamical properties,
thanks to global state indicators inspired from statistical physics.
The paper is structured as follow: Section 2 presents the reactive multi agent system (RMAS) model applied to
decision making in dynamical obstacle avoidance, together with the approach to evaluate the emergent global state of
the RMAS. Section 3 presents experimental results made on an experimental intelligent vehicle. Finally, we present
conclusions and our view on future work.
2. A Reactive Multi-Agent Solution
This section gives a detailed description of the proposed RMAS driving assistant. After drawing the main principle
of the system, each speciﬁc component will be described. The proposed model can be considered as an application
of the methodology developed in [1]. This methodology puts the environment in the center of the problem-solving
process as the place where the problem and its constraints are speciﬁed and presented to the perception of the agents.
Then interactions are deﬁned in order to take into account the problem’s dynamics. Finally, these elements lead to an
emergent structure considered to be a solution to the problem. In the context of this article, the emergent structure has
to be interpreted as a command to be applied to the vehicle.
2.1. Main principle
The vehicle decision process is considered as a multi-agent system, the agents of which make collectively the
best decision considering the perceived constraints. (To clarify the paper, these agents will be called Decision Agents
(DA) in the following sections.) In order to compute the decision at each time step, DA need to perceive vehicle’s
world or an abstraction of it. As state in [1] agents environment can be considered to be the link between the real
world and agents world. Thus, a DA environment is built by merging the information given by the vehicle sensors.
Each obstacle detected by one or more sensors in real world is thus turned into an repulsive spot in DA environment.
Repulsive spot characteristics are deﬁned using sensors information (size, orientation, height,...). Driver command is
also integrated in DA environment. It is represented as an attractive spot, the position of which depends on steering
position and required velocity. The boundaries of DA environment are deﬁned to be the union of all sensor ranges.
Then, interaction are deﬁned, using physical model, to make Decision Agents being repulsed by perceived obstacle
and attracted by driver decision. The emerging organization of this system is ﬁnally interpreted and transformed as
a decision taking into account global indicators based on topological analysis (mean position, mean agents speed,...)
and level of constraint estimation (global energy, statistical physics...). Figure 1 shows an overview of the system.

319
3

F. Gechter et al.
/ Procedia
Computer
Science
1 (2012)
/ Procedia
Computer
Science
00 (2010)
1–9 317–325
Attractive spot

p
Repulsive
spots

Driver command projection
p jection

Decision
D i i Agents

Environment
Construction /
Sensors Data
Fusion

Decision Process

Command

Obstacles

Law

Vehicle

Perception Range

Figure 1: System overview

2.2. Environnement, Agents and Interactions
• Environment.
As state before, agents environment is the corner stone of the approach. It links vehicle’s world and the decision
process mechanism. Generally, agents environments are described through their topology and their dynamics.
In the approach presented in this paper, environment topology is deﬁned as the merged boundaries of all available vehicle sensors. The dynamics is directly linked to obstacles dynamics. For each appearing real obstacle, a
new repulsive spot is created. Spots characteristics depend on real obstacle properties: spot position is deduced
by merging sensors information and repulsion coeﬃcient, denoted Ro is determined taking into account real
obstacle size. As explain in previous section, driver command is translated into an attractive point in agents
environment the characteristics of which are a horizontal axis position depending on steering angle, vertical
axis position linked to speed requirement and attractive coeﬃcient, denoted ADc , computed taking into account
the distance between the current command sent to the vehicle and driver command.
• Decision Agents
In this context, agents can be considered as small mass particles, the behavior of which is to reach the minimum
of a potential ﬁeld. This potential ﬁeld is created by attractive/repulsive spots and by the decision agents
themselves. Indeed, each decision agent induce a repulsion ﬁeld so as to keep agents as far as possible from
each other. Initially, agents are spread randomly in the virtual environment. There number is taken as the square
root of the surface of the environment. This number is generally taken in reactive multi-agent applications. It is
high enough to obtain signiﬁcant emerging results and low enough to avoid agent jam. Agents parameters are
the following:
Parameter
m
(p x , py )
(v x , vy )
(a x , ay )
PR

Description
mass of the decision agent
agent position in x and y
agent speed in x and y
agent acceleration in x and y
Perception Range

Table 1: Decision Agent Parameters

320

F. Gechter/ Procedia
et al. / Procedia
Computer
Science
(2012) 317–325
Computer
Science 00
(2010) 11–9

4

• Interactions
Interactions are inspired by physics. Three types of interaction are deﬁned: (i) Interaction between Agents
(ii) Interaction between Agents and Obstacles1 (Repulsive spots) (iii) Interaction between Agents and Driver
Command (Attractive spot)
• Agent-Agent Interaction: Agent-Agent interaction can be considered as a simple Newtonnian repulsion
force in 1/d2 . Its expression is the following considering two decision agents i and j situated at positions
Ai and A j : Ri j = RA .mi .m j

Ai A j
Ai A j

3

for each decision agent Ai such as Ai A j < PR . In this equation, mi and

m j are respectively the mass of agents i and j. In our case, since the population is homogeneous, the mass
is the same for each. This force is applied to decision agent j due to the presence of decision agent i. Then,
for one decision agent j all the forces induced by other decision agents can be summarized following this
equation:
⎧
⎪
(x j −xi )
⎪
⎪
⎪
R = i RA .mi .m j
3
⎪
⎪
⎨ Xj
((y j −yi )2 +(x j −xi )2 ) 2
(1)
with i such as i j and di j < PR
⎪
⎪
⎪
(y j −yi )
⎪
⎪
⎪
⎩ RY j = i RA .mi .m j ((y −y )2 +(x −x )2 ) 32
j

i

j

i

(di j is the distance between Agents i and j)

Figure 2: Agent-Agent repulsion behavior

Figure 2 shows repulsion behavior induced by agents A j (force R ji ) and A p (force R pi ) on agent Ai . The
global repulsive behavior is given by the force denoted Ri . Agents A j and A p are in the perception range
of agent Ai . Agents Aq , Ar and A s that are out of the perception range have no inﬂuence on agent Ai .
• Agent-Obstacle Interaction: Agent-Obstacle Interaction is nearly the same as the previously deﬁned agentagent interaction. Its expression is the following involving decision agent i and an obstacle denoted o :
Rio = Ro .mi .mo OAi 3 for each obstacle o such as Ai O < PR . In this equation, mi and mo are respectively
OAi

the mass of the agents i and the mass of the obstacle o. This last is deﬁned taking into account obstacle
size. Then, for one decision agent i all the forces induced by obstacles can be summarized following this
equation:
⎧
⎪
⎪
(xi −xo )
⎪
⎪
R = o Ro .mi .mo
3
⎪
⎪
⎨ Xi o
((yi −yo )2 +(xi −xo )2 ) 2
with o such as dio < PR
(2)
⎪
⎪
⎪
(yi −yo )
⎪
⎪
R
=
.m
.m
R
⎪
Y
o
o
i
o
3
o
i
⎩
((y −y )2 +(x −x )2 ) 2
i

1 Including

environment boundaries

o

i

o

321
5

F. Gechter et al.
/ Procedia
Computer
Science
1 (2012)
/ Procedia
Computer
Science
00 (2010)
1–9 317–325

• Agent-Driver Command Interaction: Agent to attractive spot interaction is deﬁned as a simple linear
attraction force deﬁned as follows: AiDc = ADc .mi .Ai Dc .
• Decision agent behavior computation
Position, speed and acceleration for each agent are computed considering agents environment to be continuous.
Agents’ dynamical characteristics are computed following the laws of the classical Newtonian physics. Each
behavior applied to an agent corresponds to a force inﬂuencing its movement.
By applying the fundamental law of dynamics, acceleration of each agent can be computed. Here, γ represents
acceleration, m agent mass, and Fb the force resulting from behavior b: γ = m1 behaviors Fb . By substituting
in the deﬁnition all the forces, collecting terms in the velocity vector V, and integrating twice we obtain the
following equation:
Xi (t) = Xi (t − 1) + Vi (t − 1)δt +

(δt)2
Rio + Ri + AiDc
2m

with Xi (t) =

xi (t)
yi (t)

(3)

2.3. Evaluation of global properties
The emerging organization of this system is the result of agents-agents and agents-environment interactions. This
organization takes into account both obstacles (position and dynamics) and driver command. From now on, organization characteristics must be transformed into a command law (steering and speed) to be sent to the vehicle. To that
way, global indicators based on topological analysis (mean position, mean agents speed,...) and level of constraint
estimation (statistical physics) are used.
• Mean position.

The easiest way to compute a global indicator for an agents population is to ﬁnd out the mean position of
agents. This mean position allows to have information on the global conﬁguration of the environment (detected
obstacles, driver command,...)

• Mean speed.

The agents mean speed computation allows to retrieve information on environment global conﬁguration dynamics. If this conﬁguration change only a little, the mean speed will stay nearly the same (equivalent to the mean
speed of a Brownian process). By contrast, if the global conﬁguration changes a lot, due to the the appearance
of a new detected obstacle for instance, the mean speed will drop to another value.

• Statistical physics.

A global estimation approach inspired by statistical physics and thermodynamics has been developed in [3].
This approach can be considered as a way to link the microscopic and a macroscopic points of view in agents
system. The statistical physics based method gives an important role to partition function Z which is computed
thanks to energetic measurement. From this mathematical function can be extracted indicators that represent
the global evaluation of the system state based on local phenomena and constraints evaluation. According to
the interaction model, the energy measurement can be detailed as follow :
– Kinetic energy: . In the following equation, the agent i is represented by its mass mi and its speed Vi :
E K = 12 mi Vi .Vi
– Potential energy: it is computed, for agent i, using the classical expression of the energy U : U = δW +δQ
where δW represents the work done on the system and δQ the heat ﬂow (here, δQ = 0 since no heat is
dissipate). The work done on the system δW is expressed considering a conservative force (Cf. equation
4) with du a unit vector in the direction of agent speed.
E p = δW = Ftotal .du = FObstacles .du + F Agents .du + F Driver .du

(4)

322

F. Gechter/ Procedia
et al. / Procedia
Computer
Science
(2012) 317–325
Computer
Science 00
(2010) 11–9

6

Agent’s energy corresponds to the sum of the kinetic and the potential energy : E = Ek + E p . From now, the
free energy could be computed :
A(T, V, Ni ) = −ln(Z)
Z = e−βE

(5)

with T the temperature, V the volume and Ni number of element. From now on, thermodynamic potentials A
is deﬁned. Thus, the system indicators can be computed [9]. The indicator A study allows to deduce some
properties about system evolution. For instance, given a system in an initial non equilibrium state, if it evolves
to an equilibrium state, the negative of the diﬀerence in the Helmholtz energy is equal to the maximum amount
of work and the function A is minimized at equilibrium.
2.4. Decision vector computation
Decision vector computation takes into account the indicators described above. Mean position will give the global
decision vector according to the relative position of the vehicle in decision agent environment. This decision vector
consists in an orientation (angle) and a speed (value) to be applied to the vehicle. Decision vector angle is then
modiﬁed according to mean speed value. So as to make this angle modiﬁcation, a combination mean vector M
between mean position vector M p and mean speed vector M s is made. Then, combination mean vector M norm is set
to the former mean speed position vector norm following this equation (cf. Figure 3):

with nbA the number of decision agents.

⎞
⎛
⎜⎜⎜
M s ⎟⎟⎟
⎟⎠
M = ⎝⎜ M p + √
nbA

Mp
Mp +

M
√ s
nbA

(6)

Figure 3: Decision Vector computation

Finally, decision vector D is computed according to free energy value following this equation:
D = (1 + κ.A) . M
with κ a ponderation factor. This vector is then applied as a command law to the vehicle.

(7)

323
7

F. Gechter et al.
/ Procedia
Computer
Science
1 (2012)
/ Procedia
Computer
Science
00 (2010)
1–9 317–325

3. Experimentations
The model described in the previous section has been implemented thanks to the MadKit multiagent platform2 .
Experimentation are used to validate some model characteristics.
3.1. Vehicle architecture
The validation of the proposed reactive multi-agent system has been realized on real vehicle. The System and
Transportation Laboratory has two electric vehicles (cf. ﬁgure 4 on the left). These vehicles have been automated and
can be controlled by an onboard system.
Perception information

Multiagent
Systems
Direction and speed
instruction

Direction and speed instruction
Vehicle
OnBoard
O
nBoard
B
System
Instructions
Steering
Ste
eering

Sensors
Acceleration

Braking

Figure 4: SeT laboratory electrical vehicle (left), vehicle architecture (right)

Figure 4 shows the vehicle system onboard. An onboard computer receives direction and speed instructions from
the driver (numerical steering wheel) and sends direction and speed intructions to the vehicle control. The reactive
multi-agent system has been implemented on this onboard computer. The next subsection proposed to validate the
Car-driving assistance in two cases: simple or several obstacles on the road.
3.2. Simple obstacle
The ﬁrst experiment is to evaluate the path taken by the vehicle, in the case of the appearance of a single obstacle
(ﬁgure 5 on the left). The ﬁgure illustrates the conﬁguration adopted for testing the simple obstacle avoidance, i.e a
single object on the ﬂoor. The driver in this experiment give a straight line direction instructions and a constant speed
(8 km/h). In this case, if instruction is respected, the vehicle run directly into obstacle.

Distance in meter

Drivers’
intructions

Vehicle

Distance in meter

Figure 5: Experimentation conﬁguration (left) path results from the obstacle avoidance (right)

2 Madkit5,

http://www.madkit.org

324

F. Gechter/ Procedia
et al. / Procedia
Computer
Science
(2012) 317–325
Computer
Science 00
(2010) 11–9

8

Figure 5 (on the right) shows vehicle trajectory during the experimentation. The driver brings about a collision
and the reactive multi-agent system on the vehicle onboard system allows to avoid obstacle on the road. This case
studies the onboard system pre-ﬁll driver’s direction intructions.

Speed km/h

3.3. Multiple obstacles
The goal of this experiment is to point out the evolution of vehicle speed depending on the constraints involved
by perceived obstacles. Figure 6 (on the left) shows the obstacle conﬁguration. In this case study, the driver gives a
straight line direction instructions and a constant speed (8 m/s).

(a)
(b)

(c)

Time seconde

Figure 6: Experimentation conﬁguration (left) vehicle speed variation (right)

Figure 6 on the right shows vehicle speed evolution along the previous trajectory. The ﬁrst part (denoted (a)) of
this curve corresponds to a vehicle speed without any detected obstacle. In this part, vehicle reaches its maximum
speed. As soon as detected obstacles are put into decision agents environment (part denoted (b)), vehicle speed starts
to decrease due to the statistical physics correction factor (cf. equation 7). Indeed, when there are many obstacles,
Statistical physics potential is increasing. This involves an ampliﬁcation of decision vector trend. When, vehicle has
passed the obstacle line (part denoted (c)), speed increases until its maximum value.
4. Conclusion
This paper presents a car-driving assistance based on a reactive multi-agent system. This decision process relies
on two main elements: the decision-agent environment on the one side and the global state estimator of the agent
population on the other. Decision agent environment merges the information that stems from the sensors and turn it
into forces aimed at inﬂuencing decision agents behaviors. It can thus be considered as the input layer of the designed
decision process. By contrast, the global state estimator is the output of the system. It allows to build up decision
considering valuable estimation of the global emerging phenomenon.
Experimentation exhibited that the decision system is reliable and has auto-adaptation capabilities. These allow preﬁll driver’s intruction in order to avoid obstacle and stop an imminent collision.
In order to continue these research, we are now working on several key points. First, development are made to integrate
data from several sensors in order to be able to deal several points of view (i.e. taking into account information on
sidewalk given by a speciﬁcally oriented sensor). Finally, we also plan to modify this application to be able to use it
as autonomous driving.
5. Bibliography
[1] O. Simonin and F. Gechter, An environment-based principle to design reactive multi-agent systems for problem solving, Environments for
Multiagent Systems II, extended and selected paper from E4MAS’05 workshop, Springer-Verlag Berlin Heidelberg, LNAI 3830 pp. 32-49,
2006
[2] N. Gaud, S. Galland, F. Gechter, V. Hilaire, A. Koukam, Holonic multilevel simulation of complex systems: Application to real-time pedestrians simulation in virtual urban environment, Simulation Modelling Practice and Theory 16(10): 1659-1676 (2008)
[3] J.M. Contet, F. Gechter, P. Gruer and Abder Koukam, Evaluation of global system state thanks to local phenomenona, proceedings of the
18th European Conference on Artiﬁcial Intelligence ECAI 2008: pp. 865-866

F. Gechter et al.
/ Procedia
Computer
Science
1 (2012)
/ Procedia
Computer
Science
00 (2010)
1–9 317–325

325
9

[4] J. C. Latombe, Robot Motion Planning. Norwell, MA: Kluwer, 1991.
[5] J. Borenstein and Y. Koren, The Vector Field Histogram – Fast Obstacle-Avoidance for Mobile Robots, IEEE Journal of Robotics and
Automation, Vol. 7, No. 3., June 1991, pp. 278-288.
[6] A. Masoud, S. Masoud, and M. Bayoumi, Robot navigation using a pressure generated mechanical stress ﬁeld, the biharmonical potential
approach, in Proc. IEEE Int. Conf. Robotics and Automation, San Diego, CA, 1994, pp. 124-129.
[7] R. Simmons, The curvature-velocity method for local obstacle avoidance, in Proc. IEEE Int. Conf. Robotics and Automation, Minneapolis,
MN, 1996, pp. 3375-3382.
[8] J. Minguez, L. Montano., Nearness Diagram Navigation (ND): Collision Avoidance in Troublesome Scenarios, IEEE Transactions on
Robotics and Automation Vol 20 N 1, pp 45-59, february 2004.
[9] R. Balian From Microphysics to Macrophysics, Springer 2007.

