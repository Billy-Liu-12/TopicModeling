Procedia Computer
Science
Procedia Computer
Procedia
ComputerScience
Science001(2010)
(2012)1–10
1331–1340

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

An Adaptive Model Switching and Discretization Algorithm for
Gas Flow on Networks
Pia Domschke, Oliver Kolb and Jens Lang
Technische Universit¨at Darmstadt, Department of Mathematics
and DFG Graduate School of Excellence Computational Engineering, Dolivostr. 15, 64293 Darmstadt

Abstract
We are interested in the simulation and optimization of gas transport in networks. Those networks consist of pipes
and various other components like compressor stations and valves. The gas ﬂow through the pipes can be modelled
by diﬀerent equations based on the Euler equations. For the other components, purely algebraic equations are used.
Depending on the data, diﬀerent models for the gas ﬂow can be used in diﬀerent regions of the network. We use
adjoint techniques to specify model and discretization error estimators and present a strategy that adaptively applies
the diﬀerent models while maintaining the accuracy of the solution.

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: model adaptivity, adjoint equations, gas ﬂow

1. Introduction
Intense research has been done in the ﬁeld of simulation and optimization of gas transport in networks in the last
years [1, 2, 3, 4, 5, 6, 7]. The aim of operating a gas transmission network is to minimize the running costs of the
compressor stations whereas the contractual demand of the customers has to be met. The large extent of gas networks
and their high complexity make the optimization a diﬃcult computational task. For the optimization, it is necessary to
eﬃciently solve the underlying equations on networks within a certain tolerance. In this paper, we present an adaptive
model switching and discretization algorithm that is suitable for these requirements.
The equations describing the ﬂow of gas through a pipe are based on the Euler equations, a hyperbolic system
of partial diﬀerential equations. The transient ﬂow of gas may be described appropriately by equations in one space
dimension. Other components of the network, like compressor stations and valves, follow algebraic equations. For
the whole network, adequate initial, boundary (at sources and sinks) and coupling conditions have to be given.
Solving hyperbolic PDEs in one space dimension does not pose a challenge, but the complexity of the whole
problem increases with the size of the network. Thus, we use a hierarchy of three models that describe the ﬂow of
gas with diﬀerent accuracy, but also with diﬀerent computational eﬀort. We then want to use the simpliﬁed models in
regions with low activity, while sophisticated models have to be used in regions, where the dynamical behaviour has
to be resolved in detail.
Email address: domschke@mathematik.tu-darmstadt.de (Pia Domschke)

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.148

1332

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340
P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

2

Since the behaviour of the network changes both in space and time, an automatic steering of the model hierarchy
as well as the discretization is necessary. We introduce error estimators for the discretization and the model errors
using adjoint techniques and present a strategy to automatically balance those errors with respect to a given tolerance.
Existent software packages like SIMONE [8] may also use diﬀerent models for the simulation task. However, one
model has to be chosen in advance, which is often too restrictive.
The paper is organized as follows. The modelling of the network as well as the diﬀerent models are introduced
in Sect. 2. In Sect. 3, error estimators for both, the model and the discretization error, are derived using adjoint
techniques. We present a strategy to adaptively balance model and discretization error in Sect. 4. Numerical Results
are given in Sect. 5.
2. Model Hierarchy and Network
In this section, we describe the modelling of the network. We introduce a hierarchy consisting of three diﬀerent
models describing the ﬂow of gas through a pipe. Each model results from the previous one by making further
simplifying assumptions [1]. The most complex model is the nonlinear model followed by the linear model. The most
simple model used is the algebraic model (see Fig. 1). Also, further network components are given.
nonlinear model

v

c

semilinear model

pt = qt = 0

algebraic model

Figure 1: Model hierarchy

2.1. Network
The gas network is modelled as a directed graph G = (J, V) with edges J and vertices V (nodes, branching
points). The set of edges J consists of pipes j ∈ J p , compressor stations c ∈ Jc and valves v ∈ Jv . Each pipe j ∈ J p
is deﬁned as an interval [xaj , xbj ] with a direction from xaj to xbj . In each pipe, one of the models holds and adequate
initial and coupling as well as boundary conditions have to be speciﬁed. Valves and compressor stations are described
by algebraic equations.
2.2. Nonlinear Model
The isothermal Euler equations, which describe the ﬂow of gas, consist of the continuity and the momentum
equation together with the equation of state for real gases. With some simplifying assumptions, as the pipe being
horizontal and a constant speed of sound [7], the equations are

pt +

ρ0 c2
q x = 0,
A

qt +

A
ρ0 c2 q2
px +
ρ0
A
p

x

=−

λρ0 c2 |q|q
.
2dAp

(1)

Here, q denotes ﬂow rate under standard conditions (1 atm air pressure, temperature of 0 ◦ C), p the pressure, c the
speed of sound, λ the friction coeﬃcient, d the diameter and A the cross-sectional area of the pipe, and ρ0 the density
under standard conditions.
2.3. Semilinear Model
0q
If the velocity of the gas is much smaller than the speed of sound, i.e., |v|
c with v = ρρA
, we can neglect the
nonlinear term in the spatial derivative of the momentum equation in (1). This yields a semilinear model
pt +

ρ0 c2
q x = 0,
A

qt +

A
λρ0 c2 |q|q
px = −
.
ρ0
2dAp

(2)

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340
P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

1333
3

2.4. Algebraic Model
A further simpliﬁcation leads to the stationary model: Setting the time derivatives in (2) to zero results in an
ordinary diﬀerential equation, which can be solved analytically:
q = const.,

p(x0 )2 +

p(x) =

λρ20 c2 |q|q
(x0 − x) .
dA2

(3)

Here, p(x0 ) denotes the pressure at an arbitrary point x0 ∈ [0, L]. Setting x0 = 0, that is, p(x0 ) = p(0) = pin at the
inbound of the pipe, and x = L, that is, p(x) = p(L) = pout at the end of the pipe, yields the algebraic model [9].
2.5. Further Network Components
Besides pipes, there are some other components a network can consist of. Those are, for example, compressor
stations and valves. These components are, like the pipes, modelled as edges. This way, the coupling conditions at
the intersections are still valid. Flow rate and pressure are determined by algebraic equations that can be nonlinear.
Compressor Station. A compressor station is a facility that increases the pressure of the gas. Running a compressor
is relatively costly since the compressor station consumes some of the gas. The equation for the fuel consumption of
a compressor is given by [10]
⎞
⎛
γ−1
⎟⎟⎟
⎜⎜⎜ pout γ
⎜
(4)
F(pin , pout , qin ) = cF qin ⎜⎜⎝
− 1⎟⎟⎟⎠ ,
pin
the compressor power P is determined by

⎛
⎜⎜⎜ pout
P(pin , pout , qin ) = cP qin ⎜⎜⎝⎜
pin

γ−1
γ

⎞
⎟⎟⎟
− 1⎟⎟⎟⎠ .

(5)

Here, γ is the isentropic coeﬃcient of the gas, and cF and cP are compressor speciﬁc constants. The control of the
compressor is given by the pressure diﬀerence.
Valves. Valves are used to regulate the ﬂow of the gas by opening or closing. In case of an open valve, the equations
qin = qout , pin = pout hold. If the valve is closed, it is qin = qout = 0.
3. Error Estimators
With the diﬀerent models for the pipes and the other network components we can solve the whole network as
a system using adequate initial, boundary and coupling conditions. A way to achieve a compromise between the
accuracy of the solution and the computational costs is to use the more complex model only when necessary and
to reﬁne the discretization only where needed. Using the solution of adjoint equations as done in [11, 12, 7], we
deduce a model and a discretization error estimator to measure the inﬂuence of the model and the discretization on a
user-deﬁned output functional M.
The functional M can be of any form, for example measuring the pressure value troughout the network over the
whole time interval,
T

p(x, t) dx.

M(p) =
0

Ω

Another possibility is to measure the costs of the compressor stations in form of the power consumption,
T

M(p, q) =
c∈Jc

0

Fc (t) dt.

(6)

1334

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340
P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

4

Let ξ = (ξ1 , ξ2 )T be the adjoint pressure and ﬂow rate of one of the models with respect to the functional M. We
now use the adjoint equations to assess the simpliﬁed models with respect to the quantity of interest. Let u = (p, q)T be
the solution of the nonlinear model (1) and uh = (ph , qh )T the discretized solution of the semilinear model (2). For the
discretization of the PDE, we apply an implicit box scheme [13]. Then the diﬀerence between the output functional
M(u) and M(uh ) can be approximated using Taylor expansion. Inserting the solution ξ of the adjoint system, we get a
ﬁrst order error estimator for the model and the discretization error respectively as in [7] (see also [12]):
M(u) − M(uh ) ≈ ηm + ηh

(7)

with the estimators ηm and ηh as follows:
T

ηLIN-NL
=
m

0

Ω
T

LIN

ηh =

0

⎛
⎞
⎜⎜ 0 ⎟⎟
−ξT ⎜⎜⎝ ρ0 c2 (qh )2 ⎟⎟⎠ dx dt
Aph

(8)

x

⎛
⎞
2
⎜⎜⎜
⎟⎟
pht + ρ0Ac qhx
⎜
−ξ ⎜⎝ h A h λρ0 c2 |qh |qh ⎟⎟⎟⎠ dx dt.
qt + ρ0 p x + 2dAph
Ω
T

(9)

If, the other way round, u denotes the solution of the semilinear model (2) and uh the discretized solution of the
nonlinear model, one gets the same estimator for the model error (except for the sign), and the discretization error
reads as follows,
⎛
⎞
2
⎜⎜
⎟⎟⎟
T
pht + ρ0Ac qhx
⎜
NL
T ⎜
⎜
⎟⎟⎟ dx dt.
(10)
ηh =
−ξ ⎜⎜⎝ h A h ρ0 c2 (qh )2
λρ0 c2 |qh |qh ⎟
⎠
qt + p x +
+
h
h
Ω
0
A

ρ0

p

2dAp

x

Since the algebraic model can be solved exactly, the discretization error disappears and one only gets an estimator
for the model error
T

ηALG-LIN
=
m

0

Ω

−ξT

p
dx dt
q t

(11)

with ξ being the solution of the adjoint equations either of the semilinear model or of the algebraic model. Here,
u = (p, q)T denotes the solution of the stationary model (3).
LIN
The discretization error estimators ηNL
h and ηh may be split up into a temporal and a spatial discretization error
h
estimator as follows. Let u be the exact and u be the discretized solution of the nonlinear model (1). We use a short
notation of (1), i.e., ut + f (u) x = g(u), which yields
T

ηNL
h =

0

Ω

−ξT uht + f (uh ) x − g(uh ) dx dt

Ω

−ξT (uht − ut ) + ( f (uh ) x − f (u) x ) − (g(uh ) − g(u)) dx dt

T

=
0

since u is the exact solution of (1). We may split the integral into two parts
T

ηNL
h =

0

Ω

−ξT (uht − ut ) dx dt +
=:ηNL
t

T
0

Ω

−ξT ( f (uh ) x − f (u) x ) − (g(uh ) − g(u)) dx dt

(12)

=:ηNL
x

The temporal and spatial discretization error estimator for the semilinear model are derived analogously. For the
computation, the exact solution is approximated by a higher order reconstruction using neighboring points. For the
time derivative, we use a polynomial reconstruction of order 2 and denote it by ut ≈ Rt (uh ). The spatial derivative of
f and the value of g are reconstructed with order 4, giving f (u) x ≈ R x ( f (uh )) and g(u) ≈ R(g(uh )), respectively.

1335

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340

5

P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

The estimators computed are then
T

ηNL
t ≈

0

Ω

−ξT uht − Rt (uh ) dx dt ,

Ω

−ξT

T

ηNL
x ≈

0

f (uh ) x − R x ( f (uh )) − g(uh ) − R(g(uh )) dx dt .

4. Balancing Model and Discretization Error
With the above deﬁned estimators, we can introduce a strategy to balance the model and discretization error inside
the network. In practice, often smaller time horizons are optimized. Thus, we do not control the overall error any
more, but the relative error piecewise. For this, we divide the time interval [0, T ] into subintervals of equal size
[T k−1 , T k ]. Regarding one subinterval [T k−1 , T k ], we can compute the forward as well as the backward/adjoint solution
and evaluate the error estimators, which yields
Mk (u) − Mk (uh ) ≈ ηm,k + ηt,k + η x,k .
Given a tolerance TOL for the relative error, we can approximate the exact error by the estimators giving
Mk (u) − Mk (uh )
|Mk (u)|

≈

ηm,k + ηt,k + η x,k
Mk (uh )

(13)

≤ TOL.

We ﬁrst check the discretization error to ensure the discretization to be adequate. Then, the model error is taken
into account. A scheme of the algorithm is given in Fig. 2.
Check discretization error. First, the discretization is checked. Given the tolerance TOL as above, we ensure the
discretization error to be small compared to the model error by decreasing TOL by a user-deﬁned factor 0 < κ < 1
giving κ · TOL =: TOLh . We demand the discretization error estimator to satisfy
ηt,k + η x,k < TOLh · Mk (uh ) .
If the error estimator exceeds the given upper bound, the temporal and spatial discretization errors are treated individually, that is,
ηt,k <

1
1
TOLh · Mk (uh ) and η x,k < TOLh · Mk (uh ) .
2
2

Check Temporal Discretization Error. If the temporal error estimator exceeds the given tolerance, the time step size is
marked for reﬁnement. After checking the spatial discretization error, the time interval [T k−1 , T k ] has to be computed
again. If, in contrast, the error estimator ηt,k is much smaller than the upper bound, the time step size is marked for
coarsening. If the current time interval has to be recomputed due to spatial or model errors, the temporal coarsening
is nevertheless directly applied.
Check Spatial Discretization Error. Now, the spatial discretization error is estimated locally for each pipe. We can
split up the discretization error estimator from (12) for each pipe, giving for the nonlinear model
Tk

ηNL
x,k =

T k−1 j∈J
p

xbj
xaj

−ξT ( f (uh ) x − f (u) x ) − (g(uh ) − g(u)) dx dt =

ηNL
x,k, j ,
j∈J p

analogously for the other models. Thus, we can estimate the spatial discretization error for each pipe in the time
interval [T k−1 , T k ] with the corresponding model, which yields
η x,k, j <
j∈J p

1
TOLh · Mk (uh ) .
2

1336

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340
P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

start: k = 1

solve for interval [T k−1 , T k ]

compute adjoint for [T k−1 , T k ]

reﬁne temporal and/or
spatial discretization

check discretization error

check spatial discretization error

discretization
ok?

NO

check temporal discretization error

NO

check model error
and adjust models

YES
check total error

total error ok?

YES
accept [T k−1 , T k ],
k = k + 1

coarsen temporal and/or spatial
discretization and switch
down model where possible

Figure 2: Scheme of the balancing algorithm

6

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340
P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

1337
7

For the inequality to hold, it suﬃces to claim
η x,k, j <
j∈J p

1
TOLh · Mk (uh ) .
2

In order to get an upper bound for each pipe itself, we uniformly distribute the target functional, i.e., we divide it
by the number of pipes, giving
η x,k, j <

Mk (uh )
1
TOLh ·
2
Jp

∀ j ∈ Jp.

If η x,k, j exceeds the given tolerance, the pipe is marked for reﬁnement. If instead, the error estimator is much
smaller than the right hand side, the pipe is marked for coarsening.
The time interval [T k−1 , T k ] is computed again with a ﬁner discretization where needed.
Check Total Error. If the discretization error is accepted, the total error estimator ηm,k + ηt,k + η x,k is evaluated. If
ηm,k + ηt,k + η x,k ≤ TOL · Mk (uh ) ,
the time interval [T k−1 , T k ] is accepted, k is increased and the next interval is computed.
Check Model Error and Adjust Models. If the discretization error is small enough, but the total error is not, the model
errors of all pipes are checked, i.e., the model error estimators (8) and/or (11) are evaluated for each pipe.
For the pipes using the semilinear or algebraic model, ﬁrst the estimators with respect to the higher models are
evaluated. If the error estimator exceeds the given tolerance, that is,
ηm,k, j ≥ TOLm ·

Mk (uh )
,
Jp

with TOLm := (1 − κ) · TOL, the pipe is supposed to use the model above subject to the hierarchy.
Then, the estimators with respect to the lower models are computed for the pipes using the nonlinear or the
semilinear model. If the error estimator is much less than the given tolerance, that is,
ηm,k, j < s · TOLm ·

Mk (uh )
Jp

,

with a “shift down factor” s
1 (e.g. 10−1 or 10−2 ), the pipe can use the lower model for the next calculations. The
time interval [T k−1 , T k ] is computed again with the adjusted models.
5. Numerical Results
In this section, we give numerical results for a medium sized real life network. The network consists of 12 pipes
(P01 – P10, with lengths between 30km and 100km), 2 sources (S01 – S02), 4 consumers (C01 – C04), 3 compressor
stations (Comp01 - Comp03) and one control valve (CV01). The graph of the network is shown in Fig. 3.
The simulation starts with stationary initial data. The boundary conditions and the control for the compressor
stations are time-dependent. The target functional is given by the total fuel gas consumption of the compressors, i.e.
T

M(u) =
c∈Jc

0

Fc (t) dt.

The simulation time is 14400 seconds with an initial time step size Δt = 1800s. The subintervals are 3600s each. The
initial spatial step size is Δx = 10000m. The factor κ is set to 10−1 .

1338

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340

8

P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

S01

P01

P03

Comp02

P0
6a

Comp01

P02

7a
P0

S02

P04

C01

P05

C03
Comp03 09
P

P1

0

P0
7b

6b
P0

CV01

C04

P08

C02

Figure 3: Network with compressor stations and control valve

Table 1 shows the maximal relative error in the target functional
rel.err. = max
k

Mk (u) − Mk (uh )
|Mk (u)|

,

the total target functional, the maximal and the minimal time and spatial step size used and the total time for the
computation subject to the tolerance TOL. As an approximation of the exact solution we computed a solution with the
nonlinear model and a ﬁner discretization than used in the adaptive algorithm, which is shown in the last row. For
a comparison of the computation time, we computed a solution without adaptivity using the nonlinear model. The
discretization was chosen to be similar to the one used at tolerance 10−4 , but no error estimators were calculated.
The time needed for computation was 4.20e+01 seconds, i.e., the overhead for the adaptive model switching and
discretization is only 3.2%. Clearly, the adaptive algorithm also delivers reliable information about the accuracy of
the discrete solution.
The computation was done on a 3100MHz AMD AthlonTM 64 X2 Dual Core 6000+.
Table 1: Result of the algorithm using diﬀerent values of TOL

TOL
rel.err.
1e-01 5.5264e-02
1e-02 4.2304e-03
1e-03 2.5513e-04
1e-04 3.3264e-05
reference solution

M(uh )
13.240217
12.756843
12.730996
12.728721
12.728459

max/min Δt
1800/1800
900/900
112.5/112.5
7.03125/7.03125
3.515625

max/min Δx
20,000/10,000
20,000/10,000
20,000/2,500
10,000/625
312.5

time [s]
7.20e-02
1.84e-01
1.18e+00
4.34e+01
1.46e+02

Besides the discretization, it is also interesting how the model switching part works depending on TOL. Table 2
shows how often which model is used during calculation. It can be seen that the smaller the tolerance the better models
are used.
Table 2: Models used during calculation depending on the tolerance TOL

TOL
1e-01
1e-02
1e-03
1e-04

ALG
100%
50.0%
8.3%
0.0%

LIN
0%
50.0%
91.7%
75.0%

NL
0%
0%
0%
25.0%

1339

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340

9

P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

Figure 4 shows a snapshot of the simulation at time t = 3600s with TOL = 10−4 . At the sources and sinks, the
upper numbers denote the pressure in bar, the lower ones denote the ﬂow rate. At the compressor stations, the upper
numbers are the increase in pressure and also the ﬂow rate is shown below. At all inner nodes, only the pressure is
printed. At each pipe, also the used model is indicated. The small white dots in the thick black lines represent the
discretization. Note that the picture is not to scale.
60.2
100.00

63.3

59.5
201.25
60.0 LIN
59.5
149.04

62.8
107.50

LIN

LIN

LIN
LIN

+8.87
NL

56.5 350.43 65.3

NL

NL
60.6

+7.37

+0.75

58.0 253.54 65.4

62.3 198.94 63.0
LIN
62.8
100.00

LIN
LIN

62.7

time = 3600.0 seconds

LIN
62.7

60.6
52.00

Figure 4: Snapshot of the network at time t = 3600 s

6. Summary
We presented an adaptive model switching and discretization algorithm. For that we used a hierarchy of models
that describe the ﬂow of gas through a pipe qualitatively diﬀerent. Using adjoint techniques, we introduced error
estimators for the model errors as well as for the discretization errors. With these estimators we developed an algorithm
that balances the model and discretization errors subject to a given tolerance and automatically switches between the
models in the hierarchy. It could be seen that for diﬀerent tolerances, the discretization was adaptively adjusted and
also the diﬀerent models were used. Also, if the algorithm is used in an optimization framework, many nonlinearities
can be avoided, since the nonlinear model is only used where needed. That means a dramatic reduction of complexity
and degrees of freedom for the optimization part.
Acknowledgments. This paper was supported by the German Research Foundation (DFG) under the grant LA1372/5-1.
References
[1] P. Bales, Hierarchische Modellierung der Eulerschen Flussgleichungen in der Gasdynamik, Diploma thesis, Technische Universit¨at Darmstadt, Department of Mathematics, Darmstadt (2005).
[2] M. Banda, M. Herty, A. Klar, Coupling conditions for gas networks governed by the isothermal euler equations, NHM 1 (2) (2006) 295–314.
[3] A. Martin, M. M¨oller, S. Moritz, Mixed integer models for the stationary case of gas network optimization, Mathematical Programming 105
(2006) 563–582.
[4] S. Moritz, A mixed integer approach for the transient case of gas network optimization, Ph.D. thesis, TU Darmstadt (2006).
[5] P. Bales, B. Geißler, O. Kolb, J. Lang, A. Martin, A. Morsi, Combination of nonlinear and linear optimization of transient gas networks, Tech.
Rep. 2552, TU Darmstadt (2008).
[6] M. Banda, M. Herty, Multiscale modeling for gas ﬂow in pipe networks, Math. Meth. Appl. Sci. 31 (2008) 915–936. doi:10.1002/mma.948.

1340

P. Domschke et al. / Procedia Computer Science 1 (2012) 1331–1340
P. Domschke et al. / Procedia Computer Science 00 (2010) 1–10

10

[7] P. Bales, O. Kolb, J. Lang, Hierarchical modelling and model adaptivity for gas ﬂow on networks, in: Computational Science - ICCS 2009,
Vol. 5544 of Lecture Notes in Computer Science, Springer Berlin / Heidelberg, 2009, pp. 337–346.
[8] Simone software.
URL http://www.simone.eu/simone-simonesoftware.asp
[9] E. Sekirnjak, Transiente Technische Optimierung, Entwurf, PSI AG (November 2000).
[10] M. Herty, Modeling, simulation and optimization of gas networks with compressors, Networks and Heterogeneous Media 2 (1) (2007) 81–97.
[11] R. Becker, R. Rannacher, An optimal control approach to a posteriori error estimation in ﬁnite element methods, Acta numerica 10 (2001)
1–102.
[12] M. Braack, A. Ern, A posteriori control of modeling errors and discretization errors, SIAM Journal of Multiscale Modeling and Simulation
1 (2) (2003) 221–238.
[13] O. Kolb, J. Lang, P. Bales, An implicit box scheme for subsonic compressible ﬂow with dissipative source term, Numerical Algorithms 53 (2)
(2010) 293–307. doi:10.1007/s11075-009-9287-y.

