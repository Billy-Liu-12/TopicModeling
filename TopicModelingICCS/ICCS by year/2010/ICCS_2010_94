Procedia Computer
Science
Procedia
Science
00 (2010)
1–10
ProcediaComputer
Computer
Science
1 (2012)
387–396

www.elsevier.com/locate/procedia

International Conference on Computational Science, ICCS 2010

Two Derivative-Free Optimization Algorithms
for Mesh Quality Improvement✩
Jeonghyung Parka , Suzanne M. Shontza,∗
a Department

of Computer Science and Engineering, The Pennsylvania State University, University Park, PA, 16802

Abstract
High-quality meshes are essential in the solution of partial diﬀerential equations (PDEs), which arise in numerous
science and engineering applications, as the mesh quality aﬀects the solution accuracy, the solver execution time, and
the problem conditioning. Mesh quality improvement is necessary when the mesh is of less than desirable quality
(either from mesh generation or deformation). Nondiﬀerentiable objective functions arise when the goal of the mesh
optimization is to improve the worst quality element in the mesh. We propose two derivative-free methods for mesh
optimization, namely the pattern search (PS) and multidirectional search (MDS) mesh quality improvement methods,
to be used with nondiﬀerentiable objective functions representing the overall mesh quality. Experimental results show
that these two methods are successful in improving the worst quality mesh elements. The PS method yielded higher
quality 2D meshes than did the MDS method; however, its execution time was longer. In the 3D case, most of the
meshes converged to meshes of approximately the same quality because the initial meshes were fairly close to optimal.
In 3D, the PS method required longer to execute than did the MDS method.
c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
⃝

Keywords: mesh optimization, derivative-free optimization, pattern search, multidirectional search, mesh quality

1. Introduction
Partial diﬀerential equations (PDEs) are used for numerical modeling and simulation of ﬂuid ﬂow [1], heat propagation [2], and airﬂow around the wing of an airplane [3], as well as other applications. Discretization methods, such
as the ﬁnite element method [4], are commonly used in the solution of PDEs. The accuracy of the computed solution
to the PDE depends on the degree of the approximation scheme and the number of elements in the mesh, as well as
the quality of the mesh [5]. In addition, the stability and convergence of the ﬁnite element method is aﬀected by poor
quality elements. Therefore, mesh quality improvement methods are often used as a post-processing step in automatic
mesh generation or in the case of dynamic meshes.
Numerous mesh quality improvement algorithms have been proposed for use with smooth objective functions
[6, 7, 8]. Such objective functions arise most often when the desire is to improve the average quality of the mesh elements. However, few algorithms have been proposed for use with nonsmooth objective functions [9]. Such objective
✩ This

work was funded in part by NSF grant CNS 0720749 and an Institute for CyberScience grant from The Pennsylvania State University.
author
Email addresses: jxp975@cse.psu.edu (Jeonghyung Park), shontz@cse.psu.edu (Suzanne M. Shontz)

∗ Corresponding

c 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
1877-0509 ⃝
doi:10.1016/j.procs.2010.04.042

388

J. Park,
S.M.Shontz
Shontz
/ Procedia
Computer
Science
1 (2012)
Park and
/ Procedia
Computer
Science
00 (2010)
1–10387–396

2

functions commonly occur when the goal is to improve the worst quality element in the mesh.
In this paper, we propose two derivative-free optimization algorithms for use with nonsmooth objective functions
representing the mesh quality. The ﬁrst algorithm is a pattern search (PS) mesh optimization technique motivated by
[10]. The second algorithm is a multidirectional search (MDS) mesh optimization technique motivated by [11]. To
the best of our knowledge, we are the ﬁrst to propose these derivative-free optimization techniques within the context
of mesh quality improvement. Both techniques have several advantages within this context. First, the methods are
appropriate for solving a mesh optimization problem which employs a nondiﬀerentiable objective function. Second,
pattern search methods have a global convergence guarantee [12] which may extend to the PS method. Third, such
methods may prove more eﬀective than gradient-based mesh optimization methods when the objective function has
expensive gradient evaluations.
We focus on the improvement of the worst quality element in a mesh. We compare the eﬀectiveness of the two
proposed algorithms on the basis of computational eﬃciency and on their ability to smooth several realistic unstructured triangular and tetrahedral ﬁnite element meshes to a speciﬁed level of mesh quality according to the radius ratio
quality metric.
The rest of this paper is organized as follows. In Section 2, we describe the mesh quality improvement problem
of interest. In Section 3, we present two derivative-free mesh quality improvement algorithms based on the pattern
search and multidirectional search methods found in the optimization literature. In Section 4, we present the results
from our numerical experiments. Finally, we give some conclusions and plans for future work in Section 5.
2. The Mesh Quality Improvement Problem
We now describe the speciﬁc mesh quality improvement problem of interest.
2.1. Element and Mesh Quality
Let qi denote the quality of element i. We assume that a higher quality element has a higher value of qi . Various
quality metrics could be chosen as an element quality metric q. In this study, we employ the radius ratio quality metric
which is deﬁned as the ratio of the inradius to the circumradius of a triangle or tetrahedron [13].
2.2. Quality Improvement Problem
The objective function we wish to maximize is:
f (x) := min qi ,
1≤i≤n

(1)

where f is the overall mesh quality as measured by the worst quality element in the mesh, and n is the number of
elements in the mesh. The worst elements in the mesh most aﬀect the ﬁnite element solution [5]. Hence we seek to
improve the worst quality element in the mesh.
When optimizing the mesh, we constrain the vertices on the boundary, i.e., xvB = xvB , where xvB are the boundary
vertex coordinates. In addition, we require that the initial mesh and subsequent meshes be noninverted.
3. Derivative-Free Mesh Quality Improvement Algorithms
3.1. Pattern Search Mesh Quality Improvement Algorithm
We propose two derivative-free mesh quality improvement algorithms. The ﬁrst algorithm we propose in this
paper for optimizing the worst quality element in the mesh is based on the pattern search (PS) method [10, 14]. In this
section, we describe our PS mesh quality improvement algorithm.

J. Park,Park
S.M.and
Shontz
/ Procedia
1 (2012)
387–396
Shontz
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10

389
3

3.1.1. Pattern Search
The PS algorithm determines new coordinates for the current vertex xk based solely on objective function computations, as our objective functions are nonsmooth (and hence the gradient of the objective function does not exist).
Note that our approach is local, i.e., one vertex is moved at a time. Initially, the algorithm determines a candidate
xknew candidate for xk through an exploratory phase which we explain in the next section. It is possible that xknew candidate may
lie outside the boundary of the patch (which is deﬁned to be the interior node and all of its neighboring vertices and
elements), resulting in a tangled mesh. In this case, we employ a backtracking linesearch to bring the vertex back
inside the patch to prevent tangling from occurring. An invalid mesh element can be detected by examining the sign
of the determinant of an element’s Jacobian matrix [15] and comparing it to its original sign. In addition, xknew candidate
is only accepted if it improves the function value. If these two criteria are met, xknew candidate replaces xknew , and the step
size is increased. The algorithm iterates over the N free interior vertices. The pseudocode for this algorithm is shown
in Algorithm 1. Convergence is obtained when there is little relative vertex movement in the current iteration or when
the solver has progressed at least 95% of the way to the desired quality, i.e., more speciﬁcally when
xcurrent − x previous
x previous 2

2

< tol

or

( fcurrent − finitial ) > 0.95 ∗ ( fdesired − finitial ),

(2)

for some user-speciﬁed convergence tolerance, tol. Here 95% was chosen as the minimum acceptable percentage
increase in the mesh quality (from the initial quality level to the desired quality level); other percentage values may be
used instead. Note that finitial is the mesh quality of the initial input mesh; f previous and fcurrent are the mesh qualities
of the previous and current iterations, and fdesired is the goal mesh quality. Also, if the optimization does not yield
suﬃcient increase in the objective function ﬁve iterations in a row, then the algorithm terminates, as ﬁve iterations are
considered suﬃcient for the algorithm to make signiﬁcant progress.
Algorithm 1 PS mesh quality improvement algorithm
1: function pattern search(mesh, α, tol, q, γ)
α = step size
2:
Given: list of free vertices in mesh
q = quality metric, tol = tolerance
x
−x previous 2
3:
while (( current
≥ tol) & (( fcurrent - finitial ) < 0.95*( fdesired - finitial )) & (count < 5))
x previous 2
4:
for k = 1, 2, ...., N
N = number of free vertices in mesh
5:
get free vertex xk
6:
[xknew candidate , α] ← PS exploration(xk , α, q)
7:
while !valid(xknew candidate )
8:
xknew candidate ← γ × xknew candidate
γ :backtracking linesearch parameter
9:
endwhile
10:
if f xknew candidate > f xk
11:
xknew ← xknew candidate
12:
α←δ×α
δ is the step size expansion parameter (1.0 ≤ δ ≤ 1.5)
13:
endif
14:
endfor
15:
if ( fcurrent - f previous ) < 10−15
16:
count++
17:
endif
18:
endwhile
19: end function

3.1.2. Exploratory
The exploratory algorithm [14] computes candidate coordinates xknew candidate for xknew by evaluating the function at
each point of the pattern [1 0; 0 1; -1 0; 0 -1; 0 0] [10] as shown in Figure 1. The ﬁrst four directions are used for
computing the value of the objective function at the candidate vertices. The last direction is used for calculating the
initial objective function value. It is also used for comparison with the candidate vertices’ objective function values.
The patterns used in the algorithm can be altered to include more directions.

390

J. Park,
S.M.Shontz
Shontz
/ Procedia
Computer
Science
1 (2012)
Park and
/ Procedia
Computer
Science
00 (2010)
1–10387–396

4

[NQHZBFDQGLGDWH

[N

Figure 1: The pattern used in the PS method
After computing all of the objective function values for the given pattern, the algorithm selects xknew candidate which
maximizes the objective function in (1). If there are several vertices with maximal objective function value, the
algorithm randomly designates one of the vertices as xknew candidate . By maximizing the objective function, the algorithm improves the worst quality element in the mesh, and, hence, the overall mesh quality. Algorithm 2 gives the
pseudocode for the PS exploration function.
Algorithm 2 PS exploration
1: function PS exploration(xk , α, q)
2:
for i = 1,...,5
3:
get direction di
4:
f(xk di ) ← evaluation( f , xk di )
5:
endfor
6:
dnew ← maxf(xk di )

α = step size, q = quality metric, xk = free vertex
evaluate 5 directions di = [1 0; 0 1; -1 0; 0 -1; 0 0]

di

7:
8:
9:

xknew candidate ← xk + αdnew
return xknew candidate
end function

3.2. Multidirectional Search Mesh Quality Improvement Algorithm
The second algorithm for optimizing mesh quality we propose in this paper is based on the multidirectional search
(MDS) method [14, 11]. The MDS algorithm is similar to the PS algorithm except that the MDS algorithm uses a
special pattern, namely a simplex. Triangles and tetrahedra are used as simplices in 2D and 3D, respectively. The
MDS algorithm chooses the new coordinates of the free vertex by computing objective function values at the simplex
vertices. The MDS algorithm alters the size of the simplex and the search directions through three steps: (1) reﬂection,
(2) expansion, and (3) contraction as shown in Figure 2 and described in the subsequent sections.
3.2.1. Multidirectional Search
To optimize the mesh quality via the MDS algorithm, the simplex of free vertices is initialized. Once the simplex
has been initialized, the exploration algorithm searches for new coordinates of the free vertex. If the candidate vertex
yields a valid mesh with improvement in f (x), it is accepted as the new vertex location. A simple backtracking
linesearch is employed to ensure valid steps with improved results are taken. The stopping criterion for convergence
of the MDS algorithm is given by (2). The pseudocode for the MDS mesh quality improvement algorithm is given in
Algorithm 3.
3.2.2. Simplex Exploration
The candidate vertex coordinates xknew candidate and the corresponding new simplex S knew are computed via the simplex exploration algorithm. Once the objective function values for the original simplex are calculated, the algorithm
determines the best vertex in the simplex, i.e., the vertex having the maximum objective function value. If there are
several vertices which have the same maximal value, the algorithm randomly chooses one as the best vertex. The

391
5

J. Park,Park
S.M.and
Shontz
/ Procedia
1 (2012)
387–396
Shontz
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10

Algorithm 3 MDS mesh quality improvement algorithm
1: function multidirectional search(mesh, α, tol, q, γ)
α = initial step size
2:
Initialize simplex of free vertices
q = quality metric, tol = tolerance
x
−x previous 2
3:
while (( current
≥ tol) & (( fcurrent - finitial ) < 0.95*( fdesired - finitial )) & (count < 5))
x previous 2
4:
for k = 1, 2, ...., N
N = number of free vertices in mesh
5:
get xk , simplex S k of xk
6:
[xknew candidate , S knew ] ← Simplex Exploration(xk , S k , q)
7:
while !valid(xknew candidate )
γ: backtracking linesearch parameter
8:
xknew candidate ← γ × xknew candidate
9:
endwhile
10:
if f xknew candidate > f xk
11:
xknew ← xknew candidate
12:
S k ← S knew
13:
endif
14:
endfor
15:
if ( fcurrent - f previous ) < 10−15
16:
count++
17:
endif
18:
endwhile
19: end function

v

(1+θ)v − θv ’
0

1

vc1

expanded simplex

reflected simplex
v2

v

v2’

1

original simplex

0

v2’

ve2

v0

v0

vc

2

contracted simplex
v1’

v1’
(1−μ)v0 + μv1’
ve1

(a) reﬂection step

(b) expansion step

(c) contraction step

Figure 2: The three steps of the multidirectional search: (a) reﬂection, (b) expansion, and (c) contraction

392

J. Park,
S.M.Shontz
Shontz
/ Procedia
Computer
Science
1 (2012)
Park and
/ Procedia
Computer
Science
00 (2010)
1–10387–396

6

best vertex is set to v0 , and the simplex is updated during the reﬂection, expansion, and contraction steps. Figure 2
illustrates these three steps in the MDS algorithm.
In the reﬂection step, the simplex is reﬂected through the best vertex, and the algorithm computes the objective
function values at vertices in the reﬂected simplex. If the maximum value of the reﬂected simplex is larger than
the function value of the best vertex, the algorithm performs an expansion. Otherwise, the algorithm contracts after
returning to the original simplex. In the expansion step, the algorithm expands the reﬂected simplex by doubling the
length of every edge in the reﬂected simplex. The expansion rates of the simplex are controlled by μ, the expansion
factor. After expanding the reﬂected simplex, the algorithm computes the objective function values for vertices in
the expanded simplex and compares them to determine the maximum value. If the maximum value of the expanded
simplex is bigger than the maximum value of the reﬂected simplex, the expanded simplex is updated with the new
simplex S knew , and the vertex which has the maximum value becomes xknew candidate .
However, if the maximum value of the expanded simplex is smaller than the maximum value of the reﬂected
simplex, the reﬂected simplex returns to the original simplex, and the original simplex is contracted. The contraction parameter, θ, controls the contraction rate of the simplex. After contracting the original simplex, the algorithm
calculates the objective function values for vertices in the contracted simplex and updates the simplex with the new
simplex, S knew . In this case, the vertex which has the maximum value of the contracted simplex is set to xknew candidate .
The pseudocode for the simplex exploration function is given in Algorithm 4.
Algorithm 4 Simplex Exploration
1: function Simplex Exploration(xk , S k , q)
2:
v0 ← xk , v1 ← S k1 , v2 ← S k2
3:
max ← arg max f (vi )

xk :free vertex, S k :simplex, q:quality metric

i

4:
5:
6:
7:
8:
9:

10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:

swap vmax and v0
for i = 1,...,n
vi ← 2v0 - vi
compute f (vi )
endfor
if max f (vi ) > f(v0 )
for i = 1,...,n
vei ← (1-μ)v0 + μvi
compute f (vei )
endfor
if max f (vei ) > max f (vi )
vi ← vei
endif
else
for i = 1,...n
vci ← (1+θ)v0 - θvi
compute f (vci )
endfor
vi ← vci
endif
max ← arg max f (vi )
i

if f(vmax ) > f(v0 )
swap vmax and v0
endif
xk ← v0 , S k1 ← v1 , S k2 ← v2
return xk , S k
30: end function
25:
26:
27:
28:
29:

reﬂection step

expansion step. μ: expansion factor, 1 < μ < +∞

contraction step. θ: contraction factor, 0 < θ < 1

393
7

J. Park,Park
S.M.and
Shontz
/ Procedia
1 (2012)
387–396
Shontz
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10

4. Numerical Experiments
In this section, we report on the results of numerical experiments designed to determine and compare the performance of the pattern search and multidirectional search mesh quality improvement algorithms on 2D and 3D
unstructured meshes. The performance of the two methods is eﬀected by various parameters. For the PS method, the
convergence tolerance, the number of directions, the backtracking linesearch parameter, and the step size expansion
parameter inﬂuence the behavior of the method. Similarly, the convergence tolerance, the expansion parameter, the
contraction parameter, and the initial simplex location eﬀect the behavior of the MDS method. Preliminary experiments were performed to determine the best values of the parameters for each method [16]. These were the values of
the parameters that yielded the highest quality meshes. The parameter values used in our experiments are shown in
Table 1.
We implemented both derivative-free optimization solvers in C++. The machine employed for the experiments
was an UltraSPARC-III CPU with a 750MHz processor, an 1GB SDRAM of memory, an 8MB L2 cache, and running
Solaris. The following meshes listed in Table 2 are used in the subsequent experiments. The 2D triangular meshes
were generated using the Triangle [17] mesh generation package written by Jonathan Shewchuk. The 3D tetrahedral
duct mesh was obtained from the Mesquite test collection (Mesh Quality Improvement Toolkit) [18]. The other 3D
meshes were obtained from the INRIA 3D mesh research database [19].
PS
convergence tolerance (tol)
backtracking linesearch parameter (γ)
number of directions
step size expansion parameter (δ)

−7

10
0.9
4
1.5

MDS
convergence tolerance (tol)
expansion parameter (μ)
contraction parameter (θ)
initial simplex location

10−7
5
0.9
30◦

Table 1: The PS and MDS parameter values used in successive experiments

name
curved
circles
gear
annulus
duct
lake
bone

2D meshes
# of vertices # of elements
1151
2220
2002
3596
2152
4023
2603
4694
3059
5928
5860
11271
5988
11541

name
drill
tire
star
bunny
driver
face

3D meshes
# of vertices # of elements
2681
10080
2570
11098
2594
11266
2784
13142
3975
14047
5847
22276

Table 2: The test mesh conﬁgurations (ordered by problem size)
We now compare the results of the PS and MDS mesh quality improvement methods when smoothing the meshes
according to the radius ratio quality metric and using the parameter values given in Table 1. Table 3 shows the
timing results and the ﬁnal mesh qualities for the PS and MDS methods for the 2D meshes. The PS method often
takes longer than MDS method, but the PS method obtains higher quality meshes by converging to a diﬀerent local
maximum. The PS method required a greater number of iterations and function evaluations for obtaining the best
quality mesh. Figure 3 shows the results of running the PS and MDS methods on the duct mesh, a representative
result for the 2D experiment [16]. The PS method increases the mesh quality very slowly because of the initial step
size. If the initial step size is not appropriately chosen, numerous backtracking steps are required, and the execution
time of the method increases. Figure 4 shows the distributions of individual mesh element qualities for the initial
and ﬁnal duct meshes. Even though the two methods improved the mesh quality, the ﬁnal mesh obtained for the PS
method has a greater number of higher quality elements (i.e., elements with a radius ratio of more than 0.8) than that
of the MDS method.
Table 4 shows the timing results and the ﬁnal mesh qualities for the PS and MDS methods on 3D meshes. Most of

394

J. Park,
S.M.Shontz
Shontz
/ Procedia
Computer
Science
1 (2012)
Park and
/ Procedia
Computer
Science
00 (2010)
1–10387–396

8

the 3D meshes obtained the same mesh quality when smoothed via either method. This is because our 3D test meshes
had better initial mesh quality, i.e., they were closer to optimal than the 2D initial meshes. Although the methods
converged to the same mesh, the PS method required more time to converge. Figure 5 shows the results of running
the PS and MDS methods on the drill mesh, a representative result for the 3D experiment [16]. The distributions of
individual element mesh quality values for the 3D drill mesh are represented in Figure 6; the results obtained by the
PS and MDS methods are very similar in this case.
mesh
annulus
bone
circles
curved
duct
gear
lake

method
PS
MDS
PS
MDS
PS
MDS
PS
MDS
PS
MDS
PS
MDS
PS
MDS

initial quality
1.72E-09
7.43E-15
6.73E-11
6.60E-07
2.28E-08
1.68E-05
3.31E-07

ﬁnal quality
0.23516710
0.19075534
0.00673006
0.00673006
0.38285509
0.37261397
0.14103019
0.13814850
0.11075959
0.06472343
0.18005488
0.14897542
0.14439192
0.14439192

execution time
399.680988
254.425856
690.796156
683.213475
292.919613
127.633413
108.139385
53.341213
273.028583
214.727213
406.502534
130.701917
1199.723542
846.387414

# of iters
35
16
22
13
54
16
47
15
27
15
56
12
26
13

# of f(x) evals
107831
33456
156838
72215
128086
25536
75136
16065
104428
43065
160680
22452
186056
70239

Table 3: The PS and MDS 2D mesh quality optimization algorithm results based on the best combination of parameters
for each method
mesh
bunny
drill
driver
face
star
tire

method
PS
MDS
PS
MDS
PS
MDS
PS
MDS
PS
MDS
PS
MDS

initial quality
4.53E-10
1.38E-09
1.64E-08
7.09E-10
3.48E-11
6.57E-04

ﬁnal quality
0.00074699
0.00074699
0.00420104
0.00420104
0.00087292
0.00087292
0.00267243
0.00267243
0.01247686
0.00604898
0.01178366
0.01178366

execution time
297.743516
279.860644
77.6065215
55.974202
37.018623
35.309944
173.462809
92.706438
877.635641
138.563354
240.660745
195.320738

# of iters
13
8
11
7
25
22
13
8
69
8
22
11

# of f(x) evals
23279
11368
11047
4487
15005
8294
29096
11696
113121
8144
39046
14542

Table 4: The PS and MDS 3D mesh quality optimization algorithm results based on the best combination of parameters
for each method

5. Conclusions and Future Work
In conclusion, we have proposed two derivative-free optimization methods for mesh quality improvement: the
pattern search (PS) and the multidirectional search (MDS) mesh quality improvement methods. Both methods were
inspired by optimization algorithms found in the literature; however, their application to mesh quality improvement is
novel. The pattern search and multidirectional search optimization algorithms were chosen for this initial study due
to the revival of direct search methods in recent years [20]; algorithms based on other derivative-free optimization
methods will be considered for future work.
We presented the results obtained from solving an optimization problem designed to improve the worst quality
element on several 2D and 3D meshes. Both methods proved to be eﬀective in smoothing the ﬁnite element meshes

395
9

J. Park,Park
S.M.and
Shontz
/ Procedia
1 (2012)
387–396
Shontz
/ ProcediaComputer
Computer Science
Science 00
(2010) 1–10

4000

Number of elements

3500

0.12

0.1

PS
MDS

3000
2500
2000
1500
1000
500
0
0

0.2

0.4

0.6

0.8

1

Radius ratio mesh quality

(a) initial mesh
0.06

0.02

0
0

50

100

150

200

250

300

Number of elements

0.04

Execution time (sec)

4000

4000

3500

3500

3000

3000

Number of elements

Mesh quality

0.08

2500
2000
1500
1000

Figure 3: Mesh quality versus solver execution time for the PS and MDS methods
on the 2D duct mesh

2000
1500
1000
500

500
0
0

2500

0.2

0.4

0.6

0.8

0
0

1

0.2

0.4

0.6

0.8

1

Radius ratio mesh quality

Radius ratio mesh quality

(b) PS method

(c) MDS method

Figure 4: The distributions of quality values for the 2D duct
mesh: (a) initial, (b) after PS, and (c) after MDS. The radius
ratio quality metric was employed for the experiment.
1800

Number of elements

1600

−3

4.5

x 10

4

1400
1200
1000
800
600
400
200

PS
MDS

3.5

0
0

0.2

0.6

0.8

1

(a) initial mesh

2.5
2

Number of elements

1.5
1
0.5
0
0

10

20

30

40

50

60

70

80

Execution time (sec)

1800

1800

1600

1600

1400

1400

1200
1000
800
600

1200
1000
800
600
400

400

200

200
0
0

Figure 5: Mesh quality versus solver execution time for the 3D drill mesh

Number of elements

Mesh quality

0.4

Radius ratio mesh quality

3

0.2

0.4

0.6

Radius ratio mesh quality

(b) PS method

0.8

1

0
0

0.2

0.4

0.6

0.8

1

Radius ratio mesh quality

(c) MDS method

Figure 6: The distributions of quality values for the 3D drill
mesh: (a) initial, (b) after PS, and (c) after MDS. The radius
ratio quality metric was employed for the experiment.

396

J. Park,
S.M.
Shontz
/ Procedia
Computer
Science
1 (2012)
Park and
Shontz
/ Procedia
Computer
Science
00 (2010)
1–10387–396

10

with the goal of improving the worst quality element when mesh quality was measured via the radius ratio quality
metric.
In 2D, better mesh quality was obtained through the PS method than through the MDS method. However, the
PS method took longer to converge. Hence, there is a tradeoﬀ between accuracy and execution time that needs to be
considered when determining the most appropriate algorithm to use on a given mesh. In 3D, the PS and MDS methods
most often converged to meshes with approximately the same quality in each case, but the execution time for the PS
method was longer.
For future research, we plan to explore the use of our methods for optimization problems with diﬀerentiable
objective functions requiring expensive gradient evaluations, as our methods could potentially reduce the time to
convergence for such optimization problems. In addition, we plan to design additional derivative-free mesh quality improvement algorithms which will determine a locally optimal mesh; our algorithms will be based on other
derivative-free optimization algorithms such as the mesh adaptive direct search algorithm [21], the Nelder-Mead
simplex algorithm [22], or a trust-region derivative-free optimization method [23], for example. Furthermore, we will
compare our derivative-free mesh quality improvement methods with the active set mesh quality improvement method
described in [9] in order to determine the most eﬀective methods within the two contexts, i.e., (1) optimization problems with nondiﬀerentiable objective functions and (2) optimization problems with diﬀerentiable objective functions
requiring expensive gradient evaluations. Finally, we plan to parallelize our solvers for use in smoothing very large
meshes (e.g., containing at least 10 million elements) which typically occur in science and engineering simulations.
References
[1] P. Jaisson, F. Vuyst, An innovating PDE model based on ﬂuid ﬂow paradigm for multithread systems, Comput. Netw. 52 (2008) 3318–3324.
[2] J. Crank, P. Nicolson, A practical method for numerical evaluation of solutions of partial diﬀerential equations of the heat-conduction type,
in: Mathematical Proceedings of the Cambridge Philosophical Society, Vol. 43, 1947, pp. 50–67.
[3] T. Deschamps, R. Schwartz, D. Trebotich, Air-ﬂow simulation in realistic models of the trachea, IEEE Int. Conf. on Engineering in Medicine
and Biology Society 3 (2004) 3933–3936.
[4] S. C. Brenner, L. R. Scott, The Mathematical Theory of Finite Element Methods, 2nd Edition, Springer, 2002.
[5] J. Shewchuk, What is a good linear element? Interpolation, conditioning, and quality measures, in: Proceedings of the 11th International
Meshing Roundtable, Sandia National Laboratories, 2002, pp. 115–126.
[6] T. Munson, Mesh shape-quality optimization using the inverse mean-ratio metric, Math. Program. 110 (3) (2007) 561–590.
[7] L. Freitag, On combining Laplacian and optimization-based mesh smoothing techniques, in: Trends in Unstructured Mesh Generation, Vol.
220, 1997, pp. 37–43.
[8] J. Zheng, J. Zhang, H. Zhou, L. Shen, Smooth spline surface generation over meshes of irregular topology, The Visual Computer 27 (2005)
858–864.
[9] L. Freitag, P. Plassmann, Local optimization-based simplicial mesh untangling and improvement, Int. J. Num. Meth. Eng. 49 (2000) 109–125.
[10] E. Dolan, R. Lewis, V. Torczon, On the local convergence of pattern search, SIAM J. Opt. 14 (2) (2003) 567–583.
[11] V. Torczon, Multidirectional Search: A Direct Search Algorithm for Parallel Machines, Ph.D. thesis, Rice University, Houston, TX (1989).
[12] J. Dennis, V. Torczon, Derivative-free pattern search methods for multidisciplinary design problems, In Proceedings of the 5th
AIAA/USAF/NASA/ISSMO Symposium on Multidisciplinary Analysis and Optimization (1994) 7–9.
[13] J. Dompierrre, M. Vallet, P. Labbe, F. Guibault, An analysis of simplex shape measures for anisotropic meshes, Comput. Meth. Appl. Mech.
Eng. 194 (2005) 4895–4914.
[14] A. Conn, K. Scheinberg, L. Vincente, Introduction to Derivative-free Optimization, MPS-SIAM Series on Optimization.
[15] P. Knupp, Achieving ﬁnite element mesh quality via optimization of the jacobian matrix norm and associated quantities. Part I - a framework
for surface mesh optimization, Int. J. Numer. Meth. Engng. 48 (2000) 401–420.
[16] J. Park, Derivative-free Optimization Algorithms for Mesh Quality Improvement, Master’s thesis, The Pennsylvania State University, University Park, PA (2009).
[17] J. Shewchuk, Triangle: Engineering a 2D Quality Mesh Generator and Delaunay Triangulator, in: Applied Computational Geometry: Towards
Geometric Engineering, Vol. 1148, Springer-Verlag Lecture Notes in Computer Science, 1996, pp. 203–222.
[18] M. Brewer, L. Freitag, P. Knupp, T. Leurent, D. Melander, The Mesquite Mesh Quality Improvement Toolkit, in: Proceedings of the 12th
International Meshing Roundtable, Sandia National Laboratories, 2003, pp. 239–250.
[19] INRIA, 3D mesh research database, see http://www-c.inria.fr/gamma/download/.
[20] T. Kolda, R. Lewis, V. Torczon, Optimization by direct search: New perspectives on some classical and modern methods, SIAM Review
45 (3) (2003) 385–482.
[21] C. Audet, J. Dennis, Jr., Mesh adaptive direct search algorithms for constrained optimization, SIAM J. Optim. 17 (2007) 188–217.
[22] J. Nelder, R. Mead, A simplex method for function minimization, Computer Journal 7 (1965) 308–313.
[23] B. Colson, Trust-region algorithms for derivative-free optimization and nonlinear bilevel programming, 4OR: A Quarterly Journal of Operations Research 2 (1) (2004) 85–88.

