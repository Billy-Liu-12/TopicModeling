Cryptanalysis of the Public-Key Encryption
Based on Braid Groups
Eonkyung Lee1 and Je Hong Park2
1

Cryptographic Technology Team, KISA, Seoul, 138-803, South Korea
eonkyung@kisa.or.kr
2
Department of Mathematics, KAIST, Taejon, 305-701, South Korea
arttex@cais.kaist.ac.kr

Abstract. At CRYPTO 2000, a new public-key encryption based on
braid groups was introduced. This paper demonstrates how to solve its
underlying problem using the Burau representation. By this method,
we show that the private-key can be recovered from the public-key for
several parameters with signiﬁcant probability in a reasonable time.
Our attack can be mounted directly on the revised scheme mentioned
at ASIACRYPT 2001 as well. On the other hand, we give a new
requirement for secure parameters against our attack, which more or
less conﬂicts with that against brute force attack.
Keywords: Cryptanalysis, Public-key encryption, Braid group, Burau
representation.

1

Introduction

Most current public-key cryptosystems (PKCs) are based on number-theoretic
problems such as factoring integers or ﬁnding discrete logarithms. The ﬁrst PKC
that is not based on these problems is the Merkle-Hellman encryption based on
knapsack problem. Despite the NP-completeness of this problem, all knapsackbased encryptions have been broken.
By Shor’s algorithms [16], quantum computers can solve integer factorization
problems and discrete logarithm problems eﬃciently. Although practical quantum computers are at least 10 years away, their potential will soon create distrust
in current cryptographic methods [17]. In order to enrich cryptography as well as
not to put all eggs in one basket, there have been continuous attempts to develop
alternative PKCs based on diﬀerent kinds of problems. In the later 1990s, lattice
cryptography received wide attention. Among the proposed schemes, NTRU, introduced by Hoﬀstein et al. [7], has been improved to be secure by Nguyen and
Pointcheval [14].
On the other hand, there have been eﬀorts in the area of noncommutative
groups [2,11,12,15]. As a candidate for cryptographically promising noncommutative groups, braid groups have attracted many cryptographers’ attention due
to eﬃcient implementation and several hard problems. The braid group Bn is a
torsion-free noncommutative group naturally arising from geometric braids with
E. Biham (Ed.): EUROCRYPT 2003, LNCS 2656, pp. 477–490, 2003.
c International Association for Cryptologic Research 2003

478

E. Lee and J.H. Park

n strands. Anshel et al. [2,1] proposed key agreement protocols in braid groups,
on which a couple of attacks have been mounted by Lee and Lee [13], Hughes
and Tannenbaum [9,10], and Hofheinz and Steinwandt [8].
A practical public-key encryption scheme in braid groups (BPKE) was introduced by Ko et al. at CRYPTO 2000 [11], which appeared to be based on a
Diﬃe-Hellman(DH) like problem: given (a, x−1 ax, y −1 ay) for a ∈ Bn , x ∈ G1 ,
y ∈ G2 , ﬁnd y −1 x−1 axy. Here, G1 and G2 are proper subgroups of Bn commuting each other. Hofheinz and Steinwandt [8] proposed an algorithm for this
problem. Cha et al. [3] mentioned a revised version, a more generalized encryption scheme, to which Hofheinz and Steinwandt’s algorithm cannot be applied.
The underlying problem of this generalized version could be roughly stated as:
given (a, x1 ax2 ), ﬁnd (z1 , z2 ) such that z1 az2 = x1 ax2 , where a ∈ Bn and
x1 , x2 , z1 , z2 ∈ G1 . There have been attempts in analyzing braid cryptosystem
via representation. As a ﬁrst step, Hahn et al. [6] analyzed the problem for particular case, x1 = x−1
2 , not in braid group but in general linear group using the
Burau representation. Hughes [9] proposed a heuristic method of recovering a
braid from its Burau matrix in order to attack Anshel et al.’s key agreement
protocol [1].
Our Results. This paper proposes two improvements of Hughes algorithm.
Comparing with his algorithm, one is more eﬃcient with the same success rate,
and the other has higher success rate with less eﬃciency. Using these algorithms
and Hahn et al.’s idea, we attempt to solve the underlying problem of the revised
BPKE as well as the original scheme. Using this method, we recover the privatekey from the public-key for seven out of the nine parameters suggested at [11]
with signiﬁcant probability in a reasonable time. On the other hand, we give a
new requirement for secure parameters against our attack, which more or less
conﬂicts with that against brute force attack.
Outline. Section 2 reviews necessary material for this paper. Section 3 describes
the revised BPKE [3], and shows that its security can be reduced to the aforementioned problem for a particular type of instances. Section 4 proposes a new
method of solving that problem using the Burau representation, and shows that
the private-key can be recovered from the public-key with signiﬁcant probability
in a reasonable time for some parameters proposed at [11].

2
2.1

Preliminaries
Basic Notations

For a positive integer N , let ZN denote the integers modulo N . For a ring R,
Matn,m (R) stands for the set of all (n × m)-matrices over R, and GLn (R) the
general linear group which is the set of all (n × n)-invertible matrices over R.
For simplicity, Matn (R) means Matn,n (R). In is the (n × n)-identity matrix.
R[t1 , . . . , tn ] is the ring composed of polynomials in (t1 , . . . , tn ) with coeﬃcients
in R.

Cryptanalysis of the Public-Key Encryption Based on Braid Groups

2.2

479

Braid Group

Here, we have a quick review of the braid groups. There is a detailed explanation
in [11] for beginners.
The n-braid group Bn is presented by the (n − 1) Artin generators
σ1 , . . . , σn−1 and two kinds of relations σi σj = σj σi for |i − j| > 1 and
σi σj σi = σj σi σj for |i − j| = 1. The monoid1 Bn+ can be regarded as the set
of all positive words with the identity en . Let LBn and UBn be the subgroups
of Bn generated by σ1 , . . . , σ n/2 −1 and σ n/2 +1 , . . . , σn−1 , respectively. Thus,
LBn could be regarded as B n/2 , and LBn+ as LBn ∩ Bn+ .
A fundamental braid of Bn means (σ1 · · · σn−1 )(σ1 · · · σn−2 ) · · · (σ1 ) denoted
by ∆n . For x ∈ Bn , the supremum of x, sup(x), indicates the smallest integer
sup(x)
such that there is P ∈ Bn+ satisfying ∆n
= xP . The inﬁmum of x, inf(x),
inf(x)
indicates the largest integer such that there is Q ∈ Bn+ satisfying ∆n
Q = x.
The canonical-length of x, len(x), means sup(x) − inf(x). Each of them is an
invariant of x. In addition, the word-length of x, wlen(x), indicates the shortest
word length of x.

3

Security of the BPKE

The BPKE was proposed in two versions [11,3]. We consider the revised scheme
described in [3] which is of more general form than the original scheme [11].
A private-key is given as a pair (x1 , x2 ) where x1 and x2 are in LBn , and the
associated public-key is a pair (a, b) where a ∈ Bn and b = x1 ax2 . The encryption
and decryption is as follows.
Encryption. Given a message M ∈ {0, 1}k ,
1. Choose y1 , y2 ∈ UBn at random.
2. Ciphertext is (y1 ay2 , h(y1 by2 ) ⊕ M ).
Decryption. Given a ciphertext (c, d) and the private-key (x1 , x2 ), compute
M = h(x1 cx2 ) ⊕ d.
Here, h : Bn → {0, 1}k is a collision-free hash function. We remark that the
−1
original BPKE in [11] is obtained with the condition x1 = x−1
2 and y1 = y2 .
For a given public-key (a, b), there can be multiple private-keys. If we could
ﬁnd any z1 , z2 ∈ LBn such that z1 az2 = b, then M is always recovered by
computing h(z1 cz2 ) ⊕ d regardless of the considered BPKE being the original
version (i.e., x1 = x−1
2 ) or the revised one (i.e., x1 and x2 are independent). So,
the problem of recovering private-key is reduced to the following problem.
Given a, b ∈ Bn , ﬁnd x1 , x2 ∈ LBn satisfying b = x1 ax2 , provided that
such braids exist.
1

A group-like object which fails to be a group because elements need not have an
inverse within the object. A monoid S must also be associative and have an identity
element e ∈ S such that for all x ∈ S, ex = xe = x.

480

E. Lee and J.H. Park

We note that if such x1 is found then x2 is automatically derived, and vice versa.
This paper considers the above problem for particular instances. Hereinafter,
we call this problem the P-BPKE problem for our convenience.
P-BPKE problem: Given a, b ∈ Bn+ , ﬁnd x1 , x2 ∈ LBn+ satisfying
b = x1 ax2 , provided that such braids exist.
Since the BPKE is described in terms of left-canonical form in [11,3], we
should discuss it also wherein. In implementing the BPKE, the ranges of a,
x1 , and x2 are speciﬁed. This means that the bounds of their supremums and
inﬁmums are ﬁnite and given. Let ∆L denote the fundamental braid within LBn ,
i.e., ∆L = (σ1 · · · σ n/2 −1 )(σ1 · · · σ n/2 −2 ) · · · (σ1 ). We note that (i) if y ∈ Bn ,
then ∆kn y = y∆kn for any even integer k, and (ii) if y ∈ Bn , k ≤ inf(y), and
−k
k < 0, then both ∆−k
n y and y∆n are positive n-braids. Now we show that the
security of the BPKE depends on the intractability of the P-BPKE problem.
Proposition 1. If the P-BPKE problem is solved, then the private-key of the
BPKE can be recovered from its associated public-key.
Proof. Let (a, b) be a given public-key and (x1 , x2 ) be its private-key. Since inf(a)
is known, we can choose an even integer u so that ∆un a is a positive braid. Let
a = ∆un a. The lower bound of inf(x1 ) and inf(x2 ) in LBn is publicly known,
−v
−v
−v
u
+
+
say v. For v < 0, let b = ∆−v
L ∆n b∆L . Since a ∈ Bn , ∆L x1 , x2 ∆L ∈ LBn ,
−v
−v
+
and b = ∆L x1 a x2 ∆L , we can obtain P1 , P2 ∈ LBn from (a , b ) such that
b = P1 a P2 by hypothesis. Let z1 = ∆vL P1 and z2 = P2 ∆vL . Then, z1 , z2 ∈ LBn
v
v
−u v
v
and z1 az2 = ∆vL P1 aP2 ∆vL = ∆−u
n ∆L P1 a P2 ∆L = ∆n ∆L b ∆L = b. Therefore,
(z1 , z2 ) is another private-key corresponding to the public-key (a, b).
For v ≥ 0, (z1 , z2 ) is recovered from (a, b) in a similar and simpler way by
letting b = ∆un b.

4

The P-BPKE Problem

This section shows how to solve the P-BPKE problem. A natural way to solve
it in Bn is via another group G as follows: (i) to transform the problem in Bn
into the one in G, (ii) to solve the problem in G, and (iii) to lift the solution
back into Bn . Representations of braid groups—a representation of a group is a
homomorphism from that group to GLk (R) for some integer k and domain R of
characteristic zero—appear to provide such a group G. In order to perform (iii)
above, a faithful representation, Krammer representation, can be considered.
However, in this case, an n-braid is transformed into an n(n−1)
× n(n−1)
-matrix.
2
2
Since manipulating these matrices, especially in (ii) above, seems unpractical
for large braid index and word length, we consider a more practical one, Burau
representation. The Burau representation ρn : Bn → GLn (Z[t, t−1 ]) is deﬁned
by


Ii−1

0



tt
ρn (σi ) =  0 1 −
1 0

0

0

0
0

In−i−1



.


Cryptanalysis of the Public-Key Encryption Based on Braid Groups

4.1

481

Computing ρm (x1 ) or ρm (x2 ) from (a, x1 ax2 )

From a pair of n-braids (a, b) such that b = x1 ax2 for a ∈ Bn+ and x1 , x2 ∈ LBn+ ,
(ρn (a), ρn (b)) can be computed easily. Let m = n2 . Then, there exists (X1 , X2 )
such that (i) Xi =

Xi 0
0 In−m

for i = 1, 2, where Xi ∈ GLm (Z[t]), and (ii)

ρn (b) = X 1 ρn (a)X2 . This section computes X1 or X2 .
Finding Xi |t=t0 . Let
1 A2
ρn (a) = A
A3 A4

1 B2
and ρn (b) = B
B3 B4 ,

where A1 , B1 ∈ Matm (Z[t]), A2 , B2 ∈ Matm,n−m (Z[t]), A3 , B3 ∈
Matn−m,m (Z[t]), and A4 , B4 ∈ Matn−m (Z[t]).
The equation ρn (b) = X1 ρn (a)X2 yields the following four types of equations.
e1 : B1 = X1 A1 X2 ,
e3 : B3 = A3 X2 ,

e2 : B2 = X1 A2 ,
e4 : B4 = A4 .

Now we consider e2 and e3. If either A2 or A3 is of full rank, then X1 or X2
is determined uniquely.
We experiment how often a has full rank Ai for i = 2 or 3 by Maple. On
input (n, l, t0 ), our program chooses at random 100 positive n-braid a’s with word
length l, checks the ranks of Ai |t=t0 for i = 2, 3, and then outputs the number of
a’s for which at least one of Ai |t=t0 ’s has full rank. Figure 1 shows these numbers
for various (n, l)’s at t0 = 2. For several other random integer t0 ’s, the results
were very similar. The reason is that the degree of independency of the column
vectors of Ai generally remains the same after substituting randomly chosen
integer t0 for the variable t. For instance, in the case of n = 2m, rank(Ai ) = m
if and only if det(Ai ) = 0. Here, det(Ai ) is a polynomial in t, and many of
the roots of det(Ai ) = 0 lie beyond integers. Note that the existence of t0 such
that A2 |t=t0 (resp. A3 |t=t0 ) has full rank implies that A2 (resp. A3 ) has also
full rank. It is observed that the longer the word length of a is, the higher
is the probability that A2 or A3 has full rank. One can heighten a little the
probability by simultaneously solving three restated linear (in X1 and X2−1 )
equations: B1 X2−1 = X1 A1 , B2 = X1 A2 , B3 X2−1 = A3 at t = t0 .
Finding Xi . For a ∈ Bn+ with full rank A2 or A3 , X1 or X2 can be computed
by solving e2 or e3, respectively. Without loss of generality, we assume that
rank(A3 ) = m. Every entry of X2 is expressed as a polynomial in Z[t]. The
highest degree of entries in X2 is at most wlen(x2 ). In fact, it is far smaller
than wlen(x2 ) for random x2 . We note that since x2 ∈ LBn+ , the upper bound
of wlen(x2 ) can be computed because wlen(x2 ) ≤ sup(x2 ) m(m−1)
≤ sm(m−1)
2
2
where m = n/2 and s is the publicly known upper bound of sup(x2 ) in LBn .
Recalling that det(ρm (σj )) = −t for every j, wlen(x2 ) can be derived from
2
X2 |t=t0 by det(X2 |t=t0 ) = (−t0 )wlen(x2 ) in at most sm
2 multiplications.

E. Lee and J.H. Park
success rate (%)

482

n = 10

100

n = 15

n = 20

80
60
40
20
50

110 170 230 290 350 410 470 530 590 650 710
wlen(a)

Fig. 1. Probability that A2 or A3 is of full rank for a random a ∈ Bn+

We then evaluate (A3 , B3 ) at wlen(x2 ) + 1 diﬀerent t0 ’s such that
rank(A3 |t=t0 ) = m. From each (A3 |t=t0 , B3 |t=t0 ), computing X2 |t=t0 takes
time O(m3 ) in the Gauss-Jordan elimination. From these X2 |t=t0 ’s, X2 can
be computed by Lagrange interpolating polynomial method with complexity
2
O(m2 wlen(x2 ) ) [4].
Hence, the total evaluation of ρm (x2 ) from those (A3 |t=t0 , B3 |t=t0 )’s takes
time O(m2 · wlen(x2 )2 ) regarding wlen(x2 ) as greater than m.
4.2

Recovering x from ρm (x)

Hughes [9] proposed an algorithm recovering a private key of AAFG1 key agreement protocol [1] from its Burau matrix. His main idea is to reconstruct the
private key, say x, from ρm (x) generator by generator from right to left by assuming that the ﬁrst column with the highest degree polynomial entry in ρm (x)
indicates the last generator of x. The Burau representation is not faithful for
n ≥ 5. Namely, no algorithm can recover the designated preimage from the Burau matrix. Hughes’ heuristic algorithm behaves much better than expected. It
succeeds with 96% for AAFG1 scheme with suggested parameter.
A natural question is what is the fundamental reason for this high probability. For Hughes’ experiment, we analyze mathematically how that column is
connected to the last generator. Using this result, we improve his algorithm.
For x ∈ Bm , let c(ρm (x)) indicate the ﬁrst column containing the highest
degree entry in ρm (x) among the ﬁrst (m − 1) columns. If there is no confusion
from the context, it is interchangeably written as c(x).
+
has 1 ≤ wlen(x) ≤ 2, then it is clear that c(x) indicates the last
If x ∈ Bm
generator of x. What happens for longer word lengths? We investigate in which
cases c(x) fails to indicate the last generator of x.
Theorem 1. Suppose that c(x) indicates the last generator of x whenever x ∈
+
+
and wlen(x) ≤ l for some positive integer l ≥ 2. For any z ∈ Bm
with
Bm

Cryptanalysis of the Public-Key Encryption Based on Braid Groups

483

wlen(z) = l + 1, c(z) indicates the last generator of z with probability more than
1
1 − m−1
.
+
Proof. z can be expressed as z = xσi for some x ∈ Bm
and 1 ≤ i < m. Then,

 (1 − t)ρm (x)i + ρm (x)i+1 if k = i,
if k = i + 1,
ρm (z)k = tρm (x)i
(1)

otherwise.
ρm (x)k

Hereinafter, for a matrix M , let i Mj , i M , and Mj denote the (i, j)-th entry, the
i-th row vector, and the j-th column vector of M , respectively. And, let Hdeg(M )
denote the highest degree of entries in M . Let ck and dk denote Hdeg(ρm (z)k )
and Hdeg(ρm (x)k ), respectively. Then
ci = Hdeg((1 − t)ρm (x)i + ρm (x)i+1 ),
ci+1 = di + 1,
ck = dk
for k = i, i + 1.

(2)
(3)
(4)

Let c(x) = j. We remark that since wlen(x) = l and l ≥ 2, there exists w ∈
+
\{em } such that x = wσj .
Bm
Case 1. |i − j| > 1 or i = j
In this case, z = wσj σi = wσi σj . So it suﬃces to show that c(z) = i or j.
Here, we consider only the case of i < j − 1 (For the cases of i > j + 1 and i = j,
the same results are obtained in a similar and easier way.).
Since c(x) = j and i + 1 < j, dj > di+1 . If di ≥ di+1 , then ci = di + 1 from
Eq.(2). Thus ci ≤ dj because c(x) = j and i < j. And ci+1 = ci by Eq.(3).
Thus, by Eq.(4), c(z) = i or j according to ci = cj or ci < cj . Otherwise(i.e. if
di < di+1 ), ci ≤ di+1 from Eq.(2). ci+1 ≤ di+1 by Eq.(3), and hence ci , ci+1 < cj
because di+1 < dj and dj = cj . Thus c(z) = j by Eq.(4).
Case 2. i = j + 1
If di < di+1 , then ci ≤ di+1 from Eq.(2), and ci+1 ≤ di+1 from Eq.(3). Thus,
by Eq.(4), c(z) = j because di+1 ≤ dj . Otherwise(i.e. if di ≥ di+1 ), ci = di + 1
from Eq.(2), and hence ci+1 = ci from Eq.(3). Thus, c(z) = j or i by Eq.(4).
Since σi is clearly the last generator of z, it suﬃces to show that if c(z) = j,
then σj is another last generator of z. We do this in two steps. First, we prove
that c(z) = j implies c(w) = j + 1. Then we prove that if c(w) = j + 1, σj is the
last generator of z.
Proof of the ﬁrst step: Since z = wσj σj+1 ,

(1 − t)ρm (w)j + ρm (w)j+1 if k = j,



t(1 − t)ρm (w)j + ρm (w)j+2 if k = j + 1,
ρm (z)k =
t2 ρm (w)j
if k = j + 2,



ρm (w)k
otherwise.
With this, c(z) = j implies the followings.

484

E. Lee and J.H. Park

· Hdeg(ρm (w)j+1 ) ≥ Hdeg(ρm (w)j )+2 because Hdeg(t2 ρm (w)j ) ≤ Hdeg((1−
t)ρm (w)j + ρm (w)j+1 )). So Hdeg(ρm (z)j ) = Hdeg(ρm (w)j+1 ).
· Hdeg(ρm (w)j+1 ) ≥ Hdeg(ρm (w)j+2 ) because Hdeg(t(1 − t)ρm (w)j +
ρm (w)j+2 ) ≤ Hdeg( ρm (w)j+1 ).
· Hdeg(ρm (w)j+1 ) > Hdeg(ρm (w)k ) for all k < j.
· Hdeg(ρm (w)j+1 ) ≥ Hdeg(ρm (w)k ) for all k > j + 2.
From these inequalities, we get c(w) = j + 1.
+
Proof of the second step: Since wlen(w) < l, there exists w ∈ Bm
such that
w = w σj+1 . Since z = wσj σi = w σj+1 σj σj+1 = w σj σj+1 σj , c(z) turns out to
indicate the last generator of z.
Case 3. i = j − 1
In this case, cq < di+1 for all q < i, and cq ≤ di+1 for all q > i + 1. Therefore,
we check ci and ci+1 comparing with di+1 .
Since c(x) = i + 1, we get di + 1 ≤ di+1 . If di + 1 < di+1 , then ci = di+1 from
Eq.(2), and hence ci+1 < ci from Eq.(3). Thus, we get the desired c(z) = i.
Now we consider the other case, di + 1 = di+1 , by comparing ρm (z)i and
ρm (z)i+1 entry by entry. For 1 ≤ p ≤ m, deﬁne Sp = {k ∈ {1, . . . , m} |
deg(k ρm (x)p ) = dp }. Clearly, Sp = ∅ for any p.
· If k ∈ Si+1 − Si , then deg(k ρm (z)i+1 ) < deg(k ρm (z)i ) = di+1 because
deg(k ρm (z)i+1 ) = deg(k ρm (x)i ) + 1 < di + 1 = di+1 = deg(k ρm (x)i+1 ) =
deg(k ρm (z)i ).
· If k ∈ Si − Si+1 , then deg(k ρm (z)i+1 ) = deg(k ρm (z)i ) = di+1 because
deg(k ρm (z)i+1 ) = deg(k ρm (x)i ) + 1 = deg(k ρm (z)i ).
· If k ∈ Si ∪ Si+1 , then we cannot compare deg(k ρm (z)i ) and deg(k ρm (z)i+1 ).
However, it is easy to check that each of them is less than di+1 .
· If k ∈ Si ∩ Si+1 , then deg(k ρm (z)i ) ≤ deg(k ρm (z)i+1 ) = di+1 . More precisely, let αk and βk be the coeﬃcients of the highest degree entry in
deg(k ρm (x)i ) and deg(k ρm (x)i+1 ), respectively. In this case, αk = βk implies deg(k ρm (z)i ) = di+1 , and αk = βk implies deg(k ρm (z)i ) < di+1 .
So we can see that if Si = Si+1 , then c(z) = i because ci+1 ≤ ci = di+1 .
Otherwise, there are two cases: (i) if there is k ∈ Si such that αk = βk , then
c(z) = i because ci = ci+1 = di+1 , and (ii) if αk = βk for all k ∈ Si , then
c(z) = i + 1 because ci < ci+1 = di+1 .
The last case, (ii), points out the unique case when c(z) may fail to indicate
the last generator of z. So the probability that this case happens is much lower
1
than m−1
.
Improved algorithms. Theorem 1 shows that c(xσi ) always succeeds in indicating the last generator of xσi except in the case that c(x) = i+1, di +1 = di+1 ,
Si = Si+1 , and αk = βk for all k ∈ Si . So the failure probability appears very
1
low under the condition stated in Theorem 1. Its loose upper bound is m−1
.

Cryptanalysis of the Public-Key Encryption Based on Braid Groups

485

Therefore, for a random positive braid with ﬁxed word-length, the success probability appears to become high as the braid index increases. And, for ﬁxed braid
index, it appears to become low as the word-length increases.
Combining the results of Theorem 1 with Hughes algorithm, this section
proposes two algorithms recovering x from ρm (x). The ﬁrst algorithm arises
from the basic property of braids we are dealing with. Being compared to Hughes
algorithm, it is faster and its success probability is almost the same. The second
algorithm comes from Theorem 1. Its success probability is higher and it is
slower than Hughes’. The objective of these algorithms is to seek an unknown
sequence (A[1], . . . , A[wlen(x)]) satisfying x = σA[1] · · · σA[wlen(x)] , where wlen(x)
was already obtained in the process of computing ρm (x) as mentioned in section
4.1. We describe more about these algorithms in Algorithms 1 and 2, and give
experimental results in Table 1 and 2. Our experiment was performed on a
computer with a Pentium IV 1.7 GHz processor using Maple 7. On input (m, l),
+
our program chooses at random 500 x’s from Bm
with wlen(x) = l, computes
ρm (x) from x, computes z from ρm (x) by each algorithm, and then determines
whether or not z is equal to x by comparing their left-canonical forms.
Algorithm 1. As we see in Eq.(1), if σj is the last generator of x, then every
entry in ρm (x)j+1 is always in tZ[t] because we deal with only positive braids
here. Let c (ρm (x)) indicate the ﬁrst column containing the highest degree entry
in ρm (x) among the columns whose next column’s entries are all in tZ[t]. Like
c(·), let c (ρm (x)) and c (x) be used interchangeably.
Algorithm 1 Finding x from ρm (x) without self-correction
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:

for i from l to 1 by -1 do
Compute jc = c (x).
if there does not exist such jc then
break
else
A[i] ← jc ; ρm (x) ← ρm (x)ρm (σjc )−1
end if
end for
z ← σA[i+1] · · · σA[l]
Return(z)

Although Algorithm 1 has an additional task to Hughes algorithm like checking whether or not k ρm (x)j+1 ∈ tZ[t] for all k = 1, . . . , m at Step 2, it is eventually more eﬃcient than his as in Table 1. In our experiment, due to this task,
Algorithm 1 stops on the way to building z usually much before wlen(z) = l
if z = x. Namely, i >> 0 at Step 9. Whereas, Hughes algorithm goes on until
wlen(z) = l even if z = x. So the time gap between these two algorithms grows
as wlen(x) increases.
Algorithm 2. Algorithm 2 is gained from comparing the experiments of Algorithm
1 and Hughes algorithm, and from Theorem 1. The motivation is as follows.

486

E. Lee and J.H. Park
Table 1. Elapsed time in recovering x from ρm (x) (unit: millisecond)

(m, wlen(x))
(a) Algorithm 1
(b) Hughes algorithm

(7, 40)
252
260

(7, 55)
324
368

(7, 70)
414
484

(10, 60)
487
515

(10, 80)
651
745

(10, 100)
790
1060

Given a positive braid x, let x1 = σc (x) , x2 = σc (xx−1 ) , . . . , xk = σc (xx−1 ···x−1
for k < wlen(x), and let x =

xx−1
1

· · · x−1
k .

1

1

k−1 )

In our experiences, if c (x ) = c(x ),
let

then c (x xk · · · xi ) does not indicate the last generator of x xk · · · xi = y for some
1 ≤ i ≤ k. For this y, if c (y) > 1 and every entry in the c (y)-th column of ρm (y)
is in tZ[t], then c (y) − 1 has a good possibility to indicate the last generator of y
from Case 3 of Theorem 1. As Table 2 shows, the success probability of Algorithm
2 is higher than Algorithm 1. However, it is slower due to this self-correction
process.

Algorithm 2 Finding x from ρm (x) with self-correction
1: Let M [0], M [1], . . . , M [l] be (m × m)-matrices such that M [i] = ρm (σA[1] · · · σA[i] )
and M [0] = ρm (em ).
2: for i from l to 1 by -1 do
3:
Compute ja = c(M [i]) and jc = c (M [i]).
4:
if there exists such jc and jc = ja then
5:
A[i] ← jc ; M [i−1] ← M [i]ρm (σA[i] )−1
6:
else
7:
if i = l then
8:
break
9:
end if
10:
if there is k(> i) such that jc = ja > 1 for M [k] and every entry of M [k]jc is in
tZ[t] then
11:
i ← k; A[i] ← A[i] − 1; M [i−1] ← M [i]ρm (σA[i] )−1
12:
else
13:
break
14:
end if
15:
end if
16: end for
17: if i = l then
18:
z ← em
19: else
20:
z ← σA[i+1] · · · σA[l]
21: end if
22: Return(z)

Cryptanalysis of the Public-Key Encryption Based on Braid Groups

487

Table 2. Success rate of recovering x from ρm (x) (unit: %)
m
wlen(x)
(a) Algorithm 1
(b) Algorithm 2

30
96
100

5
40
83
99

50
76
97

40
91
99

7
55
76
97

70
64
82

60
87
99

10
80
67
90

100
42
69

Table 3. All parameters at [11] and wlen(x) for random x
n
len(a)
len(x)
wlen(x)

4.3

50
5
3
440

70
5
3
884

90
5
3
1471

50
7
5
735

70
7
5
1487

90
7
5
2468

50
12
10
1497

70
12
10
2955

90
12
10
4924

Attack on the BPKE

Using the methods in section 4.1 and 4.2, this section attempts to attack the
BPKE for several parameters suggested by the inventors as in Table 3, where a
and x are assumed to be of inf(a) = inf(x) = 0. Since any attack on the revised
BPKE is eﬀective in the original scheme, and not vice versa, we consider the
revised one here. Each wlen(x) in the last row of Table 3 is the average length
of ten random x’s given a braid index and a canonical-length. We recall that for
a braid index n, a ∈ Bn , m = n2 , x1 , x2 ∈ Bm .
Computing ρm (x1 ) or ρm (x2 ) from (a, x1 ax2 ). From Figure 1, we know
that the probability of computing ρm (x1 ) or ρm (x2 ) from (a, x1 ax2 ) becomes
high as len(a) increases for any n. In numerous experiments, these probabilities
for the smallest len(a) (i.e., n = 50, 70, 90 and len(a) = 5) are 90% or so. And its
running time is O(m2 wlen(xi )2 ) as mentioned in section 4.1. Therefore, for all
the parameters in Table 3, either ρm (x1 ) or ρm (x2 ) is computed from (a, x1 ax2 )
with very high probability.
Recovering x from ρm (x). Here, x = x1 or x2 in the above paragraph. In
attacking the BPKE in practice, Algorithm 2 will have much higher success
probability than Algorithm 1 as in Table 2, however, it took too long time to
be used on PC for large parameters. So, we used only Algorithm 1 due to its
eﬃciency.
Table 4 shows that for the ﬁrst seven parameters in Table 3 (i.e. (n, len(x)) =
(50, 3), (70, 3), (90, 3), (50, 5), (70, 5), (90, 5), (50, 10)), x is recovered from ρm (x)
with signiﬁcant probability within dozens of minutes.
For the last two parameters, we could not recover any x from ρ35 (x) (resp.
ρ45 (x)) for 500 x’s in B35 (resp. B45 ) with len(x) = 10.
Compare the two cases: (n, len(x)) = (70, 5) and (50, 10). They have similar
word-lengths, see Table 3. The probability of recovering is 12% for the former

488

E. Lee and J.H. Park
Table 4. Recovering x from ρm (x)
len(x)
n
Success rate(%)
Elapsed time(min)

50
100
0.7

3
70
100
3.7

90
100
12.2

50
24
1

5
70
12
4.6

90
4
15

50
0.2
2.3

10
70
−
−

90
−
−

and 0.2% for the latter, see Table 4. With this observation, Theorem 1 implies
that our attack gives an interesting condition contrary to brute force attack for
the BPKE to be secure. When the word-length of private-key is ﬁxed, the braid
index should be large so that the BPKE is secure against brute force attack.
However, it should be small against our attack.
Remark. Consider the so called generalized conjugacy problem (GCP) [11]: given
(a, x−1 ax), ﬁnd x, where a ∈ Bn , x ∈ LBn . This is one of the problems on which
our attack can be mounted by restating the equations e1, e2, e3 in section 4.1
as e1 : XB1 = A1 X, e2 : XB2 = A2 , e3 : B3 = A3 X, where X = ρm (x).
Clearly, all procedures are the same as those described in section 4.1 and 4.2.
Hofheinz and Steinwandt [8] proposed an algorithm which solves the GCP more
successfully and eﬃciently than ours. Thus, it can be used to solve the DH
problem in Bn , and hence to break the original BPKE. However, since their
algorithm strongly depends on the conjugacy relation between public braids, it
cannot be applied to the revised BPKE.

5

Conclusions

The security of the revised BPKE as well as the original one is based on
the following computational problem: given (a, x1 ax2 ), ﬁnd (z1 , z2 ) such that
z1 az2 = x1 ax2 , where a ∈ Bn+ , x1 , x2 , z1 , z2 ∈ LBn+ . Using the Burau representation, this paper proposes a new method of solving this problem. For seven out
of the nine parameters suggested at [11], we demonstrated the eﬀectiveness of
this method by recovering the private-key from the public-key with signiﬁcant
probability in a reasonable time (dozens of minutes plus low degree polynomial
time).
On the other hand, we give a new requirement for secure parameters against
our attack, which more or less conﬂicts with that against brute force attack.
When we select private-key given word-length, its braid index should be large
to defeat brute force attack. However, it should be small against our attack.
Hofheinz and Steinwandt’s algorithms seem to be very eﬃcient for large parameters, whereas they cannot be applied to the revised scheme at all. Our
algorithms are eﬀective in the revised scheme as well as the original scheme,
whereas they are ineﬃcient for very large parameters like those at [3]. Therefore, the revised BPKE with suﬃciently large parameters appears to be secure
at the current state of knowledge.

Cryptanalysis of the Public-Key Encryption Based on Braid Groups

489

Acknowledgement. We would like to thank the anonymous referees for valuable comments and suggestions. And we are very grateful to Sang Geun Hahn
for motivating us to make this line of research, and Jim Hughes and Sang Jin
Lee for helpful discussions. The ﬁrst author was supported by R&D project
2002-S-073 of KISA. And the second author was supported in part by grant no.
R01-2002-000-00151-0 from the Basic Research Program of the Korea Science
and Engineering Foundation.

References
1. I. Anshel, M. Anshel, B. Fisher, and D. Goldfeld, New Key Agreement Protocols in
Braid Group Cryptography. Topics in Cryptology – CT-RSA 2001, Lecture Notes
in Computer Science 2020, Springer-Verlag, pp. 13–27, 2001.
2. I. Anshel, M. Anshel, and D. Goldfeld, An algebraic method for public-key cryptography. Mathematical Research Letters 6, pp. 287–291, 1999.
3. J.C. Cha, K.H. Ko, S.J. Lee, J.W. Han, and J.H. Cheon, An Eﬃcient Implementation of Braid Groups. Advances in Cryptology – ASIACRYPT 2001, Lecture Notes
in Computer Science 2248, Springer-Verlag, pp.144–156, 2001.
4. T.H. Cormen, C.E. Leiserson, R.L. Rivest, C. Stein, Introduction to Algorithms,
2nd Edition, The MIT Press, 2001.
5. R. Gennaro and D. Micciancio, Cryptanalysis of a pseudorandom generator based
on braid groups. Advances in Cryptology – EUROCRYPT 2002, Lecture Notes in
Computer Science 2332, Springer-Verlag, pp. 1–13, 2002.
6. S.G. Hahn, E. Lee, and J.H. Park, Complexity of the Generalized Conjugacy Problem. To appear in Discrete Applied Mathematics. Available at
http://crypt.kaist.ac.kr/pre_papers/DA5640.ps.
7. J. Hoﬀstein, J. Pipher, and J.H. Silverman, NTRU: a Ring based Publick Key
Cryptosystem. Algorithmic Number Theory Symposium – ANTS III, Lecture Notes
in Computer Science 1423, Springer-Verlag, pp. 267–288, 1999.
8. D. Hofheinz and R. Steinwandt, A Practical Attack on Some Braid Group Based
Cryptographic Primitives, Public Key Cryptography – PKC 2003, Lecture Notes
in Computer Science 2567, Springer-Verlag, pp. 187–198, 2003.
9. J. Hughes, A Linear Algebraic Attack on the AAFG1 Braid Group Cryptosystem.
7th Australasian Conference of Information Security and Privacy – ACISP 2002,
Lecture Notes in Computer Science 2384, Springer-Verlag, pp. 176–189, 2002.
10. J. Hughes and A. Tannenbaum, Length-Based Attacks for Certain Group Based
´
Encryption Rewriting Systems, Workshop SECI02 SEcurit´
e de la Communication
sur Intenet, September, 2002. Available at
http://www.network.com/hughes/SECI02.pdf.
11. K.H. Ko, S.J. Lee, J.H. Cheon, J.W. Han, J.S. Kang, and C. Park, New Publickey Cryptosystem Using Braid Groups. Advances in Cryptology – Crypto 2000 ,
Lecture Notes in Computer Science 1880, Springer-Verlag, pp. 166–183, 2000.
12. E. Lee, S.J. Lee, and S.G. Hahn, Pseudorandomness from Braid Groups. Advances in Cryptology – CRYPTO 2001, Lecture Notes in Computer Science 2139,
Springer-Verlag, pp. 486–502, 2001.
13. S. J. Lee and E. Lee, Potential Weaknesses of the Commutator Key Agreement
Protocol based on Braid Groups. Advances in Cryptology – EUROCRYPT 2002,
Lecture Notes in Computer Science 2332, Springer-Verlag, pp. 14–28, 2002.

490

E. Lee and J.H. Park

14. P.Q. Nguyen and D. Pointcheval, Analysis and Improvements of NTRU Encryption
Paddings. Advances in Cryptology – CRYPTO 2002, Lecture Notes in Computer
Science 2442, Springer-Verlag, pp. 210–215, 2002.
15. S.H. Paeng, K.C. Ha, J.H. Kim, S. Chee, and C. Park, New Public Key Cryptosystem Using Finite Non Abelian Groups. Advances in Cryptology – CRYPTO 2001,
Lecture Notes in Computer Science 2139, Springer-Verlag, pp. 470–485, 2001.
16. P.W. Shor, Polynomial-time algorithms for prime factorization and discrete logarithms on a quantum computer. SIAM Journal of Computing 26, pp. 1484–1509,
1997.
17. V. Wheatman and L. McRory, Quantum Computers: The End of Public-Key Cryptography? Gartner research note, January 2002.

