The Inductive Inverse Kinematics Algorithm to
Manipulate the Posture of an Articulated Body
Jin Ok Kim1 , Bum Ro Lee2 , Chin Hyun Chung2 , Jun Hwang3 , and
Woongjae Lee3
1

School of Information and Communication Engineering, Sungkyunkwan University,
300, Chunchun-dong, Jangan-gu, Suwon, Kyunggi-do, 440-746, KOREA
jinny@ece.skku.ac.kr
2
Department of Information and Control Engineering, Kwangwoon University,
447-1, Wolgye-dong, Nowon-gu, Seoul, 139-701, KOREA
chung@kw.ac.kr
3
Division of Information and Communication Engineering, Seoul Women’s
University, 126, Kongnung2-dong, Nowon-gu, Seoul, 139-774, KOREA
wjlee@swu.ac.kr

Abstract. Inverse kinematics is a very useful method for controlling
the posture of an articulated body. In most inverse kinematics processes,
the major matter of concern is not the posture of an articulated body
itself, but the position and direction of the end effector. In some applications such as 3D character animation, however, it is more important
to generate an overall natural posture for the character rather than to
place the end effector in the exact position. Indeed, when an animator
wants to modify the posture of a human-like 3D character with many
physical constraints, he has to undergo considerable trial-and-error to
generate a realistic posture for the character. In this paper, the Inductive Inverse Kinematics (IIK) algorithm using a Uniform Posture Map
(UPM) is proposed to control the posture of a human-like 3D character.
The proposed algorithm quantizes human behaviors without distortion
to generate a UPM, and then generates a natural posture by searching
the UPM. If necessary, the resulting posture could be compensated with
a traditional Cyclic Coordinate Descent (CCD). The proposed method
could be applied to produce 3D-character animation based on the key
frame method, 3D games and virtual reality.

1

Introduction

In traditional animation production, huge amounts of time are spent drawing
each frame manually. With the aid of computer graphics, the tedious processes
have been automated to make the overall production process more efficient. Key
frame animation is a very useful method for producing successive frames automatically in character animation. If an animator sets several key frames, the
computer system automatically generates intermediate frames among the key
frames. Therefore, it is very important for an animator to set the key frames
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 305−313, 2003.
 Springer-Verlag Berlin Heidelberg 2003

306

J.O. Kim et al.

properly [1] [2] [3]. Many animators use the inverse kinematics algorithm to control the posture of a 3D character [4] [5]. Inverse kinematics technique adopted
from robotics has the potential to relieve the animator from deciding the specification of every motion parameter within a frame. It calculates the angles of
each joint of the limbs when the end effector points to a specific place. Thus,
an animator can control the posture of the limbs by dragging the end effector.
In character animation that uses motion capture, the inverse kinematics algorithms are also available to correct the motion capture error by improving false
posture that does not observe physical laws. If an animator wants to control
the 3D character with many physical constraints, he actually has to undergo
considerable trial-and-error to generate a realistic posture. The Cyclic Coordinate Descent (CCD) algorithm [6] [7] is a heuristic inverse kinematics algorithm,
that is suitable for interactive control of an articulated body. Like other inverse
kinematics algorithms, it can generate many different resulting postures in accordance with the initial posture. However, it is very difficult to choose a feasible
posture among many resulting postures. To reform these problems, the Inductive
Inverse Kinematics (IIK) algorithm using a Uniform Posture Map (UPM) is proposed in this paper to control the posture of human-like characters. The UPM
is organized through the quantization of various postures with an unsupervised
learning algorithm, and the learning algorithm prevents the generating of invalid
output neurons. This guarantees that the postures generated by the UPM are
realistic postures which observe physical constraints. Therefore, it is possible
to get a natural posture by finding a posture whose forward kinematics point
is closest to its desired position. Because most animators are concerned about
the desired natural posture itself rather than the exact position and direction
of end effector, the IIK using UPM contributes to the production of character
animation efficiently. The IIK algorithm consists of three phases. First, we generate a UPM that reflects the motion tendency of an articulated body and find
a proper inverse kinematics solution in generating the UPM. Then, if necessary,
we compensate the solution by using the CCD algorithm. This method can be
applied to produce 3D-character animation based on the key frame method, 3D
games and virtual reality.

2
2.1

Inductive Inverse Kinematics
Inverse Kinematics Algorithm

Most industrial robotic systems have an end effector at the end of the kinematics
chains. To control the position and direction of the end effector, the controller
has to calculate the proper angles of each joint. To calculate the proper angle
set, the inverse kinematics has been researched according to various points of
view. As a natural consequence, the major matter of concern is not the posture
itself of an articulated body, but the position and direction of the end effector in most inverse kinematics processes. Indeed, inverse kinematics algorithms
using the Jacobian matrix [8] and energy constraints [9] focus on calculating

The Inductive Inverse Kinematics Algorithm

307

the position of the end effector [10] [11] [12]. In some applications, such as 3Dcharacter animation, however, it could be more important to generate a natural
and realistic posture rather than the exact position and direction of the end
effector [13] [14] [15]. Because most 3D animation producing tools adopt the
traditional inverse kinematics algorithm, when an animator wants to control the
3D character with physical constraints using tools, he actually has to undergo
considerable trial-and-error to generate a realistic posture. For these reasons, it
is necessary to develop the special inverse kinematics algorithm to control the
posture of human-like configurations. For these practical needs, the inductive
inverse kinematics algorithm using a Uniform Posture Map (UPM) is proposed,
and compared with a traditional inverse kinematics algorithm of a Cyclic Coordinate Descent (CCD).
2.2

Cyclic Coordinate Descent Algorithm

The Cyclic Coordinate Descent algorithm is an iterative heuristic search technique to minimize position and orientation errors by varying each joint variable
one at a time. In each iteration, its joint variable is modified in turn to minimize an error function. The calculation at each joint is so cheap that we found
its solution very quickly. In the progress of minimizing the error function, the
position and orientation of the end-effector are conversed to the desired value.
Algorithm 1 shows the CCD Algorithm:
Although the CCD algorithm performs satisfactorily in an interactive posture
control, its result is dependent on its initial posture. In other words, it results
in many different solutions in accordance with its initial conditions. Among
the many solutions, some solutions are suitable for application to the humanlike character animation but others are not. Thus the animator has to conduct
several experiments to get a satisfactory result.
2.3

Inductive Inverse Kinematics Algorithm

It is difficult to control the posture of a human-like articulated body using physical constraints through general inverse kinematics, because its major objective is
to locate the end effector at the desired point with the desired direction. Except
for the case of obstacle avoidance, most inverse kinematics algorithms have been
developed from this point of view. If the control target is not an industrial robotic
system but the arm or leg of a human-like 3D character, the natural posture itself could be the major purpose of the inverse kinematics. In such applications,
many animators have used the traditional inverse kinematics to generate a natural posture through trial-and-error or multiple applications to a partial joint.
Therefore it is necessary to research the inverse kinematics algorithm from a
different viewpoint than that of the robot control. In this paper, we propose
the Inductive Inverse Kinematics (IIK) algorithm using a UPM. This algorithm
consists of two phases and one optional phase. First we generated a uniform
posture map which reflected the motion tendency of a human-like articulated
body. In this phase, a pre-calculated forward kinematics table is recommended.

308

J.O. Kim et al.

Algorithm 1: Cyclic Coordinate Descent Algorithm
Data : ϕ (initial angles of joints)
Result : Ψ (the angle set that makes the end effector direct the desired
point)
begin
initialization
ψ ←− the posture vector
N ←− the number of links
ε ←− a permissible error
−−
→
−−→
1
Calculate ϑ of the angle between the vector RE and the vector RD
−
−
→
by the dot product of two vectors. RE is the distance from R to E of
−−→
the current end-effector position and RD is the distance from R to D
of the desired endpoint.
→ −−→ −−
−
→
→
−
2
Update the posture vector ψ by P = RD × RE. The vector P is used
as the pivot to rotate the N th bone.
→
−
3
Turn the bone by angle ϑ on the vector P .
4
Decrease N .
5
if N = 0 then
Go to Step 1.
else
Compute D that is the distance between the desired position and
the location of the current end effector.
if |D < ε| then
return Ψ .
else
Go to Step 1.
end

The forward kinematics table contains the forward kinematics values of each
output neuron and it contributes to the reduction of the computational cost in a
run-time. In the second phase, we searched the forward kinematics table to find
the point with the smallest distance from the desired point, and to choose the
posture vector Q associated with the point. In most cases, the posture vector Q
has a realistic nature, and its end effector is close enough to the desired point. If
an animator wants to make the current end point approach desired point more
closely, he could use the traditional CCD algorithm in an optional phase. In
the optional phase, we compensated for the solution using the CCD algorithm
with constraints according to the DOF range table. The DOF table contains the
ranges of each DOF acquired from an experiment and it constrains the degree
of rotation of joint through the traditional CCD algorithm. In each step, we
checked the calculated rotation angle ϑ whether the resulting angle beyond the
limit specified in DOF range table. If the rotation angle ϑ made the DOF exceed

The Inductive Inverse Kinematics Algorithm

309

its DOF range, we substituted ϑ with ϑ/2, and checked again. This step was
repeated until we could find ϑ observing the constraint, or the number of repetition reaching the repetitional limit. If we could find a satisfactory ϑ, we rotated
the joint by ϑ; otherwise we processed the next joint. We repeated such entire
iteration until the end effector is close enough to the desired position. Algorithm
2 describes the inductive inverse kinematics algorithm.
If the proposed algorithm is applied to control a human-like 3D character,
it is possible to get the available posture vector. In robot application, it could
be important to get an exact position and direction of the end effector in a 3D
space. On the other hand, 3D-character animation production does not require
calculations for an exact position and directions of the end effector, but the
control of the posture of the character following common behavior patterns.
Therefore it is not absolutely necessary to compensate for the resulting posture
with the optional posture-compensation process.

3

Experiment and Result

The inductive inverse kinematics algorithm consists of three separate processes:
the UPM leaning process, the posture extraction using the UPM, and the optional compensation for the posture using the traditional CCD algorithm. In the
UPM leaning process, we used the actual human motion capture data which was
acquired with the optical motion-capture system. The right leg of the applied
human character was chosen as a testing limb out of the entire skeletal hierarchy,
consisting of 3 joints. Then we set a map topology with 9 input neurons, trained
the posture map and generated 1, 608 output neurons. After generating a UPM,
we calculated the distance between the desired position and all positions of the
end effector associated with each output neuron, and selected an output neuron with a minimum distance. If the minimum distance exceeded the predefined
acceptable range, we compensate for the resulting posture using the traditional
CCD.
Figure 1 shows the variation of the right leg, while the desired point is moved
from the point (20, −60, −70) to the point (20, −45, −50). The result proves that
the right leg preserves its physical characteristics despite of the movement of the
end effector.
Figure 2 shows different results from the CCD and IIK. Figures 2(a) and
2(b) have a desired point (20, −40, 10) and 2(c) and 2(d) have a desired point
(65, −30, 0), and 2(e) and 2(f) have a desired point (−4, −50, −65). Figures 2(a),
2(c) and 2(e) are results from the CCD algorithm and 2(b), 2(d) and 2(f) are
results from the IIK algorithm. In Fig. 2, a small pink ball (upper ball) specifies
the root of the right leg and the cyan ball (bottom ball) specifies the desired
position. Three gray balls attached to the end of each links specify the joint. The
third link from its root is the foot link. Figures 2(b), 2(d) and 2(f) show that
the IIK algorithm observes the physical constraints, and preserves the nature
of posture. On the other hand, Figures 2(a), 2(c) and 2(e) show that the CCD
algorithm does not consider the nature of posture.

310

J.O. Kim et al.

Algorithm 2: Inductive Inverse Kinematics Algorithm
Data : ϕ (initial angles of joints)
Result : Ψ (the angle set that makes the end effector direct the desired
point)
begin
initialization
ψ ←− the posture vector
N ←− the number of links
C ←− a watchdog counter
ε ←− a permissible error
η ←− a permissible count
1
Generate a uniform posture map and build a DOF range table and a
forward kinematics table.
2
Search the forward kinematics table to find the point with smallest
distance from the desired point.
−−
→
−−→
3
Calculate ϑ of the angle between the vector RE and the vector RD
−
−
→
by the dot product of two vectors. RE is the distance from R to E of
−−→
the current end-effector position and RD is the distance from R to D
of the desired endpoint.
→ −−→ −
−
−
→
→
−
4
Calculate P = RD × RE. The vector P is used as the pivot to rotate
N th bone.
5
if the angle ϑ makes the DOF out of its DOF range then
ϑ = ϑ/2.
C = C + 1.
if C < η then
Go to Step 5.
else
Go to Step 6.
else
−
→
Rotate the bone by ϑ on the P .
6
7

Decrease N .
if N = 0 then
Go to Step 2.
else
Compute D that is the distance between the desired position and
the location of the current end effector.
if |D < ε| then
return Ψ .
else
Go to Step 2.
end

The Inductive Inverse Kinematics Algorithm

(a) y = −60

(b) y = −55

(c) y = −50

(d) y = −45

311

Fig. 1. Results of applying IIK according to variations of the axis y

4

Conclusion

The inverse kinematics method is used to control the posture of an articulated
body in key frame animation production, but has some common problems in
spite of its convenience. A common problem is that most inverse kinematics
algorithms have multiple solutions for a desired point. If an articulated body
has many physical constraints like the human body, the multiple solutions can
be divided into two classes: some solutions represent existing posture; others
represent unreal posture. With the traditional key-frame method, this problem is
solved by repetitious trials and errors by applying inverse kinematics algorithms
to each joint separately. However, this requires considerable cost and time. In
this paper, the inductive inverse kinematics algorithm is proposed to solve this
problem, and we prove that the inductive inverse kinematics can place the end
effector on a desired position at a specific time, and that the resulting posture

312

J.O. Kim et al.

(a) Example 1 using
CCD

(b) Example 1 using
IIK

(c) Example 2 using
CCD

(d) Example 2 using
IIK

(e) Example 3 using
CCD

(f) Example 3 using
IIK

Fig. 2. Comparison of result

The Inductive Inverse Kinematics Algorithm

313

observes physical constraints. Inductive inverse kinematics algorithm increases
efficiency to produce the desired key-frame in the animation production and
reduces production costs and time. The inductive inverse kinematics algorithm
can be applied to various fields such as 3D-character animation, 3D games, and
virtual reality.

References
1. Brand, M., Hertzmann, A.: Style machine. In: Proc. of SIGGRAPH 2000, ACM
Press (2000) 183–192
2. Grzeszczuk, R., Terzopoulos, D., Hinton, G.: Neuro animator: Fast neural emulation and control of physics-based models. In: Proc. of SIGGRAPH 98, ACM Press
(1998) 9–20
3. Martinetz, T.M., Berkovich, S.G., Schulten, K.J.: Neural-gas network for vector
quantization and its application to time-series prediction. IEEE Transactions on
Neural Networks 4 (1993) 558–568
4. Shin, H.J., Lee, J., Shin, S.Y., Gleicher, M.: Computer puppetry. ACM Transactions on Graphics 20 (2001) 67–94
5. Popovi´c, Z.: Controlling physics in realistic character animation. Communications
of the ACM 43 (2000) 50–58
6. Welman, C.: Inverse Kinematics and Geometric Constrains for Articulated Figure Manipulation. Master dissertation, Simon Fraser University (1993) Dept. of
Computer Science.
7. Watt, A., Watt, M.: Advanced Animation and Rendering Techniques: Theory and
Practice. Addition Wesley, New York (1992)
8. Whitney, D.E.: Resolve motion rate control of manipulators and human prostheses.
IEEE Transactions on Man-Machine Systems 10 (1969) 47–53
9. Badler, N.I., Zhao, J.: Real-time inverse kinematics with joint limit and spatial constraints. Technical Report TR-MS-CIS-89-09, University of Pennsylvania
(1989)
10. Zhao, J., Badler, N.I.: Inverse kinematics positioning using nonlinear programming
for highly articulated figures. ACM Transactions on Graphics 13 (1994) 313–336
11. Cohen, M.F.: Interactive spacetime control for animation. In: Proc. of SIGGRAPH
92, ACM Press (1992) 293–302
12. Wang, L.C.T., Chen, C.C.: A combined optimization method for solving the inverse
kinematics problem of mechanical manipulators. IEEE Transactions on Robotics
and Automation 7 (1991) 489–499
13. Fritzke, B.: Growing grid – a self-organizing network with constant neighborhood
range and adaptation strength. Neural Processing Letters 2 (1995) 9–13
14. Kohonen, T., Huang, T.S., Schroeder, M.R.: Self-Organizing Maps. 3 edn. Springer
Verlag (2000)
15. Baraldi, A., Alpaydin, E.: Constructive feedforward art clustering networks. IEEE
Transactions on Neural Networks 13 (2002) 662–677

