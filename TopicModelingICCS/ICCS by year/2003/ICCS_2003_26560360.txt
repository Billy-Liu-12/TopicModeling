Counting Points on Elliptic Curves over Finite
Fields of Small Characteristic in Quasi
Quadratic Time
Reynald Lercier1,2 and David Lubicz1
1

2

CELAR
Route de Laill´e
F-35570 Bruz, France
lubicz@celar.fr
Reynald.Lercier@m4x.org

Abstract. Let p be a small prime and q = pn . Let E be an elliptic
curve over Fq . We propose an algorithm which computes without any
preprocessing the j-invariant of the canonical lift of E with the cost
of O(log n) times the cost needed to compute a power of the lift of
the Frobenius. Let µ be a constant so that the product of two n-bit
length integers can be carried out in O(nµ ) bit operations, this yields
an algorithm to compute the number of points on elliptic curves which
5
reaches, at the expense of a O(n 2 ) space complexity, a theoretical time
1
complexity bound equal to O(nmax(1.19,µ)+µ+ 2 log n). When the ﬁeld has
got a Gaussian Normal Basis of small type, we obtain furthermore an
algorithm with O(log(n)n2µ ) time and O(n2 ) space complexities. From
a practical viewpoint, the corresponding algorithm is particularly well
suited for implementations. We outline this by a 100002-bit computation.
Keywords: Elliptic curves, canonical lifts, AGM.

1

Introduction

A prerequisite to the use in cryptography of elliptic curves deﬁned over a ﬁnite
ﬁeld is to count eﬃciently the number of its rational points so as to avoid weak
curves. Let p be a prime, n ∈ N∗ , q = pn and E be a given elliptic curve,
the previous problem is equivalent to computing the trace of the q-th power
Frobenius morphism Frq since E(Fq ) = 1 + q − Tr(Frq ).
The ﬁrst polynomial time algorithm to compute the trace of Frq is due to
Schoof [15]. It has been subsequently improved by Elkies and Atkin to achieve
a heuristically estimated running time of O((log q)2µ+2 ) bit operations where µ
is a constant such that the product of two n-bit length integers can be carried
out in O(nµ ) bit operations. Up to now, this is the only known algorithm which
performs well for elliptic curves deﬁned over ﬁelds of large characteristic.
Apart from these -adic algorithms, an other important family of algorithms
uses p-adic techniques. The common idea behind these algorithms is to construct
E. Biham (Ed.): EUROCRYPT 2003, LNCS 2656, pp. 360–373, 2003.
c International Association for Cryptologic Research 2003

Counting Points on Elliptic Curves over Finite Fields

361

a lift of the Frobenius morphism over a characteristic zero ﬁeld. The ﬁrst algorithm that runs faster than the SEA algorithm is due to Satoh [13]. The idea is
to compute a lift of E such that its ring of endomorphisms is the same as the
ring of E. Such a lift is called the canonical lift of E. If we ﬁx p (which shall
be small in practice), the computational time of this algorithm when n → ∞
is O(n2µ+1 ) and the memory consumption is O(n3 ). Shortly after, Vercauteren,
Preneel, Vandewalle [18] reduced the memory complexity to O(n2 ). Independently, for the characteristic two case, an algorithm with the same asymptotic
complexities was found by Mestre [10], based on the algebraic geometric mean
(AGM).
In recent papers, Satoh, Skjernaa and Taguchi [12] improved further the
1
complexity of Satoh’s algorithm to reach a O(n2µ+ 2 ) time complexity and a
O(n2 ) space complexity after a O(n3 ) bit operations precomputation. Finally,
H. Kim et al. [7] showed that if the base ﬁeld of the elliptic curve has a Gaussian
Normal Basis (which is the case for numerous ﬁelds in a cryptographic context),
1
the complexity in time of this algorithm can be reduced to O(n2µ+ 1+µ ).
Roughly, these algorithms can be split in two main phases. A ﬁrst phase
consists in computing the j-invariant of the canonical lift of the given curve.
A second phase consists in a norm computation. The main contribution of this
paper is a new way to perform the lift phase. In a more precise fashion, let
Zq be the valuation ring of the unramiﬁed extension of degree n of Zp with
p a prime. If we denote by Sm,n the complexity of the Frobenius substitution with accuracy m in Zq and Tm,n the complexity of the product of two
elements of Zq with precision m, we present an algorithm of which the complexity in time is log(n) max(Tn/2,n , Sn/2,n ). In general, one can reach Sm,n =
1
1
O(nmax(1.19,µ)+ 2 mµ ). Since a norm can be computed in O(mµ+ 2 nµ ) [14], we ob1
tain an algorithm to count points the complexity of which is O(nmax(1.19,µ)+µ+ 2
5
log n) in time without any precomputation and O(n 2 ) in space. If the base ﬁeld
admits a Gaussian Normal Basis, the complexity of the Frobenius substitution
can be reduced as low as O(nm) following [7]. We have in this case an algorithm with O(log(n)n2µ ) time complexity and O(n2 ) space complexity. We also
describe how our ideas apply to the AGM algorithm.
The paper is organized as follows. After some notations, we investigate how
generalized Artin-Schreier’s Equations can be solved (section 2) in order to describe the new algorithm in a quite general setting (section 3). Then, we explain
where the previous algorithm should be plugged for counting points on elliptic
curves and give results of experiments that we have performed (section 4).
Notations and complexity hypothesis. As in the introduction, we will assume
that the multiplication of two n-bit length integers takes O(nµ ) bit operations.
Classically, with FFT integer multiplication algorithm, µ = 1 + .
Throughout the paper, p is a ﬁxed small prime, q = pn and Fq is the ﬁnite
ﬁeld with q elements. We shall denote by Zq the valuation ring of the unramiﬁed
extension of degree n of Qp , σ will denote the Frobenius substitution of the
fraction ﬁeld of Zq considered as an extension of Qp and v will denote the non

362

R. Lercier and D. Lubicz

archimedian valuation of Zq . For each m ∈ N∗ , we have a canonical projection
πm : Zq → Zq /pm Zq and we will put π = π1 for the projection onto the ﬁnite
ﬁeld Fq .
Many of mathematical objects involved in the algorithms described in the
following can be seen as lists of elements of Zp . Formally speaking, images by πm
of these elements of Zp will be in these algorithms said to be the mathematical
objects computed “at precision m” or “at accuracy m” or “modulo pm ”. Following the conventions of [12], we will denote by Tm,n the complexity of multiplying
two elements of Zpn with accuracy m. Furthermore, in the following Sm,n will
be the complexity in time to compute at accuracy m the image of an element of
Zq by a power of the Frobenius substitution.
If E is an elliptic curve over Fq , j(E) will be its j-invariant and E ↑ the
canonical lift of E. We will assume that j(E) ∈ Fq \ Fp2 . The point at inﬁnity
of an elliptic curve will be denoted by O.

2
2.1

Arithmetic with p-adic Elements
Representing Zq

Polynomial Basis. Let L/K be a ﬁnite separated algebraic extension of a
ﬁeld K of degree n. By the primitive element theorem and the deﬁnition of an
algebraic extension, there exists non canonical isomorphisms
ϕ : L → K[t]/F (t)K[t],
with F (t) an irreducible polynomial of K[t] of degree n. Such an isomorphism
yields a basis of L/K called a polynomial basis. It provides a classical way to
work with L which consists in handling equivalence classes in the quotient of
the commutative ring K[t] by one of its maximal ideal F (t)K[t]. In the speciﬁc
setting of p-adics, each equivalence class is uniquely determined by a polynomial
of Qp [t] of degree strictly smaller than n. Consequently, any element of Zq can be
seen as a polynomial of degree smaller than n. With such a representation, adding
two elements of Zq is the same as adding two elements of Zp [t]. Multiplying two
elements of Zq is the same as multiplying two elements of Zp [t] and reducing the
result modulo F (t). This yields Tm,n = O(nµ mµ ) for multiplying two elements
at precision m.
Since there are numerous irreducible elements of degree n in Zp [t], there are
numerous ways to represent Zq . In order to have a Frobenius computation as
fast as possible, it is better in our case to use a polynomial with a small number
of terms, each term deﬁned over Fp (cf. section 2.2).
Gaussian Normal Basis. If moreover we suppose that L/K is a Galois extension and that L = K(α), then we know that (σ i (α)), 0 ≤ i ≤ n − 1 is a basis
of L/K called a normal basis. This basis is well suited to compute the action of
the Galois group of L/K. Lifting to Zq Gaussian Normal Basis deﬁned on ﬁnite
ﬁelds [9], we get the following result [7].

Counting Points on Elliptic Curves over Finite Fields

363

Proposition 1. Let q be a prime or a prime power, and n, t be positive integers
such that nt + 1 is a prime not dividing q. Let γ be a primitive (nt + 1) − th root
of unity in some extension ﬁeld of of Qp . If gcd(M t/e, n) = 1 where e denotes
the order of q modulo nt + 1, then for any primitive t − th root of unity τ in
Z/(nt + 1)Z,
t−1

α=

i

γτ ,

i=0

generates a normal basis over Qp called a Gaussian Normal Basis (GNB) of type
t. Furthermore, [Qp (α) : Qp ] = n.
H. Y. Kim et al. handled elements of Zq with such a representation by working
in the basis deﬁned by γ. This yields Tm,n = O((tnm)µ ) for multiplying two
elements at precision m.
2.2

Lifting the Frobenius

We now study the complexity of the Frobenius substitution σ k for k ∈ Z.
Polynomial Basis. Let F be the deﬁning polynomial of the extension Zq which
can be chosen to have very few non zero coeﬃcients in Fp (O(log n) terms is a
reasonable assumption in general). If t is a root of F , then we can compute σ k (t)
with precision m by the use of a Newton iteration applied to the polynomial F
k
and initial term tp . The cost of the operation is O(log2 (n)nµ mµ ) bit operations
if F has got O(log(n)) terms.
n−1
Also, we can write every elements of Zq as a sum x = i=0 xi ti with xi ∈ Zp .
We have
σ k (x) =

n−1

xi σ k (t)i , ∀k ∈ Z,

(1)

i=0

and to get the result, it remains to substitute σ k (t) as a polynomial in equation (1). This substitution can be easily done in n(nm)µ bit operations.
Vercauteren pointed out to the authors that an algorithm due to Brent and
Kung [1] can be improved to decrease signiﬁcantly this√complexity [17].
√ Brieﬂy,
Brent and Kung’s√algorithm consists in writing x as n blocks of n terms,
in precomputing n powers of σ k (t), √
in substituting in each block t by σ k (t)
and ﬁnally in obtaining the result√with n additional multiplications in Zq . Vercauteren’s idea is to replace the√ n substitutions
involved in Brent and Kung’s
√
algorithm by the √
product of a n × n matrix (obtained with the coeﬃcients
in Zp of x) by a n × n matrix (obtained
with the coeﬃcients
√
√ of the
√ powers
of σ k (t)). This can be done with n matrix products of size n × n. Coppersmith and Winograd [3] have an asymptotic time complexity for a D × D
matrix multiplication of O(D2.38 ), but with a large constant factor. In practice,
Strassen’s algorithm [16] is often used, it has a O(D2.81 ) time complexity.

364

R. Lercier and D. Lubicz

Therefore, we have from a theoretical (resp. practical) viewpoint Sm,n =
1
1
O(nmax(1.19,µ)+ 2 mµ ) (resp. O(nmax(1.4,µ)+ 2 mµ )) in this case. Furthermore we
√
3
have to store
n polynomials, so a space complexity of O(n 2 m).
Remark 1. Satoh, Skjernaa and Taguchi [12] exhibit an other way to compute σ
or σ −1 . It consists in working in a basis generated by a q − 1-th root of unity ψ
in Zq . This can be done at precision m at the expense of a precomputation with
O(n1+µ m) time complexity. Then, this yields an algorithm to compute σ or σ −1
with time complexity equal to O(nµ mµ ). However, it is not clear to the authors
how this can be extended in order to have an algorithm with complexity smaller
1
than O(nmax(1.19,µ)+ 2 mµ ) to compute σ k , k ∈ Z.

Gaussian Normal Basis. In the case of a base ﬁeld handled with a Gaussian
Normal Basis of type t as described at the end of section 2.1, computing σ k
can be done by a simple permutation of the nt components of x. This can be
easily done in Sm,n = O(nmt) bit operations. A more elaborated implementation
strategy (with indexes) yields a O(n) time complexity [7].

2.3

Computing p-adic Norms

Polynomial Basis. Satoh outlines that when ordp (a − 1) >
formula can be used

1
p−1 ,

the following

NZq /Zp (a) = exp(TrZq /Zp (log a)).
1

This yields a O(nµ mµ+ 2 ) time complexity with space equal to O(nm) with the
clever algorithm described in [12].
In the more general case a ∈ Z×
q and p odd, one can compute the norm of an
element by
NZq /Zp (a) = T(NFq /Fp (π(a))NZq /Zp (T(π(a)−1 )a),
where T is the Teichm¨
uller lifting map [14]. The complexity of this method is
the same as the previous one, except when m is much larger than n. In this last
case, the complexity of Satoh’s approach is O(nµ+1 mµ ).
In fact, we can use the algorithm NewtonLift (cf. section 3) with a polynomial
φ given as φ(x, y) = xp − y, to compute the Teichm¨
uller lifting map too.
Gaussian Normal Basis. In a Gaussian Normal Basis of type t, H. Y. Kim
et al. described an algorithm of the type “divide and conquer” in order to compute the norm of an element of Zq with precision m. This algorithm has got a
O((log n)nµ mµ ) time complexity and a O(nµ mµ ) space complexity.

Counting Points on Elliptic Curves over Finite Fields

2.4

365

Computing Roots of Generalized Artin-Schreier’s Equations

We recall that if Fq is a ﬁeld of characteristic p, an Artin-Schreier’s equation is
an equation of the form xp − x + β = 0 with β ∈ Fq . Such an equation is known
to have a solution provided that TrFq /Fp (β) = 0. In an slightly diﬀerent setting,
we will say that an equation is a generalized Artin-Schreier’s equation if it can
be written as
σ(x) + ax + b = 0, with a, b ∈ Zq .

(2)

In particular, π applied to equation (2) gives all classical Artin-Schreier’s equations. We present here an algorithm to ﬁnd a root of such an equation.
Algorithm 2.1 ArtinSchreierRoot
Algorithm to solve generalized Artin-Schreier’s equation.
Input: a and b in Zq /pm Zq , m and ν in N.
Output: A and B such that a solution of σ(x) = ax + b mod pm satisﬁes
σ ν (x) = σ ν (A)x + σ ν (B) mod pm .
Step 1. if ν = 1 then return σ n−1 (a) mod pm , σ n−1 (b) mod pm ;
Step 2. A, B := ArtinSchreierRoot(a, b, m, ν2 );
ν

ν

Step 3. A, B := Aσ n− 2 (A) mod pm , Aσ n− 2 (B) + B mod pm ;
Step 4. if ν mod 2 = 1 then A, B := Aσ n−ν (a) mod pm , Aσ n−ν (b) + B mod pm ;
Step 5. return A, B;

Correctness. We now explain that the algorithm returns the right result. By
an easy recurrence with starting point σ(x) = ax + b, we can write that for all
k ∈ N, σ k (x) ≡ ak x + bk mod pm . We know that σ n (x) = x, which means that
(1 − an )x = bn . To compute an and bn , algorithm 2.1 is an adaptation of the
classical “square and multiply” algorithm (used for exponentiations) based on
the following composition formula,
∀k, k ∈ Z2 , σ k+k (x) = σ k (ak )ak x + σ k (ak )bk + σ k (bk ).
Complexity. The algorithm goes through step 3 or step 4 a number of times
which is O(log n) and these steps are performed in max(Sm,n , Tm,n ). Therefore,
the complexity in time, of this algorithm is O(log n) max(Sm,n , Tm,n ). We have
showed previously that the space complexity of Sm,n is O(n2 ) if the base ﬁeld
5
admits a Gaussian Normal Basis and O(n 2 ) otherwise.
Remark 2. If the valuation of a is greater than zero, it should be noted that
some implementation tricks can be used to improve the constant term of the
complexity of the algorithm ArtinSchreierRoot.
– First, if we put (A, B) = ArtinSchreierRoot(a, b, m, ν), we have v(A) ≥ ν.
As a consequence, if m ≤ ν, then A = 0 mod pm .

366

R. Lercier and D. Lubicz

– Second, if we put κ = ν2 in the expression Aσ n−κ (A) mod pm (resp.
Aσ n−κ (B) + B) computed in step 3, we have that v(Aσ n−κ (A)) ≥ 2κ (resp.
v(Aσ n−κ (B)) ≥ κ) and so this computation has to be done only to precision
m − 2κ (resp. m − κ). Similar optimizations hold for step 4.
Remark 3. Any fast exponentiating algorithm based on “addition-subtraction”
chains can be adapted in this case, this yields in practice an easy speeding up.
Remark 4. Algorithm 2.1 is obviously still valid if we replace σ by any element
Σ of Gal(L/Qp ) with L the fraction ﬁeld of Zq . In particular, it is still true for
σ −1 .

3

Lifting Algorithms

In this section, we describe an algorithm which solves a general problem involved
in the counting points algorithms considered in section 4. This problem consists,
for a ﬁxed m ∈ N, in ﬁnding a root in Zq at precision m of an equation of the
form
φ(x, Σ(x)) = 0,

(3)

with φ a polynomial with coeﬃcients in Zq when a solution x0 at low precision
of such an equation is already known.
More speciﬁcally, Satoh et al. underlined the importance in the so-called
SST algorithm to solve this problem when φ is equal to Φp , the p-th modular
polynomial (to compute the j-invariant of the canonical lift) [12], or equal to
xp − y (for computing the Teichm¨
uller lift) [14]. Since the idea behind the SST
algorithm is to use the Taylor expansion of φ to increment by one the precision
of the root of equation (3) computed at the intermediate steps in the algorithm,
it is not diﬃcult to generalize it to a more general φ. This is what was done for
instance in [5] with a polynomial φ related with the AGM method. We give the
corresponding algorithm for the general case in section 3.1, before comparing it
with a new approach developed in section 3.2.
3.1

SST Algorithm

This algorithm can be seen as an application of the following proposition.
Proposition 2. Let L be a ﬁeld complete with respect to a non archimedian
valuation v and R be its valuation ring. Let φ(x, y) ∈ R[x, y] be a polynomial in
two variables, Σ a valuation preserving morphism of R and α0 ∈ R such that
v(φ(α0 , Σ(α0 ))) > 2v(

∂φ
(α0 , Σ(α0 )))
∂x

and
v(

∂φ
∂φ
(α0 , Σ(α0 ))) > v( (α0 , Σ(α0 )))
∂y
∂x

if we deﬁne the sequence αi by the recurrence relation

Counting Points on Elliptic Curves over Finite Fields

αi+1 = αi −

367

φ(αi , Σ(αi ))
∂φ
∂x (αi , Σ(αi ))

then the sequence (αi , Σ(αi )) converges toward a root of φ in R.
Proof. For convenience, we put f (αi ) = φ(αi , Σ(αi )), fx (αi ) = ∂x φ(αi , Σ(αi ))
and fy (αi ) = ∂y (αi , Σ(αi )). We show inductively that v(αi ) ≥ 0 and that
v(f (αi )/fx2 (αi )) > 0. In the course of the proof, we will show that v(f (αi+1 )) >
v(f (αi )), which clearly implies the result.
1. As v(f (αi )/fx2 (αi )) > 0, we have by hypothesis
v(αi+1 − αi ) = v(f (αi )/fx (αi )) > v(fx (αi )) ≥ 0

(4)

and, as v(αi ) ≥ 0, we obtain that v(αi+1 ) ≥ 0.
2. By a Taylor expansion, we have
f (αi+1 ) = f (αi ) − fx (αi )

f (αi )
− fy (αi )Σ
fx (αi )

f (αi )
fx (αi )

+ Λ(αi )

with
v(Λ(αi )) ≥ v

f 2 (αi )
fx2 (αi )

and v(fy (αi )Σ

f (αi )
)=v
fx (αi )

fy (αi )
fx (αi )

v(f (αi )).

As a consequence, we obtain using the hypothesis v(fy (αi )/fx (αi )) > 0, that
v(f (αi+1 )) ≥ min(v

f (αi )
fx2 (αi )

,v

fy (αi )
)v(f (αi )) > v(f (αi )).
fx (αi )

(5)

By induction hypothesis, we have that v(f (αi+1 ) − f (αi )) = v(f (αi )/
fx (αi )) ≥ v(fx (αi )) and so, by a Taylor expansion of fx (αi+1 ) and fy (αi+1 )
combined with equation (4), we get that v(fx (αi+1 )) = v(fx (αi )) and
v(fy (αi+1 )) ≥ v(fy (αi )) > v(fx (αi+1 )). As a consequence of equation (5),
we obtain
v(f (αi+1 )/fx2 (αi+1 )) > v(f (αi )/fx2 (αi )).
From equation (4), this yields v(αi+2 − αi+1 ) > v(αi+1 − αi ).
Using proposition 2, SST algorithms can be seen as an application of algorithm 3.1.
Algorithm 3.1 SSTLift
Algorithm to compute a root of φ(x, Σ(x)) mod pm , knowing a solution x0
modulo p2k+1 where k = v(∂φ/∂x(x0 , Σ(x0 ))).
Input: x0 ∈ Zq /p2k+1 Zq , m ∈ N.
Output: x a solution of φ(x, Σ(x)) mod pm .
Step 1. w := mµ/(µ+1) ; d any lift of ∂x φ(x0 , Σ(x0 )) to Zq /pw+k Zq ;
Step 2. x any lift of x0 to Zq /pw+k Zq

368
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step
Step

R. Lercier and D. Lubicz
3. for (i := k + 1; i < w + k; i := i + 1) {
4.
y := Σ(x);
5.
x := x − φ(x, y)/d;
6. }
7. y := Σ(x) mod pw+k ;
8. Dx := ∂x φ(x, y) mod pw+k ; Dy := ∂y φ(x, y) mod pw+k ;
9. for (j := 1; jw + k < m; j := j + 1){
10.
Lift x to Zq /p(j+1)w+k Zq ;
11.
y := Σ(x) mod p(j+1)w+k ;
12.
V := φ(x, y) mod p(j+1)w+k ;
13.
for (i := 0; i < w; i := i + 1) {
14.
∆x = −p−(jw+i) V /d;
15.
∆y = Σ(∆x ) mod pw−i+k ;
16.
x := x + pjw+i ∆x mod p(j+1)w+k ;
17.
V := V + pjw+i (Dx ∆x + Dy ∆y ) mod p(j+1)w+k ;
18.
}
19. }
20. return x;

In algorithm 3.1, we can take for Σ either the Frobenius or the inverse Frobenius substitution. If we replace φ in (3.1) by φ(x, y) = Φp (y, x) the p-th modular
polynomial (resp. by φ(x, y) = y p − x) we get the algorithm 2.1 of [12] (resp.
algorithm 3 of [14]).
Complexity. We refer to the article [12] for a detailed complexity analysis of the
algorithm. Brieﬂy, the complexity depends on the time spent in the outer and
inner loops which begin respectively at step 9 and 13. Due to the fact to the
outer loop is executed at most m/w times and the inner loop is performed at
most m times, it is easy to deduce that the overall complexity of the algorithm
is
O(max((m/w) max(Sw,n , Tw,n ),

T(j+1)w,n )).
1≤j≤m/(w+1)

Since in Satoh’s case, Sm,n = Tm,n = O(nµ mµ ), we recover the O(max(m(nw)µ ,
nµ mµ+1 w−1 )) complexity proved in [12].
Remark 5. It should be noted that proposition 2 yields a linear convergence.
3.2

Extending Newton’s Algorithm

We now present an enhanced version of the preceding algorithm in the case of the
morphism Σ is a power of σ. The main idea behind our approach is to slightly
modify the well-known Newton’s algorithm for computing roots of univariate
polynomials over Zq in order to recover a quadratic convergence.

Counting Points on Elliptic Curves over Finite Fields

369

Speciﬁcally, let φ ∈ Zp [x, y] be a bivariate polynomial with coeﬃcients in
Zq . Let x0 ∈ Zq be a zero of the equation φ(x, Σ(x)) = 0 mod pw , w ∈ N. We
suppose moreover that we have
v(

∂φ
∂φ
(x0 , Σ(x0 ))) ≥ v( (x0 , Σ(x0 )))
∂x
∂y

and
v(φ(x0 , Σ(x0 ))) > v(

∂φ
∂y

2

(x0 , Σ(x0 ))).

The only diﬃculty against the univariate polynomial case is the composition with
Σ. But, since such morphisms preserve valuations, proving a result in this case
is very close to the proof for the classical Newton convergence [8, pages 493-494].
We omit it here and prefer to give directly the corresponding algorithm.
Algorithm 3.2 NewtonLift
Algorithm to compute a root of φ(x, Σ(x)) mod pm , knowing a solution x0
modulo p2k+1 where k = v(∂φ/∂y(x0 , Σ(x0 ))).
Input: x0 ∈ Zq /p2k+1 Zq , m ∈ N.
Output: x a solution of φ(x, Σ(x)) mod pm .
Step
Step
Step
Step
Step
Step
Step
Step

1.
2.
3.
4.
5.
6.
7.
8.

if m ≤ 2k + 1 then return x0 ;
+ k;
w := m
2
x := NewtonLift(x0 , w);
Lift x to Zq /pm Zq ; y := Σ(x) mod pm ;
∆x := ∂x φ(x, y) mod pw−k ; ∆y := ∂y φ(x, y) mod pw−k ;
V := φ(x, y) mod pm ;
a, b := ArtinSchreierRoot(−V /(pw−k ∆y ), −∆x /∆y , w − k, n);
return x + pw−k (1 − a)−1 b;

Correctness. We assume inductively that we know a root x0 of φ(x, Σ(x)) at
precision w = m
2 + k and we explain why the algorithm returns a root of the
same equation at precision m.
If we put f (x) = φ(x, Σ(x)), we have, once x0 lifted to precision 2w − 2k,
∀δ ∈ Zq , f (x0 + pw−k δ) − f (x0 ) ≡ pw−k (δ∆x + Σ(δ)∆y ) mod p2w−2k ,
with ∆x ≡ ∂x φ(x0 , Σ(x0 )) mod pw−k and ∆y ≡ ∂y φ(x0 , Σ(x0 )) mod pw−k . We
want to ﬁnd δ at precision w − k such that f (x0 + pw−k δ) ≡ 0 mod p2w−2k ,
which we can restate in the following form,
−

f (x0 )
≡ δ∆x + Σ(δ)∆y mod pw−k .
pw−k

(6)

Rewriting equation (6) as Σ(δ) ≡ aδ + b mod pw−k , with a = −∆x /∆y and
b = −f (x0 )/pw−k ∆y , we recognize an Artin-Schreier’s equation since a and b
are in Zq . Calling algorithm 2.1 for Σ with a and b, yields a solution δ at precision
w − k and x + pw−k δ is a root of f with precision at least equal to m.

370

R. Lercier and D. Lubicz

Complexity. The algorithm calls itself recursively O(log n) times and the step
with the largest cost is the call to ArtinSchreierRoot algorithm. The complexity of this call is O(log n) max(Sw,n , Tw,n ) where w is nearly multiplied
by two at each recursive call. Therefore, the complexity of this algorithm is
1
O(log n max(Sm,n , Tm,n )). In general, this yields a O(mµ nmax(1.19,µ)+ 2 log n)
3
time complexity and a O(mn 2 ) space complexity (cf. section 2)). Over Gaussian
Normal Basis, this yields a O(log(n)nµ mµ ) time complexity and a O(nm) space
complexity.

4

Application to Point Counting

We now illustrate how we can use algorithm 3.2 to compute the canonical lift of
an elliptic curve. We apply these ideas to the Satoh’s and Mestre’s algorithms.
4.1

Satoh’s Algorithm

We quickly recall Satoh’s algorithm [14] to count points on elliptic curves E
deﬁned over Fq . For this, if f is an isogeny between two elliptic curves E1 and E2
and τi = −Xi /Yi a local parameter of Ei around Oi then we have an expansion
of f around O as f ∗ (τ2 ) = c1 τ1 + c2 τ2 + . . . and we put lc(f ) = c1 the leading
coeﬃcient of this expansion.
(i)
Let E (i) be the image of the ith iterate of the little Frobenius on E and Vp
be the dual of the little Frobenius between E (i−1) and E (i) , Satoh’s approach is
as follows.
√
1. Let m be the smallest integer such that pm > 4 q.
2. Compute j(E (i−1)↑ ) and j(E (i)↑ ) mod pm+O(1) for some integer i.
(i)↑
3. Compute c = lc(Vp ).
4. Compute t = NZq /Zp (c), the sign of the square root can be determined
following [14].
√
5. Return t ∈ Z satisfying t ≡ t mod pm and |t| < 2 q.
For a detailed analysis of each of these steps we refer to [14].
We emphasize here that step 2 may be improved by the use of the procedure
NewtonLift applied to
φ(x, y) = Φp (x, y),
since, by Kroneker’s relation φp (x, y) = (xp − y)(y p − x) mod p, we have
∂Φp
∂Φp
(x, σ(x)) = 0 mod p.
(x, σ(x)) = 0 mod p and
∂x
∂y
Finally, the time complexity of this algorithm is trivially the same as that
of the algorithm NewtonLift (cf. section 3.2) since the time needed to compute
NZq /Zp at step 4 is slightly smaller (cf. section 2.3).

Counting Points on Elliptic Curves over Finite Fields

4.2

371

Mestre’s Algorithm

In [10], Mestre describes a very eﬃcient algorithm to count points on elliptic
curves deﬁned over F2n . It makes use of the algebraic-geometric mean (AGM).
We ﬁrst describe the one variable version of this algorithm since this version
of Mestre’s algorithm is usually what is used in practice (cf. [5]). Let E be an
elliptic curve deﬁned over the ﬁeld F2n by an equation y 2 + xy = x3 + a6 . We
can consider the sequence of elements of Z2n deﬁned by
αn+1 =

1 + αn
√ ,
2 αn

(7)

with ﬁrst term equal
√ to α0 = 1 + 8a6 ∈ Z2n . The square root in equation (7) is
chosen such that 1 + 8t = 1 + 4t with t, t ∈ Z2n . Then it turns out that
Tr(Frq ) = NZ2n /Z2

2α n/2 +3
1 + α n/2 +3

.

Another important fact is that αn+1
σ(αn ) mod 2n+3 . Therefore, as in
Satoh’s algorithm, the AGM method can be clearly divided in two parts. The ﬁrst
part is intended to compute a root of 4xσ(x)2 = (1 + x)2 at precision n/2 + 3.
The second part yields the trace of the Frobenius with a norm computation.
The ﬁrst part can be solved with algorithm 3.1 (cf. [5]). But it may be
improved by the use of the procedure NewtonLift applied to
φ(x, y) = 4xy 2 − (1 + x)2 ,
∂φ
since v( ∂φ
∂x (α0 , σ(α0 ))) ≥ v( ∂y (α0 , σ(α0 ))).
As in section 4.1, the time complexity of this algorithm is trivially the same
as that of the algorithm NewtonLift (cf. section 3.2).

4.3

Results

We implemented the application to AGM of the NewtonLift algorithm described
in section 4.2. This was done with a ﬁnite ﬁeld C library called ZEN [2] built
over GMP [4]. We measured the time needed to compute the number of points
on elliptic curves over F2n with n slightly larger than 1000, 2000, 4000, 8000,
16000, 32000 and 65000 on a 731 MHz DEC alpha computer. We give these
timings in Table 1 and compare them with timings for ﬁnite ﬁelds of similar sizes
measured with our implementation of the original AGM method as published
by Mestre [10].
Let us note that at the time of writing the largest such computation ever
done is a 130020-bit computation by Harley [6].
Remark 6. We designed our implementation for ﬁnite ﬁelds with a Gaussian
Normal Basis of type 1 in order to experimentally check the quadratic behavior of the algorithm. Therefore, the exponents n used for our experiments are
even. Finite ﬁelds with prime exponents are usually preferred for cryptographic

372

R. Lercier and D. Lubicz
Table 1. Timings for counting points on elliptic curves deﬁned over F2n .
n
1000
1018
2003
2052
4001
4098
8009
8218
16420
32770
65538
100002

NewtonAGM, GNB type 1
Original AGM
Lift
Norm
Total
Lift
Cycle
Total
1mn 6s 4mn 22s 5mn 28s
2.4s
1.6s
4s
16mn 28s 57mn 49s 1h 13mn
10.1s
7.2s
17.3s
2h 3mn 8h 56mn 10h 59mn
1mn
45s
1mn 45s
23h 5mn 4d 2h
5d 1h
6mn 30s 4mn 30s 11mn
34mn
23mn
57mn
3h 17mn 2h 18mn 5h 35mn
15h 45mn 13h 20mn 1d 5h
1d 18h
1d 16h 3d 10h
-

purposes. They can be handled through Gaussian Normal of larger types. For
instance, since multiplying two elements over a GNB of type 2 can be done in
two times the time needed to multiply two elements over a GNB of type 1 for
ﬁnite ﬁelds of similar size [7], it is not diﬃcult to derive timings of such an implementation for counting points over GNB of type 2. Similar arguments hold
for larger types.

5

Conclusion

We have described the ﬁrst point counting algorithm the time complexity of
which is as a function of n equal to O(n2+ ). We reach this complexity for ﬁnite
ﬁelds with Gaussian Normal Basis and this seems to be what we can reasonably
hope for such a problem. More generally, thanks to Vercauteren’s ideas, this algorithm achieves without any precomputation a time complexity of O(n2.69+ log n)
bit operations with a space consumption of O(n2.5 ). Furthermore, it should be
noted from a practical viewpoint that implementing this algorithm is probably
easier than implementing previous known algorithms.
In a forthcoming paper, we deal with a higher dimensional version of this
algorithm in order to generalize AGM algorithm to the higher genus case (we
refer to [11]). As a consequence, it is expected that the conclusions related to
the complexity of elliptic curve point counting algorithms should apply to some
higher genus cases.
Acknowledgments. The authors would like to thank Frederik Vercauteren for
its valuable comments about the computation of σ k and Pierrick Gaudry for its
remarks on preliminary versions of this paper.

Counting Points on Elliptic Curves over Finite Fields

373

References
1. R. P. Brent and H. T. Kung. Fast algorithms for manipulating formal power series.
Journal of the ACM, 25:581–595, 1978.
2. F. Chabaud and R. Lercier. ZEN, User Manual. Available at
http://www.di.ens.fr/˜zen/.
3. D. Coppersmith and S. Winograd. Matrix multiplication via arithmetic progressions. In Proceedings of the Nineteenth Annual ACM Symposium on Theory of
Computing, May 1987. New York City.
4. Free Software Foundation. GNU MP Library. Available at
http://www.swox.com/gmp/.
5. Pierrick Gaudry. A Comparison and a Combination of SST and AGM Algorithms for Counting Points of Elliptic Curves in Characteristic 2. In Advances
in Cryptology—ASIACRYPT 2002, volume 2501 of Lecture Notes in Computer
Science, pages 311–327. Springer-Verlag, December 2002.
6. Robert Harley. Asymptotically optimal p-adic point-counting. Email at the Number Theory List, December 2002.
7. Hae Young Kim, Jung Youl Park, Jung Hee Cheon, Je Hong Park, Jae Heon Kim,
and Sang Geun Hahn. Fast Elliptic Curve Point Counting Using Gaussian Normal
Basis. In Claus Fieker and David R. Kohel, editors, Algorithmic Number Theory,
5th International Symposium, ANTS-V, volume 2369 of Lecture Notes in Computer
Science, pages 292–307. Springer-Verlag, July 2002.
8. Serge Lang. Algebra (3rd revised edition), volume 211 of Graduate Texts in Mathematics. Springer-Verlag, 2002.
9. Alfred J. Menezes, Ian F. Blake, XuHong Gao, Ronald C. Mullin, Scott A. Vanstone, and Tomik Yaghoobian. Applications of ﬁnite ﬁelds. The Kluwer International Series in Engineering and Computer Science. Kluwer Academic Publishers,
1993.
10. Jean-Fran¸cois Mestre. Lettre `
a Gaudry et Harley. Available at
http://www.math.jussieu.fr/˜mestre, 2001.
11. Jean-Fran¸cois Mestre. Notes of a talk given at the seminar of cryptography of
Rennes. Available at http://www.maths.univ-rennes1.fr/crypto/, 2002.
12. T. Satoh, B. Skjernaa, and Y. Taguchi. Fast Computation of Canonical Lifts of
Elliptic Curves and its Application to Point Counting, August 2001. Preprint.
13. Takakazu Satoh. The canonical lift of an ordinary elliptic curve over a ﬁnite ﬁeld
and its point counting. J. Ramanujan Math. Soc., 15(4):247–270, 2000.
14. Takakazu Satoh. On p-adic Point Counting Algorithms for Elliptic Curves over
Finite Fields. In Claus Fieker and David R. Kohel, editors, Algorithmic Number Theory, 5th International Symposium, ANTS-V, pages 43–66. Springer-Verlag,
July 2002.
15. R. Schoof. Counting points on elliptic curves over ﬁnite ﬁelds. J. Th´eorie des
nombres de Bordeaux, 7:483–494, 1998.
16. V. Strassen. Gaussian Elimination is Not Optimal. Numerische Mathematik,
13:354–356, 1969.
17. F. Vercauteren. On AGM. Personal communication, November 2002.
18. Frederik Vercauteren, Bart Preneel, and Joos Vandewalle. A Memory Eﬃcient Version of Satoh’s Algorithm. In Advances in Cryptology—EUROCRYPT 2001 (Innsbruck), volume 2045 of Lecture Notes in Computer Science, pages 1–13. SpringerVerlag, 2001.

