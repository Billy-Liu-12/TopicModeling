Real-Time Data Management for Network
Information System
Dong Chun Lee
Dept. of Computer Science Howon Univ., South Korea
727, Wolha-Ri, Impi, KunSan, ChonBuk, Korea
ldch@sunny.howon.ac.kr

Abstract. Network system, such as switching system, are operated in
the restricted conditions that the suggested events must ﬁnish in the
time-constraints. In this paper, we propose the data model which is suitable to the unstructured multi-dataset environment and the algorithm to
clarify the structure of our model. The proposed model supports the fast
data access for unstructured dataset and enables users to easily retrieve
data needed at the execution.

1

Introduction

The complexity of data in the network system is not so serious that the current network environment can be represented as the structured dataset and can
be used enough to retrieve information just like Data Lookup. This characteristic in the communication application doesn’t have any trouble ensuring the
time-constraint process of data [1]. The recent network system has been through
with various changes and the network environment should be connected with
the plenty of services. The previous structured dataset saving and managing
can come with limits of processing time and expansion. And with the increasing
requirement of the communication common carrier for the software of network
system that is compatible with open system, the deﬁnition and management
method of communication data that have more complex and comprehensive semantic than the previous models are needed. In addition to it, the data throughput of the service systems has been sharply increasing in proportion to the data
transmitting speed that is also getting faster result from the vitalized network
services on the high-speed network. Consequently, faster data processing for
the plenty of the data of complicated structure are imperative [2][3]. Generally
database system is used as a way of data management. However, data processing system based on the disk is excessively big size and has disappointing data
processing performance. It is not suitable in the aspect of data processing speed
and system adaptation required in the communication environment. Thus, every
dataset to be operated is made resident in the main memory in order to oﬀer
very fast and uniform accessing time in the time-constraint system environment
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2660, pp. 614–625, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Real-Time Data Management for Network Information System

615

such as switching system and it is made to access with consistency and high
speed [1].
This paper proposes the data model that can easily conﬁguration the unstructured scheme. This model makes each data system have the unique Record
Identiﬁer (RID) in it, and has the complex relations and constraints that are
required in the communication environment, represented consistently and shows
the way of ensuring rapid processing performance through the navigation among
the Record Identiﬁers (RID) without any physical reconstruction of the datasets
at the request of multiple data.

2

Related Work

DREAM-S [1] has been used to manage call process and subscribers’ data in
the network system for the last years and it manages the information of the
real world as a type of structured table. In the related data of routing process
in switching center, dataset D-RT-RESOURCE-INF saves and manages the information about the root resource and D-SRT-RESOURCE-INF maintains the
physical location information in the system that the sub-root belongs to. Meantime, each dataset is managed independently without any data model to clarify
the correlations and constraints depending on designed semantic among datasets.
The dataset, which has this type of construction, makes its structure and process simplicity. But it has a lot of restraints to solve the problems because it
cannot read the semantic among the datasets due to the absence of the model.
Unfortunately, the guarantee of the constraints makes the application systems
more complex and it cause degrade of whole performance owing to the frequent
access to the data processing system.
And also, when it is required to retrieve the information about the multiple
datasets rather than to search a dataset as a simple lookup type, the Cursor
is deﬁnitely needed as a tool that can locate the reconstructed dataset in the
system, and support the consecutive access to the data [6]. The Cursor is a kind
of structure used to access orderly to the data that are correspondent to current
query context. The reason the Cursor is needed in the data processing system is
that database system deals with the group of data that is not restrained in the
size of them, and the general programming language doesn’t have any speciﬁc
means to deal with data. Since the previous Cursor saves the result data from
the data service separately in the main memory as much as the size of it in order
to allow the access orderly to the application program, it produces the problem
of wasting the saving space in the main memory and it needs additional time
and algorithm to construct extra system for the access to the pertinent saving
space. Currently the structured scheme based on database set presents various
solutions, but the structured scheme, that can store other diﬀerent datasets in
it, is very ineﬃcient and complex in processing.

616

3

D.C. Lee

Data Model of the Unstructured Dataset

We describe the functional things provided by the system. That is, it describes
more details about the composition of basic Dataset to operate a Cursor and
the processes to recompose the related data through the Cursor. Dataset is the
group of data with same quality or attribution. The data has inherently and
means the data collection in the same type. Each data is uniqueness in the
system, it was distinguish by the identiﬁer with the physical location (that is,
RID). The relations of the data are deﬁned by regarding the related Identiﬁer
in the data as the attributions. For example, in the Figure 1, if there are any
relations, Rc1-c2, between Dataset C1 and Dataset C2, then related two data,
oc1∈C1, oc2∈C2, have each attribution as the identiﬁer oc2, oc1. And REF,
SET and Inverse are deﬁned to clarify the relations and the multiplicity of the
relations.
Create Dataset C1 (Attrel Rc1 c2
Create Dataset C2(Rc2 c1
REF C2)
SET inverse C1, Rc1 c2, Attrc2)
Fig. 1. Deﬁnition of the relationship in Dataset

In the above example, oc1 is unique relation with data in C2, on the other
hand, oc2 can show the relation with oc1 as well as several data in C1 since the
Rc2 c1 is declared by SET. Furthermore, Inverse means that it has always the
both directions in the relations used Rc1 2 and Rc2 1 between C1 and C2,
which C2 can be referred in C1 by using Rc1 2 and C1 can be also referred
by using Rc2 c1 in reverse, and it means the guarantee about Referential
Integrity between the two data. The clariﬁcation of the relation is made when
the data has its identiﬁer. For example, getting oc2 in the related C2 data
speciﬁes Rc1-c2 in C1 data. The speciﬁcation of oc1 and oc2 into Rc1 2 means
that it’s possible to access to oc2 data through oc2.Rc1 2, and, in reverse, it’s
also possible to access oc1 data through oc2.Rc2 c1. The previously deﬁned
relationship between Datasets are shown as the starting root with basic dataset
when it is used in the query to retrieve the data from the system, the retrieval
of the data was complete by using the identiﬁer which the attribution has in the
speciﬁed path.
Figure 2 shows the query about the Join of C1 and C2 with the application
of the above. As it is seen in the query, the reference to the other data through
Identiﬁer Rc1 c2 or Rc2 c1’s value means the Join, therefore the path operator
(”->”) is used to refer to other data through Identiﬁer. Path operator is used
when it designates the other related data, it can be iterative joined with another
data through the identiﬁer in the designated data.

Real-Time Data Management for Network Information System

617

Retrieve Attrel, Rc1 c2-¿Attrc2 from C1
Retrieve Rc2 c1− > Attrc1, Attrc2 from C2
Fig. 2. Deﬁnition of the relationship in Dataset

In case that the Join is needed, it can be accessed to other Dataset, C2 or
C1 directly by using Rc1 c2 or Rc2 c1of C2 from C1, and it’s possible to
access without creating temporary Dataset so that it makes the system search
faster than the previous methods [4][5].
Furthermore, in the communication environment, operating to retrieve the minor
data which is identical to the condition is more often required than the operation
to retrieve the entire Dataset after the Join, which often reconﬁguration of the
Dataset have many eﬀects on the data processing performance in Joining [1].
And it is mainly described the navigation algorithm necessary for Join between
related data with the identiﬁer to express the relationship in the data model and
the structure of the algorithm.

4

Navigation-Based Dataset Cursor in Implementation

Cursor is the structure to be used for the sequential access operation in the data
of successful Query. While the previous cursor provides consecutive access to the
recomposed data, the proposed method using the RID is described more ﬂexible
and eﬀective cursor by direct access to the data through the navigation with no
physical reconﬁguration of the data.
4.1

Structure of the Cursor

The Cursor can be described with following four elements. At ﬁrst, D is the
dataset that has the information to be retrieved, and A is the group of data RID
that are objects of search in D. The group of RID is distinguished by the path,
and refers to the group of data that becomes the object of operation at the same
time as the operation. C is the conditions to be met in order to return to the
result, and consists of attribute, operator, and value. S indicates the attribution
information retrieved when it meets the condition; Cursor Csr = (D,A,C,S)
where D is Set of dataset, A is Set of data RID (=Alias) of the searching object
in D, C is Set of condition expression and S is Set of result attribute.
For instance, the Cursor c’ ∈ Csr that consists of ”retrieve Rcl c2->Attrrc
2 from C1 where Attre1=10” in the deﬁnition of ﬁgure 2 can be expressed
({C1, C2}, {{oc1}, {oc1.Pc1 c2}}, {Attrc1=10}, {Rc1 c2->Attrc2}). The oc1 is
the RID referring to the data in the C1, and oc1.Rc1 c2 is the RID referring to
C2 related to oc1. Therefore, oc1.Rc1 c2->Attrc2 refers to speciﬁc character of

618

D.C. Lee

C2 data. To process the query, the Cursor is composed through the analyzing
process of the query, and the result is retrieved through the navigator. The tree
that uses the basic dataset as a root is built up when referring to other dataset
through the relations like REF and SET from the basic dataset in the query,
namely when the path is speciﬁed.

C1

C2
Attrc1

Rc1_c3

Rc1_c2

Rc2_c1

p

Attrc2

oc1
oc2

p‘

C1
Rc1_c2

C2

C3
Rc1_c3

Rc3_c1

Attrc3

C3
Fig. 3. Hierarchical structure of the path

Figure 3 shows that Rc1 c2 refers to C2 in C1 and Rc1 c3 can be the path
to C3. Thus, the attribution in C2 using C1 as a path can be referred through
the path expression that uses the Rc1 c2, the C1 character, and the character
in C3, through the Rc1 c3. Moreover, the condition expression can specify by
using the path expression. Here reference means Rc1 c2 and Cc1 C3 in C2 has
the RID for the speciﬁc data in each C2and C3. Representing relations and
retrieving attributions between datasets C1, C2 and C3 by accessing directly to
the data in C2, and C3 can be possible by solely systemized representation, path
expression.
4.2

Retrieval of Alias in Query

To connect and operate diﬀerent and independent dataset through RID, the path
to distinguish its dataset must be identiﬁed and be correspondent to the eﬀective
RID within its RID group. This is because the object data of C2 and C3 have
to be changed together according to the object of operating in C1 changed from
oc1 to oc2. This is the course of retrieving the RID of actual C2 corresponding
to the attribution value of the speciﬁc data in the path p of C1 (Pc1 (Pc2 c2)->
C2). The change of Rc1 c2 into Rc1 c2’ means the operating object of C2 has
to be changed to Pc1 (Rc1 c2’). For this case, each path existing in the datasets
must be analyzed and RID group correspondent to them should be produced.

Real-Time Data Management for Network Information System

619

This is called the Alias and it is deﬁned as follows; Alias A=(D,P,F) where D
is Dataset which refers to the current dataset, P is The path that distinguish the
current D with previous Alias and attribution and F is REF/SET attribution.
Alias be distinguished by the paths referring to datasets. That is, the fact
that C2 has the one path passing through only Rc1 c2 from the all the data in
C1 shows that there is only one Alias.
Suppose the situation that several aliases can exist in one dataset. For example of
C3, both RID by Rc1 c3 and RID referred by Rc3 c3 refer to the data in C1, but
it must be classiﬁed by the context referring to C3. As a result of it, it is deﬁned
to only be distinguished by the previous dataset referring to itself in the path
in order to distinguish the several RID in the dataset, its attribute, and all the
three elements (dataset, character and path) composed by the compounded path.
But, the basic dataset is deﬁned to have the basic default path. For example,
C1 has only the default path, C3 has the path of C1-C3, (C1, Rc1 c3, 0) (Here,
this is the default path ID of C1 which is the basic dataset of 0). If C1 has
self-reference structure, it will have additional (C1, Rc1 c1 and 0) except for the
default path. And if it has the relations with C3 through (C1, Rc1 c1 and 0),
C3 will have (C1,Rc1 3) and (C1, Rc1 c1, 0) additionally. This path is used to
retrieve the Alias (= RID of dataset) which is the object correspondent to the
current context in the course of navigating the classiﬁed dataset through the
RID.
The Figure 4 is more speciﬁed ﬁgure 4 based on Alias. The basic dataset C1
(=BASE dset) is initialized to have the basic Alias al(=BASE alias). Alias a2
of dataset C2 is produced by BASE alias, al and Rc1 c2.When Rc1 c2’, the
relation from C1 to C2, has already been deﬁned, this path produced new alias
a3(Base alias, al and Rc1-c2’).

C1(=Base_ dset)

C2
path

inpath

Rc1_c2 Rc1_c2 ’

outpath

inpath
outpath

Rc1_c2 Rc1_c2 ’

Alias

a1

a2

a3

(=Base_alias)

Fig. 4. Retrieval of the Alias

Alias

620

D.C. Lee

The following algorithm is the one to produce Alias by analyzing the path
expression when basic dataset and the path expression are given. This path expression has the form of ” s->n-> . . .” and s and n are the names of attributions
that are the types of REF or SET referring to each dataset.
Algorithm Makes Cursor (name: dataset name, p: path expression)
Dset: dataset information
Alias: working Alias begin
dset = create_dataset_info (name) ;
alias = dset.active_alias () ;
while ( all attr in p )
path = dset.search_out_path (alias, attr ) ;
if (searching is successful)
if (attr is leaf)
cursor.add_attr_info(dset, alias, attr)
end if
else
next_dset = dset.get_next_dataset (attr) ;
if (no next_dset exist)
create_dset_info (next_dset.get_name ()) ;
end if
next_dset.add_inpath (path) ;
end if
dset = next_dset ;
path’ = dset.convert (path) ;
if ( not dset.exist_path (path’))
dset.create_alias (path’) ;
end if
alias = dset.getAlias (path’) ;
end while
end.
This algorithm is noticed that new alias is produced when the path to the present
attribution of present dataset doesn’t exist.
4.3

Navigation Using the Alias

The composed Alias is needed to navigate the dataset. The way of navigation
is made up be the evaluation of the condition expression. For this case, the
Alias including the attribution stated in the condition expression evaluates the
referred data and expression. If the evaluation of all the expression is successful,
all the data referred by alias become the object of query result. If not, next data
RID is replaced by alias and repeat the evaluation of the expression. The ﬁgure 6

Real-Time Data Management for Network Information System

621

shows such a process course, which it is 2 aliases in C2. If the alias a3 is deﬁned
that it has a relations with C1 and SET, and if the evaluation of the condition
expression about the data referred by current a3 (that is, RID is oc3) is not
true, the a3 evaluates the expression replaced by possible next data RID, oc4.
After the evaluation of the expression, the result is not true again, next RID is
retrieved to replace a3. By the time it is not possible to retrieve the next RID, it
is required (touch coursor in algorithm) to replace alias a1 in C1 which is more
upper path than a3. If a1 which is either REF or SET doesn’t have any RID to
replace, it is necessary to replace a1 itself. Namely, the next data except for oc1
is newly referred by a1 in C1. According to it, the lower alias (a2 and a3) than
a1 are initialized by a1 and then begins to estimate the former expression.

C1(=Base_ dset)

C2
path

inpath

inpath
Rc1_c2 Rc1_c2 ’

outpath

outpath

Rc1_c2 Rc1_c2 ’

Alias

a1

(=Base_alias)

a2

Alias

a3

C1

C2
oc3
oc4

oc1

Rc1_c2

Rc1_c2 ’

Fig. 5. Navigation of Dataset

By repeating this process, the results having evaluated all the data in C1
returned to the user. The following algorithm shows the course of evaluating the
condition expression given on the basis of dataset and retrieving alias.
Algorithm Touch_Cursor (dset, alias, attrs)
begin
re-evaluate:
while ( each attrs in all attrs )
dset = attr.get_dset () ;
alias = attr.get_alias () ;
data = dset.get_data (alias) ;
result = data.evaluate_expr (attr, attr.get_operator(),
attr.get_value ()) ;
if (result = true)

622

D.C. Lee

continue
end if
status = touch (dset, alias) ;
if (status = RequiredReEvaluate)
goto re-evaluate
return status
end if
end while
end.
The basic way to replace Alias is to require replacement of upper alias on
the path when the alias itself cannot meet the condition evaluation. And also,
the following algorithm shows the procedure to require the replacement of upper
alias.
Algorithm Touch (dset, alias)
begin
if (dset = BASE_dset and alias = BASE_alias)
return RequiredNext ;
pre_dset = dset.find_pre_dset (alias) ;
path = dset.find_path (alias) ;
if (path.get_type () = SET and not path, all_traverse ())
oid = path.getNextSetElement () ;
dset.set_identifier (alias, oid) ;
return RequiredReEvaluate ;
end if
return touch ( pre_dset, dset.get_prealias ())
end.
In above algorithm, the RequeiredReEvaluate means that the condition
evaluation given in query has to be reevaluated after being replaced by lower
alias (a2 or a3) without any change of basic alias (For example, a1 in C1).
4.4

Retrieval Result

When all the condition evaluation are evaluated successfully, the data referred
by current alias in each dataset have to be returned. If the query clariﬁes the
speciﬁc character of data, only that speciﬁed attributions have to be retrieved
and returned. For this case, the Cursor has the list of the result attributions and
the result attributions are deﬁned as following three elements; Result attributions RS = (A, P, S) where A is Dataset and alias where each attribution
belongs, P is The location value of result value at the beginning of the data
referred as alias and S is Actual size of the result value.

Real-Time Data Management for Network Information System

623

For instance, actual value states that attr3 is as big as size 2 and it has the
same oﬀset location as ofs1 of data (oc3) referred by alias a2 in dataset C2.
Therefore, attr3 can be presented as (a2, ofs1 and size1)∈RS, and attr4 can be
also described as (a3, ofs2 and size2)∈ RS because it refers to the character in
the data 0c4, referred by alias a3 in the same dataset. The composition of the
result value to be returned without considering multiple dataset is possible by
cursor’s retrieving continually the value as much in the location of data oﬀset
which speciﬁed alias refers to in the list of result characters.

C1(=Base_ dset )

C2
path

inpath

inpath
Rc1_c2 Rc1_c2 ’

outpath

outpath
Rc1_c2 Rc1_c2 ’

Alias

a1

(=Base_alias)

a2

Alias

a3

C1

C2
oc3
oc4

Rc1_c2

by a1

attr1

Rc1_c2 ’

by a3

by a1

attr2

by a2

attr3

attr4
ofs1

size1

ofs2

size2

Fig. 6. Data retrieval

In the algorithm, attrs means the list of result attribution and results are
the buﬀers to save the actual value of the attributions. When they are added to
the result buﬀer, each attribute has the type and size information additionally.
Algorithm Get$\_$Info (attrs)
results: result values
begin
while ( each attrs in all attrs )
results.add_value (attr.get_data ()) ;
end while
return results;
end.
As shown above, the data retrieving method through Alias navigation makes it
possible to retrieve the results without any physical recomposition compared to

624

D.C. Lee

previous methods [1][4][5] that recompose all the dataset in the query physically.
This function oﬀers rapider performance and more uniform access performance
in retrieving many results.

5

Conclusion

When joining multiple dataset, previous methods are using the way of recomposing new dataset or index by copying a lot of memory though it is the database
in the memory. As a result, it cannot avoid the bottleneck problem [7] of the
memory which has to be minimized in terms of current hardware structure and
this may consume much preparing time depending on the size and the state of
the dataset [8].
We propose the Join method which minimize the physical repeating data
service between memories. This method makes it possible to get the results,
tracing the addresses of memories without any physical memory copy according
to the relations at the request of retrieving. More speciﬁcally, we are proposed
structured access system and interface through the data model that is including
path expression in term of the dataset that has the unstructured and complex
structure.
As a result, the proposed method makes the unstructured scheme represented
easily in the communication environment and enables us to access to data easily,
and meets the time-constraints of event which can be made up at the time of
dataset Join and has the eﬀect in reducing the complexity of the application
program.
Acknowledgments. This work is supported by Howon University Fund 2003.

References
1. Y.I. Yoon, et. al., “Scalable Distributed Real-time Database Management for
Switching System,” Int’l Switching Symposium (ISS’97), Toronto, Canada, pp. 539–
545, September 1997.
2. M. Stonebreaker and P. Brown, “Object-Relational DBMSs: Tracking the Next
Great Wave,” Morgan Kaufmann Publishers, pp. 320, 1998
3. W. Wolfe, J. Prichard, L. Dipippo, and J. Black, “Real-Time Database Systems: The
RTSORAC Real-Time Object-Oriented Database Prototype,” Kluwer Academic
Publishers, pp. 279–303, 1997.
4. Polyhedra Plc., “Bloor Research Overview of Polyhedra,” White Paper,
http://www.polyhedra.com
5. Raima Co., “Raima Database Manager++ In Real-time and Embedded Systems,”
White Paper, http://www.mbrane.com/rdm.html
6. C. T. Yu and W. Meng, “Principles of Database Query Processing for Advanced
Applications,” Morgan Kaufmann Publishers, pp. 512, 1997.

Real-Time Data Management for Network Information System

625

7. Peter Boncz, Stefan Manegold, Martin Kersten, “Data Architecture Optimized for
the New Bottleneck: Memory Access,” Proc. of VLDB’99, 1999.
8. H. Garcia-Molina and K. Salem, “Main Memory Database Systems: An Overview,”
IEEE Transaction on Knowledge and Data Engineering, Vol. 4, No. 6, pp. 509–516,
Dec. 1992.

