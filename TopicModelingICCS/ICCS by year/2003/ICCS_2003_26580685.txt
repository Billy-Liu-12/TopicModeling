The Unified Design Methodology for Application Based
on XML Schema
1

2

Yoon Bang Sung , Mun-Young Choi , and Kyung-Soo Joo

3

1

Hanseo University Computer Center,
Hanseo University Computer Center, SeoSan, ChungNam, Korea, 356-706
sybang@hanseo.ac.kr.
2
Dept. of Computer Science, Graduate School Soonchunhyang Uni.
SoonChunHyang Uni., P.O Box 97, Asan, ChungNam, Korea, 336-745
E-mail : griffin@hyejeon.ac.kr.
3
Dept.of Computer Science and Engineering, College of Engineering SoonChunHyang Uni.,
P.O Box 97, Asan, ChungNam, Korea, 336-745
gsoojoo@sch.ac.kr

Abstract. In this paper, we introduce a XML modeling methodology to design
W3C XML schema using UML and we propose a unified design methodology
for relational database schema to store XML data efficiently in relational
databases. In the second place, in order to verify objectivity of the unified
design methodology. Using Ronald Bourret’s method, first we introduce the
method of the transformation from XML schema to the object model and
second we translate the object model into the relational database schema.
Therefore we show the mutual consistency between those consequences, and so
can verify the unified design methodology, we proposed in this paper.

1

Introduction

XML is a markup language for documents that includes the structured information[1].
W3C XML Schema can define more diverse data types than XML DTD, and it has a
convenient advantage in using as a diverse application by using the powerful
expression. The unified design modeling describes 3WC XML Schema using UML
Class and store interchanged data by the modeling in RDB. However, until recently,
there has been no effective means to verify objectivity of the unified design modeling.
In this study, it describes a unified design methodology in Chapter 2, verification of
unified design methodology in Chapter 3, and the conclusion in the last Chapter 4.

2 Unified Design Methodology Using UML
The sequential diagram takes on the role to clarify the flow of events from the
application program and may convert the use case that is in the form of writing into
the picture expressed in massage. In particular, it helps to make easy works when

P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 685–694, 2003.
© Springer-Verlag Berlin Heidelberg 2003

686

Y.B. Sung, M.-Y. Choi, and K.-S. Joo

making class diagram for us. Then it can be converted to XML modeling and data
modeling as shown in the Fig.1 by the class diagram.

UML Sequence
diagram

XML
modeling

UML Class
diagram

Data
modeling

Fig. 1. XML modeling and Data modeling using UML

On Fig.2, the Order and Distributor are aggregate relationships in the relativity.
However, It do not illustrate the process, only the information items which participate
in the process and the relationships or dependencies between those objects[3].
Order

Delivery Notice
Publication Month : date
Quantity
: int
Expected Arrival Date : date
Date Shipped
: date

Publication Month : data
Quantity
: int
Required Delivery Date : date

1..1
Order Receipt

1..1
Distributor

Oauntity
: int
Expected Delivery Date : date
Amount Billed
: double
Status
: string

1..1
1..1
Shipping Agent

Fig. 2. Class diagram

2.1 XML Modeling

The following methods are used to formulate W3C XML Schema from the UML
class proposed in the Fig.2[3].
1 Do not allow empty elements or attributes. Instead, ensure that they either have
some value or are not present. If an element or attribute is mandatory( such an
minOccurs="1" or use="required"), allowing an empty string as the value is
questionable. If they are "allowed" to be empty, then it is better to set
minOccurs="0" or use="optional", and take their absence to mean "no value" ; if
they do exist, force them to have some content.

The Unified Design Methodology for Application Based on XML Schema

687

2 Since whitespace can increase the size of an instance document significantly, it
may be necessary for an application receiving an XML instance document to
confirm the file size is under a certain limit.
3 Create limited versions of the base types string, decimal, and integer in order to
restrict character set and field size.
4 Make use of the unique element to assert uniqueness of element or attribute
values.
5 Use key / keyref elements to associate two locations in a document. Any path in
the document can be specified as a named key, such that all paths that are a keyref
to that named key must contain a value specified as key.
6 If the schema is in danger of becoming large, consider moving sections into other
files using the group reference method. The principle of abstraction applies
equally here. These secondary schema files do not need to have even one global
element.
7 Wherever we change namespaces in an instance document, use an any element
and explicitly specify the namespace and number of child elements permitted at
that location, or include an element ref=". . ." element to explicitly name the
element in the new namespace.
8 If an element or attribute does not exist, does the application take this to mean
there is a default value ? If so, this can explicitly be stated by using the default
attribute on the element or attribute declaration.
9 Include the blockDefault="#all" attribute on the schema element. This will
prevent derived types being allowed to substitute in an instance document. This is
a security issue, and depends on the application’s mechanism for schema
validation.
10 Include the finalDefault="#all" attribure on the schema element. This will prevent
any new types deriving from those declared in this schema. This is a much stricter
constraint than blockDefault.
2.2 Example of XML Modeling
On Fig.2, the ’Order’ object and the ’Distributor’ object are aggregate relationships in
the relativity and its meaning is that the ’Order’ object has to have the ’Distributor’,
and accordingly, the ’Distributor’ side is shown to have the multiplicity value of 1..1.
On the other hand, the multiplicity value of the ’Order’ object being 1..1 means that
the ’Distributor’ can exist depending on the orders. In order to make XML modeling,
modeling with XML Schema by applying the XML modeling method of 1 and 4for
XML Schema for Schema is the same as shown in Fig.3.

<element name="Distributor">
<complexType>
<attribute name="Distributor" type="ID" use="required"/>
</complexType>
</element>
Fig. 3a. XML Schema of Distributor Object(Continute in the next page)

688

Y.B. Sung, M.-Y. Choi, and K.-S. Joo

<element name="Order">
<complexType>
<sequence>
<element name="Publication Month" type="date"
minOccurs="1" maxOccurs="1"/>
<element name="Quantity type="int" minOccurs="1"
maxOccurs="1"/>
<element name="Required Delivery Date" type="date"
minOccurs="1" maxOccurs="1"/>
<element REF="Distributor"
</sequence>
</complexType>
</element>

Fig. 3b. XML Schema of Order object(Continue in before page)

On Fig.3, the ’Order’ object has 3 child objects and 1 reference object. Also, the
’Distributor’ object that refers from the ’Order’ object has no child object.
2.3 Data Modeling
The conversion methods of class diagram of Fig.2 into RDB Schema is as follows[8].

1 UML class becomes table.
2 UML attribute in class becomes column in table.
3 UML attribute type in class becomes column type in table through type
transformation table.
4 IF nullable UML attribute tag, attribute has NULL constraint ; otherwise,
NOTNULL constraint.
5 IF UML attribute has initializer, add DEFAULT clause to column.
6 For classes with no generalization(root or independent) and implicit identity,
create integer primary key; for oid, addoid tagged columns to PRIMARY KEY
constraint; ignore composite aggregation and association classes.
7 For subclasses, add the key of each parent class to the PRIMARY KEY constraint
and to a FOREIGN KEY constraint.
8 For association classes, add primary key from each role-playing table to
PRIMARY KEY constraint and FOREIGN KEY constraint.
9 IF alternate oid = <n> tag, add columns to UNIQUE constraint.
10 Add CHECK for each explicit constraint.
11 Create FOREIGN KEY columns in referencing table for each 0..1, 1..1 role in
association.
12 Create PRIMARY KEY for composite aggregation with FOREIGN KEY to
aggregating table(with CASCADE option), add additional column for PRIMARY
KEY.
13 Optimize binary association classes by moving into to-many side table where
appropriate.
14 Create tables for many-to-many, ternary associations with no association classes.
15 Create PRIMARY KEY, FOREIGN KEY constraints from keys of role-playing
tables in many-to-many, ternary associations.

The Unified Design Methodology for Application Based on XML Schema

689

2.4 Example Conversion of RDB Schema
(1) The ’Distributor’ object by Fig.2, It is converted as in Fig.4 with the ’Distributor’
table that stores the object type attribute of ’DistributorID’ following the
characteristics of RDB conversion method 1, 2 and 6.
SQL> CREATE TABLE Distributor(
DistributorID INTEGER PRIMARY KEY
)

Fig. 4. Distributor Table

(2) The ’Order’ object by Fig.2, It stores the ’Order’ object type attribute following the
characteristics of RDB conversion method number 1, 2 and 6, and the object type
of ’DistributorID’ is applied with ’Distributor’ defined under Fig.4 by conversion
method number 11.
SQL> CREATE TABLE Order (
OrderID
INTEGER PRIMARY KEY
Publication Month date
Quantity
int
Required Delivery date
DistributorID INTEGER REFERENCE Distributor
ExpectedDeliveryDateID INTEGER REFERENCE
OrderReceipt
CONSTRAINT Order_PK PRIMARY KEY
(OrderID, DistributorID, Expected DeliveryDateID)
)

Fig. 5. Order Table

3 Verification of the Unified Design Methodology Using UML
In this section, we apply the existing Ronald Bourret’s method in order to verify
objectivity of the unified design methodology. It transforms XML schema into the
object model and transform the object model into relational database schema.
Therefore we show the mutual consistency between them and relational database
chema according to relational data modeling using UML, and verified objectivity of
design methodology.
XML Modeling
(XML Schema)

UML
Sequence diagram

UML
Class diagram

Object Model

Data Modeling
(RDB Schema)

Fig. 6. Verification of design methodology

690

Y.B. Sung, M.-Y. Choi, and K.-S. Joo

Fig.6 describes two different processes that transform XML Schema through the
object model into the relational database schema. The first part of the process,
transform XML Schema generally known as "XML data binding" to the object model.
The second, transform object model known as "object-relational" mapping to the
relational database schema[2].
3.1 Cyclic Graph Expression of XML Schema

The transformation XML Schema to object model is best understood by viewing an
instance of the schema data model as a directed, possibly cyclic graph consisting
only of schema, attribute, complex element type, simple element type, attribute group,
model group. From this graph, the attribute and the simple element type nodes are
transformed into the scalar types. the edges pointing from these nodes are transformed
into the properties in these calsses[3]. Fig.7 is an example of XML Schema that
transforms Fig.2 into XML modeling.
<element name="Order">
<complexType>
<sequence>
<element name="Publication Month" type="date"
minOccurs="1" maxOccurs="1"/>
<element name="Quantity type="int" minOccurs="1" maxOccurs=”1”/>
<element name="Required Delivery Date" type="date"
minOccurs="1" maxOccurs="1"/>
<element REF="Distributor"/>
</sequence>
</complexType>
</element>
<element name="Distributor">
<complexType>
<attribute name="Distributor" type="ID" use="required"/>
</complexType>
</element
Fig. 7. XML Schema of Distributor(Continue in before page)

3.2 Element

(<!ELEMENT>) is the fundamental component in XML DTD and it defines Tag used
in XML document. Element in XML Schema is one of the basic components. We use
to assign the items that support all each of property in <element>, such as an element
name, type of Tag content, minimun/maximun number of occurrence of Tag. The
element type is classified in two type. Simple element type has no children element

The Unified Design Methodology for Application Based on XML Schema

691

and complex element type has children element and relationship between elements.
Specially, it is useful to define complex type. Simple element type node is generally
transformed into scalar data type. Complex element type node is transformed into
class. The edges pointing element type node are transformed into property. Fig.8
shows the example that transformed Fig.7 into cyclic graph.
Schema

Distributor

DistributorID

Order

Publication Month Quantity

Requried Delivery Date

Fig. 8. Cyclic graph of schema component

3.3 Attribute

Every element can have an attribute and the attribute has an attribute name and type.
The attribute is included in element. The attribute node is transformed into the scalar
type and the edges pointing at the attribute node are transformed into their properties.
The distributor element node has a property of DistributorID in Fig.9 and becomes a
property of Order element node. The Distributor node pointing at Order node with
edge(—¹) in Fig.8 represented in the object model to mean aggregation between two
nodes.

Order
Distributor

Publication Month : date
Quantity
: int
Required Delivery Date : date
Distributor
: Distributor

DistributorID : ID

Fig. 9. Order and Distributor object

3.4 Transforming Object Model into RDB

We transformed XML Schema Example of Fig.7 in this section 3.1 into the object
model. The following method describes how transformed object model are
transformed into the relational database schema.

692

Y.B. Sung, M.-Y. Choi, and K.-S. Joo

1 Class : Table. this is known as a class table. an object is represented by a row in a
class table.
2 Inheritance : The superclass and subclass are mapped to separate tables with a
unique Key/foreign key joining them. The unique key is in the superclass table.
An object is represented by a row in each table.
3 Single-valued property with scalar data type : Column in class table. This is
known as a property column. The data type determines the set of possible data
types of the column. A property is represented by a value in a property column.
The property table is joined to the class table with a unique key/foreign key
relationship and the unique key is in the class table.
4 Multi-valued(collection) property with scalar data type : Multiple property
columns in class table. Each position in the collection is mapped to a specific
property column. Property column in a property table. There is one row for each
value in the collection. The property table is joined to the class table with a unique
key/foreign key relationship and the unique key is in the class table.
5 Single-valued property with union data type : There is one table for each data type
in the union and the unique key is in the class table.
6 Single-valued property with class data type : The class containing the property is
called the parent class and the class corresponding to the property is called the
child class. Unique key/foreign key relationship between the tables of the two
classes. The unique key is in the table of the parent class.
7 Multi-valued property with class data type : Unique key/foreign key relationship
between the tables of the two classes. The unique key is in the table of the parent
class. There is one row in the table of the child class for each property value.
8 Identity constraint : See sections 3.5.
3.5 Transforming Identity Constraint into RDB
1 Identity constraint category(key) : The constraint is mapped to a PRIMARY KEY
constraint.
2 Identity constraint category(keyref) : The constraint is mapped to a FOREIGN
KEY.
3 Identity constraint category(unique) : The constraint is mapped to a UNIQUE
constraint.
4 Selector : Must identity a single table. That is, starting from the element type node
on which the identity constraint is defined, the XPath expression must lead to a
complex element type node.
5 Field : Must identity one or more columns in the table in 4. That is, starting from
the node identified in 4, each XPath expression must lead to an edge leading from
the node in 4 to simple element type node or an attribute node.
6 Reference key : The selector and fields properties of the referenced key identity
constraint are used to determine the table and key columns referenced in a
FOREIGN KEY constraint.

The Unified Design Methodology for Application Based on XML Schema

693

3.6 Example Conversion of RDB Schema

(1) The ’Order’ object by Fig.9 is converted as in Fig.10 with conversion method that
uses RDB conversion method number 1, 4 and RDB identifies constraint number 1 ~
6. It shows the mutual consistency of Fig. 5 and Fig. 10.
SQL> CREATE TABLE Order (
OrderID
INTEGER PRIMARY KEY
Publication Month date
Quantity
int
Required Delivery date
DistributorID INTEGER REFERENCE Distributor
ExpectedDeliveryDateID INTEGER REFERENCE OrderReceipt
CONSTRAINT Order_PK PRIMARY KEY
(OrderID, DistributorID, Expected DeliveryDateID)

Fig. 10. Order table

(2) The distributor’ object by Fig.9 is converted as in Fig.11 with conversion method
that uses RDB conversion method number 1, 3. It shows the mutual consistency of
Fig.4 and Fig.11.
SQL> CREATE TABLE Distributor(
DistributorID INTEGER PRIMARY KEY
)

Fig. 11. Distributor table

4 Conclusion
In order to store and manage the information mutual exchanged systematically and
stably by using XML, there are a variety of studies on XML application and database
linkage have been performed on the basis of relational database to this point.
However, for there is a limit not to define a variety of data types of DTD in the XML
application, there is a difficulty in smoothly linking it to the data base. Furthermore,
there is an inherent limit in storing the XML data that has a variety of level structure
into the relational database, the aggregation of 2-dimensional table.
In this paper, we proposed modeling methodology to store in relational database
for structured information that transformed hierarchical architecture into 2-dimension
information using conversion rule. We applied guideline that designed XML
modeling and Relational data modeling using UML Class. However, it needs to verify
objectivity to repose trust on modeling. In order to verify objectivity, first we
transformed XML Schema into relational database and second we transform UML
Class into relational database and third we showed the mutual consistency comparing
with each other’s consequence. For this goal first we represented XML Schema on
cyclic graph and transformed edge with node into the object model and transformed
object the model into the relational database. We used existing Ronald Bourret’s
method.

694

Y.B. Sung, M.-Y. Choi, and K.-S. Joo

Acknowledgement. This work was supported by the University IT Research
Supporting Program under the Ministry of Information Communication of Korea.

References
[1] What is XML ?, http://www.xml.com/pub/a/98/10/guide1.html#AEN58.
[2]
[3]

[4]
[5]
[6]
[7]

[8]

Mapping W3C Schemas to Object Schemas to Relational Schemas,
http://www.rpbourret.com/xml/SchemaMap.htm.
Duckett Jon, Ozu Nik, Williams Kevin, Mohr Stephen, Cagle Jurt, Griffin Oliver, Norton
Francis, Stokes-Rees Ian, and Tennison Jeni. Professional Xml Schemas , Wrox Pr Inc,
2001.
Florescu, D., Kossmann, D.: Storing and Querying XML Data using an RDBMS. Data
Engineering 22:3 (1999), 27–34.
XML Modeling, http://www.xmlmodeling.com
Modeling XML vocabularies with UML,
http://www.xml.com/pub/a/2001/09/19/uml.html, 09/19/2001.
Bang Sung-yoon, Joo Kyung-soo, "XML Application Design Methodology using Model
of UML Class", Korear of Institute of CALS/EC, The Journal of Korean Institute of
CALS/EC, Vol.7, No.1, pp.154–166, 2002.
Bang Sung-yoon, Joo Kyung-soo, "A Unified Design Methodology using UML for XML
Application based on Database", Korean Society for Information Management, Journal of
the Korean Society for Information Management Vol.19, No.2, pp.50–67, 2002.

