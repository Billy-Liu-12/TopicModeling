EC Transactions Use Different Web-Based Platforms
Whe Dar Lin
The Overseas Chinese Institute of Technology
Dept of Information Management,
No. 100, Chiao Kwang Road Taichung 40721, Taiwan

Abstract. A review of the methodological aspects of the EC transactions use
different Web-based platforms is presented. Our design techniques for complex
EC environments are present to avoid the viruses infected EC transaction files.
When an executive service code is ordered it may get infected with some
viruses before the signature is attached to it. The infected EC transaction files
cannot be detected by signature verification and the origin of the infection order
cannot be specified by different Web-based platforms. Applied our EC
transactions use different Web-based platforms, these techniques lead to an EC
framework with clients, agents, EC application servers and EC system
management. The paper discusses how Web-based platforms can use signature
method together with detection infected in the preprocessing step enable us to
specify the origin of the infection side. The impact of our proposed method can
improve Web-based platforms relationships between EC transaction agents.

1 Introduction
In EC era, there has been a general trend towards partnership Web-based platforms
together with a reduction and consolidation of the supply based in order to have better
EC application relationships with fewer Web-based platforms. It is an important step
that an execution service code can be detected by checking the consistency of original
transaction order with its accompanying digital signature [1], [2], [5], [6], [8]. The
cooperative Web-based platforms approach to supplier is characterized by long term
contracts, integrated key protocols, share marketing database, and a commitment to
partner relationships.
We don’t think this is a good architecture using in Web-based platform.
[12][13][14] Some other efforts through the directory services, name services, library
service to reduce complex about viruses impaction. This approach yields an efficient
solution for simple and static point-to-point interaction in collaborative EC
transaction order. Nevertheless, we need face dynamic communication commit from
different Web-based platforms for multiple relationships between one another on
supply chain management. We will choice the ID-based scheme [10], a large publickey file is not required because each user's public key is nothing but an identity and
communication cost is low using in EC applications for different Web-based
platforms.
Our proposed signature method is based on a public key scheme. We assume that
special entities, such as transaction suppliers in supply chain are not reliable for
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 1059–1068, 2003.
© Springer-Verlag Berlin Heidelberg 2003

1060

W.D. Lin

concerning the signature forgery or computer viruses. The rest of this paper is
organized as follows. Sect. 2 gives some general assumptions about viruses and
transaction supplier and Web-based platform. The proposed our security Web-based
platform scheme will be described in Sect. 3 and Sect. 4 the correctness shall be
discussion. Our proposed scheme security analysis is described in Sect. 5, and we
discuss some implementation Web-based platform issue in Sect. 6. We conclude with
some final remarks shall be stated in Sect.7.

2 Assumptions and Model
Here, we provide several assumptions about viruses and transaction supplier, and
security in general using in our protocol. A protocol is a set of rules and
conventions that define the communication framework between two or more EC
transactions. After that, we shall describe the Web-based platforms.
2.1 General Assumptions about Viruses and Transaction Supplier
Our proposed scheme relies on the existence of a hash function h. Specifically,
Assumption 1: We assume there exist a function h such that:
On random input (ri, mi), it is difficult to generate (ei) such that h(ri, mi)= (ei). More
generally, it is difficult to generate such (ei) on input (ri, mi) and samples of signature
on random messages signed with EC-based platforms.
Assumption 2: Web-based platform act according to the following conditions:

− They create transaction supplier honestly in marketing channels.
− They do not refuse to reply to the requests or questions from the EC agent.
− Viruses can infect and incubate warehouse files and EC order files on Web-based
platforms.
− Viruses can damage both warehouse files and EC order files on Web-based
platforms.
Our proposed automatic signature scheme of protection against viruses works upon
the following security assumptions [1], [2], [3], [4], [9], [11]:
− Solving the discrete logarithm problem is difficult, so we use in cryptographic
protocols.
− Inverse calculation of one-way hash functions is difficult that we use assumption is
often made in cryptographic protocols.
− Distributed operating system in Web-based executes a verification program
properly. This assumption is important because improper events must be ruled out
in the verification procedure so that one can rely on the results of the verification.

EC Transactions Use Different Web-Based Platforms

1061

2.2 Client-Server Transaction Model for Procurement
In this paper, the transaction supplier on the Web-based platform will reduce the
amount of complete purchased work items and the turnaround time the deliver the
order transaction services.
− Creates the service system library, good library, customer library and included
files,
− Signs all library files following every subroutine, procedure and initial data
structure,
− Calculates the fingerprints of the included files with a one-way hash function and
creates the database of the fingerprints (fingerprint data file),
− Computes proxy integers and attaches them to the Web-based platform,
− Creates the signatures for the shops on Web-based platform and the fingerprint
data file.
The included files and customer relation data are text files and are accessed during
preprocessing. The transaction includes all processes from preprocessing to linking.
The fingerprint of an included file is an output of a one-way hash function taking the
included file as an input file. The fingerprint data file is composed of pairs of the
names of the included files and their fingerprints. From this file, one can authenticate
the validity of the included files.

3 Our Proposed Automatic Signature Scheme
In this section, we shall illustrate the structure of our proposed method. In our
proposed protocol, The transaction supplier is denoted by um, the EC server us and the
mobile user, client uc.
They follow the steps below.
Step 1: The EC server us sends the request the Web-based platform R to the
transaction supplier um.
Step 2: The transaction supplier um sends the Web-based platform R to the EC server
us.
Step 3: The mobile user, client uc sends the request the Web-based platform R for the
transaction order P to the EC server us.
Step 4:The EC server us sends the executable transaction bill service code M to the
client uc.
3.1 The Initialization Phase
The system parameter are listed as follows:
511
512
(1)We use a prime p with 2 < p < 2 , a prime divisor q|p – 1, a generator g with
order q over GF(p), and
(2) the security information of the transaction supplier um: xm
(3) the public information of the transaction supplier um: ym

1062

W.D. Lin

y m ≡ g xm mod p

(1)

(4) the security information of the EC server us: xs
(5) the public information of the EC server us: ys,

y s ≡ g x s mod p

(2)

(6) the security information of the mobile user, client uc: xc
(7) the public information of the mobile user, client uc: yc,

y c ≡ g xc mod p

(3)

3.2 The EC Server Requests the Delivery of a Web-Based Platform
When a server us requests the delivery of a Web-based platform named R. The server
sends his secret key xs along with four integers calculated from a random number k1.
The computation is as follows.
(1). Generate a random number k1 satisfying 0<k1<q-1
(2). Compute
r1 ≡g

k1

mod p

(4)

m1 ≡ us||R mod p

(5)

e1 ≡ h(r1,m1) mod q

(6)

s1 ≡ k1 – xse1 mod q

(7)

where h is a one-way function and || denotes concatenation.
(3). Send (us, R, e1, s1) with the request to the transaction supplier um.
3.3 The Transaction Supplier Sends the Web-Based Platform to the EC Server
When the transaction supplier um receives the integers (us, R, e1, s1), he verifies the
server us requests and then delivers a Web-based platform CR. The transaction supplier
um verifies (us, R, e1, s1) by computing the following equations.
(1). compute
r ≡ g ys
*

s1

e1

(8)

*

check whether the congruence e1=h(r , us||R) holds.
If it holds, the transaction supplier um does as follow.
(2). Generate a random number k2 satisfying 0<k2<q-1
(3). Compute
r2 ≡ g

k2

mod p

(9)

EC Transactions Use Different Web-Based Platforms

1063

tm≡xm+k2*r2 mod q

(10)

m2 ≡ CR||tm mod p

(11)

e2 ≡ h(r2, m2) mod q

(12)

s2 ≡ k2 - xme2 mod q

(13)

(4). Send the Web-based platform CR and its signature (CR, tm, e2, s2) to us
3.4 The Client Requests to the EC Server to Send Service Code for an Order P
A client user uc wants to get a service code for an order P, and the server creates an
executable service code M and its signature. When the server us receives the integers
(CR, tm, e2, s2), he verifies that a server um sends then accept the Web-based platform
CR. The server us verifies (CR, tm, e2, s2) by computing the following equations.
(1). Compute
r ≡ g ym
*

s2

e2

(14)

*

check whether the congruence e2=h(r , CR||tm) holds. If it holds, the server us does
as the client wishes. In the process of calculating a signature, the client executes
the following steps:
(2). Generate a random number k3 satisfying 0 < k3 <q-1
(3). Compute
r3 ≡ g mod p

(15)

m3 ≡ uc||P mod p

(16)

e3 ≡ h(r3, m3) mod q

(17)

s3 ≡ k3 - xse3 mod q

(18)

k3

(4). Send (uc, P, e3, s3) with the request to the server us.
3.5 The Server Processes the Order and Sends the Execution Service Code to
the Client
When the server us receives the integers (uc, P, e3, s3), he verifies that a client uc
requests that the Web-based platform CR processes the order P. The server us
verifies (uc, P, e3, s3) by computing the following equations
(1). compute
r ≡ g ys
*

s3

e3

mod p

(19)

1064

W.D. Lin
*

check whether the congruence e3=h(r , uc||P) holds. If it holds, in the process of
calculating a signature, the server processes the order P and executes the following
steps:
(2). Generate a random number k4, satisfying 0 < k4 <q-1
(3). Compute
r4 ≡ Pg

-k4

(20)

mod p

s4 ≡ k4 - r4xs mod q

(21)

M ≡ CR(P) mod p

(22)

m4 ≡ uc||P||M mod p

(23)

e4 ≡ h(r3, m3) mod q

(24)

ts*h(M)≡ tm + r2xs mod q

(25)

r2 ≡ g ym
s2

e2

(26)

mod p

(4). Send (r4, s4, ts, M) with the request to the server us.
The Web-based platform can be used only by the server us because the integer tm is
the proxy key of the transaction supplier um. However, if another user happens to
know um’s secret key, then he can use this um’s Web-based platform and create a bad
executable service code with this proper proxy. Then, the executable service code
may damage someone’s computer. The basic rule for this event is that the owner um of
the Web-based platform storing the proxy integer key tm is responsible for the damage
so that the transaction supplier must hide his secret key.
3.6 Signature Verification
When a user executes a service code M made by us, the use verifies the signature with
the transaction supplier's public key and server’s public key. That he checks whether
the signature satisfies the congruence such that

g ts h ( M ) ≡ y m (r2 y s ) r2 mod

p

(27)

Since the signature (r4, s4, ts, M) is automatically created, an infection of a
generated executable service code can be detected in the above verification process.
Using a signature can possibly be created for a contaminated executable service code,
and in this case, the infection can be detected by the verification. We can determine
who causes the injection.

EC Transactions Use Different Web-Based Platforms

1065

4 Correctness of Our Scheme
Theorem 1:
1. The transaction supplier um can get the correctness request from the server us.
2. The server us can get the correctness from transaction supplier um .
3. The server us can get the correctness request from client uc.
Proof:
(1) The transaction supplier um, receiving (us, R, e1, s1) from us can compute
*
s1 e1
k1-xse1 e1
k1-xse1 xse1
k1
ys = g
g = g = r1
r = g ys = g
*
h(r , us||R) = h(r1, us||R) = h(r1, m1) = e1
Then we can be sure the signature of (us, R) is (e1, s1)
(2) The server us, receiving (Cr, tm, e2, s2) from um can compute
*
s2
k2-xme2
k2-xme2 xme2
k2
e2
e2
r = g ym = g
ym = g
g = g = r2
*
h(r , Cr||tm) = h(r2, Cr||tm) = h(r2, m2) = e2
Then we can be sure the signature of (Cr||tm) is (e2, s2)
(3) The server us, receiving (uc, P, e3, s3) from client uc can compute
*
s3 e3
k3-xce3 e3
k3-xce3 xce3
k3
r = g yc = g
yc = g
g = g = r3
*
h(r , uc||P) = h(r3, uc||P) = h(r3, m3) = e3
Then we can be sure the signature of (uc, P) is (e3, s3)
Theorem 2:The server us can processes the correctness transaction order request from
the client uc.
Proof: The client uc, receiving (r4, s4, ts, M) from server us can compute

g ts h ( M ) ≡ y m (r2 y s ) r2

where g ts h ( M ) ≡ g tm + xs r2 ≡ g xm + k 2 r2 + xs r2 ≡ y m r2 2 y s 2 ≡ y m (r2 y s ) r2 Then we
r

r

can be sure the signature of M is (ts, M) and use the public key of transaction supplier
and server.

5 Security Considerations
Theorem 3: The crackers want to reveal the secret key from public key is computing
impossible.
Proof: The crackers want to from the public key ym ≡g mod p, ys ≡g mod p, and yc
xc
≡g mod p to reveal xm, xs, and xc, they have to solve the discrete logarithm problem.
xm

xs

Theorem 4: The malicious users want to forger the request from the proposed scheme
is computing impossible.
(1) The transaction supplier um get the false receive from malicious users.
(2) The server us can get the false request from malicious users.

1066

W.D. Lin

Proof:
(1) The transaction supplier can use (us, R, e1, s1) to verify
*
s1 e1
k1-xse1 e1
k1-xse1 xse1
k1
r = g ys = g
ys = g
g = g = r1, But the malicious users construct (us, R, e1‘,
*
s1’ e1’
s1‘) without know xs, the congruence, r = g ys = r1.. They have to solve the discrete
logarithm problem.
(2) The proof method is similar as part (1).
Theorem 5: The malicious users want to forger the signature from the proposed
scheme is computing impossible.
(1) The server us can get the false Web-based platform from malicious user.
(2) The client uc can get the false executable service code from malicious user.
(1) Proof: The server us the receive (Cr, tm, e2, s2) from um can compute
*
s2
k2-xme2
k2-xme2 xme2
k2
e2
e2
r = g ym = g
ym = g
g = g = r2
*
h(r , Cr||tm) = h(r2, Cr||tm) = h(r2, m2) = e2
We will sure the signature of (Cr||tm) is (e2, s2)
Case I: The malicious users use the false (Cr’, tm, e2, s2) signature send to server us
*
s2
k2-xme2
k2-xme2 xme2
k2
e2
e2
r = g ym = g
ym = g
g = g = r2
*
h(r , Cr’||tm) = h(r2, Cr’||tm) = h(r2, m’) = e’ ≠e2
We will sure the signature of (Cr’, tm, e2, s2) is false signature.
Case II: The malicious users use the false (Cr, tm’, e2, s2) signature send to server us
*
s2
k2-xme2
k2-xme2 xme2
k2
e2
e2
r = g ym = g
ym = g
g = g = r2
*
h(r , Cr||tm’) = h(r2, Cr||tm’) = h(r2, m’) = e’ ≠e2
We will sure the signature of (Cr, tm’, e2, s2) is false signature.
Case III: The malicious users use the false (Cr’, tm’, e2’, s2’) signature send to server us
*
s2’
e2’
r = g ym = r2’, h(r2’, Cr’||tm’) = e2’
But the malicious users choose another Web-based platform Cr’ and another proxy
key tm’ without know xm, the congruence equation that they have to solve the discrete
logarithm problem.
(2) The proof method is similar as part (1).
Theorem 6: The computational complexity for an intruder to cryptanalyze a new
session key in our scheme, after having received previous transaction order data, the
public key, the old messages and the new message is as hard to cryptanalyze a
plaintext in the ElGamal scheme when the order of g is a prime.
Proof. Let BO correspond with the problem of breaking our scheme and BE with
breaking the ElGamal encryption scheme with the order of g is prime. There is an
existence of a polynomial time BE implies the existence of a polynomial time BO.
We suppose it is possible to compute the discrete log of an output of G after seeing
a sequence of all transaction orders. Without loss of generality we can assume success
rate is an ε . We will use BE by BO as a procedure processing in computing feasible
by a polynomial time. So, the input parameters for BE is Ki=(ri, si, tj, Mk).
Now BE computes HI and h(rI, mI) which will be used as input parameters for BO as
follows.
BE
chooses
x1 , x2 ,K, xk ∈ Z q at random and computes

y1 ≡ g x1 , y2 ≡ g x2 ,K , yk ≡ g xk Then BE has obtained a public message HI=(p, q, g

EC Transactions Use Different Web-Based Platforms

1067

y1,…, yk-1, yk). So BE computes yi j ≡ g i j for i = 1,2,..., p, j = 1,2,..., q. Thus,
uses the HI=(p, q, g y1,…, yk-1, yk) and Ki=(ri, si, tj, Mk) to BO. In computing feasible
condition for any queried transaction order by BO, BE computes by using HI=(p, q, g
y1,…, yk-1, yk) and sends h(rI, mI) message to BO. The EC transaction protocol will
complete. Finally, BE outputs the result of BO, which is an 1 / ε with non-negligible
probability cases. We would find the discrete log in expected 1 / ε steps. We prove
under reasonable assumptions, that our proposed protocol is computationally secure
even on public network within different Web-based platforms.
r

xr

6 Performance
In this section, we shall calculate performance of our new method
I: The transmission cost on the delivery of the Web-based platform
In our method
Step 1: Send (us, R, e1, s1) with the request to the transaction supplier um.
Step 2:Send (CR, tm, e2, s2) with the response to the server us. Send the Web-based
platform CR and its signature (CR, tm, e2, s2) to us
II: The computation cost on verifying the signature of an executable program
In our proposed method verifies the signature.

g ts h ( M ) ≡ y m (r2 y s ) r2 mod

p

Our method uses 2 modular exponentiation computing time and 1 hash function
computing time.
III: The security model comparison in implement.
In our proposed method: The client checks if the signature satisfies the congruence

g ts h ( M ) ≡ y m (r2 y s ) r2 mod

p

The server checks if the signature satisfies the congruence
*
e3=h(r , uc||P) and M ≡ CR(P) mod p.

7 Conclusion
We proposed a protocol that developed to allow clients to get committing Web-based
platform signature. In our signature scheme the public key of the Web-based platform
owner is used for signature verification that a signature is created from both the public
key of the transaction supplier and that of the server Web-based platform owner. In
our proposed method, transaction suppliers no use any table to store EC Web-based
servers’ information that will more efficient and safety than any others EC Web-based
systems. Without identify creator, our effective approach on the public keys lead to a
verification procedure, and created signatures are checked relatively fast. The most
nature extension to this novel protocol scheme is a server-based signature that
integrated together with EC application package will allow client and the server to
commit with one another.

1068

W.D. Lin

References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.

T. ElGamal, "A public key cryptosystem and a signature ,scheme based on discrete
logarithms," IEEE Trans. Inf. Theory, vol.IT-31, no.4, pp.469–472, 1985.
C,P, Schnorr, "Efficient identification and signatures for smart Cards," Advances in
Cryptology-CRYPTO'89, LNCS 435, pp.239–252, Springer-Veriag, 1990.
R.C, Merklc, "A fast software one-way hash function," J. of Cryptology, vol.3, no.1,
pp.43–58, 1990.
C. Park, "A Fiat-Shamir-like identification protocol without a highly reliable trusted
center," Proc. the 1992 Symp. on Cryptography and lnf. Security, no.6D, 1992.
Y. Desmedt and Y. Frankel, "Multi-signatures for virus protection," Proc, the 5th lnt'l
Computer Virus and Security Conf., 1992.
E. Okamoto, "Integrated security system and its application to anti-viral methods," Proc.
the 6th Virus and Security Conf, 1993.
M. Cyirault, "Self-certified public keys," Advances in Cryptology-EUROCRYP'FO'91,
LNCS 547, pp.490–497, Springer-Veriag, 1991.
K. Usuda, M. Mambo, T. Uyematsu and E. Okamoto “Proposal of an automatic signature
scheme using a Web-based platform”, IEICE Trans. Fundamentals E79-A (1) (1996) 94–
101
K. Nyberg, R.A. Rueppel, “Message recovery for signature scheme based on the discrete
logarithm problem,” Designs, Codes and Cryptography, No 7, pp.61–81, 1996
A. Shamir, “Identity-based cryptosystem based on the discrete logarithm problem,” Proc.
CRYPTO'84, 1985, pp. 47–53.
D. W. Manchala, “E-Commerce Trust Metrics and Models,” J. of IEEE Internet
Computing, March 2000, pp. 36–44.
R. Sherwood, B. Bhattacharjee and A. Srinivasan, “A Protocol for Scalable Anonymous
Communication,” Proc. the IEEE Symposium on Security and Privacy, 2002, pp.1–12.
A. Ginige and S. Murugesan, “Web Engineering: An Introduction,” J. of IEEE
MultiMedia, January 2001, pp.14–18.
J. B. Lim and A. R. Hurson, “Transaction Processing in Mobile, Heterogeneous Database
Systems,” IEEE Trans. On Knowledge and data Engineering, Vol. 14, No. 6, 2002,
pp.1330–1346.
Jan, J.K. and Whe Dar Lin :An Efficent Anonymous Channel Protocol in Wireless
Communications, IEICE Trans. on Communications, Vol.E84-B, No.3, PP.484–491,
2001.
Whe Dar Lin, “Using Marketing Factors Associated with Web site in E-commerce,” The
International Conference on ASEMA, pp7~11, 2002.

