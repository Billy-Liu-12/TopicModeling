MOIRAE – An Innovative Component
Architecture with Distributed Control Features
Katia Leal1 , Jos´e Herrera1 , Jos´e M. Pe˜
na1 , and Ernestina Menasalvas2
1
2

DATSI, Universidad Polit´ecnica de Madrid, Spain
DLSIIS, Universidad Polit´ecnica de Madrid, Spain

Abstract. Today’s distributed systems are very complex applications.
Taming this complexity, providing both adaptabity and performance is
still an open issue for distributed architectures. Component-based development is a key technique to design plugable elements for a distributed
system. This article describes a new architecture for distributed component systems. This architecture deﬁnes each of its components as two
diﬀerent planes (i) operational actions and (ii) control policies. New issues in terms of adaptability and ﬂexibility are available by this new architecture, called MOIRAE (Management of Operational Interconnected
Robots using Agent Engines).

1

Introduction

Diﬀerent component architectures has been proposed [1,6,5] in order to build
complex distributed systems. MOIRAE architecture is an inovative approach for
distributed environments with a strong emphasis on what has been called control
and behaviour management. A MOIRAE application is designed under a tightlycoupled model called Policy/Mechanism (P/M) model. Using this architecture
high ﬂexible and adaptative systems can be designed to tackle performancerestrictive problems like distributed data mining scenarios, as we have presented
before [4,3].
This article introduces a new development environment based on the
MOIRAE architecture, MOIRAEToolKit. This environment allows developers
to design and implement MOIRAE components in a easy manner.
The rest of the article is organized as follows. Section 2 presents the P/M
model and its advantages in adaptative environments. In section 3 the MOIRAE
architecture is reviewed. Section 4 introduces the new development environment
called MOIRAEToolKit. The most important module of the MOIRAEToolKit,
the Code Generator, is presented in the section 5. The article ends with a simple
example, presented in section 6 followed by the conclusions and future lines
shown in section 7.
This work has been partially supported by UPM project #14494.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 1069–1078, 2003.
c Springer-Verlag Berlin Heidelberg 2003

1070

2

K. Leal et al.

Policy/Mechanism Model

Complex applications like operating systems (OS) and database management
systems (DBMS) have to provide both eﬃcient resource management (performance) and extensibility with new requirements, services and tasks (ﬂexibility).
These applications are designed following a clear distintion between (i) operations and functions provided by the system and (ii) the rules under which these
functions are managed. These rules decide when and what functions are used
in order to perform user tasks, as well as which parameters and options conﬁgure them. These functions are called mechanisms and they are implemented for
each of the simple operations the system provides. The policies are the separate
descriptions of those management and conﬁguration rules.
The Policy/Management model (P/M model) is a well-known technique in
the design of complex systems. P/M models is the foundation of the MOIRAE
reference architecture. This architecture extends how this technique has been
used, making it applicable beyond the design phase. A MOIRAE component is
an element that implements one or more mechanisms that can be managed by
dynamic runtime-conﬁgurable policies.

3

MOIRAE Architecture

MOIRAE [2] is a reference architecture described by 4 diﬀerent models:
➀ Component Model: Describes the atomic elements of the architecture.
These elements are called components. This model deﬁnes each of the modules which the elements are divided into. Some of these parts have speciﬁc
functionalities others depend on the operational function provided by the
component.
➁ Relationship Model: Speciﬁes the diﬀerent communication methods
among the components. This model deﬁnes relationship schemas depending on the cardinality of the members (unicast vs multicast), the scope of
the relationship (public vs private) and the addressing methods (public vs
anonymous).
➂ Architecture Model: Combines Relationship and Component Models to
describe how the architecture solves execution problems. This model provides
a description of the cooperative work performed by the architecture.
➃ Control Model: Deﬁnes how control decisions are performed. This model
shows the mechanism used to solve control conﬂicts when they arise. Control
Model is based on the concept of control policies.
3.1

Component Model

This Model describes the structure that every element takes as a skeleton.
MOIRAE architecture provides control features based on the functionalities provided by each of the elements. These atomic elements are called components.

MOIRAE – An Innovative Component Architecture

1071

Following the M/P paradigm each component deﬁnes two kinds of functions,
operational functions and control functions. Each of these groups of functions
is implemented in a plane. The Operational Plane includes all the modules that
provide the operational functions. The Control Plane provides the features necessary to control the other plane as well as to interact with other Control Planes.
The Control Plane of a MOIRAE component is a control agent itself. The
elements inside of this plane are:
➀ Event Sensor : This element detects the abnormal situations that occurs
inside the operational part of the component. These sensors are activated as
asynchronous messages.
➁ Actors: They are a group of functions executed by the control plane to modify
the operational plane. Using these functions the control part can execute
actions, modify parameters or enable/disable operational functionalities.
➂ Sensors: These elements are used when the control plane wants to scan the
situations of the operational part. As a diﬀerence with the Event Sersors,
these are synchronous information-gathering mechanisms.
➃ Control Interface: This module allows the control plane to interact with the
control planes of other components.
➄ Policy Engine: It is the central module of the control part. This element
manages the decisions taken by the control plane. When the control plane is
summoned, either by a conﬂict (via event sensor ) or by another component
(via control interface), the policy engine is activated. This module may use
the sensors to evaluate the status of the operational plane and also interact
with other control components to decide the actions to be performed. These
actions are either executed locally by the actors or submitted to another
component using the control interface.
3.2

Relationship and Architecture Models

These two models describe the possible organization schemas of the components
in the system. The Relationship Model deﬁnes the cardinality, scope and visibility of component relations. The organization graphs, interaction topologies of
the components, are classiﬁed by the Architecture Model. Both Models are very
important parts of the MOIRAE architecture, but they are not so related with
the development environment MOIRAEToolKit. For a detailed description of
this model see [2].
3.3

Control Model

The last Model of the architecture is the Control Model. This Model shows
how control decisions are taken either locally or as a contribution of diﬀerent
control planes. When the control plane is activated, for example when a conﬂict is
detected by the event sensor, the policy engine evaluates the alternatives to solve
the problem. As a result, the control plane returns a sequence of actions to be
performed to solve the conﬂict. For complex problems the control plane would be

1072

K. Leal et al.

unable to achieve an appropriate solution by itself. Control Model speciﬁes three
diﬀerent control actions that rule the cooperative solution of complex problems:
❒ Control Propagation: When a control plane is unable to solve a problem
it submits the problem description (e.g.: the conﬂict) and any additional
information to the control plane immediately superior in the hierarchy.
❒ Control Delegation: After receiving a control propagation from a lower
element, the upper element may take three diﬀerent alternatives:
➀ If it is also unable to solve the problem it propagates up the conﬂict as
well.
➁ If it can solve the problem, it may reply to the original component with
the sequence of actions necessary to solve the problem. This original
component executes these actions.
➂ In the last situation it is also possible that the component, instead of
replying with the sequence of actions the component may provide the
p-DB information necessary to solve the problem in the lower component. This information could be used also in any future situation. This
alternative is called Control Delegation.
❒ Control Revoke: This action is the opposite to the control delegation one.
Using this control action any upper component in the hierarchy may delete
information from the p-DB of any lower element. This action may be executed anytime and not only as a response of a control propagation.

Fig. 1. Policy management actions

4

MOIRAE ToolKit

MOIRAEToolKit is a collection of tools (as introduced by ﬁgure 2) to develop
the components of the MOIRAE control architecture presented before. The ﬁgure shows the relationship among the diﬀerent elements that are included in
MOIRAE environment. These tools are:
❒
❒
❒
❒

Analyser (MOIRAE Parser )
Component Compiler
Policy Veriﬁer
Document Generator

MOIRAE – An Innovative Component Architecture

1073

Fig. 2. MOIRAE tools.

4.1

Analyser (MOIRAE Parser )

This ﬁrst module deals with lexical, syntactic and semantic (L/S/S) analysis
of component description and implementation ﬁles (.moi ). This element is the
single frontend of most of the modules as its output is consumed by the diﬀerent
tools of this suit. This result is an internal structure called IR (Internal Representation). This structure is an abstract representation of the useful information
provided by user through .moi ﬁle. This representation is a L/S/S-proven description of the deﬁned component itself as well as the rest of the components it
is related with. This module it is not actually a tool but it is linked with all the
other modules of the systems in order to perform this common veriﬁcation and
analysis tasks.
4.2

Components Compiler

This module is basically a code generator tool. It takes the descriptive information represented by the IR and, depending on the library structure, it generates
several high level language ﬁles, speciﬁcally in C++. Some of the classes generated by this tool, inherit from library classes. The others ﬁles depend directly
on the options speciﬁed by user, such as the kind of middleware or the type of
policy engine. This module is a key element of the MOIRAEToolKit because it
provides part of the ﬁnal code that will be compiled and linked when the actual
component is built.
4.3

Policy Veriﬁer

Policy Veriﬁer is the second tool of the development environment. This module
takes one or more component descriptions (IR structures) and a list of policy

1074

K. Leal et al.

ﬁles. This module veriﬁes whether the set of rules and procedures deﬁned by
the policies are able to solve all the possible conﬂicts generated by this group of
components. As a result this module reports if the components can be properly
controlled by the provided policies.
The veriﬁcations performed by this tool are approached in the following ways:
➀
➁
➂
➃
4.4

Component local veriﬁcation: implementation of all the functions declared.
Component global veriﬁcation: references to other components functions.
All events are covered by policies rules.
Conﬂicts and inﬁnite loops detection.
Document Generator

The last tool of MOIRAE environment generates documentation based on
HTML and LATEX ﬁles, that describes services, commands and other component elements as well as it’s implementation to the detail level deﬁned in the
.moi ﬁles.
This module reports all the information related to components in a more
bright and compact way. In a future, this mechanism could be extended to
generate component description tags to be processed by other development environment or registering services.

5

Component Code Generation

The source ﬁle of a component description is the .moi ﬁle. Using this ﬁle the
Code Generator creates several C++ ﬁles that includes subclasses inherited from
the MOIRAE component library classes. All the code generated deals with communication, control and registration operations. The actual operations (the tasks
performed by the component) should be programmed as diﬀerent ﬁles that will
be compiled when the executable ﬁle is linked. A set of auxiliar ﬁles required
for the compilation and execution of the component are also generated by this
mechanism. These ﬁles are a default Makeﬁle and several scripts to start/stop
component execution. The .moi ﬁle has a source code according to the MOIRAE
component description syntax. This description represents a component deﬁnition and it has to be provided by the developer.
The Code Generator module (presented above), uses the IR (Internal Representation) structure generated by the MOIRAE Parser. Figure 3 shows the
complete sequence of the code generation procedure. In this ﬁgure, it can be
seen that Code Generator uses IR class to generate the result set of ﬁles. Code
Generator obtains component description from IR structure and generates subclasses that inherit from de MOIRAE library.
5.1

MOIRAE Library

MOIRAE library is a set of C++ classes each of which represents part of the
structure and functionalities of a generic MOIRAE component. For example,

MOIRAE – An Innovative Component Architecture

1075

Fig. 3. Relationships between Code Generator, IR, and MOIRAE Parser

there is a class that represents the ’Operational Interface’ of a MOIRAE component, as well as the ’Control Plane’, ’Event Sensors’ and so on. Using the
attributes and methods contained in library classes, the features provided by a
generic MOIRAE component can be obtained.
Code Generator creates a set of classes inherited from library classes, these
new classes are intended to contain the speciﬁc functionalities of each of the
components user speciﬁes.
MOIRAE library includes the following classes:
❒ The diﬀerent ways of communication between two agents (sockets or
KQML), that is, between diﬀerent control planes of several components.
❒ The diﬀerent kinds of information that ’Policies Engine’ and ’Control Plane’
need to exchange.
❒ The diﬀerent kinds of policies engines (reactive, deliberative . . . )
❒ The basic skeleton of an operational or command procedures implementation, and so on . . .
One of the advantages of the library is that it is independent from the ﬁnal technology the user selects for the component. Component Compiler must
generate code appropriate technology selected.
MOIRAE library presents diﬀerent hierarchies for those elements who need
a detailed level of particularization. It is the case of policy engines and communication mechanisms between agents. It does not matter the kind of policy
engine, all of them work in the same way because they provide the same methods
inherited from class at the top level.
5.2

Parser + IR

In this section we will explain the two auxiliar components used by Code Generator, MOIRAE Parser and IR structure.

1076

K. Leal et al.

MOIRAE Parser. MOIRAE Parser makes lexical, syntactic and semantic
analysis of a MOIRAE component deﬁnition.
This component has two elements. The ﬁrst one (called Scanner), performs
lexical analysis of the MOIRAE ﬁle, this ﬁle has .moi extension. The second
one, named Parser, contains the syntactic and semantic analyser.
In general, MOIRAE Parser has as an input ﬁle with .moi extension (the
deﬁnition of the component to be implemented), and as an output, stores all
useful data in the internal storage structure named IR.
IR (Internal Representation). The IR, is a intermediate storage structure,
composed by lists, which stores all information from MOIRAE ﬁles. Each list is
a set of instances of classes which representes concepts like services, commands,
events or relationships of a MOIRAE component. IR is generated by MOIRAE
Parser, and it is used as a bridge tool between Code Generator and Parser.
In addition, IR structure is requested by the rest of the MOIRAE tools.
Once the MOIRE Parser has been executed the IR is taken as the validated
representation of the component. An IR structure stores all information from the
component deﬁnition ﬁles. This representation is not a ﬁle format rather than a
memory structure to publish component description for other MOIRAEToolKit
modules.
All the modules of the system are linked with the MOIRAE Parser code in
order to call it to obtain an IR representation from a .moi ﬁle.

6

Example

This example shows how a component named Account is developed using
the MOIRAEToolKit environment. Account component implements the typical functions that we can do with a bank account like deposit and withdraw an
amount of money, and gets actual balance of the account.
The next code, represents a MOIRAE deﬁnition of the Account component,
following MOIRAE syntaxis. As part of the design this component has a control
event redNumbers, that the component will throw when the balance of account
is negative.
// Set middleware CORBA MICO
#option middleware = CORBA MICO
component Account {
// Put implementation class
#option imple modulo op = "Implementation"
events { // Events Declaration
redNumbers() ; }
services { // Services Declaration
void deposit ( long amount );
void withdraw( long amount ) throw (redNumbers);
long balance (); }
}

MOIRAE – An Innovative Component Architecture

1077

The implementation class has the implementation of the three services
(deposit, withdraw and balance). Once the .moi ﬁle is programmed, the code
generator program is ran with the sentences shown in:
[jdoe@server] moirae Account.moi
[jdoe@server] make
[jdoe@server] Account myAccount accounts

When we typed the ﬁrst sentence moirae program has generated the ﬁles
shown in the next table.
Generated Files
Files depending of CORBA middleware
Account.idl Main.cpp
Account impl.hpp/cpp
Files inherited from Moirae Library
Component Account.hpp/cpp
ControlPlane Account.hpp/cpp
OperationalPlane Account.hpp/cpp
ControlInterface Account.hpp/cpp
OperationalModule Account.hpp/.cpp PoliciesEngine Account.hpp/cpp
OperacionalInterface Account.hpp/cpp
EventSensor redNumbers Account.hpp/cpp
Files depending of program language, C++
Makeﬁle
MakeVars
The Makeﬁle generated is used by the make tool. The second sentence shows
how the Account executable is built. The third sentence is needed to run the
component. The ﬁrst parameter speciﬁcs the name of the instance, the second
parameter speciﬁcs the context name where the instances are registered. Now,
myAccount instance is running on the server side. On the client side, we run a
C++ program which uses the Account component.
[jwhy@client] Client myAccount accounts

This program uses a reference of myAccount object. The output of the client
program is the set of next sentences: Deposit: 700 euros

Balance: 700 euros
Withdraw: 600 euros
Balance: 100 euros
Withdraw: 150 euros1
Exception: MOIRAE2

The trace message printed by the server is: Throw redNumbers event3

1

2
3

At this moment myAccount component throws redNumbers event, and its control
plane captures the event and deals with the procedures described by the policy rules.
One of the possible actions proformed by the control plane could be user notiﬁcation
using a remote exception, other possible actions are accept the negative balance or
report to higher level component about possible penalties.
Client captures MOIRAE exception and prints the message “Exception: MOIRAE”.
The object server named myAccount throws redNumbers event: Control plane summoned.

1078

7

K. Leal et al.

Conclusion and Future Lines

MOIRAE is a new generic architecture for distributed component environments.
One of the key elements of this new architecture is the possibility to deal with
distributed control policies in order to provide hierarchical management facilites. Using simple, but ﬂexible, distributed control mechanisms, it is possible
to change during runtime the behaviour and control procedures the system is
ruled by.
MOIRAEToolKit is a development environment designed to create MOIRAE
components. Using its tools a new component can be deﬁned using a description syntax. Code Generator tool uses this component description to create the
code wrapper for the services described by the component. Developers only need
to implement the remote services provided by the component, all the requirements in terms of communication, component registration and advanced control
features are generated by the tool.
Policy Veriﬁer and Document Generator are both tools from the same suit
that checks policy rules against the component deﬁnitions and generates documents with component description.
At the moment, the current version of the MOIRAEToolKit provides only
very simple control plane implementations. This part is the main development
line of this project. A second line is the extension of the validation mechanisms
in order to validate complex situations like event domain edge conditions.
Other minor issues are to extend the number of options that users can specify
for their components. It would be a good idea to provide as much as possible
options, about providing diﬀerent middlewares, policies engines, communication
methods and languages. At the present moment only C++ and CORBA objects
are supported. This suit can be downloaded from HPDA project web site4 .

References
1. Object Management Group. Ccm tutorial. Document: omg/00-06-01, June 2000.
2. Jos´e M. Pe˜
na. Distributed Control Architecture for Data MiningSystems. PhD thesis, DATSI, FI, Universidad Polit´ecnica de Madrid, Spain, June 2001. Spanish title:
´
Arquitectura
Distribuida de Control para Sistemas con Capacidades de Data Mining’.
3. Jos´e M. Pe˜
na, F. Javier Crespo, Ernestina Menasalvas, and Victor Robles. Parallel
data miningexep erimentation using ﬂexible conﬁgurations. LNAI, 2475:441–448,
2002.
4. Jos´e M. Pe˜
na and Ernestina Menasalvas. Towards ﬂexibility in a distributed data
mining framework. In Proceedings of ACM-SIGMOD/PODS 2001, pages 58–61,
2001.
5. Dale Rogerson. Inside COM: Microsoft’s Component Object Model. Microsoft Press,
1997.
6. Sun Microsystems. Enterprise JavaBeans 2.0 speciﬁcation. Whitepaper, Sun Microsystems, 1999.
4

HPDA Project: http://nova.ls.fi.upm.es/hpda

