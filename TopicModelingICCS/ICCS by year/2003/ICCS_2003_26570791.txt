Strategies for the Interactive Resolution of Calculus
Problems
Fernando Díez and Roberto Moriyón
Department of Computer Engineering, Universidad Autónoma de Madrid,
28049 Madrid, Spain
{Fernando.Diez, Roberto.Moriyon}@ii.uam.es

Abstract. In this work we show how MathEdu, an authoring tool for the design
of collections of interactive problems of Mathematics that involve symbolic
computation allows the use of resolution strategies. We also describe the
mechanisms related to these strategies. MathEdu allows for the definition of
interactive problems and their generalization. MathEdu allows also for the
definition of resolution strategies and for the characterization of the cases when
they can be applied. This process is based on the pattern matching of
mathematical expressions. Specific problems are generated in MathEdu from
generalized problem patterns by random generation, and students can solve
them by means of an interactive dialog with the system, that validates the
strategy used by the student and the results of the accomplished tasks.

1 Introduction
In spite of the considerable advances in Human-Computer Interaction at the end of
last century, there is a notorious lack of interactive applications oriented towards the
learning of scientific disciplines, and particularly Mathematics. Among the most
advanced systems of this kind we can mention the following ones: Cognitive Tutor,
[9], is a software implementation of a mathematical curriculum that monitors the
process of problem solving by students and adapts itself to their needs. Calculus
Machina, [8], is a tool that uses a set of algorithms in order to solve a wide variety of
calculus problems and explains the solution in considerable detail. It also allows
students to take an active role in the learning process. Finally, EGrade, [6], is webbased software that automates the assignment, delivering, grading, and guidance for
homework, quizzes, and exams in scientific subjects. The main drawback of the
existing applications of this type is that they are not adapted to the structural
complexity of the knowledge to be learned, including the different strategies and
methods of problem resolution. We shall also point out that the advances by the
Artificial Intelligence community in the development of mechanisms for automated
theorem proving and problem solving, [1], [10], have not been used yet to give
Mathematics tutoring systems more ability to help students in their work.
For example, most tutoring applications that have been developed up to now usually
allow the student to interact with the system either by selecting by means of buttons
the right answers to the questions posed among a predefined set of them or, in more
sophisticated systems, by typing the answers directly. In any case, the system usually
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 791–800, 2003.
© Springer-Verlag Berlin Heidelberg 2003

792

F. Díez and R. Moriyón

does not admit several steps in the resolution of problems, and does not adapt itself in
any way to the information supplied by the student.
In this work, starting from the previous considerations, we describe some relevant
aspects of MathEdu, [4], [5], an authoring tool for the design of courses based on
collections of interactive problems of Mathematics that involve symbolic
computation.
®
MathEdu is implemented on top of Mathematica 1, [11], a system for symbolic
computation that has very powerful pattern matching capabilities. This, together with
its ability to build mathematical symbolic expressions dynamically, makes
Mathematica a particularly suitable tool for the representation and manipulation
needed in the kind of problems we address in this work, as we explain with more
detail in the remaining sections of this work.
MathEdu includes three modules: MathDesigner allows the definition of sets of
problems; MathSolver allows students the interactive resolution of problems, and
MathTrainer teaches students how to solve exercises by solving them step by step
with detailed explanations.
With MathDesigner, teachers can write down problem statements that can be later
generalized by substitution of some parts of the mathematical formulae that appear in
them by any other formula that is appropriate for the same type of problem. Just like
different problems of the same type are solved in a traditional setting some times
similarly, but some other times they are solved by means of different strategies, [7],
teachers can also specify by means of MathDesigner strategies that can be used to
solve different cases of the same general type of problem. The specification of
problem solving strategies by teachers in MathDesigner includes also the definition of
a dialog between the student and the system to take place during the resolution of the
problem.
MathSolver generates randomly specific problems from the generalized problem
patterns defined by the teacher. The resolution of the problems is done by means of an
interactive dialog with the system, that validates the strategy chosen by the student. In
this dialog MathSolver acts as an interpreter of the tasks defined by the teacher, and
takes into account at each step the specifications of mathematical formulae by the
student as an answer to the questions posed by the system. This mechanism allows the
student to communicate with the system at a level of abstraction that is very similar to
the one used by persons in written mathematical texts.
Finally, the exercises solved by MathTrainer can be stated either by the system, by a
teacher or by the student; they must correspond to one of the types defined by the
teacher.
The combined use of MathDesigner together with MathTrainer and MathSolver
allows the design of courses that include both explanations and practice. This is done
by intertwining explanatory static texts with dynamical problem resolutions.
In this paper we shall describe the mechanisms that allow MathEdu to include and
manage strategies for the resolution of problems. The descriptions of the paper are
based on a representative example of an exercise in Integral Calculus. In next section
we introduce this example and give a first description of the main features of
MathEdu at the level of abstraction an advanced user would use to describe it. The
following section includes a description of the way the mathematical knowledge used
1

Mathematica is a registered trademark of Wolfram Research, Inc.

Strategies for the Interactive Resolution of Calculus Problems

793

by MathEdu is represented together with some details about its treatment. Finally, the
last section includes conclusions and plans for future work.

2 Resolution Strategies in MathEdu
In this section we shall describe the mechanisms that lie behind the use of resolution
strategies in MathEdu. We shall do it by means of a simple example, which is
sufficiently representative as to show in a clear context all the main aspects that we
want to point out, including the relevant requirements that MathEdu satisfies. When a
student starts solving a problem interactively with MathSolver, the system shows
him/her the statement in a window where all the steps in the resolution will be
included progressively, together with a palette where one of the strategies that can be
used for the kind of problem to solve can be selected. Figure 1 shows a specific
example of this kind that corresponds to a problem that consists in computing an
indefinite integral. MathEdu does not limit in principle the field of Mathematics or
Physics where it can be used, except for the fact that the resolution of problems must
consist of the application of manipulations to mathematical formulae. Other possible
types of problems are differentiation, computation of limits of functions, resolution of
ordinary differential equations, etc.

Fig. 1. Statement and palette for strategy selection

In this case there are two strategies that can be used to solve the problem: either by
integration by parts or by reducing it through substitution to the integral of a function
x
of e . It is worth mentioning that MathSolver is able to notice directly from the
statement that in this particular case both strategies can be applied, so it will accept
the choice by the student of any of them. In case the student chooses a strategy that
can not be applied, the system will show a message of explanation that will include a
description of the conditions that must be satisfied for the chosen strategy being
acceptable. This default behavior can be changed by the teacher.
MathEdu also allows the teacher to give the student the possibility to do optionals
manipulations to the data of the problem, like algebraic simplifications. For example,

794

F. Díez and R. Moriyón
2

if the student is asked by the system to compute the derivative of (x+1)/(x -1), the
palette for strategy selection can include an option called Make previous
computations. When choosing this, the student can transform the rational fraction to
irreducible form. She/he can also also simplify the result of the problem. In case the
work of the student is being graded by the system, his/her rating will be higher if
simplifications are used.
Before going into the description of the mechanisms behind the management of
resolution strategies we will address some previous questions. The first one is related
to the possibility that there are different cases where the same strategy can be used.
This is obvious in our example, since integrals that can be solved by parts must have
an integrand that is the product of two expressions, according to one of several
possible patterns. The first three possibilities correspond to one of the factors being a
polynomial and the other being either an exponential, a logarithm or a simple
trigonometrical function (sine or cosine). In the fourth case the integrand is the
product of a simple trigonometrical function by an exponential, and in the fifth one it
consists of the product of two simple trigonometrical functions whose arguments are
multiplied by different coefficients. The example in figure 1 corresponds to the fourth
case. Once again, given any problem that corresponds to one of these five cases
MathSolver is able to notice that it can be solved by means of integration by parts.
x
Only in the fourth case it will accept the strategy of reduction to a function of e .
However, the system does not need any explicit information of this kind, since the
teacher who designs a course just has to specify the conditions on the integrand on
which each resolution method can be applied.
Another question to take into account is the way in which the problem is posed. In
principle this can be done either by the system or by a user (student or teacher). In the
last case it is the responsibility of the user to pose a problem that can be solved with
the knowledge that has been incorporated into MathEdu. In the first one, a random
mechanism is used that will be explained next.
First of all, a type of problem must be given. In case the student is following a course,
the type of problem is usually chosen by the system. In other cases it can be chosen
by the tutor or by the student. It can also happen that the purpose of the session is to
check how the student solves the problem that is posed to him/her by a specific
method or methods, or that the use of any strategy that is suitable will be accepted.
We shall assume that we are in this case, the other ones presenting minor changes
with respect to it. In the same way, a strategy and a case must be chosen; similar
questions to the ones commented above must be taken into account for this. Let us
assume that the final decision is to pose a problem that corresponds to the fourth case
among the ones that can be solved by the strategy of integration by parts. The
description of these problems used by MathEdu is that they must ask for the
computation of an indefinite integral of the form

∫ u( x) ⋅V ( x)dx 

(1)

where u(x) must be a simple trigonometric function and V(x) must be an exponential
function. The first condition (the decomposition as a product) is imposed in all the
cases that correspond to the strategy of integration by parts. The integral that appears
in (1) constitutes a generalization of the one in the statement shown in figure 1.

Strategies for the Interactive Resolution of Calculus Problems

795

In general, abstract problems that correspond to a strategy are represented by
statements whose formulae include structural patterns as in (1). The parts of those
structural patterns whose values can change from one specific problem to another, u
and V in our example, are called metavariables. As a part of the design of a set of
interactive problems, the teacher writes down specific problems like the one in figure
1, and then generalizes them by the definition of associated metavariables. This
process is done interactively in the same context where the problems that correspond
to the generalization will be solved, using Programming by Demonstration techniques
[2].
We have already seen that the metavariables that appear in our example must satisfy
some conditions. In general, for each case that corresponds to a given strategy, all the
expressions that can substitute a metavariable in specific problems that correspond to
that case must satisfy a specific condition. This condition can consist in the
expression being a polynomial, an exponential, a simple trigonometric function, etc.
Both the structural patterns that correspond to each strategy, as the one in (1), and the
conditions associated to metavariables and cases are specified by the teacher when
designing the course or set of problems. This specification is not too complex, since it
involves natural mathematical operators.
On the other hand, MathSolver generates problems from abstract problem types by
means of random generation of mathematical expressions. This process has two
interesting features: First, the expressions that are randomly generated are not the
whole formulae that appear in the statement, but some parts of them, that appear as
metavariables in the abstract problem. Moreover, the random expressions can have a
specific structure. In our example, MathSolver would have to chose a random
expression of the form sin(Kx) or cos(Kx) for u(x) and another random expression of
Cx
the form e for V(x). In other examples, the generation of random polynomials or
even the random generation of functions of the form f(g(x)) is needed, as when a
statement of a problem that can be solved by change of variables is wanted. Hence,
besides conditions, each case and each metavariable have also an associated random
generator of expressions that substitutes the metavariable in the corresponding pattern
when generating specific problems for the desired abstract case problem.
We shall describe now the mechanisms involved when verifying the correctness of
the selection of a strategy by the student for the resolution of a given problem.
Although problems are generated according to a particular case for a given strategy
and problem type, we have already seen that there is the possibility that other
strategies can be used for their resolution. For example, in the case of the problem
stated in figure 1 the student can choose the use of integration by parts if the problem
has been generated from this strategy, but also if it has been generated from the
strategy of reduction to the computation of an integral involving only exponentials.
Hence, the system must verify directly from the type of problem, the specific
formulae that appear in its statement, and the strategy selected by the student, whether
the chosen strategy can be used or not in the resolution of the problem.
This verification can be done as follows: for each problem case that is associated to
the strategy of the student, the system tries to match all the formulae in the statement
of the problem with the complete conditional pattern that corresponds to the case, that
takes into account the conditions imposed on the metavariables. In our example, the
formula

796

F. Díez and R. Moriyón

∫ Sin(2 x) ⋅ e

3x

dx

is matched against the conditional pattern

∫ u _? SimpleTrigQ ⋅V _? ExpQdx

(2)

together with four other ones, giving in this case a positive answer with the
substitution

u
V

sin(2x)
H3x

The adaptation of the system we have just described, accepting resolution methods
proposed by the student different from the one that was originally planned, has no
precedents in other tutoring systems.
Once the choice of a strategy made by the student has been validated, the system
starts a dialog with the student based on the interpretation and interactive execution of
the sequence of tasks attached to the selected strategy. For example, when solving the
problem shown in figure 1, the system will ask the student about the next steps to be
done, including among several possibilities the determination of the values of u and
V. There is a library of predefined tasks and dialog fragments that can be used by the
designers. These include choices to be made by the student, input of mathematical
functions by the student and the resolution of simpler subproblems whose results can
be used in the resolution of the previous problem. For example, the computation of an
integral by parts involves the resolution of two simpler integrals: the integral of V,
that usually is an immediate one, and another one obtained from the result of this
previous subproblem and by differentiating the metavariable u. Similarly, the
computation of the integral of a rational function like

3x2 + 1
∫ x3 + x dx
can be done through a change of variables that leads to the resolution of a simpler
integral, and the solution of this subproblem is used in order to find the solution to the
original one. Allowing the resolution of problems in terms of simple steps and the
resolution of subproblems is an essential aspect of MathEdu functional design.
Mathematica, with its extraordinary capability of symbolic manipulation and its
powerful pattern matching system, is especially suitable for the kind of work
described up to now. This includes the dynamical execution at a symbolic level of
complex mathematical computations on formulae that are not known at the instant the
system is developed, in a way similar to the manipulation of mathematical formulae
by persons, and the determination of deep structural properties of mathematical
expressions, like the ones mentioned in the previous paragraphs. Conditions and
generators that are needed in the design process are included in a library that is
interpreted at execution time. They can reduce considerably the amount of work
during the design of a course that involves a set of problems. However, together with
these features, Mathematica is especially limited from the point of view of the kind of

Strategies for the Interactive Resolution of Calculus Problems

797

interaction allowed to the user with the system and the way this interaction can be
designed and programmed.

3 Representation of Mathematical Knowledge in MathEdu
The knowledge needed to accomplish the tasks described in the previous section
involves standard knowledge representation plus specific knowledge related to
mathematical formulae, their manipulation and pattern matching. The fundamental
blocks that conform this knowledge are mathematical expressions (MEs), ME patterns
and ME manipulators, which transform them by means of the usual symbolic
computations people do when working on Mathematics. ME patterns have a similar
structure to MEs, and can include references to metavariables. Hence, a formula like
the one in (1) can be represented by means of a ME pattern in a context in which both
u and V are metavariables. A mathematical text is a sequence of plain text and ME
patterns. Metavariables can be represented by means of a condition that is an ME
pattern and a generator that is an ME manipulator. Problem cases, a more complex
concept, consist essentially of a generic problem statement (a mathematical text) and
a sequence of metavariables. Dialog components define tasks that are part of a
resolution strategy and depend on the type of the component and messages to be used
in the dialog. Strategies are formed by the associated ME patterns, problem cases and
a sequence of interactive tasks. And finally, the main concept used in the design of
MathEdu is that of a Problem Type, that consists of a generic statement, and a set of
strategies.
With respect to the course structure, a course unit is formed by a problem case which
leads to a specific problem to be solved by the system step by step, including
explanations to the student about its resolution, corresponding mathematical texts that
serve as introduction and afterwards explanations, and other specific problems to be
solved interactively by the student. Next, a paragraph consists of a strategy, an
introductory mathematical text, a sequence of units with problem cases that
correspond to that strategy, and a set of problems that correspond to the different
problem cases. Finally, a chapter consists of a problem type, an introductory
mathematical text, a series of paragraphs whose strategies correspond to the problem
type, and a sequence of specific problems to be solved.
The representation of all the previous concepts by data structures is done in MathEdu
by means of the Mathematica system, that allows symbolic structures to be
interleaved with the more standard ones, and whose strong symbolic capabilities are
specially suited for this integration.
Now we are prepared to point out some of the aspects related to the mechanisms
explained in the previous sections that need additional clarification. Figure 2 shows a
partial textual representation of the data structures associated to the type of problem
that corresponds to the one in figure 1, which consists in the computation of an
indefinite integral. We shall start by the description of the process of random exercise
generation. Figure 2 shows the order in which the different steps involved are taken.
We assume that the selected problem type and strategy are Integration and ByParts.
At this point in the generation process, the deep structure of the statement and the
resolution tasks of the exercise are univocally determined. Now, the statement must
be built. This is done in four steps. In the first one, the symbols of the metavariables

798

F. Díez and R. Moriyón

are selected. Next (step 2), the system activates the generators that correspond to each
metavariable. These generators build the corresponding mathematical structures
(step3), which are propagated and substituted in the corresponding formulae patterns
and finally in all the formulae in the statement (step 4).

Integration[
"Compute
$integral$",
Strategies[
ByParts[
"Integral by parts",
"This is an integral of the product …",
formulaePatterns[integral •

∫u

−

⋅ V− dx ]],

cases[{
metaVarsSpec[
{u , SimpleTrigQ, simpleTrigGen},
{V , ExpQ,
expGen}],
metaVarsSpec[
{u , PolynomialQ, polyGen[2,1]},
{V , SimpleTrigQ, simpleTrigGen}],
… (more cases)}],
resolutionActions[{
exprInput[“Type the value of u”, stdntu, u],
exprInput[“Type the value of V”, stdntV, V],
exprInput[“Compute the differential of [u]”, stdntdu, D[u, x]],
exprInput[“Compute v by integrating [V]”, stdntv,

∫ V dx ],

solve[“Compute now the subproblem”, integration ,
input[integral •

∫ V ⋅ D[u, x] dx ],

output[subproblemResult • exerciseSolution]],
…, (more task dialogs)}]]
…(more strategies)]]
Fig. 2. Use of knowledge representation in MathEdu: Problem type

In what follows we shall describe the validation of the strategy proposed by the
student during the interactive resolution of a problem. The critical point is the
construction of the full pattern whose satisfaction must be checked for every formula
and each problem case. This pattern is formed as the conjunction of the ME pattern
associated to the strategy ( ∫ u − ⋅ V − dx in figure 2), and the different conditional
patterns associated to the problem case under study (SimpleTrigQ and ExpQ in the
first case of figure 2), that correspond to all the metavariables. In particular, in our
example we get the pattern (2). The comparison with this pattern is equivalent to the
successive comparison with all the patterns that correspond to the metavariables under
the problem case being analyzed.

Strategies for the Interactive Resolution of Calculus Problems

799

Finally, Figure 2 also shows the structures that correspond to resolution actions. We
shall just point out the solve action, that gives rise to a recursive call to the
MathSolver or MathTrainer main routine in order to solve a subproblem. The solve
action specifies a specific problem to be solved by means of a problem type and the
specific values for its metavariables (input) in terms of the data available in the
resolution of the original problem. It also indicates how the result of the subproblem
is incorporated to metavariables of the original problem (output).
The statement in figure 1 is one of the possible results of this process. Once the
statement has been generated and shown to the student in the resolution notebook, the
interactive resolution can start according to the explanations in the previous section.

4 Conclusions
In this work we have seen how pattern matching of mathematical formulae allows the
automatic determination of the resolution strategies that can be applied to problems of
Mathematics that involve symbolic computation. We have also seen how the same
techniques are useful for the automatic generation of problems where a particular
strategy can be applied. Moreover, when more that one strategy can be used for the
resolution of a problem, this allows a computer based tutoring system to adapt itself to
the strategy selected for a student in case it is valid. The MathEdu system includes
these capabilities.
In the near future we are planning to add more functionality to MathEdu by means of
the inclusion of a model of the student that will allow the system to determine the
capabilities and skills of each application user. This will allow the presentation of
exercises adapted to the skills of the student. Therefore the student will see the
tutoring system as a collaborator.
We shall continue working on the deep structure of mathematical objects, their
representations and their interactions [3], in order to extend the fields of application of
MathEdu.
Finally, we are also conducting work intended to the improvement of MathEdu in
order to allow the possibility to use it through Internet.

Acknowledgements. This work has been funded by the Plan Nacional de I+D of
Spain, project TEL1999-0181.

References
1.

2.

Castells, P., Moriyón, R., Saiz, F.: Solving Mathematical Problems that Involve Reasoning
and Calculations. In Proc. Golden West IV International Conference on Intelligent
Systems. S. Louis, ed. International Society for Computers and Their Applications, USA
(1995)
Cypher, A.: Watch what I do. Programming by Demonstration. The MIT Press,
Cambridge, MA, USA (1993)

800
3.

F. Díez and R. Moriyón

Díez, F., García, M.C.: Supervisión automática del aprendizaje matemático. Proc. 8th
International Congress on Mathematical Education (ICME-8). Sevilla, Spain (1996)
4. Díez, F., Moriyón, R.: Doing Mathematics with MathEdu. IXth Conference of Mathematics/Science Education & Technology. Association for the Advancement of Computing
in Education (AACE) (1999)
5. Díez, F., Moriyón, R.: Teaching Mathematics by Means of MathTrainer. XIIth
International Conference of the Society for Information Technology & Teacher Education.
Association for the Advancement of Computing in Education (AACE) (2001)
6. Orr, J.L., Franklin, B.: Egrade: Student Learning Guide. John Wiley and Sons (2000)
7. Pitrat, J. Métacoinnaisance, futur de l'intelligence artificielle. Hermes, Paris (1990)
8. Quinney, D.: Calculus Machina: An intelligent tutor providing computer based support for
teaching undergraduate calculus. Proc. 2nd Int. Conference on the Teaching of
Mathematics. Hersonissos, Crete (2002)
9. Ritter, S., Koedinger, K. R.: An architecture for plug-in tutor agents. Journal of Artificial
Intelligence in Education, 7 (1996) 315–347.
10. Voronkov, A., ed.: Proc. CADE-18. Lecture Notes in Computer Science. Springer Verlag
(2002)
11. Wolfram, S.: The Mathematica Book, 4th Edition. Cambridge University Press (1999)

