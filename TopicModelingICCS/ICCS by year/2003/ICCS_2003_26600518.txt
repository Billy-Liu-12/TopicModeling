Reliability Problem on All Pairs Quickest Paths
2,*

3

Young-Cheol Bang1, Hyunseung Choo , and Youngsong Mun
1

Department of Computer Engineering, Korea Polytechnic University,
Kyunggi-Do, KOREA
ybang@kpu.ac.kr
2
School of Information and Communication Engineering
Sungkyunkwan University, Suwon 440-746, KOREA
choo@ece.skku.ac.kr
3

School of Computing, Soongsil University, Seoul, KOREA
mun@computing.ssu.ac.kr

Abstract. The reliability problem of the quickest path deals with the transmission of a message of size σ from a source to a destination with both the minimum end-to-end delay and the reliability of the path over a network with bandwidth, delay, and probability of fault free on the links. For any value of message
2
size σ , we propose O(n m) time algorithm for all-pairs quickest most reliable
path problem, where n and m are the number of nodes and the number of arcs or
links in the network, respectively.

1 Introduction
We consider point-to-point computer networks represented by a graph G = (V, A) with
n nodes and m arcs or links. Any node can be reached from any other node in this
network, and two nodes are connected by at most single directed link in each direction. Each directed link l = (i, j) ∈ A has a bandwidth B(l) ≥ 0, delay D(l) ≥ 0, and
probability of fault free 0 ≤ π (l) ≤ 1. A message of σ units can be sent along the
link l in T(l) σ / B(l) + D(l) time with reliability π (l) as in [6].
Consider a simple path P from i0 to ik given by (i0, i1), (i1, i2), …, (ik – 1, ik), where (ij,
ij + 1) ∈ A, for j = 0, 1, 2, …, (k - 1), and all i0, i1, …, ik are distinct. Subsequently, a
simple path is referred to simply as a path. The delay of this path P, denoted by D[P],
k −1

is given by

∑ D(l j ) , where lj = (ij, ij + 1). The bandwidth of this path is defined as

j =0
k −1

k −1

j =0

j =0

B(P) = min B(l j ) . The reliability of P, denoted by R(P), is Π π (i j , i j +1 ) . The endto-end delay of the path P in transmitting a message of size σ is T(P) = σ / B(P) +
D[P] with reliability R(P).
* Corresponding Author
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2660, pp. 518–523, 2003.
© Springer-Verlag Berlin Heidelberg 2003

Reliability Problem on All Pairs Quickest Paths

519

The path P from s to d is the most reliable (MR) if R(P) is the maximum among all
paths from s to d. The path P from s to d is the quickest for message size σ if T(P) is
the maximum among all paths from s to d. The path P is the quickest most reliable if it
is the quickest path to transmit σ units among all MR paths from s to d .
Determining the end-to-end delay paths is very critical part of achieving QoS
(Quality of Service) in wide area network. One of the well-known routing algorithms
to support QoS is the quickest path algorithm in networks with bandwidth and delay
constraints. The quickest path problem was first introduced by Moore [3] and formulated by Chen and Chin [1]. Due to its importance in the computer network, the problem received strong attention in the area of operations research and was extensively
studied by Rosen et al. [5], Rao and Batsell [4], D.T. Lee [2], and Bang et al. [7]. In
real-life computer networks, communication links may fail, and hence it is important
to determine quickest paths that are reliable as well. Recently, such reliability aspects
have been studied by Xue[6], and O(rm + rnlogn) time algorithms were proposed for
computing both QMR and the most reliable quickest (MRQ) path from a source to
destination when a message size σ is given, where r is the number of distinct link
bandwidths [6].
In this paper, we consider all-pairs QMR paths of which it is very difficult to derive
an efficient algorithm in terms of time-complexity. Since MRQ is relatively easy, we
do not consider the QMR algorithm. The all-pairs version of the classical quickest
2
path problem was solved in [2] with time complexity of O(mn ). By applying the algorithm of Xue [6] to compute all-pairs QMR algorithm, the time complexity for the
2
algorithm is O(rnm + rn logn) with n nodes, m links, and r distinct bandwidth in the
2
network. In this paper, we present O(mn ) time algorithm to compute all-pairs QMR
paths, which match the best-known complexity for the all-pairs classical quickest path
problem.
The rest of paper is organized as follows. In section 2, we present details of algorithm to compute the QMR paths for all pairs of nodes in a given network. In section
3, summary of our research is presented.

2 The Quickest Most Reliable Paths
As introduced, the QMR path P is quickest among all MR paths so that the simplest
method is to compute all MR paths from source s to destination t and then select the
quickest path among such paths. Since the number of all MR paths is possibly exponential, the most reliable path network (MRPN) was introduced in [6] to derive an
efficient polynomial time algorithm to compute the QMR path. A MRPN, originally
called shortest path network (SPN) in [6], is a directed and acyclic subnetwork of G
that contains all MR paths from s to any other t ∈ V.
A MR path can be computed by invocating the shortest path algorithm with new
weight π ’ such that π ’ (l) = log(1/ π (l)), where the weight of a path is the sum of the
weights of its links. However there can be more than one MR paths from which QMR
path may be chosen. To account for such paths, we should modify a classical shortest

520

Y.-C. Bang, H. Choo, and Y. Mun

path algorithm such as Dijkstra’s shortest path algorithm that can compute at most one
MR path.
Fig.1 illustrates one-to-all MRPN. Let a be the source in G. Then, the subnetwork
illustrated in (b) is the MRPN rooted at a. As shown in (b), any path from a is the MR
path. However, this property does not hold for all-pairs MR paths. Figure 2 represents
the all-pairs MRPN (AMRPN) after merging all MR paths for all pairs of nodes in G.
As shown in Figure 2, a path P(a, b) is the MR path from a to b and a path P(b, c) is
the MR path from b to c, but P(a, b, c) is not the MR path. We call the path like P(a,
b, c) as the redundant path (RP). To solve the problem caused by RPs, we introduce
the labeling technique such that links on any MR path are labeled with sourcedestination pair. Since single link may be included in multiple MR paths, it may contain multiple labels. Thus, every link on a QMR path has at least one same label.
0.3

b
0.2

a

0.8
0.4

0.3

c

c

b
0.2

0.2 0.1

a

0.5

0.8
0.5

0.4

0.1

d

e

0.2

d

(a)

0.2

e

(b)

Fig. 1. (a) Network G (b) Subnetwork after merging all the most reliable paths from a to every
other node is G; Number in each link represents

π ’ (e).

Once AMRPN is constructed by merging all labeled links of all the MR paths, Allpairs Quickest Path algorithm (AQP) [2] is applied to AMRPN. As shown in Fig2,
since AMRPN may consist of redundant paths, the classical AQP may compute the
quickest paths that are not the MR paths. Thus, AQP should be modified to ensure that
only edges on appropriate MR paths are considered in computing QMR paths
Our algorithm consists of following three summarized steps.
Compute all the MR paths for each pair of nodes i, j ∈ V, and merge such
1.
paths to construct AMRPN.
Label each link in AMRPN to distinguish redundant paths
2.
Compute all pairs quickest paths of AMRPN with enhancements.
3.
In order to compute all the MR paths, let us define the predecessor data structure as
a two dimensional array pred[i, j] for i, j ∈ V, where each element of the array points to
a linked list. If pred[i, j] → p → q, then there are two paths from i to j with one of
them passing through the link (p, j) and the other through the link (q, j). Thus the data
structure pred can store all MR paths for every pair of nodes i, j ∈ V .
k −1

Let Φ [i, j] =

∑π (l ) , where l
’

e=0

e

e

= (ie, ie + 1). Let τ [i, j] be minimum among all

Reliability Problem on All Pairs Quickest Paths

521

Φ [i, j]. Then we first compute τ [i, j] for all pairs of node (i, j) with i, j ∈ V. As
shown in algorithm AQMR, whenever we find Φ [i, j] such that Φ [i, j] = τ [i, j],
new predecessor of node j is added to the list of pred[i, j]. Let it call elm. Since at least
one of the MR paths from s to j passes through a link (elm, j), the MRPN can be constructed by merging links (elm, j) for all j ∈ V.
The labeling process can be easily done by backtracking each MR path from every t
∈ V to s. If a link (i, j) is on the MR path from s to t, then Lij[s, t] is marked, where Lij
is the n x n matrix with n = |V|. By doing so, we may distinguish each link used by
different MR paths. Once all links in each MR path are labeled, AMRPN can be constructed by merging all MR paths with labeled links. The following algorithm is to
construct AMRPN with labeled links.
b
0.2

a

0.8
0.4

0.3

0.3

c

0.2 0.1
0.5

0.1

d

0.2

e

Fig. 2. Subnetwork after merging all the most reliable paths for all pairs of nodes in G; Number
in each link represents

π ’ (e).

Algorithm AMRPN
Comment : Suppose τ [u, v] are pre-computed for all pairs of nodes (u, v) with u, v
∈V
1. Φ [u, v] = ∞ for all pairs of nodes (u, v) with u, v ∈ V
2. for each node s ∈ V do
Φ [s, s] = 0
3.
4.
pred[s, v] = null for all v ∈ V
5.
Q ← V[G]
6.
while Q ≠ ∅ do
7.
u ← a node with minimum of Φ [s, v] from Q
8.
for each vertex v ∈ Adj[u] do
9.

if Φ [s, v]

≥ Φ [s, u] + π ’ [u, v] then

Φ [s, v] = Φ [s, u] + π ’ [u, v]
10.
11.
if Φ [s, v] = τ [s, v] then
12.
pred[s, v] → elm = u
13. for each node u ∈ V do
14. for each node v ∈ V do
15.
backtrack every path from v to u.
16.
if a link (i, j) is on a path from s to t then
17.
mark Lij[u, v]

522

Y.-C. Bang, H. Choo, and Y. Mun

18. for each node u ∈ V do
19. for each node v ∈ V do
20.
while pred[u, v] ≠ Null do
21.
add link (pred[u, v] → elm, v) to AMRPN
Lines 1–12 are modifications of Dijkstra’s shortest path algorithm to compute allpairs MR paths. In each iteration, line 11 checks if Φ [s, v] = τ [s, v]. If so, a predecessor of v is added to list of pred[s, v]. This process can be computed in O(nm +
2
n logn) by using Fibonacci heap [8]. Once all-pairs MR paths are determined, each
MR path is labeled with (s, t) pair in lines 13-17 by backtracking each path from t to s.
Since there are at most m links to be traveled for backtracking from each destination to
single source, it takes at most O(nm) to label. Thus, the time-complexity of this proc2
ess for all pairs of nodes is O(n m). Lines 18-21 are the process to compute AMRPN
by merging links of all-pairs MR paths. Thus the algorithm AMRPN can be con2
structed in O(n m).
To determine all-pairs QMR paths, we use Lij [s, t] which ensures that link (i, j) is
on a MR path from s to t. If Lij [s, t] is marked then link (i, j) is on the MR path from s
to t. Thus, (i, j) can be considered in computing a QMR path from s to t. Otherwise, (i,
j) is ignored.
The following algorithm AQMR is to compute all-pairs QMR path. Let d[u, v] and
D(u, v) be the delay of the quickest path from u to v and the delay of link (u, v), respectively at any iteration of the algorithm. The links of AMRPN are considered in the
non-increasing order in lines 4-11; top operation of line 5 returns the top element and
removes it from the heap. In each iteration, the chosen link (i, j) is checked if it is on
some MR path from u to v in line 8. If yes, the algorithm is identical to that in [3]: it
checks it the path via (i, j) is quicker than the quickest path computed so far, and replaces the latter if so. If not, this link (i, j) is not considered further.
Algorithm AQMR(AMRPN)
1. arc_heap
top-heavy heap of all l ∈ E according to B(l)
2. for pair u, v ∈ V do
d[u, v] = ∞ ;
3.
4. while arc_heap ≠ ∅ do
(i, j) = top(arc_heap); let l = (i, j);
5.
if d[i, j] > D(l) then
6.
for each pair u, v ∈ V do
7.
if Ll[u, v] is marked then
8.
if d[u, i] + D(l) + d[j, v] < d[u, v] then
9.
d[u, v] = d[u, i] + D(l) + d[j, v];
10.
update QMR path from u to v
11.
12. return all-pairs QMR paths
Lines 1–12 of algorithm AQMR are identical to that of [3] except for the condition
in line 8 which ensures that only the links on MR paths are considered in computing
the quickest paths, and hence its correctness directly follows. Since each link in

Reliability Problem on All Pairs Quickest Paths

523

2

AMRPN has n x n matrix to keep the labeling information, O(n m) space is required.
Therefore, the following theorem is as follows.
Theorem 2.1 The all-pairs quickest most reliable paths for any size of message can be
2
computed by algorithm AQMR with time complexity O(n m) and space complexity
2
O(n m).

3 Conclusion
In this paper, we introduced the quickest the most reliability paths for all pairs of
nodes in a given network G for any message size σ . These algorithms match the best
known computational complexity for the classical all-pairs quickest path problem,
namely without the reliability considerations. It would be interesting to obtain all-pairs
algorithms for other variations of the quickest path problem such as general bandwidth
constraints [9], random queuing errors [10], and dynamic bandwidth constraints [11].
Another future direction is the on-line computation of quickest paths so that path’s
quality can be traded-off for computational speed.

References
1.

Y. L. Chen, Y. H. Chin, “The quickest path problem”, Computers and Operations Research vol. 17, no. 2, pp. 153–161.
2. D. T. Lee and E. Papadopoulou. “The all-pairs quickest path problem”, Information Processing Letters, 45(5): 261–267, 1993.
3. J. F. Mollenauer, “On the fastest routes for convoy-type traffic in flow-rate-constrained
networks”, Transportation Science, vol. 10, pp. 113–124, 1976.
4. N. S. V. Rao and S. G. Batsell, “Algorithm for minimum end-to-end delay paths”, IEEE
Communications Letters, vol. 1, no. 5, pp. 152–154.
5. J. B. Rosen, S. Z. Sun, and G. L. Xue, “Algorithms for the quickest path problem and the
enumeration of quickest paths”, Computers and Operations Research, vol. 18, no. 6, pp.
579–584.
6. Guoliang Xue, “End-to-End data paths: Quickest or most reliable?”, IEEE Communications Letters, vol. 2, no. 6, pp. 156–158.
7. Y. C. Bang, S. Radhakrishnan, N. S. V. Rao, and S. G. Batsell, “On update algorithms for
quickest paths”, Computer Communications, vol. 23, pp. 1064–1068.
8. T. H. Cormen, C. E. Leiserson, and R. L. Rivest, “Introduction to Algorithms”, New York:
McGraw-Hill, 1990.
9. N. S. V. Rao and N. Manickam. General quickest paths and path-tables. Computer Systems: Science and Engineering, 17(4/5):235-239, 2002.
10. N. S. V. Rao. LetLets for end-to-end delay minimization in distributed computing over
Internet Using two-paths. International Journal of High Performance Computing Applications, 16(3), 2002.
11. W. C. Grimmell and N. S. V. Rao. On source-based route computation for quickest paths
under dynamic bandwidth constraints. Journal of Foundations of Computer Science, 1002,
in press.

