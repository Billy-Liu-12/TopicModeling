Adding Temporal Annotations and Associated
Veriﬁcation to the Ravenscar Proﬁle
Alan Burns and Tse-Min Lin
Real-Time Systems Research Group
Department of Computer Science
The University of York
Heslington
York YO10 5DD, UK
{burns,lin}@cs.york.ac.uk

Abstract. This paper presents a proposal for extending the Ravenscar
Tasking Proﬁle with annotations that can be used to express temporal
properties. An approach using model checking for the veriﬁcation of
compliance to the annotations is also presented. An extended example
is used to illustrate the application of the proposed approach.
Keywords: Ravenscar Proﬁle, Model Checking, UPPAAL, SPARK.

1

Introduction

The Ravenscar proﬁle [1,4,7,6,25] was deﬁned as result of the 8th International
Real-Time Ada Workshop (IRTAW) with the goal of restricting the tasking facilities of Ada95 to remove implementation dependencies and unspeciﬁed behaviour,
making possible the veriﬁcation of the concurrency aspects of an application. The
Ravenscar Proﬁle, as presented in [7], deﬁnes which features are allowed, which
are disallowed, what dynamic semantics are required and how the restrictions
can be represented.
One of the motivations for Ravenscar is to support the development of realtime software. But Ravenscar does not in itself directly represent all the primitives necessary to fully specify real-time behaviour. Deadlines are a common
requirement of real-time systems, yet very few programming languages (for example, DPS [15] and TCEL [9])1 allow the speciﬁcation of deadlines in the code
itself. This means that in the vast majority of programming languages used to
implement real-time systems it is the responsibility of the programmer to ensure
that the deadlines are always met.
In this paper we introduce a collection of annotations that can be used to
represent deadlines and other temporal characteristics such as freshness and
periodicity. We also show how temporal requirements can be veriﬁed – using
model checking if necessary for complex algorithms. The overall motivation for
the work presented here is as follows:
1

Their work is restricted to a sequential programming language, and deadlines are
only associated to a block of code.

J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 80–91, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Adding Temporal Annotations and Associated Veriﬁcation

81

1. The addition of an annotation for deadline;
2. The addition of annotations for concurrent task interaction via protected
objects;
3. To facilitate the veriﬁcation of each task’s temporal annotations;
4. To facilitate the veriﬁcation of end-to-end timing requirements through many
tasks and protected objects;
5. The representation (and validation) of common structures such as periodic
tasks;
6. The representation (and validation) of other static relationships such as those
between the deadlines of periodic tasks and priority.
The work presented in this paper is focused on the ﬁrst three objectives. A
full description of all the annotations been proposed is available via a project
report [17]. The annotations presented here are independent of other annotations
that might be used on Ravenscar programs. They are represented as comments
starting with the three characters --@.
This paper is organised as follows. The next section presents the deadline
annotation. Section 3 introduces the rely and guarantee annotations. Section 4
illustrates, through a non-trivial example, how annotated programs can be veriﬁed. Finally, the last section presents the conclusions and a discuss of further
work including the integration of these annotations and work being developed
for SPARK (which is intending to support Ravenscar in a future release).

2

Deadline Annotation

Fidge et al. [8] presented the deadline command as a language primitive for
real-time programming. The reason for its introduction is due to the lack of
explicit support to express deadlines in programming languages that support
the implementation of real-time systems (e.g. Ada95 [24] and Time-C [16]).
Fidge et al. also suggested the use of logical constants and assertions on time.
Unlike the standard notion of declaration of constants, their proposal does not
ﬁx the value of a logical constant, but instead its value is chosen in an angelic
manner so it can be constrained later by an assertion.
We present below a simple example using their proposal:2
1
2
3
4
5
6

procedure Use of Deadline
...
−−@ t: con Spark Time.Time;
is
...
begin

7
...
8
−−@ assert t = Spark Time.Now;
9
...
10
−−@ deadline t+13.0;
11
...
12 end Use of Deadline;

The timed annotation in line 8 indicates that the value of the logical
constant t is equal to the current time obtained from the special variable
Spark Time.Now of type Spark Time.Time. Spark Time.Now denotes the “realtime”, instead of the (approximated) computer’s real-time available through the
2

Note that their language is sequential.

82

A. Burns and T.-M. Lin

function Spark Time.Clock. Because of that, Spark Time.Now can only be used
in real-time assertions. The annotation in line 10 indicates that when execution
reaches this point, the current time must not have passed t+13.0.3 If the current
time has already passed, then the procedure Use of Deadline must be rejected
by the compiler (or associated tool) and this procedure must be reviewed by the
programmer.
The package Spark Time provides an interface between SPARK and the realtime features of Ada95 available through the package Ada.Real Time. Although
the implementation of Spark Time was not presented in [8], it was suggested
that this could be done following [3, §8.3].
While logical constants are helpful to support reasoning and timing constraint
speciﬁcation and analysis, they are of limited use because after having their value
ﬁxed they cannot be modiﬁed later. A more interesting approach would be to use
auxiliary variables, as proposed in [10]. Like logical constants and the deadline
command, auxiliary variables do not generate code but are more useful than
logical constants in expressing and analysing timing constraints.
In our proposal we add --@ aux as a new annotation to introduce auxiliary
variables. Auxiliary variables can only be used in annotations, therefore they do
not generate code. We illustrate below how the example presented in lines 1–12
could be modiﬁed to use t as an auxiliary variable instead of a logical constant:
13
14
15
16
17
18

procedure Use of Deadline
...
−−@ aux t: Ada.Real Time.Time;
is
...
begin

19
...
20
−−@ t := Ada.Real Time.Clock;
21
...
22
−−@ deadline t+13.0;
23
...
24 end Use of Deadline;

Another modiﬁcation, in relation to [8], is that the deadline command can
also be used as an annotation in the speciﬁcation part of a task. An example of
use is presented in Sect. 4.
Coupled with the deadline command is the delay statement. Together they
allow a wide range of real-time requirements to be speciﬁed. The deadline command ensures (if the implementation satisﬁes the constraint) that the system is
progressing “fast enough”; the delay statement (which is easy to satisfy) ensures
the system does not proceed “too fast”. We shall give a more detailed example
of the combined use of deadline and delay in Sect. 4. Note, as delay until is part
of Ravenscar it will use real program variables.

3

Rely and Guarantee Annotations

In a concurrent system, tasks usually cooperate to deﬁne the behaviour of the
system. As such, the dependence relation among tasks should be made explicit.
3

In another words, the execution of the code in line 9 must not take more than 13
seconds. The deadline annotation used in line 10 is equivalent to the timed assertion
“--@ assert Spark Time.Now <= t+13.0;”.

Adding Temporal Annotations and Associated Veriﬁcation

83

For example, in a producer-consumer system, tasks can be used to implement the
producer and the consumer, and a protected object can be used to encapsulate
data and allow sharing under mutual exclusion.
The producer task might or might not require the presence of a consumer
task, and the consumer task might require the presence of a producer task. A
task might use some subprograms of a protected object while requiring some
other task to use other subprograms of the same protected object.
While some relations might sound obvious, clearly a cooperative/distributed
system that models a producer-consumer system is wrong if, for example, a
producer task is missing. Unless there is some way to make it explicit that a
consumer task depends on the existence of a producer task, such properties
cannot be statically veriﬁed.
Therefore, it is proposed to introduce two annotations, --@ guarantee and
--@ rely, to specify the relations mentioned above. As an example of use, a
producer-consumer system could be written as follow:

25 package Example Cooperative System
26 . . .
27 is
28
task Producer Task;
29
−−@ guarantee shared data
30
−−@
uses Write;
31
task Consumer Task;
32
−−@ guarantee shared data
33
−−@
uses Read;
34
−−@ rely shared data
35
−−@
uses Write;

36
protected type Shared Data PO
37
...
38
is
39
procedure Read (...);
40
procedure Write (...);
41
...
42
end Shared Data PO;
43
...
44
shared data: Shared Data PO;
45 end Example Cooperative System;

In this example, the producer task guarantees that it will use the subprogram
Write of shared data, while the consumer task guarantees that it will use the
subprogram Read of shared data and it also relies on another task to use the
subprogram Write of shared data. That is, the consumer task relies on the
presence of a producer task, whereas the producer task does not require the
existence of a consumer task.
The use of the words guarantee and rely are associated with Whysall’s use
of rely and guarantee conditions used in the ZERO approach presented in his
PhD thesis [26], rather than Jones’ more generic use of rely/guarantee to express
interference presented in his PhD thesis [11] and subsequent work.
Using the ZERO approach, we say that a task can choose to guarantee some
properties about the shared objects it uses – basically it guarantees which subprograms of a protected object it will use. In the same manner, this task can also
choose to rely on some properties about the shared objects it uses – basically
it will be able to rely on the fact that a protected object is not modiﬁed, or
modiﬁed in predictable ways: which subprograms of a protected object can be
used by other tasks.
Although Jones approach is more powerful, it is also more diﬃcult to verify
that the properties speciﬁed do indeed hold. For example, Woodcock reported

84

A. Burns and T.-M. Lin

in [27] some diﬃculties in the veriﬁcation of an implementation that seems to be
correct. Later, Jones reviewed his approach in [12,13]. Stølen also presented in
his PhD thesis [23] another approach based on Jones early work. In [22], Stark
presented a proof technique that can be used to break the rely/guarantee conditions into a ﬁnite collection of smaller rely/guarantee conditions. However, Stark
acknowledged that the proof technique proposed cannot be fully automated. A
review of some existing work on the rely–guarantee approach for concurrency is
presented in [28].
It is clear that we do not allow the explicit speciﬁcation of properties as in
Jones, Stølen or Stark’s approaches. Properties are derived from the behaviour
of the subprograms of a shared object. We do however extend the notion to
include temporal statements. An optional key with period is introduced with
the annotations rely and guarantee to specify the expected periodicity of use of
a subprogram of a protected object. For example, the annotation:
46

−−@ guarantee buﬀer uses Write with period 100;

speciﬁes that a task uses the subprogram Write of a protected object buffer
with a (upper bound) period of 100 milliseconds. The annotation:
47

−−@ rely buﬀer uses Reads with period 110;

speciﬁes that a task relies on another task to use the subprogram Read of a
protected object buffer with a (upper bound) period of 110 milliseconds.
To allow for the speciﬁcation of age (or temporal validity) another optional
key, named with freshness, can be used instead of with period in a rely/guarantee annotation. For example:
48

−−@ rely buﬀer uses Write with freshness 300;

If the annotation above is used in a consumer task, then it indicates that a
producer task is expected to produce an item every 300 milliseconds – it can
produce sooner, but not later.

4

Veriﬁcation of Annotated Programs

The combined use of delays, deadlines and freshness allows a wide range of requirements to be speciﬁed. Of course a program cannot be fully veriﬁed until the
ﬁnal implementation has been completed and timing analysis (or measurement)
undertaken. In this work we identify a clear two stage process for veriﬁcation.

Adding Temporal Annotations and Associated Veriﬁcation

85

(1) Before implementation, check that the annotations are consistent and are
suﬃcient to satisfy the overall timing requirements of the system.
(2) After implementation, check that all deadlines will be satisﬁed.
Under (1), we assume that the system will be fast enough to meet its deadlines
– but check that delays and deadlines are compatible and that tasks satisfy
the guarantee annotations on protected objects. A simple (obvious) example
of an incompatibility is a task loop that has a deadline of 20ms but contains
within one feasible path a delay of 30ms. Veriﬁcation of these properties may be
straightforward but may require the power of model checking [2] for some more
complex properties.
Under (2), once execution times are known then standard timing and scheduling analysis can be undertaken to determine if deadlines will be met. We do not
advocate the use of model checking to verify (1) and (2) together. Model checking tools are not powerful enough to undertake the full analysis, and scheduling
analysis is suﬃciently mature to accomplish the second veriﬁcation step.
To illustrate how the ﬁrst step of veriﬁcation can be undertaken consider a
relatively simple (but not obvious) problem. A task, Producer, reads data from
the environment via either of two devices it has access to. A primary requirement
is that it generates data in protected object, Input Data, with a freshness of
300ms. The two devices have diﬀerent temporal properties:
– device A is “smart”, it provides a reading 30ms after it is enabled;
– device B is “simple”, it must be read 10 times to gain a single reliable value
– each reading must be taken between 2ms and 4ms after it is enabled and
subsequent readings must be at least 10ms apart.
This speciﬁcation thus has two free variables: the overall period P of Producer;
and the enforced delay p of the inner loop for device B (which must be greater
than 10ms). There is also the freedom to place extra deadline and delay until
statements in the code. From a schedulability point of view P and p should be as
large as possible. We assume at this level of description that Producer makes a
non-deterministic choice between the two devices. We also assume overall period
equal to deadline for the producer task.
Parameterisation (and subsequent veriﬁcation) could now be undertaken in
a number of ways. If there were only free variables then an algebraic formulation
is possible. If there are trade oﬀs to be made (e.g. between P and p) then it
may be possible to set up a linear programming solution. However the solution
may not always be found in a systematic way. The freedom to place extra delay
and deadline statements/annotations in the code means there is considerable
design freedom still available. We contend here that the use of a time automaton
model (and model checking) allows that freedom to be explored and veriﬁcation
undertaken. To illustrate this let us ﬁx P to be 150ms and p to be 15ms. First
we give the annotated code:4
4

All programs in Ada were type checked using GNAT version 3.14p.

86

A. Burns and T.-M. Lin
49
50
51
52
53
54
55
56
57
58
59
60
61
62

82
delay until Current+
83
Milliseconds (30);
84
−− read from device and
85
−− construct data
86
Input Data.Write (Data);
87
else
88
for Count in 1..10 loop
89
−− enable device
90
Current := Clock;
91
delay until Current+
92
Milliseconds (2);
93
−− read from device
94
−−@ deadline Current+
95
−−@ Milliseconds (4);
96
if Count = 10 then
97
−− construct Data
98
Input Data.Write (Data);
99
else
100
Current := Clock;
101
delay until Current+
102
Milliseconds (15);
103
−−@ deadline Current+
104
−−@ Milliseconds (15);
105
end if;
106
end loop;
107
end if;
108
−−@ deadline Next+
109
−−@
Milliseconds (150);
110
Next := Next+
111
Milliseconds (150);
112
delay until Next;
113
end loop;
114
end Producer;
115 end Example;

package Example
...
is
task Producer;
−−@ period 150;
−−@ deadline 150;
−−@ guarantee Input Data
−−@
uses Write;
−−@
with freshness 300;
−− The above annotation is clearly
−− consistent as long as Producer
−− calls Write on each iteration .
...
end Example;

63 with Ada.Real Time;
64 use Ada.Real Time;
65 package body Example is
66
task body Producer is
67
type Device Type is (smart,
68
simple);
69
Device : Device Type;
70
Next : Time;
71
Current: Time;
72
Data : Some Type;
73
begin
74
Next := Clock;
75
−− other initialisations
76
loop
77
Device := . . .
78
−− assumed non-deterministic
79
if Device = smart then
80
−− enable device
81
Current := Clock;

Next we give a timed automaton, in the UPPAAL5 framework [14,21]. We
will develop the automaton in stages to illustrate the procedure. A key driver
here is only to include the relevant features that refer to the temporal behaviour
of the code. First consider only the “smart” branch. In UPPAAL two clocks are
needed, one for the outer period (clk1) and one for the delay statement (clk2).

initial

start
clk1 := 0

delay
clk2 := 0

clk2 <= 30
clk2 == 30

clk1 == 150

clk1 := 0

clk1 <= 150
end

read_device_and_write

The automaton has ﬁve states. Each state has a name and a set of invariant
that must always be true. Between the states are transitions that have boolean
guards (must be true to be ﬁred) and actions (assignment) that occur when the
transition ﬁres. For example, state end has an invariant that clock clk1 must
5

All models in UPPAAL were veriﬁed using UPPAAL2k version 3.2.13.

Adding Temporal Annotations and Associated Veriﬁcation

87

be less than (or equal to) 150; the transition out of this state requires clk1 to
equal 150. These two properties together force the transition to occur when, and
only when, clk1 is exactly 150. Hence a period of 150 is ensured. As a result of
move to state start, clk1 is reset to 0. Note that within the formalism time is
considered to be a continuous variable.
We will add the details of read device and write shortly, but ﬁrst we must
ensure that the automaton makes progress. To do this we use the technique of
[5] to bring the driving deadline back to all previous states. However, the forced
delay in state delay means that start must be left after 120 (a value of 121,
for example, leads to deadlock). The automaton then becomes:
initial

clk1 := 0

start

delay
clk2 <= 30

clk2 := 0
clk1 <= 120
clk1 == 150

clk2 == 30

clk1 := 0

clk1 <= 150

clk1 <= 150
end

read_device_and_write

The protected object, Input Data, is represented by another automaton. Communication with the Producer automaton is via a channel (call) .
initial

ready

call?

idclk := 0

idclk := 0

The read device and write location of Producer is changed to incorporate the
channel call:
delay
clk2 <= 30
clk2 == 30
call!
clk1 <= 150

clk1 <= 150
end

read_device_and_write

The freshness constraint on Input Data can now be checked via model checking
by proving that idclk never takes the value 300 or more. In the syntax of
UPPAAL, “A[] Input_Data.idclk < 300”. When applied to the model above
this property is found to be true. If the deadline and period are increased however
eventually it becomes false. The tool then illustrates a counter-example to show
why the constraint is not met.
Now consider, again in isolation, the other branch (the simple sensor):

88

A. Burns and T.-M. Lin
initial

clk1 := 0

start

test1

read_device

count < 10

clk2 <= 4

count := 0

clk1 := 0
clk1 == 150
clk1 <= 150
end

clk2 := 0,
count := count+1
count == 10
clk2 == 15
count < 10
clk2 <= 15
clk2 := 0
loop

clk2 > 2
test2
count == 10
clk1 <= 150

call!

write

The locations with the symbol “∪” are urgent locations,6 the model never stops
in these states as at least one output transaction can always be taken (essentially
they represent branch instructions – if statement, etc).
Veriﬁcation of the above model fails due to deadlock. “A[] not deadlock”
is found to be false because it is possible for location write to be entered with
a value of clk1 greater than 150 – this causes the automaton to deadlock.
Changing the period and deadline to 200 solves this problem as long as the
start location is given the constraint clk1 <= 25. Unfortunately the ﬁrst path
now fails; it must have a tighter deadline of 129 imposed on its cycle:

initial

start

delay

clk1 := 0

clk2 <= 30

clk2 := 0
clk1 <= 99

clk1 == 200

clk2 == 30

clk1 := 0

clk1 <= 200

clk1 <= 129
call!
read_device_and_write

end

The ﬁnal step is to combine the two paths:

delay
clk2 <= 30

start_smart
clk2 := 0

clk2 == 30

initial

clk1 := 0
clk1 <= 99
clk1 == 200

call!
clk1 <= 129
read_device_and_write

start_simple
clk1 := 0

test1

count := 0
clk1 <= 25

clk1 == 200
end_simple

count == 10

end_smart
clk1 <= 200

count < 10

clk2 := 0,
count := count+1

clk2 <= 4
clk2 > 2

clk2 == 15
count < 10
clk2 <= 15

clk1 <= 200

read_device

clk2 := 0
loop

test2
count == 10

call!
clk1 <= 200
write

A

(

)

Although both paths on their own are correct (in their temporal properties) the
combination is not. An initial execution down the smart sensor (ﬁnishing as early
as possible) followed at the next iteration by the simple sensor route (ﬁnishing
6

In this example, these locations could also be introduced as committed location
without changing the behaviour of the model.

Adding Temporal Annotations and Associated Veriﬁcation

89

as late as allowed by the deadline statements) breaks the freshness constraint.
There are a number of ways this could be ﬁxed. One is to add an extra delay
statement to the beginning of the smart loop:
start_smart

clk1 <= 99

delay_start

initial

clk1 == 71
clk1 := 0
clk1 <= 71

Veriﬁcation is now achieved:
A[] not deadlock
A[] Input_Data.idclk < 300
The properties above are found to be true. The modiﬁcations required in the
annotated code presented in the beginning of this section are:
– change the period and deadline to 200 milliseconds (lines 53, 54, 109, and
111;
– add a delay of 71 milliseconds (delay until Next+Milliseconds(71)) after the
statement in line 79;
– add a deadline of 129 milliseconds (deadline Next+Milliseconds(129)) after
the statement in line 86.
To generalise, from this example, the annotations introduced in this paper
allow:
– the consistent use of delay and deadline within each task to be checked;
– the temporal guarantee annotations to be checked against the task making
that guarantee;
– the rely and guarantee annotation together to be checked against system
level (or end-to-end) requirements.
This latter property has not been illustrated in the paper, but it is possible
to check global properties using model checking with a set of timed automata.
We have investigated these properties elsewhere [7] but not in the context of
Ravenscar.
Although we ague that the process developed here increases the conﬁdence
with which real-time Ada programs can be developed, the approach is not formal.
In particular there is, currently, no provable equivalence between the annotated
Ada code and the automaton model. This continues to be studied (see work
of [19,20]) and should be tractable in the sense that a tool should be able to
automatically generate the outline Ada code from the automaton model.

5

Conclusion

The Ravenscar proﬁle represents an important aspect of Ada technology. Its use
emphasises the need for predictability and allows high integrity applications to be

90

A. Burns and T.-M. Lin

developed. For example, Lundqvist and Asplund [18] present a complete formal
model of a Ravenscar-compliant run-time kernel in UPPAAL, and they show
that the model behaves according to the semantics of Ada95 (e.g. a protected
object is only updated under mutual exclusion and a task suspended due to a
delay until statement is not released before the current time has reached that
speciﬁed in the statement).
For simple systems with periodic tasks for example, conﬁdence in the timing
statements may be easy to obtain – although eﬀective implementation may still
be diﬃcult to ensure. But Ravenscar is not just for such simple systems. We
argue here for additional information to be added to the proﬁle via annotation
that capture important requirements such as deadlines and data freshness.
Although the approach is not yet completely formal, the use of timed automata models and model checking does enable a high level of conﬁdence in the
temporal characteristics of applications to be gained. The annotations presented
here are concerned only with the temporal properties of Ravenscar programs.
Other annotations will be needed to ensure, i.e. statically verify, that a full program does indeed conform to the Ravenscar proﬁle. An example of the necessary
annotations for this type of veriﬁcation are the ones proposed in SPARK. There
a technology that has been conﬁned to sequential programs is being extended to
concurrency by including the Ravenscar features. An extension of the work presented in this paper is to integrate the two sets of annotations. That is, show how
our temporal annotations can be embedded within the broader set of SPARK
annotations.
Acknowledgements. We would like to thank the anonymous referees for
their helpful comments. This work is undertaken as part of the EPSRC funded
RavenSPARK project (GR/N05963).

References
1. L. Asplund abd B. Johnson and K. Lundqvist. Session summary: The Ravenscar
proﬁle and implementation issues. Ada Letters, XIX(2):12–14, 1999.
2. R. Alur and D. Dill. Automata for modeling real-time systems. In ICALP 1990,
volume 443 of LNCS, pages 322–335. Springer-Verlag, 1990.
3. J.G.P. Barnes. High Integrity Ada: The Spark Approach. Addison-Wesley, 1997.
4. B. Brosgol. Session summary: Future of the Ada language and language changes
such as the Ravenscar proﬁle. Ada Letters, XXII(4):113–119, 2002.
5. A. Burns. How to verify a safe real-time system: The application of model checking and timed automata to the production cell case study. Real-Time Systems,
24(2):135–151, 2003.
6. A. Burns, B. Dobbing, and G. Romanski. The Ravenscar tasking proﬁle for high
integrity real-time programs. In Ada-Europe 98, volume 1411 of LNCS, pages
263–275. Springer-Verlag, 1998.
7. A. Burns, B. Dobbing, and T. Vardanega. Guide for the use of the Ada Ravenscar proﬁle in high integrity systems. Technical Report YCS 348, Department of
Computer Science, The University of York, 2003.

Adding Temporal Annotations and Associated Veriﬁcation

91

8. C.J. Fidge, I.J. Hayes, and G. Watson. The deadline command. IEEE Software –
Special Issue on Real-Time Systems, 146(2):104–111, 1999.
9. R. Gerber and S. Hong. Compiling real-time programs with timing constraint reﬁnement and structure code motion. IEEE Transactions on Software Engineering,
21(5):389–404, May 1995.
10. I.J. Hayes.
Real-time program reﬁnement using auxiliary variables.
In
FTRTFT2000, volume 1926 of LNCS, pages 170–184. Springer-Verlag, 2000.
11. C.B. Jones. Development Methods for Computer Programs Including a Notion of
Interference. PhD thesis, Programming Research Group, The University of Oxford,
1981.
12. C.B. Jones. Interference resumed. Technical Report UMCS-91-5-1, Department of
Computer Science, The University of Manchester, May 1991.
13. C.B. Jones. Reasoning about interference in an object-based design method. In
FME’93, volume 670 of LNCS, pages 1–18. Springer-Verlag, 1993.
14. K.G. Larsen, P. Pettersson, and W. Yi. UPPAAL in a nutshell. Software Tools for
Technology Transfer, 1(1+2):134–152, 1997.
15. I. Lee and V. Gehlot. Language constructs for distributed real-time programming.
In IEEE Real-Time Systems Symposium, pages 57–66. IEEE, 1985.
16. A. Leung, K. Palem, and A. Pnueli. TimeC: A time constraint language for ILP
processor compilation. In The 5th Australian Conference on Parallel and Real
Time Systems, pages 57–71. Springer-Verlag, 1998.
17. T.-M. Lin and A. Burns. Annotations for RavenSPARK. Technical report, Department of Computer Science, The University of York, 2002.
18. K. Lundqvist and L. Asplund. A Ravenscar-compliant run-time kernel for safetycritical systems. Real-Time Systems, 24(1):29–54, 2003.
19. D. Naydich and D. Guaspari. Timing analysis by model checking. In LFM2000,
pages 71–82, June 2000.
20. Timing analysis for model checking (working document). Technical report, Odyssey
Research Associates, June 2001.
21. P. Pettersson. Modelling and Veriﬁcation of Real-Time Systems Using Timed Automata:Theory and Practice. PhD thesis, Department of Computer Systems, Uppsala University, February 1999.
22. E.W. Stark. A proof technique for rely/guarantee properties. In FST & TCS 85,
volume 206 of LNCS, pages 369–391, New Dehli, 1985. Springer-Verlag.
23. K. Stølen. Development of Parallel Programs on Shared Data-Structures. PhD
thesis, Department of Computer Science, The University of Manchester, 1990.
24. S.T. Taft and R.A. Duﬀ, editors. Ada 95 Reference Manual: Language and Standard
Libraries, volume 1246 of LNCS. Springer-Verlag, 1997.
25. A.J. Wellings. Session summary: Status and future of the Ravenscar proﬁle. Ada
Letters, XXI(1):5–8, 2001.
26. P.J. Whysall and J.A. McDermid. Object oriented speciﬁcation and reﬁnement.
In 4th Reﬁnement Workshop, Workshops in Computing, pages 150–184. SpringerVerlag, 1991.
27. J.C.P. Woodcock and B. Dickinson. Using VDM with rely and guarantee conditions: Experiences of a real project. In VDM’88, volume 328 of LNCS, pages
434–458. Springer-Verlag, 1988.
28. Q. Xu, W-P. Roever, and J. He. The rely–guarantee method for verifying shared
variable concurrent programs. Formal Aspects of Computing, 9(2):149–174, 1997.

