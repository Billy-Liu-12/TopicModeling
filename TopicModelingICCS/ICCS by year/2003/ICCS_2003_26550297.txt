Experiences on Developing and Using a Tool
Support for Formal Speciﬁcation
Tommi Mikkonen
Tampere University of Technology
P.O. Box 553, FIN-33101 Tampere, Finland
tjm@cs.tut.fi

Abstract. Tool support is a major issue for any novel software
engineering approach. This is particularly important for introducing
new methodological issues, as only with an adequate embedding of new
ideas in a practical tool set it is possible to include new facilities in
the software development process. In this paper, we provide an insight
to the feedback obtained when developing and using a tool set for
easing the use of a formal method. The paper begins by introducing the
underlying formal method, its language representation, and the tool set
that is currently available. Based on them, the core contribution of the
paper is constituted by the observations made when the tool set has
been used in practice.
Keywords:
tools

1

formal

methods,

software

engineering,

development

Introduction

Tools are essential for software engineers in helping to get the practical matters
right. Still, tools should (and can) not replace sound semantics of the underlying
method. Embedding the sound principles in a practical tool then becomes the
advocated approach.
Our experience on embedding sound principles to a practical tool arises from
the development and using of the formal method DisCo [25], where we have deﬁned a methodological baseline, created a speciﬁcation language resembling programming languages, and implemented a supporting tool set. This programmingfriendly environment has then been used to study the use of the underlying formal speciﬁcation method in a pragmatic fashion. With this approach, we have
gained the best of both worlds – an easy-to-use tool that lets the developers
express formal speciﬁcations in a language that closely resembles programming
languages, especially Ada.
The rationale of this paper is to gather all the experiences we have on putting
the approach and associated tools in practice. Currently, we have more than ten
years of experience on working with the underlying methodology. During the
years, there have been two generations of the speciﬁcation language ([9,10])
and associated tool environment systems ([23,1]), as well as numerous reported
J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 297–308, 2003.
c Springer-Verlag Berlin Heidelberg 2003

298

T. Mikkonen

academic (e.g. [22,2]) and industrial (e.g. [5,20]) case studies. The feedback reported in this paper has been gathered from experiments carried out by tool
and methodology developers, students using the tool set in their exercises and
project assignments, and case studies implemented in connection with industry,
with formal speciﬁcation work carried out by both industry experts and DisCo
specialists. While the main conribution of this paper is to discuss the observations made when applying the methodology with the available tools, we will also
provide an introduction to the design methodology, associated language support, and the tool set, because the results would be diﬃcult to analyze without
a proper background.
The rest of this paper is structured as follows. Section 2 introduces the underlying formalism, related methodological issues, and the language representation
used for composing speciﬁcations in practice. Section 3 provides an insight to
the current DisCo tool set. Section 4 forms the core of this paper by listing the
diﬀerent observations on using and developing the methodology and the tool set
in practice. Section 5 ﬁnally concludes the paper.

2

The DisCo Method

In this section, we will give a brief (and partly simpliﬁed) overview of the DisCo
method [25]. The discussion starts from semantic principles and related methodological issues. Based on them, the focus is then shifted to language representation used for composing speciﬁcations in practice.
2.1

Formal Foundation

The DisCo method has based its formal foundation on the Temporal Logic of
Actions, TLA [18]. The practical consequence of such a background is that DisCo
speciﬁcations consist of state variables and relations between them, similar to
any TLA speciﬁcations. Some relations, referred to as state predicates, only discuss a snapshot of the values of variables in a given global state, constituted
by the combined values of all the variables. Other relations, referred to actions,
model the transition from one state to another in terms of state variables. An
operational interpretation for a DisCo speciﬁcation can be given as follows. Actions are execution “steps” that take place in an atomic, interleaved fashion.
Then, by giving an initial state and a set of actions one generates a natural
representation for a computing system. In addition to the initial state and the
actions, one can also give requirements on scheduling of actions.
In contrast to conventional approaches, where the focus of early development phases has been placed on interfaces, we have reconsidered the concept of
modularity. Instead of traditional components, we have decided to develop speciﬁcations in layers, which resemble e.g. program slices [24] or projections used in
veriﬁcation [17], in the sense that they constitute modular structures based on
individual (yet potentially connected) variables and operations on them rather
than depending on the implementation architecture. We, however, compose new
systems with such layers, not decompose those that already exist.

Experiences on Developing and Using a Tool Support

299

The purpose of layer-wise speciﬁcation is to enable modeling in an incremental fashion. This has lead to the adoption of superposition, a well-known
technique ﬁrst used in [3], as the main modularity mechanism of the method.
The traditional purpose of superposition has been the separation of e.g. correctness and termination concerns in the design of algorithms. Therefore, we believe
that it can also be used as a mechanism for separating unrelated concerns at
speciﬁcation level. Similar goals can be seen in e.g. aspect-oriented development
[4]. The close connection between the two has been suggested by e.g. Katz and
Gil [13].
With the above ﬂavor of modularity, a system being modeled can be considered to carry out its activities independent of outside activity at any level of
details. We will refer to such systems as closed systems. They can be observed
but not aﬀected from outside. Any real-life system is obviously an open one, i.e.,
it has an interface that separates the system from its execution environment.
However, from the theoretical viewpoint, it is often simpler to model things as
closed systems, as both environment assumptions and the system behavior will
be described using the same formalism. The deﬁnition of the implementation
interface between the system and its environment then becomes a crucial design
decision to be based on the closed system speciﬁcation. However, this decision
can be postponed until the closed-system speciﬁcation is detailed enough for
high-level validation and veriﬁcation. Moreover, interface reﬁnements that make
the interface more precise are possible. Related approaches include e.g. problem
frames, where the approach relies on similar ideas but at an informal level [6,7].
2.2

Language Representation

State variables are included in the DisCo speciﬁcation language as classes that
are patterns for objects. A designer might, for example, give a simple class as
follows:
class A is
-- Class name.
i : integer; -- Instance variables.
end A;
The deﬁnition of the initial values of variables is an issue that has been left outside the speciﬁcation language used for composing designs. Early versions of the
DisCo tool set allowed a special conﬁguration part that could be used to assign
initial values to variables, but current tools enable a tool-assisted generation of
the initial state. On the formal side, the designer is assumed to give initial conditions as explicit expressions in connection with class deﬁnitions. For instance,
the following initial condition deﬁnes that all the values in instances of class A
are non-negative.
initially and/ object : A::object.i => 0;
Actions are patterns of interaction that can take place between diﬀerent objects.
They can be taken as multi-object methods that determine how the contents of

300

T. Mikkonen

participant objects can change. An action consists of a signature (name of the
action and roles for participant objects), an enabling guard (boolean expression),
and the eﬀect of the action to the participant objects (collection of assignments
executed in parallel). For example, the following action deﬁnes that two instances
of class A can swap their values.
action swap(x, y : A) is
when true do
x.i := y.i || y.i := x.i;
end swap;

-----

Signature (name and roles).
Enabling condition.
Statements that are executed
in parallel.

If there are several objects that may take the same role in an action, one of
them is nondeterministically selected. Similarly, the action to be executed next
is not determined by a ﬂow of control of e.g. a process but is selected in a nondeterministic fashion from those that are enabled, i.e., whose enabling condition
evaluates to true for some combination of participant objects. One can associate
a scheduling requirement in an action by including an asterisk (*) next to a role
name. This requires that if enabled, the action must be executed inﬁnitely often
for all the potential combinations of participants of that role.
Assertions have been included in the language to allow a methodological way
to enforce a contract-based design approach. Similarly to conventional methods,
where e.g. class invariants can be used, we advocate the use of assertions that
determine the design intention. It is then up to the designer to orchestrate the
actions, i.e., operations of the system, such that they cannot violate the assertions. However, we usually use assertions at the level of layers, not classes as
advocated in object-oriented setting.
To achieve superposition based modularity, the designer is assumed to give
a set of related classes and actions in the same syntactic layers in a fashion that
obeys superposition. From the practical perspective, this simply means that once
a designer gives a state variable, he is also obliged to give the actions that can
alter the value of the variable in the same layer. Then, a situation emerges where
the ﬁrst version of a speciﬁcation produces an abstract behavior, which can be
extended with more variables and details in later increments. For the purposes
of DisCo, we have selected the variant of superposition so that safety properties (properties of the form “something bad will never happen”) are satisﬁed by
construction. Liveness properties (properties of the form “something good will
eventually happen”), implemented with scheduling requirements, require additional considerations.
The language representation of a reﬁnement is straightforward. Whenever
referring to something that has already been discussed in existing layers, we use
ellipses (...) to refer to the existing parts of the system. Moreover, keywords
“extend” and “reﬁned” replace “class” and “action” when deﬁning a reﬁnement,
respectively. With these conventions, a layer that contains all the above language
items would be introduced as listed in Fig. 1. Another layer, adding another
dimension of behavior on top of the previously given layer is introduced in Fig. 2.
The resulting composition is illustrated in Fig. 3.

Experiences on Developing and Using a Tool Support

layer SimpleSwaps is
class A is i : integer; end A;
initially and/ object : A::object.i => 0;
action swap(x, y : A) is
when true do
x.i := y.i || x.i := y.i;
end swap;
end SimpleSwaps;

Fig. 1. Simple DisCo layer

layer PoweredSwaps is
import SimpleSwaps;
extend A by pwr : boolean; end A;
initially and/ object : A::object.pwr = false;
refined swap(x, y : A) is
when ... x.pwr and y.pwr do
...
end swap;
action Switch(me : A) is
when true do
me.pwr := not me.pwr;
end Switch;
end PoweredSwaps;

Fig. 2. Simple DisCo reﬁnement

A

Simple
Swaps
Powered
Swaps

i:integer

A
x, y

Swap

y, x

pwr:boolean

i:integer
pwr:boolean

me

Switch

me

Fig. 3. Illustration of a DisCo reﬁnement

301

302

3

T. Mikkonen

The DisCo Tool Set

The tool set we are currently using has been introduced in [1]. However, some
of the ideas can be traced back to a prototype version [23], which was ﬁrst used
to test the soundness of underlying methodological issues as well as usefulness
of its language representation.
3.1

Compiler

As the starting point of any computer-aided activity in the DisCo tool environment, a compiler is used for reading in completed DisCo speciﬁcations, and for
verifying syntax and semantics. In particular, this obviously includes checking
that the developer does not violate superposition-based speciﬁcation steps1 .
Layers are used as units of compilation. Internally, the compiler transforms
speciﬁcations into an intermediate format, where the diﬀerent base units (e.g.
classes and actions) of the speciﬁcation can be handled separately. Therefore,
all the layering included in the speciﬁcation is “opened” in this phase. However,
all the parts of the speciﬁcation still internally carry an identity tag that allows
the tracing of diﬀerent parts of a completed speciﬁcation back to their layered
origins for debugging purposes.
The architecture described above has resulted in a design where the compiler
responsible for reading in the speciﬁcation and for creating the structure acts
as a front-end. Based on this front-end, it is then possible to introduce diﬀerent
back-ends that generate code for diﬀerent purposes.
3.2

Animation Tool

Currently, the most well-established back-end for developing speciﬁcations is animation. Any DisCo speciﬁcation, composed with layers, can be animated so that
the designer is responsible for selecting the diﬀerent actions and the necessary
participants for an execution. Then, state changes of diﬀerent objects can be
seen on computer screen. This straightforward animation approach eﬀectively
lets the developer test and debug his speciﬁcations in an executable fashion.
In addition to user-deﬁned executions, the animation tool can execute speciﬁcations semi-automatically by asking the user only to deﬁne the issues that the
tool cannot determine automatically. In addition, the user can record execution
scenarios that can be re-executed later. Moreover, an opportunity is provided
for the user to edit the scenarios before re-running them.
Figure 4 provides an animation screen of the previously given system. On the
object view included in the ﬁgure (right-hand side), a system that includes four
instances of class A is shown. On the left-hand side, the list of all the possible
actions can be seen, where both the actions are enabled. In addition, a history
1

Early versions of the tool set had an annoying bug that allowed the developer to
violate superposition. With developers accustomed to the DisCo principles, it took
surprisingly long to identify this very obvious bug.

Experiences on Developing and Using a Tool Support

303

Fig. 4. The DisCo animator

window is visible, indicating that several Switch actions and one Swap action
have been already executed. By clicking the button labeled “scenario view”, this
can be viewed in the traditional graphical format as well. In addition to actions
and classes, the action list also includes timing information. This, however, is
not utilized by the above speciﬁcation.

3.3

Other Experiments

With formal semantics, one is tempted to oﬀer computer-assisted theorem proving support for formal speciﬁcation. The experiences with the DisCo method
have proven that this is possible but relatively laborious [14]. Therefore, our
research activities have aimed at reusable design steps whose proofs could be
reused [16], as well as at speciﬁcation architectures that are veriﬁcation-friendly
[15], rather than at an all-purpose assertion veriﬁcation support.

304

T. Mikkonen

Another tool candidate that is easy to identify is a program generator. This
has been experimented, but in a setting that can be considered too generic for
practical use [19]. For more encouraging results, we currently consider a domainsensitive way to generate applications as the most prominent approach. A part
of the future research is to develop an automatic code generator for a certain
domain, the most obvious candidates being highly dependable and distributed
systems. This task is hardened by the fact that unlike in conventional setting,
where interface deﬁnitions can be used for generating skeletons, layers address
collaboration which cannot be used as basis for skeletons in a straightforward
fashion.
In addition to direct code generation, we have experimented a transition from
DisCo to UML [26]. The transformation, however, loses information already included in the DisCo speciﬁcation, because UML has no convenient representation
for e.g. an atomic DisCo action. Another problematic area is the importance of
layout. We have not been able to ﬁnd a convenient way to map the layout used
in the DisCo tool set to a conventional case tool. Still, the topic of incorporating
some of the DisCo principles in a design process relying on UML is an interesting
ﬁeld of future study, with some preliminary results already published in [12].

4

Experiences on Tool Usage

This section forms the core of this paper by giving an insight to the observations
we have on the use of the DisCo tool set. The discussion is structured in accordance to the depth of embedding the methodological foundation of the DisCo
approach in the development process.
4.1

Informal Considerations

Perhaps the biggest surprise for the DisCo development team has been the uniform respect gained by the possibility to animate even partial speciﬁcations
during the early phases of the development. This has resulted in a pragmatic
way to make domain experts and software professionals share a common terminology. With the animation running on the screen, people are tempted to ask
questions like “What will happen if the user pushes the button again before the
system has reacted?” Animation then lets the designer run the revised scenario,
and the result can be read from the screen. This has typically stimulated lengthy
discussions, where the client or customer has started to ask questions on how the
system should work in diﬀerent unanticipated situations, even if the client herself
should really possess the information, not the speciﬁer, who typically has only
formalized the informal speciﬁcation. Although we have not been gathering any
statistical evidence, we feel that no such discussions would have emerged without the animation capabilities that force speciﬁers and users, as well as external
observers, to participate in generating the executions.
The importance of the animation tool has been very clearly stated by Isoj¨
arvi
in one of our industrial case studies, “Animation is the best part of DisCo [5].”

Experiences on Developing and Using a Tool Support

305

This issue is particularly obvious when comparing the attitude of industrial
developers to the methodological background: Once the formal methodology
introduction was ﬁnished, and it was the time to use the tool in practice, the
events have repeatedly turned from lectures to lively design sessions.
Technically, the above issue is connected to the fact that the method allows the animation of speciﬁcations even if the speciﬁcations are far from being
completed and lack many details needed for the ﬁnal version. The parts that
have not yet been ﬁxed will simply be treated as non-deterministic. In addition,
closed-system modeling has established itself as an important mechanism for
studying the systems, as even with partial speciﬁcations, it is possible to discuss
the collaboration of a system and its environment.
4.2

Formal Issues

The well-established rationale of formal speciﬁcation is to avoid unambiquities,
misconceptions, and logical errors. In the case of DisCo, we have usually identiﬁed such problems in informal speciﬁcations when composing DisCo representations based on them. As for the practical cases, unclear issues, potential
problems, or clearly identiﬁed bugs were found in the majority (if not all) of
systems we have studied in detail2 . As it is possible to advance in increments
that take into account one conceptual thing (or concern) at a time, the developers are forced to consider the potential problems in early phases rather than
postponing them to later phases. Moreover, practice has shown that it is usually
relatively easy to deﬁne so small increments that their correct function can be
veriﬁed and validated by investigating relatively few test cases. This is a strong
argument on the positive eﬀect of the use of property-preserving increments in
design, achieved due to the use of superposition. In fact, the methodological side
of the approach has repeatedly been considered more important than the actual
formalization.
Although the majority of logical errors have been found when composing
speciﬁcations, the compiler and the animation tool have proven themselves
valuable for the developers. In addition to being a visualization tool of (semi)completed speciﬁcations as described above, the animation has been used to
identify semantical errors in intermediate phases of the speciﬁcation work. This
is comparable to traditional testing and debugging transferred to speciﬁcation
level. The most common errors not related to the domain sensitive logic of the
system being modeled have been such that formalized speciﬁcations were too
relaxed in the sense that some of the necessary restrictions were not imposed.
The downside of animation is that we have witnessed the tendency to think
in terms of animations rather than the actual DisCo formalism. While this is
relatively natural for people not directly involved in methodology development,
the same can also be observed within the DisCo team, although to a lesser extent.
In particular, during the early phases of the development of the methodology,
2

Categorization of these issues is diﬃcult, as the systems have been at diﬀerent phases
of their life cycle, ranging from a concept study to long-term maintenance

306

T. Mikkonen

it was not uncommon that a certain instance of the system that was animated
on the screen was actually considered as a completed speciﬁcation, although the
formal semantics of the method assume explicitly given assertions and initial
conditions of diﬀerent conﬁgurations. Then, when the conﬁguration shown on
the screen was altered (e.g. new objects, allowed by the initial condition and
assertions, were introduced), some of the informal expectations were invalidated
although all the formal aspects included in the rigorous speciﬁcation were still
satisﬁed. In other words, with the support from an executable speciﬁcation,
the developers overlooked formal descriptions, and took the executable as the
semantics of the system. This issue becomes especially obvious when using a
theorem prover, as automated reasoning prevents all informal shortcuts.
Similar problems have been encountered with liveness. As validation of liveness properties is impossible with animation only, speciﬁcations largely omit
scheduling requirements that should be given if the underlying methodology
were obeyed in full.
4.3

Improved Understanding of Software

As a side-eﬀect of the introduction of concern-separating design style used in the
formalism, it is interesting to notice that the designers have transferred some of
the main ideas of DisCo into pragmatic use in a more conventional design environment, even if DisCo was not used at all in the project. For instance, [8]
introduces a design approach and a software architecture, where the incrementality of DisCo has been ported into a more conventional software engineering
setting, together with some design rules to enable preservation of properties when
giving new increments. Moreover, in the examples of [21] one can easily identify
reﬂections of the DisCo method. However, applying the approach at the level of
UML may make the use of property-preserving increments impractical [11].
In addition, a clear tendency to rely on incremental and iterative design
approaches in general can be identiﬁed, where designers advance in small steps
and aim at early veriﬁcation and validation. This applies to both the fashion we
have used the DisCo method as well as to other software systems designed with
more conventional methods.

5

Conclusions

In this paper, we have introduced observations concerning the use of a toolassisted formal method in practice. Based on the experience, it is clear that the
facilities oﬀered for studying the speciﬁcation incrementally yet rigorously at
the early phases of the development are helpful. Moreover, facilities oﬀered for
animation of speciﬁcations have been respected. At the same time, however, we
have observed a tendency to think in terms of associated tools rather than the
actual method, which implies that the tool should embed the most important
properties of the underlying methodology in a practical fashion, to the extent
that it is acceptable to use the tool level for reasoning. Incorporating such facilities in a design system developed for e.g. UML-based software processes remains

Experiences on Developing and Using a Tool Support

307

a future challenge. However, also in that environment, we believe that the gains
of a state-of-the-art tool incorporating a formal methodology as a baseline for
the development will be remarkable.
Acknowledgements. The DisCo research team has been partly funded by the
Academy of Finland (project 5100005).

References
1. T. Aaltonen, M. Katara, and R. Pitk¨
anen. DisCo toolset: The new generation.
Journal of Universal Computer Science, 7(1):3–18, 2001.
2. T. Aaltonen, P. Kellom¨
aki and R. Pitk¨
anen. Specifying cash-point with DisCo.
Formal Aspects of Computing, 231–232, Vol. 12(4), 2000.
3. E. Dijkstra and C. Scholten. Termination detection for diﬀusing computations.
Information Processing Letters, 11(1), 1–4, 1980.
4. T. Elrad, R. E. Filman, and A. Bader. Aspect-oriented programming. Communications of the ACM, 44(10):29–32, October 2001.
5. S. Isoj¨
arvi. newblock DisCo and Nokia: Experiences of DisCo with modeling realtime system in multiprocessor environment. Formal Methods Europe Industrial
Seminar ’97, Otaniemi, Finland, February 20, 1997.
6. M. Jackson. Software requirements & speciﬁcations: A lexicon of practice, principles
and prejudices. Addison-Wesley, 1995.
7. M. Jackson. Problem frames: Analyzing and structuring software development problems. Addison-Wesley, 2000.
8. J. Jokinen, H.-M. J¨
arvinen, and T. Mikkonen. Incremental introduction of behaviors with static software architecture. Proceedings of the 2002 International
Conference on Software Engineering Research and Practice (Eds. H.R. Arabnia
and Y. Mun), 10–16, CSREA Press, 2002.
9. H.-M. J¨
arvinen. The Design of a Speciﬁcation Language for Reactive Systems.
Doctoral dissertation, Tampere University of Technology, 1992.
10. H.-M. J¨
arvinen. The DisCo2000 Speciﬁcation Language. Technical report, Tampere
University of Technology, 2000.
11. M. Katara and S. Katz. Architectural views of aspects. Accepted to AOSD’03, to
appear.
12. M. Katara and T. Mikkonen. Reﬁnements and aspects in UML. International
Workshop on Aspect-Oriented Modeling with UML, Dresden, September 30., 2002.
13. S. Katz and J. Gil. Aspects and superimpositions. Position paper in Aspect
Oriented Programming workshop in ECOOP’99, Lisbon, Portugal, June 1999.
14. P. Kellom¨
aki. Veriﬁcation of reactive systems using DisCo and PVS. FME’97:
Industrial Applications and Strengthened Foundations of Formal Methods, (Eds. J.
Fitzgerald, C. B. Jones, P. Lucas), 589–604, Springer-Verlag LNCS 1313, 1997.
15. P. Kellom¨
aki. Veriﬁcation-Friendly Speciﬁcation of Distributed Systems. 16th
World Computer Congress 2000, Proceedings of Conference on Software: Theory
and Practice (eds. Y. Feng, D. Notkin and M.-C. Gaudel), 480–483, Publishing
House of Electronics Industry and International Federation for Information Processing. 2000.
16. P. Kellom¨
aki and T. Mikkonen. Design templates for collective behavior. Proceedings of ECOOP 2000, 14th European Conference on Object-Oriented Programming
(ed. Elisa Bertino), 277–295, Springer–Verlag, LNCS 1850, 2000.

308

T. Mikkonen

17. S. Lam and A. Shankar. Protocol veriﬁcation via projections. IEEE Transactions
on Software Engineering, SE-10(4), 325–342, July 1984.
18. L. Lamport. The temporal logic of actions. ACM Transactions on Programming
Languages and Systems 16, 3, 872–923, May 1994.
19. T. Mikkonen. An experimental code generator for implementing formal speciﬁcations given as closed systems. Proceedings of the Fourth Symposium on Programming Languages and Software Tools, Visegrad, Hungary, 1995.
20. T. Mikkonen. A layer-based formalization of an on-board instrument. Technical
Report 18, Software Systems Institute, Tampere University of Techology, 1998.
21. T. Mikkonen and P. Pruuden. Flexibility as a design driver. 52–56, Computer,
November 2001.
22. M. Set¨
al¨
a. Formal Modeling of an Avionics System. MSc. thesis (in Finnish),
Tampere University of Technology, 1992.
23. K. Syst¨
a. A graphical tool for speciﬁcation of reactive systems. In Proceedings of
Euromicro’91 Workshop on Real-time Systems, 12–19, Paris, France, June 12–14,
1991.
24. M. Weiser. Program slicing. IEEE Transactions on Software Engineering, Vol.
SE-10, No 4, 352–357, 1984.
25. DisCo WWW site. At http://disco.cs.tut.fi on the World Wide Web.
26. UML WWW site. At http://www.rational.com/uml on the World Wide Web.

