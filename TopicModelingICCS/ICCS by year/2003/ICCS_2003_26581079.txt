Applying Computational Science Techniques to
Support Adaptive Learning
Juan M. Santos, Luis Anido, Mart´ın Llamas,
´
Luis M. Alvarez,
and Fernando A. Mikic
E.T.S.E. Telecomunicaci´
ons
Campus Universitario S/N
36200, Vigo (Pontevedra), Spain
{jsgago, lanido, martin, lmsabu, mikic}@det.uvigo.es

Abstract. Adaptive Learning Systems oﬀer customized learning experiences according to the actual student needs and capabilities. Eﬀective
student modelling, adequate representation of the knowledge domain and
proper characterization of learning tools are key issues to provide high
quality Adaptive Learning Systems. Most current systems are based
on Artiﬁcial Intelligence techniques (e.g. fuzzy logic, neural networks,
Bayesian networks, etc.) trying to reproduce human teaching behaviours
by using a computational representation of expertise. This paper oﬀers a
survey on Adaptive Learning showing how Computational Science techniques are applied to instructional systems and identifying forthcoming
trends for the future.

1

Introduction

Information and Communication Technologies (ICT) have been applied to the
ﬁeld of Education during the last years. Advantages of training supported, either
completely or partially, by new technologies (commonly called e-learning) have
been broadly discussed in many forums. Being aware of these advantages, many
institutions both public and private have adopted e-learning in their training
and instruction departments.
Web-based e-learning systems have progressively evolved from basic repositories of simple HTML documents to complex learning environments that include
tools enabling diﬀerent educational paradigms like “learning by doing” or “collaborative learning”. However, current commercial e-learning systems do not
completely make use of all the potential that can be provided by New Technologies. Particularly, most of them do not oﬀer students with learning experiences
that are unique and tailored to their needs, interests, preferences, learning style
and working environment in order to maximize the eﬀectiveness of learning.
Currently, few experimental platforms deal with personalisation and adaptation
to each particular student. These platforms, called Adaptive Learning Systems
(ALSs), are the result of the eﬀort from researchers that combine two traditionally distinct areas: Instructional Science and Computational Science [1].
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 1079–1087, 2003.
c Springer-Verlag Berlin Heidelberg 2003

1080

J.M. Santos et al.

This paper presents a survey on Adaptive Learning, showing how Computational Science techniques and methods are applied to instructional systems and
identifying forthcoming trends. Section 2 deals with the basic concepts involved
in the ﬁeld and presents a common abstract model for ALSs. In Section 3 some
examples of currently available ALSs developed by diﬀerent researching groups
are discussed. Finally, Section 4 presents some conclusions and trends for the
future.

2

A Conceptual Model for Adaptive Learning

According to [2], one of the main reasons to provide adaptation in Web-based
e-learning systems is the great variety of users involved. In traditional educational environments, teachers apply a common pedagogical method regardless
of the possible heterogeneity among their students. Most conventional systems
assume that all the students in the same classroom have acquired the same level
of knowledge so far and are prepared to acquire new knowledge at the same level.
This is clearly arguable and deﬁnitely false in most Internet-based e-learning environments where students may have diﬀerent background, availability to follow
the courses and even a diﬀerent language and culture.
This situation led researchers in the Artiﬁcial Intelligence area to develop
Intelligent Tutoring Systems (ITS), which are software tools designed and programmed to “intelligently” reproduce human teaching behaviours by using a
computational representation of expertise in instructional methods. For this,
they need to model the knowledge domain in question and the learner skills and
capabilities. Other aspects subject to adaptation include user interfaces, special
requirements for disabled people, etc.
From a Conceptual point of view, an ALS is composed of the Student Model,
the Domain Model, the Adaptation Model, the Adaptation Engine, and, in some
modern systems, a Environment Model (c.f. Fig. 1):
– Student Model: The Student Model stores relevant information about a
particular student and can include, depending on the speciﬁc system, his/her
personal data, individual preferences, learning style, cultural facets, possible
disabilities and background experience and current capabilities for a particular knowledge domain.
– Domain Model: The Domain Model is the repository for storing and structuring the learning contents and the overall knowledge on a particular domain: involved concepts, relevant properties from a pedagogical point of view
to study, requirements, goals, etc.
– Environment Model: The Environment Model includes a description of
the capabilities of the hardware devices and software applications used by
the student in a particular learning session. It can be used to determine the
most appropriate form of a resource to be delivered to each particular student’s equipment. This model provides ubiquitous access [3] to the learning
environment.

Applying Computational Science Techniques to Support Adaptive Learning

1081

Student Model

Domain Model

Environment Model

<<uses>>
<<uses>>

<<uses>>
Adaptation Engine

Navigation Engine

Adaptation Model

Presentation Engine

Notification Engine

Fig. 1. Conceptual Model for Adaptive Learning Systems

– Adaptation Model: The Adaptation Model contains the speciﬁc inferential
rules that deﬁne how the User Model, Domain Model, and Environment
Model elements are combined to provide the actual adaptation.
– Adaptation Engine: The Adaptation Engine is the software process that
combines information from the Student, Domain and Environment models
and the actual learner interaction with the system in order to personalize
the learning process for appropriate learning experiences. It is guided by the
rules described in the Adaptation Model. In essence, it is an inference engine,
i.e. an automatic control mechanism that applies the axiomatic knowledge
present in the knowledge base to arrive at some conclusion: the adequate
learning contents to be delivered to the learner.

3

Computational Science Techniques in ALS

The development of Adaptive Learning Systems is a highly complex activity.
Architects of these sophisticated environments must address with complicated
issues like eﬀective student modelling, adequate representation of the knowledge
domain, proper characterization of the learning environments or identiﬁcation
and design of appropriate and ﬂexible pedagogical control rules. Many times, it
is very diﬃcult, or even impossible, to exactly deal with some of these problems.
For example, how can be exactly represented the knowledge level of a student
in a particular subject? or, even more, how can be represented such an abstract
concept like the student motivation?. Futhermore, the computational complexity
of the algorithms needed to automatically take decissions (e.g. which is the
most appropiate next lesson for a particular learner) or “on-the-ﬂy” adjust the

1082

J.M. Santos et al.

diﬀerent models from the user interactions with the system are diﬃcult issues
to deal with.
Fortunately, it is not necessary to design perfect models and algorithms to
get useful adaptive outcomes. For example, it is often better an algorithm that
recommends interesting paths in a course organization with a predictive accuracy
of 80% over an algorithm that achieves 90% if the former requires considerably
less CPU time. Modern Adaptive Learning Systems are almost always based on
some Artiﬁcial Intelligence (AI) technique, like Fuzzy Logic, Neural Networks
or, about all, Bayesian Networks.
Bayesian Networks (BNs) are directed acyclic graphs where nodes represent
variables and arcs represent probabilistic dependence among variables. These
networks, and several variations of them, have steadily been applied in ALSs [4].
They are usually used to represent the student model. Depending on the particular ALS, the variables can be asociated with “concepts”, “problems”, “abilities”, etc, and they are linked by relationships between them, such as “part-of”,
“prerequisite-of”, “evaluation-item-of”, etc. A typicall usage setting is showed in
Fig. 2.

EVALUATION

C

...

T-1

...

T-11

Q1

Q2

T-1R

Q3

T-S

T-S1

Q4

Q5

...

T-ST

Q6

...

QN

DIAGNOSIS

Fig. 2. Use of Bayesian Networks in Adaptive Learnin Systems

In the BN of the ﬁgure, upper nodes (Knowledge Nodes) are associated with
the topics making up a course, arcs determine the relationship among the different topics and variables of each node indicate the likelihood of the student
“knowing” that piece of the course. Bottom nodes (Evidential Nodes) are associated with the test items used to diagnose the knowledge level about the
particular topics. Relationships among bottom and upper nodes represent the
probabilistic inﬂuence of the test items on the Knowledge Nodes.

Applying Computational Science Techniques to Support Adaptive Learning

1083

To characterize the network it is necessary to deﬁne its parameters, i.e.,
the set of discrete conditional probability distribution of each variable given its
parents:
P (Xi|pa(Xi)), i = 1, ..., n
where Xi are the variables and pa(Xi) represents the set of the parents of Xi.
This set of probabilities deﬁnes the joint probability distribution for the entire
network as:
n

(Xi|pa(Xi))

P (X1, ..., Xn) =
i=1

These networks are updated in real time, using some approximation algorithm, as the student interact with the learning platform. The information of
the student given by the BN is used by the ALS to make diﬀerent decisions,
depending on the particular system. For example, if the BN determines that the
student does not understand a topic, a short mini lesson explaining the involved
concepts could appear on the user screen.
In the next sub-sections we brieﬂy describe some developed systems, showing
the diﬀerent techniques or approaches used to deal with the diﬀerent aspects of
adaptation.
3.1

ELM Adaptive Remote Tutor (ELM-ART)

ELM-ART [5] is an intelligent interactive educational system to support learning
programming in LISP. For a student, the system can be viewed as an interactive text-book with support for several types of adaptive navigation, interactive
examples and automatic intelligent selection and evaluation of exercises (simple questions and programming problems to solve). It also supports additional
functionalities, like a glossary of LISP constructs, a personal annotation tool, a
portfolio viewer (where the student can see the set of all analyzed examples and
all the solutions of solved problems) or several communication tools.
ELM-ART represents the domain knowledge (Domain Model) in terms of a
conceptual network, where units to be learned are organized hierarchically into
lessons, sections, subsections and terminal pages (units). Each unit is represented
as an object containing slots for the text to be presented to the learner and for
information that can be used to relate units to each other (prerequisites, related
test items or inference links).
The Student Model is represented as an Overlay Model [6] (where the student’ knowledge is considered as a subset of the expert’ knowledge) arranged in
four layers. The ﬁrst layer, Visited State, describes whether the user has already
visited a unit; the Learner State layer contains information on which exercises
related to a particular unit the user has worked at and whether he/she successfully mastered them; the Inferred State layer describes whether a unit could be
inferred as known via inference links from more advanced units the user already
worked successfully; at last, the Known State, describes whether a unit has been

1084

J.M. Santos et al.

marked by the learner as already known. Information in the diﬀerent layers of
the learner model is updated automatically and independently during each interaction with the system. Additionally, students are provided with a tool for
inspecting and partially modifying his/her current model.
These models enable both the individual curriculum sequencing and the personalized visual annotation of links. ELM-ART also supports user interface personalization according to the preferences revealed by the students.
3.2

Intelligent Distributed Environment for Active Learning
(IDEAL)

IDEAL [7] is an intelligent agent-based environment for active learning. The
system consists of a number of specialized agents with diﬀerent expertise. Each
student is assigned a unique Personal Agent that manages the student’s personal proﬁle (Student Model) including knowledge background, learning styles,
interests, courses enrolled in, etc. The Course Agents manage course materials
and course-speciﬁc teaching techniques for a course. At last, the Teacher Agent
interacts with a student and serves as an intelligent tutor of a course. The basic
components of a teaching agent are a domain expert module (it creates exercises
and questions according to the student’s background and learning status, provides solutions and explains the concepts and solutions to cope with student’s
misconceptions), a pedagogical module (it is a rule-based production system that
uses the student model and pedagogical knowledge to determine the appropriate actions) and a student modeller (it provides a model of a student based on
his/her learning style, knowledge background and interests).
In IDEAL, the student level of expertise is inferred from the performance of
students on exercises and quizzes using a Bayesian belief network. This model
incorporates uncertainty to take into account the probability of slips (students
sometimes miss questions that they should know) and lucky guesses (correct
answers to questions of higher level than student’s level). The measure of how
well a skill is learned is represented as a probability distribution over skill levels,
such as novice, beginning, intermediate, advanced and expert. The conditional
probability of skill levels is as follows:
P (X = xj |Q) =
(1 − s)

j
i=1

(qi+ )

∗s

j
i=1

(qi− )

1
∗ P (X = xj )∗
P (Q)

∗g

n
i=j+1

(qi+ )

∗ (1 − g)

n
i=j+1

(qi− )

where X represents the skill levels; Q is the evidence vetor of n elements,
in which each element qi contains two numbers, ei+ and ei− , corresponding to
the number of correct and incorrect answers to questions at diﬃculty level i
respectively; s is the probability of a slip; and g is the probability of a guess.
The system incorporate a proprietary approach to course content organization and delivery, which is developed based on smart instructional components,

Applying Computational Science Techniques to Support Adaptive Learning

1085

called lecturelets. Lecturelets contain both the learning resources (concept descriptions, examples, quizzes, etc.) and the instructions on how the resources
should be processed or displayed.
3.3

Self-Paced and Adaptive Courseware (SAC) System

SAC [8] is a self-paced and adaptive courseware system developed at the Hong
Kong Polytechnic University. This system provides dynamic navigational guidance to students taking online courses. It has been designed and implemented
on a three-tier web application architecture which uses the Adaptive Hypermedia Application Model (AHAM) [9], a widely used reference model in Adaptive
Hypermedia [10] systems.
The AHAM model is composed by tree sub-models:
– The Domain Model describes how the information is structured and linked
together in term of concepts and concept relationships.
– The User Model is (conceptually) a table which associate each concept in
the Domain Model with a set of attributes. Most of the implementations of
this model include the attributes:
• Knowledge Value: it indicates how much the user knows about the concept.
• Read: It indicates whether the user read something (a fragment, a page
or a set of pages) about the concept.
A less common attribute would be Ready To Read, which indicates whether
the user is ready to access this concept.
– The Teaching Model is a set of pedagogical rules which deﬁne how the domain model and the user model are combined to provide ways to perform the
actual adaptation. These rules are used also to determine how to compute
the attributes of the Domain Model. As an simpliﬁed example, the following
rule:
< access(C2) AND C1.read=true ⇒ C3.ready-to-read=true, true >
expresses that when Concept2 is accessed and Concept1 is already read, the
Concept3 can be accessed. The true parameter points out that more rules
can be processed.

4

Conclusions and Future Trends

In spite of the great advantages reported by the researching community, as was
mentioned in Section 1, at present, Adaptive Learning Systems have failed to
gain widespread acceptance outside the researching laboratories. Thus, the many
e-learning platforms that predominate in the current market (such as WebCT
[11], IBM LearningSpace [12] or Blackboard Learning System [13]), used by
thousands of educational providers, do not oﬀer the possibilities of adaptation

1086

J.M. Santos et al.

or personalization depending on the learner’s characteristics, or they are very
limited. Among the several reasons adduced by the scientists (c.f. [14]), one is
widely cited and agreed:
Courses for ALSs are costly to build, needing among 100 and 1000 hours to
produce an hour of instructional material.
Solving this problem will be an enormous breakthrough in ALS research.
However we want to stand out another critical factor that will determine the
ﬁnal acceptance of these systems: Recently, several organizations and institutions have been thoroughly working towards the development of standards and
recommendations aimed to solve the interoperability problems currently found
in the e-learning domain [15]. It is foreseeable that near future educational platforms will be developed taken into account the results from this standardization
process. Thus, it is essential that both ALS researchers to bear in mind this standardization process and standardization bodies to consider the issues implicated
in ALS in order to guaranty the utilization of adaptation techniques.
First proposals from the e-learning standardization process are currently in
scene and some manufacturers have begun to adopt them. However, they are
not used at all in Adaptive Learning Systems. The reason of this fact resides, on
the one hand, in the dedication of ALS researchers to solve particular teaching
and pedagogical problems, whithout considering questions such as compatibility.
On the other hand, current proposals present some troubles for using them in
adaptive environments, being the most outstanding the lack of integration among
them (see [16] for a more detailled discusion about this).
Acknowledgments. We want to thank “Ministerio de Ciencia y Tecnolog´ıa”
for their partial support to this work under grant “CORBALearn: Interfaz de
Dominio guiada por Est´
andares para Aprendizaje Electr´
onico” (TIC2001-3767).

References
1. Jones, M., Greer, J., Mandinach, E., du Boulay, B., Goodyear, P.: Synthesizing
Instructional and Computational Science. In: M. Jones & P. Winne (eds.): Adaptive
Learning Environments: Foundations and Frontiers, pp. 383–401, Berlin: SpringerVerlag (1992)
2. Weber, G.: Adaptive Learning Systems in the World Wide Web. In: J. Kay (Ed.):
User modeling – Proceedings of the Seventh International Conference (UM99), pp.
371–378. Vienna: Springer (1999)
3. Dillsus, D., Brunk, C.A., Evans, C. Gladish, B., Pazzani, M.: Adaptive Interfaces
for Ubiquitous Web Access. In: Communications of the ACM, Vol 45, No 5. pp.
34–38 (2002)
4. Mill´
an, E., P´erez-de-la-Cruz, J.L.: A Bayesian Diagnostic Algorithm for Student
Modeling and its Evaluation. In: User Modeling and User-Adapted Interaction,
vol. 12, pp. 281–330, Kluwer Academic Publishers (2002)
5. Weber, G., Brusilovsky, P.: ELM-ART: An adaptive versatile system for Web-based
instruction. In: International Journal of Artiﬁcial Intelligence in Education, vol. 12,
pp. 351–384 (2001)

Applying Computational Science Techniques to Support Adaptive Learning

1087

6. Van Lehn, K.: Student modelling. In: Foundations of Intelligent Tutoring Systems.
Hillsdale, NJ: Lawrence Erlbaum Associates Publishers, pp. 55–76 (1988)
7. Shang, Y., Shi, H., Chen, S.: An Intelligent Distributed Environment for Active
Learning. In: ACM Journal of Educational Resources in Computing, vol. 1, issue
2, pp. 308–315 (2001)
8. Chan, A., Chan, S., Cao, J.: SAC: A Self-paced and Adaptive Courseware System. In: Proceedings of the IEEE International Conference on Advanced Learning
Technologies (ICALT2001), Wisconsin, U.S.A., IEEE Press (2001)
9. De Bra, P., Houbent, G., Hongjing, W.: AHAM: A Dexter-based Reference Model
for Adaptive Hypermedia. In: Proceedings of the 10th ACM Conference on Hypertext and Hypermedia, Darmstadt, Germany, ACM Press (1999)
10. Brusilovsky, P.: Adaptive Hypermedia. In: User Modeling and User-Adapted Interaction, vol. 11, issue 1–2, pp. 87–110, Kluwer Academic Publishers (2001)
11. WebCT web site at http://www.webct.com [last accesed January 1th 2003]
12. IBM’ LearningSpace web site at http://www.lotus.com/products/learnspace.nsf/
wdocs/homepage [last accesed on January 1th 2003]
13. Yaskin, D.: Blackboard Learning System (Release 6). Product Overview White
Paper. Blackboard Technical Report. Online available at
http://products.blackboard.com/cp/release6/LSR6WP.pdf
14. Woolf, B.P., Regian, J.W.: Knowledge-based training systems and the engineering
of instruction. In: Training and retraining: A handbook for business, industry,
government and the military, pp. 339–356, Macmillan Reference (2000)
15. Santos, J., Caeiro, M., Rodr´ıguez, J., Anido, L.: Standardization in TelE-learning.
A Critical Analysis. In: TelE-Learning. The Challenge for the Third Millenium.
17th IFIP World Computer Congress, pp. 321–328, Montreal (Canada). Kluwer
Academic Publishers (2002)
16. Santos, J.M., Anido, L., Llamas, M., Rodr´ıguez, J.S.: On the Application of the
Semantic Web Concepts to Adaptive E-Learning. In: Shafazand, M. H.; Tjoa, A M.
(Eds.) EurAsia-ICT 2002: Information and Communication Technology, Lecture
Notes on Computer Science, Vol. 2510, pp. 536–543 (2002)

