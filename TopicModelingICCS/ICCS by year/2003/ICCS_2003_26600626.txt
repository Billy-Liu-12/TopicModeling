Eﬃcient Migration Algorithm for Mobile Agents
in Wired/Wireless Internets
Sukwoo Han1 , Kuinam J. Kim2 , and Young-Sung Kim1
1

Dept. of Computer Science Chonbuk National Univ., South Korea
swhan@wkhc.ac.kr
2
Dept. of Information Security Konggi Univ., South Korea

Abstract. Mobile agents are active objects that automatically migrate
from one node to other node in wired/wireless Internets. Due on failures
of clients, mobile agents may be blocked or crashed even if there are
available service. To solve this situation, we propose eﬃcient migration
algorithm with reordering and backward recovery of the paths to guarantee the migration of mobile agents. The proposed algorithm not only
aﬀords to avoid any faults of nodes or clients of mobile agents on Internet
but also aﬀects to agents’ life span.

1

Introduction

Mobile agent technology has been applied for various application areas such as
wired/wireless Internets management, and E-commerce [1][3][4][7][8][11]. Mobile
agents are autonomous objects that migrate from node to node of Internet and
provide to user which have executed themselves using database or computation
resources of clients connected by the wired/wireless Internets. To migrate the
mobile agent, it will be needed a virtual place so-called the mobile agent system
to support mobility [8]. Several prototypes of mobile agent system have been
proposed in several diﬀerent agent systems such as Odyssey [3], Aglet [4], Agent
TCL [19], Mole [2], and so forth. Most systems are little ensured its migration for
a fault of Internet nodes or a crash of clients (or hosts), which may happen during
migrating after a mobile agent launch. On the faults such as a destruction of the
nodes or the mobile agent systems, we may consider that mobile agents may be
destroyed, or blocked against the seamless wired/wireless Internets processing. It
is no natural attribute to monitor the seamless progress of agent’s execution, in a
viewpoint to guarantee the autonomy of mobile agents. Therefore, we proposed
a strategy with the simple techniques of path reordering and backward recovery
to migrate mobile agents. It is implemented in the JAMAS, which we developed
a model of mobile agent system based on Java language for system independent
platform.

2

Related Work

Most of mobile agent systems provide a virtual place for migrating mobile agents
under our basic ideal condition that there are no faults on the systems or
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2660, pp. 626–634, 2003.
c Springer-Verlag Berlin Heidelberg 2003

Eﬃcient Migration Algorithm for Mobile Agents in Wired/Wireless Internets

627

nodes, or include relevant protocols. While a mobile agent is launched to speciﬁc
nodes/clients according to relevant routing schedules [4], it is possible to happen
some problems about migration of mobile agent if the host happens an accident
within where the agent visits and executes. Typically, ORB [6][7] implements
distributed garbage collection in order to delete objects having no more references. Voyager [6] provides ﬁve policies for mobile agent’s life cycle. Mole [2]
supports the shadow protocol for orphan detection and successful termination
for agents in mobile agent systems. The protocol is for detecting and processing
what occurs any fault on migrating mobile agents. However, it does not provide
to guarantee migration reliability of mobile agent. There is a simple protocol
using transaction message queue [10], which is a procedure that the sender puts
messages in the queue and receiver gets messages. There is also the same problem
as the process of autonomous mobile agent in that it does not include facilities
for monitoring the progress of an agent’s execution. For example, assume that
there is an agent in input queue of a host and the node’s error occurs before
the agent moves to queue of next node. Then the agent is blocked until that
the node is recovered. This situation diﬀers from problem in client/server. Mole
[2][10] provides a fault tolerant protocol to support eﬀective way for ’exactly
once’ migration using voting and selecting protocol as copying mobile agent to
all nodes

3

Eﬃcient Migration Algorithm for Mobile Agents

Figure 1 shows how the node repository can use in implementation instead of
transaction message queue for agents. Assume that an agent moves from a node
to the consecutive node along the path N1→ N2→ ...→ N(k-1)→ Nk (where Ni
is a Internet node, Hi is a client (or a host), and Ri is an agent repository). As
an agent may visit the same node several times Ni and Nj (1<=i, j<=k) may
denote the same or diﬀerent nodes. Assume further that an agent is stored in
a repository when it is accepted by the agent system for execution. Except Nk,
each other node performs the following sequence of operations on Transaction
Ti such as Get (agent); Execute (agent); Put (agent); Commit. Get removes an
agent from the node’s repository. Execute performs the received agent locally.
Put places it on the repository of the host that will be visited the right next
time. Three operations are performed within a transaction and hence consisted
of the atomic unit of work.
In Figure 1, we assume to happen a failure in a particular node Ni within the
migration path of the mobile agent. For example, although the node Ni of the
client Hi lives, the agent can’t be migrated. Inversely, although the node Ni can
be communicated with the previous node N (i-1), the agent can’t occasionally
migrate if the client Hi does not operate the agent system. In the above cases, the
agent is never arrived by the last node Nk. It may be very weak point that the
agent at previous client Hi-1 needs to receive user’s assertion. In the worse case,
if a shared client on the multiple agents launched occurs to crash on launching,

628

S. Han, K.J. Kim, and Y.-S. Kim
Wakeup and Hop

H1
Waiting
Clone

H2
Waiting
Clone

H3
Waiting
Clone

H4
Waiting
Clone

send ’ACK’ + Timestamp

H5
Current
Agent

H6

H7

Agent_Timestamp
= Migration Time+Running Time

Fig. 1. Migration path of a mobile agent.

the agents will block or destroy even if other nodes are available to process
continuously.
3.1

Reordering Algorithm of the Path

Figure 2(a) supposes that there is a migration path corresponding with an agent’s
routing schedule and some faulty nodes, such as N3, N4, and N7. An agent
migrates and executes from node N1 to N2 sequentially, but it is blocked at
the client of node N2 until the node N3 is recovered. If the node N3 dose not
recovered, the agent may be orphaned or destroyed by the particular client. To
solve this situation is for the agent to skip the faulty node N3 that includes on
the migration path, and to move the address of node N3 back to the last one
of the migration path. And then, the node N2 successfully connects the next
other node N4 without any fault. Node N4 also has a particular fault. Therefore,
node N2 Hop the right consecutive next one of node N4. As the same method
is also applied to other nodes, the agent’s migration path has reordered. That
is, despite of any particular faulty nodes, the agent tries to connect subsequent
nodes for the migration touring. This solution changes the previous arranged
migration path by connecting with normal nodes except that some nodes have
the particular fault. Afterward, the agent retries to connect each certain fault
node after it waits for the timestamp assigned by the mobile agent system. If
the certain faulty node is recovering by the timestamp, the agent will succeed in
migrating to the destination node. Otherwise, the address of the faulty node will
be discarded. Since the agent may be apt to loophole, we will give a restriction
against the number of reconnection times. Figure 2(b) shows that a whole rearranged migration path for the mobile agent be changed by this strategy.
Algorithm 1: Reordering of the path
For each agent’s routing-table {
Extract a target address and fail checked information;
//multicasting the signal to eliminate that clones if the agent has no more than
the destinations
if (no more a target address)
Backward multicasts ’Agent Fire’ signal to successful target nodes;
//noticing of the ﬂag to re-entering for the failure of some nodes

Eﬃcient Migration Algorithm for Mobile Agents in Wired/Wireless Internets

629

Fig. 2. The reordering before and after meet with faulty nodes

if ( exist a fail checked address) { // check whether connect more than two
times or not
Wait the agent during some system timestamp;
Try to connect Socket to the address;
if (success) {
Call go Agent;
Exit;
} else {
Notify to user the address is unavailable;
Ignore the address; }}
//trying to connect the destination node the agent starts to migrate.
else if (not a fail checked address) {
Try to connect Socket to the destination node;
if (success) {
Call go Agent;
Exit; }
//if the agent does not connecting or migrating, set the ﬂag and notify to user,
// Re-ordering the path in the routing-table at the same time.
else {
Notify to user;
Move the current failed address to last in the routing-table;
Set the fail checked information;
}}}
The mobile agent system executes the path reordering to connect every nodes
of the migration path. If the agent doesn’t connect a particular node in the
middle of reaching the destination node via the migration path, it will succeed
with connecting the right next one of a particular node of the path. After the
failed address is pushed to the top one of routing table, it will retry to connect
to the node. When it does reconnect each failed node, it does wait as much the
timestamp assigned by the mobile agent system to reconnect. If it passes over the
timestamp, it does ignore this address, and repeatedly connect the next faulty
node. We have a limitation for reducing Internet overhead that mobile agent can

630

S. Han, K.J. Kim, and Y.-S. Kim

just try two times to connect the failed node. That means a mobile agent to
occur inﬁnitive looping for just connection. Although it is connected, it applies
equally the same as that way if each host of the node errors the mobile agent
system. Algorithm 1 oﬀers automatically to reorder the migration path when
the mobile agent can not migrated the next host due to the faulty nodes.
Backward Recovery Algorithm. In Figure 3, we suppose that the migrated
agents execute autonomously at the client H5. If the client H5 of node N5 crashes,
all agents at that host are blocked or destroyed. To prevent it, the agent copies
itself (that is, the clone) in the current client when an agent migrates the next
node after it ends its job at the current client. The clone is unconditionally
waiting until receiving an acknowledge signal ’ACK’ from the next client. If the
signal ’ACK’ doesn’t reach to the current client H4 within the timestamp from
the next client H5, the cloned agent at the client H4 has automatically activated
to resolve this hindrance. Consequently, it hops to the next node N6. If the agent
faults at the client H6 on execution, it will work repeatedly the same method to
connect the other next node. In Figure 3, it happens that the current running
agent at a client H5 is destroyed by a particular clash. At the same time, if the
current client H4 also happens the succeeding fault, a cloned agent (which has
already copied the previous client H3 of the client H4) wakes up and re-runs.
This is so-called Backward Recovery.

Wakeup and Hop

H1
Waiting
Clone

H2
Waiting
Clone

H3
Waiting
Clone

H4
Waiting
Clone

send ’ACK’ + Timestamp

H5
Current
Agent

H6

H7

Agent_Timestamp
= Migration Time+Running Time

Fig. 3. An example of Backward Recovery

The backward recovery method is as follows: the agent system copies the
clones of its agent on the client before migrating to the right next client. Each
clone is waiting by it’s own timestamp. Its timestamp of the original clone is
maximum at the original host of the migration path, the next clone will be
less than the migration and execution time of the previous one, and so forth.
From launching an agent, the timestamp accumulates every clone of the previous
clients with it’s own moving and running time before it depart for the current
client. Therefore, clones are waiting by the timestamp. Each clone spontaneously
revives and attempts to work the path reordering as soon as regarding as a
clashed host when none received any signal from the next host. At the ﬁnal
destination’s node of the host, the agent system should broadcast a signal ’Agent
Fire’ to all copied clones of the agent excepting the faulty nodes and failed
hosts until reaching the destination. In such method, the algorithm 2 provides a

Eﬃcient Migration Algorithm for Mobile Agents in Wired/Wireless Internets

631

backward recovery method for which mobile agents support adaptive migration
from a host to the next one.

Fig. 4. A routing path with a fault of clients NEb

Algorithm 2: Backward Recovery
Waiting Clones Check
// Periodically checking the timestamps of the clones.
for each sleeped clone
if (empty a clone timestamp) {
Notify to user;
Call wakeup Clone; }
Go Agent // migrating the agent or cloning it.
Send the agent;
Wait the agent’s ’ACK’ signal during send timestamp;
if (’ACK’) {
Clone the agent;
Call sleepAgent; }
else call wakeupClone;
Arrive Agent // if the agent arrives in the JAMAS, noticing the previous node
with the signal and
//and executing.
Send ’ACK’ to the previous node;
Execute the agent;
Sleep Agent // Each cloned agent is waiting for the assigned timestamps
for each cloned agent {
Add agent timstamp to system timestamp;
Add the agent to the sleeped list;
Sleep the agent;}
Wakeup Clone // re-activating the clone of the agent.
for the sleeped list
Find a cloned agent;
Remove it from the sleep list;
if (’Agent Fire’) remove the cloned agent;
else {
Move the current failed address to last in the routing-table;
Set the fail checked information;
Call the algorithm 2; // arranging the path. }

632

S. Han, K.J. Kim, and Y.-S. Kim

(a) A screen shot of executing at the NEh

(b) A screen shot of executing at the Nea

(c) A screen shot of executing at the NEc and attempting
migration of the second at the NEb
Fig. 5. Fault-tolerable executions of a mobile agent at each NE

4

Implementation

The proposed scheme is implemented in the JAMAS, a model of mobile agent
system. The JAMAS consists of Graphic User Interface, Agents Mobile Service
Component, Agents Execution Environment Component, and Agents Repository
to provide the naming transparency of agents. In addition, it may be executing
one more systems within a host.
We show to launch through the process of an agent which manages some
NEs (Internet elements). The following ﬁgures show that the simple agent as a
role of Management Information Base (MIB) browser should be migrated and

Eﬃcient Migration Algorithm for Mobile Agents in Wired/Wireless Internets

633

executed according to the routing schedule. Figure 4 depicts the routing path of
the agent such as NEh → NEb → NEa → NEc, and we assume to be a fault at
the client NEb.
Finally, Figure 5 shows executions of the agent at each NE as follows: Figure
5(a), as a screen capture of the host NEh, shows hopping by a failure of connection at the next NEb after the launched agent normally progresses. Due to
a failure of the host, the agent passes to next one. Thereafter, Figure 5(b), (c)
capture executing of the agent at the hosts NEa, NEc. Then it is adapted to the
proposed policy. Therefore, the agent has toured for all nodes having no faults
before that it does re-connect with the faulty nodes.
Therefore, the adaptive migration scheme for mobile agents ensures the persistency of computation to preserve autonomous mobility and information of
state for agents though there are some faults of nodes or clients on the routing
schedules of the Internet.

5

Conclusions

In this paper we introduce the path reordering algorithm and backward recovery
algorithm to ensure the migration of mobile agents in wired/wireless networks.
The proposed scheme not only aﬀords to avoid any faults of nodes or clients
of mobile agents on Internet but also aﬀects to agents’ life span. All presented
techniques have been implemented in our system, JAMAS. Therefore, JAMAS
can improve eﬀectively the problem of performance and wired/wireless networks
overhead due to the imposed characteristics of distributed architecture since a
mobile agent oﬀers not only the migration reliability and transparency for mobile
agent as autonomously as possible but also computing environment which is
capable of distributed processing with mobile objects.

References
1. K.A. Baharat, L. Cardelli, “Migratory Applications”, Proc. of the 8th Annual ACM
Symp. on UISTech., November 1995.
2. J.Baumann, “A Protocol for Orphan Detection and Termination in Mobile Agent
Systems”, TR-1997-09, Stuttgart Univ. Jul., 1997.
3. General Magic, “Odyssey”, URL: http://www.genmagic.com/agents/
4. IBM, “The Aglets Workbench”, URL: http: //www.trl.ibm.co.jp/aglets
5. Ing-Ray Chen, Tsong-Min Chen, and Chiang Lee, “Analysis and Comparison of
Location Strategies for Reducing Registration Cost in CS Networks”, Wireless
Personal Communications journal, Vol. 12, No. 2, 2000, pp. 117–136.
6. D. B. Lange, M. Oshima, “Seven good reasons for mobile agents”, Proc. of CACM,
Vol. 42(3), Mar. 1999, pp. 88–89.
7. Objectspace Voyager, GeneralMagic Odyssey, IBM Aglets: A Comparison, June,
1997.
8. OMG, “Mobile Agent Facility Interoperability Facilities Speciﬁcation (MAF)”,
OMG.

634

S. Han, K.J. Kim, and Y.-S. Kim

9. A. Puliaﬁto et al., “A Java-based Distributed Network Management Architecture”,
3rd Int’l Conf. on Computer Science and Informatics (CS&I’97), Mar. 1997.
10. Robert S.G., “AgentTCL: A ﬂexible and secure mobile-agent system”, TR98-327,
Dartmouth Col. June 1997.
11. K. Rothermel, M. Straer, “A Fault-Tolerant Protocol for Providing the ExactlyOnce Property of Mobile Agents”, Proc. of 17th IEEE SRDS’98, Oct. 1998.
12. J. Vitek and C. Tschudin, “Mobile Object Systems: Towards the Programmable
Internet”, Springer-Verlag, Apr. 1997.

