An Efficient Election Protocol in a Mobile Computing
Environment*1
Sung-Hoon Park
Dept. of Computer Science, NamSeoul University, Chung-Nam 330-800, Korea
spark@nsu.ac.kr

Abstract. The Election protocol can be used as a building block in many
practical problems such as group communication, atomic commit and replicated
data management where a protocol coordinator might be useful. The problem
has been widely studied in the research community since one reason for this
wide interest is that many distributed protocols need an election protocol.
However, despite its usefulness, to our knowledge there is no work that has
been devoted to this problem in a mobile computing environment. Mobile
systems are more prone to failures than conventional distributed systems.
Solving election in such an environment requires from a set of mobile hosts to
choose a mobile host or a fixed host based on the their priority despite failures
of both mobile computing and/or fixed hosts. In this paper, we describe a
solution to the election problem from mobile computing systems. This solution
is based on the Garcia Molina’s Bully algorithm.

1 Introduction
The wide use of small portable computers and the advances in wireless networking
technologies have made mobile computing today a reality. There are different types of
wireless media: cellar (analog and digital phones), wireless LAN, and unused portions
of FM radio or satellite services. A mobile host can interact with the three different
types of wireless networks at different point of time. Mobile systems are more often
subject to environmental adversities which can cause loss of messages or data [8]. In
particular, a mobile host can fail or disconnect from the rest of the network.
Designing fault-tolerant distributed applications in such an environment is a complex
endeavor.
In recent years, several paradigms have been identified to simplify the design of
fault-tolerant distributed applications in a conventional static distributed system.
Election is among the most noticeable, particularly since it is closely related to group
communication [7], which (among other uses) provides a powerful basis for
implementing active replications.
The Election problem [1] requires that a unique coordinator be elected from a
given set of processes. The problem has been widely studied in the research
community [2,3,4,5,6] since one reason for this wide interest is that many distributed
* This work supported by Ministry of Information & Communication Research Grant C12002-039-0-3 in Korea.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 387–396, 2003.
© Springer-Verlag Berlin Heidelberg 2003

388

S.-H. Park

protocols need an election protocol. However, despite its usefulness, to our
knowledge there is no work that has been devoted to this problem in a mobile
computing environment.
The aim of this paper is to propose a solution to the election problem in a specific
mobile computing environment. This solution is based on the Garcia’s Bully
algorithm that is a classical one for synchronous distributed systems. The rest of this
paper is organized as follows: in Section 2, we mention motivations and related
works. In Section 3, a solution to the election problem in a conventional synchronous
system is presented. Section 4 describes the mobile system model we use. A protocol
to solve the election problem in a mobile computing system is presented in Section 5.
We conclude in Section 6.

2

Motivations and Related Works

So far, many kinds of election algorithms are presented in the research articles based
upon the different system topologies, i.e. some based upon complete topology, some
based upon ring topology and others based upon tree topology. But applying such an
election algorithm to the mobile computing environment without modifications
clearly gives rise to some problems.
Among the problems, there are some critical ones such as delayed termination of
the election protocol or failure of the election protocol at the worst by environmental
adversities which can cause the loss of messages or data in a mobile computing
environment. In particular, in a case where mobile host failure or disconnection/
connection is most common, these problems would be more serious than the ones in
static distributed systems.
As an example, consider the Garcia-Molina’s Bully algorithm applying to mobile
computing environment. When the algorithm has started, each node should check all
other node failures. It clearly causes a lot of message traffics. Moreover, frequent
connection/disconnection of mobile nodes eventually leads to a failure of the
algorithm. It is because that it is almost impossible for a node to check the failures of
all the nodes correctly in the mobile computing environment.
Therefore, to elect a leader correctly in a mobile computing environment, a new
election algorithm fitting for mobile computing environments is required. However,
no work has been devoted to this problem in a mobile computing environment. If the
role of a coordinator is limited to a static fixed host, any election algorithm for static
distributed systems would be easily applied to the mobile computing environment.
The role of coordinator cannot be restricted only to a static fixed host. By
considering a non-fixed coordinator, the coordinator freedom to move about without
any infra-structural constraints is enabling the construction of mobile information
systems whose use is mainly associated to specialized applications such as vehicle
traffic, fleet and events management, emergency disaster relief, rescue and battlefield
operations.

An Efficient Election Protocol in a Mobile Computing Environment

389

3 Election in a Static System
3.1 Model and Definitions
We consider a synchronous distributed system composed of a finite set of process Π =
{p1,p2,.,Pn} completely connected. Communication is by message passing,
synchronous and reliable. A process fails by simply stopping the execution
(crashing), and the failed process does not recover. A correct process is the one that
does not crash. Synchrony means that there is a bound on communication delays or
process relative speeds. Between any two processes there exist two unidirectional
channels. Processes communicate by sending and receiving messages over these
channels.
The Election problem is specified as following two properties. One is for safety
and the other is for liveness. The safety requirement asserts that all processes
connected the system never disagree on a leader. The liveness requirement asserts that
all processes should eventually progress to be in a state of normal operation in which
all processes connected to the system agree to the only one leader. An election
protocol is a protocol that generates runs that satisfy the Election specification.
3.2 Bully Algorithm to Solve Election
As a classic paper, Garcia-Molina specifies the leader election problem for
synchronous distributed systems with crash failures and gives an elegant algorithm for
the system; these algorithms are called the Bully Algorithm [2]. The basic idea in the
Bully Algorithm is that the operational process with the highest priority becomes a
leader. The bully algorithm is described as follows.
− Each process has a unique ID that is known by all processes. The leader is initially
the process with the highest priority.
− If a process detects failure of its leader, it gets into the election status and checks
whether processes with higher-priority than itself are operational.
− If some of them are operational, the process waits, giving those higher-priority
processes a chance to become a leader.
− If none of them are operational, then the process becomes a new leader and informs
the processes with low-priority of the fact that it is a new leader by sending them a
message.
− When a process receives such a message, the process adopts the newly elected
leader as its own new leader.

4 Mobile System Model
A distributed mobile system consists of two distinct set of entities: a large number of
mobile hosts (MH) and a set of fixed hosts, some of which act as mobile support
stations (MSSs) or base stations. The non MSS fixed hosts can be viewed as MSSs
whose cells are never visited by any mobile host. All fixed hosts and all

390

S.-H. Park

communication paths connecting them form the static network. Each MSS is able to
communicate directly with mobile hosts located within its cell via a wireless medium.
A cell is the geographical area covered by a MSS. A MH can directly communicate
with a MSS (and vice versa) only if the MH is physically located within the cell
serviced by the MSS. At any given instant of time, a MH can belong to one and only
one cell. In order to send message to another MH that is not in the same cell, the
source MH must contact its local MSS which forwards the messages to the local MSS
of the target MH over the wireless network. The receiving MSS, in its turn, forwards
the messages over the wireless network to the target MH.
When a MH moves from one cell to another, a Handoff procedure is executed by
the MSSs of the two cells. Message propagation delay on the wired network is
arbitrary but finite and channels between a MSS and each of its local mobile hosts
ensure FIFO delivery of messages.
4.1 Characteristics of Mobile Hosts
The bandwidth of the wireless link connecting a MH to a MSS is significantly lower
than bandwidth of the links between static hosts [9]. In addition, mobile hosts have
tight constraints on power consumption relative to desktop machines, since they
usually operate on stand-alone energy sources such as battery cells. Consequently,
they often operate in a doze mode or voluntarily disconnect from the network.
Transmission and reception of messages over wireless links also consume power at
a MH. So, distributed algorithm for mobile systems need to minimize communication
over wireless links. Furthermore, mobile hosts are less powerful than fixed hosts and
have less memory and disk storage. Hence, while designing distributed algorithms for
mobile systems, the following factors should be taken into account [10,11]:

−
−
−
−

The amount of computation performed by a mobile host should be kept low
The communication overhead in the wireless medium should be minimal
Algorithm should be scalable with respect to the number of mobile hosts
Algorithm should be able to easily handle the effect of mobile host disconnections
and connections

5 Election in a Mobile System
In the following, we consider a broadcast group G = (G_MSS, G_MH) of
communicating mobile hosts, where G_MH and G_MSS are respectively a set of m
mobile hosts roaming in a geographical area (like a campus area) covered by a fixed
set of n MSSs. In so far, local mobile hosts of base station MSSi, which currently
residing in MSSi cell, will refer to mobile hosts that belong to group G.
A mobile host can move from one cell to another. If its current base station fails,
the connection between the mobile host and the rest of system is broken. To recover
its connection, a mobile host must move into another cell covered by an operational or
correct base station. So, unless it crashes, a mobile host can always reconnect to the
network. A mobile host may fail or voluntarily disconnect from the system. When a

An Efficient Election Protocol in a Mobile Computing Environment

391

mobile host fails, its volatile state is lost. All mobile and fixed hosts have unique
identifier which decides the their priority.

•

•

MSS

•
Mobile
Host

Fixed Host

MSS

Fixed Host
STATIC
NETWORK

Fixed Host

Fixed Host

Fixed Host

MSS

•
Cells

•

•

Fig. 1. Mobile System Model

In this environment, the election problem is defined over the set G_MH of mobile
hosts. When a mobile host hk detects a leader failure, it broadcasts the leader crash to
all other mobile hosts through its G_MSS. In this case, a mobile host or a static host
based on their highest priority eventually should be elected as a new leader. Due to
the resources constraints of mobile hosts and the limited bandwidth of wireless links,
the distributed algorithm to solve election is executed by the set of MSSs on behalf of
the set G_MH of mobile hosts.
In a first phase, MSSs have to elect their local leaders amongst the subset of G_MH
of mobile hosts roaming in their respective cells. In the second phase, each MSS starts
bully algorithm to elect a global leader in the broadcast group G. Finally each MSS
forwards the newly elected leader to the mobile hosts that currently reside in its cell.
5.1 Principle
The election protocol proposed in this paper is based on the solution described by
Garcia Molina in bully algorithm [2]. The outlines of their protocol have been
described in Section 2. In this section, we give an overview of our protocol and
identify the major differences compared with the original bully algorithm. We assume
that the election is initiated by a mobile host which requests its current base station to
launch the election. The contacted base station forwards the request to all other base
stations.
During the election, each base station on one hand interacts with the mobile hosts
located in its cell to gather the id of each mobile host and on the other hand interacts
with the other base stations to elect a unique global leader. In our approach, a base

392

S.-H. Park

station MSS which participates in the election protocol, always acts on behalf of a
subset of mobile hosts. More precisely, the initial value of a variable Leaderi is the id
of a mobile host elected as a local leader from the mobile hosts that reside in MSSi.
After exchanging messages with a base station which plays a role of an election
coordinator, the value of Leaderi may include the id of a mobile host elected as a
global leader from mobile hosts of all cells.
The election protocol in such an environment consists of three phases. In the first
phase, that is a local election phase, each base station does two tasks concurrently.
One is searching a mobile host with high priority from the mobile hosts connected to
the base station and the other is participating in the election of a base station that
plays a role of an election coordinator during the election period. During the election
in a mobile computing environment, a base station to play a role of an election
coordinator is needed to reduce the message traffic among base stations. The
algorithm to elect an election coordinator among base stations is similar to the bully
algorithm to elect a leader in static distributed systems.
In the second phase, each base station sends to the election coordinator the value of
Leader that is the id of a local leader elected from mobile hosts in the cell. After
collecting the values of Leader from all base stations, the election coordinator picks
up a global leader which is a mobile host with highest priority and informs all other
base stations of this newly elected global leader.
In the third phase, each base station received this message from the election
coordinator sends it to mobile hosts that are connected to the base station.
5.2 Protocol
The protocol is composed of three parts and each part contains a defined set of
actions. Part A (figure 2) describes the role of an arbitrary mobile host hk. Part B
presents the protocol executed by a base station MSSi. It is subdivided in two subparts: sub-part B1 (figure 3) and sub-part B2.
Begin
% Mobile host hk is located in MSSi cell
(1) Upon the program application requires to start an election
Send INIT_1 to MSSi
(2) Upon receipt of INIT_3 from MSSi
% Let the value of variable hk be an id value provided by the mobile host hk.
Send PROPOSE(hk) to MSSi
(3) Upon receipt of DECIDE(New_Leader) from MSSi
exit
% The result of the election protocol is delivered to the application program
end
Fig. 2. Protocol Executed by a Mobile Host hk (Part A)

Sub-part B1 is related to the interactions between a base station and its local
mobile hosts, on one hand and the election coordinator on the other hand. Sub-part B2
is the Bully protocol adapted to our environment to elect an election coordinator

An Efficient Election Protocol in a Mobile Computing Environment

393

among base stations. So, it is abbreviated. Finally, the part C of the protocol is the
handoff protocol destined to handle mobility of hosts between different cells.
In figure 2, the three actions performed by an arbitrary mobile host are:
(1) A mobile host sends INIT_1 message to its base station when it receives a request
from an upper application program to initiate an election.
(2) Message INIT_3 is sent to a mobile host either when its local base station is
informed (on receipt of INIT_2) that an election has started or when the mobile host
enters a cell managed by a base station which is not yet aware of its value. Upon
receipt of such a message, each mobile host sends to the MSS its id value hk that
represents the priority of the mobile host hk.
(3) When the election protocol terminates, the id of the newly elected leader is
forwarded to each mobile host.
Phasei := 0; End_collecti := false;
time-out := δ
Pi := ∅; Statei := undecided;
cobegin
(4) || Upon receipt of INIT_1
if Phasei = 0 then
send INIT_2 to all MSSs
except MSSi;
Phasei := 1;
if ¬End_collecti then
W_Broadcast INIT_3
end-if
end-if
(5) || Upon receipt of INIT_2
if Phasei = 0 then
Phasei := 1;
if ¬End_collecti then
W_Broadcast INIT_3
end-if
end-if

(6) || Upon receipt of PROPOSE( hk )
if ¬End_collecti then
% Value collection %
Pi : = Pi • ^ KN `
end-if
(7) || On time-out
End_collecti := true;
% MSSi proposes an estimate for
a new leader %
Phasei := 2;
Leaderi := Max (Pi);
Send ESTIMATE(MSSi, Leaderi)
to MSSc;
(8) || Upon receipt of DECEIDE (hk)
if (Statei = undecided ) then
Statei = decided;
Phasei := 0;
Leaderi : = hk;
W_Broadcast
DECEIDE(Leaderi)
end-if
coend

Fig. 3. Protocol Executed by a Base Station MSSi (Part B)

Actions of the protocol in figure 3 numbered from (4) to (8) are executed a mobile
support system MSSi. They have the following meaning:
(4) When a base station is asked by a mobile host to initiate an election, it sends an
INIT_2 message to the other base station to inform that an election has started. Next,
by broadcasting INIT_3 message, each base station starts to collect values from local
mobile hosts, if any, and until time-out holds (End_collecti = true). Testing if ( Phasei
= 0 ) ensures that the election is undergoing.
(5) When a base station receives an INIT_2 from other base stations, it broadcasts
INIT_3 message to all its local mobile hosts to inform the fact that an election has

394

S.-H. Park

been initiated. Next, like (5), each base station starts to collect id values from local
mobile hosts until time-out holds (End_ collecti = true).
(6) Each base station MSSi gathers the ids of its local mobile hosts, while time-out is
false.
(7) On time-out, MSSi lets the variable End_collect be true and chooses a local host
with highest priority as its local leader. After that, MSSi recommends it as a global
new leader to the election coordinator.
(8) A base station MSSi receives a message DECIDED(hk) when the election
coordinator has gathered all local host ids proposed from other MSSs and has decided
a host with highest priority as a global leader. MSSi adapts this host as new global
leader, changes its state to decided, forwards the decided global leader to local mobile
hosts and terminates (Phasei = 0).
Actions of the protocol in figure 4 numbered from (9) and (10) are executed a
mobile support system which is an election coordinator. They have the following
meanings:
(9) When time is out, the election coordinator MSSc chooses a host with highest
priority among hosts recommended from other base stations and decides it as a new
global leader. After that, the MSSc sends the id of global leader to other base stations
and terminates the role of the coordinator.
(10) When MSSc has received an id of a local host proposed by a MSS, it saves the id
into the set while it doing the role of the coordinator.
Coordinator := true; Vc := ∅;
begin
(9) || On time-out
% MSSc decide a new leader %
hc := Max (Vc);
Send DECIDE(hc) to all MSSi;
Coordinator := false;
exit

time-out := θ;
(10) || Upon receipt of ESTIMATE(hk)
if Coordinator = true then
Vc : = Vc • ^KN`
end-if
end

Fig. 4. Protocol Executed by an election coordinator MSSc

As shown in Figure 5, the handoff protocol is reduced. When a mobile host hk
moves from MSSj cell to MSSi cell, the handoff protocol execution is triggered.
Mobile host hk has to identify itself to its base station by sending a message
GUEST(hk, MSSj). Upon receiving this message, MSSi learns that a new mobile host
hk, coming from MSSj cell has entered in its cell. MSSi informs MSSj to remove hk from
the set of mobile hosts that reside in its cell and eventually to transfer information
about the last state of hk to MSSi. MSSi queries hk to send back its id value, if an
election has already started and the value collection is still possible.

An Efficient Election Protocol in a Mobile Computing Environment

% Role of hk %
Upon entry in MSSi cell
Send GUEST(hk, MSSj) to MSSi
% Role of MSSj
Upon receipt of BEGIN_HANFOFF
(hk, MSSi)
Local_MHj := Loacl_MHj – {hk}

395

% Role of MSSi
Upon receipt of GUEST(hk, MSSj)
Local_MHi := Local_MHi • ^KN`
send BEGIN_HANDOFF
(hk, MSSi) to MSSj;
if Phasei ≠ 0 •¬∃hk ∈ Pi
•¬End_collecti
then send INIT_3 to hk
end-if
if Phasei = 0 •Statei = decided
then send Vi to hk
end-if

Fig. 5. Handoff Procedur

5.3 Correctness Proof
As our protocol is based on the Bully algorithm proposed by Garcia-Molina, some
statements of lemmas and theorems that follow are similar to the ones encountered in
[2].
Theorem 1. All the mobile hosts in the system never disagree with a leader when the
hosts are in the state of a normal operation (safety property).
Proof. A mobile host decides (action 3) a leader only if its base station has decided
(action 6): in that case the mobile host adapts the leader broadcasted by this base
station. Consequently, theorem 1 is valid if no two base stations decide differently.
Assume that at least one base station has decided (action 8). In that case, a coordinator
has previously broadcasted a message DECIDED (action 9). So, at least a majority of
base stations have adopted the host as a new leader sent by the election coordinator.
Eventually, all base stations in the system reach to the decision adopting a mobile host
as a new leader since there exists only one election coordinator and the coordinator
sends a message every base station to inform a newly elected leader. Therefore, all
base stations never disagree with a leader when the base stations are in the state of a
normal operation. Theorem 1
Theorem 2. All the processes should eventually progress to be in the state of a
normal operation in which all hosts in the system agree to the only one leader
(liveliness property).
Proof. Consider that a leader is crashed. Then eventually at least one correct host
knows the leader’s crash and initiates an election protocol. After an election has
started, one base station is elected as a election coordinator. The coordinator decides a
global leader and sends the leader to all base stations. Then all collect base stations
eventually deliver such a DECIDE message to their mobile hosts (action 8).
Consequently, any mobile host will receive the decided leader either when its base

396

S.-H. Park

station decides (action 8) or when it enters in the cell of a base station that previously
decided. Theorem 2

6 Conclusion
The communication over wireless links are limited to a few messages (in the best
case, two messages: one to inform the initial value and the other to get the decided
leader) and the mobile hosts CPU time is low since the actual election is run by the
base stations. The protocol is then more energy efficient. The protocol is also
independent from the overall number of mobile hosts and all needed data structures
are managed by the base stations. So, the protocol is scalable and can not be affected
by mobile host failures.
Another interesting characteristics of the protocol are as follows. 1) During the
election period, a base station that plays a role of the election coordinator should be
elected to reduce the message traffics between base stations before electing a global
mobile host which acts as a leader. 2) In such a mobile computing environment, a
handoff algorithm is needed to perform elections efficiently, but it is not needed in
static distributed systems.
The election algorithm in a mobile computing environment consists of two
important phases. One is a local election phase in which all MSSs have to elect local
leaders amongst the set of G_MH of mobile hosts in their respective cells. The other
is a global election phase in which each MSS takes part in the election of a global
leader among all MSSs in the broadcast group G.

References
1. G. LeLann, “Distributed systems–towards a formal approach,” in Information Processing
77, B. Gilchrist, Ed. North–Holland, 1977.
2. H. Garcia-Molian, “Elections in a distributed computing system,” IEEE Transactions on
Computers, vol. C-31, no. 1, pp. 49–59, Han 1982.
3. H. Abu-Amara and J. Lokre, “Election in asynchronous complete networks with intermittent
link failures.” IEEE Transactions on Computers, vol. 43, no. 7, pp. 778–788, 1994.
4. H.M. Sayeed, M. Abu-Amara, and H. Abu-Avara, “Optimal asynchronous agreement and
leader election algorithm for complete networks with byzantine faulty links.,” Distributed
Computing, vol. 9, no. 3, pp. 147–156, 1995.
5. J. Brunekreef, J.-P. Katoen, R. Koymans, and S. Mauw, “Design and analysis of dynamic
leader election protocols in broadcast networks,” Distributed Computing, vol. 9, no. 4, pp.
157–171, 1996.
6. G. Singh, “Leader election in the presence of link failures,” IEEE Transactions on Parallel
and Distributed Systems, vol. 7, no. 3, pp. 231–236, March 1996.
7. David Powell, guest editor. Special section on group communication. Communications of
the ACM, 39(4):50–97, April 1996.
8. Pradhan D. K., Krichna P. and Vaidya N. H., Recoverable mobile environments: Design and
tradeoff analysis. FTCS-26, June 1996.
9. Alagar S., Venkatesan., Causally ordered massage delivery in mobile systems, in proc. Of
Workshop on Mobile Computing Systems and Applications, Santacruz, CA, Dec. 1994.

