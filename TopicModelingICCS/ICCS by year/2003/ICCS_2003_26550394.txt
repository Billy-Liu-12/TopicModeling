The Standard UML-Ada Profile
Francis Thom
Artisan Software Tools
Stamford House, Regent Street
Cheltenham, UK, GL50 1HN
Francis.Thom@Artisansw.com

Abstract. The Unified Modeling Language (UML) has become the de facto
modelling language for business processes and software intensive systems.
However, the UML1 lacks a rich-set of semantics specific to the Ada Programming language, which would enable a designer to both design an abstract solution based on the systems requirements, and an implementation solution based
on the semantics of the Ada Programming Language. So as to bridge this semantic gap between the modelling language and the programming language the
UML provides Profiles. A UML profile forms a part of the extensibility mechanism, inherent to the UML, enabling the standard UML to be extended to encompass the semantics of an individual programming language. This paper explores the current definition of the ARTiSAN UML-Ada Profile2, and its usage
and flexibility in developing Ada source code from a UML model. The UMLAda Profile at the design-level not only enables implementation issues to be resolved prior to constructing the code, it also has the advantage of facilitating the
automatic generation of Ada Source code.
1

2

At the time of writing (09-02-03) the latest publicly available version of the UML specification from the Object Management Group (OMG) is version 1.4. Although Action Semantics
have been defined for a UML 1.5, this specification is still in the process of being finalised
(a ‘proposed’ specification is currently available). As for the “UML 2.0”, apart from the
submissions for the Infrastructure and Superstructure of a “UML 2.0”, nothing has yet been
agreed and certainly not finalised. Contrary to some arguments about simplifying the UML
1.x series and removing some of its ambiguities, the current submissions are more complex,
and more worrying, inconsistently ambiguous, requiring yet more effort (and hence time)
from the OMG to resolve these problems. It is possibly to late to inject some ‘pragmatic engineering’ justification for some of the proposed ‘new’ features in the “UML 2.0”. For those
UML end-users (i.e. engineers) who are interested in the “UML 2.0”, you should possibly
start thinking about “UML 2.1” hopefully, the version of the “UML 2.x” series that removes
all the inconsistencies, ambiguities and links the definition of the UML Standard with the
evolving MDA initiative. Having said this, ARTiSAN Software Tools have repeatedly
stated that we are committed to the ‘current issued version’ of the UML and we see no reason, barring ‘pragmatic engineering’ and ‘end-user’ complaints, for not implementing any
finalised “UML 2.0” specification.
th
On the 29 of October 2002, Ada-UK convened at their bi-annual conference and discussed
the need for a standardised UML-Ada Profile. As a result of this meeting a working group
has been set-up to standardise the Ada-Profile. The intention is to make the Ada-Users community the first programming language-specific community to agree on a standard for creating Ada source code from UML.

J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 394–404, 2003.
© Springer-Verlag Berlin Heidelberg 2003

The Standard UML-Ada Profile

1
1.1

395

Introduction
The Problem

All programming languages are outside the scope of the UML. The UML, a visual
modeling language, is not intended to be a visual programming language, in the sense
of having all the necessary visual and semantic support to replace programming languages. The UML is a language for visualizing, specifying, constructing, and documenting the artifacts of a software-intensive system, but it does draw the line as you
move toward code. For example, complex branches and joins are better expressed in a
textual programming language. The UML does have a tight mapping to a family of
object languages so that you can get the best of both worlds. [1]
1.2

The Solution

Create an UML-Ada Profile to bridge the semantic gap between UML and Ada:
A profile is a stereotyped package that contains model elements that have been
customized for a specific domain or purpose by extending the metamodel using
stereotypes, tagged definitions, and constraints. A profile may specify model libraries
on which it depends and the metamodel subset that it extends.
A stereotype is a model element that defines additional values (based on tag definitions), additional constraints, and optionally a new graphical representation. All
model elements that are branded by one or more particular stereotypes receive these
values and constraints in addition to the attributes, associations, and superclasses that
the element has in the standard UML.
Tag definitions specify new kinds of properties that may be attached to model elements. The actual properties of individual model elements are specified using Tagged
Values. These may either be simple datatype values or references to other model elements. [1]
Some readers may already be aware of ongoing work to define a UML Profile specifically for “the Development of Distributed Reactive Systems and Ada 95 code
generation” [2]. This paper takes a broader look at the issue of modeling (and ultimately generating Ada code), using the UML.

2 The OMG’s Model Driven Architecture (MDA)
The Object Management Group (OMG) are currently attempting to underpin their
broad portfolio of efforts with their latest MDA initiative. Although still in its infancy,
MDA encompasses many principles of best practice in the development of Softwareintensive systems in terms of developing an abstract Platform Independent Model
(PIM) and a Platform Specific Models (PSM). One justification for their initiative is
the ‘separation of concerns’ related to the complexity of possible solution strategies
available to engineers. At the same time as localizing each concern within a specific
model, each model is expected to be inherently reusable at its own level of abstraction.

396

F. Thom

3 Anything New in MDA?
It could easily be argued that MDA is not a new initiative. The notion of ‘separation
of concerns’ was successfully exploited by the likes of Larry Constantine, Tom
DeMarco, Stephen Mellor, Paul Ward and Edward Yourdon in the 1970’s and 1980’s
under the name of ‘Structured Methods’ and is attributed to previous work by
Dykstra. Through a process-driven refinement of successively evolved models (‘Requirements Model’, ‘Essential Model’, ‘Architectural Model’, etc.), the designer
would address each ‘concern’ in isolation within a single model and then move on to
the next ‘concern’ by refinement of the current model – i.e. the ‘Essential Model’ was
refined into the ‘Implementation Model’. One word of caution about MDA, in the
past, where models were refined (e.g. from the ‘Essential Model’ into the ‘Implementation Model’), any subsequent re-use of the ‘Essential Model’ was rarely achieved –
possibly because of the inflexibility of the notation used within the model (functional
decomposition represented through data-flow diagrams) – but maybe because there
was little attention paid to potential future reuse as the models evolved. Re-use does
not come for free, not in the past and not today. We have to design with re-use in
mind. Are the arguments for re-use (especially at the higher-levels of abstraction e.g.
the PIM), more compelling today than they were some 20-30 years ago? We need to
look at today’s notation used whilst constructing a model the UML. The UML is a far
better vehicle to provide the necessary flexibility (through modularity, encapsulation,
polymorphism and abstraction) required to maximize reuse, but there are many issues
still to be resolved about the ‘mechanics’ of managing multiple models (especially in
the area of requirements traceability, and transitions from one model to another). In
this paper we focus our attention on the transition from PIM to a notional ‘Implementation Model’ (IM) – the IM being, from practical project experience, considered a
part of the model-set for the PSM. The IM addresses the specific issue of implementing a given PIM in a specific programming language. Even in today’s ‘need it yesterday’ world of systems development, software still needs to be ‘engineered’ (designed
and written) – and in the area of safety-critical systems, ‘must’ be engineered – the IM
is proposed as a vehicle for addressing the specific concerns of software engineers
allowing them to address language-specific issues whilst meeting the ‘essential’ requirements (from the PIM) and also bearing in mind the subsequent issues brought
about by the ‘execution environment’ (hardware, firmware and operating systems
etc.) captured in the (current definition of the) PSM. We all know that each programming language has its own ‘execution model’, syntax and semantics. We are also
aware that each programming language can solve a specific problem in potentially
many ways, where each solution has advantages and disadvantages – i.e. the ‘quality
of service’ - over another. We also know that ‘design patterns’ exist to assist a designer in solving some of these recurrent problems in a ‘commonly accepted’ manner.
As we transition from the PIM to an IM we need to bear all these solution strategies in
mind and ensure that each strategy can be deployed with as much ‘engineering pragmatism’ and flexibility as possible – i.e. an engineer should not be constrained by a
specific ‘tool’s’ limitations e.g. restricting the application of a specific solution strategy like ‘design patterns’. The existence of an Ada Profile enables the separate concern of an Ada implementation to be addressed in isolation from other concerns.

The Standard UML-Ada Profile

397

4 MDA & Reuse – A Modeling Nirvana?
Whilst MDA addresses (amongst others) the issue of retargeting legacy software onto
new/different operating systems, firmware and hardware platforms, it also (by implication) addresses the issue of moving from an abstract ‘essential’ model (PIM) to an
implementation model (IM) and finally into a platform specific model (PSM).

Fig. 1. UML Model Hierarchy for MDA

The necessity for an IM derives from the many implementation languages available,
and the inherent solution strategies available within each language e.g. the Ada language inherently supports multi-tasking where as the C language does not, in one
system this feature may want to be exploited. The ease through which a model can
transition between an “Ada-IM” and a “C-IM” will be a significant factor in the adoption of MDA3. Figure 1 shows the refinement of successive models from PIM to PSM
and highlights other areas of ‘concern’ required to support the refinement process.
3

As MDA is still in its infancy, we at ARTiSAN do not necessarily restrict our view of MDA
specifically to the ‘forward development’ of the PIM and PSM. We are also looking at offering maximum flexibility in allowing engineers to develop IM’s in any supported language
(Ada, C, C++ or Java), but also to be able to have a mixture of languages within a single IM
(currently available). We are also considering ‘rolling-back’ and/or ‘undo’ capabilities in
terms of applying Profiles and Patterns to ensure that a designer has access to all the possible
solution strategies available.

398

F. Thom

The PIM, by definition, accesses no implementation-specific details. The IM accesses
the pre-defined Ada Standard package (additionally, any other required Ada libraries)
and the Ada Profile. The PSM also accesses the Ada Profile for platform-specific
information (e.g. ‘address’ and ‘length’ representation clauses, etc.) and (if present)
any parts of the system representing hardware, firmware and operating system. As the
models evolve, addressing each concern in isolation, it should be apparent to the
reader that a mechanism of ‘undoing’ refinements would be a positive advantage.
Being able to ‘roll-back’ from a PSM to an IM would enable the same IM to be retargeted onto a different execution environment. Being able to ‘roll-back’ from IM to
PIM would enable the same ‘essential’ model to be implemented in another programming language. These are compelling ideas so long as the engineers, i.e. the endusers of these techniques, can implement them in a pragmatic and efficient manner.
MDA forms a very compelling business-level argument, the ability to re-use as much
of our corporate assets – including legacy models – as possible, thereby minimizing
wasted effort (in ‘reinventing the wheel’) and errors introduced during the development process (because there is comparatively minimal ‘development’ required in
assessing something as being suitable for re-use). We all have some way to go yet
with the OMG’s MDA but we should, at a minimum, all support its commendable
aims.

5

Please Mind the Semantic Gap!

As explained in the Introduction to this paper, the standard UML does not contain
sufficient semantics to create a model, which is of sufficient detail to ultimately be
implemented in Ada. The Ada programming language has many features, which can
in due course affect the overall behaviour and performance of the software system
(for example, implementing a timed versus a conditional entry call to an Ada task). It
is important that these implementation-specific issues are addressed in isolation (albeit not total isolation) from the ‘execution environment’. One definition of an Ada
Profile (from ARTiSAN) does provide a mapping from UML to Ada. However,
knowing that each end-user implements Ada in a subtly different ‘style’ (generally
captured in something like a ‘Coding Standards’ document), we also had to ensure the
end-user had the ability to configure the ARTiSAN Ada Profile to meet their needs.

6 Models: Iterative Refinement
The different models within a MDA enable the separation of concerns: the PIM focusing on solving the end-user requirements; the Implementation Model focusing on
programming language specific issues, and the PSM addressing issues related to both
the API of the Operating system (if any) and issues of integrating the whole application to the target hardware platform – i.e. the execution environment. Reuse can potentially be achieved at any level. If it is required to implement the PIM in another
programming language then the PIM can be reused (as the essential requirements
have not changed) and another programming language Profile can be accessed to
address the specific concerns of ‘that’ programming language. If the system is to be

The Standard UML-Ada Profile

399

retargeted to either a new operating system or hardware platform – a different execution environment - then the Implementation Model (including its language-specific
profile) can potentially be reused without modification. MDA places no constraints on
how models are configured but it seems an intuitive assumption that several models of
increasing refinement will be created (and more importantly) configured throughout a
single project.

7 Proprietary versus Open Standards
Both the UML and the Ada Programming Language are classed as open standards.
Automatic code generation for Ada exists. Some of these tools use proprietary techniques, which lock the end-user to a specific tool vendor. The philosophy implemented by ARTiSAN is to provide the end-user with a flexible and configurable technique to generate Ada source code whilst working, as much as possible, within the
definitions of open standards. As a result of this, ARTiSAN are currently working
with Ada-UK to define a standard UML-Ada Profile such that the Profile is ‘owned’
by the Ada-user community and will eventually exist as an open standard. When this
work is completed, the Ada community will be the first programming language user
group to have agreed and defined a standard for designing Ada using the UML.

8

Example Application of the UML-Ada Profile

The Ada Profile is an addition to the UML enabling Ada-specific language features to
enhance a basic mapping from the UML to Ada. The purpose of any profile is not to
capture ‘all’ mapping issues as some of these issues are addressed by a ‘basic mapping’ of existing UML entities onto the Ada Language. Such mappings as: A UML
Class maps onto an Ada package specification and body. An operation on a class
(without a specified return parameter) maps onto an Ada procedure. An operation on
a class (with a specified return parameter) maps onto an Ada function. The Profile is
intended to address all the other mapping issues which cannot be mapped because the
syntax and semantic of the standard UML are deficient for the Ada language. This
should not be interpreted as a limitation of the UML, as the UML is not intended to
capture language-specific issues directly and the Profile ‘extension mechanism’ was
introduced to address this potential problem.
8.1

From the Abstract PIM to IM

It is beyond the scope of this paper to address the transition from IM to PSM. An
analyst and/or designer will create a PIM, which reflects an abstract solution to the
systems requirements. In general the PIM will be free from implementation-specific
details. However when the designer moves to the implementation stage many other
issues can come to light.

400

F. Thom

Fig. 2. From Abstract PIM to IM

8.2

Type Classes

Type definitions modeled using UML classes with the UML stereotype (<<Type>>)
will need to be defined when the PIM is being constructed, to define the information
being exchanged between model entities (e.g. between classes or sub-systems). However, it is unlikely that a System Engineer, developing the PIM, will be able to rigorously define these type definitions, as Ada Types and neither should they. Standard
UML cannot be used, without extensions. The design must be refined from the PIM
into the Implementation Model. In the example diagram, a Waypoint is successively
refined as we transition from the PIM to the PSM. If the Waypoint were to be retargeted to a new hardware platform, only the <<Ada Record Representation Clause>>
may need to be modified to reflect the addressing mechanism utilised by a targetspecific compiler. If the Waypoint were to be implemented in C, then both the <<Ada
Record Representation Clause>> and the <<Ada Record>> would need to be replaced
with the stereotype <<C Struct>> from a UML-C Profile.

The Standard UML-Ada Profile

8.3

401

Modeling Application Classes in Ada

There exist Ada-specific modeling techniques that have to be adopted with the UML.
An engineer must have an appreciation of the basic mapping from UML to Ada when
constructing the IM. For example, we all know that the Ada language does not permit
‘circular dependencies’ between Ada packages. If we choose to map a UML Class
onto an underlying Ada Package then any UML associations between UML Classes
must always be specified using uni-directional (sometimes called ‘navigational’)
association. Likewise, some UML entities are not strictly ‘associated’ in the UML
definition of association, i.e. one entity is merely ‘dependent’ (not associated) with
another. This requires the designer to specify what type of link exists between these
entities. It is beyond the scope of this paper to detail the subtle application of the
UML specifically for Ada. However, this diagram depicts a ‘dependency’ link between Task A and the Ada pre-defined Text_IO package.

Fig. 3. Modeling Application Classes

8.4 Implementation Classes
Implementation classes, those that actually do something, can have various mappings
into Ada. By default the attributes of a UML class map to some underlying record
type (so that multiple instances can be created if required and further classes can inherit from this type). If however, a software engineer desired a specific class to be
implemented as an Ada Task, Standard UML could capture this as an Active Class.
However, the UML has no semantics to support the different rendezvous mechanisms
available to the Ada programmer. As a result the UML must be extended (using the
UML-Ada Profile) to support these semantics. Figure 2 and 3 (Figure 2 being part of
the PIM, and Fig. 3 being part of the Implementation Model) show how the implementation of an Ada Task, including the identification of the different rendezvous
mechanisms, can refine the information captured within the Implementation Model to
represent the underlying semantics of Ada. Because the model is a ‘visual’ representa-

402

F. Thom

tion of the Ada constructs, it is apparent that the Implementation Model is incomplete.
Rendezvous D has no specified rendezvous mechanism. It could be assumed that a
rendezvous without a stereotype will be implemented as a standard entry call however, this denigrates the ability to create a ‘precise’ implementation model and the
actual implementation of Rendezvous D would be open to interpretation by either a
human engineer or ‘hard-coded’ into a proprietary code generator translation language.

Fig. 4. Implementation Class

9 Automated Code Generation
It should now be apparent to the reader that once the UML-Ada Profile has been applied to the PIM to create the IM, there exists sufficient information within the model
to generate the source code either manually or automatically. There are many issues
in the adoption and adaptation of ‘Automatic’ code generation technologies, more so
when the application is safety-critical.
I have deliberately used the word ‘automated’ and not ‘automatic’ code generation.
Automatic code generation implies an autonomous process without the need for enduser intervention, something that proceeds on its own. ‘Automated’ implies the use of
some ‘automatic’ capabilities but also relies on some level of end-user interaction. So,
what level of end-user interaction are we speaking about? I am speaking here only of

The Standard UML-Ada Profile

403

end-user customization. Typically (and certainly in the case of ARTiSAN’s Real-time
Studio’s Ada Synchronizer), end-users will either:
1.
2.

Configure the Ada Synchronizer prior to starting a project to ensure it generates code that meets the organizational ‘coding standards’, or;
During a ‘pilot’ project, the Ada Synchronizer will be customized throughout
the project, the aim here being to explore different UML-Ada mappings
throughout the project so that a fully customized Ada Synchronizer is produced at the end of the ‘pilot’ study.

The ultimate aim of both approaches is to have the capability to ‘automatically’ generate code. The reason why I stress the ‘automated’ (i.e. with end-user interaction) is
that no ‘automatic’ Ada code generator (‘out of the box’) will completely meet your
organizations coding standards4 and an Ada generator which does not permit end-user
configuration/customization will cause more problems – in terms of your organization
adopting the technology and any certification of the Ada generation capability.
Although it may be perceived, by some readers, that the existence of the Ada Profile is potentially removing the ‘art’ of engineering Ada software, this is not its intent.
The purpose of a Standardized Ada Profile is to ensure consistency – either within an
organization or amongst all the Ada users. There should be no limitations in a particular organization customizing, yet further, the Standard Ada Profile – indeed, such
practices are actively encouraged to enable the Standard Ada Profile to evolve by
capturing the needs of a specific organization or industrial sectors. Further to this, the
implicit semantic extensions contained within the Standard Ada Profile (i.e. the
‘meaning’ of a stereotype such as <<Ada Task>>) will only truly be understood by
Ada programmers; as such the Ada Profile is still the specialist reserve of Ada designers and Ada software engineers.

10

Conclusion

The application of an UML-Ada Profile supports the OMG’s MDA initiative and
clearly delineates the concerns of analysts and designers (PIM), software engineers
(Implementation Model) and hardware engineers (PSM). The intent of the Ada-UK
working group, in defining a Standard UML-Ada Profile, is to ensure consistency in
the use of the UML in creating a model destined to be implemented in Ada. It is not
true to think that we will all become ‘designers’ and never have to ‘program’ any
more Ada code by hand - although this is still a worthwhile aim. What a Standard Ada
Profile will give us is a consistent ‘semantic bridge’ between the UML and Ada, and
hence a consistent approach to designing Ada code.
4

How can it? Unless you work very closely with a tool-vendor as they are developing an Ada
Code Generation capability, how will the tool vendor know what coding standards you use?
Furthermore, if a tool vendor created an Automatic Code Generator that satisfied Company
X, it is unlikely to satisfy Companies A, B and C at the same time… And finally, if you
wanted to change your coding standards and these were ‘hard-coded’ into a tool, your tool
vendor would be the only one to re-configure the generator… what we in the business call
‘vendor lock-in’.

404

F. Thom

With the Ada Programming Language we have possibly the best language to address the complexity, safety, reliability, scalability, and the many more issues brought
about by today’s software-intensive systems. By ‘marrying’ (through the Ada Profile)
this unique capability of a programming language with the de facto modeling language (the UML), we are facilitating faster (and ultimately cheaper) development of
Ada source code (either ‘automated’ or ‘automatic’ generation) whilst encompassing
the ‘best practice’ application of Ada - gained from many years experience – which is
now embedded within the Ada Profile.
One ultimate aim of the Standard Ada Profile working group is to ensure that the
Ada Language is the first to have a standardized UML Profile. Given the level of coordination within the Ada-users community for such activities as Ada-0X, the future
of the Ada language – augmented by the ability to ‘design’ Ada using a standardized
notation – will continue successfully for many years to come.

References
[1]

Object Management Group (OMG), September 2001. OMG Unified Modeling Language
Specification. [online] Available from: http://www.omg.org
[2] Ada Users Journal, Volume 23, Number 3, September 2002. Customizing UML for the
Development of Distributed Reactive Systems and Ada 95 Code Generation. Kersten et al.
[3] Structured Development for Real-Time Systems (Volumes 1, 2 & 3); P.T.Ward & S.J.
Mellor; Yourdon Press; 1985.
[4] Strategies for Real-Time System Specification; D.J. Hatley & I.A. Pirbhai; Dorset House
Publications;1987.
[5] Modern Structured Analysis; E. Yourdon; Prentice-Hall;1989.
[6] Use Cases combined with Booch, OMT and UML; P.P. Texel & C.B. Williams; PrenticeHall; 1997.
[7] Object Oriented Software Engineering; I. Jacobson et al; Addison-Wesley; 1992.
[8] Object-Oriented Modelling and Design; J. Rumbaugh et al; Prentice-Hall; 1991.
[9] Object-Oriented Design with Applications; G. Booch; Benjamin/Cummings; 1991.
[10] Object-Oriented Development, The Fusion Method; D. Coleman et al; Prentice-Hall;
1994.
[11] UML Distilled, Applying the standard Object Modelling Language; M. Fowler & K.
Scott; Addison-Wesley; 1997

Authors Biography
Francis Thom, Principal Consultant - Artisan Software Tools
Francis Thom has been developing real-time systems for the past 14 years. He started developing C3I Systems for Surface and Sub-Surface vessels. He has also worked on multi-role military and commercial avionics systems, on safety-critical railway signalling systems and OnBoard Computers for space vehicles. He has written software predominantly in Ada during this
period. His roles have varied from team leader to developer. Francis has also worked on Process Improvement initiatives for a number of companies. His role at Artisan includes mentoring,
sales presentations and training courses. He has also written a series of white papers on Process
Improvement, Systems and Software Engineering, the use of UML for safety-relates systems
and software and has also spoken at INCOSE several times and at Ada-Deutschland (2001),
and at Ada-UK (2001, 2002).

