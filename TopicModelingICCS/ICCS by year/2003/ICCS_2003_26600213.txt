Enhancing Prediction Accuracy in PCM-Based
File Prefetch by Constained Pattern
Replacement Algorithm
Inchul Choi and Chanik Park
Department of Computer Science and EngineeringŠPRIL
Pohang University of Science and Technology
Kyungbuk, Republic of Korea
fsharpic, cipark g@postech.ac.kr

Abstract. In modern Şle systems, IŠO latency is still major bottleneck

of performance and predictive Şle prefetching is one of promising approaches that can enhance IŠO performance of Şle system. To utilize
predictive Şle prefetching to Şle system, there should be a Şle access
pattern prediction model that can predict future Şle access. Partitioned
Context Model෈PCM෉ ţ2ţ is known as one of the most accurate Şle access
pattern prediction modelsţ3ţ. In order to predict longer sequence, the order of PCM must be increased. However, the prediction accuracy of PCM
decreases when PCM is in high order. Careful analysis reveals that the
pattern replacement algorithm in the PCM is the major cause in decay
of the prediction accuracy. The pattern replacement algorithm destroys
Şle access patterns without successful training of newly occurred Şle
access patterns. We proposed the constrained pattern replacement algorithm to overcome this adverse eŞect by revising replacement condition.
The simulation results using the DFSTrace system traceţ13ţ show that
the proposed algorithm improves prediction accuracy without any extra
cost by 3.5ළ compared to traditional pattern replacement algorithm of
PCM෈about 40ළ of the accuracy bound of 7ළ෉.

1

Introduction

Despite impressive advances in Şle system throughput resulting from technologies such as high-bandwidth networks and disk arrays, Şle system latency has
not improved enough.In many cases, it has become worse because of the speed
gaps to follow the modern processor. File system IŠO remains one of the major
bottlenecks against the operating system performance. Predictive Şle prefetching is one of promising approaches to reduce Şle system latency. For predictive
Şle prefetching to be eŞective, however, access prediction should be accurate and
far enough in advance to eŞectively mask out the prefetch latency.
Partitioned Context Model෈PCM෉ is known as one of the most accurate Şle
access pattern prediction modelţ3ţ and it can be used for sequence prediction
by using a high order context model. We discovered that when we increase the
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2660, pp. 213−222, 2003.
 Springer-Verlag Berlin Heidelberg 2003

214

I. Choi and C. Park

order of the model for the prediction of Şle sequences, the prediction accuracy
of PCM decreases. To Şnd the cause of this eŞect, we analysed the Şle access
pattern learning algorithm of PCM. The pattern replacement algorithm of PCM
is found to be the one of major cause of decay of prediction accuracy in a high
order PCM. The pattern replacement algorithm, which we call the unconstrained
pattern replacement algorithm, of PCM can destroy the Şle access pattern in a
partition without successful training of the newly occurred Şle access pattern,
and it is the cause of the loss of high order Şle access pattern.
We propose a new replacement algorithm to overcome this adverse eŞect of
the unconstrained pattern replacement algorithm. In the proposed replacement
algorithm, when the full partition is met, the test proceeds after decaying of
patterns in the partition whether the unconstrained pattern replacement algorithm deletes the same higher order nodes, especially the parent node of the
newly arrived Şle access pattern. If true, decayed patterns in the partition is
restored to its previous state to keep the state information. In this situation,
the training of new pattern rely on the low order context in the other partitions. This algorithm ensures the conservation of the state information of the
full partition by preventing useless loss of patterns in the full partition. Useless
loss of patterns in the full partition is a major cause of decay of the prediction
accuracy in high order PCM. So the proposed constrained pattern replacement
algorithm enhances the high order prediction accuracy of PCM. The result of
the simulation using the DFSTrace system shows that the proposed algorithm
improves prediction accuracy without any extra cost by about 3.5ළ ෈about 40ළ
of the accuracy bound of 7ළ between the FMOCM and the PCM෉, even if we
increase the order to 74ළ of the partition size for Şle sequence prediction.
The remainder of this article is organized as follows. Section 2 brieŞy describes Şle access pattern prediction models. In section 3 we analysed the pattern
learning algorithm of PCM and present the problem of replacement algorithm.
Then we propose the new pattern replacement algorithm to enhance high order
prediction accuracy of PCM. Section 4 presents our simulations and results. In
section 5 we conclude the paper.
2 Related Work

In this section we present a brief background on the Şle access pattern prediction
models and detail more about Partitioned Context Modeling.

2.1 File Access Pattern Prediction Model
File accesses follow previous patterns with a high probability. Last-successor
prediction model is very simple prediction model which predicts that an access to Şle A will be followed by the same Şle that followed the last access
to A, but from trace-based simulationţ3ţ it correctly predicted 72ළ of access
events. Another prediction model, the graph-based model is more complicated
than last-successor model. The graph-based model keeps frequency counts for

Enhancing Prediction Accuracy in PCM-Based File Prefetch

215

all Şles accessed within a window following an access to each Şle. However,
the graph-based model sees extremely poor prediction accuracy, 40ළ on average as compared to the last-successor's accuracy 72ළ. More accurate prediction
model is Finite Multi-Order Context Model෈FMOCM෉ which uses text compression technique to track Şle access patterns. The FMOCM has about 81ළ
prediction accuracy and it reduced the diŞerence between last-successor and an
ideal predictor by greater than on third. But, this high prediction accuracy is
achieved at the cost of signiŞcantly greater state space overhead. So, improved
FMOCM which called a Partitioned Context Model෈PCM෉ is proposed. This
model addresses the state space overhead problem of FMOCM, while achieving
comparable prediction accuracy with FMOCM. Next section, we detailed about
Partitioned Context Modeling with Context Modeling which PCM is based on.

2.2 Partitioned Context Modeling ෈PCM෉
First, we describe about context modeling. A context model෈CM෉ is one that uses
preceding events to model the next event. For example, in the string `object'
the character `t' is said to occur within the context `objec'. The length of a
context is termed its order. Techniques that predict using multiple contexts of
varying orders෈e.g.`ec', `jec', `bjec'෉ are termed Multi-Order Context Models.
To prevent the model from quickly growing beyond available resources, most
implementations of a multi-order context model limit the highest order modeled
to some Şnite number m, hence the term Finite Multi-Order Context Model.
A context model uses a trie, a data structure based on a tree, to eŞciently
store sequences of symbols. Each node in this trie contains symbol෈e.g. a letter
from the alphabet, or the name of a speciŞc Şle෉. By listing the symbols contained
on the path from the root to any individual node, each node represents an
observed pattern.
The state space for this model is proportional to the number of nodes in this
tree, which is bounded by O෈nm ෉, where m is the highest order tracked and n
is number of unique Şles. On a normal Şle system the number of Şles can range
between 10 thousand and 100 million, such space requirements are unreasonable.
To address the space requirements of FMOCM, the Partitioned Context
Model is proposed. This model divides the trie into partitions, where each partition consists of a Şrst order node and all of its descendants. The number of
nodes in each partitions is limited to a static number that is a parameter of the
model. The eŞect of these changes is to reduce the model space requirements
from O෈nm ෉ to O෈n෉.

3 Constrained Pattern Replacement Algorithm in PCM
3.1 Pitfalls of Traditional Pattern Replacement Algorithm
FMOCM and PCM have basically the same pattern learning algorithm. However, PCM has a static partition size limit, so it can't store all of the patterns

216

I. Choi and C. Park

it has learned previously. To learn newly occurred Şle access pattern while preserving static partition size, PCM destroy patterns in a partition that is less
probable to occur. Namely, PCM replace less probable patterns with newly occurred patterns and so pattern replacement algorithm is learning algorithm of
PCM. The PCM replacement algorithm is as follows. When a new node is needed
in a full partition, all node counts in the partition are divided by two ෈integer
division෉, any nodes with a count of zero are cleared to make space for new
nodes. If no space becomes available, the access is ignored. The pattern replacement algorithm of PCM is very simple and has no constraint when it destroys
the patterns in a partition. From now we call this simple replacement algorithm
as Unconstrained Pattern Replacement Algorithm. When PCM is at low order,
Unconstrained Pattern Replacement Algorithm causes the model to adapt faster
to new access patterns.As a result, prediction accuracy can be slightly increased.
But, when PCM is in high order, the prediction accuracy of PCM decreases as
the order increases. The cause of this problem reside in the diŞerence between
PCM and FMOCM, and the only diŞerence between FMOCM and PCM is in
pattern learning algorithm, the Unconstrained Pattern Replacement Algorithm.
The Unconstrained Pattern Replacement Algorithm is based on the decaying of
patterns in the partition and it has no constraint condition for pattern destroying.
As the order of PCM increases, the number of pattern decaying increases
also because the partition size is limited to a static number. An increase in the
number of pattern decaying can result in lower average node count. When the
average node count in partition is low, the Unconstrained Pattern Replacement
Algorithm can cause problems. Figure 1 describes the trie structre trained by
sequence `ABCABEF' and situation that the new access to `G' is occured. The
Unconstrained Pattern Replacement Algorithm can cause problems from the
situation like in Figure 1.
Sequence : ABCABEFG , Order : 4, Partition Size : 5
ROOT

A

B

(2)

C

(1)

E

A

(1)

F

B

(1)

(2)

B

(2)

C

(1)

E

(1)

A

(1)

F

(1)

C

(1)

E

(1)

(1)

A

(1)

F

(1)

(1)

B

(1)

E

(1)

G
New node

G

F

(1)

G

Example trie before Unconstrained Pattern Replacement for the sequence ABCABEFG

Fig. 1.

Enhancing Prediction Accuracy in PCM-Based File Prefetch

217

In Figure 1, the new node `G' which represents the pattern `BEFG' is about
to added to second partition, but the partition is full, so pattern decaying ෈integer division by 2෉ occurs and zero count nodes are cleared. Figure 2 shows
situation after pattern decaying in the second partition. After Unconstrained
Pattern Replacement in the second partition, the number of nodes are severely
dropped and the parent node of new node `G' is cleared out. To store the pattern
`BEFG' by adding new node `G', nodes represents `BEF' should not be cleared
out. However, when we use the Unconstrained Pattern Replacement Algorithm,
this cannot be achieved. As a result, patterns are lost without learning the newly
occurred pattern. Situations similar to Figure 1 are more often met when the
order of model is high, because high order means low average node count in
the partitions. So, if we overcome this adverse eŞect, we can expect increase of
prediction accuracy in high order PCM.
Sequence : ABCABEFG , Order : 4, Partition Size : 5
ROOT

A

C
A

B

(2)

(1)

E

(1)

B

(2)

F

(2)

(1)

(1)

G

C

(1)

E

(1)

A

(1)

F

(1)

B

(1)

G

(1)

E

(1)

F

(1)

G

(1)

Can’t add node

Fig. 2. Example trie after Unconstrained Pattern Replacement for the sequence ABCABEFG

3.2 Constrained Pattern Replacement Algorithm
To overcome the adverse eŞect of Unconstrained Pattern Replacement Algorithm
of PCM in high order, we propose a new replacement algorithm which has constraint condition for pattern decaying. We call this new replacement algorithm
as Constrained Pattern Replacement Algorithm. The Constrained Pattern Replacement Algorithm check whether the parent node of new arrived Şle access
pattern is deleted after decaying of patterns. And if this is true, restore the
partition to its previous state.
Pseudo-code of Constrained Pattern Replacement Algorithm

218

I. Choi and C. Park

begin
ť
If ෈ Is Partition Size Full ? ෉
ť
Divide count of all nodes in trie by 2
Clear any nodes with a count of zero
If ෈ Is parent node of new node exist ? ෉
ť
If ෈ Is Partition Size Full ? ෉
break
else
Add new node
ťelseť
Restore cleared nodes and node counts
break
ť
ťelseť
Add new node
ť
ťuntil ෈ number of new nodes to add == 0 ෉

The Constrained Pattern Replacement Algorithm can prevent the useless decaying of patterns in partition without learning of newly occurred pattern. For
example, if we use Constrained Pattern Replacement Algorithm in situation of
Figure 1, we decay patterns in the partition and have a situation like Figure 2.
Then we check whether the parent node of newly arrived pattern is cleared out
and Şnd out it is true in second partition. So, patterns in the second partition is restored to their previous state. Figure 3 shows the trie structure after
Constrained Pattern Replacement Algorithm is applied to Figure 1.
From Figure 3, we can know that the Constrained Pattern Replacement
Algorithm keeps the state information of second partition to prevent the useless
decaying of patterns.

4 Simulation Results
To compare the prediction accuracy of PCM with our Improved PCM෈PCM with
Constrained Pattern Replacement Algorithm෉, we used trace data collected with
the DFSTrace system. For simulation we selected the workload of barber machine
which represents the characteristics of Şle server workload. The machine barber
was also a server with the highest rate of system calls per second. For comparison

Enhancing Prediction Accuracy in PCM-Based File Prefetch
Sequence : ABCABEFG
Order : 4
Partition Size : 5

ROOT

A

B

(2)

C

(1)

E

A

(1)

F

B

(1)

(2)

B

(2)

C

(1)

E

(1)

A

(1)

F

(1)

219

C

(1)

E

(1)

(1)

A

(1)

F

(1)

(1)

B

(1)

G

(1)

E

(1)

F

(1)

G

(1)

Fig. 3. Example trie after Constrained Pattern Replacement for the sequence ABCABEFG

purposes, we deŞne measure Useful Prediction : Up and Prediction Accuracy : Pa
as follows.

prediction count
Up = Successful
෈1෉
Total file access count
prediction count
Pa = Successful
෈2෉
Total prediction count
Up represents the usefulness of prediction and Pa represents the prediction
eŞciency. From above deŞnition we compare the PCM with Improved PCM by
diŞerence of Up and Pa . DeŞnition of DU and DP are as follows.
DU = Up ImprovedPCM ᝇ Up PCM
෈3෉
෈

෉

෈

DP = Pa ImprovedPCM ᝇ Pa PCM

෉

෈4෉
We simulated PCM and Improved PCM with Partition Size 32,48 and predict
most probable Şle from the longest context. To comparison purpose, we measure
DU , Dp with increasing order. In Figure 4 DU and Dp is positive in high order
and has maximum value 3.5ළ which means Improved PCM has 3.5ළ better Up
and Pa . The result of partition size 48 in Figure 5 is also similar. Considering
the maximum diŞerence of Up between FMOCM and PCM is 7ළ, improvement
in prediction accuracy is corresponds to approximately 40ළ.
Figure 6 and Figure 7 compare Up between traditional pattern replacement
algorithm and constrained pattern replacement algorithm. As we can see from
Figure 6 and Figure 7, the Constrained Replacement Algorithm improved prediction accuracy of PCM in high order.
෈

෉

෈

෉

5 Conclusion

In this paper we proposed a new replacement algorithm to enhance the prediction accuracy of PCM in high order. We analysed pattern learning algorithm

220

I. Choi and C. Park

ŭ
Ŭ#Ů
Ŭ
#
Ť
şŧ
ƈ
Ž
ş
Ƌ
'
şƈ

ū#Ů
ū
Ū#Ů

ŷ

Ū
ũ#Ů
ũ

ū

#ũ#Ů

Ŭ

ŭ

Ů

ů

Ű

ű

$

Ūũ ŪŪ Ūū ŪŬ Ūŭ ŪŮ Ūů ŪŰ Ūű Ū$ ūũ ūŪ ūū ūŬ ūŭ ūŮ ūů ūŰ ūű ū$ Ŭũ ŬŪ Ŭū
ż Ƌƌ ş'
ŷ

Fig. 4.

ŷ

DU and Dp when Partition Size is 32

ŭ
Ŭ#Ů
Ŭ
#
Ť
ŧş
ƈ
şŽ
Ƌ
'
ƈ
ş

ū#Ů
ū

Ū#Ů

ŷ

Ū
ũ#Ů
ũ

ū Ŭ ŭ Ů ů Ű ű $ Ūũ ŪŪ Ūū ŪŬ Ūŭ ŪŮ Ūů ŪŰ Ūű Ū$ ūũ ūŪ ūū ūŬ ūŭ ūŮ ūů ūŰ ūű ū$ Ŭũ ŬŪ Ŭū ŬŬ Ŭŭ ŬŮ Ŭů ŬŰ Ŭű Ŭ$ ŭũ ŭŪ ŭū ŭŬ ŭŭ ŭŮ ŭů ŭŰ ŭű
ż Ƌƌ ş'
ŷ

Fig. 5.

ŷ

DU and Dp when Partition Size is 48

$ŭ
$ū
$ũ
űű
#
Ť
şŧ

űů
űŭ

Ƃ

űū
űũ
Űű
Űů

ū

Ŭ

ŭ

Ů

ů

Ű

ű

$

Ūũ

ŪŪ

Ūū
ŽŶ%

ŪŬ

Ūŭ ŪŮ
ż Ƌƌ ş'
%'

Ūů

ƌƋşŽŶ%

ŪŰ

Ūű

Ū$

ūũ

ūŪ

ūū

ūŬ

ūŭ

ūŮ

ūů

ūŰ

Ź%żŶ%

Fig. 6. Comparison of Useful Prediction between traditional pattern replacement algorithm and constrained pattern replacement algorithm ෈Useful Prediction vs. order
of PCM when partition size is 32෉

Enhancing Prediction Accuracy in PCM-Based File Prefetch

221

$ŭ
$ū
$ũ
űű

#
Ť
ŧş

űů

Ƃ

űŭ
űū
űũ
Űű

ū

Ŭ

ŭ

Ů

ů

Ű

ű

$

Ūũ ŪŪ

Ūū ŪŬ Ūŭ
ŽŶ%

ŪŮ

Ūů ŪŰ Ūű
ż Ƌƌ ş'
%'

ƌƋşŽŶ%

Ū$ ūũ ūŪ

ūū

ūŬ ūŭ ūŮ

ūů ūŰ ūű

ū$ Ŭũ ŬŪ

Ŭū

Ź%żŶ%

Fig. 7. Comparison of Useful Prediction between traditional pattern replacement algorithm and constrained pattern replacement algorithm ෈Useful Prediction vs. order
of PCM when partitioin size is 48෉

of PCM and discovered the cause of decrease of prediction accuracy in high order. We also proposed Constrained Pattern Replacement Algorithm to prevent
useless loss of patterns in partition. Consequently, we enhanced the prediction
accuracy of PCM in high order. From the trace-based simulation results, using
DFSTrace system trace, we can see Improved PCM which uses Constrained Pattern Replacement Algorithm has a better prediction performance than PCM.
Improved PCM has maximum 3.5ළ improved Up and Pa in high order, which
corresponds to 40ළ improvement compared to maximum 7ළ diŞerence between
FMOCM and PCM.
Acknowledgement.

The authors would like to thank the Ministry of Education of Korea for its
Şnancial support toward the Electrical and Computer Engineering Division at
POSTECH through its BK21 program. This research was also supported in part
by HY-SDR IT Research Center.

References
1. T. M. Kroeger and D. D. E. Long, ţDesign and implementation of a predictive
Şle prefetching algorithm," in Proceedigs of the 2001 USENIX Annual Technical
Conference, Boston, MA, Jan. 2001.
2. T. M. Kroeger and D. D. E. Long, ţPredicting Şle system actions from prior
events," in Proceedigs of the USENIX 1996 Annual Technical Conference, pp. 319328, USENIX, Jan. 1996.
3. T. M. Kroeger and D. D. E. Long, ţThe case for eŞcient Şle access pattern modeling." in IEEE Proceedings of the Seventh Workshop on Hot Topics in Operating
Systems ෈HotOS-VII෉, Rio Rico, Arizona, Mar. 1999.
4. T. M. Kroeger and D. D. E. Long, ţPredicting Şle system actions from prior events,"
Master's thesis, University of California, at Santa Cruz, 1997.

222

I. Choi and C. Park

5. G. Kuenning, ţThe design of the seer predictive caching system," in Workshop
on Mobile computing Systems and Applications, pp.37-43, IEEE Computer Society,
Dec. 1994.
6. H. Lei and D. Duchamp, ţAn analytical approach to Şle prefetching," in Proceedigs
of USENIX 1997 annual Technical Conference, USENIX, Jan. 1997.
7. V. N. Padmanabhan and J. C. Mogul, ţUsing Predictive Prefetching to Improve
World Wide Web Latency," in Proceedings of the 1996 SIGCOMM, ACM, July
1996.
8. J. S. Vitter and P. Krishnan, ţOptimal prefetching via data compression," Journal
of the ACM, vol. 43, pp. 771-793, Sep. 1996.
9. K. M. Curewitz, P. Krishnan, and J. S. Vitter, ţPractical prefetching via data
compression, " in Proceedings of the 1993 ACM SIGMOD International Conference
on Management of Data ෈SIGMOD '93෉, pp. 257-266, Washington, D. C., May 1993.
10. J. GriŞoen and R. Appleton, ţReducing Şle system latency using a predictive
approach, " in USENIX Summer Technical Conference, pp. 197-207, June 1994.
11. T. M. Madhyastha and D. A. Reed, ţInputŠoutput access pattern classiŞcation
using hidden Markov models, " in Proceedings of the Fifth Workshop on InpuŠOutput
in Parallel and Distributed Systems, ෈SanJose, CA෉, pp. 57-67, ACM Press, Nov.
1997.
12. A. Amer and D. D. E. Long, ţNoah: Low-cost Şle access prediction through pairs,
" in Proceedings of 20th IEEE International Performance, Computing, and Communications Conference ෈IPCCC 2001෉, pp. 27-33, Phoenix, Arizona, Apr. 2001.
13. L. Mummert and M. Satyanarayanan, ţLong term distributed Şle reference tracing: Implementation and experience, " Sofware - Practice and Experience ෈SPE෉,
26෈6෉:705-736, June 1996.
14. Ahmed Amer, Darrell D. E. Long, and Randal C. Burns, "Group-Based Management of Distributed File Caches, " The IEEE International Conference on Distributed Computing Systems ෈ICDCS 2002෉, Vienna, Austria: July 2002.
15. Ahmed Amer, Darrell D. E. Long, Jehan-Francois Paris, and Randal C. Burns,
"File Access Prediction with Adjustable Accuracy, " Proceedings of the IEEE International Performance Conference on Computers and Communi-cation ෈IPCCC
2002෉, Phoenix, Arizona: Apr. 2002.
16. J.G. Cleary, W. Teahan, and I.H. Witten, "Unbounded length contexts for PPM, "
J.A. Storer and M. Cohn ෈eds.෉, Proc. IEEE Data Compression Conference, Snowbird, Utah, 1995.

