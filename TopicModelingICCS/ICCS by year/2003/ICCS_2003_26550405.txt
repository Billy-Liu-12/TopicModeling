HRT-UML: Taking HRT-HOOD onto UML
Silvia Mazzini1 , Massimo D’Alessandro1 , Marco Di Natale2 , Andrea Domenici2 ,
Giuseppe Lipari2 , and Tullio Vardanega3
1

2

Intecs HRT, via L. Gereschi 32-34, I-56124 Pisa, Italy
silvia.mazzini@pisa.intecs.it, max.dalex@libero.it
Scuola Superiore S. Anna, viale R. Piaggio 34, I-56025 Pontedera, Italy
{marco,andrea,lipari}@sssup.it
3
Universit`a di Padova, via G. Belzoni 7, I-35131 Padova, Italy
tullio.vardanega@math.unipd.it

Abstract. This paper discusses issues that arose in an effort to transpose the semantic and methodological value of HRT-HOOD into a carefully-crafted selection
of the UML meta-model. The main goal of the project was to prevent the massive
advent of the UML from obliterating the unique strengths of the HRT specialisation
of HOOD for the support of real-time design. Avoidance of closed conservatism
also afforded the project the opportunity to reflect on aspects of object-oriented
design that may arguably benefit the resulting HRT-UML method.

1

Introduction

In the niche market that the HOOD method addresses (initially aerospace and lately also
transport), its specialised derivative HRT-HOOD has increasingly earned the reputation
of being "the" answer to the demands from the development of time-critical systems.
From the methodological standpoint, therefore, it may well be argued that HRTHOOD was a definite success story, yet critically impaired by the lack of productive tool
support.
In this context, the massive advent of UML presents the HRT-HOOD community
with a threat and an opportunity: the threat that the irresistible thrust of the new trend
obliterate the methodological value of the HOOD stronghold; the opportunity of riding
the UML wave, with its large offer of support technology, while trying to preserve the
unique strengths of the HRT-HOOD method.
These considerations spawned a project, supported in part by the Italian Space
Agency, ASI, which produced the definition of a new, UML-based method, named HRTUML.
This paper discusses the technical and methodological choices that the project made
in devising the strategy for bringing together the best of both worlds: HRT-HOOD, as the
outgoing method; and UML, as the linguistic infrastructure on which domain-specific
methods and processes can be instantiated. This paper also positions HRT-UML with
respect to the on-going efforts for extending UML to the real-time domain.
Finally, which should be of major interest to the Ada community, this paper presents
its strategic choice to view the Ada Ravenscar Profile as the target language for the
automated code generation capability attached to the method.
J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 405–416, 2003.
c Springer-Verlag Berlin Heidelberg 2003

406

S. Mazzini et al.

2 The HOOD Dowry
In keeping with its denomination, the HOOD method [7] aims to to combine the advantages of object-oriented design (the OOD tail of its name) and hierarchical decomposition
(whence the initial H) in the development of complex, composite projects.
With hindsight, it can perhaps be noted that the HOOD conception attempted to be
object oriented well (possibly too much) before object orientation had found its way
into virtually all aspects of software engineering, including the design of programming
languages that qualify for the development of critical systems.
In fact, at the birth of HOOD in the early 80s, “the” programming language of
choice for the method was Ada 83 [8], which effectively restrained it to being object
based, thereby limiting the extent of object orientation of its design paradigm.
As a distinctive token of the restrained object-orientation of the method, a HOOD
object is an object and a class at one time, where the class is in fact a singleton and the
corresponding object statically instantiated at design time.
There is no arguing that this restrained character detracts from the object-oriented
purity of the method. Yet, once coupled with the blend of deliberate and inherent limitations to its support for inheritance, it effectively exempts HOOD from the common
drawbacks of “pure” object-oriented methods, which may complicate traceability, testability and maintenance. Paradoxically, therefore, what looks like a limitation in the eyes
of the purist, makes HOOD (and its HRT-HOOD derivative) quite a good fit for the
development of higher-integrity systems, where restraints to the allowable expressive
power are often necessary and desirable.
If the OOD line of HOOD promised more than it actually delivered (not necessarily to the detriment of users, though, especially for what concerns discipline and rigor)
its H component proved the dominant character of the method. Traditional HOOD designs often appear as include graphs and/or parent-child hierarchies of considerable
depths, with quality metrics debating over limits, benefits and drawbacks of decomposition.
While hierarchical decomposition has not since made it into the mainstream of
object-oriented design (which denounces a potential weakness of the latter) the ability to decompose a problem into finer-grained parts arguably remains a fundamental
aid in handling complexity. In fact, HOOD adopts this view in a manner that serves
the interface mastering, testing and integration needs of prime contractor and system
integrator, who have to be able to control potentially deep levels of decomposition (and,
thus, contractual delegation), more extensively than those of plain programmers.
As a further token of its restrained object orientation, HOOD is not equipped for
requirements analysis proper, which instead seems to fit rather well in current objectoriented methods. The HOOD method covers from the design requirements analysis
phase down to architectural design, detailed design, coding (which can be automated)
and testing. The need to rely on foreign methods (and technology) for the requirements
analysis phase exposes HOOD users to the intricacies of the bridging and importation
process and to the variability of the allowable choices and techniques. Although some
attempts were made to address this weakness, no structural solution was ever found,
particularly because the energy that was put in the definition of the method was never
equally available for its maintenance.

HRT-UML: Taking HRT-HOOD onto UML

407

Overall, it can be argued that the HOOD dowry includes a considerable spectrum
of useful features, along with a number of drawbacks and limitations, part of which are
historical and part conceptual. If HOOD were to be replaced, care should therefore be
taken to devise transition strategies that prize the wealth of its useful features; notably, a
well-defined development process, strong support for hierarchical decomposition, static
object-to-class binding.

3 The HRT-HOOD Specialisation
The very conception of HRT-HOOD [5] rested on two pillars: the mandate to follow suit
from the HOOD method; and the goal to fulfill the demands of a modern design method
suitable for hard real-time systems. The latter, which the resulting method thoroughly
addresses, required:
– The explicit recognition of the types and the typical activities (i.e. cyclic and sporadic) of hard real-time systems.
– The integration of appropriate scheduling paradigms with the design process.
– The explicit definition of the application timing requirements for each activity.
– The definition of the relative importance (i.e. criticality) of each activity.
– The decomposition in a software architecture that facilitate processor allocation,
schedulability and timing analysis.
– Facilities and tools to allow and advance static verification as early as possible and
to facilitate consistent code generation.
The key to achieving these goals was the selection of a computational model that,
while being amenable to static scheduling analysis, allowed the incorporation of sporadic
activities, of interactions between concurrent activities, and of a blocking approach that
provide an optimal bound to priority inversion.
Interestingly, these notions instigated a very strong synergy between promoting
(methodologically) a computational model with the above characteristics and pursuing (by language design) the incorporation of the missing features for it in the Ada
language revision process [9]. This process resulted in the definition of the Ravenscar
Profile [4], which currently is the most accurate expression of the HRT-HOOD computational model and it definitely is one of the key assets to preserve in any departing route
to a novel method.
HRT-HOOD was predominantly shaped by way of specialisation. Where the HOOD
basic object types were just passive and active, HRT-HOOD added cyclic, sporadic and
protected, with specific constraints on how parent objects could be decomposed without
breaking the integrity of the parent type and the requirement that no terminal objects
(i.e. those that are not further decomposed) could qualify as merely active but had to
specialise as cyclic or sporadic.
HRT-HOOD further introduces a distinction between the synchronisation requirements on an object’s operation and the internal concurrent activity within the (active)
object itself. The method defines an agent for the synchronisation, which it calls the
object control structure, whereas it uses the notion of thread to capture the concurrent
activity within the object. The thread executes independently of the incoming operation

408

S. Mazzini et al.

requests (i.e. the invocation of the object’s external operations), but when it honours
them, it does so in the order dictated by the control object. In addition to being an
especially useful specialisation of the unsatisfactory HOOD concept of ’active’, these
notions permit a very direct route to Ada code generation, with the thread mapping to a
task and the object control structure mapping to a protected object.
The terminal level of an HRT-HOOD project (i.e. the set of all its terminal objects)
ultimately consists of a collection of single-threaded cyclic and/or sporadic objects,
along with as many protected and passive objects as expressed in the design. With
certain constraints in place on the allowable object behaviour, which can and should
in fact be asserted at design level (e.g.: no asynchronous transfer of control, no task
termination, single activation event per task, non-suspending operations) the threads of
cyclic and sporadic objects will just be Ravenscar tasks; protected objects will also be
Ravenscar; and passive objects will be Ada packages whose operations abide by the
Ravenscar restrictions [1,2]. Thanks to the same set of constraints, Ravenscar protected
objects also become a natural fit for the implementation of object control structures.

4 A Mapping to the UML
The Unified Modeling Language, UML [10] is a language for specifying, visualizing,
constructing, and documenting the artifacts of software systems, as well as for business
modeling and other non-software systems. The UML represents a collection of the best
engineering practices that have proven successful in the modeling of large and complex
systems.
UML is a very general language that can be used to describe various systems. Unlike
HOOD, it includes a graphical representation of the formal language. It intentionally refrains from including any design process; rather, it expects that various design processes
be defined using the base language. The general notation of UML can be specialized,
by identifying certain uses of the constructs as bearing some special semantics; such
specializations are called stereotypes, which in fact proved instrumental to our mapping.
At present, UML has emerged as the software industry’s dominant modeling language. It has been successfully applied to a wide range of domains, ranging from health
and finance to aerospace and e-commerce. At the time of this writing, over sixty UML
CASE tools can be listed from the OMG resource page www.omg.technology/uml.
The HOOD market never even approached this level of support, whose offer, at the peak
of its success, counted perhaps a handful of tools.
Born at Rational in 1994, UML was taken over in 1997 at version 1.1 by the OMG
Revision Task Force (RTF), which became responsible for its maintenance. The RTF
released an editorial revision, UML 1.2 in June 1998, and two minor revisions, UML 1.3
in June 1999 and UML 1.4 in September 2001. The latter has been taken as reference for
the definition of the HRT-UML method. A major revision, UML 2.0, which also aims
to address the real-time dimension, is currently under the OMG specification process.
Section 5 of this paper positions HRT-UML with respect to the on-going OMG effort in
the domain [11].
Our approach to moving from HRT-HOOD to UML was founded on the determination to:

HRT-UML: Taking HRT-HOOD onto UML

409

– Resist to the introduction of UML features that may clash with the HRT-HOOD way
of thinking, even though they may improve the expressive power of the model.
– Refrain from liberally blending UML into HRT-HOOD so as to prevent creeping
changes in the HRT-HOOD conceptual model.
Our proposal seeks a balance between novelty and tradition, with special care for the
preservation of the HRT-HOOD methodological strengths.
In order to master the complexity of a direct mapping from HRT-HOOD to UML,
we have opted to address the conceptual relationships between the pure HOOD and
UML notations first, before delving into the real-time issues of the HRT-HOOD method
proper.
4.1

Outlining the Mapping Approach

Arguably, regarding UML as a notation is not completely accurate. Some observers
insist that the strength of UML lies not in its notation but in its meta-model, that is,
in its selection and standardisation of concepts in support of object-oriented modeling.
Furthermore, UML does not define a tight correspondence between models and notations.
There can be different notational rendering of the same UML model (i.e. meta-model
instance). In UML, meta-model and notation must thus be regarded as separate concerns.
A similar dichotomy is also present in HOOD: the so-called Object Description
Skeleton (ODS) is a textual representation of the HOOD meta-model, with a diagram as
its notation. Yet, a HOOD model can have only one representation in notational form,
so that an ODS can be automatically rendered in terms of a diagram.
Specification (meta-model) and notational rendering thus are separate concepts in
both HOOD and UML, in the latter more keenly so than in the former. This observation suggested that we should first focus on correspondences at meta-model level,
and thereafter on correspondences between the HOOD ODS and the UML notations of
interest.
In our view, the mapping between the HOOD and the UML meta-models should
address the following concerns:
Conceptual Correspondence between HOOD and UML. Whenever one and the same
concept is present in both HOOD and UML, or else when a HOOD concept can be
viewed as a restriction of a UML one, a direct correspondence can be made between
the two and the meta-model representation in UML is either trivial or easily achieved
through the UML stereotype mechanism.
Conceptual Substitution of HOOD Concepts with Standard UML Replacements. Whenever any HOOD modeling mechanism appears to be obsolete with respect to the more
modern and standardised approach in UML, we introduce a conceptual substitution instead of a correspondence, so long as the replacement suits the aspects of the overall
design process philosophy that we want to preserve.
HOOD is quite deliberate in limiting the extent of its object orientation. In actual fact,
HOOD [7] draws a clear separation between objects and data, whereby objects provide

410

S. Mazzini et al.

procedural services, whereas data are information exchanged between objects by these
services. The rationale for this choice was one of separation of concerns: separating data
analysis from structural and functional analysis was expected to reduce the complexity
that has to be dealt with in the design process.
As we have seen earlier, a HOOD object is a UML object from a certain standpoint
and a class from another: a HOOD object is thus an object and a class at the same
time. More specifically, a HOOD object corresponds to a UML object and a descriptor
for it (i.e. a UML class), provided that the class is never treated as a type: no class
hierarchy; no attribute with it as a type and no parameter with it as a type in any operation.
Consequently, descriptors of HOOD objects cannot be included in inheritance hierarchy
structures. This definition results in a suitable «HOOD Object Descriptor» stereotype
for a UML class.
HOOD forces a rigid top-down decompositional approach to the design process. In
contrast with that, object orientation promotes a strong flavour of bottom-up reasoning.
It is fairly infrequent that the external interface of the overall system be precisely defined
at the start of an object-oriented architectural design phase, which instead is required
for HOOD.
A HOOD non-terminal (parent) object is one which decomposes to a set of child
objects. The non-terminal object is said to be in an include relationship with its child
objects The descriptor (class) of a non-terminal object will therefore bear an equivalent
relation with the classes of the internal objects.
A HOOD “include” relationship is complemented by an implemented by relationship,
which sets the intended correspondence between the items provided by the interface of
the non-terminal object and the items provided by the interface of its internals.
UML is not quite as sharp as HOOD in its support for hierarchical decomposition.
Some tentative parallel can be drawn with the UML package and subsystem mechanisms,
neither of which however proves satisfactory.
The package is only an envelope with some visibility filter (i.e. a name-space),
which, unlike the HOOD parent object, has no semantics of its own and thus provides no
attribute or operation. Note that, to further complicate matters, the semantics of HOOD
decomposed objects, which is strongly enforced at design time, is fully replaced by
that of their decomposition hierarchy at run time, when decomposed objects effectively
disappear for good.
The subsystem, on the other hand, has a semantic identity, which, however, needs to
be realised by its internals, which are in turn distinct from it. It is precisely this difference
in nature that breaks the parallel with the HOOD notion of parent object, which is wholly
indistinguishable from a child object until the decision is made to actually decompose.
A UML subsystem may be viewed as an interface that will be subsequently replaced
by a concrete realisation: where HOOD forces identity between an object interface (the
parent) and its realisation (its children), UML introduces conceptual and methodological
separation. In fact, there arguably is value in focusing on interfaces alone more than solely
on the realisation view. Yet, this would be quite a diversion from the instantiation-centric
HOOD development logic, which may be worth pursuing with a longer-term vision than
our current project horizon. As a further restraint, we also note that the subsystem does
not appear to be a particularly stable concept in UML yet.

HRT-UML: Taking HRT-HOOD onto UML

411

Overall, the most effective object-oriented parallel to the “include” relationship that
holds in our context is composition, whereas that of the complementary “implemented
by” relationship is delegation. With this view in mind, we contend that:
– A HOOD non-terminal object is a UML object, which is composed of its child
objects.
– “Implemented by” relationships between the parent-provided operations and childprovided operations are mapped into delegation dependencies.
– All the operations of the parent class must be delegated.
In HOOD, an object A may use the provided items of an object B as long as those
are visible inside A. This visibility requirement holds transitively: a child object can
only use provided items of uncle objects that are in an explicit use relationship with the
parent object.
We insist that the HOOD “use” relationship between any two objects entails, for
UML, a link between the corresponding instances and an association between their
respective classes (descriptors). A link between objects is required for them to interact,
but the existence of the link in turn requires an association between the respective classes.
Interestingly, the notion of required interface entailed by the HOOD “use” relationship offers another opportunity to explore the direction we outlined with regard to UML
subsystems. The plain HOOD interpretation has the required interface merely define (i.e.
select) which of the provided operations of the used object the other object will actually
use. The strengthened interpretation takes that further to mean the required specification
(i.e. the service contract) in place between the client object and any supplier object.
Using interfaces instead of classes as target entities of associations relaxes the need
to attain exhaustive classification: the class of the actual object bound to a requiring
object at design time is less important than the guarantee that the supplier object realise
the required interface. This interpretation of required interface seems quite attractive for
the realization of a component-based software development support for hard real-time
systems in which the expected behaviour (i.e. the required interface) is more important
than abstract classification. Recent work [12] provides some initial insights in this direction by showing how composability can be effectively achieved for non-terminal objects
whose internals are strictly HRT-HOOD.
This required interface between objects directly maps to a dependency (an association) from the class of the source (client) object to a UML interface that defines the
list and the signature of the operations required from the class of the target (supplier)
object. Undoubtedly, further specific information (e.g.: the conformance of the operation
instance to the non-suspension requirement and the worst-case execution time of it) will
have to be tagged to such interface information to permit this concept to suit the hard
real-time design philosophy.
On the basic conceptual infrastructure for the UML-to-HOOD mapping outlined
above, and by use of the UML support for notation specialisation, we can easily produce
the definition of the HOOD Object stereotype.
At this point, our next step was to reproduce on that stereotype the specialisations that
seemed best suited to express the conceptual enhancements that HRT-HOOD added to
HOOD. Before doing that, however, we had to reflect on what parts of the HRT-HOOD

412

S. Mazzini et al.

method descended more from inherent limitations of the HOOD expressive power than
from intentional HRT characteristics.

4.2

HRT Design Issues

HRT systems typically exhibit shallow levels of hierarchical decomposition. This occurs because the verification needs of the HRT development process call for an early
characterisation of the design components, which is obstructed from any too indefinite
level of specification. The information distance that may incur between an active parent
object and the set of terminal objects it decomposes to may become so huge to prevent
early static analysis altogether.
This observation has two important consequences. First, that the HOOD notion of
“root” object is so indeterminate that it has no useful value to an HRT design: an HRT
system is thought of and viewed as a collaboration of concrete objects. Second, that a
deep decomposition level may be viewed as the clue of a design to be refactored in some
way.
In fact, the major semantic contribution of the notion of parent object in HRT-HOOD
is that of placing strict constraints on the allowable decomposition choices, which permit
the type characterisation of the parent to globally hold for its decomposed internals. Once
that is granted, all attention is placed on the concrete attribute values (whether actual or
estimates) of the terminal objects at the current level of decomposition.
HRT architects tend to use objects as first-level entities and regard classes as a
secondary tool. This attitude, which is quite the reverse of classical object orientation,
reflects the HRT requirement that all instances of all classes be statically known, and
fully characterised, at design time.
In standard object-oriented methods, the architectural design of a system is mainly
concerned with class modeling. Object modeling in this context configures as an additional activity intended to clarify behaviour and collaboration aspects through the use
of “scenarios”. Scenarios or collaborations do not tell the way the system is built; they
merely are an instrument to better understand the system behaviour in some circumstances.
In contrast with that, the starting point for an HRT design is the topology of its
objects. From the HRT perspective, a system is built directly defining its objects and
their links, instead of its classes and their relationships.
This notwithstanding, HRT systems may well use multiple instances of objects,
which all hold one and the same structure and properties, but differ in their instance
attribute values and have an independent state evolution. In fact, a reuse-oriented HRT
design is quite naturally conducive to multiple static instantiation. (Note that HRTHOOD implicitly fosters low-level component reuse in the forced coupling between the
task and the protected object that implement the thread and the object control structure
of a cyclic and/or a sporadic object.)
This flavour of multiple static instances however can hardly be satisfied by the HOOD
Generic Object concept, whose decomposition is external (and thus invisible) to the
system under development and whose instances appear as terminal objects (and thus
hiding their internals) and cannot interact with other objects in the system. In essence,

HRT-UML: Taking HRT-HOOD onto UML

413

classes can quite possibly exist in an HRT system as long as all of their instances are
statically defined and expose their internal structure clearly.
Note that, under the guarantee of static resolution of the instance-to-class relationship
(i.e. static binding), recent experiences show that even some degree of polymorphism can
prove acceptable to the implementation of hard real-time systems in so far as beneficial
to the elegance and, marginally, to the execution speed of the resulting source code (cf.
e.g.: [3]).
We call topology orientation the characteristic of the HRT domain to require full
knowledge about the way the objects in the system are interconnected (i.e. the system
topology). We view this fact to cause any HRT-HOOD design to systematically map onto
a pair of UML models: the class model and the object model. The class model alone would
not fully describe the system, for it would miss its topology and the instance structure.
The object model alone would also not suffice, for it would lack the specification of
class properties. Object modeling will be in the foreground and class modeling in the
background. In fact, under certain circumstances, it is possible to automatically derive
a class model from an HRT object model, so that the object model actually attains total
expressive power, thus giving rise to what we call the underlying class model.
In standard object orientation, a class model usually just describes the logical structure of a composite object (a non-terminal in HOOD), leaving to class constructors
and factory operations the determination of most of the actual structure of individual
instances of the composite class.
In the HRT realm, instead, the inner structure of a composite class must be precisely
defined at design time, which all of its (static) instances must equally abide by. Variability
is limited to the setting of specific attribute values (e.g.: worst-case execution time of a
concrete operation, parameter initialisation, initial state). The structure of all instances
of a class of HRT objects cannot be thus deferred to the logic of factory operations or
class constructors, but it must be statically encoded in the (object) model.
An effective way to define this class-level structure would be by example, that is, by
inferring it from the structure of a typical instance, which we call the prototype instance.
Albeit not a standard UML concept, the “OO prototype” design pattern proposed by
the “Gang of Four” [6] is an attractive approach to realise this concept. A new object
instance can be created by clonation of the structure defined by the prototype instance of
a class. With this approach, the underlying class model would only contain the abstract
inter-class associations, while the exact structure of the instances would be provided by
the prototype instance of the object descriptor. The prototype instance would thus define
part of the semantics of a class, expressed in terms of an object model, without however
being part of the system. Note that this would be no different from when the dynamic
semantics of a class are expressed in terms of a state transition model.
Topological issues also arise when we take the HRT view of the “use” relationship
into account, which is only fully defined when set between specific instances. In order to
preserve the information value of the prototype instance without breaking the integrity
of the HRT dimension, we allow “use” relationships to be directed towards placeholder
objects, which can be statically bound to specific instances at a later stage of design. In
general, placeholder objects will be unbound when the prototype instance of an object
descriptor is first created; subsequently, they will be bound to actual objects that are

414

S. Mazzini et al.

visible in the instantiation environment. The target object of the binding will have to
be of the same class as determined by the placeholder, or, in fact, provide the required
interface.
The natural evolution of this attractive view is the vision of HRT design as the
static assembling of instances; in other words, the notion of component-based HRT
development. The use of placeholder objects in prototype instances may give rise to the
HRT equivalent of the topology-aware metaphor of GUI Builders.
4.3

Mapping the HRT Dimension

The realisation of the HRT-HOOD basic object types in HRT-UML quite simply results
from the specialisation of the HOOD object stereotype. This specialisation adds
semantics and attributes to the stereotype (e.g.: the period for periodic object; the deadline for all threaded objects; etc.), but it also introduces constraints on the allowable
decomposition and visibility of objects. The HRT-HOOD reference manual [5] forms
the basis for the definition of the required specialisations.
A more delicate issue arises with regard to operations. HOOD requires that synchronisation constraints be associated to the provided operations of objects, which specify
how control should flow on both sides of the relevant execution request.
For example, HOOD uses a “highly synchronous execution request” constraint to
model an Ada rendezvous with in and out parameters, which interrupts the control flow
in the client until completion of the requested operation within the server.
HRT-HOOD retains this view and completes it with what required to model the
invocation of protected operations. Of all allowable synchronisation constraints, the
Ravenscar-minded version of HRT-HOOD then rules out those that might incur unbounded blocking of the caller, so as to ensure design-level compliance with the Ravenscar restrictions.
HOOD and HRT-HOOD view such synchronisation constraints as a static property
of operations and associate them to the descriptor of the providing object. Conversely,
UML views the synchronisation mode as a dynamic attribute of the invocation: different
calls of one and the same operation can thus feature different synchronisation modes.
Accordingly, UML defers this aspect of specification to the Interaction Diagrams, leaving
it vacant in Class Diagrams.
This UML feature is clearly in contrast with the distinguishing methodological need
of HRT design to allow and facilitate early static analysis of the system under construction. Consequently, the HOOD-sided view of synchronisation constraints has prevailed
over the UML one in our definition of the HRT-UML method. Hence, the HOOD
Object stereotype forms the basis for the HRT-UML specialisation of both the object
characteristics and the corresponding operation constraints.

5

HRT-UML vs. the OMG Real-Time Profile

In our definition of an HRT-UML profile inspired to HRT-HOOD there were two distinct
phases. The first one focused on the definition of a set of UML stereotypes that offered
the best possible mapping for the HRT-HOOD meta-model. This paper has presented

HRT-UML: Taking HRT-HOOD onto UML

415

the resulting definition, which constitutes the core package and the core level of our
HRT-UML profile. The stereotypes and tagged values defined in this phase allow the
form of schedulability analysis supported by HRT-HOOD models, which fulfills the
initial objectives of the project.
In March, 1999, the OMG issued a request of a profile for schedulability, performance
and time (real-time analysis). The initial submission issued in August 2000 was followed
by a revised version in July 2001, which had an entirely different structure and definitions.
The revised submission of the OMG profile was then voted for adoption with minor
changes only in November 2001.
Despite its belated arrival for the purposes of this project, the OMG profile for time
and schedulability cannot be possibly ignored, for obvious pragmatic reasons. It is in fact
expected that compliance with real-time analysis tools working on the OMG stereotypes
and adoption (by specialization) of stereotypes and design patterns that are very likely
to become a standard among real-time UML designers should enhance the portability
and the readability of the UML schemes generated from our profile.
In order to attain the desired extent of compliance, we resolved to add two further
levels to our HRT-UML profile.
The first additional level seeks compliance with the (simpler) static schedulability
model defined by the OMG profile, which provides equivalent constructs for most of
the HRT-HOOD meta-model entities. Unfortunately, however, the static model does
not provide any expressive means to represent the synchronous/asynchronous semantics
of execution requests (method calls) neither it allows the representation of precedence
constraints. These limitations make most kinds of schedulability analysis (especially
end-to-end analysis) impossible, unless the expressiveness of the static model were
enhanced by specialising the stereotypes of the OMG static model.
The second additional level for our HRT-UML profile consists in the definition of
an additional dynamic or behavioral UML model implied by the HRT-HOOD design.
The definition of a dynamic model permits to sub-class the stereotypes defined in the
dynamic model of the OMG profile, which are the basis for the most general forms
of schedulability analysis. It is worth noting, however, that this enhanced compatibility
with the OMG definitions comes at the price of a greater complexity, which may prove
a substantial hurdle for those familiar (and satisfied) with HRT-HOOD.
Both of these two additional levels are currently built upon definitions and stereotypes that are not supported by any commercial tool yet and which are not validated by
a sufficient span of design practice. It thus remains an on-going research effort the goal
to build an HRT-UML profile that be both coherent with the HRT-HOOD meta-model
semantics and yet compliant (by sub-classing) with OMG-profile stereotypes and definitions with actual use in the real-time design practice and support by static analysis tools.

6

Conclusions

The project provided an excellent opportunity of cross-contamination for the two starting
points of our exercise.
In the HOOD-to-UML direction, focus was placed on transposing pivotal aspects
of the base HOOD method and its HRT-HOOD derivative, which we deemed crucial to

416

S. Mazzini et al.

the fitness of the HRT-UML profile for the design of modern, high-integrity real-time
systems. The highlight of this transaction was perhaps the preservation in UML of the
inherent topology orientation of HRT design, which has resulted in the introduction of
such innovative concepts as the prototype instance and the placeholder object.
The reverse UML-to-HOOD direction, in which the notion of UML stereotype proved
instrumental, brought forward the attractive potential of the object-oriented concept of
interface, an obvious candidate for supporting placeholder objects, and of componentbased HRT development, as the means whereby domain-specific reuse may productively
join forces with HRT design.
Finally, the transposition exercise also confirmed the strategic value and the methodological strength for HRT design to attain and preserve compliance with the Ravenscar
profile.

References
1. Ada Rapporteur Group: AI-249: Ravenscar profile for high-integrity systems. Technical
report, ISO/IEC JTC1/SC22/WG9 (2002)
http://www.ada-auth.org/cgi-bin/cvsweb.cgi/AIs/AI-00249.TXT
2. Ada Rapporteur Group: AI-305: New pragma and additional restriction identifiers for realtime systems. Technical report, ISO/IEC JTC1/SC22/WG9 (2002)
http://www.ada-auth.org/cgi-bin/cvsweb.cgi/AIs/AI-00305.TXT
3. Alonso, A., L´opez, R., Vardanega, T., de la Puente, J.A.: Using object orientation in high
integrity applications: A case study. In J. Blieberger and A. Strohmeier, editors, Proceedings
7th Int’l Conference on Reliable Software Technologies | Ada Europe 2002, volume 2361 of
LNCS. Springer-Verlag (2002)
4. Burns, A., Dobbing, B., Vardanega, T.: Guide for the use of the ada ravenscar profile in high
integrity systems. Technical Report YCS-2003-348, University of York (2003)
http://www.cs.york.ac.uk/ftpdir/reports/YCS-2003-348.pdf
5. Burns, A., Wellings, A.: HRT-HOOD: A Structured Design Method for Hard Real-Time
Systems. Elsevier Science, Amsterdam, NL ISBN 0-444-82164-3 (1995)
6. Gamma, E., Helm, R., Johnson, R., Vlissideds, J.: Design Patterns: Elements of Reusable
Object-Oriented Software. Addison-Wesley (1999)
7. HOOD Technical Group: HOOD Reference Manual 3.1. Prentice Hall, Englewood Cliffs,
NJ (USA) (1993)
8. ISO: Ada Reference Manual. International Standardisation Organisation, Geneva, CH
ISO/IEC 8652:1987 (1987)
9. ISO: Ada Reference Manual. International Standardisation Organisation, Geneva, CH
ISO/IEC 8652:1995 (1995)
10. Revision Task Force: OMG Unified Modeling Language Specification, Version 1.4. Technical
report, Object Management Group (OMG) OMG document formal/01-09-67 (2001)
11. Selic, B., Rumbaugh, J.: Using UML for Modeling Complex Real-Time Systems. Technical
report, Rational (2002)
http://www.rational.com/products/whitepapers/umlrt.pdf
12. Vardanega, T., Caspersen, G.: Engineering Reuse for On-board Embedded Real-Time Systems. Software - Practice and Experience, 32(3):233–264 John Wiley & Sons (2002)

