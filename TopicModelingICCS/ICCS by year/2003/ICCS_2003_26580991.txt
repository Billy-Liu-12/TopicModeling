CSA&S/PV: Parallel Framework for Complex
Systems Simulation
2
˙
Ewa Niewiadomska-Szynkiewicz1,2 and Maciej Zmuda
1

2

Research and Academic Computer Network (NASK), Wa˛wozowa 18,
02-796 Warsaw, Poland
e-n-s@ia.pw.edu.pl
http://www.nask.pl
Institute of Control and Computation Engineering, Warsaw University of
Technology, Nowowiejska 15/19, 00-665 Warsaw, Poland
mzmuda@elka.pw.edu.pl
http://www.ia.pw.edu.pl

Abstract. The paper1 presents an integrated environment CSA&S/PV
(Complex Systems Analysis & Simulation - Parallel Version), which can
be used for design and simulation of large scale systems such as data networks, complex control systems and many others operating in inherently
parallel environments. CSA&S/PV provides framework for simulation
experiments carried out on parallel computers. It was used to investigate
several real-life problems. Two examples are provided to illustrate the
operation of the presented software tool: a hierarchical optimization algorithm for ﬂow control in communication and computer networks and
a hierarchical control structure for ﬂood control in water networks.

1

Introduction

It is natural to model complex systems as a set of calculation processes, which
can then be handled by distributed machines or processors. Recently parallel
and distributed simulation has been an active research area, [3,4]. Distributed
simulation allows to reduce the computation time of the simulation program, to
execute large programs, which cannot be executed on single machine, to reﬂect
better the structure of the physical system, which usually consists of several
components.
In order to perform simulation experiments eﬃciently it is required to have
good software tool. Numerous systems have been engineered to aid programmers. In most cases they are speciﬁed to certain solving problems [1,8,7,9,10].
Since parallel and distributed simulation is fast becoming the dominant form of
model execution the focus is on experiments carried on parallel and distributed
hardware platforms. High Level Architecture (HLA) standard for distributed
1

This work was supported by Research and Academic Computer Network (NASK)
and Polish Committee for Scientiﬁc Research under grant 7 T11A 022 20.

P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 991–1001, 2003.
c Springer-Verlag Berlin Heidelberg 2003

992

˙
E. Niewiadomska-Szynkiewicz and M. Zmuda

discrete-event simulation was deﬁned by the United States Department of Defense. During last years numerous integrated environments for parallel and distributed processing were developed. These software tools apply diﬀerent techniques for synchronization and memory management, and focus on diﬀerent aspects of distributed implementation. Many of them are built in Java, [5]. SimJava
was among the ﬁrst publically released simulators written in Java. This paper
deals with the description of an integrated framework for parallel simulation
CSA&S/PV Complex Systems Analysis & Simulation - Parallel Version.

2

Description of CSA&S/PV

CSA&S/PV presented in preliminary sequential version, in [6], is the software
environment for diﬀerent types of real systems simulation. The main idea of
its development was to minimize user’s eﬀort during design and simulation of
complex systems. CSA&S/PV provides a framework, which allows to perform
simulations on parallel computers. It oﬀers the graphical environment (shell) for
supporting the considered case study implementation and a library of functions
providing communication between the user’s applications (LPs) and the system
interface. CSA&S/PV manages calculations and communication between running processes, provides tools for on-line monitoring of the computed results.
The asynchronous version of simulation is applied, [4]. In asynchronous simureceiver ﬂags time transmission data
address
stamp delay
Fig. 1. Contents of messages from LPs simulating the considered physical system
graph)

lation shared data object, the global clock and global event list, are discarded.
Each logical process maintains its own local clock (LVT - Local Virtual Time).
The local time of diﬀerent processes may advance asynchronously. Events arriving at the local input message queue of a logical process are executed according
to the local clock and schedule scheme. LPs can operate in two modes:
time-driven: The increment of LV T of each logical process is ﬁxed and deﬁned
by the user. LP is executed every deﬁned time step (repetition time), which
means that LV T changes at regular intervals. We assume that for diﬀerent
LPs diﬀerent repetition times may be introduced.
event-driven: Logical processes are executed after event occurrence. LV T s
change at irregular intervals. A conservative scheme similar to the CMB
algorithm, described in [3] is used for synchronization. Each event is executed only if it is certain that no event with an earlier time-stamp can arrive. At current time t each logical process LPi computes the minimum time
LV Ti = minj∈N (i) (tij + τij ), where tij is the time-stamp of the last message

CSA&S/PV: Parallel Framework for Complex Systems Simulation

993

received from LPj process, N (i) is a set of processes transmitting data to
LPi and τij is a transmission delay from node j to i (transfer cost). Next,
every LPi simulates all events with time-stamps smaller than the LV Ti . The
processes exchange messages as presented in Fig. 1. When the execution of
the considered event begins, LPi sends to all their neighbours null messages
with the time-stamp LV Ti + ∆Ti (where ∆Ti denotes the pending events
time), which is the earliest possible time of next message. Null messages are
used to announce absence of messages with new data.
Both types of LPs can be executed during one simulation.
2.1

System Structure

CSA&S/PV is composed of ﬁve components (see Fig. 2): 1) shell - the Graphical
User Interface (GUI), responsible for user-system interaction, 2) calculation module (manager) - the system kernel that manages calculations and communication
between running processes, 3) communication library - the library of functions
that provides communication between the graphical shell and the system kernel,
4) user library - the library of functions that provides interface between the user
application and ”manager” (system kernel), 5) user applications - simulators of
the physical subsystems (developed by the user).
The user’s task is to implement the subsystems’ simulators corresponding to
the nodes of the considered graph and responsible for adequate physical systems
simulation. These modules may be written in Java or C, C++. As it was mentioned above the CSA&S/PV package supplies the library of functions, which
provides the interface between these programs and the system. This allows the
user to focus on the numerical part of the program only. In addition if the functions unique to the operating system are not used by the user, applications can
be moved as necessary between diﬀerent computing platforms.
In general each user’s application consists of six functions: csasInit, the task
of which is to prepare the environment for future calculations and to calculate
the initial conditions, csasExecuteArgs, which gathers data for calculations from
CSA&S/PV, csasExecute, which provides calculations (the main part of the
user’s application), csasExecuteResults, which sends the results of calculations
to CSA&S/PV, csasStore, the task of which is to store all current calculation
results after system termination (simulation can be continued), csasEnd, an additional function for removing all data structures dynamically allocated during
program operation.
Each node independently executes its program and communicates each other
and with system kernel using user library functions. The system kernel manages
only communication between the user interface (shell) and calculation processes
corresponding to the nodes.
2.2

Implementation Details

The CSA&S/PV system has been implemented in Java, so it may operate under MS-Windows, Windows-NT and Unix operating systems. All calculation

994

˙
E. Niewiadomska-Szynkiewicz and M. Zmuda

CSA&S Shell
CSA&S communiaction
library (socket)

CSA&S
calculation
module

Main thread

Thread 1

Thread 2

Thread N

User library

User library

User library

User
application 1

User
application 2

User
application N

Fig. 2. The architecture of the CSA&S/PV system

processes communicate with each other via shared memory. The mechanism
for parallel implementation is based on threads (see Fig. 2). Each calculation
process (user’s application) runs a thread. Because the software system is heterogeneous (shell and manager may operate under diﬀerent operating systems)
CSA&S/PV establishes a two-way socket connection between the user interface
and the system kernel. The additional library of functions that provide communication between these two processes was developed.
2.3

Simulation under CSA&S/PV

During simulation experiment performed under CSA&S/PV one can distinguish
two main stages: preparatory stage and experimental stage. At the preparatory
stage the model and the properties of the system to be simulated are investigated. The calculation process is partitioned into several subsystems (subtasks)
with respect to functionality and data requirements. The directed graph of the
considered system G = (N, L) is created and entered into CSA&S/PV using
graph editor. The set of nodes is equal N with node i representing the i-th
subsystem (i = 1, . . . , N ). The set of links is equal L. The presence of an arc
(i, j) ∈ L indicates the possibility that the i-th subsystem inﬂuences the j-th
subsystem. Each node of the graph represents the program (LP) executing the
tasks of the simulated physical subsystem. As it was mentioned above all these

CSA&S/PV: Parallel Framework for Complex Systems Simulation

995

programs have to be prepared by the user and they must be ready to run. As
far as the CSA&S/PV system is concerned, the goal of each node application
program is to gather data from the connected nodes and to generate another
data for the other nodes. Within the next step the user is asked to provide some
information related to the nodes of the considered graph. The information includes: the name of the calculation program corresponding to each node, the
repetition time period (if necessary), the decision delay - time required to execute the events in the physical application. Next the user is asked to provide
some information related to all inputs of these nodes: the name of each input,
the transmission delay related to data transmission to a particular location. The
currently considered graph of simulated system may be saved into the disc ﬁle.
In this way the application can be used in many future simulations.
The experimental stage begins when all decisions regarding the simulated
system are made. The simulation time horizon is deﬁned and the experiment
starts. The adequate programs corresponding to the nodes of the system graph
are executed. The results of the calculations are displayed. The user employs
monitoring and analysis of the current situation. All results may be recorded
into the disc ﬁle during the experiment. The simulation may be interrupted and
restarted. There is a possibility to extend the simulation horizon if it is desired.

3

Practical Examples

The CSA&S/PV software package was used to perform simulations of several
large scale systems. In this paper the case studies connected with application of
hierarchical technics to optimization and control are described. The results of
analysis of pricing algorithms for data networks and systems for operational ﬂood
control in multiple reservoir system obtained under CSA&S/PV are presented.
3.1

Optimization Network Flow Control

The ﬁrst considered case study was related to the optimization approach to
ﬂow control in computer or communication networks. The asynchronous link
algorithm for pricing of network services, based on the Price Method was implemented and tested. The detailed description of this method together with the
discussion of its convergence one can ﬁnd in [2].
Consider a network consisting of a set L = {1, . . . , Ln } of unidirectional
links of capacities cl , l ∈ L and a set S = {1, . . . , Sm } of traﬃc sources.
Each source is deﬁned by a fourtuple (L(s), Us (xs ), xsmin , xsmax ), where xs
denotes transmission rate, Us (xs ) source utility function deﬁned over interval
Xs = [xsmin , xsmax ] ⊆ R+ , xsmin , xsmax respectively, minimum and maximum
transmission rates. For each link l let S(l) be the set of sources that use the link
l, so l ∈ L(s) if and only if s ∈ S(l). The objective is to maximize the aggregate
source utility over their transmission rates, so the ﬂow optimization problem can
be formulated as follows:
max

xs ∈Xs

Us (xs ),
s

xs ≤ cl ,
s∈S(l)

l ∈ Ln

(1)

996

˙
E. Niewiadomska-Szynkiewicz and M. Zmuda

If the feasible set is nonempty and the performance function is strictly concave
then the unique maximizing solution, x
ˆ exists (see [2]).
IP networks consist of many subsystems, i.e. sources, routers, etc. They are
constrained by the common resources - network capacity. The usage of methods with decomposition and coordination seems to be natural for such systems
control. The optimization problem (1) can be solved by the Price Method (dual
method using price coordination) in the parallel or distributed environment.
Deﬁne the Lagrange function of (1)
L(x, λ) =

s

=

s

Us (xs ) −

l

λl

Us (xs ) − xs

s∈S(l)
l∈L(s)

xs − cl =

λl +

l

(2)

λl cl

where λl ≥ 0, i.e. the Lagrange multipliers associated with capacity constraints
denote the link prices.
We can formulate the local (source) and coordinator level optimization problems:
LPs : s = 1, . . . , Sm , for given λl ﬁnd maximum w.r.t. xs of the local performance index


max Ls (xs , λ) = Us (xs ) − xs

xs ∈Xs

λl 

(3)

l∈L(s)

CP : for the results of LPs ﬁnd minimum w.r.t. λl of the coordinator performance index
min

λl ≥0, l=1,...,Ln

where λs =

l∈L(s)

Ls (ˆ
xs , λs ) +

ϕ(λ) =
s

(4)

λl cl
l

λl .

Synchronous and asynchronous distributed algorithms for prices computing were
proposed by Low and Lapsley in [2]. They are the descent algorithms for the dual
Sm
function minimization, with the price projection on R+
. In the synchronous
version the l-th link price at the iteration instant k + 1 is calculated as follows:



∂ϕ(λ(k))
λl (k + 1) = λl (k) − γ
= λl (k) + γ 
x
ˆs (k) − cl 
(5)
∂λl
+
s∈S(l)

+

where [y]+ = max(y, 0) and γ is suﬃciently small step size.
Thus, in the (5) approach all sources receive, at a given time instant k, prices
λl (k), compute respective source prices λs (k) and calculate optimal source rates
ˆs (k) are
x
ˆs (k) solving LPs problems. The obtained values of the source rates x
then send to the links and the new link prices λl (k + 1) are computed according
to (5).
In the case of asynchronous approach both sources and link algorithms use
weighted averages of the past values of the link prices and the locally optimal source rates. So, the l-th link price at the iteration instant k + 1 is

CSA&S/PV: Parallel Framework for Complex Systems Simulation

997

Fig. 3. Considered IP network under CSA&S/PV system
k

calculated according to (5) assuming x
ˆs (k) =
k =k−k0 als (k , k)xs (k ) with
k
k =k−k0 als (k , k) = 1, for all k, l and s ∈ S(l); k0 denotes the length of past
window taken into account. Respectively, the s-th source rate at time k + 1 is
k
calculated solving LPs, assuming λs (k) = l∈L(s) k =k−k0 bls (k , k)λl (k ) with
k
k =k−k0 bls (k

, k) = 1, for all k, s and l ∈ L(s).
The described above asynchronous pricing algorithm was applied for ﬂow control in experimental computer network, as presented in Fig. 3. It consists of nine
nodes: three sources, three routers, three destination nodes and eight bidirectional links (the algorithm requires communication between sources and routers).
The maximal capacity of the links Router1-Router2 and Router2-Router3 was
equal 290. The capacity of other links was unlimited. The network was implemented in CSA&S/PV system using nine calculation processes. The processes
exchanged messages as presented in Fig. 1, containing adequate data: link prices
- messages from routers and source rates - messages from sources. All calculation
processes corresponding to the nodes in Fig. 3 could communicate and update
their controls asynchronously at diﬀerent time instants, with diﬀerent frequencies, and after transmission delays. The utility functions Us of the sources were
set to αs log(1 + xs ), with αs = 104 for all sources. Only the last received rate
xs (τ ), for τ ∈ k − k0 , . . . , k was used to estimate the locally optimal source rates
and the link prices, i.e. als and als were set to 1 for k = k and 0 for k < k. Each
source transmitted data for a total of 120000 time units; source 1 started transmission at time 0, source 2 at time 40000, source 3 at time 80000. The whole
horizon of simulation was equal 240000 time units. The goal was to test the
convergence of the algorithm w.r.t. value of the step size in (5) and transmission
delays in the network. Several experiments were performed taking into account
diﬀerent values of step size γ = {1e−3, 1e−4, 1e−5}, and diﬀerent transmission
delays τD = {1, 10, 100} time units. It was assumed that the transmission was
delayed for all links. The results are presented in table 1 and ﬁgures 4, 5. Table
1 contains percentage of rejected data packets w.r.t. all packets passed during
the experiment. Figures 4 and 5 show respectively the destination receive rates

998

˙
E. Niewiadomska-Szynkiewicz and M. Zmuda

Table 1. Percentage of rejected packages with respect to diﬀerent values of γ and τD
τD = 1 τD = 10 τD = 100
γ = 1e-3 14.59 15.62
98.41
γ = 1e-4 63.54 63.55
65.51
γ = 1e-5 92.22 92.23
92.28

Fig. 4. The link prices for γ = 1e − 3 and τD = 1

and the link prices. We can observe that the source rates adjusted dynamically
as new sources started or stopped transmitting. As expected, the number of rejected packages increased for the longer transmission delay. For τD = 100 and
step size γ = 1e − 3 the algorithm was not convergent to the global optimum
(see Table 1). After decreasing the step size better solution was achieved. On the
other hand the decreasing γ took longer for the algorithm (5) to arrive at the
proper price values. In the case of very small value (γ = 1e − 5) the algorithm
seemed to track the optimum but the solution was not reached. The presented
results show that the considered pricing algorithm for ﬂow control is very sensitive to the value of the step size in optimization proces. The estimation of
the proper γ may involve many problems especially in the case of huge network
traﬃc.

CSA&S/PV: Parallel Framework for Complex Systems Simulation

999

Fig. 5. The source rates for γ = 1e − 3 and τD = 1

3.2

Flood Control in Multireservoir System

The second case study, implemented under CSA&S/PV was related to ﬂood
control in the Upper Vistula river-basin system in the Southern part of Poland.
Three retention reservoirs, located on Sola, Raba, Dunajec rivers were considered. The optimal release problem was deﬁned as the problem of minimization
the ﬂood damages related to the peak ﬂows at the measurement points in the
whole river system. The hierarchical control mechanism (HDM) for reservoirs
management, capable of satisfying the global objectives was investigated (see
Fig. 6). This mechanism is based on the use of the repetitive optimization of the
outﬂow trajectories, using the predicted inﬂows - forecasts (see [7] for details). It
incorporates two decision levels each (see Fig. 6): the upper level with the control
center (coordinator) and the local level formed by the operators of the reservoirs.
The local decision rules are designed in such way that a central authority, the
coordinator, may adjust them in the process of periodic coordination so as to
achieve the coordination of reservoirs in minimizing the global damages. Hence,
the decision problem of the i-th local reservoir operator (i = 1, 2, 3) at time tl is
as follows:
min qi (ui (.), ai ) = max (ui (t) · αi (t))
ui

t∈[tl ,tf ]

(6)

where [tl , tf ] denotes local level optimization horizon, qi local cost function, ai
parameters speciﬁed by the coordinator. The vector ai of coordinating param-

1000

˙
E. Niewiadomska-Szynkiewicz and M. Zmuda
hydrological
station m+1

....

hydrological
station m+2

side inflow forecast 2

side inflow forecast 1

hydrological
station m+k
side inflow forecast k

CONTROL CENTRE (central operator)
inflow forecast 1

inflow forecast m

hydrological
station 2

hydrological
station 1
inflow forecast 1

inflow forecast 2

reservoir
operator 1
reservoir outflow 1

flows at the
measurement stations

reservoir capacity

reservoir
operator 2

....

hydrological
station m
inflow forecast m

reservoir
operator m

reservoir outflow 2

reservoir outflow m

FLOOD WAVE TRANSFORMATION (river basin)

Fig. 6. Flood control in Vistula reservoir system

eters for the i-th reservoir is related to the weighting function αi (.) deﬁned as
follows: αi (t) = 1 + (ci − 1) · 1(t − Ti ), i.e., αi (t) = 1 for t ∈ [tl , Ti ) and αi (t) = c
for t ∈ [Ti , tf ].
The goal of the control center is to calculate the optimal values of parameters
a, such that minimize the damages in the whole river basin.
min J(Q[tc ,tf ] ),
a∈A

Q(t) = F (Q(tc ), u
ˆ[tc ,t] (a), d t[tcc ,t] )

(7)

where [tc , tf ] denotes control center optimization horizon (tc ≤ tl ), Q(t) vector of ﬂows at the measurement points, Q(tc ) vector of real ﬂows measured at
ˆ vector
time tc , d tc vector of forecasts of all the inﬂows calculated at time tc , u
of optimal outﬂows from the reservoirs (associated with vector of parameters
a), J(Q[tc ,tf ] ) a performance (loss) function. Every iteration of the optimization
process the value of J(.) is computed based on simulation of the lower decision
level (reservoirs’ operators) and ﬂow transformation in the whole river basin.
Presented control structure was implemented under CSA&S/PV. The whole
system was decomposed into several subsystems (processes) associated with the
nodes in Fig. 6: control center, (coordination parameters calculation), reservoirs’
operators (releases calculation), hydrological stations (inﬂow forecasts computing), rivers (ﬂow transformation). Simulations were performed for the set of historical data. The results obtained for presented control system were compared
with an independent reservoir management. The robustness of hierarchical control mechanism with respect to decision and transmission delays was tested too.

CSA&S/PV: Parallel Framework for Complex Systems Simulation

4

1001

Conclusion

Simulation tools play an important role in the computer-aided analysis and design of complex control systems. CSA&S/PV is such a tool written in Java programming language on diﬀerent platforms. The presented applications demonstrate the eﬀectiveness and eﬃciency of the CSA&S/PV system. In both case
studies CSA&S/PV was used as an environment for testing hierarchical techniques for control and optimization. It should be pointed that the considered
applications could be solved in sequential manner but in both cases parallel
computations were natural. In general the CSA&S/PV framework is suitable to
solve many other small and large scale problems based on computer analysis
and simulation. The package may be easily extended by ”toolbox” of software
modules, which are speciﬁc to a chosen case study.

References
1. Di, Z., Mouftah, H.T., QUIPS-II: a Simulation Tool for the Design and Performance
Evaluation of Diﬀserv-based Networks, Computer Communications, 25, pp.1125–
1131, 2002.
2. Low, S., Lapsey, D.E., Optimization Flow Control I: Basic Algorithm and Convergence, IEEE/ACM Transactions on Networking, 7(6), 1999.
3. Misra J., Distributed Discrete-Event Simulation, Computing Surveys, Vol. 18, No.
1, 1986.
4. Nicol D.M., Fujimoto R., Parllel Simulation Today, Annals of Opertions Research,
Vol. 53, pp. 249–285, 1994
5. Nicol D.M., Johnson, M., Yoshimura, A., Goldsby, M., Performance Modeling of
the IDES Framework, Proc. of the Workshop on Parallel and Distributed Simulation, pp.38–45, Lockenhaus, Austria, 1997.
6. Niewiadomska-Szynkiewicz E., Pooenik P., Bolek P., Malinowski K., Software Environment for Complex Systems Analysis and Simulation, Preprints
IFAC/IFORS/IMACS Symposium ”Large Scale Systems: Theory and Applications”, London, UK, 1995
7. Niewiadomska-Szynkiewicz, E., Software Environment for Simulation of Flood
Control in Multiple-Reservoir Systems, Proc. International Conference ”Advances
in Hydro-Science and Engineering” ICHE2002, Warsaw, Poland, 2002.
8. ns-2 (network simulator). http://www.isi.edu/nsnam/ns/ns-documentation.html.
9. Omnet (network simulator). http://www.hit.bme.hu/phd/vargaa/omnetpp.htm.
10. Szyma˜
nski, B., Liu, Y., Sastry, A., Madnani, K., Real-Time On-Line Network
Simulation, Proc. 5th IEEE International Workshop on Distributed Simulation
and Real-Time Applications DS-RT 2001, pp.22–29, Los Alamitos, CA, 2001.

