Fault-Tolerant Routing in Mesh-Connected
2D Tori
Eunseuk Oh1 , Jong-Seok Kim2 , and Hyeong-Ok Lee3
1

Department of Computer Science
Texas A&M University, College Station, TX 77843-3112
eunseuko@cs.tamu.edu
2
Department of Computer Science
3
Department of Computer Education
Sunchon National University, Sunchon, Chonnam, 540-742, Korea
{rockhee,oklee}@sunchon.ac.kr

Abstract. In this paper, we study natural conditions for 2D tori with a
large number of faulty nodes to remain connected. Under the suggested
connectivity conditions, we develop eﬃcient routing algorithms in 2D tori
with a large number of faulty nodes. As long as a given input torus and
the meshes within the torus satisfy the conditions, the routing algorithm
successfully constructs a fault-free path by using only local information
of the network. Also, our algorithms do not require faulty nodes and
faulty blocks to be a special structure such as convex, rectangle, while
each mesh in a given torus can sustain as many faulty nodes as possible,
provided that non-faulty nodes of the mesh are connected and the mesh
holds the connectivity conditions. Speciﬁcally, for a torus sustaining up
to 22.2% faulty nodes, in linear time, our algorithm constructs a faultfree path of length bounded by six times the shortest path length between
the two nodes.

1

Introduction

Due to rapid progress in hardware technology, designing a distributed parallel
computing system connecting a large number of multiprocessors has become
feasible. In such a system, multiprocessors communicate by message passing. As
the size of the network interconnecting multiprocessors continuously increases,
routing in networks with a large number of faults becomes unavoidable. Let G
be a regular network of degree n. The node-connectivity of G is the minimum
integer k such that removing any k nodes in G results in a disconnected or trivial
graph. It is well-known that the node-connectivity of an n-regular graph is n.
Thus, many fault-tolerant communication algorithms for n-regular graphs allow
to contain up to n − 1 faulty nodes. On the other hand, there has been much
eﬀort to try to allow n-regular networks to have more than n − 1 faulty nodes
[9,10,11].
Recently, a new connectivity measure, local subcube-connectivity has been
introduced to identify conditions where hypercube networks with a very large
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2659, pp. 527–536, 2003.
c Springer-Verlag Berlin Heidelberg 2003

528

E. Oh, J.-S. Kim, and H.-O. Lee

number of faulty nodes still remain connected [3,4]. A network is functional as
long as every pair of non-faulty nodes in a network containing faulty nodes is still
able to communicate. That is, any pair of two non-faulty nodes are connected
by a fault-free path in such a network. Under the conditions that a hypercube
network is still connected, Chen, et al. were able to contain up to 37.5% faulty
nodes in hypercubes. Also, a formal theoretical analysis and experimental simulations have been provided to demonstrate a realistic and practical view of
their connectivity measure [2,3,5]. They mentioned that their new connectivity
measure is applicable to other hierarchical networks. In this paper, we establish
the result for the applicability of their deﬁnitions to networks with a bounded
degree such as tori and mesh.
A 2D torus is one of the most popular graph models used to represent interconnection networks [7]. A 2D torus represents parallel computers in which
processors are connected by a two dimensional grid of communication links with
wraparound connections. Due to a constant degree of tori and meshes, developing routing algorithms that can only tolerate constant faulty nodes would not
be practical. In many real situations, fault-free routing paths in a torus or mesh
can be constructed even though some nodes are disconnected from the network.
Many faulty models on meshes that can contain faulty nodes greater than its
tolerance has been introduced [1,6,12]. Under their faulty models, a fault-free
path can be constructed on the mesh containing a large number of faulty nodes.
However, most faulty models require that faulty blocks form special structures
such as rectangle, convex, or nonconvex (L, T, or + shape), which regard all
non-faulty nodes within these blocks as faulty. Our algorithms do not put such
a restriction on faulty structures, and only assume that non-faulty nodes in the
network make a connected graph and limit the number of faulty nodes on each
mesh’s boundary to be less than half.
For a given torus, our routing algorithm constructs a path, tracing meshes
of similar sizes in the torus. As long as a given input torus and meshes within
the torus satisfy the required conditions, the suggested algorithm successfully
constructs the fault-free path even though the torus contains a large number
of faulty nodes. Also, most of algorithms developed under faulty block models
focused on wormhole routing, whose time complexity is more likely independent
of the distance of the communication path if the message is long enough [8]. On
the other hand, we consider our algorithm under the store-and-forward model,
whose time complexity mostly depends on the distance of the communication
path. Speciﬁcally, for a torus sustaining up to 22.2% faulty nodes, in linear
time, our algorithm can construct a fault-free path of length bounded by six
times the shortest path length between the two nodes. Further, our algorithm
does not require global information about the network, and a fault-free path is
constructed by only using information about directly connected nodes. Most of
our discussions were focused on tori and their connectivity, but our results can
easily be extended to meshes.

Fault-Tolerant Routing in Mesh-Connected 2D Tori

2

529

Preliminaries

A two-dimensional torus T (shortly, 2D torus or n × n torus) is an undirected
graph with n2 nodes whose label is identiﬁed by two coordinates (i, j) and with
2n2 edges. For a node (i, j) in a torus, it has four neighbors (i − 1, j), (i + 1, j),
(i, j−1), and (i, j+1), where the “+” and “-” operations on indices are performed
as modulo arithmetic. The distance between two nodes u = (i1 , j1 ) and v =
(i2 , j2 ) in T is the shortest path length between them deﬁned as
dist(u, v) = min(|i1 − i2 |, n − |i1 − i2 |) + min(|j1 − j2 |, n − |j1 − j2 |).
There are four simple and deterministic routing algorithms that connect the
source node u and the destination node v: (1) the message is routed along the
X dimension and then along the Y dimension, (2) the message is routed along
the X dimension and then along the Y dimension using wraparound, (3) the
message is routed along the X dimension using wraparound and then along
the Y dimension, and (4) the message is routed along the X dimension using
wraparound and then the Y dimension using wraparound. A minimal path is
determined among them. The diameter, the maximum distance between any two
nodes of an n × n torus, is 2 n2 .
2.1

Balanced 4-ary Partitioning Tree

A two-dimensional torus T can be divided into meshes in many diﬀerent ways.
To explain uniformly, we assume that T is divided into meshes of size at most
h2 , where h = 2nα , and α is a natural number. Each node in a 2D mesh is
labeled as (i, j) and 0 ≤ i, j < n. The lower-most West node is labeled as (0,0),
and the upper-most East node is labeled as (n − 1, n − 1). We ﬁrst propose a
labeling scheme to identify meshes in a torus when a torus is divided into meshes
of similar sizes. The coordinates of the lower-most West nodes of the meshes are
obtained by a balanced 4-ary partitioning tree which is deﬁned below.
Deﬁnition 1. A balanced 4-ary partitioning tree is constructed as follows.
1. the root node is labeled as n × n.
2. for each node with a label h1 ×h2 , generate the ﬁrst, second, third, and fourth
children of the node and label them as h11 × h21 , h12 × h21 , h11 × h22 , and
h12 × h22 , respectively, where h11 = h21 , h12 = h21 , h21 = h22 , and
h22 = h22 .
For the balanced 4-ary partitioning tree with depth d, there are 4d leaf nodes.
The depth of the root is 0. Thus, an n × n torus is divided into 4d meshes of
size at most h2 , where h = 2nd . The balanced 4-ary partitioning tree whose
root is labeled as 13 × 13 is shown in Fig. 1. We assume that each node has
pointers to nodes corresponding to neighboring meshes. The actual coordinates
of the lower-most West node of a mesh in a torus can be calculated as follows.
Let β = 2nd .

530

E. Oh, J.-S. Kim, and H.-O. Lee
13X13 (0,0)

(0,0)

6X6

3X3
(0,0)

3X3
(3,0)

3X3
(0,3)

7X6

(6,0)

6X7

(0,6)

7X7

3X3

3X3

4X3

3X3

4X3

3X3

3X3

3X4

3X4

(3,3)

(6,0)

(9,0)

(6,3)

(9,3)

(0,6)

(3,6)

(0,9)

(3,9)

3X3
(6,6)

(6,6)

4X3

3X4

4X4

(9,6)

(6,9)

(9,9)

Fig. 1. Partition of a 13×13 torus by the balanced 4-ary partitioning tree with depth 2

Coordinates for Lower-Most West Nodes of Meshes
1. the lower-most West node of a mesh identiﬁed by the root node is
(0,0).
2. for the lower-most West node (i, j) in a mesh identiﬁed by the node
in a balanced 4-ary partitioning tree at depth d, the lower-most West
nodes of four meshes corresponding to the ﬁrst, second, third, and
fourth children of the node (i, j) are (i, j), (i + β, j), (i, j + β), (i +
β, j + β).
Now, mesh labels in a torus are obtained through its respective coordinates,
[i, j] where a mesh can be viewed as a node in a two dimensional grid. For
any two meshes in a torus divided by the balanced 4-ary partitioning tree, the
number of nodes on two adjoining boundaries are the same.

3

The Local Mesh-Connectivity

After applying the balanced 4-ary partitioning tree with depth d to an n × n
torus, a label [i, j] corresponds to a mesh whose coordinate of the lower-most
West node is (β·i, β·j), where β = 2nd . The size of the mesh is decided according
to the deﬁnition of a balanced 4-ary partitioning tree. The set of meshes obtained
by applying the balanced 4-ary partitioning tree with the depth d is called a dmesh set, and a mesh in the d-mesh-set is called d-mesh. In addition, the distance
between the two d-meshes M1 = [i1 , j1 ] and M2 = [i2 , j2 ] is called d-distance and
deﬁned as
∆(M1 , M2 ) = min(|i1 − i2 |, 2d − |i1 − i2 |) + min(|j1 − j2 |, 2d − |j1 − j2 |).
Deﬁnition 2. The 2D torus T is locally d-mesh-connected if in each d-mesh in
T , the non-faulty nodes in the d-mesh are connected.
For any given two non-faulty nodes u and v in a locally d-mesh-connected
torus, a suﬃcient condition to exist a fault-free path between them is provided
p
below. We denote it as u ∼ v if there is a path p between u and v, and as u → v
if u is directly connected to v.

Fault-Tolerant Routing in Mesh-Connected 2D Tori

531

Theorem 1. If, on any side of a boundary of size h in each d-mesh, the number
of faulty nodes is at most h−1
, then the non-faulty nodes in a locally d-mesh2
connected 2D torus T make a connected graph.
Proof. To prove that the non-faulty nodes in a locally d-mesh-connected 2D
torus make a connected graph, it suﬃces to show that for any two given nodes
u and v in a 2D torus, there is a fault-free path u ∼ v. Since the non-faulty
p
nodes in a d-mesh in T are connected, if u and v is in a d-mesh M , then u ∼ v
where all nodes on p are in M . Suppose the node u is in a d-mesh M and the
node v is in another d-mesh M . Let a neighboring d-mesh of M be M1 . Then,
there are h pairs of adjacent nodes such that one is on the boundary of M and
another is on the boundary of M1 . Since we assume that on any boundary of a
d-mesh, less than half of the nodes are faulty, there must be a path of adjacent
non-faulty nodes b0 → b1 such that b0 is in M and b1 is in M1 . By the deﬁnition
p
of d-mesh connectivity, we have u ∼ b0 , where all nodes on p are in M . Thus,
p
we can construct a fault-free path u ∼ b0 → b1 . We continue this construction
until we have u ∼ v such that v is a non-faulty node on the boundary of M .
Inductively, the fault-free path u ∼ v can be constructed by extending the path
between them going through meshes between M and M . Since non-faulty nodes
p

in M are connected, there is a fault-free path v ∼ v such that all nodes on p
are in M . Therefore, the concatenation of the path u ∼ v and the path between
v ∼ v gives a fault-free path u ∼ v.
Under the above boundary condition, the non-faulty nodes in a locally dmesh-connected 2D torus T make a connected graph, though T may contain a
very large number of faulty nodes. It shows that the local d-mesh connectivity
leads to the global connectivity of the network with a large number of faulty
nodes as long as the boundary condition is satisﬁed. Furthermore, as pointed
out in [3], the local mesh-connectivity can also be detected in a distributed way
by using a local managing program on a processor in each mesh.
Suppose that a d-mesh contains faulty nodes up to less than half of its total
number of nodes. When d is small enough, the number of faulty nodes that can
be contained in a locally d-mesh-connected torus T would be close to half of the
total number of nodes in T . To give an intuition of the number of faulty nodes,
consider a square n × n torus and set d = log nh . Since a d-mesh has size of h2
2
and h = 2nd , a d-mesh may contain up to 4d ( 12 ( 2nd )2 − 1) = n2 − 4d faulty nodes.
According to the suﬃcient condition on the boundary of a mesh, a log n3 -mesh
can contain up to 2 faulty nodes.
Corollary 1. Under the boundary condition, if each d-mesh in a locally d-mesh
connected torus T has at most 2 faulty nodes, then the non-faulty nodes in T
make a connected graph, where d = log n3 .
Corollary 2. Under the boundary condition, a locally d-mesh-connected torus
T is also locally k-mesh-connected for all k < d.

532

E. Oh, J.-S. Kim, and H.-O. Lee

So far, we assume that d is ﬁxed in a locally d-mesh-connected torus and
its non-faulty nodes are connected as long as the number of faulty nodes in any
side of a boundary of d-mesh is less than half of the nodes on the boundary. We
generalize the previous condition to allow a faulty d-mesh(the mesh whose nodes
are all faulty), while the torus remains connected.
Deﬁnition 3. The 2D torus T is locally mesh-connected if each d-mesh, d ≥ 1,
in T is contained in an h-mesh whose non-faulty nodes are connected, h ≤ d.
Let δ be the largest integer such that the locally mesh-connected 2D torus
T is locally δ-mesh-connected. Such a number δ always exists. For example,
δ = 0. In this case, the locally mesh-connected 2D torus itself is locally 0-meshconnected. If the boundary condition is satisﬁed, all non-faulty nodes in T are
connected. The following theorem directly directly from the deﬁnition of δ.
Theorem 2. If, on any side of a boundary of size h in each δ-mesh, the number
of faulty nodes is at most h−1
, then the non-faulty nodes in a locally mesh2
connected 2D torus make a connected graph.

4

Routing in Locally Mesh-Connected Tori

As described in Theorem 1, a path between two given non-faulty nodes in a
locally mesh-connected torus can be constructed using only non-faulty nodes
when all d-mesh satisfy the boundary condition. Before we present routing algorithms in a locally mesh-connected torus, we discuss the worst case to ﬁnd two
non-faulty nodes u and u1 , where u is in a mesh M and u1 is in the adjoining
boundary of a mesh M1 . Without loss of generality, we assume that the size of M
is h1 h2 and the size of M1 is h3 h2 . The worst case would take time O(h1 h2 ). We
will focus more on routing algorithms whose time complexity is linear and the
length of path. An example case that takes roughly half of the size of a d-mesh
is given in Fig. 2.
u1

u

M

M1

Fig. 2. An example for connecting two non-faulty nodes, one is in M and the other is
in M1

Fault-Tolerant Routing in Mesh-Connected 2D Tori

4.1

533

Routing in a Locally d-Mesh-Connected Torus

Assume that a d-mesh M contains the source node u and another d-mesh M
contains the destination node v. An eﬃcient routing algorithm for a locally dmesh-connected torus is given in Fig. 3.

Routing
Input: an n × n torus T and non-faulty nodes u and v in it
Output: a fault-free path P = u ∼ v or return FAIL if T is not locally
d-mesh-connected or it does not satisfy the boundary condition.
{Assume that u is in a d-mesh M and v is in another d-mesh M .}
Phase 1: ﬁnd labels for d-meshes connecting M and M whose d-distance is
∆(M, M ).
Let such d-meshes be M (= M0 ), M1 , . . . , M = (M∆(M,M ) );
Phase 2: ﬁnd a fault-free path from u in M to a non-faulty node in M ;
2.2 initialize the path P = u, and let w = u;
2.3 for k = 0 to ∆(M, M ) − 1 do
ﬁnd a fault-free path b1 → b2 such that b1 is in Mk and b2 is in Mk+1 ;
p
extend the path P to w ∼ b1 → b2 , where all nodes of p are in Mk ;
let w = b2 ;
Phase 3: ﬁnd a fault-free path from a non-faulty node to v in M ;
{at this point, w is on a boundary of M . }
p

extend the path P to w ∼ v, where all nodes of p are in M ;
if, at any point, the algorithm can not proceed, return FAIL;

Fig. 3. Routing in a locally d-mesh-connected torus

Theorem 3. For two given non-faulty nodes u in a d-mesh M and v in another d-mesh M in a locally d-mesh-connected torus, the algorithm Routing
constructs a fault-free path u ∼ v in time O(hn) if all d-meshes satisfy the
boundary condition, where h = 2nd .
Proof. The construction of a fault-free path P starts from the node u and
traverses d-meshes detected in Phase 1. When u is in M and v is in M , dmeshes connecting M and M whose length is ∆(M, M ) can be found in time
2 · 2d = O( nh ), which is chosen to have the minimum number of d-meshes among
four possible routes from the label of M to the label of M with or without
wraparound. In the kth execution of the loop in Phase 2, a non-faulty node u
in Mk is connected to a non-faulty node b2 in Mk+1 going through b1 such that
b1 → b2 , where b1 is on a boundary of Mk and b2 is on a boundary of Mk+1 .
Finding the path b1 → b2 takes time O(h). Since a non-faulty node u can be
connected to these adjacent nodes in time O(h2 ), we can ﬁnd a fault-free path
u ∼ b2 in time O(h2 ). After ∆(M, M ) executions of the loop in Phase 2, the

534

E. Oh, J.-S. Kim, and H.-O. Lee

node w is in a boundary of M . Since the non-faulty nodes in M make a connected graph, in time O(h2 ), we can ﬁnd a fault-free path w ∼ v, and can extend
the path P to w ∼ v. Therefore, if the n × n torus is locally d-mesh-connected
and all d-meshes satisfy the boundary condition, then the algorithm Routing
constructs a fault-free path u ∼ v. The running time of the algorithm is bounded
by O( nh + ∆(M, M )h2 ) = O(hn), since ∆(M, M ) = O( nh ).
In the case where h is a small constant, for example h ≤ 4, the algorithm
Routing runs in linear time. As shown in Fig. 2, some structures of a d-mesh take
time O(h2 ) to search non-faulty nodes. Thus, our time complexity is reasonably
tight even for large h. The length of the path P constructed by Routing is
bounded by (∆(M, M ) + 1)h2 − 1 because the length of P is increased by at
most h2 in each execution of the loop in Phase 2 and the length of the path
constructed in Phase 3 is bound by h2 − 1. Again, if h is small, the length of the
path P becomes O(n). Speciﬁcally, for a torus divided into 3 × 3 meshes by a
4-ary balanced partitioning tree, a locally d-mesh-connected torus may contain
up to 29 n2 faulty nodes, which is 22.2% of the total number of nodes in a torus.
The number of nodes that can be contained in a locally mesh-connected torus
would increase as the size of a d-mesh increases at the cost of the path length.
For a locally d-mesh-connected torus consisting of 3 × 3 meshes, we have the
following corollary.
Corollary 3. For a locally d-mesh-connected torus consisting of log n3 -meshes,
in linear time, the algorithm Routing constructs a fault-free path of length
bounded by 6∆(M, M ).
4.2

Routing in a Locally Mesh-Connected Torus

Similarly a fault-free path u ∼ v in a locally mesh-connected torus T can be
constructed when all δ-meshes satisfy the boundary condition. A routing algorithm for T is given in Fig. 4. The largest integer δ such that T is locally δ-mesh
connected is not given in our algorithm. If the value δ is known, a path u ∼ v
can be constructed by the algorithm Routing.
Theorem 4. If the input torus T of the algorithm δ-Routing is locally meshconnected, then for two non-faulty nodes u and v, and δ such that T is locally
δ-mesh-connected, the algorithm δ-Routing constructs a fault-free path u ∼ v
in time O(hn), provided that all δ-meshes satisfy the boundary condition, where
h = 2nδ .
Proof. Suppose a path P = u ∼ w, w = v is constructed inductively. By the
deﬁnition of the value δ, we must have an integer k ≥ δ such that w is in a k-mesh
M whose non-faulty nodes are connected, and a fault-free path b1 → b2 can be
constructed between b1 in a boundary of M and b2 in a boundary of k-mesh M1 .
However, since we do not know the value δ, we will try all possible values from
k = log n2 to ﬁnd a fault-free path b1 → b2 . In the worst case, k = δ, we have
p
w ∼ b1 → b2 , where all nodes of p are in a δ-mesh. Using the balanced 4-ary

Fault-Tolerant Routing in Mesh-Connected 2D Tori

535

δ-Routing
Input: an n × n torus T and non-faulty nodes u and v in T
Output: a fault-free path P = u ∼ v or return FAIL if T is not locally
mesh-connected or it does not satisfy the boundary condition.
1. let w = u;
2. initialize the path P = w;
3. while w = v do
k = log n2 ; done = false;
while done=false and w is not in M do
3.1
ﬁnd a k-mesh M0 with w and its neighboring k-mesh M1 such that
∆(M1 , M ) = ∆(M0 , M ) − 1, where M is a k-mesh with v;
p
3.2
if there is w ∼ b1 → b2 such that b1 is in M0 and b2 is in M1 ;
then
p
extend the path P to the path w ∼ b1 → b2 , where all nodes of
p are in M0 ; let w = b2 ;
done = true;
else
k = k − 1;
3.3 if w is in M
while there is no fault-free unused path w ∼ v do
k = k − 1;
let M be a k-mesh with v;
p

extend the path P to w ∼ v,where all nodes of p are in M ;
return P = u ∼ v;
if, at any point, the algorithm can not proceed, return FAIL;
Fig. 4. Routing in a locally mesh-connected torus

partitioning tree, Step 3.1 of the algorithm δ-Routing can be done in a constant
time after identifying a k-mesh M0 with u, which takes O(log n2 ). Since we need
to check whether non-faulty nodes in a k-mesh are connected and it satisﬁes
the boundary condition for each value k, Step 3.2 of the algorithm δ-Routing
takes O(22 ) + O(42 ) + · · · + O(h2 ) = O(h2 ). Thus, the total time of Step 3.1
and Step 3.2 is bounded by log n2 + h2 ∆(M, M ) = O(hn), where h = 2nδ . If w
is in a k-mesh M , then nodes w and v are in the same δ-mesh. We try to ﬁnd
a fault-free path w ∼ v in the smallest size mesh(thus, the largest k) from the
value k found in Step 3.2. Thus, a fault-free path w ∼ v can be constructed in
time O(h2 ). It shows that in time O(hn), the algorithm δ-Routing constructs a
fault-free path u ∼ v in the locally mesh-connected torus if all δ-meshes satisfy
the boundary condition.
In general, the running time of the algorithm δ-Routing would be much
better than O(hn). For example, if a torus T contains relatively fewer faulty
nodes so that most small meshes in T satisfy the boundary condition and nonfaulty nodes in them are connected, then the largest value k can be found in
the earlier iteration of Step 3.2. Thus, the path P can be extended in meshes
smaller than h2 in most cases.

536

5

E. Oh, J.-S. Kim, and H.-O. Lee

Conclusion

We have studied the connectivity measure for a 2D torus with a large number of
faulty nodes to remain connected, and established the result for tori. Our study
shows that the local subgraph-connectivity suggested in [3,4] also successfully
extends to networks with a bounded degree. The algorithm developed for tori
meeting these conditions is practical and eﬃcient in most cases. Further, our
algorithm does not require global information about the network, and a fault-free
path is constructed by using only information about directly connected nodes. In
this paper, we only consider the routing problem. Other communication problems
in tori such as broadcasting and gossiping would be interesting to study under
this new connectivity measure. In addition, our result can easily be extended to
meshes. Without considering wraparound connections, a 2D torus has the same
structure as a 2D mesh. Thus, our algorithm can be applied to a 2D mesh with
a slight modiﬁcation.

References
1. S. Chalasani and R.V. Boppana, “Communication in Multicomputers with Nonconvex faults,” Proc. Int’l Symp. Computer Architecture, pp. 268–277, 1990.
2. J. Chen, I. A. Kanj, and G. Wang, “Hypercube Network Fault Tolerance: A Probabilistic Approach,” Proc. Int’l Conf. Parallel Processing, pp. 65–72, 2002.
3. J. Chen, G. Wang, and S. Chen, “Locally Subcube-Connected Hypercube Networks: Theoretical Analysis and Experimental Results,” IEEE Trans. Computers,
vol. 51, no. 5, pp. 530–540, 2002.
4. J. Chen, G. Wang, and S. Chen, “Routing in Hypercube Networks with A Constant
Fraction of Faulty Nodes,” Journal of Interconnection Networks, vol. 2, pp. 283–
294, 2001.
5. J. Chen, T. Wang, and E. Oh, “Adaptive Routing: Centralized versus Distributed,”
Technical Report, Texas A&M University, 2002.
6. A.A. Chien and J.H. Kim, “Planar-Adaptive Routing: Low-Cost Adaptive Networks for Multiprocessors,” Proc. Int’l Symp. Computer Architecture, pp. 268–277,
1990.
7. W.J. Dally and C.L. Seitz, “The torus Routing Chip,” Distributed Computing, pp.
187–196, 1986.
8. W.J. Dally and C.L. Seitz, “Deadlock-free message routing in multiprocessor interconnection network,” IEEE Trans Comput. vol. 36, no. 5, pp. 547–553, 1987.
9. Q.-P. Gu and S. Peng, “k-Pairwise Cluster Fault Tolerant Routing in Hypercubes,”
IEEE Trans. Computers, vol. 46, pp. 1042–1049, 1997.
10. Q.-P. Gu and S. Peng, “Unicast in Hypercubes with Large Number of Faulty
Nodes,” IEEE Trans. Parallel and Distributed Systems, vol. 10, pp. 946–975, 1999.
11. S. Latiﬁ, M. Hedge, and M. Naraghi-Pour, “Conditional Connectivity Measures
for Large Multiprocessor Systems,” IEEE Trans. Computers, vol. 43, pp. 218–222,
1994.
12. C.C. Su and K.G. Shin, “Adaptive Fault-Tolerant Deadlock-Free Routing in
Meshes and Hypercubes,” IEEE Trans. Computers, vol. 45, no. 6, pp. 666–683,
1996.

