A Parallel Prime Edge-Length Crystallographic
FFT
Jaime Seguel and Daniel Burbano
University of Puerto Rico at Mayaguez, Mayaguez PR 00680, USA
(Jaime.Seguel)(dburbano)@ece.uprm.edu

Abstract. Although other methods are available, computational X-ray
crystallography is still the most accurate way of determining the atomic
structure of crystals. For large scale problems such as protein or virus
structure determination, a huge amount of three-dimensional discrete
Fourier transforms (DFT) conform the core computation in these methods. Despite the fact that highly eﬃcient fast Fourier transform (FFT)
implementations are available, signiﬁcant improvements can be obtained
by using FFT variants tailored to crystal structure calculations. These
variants, or crystallographic FFTs, use a-priori knowledge of the specimen’s crystal symmetries to lower the operation count and storage requirement of a usual, asymmetric FFT. The design and implementation
of crystallographic FFTs brings about several problems of its own. And,
as is usually the case with prime length FFTs, prime edge-length crystallographic FFTs pose the hardest challenges among them. This paper
develops and tests a parallel multidimensional crystallographic FFT of
prime edge-length, whose performance is signiﬁcantly better than that
of the usual FFT.

1

Introduction

Let Z d /N = Z/N × · · · × Z/N , be the Cartesian product of d copies of Z/N , the
set of integers modulo N . The d-dimensional discrete Fourier transform (DFT)
of edge length N of a real- or complex-valued mapping f deﬁned in Z d /N is the
linear operator
1
fˆ(k) = √
N

k·l
f (l)wN
,

k ∈ Z d /N ;

(1)

l∈Z d /N

√
where wN = exp(−2πi/N ), · denotes the dot product, and i = −1. By endowing Z d /N with an order (for example, the lexicographic order), (1) can be
thought as the product of a N d × N d complex matrix by a vector. If d = 1,
we denote this matrix FN . Thus, (1) is computed in O(N 2d ) time. For d = 1, a
fast Fourier transform [3] (FFT) computes (1) in O(N log N ) operations. For
d ≥ 2, the usual FFT method consists of applying N d−1 one-dimensional FFTs
along each of the d dimensions. Thus, (1) is computed in O(N d log N ) time.
This complexity bound cannot be improved for general DFT computations. For
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2659, pp. 602–611, 2003.
c Springer-Verlag Berlin Heidelberg 2003

A Parallel Prime Edge-Length Crystallographic FFT

603

problems whose data is endowed with redundancies, such as x-ray crystal diﬀraction intensity data, attempts have been made to reduce the FFT run time. A
starting point in these attempts is to eliminate all redundancies induced by the
presence of a crystallographic symmetry both, from the input and output data
sets. The resulting input and output data sets are usually called fundamental
data sets. This data reduction is indeed a lossless compression, since each data
set can be reconstructed from the corresponding fundamental data set by applying symmetry relations. In order to compute (1) within fundamental data
sets, the DFT equations have to be modiﬁed. This modiﬁcation, which consists
mainly in factoring repeated input in the DFT sum (1) and eliminating redundant outputs, reduces the operation count of the DFT. However, the complexity
order of computing with the reduced system of DFT equations remains within
O(N 2d ), and therefore, DFT reductions do not produce a fast Fourier transform
method. The design of fast algorithms for computing the reduced DFT equations, collectively known as crystallographic FFTs, poses several mathematical
and algorithmic challenges, which are summarized is Sect. 2. These challenges,
most of them still open problems, are most probably the main reason behind
the rather slow emergence of crystallographic FFT methods in the scientiﬁc
computing community. A crystallographic FFT for composite edge-lengths was
ﬁrst introduced by Ten Eyck in [7]. This method is applicable to a few crystal
symmetries. A universal crystallographic FFT of composite edge-length, this is
a crystallographic FFT for all crystal symmetries, is proposed in [6]. In [6] it
is also shown that composite edge-length crystallographic FFTs are computed
in O(M log M ) time, where M is the size of the subset of non-redundant input
data. A prime edge-length crystallographic FFT method was ﬁrst introduced by
Auslander et. al. in [1]. Although this method is universal, its time complexity
is on average, higher than that of the usual FFT [5]. A method whose time complexity varies with the symmetry from an optimal O(M log M ) to a worst case
bound smaller but close to Auslander’s bound, is proposed in [5]. In the same
article, parallel computing is suggested as a way of speeding up the execution
time of problems that yield worst case complexity bounds. In this paper we explore such alternative by designing and testing a parallel version of the prime
edge-length crystallographic FFT introduced in [5]. Our preliminary computer
results show the validity of this approach.
This article is organized as follows: in Sect. 2 we review the main concepts
and issues related to crystallographic FFT design. Section 3 provides a detailed
description of the parallel crystallographic algorithm, and Sect. 4 summarizes
the results of our computer experiments.

2

Background

For the rest of this paper, we assume that N is prime. A matrix or vector is
said to be over Z/N if all its entries are in Z/N . All operations with matrices
and vectors over Z/N are performed in modulo N . A square matrix over Z/N
is nonsingular, if its determinant is diﬀerent from zero in modulo N .

604

J. Seguel and D. Burbano

The atomic structure of a crystal can be determined from X-ray diﬀraction
intensity data through a intensive computer procedure. Measured intensities provide only the magnitudes |E| of the normalized structure factors E = |E| exp(iφ)
of the crystal specimen. The elucidation of the crystal structure requires a knowledge of the phase φ, which is unobtainable from any physical experiment. The
problem of reconstructing phases from magnitudes, or phase problem, is solved
by evaluating numerous trial structures. Each trial structure is reﬁned through
a sequence of steps which involve three-dimensional discrete Fourier transform
(DFT) calculations. For instance, one of the most successful methods, the shakeand-bake method [8], [9], alternates optimization in Fourier space with ﬁltering
in real space, performing thus, a forward and a backward three-dimensional DFT
at each reﬁnement step. Since crystal structures consist of repeating symmetric unit cells, their intensity data is highly redundant. In mathematical terms,
the observed intensities are represented by a real mapping f mapping deﬁned
on Z d /N , and redundancies described by the action of S, a d × d nonsingular
matrix over Z/N satisfying
f (l) = f (Sl)

for all l ∈ Z d /N.

(2)

Matrix S is called a symmetry and f is said to be S-symmetric. For example,
the mapping f deﬁned in Z 2 /5 by the two-dimensional data array [f (k, l)](k,l)


8 2.2 5.9 5.9 2.2
 2.2 4 1.2 6 4 


2

f (Z /5) = 
(3)
 5.9 6 7.7 7.7 1.2 
 5.9 1.2 7.7 7.7 6 
2.2 4 6 1.2 4
is S-symmetric with
S=

01
0 1
=
−1 0
4 0

modulo 5.

(4)

Clearly, an S-symmetric mapping f satisﬁes f (S j a) = f (a) for all j. Thus, the
restriction of f to the subset of Z d /N
OS (a) = {S j a : j integer }

(5)

yields a constant function. The subset OS (a) is called S-orbit of a. It follows that
an S-symmetric function is completely determined by its values on a fundamental
set FS formed by one and only one element from each S-orbit. For example, the
S-orbits and their images under f for symmetry (3) are
OS (0, 0) = {(0, 0)} , f (OS (0, 0)) = {8}
OS (0, 1) = {(0, 1), (1, 0), (0, 4), (4, 0)} , f (OS (0, 1)) = {2.2}
OS (0, 2) = {(0, 2), (2, 0), (0, 3), (3, 0)} , f (OS (0, 2)) = {5.9}
OS (1, 1) = {(1, 1), (1, 4), (4, 4), (4, 1)} , f (OS (1, 1)) = {4}

(6)
(7)
(8)
(9)

A Parallel Prime Edge-Length Crystallographic FFT

OS (1, 2) = {(1, 2), (2, 4), (4, 3), (3, 1)} , f (OS (1, 2)) = {1.2}
OS (1, 3) = {(1, 3), (3, 4), (4, 2), (2, 1)} , f (OS (1, 3)) = {6}
OS (2, 2) = {(2, 2), (2, 3), (3, 3), (3, 2)} , f (OS (2, 2)) = {7.7}.

605

(10)
(11)
(12)

A fundamental indexing set for this symmetry is then,
FS = {(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (1, 3), (2, 2)}.

(13)

This choice of fundamental indexing set is not unique. It is easy to show that if f
is S-symmetric, then fˆ is S∗ -symmetric, where S∗ is the transpose of the inverse
of S. Therefore, fˆ is also determined by its values in a fundamental set FS∗ . We
call f (FS ) and fˆ (FS∗ ) fundamental input data and fundamental output data,
respectively. In example (3) a fundamental input data set is
f (FS ) = {8, 2.2, 5.9, 4, 1.2, 6, 7.7};

(14)

while, as a straight computation shows,
fˆ(FS∗ ) = {116, −11.1602, 13.6602, 6.1133, −13, 11, 14.3867}

(15)

is a fundamental output data set. The reduction of the usual N d -point input data
set to a subset of fundamental input data induces a modiﬁcation on Eq. (1). In
fact, since f (S j a) = f (a) for all j, the input datum f (a) can be factored out of
the terms of fˆ(k) that are indexed in OS (a) in (1). This is,


k·l
f (l)wN
= f (a) 
l∈OS (a)

k·l 
= f (a)KN (k, a).
wN

(16)

l∈OS (a)

k·l
The expression KN (k, a) =
l∈OS (a) wN is the so-called symmetrized DFT
kernel. The linear transformation

fˆ(k) =

KN (k, a)f (a),

k ∈ FS∗ ,

(17)

a∈FS

is called symmetrized DFT. It can be shown that of FS and FS∗ have the same
size M . Thus, Eq. (17) computes the symmetric DFT in O(M 2 ) time. For instance, in example (3), the symmetrized DFT involves approximately 72 = 49
complex multiplications, and 7 · 6 = 42 complex additions. This is certainly less
than the approximately 252 = 625 complex multiplications and 25 · 24 = 600
complex additions required by the usual DFT. However, since the size of the
fundamental set is a constant fraction of N d , in terms of asymptotic growth,
the mere reduction of redundant data does not yield a superior FFT method.
Auslander et. al. [1] propose an algorithm for computing the core of (17) with
fast cyclic convolutions. Fast cyclic convolutions are O(Q log Q) methods for
computing a matrix by vector product Y = HX, where H is a Q × Q circulant.
The use of fast cyclic convolutions is expected to lower the method’s asymptotic

606

J. Seguel and D. Burbano

complexity growth. However, as pointed out in [5], even for some very common
crystallographic symmetries Auslander’s method involves such a large number
of cyclic convolutions that its complexity is often higher than the FFT complexity boundary. In what follows, we examine basic ideas underlying the use of
fast cyclic convolutions in crystallographic FFT computations. As in [1] and [5],
we declare a Q × Q matrix H to be circulant if it satisﬁes H(k, l) = H(k , l )
whenever k + l = k + l modulo Q. It is easy to show that if H is circulant,
∆(H) = FQ HFQ

(18)

is a Q × Q diagonal matrix. Thus, Y = HX is computed in O(Q log Q) time
through
Y = FQ−1 ∆(H)FQ−1 X.

(19)

Equation (19) is often referred as fast cyclic convolution algorithm. Fast cyclic
convolutions are also used for computing Y = T X. where T is a P × R matrix
that satisﬁes T (k, l) = T (k , l ) whenever k + l = k + l . We call such matrices,
pre-Hankel. A pre-Hankel can always be embedded in a circulant H. This means
that T occupies the upper leftmost corner of H. In such a case, H is a Q × Q
with Q ≥ P + R − 1 [5]. Auslander et. al. turn the core computations in (17)
into pre-Hankel blocks. Central to this aim is the fact that for each n = 0 in
Z/N , there is an integer 0 ≤ j ≤ N − 2, such that n = g j . Auslander et. al. [1]
use this property for partitioning both FS and FS∗ into subsets of the form
Og (a) = {g j a : j = 0, ..., N − 2}.

(20)

Each pair formed by one such subset in FS∗ and one in FS corresponds to a preHankel block in (17). Since Og (a) contains at most N − 1 elements, Auslander’s
crystallographic FFT involves Λ = O (M/(N − 1))2 cyclic convolutions. But
since M is O(N 3 ), Λ = O(N 4 ), which is higher than the usual FFT. A way
around this problem is suggested in [5]. The main idea in [5] is using orbit
segments generated by a d × d matrix C over Z/N , instead of (20). In [5], a
signiﬁcant reduction in the number of cyclic convolutions is shown, including
reductions from Λ = O(N 4 ) in Auslander’s method to Λ = 1. In these cases,
the proposed crystallographic FFT achieves an optimal lower time complexity
of O(M log M ). Unfortunately, such optimal reduction is not always achievable,
since, Λ is bounded below by a constant that depends on the crystal symmetry.
In [5], a method that parallelizes most of the cyclic convolution computations,
is outlined. In the next section, we review the main ideas behind this method
and provide a detailed description of its parallel version, which we call prime
crystallographic FFT, (PCFFT). Our experiments conﬁrm the potential of the
PCFFT method for overcoming the execution time limit imposed by the lower
bound of Λ.

A Parallel Prime Edge-Length Crystallographic FFT

3

607

Parallel Prime Edge-Length Crystallographic FFT
(PCFFT)

The crystallographic FFT proposed in [5] is derived with the help of a d × d
matrix over Z/N , which commutes with the symmetry S. This matrix is precomputed through an exhaustive, direct search, which is out of the scope of this
article. We recall, however, that as shown in [5], the action of C partitions FS
into subsets of the form
{C j b : 0 ≤ j ≤ Lb − 1}.

(21)

Here, b ranges over some IS ⊂ FS , and Lb is the number of elements in (21).
Similarly, FS∗ is partitioned into subsets generated by the action of C t , the
transpose of C, on a subset IS∗ ⊂ FS∗ . For each pair (a, b) in IS∗ × IS , and k,
l, k , and l nonnegative integers such that k + l = k + l ,
k

l

KN (C t a, (C) b) = KN (C t
= KP (C

k+l

a, b)

t k +l

= KN (C

tk

a, b)

a, C l b);
l

showing that the block W(a,b) whose entries are W(a,b) (k, l) = KN (C k a, C t b),
0 ≤ k < La , and 0 ≤ j < Lb ; is pre-Hankel. The core computations in (17) are
then expressed as
Y = W(a,b) (a,b) [f (FS )] .
(22)
These computations include neither the input datum f (0) nor the output
datum fˆ(0). Computations with these data conform the so-called border computations. In order to turn core computations into cyclic convolutions, each W(a,b)
is embedded into a circulant. Following [5], we propose a common size Q × Q for
these circulant. Thus. Q ≥ 2L − 1, where
L = max{La : a ∈ IS∗ } = max{Lb : b ∈ IS }.

(23)

Since the choice of Q is also guided by the eﬃciency of the Q-point FFT, it is
reasonable to assume that 2L − 1 ≤ Q ≤ 2 log2 (2L−1) , where x is the smallest
integer that is greater than or equal to x. Let H(a,b) be the Q × Q circulant
in which W(a,b) is embedded. Then, the core computations are represented as
U = HV where
H = H(a,b) (a,b)
(24)
is a block matrix. The input vector V is composed of Q-point vector segments
V b , each consisting of the Lb values of f (C j b), 0 ≤ j < Lb ; followed by Q − Lb
zeros. Vector U , in turn, is composed by Q-point segments denoted U a , a ∈ IS∗ ,
that result from
Ua =

FQ−1 ∆ H(a,b) FQ−1 V b

H(a,b) V b =
b∈IS∗

b∈IS∗

(25)

608

J. Seguel and D. Burbano





= FQ−1 

∆ H(a,b) FQ−1 V b  .

(26)

b∈IS∗

Parallelism is readily seen in (26). We assume that P processors are available.
For simplicity, P is assumed to be a power of two that divides Λ. We denote
the ratio by ρ = Λ/P . We decompose V in P groups of size ρQ and denote the
set of indices of the i-th group by Pi . Thus, processor i receives the collection
of input vector segments Vb , with b ∈ Pi . A precomputed array of size ΛQ
containing the diagonal entries of ∆(H(a,b) ), is stored in processor i, as well.
This array is denoted Db . For a Q-point vector Y , we deﬁne Db Y as the
Hadamard product of the vector formed by concatenating Λ copies of Y and
Db . Using these conventions, we translate formula (26) into the next parallel
crystallographic FFT (PCFFT) method. The ﬁrst steps are:
Step 1. For each i = 0 to P − 1, processor i computes Ya = FQ−1 Va , for each
a ∈ Pi .
Step 2. For each i = 0 to P − 1, processor i computes Za = Da Ya , for each
a ∈ Pi .
Step 3. For each i = 0 to P − 1, processor i computes Xi = a∈Pi Za .
Steps 1 to 3 require no interprocessor communication. However, in order to
complete the sum in (26), all ΛQ-point data vectors Xi , o ≤ i ≤ P − 1; must
be added together. Interprocessor communications and vector additions overlap
while computing this sum. Our communication topology is a hypercube. At each
step, a diﬀerent set consisting of all the parallel edges of the hypercube is selected.
At each step, each pair of processors linked by by a hypercube edge, exchange
data. There will be log P sets of parallel edges. Thus, for each 0 ≤ j ≤ log P − 1,
we denote by Ej one such set of parallel hypercube edges.
Step 4. For each j = 0, ..., log P − 1, for each pair (i, l) ∈ Ej , processor i sends
the upper segment of Xi to processor l, and processor l sends the lower segment
of Xl , to processor i. Then, processor i adds the lower segment of Xl to the lower
segment of Xi , and stores the result a new, half size vector Xi ; while processor
l adds the upper segment of Xi with the upper segment of Xl , and stores the
result in a new, half size vector Xl .
At the end of step 4, processor i holds in Xi , a ρQ-point segment of the sum
in (26). The core computation is completed by performing
(i)
Step 5. For each i = 0 to P − 1, processor i computes Ua = FQ−1 Xa , for each
a ∈ Pi .
The addition of datum f (0), which is part of the border computation, is performed as follows
la
Step 6. For each i = 0 to P −1, processor i computes fˆ(OM
(a) = √1N [f (0)]la +
U ∗a , for each a ∈ Pi . Here U ∗a is the column vector formed by the La ﬁrst entries
of the vector U a computed in step 5.

A Parallel Prime Edge-Length Crystallographic FFT

609

Finally, the computation of fˆ(0) is not worth parallelizing. We simply perform
Step 7. fˆ(0) =

√1
N

b∈IS∗

f (b)|OS (b)|. Here |OS (b)| is the size of OS (b).

The contribution to the time complexity of the PCFFT of steps 6 and 7
is negligible. Steps 1 and 5 are performed in O(ρQ log Q) time. Steps 2 and 3
are performed in O(ρΛQ) time. Step 4 is performed in log P passes. The total
number of data-points transmitted in parallel is ΛQ, and a similar number of
parallel additions are performed. Thus, this step is O(ΛQ).

4

Computer Experiments

Following [5], we consider an S-symmetric input array whose redundancies are
described by the symmetry


001
S =  0 1 0.
(27)
−1 0 0
We choose three-dimensional data arrays of several prime edge-lengths, and compute the the corresponding parameters Q and Λ. The results are shown in Table 1. We kept Q = 2L − 1 in all our computer runs. We implemented our
algorithm in C/MPI and run it on a commodity cluster conformed by eight 650
MHz Pentium III dual processors, interconnected by a 16-port switch. The cluster runs under Linux/OSCAR. The one-dimensional, Q-point FFTs in steps 1
and 5 of the PCFFT are computed with the 1-D FFTW [4] package.
Table 2 compares the execution times in seconds of the 3-D FFTW [4] and our
parallel crystallographic FFT. We also computed the speed up ratios between
the 3-D FFTW and the PCFFT. In doing this we had adopted the classical speed
up deﬁnition as the ratio between the execution times of the parallel method and
the best serial algorithm, for the same problem size. The less classical but more
common speed-up deﬁnition, which is the ratio between the execution times of
the parallel method in P processors and the parallel method in one processor,
is meaningless in our case, since the PCFFT in one processor is on average,
far less eﬃcient than the 3-D FFTW. We also compared the PCFFT run times
with those of the parallel MPI-FFTW [4]. It turns out, however, that due to
Table 1. PCFFT parameters for diﬀerent problem sizes
Prime Edge Problem Size Λ
199
223
239
263
271
311

7880599
11089576
13651919
18191447
19902511
30080231

200
224
240
264
272
312

Q
19799
24863
28599
34583
36719
48359

610

J. Seguel and D. Burbano
Table 2. 3-D FFTW vs. PCFFT
Problem Size 3-D FFTW time PCFFT time Speed up
7880599
11089576
13651919
18191447
19902511
30080231

19.887
52.428
61.019
254.969
269.612
619.351

3.018
3.572
5.184
10.336
5.803
77.259

6.59
14.68
11.77
24.67
46.46
8.02

Table 3. Performance of the Hypercube Reduce-Scatter vs. MPI Reduce-Scatter routine for computing step 4. Times are measured in seconds
Problem Size Hypercube R-S MPI R-S
7880599
11089576
13651919
18191447
19902511
30080231

.430
.563
.67
1.142
.836
45.496

.972
1.121
1.404
1.735
1.837
54.512

the load unbalancing induced by the irregularity of the problem, and above all,
the large data array transpositions and communications that were required, the
MPI-FFTW performed very poorly in our system. In fact, in most runs, the MPIFFTW took longer than the 3-D FFTW in our cluster. We could not compare
the PCFFT with a parallel symmetrized FFT since, to our knowledge, no other
parallel prime edge-length crystallographic FFT is currently available.
It is worth remarking that in the usual, asymmetric multidimensional FFT no
overlaps between communications and computations are possible. This overlapping is, thus, an additional attractive computational feature of the PCFFT. As a
way of assessing the impact of a careful exploitation of this feature in the overall
PCFFT performance, we compare the performance of two implementations of
step 4 of the PCFFT. The ﬁrst uses an MPI Reduce-Scatter function, while the
second, a communication/addition method tailor made for the problem. Results
are reported in Table 3. The tailor made routine, which we call hypercube method,
has been crafted to maximize overlaps between communications and computations. The authors are still researching on further improvements on this step of
the PCFFT which is crucial for the scaling of the method to massive distributed
systems
Acknowledgments. This work was partially supported by NIH/NIGMS grant
No. S06GM08103 and the NSF PRECISE project of the University of Puerto
Rico at Mayag¨
uez

A Parallel Prime Edge-Length Crystallographic FFT

611

References
1. L. Auslander, and M. Shenefelt, Fourier Transforms that Respect Crystallographic
Symmetries, IBM J. Res. and Dev., 31, pp. 213–223, 1987.
2. M. An, J.W. Cooley, and R. Tolimeri, Factorization Methods for Crystallographic
Fourier Transforms, Advances in Appl. Math. 11, pp. 358–371, 1990.
3. J. Cooley, and J. Tukey, An Algorithm for the Machine Calculation of Complex
Fourier Series, Math. Comp., 19, pp. 297–301, 1965.
4. M. Frigo, S.G. Johnson, An adaptive software architecture for the FFT ICASSP
Conference Proceedings, 3 (1998), pp 1381–1384.
5. J. Seguel, D. Bollman, E. Orozco, A New Prime Edge-length Crystallographic FFT,
ELSEVIER Lecture Notes in Computer Science, Vol. 2330, pp. 548–557,2002.
6. J. Seguel, A Uniﬁed Treatment of Compact Symmetric FFT Code Generation, IEEE
Transactions on Signal Processing, Vol 50, No. 11, pp. 2789–2797, 2002.
7. L.F. Ten Eyck, Crystallographic Fast Fourier Transforms, ACTA Crystallogr. A,
vol. 29, pp. 183–191, 1973.
8. C.M. Weeks, G.T. DeTitta, H.A. Hauptman, H.A Thuman, R. Miller, Structure
Solution by Minimal Function Phase Reﬁnement and Fourier Filtering: II Implementation and Applications, Acta Crystallogr. A50, pp. 210–220, 1994.
9. C.M. Weeks, R. Miller Optimizing Shake-and-Bake for Proteins, Acta Crystallogr.
D55, pp 492–500, 1999.

