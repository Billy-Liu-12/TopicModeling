Computer Algebra for Fingerprint Matching
Stefano Bistarelli1,2 , Giandomenico Boﬃ1 , and Fabio Rossi3
1

3

Universit`
a “G. d’Annunzio”, Dipartimento di Scienze,
Viale Pindaro 42, 65127 Pescara, Italy
bista@sci.unich.it, gboffi@unich.it
2
CNR, Istituto di Informatica e Telematica,
Via G. Moruzzi 1, 56124 Pisa, Italy
Stefano.Bistarelli@iit.cnr.it
Universit`
a di Trieste, Dipartimento di Scienze Matematiche
Via A. Valerio 12/1, 34127 Trieste, Italy
rossif@univ.trieste.it

Abstract. We show in this paper how some algebraic methods can
be used for ﬁngerprint matching. The described technique is able
to compute the score of a match also when the template and test
ﬁngerprints have been not correctly acquired. In particular, the match
is independent of translations, rotations and scaling transformations
of the template. The technique is also able to compute a match score
when part of the ﬁngerprint image is incorrect or missed. The algorithm
is being implemented in CoCoA, a computer algebra system for doing
computations in Commutative Algebra.
Keywords: Fingerprint matching, point pattern matching, zerodimensional ideals, Gr¨
obner basis, non-linear polynomial systems, Sturm
sequences, aﬃne transformations.

1

Introduction

Biometrics deals with automated methods of identifying a person or verifying
the identity of a person based on physiological or behavioral characteristics [16].
Examples of physiological characteristics include hand or ﬁnger images, facial
or vocal characteristics. Behavioral characteristics are traits that are learned or
acquired. Dynamic signature veriﬁcation is related to a behavioral characteristic.
Biometric technologies are becoming the foundation of an extensive array
of highly secure identiﬁcation and personal veriﬁcation solutions. As the level
of security breaches and transaction fraud increases, the need for highly secure identiﬁcation and personal veriﬁcation technologies is becoming apparent.
Biometrics-based solutions are able to provide for conﬁdential ﬁnancial transactions and personal data privacy.
Biometric authentication requires comparing a registered or enrolled biometric sample (biometric template or identiﬁer) against a newly captured biometric
The hospitality of the Dipartimento di Scienze dell’Universit`
a “G. d’Annunzio”, is
gratefully acknowledged by the third author.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 811–820, 2003.
c Springer-Verlag Berlin Heidelberg 2003

812

S. Bistarelli, G. Boﬃ, and F. Rossi

sample (for example, the one captured during a login). This is a three-step
process (Capture, Process, Enroll) followed by a Veriﬁcation or Identiﬁcation
process.
– Capture: A raw biometric sample is captured by a sensing device, such as a
ﬁngerprint scanner or video camera.
– Process: The distinguishing characteristics are extracted from the raw biometric sample and converted into a processed biometric identiﬁer record
(sometimes called biometric sample or biometric template).
– Enroll: The biometric template is stored/registered in a storage medium for
later comparison during an authentication phase. Notice that the original
biometric sample cannot be reconstructed from this identiﬁer.
– Veriﬁcation: In this mode (“1 to 1 matching”), a newly captured/processed
biometric sample taken for instance during a login, is compared against a
previously enrolled sample to address the question “Are you the person you
claim to be?”.
– Identiﬁcation: In this mode (“1 to N matching”), the individual does not
claim an identity. The individual presents a biometric sample and the system
tries to identify the individual from a database of stored biometric samples.
This process intends to answer the question “Who are you?”1 .
The most common biometric techniques are: signature veriﬁcation, retinal
analysis, facial analysis, ﬁngerprint veriﬁcation, hand geometry and voice veriﬁcation. Among all of the above, ﬁngerprint veriﬁcation is one of the most
aﬀordable and easy to use and we focus on it.
In the following sections, we ﬁrst give some basic information about ﬁngerprints (§2) and about minutiae (§3). Then our approach is described (§4) and
some conclusions (§5) are put forward.

2

Fingerprints

Fingerprints are graphical ﬂow-like ridges present on human ﬁngers (see Fig. 1).
Their formations depend on the initial conditions of the embryonic mesoderm
from which they develop.
Humans have used ﬁngerprints for a very long time [12]. Modern ﬁngerprint
techniques were initiated in the late 16th century [9,14,10]. In 1684, English
plant morphologist Nehemiah Grew published a paper reporting his systematic
study on the ridge, furrow, and pore structure in ﬁngerprints, which is believed
to be the ﬁrst scientiﬁc paper on ﬁngerprints [12,5,10]. Since then, a number of
researchers have invested huge amounts of eﬀort studying ﬁngerprints. In 1788,
a detailed description of the anatomical formations of ﬁngerprints was given by
Mayer [8], in which a number of ﬁngerprint ridge characteristics were identiﬁed.
1

This mode is sometimes associated with law enforcement applications but can also be
used for other applications where the user voluntarily presents its biometric sample
and expects to be recognized by the system.

Computer Algebra for Fingerprint Matching

813

Fig. 1. An example of ﬁngerprint.

Starting from 1809, Thomas Bewick began to use one of his ﬁngerprints as his
trademark, which is believed to be one of the most important contributions in the
early scientiﬁc study of ﬁngerprint identiﬁcation [12]. Purkinje proposed the ﬁrst
ﬁngerprint classiﬁcation scheme in 1823, which classiﬁed ﬁngerprints into nine
categories according to the ridge conﬁgurations [12]. Henry Fauld, in 1880, ﬁrst
scientiﬁcally suggested the individuality and uniqueness of ﬁngerprints. At the
same time, Herschel asserted that he had practiced ﬁngerprint identiﬁcation for
about 20 years [12]. The discovery of the uniqueness of ﬁngerprints established
the foundation of modern ﬁngerprint identiﬁcation. In the late 19th century, Sir
Francis Galton conducted an extensive study of ﬁngerprints [12]. He introduced
the minutiae features for single ﬁngerprint classiﬁcation in 1888.
The biological principles of ﬁngerprints are: the individual epidermal ridges
and furrows (valleys) have diﬀerent characteristics for diﬀerent ﬁngers, the conﬁguration types only vary within limits which allow for systematic classiﬁcation,
and the conﬁgurations and minute details of individual ridges and furrows are
permanent and unchanging for each ﬁnger.

3

Minutiae

Typically, automatic ﬁngerprint identiﬁcation and authentication systems rely
on representing the two most prominent structures: ridge endings and ridge
bifurcations [18,10,11].
Fig. 2 shows examples of ridge endings (b) and ridge bifurcations (a). These
two structures are background-foreground duals of each other and pressure variations could convert one type of structure into the other. Therefore, many common representation schemes do not distinguish between ridge endings and bifurcations. Both the structures are treated equivalently and are collectively called
minutiae. The simplest of the minutiae-based representations constitute a list of
points deﬁned by their coordinates (many of the other ridge structures could be
described as a combination of ridge endings and bifurcations [12,10]). Typically,
though, these minimal minutiae-based representations are further enhanced by
tagging each minutia (or each combination of minutiae, e.g., pairs, triplets) with

814

S. Bistarelli, G. Boﬃ, and F. Rossi

Fig. 2. An example of ridge endings b) and bifurcations a).

additional features. For instance, each minutia could be associated with the
orientation of the ridge at that minutia; or each pair of minutiae could be associated with the ridge count: the number of ridges visited during the linear
traversal between the two minutiae. The ANSI-NIST standard representation of
a ﬁngerprint is based on minutiae and includes minutiae location and orientation [2]. A minutiae-based representation might also include one or more global
attributes like orientation of the ﬁnger, ﬁngerprint class, etc.

4

Our Matching Algorithm

Our representation is minutiae-based and each minutia is described by its location (x, y coordinates). In this case, the ﬁngerprint veriﬁcation problem may be
reduced to a point pattern matching (minutiae pattern matching) problem. In
the ideal case, if
– the correspondence between the template minutiae pattern and input minutiae pattern is known,
– there are no deformations such as translations, rotations and others, and
– each minutia present in a ﬁngerprint image is exactly localized,
then ﬁngerprint veriﬁcation is only a trivial task of counting the number of
spatially matching pairs between the two images. Determining whether two representations of a ﬁnger extracted from two impressions of its, possibly separated
by a long duration of time, are indeed representing the same ﬁnger, is an extremely diﬃcult problem.
Fig. 3 illustrates the diﬃculty with an example of two images of the same
ﬁnger. In particular,
a) The ﬁnger may be placed at diﬀerent locations on the glass platen resulting
in a translation of the minutiae from the test representation with respect to
those in the reference representation.

Computer Algebra for Fingerprint Matching

815

Fig. 3. Two diﬀerent ﬁngerprint impressions of the same ﬁnger [10]. In order to know
the correspondence between the minutiae of these two ﬁngerprint images, all the minutiae must be precisely localized and the deformations must be recovered.

b) The ﬁnger may be placed with diﬀerent orientations on the glass platen resulting in a rotation of the minutiae from the test representation with respect
to those of the reference representation.
c) The ﬁnger may exert a diﬀerent (average) downward normal pressure on
the glass platen resulting in a spatial scaling of the minutiae from the test
representation with respect to those in the reference representation.
d) Spurious minutiae may be present in both the reference as well as the test
representations. (Manual work, accidents etc. inﬂict injuries to the ﬁnger,
thereby changing the ridge structure of the ﬁnger, either permanently or
semi-permanently.)
e) Genuine minutiae may be absent in the reference or test representations. (Skin
disease, sweat, dirt, humidity in the air all confound the situation resulting
in a non-ideal contact situation.)
A matcher may rely on one or more of the above, resulting in a wide spectrum of behavior. At the one end of the spectrum, we have the “Euclidean”
matcher, who allows only rigid transformations among the test and reference
representations. At the other extreme, we have the “topological” matcher, who
may allow the most general transformations.
A good matcher needs to stay somewhere in the middle. And this is the
real diﬃculty. The technique we have developed takes easy care of traslations,
rotations and scaling transformations. With some shrewdness, also the appearing/disappearing minutiae problem is dealt with.
4.1

The Basic Algorithm

Using minutia coordinates as templates, reduce the problem of ﬁngerprint matching to the problem of point pattern matching. We have to solve a decisional
problem: “Does there exist a mapping between the template and the test sets of
points?”.
Notice that, in our application, we need only to know if such a transformation
exists; the problem of ﬁnding the mapping is, in general, much harder, also with
our techniques (cf. e.g. [13]).

816

S. Bistarelli, G. Boﬃ, and F. Rossi

Let us consider two sets S1 := {P1 , . . . , Pn } ⊆ Q2 and S2 := {Q1 , . . . , Qm } ⊆
Q2 , of n and m points, representing two diﬀerent ﬁngerprint impressions. Let us
also assume m ≤ n (we can always exchange S1 with S2 in order to have m ≤ n).
The following procedure decides whether there exists an aﬃne change of
coordinates of IR2 that maps the points of S2 to some subset of S1 .
The procedure is made of ﬁve steps:
Step 1: Using the algorithm in [1], we compute a (ﬁnite) set {f1 . . . fk } ⊆ Q[x, y]
of generators of the deﬁning ideal I ⊆ C[x, y] of S1 .
Step 2: If

x
y

=

ab
cd

x
y

+

e
f

, ad − bc = 0

is the generic aﬃne change of coordinates of IR2 , we consider the polynomials
Fij (a, . . . , f ) := fi (axj + byj + e, cxj + dyj + f ) ∈ Q[a, b, c, d, e, f, g],
1 ≤ i ≤ k, 1 ≤ j ≤ m,
where (xj , yj ) are the coordinates of the points of S2 .
We must study the real compatibility of the following system of nonlinear polynomials
Fij (a, . . . , f ) = 0
ad − bc − g = 0

(1)

under the unique constraint g = 0.
Step 3: Let

J := ({Fij (a, . . . , f ), ad − bc − g}) ⊆ C[a, b, c, d, e, f, g]

be the ideal of the system. First of all, we decide whether J is a proper
ideal, by computing the reduced Gr¨
obner basis G of J with respect to
a chosen term order < (e.g. grevlex; cf. [6, Chapter 2, §7]). If G =
{1}, then no change of coordinates can exist; otherwise, J is a zerodimensional ideal, because every solution of the algebraic system (1)
gives, in particular, a map from S2 to S1 .
Using the same G, and using the algorithms in [7, Chapter 2, §2], we
compute
• L := Rad(J) ⊆ C[a, b, c, d, e, f, g] (Rad= radical),
• the unique monic generator mg (g) of L ∩ C[g].
Moreover, by means of Hilbert function computation of
C[a, . . . , g]/In< (L) (In< = initial ideal with respect to a chosen
term order <), we ﬁnd
• D := dimC (C[a, b, c, d, e, f, g]/L).

Computer Algebra for Fingerprint Matching

817

It is well known that deg(mg (g)) ≤ D.(Cf. e.g. [7, Chapter 2], [4, Chapter
8, §8.6].)
Step 4: If deg(mg (g)) = D, then, using the well known technique of Sturm
sequences (cf. e.g. [7, Chapter 2], [4, Chapter 8, §8.8]), we compute the
number r of real roots of mg (g). Observe that mg (g) ∈ Q[g], because all
computations can be performed in the ground ﬁeld Q, and that mg (g)
has no multiple roots in C because L is a radical ideal.
It is easy to see that r is also the number of the real solutions of the
system (1), because L is in normal position with respect to g and then the
reduced Gr¨
obner basis of L with respect to any elimination term order of
{a, b, c, d, e, f }, takes the form {mg (g), a − na (g), . . . , f − nf (g)} , where
{na (g), . . . , nf (g)} ⊆ Q[g] (cf. e.g. [4, Chapter 8, Proposition 8.77]).
Then:
• If r ≥ 2, there exists at least an aﬃne change of coordinates.
• If r = 1, there exists an aﬃne change of coordinates, if m(g) has a
constant coeﬃcient.
• If r = 0, no aﬃne change of coordinates exists.
Step 5: If deg(mg (g)) < D, then the arguments in [4, Chapter 8, §8.6] show
that we can always assume that there exists at least a variable v ∈
{a, b, c, d, e, f } such that deg(mv (v)) = D, where mv (v) is the unique
monic generator of L ∩ C[v].
As in Step 4, we compute the number of real solutions of (1), counting
the real roots of mv (v).
Consider now the system

 Fij (a, . . . , f ) = 0
ad − bc − g = 0
(2)

g=0
and, using the previous procedure, compute the number r of real solutions of (2).
• If r < r , then there exists an aﬃne change of coordinates.
• If r = r , no aﬃne change of coordinates exists.

818

4.2

S. Bistarelli, G. Boﬃ, and F. Rossi

A Reﬁnement

In case the algorithm in 4.1 gives negative answer, replace S2 by all subsets
S2 − {Q} where Q ∈ S2 , until the ﬁrst success. If the answers are negative for
all Q ∈ S2 , try S2 − {Q, Q } where Q, Q ∈ S2 (Q = Q ), until the ﬁrst success
m
(
possible cases), and so on.
2
We can deﬁne a notion of “deﬁciency” by: Def (S1 , S2 ) := Card(S1 ) −
Card(S2 ), where S2 is the ﬁrst subset of S2 for which the algorithm has a
positive answer.
The lower Def (S1 , S2 ) turns out to be, the more likely it is that S1 and S2
correspond to the same ﬁngerprint.
An acceptable level of nonzero deﬁciency shall be determined empirically, in
view of the applications one has in mind.
4.3

Implementation

The algorithm has been implemented in CoCoA [20], a computer algebra system
for doing computations in Commutative Algebra. In our opinion, other computer
algebra systems do not make all the necessary ingredients immediately available
to us as CoCoA does. The functions of CoCoA which have proved particulary
useful are:
• ReducedGBasis; SYNTAX ReducedGBasis(M :IDEAL, MODULE, or
TAGGED(”Quotient”)):LIST; this function computes a reduced Gr¨
obner basis
of M .
• IdealOfPoints; SYNTAX IdealOfPoints(Points:LIST):IDEAL; this function computes the reduced Gr¨
obner basis for the ideal of all polynomials which
vanish at the given set of points.
• Radical; SYNTAX Radical(I:IDEAL):IDEAL; this function computes the
radical of I.
• Elim; SYNTAX Elim(X:INDETS,M :IDEAL):IDEAL; this function returns the ideal obtained by eliminating the indeterminates X from M .
• Hilbert; SYNTAX Hilbert(R:RING or TAGGED(”Quotient”)):TAGGED;
this function computes the Hilbert function for R.
• Der; SYNTAX Der(F ,X:INDET):POLY; this function returns the derivative of F with respect to the indeterminate X.
• DivAlg; SYNTAX DivAlg(X:POLY,L:LIST of POLY):RECORD; this
function performs the division algorithm on X with respect to L. It returns
a record with two ﬁelds: ’Quotients’ holding a list of polynomials, and ’Remainder’ holding the remainder of X upon division by L.

Computer Algebra for Fingerprint Matching

5

819

Conclusions

We develop a new algorithm for ﬁngerprint matching able to take care of traslations, rotations and other aﬃne transformations. The algorithm is also able to
match ﬁngerprints when some minutiae are missed or when some unreal minutia
is detected.
A number of point pattern matching algorithms related to our problem have
been proposed in the literature [3,17,19,21]. However, the use of an algebraic
technique is, to the best of our knowledge, totally new.
An accurate analysis of the eﬃciency of the algorithm is planned for the near
future.
We remark that, in order to count the number of real solutions of the system
(1) in 4.1, one can also resort to the methods of [15]. Our approach looks simpler,
but it is still unclear which of the two ways is more convenient.

References
[1] Abbott, J., Bigatti, A., Kreuzer, M., Robbiano, L.: Computing ideals of points.
J. Symbolic Comput. 30 (2000) 341–356
[2] American National Standard for Information Systems: Data format for the interchange of ﬁngerprint information. Doc# ANSI/NIST-CSL 1–1993 (1993)
[3] Ansari, N., Chen, M.H., Hou, E.S.H.: 13 - A Genetic Algorithm for Point Pattern
Matching. In: Dynamic, Genetic, and Chaotic Programming. John Wiley & Sons
(1992)
[4] Becker, T., Weispfenning, V.: Gr¨
obner Bases. Springer-Verlag, New York (1993)
[5] Castle, T.: (Online authentication using combined smart card and ﬁngerprint
recognition)
[6] Cox, D., Little, J., O’Shea, D.: Ideals, Varieties, and Algorithms. 2nd edn.
Springer-Verlag, New York (1996)
[7] Cox, D., Little, J., O’Shea, D.: Using Algebraic Geometry. Springer-Verlag, New
York (1998)
[8] Cummins, H., Midlo, C.: Finger Prints, Palms and Soles. Dover Publications Inc.,
New York (1961)
[9] Federal Bureau of Investigation: The science of ﬁngerprints: Classiﬁcation and
uses (1984)
[10] Jain, K., Hong, L., Pankanti, S., Bolle, R.: An identity-authentication system
using ﬁngerprints. In: Proc. of IEEE. Volume 85. (1997) 1365–1388
[11] Jain, A.K., Prabhakar, S., Hong, L., Pankanti, S.: Filterbank-based ﬁngerprint
matching. IEEE Transactions on Systems, Man, and Cybernetics 9 (2000) 846–
859
[12] Lee, H.C., Gaensslen, R.E.: Advances in Fingerprint Technology. Elsevier, New
York (1991)
[13] Manocha, D.: Numerical methods for solving polynomial equations. In: Proceedings of Symposia in Applied Mathematics. Volume 53. (1998) 41–66
[14] Newham, E.: The biometric report (1995)
[15] Pedersen, P., Roy, M.F., Szpirglas, A.: Counting real zeros in the multivariate case.
In: Computational Algebraic Geometry. Volume 53., Birk¨
auser, Boston (1993)
203–224

820

S. Bistarelli, G. Boﬃ, and F. Rossi

[16] Podio, F.L.: Biometrics – technologies for highly secure personal authentication.
(http://www.itl.nist.gov/lab/bulletns/bltnmay01.htm)
[17] Ranade, A., Rosenfeld, A.: Point pattern matching by relaxation. Pattern Recognition 12 (1993) 269–275
[18] Ratha, N., Karu, K., Chen, S., Jain, A.K.: A real-time matching system for large
ﬁngerprint database. IEEE Trans. on PAMI 18 (1996) 799–813
[19] Starink, J.P.P., Backer, E.: Finding point correspondence using simulated annealing. Pattern Recognition 28 (1995) 231–240
[20] The CoCoA Team: CoCoA system: Computations in commutative algebra.
(http://cocoa.dima.unige.it)
[21] Ton, J., Jain, A.K.: Registering landsat images by point matching. IEEE Transactions on Geoscience and Remote Sensing 27 (1989) 642–651

