Probability Distribution of Index Distances in
Normal Index Array for Normal Vector
Compression
Deok-Soo Kim1 , Youngsong Cho1 , Donguk Kim1 , and Hyun Kim2
1

Department of Industrial Engineering, Hanyang University,
17 Haengdang-Dong, Sungdong-Ku, Seoul, 133-791, South Korea
dskim@hanyang.ac.kr, {ycho1971, donguk}@ihanyang.ac.kr
2
Concurrent Engineering Research Team,
Electronics and Telecommunications Research Institute,
161 Gajeon-dong, Yuseong-gu, Daejeon, 305-350, South Korea
hyunkim@etri.re.kr

Abstract. Shape models are in these days frequently transmitted over
Internet and the research of their compression has been started. Considering the large portion of shape model can be normal vectors, a new
scheme was recently presented to compress normal vectors using clustering and mixed indexing scheme. Presented in this paper is a mathematical investigation of the scheme to analyze the probability distribution
of normal index distances in Normal Index array which is critical for
the compression. The probability distribution is formulated so that the
values can be easily calculated once the relative probabilities of C, R,
E, S, and L op-codes in Edgebreaker are known. It can be shown that
the distribution of index distances can be easily transformed into a few
measures for the compression performance of the proposed algorithm.

1

Introduction

Being an Internet era, everybody transmits diﬀerent kinds of ﬁles even though he
or she does not notice. Just like ordinary text ﬁles, sound ﬁles, movies, etc., shape
models are also transmitted frequently. Since, a shape model usually consists of
topology, geometry, normal vectors, colors, and textures, the compression issue
of each component has been separately studied since the ﬁrst discussion on the
compression of shape models [1], [2], [3], [4], [6], [9], [10], [11], [12], [13], [14].
Even though there were researches on the compression of normal vectors [3],
[12], the relative ﬁle size of normal vectors compared to that of topology and/or
geometry data in shape models has not been suﬃciently addressed. Note that
data size of normal vectors may take up to a half of the whole shape model ﬁle.
Based on this point of view, we have recently presented an approach to compress
the normal vectors of shape models represented in a simple mesh based on the
clustering and mixed indexing scheme [8].
In our previous papers, however, only the algorithmic aspect of the scheme
was presented with some experimental results. In this paper, therefore, we will
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 887–896, 2003.
c Springer-Verlag Berlin Heidelberg 2003

888

D.-S. Kim et al.

present mathematical analysis of the probability distribution of index distances
of the mixed indexing scheme to compress normal vectors. It turns out that the
distribution of index distances can be immediately transformed into a number
of quantitative measures for the proposed compression scheme.

2

Related Works

Unlike the previous approaches [3], [12], the clustering and mixed indexing
scheme starts with an explicit clustering of the normal vectors so that the distribution of model normal vectors is considered. The normal vectors are grouped
in a few clusters with a unique mean normal vector so that normal vectors in
the cluster are represented by the mean normal vector [8].
Given the clusters of model normal vectors, the normal vector compression
starts with an initial design of data structure. It is assumed that normal vectors are assigned at vertices of each face through indices, and the topology of
shape model is compressed by Edgebreaker. After a series of rearrangements,
the relationship between mesh and normal index is represented in an array as
illustrated in Figs. 1(a) and (b). In Fig. 1(a), a triangular face f1 is related with
three normal vectors n1 , n3 , and n4 at its three appropriate vertices, and this
fact is reﬂected in the ﬁrst three integers, 1, 3, and 4, respectively, in Normal
Index array of Fig. 1(b).
It turned out that a particular index in Normal Index array tends to appear
quite shortly after the index was used. In Fig. 1(c), it is shown that the currently
recurring index is not very far from the latest occurrence of the same index value.
Hence, the recurring indices were replaced with normal index distance D, the
relative distance between the recurring index and the latest occurrence of the
index in Normal Index array, so that it took fewer bits than using the absolute
values of the indices. Note that the bit saving was obtained by employing the
mixed use of absolute and relative values for indices, mixed indexing scheme [8].

Fig. 1. Conﬁguration of mesh and normal vectors. (a) normal vectors in mesh model,
(b) Normal Index array (c) normal index distances of recurring normal indices

Edgebreaker compresses the topology of a mesh model by classifying a triangle into one of ﬁve op-codes, C, R, E, S, and L, depending on the states of
two triangles neighboring to current one and a vertex commonly shared by these

Probability Distribution of Index Distances in Normal Index Array

889

neighboring triangles. Hence, Edgebreaker transforms a mesh model into a string
consisting of ﬁve alphabets [9]. Through experiments on several large models of
up to 200,000 triangles, Rossignac reports the relative frequencies, or probabilities, of these ﬁve alphabets as P(C)=0.5, P(R)=0.363, P(E)=0.056, P(S)=0.056,
and P(L)=0.025 [9]. Even though the probability distribution depends on models, the descending order of the above probabilities seems to be true for most
large models.
Fig. 2 introduces a few notions. When a triangle X is entered from another
triangle through an edge EG , the edge is called a gate as named by Edgebreaker.
When the vertices of X are referenced, the order of the vertices is in CCW
direction as the following: the left vertex of gate v1 , the right vertex of gate v2 ,
and the other vertex v3 . The edge connecting v1 and v3 is called a left edge EL
of X, and the edge connecting v2 and v3 is called a right edge ER of X. The
triangle over EL is called a left face FL , and the one over ER is called a right
face FR .
Suppose that FR is being parsed to be compressed after X was compressed.
Then, we call FR a current face CF and X a previous face PF, respectively. When
a face is of type S, in Edgebreaker notion, we denote the face SF for short. When
it is necessary to refer to the vertices, or the normal vectors at those vertices, of
a face, they will be referred to in CCW order starting from the left vertex of a
gate.

Fig. 2. Notions for topological elements

3

Analysis of Normal Index Array

In our previous papers [8], it was observed that approximately 80 % of the normal
indices are recurring. Hence, it can be said that the Normal Index array may be
better compressed if the recurring normal indices can be more eﬃciently encoded.
If we have mathematical justiﬁcation about the distribution of recurring normal
indices, it may help to develop a more competitive compression scheme. Note
that the bit saving by mixed indexing scheme depends on the distribution of
normal index distances and therefore, the investigation on the distribution of D
is necessary.
To analyze Normal Index array, we rearranged the conﬁgurations of triangles
produced by Edgebreaker and assumed that each vertex has a unique normal

890

D.-S. Kim et al.

vector associated with. CF and PF may be connected through an edge or a
vertex. In some cases, however, CF and PF may not be directly connected by
sharing either an edge or a vertex. When CF and PF are connected through
an edge, they are called edge-connected. Similarly, it is called vertex-connected
if there is a vertex shared by both CF and PF. When CF and PF are separate,
it is called disconnected. Shown in Fig. 3 illustrates examples for these cases:
Fig. 3(a) is a case that CF and PF are edge-connected, and Fig. 3(b) illustrates
a case that two faces are vertex-connected. In the example of Fig. 3(c), there are
two intermediate faces separating CF from PF. For the simpliﬁcation of analysis,
it is assumed that each vertex has a unique normal vector associated with.

Fig. 3. Face conﬁgurations. (a) edge-connected cases, (b) a vertex-connected case, (c)
a disconnected case

3.1

Edge-Connected Cases

Shown in Fig. 4 are edge-connected cases denoted as Econ. Example in Fig. 4(a)
is a case when PF is of either type C, L, or S. In this case, CF is always FR
of PF by sharing ER of PF by Edgebreaker rule and the corresponding Normal
Index array is always given as shown in the right column of Fig. 4(a). By CCW
order starting from the left vertex of a gate as discussed in Section 2, normal
index order of PF in Fig. 4(a) is deﬁned as 1, 2, and 3 and that of CF is deﬁned
as 3, 2, and 4. In these cases, i th index, the ﬁrst index of CF, is always identical
to i-1 th index, the last index of PF, and therefore D of i th index is 1. Similarly,
i+1 th index, the second index of CF, is always identical to i-2 th index, the
second index of PF, and D of i+1 index is always 3. On the other hand, i+2 th
index, the last index of CF, does not have any index with identical value in PF.
Therefore, i+2 th index has D of ∞. The normal index with D = ∞ is the index
with a normal index distance greater than 4 or not a recurring index. Note that
normal index distances of 2 or 4 cannot occur at all.
When PF is of type R, CF has to be FL of PF as shown in Fig. 4(b). Note that
normal index order of PF is deﬁned as 1, 2, and 3 (the same order in Fig. 4(a))
but that of CF is deﬁned as 1, 3, and 4. In this case, the indices for CF can have
two distinct normal index distances: 2 and 3. The i th index, the ﬁrst index of
CF, is always identical to i-3 th index, the ﬁrst index of PF, and i+1 th index,
the second index of CF, should identical to i-1 th index, the last index of PF, in
the array. Normal index distances of 1 and 4 cannot occur at all and D of i+2 th

Probability Distribution of Index Distances in Normal Index Array

891

index, the last index of CF, is ∞. Two cases in the above are the only possible
conﬁgurations that CF and PF share an edge.

Fig. 4. Face conﬁguration and Normal Index array in edge-connected cases. (a) PF of
op-codes C, S, and L, (b) PF of op-codes R

3.2

Vertex-Connected Cases

On the other hand, a case that CF shares a vertex with PF in common forms a
vertex-connected case denoted as Vcon. If this case occurs as illustrated in Fig. 5,
there should be a SF similarly to a disconnected case that will be elaborated
shortly and SF shares its left edge with CF. In addition, SF, PF and CF shares
a vertex in common. Since PF should be of type E in this case, Edgebreaker
pops a face, which will be CF in the next moment, from a stack and the process
jumps to CF.
Let α, β, and γ be three edges of PF as shown in the ﬁgure. Since a gate to PF
can be either one of the three edges, there can be diﬀerent path sets leading to
α, β, and γ gates of PF and accordingly there are three diﬀerent representation
sets, diﬀerent normal index order, of Normal Index array depending on the paths
to the gates of PF. Note that normal index order of CF is independent of any
gate to PF and is deﬁned as 1, 3, and 6 as shown in Fig. 5.
Case α is a case that the edge α is used as the gate of PF and index order
of PF is deﬁned as 4, 5, and 3. Similarly, Case β, and Case γ can be deﬁned.
Even though there can be several paths from SF to PF in Case α, the resulting
Normal Index array between CF and PF remains similar as shown in the ﬁgure.
In this case, the second index of CF has always normal index distance of 2 while
the other two indices have distances higher than 4. Note that the number of
intermediate faces between SF and PF does not aﬀect the relationship between
CF and PF in Normal Index array. Similarly, in Case β, the second index of CF
has a normal index distance 3 and the other indices have distances higher than
4. Case γ can also have several paths from SF to PF, and the middle index of CF
has always normal index distance of 4 and the other two indices have distances
higher than 4. As before, the number of intermediate faces does not aﬀect the
relationship between CF and PF in Normal Index array.

892

D.-S. Kim et al.

Fig. 5. Face conﬁgurations and Normal Index arrays of vertex-connected cases

3.3

Disconnected Cases

Fig. 6 shows a disconnected case denoted as Dcon. Note that there should be at
least two faces in-between CF and PF and these two faces are edge-connected.
Similarly to vertex sharing cases, this case occurs when PF was arrived after an
SF, a face of type S. PF should be always of type E and CF is a face popped
from a stack.
In this case, there has to be at least another intermediate face between PF and
SF. Note that the intermediate face, in this example, can be L type. Of course,
there can be several other conﬁgurations of faces that will result in disconnected
cases. In the given example, the normal index distances of CF are always greater
than 4.

Fig. 6. Face conﬁgurations and Normal Index arrays of disconnected cases

4
4.1

Probability Distributions
Probabilities of Face Conﬁgurations

The probability distribution of the above cases is of interest for the analysis of
bit size of Normal Index array. It is assumed that the probability distribution
of op-codes C, R, E, S, and L is known a priori, and denoted as P(C), P(R),
P(E), P(S), and P(L), respectively. In the following discussions of probabilities,
random variables are occasionally ignored intentionally for the conciseness of the
presentation.

Probability Distribution of Index Distances in Normal Index Array

893

Since the edge-connected cases happen when PF is of type either C, S, L, or
R, the probability of edge-connected cases, P(Econ), is given by the following
equation.
P (Econ) = P (C) + P (S) + P (L) + P (R) .
(1)
The exact probability of vertex-connected case, P(Vcon), cannot be known immediately. However, we make a few observations that can provide an approach
to estimate the probability in a reasonable manner. Since PF has three possible gates, α, β, and γ, all of the paths from SF to PF can be grouped into
three groups passing through each gate. Hence, P(Vcon) can be estimated if
the probabilities of the gates P(α), P(β), and P(γ) are appropriately estimated.
Therefore,
P (V con) = P (α) + P (β) + P (γ) .
(2)
The exact probability of disconnected case cannot be known immediately as
well. However, this case occurs only when there is a SF and PF is of type E. Since
vertex-connected cases can also happen in this face conﬁguration, the following
equation can be deduced.
P (S) = P (E) = P (V con) + P (Dcon) .

(3)

Let a path π be a sequence of faces between two particular faces including
both faces. Then, Pα (π) denotes the probability of path which enters through
the gate α. If a path π1 is a path with maximum probability among all possible
paths leading to the gate α, we call Pα (π1 ) the majorizing probability of the
gate α. Therefore Pα (π1 ) can be safely interpreted as a lower-bound of P(α).
Pβ (π1 ), Pγ (π1 ) and PDcon (π1 ) are deﬁned similarly. From the above discussions,
the following system can be deduced.
P (E) = P (S)
P (E) = P (V con) + P (Dcon)
P (V con) = P (α) + P (β) + P (γ)
P (C) + P (R) + P (E) + P (S) + P (L) = 1 .

(4)

In the above linear system, there are ﬁve unknowns: P(Vcon), P(Dcon), P(α),
P(β), and P(γ). Note that P(C), P(R), P(E), P(S) and P(L) are known. Since
there is no way to calculate the exact probabilities of P(α), P(β), P(γ), P(Vcon)
and P(Dcon), we have to estimate the probabilities of P(α), P(β), P(γ) and
P(Dcon) using known probability distributions. Among several ways, we have
chosen to allocate P(E) to P(α), P(β), P(γ) and P(Dcon) proportionally to the
ratios of the majorizing probabilities Pα (π1 ), Pβ (π1 ), Pγ (π1 ), and PDcon (π1 ) .
In other words,
P (α) = P (E) Pα (π1 )/{Pα (π1 ) + Pβ (π1 ) + Pγ (π1 ) + PDcon (π1 )}
P (β) = P (E) Pβ (π1 )/{Pα (π1 ) + Pβ (π1 ) + Pγ (π1 ) + PDcon (π1 )}
P (γ) = P (E) Pγ (π1 )/{Pα (π1 ) + Pβ (π1 ) + Pγ (π1 ) + PDcon (π1 )}
P (Dcon) = P (E) PDcon (π1 )/{Pα (π1 ) + Pβ (π1 ) + Pγ (π1 ) + PDcon (π1 )} .

(5)

894

D.-S. Kim et al.

Then, P(Vcon) can be also calculated by another simple arithmetic. Finding
better approaches to allocate these probabilities is another issue to be pursued
in the future.
4.2

Probabilities of Face Conﬁgurations

When the op-code for PF is C, S, or L, CF is FR of PF and Normal Index array
is as shown in Fig. 4. Note that this is an edge-connected case. In this case, Di
= 1, Di+1 = 3, and Di+2 = ∞. This fact was discussed earlier. Let P(CSL) =
P(C) + P(S) + P(L). Then, P(D = 1 | PF = CSL) = 13 , P(D = 3 | PF = CSL)
= 13 , P(D = ∞ | PF = CSL) = 13 , and P(D = 2 | PF = CSL) = P(D = 4 | PF
= CSL) = 0. Therefore, the following equation holds.
P (D = 1 ∩ P F = CSL) = P (D = 1 | P F = CSL)P (CSL) = 13 P (CSL) . (6)
Similarly to Eq. (6), it can be shown that P(D = 3 ∩ PF = CSL) = 13 P(CSL),
P(D = ∞ ∩ PF = CSL) = 13 P(CSL), P(D = 2 ∩ PF = CSL) = 0, and P(D =
4 ∩ PF = CSL) = 0.
When the op-code for PF is R, similar observation can be made as
P (D = 2 ∩ P F = R) = P (D = 2 | P F = R)P (R) = 13 P (R) .

(7)

Similarly to Eq. (7), it can be also shown that P(D = 3 ∩ PF = R) = 13 P(R),
P(D = ∞ ∩ PF = R) = 13 P(R), P(D = 1 ∩ PF = R) = 0, and P(D = 4 ∩ PF
= R) = 0.
In the vertex-connected case, op-code of PF should be always E and CF is
the top face in the stack pushed into by the most recent face of type S. In this
case, the second index of CF only has a relative index value smaller than ﬁve.
In the case of gate α, it turns out that there can be only two values of normal
index distances: D = 2 or D = ∞, since it is always guaranteed that Di = ∞,
Di+1 = 2, and Di+2 = ∞. If gate β, similar observation yields D = 3 or D =
∞ since Di = ∞, Di+1 = 3, and Di+2 = ∞. If gate γ, Di = ∞, Di+1 = 4, and
Di+2 = ∞ and therefore it can be deduced that D = 4 or ∞. Hence, the normal
index distance value D which is not inﬁnity always only depends on the gate to
PF, and can have value of either 2, 3, 4 or ∞. Besides, P(Vcon) = P(α) + P(β)
+ P(γ).
Let’s now compute the probability of D = 2. Since D = 2 can only occur
when the gate α is used to enter to PF of type E, it is necessary to know P(α).
Therefore, P(D = 2 ∩ Connectivity = Vcon) = P(D = 2 ∩ Gate = α) = P(D =
2 | Gate = α ) P(α) = 13 P(α). Similarly, P(D = 3 ∩ Connectivity = Vcon) = 13
P(β), P(D = 4 ∩ Connectivity = Vcon) = 13 P(γ) and P(D = 1 ∩ Connectivity
= Vcon) = 0. In addition, it can be shown that P(D = ∞ ∩ Connectivity =
Vcon) = 23 P(Vcon).
In the disconnected case, on the other hand, there is no relative index with
distance less than 5. All three indices will have distances of ∞. Table 1 summarizes the probability distribution of normal index distances, 1, 2, 3, 4, and ∞ for
all possible face conﬁgurations.

Probability Distribution of Index Distances in Normal Index Array

895

Table 1. Probability distribution of normal index distances for Econ, Vcon, and Dcon

We have counted the actual frequencies of ﬁve op-codes from the cow model
which has 14,508 recurring indices (83.32 %) among 17,412 normal indices and
applied this probability distribution to the appropriate equations. Since P(C) =
0.5, P(R) = 0.4288, P(E) = 0.0276, P(S) = 0.0274, and P(L) = 0.0162, we have
calculated P(α) = 0.0046, P(β) = 0.0010, P(γ)=0.0216, and P(Dcon) = 0.0004
from Eq. (5), and the probability distribution for normal index distance turned
out as Table 2.
Table 2. Probability distribution of normal index distances for the cow model

5

Conclusions

Since compression is one of the core technologies for a seamless transmission
through the Internet, the compression of topology, geometry, etc. for 3D shape
models have been extensively studied. Considering the fact that normal vectors
may take almost a half of the whole model ﬁle, we have recently presented a new
scheme to compress normal vectors of 3D mesh models using the clustering and
the relative indexing algorithm. Since the performance analysis of the proposed

896

D.-S. Kim et al.

algorithm was not discussed in the earlier papers, we have presented in this paper
a mathematical analysis of the index distances in Normal Index array. It can be
easily shown that the information presented in this article can be transformed
into a few measures which indicate the performance of the proposed compression
scheme.
Acknowledgments. This work was supported by the Korea Science and Engineering Foundation (KOSEF) through the Ceramic Processing Research Center(CPRC) at Hanyang University.

References
1. Bajaj, C.L., Pascucci, V., Zhuang, G.: Single resolution compression of arbitrary
triangular meshes with properties. Computational Geometry: Theory and Application, Vol. 14. (1999) 167–186
2. Chow, M.: Optimized Geometry Compression for Real-Time Rendering. Proceedings of IEEE Visualization ’97. (1997) 347–354
3. Deering, M.: Geometry Compression. Proceedings of ACM SIGGRAPH’ 95. (1995)
13–20
4. Gumhold, S., Strasser, W.: Real-Time Compression of Triangle Mesh Connectivity.
Proceedings of ACM SIGGRAPH ’98. (1998) 133–140
5. Hoppe, H.: Eﬃcient implementation of progressive meshes. Computers and Graphics, Vol. 22. (1998) 27–36
6. Isenburg, M., Snoeyink, J.: Spirale Reversi: Reverse decoding of Edgebreaker encoding. Computational Geometry: Theory and Application, Vol. 20. (2001) 39–52
7. Jain, A.K., Dubes, R.C.: Algorithms for Clustering Data. Prentice-Hall, Englewood
Cliﬀs New Jersey (1988)
8. Kim, D.-S., Cho, Y., Kim, D.: The Compression of the Normal Vectors of 3D Mesh
Models Using Clustring. Lecture Notes in Computer Science, Vol. 2330. SpringerVerlag, Berlin Heidelberg New York (2002) 275–284
9. Rossignac, J.: Edgebreaker: Connectivity Compression for triangle meshes. IEEE
Transactions on Visualization and Computer Graphics, Vol. 5. (1999) 47–61
10. Rossignac, J., Szymczak, A.: Wrap & Zip decompression of the connectivity of
triangle meshes compressed with Edgebreaker. Computational Geometry: Theory
and Application, Vol. 14. (1999) 119–135
11. Szymczak, A., King, D., Rossignac, J.: An Edgebreaker-based eﬃcient compression
scheme for regular Meshes. Computational Geometry: Theory and Application,
Vol. 20. (2001) 53–68
12. Taubin, G., Horn, W.P., Lazarus, F., Rossignac, J.: Geometric Coding and VRML.
Proceedings of the IEEE, Vol. 86. (1998) 1228 –1243
13. Taubin, G., Rossignac, J.: Geometric Compression Through Topological Surgery.
ACM Transactions on Graphics, Vol. 17. (1998) 84–115
14. Touma, C., Gotsman, C.: Triangle Mesh Compression. Proceedings of Graphics
Interface ’98. (1998) 26–34

