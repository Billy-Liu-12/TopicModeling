Testing Safety Critical Ada Code Using Non Real Time
Testing

1

2

Y.V. Jeppu , K. Karunakar , and P.S. Subramanyam

3

1

Deputy Project Director (IFCS – Flight Control Laws)
Aeronautical Development Agency, Bangalore, India
yvj_2000@yahoo.com
2
Group Director (Independent Verification and Validation)
Aeronautical Development Agency, Bangalore, India
3
Project Director (Integrated Flight Control Systems)
Aeronautical Development Agency, PB NO 1718,
Vimanapura PO, Bangalore, India

Abstract. Testing the Flight Control Laws and the Airdata Algorithm form a
major part of the Flight Control System development cycle. These two safety
critical software are validated and verified on very costly rigs in every aircraft
development program. The Indian Light Combat Aircraft, with fixed gains and
the limited first flight envelope, was successfully test flown without a single
software fault starting January 4, 2001. This paper highlights a new methodology followed by the LCA team to test and certify the digital fly-by-wire control
law. The philosophy used is to test the quadruplex software in a single strand
mode. Only the Control Laws and the Airdata Algorithm are tested against a
validated FORTRAN model. The Model code is developed by the Control Law
designers and represents the functionality in totality. A fault injection methodology is used on the model, called "Delta Model", to verify the efficacy of the
test cases. The paper discusses the methods, typical cases and shares some of
the experiences of the Indian LCA Team.

1

Introduction

The advantages of having an unstable aircraft and the availability of fast computers
have made feasible the highly agile modern day fighter aircraft. The fly-by-wire flight
control system on board such aircraft has the ability to tailor the system characteristics
at every point in the flight envelope. This is achieved by using the Digital Flight Control Laws (DFCL) scheduled at every flight condition. The scheduling of parameters
requires the Air Data System (ADS), which comprises of sensors and a complex algorithm, to give the required parameters. The requirement of a very high mean time
between failure (MTBF) necessitates quadruplex redundancy in the on board computer, sensors and actuators that form the flight control system (FCS). The DFCL and

J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 382–393, 2003.
© Springer-Verlag Berlin Heidelberg 2003

Testing Safety Critical Ada Code Using Non Real Time Testing

383

the ADS software are designated safety critical and are developed in accordance with
strict standards and specifications [1].
The FCS software goes through extensive verification and validation for a fighter
aircraft program. A well-documented design process is used to develop the software.
An extensive textbook approach to software testing is used to validate the software at
every stage of development. The software goes through Unit level testing, Integration
testing and Hardware Software Integration [4]. The DFCL and ADS are again tested
on ground in a facility called "Ironbird" [1]. The Ironbird is a hardware-in-loop test
facility where the real actuators, flight model and the flight computer are tested in a
closed loop mode. At the Ironbird rig the DFCL and the ADS are tested against a
design model code in an automated fashion. No human intervention is required unless
the test fails. As many as 100,000 test cases are executed in this fashion! [1]

2

The Indian LCA Software

The FCS for the Indian Light Combat Aircraft (LCA) has gone through a development process as described for a typical fighter aircraft above [2]. It has a quadruplex
digital flight control computer (DFCC). The software has been coded in Ada language. The DFCL and ADS have been coded using the BEACON tool, which is a
Computer-Aided Control System Design software [5]. The software has gone through
a series of testing and finally flown on the initial series of flights without a single
error, which could abort the scheduled flights [3].
This paper describes a novel method used by the LCA team to cut short the Ironbird level tests. The testing was carried out in a non real time mode and the method
was accepted as a formal test methodology to validate the DFCL and ADS software
for certification of onboard Flight Control System software.

3

The DFCL and ADS Code

The Control Law Design team designed the DFCL and ADS for the LCA. This design
was released for coding as a functionality document. The design is in the form of control block diagrams with specification for each block. The blocks are control elements
like filters, nonlinear elements, faders, summations, rate limiters and trigonometric
functions. Scheduled gains are specified as lookup tables. The detailed control law and
the ADS algorithm are also described in an algorithmic language like FORTRAN. Control law designers and a test pilot, who is a member of the DFCL design team, validate
the FORTRAN code in the engineer-in-loop simulator and later at various other realtime simulation platforms. The use of a test pilot in the design phase has provided valuable insight into the DFCL design process to the LCA Team [2].
The software requirement specification (SRS) just specifies that the control law
and ADS should behave as specified in the functionality document. It is therefore
essential that this specification be executable to validate the DFCC code [6].

384

Y.V. Jeppu, K. Karunakar, and P.S. Subramanyam

4 LCA Software Test Process
The DFCC software goes through several tests before its release for the Ironbird level
tests. The Computer Software Unit (CSU) and Computer Software Component (CSC)
level tests are carried out as per DOD-STD-2167A. These tests are generated using
the SRS and the Software Design Document (SDD). The tests cover Equivalence
Partitioning, Boundary Value Analysis, Path Coverage, Compound Expression and
Loop Tests. Functional tests are carried out using a tool called "Comparator" and
white box structural testing with a "Logiscope" tool. The formal code released after
these tests undergoes Software Integration Tests (SIT) and Hardware Software Integration tests (HSI). This is carried out on a special test rig called "MiniBird".
The formal configured code is released for Ironbird tests where the DFCC with the
simulated avionics, pilot controls and the actuators are tested in open and closed loop
mode. This facility is a very costly setup and usage time on this facility is strictly
controlled. Moreover, the focus of testing is mainly hardware/software integration
issues, redundancy management and fault free flying.

5 Requirement for a New Methodology
The time constraints and project pressures lead the LCA team to look for additional
schemes to augment the verification and validation of the DFCL and ADS at Ironbird
and Minibird levels. Moreover, the error bounds envisaged in the Ironbird, on analysis, were found to be very high to give any meaningful insight into the DFCC code.
The question asked in various reviews by the management and the certifying agency
was "Has the DFCL and ADS been coded correctly as per the functionality?"

6

NRT Philosophy

A new group was formed to look into a formal method to clear the DFCL and ADS
very early in the program phase. The group evolved a method to validate and verify
the code in a non real time (NRT) mode. The basic concept is to test just the single
strand (not the 4 channel operation) Ada code on a target Single Board Computer
(SBC). Figure 1 shows the schematic of the NRT philosophy. The Ada code is
clipped and stubbed to remove all four channel related code. The DFCL and ADS
code are tackled separately. An Ada driver code is added to the clipped code to inject
the test inputs and tap out the required outputs. This code with the driver is compiled
with the same compiler and settings as the final build of DFCC software. A single
board computer using the same processor as the DFCC is used as a target for the Ada
executable.
The FORTRAN model code developed by the DFCL and ADS designers is used as
a benchmark for the Ada code. This code is a validated code, the validation carried
out at various simulation platforms and by another independent agency. The model
code is attached to a driver and compiled to run on a PC. The PC software called

Testing Safety Critical Ada Code Using Non Real Time Testing

385

PACTS (Platform for Automatic Control law Tests) is used to simulate the test cases.
Figure 2 shows the NRT setup.
The test cases are generated in view to test each and every control block element.
The inputs are given to the code at the sensor input point like in case of a black box
testing. Tap out points are assigned at the input and output of each control element
block. This is similar to the white box approach. The test cases are designed to bring
out every possible error in each control block. This is verified by introducing faults
into the model code called "Delta Model".

7 Concept of Delta Model
Fault injection is a common practice in the software testing process. This has been
used to design test cases and to estimate the effect of error on the final output [7].
This concept is used to design the test cases for NRT. A test case is designed and
tested on a copy of the FORTRAN model code. This code is doctored such that the
block under test is perturbed by the addition of error. The error could be errors in the
coefficients for the filters, error in the algorithm in case of rate limiters and faders and
reversal of sign in case of summation blocks. Figure 3 shows the schematic of the
Delta Model.
As an example say the block under test is Filter A and this is called by using a
function FILTER() in the code.
O = FILTER(COEFFA,COEFFB,DELTAT)
Here the functionality document specifies COEFFA to be equal to 10.2345 and
COEFFB to 22.4641. The Delta Model has the perturbed value of COEFFA as
10.23461 and the test case has to trap this error.
The test case is executed on the Model and the Delta Model and deemed to be efficient if it can bring out the error in the component under test. The Delta Model is
discarded and the executable deleted to avoid confusion once a test case is frozen.
Only one error is introduced at a time in a single block for a specific test. Every test
case thus identified is brought under configuration management.

8

Configuration Control

A high degree of formalism was introduced into the test process in the conception
phase. The Ada code under test, the FORTRAN model and the test cases are all Configuration-Controlled Items (CCI). No change is possible on these items without a
formal release of change sheet. All test results from Ada code and the Model are
CCIs. The test result file has information about the code version, date executed, test
case name and issue number. A database and a management system developed inhouse is used to track all the version changes, test executed and pass/fail status.

386

Y.V. Jeppu, K. Karunakar, and P.S. Subramanyam

9 NRT Test Process
The NRT test process starts with the Test Plan document with traceablity to the
Ground Test Plan Document. This is the base document highlighting the scope of the
test, the system under test and broad classification of the items to be tested. This
document gives details to prepare the Request for Pre-Tests (RFPT). These define the
test cases, which are to be executed on the Delta Model. Each test case has a unique
8-letter identifier, which identifies the test case and all the results, reports etc to follow the test. A RFPT would be converted to Request for Test (RFT) once it is cleared
on the Delta Model. The RFT is a CCI and contains a set of test cases, a description of
the definition of the system under test, functionality reference, the type of inputs to be
injected and the variables to be tapped out for analysis.
Generation of the RFT automatically generates two Input Definition Files (IDF),
which are the inputs to the Ada and FORTRAN Model driver. Unlike script-based
approach to software testing the IDF specifies the type of input waveform like sine
wave or pulse train. This makes the files compact and it is very easy to verify the
results based on the test case description. The IDFs are created using software called
"PACTS" developed for automated DFCL and ADS tests. This software is a Microsoft Windows based application software running on a PC. The two IDFs are CCI and
describe the test case as given in the RFT in a form readable by the respective drives.
The PACTS software has the ability to read the FORTRAN IDF and execute the
Model code on the PC. The output is an ASCII file containing columns of data corresponding to variables tapped out. The Ada IDFs are processed in a VAX environment
for execution on the target SBC. The output of the SBC is also an ASCII file with
suitable headers and data from the Ada code output. These two files are compared in
time and frequency domain to generate the pass/fail status automatically based on
specific criteria.
Each test case after execution and comparison generates a test report automatically.
In case a test has failed user intervention is required for analysis and to continue further tests. Extensive use of Matlab © Mathworks (http://www.mathworks.com) has
been used for analysis. A software problem report is raised giving the cause of failure.
The testing ends when all the test cases have been executed and all the problems resolved with agreement between the algorithm designers and the software designers. A
final report closes the test activity. The schematic of the NRT test process is given in
Fig. 4.

10

Typical Inputs

NRT emphasizes on stressing the software to its limits. Very large input values over
the complete frequency range are injected into the software to stress test the various
blocks. Every block is tested with a sine sweep waveform. In case of filters this
method gives the frequency response of the block. Rate limiters and non-linearities
are excited using sine sweeps to check for frequency dependencies. Large amplitude
pulse trains bring out the performance of the rate limiters. Slow ramps are used to
characterize the non-linear functions. A combination and ramps and sine waves are
used to exercise the gain tables over the entire range. Events are excited with pulse

Testing Safety Critical Ada Code Using Non Real Time Testing

387

trains with varying widths to check for sub sampling. A single test case will have
combination of all these waveforms to check a specific control block.

11 Pass / Fail Criteria
The pass/fail criteria for the tests were generated based on the Delta Model tests and
preliminary tests on the Ada code. As the error increases with the increase in the input
levels percentage errors are computed. In case of very small signal levels this criteria
cannot be used, as the percentage errors tend to be very high. The criteria finally used
for the error Enrt in NRT is
Enrt = % error, if signal value > 1.0
else
Enrt = the error value itself
A threshold of 0.0002 is used to clear the test cases. This has been found to be optimum for the DFCL and ADS. It has been the team's experience that errors greater
than these value normally signify some coding differences between the Ada code and
the Model.

12 Results
The NRT process has been applied to test various builds of software and this has
given the LCA team a lot of experience and insight into what kind of errors pass
through various levels of testing. We share a few of them here
• The functionality defines that the scheduled gains should be faded based on certain
events. This was not coded in the Ada software. Static tests at Iron bird were clearing the DFCC. In NRT the test case checked for the complete range of input values
for the table lookup in combination with the associated events toggling. This rapidly changing test input could trap this error and the software was modified. The
functionality was modified to bring clarity to this aspect
• The notch filters, which are very important to prevent structural modes from entering DFCC loop, were coded with lesser precision values. The notch filters are designed after optimization and precise values have to be entered to get the correct
frequency characteristics [8]. The errors were in the 4th decimal place and NRT
could be used to analyze the effect of this on the system performance. Frequency
response analysis from sine sweep inputs was used for accurately determining the
performance degradation.
• The integrators were implemented using Tustin transformation in the Ada code and
Euler method in the Model code. Errors due to this sort of algorithmic differences
could be trapped even though the Ironbird had passed these tests.
• There was an error in the interpolation table indexing. The compiler normally
should have trapped this error. The error was trapped in NRT as very high input

388

Y.V. Jeppu, K. Karunakar, and P.S. Subramanyam

values (Mach numbers greater than 3) were injected at the input points and the
SBC hung up.
• Table data for interpolation were entered with truncated values instead of rounded
off values.
• Limits placed on the inputs were electrical units instead of engineering units. The
functionality specifies engineering unit limits on pilot inputs. The software team
had placed the scaled limits on inputs.
• Typical errors found in the code are due to the functionality being misunderstood
and data values entered wrongly. This is because the DFCL is coded using
BEACON tools and the code is generated automatically. The errors in this case
will be mostly data entry errors. Certain portions of the code were coded for optimization and here the indexing problems had manifested.

13 Advantages of NRT
The team has perceived the following advantages of NRT after extensive rounds of
testing.
• NRT tests the software for its functional behavior and performance. It is basically a
functional testing and because the tester is tapping out intermediate variables to increase testability it has shades of "grayness" associated with it. The test does not
verify the software as a piece of code but treats it as a control system, something
similar to a hardware circuit.
• There is a good idea when to stop the tests as the test cases are based on knowledge
of the system. Each block has a specific number of tests associated with it and
therefore unlike black box testing the number and types of inputs is finite.
• It is easy to analyze the effect of certain errors on the final system performance. As
an example, the effect of changed filter coefficients on the system response is very
easily decipherable. The question "Okay, we have an error can we live with it?" is
answerable avoiding costly changes.
• The test methodology has boosted the confidence of the pilots and the design team.
Debugging the code during Ironbird tests has been simplified, as the software design team knows exactly where not to look for bugs.
• The Ironbird and Minibird tests have been reduced by about 70 % as all the DFCL
and ADS tests have been covered in NRT. Ironbird level checks are for fourchannel operation, path connectivity from sensors to actuators, setting of events
physically by failing a hardware item or selecting switches.
• The NRT testing activity can be started very early in the software development
cycle and this has saved cost and time to the project.
• Regression testing is easy on every build of software as the testing is completely
automatic once the test cases are in place.

Testing Safety Critical Ada Code Using Non Real Time Testing

389

14 Best Practices
Some of the best practices for embedded DFCL and ADS implementation are as follows
• The DFCL or ADS functionality should be augmented with the Model code. The
Model code often is a better representation of the functionality than the text document.
• A functional level stress testing is a must preferably with the participation of the
DFCL designer and the software designer. Most of the errors found were due to
functionality not being understood by the software designer. If the tester has also
understood it in the same way then major design flaw may pass unnoticed.
• Extensive testing is a must at the end of the day in spite of good SQA plans, good
compilers and autocode generators being used for software development.
• Static tests do not give out much information about the system. Always test for
transient behavior.
• There is a need for synergy between the DFCL designers, Software designers and
the Independent Verification and Validation team.
• If the model code were the same as the final embedded code testing would be simpler. There is a requirement to think of a hardware platform where the DFCL designers, software developers and pilots can work together very early in the project
phase for a program of this nature.

15 Conclusion
Software faults, in safety critical systems, have caused loss of millions of dollars and
many lives in the past. The Indian LCA team has test flown the aircraft without a
single software fault being encountered. This is a major achievement and speaks volumes of the software development process and the Independent Verification and
Validation activity. A method has been described in this paper, which has successfully complemented the various test activities and has been accepted by certification
agency as one of the important milestones to certify the software. The NRT test activity with its formalism has paved the way for the flight clearance of the aircraft saving
a lot of time, effort and money for the project.
Acknowledgement. The authors wish to thank Programme Director, LCA and Director, Aeronautical Development Agency for their encouragement and support for the
NRT activity. We wish to thank Mr Sukanta K Giri and Ms Kavitha Rajalakshmi,
Scientists, IV&V, ADA for their technical support during the execution of NRT.

390

Y.V. Jeppu, K. Karunakar, and P.S. Subramanyam

REDUNDANCY MANAGER
Four Channel Ada Code

DFCL BLOCK

MODEL CODE

Comparator
Fig. 1. A schematic of NRT philosophy

PACTS
VAX
SYSTEM

CARD

SBC

PC

ETHERNET

Fig. 2. The NRT setup shows the Single Board Computer (SBC) connected to the VAX system.
The PACTS software running on the PC collects Test data, simulates the Model code and
analyses results

Testing Safety Critical Ada Code Using Non Real Time Testing

391

CONTROL
BLOCK

MODEL CODE

PERTURBED
CONTROL
BLOCK

DELTA MODEL CODE
Fig. 3. The Model code and the Delta Model are shown as a schematic. A single block under
test as defined by the test case is perturbed by changing a constant or logic in the Fortran Model
code. This is the Delta model code. The test case is executed on the Model and the Delta
Model. A test case is declared adequate if it can find the error in the block under test

392

Y.V. Jeppu, K. Karunakar, and P.S. Subramanyam

TEST PLAN DOCUMENT

REQUEST FOR PRE-TESTS
(RFPT)

DELTA MODEL

REQUEST FOR TEST (RFT)

Ada Input Definition
File (IDF)

Ada Code

FORTRAN Input Definition File (IDF)

EXECUTE TESTS
COMPARE RESULTS

TEST
REPORTS

FORTRAN
MODEL

PROBLEM
REPORTS

FINAL REPORT

Fig. 4. The schematic NRT Test Process shows the various steps involved from Test Plan
documentation to the final Test Report.

Testing Safety Critical Ada Code Using Non Real Time Testing

393

References
1. Roger W Pratt: Flight Control Systems, Progress in Astronautics and Aeronautics, Vol. 184,
AIAA and IEE (2000).
2. Shyam Chetty, Girish Deodhare, B.B. Misra: Design, Development and Flight Testing of
Control Laws for the Indian Light Combat Aircraft, AIAA Guidance, Navigation and Control Conference, Monterey, CA, August 2002
3. Wg. Cdr. R. Kothiyal, Wg. Cdr. T. Banerjee: First Flight of India's Light Combat Aircraft",
45th SFTE Symposium Proceedings, Sept. 2001, 88–95
4. Steven R Rakitin: Software Verification and Validation - A Practitioner's Guide, Artech
House (1997)
5. Richard C. Dorf: The Electrical Engineering Handbook, Boca Raton: CRC Press LLC
(2000)
6. Alfred R and Theodor T.: Aspects of Flight Control Software – a Software Engineering
Point of View, Control Engineering Practice, Vol. 8, 2000, 675–680
7. Voas J: A Tutorial on Software Fault Injection, Spectrum 2000,
http://www.cigital.com/papers/download/spectrum2000.pdf
8. Animesh C et al.: Design of Notch Filters for Structural Responses with Multi-Axis Coupling, AIAA Journal of Guidance, Control and Dynamics, Vol. 22, No. 2, March 1999, 349–
357

