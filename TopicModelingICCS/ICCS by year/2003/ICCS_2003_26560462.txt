On the Security of RDSA
Pierre-Alain Fouque and Guillaume Poupard
DCSSI Crypto Lab
51 Boulevard de La Tour-Maubourg
75700 Paris 07 SP, France
Pierre-Alain.Fouque@ens.fr
Guillaume.Poupard@m4x.org

Abstract. A variant of Schnorr’s signature scheme called RDSA has
been proposed by I. Biehl, J. Buchmann, S. Hamdy and A. Meyer
in order to be used in ﬁnite abelian groups of unknown order such
as the class group of imaginary quadratic orders. We describe in this
paper a total break of RDSA under a plain known-message attack for
the parameters that were originally proposed. It recovers the secret
signature key from the knowledge of less than 10 signatures of known
messages, with a very low computational complexity.
We also compare a repaired version of RDSA with GPS scheme, another
Schnorr variant with similar properties and we show that GPS should
be preferred for most of the applications.
Keywords. Signature scheme, cryptanalysis, DSA variant, knownmessage attack, lattice reduction, GPS.

1

Introduction

In 1989, C. Schnorr proposed a proof of knowledge of a discrete logarithm in
groups of known prime order [13]. Such a zero-knowledge proof can be used as
an interactive identiﬁcation scheme and also be converted into a signature scheme
using the Fiat-Shamir paradigm [3]. This scheme has motivated the design of
many signature schemes, including the standard DSA [9].
Those variants are intended to achieve additional properties. Firstly, we can
use a composite modulus instead of a prime modulus and keep its factorization
secret. We can also use various groups with interesting cryptographic properties [2]. As a consequence, the order of the group in which the computations
are performed may remain secret. Furthermore, the order of the publicly known
bases used in those schemes can also be public or private. In the Schnorr scheme
and DSA, both the order of the group and the order of the base are known.
Other schemes achieve diﬀerent combinations.
Two variants allow to use groups of unknown order and bases whose order
is also unknown. The ﬁrst one, GPS, was proposed by Girault [4] and further
analyzed by Poupard and Stern [12]. The second one, called RDSA, has been
proposed by I. Biehl, J. Buchmann, S. Hamdy and A. Meyer [1] in order to be
implemented in ﬁnite abelian groups of unknown order such as the class group
of imaginary quadratic orders.
E. Biham (Ed.): EUROCRYPT 2003, LNCS 2656, pp. 462–476, 2003.
c International Association for Cryptologic Research 2003

On the Security of RDSA

463

Our Results
In this paper, we describe a total break of RDSA under a plain known-message
attack. It requires the knowledge of a few valid signatures for messages that do
not have to be chosen by the attacker. Furthermore, the computational complexity of the attack is very low. As an example, an attacker that observes 10
signatures of known messages can recover the secret signature key using a single
computer in about ﬁve minutes.
The RDSA scheme is presented in section 2. Then, the attack is described
in section 3; some useful tools such as lattice reduction techniques are reminded
and a full algorithm is detailed and analyzed. Finally, a comparison between
GPS and a repaired version of RDSA shows that GPS should be preferred for
most of the applications.

2

The RDSA Signature Scheme

The RDSA signature scheme is fully described in [1] and [2]. It performs computations in a ﬁnite abelian group G, written multiplicatively. The basic idea of
RDSA is to transform the Schnorr [14] and the DSA [9] schemes in order to use
groups of unknown order.
We remind the RDSA scheme, using the original notations:
1. Key generation
• randomly select an element γ ∈ G,
• randomly select a prime q,
• let h(.) be a cryptographic hash function with outputs in the range [0, q−
1],
• randomly select an integer a ∈ [2, q − 1],
• compute α = γ a .
The public key is (G, γ, α, q) and the private key is a.
2. Signature of a message M
• randomly select an integer k ∈ [0, q − 1],
• compute

= γ k , e = h(M || ) and x = k − a × e,

• compute integers s and

such that x = × q + s and 0 ≤ s < q,

• compute λ = γ .
The signature of the message M is (s, , λ).
3. Veriﬁcation
A triplet (s, , λ) ∈ Z × G × G is a valid signature of the message M if and
only if 0 ≤ s < q and γ s αh(M || ) λq = .

464

P.-A. Fouque and G. Poupard

Parameters: G a group of unknown order
γ ∈ G and a prime q
Secret key: a ∈ [2, q − 1]
Public key: α = γ a
Prover

Veriﬁer

choose k in [0, q − 1]
−−−−−−−−−−−−−−−→
= γ k mod n
e
check e ∈ [0, q − 1]
←−−−−−−−−−−−−−−−
x = k − a × e, s = x mod q
s, λ
= (x − s)/q, λ = γ
−−−−−−−−−−−−−−−→

choose e in [0, q − 1]
?

check γ s αe λq =
and s ∈ [0, q − 1]

Fig. 1. RDSA identiﬁcation scheme

This signature scheme follows the Fiat-Shamir paradigm [3] that transforms any 3-move zero-knowledge interactive identiﬁcation scheme in a signature
scheme. This heuristic has been widely used to design signature schemes, even if
the resulting security is only guaranteed in the random oracle model (see [10] for
general results). Figure 1 describes what we call RDSA identiﬁcation scheme.
Note: This scheme can be modiﬁed in order to make the signatures shorter,
without reducing the security nor increasing the computation time. The idea is
to output (e, s, λ) instead of (s, , λ) as the signature and to use the following
veriﬁcation procedure:
3bis. Veriﬁcation
A triplet (e, s, λ) ∈ Z × Z × G is a valid signature of the message M if and
only if 0 ≤ e < q, 0 ≤ s < q and h(M ||γ s αe λq ) = e.
2.1

Security Results on RDSA

The aim of the security analysis or RDSA is to prove that if an attacker has a non
negligible probability of success to forge a valid signature, it can be transformed
into an eﬃcient algorithm that solves a problem which intractability is widely
assumed.
We now deﬁne the number theoretical problems used in the analysis of RDSA.
We note < α > the subgroup of G generated by the element α ∈ G:
Discrete logarithm problem: given elements α ∈ G and β ∈< α >, ﬁnd an
integer k with αk = β.
Order problem: given an element α ∈ G, ﬁnd a non zero multiple of the order
of α.
Root problem: given a prime number q that does not divide the order of G
and an element α ∈ G, ﬁnd an element β ∈ G with β q = α.

On the Security of RDSA

465

Small discrete log existence problem: given an integer q and elements α ∈ G
and β ∈< α >, decide if there exists k ∈ [0, q − 1] such that αk = β.
The security analysis of RDSA is based on the forking lemma of Pointcheval
and Stern [10]. It is claimed in [1] that RDSA is secure against no-message attack
in the random oracle model. Then, using a simulation argument, the following
theorem is announced:
Theorem 1 (from [1]). In the random oracle model, if an existential forgery
of a RDSA signature using an adaptively chosen message attack has a nonnegligible probability of success, then the root problem or the small discrete log
existence problem can be solved in probabilistic polynomial time. Probabilities are
taken over random tapes, random oracles and public keys.
The authors of RDSA also propose a modiﬁcation of the signature scheme to
avoid the assumption of intractability of the small discrete log existence problem.
Let L be an approximation of the (unknown) order of the group G. Instead of
choosing the random k in [0, q − 1], it is chosen in [0, q × L2 [. We will further
refer to this variant as RDSA2. The drawback, in comparison with RDSA, is an
important degradation of performances.

3
3.1

A Total Break of RDSA under a Known-Message
Attack
Preliminary Remarks on RDSA Identiﬁcation Scheme

Before describing the attack against RDSA signature scheme, let us ﬁrst have a
look on the related interactive identiﬁcation scheme described in ﬁgure 1. The
main observation is that the random number k ∈ [0, q − 1] is used to mask the
secret key a in the equation x = k − a × e. However, since there is no modular
reduction like in the Schnorr scheme, this random number is too small to hide
all the secret. More precisely, after euclidian division of x by q,
x = × q + s with 0 ≤ s < q
is a very good approximation of (−a × e)/q

the quotient
=

x
k−a×e
−a × e
=
=
+ ε with ε ∈ {0, 1}
q
q
q

This ﬁrst remark can be combined with a second very simple one; the value
of is not disclosed to the veriﬁer but only λ = γ is transmitted. We could
assume that if the discrete logarithm problem is intractable, the value of is not
disclosed. However, since we have seen that is approximately equal to (−a×e)/q
and a ∈ [0, q − 1], the size of is the same as the size of e. Consequently, if
e is small enough, the veriﬁer can use an algorithm such as the Pollard rho
method [11], or even an exhaustive search, to compute from λ.

466

P.-A. Fouque and G. Poupard

In conclusion, if the veriﬁer sends a small enough challenge e, he can compute
and consequently learn a good approximation of (a × e)/q. Then it is easy
to deduce the most signiﬁcant bits of the secret key a. Indeed, assume e is
δ bits long; as we have s = k − a × e − × q and 0 ≤ s < q, we obtain
|a × e + × q| < q + |k| < 2q. Therefore a − −e q < 2q
e and the (δ − 1) most
signiﬁcant bits of − q/e and a are the same.
Furthermore, this attack can be iterated with challenges of increasing size; the
most signiﬁcant bits of a allow to upper and lower bound the discrete logarithm
of λ and a variant of the Pollard rho method enables to compute such discrete
logs. Finally, the whole key a is recovered.
The ﬂaw in the RDSA identiﬁcation scheme is that the zero-knowledge property is not satisﬁed; a malicious veriﬁer can learn information during authentication. Of course, such an adversary does not really follow the protocol since it
does not randomly choose the challenges. We could hope for the protocol to be
at least “honest veriﬁer zero-knowledge”. This condition would be suﬃcient to
apply the forking lemma. However, we will see in the sequel that even if veriﬁers
are honest, the protocol is not zero-knowledge. This means that it is not secure,
even against passive adversaries that just eavesdrop communications. A consequence is that the forking lemma cannot be used and that the proof of theorem 1
collapses.
Let us now turn to the analysis of RDSA signature scheme. The main diﬀerence with the identiﬁcation scheme is that the challenges are no longer chosen
by the veriﬁer but computed as the hash value of the commitment = γ k and
of the message M to be signed: e = h(M ||γ k ). The consequence is that it is no
longer possible for an attacker to control the size of e. At ﬁrst sight, this seems
to defeat the attack against the identiﬁcation scheme we have just described.
However, we explain in the following how to combine known valid signatures in
order to obtain some “pseudo-signatures” with small e.
3.2

Generic Algorithms for Computing Discrete Logarithms

In any group G, the computation
of discrete logarithms in base γ ∈ G of order n
√
can be performed in time O( n) group multiplications with the baby-step giant√
step algorithm. This algorithm is deterministic but requires storage for O( n)
elements so it is usually advised to use Pollard’s rho algorithm [11] which has,
heuristically, a similar running time but requires only a negligible amount of
memory. Shoup proved in [15] that those algorithms are optimal for computing
discrete logarithms in any group, i.e. without trying to take advantage of any
additional algebraic structure.
Furthermore, if it is known that the discrete logarithm lies within a restricted
interval of width w, another algorithm of Pollard [11,16] called the lambda
method
(or the method for catching kangaroos) ﬁnds the discrete log in time
√
O( w) and space for O(log w) group elements.

On the Security of RDSA

3.3

467

The LLL Toolbox

The lattice reduction algorithm of Lenstra, Lenstra and Lov´
asz [7] has been
widely used in cryptanalysis to break many kinds of cryptosystems. Details on
lattice reduction techniques are out of the scope of this paper so we refer to [6]
for details and extensive bibliography.
It should be noted that the LLL algorithm has already been used by
Howgrave-Graham and Smart [5] and then by Nguyen and Shparlinski [8] to
attack DSA if ephemeral keys, the equivalent of the k parameter in RDSA, are
partially known.
We use LLL to solve the following problem: given (e1 , ...en ) ∈ [0, q − 1]n , ﬁnd
integer coeﬃcients (c1 , ...cn ) as small as possible such that the linear combination
n
j=1 cj × ej has a prescribed bit size.
Consider the matrix M where the n rows are seen as (n + 1)-dimensional
vectors that deﬁne a lattice in Zn+1 :


e1 Λ 0 · · ·

 e2 0 Λ . . .
M =
 . . . .
 .. .. . . . .
en 0 · · · 0


0
.. 
.


0
Λ

The aim of a reduction algorithm, such as LLL, is to compute a “reduced”
basis, i.e. a basis of the same lattice with short vectors that are “nearly” orthogonal. Let us consider a vector V of such a basis; it is a linear combination of the
rows of M so all its coordinates, except the ﬁrst one, are multiples of Λ:
j−1

n

V =

n−j

cj × (ej , 0, ..., 0, Λ, 0, ..., 0)
j=1


= 

n





cj × ej  , Λ × c1 , ..., Λ × cn 

j=1

In order to estimate the size of the coordinates of V , let us compute the determinant ∆ and then the volume of the lattice:
e21 + Λ2 e1 × e2 e1 × e3
···
e2 × e1 e22 + Λ2 e2 × e3
···
..
..
t
.
.
∆ = det(M × M ) = e3 × e1 e3 × e2
..
..
..
.
.
.
en × e1 · · ·
· · · en × en−1

e1 × en
e2 × en
..
.
en−1 × en
e2n + Λ2

468

P.-A. Fouque and G. Poupard

If we assume that E is an order of magnitude of ei , we can compute an
approximation of ∆:
E 2 + Λ2
∆≈

E2
..
.
E2

E2

···
E2
..
.
E 2 + Λ2 . .
.
= Λ2(n−1) Λ2 + nE 2
..
..
.
.
E2
···
E 2 E 2 + Λ2

The LLL lattice reduction algorithm is expected to output a short vector V
of the lattice:
n

V = (e, Λ × c1 , ...Λ × cn ) with e =

cj × ej
j=1

Even if we cannot prove it, we assume that the LLL algorithm outputs a reduced basis with vectors of about the same norm. Of course, this is just heuristic
but it is a well known fact that the results of LLL are much better than what
can be proved. Furthermore, since we use LLL for cryptanalysis, only the result
matters and we will see in section 3.6 that this assumption is validated by the
success of the attack in practice.
If the vectors of the reduced basis have similar
√ norms and if the basis is
“nearly” orthogonal, we obtain, using the volume ∆ of the lattice M , that
n

e2

+

Λ2

×
j=1

√

c2j ≈

∆

1
n

Furthermore, since V is a short vector of the lattice, we assume that all its
coordinates have the same order of magnitude (∀j e ≈ Λ × cj ). We obtain that
√

n+1×e≈

√

∆

1
n

so
n−1
1
e≈ √
×Λ n
n+1

Λ2

+

nE 2

1
n

≈Λ×

E
Λ

and
n

|cj | ≈
j=1

ne
≈
Λ

E
Λ

1
n

1

n1+ 2n
×√
n+1

1
n

1

n 2n
×√
n+1

On the Security of RDSA

469

With E = q and assuming n
Λ and n
q, we ﬁnally obtain ﬁrst order
approximations on the bit size of the integer e and the sum of the coeﬃcients cj :
1
1
1
1
log q − log Λ +
log n − log(n + 1)
n
n
2n
2
1
log q
+ 1−
× log Λ
≈
n
n

log e ≈ log Λ +





n

log 

|cj | ≈ log n + log e − log Λ ≈

j=1

3.4

log q log Λ
−
n
n

Deﬁnition of “Pseudo-Signatures”

Let us assume that we know valid signatures (sj , j , λj ) of n messages Mj . This
means that, for all j ∈ [1, n], 0 ≤ sj < q and γ sj αh(Mj || j ) λqj = j . We note
ej = h(Mj || j ).
We ﬁrst notice that signatures can be combined in order to obtain what
we call “pseudo-signatures”, i.e. quadruples (e, s, , λ) that ﬁt the veriﬁcation
q

equations 0 ≤ s < q and γ s αe λ = but that are not necessarily associated
to any known message. Let c1 , ...cn be n integers. The following formulas allow
to combine n signatures into a pseudo-signature (e, s, , λ):
n



cj × ej

e=

λ=

j=1
n

s0 =



n

c

j=1

cj × sj

n

j=1

=

s = s0 mod q

j=1

λjj  × γ (s0 −s)/q

cj
j

We verify that (e, s, , λ) is a pseudo-signature because 0 ≤ s < q and
q

γ s αe λ

q

n
j=1

= γs × α

cj ×ej

n

×

c

j=1

= γ s0 ×

n

cj

(αej )

j=1

n

×
j=1

λjj  × γ q×

λqj

If we further note k the discrete log of
λ, we obtain the equation
logγ γ s αe λ
so

q

cj

n

=
j=1

s0 −s
q

γ sj αej λqj

in base γ and

cj

n

=
j=1

cj
j

=

the discrete log of

= s + e × a + q × = logγ ( ) = k

470

P.-A. Fouque and G. Poupard

q× +s=k−a×e
where q, s and e are known, a and k are unknown and can be computed if
it lies in a small enough range to make the Pollard-lambda algorithm practical
on λ.
3.5

The Attack

The attack is basically a loop where some bits of the secret key a are found at
each round, from the most signiﬁcant ones to the least signiﬁcant. Let us assume
that, after i rounds, the βi most signiﬁcant bits of the secret key a are known.
We note a = ai + a i , where ai is known and a i is bounded by Ai ≤ a i ≤ Ai .
Initially, A0 = 2, A0 = q − 1 and a0 = 0.
Let us further compute a pseudo-signature (e, s, , λ) using the coeﬃcients
c1 , ...cn output by the LLL-based algorithm of section 3.3 with a parameter Λi
that will be precised below.
n
Firstly, k is equal to the linear combination j=1 cj × kj of the (unknown)
integers kj . Since 0 ≤ kj < q, we have
K i ≤ k ≤ K i with K i = (q − 1)

cj and K i = (q − 1)
cj <0

cj
cj >0

We immediately see that k − e × a is bounded by
K i − e × ai − e × Ai ≤ k − e × (ai + a i ) ≤ K i − e × ai − e × Ai
and consequently that
e × ai
K i − e × Ai
−
−1<
q
q
We observe that
= −

k − e × (ai + a i )
q

≤

e × ai
K i − e × Ai
−
q
q

= (k − e × a)/q so we obtain bounds for :

e × ai
+ δ with δ ∈
q

K i − e × Ai
K i − e × Ai
, ...,
+1
q
q

If the range of δ is not too large, can be computed from λ using an algorithm
described in section 3.2. Since k − e × a = q × + s, we obtain
a=

k − (q × + s)
e

and consequently, using the bounds on k,
Ki
Ki
q× +s
q× +s
−
≤a≤
−
e
e
e
e

On the Security of RDSA

471

We have obtained a new approximation ai+1 of the secret key a:
ai+1 = −

q× +s
e

with

Ki
e

≤ a − ai+1 ≤

Ki
+1
e

Ki
Ki
and Ai+1 =
+1
e
e
We now consider βi = log q − log(Ai − Ai ), i.e. βi is an estimation of the
number of bits of the secret key that have been learned after i rounds of attack.
We estimate the value of βi+1 , i.e. the number of bits that have been learned
after round i + 1, using the results of section 3.3:
Consequently, we deﬁne Ai+1 =

βi+1 = log q − log(Ai+1 − Ai+1 ) ≈ log q − log




≈ log q − log q + log 

n

Ki − Ki
e

|cj | − log e

j=1

≈ log q −

1+

1
n

log q −

1
1
1
log Λi − × log q − 1 −
n
n
n

log Λi

≈ log Λi

Furthermore, the number of group operations needed to ﬁnd

is about

K i − K i + e(Ai − Ai )
q
Always using the results of section 3.3, we can write


n
Ki − Ki
1
1
log
≈ log
|cj | ≈ log q − log Λi
q
n
n
j=1
log

e(Ai − Ai )
q

≈ log(e) + log

Ai − A i
q

≈

1
1
log q + 1 −
n
n

× log Λi − βi

If we assume that log Λi = βi+1 is greater than βi , i.e. that the number of known
bits of a increases, and if we note T the number of group operations that can be
performed to compute , we obtain the estimation
1−

1
n

(log Λi − log q) + log q − βi ≈ log(T 2 )

and ﬁnally
βi+1 ≈ log Λi ≈

2 log T + βi −
1 − n1

1
n

log q

472

P.-A. Fouque and G. Poupard
80

70

60

50

40

30

20

10

0
0

5

10

15

20

Fig. 2. Practical computation time of the attack (log2 of the number of group operation) according to the number n of available valid signatures (|q| = 160 bits).

This enables to calibrate the size of Λi used for lattice reduction in the algorithm
of section 3.3.
We ﬁnally obtain the algorithm of appendix A where the inputs are the public
key (G, γ, α, q), the number T of group operations that can be done in G for each
computation of a discrete log in a small range, and n signatures (sj , j , λj ) of
messages Mj . The output is the secret key a.
3.6

Practical Eﬃciency of the Attack

An actual implementation of the attack conﬁrms the validity of the previous
analysis. It shows that the LLL complexity is small and, consequently, that
most of the computation time is used to compute discrete logarithms that lie in
known ranges. Figure 2 shows the total number of group operation required to
ﬁnd the secret signature key according to the number of known signatures, for
a 160-bit long q parameter.
If we assume that a group operation is performed in 10 milliseconds, the
knowledge of 10 signatures of known messages allows to ﬁnd the secret key in
4 minutes.
As an example, using the randomly chosen 160-bit secret key
a = 783747269568486438745024665497732424427783872122

On the Security of RDSA

473

and 10 signatures of known randomly chosen messages, the algorithm outputs
the following list of approximations of a :
a1 = 699385134427555275284339311004987510346869139626
a2 = 782479287601512066256106326496551372637480929902
a3 = 783821065851910137404362049317488060299468649498
a4 = 783745856938901542621342549531086555421197152107
a5 = 783747195027730332973546090431994377868006041180
a6 = 783747269878977094681369544174970381613011805054
a7 = 783747269567797050637945617507444265545395300956
a8 = 783747269568502213048617608799840610517322561625
a9 = 783747269568486454929541646754729663729190704664
a10 = 783747269568486439419860587327869299275855671372
a11 = 783747269568486438745031810665073621629868186026
a12 = 783747269568486438745024667262630368177995127031
a13 = 783747269568486438745024665497085963603094329441
a14 = 783747269568486438745024665497732432534250967186
a15 = 783747269568486438745024665497732424427791638474
a16 = 783747269568486438745024665497732424427783872134

We observe that after 16 applications of the LLL algorithm, all the digits of
the secret signature key are known, excepted the 2 least signiﬁcant ones.

4

Comparison between RDSA2 and GPS

The attack we have just described shows that the original RDSA scheme cannot
be used. An obvious reparation is to use random masking parameters k chosen
in a larger range. The RDSA2 scheme, described in section 2.1, uses k ∈ [0, qL2 [
where L is an estimation of the size of group G. The consequence is an important
increasing of the computational complexity for both signers and veriﬁers.
The GPS scheme was ﬁrst described in [4]. It is reminded in ﬁgure 3, using the
RDSA notations in order to highlight the similarities between the two signature
schemes. The main diﬀerence is the treatment of x = k − a × h(M || ). In GPS,
the information x is a part of the signature while it enables to compute s and λ
in RDSA2.
GPS is provably secure [12] if k ∈ [0, A[ where A is much larger than q 2 . We
can consider that 1/280 is negligible and consequently we choose A = q 2 × 280 .
A comparison between RDSA2 and GPS shows that:

474

P.-A. Fouque and G. Poupard
RDSA2

GPS

choose a group G with unknown order
choose an element γ ∈ G

key

choose a 160-bit prime number q

generation

choose a secret key a ∈ [2, q − 1]
compute the public key α = γ a
choose k ∈ [2, qL2 [
= γk

choose k ∈ [0, q 2 × 280 [

x = k − a × h(M || )

signature

s = x mod q
λ=γ

veriﬁcation

x−s
q

= γk
x = k + a × h(M || )

signature (s, , λ)

signature ( , x)

s ∈ [0, q − 1]

x ∈ [0, q 2 × 280 + 1 [

s q

γ λ α

h(M || )

=

γ x αh(M ||

)

=

Fig. 3. Compared description of RDSA2 and GPS

– the security of GPS is based on the intractability of the discrete log problem while the security of RDSA2 is based on a stronger assumption, the
intractability of the root problem,
– GPS signatures are shorter than RDSA2 signatures if the group G has more
than 2240 elements,
– the random k is larger for RDSA2 than for GPS so precomputation of
takes more time and requires more random bits for RDSA2,
– on-line computation for the signer requires an exponentiation in RDSA2 to
compute λ while on-line computation of x in GPS takes a negligible amount
of time, even using low cost smart cards,
– veriﬁcation of an RDSA2 signature requires the computation of exponentiations with shorter exponents so veriﬁcation is 16% to 32% longer in GPS
than in RDSA2.
In conclusion, RDSA is not secure and RDSA2 has no advantage on GPS,
whatever the criterion may be, except for veriﬁcation time.

References
1. I. Biehl, J. Buchmann, S. Hamdy, and A. Meyer. A Signature Scheme Based on the
Intractability of Computing Roots. Designs, Codes and Cryptography, 25(3):223–
236, March 2002.
2. J. Buchmann and S. Hamdy. A Survey on IQ Cryptography. In Public-Key Cryptography and Computational Number Theory, pages 1–15. Walter de Gruyter, 2001.

On the Security of RDSA

475

3. A. Fiat and A. Shamir. How to Prove Yourself: Practical Solutions to Identiﬁcation
and Signature Problems. In Advances in Cryptology – proceedings of CRYPTO ’86,
Lecture Notes in Computer Science volume 263, pages 186–194. Springer-Verlag,
1987.
4. M. Girault. Self-Certiﬁed Public Keys. In Advances in Cryptology – proceedings of
EUROCRYPT ’91, Lecture Notes in Computer Science volume 547, pages 490–497.
Springer-Verlag, 1992.
5. N. Howgrave-Graham and N.P. Smart. Lattice attacks on digital signature schemes.
Design, Codes and Cryptography, 23:283–290, 2001.
6. A. Joux and J. Stern. Lattice reduction: A toolbox for the cryptanalyst. Journal
of Cryptology, 11(3):161–185, 1998.
7. A. K. Lenstra, H. W. Lenstra, Jr., and L. Lov´
asz. Factoring polynomials with
rational coeﬃcients. Mathematische Annalen, 261, 1982.
8. P.Q. Nguyen and I.E. Shparlinski. The Insecurity of the Digital Signature Algorithm with Partially Known Nonces. Journal of Cryptology, 15(3):151–176, 2002.
9. NIST. Digital Signature Standard (DSS). Federal Information Processing Standards PUBlication 186–2, february 2000.
10. D. Pointcheval and J. Stern. Security Arguments for Digital Signatures and Blind
Signatures. Journal of Cryptology, 13(3):361–396, 2000.
11. J. M. Pollard. Monte Carlo Methods for Index Computation (mod p). Mathematics
of Computation, 32(143):918–924, July 1978.
12. G. Poupard and J. Stern. Security Analysis of a Practical “on the ﬂy” Authentication and Signature Generation. In Advances in Cryptology – proceedings of
EUROCRYPT ’98, Lecture Notes in Computer Science volume 1403, pages 422–
436. Springer-Verlag, 1998.
13. C. P. Schnorr. Eﬃcient Identiﬁcation and Signatures for Smart Cards. In Advances
in Cryptology – proceedings of CRYPTO ’89, Lecture Notes in Computer Science
volume 435, pages 235–251. Springer-Verlag, 1990.
14. C. P. Schnorr. Eﬃcient Signature Generation by Smart Cards. Journal of Cryptology, 4(3):161–174, 1991.
15. V. Shoup. Lower Bounds for Discrete Logarithms and Related Problems. In Advances in Cryptology – proceedings of EUROCRYPT ’97, Lecture Notes in Computer Science volume 1233, pages 256–266. Springer-Verlag, 1997.
16. P. C. van Oorschot and M. J. Wiener. On Diﬃe-Hellman Key Agreement with
Short Exponents. In Advances in Cryptology – proceedings of EUROCRYPT ’96,
Lecture Notes in Computer Science volume 1070, pages 332–343. Springer-Verlag,
1996.

476

A

P.-A. Fouque and G. Poupard

Cryptanalysis of RDSA [1]: A Detailed Algorithm

Algorithm 1.1 Break-RDSA(G,γ,α,q,T ,{(Mi , (si ,
1 a0 ← 0, A0 ← 2, A0 ← q − 1, β0 ← 0, i ← 0
2 while Ai − Ai > T 2 do

i , λi )), i

∈ [1, n]})

q
2 log T +βi − log
n
1
1− n

3

βi+1 ←

4

7
8
9

Λi ← 2βi+1


e1 Λi 0 · · · 0

. 
 e2 0 Λi . . . ..  where the n rows are viewed as


M ← . .

 .. .. . . . . . . 0  the vectors of a lattice
en 0 · · · 0 Λi
apply the LLL algorithm to M ; let V = (e, Λi × c1 , ...Λi × cn ) be the
shortest vector of the reduced basis
n
s0 ← j=1 cj × sj
s ← s0 mod q
c
n
← j=1 jj

10
11

λ ← j=1 λjj × γ (s0 −s)/q
K i ← (q − 1) cj <0 cj

12

K i ← (q − 1)

13

compute the discrete log of λ in base γ; is known to be in the
e × ai
e × ai
K i − e × Ai
K i − e × Ai
−
,
−
range
q
q
q
q

14

ai+1 ← − q

15

Ai+1 ←

5

6

c

n

cj >0 cj

+s
e

Ki
, Ai+1 ←
e

Ki
+1
e

16
i ← i+1
17 compute the discrete log a of α in base γ; a is known to be in the range
[ai + Ai , ai + Ai ]
18 output the secret key a

