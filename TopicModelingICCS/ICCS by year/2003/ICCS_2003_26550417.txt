A Case Study in Performance Evaluation of Real-Time
Teleoperation Software Architectures Using UML-MAST
Francisco Ortiz, Bárbara Álvarez, Juan Á. Pastor, and Pedro Sánchez
Universidad Politécnica de Cartagena (Spain)
francisco.ortiz@upct.es

Abstract. Reference architectures for specific domains can provide significant
benefits in productivity and quality for real-time systems development. These
systems require an exact characterisation based on quantitative evaluation of architectural features referred to timing properties, such as performance, reliability, etc. In this work, an UML-based tool has been used to obtain a measure of
performance between two alternative architectures. These architectures share
the same functional components, but with different interaction patterns. The
used technique is illustrated with an industrial study in a well-known real-time
domain: teleoperation systems. The obtained results show clear differences in
performance between two architectures, giving a clear indication of which one
is better from this point of view1.

1

Introduction

Our experience in several research projects has allowed us to prove the interest of
reusing a reference software architecture for teleoperation systems [2,5]. The use of
such an architecture has allowed software components to be reused in different applications, making their development easier and decreasing their costs and development
times.
The mentioned architecture was restricted to applications in which service robots
work in structured environments, whose geometrical characteristics are perfectly
known before the operation is performed, and in which reactive behaviour is usually
limited to sensor-driven safety actions. The ROSA (Remotely Operated System Arm)
and TRON (Teleoperated and Robotized System for Maintenance Operation in Nuclear Power Plants Vessels) systems are examples of this type of applications for
maintenance tasks in nuclear power plants [4].
The development of a blasting robot for ship hulls [7,8], whose characteristics differ from the mentioned above, led us to evaluate whether the original architecture
could be re-used for the new system. In this case, the system should work in unstructured environments and reactive behaviour is predominant during some operation
phases. Given these requirements it is necessary either to include new services (i.e. a
computer vision system) or use the existing ones in different ways.
1

This work has been partially supported by FEDER (TAP-1FD97-0823) and GROWTH project (GRD2-2001-50004)

J.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp. 417–428, 2003.
© Springer-Verlag Berlin Heidelberg 2003

418

F. Ortiz et al.

The result of the evaluation was that the performance requirements could not be
met and it was necessary to propose modifications on the original architecture that
combine the original components (trying to minimise the impact of the changes) with
different interaction patterns. The original architecture and an alternative approach are
compared in this paper.
The model used for representing the temporal and logical elements and real-time
requirements of applications has been UML-MAST (Modelling and Analysis Suite for
Real-Time Applications), developed by the University of Cantabria (Spain) [6]. UMLMAST comprises (1) an UML profile, where all the elements required to performed a
RMA analysis [9] are modelled as stereotyped classes, (2) a set of analysis tools, and
(3) a compiler that translates the UML model into a file, analysable by such analysis
tools. The UML profile allows us to describe the system using an UML-based CASE
tool [10]. The analysis model is directly obtainable from the UML description of the
system design. UML-MAST can describe rather complex systems, including multiprocessor and distributed architectures. We present our experience in using UMLMAST in the development of industrial applications.
The paper is organized as follows. In Sect. 2 the two alternative interaction patterns are introduced in order to compare the performance of both schemes. In Sect. 3
some relevant aspects of MAST are reviewed. Section 4 contains different models
that represent different scenarios. In Sect. 5 the results of the analysis are described.
Finally, Sect. 6 gives some conclusions and discusses further works.

2 Two Alternative Architectures Compared
Figures 1 and 2 show the considered components and interaction patterns taken into
account for performance evaluation. Figure 1 describes the original architecture
(arch_1) and Fig. 2 an alternative one (arch_2). Though the schemes showed in the
figures are somewhat oversimplified, are enough to illustrate all the important issues.
The boxes in Figs. 1 and 2 represent the main subsystems of the architectures and
they could enclose tasks and shared resources. Note that the functional components of
both schemes are the same, as well as their interfaces, but not their interaction patterns. The responsibilities of such subsystems are:
• CinServer. This server provides the system with operations for checking whether
a given movement implies a collision between the robot and the environment.
o

In arch_1, CinServer provides this service following an asynchronous
client-server pattern. HighLevelController sends the current robot position to CinServer and retrieves asynchronously the answer that informs
whether the current motion can cause a collision. In the original systems,
this service was provided just before the execution of a given movement, but if the robot operates in unstructured environments then the
service should be required and provided continuously during the motion.
In these conditions, the interactions between CinServer and HighLevelController are a system bottleneck. For this reason the interaction pat-

A Case Study in Performance Evaluation of Real-Time Teleoperation Software Architectures

419

tern between them was modified according to the scheme showed in
Fig. 2.
o

In arch_2, CinServer receives the robot position directly from
LowLevelController and sends a message to HighLevelController if detects a collision. HighLevelController acts as an “Observer” subscribed
to the information produced by CinServer.

•

UserInterface. This subsystem is in charge of interacting with the user. It allows
him to issue the desired command to the robot and to show the status of its execution.

•

LowLevelController. This subsystem physically actuates the robot to move it and
to get data from the sensors of the robot in order to evaluate its global state and
position. This state information is sent to HighLevelController by means of updateStatus. In general this subsystem can be ported to any platform, nevertheless
its execution has been considered in the same node of the other subsystems to
simplify the analysis.

Fig. 1. Arch_1: Asynchronous client-server pattern between CinServer and HighLevelController

Fig. 2. Arch_2: Observer pattern between CinServer and HighLevelController

420

F. Ortiz et al.

The model used for evaluating the timing requirements of arch_1 was based on
the characterization of the architecture timing behaviour described in [3]. Such a description, based on the Rate Monotonic Analysis method [10], is very exhaustive and
allows the designers to reason with confidence about the timing correctness of the
systems developed when using arch_1. But if the interaction patterns change, such
model is difficult to use. For this reason the simpler model described in the following
paragraphs has been used to compare arch_1 and arch_2.
To simplify the analysis, the minimum significant number of tasks has been considered in each subsystem (boxes in Figs. 1 and 2). So, usually each subsystem has
associated only one task. Following this approach the tasks considered to be executed
in the subsystems of arch_1 (Fig. 1) are described in Table 1.
Table 1. Task considered in arch_1 (Fig. 1)
Subsystem

Tasks

Activation

Minimum event interarrival time or period given by

LowLevelController
UserInterface

LLC_Task

Periodic

Motor controller loop.

UI_Task

Sporadic

The rate at which data should be updated in user interface.

CinServer

CinServer_Task

Sporadic

Short enough to avoid collisions (depends on robot speed and
safety requirements)

HighLevelController

HLC_Task

Periodic

Application dependant, but period is larger than in LLC_Task
and shorter than in the rest.

One of the main requirements of the systems is that HighLevelController can not
be blocked while waiting for data or services from other subsystems. In order to make
asynchronous the communications between HLC_Task and the rest of tasks, the data
produced by them are inserted into a shared buffer included in HighLevelController.
This buffer is modelled as a monitor with produce and consume procedures and immediate ceiling priority policy. Only one buffer is considered.
When HighLevelController sends a message to CinServer or UserInterface, it
does not wait for a response. Later, it will inspect the buffer looking for new data
from LowLevelController and the responses to previous services requested to CinServer. If responses do not arrive in time, HighLevelController can take some action,
but this is not a part of the semantics of the messages. The consume call always returns immediately with the last data available even when it has not been updated since
the previous call (data is time-stamped). If the buffer is empty the consume procedure
returns null meaning that no new data is available. If the buffer is full the data is
overwritten2. The main differences between to arch_1 and arch_2 are:
• The queries from HighLevelController to CinServer have been eliminated.
• Instead, LowLevelController sends the robot position to CinServer. If CinServer detects a collision sends a message to HighLevelController.
• As shown in Table 2, there is one more task in HighLevelController
(HLC_Col_Task) that is responsible just for receiving the collision messages
from CinServer and ordering LowLevelController to stop the robot.

2

The important issue is not to get as much as data arrives, but to get the data before deadline
expires. If so, the good data is the last data.

A Case Study in Performance Evaluation of Real-Time Teleoperation Software Architectures

421

Table 2. New tasks considered in arch_2 (Fig. 2)
Subsystem

Tasks

Activation

Minimum event interarrival time or period given by

HighLevelController

HLC_Task

Periodic

Application dependant, but period is larger than in LLC_Task
and shorter than in the rest.

HLC_Col_Task

Sporadic

Short enough to avoid collisions (depends on robot speed and
safety requirements)

3

Analysis of the Architectures Using UML-MAST

In UML-MAST the temporal behaviour is represented by means of three complementary views:
•

Platform Model. It represents the processor, the tasks and the scheduling policies. The platform model corresponding to arch_1 is shown in the Fig. 3. The
platform model corresponding to arch_2 is the same, but includes one more task
(HLC_Col_Task). To simplify the model, the system considered is not distributed3 and all the tasks are scheduled according to a fixed priority policy.

Fig. 3. Platform model
3

For distributed systems, UML-MAST models the communication links as processing resources and the transmission times as execution times.

422

F. Ortiz et al.

•

Logical Components Model. The processing requirements of the operations can
be modelled as well as the access to the resources shared among the different
tasks. As said above, an immediate ceiling protocol has been used to limit the effects of priority inversion. In the implementation in Ada 95 [1], these resources
are protected objects, otherwise the RMA analysis can not be applied.

•

Scenario Model. This view allows us to model the dynamic behaviour of the
system as a set of concurrent transactions. Each transaction represents a set of activities that will be executed sequentially by one or more tasks and it is activated
by external events. A transaction is described attending to:
1.
2.

The events that cause its activation, its deadline and response time.
The way in which the different tasks interact to implement it.

The first point is described by means of associations that attach a given transaction to (1) a description of the arrival pattern of the events that activate it and (2) a
description of its deadline. Transactions, event arrival patterns and deadlines are
modelled by MAST using stereotyped classes. The second point is described by an
activity diagram associated to the transaction. The activities generate events that
are internal to the transaction in which they have been produced, but external to
the rest and therefore may cause their activation. The scenario models corresponding to arch_1 and arch_2 are described in the following section.

4 Scenario Models
Figures 4 and 5 show respectively the scenario models associated to arch_1 (Fig. 1)
and arch_2 (Fig. 2). Note that, as said in the previous paragraph, each transaction of
the scenario models has associated an event arrival pattern and a deadline. For example, transaction ServosControl in Fig. 4 has attached a periodic arrival pattern, PidTick; stereotyped as Periodic_Event_Source (T= 5ms) and a deadline, ServosDeadline, stereotyped as ServosDeadline (D = 5 ms).
Since the architecture is usually developed before that an exact definition of timing
requirements is available, periods and deadlines have been assigned taking into account the requirements of different applications that can be developed using arch_1 or
arch_2. As these requirements vary from application to application, it is only possible
to define upper and lower bounds for periods, deadlines, etc., and perform different
analysis with typical cases. However, it is mandatory that both schemes share the
same requirements to compare them.
Figure 4 shows the scenario model related to the collaboration diagram of Fig. 1. In
this scheme, the services from CinServer are explicitly invoked by HighLevelController when a new position data is received from LowLevelController. For the evaluation
purposes, three transactions are considered: ServosControl, CollisionControl and
UpdateDisStatus. The transaction ServosControl represents the servo control of the
teleoperated mechanisms. The transaction UpdateDisStatus gives the updating of data
in the graphical user interface and the transaction CollisionControl represents how the
collision detection is managed in arch_1. As said above, the interactions of the tasks

A Case Study in Performance Evaluation of Real-Time Teleoperation Software Architectures

423

that collaborates to perform a given transaction are described by an activity diagram.
Figures 6, 7, and 8 show the activity diagrams corresponding to the transactions ServosControl, UpdateDisStatus and CollisionControl. Each element of the activity diagram has a stereotype that defines it in the UML-MAST model. It is beyond the scope
of this paper to describe such a model and the reader is referred to [6] for a detailed
information. But very roughly:

Fig. 4. Scenario model 1








Each swimlane is labeled with the name of the task that performs the activities of
such a swimlane. So, it is easy to identify the tasks involved in each transaction
and their interactions.
Each transaction starts with the arrival of a timed clock-driven event. So, initially
the first task involved in a transaction is in a Wait_State. A Wait_State in the
UML-MAST model represents that the task is waiting for an external event for its
activation. In all the cases considered, the external events are clock events. Note
the correspondence between the names of the Periodic_Event_Source in Figs. 4
and 5 and the names of the Wait_States of Figs. 6–10.
All the activities are stereotyped as Timed_Activity. A Timed_Activity encloses an
operation or a set of operations whose timing behaviour is well described in the
model. When an operation implies the access to shared resources, the immediate
ceiling protocol applies. It is important to remark that all the transactions can be
performed concurrently, despite they are described in separate diagrams.
Finally, a transaction ends when it reaches a timed state that describes the deadline of the transaction. Note the correspondence between the names of
Hard_Global_Deadline of Fig. 4 and the names of the Timed State in Figs. 6–10.

The collaboration diagram of Fig. 2 is associated to the scenario model given in
Fig. 5. This model considers the previous transactions ServosControl and UpdateDisStatus. However, the transaction CollisionControl has been replaced by two transactions. Note that in arch_2 the processing of the collision in HighLevelController is
separate from the rest and performed by a new task (HLC_Col_Task). So, the new

424

F. Ortiz et al.

transactions are CollisionControl2, that deals exclusively with the actions of HighLevelController associated with collisions, and MonitorStatus that represents the rest
of processing. Figure 9 shows the activity diagram associated to the transaction CollisionControl2 and Fig. 10 represents the transaction MonitorState.

Fig. 5. Scenarios model 2

Fig. 6. Scenarios model 1 and 2. Transaction ServosControl

A Case Study in Performance Evaluation of Real-Time Teleoperation Software Architectures

Fig. 7. Scenarios model 1 and 2. Transaction UpdateDisStatus

Fig. 8. Scenarios model 1. Transaction CollisionControl

425

426

F. Ortiz et al.

Fig. 9. Scenarios model 2. Transaction CollisionControl2

Fig. 10. Scenarios model 2. Transaction MonitorState

5

Results of the Analysis

Table 3 shows the response times of a classic RMA analysis of the previously described scenario models. The MAST tool automatically sets task priorities according
to the Rate Monotonic Scheduling analysis technique. As the Table 3 shows, the response times for collision detection (CollisionControl in arch_1 and CollisionCon-

A Case Study in Performance Evaluation of Real-Time Teleoperation Software Architectures

427

trol2 in arch_2) and the user interface update (UpdateDisStatus) are larger in the
scenario model 1 (arch_1) than in the scenario model 2 (arch_2). However, the response time of the transaction ServosControl is a little larger in the scenario 2
(arch_2) than the scenario 1 (arch_1). This is due to the existence of one more task
(HLC_Col_Task) and to the new responsibilities of LowLevelController (messages to
CinServer not considered in arch_1) It must be highlighted that all the considered
simplifications benefit the original scheme of interactions (arch_1). A more complex
and realistic model (not included in this paper for space reasons), that includes more
activities and distributes the HLC_Task responsibilities among several tasks, has produced the results showed in Table 4 (as more tasks were considered, CPU capacity
was increased respect to the one used in Table 3 for avoiding deadlines expiration).
The response times corresponding to arch_1 worsen rather fast when new tasks are
added, while the ones corresponding to the arch_2 remain more stable. The unique
advantage of the arch_1 according to the tables is that the response time of ServosControl task is slightly shorter.
Table 3. Results of analysis (Only Tasks described in Tables 1 and 2)
Transaction
ServosControl
UpdateDisStatus
CollisionControl
CollisionControl2
MonitorStatus

Events arrival
Pattern
Periodic, T = 5 ms
Periodic, T = 100 ms
Periodic, T = 25 ms
Periodic, T = 25 ms
Periodic, T = 25 ms

Deadline
5 ms
100 ms
25 ms

Scenario 1
Response time
3,8 ms
17 ms
14 ms

Scenario 2
Response time
4,8 ms
6,1 ms

25 ms
25 ms

11 ms
13 ms

Table 4. Results of analysis. (Additional tasks in HighLevelController)
Transaction
ServosControl
UpdateDisStatus
CollisionControl

CollisionControl2
MonitorStatus

6

Events arrival
Pattern
Periodic, T = 5 ms
Periodic, T = 100 ms

Deadline
5 ms
100 ms

Periodic, T = 25 ms
Periodic, T = 25 ms

25 ms
25 ms

Periodic, T = 25 ms

25 ms

Scenario 1
Response time
3,1 ms
23 ms

Scenario 2
Response time
3.4 ms
8,1 ms

23 ms
10 ms
16 ms

Conclusions

The two interaction schemes introduced in this work share the same functional decomposition, but their timing behaviour are rather different. From the functional point
of view both designs could be appropriate, but the first one (asynchronous clientserver) is not acceptable with regard to its performance when CinServer has to be
used on line.
Taking into account that the purposes of the analysis were to evaluate and to compare architectural schemes it is necessary to interpret these results under this point of
view. In this way, the main conclusions are:

428

•
•

F. Ortiz et al.

Most of the relevant trade-offs are referred to the interaction patterns among
components and not to their enclosed functionality.
It would be possible to re-use a significant number of existing components if it
would be possible to modify their interaction patterns maintaining their functionality and interfaces.

To summarise, it is much more interesting to define an architectural framework
that defines a set of rules that allow the same components to be shared among systems
with different architectures than trying to define a software architecture for large
domains in which it is nearly impossible to reach the requirements of all of the potential applications. And one of the rules of such an architectural framework should be to
consider the interaction patterns as design entities at the same level that the functional
components. In this way, some original components could be reused to work in nonstructured environments when other interaction patterns are selected, and other components could be replaced by other new ones (i.e. a collisions detection subsystem can
be replaced by a computer vision subsystem).
The study of the performance during the first design phases is useful to compare
different design solutions. At an architectural level such analysis can be of coarse
grain and should be completed in later development phases. But even so, it is necessary an automated support of the timing evaluation process and a standard notation as
UML, despite all its drawbacks for describing architectures.

References
1.

Ada 95 Reference Manual: Language and Standard Libraries. International Standard
ANSI/ISO/IEC-8652, 1995.
2. A. Alonso, B.Alvarez, J.A. Pastor, J.A. de la Puente, A.Iborra. “Software architecture for
a robot teleoperation system”. Proceedings of the 4th IFAC Workshop on Algorithms and
Architectures for Real-Time Control. Portugal. April 1997.
3. Álvarez et al.. “Timing Analysis of a Generic Robot Teleoperation Software Architecture”, Control Engineering Practice, vol 6(6), pp. 409–416. June, 1998.
4. B. Álvarez et al.. “Developing multi-application remote systems” Nuclear Eng. International, vol. 45(548). March 2000.
5. L. Bass et al. “Software Architecture in Practice”. Addison-Wesley, 1998.
6. J.M. Drake et al. “Mast Real-Time View: Graphic UML Tool for Modeling Object Oriented Real Time Systems”. Group of Computers and Real-Time Systems. University de
Cantabria (Internal Report), 2000. Spain. http://mast.unican.es/umlmast
7. Environmental Friendly and Cost-effective Technology for Coating Removal" (EFTCoR).
UE- 5th FP. GROWTH project ref. GRD2-2001-50004, 2001.
8. A. Iborra et al. "Service robot for hull blasting”. The 27th Annual Conference of the IEEE
Industrial Electronics Society (IECON´01), pp. 2178–2183. November, 2001.
9. M.H. Klein et al. “A Practitioner´s Handbook for Real-Time Analysis Guide to Rate
Monotonic Analysis for Real-Time Systems”. Kluwer Academic Publishers, 1993.
10. Reference manual. Rational Sw Corp, 2000. Available at
http://www.rational.com.

