On Generating Random Network Structures:
Trees
Alexey S. Rodionov1 and Hyunseung Choo2
1

Institute of Computational Mathematics and Mathematical Geophysics
Siberian Division of the Russian Academy of Science
Novosibirsk, RUSSIA +383-2-396211
alrod@rav.sscc.ru
2
School of Information and Communication Engineering
Sungkyunkwan University
440-746, Suwon, KOREA +82-31-290-7145
choo@ece.skku.ac.kr

Abstract. Random trees (RTs) are widely used for testing various algorithms on tree-type networks and also for generating connected graphs
similar to real nets. While random topologies based on RTs are generally
accepted as network models, the task of their generation is almost unexplored. In this paper we discuss the set of basic algorithms for generating
random trees. The fast algorithms with proven properties are presented
for generating random trees under conditions for given restrictions, such
as a limited node degree, ﬁxed node degrees, and diﬀerent probabilities of
edge existence. Generating random graphs similar to physical networks
are underway.

1

Introduction

In this paper we present the set of basic algorithms for generating random trees
(RTs). RTs are used for testing various algorithms on tree-structural networks
and as a base for further algorithms for generating connected graphs. Random
graphs are widely used as a model of communication networks, usually for the
testing of control algorithms [1,2,3]. Using real network structures for an algorithm testing is impossible with a simple reason: to achieve reliable results the
large number of diﬀerent structures with given properties is necessary while actual data for real network structures are usually inaccessible and the number of
such real structures is small. While random trees and graphs are widely used
as a network model, the task of their generation is almost unexplored. It seems
that most authors who use random trees and graphs as a model consider the
task as an obvious one. Still there are a lot of problems in the task of random
graphs generation, especially when complex limitations are loaded on the graph
structure. The usual requirements are to guarantee the uniformity on the given
This paper was partially supported by BK21 program. Dr. H.Choo is the correspondent author
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 879–887, 2003.
c Springer-Verlag Berlin Heidelberg 2003

880

A.S. Rodionov and H. Choo

space of graphs (to the enumeration) and attainability of all graphs from the
given space. Hereafter we discuss some base approaches for the generation of
RTs and present some eﬀective algorithms. The rest of the paper is organized as
follows. Section 2 is devoted to the base approaches, notations and concepts. In
Section 3 we discuss about the generation algorithms of RTs for equal probabilities of edge existence. Section 4 presents the algorithm for generating RTs with
diﬀerent probabilities of edges existence. Section 5 is a brief conclusion.

2

Preliminaries

The variable types are clear from the context usually, or are stated in comments.
The following procedures are used in the algorithms descriptions:
• INC(n), DEC(n) – increment and decrement operators;
• FindPlace(x,V,OK) – integer function, returns the index of the ﬁrst element
in vector V equal to x. OK is TRUE if such element is found and FALSE in
the opposite case;
• remove(x,V) – removes element x from vector V (the last element replace
x). If x is not belongs to V then no action is done;
• rand() – random number uniformly distributed on (0, 1);
• random(n,m) – integer random number uniformly distributed on [n, n +
1, . . . , m], n ≤ m;
• random(P,n,m) – integer random number distributed on [n, n + 1, . . . , m],
n ≤ m with probabilities pi = P (xi = n + i − 1), i = 1, 2, . . . , m − n + 1;
• Call Alg(Input,Output) – Call the algorithm or procedure Alg with input
Input and output Output.
Let us denote arbitrary non-oriented graph with N nodes and M edges and
without multiple edges as G(N, M ). Several approaches can be used for the
random graphs generation. First and most ineﬃcient approach (but still widely
used) is the trial method. A random graph with given number of nodes (and
possibly edges) is generated and then its properties are checked to answer the
given limitations. As the number of possible G(N, N −1) graphs (with all possible
enumerations of nodes) is
S=

N (N −1)
2

N −1

N (N − 1)
!=
2
(N − 1)!

N (N −1)
!
2
N (N −1)
2

2

−N +1 !

,

(1)

while the total number of all N -node trees (with all possible enumerations of
nodes also) is only N N −1 , the trial method is obviously ineﬀective for RT generation.
Next basic approach is the “sequential growth”: each new element is added to
the generated graph without violating the limitation and with guaranteeing its
properties. Once more there are two possibilities: either to use trial or “smart”
method on each step. We use the sampling without repetition for trial method.

On Generating Random Network Structures: Trees

881

As a “smart” method we use the method of admissible choice (MAC). This
is the method in which on each step the choice is done only from the set of
elements that 1) keeps the graph in a given class and 2) does not allow to break
any limitation. Let us denote:
• Xi – set of nodes in the generated graph on the i-th step;
• Ei – set of edges in the generated graph on the i-th step;
• Ai – set of edges that are allowed to be added to the generated graph on
the i-th step;
• Ini – set of edges that are to be added to Ai before the (i + 1)-st step;
• Exi – set of edges that are to be excluded from Ai before the (i + 1)-st step;
• vi – i-th node (vertex) of a graph;
• eij – edge that connects vi and vj ;
• X(G), E(G) – sets of nodes and edges of the graph G;
• C(N ) – the complete graph with N nodes.
Thus, Ai+1 = Ai \Exi ∪Ini . Some limitations can lead to the empty Ai+1 . In
this case the rollback is needed by one step. If est is the last edge chosen before
the deadlock then it transfers from Ai to Exi .
The simple example is to generate random trees in the case of equal probability of an edge existence. If the trial method is used, then after each new edge
selection the test is done if addition of this edge makes a cycle or multi-edge in
a tree. If yes then the edge is rejected and choice repeats. If MAC is used then
ﬁrst we choose uniformly any node as a root, let it be vf . Thus
A1 = {ef 1 , ef 2 , . . . , ef f −1 , ef f +1 , . . . , ef N }.

(2)

If on the i-th step the edge est is selected (t-th node is new) then
¯ i }.
Exi = {ect |vc ∈ Xi }, Ini = {etd |vd ∈ X

3

(3)

Algorithms

First we formally describe the algorithm for generating random trees sketched
above and then discuss about more complex cases of random trees with limitations.
3.1

The Algorithm for Generating Random N -Vertex Trees

For generating random N -vertex trees (the isomorphism is possible) the following
fast algorithm is oﬀered:
Fast Random Tree Generating Algorithm.1
Input: N is the number of nodes.
Output: OU [1..N − 1] and IO[1..N − 1] are the vectors of numbers starting and
ending nodes for the resulting tree edges (i-th edge connects node OUi with
IOi ).
1

Some algorithms discussed in this paper including this one were ﬁrst programmed
for the application package Graph-ES, see [4,5,6]

882

A.S. Rodionov and H. Choo

1. for i:=1 to N do
2.
I[i]:=i;
\\ Initial vector of node numbers
3. endfor;
4. l:=random(1,N);
\\ Choose the root
5. K:=I[N]; I[N]:=I[l]; I[l]:=K;\\ Replacement with the last node
6. for m:=1 to N-1 do
7.
t:=random(1,m);
\\ New node
8.
s:=random(m+1,N);
\\ Node of "growth"
9.
OU[m]:=I[t]; IO[m]:=I[s]; \\ Edge registration
10. K:=I[t]; I[t]:=I[N-m]; \\ Replacement: from N-m+1 to N I[N-m]:=K;
\\ nodes that are in a tree already
11.endfor.
Remark: It is clear that this algorithm needs only 2N − 1 calls to the random number generator and uses the minimum memory (N + 4 integers for the
case of equal probabilities and N + 1 reals additionally in the case of diﬀerent
probabilities of edge existence).
The following theorem is proved for this algorithm.
Theorem 1. Fast Random Tree Generating Algorithm creates any of N -vertex
tree with equal probability 1/N N −1 .
Proof is rather obvious but tiresome. At ﬁrst the equal probability of entire
results is proved and then it is proved that the number of diﬀerent results is
equal to N N −1 . As it is the well-known number for diﬀerent N -node trees (all
renumbering included), the attainability is proved also. For the complete proof,
refer to [7].
3.2

Generating Trees with the Restriction on a Maximum Node
Degree

Let us have the limitation on the maximum degree of nodes in a tree: deg(vi ) ≤
Deg. This leads to the new deﬁnition of Exi in comparison with the previous
case:
if deg(vs ) ≤ Deg,
{ect |vc ∈ Xi }
Exi =
(4)
¯ i } otherwise.
{ect |vc ∈ Xi } {esd |vd ∈ X
The addition of new edges is similar to the case of the unconditional random
tree generation, but the set of nodes that are in the tree already is divided into
two parts: those with maximum degree (Nm ) and those with degrees under it
(N< ). New edge must be chosen to connect some free node with the one in N< .
The algorithm looks as follows:
Algorithm for Generating Trees with Limited Node Degrees
(GTD).
Input: N is the number of nodes; Deg is the possible maximum degree of nodes.
Output: OU [1..N − 1] and IO[1..N − 1] are the vectors of starting and ending
nodes for the resulting tree edges, respectively (i-th edge connect node OUi with
IOi ), Degrees(1 × N ) is the vector for the degrees of nodes.

On Generating Random Network Structures: Trees

883

1. for i:=1 to N do
2.
I[i]:=i; Degree[i]:=0;
\\Initial vectors
3. endfor;
4. l:=random(1,N);
\\ Choose the root
5. R:=I[N];I[N]:=I[l];I[l]:=R;\\ Replacement with the last element
6. m:=1;
\\ current numbers of nodes in a tree and
5. k:=0;
\\ nodes restricted for further choice
8. while m<N do
\\ Main cycle
9.
s:=random(N-m+1,N-k);
\\ For admissible node in a tree
10. t:=random(1,N-m);
\\ For new node
11. IO[m]:=I[t]; OU[m]:=I[s];\\ Registration
12. INC(Degree[I[t]]); INC(Degree[I[s]]);
\\ Now let’s Check for the maximum possible degree
\\ If YES then restrict the node for future choice
13. if Degree[I[s]]=Deg then
14.
I[s]:=I[N-k]; INC(k);
15. endif;
16. R:=I[t];
\\ Rearrange the working vector: from N-k+1 to
I[t]:=I[N-m]; \\ N - nodes restricted for further selection
I[N-m]:=R;
17. INC(m);
\\ Working step is done
18.endwhile.
Remark: There cannot be a deadlock in this algorithm: as 2 ≤ Deg ≤ N − 1,
the subset Xi∗ = {vj |vj ∈ Xi &deg(vj ) < Deg} is always non-empty (at least the
last node added to the generated tree always has degree one). And Ai+1 includes
all the edges that connects these nodes with free nodes.
From this we can simply construct the algorithm for generating unbalanced
binary tree (B-tree) with the number of nodes N > 4. Note that node degree in
B-tree is limited to 3. So we can use the following generating scheme:
Algorithm for Generating B-trees.
Input: N is the number of nodes.
Output: OU [1..N − 1] and IO[1..N − 1] are the vectors of numbers starting and
ending nodes of the resulting tree edges (i-th edge connect node OUi with IOi ),
Root is the number of root node.
1.
2.
3.
4.
5.
6.
7.

N1:=random(1,N+1); N2:=N-N1+1;
Call GTD(N1,3,OU1,IO1,Degree1);
Call GTD(N2,3,OU2,IO2,Degree2);
Using vectors Degree1 and Degree2 the nodes s and t are chosen
from nodes with degree 1 in both trees, respectively;
Renumbering of nodes: the node s becomes node number N1 in
first tree, the node t becomes node number N1 in second tree.
Root:=N1;
\\ Root is assigned
for i:=1 to N1-1 do

884

A.S. Rodionov and H. Choo

8.
IO[i]:=IO1[i];OU[i]:=OU1[i]; \\ First tree is the left part
9. endfor;
10. for i:=N1 to N1+N2-1 do
\\ Second tree is the right part
11. IO[i]:=IO2[i]+N1-1; OU[i]:=OU2[i]+N1-1;
12. endfor.
Remark: If we assume the possibility of one-side B-tree then N 2 can be 0. In
this case we simply generate one tree with restriction Deg = 3 and then choose
a root from all nodes with a degree of 1 or 2.
3.3

Generating Trees with Given Node Degrees

Now let us have the strict values for deg(vi ) in the resulting tree. This is more
complicated case, because there can be a deadlock in direct use of the basic
algorithm. In fact, it is enough that
deg(vj |vj ∈ Xi ) = 2(i − 1). For example,
j

if some vs and vt both have degree one where vs is selected as a root on the
preliminary step, and est is the ﬁrst choice, then we have the deadlock on the
very ﬁrst step of the algorithm. To avoid the deadlock we employ the following
rule: each time when we have

j

deg(vj |vj ∈ Xi ) = 2(i − 1) − 1 &(i < N − 2)

we add all edges that connects nodes from Xi with free nodes with prescribed
degree one to the Exi .
Let us prove the correctness of this rule based on the proof by contradiction.
Assume that
deg(vj |vj ∈ Xi ) = 2(i − 1) − 1. The deadlock will take place if
j

and only if next node has degree one. Assume that all free nodes (their number
is N − i) have the prescribed degree one. So the total sum of degrees by all nodes
is 2(i − 1) − 1 + N − i = N + i − 3 while for a tree it must be 2(N − 1). We have
a contradiction, so our rule is proved to be correct.

4

Generating Trees with Diﬀerent Probabilities of Edge
Existence

This case diﬀers from the previous one only in the procedure of a new edge
choice. In the case of equal probability the set Ai is virtual and choice is made
between nodes, and now we need to have it in some form that allows us to make
choice of new edge as a numbered pair of nodes. Note that in general case the
sum of probabilities of the edge existence is not equal to 1 as these events are
not alternative. Thus for the choice of one edge from the set we use normalized
probabilities p∗i = pi /

n

j=1
N (N −1)
2

pj .

as n. In hereafter we use the presentation of undirected
Let us denote
graph with N nodes by the up-diagonal part of its adjacency matrix V V unfolded
into a vector of the length n. We denote this vector as D(G) or simply D.

On Generating Random Network Structures: Trees

885

Obviously there is one-to-one correspondence between any element V Vij and
some element Dl . Let us derive a formula for l through i, j and N .
Each element V Vij has i − 1 rows above it and k-th row contains N − k
elements that belong to the up-diagonal part. The i-th row contains j − i − 1
elements to the left of V Vij which belong to this up-diagonal part. Thus
l = [(N − 1) + (N − 2) + . . . + (N − i + 1)] + j − i =

(2N − i)(i − 1)
+ j − i. (5)
2

To obtain i and j from the values of l and N the following primitive algorithm
is provided.
1.
2.
3.
4.
5.
6.
7.
8.
9.

procedure RowCol(N,l : integer; var Row,Col: integer);
var m : integer;
begin i:=1;
while (i<N) and (m>0) do
m:=m-N+i; INC(i);
endwhile;
Row:=i-1;
Col:=N+m;
end RowCol;

Note that if we don’t need to save the computer memory it is simpler to use
the array of pairs (i, j) instead of transformation described above. Now we go
on to the algorithms.
As any node inevitably belongs to the spanning tree, we can choose any one
as a root on the preliminary step with equal probability. Then we construct the
initial list (vector) of possible edges as list of edges incident to the root.
It’s simple to obtain the maximum possible length Lm of the list of possible
edges: recollect that with each new i-th edge chosen we eliminate from it i − 1
edges that connected new node with the nodes from Xi and include N − i edges
¯ i . Thus, after completion the i-th
that connect new node with the nodes from X
step we have
L = (N −1)−1+(N −2)−2+(N −3)−3+. . .−(i−1)+(N −i) = (N −i)i, (6)
and Lm = N 2 /4 . Any additional limitation will only decrease this number.
The pseudo code of the algorithm looks as follows.
Algorithm for Generating Tree with Diﬀerent Probabilities of Edge
Existence and Limited Maximum Node Degree.
Input: N > 1 is the number of nodes, P rob[1..n] is the vector of probabilities of
edges existence (this vector corresponds to the εij = P (eij exists) ), Deg is the
possible maximum node degree.
Output: OU [1..N − 1] and IO[1..N − 1] are the vectors of the resulting tree edges
starting and ending nodes numbers (i-th edge connect node OUi with IOi ),
Degrees(1 × N ) is the vector of the nodes degrees.
Working arrays and variables: X[1..N −1] is the vector for numbers of nodes that
are in a generated tree already, W [1..K], P [1..K] – vectors of numbers of edges

886

A.S. Rodionov and H. Choo

admissible for choice on a step and their normalized probabilities, respectively.
M is current number of nodes that are in a tree already and K is a number of
edges that are admissible for choice on a current step.
1.
2.
3.
4.
5.

6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21.
22.
23.
24.
25.
26.
27.

n:=N*(N-1)/2;
\\ Whole number of possible edges
\\ Initialization of the vector for edge numbers
for i:=1 to n do I[i]:=i; endfor;
\\ Initialization of the vector for node degrees
for i:=1 to N do Degree[i]:=0; endfor;
l:=random(P,1,n); X[1]:=l; \\ Root is selected
S:=0.0; j:=0; M:=1; \\ M - current number of selected nodes,
K:=N-1;
\\ K - current number of free nodes
\\ Now let’s obtain the vector for admissible edges
\\ and Sum of probabilities for future normalization
for v:=1 to l-1,l+1 to N do
INC(j); W[j]:=I[InUpDiag(j,l)];
S:=S+Prob[InUpDiag(N,v,l)];
endfor;
for i:=1 to N-1 do
\\ Main cycle
\\ Probabilities normalization
for v:=1 to K do P[v]:=P[v]/S; endfor;
j:=W[random(P,1,m)];INC(M);OldS:=S; \\ New edge is selected
\\ Let’s obtain the numbers of adjusted nodes and increment
\\ thier degrees
Call RowCol(N,j,s,t); INC(Degree[s]); INC(Degree[t]);
\\ Now let us define which node is new one
w:=FindPlace(s,X,OK);
if OK then NewNode:=t else NewNode:=s; s:=t; endif;
\\ s is the "old" node in the selected edge
X[M]:=NewNode;
\\ Registration of a new node
if Degree[s]=Deg then
\\ Check for maximum degree
for t:=1 to N do
\\ All free edges connected with a node with maximum possible
\\ degree must be removed from the set of admissible
w:=FindPlace(t,X,OK);
if not OK then
q:=InUpDiag(N,t,s); S:=S-P[q]; remove(q,W); DEC(K);
endif; endfor; endif;
\\ Now let us exclude all edge that connects new node with
\\ old ones from the set of admissible and include edges that
\\ connect new node with free ones into it
SS:=0.0;
for v:=1 to NewNode-1,NewNode+1 to N do
t:=InUpDiag(X[v],NewNode); w:=FindPlace(t,W,OK);
if OK then S:=S-P[w]; remove(t,W); DEC(K);
else SS:=SS+Prob[t]; INC(K); W[K]:=t;

On Generating Random Network Structures: Trees

887

28.

endif endfor;
\\ Let us recalculate a sum for normalization
29.
S:=SS+S*OldS;
30. endfor.
The procedure InUpDiag (line 8) is for expression (5).

5

Conclusion

We have presented general methods and computer algorithms for generating
random trees with many essential properties. It is shown that the use of trial
method is mostly ineﬀective. Meanwhile the time complexity of the proposed
algorithms based on the consequential tree growth are proven to be eﬀective
in terms of the number of operations and the memory use. Random trees are
widely used in diﬀerent applications by themselves, and furthermore can be
eﬃciently employed for generating various connected graphs. As graphs used in
applications have diﬀerent limitations, their spanning trees must satisfy them
too. Our basic algorithms allow those. In the future we present algorithms for
generating connected graphs and graphs “similar to real nets.” The last task
assumes deﬁnitions of some special limitations that are typical for such graphs.

References
1. M. Doar, Multicast in the ATM environment. PhD thesis, Cambridge Univ., Computer Lab., September 1993.
2. M. Doar, “A Better Mode for Generating Test Networks,” Proc. Global Telecommunication Conf. GLOBECOM’96, pp. 86–93, 1996.
3. Chai-Keong Toh, “Performance Evaluation of Crossover Switch Discovery Algorithms for Wireless ATM LANs,” Proc. of INFOCOM’96, pp. 1380–1387, 1993.
4. A.S. Rodionov, L.N. Postnikova, and O.K. Rodionova, “Program Complex for
Graph Generating in the GRAPH-ES Package,” Materials of the Conf. “Computers and System Analysis,” Novosibirsk, 1982, pp. 13–15., 1982. (in Russian)
5. A.S. Rodionov, “Graph Generating in the GRAPH-ES Package,” Materials of the
Conf. “Methods and Programs for Solving Optimization Problems on Graphs and
Nets,” Novosibirsk, 1982, Part 1, pp. 170–171., 1982. (in Russian)
6. M.I. Netchepurenko, V.K. Popkov, S.M. Mainagashev, etc, Algorithms and Programs for Solving Optimization Problems on Graphs and Networks. Novosibirsk,
Nauka P.A., 1990, 515 p. (in Russian).
7. G. Omarova, “Program Complex for Graph Generating,” Proc. of Young Scientists Annual Conf., Institute of Computational Mathematics and Mathematical
Geophysics of Siberian Division of the Russian Academy of Science, Novosibirsk,
pp. 174–181, 1998. (in Russian)

