Eﬃcient Load Balancing by Adaptive Bypasses
for the Migration on the Internet
Yukio Hayashi
Japan Advanced Institute of Science and Technology, Ishikawa, Japan

Abstract. We study a dynamic load balancing problem for servers on
the Internet as Grid, based on the diﬀerences of distributed computing
to parallel computing. We propose an adaptive method according to
initially assigned load; the optimal migration ﬂow is directly obtained
without any iterations, and the conditions of migration for the bottleneck
edges are relaxed by the bypasses on a cactus adaptively extended from
a spanning tree. Simulation results show that the number of rounds for
the migration is decreased under 2/3 for the conventional method, and
that the cost with respect to the instability of migration is also decreased
in about the half. Thus, the adaptively constructed cactus is considered
as a practically eﬃcient topology.

1

Introduction

On the rapid growth of computer networks, distributed computing has attracted
considerable attention. In the eﬃcient distributed computing, load balancing
is one of the important issues. The problem is to balance the load of servers
(computers in general) on a network such as the Internet. In other words, it is
to suppress the idling or over-load states as few as possible by using only local
communications between servers. Thus, we should remark that it is diﬀerent
from the load balancer for Web-accesses at the end of switch level (Layer 4 or
5) based on the DNS round robin [1] or for a centralized master/slave system.
Load balancing algorithms have been so far developed for parallel computers, whose processor is corresponding to the server in a distributed system. For
example, to only locally balance the diﬀerences of load between neighbors, initiation methods are triggered by a processor with load level under or over a certain threshold. The former is called “receiver-initiation,” and the later “senderinitiation” [7]. They are very simple but ad hoc. In addition, the global balancing
is not guaranteed, and the setting of threshold is generally diﬃcult.
On the other hand, the most popular approach to avoid the returns of migration is based on two phases: 1) calculation of the migration ﬂow on each connection, 2) migration of the load between the nearest-neighbors in run-time. As the
typical strategies [10], there are dimension exchange (DE) and diﬀusion (DF)
methods. With the DE method, a processor communicates its nearest-neighbor
one at a time. It is suitable for the parallel computer on a special homogeneous
architecture such as the hyper-cube structure. With the DF method, a processor communicates all of the nearest-neighbors. It is superior for asynchronous
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2658, pp. 257–266, 2003.
c Springer-Verlag Berlin Heidelberg 2003

258

Y. Hayashi

processings in multi-port communications [10] associated with a heterogeneous
distributed system. Therefore, we focus the DF method for load balancing in
distributed systems on a general topology.
Recently, the optimal polynomial scheme (OPS) within a ﬁnite number of
iterations has been proposed [3]. The key-idea is to iteratively control polynomials for the calculation of diﬀusion ﬂow by using the eigenvalues of a Laplacian.
For parallel computers, it is an established method as a generalization of the
conventional ﬁrst order, second order, and Chebyshev schemes, and extended to
the connection structure of a cartesian product of graphs [4]. However, there is a
problem for the ordering of migration. It may cause a chain of load requirements
for mutually related cycles, then a processor must be waited for a long time
until the arrival of much load. Moreover, the calculations of all eigenvalues are
necessary in advance for a topology. However, it is not negligible in distributed
systems because the topology may be changed on the Internet, while to ﬁnd the
best topology is still open [2] (may be intractable).
In this paper, we propose an adaptive method according to initially
assigned load. In this method induced from a quadratic programming (QP)
problem [3][6] equivalent to solving the DF method, the optimal ﬂow is obtained by a variation or perturbation on a cactus adaptively extended
from a spanning tree (as a least connected component). The merits in computation and migration are that it can be directly calculated by the independency
of each cycle in a cactus and the eﬃcient message passings on a tree without
cycles, and that the conditions of migration for the bottleneck edges are
relaxed by bypasses on a cactus. Indeed, we show the proposed method is
more eﬃcient than the conventional tree walking algorithm (TWA) [7] through
simulations for one-port and multi-port cases; The number of rounds is decreased under a certain ratio by the relaxation of the conditions for migration.

2

Dynamic Load Balancing Problem

In this section, we present a new problem setting for a dynamic load balancing in
distributed computing on the Internet. Then, we point out that the DF method
is equivalent to a QP problem, whose form is applied to the derivation of a
variational or perturbative method on a cactus in the next section.
2.1

Distributed System on the Internet

Considering the diﬀerences of distributed computing to parallel computing: loose
coupling, independence of processing elements, and heterogeneity [8], we deﬁne
the load balancing problem in a network based on IP packet routings. To simplify
the discussion, we assume that the performances of servers are the same.
– The amount of load is deﬁned by the ratio of processes in ready state to the
performance, which is measurable between the adjacent servers. We assume

Eﬃcient Load Balancing by Adaptive Bypasses

259

it is divisible as same in many literatures [2][3][4][6][10], because our application considered in this paper has very much data or many combination of
parameters in independent processes.
– The connection between servers are logical on dynamic IP packet routings.
We consider a computer-system on the Internet or in a WAN as Grid. However, the proposed method in this paper is applicable to a smaller system in
a LAN.
– The connection structure is not restricted to regular ones, such as a ring,
lattice, or homogeneous Cayley graph, but a heterogeneous general topology
with both dense and sparse connections.
– Since long-distance connections may exists, we basically consider asynchronous local communications between servers.
Thus, processings are dominant than communication overheads in our application. Strictly speaking, the deﬁnition of load index is impossible without
actually running, because it depends on many factors: not only on the response
times for CPU, memory and I/O resources, but also on their communications
or process granularity. It is known as “Key Issues in Dynamic Load Balancing”
[10]. However, it is natural to consider the estimated values in a large problem
with very much data or many combination of parameters.
2.2

Equivalent QP Problem to the DF Method

Although many schemes have been proposed for the DF method [2][3][4][6], it
essentially result in solving a diﬀusion equation by a discrete Laplacian L on a
simple undirected graph (V, E), whose vertices and edges are corresponding to
the servers and connections, respectively.
The matrix-vector representation is


. . . . . . −we . . . . . .  f (1) 
 .. . .
.. ..   . 
 .
. 0
. 
. . 


 . 


.
.

f (u) 
Lf =  −we 0
we .. .. 
,



 .
  .. 
.
.
.
.
..
..
. . .. 
. 
 ..
f
(|V
|)
... ... ... ... ...
the u th element is

Lf (u) = −

we (f (v) − f (u)),

(1)

v∼u

where v ∼ u denotes a set of the adjacent vertices to u ∈ V , f (u) the amount of
load at server u, we = we¯ > 0 the weight of edge (e; u → v or e¯ : v → u ∈ E,
which depends on only choosing the direction).
In this paper, we is deﬁned as “the stability of traﬃc for the migration between servers” (e.g. time-invariance measured by ping), not as an accelerative
parameter in numerical schemes for the DF method. To discuss the characteristics of traﬃc, the conventional queuing theory based on independent Poisson

260

Y. Hayashi

arrival is insuﬃcient, in even macroscopic phase transition, a statistical analysis
such as Contact Process is needed for the self-similarity of packet density ﬂuctuations [9]. However, it is beyond our present scope. Thus, we don’t consider
the weights of communication eﬃciency for data transfer speed with delay or
band-width, because it is microscopically unstable and indeﬁnite in the dynamic
routings.
Let us consider a diﬀusion equation:
∂f
= −Lf .
∂t

(2)

It is converged to the solution
def
f¯ =

f (u)
,
|V |

u∈V

(3)

with monotone decreasing u∈V (f (u) − f¯)2 . It is also known that the total load
u∈V f (u) is conserved in (2) at any time.
Intuitively, the ﬂow for migration is accumulated by the right side of (2)
according to the diﬀerence of load between adjacent servers, and each ﬂow on e
is enhanced to be much migration as larger we (more stable) in the right side of
(1).
On the other hand, as ﬁrst order scheme, the diﬀerence equation for (2) is
given by
f k = (I − ∆tL)f k−1 = F × . . . × F f 0 ,
(4)
k
def

k

where F = I−∆tL, I denotes an unit matrix, f the load vector at k th iteration,
f 0 initial load vector. We assume that the step-width ∆t satisﬁes 1 ≤ ∆t ×
e∈Eu we , where Eu denotes a set of edges connected to u ∈ V [6]. Hereafter,
we rewrite we by ∆t × we .
Since the convergence of (4) is very slow, other schemes have been developed
[3][4][6], in which we use that the equation (4) is equivalent to
yek−1 = −we (f k−1 (v) − f k−1 (u)),
zek = zek−1 + yek−1 , ze0 = 0,
f k (u) = f k−1 (u) −

yek−1 ,
e∈Eu

and also to the following QP problem [3][6],
min

1 T
−1
z,
2z W
0
¯

s.t. Bz = f − f ,
def

(5)
(6)

where W = diag(we ), B denotes the incidence matrix, z ﬂow vector for the
migration (ze the ﬂow on an edge e ∈ E, the positive value corresponds to the
def
direction), ¯
f = (f¯, . . . , f¯) the balancing solution vector of (3).

Eﬃcient Load Balancing by Adaptive Bypasses

261

In the QP problem, the balancing condition (6) includes a feasible solution
with wastful ﬂows on cycles, therefore the minimization (5) is needed. In other
words, the equivalent DF method implicitly gives us the optimal solution as the
global balancing. Note that (5) represents a cost with respect to the instability
of migration. If we don’t consider the weight (as all we = 1), it becomes a simple
cost for the no-wastful ﬂow.
2.3

Eﬃcient Message Passing on a Tree

When the connection structure is a spanning tree, the ﬂow ze is directly obtained by eﬃcient message passings, instead of the iterative calculations in such
[2][3][4][6]. It is known as TWA [7], in which a feasible solution for (6) is the
optimal, then ze is recursively calculated from leaves to the root as follows.
For a leaf u: ze = f (u) − f¯,
where e ∈ E is an edge to the parent of u ∈ V .
For others: ze = f (v) − f¯ + e ze ,
where e ∈ E is an edge to the parent of v ∈ V , and {e} in the summation
is a set of edges from the children of v.
Although TWA is seemed to be a centralized control method, the communications are composed of the sending/receiving values of ze or the accumulated
load (the individual values of load are not needed) to each parent and the broadcasting the value f¯ from the root, its additional computation is only (3) at the
root. Therefore, they can be performed by locally asynchronous communications
and processings in a distributed manner.

3

Adaptively Constructed Cactus

In this section, for the load balancing, we propose an adaptive method on a
cactus. A simple graph, whose each edge is contained in an exactly one cycle,
is called “cactus.” In the proposed method, we show that the optimal ﬂow is
directly obtained by a variation or perturbation for the QP problem, in which the
ﬂows of bottleneck edges are bypassed on a cactus. Consequently, the conditions
of migration are relaxed, and the number of rounds is decreased as shown in the
next section.
First, we consider a spanning tree as the least connection structure among
servers. After applying TWA to it, at each vertex u, we ﬁnd a bottleneck edge:
e = arg max

e∈Eu

|ze |2
we

,

which depends on the initial load.
Next, in the connected edges to u, we ﬁnd the pair e which minimizes the
cost for the extended QP problem by adding a bypass e as shown in Figure 1.
The ﬂow ze has the inverse direction of ze at u (for input or output).

262

Y. Hayashi

We call the following approach “variation or perturbation,” because the problem is extended to the minimization (5) on a cactus according to the initial load.
Note that the balancing condition (6) still holds due to the bypass modiﬁcations.
For the bypass ﬂow ∆z on e , the variation of cost in (5) is given by
def

δC(∆z) =

(ze − ∆z)2
(ze − ∆z)2
∆z 2
+
+
−
we
we
we

ze2
z2
+ e
we
we

.

∂(δC)
= 0. Since each
The most decreasing is obtained at the extreme point ∂(∆z)
cycle on a cactus is independent, we can easily derive the solution

∆zopt =

we we ze + we we ze
> 0.
we we + we we + we we

(7)

From this, we also derive δC(∆zopt ) < 0; the cost is always decreased by adding
bypasses on a cactus.
Thus, we can obtain the optimal solution for the larger QP problem (equivalent to solving the DF method) on an adaptively extended cactus by applying
only local modiﬁcations, because each cycle is independent; If there are common
edges on cycles, iterative calculations are necessary. We summarize the adaptive
method on a cactus as follows. The communication complexity is O(|V |).
< Distributed Algorithm on a Cactus >
Step 0. At the trriger from a server with heavy load, the following processes
for the global balancing are initiated in run-time.
Step 1. Construct a minimum spanning tree (MST) by applying a distributed
algorithm e.g. [5]. Here, the distance may be based on geographical locations
of servers, or on the averaged communication delay.
Step 2. Calculate the ﬂow by applying TWA to it.
Step 3. Find a bottleneck edge and the candidate of bypass at each vertex,
independently. To construct a cactus (Figure 2), the candidates of bypass
are mutually excluded by time-stamps or other appropriate criterions.
For the ﬁxed bypass, calculate the modiﬁed ﬂows ze − ∆zopt , ze − ∆zopt ,
and ∆zopt by (7).
Step 4. Asynchronously migrate it between servers, as soon as possible (ﬁrst
come, ﬁrst served) in a locally distributed manner.
Altough the above discussion is devoted to a ternary cycle, it is quite same
for other cycles: quaternary or longer cycles. However, the ternary is practically
better in the following reasons.
– The mutual exclusion is restricted in the alternative combination of triangles. If we consider longer cycles, it may be intractable that many edges are
complicatedly related.
– Each server can directly communicate to the nearest-neighbors. While, for
longer cycles, it must pass the information ze or we through intermediators.
– Both ends of a bypass edge are probably close in the geographical locations.

Eﬃcient Load Balancing by Adaptive Bypasses

263

Fig. 1. Bypass for a bottleneck edge e.

Fig. 2. Mutual exclusion among three
triangles for constructing a cactus. The
other triangles far from them have norelation.

Fig. 3. MST (|V | = 300).

Fig. 4. Ternary cactus (|V | = 300).

4

Simulation Results

We investigate the eﬀect of the relaxed conditions for migration by bypasses
on an adaptively constructed cactus according to the initial load. Since the
migration is a process in Step 4 after the calculation of ﬂow, the eﬀect is common
and independent of any schemes (even if we apply other schemes such as OPS
[3]), but depends on the initial load and the topology.
To set a topology among servers and investigate the general properties in
our method, we ﬁrst construct graphs with sizes |V | = 100, 200, 300, 400, 500,
whose vertices are randomly located. In addition, we set the weight we on the
complete graph and the initial load f (u) at each vetrex by (0.5, 1) and (0, 200)
uniformly random numbers, respectively. In this ﬁrst setting, we consider the
complete graph to only prepare for the extension to a cactus from the MST.
After ﬁxing a topology, the vertex and edge are corresponding to a server and
connection for the communication. Remenber that we represents the stability
of migration between servers. We also set the time-stamps by (0, 1) uniformly

264

Y. Hayashi

random numbers. An example of the MST is shown in Figure 3, and a cactus
constructed by the previous algorithm is shown in Figure 4.
We verify the eﬀect of bypasses on a cactus. In our simulations, to simply the
discussion, we assume that there exist a constant interval between the activations
for the migration. Because a server with less load than ze must be waited until
the required load is arrived, even if each server can asynchronously activate it.
We call the timing for migration “round,” which is not depended on the amount
of ﬂow and the routing. At each round, the edges which satisfy the condition of
migration become active. Note that the asynchronous property is included in the
random time-stamps. Strictly speaking, since the activation depends on the data
transfer speed, the delay by traﬃc congestion, and the application (the amount
of data for migration), it is an underestimation. In other words, a real system
takes much more times than the number of rounds × a constant interval.
We investigate the minimum, maximum, and average values of the rounds
in ten trials for each size of graphs. In the multi-ports, the migrations can be
simultaneously activated at a vertex. The diﬀerence between the minimum and
maximum is due to whether ﬁtting or unﬁtting of the initial load for the topology;
in a case, the load may be migrated through many and long paths on the MST or
cactus. The average rounds are shown in Figure 5. By the bypasses on a cactus,
the conditions of migration are relaxed, then the rounds are decreased; the ratio
(of the rounds on a cactus to that on the MST) is about 2/3 as shown in Figures
6 and 7. The result for the multi-ports is about 10 % improved than that for the
one-port.
Figures 8 and 9 show the ratio of the costs with respect to the instability of
migration. By the bypasses on a cactus, it is also decreased to about the half
(0.4 ∼ 0.5). Moreover, the average eﬃciency: active edges for the migration per
rounds is about twice of that in the MST. Through the simulations, we have
found that the bypasses on a cactus are constantly 36 % added for all of sizes
|V | and initial load in ten trials. It suggests that there exist a something of
general law in constructing a ternary cactus from any spanning tree.

Fig. 5. Average rounds for the multi-ports and one-port + cases. The solid and
dashed lines are corresponding to the results for a cactus and the MST, respectively.

Eﬃcient Load Balancing by Adaptive Bypasses

265

Fig. 6. Ratio of the rounds (multiports).

Fig. 7. Ratio of the rounds (one-port).

Fig. 8. Ratio of the costs (multi-ports).

Fig. 9. Ratio of the costs (one-port).

5

Conclusion

We have considered the dynamic load balancing problem for servers on the Internet as Grid, based on the diﬀerences of distributed computing to parallel
computing: loose coupling, independence of processings, and heterogeneity. In
general, the eﬃciency for load balancing depends not only on calculation schemes
for the migration ﬂow but also on heterogeneous topologies of the connection
between servers. However, to ﬁnd the optimal topology is intractable in the
state-of-the-art.
In this paper, we have proposed an adaptive method according to initially
assigned load, and presented it as a distributed algorithm based on only local
communications and asynchronous processings. The method has been induced
from a QP problem equivalent to solving the DF method, in which the optimal
ﬂow is obtained by using local variational or perturbative computations, and the
conditions of migration for the bottleneck edges are relaxed by the bypasses on
a cactus adaptively extended from the MST.

266

Y. Hayashi

Simulation results have shown that the number of rounds for the migration
is decreased under 2/3 for the conventional TWA, and that the cost with respect to the instability of migration is also decreased in about the half. These
results are underestimations, however, not depended on any schemes and implementation technologies. Thus, the adaptively constructed cactus is considered
as a practically eﬃcient topology, in addition, suitable for dynamically reconstructive distributed systems (with ﬂexible connections and changes of servers).
The implementation and evaluation on real systems are further studies, e.g. for
parameter search in scientiﬁc computations or cooperative Web crawlers.

References
1. T. Bourke. Server Load Balancing, O’Reilly, 2001.
2. T. Decker, B. Monien, and R. Preis. “Towards Optimal Load Balancing Topologies,” A. Bode et al. (Eds): Euro-Par2000, LNCS 1900, pp. 277–287, 2000.
3. R. Diekmann, A. Frommer, and B. Monien. “Eﬃcient Schemes for Nearest Neighbor Load Balancing,” Parallel Computing, Vol. 25, pp. 789–812, 1999.
4. R. Els¨
asser, A. Frommer, B. Monien, and R. Preis. “Optimal and AlternatingDirection Load Balancing Schemes,” P. Amestoy et al. (Eds.): Euro-Par’99, LNCS,
1685, pp. 280–290, 1999.
5. R. Gallager, P. Humblet, and P. Spira. “A Distributed Algorithm for Minimun
Weight Spanning Trees,” ACM Trans. on Prog. Lang. and Systems, Vol. 5, No. 1,
pp. 66–77, 1983.
6. Y.F. Hu, R.J. Blake. “An Improved Diﬀusion Algorithm for Dynamic Load Balancing,” Parallel Computing, Vol. 25, pp. 417–444, 1999.
7. W. Shu, and M.Y. Wu. “Runtime Incremental Parallel Scheduling on Distributed
Memory Computers,” IEEE Trans. on Parallel and Distributed Sysytems, vol. 7,
no. 6, pp. 637–649, 1996.
8. V.S. Sunderam, and G.A. Geist. “Heterogeneous Parallel and Distributed Computing,” Parallel Computing, Vol. 25, pp. 1699–1721, 1999.
9. M. Takayasu, A.Yu. Tretyakov, K. Fukuda, and H. Takayasu. “Phase Transition
and 1/f noise in the Internet Packet Transport,” D.E. Wolf et al. (Eds): Traﬃc
and Granular Flow ’97, Springer Singapore, pp. 57–74, 1998.
10. C. Xu, and F.C.M. Lau. Load Balancing in Parallel Computers -Theory and
Practice-, Kluwer Academic Publishers, 1997.

