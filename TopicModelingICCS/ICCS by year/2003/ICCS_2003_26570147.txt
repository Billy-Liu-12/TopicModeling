An Eﬃcient Load Balancing Algorithm
Employing a Symmetric Balanced Incomplete
Block Design
Okbin Lee1 , Sangho Lee2 , Seongyeol Kim3 , and Ilyong Chung4
1

Department of Computer Science, Chung-buk University, 361-763, Korea
lobin@mogent.net
2
Department of Computer Science, Chung-buk University, 361-763, Korea
shlee@cbucc.chungbuk.ac.kr
3
School of Computer and Information, Ulsan College, Ulsan, 682-090, Korea
kimsy@mail.ulsan-c.ac.kr
4
Dept. of Computer Science, Chosun University, Kwangju, 501-759, Korea
iyc@mail.chosun.ac.kr

Abstract. In order to maintain load balancing in distributed system,
should obtain workload information from all the nodes on network.
It requires O(v 2 ) communication overhead, where v is the number of
nodes. In this paper, we present a new synchronous dynamic distributed
load balancing algorithm on a (v, k + 1, 1)-conﬁgured network applying
symmetric balanced incomplete block design, where v = k2 + k + 1.
√
Our algorithm needs only O(v v) message overhead and each node
receives workload information from all the nodes without redundancy.
Therefore, load balancing is maintained since every link has the same
amount of traﬃc for transferring workload information.

1

Introduction

In a distributed system it is likely that some processors heavily loaded while
some are lightly loaded or idle. It is desirable that workload be balanced between
these processors so that utilization of processors can be increased and response
time can be reduced. A load balancing scheme [1]–[2] determines whether a task
should be executed locally or by a remote processor. This decision can be made in
centralized or distributed manner. In a distributed system, distributed manner is
recommended. In order to make this decision, each node can be informed about
workload information of other nodes. Also this information should be the latest
because outdated information may cause an inconsistent view of system state
from which adverse eﬀect of load balancing. So disseminating load information
may incur high link cost or signiﬁcant communication traﬃc overhead.
In order to decrease communication overhead for obtaining workload information, the message is exchanged between adjacent nodes and local loadbalancing process is performed repeatedly. Then it makes the whole system be
Corresponding Author (iyc@chosun.ac.kr)
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, pp. 147–154, 2003.
c Springer-Verlag Berlin Heidelberg 2003

148

O. Lee et al.

load-balancing [3]–[4]. It is accomplished by emplying CWA (Cube Walking Algorithm) on hypercube network, which utilizes workload information of all the
nodes. This method requires O(v 2 ) communication complexity and a communication path is O(log2 v). To reduce communication cost, ﬂooding scheme is applied. However, the overlap of transmitting information occurs [5]–[6]. Based on
SBN(Symmetric Broadcast Networks), communication patterns between nodes
are constructed. It also needs O(v 2 ) communication complexity for collecting
workload information from all the nodes and a communication path is O(log2 v)
[7]–[8].
In this paper we present the network consisting of v nodes and v × k links,
each node of which is linked to 2k nodes. On this network, each node sends
workload information of k nodes to k adjacent nodes periodically. In other words,
each node receives information from k nodes and sends information to k nodes.
Also there is no redundancy in this received information. So, each node receives
workload information for k 2 + k nodes with two round message interchange.
Therefore load balancing in this algorithm is maintained so that every link has
has same amount of traﬃc.

2

About (v, k, λ)-Conﬁguration

Let V = {0, 1, ..., v − 1} be a set of v elements. Let B = {B0 , B1 , ..., Bb−1 } be
a set of b blocks, where Bi is a subset of V and |Bi | = k. For a ﬁnite incidence
structure σ = {V, B}, if σ satisﬁes following conditions, then it is a balanced
incomplete block design(BIBD)[9], which is called a (b, v, r, k, λ)-conﬁguration.
1.
2.
3.
4.

B is a collection of b k-subsets of V and this k-subsets are called the blocks.
Each element of V is related with exactly r of b blocks.
Every two objects of V appears simultaneously in exactly λ of b blocks.
k<v

For a (b, v, r, k, λ)-conﬁguration, if it satisﬁes k = r and b = v, then it is a symmetric balanced incomplete block design (SBIBD)[10] and it is called a (v, k, λ)conﬁguration. There are some relations among parameters b, v, r, k, λ that are
necessory conditions for existence of a corresponding (b, v, r, k, λ)-conﬁguration.
1. In a (b, v, r, k, λ)-conﬁguration, bk = vr and r(k − 1) = λ(v − 1)
2. For a (b, v, r, k, λ)-conﬁguration, QQT = (r − λ)I + λJ , I : v × v identity
matrix, J : v × v matrix in which all the entities are 1’s.
3. For a (b, v, r, k, λ)-conﬁguration, b ≥ v .
4. For a (v, k, λ)-conﬁguration, every two blocs have exactly λ objects in common .
As shown above, it is not true that there exists a BIBD or SBIBD for arbitrary
set of parameters b, v, r, k and λ. However there is no known suﬃcient condition
on the existence of a certain (b, v, r, k, λ)-conﬁguration or (v, k, λ)-conﬁguration.

An Eﬃcient Load Balancing Algorithm

3

149

Generation of a (v, k + 1, 1)-Conﬁguration

We now present an algorithm to generate an incidence structure σ = {V, B}
satisfying the condition for a (v, k + 1, 1)-conﬁguration in the case that k is
a prime number. This (v, k + 1, 1)-conﬁguration is employed for constructing
network topology below.
3.1

Design of an Algorithm to Construct (v, k + 1, 1)-Conﬁguration

Algorithm 1 for Generating an incidence structure.
Incidence structure T
= {V, B}, where
B = {B0 , B1 , ..., Bb−1 },
|Bi | = k + 1. Bi,j is the j th element of Bi

V

{0, 1, ..., v − 1

=

},

1. Select a prime number k and compute v = k 2 + k + 1.
2. Construct two incidence structures X = {V, C} and Y = {V, D}.
.
a) Ci,j , 0 ≤i, j ≤ k, has a value as following

0
if j = 0

– Ci,j = 
t t = i × k + j if j ≥ 1
b) Di,j , 0 ≤i ≤ (k 2 − 1), 0 ≤ j ≤ k, has a value as following . 
if j = 0
C0,t , t = i/k + 1

– Di,j = 
Cj,t , t = (i + (j − 1) × i/k ) mod k + 1 if j ≥ 1
3. Generate Z = {V, B} from X and Y .
Bi ←− Ci
Bi+k+1 ←− Di
The table below illustrates how to create Z = {V, B}, V = {0, 1, ..., 6}.
We now prove that this structure satisﬁes the conditions of a (v, k + 1, 1)conﬁguration.
Table 1. A set of blocks on Z generated from Algorithm 1
Z
B0 =
B1 =
D0 = { 1, 3, 5 }
B2 =
C0 = { 0, 1, 2 } D1 = { 1, 4, 6 }
B =
C1 = { 0, 3, 4 } D2 = { 2, 3, 6 } =⇒ 3
B4 =
C2 = { 0, 5, 6 } D3 = { 2, 4, 5 }
B5 =
B6 =
X

Y

{
{
{
{
{
{
{

0,
0,
0,
1,
1,
2,
2,

1,
3,
5,
3,
4,
3,
4,

2
4
6
5
6
6
5

}
}
}
}
}
}
}

150

O. Lee et al.

Deﬁnition 1: On incidence structure Y , Sector Si is the ith family of k blocks,
Dj ∈ Si , i = j/k .
For example, If k equals 3 , then 0/k
S0 = {D0 , D1 , D2 }. There are k sectors in Y .

=

1/k

=

2/k

= 0. So,

Lemma 1: For two elements Di1,j1 and Di2,j2 , Di1,j1 = Di2,j2 , if j1 = j2.
Proof: From Algorithm 1-2-(a), if 0 < j ≤ k, 0 ≤ i ≤ k then Ci,j = i × k + j.
This means if j > 0 then all the elements are distinct. And as shown in
Algorithm 1-2-(b), an element of Cj is placed on j th element of a certain
block of Y if Di,j = Cj,t , t = 0.
Lemma 2: For a sector consisting of k blocks, the ﬁrst element of each block
has the same value and the other k 2 elements are equal to V − C0 .
Proof: In the case that Di,0 = C0, i/k +1 , the ﬁrst element of k blocks on a
sector have the same value. According to Algorithm 1-2-(b), Di,j = Cj,t , t =
(i + (j − 1) i/k ) mod k + 1. Since k is a prime number, each element except
the ﬁrst element of each block is distinct and these distinct k 2 elements are
equal to V − C0 .
Lemma 3: For incidence structure Y , Da,j = Db,j , j ≥ 1 , if
b = ((a − c(j − 1)) mod k + k( a/k + c)) mod k 2 .
Proof: From Algorithm 1-2-(b), Da,j = Cj,t . We now prove that Db,j = Cj,t .
t can be calculated from parameters b, j below. Then t obtained on this
lemma is equal to that from Algorithm 1-2-(b). Therefore, Da,j = Db,j .
t = (b + (j − 1) × b/k ) mod k + 1
= (((a − c(j − 1)) mod k + k( a/k + c)) + (j − 1) ((a − c(j − 1)) mod k +
k( a/k + c))/k ) mod k + 1
= (((a − c(j − 1)) + (j − 1) × ( a/k + c) mod k + 1
= (a + (j − 1) a/k ) mod k + 1
Here, if Da,j is in sector Ss then Db,j is in S(s+c)
0 (mod k), then a = b .

mod k .

In case of c ≡

Lemma 4: Each element of V appears in exactly k + 1 times in Z.
Proof: According to Algorithm 1-2-(a), Ci,0 = 0. Since 0 ≤ i ≤ k, 0 appears
k + 1 times. The other v − 1 elements, V − {0}, appear exactly once on X.
From Lemma 3, each element of C0,j , 1 ≤ j ≤ k, appears k times in a sector
of Y and the rest k 2 elements appear once in every sector of Y. Therefore,
each element appears k + 1 times in Z.
Lemma 5: Any pair of elements of V appears in exactly only once in Z.
Proof: The ﬁrst element of V makes a pair with all the other elements and
this pair appears once by designing rule of incidence structure(see Algorithm
1-2-(a)). Each elements of C0,j , 1 ≤ j ≤ k makes a pair with V − C0 elements
and it also appears once proven by Lemma 3. The rest k 2 elements are now
considered. For an arbitrary pair Da,j1 = Da,j2 , j1, j2 ≥ 1, in order to

An Eﬃcient Load Balancing Algorithm

151

make the same pair on other block Db , the two elements should be on the
same block. According to Lemma 4, if j1 = j2, then they are located on
Db . However, this case does not occur since j1 = j2. Therefore, any pair of
elements of V appears in exactly only one time in Z.
Theorem 1: Z designed by Algorithm 1 satisﬁes the conditions of a (v, k+1, 1)conﬁguration.
Proof: Z satisﬁed the conditions of the SBIBD by emplying Lemma 4 and
Lemma 5.
3.2

Design of Network Conﬁguration

In order to construct a network topology which have minimum link cost and
traﬃc overhead, we imported (v, k + 1, 1)-conﬁguration. An incidence structure
Z = {V, B} satiﬁes the conditions for a (v, k + 1, 1)-conﬁguration and M be a
binary incidence matrix of Z . Then this matrix M can be transformed to an
adjacent matrix of a graph G = {V, E}. Based on this idea, network topology
can be designed as follows.
Algorithm 2 for Design of Network Conﬁguration.
1. Create an incidence structure Z = {V, B} by Algoritm 1.
2. Generate L = {V, E} from Z by exchanging blocks so that every block i
includes object i.
E0 ←− B0
for ( i = 1 ; i < v ; i = i + 1 ) {
if ( i ≤ k ) { j ← i × k + 1 ; t ← Bj,i }
else if ( i%k = 1 ){ t ← Bi,0 }
else { j ← i/k − 1 ; t ← Bi,j }
Et ←− Bi
}
3. Create an adjacent matrix A = (aij ) for graph G from L , where G is a
network topology containing v processors.
aij =

1 if i = j, and if i ∈ Ej or j ∈ Ei
0 otherwise

G has v nodes since G is created from (v, k + 1, 1)-conﬁguration. Each block
L[i] is composed of k + 1 elements and i is the one of them. Each node obtains
2k links from Step 3 of Algorithm 2. So, G become a 2k-regular graph. therefore
there are (2k × v)/2 = vk links in G. Given Z = {V, B} described on Fig.1,
performance of Algorithm 2 is shown on Table 2 and Fig.1.

152

O. Lee et al.
Table 2. Blocks of L generated from Z of Table 1
L
E0 =
E1 =
E2 =
E3 =
E4 =
E5 =
E6 =

{
{
{
{
{
{
{

0,
1,
2,
0,
1,
2,
0,

1,
3,
3,
3,
4,
4,
5,

2
5
6
4
6
5
6

}
}
}
}
}
}
}

Fig. 1. (7,3,1)-conﬁgured network obtained from L

4

Design of an Eﬃcient Load Balancing Algorithm on
(v,k+1,1)-Conﬁgured Networks

An eﬃcient load balancing algorithm is now constructed on (v,k+1,1)-conﬁgured
networks generated by Algorithm 2.
Deﬁnition 2 : Construct two sets Si and Ri consisting of adjacent k nodes,
where Si is a set of nodes to which node i sends workload information and
Ri is a set of nodes to receive i’s workload information.
Si = {v | v ∈ Ei − i}
Ri = {v | i ∈ Ev and i = v}
Deﬁnition 3 : Generate two sets SFi and RFi , where SFi (j) is a set of workload
information for i’s adjacent nodes transmitted from node i to node j at time
T2t and RFi (j) is i’s workload information transmitted from node i to node
j at time T2t+1 .
SFi = {SFi (j) | j ∈ Si , SFi (j) = {Ei − {j}}.
RFi = {RFi (j) | j ∈ Ri , RFi (j) = i}.
Algorithm 3 for Construction of an Eﬃcient Load Balancing Algorithm.
1. Node i sends a set of workload information SFi (j) to node j ∈ Si at T2t and
renews a table of workload information.

An Eﬃcient Load Balancing Algorithm

153

2. Node i sends a set of workload information RFi (j) to node j ∈ Ri at T2t+1
and renews a table of workload information.
3. Repeat the ﬁrst step.
The following table indicates that node i sends workload information SFi (j)
and RFi (j) to node j at times T2t and T2t+1 , respectively. So every node can
obtain workload information for all the nodes at T2t+2 and this fact is proven in
Theorem 2.
Table 3. Two steps for sending workload information from Node i
Node ID
T2t
0
SF0 (1) = { 0, 2 } SF0 (2)
1
SF1 (3) = { 1, 5 } SF1 (5)
2
SF2 (3) = { 2, 6 } SF2 (6)
3
SF3 (0) = { 3, 4 } SF3 (4)
4
SF4 (1) = { 4, 6 } SF4 (6)
5
SF5 (2) = { 5, 4 } SF5 (4)
6
SF6 (0) = { 6, 5 } SF6 (5)

=
=
=
=
=
=
=

{
{
{
{
{
{
{

0,
1,
2,
3,
4,
5,
6,

1
3
3
0
1
2
0

}
}
}
}
}
}
}

T2t+1
RF0 (3)= { 0 } RF0 (6) = { 0 }
RF1 (0)= { 1 } RF1 (4)= { 1 }
RF2 (0)= { 2 } RF2 (5)= { 2 }
RF3 (1)= { 3 } RF3 (2)= { 3 }
RF4 (3)= { 4 } RF4 (5)= { 4 }
RF5 (1)= { 5 } RF5 (6)= { 5 }
RF6 (2)= { 6 } RF6 (4)= { 6 }

Theorem 2: According to Algorithm 3, every node obtains workload information for all the nodes at T2t+2 .
Proof: At T2t , node i sends workload information for SFi (j) to node j. On an
aritrary pair (SFi1 (j), SFi2 (j)) , i1 = i2, intersection of these sets is empty
since on (v,k+1,1)-conﬁguration, every two objects appears simultaneously
in exactly one of v blocks and node j is an element of Si1 and Si2 , respectively.
So node j obtains workload information for k 2 nodes. And at T2t+1 , node
i transmits its workload information to node j by Algorithm 3-2. Then,
node j receives k workload information. Therefore, node j receives workload
information for k 2 + k nodes at T2t+2 .

5

Conclusion

In order for the system to increase utilization and to reduce response time,
workload should be balanced. In this paper, we present an eﬃcient load balancing
algorithm on (v, k + 1, 1)-conﬁgured
√ networks consisting of v nodes and vk links.
Our algorithm needs only O(v v) message overhead and each node receives
workload information from all the nodes without redundancy and load balancing
is maintained so that every link has same amount of traﬃc for transferring
workload information.

154

O. Lee et al.

References
1. M. Willebeek-Lemair and A. P. Reeves, Strategies for dynamic load-balancing on
highly parallel computers, IEEE Transactions on Parallel and Distributed Systems,
vol. 4, no. 9, pp. 979–993, 1993.
2. B.A. Shirazi, Scheduling and load balancing in parallel and distributed systems,
IEEE Computer Society Press, 1995.
3. S. Hosseini, B. Litow, M. Malkawi, Analysis of a graph coloring based distributed
load balancing algorithm, Journal of Parallel and Distributed Computing, vol. 10,
no. 2, pp. 160–166, 1990.
4. C.Hui, S.Chanson, Hydrodynamic Load Balancing, IEEE Transactions on Parallel
and Distributed System, vol. 10, no. 11, pp. 1118-1137, 1999.
5. K. Nam, J. Seo, Synchronous Load balancing in Hypercube Multicomputers with
Faulty Nodes, Journal of Parallel and Distributed Computing, vol. 58, pp. 26–43,
1999.
6. H. Rim, J. Jang, Method for Maximal Utilization of Idle links for Fast Load Balancing, Journal of Korea Information Processing Society, vol. 28, no. 12, 2001.
7. S. Das, D. Harvey, and R. Biswas, Adaptive Load-Balancing Algorithms Using
Symmetric Broadcast Networks, NASA Ames Research Center, TR NAS-97-014,
May 1997.
8. S. Das, D. Harvey, and R. Biswas, Parallel Processing of Adaptive Meshes with
Load Balancing, IEEE Transactions on Parallel and Distributed Systems, vol. 12,
no. 12, 2001.
9. C.L.Liu, Block Designs in Introduction to Combinatorial Mathematics, McGrawHill, pp. 359–383, 1968.
10. I. Chung, W. Choi, Y. Kim, M. Lee, The Design of conference key distribution
system employing a symmetric balanced incomplete block design, Information Processing Letters, vol. 81, no. 6, pp. 313–318, 2002.3.

