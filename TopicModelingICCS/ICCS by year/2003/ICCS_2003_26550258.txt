A Survey of Physical Unit Handling Techniques in Ada
1

2

Christoph Grein , Dmitry A. Kazakov , and Fraser Wilson
1

3

ESG-Elektroniksystem- und Logistik-GmbH, D-81675 München
2
cbb software GmbH, D-23560 Lübeck
3
Anago b.v., NL-3995AA Houten

Abstract. There has always been a demand to be able to compute with physical
items where dimensional correctness is checked. A survey of methods is presented how to do this with the features of Ada. Compile-time methods use the
type checking mechanism whereas run-time methods use additional components to represent dimensions.

1

Introduction

When dealing with physical equations, physicists are used to checking their results for
dimensional correctness. So they feel a certain loss when they transfer their equations
to computers since none of the commonly used programming languages provide features to deal with physical dimensions. Programmers resort instead to work-arounds
within the language-provided features to keep track of dimensions or do completely
without them.
In the following chapters, a few methods are presented how the features of Ada can
be used to compute with dimensions.
We would however like to state that it is not the wrong equations that introduce the
actual problems in big software systems (these can be spotted by code inspections);
their causes normally are buried much earlier in wrong system or software designs, as
has been shown by some recent spectacular failures.
Mars Lander's problem was the mixing of metric and British units in the communication between two CSCIs, which none of these methods would have been able to
avoid since they apply only within a CSCI (Computer Software Configuration Item –
a separate program communicating with other programs via e.g. global memory).
The ideas to import dimensions into Ada (or other programming languages) are not
new. Do-While Jones [1, 2] published such a method using private types, which however becomes unwieldy when dimensions are mixed; it also does not include mathematical functions.
Gehani [3] compared the appearance of expressions in Ada with a hypothetical
language which includes dimensions as data attributes and came to the conclusion that
only the latter method can solve all problems elegantly and satisfactorily. Since at that
time, he considered an Ada language change as most improbable (the Ada9X process
has proven him correct), he proposed a solution how correctness of physical expressions can be checked during run-time (by using discriminants).
Gehani's method suffers however from its notation of declarations and statements
that differs considerably from the common technical and scientifical one. The notaJ.-P. Rosen and A. Strohmeier (Eds.): Ada-Europe 2003, LNCS 2655, pp.258–270, 2003.
© Springer-Verlag Berlin Heidelberg 2003

259

C. Grein, D.A. Kazakov, and F. Wilson

tional problems of both Gehani's and Jones' methods can be cured if Ada's features are
used cleverly as Hilfinger [4] has shown, who based his ideas on Gehani’s work.
In passing, we mention as a third method beside the two above: the use of preprocessors. Schneider [5] presents such a pre-processor for Pascal, implemented in C.
He also provides an overview over attempts to include dimensions into programming
languages. For further references, see his paper.
A universal unit support faces contradictory requirements which are difficult if not
impossible to satisfy:
1. Compile-Time Checks. The dimension errors should be discovered as early as
possible. For example if dimensions are known at compile time, then all unit errors
shall be detected at this stage.
2. No Memory / Speed Overhead at Run-Time. If dimension information is not
used at run-time (because of 1), then at run-time neither memory should be allocated to keep it, nor checks should be made.
3. Support for Derived Types. Dimensioned operations should involve not only the
isles of scalar types. There should be a way to declare other dimensioned types, for
example, an array of dimensioned scalars; a dimensioned record type; a dimensioned private type, with all necessary cross operations.
4. Generic Programming. Here generic is used in a wider sense, as an ability to
write code dealing with items of types from some type sets. In our case it means
items of different dimension. For instance, it should be possible to write a dimension-aware integration program, which would work for all valid combinations of
dimensions.
5. No Precision / Range Loss. Very often dimensioned values are measured in units
different from the base ones. There should be a way to deal with such values without a necessity to convert them to the base units, which is inevitably connected
with a precision / range loss. It is hard to expect and wrong to require that an astrophysical program would use meters to calculate distances between galaxies.
6. Scales. A more generalized variant of 5 is when data are measured in scales different from standard, or additional constraints are imposed by the nature of the measured values. Examples of scales are logarithmic values, Celsius temperature scale,
time versus duration etc. Though values of different scales might have the same
units, they cannot be mixed in standard arithmetic operations. For instance in case
of time and duration, time – time gives duration, time + time is not defined.
All varieties of possible solutions of the dimension problem can be roughly subdivided into two big classes according to the answer to the question: “Should the dimension information be mapped to different types?”
A positive answer would automatically provide requirements 1 and 2 with little or
no efforts, because types are fully checkable at compile-time in Ada. Generics can be
used to provide requirement 4 by transferring the dimension as a generic parameter.
In case of a negative answer other questions arise: “Can the method still allow requirements 1 and 2? Should the dimension information be a part of the type?” When it
is not a part of the type, then we loose requirement 2 without any hope. In other
words: To fully support requirement 4, one should probably have the dimension information as a type parameter.
The conflict between the requirements 1 and 2 on one side and requirement 4 on
the other is the source of the problem of dimension handling.

A Survey of Physical Unit Handling Techniques in Ada

260

Basically there are two ways to deal with physical dimensions: checking during
compile-time and checking during run-time. The former is of course the preferred one
since it prevents errors before they occur, whereas the latter can only detect errors after they have occurred. The following sections will present four methods, two using
derived types and two using discriminants. Only the first one has had industrial use.

2 Compile-Time Methods
These methods use the Ada type concept in one way or another to discriminate between different dimensions. Mixing of dimensions is accomplished by operator overloading, so errors are detected during compile-time. The naïve method is to try something like the following, which every experienced Ada programmer knows to fail for
several reasons (no documentation of the unit used for a given dimension, combinatorial explosion of overloaded operators, general powers and roots cannot be handled):
type Length is new Float;
type Time
is new Float;
type Speed is new Float;
However, used with a grain of salt, this naïve method can be made to work.
2.1 From the Big Bang to the Universe
C. Grein [6] presents a method which works without dimension checking in expressions and assignments if only all variables belong to a coherent dimension system for
which the SI unit system is chosen; but in critical cases where incoherent units are
mixed, strong typing is applied. Having no dimension checking within the SI system
is not such a big loss as should be clear from the above. The gain on the other hand is
obvious documentation which unit is used for a given item's dimension [e.g. for
speeds m/s, km/h, knots]. Mathematical functions exist as predefined operations for
items in the SI system. This method has successfully been in use for more than a decade in several hard real-time avionics systems.
Starting point is a generic physical dimension package holding a private type and
only dimension-preserving operations and which will be used solely for items not
measured in the SI system, and a mathematical library. In a kind of creative act, a Big
Bang, basic types are produced possessing all derivable operations that are desired.
with Math_Lib, Dimension;
package Big_Bang is
-- A type with all mathematical operations:
type Primeval_Float is digits project_defined;
package Math is new Math_Lib (Primeval_Float);
-- Take subprograms out of the instantiation to make
-- them primitive operations on type Primeval_Float:
function Sqrt (X: Primeval_Float)
return Primeval_Float renames Math.Sqrt;
-- A type without mathematical operations:

261

C. Grein, D.A. Kazakov, and F. Wilson

type no_Math is digits project_defined;
-- A stand-alone dimensioned type:
package Primeval_Dim is new Dimension (no_Math);
type Primeval_Unit is new Primeval_Dim.Unit;
end Big_Bang;
Out of the Big Bang evolves the Universe containing all types we need. Big_Bang
itself is no longer visible, i.e. it is strictly forbidden to use it in any context clause. We
agree on the following convention: Within our application, all computations are done
in only one coherent system of physical dimensions, the SI unit system. Any other
unit will be converted to the corresponding SI unit.
with Big_Bang; -- This package is taboo for all times!
package Universe is
-- Type with mathematics:
type SI_Unit is new Big_Bang.Primeval_Float;
subtype Meter is SI_Unit;
subtype Joule is SI_Unit; -- further SI units
-- Types without mathematics:
type Kilometer is new Big_Bang.Primeval_Dim;
function km_To_m (km: Kilometer) return Meter;
function m_To_km ( m: Meter
) return Kilometer;
type Hour is new Big_Bang.Primeval_Dim;
...
end Universe;
In this way, we can include semantic information into declarations, but it is the programmer's own responsibility that formulae are physically correct, no type checking
is done!
g: Meter_Per_Second_2 := 9.81;
t: Second
:= 10.0;
s: Meter
:= 0.5 * g * t**2;
And in critical cases, strong type binding prevents illegal mixing of types:
Dist: Kilometer := +5.0;
t := Sqrt (2.0 * Dist / g); -- illegal
t := Sqrt (2.0 * Meter (Dist) / g); -- illg. conversion
t := Sqrt (2.0 * Kilometer_To_Meter (Dist) / g); -- OK
The subtype Without_Unit is meant to be used for dimensionless items, i.e. for
items with the dimension 1:
Alpha: constant Without_Unit :=
e**2 / (4.0 * PI * eps_0 * h_bar * c);
There are many units in the SI system, more than is probably sensible to define for a
given application. The type name SI_Unit shall be used in these cases. To indicate
the proper unit, we require that in the declaration, the unit shall then be given as a
comment:
Magnetic_Field: constant SI_Unit := 0.5E-4;

-- Tesla

A Survey of Physical Unit Handling Techniques in Ada

262

We can summarise the features:
The method is cheap with respect to run-time; full mathematics is included; programmers are forced to use a coherent unit system; the unit is clearly indicated; in
case of incoherent units, strong typing prevents mistakes. Of our requirements above,
2 is clearly fulfilled, 1 and 3 only partly.
2.2

Macks

Macks (an acronym of Meter/Mole, Ampere, Candela, Kilogram/Kelvin, Second) by
Fraser Wilson [7] is an attempt to finesse the problem of writing enormous Ada specifications which cover every possible operator by generating them automatically. A
specification file defines physical units - fundamental and derived. Each derived unit
is defined as a set of products or ratios of other units. If more than one definition is
provided, Macks performs dimensional analysis to check consistency. A vector type
package may optionally be generated. Here an example of a simple Macks source file:
unit
unit
unit
unit
unit
unit
unit
unit

Kilogram
Meter
Second
Speed
Accel
Force
Speed_2
Energy

is
is
is
is
is
is
is
is

fundamental;
fundamental;
fundamental;
Meter / Second;
Speed / Second;
Kilogram * Accel;
Speed * Speed;
Force * Meter or Kilogram * Speed_2;

Each definition results in a new floating-point type. All units have operators for multiplication and division by scalars generated, while automatically defined (by the Ada
language) yet incorrect operations are declared abstract. For each derived unit definition, four operators are defined, e.g. for a Derived unit, defined as Base_1 * Base_2:
function
function
function
function

"*"
"*"
"/"
"/"

(L:
(L:
(L:
(L:

Base_1 ;
Base_2 ;
Derived;
Derived;

R:
R:
R:
R:

Base_2)
Base_1)
Base_2)
Base_1)

return
return
return
return

Derived;
Derived;
Base_1;
Base_2;

If the derived unit is defined in terms of a ratio, similar operators are defined. Of
course, in the case of Speed_2 above, only two operations are necessary.
The or lets you give alternative formulae for derived units, so in this case Energy
would have a total of eight operators created. However (Kilogram * Speed) *
Speed will not compile because there is no operator for it. An alternative would have
been to have Macks automatically create these additional operators, so you could say
Energy = Mass * Length * Length / Time / Time
and get everything you need, but that pushes the limits of what is reasonable with a
compile time solution. Macks also does not handle powers at the moment, because of
the problems with mapping them to Ada.
Macks may be used for vector operations as well. If a declaration such as
vector Position is Meter * 3;

263

C. Grein, D.A. Kazakov, and F. Wilson

appears in a specification file, then vector addition, subtraction, dot product and (in
the case of 3D vectors) cross product operations are generated.
Macks parses any text file. Macks’ formal syntax in the Ada RM variant of
Backus-Naur notation is as follows:
macks_file
option_list
option
option_value
declaration_list
declaration

::= option_list declaration_list
::= { option }
::= option option_name = option_value;
::= string_constant | identifier
::= declaration { declaration }
::= unit_declaration
| vector_declaration
unit_declaration ::= unit unit_name is unit_definition;
unit_definition ::= simple_definition
| compound_definition
| alias_definition
simple_definition
::= fundamental
compound_definition ::= term { or term }
term
::= unit_name operator unit_name
operator
::= * | /
alias_definition
::= also unit_name
vector_declaration ::= vector vector_name is
vector_definition;
vector_definition ::= unit_name * integer_constant
name
::= identifier
The reserved words are also fundamental is option or unit vector.
The options are just a way of tailoring the output. The alias definition causes a subtype to be generated.
In summary, Macks mimics a hand-generated dimensioned unit package, but without the hard work and potential for error. Furthermore, it is relatively easy to tweak
the generator to change the style of the unit handling; for example, the unit types,
which are currently exposed as floating points, could be made private, thus avoiding
the problems of implicit operations (though at the cost of losing literals).
Of the requirements above, Macks fulfils 1, 2 and 3. Requirement 5 is partially fulfilled: the fundamental units can be anything you like; however there cannot exist two
fundamental units with the same dimension but different scale in one Macks source
file, and derived units are always measured with the fundamental scale. Straightforward extensions to Macks would overcome this problem, and fulfil requirement 6 as
well.
The Macks Ada source code is licensed under the GPL. Code generated by Macks
can be used in any way you like.

3 Run-Time Methods
These methods add dimensions to numeric values as record components. Errors will
be detected only during run-time when the error occurs. This approach has the short-

A Survey of Physical Unit Handling Techniques in Ada

264

coming that a lot of numeric attributes are lost. You can’t e.g. query 'First, 'Last,
'Small. Of course the method can provide substitutes. You also cannot provide such
a type as a generic formal where a floating (or fixed) point type is expected.
Ada offers many opportunities to have a finer type relationship than simple same
versus other. Having req. 4 in mind, one should consider the following possibilities:
¾ Subtypes Constrained by Discriminants. The discriminant may carry the
information about the dimension. Generic programming is achieved by using unconstrained types.
¾ Tagged Types. The type tag may reflect the dimension. Generic programming is achieved by using class-wide operations.
The fundamental disadvantage of all such approaches is problems with requirement 1
and 2. Though neither a tag nor a discriminant is required at run-time if statically
known, it is not warranted that the compiler would remove them from the object. In
fact it does not, but see Hilfinger [4] who proposed compiler implementations that
could optimise most of the run-time overhead away.
C++ provides, contrary to Ada, implicit instantiations of templates. If this feature
were available in Ada, methods like those presented below could perform the checks
already during compile-time. In fact, there was such a proposal for Ada9X by Shen
and Cormack [8].
3.1

Units of Measurement for Ada

Dmitry A. Kazakov [9] bases his method on the seven SI units and handles dimensions as discriminants. The proposed solution is oriented mainly on the aspects of the
man-machine interface. Thus it focuses rather on the requirement 4, than on 1 and 2.
The dimension Unit is a modular type with values corresponding to dimension
formulae like [L-3MT2]. Hence the operations defined on Unit are **, *, / and
sqrt. Only whole powers are allowed, so roots are restricted to even powers. For
performance sake, all powers of the seven base units are packed into one value. Because Unit is a 32-bit number, the maximal powers are in the range -8 .. 7. All seven
base units of SI there are defined constants of Unit.
The type Unit is used as a discriminant (named SI) of the unconstrained type
Measure in the generic package Measures. Number is the generic formal type parameter, a floating-point type used to carry the values. Its unconstrained base type is
used in arithmetical operations to avoid unexpected range problems. The components
Gain and Offset implement a simple linear scale where (X.Gain+X.Offset)
*X.SI is the value of the physical item X. Usually Offset is zero. It is used for
shifted units like degree Celsius. Standard arithmetic operations are defined on
Measure, which keep track of the actual dimension.
type Measure (SI: Unit := Units.Base.Unitless) is
record
Gain : Number;
Offset: Number := 0.0;
end record;

265

C. Grein, D.A. Kazakov, and F. Wilson

Unconstrained variables of type Measure can be used for generic programming.
Their actual dimensions can change, an undesirable effect in most cases. Therefore
constrained subtypes of type Measure can be defined:
subtype Speed is Measure (Speed_Unit);
Car_Speed : Speed := 10.0*km/h; -- OK
begin
Car_Speed := 1.0*A; -- Illegal, Constraint_Error
The way the arithmetic operations are defined on Measure takes into account the
values’ scales. Values with zero offset form a field. They can be added and multiplied
retaining the offset. Actually the offset should be another discriminant of Measure,
but this is impossible in Ada. Values with non-zero offset form only a group with respect to addition. Multiplication is illegal and raises Unit_Error. An example of a
value with non-zero offset is Celsius degree. 1°C+1°C=2°C, but 1°C⋅1°C is illegal,
because it belongs to another scale. Of course 1K⋅1K is legal and gives 1K2. Values of
different offsets belong to different scales. They cannot be mixed: 1°C+1K is ambiguous, because the scale of the result is not defined.
Because of its man-machine interface orientation, the solution pays much attention
to input / output and irregular units. The package Measures_Irregular provides
some of the great variety of irregular units which are still widely used even in the
countries which officially accepted SI. Examples are km/h, °C, rpm etc. In the USA,
the first requirement will be: height in feet (in air), depth in fathoms (at see), distance
in yards if short, in miles if long and in inches otherwise. For historical reasons, it is
impossible to support all irregular units. Some of them have ill-defined conversion
factors; another problem is that miles, pounds, gallons seem varying from country to
country.
The package Measures_Edit provides conversions of the dimensioned values
from and to a human-readable format. It supports all irregular units defined in Measures_Irregular. A dimensioned value is in most general form an expression in2
volving numbers and units like 34.5*mm, 65km/h, 1yd .
What about the requirement 6? Though it is partially satisfied, the solution is of
course not enough flexible. For example, Meter*Foot is legal. This might be desired in some cases and undesired in others. There is still no way to build a unit system based on feet instead of meters and provide conversions between them only when
required. As a result, all computations are in effect made in the base SI units. This
means that requirement 5 is also not satisfied.
The requirement 3 is also out of sight. The package Units could be of course reused to give discriminants to the user-defined private types. Alas array types may
have no discriminants, so for them, even Units alone does not much help.
The source code is released under the GMGPL.
3.2

SI Units Checked and Unchecked

Full generality of physical equations requires rational powers of the basic units. The
Gaussian CGS system is not tractable without. And although in the SI unit system all

A Survey of Physical Unit Handling Techniques in Ada

266

physical items have whole dimensions, intermediate results may have fractional ones,
3

as the Schottky-Langmuir equation j = 4 ε 2e0 U 2 shows.
0
2
9

m0 d

C. Grein [10] presents a method that is very similar to Kazakov’s, the major difference being that arbitrary rational powers of items are allowed, so that physical dimensions are handled in complete generality. It is also based on the seven SI units and includes any units derived from them as well as prefixes like kilo and milli. Other noncoherent units like foot or nautical miles can easily be added. Basic mathematical
functions like exp and sine are also available.
The method comes in two variants: Dimensions as simple components or as discriminants. By changing only a few lines of code, dimension checking can be
switched off in the final code (however big it may be), thus reducing the overhead of
dimension checking to null. The source code is released under the GMGPL.
Discriminants as in Kazakov’s method cannot be used because of the language
limitation that discriminants must be discrete. Therefore for the moment we will do
without discriminants. We call the package Unconstrained_Checked_SI and
represent a dimensioned item by a private type composed of a dimension component
and its numeric value. Constants denote the seven base units and the unit 1 and also
prefixes like milli and Mega. Operators are defined like in Kazakov’s package with
the crucial difference that exponentiation is overloaded in allowing whole, rational
and real exponents. The following is a rough outline of the package declaration (also
the basic mathematical function are available, but omitted):
type Item is private;
One : constant Item; -- Base
Meter: constant Item; -- Units ...
Mega : constant Real := 1.0E+6; -- Prefixes ...
function "**"(B: Item; Exp: Whole
) return Item;
function "**"(B: Item; Exp: Rational) return Item;
private
type Dimension is record
m, kg, s, A, K, cd, mol: Rational;
end record;
type Item is record
Unit : Dimension;
Value: Real; -- a numeric generic parameter
end record;
With this declaration, we are able to write in a very natural style
Dist: Item := 10.0 * Meter;
Time: Item;
g: constant Item := 9.81 * Meter / Second ** 2;
begin
Time := Sqrt (2.0 * Dist / g);
and we can be sure that the inner dimensional consistency will be conserved. Erroneous additions like Dist+Time will inevitably lead to an exception. Unfortunately
there is however no possibility to prevent erroneous assignments like

267

C. Grein, D.A. Kazakov, and F. Wilson

Length := Sqrt (2.0 * Dist / g);
Raising of an exception would only be possible if the declaration of Length included the dimension Meter, which we had to omit since dimensions are not discrete.
Beside the seven base units, there are a plethora of derived units like Joule etc.
They are put into a child package which, like its parent, has of course to be generic.
Newton: constant Item := Kilogram*Meter/Second**2;
Another child for text file IO is available, taking into account the dimension. It
knows all SI (base and derived) unit names and prefixes with their case-sensitive
abbreviations (like mN for Millinewton), so that it can read a value like 1.0*km/s.
For output, an additional optional parameter Dim defines the dimension string to be
used. Further children for temperature scales like Celsius, polynomial operations,
linear interpolation, second order curve approximation, and 3-dimensional vectors
are also available.
Item is a private type, thus no subtypes with range constraints can be defined.
Since one of Ada’s strengths is just forcing range checks, a substitute is provided. A
child package allows defining a new type Constrained with a range constraint
and provides operations that make it completely compatible with Item so that virtually there is no difference to using Ada subtypes.
While this set of packages provides full internal consistency, an object’s dimension may change. This is why the package is called unconstrained. The only way to
prevent this is via discriminants, and thus we have to swallow the bitter pill and, for
each dimension, split numerator and denominator and use them separately as discriminants! A dreadful thought. Where is the simplicity of notation?
Now, the situation is not so bad. Let Ada grab into her wizard’s bag and she’ll
turn up with so-called unknown discriminants denoted by (<>) – and the ugliness
is hidden. We rename our package into Constrained_Checked_SI and, in the
visible part, only change the declaration of Item a bit:
type Item (<>) is private;
That is all we have to do. With these unknown discriminants, the user is forced to
complete every declaration with an initial value; the discriminants are taken from it
and are unchangeable thereafter:
Length: Item := Meter;
Length := Sqrt (2.0 * Dist / g);
now inevitably leads to an exception. (To be honest, we have to admit that
Length: Item := Sqrt (2.0 * Dist / g);
is still possible, where Length takes the dimension Second from the initial value.)
The completion of the declaration of Item in the private part looks as follows,
where x_N stands for the numerator, x_D for the denominator of dimension x:

A Survey of Physical Unit Handling Techniques in Ada

268

subtype Pos is Whole range 1 .. Whole'Last;
type Item(m_N, kg_N, ... mol_N: Whole;
m_D, kg_D, ... mol_D: Pos) is record
Value: Real;
end record;
Outside, nearly everything remains unchanged, and the above example looks like this:
Dist: Item := 10.0 * Meter;
Time: Item := Second;
g: constant Item := 9.81 * Meter / Second ** 2;
begin
Time := Sqrt (2.0 * Dist / g);
One has to get accustomed to this notation, that is true, but for safety critical applications, initialisation of every variable declaration often is a mandatory requirement, coming from the experience that uninitialised variables lead to mistakes
which are difficult to detect – and after all, it is increased safety we are after with
all our effort.
Of course we have to pay for the discriminants: They are space consuming since
for each item’s dimension, we store 14 integers – and rational arithmetics is very
run-time consuming. Thus application of this method under hard real-time conditions might seem prohibitive. This is not the case. We start out from the following
considerations. A real-time system is generally developed on a so-called host computer before being applied on the target computer. Also the unit tests are virtually
always performed on the host. There the correct real-time performance is irrelevant;
it cannot work on multi-user time-sharing systems anyway. So during development
including unit test, the method presented above is used.
Only when the program is ported to the target are the dimensions switched off.
To this end, another package Unchecked_SI is defined, which has the identical
visible specification as one of the packages above, but in the private part the dimensions are removed, only the item’s numeric value remains; all constants like Meter
become the pure value 1, so they can easily be optimised away. In the package
body, the dimension arithmetic is completely removed. If on the host 100% unit test
coverage is reached, at the same time also dimensional correctness of all statements
is proved – the run-time dimension checking can be switched off without detrimental effect.
package Unchecked_SI is
type Item (<>) is private; -- or without discriminant
... -- The visible part is unchanged.
private
type Item is record
Value: Real;
end record;
One : constant Item := (Value => 1.0);
Meter: constant Item := One;
end Unchecked_SI;

269

C. Grein, D.A. Kazakov, and F. Wilson

It is remarkable that the completion of Item in the private part does not have a discriminant. Nevertheless outside everything remains unchanged; declarations without
initial value are still illegal when a discriminant is specified in the visible part.
How do we proceed when transiting from the host to the target? We will demonstrate it with the following sample program:
with Constrained_Checked_SI;
package SI is new Constrained_Checked_SI (Float);
with SI; use SI;
procedure Test_SI is
g
: constant Item
Dist:
Item
Time:
Item
begin
Time := SQRT (2.0 *
end Test_SI;

:= 9.81 * Meter / Second**2;
:= 10.0 * Meter;
:= Second;
Dist / g);

All we have to do is change the instantiation of the package SI from Unconstrained_Checked_SI respectively Constrained_Checked_SI to Unchecked_SI since the visible part of both packages is the same; the rest of the application remains completely unchanged, however big it may be.
Of our requirements above, although 1 is clearly violated, 2 is fulfilled in a sense;
also 3 and 4 are fulfilled.

4

Conclusion

In Ada 95, full support of dimensional arithmetics can only be achieved with run-time
solutions. Since the Ada0Y process is just reaching its decisive phase, the considerations presented above could perhaps serve WG9 as an impetus to think about ways to
ease handling physical items in the next language version.

References
[1] Do-While Jones, Dimensional Data Types, Dr. Dobb’s Journal of Software Tools, 50–62,
May 1987
[2] Do-While Jones, Ada in Action, John Wiley & Sons, Inc., 1989
[3] N.H. Gehani, Ada’s Derived Types and Units of Measure, Software – Practice and Experience, Vol. 15(6), 555–569, June 1985
[4] P.N. Hilfinger, An Ada Package for Dimensional Analysis, ACM Transactions on Programming Languages and Systems, Vol. 10(2), 189–203, April 1988
[5] H.J. Schneider, Physikalische Maßeinheiten und das Typkonzept moderner Programmiersprachen, Informatik-Spektrum (1988) 11: 256–263
[6] C. Grein, Vom Urknall zum Universum, Ada Aktuell 1.1 (März 1993)
German: http://home.T-Online.de/home/Christ-Usch.Grein/Ada/Universum.html
English: http://home.T-Online.de/home/Christ-Usch.Grein/Ada/Universe.html
[7] F. Wilson, Macks, http://www.blancolioni.org/ada/macks

A Survey of Physical Unit Handling Techniques in Ada

270

[8] J. Shen, G.V. Cormack, Automatic Instantiation in Ada, ACM 0-89791-445-7/91/10000338 $1.50
[9] D.A. Kazakov, Units of Measurement for Ada
http://www.dmitry-kazakov.de/ada/units.htm
[10] C. Grein, Physikalische Dimensionen in Ada, Softwaretechnik-Trends, Band 22 Heft 4,
November 2002, http://home.T-Online.de/home/Christ-Usch.Grein/Ada/SI.html

