Network-Tree Model and Shortest Path
Algorithm
Guozhen Tan1 , Xiaojun Han1 , and Wen Gao2
1

Department of Computer Science and Engineering
Dalian University of Technology, 116024, China
gztan@dlut.edu.cn
2
Institute of Computing Technology
Chinese Academy of Sciences, 100080, China

Abstract. For the ﬁrst time, this paper proposes the Network-Tree
Model (NTM), route optimization theory and wholly new, high performance algorithm for shortest path calculation in large-scale network. We
ﬁrst decompose the network into a set of sub-networks by adopting the
idea of multi-hierarchy partition and anomalistic regional partition, and
then construct the NTM and the Expanded NTM. The Network-Tree
Shortest Path (NTSP) algorithm presented in this paper narrows the
searching space of the route optimization within a few sub-networks, so
it greatly reduces the requirements for main memory and improves the
computational eﬃciency compared to traditional algorithms. Experiment results based on grid network show that NTSP algorithm achieves
much higher computational performance than Dijkstra algorithm and
other hierarchical shortest path algorithms.
Keywords: nNetwork-tree model, shortest path algorithm, largescale network, route optimization algorithm

1

Introduction

The shortest-path problem (SP) is a key problem of many ﬁelds [1] such as computer science, transportation engineering, communication engineering, system
engineering, and operation research. Especially, the computing eﬃciency is the
bottleneck problem of route optimization for large-scale network. Furthermore,
the main memory requirement also is an important factor as to implement the
algorithm [2].
As known, there are two kinds of algorithms for shortest path computing, that
one is label-setting algorithm and the other is label-correcting algorithm, with
the representation of the classic Dijkstra algorithm and Bellman-Ford algorithm
respectively. All the other algorithms are the variations of these two kinds. People
have widely realized that all these algorithms cannot meet the requirements of
many applications when computing the shortest paths of large-scale network.
This work was supported in part by Grand 99025 of Ministry of Education and
Grand 9810200104 of Liaoning Science Foundation, China.
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2659, pp. 537–547, 2003.
c Springer-Verlag Berlin Heidelberg 2003

538

G. Tan, X. Han, and W. Gao

Partitioning the network and constructing new network model have become
a fast and eﬀective methods for improving computations in large-scale networks
[3], which have been widely applied in many ﬁelds such as Intelligent Transportation System (ITS), Graphic Information System (GIS) and route protocols
of network communication. Level graphs and associated approximate shortest
path algorithm were presented in [4,5,6], which signiﬁcantly improved the computing eﬃciency of path optimization. However, the level graph model cannot be
abstracted from any given graph, and the papers only provide the approximate
shortest path algorithm with the errors that cannot be overlooked. Hierarchical
Encoded Path View (HEPV) model can be found in [2,7], and a path-query algorithm based on this model was proposed to precompute and store the shortest
path of each sub-network for later on-line query. It did not provide signiﬁcant
improvement for route optimization of multi-level large-scale network. Furthermore, the method requires a large overhead main memory for storing the precomputed path information, which makes it impractical to use for calculating
the shortest path in a large-scale network.
For the ﬁrst time, we present the new network-tree model and the associated network-tree shortest path (NTSP) algorithm to solve eﬀectively the storage requirement and eﬃciency problem of large-scale network optimization. The
prominent advantages of network-tree model and NTSP algorithm compared
to the previous ones can be founded in the following four aspects: (1) We can
construct the network-tree model from any network; (2) The regional partition
and hierarchical partition method of network-tree model is very useful to store
the network date both hierarchically and distributively; (3) The concept of tree
expresses clearly the internal relation among the sub-networks. (4) The route
optimization can be constrained within a few sub-networks, which can greatly
reduce the searching scope and signiﬁcantly improve the computing eﬃciency.
So the main memory requirements of our algorithm are very limited.
The remainder of this paper is organized as follows: In Sect. 2, we present the
deﬁnitions of both the network-tree model and expanded network-tree model,
and the optimization theorem. In Sect. 3, we present the preprocessing procedure and NTSP algorithm. The experiment result will be presented in Sect. 4.
Section 5 is the conclusions.

2

Network-Tree Model

Network-Tree Model is the deﬁnitional combination and expansion of network
and tree. Any network can be divided into a number of sub-networks, and each
sub-network will be constructed to one node of network-tree. Specially, the node
of network-tree is called macro-node to distinguish from the node of original
network.
2.1

Deﬁnition of Network-Tree Model

Let the network-tree be N T ree = (T, H), where T is the macro-node set of N .
If only one macro-node exists in T , H = φ, otherwise, H is a binary relation

Network-Tree Model and Shortest Path Algorithm

539

deﬁned on T . There is only one macro-node mr called the root of N T ree. If
T − {mr } = φ, there exists a division of T1 , T2 , · · · , Tn (n > 0), with ∀j = k, 1 ≤
j, k ≤ n, Tj ∩ Tk = φ. For ∀i, 1 ≤ i ≤ n, the only macro-node mi ∈ Ti satisﬁes
< mr , mi >∈ H. As the counterpart of the T − {mr } division, there exists
the only division H1 , H2 , · · · , Hn of H − {< mr , m1 >, · · · , < mr , mn >}, with
∀j = k, 1 ≤ j, k ≤ n, Hj ∩ Hk = φ. For ∀i, 1 ≤ i ≤ n, Hi is a binary relation
deﬁned on Ti , and (Ti , Hi ) is also a network-tree deﬁned above, and we call it
the sub-tree of the root macro-node mr .
Next, we will present the method of network division and network-tree model
construction procedure from any network.
2.2

Construction of Network-Tree Model

Let the network be N = (V, A, W ), where V is a ﬁnite set of nodes, A ∈ N × N
is a ﬁnite set of arcs, W = {w(a)|a ∈ A}, w is the mapping function of A → R+ .
First, we assign levels to all arcs according to properties in the original network,
that is, we create a mapping function for arc set A.
Deﬁnition 1. ∀a ∈ A, ∃h ∈ I, I = {1, 2, · · · , k}, there exists a mapping function
f : A → I, which makes f (a) = h, where h is the level of arc a. And ∀h ∈ I,
which makes f −1 = {a|a ∈ A, f (a) = h} as a non-null space. Let the arc set of
level h be Ah , that is, Ah = f −1 (h).
Generally, let A1 be the highest level arc set. The more importance in rank
in the network, the smaller value of arc level.
Based on the arc level, we create the network-tree N T ree = (T, H) from
the network N = (V, A, W ). Let the A1 induced sub-network of N be the root
macro-node m1 of the network-tree, m1 ∈ T . If N −{m1 } = φ, we divide the subnetwork N − {m1 } into n1 non-null sub-networks T11 , T12 , · · · , T1n1 by A1 , and
for ∀p = q, 1 ≤ p, q ≤ n1 , we get T1p ∩ T1q = φ. Then ∀i, 1 ≤ i ≤ n1 , abstract
the highest-level arcs from T1i to make the arc set A1i , let the A1i induced
sub-network of T1i and the node intersection set of T1i and m1 be the ith son
macro-node m1i of m1 , that is m1i ∈ T , < m1 , m1i >∈ H. If T1i − {m1i } = φ, we
continue to divide the sub-network T1i − {m1i } into n1i non-null sub-networks
Tli1 , T1i2 , · · · , T1in by A1i , and for ∀p = q, 1 ≤ p, q ≤ n1i , we get T1ip ∩ T1iq = φ.
Then ∀j, 1 ≤ j ≤ nli , abstract the highest-level arcs from T1ij to make the
arc set Alij , let the Alij induced sub-network of T1ij and the node intersection
set of T1ij and m1i be the jth son macro-node m1ij of m1i , that is m1ij ∈ T ,
< m1i , m1ij >∈ H. Follow the step above to continue the construction until we
get the network-tree model N T ree = (T, H).
We get the following deﬁnitions and properties of NTM.
Deﬁnition 2. In network-tree model N T ree = (T, H), any macro-node mc ∈ T ,
if there exists the parent macro-node mp ∈ T , that is, < mp , mc >∈ H, the node
set of mc ∩mp is called the connecting node set of mc , denoted by Rmc . Obviously,
the connecting node set of the root macro-node is null.

540

G. Tan, X. Han, and W. Gao

Deﬁnition 3. The mapping function σ : V → T , for ∀v ∈ V , there exists the
only macro-node mi ∈ T , v ∈ V (mi ) and v ∈
/ Rmi , then let (v, mi ) ∈ σ, denoted
by σ(v) = mi , and we call σ the mapping from node of original network to
macro-node of network-tree.
Deﬁnition 4. The mapping function ϕ : V → I, ∀v ∈ V , let ϕ(v) denote the
level of node v, with the level number of the macro-node σ(v) in the network-tree
being the node’s level number. We assign the level number of root macro-node
to 1.
Property 1. ∀u, v ∈ V , let Tσ(u) be the sub-tree which root is σ(u), and mp
be the parent macro-node of σ(u), with mp being non-null. If σ(v) ∈
/ Tσ(u) ,
and there exists the path π = π1 = (v0 = u, v1 , v2 , · · · , vn = v) or π = π2 =
(v0 = v, v1 , v2 , · · · , vn = u) between u and v in the original network, then ∃vi ,
0 < i ≤ n, with vi ∈ Rσ(u) ⊆ V (mp ), and if π = π1 , the path from u to vi must
be in Tσ(u) , and if π = π2 , the path from vi to u must be in Tσ(u) .
Property 1 shows the special characteristics of path in network-tree, which
can be directly extracted from the construction procedure of network-tree.
2.3

Theory of Path Optimization

Let spN0 (u, v) denote the shortest path from u to v in network N0 , and l(π)
denote the distance of path π.
Deﬁnition 5. Network-tree model N T ree = (T, H), if for each sub-tree
T of N T ree, with macro-node mr being the root of T , ∀u, v ∈ V (mr ),
l(spmc (u, v)) = l(spT (u, v)), thus N T ree is called Expanded Network-Tree
Model.
Deﬁnition 6. Network-tree model N T ree = (T, H), let the transitive closure of
macro-node m be Bm = {mp |(mp ∈ T ) ∧ (mp = m ∨ (∃mq ∈ Bm )(< mp , mq >∈
H))}.
In Expanded Network-Tree Model, we get the following optimal theorem.
Theorem 1. In the Expanded Network-Tree Model, ∀s, t ∈ V , let Bσ(s) , Bσ(t)
be the transitive closures of macro-nodes σ(s) and σ(t) respectively, and then
there must be l(spN (s, t)) = l(spBσ(s) ∪Bσ(t) (s, t)), that is, at least one shortest
path from s to t in original network N exists in the sub-networks contained by
Bσ(s) ) ∪ Bσ(t) .
Proof. Let one of shortest paths from s to t in original network N be
spN (s, t) = (v0 = s, v1 , v2 , · · · , vn = t), so we only need to prove if spN (s, t)
does not exist in the sub-networks of Bσ(s) ) ∪ Bσ(t) , we always can ﬁnd the path
π from s to t in the Bσ(s) ) ∪ Bσ(t) , with l(π) = l(spN (s, t)).
We discuss the spN (s, t) repeatedly under the following three cases:
Case 1: when ϕ(s) > ϕ(t), let Tσ(s) be the sub-tree which root is σ(s), and mp
be the parent macro-node of σ(s), obviously mp = φ and σ(t) ∈
/ Tσ(s) . According
to the Property 1, there must be ∃vi , 0 < i ≤ n, with vi ∈ Rσ(s) ⊆ V (mp ), and

Network-Tree Model and Shortest Path Algorithm

541

the path from s to vi exists in Tσ(s) , so l(spTσ(s) (s, vi )) = l(spN (s, vi ))). As
s, v ∈ σ(s), and according to the deﬁnition of expanded network-tree model,
l(spσ(s) (s, vi )) = l(spTσ(s) (s, vi )). Therefore, l(spσ(s) (s, vi )) = l(spN (s, vi )). Let
π = spσ(s) (s, vi ) + spN (vi , t), and then l(π) = l(spN (s, t)). σ(s) ∈ Bσ(s) , so
spσ(s) (s, vi ) exists in Bσ(s) . Let s = vi , and we continue to discuss the sub-path
spN (vi , t) until all sub-paths of π exist in Bσ(s) ∪ Bσ(t) .
Case 2: when ϕ(s) < ϕ(t), Similar as the case 1, there must be ∃vi , 0 < i ≤ n,
with vi ∈ Rσ(t) ⊆ V (mp ), and the path from vi to t exists in Tσ(t) . Let π =
spN (s, vi ) + spσ(t) (vi , t), with l(π) = l(spN (s, t)), and spσ(t) (vi , t) exists in Bσ(t) .
Let t = vi , and we continue to discuss the sub-path spN (s, vi ) until all sub-paths
of π exist in Bσ(s) ∪ Bσ(t) .
Case 3: when ϕ(s) = ϕ(t), if σ(s) = σ(t), discuss the path as case 1. And if
σ(s) = σ(t), that is, both s and t locate in the same macro-node, there exist
two case: A.When σ(s) is not the root macro-node of N T ree, if l(spσ(s) (s, t) =
l(spN (s, t)), let π = spσ(s) (s, t), with π being in the Bσ(s) , satisfying the proof
requirements, and quit the discussion. Otherwise, there must be ∃vi , o < i < n,
with vi ∈ Rσ(s) , and spN (s, vi ) exists in the σ(s), that is, l(spσ(s) (s, vi )) =
l(spN (s, vi )). Let π = spσ(s) (s, vi ) + spN (vi , t), and continue to discuss the rest
path spN (vi , t) as case 2. B.When σ(s) is the root macro-node of N T ree, then
π = spσ(s) (s, t), obviously l(π) = l(spN (s, t)), and π exists in Bσ(s) , satisfying
the proof requirements, and quit the discussion.
Stated as above, the path π will exist in the sub-networks contained by
Bσ(s) and Bσ(t) after a ﬁnite number of discussions, with l(π) = l(spN (s, t)).
The theorem of route optimization builds theoretical bases for high performance
shortest path computing of large-scale network, and we only need to search a
few macro-nodes when computing the shortest path of Expanded NTM.

3
3.1

Shortest Path Algorithm of Expanded Network-Tree
Model
Preprocessing Procedure

We have presented the construction procedure from general network to networktree in the previous section, but the constructed network-tree cannot be guaranteed to be an expanded network-tree. Therefore we need a preprocessing procedure to create the expanded network-tree from network-tree. First we present
the deﬁnition of virtual arc.
Deﬁnition 7. In network model N = (V, A, W ), ∀u, v ∈ V , let the virtual arc
from u to v be auv = (u, v, spN (u, v)), with w(auv ) = l(spN (u, v)), that is, the
virtual arc is constructed by the shortest path between the corresponding two
nodes.
Preprocessing procedure will begin with the bottom level macro-nodes in
the network-tree, and process all the macro-nodes from bottom to top. For any
two connecting nodes in a macro-node m, if the shortest path between these two

542

G. Tan, X. Han, and W. Gao

nodes in m is less than the corresponding shortest path in the parent macro-node
of m, add the virtual arc between these two nodes in m to the parent macronode of m. We present the following recursive procedure, where the function
Djik(u, v, N0 ) denotes that we invoke the Dijkstra algorithm to calculating the
shortest path from u to v in the network N0 .
Preprocessing Algorithm:
/* Input: the macro-node m*/
[1] : for each son macro-node ms of m do
[2] :
Preprocess (ms );
end for;
[3] : if the parent macro-node mp of m not null then
[4] :
for ∀u, v ∈ Rm do
[5] :
if Djik(u, v, m) < Djik(u, v, mp ), then
[6] :
new arc = (u, v, Djik(u, v, m)), mp = mp ∪ {new arc};
end if; end for; end if; end.
So we can invoke the preprocessing procedure to convert any network-tree to the
expanded network-tree, with the root macro-node of the network-tree being the
input macro-node. Obviously, the preprocessed network-tree is sure to be the
expanded network-tree.
3.2

Network-Tree Shortest Path (N T SP ) Algorithm

There should be two steps in the N T SP algorithm: computing the transitive
closure B that the optimal path exists in and searching the optimal path in B.
We present the following N T SP algorithm, where the network model is the
expanded network-tree N T ree, and d[v] is the label of the shortest distance
from starting node s to the node v, and π(vi ) represents the shortest path from
starting node s to node vi , and open is the set of temporarily-labeled node during
the searching procedure, and close is the set of permanently-labeled node.
N T SP Algorithm.
/* Input: Starting node s and destination node t; Output: The shortest path
from s to t */
[1] Initialization:
open = {s}, closed=φ; ∀v ∈ N T ree, d[v]=∞, d[s]=0;
∀i ∈ N T ree, πi = N ull; B = φ, ms = σ(s),mt = σ(t) ;
[2] while ms = φ do B=B+ms , ms = ms .parent;
[3] while mt = φ do B=B+mt , mt = mt .parent;
[4] while open = φ do
[5]
vc = mind[v] {v|v ∈ open};
[6]
open = open − {vc }, closed = closed + {vc };
[7]
if vc = t then break;
[8]
for each arc avc v in B emanating from vc do
[9]
if d[v] > d[vc ] + w(avc v ) then
[10]
d[v] = d[vc ] + w(avc v );

Network-Tree Model and Shortest Path Algorithm

543

if v ∈
/ open then open = open + {v};
end if ; end for; end while;
[12] if d[t] = ∞ then π(t) = null;
[13] return π(t), and algorithm terminates.
[11]

N T SP algorithm computes the transitive closure at step [2], [3], and B contains
the transitive closures of both macro-node σ(s) and σ(t). The searching procedure always be constrained in B, satisfying the requirements of Theorem 1, so at
least one shortest path from s to t is sure to exist in the B. As the label-marked
searching technology is adopted, the algorithm will be able to ﬁnd the shortest
path from s to t in B that is also the shortest path in original network according
to Theorem 1.

4
4.1

Experimental Results
Network-Tree Based on Lattice Structures

We present the following procedure to construct the network-tree N T ree based
on lattice structures, with k(k ≥ 2) being the level number of the network-tree,
lh and bh are integers, 1 ≤ h ≤ k, and w1 < w2 < · · · < wk−1 < wk .
k

k

I. Construct a h=1 lh × h=1 bh rectangular lattice, and place the lattice in the
ﬁrst quadrant of the Cartesian plane, with the lower left corner corresponding
to (0, 0), and the lattice and Cartesian coordinates match;
II. The nodes of the lattice correspond nodes of the network; sides of the lattice
correspond to the bi-directional arcs of the network. The following sub-procedure
constructs the network-tree N T ree and assigns weight value to the arcs:
k

Step1: Abstract the nodes which abscissa can be divided exactly by i=2 li or
k
which ordinate can be divided by i=2 bi , and all the arcs between these nodes
to construct the root macro-node mr of N T ree. Let the weight of all these
arcs be w1 . The rest network is divided into l1 × b1 sub-networks by mr , and
let the parent macro-node of these sub-networks be mr , and process all these
sub-networks as step2, with initially h = 2.
Step2: For each sub-network Nsub , if h = k, then let the whole sub-network Nsub
be a macro-node m of N T ree. Otherwise, in the sub-network Nsub , abstract the
k
nodes which abscissa can be divided exactly by i=h+1 li or which ordinate can
k
be divided by i=h+1 li , and all the arcs between these nodes to construct a
macro-node m. Let the parent macro-node of Nsub be the parent macro-node
of m, and the weight of all the arcs in m be wh . When h = k, the sub-network
Nsub −{m} is divided into lh ×bh smaller sub-networks, and let the parent macronode of all these new smaller sub-networks be m. Until all the sub-networks are
processed, then continue to the step3.
Step3: Let h = h + 1, and if h > k, then go to the step4. Otherwise, go to step2
to process all the new smaller sub-networks.

544

G. Tan, X. Han, and W. Gao

Step4: The network-tree construction is completed.
For example, shown as Fig. 1, we create a network-tree based on lattice structures
with k = 3, l1 = b1 = 2, l2 = b2 = 3, l3 = b3 = 4, w1 = 2, w2 = 3 and w3 = 5.

Y
(24,24)

(0,24)

X
(24,0)

(0,0)

9

9
9

9

Fig. 1. The example of network-tree construction based on lattice structures

4.2

Experimental Results

We will create a large number of origin and destination nodes (OD pairs) randomly, and the computing eﬃciency will be measured by the average calculation
n

Ti

, with n being the number of OD pairs.
time, that is T = i=1
n
To better observe the algorithms’ computing performance when calculating
OD pairs of diﬀerent distance, we deﬁne the test distance of OD pair: Let the
original node be s(xs , ys ) and the destination node be t(xt , yt ), We adopt the
Manhattan values as the test distance of this OD pair, that is |xt −xs |+|yt −ys |.
Our experiment uses a Pentium IV personal computer running at 1.7 GHz
with 256 MB RAM. The operating system is Windows98; the programming
language is Visual C++ 6.0.
We present the following computing eﬃciency comparisons of N T SP , hierarchical encoded path query (HEP Q), and Dijkstra algorithm.
Experiment 1. Comparison of N T SP , HEP Q, and Dijkstra algorithm with
two-level expanded network-tree under diﬀerent test distances. The parameters
are set as k = 2, l1 = b1 = 6, l2 = b2 = 10, w1 = 2 and w2 = 5, thus the total
node number is 3721, the total arc number is 14876, results are demonstrated in
Fig. 2.

Network-Tree Model and Shortest Path Algorithm

545

25

avg. computing time (milliseconds)

20

Dijkstra

15

HEPQ
NTSP
10

5

0

0

10

20

30

40

50
test distance

60

70

80

90

100

Fig. 2. Comparison of NTSP, HEPQ, and Dijkstra algorithm with two-level expanded
network-tree

Experiment 2. Comparison of three N T SP algorithms and Dijkstra algorithm with three-level expanded network-tree under diﬀerent test distances. The
parameters are set as k = 3, lh = bh = 6(1 ≤ h ≤ 3), w1 = 2, w2 = 4 and
w3 = 7, thus the total node number is 47089, the total arc number is 188348,
results are demonstrated in Fig. 3.

1.6

1.4

avg. computing time (seconds)

1.2

Dijkstra

1

NTSP
0.8

0.6

0.4

0.2

0

0

50

100

150

200
test distance

250

300

350

400

Fig. 3. Comparison of NTSP algorithms and Dijkstra algorithm with three-level expanded network-tree

546

G. Tan, X. Han, and W. Gao

Experiment 3. Comparison of N T SP algorithms, HEP Q and Dijkstra algorithm under diﬀerent network sizes. The parameters are set as k = 2, w1 = 2
and w2 = 5, and results are demonstrated in Table 1.
Table 1. The comparing result under diﬀerent network sizes (seconds)
l1 = b1 = 4
l2 = b2 = 5
Nodes:441
Arcs:1756
Dijkstra 0.000913
HEP Q 0.000776
N T SP 0.000413
Size

4.3

l1 = b1 = 6
l2 = b2 = 10
Nodes:3721
Arcs:14876
0.012562
0.004755
0.002278

l1 = b1 = 8
l2 = b2 = 10
Nodes:6561
Arcs:26236
0.028487
0.049369
0.003710

l1 = b1 = 10
l2 = b2 = 11
Nodes:12321
Arcs:49276
0.065932
∞
0.006154

l1 = b1 = 12
l2 = b2 = 12
Nodes:21025
Arcs:84092
0.155256
∞
0.010132

l1 = b1 = 16
l2 = b2 = 16
Nodes:66049
Arcs:264188
1.371372
∞
0.026215

Interpretation of Results

The test results show the diﬀerent computing performances of N T SP , HEP Q
and Dijkstra algorithm: Experiment 1 shows that the N T SP algorithm achieves
higher computing eﬃciency than HEP Q and Dijkstra algorithm under all the
test distances, especially with the network size increasing, such as Experiment 3,
under the best case the N T SP algorithm improved computing time by a factor of
50 over the Dijkstra algorithm. The spatial complexity of the HEP Q algorithm
is very high; therefore, the algorithm can accelerate the computing speed to a
certain degree when applying to small or general network (see Experiment 1),
but if the storage is constrained, the computing performance decreases when
the network size increases to a certain size. As Experiment 3 shows, when the
network size increases to 12,321 nodes, the HEP Q algorithm required more main
memory than our test computer could provide, and the algorithm was unable to
ﬁnd a shortest path.

5

Conclusions

The network-tree model and NTSP algorithm provide a wholly new method to
eﬀectively implement the optimization of large-scale network. The advantages
of network-tree model express not only at the great eﬃciency improvement of
shortest path computing, but also at the network data partition according to the
hierarchical characteristic and regional characteristic, which is very important
for many deﬁnite application areas.
The network-tree model and NTSP algorithms not only can be apply to the
path optimization of static network, but also can be expanded to the dynamic
optimal path searching of time-dependent network. The algorithms have an excellent parallel structure, and are well suited to realizing parallel computations
of the shortest path.

Network-Tree Model and Shortest Path Algorithm

547

References
1. Cherkassky B.V., Goldberg A.V., Radzik T.: Shortest paths algorithms: Theory and
experimental evaluation. Mathematical Programming, 1996, 73(2): 129–174
2. Ning Jing, Yun-Wu Wang, and Elke A. Rundensteiner: Hierarchical Encoded Path
Views for Path Query Processing: An Optimal Model and Its Performance Evaluation. IEEE Transactions on Knowledge and Data Engineering, 1998, 10(3): 409–432
3. A.Car, G.Taylor, C.Brunsdon. An analysis of the performance of a hierarchical
wayﬁnding computational model using synthetic graphs. Computers, Environment
and Urban Systems, 2001, 25: 69–88
4. J. Shapiro, J. Waxman, D. Nir: Level Graphs and Approximate Shortest Path Algorithms, Networks, 1992, 22: 691–717
5. Yu-Li Chou, H. Edwin Romeijn and Robert L. Smith: Approximating Shortest Paths
in Large-Scale Networks with an Application to Intelligent Transportation Systems,
INFORMS journal on Computing, 1998, 10 (2): 163–179
6. Chan-Kyoo Park, Kiseok Sung, Seungyong Doh, Soondal Park: Finding a path in
the hierarchical road networks. 2001 IEEE Intelligent Transportation Systems Conference Proceedings-Oakland (CA) USA, August 25–29, 2001, pp. 936–942
7. A. Fetterer, S. Shekhar: A Performance Analysis of Hierarchical Shortest Path Algorithms. IEEE Proceedings of the International Conference on Tools with Artiﬁcial
Intelligence, Nov 3–8, 1997, pp. 84–92

