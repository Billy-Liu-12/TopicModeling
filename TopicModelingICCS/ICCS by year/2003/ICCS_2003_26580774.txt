Replicated Ambient Petri Nets

775

Elementary Object Systems provide two-level systems, but to cope with the
features of the Ambient Calculus, we need arbitrary nesting. Then we had to
unify both frameworks by deşning ambient Petri nets ţ5ţ, which allow the arbitrary nesting of object nets in order to model the arbitrary nesting of ambients.
Although the Ambient Calculus is a relatively simple model, we have found
several technical ෈but interesting෉ dişculties related with the covering of dişerent
features of the calculus. Therefore, in order to give a clear and well motivated
presentation, we have decided to introduce the model in an incremental way,
by means of a series of papers, such that each one of them will focus on some
of those features. So, in our şrst paper we have just considered the mobility
primitives of the calculus and the parallel operator, which are enough to get a
şrst notion of ambient net.
In this paper we enrich its deşnition in order to introduce the replication
operator from the Ambient Calculus, !P , which generates an unbounded number of parallel copies of P . Besides, we will shortly explain how the restriction
operation, (νn)P , which is used to introduce new names and limit their scope,
interacts with that new operator.
Our şnal goal is to use ambient Petri nets to provide a denotational semantics
for the Ambient Calculus. The way we follow, in order to encompass an algebraic
formalism together with another Petri net based one, is that of the Petri Box
Calculus ෈PBC෉ ţ1, 2, 6ţ, which has been proved to be a suitable framework for
these purposes. Therefore, our new model can be also interpreted as an extension
of PBC that includes ambients ţ5ţ.
In fact, we have a large experience in the development of PBC extensions. So,
in ţ8ţ we have deşned an elaborate timed extension, while in ţ7ţ we have presented
a stochastic extension. By means of this new mobile version of PBC we try to
introduce the ideas from the Ambient Calculus, which allows to model mobile
systems in a simple but formally supported way. We hope that the developers of
mobile systems who are familiar with Petri nets, will şnd in our formal model
a tool to deşne those rather complicated systems, providing a formal basis for
proving that the modelled systems fulşll their specişcations.
1.1

Background

In this section we give a short overview of our basic model of ambient Petri nets.
A simple ambient Petri net is a şnite collection of named Petri nets A =
{n1 : A1 , n2 : A2 , . . . , nk : Ak } for which we introduce a location pair, loc, open ,
that deşnes both the current location of each component net, Ai = (Pi , Ti, Wi )
with i ≥ 2, and its ෈open or closed෉ state. Intuitively, nets {A2 , . . . , Ak } can be
seen as net tokens that move along the full set of places of A, thus representing
the movement of ambients. As a consequence, it is possible to şnd in the places
of an ambient Petri net both ordinary and high-level tokens. By unfolding the
latter we obtain the collection of nested marked ordinary nets that constitute
the ambient net, in which we say that n1 is the root net.
In order to adequately support the mobility of ambients due to the execution of capabilities, each ambient Petri net has two kinds of transitions. Besides

776

D. de Frutos Escrig and O. Marroquín Alonso

the ordinary ones there is a set of high-level transitions, that we call ambient
transitions, Amb(A) = {In ni , Out ni , Open ni | i ∈ {2, . . . , k}}. Those ambient
transitions are used for controlling the movement of the object tokens in A.
Their şring is synchronized with the şring of the transitions in the component
nets labelled by elements in C = {in ni, out ni, open ni | i ∈ {2, . . . , k}}, thus
modifying both the location of the modişed component and the internal state of
the triggering low-level token transition which represents the capability to move
that component.
In the Ambient Calculus, the entry capability can be used by a process
in m.P , to instruct the surrounding ambient to enter into a sibling ambient
named m, as stated by the reduction rule n[in m.P |Q]|m[R] → m[n[P |Q]|R]. In
the case of ambient Petri nets we say that two net tokens are siblings if they
are located in places of the same component. The şring of (In ni , in ni) pairs
will move a component net into another, but since we need the particular place
where the token will be allocated, we will provide together with the capability the
name of that place, thus having some (in ni, pi ) as the label of the corresponding
transition.
Concerning the exit transitions, modelled in the Ambient Calculus by the
capabilities out m, they produce the exit of the surrounding ambient of out m.P
from its containing ambient m, such as the corresponding reduction rule shows:
m[n[out m.P |Q]|R] → m[R]|n[P |Q]. Then, in the ambient Petri net model whenever a net token nj located at ni may şre an out ni transition, we can şre the
ambient transition Out(ni, nj ) by moving nj into the location of ni .
Finally, ambients can be open ෈and destroyed෉ by using an opening capability,
open m. Thus, open m.P provides a way of dissolving the boundary of an ambient
named m located at the same level that this process, according to the rule
open m.P |m[Q] → P |Q. The şring of pairs of the form (Open ni , open ni ) has
the same eşect in an ambient Petri net that the one described. Nevertheless, since
we are interested in an static description of ambient nets, we do not remove the
open net, but just attach to it a label that describes its ෈open෉ state. In this way,
its contents will be treated in the future as parts of the containing component.
The execution of ordinary transitions, which are not labelled by capabilities,
follows the şring rule for the ordinary Petri nets: The tokens in the preset places
of the involved transition are consumed, and instead new tokens are added into
the postset places.
As a consequence of mixing both ordinary and ambient transitions, we obtained a new class of Petri nets suitable for modeling mobile agents based systems. Nevertheless, this new framework does not support any mechanism of
replication, which is widely used in order to represent replication of services.
With this purpose, the Ambient Calculus provides expressions of the form !P
that represent an unbounded number of parallel replicas of P , and whose behaviour is reşected by the structural congruence relation between !P and P |!P :
!P ≡ P |!P .
The extension of the ambient nets with such a mechanism results in the definition of Replicated Ambient nets, which are described in the following section.

Replicated Ambient Petri Nets

777

2 Formal Deşnitions
In order to deşne replicated ambient Petri nets we extend the ambient Petri
nets in ţ5ţ to include the elements that will make possible the translation of the
replication operator from the Ambient Calculus. We will motivate each necessary
extension by means of a simple example. In each case we will study a term from
our calculus, which combines operators from both the Ambient Calculus and
PBC.
This calculus mixes together capabilities and ordinary actions that belong
to a countable alphabet of labels A, and provides some operators to combine
processes in a compositional way. Amongst those operators, the new language includes the sequential composition ෈_; _෉, the parallel composition ෈_|_෉ and the
synchronization ෈_sy a෉, all inherited from PBC, together with the replication
operator ෈!_෉.
The sequential composition is a generalized form of the preşx operator. In
the parallel composition P |Q the involved actions are independently executed
by P and Q, either sequentially or concurrently, but without any communication between them. Therefore, if P −−Γ→P and Q−−∆→Q then P |Q−−Γ−+∆
−−→P |Q ,
where Γ, ∆ ∈ M(A). Finally, in order to support synchronization, we assume
the existence of a bijection : A −→ A, called conjugation, by means of which
we associate to each label a ∈ A the corresponding aˆ ∈ A. This function must
satisfy that ∀a ∈ A aˆ = a ∧ aˆˆ = a. Then synchronization, which is never
forced, is modeled by means of pairs of conjugated actions in such a way that if
{α+a}+{β+ˆ
a}+Γ
{α+β}+Γ
P sy a−−−−−−−−−−−−−→P sy a then P sy a−−−−−−−−→P sy a. By applying this
operator over terms of the form P = P1 |P2 we obtain the usual communication
mechanism between processes, although, as stated above, it is not mandatory,
since P sy a can still mimic the behaviour of P : Whenever P −−Γ→P we have also
Γ
P sy a−−→P sy a.
Example 1. Let us consider the term !a. In order to represent the creation of a
new clone of the body of the replication, as stated by the expansion !a ≡ a|!a, we
introduce a τ -transition connected to the entry place of the process ෈Figure 1෈a෉෉.
In this way, whenever a new copy of a is needed, the τ -transition is şred generating two new tokens: One of them will occupy the precondition of a, which
allows to initiate a new execution of that body expression, while the other one
stays in the precondition of the τ -transition awaiting for a new replication of the
process. In our graphical representations we will omit τ -transitions by replacing
them with arcs that directly connect the involved places. As a consequence, for
the net in Figure 1෈a෉ we would get that in Figure 1෈b෉.
By applying this deşnition we would lose safeness of the markings, since by
şring the initial τ -transition one can create as many tokens as desired in the
entry places of the net corresponding to the body of the operator. Nevertheless,
this is necessary in order to represent in the same net the parallel execution of an
unbounded number of replicas of the net. However, in some cases it is important
to separate the execution of those copies, to adequately translate the semantics
of the replication operator.

778

D. de Frutos Escrig and O. Marroquín Alonso
e •

τ

e •

e

a

e x

෈a෉

e

a

e x

෈b෉

Fig.1. ෈a෉ Representing replication ෈b෉ Compact representation ෈omiting τ 's෉
Example 2. Let us consider the term !((a|ˆa)sy a). If we apply the simple translation from the previous example we would get the net in Figure 2෈a෉, once we
just remove all the tokens in its places. Then, if we expand twice the replication
operator we would get the expression ((a|ˆa)sy a)|((a|ˆa)sy a)|!((a|ˆa)sy a), which
in the net will produce a couple of tokens in each of the entry places of the
encoding of the term (a|ˆa)sy a. How do we represent the joint şring of a from
the şrst copy and aˆ from the second?. If the textual expression performs both
actions we obtain a term in which we cannot şre the synchronizing transition
without a new expansion of the replication operator:
a

((a|ˆ
a)sy a)|((a|ˆ
a)sy a)|!((a|ˆ
a)sy a) −−→ (ˆ
asy a)|((a|ˆ
a)sy a)|!((a|ˆ
a)sy a)
a
ˆ
−−→ (ˆ
asy a)|(asy a)|!((a|ˆ
a)sy a)

Instead, in the net representation we can use the available tokens from the two
replicas to şre the synchronizing transition. We conclude that it is necessary
to personalize the tokens from each activation of a replication, to prevent from
consuming tokens of several copies in the şring of a transition, that should be
restricted to single copies of the body. This is done by labelling tokens in the
scope of a replication operator with a natural number that identişes the serial
number to which it corresponds. So we get the representation in Figure 2෈b෉.
But in order to cover the case of nested replicated operators we still need another
generalization.
Example 3. Let us consider the term !(a; !b). Each activation of the main replication operator generates a term a; !b, where still a collection of dişerent copies of
b would be generated. This behaviour is reşected by the following computation,
in which we can execute b actions belonging to dişerent replicas of the term a; !b:
!(a; !b) ≡ (a; !b)|(a; !b)|!(a; !b) −−a→ !b|(a; !b)|!(a; !b) −−a→ !b|!b|!(a; |b)
b
≡ (b|b|!b)|(b|!b)|!(a; !b) −−→ (b|b|!b)|!b|!(a; !b)
solution to link each replica of b with the corresponding clone of a; !b,

The
that
is, to individualize the involved tokens in a simple and satisfactory way, is to
• e

෈a෉
n

••
a
x

Fig.2.

••

••

?

12
n
a

a
ˆ
••

x

x

n
12

+1
3 e
n

?

෈b෉

12
n
a
ˆ
n
12

x

෈a෉ Encoding with plain tokens ෈b෉ Encoding with individualized tokens

Replicated Ambient Petri Nets

+1
e

3 3;2 n

779

+1
3;2 3;2

Fig.3.

a ◦1

1;3 2;2

n

1;1 1;2

b

2;1 3;2

x

Encoding with sequences of natural numbers

label the tokens with a sequence of natural numbers, with an element for each
nested replicated operator. Thus, for the given computation we would get the
marked net in Figure 3.
For any place in a subnet which is not in the scope of any replication operator,
the tokens in it would be labelled with the empty sequence .
With all this in mind we can give the deşnitions for replicated ambient Petri nets.
Following the ideas from the Petri Box Calculus we distinguish static ෈unmarked෉
nets and dynamic ෈marked෉ ones. The şrst constitute the şxed architecture of the
corresponding system, which remains the same along its execution. Therefore,
static replicated ambient Petri nets are deşned as in the simple non-replicated
case ෈see ţ5ţ෉, although now component nets can contain τ -transitions which will
be used to generate the copies of the replicated subnets of the system. Besides,
we need some annotations in the arcs to cope with the adequate labelling of the
tokens involved in the şring of some transitions. Therefore, we start with a given
set of ambient names N , and then we have:
Deşnition 4 ෈Component net෉. A component net is an ordinary Petri net
N = (P, T, W ), where:
ර P is the set of places, which is partitioned into three subsets: E of entry
places, X of exit places and I of internal places,
ර T is the set of transitions, disjoint from P , that contains two subsets: Int(T ),
composed of internal transitions, and Amb(T ), constituted by ambient
transitions which are labelled by pairs of the form (cap, n) with cap ∈
{in, out, open} and n ∈ N ,
ර W ⊆ (P × T ) ∪ (T × P ) is the set of connection arcs. Some of its elements
could have an annotation in the set L∪{+1, ◦1}, where L is a set of variables
to denote labels of tokens, +1 represents the addition of one unit to the last
term of the label of the involved token, and ◦1 represents the concatenation
with a new 1.
Example 5. The ෈single෉ component net for the term !(a; !b) would be the net in
Figure 3, if we just remove all the tokens from its places.

Deşnition 6 ෈Static replicated ambient Petri net෉. A static replicated
ambient Petri net is a şnite collection of named component nets A = {n1 :

A1 , n2 : A2 , . . . , nk : Ak } where k ≥ 1, n1 = root
j ⇒ ni = nj ).

and ∀i, j ∈ {1, . . . , k} ni ∈ N ∧ (i =

In the following, we will call to A1 the root net of A and N (A) = {n2, . . . , nk }
will denote the ambient nets that can be used in the system. For each one of
them we have the corresponding component which deşnes the behaviour of each

780

D. de Frutos Escrig and O. Marroquín Alonso

copy of this ambient. In ordinary ambient nets we cannot replicate any term,
which is captured by the fact that each component can be only performed once,
but now we can begin the execution of a new copy of any ambient whenever a
τ -transition is şred, reşecting the replication of the corresponding subnet. As
a consequence, in a dynamic replicated ambient Petri net we may have several
copies of some ambients. Each one of those replicas can be identişed by the set
of tokens that are involved in its execution.
Deşnition 7 ෈Ambient copies෉. Given a replicated ambient net A, a set of
ambient
copies for it is deşned by means of a function Copies : N (A) →
Pf (N∗ ) which verişes that ∀c, c ∈ Copies (n) |c| = |c |.
As stated above, the values in Copies (n) denote the set of labelled tokens that
have been used to şre a new copy of the ambient. Since the replicated ambient
will be situated in a şxed place of the system, then all the tokens that can visit
that place will have the same length, this is why we impose that all the copies
of each ambient will be labelled by strings of the same length. More exactly, any
replica of an ambient n will be denoted by a pair composed of the name of this
ambient and the label c of the token that is involved in its activation.
The behaviour of the copies of an ambient is not interconnected, so the
location of each ambient copy of n ∈ N (A) must be deşned independently by
means of the location pair corresponding to A. Due to the arbitrary nesting of
component nets, an ambient copy of n ∈ N (A), n, c , could be located in a place
p of an ambient copy of n ∈ N (A), n , c , which is denoted by loc( n, c ) =
( n , c , p ), and because of the performance of the open capability, the boundary
of any ambient replica could be broken, which is denoted by open( n, c ) = true .
Deşnition 8 ෈Location pair for ambient copies෉. Given a static replicated
ambient Petri net A and a set of ambient copies for it deşned by the function Copies , we deşne a location pair for them as a pair of partial functions
loc, open with loc : N (A) × (N∗ ∪ {0}) → ((N (A) ∪ root) × (N∗ ∪ {0})) × P
verifying
ර loc( n,∗ c ) ↓⇐⇒ (c ∈ Copies (n) ∨ c = 0),
ර (c ∈ N ∧ loc( n, c ) = ( n , c , p )) =⇒ (n = root ∧ c = ) ∨ c ∈ Copies (n ),
ර loc( n, 0 ) = ( n , c , p ) =⇒ (n = root ∧ c = ) ∨ (n = root ∧ c = 0),
and open : N (A) × N∗ → Bool , with open( n, c ) ↓⇐⇒ c ∈ Copies (n).
In this way, if n is the name of a component net, then we have two kinds
of associated ambients: n, 0 represent the original ambient from which we can
generate copies and it will be located in some place of the system. Whenever a
token labelled by c arrives to that place, we are able to generate the corresponding copy n, c , whose execution starts. The original ambient token will remain
at the same place, ready to generate new copies when new generating tokens
will arrive to the involved place. These generated replicas will be the active net
tokens of the system. In particular, they can be moved by means of the corresponding ambient transition. Instead, the original ambients are static: Neither
they are executed nor moved along the system.

Replicated Ambient Petri Nets

781

Deşnition 9 ෈Located replicated ambient Petri net෉. A located replicated ambient Petri net is a static replicated ambient net for which we have

deşned the location pair corresponding to its full set of ambient copies.
Deşnition 10 ෈Dynamic replicated ambient Petri net෉. A dynamic replicated ambient Petri net is a located replicated ambient
net for which we have
deşned an ordinary marking M : P −→ Mf (N∗ ), where P is the full set of
k
places of the ambient net, that is, P = Pi with Ai = (Pi , Ti , Wi ).
i=1

All the markings of the dişerent copies of each replicated ambient are put together. This is not a problem since the ordinary tokens for the execution of a copy
ni , ci will be those tokens in the places of Pi labelled by sequences extending
the sequence ci .
Markings of replicated ambient Petri nets consist of two components: the
function Copies , which deşnes the set of ambient tokens in the net, and M ,
which deşnes the ordinary marking for each ambient token.
Deşnition 11 ෈Initial marking෉. The initial marking of a located replicated
ambient Petri net A, Copies init , Minit (A), is that with Copies init (ni ) = ?
∀ni ∈ N (A) and where only the entry places of A1 are marked, that is, ∀p ∈ E(A1 )
Minit (p) = { } and ∀p ∈ P \E(A1 ) Minit (p) = ?.
Deşnition 12 ෈Activation rule෉. Whenever we have a marking Copies , M
of a dynamic replicated ambient net such as for some pj ∈ P and c ∈ N∗ verişes
that M (pj )(c) > 0, and there exists some ni such that loc( ni , 0 ) = ( nj , 0 , pj ),
we can şre an internal activation transition which consumes an ordinary token
in pj labelled by c, producing a new copy of ni ෈then we have Copies (ni ) =
Copies (ni ) ∪ {c}෉, whose entry places will be also marked by tokens labelled with
the same sequence c.
Dynamic ambient tokens will move along the system by means of the şring of
those transitions labelled by ambient operations. As an example of the dişerent şring rules for these high-level transitions associated to those transitions
expressing capabilities, next we give the rule for the entry operation.
Deşnition 13 ෈Entry operation෉. Let cj ∈ Copies(nj ) be such that under
the ordinary marking for nj , cj we can şre a transition tj ∈ Tj labelled by
(in ni , pi ). If loc( nj , cj ) = ( nk , ck , pk ) and there exists some ci ∈ Copies (ni )
with loc( ni , ci ) = ( nk , ck , pk ) then we can şre the high-level transition associated to tj , getting as reached state of A that deşned by the following changes
in M :
ර The local marking of Aj ෈more exactly, that of its cj -copy෉ changes as the
ordinary şring rule for tj says.
ර The location of the replica nj , cj changes, getting loc( nj , cj ) = ( ni , ci , pi).
Note that the dişerent replicas of an ambient ni could move in dişerent directions, and therefore they could stay at dişerent locations of the same system.
Nevertheless, the original copies ෈denoted by n, 0 ෉ , which are static by deşnition, will remain at their original location without ever moving.

782

D. de Frutos Escrig and O. Marroquín Alonso

3 Replication and the Restriction Operation

The restriction operator νn is introduced in the Ambient Calculus as a mechanism for deşning internal names which cannot be used in the outer environment,
neither by chance nor if we have known those names in an inappropriate way.
The only way to get internal names is by a willingly communication of the internal process, which would produce the extrusion of the restriction operator. In
this way a simple but powerful security mechanism is formalized.
For instance, in the term m[in n]|(νn)n[a] we use the same ambient name
n inside m, but from there we cannot reach the so named ambient. In fact,
restricted names can be renamed without any change in the semantics of the
system, since the Ambient Calculus identişes processes up to renaming of bound
names. Therefore, process m[in n]|(νn)n[a] is identical to m[in n]|(νp)p[a].
Restriction can be treated by means of simple renamings if we consider systems without recursion and replication. But things are rather more complicated
if, as in this paper, the replication operator is allowed.
For instance, if we consider the process !(νn)(n[a]|m[in n]) we have dişerent
internal ambient names in each of the copies of the system, due to the fact that
replication creates new names ෈!(νn)P ≡ (νn)!P ෉. As a consequence, each single
copy should use each concrete name, although the behaviour of all the replicas
is the same, once we take into account the corresponding renaming. Then it is
possible to preserve the static deşnition of systems, including a şxed collection
of ambient names and net components. In order to support the dynamic creation
of new names, we use the fact that they can be seen as ෈dişerent෉ copies of the
original ones.
We have found that the structured labels of the tokens provide a nice way
to support the sets of restricted names. So we only have to change the set N∗
into (P(N ) × N)∗ × P(N ), where the indexes associated to applications of the
replication operator are intercalated with the sets of ambient names which are
composed of the names that are restricted before and after the application of
each replication operator.
For instance, for the process (νn)!P we would get labels such as {n}1?,
while !(νn)P would produce instead ?1{n}. Then, if a copy of the ambient n
is activated with these tokens, we would obtain a renamed copy whose name is
nc where c is the preşx of the place of the sequence where n is restricted. So
in the examples above we would get n and n1 . The new name would be taken
into account to avoid unsuitable accesses to the restricted name. More on the
subject in the next forthcoming paper, completely devoted to the study of the
restriction operator.
4 Conclusions and Future Work

In this paper we have extended the basic model of ambient Petri nets in order to
support the replication operator from the Ambient Calculus. We have seen that
even if replication produced the dynamic creation of nets, which would represent

Replicated Ambient Petri Nets

783

the copies of the replicated ambients, we can still base our deşnitions on a static
system describing the set of basic components of its architecture. Net tokens in
the markings of these systems represent the dynamic activation of ambients.
We have seen that although we had to aşord some technical dişculties a nice
solution was still possible. Besides, this solution only has to be slightly modişed to cope with the interrelation between the replication and the restriction
operators.
In our opinion it is very important to give the designers who are familiar
with Petri nets a ෈relatively෉ simple extension by means of which they will be
able to develop mobile systems, whose correctness could be formally proved.
We are currently working on the remaining features of the Ambient Calculus
and PBC in order to get the full framework in which we are interested.
Acknowledgements.

Research supported by CICYT project Desarrollo Formal de Sistemas Basados en
Agentes M#viles ෈TIC 2000-0701-C02-01෉

References
1. E. Best, R. Devillers and J. Hall. The Petri Box Calculus: A New Causal Algebra with Multi-label Communication. Advances in Petri Nets 1992, LNCS vol.609,
pp.21-69. Springer-Verlag, 1992.
2. E. Best, R. Devillers and M. Koutny. Petri Net Algebra. EATCS Monographs on
Theoretical Computer Science Series. Springer-Verlag, 2001.
3. L. Cardelli. Abstractions for Mobile Computation. Secure Internet Programming:
Security Issues for Mobile and Distributed Objects, LNCS vol.1603, pp.51-94.
Springer-Verlag, 1999.
4. L. Cardelli. Mobility and Security. Proceedings of the NATO Advanced Study
Institute on Foundations of Secure Computation, pp.3-37. IOS Press, 2000.
5. D. Frutos Escrig and O. Marroqu#n Alonso. Ambient Petri Nets. Submitted for
publication.
6. M. Koutny and E. Best. Operational and Denotational Semantics for the Box Algebra. Theoretical Computer Science 211, pp.1-83, 1999.
7. H. Maci#, V. Valero and D. Frutos Escrig. sPBC: A Markovian Extension of Finite
Petri Box Calculus. Petri Nets and Performance Models PNPM'01, pp.207-216.
IEEE Computer Society, 2001.
8. O. Marroqu#n Alonso and D. Frutos Escrig. Extending the Petri Box Calculus with
Time. Applications and Theory of Petri Nets 2001, LNCS vol.2075, pp.303-322.
Springer-Verlag, 2001.
9. R. Valk. Petri Nets as Token Objects: An Introduction to Elementary Object Nets.
Applications and Theory of Petri Nets 1998, LNCS vol.1420, pp.1-25. SpringerVerlag, 1998.
10. R. Valk. Relating Dişerent Semantics for Objects Petri Nets, Formal Proofs and
Examples. Technical Report FBI-HH-B-226, pp.1-50. University of Hamburg, Department for Computer Science, 2000.
11. R. Valk. Concurrency in Communicating Object Petri Nets. Concurrent ObjectOriented Programming and Petri Nets, Advances in Petri Nets, LNCS vol.2001,
pp.164-195. Springer-Verlag, 2001.

