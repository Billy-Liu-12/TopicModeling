Procedia Computer Science
Volume 29, 2014, Pages 1423–1432
ICCS 2014. 14th International Conference on Computational Science

Exploring Rounding Errors in Matlab
using Extended Precision
D. Tsarapkina and D. J. Jeﬀrey
The University of Western Ontario, London, Ontario, Canada
djeffrey@uwo.ca

Abstract
We describe a simple package of Matlab programs which implements an extended-precision class
in Matlab. We give some examples of how this class can be used to demonstrate the eﬀects
of rounding errors and truncation errors in scientiﬁc computing. The package is based on a
representation called Double-Double, which represents each ﬂoating-point real as an unevaluated sum of IEEE double-precision ﬂoating point numbers. This allows Matlab computations
that are accurate to 30 decimal digits. The data structure, basic arithmetic and elementary
functions are implemented as a Matlab class, entirely using the Matlab programming language.
Keywords: Matlab, Extended Precision, Double-double

1

Introduction

The Matlab package, which we are presenting here, can be used to teach two topics in scientiﬁc
computation of particular interest to us, although its applicability is not limited to these two.
One topic that students ﬁnd diﬃcult to appreciate is the diﬀerence between truncation error
and rounding error, and the interactions between those two sources of errors. One example
that can be used to explore this diﬀerence is the estimation of a derivative. First one chooses
a formula that approximates a derivative, for example, the simplest is
df
f (x + h) − f (x)
≈
.
dx
h
Choosing a particular function f (x), and a particular point x, we can compute the approximation for decreasing step sizes h. As h is decreased, the students see the error decrease until
rounding errors take over and increase the error, as h decreases past a critical value. The lesson
can be reinforced by repeating the experiment with extended precision, using the package here,
for example. With extended precision, the critical value at which rounding errors take over is
decreased. The second diﬃculty is the desire of students to select tolerances that are unreasonable. A speciﬁc example is the Matlab ODE suite. By default, the relative tolerance is set to
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.129

1423

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

10−3 (RelTol in odeset). Students typically assume that tighter is better and one often sees
extreme tolerances requested. Again, one can use extended precision to help students discover
the limits of what is possible. For example, solve x47 = 106 by Newton’s method, and see how
accurate it can be. Again, repeating the calculation at a higher precision can help to get the
message across.
William Kahan has written of “The baleful eﬀect of computer benchmarks upon applied
mathematics, physics and chemistry” [12]. His article discusses the neglect of the accuracy in
computation owing to the obsession with speed which standard benchmarks exhibit. Kahan’s
article is mostly directed at hardware implementations of ﬂoating point arithmetic, but this
does not exempt programmers and users of scientiﬁc computing from being aware of accuracy
considerations in their programs. The dangers of rounding errors have been entertainingly
presented in [8]. A recent treatment of numerical methods that treats the problems of accuracy
from the backward-error point of view is the textbook [6].
An obvious way to illustrate and explore the eﬀects of ﬁnite precision on calculations is
to use extended precision as a way of comparing double-precision results with the “correct”
answers. Unfortunately, extended precision is often not conveniently available on the software
platforms chosen to teach numerical methods. Our speciﬁc concern here is with Matlab. We
give a transparent, easily installed and easily used Matlab class which extends the precision of
computations from the 15 or 16 decimal digits of IEEE 754 to about 30 digits. Although not
fast (those speed benchmarks again), it is a useful way to obtain extra precision, especially in
an educational setting.
Work on developing high-precision scientiﬁc calculations started surprisingly early in modern
computing history. An early multiple-precision package was presented by Brent [4], written in
Fortran 66. His package includes subroutines for evaluating elementary and special functions in
multiple precision ﬂoating-point arithmetic, but it did not support complex arithmetic. A more
recent package is the ARPREC software package [3, 2]. The ARPREC software includes C++ and
Fortran 90 modules, and can be downloaded from [1]. Another well-known package is the GNU
GMP package [9], although this package does not have extensive support for special functions.
Fundamental algorithms have been developed for double-double (DD) and quad-double (QD)
arithmetic [7, 13, 15]. An interesting connection between multiple-precision arithmetic and
mathematical theory can be seen in the work of Priest [14], who took up Smale’s well-known
challenge to develop more rigorous foundations for numerical computation.
None of the packages described above is readily useable by an average Matlab user. The
Matlab toolbox Advanpix is available from [17], but it is a commercial package, and the user
cannot easily view the algorithms involved in the computation. Thus, someone trying to understand the functionality of the toolbox is unable to follow the steps of the computation using
Matlab’s convenient debugging function.
The public-domain Matlab class ddreal described here allows a user to access extended
precision with almost no additional syntax. In addition, being written entirely in the Matlab
language, it can be invoked simply by loading a single .m ﬁle. Further, it allows any user to
investigate the algorithms being used. The use of the Double-Double approach keeps the code
relatively simple, but does limit the working precision to about 30 decimal digits. This is in
contrast to many of the packages named above, which all oﬀer higher precision. It should also
be noted that the extra precision is not obtained by implementing the IEEE standard for quad
precision (IEEE 754-2008). This would require machine-level programming, whereas the aim
here is to use nothing but existing Matlab functions.
As an example of the problems that can be discussed using the ddreal class, we take the
evaluation of special functions in regions in which they are badly conditioned. We assume the
1424

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

reader is familiar with IEEE ﬂoating-point standards. See for example [10]. We shall, when
convenient, represent IEEE doubles as hexadecimal strings, and recall that the conversion
between decimal ﬂoats and IEEE format expressed in hexadecimal can be eﬀected in Matlab
using the commands num2hex and hex2num. To discuss badly conditioned function evaluation,
we need to establish the model of ﬂoating-point evaluation being used. Given a function f (x)
and a ﬂoating-point argument x, we treat the argument x as exact, padded with zeros as
necessary. We then evaluate the function for this presumed exact value. We note that x is
expressed as an IEEE number, no matter how the user chooses to input it.
Consider the calculation of the Lambert W function [5] near its singular point z = −1/e,
speciﬁcally, x = −0.36787944117 > −1/e. Computing in conventional double precision, we
obtain
W (−0.36787944117) ≈ −0.9999971998131320 . . . .
The correct value is W (−0.36787944117) = −.9999971997752716 . . . , and thus there was an
error at the 7th signiﬁcant ﬁgure. In the neighbourhood of z = − exp(−1), W (x) is given by
the series
p(x)

=

W (x)

≈

2(1 + xe) ,
11
1
−1 + p − p2 + p3 . . . .
3
72

(1)
(2)

In double precision, we have e ≈ ed = 2.718281828459046, giving p = 2.800189481752553×10−6 ,
whereas using the extended value
e ≈ edd = 2.7182818284590452353602874713527 ,
we obtain p = 2.800227342165747 × 10−6 . We see that the two values for p diﬀer in the ﬁfth
signiﬁcant ﬁgure, even though the two values for e diﬀer only in the 16th digit. Therefore the
source of the error is the representation of exp(1), not the series approximation to W .
A familiar example is seen when a user types into Matlab sin(pi). The value returned
is not 0, but the value of sine at the double-precision approximation to π. Similarly, the
value of W (−1/ed ) should be −.999999958186432, rather than −1, for the same reason. All
such computations require extended precision to obtain full accuracy. Notice that the aim
of the calculation is a double-precision result, and Double-Double is needed only as part of
intermediate calculations. Although some examples will require greatly extended precision,
many examples, including W , can be successfully computed using Double-Double precision.

2

Implementation of Double-Double Real

We abbreviate Double-Double to DD. A DD number x in our Matlab implementation is stored
as two Matlab reals, i.e., IEEE double-precision numbers, denoted xu and xl , or as Matlab
names x.Hi and x.Lo. The two numbers are normalized so that |xl /xu | ≤ 2−52 , and they are
understood to represent the number x = xu + xl , although of course the sum must remain
unevaluated. One consequence is that the exponent range of DD numbers remains equal to the
range of IEEE doubles. i.e. 10±308 .
The Matlab class ddreal has been deﬁned, and the common arithmetic operations and
elementary functions have been overloaded to take this into account. This class is contagious,
meaning that if x is a standard Matlab real and a is a ddreal, then a + x is a ddreal. We
can show immediately how this can change the “machine epsilon”. After loading the ddreal
package, we can see the following Matlab session:
1425

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

% We first perform an addition using standard double precision
d = 1;
x = d+1e-18;
x-1
0
> dd = ddreal(1);
% We change to ddreal
> xdd = dd+1e-18;
> x-1
0.1000000000000000001000000000DD-19
>
>

Notice in this session that the last command mixed the ddreal number b and an ordinary double.
With ddreal, the 1e-18 component is preserved.
The package implements all of its algorithms entirely within a Matlab class environment,
making it easy for users to implement their own functions as well as to understand how the
package performs all computations.

2.1

Input and Output

A number of input options are available in the ddreal class, but some are discouraged to ensure
the user performs the computations they wish to achieve, without unintentionally introducing
error. We illustrate this statement below.
It is possible for a user to create a ddreal object and then to set its upper and lower
components directly, but this is discouraged, because Matlab converts decimal input into binary
and this means that the users input is not padded with zeros after the 16th digit as the user
supposes. The unseen non-zero digits will then make their way into the computation. We see
in the example below how a user may think they are creating 0.1 padded with 31 zeros, but are
actually creating a number accurate only to 16 digits.
>> y=ddreal();
>> y.Hi = 0.1;
>> y.Lo = 0
y =
0.10000000000000000555111512312578 DD -00

The non-zero digits may look like an implementation error, but are actually the correct result
of decimal to binary conversion. The deﬁnition modes oﬀered by the package ensure that the
DD created matches the user’s intended number.
The suggested input for a general DD number is to enter a mantissa and an exponent as
strings. This allows the program to read in the intended number and parse each character
into the ddreal object, without concerns for intermediate rounding. Going back to our initial
example of trying to create 0.1, we now use this approach.
>> x=ddreal(’0.1’,’+0’)
x =
0.10000000000000000000000000000000 DD -00

The mantissa is a string which must begin with ‘0.’, 1-0.’, or ‘+0.’ and the exponent is the
power of 10 by which the mantissa is multiplied. The exponent must begin with a sign (either
+1 or −1).
If the upper and lower components of a number are already known as IEEE hexadecimal
numbers (strings), then the user can set the number directly. For example, the value of π can
be entered as follows.

1426

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

>> x=ddreal([’400921FB54442D18’, ’3CA1A62633145C07’])
x =
0.31415926535897932384626433832795 DD +01

where the ﬁrst string is the hexadecimal code for the upper component and the second string
the code for the lower component. We can use this example to see again the need for the user to
understand the binary format, if this method is to be used. The upper and lower components
are
πu

=

400921F B54442D18 = 3.14159265358979311599796346854419

πl

=

3CA1A62633145C07 = 1.2246467991473532072 × 10−16 .

The value of π correct to 33 digits is obtained by adding these two numbers together, which of
course can only be done within the package.
Integers can be input simply as ddreal(i), where i is any integer up to ±9999999999999998.
Any larger value will experience rounding prior to being entered in the DD number.
>> ddreal(-9999999999999998)
ans =
-0.0999999999999999800000000000000 DD +017
>> ddreal(-9999999999999999)
ans =
-0.1000000000000000000000000000000 DD +017
>> ddreal(-12345678901234567890)
ans =
-0.1234567890123456716799999999999 DD +020

For larger integers, the standard entry using strings remains possible.

2.2

Arithmetic

Standard arithmetic is implemented as overloaded operators, for example addition of two DD
numbers is performed by the following code:
function ddsum = plus(x,y)
% PLUS Implement x + y for ddreal
% local variables e, t1, t2
% We show only addition of DDs
if isa(x,’ddreal’) && isa(y,’ddreal’)
xu=x.Hi;
xl=x.Lo;
yu=y.Hi;
yl=y.Lo;
t1 = xu + yu;
e = t1 - xu;
t2 = ((yu-e) + (xu - (t1-e))) + xl+yl;
e = t1 + t2;
ddsum = ddreal(e,t2-(e-t1));
else
<other cases omitted>

1427

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

Table 1: Basic DD arithmetic and algebraic operations
Operation
z=x+y
z=x-y
z=x*y
z=x/y
z = sin(x)
z = cos(x)
z = asin(x)
z = acos(x)
z = exp(x)
z = ln(x)
z = sqrt x
z = x∧ y

Data Type
y, z DD real
y, z DD real
y, z DD real
y, z DD real
x, z DD real
x, z DD real
x, z DD real
x, z DD real
x, z DD real
x, z DD real
x, z DD real
x, y, z DD real
x,
x,
x,
x,

Using this approach, we have implemented the operations listed in table 1.
• Overloaded the basic arithmetic operations: addition (+), subtraction (-), multiplication
(*), division (/) and power(∧ ).
• Overloaded the elementary mathematical functions, such as roots, sin, cos, exp, log.
• Overloaded relational operations: equal (==), not equal (~=), less than (<), greater than
(>), less than or equal (<=), greater than or equal (>=).
A sample Matlab program in DD real is as follows. Here an equation is solved by ﬁxed-point
iteration.
x=ddreal(1);
a=ddreal(1);
b=ddreal(-6);
c=ddreal(-72);
d=ddreal(-34.375);
for i = 1:33
x = -(a*x^3 + b*x*x + d)/c;
end
x

The output is: -0.500000000000000000000000000000000.

3

Basic Algorithms

It is a good exercise for students to understand some of the details of the algorithms. For
example, all calculations assume that the two parts of the DD number diﬀer by at least 2−52 .
Without this, the target precision cannot be met. To ensure this, each function calculation
ends with a normalization step.
Suppose we have a pair of doubles that is not a proper ddreal. Let the pair be U and L,
with U > L, in fact usually U
L. We can represent them graphically as
1428

Extended Precision in Matlab
U:
L:

Tsarapkina and Jeﬀrey

|---------------|
|---------------|

When we execute U + L, the register can hold all of U together with the top part of L. Denote
this top part by Lu and divide L into Lu and Ll . In pictures
U:
L:
U+L:

|-----U----------|
|Lu|-----Ll---------|
|----U+Lu--------|-----Ll---------|

So t = U + L actually stores U + Lu . Now we calculate t − U and uncover Lu . Therefore when
we compute L − Lu we isolate Ll . Therefore our normalized ddreal is given by
t=U+L;
e=L-(t-U);
normalized = [t,e]

Of course, we need the intermediate quantities to be computed in the required order, and
Matlab seems to obey parentheses. Otherwise, one would have to store t − U separately.
Another interesting aspect of the algorithms is their ability to leverage the built-in Matlab
functions. For example, the DD square root function is computed as follows. We use Matlab’s
function as the starting point:
function x=sqrt(a) % Overload the sqrt function, when the argument is ddreal.
x=ddreal();
x.Hi=sqrt(a.Hi);
x=x+a/x;
x.Hi=pow2(x.Hi,-1);
x.Lo=pow2(x.Lo,-1);
end

For the theory of this computation, see [11].

4

Additional Functions

It is easy to implement additional functions using DD arithmetic. By converting the variables
in a computation to type ddreal, the user is able to easily create their own ddreal functions and
adjust existing ones to suit their needs. With little change to a previously written program, a
user can convert their own code and obtain substantially more accurate results in areas where
ill-conditioned problems exist.
We demonstrate with an implementation of Newton’s method that uses the ddreal package:
function [x,i]=ddnewton(f,df,x0,tol, maxitr)
% tol is converted to ddreal
tol=ddreal(tol);
% xnew and xold are created as dd using x0
xnew=ddreal(x0);
xold=xnew+tol;
i=0;
while (abs(xold-xnew)>=tol && i<maxitr)

1429

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

xold=xnew;
fun=f(xold);
der=df(xold);
xnew=xold-fun/der;
i=i+1;
end
if i==maxitr
fprintf(’Maximum iterations reached!’);
end
x=xnew;
end

Note that the majority of the function is identical to that which a regular Matlab user
might write. The only change a user should make is ensuring that the numbers being passed
to the function are converted to DD numbers (to ensure there are no unpleasant surprises from
conversion between decimal and binary as discussed above). Further, all new variables within
the class that require accuracy are also DD. Note that in the case of Newton’s method, where
two function handles are expected as input, the user should ensure that the functions to be
used in this method also support DD computation.

5

Roots of a Polynomial Example

Many textbooks emphasize that solving polynomial equations directly is not good numerical
practice. We are aware of this, and consider the problem here as a simple demonstration
of the eﬀect of precision, and do not advocate this approach as a replacement for the usual
methods. Wilkinson’s polynomial is a good demonstration of extended precision, because its
ill-conditioned nature is well known [16]. As precision is added, computations which failed using
double precision now work with extended precision. As the degree of the polynomial increases,
calculations with DD precision fail, and further improvement requires a diﬀerent package that
can deliver yet more precision.
Wilkinson’s polynomial is traditionally deﬁned as:
w(x) =

(x − i)

(3)

for i = 1 : 20. We reduce the number of terms to 10 here to demonstrate more simply the
improvement we obtain by using extended precision over standard doubles. Thus, our modiﬁed
Wilkinson’s polynomial expanded can be represented by
w(x) = x10 − 55 x9 + 1320 x8 − 18150 x7 + 157773 x6 − 902055 x5 + 3416930 x4
−8409500 x3 + 12753576 x2 − 10628640 x + 3628800

(4)

We ﬁrst try Newton’s method, implemented in Matlab with regular precision, following the
program given above in a dd-version. We try for the root near 9.
>> [d,itrd]=newton( @wilk , @dwilk ,9.5, 10^-15 , 10000)
Maximum iterations reached!
d =
8.999999999903594e+00
itrd =
10000

1430

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

Using standard double precision, students can ﬁnd the root to 10−11 but are unable to
converge closer, even lavishing 10000 iterations on their attempt. We now conduct the same
experiment with Wilkinson’s polynomial, its derivative, and Newton’s method deﬁned in DD
precision. In addition, we increase the tolerance since we are able to provide the additional
digits of accuracy.
>> [dd,itrdd]=ddnewton( @wilkdd, @dwilkdd, ddreal(’0.95’,’+1’), 10^-30,100000)
dd =
0.90000000000000000000000000000000 DD +01
itrdd =
8

We now observe convergence to 31 digits, in just 8 iterations. Using identical algorithms
and functions, other than the data types assigned to the numbers, is signiﬁcant since we are
witnessing only the beneﬁt that ddreal gives us. Thus in poorly conditioned problems, adding
another 16 digits allows for a signiﬁcance improvement in computational capabilities within the
Matlab environment.
To underline the lesson, students can now be let loose on Wilkinson’s original 20th degree
polynomial.

6

Timings

As with other software implementations of ﬂoating-point arithmetic, the speed is much less
than hardware implementations. An additional eﬀect that applies to the DD package is that it
is implemented in an interpreted language: the Matlab programming language. The advantages
of using the Matlab language are ease of use by the user, since only a single Matlab .m ﬁle needs
to be loaded, and transparency, since any Matlab user can freely inspect and modify the code.
The disadvantage is the speed penalty.
We tested the timing diﬀerences by performing 1000 iterations of a number of operations, and
the results are displayed in Table 2. The package is intended for small-scale calculations needing
extra precision within a larger computation at standard precision. The opening example shows
this. For most values of the argument to Lambert W, standard double precision is satisfactory,
and only in the neighbourhood of the singular point is there a need to invoke the DD package.
Looking at the results in table 2 we see that in performing arithmetic, our package performs fairly well compared with Advanpix, with basic arithmetic operations taking about twice
longer. This is very satisfactory, when comparing a package written in Matlab with a package developed to perform all its operations on the CPU, which saves a signiﬁcant amount of
memory transfer time. The elementary functions, such as exponential, are signiﬁcantly slower
than Advanpix, and although algorithmic and implementation improvements could speed up
the DD computations, it is unreasonable to expect interpreted Matlab code to perform much
better than the present level. We see that both extended precision packages(using 32 digits)
are several orders of magnitude slower than simply using double precision, but we recall that
accuracy is more important than speed.

References
[1] D. H. Bailey. http://crd.lbl.gov/~dhbailey/mpdist/. Online post.
[2] D. H. Bailey. High-precision ﬂoating-point arithmetic in scientiﬁc computation. Computing in
Science and Engineering, 7:54–61, 2005.

1431

Extended Precision in Matlab

Tsarapkina and Jeﬀrey

Table 2: Timing of ddreal operations compared with the same operations performed in double
arithmetic, and Advanpix using 32 digits
Operation
+
−
∗
÷
exp(x)
log(x)
sin(x)
cos(x)
tan(x)

Double-Double Time (s)
0.1636
0.1647
0.1686
0.3190
9.4662
30.4442
6.6273
7.4121
14.5002

Double Time (s)
3.0689e − 05
3.6406e − 05
3.0689e − 05
5.1149e − 05
6.6794e − 05
4.4830e − 05
7.1609e − 05
4.6335e − 05
6.7397e − 05

Advanpix Time (s)
0.0749
0.0756
0.0782
0.0742
0.0845
0.0803
0.1199
0.0786
0.0786

[3] J. M. Borwein and D. H. Bailey. Mathematics by Experiment: Plausible Reasoning in the 21st
Century. A K Peters Ltd, Natick, Massachusetts, 2004.
[4] Richard P. Brent. A fortran multiple precision arithmetic package. ACM Transactions on Mathematical Software, 4:57–70, 1978.
[5] R. M. Corless, G. H. Gonnet, D. E. G. Hare, D. J. Jeﬀrey, and D. E. Knuth. On the Lambert W
function. Adv. Computational Maths, 5:329–359, 1996.
[6] Robert M. Corless and Nicolas Fillion. A Graduate Introduction to Numerical Methods. Springer,
2013.
[7] T. J. Dekker. A ﬂoating-point technique for extending the available precision. Numerische Mathematik, 18:224–242, 1971.
[8] Christopher Essex, Matt Davison, and Christian Schulzky. Numerical monsters. SIGSAM Bull.,
34(4):16–32, December 2000.
[9] GMP. http://gmplib.org/. Online.
[10] D. Goldberg. What every computer scientist should know about ﬂoating-point arithmetic. ACM
Computing Surveys, 23:6–48, 1991.
[11] D. J. Jeﬀrey. High precision computation of elementary functions in Maple. In Proceedings of
Computer Algebra in Scientiﬁc Computation, pages 183–190, 2002.
[12] W. M. Kahan. The baleful eﬀect of computer benchmarks upon applied mathematics, physics and
chemistry. http://www.eecs.berkeley.edu/~wkahan/ieee754status/baleful.pdf, 1996.
[13] D. E. Knuth. The Art of Computer Programming, volume 2. Addison-Wesley, Reading MA, 3rd
edition, 1998.
[14] D. M. Priest. On Properties of Floating Point Arithmetics: Numerical Stability and the Cost of
Accurate Computations. Phd thesis, University of California, Berkeley, CA, USA, 1992.
[15] J. R. Shewchuk. Adaptive precision ﬂoating-point arithmetic and fast robust geometric predicates.
Discrete & Computational Geometry, 18:305–363, 1997.
[16] J. H. Wilkinson. The perﬁdious polynomial. In G. H. Golub, editor, Studies in Numerical Analysis,
volume 24 of Studies in Mathematics, pages 1–28. Washington, D.C.: Mathematical Association
of America., 1984.
[17] www.advanpix.com. Advanpix multiprecision computing toolbox. Online.

—————————————————–

1432

