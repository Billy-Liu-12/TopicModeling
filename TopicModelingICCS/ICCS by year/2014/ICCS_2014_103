Procedia Computer Science
Volume 29, 2014, Pages 1090–1099
ICCS 2014. 14th International Conference on Computational Science

A Linear Complexity Direct Solver for H-adaptive Grids
With Point Singularities
Piotr Gurgul
Department of Computer Science, AGH University of Science and Technology, Krakow, Poland
pgurgul@agh.edu.pl

Abstract
In this paper we present a theoretical proof of linear computational cost and complexity for
a recently developed direct solver driven by hypergraph grammar productions. The solver
is specialized for computational meshes with point singularities in two and three dimensions.
Linear complexity is achieved due to utilizing the special structure of such grids. We describe
the algorithm and estimate the exact computational cost on an example of a two-dimensional
mesh containing a single point singularity. We extend this reasoning to the three dimensional
meshes.
Keywords:

1

Introduction

Direct solvers are the core part of many engineering analyses performed using the Finite Element
Method [4, 5]. Since they are one of the most computationally expensive part of the process, our
main objective is to deliver a solver that is by an order of magnitude faster than the existing ones
in terms of both sequential and parallel execution. The ﬁnite element solution process starts
with the generation of a mesh approximating the geometry of the computational problem. Next,
the physical phenomena governing the problem are described using Partial Diﬀerential Equation
(PDEs). In addition to this diﬀerential system, boundary and initial conditions may need to
be speciﬁed to guarantee uniqueness of the solution. The resulting PDE system is discretized
into a system of linear equations by using the Finite Element Method. This algebraic system is
inverted using a solver algorithm. The computational complexity of the state-of-the-art multifrontal solver [6, 7] algorithm is O(N p4 + N 1.5 ) for two dimensional problems in regular and
uniform grid. N refers to the number of degrees of freedom and p is a global polynomial order
of approximation, which we assume to be constant, yet arbitrary.
In this paper we present a direct solver algorithm delivering O(N p3 ) computational complexity for meshes with point singularities in two and three dimensions. The computational
cost and memory usage for the direct solver estimated in this paper uses the ideas expressed by
the graph grammar based solver [19] prescribing the order of elimination for grids with point
1090

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.098

Linear solver

P. Gurgul

singularities. The graph grammar formalism is utilized for modeling of mesh adaptation by
means of CP-graphs [11, 12, 13, 18] or hypergraphs [17]. It can be also used for expressing the
solver algorithm [16, 15] Finally, the results presented in this paper can be also extended for the
idea of reutilization [14], which further generalizes a concept of a linear solver for a sequence of
grids.

2

2D multi-frontal sequential solver algorithm

Problems with singularities usually require direct solvers, since they are not suitable for iterative
solvers due to their numerical unstability [10]. There exist iterative solvers that converge for a
certain class of variational formulations, but there are no iterative solvers per se that converge
for every FEM problem (as opposed to direct solvers). Moreover, even the multi-grid iterative
solvers [3], more suitable for processing adaptive grids, usually still utilize a direct solver over
a coarser grid. This makes the use of direct solvers absolutely necessary for designing a general
purpose FEM solver. Since the matrices resulting from FEM discretization are sparse, we focus
on algorithms designed for sparse matrices such as a multi-frontal solver. The multi-frontal
solver introduced by Duﬀ and Reid [6, 7] is the state-of-the-art direct solver algorithm for solving
systems of linear equations, which is a generalization of the frontal solver [9] algorithm. In the
multi-frontal approach, the solver generates multiple frontal matrices for all elements of the
mesh. It eliminates fully assembled nodes within each frontal matrix, and merges the resulting
Schur complement matrices at the parent level of the tree. The frontal matrix assembles element
frontal matrices to a single frontal matrix and eliminates what is possible from the single matrix,
whereas the multi-frontal solver utilizes multiple frontal matrices and thus allows to reduce the
size of the matrices at parent nodes of the tree.

3

Linear complexity solver for 2D problems with point
singularities

In this section we describe brieﬂy the idea behind solvers for problems with point singularities
and what are their advantages over multi-frontal solvers like MUMPS [1, 2]. The proposed
linear complexity algorithm assumes an h-reﬁned computational mesh structure and browses the
elements of the mesh level by level, from the lowest (most reﬁned) level up to the top level. The
algorithm utilizes a single frontal matrix, which size is proportional to the number of browsed
degrees of freedom. There are p2 degrees of freedom associated with element interiors, p degrees
of freedom associated with element edges and one degree of freedom for each element vertex.
Each row of the frontal matrix is associated with one degree of freedom. The solver algorithm
ﬁnds the fully assembled degrees of freedom and places them at the top of the frontal matrix.
Then, these rows are eliminated by subtracting them from all the remaining rows. Intuitively,
we can say that element interior degrees of freedom are fully assembled once the solver touches
the element, an element edge degrees of freedom are fully assembled once the solver algorithm
touches all elements adjacent to an edge, and ﬁnally element vertex degrees of freedom are fully
assembled once the solver algorithm touches all elements sharing the vertex. The remaining
degrees of freedom must wait until the solver algorithm browses the elements from the next
level. The size of the frontal matrix is limited by the number of elements on a particular level,
and this implies the linear computational cost of the solver algorithm. Moreover, the behavior
of the solver described above has been prescribed by the means of hypergraphs [19] introduced
1091

Linear solver

P. Gurgul

by Habel and Kreowski [8] and hypergraph grammars which were their extension proposed by
´
Slusarczyk
[17] for mesh transformations.

4

Estimation of the computational cost

In this section we estimate the total number of operations for the 2D sequential solver described
above. This will be used to obtain computational complexity. In order to compute the number
of operations, we deﬁne variable a as the number of degrees of freedom that can be eliminated
for matrix M and b as the total count of degrees of freedom for matrix M (see Figure 1). For





Figure 1: Visual explanation of a and b
a given node, the total number of operations needed for its elimination C(a, b) is equal to:
b

C(a, b) =

m2

(1)

m=b−a+1

This is because we have a matrix with size b and there are a rows to be eliminated. The
elimination of the ﬁrst row involves b2 subtractions, the elimination of the second row involves
(b − 1)2 subtractions, and so on, up to the last row to be eliminated, which involves (b − a + 1)2
subtractions. Rewriting the sum in Equation 1 as a diﬀerence of two sums, we obtain Equation
2.
b

m2 =

b

m=1

m=b−a+1

m2 −

b−a

m2

(2)

m=1

which can be explicitly written using the following sum of squares:
b

b(b + 1)(2b + 1)
6

(3)

(b − a)(b − a + 1)(2(b − a) + 1)
6

(4)

m2 =

m=1
b−a

m2 =

m=1

Finally, we perform the subtraction:
b

2

b−a

m −
m=1

1092

m=1

m2 =

a(6b2 − 6ab + 6b + 2a2 − 3a + 1)
6

(5)

Linear solver

P. Gurgul

Thus:

a(6b2 − 6ab + 6b + 2a2 − 3a + 1)
(6)
6
Using this formula, we can directly compute the costs for the sample 2D domain presented in
the previous sections.
In order to prove that the computational complexity is O(N ), where N denotes the total number
of unknowns, ﬁrst, in Lemma 4.1, we express the exact computational cost as a function of
polynomial approximation level p and reﬁnement level k.
C(a, b) =

Lemma 4.1. The number of operations incurred by solving the adaptive problem with a point
singularity for a two element mesh using a hypergraph grammar driven solver is equal to:
16p6 + 96p5 + 264p4 + 864p3 + 533p2 + 93p
6
12p6 + 72p5 + 198p4 + 1558p3 − 441p2 − 277p − 24
+k
6

T (p, k) =

where k stands for the number of h reﬁnement levels and p is the global polynomial order of
approximation. Parameter p is assumed to be uniform, yet arbitrary, over the entire mesh.
Proof. With Equation 6 it is possible to evaluate the cost of each step of the elimination process.
The proof can be split into two independent steps. First, we compute the constant part associated with the elimination of the initial, unreﬁned mesh (k = 0) and then the count of operations
incurred by the each increase of k by one. This is suﬃcient, since each layer produced as a
result of incrementing k is identical and contains six new elements.
Step 1. k = 0. We begin by computing the cost of eliminating the fully assembled nodes.
This process is called static condensation. To eliminate entries produced by these nodes we do
not need to know about any other degrees of freedom. Static condensation usually occurs just
after attaching an element to the given structure. As such entries are self-contained and can
be processed independently, we can count their contributions to the total number of operations
independently. For each element 1, 2, 5, 6 (see Figure 2a) the interior, two edges and a vertex
are fully assembled and can be eliminated immediately (or at any time). For each element 3, 4,
7, 8 (see Figure 2b) interior and only one edge are fully assembled. The number of operations

































(a) SC for elements 3, 4, 7, 8

(b) SC for elements 1, 2, 5, 6

Figure 2: Static condensation for k = 0 two element mesh
incurred by each of two cases above has been summarized in Table 1. Column T OT AL is the
1093

Linear solver

P. Gurgul

sum of contributions for each of the elements in the Table 1 (which means multiplying the
value in the ﬁrst row by four and adding it to the value in the second row, also multiplied by
four). The next step is to count the operations incurred by the interface elimination, still for
Table 1: Operations incurred by static condensation for k = 0
Elements

a for arbitrary p

b for arbitrary p

C(a, b)

3, 4, 7, 8
1, 2, 4, 6

1 + 2(p − 1) + (p − 1)2
p − 1 + (p − 1)2

4 + 4(p − 1) + (p − 1)2
4(p − 1) + (p − 1)2

2p6 +12p5 +33p4 +36p3 +13p2
6
2p6 +12p5 +33p4 +2p3 −32p2 −13p
6
16p6 +96p5 +264p4 +136p3 −19p2 −13p
6

TOTAL

the k = 0 two element grid. This time, we need to obey the proper order for the elimination,
starting from what is operationally called Interface 1-2. In general, during this step we follow
the previously described order of elimination, which is concisely summarized in Figure 3. The
results are presented in Table 2. Now we have ﬁnished the ﬁrst step of computations and
Table 2: Computational cost incurred by element elimination for k = 0
Interface

a for arbitrary p

b for arbitrary p

1-2

1+p−1

6 + 5(p − 1)

2-3

1+p−1

6 + 5(p − 1)

3-4

1+p−1

6 + 5(p − 1)

4-5

2 + 2(p − 1)

6 + 5(p − 1)

5-6

2 + 2(p − 1)

5 + 4(p − 1)

6-7

1 + (p − 1)

4 + 3(p − 1)

7-8

3 + 2(p − 1)

0

TOTAL

C(a, b)
3

122p + 81p2 + 13p
6
122p3 + 81p2 + 13p
6
122p3 + 81p2 + 13p
6
196p3 + 144p2 + 26p
6
112p3 + 108p2 + 26p
6
38p3 + 45p2 + 13p
6
16p3 + 12p2 + 2p
6
728p3 + 552p2 + 106p
6

received the constant part for k = 0, which can be expressed as T (p, 0) in Equation 7.
728p3 + 552p2 + 106p + 16p6 + 96p5 + 264p4 + 136p3 − 19p2 − 13p
6
16p6 + 96p5 + 264p4 + 864p3 + 533p2 + 93p
=
6

T (p, 0) =

(7)

Step 2. The second step of the proof is to compute the linear increase of the operation count
depending on k. Increasing k by one adds one more layer of elements as presented in Figure 4.
Again, for simplicity, we introduce temporary naming for the consecutive interfaces (Interface
1-2 to Interface 7-8) that will be processed (which corresponds to 3 + 6k to 8 + 6k).
Let k ≥ 1.
1094

Linear solver

P. Gurgul







(a) Interface 1-2

(b) Interface 2-3










(c) Interface 3-4

























(d) Interface 4-5



(e) Interface 5-6













(f) Interface 6-7

















(g) Interface 7-8

Figure 3: Interface elimination order, k = 0

1095

Linear solver

P. Gurgul

   





Figure 4: Ordering for arbitrary k

As in Step 1, we begin with the contribution of static condensation. In the case of elements
3 + 6k and 8 + 6k we can eliminate for each one edge and its interior independently. For the
remaining elements the elimination of their interiors is the only possibility at this point. The
results has been summarized in Table 3. In terms of eliminating interfaces, as in Step 1, we
Table 3: Computational cost incurred by static condensation for arbitrary k
Elements
3, 8
4, 5, 6, 7

a for arbitrary p

b for arbitrary p
2

(p − 1) + (p − 1)
(p − 1)2

C(a, b)
2

4 + 4(p − 1) + (p − 1)
4 + 4(p − 1) + (p − 1)2

2p6 +12p5 +33p4 −2p3 −32p2 −13p
6
2p6 +12p5 +33p4 −76p3 +p2 +22p+6
6
12p6 +72p5 +198p4 −308p3 −60p2 +62p+24
6

TOTAL

have to follow the order, but the direction (left to right or right to left) is not relevant to the
result, so we may assume that we are proceeding from right to left. For a summary of the
results, see Table 4. Having all the terms, it is now possible to assemble the ﬁnal formula:
Table 4: Computational cost incurred by interface elimination for arbitrary k
Interface
1-2
2-3
3-4
4-5
5-6
6-7
TOTAL

1096

a for arbitrary p

b for arbitrary p

C(a, b)

1 + (p − 1)
(p − 1)
2(p − 1)
1 + 2(p − 1)
(p − 1)
2 + 2(p − 1)

7 + 6(p − 1)
7 + 7(p − 1)
7 + 7(p − 1)
7 + 7(p − 1)
7 + 7(p − 1)
7 + 6(p − 1)

182p3 +99p2 +13p
6
254p3 −177p2 −71p−6
6
436p3 −228p2 −178p−30
6
436p3 −78p2 −58p−6
6
254p3 −177p2 −71p−6
6
304p3 +180p2 +26p
6
1866p3 −381p2 −339p−48
6

Linear solver

P. Gurgul

T (p, k) = T (k, 0) + k

12p6 + 72p5 + 198p4 + 1558p3 − 441p2 − 277p − 24
6

(8)

Thus:
16p6 + 96p5 + 264p4 + 864p3 + 533p2 + 93p
6
12p6 + 72p5 + 198p4 + 1558p3 − 441p2 − 277p − 24
+k
6

T (p, k) =

(9)

which completes the proof.
Lemma 4.2. The computational complexity of the hypergraph grammar driven solver for problems with point singularities is equal to O(N ), where N is the number of unknowns.
Proof. The proof relies on Lemma 4.1 and transforms T (p, k) into a function of N . In order to
achieve this goal, we ﬁrst need to determine the relationship between the number of elements
Ne and the number of redinement levels k. The initial mesh for k = 0 has eight elements. Each
new reﬁnement level adds a layer of six new elements. Thus:
Ne (k) = 8 + 6k

(10)

Since each element contains 4 degrees of freedom associated with its vertex, 4(p − 1) degrees of
freedom associated with its edges and (p − 1)2 degrees of freedom associated with its interior,
we multiply number of elements and number of degrees of freedom per element.
N (Ne , p) = (8 + 6k)((p − 1)2 + 4(p − 1) + 4) = O(p2 + kp2 )

(11)

Substituting this result in T (p, k) we receive:
T (p, N ) = O(N p4 )

(12)

Since p can be treated as a constant and in fact, due to numerical side-eﬀects is very rarely
greater than nine, we receive:
T (N ) = O(N )
(13)
which proves the linear complexity.

5

Estimation of the memory usage

Memory usage can be estimated following the same pattern as in the previous section. Order of
the memory usage of the solver can be well-approximated by computing the count of non-zero
entries in the matrix. Since we do not store zero values, the real space usage is the function
of non-zero entries (N Z). N Z at a given stage can be expressed as a function of previously
deﬁned a and b, like in Equation 14.
N Z(a, b) =

a(a + 1)
+ a(b − a)
2

(14)

Applying the same reasoning as in terms of computational complexity leads as to the following
equation:
1
1
(12p4 + 48p3 + 11p2 + 35p + 4) + k (105p2 − 29p − 8)
2
2
= O(p4 + kp2 ) = O(N )

M EM (k, p) = N Z(k, p) =

(15)

1097

Linear solver

6

P. Gurgul

Generalization to the three dimensional grids

As an estimation of the exact computational cost for the three dimensional solver would be
a very strenuous task, we restrict ourselves to a rough approximation of the computational
complexity.
Lemma 6.1. Computational complexity of the sequential solver with respect to the number of
degrees of freedom N and polynomial order of approximation p for a three dimensional grid with
point singularity is equal to T (p, N ) = O(N p6 ).
Proof. A three dimensional element has number of degrees of freedom over an element edge
of the order of O(p), the number of degrees of freedom over an element face of the order of
O(p2 ) and the number of degrees of freedom over an element interior of the order of O(p3 ). The
computational complexity of elimination of the interior-related degrees of freedom is of the order
of O((p + p2 + p3 )2 p3 ) = O(p9 ). The computational complexity of the static condensation is of
the order of O(Ne p9 ), where Ne denotes the number of elements. The remaining faces and edges
are eliminated level by level (layer by layer), and the computational complexity of elimination
of a single level is of the order of O((p2 + p)3 ) = O(p6 ). The number of elements Ne is of the
order of O(Ne ) = O( pN3 ), and the number of levels k is of the order of O(k) = O( pN3 ) thus the
total computational complexity is of the order of O(Ne p9 + kp6 ) = O(N p6 + N p3 ) = O(N p6 )
which completes the proof.

7

Conclusions and future work

This paper contains a proof of the linear computational cost of the proposed direct solver
algorithm executed on the h-reﬁned computational grids with point singularities. This results
show that the h-reﬁned grids can be solved in linear cost O(N p3 ) as opposed to the traditional
solver algorithms delivering O(N p4 + N 1.5 ) cost for regular grids. The theoretical estimates
has been proven by a series of experiments for p = 2, p = 3 and 1 − 8 point singularities.
An interesting attempt would be to estimate solver’s complexity in case of diﬀerent type of
singularities such as edge singularities. Acknowledgements The work presented in this paper
has been supported by Dean’s grant no. 15.11.230.106.

References
[1] P. R. Amestoy, I. S. Duﬀ, J. Koster, and J.Y. L’Excellent. A fully asynchronous multifrontal
solver using distributed dynamic scheduling. SIAM Journal of Matrix Analysis and Applications,
23(1):15–41, 2001.
[2] P.R Amestoy, I.S. Duﬀ, and J.Y L’Excellent. Multifrontal parallel distributed symmetric and
unsymmetric solvers. Computer Methods in Applied Mechanics and Engineering, 200(184):501–
520, 2000.
[3] K Bana´s. Scalability Analysis for a Multigrid Linear Equations Solver, volume 4967. Springer
Berlin Heidelberg, 2008.
[4] L. Demkowicz. Computing With Hp-adaptive Finite Elements. Vol. 1: One and Two Dimensional
Elliptic and Maxwell Problems. Chapman & Hall CRC, Texas, 2006.
[5] L. Demkowicz, J. Kurtz, D. Pardo, M. Paszy´
nski, W. Rachowicz, and A. Zdunek. Computing
With Hp-adaptive Finite Elements. Vol. 2: Frontiers: Three Dimensional Elliptic and Maxwell
Problems with Applications. Chapman & Hall CRC, Texas, 2006.

1098

Linear solver

P. Gurgul

[6] I. S. Duﬀ and J. K. Reid. The multifrontal solution of indeﬁnite sparse symmetric linear systems.
ACM Transactions on Mathematical Software, (9):302–325, 1983.
[7] I. S. Duﬀ and J. K. Reid. The multifrontal solution of unsymmetric sets of linear systems. International Journal of Numerical Methods in Engineering, (5):633–641, 1984.
[8] A. Habel and H. J. Kreowski. May We Introduce to You: Hyperedge Replacement. Lecture Notes
in Computer Science, 291:5–26, 1987.
[9] B Irons. A frontal solution program for ﬁnite-element analysis. International Journal of Numerical
Methods in Engineering, 1970(2):5–32, 1970.
[10] D. Pardo. Integration of hp-adaptavity with a two grid solver: applications to electromagnetics.
PhD thesis, The University of Texas at Austin, 2004.
[11] A. Paszynska, E. Grabska, and M. Paszynski. A Graph Grammar Model of the hp Adaptive Three
Dimensional Finite Element Method. Part I. Fundamenta Informaticae, 114(2):149–182, 2012.
[12] A. Paszynska, E. Grabska, and M. Paszynski. A Graph Grammar Model of the hp Adaptive Three
Dimensional Finite Element Method. Part II. Fundamenta Informaticae, 18(2):183–201, 2012.
[13] A. Paszynska, M. Paszynski, and E. Grabska. Graph Transformations for Modeling hp-Adaptive
Finite Element Method with Mixed Triangular and Rectangular Elements. Lecture Notes in Computer Science, 5545:875–884.
[14] M. Paszynski, D. Pardo, and V.M. Calo. A direct solver with reutilization of LU factorizations
for h-adaptive ﬁnite element grids with point singularities. Computers and Mathematics with
Applications, 65(8):1140–1151, 2013.
[15] M. Paszynski, D. Pardo, and A. Paszynska. Parallel multi-frontal solver for p adaptive ﬁnite element modeling of multi-physics computational problems. Concurrency And Computation-Practice
And Experience, 1(1):48–54, 2010.
[16] M. Paszynski and R. Schaefer. Graph grammar-driven parallel partial diﬀerential equation solver.
Concurrency And Computation-Practice And Experience, 22(9):1063–1097, 2010.
[17] G. Slusarczyk and A. Paszynska. Hypergraph Grammars in hp-adaptive Finite Element Method.
Procedia Computer Science, 18(4):1545–1554, 2013.
[18] B. Strug, A. Paszynska, and M. Paszynski. Using a graph grammar system in the ﬁnite element
method. International Journal Of Applied Mathematics And Computer Science, 23(4):839–853,
2013.
[19] A. Szymczak, A. Paszynska, and P. Gurgul. Graph Grammar Based Direct Solver for hp-adaptive
Finite Element Method with Point Singularities. Procedia Computer Science, pages 1594–1603,
2013.

1099

