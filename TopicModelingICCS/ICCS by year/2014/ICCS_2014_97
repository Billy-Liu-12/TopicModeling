Procedia Computer Science
Volume 29, 2014, Pages 2260–2271
ICCS 2014. 14th International Conference on Computational Science

A Fine-grained Approach for Power Consumption Analysis
and Prediction
Alessandro Leite1 ,3 , Claude Tadonki2 , Christine Eisenbeis1 , and Alba de Melo3
1

Mines ParisTech - Centre de Recherche en Informatique (CRI)
35, rue Saint-Honor´e, 77305, Fontainebleau Cedex
claude.tadonki@mines-paristech.fr
2
INRIA Saclay / Universit´e Paris-Sud (France)
christine.eisenbeis@inria.fr
3
University of Brasilia (Brazil)
albamm@cic.unb.br alessandro.leite@gmail.com

Abstract
Power consumption has became a critical concern in modern computing systems for various
reasons including ﬁnancial savings and environmental protection. With battery powered devices, we need to care about the available amount of energy since it is limited. For the case of
supercomputers, as they imply a large aggregation of heavy CPU activities, we are exposed to
a risk of overheating. As the design of current and future hardware is becoming more and more
complex, energy prediction or estimation is as elusive as that of time performance. However,
having a good prediction of power consumption is still an important request to the computer
science community. Indeed, power consumption might become a common performance and cost
metric in the near future. A good methodology for energy prediction could have a great impact
on power-aware programming, compilation, or runtime monitoring. In this paper, we try to
understand from measurements where and how power is consumed at the level of a computing
node. We focus on a set of basic programming instructions, more precisely those related to
CPU and memory. We propose an analytical prediction model based on the hypothesis that
each basic instruction has an average energy cost that can be estimated on a given architecture
through a series of micro-benchmarks. The considered energy cost per operation includes both
the overhead of the embedding loop and associated (hardware/software) optimizations. Using
these precalculated values, we derive a linear extrapolation model to predict the energy of a
given algorithm expressed by means of atomic instructions. We then use three selected applications to check the accuracy of our prediction method by comparing our estimations with the
corresponding measurements obtained using a multimeter. We show a 9.48% energy prediction
on sorting.
Keywords: power consumption, energy, multimeter, prediction, proﬁling, statistical correlation.

2260

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.211

Power Consumption Analysis and Prediction

1

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

Introduction

While keep striving to provide faster computers, hardware designers have to contend with
power and heat constraints [29]. For decades, computers got faster by increasing the speed
of the central processing unit, now commonly made up with several cores. However, high
processor frequency means higher heat potential. This concern is central when it come to
supercomputers [20, 10], for which we have a large aggregation of heavy CPU activities, thus
a genuine risk of overheating. The cost associated to the required energy, also for cooling, can
become ﬁnancially prohibitive for larger systems. Beyond petascale, the way to exascale is
marked by energy concerns, and power consumption is becoming a metric. A clear illustration
of the fact that energy has come to the spotlight is the so-called Green500 project, which aims
at providing a yearly ranking of the most energy-eﬃcient supercomputers in the world.
For embedded systems or portable devices, which are battery powered, energy is obviously
critical since available on a limited basis. The pervasiveness of portable devices will magnify
and exacerbate this issue.
Cloud computing is another area where energy is an important concern. Indeed, computing
and storage devices are continuously requested by diﬀerent users. Such intensive use of resources
implies a signiﬁcant power consumption at various levels. One way to address the problem is
through the concept of federated clouds, where diﬀerent clouds are virtually merged in order
to provide a ﬂexible system to end users. Based on this conﬁguration, we need to ﬁnd the less
(energy/time) costly scheduling from both users and providers standpoints.
Based on Ohm’s Law [2], the dissipated power is approximately proportional to the square
of the CPU voltage and the CPU frequency, which gives
P = CV 2 f,

(1)

where C is capacitance, V is voltage, and f is frequency [3]. It is important to note that those
parameters can be changed dynamically at runtime [16], which oﬀers an opportunity for energyaware scheduling. Network and memory activities also count, but the most common focus is
on the pure CPU side.
Energy reduction is an important research topic, which is being investigated at all levels
of system abstraction, from the physical layout to software design. There have been several
contributions on energy saving focused on scheduling/processors [10, 16, 8, 33, 34], data organizations [35, 12], compilation [32, 5, 23], and the algorithmic level [27, 25, 16]. Power
management in sensors network, where energy is really critical, is addressed in [31]. The research at the architecture level has led to new and advanced low energy architectures. Current
and future generation processors have their clock frequency that can be dynamically modiﬁed,
and some of them are equipped with a sensor to measure the temperature. In addition, the upper threshold temperature beyond which the fan is automatically triggered can be dynamically
adjusted too. However, all these features need to be skillfully monitored. This could be done
statically at compile time, or dynamically at runtime.
In order to guide the design of energy eﬃcient programs or power aware schedulers, it is important to have a clear methodology for power consumption modeling and estimation. In [30],
an analytical model, based on a mathematical programming formulation, is provided for energy
optimization related to fully featured SDRAM. In this work, we consider the problem at source
code level. Our hypothesis is that, although the correlation between hardware mechanisms,
the energy cost of each basic CPU operation can be estimated and used as a parameter for a
macroscopic prediction. The main advantage is that, from an inventory of the basic operations
contained in a given source code, its power consumption can be estimated by a linear approx2261

Power Consumption Analysis and Prediction

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

imation. We measure the energy directly from the electricity entry of the computer using a
commercial multi meter, which is more general than focusing only on information related to
the CPU.
The rest of the paper is organized as follows. The next section provided an overview of the
related work. Our energy measurement methodology is explained in section 3, and data are
provided for a given machine. In section 4, we present our prediction model, followed in section
5 by an experimental validation. Section 6 provides potential perspectives for this work, and
section 7 concludes the paper.

2

Related Work

There are many techniques in the literature that aim to model or improve the energy eﬃciency
of computing resources. Most of them are based on Dynamic Voltage and Frequency Scaling
(DVFS) [17, 28, 18]. DVFS techniques assume that applications dominated by memory accesses
or involving heavy I/O activities can be executed at lower CPU frequency with only a marginal
impact on their execution time. In this case, the goal of a DVFS scheduler is to identify
each execution phase of an application, quantify its workload characteristics, and then switch
the CPU frequency to the most appropriate power/performance mode. There are also some
works [7, 36, 24, 22] that consider the temperature of the computing node to make schedule
decisions based on the amount of energy that is suﬃcient to consider decreasing the temperature.
Valuable contribution in energy modeling can be found in [6, 19, 13, 21]. Moreover, number
of researches explore software optimization at compiling level [9, 26, 15] in order to improve
performance and reduce energy.
In [17], DVFS decisions are based on memory workload prediction in order to avoid loss
of performance. Experimental results on the NAS parallel benchmark and codes with large
amounts of data communications and memory accesses show that the proposed approach can
save 20% of energy with 4% of performance loss.
In [28], the power consumption of a chemistry application is studied in order to investigate
potential energy savings and performance losses when using DVFS technique, mainly relying on
CPU stall cycles caused by memory accesses and I/O operations. Experiments show that even
when the CPU activity is high, e.g. frequently computing integrals, it is more energy eﬃcient
than computing the integrals at the beginning and store them on disk for subsequent reuses.
In [24], a DVFS and temperature aware load balancing technique is presented to constrain
core temperatures. The approach lets each core working at the maximum available frequency
until a temperature threshold is reached. Experiments in a cluster with dedicated air conditioning unit show that a cooling saving of 57% can be achieved with 20% of timing penalty.
In [22], two energy-conscious task consolidation heuristics (ECTC and MaxUtil) are used to
maximize resource utilization for power saving. The cost of the ECTC heuristics is computed
considering the energy consumption to run a group of parallel tasks. The MaxUtil heuristic
tries to increase the consolidation density. Simulation results show that the proposed heuristics
can lead to an energy saving of 18%(ECTC) and 13%(MaxUtil).
In [26], coarse-grained compiler optimization strategies are applied in order to minimize the
energy consumption. First the registers are renamed in order to reduce output dependencies.
Then, the instruction that minimizes the inter-instruction cost is selected for scheduling. The
results show that the proposed optimization strategies can cut power consumption by 9%,
leading to 4.54% saving on the total energy dissipation.
A distributed compiler approach is presented in [15]. The idea is to use distributed compilers to apply code transformations or highlighting parts of the source code that could not
2262

Power Consumption Analysis and Prediction

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

be optimized. The energy minimization is based on the number of cycles that is required to
execute a given application. The results show a reduction of 40% in the number of cycles only
employing some compiler optimization techniques.
Dabbagh et al. [14] propose a methodology to estimate the energy of operations that can be
implemented in hardware. Considering the backpropagation algorithm, the proposed approach
was able to estimate the energy consumption with an error rate of 5.44%.
In [11], a methodology for measuring the energy eﬃciency of an application is presented.
The aim is to analyze the impact of the application design on its energy eﬃciency and the
environment where the application is developed. The results show that the software abstraction
design and the use of some frameworks and libraries must be considered when the goal is to
minimize energy, especially for large applications. In other words, in many cases, the use of
external frameworks and libraries incurs a high cost in terms of energy consumption.
The closest work to ours are [14] and [11]. Each of these works use the source code to estimate
the energy consumption. Our work diﬀers from these approaches in the following ways. First,
we argue that the memory and I/O workload must be seriously considered to estimate the
energy consumption of an application. Second, we included other kernel operations such as
memory accesses (read, write and allocation), register comparison, and I/O and the eﬀect of
the CPU frequency in the execution of these operations. Tracking the energy cost per basic
instruction, we end up with an analytical model to predict the energy performance of a given
source code.

3

Energy Measurement

Our goal in this section is to validate our hypothesis that each basic CPU operation consumes
a ﬁxed amount of energy that can be calculated for a given architecture. The machine we have
considered is an Intel(R) Core(TM) 2 Quad CPU Q6600, 2.40GHz with 4 GB of RAM running
Fedora Linux (kernel version 3.9.8). The power and energy consumption of the machine is
measured using the WattsUp power meter [1] with a sampling rate of 1Hz. This approach of
performing measurements directly at the electrical level is expected to cover all sources of power
consumption compared to methods that are based on data provided by the thermal sensor of
the CPU. Due to the low measuring resolution of the multi meter (slot of 1 second), a large
number of executions are needed in order obtain meaningful measurements. In addition, since
the raw data provided by the power meter are the distribution of the electrical power over the
time, we obtain the corresponding energy by just summing up those data. This summation
corresponds to the discretization of the required integral of the power over the targeted time
interval.
E(t0 , t1 ) =

t1
t0

t1

P (t)dt ≈

n

P (t)Δt ≈
t=t0

P (t0 + k),

(2)

t=0

where n is the largest integer such that t0 + n ≤ t1 . We consider Δt = 1 because, as previously
explained, the WattsUp power meter works by slots of 1 second. In order to capture possible
ﬂuctuations when estimating the energy, we perform several measurements (typically 10) and
we take the average value.
We evaluate nine basic instructions {addition, multiplication, division, memory read, memory write, memory copy, print, comparison, malloc} in order to estimate their energy consumption under diﬀerent CPU frequencies. For each of them, we apply the aforementioned method
to estimate the associated power consumption. The following code is for the addition case, we
use a similar code for other basic measurements.

2263

Power Consumption Analysis and Prediction

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

void floating_point_addition()
{
register float s;
int i,n;
start_energy_counters();
for(n = 0; n < NB_REPEAT; n ++) {
s = 0.25;
for (i = 0; i < LENGTH; i++) s += 0.3141516;
}
get_consumed_energy();
}

The outer loop is there just to magnify the computing load (by NB REPEAT times). Having
a total of NB REPEAT×LENGTH operations oﬀer a more ﬂexible way to suﬃciently increase the
computing time, otherwise we could stand below one second, means less than what the multi
meter can really measure. In any case, the total energy is divided by NB REPEAT×LENGTH to get
the cost for a single operation.
For the case of memory reads and writes, we use inline assembly instructions in order to
make sure the load (resp. store) instructions are really executed. We will come back later
on this particular case regarding the impact of the level of cache. Taking into account the
CPU frequency, our proﬁling is performed following the model described by Algorithm 1. It is
important to note here that we compile our code without any optimization.

put the machine in the idle state;
foreach available CPU frequency f do
set the frequency of the CPU’s core to f ;
foreach benchmark b do
for i = 1 to 10 do
execute b;
end
consolidate the data of b;
end
sleep 5 seconds;
consolidate the data for frequency f ;
end
Algorithm 1: Generic energy proﬁling algorithm

Table 1 provides the results of energy consumption for a single addition (the overall energy
is divided by the total number of additions performed). We display the measurement for each
of the 10 executions. The goal is to give a picture of the variations, which we expected to be
very slight. Indeed, it is, like with other basic operations as the whole set of measurements will
reveal.
2264

Power Consumption Analysis and Prediction
N
1
2
3
4
5
6
7
8
9
10

Time (s)
28.24
28.23
28.24
28.23
28.23
28.23
28.23
28.23
28.23
28.23

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo
Power (W )
97.01
97.09
97.24
97.28
97.48
97.06
96.92
96.88
97.12
97.05

Energy (nJ)
273
274
274
274
275
273
273
273
274
273

Table 1: Energy related measurements for the addition at 1.6 GHz.
Table 2 shows the results of our energy measurements related to the selected set of basic
instructions, using four diﬀerent values for the CPU frequency (1.6 Ghz, 1.8 Ghz, 2.13 Ghz,
and 2.4 Ghz). For each measurement, we ﬁrst obtain a set of values similar to Table 1, then we
calculate the mean and the standard deviation. For memory operations (read, write, copy, and
malloc), the energy provided is per MB (read, written, copied, or allocated). Figure 1 depicts
an aggregated view of our measurements.
Instruction
Addition
Multiplication
Division
Memory Read
Memory Write
Memory Copy
Print
Comparison
Malloc

1.6 GHz
274
334
372
191
207
525
172
221
3882

Energy (nJ)
1.8 GHz
2.13 GHz
247
227
301
297
337
308
173
158
192
176
479
443
160
142
202
184
3610
3304

2.4 GHz
209
254
285
146
164
415
132
171
3075

1.6GHz
0.50
0.64
0.55
0.42
0.58
1.85
5.14
0.46
8.53

STD (10−9 )
1.8GHz 2.13GHz
1.26
2.01
0.81
6.40
0.65
1.54
0.55
1.07
0.70
1.48
1.52
3.13
6.97
1.22
0.54
1.43
8.72
18.22

2.4GHz
2.38
2.01
1.41
1.45
1.41
4.60
5.68
1.56
31.47

Table 2: Energy consumption per instruction and CPU frequency

Figure 1: Atomic power consumption of basis operations

2265

Power Consumption Analysis and Prediction

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

Let us make some important observations:
• our hypothesis is general, but the energy per basic instruction is of course machine dependent. The corresponding values should be seen as energy parameters that can be used
for macroscopic estimations. Moreover, our measurements include any kind of overhead
and hardware optimizations related to the loops.
• for arithmetic operations, our measurements somehow follow the intuition. Indeed, the
more the operation is complex from the hardware point of view, the more it consumes
energy.
• the previous observations seems to be also true for memory accesses (read and write).
For memory copy, we use the memcpy() routine. We see that the result is slightly larger
than read + write, which makes sense since copying a memory location necessary involves
reading and writing.
• printing seems to consume less energy than any other operation from our selected subset.
This also makes sense as the CPU is not really involved.
• memory allocation is the most energy consuming. However, the fact that it is done once
before using the corresponding memory space will impact less energy in practice for time
consuming programs.
• the energy is lower with higher CPU frequencies, probably due to the reduction of the
execution time. However, in case of time consuming processing, keeping the CPU at high
frequency will incur a higher energy for cooling, which we do not count in this work.
Because of the energy for cooling, since the energy variation related to CPU frequency is
marginal, switching to lower CPU frequencies on memory and I/O operations should be
globally rewarding only over a long period of processing time.
• power consumption during idle state (at least regarding the program under consideration)
is neglected here. However, if this is known, then it should be taken into account.
We are now going to explain how the energy measurements for atomic instructions could be
used to estimate the energy of a given program.

4

Prediction model

For a given source code for which we could get an inventory of the basic instructions, our
prediction of its energy complexity is given by
p

E(f ) =

Ni ei (f ) + Ecooling (f, tmax ),

(3)

i=1

where ei (f ) is the energy of the corresponding atomic operation at frequency f as previously
calculated, and Ni is the number of such instructions. These numbers can be obtained either
from a proﬁling, a code analysis framework [4], or a complexity estimation. For a more rigorous
estimation, one could proceed with the corresponding assembly code.
The second term, Ecooling (f, tmax ) is the energy for cooling, which depends on how CPU
temperature changes during the execution (this depends on both the program and the CPU
frequency) and the temperature threshold (tmax ) above which the cooling system is activated,
2266

Power Consumption Analysis and Prediction

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

typically the fan for standard machines. We do not consider this second term at the current
stage of our work. We keep it, together with the corresponding study, in our list of perspectives.
We think this concern is more relevant for programs with longer execution times or when it
comes to large-scale supercomputers.
The analytical estimation deﬁned by (3) is a linear extrapolation, which could be reﬁned by
taking into account the following considerations: (i) the use of fuse multiply-add instructions,
which may correlate the energy for additions and multiplications; (ii) the idle (static) power
consumption ; (iii) the level of cache where we read or write data, as this has a signiﬁcant impact
on the execution time, thus on the overall energy ; (iv) the eﬀect of instructions pipeline, which
clearly stands against an additive energy consumption model. The last two aspect are quite
elusive, and could be addressed with rough estimations, unless a more rigorous analysis is made
possible by the availability of key hardware and system information. However, since our model
is an extrapolation from atomic measurements to a macroscopic estimation, mainly focusing
on program loops, our appraoch remains consistent in the sense that, all hardware mechanisms
related to loops are taken into account the same way from the measurements to the prediction.

5

Validation and technical discussion

In this section, we consider three case studies to illustrate and validate our energy estimation
approach. For each application, the number of basic operations is calculated from the algorithm. We denote by ea (f ), em (f ), ed (f ), ec (f ), el (f ), and es (f ), the energy consumed at
CPU frequency f for a single addition, multiplication, division, comparison, load, and store
respectively (Table 2).

5.1

Selection sort

for (i = 0; i < n; i++) do
i min = i;
for(j = i + 1; j < n; j++) if(u[j] < u[i min]) i min = j;;
x = v[i]; v[i] = v[i min]; v[i min] = x;
end
Algorithm 2: Main loop of the selection sort

Following our model and the complexity of Algorithm 2, we can estimate the energy by
Esort (f ) =

n(n + 1)
(ec (f ) + 2el (f )) + 2nes (f ).
2

(4)

Depending on the relative order of the values in the array to be sorted, the cost of the last step,
where we swap two components, will depend on how distant are i and i min. Table 3 displays
our predictions vs the measurements.
2267

Power Consumption Analysis and Prediction
N
1
2
3
4
5
6
7
8
9
10

1.6 Ghz
3.0
2.6
12
10
27
23
48
42
75
65
108
96
148 133
193 175
244 225
301 281

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

1.8 Ghz
2.7
2.4
11
9.6
25
22
44
38
68
60
97
87
134 122
175 163
222 209
274 260

2.13
2.5
10
22
40
62
90
122
160
202
250

Ghz
2.2
8.9
20
35
55
82
113
151
195
244

2.4 Ghz
2.3
2.0
9.3
8.1
21
18
37
33
58
52
83
77
113 108
148 143
187 183
231 231

Table 3: Energy predictions vs measurements (kJoules) for the selection sort algorithm
The average relative error is 9.48%, which is quite good, especially for sorting as the eﬀective
number of memory moves depends on the values of the array to be sorted.

5.2

Weighted means

s = 0;
for (i = 0; i < n; i++) do
s = s + w[i] ∗ v[i];
u[i] = s/(i + 1);
end
Algorithm 3: Main loop of the weighted means
The energy of Algorithm 3 (as it is written), can be estimated by
Emean (f ) = n(2ea (f ) + em (f ) + ed (f ) + 2el (f ) + es (f )),
N×105
1
2
3
4
5
6
7
8
9
10

1.6 Ghz
1.8 1.9
3.7 4.1
5.5 6.5
7.4 8.5
9.2
10
11
13
13
15
15
17
17
19
19
21

1.8 Ghz
1.7 1.8
3.3 3.8
5.0 5.9
6.7 8.0
8.4
10
10
12
12
14
14
16
15
18
17
20

2.13 Ghz
1.6
1.6
3.1
3.6
4.7
5.6
6.2
7.5
7.8
9.4
9.3
11
11
13
13
15
14
17
16
19

(5)

2.4 Ghz
1.4 1.5
2.8 3.3
4.2 5.2
5.7 7.0
7.1 8.8
8.5
11
9.9
12
11
14
13
16
14
18

Table 4: Energy predictions vs measurements (kJoules) for the weighted means calculation
The average relative error is 18.36%. We think that instructions pipeline really applies here.
However, we could reach 5.75% in some cases.
2268

Power Consumption Analysis and Prediction

5.3

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

Scalar product

The calculation of the scalar product just repeats the instruction s = s + u[i] ∗ v[i] n times.
Thus, its energy can be estimated by
Escalar (f ) = n(ea (f ) + em (f ) + 2el (f )),
N×105
1
2
3
4
5
6
7
8
9
10

1.6 Ghz
1.0 0.8
2.0 1.6
3.0 2.3
4.0 3.1
5.0 3.9
5.9 4.8
6.9 5.7
7.9 6.6
8.9 7.4
9.9 8.2

1.8 Ghz
0.9 0.7
1.8 1.4
2.7 2.1
3.6 2.8
4.5 3.6
5.4 4.5
6.3 5.3
7.2 6.1
8.0 6.9
8.9 7.7

2.13 Ghz
0.8
0.6
1.7
1.3
2.5
2.0
3.4
2.6
4.2
3.3
5.0
4.1
5.9
5.0
6.7
5.7
7.6
6.4
8.4
7.2

(6)

2.4 Ghz
0.8 0.6
1.5 1.2
2.3 1.8
3.0 2.4
3.8 3.1
4.5 3.9
5.3 4.7
6.0 5.4
6.8 6.1
7.6 6.8

Table 5: Energy predictions vs measurements (kJoules) for the scalar products calculation
The average relative error is 18.18%. The same observation as for weighted means calculation
holds. The relative erros here range from 10.05% to 24.11%.

6

Discussions and perspectives

As we have previously mentioned, our energy prediction can be reﬁned by investigating on
other energy consuming aspects as well as on the hardware correlation between some pairs of
instructions. The case of fuse multiply-add should be investigated following the methodology
considered in this paper. The gap observed with the scalar product and the weighted means
might be due to such transformation by the compiler. Network activities and disk accesses
should be studied to, thus leading to an extension of our model to larger computing systems
like the Cloud or supercomputers.
A more deeper but very important investigation could address the energy coming from CPU
cooling. This requires to be able to model the variation of the CPU temperature during the
execution of a given program, and also the electrical power used for cooling.

7

Conclusion

Modern computing devices are provided to deliver very fast processing capabilities. Either
because of the limited amount of energy available for mobile devices and embedded systems,
or because of the cost (ﬁnancial and environmental) of the energy related to larger systems, we
need to have a good control on power consumption. Among possible approaches, quantitative
modeling of energy prediction is particularly attractive, as it could be used for power aware
programming or compilation. The approach proposed in this paper is one way to derive such a
model and we think, either by construction or from the satisfactory validation results, that it
deserves a close attention.
2269

Power Consumption Analysis and Prediction

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

Acknowledgment
The authors would like to thank CAPES/Brazil, CNPq/Brazil, INRIA/France, and the french
ministry of foreign aﬀairs through the STIC-AmSud program (BioCloud project), for their
ﬁnancial support.

References
[1] In https://www.wattsupmeters.com.
[2] Get connected with ohm’s law. In
http://www.tryengineering.org/lessons/ohmslaw.pdf.
[3] Enhanced intel speedstep technology for the intel pentium processor. In
ftp://download.intel.com/design/network/papers/30117401.pdf, march 2004.
[4] M. Amini, C. Ancourt, F. Coelho, F. Irigoin, P. Jouvelot, R. Keryell, P. Villalon, B. Creusillet, and
S. Guelton. Pips is not (just) polyhedral software. In 1st International Workshop on Polyhedral
Compilation Techniques (IMPACT 2011) in conjunction with CGO 2011, pages IV–97–IV–100,
http://pips4u.org/ , 2011.
[5] L. Bebini and G. De Micheli. System-level optimization: Techniques and tools. In ACM Transaction on Design Automation of Electronic Systems, 2000.
[6] L. Benini, D. Bruni, M. Chinosi, C. Silvano, V. Zaccaria, and R. Zafalon. A power modeling and
estimation framework for vliw-based embedded systems. In ST Journal of System Research, page
118, 2001.
[7] Damien Borgetto, Henri Casanova, Georges Da Costa, and Jean-Marc Pierson. Energy-aware
service allocation. Future Generation Computer Systems, 28(5):769–779, May 2012.
[8] D. Brooks and M. Martonosi. Dynamically exploiting narrow width operands to improve processor
power and performance. In In Proc. Fifth Intl. Symp. High-Perf. Computer Architecture, Orlando,
January 1999.
[9] D. Brooks, V. Tiwari, and M. Martonosi. Wattch: a framework for architectural-level power
analysis and optimizations. In International Symposium on Computer architecture, pages 83–94,
2000.
[10] K.W. Cameron and al. High-performance, power-aware distributed computing for scientiﬁc applications. In Computer, volume 38(11), pages 40–47, 2005.
[11] Eugenio Capra, Chiara Francalanci, and Sandra A. Slaughter. Is software ”green”? application
development environments and energy eﬃciency in open source applications. Information and
Software Technology, 54(1):60–71, Jan 2012.
[12] F. Catthoor, S. Wuytack, E.D. Greef, F. Balasa, L. Nachtergaele, and A. Vandecappelle. Custom
memory management methodology - exploration of memory organization for embedded multimedia
system design. In Kluwer Academic Pub., June 1998.
[13] G. Contreras and M. Martonosi. Power prediction for intel xscale reg; processors using performance
monitoring unit events. In Low Power Electronics and Design, 2005. ISLPED ’05. Proceedings of
the 2005 International Symposium on, pages 221–226, Aug 2005.
[14] M. Dabbagh, H. Hajj, and H. Hajj. An approach to measuring kernel energy in software applications. In International Conference on Energy Aware Computing, pages 1–6, 2011.
[15] Faiza Fakhar, Barkha Javed, Raihan ur Rasool, Owais Malik, and Khurram Zulﬁqar. Software
level green computing for large scale systems. Journal of Cloud Computing, 1(1):1–17, 2012.
[16] X. Fan, C.S. Ellis, and A.R. Lebeck. The synergy between power-aware memory systems and
processor voltage scaling. In Proc. 3rd Int’l Workshop Power-Aware Computing Systems, LNCS
3164, Springer-Verlag, pages 164–179, 2003.

2270

Power Consumption Analysis and Prediction

A. Leite, C. Tadonki, C. Eisenbeis and A. de Melo

[17] Rong Ge, Xizhou Feng, Wu-chun Feng, and Kirk W. Cameron. Cpu miser: A performance-directed,
run-time system for power-aware clusters. In International Conference on Parallel Processing,
pages 18–26, 2007.
[18] V. Hanumaiah and S. Vrudhula. Energy-eﬃcient operation of multi-core processors by dvfs, task
migration and active cooling. IEEE Transactions on Computers, 99, 2012.
[19] Sunpyo Hong and Hyesoon Kim. An integrated gpu power and performance model. SIGARCH
Comput. Archit. News, 38(3):280–289, June 2010.
[20] Chung-hsing Hsu and Wu-chun Feng. A power-aware run-time system for high-performance computing. In ACM/IEEE conference on Supercomputing (SC ’05), Seattle, November 12-18, 2005.
[21] Canturk Isci and Margaret Martonosi. Runtime power monitoring in high-end processors: Methodology and empirical data. In Proceedings of the 36th Annual IEEE/ACM International Symposium
on Microarchitecture, MICRO 36, pages 93–, Washington, DC, USA, 2003. IEEE Computer Society.
[22] Young Choon Lee and Albert Y. Zomaya. Energy eﬃcient utilization of resources in cloud computing systems. The Journal of Supercomputing, pages 1–13, 2010.
[23] T. Okuma, T. Ishihara, and H. Yasuura. Software energy reduction techniques for variable-voltage
processors. In IEEE Design and Test of Computers, 2001.
[24] Osman Sarood and Laxmikant V. Kale. A ’cool’ load balancer for parallel applications. In International Conference for High Performance Computing, Networking, Storage and Analysis, pages
21:1–21:11, 2011.
[25] S. Sen and S. Chatterjee. Towards a theory of cache-eﬃcient algorithms. In SODA, 2000.
[26] G. Sinevriotis and T. Stouraitis. A novel list-scheduling algorithm for the low-energy program
execution. In IEEE International Symposium on Circuits and Systems, volume 4, pages IV–97–
IV–100, 2002.
[27] M. Singh and V. K. Prasanna. Algorithmic techniques for memory energy reduction. In Worskhop
on Experimental Algorithms, Ascona, Switzerland, May 26-28, 2003.
[28] Vaibhav Sundriyal, Masha Sosonkina, Fang Liu, and Michael W. Schmidt. Dynamic frequency
scaling and energy saving in quantum chemistry applications. In IEEE International Symposium
on Parallel and Distributed Processing Workshops and PhD Forum, pages 837–845, 2011.
[29] Claude Tadonki. High performance computing as a combination of machines and methods and
programming. In HDR book, University Paris-Sud Orsay, France, May 16, 2013.
[30] Claude Tadonki and Jose Rolim. An analytical model for energy minimization. In III Workshop on
Eﬃcient and Experimental Algorithms, volume DOI: 10.1007/978-3-540-24838-5 41, pages 59–69,
2004.
[31] Claude Tadonki and Jose Rolim. An integer programming heuristic for the dual power management
problem in wireless sensor networks. In 2nd International Workshop on Managing Ubiquitous
Communications and Services, MUCS2004, Dublin, Ireland, December 13, 2004.
[32] W. Tang, A. V. Veidenbaum, and R. Gupta. Architectural adaptation for power and performance.
In International Conference on ASIC, 2001.
[33] V. Tiwari, S. Malik, A. Wolfe, and T. C. Lee. Instruction level power analysis and optimization
of software. In Journal of VLSI Signal Processing Systems, volume 13(2), August 1996.
[34] M. C. Toburen, T. M. Conte, and M. Reilly. Instruction scheduling for low power dissipation
in high performance processors. In In Proc. the Power Driven Micro-Architecture Workshop in
conjunction with ISCA’98, June 1998.
[35] W. Ye, N. Vijaykrishnan, M. Kandemir, and M. J. Irwin. The design and use of simplepower: a
cycle-accurate energy estimation tool. In In Proc. Design. Automation Conference (DAC), Los
Angeles, June 5-9, 2000.
[36] Zhiming Zhang and J. Morris Chang. A cool scheduler for multi-core systems exploiting program
phases. IEEE Transactions on Computers, 99, 2012.

2271

