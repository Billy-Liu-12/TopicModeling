Procedia Computer Science
Volume 29, 2014, Pages 614–626
ICCS 2014. 14th International Conference on Computational Science

Evaluating the Performance of Multi-tenant
Elastic Extension Tables
Haitham Yaisha,b, Madhu Goyala,b, George Feuerlicht b,c
a Centre for Quantum Computation & Intelligent Systems
b Faculty of Engineering and Information Technology
University of Technology, Sydney
P.O. Box 123, Broadway NSW 2007, Australia
c Faculty of Information Technology,
University of Economics, Prague, Czech Republic
haitham.yaish@student.uts.edu.au, madhu@it.uts.edu.au,
george.feuerlicht@uts.edu.au

Abstract
An important challenge in the design of databases that support mult i-tenant applications is to
provide a platform to manage large volu mes of data collected fro m d ifferent businesses,
social media networks, emails, news, online texts, documents, and other data sources. To
overcome this challenge we proposed in our previous work a mu lti -tenant database schema
called Elastic Extension Tables (EET) that co mb ines multi-tenant relat ional tables and
virtual relational tables in a single database schema. Using this approach, the tenants’ tables
can be extended to support the requirements of individual tenants. In this paper, we discuss
the potentials of using EET mult i-tenant database schema, and show how it can be used for
managing physical and virtual relational data. We perform several experiments to measure
the feasibility and effectiveness of EET by co mparing it with a commercially availab le
mu lti-tenant schema mapping technique used by SalesForce.co m. We report significant
performance improvements obtained using EET when co mpared to Un iversal Tab le Schema
Mapping (UTSM), making the EET schema a good candidate for the management of mu ltitenant data in Software as a Service (SaaS) and Big Data applications.
Keywords: Cloud Computing, Software as a Service, Big Data, Elastic Extension Tables, M ulti-tenant
Database, Relational Tables, Virtual Relational Tables, Universal Tables.

614

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.055

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

1 Introduction
Designing and developing a configurable mult i-tenant Software as a Service (SaaS) or Big
Data application is difficu lt and comp lex task to accomp lish, due to the lack o f support of a well
manageable database schema, and the limitation in p roviding configurable database fields [5, 8,
13, 16]. We have proposed a configurable database design technique for mu lti-tenant
applications in [9]. Th is design called Elastic Extension Tables (EET), and it consists of
Co mmon Tenant Tables (CTT), Virtual Extension Tables (VET), and Extension Tables (ET).
This design enables tenants building their o wn virtual database schema by creat ing the required
number of tables and columns, creating virtual database relationships, and assigning suitable
data types and constraints for table co lu mns during mult i-tenant application run-time execution.
Furthermore, th is design gives tenants the opportunity to address their individual business
requirements by choosing fro m three database models: Mult i-tenant Relational Database,
Co mbined Mult i-tenant Relational Database and Virtual Relat ional Database, and Virtual
Relational Database [10].
In this paper, we focus on comparing the performance of accessing data from EET and
UTSM [1]. Liao et al. [1] state that the UTSM data arch itecture is similar to SalesForce.co m
data architecture. SalesForce.com is the pioneer of SaaS Customer Relationship Management
(CRM ) applicat ions [3]. Moreover, Liao et al. [1] state that SalesForce.com provided a high
level description of its data architecture, but it d id not exp lain how the mu lti-tenant logical
queries are transformed into the traditional physical queries. In [1, 2] Liao et al. filled the gaps
by proposing a middleware -level to transform the data stored in SalesForce.com data
architecture mult i-tenant logical queries into tradit ional physical queries. In addition, Liao et al.
papers [1, 2] presented examples of database queries, which are used to retrieve data from this
data architecture. In our experiments, we used some of these queries , and we created other
queries to show the difference in accessing data fro m EET and UTSM. Our experimental study
shows a significant performance imp rovement result for our EET in co mparison with the
performance of UTSM. We found that the query execution time is much fas ter when we access
data from EET than when we access it from UTSM.
The paper is structured as follows: Section 2 reviews the related work. Section 3 describes
EET and proposes some improvements to it. Section 4 describes UTSM. Section 5 gives our
experimental results, and Section 6 concludes this paper and describes the future work.

2 Related Work
Several wo rks [1, 5, 8, 14, 15] have presented to overcome the challenges and deal with the
design and imp lementation of mu lti-tenant database schema. This section presents seven
techniques for mult i-tenant database schema including Private Tables, Extension Tables,
Universal Table, Pivot Tables, Chunk Table, Chunk Folding, and XML.
The Pri vate Tables technique allows each individual tenant to have private tables , wh ich
can be extended and changed [14, 15]. Using this technique, the query can be transformed fro m
one tenant to another by renaming tables and metadata without using extra colu mns like
‘tenant_id’ to differentiate and isolate tenants data. In contrast, many tables are required to
satisfy each tenant needs. Therefore, this technique is only suitable to be used for a small
number of tenants to ensure satisfactory database load and good performance, but is not suitable
for a larger number of tenants [15].

615

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

The Extension Tables are separated tables joined with the base tables by adding tenant
column as well as row colu mn to construct logical source tables [14, 15]. Th is technique
derived fro m the Deco mposed Storage Model that splits up n-columns table into n 2-column
tables joined using surrogated values [14]. Multip le tenants can use the base tables as well as
the extension tables [5]. Furthermore, it is considered superior to the Private Tables that we
have described above. Nevertheless, the number of tables is increased by increasing the number
of tenants, and the variety of their business requirements [14].
The Uni versal Table is a table that contains additional colu mns of the base application
schema colu mns, which enable tenants to store their required colu mns. It is structured with two
main colu mns 'tenant_id' and 'table_id', and other generic data colu mns, wh ich have a flexib le
VA RCHAR data type in which different data types with different data values can be s tored in
these columns [1, 14]. This is a flexib le technique which enables tenants to extend their tables
in d ifferent ways according to their business needs. However, the rows o f the universal table
can be too large introducing overhead with the number of NULL values, which the database has
to handle [14].
In the Pivot Tables technique the application maps the schema into generic structure in the
database, in wh ich each colu mn of each row in a logical source table is given its own row in the
Pivot Table. The Pivot Table includes four colu mns: tenant, table, colu mn, and row that specify
which row in the logical source table they represent. As well as the single data type column that
stores the values of the logical source table rows according to their data types in the designated
pivot Table [5, 14]. For examp le, the Pivot Tables can have two pivot tables, the first table
'pivot_int' to store INTEGER values, and the second table 'pivot_str' to store STRING values.
Using this technique, performance benefits are achieved by avoiding NULL values, and by
selectively reading fro m s maller nu mbers of colu mns. In co mparison with Pivot Tables (vert ical
tables) and horizontal tables, the first one performs better when it allows colu mns selectively
read in columns to improve the performance [14].
The Chunk Table is another generic structure technique that is similar to Pivot Table.
Except, it has a set of data colu mns with a mixture of data types that replacing the co lu mn ‘co l’
in the Pivot Table with ‘chunk’ colu mn in the Chunk Table [14]. Th is technique partitions the
logical source table into groups of column. Each group is assigned to a chunk ID and mapped
into an appropriate Chunk Table. Th is technique has four advantages over Pivot Table. (1)
Reducing metadata storage ratio, (2) reducing the overhead of reconstructing the logical source
tables, (3) reducing the number of co lu mns, and (4) provid ing indexes. This technique is
flexible, but it adds complexity to database queries [14].
The Chunk Fol ding is a schema mapping technique that partit ion logical source tables into
chunks vertically [5, 14]. These chunks are fo lded in different physical tables and jo ined
together [5]. The performance of this technique is enhanced by mapping the most used tenants’
columns of the logical schema into conventional tables, and the remaining colu mns in the
Chunk Tables are not used by the majority of tenants [14].
The XML database extension technique is a co mb ination of relat ional database systems and
Extensible Markup Language (XM L) [5, 8, 15]. The extension of XM L can be p rovided as
native XM L data type or storing the XM L document in the database as a Character Large
Object (CLOB) or Binary Large Object (BLOB) [15]. XM L data type facilitating the creation of
database tables, columns, views, variables and parameters, and isolating the application fro m
relational data model [8]. This technique satisfies tenants’ needs because their data can be
handled without changing original database relat ional schema, and XM L data type is supported
by several relat ional database products [5, 8]. In contrast, this techniq ue reduces the data access
performance using XML files [15].
In this section, we have discussed various models used for mu lti-tenant database design
proposed and implemented to overco me mult i-tenant database challenges. In this paper, we

616

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

choose the Universal Table schema mapping technique to compare it and its performance with
our EET mu lti-tenant database schema. We have chosen this technique because it is one of the
mu lti-tenant database schema techniques imp lemented commercially by SalesForce.co m
that the American business magazine Fo rbes selected it as the most innovative company in the
world in year 2011, 2012, and 2013 [6, 7].

3 Elastic Extension Tables
The proposed Elastic Extension Tables (EET) database schema is a novel way of designing
and creating a mu lti-tenant database, which consists of three types of tables [9]. The first type
are Co mmon Tenant Tables (CTT), these physical tables are shared between tenants using a
Relational Database Management System (RDBMS). These physical relat ional tables can be
applied to any business domain database such as CRM, A ccounting, Hu man Resource (HR), or
other business domains. The second type are Virtual Extension Tables (VET) that allo w tenants
to extend the existing business domain database, or have their own configurable database
through creating their virtual database structures fro m scratch by creating (1) virtual database
tables, (2) virtual database relationships, and (3) other databas e constraints. The third type are
Extension Tables (ET) that consists of eight physical tables used to construct VETs [9].
The design details of the eight extension tables of EET are shown in Figure 1 and listed as
follows: (1) the ‘db_table’ extension table allows tenants to create virtual tables and give them
unique names. (2) The ‘table_colu mn’ extension table allo ws tenants to create virtual colu mns
for a virtual table stored in the ‘db_table’ extension table. (3) The table row extension tables
store records of virtual extension colu mns in three separate tables. These tables are separated to
store small data values in the ‘table_row’ extension table such as NUM BER, DATE-and-TIM E,
BOOLEA N, VA RCHAR and other data types. The large data values are stored in two other
tables: the ‘table_row_blob’ extension table, which stores a Uniform Resource Identifier (URI)
for virtual co lu mns of BLOB data type, the ‘table_row_clob’ extension table, which stores
CLOB values for virtual colu mns with TEXT data type. These three types of tables are capable
to store all the data types of Big Data including tradit ional relat ional data, texts, audios, images,
and videos in structured format. (4) The ‘table_relationship’ extension table allows tenants to
create virtual relationships for their virtual tables with any of CTTs or VETs. (5) The
‘table_index’ extension table is used to add indexes to virtual co lu mns. These indexes reduce
the query execution time when tenants retrieve data from VETs. (6) The
‘table_primary_key_column’ extension table allo ws tenants to create single or co mposite
virtual primary keys for virtual extension colu mns that are stored in the ‘table_column’
extension table [9].
Following our init ial proposal of the EET mu lti-tenant database schema in [9], we modified
and improved this schema to optimize the execution time of EET data retrieval, and to integrate
CTT with VET as shown in Figure 1 and described below:
1. We created a primary key colu mn called ‘db_table_id’ with a NUM BER data type, and
replaced the constraint of ‘db_table_name’ fro m the PRIMARY KEY to UNIQUE in t he
‘db_table’ extension table. Also, we created a primary key colu mn called ‘table_colu mn_id’
with a NUMBER data type, and replace the constraint ‘table_column_name’ fro m the
PRIMARY KEY to UNIQUE in the ‘table_colu mn’ extension table. These two changes
resulted in changing the ‘table_index’, ‘table_primary_key_column ’, ‘table_row’,
‘table_row_blob’, and ‘table_row_clob’ extension tables, by replacing their foreign key
‘db_table_name’ with ‘db_table_id’, and ‘table_colu mn_name’ with ‘table_colu mn_id’. We

617

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

made these changes to replace the unique primary key colu mn fro m STRING data type to
NUMBER data type in the ‘db_table’ and ‘table_column’ extension tables .
2. In the ‘table_colu mn’ extension table, we created a new co lu mn called
‘is_primary_key_column’ and we used it instead of the ‘is_unique_column’. This colu mn
specifies whether a colu mn stored in the ‘table_colu mn’ extension table is a primary key or
not. We designated the ‘is_unique_column’ co lu mn to specify whether a colu mn stored in the
‘table_column’ extension table is a unique colu mn or not. On the other hand, we changed the
name of the primary key table fro m ‘table_unique_column’ to ‘tab le_primary_key_column’,
and changed the name of the unique primary key co lu mn of the same table fro m
‘table_unique_column_id’ to ‘table_primary_key_colu mn_id’. We have done these changes
not only to have the option of assigning a virtual PRIMA RY KEY constraint to the virtual
columns of EET, but also assigning a virtual UNQUE constraint to these columns.
3. In the ‘table_relat ionship’ extension table, we have changed the name of the column
‘targeted_table_name’ to ‘targeted_table_id’. We made this change because we changed the
unique primary key of ‘db_table’ extension table fro m STRING to NUMBER as mentioned
in point nu mber 1 o f this section. Moreover, we added two more co lu mns to the
‘table_relatioship’ extension table. The first colu mn is ‘shared_table_name’, and the second
column is ‘shared_column_name’ to create virtual relationships between CTTs and VETs.
4. In the ‘table_index’ extension table, we removed the ‘table_index_ id’ unique primary key
column, and assigned the PRIMA RY KEY constraint to the ‘table_row_id’ and ‘serial_id’ in
order to optimize the query execution time of retrieving rows from VETs.

618

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

Figure1: Elastic Extension Tables

4 Universal Table Schema Mapping
Liao et al. [1] have used in their work the Universal Table Schema Mapping (UTSM). This
schema mapping technique is similar to the schema SalesForce.co m is using [1], and originated
fro m Universal Relat ions [4]. The data architecture of UTSM is shown in Figure 2. The ‘Data’
table is the universal table that stores all tenants’ data, and it has fixed number of data colu mns.
The number of colu mns of this table should be a large number to fit different number of
columns required by different tenants (e.g. SalesForce.co m uses 500 colu mns for this table).
These columns store data which maps to objects and fields created in the ‘Ob jects’ and ‘Fields’
tables. The data type of these columns is VARCHAR, which allo ws storing different data types
(STRING, NUM BER, DATE, etc.). The ‘Ob jects’, ‘Fields’, and ‘Relat ionships’ tables are used
to construct virtual tables and their virtual colu mns, and build relationships bet ween those
virtual tables. Whereas the ‘Index’ and ‘Uniquefields’ tables are used to optimize the query
execution time of retrieving data from the ‘Data’ universal table [1, 3].

619

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

Figure 2: Universal Table Schema M apping [1]

5 Performance Evaluations
After we had designed the EET mult i-tenant database schema in [9], we developed the
Elastic Extension Tables Proxy Service (EETPS) [10] and the Elastic Extension Query
Optimizer Serv ice (EETQOS) [11]. Then we carried out several experiments to verify the
practicability of apply ing EETPS and EETQOS on EET. We evaluated the data retrieval of
CTT, VET, and both CTT and VET, by accessing EETPS and EETQOS which transforms
mu lti-tenant queries into traditional database queries and execute them in RDBMS [10, 11]. In
this paper, our focus is on comparing the performance of accessing data from EET and UTSM
directly fro m the database level, irrespective of the software solution which built on top of these
two mult i-tenant database schemas for t wo reasons: (1) The most significant challenge in mu lt itenant applications is designing the multi-tenant databases schema that imp roves multi-tenant
query processing. This schema design impacts the software design which built on top of it and
its performance. (2) Co mparing the performance of two mult i-tenant software solutions under
the same conditions, and on the same hardware resources it is hard to be ach ieved, especially
when the other software is not available to be installed on the same application server.

5.1 Experimental Setup
We perform our experiments on PostgreSQL 8.4 database installed on a PC with 64-bit
Windows 7 Home Premiu m operating system, Intel Core i5 2.40GHz CPU, 8 GB RAM
memory, and 500 GB hard disk storage.

5.2 Experimental Data Set
Typically, mult i-tenant databases store massive data volumes across multip le servers to
optimize the performance of data retrieval. However, before considering scale-up or scale-out
of mult i-tenant databases to optimize its performance, we believe that we should perform a
comparison between EET and UTSM using a single server instance. In order to test the
effectiveness of accessing data from these two multi-tenant database architecture designs

620

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

without affecting their performance by using any scalability. In our experiments, we focus on
benchmarking the perfo rmance of the main tables of both data architectures where most of
tenants’ data is stored, and we discard the lookup queries. For examp le in EET , we d iscard the
queries which check whether a virtual co lu mn is indexed or not fro m the ‘table_colu mn’
extension table. On the other hand, we discard the queries which check whether a column is
indexed or not fro m the ‘fields ’ table of UTSM. In this case, our focus in EET is on
‘table_row’, and ‘table_ index’, and in UTSM is on ‘Data’, ‘Index’, and ‘Un iquefields’ tables.
Furthermore, in order to run co mparative experiments , we populate exact ly the same data in the
‘table_row’ extension table of EET in a separate database, and the ‘Data’ universal table of
UTSM in another database. We populate these two databases with only the data that is tested in
these two tables. The number of v irtual rows in ‘table_row’ extension table is 200,000 rows and
the same nu mber of ro ws in the ‘Data’ universal table. These rows belong to the ‘product’
virtual table, and the structure of this table in EET and UTSM is shown in Figure 3.

Figure 3: The virtual ‘product’ table structure.

In the mu lti-tenant database, each tenant’s data is isolated in a table partit ion. Therefo re, we
perform our experiments for one tenant to evaluate the effectiveness of retrieving data for each
single tenant fro m the mult i-tenant database. These experiments are div ided into four types that
are sharing the details of this data set. We perform each query of these experiments ten times,
and we present the average execution time of these queries in Figure 4 -11. These queries that
are related to EET and UTSM are shown in Appendix A. The input and the output of EET and
UTSM queries are the same. However, the structures of these queries are different because the
data architectures of the two schemas are different. The four experiments details are listed
below:
1. Retrievi ng Rows Experiment (Exp.1 ). The aim of this experiment is to benchmark the
query execution time o f retrieving ro ws fro m EET and UTSM. We divide this experiment
into four experiments including:
Retrieving Rows without Using Query Columns’ Filters Experi ment (Exp.1 .1). In this
experiment, we execute Query 1 (Q1) and Query 2 (Q2). The Q1 retrieves rows fro m the
‘table_row’ extension table of EET without specifying any query filters other than the
tenant ID, and the ‘project’ table ID. Whereas the Q2 retrieves rows fro m the ‘Data’
universal table without specifying any query filters other than the tenant ID and the
‘project’ ob ject ID. In this study, we perform eight tests using these two queries to retrieve
1, 10, 50, 100, 500, 1000, 1500, and 2000 rows.
Retrieving Rows Using Col umns’ Query Filters Experi ment (Exp.1.2). In this
experiment, we execute Query 3 (Q3) on the ‘table_row’ extension table of EET and
execute Query 4 (Q4) on the ‘Data’ universal table. We filter both queries by specifying a

621

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

particular nu mbers of product IDs stored in the ‘product’ virtual table. In this study, we
perform three tests using these two queries to retrieve rows by specifying 1 product ID for
the first test, 10 product IDs for the second test, and 50 product IDs for the third test. The
structure of Q4 has presented in [2] but with different value settings.
Retrieving Rows Using Pri mary Key Indexes Experi ment (Exp.1.3). In th is experiment,
we execute Query 5 (Q5) on the ‘table_ro w’ and ‘table_index’ extension tables of EET and
execute Query 6 (Q6) on the ‘Data’ and ‘Uniquefields’ tables of UTSM. In this experiment,
we use a primary key index to retrieve rows fro m the ‘product’ virtual table fro m the
‘table_row’ extension table and from the ‘Data’ table. In this study, we perform three tests
using these two queries to retrieve 1, 10, and 50 rows. The structure of Q6 has presented in
[1] but with different value settings.
Retrieving Rows Using Custom Index Experi ment (Exp.1.4). In this experiment, we
execute Query 7 (Q7) on the ‘table_row’ and ‘table_index’ extension tables of EET and
execute Query 8 (Q8) on the ‘Data’ and ‘Index’ tables of UTSM. In this experiment, we
use a custom index, which is a selective filter in the tenant’s query. This index should be
other than the primary key and fore ign key indexes. Th is custom index retrieves rows fro m
the ‘product’ virtual table for both ‘table_row’ and ‘Data’ tables. We choose the
‘standard_cost’ virtual co lu mn to filter the queries by looking up fo r all the products which
have standard cost greater or equal ‘$ 9000’ fro m the ‘product’ virtual table. In this study,
we perform four tests using these two queries to retrieve 1, 10, 50, and 100 rows.
2. Inserting Rows Experi ment (Exp.2). The aim o f this experiment is to benchmark the
query execution time of inserting rows into EET and UTSM. We execute Query 9 (Q9) on
the ‘table_row’ and ‘table_index’ extension tables of EET and execute Query 10 (Q10) on
the ‘Data’, ‘Index’, and ‘Uniquefields’ tables of UTSM . In this study, we perform four tests
using these two queries to insert 1, 10, 50, and 100 rows.
3. Updati ng Rows Experi ment (Exp.3). The aim of this experiment is to benchmark the
query execution time of updating rows into EET and UTSM. We execute Query 11 (Q11)
on the ‘table_row’ and ‘table_index’ extension tables of EET and execute Query 12 (Q12)
on the ‘Data’, and ‘Index’ tables of UTSM. In this study, we perform four tests using these
two queries to update 1, 10, 50, and 100 rows.
4. Deleting Rows Experi ment (Exp.4 ). The a im of this experiment is to benchmark the
query execution time of delet ing rows fro m EET and UTSM. We execute Query 13 (Q13)
on the ‘table_row’ and ‘table_ index’ extension tables of EET, and execute Query 14 (Q14)
on the ‘Data’, ‘Index’, and ‘Uniquefields’ tables of UTSM. In this study, we perform four
tests using these two queries to delete 1, 10, 50, and 100 rows.

5.3 Experimental Result
In this section, we give four experimental results as follows:
1. Retrieving Rows Experi mental Results. We divided this experimental result into four
results as follows: the experimental study of Exp.1.1 shows that the execution t ime of Q1
that perform on the ‘table_row’ extension table of EET is approximately 76% faster on
average than the execution time of Q2 that perform on the ‘Data’ universal table when we
retrieve 1, 10, 50, 100, 500, 1000, 1500, and 2000 rows . The details results of this
experiment are shown in Figure 4-5. The experimental study of Exp.1.2 shows that the
execution time of Q3 that perform on the ‘table_row’ extension table of EET is
approximately 94% faster on average than the execution time of Q4 that perform on the
‘Data’ universal table when we retrieve 1, 10, and 50 ro ws. The details results of this

622

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

experiment are shown in Figure 6. The experimental study of Exp.1.3 shows that the
execution time of Q5 that perform on the ‘table_row’ and ‘table_ index’ extension tables of
EET is approximately 88% faster on average than the execution time of Q6 that perform
on the ‘Data’ and ‘Uniquefields’ tables of UTSM when we retrieve 1, 10, and 50 rows.
The details results of this experiment are shown in Figure 7. The experimental study of
Exp .1.4 shows that the execution time of Q7 that perform on the ‘table_ro w’ and
‘table_index’ extension tables of EET is appro ximately 60% faster on average than the
execution time of Q8 that perform on the ‘Data’ and ‘Index’ tables of UTSM when we
retrieve 1, 10, 50, and 100 ro ws . The details results of this experiment are shown in Figure
8.
2. Inserting Rows Experi mental Results. The experimental study of Exp.2 shows that the
execution time of Q9 that perform on the ‘table_row’ and ‘table_ index’ extension tables of
EET is approximately 19% slower on average than the execution time of Q10 that perform
on the ‘Data’, ‘Index’, and ‘Un iquefields’ tables of UTSM when we insert 1, 10, 50, and
100 rows. The details results of this experiment are shown in Fig ure 9.
3. Updati ng Rows Experimental Results. The experimental study of Exp .3 shows that the
execution time of Q11 that perform on the ‘table_row’ and ‘table_index’ extension tables
of EET is approximately 51% faster on average than the execution time of Q12 that
perform on the ‘Data’, and ‘Index’ tables of UTSM when we update 1, 10, 50, and 100
rows. The details results of this experiment are shown in Figure 10.
4. Deleting Rows Experi mental Results . The experimental study of Exp.4 shows that the
execution time of Q13 that perform on the ‘table_row’ and ‘table_index’ extension tables
of EET is approximately 32% faster on average than the execution time of Q14 that
perform on the ‘Data’, ‘Index’, and ‘Uniquefields’ tables of UTSM when we delete 1, 10,
50, and 100 rows. The details results of this experiment are shown in Fig ure 11.

0.2

EET (Q1)

2

UTSM ((Q2)

1

Time (Sec)

10

50 100

Number of retrieved rows
Figure 4: Retrieving small
numbers of rows (Exp. 1.1)

EET (Q3)

10

50

Number of retrieved rows
Figure 6: Retrieving rows
using columns’ query filters
(Exp.1.2)

0

100 500 1000 1500 2000
Number of retrieved rows
Figure 5: Retrieving large numbers of
rows (Exp. 1.1)

0.5

UTSM (Q4)

0
1

Time (Sec)

0

1

UTSM (Q2)

1

Time (Sec)

Time (Sec)

0.1

EET (Q1)

EET (Q5)

UTSM (Q6)

0
1

10

50

Number of retrieved rows
Figure7: Retrieving rows using PK
indexes (Exp. 1.3)

623

Evaluating the Performance of Multi-tenant Elastic Extension Tables

EET (Q7)

0

1

10

0.2

UTSM (Q8)

50

100

Time (Sec)

Time (Sec)

0.2

1

1

10

0.1

UTSM (Q12)

0
50

Number of updated rows
Figure 10: Updating rows
(Exp.3)

100

10

50 100

Number of inserted rows
Figure 9: Inserting rows (Exp.2)

Time (Sec)

Time (Sec)

EET (Q11)

UTSM (Q10)

0

Number of retrieved rows
Figure 8: Retrieving rows using
custom indexes (Exp. 1.4)

0.2

EET (Q9)

H. Yaish et al.

EET (Q13)

UTSM (Q14)

0

1

10

50 100

Number of deleted rows
Figure 11: Deleting rows (Exp.4)

6 Conclusion
This paper compares and evaluates the Elastic Extension Tables (EET) and the Universal
Table Schema Mapping (UTSM ). The EET avoids storing rows with NULL values, in contrast
the Universal Table can be large with overheads caused a large number of NULL values.
Moreover, the EET allows to create v irtual relationships between the tenants’ shared physical
tables (CTT) and the tenants’ virtual tables (VET), and allows tenants to choose from three
database models: Multi-tenant Relational Database, Co mb ined Multi-tenant Relational
Database and Virtual Relational Database, and Virtual Relat ional Database. Nevertheless, this
capability not applied in UTSM or other mult i-tenant schema mapping techniques. The
experimental study that we conducted shows the improvement gained when retrieving,
updating, and deleting data fro m EET over the UTSM. Especially when we retrieve data fro m
EET, it is much faster than UTSM. However, the execution t ime of inserting rows in EET is
slightly slower than UTSM.
As for future work, we p lan to focus on the scalability of EET and evaluate its performance
in a scalable environment. Also, we are in the process of building a mu lti -tenant database
middleware service that stores data collected fro m different business domains, and the emerg ing
social media, SaaS, and Big Data applications. This middleware service co mbines relational
database tables with virtual relational tables, and simplifies the development of software
applications in general and multi-tenant SaaS and Big Data applications in particular.

624

Evaluating the Performance of Multi-tenant Elastic Extension Tables

H. Yaish et al.

References
[1] C. F. Liao, K. Chen, J. J. Chen. Toward a tenant-aware query rewriting engine for
Universal Table schema-mapping. In: CloudCom ’12. Taipei: China; 2012. p. 833-6.
[2] C. F. Liao, K. Chen, J. J. Chen. Modularizing tenant-specific schema customization in SaaS
applications. In: AOSD ’13. Fukuoka: Japan; 2013. p. 9 - 4.
[3] C. D. Weissman, S.Bobrowski. The design of the force.com multitenant internet application
development platform. In: SIGMOD ’09. Rhode Island : USA; 2009. p. 889- 8.
[4] D. Maier, J. D. Ullman. Maximal objects and the semantics of universal relation databases .
In: TODS ’83.1983. 8 (1):1-14.
[5] F. S. Foping, I. M. Dokas, J. Feehan, S. Imran. A new hybrid schema-sharing technique for
multitenant applications . In: ICDIM ’09. Michigan: USA; 2009. p. 1-6.
[6] Forbes -The world's most innovative companies, http://www.fo rbes.com/innovativecompanies/list/ (Last accessed 18 March, 2014).
[7] Salesforce.com - Salesforce.com ranked #1 on "most innovative companies in the world" list
by Forbes, http://www.salesforce.com/company/awards/most-innovative-companies-salesforceno1-forbes.jsp (Last accessed 18 March, 2014).
[8] D. Jia, W. Hao-yu,Y. Zhao-jun. Research on data layer structure of mu lti-tenant e-commerce
system. In: IE&EM ’10. Xiamen: China; 2010. p. 362 - 4.
[9] H. Yaish, M. Goyal, G. Feuerlicht. An elastic multi-tenant database schema for software as a
service. In: DASC ’11. Sydney: Australia; 2011. p 737- 7.
[10] H. Yaish, M. Goyal, G. Feuerlicht. Proxy service for multi-tenant database access. In: CDARES ’13. Regensburg: Germany; 2013. p.100 - 18.
[11] H. Yaish, M. Goyal, G. Feuerlicht. A method of optimizing multi-tenant database query
access. In: WISE ’13. Nanjing: China; 2013. p. 194 - 14.
[12] M. M CSI, Nitue. Configurability in SaaS (software as a service) applications. In: ISEC.
2009, p. 19-8.
[13] R. M ietzner, T. Unger, R. Tit ze, F. Ley mann. Co mbin ing different mult i-tenancy patterns in
service-oriented applications. In: EDOC ’09. Auckland: New Zealand; 2009. p. 131 -10.
[14] S. Aulbach, T. Grust, D. Jacobs, A. Kemper, J. Rittinger. Mult itenant databases for software
as a service: schema mapping techniques. In: SIGM OD ’08. Vancouver: Canada; 2008. p. 119516.
[15] S. Aulbach, T. Grust, D. Jacobs, A. Kemper, M . Seibold. A comparison of flexible s chemas
for software as a service. In: SIGMOD ’09. Rhode Island: USA; 2009 p. 881-8.
[16] T. Kwok, N. Thao, L. Linh. A software as a service with mu lti-tenancy support for an
electronic contract management application. In: SCC ’08 .Hawaii: USA; 2008, p. 179 - 8.

Appendix A. The Experiments Queries.
SELECT * FROM table_row tr WHERE tr.table_row_id in (SELECT distinct(tr2.table_row_id) FROM
table_row tr2 where tr2.db_table_id = 16 and tr2.tenant_id = 1000 LIMIT 1 ) ;
SELECT * FROM data WHERE tenantid = 1000 and objectId = 1 LIMIT 1;
Q2
SELECT * FROM table_row tr WHERE tr.tenant_id =1000 and tr.db_table_id = 16 and
Q3
tr.table_column_id IN (50,52,54) and tr.table_row_id IN ( SELECT table_row_id FROM table_row tr2
WHERE tr2.tenant_id =1000 and tr2.db_table_id = 16 and ( tr2.table_column_id =47 and tr2.value =
'163336') );
Q 4 [2] SELECT price, cost, weight FROM (SELECT value0 AS id, value4 AS price , value2 AS cost, value6
AS weight FROM data WHERE objectid = 1 and tenantid = 1000 ) AS product WHERE id = '163336';
SELECT * FROM table_row tr WHERE tr.tenant_id =1000 and tr.db_table_id = 16 and tr.table_row_id
Q5
IN (SELECT ti.table_row_id FROM table_index ti WHERE ti.tenant_id =1000 and ti.db_table_id = 16
and ti.table_column_id =47 and ti.value = '163337' )
Q 6 [1] SELECT * FROM data WHERE objectid =1 and tenantId = 1000 and dataguid in (SELECT dataguid
Q1

625

Evaluating the Performance of Multi-tenant Elastic Extension Tables

Q7
Q8
Q9

Q 10

Q 11

Q 12

Q 13

Q 14

626

H. Yaish et al.

FROM uniquefields WHERE objectid = 1 and tenantId = 1000 and numvalue IN ( 163337) );
SELECT * FROM table_row tr WHERE tr.tenant_id =1000 and tr.db_table_id = 16 and tr.table_row_id
IN (SELECT ti.table_row_id FROM table_index ti WHERE ti.tenant_id = 1000 and ti.db_table_id = 16
and ti.table_column_id = 50 and (cast (ti.value as numeric) >= '9000') LIMIT 1);
SELECT * FROM data WHERE objectid =1 and tenantId = 1000 and dataguid in (SELECT dataguid
FROM index WHERE objectid = 1 and tenantId = 1000 and fieldNum =3 and numvalue > = 9000
LIMIT 1);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,1,1000, '50000000',16,47);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,2,1000, '1000',16,48);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,3,1000, '50000',16,49);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,4,1000, '222.50',16,50);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,5,1000, 'Red',16,51);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,6,1000, '242.50',16,52);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,7,1000, '40',16,53);
INSERT into table_row (table_row_id, serial_id, tenant_id, value, db_table_id, table_column_id) values
(50000061,8,1000, '300',16,54);
INSERT into table_index (tenant_id, value, table_row_id, serial_id, db_table_id, table_column_id )
values (1000, '50000000',50000061,1,16,47);
INSERT into table_index (tenant_id, value, table_row_id, serial_id, db_table_id, table_column_id )
values (1000, '222.50',50000061,4,16,50);
INSERT into data (dataguid, tenantid, objectid ,name, value0, value1, value2, value3,value4, value5
,value6) values(50000061,1000,1,'n ame', '50000000', '50000', '222.50','Red', '242.50', '40', '300');
INSERT into uniquefields values (50000061, 1000, 1, 1,'',50000000,'2013-12-12');
INSERT into index values (50000061, 1000, 1, 3,'', '222.50','2 013-12-12');
UPDAT E table_row set value = '230.50' WHERE tenant_id = 1000 and db_table_id = 16 and
table_column_id = 52 and table_row_id =50000061;
UPDAT E table_index set value = '230.50' WHERE tenant_id = 1000 and db_table_id = 16 and
table_column_id = 52 and table_row_id =50000061;
UPDAT E data set value2 = '230.50' WHERE tenantid = 1000 and objectid = 1 and dataguid
=50000061;
UPDAT E index set numvalue = 230.50 WHERE tenantid = 1000 and objectid = 1 and fieldnum =3 and
dataguid =50000061;
DELET E from table_index WHERE tenant_id = 1000 and db_table_id = 16 and table_row_id
=50000061;
DELET E from table_row WHERE tenant_id = 1000 and db_table_id = 16 and table_row_id =
50000061;
DELET E from index WHERE tenantid = 1000 and objectid = 1 and fieldnum =3 and dataguid
=50000061;
DELET E from uniquefields WHERE tenantid = 1000 and objectid = 1 and fieldnum =1 and dataguid
=50000061;
DELET E from data WHERE tenantid = 1000 and objectid = 1 and dataguid =50000061;

