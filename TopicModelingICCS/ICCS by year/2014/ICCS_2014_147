Procedia Computer Science
Volume 29, 2014, Pages 2182–2191
ICCS 2014. 14th International Conference on Computational Science

The container problem in a torus-connected cycles network
Antoine Bossard1 and Keiichi Kaneko2
1

Advanced Institute of Industrial Technology
Tokyo Metropolitan University, Japan
2
Graduate School of Engineering
Tokyo University of Agriculture and Technology, Japan

Abstract
In the last few years, parallel processing systems have been studied very actively, and, given
the huge number of computing nodes now involved in modern supercomputers, many topologies
have been proposed to eﬃciently connect all these CPUs. A torus and its variants are such
topologies popular as interconnection networks of massively parallel systems. Torus-connected
cycles (TCC) have been introduced recently, building on the interesting properties or tori and
enabling nodes clustering. In this paper, we present an algorithm that solves the container
problem in a TCC. This problem consists in ﬁnding mutually node-disjoint paths between
any pair of nodes. In a T CC(k, n), the proposed algorithm ﬁnds paths of lengths at most
k/2 n2 + ( k/2 + 4)n − 3 in O(n3 + kn2 ) time. Lastly, an empirical evaluation is conducted
to inspect the practical behaviour of this algorithm.
Keywords: multicomputer, interconnection network, parallel processing, fault-tolerant routing, performance evaluation

1

Introduction

Beneﬁting from interesting topological properties such as symmetry and regularity, tori and
their variants are popular as interconnection networks of massively parallel systems such as the
Fujitsu K. Based on a torus network, the torus-connected cycles network has been introduced
by Bossard and Kaneko in [5].
In this paper, we propose an algorithm that solves the container problem, also known as the
node-to-node disjoint paths routing problem, in a k-ary n-dimensional torus-connected cycles
network T CC(k, n). For two arbitrary nodes s and d in a T CC(k, n), the proposed algorithm
constructs three paths between s and d that are mutually node-disjoint except for the nodes s
and d; precisely, these paths are called internally node-disjoint.
Besides the container problem, there exist several other disjoint paths routing problems. For
example, the node-to-set disjoint path routing problem is about constructing paths between one
source node and multiple destination nodes that are mutually node-disjoint except for the source
node. Moreover, the set-to-set disjoint paths routing problem is about constructing mutually
2182

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.203

The container problem in a TCC

A. Bossard and K. Kaneko

node-disjoint paths between multiple source nodes and multiple destination nodes. Because
ﬁnding node-disjoint paths is important for communication in parallel processing systems, there
are many related researches; we give some examples below.
The container problem has been solved for a hypercube [18], a star graph [8], a rotator
graph [20], a pancake graph [21], a substring reversal graph [24], a burnt pancake graph [13],
and a bubble-sort graph [23]. The node-to-set disjoint paths problem has been solved for a
hypercube [19], a star graph [11], a rotator graph [14], a pancake graph [15], a burnt pancake
graph [12], a bubble-sort graph [22], a perfect hierarchical hypercube [7], a hierarchical cubic
network [3], and a hyper-star graph [16]. The set-to-set disjoint paths problem has been solved
for a star graph [10], a pancake graph [17], a perfect hierarchical hypercube [4], a hierarchical
cubic network [6], and a hyper-star graph [2]. Related work has been conducted on meshes [1].
The rest of this paper is organised as follows. Deﬁnitions are recalled in Section 2. The
proposed algorithm is detailed in Section 3 and its performance is established in Section 4. An
empirical evaluation is conducted in Section 5. Finally, this paper is concluded in Section 6.

2

Preliminaries

A torus-connected cycles network is a hierarchical interconnection network; its deﬁnition is as
follows.
Deﬁnition 1. A k-ary n-dimensional torus-connected cycles network T CC(k, n) is an undirected graph that has 2nk n nodes. Each node a has a cluster ID c(a) = (a0 , a1 , . . . , an−1 ) and
a processor ID p(a) = pa , and the node consists of the pair (c(a), p(a)) where 0 ≤ ai ≤ k − 1
and 0 ≤ pa ≤ 2n − 1. Each node a has three neighbour nodes n1 (a), n2 (a) and n3 (a) as
follows:
n1 (a) = (c(a), (pa + (−1)pa ) mod 2n)
n2 (a) = (c(a), (pa − (−1)pa ) mod 2n)
n3 (a) = (a0 , a1 , . . . , (a pa /2 + (−1)pa ) mod k, . . . , an−1 , pa + (−1)pa )
If n = 1, each node a has degree two as n1 (a) = n2 (a). Otherwise, that is n ≥ 2, each
node has degree three. For any node a, the edges in Deﬁnition 1 (a, n1 (a)) and (a, n2 (a)) are
called internal while the edge (a, n3 (a)) is called external. If we delete all the external edges
from a T CC(k, n), the remaining graph consists of nk disjoint cycles. Each cycle consists of 2n
nodes. The cycle that includes a node a is denoted by C(a). In addition, if we contract each
of the nk cycles of a T CC(k, n) into one single node, we obtained a k-ary n-dimensional torus
(a.k.a. (k, n)-torus).
A 3-ary 2-dimensional torus-connected cycles network T CC(3, 2) is shown in Figure 1. For
example, the node (0, 3, 3) is adjacent to the two nodes (0, 0, 0) and (0, 0, 2) by internal edges,
and adjacent to the node (0, 2, 2) by an external edge.
In general, a path in a graph is represented by an alternate sequence of nodes and edges
a1 , (a1 , a2 ), a2 , . . . , ak−1 , (ak−1 , ak ), ak . The length of a path p is the number of edges included
in p; it is denoted by L(p). In the rest of this paper, we sometimes use the notations a → b
and a ❀ b to respectively express an edge (a, b) and a path from a to b.
In a T CC(k, n), for two distinct nodes s and d, we propose in the next section an algorithm
that solves the container problem: construct 3 paths between s and d that are mutually nodedisjoint except for s and d.
Lastly, a node-to-set disjoint paths routing algorithm in a k-ary n-dimensional torus has
been proposed by Gu and Peng in [9]. This result is summarised in the following theorem.
2183

The container problem in a TCC

A. Bossard and K. Kaneko

(0, 0, 3)
(0, 0, 2)
(0, 0, 0)
(0, 0, 1)

Figure 1: An example of a 3-ary 2-dimensional torus-connected cycles network T CC(3, 2).
Theorem 1. [9] In a (k, n)-torus, given any two nodes s and d, we can ﬁnd 2n mutually
node-disjoint paths s ❀ d of lengths at most n k/2 + 1 in O(n3 ) time.

3

Proposed algorithm

In this section, we describe the algorithm to solve the container problem for two distinct nodes
s and d in a T CC(k, n). Because each node in a T CC(k, 1) has only two neighbour nodes, it is
impossible to ﬁnd three disjoint paths. Therefore, we assume that n ≥ 2. In addition, we use
an algorithm that solves the container problem in an n-dimensional torus to ﬁnd 2n mutually
node-disjoint paths. If k = 2, then each node in the torus has only n neighbour nodes. Hence,
it is also impossible to ﬁnd 2n paths. Therefore, we assume that k ≥ 3.
According to the relative positions of s = (c(s), ps ) and d = (c(d), pd ), we divide the
algorithm into four cases as follows; in addition, the pseudo-code of the algorithm is given in
Algorithms 1 and 2.

3.1

Case 1

In this subsection, we discuss the case where d ∈ C(s) and d = n1 (s). The three mutually
disjoint paths are obtained in two steps as follows.
Step 1 In the cycle C(s), construct two disjoint paths from s to d.
Step 2 Construct the path s → n3 (s) → n1 (n3 (s)) → n3 (n1 (n3 (s))) → . . . → n3 (d) → d.
See Figure 2.

3.2

Case 2

In this subsection, we discuss the case where d ∈ C(s) and d = n1 (s). The three mutually
disjoint paths are obtained in eight steps as follows.

n3 (d)

s

n1 (n3 (s))

n1 (n3 (d))

d

n3 (s)

Figure 2: The three disjoint paths selected in Case 1.
2184

The container problem in a TCC

A. Bossard and K. Kaneko

d
s

n3 (d)
d

s

n3 (s )

n3 (s)

n3 (d )

Figure 3: The three disjoint paths selected in Case 2.
Step 1 In the cycle C(s), construct two disjoint paths from s to d.
Step 2 Select the edge s → n3 (s).
Step 3 Construct in C(n3 (s)) the shortest path n3 (s) ❀ s = (c(n3 (s)), pd ).
Step 4 Select the edge s → n3 (s ).
Step 5 Select the edge d → n3 (d).
Step 6 Construct in C(n3 (d)) the shortest path n3 (d) ❀ d = (c(n3 (d)), ps ).
Step 7 Select the edge d → n3 (d ).
Step 8 Construct in C(n3 (s )) the shortest path n3 (s ) ❀ n3 (d ). Figure 3 shows the three
disjoint paths constructed in this case.

3.3

Case 3

In this subsection, we discuss the case where d = n3 (s) (d ∈
/ C(s)). The three mutually disjoint
paths are obtained in ﬁve steps as follows.
Step 1 Select the edge s → d.
Step 2 Construct the path s → n1 (s) → n3 (n1 (s)) → n1 (n3 (n1 (s))) → . . . → n1 (d) → d.
Step 3 Construct the path s → n2 (s) → n3 (n2 (s)) → n1 (n3 (n2 (s))) → s = n2 (n1 (n3 (n2 (s)))).
Step 4 Construct in C(d) the path d ❀ d = n2 (n1 (d)) so that this path does not include
the node n1 (d).
Step 5 Construct the path d → n3 (d ) → n1 (n3 (d )) → n2 (n1 (n3 (d ))) → n3 (s ). The
three disjoint paths constructed in this case are illustrated in Figure 4.

3.4

Case 4

In this subsection, we discuss the case where d ∈
/ C(s) and d = n3 (s). The three mutually
disjoint paths are obtained in ﬁve steps as follows.
Step 1 In a k-ary n-dimensional torus, apply the node-to-node disjoint paths algorithm to
obtain a set of 2n mutually node-disjoint paths P between the source and destination
nodes c(s) and c(d).
Step 2 Let p (∈ P ) be the path that includes the edge c(s) → c(n3 (s)).
2185

The container problem in a TCC

A. Bossard and K. Kaneko

d
n1 (d)

s

d
n3 (s )
s
n3 (d )

Figure 4: The three disjoint paths selected in Case 3.
c(n3 (s))

p

c(n3 (d))

c(n3 (s))

q
c(s)

r
(a)

p
q

c(d)

c(n3 (d)) → c(d) ∈ p

c(s)

c(n3 (d))
c(d)

r
(b)

c(n3 (d)) → c(d) ∈
/p

Figure 5: Case 4: three disjoint paths between c(s) and c(d) in a (k, n)-torus.
Step 3 If p includes the edge c(n3 (d)) → c(d), select two paths q and r from P \{p} arbitrarily,
and go to Step 5. See Figure 5a.
Step 4 Let q (∈ P ) be the path that includes the edge c(n3 (d)) → c(d). Select a path r from
P \ {p, q} arbitrarily. See Figure 5b.
Step 5 Convert these three paths p, q and r into paths of a T CC(k, n) between s and d so that
they are mutually node-disjoint except for s and d. The three disjoint paths obtained are
shown in Figure 6.
C(n3 (s))
n3 (s)
s

C(n3 (d))

d
n3 (d)

C(s)

C(d)

Figure 6: Step 5 of Case 4: converting (k, n)-torus disjoint paths to T CC(k, n) disjoint paths.

4

Performance evaluation

In this section, we prove the correctness of the proposed algorithm and estimate its time complexity as well as the maximum length of the generated disjoint paths.
2186

The container problem in a TCC

A. Bossard and K. Kaneko

Algorithm 1 CONV(k, n, ρ = c0 → c1 → . . . → cλ [, pbeg ])
(0)

(1)

(n−1)

Input: A path ρ = c0 ❀ cλ in a (k, n)-torus, with cj = (cj , cj , . . . , cj
and one optional processor ID pbeg .
Output: A path (c0 , ·) ❀ (cλ , ·) in a T CC(k, n) according to ρ.
1: if pbeg undeﬁned then
(i)
(i)
2:
pbeg satisﬁes i = pbeg /2 and c0 − c1 = (−1)pbeg mod k;
3: end if
4: if L(ρ) = 1 then
5:
return (c0 , pbeg ) → n3 (c0 , pbeg )
6: else
(i)
(i)
7:
pnxt satisﬁes i = pnxt /2 and c0 − c1 = (−1)pnxt mod k;
SPR
8:
p0 (= p(n3 (c0 , pbeg ))) → p1 → . . . → pl (= pnxt ) := p0 ❀ pnxt ;
9:
q := CONV(k, n, c1 ❀ cλ , pnxt );
10:
return (c0 , pbeg ) → (c1 , p0 ) → (c1 , p1 ) → . . . → (c1 , pl ) → q
11: end if

) (0 ≤ j ≤ λ),

Lemma 1. For a source node s and a destination node d in a T CC(k, n) with k ≥ 3 and n ≥ 2,
the algorithm described in Section 3 generates three internally node-disjoint paths between s and
d of lengths at most max(2n − 1, 2k − 1) in O(n + k) time in Case 1.
Proof. The two paths constructed in Step 1 traverse the cycle C(s) in opposite directions; they
are thus disjoint except for s and d. Since the path constructed in Step 2 exclusively consists
of nodes outside C(s) except for s and d, it is disjoint with the two paths constructed in Step
1 except for s and d.
The lengths of the two paths constructed in Step 1 are equal to 2n − 1 and 1. The length
of the path constructed in Step 2 is equal to 2k − 1. Therefore, the maximum path length in
Case 1 is max(2n − 1, 2k − 1).
The time complexities of Step 1 and Step 2 are O(n) and O(k), respectively. Hence, the
total time complexity in Case 1 is O(n + k).
Lemma 2. For a source node s and a destination node d in a T CC(k, n) with k ≥ 3 and n ≥ 2,
the algorithm described in Section 3 generates three internally node-disjoint paths between s and
d of lengths at most 3n + 4 in O(n) time in Case 2.
Proof. The two paths constructed in Step 1 traverse the cycle C(s) in opposite directions; they
are thus disjoint except for s and d. Since the path constructed in Steps 2 to 8 exclusively
consists of nodes outside C(s) except for s and d, it is disjoint with the two paths constructed
in Step 1 except for s and d.
The sum of the lengths of the two paths constructed in Step 1 is equal to 2n. Since s and
d are not adjacent, the lengths of the paths are at most 2n − 2. The lengths of the sub-paths
constructed in Steps 3, 6 and 8 are at most n. Hence, considering the four external edges
selected in Steps 2, 4, 5 and 7, the length of the path constructed in Steps 2 to 8 is at most
3n + 4. Therefore, the maximum path length in Case 2 is 3n + 4.
The time complexities of Steps 1, 3, 6 and 8 are all O(n) while the time complexities of the
other steps are all O(1). Hence, the total time complexity required in Case 2 is O(n).
Lemma 3. For a source node s and a destination node d in a T CC(k, n) with k ≥ 3 and n ≥ 2,
the algorithm described in Section 3 generates three internally node-disjoint paths between s and
d of lengths at most max(2n + 7, 2k − 1) in O(n + k) time in Case 3.
2187

The container problem in a TCC

A. Bossard and K. Kaneko

Algorithm 2 TCC-N2N(k, n, s = (c(s), p(s)), d = (c(d), p(d)))
Input: A T CC(k, n) and two distinct nodes s, d.
Output: Three internally node-disjoint paths s ❀ d.
SPR

Remark: ❀ denotes shortest-path routing inside a same cycle.
1: R := ∅; /* Result set */
2: if d ∈ C(s) then /* Cases 1 and 2 */
3:
R := R ∪ {s → d, s → n2 (s) → n2 (n2 (s)) → . . . → n1 (d) → d};
4:
if d = n1 (s) then
5:
R := R ∪ {s → n3 (s) → n1 (n3 (s)) → n3 (n1 (n3 (s))) → . . . → n3 (d) → d}
6:
else
7:
s := (c(n3 (s)), pd );
8:
d := (c(n3 (d)), ps );
SPR
SPR
SPR
9:
R := R ∪ {s → n3 (s) ❀ s → n3 (s ) ❀ n3 (d ) → d ❀ n3 (d) → d}
10:
end if
11: else if d = n3 (s) then /* Case 3 */
12:
R := R ∪ {s → d, s → n1 (s) → n3 (n1 (s)) → n1 (n3 (n1 (s))) → . . . → n1 (d) → d};
13:
s := n2 (n1 (n3 (n2 (s))));
14:
d := n2 (n1 (d));
15:
q := (d ❀ d) ⊂ (C(d) \ {n1 (d)});
16:
R := R ∪ {s → n2 (s) → n3 (n2 (s)) → n1 (n3 (n2 (s))) → s → n3 (s ) →
n2 (n1 (n3 (d ))) → n1 (n3 (d )) → n3 (d ) → q}
17: else /* Case 4 */
18:
P := TORUS-N2N(k, n, c(s), c(d)); /* Torus container algorithm */
19:
Find p ∈ P with (c(s) → c(n3 (s))) ⊂ p;
20:
q := ∅, r := ∅;
21:
if (c(n3 (d)) → c(d)) ⊂ p then
22:
{q, r} ⊂ P \ {p};
23:
p := CONV(k, n, p);
24:
q : (c(s), xq ) ❀ (c(d), yq ) := CONV(k, n, q);
25:
q := ((s ❀ (c(s), xq )) ⊂ C(s)) → q → (((c(d), yq ) ❀ d) ⊂ C(d));
26:
r : (c(s), xr ) ❀ (c(d), yr ) := CONV(k, n, r);
27:
r := ((s ❀ (c(s), xr )) ⊂ (C(s) \ q )) → r → (((c(d), yr ) ❀ d) ⊂ (C(d) \ q ));
28:
R := {p , q , r }
29:
else
30:
Find q ∈ P with (c(n3 (d)) → c(d) ⊂ q;
31:
r ∈ P \ {p, q}
32:
p : s ❀ (c(d), yp ) := CONV(k, n, p);
33:
p := p → (((c(d), yp ) ❀ d) ⊂ C(d));
34:
q : (c(s), xq ) ❀ (c(d), yq ) := CONV(k, n, q);
35:
q := ((s ❀ (c(s), xq )) ⊂ C(s)) → q ;
36:
r : (c(s), xr ) ❀ (c(d), yr ) := CONV(k, n, r);
37:
r := ((s ❀ (c(s), xr )) ⊂ (C(s) \ q )) → r → (((c(d), yr ) ❀ d) ⊂ (C(d) \ p ));
38:
R := {p , q , r }
39:
end if
40: end if
41: return R

2188

The container problem in a TCC

A. Bossard and K. Kaneko

Proof. The path constructed in Step 1 consists of an edge whose terminal nodes are s and d.
Hence, this path is disjoint with other paths except for s and d. The path constructed in Step
2 and the path constructed in Steps 3 to 5 visit distinct clusters except for clusters C(s) and
C(d). Moreover, the path constructed in Step 2 includes nodes s and n1 (s) in C(s), and it
includes d and n1 (d) in C(d). On the other hand, the path constructed in Steps 3 to 5 includes
s and n2 (s) in C(s), and does not include n1 (d) in C(d). Therefore, the path constructed in
Step 2 and the path constructed in Steps 3 to 5 are disjoint except for s and d.
The length of the ﬁrst s → d path constructed in Step 1 is equal to 1. The length of
the second s ❀ d path constructed in Step 2 is equal to 2k − 1. The length of the sub-path
s ❀ n3 (s ) constructed in Step 3 is equal to 5. The length of the sub-path d ❀ d constructed
in Step 4 is equal to 2n − 2. The length of the sub-path d ❀ n3 (s ) constructed in Step 5 is
equal to 4. Hence, the length of the path constructed in Steps 3 to 5 is 2n + 7. Therefore, the
maximum path length in Case 3 is max(2n + 7, 2k − 1).
The time complexities of Step 2 and Step 4 are O(k) and O(n), respectively. The time
complexities of the other steps are all O(1). Hence, the total time complexity in Case 3 is
O(n + k).
Lemma 4. For a source node s and a destination node d in a T CC(k, n) with k ≥ 3 and n ≥ 2,
the algorithm described in Section 3 generates three internally node-disjoint paths between s and
d of lengths at most k/2 n2 + ( k/2 + 4)n − 3 in O(n3 + kn2 ) time in Case 4.
Proof. The three paths p, q, and r of the (k, n)-torus obtained in Steps 1 to 4 are internally
disjoint: they only share the nodes c(s) and c(d). Therefore, the TCC paths obtained by
converting them in Step 5 traverse distinct clusters except for C(s) and C(d). The path that
visits C(n3 (s)) does not include any node of C(s) except s itself. Hence, for the remaining two
paths, two disjoint sub-paths can be constructed inside C(s). Similarly, the path that visits
C(n3 (d)) does not include any node of C(d) except d itself. Hence, for the remaining two
paths, two disjoint sub-paths can be constructed in C(d). Therefore, the three paths obtained
by conversion in Step 5 are mutually node-disjoint except for s and d.
If we apply in Step 1 the algorithm developed by Gu and Peng [9] to a (k, n)-torus, the
maximum length of the disjoint paths is n k/2 + 1 as recalled in Theorem 1. Then, the
maximum length of the three disjoint paths constructed in Step 5 is (2n − 2) + 1 + k/2 (n +
1) + (2n − 2) = k/2 n2 + ( k/2 + 4)n − 3, and it can be attained by the path that includes
neither the edge c(s) → c(n3 (s)) nor the edge c(n3 (d)) → c(d).
By Theorem 1, the time complexity of Step 1 is O(n3 ). The time complexities of Steps
2, 3 and 4 are all O(1) while the time complexity of Step 5 is O(kn2 ). Hence, the total time
complexity in Case 4 is O(n3 + kn2 ).
We can recapitulate this discussion into the following theorem.
Theorem 2. In a T CC(k, n) with k ≥ 3 and n ≥ 2, for a source node s and a destination node
d, the algorithm described in Section 3 generates three internally node-disjoint paths between s
and d of lengths at most k/2 n2 + ( k/2 + 4)n − 3 in O(n3 + kn2 ) time.

5

Empirical evaluation

We implemented the algorithm described in Section 3 using the Haskell functional programming
language. In order to inspect the practical behaviour of the proposed algorithm, we used this
implementation to solve 10,000 random instances of the container problem successively inside
2189

The container problem in a TCC
	

A. Bossard and K. Kaneko


































(n = 3)



	






k









(n = 6)







	










k

Figure 7: Maximum path length and average maximum path length with standard deviation
(left: n = 3, right: n = 6).
a three-dimensional and six-dimensional TCC (i.e. n = 3, 6) with 3 ≤ k ≤ 10. We measured
the maximum length of the generated paths. Results are shown in Figure 7. For reference, the
theoretical maximum path length is also represented.
We observe that the maximum path length recorded is getting more and more distant with
the theoretical upper bound estimated in Section 4, and thus that in practice the algorithm
performs signiﬁcantly better than the worst-case estimation.

6

Conclusions

In this paper, we have proposed a new algorithm that solves the container problem in a torusconnected cycles network. For an arbitrary pair of nodes s and d in a k-ary n-dimensional
torus-connected cycles network where n ≥ 2 and k ≥ 3, the algorithm constructs three disjoint
paths between s and d. The maximum length of the paths is k/2 n2 + ( k/2 + 4)n − 3.
The time complexity of the algorithm is O(n3 + kn2 ). Empirical evaluation has shown that
the proposed algorithm performs in practice signiﬁcantly better than the theoretical worst-case
estimation. Development of algorithms that solve the node-to-set and set-to-set disjoint paths
routing problems is interesting future work.

7

Acknowledgements

This study was partly supported by a Grant-in-Aid for Scientiﬁc Research (C) of the Japan
Society for the Promotion of Science under Grant No. 25330079.

References
[1] A. Aggarwal, J. Kleinberg, and D. P. Williamson. Node-disjoint paths on the mesh and a new
trade-oﬀ in VLSI layout. In Proceedings of the Annual ACM Symposium on Theory of Computing,
pages 585–594, Philadelphia, PA, USA, May 1996.
[2] A. Bossard. A set-to-set disjoint paths routing algorithm in hyper-star graphs. International
Journal of Computers and Their Applications, 21(1):76–82, 2014.
[3] A. Bossard and K. Kaneko. Node-to-set disjoint-path routing in hierarchical cubic networks. The
Computer Journal, 55(12):1440–1446, 2012.

2190

The container problem in a TCC

A. Bossard and K. Kaneko

[4] A. Bossard and K. Kaneko. The set-to-set disjoint-path problem in perfect hierarchical hypercubes.
The Computer Journal, 55(6):769–775, 2012.
[5] A. Bossard and K. Kaneko. Torus-connected cycles: an implementation-friendly topology for interconnection networks of massively parallel systems. In Proceedings of the International Symposium
on Advances of Distributed and Parallel Computing, pages 11–21, Vietri sul Mare, Italy, December
2013.
[6] A. Bossard and K. Kaneko. Set-to-set disjoint paths routing in hierarchical cubic networks. The
Computer Journal, 57(2):332–337, 2014.
[7] A. Bossard, K. Kaneko, and S. Peng. A new node-to-set disjoint-path algorithm in perfect hierarchical hypercubes. The Computer Journal, 54(8):1372–1381, 2011.
[8] M. Dietzfelbinger, S. Madhavapeddy, and I. H. Sudborough. Three disjoint path paradigms in star
networks. In Proceedings of the Third IEEE Symposium on Parallel and Distributed Processing,
pages 400–406, Dallas, TX, USA, December 1991.
[9] Q.-P. Gu and S. Peng. Fault tolerant routing in toroidal networks. IEICE Transactions on
Information and Systems, E79-D(8):1153–1159, 1996.
[10] Q.-P. Gu and S. Peng. Set-to-set fault tolerant routing in star graphs. IEICE Transactions on
Information and Systems, E79-D(4):282–289, 1996.
[11] Q.-P. Gu and S. Peng. Node-to-set disjoint paths problem in star graphs. Information Processing
Letters, 62(4):201–207, 1997.
[12] K. Kaneko. An algorithm for node-to-set disjoint paths problem in burnt pancake graphs. IEICE
Transactions on Information and Systems, E86-D(12):2588–2594, 2003.
[13] K. Kaneko and N. Sawada. An algorithm for node-to-node disjoint paths problem in burnt pancake
graphs. IEICE Transactions on Information and Systems, E90-D(1):306–313, 2007.
[14] K. Kaneko and Y. Suzuki. An algorithm for node-to-set disjoint paths problem in rotator graphs.
IEICE Transactions on Information and Systems, E84-D(9):1155–1163, 2001.
[15] K. Kaneko and Y. Suzuki. Node-to-set disjoint paths problem in pancake graphs. IEICE Transactions on Information and Systems, E86-D(9):1628–1633, 2003.
[16] L. Lipt´
ak, E. Cheng, J.-S. Kim, and S. W. Kim. One-to-many node-disjoint paths of hyper-star
networks. Discrete Applied Mathematics, 160:2006–2014, 2012.
[17] S. Peng and K. Kaneko. Set-to-set disjoint paths routing in pancake graphs. In Proceedings of
the IASTED International Conference on Parallel and Distributed Computing and Systems, pages
253–258, Dallas, TX, USA, November 2006.
[18] M. O. Rabin. Eﬃcient dispersal of information for security, load balancing, and fault tolerance.
Journal of the ACM, 36(2):335–348, 1989.
[19] Y. Saad and M. H. Schultz. Topological properties of hypercubes. IEEE Transactions on Computers, 37(7):867–872, 1988.
[20] Y. Suzuki and K. Kaneko. An algorithm for node-disjoint paths in rotator graphs. In Proceedings
of the Third International Conference on Parallel and Distributed Computing, Applications and
Technologies, pages 151–158, Kanazawa, Japan, September 2002.
[21] Y. Suzuki and K. Kaneko. An algorithm for node-disjoint paths in pancake graphs. IEICE
Transactions on Information and Systems, E86-D(3):610–615, 2003.
[22] Y. Suzuki and K. Kaneko. An algorithm for disjoint paths in bubble-sort graphs. Systems and
Computers in Japan, 37(12):27–32, 2006.
[23] Y. Suzuki and K. Kaneko. The container problem in bubble-sort graphs. IEICE Transactions on
Information and Systems, E91-D(4):1003–1009, 2008.
[24] Y. Suzuki, K. Kaneko, and M. Nakamori. Container problem in substring reversal graphs. In
Proceedings of the International Symposium on Parallel Architectures, Algorithms and Networks,
pages 563–568, Hong Kong, China, May 2004.

2191

