Procedia Computer Science
Volume 29, 2014, Pages 332–342
ICCS 2014. 14th International Conference on Computational Science

Modeling and Simulation Framework for Development
of Interactive Virtual Environments
Konstantin V. Knyazkov1 and Sergey V. Kovalchuk1
1

ITMO University, Saint-Petersburg, Russia
constantinvk@gmail.com, kovalchuk@mail.ifmo.ru

Abstract
The article p resents a framework for interactive virtual environ ments’ development for simu lation and
modeling of co mp lex systems. The framework uses system’s structural model as a core concept for
composition and control of simu lation-based scientific experiments not in terms of technological
processes or wo rkflo ws but in terms of do main-specific objects and their interconnection with in the
investigated system. The proposed framewo rk enables integration and management of resources
available within a cloud co mputing environment in order to support automatic simu lation management
and to provide the user with an interactive visual domain-specific interface to the system.
Keywords: simulation environment, workflow management, interactive workflow, system-level simulation

1 Introduction
Today computer-aided modeling and simulation serves as a powerful scientific tool, which can be
used to investigate complex system within d ifferent problem do mains. Th is stimu lates development of
modeling and simu lation tools to be considered as important issues of e-Science (Hey, Tansley, &
Tolle, 2009) area focused on technological support of scientific research. Contemporary simulation
tasks are often characterized by comp lex structure and require d ifferent resources (software, hardware,
data etc.) to be integrated within a single solution. Co mmon approach for co mposite application
development usually exp loits the workflows (WF) concept to describe dependencies between different
elements of the application (Gil, et al., 2007). To support the development and usage of WFs there
exist a lot of wo rkflo w management systems (Yu & Buyya, 2005). Still the direct workflo w
development and support may beco me a rather difficult task for end users as they often are domain
specialists with a lack of technological background (McPhillips, Bowers, Zinn, & Ludascher, 2009) .
As a result the development of conceptual and technological toolbo x for support of simulat ion -based
scientific experiments is one of the urgent issues of e-Science (see e.g. projects (McPhillips, Bowers,
Zinn, & Ludascher, 2009) (Gil, et al., 2011) (Gubala, Bubak, Malawski, & Rycerz, 2006)), but the
general approach for appropriate do main -specific support isn’t defined yet. On the other hand the
simu lation-based experiments often define the need of dynamic changes of simu lation parameters.

332

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.030

Modeling and Simulation for Interactive Virtual Environments

K. Knyazkov, S. Kovalchuk

This causes a concept of computational steering (Mulder, van Wijk, & van Liere, 1999) to appear as
an approach to manage interactive simu lation process. This approach is extended in direction of
dynamic measurements' processing within the Dynamic Data Driven Applications Systems (DDDAS)
paradigm (Darema, 2004). Th is paradig m allo ws real-time measurements data to be dynamically
incorporated into a simulat ion process. And moreover it allows application to dynamically steer t he
measurement process. Additionally the computational steering approach takes into account the ability
of the system to provide the user with interactive visualization (see e.g. project (Ribicic, Waser, Fuchs,
Bloschl, & Gro ller, 2013)) as a way to perform the user interaction within corresponding problem
domain with a natural interpretation of visualized objects ’ meaning. The interactive visualization
brings a set of additional issues to be managed (Doleisch, 2007) including focus and context analysis,
iterative and interactive features’ specificat ion, mu ltiple views’ management etc. Nevertheless
considering a scientific platform for simu lation-based experiments, two coupled processes need to be
developed in a tight relat ionship in order to provide the end user with fu ll support: a) the simulation
process, presented as a WF structure, is to be managed automatically, providing the user with do main specific interaction toolbo x; b) domain-specific interactive visualization needs to be managed in a
general way to support semantically arranged data representation in a cognitive way wh ich is easily
understandable to the end user. In this paper we present conceptual and technological framework
which enables develop ment of such platforms using semantically supported description of the system.
It allows synchronous management of the mentioned coupled processes to be performed. Th is
framework is supposed to make a shift toward system-level exp lorat ion (Foster & Kesselman, 2006)
instead of common used WF-based approach by allo wing the user to manage interactively both
system’s structure, simu lation process and analyze the visualized simu lation results in a natural way
without deep technological background required.

2 Interactive Framework for Modeling and Simulation
2.1 Requirements
Interactive virtual environ ment provides the user with the required facilities for deep immersion
into simulat ion-based scientific experiments in a distributed co mputing environ ment. Th is statement
defines the main goals of this work:
x
x
x
x

Shift fro m imperative process-centric task description approach (wh ich is represented in
classic workflow formalism) to declarative system’s model description.
To hide complex technical issues from the user (caused by complexities of the e-Science
domain, e.g. heterogeneity, large-scale data) by technical and domain knowledge
acquisition and automating it's processing with semantic technologies.
To provide the user with a convenient interactive environ ment exploit ing all the benefits
of contemporary human interface devices (HID).
Give the user a rich cognitive v isualization environment where system’s elements are
represented with abstract visual metaphors.

Considering the defined idea of the platform for visual interactive scientific experimentation
several requirements can be defined:
1.

Framework structure. The developed technology should be able to manage interactively
the following artifacts during the simulat ion process: a) semantic description of the
system’s structure; b) composite application; c) data, obtained fro m external sources and
produced during the simulation process; d) visual scene, representing the explored system.

333

Modeling and Simulation for Interactive Virtual Environments

2.

3.

4.

5.

K. Knyazkov, S. Kovalchuk

Semantic struct ure. The system's structural model should be defined and managed by the
end user. In order to support the user within these procedures the domain semantic should
be used to hide the technological comp lexity of co mposite application development (in a
form of WF). As a result the user should be able to change the system’s structure during
the simulation process.
Dynamic experimentation. The user should be able to change parameters of simu lation
process during the execution of constructed composite application a) by explicit definition
of the parameters; b) by interaction within the visualized scene. These changes should
have immediate affect onto the data which is used to build the visualization scene.
Data representation. Available data should be dynamically comb ined to build the proper
visual scene presented to the user. The visualization space should give the user ability to
interact with the scene i.e. explore the represented data; modify system’s structure or
parameters of simulation.
User interaction. User analysis should be supported by interactive visualization with
ability to change scenario of system’s develop ment. Moreover actions performed by the
user should be taken into account by the workflow management system in order to gain
high reactivity on the next user’s action (using predict ion of the user activity on
management of ensemble of possible scenarios).

2.2 Conceptual approach
The requirements mentioned above define the conceptual structure and general arch itecture
considered within this and following sections.
In order to reach the goals and meet the requirement we propose a framewo rk for interactive
virtual environment development. Framework is a domain-independent set of technologies and tools.
After it is deployed and filled with domain-specific elements (data, knowledge, software) it turns into
interactive environment. Like a distributed operating system the framework provides an access to
hardware, software and data through the user interface (UI). Using the UI the user can compose
structural system’s model and run it on the high performance co mputing hardware. User-side hardware
includes different input and output devices connected to the environment. Structure of the virtual
environment based on the framework is presented in the figure 1.
The framework core is composed of several layers.
1. Formal knowledge layer contains tools and technologies for environ mental e lements’
description and for description of theirs integration process. Knowledge represented in imperative and
declarative form is processed at this layer. For examp le, before resources can be integrated into the
environment, they should be described and all the information such as access credentials, functional
characteristics should be provided in a formal form.
2. Communication layer of the framewo rk provides capability to connect different elements of the
environment (software at runtime and in batch mode), to deliver data fro m sources to consumers. Data
representation (formatting, protocols) is performed here. At this layer it is possible to fo rm workflo ws
which can be run in batch or interactive mode.
3. Execution layer provides capability to use elements of the environment. Relying on the formal
knowledge, the execution layer performs actions in order to harness computational resources and
software. At this layer it is possible to run composite applications in distributed environment.
4. Semantics layer is the second descriptive layer along with the formal knowledge layer. Using
the semantic declarations, different software and co mplex scenarios can be connected correctly to
solve domain problems.
5. Meta-level simulation engine forms the central part of the framework. This is an active entity
which orchestrates the work with system’s model and execution of workflows. Using semantic data
the engine glues all elements of environ ment together: it interprets system’s model, interacts with user
through UI, and manages execution of a set of workflows by communicating with WMS.

334

Modeling and Simulation for Interactive Virtual Environments

K. Knyazkov, S. Kovalchuk

Figure 1: Scheme of the interactive virtual environment built using the framework

All o f the presented layers together allow integration and consolidation of all the external resources
into one distributed environment with united interface. User’s resources are perceived: as ordinary
resources, which can be used within a workflow’s execution to deliver interactive software to the user
(e.g. execution of Matlab package on a user’s PC); as a connection point for input and output devices
(to create a virtual environment). Nu mber o f user’s devices is not limited: user can view and interact
with visualization process on a touch table, modify structural system model on a tablet PC and run
interactive data processing software on a desktop.

2.3 User Interaction
All user interaction facilities within the framework are g rouped into two perspectives. Structural
system’s model perspective is a special environment for creation o f system’s models. This perspective
contains a workspace and a toolbox with virtual objects which were prepared in advance. Within the
perspective it is possible to move objects fro m toolbo x to workspace, specify values of their
properties, and set connections between objects. Objects being instantiated became active, and actions
associated with them became accessible.
The second perspective represents the visual virtual environment where all the do main-specific
elements related to task can be projected. Each type of object or data gets a proper visual
representation depending on their semantic description. For example , a data file with an urban road
map will be presented as a image visualized automatically using certain visualization software.
Below the list of interaction methods accessible to user through both perspectives is presented:
1.
2.
3.
4.
5.
6.

Object’s properties modification before simulation and in runtime;
System’s structure modification before simulation and in runtime;
Controlling model time by changing speed of simulation, pausing, resuming;
Moving user’s focus in model time and in parameter space;
Changing the view scale in case of multi-scale models;
Applying domain-specific actions available in interactive simulation packages.

335

Modeling and Simulation for Interactive Virtual Environments

K. Knyazkov, S. Kovalchuk

Some positions of the list require description. Do main -specific actions available to the user
contain: (a) interactive capabilities already existing in visualization software packages, (b) interactive
capabilit ies which exist only in simu lation packages without a visual abstraction, (c) high-level
complex actions. In the first two cases it is presupposed that the simu lation software already has
interactive interface and can be used in computational steering scenario. The last case is provided by
formalizat ion and automation of low-level actions. For examp le, “shut off a road” action in traffic
modeling scenario could be already implemented in traffic visualization software (a). This action
could be supported by simulation package and should be reflected in v irtual environment during its
implementation (b). And in case if we have separated batch simulat ion package and map editor, th is
action can be emulated by creation of automated map modification procedure which will at first
invoke map editor and then simulation package.
User can engage in the simulat ion and change the scenario during runtime by changing parameters
values, applying domain -specific actions in timescale of a model. For example, in application of urban
flood simulation the user can investigate different scenarios of evacuation in a city by simply closing
different groups of roads in t ime. It should be noted that this capability requires providing the
advanced provenance service which will track all the user’s actions in order to re store all the history
which led to certain simu lation result. Other metaphor wh ich can be imp lemented using the framework
is taking control of model’s element by the user in time and space. For agent-based models this
abstraction is native: the user projects his own behavior into virtual environment. E.g. in case of
evacuation simulation the user can take control of one agent and try to evacuate.

Figure 2: Branches of system’s state and a user’s focus (circle)

Work with ensemble runs and control of parallel branches of parameter sweep are important
features in the interactive simu lation-based experiments. User’s actions at runtime change the state of
the system. Moving backward in time or cancelling the actions are usually not supported in simulation
packages. Fast switch between branches of parameter sweep will increase the environment’s
interactivity. In this case automatic support can be provided in order to optimize reactiv ity of the
system. Let the state of the model to be characterized by two parameters X and Y (see the figure 2).
User can change values of the parameters interactively. At the mo ment of value’s change the system
can automatically start two additional branches of simulat ion with other values of X fro m its do main.
This will provide the capability for the user to move the focus in X space later without restarting the
model. Advanced scenario of the resource allocation here can be the fo llowing. The user has a pool of
resources which start running the model in parallel. The state of parallel models is the same. During
the interaction models acquire different state in order to provide the user with wide space for
parameter study.
The basic structure of the user interface within the interactive simulat ion environ ment is presented
in the figure 3. On the left side of the scheme there are software packages being executed in a
distributed computational environ ment. Soft ware packages and data are projected to the visual
environment.

336

Modeling and Simulation for Interactive Virtual Environments

Figure 3: Scheme of the user interface

K. Knyazkov, S. Kovalchuk

Figure 4: Scheme of the framework’s architecture

2.4 Framework Architecture
Technological background. Interactive simulation framework is built on the top of several
technologies developed in e-Science Research Institute with participation of authors:
1.

Cloud computing platform CLAVIRE (CLoud Application VIRtual Env iron ment), which
enable execution of composite applications defined in a form of Abstract WFs (Knyazkov,
Kovalchuk, Tchurov, Maryin, & Boukhanovsky, 2012). Th is platform provides high-level
knowledge-based access to computational infrastructure and supports domain-specific
definition of software calls which are translated into executable form automatically.

2.

Interactive WF (IWF) (Knyazkov, Nasonov, Tchurov, & Boukhanovsky, 2013) is a
technology which extends basic WF, executed within CLA VIRE with b locks which
dynamically exchange data during the execution. This technology forms the basis for
interaction between simu lation and visualization tools as well as imp lementation of the user
interaction scenarios.

3.

Virtual Simulation Objects (VSO) (Kovalchuk, Smirnov, Kosukhin, & Boukhanovsky, 2012)
is a concept and technology which uses system-level semantic description of the objects
being simu lated to generate WFs within CLA VIRE automat ically. Being based on the
conceptual hierarchy corresponding to the general structure of e-Science simu lation tasks it
can be used to develop high-level user-friendly representation of simulat ion tasks and
obtained results.

Co mbination of such technologies allows developing knowledge-based solutions for simu lationbased exploration o f co mp lex systems (Smirnov, Kovalchuk, & Boukhanovsky, 2013). Within the
presented work we are trying to develop general purpose framework for build ing such systems. Figure
5 shows basic structure of main b locks of this framework based on technologies mentioned above. The
framework support interaction with the user, v isualization and control of external resources. The VSO

337

Modeling and Simulation for Interactive Virtual Environments

K. Knyazkov, S. Kovalchuk

technology is extended to support dynamic (re -)building of system’s structural model, arrange a model
state with related data according to domain semantics, and correct representation of system’s state
during WF management. Extended IWF technology controls simultaneously the user interaction
scenarios, composite application’s execution and external data sources.
Visualization
tools

Composite
application

Model state

Knowledge base

User
interaction

Interactive WF
interpretation

VSO processing

Model building

Resources control

External data
sources

Structural model

VSO monitoring

Figure 5: Basic technological architecture

Architecture scheme of the framework is depicted in the figure 4. Th is scheme shows the multilayered structure of the framework core. Co mponents of the scheme are described belo w in order of
attachment to the layers of the framework core.
Formal knowledge layer. Execution of software in a distributed computational environment
requires formal descriptions of workflo ws, software packages and resources. Workflow description in
the CLA VIRE platform is represented by the scripts written in EasyFlow language (DSL). Such
description carries the defined domain-specific simulat ion scenario in a form of declarative
knowledge. Software packages are described by scripts in EasyPackage DSL. The description includes
general information about the package, declaration of the high -level input parameters and procedures
of transformation to low-level format-dependent input files. Along with information about input
parameters, description contains similar informat ion on output parameters and a section of execution
parameters (co mmand line, paramet ric performance model) and commun ication ports of the package.
So, all the formal knowledge on how to process a package and commun icate with it is sto red in the
description. Resources are described according to the same approach – by text files. These three
components are responsible for storing of knowledge represented in corresponding descriptions:
Workflow Base, Package Base, Resource Base.
Communication layer. Co mmun ication is performed within the environ ment in two ways:
interactive commun ication between elements through the network, in formation exchange in batch
mode. The second way is based on the classical WMS facilities wh ich allow to handle dat a and to run
software in distributed environment. The CLA VIRE’s package description mechanis ms enables the
unified package interface declarat ion which allows to connect different packages together seamlessly
at the workflow level. Another way of co mmunication is based on the capability of software to
communicate at runtime using network. It is provided within the extended IWF model. Interactive
software packages can work in a network environ ment due to declared co mmunicat ion technologies in
a package description.
The important feature of a virtual environ ment is flexib le co mmunicat ions which are set up by
dynamic switching. The role of connection manager is performed by meta-level simulat ion engine (see
below).
Execution layer. Workflow management system forms a large part of the framework. It is
represented in a scheme with three blocks. Resource Controller provides a direct access to different
types of resources. Workflow enactor processes single tasks and control their execution on the
resources through resource controllers. Workflow manager service interprets composite applications
defined in terms of Abstract Workflows into Concrete form.

338

Modeling and Simulation for Interactive Virtual Environments

K. Knyazkov, S. Kovalchuk

Semantic layer. The knowledge base contains a semantic description of the domain in form of
VSO. Using the formal knowledge about software, scenarios and data, the semantic description
integrates all of these parts into semantic structures – virtual objects.
Meta-simulation engine. Meta-simulat ion engine is a service provid ing backend functions to the
user interface through session mechanism. Engine acts as a mediator between the user and a
computational environ ment. It translates the user’s actions to technical procedures in terms of
workflows. So, an action made in the user interface may require a single package run, a workflow run,
and communicat ion with an interactive package accord ing to IWF technology. In this way one session
may require many workflo ws to run. So, the meta-simu lation engine is in charge of: VSO’s
interpretation, tracking of user’s actions, running of workflo ws, management of currently running
workflows using CLAVIRE API.

3 Application
The proposed approach has been tested in a task of agent-based urban traffic simu lation. The test
case application includes several software packages. There are several software utilities: map format
converter, road graph separation software for distributed simu lation case, batch map and population
data visualization package, map editor with GUI. Traffic demand simu lation package relies on a
statistical data and generates agents with their indiv idual daily act ivities. Agent-based traffic
simu lation package can be coupled with visualization package or run separately in d istributed mode
(in order to achieve high performance). Simulat ion package is configured by classes of age nts
participating in traffic and their amount. Interactive visualization software provides the user interface
and supports touch screen devices. Visualization software coupled with simulation provides a function
of road closing at runtime.
The set of accessible application scenarios contains: traffic dynamics simu lation in a city with
interactive closure of roads, investigation of traffic load in case of different scenarios of settlement,
evaluation of different evacuation scenarios, etc.
The software packages were installed to the CLA VIRE p latform and were semantically described
using VSO technology with special tool – “VSO editor”. St ructural system’s model for that
application contains the follo wing objects: City in frastructure, Virtual society, Vehicles, Traffic
dynamics. City infrastructure is characterized by road network map and map of buildings, wh ich are
extracted fro m files in OpenStreetMap format. Virtual society object describes population liv ing in
city. This object requires statistics data about dwelling of the simu lated area. Vehicles represent a
hierarchy of agents which take part in an urban traffic. Each class of agent in a model is represented in
a single object in VSO with its properties and models.
For interpreting of the system’s model “VSO Workspace” was used. It is a web -application which
can be used to create a system fro m the existing set of objects. The scheme of structural system’s
model for the traffic simulat ion application is depicted in the figure 6. After interpretation the
workflow script in EasyFlow language is generated and transferred to the CLA VIRE p latform.
Simulation of traffic can run with interactive visualization software on a user’s PC or on a touch table.
The implemented system provides the following interactive capabilities:
x
x
x

Modification of the structural system’ model by adding and removing of objects,
changing connection between objects. For examp le, addition of new agents’ classes,
change of a simulation scenario.
Changing data by using of external editors, e.g. JOSM for OpenStreetMap files.
Changing objects’ parameters and models. For examp le, traffic demand model can be
changed in the object “Society”. Default daily act ivity-based agent behavior model can be
changed in case of “bus” agents to timetable-based model.

339

Modeling and Simulation for Interactive Virtual Environments

x
x

K. Knyazkov, S. Kovalchuk

Visualizat ion of input data using software packages in CLA VIRE. For e xamp le,
visualization of population data with Gnuplot software.
Interactive visualizat ion coupled with simulat ion. Visualization supports: model’s time
control actions (pause, change speed, restart etc.), closure of roads, changing the visibility
for different layers of the map (map, road network, agents).

Figure 6: System’s model for a traffic simulation application

340

Modeling and Simulation for Interactive Virtual Environments

K. Knyazkov, S. Kovalchuk

4 Conclusion
The shift to a system-level simu lation concept based on the hybrid models integrated into one
environment requires new tools and technologies for the end users. In this work we propose the
framework which can be used to build interactive virtual environments for such simulations. The
framework relies on several conceptual parts: workflow management with the support of interactive
workflow model, semantic descriptions for the environ ment’s elements, visualization and interaction
facilit ies. Implementation of the proposed framework applicab le as a general purpose solution is an
ongoing work. Nevertheless parts of the proposed framework were used for develop ment of several
research solutions including showed traffic applicat ion and marine ob jects application (Kovalchuk,
Smirnov, Kosukhin, & Boukhanovsky, 2012). Imp lementation of the integrated visual environment
and development of the advanced meta-simulation engine wh ich provides transparent workflows’
management and intelligent user support will be a next step of our research.
Acknowledgements: Th is work was financially supported by the Govern ment of the Russian
Federation, Grant 074-U01.

References
Darema, F. (2004). Dynamic data driven applications systems: A new paradig m for application
simu lations and measurements. In Computational Science - ICCS 2004 (Vo l. 3038, pp. 662-669).
Springer Berlin Heidelberg.
Doleisch, H. (2007). SimVis : Interactive v isual analysis of large and time -dependent 3D
simulation data. IEEE Winter Simulation Conference, (pp. 712-720).
Foster, I., & Kesselman, C. (2006). Scaling system-level science: Scientific explorat ion and IT
implications. IEEE Computer , 39 (11), 31-39.
Gil, Y., Deelman, E., Ellisman, M., Fahringer, T., Fo x, G., Gannon, D., et al. (2007). Examining
the Challenges of Scientific Workflows. IEEE Computer , 40 (12), 24-32.
Gil, Y., Ratnakar, V., Kim, J., Gonzalez-Calero, P., Groth, P., Moody, J., et al. (2011). W ings:
Intelligent Workflo w-Based Design of Computational Experiments. IEEE Intelligent Systems , 26 (1),
62-72.
Gubala, T., Bubak, M., Malawski, M., & Rycerz, K. (2006). Semantic -Based Grid Workflo w
Composition. Lecture Notes in Computer Science , 3911/2006, 651-658.
Hey, T., Tansley, S., & Tolle, K. (2009). The fourth paradigm: data-intensive scientific discovery.
Knyazkov, K. V., Kovalchuk, S. V., Tchurov, T. N., Mary in, S. V., & Boukhanovsky, A. V.
(2012). CLA VIRE: e-Science infrastructure for data-driven computing. Journal of Computational
Science , 3 (6), 504-510.
Knyazkov, K. V., Nasonov, D. A., Tchurov, T. N., & Boukhanovsky, A. V. (2013). Interactive
Workflow-based Infrastructure for Urgent Computing. Procedia Computer Science , 18, 2223-2232.
Kovalchuk, S. V., Smirnov, P. A., Kosukhin, S. S., & Boukhanovsky, A. V. (2012). Virtual
Simu lation Objects concept as a framework for system-level simu lation. IEEE 8th International
Conference on E-Science (e-Science) , 1-8.
McPhillips, T., Bowers, S., Zinn, D., & Ludascher, B. (2009). Scientific workflow design for mere
mortals. Future Generation Computer Systems , 25 (5), 541-551.
Mulder, J. D., van W ijk, J. J., & van Liere, R. (1999). A survey of co mputational steering
environments. Future generation computer systems. , 15 (1), 119-129.
Ribicic, H., Waser, J., Fuchs, R., Bloschl, G., & Groller, E. (2013). Visual Analysis and Steering
of Flooding Simu lations. IEEE Transactions on Visualization and Computer Graphics , 19 (6), 10621075.

341

Modeling and Simulation for Interactive Virtual Environments

K. Knyazkov, S. Kovalchuk

Smirnov, P. A., Kovalchuk, S. V., & Boukhanovsky, A. V. (2013). Knowledge-Based Support for
Co mplex Systems Explorat ion in Distributed Problem Solving Environments. Communications in
Computer and Information Science , 394, 147-161.
Yu , J., & Buyya, R. (2005). A Taxonomy o f Workflow Management Systems for Grid Co mputing.
Journal of Grid Computing , 3 (3-4), 171-200.

342

