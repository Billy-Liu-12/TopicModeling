Procedia Computer Science
Volume 29, 2014, Pages 453–464
ICCS 2014. 14th International Conference on Computational Science

Study of the Network Impact on Earthquake Early
Warning in the Quake-Catcher Network Project
Marcos Portnoi, Samuel Schlachter, and Michela Taufer
Department of Computer and Information Sciences,
University of Delaware Newark, DE, 19716
mportnoi@udel.edu, saschlac@udel.edu, taufer@udel.edu

Abstract
The Quake-Catcher Network (QCN) project uses the low-cost sensors, i.e., accelerometers attached to volunteers’ computers, to detect earthquakes. The master-worker topology currently
used in QCN and other similar projects suﬀers from major weaknesses. The centralized master
can fail to collect data if the volunteers’ computers cannot connect to the network, or it can
introduce signiﬁcant delays in the warning if the network is congested. We propose to solve
these problems by using multiple servers in a more advanced network topology than the simple
master-worker conﬁguration. We ﬁrst consider several critical scenarios in which the current
master-worker conﬁguration can hinder the early warning of an earthquake, and then integrate
the advanced network topology around multiple servers and emulate these critical scenarios in
a simulation environment to quantify the beneﬁts and costs of our proposed solution. By using
metrics of interest that have a clear scientiﬁc meaning for the scope of the QCN project, we
show how our solution can reduce the time to detect an earthquake from 1.8 s to 173 ms in
case of network congestion and the number of lost trickle messages from 2,013 to 391 messages
in case of network failure.
Keywords: Quake-Catcher Network (QCN) project; Volunteer Computing; BOINC (Berkeley Open
Infrastructure for Network Computing)

1

Introduction

When an earthquake takes place, it creates two seismic waves, called P- and S-waves, that
propagate outward from the hypocenter (i.e., the location that an earthquake starts beneath
the surface of the Earth) in a spherical pattern. The S-wave, or secondary wave, is the slower
of these two waves, but is also the more powerful and destructive [1]. Early detection of the
S-wave and prompt warning is vital to save lives. The Quake-Catcher Network (QCN) project
uses low-cost sensors in accelerometers inside or attached to volunteers’ computers to monitor
earthquakes across regions such as California and New Zealand. QCN has been proven to
be a cost eﬀective and promising solution to earthquake detections [2, 3]. QCN connects the
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.041

453

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

volunteers’ computers in a master-worker topology: the accelerometer captures the seismic
waves and a client on the volunteer’s computer sends the seismic data to the QCN server. The
server quantiﬁes the vibration eﬀect at the computers’ location in terms of the P- and S-waves.
The time interval between the two waves grows as the distance from the earthquake hypocenter
increases. Ideally, the server should promptly capture the faster wave (P-wave) and alert the
population so that the time between the warning and the second S-wave is maximized. To meet
this requirement, a QCN server should be able to analyze seismic data and make decisions in
real-time. There are, however, two additional latency components involved in this process: (1)
the processing time of events, during which seismic events are measured by the accelerometers;
and (2) the communication latency, during which the seismic data is delivered to the QCN
server. The combination of these latency components might delay the delivery of the observed
seismic event to the server. If, for instance, the latency is suﬃciently high, the server might
perceive a seismic event too late in time to trigger safety measures eﬃciently. The failure of the
network to connect volunteers’ computers to the server can have even more catastrophic impact
on the earthquake detection and warning, as it cuts oﬀ the regions in which accelerometers are
capturing the waves from the server.
In this paper, we study critical scenarios in which the simple master-worker topology currently used in QCN fails to alert the public to the imminent danger or engage in additional
safety measures (e.g., activating backup systems, alerting ﬁrst-response teams, actuating in
power and gas lines). Speciﬁcally, we show how the existing QCN cyber-infrastructure does
not support any self-healing techniques when the accelerometers and network are disrupted by
the earthquake. We propose to solve the problem by using a more advanced topology than the
simple master-worker topology by using multiple servers. We integrate the new topology with
its multiple servers into a simulation environment that allows us to quantitatively assess both
eﬀectiveness and cost of the new QCN cyber-infrastructure. The contributions of this paper
are as follows:
• We design and implement a simulation environment that allows us to generate critical
earthquake scenarios and measure the costs of multiple accelerometers interconnected
through a more advanced topology than a simple master-worker topology.
• We deﬁne several critical earthquake scenarios, show the problems with the current QCN
structure, and discuss how to solve these problems with advanced topologies and multiple
servers.
• We test the scenarios and measure the beneﬁts and costs of our solution for diﬀerent
earthquake scenarios.
This paper is organized as follows: Section 2 discusses related work and background; Section 3 describes our simulation environment; Section 4 presents the critical scenarios and the
impact of our solution on earthquake early warning; and Section 5 concludes this paper.

2
2.1

Background and Related Work
Volunteer Computing

Volunteer computing (VC) [4] is a distributed computing paradigm where volunteers donate
the idle compute time and storage of their personal computers or laptops to scientiﬁc project.
VC projects are based on a master-worker topology using a single server and tens of thousands
of volunteer computers (also called clients) connected to the Internet. Volunteers specify what
454

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

percentage of computing power, disk storage, and connection frequency are actually donated to
VC projects. Clients are autonomous and are responsible for initiating communication with the
server. Through this communication, clients request new jobs or return results to the server.
Volunteer computing has an enormous potential to advance scientiﬁc research, especially considering the large number of people around the world who have access to a computer and an
Internet connection. VC is also a viable option for emerging initiatives that seek the advancement of science but do not have the high-performance computing resources to pursue their
objectives.

2.2

QCN and BOINC

The Quake-Catcher Network (QCN) cyber infrastructure monitors earthquakes on a large scale
by using volunteer computers. QCN is powered by the BOINC (Berkeley Open Infrastructure
for Network Computing) software [5]. A BOINC client in QCN controls the accelerometer in
the volunteer’s computer that is use to monitor and capture seismic motions. Every time strong
ground motion is detected by the accelerometer, the BOINC client sends a package called trickle
message to the QCN server. The data contained in the trickle message must be reliable and
quickly transferred to the server so that possible earthquakes can be identiﬁed promptly and
the aﬀected population alerted. Thus, the QCN requires low data transfer latency components
(< 4 seconds), high scalability (> 100,000 accelerometers), and low transfer rate of erroneous
earthquake-like vibrations (< 0.1%).

2.3

QCN and other Volunteer Computing Simulators

In a ﬁrst attempt to study and improve the QCN cyber-infrastructure, we used the EmBOINC
(Emulator of BOINC Projects) simulator [6] and adapted it for the QCN requirements [7].
Speciﬁcally, we modiﬁed EmBOINC to incorporate trickle messages by creating a trickle object
that contains the time it was created, the result whose execution led to its creation, and all
the XML data that makes up the actual communication with the QCN server. Each simulated
client with its accelerometer maintains a list of pending trickle messages that are generated.
Communication between the QCN clients and the emulated QCN server is modeled in a highlevel way (e.g., via direct calling of PHP commands). Therefore, network transmission protocols
are not used, the channel is always reliable, and as a result, the impact of transmission protocols
is not translated into the simulation results. Moreover, the simpliﬁed network supports only
single-master multiple-workers topologies. All these aspects prevented us from modeling and
studying the critical scenarios pretended in this paper with the modiﬁed version of EmBOINC
presented in [7]. Other VC simulators are available, among other SimGrid [9], SimBOINC [9],
and SIMBA [10], but none enables the simulation of a multi-server topology and integrates
advanced topologies that are needed for our study.

2.4

Other Network Simulators

In the network community, there have been several eﬀorts to design and implement network
simulators; NS-2 1 , NS-3 2 , OMNET++ 3 , OPNET 4 , and Qualnet 5 are among the most
1 http://www.isi.edu/nsnam/ns/
2 https://www.nsnam.org/

3 http://www.omnetpp.org/
4 http://www.opnet.com/

5 http://web.scalable-networks.com/content/qualnet/

455

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

well-known and used in the community. These simulators were not considered for the study
of network aspects of QCN due to their intrinsic complexity. NS-2 and NS-3 are open-source,
discrete event simulators targeted at network research. Both versions include a vast array
of computer network components; research for QCN requests only a subset of those components, mainly from a high-level point of view of a computer network. Our simulation tool,
described in this paper, oﬀers this high-level point of view while hiding unnecessary complexity from the QCN researcher. OMNET++ simulator, designed primarily for use in simulation
of computer networks, is a discrete event environment programmed in C++. When building
simulations with OMNET++, the user must pay attention to low-level network components
such as queues, classiﬁers, and interfaces. Again, our simulation provides the network mechanisms for the QCN researcher, at the same time hiding most of the complexity, allowing for a
high-level view of the network while maintaining realistic models of the earthquakes and underlying networks. OPNET is a commercial simulator that provides several modules for network
simulation, comprising a set of protocols and network elements. Due to its complexity and
set of features, OPNET adds unnecessary diﬃculty to the study of QCN. Finally, QualNet, a
commercial network simulator, oﬀers a graphical user interface to build topologies and deﬁne
parameters. Similarly to OPNET, the closed source aspect of this product may be incompatible
with QCN and BOINC initiatives for research.

3

QCN Simulation Environment

Our simulation environment allows us to study the QCN cyber-infrastructure including an advanced topology and multiple QCN servers that support each other in case of network failures
or overload. In particular, our environment is capable of constructing topologies in which accelerometers are connected to multiple QCN servers via any number of links and intermediate
network nodes. The environment supports dynamic behavior for the topology in which accelerometers can reroute their traﬃc and links can be shut down during a simulation. The
simulation environment is composed of three layers and is based in part on EmBOINC [6] and
the TARVOS Computer Networks Simulator [11].

3.1

Top Layer: QCN, Seismic Models, and QCN Explorer

The top layer integrates the scientiﬁc models of earthquake events and accelerometers. A
generic seismology model includes the two seismic waves called P- and S-waves that propagate
outward from the hypocenter (the location that an earthquake starts beneath the surface of
the Earth) in a spherical pattern. The speed of the S-wave is generally around 3 km/s, but
can vary in diﬀerent regions as seismic waves travel slower through looser substrates √
and faster
through denser ones. The speed of the P-wave, or primary wave, is modeled as Vs 3, where
Vs is the speed of the S-wave. The amplitude of the seismic waves, measured in m/s2 , is a
measurement obtained by the QCN accelerometers and is used to quantify the shaking eﬀects
at the accelerometer location. The amplitude of the S-wave is based on the accelerometers
hypocentral distance (i.e., the straight-line distance within the Earth between the earthquakes
hypocenter and the accelerometerss location on the surface). The amplitude of the P-wave is
assumed to be one ﬁfth that of the S-wave. The amplitude of the both seismic waves is based on
the model in [1, 7]. Because the goal of this layer is to oﬀer high-level abstractions to augment
functionalities of the underlying layers and to assist the user in constructing seismic simulations,
this layer also comprises conﬁguration ﬁle parsers and the QCN Explorer user interface [12].
456

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

QCN Explorer 6 is a web-based interface and provides graphical tools to the user to prepare
earthquake simulation scenarios by controlling earthquake parameters and placement of QCN
accelerometers as well as drawing the network topology on a real-life geographic map. Through
its earthquake simulation models, QCN Explorer generates seismic events as input to the top
layer ﬁle parsers

3.2

Middle Layer: Computer Network Components

The middle layer provides the QCN cyber-infrastructure with the high-level abstractions for
computer network components, such as network links, Protocol Data Units (PDUs), nodes,
routing, link failures, and traﬃc generators. The layer also includes components to measure
performance, calculate statistics, and generate traces. Classes in this layer utilize kernel classes
from the lower layer to perform their duties. The main classes are Node, Link, ProtocolDataUnit, and Route. In the QCN cyber-infrastructure, nodes implemented in the Node class are
either BOINC clients connected to low cost sensors, or intermediary entities (such as intermediate network nodes and links). Nodes receive trickle messages from the BOINC client or links,
forward them to other nodes through links, take decisions on paths and routes, and discard
trickle messages. Nodes also collect statistics such as delay, jitter, and the number of received,
forwarded, discarded trickle message and bytes, behaving much like network routers. The Link
class implements connections between BOINC clients and intra-topology nodes, intra-topology
nodes and a QCN server, or a BOINC client and a QCN server. Links provide service by
transporting trickle messages from one end of the link to the other end (e.g., from a BOINC
client to a QCN intra-topology node or between two intra-topology node). The propagation is
simulated as a simple ﬁxed delay deﬁned by the user based on QCN traces. Consequently, a
network link is modeled as a resource with one QCN server and a priority queue that is chained
to the inﬁnite-capacity QCN server. The ProtocolDataUnit class models a network PDU representing a QCN trickle message; this class associates Time-To-Live (TTL) and length members
to PDUs. The Route class models routes within a QCN network of intra-nodes, to be followed
by PDUs.

3.3

Bottom Layer: Discrete Event-based Queuing System Simulator

The bottom layer is a general-purpose, discrete event-driven queuing system simulator. This
layer provides the classes used to implement the higher layer components that allow the construction of the advanced network topologies proposed for QCN in this paper. The layer is
composed by a kernel including elements, such as resources that provide service, priority and
FIFO queues for the resources, functions for event manipulation, and statistics collection and
traﬃc generators based on probability distributions.
The kernels view is a queuing system with three main components: resources, tokens, and
events. Resources and tokens model real-life entities, such as routers, links, web servers, and
processors that basically deliver some sort of service. Events deﬁne any change of state in the
system. Changes of state include, for instance, the generation of a new token, a service request
for a token, a resource release, dequeuing of a token, and a subsequent request for service.
A class called Scheduler is the main kernel class that coordinates interaction between the
simulator components and controls the simulation clock. The simulator works under simulated
time, by simulating the passage of real time in a generally faster fashion. This is achieved by

6 http://qcnexplorer.org

457

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

generating events that occur in speciﬁc times in the future and putting these events into a timeordered list of events called Event Chain class. The Scheduler class is responsible for putting
events into the list, ordering the list by occurrence in time, retrieving events from the beginning
of the list, and terminating the simulation when there are no more events in the Event Chain
or other conditions occur (e.g., when the simulation reaches the targeted simulation time).

4

Critical Earthquake Scenarios

We consider several variations of the 1986 Oceanside earthquake to quantify the network impact
on earthquake early warning in QCN. In particular, in this section, we present the critical region
of interest for the study of critical network conditions (Section 4.1), and we show how results
with our simulation environment match both the old simulator results and the real earthquake
signals when no network incidents happen (Scenario I in Section 4.2). We discuss a ﬁrst critical scenario in which the single QCN server cannot detect the seismic waves due to network
link failures between the server and accelerometers. We demonstrate, with our simulation environment, a solution to this problem bringing minimal impact to the ﬁnal detection results
(Scenario II in Section 4.3). Finally, we discuss a second critical scenario in which the single
QCN server cannot promptly detect the seismic waves because of network congestion. We address this problem presenting feasible solutions with our simulation environment that mitigate
the impact of the network congestion in the wave detection. (Scenario III in Section 4.4).

Figure 1: Geographical area of our earthquake simulation and its four regions with
diﬀerent accelerometer distributions.

4.1

Figure 2: Links connecting the earthquake
region to two BOINC servers. Scenarios
utilize one or both links.

Setting of the Region of Interest

For our study, we considered Southern California as a region of interest. For the sake of
realism, we model our tests around a variation of the 1986 Oceanside earthquake that occurred
on July 13, 1986 at 6:47AM local time west of the city of Oceanside in San Diego County.
The Oceanside quake occurred oﬀ shore where there are no QCN accelerometers. Our modeled
earthquake starts in the same location as the original, with a depth of 15 km and magnitude of
ML 6.5. When the earthquake waves reach land, they aﬀect San Diego, Region A, an area with a
high population density. The earthquake then travels through the moderately populated areas
around San Diego, Region B, until it reaches a portion of the Colorado Desert, speciﬁcally
Anza-Borrego Desert State Park, Region C. The earthquake waves then travel through the
desert, typically aﬀecting very few people, until they reach the other side. The area on the
458

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

other side of the desert is populated by cities with higher population densities, Region D,
including Indio, Coachella, Brawley, El Centro, and Mexicali. We divided the inland area
near the modeled earthquake into four regions, each with a accelerometer density based on
population concentration. Figure 1 depicts the geographic area and the four diﬀerent regions,
and Table 1 speciﬁes the surface areas and number of accelerometers in each region in two
density modes used in our study (i.e., low and high accelerometer density). Accelerometers in
Table 1: Number of accelerators.
Region
A
B
C
D

Area
km2
1,104
6,845
16,232
5,028

Accel.
(low)
331
480
236
629

Accel.
(high)
2,208
3,422
1,623
4,274

Table 2: Statistics Scenario I (no failures)
QCN server mean delay(ms):
Received trickle messages by server:
Max. recorded queue size (in-state):
Dropped trickle messages (in-state):
Tot. generated trickle messages:

30.65
3,348
3
0
3,348

the regions are connected to QCN servers through links as depicted in Figure 2. The two links
have parameters and characteristics so deﬁned. An in-state link connects the region of interest
to Stanford University where the current QCN server is located. This link has a bandwidth
of 7 Mbps and a propagation delay of 30 ms. A cross-country link connects the region to an
alternative QCN server at the University of Delaware. This link has bandwidth of 6 Mbps
and a propagation delay of 70 ms. The modeling of the links intends to approximate the
average connection speed as reported in [12]. As an accelerometer detects a seismic event,
it generates and transmits trickle messages to one or both QCN servers. We use either one
or both links, depending on the scenario under consideration. Each message is modeled as a
Protocol Data Unit (PDU) in the simulation environment with a size of 512 bytes (i.e, the size
of a trickle message in the QCN project). We generated 10 simulation samples for each of the
three scenarios. All samples have similar proﬁles and therefore we report results from the ﬁrst
sample below.

4.2

Scenario I: Low Accelerometer Density, no Network Incidents

This ﬁrst scenario serves as our reference case study and can be equally captured by both the
old QCN emulator [8] and our simulation environment. The earthquake does not directly aﬀect
network operations of the QCN cyber-infrastructure (i.e., there is no link failure or congestion).
The accelerators in all four regions (i.e., Regions A, B, C, and D in Figure 1) are connected
to one QCN server located near Stanford (CA) and thus utilize the in-state link. Regions
have the low-density number of accelerators according to Table 1. In Figures 3.(a) and .(b), we
depict the seismic events as they are measured by the QCN accelerometers and processed by the
single QCN server in Stanford when the earthquake does not directly aﬀect network operations.
Figure 3.(a) illustrates the detection of waves as the distance between the accelerometers and
the earthquake hypocenter increases vs. earthquake time. Figure 3.(b) is a histogram of the
number of triggers vs. the observed earthquake time. Typically, the ﬁrst peak in this graph
represents the P-wave of the earthquake. As the second, more powerful S-wave reaches the
accelerometers, the number of triggers rises, as the higher magnitude will likely surpass the
accelerometers’ detection threshold. In both graphs, the behavior perceived by the QCN server
matches the behavior expected by the scientists.
Table 2 summarizes the statistics on the trickle messages collected by the QCN server and
from the link (i.e., the one-way delay, the number of trickle messages, the queue size, and the
459

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

(a)

(b)

Figure 3: Results collected for Scenario I.

dropped messages). We measured the impact of the network on QCN cyber-infrastructure and
observed how the delivery times are only slightly shifted from 30 ms to 30.65 ms due to the
in-state network latency as expected.

4.3

Scenario II: Low Accelerometer Density, Network Failure

A network link failure occurs when the link medium is destroyed (e.g., a ﬁber or wire is cut, or
radio communications, in wireless links, are lost due to interference), or when the transmission
hardware (e.g., a router or network card) fails. An earthquake can potentially sever wires
and ﬁbers and destroy network equipment within its reach. Scenario II portrays the eﬀects of
network failures in the real-time reception and recognition of seismic events by a QCN server.
We construct a topology equal to the one used for Scenario I. At 3.5 s after the ﬁrst seismic event
is detected by an accelerometer, the simulator kills the link connecting all accelerometers to the
QCN server. Thus, messages in transmission or in transit are dropped, and further messages
sent by the accelerometers cannot reach the QCN server. As clearly seen in Figure 4a, the
real-time, full observation (at the destination server) of both P- and S-waves is disrupted by
the loss of the connection between the accelerometers and the only QCN server, even though
the accelerometers continue to operate. This situation might obstruct the server’s ability to
alert, in real-time, populations to the earthquake. The current state-of-the-art QCN simulator
is not capable of simulating this scenario, which is paramount to investigate possible methods
of identifying network failures and reassigning accelerometers to a diﬀerent server.
We mitigate this loss of network link failure by distributing accelerometers among diﬀerent
QCN servers. We analyze this potential solution by modifying the topology such that region A
connects to one primary QCN server through the in-state link, and regions B, C, and D connect
to a secondary QCN server through the cross-country link. All regions have the low-density
accelerometers numbers (Table 1); at 1.0 s after the ﬁrst seismic event, the in-state link is made
unavailable by the simulator, whereas the other link remains operational. Figure 4b depicts the
global seismic data as observed by both primary and secondary BOINC servers upon delivery.
The primary server is able to receive data only until the link is lost. Even though one link is
lost, resulting in severing contact between all accelerometers in region A to the primary QCN
server, the other regions continue to report to their secondary server. The graph illustrates
that the additional QCN server results in maintaining the ability of fully observing the seismic
phenomena in real-time: the combined view of both primary and secondary servers provides a
complete, real-time view of the P- and S-waves of the earthquake.
460

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

(a)

(a)

(b)

(b)

Figure 4: Results collected for Scenario II.

Figure 5: Results collected for Scenario III.

Table 3 summarizes the statistics collected from this scenario, both with and without the
secondary QCN server in eﬀect. By distributing the accelerometers among the regions between
two QCN servers, it was possible to mitigate the eﬀect of the total loss of messages of a group
of accelerometers to their destination server from 2,013 to 391 messages.

Table 3: Statistics for Scenario II (network link Table 4: Statistics for Scenario III (network
failure).
congestion).

461

Study of the Network Impact on Earthquake Early Warning . . .

4.4

Portnoi, Schlachter and Taufer

Scenario III: High Accelerometer Density, Congested Network

A network link becomes congested when more traﬃc is directed through it than the link’s
bandwidth capacity can eﬃciently handle. In QCN, if there are many accelerometers connected
to a single server, a seismic event may trigger a high amount of trickle messages, ﬂooding the
communication channel to that destination server. When performed on a master-worker topology, as with QCN, the overloaded network causes excessive delay in delivering the seismic data.
Ultimately, this delay aﬀects the server’s real-time ability to detect the ongoing earthquake,
alarm the population, and activate safety measures. In Scenario III, we allocate a very high
volume of accelerometers in each region as seen in the column for the high-density accelerometer
distribution of Table 1. All the accelerometers, from all regions, connect through the in-state
link to the single QCN server in Stanford.
The simulation under this condition generates measurements as depicted in Figure 5a, in
which a “smoothing” eﬀect, caused by network buﬀers when the network is congested, can
be observed at the server level. The network buﬀers are located along the path from the
accelerometers to the server. The frequency pattern of the trickle messages does not allow
the server to discern the two typical P- and S-wave spikes from the earthquake. Table 4 shows
statistics collected for this scenario. We conﬁgured the simulator not to drop any trickle message
due to limited buﬀer capacity (or queue size). The intention was to gather a measure of the
stress caused by the sheer number of messages being transmitted to one single server. The
mean one-way delay for a trickle message to reach the QCN server located near Stanford in
California becomes approximately 1.8 s. This high latency can pose a relevant impediment for
triggering alarms with the necessary swiftness.
We address the loss of information by re-engineering the BOINC clients such that they have
the ability to reroute the trickle messages generated by their attached accelerometers to an
alternative server. We integrate the rerouting capability into our simulation environment and
reconﬁgure the simulation of Scenario III such that, initially, all accelerometers from all regions
are connected to the primary QCN server through the in-state link. After 1.0 s from the moment
the seismic event is ﬁrst sensed, the QCN server detects the smoothing eﬀect and the BOINC
clients controlling the accelerometers start executing a rerouting algorithm. The algorithm uses
a uniform distribution in which an accelerometer sends its trickle message to the primary server
through the in-state link with a 50% probability; otherwise, it sends its messages to a secondary
server through the cross-country link. From an implementation point of view, we can enable the
rerouting by re-engineering each BOINC client controlling the attached accelerometer to activate
the rerouting after the accelerometer measures continue vibrations over a period longer than one
second, as in our example. Alternatively, we could use the BOINC feature that is traditionally
used to send partial credits to clients to activate the rerouting algorithm, although this approach
requires a more substantial change of the QCN software. Our simulation environment allows
us to reproduce the rerouting for the 1986 Oceanside earthquake and observe as the eﬀects of
ﬂooding can be avoided or moderated. Figure 5b shows the same simulation performed with
our simulator when using the two servers and partially rerouting the trickle messages based on
the uniform distribution. The simple rerouting algorithm, initiated 1.0 s after the ﬁrst seismic
observation, was able to avoid the negative eﬀects of ﬂooding a single server and allows a full,
real-time observation of the earthquake phenomena.
Table 4, in its bottom half, further substantiates the decrease in one-way delay at delivery
and maximum queue sizes. Speciﬁcally, in Table 4, our simulation environment illustrates the
impact of applying our mitigating techniques. Whereas, with a single QCN server, the mean
one-way delay is approximately 1.8 s at the server, by activating secondary servers we achieve
one order of magnitude reduction for this metric. Likewise, our simulation reports a decrease
462

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

in the maximum recorded queue sizes from 5,823 with a single server to 767 and 347 for each
respective server in a two-server conﬁguration.

5

Conclusions

In this paper, we studied how the master-worker topology used in QCN can fail to perform
satisfactorily when subject to network failures and congestion due to its lack of inherent selfhealing capabilities. We constructed case scenarios wherein a simulated earthquake, based on
the 1986 Oceanside earthquake, occurs in the region of San Diego (CA), and it is detected by a
grid of QCN accelerometers placed in diﬀerent conﬁgurations across that area. We implemented
a new simulation environment for QCN research that is capable of simulating earthquakes
realistically and an underlying, dynamic computer network composed by accelerometers and
multiple QCN servers and links between the accelerometers and servers. Utilizing our ﬂagship
simulation environment, we demonstrated how the master QCN server fails to acknowledge
promptly, or in some cases acknowledge at all, the seismic events when the network is congested
or when links connecting the accelerometers to the server collapse. We demonstrated techniques
to address the problem employing more advanced topologies; in particular, by re-engineering the
accelerometers to reroute traﬃc to alternative servers and distributing accelerometers among
multiple QCN servers.
Results from our simulation environment demonstrated that the solutions successfully mitigated the disruptions caused by network incidents, allowing the QCN servers to regain their
capabilities to timely acknowledge the sensed seismic events. In the scenario wherein the link
connecting all accelerometers to the single QCN server collapses at 3.5 s after the initial event,
2,013 out of 3,348 trickle messages are lost, never allowing the server to fully construct a picture of the seismic waves. By distributing part of the accelerometers to a secondary server, our
simulation environment showed that even when one link fails one second after the initial event,
the remaining accelerometers connected to the alternate server provide enough seismic data
such that QCN servers can construct a full picture of the seismic waves. In this conﬁguration,
only 391 out of 3,384 messages are lost due to link failure. In the other scenario with network
congestion, the sheer quantity of messages sent by the accelerometer result in excessive latency
until the messages reach the server, aﬀecting its capability of promptly recognizing the seismic
event. When endowing the accelerometers with a rerouting algorithm, our simulation revealed
a reduction of the mean one-way delay in the delivery of messages to the server of one order of
magnitude, from approximately 1.8 s to less than 0.18 s.

Acknowledgments
This work is supported by the NSF, grant#1027807 “Collaborative Research: CDI-Type II:
From Data to Knowledge: The Quake-Catcher Network”. The authors thank all the volunteers
whose CPU time contributions make the QCN project possible.

References
[1] A.I. Chung, C. Neighbors, A. Belmonte, M. Miller, H.H. Sepulveda, C. Christensen, et al. The
Quake-Catcher Network Rapid Aftershock Mobilization Program Following the 2010 M 8.8 Maule,
Chile Earthquake. Seismological Research Letters, 82: 526-532, 2011.

463

Study of the Network Impact on Earthquake Early Warning . . .

Portnoi, Schlachter and Taufer

[2] J.F. Lawrence, E.S. Cochran, A. Chung, A. Kaiser, C.M. Christensen, R. Allen, et al. MEMS:
Accelerometers and Distributed Sensing for Rapid Earthquake Characterization. Bulletin of the
Seismological Society of America (BSSA), 2014.
[3] E. Cochran, J. Lawrence, C. Christensen, and A. Chung. A Novel Strong-motion Seismic Network
for Community Participation in Earthquake Monitoring. IEEE Instrumentation and Measurement
Magazine, 2009.
[4] D.P. Anderson, E. Korpela, and R. Walton. High-performance Task Distribution for Volunteer
Computing. First International Conference on e-Science and Grid Computing, 2005.
[5] D.P. Anderson. BOINC: a System for Public-resource Computing and Storage. In Proceedings of
the Fifth IEEE/ACM International Workshop on Grid Computing, 2004.
[6] T. Estrada, M. Taufer, K. Reed, and D. P. Anderson EmBOINC: An Emulator for Performance
Analysis of BOINC Projects. In Processing of the IEEE International Symposium on Parallel
Distributed Processing (IPDPS), 2009.
[7] K. Benson, T. Estrada, M. Taufer, J. Lawrence, and E. Cochran. On the Powerful Use of Simulations in the Quake-Catcher Network to Eﬃciently Position Low-cost Earthquake Sensors. In
Proceedings of the IEEE 7th International Conference on E-Science (e-Science), 2011.
[8] H. Casanova, A. Legrand, and M. Quinson. SimGrid: A Generic Framework for Large-Scale Distributed Experiments. In Proceedigns of the Tenth International Conference on Computer Modeling
and Simulation, 2008.
[9] D. Kondo. SimBOINC: A Simulator for Desktop Grids and Volunteer Computing Systems.
http://simboinc.gforge.inria.fr/, 2007.
[10] M. Taufer, A. Kerstens, T. Estrada, D. Flores, and P.J. Teller. SimBA: A Discrete Event Simulator for Performance Prediction of Volunteer Computing Projects. In Proceedings of the 21st
International Workshop on Principles of Advanced and Distributed Simulation, 2007.
[11] M. Portnoi and J.S.B. Martins. TARVOS - an Event-Based Simulator for Performance Analysis,
Supporting MPLS, RSVP-TE, and Fast Recovery. In Proceedings of the XIII Brazilian Symposium
on Multimedia and the Web - Webmedia, 2007.
[12] I. Akamai Technologies. The State of the Internet 2nd Quarter, 2013 Report
6(2),http://www.akamai.com/stateoftheinternet/?WT.ac=soti banner, 2013.

464

