Procedia Computer Science
Volume 29, 2014, Pages 586–598
ICCS 2014. 14th International Conference on Computational Science

Dendrogram Based Algorithm for Dominated Graph
Flooding
Claude Tadonki1 , Fernand Meyer2 , and Fran¸cois Irigoin1
1

Mines ParisTech - Centre de Recherche en Informatique (CRI)
35, rue Saint-Honor´e, 77305, Fontainebleau Cedex
claude.tadonki@mines-paristech.fr fran¸
cois.irigoin@mines-paristech.fr
2
Mines ParisTech - Centre de Morphologie Math´ematique (CMM)
35, rue Saint-Honor´e, 77305, Fontainebleau Cedex
fernand.meyer@mines-paristech.fr

Abstract
In this paper, we are concerned with the problem of ﬂooding undirected weighted graphs under ceiling constraints. We provide a new algorithm based on a hierarchical structure called
dendrogram, which oﬀers the signiﬁcant advantage that it can be used for multiple ﬂooding
with various scenarios of the ceiling values. In addition, when exploring the graph through its
dendrogram structure in order to calculate the ﬂooding levels, independent sub-dendrograms
are generated, thus oﬀering a natural way for parallel processing. We provide an eﬃcient implementation of our algorithm through suitable data structures and optimal organisation of
the computations. Experimental results show that our algorithm outperforms well established
classical algorithms, and reveal that the cost of building the dendrogram highly predominates
over the total running time, thus validating both the eﬃciency and the hallmark of our method.
Moreover, we exploit the potential parallelism exposed by the ﬂooding procedure to design a
multi-thread implementation. As the underlying parallelism is created on the ﬂy, we use a
queue to store the list of the sub-dendrograms to be explored, and then use a cyclic distribution
to assign them to the participating threads. This yields a load balanced and scalable process
as shown by additional benchmark results. Our program runs in few seconds on an ordinary
computer to ﬂood graphs with more that 20 millions of nodes.
Keywords: graph, ﬂooding, complexity, dendrogram, data structure, multicore

1

Introduction

A ﬂooding algorithm is typically an algorithm for distributing material to every node of a connected network [5]. Graph ﬂooding is thus a classical combinatorial problem, which has many
applications in number of ﬁelds including mathematical morphology [6], computer network [4],
mathematical modeling (maze problem [3]), and hydrodynamic simulation. The complexity of
586

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.053

Dominated Graph Flooding

Claude Tadonki, Fernand Meyer, and Franois Irigoin

the problem mainly depends on the density of the input graph. Depending on the algorithm,
the ceiling levels may also inﬂuence the eﬀective running time. Anyway, real-time processing
expectation for this problem, due to its applications and the large-scale instances under consideration, requires faster algorithms and associated implementations. In some cases, we need
to compute the ﬂooding levels for the same graph using diﬀerent scenarios of the ceiling values.
An algorithm for which we do not have to restart the whole ﬂooding process from scratch with
each scenario is clearly of a great value. This is the contribution of the current paper.
We provide a new algorithm for dominated graph ﬂooding, based on a structuration of the
graph in the form of a dendrogram. Then, given a set of ceiling values, we compute the ﬂooding
levels by performing a bottom-up exploration of the dendrogram organized as a binary tree.
Our method is a kind of divide and conquer algorithm. Note that, Dijkstra procedure is a greedy
algorithm [2], while Berge solution follows a dynamical programming approach [1]. Since our
algorithm creates independent sub-structures on the ﬂy, a potential for parallelism comes up.
Eﬃcient sequential and parallel implementations are really expected.
The rest of the paper is organized as follows. Section 2 provides the necessary background
on graph ﬂooding and the dendrogram structure. Next, our method is fully described in section
3 . Sequential and parallel implementations are detailed in section 4. Section 5 provides some
benchmark results and section 6 concludes the paper.

2
2.1

Background and preliminaries
Graph ﬂooding

Deﬁnition 1. Given a weighted undirected graph G = (X, E, v) and a ceiling function ω :
A → R. A valid ﬂooding function of G under the ceiling ω is the maximal function τ : A → R
satisfying
∀x, y ∈ A : τ (x) ≤ min(max(v(x, y), τ (y)), ω(x)).
(1)
Example 1. Figure 1 illustrates the ﬂooding of a weighted graph with 7 vertices and 9 edges.
6

a

3

g
b

8

4
5
c

With the ceiling
we have the ﬂooding

f

1

3

2
e

d

4

ω({a; b; c; d; e; f ; g})
τ ({a; b; c; d; e; f ; g})

= {9; 3; 6; 7; 9; 4; 5}
= {3; 3; 4; 4; 3; 3; 5}

Figure 1: Sample ﬂooding
Classical algorithms for graph ﬂooding include Djikstra and Berge procedures. We restate
the Djisktra algorithm for self-containedness, as we use it for validation and comparison purposes.
587

Dominated Graph Flooding

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Algorithm 1 Dijkstra greedy algorithm for ﬂooding a graph G = (X, V, v)
S←X
while (S = ∅) do
x ← arg minx∈S τ (x)
S ← S − {x}
for all y ∈ S such that (x, y) ∈ V do
if (τ (y) < max(v(x, y), τ (x))) then
τ (y) ← max(v(x, y), τ (x))
end if
end for
end while
Since each edge is visited once, i.e. the time one of its vertices is selected, the algorithm has
a complexity of O(|V | + |X|2 ), where the term |X|2 is for the selections of the min from X to
∅. These selections can be made faster by implementing a so-called mintree. In this case, we
get each minimum at cost O(1), followed by the updates of the corresponding neighbors, each
at cost O(log(|S|) (insertion into a mintree containing |S| nodes). If the degree of each node is
atmost K, then the updates of the mintree will cost
|X|

|X|

p) = K log(|X|!) ≤ K|X| log(|X|).

log(p) = K log(

K
p=1

(2)

p=1

Thus, for a graph with n nodes and m edges, Dijsktra algorithm complexity is O(m log(n)).
Another classical algorithm is due to Berge. In the algorithm, each ﬂooding value is iteratively reﬁned from the corresponding ceiling ω to its ﬁnal result, using the correction (3)
τx ← min(τx , max(v(x, y), τy ), for all y such that (x, y) ∈ V.

(3)

We now describe an important concept, which yields a hierarchical structure that can be used
to drive a coarse-grained procedure based on a total order between related items.

2.2

Dendrogram

Deﬁnition 2. Let A be a given set and E a subset of P(A). E deﬁnes a dendrogram if
(i) ∀U, V ∈ E, ∃W ∈ E s.t. (U ⊂ W ) ∧ (V ⊂ W ),
(ii) ∀U ∈ E, ({V ∈ E|V ⊇ U }, ⊆) is totally ordered.
Deﬁnition 3. Considering U, V, W three elements of a dendrogram E,
(i) U is a successor of V (resp. V is a predecessor of U ) if
(U

V ) ∧ ( W ∈ E s.t. U

W

V ).

(4)

(ii) V is maximal if
W ∈ E s.t. (W

V ).

(5)

W ∈ E s.t. (W

V ).

(6)

(iii) V is minimal if

588

Dominated Graph Flooding

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Note that the maximal element of a dendrogram is not necessarily unique. This is the case
when the graph is not strongly connected. However, without loss of generality, we will assume
the uniqueness of the maximal element for the rest of the paper.
Deﬁnition 4. Given a dendrogram E, we deﬁne supp(E), the support of E by
X.

supp(E) =

(7)

X∈E

Deﬁnition 5. Given a dendrogram E, any subset F of E that also deﬁnes a dendrogram is
called a subdendrogram of E.
A dendrogram can be viewed as a tree of its sub-dendrograms. In such a tree, the children
of a node are all its successors. Thus, the leaves correspond to the minimal elements of the dendrogram, while the root corresponds to its maximal element. In addition, each sub-dendrogram
is represented by the corresponding subtree, whose the root can thus be used as an identiﬁer of the subdendrogram. Figure 2 displays an example of dendrogram and its hierarchical
representation.

Figure 2: Sample dendrogram and its tree representation
The representation of a dendrogram as a tree can be used for its exploration following the
rules a given algorithm. Typically, the dendrogram is constructed through its tree structure.
Proposition 1 provides the key for a bottom-up agglomerative way to build the hierarchical
structure of the dendrogram.
Proposition 1. Given n disjoint dendrograms Ei , i = 1, 2, · · · , n, built with the same set A, a
new dendrogram can be constructed as follows
n

n

Ei ∪ {

E=
i=1

root(Ei )}.

(8)

i=1

Proposition 1 can be used with n = 2 for a binary tree, which is more simpler to handle,
although higher. Moreover, the way the pairwise selections for merging are performed (clustering) is algorithm dependent and impacts on the shape of the dendrogram representation. In any
case, the representation of the dendrogram on the memory should be made through references
589

Dominated Graph Flooding

Claude Tadonki, Fernand Meyer, and Franois Irigoin

to the associated subsets within its support, in order to avoid data redundancy and ease the
merging processes. Relation (8) suggests that we should prepare to request very frequently
the roots of the sub-dendrograms. In addition, since we might enter into a sub-dendrogram
from any of its elements, the way to the root should be made as fast as possible regardless
the starting point. All this clearly justiﬁes the need for the most appropriate data structure
and the most eﬃcient basic subroutines to manipulate a dendrogram. We will address all these
aforementioned aspects in the implementation section.
We now describe our dendrogram-based graph ﬂooding algorithm.

3
3.1

Description of our algorithm and its ingredients
Construction of the dendrogram

Our ﬂooding algorithm operates on a dendrogram constructed from the input graph using the
set of vertices as the support and the weights of the edges to select the sub-dendrograms to be
merged. Algorithm 2 describes how we construct the dendrogram from a given weighted graph.
Algorithm 2 Construction of the dendrogram associated to a weighted a graph G = (X, V, v)
k=1
for all x ∈ X do
Dk ← {{x}} {Singleton dendrograms}
k ←k+1
end for
S←V
while (S = ∅) do
μ = min(V (S))
for all (x, y) ∈ S such that v(x, y) = μ do
S ← S − {(x, y)}
a ← get id root dendrogram(x) {id of the root dendrogram containing {x}}
b ← get id root dendrogram(y) {id of the root dendrogram containing {y}}
if (a = b) then
Dk ← merge(Da , Db , v(x, y))
k ←k+1
else
{We just need to update the properties of Da using the weight v(x, y)}
update dendrogram properties(Da , v(x, y))
end if
end for
end while
Figure 3 illustrates our procedure on a linear graph whose the set of nodes is {a, b, c, · · · , t}
and the weights are the values displayed in red at the bottom. Blue (horizontal) segments
represent the nodes of the dendrogram and the associated subgraphs, while red (vertical) lines
depict the hierarchical relationship within the dendrogram. Each node of the dendrogram is
created by merging the roots of the sub-dendrograms that are linked by edges having the current
minimum weight, the corresponding values are in purple color.
590

Dominated Graph Flooding

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Figure 3: Sample dendrogram built using Algorithm 2
Since the nodes of a dendrogram are subsets of its support, we need to handle some basic
information about the corresponding subgraphs. We now deﬁne two of them that will be very
important for our algorithm.
Deﬁnition 6. Given a weighted graph G = (X, V, v) and a subset Y of X, we deﬁne
ϕ(Y ) = min{v(a, b) : (a, b) ∈ V, a ∈ Y, b ∈ X − Y }
diam(Y ) = max{v(a, b) : (a, b) ∈ V, a ∈ Y, b ∈ Y }

(9)
(10)

Remark 1. The main idea when using a dendrogram to ﬂood a given graph is that, ﬂooding
levels will be assigned to subsets of vertices rather than to individual vertices. When a ﬂooding
value is assigned to a sub-dendrogram, it means that all vertices of its support receive the same
ﬂooding level equals to that value. Thus, the bigger is such sub-dendrograms the faster is the
ﬂooding process.
Note that the dendrogram, including all its properties, only depends on the structure of the
graph and its weights. The ceilings will be added afterward to drive the ﬂooding process as we
will shortly describe.

3.2

Considering the ceiling levels

In a dominated ﬂooding, ﬂooding levels are constrained by upper bounds called ceiling levels.
On a given vertex, the ﬁnal ﬂooding level should not exceed that of its ceiling level. The set of
the ceiling levels is the main input for a ﬂooding algorithm in addition to the weighted graph.
An unconstrained vertex is said to have an inﬁnite ceiling, hence the notation ∞ used in our
ﬁgures. In practice, we can consider the maximum value between the highest ceiling level and
the biggest weight of the edges.
Assume the dendrogram is constructed and the values of the ceiling levels are provided.
Our algorithm starts by performing a bottom-up propagation of the ceiling values over the
hierarchical structure of the entire dendrogram, following the principle of a mintree. The ceiling
level of a node is the minimum between the ceiling levels of its children. Figure 4 illustrates
the procedure on a sample linear graph. Propagated (resp. initial) ceilings are inside yellow
(resp. orange) disks. A ceiling level not provided means that the corresponding vertex is
unconstrained.
591

Dominated Graph Flooding

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Figure 4: Distribution of the ceiling values among nodes of the dendrogram

3.3

The main algorithm

Once the nodes of the dendrogram are tagged with their initial ceiling levels, our algorithm
performs a bottom-up exploration of its hierarchical structure and computes the desired ﬂooding
levels. This is done by reﬁning the ceiling levels of the visited nodes of the dendrogram as long
as the convergence criteria is not met. Algorithm 3 describes the process from a leaf node.
Algorithm 3 Exploration of the dendrogram from a given leaf node {x}
d ← subdendrogram({x}) {this is the sub-dendrogram reduced to the singleton{x}}
while ((!is root(d)) ∧ (ω(d) > diam(d)))) do
d ← pred(d) {pred(d) is the parent of d in the tree}
end while
{Either d is a root sub-dendrogram or (ω(d) ≤ diam(d))}
if (ω(d) > diam(d)) then
{All vertices in the support of d receive the ﬁnal ﬂooding level ω(d), we’re done with this!}
f lood subdendro(d, ω(d))
else
{We cut the branch between d and its children, we repeat the same with all its ancestors}
dismantle(d)
end if
Let us outline the validation arguments of the algorithm:
• If ω(d) ≤ diam(d), then ω(pred(d)) ≤ diam(pre(d)), since ω (resp. diam) is a decreasing
(resp. increasing) sequence along the precedence path. Thus, once we get ω(d) ≤ diam(d)
in a bottom-up exploration, this will ever remains true. Since having the ceiling level lower
than the diameter of the subgraph does not provide any useful information for the ﬂooding,
we stop our exploration here and disable the corresponding links in the structure.
• if ω(d) > diam(d) then all the nodes in the support of d should have the same ﬂooding level (this is typically a lake) dominated by ω(d). Thus, if d is a root within the
current dendrogram hierarchy (probably dismantled one or several times), then we can
consider ω(d) as the ﬂooding level of all associated nodes. Indeed, if d is root, then
the corresponding sub-dendrogram is isolated, thus its ﬂooding level can be computed
without taking care of any potential inﬂuence on the complementary part of the entire
dendrogram. However, for sake of consistency, we need to update ω accordingly during
the dismantling process as we are going to explain.
592

Dominated Graph Flooding

3.4

Claude Tadonki, Fernand Meyer, and Franois Irigoin

The dismantling procedure

Considering the fact that our dendrogram is constructed by selecting the edges of the graph
in an ascending order, we obtain that the diameter of any sub-dendrogram is lower than the
weight of any outgoing or outside edge. Thus, the minimum weight of all outgoing edges (i.e.
ϕ) of the subgraph restricted to the support of a sub-dendrogram is greater that its diameter.
Consequently, for a given sub-dendrogram d, we have
(ω(d) > diam(d)) =⇒ min(ω(d), ϕ(d)) > diam(d).

(11)

Following (11) and the fact that we consider a sub-dendrogram d as a lake in case ω(d) >
diam(d), in order to be able to consider the current ceiling level a valid ﬂooding level, we need
to make sure that it does not impact any outside vertex. This is made by applying the following
correction
ωd ← min(ωd , ϕ(d)).
(12)
Our dismantling procedure can thus be expressed as follows by Algorithm 4.

Algorithm 4 Dismantling procedure from a node d of the dendrogram
repeat
{Here we dismantle the links to all children of d}
for all (p successor of d) do
remove link(p, d) {p is now a root independent sub-dendrogram}
ϕp ← min(ϕp , ω(d)) {Since p is made independent of d, we should not exceed its ceiling}
ωp ← min(ωp , ϕp ) {We correct the ceiling of p following equation (12)}
if (ωp > diam(p)) then
f lood lake(p, ωp ) {p is a lake with the ﬁnal ﬂooding level ωp }
else
put queue to be explore(p) {p is an independent sub-dendrogram to be explored later}
end if
end for
until (is root(d))

The following update
ϕp ← min(ϕp , ω(d))

(13)

corresponds to the canonical requirement of a valid ﬂooding as expressed by equation (1). Its
aim is to put the ceiling of a sub-dendrogram at the level of his parent from which it has been
made independent. Once we create an independent sub-dendrogram, we immediately check
if its ceiling is greater than its diameter, in that case we have a lake and the ﬂooding level
is the ceiling. Otherwise, we put that sub-dendrogram into the queue of the (independent)
sub-dendrograms to be explored. The exploration process is then repeated with each subdendrogram taken from the queue. Figure 5 illustrates our dismantling procedure on a sample
linear graph. We have dismantled from the indicated node, i.e. itself and its ancestors. Gray
lines represent the disable links and nodes. Green disks correspond to ﬁnal ﬂooding levels
obtained during the dismantling.
593

Dominated Graph Flooding

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Figure 5: Illustration of the dismantling procedure

3.5

The ﬂooding process and the whole algorithm

The pool of the independent sub-dendrograms to be treated is dynamically supplied during
each individual exploration. Thus, we just need to iterate on that pool until it becomes empty.
Algorithm 5 describes the process.

Algorithm 5 Flooding through the dendrogram
Q ← {id main dendrogram} {We start with the main dendrogram}
while (Q = ∅) do
d ← select one subdendrogram(Q) {We pick up one sub-dendrogram to be expored}
Q ← Q − {d}
d ← get leaf subdendrogram(d) {We always explore from a leaf}
f lood f rom(d) {Apply the bottom-up ﬂooding exploration following Algorithm 3}
{The queue Q has potentially been supplied with created orphan sub-dendrograms}
end while

Our complete algorithm can be summarized as follows: (i) create the dendrogram (ii) propagate the ceiling values among the nodes of the dendrogram organized as a tree (iii) perform
the ﬂooding process by running Algorithm 5.
If we need to proceed with another scenario of ceiling levels on the same graph, then we just
need to perform the last two steps on its dendrogram. Moreover, since we create independent
sub-dendrograms to be explored, we get a natural way for parallelism. However, we need to take
care of load balancing and the overhead of inadequate thread creations. We will explain our
approach to eﬃciently deal with this parallelism in the next section, which starts with general
implementation details and programming tricks.
594

Dominated Graph Flooding

4
4.1

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Implementation
Main data structure and programing techniques

We consider a pairwise merging in our bottom-up agglomerative algorithm to build the dendrogram. our structure is thus a binary tree, where each of the two children of a given node
is either a node of the dendrogram or simply a vertex. The choice of a binary tree simpliﬁes
both the information storage and the exploration process. Moreover, we chose to have the
support of each dendrogram represented by its vertex with the smallest id. The ﬂooding of a
sub-dendrogram is performed through this representative vertex of its support (any other choice
would have been valid too). Thus, a node of our dendrogram is represented by the following
data structure:

typedef struct
{
int edge_id;
char is_leaf_left;
char is_leaf_right;
float diam;
float min_outedge;
int size;
float ceil;
float flood;
int smallest_vertex;
int pred;
int child_left;
int child_right;
} dendro;

//
//
//
//
//
//
//
//
//
//
//
//

The id of the edge used to create this dendro (by merging)
tells if the left child is a dendrogram or a vertex
tells if the right child is a dendrogram or a vertex
diameter of the dendrogram
the outgoing edge with the minimum cost
number of vertices in the support of this dendrogram
the ceiling level (provided as input)
the flooding level (to be computed)
we keep the id of the vertex with the smallest ceiling
the predecessor of this dendrogram (its parent)
a dendrogram is created by merging 2 dendros (left, right)
right child

Each sub-dendrogram is created from a single edge (a, b) of the graph by merging the roots
of the two sub-dendrograms containing {a} and {b}, unless they are the same. Thus, each node
dendrogram has two children referenced by (child left and right. So, our structure is a
binary tree. Since we visit the edges of the graph in an ascending order of their weights, the
diameter of a newly created sub-dendrogram is the weight of the edge used for the corresponding
merging.
For a given vertex v of the graph, we need to be able to get the corresponding root subdendrogram (the one for which v belongs to the support). This can be done by starting from
the leaf sub-dendrogram containing v, and then move from parent to parent (using the pred
ﬁeld) until we reach a root sub-dendrogram. The complexity of this procedure is proportional
to the increasing height of the whole dendrogram so far constructed. However, since this is
repeated each time we have to merge two sub-dendrograms from a selected edge, it is thus vital
to make it as eﬃcient as possible. For this purpose, we can observe that, for a vertex that we
are visiting for the second time, we can start our way to the root from the previously identiﬁed
root instead of restarting from a leaf. Such an incremental processing signiﬁcantly improves
the time of the construction of the dendrogram, which is a good point as this is the most heavy
part of our algorithm, especially with dense graphs.
595

Dominated Graph Flooding

4.2

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Parallelisation of our method

Regarding the parallelisation of our algorithm, we only consider shared memory multiprocessing.
Technically, we focus on a multi-threaded implementation for multicore machines [7]. We have
so far claim that we can naturally consider parallelism when ﬂooding a graph through its
dendrogram, because we create independent sub-dendrograms that can thus be explored in
parallel. This is true indeed, but we need to take care about the potential load unbalance of the
scheduling, which is dynamic in this case with an unpredictable ﬂow of (independent) tasks.
Our solution is to consider a queue, where we store the references to the (independent) subdendrograms isolated, which are then explored following a cyclic distribution by the threads.
So, each threads has to continuously pick up a sub-dendrogram from the pool and explore it,
putting the corresponding isolated sub-dendrograms into the common pool. Figure 6 illustrates
our scheduling mechanism, which is implemented using the mutual exclusion feature for the
section where the pool is provisioned.

Figure 6: Cyclic distribution of the tasks among the threads

5

Validation and performances

We present the results of our benchmark, performed on an Intel Core i7-2600 processor with
4 cores and up to 8 threads (HyperTreading). Our graphes are randomly generated from two
parameters: the number of vertices (|X|) and the maximum indegree per vertex (c). |V | is
the number of edges (|V | ≤ c|X|) and h tree is the height of the constructed dendrogram
(the longest path from a leaf to the root). For the timings, the total running time of our
algorithm is decomposed into two parts: the time to build the dendrogram and the time to
calculate the ﬂooding levels from the dendrogram. We compare our solution with a reasonably optimised implementation of the Dijkstra algorithm by ourself. Our code is avaliable at
http://www.cri.ensmp.fr/TIMC/dendrogram/flooding.htm#code
596

Dominated Graph Flooding

5.1

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Sequential version

Table 1 provides the benchmark results of our program.

1
2
3
4
5
6
7
8
9
10

|X|
50000
60000
60000
70000
80000
80000
90000
90000
100000
100000

|V |
137184
89942
165030
104838
119923
219919
134790
247540
150168
275448

c
10
5
10
5
5
10
5
10
5
10

h tree
46
11
85
9
17
44
15
40
8
33

Dendrogram
0.0477
0.0220
0.0638
0.0273
0.0342
0.0914
0.0394
0.1027
0.0458
0.1138

Execution time(s)
Flood
Total
0.003016 0.0507
0.003674 0.0257
0.004175 0.0680
0.004662 0.0319
0.005967 0.0402
0.006746 0.0981
0.007540 0.0470
0.008173 0.1109
0.009133 0.0549
0.009807 0.1236

Dijktra
2.6930
2.4953
3.8444
3.6343
4.9978
7.9271
6.5709
10.3673
8.4721
15.0032

↑
53.1
97.2
56.6
113.8
124.3
80.8
139.9
93.5
154.3
121.4

Table 1: Performances of the sequential implementation of our algorithm
We observe that, even if the structure of our dendrogram is a binary tree, its height is
moderate and is not really aﬀected by the number of vertices, but slightly by the density. One
could imagine a preprocessing which eliminates the edges whose the weight does not inﬂuence
the ﬂooding levels, like computing the minimum spanning tree. We see that the overall computation is dominated by the construction of the dendrogram, and the ﬂooding step is noticeably
fast, which the main strength of our algorithm related to multiple ﬂooding. In any case, we
signiﬁcantly outperform Dijkstra algorithm.

5.2

Parallel version

We mainly focus on the scalability. We emphasize on the fact the only part that is parallelized
is the ﬂooding step, because of its natural potential of parallelism. Table 2 displays our timings
(T) and speedups (σ) with various graphs and 1 to 4 threads (P). M stands for million.
1
2
3
4
5
6
7
8
9
10
11
12

|X|
3M
3M
3M
3M
5M
5M
5M
5M
7M
7M
7M
7M

3
3
3
3
6
6
6
6
8
8
8
8

749
749
749
749
250
250
250
250
747
747
747
747

|V |
136
136
136
136
057
057
057
057
179
179
179
179

P
1
2
3
4
1
2
3
4
1
2
3
4

T
0.369
0.214
0.167
0.172
0.639
0.374
0.281
0.312
0.920
0.536
0.453
0.450

σ
1.00
1.73
2.21
2.15
1.00
1.71
2.27
2.05
1.00
1.72
2.03
2.05

13
14
15
16
17
18
19
20
21
22
23
24

|X|
9M
9M
9M
9M
10M
10M
10M
10M
20M
20M
20M
20M

11
11
11
11
12
12
12
12
24
24
24
24

249
249
249
249
500
500
500
500
996
996
996
996

|V |
740
740
740
740
809
809
809
809
258
258
258
258

P
1
2
3
4
1
2
3
4
1
2
3
4

T
1.241
0.709
0.535
0.609
1.404
0.802
0.603
0.550
3.105
1.762
1.438
1.171

σ
1.00
1.75
2.32
2.04
1.00
1.75
2.33
2.55
1.00
1.76
2.16
2.65

Table 2: Scalability of our algorithm on a quad-core machine
Our scheduling strategy really improves the load balance from the point of view of the set
of independent sub-dendrograms, not necessarily from the number of vertices to be examined.
This second aspects is diﬃcult to predict, as it really depends on both the structure of graph
and the distribution of the ceiling levels. Nevertheless, our speedups look good and promising.
597

Dominated Graph Flooding

6

Claude Tadonki, Fernand Meyer, and Franois Irigoin

Conclusion

Classical algorithms for dominated graph ﬂooding are no longer suﬃcient for real-time processing when it comes to large and dense graphs. Moreover, when we have to ﬂood the same graph
with diﬀerent set of ceiling values, it is common to restart from scratch. In this paper, we
provide an algorithm, which is competitive and well suited for multiple ﬂooding. At this point
of our work, we see two perspectives. The ﬁrst one is about how to get the dendrogram of a
modiﬁed version of a given graph by just adapting its original dendrogram. The second one is
related to the parallelization. Since the construction of the dendrogram is the predominant part
of our algorithm, providing an eﬃcient parallel implementation would be of a great impact.

References
[1] C. Berge. Theorie des graphes et ses applications. Dunod, Paris, 1958.
[2] E. W. Dijkstra. A note on two problems in connexion with graphs. Num. Mathematik, pages
269–271, 1959.
[3] D. C. Dracopoulos. Neural robot path planning: The maze problem. Neural Computing & Applications, 9:115–120, 1998.
[4] K. Erciyes. Distributed Graph Algorithms for Computer Networks. Springer, 2013.
[5] Fernand Meyer. Flooding edge or node weighted graphs. eprint arXiv:1305.5756, May 2013.
[6] B. T. M. Roerdink and A. Meijster. The watershed transform: Deﬁnitions, algorithms and parallelization strategies. Fundamenta Informaticae, 41:187–228, 2001.
[7] Claude Tadonki. High performance computing as a combination of machines and methods and
programming. In HDR book, University Paris-Sud Orsay, France, May 16, 2013.

598

