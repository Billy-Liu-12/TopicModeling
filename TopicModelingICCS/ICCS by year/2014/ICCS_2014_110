Procedia Computer Science
Volume 29, 2014, Pages 1631–1643
ICCS 2014. 14th International Conference on Computational Science

Fast and Accurate Optimization of a GPU-accelerated CA
Urban Model through Cooperative Coevolutionary Particle
Swarms
Ivan Blecic, Arnaldo Cecchini, and Giuseppe A. Trunﬁo
Department of Architecture, Planning and Design, University of Sassari, Alghero, Italy
{ivan,cecchini,trunfio}@uniss.it

Abstract
The calibration of Cellular Automata (CA) models for simulating land-use dynamics requires
the use of formal, well-structured and automated optimization procedures. A typical approach
used in the literature to tackle the calibration problem, consists of using general optimization
metaheuristics. However, the latter often require thousands of runs of the model to provide
reliable results, thus involving remarkable computational costs. Moreover, all optimization
metaheuristics are plagued by the so called curse of dimensionality, that is a rapid deterioration of eﬃciency as the dimensionality of the search space increases. Therefore, in case of
models depending on a large number of parameters, the calibration problem requires the use
of advanced computational techniques. In this paper, we investigate the eﬀectiveness of combining two computational strategies. On the one hand, we greatly speed up CA simulations by
using general-purpose computing on graphics processing units. On the other hand, we use a
speciﬁcally designed cooperative coevolutionary Particle Swarm Optimization algorithm, which
is known for its ability to operate eﬀectively in search spaces with a high number of dimensions.
Keywords: Cooperative Coevolution, Particle Swarm, GPGPU, Urban Models, Cellular Automata

1

Introduction

Cellular automata (CAs) models of land use dynamics are increasingly used as a tool for policy
assessment in urban planning. A recurrent issue in the operational use of CA models is represented by calibration, which consists of adapting the parameter-dependent transition rules to
make the modelled urban phenomena matching the reality. Clearly, the estimation of model
parameters to improve such an agreement between real and simulated phenomena must be
considered an essential phase of the model design process. However, CA calibration is often
challenging because it involves large search spaces, the dimension of which grows remarkably
with the number of parameters. Nowadays, it is well known that calibration through trial
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.148

1631

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

and error processes, based only on expert knowledge, is time consuming and usually leads to
unreliable results. Instead, the current research trend in the ﬁeld suggests the use of formal,
well-structured and automated optimisation procedures.
At present, many optimisation algorithms have been employed for the automatic calibration
of CAs [8, 4, 23, 24, 2, 14], including techniques based on exhaustive search, ad-hoc designed
search procedures as well as more general optimization metaheuristics.
For example, an exhaustive search in the parameter space has been used for SLEUTH [7, 8],
which depends on only ﬁve parameters belonging to small domains of deﬁnition. However,
in the case of models depending on a high number of real variables the exhaustive search is
impractical.
In other cases discussed in the literature, ad-hoc calibration techniques have been designed
for speciﬁc urban models. For example, in [25] the authors have developed an automatic
calibration procedure speciﬁcally designed for a Constrained Cellular Automata (CCA) [30],
in which the land-use demand is exogenous to the cellular model. Their method involves an
empirical search technique in which the erroneous neighbourhoods are ﬁrst identiﬁed and then
the parameters are adjusted to reduce the error. However, the method assumes that there
exists a set of maps available on a year-by-year basis, which is rarely the case in practice. In
[11] a further development of that method has been discussed, where an empirical technique to
correct the calibration procedure is suggested, in order to cope with the unavailability of maps
covering each step of the calibration interval. Nevertheless, it is not clear to what extent such
empirical adjustments aﬀect the quality of the ﬁnal solution.
Another typical approach to automatic calibration consists of using optimization metaheuristics, such as, for example, various kind of Evolutionary Algorithms (EAs) [4, 23, 24, 2, 14, 13, 22].
Compared to ad-hoc methods, the latter approach oﬀers the potential advantage of being general and applicable to a larger class of models.
However, two main problems arise when it comes to using metaheuristics for calibrating
urban models characterized by a large number of parameters.
The ﬁrst relates to the high number of evaluations of the objective function (i.e. simulations)
that are necessary to obtain a satisfactory result. In fact it is not uncommon the need to
perform many thousands of simulations during such an optimization. Therefore, even if the
single simulation does not involve a signiﬁcant computational cost, the total computation can
require very high computing times. A natural mitigation of such a computational problem would
be to take advantage of the current availability of resources for high performance computing.
However, as noted in [15] there is only a limited number of studies on the application of parallel
computing to CA urban models (e.g. [15, 5]).
The second issue arises from the fact that all meta-heuristics are plagued by a rapid deterioration of their optimization capabilities as the dimensionality of the search space increases. Such
a problem, referred to as the curse of dimensionality, implies that standard meta-heuristics (e.g.
standard genetic algorithms) used for the optimization of an urban model having a high number
of parameters, typically struggle to provide satisfactory results. However, in the literature several enhanced algorithms have been proposed to address optimization problems characterized
by search spaces with a high number of dimensions. The typical approach, which proved very
eﬀective, consists of decomposing the problem in smaller sub-problems and then running on
them multiple search instances, which coevolve and cooperate by sharing information [21].
In this paper, we describe an application in which the above-mentioned issues related to the
use of optimization metaheuristics are eﬀectively addressed. In particular, we use the urban
CA model described in [5], which exploits the computing power of modern Graphics Processing
Units (GPU), in conjunction with a variation of the standard Particle Swarm Optimization
1632

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

(PSO) algorithm [17], which is speciﬁcally designed to deal with optimizations in spaces with
a high number of dimensions.
PSO [17] is a powerful optimization algorithm that searches the optimum of a ﬁtness function
following rules inspired by the behaviour of ﬂocks of birds looking for food. The application of
PSO to the calibration of urban models is not new [13, 22]. However, the examples discussed
in the literature relate to cases with few parameters, tackled with the use of fairly standard
PSO. Instead, in this paper we face the much more challenging problem of calibrating a CA
that depends on more than a hundred parameters. To this purpose, we use a cooperative
coevolutionary (CC) [21] variation of PSO (CCPSO), which is based on decomposing the original
search space in subspaces of smaller dimension. Each subspace is assigned to a sub-population
that searches for partial solution components. The candidate solutions (i.e. particles) are
evaluated using a context vector composed of the best attained partial solutions of all subpopulations [27, 18].
The main objective of this paper is to show that the use of parallel computing in conjunction
with state-of-the-art optimization metaheuristics, leads to a valuable tool for improving the
accuracy and reliability of the simulated urban dynamics.
The paper is organised as follows. In section 2 we outline the GPU-accelerated CA used for
the numerical experiments. In section 3 we describe the CCPSO algorithm adopted as optimization tool. In section 4 we illustrate and discuss the numerical experiments of calibration.
Finally, in section 5 we draw some preliminary conclusion on this in progress research.

2

The adopted CA urban model

The typical CA model for the simulation of land-use dynamics evolves a raster, representing the
geographical space of interest, through discrete time steps (each typically corresponding to one
year), in order to simulate real historical series of land-use maps and to enable the production
of future scenarios.
The relevant component of the state of each cell represents its land-use class (such as residential, industrial, commercial, agriculture). Cells may also hold other information relevant
to the simulation, such as their distance from the main transportation networks, constraints
related to zoning regulations and cells’ physical features (slope, elevation, etc.). During the
simulation of such a CA, each cell can change its land use depending on its neighbouring cells
and its internal state. However, as detailed below, in the model adopted in this paper the cell’s
state transition also depends on some global constraints on the total amount of each land use
that is allowed at each time step.
The model we adopted in this study, as proposed in [29, 12], includes two categories of
land uses: dynamic and static. A dynamic land use can change during the simulation. A
static cannot, yet it can inﬂuence dynamic uses within its neighbourhood by exerting attractive
or repulsive eﬀects on them. Typical static land uses may represent transportation network,
public services and facilities, and so on. The category of dynamic uses can be further split into
passive and active uses: land available to be transformed into active uses during the simulation
is represented by passive uses. The latter also include an abandoned state, which represents
available land which in the past (i.e. in the previous steps) has had an active use.
The local dynamics is deﬁned on the basis of the so-called transition potentials Pj , which
is a very common way to express the cell propensity to acquire the j-th use in land-use change
models [31, 3, 6, 16].
In the adopted model, the CA neighbourhood is deﬁned as the circular region around the cell
with an assigned radius ρ. The latter should be suﬃcient to allow local-scale spatial processes
1633

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

to be captured in the CA transition rules.
At the beginning of each CA step, the transition potentials Pj are computed for each cell
and each active land use. This is done with the following equation:
Pj = γ Aj Sj Zj Nj

(1)

where:
• γ = 1 + (− ln ψ)α , where ψ is a random number between 0 and 1 and α is a parameter
that provides a degree of randomness;
• Aj ∈ [0, 1] is the accessibility factor, reﬂecting the importance of the vicinity to the
transportation networks for the land use j (e.g. commerce generally requires better accessibility than residence). Given that transportation network cells are static, these values
are pre-computed before the beginning of the simulation;
• Sj ∈ [0, 1] is the suitability factor for the active land use j. The suitability represents the
propensity of a cell to support a particular activity or land use (it can for example be
computed as a normalized weighted sum or product of relevant physical features of each
cell);
• Zj ∈ [0, 1] deﬁnes the degree of legal or planning permissibility of the j-th land use (for
example due to zoning regulations by the planning authority);
• Nj is the so called neighbourhood eﬀect, which represents the sum of all the attractive
and repulsive eﬀects of land uses within the neighbourhood on the j-th use which the cell
may assume. In particular, the factor Nj is computed as:
Nj = ν +

φi,j (δc )

(2)

c∈V

where the summation is extended over all the cells of the cell’s neighbourhood V (including
the cell itself) and: i denotes the current land use of the cell c ∈ V , δc is the distance from
the neighbouring cell c, and φij (δ) is a parameterized function expressing the inﬂuence of
the i-th land-use at the distance δ on the potential land use j. The term ν is a constant
value computed before the beginning of the simulation so that Nj ≥ 0.
In this paper we assume that the φ(i,j) (δ) are piecewise linear functions depending on four
parameters, as shown in Figure 1. This choice allows to model a wide variety of relevant
situations in which the inﬂuence generated by an urban function depends on the distance. For
example, in Figure 1 the eﬀect of the i-th use (e.g. industrial ) on the potential use j-th (e.g.
residential ) is repulsive in the vicinity of the cell but its absolute value decreases as the distance
δ increases. Starting from a certain distance the eﬀect becomes attractive, up to a maximum
for δ = ci,j . Then, for increasing distances above ci,j the attractive eﬀect decreases, until it
reaches zero at δ = di,j .
Once the cell’s propensity to assume alternative land uses has been quantiﬁed, for each cell
the land use in the next step of the CA evolution must be computed. In the model adopted
in this study, as in most CA-based urban models [28, 30, 31, 3, 6], the total land area that
changes from its current land use to a diﬀerent use is determined by an external constraint.
This implies that the state-transition phase must take place on a non-local basis. Typically,
this phase consists of transforming each cell into the state with the highest potential, given the
exogenous constraint on the overall number of cells in each state imposed for that step [29, 12].
1634

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

Figure 1: The function φ(i,j) (δ) represents the inﬂuence of the i-th land use at the distance δ
on the potential land use j.

2.1

GPU implementation

Using a General Purpose Computing on Graphics Processing Units (GPGPU) approach, in [5]
we have developed a parallel version of the CA model described above. In particular we used the
GPGPU platform provided by nVidia, consisting of a group of Streaming Multiprocessors (SMs)
able to support a limited number of co-resident concurrent threads sharing the SM’s memory
resources. Each SM on its turn consists of multiple Scalar Processor (SP) cores. To develop the
model, we have adopted the popular C-language Compute Uniﬁed Device Architecture (CUDA)
[10].
In order to obtain high eﬃciency, we have formulated the parallelization to avoid signiﬁcant
memory transfers between the CPU and GPU during the simulation.
In the model, the main phases of each step are: (i) the computation of the transition
potentials following Equations 1 and 2; (ii) the constrained assignment of the future land uses.
The ﬁrst phase can be carried out independently for each cell. Therefore, it is well suited to be
parallelized according to the computational model oﬀered by GPU, just associating a thread
to each cell of the CA. Instead, for the second phase we had to develop an ad-hoc algorithm of
constrained state transitions. In fact, very poor speedup would be achieved through the simple
translation in CUDA of the standard constrained procedure used in [29, 12], which is inherently
sequential.
As shown in [5], where more details on such a GPU-accelerated CA model can be found,
the GPGPU approach leads to speedups that can easily exceed the value of 100, compared
to the corresponding sequential implementation on a standard workstation. This is a key
factor to allow a practical use of general optimization metaheuristics on operational contexts.
Obviously, in addition to the used hardware, the actual acceleration depends on many other
factors, including the number of cells of the CA, the neighbourhood radius as well as the number
of involved land uses.

2.2

Automatic calibration

As for the calibration problem, if the model described above includes nT land uses, nA of which
actively modelled, it depends on the D = 4 nT nA scalar parameters involved in the piecewise
functions φ(i,j) of equation 2. More in details, the above model depends on the following vector
1635

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

p of parameters belonging to a D-dimensional search space Λ:
p = (p0,0 , p0,1 , . . . , pnT ,nA )

T

(3)

where the 4-dimensional vectors pi, j are deﬁned as:
pi,j = (ai,j , bi,j , ci,j , di,j )

T

i ∈ [0, nT ], j ∈ [0, nA ]

(4)

The scalar parameters ai,j and bi,j are deﬁned in the interval [−σ, σ], where σ ∈ R+ is a suitable
positive constant. Moreover, the parameters ci,j and di,j are deﬁned in the interval [0, δmax ],
where δmax ∈ R+ represents the maximum distance of inﬂuence of a land-use on another.
Given an initial CA conﬁguration ω (0) (i.e. the set of all cell states), after t time steps
the automaton computes a conﬁguration ω (t) , depending on the parameters p. With respect
to the latter, the model can be optimised to maximize the agreement between the simulated
patterns and the real ones. To this purpose, the agreement between ω (t) and a corresponding
conﬁguration ω
¯ (t) is measured using a suitable ﬁtness function. In practice, assuming that a
CA step corresponds to one year, ω (0) represents a map of land uses of the area under study at
the year t0 and ω
¯ (t) is the known land use conﬁguration after t years.
In this study, to measure the agreement between maps, we use a modiﬁed version of the
standard Kappa statistic [9], namely the so called Kappa Simulation Ks [26]. In the latter, the
agreement between the two ﬁnal maps is corrected accounting for the sizes of class transitions,
which are computed taking as a reference the initial map. As in the standard Kappa, a Ks value
greater than 0 indicates that there is more similarity than random and a value of 1 indicated
perfect agreement of the two maps.
¯ (t) ) depends on the paClearly, given an initial conﬁguration ω (0) , the value of Ks (ω (t) , ω
rameters p used in the CA. The automatic calibration problem consists of solving:
max Ks ω (t) , ω
¯ (t)

(5)

p∈Λ

through the use of a suitable search algorithm. In the present paper, we use the speciﬁcally
designed cooperative coevolutionary PSO algorithm described in the following section.

3

Particle swarm optimization

PSO is a stochastic optimization metaheuristic [17] in which a population (i.e. swarm) of particles is evolved step-by-step through the search space following rules inspired by the behaviour
of ﬂocks of birds. In PSO, particles change their position and velocity guided by the results
obtained so far in terms of ﬁtness function value. In particular, the movements of a particle
are inﬂuenced by the best position attained by that particle and by other current best known
positions in the search-space. A particle’s position and velocity at the step s of the search
process can be computed using the following equations:
(s−1)

(s−1)

v(s)

=

w v(s−1) + c1 r1 pbest − p(s−1) + c2 r2 pgbest − p(s−1)

(6)

p(s)

=

p(s−1) + v(s)

(7)

where v is the velocity of the particle, c1 , c2 are two positive constants, r1 , r2 are two random
numbers uniformly drawn between 0 and 1, w is the so-called inertia weight, p(s) is the position
1636

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo
(s−1)

of the particle at step s, pbest is the best position reached by the particle up to step s − 1 and
(s−1)
pgbest is the best-ﬁtness point found so far by the whole swarm.
(s−1)

(s−1)

A typical variant of PSO substitutes pgbest with a plbest , which is a local best position ever
found by all particles within a pre-deﬁned neighbourhood. This formulation, in turn, admits
several variants, depending on the topology of the neighbourhoods. In this study we adopt the
(s−1)
so-called ring topology, i.e. plbest is computed on a neighbourhoods comprising exactly two
neighbours, one on each side of the particle under consideration.
Moreover, to increase the eﬀectiveness of PSO in optimizing an high number of parameters,
we use the multi-population CCPSO approach described in the following.

3.1

The Cooperative Coevolutionary Approach

As proposed by [21, 27], in the CCPSO approach the original D-dimensional search space Λ is
decomposed into K subspaces Λ(i) of the same dimension DK = D/K:
Λ = Λ(1) × Λ(2) × · · · × Λ(K)

(8)

Subsequently, each subspace Λ(i) is assigned to a diﬀerent sub-population of nK particles that
operate as in the standard PSO. However, each individual carries only a portion of the candidate
solution (i.e. some components of the solution vector). Thus, its evaluation must be done
obtaining the missing components from the proper sub-populations.
The approach proposed in [21], and adopted in this study, consists of combining the contributions of each sub-population in the so-called context vector b. The latter collects the best
individuals of each sub-population, in this way providing the missing vector components for
evaluating the objective function.
In particular, let y(i) be the DK -dimensional vector representing the contribution of the
i-th sub-population (i.e., its current best position in the subspace Λ(i) ):
(j)

(j)

(j)

y(i) = (y1 , y2 , . . . , yDK )T
Then, the context vector is deﬁned as:
(1)

(1)

(2)

(2)

(K)

y = (y1 , . . . , yDK , y1 , . . . , yDK , . . . , y1
y(1)

(K)

, . . . , yDK )T

y(2)

y(K)

Given the j-th particle p(i,j) ∈ Λ(i) of the i-th sub-population:
(i,j)

p(i,j) = (p1

(i,j)

, p2

(i,j)

, . . . , p DK ) T

its ﬁtness value is obtained by running the CA with the vector of parameters y(i,j) ∈ Λ deﬁned
as:
(1)
(1)
(i,j)
(i,j)
(K)
(K)
(y1 , . . . , yDK , . . . , p1 , . . . , pDK , . . . , y1 , . . . , yDK )T
y(1)

p(i,j)

y(K)

In other words, in order to evaluate the ﬁtness of p(i,j) we construct the vector obtained from
y by substituting the components provided by the i-th sub-population with the corresponding
components of p(i,j) .
Except for this way of evaluating the individuals, the algorithm proceeds as the standard
1637

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

PSO in each subspace. However, when the i-th sub-population ﬁnds a new optimal point y(i)
in its subspace Λ(i) , the context vector is updated accordingly. Thus, by deﬁnition, at each
iteration y represents the best obtained approximation of the global optimum for the ﬁtness
function.
In the numerical experiments, we used the approach described above with DK = 1 and
DK = 4. In the ﬁrst version, labelled as CCPSO1 , each scalar parameter of the model is
optimized by a separate swarm. In the second version, labelled as CCPSO4 , each swarm
T
operates on a group of four parameters pr,s = (ar,s , br,s , cr,s , dr,s ) which deﬁnes the inﬂuence
of the land use r on the land use s.

3.1.1

Random grouping

The above algorithm is based on a linear decomposition, in which the i-th sub-population
operates on the subspace Λ(i) including all the directions qj with j in the interval:
[(i − 1) × DK + 1, . . . , i × DK ]
Unfortunately, as early recognized in [20, 21], a problem may arise with such a simple decomposition approach in case of interdependencies among variables (i.e. CA parameters) with respect
of the ﬁtness function value. In particular, when highly correlated variables are assigned to
diﬀerent sub-populations, the search eﬃciency is expected to decline signiﬁcantly.
To tackle such a problem we have adopted in the CCPSO a computationally convenient
and eﬀective approach, namely the random grouping (RG) strategy [32]. The latter consists
of a randomized periodical re-allocation of direction components to sub-populations during the
search. Compared with the simple linear decomposition described above, it has been proved
that RG increases the probability of having two interacting CA parameters in the same subpopulation at least for some iteration of the search algorithm [32, 19]. Clearly, when a subpopulation directly operates on correlated variables, it has a better chance to adjust their values
towards the optimal direction.
More in details, we have used in the numerical experiments two additional versions of the
RG-based PPSO. In the ﬁrst one, labelled as CCPSORG2 , we assign to the i-th sub-population
DK = 2 directions qj , with j randomly selected without replacement from the set {1, 2, . . . , D }.
In the second CCPSO, labelled as CCPSOLU 2 , we use DK = 8 and assign to the i-th subpopulation the vector:
T
p(i) = (pr,s , ph,q )
where: (i) the vectors pr,s and ph,q are deﬁned by equation 4; (ii) the land-use indices r and
h are randomly selected without replacement from the set [0, nT ]; (iii) the land-use indices s
and q are randomly selected without replacement from the set [0, nA ].
An important aspect is represented by the frequency of application of the RG during the
search. In this regard, it has been show [19] that a higher frequency of applying RG provides more beneﬁt on non-separable high dimensional problems. For this reason, after some
preliminary experiments, we applied a regrouping at each iteration of CCPSO.
1638

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

4
4.1

A Preliminary Empirical Investigation
Experimental setup

To investigate the optimization methods described above, we applied the model to the area of
the city of Heraklion, Crete. In particular, the CA representing the urban area was composed of
553 × 300 cells each with the side of 25 meters, and the initial conﬁguration ω (0) was initialized
with the urbanization map of the year 1980 shown in Fig. 2 (step 0). The optimization problem
was to obtain the maximum agreement with the patterns of urban development after 30 years
(i.e. CA steps).
In order to assess the characteristics of the heuristic search procedures, avoiding the unessential complications related with the presence of a noisy objective function, a deterministic version
of the CA model described above was used (in other words, it was assumed that α = 0 in equation 1).
Also, in our experiments we have applied the calibration heuristics to the data obtained with
the CA itself, using a set of parameters generated within meaningful intervals (i.e. σ = 100 and
δmax = 2000). This guarantees the existence of a zero-error solution of the calibration problem,
thus allowing for an unbiased evaluation of the calibration procedures. However, in order to
use a realistic set of model parameters, the ﬁnal state of the CA after 30 steps, shown in Fig.
2, was calibrated with the map provided by the European Urban Atlas (EUA) project. The
latter includes accurate data on both the fast transit roads and urban street network, which we
used for computing the accessibility factors required by the model (see Equation 1). A further
GIS layer used in the model was the city Master Plan, which allowed to deﬁne the degree of
permissibility (i.e. the coeﬃcient s Zj in equation 1) for each land use and cell of the CA.
The EUA data include many relevant land use categories, among which there are ﬁve different urban fabric densities, industrial-commercial areas and several types of uses which correspond to land potentially available for development (e.g. agricultural areas). However, for
the purpose of our study the original land uses included in the EUA data have been somewhat
simpliﬁed by combining those with a similar role.
In the model we used nT = 10 and nA = 4 (D = 160 parameters). In particular, the actively
modelled land uses were residential dense, residential sparse, industrial areas, and commercial
areas. Passive land uses included undeveloped land, which essentially represents agricultural
and natural land cover classes, plus the abandoned state. Finally, static land uses were: green
urban areas and facilities, port areas, airports, water bodies.
However, in order to investigate the inﬂuence of the number of parameters on the eﬃciency
of the diﬀerent search algorithms, we also used a version of the model with only D = 64
parameters to calibrate (i.e. the values of the remaining 96 parameters were assigned at the
beginning of each simulation and then excluded by the calibration process).
At each CA time step, the amount of cells to assign to each land use (i.e. the external
constraint) was computed assuming a linear variation between the initial 1980 situation and
the ﬁnal state as resulting from the EUA data. As for the circular neighbourhoods, a radius of
20 cells was considered suﬃcient to account for the mutual inﬂuence of the diﬀerent land use.
We adopted the same PSO parameters for each search algorithm. In particular, we used
25 particles per swarm and the following values suggested in [1]: w = 0.729844 and c1 = c2 =
1.49618.
The comparisons among the standard PSO and the CCPSO variations were carried out
assigning a limited budget of 5000 CA simulations for each run of the search algorithms. In
addition, for each of the heuristics we have carried out 10 independent runs, averaging the
results in terms of achieved ﬁtness.
1639

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

Figure 2: The initial map used for the CA initialization (step 0, left side). The CA was
calibrated for obtaining the map on the right side after 30 steps.

We ran the optimization algorithms on two workstations equipped with two diﬀerent GPUs,
a nVidia Tesla K40 and a nVidia Geforce GTX 680 graphic card.

4.2

Calibration results

In Figure 3 we show the averaged convergence plots of all PSO algorithms under comparisons.
The attained average best ﬁtnesses, together with the standard deviations, are shown in Table 1.
According to the latter, the CCPSO implementations signiﬁcantly outperformed the standard
PSO. As expected, the improvement of the results provided by the CCPSO approach is more
evident in the problem with more variables. In particular, in the case of D = 160, the standard
PSO did not provide a satisfactory Ks value after 5000 CA simulations. However, according
to Figure 3 the small slope of the last portion of the PSO curves suggests that more iterations
would have likely led to an improvement of the achieved optimum.
As for the diﬀerent variations of CCPSO, according to Table 1, the RG strategy (i.e.
CCPSORG2 and CCPSOLU 2 ) allowed to attain better results in both problems. Clearly, a
more detailed investigation will be needed to draw reliable conclusions, also including a greater
number of repetitions and a statistical test. Most likely, the positive eﬀect of RG depends on
the fact that there is a signiﬁcant interaction between the CA parameters in determining the
ﬁnal conﬁguration of the automaton.
In both calibration problems, CCPSOLU 2 achieved the best result, that is Ks = 0.982 for
D = 64 and Ks = 0.966 for D = 160. These values of Ks are very satisfactory since they
produce a ﬁnal map of urbanization nearly equal to that assumed as target after 30 CA steps.
This result seems to indicate that optimizing the interactions between two random pairs of
land-uses at a time is an eﬀective strategy. As shown by the convergence plots in Figure 3,

Table 1: Final Ks value averaged over 10 independent runs for the standard PSO and the
diﬀerent CCPSO variations under consideration (in round brackets is the standard deviation).
D=64
D=160
1640

PSO

CCPSO1

CCPSO4

CCPSORG2

CCPSOLU 2

0.895 (0.122)
0.862 (0.112)

0.902 (0.142)
0.859 (0.113)

0.923 (0.101)
0.885 (0.173)

0.958 (0.126)
0.929 (0.142)

0.974 (0.174)
0.953 (0.102)

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

Figure 3: Averaged best ﬁtness convergence during the optimization processes.

the most eﬃcient algorithm CCPSOLU 2 was able to attain a value of Ks = 0.9, which can be
considered acceptable for practical applications, employing approximately 3500 CA simulations
in both calibration exercises.
Moreover, in comparison with the standard PSO, the CCPSO algorithms were less sensitive
to the size of the optimization problem.
A further aspect that is worth discussing concerns the computation time. The average
elapsed time for each optimization run was about 2.7 hours on the workstation equipped with the
Geforce GTX 680 and 1.9 hours on the workstation equipped with the Tesla K40. Interestingly,
given that the speedup provided by the used GPUs over a standard sequential computation is
above 100 [5], these calibration experiments would not have been feasible without the use of
parallel computing.

5

Conclusions and Future Work

The automatic calibration of urban CA models is a crucial phase in ensuring the reliability and
accuracy of the simulations. However, in the case of models depending on a high number of parameters, calibration is a challenging problem, which involves suitable optimization algorithms
and signiﬁcant computational resources. In fact, typically a high number of expensive simulations is required to obtain satisfactory results. Also, the commonly adopted meta-heuristics
exhibit poor performances when are applied to large search spaces.
In this paper we have proposed to tackle such a problem with a twofold computational
strategy: we exploits the computing power of modern GPUs, in conjunction with a speciﬁcally
designed cooperative coevolutionary Particle Swarm Optimization algorithm.
Although a more accurate computational study must still be conducted, our preliminary
results seem to conﬁrm that in the case of an urban model depending on a large number of
variables to be optimized, standards metaheuristics struggle to achieve an adequate optimum.
Instead, the use of more sophisticated algorithms, such as the one investigated in our study,
seems an eﬀective and reliable approach.
1641

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo

Acknowledgement
We gratefully acknowledge the support of NVIDIA Corporation with the donation of the Tesla
K40 GPU used for this research.

References
[1] Standard PSO 2006.
[2] Maria Vittoria Avolio, Gino Mirocle Crisci, Salvatore Di Gregorio, Rocco Rongo, William Spataro,
and Giuseppe A. Trunﬁo. SCIARA γ2: An improved cellular automata model for lava ﬂows and
applications to the 2002 Etnean crisis. Computers & Geosciences, 32(7):876–889, 2006.
[3] Ivan Blecic, Arnaldo Cecchini, P. Prastacos, Giuseppe A. Trunﬁo, and E. Verigos. Modelling urban
dynamics with cellular automata: a model of the city of Heraklion. In 7th AGILE Conference on
Geographic Information Science.
[4] Ivan Blecic, Arnaldo Cecchini, and Giuseppe A. Trunﬁo. A comparison of evolutionary algorithms
for automatic calibration of constrained cellular automata. In ICCSA 2010, Part I, volume 6016
of LNCS, pages 166–181. Springer, 2010.
[5] Ivan Blecic, Arnaldo Cecchini, and Giuseppe A. Trunﬁo. Cellular automata simulation of urban
dynamics through gpgpu. The Journal of Supercomputing, 65(2):614–629, 2013.
[6] Jianquan Cheng and Ian Masser. Understanding spatial and temporal processes of urban growth:
cellular automata modelling. Environment and Planning B: Planning and Design, 31(2):167–194,
2004.
[7] K. C. Clarke, S. Hoppen, and L. Gaydos. A self-modifying cellular automaton model of historical
urbanization in the San Francisco Bay area. Environment and Planning B: Planning and Design,
24(2):247–261, 1997.
[8] Keith C. Clarke and Leonard J. Gaydos. Loose-coupling a cellular automaton model and GIS:
Long-term urban growth prediction for San Francisco and Washington/Baltimore. International
Journal of Geographical Information Science, 12(7):699–714, 1998.
[9] Jacob Cohen. A Coeﬃcient of Agreement for Nominal Scales. Educational and Psychological
Measurement, 20(1):37–46, 1960.
[10] CUDA C Programming Guide. v. 3.2. 2010.
[11] Guy Engelen and Roger White. Validating and calibrating integrated cellular automata based
models of land use change. In Sergio Albeverio, Denise Andrey, Paolo Giordano, and Alberto
Vancheri, editors, The Dynamics of Complex Urban Systems, pages 185–211. Physica-Verlag HD,
2008.
[12] Guy Engelen, Roger White, and Ton de Nijs. Environment Explorer: Spatial support system
for the integrated assessment of socio-economic and environmental policies in the Netherlands.
Integrated Assessment, 4(2), 2005.
[13] Yongjiu Feng, Yan Liu, Xiaohua Tong, Miaolong Liu, and Susu Deng. Modeling dynamic urban
growth using cellular automata and particle swarm optimization rules. Landscape and Urban
Planning, 102(3):188 – 196, 2011.
[14] Noah C. Goldstein. Brains vs. Brawn-Comparative strategies for the calibration of a cellular
automata-based urban growth model. In Proceedings of the 7-th International Conference on
GeoComputation, 8-10 September, 2003.
[15] Qingfeng Guan and Keith C. Clarke. A general-purpose parallel raster processing programming
library test application using a geographic cellular automata model. International Journal of
Geographical Information Science, 24(5):695–722, 2010.
[16] Chunyang He, Norio Okada, Qiaofeng Zhang, Peijun Shi, and Jinggang Li. Modelling dynamic
urban expansion processes incorporating a potential model with cellular automata. Landscape and

1642

Fast and Accurate Optimization of a GPU-accelerated CA Urban Model .Blecic,
..
Cecchini and Trunﬁo
Urban Planning, 86(1):79 – 91, 2008.
[17] J. Kennedy and R. Eberhart. Particle swarm optimization. In Neural Networks, 1995. Proceedings.,
IEEE International Conference on, volume 4, pages 1942–1948 vol.4, 1995.
[18] Xiaodong Li and Xin Yao. Cooperatively coevolving particle swarms for large scale optimization.
IEEE Trans. Evolutionary Computation, 16(2):210–224, 2012.
[19] Mohammad Nabi Omidvar, Xiaodong Li, Zhenyu Yang, and Xin Yao. Cooperative co-evolution
for large scale optimization through more frequent random grouping. In Proceedings of the IEEE
Congress on Evolutionary Computatio, pages 1–8. IEEE, 2010.
[20] Mitchell A. Potter and Kenneth A. De Jong. A cooperative coevolutionary approach to function
optimization. In Proceedings of the International Conference on Evolutionary Computation. The
Third Conference on Parallel Problem Solving from Nature: Parallel Problem Solving from Nature,
PPSN III, pages 249–257. Springer-Verlag, 1994.
[21] Mitchell A. Potter and Kenneth A. De Jong. Cooperative coevolution: An architecture for evolving
coadapted subcomponents. Evolutionary Computation, 8(1):1–29, 2000.
[22] Amirhosein Rabbani, Hossein Aghababaee, and Mohammad A. Rajabi. Modeling dynamic urban
growth using hybrid cellular automata and particle swarm optimization. Journal of Applied Remote
Sensing, 6(1), 2012.
[23] Rocco Rongo, William Spataro, Donato D’Ambrosio, Maria Vittoria Avolio, Giuseppe A. Trunﬁo,
and Salvatore Di Gregorio. Lava ﬂow hazard evaluation through cellular automata and genetic
algorithms: an application to Mt. Etna volcano. Fundamenta Informaticae, 87(2):247–267, 2008.
[24] William Spataro, Donato D’Ambrosio, Rocco Rongo, and Giuseppe A. Trunﬁo. An evolutionary
approach for modelling lava ﬂows through cellular automata. In ACRI 2004, Proceedings, volume
3305 of LNCS, pages 725–734. Springer, 2004.
[25] Bas Straatman, Roger White, and Guy Engelen. Towards an automatic calibration procedure
for constrained cellular automata. Computers, Environment and Urban Systems, 28(1-2):149–170,
2004.
[26] Jasper van Vliet, Arnold K. Bregt, and Alex Hagen-Zanker. Revisiting kappa to account for change
in the accuracy assessment of land-use change models. Ecological Modelling, 222(8):1367 – 1375,
2011.
[27] F. vandenBergh and Andries Petrus Engelbrecht. A cooperative approach to particle swarm
optimization. IEEE Trans. Evolutionary Computation, 8(3):225–239, 2004.
[28] R. White and G. Engelen. Cellular automata and fractal urban form: A cellular modeling approach
to the evolution of urban land-use patterns. Environment and Planning A, 25:1175–1199, 1993.
[29] R. White and G. Engelen. High-resolution integrated modelling of the spatial dynamics of urban
and regional systems. Computer, Environment and Urban Systems, 24:383–400, 2000.
[30] R. White, G. Engelen, and I. Uljee. The use of constrained cellular automata for high-resolution
modelling of urban land-use dynamics. Environment and Planning B: Planning and Design,
24(3):323–343, 1997.
[31] Fulong Wu. SimLand: A prototype to simulate land conversion through the integrated GIS and
ca with ahp-derived transition rules. International Journal of Geographical Information Science,
12(1):63–82, 1998.
[32] Zhenyu Yang, Ke Tang, and Xin Yao. Large scale evolutionary optimization using cooperative
coevolution. Information Sciences, 178(15):2985–2999, 2008.

1643

