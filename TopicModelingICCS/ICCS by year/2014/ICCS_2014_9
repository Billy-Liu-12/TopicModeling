Procedia Computer Science
Volume 29, 2014, Pages 2380–2390
ICCS 2014. 14th International Conference on Computational Science

Hybrid Message Logging.
Combining advantages of Sender-based and Receiver-based
approaches
Hugo Meyer, Dolores Rexachs, and Emilio Luque
Computer Architecture and Operating Systems Department,
University Autonoma of Barcelona, Barcelona, Spain
hugo.meyer@caos.uab.es
dolores.rexachs@uab.es
emilio.luque@uab.es

Abstract
With the growing scale of High Performance Computing applications comes an increase
in the number of interruptions as a consequence of hardware failures. As the tendency is to
scale parallel executions to hundred of thousands of processes, fault tolerance is becoming an
important matter. Uncoordinated fault tolerance protocols, such as message logging, seem
to be the best option since coordinated protocols might compromise applications scalability.
Considering that most of the overhead during failure-free executions is caused by message logging approaches, in this paper we propose a Hybrid Message Logging protocol. It focuses on
combining the fast recovery feature of pessimistic receiver-based message logging with the low
protection overhead introduced by pessimistic sender-based message logging. The Hybrid Message Logging aims to reduce the overhead introduced by pessimistic receiver-based approaches
by allowing applications to continue normally before a received message is properly saved. In
order to guarantee that no message is lost, a pessimistic sender-based logging is used to temporarily save messages while the receiver fully saves its received messages. Experiments have
shown that we can achieve up to 43% overhead reduction compared to a pessimistic receiverbased logging approach.
Keywords: Fault Tolerance, Message Logging, Scalability, MPI, RADIC

1

Introduction

The use of parallel computers, usually represented by computer clusters, is increasingly common
in the scientiﬁc area. These machines gather a large number of processors in order to solve
complex problems. As the number of components increases, the probability of failures increases
too. Therefore, fault tolerance (FT) is a valuable feature to provide high availability to systems.
2380

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2014
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2014.05.222

Hybrid Message Logging.

Meyer et al.

There is much ongoing research in performance and scalability improvement of parallel
applications. However, there is too much diﬃculty in coping with failures and scale at the
same time. As well-written message parallel applications are conceived to scale, therefore FT
solutions should scale as well to do not interfere with application’s scalability. In this work we
will focus on transparent FT techniques for parallel systems based on rollback-recovery.
In the recent past, coordinated approaches were preferred for providing FT support to
parallel applications because of the low failure-free overhead that these strategies introduce.
However, as the number of processes involved increases, the coordination step will become a
relevant source of overhead, and in case of failure all processes must rollback to a previous state.
Message Logging techniques allow faster recovery from failures and only the aﬀected processes
must rollback to a previous saved state, in exchange there is a higher overhead in failure free
executions because each message should be saved in a stable storage. However, according to
[6], message logging has a better application makespan than coordinated checkpoint when the
Mean Time Between Failures (MTBF) is shorter than 9 hours.
When it comes to selecting the appropriate message logging technique, we have ReceiverBased Message Logging (RBML) and Sender-Based Message Logging (SBML) as the main
options. These techniques can be pessimistic or optimistic depending on the moment in which
the messages are ﬂushed to stable storage. SBML introduces less overhead than the RBML
approaches because messages during failure free executions do not need to be re-sent. During
recovery in RBML approaches, the failed processes rely on their own in order to achieve the
previous pre-failure state. When using SBML approaches, the restarted process should ask to
the senders for all its messages.
In this paper, we present a new message logging approach where we combine the advantages
of receiver and sender based approaches. We present here the Hybrid Message Logging (HML )
whose main objective is to reduce the impact of message logging in failure free executions while
maintaining the recovery complexity of the pessimistic RBML approach. Initial results show
that we can achieve up to 43% overhead reduction comparing to a pessimistic RBML approach.
To develop this work we have used the RADIC (Redundant Array of Distributed and Independent Controllers) architecture [9]. RADIC by default uses a pessimistic RBML technique in combination with an uncoordinated checkpoint approach in order to give applicationtransparent and scalable FT support for message passing applications. However, as this is a
ﬂexible architecture it can also be conﬁgured to use a semi-coordinated checkpoint approach
[3] and in this work we propose the the Hybrid Message Logging (HML ) as a new feature.
The rest of the paper is organized as follows: Section 2 describes related work. Section 3
presents an analysis of the classic message logging approaches. Section 4 describes the HML .
Section 5 shows the experimental validation and ﬁnally section 6 draws the main conclusions
and mentions future works.

2

Related Work

In order to provide fault tolerance support to parallel applications many strategies have been
designed using message logging approaches [1] [2]. Message logging approaches can sustain
a much more adverse failure pattern, mainly due to a faster failure recovery. The main disadvantage of message log schemes is that they suﬀer from high overhead during failure-free
executions [6], but they are an scalable solution since only failed processes must rollback, unless
the domino eﬀect is not addressed [4]. Usually message logging techniques are used in combination with uncoordinated checkpoint approaches. Uncoordinated approaches are a good solution
because there is no need for coordination between processes and there is no dependency on
2381

Hybrid Message Logging.

Meyer et al.

global components that could cause bottlenecks and compromise applications’ scalability.
Considering that the main unit of failure in a computer cluster is a node, some recent works
have focused on developing techniques to provide a hybrid or semi-coordinated checkpoint
approach, where a coordinated checkpoint is used inside the node and messages between nodes
are logged to a stable storage [1] [3]. Some works like [7] focus on grouping the processes
that communicate more frequently in order to reduce the number of messages logged using a
coordinated checkpoint between these processes.
In [2] a comparison between a pessimistic and optimistic SBML approaches is presented
where both seem to have a comparable performance. Nevertheless, when using SBML approaches we should consider that in the presence of failures, processes that were not involved
in the failure may need to re-send messages to restarted processes, and also garbage collection
is complex. The pessimistic receiver based message logging approach may be more costly than
a sender based approach, but it guarantees that only failed processes will rollback to a previous
state, without needing the intervention of other processes during re-execution. It is important
to consider that the overheads depend on the application behavior as is showed in [8]. However
the (HML ) focuses on provide the same capabilities of the RBML approach but introducing
less overhead while protecting.
In [10] besides the extensive analysis of classic message logging protocols, they also describe
hybrid message logging protocols (Sender-based and Causal). They propose an orphan-free
protocol that try to maintain performance of sender-based protocols while approaching the
performance of receiver-based protocols. The sender in this case synchronously saves messages
and the receiver asynchronously saves them into stable storage. This proposal is similar to
our HML approach, however further details about the design is missing. They do not cover
the mechanisms to avoid orphan processes creation and do not specify how and where the
received messages are stored. On the other hand, our proposal is based on a distributed stable
storage where each process saves messages on a diﬀerent node (distributed storage) and orphan
processes are avoided by detecting source of non-determinism while receiving messages.

3

Classic Message Logging Techniques

In this section we focus on describing the most used and implemented message logging techniques, their main advantages and disadvantages. We will focus on the pessimistic version of
each technique, because this ensures that only failed processes should rollback in case of failure.
These protocols are based on the assumption that the computational state of a process is fully
determined by the sequence of received messages (Piecewise Deterministic)[4].

3.1

Sender-Based Message Logging

The SBML [5] is a solution that introduces low overhead during failure-free executions. Each
message is logged in the volatile memory of the machine from which the message is being sent.
The main idea behind this message logging technique is to avoid introducing high overheads
in communications and delays in computations by asynchronously write the messages to stable
storage. However, if a process rolls back to a previous state, it will ask to all the senders for
its logged messages. Thus, the senders would have to stop their executions and look for these
messages, unless a FT thread is in charge of managing the message log.
Figure 1(a) describes a pessimistic version of the SBML. The logical times (tx ) only indicate
precedence of steps. When a message M is about to be sent (from P1 to P2), P1 ﬁrst saves the
message (including header information such as destination) and a send sequence number (SSN)
2382

Hybrid Message Logging.

(a) Sender-Based Logging

Meyer et al.

(b) Receiver-Based Logging

Figure 1: Operation of Classic Message Logging Techniques during protection.
which is used for duplicate message suppression during recovery. Then the sender proceeds to
send the message M and the SSN to P2. P2 saves the sender ID (P1) and the SSN in a data
structure, also it increments its receive sequence number (RSN). After this, P2 adds this RSN
to a table indexed by SSN and sends and ACK with the current RSN to P1. P1 receives and
adds the RSN to the log, then it sends an ACK that P2 receives and adds to the table indexed
by SSN. We consider that the message M includes all data referent to sender an receiver.
There is almost no delay in computations while the message logging is taking place since
P1 can continue its execution after saving the message and P2 after receiving it. Nevertheless,
between the reception of a message and the ACK with the RSN included (partially logged
messages), the receiver process should not send messages [5]. If P2 fails and return from a
checkpoint it will broadcast requests for its logged messages and the fully logged messages
will be replayed in ascending RSN order beginning with the stored RSN+1. Partially logged
messages will be sent in any order, no process other than P2 can be aﬀected by the receipt of a
message that is partially logged. If P1 fails and retransmits M, P2 will discard considering the
current SSN value, and if the ACK of this message was not received by P1, P2 will send it.

3.2

Receiver-Based Message Logging

The RBML [4] is a solution that introduces more overhead during failure-free executions because
each received message should be retransmitted to a stable storage (eg. memory buﬀer in another
node.). This solution may introduce overheads in communications and also could introduce
overhead in computations if there are not dedicated resources to deal with message logging.
The main idea behind RBML is to allow failed processes to recover faster by avoiding message
requests to non-failed processes and also simplify the garbage collection, since after a process
checkpoint all its received messages can be erased from the log.
In Figure 1(b) we observe how P1 sends a message M (including header information such
as destination, etc) with a SSN, P2 receives M, appends a RSN to it and sends it to a stable
storage (L2). M is also delivered to the application (instants t4 and t5 can be overlapped). P2
has to wait for the conﬁrmation of L2 in order to allow the application to send new messages,
2383

Hybrid Message Logging.

Meyer et al.

Figure 2: Hybrid Message Logging
this avoids the impact of partially logged messages in other processes besides the receiver.
During recovery, P2 will consume the message log from L2 and reach the pre-fault state.
All messages that P2 sends during recovery will be discarded according to SSN.

4

Hybrid Message Logging

In this section we are going to present the design and implementation of the HML technique
which combines the best features of the SBML and the RBML.

4.1

Key Concepts

We have designed the HML to avoid message losses in presence of failure, thus allowing failed
processes to reach the same before-failure state. We have focused on the next goals:
1. Availability: we focus on providing a strategy that could achieve almost the same Mean
Time to Recover (MTTR) of processes obtained when using a RBML approach. In order to
achieve this, we focus on maintaining the fast recovery feature of the RBML by allowing a
process to restart and continue with its execution without disturbing non-failed processes.
2. Overhead Reduction: the overheads introduced by a RBML technique could be very high
[4]. Another source of overhead comes from the blocking behavior of the pessimistic
version of SBML and RBML. We have focused on removing these blocking phases from
the critical path of a parallel application so we can reduce the overhead.

4.2

Design

Figure 2 shows the basic operation of the HML when messages are sent from one process to
another (P1 to P2). We have introduced a new data structure which is a circular queue that
is used in the sender and also in the receiver in order to allow the receiver to communicate
without waiting for the message log protocol to ﬁnish the full cycle. The logger L2 stores the
2384

Hybrid Message Logging.

Meyer et al.

Figure 3: Hybrid Message Logging. Protection mechanism.

messages in an array in memory which is ﬂushed to disk asynchronously when a memory limit
is exceeded. We consider that message M has all the information about sender and receiver.
Figure 3 shows the ﬂow diagram of the HML during the protection stage. Before sending a
message, P1 inserts the message M with its SSN in the circular queue (CQ). When P2 receives
M (checks the SSN to discard already received messages) it inserts M, the SSN and RSN in
the CQ and proceed with the normal execution. In the meantime, the FT process of P2 will
transmit the message and all the extra data to L2 which is located in another node, and once
P2 receives the conﬁrmation that M has been correctly saved, it will erase M from its CQ (t6
in Figure 3) and inform P1 so it can erase M also from its CQ (t7).
Figure 4 depicts the ﬂow diagram of the recovery procedure of the receiver (we only show
involved tasks and processes, but there are also loggers in Node A and Node B). P2 will restart
from its previous checkpoint saved in Node C and consume the message log saved by the Logger
L2 and after ﬁnishing with this P2 will ask P1’s FT if it has a message in its CQ and consume it.
Considering that we are integrating the HML inside the RADIC FT architecture, the default
recommendation is to do a checkpoint after ﬁnishing recovery in order to delete old messages
and then connect again to a Logger and continue with the normal execution.
It is important to highlight that in most cases the receiver will be able to fully recover
using its message log, however in some cases it will need messages from neighbor senders. The
senders will almost not be aﬀected by requests since the receiver may access directly the CQ of
the senders, and this CQ normally will contain only one partially logged message. The size of
the CQ will not grow uncontrollably since messages are deleted after they are properly saved
2385

Hybrid Message Logging.

Meyer et al.

Figure 4: Hybrid Message Logging. Recovery of the receiver.
in the loggers. However, in some applications maybe senders produce messages faster than
the receiver can consume and for this reason we stop the insertion of messages in CQs when a
memory limit is exceeded and the HML starts to work as the pessimistic RBML.
If the sender is the one that restart from a previous state, it may re-send some messages
that will be discarded according to the current SSN that the receiver has for that sender.
Let us analyze the failure moments and what will happen in each situation (we focus on the
failure of the receiver). To explain the procedure, we will use the logical times (tx )of Figure 2:
• t2-t4 : P1 has the message in its CQ, so once P2 starts re-executing it will consume all
saved log in L2, and then ask P1 for message M.
• t4-t6 : P1 has the message in its CQ, also L2 has saved M but do not send the ACK to
P2, so L2 will erase this message and P1 will re-send M to P2 during re-execution.
• From t6 : M has been saved in L2 and conﬁrmed to P2. P2 will consume this message
from the message log. In situations where M has not been erased from P1’s queue, after
restarting P2 will continue with the logging procedure where it stopped and will send the
ACK to P1 so it will remove M from its CQ.
This approach can sustain multiple failures. However, protected processes and their protectors cannot fail at the same time (Node B and Node C of Figure 3). To avoid the creation
of orphan processes, if we detect that a wild card reception is being used, we do not allow the
receiver to continue till the message is fully logged, behaving as the pessimistic RBML.

4.3

Implementation Details

In order to provide an application-transparent FT support, RADIC architecture has been included inside Open MPI. This allows us to provide FT support to MPI applications acting as
a (transparent) middleware between the MPI application and the MPI library, then any MPI
2386

Hybrid Message Logging.

Meyer et al.

application could use our mechanisms without modifying the source code. The RADIC-OMPI
implementation is described in detail in [9].
The HML has been included in the Vprotocol Framework of Open MPI since this framework
enables the implementation of new message logging protocols in the Open MPI library [2]. The
main components of our message logging implementation are described below, as the HML is
a combination of sender and receiver approaches we split the functionality to explain it:
1. Sender Message Logging: Before sending a message, its payload is saved in a CQ in memory. As this CQ will be continuously modiﬁed, there is no need to ﬂush it to disk. Before
sending another message to the same receiver, the non-ﬁnished logging transmissions will
be checked to delete messages from the CQ.
2. Receiver Message Logging: A received message is introduced inside the CQ and then it is
sent to the logger residing in another node using a non-blocking communication. When
the logger informs that the message is saved, it is removed from the CQ. Before receiving
a message the SSN is checked in order to discard already received messages.
3. Logger : We have added special threads (one per application process) that are executed
outside the communicator of the parallel application. Each logger publishes its name so
an application process can get connected to a logger residing in a diﬀerent node when
ﬁnishing the MPI Init command . When a message is received from a connected process,
the logger will save this message in its volatile memory until a deﬁned level of memory is
consumed, then it will asynchronously start to ﬂush data to disk or it can also command
a checkpoint because a memory limit was exceeded.

5

Experimental Validation

The main contribution presented in this paper focuses on reducing the overhead added to parallel applications while using a message logging approach. In this section we present experimental
evaluation that has been carried out in order to probe our hypothesis.
The experiments have been made using a Dell PowerEdge M600 with 8 nodes, each node
with 2 quad-core Intel R Xeon R E5430 running at 2.66 GHz. Each node has 16 GB of main
memory and a dual embedded Broadcom R NetXtreme IITM 5708 Gigabit Ethernet. RADIC
features and the HML have been integrated into Open MPI 1.7 and as testbed we have used 3
representative benchmarks of the NAS Parallel Benchmarks (NPB).
In Figure 5 we summarize all the results obtained by comparing the Hybrid Message Logging
approach with a Pessimistic Receiver-based Message Logging approach. In these experiments
we are only measuring the impact of each message logging technique without considering the
impact of checkpoints. The loggers are sharing resources with application process, so there
is also an impact in computations but that is homogeneously distributed among processes by
using CPU aﬃnity to attach each logger to a core. Below we explain each type of executions
made:
• Recv: Executions made using the default pessimistic RBML mechanism of RADIC. All
messages are saved in a logger residing in another node, even messages between processes
residing in the same node. We are assuming the usage of a fully uncoordinated checkpoint
approach.
• Hybrid: In this executions we are using the Hybrid Message Logging (HML ) proposed in
this paper. We are assuming the usage of a fully uncoordinated checkpoint approach.
2387

Hybrid Message Logging.

Meyer et al.

• Recv-SemiCoord: Executions made using the default pessimistic RBML mechanism of
RADIC. In this case we are assuming the usage of the Semi-coordinated Checkpoint of
RADIC Architecture [3]. Only messages transmissions that go from one node to another
are saved in a logger residing in another node.
• Hybrid-SemiCoord: Executions made using the HML proposed in this paper using the
Semi-coordinated checkpoint approach of RADIC.
According to the results shown in Figure 5 we can observe that with the HML we reduce
the introduced overhead in all cases. In each column we can observe the overhead introduced
by each message logging technique used in comparison to the execution without using message
logging. When using the uncoordinated approach of RADIC the overhead reduction goes from
1% in the worst case scenario (LU class C) to 43% (CG class B) in the best case.
When using the semi-coordinated approach of RADIC we can see that the overheads that
both techniques introduce are reduced (checkpoints overhead will increase a little since coordination is needed). Also in this results we can observe an overhead reduction of 1% in the worst
case scenario (LU class C) and 34% (CG class B) in the best case.
The obtained results show that the HML introduces less overhead in parallel application
than the RBML maintaining almost the same complexity during recovery, since only in some
failure scenarios there will be message transmissions from senders to the restarted processes.

6

Conclusions

In this paper we have proposed a novel message logging approach combining the advantages
of two of the most classical message logging approach: Sender-based Message Logging and
Receiver-based Message Logging. The Hybrid Message Logging approach focuses on providing
a fault tolerant solution with low MTTR by accelerating the recovery process of Sender-based
approaches and at the same time reducing the impact of failure-free executions in comparison
with receiver-based approaches.
Our work relies on the usage of data structures to save messages temporarily (in senders and
receivers) and allowing the application to continue its execution without restricting message
emissions while other messages are being saved in stable storage. We have evaluated our
proposal using the NAS Parallel Benchmark suite and obtain reduction in overheads up to 43%
when comparing with a pessimistic receiver-based logging approach.
Future work will extend the analysis made in this paper to analyze the impact in the recovery
phase of the HML . Also an analysis to determine the best conﬁguration of the message loggers
that allows to reduce the impact in computations will be made.

7

Acknowledgments

This research has been supported by the MICINN Spain under contract TIN2007-64974, the
MINECO (MICINN) Spain under contract TIN2011-24384, the European ITEA2 project H4H,
No 09011 and the Avanza Competitividad I+D+I program under contract TSI-020400-2010120.
2388

Hybrid Message Logging.

Meyer et al.

Figure 5: Overheads introduced considering the NAS Parallel Benchmarks.

References
[1] Aurelien Bouteiller, Thomas Herault, George Bosilca, and Jack J. Dongarra. Correlated set coordination in fault tolerant message logging protocols for many-core clusters. Concurrency and
Computation: Practice and Experience, 25(4):572–585, 2013.
[2] Aur´elien Bouteiller, Thomas Ropars, George Bosilca, Christine Morin, and Jack Dongarra. Reasons for a Pessimistic or Optimistic Message Logging Protocol in MPI Uncoordinated Failure
Recovery. IEEE Cluster 2009, pages 229–236, 2009.
[3] Marcela Castro, Dolores Rexachs, and Emilio Luque. Adding semi-coordinated checkpoint to radic
in multicore clusters. In PDPTA 2013, pages 545–551, 2013.
[4] E. N. (Mootaz) Elnozahy, Lorenzo Alvisi, Yi-Min Wang, and David B. Johnson. A survey of
rollback-recovery protocols in message-passing systems. ACM Comput. Surv., 34(3):375–408,
September 2002.
[5] David B. Johnson and Willy Zwaenepoel. Sender-based message logging. In Digest of Papers: 17
Annual International Symposium on Fault-Tolerant Computing, pages 14–19, 1987.

2389

Hybrid Message Logging.

Meyer et al.

[6] P. Lemarinier, A. Bouteiller, T. Herault, G. Krawezik, and F. Cappello. Improved Message Logging
Versus Improved Coordinated Checkpointing for Fault Tolerant MPI. 2012 IEEE International
Conference on Cluster Computing, 0:115–124, 2004.
[7] Yi Luo and D. Manivannan. Hope: A hybrid optimistic checkpointing and selective pessimistic
message logging protocol for large scale distributed systems. Future Generation Computer Systems,
28(8):1217–1235, 10 2012.
[8] Hugo Meyer, Ronal Muresano, Dolores Rexachs, and Emilio Luque. Tuning spmd applications in
order to increase performability. ISPA’13, Melbourne, Australia, pages 1170–1178, 2013.
[9] Hugo Meyer, Dolores Rexachs, and Emilio Luque. RADIC: A fault tolerant middleware with
automatic management of spare nodes. PDPTA’12, Las Vegas, USA, pages 17–23, 2012.
[10] S. Rao, L. Alvisi, and H.M. Vin. The cost of recovery in message logging protocols. Reliable
Distributed Systems, 1998. Proceedings. Seventeenth IEEE Symposium on, pages 10–18, Oct 1998.

2390

