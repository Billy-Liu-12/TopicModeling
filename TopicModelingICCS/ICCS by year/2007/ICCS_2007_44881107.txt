Research on Dynamic Updating of Grid Service
Jiankun Wu, Linpeng Huang, and Dejun Wang
Department of Computer Science, Shanghai Jiaotong University, Shanghai, 200240,
P.R. China
jkwu@sjtu.edu.cn huang-lp@cs.sjtu.edu.cn wangdejun@sjtu.edu.cn

，

，

Abstract. In complicated distributed system based on grid environment, the
grid service is inadequate in the ability of runtime updating. While in the
maintenance of systems in grid environment, it is an urgent issue to solve to
support the transparent runtime updating of the services, especially in the case
of services communicating with each other frequently. On the basis of
researches on the implementation of grid services and interaction between them
following WSRF [3], this paper introduces proxy service as the bridge of the
interaction between services and achieved the ability to support the runtime
dynamic updating of grid services. Gird service updating must happen
gradually, and there may be long periods of time when different nodes run
different service versions and need to communicate using incompatible
protocols. We present a methodology and infrastructure that make it possible to
upgrade grid-based systems automatically while limiting service disruption.
Keywords: Grid service, Dynamic updating, Proxy service, Simulation service.

1 Introduction
With the change of application requirements and wide use of Internet, the across-area
and across-organization complicated applications have developed greatly in various
fields. The distributed technology has become the main method in these applications.
Accompanying with the system expanding day by day, the maintenance and
modification of the system became more frequent. Research shows that nearly half of
costs are spent in the maintenance of the complicated distributed system. Services
have to be paused in the traditional procedure of software maintenance, but some
system such as Bank must provide services continuously in 24 hours, any short-time
pause will make great lost. How to resolve the dilemma? Answer is Dynamic
Updating technology. Software Updating is defined as the dynamic behavior
including software maintenance and update in the life-cycle of software system [6].
Due to maintaining the system with whole system working normally, Dynamic
Updating is significant. The grid computing technology is the latest achievement of
the development of distributed technology, aiming to resolve the resource share and
coordination in WAN distributed environment and avoid the drawbacks such as
inadequate computation ability or unbalance loads[1][7][8]. It is a trend to develop
new complicated system based on grid technology and transplant the current system
into grid environment.
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 1107–1114, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1108

J. Wu, L. Huang, and D. Wang

As application system based on grid technology consists of services with specific
function, the system maintenance is mainly maintaining services. As the same as
other distributed systems, the services maintenance in grid application system still
face the problem of terminating service. Therefore it is necessary to introduce
Dynamic Updating technology in the service maintenance of grid environment. It has
more practical significance especially when the built system is in its long-time
running.
In the current grid technology, if we want to update or modify the working grid
services, we must stopped and start new service to run. This model is inadequate in
dynamic switch in running service. The substitution of grid service will make part of
the system terminated or produce long delay, especially in the case of service
communicate with each other frequently.
The proxy service and simulation service are introduced in the architecture
supporting grid service updating. The proxy service is not only responsible for the
service requests transmitting but also responsible for contacting with updating
component information service through subscribe/publish styles to obtain the new
version information in time. The interaction and interface of different service will be
transparency by introducing proxy service. And the simulation service is responsible
for simulating of behavior and state format between different versions of service.
This paper presents a flexible and efficient updating method that enables gridbased systems to provide service during updating. We present a new methodology
that makes it possible to updating grid-based systems while minimizing disruption
and without requiring all upgrades to be compatible. The rest of paper is organized as
follow. In section 2, the updating requirements of grid service is discussed. In
section 3, the architecture and relative technology supporting grid service updating
are presented and discussed. In section 4, prototype system and relative tests are
described. Finally, summary and future works are given.

2 Architecture Supporting Grid Service Updating
The architecture models a grid-based system as a collection of grid services. A service
has an identity, a collection of method that defines its behavior, and a collection of
resource representing state. Services communicate by sending soap message. A
portion of a service’s state may be persistent. A node may fail at any point; when it
node recovers, the service reinitializes itself from the persistent portion of its state and
when updating, the persistent state may need change the data format for the new
version.
To simplify the presentation, we assume each node runs a single top-level service
that responds to remote requests. Thus, each node runs a top-level service—proxy
grid service. An upgrade moves a system from one version to the next by specifying a
set of service updating, one for each grid service that is being replaced. The initial
version has version number one and each subsequent version has the succeeding
version number.

Research on Dynamic Updating of Grid Service

1109

2.1 System Architecture
A class updating has six components: <oldService, newService, TF, SF,
pastSimulationService, futureSimulationService>. OldService identifies the service
that is now obsolete; newService identifies the service that is to replace it. TF
identifies a transform function that generates an initial persistent state for the new
service from the persistent state of the old one. SF identifies a scheduling function
that tells a node when it should update. PastSimulationService and
futureSimulationService identify services for simulation objects that enable nodes to
interoperate across versions. A futureSimulationService allows a node to support the
new service’s behavior before it upgrades; a pastSimulationService allows a node to
support the old service’s behavior after it upgrades. These components can be omitted
when not needed.

Fig. 1. Updating architecture

2.2 Analysis of Proxy Service Mechanism
The object of proxy service introducing is obtaining the transparency between
services. When the grid service is updating, the other grid services in the same grid
system will be not aware of it. The proxy service is not only responsible for the
service requests transmitting but also responsible for contacting with updating
component information service through subscribe/publish styles to obtain the new
version information in time.
2.3 Version Management
Because the updating doesn’t complete in twinkling, it is necessary to support the
multi version coexist at same time. The simulation service is responsible for the
simulating of different interface and saving and recovering of states between current
version and old version, current version and new version services.

1110

J. Wu, L. Huang, and D. Wang

In order to accurately locate the simulation service of relative version for proxy
service, each simulation service has a resource to hold the version information such as
request interfaces, parameter formats, URL for the software data and so on.
When the service updating happens, the work flow of the proxy service is showed
as figure 3. The Proxy service gets the simulation service according to relative
resource and then deliver the service request to the respect simulation service and
return the result to the service requester in the finally.

Fig. 2. Version information in service updating

Fig. 3. Simulation procedure

2.4 Subscribe/Publish Model in Updating Procedure
The subscribe/publish style is adopted for publishing service version changing
information in order to make the updating information report more quickly and reduce
the load of network. The proxy service in every grid node subscribes to the updating
component information service for the services version changing information. Due to
the proxy service receiving the information, it will make some actions according to
the relationship between current service in the node and the new service. This style is
more efficient than the continue request/report method in the traditional updating
system. It makes the nodes deployed grid service focus on the main computing task
without initiatively querying the new service version information all the time.
As showed in figure 4, the proxy service is activated as a basic service when the
grid service container starts running. At the same time, the proxy service initiatively

Research on Dynamic Updating of Grid Service

1111

subscribe to the service version changing information of updating component
information service. The new version grid service is stored in the grid data base and
the URL of the data base is hold in the resource of updating component information
service. As the proxy services aware of the new service information of current
service, it requests the Grid Ftp with URL information to transmit the software data to
current node and deploys it. It reports the updating mid-states through request/reports
method to updating information service and the states are also represented by resource
which hold the URL of the data base storing the mid-states.

Fig. 4. Interaction model in updating platform

2.5 Scheduling of Service Management
We could add filters to the model that would determine some subset of nodes that
need to upgrade. Adding filters is enough to allow restructuring a system in arbitrary
ways.
In order to make the grid service dynamic updating more efficient, dynamic grid
service updating scheduling which is based on monitoring the load of nodes is
adopted in this paper. The performance evaluating model that bases on CPU
frequency, CPU load, memory capacity, occupied proportion of memory, disk
capacity and occupied proportion of disk is built. This model could make the updating
procedure more efficient and reduce the service interruption. We adopt the following
formula to define the evaluation.

ω = ωCPU + ωMEM + ωDISK

(1)

ωCPU = pCPU _ Freq ∗ CPU _ Freq + pCPU _ Load ∗ CPU _ Load

(2)

ω MEM = pMEM _ Cap ∗ MEM _ Cap + pMEM _ Occupied ∗ MEM _ Occupied

(3)

1112

J. Wu, L. Huang, and D. Wang

ω DISK = pDISK _ Cap ∗ DISK _ Cap + pDISK _ Occupied ∗ DISK _ Occupied

(4)

In the above formula, ω is the final evaluating parameter, ωCPU is CPU evaluating

parameter, ω MEM is memory evaluating parameter, ωDISK is disk evaluating parameter,
p∗∗ is the coefficient of the relative ∗∗ ,and the ∗∗ is load parameter derived by monitor.
Through the evolution of such parameter described above, updating administrator
or updating management system will order the parameter according ω and select the
light load nodes according a special scope to update firstly the new version service.
The updating will be completed according to the similar rule until all the service in
the system complete updating.
2.6 States Management
States management reorganizes a service’s persistent state from the representation
required by the old service to that required by the new service and the current service
to that required by the past simulation service and future simulation service. Thus,
client services do not notice that the service has upgraded, except that client services
of the new type may see improved performance and fewer rejected requests, and
client services of the old type may see decreased performance and more rejected
requests. We adopted checkpointing technology [4][5][10][11] and process
migration[12] technology to save the states of service states and recover the states for
the new version service.
2.7 Updating Transactions of Grid-Based System
Due to the failure of updating procedure, the recovering of updating failure should be
considered. The updating transaction is adopted for managing the updating failure.
The updating mid-state is stored in the database through resources of updating
information service.
When system updating failures, the administrator or updating managing system
recover the system to the original point from the mid updating states stored in
database and the updating of system seems doesn’t have happen. So the system
updating procedure is an atom transaction [9]. The checkpointing technology
[4][5][10][11] and process migration[12] technology are adopted as state saving
technology and state recovering.

3 Prototype and Analysis
In order to validate the method’s validity, we build a grid platform infrastructure
which supports grid service dynamic updating. GT4[2] is adopted as the software
platform and service is developed conform to WSRF[3] specification. The updating
scheduling basing on monitor of computing resource with WS-MDS[2] will make the
updating procedure more efficient through selecting more optimal updating subset of
grid system nodes. The physical environment is showed as figure 5.

Research on Dynamic Updating of Grid Service

1113

Fig. 5. Grid environment supporting service updating

4 Summary and Future Work
A grid service dynamic updating method in grid environment is presented in this
paper and proxy service is introduced in this method for service request transmitting.
The transparency between services could reach by introducing proxy service. The
mechanism supporting multi version coexist at same time is introducing simulation
service. Simulation service is responsible for simulating interface behavior and states
format transferring of different versions.
In the aspect of state transferring, we adopt a mature state transfer method used in
other updating system. In the future, we will research more suitable state transferring
mechanism for system constructed by grid service.
Acknowledgments. This paper is supported by Grand 60673116 of National Natural
Science Foundation of China, Grand 2006AA01Z166 of the National High
Technology Research and Development Program of China (863).

References
1. Foster, I., Kesselman, C., Tuecke, S., “The Anatomy of the Grid: Enabling Scalable
Virtual Organization”, International Journal of Supercomputer Applications, 2001.3, Vol.
15(3), pp200-222
2. Globus Toolkit 4.0. http://www.globus.org/, 2006.11
3. WSRF-The WS-Resource Framework. http://www.globus.org/wsrf/, 2006.5
4. Michael Hicks. Dynamic Software Updating. PhD thesis, Computer and Information
Science, University of Pennsylvania, 2001

1114

J. Wu, L. Huang, and D. Wang

5. Peter Ebraert, Yves Vandewoude, Theo D’Hondt, Yolande Berbers. Pitfalls in
unanticipated dynamic software evolution. Proceedings of the Workshop on Reflection,
AOP and Meta-Data for Software Evolution(RAM-SE'05), 41-51
6. Yang Fu-qing, Mei Hong, Lu Jian , Jin Zhi. Some Discussion on the Development of
Software Technology. Acta Electronica Sinica(in Chinese) ,2002, 30(12A):1901-1906
7. I Foster, C Kesselman. The Grid: Blueprint for a new computing infrastructure1.San
Francisco: Morgan2Kaufmann ,1998
8. Ian Foster1, Carl Kesselman, et al. The Physiology of the Grid: An Open Grid Services
Architecture for Distributed Systems Integration. http://www.globus.org/reserch/papers/
ogsa.pdf
9. Iulian Neamtiu, Michael Hicks, Gareth Stoyle, Manuel Oriol. Practical Dynamic Software
Updating for C. Proceedings of the ACM Conference on Programming Language Design
and Implementation (PLDI2006), pp72-83.
10. G. Bronevetsky, M. Schulz, P. Szwed, D. Marques, and K. Pingali. Application-level
check pointing for shared memory programs. In Proc. ASPLOS, 2004.
11. J. S. Plank. An overview of checkpointing in uniprocessor and distributed systems,
focusing on implementation and performance. Technical Report UT-CS-97-372, Computer
Science Department, the University of Tennessee, 1997.
12. J. M. Smith. A survey of process migration mechanisms. ACM Operating Systems
Review, SIGOPS, 22(3):28–40, 1988.

