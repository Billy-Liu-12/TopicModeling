Pheromone Based Dynamic Vaccination for Immune
Algorithms
Yutao Qi, Fang Liu, and Licheng Jiao
Institute of Intelligent Information Processing, Xidian University, Xi’an, China, 710071
{qi_yutao,f63liu}@163.com
lchjiao@mail.xidian.edu.cn

Abstract. The vaccination which is a most effective protection against the virus
is also a helpful part of the artificial immune systems (AIS). A vaccination in
AIS means modifying some genes of an antibody in accordance with priori
knowledge so as to gain higher affinity with greater probability. Since vaccination is problem specific, what can we do if we have no idea about the problem?
To address this, we propose a pheromone based dynamic vaccination for real
coded immune algorithms in this paper. The pheromone which is a term of the
ant colony system is used as a carrier of knowledge learned from population’s
evolution and acts as a producer of dynamic vaccines. Experiments on numerical optimization problems indicate that the pheromone based vaccination operator has the ability of acquiring useful information about the objective functions
and developing effective vaccines dynamically.

1 Introduction
Artificial immune systems (AIS) which can be defined as computational systems
inspired by theoretical immunology and observed immune functions has attracted
significant research interest over the years [1]. Inspired by the clonal selection theory,
De Castro pioneered the Clonal selection algorithm (CSA) [2] in 2000. After that,
many clonal selection based artificial immune algorithms have been proposed. The
dynamic clonal selection algorithm (DynamiCS) constructed by Kim in 2002 [3] and
polyclonal strategy proposed by Licheng Jiao in 2003 [4] are two of the most outstanding contributions. Lei Wang and Licheng Jiao introduced immune concepts and
methods into evolutionary algorithm to form immune evolutionary algorithms [5]. In
this work, two immune operators of vaccination and immune selection are designed
and they have been proven to be able to restrain the degenerate phenomenon of GA.
Vaccination is a means of stimulating the immune system to produce diseasepreventing antibodies. Vaccines can be regarded as a priori knowledge about a certain
disease. In the study of artificial immune systems, vaccines have been designed for
different problems such as numerical optimization problem [6], TSP problem [7],
SAR image segmentation [8] and intrusion detection problem [9] and so on. These
vaccines are problem specific. What can we do when we have no idea about the problem? This paper is dealing with an approach for preparing vaccines adaptively when
we know nothing about the character of the problems dealt with.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 1053–1060, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1054

Y. Qi, F. Liu, and L. Jiao

This work proposed a pheromone based dynamic vaccination for immune algorithms to learn valuable information from population’s evolution by stimulating the
pheromone deposition and volatilization mechanism of ant colonies. In addition, the
acquired knowledge is used to produce dynamic vaccines which act as a guidance for
further evolutions. Experiments on numerical optimization problems indicate that the
pheromone based vaccination operator has the ability of acquiring useful information
about the objective functions and developing effective vaccines dynamically.

2 Pheromone Based Vaccination
The pheromone is a term from ant colonies. Inspired by the foraging behavior of ants,
M. Dorigo pioneered the ant colony algorithm (ACA) [9] and applied it to the traveling salesman problem (TSP) [10]. Ant colony algorithm is a novel category of bionic
algorithm for optimization problems. It is suitable for solving combinational optimization problems, but has the limitation of stagnation and is easy to fall into local optimums when dealing with massive problems. Moreover, it is difficult for ACA to
deal with optimization problems with continuous searching space. However, ACA
provides illuminations that can be utilized effectively to learn the developing tendency of genes with continuous coding spaces. Inspired by ACA, a pheromone based
vaccination operator is designed for artificial immune algorithms to solve optimization problems with continuous searching space. The optimization problems with continuous searching space can be described as follows:

min f (x),

x = ( x1 , x2 ,..., xn ) ∈ S

(1)

In formula (1), f (x) is the target function of the optimization problem, S ⊆ R n is
the n-dimensional continuous searching space with border xi ≤ xi ≤ xi , i = 1, 2,..., n .
2.1 Real Number Coding and Antibody-Antigen Affinity Definition

The proposed vaccination operator is designed for real number coded immune algorithms. For an optimization problem with n variables, the antibody coding is a real
number string with length n, described as, gi ∈ [ 0,1] i = 1, 2,..., n . Note

X = ( x1 , x2 ,..., xn ) is the variable of the optimization problem dealt with, A is the

antibody coding of the variable X , described by A = e( X) . X is called the decoding of antibody A, described by X = e −1 ( A ) . Then we can get:
xi = xi + ( xi − xi ) × g i , i = 1, 2,..., n

(2)

As antibody’s affinity must be a positive value, we construct a negative real
function g ( X) which is consistent with f (x) . In other words, for any two variables X1 , X 2 ∈ S , if g ( X1 ) > g ( X 2 ) then f ( X1 ) > f ( X 2 ) . In this case, the original

Pheromone Based Dynamic Vaccination for Immune Algorithms

1055

optimization problem becomes min { g (e −1 ( A )) : A ∈ I} , in which I is the antibody
space. The antibody-antigen affinity is defined by equation (3):
−1

(3)

Affinity ( A ) = − g (e ( A ))

2.2 Pheromone Matrix

From the point of view of each gene location, its value changes from one to another
between 0 and 1 to find an appropriate value that maximize affinity of the antibody.
Since there are many antibodies in the population, it looks as if there are many ants
walk between 0 and 1 to look for food. Therefore, the foraging behavior of ants can
be mimicked. The values of genes are continuous, but pheromone concentrations on
the pheromone trail can only be recorded discretely. To overcome this issue, we quantize the coding domain of each gene [0,1] into finite number of segments evenly.
For each gene location, an m-dimensional real vector is provided to take records of
pheromone concentrations, where m is the number of discrete domains. The vector
can be described as Phi = ( ph1 , ph2 ,..., phm )
phmin ≤ ph j ≤ phmax 1 ≤ j ≤ m , in

，

，

which phmin and phmax are the upper and lower limit of pheromone concentration
respectively. As the antibody has n gene locations, these n pheromone vectors make a
pheromone matrix with size n × m , noted as Ph = ( Ph1, Ph 2 ,L , Ph n )T . It is fulfilled
with an initial value of w.
2.3 Vaccination Operators Based on Pheromone

The pheromone based vaccination proposed in this paper has two parts. One of them
is the vaccine injecting operator. In this operator, vaccines will be produced and injected using information from the pheromone matrix. The other one is the pheromone
updating operator. It learns useful information from the foregoing evolution by manipulation the pheromone concentration of the pheromone matrix.
2.3.1 Vaccine Injecting Operator
The vaccine injection operator will be applied on antibodies of the population after
the immune genetic operations as probability pi . The vaccine injection operator can
be described by the following pseudo code:
For each antibody of the population A k = ( g k1 , g k 2 , L g k n )
If { pi } = TRUE

i = Random(n)

⎧j−r

L=⎨

， j = Location( g ) ；
k

i

if j − r > 0

⎩ m + j − r else

if j + r ≤ m
⎧j+r
,R=⎨
, r = ⎣⎢ m / 8⎦⎥
⎩ j + r − m else

；

1056

Y. Qi, F. Liu, and L. Jiao

t = Roulette( L, R )

；

⎧Gauss ( g , σ )

( g )′ = ⎨
k

k

i

⎩ Latest ( t )

i

[ min , max ]
j

j

if t = j
else

， σ = 10

−

1
3

lg m

；

( )；

g ki = g ki ′

End If
End For

In which, pop_size is the size of the population. The function Random(n) returns a
random integer between 1 and n. The function Location( g k i ) returns the serial number of segment in which g k i is located. Roulette( L, R ) is to select a segment between
L and R by mean of the roulette selection according to pheromone concentrations. The
mutation radius r = ⎣⎢ m / 8⎦⎥ is the largest integer smaller than m / 8 . g k i and ( g k i )′
are respectively the gene value before and after the vaccine injection operation.
Gauss ( g k i , σ ) [ min j , max j ] means gauss mutation with a standard variation of σ , and it
returns a value within the j-th segment. In other words, the returned value is between
min j and max j , where min j and max j are respectively the lower limit and the upper
limit of the j-th segment. Latest ( t ) is the latest gene value that is located in the t-th
segment. The midpoint value between mint and maxt will be returned if no gene has
previously been assigned to values located in this segment.
2.3.2 The Pheromone Updating Operator
For each antibody in the population, apply this operator on it after the vaccine injecting operation. Let A be any antibody in the population and A′ be its offspring after
the immune genetic operation and the vaccine injecting operation. The pheromone
updating operator can be described by the following pseudo code:
If A′ = g1′, g 2′ ,..., g n′ is superior to A = g1 , g 2 ,..., g n
For each gene of antibody A

If gi ≠ gi′ , i = 1, 2,..., n
Ls = Location( gi ) , Le = Location( gi′)

；

Update pheromone of segments between Ls and Le :
ph ′ = [ (1 − ρ ) ph + Δph ] ⎣⎡ min ph , max ph ⎦⎤ ,

Δph =

Q
abs ( Le − Ls )

；

Evaporate pheromone of segments beside Ls and Le :
ph ′ = (1 − ρ ) ph ⎡⎣ min ph , max ph ⎤⎦ ;

End If

Pheromone Based Dynamic Vaccination for Immune Algorithms

1057

End For
End If

In which, ρ ∈ ( 0,1] is the pheromone trail decay coefficient. Q is a real constant and
it represents the total amount of pheromone deposed by an ant at a time. The function
Location( g ) returns the serial number of segment which real number g is located in.
The function abs(a) means the abstract of number a. ph and ph′ are respectively the
pheromone concentrations before and after updating. The value of ph and ph′ must
be no smaller than the lower limit min ph and no larger than the upper limit max ph .

3 Simulation Experiments
In order to validate the effectiveness of the proposed vaccination approach, the immune algorithms with pheromone based vaccination are executed to solve the following test functions.

∑
F02-Min f ( x ) = ∑

n

F01-Min f ( x ) =

2

x
i =1 i

; S = [-100, 100]n ; f min = 0;

xi + ∏ i =1 xi ; S = [-10, 10]n ; f min = 0;
n

n
i =1

；S = [-100, 100] ； f = 0;
F04-Min f ( x ) = ∑ ( ⎢⎣ x + 0.5 ⎥⎦ ) ；S = [-100, 100] ； f = 0;
F05-Min f ( x ) = ∑ ( − x sin ( | x | ) ) ;S = [-500, 500] ; f =-418.983×n;
F03-Min f ( x ) = max i {| xi |, 1 ≤ i ≤ n}
n

n

min

2

i =1

n

min

i

n

n

i =1

i

min

i

F06-Min f ( x ) = ∑ i =1 ( x − 10 cos(2π xi ) + 10) ; S = [-5.12, 5.12]n; f min =0;
n

2
i

⎛
⎝

F08-Min f ( x) =

n ∑ i =1 (
1

n

⎞

⎛
x ⎟ − exp⎜ ∑
∑
N
⎝n
1

F07-Min f ( x ) = −20exp⎜ −0.2

n

2

i

i

⎠

xi − 16 xi + 5 xi
4

2

1

n

i =1

⎞
⎠

cos(2π xi ) ⎟ + 20 + e ;S=[-30, 30]n; f min = 0

) ；S=[-5, 5] ； f
n

min

；

＝-78.33236；

3.1 Effectiveness of Pheromone Based Dynamic Vaccination

Experiments have been done to investigate the effectiveness of pheromone based
dynamic vaccination. Table 1 is comparisons of the performance between the clonal
selection algorithm (CSA) [2] and the CSA with pheromone based dynamic vaccination (PHDV_CSA). Table 2 is comparisons between the immune programming (IP)
[5] and the IP with pheromone based dynamic vaccination (PHDV_IP). All results
presented are averages of fifty independent runs. Each run continues until either an
optimal solution has been found or the maximum number of generation 1000 is
reached. In each run, the control parameters were set as follows: the population size
pop_size is 20, the test function dimension n is 10, the number of segments m is 1000,
the pheromone trail decay coefficient ρ is 0.2, the constant of total pheromone deposited in one trip Q is 800, the initial pheromone concentration w is 1, the lower and

1058

Y. Qi, F. Liu, and L. Jiao

upper limit of pheromone concentration are respectively 0.5 and 15 and the vaccine
injection probability pi is 0.6. Other parameters for CSA and IP are the same as those
used in reference [2] and [5].
Table 1. Comparison between CSA and PHDV_CSA
Test
functions

F01
F02
F03
F04
F05
F06
F07
F08

Average function evaluations
CSA
PHDV_CSA
26077
19074
26335
22800
206936
166911
17931
5414
47839
17450
28619
19680
30393
25306
22786
7279

The optimal mean (Standard)
CSA
PHDV_CSA
8.13×10- 4 (4.13×10- 4) 3.21×10- 4 (2.36×10- 4)
2.07×10- 4 (1.67×10- 4) 3.19×10- 5 (4.19×10- 6)
7.31×10- 4 (5.66×10- 4) 3.98×10- 4 (2.14×10- 4)
0 (0)
0 (0)
-4189.83 (3.15×10- 3)
-4189.76 (6.74×10- 3)
5.76×10- 4 (3.36×10- 4) 1.52×10- 4 (1.17×10- 4)
7.31×10- 4 (1.75×10- 4) 5.18×10- 5 (3.32×10- 6)
-78.3323 (1.77×10- 5)
-78.3304 (3.29×10- 5)

Table 2. Comparison between IP and PHVV_IP
Test
functions

F01
F02
F03
F04
F05
F06
F07
F08

Average function evaluations
IP
PHDV_IP
29629
18524
30852
20459
397596
173426
22164
7096
56580
18126
32460
18288
36799
24421
26126
9329

The optimal mean (Standard)
IP
PHDV_IP
2.84×10- 4 (3.31×10- 4) 1.95×10- 4 (1.63×10- 4)
1.76×10- 4 (3.35×10- 4) 2.82×10- 5 (3.37×10- 6)
7.06×10- 4 (2.17×10- 4) 5.13×10- 4 (3.39×10- 4)
0 (0)
0 (0)
-4189.82 (2.76×10- 3)
-4189.74 (4.11×10- 3)
3.67×10- 5 (6.17×10- 5) 1.27×10- 4 (5.42×10- 4)
4.92×10- 4 (1.97×10- 4) 4.55×10- 5 (7.94×10- 6)
-78.3322(2.34×10- 5)
-78.3306(6.71×10- 4)

It can be seen from these data that PHDV_CSA and PHDV_IP perform much
better than CSA and IP, as they have found superior solutions with less function
evaluations. These data enable us to conclude that the pheromone based dynamic
vaccination is effective on improving the searching capability of immune algorithms.
Moreover, the comparisons of the standard deviation indicate that the proposed vaccination strategy makes the immune algorithms much more robust.
3.2 Convergence of Pheromone

This experiment is designed to investigate whether the pheromone based vaccination
approach has learned the real information about the test functions. Considering the
first vector of the pheromone matrix, Fig.1 and Fig.2 show the convergence process
of the pheromone distribution while solving the optimization problem of the 30 dimensional test functions F1 and F5 with PHDV_CSA.

Pheromone Based Dynamic Vaccination for Immune Algorithms

1059

Fig. 1. The change of the pheromone distribution for F1

Fig. 2. The change of the pheromone distribution for F5

Take F1 for example, its best value is x* = ( 0, 0,L , 0 ) . The best value in the first
dimension is 0 which is mapped to a gene value of 0.5. It can be seen from Fig.3 that,
the pheromone concentrations converge to the segment around the very value of 0.5.
Another example is F5. The best value of the function F5 is
x* = ( 402.9687, 402.9687,L , 402.9687 ) . Its best value in first dimension 402.9687 is
mapped to a gene value of 0.9029687 in the coding space. Fig.4 indicates that the
pheromone concentrations converge to the segment around the very value after 500
iterations. Therefore, we come to the conclusion that the pheromone based vaccination
approach has achieved the real information about the objective functions.

4 Concluding Remarks
In this paper, we presented a pheromone based vaccination approach for immune
algorithms. Our objective was to design a dynamic vaccination strategy which is independent from prior knowledge about the problem for immune algorithms, so that
they could be more self-adaptive and easy to use.
Inspired by the ant colony system, the proposed approach learned useful information from population’s evolution by stimulating the pheromone deposition and
volatilization mechanism of ant colonies. Experimental results indicate that, the distribution of pheromone concentrations reflects the real information about the objective
function, and the pheromone based dynamic vaccination is efficient in improving the
performance of immune algorithms.

1060

Y. Qi, F. Liu, and L. Jiao

However, the proposed vaccination is suitable for immune algorithms without
crossover operator. How to make a modification so as to cooperate with the crossover
operation is one of the future works.

Acknowledgments. This work has been partially supported by the National Natural
Science Foundation of China under Grant No. 60372045 and 60133010, and the
National Grand Fundamental Research 973 Program of China under Grant No.
2001CB309403.

References
1. L. N. de Castro, J. Timmis. Artificial Immune Systems: A New Computational Intelligence
Approach. Springer-Verlag, Heidelberg, Germany, August 2002.
2. L. N. De Castro, F. J. Von Zuben. The Clonal Selection Algorithm with Engineering Applications, Proceedings of Workshop on Artificial Immune Systems and Their Applications, 2000:36-37.
3. Kim, J. and Bentley, P. J. Towards an Artificial Immune System for Network Intrusion
Detection: An Investigation of Dynamic Clonal Selection, Proceedings of Congress on
Evolutionary Computation, 2002:1015-1020.
4. Ruochen Liu, Haifeng Du, Licheng Jiao, Immunity Clonal Strategies. Proceedings of the
Fifth International Conference on Computational Intelligence and Multimedia Applications. 2003:290.
5. Lei Wang, Jin Pan, Licheng Jiao. The Immune Programming. Chinese Journal of Computers. 2000, 23(8): 806-812.
6. Yanjun Li, Tiejun Wu. A Novel Immune Algorithm for Complex Optimization Problems.
Proceedings of the International Conference on Control and Automation. Hangzhou China.
June, 2004: 2309-2312.
7. Licheng Jiao, Lei Wang. A Novel Genetic Algorithm Based on Immunity. IEEE Transactions on Systems, Man and Cybernetics. Part A, 2000, 30(9): 1-10.
8. Hua Bo, Fulong Ma, Baojun Han, Licheng Jiao. SAR Image Segmentation based on Immune Algorithm. Proceedings of the International Conference on Control and Automation.
Budapest, Hungary. June, 2005: 1279-1282.
9. A. Colorni, M. Dorigo, V. Maniezzo. Distributed optimization by ant colonies. Proceedings of the 1st European Conference on Artificial Life. Pans, France. 1991:134-142.
10. M. Dorigo, L. M. Gambardella. Ant Colony System: A cooperative Learning Approach to
the Traveling Salesman Problem. IEEE Transactions on Evolutionary Computation. 1997.
1(1):53-66.

