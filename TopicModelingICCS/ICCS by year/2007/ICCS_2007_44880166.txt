Guaranteed Adaptive Antialiasing Using
Interval Arithmetic
Jorge Fl´orez, Mateu Sbert, Miguel A. Sainz, and Josep Veh´ı
Institut d’Electr`
onica, Inform`
atica i Autom`
atica
Universitat de Girona, Girona 17071, Spain
jeflorez@eia.udg.es

Abstract. Interval arithmetic has been used to create guaranteed intersection tests in the ray tracing algorithms. Although those algorithms
improve the reliability in the visualization of implicit surfaces, they do
not provide an alternative to avoid point sampling inside the pixel. In
this paper, we develop an interval adaptive antialiasing algorithm (IAA)
by means of the study of the coherence of sets of rays crossing a pixel
(instead of individual rays) in order to detect variations over the hit
surface. This method allows us to obtain better visualizations than the
traditional interval ray tracing algorithms.

1

Introduction

The ray tracing of implicit surfaces suﬀers of accuracy problems, which are related to thin features that ”disappear” when some special surfaces are rendered.
This occurs because the computers can not guarantee the robustness in ﬂoating
point operations during the intersection test [3,6]. Many authors have proposed
reliable ray tracing algorithms that perform guaranteed intersection tests based
on interval arithmetic [2,7,8].
However, those authors do not propose a reliable way to reduce aliasing in the
visualization of the surfaces. An alternative is to use adaptive sampling [9]. In
this technique, rays are traced for every corner of the pixel. If the values are too
diﬀerent, the pixel is subdivided and new rays are traced in the new corners. Due
to the fact that it is still possible to miss thin parts of the surface, this method
uses bounding boxes for small objects. If the ray intersects a bounding box, the
sampling rate is increased to guarantee that view rays do not miss the object.
Although eﬀective in most of the cases, this technique does not work very well
with long thin objects [4].
Other approaches are based on gathering information of adjacent rays as cone
tracing [1] and beam tracing [5]. The main disadvantage of those proposals is
that they require computationally complex intersection tests.
This paper introduces a method called interval adaptive antialiasing (IAA)
with the following characteristics:
– This method examines areas of the pixel instead of points as in point sampling. Interval arithmetic is used to guarantee that small parts of the surface
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 166–169, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Guaranteed Adaptive Antialiasing Using Interval Arithmetic

167

inside the pixel are not missed. All the set of rays that cover an area of the
pixel are treated as a unique ray.
– The information obtained from sets of rays is studied to determine if the
area covered by the rays presents too much variation over the surface.
– This method does not require bounding boxes to detect small features as
adaptive sampling does. Also, the complexity of the intersection test is almost the same as the traditional interval ray tracing.

2

Interval Adaptive Antialiasing (IAA)

The intersection between the implicit function f (x, y, z) = 0 and a ray deﬁned
by:
x = sx + t(xp − sx ); y = sy + t(yp − sy ); z = sz + t(zp − sz )
is deﬁned by the function:
f (sx + t(xp − sx ), sy + t(yp − sy ), sz + t(zp − sz ))
where (sx , sy , sz ) are the coordinates of the origin or view point, (xp , yp , zp ) are
the values of a point in the screen and t indicates the magnitude in the direction
of the ray. If the parameter t is replaced with an interval T , a set of real values
can be evaluated instead of a unique value. To cover pixel areas instead of points,
the real values of xp and yp of the screen must be considered as interval values
too. The function to include the new interval values can be deﬁned as follows:
F (Xp , Yp , T ) = F (sx + T (Xp − sx ), Sy + T (Yp − sy ), sz + T (zp − sz ))

(1)

To perform the evaluation with equation 1, the intervals Xp and Yp must
be ﬁxed to a range of values inside the pixel, and a bisection process must be
started over the parameter T . Every interval generated for the subdivision of T
is evaluated to know if the set of rays intersects the surface. If the set of rays does
not intersect any part of the implicit surface, then the result of the evaluation
of equation 1 does not contain zero (0 ∈
/ F (Xp , Yp , T )). Otherwise, it is possible
that one or more rays in that pixel area intersect the surface. In that case, the
parameter T must be subdivided until the machine precision is achieved.
To save the values of T near to the intersection of the set of rays, the following process is performed: when 0 ∈ F (Xp , Yp , T ) and F (Xp , Yp , T.Inf ) > 0, the
inﬁmum value of the result (the less positive) is saved in a vector. Also if 0 ∈
F (Xp , Yp , T ) and F (Xp , Yp , T.Sup) < 0, the maximum value is saved in another
vector. When the subdivision process is over, the smaller of the positive points and
the bigger of the negatives are taken to create the interval of the ﬁnal value of T .
The interval T is used to detect variations over the surface in the following
way: using T , the interval values of X, Y and Z are calculated. Those values
correspond to the set of all the intersections of the set of rays. Also, the interval
normal is calculated using the derivative of the function F (X, Y, Z), which is
the same derivative of the implicit function using interval values of X, Y, Z.
Finally, the interval dot product between the set of normals and the view rays

168

J. Fl´
orez et al.

is calculated. If the width of the interval containing the dot products between
the set of rays and the normals is bigger than a predeﬁned threshold, or if the
surface is not monotonic for the values of T , the surface varies too much in the
evaluated area.
The interval adaptive antialiasing is perfomed in every pixel as follows: all the
area of the pixel is evaluated using process described in section 2.1. If the surface
varies too much inside the pixel, the pixel is divided in four subpixels and the
process is performed on them. In other case, the pixel or subpixel evaluated is
shaded using the average of the normals. If the pixel is divided, the average of the
shade values of the subpixels is used to obtain the ﬁnal shade value of the pixel.

3

Experimentation and Results

The IAA method was tested over the surfaces presented in ﬁgure 1. The comparisons have been performed between an adaptive algorithm using a traditional
ray tracing algorithm, and our interval adaptive algorithm. Figures 1a and 1b
show a twist with a shadow. The problems in the visualization in (a) occur because shadow rays miss the thin details of the twister. Also, the visualization
of ﬁgure 1a takes 27 minutes; ﬁgure 1b takes 20 minutes. The time diﬀerence

Fig. 1. Experimentation images. (a) Fine details of the shadow are not well visualized
using traditional interval ray tracing. (b) Using IAA, those details are better visualized.
(c) A Blobby surface rendered by IAA algorithm. (d)A tri-trumpet surface, in which
some sections appear separated although interval arithmetic is used for the intersection
test, as is shown in (d). Using IAA, the surface is rendered correctly (f).

Guaranteed Adaptive Antialiasing Using Interval Arithmetic

169

is due to IAA detect pixels without too much variation inside, using only one
intersection test. Using the traditional ray tracing algorithm, at least four rays
are traced for every pixel.

4

Conclusions

In this paper we have presented an interval adaptive antialiasing method (IAA)
for the interval ray tracing of implicit surfaces. It can be adapted to the traditional interval algorithms used to ray tracing implicit surfaces, without increasing
the complexity of the intersection tests. Also, the proposed technique generates
better visualization results than methods based on point sampling, specially
for surfaces with thin features. IAA is completely based on interval arithmetic,
which guarantees the reliability of the algorithm. As a future work, we are planning to apply our method for reﬂections and refractions. In this paper, sets of
rays are traced to visualize view and shadow rays.

Acknowledgements
This work has been partially funded by the European Union (European Regional Development Fund) and the Spanish Government (Plan Nacional de Investigacin Cientﬁca, Desarrollo e Innovacin Tecnolgica, Ministerio de Ciencia
y Tecnologa) through the co-ordinated research projects DPI2002-04018-C0202, DPI2003-07146-C02-02, DPI2004-07167-C02-02, DPI2005-08668-C03-02 and
TIN2004-07451-C03-01 and by the government of Catalonia through SGR00296.

References
1. Amanatides, J.: Ray Tracing with Cones. Computer Graphics. 18 (1984) 129–135
2. Capriani, O., Hvidegaard, L., Mortensen, M., Schneider, T: Robust and eﬃcient ray
intersection of implicit surfaces. Reliable Computing. 1(6) (2000) 9–21
3. Fl´
orez, J., Sbert, M., Sainz, M., Veh´ı: Improving the interval ray tracing of implicit
surfaces. Lecture Notes in Computer Science. 4035 (2006) 655-664
4. Genetti, J., Gordon, D.: Ray Tracing With Adaptive Supersampling in Object Space.
Graphics Interface. (1993) 70–77
5. Heckbert, P., Hanrahan, P.: Beam Tracing Polygonal Objects. Computer Graphics.
18 (1984) 119–127”,
6. Kalra, D., Barr, A.: Guaranteed ray intersection with implicit surfaces. Computer
Graphics (Siggraph proceedings). 23 (1982) 297–206
7. Mitchell, Don: Robust ray intersection with interval arithmetic. Proceedings on
Graphics interface ’90. (1990) 68–74
8. Sanjuan-Estrada, J., Casado, L., Garc´ıa I.: Reliable Algorithms for Ray Intersection
in Computer Graphics Based on Interval Arithmetic. XVI Brazilian Symposium on
Computer Graphics and Image Processing. (2003) 35–44
9. Whitted, T: An Improved Illumination Model for Shaded Display. Communications
of the ACM. 23 (1980) 343-349

