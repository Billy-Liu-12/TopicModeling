Towards a Formal Foundation for Aggregating
Scientiﬁc Workﬂows
Frank Terpstra, Zhiming Zhao, Wico Mulder, and Pieter Adriaans
Informatics Institute
University of Amsterdam
Kruislaan 419, 1098VA, Amsterdam, The Netherlands
{ftrpstra,zhiming,wicomul,pietera}@science.uva.nl

Abstract. In e-Science, scientiﬁc workﬂow systems are used to share
data and knowledge in collaborative experiments. In recent work we discussed the concepts of a workﬂow bus [1], allowing multiple workﬂow
systems to be coupled in a meta-workﬂow system with multiple execution models. In this paper we propose an approach for a formal model
to perform the task of reasoning of about the execution models of such
workﬂow systems. We propose that I/O Automata can be used as a
formalism to prove the correctness of complicated workﬂows involving
multiple workﬂow engines and execution models.
Keywords: I/O Automata, formalism, workﬂow design.

1

Introduction

In scientiﬁc workﬂow research many diﬀerent implementations of workﬂow systems exist [2,3,4,5]. These systems vary in the formal models by which workﬂows
are described and execution semantics are interpreted, sometimes even allowing
multiple execution models within one system [2]. This is in part a result of the
diﬀerent types of applications they try to support, which can have very diﬀerent
requirements. It is also in part due to a lack of standards, each system having its
own workﬂow deﬁnition language. The execution models in the Business Process
community control easily map onto Petri Nets and thus formal reasoning about
workﬂows is mostly done using Petri Nets [6]. But where business workﬂows are
about describing actual business processes, scientiﬁc experiments are more constrained and need to be exactly reproducible. Within e-science not only are there
more diverse execution models, there also is a need to use diﬀerent models within
one application. This can be catered for by systems such as Kepler [2]. Furthermore, the need to combine diﬀerent workﬂow management systems within one
scientiﬁc experiment is emerging. Solutions such as the workﬂow bus [1] are
being developed within our research group to suit these needs.
Working with diﬀerent execution models within one experiment can seriously
complicate the design procedure. A way to prove the correctness of these complicated experiments is needed, as well as assistance in exploring the workﬂow
design space. Therefore we need a formal model to reason about the associated
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 216–219, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Towards a Formal Foundation for Aggregating Scientiﬁc Workﬂows

217

design issues. In previous work we used Turing machines as a formal model to
reason about workﬂow design [7]. One of the advantages to this approach was
that we could isolate the execution model in our formal description, allowing us
to reason about every possible type of workﬂow. Being able to reason on this
level can give a formal basis for studying meta workﬂow problems such as the
workﬂow bus [1].
In this paper we introduce an existing formal model called Input Output
Automata [8](abbreviated to I/O Automata), to perform the task of reasoning
about workﬂow design.

2

Workﬂow Design Problem

To reason about workﬂow design one needs a formal model to represent workﬂows. One often employed formalism is petri-nets. They are well suited to study
control ﬂow in workﬂows [6]. There are more issues involved in workﬂow design:
– Connectivity, are two workﬂow components compatible both in data type
and runtime behavior.
– Workﬂow Provenance, can the experiment be exactly reproduced using the
provenance data recorded by a workﬂow system.
– Workﬂow representation, what level of detail is desired in a workﬂow description.
For our research into a workﬂow bus where multiple (sub) workﬂows with different execution models are connected, these other issues play a more important
part. We propose the use of I/O automata as a formal representation for reasoning about workﬂow representation and runtime behavior.
I/O Automata were ﬁrst introduced by Lynch and Tuttle [8], and have been
used for the study of concurrent computing problems. They form a labeled state
transition system consisting of a set of states, a set of actions divided into inputinternal- and output actions(as illustrated in ﬁgure3) and a set of transitions
which consists of triples of state, action and state. This allows us to study the
inherently concurrent nature of workﬂow systems. One of the characterizing
properties of I/O Automata is that input actions are ”input enabled”, they have
to accept and act upon any input. Figure 4 illustrates both that the ”input
enabled” property deﬁnes connections between automata as well as one I/O automaton being computationally equivalent to a composition of several automata.
We study reasoning about representation as a hierarchical problem. Here abstract descriptions should be computationally equivalent to detailed low level
descriptions of workﬂows. This requirement is satisﬁed by a property called compositionality. In ﬁgure 4 compositionality for I/O automata is illustrated.
The composition of a workﬂow representation starts with a desired input and
output as well as a set of available building blocks. The representation of a
workﬂow needs to strike a balance between generality and speciﬁcness, resulting
in an ideal workﬂow which is neither to abstract nor to detailed. This idea is
illustrated in ﬁgure 2, both a top down and bottom up approach are possible.

218

F. Terpstra et al.

In the ﬁrst, the initial input and output requirements are reﬁned into multiple
workﬂow steps. In the second, existing resources are combined (automatically)
until they satisfy requirements. The design process can be formalized in a lattice
as we did in our previous work [7]. This lattice is set up between the most abstract
and most detailed representations of the computational process that a workﬂow
satisﬁes. In other words, in this design lattice only the representation diﬀers. All
diﬀerent representations within this lattice are computationally equivalent.

Fig. 1. Workﬂow design lattice

Fig. 3. I/O Automaton

Fig. 2. Workﬂow design problem

Fig. 4. Illustration of compositionality principle

Workﬂow components are very general computational elements, which can
be modeled as an I/O Automaton. Workﬂow systems in practice use diﬀerent
execution models based on either data-ﬂow or control ﬂow. To model these execution models I/O Automata representing workﬂow components need constraints
placed on them. In [9] it is shown how the Kahn principle, used as a basis for
some data-ﬂow execution models, can be modeled using I/O Automata. The
main constraints are that the automata have to be deterministic and all connections are one to one.

3

Conclusions and Future Work

I/O Automata may not provide the answer to all problems involved in creating
a workﬂow bus and other formalisms may be needed. However I/O Automata
are suitable for reasoning about workﬂow representation as well as the runtime

Towards a Formal Foundation for Aggregating Scientiﬁc Workﬂows

219

behavior of complicated workﬂows involving multiple workﬂow engines and execution models. Using I/O Automata as a formalism, automatic workﬂow composition can be easily modeled and studied. In future work we plan to give a
detailed overview of which formalisms are best suited to what part of workﬂow
design. Furthermore we will show how existing tools for I/O Automata can be
used to provide practical support in the workﬂow design process.
Acknowledgments. This work was carried out in the context of the Virtual
Laboratory for e-Science project (www.vl-e.nl). Part of this project is supported
by a BSIK grant from the Dutch Ministry of Education, Culture and Science
(OC&W) and is part of the ICT innovation program of the Ministry of Economic
Aﬀairs (EZ).

References
1. Zhao, Z., Booms, S., Belloum, A., de Laat, C., Hertzberger, B.: Vle-wfbus: a scientiﬁc
workﬂow bus for multi e-science domains. In: E-science 2006, 2nd IEEE International
Conference on e-Science and Grid Computing, Amsterdam Netherlands. (2006)
2. Ludascher, B., Altintas, I., Berkley, C., Higgins, D., Jaeger-Frank, E., Jones, M.,
Lee, E., Tao, J., Zhao, Y.: Scientiﬁc workﬂow management and the kepler system.
Concurrency and Computation: Practice and Experience, Special Issue on Scientiﬁc
Workﬂows 18(10) (08 25 2006)
3. Majithia, S., Shields, M.S., Taylor, I.J., Wang, I.: Triana: A Graphical Web Service
Composition and Execution Toolkit. In: Proceedings of the IEEE International
Conference on Web Services (ICWS’04), IEEE Computer Society (2004) 514–524
4. Afsarmanesh, H., Belleman, R., Belloum, A., Benabdelkader, A., van den Brand, J.,
Eijkel, G., Frenkel, A., Garita, C., Groep, D., Heeren, R., Hendrikse, Z., Hertzberger,
L., Kaandorp, J., Kaletas, E., Korkhov, V., de Laat, C., Sloot, P., D.Vasunin, Visser,
A., Yakali., H.: Vlam-g: A grid-based virtual laboratory. Scientiﬁc Programming
(Special issue on Grid Computing) 10 (2002) 173–181
5. Oinn, T., Addis, M., Ferris, J., Marvin, D., Senger, M., Greenwood, M., Carver, T.,
Glover, K., Pocock, M.R., Wipat, A., Li, P.: Taverna: A tool for the composition
and enactment of bioinformatics workﬂows. Bioinformatics Journal. online (June
16, 2004)
6. Aalst, W.M.P.V.D., Hofstede, A.H.M.T., Kiepuszewski, B., Barros, A.P.: Workﬂow
patterns. Distrib. Parallel Databases 14(1) (2003) 5–51
7. Terpstra, F.P., Adriaans, P.: Designing worklfow components for e-science. In: Escience 2006, 2nd IEEE International Conference on e-Science and Grid Computing,
Amsterdam Netherlands. (2006)
8. Lynch, N.A., Tuttle, M.R.: An Introduction to Input/Output Automata. CWI
Quarterly 2(3) (1989) 219–246
9. Lynch, N.A., Stark, E.W.: A proof of the kahn principle for input/output automata.
Information and Computation 82(1) (1989) 81–92

