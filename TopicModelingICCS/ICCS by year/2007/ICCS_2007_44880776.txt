Physically-Based Interaction
for
Networked Virtual Environments
Christoph Anthes, Roland Landertshamer, and Jens Volkert
GUP, Institute of Graphics and Parallel Processing
Johannes Kepler University, Altenbergerstrasse 69, A-4040 Linz, Austria
canthes@gup.uni-linz.ac.at

Abstract. Physics engines are gaining importance in the area of computer games to create better visual experiences. In the context of networked Virtual Reality (VR) applications they can be useful to provide
new interaction possibilities. This paper will provide an introduction into
the area of physics simulation and the use of it to create more realistic
and interactive multi-user virtual worlds. Examples for the usefulness of
such physics engines can be found in a variety of training applications.

1

Introduction

In the past years Virtual Reality (VR) has become a useful tool for a variety
of application areas. Networked Virtual Environments (NVEs) allow dislocated
users from all over the globe to communicate and interact in a shared virtual
space.
If we take a look at safety training applications like the SAVE project [1,2]
where the user has to react on hazardous incidents in a petroleum reﬁnery or the
VETT project, which provides shipboard ﬁreﬁghting training [3] we discover that
most of them are single user applications or work with two users a trainer and a
single trainee, where only the trainee enters the VE and gets instructions from
the trainer. In the real world safety training is typically performed in teams,
as hazardous incidents are fought by teams. Due to that reason it is obvious
that safety training VR applications would proﬁt from multi-user interaction
and collaboration.
Another issue which arises is the ﬁdelity of interaction. Users are typically
interacting with a Virtual Hand interaction technique. If the representation of
the users cursor collides with an entity in the VE interaction can be performed.
The level of interaction is normally reduced to clicking on the entity which can
for example result in the triggering of an event. This is suﬃcient to train basic
procedures during incidents. To maximise the training in such environments
physics engines should be incorporated to allow for a more realistic behaviour of
the VE, where the user has to perform the movement of the object manipulation
like he would in the real world. This could be throwing a lever, or pushing down
a virtual door handle in order to pull the door open afterwards.
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 776–783, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Physically-Based Interaction for NVEs

777

The inVRs framework1 is designed to ease the creation of NVEs. Its physics
module is used to implement realistic interaction possibilities with the environment. Joints for example can interconnect nodes of the scene graph and allow
for a simple scene description. Gravity and collision detection become important
during manipulation and placement tasks. This makes inVRs an ideal candidate
to create NVEs for safety training.
This Section has given a brief introduction on the use of physics in training
environments. The next Section will provide an overview on the related work. In
the following the use of physics will be described in the context of the framework.
Network communication for the physically based interaction will be introduced
and some example setups will be given. The ﬁnal Section concludes the paper
and gives an outlook of future developments.

2

Related Work

Problem domain and related work of this paper are distributed over three different areas, physics, network communication and interaction.
A detailed overview on the design of a 3D rigid body physics engine for games
is given by David H. Eberly [4]. He describes in detail the mathematical and
physical background while Baraﬀ focuses in his thesis [5] on how physical constraints can be transformed in to mathematical problems and how they can be
solved.
The commonly available NVEs like DIVE [6], AVOCADO [7] or MASSIVE
[8], do not support the use of physics engines due to several reasons. Simulating
physics in none client-server topologies is very cumbersome. In a peer-to-peer
(p2p) topology one client would have to be selected to perform the role of a
server, to guarantee a consistent state of the VE. Most of the existing VR systems incorporate p2p topologies or hybrid approaches, to achieve a high responsiveness and scalability. Another issue which constraints the use of physics is
the computational intensity of such simulations. A good overview on NVEs in
general is given by Singhal and Zyda in [9].
A variety of interaction techniques for VEs has been described by Mine. [10].
The psychological aspects of collaborative object manipulation have been researched on many levels by Roberts et al. [11].On the technical level Broll gives
ideas on how to solve concurrent object manipulation [12].
Jorisson and Lamotte combine the use of physics engines and the VR to
create a platform for collaborative VEs where objects contain the interaction
information and behaviour [13]. Their networking topology uses a classic client
server approach, where one server is responsible for the physics update of the
whole VE.
Early approaches in scene graphs like VRML and Inventor use sensors to
constrain object movement. The use of joints provides similar functionality but
provides additional features like the swinging of a door.
1

Pronounced In"v3:s.

778

3

C. Anthes, R. Landertshamer, and J. Volkert

Framework Architecture

The inVRs framework consists of modules for navigation, interaction and network communication. These modules are interconnected via a system core, which
provides databases to store information about the VE and the users inside the
VE as well managers for communication handling between the modules and the
databases. A brief overview on the architecture is given by Anthes and Volkert
[14]. inVRs provides the possibility to concurrently manipulate the same geometry as the same time by two dislocated users. It supports this collaboration in
many ways including the use of an additional physics module.
One of the important aspects of the framework is the distinction between discrete events which are distributed via the event manager and continuous streams
of transformation data which is handled by the transformation manager. A detailed description of the transformation and event handling can be found in [15].
The physics module makes use of these two managers, to generate for example
collision events or change the transformations of the objects in the NVE.

4

Physics Module

To increase the immersion of the users in a VE it is important that the virtual
objects show a realistic behaviour. Therefore a physics engine can be used. In
the context of VEs it is responsible for the simulation of the behaviour of rigid
bodies, which comprises the following tasks:
– rigid body motion
– collision detection and response
– constrained interaction of rigid bodies
Each object in the VE that should be simulated by the physics engine has to
be represented by a physics object. For rigid body motion this physics object
has to contain the mass and the inertia tensor of the virtual object. With this
information the physics simulation can calculate the linear and angular velocities
of the object and determine its position and orientation. The resulting velocities of the objects are a result of forces and torques which act on the physics
object. To avoid that two physics objects interpenetrate the physics engine has
to check for collisions. Therefore each physics object needs a description of its
shape. In general the triangle mesh of the virtual object could be used for the
collision detection but in real time simulations the shape of the objects is often
approximated by 3D primitives like spheres or boxes to reduce the amount of
computation time. When the physics engine encounters a collision then the collision response has to be applied. In this step the physics engine calculates an
impulse as a result of the collision. This impulse is then applied to both objects to
avoid an interpenetration. For constrained interaction of rigid bodies the physics
engines provide constraints or joints. A joint describes a restriction of motion for
a physically simulated object. Joints can be used to connect two objects together
and/or allow only special relative movement between two objects. A joint can

Physically-Based Interaction for NVEs

779

also be used to restrict the motion of a single object. The possibilities of motion
restriction cover the free rotation around a point, the rotation around an axis,
the movement along an axis or any combination of this constraints. Each joint
can again be restricted in it’s movement range. This allows to deﬁne a rotation
to a maximum angle or the movement to a maximum distance.
The physics module of the inVRs framework uses a physics engine to allow
constrained interaction with virtual objects. It therefore allows to connect virtual
objects via joints. XML is used to deﬁne the properties of the joints and to
interconnect nodes of the scene graph. Since each entity in the VE has a unique
id, which is stored in a database of the framework it is possible to interconnect
entities based on their ids. The physics module allows to deﬁne thresholds for
each joint to execute events when these thresholds are exceeded. The possible
types of thresholds depend on the types of the joint. Examples are a rotation
angle around the joint axis or a distance from the untransformed position. The
events that should be executed can be deﬁned in the conﬁg ﬁle. For each joint
the user can set activation conditions which describe when the joint should be
active and when not. An inactive joint is seen as a ﬁxed connection between
two objects. The physics module of the inVRs framework allows to activate
or deactivate a joint when a user interacts with an entity, when other joints are
active or not, when a joint exceeds a deﬁned angle or a joint exceeds a predeﬁned
distance. An example for this conditions can be found in the Section 6.

5

Network Communication

To synchronise VEs typically locking mechanisms are used. The philosophy of
the inVRs framework is to avoid locking and keeping a loose consistency. The
presented approach transmits a continuous stream of transformation data packets via UPD. The transformation data is mostly generated by the tracking systems of the interconnected VR installations. Transformations from objects in
the scene can be transmitted as well if necessary via this distribution channel.
The network topology of the framework is a peer-to-peer topology, which works
with fully replicated databases of the NVE to guarantee a high responsiveness.
Since tracking information can be considered ubiquitous if two or more users
are interacting in an NVE very little additional messages are needed to implement physically based interaction or concurrent object manipulation. If a local
user picks a part of a physically simulated entity, which could be for example a
door handle or a vent in a VE, a pick event is sent to the remote users. This
message is transfered in a reliable way and consists of a unique user and entity id.
Additionally it contains information about the time, when the entity was picked
and an oﬀset from the origin of the entity to the picking point, which is determined based on the interaction technique of the user (e.g. ray-casting or virtual
hand). The remote systems are now notiﬁed that the user is connected with the
entity. With the information about the oﬀset to the users picking point and the
additional tracking data they are able to perform a local physics simulation.

780

C. Anthes, R. Landertshamer, and J. Volkert

Once the object is released a reliable message is sent which stores data about
the exact position where the object is dropped with an additional timestamp.
The remote clients interpolate the position and orientation of the object between
current transformation at the time they received the message to the transformation in the time in the past which is stated in the timestamp of the release
message. The duration of this interpolation can be set in system setting of the
framework.
Using this type of synchronisation, object manipulation can be performed
locally without the need of additional transformations for each simulated object.
By using reliable release messages and transforming the object to a ﬁnal position
the NVE is brought back into a consistent state.

6

Example Setups

A variety of application areas of physics in a VE arise. An example for the use of
joints would be a door. The same mechanisms could be applied on any entities
in the VE. They are ideal to implement vents or handles in a safety training
application. Furthermore object manipulation with a virtual hand technique or
concurrent object manipulation can be handled by the use of physics.
6.1

A Door in the VE

In this example the scene graph for the door consists of three interconnected
nodes. The frame, the actual door and a door handle. The the door is attached
to the frame with a hinge joint on the z-axis. The rotation around the frame is
restricted to +/- 90 degrees. Additionally a threshold area of an angle of 1 degree
is deﬁned in which the door is considered closed. If no user is interaction with the
door and it is in that threshold area it will be rotated to it’s idle state and will
be deactivated. The handle is as well attached to the door with a hinge joint. It
rotational freedom is limited 45 degrees around the y-axis. Thresholds measure
when it is rotated more than 25 degrees. In this case the joint between the frame
and the door is activated and the door can be rotated. Figure 1 illustrates the
setup of such a door while Listing 1.1 shows the XML deﬁnition of the example
joint setup.
In the initial state frame, door and handle are in passive mode. None of these
joints are simulated by the physics module at this stage. The user can grab
the handle, if this action has taken place, the joint between handle and door is
activated and simulated by the physics module. Once the user has rotated the
handle over the threshold, the joint between the door and the frame become
active. The whole door is now simulated in the physics module. since the axes
of the two joints are independent no problems can arise during the calculation
of the position of the door and it’s parts, it is always unique.
Using these joints for interaction does not only provide easy mechanisms to
create functional elements in a VE. Furthermore it give the VE a very realistic

Physically-Based Interaction for NVEs

781

feeling, when the user has the possibility to swing doors. It still has to be proven,
that by actually pulling down a door handle and pulling the door open the user
is trained in a better way than he is by simply clicking on the object.

Fig. 1. A door in the VE

<! - - Door Example -->
<! - - door knob -->
< joint type = " hinge " id = " 1 " >
< entities environmentId = " 0 " entityId1 = " 3 " entityId2 = " 2 "
anchorEntity = " 2 " / >
< anchor xPos = " -2 " yPos = " 5 " zPos = " 0 " / >
< axis xDir = " 0 " yDir = " 0 " zDir = " 1 " / >
< angles min = " -45 " max = " 0 " / >
< activeIF entity = " 1 " isGrabbed = " 1 " / >
</ joint >
<! - - door body -->
< joint type = " hinge " id = " 2 " active = " 0 " >
< entities environmentId = " 0 " entityId1 = " 2 " entityId2 = " 1 "
anchorEntity = " 2 " / >
< anchor xPos = " 4 " yPos = " 0 " zPos = " 0 " / >
< axis xDir = " 0 " yDir = " 1 " zDir = " 0 " / >
< angles min = " -90 " max = " 90 " / >
< deactivateIF jointId = " 2 " angle1GT = " -1 " / >
< activateIF jointId = " 1 " angle1LT = " -25 " / >
</ joint >
Listing 1.1. Joint deﬁnition of a door

782

6.2

C. Anthes, R. Landertshamer, and J. Volkert

Natural Interaction

To realise natural interaction tracking systems are incorporated. The movement
of the users input device is directly mapped on the cursor position and orientation
in the VE. The physics module can be used to simulate object properties like
gravity.
If gravity is used in the physics simulation of the environment one client has to
act as a master for the simulation. When an object is dropped gravity has to be
calculated and the proper rebound has to be calculated. This type of simulation
has to be calculated locally by the master client, who is in controll of the object.
The transformations of the matrices have to be transferred over the network.
6.3

Concurrent Object Manipulation

Concurrent object manipulation as described by Broll [12] allows two users to
manipulate the same attribute of the same virtual object in real-time. This type
of interaction can be extremely useful in construction scenarios or safety applications. Obstacles could be carried away or building material could be arranged.
The VR systems mentioned in Section 2 do not support cooperative manipulation. They lock the access to an object to a exclusively to a single user. Broll
suggests to combine interaction requests and calculate the resulting object position on one participants site, to keep the system consistent. An alternative
approach was developed by Froehlich et al. [16] who incorporate physics to cooperatively manipulate objects during assembly tasks. The approach developed
by Froehlich attaches a physically simulated spring between the cursor of the
user and the point, where the user grabbed the object.
In our case concurrent object manipulation is detected if two transformation
on the same object are detected by the transformation manager. In that case
a special merging is introduced which can be implemented using Froehlich’s
physics approach. The resulting transformation is applied on the object. Since
the immediate input transformations from the local user and slightly delayed
transformations from the remote user which still can be extrapolated are available it is possible to provide a relatively correct and highly responsive representation of the cooperatively manipulated object.

7

Conclusions and Future Work

This paper has given an introduction on the use of physics simulation for interaction in NVEs. A physics module for the the inVRs framework allows to
deﬁne joints for interconnection of scene graph nodes. These nodes can be used
for highly interactive NVEs. Three types of interaction have demonstrated the
use of physics simulation for VEs, especially training scenarios.
Advanced methods for synchronsiation of physics have to be found. A similar
approach than synchronising particle systems on multiple displays might be used.
The distribution of random seeds for some aspects of the physics calculation
might help to simulate parts of the VE locally.

Physically-Based Interaction for NVEs

783

References
1. Haller, M., Holm, R., Volkert, J., Wagner, R.: A vr based safety training in a petroleum reﬁnery. In: Annual Conference of the European Association for Computer
Graphics (EUROGRAPHICS ’99). (1999)
2. Haller, M., Kurka, G., Volkert, J., Wagner, R.: omvr - a safety training system for
a virtual reﬁnery. In: ISMCR ’99, Tokyo, Japan (1999)
3. Tate, D.L., Sibert, L., King, T.: Virtual environments for shipboard ﬁreﬁghting
training. In: IEEE Virtual Reality Annual International Symposium (VRAIS ’97),
Albuquerque, NM, USA, IEEE Computer Society (1997) 61–68
4. Eberly, D.H.: Game Physics. The Morgan Kaufmann Series in Interactive 3D
Technology. Morgan Kaufmann (2004)
5. Baraﬀ, D.: Dynamic Simulation of Non-Penetrating Rigid Bodies. PhD thesis,
Department of Computer Science, Cornell University, Ithaca, NY 14853-7501, USA
(1992)
6. Carlsson, C., Hagsand, O.: Dive - a multi-user virtual reality system. In: IEEE
Virtual Reality Annual International Symposium (VRAIS ’93), Seattle, WA, USA,
IEEE Computer Society (1993) 394–400
7. Tramberend, H.: Avocado: A Distributed Virtual Environment Framework. PhD
thesis, Technische Fakult¨
at, Universit¨
at Bielefeld (2003)
8. Greenhalgh, C., Benford, S.: Massive: A distributed virtual reality system incorporating spatial trading. In: IEEE International Conference on Distributed Computing Systems (DCS ’95), Vancouver, Canada, IEEE Computer Society (1995)
27–34
9. Singhal, S.K., Zyda, M.J.: Networked Virtual Environments - Design and Implementation. Addison-Wesley Professional (1999)
10. Mine, M.R.: Virtual environment interaction techniques. Tr95-018, University of
North Carolina, Chapel Hill, NC 27599-3175 (1995)
11. Roberts, D.J., Wolﬀ, R., Otto, O., Steed, A.: Constructing a gazebo: Supporting teamwork in a tightly coupled, distributedtask in virtual reality. Presence:
Teleoperators and Virtual Environments 12 (2003) 644–657
12. Broll, W.: Interacting in distributed collaborative virtual environments. In: IEEE
Virtual Reality Annual International Symposium (VRAIS ’95), Los Alamitos, CA,
USA, IEEE Computer Society (1995) 148–155
13. Jorissen, P., Lamotte, W.: Dynamic physical interaction platform for collaborative
virtual environments. In: CollabTech 2005, Tokyo, Japan (2005)
14. Anthes, C., Volkert, J.: invrs - a framework for building interactive networked virtual reality systems. In: International Conference on High Performance Computing
and Communications (HPCC ’06), Munich, Germany, Springer (2006) 894–904
15. Anthes, C., Landertshamer, R., Bressler, H., Volkert, J.: Managing transformations and events in networked virtual environments. In: International MultiMedia
Modeling Conference (MMM ’07), Singapore, Springer (2007)
16. Fr¨
ohlich, B., Tramberend, H., Beers, A., Agrawala, M., Baraﬀ, D.: Physically-based
manipulation on the responsive workbench. In: IEEE Virtual Reality (VR ’00),
New Brunswick, NJ, USA, IEEE Computer Society (2000) 5–12

