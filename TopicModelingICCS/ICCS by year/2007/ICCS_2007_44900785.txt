On Composite Service Optimization Across Distributed
QoS Registries∗
Fei Li, Fangchun Yang, Kai Shuang, and Sen Su
State Key Lab. of Networking and Switching, Beijing University of Posts and
Telecommunications
187#,10 Xi Tu Cheng Rd.,Beijing,100876, P.R. China
pathos.lf@gmail.com, {shuangk,fcyang,susen}@bupt.edu.cn

Abstract. Web service composition is a promising technology to effectively
integrate distributed autonomous services in service oriented paradigm. When
providing composite services, ensuring user experienced QoS (Quality of
Service) in dynamic environment poses a great challenge. In this paper, we
present a distributed service selection approach for optimizing composite
service with complex structures. The approach does not require a centralized
QoS registry to have complete composition logic, but runs on our distributed
QoS architecture iteratively. Experimental results show that the approach is
efficient and effective for our problem.

1 Introduction
Web service, as an implementation of service oriented architecture, is gaining more
and more acceptance in both academia and industries. In web service framework, a set
of XML(eXtensible Markup Language) based standards[1], greatly improves the
interoperability of business applications. Services (In this paper, we use the term
service and web service interchangeably) could publish their functional and nonfunctional attributes. Service users could automatically discover services. Service
provider could integrate other provider's services to fulfill complex user requirements.
The integration process is known as service composition and the integrated service is
composite service.
Automatic service composition is a hot topic in web service research which aims
easily reusing of business applications and fast provisioning of new services. S.
Dustar and W. Schreiner[2] surveyed some of the important works on different
aspects of service composition. Most of the early works are function related, as
automatic generation of composition logic, or coordination of composite service. But
user requirements are not only functional, also non-functional. Thus the “QoS driven
service composition” problem was presented afterwards[3]. As far as we know, all
∗

This work is supported by the National Basic Researchand Development Program (973
program) of China under Grant No.2003CB314806; the Program for New Century Excellent
Talents in University (No:NCET-05-0114); the Program for Changjiang Scholars and
Innovative Research Team in University (PCSIRT); the Hi-Tech Research and Development
Program (863 Program) of China under Grant No.2006AA01Z164.

Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 785–792, 2007.
© Springer-Verlag Berlin Heidelberg 2007

786

F. Li et al.

published works was focusing on improving the selection algorithm performance and
can only execute on a centralized entity called QoS center or registry. However, with
the growing deployment of service oriented applications, centralized architectures
may not satisfy the requirements of scalability and flexibility, and suffer from singlepoint failure. More importantly, for the requirements of global business, each
centralized entity could only serve for a specific business region like a corporation or
an organization, but not support global scale B2B(business-to-business) applications.
In this paper, we propose a distributed service selection approach based on our
distributed QoS registry architecture[4]. The distributed QoS registry is a limited
number of QoS registries which could communicate and cooperate with each other.
Each one of them maintains QoS information of at least one set of functional identical
services. These services could be selected based on their real-time QoS to optimize
composite service in a dynamic environment. Figure 1 illustrates the scenario of a
composite service logic and related distributed QoS registries. Every Ti is a set of
services which could accomplish a specific task.

Fig. 1. Distributed QoS registries and a composite service

Our approach to solve the distributed service selection problem has two steps: first,
we use an algorithm which could iteratively select services to optimize sequence
structure. The algorithm is improved from our previous algorithm by using a more
mature heuristic approach. Second, we divide a composite service to several
connected sequence structures. The selection results for these structures are
aggregated iteratively to optimize the whole composite service.
The rest of the paper is organized as follows: Section 2 reviews some related
works. Section 3 describes the distributed selection algorithm for sequence structure
in detail. Section 4 presents the approach to apply the algorithm on complex
composite structure in distributed environment. Section 5 discusses some
experimental results. Finally, the paper concludes in Section 6.

2 Related Works
Some pioneer works have been done on distributed service architecture. Distributed
orchestration of web services has been discussed in Benatallah and Sheng et al.[5] for

On Composite Service Optimization Across Distributed QoS Registries

787

the first time. They designed the SELF-SERV (compoSing wEb accessibLe
inFormation & buSiness sERVices) platform for dynamic and peer-to-peer
provisioning of web services. Composite service execution on the platform was in
peer-to-peer manner without centralized coordinator. Chafle and Nanda et al.[6]
researched some critical problems in automating decentralized execution of composite
service. They provided a method for automatic BPEL code partition deriving from
program partition method for multiprocessor execution.
A lot of works have been done on QoS based service selection for composite web
service. Zeng et al.[3] has presented a basic QoS model for service composition which
solved by Integer Programming. For the problem is NP-hard[7], many heuristic
approaches have been carried out to improve efficiency. For example: Canfora et
al.[7] proposed a genetic algorithm approach to optimize the selection process; Yu et
al.[8] model the problem as a Multi-choice, Multi-dimension 0-1 Knapsack Problem
(MMKP) and used a modified HEU algorithm to solve it.
In our previous work[4], we have presented a distributed QoS registry architecture
and a QoS model with network condition. Based on our architecture and QoS model,
we designed a distributed heuristic algorithm to optimize critical task path.

3 Service Selection Algorithm for Sequence Structure
For service selection problem in centralized environment, where QoS information of
all candidate services is stored in one registry, the selection processes are not different
for sequence structure and other structures. But in decentralized environment, we
have to deal with them respectively because no registry has the whole composition
logic. This section describes the selection algorithm for sequence structure.
3.1 Problem Definition
A sequence structure with l tasks is p = t1 , t2 ,..., tl , where ti is the ith task in
topological order. Each task has a set of candidate services, S (t ) = {s1 , s2 ,..., sm } ,
one of them will be selected for corresponding task. Each service s has a set of
QoS parameters Q ( s ) = q1 , q2 ,..., qn monitored by QoS registry. The composite
c
c
c
service cs also has a set of QoS parameters Q (cs ) = q1 , q2 ,..., qn ,
c
1
2
m
where qi = f i qi , qi ,..., qi ,1 ≤ i ≤ n , f i computes the compositional effects of
the ith QoS parameter. User could give constraints for composite service on any
parameter C = c1 , c2 ,..., cn . Our target is to optimize Q(cs) and make sure no QoS
parameter exceeds the constraints C. Every possible composition of services is called
a plan. We use the common accepted weighted average to evaluate a plan. In this
paper, we assume the better plan is the one with smaller score. wi is the significance
of the ith QoS parameter:

(

)

Score( p) =

∑ wq

1≤ i ≤ z

p
i i

⎛
⎞
, ⎜ 0 ≤ wi ≤ 1, ∑ wi = 1⎟
1≤ i ≤ z
⎝
⎠

(1)

This is a common optimization problem but no existing approaches are applicable
to our case, because in our selection model, any registry may only have a part of the

788

F. Li et al.

sequence. We need an iterative algorithm which could be applied to tasks one by one
and finally get global optimized QoS. For space reasons, we only describe idea of the
algorithm and a further optimization in this paper. Interested reader can refer to our
previous publication[4] for more details.
3.2 Iterative Selection Algorithm

The basic ISA is enlightened by Extended Bellman-Ford Algorithm (EBFA)[9], but
we modified it for optimizing nodes QoS rather than link QoS. For each task, basic
ISA computes scores of all possible plans with previous result and records new plans
in each service node for next computing iteration. If currently computing task
is ti (1 < i ≤ l ) , the algorithm should have all possible plans from t1 to ti −1 and carry
out plans from t1 to ti . When the last task is computed, the best plan is selected.
Basic ISA has a significant problem. With the growing of candidate service
number, the recorded plan number grows exponentially. For a task path with l tasks
l

and m services for each task, the candidate plans would be m . In practice, services
with better scores have higher possibility to be selected in the final composition plan.
We have proposed a heuristic algorithm in our previous work which keeps K plans
with the best scores in each service node, called ISA-Heu here. The algorithm can be
further optimized.
The best plan for a part of the sequence structure may not always be the best for the
whole sequence. In computation, some of the plans' QoS parameter may be too close
to constraints, even if they have excellent score, they are highly likely to exceed
constraints in next iteration. Task optimization should take user constraints into
account and predict which plan is better for overall composite service. We achieve
this prediction by adjust the scoring function applied in middle task computation. The
new scoring function could magnify the effects of QoS parameters which are
approaching constraints. We call this algorithm ISA-HeuPred. The adjusted scoring
function with prediction is:

Score Pr ed ( p ) =

∑

1≤ i ≤ n

wi

qis ⎛
⎞
, 0 ≤ wi ≤ 1, ∑ wi = 1, qis < ci ⎟
s ⎜
ci − qi ⎝
1≤ i ≤ n
⎠

(2)

Suppose there are l tasks in critical task path and each task has m candidate

O(ml ) , otherwise, the time
2
2
complexity of ISA-Heu and ISA-HeuPred is O ( K lm ) . The space complexity of
ISA-Heu and ISA-HeuPred is O ( Km) .
services, in the worst case, the time complexity of ISA is

4 Iterative Computing for Composition Structures
Currently, mainstream composition logic description approach as WSBPEL (Web
Services Business Process Execution Language) [10] is developed from traditional

On Composite Service Optimization Across Distributed QoS Registries

789

business process modeling works. Sequence, switch, parallel, loop and pick are
familiar basic structures for constructing composite service. In our distributed QoS
architecture, no QoS registry has an overall view of the whole composition logic,
even these basic structures may not exist on a single registry, so the QoS
optimization of whole composite service have to be carried out in distributed and
iterative manner.
Although registries have no knowledge of the overall process, they have the
information that a specific task has how many predecessors and successors. For a task
node has more than one successor, as a parallel, switch or pick begins from the node,
we call it a branch node. For a task node has more than one predecessors, we call it an
aggregation node. Both branch node and aggregation node are structure nodes. Other
nodes are all called sequence nodes. For example, in Fig.1, T2 is a branch node, T6 is
an aggregation node. For the node classification, 2 issues should be noticed: 1, loop
structure could be transformed to limited number of switch structures[3][11]; 2, when
partitioning, it does not matter what kind of branch it is, the branch type only affects
QoS aggregation.
We define a task path as a set of task nodes begin at the start task node or a
structure node, and end at the final task node, or before the next structure node in
topology order. By this definition, a composition logic could be divided into several
connected task path where every path is a sequence structure. In Fig.1, there are 4 task
paths: p1 =< t1 > , p2 =< t2 , t3 , t4 > , p3 =< t2 , t5 > , p4 =< t6 , t7 > . These task
paths are computed iteratively in topological order. When the branch node sends
result to next task paths, the branch type (parallel, switch or pick) and node
identification is sent with the result, so that corresponding aggregation node could
compute aggregated QoS of previous paths. As presented in [3], every QoS parameter
has an aggregation function. For example, price is the summary of all the selected
services’ price, availability is the product of all the selected services’ availability. For
service selection before composite service running, the aggregation functions are
different for different structures. The detailed aggregation method of QoS parameter
is not in the scope of this paper, but it is obvious that the optimal result of task paths
aggregated together is still optimal.
The overall selection process for composite service in Fig.1 by our approach is:
compute p1 at registry 1 first. Based on p1 ’s result, compute p2 at registry1 and p3
at registry2 respectively. In fact, we optimize p1 + p2 =< t1 , t2 , t3 , t4 > and
p1 + p3 =< t1 , t2 , t5 > as 2 independent sequences. p1 , p2 , and p3 are aggregated at
registry 3. Here, registry 3 identifies results of p2 and p3 , aggregates them based on
branch type, then combines with p1 . From the viewpoint of t7 , the topology
before t6 has nothing to do with its computation. Then, registry 3 finish computation
of t7 based on aggregated result of t6 .
The aggregation operation would bring additional execution time to
selection algorithm but it could be ignored. If n task nodes are aggregation
nodes, the time complexity of using ISA-Heu for task path would be
O( K 2lm 2 ) + O(n) = O( K 2lm 2 ) .

790

F. Li et al.

5 Experiments
We studied the performance and effectiveness of our approach in different cases
by a series of experiments. The experiments were conducted on a LINUX server
with configuration of a Xeon 3.20GHz CPU and 2GB RAM, running Red Hat
LINUX.
5.1 Evaluation Methodology

At first, we compare the performance of 2 types of ISA: non-heuristic and heuristic.
In both cases, each service has 6 QoS parameters and each parameter is a randomly
generated integer between 1 and 100. No constraints on any QoS parameter because
we would like to test the worst case, but constraints could contribute to delete some
plans and improve the execution time. For non-heuristic ISA, task number in
composite service ranges from 1 to 10 and each task has 4, 5 or 6 candidate services
respectively. In heuristic case, for the scalability of ISA-Heu, task number in
composite service ranges from 10 to 100 with a step of 10 and each task has 20, 40 or
60 candidate services. Composite service is constructed by different structures, but
these structures do not affect the overall selection time significantly, so we generate
test composition logic by randomly repeating nodes in Fig.1. Aggregation function of
every QoS parameter at t6 is product. K is set at 5. The performance of ISA-Heu and
ISA-HeuPred is the same so we only conduct our test on ISA-Heu. We run each case
100 times.
The heuristic algorithm may discard some "better" plans in computation. We study
the effectiveness of 2 heuristic approaches by 2 criteria which has been used in our
previous work: success ratio and approximation. For both heuristic approaches, we
fix the task number at 8 and candidate service number for each task at 6. The
constraints is adjusted to make 90% cases could have at least one feasible plan. The
heuristic parameter K ranges from 1 to 8.
5.2 Result and Analysis

Figure 2 shows the performance comparison of ISA and ISA-Heu. Because the
heuristic approach limit plan number kept in each service node, the plan search time
in each iteration is greatly decreased. When task number is 9 and 6 services for each
task, the computation time of ISA approaches 10 seconds and grows exponentially.
Otherwise, the ISA-Heu could easily scale up to 5000 candidate services and
computation time is under 2 seconds. In practical composite service scale, ISA-Heu
could complete in several milliseconds.
The effectiveness of ISA-Heu and ISA-HeuPred are illustrated in Fig. 3. When
K<5, the success ratio of ISA-HeuPred is much higher than ISA-Heu. Especially
when K=1, the heuristic with prediction could get a very impressive ratio at about
92%. However, the approximation of ISA-HeuPred is lower than ISA-Heu by about 1

On Composite Service Optimization Across Distributed QoS Registries
S=4
S=5
S=6

S=20
S=40
S=60

2000

10000

1800

9000

1600

8000

1400

Execution Time (ms)

Execution Time (ms)

11000

7000
6000
5000
4000
3000

791

1200
1000
800
600
400

2000

200

1000

0

0
5

6

7

8

9

20

10

40

60

Task Number

Task Number

(a)

(b)

80

100

Fig. 2. (a) Execution time of ISA. (b) Execution time of ISA-Heu/ISA-HeuPred.

ISA-Heu
ISA-HeuPred

100

99.5
99.0

90

98.5

85

Approximation (%)

Success Ratio (%)

ISA-Heu
ISA-HeuPred

100.0

95

80
75
70

98.0
97.5
97.0
96.5
96.0

65
95.5

60
0

1

2

3

4

5

6

7

8

95.0
0

1

2

3

4

5

K

K

(a)

(b)

6

7

8

Fig. 3. (a) Success ratio of ISA-Heu and ISA-HeuPred. (b) Approximation of ISA-Heu and
ISA-HeuPred.

percent in all tested values of K. But considering the approximation when K=1 could
exceed 97%, this loss of approximation is highly acceptable.

6 Conclusion
In this paper, we presented a distributed service selection approach running on
decentralized QoS registry architecture. The approach is combined by a service
selection algorithm for simple sequence structure, and a method to divide complex
structure to several connected sequence structures. The selection algorithm is
modified from EBFA. By applying heuristic improvements which record the plans
most likely to optimize overall path, the algorithm achieved excellent performance.
The result of service selection for sequence structure could be aggregated at run-time
to optimize the overall QoS of composite service.

792

F. Li et al.

Reference
1. Tsalgatidou, A., Pilioura, T.: An Overview of Standards and Related Technology in Web
Services. Distributed and Parallel Databases 12(2) (2002) 135–162
2. Dustdar, S., Schreiner, W.: A survey on web services composition. International Journal of
Web and Grid Services 1(1) (2005) 1–30
3. Zeng, L., Benatallah, B., Ngu, A., Dumas, M., Kalagnanam, J., Chang, H.: QoS-Aware
Middleware for Web Services Composition. IEEE Transactions on Software Engineering
30(5) (2004) 311–327
4. Li, F. Su, S., Yang, F.C.: On Distributed Service Selection for QoS Driven Service
Composition. Proceedings of the 7th International Conference on Electronic Commerce
and Web Technologies,EC-Web’06,LNCS 4082 (2006)
5. Benatallah, B., Dumas, M., Sheng, Q., Ngu, A.: Declarative composition and peer-to-peer
provisioning of dynamic Web services. Proceedings of the 18th International Conference
on Data Engineering, ICDE’02 (2002) 297–308
6. Nanda, M., Chandra, S., Sarkar, V.: Decentralizing execution of composite web services.
Proceedings of the 19th annual ACM SIGPLAN conference on Object-oriented
programming, systems, languages, and applications, OOPSLA’04 (2004) 170–187
7. Canfora, G., Di Penta, M., Esposito, R., Villani, M.: An approach for QoS-aware service
composition based on genetic algorithms. Proceedings of the Genetic and Evolutionary
Computation Conference, GECOO’05 (2005) 1069–1075
8. Yu, T., Lin, K.: Service Selection Algorithms for Composing Complex Services with
Multiple QoS Constraints. Proceedings of the 3rd International Conference on Service
Oriented Computing, ICSOC’05, LNCS (3826) 130–143
9. Yuan, X.: On the extended Bellman-Ford algorithm to solve two-constrained quality of
service routing problems. Proceedings of the 8th International Conference on Computer
Communications and Networks, ICCCN’99 (1999) 304–310
10. OASIS, Web Services Business Process Execution Language Version 2.0 Public Review
Draft, http://docs.oasis-open.org/wsbpel/2.0/, 23rd August, 2006
11. M. Gillmann, G. Weikum, and W. Wonner.: Workflow Management with Service Quality
Guarantees. Proc. ACM SIGMOD Int’l Conf. Management of Data, pp. 228-239, June
2002.

