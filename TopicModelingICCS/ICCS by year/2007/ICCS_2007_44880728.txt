Semantic Fusion for Query Processing in Grid
Environment
Jinguang Gu
1

College of Computer Science and Engineering,
Southeast University, Nanjing 210096, China
sam@seu.edu.cn
2
College of Computer Science and Technology,
Wuhan University of Science and Technology, Wuhan 430081, China

Abstract. To enable accessing web information at semantic level, this
paper develops a semantic fusion mechanism in Mediator-Wrapper based
grid environment to support ontology-based query planning with GAV
style querying request. It employs semantic communication language to
build mediator site for diﬀerent virtual organizations (VO), and creates
global semantic information for VOs. The procedure of ontology based
semantic fusion is discussed in detail.

1

Introduction

We witness a rapid increase in the number of web information sources that
are available online. The World-Wide Web(WWW), in particular , is a popular medium for interacting with such sources[1]. How to integrate and query
distributed and heterogeneity information, especially semi-structured and nonstructured information is the problem we need to solve. Data grid technology
is the standard means of realizing the needs. However, the studies in data grid
technology still have the shortcomings as follows: 1)The ﬂexibility of the grid
technology is limited. Taking OGSA-DAI[2] for example, it only supports the
limited related database and native XML database. However, most information
on Internet comes from web-based semi-structured data environment, such as
company web application and XML-based e-commerce platform; furthermore,
OGSA-DAI does not have the eﬀective mechanism for other data sources to be
integrated into the grid environment. 2) The individual node in the grid environment may exist in varied semantic environment; diﬀerent data resource is
constructed in accordance with diﬀerent semantic standard. The present data
grid does not take into consideration the semantic heterogeneity among diﬀerent
nodes.
This paper proposes a semantic data grid (SDG for short) service to solve
these two problems and discusses the semantic fusion mechanism in detail. SDG
employs a mediator-wrapper framework to support diﬀerent information sources
and enable semantic information operation on diﬀerent grid nodes[3], and it
uses semantic communication language to create mediator-wrapper structure
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 728–735, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Semantic Fusion for Query Processing in Grid Environment

729

dynamically for diﬀerent virtual organizations(VO for short)on the grid, creates
semantic fusion list on the mediator site to support Global-as-View(GAV) style
querying request. This grid architecture uses a semantic grid adapter service to
support semantic operation on the gird. The function of the wrapper of local
grid nodes is to describe its semantics and its mapping relationship with other
nodes, the information source of these nodes include both free and commercial
databases, ﬂat ﬁles services, web services or web based applications, HTML ﬁles
and XML ﬁles, and the semantic information of every local gird node is described
with the language based on its ontology. The mediator node constructs the global
semantics of the local nodes, the semantic communication mechanism between
the mediator and wrapper nodes is discussed in the following section. The remainder of this paper is structured as follows. Section 2 discusses the knowledge
communication mechanism to support semantic querying and knowledge fusion.
Section 3 discusses the procedure of ontology based semantic fusion. Section 4
summarizes the whole paper.

2

Communication Mechanism with Semantic Grid

It is very important to develop a knowledge communication and coordinating
mechanism to support the ontology fusion and semantic query on diﬀerent data
grid nodes. This paper employs a Knowledge Communication and Manipulation
Language for Semantic Grid, or KCML for short to support this mechanism,
which is an extension of the KGOL[4] language. One function of KCML is to
coordinate with each grid node to build the mediator-wrapper architecture dynamically. The other function is to build global knowledge on the mediator and
enable semantic query. The communication language is build on SOAP, following
the expression of SOAP’s class XML, supporting SOAP over HTTP, HTTPS or
other rock-bottom communication protocol. The language could describe as:
KCM L ::= V er|Operation|Sender|Receiver|Language|Content.
The ﬁeld Ver is for keeping Expanding, showing which version language was
used. The new version language has compatibility downwards, supporting the old
communication mechanism; Operation gives basic communication atom which
will be described next; Content describes what is communicated; Sender deﬁnes
sender’s information, including user, address (such as IP ,e-mail,URL, port); Receiver deﬁnes receiver’s information (usually, receiver should be Web Service or
Grid Service), ,including type (HOST, Web Service or Semantic Web Service),
address(such as IP address, e-mail, URL, port, if receiver is Web Service, also
including service address), identiﬁer; language deﬁnes which language is used
this communication, including RDF/RDFs, DAML+OIL, OWL etc. To illustrate communication atoms, we ﬁrst deﬁne the ontology based knowledge on the
mediators and wrappers.
Deﬁnition 1. A knowledge schema is a structure KB := (CKB , RKB , I, ιC , ιR )
consisting of (1) two sets CKB and RKB , (2) a set I whose elements are called
instance identiﬁers or instances, (3) a function ιC : CKB → (I) called concept
instantiation, (4) a function ιR : RKB → (I + ) called relation instantiation.

730

J. Gu

The atom includes basic communication atoms and semantic fusion atoms. Basic
communication atoms such as selection, join, union, minus and projection are
discussed in paper [5][6]. Semantic fusion atoms represent semantic matching
and fusion procedure.
The mediator node constructs the global semantics of the local nodes based
on ontology via ontology fusion mechanism[7] based on the ontology mapping
patterns in gird environment, the patterns of ontology mapping can be categorized into four expressions: direct mapping, subsumption mapping, composition
mapping and decomposition mapping[8], a mapping can be deﬁned as:
Deﬁnition 2. A Ontology mapping is a structure M = (S, D, R, v), where
S denotes the concepts of source ontology, D denotes the concepts of target ontology, R denotes the relation of the mapping and v denotes the conﬁdence value
of the mapping, 0 ≤ v ≤ 1.
A direct mapping relates ontology concepts in distributed environment directly,
and the cardinality of direct mapping could be one-to-one. A subsumption
mapping is a 6-tuple SM = (Dm , Rm , Bm , m , Im , v), where Dm is a direct
mapping expression; Rm is the ﬁrst target concept, which is the most specialized ontology concept. The mapping between the source ontology and Rm is
denoted as Root ontology concept mapping; Bm is the last target concept,
which is the most generalized ontology concept. The mapping between the source
ontology and Bm is denoted as Bottom ontology concept mapping; m is
inclusion relation between target ontology concepts; Im is the inverse mapping.
Subsumption mapping is used to denote concept inclusion relation especially
in the multiple IS-A inclusion hierarchy. The composition mapping is a 4tuple CM = (Fm , Am , Bm , v), where Fm is a direct mapping expression; Am is
chaining of role(s) between target ontology concepts; Bm is the last target symbol, which is the node of chaining target role(s), and composition mapping is
used to map one concept to combined concepts. For example, the mapping address=contact (country, state, city, street, postcode) is a composition mapping,
in which the concept address is mapped to combined concept “contact, country, state, street, and postcode” of local schema elements. The decomposition
mapping is a 4-tuple CM = (Am , Bm , Lm , v), where Am is chaining of role(s)
between source ontology concepts; Bm is the last target symbol, which is the
node of chaining source role(s); Lm is a direct mapping expression. Decomposition mapping is used to map a combined concept to one local concept, and the
example for the decomposition mapping is the reverse of the composition.
The KCML language must support the mapping patterns between diﬀerent
semantic nodes on gird, we use Match atom to support it, it can be deﬁned as
M (c, d, r) = {(x, y)|x ∈ ιC (c) ∧ y ∈ ιC (d) ∧ (x, y) ∈ ιR (r)}, where c is diﬀerent
concept from d, r is relationship of mapping.
The knowledge stored at mediator can be described as the ontology fusion
connections list, which can be described as deﬁnition 3. The corresponding fusion
connection lists of the mapping patterns can be denote as Fcd , Fcs and Fcc
respectively.

Semantic Fusion for Query Processing in Grid Environment

731

Deﬁnition 3. Fusion Connection is a structure Fc (O1 : C1 , O2 : C2 , . . . , On :
Cn , M), where C1 denotes a concept or concept set of ontology O1 , C2 denotes a
concept or concept set of Ontology O2 , M denotes the mapping patterns between
C1 , C2 , . . . and Cn .

3

The Procedure of Semantic Fusion

The function of Ontology fusion is to add connection tag between the concepts
that have direct mapping relationship. In direct mapping M = (S, D, R, v),
the fusion connection adds connection tag between the elements of S and D;
in subsumption mapping SM = (Dm , Rm , Bm , m , Im , v), the fusion connection
adds connection tag between the concepts which have mapping relation Dm ,
and in composition mapping CM = (Fm , Am , Bm , v) or decomposition mapping
CM = (Am , Bm , Lm , v), the fusion connection adds connection tag between the
concepts which have relations Fm or Lm respectively. We use Fcd to denote
fusion connection of direct mapping, Fcs to denote fusion connection of subsumption mapping and Fcc to denote the fusion connection of composition or
decomposition mapping. The fusion connection list is a list and its elements are
the fusion connections, denote it as F L.
1. The ﬁrst step of ontology integration is Ontology Fusion for Direct
Mapping, which creates fusion list F L from the mapping list of diﬀerent local
ontologies, it can be described by algorithm 1.
2. The second step of ontology integration is Ontology Fusion for Complex
Semantic Mapping, which used to ﬁnd the mappings of the concept that are
not in the mapping list, the basic idea of this step is to ﬁnd the semantic similarity
of the mapping relations, and create new mappings between these relations. We
propose this step in two situations, one is to ﬁnd the mapping between two
subsumption mapping relations, and the other is to ﬁnd the mapping between
two composition mapping relations or decomposition mapping relations.
We propose subsumption mapping situation at ﬁrst, suppose M1 and M2 are
two subsumption mappings, and R1 is the mapping relation of M1 , C10 is the
concept of source ontology, C1i (1 ≤ i ≤ n) is the concept of target ontology;
R2 is the mapping relation of M2 , C20 is the concept of source ontology, C2j
(1 ≤ j ≤ m) is the concept of target ontology . If there exists JS(R1 , R2 ) ≥ 1− ,
it means that these two relations of the mappings can match each other, we
create a new mapping named M and create the fusion connection list F L with
algorithm 2.
Then we propose the composition and decomposition mapping situation, these
kinds of mapping are very complex because the concatenations between two concepts of target ontology are diﬀerent with each other, we divide the concatenation
of target concepts into two kinds. One kind of concatenation does not have meanings, just means that the concatenation between these concepts exists(maybe
most of the concatenation can be expressed as this kind). For example the mapping: address=contact (country, state, city, street, postcode), the concatenation

732

J. Gu

Algorithm 1. Direct Fusion(SM )
Input: SM is the set of mapping
Output: F L is the fusion connection list
1 F L ← ∅;
2 foreach M in SM do
3
switch M do
4
case M belongs to M
// if the mapping is a direct mapping.
5
F L ← F L + Fcd (O1 : C1 , O2 : C2 , M ), O1 : C1 ∈ S ∧ O2 : C2 ∈ D;
6
case M belongs to SM
// if the mapping is a subsumption mapping,
// and Dm is the direct mapping expression of SM
7
let Dm = (S, D, R, v) ;
8
F L ← F L + Fcs (O1 : C1 , O2 : C2 , Dm ), O1 : C1 ∈ S ∧ O2 : C2 ∈ D;
9
case M belongs to CM
// if the mapping is a composition mapping,
// and Fm is the direct mapping expression of CM
10
let Fm = (S, D, R, v) ;
11
F L ← F L + Fcc (O1 : C1 , O2 : C2 , Fm ), O1 : C1 ∈ S ∧ O2 : C2 ∈ D;
12
case M belongs to DM
// if the mapping is a decomposition mapping,
// and Lm is the direct mapping expression of DM
13
let Lm = (S, D, R, v) ;
14
F L ← F L + Fcc (O2 : C2 , O1 : C1 , Lm ), O1 : C1 ∈ S ∧ O2 : C2 ∈ D;
15
otherwise
16
Errors Handler;
17
end
18
end
19 end
20 return F L

among contact, country, state, city, street and postcode are this kinds of concatenations. We name this kind of concatenation as None-Meanings Concatenation; The other kind of concatenation does have meanings between the
concepts, we name it as Full-Meanings Concatenation. For example, the
mapping payment = total (commodity amount * (unit price + tax )) is this kind
of concatenation. For the ﬁrst kind of concatenation, we only need to identify
whether the related concepts satisfy the deﬁnition of semantic similarity or not,
if they satisfy the deﬁnition, add a new fusion connection to the fusion connection list. Before we discuss the other kind of concatenation, we introduce the
concept of Fusion Equivalence and Fusion Subsumption.
For composition (or decomposition) mappings M1 and M2 , Am1 and Am2
represents the concatenation relationship of M1 and M2 respectively, we use
|Am1 | and |Am2 | to denote the amount of the concepts in Am1 and Am2 , Am1
and Am2 are Fusion Equivalence iﬀ,

Semantic Fusion for Query Processing in Grid Environment

733

Algorithm 2. Subsumption Fusion(M1 , M2 , )
Input: M1 , M2 are two subsumption mappings, is the threshold of semantic
similarity
Output: F L is the fusion connection list
1 i = 1, F L ← ∅;
2 foreach C2j in M2 do
3
switch the semantic similarity between C1i and C2j do
4
case JS(C1i , C2j ) ≥ 1 −
// create the direct fusion connection.
5
F L ← F L + Fcd (C1i , C2j , M ), C1i ∈ M1 ;
6
case M SP (C1i , C2j ) ≥ 1 −
// create the subsumption fusion connection.
7
F L ← F L + Fcs (C1i , C2j , M ), C1i ∈ M1 ;
8
case M GC(C1i , C2j ) ≥ 1 −
// create the subsumption fusion connection.
9
F L ← F L + Fcs (C2j , C1i , M ), C1i ∈ M1 ;
10
end
11
i = i + 1;
12
end
13 end
14 return F L

i). Am1 and Am2 are Full-Meaning Concatenations, and |Am1 |=|Am2 |;
∀Concatenation1,i+1 .C1,i+1 , C2i
∀Concatenation2,i+1 .
ii). For ∀i(C1i
C2,i+1 ) exists (JS(C1i , C2i ) ≥ 1 − ) ∧ (JS(C1,i+1 , C2,i+1 ) ≥ 1 − ) ∧
(JS(Concatenation1,i+1 , Concatenation2,i+1 ) ≥ 1 − ).
We use Am1 ⇔ Am2 to denote the fusion equivalence of Am1 and Am2 , if
|Am1 | > |Am2 |, suppose |Am1 | = m and |Am2 | = n, then m > n. If Am1,n is
the ﬁrst n concepts of Am1 and Am1,n ⇔ Am2 , then we say Am1 and Am2 are
Fusion Subsumption, denotes it as Am1 ⇒ Am2 , or Am2 ⇒ Am1 if n > m.
We use AU1 and AU2 to denote the concepts of Am1 and Am2 respectively, and
whose concatenations are None-Meanings Concatenations, use AN1 and AN2 to
denote the concepts whose concatenations are Full-Meanings concatenations. We
use AE1 and AE2 to denote the concepts of AN1 and AN2 , which keep fusion
equivalence or fusion subsumption relationship with each other. We can express
the fusion connection with algorithm 3.
3. The last step of ontology integration is Canonical Fusion, which merges
the concepts of the fusion connection into one concept if the fusion connection
type is Fcd or Fcc , and adds a real relation connection to the concepts if the fusion
connection type is Fcs . For example the fusion connection Fcd = (C1 , C2 , M ),
C1 and C2 are concepts of diﬀerent ontologies, they will be merged to a concept
(C1 , C2 ) and all the hierarchy of the concepts will be kept. But not all the concepts with the same mapping relation can be merge into one concepts, only the
concepts which have strong mapping relation can be merged. For example, if the

734

J. Gu

Algorithm 3. Composition Fusion(M1 , M2 , )

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

Input: M1 , M2 are two composition(decomposition) mappings, is the threshold of
semantic similarity
Output: F L is the fusion connection list
F L ← ∅;
// Process the Full-Meanings concatenation
foreach Ci ∈ AE1 , Cj ∈ AE2 do
if Ci ⇔ Cj then
// Ci and Cj are fusion equivalence.
F L ← F L + Fcc (Ci , Cj , M );
else
if |Ci | > |Cj | then
let Ci ⊂ Ci and Ci ⇔ Cj , F L ← F L + Fcc (Ci , Cj , M );
else
let Cj ⊂ Cj and Ci ⇔ Cj , F L ← F L + Fcc (Ci , Cj , M );
end
end
end
// Process the None-Meanings concatenation
foreach C2j ∈ AU2 do
foreach C1i ∈ AU1 do
if JS(C1i , C2j ) ≥ 1 − then F L ← F L + Fcc (C1i , C2j , M )
end
end
return F L

mappings M(C1 , C2 , R, v1 ),M(C2 , C3 , R, v2 ) and M(C1 , C3 , R, v3 ) satisfy the
strong mapping property, we can merge the concept C1 , C2 , C3 into one concept
(C1 , C2 , C3 ), otherwise, we have to merge them into two concepts (C1 , C2 ) and
(C2 , C3 ).

4

Discussion and Conclusion

Semantic data grid service mechanism we present in this paper wrapped various information source through semantic fusion mechanism, and used MediatorWrapper to support the heterogeneous data source, employed mediator structure
to realize virtual data gird service which supports semi-structured information
retrieving language.
Because XML is rapidly becoming a language of choice to express, store
and query information on the web, other kinds of web information such as
HTML-based web information can be transferred to XML based information
with annotation technologies. Users can query information with XML languages,
XPath based XML query style language to retrieve information from diﬀerent grid nodes, languages such as XQuery, XUpdate are suitable for retrieving

Semantic Fusion for Query Processing in Grid Environment

735

information in distributed integration systems. It is suitable to extend XML
query algebra to support semantic querying on the gird, some works have focused
on this topic[9].

Acknowledgment
This work was partially supported by NSF (Natural Science Fundation) of China
under grant number 60425206, and it was partially supported by China Postdoctoral Science Foundation under grant number 20060400275 and Jiangsu Postdoctoral Science Foundation under grant number 0601009B. It was partially
supported by a grant from the NSF of Hubei Prov. of China under grant number 2005ABA235.

References
1. Levy, A.Y., Rajaraman, A., Ordille, J.J.: Query heterogeneous information sources
using source descriptions. In: Proceedings of the 22nd VLDB Conference, Mumbai,
India, Morgan Kaufmann Publishers Inc (1996) 251–262
2. Antonioletti, M., Atkinson, M., Baxter, R., et al.: The design and implementation
of Grid database services in OGSA-DAI. Concurrency and Computation: Practice
and Experience 17 (2005) 357–376
3. W¨
ohrera, A., Brezanya, P., Tjoab, A.M.: Novel mediator architectures for Grid
information systems. Future Generation Computer Systems 21 (2005) 107–114
4. Zhuge, H., Liu, J.: A Knowledge Grid Operation Language. ACM SIGPLAN Notices
38 (2003) 57–66
5. Gu, J., Xu, B.: XML based Semantic Query Mechanism on Grid. In: ISPA 2006
Workshops, LNCS 4331, Springer Verlag (2006) 532–541
6. Sheng, Q.J., Shi, Z.Z.: A Knowledge-based Data Model and Query Algebra for the
Next-Gereration Web. In: Proceedings of APWeb 2004, LNCS 3007 (2004) 489–499
7. Gu, J., Zhou, Y.: Ontology Fusion with Complex Mapping Patterns. In: Proceedings
of 10th International Conference on Knowledge-Based, Intelligent Information and
Engineering Systems, Bournemouth, United Kingdom, LNCS 4251, Springer Verlag
(2006) 738–745
8. KWON, J., JEONG, D., LEE, L.S., BAIK, D.K.: Intelligent semantic concept
mapping for semantic query rewriting/optimization in ontology-based information
integration system. International Journal of Software Engineering and Knowledge
Engineering 14 (2004) 519–542
9. Gu, J., Hu, B., Zhou, Y.: Semantic Query Planning Mechanism on XML based
Web Information Systems. In: WISE 2006 Workshops, Wuhan, China, LNCS 4256,
Springer Verlag (2006) 194–205

