Group-Based Key Management for Multicast of Ad Hoc
Sensor Network*
Shaobin Cai, Wenbin Yao, NianminYao, Yong Li, and Guochang Gu
Harbin Engineering University, Harbin, China, 150001
Phone: 86-451-82518030
caishaobin@hrbeu.edu.cn

Abstract. In order to protect communication security among sensor nodes, a
cryptographic method are needed by ad hoc sensor networks. According to that
most ad hoc sensor networks are deployed in groups, a group-based multicast
key management scheme is proposed to extend RPS scheme in this paper.
Compared with RPS, our scheme improves the probability that a shared key
exists between two sensor nodes, and reduce the probability that the shared key
is decrypted.
Keywords: Ad hoc sensor networks, Security, Group-based, Key Management.

1 Introduction
The open architectures of ASNs (ad hoc sensor networks) make potential intruder
easy to intercept, eavesdrop and fake messages. Therefore, they need strong security
services. Most security methods can be realized by message encryption. Therefore,
some kinds of cryptographic keys that need to be shared between the communicating
parties are needed.
The pre-loaded key management of ad hoc sensor network, proposed by Blom
[1]， efficiently solves the key management for broadcast and multicast [2-5] of ad
hoc sensor network. N-security r-conference key management scheme [6~10] is a
typical pre-loaded key management scheme.
Since ad hoc sensor networks are mostly deployed in groups, the communications
among nodes are mostly happened among nodes of same group. Therefore, a groupbased multicast key management scheme is proposed in this paper to improve the
probability that two nodes share at least one key.
The rest of the paper is organized as follow. First, an overview of n-secure rconference key management scheme is given in section 2. Secondly, a group-based
*

This paper is supported by the following foundation:
(1) National Science foundation of China “60603059” “60403026” “60503055”;
(2) Postdoctoral science foundation of china “2005038193”;
(3) Postdoctoral foundation of Heilongjiang province, china;
(4) Tackling key technical problem of Heilongjiang province “GC06C106”
(5) Science Foundation of Harbin Engineering University “HEUFFT05010”;
(6) Young backbone teacher project of Harbin Engineering University.

Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 50–57, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Group-Based Key Management for Multicast of Ad Hoc Sensor Network

51

key management for multicast of ad hoc sensor network is proposed in section 3.
Thirdly, the performance of group-based scheme is analyzed by mathematical method
and simulations in section 4. Finally, we draw a conclusion in section 5.

2 RPS Key Management Scheme
RPS [10] (Random Preloaded Subset key distribution) scheme is proposed as an nsecurity r-conference key management. RPS determines the public key of each node
by a public one way function F1 () , which is defined as follow:
I1 " I k = F1 ( A)

(1)

In the above formula, 1 ≤ I1 " I k ≤ P is a random permutation of numbers between
1 and P . For instance, it could be obtained by choosing the first k elements of a
random permutation of numbers between 1 and P . I1 " I k is the index of the keys
preloaded in node A . By exchanging their IDs, two nodes can immediately determine
their shared indices, and use their shared keys to derive their pair key. For an r-user
conference, the r nodes can independently calculate their conference key based on the
keys shared by all r nodes.

3 Group-Based n-Security r-Conference Key Management
Scheme
In this section, GBKM (Group-Based Key Management) is proposed to extend
RPS. In GBKM, keys preloaded in a node are not only tied to its public ID but also to
its group ID. Therefore, GBKM not only has a one way public function F1 () but also
has a public one way group function Fm(i ) , which is defined as follow:
I1 " I z = Fm(i )

(2)

In the above formula, 1 ≤ I1 " I Z ≤ P is a random permutation of numbers between 1
and P , and it is a subset Ai of A. When a node acquires its pre-loaded keys, it first
calculates out the subset for its group by its group function Fm () with its group ID,
and then it calculates out its key from the key subset of group by function F1 () .
Therefore, in GBKM, any r nodes of same group can determine whether there
exists at least a shared key among them after they exchange their group ID and their
public ID. Although, the probability that two nodes of same group share at least one
key is improved by the method above, the probability that two nodes of different
groups share at least one key is still low. In order to improve the probability that two
nodes of different groups share at least one key, they broadcast its received group ID
and node ID in its group when two nodes of different groups want to setup a session
and do not have any shared key. If one node of its group has shared keys, then it
forwards the shared key to the node. Therefore, the probability that two nodes of
different groups share at least one key is improved and is equal to that two groups
share keys.

52

S. Cai et al.

4 Analysis
4.1 The Probability That Two Nodes Share at Least One Keys
Let p be the probability that two nodes of same group share at least one key. The
probability that two key rings share at least one keys is equal to 1 – Pr [two nodes do
not share any key]. Therefore, we first compute the number of the possible key rings.
Since each key of a key ring is drawn out of a pool of P keys without replacement,
the number of possible key rings is
.
P!
k!( P − k )!

After picking out the first key ring, the total number of possible key rings that do
not share a key with the first key ring is the number of key rings that can be drawn out
of the remaining P - k unused key in the pool, namely ( P − k )! ! .
k!(P − 2k )

Therefore, the probability that no key is shared between the two rings is the ratio of
the number of rings without a match by the total number of rings. Thus, the
probability that there is at least a shared key between two key rings is
p = 1−

k!( P − k )! ( P − k )!
(( P − k )!) 2
×
!= 1 −
P!
k!(P − 2k )
( P − 2k )!P!

Since P is very large, Stirling's approximation n! ≈
simplify the expression of p , and obtain:

2π n

(3)
n+

1
2

e − n is used to

1
2 ( P −k + )
2

k
)
. Since the size of subP
p = 1−
1
2k ( P − 2 k + 2 )
(1 − )
P
(1 −

pool is much smaller than that of pool, the probability that a shared key exists
between two sensor nodes of the same group is improved by our scheme.
Figure 1 describes the relationship between the size of ring and the probability that
two nodes share at least one key. When pool has 10,000 keys and key ring has 75
keys, the probability of Laurent’s scheme that two node share at least one key is only
about 0.5. However, the probability of our scheme that two nodes share at least one
key is almost about 1 when each sub-pool of our scheme has 1,000 keys.
p ′ is used to present the probability that a shared key exists between two nodes of
different groups, whose sub-pools have

P′ keys. Each group can draw

P!
P′!( P − P′)!

sub-pools from its main pool. Therefore, probability that a shared key exists between
two nodes of different groups is
p = 1−

P ′!( P − P′)!
( P − P ′)!
(( P − P′)!) 2
!= 1 −
×
P!
P ′!(P − 2 P′ )
( P − 2 P′)! P!

(4)

From the results showed in fig. 1, we can know that the probability, which two
nodes of different groups have at least one key, is almost 100% when sub-pool has
more than 200 keys. Therefore, GBKM can be improved further by reduce the scope
of exchanging group ID and node ID when two nodes belong to different groups. In

Group-Based Key Management for Multicast of Ad Hoc Sensor Network

53

Fig. 1. The relationship between the size of ring and the probability that two nodes share a key

the improved GBMK, the node only exchange group ID and node ID with its
neighbors of the same group.
Now, the probability that r nodes share at least one key is calculated. If there is at
least a shared key among r nodes, then the intersection Ak1 ∩" ∩ Akr is not empty.
Therefore, PS mr = Pr{ Ak1 ∩ " ∩ Akr = m} is first calculated for the probability

that Ak1 ∩ " ∩ Akr ≠ ∅ . Therefore, PS r ≤ ( p) r −1 and r nodes hardly have shared keys
when p is small. Therefore, it is necessary to improve the probability that two nodes
share at least one key.
4.2 Security

In this section, the security of GBKM is analyzed. The communications among r
nodes are safe only when ∃a ∈ Ak1 ∩ " ∩ Akr and a ∉ Akr +1 ∪ " ∪ AkR+n . Therefore,
PER ( P, k , n, r ) is used to present the probability that r-node communications can be
eavesdropped by n nodes, and PS mr is calculated first to calculate PER ( P, k , n, r ) .
The calculation complexity of PS mr increases when r increases and it can not be

φr

calculated when r is much larger. Therefore,
namely

is used here to present expected m,
k
P

φ r = E[ m] = ∑m =1 mPS mr = k ( ) r −1
k

(5)

Therefore, the larger the k is, the higher probability that r nodes share at least one
P
key. Fig.2 descries the relationship between φr (r = 5) and the size of ring. In fig.2,
when k is larger, smaller key ring can guarantee r nodes share at least one key;
P
when k is smaller, larger key ring is even can not guarantee r nodes share at least
P
one key. Therefore, it is necessary to improve probability that r nodes share at least

54

S. Cai et al.

Fig. 2. The relationship between

φr (r = 5) and the size of ring

one key by the improvement of k , which is resulted from group-based key
P
management.
Secondly, PC nq,k = Pr{ Ak1 ∪ " ∪ Akn = q} is used here to present the probability that

Ak1 ∪"∪ Akn has q keys, where k ≤ q ≤ qmax = min(nk, P) .
The calculation complexity of PS mr also increases when r increases, and

PS mr cannot be calculated when r is much larger. θ n = E[q] = ∑q qPCnq,k is used here to
q=k
max

present expected q. The value of

θn

can be calculated by recursion, and

θ n is

defined as follow:

θ n = θ n−1 +

θ n′ =

θn
P

= θ n′ -1 +

k
( P − θ n−1 ), θ 0 = 0
P

(6)

q
k
(1 − θ n′ -1 ) is used here to present expected . Fig.3 descries the
P
P

relationship between

θ n′

and the number of nodes captured by the adversaries. The

larger k is, the lower the security of r nodes communications is, and the easier the
P
adversity can acquire all keys by capturing few nodes. The smaller k is, the higher
P
the security of r nodes communications is, and the more difficult the adversities
acquire all keys by capturing few nodes.
However, from the analysis results in fig3, we know that a higher k is needed by
P
a key management scheme to guarantee that there is at least one shared keys among r
nodes. When adversity does not know the adscription of the nodes, P = U g ( U g
presents the sub-pool )in equation (5) mostly， and k is larger; P = U p in equation
P

Group-Based Key Management for Multicast of Ad Hoc Sensor Network

Fig. 3. The relationship between

θ n′

55

and the number of nodes acquired by adversity

(7), and k is smaller. Therefore, group-based key management not only improves
P
the probability that r nodes share at least one key, but also reduces the probability that
the shared keys are decrypted.
Thirdly, PEmq = Pr{Am ⊂ Aq } is used here to present the probability that Am ⊂ Aq ,
where Am ⊂ U p ( | Am |= m ) and Aq ⊂ U p ( | Aq |= q ). Therefore,
P−m
)
q−m
( P − m)! q!
PE mq =
=
P
(q − m)! P!
( )
q
(

(7)

PE R ( P, k , n, r ) = Pr{G ⊂ B} is used here to present the probability that G ⊂ B ,
where G = Ak1 ∩ " ∩ Akr and B = Akr +1 ∩" ∩ Akn+r . Therefore, PE R ( P, k , n, r ) can be
expressed further as follow
q max

k

q =k

m=0

PER (P, k, n, r) = ∑ PCnq,k ∑ PSrm PEmq

(8)

PCnq,k is hardly calculated when n ≥ 3 . Hence, an approximation of
PE R ( P, k , n, r ) should be calculated, and equitation (8) can be defined further as
follow:
k

PER (P, k, n) ≈ PˆER (P, k, n) = ∑PSmr PEmθn

(9)

m=0

By the method that the approximation of PE R ( P, k , n, r ) is calculated when n ≥ 3 ,
the approximation of PE R ( P, k , n, r ) can be acquired when r is larger. Therefore,
PE R ( P, k , n, r ) can be defined as follow:

56

S. Cai et al.

PE R ( P, k , n, r ) ≈ Pˆ E R ( P, k , n, r )
q max

= ∑ PCmq ,k PEφqr ≈ PE R ( P, k , n, r )
q =k

= PEφθrm =

( P − φr )!θ m !
(θ m − φ r )!P!

(10)

φr = i , and PERi ( P, k , n, r ) is used to present the probability that the r node
,
communications
are
eavesdropped.
Therefore,
PER1 (P, k, n, r) = θm′
(θ m − 1) . Hence, the probability that r nodes communications are
(P − 1)
eavesdropped decreases exponentially when φr increases because of 1 > θ m > (θ m − 1) .
P
( P − 1)
PER2 ( P, k , n, r ) = θ m′

From the analysis above, a larger

φr

and a smaller θ m is needed to improve the

session security among r nodes. When k is larger,
P

φr is

larger and θ m is smaller.

When k is smaller, φr is smaller and θ m is bigger. Therefore, a key management
P
scheme needs a reasonable k .
P
When adversity does not know the adscription of the nodes, P = U g in equation (5)
mostly， and k is larger; P = U p in equation (7), and k is smaller. Therefore, groupP
P
based key management not only improves the probability that r nodes share at least
one key, but also reduces the probability that the shared keys are decrypted.

5 Conclusions
According to that most ad hoc sensor networks are deployed for assigned missions, a
group-based key management scheme is proposed in the paper. GBKM divides key
pool into some sub-pool according to the relativities of missions, and the numbers of
shared keys among missions are determined by the relativities among missions. In ad
hoc sensor network, most communications are happened among nodes of same
missions. Therefore, the group-based key management not only improves the
probability that communicating nodes share at least one key but also reduce the
probability that the shared key is decrypted.

References
1. C. Blundo, A. Santi, A. Herzberg, U. Vaccaro, M. Yung. Perfectly-secure Key Distribution
for Dynamic Conferences. In Proc. of Crypto’92, Santa Barbara, California, USA, (1992)
471~486
2. A. Fiat, M. Naor. Broadcast Encryption. In Proc. of Crypto’93, Santa Barbara, California,
USA, (1994) 480~491

Group-Based Key Management for Multicast of Ad Hoc Sensor Network

57

3. D. Halevy, A. Shamir. The LSD Broadcast Encryption Scheme. In Proc. of Crypto’02,
Santa Barbara, California, USA, (2002) 47~60
4. R. Kumar, S. Rajagopalan, A. Sahai. Coding Contractions for Blacklisting Problems
without Computational Assumptions. In Proc. of Crypto’99, Santa Barbara, California,
USA, (1999) 609~623
5. D. Naor, M. Naor, J. Lotspiech. Revocation and Tracing Schemes for Stateless Receivers.
In Proc. of Crypto’01, Santa Barbara, California, USA, (2001) 41~62
6. R. Blom. An Optimal Class of Symmetric Key Generation Systems. In Proc. of Santa
Barbara, California, USA, (1984) 335~338
7. T. Matsumoto, H. Imai. On the Key Predistribution System: A Practical Solution to the
Key Distribution Problem. In Proc. of Crypto’87, Santa Barbara, California, USA, (1987)
185~193
8. T. Leighton, S. Micali. Secret-key Agreement without Public-Key Cryptography. In Proc.
of Crypto’93, Santa Barbara, California, USA, (1993) 456~479
9. M. G. Zapata, N. Asokan. Securing Ad-Hoc Routing Protocols. In Proc. of WiSe’02,
Singapore, (2002) 1~10
10. H. Chan, A. Perrig, D. Song. Random Key Predistribution Schemes for Sensor Networks.
In Proc. of S&P’03, California, US, (2003) 197~215

