Recursive Priority Inheritance Protocol for
Solving Priority Inversion Problems in
Real-Time Operating Systems
Kwangsun Ko, Seong-Goo Kang, Gyehyeon Gyeong, and Young Ik Eom
School of Information and Communication Eng., Sungkyunkwan University,
300 Cheoncheon-dong, Jangan-gu, Suwon, Gyeonggi-do 440-746, Korea
{rilla91,lived,gyehyeon,yieom}@ece.skku.ac.kr

Abstract. In this paper, a protocol, called recursive priority inheritance
(RPI) protocol, is proposed to solve complicated priority inversion problems as well as basic one. Our proposed protocol is implemented and
tested in the Linux kernel. Additionally, the performance of our proposed protocol is evaluated and compared with previous protocols in the
aspect of time and space complexity analyses.

1

Introduction

Nowadays, real-time operating systems are widely used in various ﬁelds where
each task must ﬁnish execution by its deadline and should meet several requirements such as eﬀective scheduling policies, reducing interrupt handling time,
solving priority inversion problems, and so on. Among them, in this paper, the
priority inversion problem [1], which means the situation that a high-priority
process waits for acquiring the resource that is already locked by a low-priority
process, is focused on. This situation occurs sometimes in real-time environments but certainly should be solved to remove the bad eﬀects to the systems.
The various solutions to this problem have been presented, among which two
recommended protocols are basic priority inheritance (hereafter, BPI) protocol
[2][3][4] and priority ceiling emulation (hereafter, PCE) protocol [5][6][7]. However, they cannot solve some complicated problems, such as the cases when a
process locks several resources and when resources are locked and requested
recursively. In this paper, a protocol, called recursive priority inheritance (hereafter, RPI) protocol, is proposed. The RPI protocol eﬃciently solves complicated
priority inversion problems as well as basic one, just requiring low time/space
complexity compared with pre-existing protocols.
This research was supported by the MIC(Ministry of Information and Communication), Korea, under the ITRC(Information Technology Research Center) support
program supervised by the IITA(Institute of Information Technology Advancement)
(IITA-2006-C1090-0603-0027).
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 977–980, 2007.
c Springer-Verlag Berlin Heidelberg 2007

978

2

K. Ko et al.

RPI Protocol

RPI protocol can solve the complicated priority inversion problems using recursive data structure, which is assigned to each individual process and keeps the
entire information on both the resources locked by the process and the processes
requesting these resources. (see Figure 1). (Let Px denote processes, and Rx a
resource; each process has diﬀerent priority, and the priority of P0 is the lowest.)

Fig. 1. Conceptual recursive data structure of a process P3

As can be seen, P3 locks three resources RA , RB , and RC , and each resource
has its own waiting queue for all processes that requested the resource. Processes
in the waiting queue of each resource are sorted in the order of their priorities,
and the resources locked by P3 are also sorted in the order of priorities of the
ﬁrst processes in their waiting queues. Therefore, the ﬁrst process in the waiting
queue of the ﬁrst resource has always the highest priority among the processes
in the queues, and P3 inherits the priority of the process; that is, P3 inherits the
highest priority.
Basically, RPI protocol uses several data structures: a recursive data structure and three new data structures. The former is implemented by adding a few
ﬁelds to the task struct structure, which is a structure that contains the entire
information on the corresponding process in the Linux kernel. This data structure, a new task struct structure, is initialized in copy process() kernel function,
which is invoked when a process is created. Additionally, our proposed protocol
uses two operations, P()/V(), related a semaphore to implement the operations
of ‘locking’ and ‘unlocking’ a resource. Operating systems, such as Unix and
Linux, which support POSIX standards uses semop() system call for P()/V()
operations of a semaphore. In the Linux kernel, semop() system call invokes the
sys semtimedop() kernel function, and we modiﬁed this function so that it can
perform what we want when P()/V() operations are called.

3

Test and Evaluation

Our proposed RPI protocol can solve the problem when resources are locked and
requested recursively; this problem cannot be solved by previously recommended
protocols. (see Figure 2).

Recursive Priority Inheritance Protocol

979

Fig. 2. A procedure when resources are locked and requested recursively

As can be seen, P0 and P2 lock RA and RB , respectively. At time t2 when P2
requests RA , P0 inherits the priority of P2 , and at time t4 when P5 requests RB ,
P2 inherits the priority of P5 . In the aspect of P0 , the priority of P2 is changed,
and so, that of P0 is also changed. In result, at time t5 when P4 starts to run,
P0 is not preempted by P4 because P0 inherits the priority of P5 .
Now, we test and validate our proposed RPI protocol. The priorities of processes are changed using setpriority() system call which uses internally
set user nice() kernel function, and P()/V() operations are performed using
semget()/semop() system calls, respectively. We assume that the respective priorities of P0 , P2 , and P5 are 10, 0, and -10 in all our tests; the priority of P0
is the lowest while that of P5 is the highest. In order to customize a general
Linux kernel to a real-time operating system, uCLinux patch is applied to the
Linux kernel of version 2.6.12 [8]. In this real-time environment, we deﬁne a resource as a semaphore and ’lock’ (resource request)/’unlock’ (resource release)
as P()/V() operations of the semaphore, respectively. In addition, although we
can directly modify the priorities of the processes in the system, we used the
method that modiﬁes the priorities of the processes using set user nice() kernel
function, which modiﬁes the nice value of a process; the priorities of processes
may be modiﬁed by other factors, such as scheduling policy.
Comparison criteria are categorized into whether to solve the priority inversion
problems or not and the time/space complexity for priority inheritance. (n and
m are the number of processes and resources, respectively) (see Table 1)
As can be seen, our proposed RPI protocol can solve both the basic priority inversion problem and the complicated problems, however, incurs additional
expense because the recursive data structure of each process is realigned whenever a process requests or releases a resource. Therefore, the time complexity for
priority inheritance is O(n+m). Additionally, each process maintains a recursive
data structure for the processes or the resources involved, so the space complexity is also O(n+m). In result, our proposed RPI protocol uses additional data

980

K. Ko et al.
Table 1. Comparisons of the RPI protocol with BPI/PCE protocols
BPI protocol PCE protocol Proposed protocol
Basic problem

Complicated problems
Complexity
a
b

Case I a
Case II b
Time
Space

O
X
X
O(n)
O(1)

O
O
X
O(nm)
O(m)

O
O
O
O(n+m)
O(n+m)

Case I: when a process locks several resources
Case II: when resources are locked and requested recursively

structure than both the previous two protocols and takes additional time than
BPI protocol. However, our protocol can solve complicated priority inversion
problems which previous protocols could not have solved as well as basic one.

4

Conclusion

Various priority inversion problems are addressed to design and implement realtime operating systems, where each task must ﬁnish execution by its deadline.
In this paper, RPI protocol was proposed, which solves basic or complicated
problems while pre-existing protocols cannot solve the complicated problems
completely. The proposed protocol is implemented in the Linux kernel and validated with some test cases. Additionally, the performance of the proposed system
is analyzed and compared with the previous recommended protocols.

References
1. TimeSys Inc., Priority Inversion: Why You Care and What to Do About It. A White
Paper, 2004.
2. L. Sha, R. Rajkumar, and J. P. Lehoczky, “Priority Inheritance Protocols: An Approach to Real-Time Synchronization,” IEEE Transactions on Computers, Vol. 39
No. 9, Sep. 1990.
3. B. Akgul, V. Mooney, H. Thane, and P. Kuacharoen, “Hardware Support for Priority
Inheritance,” Proc. of the IEEE Real-Time Systems Symp., Dec. 2003.
4. D. Z¨
obel, D. Polock, and A. Van Arkel, “Testing for the Conformance of Realtime Protocols Implemented by Operating Systems,” Electronic Notes in Theoretical
Computer Science, Vol. 133, May 2005.
5. J. B. Goodenough and L. Sha, “The Priority Ceiling Protocol,” Special Report
CMU/SEI-88-SR-4, Mar. 1998.
6. B. Dutertre, “Formal Analysis of the Priority Ceiling Protocol,” Proc. of IEEE
Real-Time Systems Symp., Nov. 2000.
7. V. Yodaiken, “Against Priority Inheritance, ” FSMLABS Technical Paper, 2003.
8. Embedded Linux/Microcontroller Project, http://www.uclinux.org.

