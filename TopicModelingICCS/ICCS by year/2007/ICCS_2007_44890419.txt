A Graph-Theory Algorithm for WCET Estimation
Guowei Wu1 and Kai Yao2
1

Software College of Dalian University of Technology, Dalian 116023,China
wgwdut @dlut.edu.cn
2
Library Information Center of Shenyang University of Technology, Shenyang
150001, China
frantodd2002@yahoo.com.cn

Abstract. The complexity of modern program increases the difficulty to
compute the upper bound worst case execution time fast and accurately. A new
estimation method for WCET estimation is presented that uses graph theory to
solve the program complexity problem. In this method, program basic blocks
are represented as vertices in an undirected graph. The resulting graph can be
partitioned into connected subgraphs with no edges between them. These
subgraphs can in turn be broken into biconnected components. The
combinational problem is reduced to finding the maximum energy of these
small biconnected components and combining the results to identify the global
maximum energy information, that is the worst case execution time. This
algorithm will allow to analyze more complex program and can makes the
execution time upper bound more accurate.

1 Introduction
The worst-case execution time (WCET) estimation of a program remains a difficult
challenge. Software for today’s large embedded real time system is very complex,
consisting of many intercommunicating components for various devices and control
functions. The field of execution time analysis is both broad and deep. There are
many complimentary techniques that can be used to calculate the value of the WCET
for a complex system. However each technique assume that there is no interaction
between components. To deal with this intractable problem, the researchers trade off
prediction accuracy for computational complexity by proposing different pessimistic
heuristics, which results in fast but less accurate analysis. Different pessimistic
methods are thus proposed to cope with this complexity[1],[2],[3],[4],[5], and they
result in loose estimated WCET. Another severe drawback is that they cannot handle
any user annotations describing infeasible program paths, which are essential in
tightening the estimated WCET. In this article, we will present a new algorithm based
on graph theory, which enable to deal with programs that have interaction. A graph
G=[V,E] consists of an ordered pair, where V represents a nonempty set of vertices
and E symbolizes a set of edges. When V represents the program basic block and E
represents the set of program flows, graph G becomes a program control flow graph.
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 419–423, 2007.
© Springer-Verlag Berlin Heidelberg 2007

420

G. Wu and K. Yao

The rest of the paper arranges as follows. Section 2 describe the proposed
estimation method, section 3 gives the experiment results ,the conclusions and future
work are presented in section 4.

2 Graph-Theory Algorithm for WCET Estimation
Given that each instruction takes a constant time to execute, the total execution time
can be computed by summing the product of instruction counts by their corresponding
instruction execution times. Since all instructions within a basic block must have the
same execution counts, they can be considered as a single unit. If we let xi be the
execution count of a basic block Mi and ci be the execution time of the basic block,
then given that there are N basic blocks, the total execution time of the program is
given as:
N

T = ∑ ci xi

(1)

i

The possible values of xi are constrained by the program structure and the possible
values of the program variables. If we can represent these constraints as linear
inequalities, then the problem of finding the estimated WCET of a program will
become an ILP problem.
The linear constraints can be divided into two parts: program structural
constraints, which are derived from the program’s control flow graph (CFG), and
program functionality constraints, which are provided by the user to specify loop
bounds and other path information.
The accuracy of program control flow information effect the accuracy of WCET
estimation. In our algorithm, we can represent the program basic block in terms of
graph theory by making each residue a vertex in an undirected graph. If at least one
basic block of residue i interacts with at least one basic block of residue j, then there
is an edge between vertices i and j of the graph. The active residues can be
represented as a graph, the active residues can therefore be grouped into interacting
clusters. Residues in different clusters do not have contacts with one another. Each
cluster is a connected subgraph of the entire graph. The problem is therefore to
enumerating the combinations of the basic block for the residues in each connected
graph. Assuming each residues has the same number of basic block nblk. The graph in
Figure 1 has one residue labeled as a dark gray vertex that breaks the graph into two
pieces when removed. The global maximum of the execution time can be found by
identifying the maximum execution time configuration for each subgraph once for
each basic block of the keystone residues. The solution is the one that finds the
maximum execution time using equation (2), where EL is the largest execution time
combination of basic block in the left subgraph, ER is the right subgraph, Eself is the
execution time of interaction of the basic blocks. According to different programs,
give the constraints, all the constraints are passed with the goal of maximizing cost
function (2). The solver will return the estimated WCET.

A Graph-Theory Algorithm for WCET Estimation

421

To improve the process speed, we break up clusters of interacting basic block into

E = max{EL (ri ) + ER (ri ) + Eself (ri )}
ri

(2)

biconnected components of an undirected graph. Biconnected graphs are those that
cannot be broken apart by removal of a single vertex. Biconnected graphs are
cycles,nested cycles, or a single pair of residues connected by an edge. Vertices that
appear in more than one biconnected component are called “repoint”. Removing a
repoint from a graph breaks the graph into two separate subgraphs. Finding
biconnected components and their repoints is easily accomplished by using standard
depth-first search algorithm from graph theory contained in many computer science
textbooks. For each biconnected component with only one repoint, we find the
maximum execution time over all combinations of basic blocks of the residues in the
component. This execution time includes all interactions among these residues and
between these residues. The worst case execution path is the path that has the most
bidirect line path. In Figure 1 ,the worst case execution path is (1,2,3,4,5,…12).

Fig. 1. Flow graph using graph theory for software worst case execution time estimation

Algorithm 1.
Input: A new program sequence.
Output: Print the fixed basic block and the maximum execution time.
1. Rotamers: for each residue,read in rotamer dihedral angles and probabilities to
determine which pairs of basic block may be interact.
2. Disulfides: if desired, determine likely disulfide pairings.Fix the basic block that
are designated disulfides for the rest of the calculation.
3. Dead-end elimination: perform a DEE of rotamers that cannot be part of the global
maximum execution configuration by using the “Goldstein criterion”. The
Goldstein criterion is the simplest version of DEE. If the total execution time for
all basic blocks is expressed as the sum of self and pairwise execution time, see
equation (3). The execution time of interaction of these fixed basic blocks with any
unfixed basic blocks is added to the self-execution of the unfixed basic blocks.
That is equation (4).

422

G. Wu and K. Yao

4. Residue graph: define residues that have more than one rotamer left after the DEE
step as “active residues”. That is, determine which sets of residues form connected
graphs, given the list of edges.
5. Biconnected components:for each cluster, determine the set of biconnected
components and repoints in the graph by using a depth-first search procedure. The
order of each repoint is defined.
6. Solve clusters: find the maximum execution time for each connected graph(cluster)
in turn, for each biconnected component of the cluster with only one repoint,find
the maximum execution time of the residues in the component for each rotamer of
the repoint each connected graph. A branch-and-bound backtracking algorithm is
used for this purpose, in which the residues in the component are sorted from
lowest to highest number of rotamers.
N −1 N

E = ∑ Eself (ri ) + ∑∑ E pair (ri , rj )
N

i =1

(3)

i =1 j > i

N

Eself (ri ) = ∑ Ebb (ri ) +
i =1

∑ E (r , r )
pair

i

j

(4)

j∈ fixed

The maximum execution time is the maximum execution time of the self residues
plus the maximum execution time pairwise of these residues. The bound is defined as:

⎧⎪
⎫⎪
Ebound (i ) = ∑ ⎧⎨max Eself (rj )⎫⎬ + ∑∑ ⎨max E pair (rj , rk )⎬
rj
⎭ j > i k < j ⎪⎩
⎪⎭
j >i ⎩
r j , rk

(5)

3 Experimental Results
To verify the proposed method, we use Motorola MMC2107 development board as
target platform which is containing a 40MHz Motorola MMC2107 processor, 128KB
of main memory and several I/O peripherals. The M2107 processor contains an onchip 8KB direct-mapped instruction cache organized as 32-16-byte lines.
We select the set of benchmark programs from [1] for our evaluation. Since it is
impractical to simulate all the possible program input data and all initial system states,
a program’s actual WCET cannot be computed. We use the measured WCET in [1] as
the actual WCET, We assume that the measured WCET of a program is very close to
its actual WCET. Table 1 is the experimental results, time unit is clock period counts,
it shows that the proposed method give a more accurate WCET estimation than Wu’s
method[6]. By using graph theory can extract accurate program flow graph, and thus
make the estimation more accurate, and the results prove that the method we give is
right and feasible. The result is more accurate than the result in our previous work[6].
So it is an effective approach to use graph theory for embedded real time software
WCET estimation.

A Graph-Theory Algorithm for WCET Estimation

423

Table 1. WCET estimation experimental result

Function

Measured
WECT
6

Proposed
method
1.21*10

Wu’s method
6

1.18*106

FFT

1.25*10

DES

2.42*105

2.41*105

2.38*105

Stats

1.65*104

1.63*104

1.59*104

DCT

1.15*105

1.14*105

1.1*105

4 Conclusion
In this paper, we present a new method to find a tight bound on the worst case
execution time of real-time software. This approach combines graph-theory to extract
program flow graph and can deal with the program that have interaction between
components. Experimental results show that the estimated WCET is much closer to
the measured WCET. Our next research work will focus on combining data cache and
TLB cache analysis into graph-theory algorithm analysis, thus the WCET estimation
result will get more accurate.

Acknowledgment
The authors are gratefully acknowledge support from NSF grants 60673046,and thank
Professor Mingchu.Li for providing helpful comments and information.

References
1. Liu,J.C.,Lee,H.J.:Deterministic Upperbounds of Worst-case Execution Times of Cached
Programs. In: Proceeding of the 15th IEEE Read-Time Systems Symposium,Vol.30,New
York(1998)182-191.
2. Lim,S.S.,Young,H.B.,Gu,T.J.:An Accurate Worst Case Timing Analysis Technique for
RISC Processors. In: Proceeding of the 15th IEEE Real-Time Systems Symposium,Vol.30,
New York(1998)97-108.
3. Alan,C.S.:Reasoning about Time in Higher-level Language Software. IEEE Transactions on
Software Engineering, Vol.15,No.7,pp.875-889,July 1999.
4. Robert, A.: Bounding Worst-case Instruction Cache Performance. In: Proceeding of the
15th IEEE Real-Time Systems Symposium,Vol.30, New York(1998)172-181.
5. Li,Y.S.,Malik,S., Wolfe, A.: Cache Modeling for Real-Time Software Beyond Direct
Mapped Instruction Caches. In: Proceeding of the 17th IEEE Real-Time Systems
Symposium, Vol.35, New York (2002)35-42.
6. Wu ,GW.,Yao,lin.: A New WCET Estimation Algorithm based on Instruction Cache and
Prefetching Combined Model. Lecture Notes in Computer Science ,Vol (3605). SpringerVerlag, Berlin Heidelberg New York (2005) 557-562.

