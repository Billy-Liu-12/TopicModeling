Toward Optimizing Particle-Simulation Systems
Hai Jiang1 , Hung-Chi Su1 , and Bin Zhang2
1

2

Department of Computer Science, Arkansas State University,
Jonesboro, Arkansas 72401, USA
{hjiang,suh}@cs.astate.edu
Department of Chemistry & Physics, Arkansas State University,
Jonesboro, Arkansas 72401, USA
bzhang@astate.edu

Abstract. Optimized event-driven particle collision simulation is on demand to study the behavior of systems consisted of moving objects. This
paper discusses the design and implementation issues of such simulation
systems with various optimizations such as discrete event handling, Lazy
Determination Strategy (LDS), and optimal cell number/size selection to
overcome the delay caused by dynamical dependencies among collisions.
Quantitative analyses and experiment results are provided to illustrate
the performance gains acquired from these optimizations.
Keywords: Particle collision; event-driven simulation; lazy determination.

1

Introduction

Computer simulation has been widely used to study interactions among moving
particles in atomic physics [1], molecular dynamics [2,3,4], and many other research ﬁelds [5,6]. These interactions change the microscopic states (positions,
momenta, etc) of individual particles and drive particle systems toward macroscopic equilibrium (that can be described by temperature, chemical potential,
etc.). However, realistic simulation process is computationally intensive. As long
as the simulation time is concerned, eﬀective simulation programs are on demand.
In this paper, we will focus on the dynamical simulation of a system of partons
(quarks and gluons) in the Quark-Gluon Plasma produced in relativistic heavy
ion collisions. The algorithm used in the parton cascade model (developed by
Zhang [1]) will be employed for solution of Boltzmann equation involving large
number of particles. This paper makes the following contributions: First, the
breakdown of a simulation program is analyzed to identify candidates for optimization. Second, Lazy Determination Strategy (LDS) is proposed to speed up
simulation execution. Third, optimal cell number selection formula is provided
for better decision making. These generic optimizations improve both sequential
and parallel algorithms without introducing any error in the simulation results.
The remainder of this paper is organized as follows: Section 2 introduces
the background of many-particle simulation. Section 3 discusses how to manage
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 286–293, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Toward Optimizing Particle-Simulation Systems

287

local and global events. In Sections 4 and 5, we describe the Lazy Determination
Strategy and optimal cell number/size selection, respectively. Some experimental
results are given in Section 6. Our conclusions are presented in Section 7.

2

Background of Particle Simulation Systems

Time-driven simulation displaces all particles synchronously over a small discrete time period and checks the overlaps among particles whereas event-driven
simulation displaces them over a serial of predicted collision events. The latter
one’s simulation time can advance to the next event time instead of crawling
through all time periods in between [3,5,6,7]. This is more eﬃcient, especially
in sparse particle systems. Therefore,the event-driven approach is adopted by
most simulation systems [1,8], including those parallelized ones which take the
multi-tasking strategy for execution speedups [4].
A discrete-event simulation needs to ﬁnd out all events and simulate them
one-by-one. The particle simulation program consists of three steps:
1. Collision Prediction (CP) / Collision Adjustment (CA): determine the possible collision for each particle
2. Collision Selection (CS): search for the overall earliest next possible collisions
3. Event Handling (EH): simulate the actual collisions or other events
When a simulation starts, all particles participate in Step 1. For particle i, it
can collide with any other ones, i.e., there are N − 1 possible collision events
in an N -particle system. These events can be sorted according to their collision
time and saved in a local event list: ei1 ei2 ei3 ...ei(N −1) . The process to derive and
sort these events is called Collision Prediction (CP) whereas to update only one
event, especially the ﬁrst/earliest event ei1 , is called Collision Adjustment (CA).
A local event list can contain as few as only the ﬁrst/earliest collision event.
When a collision happens, the previously recorded events involving the colliding particles become invalid. Colliding particles need to go through CP. Other
particles may have the colliding particles as recorded future collision partners.
Whether these particles need to activate CP/CA depends on the determination
strategy.
In Step 2 Collision Selection (CS), we need to ﬁnd out the earliest collision.
When each collision involves only two particles (note: three or more particles
collisions can be more complicated), there are up to N/2 possibilities saved in
a sorted global event list: e1 e2 e3 ...eN/2 . Whenever an event takes place, it only
ﬁlters out future ones with current colliding particles involved. If we maintain an
event dependency graph, a subgraph will be reshaped and only aﬀected events
will be re-calculated. Obviously, graph maintenance is costly. But without it,
all future collision events need to be checked for validation. Strong causal relationship among collisions imposes the major bottleneck in particle simulation
systems.
In Step 3 Event Handling (EH), actual collisions or other events will be simulated. This step will update colliding particles’ states, including formation time,
position, and velocity, etc. Then, the system will loop back to Step 1.

288

3

H. Jiang, H.-C. Su, and B. Zhang

Event Management

The Collision Selection (CS) in Step 2 is critical for simulation performance. The
Collision Prediction (CP) in Step 1 normally employs linear search approach
with complexity O(N ) for particle i’s next collision time tci . For cold systems,
i.e., newly started ones, all particles participate in CP and make complexity
O(N 2 ). If CS in Step 2 also uses linear search for the global minimal collision
with tmin = min(tc1 , tc2 , ...tcN ), the complexity is O(N ) too. If particles j and
k collide, they will update their states in Step 3 and loop back to Step 1 to
call CA for new tcj and tck . Even if several other particles apply CP/CA, the
complexity still remains as O(N ) [1] whereas EH in Step 3 keeps O(1). The
whole algorithm’s complexity is O(N ) + O(N ) + O(1) = O(N ) [7].
Many algorithms have been proposed to speed up CS. The global event list
can be mapped onto well known data structures such as min heap, complete
binary trees, and other tree-like structures with complexity O(log N ) [3,5,6]. The
idea is to sort all possible collision events completely or partially according to
their timestamps. It takes O(1) time to remove the earliest event and O(log N )
time to maintain the data structure state after event insertion/deletion. The
assumption is that the N in CP can be reduced to N so that for actual values,
there exists αN ≤ β log N , where α and β are operational costs. Otherwise, the
improvement in CS (Step 2) will be limited.

4

Lazy Determination Strategy (LDS)

The intuitive Eager Determination Strategy (EDS) in Step 1 intends to determine predictions as early as possible. However, because of the nature of dynamically causal relationship among collisions, this conservative scheme causes some
unnecessary prediction updates. Lazy Determination Strategy (LDS) postpones
prediction process to prevent from drawing a conclusion too early.
4.1

Cell Structure

Originally, each particle in CP needs to derive local event list ei1 ei2 ei3 ...ei(N −1)
with complexity O(N ). It is clear that particle systems hold strong collision
locality characteristic, i.e., particles are likely to collide with nearby ones ﬁrst.
If the local even list is created based on particles in neighborhood, its size will
N . As mentioned before, when αN ≈ β log N ,
be much smaller, i.e., N
optimization in CS of Step 2 becomes much more eﬀective.
A simulation space can be partitioned into a grid of 3D cells. If there are at
least 3 cells along each dimension, a particle only needs to check collisions with
particles in 27 neighboring cells (including the residing one). The cell number
will be 9 in 2D case, as shown in Figure 1.
For two far-apart particles to collide, they need to enter each other’s neighborhood ﬁrst. Then cell structure has to introduce a new type of event, Boundary
Crossing (BC), to detect a particle’s entering and leaving actions. It moves particles from one cell to another and its cost is far less expensive than the one to

Toward Optimizing Particle-Simulation Systems

289

d
a

b

c
e

Fig. 1. The neighborhood of a particle

Fig. 2. Collision update scenario

detect whether two particles collide or not, called Collision Determination (CD),
which requires several costly ﬂoating point operations. Thus, reducing frequency
of CD can obtain performance gains. The less the BC cost is, the more cells
one can aﬀord to create without adversely aﬀecting performance. Then, fewer
particles will be involved in the updating of local event lists and less time is
taken for CD/CP.
With naive EDS, a particle’s position is updated after BC events. LDS has
been widely used to postpone this since they can be derived easily according to
the original position [5,6].
4.2

LDS for Collision Events

After a collision, colliding particles have to go through CP for next possible
collision. Other particles in neighboring cells, called third partners, may or may
not enter CP and CA processes.
Delayed Collision Prediction. If third partners intend to collide with current
colliding particles in the future, such predictions are obviously out-of-date. With
EDS, third partners need to issue CP immediately for new collisions. In Figure
2, particles a and b collide. Third partner c who planned to collide with old a will
have to re-predict its next collision. Such recursive CP turns Step 1 into O(mN ),
where m is determined by the dependency graph. For example, if the dependency
graph is a shape of star, m will be O(N ) and the complexities of Steps 1 and
2 will be O(N 2 ) and O(N log N ), respectively. Because of dependency, each
particle might call CP multiple times and results from early activations are
overwritten by latter ones.
LDS keeps out-of-date collisions. Such fake collisions remain in the global
event list in Step 2. Only when a fake collision becomes the next global event
from CS, will CP be activated for the third partner. LDS with fake collisions
can reduce some unnecessary CPs for performance gains.
Delayed Collision Adjustment. In colliding particles’ CP process, if particles
ﬁnd that they might collide with a third partner earlier than its recorded next
collision with others, EDS will update the third partner ’s next collision by calling
CA. For example, after the collision between a and b shown in Figure 2, particle a
ﬁnds it can collide with third partner d at a time earlier than the one registered
in d. LDS suggests not to call CA on d since particle a might ﬁnd an even

290

H. Jiang, H.-C. Su, and B. Zhang

earlier collision with another particle. Only when particle a ﬁnishes its CP and
it still intends to collide with particle d, will CA be called for particle d. Some
immature decisions are avoided. This can achieve about 5% performance gain in
our system.

0000
1111
1111
0000
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111

Fig. 3. Boundary crossing over one side

4.3

0000
1111
1111
0000
0000
1111
0000
1111
1111
0000
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
0000
1111
1111
0000
0000
1111
0000
1111
1111
0000
0000
1111
0000
1111

Fig. 4. Boundary crossing over a corner

LDS for Boundary-Crossing Events

If the next event from the global event list is a BC event, the moving particle
will activate partial CP only for new territories such as the right column in
Figure 3 and the upper-right area in Figure 4. Their opposite areas will be out
of the moving particle’s neighborhood, as the striped parts in Figures 3 and 4.
EDS always checks these left-behind areas to clean up moving particle’s eﬀect
whereas LDS prefers to leave them untouched. If an old particle still collides
with the moving one, it will enter the latter one’s neighborhood ﬁrst. Otherwise,
the collision will be a fake collision handled by calling CP when it is popped out
of the CS process.

5

Optimal Cell Number/Size

Cell structure reduces the cost of CP/CA in Step 1 by narrowing down the scope
of local event lists with minor BC cost. Assume with LDS, the real collision list
is ec1 ec2 ec3 ..., and the overall event list is ec1 eb1 ...ebm ec2 ebm+1 ...ebn ec3 ... with BC events
ebi inserted between collisions. If no cell structure is applied, the time between
two real collision events is:
tbetween = tehcol + tcpcol + tca + tcs ,

(1)

where tehcol is the cost of state update, tcpcol , tca and tcs are the overheads for
CP, CA, and CS. Since state update operation and event management algorithm
are ﬁxed, tehcol and tcs are almost constants. And the adjustment time tca is
relatively smaller. So tcpcol dominates the whole system’s behavior. With cell
structure and extra costs for BC events, it will turn into
tbetween = tehcol + t cpcol + tca + tcs + λ(tehbc + tcpbc + tca + tcs ),

(2)

where λ is number of BC events, tehbc is time for next BC calculation, tcpbc is the
CP cost for BC, and for the same collision, CP cost t cpcol is diﬀerent from tcpcol .

Toward Optimizing Particle-Simulation Systems

291

To speed up simulation, we need to ensure tbetween < tbetween and maximize
their diﬀerence:
tdif f = tbetween − tbetween = tcpcol − t cpcol − λ(tehbc + tcpbc + tca + tcs ).

(3)

Without cells, tcpcol = 2N Δ, where N is the particle number and Δ is the CD
time. Since tcpcol is a constant, best simulation result comes from minimizing
BC cost function f = t cpcol + λ(tehbc + tcpbc + tca + tcs ). We assume that the box
size is l3 , cell number n3 (n along each dimension), particle’s cross section is σ
and its velocity is v (v = 1). The time between two collisions can be expressed
l3
as σN
2 . BC number λ within this period will be:
nl2
n
l3
· = √
.
λ= √
3σN 2 l
3σN 2

(4)

The cost function f changes according to cell number n, and can be reﬁned as
f (n) =

54N
nl2
mN
√
Δ
+
( 3 Δ + τ ),
2
n3
n
3σN

(5)

where τ = tehbc + tca + tcs which is almost a constant and m is the number of
newly joined cells in BC events. Both Δ and τ can be determined in simulation
programs. Two colliding particles need to run full CP with 27 neighboring cells
and each BC particle runs partial CP on m (9∼18) newly joined cells. The
optimal cell number can be derived by equating the derivative (with respect to
n) to zero:
162N Δ
2ml2 Δ
l2τ
d
√
√
f (n) = −
−
+
= 0,
(6)
dn
n4
3σN n3
3σN 2
or equivalently,
√
162 3σN 3 Δ
2mN Δ
4
n −
n−
= 0.
τ
l2 τ
Δ
Since term 2mN
n grows slower than the other one, the starting search point
τ
for the optimal cell number nopt is:

nopt0 =

4

√
162 3σN 3 Δ
.
l2 τ

(7)

From here, minor adjustment is applied to approach to nopt quickly.

6

Experimental Results

We have conducted some experiments to illustrate various optimization results
which indicate how much Lazy Determination Strategy (LDS) in Step 1 and
event management algorithm in Step 2 will aﬀect the simulation performance.
Our test platform is a 3.8 GHz Pentium IV PC with 2 GB memory and 1MBcache running SUSE 10. The simulation is conducted in a 10x10x10 unit3 3-D

292

H. Jiang, H.-C. Su, and B. Zhang
700000

Eager Determination Stragety (EDS)
Lazy Determination Stragety (LDS)

Execution Time (Seconds)

Number of Events

500000
400000
300000
200000

100

80

60

40

20

100000

0

0
0

500

1000
1500
Number of Particles

2000

0

2500

Fig. 5. Re-Prediction for third partners

500

17
Optimal Cell Number (Along Each Dimention)

Boundary Crossing (with optimal cell number - 14x14x14)
Collision
500000

400000

300000

200000

100000

1000

1500
2000
Number of Particles

2500

3000

Fig. 6. Overall simulation time

600000

Number of Events

EDS-Linear
LDS-Linear
EDS-Heap
LDS-Heap

120

600000

EDS-Heap
LDS-Heap
EDS-Linear
LDS-Linear

16
15
14
13
12
11
10
9
8
7
6
5
4

0
0

500

1000

1500

2000

2500

Number of Particles

Fig. 7. Boundary Crossing vs. Collision

200

400

600

800 1000 1200 1400 1600 1800 2000 2200 2400 2600
Number of Particles

Fig. 8. Optimal cell number selection

box. Periodic Boundary Conditions (PBC) are used to reduce ﬁnite size eﬀect.
Particles’ cross section is 0.5 unit2 . All tests are run to 10 time units.
LDS overcomes the conservativeness in EDS which intends to make the simulation system consistent all the time. Figure 5 shows the number of CP invocations called by third partners. LDS reduces such invocations dramatically
and the only left-over ones are the fake collisions. Higher density cases will show
the advantage of LDS even clearer. The lazy/relaxed consistency scheme reduces
simulation time by avoiding unnecessary immature predictions.
EDS and LDS are the options for CP in Step 1 whereas linear search and heap
are representative algorithms for CS in Step 2. Diﬀerent combination results are
shown in Figure 6. EDS and LDS adjust the m in O(mN ) whereas linear search
and heap determine Collision Selection algorithms with complexities O(N ) and
O(log N ), respectively (N
N ). When linear search is adopted, Step 2 will
dominate the performance as the top two curves in Figure 6 where LDS can
only achieve minor improvement. However, with a heap, the eﬀect from LDS
becomes much clearer since the inﬂuence from Step 2 is reduced dramatically.
Cell structure determines the local event list length, i.e., N . But it causes
BC event although its overhead is much smaller than the one of collision determination. The ratio is about 1:8 in our system and can be acquired at runtime.
Figure 7 shows the numbers of these two kinds of events. Cheaper BC events are
used to narrow down the search scope in CP. Cell structure is more important

Toward Optimizing Particle-Simulation Systems

293

when heap is used (Step 2 is less dominant), as shown in Figure 8. This is clear
in sparse cases before the top two curves hit the cell number limit (determined
by the condition: cell size> σ/π) on the top. EDS has a higher demand on
cell number than LDS so that cell size will be smaller to reduce unnecessary
prediction/update.

7

Conclusions

This paper analyzes and demonstrates diﬀerent optimization schemes and their
roles in overall simulation execution. Lazy Determination Strategy (LDS) contributes more performance gains whenever eﬃcient event handling algorithms
such as heaps are employed. Delayed prediction/updates avoid some immature
decisions with no error introduced. Cell structure limits the search scope for next
collision. The calculation of the initial optimal cell number is provided to help
step toward the ﬁnal optimal one quickly. These optimizations speed up executions without any negative impact on the accuracy and stability of simulation
results. Their eﬀectiveness is quantitatively analyzed. They can be utilized and
even further exploited by any serial and parallelized particle simulations.

Acknowledgment
This research was partly supported by the U.S. National Science Foundation
under grant No. PHY-0554930.

References
1. Zhang, B.: ZPC 1.0.1: a parton cascade for ultrarelativistic heavy ion collisions.
Computer Physics Communications 109 (1998) 193–206
2. Donev, A., Torquato, S., Stillinger, F.: Neighbor list collision-driven molecular dynamics simulation for nonspherical hard particles. i. algorithmic details. Journal of
Computational Physics 202(2) (2005) 737–764
3. Isobe, M.: Simple and eﬃcient algorithm for large scale modecular dynamics simulation in hard disk system. Intl. J. of Modern Physics C(10) (1999) 1281–1293
4. Miller, S., Luding, S.: Event-driven molecular dynamics in parallel. Journal of
Computational Physics 193(1) (2004) 306–316
5. Sigurgeirsson, H., Stuart, A., Wan, W.L.: Algorithms for particle-ﬁeld simulations
with collisions. Journal of Computational Physics 172(2) (2002) 766–807
6. Lubachevsky, B.D.: How to simulate billiards and similar systems. Journal of
Computational Physics 94(2) (1991) 255–283
7. Su, H.C., Jiang, H., Zhang, B.: An empirical study on many-particle collision algorithms. In: Proc. of the Intl. Conf. on Comp. and Their App. (2007)
8. Kim, D.J., Guibas, L.J., Shin, S.Y.: Fast collision detection among multiple moving
spheres. IEEE Trans. on Visualization and Comp. Graphics 4(3) (1998) 230–242

