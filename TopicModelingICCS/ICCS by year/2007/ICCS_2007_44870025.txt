User-Controllable GPGPU-Based
Target-Driven Smoke Simulation
Jihyun Ryu1 and Sanghun Park2,
1

Dept. of Applied Mathematics, Sejong University, Seoul 143-747, Republic of Korea
ajhryu@sogang.ac.kr
2
Dept. of Multimedia, Dongguk University, Seoul 100-715, Republic of Korea
mshpark@dongguk.edu
Abstract. The simulation of ﬂuid phenomena, such as smoke, water,
ﬁre, has developed rapidly in computer games, special eﬀects, and animation. The various physics-based methods can result in high quality
images. However, the simulation speed is also important issue for consideration in applications. This paper describes an eﬃcient method for
controlling smoke simulation, running entirely on the GPU. Our interest
is in how to reach given user-deﬁned target smoke states in real time.
Given an initial smoke state, we propose to simulate the smoke towards
a special target state. This control is made by adding special external
force terms to the standard ﬂow equation.
Keywords: GPGPU, Navier-Stokes equations, interactive simulation.

1

Introduction

The modeling of natural phenomena such as smoke, ﬁre, and liquid has received
considerable attention from the computer graphics industry. This is especially
true for visual smoke models, which have many applications in the creation of
special eﬀects and interactive games. It is important to produce highly realistic
results as well as simulate eﬀects in real time. This becomes a more challenging
if the produced animation can be controlled by users. Recently computer graphics researchers have created simulations for controlling ﬂuids. Treuille et al. [2]
introduced a method to control ﬂuid ﬂows to obtain the target shapes. However,
this method is too slow in shape controlled ﬂow simulation. In fact, in real-time
applications such as computer games, the simulation speed is more important
than image quality. This paper presents a method of controlling interactive ﬂuids
in real time using the GPU (Graphics Processing Unit). It is based on the results
of Fattal et al. [1], and our goal is to perform all the steps on the GPU. This technique can interactively create target shapes using computer-generated smoke.

2

Mathematical Background

To simulate the behavior of ﬂuid, we must have a mathematical representation
of the state of the ﬂuid at any given time. The greatest quantity to represent
Corresponding author.
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 25–29, 2007.
c Springer-Verlag Berlin Heidelberg 2007

26

J. Ryu and S. Park

is the velocity of the ﬂuid. But the ﬂuid’s velocity varies in both time and
space, so we represent this as a vector ﬁeld. The key to ﬂuid simulation is to
take steps in time and determine the velocity ﬁeld at each time step. We can
achieve this by solving special equations. In physics, we assume an incompressible
and homogeneous ﬂuid for ﬂuid simulation. This means that density is constant
in both time and space. Under these assumptions, the state of the ﬂuid over
time can be described using the Navier-Stokes equations for incompressible ﬂow:
∂u
2
∇ · u = 0 where u(x, t) is the velocity vector
∂t = −u · ∇u − ∇p + ν∇ u + F,
of the position vector x at time t, p(x, t) is the pressure, ν is the kinematic
viscosity, and F represents any external forces that act on the ﬂuid. In our case,
we may simulate the non-viscosity ﬂuid and therefore solve the Euler Equation
with ν = 0;
∂u
= −u · ∇u − ∇p + F,
∇·u=0
(1)
∂t
Let ρ = ρ(x, t) be the density scalar ﬁeld at position x and time t. In order to
describe the transport of the smoke along the ﬂuid’s velocity ﬁelds, we solve the
additional equation;
∂ρ
= −u · ∇ρ
(2)
∂t
Moreover, the external forces term provides an important means of control over
the smoke simulation. In the result of Fattal et al. [1], the special external term
F (ρ, ρ∗ ) depends on the smoke density ρ with the target density ρ∗ . This result
has the same direction as the gradient vector
of ρ∗ . In addition, a “normalized”
∇ρ∗
∗
gradient can be used by F (ρ, ρ ) ∝ ρ∗ . The blurring ﬁlter of ρ∗ must have
suﬃciently large support, since the target density ρ∗ is constant and ∇ρ∗ = 0.
In order to ensure ∇ρ∗ = 0, the blurred version of ρ∗ , denoted by ρ˜∗ , can be used.
˜∗
The force is F (ρ, ρ∗ ) = ρ˜ ∇ρ˜ρ∗ ≡ Fdf where Fdf is named the “driving force”. In
summary, we have two modiﬁed equations for the controlled ﬂuid simulations.
The ﬁrst is the advection equation for density; the second is the momentum
equation using the driving force.
∂ρ
= −u · ∇ρ,
∂t

∂u
= −u · ∇u + ∇p + Fdf
∂t

(3)

In addition, another external force, denoted by Fui , for user interaction, can be
applied to ﬂuid by clicking and dragging with the mouse. The force is computed
from the direction and length of the mouse drag.

3

Implementation Details

The goal of this research has been to improve user interaction with computergenerated smoke. We implemented GPGPU (General-Purpose computation on
GPUs) based techniques to simulate dynamic smoke that can be described by
PDEs. Algorithm 1 shows a method to process the user-controllable interactive target-driven simulation. Fattal et al. [1] introduced oﬄine target-driven

User-Controllable GPGPU-Based Target-Driven Smoke Simulation

27

Algorithm 1. User-controllable interactive target-driven simulation algorithm
1: Load a target key-frame, initialize target density ﬁeld ρ∗
2: while (1) do
// from user interaction
3:
Setup external force Fui and density ﬁeld ρui
// apply gaussian ﬁlter and add external force
4:
ρ ← ρ˜, u ← u + Fui
5:
if (target-driven) then
˜∗
6:
Fdf ← ∇ρ˜ρ∗ ρ, u ← u + Fdf
// add driving force
7:
end if
8:
v ← ∇ × u, u ← u + vΔt
// vorticity
∂u
= −u · ∇u
// advection of velocity
9:
∂t
// projection
10:
∇2 p = ∇ · u, u ← u − ∇p
// add density
11:
ρ ← ρ + ρui
∂ρ
= −u · ∇ρ
// advection of density
12:
∂t
13:
draw(ρ)
14: end while

(a) free

(b) target-driven

(c) target-driven

(d) target-driven

(e) free

(f) target-driven

(g) target-driven

(h) target-driven

Fig. 1. User-controllable interactive simulation snapshots

animation on CPUs, our algorithm is based on this technique. In free simulation mode, users can generate external force Fui and density ﬁeld ρui from
mouse movement. The users can change the current simulation mode to targetdriven by pressing a keyboard button, and the driving force Fdf is applied to
current velocity ﬁeld u. This results in driving the current density ﬁeld ρ to a
pre-deﬁned target image ρ∗ . Gaussian ﬁltering for the blurring operation can
be implemented in a fragment shader, since recent shading languages support
nested loops in shader programs. All of the operations in the algorithm are implemented eﬃciently as fragment shaders to maximize the degree of rendering speed
enhancement; it is possible for users to control smoke simulation interactively.

28

J. Ryu and S. Park

Table 1. Simulation speeds (frames per sec) where resolution of display windows is
256 × 256 and nji is the number of Jacobian iteration. The results were evaluated on
a general purpose PC, equipped with a 3.0 GHz Intel Pentium D processor, 1 GB of
main memory, and a graphics card with an NVIDIA GeForce 7900 GT processor and
256 MB of memory.

nji
50
150
300

Grid of simulation ﬁelds
128 × 128
59.64
58.01
29.62

256 × 256
15.03
14.99
11.99

512 × 512
4.60
3.99
3.32

To verify the eﬀectiveness of our proposed GPGPU-based system, in smoke
simulation, we present timing performances for solving the Navier-Stokes
equations on diﬀerent sized grids. Fig. 1 shows the snapshots of the smoke
simulation sequence. The resolution of each image is 256 × 256, and starting
simulation mode is free. The system allows users to change the current simulation mode to either target-driven or free. In (a), users can interactively generate
smoke by calculating external force Fui and density ﬁelds ρui through mouse
movement in free mode. In selecting target-driven mode, current smoke starts
moving to a pre-deﬁned target key-frame (in this example, “SIGGRAPH” image was used for the target key-frame) shown from (b) to (d). When users choose
free mode again, the driving force Fdf no longer aﬀects simulation operation and
users are able to apply their interaction to the current simulation ﬁeld shown in
(e). The status of target-driven mode re-activated without any user interaction
is shown in (f) and (g). We can see that the image quality of (g) is almost identical to that of (d). When the mode is switched to target-driven after running
in free mode for a few of seconds, the situation where smoke gathers around
the target key-frame is shown in (h). Table 1 shows the simulation speeds on
diﬀerent simulation grids where 256 × 256 of ﬁxed display window resolution is
used. The system can run smoke simulation at about 12 ∼ 15 frames per second,
where both the grid of simulation ﬁelds and the resolution of display windows
are 256 × 256.

4

Concluding Remarks

Interactive applications, such as computer games, demand realism, but cannot aﬀord to sacriﬁce speed to achieve this requirement. We developed usercontrollable smoke simulation techniques based on GPGPU computations with
these requirements as consideration. This permits the user to select and change
the behavior of features as the simulation progresses. Users can create and modify density and ﬂow elements of Navier-Stokes simulation, through a graphic
user interface. This system also provides an interactive approach to simulate the
smoke towards a special target state.

User-Controllable GPGPU-Based Target-Driven Smoke Simulation

29

Acknowledgements
This work was supported by the Korea Research Foundation Grant funded by
the Korean Government (MOEHRD) (KRF-2006-331-D00497) and Seoul R&BD
Program (10672).

References
1. Fattal, R., Lischinski, D.: Target-driven smoke animation. Transactions on Graphics,
Vol. 23, No. 3. ACM (2004) 441–448
2. Treuille, A., McNamara, A., Popovic, Z., Stam, J.: Keyframe control of smoke simulation. Transactions on Graphics, Vol. 22, No. 3. ACM (2003) 716–723

