Non-preemptive Fixed Priority Scheduling of
Hard Real-Time Periodic Tasks
Moonju Park
Ubiquitous Computing Lab., IBM Korea, Seoul, Korea
mjupark@kr.ibm.com

Abstract. This paper addresses the problem of scheduling periodic
tasks on a uniprocessor using static priority assignment without preemption. The problem of non-preemptive ﬁxed priority scheduling has
received little attention until recently, while real-life applications are often based on non-preemptive systems especially in case of embedded
systems. In this paper, we show that Rate Monotonic priority assignment is optimal for non-preemptive scheduling when each task’s relative
deadline is equal to its period. We have derived a schedulability bound
for non-preemptive Rate Monotonic scheduling by using period ratio
of the tasks to provide a guarantee that tasks will meet their deadlines.
Since the obtained bound is relatively small comparing with the preemptive scheduling, we also propose a method for designing high-utilization
non-preemptive system to enhance the utilization bound.
Keywords: real-time scheduling, non-preemptive, periodic tasks, rate
monotonic, utilization bound.

1

Introduction

In this paper, we address the problem of ﬁxed priorities non-preemptive scheduling of hard real-time periodic tasks. In many real-time scheduling problems such
as I/O scheduling, preemption is often impossible or prohibitively expensive due
to properties of hardware device and software handling the device [5]. For example, [10] showed that non-preemptive ﬁxed priority scheduling can be used
for real-time signal processing applications because the amount of processor
state including the stack to be stored can be reduced. Also non-preemptive
scheduling on uni-processor systems eliminates the synchronization overhead of
resource protecting mechanism. Since we can expect much lower overhead and
smaller memory requirement at run-time with non-preemptive scheduling, nonpreemptive scheduling is widely used in embedded systems, especially devices
such as cell phones whose behaviour largely depends on network I/O.
Non-preemptive schedulers have received less attention than the preemptive
ones, which have been extensively studied for both ﬁxed and dynamic priority
assignments since well-known results of Liu and Layland [8]. It is known that the
This work was supported in part by MIC & IITA through IT Leading R&D Support
Project.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 881–888, 2007.
c Springer-Verlag Berlin Heidelberg 2007

882

M. Park

general problem of ﬁnding a feasible schedule in an idling non-preemptive context
is NP-complete. But some results are known for non-idling dynamic priority nonpreemptive scheduling. [5] showed that Earliest Deadline First (EDF) is optimal
among non-idling schedulers, non-preemptive scheduling of concrete periodic
tasks is NP-Hard in the strong sense, and a necessary and suﬃcient condition
for schedulability under non-idling EDF. It was shown in [4] that the worst case
response time can be calculated using the results of [12].
Contrary to the preemptive context and dynamic priority scheduling, less results are known about ﬁxed priority non-preemptive scheduling. It was shown
that Deadline Monotonic is not optimal when relative deadline diﬀers from period [4], but we do not know yet whether there is an optimal ﬁxed priority
scheduler when relative deadline is equal to period. Since there is little guidance for designing ﬁxed priority non-preemptive systems, engineers in such an
environment as small embedded devices are developing their systems by trialand-error. They build systems with a certain priority assignment, and if the
system crashes, they add more resources, change periods, or change priorities.
The main purpose of this paper is to establish results on schedulability and optimal schedulers, and to give a guidance of designing ﬁxed priority non-preemptive
systems, for example, utilization bound.
This paper is organized as follows. Section 2 summarizes assumptions and
terms used in this paper. Schedulability conditions and optimal schedulers will
be discussed in section 3. Section 4 gives a utilization bound for non-preemptive
Rate Monotonic scheduler, and some guides for achieving higher utilization.
Finally, section 5 concludes our work.

2

Computational Model and Assumptions

A periodic task is denoted by τi . A periodic task set is represented by the collection of periodic tasks, τ = {τi }. Each τi is associated with (Ti , Di , Ci ); period,
relative deadline, and the worst case computation time respectively. The total
i
utilization of a periodic task set τ is given by Uτ = τi ∈τ C
Ti . For a given task
τi , we deﬁne hp(τi ) as the subset of τ consists of tasks with priority equal to or
higher than τi . On the other hand, lp(τi ) is the set of tasks with lower priority
than τi .
A concrete task has a speciﬁed release time, or the time of the ﬁrst invocation.
The diﬃculty of scheduling tasks can be aﬀected by the release time. A periodic
task set is said to be schedulable if and only if all concrete task sets that can
be generated from the periodic task set are schedulable. We will consider only
periodic task sets in this paper.
The following is a summary of assumptions used in this paper.
–
–
–
–

There is only one processor.
Scheduling overhead can be ignored.
Ci ≤ Di ≤ Ti
Tasks are sorted in non-decreasing order by period. That is, for any pair of
tasks τi and τj , if j < i then Tj ≤ Ti .

Non-preemptive Fixed Priority Scheduling

883

– Tasks are all independent and cannot be suspended by themselves.
– Tasks become ready when arrive. (i.e., there is no inserted idle time.)

3

Schedulability of Scheduling Non-preemptive Periodic
Tasks

The following lemma from [4] shows the concept of level-i busy period [7] is also
useful in non-preemptive scheduling.
Lemma 1. A periodic task τi has the largest response time in a level-i busy
period obtained by releasing all tasks τj with τj ∈ hp(τi ) simultaneously at time
t = 0, and the task τk with τk ∈ lp(τi ) and Ck = max{Cl |l > i} just before time
t = 0.
Readers may notice that the level-i busy period given in Lemma 1 is basically
simialr to the critical interval of dynamic priority driven scheduler in [5]. The
interval given in Lemma 1 is an extension of the concept of the critical instant
in [8].
Based on Lemma 1, the following theorem establishes a necessary and suﬃcient condition for schedulability for any periodic tasks with ﬁxed priorities.
Theorem 1. A periodic task set τ is schedulable using a ﬁxed priority scheduler
if and only if
Di
i
+
(1)
Cj ≤ Di
Cmax
Tj
τj ∈hp(τi )

i
= max{Ck |k > i}.
for ∀τi ∈ τ where Cmax

Proof. Theorem 1 is derived directly from Lemma 1 and non-preemptibility of
tasks.
(if-part) Since a level-i busy period starts from time t = 0, the maximum
processor demand of the tasks with priority higher than or equal to τi before the
deadline of τi is given by:
Di
Cj
Tj
τj ∈hp(τi )

Note that we use ﬂoor function rather than ceiling function, because tasks are
non-preemptive. Since tasks are non-preemptive, we do not need to examine the
last instances released after the level-i busy period. Because a task with lower
priority than τi is already executing just before time t = 0, the execution time
i
of the task Cmax
should be accounted. Thus the total processor demand in the
level-i busy period is less than or equal to:
i
Cmax
+
τj ∈hp(τi )

Di
Cj
Tj

884

M. Park

By Lemma 1, if τi meets its deadline in the level-i busy period, it will never miss
its deadline. Therefore if all tasks satisfy equation (1), the task set is schedulable
by a ﬁxed priority scheduler.
(only-if-part) Let us assume that τ is schedulable but the equation (1) is not
satisﬁed for some τi . Using Lemma 1, we can make a concrete periodic task set
such thas τi has the processor demand equal to lefthand side of the equation
(1). Since the processor demand exceeds its period, τi should miss its deadline,
which leads to a contradiction.
The condition in Theorem 1 is similar to the results of Priority Ceiling Protocol
(PCP) [11] or Stack Resource Policy (SRP) [3] by considering the processor as a
shared resource. However, using Theorem 1, we can determine the schedulability
problem of non-preemptive ﬁxed priority scheduling in polynomial time, while
the results for preemptive scheduling has pseudo-polynomial time complexity.
Now we will investigate the problem of optimal priority assignment for nonpreemptive scheduling. Suppose that each task τi has the same relative deadline
as its period, i.e., Di = Ti . In this case, it is well known that Rate Monotonic
(RM) scheduling algorithm [8] is optimal for preemptive scheduling. The following theorem shows RM scheduling is also optimal for non-preemptive scheduling.
Theorem 2. Rate Monotonic is an optimal priority assignment for non- preemptively scheduling periodic task sets with Di = Ti .
Proof. Let τ = {τ1 , τ2 , . . . , τi , τi+1 , . . . , τn } be a set of n tasks sorted in nondecreasing order by period. Suppose that a scheduling algorithm assigns τi+1
higher priority than τi and the task set is schedulable using the priority assignments. Let us consider Rate Monotonic priority assignment with τi being the
higher priority one by interchanging the priorities of τi and τi+1 . For task τi , the
i
interference due to higher priority task is reduced by Ci+1 and Cmax
is given by
i
max{Cj |j = i + 1, i + 2, . . . , n}. And Cmax for τi when it has a lower priority
than τi+1 was max{Cj |j = i + 2, i + 3, . . . , n}. The interference τi experience
after priority exchange is
max{Cj |j = i + 1, i + 2, . . . , n} ≤ max{Cj |j = i + 2, i + 3, . . . , n} + Ci+1 . (2)
Because the total interference for τi is reduced, τi will remain schedulable .
Now let us consider task τi+1 . It is easy to see that lowering the priority does
i+1
not increase Cmax
. The only increased interference due to the priority exchange
Ci . As pointed out in [8], if when τi+1 has higher priority
is τi ’s execution, TTi+1
i
than τi execution time of Ci+1 + Ci ≤ Ti can be serviced during Ti , the increased
Ci , can be successfully handled
interference time due to priority exchange, TTi+1
i
during Ti+1 because

Ti+1
Ti

Ti ≤ Ti+1 . Therefore τi+1 will meet its deadlines also

with Rate Monotonic priority assignment. As stated in [8], in non-preemptive
scheduling also, since the Rate Monotonic priority assignment can be obtained
from any priority ordering by a sequence of pair-wise priority reordering as above,
we prove the theorem.

Non-preemptive Fixed Priority Scheduling

885

For tasks with Di ≤ Ti , it is known that Deadline Monotonic priority assignment
[2] is optimal for preemptive scheduling. But for non-preemptive scheduling, it
was shown in [4] that the Deadline Monotonic is no longer optimal. They also
showed that the optimal priority assignment method for preemptive scheduling
described in [1] is still optimal in non-preemptive systems. Therefore, since the
priority assignment method runs in O(n2 ), we can obtain a valid priority assignment method for tasks with Di ≤ Ti in polynomial time by using Theorem 1
and the assignment method of [1].

4

Utilization Bound

We can ﬁnd a task set with arbitrarily small utilization which is unschedulable by non-preemptive ﬁxed priority scheduling. However, by restricting the
ratio of minimum and maximum period (i.e., Tn /T1 ), we can achieve relatively
higher utilization bound. The following theorem gives us a utilization bound with
which task sets can be successfully scheduled by Rate Monotonic non-preemptive
scheduler.
Theorem 3. A set of n periodic tasks with Di = Ti is schedulable by the nonpreemptive Rate Monotonic scheduler if
n

i=1

Ci
1
≤
Ti
r

(3)

where Tn = rT1 .
Proof. From equation (3), T1 ≥ Tn
i−1
i
+ Ci +
Cmax
j=1

n
Ci
i=1 Ti

=
i−1

n
Tn
i=1 Ti Ci .

For a given task τi ,
n

Ti
Tn
Cj
i
+ Ci +
Cj ≤ Tn
≤ T1 ≤ Ti
Cj ≤ Cmax
Tj
T
T
j=1 j
j=1 j

The task set is schedulable by Theorem 1 since above equation holds for ∀τi .
As shown in Theorem 3, the utilization of a schedulable task set decreases as the
ratio of the maximum and the minimum period increases. It was shown in [6]
that a preemptive task set is schedulable by RM scheduler if the utilization of
the task set is less than or equal to ln r + 2/r − 1 where r = Tn /T1 and 1 ≤ r ≤ 2.
This utilization bound is further enhanced in [9] using additional information
of Tn /Tn−1 , but we will use the result of [6] in this paper for comparison purpose. Fig. 1 compares the utilization bound for preemptive and non-preemptive
scheduling using these results. As shown in Fig. 1, the utilization bound for
non-preemptive ﬁxed priority scheduling becomes smaller in comparison with
preemptive scheduling as the period ratio increases.
To further enhance the utilization bound, we can make use of the following
theorem.

886

M. Park
1

Non-preemptive
Preemptive

0.9

Utilization bound

0.8

0.7

0.6

0.5

0.4

0.3
1

1.1

1.2

1.3

1.4 1.5 1.6
Period ratio

1.7

1.8

1.9

2

Fig. 1. Utilization bound for preemptive and non-preemptive scheduling for diﬀerent
values of r

Theorem 4. A task set τ of n tasks with Di = Ti is schedulable by the nonpreemptive Rate Monotonic scheduler if
max
τi ∈τ

Ci
Ti

≤

1
r+n

(4)

where Tn = rT1 and n ≥ 2.
i
= Ck . By dividing the lefthand
Proof. For a given task τi , let us suppose Cmax
side of equation (1) by Ti , we have
i
Cmax
Ci
1
+
+
Ti
Ti
Ti

i−1

j=1

i−1

Ti
Cj
Ck Tk
Ci
·
+
+
≤
Cj ≤
Tj
Tk Ti
Ti j=1 Tj
i

i

r
r
n
Cj
1
r
+
+
≤
+
=1
≤
r + n j=1 Tj
r + n j=1 r + n
r+n r+n
i
Therefore if maxτi ∈τ C
≤
Ti
the task set is schedulable.

1
r+n ,

since the condition in Theorem 1 is satisﬁed,

When it is hard to limit each task’s utilization as given in Theorem 2, we can
use the utilization bound calculated using the maximum task utilization as in
the following corollary derived from Theorem 4.
Corollary 1. A set of n periodic tasks with Di = Ti is schedulable by the nonpreemptive Rate Monotonic scheduler if
n

i=1

where Tn = rT1 and α = maxτi ∈τ

Ci
≤ 1 − αr
Ti
Ci
Ti

.

(5)

Non-preemptive Fixed Priority Scheduling

887

i
Proof. For a given task τi , let us suppose Cmax
= Ck . By dividing the lefthand
side of equation (1) by Ti , we have
i
Ci
1
Cmax
+
+
Ti
Ti
Ti

i−1

i−1

n

Ti
Cj
Cj
Ck Tk
Ci
·
+
+
≤ αr +
≤1
Cj ≤
Tj
Tk Ti
Ti j=1 Tj
T
j=1 j

j=1

which proves the corollary.
If we limit each task’s utilization by the condition given in Theorem 4, by combin1
) we can achieve utilization
ing Theorem 4 and Corollary 1 (i.e., letting α = r+n
n
bound as large as r+n .
As shown in Theorem 4, since tasks are non-preemptive, dividing tasks into
several tasks can enhance the utilization bound. In this sense, Theorem 4 gives
us a guide for designing real-time systems with non-preemptive ﬁxed priority scheduling. To achieve higher system utilization, tasks should be divided
so that we have large number of tasks, and the ratio of the maximum and
the minimum period should be kept as small as possible. For example, when
r = 2, the utilization bound given in Theorem 3 is only 50%. But by
dividing some tasks to limit each task’s utilization by 10% and to have 8 tasks,
8
= 80%. Note that divithe possible utilization bound can be achieve is (2+8)
ding a task does not help enhancing the utilization bound for preemptive
scheduling.
Fig. 2 compares the utilization bound of non-preemptive and preemptive ﬁxed
priority scheduling when r = 2. The utilization bound for a given number of tasks
is calculated using the result of [6], that is (n − 1)(21/(n−1) − 1) + 2/r − 1. As
the number of tasks increases, the utilization bound of preemptive scheduling
approaches to the Liu and Layland’s bound, ln 2, while that of non-preemptive
scheduling approaches 100%.
1
0.95
0.9
0.85

Utilization bound

0.8
0.75
0.7
0.65
0.6
0.55
0.5
0.45

Non-preemptive
Preemptive

0.4
5

10

15
20
25
30
Number of tasks

35

40

Fig. 2. Utilization bound for preemptive and non-preemptive scheduling for diﬀerent
number of tasks

888

5

M. Park

Conclusions

In this paper, we have shown Rate Monotonic priority assignment is optimal
for non-preemptive scheduling as in preemptive scheduling and schedulability
for periodic tasks can be determined in polynomial time. Utilization bound for
Rate Monotonic scheduling is presented using the ratio of the maximum and the
minimum period. To overcome the small utilization bound, we also presented a
method to enhance the utilization bound by limiting the each task’s utilization.
It was shown that by keeping the period ratio small and dividing a task into tasks
with the same period and smaller execution time, we can achieve relatively higher
utilization. The optimal ﬁxed-priority scheduling policy for non-preemptive tasks
with relative deadline smaller than period, and schedulability of concrete periodic
tasks will be our future work.

References
1. N.C. Audsley. Optimal priority assignment and feasibility of static priority tasks
with arbitrary start times. Technical report, Department of Computer Science,
University of York, 1991.
2. N.C. Audsley, A. Burns, M. Richardson, and A. Wellings. Hard real-time scheduling: The deadline monotonic approach. In Proceedings of IEEE Workshop on
Real-Time Operating Systems and Software, pages 133–137, May 1991.
3. T.P. Baker. A stack-based allocation policy for real-time processes. In Proceedings
of IEEE Real-Time Systems Symposium, pages 191–200, December 1990.
4. L. George, N. Riviere, and M. Spuri. Preemptive and non-preemptive real-time
uniprocessor scheduling. Technical report, INRIA, 1996.
5. K. Jeﬀay, D.F. Stanat, and C.U. Martel. On non-preemptive scheduling of periodic
and sporadic tasks. In Proceedings of IEEE Real-Time Systems Symposium, pages
129–139, December 1991.
6. S. Lauzac and D. Moss´e R. Melhem. An improved rate-monotonic admission control
and its applications. IEEE Transactions on Computers, 52(3):337–350, 2003.
7. J.P. Lehoczky. Fixed priority scheduling of periodic task sets with arbitrary deadlines. In Proceedings of IEEE Real-Time Systems Symposium, pages 201–209, 1990.
8. C. Liu and J. Layland. Scheduling algorithms for multiprogramming in a hard
real-time environment. Journal of ACM, 20(1):46–61, 1973.
9. W.-C. Lu, H.-W. Wei, and K.-J. Lin. Rate monotonic schedulability conditions
using relative period ratios. In Proceedings of IEEE International Conference on
Embedded and Real-Time Computing Systems and Applications, pages 3–9, August
2006.
10. T. M. Parks and E. A. Lee. Non-preemptive real-time scheduling of dataﬂow
systems. In Proceedings of IEEE International Conference on Acoustics, Speech,
and Signal Processing, pages 3225–3238, May 1995.
11. L. Sha, R. Rajkumar, and J. Lehoczky. Priority inheritance protocols: An approach
to real-time synchronization. IEEE Transactions on Computers, 39(9):1175–1185,
1990.
12. M. Spuri. Analysis of deadline scheduled real-time systems. Technical report,
INRIA, 1996.

