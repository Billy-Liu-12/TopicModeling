Design and Performance Evaluation of High
Eﬃcient TCP for HBDP Networks
TaeJoon Park1, ManKyu Park2, JaeYong Lee2, , and ByungChul Kim2
1

2

Electronics and Telecommunications Research Institute
161 Gajong-Dong, Yuseong-Gu, Daejeon, 305-350, Korea
tjpark@etri.re.kr
Department of Infocom Engineering, Chungnam National University
220 Gung-Dong, Yuseong-Gu, Daejeon, 305-764, Korea
mkpark@ngn.cnu.ac.kr,{jyl,byckim}@cnu.ac.kr

Abstract. While the legacy TCP is the most commonly used and reliable transport protocol in the Internet, it is not suitable for massive data
transfers in high bandwidth delay product networks. To cope with this
problem, we propose high eﬃcient TCP congestion control mechanism
that can provide eﬃcient data transfer in HBDP networks. When there
is some available bandwidth and it satisﬁes a certain condition, the congestion window grows rapidly. Otherwise, it maintains a linear growth
of the congestion avoidance phase similar to the legacy TCP congestion
avoidance algorithm. Based on the relationship of the current and minimum round trip time, the proposed method selects between the linear
and rapid growth phases of the congestion window update during the
congestion avoidance period. To prevent packet loss during the exponential growth phase, proposed method uses not only the end-to-end delay
information, but also the estimated bandwidth of the bottleneck node.
Keyword: TCP, and High Bandwidth Delay Product Networks.

1

Introduction

As TCP was designed to the reliability guaranteeing transfer protocol, it is most
widely used in various network environments as the general transfer protocol.
While the transmission control protocol(TCP) is the most commonly used reliable transport protocol, it is generally accepted that standard TCP is not suitable for bulk data transfers in high bandwidth delay product(HBDP) networks.
Since the TCP congestion avoidance algorithm is not so dynamic, the packet
drop rate needed to ﬁll a Gigabit pipe using the current TCP protocol is beyond
the limit of currently achievable ﬁber optic error rates. Therefore, many TCP
congestion control mechanisms are proposed to solve the low eﬃciency problem
in HBDP networks. However, it still has some problems as to the bandwidth
eﬃciency, the RTT fairness convergence time, and etc.
Corresponding author.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 368–375, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Design and Performance Evaluation of High Eﬃcient TCP

369

We propose a modiﬁed congestion avoidance mechanism, HE-TCP, which controls the slow start threshold(ssthresh) with the relationship of current and last
available bandwidth in HBDP networks : when the congestion window size is
lesser than the current ssthresh size, the congestion window grows aggressively,
and otherwise, it maintains linear increase similar to the legacy congestion avoidance algorithm. So, in spite of the compatibility about the legacy TCP, it does
not have a meaning to classify according to slow start and congestion avoidance period. The proposed algorithm prevents large packet losses by adjusting
congestion window size appropriately. Also, it can rapidly utilize the large available bandwidth by maintaining the ssthresh dynamically. The simulation results
show that the proposed algorithm improves not only the utilization of the available bandwidth but also RTT fairness convergence time in high bandwidth delay
product network environment.
The rest of the paper is organized as following: Section 2 describes the previous
work in this area. Section 3 discusses the proposed mechanism and section 4
describes the simulation results followed by conclusions in section 5

2

Related Work

During the initial start up phase (slow start) of the traditional TCP, compliant to the RFC 2581 [1] IETF standards, exponentially increases the amount of
transferred data until detecting a packet loss by a timeout or triple duplicate
ACKs. When a loss is detected, the TCP halves the congestion window cwnd,
which controls the number of packets to be sent without acknowledgement, and
moves into the congestion avoidance phase. During the congestion avoidance
phase, the TCP increases the cwnd by one packet per the cwnd number of received ACKs and halves the cwnd for a packet drop. Thus, we call the TCP’s
congestion control algorithms Additive Increase Multiplicative Decrease (AIMD)
algorithms. However, the AIMD control of the traditional TCP is not dynamic
enough to ﬁll a big pipe for HBDP networks. For example, a standard TCP connection with 1500-byte packets, a 100 ms RTT and a steady-state throughput of
10 Gbps requires an average congestion window of 83,333 segments and a maximum packet drop rate of one congestion event for every 5,000,000,000 packets
[2]. The average bit error rate of (2 × 10−14 ) is needed to fully utilize the link in
this environment; however it is almost impossible to realize the requirement for
the current network technology.
Over the past few years, there has been much research eﬀorts to solve the under utilization problem of traditional TCP in HBDP networks[2][3]. High Speed
TCP(HS-TCP), recently proposed by Floyd, tries to improve the loss recovery time of standard TCP by changing the increase and decrease parameters of
AIMD mechanism. The values for the additive increase range from 1 (standard
TCP) to a high of 73 packets, and the range of the multiplicative decrease is from
0.5 (standard TCP) to a low of 0.09. Consequently, when a congestion event occurs over HBDP networks, HS-TCP does not drop back as much and adds more
than one packet per RTT, thus recovering faster. However, HS-TCP has some

370

T. Park et al.

drawbacks for deployment in terms of convergence times, compatibility, fairness,
and so on [4][5].

3

Congestion Control Mechanism of the HE-TCP

The proposed congestion control mechanism can be divided into three phases:
SS, CA, and RI. The SS phase is the exponential growth phase; the CA phase is
the additive increase phase; and the RI phase is the ssthresh controlled growth
phase only activated in HBDP networks. Figure 1 shows an example evolution
of the congestion window of the proposed HE-TCP. The proposed congestion
control mechanism has provided a solution to prevent overshooting in the SS
phase and a fast bandwidth reserving solution in the CA phase to switch over
to the RI phase.

Wm

Window(packets)

WAB

Wm /2

SS RI

CA

RI

CA

RI

Time(sec)
Fig. 1. Evolution example of window size including the startup phase in the proposed
HE-TCP

3.1

Generalized Time-Sliding Window Estimator

To control the start time of RI, we used a generalized time-sliding window
(GTSW) estimator which uses a time-varying coeﬃcient and a exponentiallyweighted moving average ﬁlter. The number of computation times per round of
GTSW estimator is restricted to a predeﬁned number because of the eﬀect of
packets clustering due to congestion and compression. Let tk be the time instant
at which the kth ACK is received at the sender. Let CurBW and k be the bandwidth share and the time-varying coeﬃcient at time tk , respectively. The GTSW
estimator is deﬁned as (1):
BWk = (1 − αk ) · BWk−1 + αk · CurBW

(1)

Design and Performance Evaluation of High Eﬃcient TCP

where αk = Δtk /(RT Tk +Δtk ), Δtk = tk −tk−1 , and CurBW = (

371

tk

dt )/Δtk .

t=tk−1

From (1), it follows that
Δtk
Δtk
) · BWk−1 + (
) · CurBW
RT Tk + Δtk
RT Tk + Δtk
RT Tk · BWk−1 + P acketSize · P acketCnt
=
RT Tk + Δtk

BWk = (1 −

(2)

where RT Tk is the smoothed round trip time at time tk . There have been some
previous works on TCP bandwidth measurement methods. From (2), in the
case of Available Bandwidth Estimator (ABE)[6], PacketCnt and Δtk are cwnd
and RTT, respectively. Because ABE computes the optimum congestion window
once every RTT, it is not dynamic enough to estimate the currently usable
bandwidth within each round. The PacketCnt and Δtk of Time Sliding Window
(TSW)[7] Estimator are 1 and inter-packet arrival time, respectively. The TSW
Estimator computes and updates the state variables upon each packet arrival
which leads to the problem of much computation in HBDP networks. GTSW
estimator uses a time-varying coeﬃcient and a exponentially-weighted moving
average (EWMA) ﬁlter. The GTSW estimator is very similar to the ABE and
the TSW Estimator. But The PacketCnt and Δtk of TSW Estimator are (cwnd
/ n). So the number of computation times per round of GTSW estimator is
restricted to predeﬁned number,n, because of the eﬀect of packets clustering due
to congestion and compression. Therefore, the GTSW estimator is appropriate
under the circumstances of HBDP networks. HE-TCP sets the ssthresh to reﬂect
its estimated bandwidth delay product as
BWk · BaseRT T
(3)
P acketSize
where BaseRTT is the minimum round trip time, and PacketSize is the packet
size.
SSthresh =

3.2

The SS Phase

The legacy TCP’s SS phase is suitable for fast bandwidth reservations. To avoid
a premature exit from the SS phase (Fig. 1) and to increase utilization, the
initial ssthresh can be increased. However, a large initial ssthresh can cause slow
start over-shooting problems and multiple packet losses, and further reduces
the utilization. To compensate for the weak points, our mechanism switches
the SS phase to the RI phase and limits the maximum size of the cwnd by
resetting ssthresh to the estimated available bandwidth of the bottleneck node.
Limiting ssthresh to the available bandwidth can limit the fairness in TCPs
that use losses for congestion veriﬁcation. Therefore, in order to estimate the
fair share of available bandwidth, bandwidth estimation is computed using a
GTSW estimation scheme which has both adaptive gain and adaptive sampling.
Usually, most problems in the delay-based congestion control methods, such as

372

T. Park et al.

When an ACK for a new packet arrives;
if( cwnd < 10 ) SampleInterval = 1;
else
SampleInterval = (int) cwnd π 10;
if( AckCnt ≥ SampleInterval ){
DelTime = now - PreTime;
T_ratio = DelTime π ( BaseRTT + DelTime );
CurBW = ( PacketSize μ AckCnt ) π DelTime;
BW = ( 1.0 - T_ratio ) μ PreBW + T_ratio μ CurBW;
ssthresh = (int) ( BW μ BaseRTT π PacketSize );
PreBW = BW;
PreTime = now;
AckCnt = 1;
} else {
AckCnt += 1;
}
if( cwnd < ssthresh )
else

cwnd += 1;
cwnd += 1/cwnd;

When triple-duplicate ACKs arrive;
cwnd = cwnd π 2;
PreBW = 0;
ssthresh = 0;

Fig. 2. Pseudo-code for the proposed congestion control

TCP-vegas, are due to the reduction of cwnd depending on the delay. However,
the proposed method only decides the cwnd switching point from rapid growth to
additive increment and allows bandwidth competition using congestion control,
as in the legacy TCP; thus, it minimizes problems in the legacy cwnd control
that uses delay-based methods.
3.3

The CA Phase

In the TCP Reno, the congestion avoidance phase, CA (Fig. 1), starts when
the congestion window exceeds the ssthresh or a packet loss is detected with
triple duplicate ACKs. The start condition of the CA phase in the HE-TCP is
the same as that of the TCP-reno. However, to manage the under-utilization
problem during the CA phase in HBDP networks, we adopt an rapid increase
of congestion window in the CA phase, called the RI phase. In the HE-TCP,
if the cwnd is smaller than the estimated band-width BW, ssthresh, the CA
phase switches to the RI phase to drastically increase the congestion window
and utilize the larger available bandwidth. If the cwnd exceeds the estimated
bandwidth BW during the RI phase, the phase switches back to the CA phase
again and the cwnd increases linearly until a packet loss is detected. In the
event of a packet loss, the congestion widow size is halved for fairness. Limiting

Design and Performance Evaluation of High Eﬃcient TCP

373

ssthresh to the estimated bandwidth, depending on past measurements, can limit
the fairness in TCPs that use losses for congestion veriﬁcation. Therefore, the
variables related to the band-width estimation, BWk and BWk−1 , are initialized
to 1 to maintain the fairness.
3.4

The RI Phase

The RI phase is similar to the initial slow start phase of the HE-TCP; however,
the start time of the RI is controlled by the estimated bandwidth BW of the
connection, and yet it is very helpful to solve the fairness problem. As BW
approaches to maximum available bandwidth, the increase rate of cwnd is rapidly
decreased to make a soft landing avoiding slow start overshoot problems. The
exit condition of the RI phase in the HE-TCP is the same as that of the SS
phase. Figure 2 shows the pseudo-code of the proposed mechanism. Only when
the congestion window is larger than that of the ordinary small BDP networks,
the proposed mechanism is used; otherwise, the normal TCP algorithm is used
to maintain backward compatibility with the legacy TCP.

4

Simulation Study

We performed simulations using the network simulator ns-2 [8] for a network with
a bottleneck bandwidth of 800 Mbps and RTT values of 200 ms. The queue size
at each bottleneck node is 50% of the bandwidth delay product of the bottleneck
link. For convenience, the window size is measured in number of packets with a
packet size of 1000 bytes. Drop tail queues are used in the routers.
Figure 3 shows the congestion window variations of the three TCP variants
with a loss rate of 10−6 . In spite of severe packet loss events, the congestion
window of the HE-TCP quickly recovers the link capacity and the performance

Fig. 3. Congestion window behavior of the HE-TCP, HS-TCP, and TCP Reno mechanisms with a loss rate of 10−6

374

T. Park et al.

Fig. 4. Throughput ratio of the HE-TCP and HS-TCP mechanisms

Fig. 5. Fairness comparison of the HE-TCP and HS-TCP mechanisms

is almost maintained at the available bandwidth. However, the performances
of the HS-TCP and TCP-Reno are limited by the slow linear increase of the
congestion window and the large loss probability.
The performance of the proposed HE-TCP and fairness has been compared
with HS-TCP. The parameters for the HS-TCP are set at 31 for low windows,
83,000 for high windows, and 10−7 for high p.
In Fig. 4, the performance of the HS-TCP is compared with that of the HETCP in terms of packet loss rate. In both cases, the diﬀerence is minimal with
an almost zero drop rate (less than 10−7 ), since both use 100% of the available
bandwidth. However, with a reasonably high loss rate, greater than 3 × 10−6 ,
the throughput of the HE-TCP is better than that of the HS-TCP.
Figure 5 shows the fairness comparison between the HE-TCP and HS-TCP
when the packet loss rate is 10−6 and 10−7 with two ﬂows. To show the fair share

Design and Performance Evaluation of High Eﬃcient TCP

375

distribution across the connections, we use Jain’s Fairness Index as deﬁned in
[9]. When the throughputs of all ﬂows are equal, the fairness index becomes
1. In both cases, HE-TCP’s fairness index converges to 1 faster than the HSTCP. Hence, the HE-TCP shows improved fairness even for cases where the
performance diﬀerence is minimal due to a low packet loss rate.

5

Conclusion

We proposed a modiﬁed TCP congestion control mechanism, the HE-TCP, with
an rapid increase phase during the congestion avoidance state without overshooting in HBDP networks. In addition, we evaluated the the performance of
the proposed HE-TCP.
To evaluate the proposed HE-TCP, it was compared with the HS-TCP, which
is the representative TCP for HBDP networks. The simulation results showed
that the proposed mechanism improves fairness even when the performance difference is minimal due to a low loss rate. When the loss rate increases, the proposed method was proven to outperform other methods as well. The proposed
HE-TCP can solve the TCP under-utilization problem in HBDP networks. The
proposed algorithm can be easily implemented in sender TCPs. So, the proposed HE-TCP can be a promising transport protocol for large data transfer
applications in HBDP networks.

References
1. IETF RFC 2581: TCP Congestion Control (1999)
2. IETF RFC 3649: HighSpeed TCP for large congestion windows (2003)
3. Kim, S., Park, S., Moon, J., Lee, H.: A low-crosstalk design of 1.25 Gbps optical
triplexer module for FTTH systems. ETRI Journal, Vol. 28, no. 1. (2006) 9-16
4. Wang, R., Pau, G., Yamada, K., Sanadidi, M.Y., Gerla, M.: TCP startup performance in large bandwidth delay networks. Proceeding of IEEE INFOCOM 2004,
Vol. 2. (2004) 796-805
5. Mascolo, S., Casetti, C., Gerla, M., Sanadidi, M.Y., Wang, R.: TCP Westwood:
Bandwidth estimation for enhanced transport over wireless links. Proceeding of
ACM/IEEE Mobi-Com 2001 (2001)
6. Xu, K., Tian, Y., Ansari, N.: TCP-Jersey for Wireless IP Communications. IEEE
J. Select. Areas Comulications, Volume 22., (2004) 747-756
7. David D. C., Wenjia F.,: Explicit allocation of best eﬀort packet delivery service.
In: IEEE/ACM Trans. Networking, Vol. 6. (1998) 362-373
8. The network simulator ns-2. Available: http://www.isi.edu/nsnam/ns/
9. Jain, R.: The art of computer systems performance analysis: techniques for experimental design, measurement, simulation and modeling. New York, John Wiley &
Sons (1991)

