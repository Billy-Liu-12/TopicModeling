Performance Evaluation of Fully Adaptive Routing for
the Torus Interconnect Networks
F. Safaei1,3, A. Khonsari2,1, M. Fathy3, and M. Ould-Khaoua4
1

IPM School of Computer Science, Tehran, Iran
2
Dept. of ECE, Univ. of Tehran, Tehran, Iran
3
Dept. of Computer Eng., Iran Univ. of Science and Technology, Tehran, Iran
4
Dept. of Computing Science, Univ. of Glasgow, UK
{safaei,ak}@ipm.ir,{f_safaei,mahfathy}@iust.ac.ir,
mohamed@dcs.gla.ac.uk

Abstract. Adaptive routing algorithms have been frequently suggested as a
means of improving communication performance in parallel computer networks. These algorithms, unlike deterministic routing, can utilize network state
information to exploit the presence of multiple paths. Before such schemes can
be successfully incorporated in networks, it is necessary to have a clear understanding of the factors which affect their performance potential. This paper proposes a new analytical model to obtain message latency in wormhole-switched
2-D torus interconnect networks. The analysis focuses on a fully adaptive routing which has been shown to be one of the most effective in torus networks.
The validity of the model is demonstrated by comparing analytical results with
those obtained through simulation experiments.
Keywords: adaptive routing algorithm, parallel computer network, torus Interconnect Networks.

1 Introduction
Large-scale massively parallel computers, Multiprocessors System-on-Chip (MPSoCs), and peer-to-peer communication networks provide high performance computing that allows users to deal with large and heavy computational tasks. Most of the
contemporary massively parallel computers use wormhole switching (also widely
known as wormhole routing [1, 2]) mechanism to support their interprocess communication. In the wormhole switching, a message is divided into a sequence of fixedsize units of data, called flits. If a communication channel transmits the first flit of a
message, it must transmit all the remaining flits of the same message before transmitting flits of another message. The main drawback of wormhole switching is that
blocked messages remain in the network, therefore they waste channel bandwidth and
block other messages.
The routing algorithm specifies how a message selects a path to cross from the
source to destination, and has great impact on network performance. Many practical
systems have used deterministic routing [1, 2] with virtual channels to ensure deadlock avoidance. This is achieved by forcing messages to visit the virtual channels in a
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 606–613, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Performance Evaluation of Fully Adaptive Routing

607

strict order. This form of routing has the advantage of being simple; however, if any
channel along the message path is heavily loaded, the message experiences large
delays and if any node or channel along the path is faulty, the message cannot be
delivered at all. Alternatively, adaptive routing improves both the performance and,
more importantly, fault-tolerance of an interconnect network.
Message passing in massively parallel computers is implemented based on a routing algorithm that determines the path a message follows to reach its destination.
Routing algorithms for these systems are generally classified as being either deterministic or adaptive [1]. In deterministic routing, all messages between a given
source/destination pair will follow the same path. One of the main benefits is that inorder arrival of messages is preserved. However, deterministic routing usually makes
an inefficient use of the network resources [1, 3]. An alternative, but complementary
approach, to improve network performance consists of using adaptive routing. This
routing strategy provides alternative paths to route messages, thus avoiding congested
regions in the network and increasing throughput.
This paper proposes an analytical approach to investigate the performance behavior
of a fully adaptive routing algorithm in wormhole-switched 2-D torus fortified with a
routing scheme suggested in [4], as an instance of routing methodology widely used
in the literature to achieve high adaptivity.
The rest of this paper is structured as follows. Section 2 briefly describes node
structure, routing scheme, on which the present study is based. Section 3 gives an
overview of the assumptions and describes the proposed analytical model. Section 4
compares the delays predicted by analytical model with those obtained through simulation experiments. Finally, Section 5 summarizes our findings and concludes the
paper.

2 Node Structure in the Torus Networks
A k-ary 2-cube (2-D torus) is a direct network with N= k2 nodes; k is called the radix.
Links (channels) in the torus can be either uni- or bi-directional. Each node can be
identified by a 2-digit radix k address (a1, a2). Nodes, with address (a1, a2), (b1, b2) are
connected if and only if a1= (a2 +1) mod k or b1= (b2 +1) mod k. In order to allow
processors to concentrate on computational tasks and permit the overlapping of communication with computation, a router, is used for handling message communication
among processors, and is usually associated with each processor. Consequently, each
node consists of a Processing Element (PE) and router.
2.1 Adaptive Wormhole Routing in the Torus Networks
Recently, several fully adaptive routing algorithms on tori have been evaluated in [5]
of which the one using Negative Hop-based (NHop) deadlock free routing augmented
with a new idea called bonus cards (Nbc) has been shown to have the best performance. In [5], the Nbc routing scheme has been used in the context of Duato’s methodology [6] and a routing algorithm, named Duato-Nbc with high performance and
minimum virtual channel requirements was resulted. Investigations showed that
Duato-Nbc has a better performance compared to other algorithms reported in the
literature and the other algorithms proposed in [4].

608

F. Safaei et al.

3 The Analytical Model
In this section, we derive an analytical model for Duato-Nbc routing algorithm [5]. The
most important performance measure in our model is the average message latency.
3.1 Model Assumptions
The model makes assumptions, which are commonly used in the literature [5, 7-11],
and are listed below.
• Messages destinations are uniformly distributed across the network nodes.
• Nodes generate traffic independently of each other, following a Poisson process
with an average rate of λg messages per cycle.
• The message length is fixed at M flits, each of which requires one cycle transmission time between two adjacent routers.
• The local queue at the injection channel in the source node has infinite capacity.
Messages at the destination node are transferred to the local PE one at a time
through the ejection channel.
• V virtual channels per physical channel are used. These virtual channels are used
according to the Duato-Nbc routing scheme, which are divided into V1 and V2
classes (V = V1 + V2). This number of virtual channels yields the optimal performance compared to the other schemes proposed in [4].
In the following section, we present the mathematical model that approximates the
behavior of 2-D torus communication system using Duato-Nbc routing algorithm.
3.2 Derivation of the Model
The average message latency is composed of the average network latency, S , which
is the time to cross the network and the average waiting time seen by the message in
the source node, Ws , before entering the network. However, to capture the effects of
virtual channels multiplexing, the mean message latency has to be scaled by a factor,
say V , representing the average degree of virtual channels multiplexing, that takes
place at a given physical channel. Therefore, the average message latency can be
approximated as [9]

Average Message Latency = ( S + Ws ) V

(1)

In what follows, we will describe the calculation of S , Ws , and V .
3.2.1 Calculation of the Mean Network Latency
Under uniform traffic pattern, the average number of channels that a message visits
along a given dimension and across the network, k , d respectively, are given by
Agarwal [10]

k ≈ k / 4, d = 2k

(2)

Performance Evaluation of Fully Adaptive Routing

609

Fully adaptive routing allows a message to use any available channel that brings it
closer to its destination resulting in an evenly distributed traffic rate on all network
channels. The mean arrival rate, λc, on a given channel is determined as follows. A PE
generates, on average, λg messages in a cycle, which are evenly distributed among the
4 output channels. Since each message travels, on average, d hops to cross the network, we can write the rate on a channel, λc, as

λc = λg d 4

(3)

Since the torus topology is symmetric, averaging the network latencies seen by the
messages generated by only one node for all other nodes gives the average message
latency in the network. Let s = (sx, sy) be the source node and d = (dx, dy) denote a
destination node such that d ∈ G − {s} where G is the set of all nodes in the network.
We define the set H = {hx, hy}, where hx and hy denote the number of hops that the
message makes along X and Y dimensions, respectively, i.e. (sx + hx) mod k = dx, and
(sy + hy) mod k = dy.

hx = sx − d x , hy = s y − d y

(4)

where ||x − y|| denotes the distance between a source node x and a destination node y.
The network latency, SH, seen by a message crossing the network from node s to node
d consists of two parts: the first part is the actual message transmission time, and the
second part is the blocking time in the network. Therefore, SH can be written as
S H = M + H + ∑ h =1 B h
H

(5)

where M is the message length, ||H|| is the distance (in terms of hops made by the
message) between the source and the destination nodes, and Bh is the blocking time
seen by a message in its hth hop. The terms ||H|| and Bh are given by
H = hx + h y

(6)

B h = Pblock hW c

(7)

where Pblock h is the probability that a message is blocked at its hth hop channel, and
Wc is the average waiting time to acquire a virtual channel in the event of blocking.
Let us now calculate the probability Pblock h . To do so, let ϕh be the number of dimensions, or output channels, that a message still has to visit when crossing the hth hop
channel. The calculation of ϕh has been derived in [9]. We recollect briefly here the
main equations for the calculation of ϕh. The number of channels, ϕh, that the message can select when crossing the hth hop channel, (1 ≤ h ≤ d ) is given by

ϕh = ∑ t =0 (2 − t ) ψ ht
1

(8)

where ψ ht is the probability that the message has entirely crossed t (0≤ t ≤1) dimensions along on its h-hop path. The probability that there remains only one dimension
to cross a message h-hops away from its destination, Pϕ , is given by
h

610

F. Safaei et al.
2
⎧
⎪
Pϕ = ⎨ d − h + 1
⎪ 0
⎩

k ≤ h < d −1

h

(9)

0≤h <k

Thus, the probability that the message has entirely crossed t dimensions along on its
h-hop path can be obtained by

⎧⎪1 − Pϕh
⎪⎩Pϕh

t =0

ψ ht = ⎨

(10)

t =1

A message is blocked at a given channel when all the adaptive virtual channels and
also V2 − ⎡⎢ Δ / 2 ⎤⎥ + 1 virtual channels of deadlock-free class (which are used for Nbc
algorithm) are busy, where Δ is the number of remaining hops to reach the destination. When blocking occurs a message has to wait for all V1 fully adaptive virtual
channels, and V2 − ⎢⎡ Δ / 2 ⎥⎤ + 1 deadlock-free virtual channels. In order to calculate
Pblock h , we need to categorize messages into three classes based on their previous and
next hop.
• Class 1: This class contains messages which have used a virtual channel of fully
adaptive class in their previous hop (with probability Pblock1 ).
• Class 2: This class contains messages which have used a virtual channel of deadlock-free class in their previous hop and their next hop is negative (with probability Pblock 2 ).
• Class 3: This class contains messages which have used a virtual channel of deadlock-free class in their previous hop and their next hop is positive (with probability Pblock3 ).
Since the number of messages in Class 2 is identical to the number of messages in
Class 3, we can write the probability of message blocking as

Pblockh = ( Pblock 1 + ( Pblock 2 + Pblock 3 ) 2 )

ϕh

(11)

In what follows, we compute Pblock1 , Pblock 2 , and Pblock3 .
When a message used a virtual channel of fully adaptive class in its previous hop, it
can use any of V1 virtual channels of this class, and also V2 − ⎡⎢ Δ / 2 ⎤⎥ + 1 virtual channels of deadlock-free class. The blocking occurs, when all V1 + V2 − ⎡⎢ Δ / 2 ⎤⎥ + 1 virtual
channels at a given physical channel are busy. We can therefore write

Pblock1 =

∑

V

P Pv

v =V1 +V2 − ⎢⎡ Δ / 2 ⎥⎤ +1 v 0

(

⎢⎡ Δ / 2 ⎥⎤ −1
v −V1 −V2 + ⎢⎡ Δ / 2 ⎥⎤ −1

)( )
V
v

(12)

where Pv, (0 ≤v ≤ V), and Pv denote the probability that v virtual channels at a physi0

cal channel are busy (which is calculated later in Section 3.2.3), and the probability

Performance Evaluation of Fully Adaptive Routing

611

that the message uses a virtual channel of Class a in its previous hop, respectively.
Pv is given by
0

Pv = V1 (V1 + V2 − ⎡⎢ Δ / 2 ⎤⎥ + 1)
0

(13)

Moreover, a message belonging to the Classes 2 and 3 which has already used virtual
channel l at its previous hop, can employ any of V1 virtual channels of fully adaptive
class, and also V2 − ⎡⎢ Δ / 2 ⎤⎥ − l + 1 and V2 − ⎡⎢ Δ / 2 ⎤⎥ − l + 2 virtual channels of deadlockfree class, respectively. Therefore, the Pblock 2 and Pblock3 are obtained by
Pblock2 =
Pblock3 =

∑

∑

V2 −⎢⎡ Δ / 2⎥⎤
l =1

V2 − ⎢⎡ Δ / 2 ⎥⎤ +1
l =1

∑

∑

V
v =V1+ ⎡⎢ Δ / 2⎤⎥ +l

V
v =V1+ ⎢⎡ Δ / 2⎥⎤ +l +1

Pvl Pv

(

V2 − ⎡⎢ Δ / 2 ⎤⎥ −l
v −V1−⎢⎡ Δ / 2⎥⎤ −l

)( )

Pvl Pv

(

V2 − ⎡⎢ Δ / 2 ⎤⎥ −l −1
v −V1−⎡⎢ Δ / 2⎤⎥ −l −1

V
v

)( )
V
v

(14)
(15)

where Pvl indicates the probability that a message has used virtual channel l at its previous hop and is given by
Pv = 1 (V1 + V2 − ⎢⎡ Δ / 2 ⎥⎤ + 1)

1 ≤ l ≤ V2 − ⎢⎡ Δ / 2 ⎥⎤ + 1

l

(16)

The average network latency, S , is obtained by averaging SH, the average network
latency of H-hops messages, over the (N−1) possible destination nodes in the network. Therefore, S can be determined as

S=

∑

1
SH
N − 1 d∈G −{s }

(17)

To determine the average waiting time to acquire a virtual channel, a physical channel
may be treated as an M/G/1 queue [8]. Since the minimum service time at a channel is
equal to the message length, M, following a suggestion proposed in [11], the variance
of the service time distribution can be approximated by (S − M ) 2 ; where S is the
average service time at a given channel and can be calculated as the mean of SH of all
source and destination nodes that have at least one path between each other that traverse the channel. Hence, the average waiting time becomes

(

Wc = λc S 2 1+ (S − M )2 S 2

) ( 2(1− λ S ))
c

(18)

3.2.2 Calculation of the Average Waiting Time in the Source Node
A message originating from a given source node sees a network latency of S . Since a
message in the source node can enter the network through any of the V virtual channels, the average arrival rate to the queue is λg/V. Applying the Pollaczek-Khinchine
(P-K) mean value formula [8] yields the average waiting time experienced by a message at the source node as [8]

F. Safaei et al.

612

(

Ws = ( λg V ) S 2 1+ (S − M )2 S 2

) ( 2(1− ( λ V ) S ) )

(19)

g

3.2.3 Calculation of Average Multiplexing Degree of Virtual Channels

The probability, Pv (0 ≤ v ≤V), that v virtual channels at a given physical channel are
busy can be determined using a Markovian model (details of the model can be found
in [7, 9]). In the steady state, the model yields the following probabilities [7].

(∑ )

-1
V
⎧
Qv
⎪
v =0
⎪⎪
Pv = ⎨ Pv−1λc S
⎪
⎪ Pv−1 λc (1/ S − λc )
⎪⎩

v =0
⎧1
⎪
Qv = ⎨Qv −1λc S
0<v <V
⎪
v =V
⎩Qv −1 λc (1/ S − λc )

v =0
0<v <V

(20)

v =V

When multiple virtual channels are used per physical channel they share the bandwidth in a time multiplexed manner. The average degree of virtual channel multiplexing, that takes place at a given physical channel, can be estimated by [7]

∑

V
v =1

v 2 Pv

8×8 Torus, V=10
1200
1100
1000
900
800
700
600
500
400
300
200
100
0

Average Message latency

Average Message latency

V=

M odel (M =32)
M odel (M =64)
Simulation

0

0.0044

0.0088

0.0132

0.0176

0.022

Traffic Generation Rate

∑

V
v =1

vPv

(21)
16×16 Torus, V=10

1200
1100
1000
900
800
700
600
500
400
300
200
100
0

M odel (M =32)
M odel (M =64)
Simulation

0

0.002

0.004

0.006

0.008

0.01

Traffic Generation Rate

Fig. 1. Average message latency calculated by the analytical model against those obtained
through simulation for 8×8 and 16×16 torus networks using Duato-Nbc routing with message
length M=32, 64 flits, and V=10 virtual channels per physical channel

4 Simulation Results
To further understand and evaluate the performance issues of the routing algorithm,
we have developed an event-driven simulator at flit-level. The average message latency is defined as the average amount of time from the generation of a message until
the last data flit reaches the local PE at the destination. We ran each simulation for
300,000 flit times and sufficient warm-up times (through discarding the information
obtained during the first 10,000 flit times) is provided to allow the network to reach
the steady state. Numerous experiments are conducted for different sizes of the network, virtual channels, and message lengths to assess the accuracy of the analytical
model. Fig. 1 depicts latency results predicted by the analytical model plotted against

Performance Evaluation of Fully Adaptive Routing

613

those provided by the simulator for 2-D 8×8 and 16×16 torus networks, respectively;
with V=10 virtual channels per physical channel, and different message lengths,
M=32, 64 flits. The x-axis in this figure represents the traffic rate injected by a given
node in a cycle (λg) while the y-axis shows the average message latency (in flit cycles). The figure indicates that the analytical model predicts the mean message latency
with a good degree of accuracy in all regions. However, some discrepancies around
the saturation point are apparent. This is a result of the approximations made when
constructing the analytical model, e.g. the approximation used to estimate the variance of the service time distribution at a channel. This approximation greatly simplifies the model by avoiding the computation of the exact distribution of the message
service time at a given channel.

5 Conclusions
In this paper, we proposed a mathematical performance model to predict the average
message latency in wormhole-switched 2-D tori using the fully adaptive scheme proposed in [5]. Simulation experiments have revealed that the message latency results
predicted by the analytical model are in good agreement with those obtained through
simulation under different working conditions. We showed that the proposed model
manages to achieve a good degree of accuracy while maintaining simplicity, making it
a practical evaluation tool that can be used by the researchers in the field to gain insight
into the performance behavior of fully adaptive routings in wormhole-switched torus
networks. Our next objective is to develop an analytical modeling approach to investigate the performance behavior of this routing scheme in the presence of failures.

References
1. Duato, J., Yalamanchili, S., Ni, L.M: Interconnection networks: An engineering approach,
Morgan Kaufmann Publishers, New York (2003).
2. Ni, L. M., McKinley, P. K.: A Survey Of Wormhole Routing Techniques in Direct Networks, IEEE Computer Society Press, 26 (2) (1993) 62-76.
3. Dally, W. J., Aoki, H.: Deadlock-free adaptive routing in multicomputer networks using
virtual channels, IEEE TPDS, 4 (4) (1993) 66-74.
4. Boppana, R.V., Chalasani, S.: A Framework for Designing Deadlock-Free Wormhole
Routing Algorithms, IEEE TPDS, 7 (2) (1996) 169-183.
5. Safaei, F., et al.: Performance Comparison Of Routing Algorithms In Wormhole-Switched
Fault-Tolerant Interconnect Networks, International Conference on Network and Parallel
Computing (NPC06), Japan, October 2006.
6. Duato, J.: A New Theory of Deadlock-Free Adaptive Routing in Wormhole Routing Networks, IEEE TPDS, 4 (12) (1993) 320-1331.
7. Dally, W. J.: Virtual Channel Flow Control, IEEE TPDS, 3 (2) (1992) 194–205.
8. Kleinrock, L.: Queuing Systems, Vol. 1, John Wiley, New York (1975).
9. Ould-Khaoua, M.: A Performance Model of Duato’s Adaptive Routing Algorithm in k-ary
n-cubes, IEEE TC, 48 (12) (1999) 1-8.
10. Agarwal, A.: Limits on Interconnection Network Performance, IEEE TPDS, 2 (4) (1991)
398-412.
11. Draper, J.T., Ghosh, J.: A Comprehensive Analytical Model for Wormhole Routing in
Multicomputer Systems, JPDC, 32 (2) (1994) 202-214.

