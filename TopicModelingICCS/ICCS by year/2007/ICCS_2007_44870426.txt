Communication-Aware Scheduling Algorithm Based on
Heterogeneous Computing Systems
Youlin Ruan1,2, Gan Liu3, Jianjun Han3, and Qinghua Li3
1

School of Information Engineering, Wuhan University of Technology, 430070 Wuhan,
P.R. China
2
State Key Laboratory for Novel Software Technology, Nanjing University, 210093 Nanjing,
P.R. China
3
Department of Computer Science and Technology, Huazhong University of Science and
Technology, 430074 Wuhan, P.R. China
ruanyl@126.com

Abstract. This paper proposes a new scheduling model that integrates the
communication awareness into task scheduling. A scheduling algorithm is
proposed for the new model, which can produce optimal schedule by serializing
the communications edges. Experiment results show the significantly improved
accuracy and efficiency of the new model and algorithm.
Keywords: communication aware; concurrent communication; serializing.

1 Introduction
In order to exploit the heterogeneous computing power, a lot of works have focused
on solving the task scheduling problem. This problem has been shown to be NPcomplete[1]. There are several proposed algorithms dealing with the task scheduling
problem in heterogeneous systems. They could be classified into a variety of
categories, such as list-scheduling, clustering, duplication-based algorithms, and
guided random search methods. The list-based algorithms provide good quality of
schedules and their performance is comparable with other categories at a lower
scheduling time. The Iso-Level Heterogeneous Allocation[2], the Heterogeneous
Earliest-Finish-Time (HEFT) and Critical-Path-on-a-Processor (CROP) techniques[3]
are all examples. However, most of the above-mentioned works have in common that
they employ an idealized model of the target parallel system and don’t deliberate on
the impact of communication contentions. Intuition and experiments demonstrated
that this model results in inaccurate and inefficient schedules[4]. Therefore, in order to
exploit the potential of parallel processing, efficient scheduling algorithms under the
consideration of the communication requirements must be developed. So, CATS was
proposed to schedule parallel tasks by considering the communication requirements
of the applications and the network bandwidth[5]. Sinnen investigated the
incorporation of contention awareness into task scheduling by edge scheduling, which
considered heterogeneous links and routing[6].
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 426 – 429, 2007.
© Springer-Verlag Berlin Heidelberg 2007

Communication-Aware Scheduling Algorithm

427

，

In this paper we propose a communication-aware scheduling that extended the
classic list scheduling. The rest of paper is organized as follows. In Section 2, we
introduce some definitions and preliminaries. Section 3 describes the new contention
model, and investigates the integration of the awareness for the contention in task
scheduling. Experimental results are presented in section 4.

2 Preliminaries
In task scheduling, the program to be scheduled is represented by a directed acyclic
graph(DAG) G=(V, E, w, c), where V is the set of tasks and E is the set of edges. The
size of task ni is w(ni). An edge from ni to task nj is expressed as eij and size of the
edge is expressed as cij. Given task ni, the set of parent tasks is denoted as pred(ni);
that is, pred(ni)={nk | eki E }, and the set of children tasks is denoted as succ(ni);
that is succ(ni)={ nk | eik E }. A task ni is called a join task if | pred(ni)| ≥2, an entry
task if | pred(ni)|=0, and an exit task if |succ(ni)|=0.
To describe a schedule S of a DAG G=(V, E, w, c), the following terms are
defined: est(n, P) and ect(n, P) represent the earliest start time and completion time of
ni on processor P respectively, and w(n, P) the execution time of node n V on
processor P P. Thus, the node’s earliest completion time is given by ect(n, P)=est(n,
P)+w(n, P). Given an edge eij, est(eij) and ect(eij) represent the earliest start time and
completion time of edge eij respectively. Thus, the edge’s earliest completion time is
given by ect(eij)= est(eij)+ cij and est(n j , P) ≥ ect(ei j ) , for ni, nj V , eij E.

∈
∈

∈

∈

∈

∈

3 The Proposed Algorithm
To make task scheduling contention aware, the communication edges must be
serialized because communication cannot be concurrent. Thus, the awareness for
communication is serialize achieved by scheduling edge.
Definition 1 (Contention Model): A target parallel system Mcontention =(P, w, comm)
consists of a set of possibly heterogeneous processors P connected by the
communication network, where comm(eij, Psrc, Pdst) denotes the communication cost
of edge eij from processor Psrc to Pdst.
When a communication, represented by the edge eij, is performed between two
processors Psrc and Pdst. Thus, the earliest completion time of eij is

if Psrc = Pdst
⎧ect ( ni )
ect (eij ) = ⎨
⎩ect ( ni ) + comm(eij , Psrc , Pdst ) otherwise

(1)

where Psrc= proc(ni ) and Pdst= proc ( n j ) . Thus, the edge earliest completion time

ect(eij ) is now the earliest completion time of ni plus the communication of eij from
Psrc to Pdst, unless the communication is local. For na, we claim that a chain of
communications can be found as Xa:e1a→e2a→…→eka, where ni pred(na) (i=1..k),

∈

428

Y. Ruan et al.

such that est(e1a)≤est(e2a)≤…≤est(eka),i.e., ect(n1)≤ect(n2)≤…≤ect(nk). We define
Ω(eia) as the idle communication time before the communication edge eia, is issued as
k

Ω(eia)=est(eia)-ect(e(i-1)a), (1≤i≤k). Thus, est(na ) = ect(n1 ) + ∑{comm(cia , Psrc, Pdst ) + Ω(eia )}.
i=1

Given task na, ect(na) is determined according to its parent tasks and
communication edges. If task na has a
single parent task ni , then est(na)=ect(na) If na and ni exist different processors, the
execution of na is delayed by ect(ni ) + comm(eia , proc(ni ), proc(na )) . If na and ni exist
same processor, the communication time cia is negligible and na can start at ect(ni).If
task na has k parent task n1, n2, …, nk, where ect(n1)≤ect(n2) ≤ect(ni)≤…≤ect(nk). At
first, because of earliest completion of n1, the start time of edge e1a should be first
scheduled to proc(na), ct1(sc) is denoted as the completion time of scheduling the first
communication. However, if the parent task n2 cannot complete in advance, which
means ct1(sc)= ect(n1)+ c1a≤ect(n2), there is an idle time Ω1 between them. Thus, the
edge e2a must be delayed by ect(n2). Next, the procedure continue to schedules the
edge eia (2≤i≤k) that satisfies the following condition: ts(eia)=max(cti-1(sc), ect(ni)),
where cti ( sc ) = cti −1 ( sc ) + Ω i −1 + cia and

if ect ( ni +1 ) ≤ cti ( sc )
⎧0
Ωi = ⎨
⎩ect ( ni +1 ) − cti ( sc) otherwise

(2)

If kth edge is scheduled, ctk(sc) and est(na) can be determined. Therefore, est(na)=
ctk(sc). We can easily prove that est(na) is minimal.
The best known scheduling heuristic is list scheduling. A common and usually
good priority is the node’s bottom level bl, which is the length of the longest path
leaving the node. Recursively defined, it is

bl (ni ) = w( ni ) +

max {ci j + bl (n j )}
n j ∈succ ( ni )

(3)

Based on above theory and analysis, we propose an extended list scheduling
algorithm that considers the communication awareness by reasonable serializing the
communication edges, which is listed as below.
Algorithm List Scheduling With Communication Awareness
Input: program G=(V, E, w, c) and model M =(P, w, comm);
Output: A schedule with minimal completion time;
begin
Sort nodes n
E into list L, according to priority
scheme bl and precedence constraints;
for nj L do
{ Find processor P P that allows earliest
completion time of nj;
for each ni pred(nj) in ascend order ect (ni ) do

∈

∈

∈

∈

≠

if proc(ni) P then
schedule nj on P;
}
end.

schedule eij on P;

Communication-Aware Scheduling Algorithm

429

4 Experiment Results
This section presents experiments results to verify some aspects of the proposed
contention aware scheduling. We adopt the same test methods with [6].In each
experiment, the values of these parameters are assigned from the corresponding sets
given below.
SETV = { 100, 200, 400, 800 } , SETin deg ree = {1, 2, 5, 10} and SETCCR = {0.1, 1, 5, 10} .
Fig. 1 and Fig.2 show the average accuracy and efficiency achieved under the two
models over all DAGs on parallel systems. Experimental results demonstrated the
significantly improved accuracy and efficiency than classic schedule schemes.
Accuracy(%)

30
25

Efficiency(%)
32.4

35

60
Classic

50
19.3

20

Classic
Contention

40
25

30

15
9.2

10
5

48.5 47

Contention

2.5 2.2

4.6

6.8
3.4

27.5
19.8
15.6

20
10

0

3.7 4.9

0
CCR 0.1

CCR 1

CCR 5

CCR 10

Fig. 1. Average accuracy

CCR 0.1

CCR 1

CCR 5

CCR 10

Fig. 2. Average efficiency

Acknowledgments. This work has been supported by the national natural science
foundation of china under grant no. 60503048 and 60672059, the 863 program no.
2006AA01Z233.

References
1. Sarkar, V.: Partitionning and Scheduling Parallel Programs for Execution on
Multiprocessors. MIT Press (1989)
2. Olivier, B., Vincent, B., Yves, R: The Iso-Level Scheduling Heuristic for Heterogeneous
Processors, Proc. Of 10th Euromicro Workshop on Parallel, Distributed and Networkbased
Processing (2002)
3. Topcuoglu, H., Hariri, S., Wu, M.: Performance-Effective and Low-Complexity Task
Scheduling for Heterogeneous Computing. IEEE Trans. on Parallel and Distributed
Systems, (2002) 260–274
4. Selvakumar, S. Murthy, C.S.R.: Scheduling Precedence Constrained Task Graphs with
Non-Negligible Intertask Communication onto Multiprocessors, IEEE Trans. on Parallel
and Distributed Systems, (1994) 328–336
5. Lai, G.L.: Scheduling Communication-Aware Tasks on Distributed Heterogeneous
Computing Systems, Proceedings of 24th International Conference on Distributed
Computing Systems Workshops (2004)
6. Sinnen, O., Sousa, L.A.: Communication Contention in Task Scheduling, IEEE Trans.
Parallel and Distributed Systems (2005) 503–515

