Impact of Buffer Map Cheating on the Streaming Quality
in DONet*
Yong Cui, Dan Li, and Jianping Wu
Department of Computer Science, Tsinghua University, Beijing, 100084, China
cy@csnet1.cs.tsinghua.edu.cn, lidan@csnet1.cs.tsinghua.edu.cn,
jianping@cernet.edu.cn

Abstract. Data-driven Overlay Network (DONet) is especially suitable for live
stream in P2P environment. However, it demands the cooperation of individual
nodes to exchange their buffer maps. Since these nodes are selfish and have their
own interests, they might cheat about their buffer maps to reduce the forwarding
burden. We analyze the impact of this kind of cheating behavior on the streaming
quality of DONet by experiment in this paper. The experimental results show that
buffer map cheating has considerable negative impact on the streaming quality in
DONet.
Keywords: DONet, Buffer Map Cheating, Selfish.

1 Introduction
Multimedia applications, especially live stream, have been used more and more in
Internet. In live stream, a large number of users are interested in the real- time data from
a common source. Compared to other applications, live stream demands higher network
bandwidth as well as node forwarding capacity. Given the multi-receiver nature of live
stream, multicast is the ideal supporting technology. Currently, there are two kinds of
multicast technologies. One is realized in the network layer, named as IP multicast [1];
and the other is realized in the application layer, named as overlay multicast [2~12].
IP multicast builds the data structure on routers, which is a tree, and thus achieves
high scalability and high efficiency. However, IP multicast changes the “unicast”
principle of traditional Internet, and a lot of problems in it, such as member management, congestion control, and pricing model, have not been solved well yet. All these
lead to the difficulty of deploying IP multicast in Internet scale.
Overlay multicast is subsequently proposed, which constructs the data structure in
the application layer. Compared with IP multicast, overlay multicast is lower in efficiency, but much more deployable and flexible. Currently, there are two kinds of
overlay multicast, namely, tree-based overlay multicast [2~7] and mesh-based overlay
multicast [8~12]. Like in IP multicast, the data structure in tree-based overlay multicast
is also a tree, and data is propagated along the tree after its establishment. However,
overlay nodes are unstable. There is a high frequency of node join, node leave, and
*

Supported by the National Natural Science Foundation of China (No. 60473082, No.
90104002).

Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 817–824, 2007.
© Springer-Verlag Berlin Heidelberg 2007

818

C. Yong, L. Dan, and W. Jianping

node crash in overlay network. Thus, the application-layer multicast tree might change
from time to time, which will bring negative impact on live stream applications that
have stringent demands on the streaming continuity.
Mesh-based overlay multicast is considered as a better choice to support live stream.
In mesh-based overlay multicast, the data structure is no longer a tree, but a mesh.
Data-driven Overlay Network (DONet) is a representative of this kind of protocols [8].
In DONet, the stream propagated in the overlay network is divided into multiple segments. Each node maintains a number of segments, and exchanges the buffer map of
available segments with partner nodes. After learning the buffer maps of partner nodes,
each node requests a certain segment from a suitable partner node that holds the segment. If a node receives segment requests from partner nodes, it replies to the requests
by forwarding the corresponding segments within its outgoing bandwidth. Therefore,
the leave or crash of a single node will not bring too much impact on other nodes.
However, overlay nodes are not only unstable, but also selfish and strategic. Selfish
nodes in DONet might cheat about their buffer maps to reduce the forwarding burden to
other nodes. In such non-cooperative scenarios, some nodes cannot have the actual
information to request segments, and thus the streaming quality in DONet might be
impact. We try to establish the model of buffer map cheating in DONet and analyze its
impact on the streaming quality by experiment in this paper, which is not studied by
previous work.

2 Related Work
Because of the difficulty of deploying IP multicast in Internet scale, researchers turn to
overlay multicast to support live stream applications. The overlay multicast protocols
proposed currently can be roughly classified into two categories, namely, tree-based
overlay multicast and mesh- based overlay multicast.
In tree-based overlay multicast, each node selects a long- time parent from other
participating nodes to receive stream data. The parent/children relationships among all
nodes compose the data structure, i.e., the multicast tree. Once the multicast tree is
established, data is propagated along the tree and there is no additional control overhead. Protocols belonging to this category of overlay multicast include NARADA [2],
NICE [3], ZIGZAG [4], Scattercast [5], Yoid [6], Host Multicast [7] and etc.
In mesh-based overlay multicast, there is no explicit parent/ children relationship.
The data structure to propagate the stream is a mesh. Therefore, it can tolerant node
dynamics well and is especially suitable to support live stream applications. Representatives of this kind of protocols include gossip-based protocols and DONet. In
gossip-based protocols [9~12], each node forwards available data to a set of randomly
selected nodes. But in DONet [8], each node maintains several partner nodes, and data
is transmitted among partner nodes, eventually to the whole overlay network. Compared to gossip-based protocols, the advantage of DONet is that data is flowing in a
request-reply way, thus there is no redundant data consuming the precious network
bandwidth.
An important characteristic of overlay network is that the overlay nodes are all
selfish and strategic. The selfish overlay nodes might cheat about their private information to obtain higher interests, which could affect the performance of the overall

Impact of Buffer Map Cheating on the Streaming Quality in DONet

819

system. Selfish nodes in DONet might cheat about their buffer map to reduce the
forwarding burden. The impact of this kind of cheating on the streaming quality in
DONet is not systematically studied before, and it is discussed in this paper.

3 Model of Buffer Map Cheating in DONet
The stream propagated in DONet is divided into multiple segments with uniform
length. A buffer map can represent the information of available segments on a node.
Each node periodically exchanges its buffer map with partner nodes, and decides from
which partner node to fetch a certain segment. If there are multiple partner nodes
holding the same expected segment, various ways can be chosen to select the segment-providing node, for instance, the one with the shortest distance or the one with the
highest outgoing bandwidth. The requests arrive at the requesting queue of the segment- providing node. When replying the requests, the segment-providing node selects
some requests in the requesting queue and sends the corresponding segments within its
outgoing bandwidth.
At first, we make some definitions and list the notations throughout this paper as
Table 1.
Table 1. List of notations
B
W
N
M
Q
P
H
Pc(i)
Pd(i)

Buffer window size
Playing waiting segment number
Number of nodes in the overlay network
Number of partner nodes each node maintains
Number of segments of the stream
Cheating node percentage
Cheating degree
Playing continuity on node i
Playing delay on node i

Each node in DONet maintains a buffer window, which is used to store a number of
continuous segments of the stream. The buffer window size of each node is denoted as
B. To make the streaming more continuous, each node does not begin to play the stream
immediately after receiving the first segment. Instead, it waits for the arrival of the first
several segments and then begins to play the stream. The number of segments each
node waits for before playing the stream is defined as the playing waiting segment
number, denoted by W. Obviously, there is W≤B.
The streaming quality of each node can be measured by playing continuity and
playing delay. The playing continuity of node i is defined as the number of segments
arriving at node i no later than its playback time over the total number of segments of
the stream, denoted as Pc(i). And the playing delay of node i is defined as the average
source-to-end delay of all segments playing on node i. Higher playing continuity and
less playing delay indicate better streaming quality. The playing continuity of the
DONet is defined as the average playing continuities of all nodes, and the playing delay
of the DONet is defined as the average playing delays of all nodes.

820

C. Yong, L. Dan, and W. Jianping

We can establish the model of buffer map cheating in DONet as follows. Suppose
the number of nodes in the overlay network is N, the number of partner nodes each node
maintains is M, the number of segments of the stream propagated in the overlay network is Q, the buffer window size is B, the playing waiting segment number is W, and
the percentage of the number of cheating nodes over the total number of overlay nodes
is P. When exchanging the buffer map with partner nodes, each cheating node hides
some of its available segments, and the proportion of the number of hidden segments
over the total number of available segments is H. This model of buffer map cheating in
DONet is denoted as C(N, M, Q, B, W, P, H), where N>0, M>0, 0<W≤B≤Q, 0≤P≤1, and
0≤H≤1.

4 Experiment Study
We conduct experiments to study the impact of buffer map cheating on the streaming
quality of DONet, using the cheating model C(N, M, Q, B, W, P, H) established in the
last section.
Suppose the number of overlay nodes in DONet is 500 (N=500), and the stream
propagated in the network is composed of 5000 segments (Q=5000). If no node cheats
about their available segments, the cheating node percentage is 0%. We compare the
average playing continuity (Pc) and the average playing delay (Pd) of all nodes when

(a)

(b)
Fig. 1. Streaming quality of DONet when M=4, B=70, W=30. (a) playing continuity; (b) playing
delay.

Impact of Buffer Map Cheating on the Streaming Quality in DONet

821

the cheating node percentage (P) is 0% with that of 10%, 30%, 50%, 70%, and 90%,
each under different cheating degrees (H), different playing waiting segment numbers
(W), different buffer window sizes (B), and different partner numbers (M).
1) Different Cheating Degree
Let M=4, B=70, W=30, and the cheating degree H vary as 0%, 10%, 30%, 50%, 70%,
and 90%. The playing continuity and the playing delay in these cases with different
cheating node percentages are shown in Fig. 1(a) and Fig. 1(b), respectively.
From Fig. 1(a), we see that under all cheating degrees higher than 0%, the maximal
playing continuity is achieved when there is no node cheating. When the cheating node
percentage increases, the playing continuity decreases, but the decreasing gets
smoother. We also see that the playing continuity is higher with lower cheating degree.
When the cheating degree is 0%, which means that there is no node cheating, the
playing continuity gets the optimal value. The change of playing continuity is especially steep when the cheating node percentage is low and the cheating degree is high.
Fig. 1(b) shows that under all cheating degrees more than 0%, the playing delay is
least when there is no node cheating. As the node cheating percentage grows, the
playing delay becomes more. In addition, the lower is the cheating degree, the less is
the playing delay. It is similar to Fig. 1(a) that the change of playing delay is especially
obvious when the cheating node percentage is low and the cheating degree is high.

(a)

(b)
Fig. 2. Streaming quality of DONet when M=4, B=70, H=50%. (a) playing continuity; (b)
playing delay.

822

C. Yong, L. Dan, and W. Jianping

2) Different Playing Waiting Segment Number
Let M=4, B=70, H=50%, and the playing waiting segment number vary as 10, 20, 30,
40, 50, 60, and 70. The playing continuity in these cases under different cheating node
percentages is shown in Fig. 2(a), and the playing delay is shown in Fig. 2(b).
Fig. 2(a) illustrates that no matter what the playing waiting segment number is, the
playing continuity is maximal when there is no node cheating. The playing continuity
decreases with the growth of cheating node percentage, but the curve becomes
smoother. Additionally, more playing waiting segment number brings higher playing
continuity.
From Fig. 2(b), we conclude that the playing delay increases when the cheating node
percentage grows, and is shortest when there is no node cheating, no matter the playing
waiting segment number. Also, when the playing waiting segment number is more, the
playing delay is longer.
3) Different Buffer Window Size
Let M=4, W=30, H=50%, and the buffer window size vary as 30, 40, 50, 60, 70, 80, and
90. With different cheating node percentages, the playing continuity and the playing
delay are shown in Fig. 3(a) and Fig. 3(b), respectively.

(a)

(b)
Fig. 3. Streaming quality of DONet when M=4, W=30, H=50%. (a) playing continuity; (b)
playing delay.

Fig. 3(a) suggests that with all buffer window sizes, the playing continuity is highest
when there is no node cheating, and gets lower with more cheating nodes. In addition,
given the same cheating node percentage, the bigger buffer window size brings higher

Impact of Buffer Map Cheating on the Streaming Quality in DONet

823

playing continuity. The change of playing continuity is most obvious when the buffer
window size is big and the cheating node percentage is small.
Fig. 3(b) tells that the playing delay increases with the growth of cheating node
percentage, and decreases with the growth of buffer window size.
4) Different Partner Number
Let B=70, W=30, H=50%, and the partner number of each node vary as 4, 5, and 6. The
playing continuity and the playing delay under different cheating node percentages are
shown in Fig. 4(a) and Fig. 4(b), respectively.

(a)

(b)
Fig. 4. Streaming quality of DONet when B=70, W=30, H=50%. (a) playing continuity; (b)
playing delay.

With any number of partner nodes, the playing continuity decreases with the increase of cheating node percentage, and is maximized when there is no node cheating,
as shown in Fig. 4(a). This is consistent with Fig. 1(a), Fig. 2(a), and Fig. 3(a). In addition, Fig. 4(a) shows that the playing continuity is higher when the number of partner
nodes each node maintains is bigger.
On the other hand, Fig. 4(b) tells the similar conclusion as Fig. 1(b), Fig. 2(b), and
Fig. 3(b), that the playing delay increases with the growth of cheating node percentage,
and is shortest when there is no node cheating. Also, more partner nodes will bring
shorter playing delay.
According to all the experimental results above, the streaming quality is always
optimized when there is no node cheating, no matter what the network parameter is.
Therefore, the buffer map cheating of selfish nodes indeed has considerable negative
impact on the streaming quality of DONet.

824

C. Yong, L. Dan, and W. Jianping

5 Conclusion and Future Work
DONet is especially suitable for live stream applications. However, selfish overlay
nodes might cheat about their buffer maps to reduce the forwarding burden. We establish the model of buffer map cheating in this paper, and analyze its impact on the
streaming quality of DONet by experiment in this paper. The experimental results show
that buffer map cheating of selfish nodes will indeed cause the streaming quality in
DONet to decrease considerably.
As for future work, we should design incentive algorithms to defend buffer map
cheating in DONet, and it can be reviewed as another way to improve the streaming
quality in DONet considering the selfishness of individual nodes.

References
1. S. E. Deering: Multicast Routing in Internetworks and Extended LANs, In Proceedings of
ACM SIGCOMM’88, Stanford, CA, USA, (Aug 1988)
2. Y. H. Chu, S. G. Rao, and H. Zhang: A Case for End System Multicast, In Proceedings of
ACM Sigmetrics’00, Santa Clara, California, USA, (Jun 2000)
3. S. Banerjee, B. Bhattacharjee, C. Kommareddy: Scalable Application Layer Multicast, In
Proceedings of ACM SIGCOMM’02, Pittsburgh, PA, USA, (Aug 2002)
4. D. A. Tran, K. A. Hua, T. Do: Zigzag: An efficient peer-to-peer scheme for media streaming, In Proceedings of IEEE INFOCOM’03, San Franciso, CA, USA, (Mar/Apr 2003)
5. Y. Chawathe: Scattercast: An Architecture for Internet Broadcast Distribution as an Infrastructure Service, Ph.D. Thesis, University of California, Berkekey, (Dec 2000)
6. P. Francis: Yoid: Extending the Internet Multicast Architecture, White Paper,
http://www.icir.org/yoid
7. B. Zhang, S. Jamin, L. Zhang: Host Multicast: A Framework for Delivering Multicast to
End Users, In Proceeding of IEEE INFOCOM’02, New York, NY, USA, (Jun 2002)
8. X. Zhang, J. Liu, B. Li, T. P. Yum: Data-Driven Overlay Streaming: Design, Implementation, and Experience, In Proceedings of IEEE INFOCOM’05, Miami, Florida, USA, (Mar
2005)
9. S. Banerjee, S. Lee, B. Bhattacharjee, A. Srinivasan: Resilient multicast using overlays, In
Proceedings of ACM SIGMETRICS’03, San Diego, CA, USA, (Jun 2003)
10. P. Eugster, R. Guerraoui, A.M. Kermarrec, L. Massoulie: From epidemics to distributed
computing, IEEE Computer, (2004) 37(5):60-67
11. S. Jin and A. Bestavros: Cache-and-relay streaming media delivery for asynchronous clients, In Proceedings of NGC’02, Boston, MA, USA, (Oct 2002)
12. Y. Cui, B. Li, K. Nahrstedt: oStream: asynchronous streaming multicast, IEEE Journal on
Selected Areas in Communications, (2004) 22(1): 91-106

