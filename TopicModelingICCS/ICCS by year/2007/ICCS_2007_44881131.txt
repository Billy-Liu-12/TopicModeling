Data Dependency Based Recovery Approaches in
Survival Database Systems
Jiping Zheng1,2, Xiaolin Qin1,2, and Jin Sun1
1

College of Information Science and Technology, Nanjing University of Aeronautics and
Astronautics, Nanjing, Jiangsu 210016, China
2
Institute of Information Security, Nanjing University of Aeronautics and Astronautics,
Nanjing, Jiangsu 210016, China
{zhengjiping, qinxcs, sunjinly}@nuaa.edu.cn

Abstract. Recovering from malicious attacks in survival database systems is
vital in mission-critical information systems. Traditional rollback and reexecute techniques are too time-consuming and can not be applied in survival
environments. In this paper, two efficient approaches - transaction dependency
based and data dependency based are proposed. Comparing to transaction
dependency based approach, data dependency recovery approaches need not
undo innocent operations in malicious and affected transactions even some
benign blind writes on bad data item speed up recovery process.

1 Introduction
Database security concerns confidentiality, integrity and availability of data stored in
a database [1]. Traditional security mechanisms focus on protection, especially
confidentiality of the data. But in some mission-critical systems, such as credit card
billing, air traffic control, logistics management, inventory tracking and online stock
trading, emphases are put on how to survive under successful attacks [2]. And these
systems need to provide limited service at all time and focus on database integrity and
availability.
Despite of existing protection mechanisms, various kinds of attacks and authorized
users to exceed their legitimate access or abuse the system make above systems more
vulnerable. So intrusion detection (ID) was introduced. There are two main
techniques, including statistical profiling and signature identification, which can
supplement protection of database systems by rejecting the future access of detected
malicious attackers and by providing useful hints on how to strengthen the defense.
However, there are several inherent limitations about ID [3]: (a) Intrusion detection
makes the system attack-aware but not attack-resistant, that is, intrusion detection
itself cannot maintain the integrity and availability of the database in face of attacks.
(b) Achieving accurate detection is usually difficult or expensive. The false alarm
rate is high in many cases. (c) The average detection latency in many cases is too long
to effectively confine the damage. Some malicious behaviors can not be avoided in
DBMS. So effective and efficient recovery approaches must be adopted after the
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 1131–1138, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1132

J. Zheng, X. Qin, and J. Sun

detection of malicious attacks. The rest of this paper is organized as follows. A
summery of related work in this area is included in Section 2. In Section 3, recovery
approaches in traditional and survival DBMS are given. Section 3.1 describes
database and transaction theoretical model. Transaction logging recovery method is
put forward in Section 3.2. Then data dependency approaches without/with blind
writes are emphasized in Section 3.3 and Section 3.4 respectively. Performance
analysis is put forward in Section 4. Section 5 concludes the paper.

2 Related Work
The traditional even simplest method for recovering a database to a consistent state is
rollback followed by re-execution of the malicious transactions and ones which are
dependent upon them. This method, while effective, necessitates an undue amount of
work on the part of the database administrator, and requires a knowledge of which
transaction was inappropriate one. And, some benign and innocent transactions need
to be re-executed. In general, this is a relatively poor option (not efficient) and
inadequate for the purposes of most database installations.
In order to overcome the limitations of this simple rollback model, researchers
have investigated various other methods for recovering a database to a consistent
state. In general, there are two basic forms of post-intrusion recovery methods [4]:
transaction based and data dependency based. The difference lies in whether the
system recovers modifications to the logs to organize the data modified by
interdependencies and associations.
Transaction based recovery methods [5-7], mostly referred transaction logging
ones, rely on the ability of an ancillary structure to re-execute committed transactions
that have been both committed since the execution of the malicious transactions and
affected by those transactions. First ODAM [8] then ITDB [9] and Phoenix [10] are
survival DBMSs developed by Peng Liu et al. and Tzi-cher Chiueh respectively.
These prototypes are implemented on top of a COTS (Commercial-Off-The-Shelf)
DBMS, e.g. Oracle, PostgreSQL. In these systems, database updates are logged in
terms of SQL-based transactions. ODAM and ITDB identify inter-transaction
dependencies at the repair time by analyzing the SQL log and only undo malicious
transactions and ones affected by them while Phoenix maintains a run-time intertransaction dependency graph with selective transaction undo. However, these
systems rely on the ability of the recovery system to correctly determine the
transactions which need to be redone.
Data dependency based recovery methods [11-14] suggest to undo and redo only
affected operations rather than undoing all operations of affected transactions and
then re-executed them. Panda and Tripathy [12] [13] divide transaction log file into
clusters to identify affected items for further recovery. Nevertheless, they require that
log must be accessed starting from the malicious transaction till the end in order to
perform damage assessment and recovery.

Data Dependency Based Recovery Approaches in Survival Database Systems

1133

3 Recovery Approaches in Survival Database Systems
As mentioned methods above, our work is also based on the assumption that the
attacking transaction has already been detected by intrusion detection techniques. So,
given an attacking transaction, our goal is to determine the affected ones quickly,
stops new and executing transactions from accessing affected data, and then carries
out recovering process. In our methods, we suppose that the scheduler produces a
strict serializable history, and the log is not modifiable by users. As the transactions
get executed, the log grows with time and is never purged. Also, the log is stored in
the secondary storage, so every access to it requires a disk I/O.
3.1 Database and Transaction Theoretical Model
To explain our recovery approaches, first we provide database and transaction
theoretical model as below [15]:
Definition 1. A database system is a set of data objects, denoted as DB={x1, x2, …,
xn}.
Definition 2. A transaction Ti is a partial order with ordering relation <i , where
1. Ti ⊆ {[ri(x), wi(x)]|x is a data object} (ai, ci);
2. if ri(x), wi(x) ∈ Ti, then either ri(x)<i wi(x), or wi(x)<i ri(x);
3. ci ∈ Ti iff ai ∉ Ti.

∪

And r, w, a, c relate to the operation of read, write, abort, and commit respectively.
Definition 3. The (usually concurrent) execution of a set of transactions is modeled
by a structure called a history. Formally, let T={T1, T2, …, Tn} be a set of transactions.
A complete history H over T is a partial order with ordering relation <H, where:
1. H= ∪ ni=1 Ti;

2. ∪ ni=1 <i ⊆ <H.

Two transactions T1, T2 in a history H usually have three relations (assume that T1
begins first) as shown in Figure1. Figure 1(a) shows that T1, T2 are overlapped.
During a certain period between two dashed lines, there are operations of both T1 and
T2. Figure 1(b) shows that the runtime of T2 in that of T1. In figure 1(c), T1 and T2 do
not have the operations executed at the same time. That is, there is no opportunity
they read/write the same data items.

T1
T2
(a)

T1

T1

T2

T2
(b)

(c)

Fig. 1. (a) Two transactions T1, T2 are overlapped; (b) T2 begins after T1 begins and ends before
T1 ends; (c) T2 begins after T1 ends

1134

J. Zheng, X. Qin, and J. Sun

3.2 Transaction Logging Method
Transaction logging method relies on the availability of read information in the logs
and typically this is not a standard feature of commercial database systems. Oracle
DBMS does not log read operations in defaulted installations. Existing methods either
construct read logs [8] [9] or maintain an inter-transaction dependencies at runtime
[10]. In order to build recovery from malicious transactions, transaction logging
methods first analyzed transaction dependencies in the history. In general, transaction
dependencies are defined as follows [7]:
Definition 4. Transaction Tj is dependent upon transaction Ti in a history H if there
exists a data item x such that Tj reads x after Ti has updated x and there are no
transactions that update x between the time Ti update x and Tj reads x.
Definition 5. In a history H, transaction Ti affects Tj if the ordered pair (Tj, Ti) is in the
transitive closure of the dependent upon relation as described as in definition 4.
------------------------------------------------------------------------------------------------------Input: Serialized history H, malicious transaction B.
Output: A consistent state of DBMS.
Initialize: write_set={}; temp_write_set={};
undo_transaction_set=B; temp_undo_transaction_set={}.
Steps:
1. Locate the history H where the malicious transaction B starts.
2. Scan every operation op(x) forward until the end of the history.
2.1 if wB(x) then write_set=write_set ∪ {wB(x)};
/*w, r, a, c relate to the operations of write, read, abort, and commit respectively */
2.2 else
2.2.1 if wTi(x) then temp_write_set=temp_wrtie_set ∪ {wTi(x)};
2.2.2 if rTi(x) then
if Ti ∈ temp_undo_transaction_set skip;
else if op(x) ∈ write_set then
temp_undo_transaction_set= temp_undo_transaction_set ∪ {Ti};
2.2.3 if aTi then
temp_write_set= temp_write_set- temp_write_set|Ti;
/* temp_write_set|Ti denotes operations of Ti in temp_write_set*/
if Ti ∈ temp_undo_transaction_set then
temp_undo_transaction_set= temp_undo_transaction_set-{Ti};
2.2.4 if cTi then
if Ti ∈ temp_undo_transaction_set then
undo_transaction_set= undo_transaction_set ∪ {Ti};
temp_undo_transaction_set= temp_undo_transaction_set-{Ti};
write_set=write_set ∪ temp_write_set|Ti;
temp_write_set=temp_write_set- temp_write_set|Ti;
else temp_write_set=temp_write_set- temp_write_set|Ti;
3. Undo every transaction in undo_transaction_set.
------------------------------------------------------------------------------------------------------Fig. 2. Algorithm1: Transaction based malicious transaction recovery algorithm

Given a history H and malicious transactions detected previously, transaction
logging recovery methods identify the affected transactions then undo both malicious

Data Dependency Based Recovery Approaches in Survival Database Systems

1135

transactions and affected by them. An effective and efficient transaction logging
recovery algorithm [5] is shown as figure 2.
In figure 2, transaction based malicious transaction recovery algorithm undoes the
committed malicious transactions and decided affected transactions. If transaction T
finally aborted, it need not be undone.
In below history H1, according to algorithm 1 shown in figure 2, transactions in
undo_transaction_set={B}→{B,T1}→ {B,T1,T4} need to be undone and re-executed.
That is, the recovery process only undoes malicious transaction B and affected
transactions T1, T4.
H 1 : rB ( x) wB ( x)rB (u ) wB (u )c B rT1 ( x) wT1 ( x) rT3 ( z ) wT3 ( z )cT3 rT1 ( y ) wT1 ( y )cT1
rT2 ( y ) wT2 ( y )rT2 (v) wT2 (v)aT2 rT4 (u ) wT4 (u ) rT4 ( y ) wT4 ( y) rT4 ( z ) wT4 ( z )cT4

3.3 Data Dependency Based Recovery Approach Without Considering Blind
Writes
Definition 6. First operation of Ti is write(x) whether or not data item x is dirty or not.
So Ti is called blind write transaction and operation write(x) is a blind write.
In most cases, before transactions updated data items, they first read them. But in
some cases, especially in malicious attacks environments, various kinds of abnormal
behaviors do not obey this rule. So bind writes are unavoidable. In this section, we
only discuss the situation without blind writes.
------------------------------------------------------------------------------------------------------Input: Serialized history H, malicious transaction B.
Output: A consistent state of DBMS.
Initialize: comtaminated_data_set={};
temp_comtanminated_data_set={}; read_data_set={}.
Steps:
1. Locate the history H where the malicious transaction B starts.
2. Scan the history operation op(x) forward until the end of history.
2.1 if wB(x) then comtaminated_data_set= comtaminated_data_set ∪ {x};
2.2 else for each transaction Ti
2.2.1 if rTi(x) then read_data_seti=read_data_seti ∪ {x};
2.2.2 if wTi(y) then
if rTi(x)<iwTi(y) && x ∈ (comtaminated_data_set ∩ read_data_seti )
∪ (temp_comtaminated_data_seti ∩ read_data_seti ) then
temp_comtaminated_data_seti= temp_comtaminated_data_seti ∪ {y};
else if wTi(x)<iwTi(y)&& x ∈ (comtaminated_data_set ∩ read_data_seti )
∪ (temp_comtaminated_data_seti ∩ read_data_seti ) then
temp_comtaminated_data_seti= temp_comtaminated_data_seti ∪ {y};
2.2.3 if cTi then
comtaminated_data_set= comtaminated_data_set ∪
temp_comtaminated_data_seti;
2.2.4 if aTi then
temp_comtaminated_data_seti={};
read_data_seti={}.
3. Refresh data values in comtaminated_data_set.
------------------------------------------------------------------------------------------------------Fig. 3. Algorithm2: Data dependency based recovery algorithm without blind writes

1136

J. Zheng, X. Qin, and J. Sun

Definition 7. Within one transaction or between two transactions, operations are
influenced with each other. There exist read-write and write-write dependencies.
1) read-write dependency: if readi(x) <i writei(y) then y is dependent upon x;
2) write-write dependency: if writei(x) <i writei(y) then y is dependent upon x.
For read operations can not update any data item, there does not exist read-read
dependency. Figure 3 shows data dependency based recovery algorithm without blind
writes. The algorithm skips read operations because they do not change data values
and every write operation updates data values they first read them.
In history H1, according to data dependency recovery algorithm in figure 3, only
data items x, y, u, z need to be refreshed to correct values.
3.4 Data Dependency Based Recovery Approach with Blind Writes
Definition 8. A blind write is called a refresh-write if the operation belongs to a
benign transaction and not dependent of any contaminated data.
------------------------------------------------------------------------------------------------------2.2.2 if bwTi(x) then
if x ∈ temp_comtaminated_data_seti ∩ read_data_seti then
temp_comtaminated_data_seti = temp_comtaminated_data_seti –{x};
else if x ∈ comtaminated_data_set ∩ read_data_seti then
comtaminated_data_set=comtaminated_data_set-{x};
else if wTi(x) then
if rTi(x)<iwTi(y) && x ∈ (comtaminated_data_set ∩ read_data_seti )
∪ (temp_comtaminated_data_seti ∩ read_data_seti ) then
temp_comtaminated_data_seti= temp_comtaminated_data_seti ∪ {y};
else if wTi(x)<iwTi(y)&& x ∈ (comtaminated_data_set ∩ read_data_seti )
∪ (temp_comtaminated_data_seti ∩ read_data_seti ) then
temp_comtaminated_data_seti= temp_comtaminated_data_seti ∪ {y};
------------------------------------------------------------------------------------------------------Fig. 4. Algorithm3: Modified data dependency based recovery algorithm on step 2.2.2 in
figure 3 with blind writes

If a malicious transaction with blind writes, algorithm 2 need not change anything
to satisfy this situation. If there exists a refresh-write described in definition 8, we can
modify step 2.2.2 in algorithm 2 to get data dependency based recovery algorithm
with blind writes which shown in figure 4. In figure 4, algorithm 3 shows that benign
transactions with blind writes can refresh contaminated data values to correct state.
H 2 = rT1 ( x 2 )rT1 ( x 4 )rT1 ( x5 )rT3 ( x 5 ) wT1 ( x3 )rT1 ( x 4 ) wT1 ( x 4 )cT1 rT2 ( x3 )rT2 ( x 4 )
rT2 ( x5 ) wT2 ( x 2 ) wT2 ( x1 )cT2 wT3 ( x1 ) wT3 ( x 2 )cT3 rT4 ( x1 ) wT4 ( x 4 )rT4 ( x3 ) wT4 ( x5 )cT4

In history H2, wT3(x1), wT3(x2) are benign blind writes which update contaminated
data x1, x2 to correct state.

4 Performance Analyses
There are two basic measures to evaluate these recovery systems. One is promptness
and the other is the complexity of any ancillary structures required. These

Data Dependency Based Recovery Approaches in Survival Database Systems

1137

measurements are not adequate since data dependency based systems add overhead to
the individual transactions, while transaction logging methods append their overhead
to the recovery process. In spite of additional data structures used in data dependency
recovery algorithms; it will be more effective and efficient than transaction based
methods. We use following equation [14] to evaluate our recovery approaches.
T=

R * S R + W * SW
* TP
SP

(1)

R: the number of read operations in the history;
W: the number of write operations in the history;
SR: the size of a read operation record in bytes;
SW: the size of a read operation record in bytes;
SP: the size of a page file;
TP: the page access time in milliseconds.
In our model, we use the following system-dependent parameters shown in Table1:
Table 1. System-dependent parameters used in data dependency based recovery approaches
Name
SR
SW
SP
TP

System-dependent parameters
40 bytes
60 bytes
1024 bytes
20 milliseconds (ms)

According to algorithms shown above and equation (1), we can calculate the
corresponding time consumed in each recovery process shown in table 2.
Table 2. Time consumed in different recovery processes

H1
H2

Traditional undo
and re-execute
method

Transaction
based recovery
method

19.531 ms
17.188 ms

13.672 ms
12.500 ms

Data
dependency
based approach
without blind
writes
7.813 ms
/

Data
dependency
based approach
with blind
writes
/
3.906 ms

In table 2, we can see that data dependency based approaches are more effective
and efficient than traditional undo and transaction based recovery methods.

5 Conclusion
In survival DBMS, fast and accurate recovery from malicious transactions is crucial
for survival under malicious attacks. In this paper, we first propose transaction
logging methods to recover DBMS to a consistent state. Then data dependency based
recovery approaches without/with blind writes are given. Comparing to read logs
needed and whole transaction undone in transaction based methods, data dependency
approaches only undo malicious and affected operations. Accompanied with benign

1138

J. Zheng, X. Qin, and J. Sun

blind writes, data dependency approaches need not undo operations on the data items
that have been updated by benign blind writes.
Acknowledgements. This work has been supported by the National Natural Science
Foundation of China (60673127), High-Technology Research Project of Jiangsu
Province of China (BG2004005) and the Aerospace Science Foundation of China
(02F52033).

References
1. Elisa Bertino, Ravi Sandhu. Database Security-Concepts, Approaches, and Challenges.
IEEE Transactions on Dependable and Secure Computing, 2005, 2(1): 2-19
2. Paul Ammann, Sushil Jajodia, Catherine D. McCollum, Barbara T. Blaustein. Surviving
Information Warfare Attacks on Databases. In: Proceedings of IEEE Symposium on
Research in Security and Privacy, Oakland, California, 1997, 164-174
3. Peng Liu, Architectures for Intrusion Tolerant Database Systems. 18th Annual Computer
Security Applications Conference. San Diego California .December 09 - 13, 2002, 311-320
4. Jeffrey G. Klapheke. Evaluation of Post-Intrusion Database Recovery Methods. Computer
Science Seminar, Rensselaer at Hartford, SD2-T1-1, April 24, 2004.
5. Paul Ammann, Sushil Jajodia, Peng Liu. Recovery from Malicious Transactions. IEEE
Transactions on Knowledge and Data Engineering, 2002, 14(5): 1167-1185
6. Yi Hu, Brajendra Panda. Identification of Malicious Transactions in Database Systems. In:
Proceedings of the Seventh International Database Engineering and Applications
Symposium, 2003, 329-335
7. Peng Liu, Paul Ammann and Sushil Jajodia. Rewriting Histories: Recovering from
Malicious Transactions. Distributed and Parallel Databases Journal, 2000, 8(1): 7-40
8. Pramote Luenam, Peng Liu. ODAR: An On-the-fly Damage Assessment and Repair
System for Commercial Database Applications. In: Proceedings of 15th annual working
conference on Database and application Security, 2001, 239-252
9. Peng Liu. Jiwu Jing, Pramote Luenam, Ying Wang, Lunquan Li, Supawadee Ingsriswang.
The Design and Implementation of a self-Healing Database System. Journal of Intelligent
Information Systems, 2004, 23(3), 247-269
10. Tzi-cker Chiueh, Dhruv Pilania. Design, Implementation, and Evaluation of a Repairable
Database Management System. In: Proceedings of 21st International Conference on Data
Engineering, 2005, 1024-1035
11. Brajendra Panda, Kazi Asharful Haque. Extended Data Dependency Approach: A Robust
Way of Rebuilding Database. In: Proceedings of the 2002 ACM Symposium on Applied
Computing, ACM Press, New York, 2000, 446-452
12. Brajendra Panda, Sani Tripathy. Data Dependency based Logging for Defensive
Information Warfare. In: Proceedings of the 2000 ACM Symposium on Applied
Computing, ACM Press, New York, 2000, 361-365
13. Sani Tripathy, Brajendra Panda. Post-Intrusion Recovery Using Data Dependency
Approach. In: Proceedings of the 2001 IEEE Workshop on Information Assurance and
Security. United States Military Academy, West Point, NY ,June, 2001, 156-160
14. Brajendra Panda, Rajesh Yalamanchili. Transaction Fusion in the Wake of Information
Warfare. In: Proceedings of the 2001 ACM symposium on Applied computing, Las Vegas,
Nevada, United States, 2001, 242 - 247
15. Kun Bai, Hai Wang, Peng Liu. Towards Database Firewalls. In: Proceedings of IFTP
International Federation for Information, LNCS 3654, 2005, 178-192

