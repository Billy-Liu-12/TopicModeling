Symbolic Manipulation of Bspline Basis
Functions with Mathematica
A. Iglesias1 , R. Ipanaqu´e2 , and R.T. Urbina2
1

Department of Applied Mathematics and Computational Sciences,
University of Cantabria, Avda. de los Castros,
s/n, E-39005, Santander, Spain
iglesias@unican.es
2
Department of Mathematics, National University of Piura,
Urb. Miraﬂores s/n, Castilla, Piura, Per´
u

Abstract. Bspline curves and surfaces are the most common and most
important geometric entities in many ﬁelds, such as computer design and
manufacturing (CAD/CAM) and computer graphics. However, up to our
knowledge no computer algebra package includes especialized symbolic
routines for dealing with Bsplines so far. In this paper, we describe a
new Mathematica program to compute the Bspline basis functions symbolically. The performance of the code along with the description of the
main commands are discussed by using some illustrative examples.

1

Introduction

Bspline curves and surfaces are the most common and most important geometric
entities in many ﬁelds, such as computer design and manufacturing (CAD/CAM)
and computer graphics. In fact, they become the standard for computer representation, design and data exchange of geometric information in the automotive,
aerospace and ship-building industries [1]. In addition, they are very intuitive,
easy to modify and manipulate - thus allowing the designers to modify the shape
interactively. Moreover, the algorithms involved are quite fast and numerically
stable and, therefore, well suited for real-time applications in a variety of ﬁelds,
such as CAD/CAM [1,7], computer graphics and animation, geometric processing [5], artiﬁcial intelligence [2,3] and many others.
Although there is a wealth of powerful algorithms for Bsplines (see, for instance, [6]), they usually perform in a numerical way. Surpringly, although there
is a large collection of very powerful general-purpose computer algebra systems,
none of them includes speciﬁc commands or specialized routines for dealing with
Bsplines symbolically. The present work is aimed at bridging this gap. This paper
describes a new Mathematica program for computing Bspline basis functions in
a fully symbolic way. Because these basis functions are at the core of almost any
algorithm for Bspline curves and surfaces, their eﬃcient manipulation is a critical
step we have accomplished in this paper. The program is also able to deal with
Bspline curves and surfaces. However, this paper focuses on the computation of
Bspline basis functions because of limitations of space. The program has been
Y. Shi et al. (Eds.): ICCS 2007, Part II, LNCS 4488, pp. 194–202, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Symbolic Manipulation of Bspline Basis Functions with Mathematica

195

implemented in Mathematica v4.2 [8] although later releases are also supported.
The program provides the user with a highly intuitive, mathematical-looking
output consistent with Mathematica’s notation and syntax [4].
The structure of this paper is as follows: Section 2 provides some mathematical background on Bspline basis functions. Then, Section 3 introduces the new
Mathematica program for computing them and describes the main commands
implemented within. The performance of the code is also discussed in this section
by using some illustrative examples.

2

Mathematical Preliminaries

Let T = {u0 , u1 , u2 , . . . , ur−1 , ur } be a nondecreasing sequence of real numbers
called knots. T is called the knot vector. The ith Bspline basis function Ni,k (t)
of order k (or equivalently, degree k − 1) is deﬁned by the recurrence relations
Ni,1 (t) =
and
Ni,k (t) =

1 if ui ≤ t < ui+1
0 otherwise

,

i = 0, 1, 2, . . . , r − 1

t − ui
ui+k − t
Ni,k−1 (t) +
Ni+1,k−1 (t)
ui+k−1 − ui
ui+k − ui+1

(1)

(2)

for k > 1. Note that i-th Bspline basis function of order 1, Ni,1 (t), is a piecewise
constant function with value 1 on the interval [ui , ui+1 ), called the support of
Ni,1 (t), and zero elsewhere. This support can be either an interval or reduce to
a point, as knots ui and ui+1 must not necessarily be diﬀerent. If necessary, the
0
convention = 0 in eq. (2) is applied. The number of times a knot appears in
0
the knot vector is called the multiplicity of the knot and has an important eﬀect
on the shape and properties of the associated basis functions. Any basis function
of order k > 1, Ni,k (t), is a linear combination of two consecutive functions of
order k − 1, where the coeﬃcients are linear polinomials in t, such that its order
(and hence its degree) increases by 1. Simultaneously, its support is the union of
the (partially overlapping) supports of the former basis functions of order k − 1
and, consequently, it usually enlarges.

3

Symbolic Computation of Bspline Basis Functions

This section describes the Mathematica program we developed to compute the
Bspline basis functions in a fully symbolic way. For the sake of clarity, the program will be explained through some illustrative examples.
The main command, Ni,k [knots,var], returns the i-th Bspline basis function
of order k in the variable var associated with an arbitrary knot vector knots,
as deﬁned by eqs. (1)-(2). For instance, eq. (1) can be obtained as:
In[1]:=N0,1[{ui ,ui+1 },t]
Out[1] := W hich[t < ui , 0, ui ≤ t < ui+1 , 1, t ≥ ui+1 , 0]

196

A. Iglesias, R. Ipanaqu´e, and R.T. Urbina

where the output consists of several couples (condition,value) that reproduce the
structure of the right-hand side of eq. (1). The command Which evaluates those
conditions and returns the value associated with the ﬁrst condition yielding True.
Our command PiecewiseForm displays the same output with a more similar
appearance to eq. (1):
In[2]:=PiecewiseForm[%]
⎫
⎧
t < ui
⎬
⎨0
Out[2] := 1
ui ≤ t < ui+1
⎭
⎩
0
t ≥ ui+1
This output shows the good performance of these commands to handle fully
symbolic input. Let us now consider a symbolic knot vector of length 4 such as:
In[3]:=Array[x,4]
Out[3] := {x(1), x(2), x(3), x(4)}
Now, we compute the basis functions up to order 3 for this knot vector as
follows:
In[4]:Table[Table[Ni,k[%,t] // PiecewiseForm,{i,0,3-k}],{k,1,3}]
Out[4] :=
⎫ ⎧0
⎫ ⎧0
⎫⎫ ⎫
⎧ ⎧⎧ 0
t < x(1)
t < x(1)
t < x(1)
⎪
⎪ 1 x(1) ≤ t < x(2) ⎪
⎪⎪
⎪
⎪ 0 x(1) ≤ t < x(2) ⎪
⎪ 0 x(1) ≤ t < x(2) ⎪
⎪ ⎪
⎪ ⎪
⎪ ⎪
⎪⎪
⎪⎪
⎨
⎨
⎪
⎨
⎨
⎬
⎬
⎬
⎬
⎪
⎪
⎪
⎪
⎪
⎪
⎪
0
x(2)
≤
t
<
x(3)
1
x(2)
≤
t
<
x(3)
0
x(2)
≤
t
<
x(3)
,
,
,
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪ 0 x(3) ≤ t < x(4) ⎭
⎪⎩
⎪
⎪ 0 x(3) ≤ t < x(4) ⎭
⎪ 1 x(3) ≤ t < x(4) ⎭
⎪ ⎪
⎪⎩
⎪ ⎩
⎪ ⎩
⎪⎭
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
0
t ≥ x(4)
0
t ≥ x(4)
0
t ≥ x(4)
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪ ⎧⎧
⎧
⎫
⎫
⎫
⎪
⎪
⎪
⎪
⎪
⎪
0
t
<
x(1)
0
t
<
x(1)
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
t−x(1)
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
0
x(1)
≤
t
<
x(2)
⎪
⎪
⎪
⎪
⎪
⎪
x(1)
≤
t
<
x(2)
⎪
⎪
⎨
⎨
⎬
⎨
⎬
⎬
⎪
⎪
−x(1)+x(2)
⎪
⎪
t−x(2)
⎪
⎪
t−x(3)
x(2)
≤
t
<
x(3)
⎬
⎨
,
,
−x(2)+x(3)
x(2)
≤
t
<
x(3)
x(2)−x(3)
⎪
⎪ t−x(4)
⎪
⎪⎪
⎪⎪
⎪ ⎪
⎪
⎪
⎪
⎪
⎪⎪
⎪⎪
⎪
0
x(3) ≤ t < x(4) ⎪
⎪
⎪
⎪ x(3)−x(4) x(3) ≤ t < x(4) ⎪
⎪ ⎪
⎪⎪
⎪⎪
⎪ ⎪
⎪
⎪ ⎪
⎩
⎩
⎭
⎩
⎭
⎭
⎪
⎪
⎪
⎪
0
t
≥
x(4)
0
t
≥
x(4)
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎫⎫ ⎪
⎪
⎪ ⎧⎧
⎪
⎪
⎪
⎪
0
t
<
x(1)
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪ ⎪
2
⎪
⎪
⎪
⎪
⎪
⎪
(t−x(1))
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
x(1)
≤
t
<
x(2)
⎪
⎪
⎪
⎪
⎪
⎪
(x(1)−x(2)) (x(1)−x(3))
⎨
⎨
⎬
⎬
⎪
⎪
⎪
⎪
⎪
⎪
(t−x(1))
(t−x(3))
(t−x(2))
(−t+x(4))
⎪
⎪
+
x(2)
≤
t
<
x(3)
⎪
⎪
(x(1)−x(3))
(−x(2)+x(3))
(x(2)−x(3))
(x(2)−x(4))
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
2
⎪
⎪
⎪
⎪
⎪
⎪
(t−x(4))
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
x(3)
≤
t
<
x(4)
⎪
⎪
⎪
⎪
⎪
⎪
(−x(2)+x(4))
(−x(3)+x(4))
⎪
⎩ ⎪
⎩
⎩⎪
⎭ ⎭
⎭⎪
0
t ≥ x(4)
Note that, according to eq. (2), the i-th basis function of order k is obtained
from the i-th and (i + 1)-th basis functions of order k − 1. This means that
the number of basis functions decreases as the order increases and conversely.
Therefore, for the set of basis functions up to order 3 we compute the Ni,k , with
i = 0, . . . , 3 − k for k = 1, 2, 3. The whole set exhibits a triangular structure of
embedded lists in Out[4] for each hierarchical level (i.e. for each order value).
The knot vectors can be classiﬁed into three groups. The ﬁrst one is the
uniform knot vector; in it, each knot appears only once and the distance between

Symbolic Manipulation of Bspline Basis Functions with Mathematica

197

Fig. 1. (top-bottom, left-right) Bspline basis functions for the uniform knot vector
{1, 2, 3, 4, 5} and orders 1, 2, 3 and 4 respectively

consecutive knots is always the same. As a consequence, each basis function is
similar to the previous one but shifted to the right according to such a distance.
To illustrate this idea, let us proceed with a numerical knot vector so that the
corresponding basis functions can be displayed graphically. We compute the basis
functions of order 1 for the uniform knot vector {1, 2, 3, 4, 5}:
In[5]:=Table[Ni,1[{1,2,3,4,5},t] //PiecewiseForm,{i,0,3}]
Out[5]
⎧⎧ 0
⎪
⎪
⎪
⎪
⎪
⎪
⎪1
⎪
⎪
⎨
⎨⎪
0
⎪0
⎪⎪
⎪
⎪
⎪
⎪0
⎪
⎪
⎩
⎩⎪
0

:=

⎧0
t<1 ⎫
⎪
⎪
⎪
⎪
⎪
1 ≤ t < 2⎪
⎪0
⎪
⎪
⎨
⎬ ⎪
1
2≤t<3
,
0
3 ≤ t < 4⎪
⎪ ⎪
⎪
⎪ ⎪
⎪
4 ≤ t < 5⎪
⎪
⎪
⎭ ⎩0
0
t≥5

⎧0
t<1 ⎫
⎪
⎪
⎪
⎪
⎪
1 ≤ t < 2⎪
⎪
⎪0
⎪
⎬ ⎪
⎨
2≤t<3
0
,
3 ≤ t < 4⎪
1
⎪ ⎪
⎪
⎪ ⎪
⎪
4 ≤ t < 5⎪
⎪
⎪
⎭ ⎩0
t≥5
0

⎧0
t<1 ⎫
⎪
⎪
⎪
⎪
⎪
1 ≤ t < 2⎪
⎪0
⎪
⎪
⎨
⎬ ⎪
0
2≤t<3
,
0
3 ≤ t < 4⎪
⎪ ⎪
⎪
⎪ ⎪
⎪
4 ≤ t < 5⎪
⎪
⎪
⎭ ⎩1
0
t≥5

⎫
t<1 ⎫
⎪
⎪
⎪
⎪
⎪
1 ≤ t < 2⎪
⎪
⎪
⎪
⎬
⎬⎪
2≤t<3
3 ≤ t < 4⎪
⎪⎪
⎪⎪
⎪
⎪
4 ≤ t < 5⎪
⎪
⎭⎪
⎭
t≥5

From (2) we can see that the basis functions of order 2 are linear combinations
of these step functions of order 1 (shown in Figure 1(top-left)). The coeﬃcients
of such a linear combination are linear polynomials as well, so the resulting basis
functions are actually piecewise linear functions (see Fig. 1(top-right)):
In[6]:=Table[Ni,2[{1,2,3,4,5},t] //PiecewiseForm,{i,0,2}]
⎧⎧ 0
⎪
⎪
⎪⎪
⎪
⎪
⎪ −1 + t
⎪
⎪
⎨
⎨⎪
3−t
Out[6] :=
0
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎩⎩ 0
0

⎧ 0
t<1 ⎫
⎪
⎪
⎪
⎪
⎪ 0
⎪
1 ≤ t < 2⎪
⎪
⎪ ⎪
⎨
⎬
−2 + t
2≤t<3
,
4−t
3 ≤ t < 4⎪
⎪
⎪
⎪
⎪ ⎪
⎪
4 ≤ t < 5⎪
⎪
⎪
⎭ ⎩ 0
t≥5
0

⎧ 0
t<1 ⎫
⎪
⎪
⎪
⎪
⎪ 0
⎪
1 ≤ t < 2⎪
⎪
⎪ ⎪
⎨
⎬
2≤t<3
0
,
3 ≤ t < 4⎪
−3 + t
⎪
⎪
⎪
⎪ ⎪
⎪ 5−t
4 ≤ t < 5⎪
⎪
⎩
⎭ ⎪
0
t≥5

⎫
t<1 ⎫
⎪
⎪
⎪
⎪
⎪
⎪
1 ≤ t < 2⎪
⎪
⎪⎪
⎬
⎬
2≤t<3
3 ≤ t < 4⎪
⎪
⎪
⎪
⎪⎪
⎪
4 ≤ t < 5⎪
⎪
⎭
⎭⎪
t≥5

Similarly, the basis functions of order 3 are linear combinations of the basis
functions of order 2 in Out[6] according to (2):

198

A. Iglesias, R. Ipanaqu´e, and R.T. Urbina

In[7]:=Table[Ni,3[{1,2,3,4,5},t] //PiecewiseForm,{i,0,1}]
⎧⎧
⎫ ⎧
⎫⎫
0
t < 1 ⎪⎪
0 2
t<1 ⎪ ⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪⎪
(−1+t)
⎪
⎪
⎪
⎪
0
1 ≤ t < 2⎪
⎪
⎪
⎪
⎪
⎪
⎪
1 ≤ t < 2⎪
⎪
⎪
⎪
⎪
⎪
⎪
2
2
⎪
⎪
⎪
⎪
⎪
⎪
(−2+t)
⎬
⎨⎨ − 11 + 5 t − t2 2 ≤ t < 3 ⎬ ⎨
⎬
2
≤
t
<
3
2
2
2
,
Out[7] :=
23
2
(4−t)
− 2 + 7t−t 3 ≤ t < 4⎪
⎪
⎪
⎪
⎪
3 ≤ t < 4⎪
⎪
⎪
⎪
⎪
⎪
⎪
2
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪⎪
⎪
⎪
(5−t)2
⎪
⎪
⎪
⎪
⎪
⎪
0
4
≤
t
<
5
4
≤
t
<
5
⎪
⎪
⎪
⎪
⎪
2
⎭
⎩⎩
⎭ ⎩
⎭⎪
0
t≥5
0
t≥5
Note that we obtain two piecewise polynomial functions of degree 2 (i.e. order 3), displayed in Fig. 1(bottom-left), both having a similar shape but shifted
by length 1 with respect to each other. Finally, there is only one basis function of
order 4 for the given knot vector (the piecewise polynomial function of degree 3
in Fig. 1(bottom-right)):
In[8]:=Ni,4[{1,2,3,4,5},t] //PiecewiseForm
⎧
⎫
0 3
t<1 ⎪
⎪
⎪
⎪
(−1+t)
⎪
⎪
⎪
1 ≤ t < 2⎪
⎪
⎪
6
⎪
⎪
⎪
⎪
⎨ 31−45 t+21 t2 −3 t3
⎬
2
≤
t
<
3
6
Out[8] := −131+117 t−33 t2 +3 t3
⎪
3 ≤ t < 4⎪
⎪
⎪
6
⎪
⎪
⎪
⎪
−(−5+t)3
⎪
⎪
⎪
⎪
4
≤
t
<
5
⎪
⎪
6
⎩
⎭
0
t≥5
One of the most exciting features of modern computer algebra packages is
their ability to integrate symbolic, numerical and graphical capabilities within
a uniﬁed framework. For example, we can easily display the basis functions of
Out[5]-Out[8] on the interval (1, 5):
In[9]:=Plot[Table[Ni,#[{1,2,3,4,5},t],{i,0,4-#}]
//Evaluate,{t,1,5},PlotStyle->Table[Hue[(i+1)/(5-#)],
{i,0,4-#}],DisplayFunction->Identity]& /@ Range[4];
In[10]:=Show[GraphicsArray[Partition[%,2],
DisplayFunction->$DisplayFunction]]
Out[10] := See F igure 1
A qualitatively diﬀerent behavior is obtained when any of the knots appears
more than once (this case is usually referred to as non-uniform knot vector).
An example is given by the knot vector {0, 0, 1, 1, 2, 2, 2}. In this case, the basis
functions of order 1 are given by:
In[11]:=Table[Ni,1[{0,0,1,1,2,2,2},t] // PiecewiseForm,{i,0,5}]
⎧⎧
⎫ ⎫
⎫ ⎧
⎫ ⎧
t<0 ⎪ ⎪
t < 0 ⎪ ⎪0
0
t < 0 ⎪ ⎪0
⎪
⎪
⎪
⎬ ⎪
⎬ ⎨
⎬ ⎨
⎨
⎪
⎪
⎪
⎪
0 0≤t<1
1 0≤t<1
0 0≤t<1
⎪
⎪
⎪
,⎪
,
,
⎪
⎪
⎪
0
1
≤
t
<
2
0
1
≤
t
<
2
0
1
≤
t
<
2
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎭ ⎪
⎭ ⎩
⎭ ⎩
⎬
⎨⎩
t≥2 ⎫
t ≥ 2 ⎫ ⎧0
0
t ≥ 2 ⎫ ⎧0
⎧
Out[11] :=
t<0 ⎪ ⎪
t < 0 ⎪ ⎪0
0
t < 0 ⎪ ⎪0
⎪
⎪
⎨
⎬⎪
⎬ ⎨
⎬ ⎨
⎪
⎪⎪
⎪
0
0
≤
t<1 ⎪
0
0
≤
t
<
1
0
0
≤
t
<
1
⎪
⎪
⎪
⎪
,
,
⎪
⎪
⎪
⎪
0
1
≤
t
<
2
0
1
≤
t
<
2
1
1
≤
t
<
2
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎭⎪
⎭ ⎩
⎭ ⎩
⎭
⎩⎩
0
t≥2
0
t≥2
0
t≥2

Symbolic Manipulation of Bspline Basis Functions with Mathematica

199

Note that the knot spans involving the same knot (t = 0, t = 1 or t = 2)
at both ends reduce to a single point. This causes some basis functions (N01 ,
N21 , N41 and N51 in Out[11]) to be zero. This behavior continues until the order
reaches the multiplicity value of the multiple knot minus 2. For instance, there
is an identically null basis function of order 2, namely N42 :
In[12]:=Table[Ni,2[{0,0,1,1,2,2,2},t] // PiecewiseForm,{i,0,4}]
⎧⎧
⎫ ⎫
⎫ ⎧
⎫ ⎧
t<0 ⎪ ⎪
t<0 ⎪ ⎪ 0
0
t < 0 ⎪ ⎪0
⎪
⎪
⎪
⎨
⎬ ⎪
⎨
⎬
⎨
⎬
⎪
⎪
⎪
⎪
0
0≤t<1
t 0≤t<1
1−t 0≤t<1
⎪
⎪
⎪
,
,
,⎪
⎪
⎪
⎪
2
−
t
1
≤
t
<
2
0
1
≤
t
<
2
0
1
≤
t
<
2
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎭ ⎩
⎭ ⎩
⎭ ⎪
⎬
⎨⎩
0
t
≥
2
0
t
≥
2
0
t
≥
2
⎧
⎫
⎧
⎫
Out[12] :=
t<0 ⎪
0
t < 0 ⎪ ⎪0
⎪
⎪
⎪
⎪
⎪
⎬
⎨
⎬ ⎨
⎪
⎪
⎪
⎪
0
0
≤
t
<
1
0
0
≤
t
<
1
⎪
⎪
⎪
⎪
,
⎪
⎪
⎪
⎪
0
1
≤
t
<
2
−1
+
t
1
≤
t
<
2
⎪
⎪
⎪
⎪
⎪
⎪
⎭
⎩
⎭ ⎩
⎭
⎩
0
t≥2
0
t≥2
The basis functions of order 3 become:
In[13]:=Table[Ni,3[{0,0,1,1,2,2,2},t] // PiecewiseForm,{i,0,3}]
⎫
⎧ ⎧
⎫ ⎧
⎫
0
t<0 ⎪ ⎪
0
t<0 ⎪
⎪
⎪
⎪
⎪
⎪
⎨
⎨
⎬
⎬
⎪
⎪
⎪
⎪
2t − 2t2 0 ≤ t < 1
t2
0≤t<1
⎪
⎪
⎪
⎪
,
,
2
⎪
⎪
⎪
⎪
0
1
≤
t
<
2
(−2
+
t)
1
≤
t
<
2
⎪
⎪
⎪
⎪
⎪
⎪
⎭ ⎩
⎭
⎬
⎨ ⎩
0
t
≥
2
0
t
≥
2
⎫ ⎧
⎫
Out[13] := ⎧
0
t < 0 ⎪⎪
0
t<0 ⎪ ⎪
⎪
⎪
⎪
⎨
⎬ ⎨
⎬⎪
⎪
⎪
⎪
0
0
≤
t<1 ⎪
0
0
≤
t
<
1
⎪
⎪
⎪
⎪
,
⎪
⎪
2
2
⎪
⎪
(−1
+
t)
−4
+
6t
−
2t
1
≤
t
<
2
1
≤
t
<
2
⎪
⎪
⎪
⎪
⎪
⎭ ⎩
⎭⎪
⎭
⎩⎩
0
t≥2
0
t≥2
Multiple knots do inﬂuence the shape and properties of basis functions; for
instance, each time a knot is repeated, the continuity of the basis functions whose
support includes this multiple knot decreases. In particular, the continuity of
Ni,k at an interior knot is C k−m−1 [6], m being the multiplicity of the knot. To
illustrate this fact, we compute the unique basis function of order 6:
In[14]:=(f6=N0,6[{0,0,1,1,2,2,2},t]) // PiecewiseForm
⎫⎫
⎧⎧
0
t<0 ⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
1
4
⎪
⎪
⎬
⎨
⎬
⎨⎪
(10 − 7t)t
0≤t<1 ⎪
8
Out[14] :=
1
⎪
⎪
⎪
⎪
⎪
⎪
⎪
− (t − 2)3 23t2 − 32t + 12 1 ≤ t < 2 ⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎭
⎭⎪
⎩⎩ 8
0
t≥2
As we can see, m = 2 for the knot t = 1 and hence N0,6 is C 3 -continuous at
this point. This implies that its third derivative, given by:
In[15]:=(f63=D[f6,{t,3}])//Simplify //PiecewiseForm
⎧⎧
⎫⎫
15
⎨⎨
(4 − 7t)t
0 ≤ t < 1⎬⎬
2
Out[15] :=
⎩ ⎩ − 15 23t2 − 68t + 48 1 ≤ t < 2 ⎭ ⎭
2

200

A. Iglesias, R. Ipanaqu´e, and R.T. Urbina

Fig. 2. (left) 6th-order basis function; (right) its third derivative

Fig. 3. Bspline curve and its control polygon (the set of segments connecting the control
points) for: (left) a non-periodic knot vector; (right) a uniform knot vector

is still continuous but no longer smooth (the continuity of tangent vectors is lost
at this point). Figure 2 displays both the basis function of order 6 (on the left)
and its third derivative (on the right):
In[16]:=Plot[#,{t,0,2},PlotStyle->{RGBColor[1,0,0]},
PlotRange->All]& /@ {f6,f63}
Out[16] := See F igure 2
The most common case of non-uniform knot vectors consists of repeating the
end knots as many times as the order while interior knots appear only once
(such a knot vector is called non-periodic knot vector). In general, a Bspline
curve does not interpolate any of the control points; interpolation only occurs
for non-periodic knot vectors (the Bspline curve does interpolate the end control
points) [6,7]. To illustrate this property, we consider the BSplineCurve command
(whose input consists of the list of control points pts, the order k, the knot vector
knots and the variable var), deﬁned as:
In[17]:=BSplineCurve[pts List,k ,knots List,var ]:=
Module[{bs,n=Length[pts]},bs=Table[Ni,k[knots,var],{i,0,n-1}];
bs.pts // Simplify];
For instance, let us consider a set of 2D control points and two diﬀerent knot
vectors (a non-periodic vector kv1 and a uniform knot vector kv2) and compute
the Bspline curve of order 3:

Symbolic Manipulation of Bspline Basis Functions with Mathematica

201

In[18]:=cp={{0,0},{2,-1},{4,9},{6,10},{8,5}};
In[19]:={kv1,kv2}={{0,0,0,1,2,3,3,3},{1,2,3,4,5,6,7,8}};
In[20]:=BSplineCurve[cp,3,#,t]& /@ {kv1,kv2};
In[21]:=MapThread[Show[Graphics[{RGBColor[1,0,0],Line[pts]}],
ParametricPlot[#1 //Evaluate,#2,PlotRange->All,
PlotStyle->RGBColor[0,0,1],DisplayFunction->Identity],
PlotRange->All,Frame->True,
DisplayFunction->$DisplayFunction]&,{%,{{t,0,3},{t,3,6}}}];
In[22]:=Show[GraphicsArray[%]]
Out[22] := See F igure 3
The curve interpolates the end control points in the ﬁrst case, while no control
points are interpolated in the second case at all. For graphical purposes, the
r−k

Ni,k (t) = 1.

support of the Bspline curves restrict to the points such that
i=0

The next input computes the graphical support for the curves in Fig. 3:
4

Ni,3 [#,t]& /@ {kv1,kv2} // PiecewiseForm

In[23]:=

⎧
⎪
⎪
⎪
⎧
⎪
⎪
⎪
⎪0
⎪⎪
⎪
⎪
⎨1
⎨⎪
1
Out[23] :=
⎪
⎪
⎪
⎪
⎪
⎪
⎪⎩ 1
⎪
⎪
0
⎪
⎪
⎪
⎩
i=0

⎧
0
⎪
⎪
1
(t
−
1)2
⎪
⎫ ⎪
2
t<0 ⎪ ⎪
⎪
1
2
⎪ −t + 6t − 7
⎪ ⎪
0 ≤ t < 1⎪
⎨2
⎬ ⎪
1
1≤t<2 ,
1
⎪
⎪
⎪
2 ≤ t < 3⎪
⎪
⎪
⎭ ⎪
1
⎪
⎪
t≥3
⎪
t2
⎪
+
6t − 17
−
⎪
⎩
2
1
(t
−
8)2
2

⎫⎫
t < 1 ⎪⎪
⎪⎪
⎪
1 ≤ t < 2⎪
⎪
⎪
⎪
⎪
⎪⎪
⎪
2 ≤ t < 3⎪
⎪
⎪
⎪
⎬
⎬⎪
3≤t<4
4 ≤ t < 5⎪
⎪
⎪
⎪
⎪⎪
⎪
5 ≤ t < 6⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
6 ≤ t < 7⎪
⎪
⎭
⎭⎪
7≤t<8

This result makes evident that the Bspline curves in Fig. 3 must be displayed
on the intervals (0, 3) and (3, 6) respectively (see the last line of In[21]).
Acknowledgements. This research has been supported by the Spanish Ministry of Education and Science, Project Ref. #TIN2006-13615.

References
1. Choi, B.K., Jerard, R.B: Sculptured Surface Machining. Theory and Applications.
Kluwer Academic Publishers, Dordrecht/Boston/London (1998)
2. Echevarr´ıa, G., Iglesias, A., G´
alvez, A.: Extending neural networks for B-spline
surface reconstruction. Lectures Notes in Computer Science, 2330 (2002) 305-314
3. Iglesias, A., Echevarr´ıa, G., G´
alvez, A.: Functional networks for B-spline surface
reconstruction. Future Generation Computer Systems, 20(8), (2004) 1337-1353
4. Maeder, R.: Programming in Mathematica, Second Edition, Addison-Wesley, Redwood City, CA (1991)
5. Patrikalakis, N.M., Maekawa, T.: Shape Interrogation for Computer Aided Design
and Manufacturing. Springer Verlag (2002)

202

A. Iglesias, R. Ipanaqu´e, and R.T. Urbina

6. Piegl, L., Tiller, W.: The NURBS Book (Second Edition). Springer Verlag, Berlin
Heidelberg (1997)
7. Rogers, D.F.: An Introduction to NURBS. With Historical Perspective. Morgan
Kaufmann, San Francisco (2001)
8. Wolfram, S.: The Mathematica Book, Fourth Edition, Wolfram Media, Champaign,
IL & Cambridge University Press, Cambridge (1999)

