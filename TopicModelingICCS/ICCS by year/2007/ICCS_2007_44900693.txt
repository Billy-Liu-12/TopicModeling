Hybrid Tag Anti-collision Algorithms in RFID
Systems
Jae-Dong Shin1 , Sang-Soo Yeo2 , Tai-Hoon Kim3 , and Sung Kwon Kim1
1

3

School of Computer Science & Engineering, Chung-Ang University, Seoul, Korea
mulli2@alg.cse.cau.ac.kr, skkim@cau.ac.kr
2
Department of Computer Science & Communication Engineering, Kyushu
University, Fukuoka, Japan
ssyeo@itslab.csce.kyushu-u.ac.jp
Division of Computer Information Communication & Engineering, Ewha Womans
University, Seoul, Korea
taihoonn@empal.com

Abstract. RFID, Radio Frequency Identiﬁcation, technology is a
contactless automatic identiﬁcation technology about which a lot of researches and developments are recently progressing. For this RFID technology to be widely spread, the problem of multiple tag identiﬁcation,
which a reader identiﬁes a multiple number of tags in a very short time,
has to be solved. So far, several anti-collision algorithms are developed.
And those can be largely divided into ALOHA based algorithm and tree
based algorithm. In this paper, two new anti-collision algorithms combining the characteristics of these two categories are presented. And the
performances of the two algorithms are simulated.

1

Introduction

RFID technology is an automatic identiﬁcation technology of contactless method
that identiﬁes electronic tags attached to goods [1]. For this RFID technology
to be widely used, multiple tag identiﬁcation problem must be solved in the
ﬁrst place. This problem is deﬁned as a one-to-many communication problem
between a reader and tags. That has to identify by receiving the information
transmitted from tags without collision in case a multiple number of tags exist
within the identiﬁcation area of a reader.
Tag anti-collision algorithms can be categorized into ALOHA based algorithms and tree based algorithms. ALOHA based algorithms usually refer to the
slotted ALOHA algorithm, an algorithm in which makes only one tag respond
in a slot, in the response of tags, by dividing a time into slot units. On the other
hand, tree based algorithms make trees while performing the tag identiﬁcation
procedure using a unique ID of each tag.
In this paper, two new algorithms combining the framed slotted ALOHA
algorithm, a typical ALOHA based algorithm, and the query tree algorithm, a
typical tree based algorithm, are presented. And the performances of the two
algorithms are compared through simulations with existing other anti-collision
ones used in RFID systems.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 693–700, 2007.
c Springer-Verlag Berlin Heidelberg 2007

694

J.-D. Shin et al.

Forward
link

Request

Return
link

Slot1

Ack
1011

1011

Tag1

Slot2

Slot3

Collision

Ack
0111

Request

0111

0010

Tag2
Tag3

Slot4

0111
1011

Tag4

1110
Frame size = 4

Fig. 1. An example of tag identiﬁcation process in FS-ALOHA algorithm

2
2.1

Related Work
Framed Slotted ALOHA Algorithm

FS-ALOHA algorithm [2] is the most well-known of anti-collision algorithms
used for solving the collision of tags in RFID systems. In FS-ALOHA algorithm,
when a reader requests tags to transmit their ID, it also transmits a frame
size(F S). On receiving ID transmission request from a reader, a tag randomly
decides its own transmission slot within the frame size, and then transmits its
ID after waiting until its turn. On the reader side, three kinds of cases can occur.
To begin with, there is a case receiving no response to the slot. This is referred
to as ”no response”, and the number of no responses in a frame is expressed as
C0 . The second one is a case only one tag has responded. This is referred to as
”identiﬁcation”, and the number of identiﬁcations in a frame is expressed as C1 .
Lastly, there is a case two tags or more attempt to transmit in the same slot. So,
a collision takes place and the data transmitted by tags is lost. This is referred
to as ”collision”, and the number of collisions in a frame is expressed as Ck .
Fig.1 illustrates the operation of FS-ALOHA algorithm using four tags. The
reader requests tags to transmit their ID along with sending 4 as a frame size,
and then each tag selects its own slot and attempts to transmit its ID. In Slot1
and Slot4, only one tag attempted to transmit and thus the reader successfully
identiﬁes Tag2 and Tag3, then send the tags an Ack command informing it has
identiﬁed, in order to keep tags from responding in the next frame. In Slot3,
however, as there is no tag, it becomes no response. While in Slot2, an collision
occurs since Tag1 and Tag4 sent their ID at the same time. Finishing a frame,
the reader requests the retransmission of ID to the remaining tags. At this point,
the number of remaining tags is estimated using the C0 , C1 , and Ck , and then
the next frame begins by changing to a frame size suitable to the number of
remaining tags [3].
2.2

Query Tree Algorithm

QT algorithm [5] is a typical one of tree based algorithms. When requesting tags to transmit their ID, a reader sends a preﬁx Pk of k bits together.

Hybrid Tag Anti-collision Algorithms in RFID Systems

695

IDs = {010, 011, 100}
1

0

1R

100
2R

00

identified

01

collision
no response

3R

010

011

010

011

Query
0
1
00
01
010
011
Response collision identiﬁed no response collision identiﬁed identiﬁed
Fig. 2. An example of identiﬁcation process in QT [4]

Then each tag conﬁrms whether it is the same as the beginning part of its
own ID, and responds its own ID to the reader if it is the same. Likewise as
in FS-ALOHA algorithm, at this point, the three cases, ”no response”, ”identiﬁcation”, and ”collision”, can occur. Here, when a collision takes place, the
reader knows there are many tags with the same preﬁx. In that case, two new
preﬁx Pk+1 of k + 1 bits, which ”0” and ”1” are added at the end of the preﬁx
that has just been transmitted, are made and placed in the queue. The preﬁx
placed in the queue is queried again later. The initial value of the queue is ”0”
and ”1”.
Fig.2 is an example of having executed QT algorithm on the assumption of
three tags whose identifying IDs are ”010”, ”011”, and ”100”, respectively. Preﬁx
”0” and ”1” are set up in the initial queue, and the reader queries tags by taking
out preﬁxes in the queue. For a start, when ”0” is queried, Tags ”010” and
”011” respond at the same time because the preﬁx is the same as their ID. Then
the reader judges there are two tags or more starting with ”0” and enters ”00”
and ”01” in the queue. Thereafter, preﬁx ”1” is taken out from the queue and
queried. Since there is only one tag, ”100”, it is identiﬁed normally to the reader.
The ﬁrst round ends by the method like this. And another round begins for ”00”
and ”01” which has been previously placed in the queue. This algorithm ends
when the queue is empty.

3

Hybrid Anti-collision Algorithms

In FS-ALOHA and QT algorithm explained above, when there are many tags
a reader wants to identify, there exists many tags that will respond at the
same time and thus many collisions take place. This ultimately makes the time
of identifying tags longer. Framed query tree(FQT) algorithm and query tree
ALOHA(QT-ALOHA) algorithm presented in this paper are hybrid forms of
FS-ALOHA algorithm and QT algorithm.

696

J.-D. Shin et al.
Epoch size = 4

Frame1

Frame2

Frame3

Frame4

Fig. 3. An example of identiﬁcation process in FQT algorithm

3.1

Framed Query Tree Algorithm

FQT algorithm divides tags randomly into frame units. And within this unit,
tags are identiﬁed using QT algorithm for them. The actual operation is as
follows:
When requesting tags to transmit their ID, a reader also send an epoch size,
the number of the total frames. Then each tag decides its own participating
frame randomly and responds only when the reader queries its own frame. The
reader executes its identiﬁcation process within each frame using QT algorithm.
However, the reader transmit to tags the number of frame as well as the preﬁx
of ID. Each tag conﬁrms whether the number of frame is the same as its own
selected number of frame, and if it is the same, transmits its own ID when
looking the preﬁx and it is consistent, as in the existing QT algorithm. After
identifying all tags within a frame through QT algorithm identiﬁcation process
in the frame, the reader proceeds to the next frame. This process is carried out
repetitively for every frame.
The example of Fig.3 shows the identiﬁcation process of FQT algorithm when
the number of tags to be identiﬁed is 8 and the epoch size is 4. To begin with,
a reader transmits the epoch size to tags and then each tag selects its own
frame randomly. For three tags which selected Frame1, QT algorithm is used
for identifying tags. Thereafter, tags are identiﬁed while proceeding to the next
frames by the same method.
To determine the most appropriate epoch size is very important in improving
performance. By intuition, an epoch size which a tree depth will not exceed 2
when executing QT algorithm exhibits the best performance. The reason is that
when executing ”0”, ”1” in the initial queue of QT algorithm, the case that two
tags in total, one tag beginning with ”0” and another tag beginning with ”1”,
are identiﬁed is the most ideal. Frame3 is exactly the best case. Assuming the
number of tags to be identiﬁed is N and the epoch size is ES, the most ideal ES
can be expressed as follow:
N = 2 ∗ ES

Hybrid Tag Anti-collision Algorithms in RFID Systems

697

This can be actually veriﬁed through the simulation in section 4.1. But there is
a big problem with this case. For it is diﬃcult to determine an suitable epoch size
from the beginning since the tag identiﬁcation procedure is initiated under the
condition not knowing N , in other words, how many tags are to be identiﬁed.
From that reason, the ﬁnal FQT algorithm uses FFT(First Frame Test). The
FFT begins from a small epoch size and stops its identiﬁcation process when
the ﬁrst frame has collisions exceeding a collision threshold, and then resumes
its identiﬁcation of tags by increasing the epoch size. As it is assumed that all
tags are randomly divided in frames, if many collisions occur in the ﬁrst frame,
remaining frames are more likely to have such a trend.
As shown in the above best case, Frame3 in Fig.3 , a tree can have the best
performance when its tags are two with the depth being 1. Thus a threshold is
needed in order to prevent the tree from becoming deeper than this. The collision
threshold is a constant based on the concept that the more collisions happen,
the deeper the tree becomes. As a result of simulations conducted many times,
we have veriﬁed that an appropriate epoch size is approached faster than any
other cases when this collision threshold is set at 3. In case it is smaller than 3,
even when the epoch size is adequate, the epoch size becomes big and thus may
be passed over. On the contrary, when it is bigger than 3, the epoch size gets too
big and thus the speed to increase to an suitable epoch size becomes too slow.
So the collision threshold is assumed to be 3 in this paper.
3.2

Query Tree ALOHA Algorithm

QT-ALOHA algorithm is another hybrid form of FS-ALOHA and QT algorithm.
FQT algorithm basically implements FS-ALOHA algorithm and uses QT algorithm as actual tag identiﬁcation process. On the other hand, in QT-ALOHA
algorithm, QT algorithm is a big picture, while actual tag identiﬁcation process
progresses with FS-ALOHA algorithm. This operation is as follows:
On requesting tags to transmit their ID, a reader sends a preﬁx and a frame
size together. Then only tags which are consistent with their own preﬁx proceed to FS-ALOHA algorithm with the transmitted frame size. And in the
progress of FS-ALOHA algorithm, if a collision takes place even in a single
slot, it is interpreted as a collision of QT algorithm, and then a new preﬁx is
made and entered in the queue. At this point, a diﬀerence from QT algorithm
is to calculate a frame size [3] to be transmitted next and also place this in the
queue.
Fig.4 is an example of QT-ALOHA algorithm. It is assumed that the number
of tags to be identiﬁed is 8 and the initial frame size begins from 4. In the ﬁrst
round, the reader transmits to tags a preﬁx ”0” and a frame size 4. And collisions
have occurred in the frame. Then, ”00” and ”01” are entered in the queue and
the frame size is determined as 4 through the calculation process of frame size.
And then ”1” is taken out from the queue. When the queue becomes empty, the
algorithm ends.

698

J.-D. Shin et al.

0

No Response

1

Identification
00

000

01

10

11

Collision

001

Query
0
1
00
01
10
11
000
001
Frame Size
4
4
4
4
2
2
2
2
Response collision collision collision identiﬁed identiﬁed no res. identiﬁed identiﬁed
Fig. 4. An example of identiﬁcation process in QT-ALOHA algorithm

4

Simulations

The ID of tags used in simulations was set at a size of 64 bits according to the
international standard and was created using random number generator. And
for raising the reliability of tag simulation results, 100-time simulations were
conducted for every same environment and average it.
4.1

Epoch Size of FQT Algorithm

The ﬁrst simulation was conducted with the epoch size being changing under
the condition of 100 tags. Table.1 shows the results of this simulation. Reviewing
this results, they can be divided into three cases according to the epoch size.
The ﬁrst case is at 32 and 64, close to about 50, an ideal epoch size. This case
demonstrates the best performance as we mentioned in section 3.1. The second
is a case smaller than the ideal epoch size. But in this case, an optimum epoch
size is found by the ﬁrst frame test. And the last is a case bigger than the ideal
epoch size. As there is no operation to reduce the epoch size in FQT algorithm
and thus the initial epoch have to be entirely executed.
Table 1. Performance comparison according to Epoch Size(ES)
Frame Size
16
32
64
128
256

Query
246.6
238.2
241.3
327.2
550.2

C0
55.1
56.9
85.9
193.6
430.6

C1
100.0
100.0
100.0
100.0
100.0

Ck
81.2
78.2
54.1
32.4
18.6

Hybrid Tag Anti-collision Algorithms in RFID Systems

699

6000
18000-6 TypeA
18000-6 TypeB
18000-6 TypeC
Query Tree Protocol
FQT
Q-ALOHA

5000

Total quries

4000

3000

2000

1000

0
0

100

200

300

400

500

600

700

800

900

1000

1100

The number of tags

Fig. 5. Comparison of query-response number

4.2

Performance Comparison Between Presented Algorithms and
Other Ones

The second simulation has compared the presented FQT algorithm and QTALOHA algorithm with other anti-collision algorithms, 18000-6 [6] Type A, Type
B, Type C, and QT algorithm. This comparison sets the query-response number
of times between a reader and tags as a comparison value while changing the
number of tags from 32 to 1,024. On the other hand, in the algorithms based
on FS-ALOHA algorithm, such as Type A, Type C and QT-ALOHA algorithm,
the initial frame size is started arbitrarily at 32 regardless of the number of tags.
The epoch size in FQT algorithm also begins at 32.
Fig.5 and 6 are the results of simulations. 18000-6 Type A and Type C use
the same operating method, FS-ALOHA algorithm. But as the maximum frame
size of Type A is 256, if executing the algorithm at the number of tags higher
than it, a signiﬁcant degradation in performance can be seen. Type C, however, if there occurs many collisions or no-responses even in the middle of a
frame, stops the on-going frame and proceeds to the next frame, thereby improving the performance. Type B uses binary tree algorithm, one of the tree based
algorithms.
The results show that the tree based algorithm typically is lower in the queryresponse number of times than the ALOHA based algorithms. For tags identiﬁed
in a frame of the ALOHA based algorithm send tags a command they have been
identiﬁed so they cannot be included in the identiﬁcation process of the next
frame.
Fig.6 illustrates how many queries-responses are needed in order to identify
one tag. Looking into this, it can be seen that FQT algorithm queries less for
identifying one tag than any other algorithms. Its performance improvement is
10 to 50 percent of times than many other existing anti-collision algorithms.

700

J.-D. Shin et al.
6

5.5

18000-6 TypeA
18000-6 TypeB
18000-6 TypeC
Query Tree Protocol
FQT
Q-ALOHA

Quries per a tag

5

4.5

4

3.5

3

2.5

2
0

100

200

300

400

500

600

700

800

900

1000

1100

The number of tags

Fig. 6. Comparison of query-response number needed for identiﬁcation per tag

5

Conclusions

Two new algorithms combining the characteristics of the two categories, ALOHA
based and tree based algorithm, have been presented in this paper. FQT algorithm of the two, in particular, has shown a big performance improvement. In
the near future, methods to ﬁnd a faster optimum epoch size in FQT algorithm
are to be studied.

Acknowledgement
This work was supported by grant No. R01-2005-000-10568-0 from the Basic
Research Program of the Korea Science & Engineering Foundation.

References
1. K. Finkenzeller, ”RFID handbook”, John Wiley & Sons, 1999.
2. F. C. Schoute, ”Control of ALOHA Signalling in a Mobile Radio Trunking System”, International Conference on Radio Spectrum Conservation Techniques, IEEE,
pp.38-42, 1980.
3. H. Vogt, ”Multiple object identiﬁcation with passive RFID tags”, In IEEE International Conference on Systems, Man and Cybernetics (SMC’02),October 2002.
4. J. Myung and W. Lee, ”An Adaptive Memoryless Tag Anti-Collision Protocol for
RFID Networks”, IEEE 24th Conference on Computer Communications (INFOCOM’05), March 2005.
5. C. Law, K. Lee, and K. Siu, ”Eﬃcient Memoryless Protocol for Tag Identiﬁcation”,
4th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pp.75-84, ACM, August 2000.
6. ISO/IEC 18000-6:2004/Amd 1:2006, International Organization for Standardization, June 2006.

