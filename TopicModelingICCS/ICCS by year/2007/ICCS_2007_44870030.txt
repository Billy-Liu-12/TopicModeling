Variable Relaxation Solve
for Nonlinear Thermal Conduction
Jin Chen
Princeton Plasma Physics Laboratory, Princeton, NJ, USA
jchen@pppl.gov

Abstract. Eﬃcient and robust nonlinear solvers, based on Variable Relaxation, is developed to solve nonlinear anisotropic thermal conduction
arising from fusion plasma simulations. By adding ﬁrst and/or second
order time derivatives to the system, this type of methods advances corresponding time-dependent nonlinear systems to steady state, which is
the solution to be sought. In this process, only the stiﬀness matrix itself
is involved so that the numerical complexity and errors can be greatly
reduced. In fact, this work is an extension of implementing eﬃcient linear
solvers for fusion simulation on Cray X1E.
Two schemes are derived in this work, ﬁrst and second order Variable Relaxations. Four factors are observed to be critical for eﬃciency
and preservation of solution’s symmetric structure arising from periodic
boundary condition: mesh scales, initialization, variable time step, and
nonlinear stiﬀness matrix computation. First ﬁner mesh scale should be
taken in strong transport direction; Next the system is carefully initialized by the solution with linear conductivity; Third, time step and relaxation factor are vertex-based varied and optimized at each time step;
Finally, the nonlinear stiﬀness matrix is updated by just scaling corresponding linear one with the vector generated from nonlinear thermal
conductivity.

1

Introduction

In plasma physics modeling[1], the steady state of nonlinear anisotropic thermal
conduction can be modeled by the following nonlinear elliptic equation
∂
∂T
∂T
∂
(κx
)+
(κy
)=s
∂x
∂x
∂y
∂y

(1)

on a 2D rectangular domain ABCD: [0, Lx ]×[0, Ly ] with four vertexes at A(0, 0),
B(0, Lx ), C(Lx , Ly ), and D(0, Ly ). Lx < Ly . The coordinate is given in Cartesian
(x, y) system. The magnetic ﬁeld is directed in the y direction, and accordingly
we can set κx = 1 and κy as an nonlinear function of the temperature T , parallel
to magnetic ﬁeld line. Therefore we can omit κx and denote κy by κ to make
its meaning more clear. The periodic boundary condition is set on edges AD and
This work is supported by DOE contract DE-AC02-76CH03073.
Y. Shi et al. (Eds.): ICCS 2007, Part I, LNCS 4487, pp. 30–37, 2007.
c Springer-Verlag Berlin Heidelberg 2007

Variable Relaxation Solve for Nonlinear Thermal Conduction

31

BC, and Dirichlet boundary conditions are set on edges AB and CD. This setup
allows us to separate the eﬀects of grid misalignment from the boundary eﬀects.
The upper boundary, CD, represent the material surface where the temperature
is low, and the boundary condition there is TCD = 1. At the lower boundary,
AB, the inﬂow boundary condition is TAB (x) = 10 + 40e(−|x−Lx/2|) .
Finite element discretization[2] generates the following nonlinear system
(Sxx + Syy (T ))T = M s.

(2)

M is the mass matrix. Sxx and Syy (T ) are the stiﬀness matrices contributed
2
∂
(κ ∂T
by operator ∂∂xT2 and ∂y
∂y ), respectively. T is the temperature proﬁle to
be solved. When κ is linear, Syy (T ) reduced to κ Syy . Newton-Krylov method
can be used to solve system (2). But usually it is quite expensive to update
Jacobian at each iteration. Although the Jacobian-free variation[3][4] is more
eﬃcient, information of the Jacobian is still needed to form the preconditioner
and preconditioning is expensive.
In this work we present an alternative way, Variable Relaxation[5], to solve the
nonlinear system (1). This is a class of iterative methods which solve the elliptic
equations by adding ﬁrst and/or second order time derivative terms to eq.(1)
to convert it to nonlinear parabolic or hyperbolic equation and then marching
the system to steady state. In this marching process, only the nonlinear stiﬀness
matrix Syy (T ) itself is involved and needs to be updated regularly.
We have been using this type of idea on Cray X1E to design eﬃcient linear
elliptic solvers for M3D code[6]. Although It takes longer to converge, each iteration is much cheaper than other iterative solvers[7] so that it still wins on
vector architecture machines.
The nonlinear iteration can be completed in two steps:
Step 1: solve eq.(1) with linear conductivity 100 ≤ κ ≤ 109 .
Step 2: solve eq.(1) with nonlinear conductivity κ = T 5/2 .
The solution from ”Step 1” is used as an initial guess for ”Step 2”. Experiments will show that this is a very powerful strategy to accelerate convergence.
We will also demonstrate how to choose artiﬁcial time step from CFL condition and relaxation factor from dispersion relation to achieve optimization. An
eﬃcient way to generate the stiﬀness matrix is also to be discussed in order to
preserve the symmetry structure of the solution as a result of periodic boundary
condition.

2

First Order Relaxation and Numerical Schemes

The so called ﬁrst order relaxation is obtained by adding a ﬁrst order time
derivative term to eq. (1)
∂2T
∂
∂u
∂T
=
(κ
).
+
∂t
∂x2
∂y
∂y

(3)

32

J. Chen

Discretizing it in temporal direction by ﬁnite diﬀerence and spatial directions as
in system (2), we have
(

1
1
M − θSnon )T k+1 = [ M + (1 − θ)Snon )]T k − M s.
δt
δt

(4)

0 ≤ θ ≤ 1. When θ = 0, the system is fully explicit; when θ = 1, the system
is fully implicit; when θ = 12 , the system is stable and has smallest truncation
error as well. Snon = Sxx + Syy (T ). δt is the artiﬁcial time step which should be
chosen to be small enough to make the scheme stable and big enough to allow
the system approach steady state quickly. According to CFL condition, δt is
related to mesh scales δx in x direction and δy in y direction by
δt =

1
2

1
δx2

1
+κ

1
δy 2

=

δxδy
4

δy
δx

2
+κ

≡

δx
δy

δxδy ¯
δt.
4

(5)

¯ is symmetric in (δx, δy) and gets maximized at
Obviously, when κ = 1, δt
¯ with respect to δx and δy
δx = δy. More can be derived if we diﬀerent δt
2

δy
1
δy
¯
− δx
2 + κ δy
∂ δt
1
δx2 − κ
= −2 δy
=
2
,
δy
2
2
∂δx
δy ( δx
( δx + κ δx
+ κ δx
δy )
δy )
1
¯
∂ δt
δx − κ
= −2 δy
∂δy
( δx + κ

δx
δy 2
δx 2
δy )

2

=2

δy
δx κ − δx2
.
δx 2
δy 2 ( δy
δx + κ δy )

¯

¯

∂ δt
∂ δt
When κ > 1, most likely we will have ∂δx
< 0 and ∂δy
> 0. This suggests that
δx should be taken as large as possible, while δy as small as possible.
The convergence of scheme (4) can be analyzed in the following way. Given
nπy
the form of transient solution of eq.(3) as u˜ = e−γt sin mπx
Lx sin Ly , the operator
∂2
∂x2

2

2

∂
∂
n
+ ∂y
(κ ∂y
) has eigenvalues λmn = π 2 ( m
L2x + κ L2y ). m and n are the mode
numbers in x and y directions, respectively. Then the decaying rate is −λ11 and
the corresponding decaying time can be found by

t=

1
1
= 2
λ11
π

1
L2x

1
+κ

1
L2y

.

The number of iterations needed for convergence can be predicted by
Nits

2
t
= 2
≡
δt
π

1
δx2
1
L2x

+κ
+κ

1
δy 2
1
L2y

2
= 2
π

Nx2
L2x
1
L2x

+κ
+κ

Ny2
L2y
1
L2y

When κ → ∞
Nits →

2 2
1 Ny
Ny ≈
(Nx Ny ) ≡ c(Nx Ny ).
2
π
5 Nx

.

Variable Relaxation Solve for Nonlinear Thermal Conduction

33

(Nx Ny ) is the number of unknowns. After some experiments, we found the optimized coeﬃcient should be c = 0.64 for the problem we are studying. Also from
the following expression we found the number of iterations increases as κ gets
larger
2 (Ny2 − Nx2 )
dNits
= 2 Ly
>0
dκ
π ( + κ Lx )2
Lx

Ly

as long as δy ≤ δx.

3

Second Order Relaxation and Numerical Schemes

Besides the addition of the ﬁrst order derivative term in eq. (3), the second order
relaxation is obtained by adding a relaxation factor, τ , and a second order time
derivative term to eq. (1)
∂2T
∂T
∂ 2 u 2 ∂u
∂
=
(κ
).
+
+
2
2
∂t
τ ∂t
∂x
∂y
∂y

(6)

Again it can be discretized and rearranged as
k+1
[(1 + δt
=
τ )M − θSnon ]T
k−1
2
k
2
)M
T
+
[2M
+
δt
(1
−
θ)S
−(1 − δt
non ]T − δt M s.
τ

The CFL condition can be expressed as δt2 ( δ12 + κ
x

1

δt ≤

1
δx2

=

1
δy2

+κ

√
δxδy
δy
δx

+κ

δx
δy

1
δy2 )

(7)

≤ 1. Therefore,
√
2

√
δxδy
= √
2

δy
δx

+κ

.

(8)

δx
δy

The relaxation factor can be found again by looking for the transient solution
of eq.(6). The decay rates satisfy γ 2 − τ2 γ + λmn = 0, or γ = τ1 ± ( τ12 − λmn )1/2 .
For optimal damping, we choose τ 2 =
1

τ=
π

1
L2x

+κ

1
L2y

1
λ11

τ=

L2

2

π
= 1/[( L2y + κ ) L
2 ], i.e.,
x

Lx Ly
√
2π

y

√
2
Ly
Lx

(9)

Lx
Ly

+κ

and the number of iterations for convergence can be predicted by
Nits ≡

Ö
= π1 Ö

τ
δt

1
δx2
1
L2
x

1
2
δy

+κ

+κ

1
L2
y

×
= π1 Ö

2
Nx
L2
x

+κ

1
L2
x

+κ

2
Ny
L2
y
1
L2
y

√ 25 2
1
9 Nx +κ
= π √
25
9

Ö
Ny2

+κ

=

1
π

25 Nx
9 Ny

√ 25

When κ → ∞
Nits → (

1
π

Ny
) Nx Ny ≡ c
Nx

Nx Ny .

9

+κ
+κ

Ny
Nx

Nx Ny

34

J. Chen

Experiments show that the optimal coeﬃcient would be c = 0.6. The number
of iteration increases as the conductivity κ increases. This can be understood
from the following expression.
3Ny2 + κ Ny2 −

dNits
1
=
dκ
π

4

3Nx2 + κ Ny2

3+κ

> 0.

Variable Relaxations

When κ is an nonlinear function of T , κ changes as Tijk changes at every vertex
ij and every time step k. Therefore, time step and relaxation factor changes as
well. This is why the name ”Variable” is given. From now on, schemes (4) is
called VR(4), scheme (7) is called VR(7), and κ is rewritten as κkij in nonlinear
case. From the analysis given in the previous two sections, we have
δtkij =

1
2

1
δx2

δxδy
1
1 =
k
4
+ κij δy2

2
δy
δx

(10)

+ κkij δx
δy

for VR(4) and
δtkij

≤

√

1
1
δx2

+ κkij δ12

=

y

τijk

=

δy
δx

δxδy
+ κkij δx
δy

Lx Ly
√
2π

√
δxδy
= √
2

√
2
δy
δx

√
2
Ly
Lx

(11)

+ κkij δx
δy
(12)

x
+ κkij L
Ly

for VR(7).

5

Numerical Issues

In practical application due to nonuniform meshes and nonlinearity of the problem, δt and the damping factor τ are modiﬁed by scaling factors tscale and τscale .
The optimal δt and τ in both cases can be found by tuning these two parameters.
This is summarized in the following table:
VR(4) for linear problem
δt =

δxδy
4

2
δy
δx +κ

δx
δy

· tscale

VR(7)
for linear
problem
√
√
δxδy Õ
2
√
δt =
· tscale
δy
δx
2
δx +κ δy
√
√
Lx Ly
τ = √2π Ö L 2
· τscale
y
Lx

+κ

Lx
Ly

VR(4) for nonlinear problem VR(7)√for nonlinear
problem
√
δxδy Õ
2
δtkij = √
· tscale
δy
k δx
2
δx +κij δy
√
δxδy
√
δtkij = 4 δy +κ2k δx · tscale k
Lx Ly
ij δy
δx
τij = √2π Ö L 2
· τscale
y
Lx

Lx
+κk
ij Ly

Variable Relaxation Solve for Nonlinear Thermal Conduction
δxδy
4

is the stability criterion for VR(4) when κ = 1.

extra term if κ is larger than one or nonlinear.
for VR(7) when κ

= 1. Õ

√

2

or Õ

√

δy

δx
√
δxδy
√
2

2
+κ

δx
δy

or

2
δy
k δx
δx +κij δy

35

is the

is the stability criterion

2

is the extra term if κ is larger
√
Lx Ly
than one or nonlinear. For the relaxation factor τ , √2π is the criterion for

VR(7) when κ = 1 and

δy
δx +κ

Ö

δx
δy

√
2

Ly
Lx

+κ

or
Lx
Ly

δy
k δx
δx +κij δy

Ö

√

Ly
Lx

2

is the extra term when κ is

Lx
+κk
ij Ly

larger than one or nonlinear.
δx and δy are chosen based on the guidelines discussed in the previous sections
so that as an example we have Nx = (16 − 1) ∗ 2 + 1 is 3 times less than
Ny = (51 − 1) ∗ 2 + 1. Nx and Ny are the number of corresponding grid points in
x and y directions. In this case VR(4) converged in 29708 number of iterations
at optimal tscale = 0.174; while VR(7) converged in 1308 number of iterations
at optimal tscale = 0.41, τscale = 0.87. From here we can say that VR(7) is more
than 20 times faster than VR(4). Hence from now on we will only use VR(7).
Although iteration numbers seems to be large, each iteration is very cheap even
compared to JFNK which requires preconditioning.
Next let’s study the impact of initializing on convergence. As mentioned before, the nonlinear process can be initialized by the solution from the linear
system with constant κ . Given the linear solution with diﬀerent size of κ , the
number of iterations for the nonlinear system to reach steady state is given in
the following table. We found as long as the linear solution has κ ≥ 2, the nonlinear convergence doesn’t have much diﬀerence. It only diverges when a guess
has κ = 1.
κ
1
2
3
4
5
6 7,8,9,101 ∼ 109
Nits diverge 1313 1310 1309 1309 1309
1308
The marching process is even accelerated by varying δt and τ at each vertex
ij and every time step k. We found the iteration won’t even converge if uniform
δt and τ are used.
Finally we give an eﬃcient approach to update the nonlinear stiﬀness matrix
Syy (T ) at each time step. The numerical integration has to be carefully chosen in
order to keep the symmetric structure as a result of periodic boundary condition.
Generally
∂Ni ∂Nj
dσ
κ
Syy (T ) = −
∂y ∂y
where Ni and Nj are the ith and jth base functions in ﬁnite element space.
On each triangle, assuming n is the index running through all of the collocation
points, then one way to formulate Syy (T ) at kth time step would be
ij
Syy
(T ) =

w(n)κk (n)
n

∂Nj
∂Ni
(n)
(n)J(n)
∂y
∂y

36

J. Chen

where w(n), κk (n), and J(n) are the corresponding weight, conductivity, and
∂Nj
i
Jacobian at nth point. ∂N
∂y (n) and ∂y (n) are also valued at these points as
well. As a function of T , κk (n) can be found by
(Tlk )5/2 Nl (n) or

[Tlk Nl (n)]5/2

l

l

where l is the index running through all of the vertexes on each triangle. But
experiments show that the symmetric structure is destroyed by the above two
formulations. Then we worked out the following formula
ij
(T ) = κkij
Syy

wn
n

∂Nj
∂Ni
(n)
(n)J(n)
∂y
∂y

which leads to
Snon = Sxx + B k Syy
where B k is a vector with component Bij = κkij at each vertex given by ij.
Therefore, we conclude that the nonlinear stiﬀness matrix Syy can be updated
by just scaling the linear stiﬀness matrix Syy using nonlinear vector B. This
approach not only saves computation complexity, but also preserves the symmetric structure of the periodic solution. The nonlinear solution is shown in Fig.
1 again in (x, y) coordinate system. The linear initial guess with κ = 2 × 104
given in the left plot is applied.
4

5/2

κ||=2 × 10

κ||=T

1

1

5

0.9

5
10
15
20

0.9

25
10

0.8

0.7

15

0.7

0.6

20

0.6

30

0.5

25

35

0.4

0.4
0.3

30

0.1

0.4

0.6

0

0

0.2

0.4

40

0.2

0.1

40

45

45

40
0

0.2

35

35

45

0.2

40

0.3

0

40

0.5

35

30

0.8

0.6

Fig. 1. Nonlinear solution at Nx=31, Ny=101, tscale = 0.41, τscale = 0.87. VR(7) is
stable when tscale ≤ 0.41 ; VR(4) is stable when tscale ≤ 0.174.

Variable Relaxation Solve for Nonlinear Thermal Conduction

6

37

Conclusions

As an extension of developing eﬃcient linear elliptic solvers for fusion simulation
on Cray X1E, nonlinear solver, based on Variable Relaxation, is constructed by
by adding ﬁrst and/or second order time derivative to the nonlinear elliptic equation and marching the resulting time-dependent PDEs to steady state. Instead
of Jacobian, Only the stiﬀness matrix itself is involved and needs to be updated
at each iteration.
Two schemes has been given, ﬁrst and second order Variable Relaxations. four
numerical issues has been fully discussed: The mesh scale ratio, nonlinear process
initialization, variable time step and relaxation factor, eﬃcient calculation of the
nonlinear stiﬀness matrix. In summary, the mesh needs to be ﬁner in direction
with strong conductivity; convergence can be sped up by using the solution
from corresponding linear system as an initial guess; time step and relaxation
factor has to be varied at each grid point and every time step as well; only
the nonlinear vector, used to update the nonlinear stiﬀness matrix, needs to be
updated regularly. Therefore, the only computation consists of renewing δtkij ,
τijk , and B k at each iteration, and apparently these approaches give an eﬃcient
and robust algorithm to solve nonlinear systems.

References
1. W Park et al, Nonlinear simulation studies of tokamaks and STs, Nucl. Fusion 43
(2003) 483.
2. J Chen, S C Jardin, H R Strauss, Solving Anisotropic Transport Equation on Misaligned Grids, LNCS 3516, pp. 1076-1079 (2005).
3. D A Knoll, D E Keyes, Jacobian-free Newton-Krylov methods: a survey of approaches and applications, J comp. Phys. 193(2004) 357-397.
4. A Ern, V Giovangigli, D E Keyes, M D Smooke, Towards polyalgorithmic linear
system solvers for nonlinear elliptic problems, SIAM J Sci. Comput. 15(1994) 681703.
5. Y T Feng, On the discrete dynamic nature of the conjugate gradient method, J
comp. Phys. 211(2006) 91-98.
6. J Chen, J Breslau, G Fu, S Jardin, W Park, New Applications of Dynamic Relaxation in Advanced Scientiﬁc Computing, proceedings of ISICS’06 Conference held
at Dalian, China, Aug 15-18, 2006.
7. Y Saad, Iterative Methods for Sparse Linearsystems, PWS Publishing Company,
(1996).

