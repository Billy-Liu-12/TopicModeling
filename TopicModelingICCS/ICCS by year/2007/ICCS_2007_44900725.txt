VPDP: A Service Discovery Protocol
for Ubiquitous Computing
Zhaomin Xu, Ming Cai, and Jinxiang Dong
Institute of Artificial Intelligence, Zhejiang University, 310027 Hangzhou, China
{xzm,cm,djx}@zju.edu.cn

Abstract. Many service discovery protocols have been proposed by far
to support ubiquitous computing. But they don’t always apply to ubiquitous
computing because of their confines. In this paper, we propose a service
discovery protocol named VPDP adopted in our DOM-based middleware architecture, which aims to support as many types of ubiquitous environments as possible. VPDP is important for our middleware
architecture to accommodate heterogeneity and uncertainty of ubiquitous
computing environments.
Keywords: Ubiquitous computing, Service discovery, Volunteer, Middleware.

1 Introduction
The essence of the vision about ubiquitous computing was the creation of
environments saturated with computing and communication capability, yet gracefully
integrated with human users [1]. The technological advances necessary to build a
ubiquitous computing environment fall into four broad areas: devices, networking,
middleware, and applications [2].
Service discovery is essential for ubiquitous computing environments to
gracefully integrate networked computing devices. Service discovery protocols
are designed to minimize administrative overhead and increase usability. They
can also save ubiquitous system designers from trying to foresee and code all
possible interactions and states among devices and programs at design time. [3].
In this paper, we propose a service discovery protocol called VPDP (Ubiquitous
Discovery Protocol based on Volunteers) for ubiquitous computing, which aims
to support as many types of ubiquitous environments as possible. This protocol
can accommodate heterogeneity and uncertainty of ubiquitous computing
environments. Volunteers in our middleware architecture are middleware nodes
with less limited resources.
The rest of this paper is structured as follows: Section 2 discusses our service
discovery protocol including volunteers election, service registration and service
discovery. Section 3 shows the experimental result of service discovery using VPDP.
Finally, we make a conclusion of this paper and describe our future work.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 725–728, 2007.
© Springer-Verlag Berlin Heidelberg 2007

726

Z. Xu, M. Cai, and J. Dong

2 Ubiquitous Discovery Protocol Based on Volunteers
2.1 Volunteers Election
Volunteers in VSD [5] are elected within a one-hop network range using broadcasts.
In our middleware architecture, volunteers are elected from middleware nodes within
the range of a certain number of hops using multicasts. The number of hops (denoted
as ‘TTLs’) is defined as a system parameter which can be changed by system
administrators or by the middleware system automatically. The election method of
volunteers in our middleware architecture is similar to VSD, but we have made a few
modifications to its parameters. Fig. 1 shows the node state transition diagram of
VPDP.

Fig.1. Node state transition diagram

Unlike VSD, in our middleware architecture, when a node repeats the solicit
process after it can’t register with k volunteers within a given time period, it will try
to register with max {(k / 2), kmin} volunteers. Although at the start all nodes try to
register with k volunteers, they may end up with different number of local volunteers
that they have registered with. In other words, each client may have different number
of local volunteers and each volunteer may maintain different number of the same
directory entries for different clients.
In VSD, each node sets its own retrial times (denoted as ‘ω’) by considering its
willingness, degree of mobility and amount of resource [5]. The lower value of ω the
higher chance a node can take to be a volunteer. In our middleware architecture, each
node turns on or restarts with the system parameter ω set to a default value, which
will be changed by a evaluation function over time.
The evaluation function of ω depends on three parameters: the total running time in
hours (TRTh) of the node since it turns on or restarts, changed times of the network
address (CTNA) of the node, and the number of services (ns) on the node. The
evaluation function is invoked periodically or when some events happen (such as
network address changed, new services mounted on the node). TRTh and CTNA
indicate the degree of mobility of a node. The number of services indicates the

VPDP: A Service Discovery Protocol for Ubiquitous Computing

727

amount of resources on the node. The willingness of a node is hard to evaluate. We
use the system parameter user willingness (UW, a value between 0 and 1, high value
indicates high willingness) and ns to evaluate a node’s willingness. Currently, the
evaluation function used in our middleware architecture is defined as below.

ω=

1
UW × ( ns + 1)

×

CTNA + 1
TRTh / 7

×

6
ns + 1

(1)

2.2 Service Registration and Discovery

When a SP registers its services, it sends service advertisements to its local volunteers
one by one through unicasts. A SP will register its services with at least kmin
volunteers, which form a logical overlay network. Volunteers extract service
information from service advertisements received and store services’ information in
their service cache. Volunteers’ announcements contain advertisements about their
cached services, so that service advertisements can spread over the network.
A service requestor (SR) can send its service request messages if it has at least kmin
local volunteers. There are two types of queries as stated in paper [4] in our
middleware architecture: one query-one response (1/1) and one query-multiple
responses (1/n). In 1/n queries, the service discovery process is almost the same as
that described in paper [5].
In 1/1 queries, the SR selects a volunteer in its local volunteers list and sends a
service request to it. If the SR gets a service response, it can then directly interact with
the SP. Otherwise if it can’t get any response within a certain amount of time, it will
send the service request to the next volunteer in its local volunteers list. If all the
volunteers have been tried and the SR still can’t get any service response, the
discovery process fails. On receiving a service request, a volunteer will lookup
services in its service cache. The volunteer will send the service request to the first
matched SP. If the SP accepts the request, it will send an acknowledgement to both
the SP and the volunteer. The service discovery process ends successfully. Else if the
SP doesn’t respond within a certain amount of time, the volunteer will try to find
another matched SP in its service directory. If the volunteer can’t find any matched
SP, it will forward the service request to its nearby volunteers. The discovery process
will continue in this way until a matched SP is found or TTLr <= 0 (the time to live
field of the request message) or all neighbor volunteers have been tried.

3 Experiment
We have developed a prototype of our DOM-based middleware architecture using
Eclipse 3 and J2SDK 1.4.2. The experiment is taken in our campus network which is
composed of many Local Area Networks. We have tested the mean response time of a
service request within different number of nodes. Fig. 2 shows the results which
indicate that VPDP is very efficient in service discovery.

728

Z. Xu, M. Cai, and J. Dong

250
Mean Response Time(ms)

200

193.88

) 150
s
m
(
e
m
i
T 100

154.19
113.46
63.39

50

33.15

0
4

8

12
Node number

16

20

Fig. 2. Results of service discovery using VPDP

4 Conclusions and Future Work
Service discovery is essential for ubiquitous computing environments to gracefully
integrate networked computing devices. We have discussed the VPDP protocol
adopted in our middleware architecture, which aims to support as many types of
ubiquitous environments as possible. Experimental results show that VPDP is
efficient in service discovery, which is important for our middleware architecture to
accommodate heterogeneity and uncertainty of ubiquitous computing environments.
In the future, we will keep on improving VPDP to realize efficient service migration.

References
1. M., Satyanarayanan: Pervasive Computing: Vision and Challenges. IEEE Personal
Communications, 8(4) (2001) 10-17
2. D., Saha, A., Mukherjee: Pervasive computing: a paradigm for the 21st century. Computer,
36(3) (2003) 25-31
3. Feng, Zhu, Matt, W., Mutka, Lionel, M., Ni: Service discovery in pervasive computing
environments. IEEE Pervasive Computing, 4(4) (2005) 81-90
4. Celeste, Campo, Carlos, García-Rubio, Andrés, Marín López, Florina, Almenárez: PDP:
A lightweight discovery protocol for local-scope interactions in wireless ad hoc networks.
Computer Networks, 50(17) (2006) 3264-3283
5. M.J., Kim, M., Kumar, B.A., Shirazi: Service Discovery using Volunteer Nodes for
Pervasive Environments. Proceedings of International Conference on Pervasive Services,
(2005) 188-197

