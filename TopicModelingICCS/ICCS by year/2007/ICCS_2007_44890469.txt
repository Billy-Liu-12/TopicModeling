From Mathematics to Software Engineering:
Introducing Category Theory into the Computer
Science Curriculum
Yujun Zheng1,2,3 , Haihe Shi1,2 , and Jinyun Xue1,2
1

Institute of Software, Chinese Academy of Sciences, 100080 Beijing, China
yujun.zheng@computer.org
2
Coll. Computer Inf. & Eng., Jiangxi Normal University, 330027 Nanchang, China
3
Graduate University of the Chinese Academy of Sciences, 100080 Beijing, China

Abstract. Category theory, with its increasing role in computer science,
has proved useful in the investigation of programming languages and
other theoretical aspects of software engineering. As a bridge-building exercise, we introduce the category theory course into the computer science
curriculum, the purpose of which includes building a uniﬁed framework to
generalize the discrete structures of mathematical courses and providing
an environment for formulating concepts of other software engineering
courses. We develop a teaching schema, summarize our experiences, and
give some suggestions for pedagogical techniques for the course.

1

Introduction

Category theory has developed rapidly, and its inﬂuence is being felt in many
parts of computer science including the design and implementation of programming languages, models of concurrency, type theory, polymorphism, speciﬁcation language, constructive logic, automata theory, and the development of
algorithms [1]. Nevertheless, as a relatively young branch of pure mathematics, category theory is mainly incorporated into the mathematical curriculum
for postgraduate education in a handful of universities, and it is widely supposed that the subject could only be understood by those with nontrivial facts
in algebraic topology.
The motivation for this paper derives from our experience in introducing the
category theory course for graduates in computer science over the last three
years. Its aim is not to work through the mathematical derivations and proofs
of the abstract theory, but to provide a high-level, categorial understanding of
mathematical constructions in various aspects of computer science and software
engineering. The key role of the course in the curriculum can be divided into
two parts:
Supported in part by grants from NNSF (No. 60573080) and NGFR 973 Program
(No. 2003CCA02800) of China.
Y. Shi et al. (Eds.): ICCS 2007, Part III, LNCS 4489, pp. 469–476, 2007.
c Springer-Verlag Berlin Heidelberg 2007

470

Y. Zheng, H. Shi, and J. Xue

1. Building a sound, uniﬁed framework that generalizes the structures learned
from the preceding mathematical courses such as discrete mathematics, set
theory and graph theory.
2. Providing a mathematical environment to formulate uniform deﬁnitions of
the preceding, following, or concurrent software engineering courses including data structures and algorithms, object-oriented design, programming
languages and formal methods.
The above two parts are described respectively in Section 2 and Section 3.
Section 4 proposes some strategies and suggestions for teaching the category
theory course, and Section 5 concludes with discussion.

2

Generalization of Mathematical Structures

The introductory category theory course usually starts with a review of discrete
mathematics, from which students have learned a number of fundamental discrete structures and gained a basic knowledge of the mathematical foundations
for computer science. First, elementary deﬁnitions in category theory should be
introduced in terms of ordinary set theory: collections are sets, operations are
set-theoretic functions, and equalities are set-theoretic identities. Second, the
fundamental notions of category theory is that of a monoid: a set with a binary
operation of multiplication that is associative and that has a unit; a category
itself can be regarded as a sort of generalized monoids [2]. In this way, students
can quickly have a self-contained and structural understanding of categories.
Alternatively, category theory deals in an abstract way with structures, i.e.,
oﬀers a highly formalized language for expressing general properties and analyzing relations between classes of mathematical structures. By presenting a variety
of categories of familiar structures, we can give students a uniﬁed, categorial understanding of mathematical structures. Those typical categories include:
–
–
–
–

–
–
–
–
–
–

N with natural numbers as objects and ordering n → n + 1 as morphisms.
Rel with sets as objects and relations as morphisms.
Set with sets as objects and total functions between sets as morphisms.
Poset with pre-ordered sets as objects and monotonic functions as morphisms. A pre-order is a category where there is at most one arrow between
any two objects.
Mon with monoids as objects and morphisms of monoids as (categorial)
morphisms. A monoid is a category with one object.
Grp with groups as objects with morphisms of groups. A group is a category
with one object in which each arrow has an inverse under composition.
Ab with additive abelian groups as objects with morphisms of such.
Rng with rings as objects with the ring morphisms preserving units.
K -Mod with modules over the communicative ring K as objects and K linear maps as morphisms.
Top with topological spaces as objects and continuous functions as morphisms.

From Mathematics to Software Engineering

471

Next, we can show how to use the categorial approach to achieve the generality
of various concepts; that is, many diﬀerent formalisms and structures may be
proposed for what is essentially the same concept [3] in the language of categories.
For example, the coproduct of any two objects exists in many categories, where
it has various names as follows:
–
–
–
–

Set: disjoint union of sets.
Grp: free product.
Ab: direct sum A B.
Top: disjoint union of topological spaces.

3

Theoretical Standardization of Software Engineering
Methods

3.1

Data Structures

After a generalization of mathematical structures, we should move towards data
structures frequently used in computer programming. While the traditional set
theory generally considers concrete implementations, category theory describes
objects more as abstract data types, or speciﬁcations that are independent of
particular implementations. Category localization semantics for speciﬁcations
by Goguen [4]1 need to be introduced, followed by the exploration of category
theory as a framework for designing, understanding, manipulating and evolving
data structures. For example, speciﬁcations of data structures Preorder and Antisymmetry can be deﬁned as follows:
Preorder : sort E
op ≤: E, E → Boolean
axiom reﬂexivity: x ≤ x
axiom transitivity: x ≤ y ∧ y ≤ z ⇒ x ≤ z
Antisymmetry: sort E
op ≤: E, E → Boolean
axiom antisymmetry: x ≤ y ∧ y ≤ x ⇒ x = z
An initial object in the category SPEC can be worked out as a speciﬁcation
that shares the properties of above two speciﬁcation:
BinaryRelation: sort E
op ≤: E, E → Boolean

1

In brief, a speciﬁcation is the ﬁnite presentation of a theory, and a signature provides
the vocabulary of a speciﬁcation; SPEC is a category with speciﬁcations as objects.

472

Y. Zheng, H. Shi, and J. Xue

By constructing the morphisms f : BinaryRelation → P reorder and g :
BinaryRelation → Antisymmetry and computing the colimit of f and g, the
composition of Preorder and Antisymmetry can be mechanically generated:
Partial Order : sort E
op ≤: E, E → Boolean
axiom reﬂexivity: x ≤ x
axiom transitivity: x ≤ y ∧ y ≤ z ⇒ x ≤ z
axiom antisymmetry: x ≤ y ∧ y ≤ x ⇒ x = z
In a word, under the categorial framework, the basic principle to specify a system is to build the structures for each component separately, and then use the
colimit operation to compose these speciﬁcations [5]. This also provides an oriented direction from structured design to component-based software engineering
(CBSE).
3.2

Programming Languages

Based on the categorial understanding of data structures that constitute the
theoretic background of language design, we can lead students to relate category theory with widely used programming methodologies and to investigate
mathematical semantics of programming languages.
A simplest example is given by (deductive) logic programming languages as
categories, in which propositions are objects and proofs are morphisms. Such
categories can be easily constructed and understood in the presence of the identical proof: a → a and the associative compositions of proofs: (a → b) ∧ (b →
c) ⇒ (a → c).
We can also show how to construct categories corresponding with functional
programming languages. Consider a simple language with four primitive types
Boolean, Integer, Double, and Element, the corresponding category contains
primitive types as objects and constants and built-in operations as morphisms,
as illustrated in Fig. 1.
and/or/not
Boolean
positive/
negative

Double

toDouble
succ

iszero

positive/
negative
zero

Integer
succ

true/false

Element
ele

Fig. 1. A category representing a funtional programming language

Given the facility of category theory to deﬁned more structured categories
out of simper ones, many other features of modern functional languages, including formal and concrete parameters of functions, parameterized data types,

From Mathematics to Software Engineering

473

polymorphic functions and recursive functions, can be addressed by stepwise
introducing more properties of category theory, such as principle morphisms,
exponentiation, and natural transformation [1]. Afterwards, we can go deep into
extra topics including type-free and second order lambda-calculus.
3.3

Object-Oriented Design

As mentioned above, category theory studies “objects” and “morphisms” between them: any immediate access to the internal structure of objects is prevented, and all the concepts must be deﬁned by their relations with other objects. This is quite similar to ideas of object-oriented design. Therefore we can
guide students to construct object-oriented categories step by step (the process of
which abstracts the transition from structured programming to object-oriented
programming). Such a underlying categorial framework for object-oriented design can be summarized as follows:
– OBJ-SIG is a category with object signatures θ =< Σ, A, Γ > (where
Σ =< S, Ω > is a universe signature, A is an S ∗ × S-indexed family of
attribute symbols, and Γ is an S ∗ -indexed family of action symbols) as
objects, and an object signature morphism is a consistent mapping from one
signature to another.
– OBJ-SPEC is a category with object speciﬁcations OSP =< θ, Φ > (where
Φ is a ﬁnite set of θ-axioms) as objects and a morphism between speciﬁcation
< θ1 , Φ1 > and speciﬁcation < θ2 , Φ2 > is a mapping of signature θ1 into
signature θ2 such that all the axioms in Φ1 are translated to theorems in Φ2 .
– Let D1 , D2 . . . Dn be ω-diagrams in OBJ-SPEC and COLi be colimits for
Di (i = 1, 2, . . . n), then CLS-SPEC is a category with COLi as objects, and
a class morphism between COL1 and COL2 is the colimit of all morphisms
in OBJ-SPEC that between an object in D1 and an object in D2 .
– I-FRM-SPEC is a category with diagrams in OBJ-SPEC as objects, and a
morphism between two (implemented) object frameworks, namely I-F RM1
and I-F RM2 , is the colimit of morphisms in OBJ-SPEC that between an
object of I-F RM1 and an object of I-F RM2 .
Morphisms in OBJ-SPEC may represent object relationships such as message
connection, whole-part, generalization/specialization, etc., which are upgraded
to morphisms in CLS-SPEC including association, aggregation, and inheritance
[6]; functors from CLS-SPEC to OBJ-SPEC can be treated syntactically as
instantiations or reﬁnements, and functors from OBJ-SPEC to I-FRM-SPEC as
compositions. In a similar way, categories M-CLS-SPEC (of meta-classes), MMCLS-SPEC (of meta-meta-classes), FRM-SPEC (of class frameworks), M-FRMSPEC (of meta-frameworks), and MM-FRM-SPEC (of meta-meta-frameworks)
can also be constructed [7]. As illustrated in Fig. 2, the left reﬁnement process of
class-based speciﬁcations is brought to the right reﬁnement process of frameworkbased speciﬁcations through compositions at diﬀerent levels of abstraction.

474

Y. Zheng, H. Shi, and J. Xue
Meta-Meta Class

Meta-Meta Framework

Meta Class

Meta Framework

Class

Framework

Object

refinement

Implemented Framework composition

Fig. 2. Constructing object-oriented categories

As a typical paradigm of object-oriented design framework, design patterns
can be employed to illustrate the application of theory-based approach in largescale and mechanizable software reuse [8]. In detail, a design pattern is a (category) object in M-FRM-SPEC, and one of its reﬁnement pathes to I-FRM-SPEC
can be implemented rigorously and saved; when encountering another problem
within the same pattern context, we can utilize the “standard” reﬁnement to
generate a new implementation via category theoretic computations. For example, suppose the Observer pattern [9] has been reﬁned into an object framework
(i.e., an executable program), namely F RM1 , where two observers DigitalClock
and AnalogClock query the subject Timer to synchronize their time with the
Time’s state. As shown in Fig. 3, to work out a new framework (namely F RM2 )
representing the underlying dataset in separate forms of interface, we just construct a functor H1 2 from F RM1 and generate the program I-F RM2 without
reﬁning G2 ◦ G1 manually: G1 is the composition H1 ◦ F1 , while G2 and H2 are
obtained by computing the colimit of H1 and F2 .

4

Guiding Strategies and Suggestions

Arising in algebraic topology as a way to explain in what sense the passages from
geometry to algebra are “natural” in the sense of reﬂecting underlying geometric
reality [10], category theory would be considered esoteric by many students in
computer science. Based on our lessons and experiences, we propose the following
strategies and suggestions for improving the pedagogical eﬀectiveness of the
course:
– Utilizing diagrams. Diagrams are an important tool in the practice of category theory, especially for describing equational reasoning. From beginning,
we should help students learn how to go back and forth from diagrams to
equations, and use diagrams as possible for stating and proving properties
of categorial constructions.
– Informal explanation. Many category theoretic formalizations are too abstract and heavily notational for students. To avoid the expense of devious
2

Which is the colimit of the four morphisms: f0 → g0 ; f1 → g1 ; coequalizer(f2 , f3 ) →
coequalizer(g2 , g3 , g4 ); coequalizer(f4 , f5 ) → coequalizer(g5 , g6 , g7 ).

From Mathematics to Software Engineering
T-FRM

State
State

Subject
+Observers
+subjectstate
+Attach()
+Detach()
+Notify()

Observer
1

*

ConcreteSubject

+observerstate
+Update()

ConcreteObserver

F1
FRM1
Subject<Time>

Observer<Time>
f2

f1
Timer

G1
FRM2

f0

f3

Subject<Table>

Dataset

Observer<Table>
g2

g1
g5

g3

Grid

Chart
g6

f5

F2
I-FRM1

g0

H1

DigitalClock AnalogClock
f4

475

g4
Pie
g7

G2
H2

I-FRM2

Fig. 3. Mechanization of deign patterns via category theoretic computations

circumlocutions, most lectures should begin with a clear deﬁnition, prefaced
with an informal explanation of the construction, and followed by accessible examples illustrating the methodological connection and applications in
computer science.
– Avoid misleading. Connection between category theory and set theory
is helpful to introduce many categorial concepts, but we should be careful
because sometimes it can be misleading. For example, a morphism that is
both epic (surjective) and monic (injective) does not need to be isomorphic,
and in a Cartesian closed category a reﬂexive object a is given by aa < a,
which are clearly impossible in ordinary set theory.
– Guide to computation. For students in computer science, we should give
more emphasis on the presentation of ideas and methods than mathematical notions and proofs, exhibit the intriguing advantages of formalizing and
mechanizing computations in categorial principles, and help students learn
to model and reason categorically.
– Orientation to speciﬁc research. Within limited credit hours, it is impossible to work through the constructions, derivations and proofs of all
important propositions and theorems. Category theory is, by and large, a
self-contained discipline and one can go a long way without mentioning the
traditional mathematical examples [11]. The course is just a doorstep, and

476

Y. Zheng, H. Shi, and J. Xue

its main purpose is to give a familiarity with the category theory and make
the students prepared to approach further researches applying the theory to
various aspects of computer science.

5

Conclusions

As a “theory of functions”, category theory oﬀers a highly formalized language
which is suitable for focusing concerns on various areas of computer science and
software engineering. The paper summarizes our eﬀorts and experiences in introducing the category theory course into the computer science curriculum, the role
of which includes building a uniﬁed framework that generalizes the structures
of preceding mathematical courses and providing a mathematical environment
to formulate uniform deﬁnitions of the other software engineering courses. The
main purpose is not to work through the mathematical derivations and proofs,
but to give students a structural understanding of categorial constructions and
improve their mathematic literacy for further researches in computer science.

References
1. Pierce, B.C.: Basic Category Theory for Computer Scientists. MIT Press, Cambridge, London (1991)
2. Saunders, M.L.: Categories for the Working Mathematician. Springer-Verlag, New
York (1998)
3. Asperti, A and Longo, G.: Categories, Types and Structures: an introduction to
category theory for the working computer scientist. MIT Press, Cambridge (1991)
4. Goguen, J.A.: A Categorical Manifesto. Mathematical Structures in Computer Sciences, vol. 1 (1991) 49-67
5. Wiels, V. and Easterbrook, S.: Management of Evolving Speciﬁcations Using Category Theory. In Proceedings of 13th IEEE Conference on Automated Software
Engineering, Hawaii (1998) 12-21
6. Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., and Chen, C.: On Regression Testing
of Object-Oriented Programs. Journal of Object-Oriented Programming, vol. 8, no.
2 (1995) 51-65
7. Zheng, Y.J., Xue, J.Y., and Liu,W.B.: Object-Oriented Speciﬁcation Composition
and Reﬁnement via Category Theoretic Computations. In Proceedings of 3rd International Conference on Theory and Applications of Models of Computation,
Beijing, China, 2006. Lecture Notes in Computer Science, vol. 3959 (2006) 601-610
8. Zheng, Y.J., Shi, H.H., and Xue, J.Y.: Formalization and Mechanization of Design
Patterns. In Proceedings of 1st International Conference on Computer Science and
Education, Xiamen, China (2006) 892-897
9. Gamma, E., Helm, R., Johnson, R., and Vlissides J.: Design Patterns: Elements of
Reusable Object-Oriented Systems. Addison-Wesley, Reading MA (1995)
10. Rydeheard, D.E. and Burstall, R.M.: Computational Category Theory. Prentice
Hall, New York (1988)
11. Turi, D.: Category Theory Lecture Notes. Laboratory for Foundations of Computer
Science, University of Edinburgh (2001)

