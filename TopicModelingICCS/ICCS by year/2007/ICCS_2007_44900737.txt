EVM's Java Dynamic Memory Manager
and Garbage Collector
Sang-Yun Lee1 and Byung-Uk Choi2
1

Dept. of Electronical Telecommunication Engineering, Hanyang University, Seoul, Korea
syllee@etri.re.kr
2
Division of Information and Communications, Hanyang University, Seoul, Korea
buchoi@hanyang.ac.kr

Abstract. In this paper, we propose the dynamic memory manager and garbage
collector for the embedded Java virtual machine. In order to facilitate to memory allocation and deallocation fast, the memory manager divides a heap into
various sizes and thus manages it with the unit of block which is a set of
identical cell. And we propose a new 4-color based Mark & Sweep garbage
collector in order to support a multi-thread.
Keywords: Garbage Collector, Memory Management, Mark & Sweep, EVM.

1 Introduction
We have developed the Embedded Java Virtual Machine (EVM), in which we introduce the dynamic memory manager and the garbage collector implemented in the
EVM. The proposed memory manager divides the memory into a block and a cell.
The cell is a constant sized-memory and thus becomes the unit of the object allocation
and garbage collection. A block manages the cells with identical size through a
linked-list. Dividing the memory into a block and a cell facilitate allocation of memory fast, because it quickly finds out the cell that fits the size of required object.
The proposed garbage collector is based on 3-color Mark & Sweep collector [1].
This garbage collector operates well without any problem in a single thread. However, in the Java program operating in a multi-thread, there is a problem that the
object is collected as garbage, when a garbage collector operates before the object
allocated in the other thread is defined as a root set. In this paper, we propose the
4-color Mark & Sweep garbage collector in order to solve this problem.

2 Design of Dynamic Memory Manager and Garbage Collector
We designed the memory structure considering the following criteria. Firstly, the
memory allocation and deallocation speed must be fast. Secondly, we must consider that the programs operating in an embedded system normally operates with
small sized objects. Thirdly, the large object must be handled with special care.
Fourthly, the memory fragmentation must be small. Lastly, the expansion of memory
capacity must be possible.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 737–740, 2007.
© Springer-Verlag Berlin Heidelberg 2007

738

S.-Y. Lee and B.-U. Choi

We adopted a free-list [2] to satisfy them. Fig. 1 shows the memory block structure
designed with the free-list.
Memory Block
Linked List of Block Info

0X3423FB

•

Block Info. Pointer

•
Array of Cell Color Info.
W

W

B

B

G

G

W

Block Header

•
Array of Type Info.
•

6
Block Info. Structure

2

10

1

9

4

0X3423FB
m_pNextAvail

•

• m_iInUse

m_pNextBlock

•

m_pHeadFreeCells

•

m_pAddrBlock

•

m_pAddrColor

•

m_pAddrType

•

m_pAddrData

•

•

• m_iId

•

•

• m_iNumFreeCells

•

• m_iNumCells

•

•

• m_iCellSize

Header

•

• m_iBlockSize

Block Body

Linked List of freed Cell

(a) Memory Region managed by the System (b) Memory Region managed by the VM
Fig. 1. The memory architecture

The memory area is divided into the system management memory region and the
VM management memory region; the former obtains the whole heap from the system
and stores the objects for controlling the latter and the latter allocates or deallocates
an object dynamically in a virtual machine. And the latter is further divided into
a block header and a block body. In the block header, the pointer of the block information structure, the color information of cells belonging to the block, and type
information of memory allocation are stored.
The number of blocks is determined by the initial hip size assigned when the Java
virtual machine is initiated. And the block memory is created during the Java virtual
machine's initialization. The memory is additionally allocated from the system if
the requested memory allocation exceeds the maximum heap size.
The Memory Map has three types. The AvailableBlock is the block with an available cell. The EmptyBlock is the place where all cells are deallocated by the garbage
collector. FilledBlock is the block with no more available cells. Firstly, the available
block is searched in the AvailableBlock. and the cell to be allocated is then appointed.
If it is unable to find the cell in the AvailableBlock, new cell is allocated in the EmptyBlock. A new block and a new cell are created if it is unable to more allocate in the
EmptyBlock. Specially, when there is request for allocation greater than 4,040 bytes it
is allocated in the EmptyBlock.
The proposed garbage collector is based on the 3-color garbage collector that is
easy to implement and its overhead is low in comparison with the other algorithm.
The 3-color based Mark & Sweep garbage collector runs normally in the single
threaded environment, however it can cause serious problems in the multi-threaded
environment [3,4].

EVM's Java Dynamic Memory Manager and Garbage Collector

739

Java Program

thread #2

thread #1
………………………………

stop thread hear

………………………………

obj1 = newObject(clazz);

……………………………

PUSH_OBJECT(*sp, obj);

arrClass = newClass();
…………………………………
…………………………….

……………………………….
obj2 = newObject(clazz);
……………………………….

Invoke GC

PUSH_OBJECT(*sp, obj);
………………………………………
…….
Stack Pointer

obj1
…….
…….

Garbage Collector

…….
…….
Java Stack

Fig. 2. The Problem of 3-color based Mark & Sweep Garbage Collector

Fig. 2 is an example of programs in which the Java application runs two threads at
the same time. The source code of the thread #1 and thread #2 is the internal implementation code of the Java virtual machine. In the thread #1, the objects
were stored within an obj1 and an obj2. The obj1 was stored in the Java stack by
performing the PUSH OBJECT() function.
By the way, assume that the thread #1 was stopped due to the thread #2’s calling
the garbage collector, before an obj2 was stored in the Java stack. As shown in the
Java stack memory structure, an obj2 was allocated from the memory manager but it
is in the state of not going over to the Java stack. Therefore, the garbage collector
determines the obj2 as garbage and collects it. Consequently, when the garbage collection is finished, thread #1 runs again the obj2 cannot actually indicate the memory
address value.
We propose the 4-color based Mark & Sweep garbage collector to solve this problem. The proposed garbage collector has additional color more called YELLOW besides 3 colors used in 3-color based Mark & Sweep garbage collector. The object
with YELLOW color represents that it is not yet included in the root set but it is excluded from target object during the garbage collection. When an object is created, the
object does not have the WHITE color but the YELLOW color. And it is changed to
the WHITE color on appropriate time. We managed the memory for the YELLOW
color object specially.

3 Experimental Result
We measured how the memory fragmentation changed as the number of object increased. We classified the objects into three classes for an experiment. In group A, we
continuously created array of integer of which size is 10. In group B, we continuously
created array of double continuously of which size is 10. In group C, we continuously
created array of integer, double, and float of which size is 10. Fig. 3 shows the
experimental result.

740

S.-Y. Lee and B.-U. Choi

4.25
4.2

) 4.15
%
(n 4.1
iot
tan 4.05
e
m
ga 4
rF3.95
yr
o 3.9
m
eM
3.85

Group A
Group B
Group C

3.8
3.75

10

20

30

40 50 60 70 80
number of objects created

90

100

Fig. 3. Fragmentation variation according to creation of object

As shown in Fig. 3, we can know that although the number of objects created
increases the memory fragmentation ratio is steadily maintained.

4 Conclusion
In this paper, we proposed the memory manager and garbage collector of
the EVM, an embedded Java virtual machine. The memory manager adopted the freelist. This method has the disadvantage of the memory fragmentation but the memory
allocation is fast. We designed the memory manage with blocks and cells efficiently.
So, the internal and external memory fragmentation was very low (within 10%).
We adopted 3-color based Mark & Sweep garbage collector, whereas we proposed 4-color based Mark & Sweep garbage collector to support a multi-threaded
environment.

References
1. Narendran Sachindran, J. Eliot B. Moss, Emery D. Berger: MC2: High-Performance Garbage Collection for Memory-Constrained Environments, In proceedings of 19th annual
ACM SIGPLAN conference on OOPSLA (Oct. 2004) 81-98
2. H. Toledano, M. T.: Toward an Analysis of Garbage Collection Techniques for Embedded
Real-Time Java systems, 12th IEEE International Conference on Embedded and Real-Time
Computing System and Applications (2006) 97-100
3. H. Inoue, D. Stefanovic, S. Forrest: On the prediction of Java object lifetimes, IEEE Transactions on Computers, Vol. 55. Issue 7 (July 2006) 880-892
4. W. Liu, Z. Chen, S. Tu: Research and analysis of garbage collection mechanism for realtime embedded java, In Proceedings of International Conference on Computer Supported
Cooperative Work in Design (May 2004) 462-468

