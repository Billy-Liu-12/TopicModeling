Evolutionary Algorithm for Identifying
Discontinuous Parameters of Inverse Problems
Zhijian Wu, Dazhi Jiang, and Lishan Kang
The State Key Laboratory of Software Engineering,
Wuhan University, Wuhan, China
{zjwu9551,jiangdazhi111007}@sina.com

Abstract. In this paper, we make an investigation into the discontinuous
parameter identification in the case of elliptic problem. The discontinuous
parameter is identified by evolutionary algorithm for the first time. For this kind
of problem, we present a two-level evolutionary algorithm. The first level is the
evolution for discontinuous point and the second level is the evolution for
parameter. The numerical experiments suggest that the algorithm carries such
features as good stability and adaptability and is not very sensitive to the noise
in observation data as well.
Keywords: Parameter Identification, Inverse Problem, Evolutionary algorithms.

1 Introduction
The major purpose of this paper aims to propose an evolutionary algorithm in the
identification of the unknown coefficient q(x) in the case of elliptic problem. We will
take into consideration the case when the coefficient q(x) is discontinuous.
d
⎧ d
⎪− (q ( x) u ( x)) = f ( x) in Ω
⎨ dx
dx
⎪⎩u ( x) = 0 on Γ

(1)

Here the Ω can be any bounded domain in R, with piece wise smooth boundary Γ
and f(x) being given.
So far, a lot of algorithms for solving the continuous parameter identification
problem have been worked out, among which, three kinds of methods can be used.
One of them is termed as the traditional mathematic and physical methods [1-5]. The
second one is known as the evolutionary algorithms [6-10], and the numerical
experiments indicate that these algorithms are good to solve inverse problem. The
third one is to model parameter function by Genetic Programming [11-14]. But much
less work has been done on the identification of discontinuous parameters [15]. So in
this paper, we investigate the discontinuous parameter identification and the
discontinuous parameter is identified by evolutionary algorithm for the first time. The
paper is presented as follows. In the second section, the new algorithm is described.
Some numerical experiments are described in the third section and in the fourth
section some conclusions have been drawn.
Y. Shi et al. (Eds.): ICCS 2007, Part IV, LNCS 4490, pp. 1131–1138, 2007.
© Springer-Verlag Berlin Heidelberg 2007

1132

Z. Wu, D. Jiang, and L. Kang

2 Description of Algorithm
As an inverse problem in elliptic systems, parameter identifying is the process to find
the potential solution q*(x) that makes uq*(x) match the observation data of u(x) as
optimally as possible, where we obtain uq*(x) by solving equation (1) with q*(x).
To put it simpler, the following elliptic problem can be considered.
d
⎧⎪ d
− (q( x) u ( x)) = f ( x), x ∈ (0,1)
⎨ dx
dx
⎪⎩u (0) = u (1) = 0

(2)

We consider the case in which the q(x) has one discontinuous point, which can be
expanded to multi discontinuous point case. As for this kind of problem, we present a
two-level evolutionary algorithm. The first level is the evolution for discontinuous
point and the second level is the evolution for q(x).
The interval [0,1] is divided equally into n parts, while the step size h=1/n, and
mesh point xi=ih (i=0,1,…,n). Suppose we have the observation data of u(x) at mesh
point xi (i=1,2,…,n-1), two boundary points values are given. Here the observation
~ = (u~ , u~ ,…, u~ ) .
data of u(x) can be denoted as u
ob
1
2
n −1
In the first level evolution, we denote the individual as di (i=1,2,…,Nd). For
individual di (for the sake of convenience, we suppose the di is just the same as the
some node xl), we conduct the second level evolution (i.e. the evolution of q(x)).
Suppose di=xl=l*h, we construct the following base functions:
⎧ x − xi −1
⎪ h , x ∈ [ xi −1 , xi ],
⎪⎪ x − x
ϕi ( x) = ⎨ i+1
, x ∈ [ xi , xi+1 ], i = 1,2,…, l − 1
⎪ h
otherwise.
⎪0,
⎪⎩

⎧ x1 − x
⎪
ϕ 0 ( x) = ⎨ h , x ∈ [ x 0 , x1 ],
⎪⎩0,
otherwise.

⎧ x − xl −1
⎪
ϕ l ( x) = ⎨ h ,
⎪⎩0,
⎧ x − x i −1
⎪ h ,
⎪x − x
⎪
,
ϕ i ( x) = ⎨ i +1
⎪ h
⎪0,
⎪⎩
⎧ x − x n −1
⎪
ϕ n ( x) = ⎨ h ,
⎪⎩0,
(1)

l −1

Set q ( x )

⎧ xl +1 − x
x ∈ [ xl −1 , xl ], ϕ ( 2 ) ( x) = ⎪
, x ∈ [ xl , xl +1 ],
⎨ h
l
⎪⎩0,
otherwise.
otherwise.
x ∈ [ xi −1 , x i ],
x ∈ [ xi , x i +1 ], i = l + 1, l + 2, … , n − 1
otherwise.

x ∈ [ x n −1 , x n ],
otherwise.

= ∑ qi ϕ i ( x) + ql ϕ l ( x) + q l ϕ l
i =0

(1)

(1)

( 2)

( 2)

( x) +

n

∑ q ϕ ( x)
i

i =l +1

i

Evolutionary Algorithm for Identifying Discontinuous Parameters of Inverse Problems

1133

where ql(1) = lim q ( x) , ql( 2 ) = lim q ( x ) .
−
+
x→ xl

x → xl

Identification

of

q(x)

is

converted

to

that

of

the

discrete

values

q = (q0 , q1 ,..., ql , ql ,..., qn ) . So for the second level evolution, we denote the
(1)

( 2)

(1)

( 2)

(q0 , q1 ,..., ql , ql ,..., qn ) . For each individual di we evolve it to
get the best q di (x) . For this q di (x) , we can get u d i (x ) by solving equation (2). The

individual as

fitness of individual di is defined as:
n −1

l −1

i =1

i =1

(1)
( 2)
fitness ( d i ) = h ∑ (u d i ( x i ) − u~i ) 2 +β (∑ q i − q i −1 + q l − q l −1 + q l +1 − q l +

n

∑q

i =1+ 2

i

− q i −1 )

For two individuals d1 and d2, if fitness ( d 1 ) < fitness ( d 2 ) it is said that d1 is better
than d2.
The following operators will be adopted in our algorithm.
Smooth operator
Begin
For i=1 to l-1 do qi=( qi-1+ qi + qi+1)/3;
For i=l+1 to n-1 do qi =( qi-1 + qi + qi+1)/3;
End
Multiple parent crossover operator
The multiple parent crossover operator has been used in our algorithm, it plays an
essential role in keeping the diversity of population, and making the parents’ merits
inherited by their offspring as well. The crossover operator is described as follows
(suppose there are N individuals in population P).
Procedure multiple parents crossover operator
Begin
Step 1: Select M individuals q (1) , q ( 2) , … , q ( M ) randomly from population P to form a
sub-space V = ⎧⎨q | q ∈ D n +1 , q = ∑ a i q (i )
i =1
⎩
M

M

∑a
i =1

i

}

, where ai satisfies the condition

= 1, ai ∈ [ −0.5,1.5] ;

Step 2: Produce a new individual qnew randomly in sub-space V.
End.
The algorithm for solving the discontinuous parameter problem is described as
follows:
The first level evolutionary algorithm:
Begin
Step 1: Nd individuals d 1 , d 2 ,..., d N are randomly and uniformly produced in the
d
search space as to form the initial population D ( 0 ) and set td= 0;
Step 2: For each di conduct the second level evolutionary algorithm to get an
individual qdi corresponding to di.
Step 3: When terminative condition is satisfied with go to Step 5;

1134

Z. Wu, D. Jiang, and L. Kang

Step 4: Genetic operations for D ( t ) . Conduct multiple parent crossover operating, and
produce a new individual dnew. Conduct the second level evolutionary algorithm for
dnew. If the dnew is better (i.e. the fitness is smaller) than the worst one in D ( t ) then
substitute it for the worst one and form a new population D (t +1) else D (t +1) = D ( t ) . td=
td +1. go to Step 3;
Step 5: Output the best individual d and the corresponding qd.
End
d

d

d

d

d

The second level evolutionary algorithm
Begin
Step 1: Nq individuals are randomly and uniformly produced in the search space as to
form the initial population P(0) and set tq = 0;
Step 2: When terminative condition is satisfied with go to end;
Step 3: Genetic operations (crossover and smooth operation). Conduct multiple parent
crossover operation, and produce a new individual. Conduct the smooth operator for
the new individual. If the new individual is better (i.e. the fitness is smaller) than the
worst one in P

P

( t q +1)

( tq )

then substitute it for the worst one and form a new population

( t q +1)

(t )

else P
= P q . tq= tq + 1. go to Step 2;
Step 4: Output the best solution.
End
In the following experiments, in the case of the first level evolution (discontinuous
point evolution), the Popsize Nd is 10, the dimension M of crossover subspace is 3. As
for the second level evolution (q(x) evolution), the Popsize Nq is 100, the dimension
M of crossover subspace is 10.
As for the second level evolution, the terminate condition is

∑ (q − q
∑ (q )
( best )

( worst ) 2

i

(

i

( best ) 2

)

< 10

−2

and

i

∑

n −1
i =1

(u (best ) ( xi ) − u~ ( xi )) 2

∑

≧

n −1

i =1

(u

( best )

( xi ))

< 5 × 10 − 2 ) or

2

(the generation for the second level evolution 20000 ).
As for the first level evolution, the terminate condition is
(

∑

n −1
i =1

(u ( best ) ( xi ) − u~ ( xi )) 2

∑

≧

n −1
i =1

(u

( best )

( xi ))

< 10 −3 ) or (the generation for the first level

2

evolution 8).

3 Numerical Experiments
Example 1:
d
⎧ d
(q ( x)
u ( x )) = f
⎪
dx
⎨ dx
⎪⎩ u ( 0 ) = 0 , u (1 ) = 0

( x ), x

∈ ( 0 ,1)

Evolutionary Algorithm for Identifying Discontinuous Parameters of Inverse Problems

⎧

1135

1

π ,0 ≤ x ≤ 0 .5
x − + sin(πx),0 ≤ x ≤ 0.5
Where q ( x ) = ⎧
, u ( x) = ⎪
2
⎨
⎨
<
≤
1
,
0
.
5
1
x
⎩
⎪1 − cos(πx),0.5 < x ≤ 1
⎩

u~i = (1 + δ i )u ( xi ) , where δ i (i = 0,1,...n − 1) is a random number in ( −δ , δ )
Test 1-1: δ =0, β =10-4. Run time is 90 seconds. The times for evaluating the
discontinuous point are 14. The times for evaluating q are 522151. The discontinuous
point is 0.500000,

∑

n −1
i =1

(u (best ) ( xi ) − u~ ( xi )) 2

∑

n −1
i =1

(u

( best )

( xi ))

= 0.000070 .

2

In the following Figure, the line
presents the original function q(x), while the
line
presents the q*(x) identified by our algorithm.
Test 1-2: δ = 1% , β =10-4. Run time is 190 seconds. The times for evaluating the
discontinuous point are 26. The times for evaluating q are 1042700. The noncontinuous point is 0.500000,

∑

n −1
i =1

(u (best ) ( xi ) − u~( xi )) 2

∑

n −1
i =1

(u

( best )

( xi ))

= 0.006393 .

2

Fig. 1. Test 1-1( δ =0)

Fig. 2. Test 1-2( δ = 1% )

Test 1-3: δ = 5% , β =10-3. Run time is 197 seconds. The times for evaluating the
discontinuous point are 26. The times for evaluating q are 1042700. The noncontinuous point is 0.500000,

∑

n −1
i =1

(u (best ) ( xi ) − u~ ( xi )) 2

∑

n −1
i =1

(u

( best )

( xi ))

= 0.027078 .

2

Test 1-4: δ = 10% , β =10 . Run time is 192 seconds. The times for evaluating the
discontinuous point are 26. The times for evaluating q are 1042700. The
-3

discontinuous point is 0.500000,

∑

n −1
i =1

(u (best ) ( xi ) − u~ ( xi )) 2

∑

n −1
i =1

(u

( best )

( xi ))

2

= 0.045741 .

1136

Z. Wu, D. Jiang, and L. Kang

Fig. 3. Test 1-3( δ = 5% )

Fig. 4. Test 1-4( δ = 10% )

Example 2:
d
⎧ d
(q ( x )
u ( x )) = f
⎪
dx
⎨ dx
⎪ u ( 0 ) = 0 , u (1 ) = 0
⎩

( x ), x

∈ ( 0 ,1)

Where q ( x) = ⎧⎨sin(π x) + 1, 0 ≤ x ≤ 0.5 , u ( x ) = ⎧sin(π x ) + 2, 0 ≤ x ≤ 0.5
⎨
2
⎩ 2 sin(π x ) + 1, 0.5 < x ≤ 1
⎩4 x , 0.5 < x ≤ 1
u~i = (1 + δ i )u ( xi ) , where δ i (i = 0,1,...n − 1) is a random number in ( −δ , δ )
Test 2-1: δ =0, β =10-7. Run time is 116 seconds. The times for evaluating the
discontinuous point are 12. The times for evaluating q are 481300. The discontinuous
point is 0.500000,

∑

n −1
i =1

(u (best ) ( xi ) − u~ ( xi )) 2

∑

n −1
i =1

(u

(best )

Fig. 5. Test 2-1( δ =0)

( xi ))

= 0.000171

.

2

Fig. 6. Test 2-2( δ = 1% )

Evolutionary Algorithm for Identifying Discontinuous Parameters of Inverse Problems

1137

Test 2-2: δ = 1% , β =10-7. Run time is 145 seconds. The times to evaluate the
discontinuous point are 12. The times to evaluate q are 481300. The non-continuous
point is 0.500000,

∑

n −1

i =1

(u (best) ( xi ) − u~( xi )) 2

∑

n −1

i =1

(u

( best )

( xi ))

= 0.00145

.

2

Test 2-3: δ = 5% , β =10 . Run time is 258 seconds. The times for evaluating the
discontinuous point are 26. The times for evaluating q are 1042700. The nonn −1 ( best )
(u
( xi ) − u~ ( xi )) 2
continuous point is 0.525000, ∑i =1
= 0.006168 .
n −1 ( best )
2
∑i=1 (u ( xi ))
-7

Test 2-4: δ = 10% , β =10-7. Run time is 621 seconds. The times for evaluating the
discontinuous point are 38. The times for evaluating q are 2343200. The nonn −1 ( best )
(u
( xi ) − u~ ( xi )) 2
continuous is 0.475000, ∑i =1
= 0.009756 .
n −1 ( best )
2
∑i=1 (u ( xi ))

Fig. 7. Test 2-3( δ = 5% )

Fig. 8. Test 2-4( δ = 10% )

From the above described numerical experiments It can be seen that the parameter
function found by our algorithm is very approximate to the original parameter. All
numerical experiments have been conducted on PC

4 Conclusions
The results of our experiments suggest that the algorithm presented in this paper has a
good appearance for inverse problems in which the coefficient q(x) has discontinuous
point. And what’s more, the numerical experiments demonstrate that our algorithm
carries the feature of prefect stability and adaptability and that it is not very sensitive
to the noise, which tends to be the most important factors to parameter identification
in the inverse problems.

1138

Z. Wu, D. Jiang, and L. Kang

In is a new challenge to identify the discontinuous parameter by evolutionary
algorithm. Only a simple case has been discussed in this paper, so in the further
research, we will investigate some other kinds of inverse problems and model the
discontinuous parameters by GP as well.
Acknowledgments. This research work was supported by Natural Science
Foundation of Hubei Province (No. 2005ABA239)

References
1. Guo, B., and Zou, J. An augmented Lagrangian method for parameter identifications in
parabolic systems. Journal of Mathematical Analaysis and Applications, 263 (2001) 49-68
2. Ito, K., and Kunisch, K. The augmented Lagrangian method for parameter estimation in
elliptic system. SIAM J. Control Optim., 28(1990) 113-136
3. Keung, Y. L., and Zou, J. Numerical identifications of parameters in parabolic systems.
Inverse Problems, 14 (1998) 83-100
4. Keung, Y. L., and Zou, J. An efficient linear solver for nonlinear parameter identification
problems. SIAM J. Sci. Comput., 22, 5 (2000) 1511-1526
5. Xie, J., and Zou, J. Numerical reconstruction of heat fluxes. SIAM J. Numer. Anal. 43
(2005) 1504-1535
6. Burczynski, T., Beluch, W., Dlugosz, A., Orantek, P., and Nowakowski, M. Evolutionary
methods in inverse problems of engineering mechanics. ISIP 2000 International
Symposium on Inverse Problems in Engineering Mechanics (2000)
7. Collet, P., Lution, E., Raynal, F., and Schoenauer, M. Polar IFS+Parisian genetic
programming=efficient IFS inverse problems. Genetic Programming and Evolvable
Machines, 1 (2000) 339-361
8. Wu, Z., Tang, Z., Zou, J., Kang, L., and Li, M. Evolutionary algorithm for solving
parameter identification problems in elliptic systems. In Proceedings of 2004 Congress on
Evolutionary Computation, USA (2004) 803-808
9. Wu, Z., Tang, Z., Zou, J., Kang, L., and Li, M. An evolutionary algorithm for parameters
identification in parabolic systems. In Proceedings of 2004 Genetic and Evolutionary
Computation Conference, USA (2004) 1336-1337
10. Wu, Z., Kang L., Zou J., Tang Z., and Li, M. An evolutionary algorithm for identifying
parameters in parabolic systems. In Progress in Intelligence Computation & Applications,
China, Wuhan (2005) 92-96
11. Cao, H., Kang, L. and Chen, Y. Evolutionary modeling of system of ordinary differential
equations with genetic programming. Genetic Programming and Evolvable Machines, 1,
4(2000) 309-337
12. Koza, J. GeneticPprogramming: On the Programming of Computers by Means of Natural
Selection. Cambridge, MA: MIT Press (1992)
13. Xiong, S., and Li Y. An evolutionary modeling approach of partial differential equations.
Wuhan University Journal of Natural Sciences, 10, 5 (1999) 767-770
14. Xiong, S., and Lu X. A genetic programming approach to partial differential equation
inverse problems. Journal of Wuhan University of Technology (Information &
Management Engineering), 25, 3 (2003) 11-15
15. Chen, Z., and Zou, J. An augmented Lagrangian method for identifying discontinuous
parameters in elliptic problems. SIAM J. Control Optim., 37, 3(1999) 892-910

