Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 928 – 935

International Conference on Computational Science, ICCS 2013

Cost-Based Multi-QoS Job Scheduling using Divisible Load
Theory in Cloud Computing
Monir Abdullaha , Mohamed Othmanb,1
a Department
b Department

of Information Technology, Faculty of Computer Science and Information Systems, Thamar University, Thamar, Yemen
of Communication Technology and Network, Faculty of Computer Science and Information Technology, Universiti Putra
Malaysia, 43400 UPM Serdang, Selangor D.E., Malaysia

Abstract
The advent of cloud computing as a new model of service provisioning in distributed systems, encourages researchers to
investigate its beneﬁts and drawbacks in executing scientiﬁc applications such as workﬂows. In this research, we attempt to
investigate the use of a Divisible Load Theory (DLT) to design eﬃcient strategies to minimize the overall processing time
for scheduling jobs in compute cloud environments. We consider homogeneous processors in our analysis and we derive a
closed-form solution for the load fractions to be assigned to each processors. Our analysis also attempts to schedule the jobs
such a way that cloud provider can gain maximum beneﬁt for his service and Quality of Service (QoS) requirement user’s job.
Finally, we quantify the performance of the strategies via rigorous simulation studies.
Keywords: Cloud computing, Job scheduling, Load balancing, Divisible load theory, Multi Quality of Services.

1. Introduction
Cloud computing is a recent trends of technology, where user can rent software, hardware, infrastructure and
computational recourse as per user basis [1]. Users can submit their jobs into cloud for computational processing
or leave their data in cloud for storage. Diﬀerent users has diﬀerent QoS requirement. cloud scheduler must
be able to schedule the jobs such a way that cloud provider can gain maximum beneﬁt for his service and QoS
requirement user’s job is also satisﬁed.
In DLT in case of clouds, an arbitrarily divisible load without having any previous relations is divided and
ﬁrst distributed among the various processors (for simplicity here the load is divided equally between the master
computers), so that the entire load can be processed in shortest possible amount of time. An important reason for
using DLT is its ﬂexibility, tractability, data parallelism, computational diﬃculties [2, 3, 4].
Moreover, in order to realize the full potential of the cloud platform, an architectural framework for eﬃciently
coupling public and private clouds is necessary. As resource failures due to the increasing functionality and
complexity of hybrid cloud computing are inevitable, a failure-aware resource provisioning algorithm that is
capable of attending to the end-users QoS requirements is paramount [5].
∗ Corresponding

author. Tel.: +967-01-505258 ; fax: +967-06-425094 .
author is also an associate researcher at Computational Science and Mathematical Physics Lab., Mathematical Science Ins., UPM.
E-mail address: monir.yem@gmail.com, mothman@fsktm.upm.edu.my.

1 The

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.258

Monir Abdullah and Mohamed Othman / Procedia Computer Science 18 (2013) 928 – 935

In the traditional networked computing systems such as grid environments, by and large, the number of CPUs
available is ﬁxed. A compute cloud being an environment that is said to oﬀer an ”elastic service” (automatic scaling of resources as per the demand), motivates us to use a compute cloud system which is ideal for incorporating
changes in resource requirements [6].
Our contributions can be summarized as follows. With the principle that all participating processors stopped
computing at the same time instant, the closed-form formulas for both processing time and workload fraction for
each processor are derived. We also consider cost-based multi-QoS scheduling on a compute cloud environment
[7].
The rest of the paper is organized as follow: section 2 gives with related works; in section 3, a cloud scheduling
environment and a set of mathematical equations has been developed to formulate the problem; in section 4 we
gives the new derived DLT model to address this problem; section 5 gives the experimental results; the last part
concludes with future work.
2. Related Works
In cloud computing, end users do not own any part of the infrastructure. The end-users simply use the services
available through the cloud computing paradigm and pay for the used services. The cloud computing paradigm
can oﬀer any conceivable form of services, such as computational resources for high performance computing
applications, web services, social networking, and telecommunications services [8].
DLT has proven to be a valuable tool in handling large-scale computational loads on networked systems for
various aerospace data and image processing applications [6]. Although DLT uses linear modeling, recent studies
also show the use of the DLT paradigm in handling computation that demands a nonlinear style of processing [9].
DLT was successfully applied for Scheduling divisible loads on large scale data Grids and produced competitive
results [10, 11, 13].
Recently, DLT paradigm was investigated to design eﬃcient strategies to minimize the overall processing time
for performing large-scale polynomial product computations in compute cloud environments. A compute cloud
system with the resource allocator distributing the entire load was considered to a set of Virtual CPU Instances
(VCI) and the VCIs propagating back the processed results to resource allocator for postprocessing [6]. Furthermore, a programming pattern for programmers was proposed to easily develop high performance applications on
dynamic and heterogeneous cloud environments using DLT paradigm [12]. This pattern uses a performance-based
approach to distribute workloads within a program to working nodes to reduce scheduling overhead.
Moreover, the scheduling strategy should be developed for multiple workﬂows with diﬀerent QoS requirements. In [7], a multiple QoS constrained scheduling strategy of multi-workﬂows (MQMW) was considered to
address this problem. The strategy can schedule multiple workﬂows which are started at any time and the QoS
requirements are taken into account. Here, the indivisible jobs only considered.
To the best of our knowledge, DLT model considering cost-based multi-QoS scheduling has not been applied
in compute cloud. In this research, a DLT paradigm will be used to address this problem.
3. Scheduling Environments and Cost Models
3.1. Scheduling model environment
The proposed model of scheduling environment mainly consists of ﬁve components [14]:
1. A set of users (cloud customers): There are lots of cloud end-users who want to get service from cloud.
They are seeking for diﬀerent kind of service (like computational service, platform service, infrastructure
service) having diﬀerent level of QoS (may have diﬀerent cost and deadline, possibly diﬀerent priority).
Users can submit their job in preprocessing unit.
2. Preprocessing unit and task classiﬁer: This unit takes user’s job and performs some preprocessing and
classiﬁcation. This unit consists of two sub components:
(a) Preprocessing unit, which is responsible to perform the attributes of diﬀerent job and QoS. It also encodes the attributes into Users Job Attribute Vector (UJAV). The UJAV includes Expected Instruction
Count (EIC), job deadline and delay cost (Rials/ time unit).

929

930

Monir Abdullah and Mohamed Othman / Procedia Computer Science 18 (2013) 928 – 935

(b) Task classiﬁer, which classiﬁes the task based on attributes, determine by ﬁrst sub-unit. For example,
job can be classiﬁed into diﬀerent type based on service: Software as a Service (SaaS), Platform aaS
(PaaS) and Infrastructure aaS (IaaS). Then it sends jobs to scheduler for scheduling into an appropriate
Queue.
3. Data center /Executer: This a main component of which is responsible for providing user service. Data
center mainly consist of a number of storage resource (storage unit and storage server), a collection of
virtualized machine and a collection of computational resources (mainly processing unit). This paper considers only computational resource. Each processing unit takes job from corresponding dispatcher queue
and schedule by scheduler.
4. Data center manager: It collects recent Process Unit Attribute Vector (PUAV) from diﬀerent processing
unit. The PUAV includes Million Instructions Per Second (MIPS) that indicate how many instructions can
be executed by the machine per second and the cost of execution the instruction.
5. Job scheduler: It takes two inputs, one from preprocessing unit and other from datacenter manager, it
gets information what QoS is required by a user from associated UJAV and it can also determine which
processing unit can optimally satisfy that QoS from PUAV. Thus main task of the job scheduler is to perform
an optimal mapping from job to processing unit as in Fig. 1.

Fig. 1. Cloud Scheduling Environment

3.2. Optimality criterion
In all the literature related to the divisible load scheduling domain so far, an optimality criterion [2] is used to
derive an optimal solution as follows. It states that in order to obtain an optimal processing time, it is necessary
and suﬃcient that all the sites that participate in the computation must stop at the same time. Otherwise, load could
be redistributed to improve the processing time. The timing diagram for this distributed system in the optimal case
is depicted in Fig. 2.
3.3. Notations and deﬁnitions
The notations and deﬁnitions that are used throughout this paper are shown in Table 1.
3.4. Cost Model
Let consider the following cost factor: ωi be the cost per instruction for processing unit i and β j indicates the delay
cost of job j. Suppose, M machines with N jobs and assign these N jobs into M machines (N=M), in such an
order that following condition can be satisﬁed:
Form user side, ﬁnish time (T f ) must be less than the worst case completion time (T wcc), scheduling must be
done such way to preserve QoS and to avoid possible starvation as:

931

Monir Abdullah and Mohamed Othman / Procedia Computer Science 18 (2013) 928 – 935

Fig. 2. Timing diagram of the distribution strategy with M Jobs and N Processors

Table 1. Notations and deﬁnitions
Notation
N
M
ωi
βj
EIC j
Ψj
MIPS i

Deﬁnition
The total number of jobs in the system
The Number of the processors in the system
The cost per instruction for processing unit i
The delay cost of job j
Indicates the expected instruction count per job j
The estimated delay cost for job j
Indicates how many million instructions can be executed by machine j per second.

T f ≤ T wcc
This condition must be satisﬁed anyhow, otherwise the job is considered as a failure job and the corresponding
scheduling is illegal.
From cloud provider side, to minimize the cost spend on the job: Suppose ith machine is assigned to jth job.
Then the cost for execution job j is:
IC j ∗ ωi
where IC is the instruction count. Let Ψ j , estimated delay cost for job j, can be deﬁned as:
0
if
δj ∗ (T f − T d) i f

Ψj =

Td ≥ T f
Td < T f

(1)

where, T d is the deadline for job j and T f is the estimated ﬁnish time, when job j is assigned to processing unit
i. Thus overall cost to execute all M jobs can be given by:
M

ς=

((IC j ∗ ωi ) + Ψj)

(2)

i=1

Thus, cloud provider’s aim is to schedule jobs (i.e ﬁnd a permutation: N → M such a way which minimize the
value of:
M

Min(ς) = min[

((IC j ∗ ωi ) + Ψj)].
i=1

(3)

932

Monir Abdullah and Mohamed Othman / Procedia Computer Science 18 (2013) 928 – 935

As there are M number of machines and N number of jobs and assuming that all machines are capable to
perform any job, then there are total M ∗ N numbers of way to assignment. And if M = N, then it need M!
assignments, which has an exponential complexity O (M!). Thus this problem is a kind of NP-Complete problem.
A probabilistic search algorithm can solve this assignment problem in ﬁnite time. Here, we will discuss the cost
model for diﬀerent types of jobs.
4. Proposed DLT Cost model
In this section, the proposed DLT model for scheduling divisible load on cloud environment. The closed form
solution for the load allocation are presented. Here, we will discuss step by step the derivation of a closed form
solution by which one can calculate the optimal fraction of the load that has to be assigned to each processing
node to achieve the minimum cost and the optimal data allocation for each processor. The scheduling diagrams
for divisible and indivisible jobs are shown in ﬁg. 3.

Fig. 3. (a) scheduling indivisible jobs; (b) scheduling divisible jobs.

Based on [4], the fraction of load of each processors is:
αi =

1
ωi ·

M 1
j=1 ω j

(4)

The total load that will be executed by each processor is:
M

Li = α i ·

IC j

(5)

j=1

The cost of execution load Li in processor i is:
Costi = Li · ωi

(6)

All processing units will ﬁnish the processing at the same same based on the DLT model. Because of that, the
ﬁnish time T fi of each job will be:
T fi =

M
j=1
M
j=1

IC j

MIPS j

(7)

The estimated delay time for job i, can be deﬁned as:
DelayT imei = T fi − Deadlinei

(8)

933

Monir Abdullah and Mohamed Othman / Procedia Computer Science 18 (2013) 928 – 935

Here also we will implement same rule of indivisible jobs (see Equation (1)).
DelayCosti = DelayT imei ∗ δi

(9)

The total cost T c for scheduling N jobs on M processors is :
M

N

Li · ωi +

Tc =
i=1

DelayCost j

(10)

j=1

5. Experimental Results and Discussions
To evaluate the performance of the model, it has been simulated to ﬁnd best schedule for diﬀerent number of
jobs and diﬀerent number of machines. A number of jobs having diﬀerent attributes are generated randomly
and also a number of processing unit having random attributes are generated randomly. We have examined the
overall performance of the model by running it under 100 randomly generated cloud conﬁgurations. For instance,
N diﬀerent jobs (20 , 50 and 100) having diﬀerent characteristics are given generated randomly. Similarly M
diﬀerent process units (10, 20, 30, 40, and 50) attributes with random characteristics are generated. When was
applied the cost model, we have varied the job parameters uniformly: job deadline (1 to 10), delay cost (1 to 10),
EIC (100 to 1000). Also we uniformly distributed process units as: MIPS (10 to 100) and ω (1 to 10).
The simulation results proved that the proposed model will give good results in terms of total cost. Thus, we
will compare the performance of the model with diﬀerent random conﬁguration. The performance of the model
was compared in Table 2.
Table 2. Total cost vs. no. of processors for diﬀerent no. of jobs.
No. of Processors
100
10
468795.84
20
254998.58
30
221457.88
40
203984.40
50
197773.22

No. of Jobs
50
127024.04
108169.19
95340.75
94794.23
92100.83

20
41921.60
38832.78
37729.90
37111.98
36940.18

Fig. 4 clearly demonstrated the performance of the proposed model. We can see that when the the number of
nodes increases, the total cost decreases. Under all criteria, we observe that the proposed model yields the highest
eﬃciency for any number of processing nodes.
500000

N=100
N=50
N=20

Total cost (Rs/ Unit time)

450000
400000
350000
300000
250000
200000
150000
100000
50000
0

10

15

20

25

30

35

No. of Processors

Fig. 4. Total cost versus no. of processors

40

45

50

934

Monir Abdullah and Mohamed Othman / Procedia Computer Science 18 (2013) 928 – 935

Furthermore, when delay cost is only considered the proposed model produced good results. The delay cost
is decreases as the number of processors increases. When the number of processing nodes approximately is more
than 60, the total cost is zero for any number of jobs. The plot shows that a better results is obtained as the number
of the processing nodes increases. This is expected as more processing nodes are involved in the computations.
Fig. 5 is plotted delay cost against the number of processors.

Delay cost (Rs/ Unit time)

300000

N=100
N=50
N=20

250000

200000

150000

100000

50000

0

10

20

30

40

50

60

No. of Processors

Fig. 5. Delay cost versus no. of processors

6. Conclusion
In this paper we have successfully employed the DLT paradigm to handle a job scheduling problem in cloud environment. The use and applicability of the DLT paradigm in a compute cloud environment is demonstrated by
developing a distribution strategy that is shown to minimize the overall total cost. To this end, we designed and
analyzed a closed form solution for scheduling jobs problem and validated all our ﬁndings via rigorous simulation
experiments. As an immediate extension to this work one can attempt to consider the the impact of communication overheads and dynamic workload. It also not consider the more real-time job allocation restriction like
political concern, machine failure. Further optimization can be done with considering these issues. With such
improvements, the proposed model can be integrated in the existing cloud infrastructures in order to improve their
performance.
Acknowledgements
This work has been supported by Universiti Putra Malaysia, Research University Grant Scheme RUGS 05-01-100896RU/F1 and Malaysian Ministry of High Education, Fundamental Research Grant Scheme FRGS/1/11/SG/
UPM/01/1.
References
[1] T. Sridhar, Cloud Computing: A Primer, Part 1: Models and Technologies. The Internet Protocol Journal. 12 (3) (2009), 2 – 19.
[2] V. Bharadwaj, D. Ghose, T. Robertazzi, Divisible load theory: a new paradigm for load scheduling in distributed systems, Cluster
Computing 6 (1) (2003), 7 – 17.
[3] A. Shokripour, M. Othman, Categorizing DLT researches and its applications, European Journal of Scientiﬁc Research 37 (3) (2009)
496 – 515.
[4] H. M. Wong, B. Veeravalli, Dantong Y., and T. G. Robertazzi, Data Intensive Grid Scheduling: Multiple Sources with Capacity Constraints, in: Proceeding of the IASTED Conference on Parallel and Distributed Computing and Systems, Marina del Rey USA, (2003),
pp. 7 – 11.

Monir Abdullah and Mohamed Othman / Procedia Computer Science 18 (2013) 928 – 935
[5] B. Javadi, J. Abawajyb, R. Buyya, Failure-aware resource provisioning for hybrid Cloud infrastructure, Journal of Parallel and Distributing Computing, 72(2012), 1318 - 1331.
[6] G.N. Iyer, V. Bharadwaj, S.G Krishnamoorthy. On Handling Large-Scale Polynomial Multiplications in Compute Cloud Environments
using Divisible Load Paradigm, IEEE Transactions on Aerospace and Electronic Systems, 48 (1) (2012), 820 – 831.
[7] Xu, M., Cui, L., Wang , H., Bi, Y.. A Multiple QoS Constrained Scheduling Strategy of Multiple Workﬂows for Cloud Computing. IEEE
International Symposium on Parallel and Distributed Processing with Applications, (2009), pp. 629 – 634.
[8] M. Mezmaza, N. Melabb, Y. Kessaci b, Y.C. Lee, E. G. Talbi, A.Y. Zomayac, D. Tuyttens, A parallel bi-objective hybrid metaheuristic
for energy-aware scheduling for cloud computing systems, Journal of Parallel and Distributing Computing, 71(2011), 1497 – 1508.
[9] J. T. Hung, and T. G. Robertazzi. Scheduling nonlinear computational loads. IEEE Transactions on Aerospace and Electronic Systems,
44(3) (2008), 1169 – 1182.
[10] M. Othman, M. Abdullah, H. Ibrahim, S. Subramaniam. Adaptive Divisible Load Model for Scheduling Data-Intensive Grid Applications. Lecture Notes in Computer Science (LNCS) , Springer, Heidelberg, 4487(2007), 446 - 453. .
[11] Othman, M., Abdullah, M., Ibrahim, H., Subramaniam, S.: A2DLT: Divisible Load Balancing Model for Scheduling CommunicationIntensive Grid Applications. Lecture Notes in Computer Science (LNCS) , Springer, Heidelberg, Part I. LNCS, 5101(2008), 246 - 253.
[12] Wen-Chung Shih, Shian-Shyong Tseng, and Chao-Tung Yang. Performance Study of Parallel Programming on Cloud Computing Environments Using MapReduce, International Conference on Information Science and Applications (ICISA), (2010), pp. 1 – 8.
[13] M. Abdullah, M. Othman, H. Ibrahim and S. Subramaniam, New Optimal Load Allocation for Scheduling Divisible Data Grid Applications, Future Generation Computer Systems, 7 (62) (2010), 971 – 978.
[14] D. Dutta, R. C. Joshi, A GeneticAlgorithm Approach to Cost-Based Multi-QoS Job Scheduling in Cloud Computing Environment.
International Conference and Workshop on Emerging Trends in Technology (ICWET 2011), Mumbai, India, (2011), pp. 422 – 427.

935

