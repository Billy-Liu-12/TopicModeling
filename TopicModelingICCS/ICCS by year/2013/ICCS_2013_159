Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 1604 – 1613

International Conference on Computational Science, ICCS 2013

Isogeometric analysis of hyperelastic materials using PetIGA
L. M. Bernala , V. M. Calob , N. Collierb , G. A. Espinosaa,c , F. Fuentesa,∗, J. C. Mahechaa
b Center

a Department of Mechanical Engineering, Universidad de los Andes, Bogot´
a D.C., Colombia
for Numerical Porous Media (NumPor), Applied Mathematics and Computational Science, Earth and Environmental Sciences and
Engineering, King Abdullah University of Science and Technology, Thuwal, Saudi Arabia
c Department of Civil Engineering, Universidad de los Andes, Bogot´
a D.C., Colombia

Abstract
In this work diﬀerent nonlinear hyperelastic models for slightly compressible materials are implemented in an isogeometric
ﬁnite element model. This is done within the recently developed computational framework called PetIGA, which uses isogeometric analysis and modern computational tools to solve systems of equations directly and iteratively. A ﬂexible theoretical
background is described to implement other hyperelastic models and possibly transient problems in future work. Results show
quadratic convergence of the nonlinear solution consistent with the Newton-Raphson method that was used. Finally, PetIGA
proves to be a powerful and versatile tool to solve these types of problems eﬃciently.
Keywords: NURBS; isogeometric analysis; hyperelasticity; PetIGA; PETSc.

1. Introduction
Engineers often require the solution of nonlinear models that describe the physics of the problem at hand. The
ﬁnite element method (FEM) has proved to be useful in solving many of these problems. Despite this, commercial
software does not always provide either the versatility to model them or the computational eﬃciency to solve them.
Hence, the need for modern computational frameworks that allow this ﬂexibility and performance within nonlinear
ﬁnite element analysis has become evident. One such framework developed recently is called PetIGA (see [1]). It
uses a geometry-based Galerkin FEM, known as isogeometric analysis (IGA) (see [2]), to discretize the weak form
of the partial diﬀerential equations (PDE) that govern these problems. This is valuable, taking into account the
myriad of advantages that IGA oﬀers (see [2]). Among those is the fact that, given a geometry in a speciﬁc format,
there is no need for a separate discretization (meshing) procedure. The discretization of the domain along with
the information required to compute the basis functions is inherent within the geometry. This is especially useful
when dealing with complex geometries that may even be changing in time. Moreover, Benson et. al (in [3]) showed
that IGA presents an improved performance in nonlinear problems in comparison to traditional FEM. In addition,
PetIGA makes strong use of the Portable, Extensible Toolkit for Scientiﬁc Computation (PETSc), which is a
collection of routines and data structures that essentially takes care of the linear algebra and iterative procedures
in the calculations eﬃciently (see [4]). PETSc is applicable to large-scale simulations where computations in
∗ Corresponding

author.
E-mail address: f.fuentes203@uniandes.edu.co.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.328

1605

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

parallel may be required (see [5]). In fact, PetIGA can be viewed as an extension to PETSc, and as such, has all
the advantages that PETSc has.
There are many physical problems which could beneﬁt from PetIGA to ﬁnd their solution, particularly those
stemming from solid mechanics. A solid under the action of a force and certain restrictions, in general, yields
a nonlinear problem for the analyst. With additional assumptions, this can be ignored to obtain a linear system
of diﬀerential equations, but this is not always suﬃcient to capture the physical behaviour. For example, when a
deformed body is expected to be described by a large displacement ﬁeld such as a vehicle in collision, geometrical
nonlinearities cannot be neglected. In this case, by using continuum mechanics, they can be modeled and taken
into account. Also, when materials can undergo large strains while still displaying purely elastic behaviour, nonlinearities may appear in the constitutive models. Examples are hyperelastic materials like rubbers and foams. It is
precisely those types of materials under high displacements and strains which are considered in this article. These
problems are solved using the ﬁnite element method via PetIGA under an appropriate theoretical formulation.
Several constitutive models are considered. For completeness, the consistent tangent operator is presented for
each of those models. The computation of this tangent considerably accelerates the convergence of the nonlinear
iterative system.
2. Problem Deﬁnition
2.1. Deformation gradient, strains and stresses
A solid body in an initial conﬁguration is represented by the subset Ω ⊆ R3 . The body then reaches a deformed
state, called the current conﬁguration, represented by the continuous injective mapping ϕ : Ω → R3 . This way, a
vector X representing a point of the solid in the initial conﬁguration is mapped to the vector x := ϕ(X). Therefore,
the displacement of the body is given by the ﬁeld u(X) := x − X, so that x = X + u(X). The deformation gradient is
∂xi
deﬁned as the tensor F := ∇X ϕ(X) = ∇X x, which has components Fi j = ∂X
(in a particular basis), and determinant
j
J := det(F). Using the relations above, F = I + ∇X u = I + H, where H := ∇X u is called the displacement gradient.
As measures of strain, the right Cauchy-Green tensor, C := FT F, and the Green-Lagrange strain tensor,
E := 12 (C − I), are deﬁned. They operate on the initial conﬁguration. Both are symmetric, and C is also positive
deﬁnite. Notice that E = 12 (H + HT + HT H), so the term HT H is a clear indicator of the nonlinear behavior of
the Green-Lagrange strain tensor. In fact, when the components of the displacement gradient are small, it follows
that E ≈ ε := 12 (H + HT ), where ε is the engineering (linear) strain measure. Also, E is invariant under rigid body
motions, because when ϕ(X) = x = Qθ X + c, where Qθ is a rotation (so that QTθ Qθ = I), E = 0. Both E and C are
commonly used in nonlinear problems where there are large displacements (see [6, 7]).
Now, the Cauchy stress tensor, σ, and the ﬁrst and second Piola-Kirchhoﬀ stress tensors, P := JσF−T and
S := F−1 P, are introduced, so that P = FS. The Cauchy stress tensor, which operates in the current conﬁguration,
carries its usual meaning so that by the Cauchy stress theorem, t = σn, where t is the traction vector and n is the
unit normal vector to the boundary ϕ(∂Ω) in the current conﬁguration. The traction vector represents the force per
unit area measured at a point along the boundary ϕ(∂Ω).
As a side note, the domain of the tensor and vector ﬁelds deﬁned above and in what follows is usually Ω. By
precomposing them with ϕ−1 they can be seen as having domain ϕ(Ω). However, the precomposition implies that
these are formally diﬀerent ﬁelds, despite describing essentially the same behaviour. In spite of this, to lighten the
notation, the corresponding ﬁelds will be referred to by the same names, and the domain will be clear from the
context. Obviously, similar arguments apply if the domain of the ﬁelds was initially ϕ(Ω).
2.2. Balance of mass and linear momentum
For time-dependent problems, the solid is in a diﬀerent conﬁguration ϕ(Ω) = ϕt (Ω) at each time t, where
ϕ0 (Ω) = Ω. Since u depends on the current conﬁguration, the velocity and acceleration are deﬁned as v := du
dt
2
and a := ddt2u respectively. Now, the densities in the initial and current conﬁgurations are deﬁned as ρ0 and ρ
respectively. The balance of mass in a closed system, like a solid, boils down to the equation ρ0 = Jρ (see [8] for
more details). The linear momentum
L :=

ϕ(Ω)

ρv dv =

Ω

ρ0 v dV,

(1)

1606

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

which depends on the current conﬁguration (and hence on t as well), is deﬁned as usual, where dv and dV
represent inﬁnitesimal volume elements in the current and initial conﬁgurations respectively. The expression for
the balance of mass was used in (1), where ρ0 depends only on the initial conﬁguration so it does not depend on
time. In what follows da and dA represent inﬁnitesimal surface elements in the current and initial conﬁgurations
respectively. The balance of linear momentum (see [6]) states that dL
dt is equal to the sum of all external forces
(volumetric and surface) acting on the body (in the current conﬁguration). The surface force is
RS :=

ϕ(∂Ω)

t da =

ϕ(∂Ω)

σn da =

ϕ(Ω)

∇x · σ dv =

Ω

∇X · P dV,

(2)

Here, the divergence theorem along with the identity ∇X · P = J∇x · σ (see [8]) were used. If f is deﬁned as a force
ﬁeld per unit mass acting on the current conﬁguration, and b := ρf is the body force, the volumetric force is
RV :=

ϕ(Ω)

b dv =

ϕ(Ω)

ρf dv =

Ω

ρ0 f dV,

(3)

where the balance of mass was used again. Finally, the balance of linear momentum in the initial conﬁguration
asserts that
ρ0 a dV =
∇X · P dV +
ρ0 f dV.
(4)
Ω

Ω

Ω

This expression is also valid for any subset of Ω in the initial conﬁguration. Hence,
∇X · P + ρ0 f = ρ0 a.

(5)

2.3. Hyperelastic constitutive models
A hyperelastic material is deﬁned as one for which there exists a scalar function W(C) called the strain energy
function such that the second Piola-Kirchoﬀ stress can be written as S = 2 ∂W
∂C . The function W is related to the free
Helmholtz energy function, ψ, by W = ρ0 ψ. This implies that for hyperelastic materials, ψ depends exclusively on
C, so in particular, they are homogeneous. There are some properties W must satisfy for it to make physical sense
∂S
∂2 W
(see [6, 8]), but no details will be mentioned here. Before proceeding, the fourth order tensor C := 2 ∂C
= 4 ∂C∂C
called the material elasticity tensor is introduced. It posseses minor symmetries (that is Ci jkl = C jikl = Ci jlk ) as
well as major symmetries (that is Ci jkl = Ckli j ) when derived from W.
Often materials show a diﬀerent response to volumetric and deviatoric deformations. With this in mind, the
strain energy function is frequently decoupled as W(C) = Wiso (C) + Wvol (J), where the modiﬁed right CauchyGreen tensor, C := J −2/3 C, is consistent with the split F = J 1/3 IF proposed in [9]. Accordingly, S and C are
also split into Siso , Svol , Ciso and Cvol respectively. In view of det(F) = 1 = det(C) and det(J 1/3 I) = J, it is clear
that F, Wiso (C), Siso and Ciso deal with the isochoric changes, while J 1/3 I, Wvol (J), Svol and Cvol deal with the
volumetric shape-preserving changes. This approach has proved particularly useful even under high strains (ﬁnite
deformations) in the context of isothermal processes [8]. The expressions for Siso and Svol are
Siso = J −2/3 P : S

Svol = J dWdJvol C−1 ,

and

(6)

where S := 2 ∂Wiso and the fourth order projection tensor is deﬁned as P := I I − 13 C−1 ⊗ C. Here, the operators
∂C
⊗ and : are deﬁned as usual, so that for arbitrary A and B second order tensors and A and B fourth order tensors,
(A ⊗ B)i jkl := Ai j Bkl , (A : B) := Ai j Bi j , (A : B)i j := Ai jkl Bkl , (B : A)i j := Bkl Akli j and (A : B)i jkl := Ai jmn Bmnkl .
Additionally, the binary operator is deﬁned so that (A B)i jkl := 12 (Aik B jl +Ail B jk ), while the transpose of fourth
order tensors means that ATijkl = Akli j . The expressions for Ciso and Cvol are
Ciso = 23 J −2/3 (S : C)P − 23 (C−1 ⊗ Siso + Siso ⊗ C−1 ) + J −4/3 P : C : PT ,
Cvol =

J dWdJvol

+

2
J 2 d dJW2vol

where C := 2 ∂S = 4 ∂ Wiso and P := C−1
∂C
∂C∂C
S = Siso + Svol and C = Ciso + Cvol .
2

−1

C

⊗C

−1

−

2J dWdJvol C−1

−1

C ,

(7a)
(7b)

C−1 − 13 C−1 ⊗ C−1 . Hence, by using (6) and (7), one can calculate

1607

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

Now, when the hyperelastic material is assumed to be isotropic, so that W(C) = W(Qθ CQTθ ) for any rotation
tensor Qθ , it follows by the representation theorem for invariants that W actually depends on the three invariants
I1 (C) := tr(C), I2 (C) and I3 (C) := det(C) = J 2 of the tensor C [7]. In this case, a general expression for S and C
can be found in [8, (6.32), (6.193), (6.194)]. Also, when the split described above is performed, isotropy implies
that Wiso depends solely on I¯1 := I1 (C) and I¯2 := I2 (C). In this case, general expressions for S and C for which
only the ﬁrst and second order derivatives of Wiso remain to be computed are
S = γ1 I + γ2 C

and C = δ1 I ⊗ I + δ2 (I ⊗ C + C ⊗ I) + δ3 C ⊗ C + δ4 I
γ1 := 2

δ1 := 4

∂2 Wiso
∂I¯2
1

+ 2I¯1 ∂∂I¯1W∂iso
+
I¯2
2

∂Wiso
∂I¯2

+

∂Wiso
iso
iso
+ I¯1 ∂W
,
, γ2 := −2 ∂W
∂I¯1
∂I¯2
∂I¯2
2
2
2
¯I 2 ∂ W¯2iso , δ2 := −4 ∂ ¯Wiso¯ + I¯1 ∂ W¯2iso
1 ∂I
∂I1 ∂I2
∂I
2

I,

where

(8)

and
iso
.
, δ3 := 4 ∂ ∂WI¯2iso , δ4 := −4 ∂W
∂I¯2
2

2

(9)

2

However, it is worth mentioning that for isotropic materials, W can alternatively be formulated as depending on
the eigenvalues of C instead of the invariants of C, where some properties must be satisﬁed by this particular form
of W (see [10]). With this formulation, general expressions for S, C, S and C also exist in the literature (see [8]).
2.4. Strong and weak formulations of the problem
The problem to be solved is to ﬁnd the displacement ﬁeld u(X) of a hyperelastic solid for every time t. The
solid’s initial conﬁguration is given by Ω, while at time t its conﬁguration is ϕt (Ω) and it is subjected to a ﬁxed
displacement u = u along ∂u Ω and a traction t = t along ∂σ Ω, where ∂Ω = ∂u Ω ∪· ∂σ Ω (so ∂u Ω ∩ ∂σ Ω = ∅).
This boils down to ﬁnding u for every time t such that (5) is satisﬁed, when a body initially represented by Ω is
subjected to the boundary conditions just mentioned, where ϕt (X) = X + u(X) and P = FS with S relating to u
through C as described in §2.3.
The strong form of the problem stated above is diﬃcult to solve directly. Therefore, an alternative formulation
of the problem, called the weak form, is often used and is in fact the formulation on which FEM is based upon.
To do this, (5) is multiplied by an appropriate vector function η ∈ V0 , called a test function, and integrated over
Ω. The space V0 := {η : Ω → R3 | η(X) = 0 for X ∈ ∂u Ω} is called the test function space. The problem now
becomes to ﬁnd the displacement of the body u for every time t such that
Ndyn (u, η) := −

Ω

(∇X · P + ρ0 (f − a)) · η dV =

Ω

P : ∇X η dV +

Ω

ρ0 (a − f) · η dV −

∂σ Ω

t · η dA = 0, (10)

for every η ∈ V0 , when the body is subjected to the same boundary and initial conditions mentioned above. When
the inertial eﬀects can be neglected (so a ≈ 0) such as when it reaches a static equilibrium, the static weak form
of the problem becomes that of ﬁnding u (notice it is a displacement which no longer depends on time) such that
N(u, η) :=

Ω

S : Dη E dV −

Ω

ρ0 f · η dV −

∂σ Ω

t · η dA = 0,

(11)

for every η ∈ V0 , for the same boundary conditions and relations as above. In (11) it was used that
P : ∇X η = FS : ∇X η = S : FT ∇X η = S : 12 (FT ∇X η + (∇X η)T F) = S : Dη E,

(12)

where the symmetry of S was used and where the directional derivative of a tensor A(ν) in the direction of the
d
tensor ν0 is deﬁned as Dν0 A := dε
A(ν + εν0 )|ε=0 . Here,
Dη E =
=

d
dε E(ϕ
1
2

+ εη)|ε=0 =

F(ϕ +

d 1
T
dε 2 (F(ϕ + εη) F(ϕ
T
εη)T dF(ϕ+εη)
+ dF(ϕ+εη)
F(ϕ +
dε
dε

+ εη) − I)|ε=0
εη)

ε=0

= 12 (FT ∇X η + (∇X η)T F).

For simplicity, from now on only the static weak form of the problem is considered.

(13)

1608

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

2.5. Linearization of the weak form
In the form of the problem being considered, the functional N(u, η) is in general nonlinear. Many methods
have been developed to try to obtain the solutions of these nonlinear problems. Among those is the NewtonRaphson method, which has the great advantage of displaying quadratic convergence close to the solution. Given
N(u, η) 0 for a particular u and some η, the method tries to ﬁnd a Δu such that N(u + Δu, η) = 0 for all η ∈ V0 ,
so the ﬁnal solution would easily be given by u + Δu. If this is not achieved, that is, if N(u + Δu, η) 0 for
some η, the process is repeated iteratively until convergence. The method is based on the Taylor expansion of
N(u + Δu, η) around u, which is simply N(u + Δu, η) = N(u, η) + DΔu N(u, η) + r(u, η), where r(u, η) represents
the higher order terms. By neglecting r(u, η), essentially a linearization of N (in its ﬁrst argument) is performed.
The Newton-Raphson method assumes that 0 = N(u + Δu, η) ≈ N(u, η) + DΔu N(u, η), so that
DΔu N(u, η) ≈ −N(u, η).

(14)

If an expression for Δu can be deduced from this relation, then the Newton-Raphson method can be used for this
nonlinear problem. The term N(u, η) is known by use of (11). An expression for DΔu N(u, η) is derived next.
Clearly, from (11)
DΔu N(u, η) =

Ω

DΔu (S : Dη E) dV −

Ω

ρ0 DΔu f · η dV −

∂σ Ω

DΔu t · η dA,

(15)

because Ω, ∂σ Ω and ρ0 are ﬁxed and do not depend on u, while η is chosen arbitrarily from V0 so does not depend
on u either. For many applications, f = g, where g is the constant gravitational acceleration vector, and tractions
t do not depend on the displacement ﬁeld u. Therefore, in those cases (which exclude the presence of follower
forces) DΔu t = 0 = DΔu f, and that is what will be assumed from now on. Hence, the only nonzero term left is
∂S
∂S
: DΔu C = 2 ∂C
: DΔu E = C : DΔu E. On the
DΔu (S : Dη E) = Dη E : DΔu S + S : DΔu (Dη E). Clearly, DΔu S = ∂C
other hand, using F(u) = I + ∇X u, (13) and that η does not depend on u,
DΔu (Dη E) =
=

d 1
T
T
dε 2 (F(u + εΔu) ∇X η + (∇X η) F(u + εΔu))|ε=0
1 dF(u+εΔu)T
∇X η + (∇X η)T dF(u+εΔu)
= 12 (∇X Δu)T ∇X η
2
dε
dε
ε=0

+ (∇X η)T ∇X Δu .

(16)

By the symmetry of S it follows that S : (∇X Δu)T ∇X η = S : 12 ((∇X Δu)T ∇X η + (∇X η)T ∇X Δu) = S : DΔu (Dη E).
Finally, under the stated assumptions, (15) becomes
DΔu N(u, η) =

Ω

(∇X η : ∇X ΔuS + Dη E : C : DΔu E) dV,

(17)

where, as in (13), DΔu E = 12 (FT ∇X Δu + (∇X Δu)T F).
2.6. Speciﬁc constituve models
In this work, only three hyperelastic nonlinear models are considered. The ﬁrst one is the St. Venant model,
whose main features are described by the equations
2

W(C) = λ2 tr 12 (C − I) + μtr 14 (C − I)2 = λ2 tr(E)2 + μtr(E2 ),
S = λtr(E)I + 2μE,
C = λI ⊗ I + 2μI I,

(18a)
(18b)
(18c)

where λ and μ are the Lam´e parameters of the given material. As mentioned in §2.1, when the elements of the
displacement gradients are small, S ≈ λtr(ε)I + 2με, which is the usual linear stress measurement that comes
accross in the literature. A similar model that satisﬁes the same property is the neo-Hookean model (see [6, 11]).
It is described by
W(C) = μ2 (tr(C) − 3) + λ4 (J 2 − 1) −
S=

λ 2
−1
+
2 (J − 1)C
2 −1
−1

C = λJ C

⊗C

λ
2

+ μ ln(J),

−1

μ(I − C ),

+ 2μ − λ(J 2 − 1) C−1

(19a)
(19b)

C−1 .

(19c)

1609

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

However, sometimes two parameters are not enough to describe a material’s behavior, especially over a wide range
of strains. This is usually the case with rubbers. Many models for rubbers exist to date (see [12] and [8]), but one
of the ﬁrst ones to be devised was that of Mooney-Rivlin [13, 14]. Its incompressible behavior is given by the
equations,
Wiso (C) = c1 (I¯1 − 3) + c2 (I¯2 − 3),

(20a)

S = 2(c1 + c2 I¯1 )I − 2c2 C,

(20b)

C = 4c2 I ⊗ I − 4c1 I

(20c)

I.

For the compressible part of the strain energy function Wvol there are a number of possibilities (see [15]), but for
this work the function Wvol (J) = ζκ2 (J ζ − 1) − ζ ln(J) was chosen, where κ is the bulk modulus and ζ > 1 is a free
parameter to be chosen.
3. Computational Model
3.1. Voigt notation
From a computational standpoint, it is useful to introduce the Voigt notation, where second and fourth order
tensors having certain symmetries can be written as vectors and matrices respectively. In general, for a symmetric
˜ and A
ˇ are deﬁned as
˜ A,
ˇ A,
second order tensor A and a fourth order tensor A having minor symmetries, A,
T ˇ
T
˜
A := [A11 , A22 , A33 , A12 , A23 , A13 ] , A := [A11 , A22 , A33 , 2A12 , 2A23 , 2A13 ] and
⎤
⎡
⎤
⎡
⎢⎢⎢A1111 A1122 A1133 2A1112 2A1123 2A1113 ⎥⎥⎥
⎢⎢⎢A1111 A1122 A1133 A1112 A1123 A1113 ⎥⎥⎥
⎢⎢⎢⎢A2211 A2222 A2233 2A2212 2A2223 2A2213 ⎥⎥⎥⎥
⎢⎢⎢⎢A2211 A2222 A2233 A2212 A2223 A2213 ⎥⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎢⎢⎢
⎢⎢⎢
ˇ := ⎢⎢⎢⎢⎢A3311 A3322 A3333 2A3312 2A3323 2A3313 ⎥⎥⎥⎥⎥ .
˜ := ⎢⎢⎢⎢⎢A3311 A3322 A3333 A3312 A3323 A3313 ⎥⎥⎥⎥⎥ , A
(21)
A
⎢⎢⎢⎢A1211 A1222 A1233 2A1212 2A1223 2A1213 ⎥⎥⎥⎥
⎢⎢⎢⎢A1211 A1222 A1233 A1212 A1223 A1213 ⎥⎥⎥⎥
⎥
⎥
⎢⎢⎢A
⎢⎢⎢A
⎢⎣ 2311 A2322 A2333 2A2312 2A2323 2A2313 ⎥⎥⎥⎦
⎢⎣ 2311 A2322 A2333 A2312 A2323 A2313 ⎥⎥⎥⎦
A1311 A1322 A1333 A1312 A1323 A1313
A1311 A1322 A1333 2A1312 2A1323 2A1313
This notation leads to many convenient expressions, which, if used appropriately, can be exploited later to give
eﬃcient computations. For example, given A1 and A2 symmetric second order tensors and A1 and A2 fourth order
tensors with minor symmetries, and letting A3 := A1 : A2 , A4 := A1 : A2 , A5 := A1 : A2 , A6 := A1 ⊗ A2 ,
˜ ˇ
ˇ ˜ ˜
ˇ ˜
˜1 · A
ˇ2 = A
ˇ1 · A
˜2 = A
ˇ TA
ˇ ˜ ˜
˜ ˜
and A7 := AT1 leads to A1 : A2 = A
2 1 , A3 = A1 A2 = A1 A2 , A4 = A1 A2 , A5 = A1 A2 ,
T
T
˜7 = A
˜ . Moreover, by deﬁning S := I I (because S : A = 1 (A + AT ) for any second order
˜6 = A
˜ 1A
˜ and A
A
2
1
2
tensor A) and B := C−1 C−1 , (7) can be rewritten as
˜ ˇT
ˇ P˜ − 2 (C
˜ −1 S˜ T + S˜ iso (C
˜ −1 )T ) + J −4/3 Pˇ C
˜ iso = 2 J −2/3 (S˜ · C)
P ,
C
iso
3
3
2

˜ −1 (C
˜ −1 )T − 2J dWvol B,
˜
C˜ vol = J dWdJvol + J 2 d dJW2vol C
dJ

(22a)
(22b)

˜ −1 )T and Pˇ = Sˇ − 1 C
˜ −1 (C
˜ −1 C
ˇ T . Finally, it is worth mentioning that if a fourth order tensor A
where P˜ = B˜ − 13 C
3
˜ is a symmetric matrix.
has minor and major symmetries, such as C, B, and S among others, then A
3.2. Discretization of functional space and geometry
Consider the space W0 := {χ: Ω → R | χ(X) = 0 for X ∈ ∂u Ω} and a vector ﬁeld z ∈ V0 . Given a certain basis
of R3 , each coordinate zi (X) of z(X) = [z1 (X), z2 (X), z3 (X)]T satisﬁes that zi ∈ W0 . Now, consider a ﬁnite subset
B := {NI ∈ W0 | I = 1, . . . , nB } ⊆ W0 , which is chosen so that the linear span span(B) is as similar to W0 as
B
zI NI (X), where the zI := [z1I , z2I , z3I ]T ∈ R3 are
possible. Therefore, z ∈ V0 can be approximated by z(X) ≈ nI=1
called the coeﬃcients of z associated to B and the NI ∈ B are called the basis functions. As a result, the gradient
∂NI
∂NI ∂NI ∂NI
B
I
∇X z can also be approximated as ∇X z(X) ≈ nI=1
zI ∂N
∂X (X), where ∂X := ∂X1 , ∂X2 , ∂X3 is a row vector ﬁeld.
Evidently for every test function η ∈ V0 these approximations are valid. Moreover, in the context of the NewtonRaphson method of the nonlinear problem being solved (see §2.5), the displacement ﬁeld calculated at iteration n,

1610

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

u(n) , is required to satisfy that u(n) = u along ∂u Ω for every n (see §2.4). If an initial guess u(0) is made such that
this condition is satisﬁed, it follows that Δu(0) = u(1) − u(0) ∈ V0 , and in general that Δu(n) ∈ V0 . Therefore, the
vector ﬁeld Δu can conveniently be viewed as an element of V0 which also satisﬁes these approximations.
nB
∂NI T T
I
Now, if Dz EI := 12 FT zI ∂N
I=1 Dz EI . Further∂X + ∂X zI F , where z is either η or Δu, it is clear that Dz E ≈
more, notice that DzˇEI = BI zI , where
⎤
⎡
∂NI
∂NI
∂NI
⎥⎥⎥
⎢⎢⎢
F21 ∂X
F31 ∂X
F11 ∂X
1
1
1
⎥⎥⎥⎥
⎢⎢⎢⎢
∂NI
∂NI
∂NI
F
F
F
12 ∂X2
22 ∂X2
32 ∂X2
⎥⎥⎥
⎢⎢⎢
⎥⎥⎥
⎢⎢⎢
∂NI
∂NI
∂NI
F13 ∂X
F
F
23
33
⎥⎥
⎢⎢⎢
∂X3
∂X3
3
(23)
BI := ⎢⎢
⎥⎥⎥ .
∂NI
∂NI
∂NI
∂NI
∂NI
∂NI ⎥
⎢⎢⎢F11 ∂X
+
F
F
+
F
F
+
F
12
21
22
31
32
⎥
∂X
∂X
∂X
∂X
∂X
⎥
2
1
2
1
2
1
⎥
⎢⎢⎢⎢
∂N
∂N
∂N
∂N
∂N
∂N ⎥
⎢⎢⎢F12 ∂X3I + F13 ∂X2I F22 ∂X3I + F23 ∂X2I F32 ∂X3I + F33 ∂X2I ⎥⎥⎥⎥⎥
⎣
∂NI
∂NI
∂NI
∂NI
∂NI
∂NI ⎦
F11 ∂X
+ F13 ∂X
F21 ∂X
+ F23 ∂X
F31 ∂X
+ F33 ∂X
3
1
3
1
3
1
T
B
This means S : Dη E = Dηˇ E S˜ ≈ nI=1
ηTI BTI S˜ (see §3.1). Also, f · η = ηT f ≈
Hence, (11) and (17) can be rewritten as

nB
I=1

ηTI NI f and t · η ≈

nB
I=1

ηTI NI t.

nB

N(u, η) ≈

ηTI RI ,

where RI :=

I=1
nB nB

DΔu N(u, η) ≈

ηTI KI J Δu J ,

Ω

BTI S˜ dV −

where KI J :=

I=1 J=1

Ω

Ω

ρ0 NI f dV −

∂σ Ω

˜ J ) dV
(gI J I + BTI CB

ˇE≈
In (25) it was ﬁrstly used that Dη E : C : DΔu E = DηˇET C˜ DΔu
∂N J
∂NI T T
∂X ηI Δu J ∂X S

NI t dA,
and

(24)

gI J :=

∂NI ∂N J T
∂X S ∂X .

nB
T T ˜
I,J=1 ηI BI CB J Δu J . The
∂NI T ∂N J
T
∂X ∂X S = ηI gI J IΔu J .

(25)

rest follows from

= ηTI Δu J tr
∇X η : ∇X ΔuS = tr(∇X ηT ∇X ΔuS) and tr
The tangent matrix K, composed of all the 3 × 3 submatrices KI J can then be constructed, and similarly the
residual R := [RT1 · · · RTnB ]T ∈ R3nB , and the vectors ηˆ and Δuˆ analogously. At last this leads to writing (14) in
§2.5 as ηˆ T KΔuˆ ≈ DΔu N(u, η) ≈ −N(u, η) ≈ −ηˆ T R, so that KΔuˆ ≈ −R since η is arbitrary. This is a linear system
of equations that can then be used to implement the Newton-Raphson method described above. Only KI J and RI
have to be calculated. There are other alternative methods to solve the nonlinear problem (see [6]), but in any
case, many of those methods also require the computation of the tangent matrix K at least once. For this, along
with the computation of R, (24) and (25) can be used.
Integration is required, in order to calculate KI J and RI . Gauss quadrature is the most common method used.
However, usually a discretization of the geometry into nE pairwise disjoint elements is ﬁrst proposed. This way
E
Ωe , where Ωe represents each element, so that one can integrate over each element independently. To
Ω = ∪· ne=1
take into account surface elements for the boundary conditions, the sets ∂σ Ωe := ∂σ Ω ∩ Ωe are deﬁned, where the
bar denotes the closure of the set. Then, in (24) the surface integral becomes ∂ Ωe NI t dA elementwise, where it
σ
would be zero if ∂σ Ωe = ∅ as usual.
This way, there would be one extra sum in (24) and (25) to approximate N(u, η) and DΔu N(u, η) respectively.
However, computationally speaking this is quite ineﬃcient. For this reason, the basis functions NI are usually
chosen so they vanish outside a certain group of elements. In fact, the discretization of Ω in elements is usually
performed ﬁrst, then the functional space is discretized based on the spatial discretization and ﬁnally the integration is done. In the process of the spatial discretization and the choice of the basis functions IGA oﬀers many
advantages.
Since a lot of basis functions vanish over certain elements, the sets Z e := {I | Ωe NI dV 0} are often deﬁned
for each element (a similar structure is deﬁned computationally). Finally, (24) and (25) become
nE

N(u, η) ≈

ηTI ReI ,

where ReI :=

e=1 I∈Z e
nE

DΔu N(u, η) ≈

ηTI KeIJ Δu J ,
e=1 I∈Z e J∈Z e

where

Ωe

BTI S˜ dV −

KeIJ :=

Ωe

Ωe

ρ0 NI f dV −

∂σ Ωe

˜ J ) dV.
(gI J I + BTI CB

NI t dA,

(26)
(27)

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

1611

3.3. PetIGA
PetIGA requires from a user the geometry, boundary conditions, and the calculation of the integrands in ReI
I
and KeIJ for a general X ∈ Ωe . For this task, PetIGA provides ∇X u(n) (X) = H(n) (X), NI (X) and ∂N
∂X (X), which is
all that is needed in this case, where u(n) denotes u in the iteration n. Then, the integration process along with the
iterative solution of the problem is taken care of by PetIGA. As an option, some control over the iterative solution
techniques (which are mostly already part of PETSc) is given to the user. Additionally, PetIGA allows to deﬁne
arbitrary tensor product reﬁnements of the mesh, where the user can choose the nodal spacing (h-reﬁnement), the
polynomial order (p-reﬁnement) as well as the continuity of the basis used (k-reﬁnement). All these are related
to the accuracy of the ﬁnal solution. Hence, PetIGA provides great versatility in the modeling and the process of
obtaining the solution of the nonlinear problem. Moreover, this is done eﬃciently, because by extension of PETSc
([5]), the eﬃciency and ability to use parallel computing is inherited.
The geometry must be speciﬁed by non-uniform rational basis splines (NURBS), which are commonly used
in software modeling of computer aided design geometry. Currently PetIGA requires the geometry to be globally
deﬁned with only three parametric directions which generate six surfaces. Then, a ﬁxed value for either a Dirichlet
or Neumann boundary condition (displacement or traction vector) is chosen at each surface.
4. Numerical Simulations
In order to illustrate and test the performance of the the three hyperelastic nonlinear models introduced in
§2.6, numerical simulations were completed using PetIGA. The problem considered was a three dimensional
hollow cylinder ﬁxed to a wall in one end and under the uniaxial action of a tension force at the other end.
4.1. Selection of parameters of the constitutive models
Several parameters were deﬁned for each of the hyperelastic constitutive models: St. Venant, neo-Hookean and
Mooney-Rivlin (see §2.6). A rubber-like material was selected to test the behavior of all the models. The rubber
bulk modulus κ, and the constants c1 and c2 from the Mooney-Rivlin model were taken from the literature (see
[12]) and are shown in Table 1. For the St. Venant and neo-Hookean models, the Lam´e parameters of the given
material were calculated using μ = 2(c1 + c2 ) and λ = κ − 23 μ (see Table 1). Additionally, in the Mooney-Rivlin
model, the parameter ζ introduced in §2.6 was taken as ζ = 2.
Table 1. Material and model parameters.
Parameter
κ
c1
c2
μ
λ

Value [MPa]
1400
0.26
-0.04
0.44
1400

4.2. Geometry and boundary conditions
A hollow cylinder of length L = 0.3 m and internal and external radii of Rin = 0.08 m and Rout = 0.11 m was
considered as the geometry for the numerical simulations. The NURBS geometry was generated using the package
Igakit which is compatible with PetIGA (see [16]) and makes use of eﬃcient algorithms detailed in the literature
(see [17]). Three parametric directions, namely the axial, circumferential and radial directions were speciﬁed and
modeled with quadratic functions. Meshes of nD × (nD + 3) × nD elements were used, making reference to the
axial, circumferential and radial directions respectively, and where nD ∈ N.
Vanishing Neumann boundary conditions (t = 0 N/m2 ) were chosen at all surfaces, except the two surfaces
perpendicular to the axial direction, which are annuli of inner and outer radii of Rin and Rout . In one of these, zero
Dirichlet boundary conditions (u = 0 m) were speciﬁed to represent the ﬁxed end of the cylinder to the wall, while
on the other Neumann boundary conditions representing a distributed axial tension force of 100 N/m2 were used
(t = [100, 0, 0]T N/m2 ).

1612

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

4.3. Results
Results were found for diﬀerent values of nD (where nE := n2D (nD + 3)) for all three models, and the values of
|u(X)| are shown in Figure 2a, where X is a point lying on the outer radius of the surface where the force is applied.
There, it is evident that there is indeed mesh convergence and that a value of nD = 14 appears to be suﬃcient to
obtain good accuracy of the results.
Figure 1 shows the results of the problem considered with each of the three models and nD = 14. At least
the Dirichlet boundary conditions are clearly seen to be satisﬁed, and as expected from a physical perspective
(given the tension force), the cross sections of the hollow cylinder were globally contracted in the radial direction
where the force was being applied. Despite looking very similar, the results for the three models diﬀer slightly.
This can be evidenced in the change of thickness of the cylinder on the suface where the force was acting, which
was initially Rout − Rin = 0.03m. In all three cases a decrease in thickness was observed, but the magnitude was
diﬀerent. Namely, for the St. Venant, neo-Hookean, and Mooney-Rivlin models the changes were of 9.8%, 9.1%
and 10.3% respectively.
Regarding the method that was used to obtain the nonlinear solution, its convergence for all three models is
shown in Figure 2b (again with nD = 14). There, one clearly observes the solver approaching the solution (via a
line search procedure used by default in PETSc) followed by quadratic convergence of the norm of the residual
towards the last iteration, which is consistent with the Newton-Raphson method and which additionally implies
that the tangent matrix K was computed correctly. The linear solver used at each nonlinear iteration (to invert K)
was direct LU factorization. Other iterative linear solvers can be chosen within PETSc, but were not used for this
work.
Additionally, the consitutive models are evidently diﬀerent (see the formulas), so the computational cost to
complete a simulation should vary accordingly. For comparison purposes, the computational cost was measured
for the three models with the clock included in PETSc (using the same machine and processor and nD = 14). The
St. Venant model took the most time (due to more iterations to converge), while the neo-Hookean and MooneyRivlin models took 8.88% and 9.00% less time respectively.

Fig. 1. Results of the numerical simulations using the St. Venant (left), neo-Hookean (middle), and Mooney-Rivlin (right) models. The initial
conﬁguration of the hollow cylinder is also shown (slightly transparent).

5. Conclusions
The three hyperelastic models proposed here in §2.6 were succesfully implemented using PetIGA. Over similar
implementations, this has the feature of using isogeometric analysis, and as a result carries its advantages. Due
to the fact that PetIGA is an extension of PETSc, even large-scale simulations with parallel computing can be
performed eﬃciently. Furthermore, a ﬂexible theoretical background was described in §2.3 to implement other
nonlinear hyperelastic models quite easily using PetIGA. This could be useful for future research, since new
models are being constantly developed to ﬁt experimental data of old and new materials (see for example [18])
and researchers sometimes need an eﬃcient high performance computational framework to test these models.
With some modiﬁcations and by considering an appropriate time stepping algorithm (such as the Newmark-β

1613

L.M. Bernal et al. / Procedia Computer Science 18 (2013) 1604 – 1613

Mesh Convergence Analysis

0.180

10
0.175

−1

10−2
10−3

0.170

||R||2

|u(X)|[mm]

Nonlinear Convergence Analysis

100

0.165

Mooney-Rivlin
neo-Hookean
St.Venant

0.160
0.155

4

6

8

nD

10

12

14

(a) Mesh convergence for all three models.

10−4
10−5
10−6
10−7
10−8
10−9
10−10 0

Mooney-Rivlin
neo-Hookean
St.Venant
2

4

6
8
Iterations

10

12

14

(b) Convergence of the residual Eucledian norm for all three models,
with nD = 14.

Fig. 2. Convergence Analysis.

method), even transient dynamic problems can be implemented in future work. Finally, simulations of complex
geometries and constitutive models better suited for biological tissues (which can be modeled as hyperelastic
materials) were left for future studies.
6. Acknowledgements
The authors want to thank Universidad de los Andes and the Department of Mechanical Engineering for the
2012 summer course Nonlinear Finite Element Analysis, as well as the useful help provided by the reviewers.
References
[1] L. Dalcin, N. Collier, PetIGA: High performance isogeometric analysis, manuscript sumbitted for publication, package in preparation:
https://bitbucket.org/dalcinl/petiga (2012).
[2] J. A. Cottrell, T. J. R. Hughes, Y. Bazilevs, Isogeometric Analysis: Toward Integration of CAD and FEA, John Wiley & Sons, New York,
2009.
[3] D. Benson, Y. Bazilevs, M. Hsu, T. Hughes, Isogeometric shell analysis: The Reissner-Mindlin shell, Computer Methods in Applied
Mechanics and Engineering 199 (2010) 276 – 289.
[4] S. Balay, J. Brown, , K. Buschelman, V. Eijkhout, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, B. F. Smith, H. Zhang,
PETSc users manual, Tech. Rep. ANL-95/11 - Revision 3.3, Argonne National Laboratory (2012).
[5] S. Balay, W. D. Gropp, L. C. McInnes, B. F. Smith, Eﬃcient management of parallelism in object oriented numerical software libraries,
in: E. Arge, A. M. Bruaset, H. P. Langtangen (Eds.), Modern Software Tools in Scientiﬁc Computing, Birkh¨auser Press, 1997, pp.
163–202.
[6] P. Wriggers, Nonlinear Finite Element Methods, Springer, Berlin, 2008.
[7] O. Gonzalez, A. M. Stuart, A First Course in Continuum Mechanics, Cambridege University Press, New York, 2008.
[8] G. A. Holzapfel, Nonlinear Solid Mechanics, John Wiley & Sons, West Sussex, 2000.
[9] P. J. Flory, Thermodynamic relations for high elastic materials, Trans. Faraday Soc. 57 (1961) 829–838.
[10] R. W. Ogden, Nonlinear Elastic Deformations, Cambridge University Press, New York, 1997.
[11] J. C. Simo, T. J. R. Hughes, Computational Inelasticity, Springer-Verlag, New York, 1998.
[12] P. Steinmann, M. Hossain, G. Possart, Hyperelastic models for rubber-like materials: consistent tangent operators and suitability for
Treloar’s data, Arch Appl Mech 82 (2012) 1183–1217.
[13] M. Mooney, A theory of large elastic deformation, Journal of Applied Physics 11 (9) (1940) 582 –592.
[14] R. S. Rivlin, Large elastic deformations of isotropic materials. IV. Further developments of the general theory, Philosophical Transactions
of the Royal Society of London. Series A, Mathematical and Physical Sciences 241 (835) (1948) 379–397.
[15] S. Doll, K. Schweizerhof, On the development of volumetric strain energy functions, Journal of Applied Mechanics 67 (2000) 17–21.
[16] A. H. Niemi, N. Collier, L. Dalcin, M. Ghommem, V. M. Calo, Isogeometric shell formulation based on a classical shell model, Proceedings of the Eleventh International Conference on Computational Structures Technology.
[17] L. Piegl, W. Tiller, The NURBS Book, Monographs in Visual Communication, 1995.
[18] M. M. Carroll, A strain energy function for vulcanized rubbers, Journal of Elasticity 103 (2011) 173–187.

