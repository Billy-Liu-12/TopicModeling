Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2406 – 2409

International Conference on Computational Science, ICCS 2013

Utilizing robustness of Krylov subspace methods in reducing the
eﬀort of sparse matrix vector multiplication
Ahmad Mansour∗, J¨urgen G¨otze
Information Processing Lab, TU Dortmund, Otto-Hahn-Str. 4, Dortmund 44227, Germany

Abstract
Iterative solvers based on Krylov subspace method proved to be robust in the presence of inexact matrix vector products. In this
paper, the inexactness is induced by reducing the number of nonzero elements of the matrix while maintaining the convergence
of the iterative solver. We beneﬁt from this property by reducing the computational eﬀort and the communication volume when
implementing sparse matrix vector multiplication (SMVM) on Network-on-Chip (NoC).
Keywords: Krylov based iterative solvers; inexact matrix vector product; sparse matrix vector multiplication

1. Introduction
Iterative solvers based on Krylov subspace method are considered to be among the most eﬀective solvers
for large linear systems. These methods rely on ﬁnding an approximate solution in a lower dimensional subspace
called the Krylov subspace. During the run of these methods, matrix vector multiplication (MVM) is performed in
each iteration in order to generate and extend the Krylov subspace. If the system matrix is sparse, the computation
cost of the iterative solver is mostly spent in sparse matrix vector multiplications (SMVM) [1, 2].
Researchers found that iterative solvers based on Krylov subspace method perform well even with the presence
of inexact matrix vector product [3, 4, 5]. The amount of inexactness is allowed to grow throughout iterations
without aﬀecting the convergence of the iterative solver. In contrast to the previously mentioned papers which
study the robustness of Krylov subspace methods from numerical analysis point of view, we beneﬁt from this
powerful property in reducing the computation cost of SMVM in an NoC. This is done by reducing the number of
nonzero elements in the considered matrix while maintaining the convergence of the iterative solver. This can be
very beneﬁcial in case of matrices with big diﬀerences in the magnitude of their elements as, e.g., matrices from
modeling 2D ﬂuid ﬂow in a driven cavity, and matrices representing dynamic analyses in structural engineering.
As an example for iterative solvers based on Krylov method, we apply our approach to the Generalized Minimal
Residual method (GMRES) [6].
In the following section, we introduce the practical background which motivates our investigations. The
theoretical background of the iterative solver is discussed in Section 3. In Section 4, we introduce our reduction
mechanism which is used to produce the inexactness. The numerical experiments are discussed in Section 5.
Finally, we conclude this paper in Section 6.
∗ Corresponding

author. Tel.: +49-231-755-7018 ; fax: +49-231-755-7019.
E-mail address: ahmad.mansour@tu-dortmund.de.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.412

Ahmad Mansour and J¨urgen G¨otze / Procedia Computer Science 18 (2013) 2406 – 2409

2407

2. Practical Background
The computation of SMVM in general purpose processors is ineﬃcient. This is due to the irregular data
transfers and the high number of memory accesses compared to the number of ﬂoating point operations. Hence,
researchers tried to enhance the poor performance of SMVM computations by modifying the existing algorithms
or by using accelerators as, e.g., graphics processing unit (GPU) [7], and FPGA-based accelerators [8]. In our
previous work [9, 10], we implemented an SMVM accelerator using an FPGA-based NoC. In this implementation,
only the SMVM is performed on the accelerator while the rest of the iterative algorithm is performed by the host
PC. In this case the matrix has to be loaded in each iteration to perform the matrix vector product.
Matrix elements are read row-wise from memory and then injected into a k × k mesh of nodes. For an N × N
sparse matrix with nz nonzero elements, the number of ﬂoating point operations in SMVM is 2nz − N. The
communication volume (the number of sent messages) cannot be determined from the number of nonzeros as it
depends on the sparsity structure of the matrix and the used data mapping method. Regardless of matrix structure,
the communication volume rises with the number of the nonzero elements. Hence, we aim to reduce the number of nonzeros such that computation and communication costs are reduced while simultaneously taking into
consideration the convergence of the iterative solver.
3. Theoretical Background
Given a system of linear equations Ax = b, the goal is to ﬁnd a solution (x∗ ) such that the norm of the residual
(r) is less than the targeted tolerance (η), i.e., with r = b − Ax, one obtains r 2 = b − Ax 2 < η for x = x∗ . In
Krylov subspace methods, the iterative solver aims to ﬁnd an approximate solution in a Krylov subspace Km (A, v1 ).
This subspace of candidates is spanned by {v1 , Av1 , A2 v1 , ..., Am−1 v1 }, where v1 = r0 / r0 2 .
As an example for Krylov methods, we discuss GMRES. The details of GMRES algorithm can be found in
Algorithm 1, where matrix vector multiplication is performed in line 3 to generate the new Krylov vector.
Algorithm 1 GMRES
1. r0 = b − Ax0 , β = r0 2 , v1 = r0 /β
2. for i = 1, 2, ..., do
3.
w = Avi
4.
for k = 1, .., i do
5.
hk,i = wT vk
6.
w = w − hk,i vk
7.
end for
8.
hi+1,i = w 2
9.
vi+1 = w/hi+1,i
10.
Solve min βe1 − H¯ i y 2
y

11.
If satisﬁed, Set x = x0 + Vi y and quit
12. end for

In lines (2-9), Arnoldi iteration is used in GMRES to build an orthogonal basis (Vm ) for the Krylov subspace.
After m iterations, one obtains AVm = Vm+1 H¯ m , where Vm = [v1 , v2 , ..., vm ] is an orthogonal matrix, H¯ m is an
(m + 1) × m upper Hessenberg matrix whose nonzeros (hi j ) are calculated in lines 5 and 8. As it can be seen from
line (10), one solves an m-dimensional system instead of solving the original system.
Another variant of GMRES is the restarted GMRES, or simply GMRES(m). As the name implies, the algorithm is restarted after a given number of iterations (m) as the computation and storage cost of GMRES algorithm
grows with the number of iterations. The intermediate solution is used to initialize the next restart while old
stored data are cleared. Finally, iterative solvers may suﬀer from slow convergence for some matrices. Therefore,
a preconditioner is usually applied to enhance the convergence speed by solving an equivalent system but with
better spectral properties. In Section 5, incomplete LU factorization (ILU) is used in order to implement a left
preconditioner for some experiments. For more details on Krylov subspace methods and preconditioners, refer to
Saad [6].

2408

Ahmad Mansour and J¨urgen G¨otze / Procedia Computer Science 18 (2013) 2406 – 2409

4. Convergence Under Inexact Products
In a Krylov method using inexact matrix vector products, a perturbed matrix is used instead of the original
matrix for creating the Krylov subspace. That is, the term w = Av in Algorithms 1 is replaced by w = A˜ i v, where
A˜ i = (A − ΔAi ) is the perturbed matrix in the ith iteration and ΔAi is the perturbation matrix. In this paper, the
perturbation is represented by gradually reducing the number of nonzero elements in the matrix. This is done by
ignoring matrix elements which are relatively small compared to the maximum previous element in the same row.
That is, ai j is ignored if |ai j | < ε × max(|aik |k=1,..., j−1 ), where ε is the perturbation parameter. As the norm of the
perturbation is allowed to grow throughout iterations [3, 4, 5], the reduction parameter is increased as the residual
converges to the targeted tolerance. The reduction parameter is described as follows;
η
)/m,
(1)
ε = min(εmax ,
r˜k−1 2
where εmax is the maximum limit which prevents the parameter from being too big, η is the targeted tolerance, and
r˜k−1 2 is the norm of the residual taken from the previous iteration: r˜k−1 2 = βe1 − Hy 2 . The GMRES residual
(˜r) is the same as the true residual (b − Ax) when using exact matrix product [6], but it can be diﬀerent in the
inexact case. The term is divided by m as the error may accumulate if the size of the subspace is relatively big.
One important property of GMRES is that the GMRES residual never increases in case of using exact MVM.
However, this may not be always true for the inexact case. Therefore, exact MVM is performed at the beginning
of each restart to compare the two residuals and reduce the reduction parameter (ε) if required.
5. Numerical Experiments
In this section, we perform experiments discussing the GMRES(m) and the preconditioned GMRES(m) using
matrices from real applications [11]. The value of εmax in Eq. (1) is matrix-dependent. However, it is found
through many experiments that εmax = 10−3 is a good value for all tested cases. The true residual (not the GMRES
residual) in the following ﬁgures needs not to be calculated in the algorithm for both exact and inexact cases.
However, it is calculated in the experiments for illustration purpose only.
Figure 1 shows the convergence of residuals (Fig. 1(a) , 1(b) and 1(c)) and the corresponding reduction rates
(Fig. 1(d) , 1(e) and 1(f)) for FS 760 1, BCSSTM07 and CAVITY03, respectively. In the ﬁrst example, FS 760 1,
a 760 × 760 matrix, is used with restart size m=40 and targeted tolerance η = 10−14 . The second test matrix is
BCSSTM07, a 420 × 420 matrix. The targeted tolerance is η = 10−10 and the algorithm is restarted after m=100
iterations. In third example, ILU is utilized to implement a left preconditioner for CAVITY03, which is a 317 × 317
matrix. The drop tolerance for ILU is 10−3 , the algorithm is restarted after m = 10 iterations and the targeted
tolerance is η = 10−14 .
As shown in Fig. 1, the convergence in the inexact case is identical to that for the exact case even with the
presence of high reduction rates. The straight lines in reduction rate plots during the last iterations implies that
the parameter ε reaches its maximum (εmax ) and no more reduction is allowed. The ﬁrst test matrix (FS 760 1) is
a typical example for our proposed reduction method as the diﬀerence in magnitude of its elements is extremely
big (in the range of [2.10−23 , 2.108 ]). Therefore, the reduction rate for this case (Fig. 1(d)) is much higher than the
other two cases (Fig. 1(e) and 1(f)).
Going back to our NoC, we compare the eﬀort of performing exact and inexact SMVM in the NoC. The
reduction in the number of ﬂoating point operations is approximately the same for a speciﬁc reduction ratio
regardless of the used matrix. On the other hand, the amount of reduction in the communication volume depends
on the system architecture, the data mapping method, the sparsity structure of the matrix and the positions of the
ignored nonzeros in that matrix.
As an example, SMVM in NoC is performed using BCSSTM07 and its reduced version with 20% less nonzeros.
Simulation results show that the NoC performs 20% less ﬂoating point operations and 18% less sent messages
between its nodes in case of using the reduced matrix. Although the NoC has to compare all matrix elements
in each iteration with the corresponding threshold, the computational cost spent in this comparison is still much
less than performing exact SMVM. This is because omitting one nonzero element causes two less ﬂoating point
operations and fewer sent messages. This in turn reduces the network traﬃc, which is one of the main concerns in
our NoC [10].

2409

Ahmad Mansour and J¨urgen G¨otze / Procedia Computer Science 18 (2013) 2406 – 2409
0

0

0

10

10

exact MVM

exact MVM

exact MVM

inexact MVM

inexact MVM

inexact MVM

10

−10

10

relative residual

−5

−5

relative residual

relative residual

10

−5

10

10

−10

10

−10

10

−15

10

−15

10

20

40

60
80
number of iterations

100

120

0

100

(a)

200
300
number of iterations

400

500

5

(b)

50

26

30

20

10

40

60
80
number of iterations

100

120

24
23
22
21

(d)

19
0

35

40

30

35

40

11

20
20

30

12

deletion percentage (%)

deletion percentage (%)

deletion percentage (%)

40

15
20
25
number of iterations

(c)

25

0

10

10
9
8
7
6
5
4

100

200
300
number of iterations

400

500

(e)

3

5

10

15
20
25
number of iterations

(f)

Fig. 1. Convergence and reduction percentage

6. Conclusion and Future Work
In this paper we made use of the robustness of the iterative solvers based on Krylov methods by reducing
the number of nonzero elements of the matrix. It was shown that the reduction mechanism was very beneﬁcial
compared to other approaches because it does not require costly calculations as, e.g., the norm of the perturbation
matrix. Although we applied our approach to GMRES, it can be also applied to other Krylov methods as CG,
FOM, etc.
The proposed method can be useful for similar systems in which matrices have to be loaded in each iteration.
In such cases, the computational cost spent in the comparison is much less than performing exact multiplications.
As future work, we aim to optimize the reduction mechanism such that we get as many ignored nonzeros as
possible while maintaining the same convergence. Besides, a dedicated routine for the reduction method has to be
made such that the computational cost in exact and inexact cases can be made on a general purpose processor.
References
[1] M. deLorimier, A. DeHon, Floating-point sparse matrix- vector multiply for FPGAs, in: International Symposium on FieldProgrammable Gate Arrays, Monterey, California, USA, 2005, pp. 75–85.
[2] G. Morris, V. Prasanna, Sparse matrix computations on reconﬁgurable hardware, Computer 40 (3) (2007) 58–64.
[3] A. Bouras, V. Frayss´e, Inexact matrix-vector products in Krylov methods for solving linear systems: A relaxation strategy, SIAM Journal
on Matrix Analysis and Applications 26 (3) (2005) 660–678.
[4] V. Simoncini, D. B. Szyld, Theory of inexact Krylov subspace methods and applications to scientiﬁc computing, SIAM Journal on
Scientiﬁc Computing 25 (2) (2003) 454–477.
[5] S. Gratton, P. L. Toint, J. T. Ilunga, Range-space variants and inexact matrix-vector products in Krylov solvers for linear systems arising
from inverse problems, Tech. Rep. TR/PA/10/14, CERFACS, Toulouse, France (2011).
[6] Y. Saad, Iterative Methods for Sparse Linear Systems, PWS Publishing, Boston, MA, 1996.
[7] N. Bell, M. Garland, Eﬃcient sparse matrix-vector multiplication on CUDA, NVIDIA Technical Report NVR-2008-3004.
[8] Y. El-Kurdi, D. Fern´andez, E. Souleimanov, D. Giannacopoualos, W. J. Gross, FPGA architecture and implementation of sparse matrixvector multiplication for the ﬁnite element method, Computer Physics Communications 178 (2008) 558–570.
[9] C.-C. Sun, J. G¨otze, H.-Y. Jheng, S.-J. Ruan, Sparse matrix-vector multiplication on network-on-chip, Advances in Radio Science 8
(2010) 289–294.
[10] H.-Y. Jheng, C.-C. Sun, S.-J. Ruan, J. G¨otze, FPGA acceleration of sparse matrix-vector multiplication based on network-on-chip, in:
19th European Signal Processing Conference (EUSIPCO), Barcelona, 2011, pp. 744–748.
[11] R. Boisvert, R. Pozo, K. Remington, R. Barrett, J. Dongarra, Matrix Market: A web resource for test matrix collections, in: R. Boisvert
(Ed.), The Quality of Numerical Software: Assessment and Enhancement, Chapman & Hall, London, 1997, pp. 125–137.

