Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2337 – 2346

International Conference on Computational Science, ICCS 2013

A guided hybrid genetic algorithm for feature selection
with expensive cost functions
Martin Junga,∗, Jakob Zscheischlera,b,c
a Max

Planck Institute for Biogeochemistry, Hans-Kn¨oll-Str. 10, 07745 Jena, Germany
Planck Institute for Intelligent Systems, Speemanstr. 38, 72076 T¨ubingen, Germany
c Institute for Atmospheric and Climate Science, Eidgen¨
ossiche Technische Hochschule (ETH) Zurich, 8092 Zurich, Switzerland
b Max

Abstract
We present a guided hybrid genetic algorithm for feature selection which is tailored to minimize the number of cost function
evaluations. Guided variable elimination is used to make the stochastic backward search of the genetic algorithm much more
eﬃcient. Guiding means that a promising feature set is selected from a population and suggestions (for example by a trained
Random Forest) are made which variable could be removed. It uses implicit diversity management and is able to return
multiple optimal solutions if present, which might be important for interpreting the results. It uses a dynamic cost function
that avoids prescribing an expected upper limit of performance or the number of features of the optimal solution. We illustrate
the performance of the algorithm on artiﬁcial data, and show that the algorithm provides accurate results and is very eﬃcient
in minimizing the number of cost function evaluations.
Keywords: feature selection, genetic algorithm, Random Forests, diversity, niching, cost function

1. Introduction
One of the largest limitations of data-driven modeling is the choice of the right predictor variables. In some
cases vast amounts of predictor variables are available but computational limits prohibit the use of all variables
and the identiﬁcation of informative predictors is desired. Feature selection aims to ﬁnd a suitable (preferably the
best) subset of features according to a speciﬁed cost function. The cost function can be formulated to choose the
set of features with smallest error of the base learner [1], the smallest error of the base learner for a predeﬁned
number of included features [2], or the smallest number of included features for a targeted error margin [3].
Variants of sequential search algorithms [4] and genetic algorithms (GA) [3] are among the most frequently
used feature selection approaches. While sequential methods tend to provide good results for small to medium
sized problems (several tens of features), global search algorithms like GAs tend to be more suitable for large
scale problems (> 100 features) since sequential methods get easily stuck in local minima [2]. GAs can also
be prone to premature convergence if a ’too good solution’ is found too early. Though this can be avoided
by mechanisms that maintain genetic diversity in the population [5]. GAs essentially behave like a stochastic
backward search: When the GA has found acceptable feature subsets it moves towards fewer features over the
∗ Corresponding

author.
E-mail address: mjung@bgc-jena.mpg.de.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.405

2338

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

course of the search. However, this stochastic backward search is highly ineﬃcient because of the randomized
nature of the genetic operators (selection, mutation, crossover). Hybrid genetic algorithms [2] combine a GA with
local search operations (sequential forward or backward selection) to move solutions proposed by the GA to local
optima, i.e. the solutions are ‘repaired’. But again, such a repairing mechanism is computationally very expensive
and not feasible for large scale problems and expensive cost function evaluations. In this paper we propose a
Guided Hybrid Genetic Algorithm (GHGA) for the following feature selection problem set:
• The evaluation of the cost function is extremely expensive (for example because it involves training a machine learning algorithm). This justiﬁes operations of GHGA that are more computationally expensive than
simple search strategies, while minimizing the number of necessary cost function evaluations.
• The number of candidate variables is large, e.g. in the order of several hundreds.
• The number of variables that are necessary to achieve an acceptable result is not known and should be found
by the algorithm.
• The algorithm should be able to return several solutions (if they exist) to aid interpretability of the results
(multiple optima).
• The assumption that unnecessary or not informative variables do not decrease the error should be avoided
because this is frequently violated, e.g. if the ratio of variables to examples is large.
2. Description of the Guided Hybrid Genetic Algorithm (GHGA)
2.1. Notations
Chromosomes and features. We adopt the nomenclature of genetic algorithms where a chromosome c consists of
individual genes. Thus, c is a bit-string and the genes encode which features are included (1) and excluded (0).
The length of c is the total number of candidate features (genes) n. We denote the set of included features as c1 ,
and the set of excluded features as c0 , with nc1 and nc0 being their respective lengths.
Chromosome comparison. In the comparison of two chromosomes c1 and c2 we denote u(c1 , c2 ) as the set of
common genes (either 0 or 1), where nu(c1 ,c2 ) is its length. We denote u1 (c1 , c2 ), and u0 (c1 , c2 ) as the set of
common genes that are included, and excluded, respectively. Their corresponding lengths are nu1 (c1 ,c2 ) , and nu0 (c1 ,c2 )
respectively. The set of genes that are not common among c1 and c2 is x(c1 , c2 ) with n x(c1 ,c2 ) being its length. We
use the following measure to estimate the dissimilarity d(c1 , c2 ):
nu1 (c1 ,c2 )
.
(1)
d(c1 , c2 ) = 1 −
nc11 · nc12
Cost function. We denote the evaluation of the cost function for chromosome c as [ j(c), m(c)] = EV AL(X(c), Y),
where X(c) is the matrix of explanatory variables for c, and Y is the response variable. The evaluation returns
the cost function value j(c), and its modeling eﬃciency m(c) [6]. The cost function is designed to extract sets
with minimum number of included features for which the performance stays within a tolerance margin of the best
known performance. The cost function value j(c) is the sum of nc1 and a penalty term p that depends on m(c),
the maximum m found over the course of the search max (MA ) and a speciﬁed tolerance (modiﬁed from [3]).
Modeling eﬃciency is computed using cross-validation (e.g. using a test set), where YCV is the cross-validated
predicted response variable.
j(c) = nc1 + p(m(c), max (MA ), ) ,
p(m(c), max (MA ), )

=

m(c) =

ln(2)

e[max (MA )−m(c)] − 1 = 2
var(Y − YCV (c))
.
1−
var(Y)

max (MA )−m(c)

(2)
− 1,

(3)
(4)

For p it holds 0 ≤ p ≤ 1 if max (MA ) − m(c) ≤ . In contrary, if max (MA ) − m(c) >> , p rapidly increases helping
the algorithm to concentrate the search in the promising region of the feature selection lattice. Since max (MA )
varies over the course of the search, j is recomputed for all individuals if a new max (MA ) is found. This dynamic
cost function avoids prescribing a maximum modeling eﬃciency (e.g. based on the set with all features included).

2339

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

chromosome
properties
comparison of
chromosomes
c1 and c2

properties of
evaluated
chromosomes

populations

Symbol

Description

c with length n
c0 with length nc0
c1 with length nc1
u(c1 , c2 ) with length nu(c1 ,c2 )
u0 (c1 , c2 ) with length nu0 (c1 ,c2 )
u1 (c1 , c2 ) with length nu1 (c1 ,c2 )
x(c1 , c2 ) with length n x(c1 ,c2 )
d(c1 , c2 )
j∈J
m∈M
s∈S
h∈H
t∈T
z∈Z
A with length nA
R with length nR
B with length nB

chromosome (bit string; 0: excluded, 1: included)
set of excluded features in chromosome c
set of included features in chromosome c
set of common genes (included or excluded)
set of common excluded genes
set of common included genes
set of diﬀerent genes (included or excluded)
dissimilarity
cost function value
modeling eﬃciency value
crowding index
ﬂag: dominated (1) or not (0) by another individual
freq. of selections for guided variable elimination
ﬂag: inert (1) or not (0)
archive, stores all evaluated chromosomes
reproductive population, R ⊂ A
candidates for guided variable elimination, B ⊆ R

Table 1. Summary of notations.

Populations and sets. GHGA uses a hierarchical population structure:
• A denotes the archive with length nA , which stores all chromosomes C A and their corresponding sets of
modeling eﬃciency values MA , and cost function values JA ;
• R denotes the reproductive population of the GA with R ⊂ A, i.e. elements from CR can be subject to genetic
operators (selection, crossover, mutation);
• B denotes the population from which one individual is selected for local guided feature elimination, B ⊆ R.
We denote sets with capital letters, and elements of a set with its corresponding small letter. The length of the set
is denoted as n with its corresponding set as subscript, e.g. nA for the number of elements in A. We use the index k
for elements of a population such that e.g. c = C A (k) and j = JA (k) is a chromosome from A and its corresponding
cost function value at index k. Table 1 summarizes the notation.
2.2. Algorithm overview
Symbol

Description

Default value

λ
ψ
δ
ρ
θ
φ
κ

modeling eﬃciency tolerance parameter in the cost function
number of iterations of phase 1
frequency (in number of cost function evaluations) of retraining G
dissimilarity threshold used in the construction of R
maximum number of similar chromosomes in R
shape parameter of mutation rate decline used in phase 1
mutation rate used in phase 2
parameter controlling size of tournament in selection of a chromosome from B

0.005
2·n
50
0.5
5
0.5
0.05
5

Table 2. List of GHGA parameters with default values.

GHGA operates in two main phases. In the ﬁrst phase only the GA operates with a declining mutation rate.
After λ iterations (default = 2 · n) the second phase starts where the guided feature elimination is employed

2340

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

in addition. We use a steady-state GA where the reproductive population R is newly extracted from A in each
iteration. The reproduction involves the common procedure: parents are selected from R, their chromosomes are
recombined using a crossover operation, and the resulting children are subject to mutation. In each iteration two
children are generated and their cost function will only be evaluated if they do not have a duplicate in A to avoid
redundant evaluations (omitted in Algorithm 1 for clarity). In the second phase of the algorithm, B is created from
R and one individual selected from B is subject to local feature elimination using G. G is a model trained on A
and predicts m(c) to guide the feature elimination. G is retrained after a certain number ψ (default=50) of cost
function evaluations have passed since the last training of G. The algorithm terminates if one of the following
condition is met:
• no new best cost function value or modeling eﬃciency estimate or optimal result was found for a certain
number cost function evaluations (recommended). Optimal result is deﬁned as a chromosome with a modeling eﬃciency that is within the tolerance max (MA ) − m(c) < and a number of included features that is
equal to the minimum of included features in A where max (MA ) − m(c) < ,
• the maximum allowed run time has passed,
• the maximum allowed number of function evaluations has passed.
Algorithm 1 gives an overview of GHGA. Below we provide more details on the individual steps of GHGA. All
parameters of GHGA (given as greek letters) are listed in Table 2.
Algorithm 1 Guided Hybrid Genetic Algorithm
1: Initialize a ﬁx number of random chromosomes; add a chromosome where all features are included
2: Evaluate chromosomes to generate the initial archive A (EV AL)
3: nit = 1 (iteration counter), retrain = nA (retrain counter for G)
4: while convergence criterion not met do
5:
Extract the reproductive population R from A (Section 2.3, Algorithm 2)
6:
Select two chromosomes from CR for reproduction (Section 2.4)
7:
Cross them and get children c1 and c2 (Section 2.4)
8:
Calculate mutation rate from nit ; Apply mutation to c1 and c2 (Section 2.4)
9:
Evaluate c1 and c2 (EV AL)
10:
Add c1 , c2 , j(c1 ), j(c2 ), m(c1 ), m(c2 ) to A; update nA
11:
if nit > λ (algorithm is in the second phase) then
12:
if nA > ψ + retrain (G should be retrained) then
13:
Train G based on A; set retrain = nA
14:
end if
15:
Extract a subset B of the population R (Section 2.5, Algorithm 3)
16:
Select one chromosome c from B
17:
Do guided feature elimination for c using G (involves EV AL; Section 2.5, Algorithm 4)
18:
Add evaluated chromosomes to A; update nA
19:
end if
20:
nit = nit + 1
21: end while
2.3. Extraction of the reproductive population R from A
The way the population of chromosomes is managed is crucial for the performance of GAs in terms of the
speed of convergence and diversity management to avoid premature convergence, and to favor the search for
multiple distinct optima. The approach adopted here was inspired by work on multi-objective optimization using
non-dominated sorting and crowding schemes [7, 8]. We ﬁrst introduce some further properties of chromosomes:
whether it is inert (z), whether it is dominated by other genes (h), and its crowding index (s). The crowding index
s measures the crowdedness of chromosomes around chromosome c as:
1
s(c) =
nc1

nA

nu1 (c,CA (k)) .
k=1

(5)

2341

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

If there are many chromosomes in the archive that share many included features nc1 then s(c) is large.
A chromosome c is inert (z = 1) if the full set of ’leave one variable out’ Clo with nClo = nc1 exists in the the
archive. Inert chromosomes are basically ﬂagged as (local) optima, since all combinations were tested with each
included feature of c1 being removed at a time. Inert chromosomes and are not considered when R is created, i.e.
they are not allowed to reproduce. A chromosome c1 is dominated (h(c1 ) = 1) if there exists at least one other
chromosome (c2 ) in A where c12 ⊂ c11 , where j(c2 ) ≤ j(c1 ). In other words, for dominated chromosomes there is
another chromosome in the archive which has a subset of included features and at least equal performance.
A subset of A will be selected in R according to Algorithm 2 that aims at balancing the search in diﬀerent
promising regions of the feature selection lattice. A is sorted from best to worst according to JA and the best
individual A(1) is added to R such that nR = 1. Then we loop over the chromosomes of the sorted archive A using
the index k. We assess whether the chromosome is dominated or inert. If not, we compute the dissimilarities
Dk between the chromosome C A (k) and all in CR , as well as its crowding index S A (k). We select A(k) in R if
its crowding index S A (k) < min(S R ), and if there are less than ρ (default=5) chromosomes already in R with a
smaller dissimilarity to C A (k) than δ (sometimes referred as niche radius, default=0.5). The crowding scheme
and truncating the number of similar chromosomes in R helps in maintaining genetic diversity to avoid premature
convergence, and to allow for multiple distinct optima. The algorithm stops accumulating individuals in R if
MA (k) < median(MA ). This is an elitist scheme where poor individuals are not allowed to reproduce.
Computing the crowding index, as well as the domination and inert conditions for each chromosome in A in
each iteration would be very expensive. Computational costs can be kept at a minimum if a matrix Nu1 with size
(nA , nA ) is used that stores the pairwise number of common included features nu1 . Nu1 is completed (updated) only
for the relevant chromosomes (see index k in Algorithm 2) and does not need to contain all pairwise nu1 .
Algorithm 2 Extraction of the active population R
1: Sort A ascending (best to worst) according to JA , add A(1) to R, initialize counter k = 2
2: while MA (k) > median(MA ) do
3:
Update Nu1 (k); assess if chromosome is dominated or inert and get h and z
4:
Calculate dissimilarities of chromosome C A (k) and all chromosomes in CR
5:
Count number of dissimilarities nδ that are smaller than δ
6:
if (h = 0 AND z = 0 & S A (k) < min(S R ) & nδ < ρ) then
7:
Add A(k) to R
8:
end if
9:
k=k+1
10: end while

2.4. Genetic operators
Here, we brieﬂy describe how two chromosomes are selected from the reproductive population R, crossed, and
mutated in the GA.
Selection. The ﬁrst parent c1 is selected randomly from R. Binary tournament selection [9] is used to select the
second parent. The dissimilarities of two randomly taken individuals from R are compared and the one with a
smaller dissimilarity to c1 is selected as the second parent (c2 ). Note that c1 and c2 can be identical which causes
only mutation and no crossover. Dissimilarities between c1 and CR in the tournament selection was chosen to
reduce the probability of lethal children which originate from too distant parents due to the search in diﬀerent
regions of the feature selection lattice. In addition this selection scheme has low selection pressure and therefore
is beneﬁcial for the diversity of the population.
Crossover. The genes of both selected parents (c1 and c2 ) are recombined based on the subset size oriented
commonality crossover (SSOCF [10]), which had been designed for the purpose of feature selection. SSOCF
ensures that each child has on average the same number of included features as either of the parents. SSOCF
n 1 −n 1
creates two children with u1 (c1 , c2 ). The ﬁrst child inherits features of x(c1 , c2 ) with probability c nx(cu ,c(c1),c2 ) . The
1 2

2342

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

second child is complementary to the ﬁrst and inherits those features of x(c1 , c2 ) which were not passed to the
ﬁrst.
Mutation. Both children are subject to subset size oriented mutation [2] such that we keep on average nc1 after
to decide
mutation. A mutation rate r1 is used to decide which of c1 are to be excluded. A mutation rate r0 is θused
λ −nθ
n
which of c0 are to be included with r0 = r1 · nc10 [2]. We use a declining mutation rate r1 = max λθ −1it + φ, φ as
c
a function of the iteration number nit during the ﬁrst phase of the search, and keep it at a constant rate φ (default
= 0.05) during the second phase of the search. λ is a parameter that controls at which iteration number r1 = φ
(default=2 · n) and θ is a shape parameter (default=0.5).
2.5. Guided feature elimination
Extraction of the population B from R. The population B stores potential individuals that can be selected for
guided feature elimination. B is identical to R if no inert individuals (local minima) exist yet. Otherwise, B is
extracted from R according to Algorithm 3 such that it favors individuals that are more dissimilar from the inert
individuals, which represent local minima.
Algorithm 3 Extraction of population B
1: Sort R ascending (best to worst) according to cost function values
2: For each chromosome in R calculate the smallest distance to all inert chromosomes and get DR
3: Add R(1) to B (and DR(1) to D B )
4: for k = 2 : nR do
5:
if DR(k) > max(DB ) then
6:
Add R(k) to B
7:
end if
8: end for

Selection from B. One individual from B is selected for guided feature elimination using tournament selection.
The size of the tournament scales with nB and is nκB , where κ is a parameter (default=5). We keep track of how
often this chromosome has been selected for guided backward elimination t(c) and increment this by one.
Guide G. The role of G is to guide variable elimination for a selected chromosome. G can be in principle anything
∗
for all ’leave one variable out’ combinations
that provides an anticipated ranking of modeling eﬃciencies Mlo
Clo . Our default mode of G is Random Forests [11]. Random Forests is trained using A to get G, where C A
is the matrix of explanatory (categorical) variables, and MA is the response variable. We further implemented
two simpler modes of G: a random estimate, and the sum of selection frequencies. The latter simply sums the
frequency of a feature being present in A for all features of the current feature subset.
Guided feature elimination algorithm. The chromosome c is declared as master and subject to guided feature
elimination using G where b(c) deﬁnes the maximum number of cost function evaluations f cntmax that are spent
∗
for all possible ’leave one feature out’ combinations
(Algorithm 4). G predicts the modeling eﬃciencies Mlo
∗
using the index k. If Jlo (k) < j(c)
Clo . Then the chromosomes of Clo are evaluated in descending order of Mlo
then the search continues with Clo (k) being the new master chromosome. The guided feature elimination stops
when the maximum number of function evaluations were reached, or when all possible Clo were evaluated and no
chromosome with a smaller cost function value than the master was found.
2.6. Discussion of GHGA parameters
The modeling eﬃciency tolerance parameter of the cost function measures the acceptable deviation from
the highest (found) accuracy. Thus it controls the parsimony (simplicity-accuracy trade-oﬀ) of the result, and
should be set according to user requirements. Most other parameters control the exploration-exploitation tradeoﬀ. For hard problems (e.g. many candidate features, strong correlation among features, several optima likely),
the simplest way to enhance the exploration is to increase number of iterations where only the GA operates λ, and

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

2343

Algorithm 4 Guided feature elimination algorithm
1: Deﬁne chromosome c as master, Set f cntmax = b(c), Set f lagmaster = 1
2: f cnt = 0 (Initialize counter of cost function evaluations)
3: while f cnt ≤ f cntmax & nc1 ≥ 1 & f lagmaster = 1 do
4:
Generate all possible leave one variable out combinations for c and get Clo with length cn1
∗
5:
Mlo
= G(Clo ) (Predict modeling eﬃciencies for Clo using G)
∗
6:
Sort Clo according to descending Mlo
7:
k = 1 (Initialize counter), Set f lagmaster = 0
8:
while k ≤ cn1 & f cnt ≤ f cntmax & f lagmaster = 0 do
9:
if Clo (k) A (current chromosome was not evaluated before) then
10:
Evaluate Clo (k) (EV AL), add Clo (k) to A; f cnt = f cnt + 1
11:
if Jlo (k) < j(c) (current chromosome is better than the master) then
12:
c = Clo (k); j(c) = Jlo (k), Set f lagmaster = 1 (deﬁne Clo (k) as new master)
13:
end if
14:
end if
15:
k =k+1
16:
end while
17: end while

to relax the termination criteria. If the search is targeted to ﬁnd multiple very diﬀerent optima (few features are
shared among them) δ could be set to a large value (e.g. 0.8). If the aim is to ﬁnd a good solution quickly then
more power can be given to the exploitation by decreasing λ ; δ can be set to 1 (all chromosomes are considered
similar, no ’niching’), and ρ to a desired maximum population size of R (e.g. 10); setting κ = 1 ensures that always
the currently best chromosome will be selected for guided feature elimination. The suggested default parameters
in Table 2 represent a compromise that work well for various problems.
3. Artiﬁcial Experiment
3.1. Generation of test data
We generate an artiﬁcial data set that has some particular properties that are common to many real world
applications in earth sciences:
•
•
•
•

several feature combinations have almost the same performance (multiple global optima; equiﬁnality)
the set of candidate features is large (250) and contains many non-informative variables
some features are highly correlated with the set of informative variables (part of the global optima)
the model based on a feature subset can be better than the model that included all features

We construct an artiﬁcial multivariate regression problem as follows. We denote a data set containing 250 variables
and 1000 samples by X. Xi is the ith variable and Xi (k) is sample k of variable i. Our aim is to construct a target
variable Y such that there are four likewise optimal regressions from X to Y with each containing 10 variables out
of all 250. X is step by step constructed as follows:
∼ N(0, 1)

for

i = 1, . . . , 250,

Xi

=

Xi

for

i = 11, . . . , 15,

Xi

=

Xi

for

i = 16, . . . , 25,

Xi

=

Xi

for

i = 26, 27,

Xi

=

Xi−27 + ξ,

for

i = 28, . . . , 56.

Xi

5
j=1 X j
15
k=11 Xk
10
j=1 X j
25
k=11 Xk
17
j=16 X j
27
k=26 Xk

ξ ∼ N(0, 0.2),

2344

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

The target variable Y is then deﬁned the sum of the ﬁrst 10 variables and it can easily be veriﬁed that it holds:
10

15

Xi =

Y :=
i=1

25

Xi =
i=6

27

Xi =
i=16

Xi ,
i=18

i.e., there are four diﬀerent combinations of respectively 10 regressors which can explain the target variable Y very
well. To challenge the algorithm, the four optima were arranged such that two of them share 5 features (1...10;
5...15), and two of them share 8 features (16...25; 18...27). Finally, the data is split equally into a training data set
plus some noise X tr and a validation data set X val ,
X tr (k) =
X val (k) =

X(k) + ξ
X(k)

for k = 1, . . . , 500 and
for k = 501, . . . , 1000.

ξ ∼ N(0, 0.1),

3.2. Experimental set-up
We ran GHGA with default settings on the data set, using a multiple linear regression as base function, and
= 0.005. The regression coeﬃcients are estimated from the training data set, and the modeling eﬃciency is
estimated using the test data set. We ran GHGA in four diﬀerent modes: no guiding, i.e. just the GA; random
guiding; guiding by variable selection frequency; guiding by the Random Forest algorithm. We performed 12 runs
for each mode of GHGA to evaluate to what extent the feature selection results were by chance, and to estimate the
statistical measures on the required number of cost function evaluations to ﬁnd one, two, three, or all four global
optima. The algorithm was run until all four global optima were found, or when 25,000 cost function evaluations
were reached.
3.3. Results and Discussion
Value of a dynamic cost function. Our dynamic cost function approach updates all cost function values when a
new maximum modeling eﬃciency was found, and thereby avoids specifying a maximum modeling eﬃciency a
priori. Specifying, a maximum performance a priori would be done by using all features in the model, which is
often inappropriate when many non-informative variables are present or the ratio of features to examples is large
[1]. In our data set, modeling eﬃciency of the chromosome with all features included is 0.967, while the actual
largest existing modeling eﬃciency is 0.999; this diﬀerence can be much more drastic in real world applications
[12].

Number of cost function evaluations

16000
14000
12000
10000
8000
6000
4000
2000
0

Optimum 1
No
R
S
R
ne and elFr F
eq

Optimum 2
No
R
S
R
ne and elFr F
eq
(10
/12
)

Optimum 3
No
R
S
R
ne and elFr F
eq
(4/
12
)

Optimum 4
No
R
S
R
ne and elFr F
eq
(2/
12
)

Fig. 1. Number of cost function required to ﬁnd one, two, three, and all four optima for all modes of GHGA. Boxplots show the distribution
of the 12 individual runs. Note that not all of the 12 runs without guidance found all optima (see numbers in parenthesis).

2345

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

Multiple optima. All runs of all four modes of GHGA found one global optimum, while only the various guided
versions found all four global optima for all runs (Figure 1). In 10/12 runs GHGA without guiding found 2
optima; in 4/12 runs it found 3 optima; in 2/12 runs all four optima were found. This demonstrates the capability
of GHGA in ﬁnding multiple optima, which is based on its diversity management of the reproductive population.
The diversity management and the steady state character of the GA setup where the population is created from all
tested chromosomes is quite expensive and becomes increasingly expensive as more chromosomes are added to
the archive. However, these costs are acceptable when the evaluation of the cost function is very expensive, and
we show below that quite few cost function evaluations are needed by the algorithm to ﬁnd the optima, which in
the end greatly oﬀsets the costs due to generation of the population after each iteration.

Rel Frequency

Eﬃciency of guiding. The number of cost functions evaluations required to ﬁnd one optimum was on average
half (about 2000) for the guided versions in comparison to the non-guided version. Diﬀerences in the number of
required cost-function evaluations to ﬁnd all four optima among the diﬀerent guiding versions tends to increase
with the number of optima. On average guiding by Random Forests required less cost function evaluations (on
average 4185) than guiding by selection frequency (on average 5113) than random guiding (on average 5632)
to ﬁnd all four optima, i.e. guiding by Random Forest saves about 22 % and 35 % cost function evaluations in
comparison to guiding by selection frequency and random guidance respectively.

0.08
0.06

Rel Frequency

0.005

0.02
50

100

150

200

250

0.08
0.06

0

50

100

150

200

250

50

100

150

200

250

50

100

150

200

250

50

100
150
Feature index

200

250

0.015
Random

0.01

0.04
0.005

0.02
0

Rel Frequency

0.01

0.04

0

50

100

150

200

250

0.08
0.06

0

0.015
Selection Frequency

0.01

0.04
0.005

0.02
0

Rel Frequency

0.015
None

50

100

150

200

250

0.08
0.06

0

0.015
Random Forests

0.01

0.04
0.005

0.02
0

50

100
150
200
Number of included variables

250

0

Fig. 2. Number of cost function evaluations as a function of number of included variables for all modes of GHGA (left) and selection
frequency of the diﬀerent features for all modes of GHGA (right). There is a clear peak in the number of cost function evaluations around
the true optimum with 10 features included in the various guided versions of GHGA, which does not exist for the non-guided version. The
feature selection frequency shows how often a feature was present in the archive and reveals a clear peak of those variables which are part of
the optimal sets. The double peak marks those features that are part of two diﬀerent optimal sets.

Finding four global optima from a data set with 250 variables with about 5000 cost function evaluations is

2346

Martin Jung and Jakob Zscheischler / Procedia Computer Science 18 (2013) 2337 – 2346

very eﬃcient, and only a tiny fraction (2.76 · 10−72 ) of exhaustive search (2250 − 1). Clearly, guiding the search
is much more eﬃcient and always found the four optima in comparison to the GA without guiding. Interestingly,
even the random guidance works well, which might imply that guiding itself is more important than how it is
done. The guiding works essentially because the guiding mechanisms selects a promising chromosome from the
population and tests modiﬁed chromosomes which have one feature less included. This greatly helps for the
stochastic backward search nature of GAs; without guiding chromosomes with one feature less are suggested by
the GA by chance, while guiding explicitly suggests chromosomes with one feature less included. Therefore, all
the guided versions of GHGA concentrate the search on chromosomes with about 10 features included, while the
non-guided version has large diﬃculties to get there and searches mainly in regions with more features included
(Figure 2). The good performance of the random guiding found here might partly be due to the large number of
uninformative features; if many uninformative features are present a random suggestion to eliminate a feature has
high chances to be successful. Nevertheless, since random guiding or guiding by selection frequency have almost
no computational costs in comparison to retraining Random Forests as guiding mechanism, random guiding and
guiding by selection frequency are suitable options for less expensive cost function evaluations; i.e. when training
Random Forests for guiding takes orders of magnitude more time than the evaluation of cost functions.
4. Conclusions
We presented a hybrid genetic algorithm for feature selection that is tailored to expensive cost function evaluations (GHGA). We illustrated the performance of the algorithm using artiﬁcial data, and show that the algorithm
provides accurate results and is very eﬃcient in minimizing the number of cost function evaluations. GHGA has
many potential applications in Earth Sciences given the growing volume of multivariate data streams that warrant
mining. An example is given in a companion paper [12].
Acknowledgements
Our research has received funding from the European Union’s Seventh Framework Programme (FP7/20072013) under grant agreement nr 283080 (GEOCARBON) / nr 244240 (ClimAfrica). JZ is part of the International
Max Planck Research School for global Biogeochemical Cycles (IMPRS-gBGC).
References
[1] A. Jain, D. Zongker, Feature selection: Evaluation, application, and small sample performance, IEEE Transactions Pattern Analysis and
Machine Intelligence 19 (2) (1997) 153–158.
[2] I.-S. Oh, J.-S. Lee, B.-R. Moon, Hybrid genetic algorithms for feature selection, IEEE Transactions on Pattern Analysis and Machine
Intelligence 26 (11) (2004) 1424–1437.
[3] W. Siedlecki, J. Sklansky, A note on genetic algorithms for large-scale feature selection, Pattern Recognition Letters 10 (5) (1989)
335–347.
[4] P. Pudil, J. Novovicov´a, J. Kittler, Floating search methods in feature selection, Pattern recognition letters 15 (11) (1994) 1119–1125.
[5] A. AlSukker, R. Khushaba, A. Al-Ani, Enhancing the diversity of genetic algorithm for improved feature selection, in: International
Conference on Systems Man and Cybernetics (SMC), 2010, pp. 1325–1331.
[6] J. Nash, J. Sutcliﬀe, River ﬂow forecasting through conceptual models part I: A discussion of principles, Journal of Hydrology 10 (3)
(1970) 282–290.
[7] D. Corne, J. Knowles, M. Oates, The pareto envelope-based selection algorithm for multiobjective optimization, in: Parallel Problem
Solving from Nature PPSN VI, Lecture Notes in Computer Science Vol.1917, 2000, pp. 839–848.
[8] N. Srinivas, K. Deb, Multiobjective optimization using nondominated sorting in genetic algorithms, Evolutionary Computation 2 (3)
(1995) 221–248.
[9] B. L. Miller, B. L. Miller, D. E. Goldberg, D. E. Goldberg, Genetic algorithms, tournament selection, and the eﬀects of noise, Complex
Systems 9 (1995) 193–212.
[10] C. Emmanouilidis, A. Hunter, J. Macintyre, A multiobjective evolutionary setting for feature selection and a commonality-based
crossover operator, in: Proc. of Congress on Evolutionary Computation, 2000, pp. 309–316.
[11] L. Breiman, Random forests, Machine Learning 45 (2001) 5–32.
[12] M. Jung, S. Tautenhahn, C. Wirth, J. Kattge, Estimating basal area of spruce and ﬁr in post-ﬁre residual stands in central siberia using
quickbird, feature selection, and random forests, in: Procedia Computer Science, 2013, pp. xxx–xxx.

