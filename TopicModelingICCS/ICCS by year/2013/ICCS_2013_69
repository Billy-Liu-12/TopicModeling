Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 1275 – 1281

International Conference on Computational Science, ICCS 2013

Performance of Sediment Transport Simulations on NVIDIA’s
Kepler Architecture
Huayou Sua,b,c , Nan Wua,b, Mei Wena , Chunyuan Zhanga , Xing Caib,c,∗
a School

of Computer Science, National University of Defense Technology, Changsha, Hunan 410073, China
b Simula Research Laboratory, P.O. Box 134, 1325 Lysaker, Norway
c Department of Informatics, University of Oslo, P.O. Box 1080 Blindern, 0316 Oslo, Norway

Abstract
Aiming to understand how high-performance CUDA programming can be done for NVIDIA’s new Kepler architecture, we have
investigated a speciﬁc case of simulating sediment transport. The arisen stencil computations have distinct features connected
to the two nonlinear partial diﬀerential equations that constitute the mathematical model. Consequently, the required CUDA
programming eﬀort diﬀers for the two corresponding CUDA kernel functions. While Kepler’s new read-only data cache
brings enough beneﬁts for one kernel function, performance of the other kernel function is further enhanceable through using
the shared memory and so-called halo threads. The highest achieved performance of the stencil computation amounts to 190.45
GFLOPs on a Tesla K20 GPU.
Keywords: sedimentary basin; stencil computation; CUDA programming; NVIDIA Kepler architecture

1. Introduction
While providing increased computational capabilities, new advances in computer hardware may require cumbersome software adjustments. GPU computing is certainly no exception in this respect, see e.g. [1]. As NVIDIA
recently rolled out its Kepler architecture, the hardware diﬀerences between Kepler and its predecessor Fermi have
to be considered by the programmer, see e.g. [2], if high computational eﬃciency remains the objective. According to [3], the L1 cache on Kepler is reserved for local memory accesses such as register spills and stack data, i.e.,
global loads are cached in L2 only. It means that Kepler’s shared memory has to be given more attention again,
like on the old Tesla architecture. This is somewhat contrary to the Fermi architecture where L1 caches the global
loads, thus making the shared memory less important in this respect. Moreover, the newly introduced read-only
data cache on Kepler can take much of the role of Fermi’s L1 cache, providing an additional on-chip resource. The
key to performance on Kepler is, as on Fermi, good utilization of the on-chip resources together with minimizing
data traﬃc from/to the device memory. However, concrete strategies of CUDA performance programming can
diﬀer on the two architectures. Two examples of the existing results that address the performance of applications
and data structures on both Kepler and Fermi are [4, 5].
∗ Corresponding

author. Tel.: +47-48294368; fax: +47-67828201.
Email addresses: shyou@nudt.edu.cn (Huayou Su), nanwu@nudt.edu.cn (Nan Wu), meiwen@nudt.edu.cn (Mei Wen),
cyzhang@nudt.edu.cn (Chunyuan Zhang), xingca@simula.no (Xing Cai)

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.294

1276

Huayou Su et al. / Procedia Computer Science 18 (2013) 1275 – 1281

As an attempt to shed more light on the speciﬁc impact of the new Kepler architecture, we investigate in this
paper some performance-enhancing strategies for CUDA programming. This is done in the context of simulating
sediment transport, which involves numerically solving two coupled nonlinear partial diﬀerential equations by
the ﬁnite diﬀerence method. We believe that our ﬁndings from this real-world application are relevant for similar
stencil-based computations.
2. Mathematical model and numerical method
2.1. A coupled system of two equations
We adopt the mathematical model of Rivenæs [6, 7] to study the transport of sediments in a basin, by considering diﬀusion as the driving force. The model is capable of tracking two sediment types, such as sand and mud.
In the language of mathematics, the model is made up of the following coupled system of two nonlinear partial
diﬀerential equations:
∂h
1
1
=
∇ · (αs∇h) +
∇ · (β(1 − s)∇h),
∂t
Cs
Cm
∂h
1
∂s
=
∇ · (αs∇h).
A +s
∂t
∂t
Cs

(1)
(2)

The primary unknowns are h(x, y, t) and s(x, y, t), where h denotes the basin height as a function of space and
time, while s and 1 − s denote the volume fraction of the two sediments. The diﬀusion coeﬃcients associated with
the two sediment types are known as α(x, y) and β(x, y). The constants C s and Cm are given as the compaction ratio
of the two sediments, while the constant A in (2) is a prescribed value representing the thickness of a sedimenttransport top layer of the basin, see [6]. As initial conditions, h(x, y, t) and s(x, y, t) are given at t = 0. As boundary
conditions, the ﬂux rate of the two sediments are prescribed over the entire boundary.
2.2. An explicit numerical method based on ﬁnite diﬀerences
Many numerical methods can be used to solve the above mathematical model (1)-(2). Five diﬀerent schemes
are described in [8], and the CPU computing speed of all these methods is dictated by data movement within
CPU’s memory hierarchy. This means that the performance of a CUDA translation is likely also bound by data
traﬃc, not the amount of ﬂoating-point operations.
We have chosen for this paper a fully-explicit numerical method, see e.g. [9], both because earlier numerical
experiments in [8] showed that this explicit method has the fastest overall computing speed on CPUs, and also
because it has the best ratio of ﬂoating-point operations vs. data traﬃc, thus the best candidate for GPU computing.
The temporal domain 0 ≤ t ≤ T is divided into a series of equal-distanced time levels: t0 , t1 , t2 , . . . , T , where
t = Δt. During each time step, the fully-explicit scheme ﬁrst solves (1), and then (2). The forward Euler scheme
is used in the temporal discretization, while central diﬀerences and upwind diﬀerences are used in the spatial
discretization. Suppose we use hi, j and si, j to denote the numerical solutions at t = t and x = xi = (i − 1)Δx,
y = y j = ( j − 1)Δy. The complete numerical discretization of (1) is as follows:
⎛
⎛
⎞
⎞
⎜⎜⎜ αi− 1 , j s 1
⎜⎜⎜ αi+ 1 , j s 1
⎟
⎟
⎜⎜⎜ 2 i− 2 , j βi− 12 , j 1−si− 12 , j ⎟⎟⎟⎟⎟
⎜⎜⎜ 2 i+ 2 , j βi+ 12 , j 1−si+ 12 , j ⎟⎟⎟⎟⎟
+
+
⎜⎜⎝ Cs
⎟⎟⎠ hi+1, j − hi, j − ⎜⎜⎝ Cs
⎟⎟⎠ hi, j − hi−1, j
Cm
Cm
hi,+1
j − hi, j
=
Δt
Δx2
⎛
⎞
⎞
⎛
⎜⎜⎜ αi, j− 1 s 1 βi, j− 1 1−s 1 ⎟⎟⎟
⎜⎜⎜ αi, j+ 1 s 1 βi, j+ 1 1−s 1 ⎟⎟⎟
i, j+
i, j−
⎜ 2 i, j−
⎟⎟
⎟⎟
2
2
2 ⎟
2 ⎟
⎜⎜⎜⎜ 2 i, j+ 2 +
⎟⎟⎠ hi, j+1 − hi, j − ⎜⎜⎜⎜⎝ Cs 2 +
⎟⎟⎠ hi, j − hi, j−1
Cm
Cm
⎜⎝ Cs
,
(3)
+
Δy2
where the half-index subscripts in the above formula mean some form of averaging for a quantity in the middle of
two spatial mesh points. For example, we typically use an arithmetic mean as follows:
αi+ 12 , j si+ 1 , j =
2

αi, j si, j + αi+1, j si+1, j
2

.

1277

Huayou Su et al. / Procedia Computer Science 18 (2013) 1275 – 1281

For (2) the complete numerical discretization reads:
⎧
⎪
h +1 − hi, j
si,+1
⎪
1
j − si, j
⎨ αi, j si, j − αi−1, j si−1, j
+1 i, j
+ si, j
=
A
⎪
⎩ αi+1, j si+1, j − αi, j si, j
Δt
Δt
2C s Δx2 ⎪
⎧
⎪
⎪
1
⎨ αi, j si, j − αi, j−1 si, j−1
+
⎪
2
⎩ αi, j+1 si, j+1 − αi, j si, j
2C s Δy ⎪

+1
+1
hi+1,
j − hi−1, j
+1
+1
hi+1,
j − hi−1, j

+1
+1
if hi−1,
j > hi+1, j
else

+1
hi,+1
j+1 − hi, j−1
+1
hi,+1
j+1 − hi, j−1

+1
if hi,+1
j−1 > hi, j+1
else

(4)

It is remarked that (2) has been treated as a convection-diﬀusion equation with respect to s, where −∇h gives
the convection velocity, thus requiring the upwind diﬀerencing that is used in (4). The reason for labeling the
whole numerical scheme (3)-(4) as fully-explicit is because h +1 can be calculated straightforwardly by (3) when
h and s are known, and similarly, calculating s +1 is straightforward by (4) when h , h +1 and s are ready.
3. Performance programming strategies
3.1. Data structure
Suppose the number of mesh points in the x-direction is N x , whereas Ny is for the y-direction. In order to
treat the ﬂux-type boundary conditions by central diﬀerencing, it is customary to add one layer of ghost points
around the entire computational mesh. Therefore, two arrays of length (N x + 2)(Ny + 2) are needed in any code
implementation to store, alternately, the computed values of hi, j and hi,+1
j . Similarly, two arrays of the same
+1
dimension store the si, j and si, j values. In addition, one array is needed for storing the given values of αi, j ,
another array for the βi, j values.
It can be observed from the numerical scheme (3)-(4) that a ﬁve-point computational stencil is extensively
used. To calculate each hi,+1
j value using (3), ﬁve values of the h array (i.e., hi, j and hi±1, j±1 ) are needed together
+1
with ﬁve values each of the s , α and β arrays. To calculate each si,+1
array
j value using (4), ﬁve values of the h
are needed, in addition to relying on the hi, j value and three values each of the s and α arrays (because of upwind
diﬀerencing).
3.2. Baseline CUDA implementation
A typical CUDA implementation of the fully-explicit numerical scheme (3)-(4) consists of two kernel function+1
s, one for calculating the hi,+1
j values, the other for calculating the si, j values. A straightforward implementation is
+1
+1
to let each CUDA thread calculate a single hi, j or si, j value, while the use of on-chip shared memory is avoided
for the ease of programming. Such a baseline CUDA implementation tends to have quite reasonable performance
on the Fermi architecture, because the L1 cache on Fermi oﬀers a comparable beneﬁt as that provided by explicit
usage of the shared memory on the Tesla architecture. However, as mentioned earlier, Kepler’s L1 does not cache
loads from the global memory, such a baseline implementation will thus incur unnecessary global memory loads
that are duplicated between neighboring threads in the same thread block.
3.3. Enhancement by using Kepler’s read-only data cache
Read-only data cache is a new hardware feature on the Kepler architecture, where each streaming multiprocessor (SM) has 48 KB. Programming-wise this on-chip storage is very easy to use, only requiring two special
key words, const and restrict , to label the name of an array pointer together with using the compile option
-arch=sm 35. The detailed implementation can be seen in lines 7–10 of the code segment in the appendix of
this article. For the kernel function that calculates hi,+1
j , we can use the read-only data cache to store the needed
+1
segment of the α, β, h , and s arrays. For the kernel function that calculates si,+1
and s arrays can
j , the α, h
make use of the read-only data cache. The purpose is to avoid duplicated data loads that happen in the baseline
implementation, and the performance enhancement can be substantial.

1278

Huayou Su et al. / Procedia Computer Science 18 (2013) 1275 – 1281

3.4. Enhancement by using shared memory
Suppose the read-only data cache is large enough to store the needed global memory loads of arrays that are
accessed via a ﬁve-point stencil. The on-chip shared memory can, in particular, bring performance beneﬁts to the
calculations related to (3). More speciﬁcally, each thread now only needs to compute for itself
αi, j si, j

and βi, j 1 − si, j

and store these two intermediate results in the shared memory, such as lines 20 and 21 in the code segment shown
in the appendix. Therefore, the needed values of
αi−1, j si−1, j

and βi−1, j 1 − si−1, j

are computed by the left-neighbor thread, lying in the shared memory ready to be used. Similarly, the rightneighbor, lower-neighbor and upper-neighbor threads all contribute to the shared memory. For most threads in a
thread block, twelve ﬂoating-point operations can thus be saved. For threads lying on the boundary of a thread
block, more computations associated with αs and β(1 − s) are needed, but nine or six ﬂoating-point operations can
still be saved.
One comment is in order here: This performance enhancement strategy will probably not beneﬁt the kernel
function calculating si,+1
j , because due to upwind diﬀerencing only two multiply operations (associated with αs)
can be saved. Another comment is that this way of using the on-chip shared memory is not meant for reducing the
data traﬃc from the device memory, which is supposed to be already taken care by the read-only data cache.
3.5. Introducing halo threads
There are more on-chip resources per SM on Kepler than on Fermi, meaning that the thread blocks can potentially be larger. Turning this statement around, it means that we may aﬀord to not fully use all the threads of
a block. Under-utilization of the threads can be beneﬁcial in connection with the above strategy of shared memory usage, which stores intermediate calculation results and thereby reduces duplicated ﬂoating-point operations
between neighboring threads.
More speciﬁcally, we can enlarge each thread block with a layer of halo threads. Shown as line 4 in the code
segment in the appendix, the thread block size is conﬁgured as (BLOCK X + HALO) × (BLOCK Y + HALO),
where the value of HALO is 2, meaning one halo element in each direction. The introduction of halo threads
can ensure that all threads calculate precisely one set of intermediate αs and β(1 − s) values, such as shown by
code lines 16–21. (Otherwise, an if-test is needed per side of the thread block to ask the boundary threads to do
additional memory loads and calculations.) We thus avoid the scenario that the boundary threads need more time,
thus delaying the interior threads at the explicit thread synchronization command (code line 22). One important
remark is that, when using the halo threads, the mapping between a thread block and its designated segment of
the solution domain (of size BLOCK X × BLOCK Y) still only considers the number of non-halo threads. This
is exempliﬁed by code lines 15–19. After the shared memory is ﬁlled with intermediate calculation results, the
remainder of the h-kernel function will only make use of BLOCK X × BLOCK Y threads to continue with the
calculation of hi, j , as shown after code line 23. That is, some threads (equaling the number of the halo threads)
will simply skip over, thus resulting in a certain level of thread under-utilization. Nevertheless, this strategy of
using halo threads may still be overall beneﬁcial.
4. Numerical experiments
We used two NVIDIA GPUs, Kepler K20 and GTX 590, for our numerical experiments. The detailed architecture information can be found in Table 1. All the measurements were associated with a global mesh of
dimension N x = Ny = 4096, and all the computations used double precision. In Tables 2 and 3, we have calculated
the achieved GFLOPs rates associated with the two kernel functions. (The numbers of ﬂoating-point operations
+1
needed are 55 and 34, respectively, for computing each hi,+1
j and si, j value.) Moreover, we have listed the on-chip
resources used per thread or per thread block plus the device occupancy rate, reported by the CUDA proﬁler. The
naming scheme of the diﬀerent performance-enhancing strategies is as follows. For K20, OPT-1 refers to making

1279

Huayou Su et al. / Procedia Computer Science 18 (2013) 1275 – 1281

Table 1. The architectural feature of the experimental platforms.

#SM(X)
#CUDA cores
Architecture
Register per SM
Shared Memory per SM (KB)
L1 Cache per SM (KB)
Read Only Data Cache per SM (KB)
L2 Cache (KB)
Peak Double Precision (GFlop/s)
Theoretical Bandwidth (GB/s)
Tested Bandwidth (GB/s)
Compiler

GTX 590
16
512
Fermi GF110
32768
48
16
NA
768
161.3
165.9
142.94
CUDA 5.0

Kepler K20
13
2496
GK110
65536
48
16
48
1280
1170
208
160.88
CUDA 5.0

use of the read-only data cache, as described in Section 3.3. For GTX 590, OPT-1 means conﬁguring the L1 cache
to its maximum size using the cudaDeviceSetCacheConfig(cudaFuncCachePreferL1) function. For both
GPUs, OPT-2 refers to enhancing OPT-1 with usage of the shared memory, as described in Section 3.4, whereas
OPT-3 refers to enhancing OPT-2 with the use of halo threads, as described in Section 3.5. It should be noticed
that the L1 cache used the default conﬁguration (16KB per SM), when using OPT-2 and OPT-3 on both Kepler
K20 and GTX 590.
Table 2. Eﬀect of the performance-enhancing strategies on K20.

Code version
Baseline
OPT-1
OPT-2
OPT-3
Code version
Baseline
OPT-1
OPT-2
OPT-3

Measurements for the h-kernel on K20
GFLOPs Registers/thread Shared memory/block
88.43
55
0
178.69
52
0
182.36
33
3264 bytes
190.45
34
3264 bytes
Measurements for the s-kernel on K20
Thread block GFLOPs Registers/thread Shared memory/block
32 × 4
67.99
39
0
32 × 4
122.78
40
0
32 × 4
112.84
38
1632 bytes
34 × 6
110.55
33
1632 bytes
Thread block
32 × 4
32 × 4
32 × 4
34 × 6

Occupancy
0.562
0.562
0.750
0.656
Occupancy
0.750
0.750
0.750
0.656

We can observe in Table 2 that using the read-only data cache on Kepler results in a substantial performance
increase for both kernel functions. For the h-kernel function, OPT-2 and OPT-3 deliver additional performance
improvements. For the s-kernel function, however, OPT-2 and OPT-3 are counter productive, as feared earlier.
In Table 3, we can see that the performance of the baseline implementation on GTX 590 is very close to that of
K20, with the baseline version of the s-kernel being even faster. Although the memory bandwidth and the doubleprecision capability of GTX 590 are lower than those of K20, the L1 cache on the Fermi architecture seems
capable of exploiting the spatial locality and eﬀectively utilizing the memory bandwidth. Another interesting
phenomenon on GTX 590 is that conﬁguring the L1 cache size as 48KB (PreferL1) didn’t bring too much performance improvement, compared with the default L1 cache size (16KB). This is probably because the advantage
of an increased L1 cache size is counteracted by a reduced possibility of data reuse between the thread blocks.
Similar to K20, the best performance of the h-kernel also comes from OPT-3 on GTX 590, while the s-kernel
works best with OPT-1. On GTX 590, the number of registers per SM is only half of that on K20. Therefore, to
relieve the pressure on the registers, we used the shared memory to store one additional array on GTX 590.
Using the best combination, i.e., OPT-3 for the h-kernel and OPT-1 for the s-kernel, the achieved overall

1280

Huayou Su et al. / Procedia Computer Science 18 (2013) 1275 – 1281

Table 3. Eﬀect of the performance-enhancing strategies on GTX 590.

Code version
Baseline
OPT-1(PreferL1)
OPT-2
OPT-3
Code version
Baseline
OPT-1(PreferL1)
OPT-2
OPT-3

Measurements for the h-kernel on GTX 590
Thread block GFLOPs Registers/thread Shared memory/block
32 × 4
76.46
55
0
32 × 4
81.36
55
0
32 × 4
76.98
29
4896 bytes
34 × 6
87.97
22
4896 bytes
Measurements for the s-kernel on GTX 590
Thread block GFLOPs Registers/thread Shared memory/block
32 × 4
72.23
39
0
32 × 4
75.11
39
0
32 × 4
56.49
29
3264 bytes
34 × 6
60.39
26
3264 bytes

Occupancy
0.333
0.333
0.667
0.875
Occupancy
0.500
0.500
0.667
0.730

GFLOPs rate were 165 on K20 and 82 on GTX 590, respectively. In our earlier work [10], a CUDA implementation that made use of the shared memory achieved slightly more than 50 GFLOPs on an M2050 Fermi GPU.
Interestingly, the new K20 GPU together with enhanced programming thus produces a three-fold performance
increase for the same sediment transport computations.
5. Concluding remarks
It should be readily admitted that the numerical experiments that we have used are far from exhaustive. A ﬁne
performance tuning with respect to, e.g., adjusting the thread block dimensions and strategically dividing data arrays between the on-chip shared memory and read-only data cache, will result in higher GFLOPs rates. Chunking,
+1
i.e., to let each CUDA thread compute more than one hi,+1
j or si, j value, can also be tested. Nevertheless, we think
that our preliminary investigation shows that the resurgent beneﬁt of the shared memory and the easily obtainable
beneﬁt of the new read-only data cache call for programmers’ care when using NVIDIA’s Kepler architecture.
Acknowledgments
The authors gratefully acknowledge the support from the National Natural Science Foundation of China under
NSFC No. 61033008, SRFDP No. 20104307110002, Innovation in Graduate School of NUDT Nos. B100603,
B120605 and CJ11-06-01, the FriNatek program of the Research Council of Norway No.214113. We would also
like to thank the support from China Scholarship Council and the Simula School of Research and Innovation.
References
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]

J. Nickolls, W. J. Dally, The GPU computing era, IEEE micro 30 (2) (2011) 56 – 69.
Inside Kepler, http://developer.download.nvidia.com/GTC/inside-tesla-kepler-k20-family.pdf.
Tuning CUDA applications for Kepler, http://docs.nvidia.com/cuda/pdf/Kepler Tuning Guide.pdf.
T. Aila, S. Laine, T. Karras, Understanding the eﬃciency of ray traversal on GPUs – Kepler and Fermi addendum, NVIDIA Technical
Report NVR-2012-02 (2012).
D. Cederman, B. Chatterjee, P. Tsigas, Understanding the performance of concurrent data structures on graphics processors, in: Euro-Par
2012 Parallel Processing, Vol. 7484 of Lecture Notes in Computer Science, Springer-Verlag, 2012, pp. 883–894.
J. C. Rivenæs, A computer simulation model for siliclastic basin stratigraphy, Ph.D. thesis, University of Trondheim (1993).
J. C. Rivenæs, Application of a dual-lithology, depth-dependent diﬀusion equation in stratigraphic simulation, Basin Research 4 (2)
(2007) 133 – 146.
W. Wei, S. R. Clark, H. Su, M. Wen, X. Cai, Balancing eﬃciency and accuracy for sediment transport simulations,
http://heim.iﬁ.uio.no/xingca/Wei-etal-2012-CG.pdf (2012).
S. R. Clark, W. Wei, X. Cai, Numerical analysis of a dual-sediment transport model applied to Lake Okeechobee, Florida, in: Proceedings
of the 9th International Symposium on Parallel and Distributed Computing, IEEE Computer Society Press, 2010, pp. 189–194.
M. Wen, H. Su, W. Wei, N. Wu, X. Cai, C. Zhang, Using 1000+ GPUs and 10000+ CPUs for sedimentary basin simulations, in:
Proceedings of IEEE CLUSTER 2012, IEEE Computer Society Press, 2012, pp. 27–35.

Huayou Su et al. / Procedia Computer Science 18 (2013) 1275 – 1281

Appendix A. Fragments of a CUDA implementation that targets Kepler
1
2
3
4
5
6

#define BLOCK_X B_X
#define BLOCK_Y B_Y
#define HALO
2
dim3 block(BLOCK_X+HALO,BLOCK_Y+HALO,1);
dim3 grid((Nx+(BLOCK_X-1))/(BLOCK_X),(Ny+(BLOCK_Y-1))/(BLOCK_Y),1);
update_h<<<grid,block>>>( alpha, beta, s, h, ht, Nx);

7
8
9
10
11
12

__global__ void update_h(const double * __restrict__ alpha,
const double * __restrict__ beta,
const double * __restrict__ s,
const double * __restrict__ h,
double *h_new,
int Nx) {
//Shared memory per thread block
__shared__ double gs_alpha[(BLOCK_X+HALO)*(BLOCK_Y+HALO)];
__shared__ double gm_beta [(BLOCK_X+HALO)*(BLOCK_Y+HALO)];
int tid, gid_x, gid_y, gid;
tid
= threadIdx.x + threadIdx.y * blockDim.x;
gid_x = threadIdx.x + blockIdx.x * BLOCK_X;
gid_y = threadIdx.y + blockIdx.y * BLOCK_Y;
gid
= gid_x + gid_y * (Nx+2);
//All threads compute the intermediate s*alpha and (1-s)*beta values
gs_alpha[tid] = s[gid] * alpha[gid];
gm_beta[tid] = (1.0-s[gid]) * beta[gid];
__syncthreads();
//Only a subset of the threads do subsequent computations
if(tid<(BLOCK_X*BLOCK_Y))
{
double h_center, h_left, h_right, h_up, h_down;
gid_x = (tid%BLOCK_X) + blockIdx.x * BLOCK_X + 1;
gid_y = (tid/BLOCK_X) + blockIdx.y * BLOCK_Y + 1;
gid
= gid_x + gid_y * (Nx+2);
h_center = h[gid];
h_left
= h[gid-1];
h_right = h[gid+1];
h_up
= h[gid + (Nx+2)];
h_down
= h[gid - (Nx+2)];
......
}
}

13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
39
30
31
32
33

1281

