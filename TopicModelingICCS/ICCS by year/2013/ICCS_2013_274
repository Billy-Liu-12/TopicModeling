Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 189 – 198

International Conference on Computational Science, ICCS 2013

Fault Tolerance Properties of Gossip-Based
Distributed Orthogonal Iteration Methods
Hana Strakov´aa , Gerhard Niederbruckera , Wilfried N. Gansterera,∗
a University

of Vienna, Research Group Theory and Applications of Algorithms, Austria

Abstract
In this paper, we investigate and compare the fault tolerance properties and resilience of gossip-based distributed orthogonal iteration algorithms for the in-network computation of the extreme eigenpairs of matrix. Gossip-based algorithms have
many attractive properties, especially for loosely coupled distributed and decentralized systems, like P2P networks or sensor
networks. Due to their randomized communication schedule and the fact that communication happens only between nearest
neighbors, they are highly ﬂexible with respect to the topology of the underlying system. Moreover, such algorithms have a
big potential for high resilience against various types of failures.
Lately, several gossip-based distributed eigensolvers based on orthogonal iteration method have been introduced. However,
the performance of these algorithms in the presence of failures has not been analyzed yet. We illustrate that convergence
properties, the numerical accuracy achieved, as well as resilience properties of gossip-based distributed orthogonal iteration
are basically determined by the choice of the distributed data aggregation algorithm (DDAA) which is required within the
algorithm for performing distributed reduction operations (such as summation or averaging) across the system. In particular,
we illustrate that when using the proper combination of DDAA and distributed orthogonal iteration method, high accuracy can
be achieved and even silent message loss can be tolerated without any loss in numerical accuracy.
Keywords: fault tolerance; self-healing algorithm; gossip algorithms; distributed algorithm; randomized communication
schedule; orthogonal iteration

1. Introduction
Classical parallel approaches usually assume target systems with static, regular topology and with reliable
communication. In contrast, distributed algorithms are designed for decentralized loosely coupled distributed
systems where the nodes may have limited resources in terms of storage, energy and computation and where it
cannot be assumed that a node has any global knowledge about the system’s (arbitrary) topology. Moreover, such
systems may change during the computation due to potential link and/or node failures, and synchronizing nodes
across such systems is very diﬃcult or even impossible. Distributed algorithms for such systems usually perform
randomized nearest-neighbor communication and thus are very ﬂexible with respect to the underlying hardware
infrastructure. One of the highly attractive properties is their potential for high fault tolerance.
An essential component of distributed matrix computations is a distributed data aggregation algorithm (DDAA)
for the distributed computation of sums or averages. The choice of the particular DDAA strongly inﬂuences many
∗ Corresponding

author. Tel.: +43-1-4277-78311
E-mail address: wilfried.gansterer@univie.ac.at.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.182

190

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198

properties of the matrix computations built on top of it, such as numerical accuracy or fault tolerance properties,
as we will show. We focus on investigating a distributed orthogonal iteration algorithm (dOI) when utilizing the
following three DDAAs: the push-sum algorithm (PS), the push-ﬂow algorithm (PF) and the push-cancel-ﬂow
algorithm (PCF). We denote by dOI(PS), dOI(PF) and dOI(PCF) the respective orthogonal iteration algorithms.
1.1. Motivation
Eigenvalue problems arise in many questions related to spectral properties of graphs, which are important, e. g.,
in various analyses of computer networks or social networks. As mentioned above, existing parallel algorithms
designed for static shared memory, distributed memory systems or for multicore architectures are not suitable for
large-scale decentralized loosely coupled distributed systems (such as P2P networks or sensor networks) due to
the diﬀerent system properties. In practice, a centralized approach is usually employed. One node, commonly
called “fusion center”, collects the values from all nodes, computes the desired results locally and distributes
them back to the rest of the network. This approach has signiﬁcant drawbacks in the context considered in this
paper. First of all, it may be infeasible due to security or technical problems. Moreover, it tends to lead to highly
unbalanced energy consumption across nodes and routing information as well as global network properties must
be available at every node. Last, but not least, the fusion center approach introduces a single point of failure,
which is undesirable in unreliable networks.
Motivated by such situations, we constructed a distributed algorithm dOI [3] for computing the k principal
eigenpairs of a matrix on top of robust distributed data aggregation algorithms. Proceeding this way results in a
distributed algorithm which is ﬂexible with respect to the hardware infrastructure, as discussed in [3]. Moreover,
we expect dOI to have a potential for being a naturally fault tolerant self-healing algorithm with superior resilience
properties. However, this aspect has not been addressed and investigated yet.
Note also that algorithmic properties such as decentralization and fault tolerance are expected to become more
and more attractive in the future for several reasons: (i) high-end computer systems are expected to grow in terms
of numbers of nodes, (ii) it will become more and more diﬃcult to provide the global view of the entire system at
every node, and (iii) more component failures will have to be handled, ideally also at the algorithmic level.
1.2. Contributions
We explore the inﬂuence of the utilized DDAA on the behavior of the distributed orthogonal iteration dOI.
First, we investigate the numerical accuracy of the two major building blocks of the dOI algorithm: distributed
matrix-matrix multiplication (dmmm) and distributed QR factorization (dmGS). Moreover, we discuss the convergence properties of dOI. Second, we explore how the behavior of dOI in the presence of several types of failures in
the network changes, when diﬀerent DDAAs are utilized as the building block. We show that dOI based on PCF
achieves superior fault tolerance properties compared to all other approaches. Furthermore, we show that dOI
with PCF is able to deliver results in full accuracy even in the presence of various types of failures. In contrast,
any kind of failure in the existing algorithm KOI [2] leads to a severe loss of accuracy.
1.3. Synopsis
In Section 2, the related work is summarized and the relevant distributed algorithms are reviewed. In Section 3,
the distributed orthogonal iteration dOI as well as its building blocks dmmm and dmGS are discussed. We present
simulation results illustrating the inﬂuence of the choice of DDAA on the numerical accuracy achieved. Moreover,
we discuss the convergence properties of dOI. In Section 4 we investigate the fault tolerance properties of dOI for
reported as well as for silent failures. Section 5 concludes the paper and summarizes ongoing and future work.
2. Background and Related Work
Whereas many classical parallel algorithms for eigensolvers are included in state-of-the-art software libraries
such as Plasma [1], fully distributed eigensolvers based on randomized communication schedules, particularly
on gossip algorithms, have hardly been explored. In [3] we presented a decentralized method for distributed
orthogonal iteration called dOI utilizing the push-sum algorithm (see Section 2.1) and analyzed it in terms of
numerical accuracy and communication cost. Moreover, we showed how the communication cost of dOI can

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198

be reduced by accuracy-performance trade-oﬀs in the push-sum algorithm. However, dOI is expected to have
a potential for achieving high fault tolerance when utilizing other gossip-based DDAAs, which has not been
addressed in the literature so far.
To the best of our knowledge, the only other fully distributed orthogonal iteration in the sense deﬁned in
this paper has been presented by Kempe and McSherry [2] (we refer to their method as KOI). However, their
work diﬀers from our dOI algorithm [3] in three pivotal aspects: First, their method is speciﬁcally designed for
computing eigenpairs of adjacency matrices. Second, they reformulate the standard orthogonal iteration algorithm
in order to avoid a distributed QR factorization. Third, KOI uses deterministic communication schedules and
therefore it cannot exploit the potential beneﬁts of randomized communication, such as high fault tolerance against
system failures.
Jelasity et al. [18] introduced a distributed power iteration method, which computes only the single extreme
eigenpair. Beyond that it diﬀers from our work in similar ways as KOI [2]. The authors addressed the question of
the resilience of their distributed eigensolver to various types of failures. However, the simulation results indicate
that their distributed algorithm cannot guarantee results in full or high accuracy in the presence of failures.
For handling failures in classical parallel systems, diﬀerent ﬂavors of the checkpoint/restart paradigm are
applied, where the system state is permanently stored [4]. In the setup we consider, such centralized fault tolerance
approaches are not applicable. In the context of matrix computations, a well known technique working entirely
at the algorithmic level is ABFT [5–7]. In ABFT, fault tolerance is achieved by incorporating and maintaining
checksum relationships in the input matrices to detect and correct system failures. Besides limitations in terms of
amounts and kinds of detectable/correctable failures, an ABFT-based eigensolver is not available so far.
The essential building blocks for the distributed algorithms presented in this paper are DDAAs based on the
concept of gossiping. Gossip (or epidemic) protocols have been studied extensively (see, e. g., [8–15]). Due to
the attractive properties of gossip-based DDAAs, such as no speciﬁc requirements in terms of topology, synchronization or reliability, they have been widely utilized. The relevant DDAAs for our approach are presented in the
next section. Another approach for computing aggregations in a distributed way are consensus algorithms [16].
They diﬀer substantially from gossip-based DDAAs in the following aspects [17]: (i) Consensus algorithms are
not based on randomized communication but every node communicates with all neighbors in each step. (ii) Due
to their communication schedule, consensus algorithms have to be fully synchronized across nodes.
2.1. Distributed Data Aggregation Algorithms (DDAAs)
Distributed data aggregation algorithms are algorithms which allow for the decentralized computation of scalar
or non-scalar aggregates such as sums or averages of vectors or matrices distributed across nodes. A well known
gossip-based algorithm of this kind is the push-sum algorithm (PS) [12]. The PS algorithm is based on the
following simple protocol: initially, every node keeps its scalar or non-scalar data including a scalar weight which
determines the type of aggregation (e. g., sum or average). In every round of the algorithm, each node sends
a fraction of all of its local values to a randomly selected neighboring node. All data received by the nodes
is combined with their local values. This simple protocol without any global control mechanisms ensures the
computation of an -approximate of the target global aggregate locally at each node in O(log N + log −1 ) time
under the same assumptions as deterministic parallel algorithms can perform the same task in O(log N) time [9].
Thus, the PS algorithm scales as well as its deterministic parallel counterparts.
The drawback of the push-sum algorithm is that its correctness relies on the so-called mass conservation
(cf. [12]) which globally states that the initial data has to be preserved during the whole course of computation.
Obviously, any kind of system failure violates mass conservation and thus the PS algorithm cannot guarantee
correct results in the presence of system failures.
The basic idea behind the push-ﬂow algorithm (PF) [13] is to incorporate fault tolerance mechanisms into the
PS algorithm while not changing the algorithm’s principal properties and behavior in failure-free environments.
This is done by utilizing the graph theoretical ﬂow concept in the following way: to fault tolerantly communicate
local information to a neighboring node j, node i keeps a ﬂow variable fi, j which describes the amount of data
which is “ﬂowing” from node i to j. By ensuring ﬂow conservation (i. e., fi, j = − f j,i ) over each link, the global
property of mass conservation translates to an entirely local property. This is the origin of the extraordinary high
fault tolerance potential provided by the ﬂow concept which covers certain kinds of permanent link and node

191

192

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198

Algorithm 1 Orthogonal Iteration and Distributed Orthogonal Iteration (dOI)
Input: A ∈ Rn×n , arbitrary Q0 ∈ Rn×k , number of iterations t
Output: eigenvectors Qt ∈ Rn×k , eigenvalues diag(Rt ), Rt ∈ Rk×k
1:
2:
3:
4:
5:
6:

i = 0;
repeat
[Vi ] = A · Qi
[Qi+1 , Ri+1 ] = qr(Vi )
i = i + 1;
until i == t

1:
2:
3:
4:
5:
6:

i = 0;
repeat
[Vˆ i ] = dmmm(A, Qˆ i )
[Qˆ i+1 , Rˆ i+1 ] = dmGS (Vˆ i )
i = i + 1;
until i == t

failures as well as silent errors like message loss or bit-ﬂips. While the PF algorithm provides these superior
properties in theory, several practical drawbacks, e. g., in terms of numerical accuracy, were observed [15].
The push-cancel-ﬂow algorithm (PCF) [14] is a novel advancement of the PF algorithm which leads to signiﬁcant qualitative improvements in terms of numerical accuracy and computational eﬃciency (when system failures
occur). The theoretical advance of the PCF algorithm over the PF algorithm is that the ﬂow variables in the PCF
algorithm converge to the target aggregate whereas they converge to arbitrary values in the case of the PF algorithm. This seemingly simple theoretical diﬀerence is responsible for all of the (practical) advantages of the PCF
over the PF and other competing approaches (cf. [15]).
2.2. Orthogonal Iteration
Orthogonal iteration [19] (see the left part of Algorithm 1) is a method which computes the k principal eigenvectors and eigenvalues of an input matrix A ∈ Rn×n . Besides the matrix A it assumes at the input also an arbitrary
matrix Q0 ∈ Rn×k . Under the assumption that the leading k + 1 eigenvalues of A are distinct in absolute value, the
columns of the matrices Qi converge to the k extreme eigenvectors of A and the diagonal elements of the matrices
Ri converge to the corresponding k eigenvalues of A (see, e. g., [19]). As can be seen in Algorithm 1, orthogonal
iteration proceeds in iterations consisting of two basic building block – a matrix-matrix multiplication Vi = AQi
and a reduced QR factorization Vi = Qi+1 Ri+1 . In this paper we consider computing the reduced QR factorization
by modiﬁed (mGS) Gram-Schmidt orthogonalization [20].
2.3. Existing Distributed Orthogonal Iteration (KOI)
Kempe and McSherry [2] introduced a fully distributed orthogonal iteration algorithm designed for computing
the k principal eigenvectors of the (weighted) adjacency matrix A ∈ Rn×n of the underlying network with N = n
nodes. In the following we denote this algorithm as KOI.
KOI assumes both matrices A ∈ Rn×n and Qi ∈ Rn×k distributed row-wise across the nodes. In the ﬁrst step,
distributed matrix-matrix multiplication, each node l computes a row Vi (:, l) = A(:, l) · Qi in iteration i. In order
to compute Vi (:, l), each node l obtains all rows Qi (:, j) from its neighbors j. As a result, the matrix product
V is computed exactly, but each node needs to communicate with all neighbors. Consequently, if only nearest
neighbor communication is admitted, KOI works only for the adjacency matrix of the underlying system. The QR
factorization in KOI is replaced with a mathematically equivalent sequence of a local outer product of vectors,
distributed summing of matrices, local Cholesky factorization and local solving a linear system. The distributed
summing of matrices in KOI is also done by utilizing a DDAA, for which the authors also use the term “push-sum”
algorithm. However, nodes communicate with all neighbors in each step of their DDAA algorithm and thus, in
our understanding, their approach actually uses a form of a consensus algorithm [16].
3. Distributed Orthogonal Iteration (dOI)
In this paper, we focus on investigating fault tolerance properties of the distributed orthogonal iteration algorithm dOI [3], which is, in contrast to KOI [2], fully based on randomized communication schedules. The absence

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198
10−10

dmmm(PF)
dmmm(PCF)
dmmm(PS)

AQ − Vˆ / AQ

10−11

10−12

10−13

10−14

10−15

10−16

0

50

100

150

200

250

N

Fig. 1. Comparison of accuracy achieved by distributed matrix-matrix multiplications (dmmm) using push-sum (PS), pushﬂow (PF) and push-cancel-ﬂow (PCF) when multiplying random matrices A ∈ R1024×1024 and Q ∈ R1024×32 over a hypercube
network with N nodes and with accuracy = 10−15 for DDAA.

of any operation with a deterministic communication schedule makes dOI much more ﬂexible than KOI with respect to the hardware infrastructure, since it decouples the structure and size of the matrix from the network over
which the computation is performed. We have discussed the communication cost of dOI based on the push-sum
algorithm [3] and showed that in many scenarios dOI(PS) has lower communication cost in terms of the number
of messages sent than KOI.
In this paper we investigate the inﬂuence of the absence of any deterministic schedule on the fault tolerance
of dOI when utilizing diﬀerent gossip-based DDAAs. We show that the resilience of dOI is substantially better
than the properties of KOI. Now, we start with reviewing the dOI algorithm (see right part of Algorithm 1) and
investigating the inﬂuence of the utilized DDAA on the ﬁnal accuracy of the two building blocks of dOI: distributed
matrix-matrix multiplication dmmm and distributed Gram-Schmidt orthogonalization dmGS.
Both distributed matrix computations (dmmm and dmGS) assume the matrix A distributed column-wise and
matrices Q and V distributed row-wise. In dmmm [3] each node computes an outer product of the locally stored
column of A and row of Q and then calls a DDAA to sum the results across all nodes. Such approach oﬀers
high robustness against node failures, since each node computes the whole matrix V and thus backs up data
for the potentially failed nodes. The other building block of dOI, the distributed QR factorization dmGS (see
Algorithm 2), was constructed in the following way [3, 21]: All summations for a dot-product or the 2-norm of a
vector in the sequential mGS were substituted by a distributed data aggregation algorithm (DDAA).
Since the DDAA for distributed summation in these algorithms can be seen as a “black-box”, it is possible to
use diﬀerent DDAA as the building block for the distributed matrix algorithms. In this section we investigate the
inﬂuence of the selected DDAAs on the ﬁnal accuracy of both matrix computations used in dOI, on the distributed
matrix-matrix multiplication dmmm and on the distributed QR factorization dmGS. In the simulations, all DDAAs
Algorithm 2 Distributed QR Factorization (dmGS)
Input: matrix A ∈ Rn×k , n ≥ k, distributed row-wise over nodes
Output: Q ∈ Rn×k , R ∈ Rk×k , Q distributed row-wise, Rl in each node l
1: for i = 1 to k do (in each node l do)
2:
x(l) = A(l, i)2
3:
sl = DDAA(x)
√
4:
Rl (i, i) = sl
5:
Q(l, i) = A(l, i)/Rl (i, i)
6:
X(l, 1 : k − i) = Q(l, i). ∗ A(l, i + 1 : k)
7:
Rl (i, i + 1 : k) = DDAA(X)
8: A(l, i + 1 : k) = A(l, i + 1 : k) − Q(l, i)Rl (i, i + 1 : k)
9: end for

193

194

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198
10−10

−11

10

10

10−12

10−12

10−13

10−13

10−14

10−14

10−15

10−15

10−16

dmGS(PF)
dmGS(PCF)
dmGS(PS)

−11

ˆT Q
ˆ
I −Q

ˆR
ˆ / V
V −Q

10−10

dmGS(PF)
dmGS(PCF)
dmGS(PS)

0

500

1000

N

1500

2000

10−16

0

500

1000

1500

2000

N

Fig. 2. Comparison of factorization error (left) and orthogonality of the matrix Q (right) achieved by distributed QR factorization

(dmGS) using push-sum (PS), push-ﬂow (PF) and push-cancel-ﬂow (PCF) when factorizing a random matrix V ∈ R2048×32 over
a hypercube network with N nodes and with accuracy = 10−15 for DDAA.

were terminated as soon as estimates in all nodes reached a given level of accuracy .
Fig. 1 shows the accuracy Vˆ − AQ / AQ of dmmm when computing the matrix product of two randomly
generated matrices A ∈ R1024×1024 and Q ∈ R1024×32 over a network with hypercube topology with N = 2d
(d = 5, .., 8) nodes and accuracy for DDAA = 10−15 . We can see that dmmm(PCF) is basically as accurate
as dmmm(PS), whereas the result computed by dmmm(PF) is more than one order of magnitude worse and the
quality decreases with increasing N.
Fig. 2 shows the factorization error V − Qˆ Rˆ / V and the orthogonality I − Qˆ T Qˆ , when factorizing a random
matrix V ∈ R2048×32 by dmGS over a hypercube with N = 2d (d = 5, .., 11) nodes and target accuracy for DDAA
= 10−15 . The inﬂuence of the diﬀerent DDAAs is similar to the inﬂuence on dmmm, since dmmm(PF) delivers
substantially less accurate results that dmmm(PS) and dmmm(PCF).
The simulations show that the practically observed properties of the DDAAs (cf. [14, 15]) are preserved also
when used as a part of more complex algorithms, such as dmmm or dmGS. Moreover, the ﬁnal accuracy delivered
by the matrix algorithms corresponds to the accuracy of the underlying DDAAs. For distributed matrix algorithms
based on PS and PCF the ﬁnal accuracy is of the same order as and an order of magnitude worse, if PF is used.
Consequently, we further focus only on the PS and the PCF algorithm.
3.1. Convergence Properties of dOI
Convergence analyses of the classical centralized and sequential orthogonal iteration procedure in exact arithmetic can be found in the standard literature, e. g., [20] or [19]. They show that orthogonal iteration computes the
ﬁrst k eigenpairs if |λk+1 |/|λk | < 1, assuming |λ1 | > ... > |λk | > |λk+1 | ≥ |λk+2 |... ≥ |λn |. A convergence proof of the
distributed orthogonal iteration approach by Kempe and McSherry has been given in [2].
In the following, we discuss the convergence properties of dOI along the lines of the proof provided in [2]. Of
particular interest is the inﬂuence on the convergence behavior if the exact matrix computations in the centralized
orthogonal iteration method are replaced by the randomized distributed methods dmmm and dmGS based on the
push-sum or the push-cancel-ﬂow algorithm. In the following, “DP-OI” denotes classical sequential orthogonal
iteration with matrix-matrix multiplication and QR factorization in ﬂoating-point arithmetic (double precision).
In order to express the total error of dOI after t iterations, we compare an orthogonal iteration process based
on exact arithmetic to our dOI algorithm using approximate distributed matrix-matrix multiplication (dmmm)
and QR factorization (dmGS). First, we quantify the error in the matrix Qi+1 introduced by one iteration of the
orthogonal iteration process. With Qi we denote the input matrix for the (i+1)-th iteration computed by i iterations
of exact orthogonal iteration, and with Qˆ i the input matrix which results from i iterations of dOI. In each iteration
of dOI, dmmm introduces an error E MM and dmGS introduces a factorization error E QR as well as an error ER
in the factor R: Vˆ i = AQˆ i+1 + E MM , Qˆ i+1 Rˆ i+1 = Vˆ i + E QR and Ri+1 = Rˆ i+1 + ER . The error analyses [23]
of matrix-matrix multiplication and Gram-Schmidt orthogonalization show that both algorithms are numerically
stable. Consequently, if the input is slightly perturbed, the output is close to the exact result (assuming that the

195

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198

input matrix is well-conditioned). Moreover, the relative error in R in the QR factorization is also of the order of
the ﬂoating-point accuracy [23]. Thus, if all instances of PS or PCF in dOI achieve at least the same accuracy
level and if the input matrix A is well-conditioned, then the resulting error of dmmm and dmGS is of similar
magnitude, and we can conclude E MM ≈ E QR ≈ ER ≤ δ = O( ). A detailed formal proof for this is work in
progress.
We start with the equation Qˆ i+1 Rˆ i+1 = Vˆ i + E QR and rearrange it using the relationships listed above. We get
(Qˆ i+1 − Qi+1 ) = (A(Qˆ i − Qi ) + E QR + E MM − Qˆ i+1 ER )R−1
i+1 .
Thus, the inﬂuence of one iteration of orthogonal iteration can be summarized as:
Qˆ i+1 − Qi+1 ≤

A Qˆ i − Qi + E QR + E MM + Qˆ i+1

ER

R−1
i+1

From this relationship we can bound the total error introduced by orthogonal iteration with approximate
matrix-matrix multiplication and QR factorization after t iterations:
t−1

Qˆ t − Qt ≤

E QR + E MM + ER

A i ci+1 = 3 δ c ·
i=0

A t ct − 1
A c−1

(1)

≤ c with a positive constant c and we assumed that Qˆ i = 1 in each iteration i ≤ t. Note that the
where R−1
i
right-hand side of Eq. (1) has basically the same form as the result derived by Kempe and McSherry (see Section
3.2 in [2]), where it is shown that this right-hand side is smaller than the user-deﬁned accuracy of dOI.
4. Fault Tolerance of dOI
As mentioned earlier, gossip-based distributed matrix algorithms have a potential for a high-fault tolerance, but
so far this has not been investigated thoroughly in the literature. We present simulation results comparing the fault
tolerance of the following distributed orthogonal iteration algorithms: dOI based on the PS algorithm (dOI(PS)),
dOI based on the push-cancel-ﬂow algorithm (dOI(PCF)) and the KOI algorithm designed by Kempe and McSherry [2]. We do not explicitly discuss the dOI based on the PF algorithm, because it has lower resilience than PCF
and is numerically less accurate (see Section 3). In this paper we focus on the following two groups of failure
types in the distributed systems under considerations: (G1) Reported temporary unavailability of links/nodes or
reported message loss, and (G2) silent (unreported) loss or corruption of a message.
Although the PS algorithm does not provide explicit fault tolerance mechanisms, it can tolerate known failures
of type G1 during the computation due to its randomized communication schedules. The utilization of the graph
theoretical ﬂow concept allows the PCF algorithm to overcome a wide range of system failures in the following
two ways: (i) soft errors like lost messages or bit ﬂips in messages (failure type G2) are handled implicitly at
the next successful communication across this link, and (ii) reported permanent link failures are algorithmically
excluded from the computation by setting the corresponding ﬂow variables to zero: e. g., if the link between nodes
i and j fails permanently, fi, j and f j,i are set to zero.
We illustrate in this section that the dOI(PCF) is “self-healing” even in the presence of silent message loss.
For comparisons to the consensus-based distributed orthogonal iteration KOI [2] we computed k eigenpairs of the
¯ Note that dOI
adjacency matrix A ∈ Rn×n of a random geometric graph with N nodes and average node degree d.
is not restricted only to adjacency matrix and the simulations showed that the properties presented in this section
hold also when computing eigenpairs of a more general random matrix distributed over networks with diﬀerent
topologies. We generated test cases where the classical orthogonal iteration algorithm converges reasonably fast.
We used random symmetric matrices A ∈ Rn×n with elements from the interval [−100, 100] and for each matrix
k = 5 eigenpairs were computed. The ﬁrst six eigenvalues of each input matrix satisfy |λ1 | > ... > |λ6 | and the
minimal distance between these eigenvalues is 10. The matrix Q0 was initialized with the ﬁrst k unit vectors of
length n. In the simulations, each transmission of a message failed with the same probability p. We investigated
the cases, where p = 0 (no failures) and p = 0.1, 0.25 and 0.5, when up to 50% of the messages have not been
delivered.

196

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198

4.1. Reported Unavailability of Links/Nodes
Dealing with failure types G1 is generally easy for any randomized method with ﬂexible communication
schedules. Since the selection of the communication partner is not ﬁxed, any of the remaining available communication partners can be chosen if nodes or communication links are temporarily unavailable, provided this failure
is known. If a known permanent link failure occurs, the algorithm reacts in a very similar way and the accuracy
achieved is not inﬂuenced, under the assumption that the network stays connected. Permanent node failures are
more diﬃcult to handle if there is no redundancy, because with a node also its local data is lost.
In the following we investigate the convergence behavior of KOI and dOI(PS) in the presence of reported
temporary link failures/message loss when computing 5 eigenpairs of an adjacency matrix A ∈ R150×150 of the
underlying random geometric graph with N = 150 nodes and an average node degree d¯ = 20. As shown in the left
part of Fig. 3, for KOI even reported message loss leads to a severe loss of accuracy. This is because of the fact
that the matrix-matrix multiplication in KOI follows a deterministic communication schedule where each node
has to exchange information with every neighbor. Thus, it cannot adapt even to a reported temporary change in
the network. If a message is lost, the matrix-matrix multiplication delivers an incorrect result which substantially
inﬂuences the whole result. In contrast to KOI, dOI has fully randomized communication schedules, which makes
it possible to react to changes in the network during computation. The right part of Fig. 3 shows the convergence
behavior for dOI with push-sum under the same conditions as for KOI, i. e., the same underlying graph as well as
the input matrix and each transmission failed with probability p. As we can see, dOI(PS) achieves full accuracy
also in the presence of reported link failures.
4.2. Silent Message Loss
As we saw in the previous section, handling reported failures in the network and delivering the result in high
accuracy is easy if the distributed algorithm is fully based on randomized communication schedule. However, in
practice we cannot expect that all changes in decentralized distributed systems can be monitored and (immediately)
reported. Unreported link failures and message loss is more diﬃcult to deal with since those failures usually
introduce a (temporary) error from which the system has to recover properly, without actual knowledge that a
failure has happened. As shown in this section, push-sum and distributed algorithms built on top of it are not able
to tolerate such unreported failures. We also present simulation results for dOI(PCF) and show that in contrast
to dOI(PS) it can deliver full accuracy despite unreported message loss. Thus, dOI(PCF) achieves the best fault
tolerance properties of all fully distributed orthogonal iteration algorithms.
Fig. 4 shows the comparison of dOI(PS) and dOI(PCF) in the presence of unreported message loss. All ﬁgures
depict results for computing k = 5 eigenpairs of an input matrix A ∈ R1024×1024 over a hypercube with N = 64
nodes. dOI(PS) does not deliver correct results if the message loss is unreported, because PS does not have the
ability to recover from the corresponding mass loss (see Section 2). In contrast, dOI(PCF) computes the eigenpairs
to full accuracy despite silent message loss. The price to be paid for these superior resilience properties are slightly
∞

A

−2

∞/

10

10−4
−6

10

10−8
−10

10

10−12

KOI, p=0.5
KOI, p=0.25
KOI,p=0.1
KOI, p=0

10−14
−16

10

0

50

100

150

200

# iterations

250

300

350

400

ˆ t (:, i) − λˆi Q
ˆ t (:, i)
maxi=1,...,5 AQ

ˆ t (:, i) − λˆi Q
ˆ t (:, i)
maxi=1,...,5 AQ

∞/

A

∞

100

100

dOI(PS), p=0.5
dOI(PS), p=0.25
dOI(PS), p=0.1
dOI(PS), p=0

10−2
10−4
10−6
10−8
10−10
10−12
10−14
10−16

0

50

100

150

200

250

300

350

400

# iterations

Fig. 3. Accuracy achieved by KOI (left) and dOI with push-sum (right) when computing k = 5 eigenpairs of an adjacency matrix

of a random geometric graph with N = 150 nodes, an average node degree d¯ = 20 in the presence of known unavailability of
communication links with failure probability p and with accuracy = 10−15 for DDAA (averaged over 10 runs).

197

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198

∞

A
∞/

10−2
10−4
10−6
10−8
−10

10

10−12

dOI(PS), p=0.5
dOI(PS), p = 0.25
dOI(PS), p = 0.1
dOI(PS), p = 0

10−14
−16

10

0

50

100

150

200

250

300

ˆ t (:, i) − λˆi Q
ˆ t (:, i)
maxi=1,...,5 AQ

ˆ t (:, i) − λˆi Q
ˆ t (:, i)
maxi=1,...,5 AQ

∞/

A

∞

100

100

dOI(PCF), p=0.5
dOI(PCF), p=0.25
dOI(PCF), p=0.1
dOI(PCF), p=0

10−2
10−4
10−6
10−8
10−10
10−12
10−14
10−16

0

50

100

150

200

250

300

# iterations

# iterations

Fig. 4. Accuracy achieved by dOI with push-sum (left) and dOI with push-cancel-ﬂow (right) when computing k = 5 eigenpairs

of a random matrix A ∈ R1024×1024 over a hypercube with N = 64 nodes in the presence of silent message loss with the failure
probability p for each message and with accuracy = 10−15 for DDAA (averaged over 10 runs).

higher communication costs (see Fig. 5). The more failures occur, the more rounds are needed in each PCF to
recover and thus also the overall communication cost of dOI increases with higher failure probability p.
5. Summary and Conclusions
We investigated the fault tolerance of the decentralized distributed orthogonal iteration algorithm dOI. This
algorithm computes the extreme eigenpairs of a square matrix A, which is distributed column-wise over a loosely
coupled decentralized network, such as a P2P or a sensor network. The essential building block of the distributed
matrix algorithms discussed in this paper are distributed data aggregation algorithms (DDAAs) for distributed
summation across the network. In this paper, we considered three gossip-based DDAAs, which are theoretically
equivalent in failure-free environments [13, 14]: the push-sum algorithm (PS), which is the state-of-the-art baseline
DDAA, the push-ﬂow algorithm (PF) and to the push-cancel-ﬂow algorithm (PCF).
First, we investigated the numerical accuracy achieved by the two central components of the dOI algorithm,
distributed matrix-matrix multiplication and distributed QR factorization, when using diﬀerent DDAAs. As expected, if the matrix computations are based on the PF algorithm they are substantially less accurate in practice
than if they are based on the PS or on the PCF algorithm. This can be explained by the inferior numerical properties
of the PF algorithm [14]. Furthermore, we discussed the convergence properties of dOI.

# messages sent per node

107

106

105

104

103
10−16

dOI(PCF), p=0.5
dOI(PCF), p=0.25
dOI(PCF), p=0.1
dOI(PCF), p=0
10−14

10−12

10−10

10−8

10−6

ˆ t (:, i) − λˆi Q
ˆ t (:, i)
maxi=1,...,5 AQ

10−4

∞/

A

10−2

100

∞

Fig. 5. Communication cost per node of dOI with push-cancel-ﬂow (PCF) when computing k = 5 eigenpairs of a random matrix

A ∈ R1024×1024 over a hypercube with N = 64 nodes in the presence of silent message loss with the failure probability p of each
message and with accuracy = 10−15 for DDAA. (Average over 10 runs)

198

Hana Straková et al. / Procedia Computer Science 18 (2013) 189 – 198

The main advantage of using gossip-based DDAAs in matrix algorithms is the resulting ﬂexibility and high
potential for fault tolerance. Thus, we also explored the impact of the concrete DDAA used on the resilience
of dOI against various types of failures. More speciﬁcally, we investigated the behavior of dOI in the presence
of reported (known) unavailability of communication links and in the presence of silent (unreported) message
loss. For the KOI algorithm [2], which is to the best of our knowledge the only existing decentralized distributed
orthogonal iteration algorithm so far, any kind of failure leads to a severe loss of accuracy. We showed that
dOI can tolerate all kinds of reported temporary changes in the network without any loss of accuracy due to its
randomized communication schedule. Moreover, we showed that the dOI algorithm inherits attractive properties
from the DDAA used as building block. Thus, if the push-cancel-ﬂow algorithm, which has superior fault tolerance
properties, is used as the underlying DDAA, dOI can even recover from silent link failures or from message loss
without any loss of accuracy.
We are currently working on extending the resilience of dOI also to other types of failures, such as permanent
link failures, temporary and permanent node failures, and corruption of local data (bit ﬂips). Beyond that, extensive (runtime) performance evaluations and comparisons with state-of-the-art parallel matrix algorithms will be
performed in order to quantify potential runtime – resilience trade-oﬀs.
Acknowledgments
This work has been partly supported by the Austrian Science Fund (FWF) in project S10608 (NFN SISE).
References
[1] E. Agullo, J. Demmel, J. Dongarra, B. Hadri, J. Kurzak, J. Langou, H. Ltaief, P. Luszczek, S. Tomov, Numerical linear algebra on
emerging architectures: The PLASMA and MAGMA projects, Journal of Physics: Conference Series 180 (1) (2009) 012037.
[2] D. Kempe, F. McSherry, A decentralized algorithm for spectral analysis, J Comput Syst Sci 74 (1) (2008) 70 – 83.
[3] H. Strakov´a, W. N. Gansterer, A Distributed Eigensolver for Loosely Coupled Networks, in: Proceedings of the 21st Euromicro International Conference on Parallel, Distributed and Network-Based Processing, 2013.
[4] J. Plank, K. Li, M. Puening, Diskless checkpointing, IEEE Trans. Parallel and Dist. Syst. 9 (10) (1998) 972–986.
[5] K.-H. Huang, J. Abraham, Algorithm-Based Fault Tolerance for Matrix Operations, IEEE Trans Comput C-33 (6) (1984) 518–528.
[6] C. Anﬁnson, F. Luk, A Linear Algebraic Model of Algorithmic-Based Fault Tolerance, in: Proceedings of the International Conference
on Systolic Arrays, 1988, pp. 483–493.
[7] F. Luk, H. Park, Fault-tolerant matrix triangularizations on systolic arrays, IEEE Trans Comput 37 (11) (1988) 1434–1438.
[8] S. Boyd, A. Ghosh, B. Prabhakar, D. Shah, Gossip algorithms: design, analysis and applications, in: Proceedings IEEE of the 24th
Annual Joint Conference of the IEEE Computer and Communications Societies (INFOCOM 2005), Vol. 3, 2005, pp. 1653 – 1664.
[9] S. Boyd, A. Ghosh, B. Prabhakar, D. Shah, Randomized gossip algorithms, IEEE Trans. Information Theory 52 (6) (2006) 2508 – 2530.
[10] A.-M. Kermarrec, M. van Steen, Gossiping in distributed systems, SIGOPS Oper. Syst. Rev. 41 (2007) 2–7.
[11] A. Dimakis, S. Kar, J. Moura, M. Rabbat, A. Scaglione, Gossip algorithms for distributed signal processing, Proc IEEE 98 (11) (2010)
1847 –1864.
[12] D. Kempe, A. Dobra, J. Gehrke, Gossip-based computation of aggregate information, in: FOCS ’03: Proceedings of the 44th Annual
IEEE Symposium on Foundations of Computer Science, IEEE Computer Society, 2003, pp. 482–491.
[13] W. N. Gansterer, G. Niederbrucker, H. Strakov´a, S. Schulze Grotthoﬀ, Robust distributed orthogonalization based on randomized aggregation, in: Proceedings of the Second Workshop on Scalable algorithms for Large-Scale Systems, ScalA ’11, ACM, 2011, pp. 7–10.
[14] G. Niederbrucker, H. Strakov´a, W. N. Gansterer, Improving Fault Tolerance and Accuracy of Distributed Reduction Algorithms, in:
Proceedings of the Third Workshop on Scalable Algorithms for Large-Scale Systems, ScalA ’12, 2012.
[15] G. Niederbrucker, W. N. Gansterer, Robust Gossip-Based Aggregation: A Practical Point of View, in: P. Sanders, N. Zeh (Eds.),
Proceedings of the 2013 Meeting on Algorithm Engineering & Experiments, ALENEX 2013, SIAM / Omnipress, 2013, pp. 133–147.
[16] R. Olfati-Saber, J. A. Fax, R. M. Murray, Consensus and Cooperation in Networked Multi-Agent Systems, Proc IEEE 95 (1) (2007)
215–233.
[17] P. Denantes, F. Benezit, P. Thiran, M. Vetterli, Which distributed averaging algorithm should i choose for my sensor network?, in:
INFOCOM 2008. The 27th Conference on Computer Communications. IEEE, 2008, pp. 986 –994.
[18] M. Jelasity, G. Canright, K. Engø-monsen, Asynchronous distributed power iteration with gossip-based normalization, in: Euro-Par
2007, volume 4641 of Lecture Notes in Computer Science, Springer-Verlag, 2007, pp. 514–525.
[19] L. N. Trefethen, D. Bau, Numerical Linear Algebra, SIAM: Society for Industrial and Applied Mathematics, 1997.
[20] G. H. Golub, C. F. Van Loan, Matrix Computations, 3rd Edition, The Johns Hopkins University Press, 1996.
[21] H. Strakov´a, W. N. Gansterer, T. Zemen, Distributed QR Factorization Based on Randomized Algorithms, in: R. Wyrzykowski, J. Dongarra, K. Karczewski, J. Wasniewski (Eds.), PPAM (1), Vol. 7203 of Lecture Notes in Computer Science, Springer, 2011, pp. 235–244.
[22] G. W. Stewart, Perturbation Bounds for the QR Factorization of a Matrix, SIAM J Numer Anal 14 (3) (1977) pp. 509–518.
[23] N. J. Higham, Accuracy and Stability of Numerical Algorithms, Society for Industrial and Applied Mathematics, 2002.

