Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2440 – 2443

International Conference on Computational Science, ICCS 2013

Computing Classes of Cryptographic Sequence Generators
A. F´uster-Sabatera,∗
a Information

Security Institute (CSIC), Serrano 144, 28006 Madrid, Spain

Abstract
A large Linear Complexity (LC) is a fundamental requirement for a binary sequence to be used in secret key cryptography. In
this paper, a method of computing all the nonlinear ﬁlters applied to a shift register with a linear complexity LC ≥ Lk , where
L is the length of the register and k the order of the ﬁlter, is proposed. The procedure is based on the handling of ﬁltering
functions by means of algebraic operations. The method formally completes the family of nonlinear ﬁltering functions with a
guaranteed large linear complexity. In cryptographic terms, it means an easy and useful way of designing sequence generators
for cryptographic purposes.
Keywords: Nonlinear ﬁlter; encryption function; linear complexity; sequence generator; stream cipher.

1. Introduction
Typically, a stream cipher consists of a sequence generator whose output sequence (keystream sequence) is
XORed with the plaintext (in emission) to obtain the ciphertext or with the ciphertext (in reception) to recover the
original plaintext. References [1],[2], [3] and [4] provide a solid introduction to the study of stream ciphers. At
the present moment, stream ciphers are the fastest among the encryption procedures so they are applied to many
engineering implementations e.g. the encryption algorithm RC4 used in Wired Equivalent Privacy (WEP) as a
part of the 802.11 standard, the recent proposals HC-128 or Rabbit coming from the eSTREAM Project [5] or the
latest versions of CyaSSL (lightweight open source embedded implementation of the SSL/TLS protocol [6]).
Most keystream generators are based on maximal-length Linear Feedback Shift Registers (LFSR) [4] whose
output sequences, the so-called PN-sequences, are combined in a nonlinear way (e.g. by means of nonlinear
combinators, irregular decimation, introduction of typical elements from block ciphers, etc) to produce sequences
of cryptographic application. One general technique for building keystream generators is to use a nonlinear ﬁlter,
i.e. a nonlinear function applied to the stages of a single maximal-length LFSR [2]. That is the keystream sequence
is generated as the image of a nonlinear Boolean function F in the LFSR stages.
Desirable properties for such sequences can be enumerated as follows: a) Long Period, b) Good statistical
properties, c) Large Linear Complexity (LC). In cryptographic terms, LC must be as large as possible in order to
prevent the application of the Berlekamp-Massey algorithm [2]. In fact, a recommended value for LC is about half
the sequence period. Although the exact value of the linear complexity attained by any nonlinear ﬁlter is still an
open problem, in this work a method of computing the whole class of ﬁltering functions with a guaranteed linear
complexity adequate for cryptographic purposes is proposed. The method is based on the handling of nonlinear
ﬁlters by means of algebraic operations.
∗ Corresponding

author: A. F´uster-Sabater. Tel.: +34-91-5631284
E-mail address: amparo@iec.csic.es.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.419

A. F´uster-Sabater / Procedia Computer Science 18 (2013) 2440 – 2443

2441

2. Representations of Nonlinear Filters and Equivalence Classes
A nonlinear ﬁlter is a Boolean function F(sn , sn+1 , . . . , sn+L−1 ) in L variables of degree k where sn , sn+1 , . . . ,
sn+L−1 are the bits of the PN-sequence {sn } generated by a maximal-length LFSR of L stages and characteristic
polynomial P(x) [4]. The ﬁltered sequence {zn } is the keystream or output sequence of the nonlinear ﬁlter F
applied to the L stages of the LFSR. The keystream bit zn is computed by selecting bits from the PN-sequence
such that
zn = F(sn , sn+1 , . . . , sn+L−1 ).
Traditionally F is represented in Algebraic Normal Form (ANF) as the sum of distinct products in the Boolean
variables (sn , sn+1 , . . . , sn+L−1 ). This representation of Boolean functions is currently used by the designer of nonlinear ﬁlters as he can handle the degree and particular form of the function. Nevertheless, the ANF of nonlinear
ﬁlters do not give information on the linear complexity of the ﬁltered sequence. In this sense, a diﬀerent representation closely related to the linear complexity is required. Indeed, if all the variables sn+ j (0 ≤ j ≤ L − 1) of
F are substituted in terms of the trace function and the resulting elements grouped, then the term zn of the ﬁltered
sequence {zn } can be written as:
C E1 α

E1 n

zn = F(sn , sn+1 , . . . , sn+L−1 ) =
(r −1)
+ (C E1 αE1 n )2 + . . . + (C E1 αE1 n )2 1 +
..
.
(ri −1)

C Ei αEi n + (C Ei αEi n )2 + . . . + (C Ei αEi n )2 +
(1)
..
.
(r −1)
C EN αEN n + (C EN αEN n )2 + . . . + (C EN αEN n )2 N ,
where ri a divisor of L is the cardinal of coset Ei [3], the subindex i ranges in the interval 1 ≤ i ≤ N and N
is the number of cosets of weight ≤ k. In addition, α is a root of the characteristic polynomial P(x) as well as a
primitive element in the extension ﬁeld GF(2L ).
Note that the i-th row of (1) corresponds to the nth-term of the sequence {C Ei αEi n + (C Ei αEi n )2 + . . . +
(r −1)
(C Ei αEi n )2 i }, that is the characteristic sequence {S nEi } where the coeﬃcient C Ei ∈ GF(2ri ) determines the starting
point with reference to its characteristic phase. If C Ei = 0, then the corresponding cyclotomic coset Ei would be
degenerate. Otherwise, the coset is nondegenerate. Linear complexity of the ﬁltered sequence is related with the
number of coeﬃcients C Ei 0 as the contribution of any nondegenerate coset to LC equals the cardinal of such
a coset [3]. In this way, the above sequential representation already provides quantitative information on the LC
of the ﬁltered sequence. In fact, a nonlinear ﬁlter F(sn , sn+1 , . . . , sn+L−1 ) can be also represented by a N-tuple of
coeﬃcients (C E1 , C E2 , . . . , C EN ) where C Ei ∈ GF(2ri ) and N is as before the number of cosets of weight ≤ k. This
representation is particularly useful as allows us to treat separately the distinct cosets.
The idea of grouping nonlinear ﬁlters in equivalence classes for their analysis and handling has been already
treated in the literature, see [7]. In this section, an equivalence relationship speciﬁc to design ﬁlters with guaranteed
LC is proposed. Let G be the set of the kth-order nonlinear ﬁlters applied to a single LFSR of length L. We are
going to group the elements of G producing the ﬁltered sequence {zn } or a shifted version of {zn }, denoted by {zn }∗ .
From equation (1), it is clear that if we substitute C Ei for C Ei · αEi (1 ≤ i ≤ N), then we will obtain {zn+1 }. In
general,
C Ei → C Ei · α jEi ∀i ⇒ {zn } → {zn+ j }.
This fact enables us to deﬁne an equivalence relationship ∼ on the set G as follows: F ∼ F with F, F ∈ G if
they generate shifted versions of the same ﬁltered sequence {zn },
{F(sn , . . . , sn+L−1 )} = {zn } and {F (sn , . . . , sn+L−1 )} = {zn }∗ .
It is easy to see that the relation deﬁned above is an equivalence relationship and that the number of ﬁlters
in each equivalence class equals the period of the ﬁltered sequence. Making use of the this representation for
nonlinear ﬁlters (N-tuple of coeﬃcients), we see that the coeﬃcients associated with F, F , notated (C Ei ) and (C Ei )
respectively, satisfy for an integer j
C Ei = C Ei · α j Ei (1 ≤ i ≤ N).
(2)

2442

A. F´uster-Sabater / Procedia Computer Science 18 (2013) 2440 – 2443

3. A Method of Computing Nonlinear Filters with a Guaranteed LC
Two nonlinear ﬁlters F0 and F1 in the same equivalence class are consecutive if they satisfy the equation (1)
with j = 1 or equivalently
F1 (sn , . . . , sn+L−1 ) = F0 (sn+1 , . . . , sn+L ).
Moving from ﬁlter F0 to ﬁlter F1 in the two forms of representation means: a) An increment by 1 in all
the sub-indices of the ANF representation and b) The product of each coeﬃcient by its corresponding factor αEi
(1 ≤ i ≤ N) in the N-tuple representation.
From the previous statements, an easy method of computing all the nonlinear ﬁlters that guarantee the cosets
of weight k is given. Indeed, we start from a ﬁlter with a unique term product of k equidistant phases of the form:
F0 (sn , sn+1 , . . . , sn+L−1 ) = sn sn+δ sn+2δ . . . sn+(k−1)δ

(3)

with 1 ≤ k ≤ L and gcd(δ, 2L − 1) = 1. In the sequel, we will focus exclusively on the Nk cosets of weight k
making use of the Nk -tuple representation.
Given F0 in (3), the computation of its Nk -tuple is carried out as follows. Let E = 2e0 + 2e1 + . . . + 2ek−1 be the
leader element of an arbitrary coset of weight k where ei (0 ≤ i ≤ k − 1) are integers. According to the previous
equations and grouping terms, the coeﬃcient C E for F0 in the Nk -tuple representation, denoted by C E0 , is given by
the determinant
e
e
e
e
α0· 2 0
αδ 2 0
α2 δ 2 0 . . . α(k−1) δ 2 0
e1
e1
e1
e
α0· 2
αδ 2
α2 δ 2
. . . α(k−1) δ 2 1
0
,
(4)
CE =
...
...
...
0· 2ek−1
δ 2ek−1
2 δ 2ek−1
(k−1) δ 2ek−1
α
α
α
... α
Thus, each coeﬃcient C E0 is a Vandermonde determinant that can be easily computed as well as it is guaranteed
to be diﬀerent from 0. Thus, the cosets of weight k for the ﬁlter F0 are nondegenerate and their contribution to
the linear complexity equals Lk , see [3]. Next, the coeﬃcient of coset E for F1 in the Nk -tuple representation,
denoted by C E1 , is given by the determinant
e

C E1 =

α1· 2 0
e
α1· 2 1
1· 2ek−1

α
thus,

e

α(δ+1) 2 0
e
α(δ+1) 2 1
...
e
α(δ+1) 2 k−1
e0

e1

α(2 δ+1) 2 0
e
α(2 δ+1) 2 1
e

α

(2 δ+1) 2ek−1

C E1 = α2 · α2 . . . α2

ek−1

. . . α((k−1) δ+1) 2 0
e
. . . α((k−1) δ+1) 2 1
,
...
...
((k−1) δ+1) 2ek−1
... α
e

· C E0 = αE · C E0 .

(5)

(6)

At the same time, the coeﬃcient of coset E for the ﬁlter F0 + F1 , denoted by C E01 , is
C E01 = C E0 + C E1 = C E0 (1 + αE ).

(7)

The key idea in this construction method is shifting the ﬁlter F0 + F1 through its equivalence class and summing
it with F0 in order to cancel the successive components of its Nk -tuple. The procedure is sketched in algorithm 1.
After a succession of sums and shiftings, the ﬁnal result is:
1. A set of Nk basic nonlinear ﬁlters of the form (0, 0, . . . , di , . . . , 0, 0) (1 ≤ i ≤ Nk ) with di ∈ GF(2L ), di 0
where each ﬁlter includes a unique coset Ei of weight k.
2. Their corresponding ANF representations.
The combination of all these basic ﬁlters with di (1 ≤ i ≤ Nk ) ranging in GF(2L ) (with the corresponding ANF
representations) gives rise to all the possible terms of order k that preserve the cosets of weight k. Later, the
addition of terms of order < k in ANF permits the generation of all the nonlinear ﬁlters of order k that guarantee a
linear complexity LC ≥ Lk .

A. F´uster-Sabater / Procedia Computer Science 18 (2013) 2440 – 2443

2443

Algorithm 1. Computation of nonlinear ﬁlters with a unique k-weighted coset
Input:
The pair (L, k), Nk , LFSR characteristic polynomial P(x), ﬁlter F0 in ANF
01: Compute the Nk -tuple for ﬁlter F0 , (C E0 i ), (1 ≤ i ≤ Nk );
02: for i = Nk − 1 to 2 do
03:
Compute the Nk -tuples for ﬁlters F1 and F0 + F1 , (C E1 i ) and (C E01i ) (1 ≤ i ≤ Nk ), respectively;
04:
Shift (C E01i ) through its equivalence class until the i − th component equals C E0 i ;
05:
Sum (C E01i ) + (C E0 i ) getting a Nk -tuple with 0 at the i − th component;
06:
(C E0 i ) ← (C E01i ) + (C E0 i )
07: end for
Output:
A set of Nk basic ﬁlters of the form (0, 0, . . . , di , . . . , 0, 0) (1 ≤ i ≤ Nk ) with di ∈ GF(2L ), di 0
Their corresponding ANF representations.

3.1. Discussion of the method
Recall that the construction method above described to compute the basic ﬁlters (0, 0, . . . , di , . . . , 0, 0), di
involves very simple operations:

0

• Sum operation: that is reduced to a sum of ﬁlters in the ANF representation or to a sum of elements C Ei in
the extended ﬁeld GF(2L ) that expressed in binary representation is just an exclusive OR operation.
• Shifting operation through an equivalence class: that means for each shifting an increment by 1 in all the
indexes in the ANF representation or the multiplication of powers of α by their corresponding factors αEi in
the Nk -tuple representation.
Consequently, the eﬃciency of the computation method is quite evident. In brief, we provide one with the complete class of nonlinear ﬁlters with LC ≥ Lk at the price of minimal computational operations.
4. Conclusions
In this work, two diﬀerent representations of nonlinearly ﬁltering functions (ANF and N-tuple representation)
have been considered and analyzed. At the same time, a method of computing all the nonlinear dynamical ﬁlters
applied to a LFSR that guarantee the cosets of weight k has been developed. The procedure is based on algebraic
operations (addition and shifting operations) on nonlinear ﬁlters in diﬀerent equivalence classes. Starting from a
nonlinear ﬁlter that is the product of equidistant phases, the computation method formally completes the class of
ﬁlters with a guaranteed linear complexity of value LC ≥ Lk . In cryptographic terms, this procedure means an
easy way of designing keystream generators for stream ciphers.
Acknowledgements
This work was supported by CDTI (Spain) under Project Cenit-HESPERIA as well as by Ministry of Science
and Innovation and European FEDER Fund under Project TIN2011-25452/TSI.
References
[1]
[2]
[3]
[4]
[5]
[6]
[7]

N. Nagaraj, One-Time Pad as a nonlinear dynamical system. Commun Nonlinear Sci Numer Simulat 17 (2012) 4029-4036.
C. Paar, J. Pelzl, Understanding Cryptography, Springer-Verlag, Berlin Heidelberg, 2010.
R.A. Rueppel, Analysis and Design of Stream Ciphers, Springer, New York, 1986.
S. Golomb, Shift-Register Sequences, revised ed., Aegean Park Press, Laguna Hills, California, 1982.
M. Robshaw, O. Billiet (Eds.), New Stream Cipher Designs: The eSTREAM Finalist. LNCS, Vol. 4986, Springer-Verlag, 2008.
Yet Another SSL (YASSL), Embedded SSL Library (2012) available at http://www.yassl.com
S. Ronjom, C. Cid, Nonlinear Equivalence of Stream Ciphers. Proc. of Fast Software Encryption, 17th International Workshop, FSE
2010, Seoul, Korea, LNCS, Vol. 6147, Springer-Verlag, 2010, pp. 40-54.

