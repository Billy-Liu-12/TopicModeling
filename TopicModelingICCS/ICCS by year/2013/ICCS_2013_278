Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2327 – 2336

International Conference on Computational Science, ICCS 2013

Overcoming uncertainty on video-on-demand server design by
using self-similarity
and principal component analysis
Raul Ramirez-Velarde∗, Lorena Martinez-Elizalde, Carlos Barba-Jimenez
a Tecnologico

de Monterrey, Eugenio Garza Sada 2501 Sur Col. Tecnologico, Monterrey 64849, Mexico

Abstract
In this paper we use a small amount of video ﬁles to design a video-on-demand server. We use the available video information
to overcome uncertainties such as future user preference, type of video ﬁle (movie, cartoon, documentary), video compression
technique, etc. Using principal component analysis we overcome such uncertainties by reducing the dimensionality of the
video data, creating a new video trace that captures statistical characteristics of most video ﬁles; we call this the characteristic
video trace. Using the Pareto probability distribution for the size of the video frames (of the characteristic video trace) and
self-similarity we develop a non-asymptotic model which predicts memory buﬀer size for a required quality of service. By
obtaining the necessary parameters for the mathematical model from the characteristic video trace we could design the server
without more information.
Keywords: Pareto processes, digital video, principal component analysis, self-similarity.

1. Introduction
Nowadays digital multimedia entertainment systems are becoming more common. These entertainment systems place heavy demands over the current infrastructure. They require large storage systems, high bandwidth,
strong computing power, very precise algorithms, etc. And the most demanding of all is video.
Although large availability of high quality content is to be expected in the near future, using current Videoon-demand (VOD) technology making such material available to users is not as simple as just storing the videos
and servicing them. Each video possesses diﬀerent statistical qualities that aﬀect VOD system parameters such as
disk scheduling algorithm, real-time jobs processing and programming, memory buﬀer size, CPU core allocation,
etc.
The main problems to address in storage and transmission of video ﬂows are the chaotic behavior of video
streams [1] and the non-existence of a priori knowledge about user preferences. Another problem is that new
videos will be constantly added to the video data base, oﬀsetting any design based on an old collection of videos.
Such issues make it very diﬃcult to design VOD servers, as it is very likely that real-time behavior will deviate
signiﬁcantly from sample, and even population statistics, a mix of phenomena called heavy-tails and self-similarity
∗ Corresponding

author. Tel.: +52-(81)-8358 2000
E-mail address: rramirez@itesm.mx.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.404

2328

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

[2][3]. To take into consideration such behavior several models have been developed, such as Fractional Gaussian
Noise (FGN), M/G/∞ and others [4],[5],[6],[7]. But some of them are asymptotic models that can only be used
on very speciﬁc situations, or use probability distributions that cannot approximate the heavy-tail observed in
video data (and thus are not useful for very high degrees of service quality) and do not in general, solve the
problem of high diversity of available video streams. For example, in [8],[9],[10] we ﬁnd that the asymptotic
models sometimes do not ﬁt well for video, whereas in [11] we see the diﬃculties of trying to apply heavy-tailed
probability distributions to model video data.
To address those uncertainties already mentioned we use two techniques. We treat the availability of a large
number of video traces as a problem of muti-dimensionality. A video trace ﬁle contains the values of the ﬁnal size
of each picture or frame that makes up the video after MPEG 4 compression, representing storage and bandwidth
requirements (see section 3.1). We consider each video ﬁle to be a dimension for video frame size data. Then we
use principal components analysis (PCA) to determine a Characteristic Video Trace (CVT), that is, a video trace
that captures as much of variability of all stored video ﬁles as possible. We use PCA to reduce the dimensionality
of video ﬁle availability from possible hundreds and thousands to one, two or at most three.
The rest of the articles is organized a follows. In section 2 we present the video server model in which we
establish the variables to model and performance measures. In section 3 we introduce the principal component
analysis technique and present the result of the analysis over our video streams. In section 4 we present the
stochastic framework and the Pareto Fractal Noise model. Finally, in section 5 we present our conclusions.
2. Video Server Model
The components of HD VOD server are:
• A storage subsystem
• An operating and control subsystem
• A network subsystem
The storage subsystem is responsible for the eﬃcient storage of videos and the fetching of video information
from the stored ﬁles. The operating and control system is responsible for the admission of clients, the reservation
of client resources, and the service of client requests. The network subsystem is responsible for the packaging and
delivery of data information to the client software and for transporting user control commands. This brings one
additional component of the HD VOD server: the client. For now on we will refer to the client as a software part
of the HD VOD server, whereas the user is a human being who pays and views the video information, although
most of the time there will be one client per user. The client is responsible for coordinating diﬀerent data streams,
that in the case of a HD VOD server would consists at most of audio and video, but that in other systems could be
text, graphics, and pictures as well. The client is also responsible for the timely display of video frames and the
coordinated reproduction of its accompanying audio.
2.1. Storage of Multiple Videos
The server stores video ﬁles in a disk or in an array of disks. When a user requests a video ﬁle, the diﬀerent
frames that make up the movie are retrieved one-by-one in a sequential order. Once a video frame has been
retrieved from the disk, it will be delivered through a network link to the user according to the playback rate stated
in frames per second.
Our storage layout is the same as the one studied in [13]. Each block of nv,i display units (typically frames) is
separated from the next and the previous block by exactly Iv,i seconds for video strand i. The amount of display
units nv,i is called granularity and the separation Iv,i is called interleaving. The separation between blocks leaves
a gap that does not necessarily lay empty as it is used to store other videos. The process of storing video ﬁles in
every gap is called merging. Other important parameters are: a) S v f,i , which is the mean size of the video frame
in bytes for video strand i, b) Rdr , the hard disk data transfer rate in bits/sec and c) R pl,i , the replay rate required
by video i in frames per second.
The scattering and the interleaving parameters deﬁne a storage pattern in bits of length Li = nv,i S v f,i + Iv,i Rdr
and it is characterized by the pair (Mi , Gi ) where Mi = nv,i S v f,i , and Gi = Iv,i Rdr , (see Fig. 1).

2329

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336
G1

M1

G1

M1

G1

}
}
}

M1

M2

G2

M2

G2

Fig. 1. Storage pattern in bits.

2.2. The SAS Scheme
In order to be able to compute operational parameters for a HD VOD server we need to make certain assumptions about the principal variables we are trying to predict. We begin by characterizing the operation of the HD
VOD server using a well known model named Switched Arrival Service (SAS). Server. In the SAS model, the
server receives jobs from diﬀerent clients and executes them. The time it takes to execute those jobs is varying.
The video server assigns a separate buﬀer to each user i, which is attended during a service period li (it is ﬁlled
with video data during this time). This service time depends on the buﬀer depletion rate μd,i . The mean depletion
rate is given by μd,i = R pl,i S v f,i , where R pl,i is the mean replay rate for user i. In the SAS scheme, each user buﬀer
receives frames during service time. The server then switches to another buﬀer. It will not service the buﬀer
again until it services the buﬀers of all the other users once. This is called a service cycle. The service time each
buﬀer is allocated must provide with enough video frames so that the buﬀer will comply with user play-back rate
requirements without frame starvation during the entire service cycle [14], see also Fig. 2. The probability that the
server will fail to provide enough video frames (according to play-back rate) is called the saturation probability.
x1(t)
d,1

.
.
.

1

b1

xN(t)
d,N

bN

Fig. 2. Switch Arrival Service (SAS) scheme of buﬀers.

The SAS system feeds video traces to the diﬀerent buﬀers in a round robin manner. Therefore, in a scheme
with N users, each buﬀer i is associated with a service request of that particular user. Let us assume that each
buﬀer i has a capacity bi , and xi (t) is the state of the buﬀer at time t. Let us also consider that L seek,i and Lrot,i are
the seek delay and plate rotation delay for request i. So, αi = L seek,i + Lrot,i is the switching time for user i. This is
the time needed for the disk head to be positioned in the correct cylinder and allocation block.
2.3. The Global Time Balance Relation
Corresponding to what we have previously mentioned, the main parameters for the performance of the video
server are the service-rate which is ﬁxed through the service-rate constant ki (explained below), the maximum
number of simultaneous subscribers Nmax and the user buﬀer size bi .
Since all buﬀers are depleted in parallel, then the reading time of data blocks needed for the disk storage
subsystem to replenish all buﬀers must be less than or equal to the minimum buﬀer emptying time. Assume that
buﬀer i is ﬁlled with exactly ki nv,i frames of size S v f,i, j , where j = 1, 2, ..., ki nv,i . We may also assume that buﬀer
i is ﬁlled with ki blocks of video and that each block contains nv,i frames. To comply with the playback-rate
demands, relation (1) must hold. We shall call the following inequality (1) the Global Time Balance Relation
α(N) + υ(N, k) + τ(N, k) ≤ min ki

nv,i
R pl,i

(1)

2330

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

N
where N is the number of concurrent users in a given time, k = [k1 , k2 , . . . , kN ], αT = α(N) = i=1
αi is the service
N
cycle switching delay, υ(N, k) = i=1 υi (ki ) is the service cycle interleaving time (the time the disk head spends
N
over interleaving gaps) and τ(N, k) = i=1
τi (ki ) is the time spent by the disk fetching frames for all subscribers in
a service cycle. In our system, this translates to (see [15])
⎛
⎞
ki nv,i
N ⎜
⎟⎟
⎜⎜⎜
j=1 S v f,i, j ⎟
⎟⎟⎟ ≤ min k nv,i .
⎜⎜⎜ki Iv,i +
N(L seek + Lrot ) +
(2)
i
⎟⎠
⎝
R
R pl,i
dr
i=1

The total time is the addition of video frames fetching time, plus the time spent by the disk head over the
interleaving space, plus the switching time. Disk throughput for user i can be written as
3. Principal Component Analysis
As we have already mentioned, one very important problem in the design of video services is that it is not
in general possible to foresee the mixture of videos that a server will be servicing in a particular moment. And
even if this were possible (perhaps using a popularity based scheme such as Zipf law), it is no possible to even
predict which title will be added in the future to the video server, an obvious need if one wishes to keep subscribers
interested.
In this section we present the ﬁrst part of our contributions in which we make a principal component analysis
of the video traces in order to reduce the dimensionality of the tile availability problem and use this analysis to
construct a CVT to use for video server design [18]. Recall that the CVT, the characteristic video trace, consists of
a sequence numbers representing the size of the video frames of a movie after MPEG 4 compression. The purpose
of the CVT is to serve as a proxy representing as much of the variability of the available video titles as possible.
That is to say that the CVT serves as a representative of many, and if possible of all, available video traces.
3.1. Statistics of the Video Traces
The video traces used in our work are variable bit-rate (VBR) encoded. The MPEG video encoder takes as its
input stream a sequence of digitalized frames, each of them containing a two-dimensional array of pixels (pels).
In order to specify the data rate of the video encoder, it is important to know the number of frames per second,
the number of lines per frame, and the number of pels per line. For each pel, both luminance and chrominance
information is stored. The video strands used in this paper are encoded by using MPEG-4 [16], and they are stored
in a disk by using a merging pattern.
Each video ﬁle was recorded at a frame rate of 25 frames/sec, with a luminance resolution of 176 × 144 pels
and 4:1:1 chrominance subsampling at a color depth of 8 bits. The encoding was done without rate control, so
they are Variable Bit Rate (VBR) traces. The entire video stream is one VO and there is only one layer. The Group
of Pictures (GOP) pattern was set to IBBPBBPBBPBB and the quantization parameters were ﬁxed at 4 for I, B
and P frames. There are between 70,000 and 90,000 frames per trace (see [17] for a more detailed description of
the video traces).
We used the ﬁrst 65,534 elements from each video trace. These video trace samples had diﬀerent statistical
characteristics (shown in Table 1). This variability between the video traces makes server design diﬃcult. The
movie Starwars has the smallest minimum frame size and maximum frame size, 26 and 9,370 bytes respectively, a
ratio of 360.38, whereas Silence of the Lambs has the biggest maximum frame size of 22,239 has a ratio of 140.75.
The Skii movie, with the largest minimum frame size of 307 has a ratio of just 51.4. Which should one take to
be probable largest frame size? On the other hand, the maximum mean frame size, and therefore the maximum
mean bandwidth requirement is 3,917 bytes (every 30th of a second), whereas the highest variability is presented
by the movie Silence of the Lambs with a standard deviation of 2,457, nearly equal to the frame mean which is
3,008 bytes. Which mean frame size and which standard deviation should we consider when designing buﬀers,
storage space and bandwidth requirements? In the next section we will use a technique that will determine the
most probable video trace behavior which we will use to design the video server. This characteristic behavior will
be independent of video popularity and speciﬁc combination of video play back at any given moment.

2331

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

Video
Trace
bean
contact
Die ha
dusk
ﬁrm
jurasic
silence
skii
soccer
star wa
troopers

Minimum
Frame
93.000
47.000
71.000
74.000
32.000
72.000
158.000
307.000
130.000
26.000
224.000

Maximum
Frame
14274.000
11090.000
16840.000
15745.000
10204.000
16745.000
22239.000
15780.000
17657.000
9370.000
14592.000

Mean
Frame
3079.286
1510.531
3402.324
3108.756
1539.672
3917.219
3008.143
3815.135
5554.905
1364.831
2856.820

Standard
Deviation
1815.192
1125.738
2132.224
1811.266
1196.799
2296.278
2457.317
2224.231
2253.875
917.981
1545.513

Table 1. Statistical characteristics of video traces (all units in bytes).

3.2. Video Trace PCA
To ﬁnd the PCs, a video trace correlation matrix was built. The correlation matrix was build from a matrix in
which each video trace was laid out as columns. Then, mean value was subtracted from each element. After that,
Pearson’s correlation coeﬃcient was used since all variables use the same units; that is, each dimension or variable
is a diﬀerent video trace. Therefore, each row represents a sample in which the data are the diﬀerent video frame
sizes, after MPEG 4 compression, on the trace. For example, row one contains the video frame size of the ﬁrst
frame for all video traces, row two contains the video frame size of all second frames of all videos, etc.
The resultant PCs and their eﬀect are shown in Table 2, with the Scree and Cumulative Variance plots shown in
Fig. 3. As can be seen, the ﬁrst PC is much larger than the rest and the second PC is also signiﬁcantly larger. This
will have important implications, as discussed bellow, in choosing a subset of principal components to determine
the characteristic behavior the video data, even though the ﬁrst two PCs hold only about 48% of all variability
which is not considered very large.
Variables
Eigenvalue
Variability (%)
Cumulative %

PC1
4,359
36,322
36,322

PC2
1,400
11,665
47,987

PC3
1,028
8,563
56,550

PC4
0,798
6,652
63,203

PC5
0,781
6,505
69,708

PC6
0,754
6,287
75,994

PC7
0,655
5,457
81,451

PC8
0,646
5,381
86,833

PC9
0,567
4,723
91,555

PC10
0,537
4,478
96,033

PC11
0,476
3,967
100,000

Table 2. PCA results.

3.3. Choosing Principal Components
There are several rules or criteria that can be used to select the number of m components that will keep most
of the variability present in p variables. Naturally, we wish m << p, and this is called dimension reduction. In our
case, we wish to derive a single video constructed by using only a very small number of PCs that will represent a
collection of possible thousands of videos stored for HD VOD services. This single video, called the characteristic
video will be used to design the video server.
After choosing m principal components, the data dimension is reduced by applying out the orthonormal linear
transformation:
yi = Bt xi ,

(3)

where B is a (p x m) matrix (with orthonormal columns), xi , i=1, 2, . . . , n is the vector of n observations on the
p-element random vector x, and note that the observations form the matrix X (n x p), and yi is the p-element

2332

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

Fig. 3. PCA Scree plot and cumulative variance plots

vector of scores produced by using only the ﬁrst m PCs. Then B=Am , where Am consists of the ﬁrst m columns of
A.
Additionally, let l be the vector containing the ﬁrst m components of λ, the vector of PC variances, and let Sm
be the orthonormal-column matrix containing the ﬁrst m columns of Z, the (n x p) matrix of component scores
(Z=XA). Then
w = Sm l,

(4)

where w is the n-element weighted linear combination of m PCs. That is, our characteristic video vector.
Since the purpose of this investigation is to choose a very small number of PCs compared to the amount of
available video titles, we took only one PC, the ﬁrst one and largest. But precision can be improved further by
taking a few more principal components up to the total amount of video titles.
It is important to note, that as reported in [19], it can be seen in Fig. 3 that the eigenvalues of the PCs decay
following power-law rule. That is that the Scree graph presents a few large value PCs and then a long-tail of very
slowly decaying eigenvalues with a rule similar to k−β , indicating self-similarity as shown by the Hurst parameter
which was measured using the Aggregate Variance and Abry-Veitch methods and found to be 0.87, which is
consistent with high-variance self-similar data.
This has important implications for the design of HD VOD services since it means that in order to capture a
large percentage of total variation, many PCs must be taken. But it also means that since the very ﬁrst few PCs are
much larger than the rest, that it might be possible to use only one or two PCs. In our case the ﬁrst PC captures
36.32% of total variability which is very good, since a single video should capture only 9%, whereas two PCs
capture 48%. We would expect two videos to represent only 18% of total variability.
4. The Pareto Fractal Noise Model
In section 3 we carried out a principal component analysis of video ﬂows by which we were able to create a
CVT that represents all video streams. That means that we can proceed to design the video server as if the CVT
was the only available video.
But even if the PCA generated CVT reduces the dimensionality of the problem it does not eliminate all the
complexity. The CVT also possesses statistical characteristics that must be explicitly modeled in order to design
a video server. In this section we present the second part of our main results which is the creation of a new model
that captures the self-similar as well as the heavy tail characteristics of HD video.

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

2333

4.1. Stochastic Framework
In order to be able to deﬁne stochastic models for service rate parameters (mainly k), we begin by reformulating
relation (1)
α(N) + υ(N, k) + τ(N, k) ≤ kn(min)
,
v

(5)

where α(N) is the switching delay, υ(N,k) is the interleaving time and τ(N, k) is the time spent by the disk
fetching frames for all subscribers.
The Disk Throughput is now
R = Rdr

τ(N, k)
.
α(N) + υ(N, k) + τ(N, k)

(6)

We also deﬁne the maximum number of subscribers as
Nmax = lim

k→∞

Rdr
τ(N, k)
,
μd α(N) + υ(N, k) + τ(N, k)

(7)

where μd is the buﬀer depletion rate caused by user video frame withdrawal.
While the disk subsystem ﬁlls each client buﬀer one by one, those buﬀers are emptied in parallel according to
the depletion rate μi . Let X denote the total user demand bit rate, which we will call the aggregate bit rate. When
that bit rate exceeds disk capacity R, then starvation occurs.
The Saturation Probability is the probability that the disk bit rate capacity will be exceeded by the aggregate
bit rate. The Saturation Probability is deﬁned as
P sat = P[ X > R ]

(8)

]
P sat = P [α(N) + υ(N, k) + τ(N, k) > kn(min)
v

(9)

or

We characterize τ(N, k) in the following manner [12]. Let Yi = {Yi (t), t > 0, i = 1, . . . , n} be the continuoustime random process where Yi (t) is the amount of video information inserted in user buﬀer i at time t by the disk.
Let Xi (t) = Yi (t) − Yi (t − 1) be its strictly positive increment process. We will assume that Yi (t) has stationary
increments. Also E[Xi (t)] = S v f,i and Var[Xi (t)] = σ2i . The process of ﬁlling user buﬀers conforms to the discrete
N
accumulated time series Xi(n) = nt=1 Xi (t) = Yi (n) − Yi (0). Thus τ(N, k) = i=1
Xi(n) /Rdr .
Let Y(t)=μt + Z(t) be the discreet increment process for some time unit tu , with E[Y(t)]=μt. Let Z(t) be a
self-similar process with E[Z(0)]=0 and E[Z 2 (t)]=σ2 t2H .
The accumulation process is then
n

X(i) = Y(n) − Y(n − 1) + Y(n − 1) − Y(n − 2) + . . . + Y(1) − Y(0)

(10)

i=1

= nμ + Z(n)

(11)

nμ + n Z(1),
H

(12)

The video frame accumulation probability (or saturation probability), that is the probability that the video
frames retrieved from a buﬀer will eventually empty it (this is time inverted analogous to the process where the
sum of the video sizes to be stored in a buﬀer will be greater than its capacity) is
P(X1 + X2 + . . . + Xn > ϕ)

P(nμ + nH Z(1) > ϕ)
P Z(1) >

ϕ−
n

nμ H

= a = φ.

(13)
(14)

2334

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

4.2. Pareto Fractal Noise
We now deﬁne Z(t) to have Pareto probability density function
β(S m t H )β
,
aβ+1
with S m called the location and scale parameter, β the shape parameter, and cdf
P[Z(t) = a] =

P[Z(t) < a] = 1 −

(15)

β

S m tH
a

.

(16)

That is to say that Z(t) has a marginal time-scaled Pareto pdf. Also, it has the following characteristics:
P[Z(0) = 0] = 1
and
Var[Z(t)] =

(S m t H )2 β
= σ2 t2H ,
(β − 2)(β − 1)

for β > 2. Also, Var[Z1 ] = σ2 .
Thus from (14) and (16)
⎛
⎞
⎜⎜ S m ⎟⎟β
S m nH
φ = ⎜⎜⎝ ϕ−nμ ⎟⎟⎠ =
ϕ − nμ
nH

β

.

(17)

Equation (18) gives us the formula for buﬀer size
ϕ = nμ +

S m nH
.
φ1/β

(18)

In our case, n = kR pl nv , μ = S v f and φ is the saturation probability.
To determine S m and β, we use the Maximum Likelihood Method [20].
4.3. PFF Server Design Parameters
Just like we mentioned in section 2, for a HD VOD server there are at least three parameters that are necessary.
The proportionality constant determines the service rate for video streams and is and important parameter to
determine user-buﬀer size. The user-buﬀer size will determine much of the cost and performance of the server.
And the maximum number of simultaneous streams gives a scalability rule to determine how many servers are
needed given certain demand.
We can rewrite relation (5) as
Nα + NkR pl Iv +

Nϕ
≤ knmin
v ,
Rdr

where ϕ represents τ(1, K) of relation (5). And by substituting (18) we get
⎡
H⎤
⎢
S m kR pl nv ⎥⎥⎥⎥
N ⎢⎢⎢⎢
⎥⎥⎥ ≤ knmin .
⎢⎢kR pl nv S v f +
Nα + NkR pl Iv +
v
⎥⎦
Rdr ⎢⎣
φ1/β

(19)

(20)

With little algebra we ﬁnd the proportionality constant:

k≥

N α+

S m (kR pl nv )
Rdr φ1/β

nmin
− NR pl Iv +
v

H

nv S v f
Rdr

.

(21)

2335

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

Also, we approximate the right hand side k by the mean value k¯ as in [15], thus

k≥

Nα 1 +

S m (kR pl nv )
αRdr φ1/β

nmin
− NR pl Iv +
v

H

nv S v f
Rdr

⎛
⎜⎜⎜
¯ pl nv
S m kR
⎜
= k¯ ⎜⎜⎜⎜1 +
⎝
αRdr φ1/β

H⎞

⎟⎟⎟
⎟⎟⎟
⎟⎟⎠ .

(22)

Then, we ﬁnd
Nmax =

nmin
v
R pl Iv +

1
Rdr

R pl nv S v f +

H

S m (R pl nv ) κ
φ1/β

,

(23)

H−1
, kmax being the practical limit to the proportionality constant that the video server designer is
where κ = kmax
willing to accept (that is a practical ceiling for k) [12].
The user buﬀer b is the last design parameter.

b = kR pl nv S v f +

S m kR pl nv
φ1/β

H

.

Fig. 4a. User buﬀer size at φ = 0.01.

Fig. 4b. User buﬀer size at φ = 0.001.

Fig. 4c. User buﬀer size at φ = 0.0001.

Fig. 4d. User buﬀer size at φ = 0.00001.

(24)

Figs. 4a, 4b, 4c and 4d show the accuracy of the model for user buﬀers compared to simulation results at
decreasing saturation probabilities. We could ﬁnd no other equivalent stochastic storage model to compare against
our model. As we have just mentioned, all well known models produce inconsistent results when the input rate
overwhelms the output rate.
In the simulation, buﬀers are separated for each stream (user). Following the SAS scheme, each buﬀer is fed
k ∗ R pl ∗ nv frames or until full. Frames are delivered to the buﬀers round-robin. Buﬀers are fed complete frames
and the users pull for transmission from the buﬀers complete frames also. Outgoing bandwidth is assumed to be
always available, such as in services delivered by cable and telephone companies, transportation entertainment
services or home entertainment services.

2336

Raul Ramirez-Velarde et al. / Procedia Computer Science 18 (2013) 2327 – 2336

We would like to note one important aspect about the buﬀer dimensioning model based on Pareto distribution.
Although at ﬁrst glance it somewhat resembles other self-similar models, it is in fact very diﬀerent. For example,
the models reported in [4] and [5] break down when the server usage exceeds one, that is when the arrival rate
is larger than the departure rate. In our model we allow for the server to overload for brief periods of time the
outgoing throughput of a stream buﬀer. Also, those models are asymptotic whereas our model is not.
5. Conclusions
PCA over video stream data for high-end commercial video services is a powerful tool. Although nominally
the very few ﬁrst PCs do in fact preserve no more than 50% of variability, this percentage is high compared to
each video’s expected contributed variability, simplifying video server design by permitting to generate a very
representative new video data-set that can be used as a characteristic video. This characteristic video acts as
a proxy for all video streams which means that subjective procedures such as popularity weighting, worst case
scenario and mean case scenario are no longer necessary. A set of multiple copies of the characteristic video
represents all combinations of video streams, even an all worst-case video user selection scenario.
The use of a self-similar stochastic process with power-law decaying tails, such as the Pareto Fractal Noise
presented in this paper, can in fact model storage, bandwidth and other characteristics of high-end video streams.
By obtaining model parameters from the characterisitic video trace we assume that all future video requests
are for this video trace, precluding the need to know before hand information that has been traditionally used
to design video-on-demand services such as user preferences, type of video ﬁle (movie, cartoon, documentary),
diﬀerences in video compression technique, etc. This reduces the need to take into consideration uncertainties that
often times cannot be veriﬁed before the video services is designed and implemented.
References
[1] K. Park, G. Kim, M. Crovella. ”On the Relationship between File Sizes, Transport Protocols and Self-Similar Network Traﬃc”. Proc.
IEEE International Conference on Network Protocols, 171-180, October 1996.
[2] J. Beran, R. Sherman, M. S. Taqqu and W. Willinger. “Long-range Dependence in Variable-Bit-Rate Video Traﬃc”. IEEE Transactions
on Communications, April 1995.
[3] W. Willinger, V. Paxton. “Where Mathematics Meets the Internet”, Notices of the American Mathematical Society, Vol. 45, 1998.
[4] I. Norros. “A Storage Model with Self-Similar Input”. Queuing Systems-Theory and Applications, 1994.
[5] M. Parulekar and A. Makowski. “Tail probabilities for a multiplexer with self-similar traﬃc”. Fifteenth Annual Joint Conference of the
IEEE Computer Societies, Networking Next Generation, Preceedings IEEE, 1452-1469, 1996.
[6] R. G. Addie, M. Zukerman, and T.D. Neame, ”Broadband Traﬃc Modeling: simple solutions to Hard Problems”, IEEE Communication
Magazine, Vol.36, No. 8, August 1998
[7] J. R Gallardo, D. Makrakis and L. Orozco-Barbosa. “Use of α-stable self-similar stochastic processes for modeling traﬃc in broadband
networks”. Performance Evaluation, Elsevier, 71-98, 2000.
[8] A. Patel and C. Williamson, ”Eﬀective Bandwidth of Self-Similar Traﬃc Sources: Theoretical and Simulation Results”, Proceedings of
the IASTED Conference on Applied Modeling and Simulation, Banﬀ, AB, 298-302, July 1997.
[9] B. N. Bashford and C. L. Williamson. “Statistical Multiplexing of Self-Similar Video Streams: Simulation Study and Performance
Results”. Sixth International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems, 1998.
[10] S. Bodamer and J. Charzinsky. “Evaluation of eﬀective bandwidth schemes for self-similar traﬃc”. ITC Specialist Seminar on IP Traﬃc
Measurement, Modeling, and Management. Monterey, California, September 2000
[11] M. Garret and W. Willinger. “Analysis, Modeling and Generation of Self-Similar VBR Video Traﬃc”. ACM SigComm, London, 269280, September 1994.
[12] R. V. Ramirez-Velarde and R. M. Rodriguez-Dagnino. ”A gamma fractal noise source model for variable bit rate video servers”. Computer Communications, Volume 27, Issue 18, 1 December 2004, Pages 1786-1798.
[13] P. V. Rangan and H. M. Vin. “Designing File Systems for Digital Video and Audio”. Proceedings of the 13th Symposium on Operating
Systems Principles, October, 1991.
[14] C. Chase and P. J. Ramadge. “Periodicity and Chaos from Switched Flow Systems: Contrasting Examples of Discretely Controlled
Continous Systems”. IEEE Transactions on Automatic Control, Vol. 38, No. 1, January 1993.
[15] H. M. Vin and P. V. Rangan. “Designing a Multiuser HDTV Storage Server”. IEEE Journal on Selected Areas in Communications, Vol.
11, No. 1, January 1993.
[16] R. Koenen (Editor). “Overview of the MPEG-4 Standard”. ISO/IEC JTC1/SC29/WG11 N4496, March 2002.
[17] H. P. Fitzek and M. Reisslein. “MPEG - 4 and H.263 Video Traces for Network Performance Evaluation”. Technical University Berlin,
Technical Report TKN - 00 - 06, October 2000.
[18] I. T. Jolliﬀe. “Principal Component Analysis”. Springer, U. S. A., 2002.
[19] J.B. Gao, Y. Cao and J. - M. Lee. “Principal component analysis of 1/ f α noise”. Physics Letters A 314 (2003) 392–400, Elsevier.
[20] J. Gentle. “ Elements of Computational Statistics”. Springer, U. S. A.,2002.

