Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2533 – 2536

International Conference on Computational Science, ICCS 2013

Detection and Estimation of Erroneous Positioning Data
Ha Yoon Song∗, Kyoung-woon On
Department of Computer Engineering, Hongik University, Seoul, Korea

Abstract
Improvement of mobile devices lead functionality of positioning and many of related applications using positioning data are
widely used. However the positioning data acquired by such devices are prone to have erroneous values due to environmental
factors. In this research, a detection and correction algorithm of erroneous data over continuous positioning data set. Our
algorithm is based on moving window of speed derived by consecutive positioning data. Moving average and moving standard
deviation in moving window will compose a moving signiﬁcant interval at a given time, and the moving signiﬁcant interval
is utilized in order to detect the erroneous positioning data along with other parameters. Not only estimates our algorithm the
correct position, but also removes the eﬀect of errors to moving window statistics. Estimation of possible speed is ﬁrstly done
and then estimation of possible position is also done. Experimental veriﬁcation based on our algorithm will be also presented.
Keywords: Positioning System, Positioning Data Error, Error Detection, Moving Window, Error Filtering, Error Correction

1. Introduction
The recent advancement of portable mobile devices such as smartphones enables to locate user’s positions
with various positioning systems. Positioning systems such as GPS, GLONASS, and Galileo are famous ones
while Wi-Fi Based Positioning Systems or Cellular base station positioning systems are also widely used. In
addition, the combinations of positioning systems aforementioned allow more precise positioning mechanisms for
mobile devices. However, positioning data sets usually have erroneous data for various reasons, mainly due to the
environmental issues as well as inherent systematical issues. From the aspect of mobile devices, these errors are
sometimes critical and need to be ﬁltered or corrected by the devices themselves since the devices cannot touch
the underlying schemes of positioning systems. Most of such ﬁltering or corrections are intended to work in real
time for the sake of end-users. From the user’s positioning data tuple obtained by mobile devices, we can calculate
user’s speed and acceleration between consecutive tuples. From the idea of sliding window (moving window), we
can calculate statistical parameters from speed and acceleration of user position data and thus error detection can
be made with controllable parameters.
In this paper, we will show algorithm for positioning error detection and correction. We focused on constructing moving window with more precise estimation, so that the estimation mechanism will help stabilizing the
moving window and more precise detection or precise correction of errors can be achieved. In section 2 we will
discuss about our basic ideas. Section 3 will discuss our algorithm. Our experimental veriﬁcation will be shown
in section 4 and we will ﬁnalize this paper in section 5.
∗ Corresponding

author. Tel.: +82-2-320-1617 ; fax: +82-2-332-1653.
E-mail address: hayoon@hongik.ac.kr.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.435

2534

Ha Yoon Song and Kyoung-woon On / Procedia Computer Science 18 (2013) 2533 – 2536

2. Previous Research
As a starting point, we developed an algorithm for ﬁltering erroneous positioning data with moving window [1]. We calculated speed and acceleration between consecutive positioning tuples. Using part of tuple
< latitude, longitude, timestamp >, the distance between two consecutive positioning tuples can be calculated [2].
Acceleration and speed values show unreal ones in case of positioning error. Therefore, we concluded that abrupt
change of speed implies the positioning error. Once abnormal speed or acceleration values found comparing to
recent tendency of positioning tuples, we can ﬁlter the abnormal tuple. In order to ﬁgure out the tendency, we
introduce the moving window (sliding window) of speed. The moving window contains several most recent values of speed. Then we calculate expectation and standard deviation of speed using the tuples inside the moving
window. They are called MA (Moving Average) and MSD (Moving Standard Deviation) respectively. Among the
various probability distributions, normal distribution is useful to detect the abnormal phenomena. Then we can
detect abnormal speed values with some signiﬁcant level s derived by the properties of normal distribution. We
call (MA speed + s × MS D speed ) as moving signiﬁcant interval (MSI) where s is a signiﬁcant level for normal distribution. If new tuple has speed value outside MSI, the tuple will be ﬁltered out. In our former research [1] with
the eﬀect of window size and signiﬁcant level for erroneous positioning data ﬁltering, we proposed background
for erroneous data ﬁltering. The ratio of ﬁltering can be arbitrarily determined by adjusting the signiﬁcance level
upon the positioning environment. We need to have more sophisticated estimation of erroneous speed for two
reasons. First, we need estimated speed values for various purposes of end-users. Second, with better estimation
of speed values, statistics in moving window can be stable for more correct ﬁltering.
3. The Algorithms
For constructing more precise moving window, we need to have some estimation schemes. Among the various
possible estimation schemes, interpolation was introduced because of its lightness of computation. With a new
arrival of positioning tuples, erroneous speed values at the end of window can be interpolated as shown in algorithm 1. In case the newly arrived tuple identiﬁed as ﬁltered (consecutive error), we need more control. Erroneous
speed values will be restricted by maximum possible values of moving window, i.e. calibrated, or tuples with
excessive acceleration values will adjust the erroneous speed to moving average of its time. Then the calibrated
value is used for interpolation. We introduced a parameter ET D for the allowance of usual distance error. Of
course, one can set it according to the accuracy of positioning system. It governs minimum possible speed and
aﬀects moving standard deviation so that it guarantees nonzero length of moving signiﬁcant interval.
Similar to the speed estimation process, we also introduced position estimation process for detected and ﬁltered
tuples. The major diﬀerence of position estimation is directions of latitude and longitude. We cannot ignore the
negative variance of latitude or longitude in order to estimate the position, while we only consider positive value
for speed. Algorithm 1 shows the overall process of position estimation according to the speed estimation. We use
the variance of latitude and longitude named as Vlat and Vlon, respectively and the algorithm set moving average
for Vlat and Vlon, respectively. Once a tuple be ﬁltered by excessive speed which implies excessive variance of
locations, we need to estimate the correct location. In case of an acceleration error, the position data were set with
MA of variance as we did for speed. Finally the interpolation will be done for latitude and longitude at the end of
moving window.
4. Experimental Veriﬁcation
For this experiment, we used positioning data set collected from the year 2011.We developed a positioning
data collection app over iPhone with the iOS positioning system [4]. The positioning data set on geographical
map can be drawn by Google earth [3]. The processing of ﬁltering is shown in ﬁgure 1 without speed error
correction and ﬁgure 2 with speed correction by interpolation mechanism. Each ﬁgure contains original speed,
acceleration, moving signiﬁcant interval, calibrated speed and estimated speed and detected acceleration errors
along with controllable parameters on the top of ﬁgure. The speed on y-axis is in unit of m/s and x-axis shows
the time of the day. Even though we found errors around time 13:33:06, where original (measured) speed sits
out of moving signiﬁcant interval, our algorithm successfully estimates the feasible speed values. At 13:32:59

Ha Yoon Song and Kyoung-woon On / Procedia Computer Science 18 (2013) 2533 – 2536

Algorithm 1 Algorithm: Moving Window Based Position Estimation
Require: window size n
Require: user sensitivity level s
Require: error tolerance of distance ET D
Require: minimum speed allowance MINS PEED
Require: i=0
1: repeat
2:
Get Pi+1 // Acquisition of new tuple, if exist
3:
Calculate Vi+1
4:
Set MIN speed = (ET D /(ti+1 − ti ) > MINS PEED) ? ET D /(ti+1 − ti ) : MINS PEED
5:
Construct MA speed with {P x : max(i − n + 1, 0) ≤ x ≤ i}
6:
Construct MS D speed with {P x : max(i − n + 1, 0) ≤ x ≤ i}
7:
Set MS D speed = (MS D speed > MIN speed ) ? MS D speed : MIN speed
8:
Set Vlati+1 = lati+1 , lati /(ti+1 − ti )
9:
Construct MAVlatitude with {P x : max(i − n + 1, 0) ≤ x ≤ i}
10:
Set Vloni+1 = loni+1 , loni /(ti+1 − ti )
11:
Construct MAVlongitude with {P x : max(i − n + 1, 0) ≤ x ≤ i}
12:
if ((Vi+1 > MA speed + s × MS D speed ) or (ai+1 ≥ MAXacceleration )) and (Vi+1 > MIN speed ) then
13:
Mark Pi+1 as ﬁltered. // Filtering
14:
end if
15:
if (Vi+1 ≥ MA speed + s99.5 × MS D speed ) AND (Vi+1 > MIN speed ) then
16:
Set Vi+1 = MA speed + s99.5 × MS D speed // Calibration of Speed
17:
end if
18:
if ai+1 ≥ MAXacceleration then
19:
Mark Pi+1 as ﬁltered
20:
Set Vi+1 = MA speed
21:
Set ai+1 = MAXacceleration
22:
Set lati+1 = lati + sign(lati+1 − lati ) × MAVlatitude × (ti+1 − ti−1 )
23:
Set loni+1 = loni + sign(loni+1 − loni ) × MAVlongitude × (ti+1 − ti−1 ) // Restriction by Maximum Acceleration
24:
end if
25:
if (Pi marked as ﬁltered) then
26:
Set Vi = (Vi+1 − Vi−1 ) × (ti − ti−1 )/(ti+1 − ti−1 ) + Vi−1
27:
Mark Pi as interpolated // Linear Interpolation of speed
28:
Set lati = (lati+1 − lati−1 ) × (ti − ti−1 )/(ti+1 − ti−1 ) + lati−1
29:
Set loni = (loni+1 − loni−1 ) × (ti − ti−1 )/(ti+1 − ti−1 ) + loni−1 // Estimation of Position by interpolation
30:
end if
31:
Set i = i + 1
32: until Exist no more input of positioning tuple

on the 18th December 2012, a clear error detected by acceleration limit, the calibration mechanism restricts the
erroneous speed value, and then speed estimation mechanism decides speed. MSI in ﬁgure 2 have clear diﬀerence
due to diﬀerent moving window statistics from estimated speed values.
Figure 3 shows the mapped result of location estimation. Trajectory is composed by positions as balloons in
maps with timestamps and directional lines between balloons. Black balloons in ﬁgure 3 show original trajectory
while gray (actually red) balloons show estimated trajectory. The trajectory in ﬁgure 3 shows detection and
correction of positioning errors at 09:14:18, 09.14.20, and 09:14:22 correspondingly to ﬁgure 4.
5. Conclusion and Future Research
In this research we proposed an algorithm for estimation of correct values for erroneous positioning data. The
basic aim is to estimate of erroneous positioning values more accurate and thus stabilizes the moving window so

2535

2536

Ha Yoon Song and Kyoung-woon On / Procedia Computer Science 18 (2013) 2533 – 2536

Fig. 1. Progression of Speed Error Detection without Speed Correction

Fig. 3. Result of Location Estimation

Fig. 2. Progression of Speed Error Detection and Speed Correction

Fig. 4. Location Estimation Progress

that the ﬁltering algorithm has more delicate reaction. In other words underﬁltering and overﬁltering could be
considerably avoided. Another eﬀect
ﬀ of this algorithm gives the estimated position of erroneous ﬁltered position
for practical use of position data, which is interpolation at the end of window. Upon to the algorithms, several
combinations of experiments were conducted. We showed the eﬀect
ﬀ of speed and location estimation.
Acknowledgements
This research was supported by the grant of NRF, MEST, Korea (No. 20120007162 and No. 2012046473).
References
[1] Ha Yoon Song, Han-Gyoo Kim, A Realtime Filtering Method of Positioning Data with Moving Window Mechanism, International
Journal of Computers and Communications, Issue 1, Volume 6, 2012, pp.137-148.
[2] T. Vincenty, ”Direct and Inverse Solutions of Geodesics on the ellipsoid with Application of Nested Equations,” Survey Review, Volume
23, Number 176, April 1975 , pp. 88-93(6).
[3] Google Earth, Available: http://www.google.com/earth/index.html
[4] iOS 5: Understanding Location Services, Available: http://support.apple.com/kb/ht4995

