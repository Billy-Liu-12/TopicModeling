Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 80 – 89

International Conference on Computational Science, ICCS 2013

InSpace3D: A Middleware for Built Environment
Data Access and Analytics
Carl Schultza,∗, Mehul Bhatta
a Spatial

Cognition Research Center (SFB/TR 8) and Cognitive Systems (CoSy), University of Bremen, Enrique-Schmidt-Str. 5, Bremen
28359, Germany

Abstract
Standardisation, archiving, and digital access of spatial data pertaining to built-up environments is an area acquiring increasing
attention amongst several interest groups: policy makers, designers and planners, civil engineers, infrastructure management
and public service personnel, building users. Initiatives such as the Building Information Model (BIM), Industry Foundation Classes (IFC), and CityGML are creating the information-theoretic backbone that guides the crucial aspects of quality,
exchange, and interoperability of spatial data at the environmental and urban scale. However, due to the inherent scale, complexity, and detailed geometric character of building information data, extracting useful semantic and qualitative knowledge
for accomplishing high-level analytical tasks is still an extremely complex and error prone process involving data intensive
computing. We propose a uniform spatial data access middleware that can provide a combination of high-level, multi-modal,
semantic, and quantitative-qualitative spatial data access and analytical capability. We present the core computational capabilities for the proposed middleware and present an overview of the high-level spatial model and its compliance with the industry
standard IFC. A key theoretical contribution is a framework for investigating the computational complexity of deriving spatial
artefacts within the context of building informatics. Additionally, we empirically investigate the feasibility and practicality
of the derivation of spatial artefacts by conducting experiments on seven industry-scale IFC models. The experiment results
show that, despite having non-linear polynomial increase with respect to time, deriving spatial artefacts is practical with large
designs.
Keywords: Architecture; Spatial Analysis; Artiﬁcial Intelligence; Building Information Model

1. Introduction
Contemporary research trends in environmental spatial data modelling are questioning the conventional disparateness between indoor, environmental, and geographic spaces, in favour of a uniﬁed view across these areas.
These initiatives are geared toward ensuring seamless access to detailed, high-quality environmental spatial data
for stakeholders such as policy makers, designers and planners, civil engineers, infrastructure management and
public service personnel, occupants, and other building users. For instance, in the area of Architecture, Engineering and Construction Informatics (AEC), detailed quantitative data about the internal layout and structural
properties of buildings is made accessible by the standardisation initiatives that have materialised by way of the
∗ Corresponding

author. Tel.: +49-421-218-64182 ; fax: +49-421-218-64239 .
E-mail address: cschultz@informatik.uni-bremen.de.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.171

81

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

Building Information Model (BIM) [1] and Industry Foundation Classes (IFC) [2]. Similar trends are observable in the urban data management community, for instance, within the CityGML [3] initiative essentially aiming
to deﬁne an encoding for the representation, storage, and exchange of virtual 3D city and landscape models at
diﬀerent
ﬀ
levels of granularity.
It is expected that detailed, accurate metric data about the layout and structural properties of built-up space
will rapidly become ever-more readily available. The availability of such data is even mandated by governments,
or adopted as de facto in state owned public construction projects in some countries in the European region (e.g.,
Denmark, Finland). However, due to the inherent scale, complexity, and detailed geometric character of building
information data, extracting useful semantic and qualitative knowledge for accomplishing high-level analytical
tasks is a complex and error prone process. General tools and services embedding data-intensive computations for
a wide range of spatial assistance systems are needed.
The range of expert domains involved in a building project are extensive: architectural design, structural,
electrical, heating-ventilation-air conditioning (HVAC), project management (including risk assessment, cost estimation, etc.), energy management. Domain-speciﬁc software tools must be developed that can interpret raw
numerical sensor data and geometric building models in a qualitative manner and provide high-level semantic
analyses, for example: indoor navigation for wayﬁnding assistance based on research in cognition; qualitative
spatial reasoning support for building maintenance to identify plumbing faults and leaks, electrical faults, or to
detect warning signs of structural damage from stress or rot; real-time emergency services that employ highlevel reasoning for interpreting temperature and other sensor measurements, video feeds, or predicting ﬂashover;
facilitating emergency prevention through early detection of ﬁre hazards.
We propose InSpace3D —Indoor
—
Spatial Awareness Middleware for Built-Up Spaces— a computational middleware for spatial data access and analytics providing a range of analytical capabilities that may be directly
used by spatial services (e.g., indoor navigation assistance, emergency support, building maintenance) seeking to
leverage on the availability of ubiquitous spatial data, e.g., via municipal data repositories, Google (indoor) maps.
Figure 1 illustrates the integration of InSpace3D middleware within the
workﬂow of BIM model servers and third-party semantically rich analytical tools, services, and applications. InSpace3D incorporates spatial
data-structures, algorithms, and the overall methodology for automatically deriving higher-level qualitative spatial representations based on an
8
8VERWTSV
XERH'SQQYRMGEXMSR0E]
E IV'PSYH IXG
extensible set of core modalities: movement, visibility, environmental af&-1-*'7IVZIV
fordance, operation, and empty space analysis. This multi-modal access
-R7TEGI(
to building data enables higher level spatial querying and reasoning, thus
1MHHPI[EVI
shifting the cognitive burden of dealing with enormous amounts of numerical data away from the user. InSpace3D serves as a uniform middleware
that can provide a combination of a high-level, multi-modal, semantic,
Fig. 1. InSpace3D Applications
and mixed quantitative-qualitative data access and analytical capability.
The aim of this paper is to broaden these results by establishing InSpace3D as a middleware framework
based on a solid theoretical foundation, and to investigate the computational practicality of employing InSpace3D
middleware on real, industry-scale building models. Section 2 presents the development of BIM and related
research. Section 3 enumerates a core set of spatial artefact primitives and presents the InSpace3D middleware
architecture. Section 4 characterises the computational complexity of deriving spatial artefacts. Section 5 presents
experiment results that show the practicality of InSpace3D, followed by the conclusions.
-RHSSV
2EZMKEXMSR
E

&YMPHMRK
1EMRXIRERGI

)QIVKIRG]
7IVZMGIW

'SHI
'LIGOMRK

&-1
1SHIP

2. Spatial Data Handling in Achitecture and Construction Informatics
Unlike other domains that also heavily employ product modelling (aerospace, automotive, etc.), the AEC
domain is characterised by distributed, specialised working groups collaborating on one-oﬀ projects [4], resulting
in the fundamental challenges of model exchange and interoperability. One response to this has been the ongoing
development of the Industry Foundation Classes (IFC) [2], a comprehensive building modelling schema that aims
to cover all major aspects of the AEC industry, based on the ISO STEP product modelling standard and the
EXPRESS language [5]. However, a large, complex, monolithic IFC model, in its entirety, does not support any
particular stakeholder. Amor and Hosking developed a methodology of partial model views for each expert domain

82

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

to facilitate the development of specialised software tools that meet the analytical and workﬂow requirements of
each domain [6]. ISO has standardised STEP conformance classes, formal subsets of product modelling protocols
that are customised for particular task use cases [5]. Eastman et al. [7] have developed the Georgia Tech Process
to Product Modelling methodology, a systematic methodology for product modelling that is also used to develop
IFC views [8]. A Norwegian initiative has been the Information Delivery Manual methodology, involving domain
experts compiling use cases of salient domain-speciﬁc processes with the information requirements and the output
of each activity [9].
Developing a model schema (and similarly model views) essentially consists of determining what information
is explicitly represented and what information is derived using querying and reasoning services (i.e. implicitly
available in the model). Borrmann et al. [10, 11] have developed 3D spatial query languages that utilise topological and directional operators. Beetz et al. [12] transform IFC into a formal ontology using the Ontology Web
Language, thus enabling the utilisation of well-established query languages (such as SPARQL) for deﬁning views
and performing analyses of IFC models. Lee et al. [13] provide analysis support for automated design review of
circulation, egress, energy and cost. An aspect that hitherto has not been addressed in the literature is the explicit
modelling of user perception, aﬀordance, and behaviour, which are cumbersome or impossible to analyse using
standard BIMs due to a lack of appropriate object representations and relations. Thus, to the best of our knowledge, InSpace3D is the ﬁrst middleware to provide modelling, querying, and reasoning services that enable the
rapid development of perceptual and visuo-locomotive analytical tools. Our middleware is a direct extension of
IFC, and is thus fully compliant with industry modelling standards, easing integration with existing popular IFC
support platforms and tool-chains such as the BIMServer [4].
3. Semantic Spatial Data Access and Analytics with Building Information Models
Spatial awareness about indoor space, or more generally, about built-up space, necessitates the derivation of
semantic descriptions of ﬂoor-plans, and reasoning about built-up spatial structure. This acquires real signiﬁcance
when the spatial and semantic relationships can be expressed amongst not only strictly physical entities, but also
for abstract artefacts and aﬀordances in the environment [14]. For instance, consider a spatial artefact such as the
range space of a sensor (e.g., camera, motion sensor, view-point of an agent). This range space is not strictly a
spatial entity in the form of having a material existence, but needs to be treated as such nevertheless. Therefore,
it becomes impossible for spatial services to model and perform reasoning about constraints involving spatial
artefacts and aﬀordances during any stage in the entire life-cycle of the building: master-planning, deployment,
management or actual use.
3.1. Semantic Characterizations in InSpace3D
Given the physical geometry in a BIM model, the following primitives can be computed:
A1. Range Space: This denotes the region of space that lies within the scope of a sensory device such as a motion
or temperature sensor, or any other entity capable of visual perception. Range space may be further classiﬁed into
observational or visibility space. The visibility space is a region of space from which an object is visible, i.e. an
inversion of the commonly known notion of an isovist.
A2. Operational Space: This denotes the region of space that an object requires to perform its intrinsic function
that characterizes its utility or purpose.
A3. Functional Space: This denotes the region of space within which an agent must be located to manipulate or
physically interact with a given object.
A4. Movement Space: These are topologically distinct locations bounded by place-delimiting objects (e.g. obstacles such as walls). Diﬀerent conditions on whether an object is an obstacle give rise to alternative movement
spaces.
A5. Empty Space: In general, we deﬁne empty space as the truly non-interfering region of space within which
humans can freely operate in the built environment. Non-interference is interpreted as absence of interaction with
the physical space and spatial artefacts such as functional, operational, range spaces in the environment.
A6. Topological Route Graphs and Geometric Route Paths: Movement spaces are connected by place-transitioning
objects (such as openings and doorways) to derive route graphs. Topological paths are sequences of movement

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

spaces (or “places”) and transitioning objects through the route graph. In contrast, geometric route paths are
bounded curves embedded in the environment along which an agent can move without colliding with obstacle
objects. In essence, the movement space provides the set of all topologically equivalent (actual) geometric routes
between two locations. Using the construct of movement spaces, we can study sets of geometric routes, and ask
questions about whether geometric routes exist that have certain properties, or whether all geometric routes fulﬁl
a given property.
A7. Aﬀordance based Route Paths: By providing alternative deﬁnitions for place-delimiting and place-transitioning
objects, we can derive agent-speciﬁc route graphs. For example, consider ﬁreﬁghters navigating through a burning builiding in search of victims. The smoke drastically reduces occupant visibility and therefore the ﬁreﬁghters’
sense of orientation depends heavily on reference features such doors, walls, corners, and large pieces of furniture
[15]. Thus, the standard geometric paths are not suitable for analytical purposes. A more eﬀective, domainspeciﬁc geometric path is deﬁned by the arrangement of salient features such as doors and windows along room
walls. This is derived by specifying the condition that movement space must be within the functional space of a
wall.
In general, our approach to indoor or built-up spatial awareness relies on a speciﬁc interpretation of the structural form of an environment [16]; broadly speaking, this is an abstraction mechanism generally corresponding
to the layout, shape, relative arrangement and spatial composition at the common-sense level of spatial entities,
artefacts and other abstract or real elements that are either modelled geometrically, or may interpreted or derived
within multi-modal characterizations such as in A1–A7.
3.2. The InSpace3D Middleware Architecture
We provide a concrete grounding of our spatial artefact framework [17] by formally extending a well known
building information model, the Industry Foundation Classes (IFC) [2]. A full implementation of our framework
is used in Section 5 for empirical evaluation on real, industry-scale building data. We will now give a technical
overview of InSpace3D and the extension of IFC to incorporate spatial artefacts and qualitative spatial relations.
Figure 2(a) presents the entity model of InSpace3D using EXPRESS-G notation.1 The abstract class ArtefactualSpace is a subclass of IfcSpace, and thus inherits all standard properties of generic building objects (e.g.
representations). Each spatial artefact is associated to a unique parent product via the RelDerivesSpatialArtefacts
relation. Figure 2(b) illustrates the InSpace3D middleware platform. The Modalities component is responsible
for deriving spatial artefacts, and will be covered in detail in Section 4.3. Deriving spatial artefacts only requires
a fragment of the complete IFC speciﬁcation, namely object types, their placement, shape representations, and
relationships with other objects.
With respect to shape, IFC supports numerous 2D and 3D modelling approaches such as proﬁle extrusion,
sweeps, CSG and b-rep. It is necessary to devise a homogenous approximation of object representations that is
just suﬃciently complex to compute the required modalities. The component IFC Parser performs this by ﬁrstly
projecting the 3D representations on to a 2D plane parallel to the ground, annotated with the ﬂoor number. Object
shape representation is then approximated as (a) the bounding line segment for large area-based objects such as
spaces and slabs, and (b) either the convex hull or the (object aligned) bounding box of all other objects including
walls, doors, windows, openings, and furniture. These approximations substantially reduce the vertices required
to express the form of an object by orders of magnitude, while retaining and emphasising the salient geometric
aspects necessary for computing the artefacts. We maintain elevation and height information to enable certain
important 3D approximations.
The InSpace3D artefactual space model is fully compliant with the EXPRESS entity model, and thus all
established IFC querying tools can be used to facilitate the development of analytical software tools (e.g. [10,
12]). In addition we have developed an interface to the CLP(QS) declarative spatial reasoner [18], enabling highlevel semantic analysis and qualitative spatial reasoning within the declarative framework of (constraint) logic
programming.
1 Boxes represent entities (classes), thick arrows represent entity inheritance, thin arrows represent associations, and dashed arrows represent

optional associations. Only an extract of the full IFC is illustrated in Figure 2(a) (IFC consists of approximately 700 entities).

83

84

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

InSpace3D Model

DerivedArtefacts

ArtefactualSpace

FunctionalSpace

RoutePathSpace

OperationalSpace

MovementSpace

RangeSpace

VisibilitySpace

InSpace3D Middleware

EmptySpace

RelDerivesSpatialArtefacts

IFC Parser
Architecture, Engineering, and
Construction Model (IFC)

IfcRelationship
ObjectPlacement
Representation

IfcProduct

IfcObject

IfcSpatialStructureElement

IfcObjectDefinition

Parent

Modalities
Custom Product
Representations

IfcObjectPlacement
IfcProductRepresentation
IfcSpace

Spatial Artefacts

Representation and
Geometry Model

IfcRoot

(a) EXPRESS-G diagram of InSpace3D entities & associations

Spatial Relations
IFC Model

CLP(QS)

Prolog Model

(b) InSpace3D middleware components

Fig. 2. InSpace3D entity model and middleware platform.

4. Theoretical Analysis of Derived Objects and Dependencies
Spatial artefacts are generated by objects in the environment. The number of artefacts generated, and their
associated geometries, depend on the nature of the spatial artefact (functional, operational, movement, etc.), and
the properties of the parent object. In this section we characterise the computational complexity of deriving spatial
artefacts.
A design consists of a set of objects U and a set of object relations. Each object has a polygon representation
rep(o) = Po describing the region of space it occupies. The function new(c, P) = o creates a new (derived) object
of class type c and a polygon representation. An object relation with arity a is a set of a-ary object tuples, relation
Ra ⊆ U a . Because the set U is ﬁnite, we can employ operators from relational algebra. The projection operator
πi builds a set containing the i-th value of each tuple in relation Ra (0 ≤ i < a), formally πi (Ra ) = {vi |(. . . , vi , . . . ) ∈
Ra }. The join operator combines relations Ra , S b by matching the last tuple values of Ra with the ﬁrst tuple
S b = {(r0 , . . . , ra−1 , s1 , . . . , sb )|∃t · (r0 , . . . , ra−1 , t) ∈ Ra ∧ (t, s1 , . . . , sb ) ∈ S b }. In
values of S b , formally Ra
keeping with common AEC practice, we employ standard point-set topology for deﬁning geometric primitives
and operations (e.g. refer to [19] Section 3). A point p = (x, y) where x, y ∈ R. A polyline q = (p0 , . . . , pn ). A
simple polygon s = (p0 , . . . , pn , p0 ) such that no line segments intersect. s◦ , s• , se are the sets of interior, boundary,
and exterior points of s respectively. A (non-simple) polygon P = (C, H) where C = {s1 , . . . , sm } (contours) and
H = {s1 , . . . , sm } (holes) such that ∀s ∈ H, ∃s ∈ C · s ◦ ⊂ s◦ . (∅, ∅) is an empty polygon.
4.1. Measuring Complexity: Vertex and Object Granularity
Within computational geometry, complexity is often measured with respect to the number of geometric primitives (polygon vertices, edges, intersection points etc.) involved in a computation. This approach alone is not
suﬃcient for analysing the general complexity of generating a particular spatial artefact for a number of reasons.
Firstly, a highly accurate building model may not be available (e.g. early design stage, uncertainties during
emergencies, etc.), and the user may only have an idea of the scale of the building based on the approximate
number of objects (walls, doors, etc.). Secondly, spatial artefacts are generated from abstractions of the source
geometric representations. Thus, given a large number of relatively simple objects, the number of objects involved
in the computation becomes a more relevant indicator of complexity. Thirdly, the building informatics domain
imposes certain constraints between objects, e.g. two walls cannot occupy the same region of space. These domain
constraints rule out certain theoretical worst cases, and so we need a measure for realistic worst case designs that
satisfy these basic domain constraints.

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

As an example, consider dividing a region of space (represented as a polygon) based on obstacles such as walls. The number of resulting disjoint polygons is a function of the number and complexity of the obstacles. In the theoretical worst case, each line segment of an inﬁnitely thin obstacle divides the
space; if there are n line segments then the number2 of spaces is 12 (n2 − n + 4).
This fact alone tells us very little about the nature and complexity of dividing a space in the context of building informatics, as this case can only occur in highly degenerate (and uninteresting) designs, as illustrated in Figure
3. For instance, obstacles are restricted to non-self-intersecting polygonal regions that do not overlap with other obstacles. In particular, walls are very
often represented as convex blocks, and furniture can often be approximated
as simple shapes such as bounding boxes or convex hulls. In this case, given
m obstacles the maximum number of spaces is (m + 1).

Fig. 3. (left) an inﬁnitely thin, selfintersecting wall dividing the pink
space into the maximum number of
17 regions (given that the wall has 6
segments), (right) a convex non-self
intersecting wall dividing the pink
space into the maximum number of
2 regions.

4.2. Generating Artefact Geometries
Based on the spatial artefacts identiﬁed in Section 3 (A1-A7), the generative process employed in the Modality
component of InSpace3D middlesware is: (1) generate initial polygon, (2) subtract “negating” polygons, forming
a disjoint set of polygons, and (3) identify relevant polygons within the disjoint set. The initial polygon of a spatial
artefact is based on the parent object and some set of relevant supporting objects, and is generated by either (a)
covering, (b) line-of-sight, (c) distance, or (d) sweeping. In the following subsections we are concerned with the
number of objects, and how this might aﬀect complexity; N is used to denote input geometric primitives (such as
points or line segments) and M is used to denote input objects (such as walls or doors).
a) Covering. Ensures that the initial polygon is an improper superset of some set of objects by taking either
the union, bounding box, or convex hull of the source polygons. For example, movement space for a given ﬂoor
is initialised by taking the union of all navagable surfaces, and empty space is initialised by taking the union of
movement spaces. Determining the bounding box of M objects requires visiting each object (assuming that some
other ordering datastructure has not been employed) and thus takes O(M) time. Convex hull algorithms typically
take O(NlogN) (such as the Graham Scan [21]) where N is the number of points. If each object has at most c
points then the complexity of independently computing the convex hull for M objects is O(MlogM). Boolean
operations on concave, self-intersecting polygons with holes have O(NlogN) time complexity using variations on
well known scanline techniques (where N is the number of so-called completely intersected edges) [22].3 Let
constant c be the maximum number of polygon edges per object. As Lauther points out, in the worst case (c · M)
polygon edges generates O(M 2 ) intersected edges (ruining the good complexity result). However, due to the AEC
domain, the polygons from the projections of objects are not self-intersecting, and physical objects that are on the
same ﬂoor (such as walls) cannot occupy the same region, and so this worst case will only occur in degenerate
designs; that is, the order of the number of intersected edges is O(M). Thus, the time complexity of M objects
(with a constant maximum edge count per object) is O(MlogM).
b) Line-of-sight. Two points have a line-of-sight if the line segment between those points is not interrupted
by an opaque object. An initial polygon is thus created by ensuring that it contains all points in the environment
that have a line-of-sight with some point in the parent object. Range spaces, visibility spaces, and isovists use this
property. In an environment with N opaque edges, the problem of ﬁnding visibility polygons is typically divided
into two parts: a preprocessing stage taking O(N 2 ) time (and space) that provides a datastructure for the second
stage of computing a visibility polygon from a given point in O(N) time [23]. Let there be M opaque objects with
at most c edges. Opaque objects such as walls often share an edge so that N ≤ cM. Assuming that walls are
represented as convex blocks, each opening divides a portion of some wall into two pieces, creating at most c new
opaque edges. Thus, given M openings, N ≤ c(M + M ), giving us a complexity of O((M + M )2 ) preprocessing
complexity and O(M + M ) time complexity for each subsequent isovist.
2 This
3 Such

equation is an adaptation of Steiner’s [20] theorem on the maximum number of regions in the plane from n straight lines.
a set is constructed by splitting edges at intersection points.

85

86

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

c) Distance. These methods include buﬀering (dilation and erosion) and Voronoi diagrams. Functional spaces
are often created by buﬀering the boundary of a parent product such as a wall. Buﬀering a polygon with N vertices by a polygon with N vertices can be computed in general using Minkowski addition, and has complexity of
O(N 2 N 2 ); if both polygons are convex then the complexity becomes O(N + N ) [24]. When generating spatial
artefacts, an abstraction such as a bounding box or convex hull is typically a suﬃcient source geometry for buﬀering, thus ensuring that buﬀering is always an eﬃcient procedure. Thus, to independently buﬀer M objects takes
O(M) time.
d) Sweeping. Given some source geometry, a new polygon is created through sweeping by taking the union of
all intermediate polygons as the source geometry is translated, scaled, and rotated. Operational spaces for doors
are created by sweeping the door panel via rotation about the door’s hinge. As with buﬀering, abstractions are
used and objects are swept based only on their own geometry (and not other objects in the environment). Thus,
independently sweeping M objects takes O(M) time using simple sweeping operations.
4.3. InSpace3D Modalities Component: Algorithms for Deriving Standard Spatial Artefacts
In this section we provide detailed algorithms for generating the spatial artefact geometries as implemented in
the Modalities component of InSpace3D middleware, and we provide computational complexity results based on
the framework established in the Section 4.2 (the referenced algorithms are presented at the end of the paper).
Movement Spaces. Movement spaces are derived in Algorithm 1 from a building story reference object o f ,
and the route graph is derived in Algorithm 2. The binary relation OnFloor associates objects to the building
stories in which they are contained. The unary relation NavigableSurface lists the objects on which the agent can
maneuver, such as slabs. The unary relation Obstacle lists the objects that are barriers to movement such as walls
and pieces of furniture.
Visibility Spaces. Algorithm 3 derives the visibility space of a reference object. Deriving the visibility
space relies on the notion of edge-visibility which has not been as thoroughly investigated within computational
geometry as point-visibility, although current complexity results suggest that edge-visibility is signiﬁcantly more
complex to calculate [25]. Thus we approximate the derivation of visibility spaces by taking unions of isovists
from the polygon vertices of the physical geometry.
Operational Spaces. Operational spaces are derived in Algorithm 4 from a door reference object ore f . The
derived geometries are (in this case) not based on the environment, and only take the reference object’s class
and physical geometry into account. Operational spaces are often derived by sweeping, extruding, translating,
rotating, and scaling parts of the physical geometry.
Functional Spaces. The speciﬁc geometry of a functional space can be completely customised by deﬁning
the function GenFuncSpc; we assume that the buﬀer operation is applied by default. Once the initial functional
space geometry has been derived from the object’s physical geometry, the physical space of obstacle objects must
subtracted. We then remove any geometric regions that are topologically disconnected from the object’s physical
geometry. This is presented in Algorithm 5.
Empty Spaces. Empty spaces are derived in Algorithm 6 from a building story reference object o f . The
relation SpatialArtefacts lists those derived objects that are not considered empty space (depending on the speciﬁc
task). For example, SpatialArtefacts can be the union of FunctionalSpaces and OperationalSpaces.
4.4. Computational Complexity of Standard Spatial Artefacts
Table 1 presents the complexity analysis of the algorithms in Section 4.3; Ob is the number of obstacles, Oq
is the number of opaque objects, Op is the number of openings, Nv is the number of navagable surfaces, S is the
number of spatial artefacts used in deﬁning empty spaces, Mv is the number of movement spaces. All counts are
assumed to only include objects on the parent object’s ﬂoor. The time complexity analysis is based on Section 4.2.
Determining the maximum artefacts per parent takes the domain restrictions described in Section 4.1 into account
for dividing regions. Thus, we are now able to investigate and compare the properties of artefacts independent
of the speciﬁc number of geometric primitives used in their representation. Operational and visibility spaces
have a one-to-one relationship with their parent objects. The number of empty spaces may grow more rapidly
than movement spaces depending on the distribution of shapes of the relevant artefacts. Adding and removing
obstacles inﬂuences all artefacts except operational spaces (assuming that the obstacles are also opaque), but can
only indirectly aﬀect empty spaces.

87

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

Table 1. Complexity analysis of spatial artefacts based on the
number of objects in the environment.
Artefact
Movement

Maximum per
parent
Ob + 1
1

Visibility

1
Ob + 1

Operational
Functional
Empty

Ob·S (S +1)
2

+ Ob

Time complexity

Time notes

M = Nv + Ob,
O(MlogM)
O((Oq + Op)2 )
+O(Oq + Op)
O(1)
O(1)
+O(OblogOb)
M = Mv + S
O(MlogM)

covering and
subtract obstacles
preprocessing (once)
isovist
sweep
buﬀer
subtract obstacles
covering and
subtract artefacts

Table 2. Comparison of IFC BIM data sets used for evaluation after 2D ﬂoorplan projection: number of objects and vertex
count (mean per object).
Design
Gulbenkian
Arkansas: Basketball
Arkansas: Football
Arkansas: Dinning
Interchange
Dagstuhl

Total Number of Objects
166
510
561
360
1568
2015

Average
Vertices
Per Object mean
(std. dev)
4.5 (2.1)
4.2 (1.7)
4.6 (6.9)
4.2 (0.9)
4.3 (2.0)
4.5 (3.0)

5. Empirical Analysis
In order to empirically evaluate the practicality of employing higher-level spatial modalities, we have fully
implemented InSpace3D and have conducted experiments using real, industry-scale building data. The building
data are in the form of seven IFC models representing existing buildings and buildings under construction. Table 2
presents the size of each data set in terms of the number of objects and vertices modelled using our framework (i.e.
after the IFC parsing phase). In these experiments we are primarily concerned with the practicality of deriving
spatial artefacts based on the way that building data is structured within the building informatics domain (e.g.
objects are semantically organised by ﬂoor). Thus, we have omitted the use of specialised geometric optimisation
strategies including datastructures such as R-trees. Range spaces have been omitted from the experiments due to
the absence of cameras and other observer points in the data models. Visibility spaces were derived for furniture
and openings (such as windows and doorways). Computing the isovist was done using the VisLibity package [26].
Polygon operations were performed using General-Polygon-Clipper.4 Experiments were run on a MacBookPro,
OS X 10.6.3, 2.66 GHz.
Figure 4(a) illustrates the time taken to derive the modalities compared to the number of objects per building
storey (note the logarithmic scale used on the y-axis). While growing polynomially, all building stories were
processed per modality within a maximum of 90 seconds, thus demonstrating the practicality of deriving spatial
modalities for real industry scale building models. Visibility spaces are the most time consuming spatial artefacts
to derive, followed by empty spaces (by an order of magnitude), followed by functional and movement spaces
(again by an order of magnitude), with operational spaces being the fastest to derive. This is consistent with the
computational complexity analysis presented in Table 1.
Figure 4(b) illustrates the number of objects derived per building storey. The number of artefacts grows
linearly with respect to the number of objects. The number of functional spaces derived is approximately two
times the number of objects. The number of empty spaces is approximately 0.2 times the number of objects, and
the number of movement spaces is approximately 0.1 times the number of objects. As expected, one visibility
space was derived per furniture item and opening, and one operational space was derived per door. Thus, the
absolute number of derived objects is manageable, in the order of 1000 derived objects per building storey for the
largest models.
6. Conclusions
Driven by the need to provide intelligent high-level spatial data analyses, we present InSpace3D middleware
as a foundational computational backbone for spatial awareness capabilities. We presented the computational
core of InSpace3D, consisting of rich spatial data handling functions. The existing spatial data-structures and
computational capabilities in the middleware reﬂect those functions that we deem essential for real-time spatial
services such as indoor navigation, building maintenance, and real-time emergency support. InSpace3D has been
fully implemented, and experimental results presented in the paper emphasise the real-time practicality of the
4 General-Polygon-Clipper:

http://www.cs.man.ac.uk/ toby/alan/software/

88

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

(a) Time taken to derive spatial modalities per building storey.

(b) Spatial artefacts derived per building storey.

Fig. 4. Empirical results with the selected datasets presented in Table 2

platform. Work is in progress to deploy the middleware in a manner such that its capabilities may be used by other
researchers and application builders in domains as disparate as civil engineering, building life-cycle maintenance,
disaster and emergency management. Work is also in progress to extend the scope of InSpace3D to the CityGML
speciﬁcation, thereby opening up its use in domains such as planning, disaster management, and volunteered
geographic information (management) at the urban scale. In due course, we also seek the contribution of the
open-source community toward extending the scope and computational capabilities of InSpace3D.
References
[1] C. M. Eastman, P. Teicholz, R. Sacks, K. Liston, BIM Handbook: A Guide to Building Information Modeling for Owners, Managers,
Designers, Engineers and Contractors, Frontiers in Artiﬁcial Intelligence and Applications, Wiley, 2008.
[2] T. Froese, M. Fischer, F. Grobler, J. Ritzenthaler, K. Yu, S. Sutherland, S. Staub, B. Akinci, R. Akbas, B. Koo, A. Barron, J. Kunz,
Industry foundation classes for project management - a trial implementation, ITCon 4 (1999) 17–36.
[3] T. H. Kolbe, G. Groger, L. Plumer, Citygml interoperable access to 3d city models, in: Proceedings of the ﬁrst International Symposium
on Geo-Information for Disaster Management, Springer Verlag, 2005, pp. 21–23.
[4] J. Beetz, L. van Berlo, R. de Laat, P. van den Helm, Bimserver.org an open source ifc model server, in: Proceedings of the 27TH CIB
W78, 2010.
[5] P. Spiby, D. Schenck, EXPRESS Language Reference Manual: Product data representation and exchange, ISO TC184/SC4/WG5,
Document N65 P2, 1994.
[6] R. W. Amor, J. G. Hosking, Multi-disciplinary views for integrated and concurrent design, The International Journal of Construction
Information Technology 2 (1994) 45–55.
[7] G. Lee, C. M. Eastman, R. Sacks, Eliciting information for product modeling using process modeling, Data and Knowledge Engineering
62 (2007) 292–307.
[8] D. Yang, C. M. Eastman, A rule-based subset generation method for product data models, Computer-Aided Civil and Infrastructure
Engineering 22 (2007) 133–148.
[9] J. Karlshoj, J. Wix, Information Delivery Manual Guide to Components and Development Methods, 1st Edition, buildingSMART International, 2010.
[10] A. Borrmann, E. Rank, Speciﬁcation and implementation of directional operators in a 3d spatial query language for building information
models, Advanced Engineering Informatics 23 (2009) 32–44.
[11] A. Borrmann, E. Rank, Topological analysis of 3d building models using a spatial query language, Advanced Engineering Informatics
23 (2009) 370–385.
[12] J. Beetz, J. van Leeuwen, B. de Vries, Ifcowl: A case of transforming express schemas into ontologies, Artiﬁcial Intelligence for
Engineering Design, Analysis and Manufacturing 23 (2009) 89–101.
[13] J.-K. Lee, J. Lee, Y. suk Jeong, H. Sheward, P. Sanguinetti, S. Abdelmohsen, C. M. Eastman, Development of space database for
automated building design review systems, Automation in Construction 24 (2012) 203–212.
[14] M. Bhatt, F. Dylla, J. Hois, Spatio-Terminological Inference for the Design of Ambient Environments, in: K. S. Hornsby, C. Claramunt,
M. Denis, G. Ligozat (Eds.), Conference on Spatial Information Theory (COSIT’09), Springer-Verlag, 2009, pp. 371–391.
[15] I. Lindgren, Communication and team performance - a ﬁeld study of breathing apparatus ﬁreﬁghters’ communication during rescue
operations, Master’s thesis, Linkpings universitet, Linkping (2004).

Carl Schultz and Mehul Bhatt / Procedia Computer Science 18 (2013) 80 – 89

[16] M. Bhatt, J. Hois, O. Kutz, Ontological Modelling of Form and Function in Architectural Design, Applied Ontology Journal. IOS Press
(2012) 1–35(in press; temp. assisgned DOI: http://dx.doi.org/10.3233/AO-2012-0104).
[17] C. Schultz, M. Bhatt, Multi-Modal Spatial Data Access for Architecture Design Assistance, AIEDAM: Artiﬁcial Intelligence for Engineering Design, Analysis and Manufacturing, Special issue on: Design Computing and Cognition 26 (2012) 177–203, Cambridge
University Press.
[18] M. Bhatt, J. H. Lee, C. Schultz, CLP(QS): A Declarative Spatial Reasoning Framework, in: COSIT, 2011, pp. 210–230.
[19] M. Egenhofer, R. Franzosa, Point-set topological spatial relations, International Journal of Geographical Information System 5 (2) (1991)
161–174.
[20] J. Steiner, Einige gesetze u¨ ber die theilung der ebene und des raumes, J. reine angew. Math 1 (1826) 349–364.
[21] R. Graham, An eﬃcient algorithm for determining the convex hull of a ﬁnite planar set, Information processing letters 1 (4) (1972)
132–133.
[22] U. Lauther, An o (n log n) algorithm for boolean mask operations, in: Papers on Twenty-ﬁve years of electronic design automation,
ACM, 1988, pp. 233–240.
[23] T. Asano, L. Guibas, J. Hershberger, H. Imai, Visibility-polygon search and euclidean shortest paths, in: Foundations of Computer
Science, 1985., 26th Annual Symposium on, IEEE, 1985, pp. 155–164.
[24] A. Kaul, M. O’Connor, V. Srinivasan, Computing minkowski sums of regular polygons, in: Proc. 3rd Canadian Conference on Computational Geometry, 1992, pp. 74–77.
[25] D. Avis, G. T. Toussaint, An optimal algorithm for determining the visibility of a polygon from an edge 30 (1981) 910–914.
[26] K. J. Obermeyer, Contributors, The VisiLibity library, http://www.VisiLibity.org, r-1 (2008).

Appendix A. Algorithms for deriving spatial artefacts
Algorithm 1: Derive movement spaces (o f )
1

//– initial polygon “covering” navagable surfaces

Algorithm 4: Derive operational spaces (ore f )
1

//– initial polygon “sweep” of door panel

6

O = π0 (OnFloor {o f })
S = O NavigableSurface
P M = (∅, ∅)
for oi ∈ S
P M = union (P M ,rep(oi ))

7

//– subtract movement obstacles

1

PF =GenFuncSpc(ore f )

3

//– subtract physical obstacles

10

Q = O Obstacle
for o j ∈ Q
P M = diﬀerence (P M ,rep(o j ))

2

11

//– create one movement space per polygon

2
3
4
5

8
9

12
13
14

for Pk ∈div(P M )
Mk = new ( MovementSpace , Pk )
MovementSpaces ← (o f , Mk )

Algorithm 2: Derive route graph (o f )
1
2
3
4
5
6
7

O = π0 (OnFloor {o f })
Q = O PlaceTransition
M = o f MovementSpaces
for mi ∈ M
for qi ∈ Q
if intersects(rep(qi ),rep(mi )
RouteConnection ← (qi , mi )

2
3

Algorithm 5: Derive functional spaces (ore f )

1

//– initial polygon “line-of-sight”

8
9

//– create one functional space per polygon touching parent

5
6
7

10
11
12
13

1

5
6

//– subtract spatial artefacts

4

7

//– create visibility space for polygon

11

V = new ( VisibilitySpace , Pv )
VisibilitySpaces ← (ore f , V)

12

4
5

8
9

//– initial polygon “covering” movement spaces
O M = π1 ({o f } MovementSpaces)
PE = (∅, ∅)
for oi ∈ O M
PE = union (PE , rep (oi ))

3

6

3

for P j ∈div(PF )
if intersects(P j ,rep(ore f ))
F j = new ( FunctionalSpace , P j )
FunctionalSpaces ← (ore f , F j )

Algorithm 6: Derive empty spaces (o f )

Pv = (∅, ∅)
(C, H) = rep(ore f )
for s ∈ C
for pi , pi+1 ∈ s
Pv = union(Pv ,EdgeVist(pi , pi+1 ))

2

//– initial polygon based on parent geometry (e.g. buﬀer)

{o f } = π1 ({ore f } OnFloor)
O = π0 (OnFloor {o f })
S = O Obstacle
for oi ∈ S
PF = diﬀerence (PF ,rep(oi ))

4

2

Algorithm 3: Derive visibility spaces (ore f )

PO =Sweep(ore f , 90o )
O = new ( OperationalSpace , PO )

10

S = π0 (OnFloor {o f })
Q = π1 (S SpatialArtefacts)
for o j ∈ Q
PE = diﬀerence (PE ,rep(o j ))
//– create one empty space per polygon

7
8
9

13
14

for Pk ∈div(PE )
Ek = new ( EmptySpace , Pk )
EmptySpaces ← (o f , Ek )

89

