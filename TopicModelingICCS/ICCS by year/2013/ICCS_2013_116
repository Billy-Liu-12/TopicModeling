Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 732 – 741

International Conference on Computational Science, ICCS 2013

Seismic Image Restoration Using
Nonlinear Least Squares Shape Optimization
Mathieu Gilardeta,b,∗, Sebastien Guillona , Bruno Jobardb , Dimitri Komatitschc
a TOTAL,

Pau, France
University of Pau, France
c LMA, CNRS UPR 7051, Universit´
e Aix-Marseille, Centrale Marseille, France
b LIUPPA,

Abstract
In this article we present a new method for seismic image restoration. When observed, a seismic image is the result of an initial
deposit system that has been transformed by a set of successive geological deformations (ﬂexures, fault slip, etc) that occurred
over a large period of time. The goal of seismic restoration consists in inverting the deformations to provide a resulting image
that depicts the geological deposit system as it was in a previous state. Providing a tool that quickly generates restored images
helps the geophysicists to recognize geological features that may be too strongly altered in the observed image.
The proposed approach is based on a minimization process that expresses geological deformations in terms of geometrical
constraints. We use a quickly converging Gauss-Newton approach to solve the system.
We provide results to illustrate the seismic image restoration process on real data and present how the restored version can
be used in a geological interpretation framework.
Keywords: Seismic image restoration, least squares minimization process, Gauss-Newton solver.

1. Introduction
In this article we present a new method for seismic image restoration in order to help geophysicists in their
interpretation of sedimentary deposit systems. In oil and gas exploration, seismic images are acquired by propagating, recording and processing acoustic waves underground. These images highlight geological events such as
horizons (stratigraphic limits) or faults (discontinuities). Because of structural deformations of the underground
that have occurred over time, such as ﬂexure or displacements along faults, important geological structures might
be diﬃcult to detect and reconstruct (see ﬁgure 1). Our aim is to provide an easily conﬁgurable restoration tool that
corrects the structural deformations to facilitate the identiﬁcation of subtle geological events. Seismic restoration
consists in ﬁnding a set of successive transformations between the observed image and an unwarped version that
represents the initial sedimentary deposit system.
Two types of deformation operations might successively intervene during the restoration process. One is to
split a seismic image along a geological fault and to slide one resulting block along this fault in order to get the
∗ Corresponding

author. Tel.: +33-559-835518.
E-mail address: mathieu.gilardet@gmail.com.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.237

733

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

(a)

(b)

(c)

Fig. 1. Successive geological deformations of the underground. Over time, the structure of an initial sedimentary deposit (a) is deformed
under the action of tectonic constraints (b) that might lead to fault formation and block displacements (c). To facilitate understanding the
resulting structure, geophysicists apply several restoration processes that transforms it in the opposite order (c → b: displacement along the
fault, then b → a: horizon ﬂattening) to recover the initial deposit system.

horizons matching on each side of the fault (see ﬁgure 1, c → b). The second operation is to deform the whole
seismic image so that a selected horizon gets ﬂattened along with the surrounding blocks, therefore restoring the
initial structure of the geological deposit (see ﬁgure 1, b → a).
In the domain of seismic imagery, diﬀerent solutions [1], [2], [3] and [4] have been proposed to globally
restore a seismic image. All these solutions are based on automatic image analysis, estimating the local dip of
each horizon and then providing a global ﬂattening process. This approach is eﬀective as long as seismic quality is
good enough over the whole domain and that no structural deformation such as faults has altered the underground
conﬁguration. This last aspect is a major limitation since geological regions of interest are very likely to present
such faults.
The geomechanical aspects of fault restoration are of great interest for modelling and understanding a deformation process [5], [6]. The objective here concerns the quantiﬁcation of deformation history and strain analysis.
Based on geometric assumptions and mechanical rock properties, the restoration problem is solved based on a
geomechanical approach. The methodology ﬁrst requires deﬁning a mesh conforming to geological interfaces
(fault and horizons), associating mechanical properties to rock units and ﬁnally, based on boundary conditions,
using a ﬁnite-element approach to solve the problem. These approaches does not completely suit our restoration
needs, as they require to provide geomechanical properties that are not available at the early stage of the structural
interpretation of seismic images. We therefore focus our attention on lighter geometrical methods that provide
acceptable geological deformations without the need of injecting explicit geomechanical properties to initiate the
process.
In the computer graphics ﬁeld, more general purpose shape deformation techniques are able to achieve physically plausible deformation results [7], [8]. Weng et al. proposed a 2D shape deformation method that preserves
the boundary curve of the shape and the local areas inside the shape [9]. Preservation of the geometrical constraints is expressed as a nonlinear least squares minimization and is resolved iteratively with a Gauss-Newton
method.
Our restoration technique is an adaptation of the approach of Weng et al. whose purely geometrical local
areas preservation scheme has proven to be suﬃcient to mimic the geological deformation behavior in the context
of seismic image interpretation. We extend their shape deformation algorithm by deﬁning two supplementary
restoration constraints that control the fault restoration and horizon ﬂattening operations.
The article is organized as follows. Section 2 presents the general shape deformation framework. In section 3
we then introduce the speciﬁc constraints that handle fault restoration and horizon ﬂattening. In section 4 we
ﬁnally present applications and results.

734

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

2. Shape Deformation Framework
In this section we present the global scheme of shape deformation as proposed in [9]. This scheme is based
on a mesh deformation: the initial mesh is obtained by a triangulation of the input domain and is transformed in
order to minimize a set of criteria.
We will introduce two families of criteria to deﬁne what points should be transformed (restoration constraints)
and how the transformation is extended to other points (geometrical constraints). This combination will produce
a non linear system that we will subsequently solve based on a Gauss-Newton approach.
Finally, the use of texture mapping will directly provide the transformed image on the deformed mesh.
In the following, we note V the set of nodes belonging to the mesh M and V p the subset of V containing the
nodes from the contour of M. Vg is the subset of interior nodes that do not belong to V p . V has n elements.
2.1. Restoration Constraints
The basic mechanism of shape deformation consists in deﬁning one or several constraints that are applied
to diﬀerent subsets of mesh vertices. Each constraint will be applied to a subset of vertices Vc = {vc } ∈ V.
Considering a function c that provides the new positions of a set of vertices depending on their current position,
the transformation of the set of vertices can be expressed as:
CV = c(V)

(1)

where
• C is a (card({vc }) × n) matrix, such that Cr,c = 1 when vc is the rth element of Vc and the cth element of V ;
Cr,c = 0 otherwise.
• V is the (n × 2) vertices matrix, such as: ∀vk ∈ V, Vk = [vk x , vky ]
The previous geometrical transformation can be expressed as a geometrical constraint by considering the new
positions c(V) as a target to reach. The deformation process will then try to minimize the diﬀerence between the
current and target positions. Therefore, we write the restoration constraint JC to minimize as:
JC = ||CV − c(V)||2

(2)

In section 3, we will describe how to adapt JC to insert the two constraints responsible for fault restoration
and horizon ﬂattening.
2.2. Geometrical Constraints
After having described how to impose constraints onto speciﬁc subsets of vertices, we now describe how the
deformation will be propagated into the entire mesh. It is indeed important for deformation to be as uniformly
distributed as possible to avoid localized distortions. This is the role of what we call the geometrical constraints
that tend to preserve the shape and area of each triangle. As stated in [9] this objective is achieved by preserving
the mean value coordinates, the contour Laplacian and edge lengths. The following sections describe how we
formulate these constraints.
2.2.1. Mean Value Coordinate
For each point vi of Vg and vi, j its adjacent neighbors, its mean value coordinate [10] is deﬁned as the set of
ωi, j weights such that:
vi =

ωi, j ∗ v j

(3)

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

735

with
λi, j
tan(α j−1 /2) + tan(α j /2)
, λi, j =
|vi − v j |
j λi, j

ωi, j =

(4)

and α j is the angle between [vi v j ] and [vi v j+1 ].
The mean value coordinate over the entire shape can be written in matrix form as:
MV = 0

(5)

with
• M a (card(Vg ) × n) matrix such that:
– Mr,c = ωi, j when vi is the rth element of Vg , and v j is the cth element of V.
– Mr,c = − ωi, j when vi is the rth element of Vg , and the cth element of V.
– Mr,c = 0 otherwise.
• V the vertices matrix.
Preserving the mean value coordinate during shape deformation will consist in minimizing:
J M = ||MV||2 .

(6)

2.2.2. Contour Laplacian
Because mean value coordinates are limited to points which are the kernel of a star shaped polygon (as detailed
in [10]), this formulation could not apply to contour points vi ∈ V p . For this reason we estimate a Laplacian
coordinate δi on the initial mesh:
δi = L p (vi ) = vi − (vi−1 + vi+1 )/2

(7)

And δi is introduced as a constraint to be preserved. Written for all vi ∈ V p , we minimize:
JL =

||L p (vi ) − δi ||2 = ||ΔV − δ(V)||2
vi ∈V p

with
• Δ the (card(V p ) × n) matrix with
– Δr,c = −1/2 when vi is the rth element of V p , and vi−1 or vi+1 is the cth element of V.
– Δr,c = 1 when vi is the rth element of V p , and the cth element of V.
– Δr,c = 0 otherwise.
• V the vertices matrix.
• δ(V) the function that returns the (2 × card(V p )) matrix: δ(vi ) = T i δ(v0i ), such that:
– v0i is the position of vi before deformation.
– T i is the transformation matrix deﬁned by: T i =
– Di = ( (i, j)∈E p (v j − vi )(v0j − v0i )T )−1

(i, j)∈E p (v j

− vi )(v0j − v0i )T Di

(8)

736

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

2.2.3. Edge Length Preservation
The mean value coordinates formulation has for objective to preserve the triangle shape, but because this
measurement is invariant with scale, a constraint on edge length must be introduced to ensure the area preservation.
Preserving edge lengths requires to minimize the following energy:
JE =

||(vi − v j ) − e(vi , v j )||2

(9)

li, j 0
li, j

(10)

(i, j)∈E

with
e(vi , v j ) =

where li, j is the current length, and li, j 0 the length before deformation.
We rewrite (9) into the matrix form:
JE = ||LV − l(V)||2

(11)

with
• L the (card(E) × n) oriented incidence matrix.
• V the vertices matrix.
• l(V) the function that returns the (card(E) × 2) matrix, where the kth rows represents the kth edge under its
vectorial form.
2.3. Solving the System
Combining all the energy terms of restoration and geometrical constraints, the global shape deformation consists in minimizing:
J = αJ M + βJL + γJE + ζ JC

(12)

J = α · ||MV||2 + β · ||ΔV − δ(V)||2 + γ · ||LV − l(V)||2 + ζ · ||CV − c(V)||2

(13)

or:

The global energy can be rewritten in a simple matrix form as:
⎡
⎤
⎡
0
⎢⎢⎢ α · M ⎥⎥⎥
⎢⎢⎢
⎢⎢⎢ β · Δ ⎥⎥⎥
⎢⎢⎢ β · δ(V)
⎥⎥ , b(V) = ⎢⎢⎢
min ||AV − b(V)||2 , with A = ⎢⎢⎢⎢
⎢⎢⎢ γ · l(V)
⎢⎢⎣ γ · L ⎥⎥⎥⎥⎦
⎣
ζ ·C
ζ · c(V)

⎤
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎥⎥⎥
⎦

(14)

As minimizing J is not a linear problem, we use a Gauss-Newton approach to solve the system iteratively.
Thus at each iteration, we solve the following system:
min ||AV t+1 − b(V t )||2
t+1

(15)

where Vt is the vector of current positions, and Vt+1 the vector of updated positions at the next iteration.
Equation 15 is then linearized using the formulation:
V t+1 = (AT A)−1 AT b(V t ) .

(16)

As A only depends on the mesh before deformation, the term (AT A)−1 AT is computed once at the beginning
and thus a single matrix multiplication is needed at each iteration. In practice, the method converges typically
after a hundred iterations.

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

3. Fault Restoration and Horizon Flattening Workﬂow
We now introduce the speciﬁc constraints responsible for fault restoration and horizon ﬂattening, which are
the two restoration constraints introduced in the section 2.1. To better explain the workﬂow, let us apply it to the
synthetic test case illustrated in ﬁgure 2.a. In this case, we have identiﬁed a fault (in red) and a horizon (in blue)
and the objective is to ﬁrst recover from the displacement along the fault and then, in a second restoration stage,
ﬂatten the horizon.

(a)

(b)

Fig. 2. Restoration workﬂow applied to a seismic image. (a) Initial model (b) Meshed model.

3.1. Fault Restoration Procedure
To restore a fault displacement, a mobile block is deﬁned on one side of the fault while the other block on the
other side of the fault remains static. We then need to deﬁne two constraints controlling the displacement of the
mobile block. The ﬁrst constraint keeps the mobile block in contact with the fault while the second is responsible
for its displacement until the blue horizon matches on both sides of the fault.
3.1.1. Meshing the mobile block
We start meshing the mobile block from its contour (ﬁgure 2.b.). Before meshing we make sure to insert the
intersection point vI of the blue horizon in the mobile block within the fault because we will need it later to stitch
the horizon of the mobile block with the corresponding point vI in the static block.
3.1.2. Fault Sliding Constraint
This ﬁrst constraint must guarantee that the moving block will remain in contact with the fault during its
deformation. Let VF = {vF } be the subset of V containing the vertices of the moving block belonging to the fault.
We deﬁne f (vF ) their projection target on the fault polyline. The cumulated distance to the fault that we need to
minimize is:
JF1 =
(vF − f (vF ))2 = ||C F V − cF (V)||2
(17)
vF ∈VF

where
• C F is a (card(VF ) × n) matrix such that C F r,c = 1 when vF is the rth element of VF and the cth element of
V ; C F r,c = 0 otherwise.
• V is the vertices matrix
• cF (V) is the function that returns the (card(VF ) × 2) matrix that contains [ f (vF ) x , f (vF )y ] in its kth row.
Let us mention that we exclude from VF the vertex vI that will be handled by the horizon stitching constraint
in the next section.

737

738

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

3.1.3. Horizon Stitching Constraint
This constraint aims at moving the mobile block so that its vI point gets as close as possible to the vI point on
the edge of the static block. The energy term is:
JF 2 = (vI − vI )2 = ||C I V − cI ||2

(18)

with
• C I the (1 × n) matrix such that C I 0,c = 1 when vI is the cth element of V ; 0 otherwise.
• V, the vertices matrix.
• cI the (1 × 2) target position cI = [vI x , vI y ].
3.1.4. Gathering the Fault Restoration Constraints
From the equation 12 the global energy that has to be minimized to restore the fault is expressed by:
J1 = αJJ M + βJJL + γJJE + ζ JF 1 + λJJF 2 .

(19)

Figure 3.a shows the result obtained at the end of the fault restoration process. As expected, the mobile block
is still in contact with the fault and the blue horizon is now continuous across the fault.

(a)

(b)

Fig. 3. Fault restored model. (a) After fault restoration (b) The remeshed domain that will be used to start the horizon ﬂattening process.

3.2. Horizon Flattening Procedure
This part presents the second deformation process in our restoration workﬂow: the ﬂattening of a horizon. Its
aim is to provide an unfolded representation of the sedimentary deposit system. For this purpose, a horizon is
selected and adequate constraints will be introduced in order to ﬂatten it. An additional constraint will take care
of preserving the horizon length during the operation.
3.2.1. Whole Domain Remeshing
At this stage, the fault displacement has been restored and the selected horizon is continuous across the whole
domain. To start the next deformation step, we discard the current mesh, which only covers a limited part of the
domain. We therefore remesh the whole domain from its contour and from the selected horizon. However the
fault have been disabled with the ﬁrst restoration step, we do not constraint the new mesh to its geometry.
3.2.2. Horizon Flattening Constraint
Let VH = {vH k (xk , yk )} be the set of vertices belonging to the selected horizon. This constraint consists in
displacing the vH k vertices on the selected horizon toward an horizontal line of equation y = yH . Flattening the
horizon will require minimizing the energy:
JH 1 =

(yk − yH )2 = ||C H V = cH (V)||2
vk ∈V
VH

where

(20)

739

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

• C H is a (card(V
VH ) × n) matrix such that C H r,c = 1 when vk is the rth element of VF and the cth element of
V ; C F r,c = 0 otherwise.
• V is the vertices matrix
• cH (V) is the function that returns the (VF × 2) matrix that contains [vk x , yH ] in its kth row: .

3.2.3. Horizon Length Constraint
Expressing the length variation of the edge of the horizon consists in expressing the sum of length changes of
its edges EH . Similarly to equation 11, we write:
JH 2 = ||LH V = lH (V)||2

(21)

where this time, LH and lH (V) have card(EH ) rows.
However, since we want to explicitly formulate the horizon length energy, the regular length expression
||LV − l(V)||2 must now exclude the set of horizon edges Eh .
3.2.4. Gathering the Horizon Flattening Constraints
From equation 12 the global energy that has to be minimized to ﬂatten the horizon is expressed by:
J2 = αJJ M + αJJL + γJJE + ζ JH 1 + λJJH 2

(22)

Figure 4 shows the ﬂattened version of ﬁgure 3.b.
The complete restoration process shows how the particular geological feature that was split by the fault on
ﬁgure 2.a has been recovered. Its visual identiﬁcation is thus now easier.

(a)

(b)

Fig. 4. Restored model after ﬂattening. (a) Meshed (b) Plain.

4. Results
In this section we present the eﬀects
ﬀ
of the restoration processes on the real seismic image depicted in ﬁgure 5.
On this image, the objective will consist in restoring the main fault (discontinuity in the middle of the image) and
unfolding the dome structure. Restoration will allow for better understanding of the initial deposit system and will
clarify horizon continuity through the actual fault.
Figure 6 shows the successive deformations of the seismic image going through the global restoration framework. First, an horizon and a fault are selected on the seismic image (blue and red lines in ﬁgure 6.a). The block
on the right of the fault is then restored as explained in section 3.1 and the result is displayed in ﬁgure 6.b. Finally

740

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

Fig. 5. The initial seismic image that has to be restored.

(a)

(b)

(c)

(d)

Fig. 6. Restoration workﬂow applied to a seismic image. (a) Interpreted image (b) Fault restoration (c) Final image (d) Deformation map
and histogram: red shows compression, blue shows dilatation.

the blue horizon is ﬂattened as explained in section 3.2 and the resulting image is presented in ﬁgure 6.c. At this
stage, interpreters can more easily track continuous and ﬂat horizons and ultimately identify geological features.
As a consequence of the competing constraints, the least squared minimization method usually cannot fully
honor all of them. Figure 6.d shows the deformation ratio of each triangle (initial area over ﬁnal area). The
map thus depicts the typical regions of compression (red) and dilatation (blue) that inevitably occur during such
restoration operations. The histogram distribution of deformations attests that the minimization behaves well since
most of the triangles undergo only small distortions.
It appears through our experiments that imposing weighting coeﬃcients in a ratio of 10 between restoration
constraints and geometrical constraints was a good balance for our data. It means that in equations 19 and 22
we select, α, β, γ = 1 and ζ, λ = 10. Moreover we have observed good stability of the overall restoration when

Mathieu Gilardet et al. / Procedia Computer Science 18 (2013) 732 – 741

applying local variations to these coeﬃcients. We conclude that for realistic cases, the geometrical constraints are
met satisfactorily despite the strong weighting on the restoration constraints.
Dealing with the deformation of triangular meshes implies that the restoration process is intrinsically bijective
and therefore that the inverse transformation can be deﬁned. This leads to an interesting tool for interpreters
because they can perform their picking in the restored domain and their work can automatically be transformed
back in the original domain. We illustrate this possibility in ﬁgure 7, in which, we have transformed the yellow
and green horizons picked in the restored domain (ﬁgure 7.a) in the original domain (ﬁgure 7.b).

(a)

(b)

Fig. 7. Interpreting simultaneously on both restored and original domains. The original and restored images are connected through a
bijective transformation. Therefore picking horizons on the restored domain (a) can interactively be displayed on the original domain (b).

Conclusions and future work
In this article we have presented a complete shape deformation framework that achieves seismic image restoration based on a non linear least squares optimization. Due to the fact that deformations are expressed as purely
geometrical constraints, our method is much simpler to parameterize than geomechanical-based restoration approaches that require providing rock properties. In spite of this assumption, we obtain results that are good enough
to perform seismic interpretation tasks directly on the restored images.
The method that we have introduced is fast enough to be used in interactive interpretation sessions and thus a
large number of restoration hypotheses can be tested rapidly. This is particularly useful when restoring a fault, to
try several feature matching positions.
In future work we plan to extend this framework to 3D image restoration since the underlying equations are
not restricted to the 2D case.
References
[1] N. Keskes, S. Guillon, M. Donias, P. Baylou, F. Pauget, Method of chronostratigraphic interpretation of a seismic cross section or block
(2004).
[2] J. Lomask, A. Guitton, S. Fomel, J. Claerbout, A. Valenciano, Flattening without picking, Geophysics 71 (4) (2006) 13–20.
[3] V. Toujas, M. Donias, D. Jeantet, S. Guillon, Y. Berthoumieu, A robust framework for geotime cube, in: ICIP’08, 2008, pp. 1880–1883.
[4] G. Zinck, M. Donias, S. Guillon, O. Lavialle, Discontinuous seismic horizon tracking based on a poisson equation with incremental
dirichlet boundary conditions., in: B. Macq, P. Schelkens (Eds.), ICIP, IEEE, 2011, pp. 3385–3388.
[5] I. Moretti, F. Lepage, M. Guiton, Kine3d: a new 3d restoration method based on a mixed approach linking geometry (2006).
[6] P. Durand-Riard, G. Caumon, P. Muron, Balanced restoration of geological volumes with relaxed meshing constraints, Comput. Geosci.
36 (4) (2010) 441–452.
[7] S. Gibson, B. Mirtich, A survey of deformable modeling in computer graphics, Technical Report TR-97-1 9.
[8] T. Igarashi, T. Moscovich, J. Hughes, As-rigid-as-possible shape manipulation, in: ACM Transactions on Graphics (TOG), Vol. 24,
ACM, 2005, pp. 1134–1141.
[9] Y. Weng, W. Xu, Y. Wu, K. Zhou, B. Guo, 2d shape deformation using nonlinear least squares optimization, Vis. Comput. 22 (9) (2006)
653–660.
[10] M. S. Floater, Mean value coordinates, Comput. Aided Geom. Des. 20 (1) (2003) 19–27.

741

