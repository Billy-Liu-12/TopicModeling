Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 712 – 721

International Conference on Computational Science, ICCS 2013

Connecting models to data in multiscale multicellular tissue
simulations
Jonathan Coopera,∗, James Osbornea
a University

of Oxford, Department of Computer Science, Parks Road, Oxford, OX1 3QD, UK

Abstract
System level biological behaviour typically arises from highly dynamic, strongly nonlinear, tightly coupled interactions between component processes occurring across multiple space and time scales. The interdependent nature of these processes
often makes it diﬃcult to apply standard mathematical techniques to separate out the scales, uncouple the physical processes
or average over contributions from discrete components. To make rapid progress we need to address interoperability challenges: to build integrated models from reusable components, and to relate simulation results to experimental data both for
parameter ﬁtting and model analysis. In this paper we describe how work we have done to address these issues in the domain
of cardiac electrophysiology can be applied in a completely diﬀerent ﬁeld: multicellular models of intestinal crypts, with cells
treated as discrete entities, and the sub-cellular, cellular, and tissue scales interacting. In this application the model and simulation are intertwined in software, with no suitable markup language model representation. Diﬀerent modelling paradigms
are available for each of the scales, and comparing their predictions is of particular interest. We use our concept of ‘functional
curation’ to separate the experimental protocols applied to models from the model descriptions themselves, allowing easier
comparison of model behaviour with experimental data. We also describe the use of ontological annotation for providing semantically rich model interfaces, facilitating coupling models to each other and to protocol descriptions. Finally, we show how
these uses of semantic annotation and markup languages may be mixed incrementally with legacy code. This work suggests
that the ideas we have developed have the potential to be useful across computational science, and we discuss these wider
implications.
Keywords: Functional curation, Chaste, SED-ML

1. Introduction
Two related challenges in building mathematical models of biological systems stem from the complexity of the
systems being modelled. Few biological systems are small and self-contained. Interactions occur across multiple
levels of organisation and are usually intricate and nonlinear, making an intuitive grasp of their function hard to
obtain. Often, many component parts of a system must be modelled and the models tightly coupled in order to gain
insight into overall behaviour. Building reusable component models which can be integrated in such a way is a
signiﬁcant challenge. However, models are only useful if they provide insight into or predictions of experimentally
observed behaviour, and thus an equally important challenge is to relate the results of simulating such models to
experimental data. This must be done both in developing models, for instance by ﬁtting model parameters, and
also in model evaluation, for example in validation, veriﬁcation and uncertainty quantiﬁcation [1].
∗ Corresponding

author. Tel.: +44-1865-610671 ; fax: +44-1865-273839 .
E-mail address: jonathan.cooper@cs.ox.ac.uk.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.235

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

We have been creating tools as part of the Chaste simulation environment [2] to tackle these issues as they
arise in the context of cardiac electrophysiology. In this domain, cellular level models describing the activity
of muscle cells must be coupled to a tissue level model describing the spatial variation in electrical potential.
Many alternative cellular level models exist, and in [3] we describe how these may be coupled to our tissue model
largely automatically. We are also developing a framework for performing ‘functional curation’ [4] of such cellular
models, in order to evaluate and compare their behaviour under a wide range of experimental scenarios.
We next, in Section 2, describe how this previous work relates to the two modelling challenges outlined above.
In Section 3 we outline the new application domain of multicellular modelling and its challenges, and then present
a case study of how our techniques (with minor adaptations) can fruitfully be applied. We discuss the wider
implications and research questions arising from our work in Section 4, and conclude in Section 5.
2. Background
In this section we describe our previous work, in the domain of cardiac electrophysiology, on addressing the
twin challenges of building reusable component models which can be integrated together, and relating the results
of simulating such models to experimental data.
2.1. Building interoperable model components
To tackle the ﬁrst challenge, encoding models in standard markup languages (e.g. CellML [5] or SBML [6])
allows for easy reuse of model equations. However, in [3] we saw that one needs to go beyond a standards-based
representation of the model mathematics, and include additional semantic information to facilitate determining a
suitable model interface for the particular reuse scenario. The key elements are the identiﬁcation of the model
entities which should be connected, and the resolution of inconsistencies between component models.
When a biological process is modelled through computational simulation, the ﬁrst step is to develop a ‘biological model’ of the process—a qualitative verbal or graphical description as might be expressed by a biologist.
Converting this biological model into an interrogatable quantitative simulation requires various steps. We must
ﬁrst generate a mathematical model which assigns quantitative meaning to biological concepts. Next appropriate
numerical methods (specifying resolutions of the approximations) must be selected, and then implemented in a
programming language or computational framework. With many, often novel, variations in how these steps may
be performed being available, a raft of diﬀerent implementations of the biological model can be produced.
Ideally, coupling should be performed at the level of the ‘biological model’, and the transformation steps
automated so as to account for the implications of these new connections. Typically, however, the biological
model is implicit, and only the mathematical, numerical or computational model is available for reuse. In [3]
we thus demonstrated how a mathematical model may be analysed by mostly automatic tools to infer suﬃcient
biological information for a speciﬁc coupling scenario. The easier problem to address is the identiﬁcation of model
entities in diﬀerent component models which represent the same biological entity, and hence should be connected
when the models are coupled. Semantic metadata encoded using the Resource Description Framework [7] may
be used to annotate model entities with ontology terms uniquely deﬁning the biological entity. This will, at least
where agreement on the ontology to use is found, avoid conﬂicts arising from variations in naming conventions.
It also makes explicit the biological meaning of model entities, aiding in model comprehension.
A further problem arising in many model coupling exercises is the existence of incompatibilities between the
component models. These primarily arise from diﬀerences in the ways in which constituent models have been
transformed into their computational forms. Three categories of such incompatibilities were deﬁned by Terkildsen et al. [8] as unit, structural, and parameter inconsistencies. The easiest case is unit inconsistencies, where
scaling between quantities measured in diﬀerent units of the same dimension may be performed automatically [9].
Structural inconsistencies refer to diﬀerences in how the biological system is represented by the mathematical
equations. These often manifest as the same quantity measured in units of diﬀering dimensions. In our functional
curation framework, users may deﬁne conversion rules to be applied between such quantities, which can utilise
biological information encoded within the model in order to map between diﬀerent representations. Where the
cue provided by a unit incompatibility is not present, the modeller is required to intervene manually. Parameter
inconsistencies arise when component models use diﬀerent estimates for the same biological quantity. Where such

713

714

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

parameters are annotated with biological information, tools at least may alert the user, but choosing what value is
most appropriate for the combined model remains a manual task.
2.2. Interoperability between models and experimental data
While the above concepts can make it technically easier to reuse a model in a new context, they do not imply
that doing so is in any way biologically realistic. Models are usually developed to represent particular experimental
setups, with associated parameter values and initial conditions, and may give unexpected results when used outside
that regime. The scientiﬁc questions for which the model is relevant must therefore be determined, and our work
on functional curation [4] aims to address this issue. Eﬀective reuse requires an understanding of a model’s
functional capabilities, which must be conﬁrmed by simulation and comparison against experimental data.
Much of the work required in interfacing component models may also be usefully applied when interfacing
models to experimental data. More fundamentally, however, it is necessary to be able to simulate from the model
exactly the protocol used to generate the data, including pre- and post-processing, so that the results are directly
comparable (c.f. [10]). A particular diﬃculty faced when attempting to characterise a model against multiple
experiments is that many mathematical models, whether available in standard formats or especially provided as
monolithic software, contain not just the model structure (i.e. the mathematical equations describing the biological
function), but also a precise applied experimental protocol, including the parameter values and initial conditions
associated with that protocol. It is therefore necessary to ‘unpick’ the ‘hardwiring’ of the protocol and the precise
parameterisation, so that only the model structure remains. This is often a complex and error-prone procedure.
Recently a new approach has emerged which has the potential to overcome this very limiting problem by
separating an experimental protocol from the model structure. The mathematical model then corresponds much
more directly to the actual biological system, in that it contains representations of all of the necessary functional
biological components, but no experimental intervention. The user must then embed this model within a simulation protocol, which is the direct in silico equivalent of a corresponding wet-lab experimental protocol, providing
all the information necessary to perform an experiment that either measures some property of the system directly
or (more commonly) perturbs the system and measures its response. Composition of such models is then directly
analogous to including additional features of the biology that is being modelled, and is completely decoupled
from the manner in which the model is interrogated. This brings us closer to the goal of coupling at the level of
the biological model. It also reduces the impact of parameter inconsistencies, since parameterisation for a given
scenario should be part of the protocol, not the model.
The emerging community standard for encoding and sharing these simulation protocols is called SED-ML
(Simulation Experiment Description Markup Language [11]), and we are working to incorporate extensions from
our functional curation tools into future versions of this standard. Our additional concepts include an interface
layer between the protocol and the model, which uses the techniques described in Section 2.1 to ensure that model
references from the protocol are well deﬁned and unambiguous. This facilitates the application of a single protocol
to a range of models (e.g. to compare diﬀerent hypotheses). Another key feature is the use of regular n-dimensional
arrays as the basic data type (beyond just 1d vectors or 2d matrices). These allow results from simulations with
arbitrary levels of nested loops to be represented (at least when model outputs are of ﬁxed shape) and manipulated
by the post-processing constructs. The latter aim to balance expressivity with ease of implementation, providing
the maximal utility at least expense to tool developers required to support an exchange standard. Finally, note
that a protocol itself has inputs and outputs. Protocols may be imported, allowing libraries of functionality to be
reused or general experimental setups specialised to particular scenarios. Protocols may also be considered as a
model, allowing them to be nested within further simulation loops.
3. Application to multicellular models
In this section we describe how the protocol and interfacing concepts described above, developed originally
for single cell cardiac electrophysiology applications, may be applied in a diﬀerent modelling ﬁeld, in order
to automate partially a simulation experiment of the type that is routinely performed manually. We begin by
describing the application domain (Section 3.1) and speciﬁc scenario (Section 3.2). In Section 3.3 we describe
how our functional curation system has been extended for use in this new domain, and show the full protocols
used in this case study. Finally, the results of running the protocols are given in Section 3.4.

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

Fig. 1: Setup of the crypt model at quasi-steady state. The left ﬁgure shows a crypt using a Wnt-dependent cell
cycle model; and the right uses a stochastic generation-based cell cycle model. Parameters that vary in the model
are given in the centre and where appropriate default parameter values, which are used, are given in brackets.
Distances are given in terms of nondimensional cell diameters (CDs).
3.1. Multicellular modelling of intestinal crypts
The intestinal epithelium is the most rapidly regenerating surface in the human body. The renewal of this
epithelium is coordinated by millions of test tube shaped glands known as colorectal crypts which are lined with
a layer of cells, and the process is governed by balanced proliferation, migration and death within the crypt.
Cells proliferate in the lower part of the crypt then subsequently migrate towards the intestinal epithelium. The
colorectal crypt forms a model system for simulation of tissue growth and development. Moreover it is the site for
the onset of colorectal cancer. Therefore understanding how it functions, and how this function goes wrong, is of
key interest [12, 13]. For a recent review covering modelling in the crypt see [14].
Here we study a model of the colorectal crypt implemented within the the cell-based side of the Chaste framework. Cell-based Chaste represents a state of the art multiscale multicellular modelling framework which allows
users to develop their own multicellular simulations. Utilising the natural structural unit of the cell, the framework consists of three main scales: the tissue level (macro-scale); the cell level (meso-scale); and the sub-cellular
level (micro-scale), with interactions occurring between all scales. The cell level is central to the framework and
cells are modelled as discrete mobile interacting entities using one of a number of possible modelling paradigms,
including lattice based models (cellular automata and cellular Potts) and oﬀ-lattice
ﬀ
models (cell centre and vertex
based representations). The sub-cellular level concerns numerous metabolic and biochemical processes represented by interaction networks, rendered stochastically or into ordinary diﬀerential
ﬀ
equations. The outputs from
such systems inﬂuence the behaviour of the cell level, aﬀecting
ﬀ
properties such as adhesion, and also inﬂuencing cell mitosis and apoptosis. Tissue level behaviour is represented by ﬁeld equations for nutrient or messenger
chemical concentrations, with cells functioning as sinks and sources. This modular approach enables more realistic behaviour to be considered at each scale [15].
Typical experiments performed with cell-based Chaste include parameter scans over cell-level properties to
see how these inﬂuence the evolution of the population of cells as a whole, and post-processing the resulting
cell-level data (e.g. protein concentrations, cell position and type) to generate population-level statistics (e.g.
distributions of cell types, global birth and death rates) which are required to compare simulations to each other
and to experimental data (see e.g. [16, 15, 12, 17]). As an illustrative virtual experiment, we compare three models
for cell proliferation to see how they are aﬀected
ﬀ
by varying the crypt geometry.
3.2. The models
We utilise a cell centre based model for the crypt described in [16] and [15]. Figure 1 shows the setup of
the model and all parameters that we may vary. Full details can be found in [15], and all parameters used here

715

716

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

are the same unless otherwise indicated in Figure 1. We compare three diﬀerent component models of the cell
cycle, described below. For all three models proliferating cells divide stochastically, where the cell cycle duration
(CCD), measured in hours, is drawn from a uniform distribution.
Uniform Wnt: Here, whether cells may divide is determined by the concentration of the Wnt signalling factor, which decreases up the crypt, so that cells no longer proliferate in the top half of the crypt. While
proliferating the CCD is drawn from a Uniform(10,14) distribution. This simple model is found in [15].
Variable Wnt: This is a generalisation of the above model and consists of two modiﬁcations. Firstly, instead
of the proliferative state of the cell depending on its current position, it is set depending on the position
when the cell is born (therefore cells will only diﬀerentiate on division). The threshold level for this to
occur is still taken to be halfway up the crypt. Secondly the CCD varies with position and is drawn from a
Uniform(mt − 2,mt + 2) distribution, where mt = 24 × (1 − y) is the mean CCD and y is the relative position
of the parent cell up the crypt upon division. Therefore cells at the base of the crypt will will have a mean
CCD of 24 hours and cells in the middle of the crypt will have a mean CCD of 12 hours.
Stochastic Generation Based: Here we have two proliferative cell types: stem and transit. Stem cells reside at
the base of the crypt and divide asymmetrically to produce a stem and a transit cell. Transit cells divide for
a predetermined number of generations (here chosen to be 3), before terminally diﬀerentiating. The CCD
for stem and transit cells are drawn from Uniform(22,26) and Uniform(10,14) distributions respectively.
Details of this model can be found in [16].
3.3. The simulation protocols
The use of functional curation allows experiments on models such as those described above to be run in a
more intuitive, general and robust fashion than has been possible. Previously experiments in cell-based Chaste
had to be deﬁned by writing C++ code to set all parameters expressly and perform post processing. Functional
curation allows a single experiment to be applied to any computational representation of the biological system.
This will enable the determination of which properties are model speciﬁc and which are actually predictions of
the biological system, since it is not generally clear which modelling paradigm is appropriate for each application.
One extension to [4] has been the creation of a textual syntax for our protocol language. This both makes it
easier for users to write protocols (as compared to writing raw XML), and provides a compact readable description, with the potential to be incorporated in publications as we have done here. Our case study consists of two
protocols, the ﬁrst of which is shown in Listing 1. This is responsible for running a single cell-based Chaste simulation and performing some post-processing on the raw division data which it outputs. This protocol is then nested
within the parameter sweep shown in Listing 2. Both protocols are commented to explain individual sections; we
remark on a few key features here.
Unlike the cardiac applications in our earlier paper, where models consisted of ordinary diﬀerential equations
and could be manipulated extensively by the protocol, here a model is in essence an executable program which
must be run in its entirety. We have thus needed to create a new implementation of the interface layer, allowing
model parameters to be set (in appropriate units) from a protocol, prior to execution of the model. Note, however,
that supporting this new application ﬁeld required only one change to the protocol language—the new oneStep
simulation type, which encapsulates running a single execution of the model—a change that had already been
considered for SED-ML in other contexts. The more generic aspects of functional curation still apply: the model
has certain parameters which may be set prior to execution, the execution may be nested within further simulation
loops, and post-processing of the results may be performed. For this example we specify only the simulation
duration and crypt height; other parameters are left at their default values indicated in Figure 1.
Note the ability to reuse (parts of) protocols, particularly for post-processing operations. Standard utility
functions such as std : After are imported; other functions are deﬁned locally to this protocol. Many MathML
operators may be used to perform calculations; the MathML: preﬁx gives access to those which don’t have special
syntax. Extensions for n-dimensional array operations are also demonstrated, for instance: creating an array using
a comprehension as in lines 17 and 35; extracting sub-arrays as well as single values when indexing arrays (e.g.
line 40), and applying functions element-wise to arrays using map as in lines 37 and 46.

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

717

The inner protocol deﬁnes both inputs and outputs. This allows it to be considered as a kind of model by
the outer protocol. This parameter sweep deﬁnes a single loop varying the crypt height variable, which is used
to set the corresponding input of the inner protocol for each run. A subset of the available outputs of the inner
protocol are selected as being of interest; these must have the same shape on each inner run in order to maintain the
regular array data model. Finally, the outputs of the outer protocol, and default line plots which will be generated
automatically by the system, are declared.
Listing 1: Inner protocol for post-processing a single parameterised simulation.

5

10

15

20

25

30

35

40

45

50

55

# The ' o n t o l o g y ' t o u s e f o r r e f e r e n c i n g model v a r i a b l e s
namespace c e l l b a s e d = ' h t t p s : / / c h a s t e . c s . ox . a c . uk / n s s / c e l l b a s e d / 0 . 1 # '
inputs {
# Protocol inputs
num boxes = 10
# The number o f b o x e s t o u s e i n t h e l o c a t i o n h i s t o g r a m
# The h e i g h t o f t h e c r y p t ( i n n o m i n a l c e l l d i a m e t e r s )
c r y p t h e i g h t = 20
e n d t i m e = 2200
# The s i m u l a t i o n end t i m e ( h o u r s )
# The t i m e a t w h i c h t h e s y s t e m i s assumed t o h a v e r e a c h e d q u a s i s t e a d y s t a t e ( h o u r s ) .
# We i g n o r e d i v i s i o n e v e n t s o c c u r r i n g b e f o r e t h i s p o i n t .
s t e a d y s t a t e t i m e = 200
}
# Import the standard l i b r a r y of post−processing operations , using a r e l a t i v e path .
# F u n c t i o n s f r o m t h i s l i b r a r y may t h e n be u s e d by p r e f i x i n g t h e i r names w i t h ' s t d : ' .
import s t d = ' . . / . . / . . / F u n c t i o n a l C u r a t i o n / s r c / p r o t o / l i b r a r y / B a s i c L i b r a r y . xml '
library {
# D e f i n e some e x t r a u t i l i t y f u n c t i o n s
d e f InBox ( l o c , boxLow , boxHigh ) { r e t u r n l o c >= boxLow && l o c < boxHigh }
# E x t e n d an a r r a y by c o p y i n g i t a g i v e n number o f t i m e s a l o n g a n e w l y added d i m e n s i o n
S t r e t c h = lambda a r r a y , l e n g t h , dim : [ a r r a y f o r d i m $ i i n 0 : l e n g t h ]
}
units {
# Units d e f i n i t i o n s for t h i s protocol
h o u r s = 3600 s e c o n d
l e n g t h U n i t s = 10 m i c r o m e t r e ” Nominal c e l l d i a m e t e r s ”
}
tasks {
# The raw s i m u l a t i o n s t o p e r f o r m
# J u s t run t h e c e l l − b a s e d s i m u l a t i o n as−is , s e t t i n g a few parameters a t t h e s t a r t
s i m u l a t i o n sim = o n e S t e p {
modifiers {
at s t a r t s et c e l l b a s e d : end time = end time
at s t a r t s et c e l l b a s e d : c r y p t l e n g t h = c r y p t h e i g h t
a t s t a r t s e t c e l l b a s e d : c e l l s u p = MathML : c e i l i n g ( c r y p t h e i g h t * 2 / MathML : r o o t ( 3 ) )
}
}
}
post−processing {
b o x s i z e = c r y p t h e i g h t / num boxes # y c o o r d i n a t e s s t a r t a t z e r o
b o x l o w s = [ i * b o x s i z e f o r i i n 0 : num boxes ]
b o x h i g h s = [ ( i +1) * b o x s i z e f o r i i n 0 : num boxes ]
c e n t r e s = map ( lambda a , b : ( a+b ) / 2 , b o x l o w s , b o x h i g h s )
# The main s i m u l a t i o n o u t p u t i s t h e 2d a r r a y o f d i v i s i o n d a t a , w i t h 4 c o l u m n s :
# t i m e , x , y , age . We e x t r a c t d i v i s i o n y c o o r d i n a t e s f o r e v e n t s a f t e r t h e g i v e n t i m e .
l o c a t i o n s = s t d : A f t e r ( sim : d i v i s i o n s [ 1 $2 ] , sim : d i v i s i o n s [ 1 $0 ] , s t e a d y s t a t e t i m e )
n u m d i v i s i o n s = l o c a t i o n s . SHAPE [ 0 ]
# F i g u r e o u t w h i c h h i s t o g r a m box e a c h c e l l d i v i s i o n o c c u r r e d i n , and c o u n t them up
l o c a t i o n s e x t = S t r e t c h ( l o c a t i o n s , num boxes , 0 )
# Make a l l t h e e x t a r r a y s t h e same
b o x l o w s e x t = S t r e t c h ( box lows , n um d i v i s i o n s , 1)
# s h a p e : [ num boxes , n u m d i v i s i o n s ]
box highs ext = S t r e t c h ( box highs , num divisions , 1)
i n b o x p a t t e r n = map ( InBox , l o c a t i o n s e x t , b o x l o w s e x t , b o x h i g h s e x t )
# Shape [ n u m b o x e s ]
f r e q s = s t d : RemoveDim ( s t d : Sum ( i n b o x p a t t e r n ) , 1 )
a s s e r t s t d : RemoveDim ( s t d : Sum ( f r e q s ) , 0 ) == n u m d i v i s i o n s
# S a n i t y check
}
outputs {
d i v i s i o n s = sim : d i v i s i o n s
”Raw d i v i s i o n d a t a ”
# Shape [ n u m d i v i s i o n s , 4 ]
freqs
u n i t s d i m e n s i o n l e s s ” Number o f d i v i s i o n s p e r box ” # Shape [ n u m b o x e s ]
centres
units lengthUnits
” Box c e n t r e s ”
# Shape [ n u m b o x e s ]
}
plots {

718

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

plot
}

' Cell division locations ' { freqs against centres }

Listing 2: Outer parameter sweep, which runs the protocol in Listing 1 for a range of crypt heights.
1

6

11

16

21

26

31

inputs {
# The number o f b o x e s t o u s e i n t h e l o c a t i o n h i s t o g r a m
num boxes = 10
h e i g h t s = [ 1 0 , 1 5 , 2 0 , 2 5 , 3 0 ] # The c r y p t h e i g h t s t o sweep o v e r
}
import s t d = ' . . / . . / . . / F u n c t i o n a l C u r a t i o n / s r c / p r o t o / l i b r a r y / B a s i c L i b r a r y . xml '
u n i t s { p e r c e n t = d i m e n s i o n l e s s ”%” }
tasks {
s i m u l a t i o n sweep = n e s t e d {
range c r y p t h e i g h t u n i t s l e n g t h U n i t s v e c t o r h e i g h t s
nests protocol ' C r y p t P r o l i f e r a t i o n . t x t ' {
# Pass through
num boxes = num boxes
crypt height = crypt height
# Set crypt height for t h i s i t e r a t i o n
# Output o f i n t e r e s t , w i t h shape [ num boxes ] f o r a s i n g l e p r o t o c o l run
s e l e c t output f r e q s
} ? # Turn on debug t r a c i n g , s o t h e o u t p u t s o f e a c h r u n a r e s a v e d s e p a r a t e l y
}
}
post−processing {
# Compute box c e n t r e s a s % o f c r y p t h e i g h t , f o r p l o t t i n g a l l c r y p t s on t h e same a x e s
c e n t r e s p e r c e n t = [ ( 1 0 0 / num boxes ) * ( box num + 0 . 5 ) f o r box num i n 0 : num boxes ]
# Normalise d i v i s i o n counts f o r e a s i e r comparison
t o t a l d i v i s i o n s = s t d : S t r e t c h ( s t d : Sum ( sweep : f r e q s , 1 ) , num boxes , 1 )
n o r m f r e q s = map ( lambda n , t o t : n / t o t * 1 0 0 , sweep : f r e q s , t o t a l d i v i s i o n s )
}
outputs {
f r e q s = sweep : f r e q s
u n i t s d i m e n s i o n l e s s ” Number o f d i v i s i o n s p e r box ”
norm freqs
units percent
” P e r c e n t a g e o f d i v i s i o n s p e r box ”
centres percent
units percent
” P e r c e n t a g e h e i g h t up t h e c r y p t ”
heights
u n i t s d i m e n s i o n l e s s ” Crypt h e i g h t ” # Note : f a k e u n i t s f o r d i s p l a y
}
plots {
p l o t ' C e l l d i v i s i o n l o c a t i o n s ' { n o r m f r e q s a g a i n s t c e n t r e s p e r c e n t key h e i g h t s }
}

3.4. Results
Figure 2 shows the results of running the protocol in Listing 2 on crypt models featuring the three diﬀerent
cell-cycle models presented in Section 3.2; the models are otherwise identical. The graphs are produced entirely
automatically by our system, and all code and data required to reproduce them is available from our website.1
By comparing Figure 2(a)-(c) to (d) we can see that the results for the Variable Wnt model are most similar to
the experimental data. A closer ﬁt could be obtained by using the framework to perform a larger parameter sweep
over more of the model parameters (CCDs for example). By looking at individual ﬁgures we can see the eﬀect that
varying crypt height has on the distribution of division events. From Figure 2(a) we see that away from the base
of the crypt the distribution of division events is relatively uniform and independent of crypt height. Crowding at
the crypt base leads to more divisions there since the model does not contain any form of contact inhibition. The
Variable Wnt model is aﬀected most by varying height. Figure 2(b) shows that as the crypt height is increased
there is a greater proportion of division events in the middle region of the crypt. This is due to the increased
number of cells in the lower region of the crypt producing a larger upward force on cells above them, meaning that
a cell which divides in the bottom half of the crypt will be able to divide again when it has moved further up the
crypt. For the generation-based model the absolute distribution of division events is largely independent of crypt
height, since divisions are based on generation count not position. However as we plot the relative distribution of
divisions in Figure 2(c) we see that as the height is increased the distribution becomes more skewed towards the
base of the crypt, as you would expect from considering the relative heights.
1 https://chaste.cs.ox.ac.uk/trac/wiki/PaperTutorials/Wisc2013

719

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

a) Uniform Wnt

b) Variable Wnt
Crypt height
30
25
20
15
10

20

15

10

5

25
Percentage of divisions per box (%)

Percentage of divisions per box (%)

25

Crypt height
30
25
20
15
10

20

15

10

5

0
0

10

20

30

40

50

60

70

80

90 100

0

Percentage height up the crypt (%)

Percentage of divisions per box (%)

20

30

40

50

60

70

80

90 100

Percentage height up the crypt (%)

d) Illustrative experimental data

c) Stochastic Generation-based
30

10

Crypt height
30
25
20
15
10

25

20

15

10

5

0

10

20 30 40 50 60 70 80 90 100
Percentage height up the crypt (%)

Fig. 2: (a)-(c) Distributions of cell division events with diﬀerent
ﬀ
cell cycle models. (d) Illustrative experimental
data on the position of division events within a healthy crypt. The ﬁve zones correspond to dividing the crypt
vertically into ﬁve equally sized segments with zone 1 at the base. Modiﬁed with permission from [18].
4. Discussion
We have shown in the case study above that our ‘functional curation’ concept can fruitfully be applied to modelling ﬁelds beyond cardiac electrophysiology, and that many of the features present in our language for encoding
simulation experiment protocols have utility across application domains. This provides evidence for our conviction that our protocol language constructs represent a good abstraction for describing the generic (as opposed to
unavoidably model-speciﬁc) aspects of simulation deﬁnition, data analysis, post-processing, etc. However, new
applications also provide new challenges for protocol description which may require a shift in approach, and there
is further scope for the model interfacing ideas from our earlier work to be leveraged.
4.1. Coupling models in multicellular tissues
Models in cell-based Chaste are implemented as C++ source code, and a complete model must be constructed
by instantiating classes representing the various submodels and connecting the resulting objects. Our work has
improved upon this by allowing aspects of the experiment being run to be extracted into a protocol deﬁnition, thus
increasing separation of concerns. However, the model itself must still be constructed as a monolithic entity.
Portions of the cell-based models, notably the subcellular reaction networks and cell-cycle models, can be
described with SBML. We are thus investigating using SBML for these submodels, using ontological annotations
and units conversions to interface them with each other and with the higher-level submodels. The situation is
more complex than the cardiac case (where the cell/
l tissue interface is essentially the same for all models) since
the models in question are much more heterogeneous. A cell may potentially contain many diﬀerent
ﬀ
signalling
networks for instance, represented by diﬀerent
ﬀ
SBML descriptions, which may interact wherever they contain a

720

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

common protein or other molecule in the same cellular compartment. Many diﬀerent chemicals may also be used
to communicate externally to the cell, and hence form part of the interface both to the tissue level model, and with
neighbouring cells. The interfacing framework we have described can handle many of these complexities, and
will be more ﬂexible than at present, especially in being more scalable as new submodels are developed.
For the multicellular aspects of the models, no markup language standard currently exists, although work
is progressing on SBML extension packages that may be suitable for some cases. Again, the wide variety of
modelling approaches makes deﬁning a set of standards that can encode all the variations a huge challenge.
Indeed, it is likely that there will always be a need for fully ﬂexible general purpose programming languages in
deﬁning some kinds of models, since novel models may require features not thought of in any standard.
However diﬀerent component models are deﬁned, specifying the particular combination and connections to
use in a given experiment from a protocol description requires further work, especially to do so in a concise
and user-friendly manner. For example, we want to be able to write a protocol that speciﬁes “use a cell-centrebased mechanics model, with these cell types in these geometric regions, using these subcellular models in those
regions” and be able to specify parameter values for each submodel in diﬀerent regions. This will require at
the least adding some concept of space to the protocol language, and graphical tools for user-friendly problem
deﬁnition. However, the use of ontology terms for specifying parameters and matching up submodel interfaces,
with automatic units conversion where appropriate, will still be relevant.
One open question is how best to map parameters deﬁned at the level of the biological model to relevant
quantities in the mathematical or computational model. As a concrete example, one of the parameters to the Wntbased cell-cycle models in the case study above is the threshold Wnt signal level below which a cell will no longer
divide. There is no direct analogue for this parameter in the third cell-cycle model. However, since the Wnt signal
is speciﬁed (in another submodel) to reduce linearly with height up the crypt, the threshold level can be converted
to a threshold height. Assuming that each successive generation of cells lies approximately one cell diameter
further up the crypt, this height can then be converted to a generation number at which cells will no longer divide,
which is the parameter that has the same behavioural eﬀect. Performing such an analysis automatically is nontrivial; it is likely that users will need to specify ‘mini models’ which encode these transformations. Given a library
of such transformer models, tools may be able to select a suitable transformation (or chain of transformations)
automatically based on the submodels being coupled and the parameters being set from the protocol.
4.2. Extensions and alternatives for describing protocols
Other implications for protocol languages arise from this study. Notably, the restriction of the core datatype
to regular n-dimensional arrays poses diﬃculties for simulations involving cell birth and death, since many of
the natural outputs will therefore not have the same shape throughout a timecourse simulation. In some cases
it is possible to work around this limitation through judicious use of post-processing within a nested protocol,
as we have done above. However this is often not possible, and so support for ‘ragged arrays’ will be required,
wherein sub-arrays do not have to have the same shape (for example, a vector of vectors of lengths 2, 3, 5, and 11
would be permitted). Such a structure is supported by scientiﬁc data formats such as HDF5 [19], and hence is not
necessarily an unreasonable obstacle for implementations of a protocol language.
Another feature that is required if protocol descriptions are to play a central role in model development is the
ability to specify how to ﬁt models to experimental data. This is a natural extension, since a simulation protocol
should correspond to the experimental protocol used in obtaining data [10], and so the protocol outputs should
correspond directly to the experimental data, and hence be well suited for being incorporated in an objective function. Complexities arise due to the wide variety of parameter ﬁtting approaches, and the diﬃculty of interfacing
to experimental data formats. These issues are currently being discussed by the SED-ML community, and others
are welcome to contribute on the mailing list.2
5. Conclusions
The above case study highlights two themes which we believe are central to increasing the utility of computational modelling through improved interoperability. The ﬁrst is the use of domain speciﬁc languages to extract
2 https://lists.sourceforge.net/lists/listinfo/sed-ml-discuss/

Jonathan Cooper and James Osborne / Procedia Computer Science 18 (2013) 712 – 721

high level descriptions of both models and simulation protocols from computational codes. This separation of
concerns can provide a clearer description of the essential concepts, without being cluttered with implementation
details. It also enables assumptions made in the process of converting a biological hypothesis to a computational
model to be made explicit. The second theme is the need for semantically rich interfaces between component
models, protocols, and data, in order to build, validate, and compare multiscale models. Connections made at the
level of the ‘biological model’ can avoid conﬂicts from inconsistencies arising due to diﬀerences in the ways in
which diﬀerent components have been constructed as mathematical or computational models. While in this paper
we have considered only examples of physiological modelling, we believe these general principles, and indeed
the broader framework of functional curation, can be applied much more widely within computational science.
However, it is clear that there is much work still needed on these aspects and others. In particular, implementing new domain speciﬁc languages for areas where no standards yet exist is considerably more challenging than
coding up an ad-hoc solution, especially for research scientists with little formal training in computer science. The
ﬂexibility of general purpose languages will always be needed to support novel research. Nevertheless, there is a
need both for improved tools to make separating aspects of complex models easier, and training for scientists to
think about computational modelling in a diﬀerent way. We hope that our work will help with the ﬁrst problem,
while eﬀorts such as Software Carpentry [20] address the second.
References
[1] National Research Council, Assessing the Reliability of Complex Models: Mathematical and Statistical Foundations of Veriﬁcation,
Validation, and Uncertainty Quantiﬁcation, The National Academies Press, 2012.
[2] J. Pitt-Francis, P. Pathmanathan, M. Bernabeu, R. Bordas, J. Cooper, A. Fletcher, G. Mirams, P. Murray, J. Osborne, A. Walter, S. Chapman, A. Garny, I. van Leeuwen, P. Maini, B. Rodr´ıguez, S. Waters, J. Whiteley, H. Byrne, D. Gavaghan, Chaste: A test-driven approach
to software development for biological modelling, Comput Phys Commun 180 (12) (2009) 2452–2471.
[3] J. Cooper, A. Corrias, D. Gavaghan, D. Noble, Considerations for the use of cellular electrophysiology models within cardiac tissue
simulations, Prog Biophys Mol Biol 107 (1) (2011) 74–80. doi:10.1016/j.pbiomolbio.2011.06.002.
[4] J. Cooper, G. Mirams, S. Niederer, High throughput functional curation of cellular models, Prog Biophys Mol Biol 107 (1) (2011) 11–20.
doi:10.1016/j.pbiomolbio.2011.06.003.
[5] A. Garny, D. Nickerson, J. Cooper, R. W. dos Santos, S. McKeever, P. Nielsen, P. Hunter, CellML and associated tools and techniques,
Phil Trans Roy Soc A 366 (1878) (2008) 3017–3043. doi:10.1098/rsta.2008.0094.
[6] M. Hucka, A. Finney, B. Bornstein, S. Keating, B. Shapiro, J. Matthews, B. Kovitz, M. Schilstra, A. Funahashi, J. Doyle, H. Kitano,
Evolving a lingua franca . . . : The Systems Biology Markup Language (SBML) project, Systems Biology 1 (1) (2004) 41–53.
[7] W3C RDF Working Group, Resource Description Framework, http://www.w3.org/RDF/ (2004).
[8] J. R. Terkildsen, S. Niederer, E. J. Crampin, P. Hunter, N. P. Smith, Using Physiome standards to couple cellular functions for rat cardiac
excitation–contraction, Exp Physiol 93 (7) (2008) 919–929. doi:10.1113/expphysiol.2007.041871.
[9] J. Cooper, S. McKeever, A model-driven approach to automatic conversion of physical units, Softw Pract Exper 38 (4) (2008) 337–359.
doi:10.1002/spe.828.
[10] VPH-FET Consortium, VPH-FET Research Roadmap, Ch. 4, https://www.biomedtown.org/VPHFET/reception/ (Nov 2011).
[11] D. K¨ohn, N. Le Nov`ere, SED-ML — an XML format for the implementation of the MIASE guidelines, in: Computational Methods in
Systems Biology, Vol. 5307 of LNCS, Springer Berlin / Heidelberg, 2008, pp. 176–190. doi:10.1007/978-3-540-88562-7 15.
[12] S. J. Dunn, P. Appleton, S. N. Nelson, I. N¨athke, D. Gavaghan, J. Osborne, A two-dimensional model of the colonic crypt
accounting for the role of the basement membrane and pericryptal ﬁbroblast sheath, PLoS Comp. Biol. 8 (2012) e1002515.
doi:10.1371/journal.pcbi.1002515.
[13] G. T. Eisenhoﬀer, P. D. Loftus, M. Yoshigi, H. Otsuna, C.-B. Chien, P. A. Morcos, J. Rosenblatt, Crowding induces live cell extrusion to
maintain homeostatic cell numbers in epithelia, Nature 484 (2012) 546 – 549.
[14] G. De Matteis, A. Graudenzi, M. Antoniotti, A review of spatial computational models for multi-cellular systems, with regard to intestinal
crypts and colorectal cancer development, Journal of mathematical biology (2012) 1–54.
[15] J. M. Osborne, A. Walter, S. K. Kershaw, G. R. Mirams, A. G. Fletcher, P. Pathmanathan, D. Gavaghan, O. E. Jensen, P. K. Maini, H. M.
Byrne, A hybrid approach to multi-scale modelling of cancer, Phil. Trans. (2010) 5013–5028.
[16] I. M. M. Van Leeuwen, G. R. Mirams, A. Walter, A. Fletcher, P. Murray, J. Osborne, S. Varma, S. J. Young, J. Cooper, J. Pitt-Francis,
L. Momtahan, P. Pathmanathan, J. P. Whiteley, S. J. Chapman, D. J. Gavaghan, O. E. Jensen, J. R. King, P. K. Maini, S. L. Waters, H. M.
Byrne, An integrative computational model for intestinal tissue renewal, Cell Prolif. 42 (2009) 617 – 636.
[17] G. Mirams, A. Fletcher, P. Maini, H. Byrne, A theoretical investigation of the eﬀect of proliferation and adhesion on monoclonal
conversion in the colonic crypt, Journal of Theoretical Biology 312 (7) (2012) 143–156. doi:10.1016/j.jtbi.2012.08.002.
[18] W. Wong, N. Mandir, R. Goodlad, B. Wong, S. Garcia, S. Lam, N. Wright, Histogenesis of human colorectal adenomas and hyperplastic
polyps: the role of cell proliferation and crypt ﬁssion, Gut 50 (2) (2002) 212–217.
[19] The HDF Group, Hierarchical data format version 5, http://www.hdfgroup.org/HDF5 (2000).
[20] G. Wilson, Software carpentry: Getting scientists to write better code by making them more productive, Comput Sci Eng 8 (6) (2006)
66–69.
URL http://www.software-carpentry.org/

721

