Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 2424 – 2427

2013 International Conference on Computational Science

Effective Slot Selection and Co-allocation Algorithms for
Economic Scheduling in Distributed Computing
Victor Toporkov ,*, Dmitry Yemelyanova, Alexey Tselishchevb
a

National Research University
, ul. Krasnokazarmennaya 14, Moscow, 111250 Russia,
E-mail: ToporkovVV@mpei.ru, yemelyanov.dmitry@gmail.com
b
CERN (European Organization for Nuclear Research), CERN CH-1211 Ge
E-mail: Alexey.Tselishchev@cern.ch

Abstract
In this work, we introduce slot selection and co-allocation algorithms for parallel jobs in distributed computing with nondedicated resources. The job launch requires a co-allocation of a specified number of slots starting synchronously. The
challenge is that slots associated with different CPU nodes of distributed computational environments may have arbitrary
start and finish points that do not match. Some existing algorithms assign a job to the first set of slots matching the resource
request without any optimization (the first fit type), while other algorithms are based on an exhaustive search. The novelty
of the proposed approach consists of allocating alternative sets of slots. It provides possibilities to optimize job scheduling.
The Authors.
Authors. Published
Published by
by Elsevier
Elsevier B.V.
B.V. Open access under CC BY-NC-ND license.
© 20133 The
Selection and
and/or
under
responsibility
of organizers
the organizers
of 2013
the 2013
International
Conference
on Computational
Selection
peerpeer-review
review under
responsibility
of the
of the
International
Conference
on Computational
Science
Science
Keywords: distributed computing; economic scheduling; resource management; slot; job; batch

1. Introduction
Economic mechanisms are used to solve tasks like resource management and scheduling of jobs in a
transparent and efficient way in distributed environments such as utility Grid and cloud computing [1, 2]. The
simultaneous satisfaction of various application optimization criteria submitted by independent users in
resource broker models [1, 2] is not possible due to several reasons and also can deteriorate such quality of
service rates as total execution time of a sequence of jobs or overall resource utilization. Another model is
related to virtual organizations (VO). VOs naturally restrict the scalability, but uniform rules for allocation and
consumption of resources make it possible to improve the efficiency of resource usage and to find tradeoffs

*

Corresponding author. Tel. +7-495-362-7145; fax: +7-495-362-5506.
E-mail address: ToporkovVV@mpei.ru.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.415

Victor Toporkov et al. / Procedia Computer Science 18 (2013) 2424 – 2427

2425

between contradictory interests of different participants. In [3], we have proposed a hierarchical model which is
functioning within a VO. During each scheduling cycle the sets of available slots are updated based on the
information from local resource managers and one needs choosing a slot combination that would be the
efficient or optimal in terms of the whole job batch execution. Moab scheduler [4] implements backfilling and
during a slot search does not take into account any additive constraints such as the minimum required storage
volume or the maximum allowed total allocation cost. NWIRE system [2] performs a slot allocation based on
the user defined efficiency criterion under the maximum total execution cost constraint. However, the
optimization occurs only on the stage of the best found offer selection. In our previous works [5, 6], an
algorithm for slot selection AMP (Algorithm based on Maximal job Price) with linear complexity was
proposed. This algorithm performs the search for the first fitting slot window without any optimization.
In this paper, we propose algorithms for effective slot selection based on user defined criteria that feature
linear complexity on the number of the available slots during the job batch scheduling cycle. The novelty of the
proposed approaches consists of allocating a number of alternative sets of slots. The rest of the paper is
organized as follows. Section 2 introduces a general scheme and its implementations for searching slot sets.
Section 3 contains simulation results. Section 4 summarizes the paper.
2. General scheme and slot selection algorithms
In this section we introduce a general scheme of an Algorithm searching for Extreme Performance (AEP)
and its implementation examples.
AEP-scheme for an optimal slot window search by the specified criterion crW
Input: slotList a list of available slots
job -a job for which the search is performed
Output: bestWindow a window with the extreme criterion crW value
slotList = orderSystemSlotsByStartTime();
for each slot in slotList {
if(!properHardwareAndSoftware(slot))
continue;
// The slot does not meet the requirements
windowSlotList.add(slot);
windowStartTime = slot.startTime;
for each wSlot in windowSlotList {
minLength = wSlot.Node.getWorkingTimeEstimate(job);
if((wSlot.endTime windowStart) < minLength)
windowSlotList.remove(wSlot); //wSlot cannot form a window on the current and future steps
}
if(windowSlotList.size >= job.nodesNeed){
curWindow = getBestWindow(windowSlotList);
crW = getCriteriaValue(curWindow);
if(crW > maxCriteriaValue){
maxCriteriaValue = crW;
bestWindow = curWindow;
}
}
}
The task is to scan a list of m available slots and to select a window W of n parallel slots with a length of
the required resource reservation time. In addition, one can define a criterion crW on which the best matching

2426

Victor Toporkov et al. / Procedia Computer Science 18 (2013) 2424 – 2427

window is chosen. The expanded window of size m
ordered by a
non-decreasing start time. At each step any combination of n slots inside it ( n m ) can form a window that
meets all the requirements to run the job. The effective on the specified criterion window of size n is selected
from these m slots and compared with the results in the previous steps. By the end of the slot list the only
solution with the best criterion crW value will be selected. Finally, a variable bestWindow will contain an
optimal window by the given criterion. Thus AEP is naturally an extension of AMP, and AMP is the particular
case of the whole AEP scheme performing only the start time optimization.
For the proposed AEP efficiency analysis the following implementations were added to the simulation
model [3]: AMP the algorithm for searching alternatives with the earliest start time; minFinish
the
algorithm for searching alternatives with the earliest finish time; minCost the algorithm for searching a single
alternative with the minimum total allocation cost on the scheduling interval; minRuntime this algorithm
performs a search for a single alternative with the minimum execution runtime; minProcTime this algorithm
performs a search for a single alternative with the minimum total node execution time; Common Stats, AMP
(further referred to as CSA) the scheme for searching multiple alternatives using AMP.
3. Experimental studies of slot selection algorithms
In each experiment a generation of the distributed environment that consists of 100 CPU nodes was
performed. The performance rate for each node was generated as a random integer variable in the interval [2;
10] with a uniform distribution. The resource usage cost was formed proportionally to their performance with
an element of normally distributed deviation in order to simulate a free market pricing model [1-3]. The level
of the resource initial load with the local and high priority tasks at the scheduling interval [0; 600] was
generated by the hyper-geometric distribution in the range from 10% to 50% for each CPU node. Based on the
generated environment the algorithms performed the search for a single initial job that required an allocation of
5 parallel slots for 150 units of time. The maximum total execution cost according to user requirements was set
to 1500.
The results of the 5000 simulated scheduling cycles are presented in Fig. 1. Each full AEP-based scheme
was able to obtain the best result in accordance with the given criterion: start time (Fig. 1 (a)); runtime (Fig. 1
(b)); finish time (Fig. 1 (c)); CPU usage time (Fig. 1 (d)). Besides, a single run of the AEP-like algorithm had
an advantage of 10%-50% over suitable alternatives found by AMP with a respect to the specified criterion.
According to the experimental results, on one hand, the best scheme with top results in start time, finish time,
runtime and CPU usage time was minFinish. Though in order to obtain such results the algorithm spent almost
all user specified budget (1464 of 1500). On the other hand, the minCost scheme was designed precisely to
minimize execution expenses and provides 43% advantage over minFinish (1027 of 1500), but the drawback is
a more than modest results by other criteria. The CSA working time is incomparably longer than AEP-like
algorithms. The minProcTime scheme stands apart and represents a class of simplified AEP implementations
with a noticeably reduced working time. And though the scheme compared to other considered algorithms, did
not provide any remarkable results, it was on the average only 2% less effective than the CSA scheme by the
dedicated CPU usage criteria. At the same time its reduced complexity and actual working time allow to use it
in a large wide scale distributed systems when other optimization search algorithms prove to be too slow.
4. Conclusions and future work
In this work, we address the problem of slot selection and co-allocation for parallel jobs in distributed
computing with non-dedicated resources. The advantage of AEP-based algorithms over the general CSA
scheme was shown for each of the considered criteria. In our further work we will refine resource co-allocation
algorithms in order to integrate them with scalable co-scheduling strategies [3].

Victor Toporkov et al. / Procedia Computer Science 18 (2013) 2424 – 2427

2427

( )

(b)

(c)

(d)

Fig. 1. Simulation results: (a) start time; (b) runtime; (c) finish time; (d) CPU usage time

Acknowledgements
This work was partially supported by the Council on Grants of the President of the Russian Federation for
State Support of Leading Scientific Schools (SS-316.2012.9), the Russian Foundation for Basic Research (grant
no. 12-07-00042
-pedagogical cadres of
6).
References
[1] Garg SK, Yeo CS, Anandasivam A, Buyya R. Environment-conscious scheduling of HPC applications on distributed cloud-oriented
data centers. J of Parallel and Distributed Computing 2011; 71:6, p. 732-749.
[2] Ernemann C, Hamscher V, Yahyapour R. Economic scheduling in Grid computing. 8th Job Scheduling Strategies for Parallel
Processing. In: Feitelson DG, Rudolph L, Schwiegelshohn U, editors. LNCS, Heidelberg: Springer, 2002; 2537, p. 128-152.
[3] Toporkov V, Tselishchev A, Yemelyanov D, Bobchenkov A. Composite scheduling strategies in distributed computing with nondedicated resources. Procedia Computer Science 2012; 9, p. 176-185.
[4] Moab Adaptive Computing Suite, http://www.adaptivecomputing.com/products/moab-adaptive-computing-suite.php.
[5] Toporkov V, Bobchenkov A, Toporkova A, Tselishchev A, Yemelyanov D. Slot selection and co-allocation for economic scheduling in
distributed computing. In: Malyshkin V, editor. LNCS, Heidelberg: Springer, 2011; 6873, p. 368 383.
[6] Toporkov V, Toporkova A, Bobchenkov A, Yemelyanov D. Resource selection algorithms for economic scheduling in distributed
systems. Procedia Computer Science 2011; 4, p. 2267-2276.

