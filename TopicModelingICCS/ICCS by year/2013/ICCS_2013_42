Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 290 – 298

International Conference on Computational Science, ICCS 2013

GPU accelerated 3D object reconstruction
Marcin Denkowskia
a Maria

Curie-Sklodowska University, Institute of Computer Science, Lublin, Poland

Abstract
Creation of a virtual model, based on a photograph or video images, becomes more and more popular nowadays. Traditionally, these models were obtained using 3D modelling applications or by laser range scanners and other devices that project
structured light onto the object. This is a very time-consuming process and the achievable level of detail and realism is limited.
We present a real-time modelling system for creating such virtual object models. This system uses voxels as the smallest
editable units and is able to generate 3D color convex hull-model based on photo or video images taken around the object.
Virtual model can be represented as a volumetric model and a triangulated mesh which constitutes closed isosurface of
this volumetric model. Our approach utilizes Graphical processor unit (GPU) and the CUDA to accelerate whole process of
reconstruction, making it possible to perform calculations in real-time.
Keywords:
3D Reconstruction, Volume Reconstruction, GPGPU

1. Introduction
Virtual model, in general is a model of a real, physical object. That model is a digital description of a real
object, usually represented in the simpliﬁed form. However, such model can be successfully used in computer
simulations or virtual reality and modern computer hardware is developed enough to allow the generation of
complex graphics, so that the rendered virtual world was almost indistinguishable from the reality.
In recent years, there have been many solutions discussed automatically sampling physical world and creating
virtual, digital models. There are many reconstruction methods presented in literature, either semi-automatic in
which the operator deﬁnes the characteristic points and the model is automatically generated and textured [1] as
well as fully automatic method [2]. Currently, the most popular technique of reconstruction of the spatial models
is creation of a polygon mesh based on static or video images by marking characteristic features in the image
and search for these features on subsequent images in the sequence [3, 4]. A relatively new technique of creation
of three-dimensional models represented via volumetric images resembles carving-like methods (called Space
Carving or Sculpting) [5, 6, 7]. Another way to generate a spatial model is the use of a single camera, and the
recovery of the third dimension from depth of ﬁeld. In these methods usually discrete wavelet transform is used to
combine several images taken with diﬀerent depth of ﬁeld into one composite and determine the distance from the
camera to a speciﬁc parts of an object. This type of reconstruction are presented by Wedekind in [8] for modeling
of microscopic objects and Tsubaki [9] and Zhong [10] who use it for modeling in zoology. More recently, a
∗ Corresponding

author.
E-mail address: marcin.denkowski@umcs.lublin.pl.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.192

291

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

new technique of reconstruction based on depth camera becomes more and more popular [11]. That depth camera
(for example PrimeSense PS1080 Chip [12]) uses computational algorithms to decipher the received light coding
infrared patterns, in order to produce a VGA size depth image of a scene. Such depth image gives the ability to
observe a scene in three dimensions which allows to obtain spatial shapes of particular objects.
Method presented in this article combines methods similar to sculpting with point clouds triangulation algorithms into a fully reconstructed object mesh. It also utilizes GPU to perform computations in almost real time.
Main objective of the method is to create a virtual model of an object based on its images or video sequence taken
around the object by an unstabilized camera. Generated virtual model can be presented as a volumetric color
model and a triangulated textured mesh.
2. Method assumptions
The main objective of the presented method is to generate a model V of a real object Θ on the basis of a
sequence of images of the object Θ taken around the object. The model itself will be represented in two ways:
(1) using a three-dimensional image (volumetric model) V, and (2) using spatial closed triangle mesh Σ which
is an isosurface of the volume V. The method is also able to designate a color information to all voxels of the
volumetric model V and to all relevant triangle mesh vertices.
Input data for the whole method are series of images of modeled object. These images are taken with a digital
camera around the object with constant distance to the object. The object is located in a center of the scene and
its position is ﬁxed. Imaging parameters of camera are ﬁxed (except focus point) and the camera can be moved
in XY plane along circle line with pointing into the center of the object. Important assumption of the method is
that there are some small shifts of the camera position from the ideal path allowed as well as small deviations
from correct line of imaging. This assumption is necessary to compensate deviations resulting from unstabilized
camera, see Fig. 1.

Fig. 1. Schema of acquisition of subsequent images taken around the object. Blue circle line determines ideal camera trajectory, red line
determines interpolated real positions of the camera in subsequent frames. The center of the coordinate system overlaps with the center of the
object.

Each input image is therefore an object Θ projection onto that image S = π(Θ). If the input image is treated as
an outline (silhouette) of the object, its reprojection π−1 (S i ), in general, is included in projection frustum. Product
of all of that reprojections of the input images creates convex hull of the input model:
n

V=
i=0

pi−1 (S i )

(1)

292

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

which is an approximation of the object Θ in the sense that Θ ⊂ V. In the literature [13, 14] argued that Θ is
the best approximation of V when n approaches inﬁnity, but the model V will always have a greater volume than a
real object. Matusik in [15] suggested that the shape of the model V coincides to Θ much faster and at the amount
of input images n > 15 the volume of the generated model V is only about 5% greater than the object Θ.
Taking the above assumptions, the problem of modeling the three-dimensional columetric image of the object
will consist of several steps:
1. Alignment of input images.
2. Generation of binary volumetric model V.
3. Colour the model V.
4. Filtration of the model V.
5. Generation of isosurface S from volumetric model V.
6. Colour and processing vertices of triangles mesh S .
3. Alignment of input images
Considered input image sequences consist of several photographic images taken around the object. According
to the assumption of non-stabilized sequence, orientation of the camera relative to the ideal trajectory have been
varying. Angular distances between successive shots were also uneven.
To overcome this disadvantage an author’s method proposed in [16] has been used. The idea of this method is
to register sequence of images by calculating the optimal positions and orientations of a successive images in that
sequence. In general, this method of image aligning can be presented in several steps:
1. A simpliﬁed three-dimensional surface model is created based on two images (selected manually) representing orthogonal projections of the object.
2. The process of matching these two images to a 3D model optimizes virtual camera parameters (such as
distance, ﬁeld of view and orientation) in order ﬁt simulated images to the original frames.
3. A new sequence of images around the simulated object is generated. The number of images in this sequence
will determine the accuracy of the aligning method and allows to ﬁnd the best matching pairs of images from
the collection of simulated and original ones. The goal of this step is to ﬁnd the most similar frames for all
originals out of all simulated pictures. To obtain this candidates are search using energy map paths.
4. For every selected pair of images, the original image from the sequence is aligned to its simpliﬁed simulated
counterpart so that their position and orientation are as similar as possible.
As a result, every frame of a sequence is stabilized and their position in polar coordinates is determined.
4. Volume modeling
After aligning the input images I their binary masks β(I) are created. These masks constitutes a silhouettes
of the images I Each input mask β(I) with their α angle (calculated in the calibration procedure) is a projection
pi(Θ) of a model to a given image. Any such projection is included in the frustum (see Fig. 2) and the product of
the reprojections π−1 (β) will create considered model V.
First, a three-dimensional regular grid Ω (volumetric image) is created with dimensions X × Y × Z representing
the space for the model V. The whole space is ﬁlled with binary ’One’. Then, each point of the input masks βi is
projected onto that space Ω.
If any point in the mask β is out of the silhouette all the points lying on the projection line within the space Ω
are set to binary ’Zero’. This procedure is repeated for each input mask βi taking the position of this mask relative
to the space Ω into consideration. Fig. 5 shows the above procedure on the schema.
Numerical procedure for sculpting the model V from the space Ω will require iteration at all points of threedimensional volume and projecting them on all of the input masks βi according to their angles relative to the model
V. As a result of the above procedure, in the space Ω a binary object model will be created. It is worth noting
that every crossection of such model in the XZ plane is a convex hull. Listing 4.1 shows the whole procedure in a
pseudocode.

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

(a)

(b)

Fig. 2. Perspective sculpting of subsequent silhouettes Ii in the space Ω. (a) The image I1 is projected onto the space Ω cutting the pyramid
V1 = π−1 (I1 ). (b) The second input silhouette image I2 cut its own pyramid V2 = π−1 (I2 ). The model V is created by a logical product of the
all pyramids V = V1 V2 ... Vn .

Listing 4.1. Algorytm generacji binarnego modelu wolumetrycznego V(x, y, z).
PERSPECTIVE MAP(x, y, z, d, α):
1
n := [cos(α), 0, sin(α)]
2
v := [x, 0, z]
3
cos α sin α
q := v
4
− sin α cos α
d · qx
return xI :=
5
qy + d
d·y
yI :=
6
(v ◦ n) + d
7
8
9
10
11
12
13
14
15

MAIN():
for each image I(α):
βα :=GENERATE MASK(I(α))
for each voxel v(x, y, z) ∈ Ω:
for each angle α of input mask βα :
if v(x, y, z) == 1
[xI , yI ] :=PERSPECTIVE MAP(x, y, z, d, α)
if βα (xI , yI ) == 0
v(x, y, z) := 0

The next step of model generation procedure will give the information about their colors to all voxels of
volumetric model V, which lie on the surface of the model V. Proposed method requires to designate a normal
vector n(x, y, z) for each voxel v(x, y, z) of the model V. That vector n(x, y, z) allows to determine the input image
Ii , such that the projection of a speciﬁc point of the image Ii (u, v) hits the considered voxel v(x, y, z). Listing 4.2
shows the whole procedure in a pseudocode.
If, as a result of this process, any voxels lying on the surface of the model V are still uncolored, their value
is interpolated using the color values of neighboring voxels. Such procedure will give a particular color to all the
points lying on the surface of the model V. Fig. 3 shows examples of colored volumetric models.

293

294

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

Fig. 3. Examples of colored models rendered using volumetric rendering without any subvoxel interpolation.

Listing 4.2. An algorithm of voxel colorization.
COLOR(I, x, y):
1
if (n ◦ nXZ == 0)
2
return -1
3
else
if (β(x, y) == BACKGROUND )
4
return
-1
5
else:
6
return I(x, y)
7

8
9
10
11
12
13
14
15
16
17

MAIN():
contour extraction:
κ(V) := V − (V B)
for each voxel v s (x, y, z) ∈ κ (V):
∂v s ∂v s ∂v s
G(v) := ∇{v s (x, y, z)} :=
,
,
∂x ∂y ∂z
r
r
r
G(x, y, z)
wg
n :=
|G(x, y, z)|
x=−r y=−r z=−r
for each I(nI ):
if max(n ◦ nI )
I p = I(nI )
[xI , yI ] := PERSPECTIVE MAP(xv , yv , zv , d, α)
vRGB (x, y, z) := COLOR(I p , xI , yI )

5. Isosurface generation
Further processing of volumetric model V is to prepare it for the generation of isosurface S with marching
cubes algorithm [17]. The ﬁrst step is to give the color value to the voxels lying a little deeper under the surface
of the model V. The depth at which the color values are assigned is diﬃcult to estimate and should be treated as
a free parameter. The fastest way to transmit the color of the voxels lying on the surface of the model V to the
voxels in deeper layers is to interpolate their color layer by layer. of the model V for each new surface will be
interpolated into the model already colored voxels from the surface of one shallow.

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

To generate isosurface Σ of volumetric model V an existing implementation on CUDA of the marching cube
algorithm was used [18]. Mesh of triangles generated directly from the binary volumetric model suﬀers for a
typical artifacts that results in a lack of smoothness (the blocky eﬀect) on perpendicular sides. Applying a lowpass ﬁlter (blurring) to volumetric model V signiﬁcantly improves the ﬁnal appearance of the mesh generated by
the algorithm of the marching cube, but also blurs important edges and details of the the model. Better results
can be achieved using adaptive low-pass ﬁlters such as bilateral or anisotropic ﬁlter in their three-dimensional
versions. Unfortunately, both ﬁlters are computationally expensive complexity increasing the total time of model
generation.
Colorizing of a generated triangle mesh is another problem. The best results could be achieved by mapping the
input images to a texture of the existing mesh. However, calculation of the texture coordinates for each triangle
and selection of the proper input image is not a trivial task. Author opted for a simpler solution to designate a
color to the all vertices of a triangle mesh by linear sampling the colors from volumetric model V.
Slight smoothing of triangle mesh by applying the smoothing algorithm proposed by Taubina, Zhang and
Golub in [19] is the ﬁnal step.
Fig. 4, 5 and 6 present several examples of reconstructed models represented by a triangulated mesh.
6. Experimental results
In order to test presented method a several image sequences have been created in accordance with the method
assumptions. In one case, an object was large physical size (with a length of more than 4 meters) imaged from a
small distance using a wide-angle lens, resulting in a sequence of images with a wide perspective. In six cases,
there were small objects (sizes from about 40mm to about 200mm) photographed with a narrow-angle lens. Two
sets have been artiﬁcially generated for the synthetic tests using Blender R 3D software. The number of images in
a sequence has been ranging from 16 to 72

Fig. 4. A sample set of input images (top) and the ﬁnal model generated in the form of a colored and shaded triangle mesh (bottom).

Generally, models generated from photographs of small objects taken with long-focus lenses (see Fig. 4 and 6)
gives a much more coherent models than the models generated from images taken with a wide perspective. The
eﬀect of the wide perspective and model generated on the basis of these images is shown on Fig. 7. Due to the
assumptions of a method it is impossible to correctly reproduce the geometry of the cube on the top and bottom
sides.
It is also obvious that the quality of the model heavily depends on the amount of input images. The absolute
minimum are two images of the object from perpendicular projections. In this case, however, is not possible to
give a full color to the entire model. For the fully colored model four shots taken at 90 degrees are needed.
The most time-consuming process is the generation of volumetric model V and its colorization. However,
despite the large computational complexity of the solution this problem can be successfully parallelized. In both

295

296

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

Fig. 5. A sample set of input images and the ﬁnal generated model of a human ﬁgure. An example of erroneous coloration caused by obstructed
surface by another surface in the middle of the bottom row.

Fig. 6. Examples of two ﬁnal models generated on the basis of photographs of small objects.

cases, model generation and coloring, voxels of the model can be computed independently from each other and
thus all the computation performed on them can be implemented in parallel.
Such parallel implementation of these algorithms for generating a binary model and coloring it allows the
use of modern multi-core processors and multi-processor graphics cards. Table 4 shows the estimated time of
generation of the binary model for the two architectures: (1) Intel I7 950 and (2) GeForce GTX 560.
For multithreaded computations performed on the CPU processor an OpenMP API was used [20], while for
the calculations using the GPU an NVIDIA CUDA platform was used [21]. Fig. 8 shows the data from Table 1 in
a graph form.
The results indicate the high scalability of these algorithms. In the case of small images (around 128 × 128 ×
128) calculated on the GPU, you can get a system for real-time imaging at a few frames per second. The presented
algorithm is also dependent on the number of input images in a linear way (see Fig. 8(b)). Summarizing, empirical

297

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

(e)

(a)

(b)

(c)

(d)

Fig. 7. Reconstruction distortions of a cube model caused by too wide perspective on the input images (e). (a), (c) and (d) perspective model
projection, (b) orthogonal model projection.

Table 1. Comparison of diﬀerent volume size and time of the model generation for CPU processor as well as GPU processor.
Volume resolution
Volume size [KB]
CPU (x1) [s]
CPU (x4) [s]
128 × 128 × 128
2048
6.32
2.11
256 × 128 × 256
8192
21.20
5.03 4
256 × 256 × 256
16384
42.18
11.01
512 × 256 × 512
65536
146.28
42.52
512 × 512 × 512
131072
300.26
80.11
1024 × 512 × 1024
524288
1019.62
297.32

(a)

GPU [s]
0.09
0.26
0.48
2.06
3.73
13.00

(b)

Fig. 8. (a) A graph of a function of generation time to the size of the volume for CPU and GPU processors. (b) The graph of generation time
of the volumetric model (size 512 × 512 × 512) to the number of input images. Error bars indicate data transfer time between CPU memory
and the GPU memory.

computational complexity of this algorithm is O(nm) where n is the number of input images and m is the size of a
volumetric space.
7. Conclusion
In this paper a method of reconstruction of three-dimensional model on the basis of its two-dimensional images
has been presented. The main idea was that the images of an object was acquired around the object, perpendicular to the selected imaging axis from a ﬁxed distance. In addition, images were obtained using non-stabilized
camera. Images collected in a such way need an alignment to determine their position and orientation relative
to the reconstructed model. This problem was solved by using image registration algorithms and virtual camera
calibration. A volumetric model V is generated and colored by the perspective reprojection of the silhouettes of

298

Marcin Denkowski / Procedia Computer Science 18 (2013) 290 – 298

input images into the volumetric space. Model V is then smoothed and the marching cube algorithm generates a
three-dimensional mesh of triangles representing an isosurface of a volumetric model V. Due to the high computational complexity of the algorithms developed by the author a parallel implementation has been proposed for a
multiprocessor system that uses the graphics card working under the control of the NVIDIA CUDA environment.
Author’s method is a an alternative to the Space Carving techniques and the reconstructed object will be
approximated in the XZ plane by the convex hull of the original model.
References
[1] A. Hengel, A. Disk,T. Thormahlen, B. Ward, P. Torr, VideoTrace: Rapid interactive scene modelling from video, ACM Transactions on
Graphics, Vol. 26, No. 3, Article 86, 2007, s. (86-1)-(86-5).
[2] Q. Pan, G. Reitmayr, T. Drummond, ProFORMA: Probabilistic Feature-based On-line Rapid Model Acquisition, Proc. BMVC09, London, UK, 2009.
[3] P. Labatut, J. P. Pons, R. Keriven, Eﬃcient multi-view reconstruction of large-scale scenes using interest points, delaunay triangulation
and graph cuts, In Proc. International Conf. on Computer Vision, 2007.
[4] M. Pollefeys, L. Van Gool, M. Vergauwen, F. Verbiest, K. Cornelis, J. Tops, et al., Visual modeling with a hand-held camera. Int. J.
Comput. Vision, 59(3): 2004, s. 207232.
[5] S. Gobron, C. Marx, J. Ahm, D. Thalmann, Real-time textured volume reconstruction using virtual and real video cameras, Computer
Graphics International (CGI 2010) short paper, 2010.
[6] K. N. Kutukalos, S. M. Seitz, A theory of shape by space carving, International Journal of Computer Vision, 38(3), 2000, s. 197216.
[7] A. Laurentini, The visual hull concept for silhouette-based image understanding, IEEE Transactions on Pattern Analysis and Machine
Recognition, 16(2), 1994, s. 150162.
[8] J. Wedekind, Focus set based reconstruction of micro-objects, International IEEE Conference on Mechatronics & Robotics
(MechRob04), Aachen, Germany, 2004.
[9] Y. Tsubaki, A. Kubota, K. Aizawa, All-focused images generation and 3D modeling of microscopic images of insects, IEEE Int. Conf.
on Image Processing (ICIP2001), Vol.II, 2001, s. 197-200.
[10] X. Zhong, High-Resolution 3D Reconstruction of the Surface of Live Early-Stage Toad Embryo, Biol 507 Microscopy, Project Report,
2005.
[11] S. Izadi, D. Kim, O. Hilliges, D. Molyneaux, R. Newcombe, P. Kohli, et al., KinectFusion: Real-time 3D Reconstruction and Interaction
Using a Moving Depth Camera, UIST11, Santa Barbara, CA, USA, 2011.
[12] Primesense, http://www.primesense.com/solutions/sensor/.
[13] A. Laurentini, The visual hull concept for silhouette-based image understanding. IEEE Transactions on Pattern Analysis and Machine
Recognition, 16(2), 1994, s. 150162.
[14] K. N. Kutukalos, S. M. Seitz, A theory of shape by space carving. International Journal of Computer Vision, 38(3), 2000, s. 197216.
[15] W. Matusik, C. Buehler, R. Raskar, S. Gortler, L. McMillan, Image-based visual hulls, In Proc. ACM Conference on Computer Graphics
(SIGGRAPH), Annual Conference Series, New Orleans, USA, 2000, s. 369374.
[16] M. Denkowski, M. Chlebiej, Image Sequence Stabilization Through Model Based Registration, Annales UMCS Informatica AI XII, 1,
2011, s. 67-74.
[17] W. E. Lorensen, H. E. Cline, Marching cubes: A high resolution 3D surface construction algorithm, Computer Graphics, 21(4), July,
1987, 163-169.
[18] NVIDIA GPU Computing SDK, https://developer.nvidia.com/gpu-computing-sdk.
[19] G. Taubin, T. Zhang, G. Golub, Optimal surface smoothing as ﬁlter design, Lecture Notes in Computer Science, 1996, Volume
1064/1996, 1996, s. 283-292.
[20] B. Chapman, G. Jost, R. van der Pas, Using OpenMP Portable Shared Memory Parallel Programming, The MIT Press,
(http://www.openmp.org), 2007.
[21] NVIDIA CUDA C Programing Guide, NVidia Corporation, 2010,
http://developer.download.nvidia.com/compute/cuda/3 2 prod/toolkit/docs/CUDA C Programming Guide.pdf

