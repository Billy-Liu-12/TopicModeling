Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 140 – 148

International Conference on Computational Science, ICCS 2013

Modelling Distributed Service Systems with Resources using
UML
M. E. Cambronero, V. Valero
Department of Computer Science
University of Castilla-La Mancha
Albacete. 02071 - SPAIN

Abstract
Web services managing distributed resources is a technology that allows the user to have an easier and cheaper mechanism to
access and manage distributed resources. Then, the formal modeling of web services with distributed resources becomes very
important in order to understand accurately their behavior. In this paper, we present a framework to model these systems by
using a widely adopted standard (UML 2.0), enriched with the resource management capabilities, on the basis on WSRF.
c 2013
2012 The
The Authors.
©
Authors. Published
Published by
by Elsevier
ElsevierB.V.
B.V. Open access under CC BY-NC-ND license.
Selection and/or
under
responsibility
of the
organizers
of the
2013
International
Conference
Computational
Selection
and peerpeer-review
review under
responsibility
of the
organizers
of the
2013
International
Conference
on on
Computational
Science.
Science
Keywords: UML; WS-RF; Resources; Distributed Systems;

1. Introduction
The development of software systems is becoming more complex with the appearance of new computational
paradigms such as Service-Oriented Computing (SOC), Grid Computing and Cloud Computing. These paradigms
allow to improve the communication between diﬀerent services along the world. To facilitate additional interoperability among services, more standardization is required to deal with distributed resources. In January of
2004, several members of the Globus Alliance organization and the computer multinational IBM with the help of
experts from companies such as HP, SAP, Akamai, etc. deﬁned the basis architecture and the initial speciﬁcation
documents of a new standard for that purpose, Web Services Resource Framework (WSRF) [1]. Although the web
service deﬁnition does not consider the notion of state, interfaces frequently provide the user with the ability to
access and manipulate states, that is, data values that persist across, and evolve as a result of web service interactions. The messages that the services send and receive imply (or encourage programmers to infer) the existence
of an associated stateful resource. It is then desirable to deﬁne web service conventions to enable the discovery
of, introspection on, and interaction with stateful resources in standard and interoperable ways [2]. The modeling
of this kind of systems is a primary task to understand how they work and analyze their behavior.
∗ This work received ﬁnancial support from the Spanish Government (coﬁnanced by FEDER funds) through the TIN2009-14312-C02-02
and TIN2012-36812-C02-02 Projects.
E-mail address: MEmilia.Cambronero@uclm.es, Valentin.Valero@uclm.es.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.177

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148

We deﬁne a formalism to model web services with resources, which is based on UML 2.0 [3], but including
the main aspects of WSRF.
There are some previous works in the ﬁeld of Grid and Web services with resource modeling. Some use class
diagrams [4, 5]: Bran Selic in [5] presents a generic framework for modeling resources with UML, focusing on
the notion of abstract resources, using UML class diagrams as a particularization for the presented framework.
We-jun LI et al. [4] propose a model-driven aspect framework to facilitate the development of grid services,
they explain that it beneﬁts from the combination of model-driven architecture and aspect-oriented programming.
The input of the framework is a UML speciﬁcation in XMI format derived from a CASE tool to generate a suite
of source code ﬁles and related settings. The authors present a new UML proﬁle for grid services with new
stereotypes with UML class diagrams, by deﬁning concepts as the grid interface, remote methods, data, access to
grid services, client side and subscription of a topic. Bendaly et al. [6] use domain speciﬁc language (DSL) based
on UML activity diagrams to specify and compose systematically workﬂow models from grid services. Thus,
they present a formal framework to transform UML activity diagram specifying workﬂows composed from grid
services to BPEL4WS language describing web services workﬂows. Another work using UML activity diagrams
is introduced in [7], in this work Pllana et al. present a graphical editor Teuta for the speciﬁcation of scientiﬁc
grid workﬂows. They develop a domain speciﬁc language for grid workﬂows that is based on UML 2.0, and show
a tool-support by customizing the graphical editor Teuta. In this tool they compose graphically the workﬂows by
combining the predeﬁned elements of the particular language they use.
In this work, we use UML 2.0 sequence diagrams to model the communication among diﬀerent parties in a
web service with distributed resources. Sequence diagrams allow us to model the interaction among the parties in
an intuitive manner. Thus, we use sequence diagrams of UML 2.0 with frames to allow nested constructions, as
well as WSRF derived communications.
The rest of the paper is organized as follows. In Section 2, we introduce the UML 2.0 sequence diagrams with
frames. In Section 3, we describe the main elements of WS-RF that we consider. The semantics for UML-WSRF
sequence diagrams is presented in section 4. A case study to illustrate this formalism is presented in Section 5.
Finally, Section 6 ﬁnishes the paper giving some conclusions and possible future works.
2. UML Sequence Diagrams
A sequence diagram of UML 2.0 [3] depicts a sequence of actions that occurs in a dynamical system. The
invocation of methods of each object, and the order in which the invocation occurs is captured by a sequence
diagram. This makes the sequence diagram a very useful tool to represent the dynamic behavior of a system
in a simple way. Furthermore, we use frames , which are a key element of sequence diagrams, extending their
functionality by adding to them some new capabilities, such as the possibility of labeling, nesting and modeling
of control structures.
Frames are deﬁned as units of behavior, and contain, among other things, the set of objects that are in relation,
and the sequence of messages between these objects.
We will consider the following speciﬁc frames:
• Alt-labeled frames: These allow us to specify a nondeterministic choice.
• If-labeled frames: These allow us to specify an if-then-else control structure, depending on the condition
that follows the opt label.
• Loop-labeled frames: These allow us to describe a repetitive behavior, depending on the condition that
follows the loop label.
• Par-labeled frames: These describe activities that run in parallel. No synchronization is allowed at this
level, message exchanges are only allowed among the activities in a frame.
3. Web Services Resource Framework (WS-RF)
WS-RF [8] is a standard created by the OASIS organization, which deﬁnes a framework for modeling and
accessing stateful resources using Web services.
The main elements of WS-RF that we consider in this work are the following:

141

142

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148

• WS-Resource: A WS-Resource is the composition of a resource and a Web service through which the
resource can be accessed. A Web service has an association with a stateful resource, where the stateful
resource is deﬁned by a resource properties document type and the association is expressed by annotating a
WSDL portType with the type deﬁnition of the resource properties document.
• WS-ResourceProperties: Set of properties that deﬁnes the resource, and associates it with the service interface. It deﬁnes the constraints on the valid contents of the message exchanges. This speciﬁcation also
deﬁnes a standard set of message exchanges that allow a requestor to query or update the property values of
the implied resource.
• WS-ResourceBasefaults: This allows to standardize the format for reporting error messages. WS-BaseFaults
deﬁnes an XML Schema type for a base fault, along with rules for how this fault type is used by Web
services.
• WS-Notiﬁcations: This element allows a NotiﬁcationProducer to send notiﬁcations to a NotiﬁcationConsumer, on the basis on some conditions related to the resource state.
4. UML Sequence Diagrams + WS-RF Semantics
In this subsection we deﬁne an operational semantics for the speciﬁc subset of UML-WSRF that we use.
For our purposes a UML-WSRF sequence diagram can be seen as described by the following abstract syntax:
U ::= (Frame, Var)
where Var is the set of variables used in this speciﬁcation, and Frames are deﬁned by the syntax:
Frame ::= (r1 : A1 , . . . , rn : An ) | Frame; Frame |if (g, Frame, Frame) |
alt(Frame, Frame) |loop(g, Frame) | par(Frame, Frame)
where (r1 : A1 , . . . , rn : An ) stands for a basic description, in which r1 , . . . , rn are the objects or actors involved, and A1 , . . . , An the actions they make, whose syntax is deﬁned below. By Frame; Frame we represent
the sequential execution of both argument frames. The frame if (g, Frame1 , Frame2 ) stands for an if-then-else
construction; when the guard g is true Frame1 is executed, otherwise control is transferred to Frame2 . By contrast, alt(Frame1 , Frame2 ) represents a non-deterministic choice, either Frame1 or Frame2 can be executed. With
loop(g, Frame) we represent the iterative execution of the indicated frame, as long as the guard g is true. Finally,
par(Frame, Frame) represents the parallel execution of both argument frames. Some of these operators have been
introduced as binary, but they can be easily extended as n-ary, so in the examples we will use their extended
version when necessary.
For the guards g we allow conditional arithmetic expressions constructed using variables, and for the activities
we consider the syntax:
A ::= nil | send(i, expr); A | recv(i, w); A |assign(w, expr); A | AR
where AR are the WS-RF activities:
AR ::= publishResource(EPR, val); A | getProp(EPR, w); A |
setProp(EPR, expr); A |subscribe(i, EPR, cond, A); A
where i ∈ {1, . . . , n} (object or role identiﬁer), expr ∈ Expr is an arithmetic expression constructed by using the
variables, val ∈ Z and w ∈ Var. The nil operator stands for no action (the object cannot execute any actions),
The operator send(i, expr); A represents that the value obtained from the indicated expression is sent to object
i, in a synchronous way, and afterwards, it behaves as A, whereas recv(i, w) is used to receive an integer value
from role i, which is stored in variable w. Finally, assign(w, expr) is used to assign the value of expr to w.
As regards resources, EPR ∈ EPRS , which is the set of allowed resource identiﬁers, which are made visible
when the resource is published. In this case, an initial value is also provided to the resource property (we are
considering for simplicity a single integer property for each resource). A condition cond is a predicate constructed
by using conjunctions, disjunctions, and negations over the set of variables and integers. SetProp and getProp
allow us to (respectively) assign or get the resource property value. A subscribe operator is used in order to add

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148



"

	


	


	

	
	



	

	
	




	 



!



Fig. 1. UML-WSRF illustration

object i to the subscription list for the resource EPR, along with the speciﬁc notiﬁcation condition cond for this
object. The last parameter indicates the activity that must be executed when this condition holds. In this paper
we consider that resources are persistent, i.e., we do not include a speciﬁc construction for removing resources.
Actually, in WS-RF resources are only removed when an associated time-out for the resource expires, so as we
are not considering a time model, we omit this possibility. In a further extension of this work we plan to include
timed aspects in the model, and thus, the possibility of removing resources from the system.
Example 4.1. Fig. 1 presents the ﬁrst part of our running example, which is a bank system. We can see that 3
roles are involved: the bank, a client and the resource publisher.
In this case, the WS-Resource is a bank account and the WS-ResourceProperty is the account balance.
The system works as shown in Fig. 1. Initially, role O publishes the bank account, so that the clients can access
to it. Once the resource is visible, there are three possible behaviors in the system, so we use an alt frame: the
client can use the primitive getProp to know the balance of the bank account, or the client can send an order to
modify the balance, by increasing that number in 1000 units, or, lastly, the client can send an order of subscription
to the bank server by indicating that he would like to receive a notiﬁcation when the account balance is smaller
than 100 units. When the subscription condition occurs, the client receives a notiﬁcation message, and executes
the activity associated with this subscription, which is in this case to increase the balance (setProp activity).
The operational semantics for this language is deﬁned by means of two types of transition:
- (F, s) −→ (F , s) (null transition)
a
- (F, s) −→ (F , s ) (Action transition)
where F is a frame, s is a state, deﬁned as a tuple (v,ρ) with v : Var → Z (variable values), and ρ captures the
global resource state. As we are dealing with a distributed system, we assume that each object manages its own

143

144

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148

variables, but notice that the evaluation of frame guards requires an exclusive read access to the variables of other
objects. Thus, this abstraction encapsulates a kind of simultaneous reading from the roles of the involved variable
values, and of course, the variables are not modiﬁed as this process occurs. For simplicity, in the formalization
we have preferred to deﬁne v as a simple function in ZVar . The resource state information is deﬁned as follows:
ρ = {(EPRi , vi , Subsi )}ri=1 , where r is the current number of resources in the system. Each resource has its own
i
identiﬁer, EPRi , and, at each state, has a particular value, vi . Moreover, Subsi = {(Oij , condij , Aij )}sj=1
, si ∈ [1...n]
and i ∈ [1...r], is the set of resource notiﬁcation subscribers, condi j are their associated delivery conditions and
the activity Aij that must be thrown in the case that condij holds; si is the number of objects currently subscribed
to this resource and Oij ∈ O are the subscriber identiﬁers. We will use the following notation: By EPR ∈ ρ we
indicate that there is a resource with reference EPR in ρ (otherwise EPR ρ). We use ρ(EPR) to represent the
current value (in ρ) of resource EPR. Furthermore, with ρ[k/EPR] we represent the change of the property value
of EPR, which is now assigned to k ∈ Z. We also use function eval(expr, v) to evaluate an expression according
to the values of variables v, v ∈ ZVar . By v[expr/w] we denote the change of variable w for the evaluation of
expr. Function Add subs(ρ, EPR, O, cond, A1 ) is used to add a new subscriber O for the resource EPR in ρ. In the
event that object O were already subscribed to EPR, we replace its old notiﬁcation condition and activity by the
newly indicated ones. We also use function Remove subs(ρ), which is used to remove from ρ those subscriptions
which have been notiﬁed, because their associated conditions have occurred. Formalizations of these deﬁnitions
are immediate, so we omit them.
Let us now describe the transitions: null transitions are used to solve the alternatives and loops, depending on
the guard evaluation. They are also used in a sequence of frames to activate the second frame when the ﬁrst has
terminated. The rules deﬁning null transitions are shown in Table 1. In these rules we denote by nil the frame
(r1 : nil, . . . , rn : nil).
In order to deﬁne action transitions we ﬁrst need to deﬁne these transitions for the activities inside the frames,
which follow the syntax:
a
(A, (v, ρ)) −→ (A , (v , ρ ))
where a ∈ Alph, where this alphabet of actions can be easily derived from the rules.
Rules deﬁning the action transitions for the activities are shown in Table 2. In this table, notiﬁcations and
synchronizations are not yet considered, they will be considered later, when deﬁning the action transition rules at
the frame level (Table 3). Rules in Table 2 are very intuitive, expressing the sequential evolution of the activities
performed by a single object.
a

A frame action transition has the following form: (F, s) −→ (F , s ), where a ∈ Alph, and they are deﬁned by
the rules in Table 3. The evolution by executing an action labeled with a message identiﬁer m is obtained from a
synchronization between two objects that communicate using this message identiﬁer (rule Syncr). Notiﬁcations
are not included in the case of rule Syncr, since ρ has not changed. Rule Obj captures the single evolution of an
object within a frame, but notice that in this case some notiﬁcations may appear, as a consequence of the possible
change in the resource property values. Notiﬁcations are formally deﬁned as activities launched upon the fulﬁlling
of the conditions indicated by the resource subscribers. These activities (handlers in the WSRF terminology) with
the activity that the corresponding subscriber was executing when the subscription condition was fulﬁlled. Thus,
function Nl (ρ) is introduced in rule Obj in Table 3, which unfolds the activities that every object should execute
before performing its next local activity. Nl (ρ) can be empty, in the event that no activity should be launched
for object i, in this case we take Nl (ρ); Al = Al . Otherwise, Nl (ρ) = {Al1 ; . . . ; Alk | 1 ≤ l1 ≤ ... ≤ lK ≤ r, ∀ j ∈
{1, . . . , k} : EPRl j ∈ ρ, ∃(Ol j l , condl j , Al j ) ∈ Subsl j , with cond l j l = true}.
l
Rules Seq1 and Par1-2 capture the sequential and parallel evolution of frames. Notice again that no synchronization is allowed between objects executing at diﬀerent frames. This is a consequence of the concept itself of
frame, which encloses a set of related activities from the system roles.
5. Case Study
This case study concerns a typical travel agent process, which consists of four participants: the bank, the
traveler, the travel agent and the airline reservation system (ARS). The WS-Resource is a bank credit card, which

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148

(NS1)
(SEQ)
(IF1)

((nil; F), s) −→ (F, s)
F1 −→ F2
(F1 ; F, s) −→ (F2 ; F, s)
v∈g
(if (g, F1 , F2 ), s) −→ (F1 , s)
v

(IF2)

g

(if (g, F1 , F2 ), s) −→ (F2 , s)

(ALT1)

(alt(F1 , F2 ), s) −→ (F1 , s)

(ALT2)

(alt(F1 , F2 ), s) −→ (F2 , s)

(LOO1)

v∈g
(loop(g, F), s) −→ ((F; loop(g, F)), s)
v

(LOO2)

(PAR1)
(PAR2)

(PAR3)

g

(loop(g, F), s) −→ (nil, s)
(par(nil, nil), s) −→ (nil, s)
F1 −→ F1
(par(F1 , F), s) −→ par(F1 , F, s)
F1 −→ F1
(par(F, F1 ), s) −→ par(F, F1 , s)

Table 1. Frame null transition rules

is associated with a bank account and the WS-ResourceProperty is the credit card balance.
The system works as follows: the Bank publishes the resource and makes it visible. Let us then consider that
a traveler is planning on taking a trip. Once she has decided the speciﬁc trip, she will make her submission to
the travel agent, by means of her local Web Service software. The travel agent selects the best itinerary according
to the criteria established by the traveler and it sends a message to the ARS to ask about the seats availability.
The ARS checks the availability of seats, if there are available seats the ARS informs to the travel agent about
the price, the travel agent then sends this information to the client. Once the client knows the price she uses the
primitive getProp to know her credit card balance, by consulting the value of the property credit card balance.
Afterwards, the client subscribes to the credit card resource, so that if the credit card balance becomes less than
the seat price she receives a notiﬁcation (in our model this corresponds to the execution of one activity). The
balance is therefore increased in that case (setProp activity). The reservation is ﬁnally done when the client has
enough credit. The UML-WSRF sequence diagram depicting all the process is shown in Fig. 2.
The formal description of this example follows:
FrameSys ::= F1 ; F2
F1 ::= publishResource(CreditCard, 1000), send(TA, ﬂight), recv(Client, ﬂight); send(ARS, available seats?),
recv(T A, available seats)

145

146

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148

(Assign)

assign(w,eval(expr,v))

((assign(w, expr); A), (v, ρ))

−→

snd(i,eval(expr,v))

−→

(A, v[expr/w], ρ)

(Send)

((send(i, expr); A), (v, ρ))

(A, (v, ρ)),

(Receive)

((recv(i, w); A), v) −→ (A, (v[m/w], ρ))m ∈ Z

(PR)

((publishResource(EPR, expr); A), (v, ρ)) −−−−−−−−−−−−−−−−−−−−−−−−−→ (A, (v, ρ ))
where ρ = ρ ∪ {(EPR, eval(expr, v), ∅)}, if EPR ρ. Otherwise, ρ = ρ.

rcv(i,m)

publishResource(EPR,eval(expr,v))

s = (v, ρ), EPR ∈ ρ
(GetProp)

getProp(EPR,ρ(EPR))

((getProp(EPR, w); A), (v, ρ)) −−−−−−−−−−−−−−−−→ (A, (v[ρ[EPR]/w], ρ))
s = (v, ρ), EPR

(GetProp2)

ρ
f ail

((getProp(EPR, w); A), (v, ρ)) −−−→ (nil, (v, ρ))
s = (v, ρ), EPR ∈ ρ

(SetProp1)

setProp(EPR,eval(expr,v))

((setProp(EPR, w); A), (v, ρ)) −−−−−−−−−−−−−−−−−−−→ (A, (v, ρ ))
where ρ = ρ[eval(expr, v)/EPR].
s = (v, ρ), EPR

(SetProp2)

(Subs)

ρ
f ail

((setProp(EPR, w); A), (v, ρ)) −−−→ (nil, (v, ρ))
s = (σ, ρ), EPR ∈ ρ
subscribe(O,EPR,cond,A1 )

((subscribe(O, EPR, cond, A1 ); A2 ), (v, ρ)) −−−−−−−−−−−−−−−−−−−→ (A2 , (v, ρ ))
where ρ = Add subs(ρ, EPR, O, cond, A1 ).
s = (σ, ρ), EPR

(Subs2)

ρ
f ail

((subscribe(O, EPR, cond, A1 ); A2 ), (v, ρ)) −−−→ (nil, (v, ρ))

Table 2. Activity action transition rules without notiﬁcations

F2 ::= if (available seat, F21 , F22 )
F21 ::= (nil, AC , ATA , AARS )
F22 ::= (nil, recv(TA, no seats), recv(ARS, no seats); send(Client, no seats), send(TA, no seats))
AC ::= recv(TA, price); getProp(CreditCard, CreditCardBalance);
subscribe(Client, CreditCard, CreditCardBalance < price, setProp(CreditCard, price + CreditCardBalance);
send(T A, book ticket); recv(T A, booking con f irmation);
ATA ::= recv(ARS, price); send(Client, price); recv(Client, book ticket); send(ARS, book ticket); recv(ARS, booking conﬁrmation);
send(Client, booking con f irmation)
AARS ::= send(TA, price); recv(TA, book ticket); send(TA, booking conﬁrmation)
We use “ ,” to separate the diﬀerent components of the tuples.
For simplicity, we have omitted the ﬁnal nil operator in the speciﬁcations. Notice that the resource is graphically drawn as
a role in our representation of UML-WSRF diagrams.

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148

(Syncr)

(Ai , (v, ρ))

snd( j,m)

→

rcv(i,m)

(Ai , (v, ρ)) , (A j , (v, ρ)) → (A j , (v , ρ)) , i

j

m

((r1 : A1 , . . . , ri : Ai , . . . , r j : A j , . . . , rn : An ), (v, ρ)) −→ ((r1 : A1 , . . . , ri : Ai , . . . , r j : A j , . . . , rn : An ), (v , ρ))

a

(Obj)

(Ai , (v, ρ)) → (Ai , (v , ρ )) , a

snd( j, m), a

rcv( j, m) , ∀ j ∈ {1, . . . , n}

a

((r1 : A1 , . . . , ri : Ai , . . . , rn : An ), (v, ρ)) −→ ((r1 : N1 (ρ); A1 , . . . , ri : Ni (ρ); Ai , . . . , rn : Nn (ρ); An ), (v , ρ ))
where ρ = Remove subs(ρ ).

a

(F1 , (v, ρ)) −→ (F1 , (v , ρ ))

(Seq1)

a

((F1 ; F2 ), (v, ρ)) −→ ((F1 ; F2 ), (v , ρ))

(Par1-2)

a

(F2 , v) −→ (F2 , (v , ρ ))

a

((par(F1 , F2 )), (v, ρ)) −→ ((par(F1 , F2 )), (v , ρ ))

(F1 , (v, ρ)) −→ (F1 , (v , ρ ))
((par(F1 , F2 )), (v, ρ)) −→ ((par(F1 , F2 )), (v , ρ ))

a

a

Table 3. Frame action transition rules

Fig. 2. UML sequence diagram with WS-RF operators for a Travel Agent.

147

148

M.E. Cambronero and V. Valero / Procedia Computer Science 18 (2013) 140 – 148

6. Conclusion and Future Work
In this paper we have presented a formal framework to model web services with distributed resource systems. Our contribution focuses on using UML 2.0 sequence diagrams to model the behavior of this kind of systems. UML 2.0 sequence
diagrams have been chosen because they allow us to model the sequence of messages exchanged among the diﬀerent parties
in a web service system. Additionally, we take advantage of the new UML 2.0 utilities such as frames, which allow us nested
constructions, and control structures. Another contribution of the paper is to enrich UML sequence diagrams by adding WSRF
derived communications. There are two main extensions for further work. The ﬁrst one is to extend our framework by including time constraints in order to model timed aspects of web services with distributed resource systems, and of course, to
implement a tool supporting all the process with the ﬁnal goal to get a veriﬁcation engine, to check whether the system behaves
as expected or not. Another goal is to get a translation into a choreographic view of the web services involved in the system,
on the basis of our previous works [9], [10]. For that purpose, a standard like WS-CDL [11] can be used, enriched with the
WSRF elements.

References
[1] I. Foster, J. Frey, S. Graham, S. Tuecke, K. Czajkowski, D. Ferguson, F. Leymann, M. Nally, T. Storey, S. Weerawaranna, Modeling
Stateful Resources with Web Services, Globus Alliance, 2004.
[2] K. Czajkowski, D. Ferguson, I. Foster, J. Frey, S. Graham, I. Sedukhin, D. Snelling, S. Tuecke, W. Vambenepe, The WS-Resource
Framework Version 1.0, http://www.globus.org/wsrf/specs/ws-wsrf.pdf (2004).
[3] OMG, UML 2.0 Superstructure proposal v.2.0. OMG document ad/03-01-02, Handed out at O’Hare (2003).
[4] W. Li, C. wei Huang, Q. Chen, H. Bian, A Model-Driven Aspect Framework for Grid Service Development, in: Proc. Asia-Paciﬁc
Conference on Services Computing, IEEE Computer Society, Los Alamitos, CA, USA, 2006, p. 82.
[5] B. Selic, A Generic Framework for Modeling Resources with UML., in: Computer journal, IEEE Computer Society Press, no. 6, Los
Alamitos, CA, USA, 2000, pp. 64–69.
[6] Y. B. Hlaoui, L. J. B. Ayed, A Model Transformation Approach Based on Homomorphic Mappings between UML Activity Diagrams
and BPEL4WS Speciﬁcations of Grid Service Workﬂows, in: Proc. IEEE 35th Annual Computer Software and Applications Conference
Workshops, IEEE Computer Society, Washington, DC, USA, 2011, pp. 243–248.
[7] S. Pllana, J. Qin, T. Fahringer, Teuta: A Tool for UML Based Composition of Scientiﬁc Grid Workﬂows., in: First Austrian Grid
Symposium, OCG, 2005.
[8] OMG, Web Service Resource Framework., Alliance, http://www.globus.org/wsrf (2006).
[9] M. Cambronero, G. D´ıaz, V. Valero, E. Mart´ınez, Validation and Veriﬁcation of Web Services Choreographies by Using Timed Automata,
J. Log. Algebr. Program. 80 (1) (2011) 25–49.
[10] M. Cambronero, V. V. Ruiz, E. Mart´ınez, Design and Generation of Web Services Choreographies with Time Constraints, J. UCS 17 (13)
(2011) 1800–1829.
[11] N. Kavantzas, D. Burdett, G. Ritzinger, T. Fletcher, Y. Lafon, C. Barreto, Web Service Choreography Description Language (WSCDL)
1.0., http://www.w3.org/TR/ws-cdl-10/ (2005).

