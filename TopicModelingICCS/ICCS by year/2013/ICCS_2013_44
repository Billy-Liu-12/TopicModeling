Available online at www.sciencedirect.com

Procedia Computer Science 18 (2013) 722 – 731

2013 International Conference on Computational Science

Adaptive Scientific Visualization System for Desktop Computers
and Mobile Devices
Konstantin Ryabinin*, Svetlana Chuprina
Perm State University, Bukireva Str. 15, 614990, Perm, Russia

Abstract
In this paper, the development of a client-server scientific visualization system named SciVi is described. This system is
designed to render the results of scientific experiments in a human-observable form. The means for flexible integration of
visualization system with software solving scientific problems (solver) is proposed. The multi-platform portability is
achieved that allows SciVi to be able to work on desktop computers as well as on different types of mobile devices with no
source code modification.
It is showing how to improve the user abilities of interaction with the graphical scene and to reach an optimal load of
computer system at the same time. The main feature of our approach is that the system developed is not only adaptable but
also adaptive to the performance of servers and clients and to connection speed. The Dublin Core metadata standard is used
to describe different kinds of recourses including server and client settings, 3D-models and shaders.
3 The
© 2013
The Authors.
Authors. Published
Published by
by Elsevier
Elsevier B.V.
B.V. Open access under CC BY-NC-ND license.
Selection
peer-review
under
responsibility
of the
organizers
of the
International
Conference
on Computational
Selection and/or
and peer
review under
responsibility
of the
organizers
of the
20132013
International
Conference
on Computational
Science
Science
Keywords: scientific visualization; multi-platform; mobile devices; graphics rendering; Dublin Core

1. Introduction
The problems being solved in natural sciences become more and more complex so a lot of scientists over the
world use a computer data processing as an essential part of their research. Normally the result of computer
simulation, especially in physics, chemistry or biology, looks like a huge amount of digital values representing
state of system or process being simulated. The most popular way to present the simulation data in humanreadable form is the graphical visualization which can be performed by the same computer that runs simulation,
or by some other ones.
Although there are a lot of applications and software packages designed for scientific visualization there are

* Corresponding author. Tel.: +7-909-728-11-49.
E-mail address: kostya.ryabinin@gmail.com.

1877-0509 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and peer review under responsibility of the organizers of the 2013 International Conference on Computational Science
doi:10.1016/j.procs.2013.05.236

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

some challenges, for example:
The absence of high-level integration means between solver and visualizer.
Inefficient implementation of distributed solvers and visualizers.
The absence of adequate tools for multi-platform portability.
To eliminate the problems mentioned above we suggest an approach to develop adaptive scientific
visualization system providing scientists with visual data in user-friendly form. The data being visualized
should have a metadata available in human-readable and computer-readable form to make it easy to integrate
visualizer with solver and to ensure semantic search among scientific experiment results. To achieve this,
ontology-driven techniques are used.
The first problem is the integration between simulation system (called solver) and graphics rendering system
(called visualizer). The process of data transmission from solver to visualizer should be automated and scientist
should be able to control solver and visualizer from a single user interface. It is logical to assume, that the
scientist will work directly with the visualizer rendering the data which were obtained from the solver.
The second problem is that modern scientific simulations require to use high-performance distributed
computing systems, so the scientist have to establish connection with some remote server (representing a highperformance system), control it over the network and obtain results in some form. In this case, there are three
main approaches to create visual representations of simulation results [1]:
Visualization is performed on the client-side (the client obtains raw data from server and processes them
using local computing resources).
Visualization is performed on the server-side (the client obtains image being rendered by server).
Visualization is distributed between the client and the server.
The first two approaches are the most popular nowadays but they have some drawbacks.
By the first approach high interactivity is achieved. But the performance of client should be high enough to
process all the raw data and the speed of network connection should be sufficient to transmit all the necessary
data. Often the amount of raw data is too big, so the client can neither obtain it nor process.
By the second approach, the server is responsible for the entire rendering. That means there are almost no
specific system requirements for the client. It could have very low performance and should only be able to
establish connection with the server for obtaining rendered images. But the connection itself has to be very fast,
especially in case interactivity is required. For example, if a user wants to rotate 3D-image being rendered on
the server-side, the client has to send the corresponding rendering-requests to the server and wait for the frames
being transmitted over the network. Though the server runs on high-performance system, it can be overloaded
while many clients connect at the same time and each of them requests its own frames to render. As a result, the
user will experience a lack of interactivity.
The third approach integrates the first two approaches and from our point of view this integration may be
implemented in such a way that the positives are saved and the negatives are eliminated. Our idea is to
distribute rendering by synthesizing some part of image on the servers-side and the other ones including the
result image on the client-side. In this case the server renders the most complex objects and preprocesses the
raw data to make them lightweight and acceptable for the client. It is important to distribute the rendering
according to the performance of client, load of server and speed of network connection. This approach is more
difficult to implement than the other two approaches and in addition, it has a number of implementation
variants.
The third problem mentioned above is connected with multi-platform visualization systems design
considering a huge amount of different desktop computers and different types of mobile devices (smart-phones
and tablets) and platforms. Traditionally mobile devices are assumed to be too low-performance for any kind of
visualization. But nowadays many of them (for examples, smart-phones produced by Apple or Samsung) are
actually able to process large amounts of data as well as render complex 3D-images in real-time. It is important
to develop visualization systems that can be not only compiled for mobile devices and desktop computers
without any changes of source code but also run on different platforms without significant loss of performance.
The purpose of this paper is to describe the approach of development adaptive scientific visualization system

723

724

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

based on client-server architecture integrated with different solvers and having the rendering distributed
between the server and the client. The server can run as desktop application as well as high-performance
distributed system. The client can run on the desktop as well as on the different types of the mobile devices.
While porting across different platforms the server and the client require no source code modifications.
To achieve the purpose mentioned above the following tasks have been solved:
Analysis of existing scientific visualization systems and tools.
Research of techniques to create multi-platform applications.
Developing multi-platform core of scientific visualization system (client and server).
Developing tools to port graphical user interface across different platforms.
Testing of the visualization system implementation for real scientific problems solving.
2. Brief overview of scientific visualization systems and tools
The traditional way to get some scientific data visualized is to use some high-level packages. There are
packages having both solver and visualizer as the parts of one application, such as MathCad, MatLab,
Mathematica, Maxima, etc. There are also packages providing the user with a visualizer only, for example:
TechPlot, Origin, EasyPlot, IRIS Explorer, Surfer, Grapher, AMLab [2, 3]. In some cases even CAD-systems
can be used for these purposes.
Unfortunately, most of the popular packages that have both solver and visualizer are not flexible and
scalable enough. They are designed to run on the desktops and to solve some lightweight problems, performing
almost primitive visualization (displaying 2D- and 3D-charts and graphs, isosurfaces and so on).
Packages having the visualizer can only process data in some standard format, but they cannot connect to the
solver directly. That means the scientist has to obtain raw data from the solver and transmit them to the
visualizer manually. The CAD-systems have the same problem and so a scientist should perform some
conversion of raw data to the format acceptable for CAD-systems. Such kind of transformation can be
automated, but usually it requires some third-party software.
Moreover, the common problem of all the software described above is the absence of their versions for
mobile devices. There are some applications positioned as the mobile alternatives for MathCad (PocketCAS,
GraphCalc and others), but they have a very poor functionality limited to solving relatively simple
mathematical problems and visualizing the solutions in a traditional way using charts and graphs.
KiwiViewer is the only stand-alone visualizer we have found on AppStore and Google Play software
markets that is implemented for both iOS and Android. This application can render relatively complex
geometrical data and is compatible with many standard formats for scientific simulation results storage. But
there are no tools for its integration with external solvers.
In fact, there are many libraries that can be used to create new scientific visualization systems. The most
popular libraries are mentioned in the PhD Thesis of O. Dzhosan [1]: OpenDX, VTK, VizIt, ScientificVR and
others. It seems to us that the most powerful of them is VTK. This library is pointed as open source software
and provides wide range of visualization algorithms based on OpenGL. It has an extension called pVTK that
adds functions to distribute rendering between nodes of high-performance massive-parallel computing system.
The popular cross-platform open source scientific visualization software ParaView [4] is based on pVTK. It
has client-server architecture, where the server is designed for high-performance distributed system architecture,
and the client for the desktop. But it has no mobile version yet.
VTK itself has a mobile-version called VES that bases on OpenGLES and is compatible with iOS and
Android. KiwiViewer mentioned above uses VES as a rendering subsystem. Through this, VTK can be used as
a rendering subsystem while developing multi-platform scientific visualization system. On the server-side
pVTK can be used and on the client-side either VTK (for desktops) or VES (for mobile devices).
Sometimes the graphics rendering engines can be used for the scientific visualization. There are many multiplatform engines, such as Unity3D, SIO2, OGRE, Irrlicht, etc., but they are basically designed for games,
interactive simulators or virtual reality scenes. There are some differences between these branches of

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

visualization and scientific rendering in the context of the issues discussed.
Firstly, games as well as simulators and many virtual reality applications use the models created by
overload the rendering system. But in the scientific visualization the data for rendering are a result of
simulation, so usually they are not simplified and should have as many details, as necessary. Moreover, the
scientific visualization itself has some unique features, for example, slice-based rendering, which means
rendering of some particular slices of the model, not the whole one.
Secondly, special effects (for example, flashes, image distortions, sparks, highlights and so on) are an
essential part of modern games and similar applications. But in the scientific visualization special effects are
reduced to minimum, because they can hardly help the scientist, they are more likely to divert his attention.
Hence, in our opinion the traditional rendering engines used for games, simulators and virtual reality cannot be
used for scientific visualization directly.
An important part of the interactive visualization system is the graphics user interface. In the multi-platform
systems it is a huge problem, because there are only few multi-platform libraries providing user interface
elements. The most popular libraries are Qt and Clutter. Qt has implementations for all popular desktop
operating systems as well as for iOS and Android. All of the libraries listed above have some problems with
, which
stability while running on the mobile devices. Moreover, there is the sois that desktops and mobile devices require different designs for graphical user interface, because they are
based on different control paradigms. Thus the interfaces should be designed in different ways to achieve the
acceptable ergonomics.
partially solved by Web applications. The most popular technologies are
The problem
HTML 5 (with JavaScript and CSS) and Flash. But the browser becomes a bottleneck in these cases. Nowadays
browsers are not optimized enough for executing complex algorithms, such as processing and rendering huge
amounts of data, especially on mobile devices. For example, iOS does not support hardware-accelerated
rendering with WebGL. Thus the Web applications are hardly appropriate for scientific visualization tasks.
All the problems mentioned above can be reduced to the main objectives:
There is no multi-platform scientific visualization system that supports integration with solver running on
high-performance computing system.
There is no efficient solution how to automate the creation of interactive multi-platform applications that
work with scientific graphics and have interface adequate to end-user purposes.
So the multi-platform scientific visualization system development is an actual problem. To some extent, the
problem (1) is the consequence of the problem (2). Hence, the development of multi-platform visualization
system should be started by creating an advanced technology that ensures multi-platform portability.
3. Proposed solution
The features of our approach to develop scientific visualization system SciVi are described below. SciVi has
been designed at the Computer Science Department of Perm State University.
3.1. Multi-platform portability
It s generally known, that the most suitable programming language for multi-platform applications is C++.
The programs written in C++ can be compiled and linked for any desktop operating system as well as for iOS
and Android. The C++ code can be executed directly on the desktop operating systems, such as Windows,
GNU / Linux or Mac OS X and on embedded operating system iOS. The internal logic of applications on
Android should be written in Java and executed on Dalvik Virtual Machine, but there is a technology called
JNI allowing to execute C++ code from-within Java and vice versa.

725

726

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

The rendering of all the graphical data can be managed with OpenGL. OpenGL provides an abstraction layer
from the graphical hardware on the desktops as well as on the mobile devices. But it should be taken into
account that OpenGLES (the lightweight version of OpenGL) is used for mobile applications. OpenGLES is a
subset of OpenGL, so the rendering code written for mobile devices can be executed on the desktops too, but
not vice versa. Many features available in OpenGL on the desktops are not available in OpenGLES. However,
these features are related to some special effects and they are not an essential part of scientific visualization. So
it was decided to write SciVi rendering code using OpenGLES in order to make it compatible with desktops
and mobile devices at the same time.
We developed our own interface control elements library named NGraphics that allows to automate the
design and implementation of graphical user interface. This library uses OpenGLES as a rendering subsystem
and the library called NFoundation for the memory, network and file management. NFoundation is a library
similar to Foundation and Boost, developed by Nulana LTD (Russian IT-company located in Perm) in co-work
with one of the paper authors as a framework for multi-platform applications development. The interface
library NGraphics is used to construct 2D- and 3D-interface elements, to handle user interactions (through the
keyboard and mouse as well as through multi-touch), to play back animations and to render images in the
separated threads. The OpenGLES and OpenGL are not thread-safe, but the multithreading is very useful for all
of the modern devices having at least double-core CPU. It can increase overall interactivity of the system in
case user interaction handling and image rendering run in separated threads. To achieve thread-safety, the
transactional memory model is used. All object modifications during the rendering process are logged and then
committed just before the next rendering.
NGraphics provides the ability to construct the graphical user
To s
interface for a concrete platform automatically in an adaptive way. A declarative description of interface
written in XML-based language is the main source for the construction. In a sense, this language is similar to
Microsoft s XAML, but it operates with higher-level entities to supply the necessary level of abstraction from
the platform. An interaction between the interface and the main logic of application is based on callbackfunctions.
NGraphics has been successfully tested on Windows, GNU/Linux, Mac OS X, iOS and Android.
3.2. SciVi architecture
According to our approach, the scientific visualization system SciVi architecture is shown in Fig. 1. The
client can run either on desktop or on mobile device. The server can run either on the desktop or on the highperformance computing system. In case of a high-performance computing system, there is a special node for
interface machine called interface-node that provides connection with the client, transmitting data from the
solver to the client and control commands from the client to the solver.
As mentioned above, the control over the solver is an important part of the visualization system. But the
implementation of such functionality is non-trivial because of high variety of solvers. Very often scientific
problems require their own solvers. For example, there are many physical simulators written in Fortran. These
solvers do not have any user interface, because usually scientists do not have enough time to create and to
debug the interface. Usually only command-line options are used to control the solver, or even the hard-coded
constants and preprocessor directives. But the visualization system should at least provide a scientist with the
ability to start and stop the solver and, additionally, to tune the solver, to change input data and initial
parameters.
We suggest to describe all the solver control commands in XML format. There is no automation to create
such kind of declaration now so it should be specified manually, but this is pretty simple in our case. All initial
settings are specified through command-line parameters. The necessary runtime-settings are implemented via
UNIX-signals (it is assumed that the solver runs on some UNIX-like operating system, because this kind of

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

systems is most popular in the field of high-performance computing). These two techniques help to keep the
solver maximal separated from the visualization system. Moreover, they require only a few additional lines of
code for the solver and no extra programming knowledge in the field of inter-process communication from the
developer. It is important, because very often scientists develop the solvers by themselves. Besides, it
would be useful to be able to integrate existing solvers and visualization system in such a way that no solver
modification is required (for example, some solvers are proprietary, so the modifications are impossible).

Fig. 1. Architecture of the scientific visualization system SciVi

The information about all the servers is stored on the single Web
W hosting of server specifications, as
presented in Fig. 1. So the first task for the client is to connect with the Web hosting to obtain the list of
available servers and to allow the user to choose the server. All the necessary information about the server is
stored in these specifications (IP-address of the server, port, login and password for connection, description of
the commands to control solver, etc.) and some meta-information (for example, natural language description of
the solver) in addition. Client parses the solver specifications, automatically builds the interface to control the
solver and establishes connection with the server
The control commands are sent
to the server and the server transmits them to the solver automatically.
While running, the solver produces the data, which are to be visualized. To achieve the optimal load and
maximal interactivity, the rendering should be distributed between the client and the server. On the server-side,
the pVTK library can be used to render the images efficiently using all the available nodes of high-performance
computing system.
We suggest an approach based on heuristics for the rendering distribution. The process of distribution is
performed by a server that takes into account its own load parameters (depends on the count of clients
connected), the connection speed and the performance of the client. Besides that, the form of data being
visualized should be taken into account by planning of the rendering distribution. It is reasonable to render on
the server only such parts of the scene that would not be changed by user-interactions on the client. For
example, by user-interactions like rotation and zoom of the object, its texture remains unchanged. So if the
texture of the scene object is a result of another rendering, it can be rendered once on the server and transmitted
to the client as an image.
After planning the rendering process, server starts to visualize the parts it has decided to visualize on its own
side and sends the raw data consigned for the client. Usually,
y the raw data should be preprocessed by server to
become acceptable for the client. That means data reducing and simplification. The ratio of data simplification
is determined heuristically to adapt to client performance and connection speed.
The heuristics mentioned above should be placed on the client s interface. That allows the user to try the
various options to make the system more adaptable to different cases. Moreover there should be an option to set
the data simplification ratio manually. Without such kind of settings, some details important for the scientist
may be lost.

727

728

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

3.3. Graphics rendering in SciVi
To render the scientific data, VTK-family libraries are used as well as an implementation of our own
algorithms. VTK-family libraries provide many complex techniques of rendering such as slice-based rendering
(not the whole model is displayed, but only some slices of it), volume rendering, etc. The VTK-family consists
of VTK library (desktop version), VES library (mobile version) and pVTK library (parallel version). As
mentioned above, pVTK is used to perform an efficient rendering on high-performance computing system on
the server, VTK is used on the desktop-client and VES is used on the mobile-client. The desktop version of
VTK library and VES library are compatible, so their exchange does not require a big modification of source
code.
But VTK-family libraries do not provide multi-scale rendering, whereas it is very useful for the scientific
visualization system. Multi-scale rendering is due to represent the scene on different scales and to let the user
switch the scales at runtime. Multi-scaling is used to zoom objects and to change the speed of displaying the
processes which occur in the objects. To achieve multi-scale rendering, our own algorithms are used.
The multi-scale by zoom means the microscope metaphor. There are two ways to change the scale of the
scene qualitative and quantitative.
The quantitative scaling has continuous nature and lets zoom current scene in some bounds. Metaphorically,
the
level of changing. The bigger the zoom is, the more details are rendered, but the more parts of the scene are
behind the screen bounds, and may be skipped by rendering. Simple viewing frustum test is used to determine,
which objects are outside of the screen. The system determines whether the object s bounding box intersects
the viewing frustum. If there is the intersection, the object is rendered, if not, the object is skipped. This
technique increases the performance dramatically on the complex scenes.
The qualitative scaling is discrete and leads to full rebuild of the scene. Metaphorically, it corresponds to the
switching lens of the microscope. Different qualitative scales should be supported by the solver (it should
generate the data for each scale). Not every solver has to support it, but if it does, the visualization system has
to provide the user with the ability to switch scales at runtime. The example of such switching in the SciVi
environment is shown in Fig. 2 (a-e).

c

Fig. 2. Switching between different scales: a model of the planet-system, b model of the individual planet,
model of the landscape-fragment, d model of the stone, e model of the crystal lattice, f time-line and correspondent state of the
planet system

The multi-scale that changes the speed of displaying processes occurring in the objects allows the user to
control the speed of animation playback. It is important, because the animations can represent different

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

processes, running on different speeds in real world. In order to control the speed of simulation process, it is
-term process in a
short time. So it was considered to place a time-line on the interface that allows to execute the scrolling to some
position in the simulation time, or to playback the whole animation on the given speed.
The time-line implemented in SciVi system is shown in Fig. 2 (f). The ticks on the time-line correspond to
the different states of system being displayed. These system states are calculated by the solver. The client
interpolates between the neighbor states linearly to display smooth animation.
The recent version of SciVi supports the interpolation of affine-transforms of the scene objects as well as the
interpolation of any set of uniform-variables passing to the shader used for animated model. The scene itself
and each animation for each model are described in XML-file obtained from the server. The server builds this
file automatically according to the output of the solver. There are symbolic links to the 3D-models and shaders
in this file. If models and shaders are the standard primitives (for example, sphere and shader implementing
, only the names of primitives are used as symbolic links. But in the case of custom
models and shaders, the filenames are these links. The files are stored in special format on the server-side and
transmitted to the client. It allows to create some special models and special visual effects for individual
solvers, for example, to perform some presentations.
The supported formats for 3D-models are 3DS, PLY and internal binary format, storing an array of vertices
with minimal metadata. Shaders should be written in GLSL, vertex and fragment shaders should be provided.
Geometry shaders are not supported, because OpenGLES does not support them yet.
The process of distributed visualization is shown in Fig. 3. Three instances of client display partial content
of the same scene on smartphone, tablet and notebook simultaneously. Thus, the multiplatform portability of
SciVi is demonstrated. SciVi supports the heterogeneous distributed rendering, where multiple clients running
on different platforms communicate with server. At the present time the implementation of server-side is not
finished yet, so a simple file-server plays its role. But the current version of the client has all the necessary
functions to display the results of distributed rendering correctly and behaves as if the server is able to monitor
ty and to notify the client each time the solver produces the next piece of data. So incremental
rendering is achieved, that runs with solver simultaneously.

Fig. 3. SciVi running as a heterogeneous distributed rendering system

729

730

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

3.4. Architecture of the SciVi client
The architecture of the SciVi client is shown in Fig. 4.
The client consists of a few modules to construct the graphical user interface, to visualize data, to connect
with the server and to communicate with the hosting of server specifications. Interface building module loads
the interface description from the local XMLinput- and control-form interface description from the hosting of server specifications to construct the
interface. It is necessary to control the server and the solver via connection module. The data have been
produced by the solver and processed by the server are sent to the client and visualized by the rendering
module. The symbolic links to models and shaders mentioned above with correspondent metadata are the part
of these data produced by the solver. VTK (VES) and
own algorithms are used for rendering. The
visualization process is controlled from the main user interface to ensure scene interactivity, scale switching
and control over animations.
As an addition for the standard interface it is proposed to use the video camera of the mobile device to
integrate technologies of augmented reality and 3D-gestures recognition into the client. It is assumed to use
OpenCV as a recognition subsystem to implement these features.

Fig. 4. Architecture of SciVi client

3.5. Usage of Dublin Core
All kinds of metadata (about 3D-models, shaders, solvers and servers) are stored in a standard form. Dublin
Core is a standard of metadata representation used in SciVi. It is a set of vocabulary terms, which can be used
to describe resources for the purposes of scientific research. It includes two levels: Simple and Qualified.
Simple Dublin Core comprises 15 elements: title, creator, subject, description, publisher, contributor, date,
type, format, identifier, source, language, relation, coverage, rights. Qualified Dublin Core includes three
additional elements: audience, provenance, rightsHolder. Each Dublin Core element is optional and may be
repeated. There is no prescribed order for presenting or using elements. The easy way to achieve human and
machine readability of metadata representation is to store it in XML format. Each part of proposed visualization
system is described according to Qualified Dublin Core standard. Technically, each XML-file used in the
system (for example, XML with scene description, or XML with server description) has a tag called
dublinCore where all the needed Dublin Core elements are listed as sub-tags. Each binary file in the SciVi
system should have a correspondent XML-file with the same tag structure.

Konstantin Ryabinin and Svetlana Chuprina / Procedia Computer Science 18 (2013) 722 – 731

These metadata are necessary for different purposes adequate to the scientist own interest, for example, to
search the existing recourses or to reuse some of them. To increase visual attractiveness of the scene being
visualized, it is necessary to create models and shaders as well as correspondent metadata manually. Because a
huge amount of shaders and many 3D-models are highly reusable, the correspondent metadata are reusable too.
In our opinion, the most useful metadata tags for adequate searching of scientific resources are: title, creator,
subject, description, publisher, contributor, audience, rightsHolder. The tags listed above are recommended to
use in SciVi system. To increase the semantic power of scientific visualization system ontology reengineering
methods are used to integrate these tags with application domain ontologies. Thanks to these methods SciVi can
be used not only for scientific visualization, but also for integration with a huge amount of different types of
computer systems including e-Learning systems [5, 6].
4. Conclusion
It has been determined through the overview that there are no well-known efficient multi-platform science
visualization systems supporting integration with the high-performance solver at the present time. Furthermore,
there are almost no multi-platform frameworks for graphical user interfaces. In this paper the development of
the adaptive client-server scientific visualization system named SciVi is described. SciVi system supports
integration with the solver and implements adaptive distribution of the rendering process between the client and
the server. Such distribution ensures the best interactivity of the scene being visualized and the optimal load of
the computing system. Additionally, the technology of creating graphical user interfaces for platforms with
different control paradigms (desktop computers and mobile devices) is proposed. To make the system highly
reusable, it is proposed to describe its elements according to Dublin Core standard. This can make it easy for
the scientists to find already existing system configurations for particular visualizations, or to find appropriate
examples to build their own configurations. At the present time the prototype of the client is developed
including the multi-platform framework for creating graphical user interfaces by their declarative description.
The client has been successfully tested on Windows, GNU/Linux and Mac OS X as well as on iOS and
Android. Thus, the problem of multi-platform software development is solved. The next step of client
development planned is to implement technologies of augmented reality, 3D-gestures recognition based on
OpenCV and stereo rendering on the client-side. Server-side of the system is now under development. The
adaptive distribution of the rendering, the ontology using, the data preprocessing and simplification based on
heuristics are in progress.
References
[1] Dzhosan O. Research and development of methods and software for scientific computing visualization for massive parallel computing
systems. PhD Thesis. Moscow State University; 2009. http://www.dissercat.com/content/issledovanie-i-razrabotka-metodov-iprogrammnykh-sredstv-vizualizatsii-rezultatov-nauchnykh-.
[2] Vinogradov M. Modern tools for visualization and processing of two-dimensional scientific data. Bauman Moscow State Technical
University; 2002. http://www.amlab.ru/paper_max.shtml.
[3] Kartasheva EL, Bagdasarov GA, Boldarev AS, Gasilova IV, Dyachenko SV, Olkhovskaya OG, Shmyrov VA, Boldyrev SN, Gasilov
VA. Visualization of computational experiments in the field of 3D modeling of the emitting plasma, running on multiprocessor
systems using a Marple software pakage. Institute of matematical modelling RAS. Scientific Visualization. 2010. http://svjournal.com/2010-1/01/index.html.
[4] Ahrens J, Geveci B, Law C. ParaView: An End-User Tool for Large Data Visualization. Elsevier; 2005.
.
[5] Chuprina S, Aleksandrov N, Cherenkova N.
Proceedings of the 13th Interactive Computer Aided Learning International Conference ICL2010. Hasselt, Belgium; 15-17
September, 2010, p. 1248-1254.
[6] Chuprina S, Cherenkova N. Educational Scenario Testing and its Data Mining in the Immersive 3D Virtual Reality Environment.
Proceedings of the 9th European Conference on E-Learning ECEL-2010. Porto, Portugal; 4-5 November, 2010, p. 723-730.

731

