Available online at www.sciencedirect.com

ScienceDirect
This space
is reserved
for the
Procedia
header, do not use it
Procedia
Computer Science
108C
(2017) 828–837
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Coupled isogeometric Finite Element Method and
Hierarchical
Genetic Strategy
with
balanced
accuracy
Coupled isogeometric
Finite
Element
Method
and for
solving
optimization
inverse
problem
Hierarchical
Genetic
Strategy with
balanced
accuracy for
1
2
2
Barbara Barabasz
, Marcin
L
� oś , Maciej Woźniak
, Leszek
Siwik2 , and Stephen
solving
optimization
inverse
problem
1
Barrett
1
2
Barbara Barabasz
,
Marcin
L
�
oś
,
Maciej
Woźniak2 , Leszek Siwik2 , and Stephen
1
School of Computer Science and Statistics,
1 Trinity College Dublin, Ireland
Barrett
barabaszb@gmail.com,
stephen.barrett@tcd.ie
1

2
AGH University of Science and Technology, Kraków, Poland
School of Computer
Science and Statistics, Trinity College Dublin, Ireland
{los,macwozni,siwik}@agh.edu.pl
barabaszb@gmail.com, stephen.barrett@tcd.ie
2
AGH University of Science and Technology, Kraków, Poland
{los,macwozni,siwik}@agh.edu.pl

Abstract
The liquid fossil fuel reservoir exploitation problem (LFFEP) has not only economical signiﬁcation
but also strong natural environment impact. When the hydraulic fracturing technique is
Abstract
considered
point of view
it can(LFFEP)
be formulated
as only
an optimization
The liquid from
fossil the
fuelmathematical
reservoir exploitation
problem
has not
economical inverse
signiﬁproblem,
where
we
try
to
ﬁnd
optimal
locations
of
pumps
and
sinks
to
maximize
the amount
cation but also strong natural environment impact. When the hydraulic fracturing technique
is
of
the oil extracted
to minimize
theofcontamination
the groundwater.
In the paper,
we
considered
from the and
mathematical
point
view it can be of
formulated
as an optimization
inverse
present
of the
Hierarchical
Genetic
Strategy
(HGS) with
problem,combined
where wesolver
try toconsisting
ﬁnd optimal
locations
of pumps
and sinks
to maximize
the variable
amount
accuracy
for
solving
optimization
problem
and
isogeometric
ﬁnite
element
method
(IGA-FEM)
of the oil extracted and to minimize the contamination of the groundwater. In the paper, we
with
diﬀerent
meshsolver
size for
modeling
non-stationary
of the
non-linear
ﬂuidwith
in heterogepresent
combined
consisting
of athe
Hierarchical ﬂow
Genetic
Strategy
(HGS)
variable
neous
media.
The
algorithm
was
tested
and
compared
with
the
strategy
using
Simple
Genetic
accuracy for solving optimization problem and isogeometric ﬁnite element method (IGA-FEM)
Algorithm
(SGA)
as
optimization
algorithm
and
the
same
IGA-FEM
solver
for
solving
a direct
with diﬀerent mesh size for modeling a non-stationary ﬂow of the non-linear ﬂuid in heterogeproblem.
Additionally,
a
parallel
algorithm
for
non-stationary
simulations
with
isogeometric
L2
neous media. The algorithm was tested and compared with the strategy using Simple Genetic
projections
is
discussed
and
preliminarily
assessed
for
reducing
the
computational
cost
of
the
Algorithm (SGA) as optimization algorithm and the same IGA-FEM solver for solving a direct
solvers
consisting
of genetic
algorithm
and for
IGA-FEM
algorithm.
The theoretical
asymptotic
problem.
Additionally,
a parallel
algorithm
non-stationary
simulations
with isogeometric
L2
analysis
which
shows
the
correctness
of
algorithm
and
allows
to
estimate
computational
projections is discussed and preliminarily assessed for reducing the computational cost ofcosts
the
of
the strategy
is also
presented.
solvers
consisting
of genetic
algorithm and IGA-FEM algorithm. The theoretical asymptotic
analysis
which
shows
theoptimization,
correctness
of
algorithm
and hierarchical
allows to estimate
computational
costs
Keywords:
hybrid
global
inverse
problems,
genetic strategy,
isogeometric
©
2017 The
Authors.
Published
by Elsevier B.V.
Peer-review
under
responsibility
of the scientific committee of the International Conference on Computational Science
of
theelement
strategy
is also presented.
ﬁnite
method
Keywords: hybrid global optimization, inverse problems, hierarchical genetic strategy, isogeometric
ﬁnite element method

1

Introduction

The aim of solving the liquid fossil fuel reservoir exploitation problem (LFFEP), described and
1
Introduction
deﬁned in [19], is to ﬁnd optimal locations of pumps and sinks in the liquid fossil fuel reservoir
exploited
hydraulic
fracturing
method
to maximize
theproblem
amount (LFFEP),
of the oil described
extracted and
but
The aim ofwith
solving
the liquid
fossil fuel
reservoir
exploitation
deﬁned in [19], is to ﬁnd optimal locations of pumps and sinks in the liquid fossil fuel reservoir
1
exploited with hydraulic fracturing method to maximize the amount of the oil extracted but
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.153

1

	

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

simultaneously to minimize the environmental impact, namely the contamination of groundwater. It is assumed that the three-dimensional map of both: the natural formation layers and the
groundwater, was previously obtained with some imaging techniques. In [19] we propose combining evolutionary algorithm with IGA-FEM as a solver. The problem, however, is that every
single ﬁtness function evaluation requires expensive ﬁnite element method computations using
explicit isogeometric dynamics simulator [21, 9] for modeling and simulating the non-stationary
ﬂow of the non-linear ﬂuid in heterogeneous media. It lasts pretty long and consumes huge
amounts of computational resources.
Combining evolutionary heuristics with the ﬁnite element methods seems to be a proper
approach for solving the problem of LFFEP.
Also applying isogeometric ﬁnite element method (IGA-FEM) [3, 5, 10] seems to be a proper
methodology for solving this kind of simulations—especially because the fast direct solvers can
be used here [6, 7, 8].
Thus, to reduce the computational costs of the combined solver (GA+IGA-FEM) in this
paper we investigate applying the coupled solver consisting of the Hierarchical Genetic Strategy
(HGS) [14, 15, 16] with variable accuracy and the isogeometric ﬁnite element method (IGAFEM) with diﬀerent mesh sizes.
Additionally, we propose to utilize the parallel isogeometric ﬁnite element method for solving
the time-dependent problem of non-linear ﬂow in heterogeneous media for further computational
time reduction.

2

IGA-HGS–the combination of HGS and IGA-FEM as
an inverse problems solver

The hierarchical genetic strategy–HGS introduced by Kolodziej and Schaefer [14] enables eﬀective solving of global optimization problems using a variable, dynamically adapting accuracy.
It produces a tree-structured, dynamically changing set of dependent demes with a restricted
number of levels m. Each deme is governed by a separate instance of Simple Genetic Algorithm
(SGA). All demes work asynchronously and are synchronized by the message-passing mechanism
if necessary.
The demes of the lower order, closer to the root, perform a more chaotic search with lower
accuracy. They detect promising regions of the optimization landscape, where a more accurate
higher order demes are activated. In our case, the growing precision on consecutive levels of HGS
tree is obtained by using the genotypes of a diﬀerent length. The unique deme of the ﬁrst order
(root) utilizes the shortest genotypes, while the leaves utilize the longest ones. The maximum
diameter of the mesh δj associated with demes of order j determines the search accuracy at this
level of HGS tree. There is a coherency in the search between demes of diﬀerent order thanks
to the special kind of a hierarchical encoding that forms the sequence of a nested grids.
Each deme, except for the one of order m called leaves, sprouts the new child-deme after
the constant number of genetic epochs K called metaepoch. The child-deme is activated surrounding the best-ﬁtted individual, distinguished from the parental deme at the end of the
metaepoch. HGS implements also two additional mechanisms to reduce the redundancy of the
search process. They disable sprouting and reduce branches in regions already occupied or
explored.
For solving the optimization inverse problem under consideration we propose a coupled
strategy consisting of the isogeometric ﬁnite element method (IGA-FEM) for solving a direct
problem and Hierarchical Genetic Strategy (HGS) for solving the optimization one. To obtain
2

829

830	

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

Algorithm 1: IGA-HGS algorithm for branch of j th order with varying accuracy of the
ﬁtness function computation
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19

if j = 1 then
initialize root population P 0 ;
repeat
l←0;
if global stop condition then
STOP;
for all i ∈ P l do
solve direct problem for codej (i) using IGA-FEM with proper mesh size
depending on j;
compute the ﬁtness function fj (i) value;
if branch stop condition then
STOP;
perform selection according to the ﬁtness function value fj ;
perform genetic operations;
if NOT l mod K then
distinguish the best ﬁtted individual from P t ;
if NOT preﬁx comparison AND j < m then
sprout;
l ← l + 1;
until false;

better results we balance the accuracy of both methods. On each level of the HGS tree, we
compute ﬁtness function value using IGA-FEM solver with diﬀerent mesh size. Note, that all
individuals available in jth level deme also occur in j + 1th level deme. This coherence of
search strategy between all levels causes that solution found in the previous level propagates to
next one. It is easy to see that our strategy is based on HGS in the similar way as previously
presented hp-HGS [2]. Both hp-HGS and IGA-HGS employ diﬀerent strategies to increase the
accuracy of the numerical solution. The ﬁrst one employs hp adaptive ﬁnite element method
the second one employs uniform h and/or uniform p adaptation.
The coupled strategy called IGA-HGS is presented in Algorithm 1.

3

IGA-HGS asymptotic analysis

The main goal of the IGA-HGS asymptotic analysis is to compare it with diﬀerent strategy
solving that inverse problem. As the reference algorithm, we take single population SGA with
the same ﬁtness function fm as in IGA-HGS leaves. The size of SGA population ensures the
same initial coverage of the domain D by individuals as each of IGA-HGS leaf. It allows us to
estimate the eﬃciency of our strategy. According to the fact, that we do not utilize properties
of particular FEM methods, asymptotic analysis could be done in the same way as for hp-HGS
strategy [15, 1, 2]. For the sake of completeness, we present below the essential points of this
justiﬁcation. The full exposition, as well as proofs of theorems cited here, an interested reader
will ﬁnd in [15, 16, 17].
3

	

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

Because asymptotic guarantee of the success for SGA is already veriﬁed, so for verifying IGAHGS asymptotic guarantee of the success it is enough to prove that both algorithms are able to
ﬁnd the same set of minimizers [16]. To do this, the theory of SGA heuristic–genetic operator
with ﬁxed points [20] and the convergence results of SGA sampling measures [18] are used.
Let us denote by Ωj the SGA genetic universum of binary codes and by Gj : Λrj −1 → Λrj −1
genetic operator of all branches of order j in HGS tree. It depends only on the number of
genotypes rj , ﬁtness function fj and genetic operations applied in branches of order j. The
unit simplex Λrj −1 ⊂ Rrj stands for the set of frequency vectors of all possible demes of
order j. We assume that each genetic operator Gj has the unique ﬁxed point zj in Λrj −1
representing the limit population–the inﬁnite cardinality population after the inﬁnite number
of genetic epochs. Moreover, zj stands for the global attractor of Gj on Λrj −1 that means
∀x ∈ Λrj −1 limt→+∞ (Gj )t (x) = zj . Each deme x ∈ Λrj −1 of the
 order j may induce the
probabilistic measure Θ(x) on D given by the formula Θ(x)(A) = i,code(i)∈A xi where A ∈ D
is an arbitrary measurable set [18]. Let us denote Θ(zj ) by Θj and ηj as the cardinality of the
arbitrarily chosen deme of order j in IGA-HGS. We assume that SGA governing the evolution
in HGS branches are well tuned [18].
Theorem 1. Let t0 be the number of genetic epochs after which IGA-HGS has b branches of
maximal degree m and no new branches are sprouted. Then
∀ � > 0,

∀ η > 0,

∃ N ∈ N,

∃ W (N ) > t0 ,

so that for the arbitrary measurable set A ⊂ D
∀ ηm > N,

∀ W (N ) P r{|χtb,ηm (A) − Θm (A)| < �} > 1 − η

where
χtb,ηm =

1
(Θ(pt1,ηm ) + ... + Θ(ptb,ηm ))
b

stands for mean sampling measure on D, induced by all IGA-HGS leaves
The proof of this theorem is exactly the same as presented in [16], because any of the
particular FEM methods properties are used in it.
The second important feature of the HGS strategy is the jth deme probability of survival
in HGS tree. Each deme of jth order x ∈ Λrj −1 may induce the probabilistic measure on (D)
given by the density ρx ∈ Lp ((D)), p > 0 so we may establish mapping Ψj : Λrj −1 → M(D)
such that Ψj (x)(A) = A ρx (ξ)dξ for each measurable set A ⊂ D.
The space M(D) collects all probabilistic measures over the admissible set D. See details
in [18]. Let us denote ρj = ρzj and ψj = Ψzj . Because we assumed that SGA engine in
IGA-HGS tree is well tuned, densities ρj dominates on some closed sets C j ⊂ D with a strictly
positive Lebesgue measure. Each set C j surrounds the local extremes of the objective of the
inverse problem and is contained in their basins of attraction. Moreover, we assume that
C 1 ⊃ C 2 ⊃ ... ⊃ C m , because of grids in HGS are nested.
Theorem 2. Deme of order j, j = 2, ..., m in IGA-HGS tree survives with probability not
greater than κj given by formula
κj = ψ(C 1 )

j

ψk (C k )
ψk (C k−1 )

k=2

4

831

832	

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

Like in above we can implement proof presented in [15], according to the fact, that it does
not utilize any particular FEM method properties.
On the basis of the theorem 2 we can estimate the expected number of individuals in IGAHGS leaves as: �Ωsm−1 κm ηm , while for SGA it is approximated by �Ωsm−1 ηm
Because we assumed that both algorithms are well tuned, so κ < 1. It means that computational cost of a single epoch in SGA is greater than the respective cost in IGA-HGS leaves.
The cost of a single genetic epoch in all IGA-HGS branches is given by the formula:
η1 a1 +

m


�Ωj−1 κj ηj aj

j=2

where aj stands for the cost of solving the direct problem for individuals on jth order deme in
IGA-HGS tree.

4

Computational results

We apply a three-level HGS with IGA-FEM (IGA-HGS) in order to solve LFFEP problem.
In LFFEP problem we optimize two quantities namely the drained liquid D and groundwater
contamination C as described in [19]
We consider looking for optimal locations of three pumps and two sinks in the domain
[0, 1]3 . The goal of the optimization is to maximize resource extraction while minimizing the
underground water contamination. We employ a hierarchical strategy where we increase the
accuracy of the IGA-FEM solver while restricting the search to the local neighborhood of the
best individuals. As the basis functions, we use tensor products of quadratic B-splines in all
three directions. The sizes of the three-dimensional meshes are equal to 10 × 10 × 10 elements
on the top level, 16 × 16 × 16 on the second level and 32 × 32 × 32 elements at leaf branches of
the IGA-HGS tree.
The large size of the population, high mutation and crossing-over rate in the root enables
suﬃcient diversity of the search. Having smaller values of those parameters in leaves reduces
the enormous computational costs of the local searches. In presented experiments, as a stop
condition, we used a maximum number of epochs. The aim of our test is to compare the IGAHGS strategy with simple SGA strategy and show its potential for reducing the computational
cost of solving the problem deﬁned.
For comparison, we solve the same problem using similarly tuned SGAs with ﬁtness function
computed on IGA-FEM meshes with 32 × 32 × 32 elements and quadratic B-splines.
Times of evaluation of a single individual depend on the accuracy of the IGA-FEM solver.
For mesh sizes 10 × 10 × 10, 16 × 16 × 16 and 32 × 32 × 32 the evaluation times are equal to
4m46s, 17m10s and 10h23m, respectively, see table 1. This is because increasing the mesh size
requires reduction of the time step size and the number of the time steps, according to CFL
condition.
The total sequential execution time for IGA-HGS can be evaluated by summing up the
total number of evaluations performed on diﬀerent levels of the HGS tree multiplied by the
computing times and is equal to 52 days– see Table 2.
The SGA sequential computations to obtain the solution with similar accuracy takes 132
days. We can clearly see that using IGA-HGS provides a similar solution with two and half
times shorter execution time.
Sample solutions proposed by IGA-HGS and SGA are presented in ﬁg.1. In both cases an
amount of fossil fuel extracted and the groundwater contamination were both on the same level.
5

	

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

Level
Mesh size
Computing time

1
10 × 10 × 10
286

2
16 × 16 × 16
1030

3
32 × 32 × 32
37432

Table 1: Single IGA-FEM execution time in seconds for diﬀerent HGS tree levels
Mesh size
HGS
SGA

10 × 10 × 10
420 calls
0 calls

16 × 16 × 16
230 calls
0 calls

32 × 32 × 32
112 calls
305 calls

Total computing time
1405116s(52days)
11416760s(132days)

Table 2: Comparing IGA-HGS with balanced accuracy with SGA

5

Parallel algorithm for non-stationary simulations with
isogeometric L2 projections

For further computational time reduction, we utilize a parallel algorithm for non-stationary
simulations with isogeometric L2 projections described in [21].
The parallel version of the algorithm can be summarized with the pseudo-code as presented
in Algorithm 2.
Line 3 involves the parallel generation of the right-hand-side for the actual time step. Each
processor computes entries of the right-hand side corresponding to the assigned degrees of
freedom. Line 4 involves the call of the parallel alternating direction solver [21]. Since the
solution obtained from the solver is distributed into processors, and the supports of B-spline
basis functions spread over (p + 1)3 adjacent elements, we need to collect the contributions
from the neighboring processors, as computing right-hand side entry for step t + 1 for a given
degree of freedom requires values in step t of all degrees of freedom overlapping its support. To
ensure the eﬃcient communication, we employ a scheme consisting of several stages, wherein
each stage every single processor sends data to a single neighbor and receives data from the
other. Proposed communication pattern for 2D is presented in ﬁgure 2. Each processor P stores
needed part of the solution in an array R(ndofs loc , 3, 3), where ndofs loc denotes the maximal

Figure 1: Location of pumps and sinks generated by HGS (left image) and SGA (right image)
algorithm
6

833

834	

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

Algorithm 2: Parallel algorithm for non-stationary simulations with isogeometric L2
projections
1
2
3
4
5
6

begin
for t = 1 . . . T do
Ut ←− ComputeRHS(t, Dt, R);
Solve(Ut );
R(:, 2, 2, 2) ←− Ut ;
DistributeSpline(R)

Figure 2: Communication scheme for aggregation of the right-hand-side data.
number of degrees of freedom assigned to an element. Last two indices denote the neighbor
processor that owns the data fragment (so that (2, 2) denotes P itself, (3, 2) its right neighbor
etc.)
Figure 2 depicts four communication stages. In every single stage, all the processors send
data in one direction (red arrow, yellow block) and receive from the opposite side (blue arrow
and block). In the ﬁrst stage, data is sent to the right (upper left), then down (lower left), to
the left (upper right) and ﬁnally up (lower right). A three-dimensional version of the algorithm
is a natural extension of the 2D case. In our numerical experiments, we have partitioned the
computational domain into 4 × 4 × 4 sub-domains and we employed the parallel algorithm
for non-stationary simulations with isogeometric L2 projections using a diﬀerent number of
processors (1, 8,64).
In ﬁgure 3 some selected characteristics of described parallel algorithm for non-stationary
simulations with isogeometric L2 projections executed on Prometheus Linux cluster [13] in
ACK Cyfronet, a part of PL-grid infrastructure [4] with quadratic B-splines over 8 × 8 × 8,
16 × 16 × 16 and 32 × 32 × 32 elements meshes are presented. According to Courant-FriedrichsLevy (CFL) condition that requires reduction of the time step size while increasing the mesh
size the parameters of our experiments for diﬀerent sizes of the meshes took the below values.
Experiments with 8 × 8 × 8 mesh size have been performed with 313 time steps and the size
of the single time step has been set to 4 × 10−7 . Experiments with 16 × 16 × 16 mesh size
have been performed with 1250 time steps and the size of the single time step has been set to
1 × 10−7 . And ﬁnally, the experiments with 32 × 32 × 32 mesh size have been performed with
5000 time steps and the size of the single time step has been set to 0.25 × 10−7 .
As one may see in ﬁg. 3a) computation time varies from 240388[s] (8 processors, mesh size
7

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

Computation Time for different number of CPU and different mesh size

Total CPUs time consumed for different #CPU and different mesh size

262144
1.04858x106
262144

16384

Mesh size: 8
Mesh size: 16
Mesh size: 32

4096
1024

Time [s]

Time [s]

65536

65536
16384

64

1024
1

8

64
Number of CPU

a)

256

b)

Energy consumed for different #CPU and different mesh size

1.04858x106
262144
65536

8

64

Number of CPU

64
Number of CPU

95
Mesh size: 8
Mesh size: 16
Mesh size: 32

90
85
80
75

16384
1

8

CPU usage efficiency [%]

CPU efficiency [%]

4.1943x106

1

100

Mesh size: 8
Mesh size: 16
Mesh size: 32

1.67772x107

c)

Mesh size: 8
Mesh size: 16
Mesh size: 32

4096

256

Energy [J]

	

1

d)

8

Number of CPU

64

Figure 3: Selected characteristics of the parallel algorithm for non-stationary simulations with
isogeometric L2 projections

323 ) down to 246[s] (64 processors, mesh size 83 ). Running the algorithm sequentially on a
single processor for mesh size set to 323 exceeded the upper limit of the algorithm execution
time on the Prometheus cluster (7×24h). So naturally, the shortest was the experiment utilizing
64 processors. The situation is slightly diﬀerent when we look at the total CPUs working time
(computation time multiplied by the number of processors what is presented in ﬁg.3b).
So, increasing the number of processors from 8 to 64 for the mesh size set to 323 allowed us to
speed up the computation by 240388/45918 = 5.24 and the eﬃciency, in this case, equals 0.65.
Performing computation on the mesh size set to 163 the speed up equals 45016/2079 = 21.65
and the eﬃciency, in this case, equals 0.34 And ﬁnally, performing computation on the mesh
size set to 83 the speed up equals 1173/166 = 7.06 and the eﬃciency, in this case, equals 0.11.
In ﬁg. 3c) the total amount of energy (in Joules) consumed by all processors taking part in
the experiment(s) depending on the number of CPUs and size of the meshes is presented. As
one may see the amount of the energy varies from 39.9[M J] (eight processors, mesh size: 32)
down to 40.6[kJ] (8 processors, mesh size: 8).
In ﬁg. 3d) the eﬃciency of the CPU usage taking part in the experiment is presented.
It is measured as the CP U workingtime/computationtime. When the mesh of size 323 has
been used the CPU usage eﬃciency varies from 100% (single processor) down to 99.79% (64
processors). When the mesh of size 163 has been used the CPU usage eﬃciency varies from
100% (single processor) through 99.0% (8 processors) down to 97.76% (64 processors). And
ﬁnally, when the mesh of size 83 has been used the CPU usage eﬃciency varies from 100%
(single processor) through 98.10% (8 processors) down to 76.50% (64 processors).
All aforementioned values are completed in Table 3.
8

835

836	

al. /...Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Barbara
ElementBarabasz
Methodetand
B. Barabasz et al.

Mesh
size
8
8
8
16
16
16
32
32

#CPU
1
8
64
1
8
64
8
64

Ex. time[s]

Time×#CPU

1 173
246
166
45 016
7611
2079
240 388
45 918

1
1
10
45
60
133
1 923
2 938

173
968
624
016
888
056
104
752

Energy[J]

4
1
1
39
36

117
40
113
401
292
517
923
807

294
647
488
432
957
577
627
172

CPU usage

Memory[GB]

100%
98.10%
76.50%
100%
99.0%
97.76%
99.90%
99.79%

0.097
0.097
1.184
0.097
0.097
1.184
0.097
1.184

Table 3: Selected characteristics of the parallel algorithm for non-stationary simulations with
isogeometric L2 projections

6

Conclusions

Proposed strategy of coupling HGS with IGA-FEM called IGA-HGS with balanced accuracy
seems to be a good direction to reduce the computational cost of solving optimization inverse
problems. In problem under consideration, it gives us more than twice speed up. Firstly it
decreases the number of objective function evaluations by using adaptation in HGS. Secondly,
the cost of the ﬁtness function evaluation is decreased by using diﬀerent mesh sizes in IGA-FEM
solver. Asymptotic analysis showes the correctness of algorithm and its ability to ﬁnd a solution.
It also allows us to estimate the computational cost of strategy. In the future work, we plan
to analyze the ﬁtness function behavior and HGS parameters to tune algorithm up in a better
way. The standard deviation of genetic mixing (mutation and crossover) should be properly
correlated with the search accuracy. We also will use conditional sprouting, branch reduction,
which should reduce computational time even further. Also applying the parallel algorithm for
non-stationary simulations with isogeometric L2 projections seems to be a promising technique
for further computational time reduction since according to presented results, increasing the
number of processors from 1 up to 64 we obtained speedup values equals to 5.24, 21.65 and
7.06 for diﬀerent mesh sizes. In the future, further investigation here is planned to ﬁnd–
among the other–the best conﬁguration of the algorithm taking not only computational time
into account but also the resources consumed. The alternative approach to isogeometric ﬁnite
element method simulations would be the adaptive ﬁnite element method [11] and its parallel
counterpart [12]. Our future work may involve incorporating parallel adaptive FEM solver.

7

Acknowledgments

This work was supported by National Science Centre, Poland, grant no. 2014/15/N/ST6/04662.
This research was supported in part by PL-Grid Infrastructure.

References
[1] B. Barabasz, R. Schaefer, M. Paszynski, Handling ambiguous inverse problems by the adaptative
genetic strategy hp-HGS, Computational Science LNCS 5545 pp. 904-91, 2009

9

	

BarbaraMethod
Barabaszand
et al..../ Procedia Computer Science 108C (2017) 828–837
Coupled isogeometric Finite Element
B. Barabasz et al.

[2] B. Barabasz, E. Gajda-Zagorska, S. Migorski, M. Paszynski, R. Schaefer, M. Smolka, A hybrid
algorithm for solving inverse problems in elasticity, International Journal of Applied Mathematics
and Computer Science vol. 24 no. 4, pp. 865-886, 2014
[3] Y. Bazilevs, L. Beirao da Veiga, J.A. Cottrell, T.J.R. Hughes, and G. Sangalli, Isogeometric analysis: Approximation, stability and error estimates for h-reﬁned meshes, Mathematical Methods
and Models in Applied Sciences, 16 (2006) 1031–1090.
[4] M. Bubak, J. Kitowski, K. Wiatr, EScience on Distributed Computing Infrastructure: Achievements of PLGrid Plus Domain-speciﬁc Services and Tools, vol. 8500 (2014) Springer
[5] J. A. Cottrell, T. J. R. Hughes, Y. Bazilevs, Isogeometric Analysis: Toward Uniﬁcation of CAD
and FEA John Wiley and Sons, (2009)
[6] L. Gao, V.M. Calo, Fast Isogeometric Solvers for Explicit Dynamics, Computer Methods in Applied
Mechanics and Engineering (2014).
[7] M. L
� oś, M. Woźniak, M. Paszyński, L. Dalcin, V.M. Calo, Dynamics with Matrices Possessing
Kronecker Product Structure, Procedia Computer Science 51 (2015) 286–295
[8] M. L
� oś, M. Paszyński, A. K�lusek, W. Dzwinel, Application of fast isogeometric L2 projection
solver for tumor simulations, Computer Methods in Applied Mechanics and Engineering (2017) in
press.
[9] M. L
� oś, M. Woźniak, M. Paszyński, A. Lenharth, K. Pingali, IGA-ADS : Isogeometric Analysis
FEM using ADS solver, Computer & Physics Communications (2017) submitted.
[10] J.A. Cottrel, T.J.R. Hughes, Y. Bazilevs, Isogeometric Analysis. Toward Integration of CAD and
FEA, Wiley, (2009).
[11] A. Paszyńska, E. Grabska, M. Paszyński, A Graph Grammar Model of the hp Adaptive Three
Dimensional Finite Element Method. Part II. Fundamenta Informaticae, 114 (2) (2012) 183-201
[12] M. Paszyński, On the Parallelization of Self-Adaptive hp-Finite Element Methods Part I. Composite Programmable Graph Grammar Model, Fundamenta Informaticae, 93(4) (2009) 411-434
[13] http://www.cyfronet.krakow.pl/computers/15226,artykul,prometheus.html
[14] R. Schaefer, J. Kolodziej, Genetic search reinforced by the population hierarchy, Foundations of
Genetic Algorithms 7, pp. 383-399, 2003
[15] R. Schaefer, B. Barabasz, Asymptotic behavior of hp-HGS (hp-adaptive Finite Element Method
coupled with the hierarchic genetic strategy) by solving inverse problems, LNCS Vol. 5103, pp.
682-692, 2008
[16] R. Schaefer, B. Barabasz, M. Paszynski, Asymptotic guarantee of success of the hp-HGS strategy,
Proc. Of Conf. on Evolutionary Algorithms and Global Optimization, vol. 165, pp. 189-196, 2008
[17] R. Schaefer, B. Barabasz, M. Paszynski, Solving inverse problems by the multi-deme hierarchic
genetic strategy, Proc. of the IEEE Congress on Evolutionary Computations CEC 2009, pp. 31573163, 2009
[18] R. Schaefer (with chapter 6 written by Telega H.), Foundation of Genetic Global Optimization,
Studies in Computational IntelligencenSeries 74, Springer 2007
[19] L. Siwik, M. L
� oś, M. Kisiel-Dorohinicki, A. Byrski, Hybridization of Isogeometric Finite Element
Method and Evolutionary Multi-agent System as a Tool-set for Multiobjective Optimization of
Liquid Fossil Fuel Reserves Exploitation with Minimizing Groundwater Contamination, Procedia
Computer Science, 80 (2016) 792–803
[20] M. D. Vose, The Simple Genetic Algorithm, MIT Press, 1999
[21] M. Woźniak, M. L
� oś, M. Paszyński, L. Dalcin, V. Calo, Parallel fast isogeometric solvers for
explicit dynamics, Computing and Informatics (2017) in press.

10

837

